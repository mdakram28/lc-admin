{
    "username": "Ronak9910",
    "submission": "class Solution {\npublic:\n    int MODULO = 1'000'000'007;\n    int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int numElements, vector<vector<int>>& requirements) {\n        unordered_map<int, int> requirementsMap;\n        for (const auto& req : requirements) {\n            requirementsMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> dp(numElements + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= numElements; ++length) {\n            for (int invCount = 0; invCount <= MAX_INVERSIONS; ++invCount) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInvCount = invCount - newPos;\n                    if (prevInvCount >= 0) {\n                        dp[length][invCount] = (dp[length][invCount] + dp[length - 1][prevInvCount]) % MODULO;\n                    }\n                }\n            }\n\n            if (requirementsMap.find(length) != requirementsMap.end()) {\n                int targetInvCount = requirementsMap[length];\n                for (int invCount = 0; invCount <= MAX_INVERSIONS; ++invCount) {\n                    if (invCount != targetInvCount) {\n                        dp[length][invCount] = 0;\n                    }\n                }\n            }\n        }\n\n        long totalCount = 0;\n        for (long count : dp[numElements]) {\n            totalCount = (totalCount + count) % MODULO;\n        }\n\n        return static_cast<int>(totalCount);\n    }\n};",
    "submit_ts": "1719070341",
    "subm_id": "1296820645"
}