{
    "username": "XxFALCONxX",
    "submission": "const long long MOD = 1e9 + 7;\n\nstruct Node {\n    // long long incl, excl;\n    long long inc;\n    long long incl;\n    long long incr;\n    long long inclr;\n};\n\nclass SegmentTree {\npublic:\n    vector<Node> tree;\n    long long n;\n    \n    void build(vector<long long>& nums, long long v, long long tl, long long tr) {\n        if (tl == tr) {\n            tree[v].inc = 0; // including neither left most or right most\n            tree[v].incl = 0; // including left most element but not right\n            tree[v].incr = 0; // including right most element but not left\n            tree[v].inclr = max(nums[tl], (long long)0); // including both leftmost and rightmost element\n        } else {\n            long long tm = (tl + tr) / 2;\n            build(nums, v*2, tl, tm);\n            build(nums, v*2+1, tm+1, tr);\n            merge(v);\n        }\n    }\n\n    void update(long long v, long long tl, long long tr, long long pos, long long new_val) {\n        if (tl == tr) {\n            // tree[v] = {new_val, 0};\n            tree[v].inc = 0; // including neither left most or right most\n            tree[v].incl = 0; // including left most element but not right\n            tree[v].incr = 0; // including right most element but not left\n            tree[v].inclr = max(new_val, (long long)0); // including both leftmost and rightmost element\n        } else {\n            long long tm = (tl + tr) / 2;\n            if (pos <= tm) {\n                update(v*2, tl, tm, pos, new_val);\n            } else {\n                update(v*2+1, tm+1, tr, pos, new_val);\n            }\n            merge(v);\n        }\n    }\n\n    Node query(long long v, long long tl, long long tr, long long l, long long r) {\n        if (l > r) return {0, 0};\n        if (l == tl && r == tr) return tree[v];\n        \n        long long tm = (tl + tr) / 2;\n        Node left_part = query(v*2, tl, tm, l, min(r, tm));\n        Node right_part = query(v*2+1, tm+1, tr, max(l, tm+1), r);\n        return combine(left_part, right_part);\n    }\n\n    void merge(long long v) {\n        Node left = tree[v*2];\n        Node right = tree[v*2+1];\n        tree[v] = combine(left, right);\n    }\n\n    Node combine(Node left, Node right) {\n        Node res;\n        // res.incl = max(left.excl + right.incl, left.incl + right.excl);\n        // res.excl = max(left.incl, left.excl) + max(right.incl, right.excl);\n        // res.incl = left.incl + \n        \n        // including neither left most or right most\n        res.inc = max(max(left.incr, left.inc) + right.inc, left.inc + max(right.inc, right.incl));\n        \n        res.incl = max(max(left.incl, left.inclr) + right.inc, left.incl + max(right.incl, right.inc));\n        \n        res.incr = max(max(left.incr, left.inc) + right.incr, left.inc + max(right.incr, right.inclr));\n        \n        res.inclr = max(left.incl + right.inclr, left.inclr + right.incr);\n        return res;\n    }\n\n    SegmentTree(vector<long long>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 1, 0, n - 1);\n    }\n\n    void update(long long pos, long long new_val) {\n        update(1, 0, n - 1, pos, new_val);\n    }\n\n    long long query() {\n        Node result = query(1, 0, n - 1, 0, n - 1);\n        return max(max(result.inc, result.inclr), max(result.incl, result.incr));\n    }\n};\n\nclass Solution {\npublic:\n    long long maximumSumSubsequence(vector<int>& numsi, vector<vector<int>>& queries) {\n        vector<long long> nums; for(auto i:numsi) nums.push_back(i);\n        SegmentTree st(nums);\n        long long result = 0;\n\n        // for (long long i = 0; i < q; i++) {\n        for (auto q: queries) {\n            long long pos = q[0], xi = q[1];\n            st.update(pos, xi);\n            // for(auto i:st.tree) cout<<i.inc<<\" \"<<i.incl<<\" \"<<i.incr<<\" \"<<i.inclr<<\" || \"; cout<<endl;\n            result = (result + st.query()) % MOD;\n        }\n\n        return result;\n\n    }\n};",
    "submit_ts": "1716694269",
    "subm_id": "1268111023"
}