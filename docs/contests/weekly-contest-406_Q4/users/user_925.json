{
    "username": "rajkothiyal",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Convert int arrays to Integer arrays for easier sorting\n        Integer[] horizontal = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vertical = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        // Sort both horizontal and vertical cut costs in descending order\n        Arrays.sort(horizontal, Collections.reverseOrder());\n        Arrays.sort(vertical, Collections.reverseOrder());\n        \n        // Initialize counters for horizontal and vertical cuts\n        int horizontalCuts = 0;\n        int verticalCuts = 0;\n        \n        // Pointers to iterate through sorted cut arrays\n        int i = 0, j = 0;\n        \n        // Variable to keep track of total cost, use long to handle large sums\n        long totalCost = 0;\n        \n        // Iterate through both arrays until we reach the end of one\n        while (i < horizontal.length && j < vertical.length) {\n            // If the current horizontal cut cost is greater than or equal to the vertical cut cost\n            if (horizontal[i] >= vertical[j]) {\n                // Add the cost of the current horizontal cut multiplied by the number of vertical pieces\n                totalCost += (long) horizontal[i] * (verticalCuts + 1);\n                // Increment the number of horizontal cuts made\n                horizontalCuts++;\n                // Move to the next horizontal cut\n                i++;\n            } else {\n                // Add the cost of the current vertical cut multiplied by the number of horizontal pieces\n                totalCost += (long) vertical[j] * (horizontalCuts + 1);\n                // Increment the number of vertical cuts made\n                verticalCuts++;\n                // Move to the next vertical cut\n                j++;\n            }\n        }\n        \n        // If there are remaining horizontal cuts, process them\n        while (i < horizontal.length) {\n            // Add the cost of the remaining horizontal cuts multiplied by the number of vertical pieces\n            totalCost += (long) horizontal[i] * (verticalCuts + 1);\n            i++;\n        }\n        \n        // If there are remaining vertical cuts, process them\n        while (j < vertical.length) {\n            // Add the cost of the remaining vertical cuts multiplied by the number of horizontal pieces\n            totalCost += (long) vertical[j] * (horizontalCuts + 1);\n            j++;\n        }\n        \n        // Return the total minimum cost\n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720925641",
    "subm_id": "1320261430"
}