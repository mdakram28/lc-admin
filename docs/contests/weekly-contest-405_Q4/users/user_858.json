{
    "username": "fighter_phoenix",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        target_len = len(target)\n        num_words = len(words)\n        word_cost_map = {}\n        \n        for index, word in enumerate(words):\n            word_cost_map[word] = min(word_cost_map.get(word, float('inf')), costs[index])\n        \n        dp = [float('inf')] * (target_len + 1)\n        dp[0] = 0\n        \n        for i in range(1, target_len + 1):\n            for word in word_cost_map:\n                word_len = len(word)\n                if i >= word_len and target[i - word_len:i] == word:\n                    dp[i] = min(dp[i], dp[i - word_len] + word_cost_map[word])\n                    \n        return dp[target_len] if dp[target_len] != float('inf') else -1\n",
    "submit_ts": "1720322091",
    "subm_id": "1312340432"
}