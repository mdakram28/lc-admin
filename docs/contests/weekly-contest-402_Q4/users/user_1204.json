{
    "username": "nguyenquocthao00",
    "submission": "def countpeak(a):\n    for i in range(1, len(a)-1):\n        if a[i]>max(a[i-1],a[i+1]): return 1\n    return 0\n\nclass Node:\n    def __init__(self, lo, hi, left,right, data):\n        self.lo,self.hi,self.left,self.right=lo,hi,left,right\n        self.data = data\n        self.n = countpeak(data)\n    def fix(self):\n        a,b = self.left.data, self.right.data\n        self.data, self.n = a+b, self.left.n + self.right.n\n        if len(self.data)<=4: self.n += countpeak(self.data)\n        else:\n            self.data = a[:2] + b[-2:]\n            self.n += countpeak(a[-2:] + b[:2])\n    def update(self, i, v):\n        # print('update', i, v, {\"lo\": self.lo, \"hi\": self.hi, \"data\": self.data, \"n\": self.n})\n        if self.lo<=i and i<=self.hi and not self.left:\n            self.data[i-self.lo] = v\n            self.n = countpeak(self.data)\n            return\n        if self.left.hi >= i: self.left.update(i,v)\n        else: self.right.update(i,v)\n        self.fix()\n    def query(self, l, r):\n        # print('query', l, r, {\"lo\": self.lo, \"hi\": self.hi, \"data\": self.data, \"n\": self.n})\n        if self.hi<l or self.lo>r or self.n==0: return 0\n        if self.lo>=l and self.hi <= r: \n            return self.n\n        if not self.left:\n            return countpeak(self.data[max(0, l-self.lo): min(4, r+1-self.lo)])\n        if self.left.hi >=r: return self.left.query(l,r)\n        if self.right.lo<=l: return self.right.query(l,r)\n        res=self.left.query(l,r) + self.right.query(l,r)\n        a=self.left.data\n        if self.left.hi == l: a=a[-1:]\n        else: a=a[-2:]\n        b= self.right.data[:2]\n        if self.right.lo == r: b=b[:1]\n        else: b=b[:2]\n        # print('fdnfdn',res, a, b)\n        return res + countpeak(a+b)\n        \ndef createNode(nums):\n    def create(lo,hi):\n        if lo==hi: return Node(4*lo,4*hi+3,None,None,nums[4*lo: 4*lo+4])\n        mid=(lo+hi)//2\n        res=Node(4*lo,4*hi+3,create(lo,mid),create(mid+1,hi),[0,0,0,0])\n        res.fix()\n        return res\n    return create(0, len(nums)//4-1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        while len(nums)%4>0: nums.append(1000000)\n        node=createNode(nums)\n        res=[]\n        for q in queries:\n            if q[0]==1:\n                res.append(node.query(q[1], q[2]))\n            else:\n                node.update(q[1], q[2])\n        return res\n\n        ",
    "submit_ts": 1718508894.0
}