{
    "username": "22iranc8911s",
    "submission": "class Solution {\npublic:\n    const int MOD = 1000000007;\n    const int MAX_INVERSIONS = 400;\n\n    map<int, int> initializeRequirements(vector<vector<int>>& requirements) {\n        map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        return reqMap;\n    }\n\n    vector<vector<int>> calculatePermutations(int n, const map<int, int>& reqMap) {\n        vector<vector<int>> dp(n + 1, vector<int>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            vector<vector<int>> new_dp(n + 1, vector<int>(MAX_INVERSIONS + 1, 0));\n\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        new_dp[length][inv] = (new_dp[length][inv] + dp[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                int targetInv = reqMap.at(length);\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != targetInv) {\n                        new_dp[length][inv] = 0;\n                    }\n                }\n            }\n\n            dp = new_dp;\n        }\n\n        return dp;\n    }\n\n    int calculateResult(int n, const vector<vector<int>>& dp) {\n        int result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + dp[n][inv]) % MOD;\n        }\n        return result;\n    }\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        map<int, int> reqMap = initializeRequirements(requirements);\n        vector<vector<int>> dp = calculatePermutations(n, reqMap);\n        int result = calculateResult(n, dp);\n        return result;\n    }\n};\n",
    "submit_ts": 1719071149.0
}