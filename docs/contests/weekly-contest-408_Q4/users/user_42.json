{
    "username": "yzkkai",
    "submission": "class Solution {\npublic:\n    bool banana(const vector<int>& a, const vector<int>& b) {\n        long long dx = a[0] - b[0], dy = a[1] - b[1], dr = a[2] + b[2];\n        return dx * dx + dy * dy <= dr * dr;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n = size(c);\n        vector<int> dsu(n), t(n), d(n), l(n), r(n);\n        iota(dsu.begin(), dsu.end(), 0);\n        for (int i = 0; i < n; ++i) {\n            t[i] = c[i][1] + c[i][2];\n            d[i] = c[i][1] - c[i][2];\n            l[i] = c[i][0] - c[i][2];\n            r[i] = c[i][0] + c[i][2];\n        }\n\n        auto find = [&](auto& self, int cur) -> int {\n            return dsu[cur] == cur ? cur : dsu[cur] = self(self, dsu[cur]);\n        };\n\n        auto merge = [&](int u, int v) -> void {\n            u = find(find, u);\n            v = find(find, v);\n            if (u == v) return;\n            dsu[u] = v;\n            t[v] = max(t[v], t[u]);\n            d[v] = min(d[v], d[u]);\n            l[v] = min(l[v], l[u]);\n            r[v] = max(r[v], r[u]);\n        };\n\n        for (int i = 0; i < n; ++i)\n            for (int j = 0; j < i; ++j) {\n                if (banana(c[i], c[j]))\n                    merge(i, j);\n            }\n        \n\n        bool ok = 1;\n        for (int i = 0; i < n; ++i) {\n            if (dsu[i] != i) continue;\n            if (l[i] <= 0 && r[i] >= X) ok = 0;\n            if (d[i] <= 0 && t[i] >= Y) ok = 0;\n            if (t[i] >= Y && r[i] >= X) ok = 0;\n            if (d[i] <= 0 && l[i] <= 0) ok = 0;\n        }\n\n        return ok;\n    }\n};",
    "submit_ts": "1722137328",
    "subm_id": "1335760623"
}