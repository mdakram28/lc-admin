{
    "username": "laughing-parepvg",
    "submission": "class BIT:\n    def __init__(self, n):\n        self.n = n\n        self.max_tree = [0] * (n + 1)\n\n    def update(self, idx, val):\n        while idx <= self.n:\n            self.max_tree[idx] = max(self.max_tree[idx], val)\n            idx += idx & (-idx)\n\n    def query(self, idx):\n        res = 0\n        while idx > 0:\n            res = max(res, self.max_tree[idx])\n            idx -= idx & (-idx)\n        return res\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        mx=0\n        d=[0]\n        for op in queries:\n            mx=max(mx,op[1])\n            if op[0]==1:\n                d.append(op[1])\n        mx+=5\n        bit=BIT(mx)\n        q=len(queries)\n        res=[]\n        d.sort()\n        d.append(mx)\n        print(d)\n        for i in range(1,len(d)):\n            bit.update(d[i],d[i]-d[i-1])\n            #print(d[i],d[i]-d[i-1])\n        sl=SortedList(d)\n        for i in range(q-1,-1,-1):\n            op=queries[i]\n            if op[0]==1:\n                x=op[1]\n                sl.remove(x)\n                idx=sl.bisect_left(x)\n                pre=sl[idx-1]\n                nxt=sl[idx]\n                #bit.update(x,x-pre)\n                bit.update(nxt,nxt-pre)\n                #print(x,pre,nxt,sl)\n            else:\n                x,sz=op[1:]\n                #print(x,sz,bit.query(x),sl)\n                if bit.query(x)>=sz:\n                    res.append(True)\n                else:\n                    idx=sl.bisect_left(x)\n                    pre=sl[idx-1]\n                    nxt=sl[idx]\n                    #print(pre,nxt)\n                    if nxt-pre>=sz and pre+sz<=x:\n                        res.append(True)\n                    else:\n                        res.append(False)\n        return res[::-1]\n                \n        \n\n        ",
    "submit_ts": 1716650802.0
}