{
    "username": "hty50",
    "submission": "import sys\nfrom typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.kids = [None] * 26\n        self.cost = sys.maxsize\n        self.end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.head = TrieNode()\n\n    def insert_word(self, word: str, price: int):\n        current = self.head\n        for ch in word:\n            idx = ord(ch) - ord('a')\n            if not current.kids[idx]:\n                current.kids[idx] = TrieNode()\n            current = current.kids[idx]\n        current.cost = min(price, current.cost)\n        current.end_of_word = True\n\n    def get_head(self):\n        return self.head\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        n = len(target)\n        min_cost = [sys.maxsize] * (n + 1)\n\n        for i in range(len(words)):\n            trie.insert_word(words[i], costs[i])\n\n        min_cost[0] = 0\n\n        for i in range(n):\n            if min_cost[i] == sys.maxsize:\n                continue\n\n            current = trie.get_head()\n            for j in range(i, n):\n                idx = ord(target[j]) - ord('a')\n                if not current.kids[idx]:\n                    break\n                current = current.kids[idx]\n                if current.end_of_word:\n                    min_cost[j + 1] = min(min_cost[j + 1], min_cost[i] + current.cost)\n\n        return -1 if min_cost[n] == sys.maxsize else min_cost[n]",
    "submit_ts": "1720322471",
    "subm_id": "1312350823"
}