{
    "username": "sazzysaturn",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1;\n        int m = edges2.size()+1;\n        vector<vector<int>> graph1(edges1.size()+1, vector<int>());\n        vector<vector<int>> graph2(edges2.size()+1, vector<int>());\n        for(int i=0;i<edges1.size();i++){\n            graph1[edges1[i][0]].push_back(edges1[i][1]);\n            graph1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        for(int i=0;i<edges2.size();i++){\n            graph2[edges2[i][0]].push_back(edges2[i][1]);\n            graph2[edges2[i][1]].push_back(edges2[i][0]);\n        }\n        \n        queue<int> q;\n        vector<int> visited(n,0);\n        for(int i=0;i<n;i++){\n            if(graph1[i].size()==1){\n                // cout << 1 << \" \" << i << endl;\n                q.push(i);\n                visited[i] = 1;\n            }\n        }\n        int ans1=0,ans2=0;\n        int dis1 = 0;\n        vector<int> rem(n,0);\n        while(!q.empty()){\n            int size = q.size();\n            int added = 0;\n            for(int i=0;i<size;i++){\n                int temp = q.front();\n                q.pop();\n                for(int j=0;j<graph1[temp].size();j++){\n                    rem[graph1[temp][j]]++;\n                    if(!visited[graph1[temp][j]] && graph1[graph1[temp][j]].size()-rem[graph1[temp][j]]==1){\n                        // cout << temp << \" \" << graph1[temp][j] << endl;\n                        q.push(graph1[temp][j]);\n                        added++;\n                        visited[graph1[temp][j]]=1;\n                    }\n                }\n            }\n            if(size!=1 || added!=0){\n                dis1++;\n                if(added!=0) ans1+=2;\n                else ans1 += 1;\n            }\n            // cout << dis1 << endl;\n        }\n        queue<int> q2;\n        vector<int> visited2(m,0);\n        for(int i=0;i<m;i++){\n            if(graph2[i].size()==1){\n                // cout << 2 << \" \" << i << endl;\n                q2.push(i);\n                visited2[i] = 1;\n            }\n        }\n        int dis2 = 0;\n        vector<int> rem2(m,0);\n        while(!q2.empty()){\n            int size = q2.size();\n            int added = 0;\n            for(int i=0;i<size;i++){\n                int temp = q2.front();\n                q2.pop();\n                for(int j=0;j<graph2[temp].size();j++){\n                    rem2[graph2[temp][j]]++;\n                    if(!visited2[graph2[temp][j]] && graph2[graph2[temp][j]].size()-rem2[graph2[temp][j]]==1){\n                        q2.push(graph2[temp][j]);\n                        added++;\n                        visited2[graph2[temp][j]]=1;\n                    }\n                }\n            }\n            if(size!=1 || added!=0){\n                dis2++;\n                if(added!=0) ans2+=2;\n                else ans2 += 1;\n            }\n            // cout << dis2 << endl;\n        }\n        // cout << dis1 << \" \" << dis2 << endl;\n        return max({dis1+dis2+1,ans1,ans2});\n    }\n};",
    "submit_ts": "1719718914",
    "subm_id": "1304429195"
}