{
    "username": "huionhs64",
    "submission": "import math\nfrom typing import *\nfrom pprint import pprint\nfrom functools import cache\nfrom bisect import bisect_left, bisect_right\nimport collections\nfrom copy import deepcopy\nimport heapq\nfrom queue import PriorityQueue\n\nMOD = 10 ** 9 + 7\nP = 256\n\n\nclass RangeManager:\n    def __init__(self):\n        self.ranges = []\n\n    def add_range(self, new_range):\n        new_start, new_end = new_range\n        removed_ranges = []\n        new_ranges = []\n        \n        # Find the insertion points\n        left = bisect_left(self.ranges, (new_start, new_start))\n        right = bisect_right(self.ranges, (new_end, new_end))\n        \n        # Merge overlapping ranges, ensuring no adjacent ranges are merged\n        if left > 0 and self.ranges[left-1][1] > new_start:\n            left -= 1\n            new_start = min(new_start, self.ranges[left][0])\n            new_end = max(new_end, self.ranges[left][1])\n        \n        for i in range(left, right):\n            if self.ranges[i][0] <= new_end and self.ranges[i][1] >= new_start:\n                removed_ranges.append(self.ranges[i])\n                new_start = min(new_start, self.ranges[i][0])\n                new_end = max(new_end, self.ranges[i][1])\n\n        # Add non-overlapping ranges before the new range\n        new_ranges.extend(self.ranges[:left])\n        # Add the new merged range\n        new_ranges.append((new_start, new_end))\n        # Add non-overlapping ranges after the new range\n        new_ranges.extend(self.ranges[right:])\n        \n        self.ranges = new_ranges\n        added_range = (new_start, new_end)\n\n        return removed_ranges, added_range\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n\n        graph = collections.defaultdict(list)\n\n        for i in range(n - 1):\n            graph[i].append(i + 1)\n        res = []\n        removed = set()\n        current_dst = n - 1\n        ranges = RangeManager()\n        for u, v in queries:\n            removed_range, added_range = ranges.add_range([u, v])\n            # print(u,v)\n            # print(\"rm\", removed_range)\n            # print(\"ad\", added_range)\n            for a, b in removed_range:\n                current_dst += (b - a - 1)\n            a, b = added_range\n            current_dst -= (b - a - 1)\n            res.append(current_dst)\n\n        return res",
    "submit_ts": "1722740814",
    "subm_id": "1343729362"
}