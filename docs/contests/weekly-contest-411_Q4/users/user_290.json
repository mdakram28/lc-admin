{
    "username": "\u601d",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        # preOnes = [0] * (n + 1)\n        # for i in range(1, n + 1):\n        #     preOnes[i] = preOnes[i - 1] + 1 if s[i - 1] == '1' else 0\n        twor = [n] * n\n\n        r = -1\n        zeros, ones = 0, 0\n        for i in range(n):\n            while zeros <= k or ones <= k:\n                r += 1\n                if r == n:\n                    break\n                if s[r] == '1':\n                    ones += 1\n                else:\n                    zeros += 1\n\n            twor[i] = r\n            if r == n:\n                break\n            if s[i] == '1':\n                ones -= 1\n            else:\n                zeros -= 1\n        preSum = [0] * (n + 1)\n        for i in range(1, n + 1):\n            preSum[i] = preSum[i - 1] + twor[i-1]\n\n        m = len(queries)\n        ans = [0] * m\n        for i, (l, r) in enumerate(queries):\n            sz = (r - l) + 1\n            res = (sz + 1) * sz // 2\n            idx = bisect_right(twor,r,l,r+1)\n            if idx == l:\n                ans[i] = res\n                continue\n            else:\n                sz = idx-l\n                v = (r+1) * sz - (preSum[idx]-preSum[l])\n                ans[i] = res - v\n\n        return ans",
    "submit_ts": "1723953158",
    "subm_id": "556415915"
}