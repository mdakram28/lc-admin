{
    "username": "yui8",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int[][] dp = new int[nums.length][k + 1];\n        int result = 1;\n        int[] cnt = new int[k + 1];\n        Arrays.fill(cnt, -1);\n        Map<Integer, Integer>[] map = new HashMap[k + 1];\n        for (int j = 0; j <= k; j++) {\n            map[j] = new HashMap<>();\n        }\n        for (int i = 0; i < nums.length; i++) {\n            for (int j = 0; j <= k; j++) {\n                dp[i][j] = 1;  \n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + cnt[l]);\n                }\n                if (map[j].containsKey(nums[i])) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + map[j].get(nums[i]));\n                }\n                result = Math.max(result, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                cnt[j] = Math.max(cnt[j], dp[i][j]);\n                map[j].put(nums[i], Math.max(map[j].getOrDefault(nums[i], 0), dp[i][j]));\n            }\n        }\n        return result;    \n    }\n}",
    "submit_ts": 1717861800.0
}