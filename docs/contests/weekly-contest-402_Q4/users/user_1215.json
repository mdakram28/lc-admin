{
    "username": "fan_hadoop",
    "submission": "class Solution {\n    Node head;\n    int[] nums;\n    int n;\n    public void popup(Node node){\n        node.cnt = node.ln.cnt + node.rn.cnt;\n        if(node.ln.rg && node.ln.rv > node.rn.lv){\n            node.cnt++;\n        }\n        if(node.rn.lg && node.rn.lv > node.ln.rv){\n            node.cnt++;\n        }\n        node.childCnt = node.ln.childCnt+node.rn.childCnt;\n        node.lv = node.ln.lv;\n        node.rv = node.rn.rv;\n        if(node.ln.childCnt==1){\n            node.lg = node.ln.lv > node.rn.lv;\n        }else{\n            node.lg = node.ln.lg;\n        }\n        if(node.rn.childCnt==1){\n            node.rg = node.rn.rv > node.ln.rv;\n        }else{\n            node.rg = node.rn.rg;\n        }\n    }\n    public void init(int l, int r, Node node){\n        if(l==r){\n            node.lv = nums[l];\n            node.rv = nums[l];\n            node.childCnt = 1;\n            return;\n        }\n        int mid = ((r-l)>>1) + l;\n        if(node.ln == null) node.ln = new Node();\n        if(node.rn == null) node.rn = new Node();\n        if(mid >= l) init(l, mid, node.ln);\n        if(mid+1 <= r) init(mid+1, r, node.rn);\n        popup(node);\n    }\n    public void update(int id, int val, int l, int r, Node node){\n        if(l==r){\n            nums[l] = val;\n            node.lv = nums[l];\n            node.rv = nums[l];\n            return;\n        }\n        \n        int mid = ((r-l)>>1) + l;\n        if(id <= mid){\n            update(id, val, l, mid, node.ln);\n        }else{\n            update(id, val, mid+1, r, node.rn);\n        }\n        popup(node);\n    }\n    public int search(int l, int r, int sl, int sr, Node node){\n        if(sl <= l && r <= sr){\n            return node.cnt;\n        }\n        int mid = ((r-l)>>1) + l;\n        int ret = 0;\n        \n        if(mid < sl){\n            ret = search(mid+1, r, sl, sr, node.rn);\n        }else if(mid >= sr){\n            ret = search(l, mid, sl, sr, node.ln);\n        }else{\n            ret += search(l, mid, sl, sr, node.ln);\n            ret += search(mid+1, r, sl, sr, node.rn);\n            if((Math.max(l, sl) < mid) && node.ln.rg && node.ln.rv > node.rn.lv){\n                ret++;\n            }\n            if((Math.min(r, sr) > mid+1) && node.rn.lg && node.rn.lv > node.ln.rv){\n                ret++;\n            }\n        }\n        return ret;\n    }\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        this.nums = nums;\n        this.n = nums.length;\n        head = new Node();\n        init(0, n-1, head);\n        List<Integer> ans = new ArrayList<>();\n        for(int[] q : queries){\n            int a = q[0];\n            if(a==1){\n                ans.add(search(0, n-1, q[1], q[2], head));\n            }else{\n                update(q[1], q[2], 0, n-1, head);\n            }\n        }\n        return ans;\n    }\n}\nclass Node{\n    Node ln, rn;\n    int lv, rv;\n    boolean lg, rg;\n    int cnt;\n    int childCnt;\n}\n/**\n[5,4,8,6]\n[[1,2,2],[1,1,2],[2,1,6]]\n\n[0,1]\n\n*/\n\n",
    "submit_ts": "1718508914",
    "subm_id": "539790044"
}