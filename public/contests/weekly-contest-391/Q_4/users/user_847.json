{
    "username": "muyujx",
    "submission": "import java.util.Arrays;\nimport java.util.PriorityQueue;\n\nclass Solution {\n    public int minimumDistance(int[][] points) {\n\n        int n = points.length;\n        Arrays.sort(points, (a, b) -> {\n            return Integer.compare(a[0], b[0]);\n        });\n\n\n        int[] arr = f(points, -1);\n\n        // System.out.println(Arrays.toString(arr));\n\n        int max = arr[0];\n\n        int[] cur = f(points, arr[1]);\n        // System.out.println(Arrays.toString(cur));\n\n        max = Math.min(max, cur[0]);\n\n        cur = f(points, arr[2]);\n        // System.out.println(Arrays.toString(cur));\n\n        max = Math.min(max, cur[0]);\n\n        return max;\n    }\n\n    int[] f(int[][] arr, int ignore) {\n        PriorityQueue<int[]> pq1 = new PriorityQueue<>((a, b) -> {\n            return Integer.compare(b[0], a[0]);\n        });\n        PriorityQueue<int[]> pq2 = new PriorityQueue<>((a, b) -> {\n            return Integer.compare(b[0], a[0]);\n        });\n        int n = arr.length;\n\n        int max = -1;\n        int a = 0;\n        int b = 0;\n\n        // x2 - x1 + y1 - y2\n        // x2 - y2        - x1 + y1\n\n        // x2 - x1 + y2 - y1\n        // x2 + y2        - x1 - y1\n\n        for (int i = 0; i < arr.length; i++) {\n            if (i == ignore) {\n                continue;\n            }\n\n            if (!pq1.isEmpty()) {\n                int[] cur1 = pq1.peek();\n                int[] cur2 = pq2.peek();\n                int x = arr[i][0];\n                int y = arr[i][1];\n\n                if (x - y + cur1[0] > max) {\n                    max = x - y + cur1[0];\n                    a = i;\n                    b = cur1[1];\n                }\n\n                if (x + y + cur2[0] > max) {\n                    max = x + y + cur2[0];\n                    a = i;\n                    b = cur2[1];\n                }\n            }\n\n            pq1.offer(new int[]{arr[i][1] - arr[i][0], i});\n            pq2.offer(new int[]{-arr[i][1] - arr[i][0], i});\n        }\n\n//        pq1.clear();\n//        pq2.clear();\n//\n//        idx = n - 1;\n//        if (ignore == n - 1) {\n//            idx = n - 2;\n//        }\n//        // x1 - x2 + y1 - y2\n//        // -x2 - y2        x1 + y1\n//\n//        // x1 - x2 + y2 - y1\n//        // -x2 + y2        x1 - y1\n//        pq1.offer(new int[]{arr[idx][1] + arr[idx][0], idx});\n//        pq2.offer(new int[]{arr[idx][1] - arr[idx][0], idx});\n//\n//        for (int i = n - 1; i >= 0; i--) {\n//            if (i == ignore) {\n//                continue;\n//            }\n//\n//            int[] cur1 = pq1.peek();\n//            int[] cur2 = pq2.peek();\n//            int x = arr[i][0];\n//            int y = arr[i][1];\n//\n//            if (-x - y + cur1[0] > max) {\n//                max = -x - y + cur1[0];\n//                a = i;\n//                b = cur1[1];\n//            }\n//\n//            if (-x + y + cur2[0] > max) {\n//                max = -x + y + cur2[0];\n//                a = i;\n//                b = cur2[1];\n//            }\n//\n//            pq1.offer(new int[]{arr[i][1] + arr[i][0], i});\n//            pq2.offer(new int[]{arr[i][1] - arr[i][0], i});\n//\n//        }\n\n        return new int[]{max, a, b};\n    }\n\n\n}"
}