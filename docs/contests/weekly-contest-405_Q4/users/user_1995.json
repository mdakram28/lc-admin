{
    "username": "nasaheck",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool is_end;\n    int minimum_cost;\n\n    TrieNode() : is_end(false), minimum_cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string& target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = buildTrie(words, costs);\n\n        int len_target = target.size();\n        vector<int> dp(len_target + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < len_target; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < len_target; ++j) {\n                char character = target[j];\n                if (!node->children.count(character)) break;\n\n                node = node->children[character];\n                if (node->is_end) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minimum_cost);\n                }\n            }\n        }\n\n        return dp[len_target] == INT_MAX ? -1 : dp[len_target];\n    }\n\nprivate:\n    TrieNode* buildTrie(const vector<string>& words, const vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], costs[i]);\n        }\n        return root;\n    }\n\n    void insertWord(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char character : word) {\n            if (!node->children.count(character)) {\n                node->children[character] = new TrieNode();\n            }\n            node = node->children[character];\n        }\n        node->is_end = true;\n        node->minimum_cost = min(node->minimum_cost, cost);\n    }\n};\n",
    "submit_ts": "1720324750",
    "subm_id": "1312407187"
}