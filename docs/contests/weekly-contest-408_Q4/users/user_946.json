{
    "username": "jerryluo11",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n\n        def rectIntersect(circle):\n            cx, cy, cr = circle\n\n            def point_distance(x_dist, y_dist):\n                return math.sqrt((x_dist) ** 2 + (y_dist) ** 2)\n            \n            topx = 0\n            if cx > X:\n                topx = cx - X\n            topy = abs(cy - Y)\n            topinter = point_distance(topx, topy) <= cr\n            \n            lefty = 0\n            if cy > Y:\n                lefty = cy - Y\n            leftx = cx\n            leftinter = point_distance(leftx, lefty) <= cr\n\n            inter_TL = topinter or leftinter\n\n            bottomx = 0\n            if cx > X:\n                bottomx = cx - X\n            bottomy = cy\n            bottominter = point_distance(bottomx, bottomy) <= cr\n\n            righty = 0\n            if cy > Y:\n                righty = cy - Y\n            rightx = abs(cx - X)\n            rightinter = point_distance(rightx, righty) <= cr\n\n            inter_BR = bottominter or rightinter\n\n            return inter_TL, inter_BR\n        \n        adj = defaultdict(list)\n        for i in range(len(circles)):\n            for j in range(i + 1, len(circles)):\n                i_x, i_y, i_r = circles[i]\n                j_x, j_y, j_r = circles[j]\n\n                center_distance = math.sqrt((i_x - j_x)**2 + (i_y - j_y)**2)\n                if center_distance <= i_r + j_r:\n                    adj[tuple(circles[i])].append(tuple(circles[j]))\n                    adj[tuple(circles[j])].append(tuple(circles[i]))\n\n        for circle in circles:\n            intersect_TL, intersect_BR = rectIntersect(circle)\n            #print(\"TL\", intersect_TL)\n            #print(\"BR\", intersect_BR)\n            if intersect_TL:\n                adj[(-1, -1, -1)].append(tuple(circle))\n                adj[tuple(circle)].append((-1,-1,-1))\n            if intersect_BR:\n                adj[(-2, -2, -2)].append(tuple(circle))\n                adj[tuple(circle)].append((-2,-2,-2))\n        ##print(adj)\n        visited = set()\n        q = deque()\n        q.append((-1,-1,-1))\n\n        while q:\n            curr = q.popleft()\n            #print(\"curr\", curr)\n            if curr == (-2, -2, -2):\n                return False\n            if curr in visited:\n                continue\n            visited.add(curr)\n            for nei in adj[curr]:\n                if nei in visited:\n                    continue\n                q.append(nei)\n                #print(\"added\", nei)\n        return True\n\n\n\n        \n\n",
    "submit_ts": "1722138438",
    "subm_id": "1335790755"
}