{
    "username": "Bawa_547",
    "submission": "#define MAX INT32_MAX\nclass ST {\npublic:\n    vector<int> tree;\n    int n;\n    ST(vector<int>& arr){\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n    void build(vector<int>& arr, int node, int start,\n               int end){\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int q(int l, int r){\n        return q(0, 0, n - 1, l, r);\n    }\n\n\n    int q(int node, int start, int end, int l, int r){\n        if (r < start || end < l) {\n            return MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = q(2 * node + 1, start, mid, l, r);\n        int p2 = q(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& arr, int k) {\n        int n = arr.size();\n        ST st(arr);\n        int res = MAX;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (st.q(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1){\n                res = min(res, abs(st.q(i, l) - k));\n            }\n            res = min(res,abs(k-st.q(i, r)));\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717300247.0
}