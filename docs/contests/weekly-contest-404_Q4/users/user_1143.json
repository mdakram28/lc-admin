{
    "username": "rishabh_ag17",
    "submission": "class Solution {\npublic:\n    int ans1 = 0, ans2 = 0;\n    int diameter1(int node, vector<vector<int>>& adj, vector<int>& dp1) {\n        if (dp1[node] != -1) {\n            return dp1[node];\n        }\n        if (adj[node].empty()) {\n            return dp1[node] = 1;\n        }\n        priority_queue<int> pq;\n        for (auto child : adj[node]) {\n            int childHeight = diameter1(child, adj, dp1);\n            pq.push(childHeight);\n        }\n        int top1 = 0, top2 = 0;\n        if (!pq.empty()) {\n            top1 = pq.top();\n            pq.pop();\n        }\n        if (!pq.empty()) {\n            top2 = pq.top();\n        }\n        ans1 = max(ans1, top1 + top2);\n        return dp1[node] = 1 + top1;\n    }\n    \n    int diameter2(int node, vector<vector<int>>& adj, vector<int>& dp2) {\n        if (dp2[node] != -1) {\n            return dp2[node];\n        }\n        if (adj[node].empty()) {\n            return dp2[node] = 1;\n        }\n        priority_queue<int> pq;\n        for (auto child : adj[node]) {\n            int childHeight = diameter2(child, adj, dp2);\n            pq.push(childHeight);\n        }\n        int top1 = 0, top2 = 0;\n        if (!pq.empty()) {\n            top1 = pq.top();\n            pq.pop();\n        }\n        if (!pq.empty()) {\n            top2 = pq.top();\n        }\n        ans2 = max(ans2, top1 + top2);\n        return dp2[node] = 1 + top1;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size(), n2 = edges2.size();\n        vector<vector<int>> adj1(n1 + 1), adj2(n2 + 1);\n        for (auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n        }\n        for (auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n        }\n        vector<int> dp1(n1 + 1, -1), dp2(n2 + 1, -1);\n        int maxians1 = 0, maxians2 = 0;\n        for (int i = 0; i < n1; ++i) {\n            ans1 = 0;\n            diameter1(i, adj1, dp1);\n            maxians1 = max(maxians1, ans1);\n        }\n        for (int i = 0; i < n2; ++i) {\n            ans2 = 0;\n            diameter2(i, adj2, dp2);\n            maxians2 = max(maxians2, ans2);\n        }\n        int ans = max((maxians1 + 1) / 2 + (maxians2 + 1) / 2 + 1, max(maxians1, maxians2));\n        return ans;\n    }\n};\n",
    "submit_ts": "1719719689",
    "subm_id": "1304448117"
}