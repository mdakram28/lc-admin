{
    "username": "weak-chicken",
    "submission": "sys.setrecursionlimit(200000)\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n=len(edges)+1\n        g=[[] for _ in range(n)]\n        for u,v in edges:\n            g[u].append(v)\n            g[v].append(u)\n        up=[0]*n\n        dw=[0]*n\n        def dfs1(r,p):\n            for ch in g[r]:\n                if ch!=p:\n                    dfs1(ch,r)\n                    dis=dw[ch]+(1 if ch&1 else 2)\n                    dw[r]=max(dw[r],dis)\n        def dfs2(r,p):\n            ma1=ma2=0\n            m1=inf\n            tmp=1 if r&1 else 2\n            for ch in g[r]:\n                if ch!=p:\n                    dis=dw[ch]+(1 if ch&1 else 2)\n                    #print(ch,dis)\n                    if dis>ma1:\n                        ma2=ma1\n                        m2=m1\n                        ma1=dis\n                        m1=ch\n                    elif dis>ma2:\n                        ma2=dis\n                        m2=ch\n            #print(ma1,m1,ma2,m2)\n            for ch in g[r]:\n                if ch!=p:\n                    if ch==m1:\n                        up[ch]=tmp+max(ma2,up[r])\n                    else:\n                        up[ch]=tmp+max(ma1,up[r])\n            for ch in g[r]:\n                if ch!=p:\n                    dfs2(ch,r)\n        dfs1(0,-1)\n        dfs2(0,-1)\n        #print(up,dw)\n        return [max(x,y) for x,y in zip(up,dw)]\n                    \n            \n            ",
    "submit_ts": "1722698817",
    "subm_id": "552272663"
}