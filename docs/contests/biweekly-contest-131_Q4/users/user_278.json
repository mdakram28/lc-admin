{
    "username": "mot882000",
    "submission": "class Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        List<Boolean> result = new ArrayList<Boolean>();\n        \n        List<int[]> blockList = new ArrayList<int[]>();\n        \n        for(int i = 0; i < queries.length; i++) {\n            int q = queries[i][0];\n            \n            if (q == 1 ) {\n                int block = queries[i][1];    \n                if ( blockList.size() == 0 ) {\n                    blockList.add(new int[]{block, block});\n                } else{\n                    int idx = binarySearchUpper(blockList, block);\n                    if ( idx == blockList.size()) {\n                        blockList.add(idx, new int[]{block, Math.max(block- blockList.get(blockList.size()-1)[0], blockList.get(blockList.size()-1)[1])});    \n                    } else {\n                        int dist = 0;\n                        int beforeMax = 0;\n                        if ( idx-1 < 0 ) {\n                            dist = block;\n                        } else{\n                            dist = block- blockList.get(idx-1)[0];\n                            beforeMax = blockList.get(idx-1)[1];\n                        }\n                        int max = Math.max(dist, beforeMax);\n                        blockList.add(idx, new int[]{block, max});\n                    \n                        if ( idx +1 < blockList.size()) {\n                            max = Math.max(blockList.get(idx+1)[0]-block, max);\n\n                            blockList.set(idx+1, new int[]{blockList.get(idx+1)[0], max});\n\n                            for(int j = idx+2; j < blockList.size(); j++) {\n                                if(blockList.get(j)[0] - blockList.get(j-1)[0] > max ) {\n                                    max = blockList.get(j)[0] - blockList.get(j-1)[0];  \n                                }\n                                if ( max == blockList.get(j)[1]) break;\n                                \n                                blockList.set(j, new int[]{blockList.get(j)[0], max});    \n                                \n                            }\n                        }\n                    }\n                    \n                }\n                \n            } else{\n                int end = queries[i][1];\n                int size = queries[i][2];\n                \n                int idx = binarySearchUpper(blockList, end);\n                idx--;\n                if ( idx < 0 ) {\n                    if ( end >= size ) result.add(true);\n                    else result.add(false);\n                }\n                else {\n                    boolean isPossible = false;\n                    int max = Math.max(end-blockList.get(idx)[0], blockList.get(idx)[1]);\n                    \n                    // System.out.println(before);\n                    if ( max>= size) isPossible = true;\n                    result.add(isPossible);\n                }\n            }\n            \n            // for(int a = 0; a < blockList.size(); a++) System.out.print(\"[\"+blockList.get(a)[0] + \" \" +blockList.get(a)[1]+\"]\"); System.out.println();\n        }\n        \n        return result;\n    }\n    \n    private int binarySearchUpper(List<int[]> list, int target) {\n        int start = 0;\n        int end = list.size();\n        int mid;\n        \n        while( start < end) {\n            mid = (start+end)/2;\n            \n            if ( list.get(mid)[0] > target ) {\n                end = mid;\n            } else {\n                start = mid+1;\n            }\n        }\n        \n        return end;\n    }\n}",
    "submit_ts": 1716651187.0
}