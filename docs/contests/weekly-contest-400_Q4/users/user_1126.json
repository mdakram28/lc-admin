{
    "username": "mini_bong",
    "submission": "class SegmentTree {\n    int[] tree;\n    int n;\n    public SegmentTree(int[] arr){\n        n = arr.length;\n        tree = new int[4 * n];\n        build(arr, 0, 0, n - 1);\n    }\n    public void build(int[] arr, int node, int start,int end){\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    \n    public int query(int l, int r){\n        return query(0, 0, n - 1, l, r);\n    }\n    public int query(int node, int start, int end, int l, int r){\n        if (r < start || end < l) {\n            return Integer.MAX_VALUE;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n}\n\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        \n        int n = nums.length;\n        SegmentTree st = new SegmentTree(nums);\n        int res = Integer.MAX_VALUE;\n        for(int i = 0; i<n; i++){\n            int l = i-1;\n            int r = n-1;\n            int mid;\n            while(r -l >1){\n                mid = (l + r)/2;\n                if(st.query(i, mid) >= k){\n                    l = mid;\n                }\n                else{\n                    r = mid;\n                }\n            }\n            if(l != i-1){\n                res = Math.min(res, Math.abs(st.query(i, l) - k));\n            }\n            res = Math.min(res, Math.abs(k - st.query(i, r)));\n        }\n        return res;   \n    }\n}",
    "submit_ts": 1717300319.0
}