{
    "username": "Easy\u5237\u5b50",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        n, m = len(board), len(board[0])\n        mxdr = [[-9999999999] * m for _ in range(n)]\n        mxul = [[-9999999999] * m for _ in range(n)]\n        mxdl = [[-9999999999] * m for _ in range(n)]\n        mxur = [[-9999999999] * m for _ in range(n)] \n        for i in range(n-1,-1,-1):\n            for j in range(m-1,-1,-1):\n                mxdr[i][j] = board[i][j]\n                if i < n-1:\n                    mxdr[i][j] = max(mxdr[i][j], mxdr[i+1][j])\n                if j < m-1:\n                    mxdr[i][j] = max(mxdr[i][j], mxdr[i][j+1])\n        for i in range(n):\n            for j in range(m-1,-1,-1):\n                mxur[i][j] = board[i][j]\n                if i > 0:\n                    mxur[i][j] = max(mxur[i][j], mxur[i-1][j])\n                if j < m-1:\n                    mxur[i][j] = max(mxur[i][j], mxur[i][j+1])\n        for i in range(n):\n            for j in range(m):\n                mxul[i][j] = board[i][j]\n                if i > 0:\n                    mxul[i][j] = max(mxul[i][j], mxul[i-1][j])\n                if j > 0:\n                    mxul[i][j] = max(mxul[i][j], mxul[i][j-1])\n        for i in range(n-1,-1,-1):\n            for j in range(m):\n                mxdl[i][j] = board[i][j]\n                if i < n-1:\n                    mxdl[i][j] = max(mxdl[i][j], mxdl[i+1][j])\n                if j > 0:\n                    mxdl[i][j] = max(mxdl[i][j], mxdl[i][j-1])       \n        u = [[-9999999999] * m for _ in range(n)]\n        d = [[-9999999999] * m for _ in range(n)]\n        for i in range(n-1,-1,-1):\n            for j in range(m):\n                d[i][j] = board[i][j]\n                if i < n-1:\n                    d[i][j] = max(d[i][j], d[i+1][j])\n        for i in range(n):\n            for j in range(m):\n                u[i][j] = board[i][j]\n                if i > 0:\n                    u[i][j] = max(u[i][j], u[i-1][j])\n\n        ret = -999999999999\n        for i in range(1,n-1):\n            for j in range(1,m-1):\n                ret = max(ret, board[i][j] + max(mxdl[i+1][j-1]+mxur[i-1][j+1],mxdr[i+1][j+1]+mxul[i-1][j-1]))\n\n        for i in range(1,n-1):\n            vu = []\n            vd = []\n            for k in range(2):\n                heappush(vu, (u[i-1][k],k))\n                heappush(vd, (d[i+1][k],k))\n            \n            for j in range(2,m):\n                r = board[i][j]\n                au, auk = vu[0]\n                au2, auk2 = vu[1]\n                ad, adk = vd[0]\n                ad2, adk2 = vd[1]\n                if auk2 != adk2:\n                    ret = max(ret, r + au2 + ad2)\n                else:\n                    ret = max(ret, r + max(au2+ad, au+ad2))\n                heappush(vu, (u[i-1][j],j))\n                heappush(vd, (d[i+1][j],j))\n                if len(vu) > 2:\n                    heappop(vu)\n                if len(vd) > 2:\n                    heappop(vd)\n\n        for i in range(1,n-1):\n            vu = []\n            vd = []\n            for k in range(m-1,m-3,-1):\n                heappush(vu, (u[i-1][k],k))\n                heappush(vd, (d[i+1][k],k))\n            \n            for j in range(m-3,-1,-1):\n                r = board[i][j]\n                au, auk = vu[0]\n                au2, auk2 = vu[1]\n                ad, adk = vd[0]\n                ad2, adk2 = vd[1]\n                if auk2 != adk2:\n                    ret = max(ret, r + au2 + ad2)\n                else:\n                    ret = max(ret, r + max(au2+ad, au+ad2))\n                heappush(vu, (u[i-1][j],j))\n                heappush(vd, (d[i+1][j],j))\n                if len(vu) > 2:\n                    heappop(vu)\n                if len(vd) > 2:\n                    heappop(vd)\n        return ret",
    "submit_ts": "1723909822",
    "subm_id": "556338113"
}