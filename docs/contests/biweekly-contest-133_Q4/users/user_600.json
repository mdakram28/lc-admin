{
    "username": "hritikkm211074leet",
    "submission": "import kotlin.math.max\n\nclass Solution {\n    private companion object {\n        \n        \n        \n        \n                                                               const val CONSTANT_MOD = 1_000_000_007\n        \n        \n        \n        \n        const val MAX_INV = 400\n        \n        \n        \n        \n        \n    }\n\n    fun numberOfPermutations(x: Int, y: Array<IntArray>): Int {\n        \n        \n        \n        \n        \n                                                                                            initiateProcess()\n                                                                                            \n                                                                                            \n                                                                                            \n                                                                                            \n\n        val mapping = y.associate { it[0] + 1 to it[1] }\n        \n        \n        \n        \n        \n        \n        \n        \n        \n\n        val permArray = Array(x + 1) { LongArray(MAX_INV + 1) }\n        \n        \n        \n        \n        \n        \n        permArray[0][0] = 1\n\n        startCelebration()\n\n        for (a in 1..x) {\n            for (b in 0..MAX_INV) {\n                \n                \n                \n                \n                \n                \n                \n                for (c in 0 until a) {\n                                                                                                         val previous = b - c\n                    if (previous >= 0) {\n                        \n                        \n                        \n                        \n                        \n                        permArray[a][b] = (permArray[a][b] + permArray[a - 1][previous]) % CONSTANT_MOD\n                    }\n                }\n            }\n\n            additionalStep()\n\n                                                                                              mapping[a]?.let { target ->\n                for (b in 0..MAX_INV) {\n  if (b != target) {\n                        permArray[a][b] = 0\n      \n      \n      \n      \n      \n      \n                    }\n                }\n                \n                \n                \n                \n                \n                \n            }\n        }\n\n        var finalResult: Long = 0\n        \n        \n        \n        \n                                                                                            for (count in permArray[x]) {\n            \n            \n            \n            \n            \n            finalResult = (finalResult + count) % CONSTANT_MOD\n        }\n\n                                                                                                                       finalOperation()\n        \n        \n        \n        \n        completeCelebration()\n\n        return finalResult.toInt()\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n\n    private fun initiateProcess() {\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n\n                                                        private fun startCelebration() {\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n\n    private fun additionalStep() {\n    }\n\n                                             private fun finalOperation() {\n    }\n\n    private fun completeCelebration() {\n    }\n}\n\nfun main() {\n    \n    \n    \n    \n    \n    \n    \n    \n                                                            val x = 5\n    \n    \n    \n    val y = arrayOf(\n        \n        \n        \n        \n                                                   intArrayOf(1, 1),\n        \n        \n        \n        \n        intArrayOf(3, 2)\n    )\n    val result = Solution().numberOfPermutations(x, y)\n    \n    \n    \n    \n                                                               println(\"Number of permutations: $result\")\n}\n",
    "submit_ts": 1719070752.0
}