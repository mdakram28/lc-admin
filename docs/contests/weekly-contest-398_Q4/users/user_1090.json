{
    "username": "shakeebparwez",
    "submission": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    private static class State {\n        long i, jump;\n        boolean can;\n        \n        State(long i, long jump, boolean can) {\n            this.i = i;\n            this.jump = jump;\n            this.can = can;\n        }\n        \n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            State state = (State) o;\n            return i == state.i && jump == state.jump && can == state.can;\n        }\n        \n        @Override\n        public int hashCode() {\n            int result = Long.hashCode(i);\n            result = 31 * result + Long.hashCode(jump);\n            result = 31 * result + (can ? 1 : 0);\n            return result;\n        }\n    }\n    \n    private long retOne() {\n        return 1;\n    }\n    \n    private long retZero() {\n        return 0;\n    }\n\n    private Map<State, Long> dp = new HashMap<>();\n    \n    private long solve(long k, long i, long jump, boolean can) {\n        long one = 1;\n        long zero = 0;\n        \n        if (i > k + 5)\n            return retZero();\n\n        if (jump > 31)\n            return retZero();\n\n        State state = new State(i, jump, can);\n        if (dp.containsKey(state))\n            return dp.get(state);\n\n        long ans = (i == k) ? retOne() : retZero();\n        if (can)\n            ans += solve(k, i - retOne(), jump, false);\n        if (i + (one << jump) <= k + one)\n            ans += solve(k, i + (one << jump), jump + one, true);\n\n        dp.put(state, ans);\n        return ans;\n    }\n\n    public int waysToReachStair(long k) {\n        return (int)solve(k, 1, 0, true);\n    }\n}\n",
    "submit_ts": "1716089911",
    "subm_id": "1261854441"
}