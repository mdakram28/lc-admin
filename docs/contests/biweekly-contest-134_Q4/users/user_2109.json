{
    "username": "Ani_S",
    "submission": "\nclass SegmentTree {\n    int tree[];\n    int n;\n    \n    public SegmentTree(int n) {\n        this.tree = new int[(4 * n) + 1];\n        this.n = n;\n    }\n    \n    public void buildTree(int arr[]) {\n        buildTree(arr, 0, n - 1, 0);\n    }\n    \n    private void buildTree(int arr[], int low, int high, int x) {\n        if(low > high) return;\n        if(low == high) {\n            this.tree[x] = arr[low];\n            return;\n        }\n        \n        int mid = low + (high - low) / 2;\n        \n        buildTree(arr, low, mid, (2 * x) + 1);\n        buildTree(arr, mid + 1, high, (2 * x) + 2);\n        \n        this.tree[x] = (this.tree[(2 * x) + 1] & this.tree[(2 * x) + 2]);\n    }\n    \n    public int query(int l, int h) {\n        if(l > h) return Integer.MAX_VALUE;\n        return query(0, n - 1, l, h, 0);\n    }\n    \n    private int query(int low, int high, int l, int h, int x) {\n        if(l <= low && high <= h)\n            return this.tree[x];\n        if(h < low || high < l)\n            return Integer.MAX_VALUE;\n        \n        int mid = low + (high - low) / 2;\n        \n        return (query(low, mid, l, h, (2 * x) + 1) & query(mid + 1, high, l, h, (2 * x) + 2));\n    }\n}\nclass Solution {\n    \n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        SegmentTree st = new SegmentTree(nums.length);\n        \n        // st.buildTree(nums);\n        \n        int prefixAnd[][] = new int[n][30];\n        int prefix[] = new int[30];\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < 30; j++) {\n                if((nums[i] & (1 << j)) > 0) {\n                    prefix[j]++;\n                }\n            }\n            \n            for(int j = 0; j < 30; j++)\n                prefixAnd[i][j] = prefix[j];\n        }\n        \n        long ans = 0;\n        \n        for(int i = 0; i < nums.length; i++) {\n            int l = lowerBound(nums, i, k, st, prefixAnd);\n            if(l == -1)\n                continue;\n            \n            int r = upperBound(nums, l, i, k, st, prefixAnd);\n            \n            ans += (r - l + 1);\n        }\n        \n        return ans;\n    }\n    \n    private int lowerBound(int nums[], int index, int k, SegmentTree st, int prefixAnd[][]) {\n        int low = 0;\n        int high = index;\n        \n        int ans = -1;\n        \n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            int val = getValue(mid, index, prefixAnd);\n            \n            if(val == k) {\n                ans = mid;\n                high = mid - 1;\n            } else if(val > k) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        \n        return ans;\n    }\n    \n    private int upperBound(int nums[], int l, int index, int k, SegmentTree st, int prefixAnd[][]) {\n        int low = l;\n        int high = index;\n        \n        int ans = -1;\n        \n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            int val = getValue(mid, index, prefixAnd);\n            \n            if(val == k) {\n                ans = mid;\n                low = mid + 1;\n            } else if(val > k) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        \n        return ans;\n    }\n    \n    private int getValue(int l, int r, int prefixAnd[][]) {\n        int arr[] = new int[30];\n        int n = r - l + 1;\n        int ans = 0;\n        \n        for(int i = 0; i < 30; i++) {\n            arr[i] = prefixAnd[r][i];\n            \n            if(l - 1 >= 0)\n                arr[i] -= prefixAnd[l - 1][i];\n            \n            if(arr[i] == n)\n                ans = ans | (1 << i);\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1720279948",
    "subm_id": "1311771383"
}