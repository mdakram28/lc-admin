{
    "username": "tonghuikang",
    "submission": "class FenwickTree:\n    def __init__(self, x):\n        bit = self.bit = list(x)\n        size = self.size = len(bit)\n        for i in range(size):\n            j = i | (i + 1)\n            if j < size:\n                bit[j] += bit[i]\n\n    def update(self, idx, x):\n        \"\"\"updates bit[idx] += x\"\"\"\n        while idx < self.size:\n            self.bit[idx] += x\n            idx |= idx + 1\n\n    def __call__(self, end):\n        \"\"\"calc sum(bit[:end])\"\"\"\n        x = 0\n        while end:\n            x += self.bit[end - 1]\n            end &= end - 1\n        return x\n\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        nums = [-10] + nums + [-10]\n        n = len(nums)\n        peak = [0 for _ in range(n)]\n        for i,(a,b,c) in enumerate(zip(nums, nums[1:], nums[2:]), start=1):\n            if a < b and b > c:\n                peak[i] = 1\n        \n        f = FenwickTree(peak)\n        \n        res = []\n        for a,b,c in queries:\n            # print(peak)\n            # print([f(i) for i in range(n+1)])\n            # print()\n            if a == 1:\n                l,r = b+1, c+1\n                if c-b < 2:\n                    res.append(0)\n                    continue\n                ret = f(r) - f(l+1)\n                res.append(ret)\n            else:\n                idx, val = b+1, c\n\n                prev_left = peak[idx-1]\n                prev_mid = peak[idx]\n                prev_right = peak[idx+1]\n                    \n                nums[idx] = val\n                \n                new_left = 0\n                if nums[idx-2] < nums[idx-1] and nums[idx-1] > nums[idx]:\n                    new_left = 1\n                    peak[idx-1] = 1\n                else:\n                    peak[idx-1] = 0\n\n                new_mid = 0\n                if nums[idx-1] < nums[idx] and nums[idx] > nums[idx+1]:\n                    new_mid = 1\n                    peak[idx] = 1\n                else:\n                    peak[idx] = 0\n                        \n                new_right = 0\n                if nums[idx] < nums[idx+1] and nums[idx+1] > nums[idx+2]:\n                    new_right = 1\n                    peak[idx+1] = 1\n                else:\n                    peak[idx+1] = 0\n\n                f.update(idx-1, new_left-prev_left)\n                f.update(idx, new_mid-prev_mid)\n                f.update(idx+1, new_right-prev_right)                    \n                \n        # print()\n        return res",
    "submit_ts": "1718507243",
    "subm_id": "539780132"
}