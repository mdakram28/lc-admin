{
    "username": "ethan_mi",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        long long cost = 0;\n        int h = 0, v = 0;\n        int horizontalSegments = 1, verticalSegments = 1;\n        \n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] > verticalCut[v]) {\n                cost += horizontalCut[h] * verticalSegments;\n                horizontalSegments++;\n                h++;\n            } else {\n                cost += verticalCut[v] * horizontalSegments;\n                verticalSegments++;\n                v++;\n            }\n        }\n        \n        while (h < horizontalCut.size()) {\n            cost += horizontalCut[h] * verticalSegments;\n            h++;\n        }\n        \n        while (v < verticalCut.size()) {\n            cost += verticalCut[v] * horizontalSegments;\n            v++;\n        }\n        \n        return cost;\n    }\n};\n",
    "submit_ts": "1720926138",
    "subm_id": "546444328"
}