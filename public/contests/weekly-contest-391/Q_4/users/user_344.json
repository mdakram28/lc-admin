{
    "username": "CoderHxc",
    "submission": "class Solution {\npublic:\n    pair<int, int> maxManhattanDistance(vector<vector<int>>& points) {\n    int maxSum = INT_MIN, minSum = INT_MAX, maxSumId = -1, minSumId = -1;\n    int maxDiff = INT_MIN, minDiff = INT_MAX, maxDiffId = -1, minDiffId = -1;\n    \n    for (int i = 0; i < points.size(); ++i) {\n        int sum = points[i][0] + points[i][1];\n        int diff = points[i][0] - points[i][1];\n        \n        if (sum > maxSum) {\n            maxSum = sum;\n            maxSumId = i;\n        }\n        if (sum < minSum) {\n            minSum = sum;\n            minSumId = i;\n        }\n        if (diff > maxDiff) {\n            maxDiff = diff;\n            maxDiffId = i;\n        }\n        if (diff < minDiff) {\n            minDiff = diff;\n            minDiffId = i;\n        }\n    }\n    \n    if (maxSum - minSum > maxDiff - minDiff) {\n        return {maxSumId, minSumId};\n    } else {\n        return {maxDiffId, minDiffId};\n    }\n}\n    int maxManhattanDistance(vector<vector<int>>& points,int id) {\n    int maxSum = INT_MIN, minSum = INT_MAX;\n    int maxDiff = INT_MIN, minDiff = INT_MAX;\n    for(int i=0;i<points.size();i++){\n        if(i==id)continue;\n        auto &point=points[i];\n        int sum = point[0] + point[1];\n        \n        int diff = point[0] - point[1];     \n        maxSum = max(maxSum, sum);\n        minSum = min(minSum, sum);\n        maxDiff = max(maxDiff, diff);\n        minDiff = min(minDiff, diff);\n    }\n    \n    return max(maxSum - minSum, maxDiff - minDiff);\n}\n    int minimumDistance(vector<vector<int>>& points) {\n        pair<int, int> ids = maxManhattanDistance(points);\n        // cout<<ids.first<<\" \"<<ids.second<<endl;\n        int ans=1e9;\n        ans=min(maxManhattanDistance(points,ids.first),maxManhattanDistance(points,ids.second));\n        return ans;\n    }\n};"
}