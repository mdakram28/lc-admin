{
    "username": "crispinlogan",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        \n        # go through all the pairs, and count the difference between each and keep that in a counter - i.e. cnt of each diff\n        # also build up an array storing the cost to change all numbers to this value (the way I do it would be such that say if you have 1, 5 and k=6 then it cost 1 to change to any diff 5 and below and 2 changes to changes to anything 6 and above - so doesn't account for the fact that it cost 0 changes to change to a diff of 4 - as it already is 4)\n        c_diffs = Counter([abs(nums[i]-nums[n-i-1]) for i in range(n//2)])\n        cost_to_change = [0] * (k+1)\n        for i in range(n//2):\n            a, b = nums[i], nums[n-i-1]\n            cost_one_max = max(abs(k-a), abs(k-b), abs(a), abs(b))\n            cost_two = cost_one_max + 1\n            # print(cost_two)\n            cost_to_change[0] += 1\n            if cost_two <= k:\n                cost_to_change[cost_two] += 1\n            \n            \n        # print(cost_to_change)\n            \n        # now make cost_to_change a full array - do it this way to keep in n time\n        curr_total = 0\n        for i in range(len(cost_to_change)):\n            curr_total += cost_to_change[i]\n            cost_to_change[i] = curr_total\n            \n        # print(cost_to_change)\n\n        ret = float(\"inf\")\n        for diff, cnt in c_diffs.items():\n            curr = cost_to_change[diff] - cnt\n            ret = min(ret, curr)\n            \n            \n        return ret\n",
    "submit_ts": "1721489182",
    "subm_id": "1327445478"
}