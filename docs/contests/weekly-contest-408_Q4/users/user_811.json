{
    "username": "MyCaastl",
    "submission": "class Solution {\npublic:\n    \n    bool circlesMeet(int X, int Y, int i, int j, vector<vector<int>>& circles) {\n        double x1 = (circles[i][0]);\n        double x2 = (circles[j][0]);\n        double y1 = circles[i][1];\n        double y2 = circles[j][1];\n        double r1 = circles[i][2];\n        double r2 = circles[j][2];\n        double dsq = (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1);\n        double d = sqrt(dsq);\n        double angle_meet = acos((r1*r1 - r2*r2 - dsq) / (-2*r2*d));\n        double orig_angle = atan2((y2-y1),(x2-x1));\n        double angle1 = orig_angle + angle_meet;\n        double angle2 = orig_angle - angle_meet;\n        double newx1 = x2 + r2 * cos(angle1);\n        double newy1 = y2 + r2 * sin(angle1);\n        if(0 <= newx1 && newx1 <= X && 0 <= newy1 && newy1 <= Y) {\n            return true;\n        }\n        newx1 = x2 + r2 * cos(angle2);\n        newy1 = y2 + r2 * sin(angle2);\n        if(0 <= newx1 && newx1 <= X && 0 <= newy1 && newy1 <= Y) {\n            return true;\n        }\n        return false;\n    }\n    \n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        vector<vector<int>> adj(n, vector<int>{});\n        set<int> BOTTOMRIGHT;\n        set<int> TOPLEFT;\n        \n        //two circles adj if meet inside the rectangle\n        //then need path from top to right\n        \n        for(int i=0;i<n;i++) {\n            if(circles[i][0] + circles[i][2] >= X || circles[i][1] - circles[i][2] <= 0) {\n                BOTTOMRIGHT.insert(i);\n            }\n            if(circles[i][0] - circles[i][2] <= 0 || circles[i][1] + circles[i][2] >= Y) {\n                TOPLEFT.insert(i);\n            }\n            for(int j=i+1;j<n;j++) {\n                if(circlesMeet(X, Y, i, j, circles)) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        deque<int> q;\n        cout << BOTTOMRIGHT.size() << \" \" << TOPLEFT.size() << \"\\n\";\n        if(BOTTOMRIGHT.size()==0) return true;\n        if(TOPLEFT.size()==0) return true;\n        for(auto m: BOTTOMRIGHT) {\n            q.push_back(m);\n        }\n        while(q.size()>0) {\n            int next_node = q.front();\n            q.pop_front();\n            BOTTOMRIGHT.insert(next_node);\n            if(TOPLEFT.contains(next_node)) return false;\n            else {\n                for(auto a : adj[next_node]) {\n                    if(!BOTTOMRIGHT.contains(a)) q.push_front(a);\n                }\n            } \n        }\n        return true;\n        \n        \n        \n        \n        \n    }\n};",
    "submit_ts": "1722138402",
    "subm_id": "1335789844"
}