{
    "username": "shonu_monu",
    "submission": "struct Circle {\n    int x, y, r;\n};\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<Circle> vec(n);\n        vector<vector<int>> adj(n + 5);\n        \n        for (int i = 0; i < n; ++i) {\n            vec[i] = {circles[i][0], circles[i][1], circles[i][2]};\n        }\n\n        for (int i = 0; i < n; ++i) {\n            auto& c = vec[i];\n            if (c.x <= c.r) adj[n].push_back(i), adj[i].push_back(n);\n            if (X - c.x <= c.r) adj[n + 2].push_back(i), adj[i].push_back(n + 2);\n            if (c.y <= c.r) adj[n + 1].push_back(i), adj[i].push_back(n + 1);\n            if (Y - c.y <= c.r) adj[n + 3].push_back(i), adj[i].push_back(n + 3);\n            for (int j = i + 1; j < n; ++j) {\n                auto& d = vec[j];\n                double dist = sqrt(pow(c.x - d.x, 2) + pow(c.y - d.y, 2));\n                if (c.r + d.r >= dist) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        bool flag = bfs(adj, n, n + 1, n + 2, n + 4);\n        if (!flag) flag = bfs(adj, n + 3, n + 2, n + 1, n + 4);\n        \n        return !flag;\n    }\n    \n    bool bfs(vector<vector<int>>& adj, int s, int t1, int t2, int n) {\n        vector<bool> vis(n, false);\n        queue<int> q;\n        q.push(s);\n        vis[s] = true;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (auto x : adj[u]) {\n                if (!vis[x]) {\n                    q.push(x);\n                    vis[x] = true;   \n\n                }\n            }\n        }\n\n        return (vis[t1] || vis[t2]);\n    }\n};",
    "submit_ts": "1722137561",
    "subm_id": "1335767315"
}