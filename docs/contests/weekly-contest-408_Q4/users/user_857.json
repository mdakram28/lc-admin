{
    "username": "Kempachi",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        return canReachCornerr(X,Y,circles);\n    }\n    static class Circle {\n        int x, y, r;\n        Circle(int x, int y, int r) {\n            this.x = x;\n            this.y = y;\n            this.r = r;\n        }\n    }\n\n    static boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int n) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[n];\n        queue.offer(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.offer(v);\n                    visited[v] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n\n    static boolean canReachCornerr(int X, int Y, int[][] circles) {\n        int nc = circles.length;\n        Circle[] circleData = new Circle[nc];\n        List<List<Integer>> graph = new ArrayList<>(nc + 4);\n\n        for (int i = 0; i < nc; ++i) {\n            circleData[i] = new Circle(circles[i][0], circles[i][1], circles[i][2]);\n        }\n\n        for (int i = 0; i < nc + 4; ++i) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i < nc; ++i) {\n            if (circleData[i].x <= circleData[i].r) {\n                graph.get(nc).add(i);\n                graph.get(i).add(nc);\n            }\n            if (X - circleData[i].x <= circleData[i].r) {\n                graph.get(nc + 2).add(i);\n                graph.get(i).add(nc + 2);\n            }\n            if (circleData[i].y <= circleData[i].r) {\n                graph.get(nc + 1).add(i);\n                graph.get(i).add(nc + 1);\n            }\n            if (Y - circleData[i].y <= circleData[i].r) {\n                graph.get(nc + 3).add(i);\n                graph.get(i).add(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double distance = Math.sqrt(Math.pow(circleData[i].x - circleData[j].x, 2) +\n                                            Math.pow(circleData[i].y - circleData[j].y, 2));\n                if (circleData[i].r + circleData[j].r >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        return !(bfs(graph, nc, nc + 1, nc + 2, nc + 4) || \n                 bfs(graph, nc + 3, nc + 2, nc + 1, nc + 4));\n    }\n}",
    "submit_ts": "1722139111",
    "subm_id": "1335808160"
}