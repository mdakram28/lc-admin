{
    "username": "Anubhavpandey788",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n    public:\n        unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> end; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->child.count(c))\n                    node->child[c] = new TrieNode();\n                node = node->child[c];\n            }\n            node->end.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string tar, vector<string>& words, vector<int>& costs) {\n        int m = tar.size();\n        int n = words.size() ;\n        Trie t;\n        for (int i = 0; i < n ; ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n\n        vector<int> ans(m + 1, 1e9);\n        ans[0] = 0;\n\n\n        for (int i = 0; i < m; ++i) {\n            if (ans[i] == 1e9) continue;\n\n            TrieNode* node = t.root;\n            \n            for (int j = i; j < m; ++j) {\n                if (!node->child.count(tar[j])) break;\n                node = node -> child[tar[j]];\n\n                for (auto &c : node->end) {\n                    int wIndex = c.first , wCost = c.second ,l = words[wIndex].size();\n                   \n                    if (i + l <= m) {\n                        ans[i + l] = min(ans [i + l], ans[i] + wCost);\n                    }\n                }\n            }\n        }\n    \n    if(ans[m] == 1e9){\n        return -1 ;\n    }\n    return ans[m] ;\n        \n    }\n};",
    "submit_ts": "1720322601",
    "subm_id": "1312354222"
}