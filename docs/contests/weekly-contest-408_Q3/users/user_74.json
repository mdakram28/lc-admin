{
    "username": "Maruzensky",
    "submission": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n        \n        zeros = [-1] + [i for i, c in enumerate(s) if c == '0'] + [n]\n        m = len(zeros)\n        \n        answer = 0\n        \n        for x, y in zip(zeros, zeros[1:]):\n            d = y - x\n            answer += (d**2 - d) // 2\n        \n        for d in range(2, m):\n            z = d - 1\n            if z**2 + z > n:\n                break\n                \n            for i in range(m - d):\n                ll = zeros[i]\n                j = i + d\n                rr = zeros[j]\n                \n                lr = zeros[i + 1] - 1\n                rl = zeros[j - 1] + 1\n                \n                up = (lr - ll + 1) * (rr - rl + 1)\n                \n                o = (rl - lr - 1) - z\n                \n                if o >= z**2:\n                    answer += up\n                    continue\n                    \n                b = (rr - ll - 1) - z\n                if b < z**2:\n                    continue\n                    \n                need = z**2 - o\n                \n                x, y = lr - ll, rr - rl\n                x, y = min(x, y), max(x, y)\n                \n                if need <= x:\n                    answer += up - (need**2 + need) // 2\n                    \n                elif need >= y:\n                    np = x + y - need\n                    answer += (np + 1) * (np + 2) // 2\n                    \n                else:\n                    npxt = y - need\n                    answer += (x + 1) * (x + 2) // 2 + (x + 1) * npxt\n                    \n                # print(d, i, answer, zeros)\n                    \n        return answer",
    "submit_ts": "1722137807",
    "subm_id": "1335774298"
}