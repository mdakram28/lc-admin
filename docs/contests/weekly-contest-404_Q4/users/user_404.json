{
    "username": "deadeyee",
    "submission": "class Solution {\npublic:\n    int n, m;\n    vector<vector<int>> g1;\n    vector<vector<int>> g2;\n    vector<int> f1, f2, diam;\n    pair<int,int> mx;\n    vector<int> st, en;\n    void dfs(vector<vector<int>> &g, vector<int> &d, int x, int p) {\n        for (auto i: g[x]) {\n            if (i == p) continue;\n            d[i] = d[x] + 1;\n            if (d[i] > mx.first) {\n                mx.first = d[i];\n                mx.second = i;\n            }\n            dfs(g, d, i, x);\n        }\n    }\n    \n    int work(vector<vector<int>>& g, vector<int>& d, vector<int>& f) {\n        mx = {0, 0};\n        dfs(g, d, 0, -1);\n        st.push_back(mx.second);\n        mx = {0, st.back()};\n        fill(d.begin(), d.end(), 0);\n        dfs(g, d, st.back(), -1);\n        en.push_back(mx.second);\n        // int diam1 = mx.first;\n        diam.push_back(mx.first);\n        int ans = 1e9;\n        for (int i = 0; i < g.size(); ++i) {\n            // cout << i << ' ' << \n            f[i] = max(d[i], diam.back() - d[i]);\n            ans = min(ans, f[i]);\n        }\n        return ans;\n    }\n    \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        n = edges1.size() + 1;\n        m = edges2.size() + 1;\n        g1.resize(n);\n        g2.resize(m);\n        for (auto i: edges1) {\n            g1[i[0]].push_back(i[1]);\n            g1[i[1]].push_back(i[0]);\n        }\n        for (auto i: edges2) {\n            g2[i[0]].push_back(i[1]);\n            g2[i[1]].push_back(i[0]);\n        }\n        vector<int> d1(n);\n        vector<int> d2(m);\n        f1.resize(n); f2.resize(m);\n        int ans1 = work(g1, d1, f1);\n        int ans2 = work(g2, d2, f2);\n        return max({ans1 + ans2 + 1, diam[0], diam[1]});\n    }\n};",
    "submit_ts": 1719717402.0
}