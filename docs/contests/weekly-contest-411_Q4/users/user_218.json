{
    "username": "YarosHarm",
    "submission": "class Solution {\n    static void dbg(Object... args) {\n        List<String> lst = new ArrayList<>();\n        for(Object arg : args) {\n        if(arg.getClass().isArray()) {\n        lst.add(Arrays.toString((int[]) arg));\n        } else {\n        lst.add(arg.toString());\n        }\n        }\n        System.out.println(\"[\" + String.join(\", \", lst) + \"]\");\n        }\n\nstatic void dbg(Object obj) {\n        System.out.println(obj);\n        }\n\nstatic void dbg(int[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(boolean[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(long[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(char[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(int[][] arr) {\n        List<String> lst = new ArrayList<>();\n        for(int i = 0; i < arr.length; i++) {\n        lst.add(Arrays.toString(arr[i]));\n        }\n        System.out.println(\"[\" + String.join(\",\", lst) + \"]\");\n        }\n\nstatic void dbg(long[][] arr) {\n        List<String> lst = new ArrayList<>();\n        for(int i = 0; i < arr.length; i++) {\n        lst.add(Arrays.toString(arr[i]));\n        }\n        System.out.println(\"[\" + String.join(\",\", lst) + \"]\");\n        }\n\nstatic void dbg(List<int[]> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n        res.add(Arrays.toString(lst.get(i)));\n        }\n        System.out.println(\"[\" + String.join(\",\", res) + \"]\");\n        }\n\nstatic void dbg(Queue<int[]> q) {\n        List<int[]> lst = new ArrayList<>(q);\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n        res.add(Arrays.toString(lst.get(i)));\n        }\n        System.out.println(\"[\" + String.join(\",\", res) + \"]\");\n        }\n\nstatic void dbgSegmentTree(long[] tree) {\n        int n = tree.length;\n        List<List<String>> res = new ArrayList<>();\n        for(int level = 2; level <= n; level = (level << 1)) {\n        List<String> curr = new ArrayList<>();\n        int c = n / level;\n        for(int j = c; j < c + c; j++) {\n        curr.add(tree[j] + \"\");\n        }\n        res.add(curr);\n        }\n        Collections.reverse(res);\n        for (List<String> re : res) {\n        dbg(re);\n        }\n        }\n\n\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        int n = s.length();\n        int[] left = new int[n];\n        long[] count = new long[n];\n        long[] prefix = new long[n + 1];\n        int l = 0;\n        int[] c = new int[2];\n        for(int r = 0; r < n; r++) {\n            int curr = s.charAt(r) - '0';\n            c[curr]++;\n            while(c[0] > k && c[1] > k) {\n                int lch = s.charAt(l++) - '0';\n                c[lch]--;\n            }\n            left[r] = l;\n            count[r] = r - l + 1;\n            prefix[r + 1] += prefix[r] + count[r];\n        }\n\n        int qn = queries.length;\n        long[] res = new long[qn];\n        for(int i = 0; i < qn; i++) {\n            int[] q = queries[i];\n            l = q[0];\n            int r = q[1];\n            int p = binSearch(left, l, r);\n            long valid = prefix[r + 1] - prefix[p];\n            long il = p - l;\n            long invalid = il * (il + 1) / 2;\n            res[i] = valid + invalid;\n        }\n\n        return res;\n    }\n\n    int binSearch(int[] arr, int l, int r) {\n        int t = l;\n        while(l <= r) {\n            int m = l + (r - l) / 2;\n            if(arr[m] < t) {\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return l;\n    }\n}\n/**\n012345\n010101\n000123\n123333\n013691215\n */",
    "submit_ts": "1723951586",
    "subm_id": "1359775151"
}