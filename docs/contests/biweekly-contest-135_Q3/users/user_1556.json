{
    "username": "Konsept",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n#include <limits>\n\nclass Solution {\npublic:\n    int minChanges(std::vector<int>& numbers, int limit) {\n        std::map<int, std::vector<int>> diffToMaxValuesMap;\n        std::vector<int> maxValues;\n\n        for (int i = 0; i < numbers.size() / 2; ++i) {\n            int first = numbers[i];\n            int second = numbers[numbers.size() - i - 1];\n            int difference = std::abs(first - second);\n\n            int maxVal = std::max({first, second, limit - first, limit - second});\n\n            diffToMaxValuesMap[difference].push_back(maxVal);\n            maxValues.push_back(maxVal);\n        }\n\n        int minimumChanges = numbers.size();\n        std::sort(maxValues.begin(), maxValues.end());\n\n        for (const auto& [difference, values] : diffToMaxValuesMap) {\n            int thresholdIndex = std::lower_bound(maxValues.begin(), maxValues.end(), difference) - maxValues.begin();\n            int totalChanges = thresholdIndex * 2 + (numbers.size() / 2 - thresholdIndex);\n\n            for (const auto& maxValue : values) {\n                if (maxValue < difference) {\n                    totalChanges -= 2;\n                } else {\n                    totalChanges -= 1;\n                }\n            }\n\n            minimumChanges = std::min(minimumChanges, totalChanges);\n        }\n\n        return minimumChanges;\n    }\n};",
    "submit_ts": "1721489022",
    "subm_id": "1327440395"
}