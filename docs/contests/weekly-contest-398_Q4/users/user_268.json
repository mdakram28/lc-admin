{
    "username": "Ninja1369",
    "submission": "class Solution {\n    int tmp[];\n    public int solve(long pos,long k,int prev,int jump,HashMap<Long,Integer[][]> map){\n        if(pos-1>k) return 0;\n        if(map.containsKey(pos)){\n            if(map.get(pos)[prev][jump] != null) return map.get(pos)[prev][jump];\n        }\n        int ans = 0;\n        if(pos == k) ans++;\n        if(prev==0 && pos!=0) ans += solve(pos-1,k,1,jump,map);\n        if(jump<31) ans += solve(pos+tmp[jump],k,0,jump+1,map);\n        if(!map.containsKey(pos)) map.put(pos,new Integer[2][31]);\n        Integer mat[][]=map.get(pos);\n        mat[prev][jump]=ans;\n        return ans;\n        \n    }\n    public int waysToReachStair(int k) {\n        HashMap<Long,Integer[][]> map = new HashMap<>();\n        tmp = new int[31];\n        for(int i=0;i<31;i++){\n            if(i==0) tmp[i]=1;\n            else tmp[i] = tmp[i-1]*2;\n        }\n        return solve(1,k,0,0,map);\n        \n    }\n}",
    "submit_ts": "1716087913",
    "subm_id": "1261798282"
}