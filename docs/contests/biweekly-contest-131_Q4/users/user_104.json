{
    "username": "kaq",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        vector<int> obstacles;\n        obstacles.push_back(0);\n        obstacles.push_back(1e9);\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                obstacles.push_back(query[1]);\n            }\n        }\n        reverse(queries.begin(), queries.end());\n        sort(obstacles.begin(), obstacles.end());\n        int prevBest = 0;\n        map<int, int> dists;\n        dists[0] = 0;\n        set<int> obsSet(obstacles.begin(), obstacles.end());\n        for (int i = 0; i + 1 < obstacles.size(); i++) {\n            int curDist = obstacles[i + 1] - obstacles[i];\n            if (curDist > prevBest) {\n                prevBest = curDist;\n                dists[obstacles[i + 1]] = curDist;\n            }\n        }\n        \n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                int dist = query[1];\n                auto it = obsSet.find(dist);\n                auto prevIt = prev(it);\n                auto nextIt = next(it);\n                if (dists.contains(dist)) {\n                    dists.erase(dist);\n                }\n                int curDist = *nextIt - *prevIt;\n                obsSet.erase(it);\n                auto mapIt = --dists.upper_bound(*nextIt);\n                if (mapIt->second >= curDist) {\n                    continue;\n                }\n                dists[*nextIt] = curDist;\n                auto insertedIt = dists.find(*nextIt);\n                while (true) {\n                    auto nextInsertedIt = next(insertedIt);\n                    if (nextInsertedIt == dists.end()) {\n                        break;\n                    }\n                    if (nextInsertedIt->second > curDist) {\n                        break;\n                    }\n                    dists.erase(nextInsertedIt);\n                }\n            } else {\n                int dist = query[1];\n                int sz = query[2];\n                int curBest = (--dists.upper_bound(dist))->second;\n                curBest = max(curBest, dist - *(--obsSet.upper_bound(dist)));\n                ans.push_back(curBest >= sz);\n            }\n        }\n        \n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": 1716650326.0
}