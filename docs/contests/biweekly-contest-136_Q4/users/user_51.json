{
    "username": "nevergiveup",
    "submission": "class Solution {\n\n    private static List<Integer>[] graph = new ArrayList[100010];\n\n    static {\n        for (int i = 0;i < 100010;i ++) {\n            graph[i] = new ArrayList<>();\n        }\n    }\n\n    private int[] dists;\n    private int[] ans;\n\n    public int[] timeTaken(int[][] edges) {\n        int m = edges.length , n = m + 1;\n        dists = new int[n];\n        ans = new int[n];\n        for (int i = 0;i < n;i ++) {\n            graph[i].clear();\n        }\n        for (int[] edge : edges) {\n            int u = edge[0] , v = edge[1];\n            graph[u].add(v);\n            graph[v].add(u);\n        }\n        build(0, - 1);\n        solve(0, -1, 0);\n        return ans;\n    }\n\n    private void build(int cur, int parent) {\n        for (int next : graph[cur]) {\n            if (next != parent) {\n                build(next , cur);\n                dists[cur] = Math.max(dists[cur] , dists[next] + (next % 2 == 0 ? 2 : 1));\n            }\n        }\n    }\n\n    private void solve(int cur, int parent, int otherDist) {\n        ans[cur] = Math.max(dists[cur], otherDist);\n        List<Integer> nextList = new ArrayList<>();\n        for (int next : graph[cur]) {\n            if (next != parent) {\n                nextList.add(next);\n            }\n        }\n        int[] prefix = new int[nextList.size()];\n        int[] suffix = new int[nextList.size()];\n        for (int i = 0;i < nextList.size();i ++) {\n            prefix[i] = dists[nextList.get(i)] + (nextList.get(i) % 2 == 0 ? 2 : 1);\n            if (i > 0) {\n                prefix[i] = Math.max(prefix[i] , prefix[i - 1]);\n            }\n        }\n        for (int i = nextList.size() - 1;i >= 0;i --) {\n            suffix[i] = dists[nextList.get(i)] + (nextList.get(i) % 2 == 0 ? 2 : 1);\n            if (i + 1 < nextList.size()) {\n                suffix[i] = Math.max(suffix[i] , suffix[i + 1]);\n            }\n        }\n        for (int i = 0;i < nextList.size();i ++) {\n            int next = nextList.get(i);\n            int result = otherDist;\n            if (i - 1 >= 0) {\n                result = Math.max(prefix[i - 1] , result);\n            }\n            if (i + 1 < nextList.size()) {\n                result = Math.max(suffix[i + 1] , result);\n            }\n            result += (cur % 2 == 0 ? 2 : 1);\n            solve(next, cur, result);\n        }\n    }\n\n}",
    "submit_ts": "1722697976",
    "subm_id": "1343165531"
}