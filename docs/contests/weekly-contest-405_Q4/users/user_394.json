{
    "username": "coolyuyuyu",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n    public:\n        array<TrieNode*, 26> childs;\n        int cost;\n\n        TrieNode() {\n            childs.fill(nullptr);\n            cost = INT_MAX;\n        }\n    };\n    \n    void add(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->childs[c - 'a'] == nullptr) {\n                node->childs[c - 'a'] = new TrieNode();\n            }\n            node = node->childs[c - 'a'];\n        }\n        \n        node->cost = std::min(node->cost, cost);\n    }\n    \n    \n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            add(root, words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        \n        int cache[n + 1];\n        for (int i = 0; i < n; ++i) {\n            cache[i] = INT_MAX;\n        }\n        cache[n] = 0;\n        \n        for (int idx = n - 1; idx >= 0; --idx) {\n            TrieNode* node = root;\n            for (int i = idx; i < n; ++i) {\n                char c = target[i];\n                if (node->childs[c - 'a'] == nullptr) {\n                    break;\n                }\n                node = node->childs[c - 'a'];\n                \n                if (node->cost != INT_MAX && cache[i + 1] != INT_MAX) {\n                    cache[idx] = std::min(cache[idx], node->cost + cache[i + 1]);\n                }\n            }\n        }\n        \n        int ret = cache[0];\n        \n        /*\n        std::function<void(int, int)> dfs = [&](int cost, int idx) {\n            if (cost >= ret) {\n                return;\n            }\n            if (idx >= n) {\n                ret = std::min(ret, cost);\n                return;\n            }\n            \n            TrieNode* node = root;\n            for (int i = idx; i < n; ++i) {\n                char c = target[i];\n                if (node->childs[c - 'a'] == nullptr) {\n                    return;\n                }\n                node = node->childs[c - 'a'];\n                \n                if (node->cost != INT_MAX) {\n                    dfs(cost + node->cost, i + 1);\n                }\n            }\n        };\n        dfs(0, 0);\n        */\n        \n        \n        if (ret == INT_MAX) {\n            return -1;\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1720322017",
    "subm_id": "1312338464"
}