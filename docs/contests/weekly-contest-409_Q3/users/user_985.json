{
    "username": "ytffff",
    "submission": "class BitIndexTree:\n    def __init__(self, n):\n        self.n = n\n        self.trie = [0] * (n + 1)\n\n    def lowBit(self, x):\n        return x & -x\n\n    def add(self, l, r, nums):\n        l += 1\n        r += 1\n        i = l\n        while i <= self.n:\n            self.trie[i] += nums\n            i += self.lowBit(i)\n        i = r + 1\n        while i <= self.n:\n            self.trie[i] -= nums\n            i += self.lowBit(i)\n\n    def query(self, index):\n        index += 1\n        ans = 0\n        i = index\n        while i >= 1:\n            ans += self.trie[i]\n            i -= self.lowBit(i)\n        return ans\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n, queries):\n        ans = [0] * len(queries)\n        b1 = BitIndexTree(n)\n        b2 = BitIndexTree(n)\n        \n        for i in range(n):\n            b1.add(i, i, n - 1 - i)\n        \n        cnt = [i + 1 for i in range(n)]\n        \n        for i in range(len(queries)):\n            query = queries[i]\n            l = query[0]\n            r = query[1]\n            if b2.query(l) == 0 and cnt[l] < r:\n                dis = b1.query(l) - (1 + b1.query(r))\n                b1.add(0, l, -dis)\n                cnt[l] = r\n            if l + 1 <= r - 1:\n                b2.add(l + 1, r - 1, 1)\n            ans[i] = b1.query(0)\n\n        return ans\n",
    "submit_ts": "1722743128",
    "subm_id": "552348951"
}