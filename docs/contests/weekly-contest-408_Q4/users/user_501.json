{
    "username": "Googlehsiehh",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int m = circles.length;\n        UF uf = new UF(m);\n        uf.setBounds(circles);\n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; j < m; j++) {\n                if (isIntersected(circles[i], circles[j])) {\n                    uf.union(i, j);\n                }\n            }\n        }\n        for (int i = 0; i < uf.bounds.length; i++) {\n            int[] b = uf.bounds[i];\n            if (b[1] >= X && b[2] >= Y) {\n                return false;\n            }\n            if (b[0] <= 0 && b[3] <= 0) {\n                return false;\n            }\n            if (b[0] <= 0 && b[1] >= X) {\n                return false;\n            }\n            if (b[3] <= 0 && b[2] >= Y) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private boolean isIntersected(int[] c1, int[] c2) {\n        long x1 = c1[0];\n        long y1 = c1[1];\n\n        long x2 = c2[0];\n        long y2 = c2[1];\n\n        long d1 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n\n        long d2 = (c1[2] + c2[2]) * (c1[2] + c2[2]);\n        if (d1 <= d2) {\n            return true;\n        }\n        return false;\n    }\n}\n\n\n\nclass UF {\n    public int[] roots;\n    public int[] sizes;\n    public int total;\n\n    public int[][] bounds;\n    public UF(int total) {\n        roots = new int[total];\n        sizes = new int[total];\n        for (int i = 0; i < total; i++) {\n            roots[i] = i;\n            sizes[i] = 1;\n        }\n        this.total = total;\n    }\n\n    public void setBounds(int[][] circles) {\n        bounds = new int[total][4];\n        for (int i = 0; i < circles.length; i++) {\n            int[] c = circles[i];\n            int x = c[0];\n            int y = c[1];\n\n            int left = x - c[2];\n            int right = x + c[2];\n            int top = y + c[2];\n            int bottom = y - c[2];\n\n            bounds[i] = new int[] {left, right, top, bottom};\n        }\n    }\n\n\n    public void union(int x, int y) {\n        int r1 = find(x);\n        int r2 = find(y);\n        if (r1 == r2) {\n            return;\n        }\n        int s1 = sizes[r1];\n        int s2 = sizes[r2];\n\n        int[] b1 = bounds[r1];\n        int[] b2 = bounds[r2];\n\n        int s = s1 + s2;\n        if (s1 < s2) {\n            roots[r1] = r2;\n            sizes[r2] = s;\n            b2[0] = Math.min(b2[0], b1[0]);\n            b2[1] = Math.max(b2[1], b1[1]);\n            b2[2] = Math.max(b2[2], b1[2]);\n            b2[3] = Math.min(b2[3], b1[3]);\n        } else {\n            roots[r2] = r1;\n            sizes[r1] = s;\n            b1[0] = Math.min(b2[0], b1[0]);\n            b1[1] = Math.max(b2[1], b1[1]);\n            b1[2] = Math.max(b2[2], b1[2]);\n            b1[3] = Math.min(b2[3], b1[3]);\n        }\n    }\n\n    public int find(int x) {\n        int root = x;\n        while (roots[root] != root) {\n            root = roots[root];\n        }\n        while (roots[x] != root) {\n            int temp = roots[x];\n            roots[x] = root;\n            x = temp;\n        }\n        return root;\n    }\n}\n\n",
    "submit_ts": "1722137949",
    "subm_id": "1335778021"
}