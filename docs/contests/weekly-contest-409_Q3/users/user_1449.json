{
    "username": "qlj-u",
    "submission": "class SegmentTree:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [0] * (4 * n)  # Lazy propagation\n\n    def build(self, start: int, end: int, node: int):\n        if start == end:\n            self.tree[node] = 1\n        else:\n            mid = (start + end) // 2\n            self.build(start, mid, 2 * node + 1)\n            self.build(mid + 1, end, 2 * node + 2)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update_range(self, start: int, end: int, l: int, r: int, node: int):\n        if self.lazy[node] != 0:\n            self.tree[node] = 0  # All values in this segment are updated to 0\n            if start != end:\n                self.lazy[2 * node + 1] = 1\n                self.lazy[2 * node + 2] = 1\n            self.lazy[node] = 0\n\n        if start > end or start > r or end < l:\n            return\n\n        if start >= l and end <= r:\n            self.tree[node] = 0\n            if start != end:\n                self.lazy[2 * node + 1] = 1\n                self.lazy[2 * node + 2] = 1\n            return\n\n        mid = (start + end) // 2\n        self.update_range(start, mid, l, r, 2 * node + 1)\n        self.update_range(mid + 1, end, l, r, 2 * node + 2)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query_range(self, start: int, end: int, l: int, r: int, node: int) -> int:\n        if start > end or start > r or end < l:\n            return 0\n\n        if self.lazy[node] != 0:\n            self.tree[node] = 0\n            if start != end:\n                self.lazy[2 * node + 1] = 1\n                self.lazy[2 * node + 2] = 1\n            self.lazy[node] = 0\n\n        if start >= l and end <= r:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_query = self.query_range(start, mid, l, r, 2 * node + 1)\n        right_query = self.query_range(mid + 1, end, l, r, 2 * node + 2)\n        return left_query + right_query\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        segment_tree = SegmentTree(n)\n        segment_tree.build(0, n - 1, 0)\n        result = []\n\n        for u, v in queries:\n            segment_tree.update_range(0, n - 1, u + 1, v - 1, 0)\n            valid_count = segment_tree.query_range(0, n - 1, 0, n - 1, 0)\n            result.append(valid_count - 1)\n\n        return result",
    "submit_ts": "1722743498",
    "subm_id": "552351151"
}