{
    "username": "skylet",
    "submission": "class Solution {\n    func minimumCost(_ m: Int, _ n: Int, _ horizontalCut: [Int], _ verticalCut: [Int]) -> Int {\n        var rows = 1\n        var cols = 1\n        var queue = [(cost: Int, place: String, index: Int)]()\n        for (i, c) in horizontalCut.enumerated() {\n            queue.append((cost: c, place: \"row\", index: i))\n        }\n        for (i, c) in verticalCut.enumerated() {\n            queue.append((cost: c, place: \"col\", index: i))\n        }\n        queue.sort { a, b in\n            a.cost < b.cost\n        }\n        var ans = 0\n        while let (cost, place, index) = queue.popLast() {\n            if place == \"row\" {\n                ans += rows * cost\n                cols += 1\n            } else {\n                ans += cols * cost\n                rows += 1\n            }\n        }\n        return ans\n    }\n}",
    "submit_ts": "1720926808",
    "subm_id": "546448661"
}