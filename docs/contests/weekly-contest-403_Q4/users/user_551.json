{
    "username": "BrayBray123",
    "submission": "struct Dir {\n    int l, r, t, d;\n    \n    Dir(): l{INT_MAX}, r{-1}, t{INT_MAX}, d{-1} {}\n    Dir(int l, int r, int t, int d): l{l}, r{r}, t{t}, d{d} {}\n    \n    void update(int i, int j) {\n        l = min(l, j);\n        r = max(r, j);\n        t = min(t, i);\n        d = max(d, i);\n    }\n    \n    int area() {\n        if (r == -1) return 1000;\n        return (r - l + 1) * (d - t + 1);\n    }\n    \n    void display() {\n        cout << l << \" \" << r << \" \" << t << \" \" << d << \" \" << area() << endl;\n    }\n};\n\nclass Solution {\npublic:\n    Dir* get(Dir *dir, vector<vector<int>> &grid) {\n        Dir *newDir = new Dir();\n        for (int i = dir->t; i <= dir->d; i++) {\n            for (int j = dir->l; j <= dir->r; j++) {\n                if (grid[i][j] == 1) {\n                    newDir->update(i,j);\n                }\n            }\n        }\n        return newDir;\n    }\n    \n    int splith(Dir *dir, vector<vector<int>> &grid) {\n        int ans = 1000;\n        \n        for (int i = dir->t; i < dir->d; i++) {\n            Dir *a = get(new Dir(dir->l,dir->r,dir->t,i), grid);\n            Dir *b = get(new Dir(dir->l,dir->r,i+1,dir->d), grid);\n            ans = min(ans, a->area() + b->area());\n        }\n        \n        for (int j = dir->l; j < dir->r; j++) {\n            Dir *a = get(new Dir(dir->l,j,dir->t,dir->d), grid);\n            Dir *b = get(new Dir(j+1,dir->r,dir->t,dir->d), grid);\n            ans = min(ans, a->area() + b->area());\n        }\n        return ans;\n    }\n    \n    int split(Dir* dir, vector<vector<int>> &grid) {\n        int ans = 1000;\n        \n        for (int i = dir->t; i < dir->d; i++) {\n            Dir *a = get(new Dir(dir->l,dir->r,dir->t,i), grid);\n            Dir *b = get(new Dir(dir->l,dir->r,i+1,dir->d), grid);\n            int c = splith(a, grid);\n            int d = splith(b, grid);\n            ans = min({ans, a->area() + d, b->area() + c});\n        }\n        \n        for (int j = dir->l; j < dir->r; j++) {\n            Dir *a = get(new Dir(dir->l,j,dir->t,dir->d), grid);\n            Dir *b = get(new Dir(j+1,dir->r,dir->t,dir->d), grid);\n            int c = splith(a, grid);\n            int d = splith(b, grid);\n            ans = min({ans, a->area() + d, b->area() + c});\n        }\n        return ans;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        int row = grid.size(), col = grid[0].size();\n        Dir *dir = new Dir();\n        \n        for (int i = 0; i < row; i++) {\n            for (int j = 0; j < col; j++) {\n                if (grid[i][j] == 1) {\n                    dir->update(i,j);\n                }\n            }\n        }\n                \n        int ans = split(dir, grid);\n        cout << ans << endl;\n                \n        for (int i = dir->t; i < dir->d-1; i++) {\n            for (int j = i+1; j < dir->d; j++) {\n                Dir *x = get(new Dir(dir->l,dir->r,dir->t,i), grid);\n                Dir *y = get(new Dir(dir->l,dir->r,i+1,j), grid);\n                Dir *z = get(new Dir(dir->l,dir->r,j+1,dir->d), grid);\n                ans = min(ans, x->area() + y->area() + z->area());\n            }\n        }\n        \n        for (int i = dir->l; i < dir->r-1; i++) {\n            for (int j = i+1; j < dir->r; j++) {\n                Dir *x = get(new Dir(dir->l,i,dir->t,dir->d), grid);\n                Dir *y = get(new Dir(i+1,j,dir->t,dir->d), grid);\n                Dir *z = get(new Dir(j+1,dir->r,dir->t,dir->d), grid);\n                ans = min(ans, x->area() + y->area() + z->area());\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1719114724.0
}