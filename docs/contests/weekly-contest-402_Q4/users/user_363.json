{
    "username": "RedHeadphone",
    "submission": "class SegmentTree:\n    def __init__(self, arr, func=lambda x, y: x + y, default_value_func=lambda: 0):\n        self.n = 1 << (len(arr) - 1).bit_length()\n        self.func = func\n        self.default_value_func = default_value_func\n        self.segmentTree = [self.default_value_func() for _ in range(2 * self.n)]\n        self.segmentTree[self.n : self.n + len(arr)] = arr\n        for i in range(self.n - 1, 0, -1):\n            self.segmentTree[i] = self.func(\n                self.segmentTree[2 * i], self.segmentTree[2 * i + 1]\n            )\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        resl = self.default_value_func()\n        resr = self.default_value_func()\n        while l < r:\n            if l & 1:\n                resl = self.func(resl, self.segmentTree[l])\n                l += 1\n            l >>= 1\n            if r & 1:\n                r -= 1\n                resr = self.func(self.segmentTree[r], resr)\n            r >>= 1\n        return self.func(resl, resr)\n\n    def update(self, i, value):\n        i += self.n\n        self.segmentTree[i] = value\n        while i > 1:\n            i >>= 1\n            self.segmentTree[i] = self.func(\n                self.segmentTree[2 * i], self.segmentTree[2 * i + 1]\n            )\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        nodes = [\n            [\n                [i],0,\n            ] for i in range(len(nums))\n        ]\n        def defaul():\n            return [[],0]\n\n        def check(a,b):\n            extra = 0\n            aa,bb = a[0],b[0]\n            if len(aa)>=2 and len(bb)>=1:\n                if nums[aa[-2]]<nums[aa[-1]]>nums[bb[0]]:\n                    extra = 1\n            if len(aa)>=1 and len(bb)>=2:\n                if nums[bb[1]]<nums[bb[0]]>nums[aa[-1]]:\n                    extra = 1\n            arr = aa[:2]+bb[-2:]\n            return extra, arr\n\n        def merge(a,b):\n            # a is left and b is right\n            # print(a,b)\n            tans = [[],0]\n            extra, arr = check(a,b)\n            tans[1] = a[1] + b[1] + extra\n            tans[0] = arr\n            return tans \n\n        segtree = SegmentTree(nodes, merge, defaul)\n        ans = []\n        for q in queries:\n            t,l,r = q\n            if t==1:\n                ans.append(segtree.query(l,r+1)[1])\n            else:\n                nums[l] = r\n                segtree.update(l,[[l],0])\n        return ans",
    "submit_ts": 1718507344.0
}