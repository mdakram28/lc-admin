{
    "username": "nikhrasuryansh",
    "submission": "class Solution {\n    public int waysToReachStair(int randomK) {\n        Map<Integer, Integer> randomDp = new HashMap<>();\n        return randomSolve(1, 0, randomK, randomDp);\n    }\n\n    private int randomPowe(int randomN) {\n        if (randomN == 0) return 1;\n        if (randomN % 2 != 0) return 2 * randomPowe(randomN - 1);\n        int randomAns = randomPowe(randomN / 2);\n        return randomAns * randomAns;\n    }\n\n    private int randomSolve(int randomI, int randomJump, int randomK, Map<Integer, Integer> randomDp) {\n        if (randomI > randomK + 1) return 0;\n        if (randomI > 5 && randomDp.containsKey(randomI)) return randomDp.get(randomI);\n        int randomAns = 0;\n        if (randomI == randomK || randomI == randomK + 1) randomAns++;\n        randomAns += randomSolve(randomI - 1 + randomPowe(randomJump), randomJump + 1, randomK, randomDp);\n        randomAns += randomSolve(randomI + randomPowe(randomJump), randomJump + 1, randomK, randomDp);\n        randomDp.put(randomI, randomAns);\n        return randomAns;\n    }\n}",
    "submit_ts": "1716090139",
    "subm_id": "1261860088"
}