{
    "username": "Hemonesh_M",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\n#include <climits>\n\nclass Node {\npublic:\n    std::unordered_map<char, Node*> children;\n    int minCost;\n\n    Node() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Node* root;\n    \n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(const std::string& word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new Node();\n            }\n            node = node->children[c];\n        }\n        node->minCost = std::min(node->minCost, cost);  // Store the minimum cost at the terminal node\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        int targetLength = target.length();\n        std::vector<int> dp(50005, INT_MAX);\n        dp[0] = 0;\n\n        // Build the Trie\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // Dynamic programming with Trie\n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;  // Skip impossible states\n\n            Node* currentNode = trie.root;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break;\n                currentNode = currentNode->children[target[j]];\n                if (currentNode->minCost != INT_MAX) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + currentNode->minCost);\n                }\n            }\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n",
    "submit_ts": "1720322595",
    "subm_id": "1312354056"
}