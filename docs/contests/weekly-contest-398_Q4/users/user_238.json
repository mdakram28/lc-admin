{
    "username": "leetcode_3604",
    "submission": "class Solution {\npublic:\n    map<int, int> dp[40][2];\n    int target;\n    int dfs(int cur, int jump, bool con) {\n        int res = 0;\n        \n        if(cur < 0) return 0;\n        if(cur > target + 2) return 0;\n        if(dp[jump][con].find(cur) != dp[jump][con].end()) return dp[jump][con][cur];\n        if(cur == target) res = 1;\n        if(!con) res += dfs(cur-1, jump, true);\n        res += dfs(cur + (1<<jump), jump + 1, false);\n        return dp[jump][con][cur] = res;\n    }\n    \n    int waysToReachStair(int k) {\n        target = k;\n        for(int i = 0; i < 40; ++i) for(int j =0; j < 2; ++j) dp[i][j].clear();\n        return dfs(1, 0, false);\n    }\n};",
    "submit_ts": "1716087037",
    "subm_id": "1261771040"
}