{
    "username": "VictorVictini",
    "submission": "public class Solution {\n    public int MinChanges(int[] nums, int k) {\n        int[] count = new int[k + 1];\n        int maxKey = 0;\n        for (int left = 0, right = nums.Length - 1; left < right; left++, right--) {\n            int key = Math.Abs(nums[left] - nums[right]);\n            count[key]++;\n            if (count[maxKey] < count[key]) {\n                maxKey = key;\n            } else if (count[maxKey] == count[key]) {\n                maxKey = Math.Min(maxKey, key);\n            }\n        }\n        int[] indices = Enumerable.Range(0, count.Length).ToArray();\n        Array.Sort(indices, (a, b) => count[b].CompareTo(count[a]));\n        int changes = nums.Length;\n        int changesCount = nums.Length - 1;\n        for (int i = 0; i < indices.Length; i++) {\n            int cost = CalculateChangesRequired(indices[i], nums, k);\n            if (cost > changes) {\n                if (changesCount != count[indices[i]]) break;\n            } else {\n                changes = cost;\n                changesCount = count[indices[i]];\n            }\n        }\n        return changes;\n    }\n    private int CalculateChangesRequired(int X, int[] nums, int k) {\n        int changes = 0;\n        for (int left = 0, right = nums.Length - 1; left < right; left++, right--) {\n            int diff = Math.Abs(nums[left] - nums[right]);\n            if (diff == X) continue;\n            if (diff > X || k - nums[left] >= X || nums[left] >= X || k - nums[right] >= X || nums[right] >= X) {\n                changes++;\n            } else {\n                changes += 2;\n            }\n        }\n        return changes;\n    }\n}",
    "submit_ts": "1721489545",
    "subm_id": "1327456519"
}