{
    "username": "Roman_EMPIRE0825",
    "submission": "\nclass TrieNode {\npublic:\n    vector<TrieNode*> childNode;\n    int value;\n    bool isEndOfWord;\n\n    TrieNode() : childNode(26, nullptr), value(INT_MAX), isEndOfWord(false) {}\n};\n\nclass TrieTree {\npublic:\n    TrieNode* root;\n\n    TrieTree() {\n        root = new TrieNode();\n    }\n\n    void addWord(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->childNode[c - 'a']) {\n                node->childNode[c - 'a'] = new TrieNode();\n            }\n            node = node->childNode[c - 'a'];\n        }\n        node->value = min(cost, node->value);\n        node->isEndOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieTree trie;\n        int length = target.size();\n        vector<int> mini(length + 1, INT_MAX);\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], costs[i]);\n        }\n        mini[0] = 0;\n\n        for (int i = 0; i < length; ++i) {\n            if (mini[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < length; ++j) {\n                char c = target[j];\n                if (!node->childNode[c - 'a']) break;\n                node = node->childNode[c - 'a'];\n                if (node->isEndOfWord) {\n                    mini[j + 1] = min(mini[j + 1], mini[i] + node->value);\n                }\n            }\n        }\n\n        return mini[length] == INT_MAX ? -1 : mini[length];\n    }\n};\n",
    "submit_ts": "1720324151",
    "subm_id": "1312392778"
}