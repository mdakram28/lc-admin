{
    "username": "krishna_6431",
    "submission": "/*\n     \u0950 \u0924\u094d\u0930\u094d\u092f\u092e\u094d\u092c\u0915\u0902 \u092f\u091c\u093e\u092e\u0939\u0947 \u0938\u0941\u0917\u0928\u094d\u0927\u093f\u0902 \u092a\u0941\u0937\u094d\u091f\u093f\u0935\u0930\u094d\u0927\u0928\u092e\u094d |\n     \u0909\u0930\u094d\u0935\u093e\u0930\u0941\u0915\u092e\u093f\u0935 \u092c\u0928\u094d\u0927\u0928\u093e\u0928\u094d\u092e\u0943\u0924\u094d\u092f\u094b\u0930\u094d\u092e\u0941\u0915\u094d\u0937\u0940\u092f \u092e\u093e\u093d\u092e\u0943\u0924\u093e\u0924\u094d ||\n*/\n// All Important Header Files\n#pragma GCC optimize(\"O3,unroll-loops\")\n\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\nusing namespace chrono;\n\n// ALL IMPORTANT MACROS\n#define pb push_back\n#define mp make_pair\n#define fr first\n#define sc second\n#define deb(x) cout << x << endl;\n#define loop(start, end, incr) for (int i = start; i < end; i += incr)\n#define mod 1000000007\n#define mod1 998244353\n#define len(x) x.size()\n#define min3(a, b, c) min(a, min(b, c))\n#define max3(a, b, c) max(a, max(b, c))\n#define all(v) v.begin(), v.end()\n#define alla(a, n) a, a + n\n#define endl \"\\n\"\n#define RadheKrishna                  \\\n    ios_base::sync_with_stdio(false); \\\n    cin.tie(NULL);                    \\\n    cout.tie(NULL);\n// SOME TYPEDEF DECLARATION\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\ntypedef pair<ll, ll> pll;\ntypedef vector<ll> vll;\ntypedef vector<pll> vpll;\ntypedef vector<vll> vvll;\ntypedef vector<string> vs;\n#define que_max priority_queue<int>\n#define que_min priority_queue<int, vi, greater<int>>\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n#define mr_krishna\n#ifdef mr_krishna\n#define debug(x)        \\\n    cerr << #x << \" \";  \\\n    printing_debugs(x); \\\n    cerr << endl;\n#else\n#define debug(x) ;\n#endif\n\n#define bug(...) __f(#__VA_ARGS__, __VA_ARGS__)\n/*******************************************printing_debugsing************************************************************/\n// credit : template from priyansh agrawal (only debug statement templates)\n// codeforces handle : priyansh31dec\nvoid printing_debugs(ll t) { cerr << t; }\nvoid printing_debugs(int t) { cerr << t; }\nvoid printing_debugs(string t) { cerr << t; }\nvoid printing_debugs(char t) { cerr << t; }\nvoid printing_debugs(lld t) { cerr << t; }\nvoid printing_debugs(double t) { cerr << t; }\nvoid printing_debugs(ull t) { cerr << t; }\n\ntemplate <class T, class V>\nvoid printing_debugs(pair<T, V> p);\ntemplate <class T>\nvoid printing_debugs(vector<T> v);\ntemplate <class T>\nvoid printing_debugs(set<T> v);\ntemplate <class T, class V>\nvoid printing_debugs(map<T, V> v);\ntemplate <class T>\nvoid printing_debugs(multiset<T> v);\ntemplate <class T, class V>\nvoid printing_debugs(pair<T, V> p)\n{\n    cerr << \"{\";\n    printing_debugs(p.fr);\n    cerr << \",\";\n    printing_debugs(p.sc);\n    cerr << \"}\";\n}\ntemplate <class T>\nvoid printing_debugs(vector<T> v)\n{\n    cerr << \"[ \";\n    for (T i : v)\n    {\n        printing_debugs(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\ntemplate <class T>\nvoid printing_debugs(set<T> v)\n{\n    cerr << \"[ \";\n    for (T i : v)\n    {\n        printing_debugs(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\ntemplate <class T>\nvoid printing_debugs(multiset<T> v)\n{\n    cerr << \"[ \";\n    for (T i : v)\n    {\n        printing_debugs(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\ntemplate <class T, class V>\nvoid printing_debugs(map<T, V> v)\n{\n    cerr << \"[ \";\n    for (auto i : v)\n    {\n        printing_debugs(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\n// void printing_debugs(pbds v) {cerr << \"[ \"; for (auto i : v) {printing_debugs(i); cerr << \" \";} cerr << \"]\";}\n\n/****************************printing_debugsing End*********************************************************/\ntemplate <typename Arg1>\nvoid __f(const char *name, Arg1 &&arg1)\n{\n    cout << name << \" : \" << arg1 << endl;\n}\ntemplate <typename Arg1, typename... Args>\nvoid __f(const char *names, Arg1 &&arg1, Args &&...args)\n{\n    const char *comma = strchr(names + 1, ',');\n    cout.write(names, comma - names) << \" : \" << arg1 << \" | \";\n    __f(comma + 1, args...);\n}\n/**********Standard Algorithm************/\n// credit : template from priyansh agrawal (only debug statement templates)\n// codeforces handle : priyansh31dec\nll fast_expo(ll a, ll b, ll m)\n{\n    ll res = 1;\n    while (b > 0)\n    {\n        if (b & 1)\n            res = (res * a) % m;\n        a = (a * a) % m;\n        b = b >> 1;\n    }\n    return res;\n}\n\nll mod_add(ll a, ll b, ll m)\n{\n    a = a % m;\n    b = b % m;\n    return (((a + b) % m) + m) % m;\n}\n\nll mod_mul(ll a, ll b, ll m)\n{\n    a = a % m;\n    b = b % m;\n    return (((a * b) % m) + m) % m;\n}\n\nll mod_sub(ll a, ll b, ll m)\n{\n    a = a % m;\n    b = b % m;\n    return (((a - b) % m) + m) % m;\n}\n\nll mod_inv_prime(ll a, ll b)\n{\n    return fast_expo(a, b - 2, b);\n}\n\nll mod_div(ll a, ll b, ll m)\n{\n    a = a % m;\n    b = b % m;\n    return (mod_mul(a, mod_inv_prime(b, m), m) + m) % m;\n} // only for prime m\n\nvector<ll> sieve(int n)\n{\n    int *arr = new int[n + 1]();\n    vector<ll> vect;\n    for (int i = 2; i <= n; i++)\n        if (arr[i] == 0)\n        {\n            vect.push_back(i);\n            for (int j = 2 * i; j <= n; j += i)\n                arr[j] = 1;\n        }\n    return vect;\n}\n/********************************************************************/\n\n// CODE WRITTEN BY mr_krishna(cc,cf,google)/krishna_6431(gfg,leet)\n// Generated by LeetCodeContestHelper at 22/06/2024, 20:58:05\n// 100333. Count the Number of Inversions\n// https://leetcode.com/contest/biweekly-contest-133/problems/count-the-number-of-inversions/\n\n#define _USE_MATH_DEFINES\n#include <climits>\n#include <cmath>\n\n#include <array>\n#include <deque>\n#include <forward_list>\n#include <list>\n#include <map>\n#include <queue>\n#include <set>\n#include <stack>\n#include <unordered_map>\n#include <unordered_set>\n#include <vector>\n\n#include <iomanip>\n#include <iostream>\n#include <sstream>\n\n#include <algorithm>\n#include <bitset>\n#include <functional>\n#include <iterator>\n#include <limits>\n#include <numeric>\n#include <regex>\n#include <string>\n#include <tuple>\n#include <utility>\n#include <valarray>\n\nusing namespace std;\n\nll dp[401 + 1][405];\nmap<ll, ll> endReq;\n\nvoid checkNewP(ll &curr, ll &len)\n{\n    for (; curr <= 401; curr++)\n    {\n        ll newp = 0;\n        for (int i = newp; i < len; i++)\n        {\n            if (curr - i >= 0)\n            {\n                dp[len][curr] = mod_add(dp[len][curr], dp[len - 1][curr - i], mod);\n            }\n        }\n    }\n}\n\nvoid checkEndReq(ll &end, ll &len)\n{\n    if (end > 0)\n    {\n        for (ll curr = 0; curr <= 401; curr++)\n        {\n            if (curr == endReq[len])\n            {\n                continue;\n            }\n            if (curr != endReq[len])\n            {\n                dp[len][curr] = 0;\n            }\n        }\n    }\n}\n\nclass Solution\n{\npublic:\n    int numberOfPermutations(int n, vector<vector<int>> &requirements)\n    {\n        endReq.clear();\n        for (auto &req : requirements)\n        {\n            endReq[req[0] + 1] = req[1];\n        }\n\n        memset(dp, 0, sizeof(dp));\n        dp[0][0] = 1;\n        ll len = 1;\n\n        while (len <= n)\n        {\n            ll curr = 0;\n            checkNewP(curr, len);\n            ll end = (ll)endReq.count(len);\n            checkEndReq(end, len);\n            len++;\n        }\n\n        ll ans = 0;\n        ll curr = 0;\n        for (ll curr = 0; curr <= 401; curr++)\n        {\n            ans = (ans + dp[n][curr]) % mod;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1719071339.0
}