{
    "username": "Ethan-ZYF",
    "submission": "class DSU:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.size = [1] * n\n        self.geom = [{'l': float('inf'), 'r': float('-inf'), 'u': float('-inf'), 'd': float('inf')} for _ in range(n)]\n    \n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def merge(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        if rootX != rootY:\n            if self.size[rootX] < self.size[rootY]:\n                rootX, rootY = rootY, rootX\n            self.parent[rootY] = rootX\n            self.size[rootX] += self.size[rootY]\n            self.geom[rootX]['l'] = min(self.geom[rootX]['l'], self.geom[rootY]['l'])\n            self.geom[rootX]['r'] = max(self.geom[rootX]['r'], self.geom[rootY]['r'])\n            self.geom[rootX]['u'] = max(self.geom[rootX]['u'], self.geom[rootY]['u'])\n            self.geom[rootX]['d'] = min(self.geom[rootX]['d'], self.geom[rootY]['d'])\n            return True\n        return False\n    \n    def set(self, x, y):\n        return self.find(x) == self.find(y)\n\nclass Solution:\n    def canReachCorner(self, X, Y, circles):\n        n = len(circles)\n        dsu = DSU(n)\n        \n        for i in range(n):\n            x, y, rad = circles[i]\n            l = x - rad\n            r = x + rad\n            d = y - rad\n            u = y + rad\n            dsu.geom[i] = {'l': l, 'r': r, 'u': u, 'd': d}\n        \n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                x1, y1, r1 = circles[i]\n                x2, y2, r2 = circles[j]\n                if (x1 - x2)**2 + (y1 - y2)**2 <= (r1 + r2)**2:\n                    if not dsu.set(i, j):\n                        dsu.merge(i, j)\n        \n        for i in range(n):\n            p = dsu.find(i)\n            l = dsu.geom[p]['l']\n            r = dsu.geom[p]['r']\n            u = dsu.geom[p]['u']\n            d = dsu.geom[p]['d']\n            \n            if l <= 0 and d <= 0:\n                return False\n            if r >= X and u >= Y:\n                return False\n            if l <= 0 and r >= X:\n                return False\n            if d <= 0 and u >= Y:\n                return False\n        \n        return True",
    "submit_ts": "1722138130",
    "subm_id": "1335782886"
}