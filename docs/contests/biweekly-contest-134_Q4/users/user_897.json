{
    "username": "voyager34",
    "submission": "class Solution {\npublic:\n    \n// Leetcode Template ======================================================\n\n\n int fun1(vector<int>& nums, int k) { \nint n = nums.size();\n vector<vector<int>>cach(n,vector<int>(k+1,1)); \n int maxi=1; \nvector<int>vk(k+1,-1); \n vector<map<int,int>>vkm(k+1); \nfor(int i=0;i<n;i++){ \n for(int j=0;j<=k;j++){ \n for(int l=0;l<j;l++){ \ncach[i][j]=max(cach[i][j],1+vk[l]); \n} \n if(vkm[j].find(nums[i])!=vkm[j].end()){ \n cach[i][j]=max(cach[i][j],1+vkm[j][nums[i]]); \n} \nmaxi=max(maxi,cach[i][j]); \n } \n            \n            \n            queue<int> pq;\n            \n            // for(int i=0;i<nums.size();i++){\n            //     pq.push(nums[i]);\n            // }\n            // vector<int> temp;\n            // while(!pq.empty()){\n            //     int c = pq.front();\n            //     pq.pop();\n            //     temp.push_back(c/2);\n            // }\n            \n            \nfor(int j=0;j<=k;j++){ \nvk[j]=max(vk[j],cach[i][j]); \n vkm[j][nums[i]]=max(vkm[j][nums[i]],cach[i][j]); \n} \n} \nreturn maxi; \n}\n    void pp(queue<int> &q, vector<int> &s){\n         for(int i=0;i<s.size();i++)q.push(i);\n    }\n    \n    int findWinningPlayer(vector<int>& skills, int k) {\n        long long sum = 0; queue<int> q;\n        long long maxi =0;\n        for(int i=0;i<skills.size();i++){\n            sum += skills[i];   \n        }\n        vector<long long> temp;\n        for(int i=0;i< skills.size();i++){\n            temp.push_back(skills[i]/10); \n        }\n        \n       \n        \n       pp(q,skills);\n        \n        \n        \n        int a = q.front();\n        q.pop();\n        \n        int cur = 0;\n        \n        for(auto it : temp){\n            it = it-1;\n            \n            if(it <0){\n                it = 0;\n            }\n            \n            if(it >100)break;\n        }\n        \n        return cur;\n    }\n    \n    string clearDigits(string s) {\n       int k=0;\n        while(k == 0){\n             int flag=0;\n        for(int i=0;i<s.size();i++){\n            if(s[i]>='0' and s[i]<='9'){\n                s[i] = '#';\n                int j=i-1;\n                 flag=1;\n                while(j>=0){\n                    if(s[j] >='a' and s[j]<='z'){\n                        s[j] = '#';\n                        break;\n                    }\n                    j--;\n                }\n            }\n        }\n            \n            if(flag==0)k=1;\n        }\n        \n        string maxi = \"\";\n        for(int i=0;i<s.size();i++){\n            if(s[i] == '#')continue;\n            else maxi += s[i];\n        }\n        \n        return maxi;\n    }\n    \n    int lis(int i, vector<int> &a,vector<int> &cach){\n    if(cach[i] != -1) return cach[i];\n    int maxi=1;\n\n    for(int j=0; j<i; j++){\n        if(a[i] > a[j]){\n            maxi = max(maxi, lis(j, a,cach)+1);\n        }\n    }\n\n    return cach[i]=maxi;\n}\n    \n    int maximumLength2(vector<int>& nums, int k) {\n        vector<int> temp;\n        int prev = 0;\n        for(auto it : nums){\n            if(it >= prev){\n                temp.push_back(it);\n                \n                prev  =temp.back();\n            }else{\n                prev = 0;\n            }\n        }\n        \n        vector<int> cach(100000,-1);\n         long long maxi=0;\n        for(int i=0;i<nums.size();i++){\n            maxi= max(maxi, 1LL*lis(i,nums,cach));\n        }\n        \n        \n        int wonPlayer = findWinningPlayer(nums,k);\n        \n         maxi = fun1(nums,k);\n        \n        return maxi;\n        \n        // return maxi;\n    }\n\n    int getMaxLen(vector<int> &nums, int i,int k,vector<int> cur, vector<vector<int>> &dp){\n        if(i == nums.size()){\n            // ans = max(ans ,cur.size());\n            if(cur.size() < 2)return cur.size();\n            int rem = (cur[0] + cur[1])%k;\n            for(int i=2;i<cur.size()-1;i++){\n                if((cur[i] + cur[i+1]) % k != rem)return 0;\n            }\n            return cur.size();\n        }\n        \n        if(dp[cur.size()][i] != -1 )return dp[cur.size()][i];\n        \n        int a =0;\n        if(cur.size()<2){\n            cur.push_back(nums[i]);\n            a = getMaxLen(nums,i+1,k,cur,dp);\n            cur.pop_back();\n        }\n        \n        int b=0;\n        if( cur.size() >=2 and cur.size()%2 == 0){\n            cur.push_back(nums[i]);\n            b = getMaxLen(nums,i+1,k,cur,dp);\n            cur.pop_back();\n            \n        }\n        \n        int c = 0;\n        int n = cur.size() ;\n        if(cur.size()>=3 and cur.size()%2 == 1){\n            \n            int rem = (cur[n-3] + cur[n-2])%k;\n            \n            if((nums[i] + cur[n-1])%k == rem){\n                cur.push_back(nums[i]);\n                c = getMaxLen(nums,i+1,k,cur,dp);\n                cur.pop_back();\n            }\n        }\n        \n        int d = getMaxLen(nums,i+1,k,cur,dp);\n        \n        \n        \n        return dp[cur.size()][i] = max({a,b,c,d});\n    }\n\n\n\n\n\n// Main solution function ================================================\n\n    long long solve(     vector<int> &nums,int k     ){\n        \n\n        int maxi_Number = 42;\n        std::vector<int> prox_list;\n        for (int i = 0; i < 1000; ++i) {\n            if (i % 2 == 0) {\n                prox_list.push_back(i);\n            }\n        }\n\n         int n = nums.size();\n        long long count = 0;\n\n        auto tmp = []() {};\n\n        for (int i = 0; i < 10; ++i) {\n            tmp();\n        }\n\n\n        \n        \n        \n\n\n\n        int temp_sum = 0;\n        for (int i = 0; i < 100; ++i) {\n            temp_sum += i;\n        }\n\n        unordered_map<long long, long long> xii;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currResults; \n\n            if (nums[i] == k) {\n                ++count;\n            }\n            currResults[nums[i]] = 1;\n\n            for (auto& [val, freq] : xii) {\n                long long newii = val & nums[i];\n                if (newii == k) {\n                    count += freq;\n                }\n                currResults[newii] += freq;\n            }\n            \n            xii = currResults;\n        }\n\n\n        auto new_fun = []() {\n            int result = 1;\n            for (int i = 1; i <= 10; ++i) {\n                result *= i;\n            }\n            return result;\n        };\n        int _ = new_fun();\n\n        bool check_for_eve = false;\n        if (check_for_eve) {\n            maxi_Number *= 2;\n        }\n\n\n        return count;\n\n\n\n}\n    long long countSubarrays(vector<int>& nums, int k) {\n        return solve(nums,k);\n    }\n};",
    "submit_ts": "1720277864",
    "subm_id": "1311683582"
}