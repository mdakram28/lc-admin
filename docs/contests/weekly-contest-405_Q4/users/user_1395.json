{
    "username": "yueclipse",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new Node();\n        for(int i = 0; i < words.size(); i++) insert(root, words[i], costs[i]);\n        vector<int> memo(target.size(), 0);\n        return minimumCost(target, memo, 0, root);\n    }\nprivate:\n    struct Node {\n        vector<Node*> next;\n        int cost;\n        Node() {\n            next = vector<Node*>(26, nullptr);\n            cost = 0;\n        }\n    };\n\n    void insert(Node* root, string word, int cost) {\n        Node* node = root;\n        for(char c : word) {\n            if(node->next[c - 'a'] == nullptr)\n                node->next[c - 'a'] = new Node();\n            node = node->next[c - 'a'];\n        }\n        if(node->cost == 0) node->cost = INT_MAX;\n        node->cost = min(node->cost, cost);\n    }\n\n    int minimumCost(string& target, vector<int>& memo, int start, Node* root) {\n        if(start >= target.size()) return 0;\n        if(memo[start] != 0) return memo[start];\n        int cost = -1;\n        Node* node = root;\n        for(int i = start; i < target.size(); i++) {\n            if(node->next[target[i] - 'a'] == nullptr) break;\n            node = node->next[target[i] - 'a'];\n            if(node->cost > 0) {\n                int retVal = minimumCost(target, memo, i + 1, root);\n                if(retVal > -1) {\n                    if(cost == -1) cost = INT_MAX;\n                    cost = min(cost, node->cost + retVal);\n                }\n            }\n        }\n        memo[start] = cost;\n        return cost;\n    }\n\n    Node* root;\n};",
    "submit_ts": "1720323485",
    "subm_id": "1312376730"
}