{
    "username": "jpk1961",
    "submission": "\nclass Solution {\nprivate:\n    void computeBestValuesAndColumns(vector<vector<int>>& board, vector<vector<long long>>& bestValues, vector<vector<int>>& bestColumns) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        int i = 0;\n        while (i < m) {\n            vector<pair<long long, int>> colValues;\n            int j = 0;\n            while (j < n) {\n                colValues.emplace_back(board[i][j], j);\n                ++j;\n            }\n            sort(colValues.rbegin(), colValues.rend());\n            \n            int k = 0;\n            while (k < 3 && k < n) {\n                bestValues[i][k] = colValues[k].first;\n                bestColumns[i][k] = colValues[k].second;\n                ++k;\n            }\n            ++i;\n        }\n    }\n\n    long long computeMaxSum(const vector<vector<long long>>& bestValues, const vector<vector<int>>& bestColumns) {\n        int m = bestValues.size();\n        long long maxSum = LLONG_MIN;\n        \n        int r1 = 0;\n        while (r1 < m) {\n            int r2 = r1 + 1;\n            while (r2 < m) {\n                int r3 = r2 + 1;\n                while (r3 < m) {\n                    int i = 0;\n                    while (i < 3) {\n                        int j = 0;\n                        while (j < 3) {\n                            if (bestColumns[r2][j] == bestColumns[r1][i]) {\n                                ++j;\n                                continue;\n                            }\n                            int k = 0;\n                            while (k < 3) {\n                                if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) {\n                                    ++k;\n                                    continue;\n                                }\n\n                                long long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                                maxSum = max(maxSum, currentSum);\n\n                                ++k;\n                            }\n                            ++j;\n                        }\n                        ++i;\n                    }\n                    ++r3;\n                }\n                ++r2;\n            }\n            ++r1;\n        }\n        \n        return maxSum;\n    }\n\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        vector<vector<long long>> bestValues(m, vector<long long>(3, LLONG_MIN));\n        vector<vector<int>> bestColumns(m, vector<int>(3, -1));\n        \n        computeBestValuesAndColumns(board, bestValues, bestColumns);\n        return computeMaxSum(bestValues, bestColumns);\n    }\n};",
    "submit_ts": "1723910043",
    "subm_id": "1359215181"
}