{
    "username": "BurgerDragon",
    "submission": "# from math import comb\n# from itertools import permutations\nfrom functools import cache\n# from heapq import *\nfrom typing import List, Optional\nfrom sortedcontainers import SortedSet\n# from collections import Counter\n# import cProfile\n# from collections import defaultdict\n# from collections import deque\nfrom bisect import *\n# import math\n# import galois\n# from functools import lru_cache\nfrom typing import List\nfrom collections import defaultdict, Counter\ndef is_peak(nums, i):\n    return 0 < i < len(nums) - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\nclass SegmentTree:\n    def __init__(self, nums):\n        self.nums = nums\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n\n    def build(self, node, start, end):\n        if start < end:\n            mid = (start + end) // 2\n            self.build(2 * node + 1, start, mid)\n            self.build(2 * node + 2, mid + 1, end)\n            self.combine(node)\n        else:\n            self.tree[node] = 1 if is_peak(self.nums, start) else 0\n    \n    def combine(self, node):\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update(self, idx, value):\n        self._update(0, 0, self.n - 1, idx, value)\n        self._update_adjacent_peaks(idx)\n\n    def _update(self, node, start, end, idx, value):\n        if start == end:\n            self.nums[idx] = value\n            self.tree[node] = 1 if is_peak(self.nums, idx) else 0\n        else:\n            mid = (start + end) // 2\n            if start <= idx <= mid:\n                self._update(2 * node + 1, start, mid, idx, value)\n            else:\n                self._update(2 * node + 2, mid + 1, end, idx, value)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n        \n    def _update_adjacent_peaks(self, idx):\n        for i in [idx - 1, idx + 1]:\n            if 0 < i < self.n:\n                self._update_peak(0, 0, self.n - 1, i)\n\n    def _update_peak(self, node, start, end, idx):\n        if start == end:\n            self.tree[node] = 1 if is_peak(self.nums, idx) else 0\n        else:\n            mid = (start + end) // 2\n            if start <= idx <= mid:\n                self._update_peak(2 * node + 1, start, mid, idx)\n            else:\n                self._update_peak(2 * node + 2, mid + 1, end, idx)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query(self, L, R):\n        res = self._query(0, 0, self.n - 1, L, R)\n        if is_peak(self.nums, L):\n            res -= 1\n        if L!=R and is_peak(self.nums, R):\n            res -= 1\n        return res\n\n    def _query(self, node, start, end, L, R):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_peaks = self._query(2 * node + 1, start, mid, L, R)\n        right_peaks = self._query(2 * node + 2, mid + 1, end, L, R)\n        return left_peaks + right_peaks\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        # def peaks_in_array(nums, queries):\n        segment_tree = SegmentTree(nums)\n        result = []\n        for query in queries:\n            # print(f\"{segment_tree.tree=}, {query=}\")\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                result.append(segment_tree.query(l, r))\n            elif query[0] == 2:\n                idx, val = query[1], query[2]\n                segment_tree.update(idx, val)\n        return result\n        \n\ns=Solution()\n\n# Example test cases\nnums1 = [3, 1, 4, 2, 5]\nqueries1 = [[2, 3, 4], [1, 0, 4]]\nprint(s.countOfPeaks(nums1, queries1))  # Output: [0]\n\nnums2 = [4, 1, 4, 2, 1, 5]\nqueries2 = [[2, 2, 4], [1, 0, 2], [1, 0, 4]]\nprint(s.countOfPeaks(nums2, queries2))  # Output: [0, 1]\n\nnums = [5,4,8,6]\nqueries1 = [[1,2,2],[1,1,2],[2,1,6]]\nprint(s.countOfPeaks(nums, queries1))\n",
    "submit_ts": 1718508936.0
}