{
    "username": "JJZin",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        from sortedcontainers import SortedSet\n        \n        \n        bases = SortedSet()\n        \n        points = [x + [i] for i, x in enumerate(points)]\n        \n        \n        sortful = [lambda x: x[0] + x[1],\n                   lambda x: (-x[0] + x[1]),\n                   lambda x: (-x[0] - x[1]),\n                   lambda x: (x[0] - x[1]),\n                    lambda x: (x[0]/x[1])]\n        for i in sortful:\n            points.sort(key = i)\n            \n\n            to = len(points) - 1\n            bt = 0\n            for ea in range(min(5, len(points))):\n                bases.add(tuple(points[bt]))\n                bases.add(tuple(points[to]))\n                bt += 1\n                to -= 1\n                \n            \n        points = bases\n                    \n            \n            \n       \n       \n                \n        maxim = 0\n        \n        disti = defaultdict(list)\n        \n        basils = SortedSet()\n        \n        for i in range(len(points)):\n            for j in range(i + 1, len(points)):\n                dist = abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n                \n                maxim = maxim if maxim > dist else dist\n                \n                basils.add(dist)\n                disti[dist].append((i, j))\n                \n        \n        maxil = 0\n        mx = defaultdict(int)\n        thees = []\n        for ea in disti[maxim]:\n            mx[ea[0]] += 1\n            mx[ea[1]] += 1\n            \n            \n            if mx[ea[0]] >= maxil or mx[ea[1]] >= maxil:\n                thees = []\n            maxil = maxil if maxil > mx[ea[0]] else mx[ea[0]]\n            \n            maxil = maxil if maxil > mx[ea[1]] else mx[ea[1]]\n            if mx[ea[0]] == maxil:\n                thees.append(ea[0])\n            if mx[ea[1]] == maxil:\n                thees.append(ea[1])\n        \n        \n        ans = 10**12\n        for thee in thees:\n            for ea in range(len(basils)-1, -1, -1):\n                dunks = [i for i in disti[basils[ea]] if thee not in i]\n                if len(dunks) > 0:\n                    hans = basils[ea]\n                    break\n            ans = min(ans, hans)\n            \n        ### fahk.Opf\n        return ans if ans < 10**12 else 0\n                "
}