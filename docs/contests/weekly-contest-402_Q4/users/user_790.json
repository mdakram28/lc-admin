{
    "username": "kingm01",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> nums;\n    vector<int> tree;\n    int n;\n    \n    bool is_peak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n    \n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n    \n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || L > end) return 0;\n        if (L <= start && end <= R) return tree[node];\n        \n        int mid = (start + end) / 2;\n        int left_query = query(2 * node, start, mid, L, R);\n        int right_query = query(2 * node + 1, mid + 1, end, L, R);\n        return left_query + right_query;\n    }\n    \n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node, start, mid, idx);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(1, 0, n - 1);\n    }\n    \n    int query(int L, int R) {\n        return query(1, 0, n - 1, L, R);\n    }\n    \n    void update(int idx, int value) {\n        nums[idx] = value;\n        if (idx > 0) update(1, 0, n - 1, idx - 1);\n        update(1, 0, n - 1, idx);\n        if (idx < n - 1) update(1, 0, n - 1, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n         SegmentTree segTree(v);\n        vector<int> r;\n        \n        for (const auto& p : q) {\n            if (p[0] == 1) {\n                int li = p[1], ri = p[2];\n                r.push_back(segTree.query(li + 1, ri - 1));\n            } else if (p[0] == 2) {\n                int indexi = p[1], vali = p[2];\n                segTree.update(indexi, vali);\n            }\n        }\n        \n        return r;\n    }\n};",
    "submit_ts": "1718507287",
    "subm_id": "1289646874"
}