{
    "username": "Overlord2268",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& tree1, vector<vector<int>>& tree2) {\n        int n = tree1.size() + 1;\n        int m = tree2.size() + 1;\n        \n        vector<vector<int>> adjList1(n);\n        vector<vector<int>> adjList2(m);\n        \n        for (const auto& edge : tree1) {\n            adjList1[edge[0]].push_back(edge[1]);\n            adjList1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : tree2) {\n            adjList2[edge[0]].push_back(edge[1]);\n            adjList2[edge[1]].push_back(edge[0]);\n        }\n\n        auto depthFirstSearch = [](const vector<vector<int>>& adjList, int start, int& furthestNode) {\n            int size = adjList.size();\n            vector<int> distances(size, -1);\n            function<void(int, int)> visit = [&](int node, int distance) {\n                distances[node] = distance;\n                if (distance > distances[furthestNode]) {\n                    furthestNode = node;\n                }\n                for (int neighbor : adjList[node]) {\n                    if (distances[neighbor] == -1) {\n                        visit(neighbor, distance + 1);\n                    }\n                }\n            };\n            furthestNode = start;\n            visit(start, 0);\n            return distances[furthestNode];\n        };\n\n        int furthestNode1 = 0;\n        depthFirstSearch(adjList1, 0, furthestNode1);\n        int diameter1 = depthFirstSearch(adjList1, furthestNode1, furthestNode1);\n\n        int furthestNode2 = 0;\n        depthFirstSearch(adjList2, 0, furthestNode2);\n        int diameter2 = depthFirstSearch(adjList2, furthestNode2, furthestNode2);\n        \n        int minimumDiameter = max(diameter1, diameter2);\n        int halfDiameter1 = (diameter1 + 1) / 2;\n        int halfDiameter2 = (diameter2 + 1) / 2;\n        minimumDiameter = max(minimumDiameter, halfDiameter1 + halfDiameter2 + 1);\n        \n        return minimumDiameter;\n    }\n};\n",
    "submit_ts": "1719719757",
    "subm_id": "1304449837"
}