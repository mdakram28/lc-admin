{
    "username": "chaoyue2500",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        int n = s.length();\n        int[] ct = new int[2];\n        int[] end = new int[n];\n        int ed = 0;\n        for (; ed < n; ed++) {\n            ct[s.charAt(ed)-'0']++;\n            if (ct[0] > k && ct[1] > k) {\n                ct[s.charAt(ed)-'0']--;\n                break;\n            }\n        }\n        end[0] = ed;\n\n        for (int i = 1; i < n; i++) {\n            ct[s.charAt(i-1)-'0']--;\n            for (; ed < n; ed++) {\n                ct[s.charAt(ed)-'0']++;\n                if (ct[0] > k && ct[1] > k) {\n                    ct[s.charAt(ed)-'0']--;\n                    break;\n                }\n            }\n            end[i] = ed;\n        }\n        long[] sum = new long[n];\n        sum[0] = end[0];\n        TreeMap<Integer, Integer> tm = new TreeMap<>();\n        tm.put(end[0], 0);\n        for (int i = 1; i < n; i++) {\n            sum[i] = sum[i-1] + end[i] - i;\n            if (!tm.containsKey(end[i])) {\n                tm.put(end[i], i);\n            }\n        }\n        \n        int m = queries.length;\n        long[] ans = new long[m];\n        int ind = 0;\n        for (int[] q : queries) {\n            int r = q[1] + 1;\n            int leastkey = tm.ceilingKey(r);\n            int first = tm.get(leastkey);\n            if (first <= q[0]) {\n                long len = q[1] - q[0] + 1;\n                ans[ind] = len * (len + 1) / 2;\n            } else {\n                long len = q[1] - first + 1;\n                ans[ind] = len * (len + 1) / 2;\n                ans[ind] += sum[first-1];\n                if (q[0] != 0) {\n                    ans[ind] -= sum[q[0]-1];\n                }\n            }\n            ind++;\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1723952014",
    "subm_id": "1359785712"
}