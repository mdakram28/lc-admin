{
    "username": "gauravbajpaye",
    "submission": "class Solution {\npublic:\n    static const int modulus = 1'000'000'007;\n    static const int inv_max = 400;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> invert_map;\n        \n        // for (const auto& req : reqs) {\n        //     invert_map[req[0] + 1] = req[1];\n        // }\n        for(int i=0; i<reqs.size(); i++){\n         invert_map[reqs[i][0]+1] = reqs[i][1];\n        }\n\n        vector<vector<long long>> ansC(n + 1, vector<long long>(inv_max + 1, 0));\n        ansC[0][0] = 1;\n\n        for (int Z = 1; Z <= n; ++Z) {\n            for (int Y = 0; Y <= inv_max; ++Y) {\n                for (int X = 0; X < Z; ++X) {\n                    int inv_pr = Y - X;\n                    if (inv_pr >= 0) {\n                        ansC[Z][Y] = (ansC[Z][Y] + ansC[Z - 1][inv_pr]) % modulus;\n                    }\n                }\n            }\n\n           \n\n            if (invert_map.find(Z) != invert_map.end()) {\n                int ansv = invert_map[Z];\n                for (int Y = 0; Y <= inv_max; ++Y) {\n                    if (Y != ansv) {\n                        ansC[Z][Y] = 0;\n                    }\n                }\n            }\n        }\n\n        long long answer = 0;\n        int f = ansC[n].size();\n        // for (long long B : ansC[n]) {\n        //     answer = (answer + B) % modulus;\n        // }\n        for(int i=0; i<f; i++){\n           answer = (answer + ansC[n][i])% modulus;\n        }\n\n\n        return (int)answer;\n    }\n};",
    "submit_ts": 1719070847.0
}