{
    "username": "dini_369",
    "submission": "// class Solution {\n// public:\n//     int solve(int cur, int jump, int stair, bool down){\n//         if (cur > stair + 1) return 0;\n        \n//         int res = cur==stair ? 1 : 0;\n        \n//         int step1 = (down && cur!=0) ? solve(cur-1, jump, stair, false) : 0;\n//         int step2 = solve(cur+(1<<jump), jump+1, stair, true);\n        \n//         res += step1 + step2;\n//         return res;\n//     }\n    \n//     int waysToReachStair(int k) {\n//         int ans = solve(1, 0, k, true);\n//         return ans;\n//     }\n// };\n\n// class Solution {\n// public:\n//     int solve(int cur, int jump, int stair, bool down, vector<vector<vector<int>>> &dp){\n//         if (cur > stair + 1) return 0;\n        \n//         if (dp[cur][jump][down] != -1) return dp[cur][jump][down];\n        \n//         int res = cur==stair ? 1 : 0;\n        \n//         int step1 = (down && cur!=0) ? solve(cur-1, jump, stair, false, dp) : 0;\n//         int step2 = solve(cur+(1<<jump), jump+1, stair, true, dp);\n        \n//         res += step1 + step2;\n//         return dp[cur][jump][down] = res;\n//     }\n    \n//     int waysToReachStair(int k) {\n//         vector<vector<vector<int>>> dp(k+1, vector<vector<int>>(k, vector<int>(2, -1)));\n        \n//         int ans = solve(1, 0, k, true, dp);\n//         return ans;\n//     }\n// };\n\n\nclass Solution {\npublic:\n    int solve(int cur, int jump, int stair, bool down, unordered_map<int, unordered_map<int, unordered_map<bool, int>>> &dp) {\n        if (cur > stair + 1) return 0;\n\n        // Initialize dp[cur][jump][down] to -1 if it does not exist\n        if (dp[cur][jump].find(down) == dp[cur][jump].end()) {\n            dp[cur][jump][down] = -1;\n        }\n        \n        if (dp[cur][jump][down] != -1) return dp[cur][jump][down];\n\n        int res = (cur == stair) ? 1 : 0;\n\n        int step1 = (down && cur != 0) ? solve(cur - 1, jump, stair, false, dp) : 0;\n        int step2 = solve(cur + (1 << jump), jump + 1, stair, true, dp);\n\n        res += step1 + step2;\n        return dp[cur][jump][down] = res;\n    }\n\n    int waysToReachStair(int k) {\n        // Using map to dynamically handle bounds\n        unordered_map<int, unordered_map<int, unordered_map<bool, int>>> dp;\n        // Call the solve function\n        return solve(1, 0, k, true, dp);\n    }\n};\n\n\n\n",
    "submit_ts": "1716089996",
    "subm_id": "1261856642"
}