{
    "username": "MerryLeopard",
    "submission": "import java.util.Arrays;\nimport java.util.TreeMap;\n\nclass Solution {\n    TreeMap<Integer,Integer> s,d;\n    public int minimumDistance(int[][] points) {\n        int n=points.length;\n        int[][] sum=new int[n][2],diff=new int[n][2];\n        s=new TreeMap<>();\n        d=new TreeMap<>();\n        for (int i=0;i<n;i++){\n            sum[i][0]=points[i][0]+points[i][1];\n            sum[i][1]=points[i][0]-points[i][1];\n            s.put(sum[i][0],s.getOrDefault(sum[i][0],0)+1);\n            diff[i][0]=points[i][0]-points[i][1];\n            diff[i][1]=points[i][0]+points[i][1];\n            d.put(diff[i][0],d.getOrDefault(diff[i][0],0)+1);\n        }\n        Arrays.sort(sum,(a,b)->a[0]-b[0]==0?a[1]-b[1]:a[0]-b[0]);\n        int a1=Math.min(manDis(sum[0],sum[n-2],sum[n-1][1],1),manDis(sum[1],sum[n-1],sum[0][1],1));\n        Arrays.sort(sum,(a,b)->a[0]-b[0]==0?b[1]-a[1]:a[0]-b[0]);\n        int a2=Math.min(manDis(sum[0],sum[n-2],sum[n-1][1],1),manDis(sum[1],sum[n-1],sum[0][1],1));\n        Arrays.sort(diff,(a,b)->a[0]-b[0]==0?a[1]-b[1]:a[0]-b[0]);\n        int a3=Math.min(manDis(diff[0],diff[n-2],diff[n-1][1],0),manDis(diff[1],diff[n-1],diff[0][1],0));\n        Arrays.sort(diff,(a,b)->a[0]-b[0]==0?b[1]-a[1]:a[0]-b[0]);\n        int a4=Math.min(manDis(diff[0],diff[n-2],diff[n-1][1],0),manDis(diff[1],diff[n-1],diff[0][1],0));\n        // System.out.println(a1+\" \"+a2+\" \"+a3+\" \"+a4);\n        return Math.min(Math.min(a1,a2),Math.min(a3,a4));\n\n    }\n    int manDis(int[] a,int[] b, int key, int flag){\n        return Math.max(b[0]-a[0],setman(key,flag));\n    }\n    int setman(int key, int flag){\n        if (flag==0){\n            s.put(key,s.get(key)-1);\n            if (s.get(key)==0)\n                s.remove(key);\n            int f=s.firstKey();\n            int l=s.lastKey();\n            s.put(key,s.getOrDefault(key,0)+1);\n            return l-f;\n        }\n        else{\n            d.put(key,d.get(key)-1);\n            if (d.get(key)==0)\n                d.remove(key);\n            int f=d.firstKey();\n            int l=d.lastKey();\n            d.put(key,d.getOrDefault(key,0)+1);\n            return l-f;\n        }\n    }\n}"
}