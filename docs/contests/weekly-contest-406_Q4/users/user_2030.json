{
    "username": "patelherat3",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<int[]> pq = new PriorityQueue<>(new Comparator<int[]>() {\n            public int compare(int[] a, int[] b) {\n                return b[0] - a[0];\n            }\n        });\n\n        for (int i = 0; i < horizontalCut.length; i++) {\n            pq.add(new int[]{horizontalCut[i], 0}); \n        }\n\n        for (int i = 0; i < verticalCut.length; i++) {\n            pq.add(new int[]{verticalCut[i], 1}); \n        }\n\n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int cost = current[0];\n            int type = current[1];\n\n            if (type == 0) {\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } \n            else { \n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926297",
    "subm_id": "1320281971"
}