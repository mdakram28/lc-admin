{
    "username": "meng-hsuan",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        el = [[] for _ in range(n)]\n        for u, v in edges:\n            el[u].append(v)\n            el[v].append(u)\n        \n        anctree_cost = [None] * n\n        subtree_cost = [None] * n\n        top2chd = [[0] * 2 for _ in range(n)]\n        \n        def get_subtree_cost(curr: int, prev: int) -> int:\n            max_time = 0\n            \n            for nxt in el[curr]:\n                if nxt == prev:\n                    continue\n                \n                branch_time = get_subtree_cost(nxt, curr) + (1 if nxt & 1 else 2)\n                max_time = max(max_time, branch_time)\n                \n                if branch_time >= top2chd[curr][0]:\n                    top2chd[curr][0], top2chd[curr][1] = branch_time, top2chd[curr][0]\n                elif branch_time >= top2chd[curr][1]:\n                    top2chd[curr][1] = branch_time\n            \n            subtree_cost[curr] = max_time\n            \n            return max_time            \n        \n        get_subtree_cost(0, None)\n        \n        def get_anctree_cost(curr: int, prev: int) -> None:\n            branch_time = (1 if curr & 1 else 2) + subtree_cost[curr]\n            max_rest = top2chd[prev][1] if branch_time == top2chd[prev][0] else top2chd[prev][0]\n            #print(\"get_anctree_cost\", curr, prev, max(max_rest, anctree_cost[prev]), (1 if prev & 1 else 2))\n            anctree_cost[curr] = max(max_rest, anctree_cost[prev]) + (1 if prev & 1 else 2)\n                \n            for nxt in el[curr]:\n                if nxt == prev:\n                    continue\n                get_anctree_cost(nxt, curr)\n            \n            return\n        \n        anctree_cost[0] = 0\n        \n        for nxt in el[0]:\n            get_anctree_cost(nxt, 0)\n        \n        #print(subtree_cost)\n        #print(top2chd)\n        #print(anctree_cost)\n        #print()\n        \n        return [max(anctree_cost[i], subtree_cost[i]) for i in range(n)]\n    ",
    "submit_ts": "1722699253",
    "subm_id": "1343206094"
}