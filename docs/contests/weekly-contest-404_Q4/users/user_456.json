{
    "username": "BrayBray123",
    "submission": "class Solution {\npublic:\n    int diam(vector<vector<int>> &edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        vector<int> dis(n, -1);\n        \n        for (vector<int> v: edges) {\n            adj[v[0]].push_back(v[1]);\n            adj[v[1]].push_back(v[0]);\n        }\n        \n        int far = 0, mx = 0;\n        queue<int> q;\n        dis[0] = 0; q.push(0);\n        while (!q.empty()) {\n            int cur = q.front(); q.pop();\n            for (int nxt: adj[cur]) {\n                if (dis[nxt] == -1) {\n                    dis[nxt] = dis[cur] + 1;\n                    if (dis[nxt] > mx) {\n                        mx = dis[nxt];\n                        far = nxt;\n                    }\n                    q.push(nxt);\n                }\n            }\n        }\n        \n        mx = 0;\n        dis = vector<int>(n, -1);\n        dis[far] = 0; q.push(far);\n        while (!q.empty()) {\n            int cur = q.front(); q.pop();\n            for (int nxt: adj[cur]) {\n                if (dis[nxt] == -1) {\n                    dis[nxt] = dis[cur] + 1;\n                    if (dis[nxt] > mx) {\n                        mx = dis[nxt];\n                    }\n                    q.push(nxt);\n                }\n            }\n        }\n        return mx;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = diam(edges1), d2 = diam(edges2);\n        int combine = ceil(d1/2.0) + ceil(d2/2.0) + 1;\n        // cout << d1 << \" \" << d2 << endl;\n        return max({combine, d1, d2});\n    }\n};",
    "submit_ts": "1719718394",
    "subm_id": "1304416133"
}