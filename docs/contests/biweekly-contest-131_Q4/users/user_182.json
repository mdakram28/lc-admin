{
    "username": "vctr8000",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        vector<bool> ret; ret.reserve(n);\n\n        map<int, int> m;\n        m[0] = 0;\n        // m[3] = 3; \n        m[INT_MAX] = INT_MAX;\n\n        for (const auto& q : queries) {\n            if (q[0] == 2) {\n                int x = q[1];\n                int sz = q[2];\n                auto it = m.upper_bound(x);\n                --it;\n                // cout << \"lower \" << it->first << \" \" << it->second << endl; \n                if (it->second >= sz || (x - it->first) >= sz) {\n                    ret.push_back(true);\n                } else {\n                    ret.push_back(false);\n                }\n            } else {\n                int x = q[1];\n                auto next = m.upper_bound(x);\n                auto prev = next;\n                --prev;\n                m[x] = max(x - prev->first, prev->second);\n                prev = m.find(x);\n                // cout << \"updating\" << endl;\n                while (next != m.end()) {\n                    int val = max(prev->second, next->first - prev->first);\n                    if (next->second > val)  {\n                        next->second = val;\n                    } else {\n                        break;\n                    }\n                    prev = next;\n                    ++next;\n                }\n            }\n\n            // for (const auto& [k, v] : m) {\n            //     cout << k << \" \" << v << endl;\n            // }\n            // cout << endl;\n        }\n\n        return ret;\n    }\n};",
    "submit_ts": 1716650521.0
}