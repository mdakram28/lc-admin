{
    "username": "Consistent_Contest",
    "submission": "class Solution {\npublic:\n    // Perform BFS to check connectivity between two points\n    int performBFS(vector<vector<int>> &network, int startNode, int targetA, int targetB, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> explored(totalNodes + 4, 0); // Track visited nodes\n        nodeQueue.push(startNode);\n        explored[startNode] = 1;\n        \n        // Explore nodes using BFS\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : network[currentNode]) {\n                if (!explored[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    explored[neighbor] = 1;\n                }\n            }\n        }\n        // Check if either target is reached\n        return explored[targetA] || explored[targetB];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int maxX = X; \n        int maxY = Y; \n\n        vector<vector<int>> circleData = circles;\n        vector<pair<pair<int, int>, int>> circleList(circleData.size());\n        vector<vector<int>> connectivityGraph(circleData.size() + 4);\n        int circleCount = circleData.size();\n        \n        // Populate circle information with positions and radii\n        for (int idx = 0; idx < circleCount; ++idx) {\n            circleList[idx].first.first = circleData[idx][0];  // X-coordinate\n            circleList[idx].first.second = circleData[idx][1]; // Y-coordinate\n            circleList[idx].second = circleData[idx][2];       // Radius\n        }\n        \n        // Establish connections based on overlaps and boundary touches\n        for (int idx = 0; idx < circleCount; ++idx) {\n            // Connect circles touching the left boundary\n            if (circleList[idx].first.first <= circleList[idx].second) {\n                connectivityGraph[circleCount].push_back(idx);\n                connectivityGraph[idx].push_back(circleCount);\n            }\n            // Connect circles touching the right boundary\n            if (maxX - circleList[idx].first.first <= circleList[idx].second) {\n                connectivityGraph[circleCount + 2].push_back(idx);\n                connectivityGraph[idx].push_back(circleCount + 2);\n            }\n            // Connect circles touching the bottom boundary\n            if (circleList[idx].first.second <= circleList[idx].second) {\n                connectivityGraph[circleCount + 1].push_back(idx);\n                connectivityGraph[idx].push_back(circleCount + 1);\n            }\n            // Connect circles touching the top boundary\n            if (maxY - circleList[idx].first.second <= circleList[idx].second) {\n                connectivityGraph[circleCount + 3].push_back(idx);\n                connectivityGraph[idx].push_back(circleCount + 3);\n            }\n            // Connect circles if they overlap\n            for (int jdx = idx + 1; jdx < circleCount; ++jdx) {\n                double dist = sqrt(pow(circleList[idx].first.first - circleList[jdx].first.first, 2) +\n                                   pow(circleList[idx].first.second - circleList[jdx].first.second, 2));\n                int combinedRadii = circleList[idx].second + circleList[jdx].second;\n                if (combinedRadii >= dist) {\n                    connectivityGraph[idx].push_back(jdx);\n                    connectivityGraph[jdx].push_back(idx);\n                }\n            }\n        }\n        \n        int obstruction = 0;\n        // Check if path is blocked to the lower-left corner\n        obstruction = max(obstruction, performBFS(connectivityGraph, circleCount, circleCount + 1, circleCount + 2, circleCount + 4));\n        // Check if path is blocked to the upper-right corner\n        obstruction = max(obstruction, performBFS(connectivityGraph, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4));\n        \n        // Return true if no obstruction found\n        return !obstruction;\n    }\n};\n",
    "submit_ts": "1722136680",
    "subm_id": "1335741858"
}