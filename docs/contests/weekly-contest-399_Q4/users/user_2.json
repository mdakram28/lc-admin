{
    "username": "arignote",
    "submission": "class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        NumArray array = new NumArray(nums);\n        long sum = 0;\n        for (int[] query : queries) {\n            array.update(query[0], query[1]);\n            sum = (sum + Math.max(array.A[0], Math.max(array.B[0],\nMath.max(array.C[0], array.D[0])))) % 1000000007;\n}\n        return (int) sum;\n    }\n}\nclass NumArray {\n    public long[] A, B, C, D;\n    private int n;\n    public NumArray(int[] nums) {\n        n = nums.length;\n        A = new long[nums.length * 4];\n        B = new long[nums.length * 4];\n        C = new long[nums.length * 4];\n        D = new long[nums.length * 4];\n        build(0, 0, n - 1, nums);\n\n }\n    public void update(int index, int val) {\n        change(index, val, 0, 0, n - 1);\n}\n    private void build(int node, int s, int e, int[] nums) {\n        if (s == e) {\n            A[node] = nums[s];\nreturn; }\n        int m = s + (e - s) / 2;\n        build(node * 2 + 1, s, m, nums);\n        build(node * 2 + 2, m + 1, e, nums);\n        A[node] = Math.max(C[node * 2 + 1] + B[node * 2 + 2], Math.max(A[node * 2 +\n1] + B[node * 2 + 2], C[node * 2 + 1] + A[node * 2 + 2]));\n        B[node] = Math.max(D[node * 2 + 1] + B[node * 2 + 2], Math.max(B[node * 2 +\n1] + B[node * 2 + 2], D[node * 2 + 1] + A[node * 2 + 2]));\n        C[node] = Math.max(C[node * 2 + 1] + D[node * 2 + 2], Math.max(A[node * 2 +\n1] + D[node * 2 + 2], C[node * 2 + 1] + C[node * 2 + 2]));\n        D[node] = Math.max(D[node * 2 + 1] + D[node * 2 + 2], Math.max(B[node * 2 +\n1] + D[node * 2 + 2], D[node * 2 + 1] + C[node * 2 + 2]));\n    }\n    private void change(int index, int val, int node, int s, int e) {\n        if (s == e) {\n            A[node] = val;\nreturn; }\n        int m = s + (e - s) / 2;\n        if (index <= m) {\n            change(index, val, node * 2 + 1, s, m);\n        } else {\n            change(index, val, node * 2 + 2, m + 1, e);\n        }\n        A[node] = Math.max(C[node * 2 + 1] + B[node * 2 + 2], Math.max(A[node * 2 +\n1] + B[node * 2 + 2], C[node * 2 + 1] + A[node * 2 + 2]));\n        B[node] = Math.max(D[node * 2 + 1] + B[node * 2 + 2], Math.max(B[node * 2 +\n1] + B[node * 2 + 2], D[node * 2 + 1] + A[node * 2 + 2]));\n        C[node] = Math.max(C[node * 2 + 1] + D[node * 2 + 2], Math.max(A[node * 2 +\n1] + D[node * 2 + 2], C[node * 2 + 1] + C[node * 2 + 2]));\n        D[node] = Math.max(D[node * 2 + 1] + D[node * 2 + 2], Math.max(B[node * 2 +\n1] + D[node * 2 + 2], D[node * 2 + 1] + C[node * 2 + 2]));\n\n } }",
    "submit_ts": "1716691429",
    "subm_id": "1268020671"
}