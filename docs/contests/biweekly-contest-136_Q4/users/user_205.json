{
    "username": "skyinde2",
    "submission": "\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        ne = [[] for _ in range(n)]\n\n        for e in edges:\n            ne[e[0]].append(e[1])\n            ne[e[1]].append(e[0])\n\n        m = [[0] * 4 for _ in range(n)]\n        visited = [False] * n\n\n        @functools.cache\n        def dis(i: int, j: int) -> int:\n            ret = 1 if j % 2 == 1 else 2\n\n            value = 0\n            if visited[j]:\n                value = m[j][2] if m[j][1] == i else m[j][0]\n            else:\n                for k in ne[j]:\n                    if k != i:\n                        value = max(value, dis(j, k))\n\n            ret += value\n            return ret\n\n        index = [i for i in range(n)]\n        index.sort(key=lambda i:len(ne[i]), reverse=True)\n\n        ret = [0] * n\n\n        for i in index:\n            k = 0\n            for j in ne[i]:\n                d = dis(i, j)\n                if d > m[i][0]:\n                    m[i][0], m[i][1], m[i][2], m[i][3] = d, j, m[i][0], m[i][1]\n                elif d > m[i][2]:\n                    m[i][2], m[i][3] = d, j\n                k = max(k, d)\n\n            ret[i] = k\n            visited[i] = True\n\n        return ret",
    "submit_ts": "1722699470",
    "subm_id": "1343212623"
}