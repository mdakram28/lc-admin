{
    "username": "lucasschnee",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.word_index = -1\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, index):\n        node = self.root\n        for char in word:\n            node = node.children[char]\n        node.word_index = index\n    \n    def search(self, target, start):\n        node = self.root\n        indices = []\n        for i in range(start, len(target)):\n            if target[i] in node.children:\n                node = node.children[target[i]]\n                if node.word_index != -1:\n                    indices.append(node.word_index)\n            else:\n                break\n        return indices\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        N = len(target)\n        INF = 10 ** 20\n        dp = [INF] * (N + 1)\n        dp[0] = 0\n        \n        lookup = defaultdict(lambda: INF)\n        \n        for w, c in zip(words, costs):\n            lookup[w] = min(lookup[w], c)\n            \n        \n        words = []\n        costs = []\n        \n        for w, c in lookup.items():\n            words.append(w)\n            costs.append(c)\n        \n\n\n        T = Trie()\n        for i, word in enumerate(words):\n            T.insert(word, i)\n\n        for i in range(N):\n            if dp[i] == INF:\n                continue\n           \n            indices = T.search(target, i)\n            for index in indices:\n                word = words[index]\n                cost = costs[index]\n                dp[i + len(word)] = min(dp[i + len(word)], dp[i] + cost)\n\n        return dp[N] if dp[N] != INF else -1",
    "submit_ts": "1720321666",
    "subm_id": "1312329064"
}