{
    "username": "arsread",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        PriorityQueue<int[]>[] pqs = new PriorityQueue[m];\n        for (int i = 0; i < m; i++) {\n            pqs[i] = new PriorityQueue<>((a, b)->board[a[0]][a[1]] - board[b[0]][b[1]]);\n            for (int j = 0; j < n; j++) {\n                pqs[i].add(new int[]{i, j});\n                if (pqs[i].size() > 3) pqs[i].remove();\n            }\n        }\n        long mx = Long.MIN_VALUE;\n\n        TreeMap<Integer, List<int[]>> tm = new TreeMap<>((a,b)->b-a);\n        for (PriorityQueue<int[]> pq: pqs) {\n            for (int[] p: pq) {\n                int val = board[p[0]][p[1]];\n                tm.putIfAbsent(val, new ArrayList<>());\n                tm.get(val).add(p);\n            }\n        }\n\n        for (int i = 0; i < m; i++) {\n            for (int j = i+1; j < m; j++) {\n                for (int[] a: pqs[i]) {\n                    for (int[] b: pqs[j]) {\n                        if (a[1] == b[1]) continue;\n                        long cur = (long)board[a[0]][a[1]] + (long)board[b[0]][b[1]];\n                        for (int val: tm.keySet()) {\n                            boolean found = false;\n                            for (int[] p: tm.get(val)) {\n                                if (p[0] != a[0] && p[0] != b[0] && p[1] != a[1] && p[1] != b[1]) {\n                                    found = true;\n                                    cur += (long)val;\n                                    break;\n                                }\n                            }\n                            if (found) break;\n                        }\n                        mx = Math.max(mx, cur);\n                    }\n                }\n            }\n        }\n        return mx;\n    }\n}",
    "submit_ts": "1723908214",
    "subm_id": "1359143105"
}