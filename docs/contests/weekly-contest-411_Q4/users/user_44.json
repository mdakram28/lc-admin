{
    "username": "\u6709\u7ea6\u675f\u5c31\u5e94\u8be5\u6709\u65b9\u7a0b",
    "submission": "# merge sort\ndef merge(a, b):\n    r = []\n    if not b:\n        for v in a: r.append(v)\n        return r\n    i, n = 0, len(b)\n    if a:\n        for v in a:\n            while i<n and b[i]<=v:\n                r.append(b[i])\n                i+=1\n            r.append(v)\n    while i<n:\n        r.append(b[i])\n        i+=1\n    return r\n    \nclass MergeSegTree(object):\n    def __init__(self, vs):\n        n = len(vs)\n        mx = 1\n        while mx<=n: mx<<=1\n        ix = [[]]*(mx+mx)\n        sx = [[]]*(mx+mx)\n        for i in range(n):\n            ix[i+mx] = [vs[i]]\n            sx[i+mx] = [0, vs[i]]\n        i = mx-1\n        while i:\n            ix[i] = merge(ix[i*2], ix[i*2+1])\n            c = len(ix[i])\n            sx[i] = [0]*(c+1)\n            for j in range(c):\n                sx[i][j+1]=sx[i][j]+ix[i][j]\n            i-=1\n        self.ix = ix\n        self.sx = sx\n        self.mx = mx\n        self.n = n\n    def count(self, s, e):\n        r = 0\n        vv = e\n        mx = self.mx\n        s, e = s+mx, e+mx\n        ix = self.ix\n        sx = self.sx\n        while s<=e:\n            if s&1:\n                x = ix[s]\n                j = bisect_right(x, vv)\n                r += sx[s][j]+(len(x)-j)*vv\n                s+=1\n            if (e&1)==0:\n                x = ix[e]\n                j = bisect_right(x, vv)\n                r += sx[e][j]+(len(x)-j)*vv\n                e-=1\n            s>>=1\n            e>>=1\n        return r\nclass Solution(object):\n    def countKConstraintSubstrings(self, s, k, queries):\n        \"\"\"\n        :type s: str\n        :type k: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        n = len(s)\n        c1, c2 = 0, 0\n        nx = [0]*n\n        j = n-1\n        i = n-1\n        while i>=0:\n            if s[i]=='1': c1+=1\n            else: c2+=1\n            while c1>k and c2>k:\n                if s[j]=='1':c1-=1\n                else: c2-=1\n                j-=1\n            nx[i]=j\n            i-=1\n        # print nx\n        sg = MergeSegTree(nx)\n        r = []\n        for a, b in queries:\n            s = (a-1+b-1)*(b-a+1)/2\n            # print s, sg.count(a, b)\n            r.append(sg.count(a, b)-s)\n        return r\n            ",
    "submit_ts": "1723951777",
    "subm_id": "556407585"
}