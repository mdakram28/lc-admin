{
    "username": "Giorginho",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        circles = [tuple(circle) for circle in circles]\n\n        def intersect(circle1, circle2):\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            distance_squared = (x2 - x1) ** 2 + (y2 - y1) ** 2\n            return distance_squared <= (r1 + r2) ** 2\n\n        for x, y, r in circles:\n            if (x - r <= 0 and y - r <= 0) or (x + r >= X and y + r >= Y):\n                return False\n\n        left_top = {circle for circle in circles if circle[1] + circle[2] >= Y or circle[0] - circle[2] <= 0}\n        right_bottom = {circle for circle in circles if circle[0] + circle[2] >= X or circle[1] -circle[2] <= 0}\n\n        visited = set()\n        queue = deque(left_top)\n\n        while queue:\n            current = queue.popleft()\n            if current in right_bottom:\n                return False\n            visited.add(current)\n            for circle in circles:\n                if circle not in visited and intersect(current, circle):\n                    queue.append(circle)\n                    visited.add(circle)\n\n        return True",
    "submit_ts": "1722138100",
    "subm_id": "1335782107"
}