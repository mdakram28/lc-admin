{
    "username": "St0nkyCheeseMan",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        # of pairs with distances == i\n        differences = [0 for i in range(k + 1)] # 0 to k + 1\n        # will be used for number of pairs with distances < i\n        distances = [0 for i in range(k + 2)] # 0 to k + 1\n        for i in range(n // 2):\n            a, b = nums[i], nums[n - 1 - i]\n            diff = abs(a - b)\n            differences[diff] += 1\n\n            dist = max(k - a, k - b, a, b)\n            distances[dist + 1] += 1\n\n        for i in range(1, k + 2):\n            distances[i] += distances[i - 1]\n            \n        min_changes = 10 ** 6\n        for diff, (diffs, need_two) in enumerate(zip(differences, distances)):\n            if diff <= (k + 1) // 2:\n                num_changes = n // 2 - diffs\n                min_changes = min(min_changes, num_changes)\n                continue\n            num_changes = need_two + n // 2 - diffs\n            min_changes = min(min_changes, num_changes)\n        return min_changes",
    "submit_ts": "1721489343",
    "subm_id": "1327450479"
}