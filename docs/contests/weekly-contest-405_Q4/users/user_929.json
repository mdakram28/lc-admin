{
    "username": "zephyrr",
    "submission": "class Solution:\n    class Trie:\n        def __init__(self):\n            self.root = {}\n            self.wordcost = -1\n\n        def addword(self,word,cost):\n            cur = self.root\n            for ch in word:\n                if ch not in cur:\n                    cur[ch] = {}\n                cur = cur[ch]\n            if self.wordcost in cur and cur[self.wordcost] != -1:\n                cur[self.wordcost] = min(cur[self.wordcost],cost)\n            else:\n                cur[self.wordcost] = cost\n\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = self.Trie()\n\n        for w,c in zip(words,costs):\n            trie.addword(w,c)\n        #print(trie.root)\n        \n        @cache\n        def dp(ind):\n            if ind == len(target):\n                return 0\n            res = float(inf)\n            rt = trie.root\n            curind = ind\n            curch = target[curind]\n            while curch in rt:\n                rt = rt[curch]\n                if -1 in rt:\n                    res = min(res,rt[-1] + dp(curind+1))\n                curind += 1\n                if curind == len(target):\n                    break\n                curch = target[curind]\n            return res\n\n        ans = dp(0)\n        return ans if ans != float(inf) else -1\n\n\n        \n\n        '''\n        d = defaultdict(int)\n        ll = set()\n        for i in range(len(words)):\n            if words[i] in d:\n                d[words[i]] = min(d[words[i]],costs[i])\n            else:\n                d[words[i]] = costs[i]\n            ll.add(len(words[i]))\n        prefix = set()\n        prefix.add('')\n        for w in words:\n            tmp = ''\n            for ch in w:\n                tmp += ch\n                prefix.add(tmp)\n        \n        #print(d)\n        #print(prefix)\n        @cache\n        def dp(ind):\n            if ind == len(target):\n                return 0\n            res = float(inf)\n            curind = ind\n            cur = target[ind]\n            while cur in prefix:\n                if len(cur) in ll and cur in d:\n                    res = min(res,d[cur]+dp(curind+1))\n                curind += 1\n                if curind == len(target):\n                    break\n                cur += target[curind]\n            #print(ind, res)\n            return res\n        \n        return dp(0) if dp(0) != float(inf) else -1\n        '''       \n            \n\n\n\n        ",
    "submit_ts": "1720322202",
    "subm_id": "1312343492"
}