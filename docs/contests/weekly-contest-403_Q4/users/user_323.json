{
    "username": "jimin",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        ans = m * n\n\n        def minimumArea(uu, dd, ll, rr) -> int:\n            u = d = l = r = None\n            for i in range(uu, dd + 1):\n                if 1 in grid[i][ll:rr + 1]:\n                    u = i\n                    break\n            for i in range(dd, uu - 1, -1):\n                if 1 in grid[i][ll:rr + 1]:\n                    d = i\n                    break\n            for i in range(ll, rr + 1):\n                if 1 in [grid[j][i] for j in range(uu, dd + 1)]:\n                    l = i\n                    break\n            for i in range(rr, ll - 1, -1):\n                if 1 in [grid[j][i] for j in range(uu, dd + 1)]:\n                    r = i\n                    break\n            if any(map(lambda x: x is None, [u, d, l, r])):\n                return 0\n            return (d - u + 1) * (r - l + 1)\n\n        for i in range(1, n):\n            up_area = minimumArea(0, i - 1, 0, m - 1)\n            if up_area == 0:\n                continue\n            if n - i >= 2:\n                for j in range(i, n):\n                    mid_area = minimumArea(i, j, 0, m - 1)\n                    down_area = minimumArea(j + 1, n - 1, 0, m - 1)\n                    if mid_area == 0 or down_area == 0:\n                        continue\n                    ans = min(up_area + mid_area + down_area, ans)\n            for j in range(1, m):\n                left_area = minimumArea(i, n - 1, 0, j - 1)\n                right_area = minimumArea(i, n - 1, j, m - 1)\n                if left_area == 0 or right_area == 0:\n                    continue\n                ans = min(up_area + left_area + right_area, ans)\n\n        for i in range(1, m):\n            left_area = minimumArea(0, n - 1, 0, i - 1)\n            if left_area == 0:\n                continue\n            if m - i >= 2:\n                for j in range(i, m):\n                    mid_area = minimumArea(0, n - 1, i, j)\n                    right_area = minimumArea(0, n - 1, j + 1, m - 1)\n                    if mid_area == 0 or right_area == 0:\n                        continue\n                    ans = min(left_area + mid_area + right_area, ans)\n            for j in range(1, n):\n                up_area = minimumArea(0, j - 1, i, m - 1)\n                down_area = minimumArea(j, n - 1, i, m - 1)\n                if up_area == 0 or down_area == 0:\n                    continue\n                ans = min(up_area + left_area + down_area, ans)\n\n        for i in range(n - 1):\n            for j in range(m - 1):\n                lu_area = minimumArea(0, i, 0, j)\n                if lu_area == 0:\n                    continue\n                ru_area = minimumArea(0, i, j + 1, m - 1)\n                ld_area = minimumArea(i + 1, n - 1, 0, m - 1)\n                if ru_area and ld_area:\n                    ans = min(lu_area + ru_area + ld_area, ans)\n\n                ru_area = minimumArea(0, n - 1, j + 1, m - 1)\n                ld_area = minimumArea(i + 1, n - 1, 0, j)\n                if ru_area and ld_area:\n                    ans = min(lu_area + ru_area + ld_area, ans)\n        return ans",
    "submit_ts": 1719114074.0
}