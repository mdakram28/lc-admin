{
    "username": "swapnil07",
    "submission": "const int N = 150001;\n\nint tree[600004];\n\n\nint queryTree(int idx, int tl, int tr, int l, int r){\n    if(l > tr || r < tl){\n        return 0;\n    }\n    if(tl <= l && tr >= r){\n        return tree[idx];\n    }\n    int mid = (l+r) >> 1;\n    return max(queryTree(2*idx, tl, tr, l, mid), queryTree(2*idx+1, tl, tr, mid+1, r));\n}\n\n\nvoid update(int idx, int l, int r, int pos, int value) {\n    if(l == r){\n        tree[idx] = value;\n        return;\n    }\n    int mid = (l+r) >> 1;\n    if(pos <= mid){\n        update(2*idx, l, mid, pos, value);\n    }\n    else{\n        update(2*idx + 1, mid+1, r, pos, value);\n    }\n    tree[idx] = max(tree[2*idx], tree[2*idx + 1]);\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        memset(tree, 0, sizeof(tree));\n\n        map<int, int> obstacles;\n        obstacles[0] = 0;\n\n        vector<bool> ans;\n\n        for (vector<int>& query: queries) {\n            int qType = query[0];\n            if (qType == 1) {\n                int x = query[1];\n                auto it = obstacles.upper_bound(x);\n                if (it != obstacles.end()) {\n                    obstacles[it->first] = it->first - x;\n                    // cout<<\"Update\\n\";\n                    // cout<<it->first<<\" \"<<(it->first - x)<<endl;\n                    update(1, 0, N, it->first, it->first - x);\n                }\n                it--;\n                obstacles[x] = x - it->first;\n                // cout<<\"Update\\n\";\n                // cout<<x<<\" \"<<(x - it->first)<<endl;\n                update(1, 0, N, x, x - it->first);\n            }\n            else {\n                int x = query[1];\n                int sz = query[2];\n\n                auto it = obstacles.upper_bound(x);\n                it--;\n\n                int v1 = queryTree(1, 0, it->first, 0, N);\n                int mxVal = max(x - it->first, v1);\n                \n                // cout<<\"Printing Map\\n\";\n                // for (auto& [key, value]: obstacles) {\n                //     cout<<key<<\" \"<<value<<endl;\n                // }\n\n                // cout<<it->first<<\" \"<<v1<<endl;\n\n                ans.push_back(mxVal >= sz);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1716651643.0
}