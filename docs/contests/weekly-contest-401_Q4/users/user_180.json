{
    "username": "leetcode_3604",
    "submission": "class Solution {\npublic:\n    int dp[1000100];\n    vector<int> rewardValues;\n    int dfs(int v) {\n        //printf(\"v=%d\\n\");\n        if(v <= 1) {\n            return 0;\n        }\n        if(dp[v] != -1) return dp[v];\n        dp[v] = 0;\n        auto it = lower_bound(rewardValues.begin(), rewardValues.end(), v);\n        if(it == rewardValues.begin() && *it >= v) return 0;\n        auto end = --it;\n        auto begin = lower_bound(rewardValues.begin(), rewardValues.end(), (*end)/2);\n        if(*begin > *end) begin=end;\n        //printf(\"%d %d %d\\n\", *begin, *end, v);\n        int res(0), pre(-1);\n        for(auto it = end; it >= rewardValues.begin() ; --it) {\n            \n           // printf(\"it=%d\\n\", *it);\n            int next = min(*it, v-(*it));\n            int f = dfs(next);\n            int tmp = *it + dfs(next);\n            if(*it != pre){\n                pre = *it;\n                res = max(res, tmp);\n                \n            }\n            if(tmp == v - 1 || it == begin) {\n                    break;\n            }\n            it = lower_bound(rewardValues.begin(), rewardValues.end(), *it);\n        }\n        return dp[v] = res;\n        \n    }\n    int maxTotalReward(vector<int>& r) {\n        //printf(\"=====\\n\");\n        memset(dp, -1, sizeof(dp));\n        rewardValues = r;\n        int n = rewardValues.size();\n        sort(rewardValues.begin(), rewardValues.end());\n        return rewardValues[n-1] + dfs(rewardValues[n-1]);\n    }\n};",
    "submit_ts": 1717904905.0
}