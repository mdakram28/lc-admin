{
    "username": "BaoJiaoPisu",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adj;\n    vector<int> dp;\n    vector<int> dp2;\n\n    void dfs(int u, int par) {\n        for(int v : adj[u]) {\n            if(v == par) continue;\n            dfs(v, u);\n            dp[u] = max(dp[u], dp[v] + ((v & 1) ? 1 : 2));\n        }\n    }\n    \n    void dfs2(int u, int par) {\n        vector<pair<int, int>> child;\n        for(auto v : adj[u]) {\n            if(v == par) continue;\n            child.push_back({v, dp[v]});\n        }\n\n        sort(child.begin(), child.end(), [&](pair<int, int> a, pair<int, int> b) {\n            return a.second + (a.first & 1 ? 1 : 2) > b.second + (b.first & 1 ? 1 : 2);\n        });\n\n        for(auto v : adj[u]) {\n            if(v == par) continue;\n            dp2[v] = dp2[u] + (u & 1 ? 1 : 2);\n            if(child.size() >= 2) {\n                int node;\n                if(child[0].first != v) {\n                    node = child[0].first;\n                } else {\n                    node = child[1].first;\n                }\n                dp2[v] = max(dp2[v], dp[node] + (node & 1 ? 1 : 2) + (u & 1 ? 1 : 2));\n            }\n            dfs2(v, u);\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        adj.resize(n);\n        dp = vector<int>(n, 0);\n        dp2 = dp;\n        for(int i = 0; i < n - 1; i++) {\n            int u = edges[i][0];\n            int v = edges[i][1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n\n        dfs(0, -1);\n        dfs2(0, -1);\n        vector<int> times(n);\n        for(int i = 0; i < n; i++) {\n            times[i] = max(dp[i], dp2[i]);\n        }\n        return times;\n    }\n};",
    "submit_ts": "1722697059",
    "subm_id": "1343132635"
}