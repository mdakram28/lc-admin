{
    "username": "Three_Wayne",
    "submission": "class Solution(object):\n    def canReachCorner(self, X, Y, circles):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :type circles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        n = len(circles)\n        L, R, D, U = [], [], [], []\n        markL = [False] * n\n        markR = [False] * n\n        markD = [False] * n\n        markU = [False] * n\n        mark = [False] * n\n        for i in range(n):\n            x, y, r = circles[i]\n            cnt = 0\n            if x - r <= 0:\n                cnt += 1\n                markL[i] = True\n                L.append(i)\n            if x + r >= X:\n                cnt += 1\n                markR[i] = True\n                R.append(i)\n            if y - r <= 0:\n                cnt += 1\n                markD[i] = True\n                D.append(i)\n            if y + r >= Y:\n                cnt += 1\n                markU[i] = True\n                U.append(i)\n        q = deque()\n        for v in L:\n            mark = [False] * n\n            q.append(v)\n            mark[v] = True\n            while q:\n                v = q.popleft()\n                if markR[v] or markD[v]:\n                    return False\n                for i in range(n):\n                    x1, y1, r1 = circles[v]\n                    x2, y2, r2 = circles[i]\n                    if not mark[i] and self.conflict(x1, y1, r1, x2, y2, r2):\n                        q.append(i)\n                        mark[i] = True\n        for v in U:\n            mark = [False] * n\n            q.append(v)\n            mark[v] = True\n            while q:\n                v = q.popleft()\n                if markR[v] or markD[v]:\n                    return False\n                for i in range(n):\n                    x1, y1, r1 = circles[v]\n                    x2, y2, r2 = circles[i]\n                    if not mark[i] and self.conflict(x1, y1, r1, x2, y2, r2):\n                        q.append(i)\n                        mark[i] = True\n        return True\n    def conflict(self, x1, y1, r1, x2, y2, r2):\n        return (abs(x1 - x2) ** 2 + abs(y1 - y2) ** 2 <= (r1 + r2) ** 2)",
    "submit_ts": "1722134760",
    "subm_id": "1335677360"
}