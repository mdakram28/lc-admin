{
    "username": "shubham_ranswal",
    "submission": "class Solution:\n    class SegmentTree:\n        def __init__(self, nums):\n            self.tree = [0] * (4 * len(nums))\n            self.n = len(nums)\n            self.build(nums, 0, 0, self.n - 1)\n\n        def is_peak(self, nums, i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        def build(self, nums, node, start, end):\n            if start == end:\n                self.tree[node] = 1 if self.is_peak(nums, start) else 0\n            else:\n                mid = (start + end) // 2\n                self.build(nums, 2 * node + 1, start, mid)\n                self.build(nums, 2 * node + 2, mid + 1, end)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def update(self, idx, nums):\n            self._update(0, 0, self.n - 1, idx, nums)\n\n        def _update(self, node, start, end, idx, nums):\n            if start == end:\n                self.tree[node] = 1 if self.is_peak(nums, idx) else 0\n            else:\n                mid = (start + end) // 2\n                if start <= idx <= mid:\n                    self._update(2 * node + 1, start, mid, idx, nums)\n                else:\n                    self._update(2 * node + 2, mid + 1, end, idx, nums)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def query(self, l, r):\n            return self._query(0, 0, self.n - 1, l, r)\n\n        def _query(self, node, start, end, l, r):\n            if r < start or end < l:\n                return 0\n            if l <= start and end <= r:\n                return self.tree[node]\n            mid = (start + end) // 2\n            left_query = self._query(2 * node + 1, start, mid, l, r)\n            right_query = self._query(2 * node + 2, mid + 1, end, l, r)\n            return left_query + right_query\n\n    def countOfPeaks(self, nums, queries):\n        n = len(nums)\n        results = []\n        seg_tree = self.SegmentTree(nums)\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                results.append(seg_tree.query(l + 1, r - 1))\n            elif query[0] == 2:\n                index, val = query[1], query[2]\n                nums[index] = val\n                seg_tree.update(index, nums)\n                if index > 0:\n                    seg_tree.update(index - 1, nums)\n                if index < n - 1:\n                    seg_tree.update(index + 1, nums)\n\n        return results",
    "submit_ts": 1718509079.0
}