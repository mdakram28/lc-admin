{
    "username": "Yash29082002",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minFlips(int[][] matrix) {\n        int rows = matrix.length;\n        int cols = matrix[0].length;\n        int totalFlips = 0;\n\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (matrix[rows / 2][cols / 2] == 1) {\n                totalFlips += 1;\n            }\n        }\n\n        int[] counts = new int[3];\n\n        if (rows % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int sum = matrix[rows / 2][left] + matrix[rows / 2][right];\n                counts[sum] += 1;\n                left += 1;\n                right -= 1;\n            }\n        }\n\n        if (cols % 2 == 1) {\n            int top = 0, bottom = rows - 1;\n            while (top < bottom) {\n                int sum = matrix[top][cols / 2] + matrix[bottom][cols / 2];\n                counts[sum] += 1;\n                top += 1;\n                bottom -= 1;\n            }\n        }\n\n        if (counts[2] % 2 == 1) {\n            if (counts[1] > 0) {\n                totalFlips += counts[1];\n            } else {\n                totalFlips += 2;\n            }\n        } else {\n            totalFlips += counts[1];\n        }\n\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int topLeft = matrix[i][j];\n                int bottomLeft = matrix[rows - 1 - i][j];\n                int topRight = matrix[i][cols - 1 - j];\n                int bottomRight = matrix[rows - 1 - i][cols - 1 - j];\n\n                int totalSum = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (totalSum != 0 && totalSum != 4) {\n                    totalFlips += Math.min(totalSum, 4 - totalSum);\n                }\n            }\n        }\n\n        return totalFlips;\n    }\n}\n",
    "submit_ts": "1722700070",
    "subm_id": "1343230778"
}