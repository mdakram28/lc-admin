{
    "username": "June24",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        from typing import List\n        from collections import defaultdict\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Create a dictionary to store words by their length\n        word_dict = defaultdict(list)\n        for word, cost in zip(words, costs):\n            word_dict[len(word)].append((cost,word))\n        for i in word_dict:\n            word_dict[i].sort()\n\n        for i in range(1, n + 1):\n            for length in word_dict:\n                if i >= length:\n                    substr = target[i-length:i]\n                    for cost, word in word_dict[length]:\n                        if word == substr:\n                            dp[i] = min(dp[i], dp[i-length] + cost)\n                            break\n\n        return dp[n] if dp[n] != float('inf') else -1\n#         n = len(target)\n#         dp = [float('inf')] * (n + 1)\n#         dp[0] = 0\n\n#         # Create a dictionary to store words by their last character\n#         word_dict = defaultdict(list)\n#         for i, word in enumerate(words):\n#             word_dict[word[-1]].append((word, costs[i]))\n\n#         for i in range(1, n + 1):\n#             # Only check words that end with the current character\n#             for word, cost in word_dict[target[i-1]]:\n#                 if i >= len(word) and target[i-len(word):i] == word:\n#                     dp[i] = min(dp[i], dp[i-len(word)] + cost)\n\n#         return dp[n] if dp[n] != float('inf') else -1\n\n        ",
    "submit_ts": "1720322132",
    "subm_id": "1312341564"
}