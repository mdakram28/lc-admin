{
    "username": "nicolasalba",
    "submission": "#define ACTIVE_DEBUG\n\n// ############ Ignore macros and debugger ########################\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n#define pb push_back\n#define F first\n#define S second\n#define all(x) (x).begin(), (x).end()\n#define sortt(x) sort(all(x))\n\nusing ll = long long;\nusing ld = long double;\nusing pi = pair<int, int>;\nusing pl = pair<ll, ll>;\nusing ti = tuple<long long, long long, long long>;\nusing vi = vector<int>;\nusing vb = vector<bool>;\nusing vl = vector<ll>;\nusing vs = vector<string>;\nusing vvl = vector<vl>;\nusing vpl = vector<pl>;\n\ntemplate<class T> using pql = priority_queue<T,vector<T>,greater<T>>;\ntemplate<class T> using pqg = priority_queue<T>;\n\nvoid __print(int x) {cout << x;}\nvoid __print(long long x) {cout << x;}\nvoid __print(string x) {cout << x;}\nvoid __print(char x) {cout << '\\'' << x << '\\'';}\nvoid __print(bool x) {cout << (x ? \"T\" : \"F\");}\n\nvoid __print(map<ll,ll> mp) {\n    for (auto p : mp) {\n        cout << p.F << \":\" << p.S << \",\";\n    }\n}\n\ntemplate<typename T> // for data structures (vector, set, map, etc)\n\nvoid __print(const T &xs)\n{cout << \"[ \"; for (auto &x : xs) {__print(x);cout << ' ';}cout << ']';}\n\nvoid _print()\n{cout << \"]\" << endl;}\n\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v)\n{__print(t); if (sizeof...(v)) cout << \", \"; _print(v...);}\n\n#ifdef ACTIVE_DEBUG\n    #define deb(x...) cout << \"[\" << #x << \"] = [\", _print(x)\n    #define LINE cout << \"-------------------\" << endl;\n#else\n    #define deb(x...) \"C\"\n    #define LINE \"C\"\n#endif\n// ############ Ignore macros and debugger ########################\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        ll diameter1 = diameter(edges1);\n        ll diameter2 = diameter(edges2);\n        if (diameter1<diameter2)swap(diameter1,diameter2);\n        diameter1 = max(diameter1,diameter2/2+diameter1/2+2);\n        return diameter1-1;\n    }\n\n    vl bfs(ll sx, vvl &adj) {\n        ll n = adj.size();\n        vl dist(n,n+10);\n        dist[sx]=1;\n        queue<ll> q;\n        q.push(sx);\n        while (q.size()) {\n            ll x = q.front();q.pop();\n            for (auto y : adj[x]) {\n                if (dist[x] + 1 < dist[y]) {\n                    dist[y] = dist[x] +1;\n                    q.push(y);\n                }\n            }\n        } \n        return dist;\n    }\n\n    int diameter(vector<vector<int>>& edges1) {\n        ll n = edges1.size()+1;\n        vvl adj(n);\n        for (auto &a:edges1) {\n            ll x = a[0], y = a[1];\n            adj[x].pb(y);\n            adj[y].pb(x);\n        }\n        vl dist = bfs(0,adj);\n        ll mx = 0;\n        for (int i =0;i<n;i++) {\n            if (dist[mx] < dist[i]) mx=i;\n        }\n        dist = bfs(mx,adj);\n        return *max_element(all(dist));\n    }\n};",
    "submit_ts": 1719718843.0
}