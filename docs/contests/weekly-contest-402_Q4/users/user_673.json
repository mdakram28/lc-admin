{
    "username": "coderchamp07",
    "submission": "class Solution {\npublic:\n    vector<int> tree;\n    int isPeak(vector<int>& nums, int idx) {\n        if(idx == 0 || idx == nums.size() - 1)\n            return 0;\n        return nums[idx - 1] < nums[idx] && nums[idx] > nums[idx + 1];\n    }\n    void build(vector<int>& nums, int node, int l, int r) {\n        if(l == r)\n            tree[node] = isPeak(nums, l);\n        else {\n            int m = (l + r) / 2;\n            int lc = 2 * node + 1;\n            int rc = 2 * node + 2;\n            build(nums, lc, l, m);\n            build(nums, rc, m + 1, r);\n            tree[node] = tree[lc] + tree[rc];\n        }\n    }\n    void update(vector<int>& nums, int node, int l, int r, int idx, int val) {\n        if(l == r) {\n            nums[idx] = val;\n            tree[node] = isPeak(nums, idx);\n        }\n        else {\n            int m = (l + r) / 2;\n            int lc = 2 * node + 1;\n            int rc = 2 * node + 2;\n            if(l <= idx && idx <= m)\n                update(nums, lc, l, m, idx, val);\n            else\n                update(nums, rc, m + 1, r, idx, val);\n            tree[node] = tree[lc] + tree[rc];\n        }\n    }\n    int query(int node, int start, int end, int l, int r) {\n        if(r < start || end < l)\n            return 0;\n        if(l <= start && end <= r)\n            return tree[node];\n        int m = (start + end) / 2;\n        int lc = 2 * node + 1;\n        int rc = 2 * node + 2;\n        return query(lc, start, m, l, r) + query(rc, m + 1, end, l, r);\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n        \n        vector<int> out;\n        for(auto q : queries) {\n            if(q[0] == 1) {\n                if(q[1] == q[2])\n                    out.push_back(0);\n                else\n                    out.push_back(query(0, 0, n - 1, q[1] + 1, q[2] - 1));\n            }\n            else {\n                update(nums, 0, 0, n - 1, q[1], q[2]);\n                if(q[1] != 0)\n                    update(nums, 0, 0, n - 1, q[1] - 1, nums[q[1] - 1]);\n                if(q[1] != n - 1)\n                    update(nums, 0, 0, n - 1, q[1] + 1, nums[q[1] + 1]);\n            }\n        }\n        return out;\n    }\n};",
    "submit_ts": 1718507608.0
}