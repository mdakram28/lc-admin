{
    "username": "ptulugu",
    "submission": "class Node {\n    int val;\n    Node next = null;\n    Node prev = null;\n\n    Node(int val){\n        this.val = val;\n    }\n}\n\nclass DoubleLinkedList {\n    Node head = new Node(-1);\n    Node tail = new Node(-1);\n    HashMap<Integer, Node> nodeMap = new HashMap();\n    int size = 0;\n\n    DoubleLinkedList(int entries) {\n        Node curr = head;\n        for(int i = 0; i < entries; i++) {\n            Node n = new Node(i);\n            curr.next = n;\n            n.prev = curr;\n            curr = n;\n            size++;\n            nodeMap.put(i, n);\n        }\n        curr.next = tail;\n        tail.prev = curr;\n    }\n\n    int getSize() {\n        return this.size;\n    }\n\n    void deleteFrom(int start, int end) {\n\n        Node curr = nodeMap.get(start);\n        if(curr == null) return;\n\n        curr = curr.next;\n        while(curr.val < end) {\n            int toRem = curr.val;\n            Node prev = curr.prev;\n            Node next = curr.next;\n            prev.next = next;\n            next.prev = prev;\n\n            curr = next;\n            nodeMap.remove(toRem);\n            size--;\n        }\n    }\n\n\n\n}\n\nclass Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        DoubleLinkedList dll = new DoubleLinkedList(n);\n\n        int[] ret = new int[queries.length];\n        for(int i = 0; i < queries.length; i++) {\n            int[] q = queries[i];\n            int from = q[0];\n            int to = q[1];\n            System.out.println(\"Running \" + from + \" \" + to);\n            dll.deleteFrom(from, to);\n            ret[i] = dll.getSize() - 1;\n        }\n\n        return ret;\n    }\n}",
    "submit_ts": "1722743232",
    "subm_id": "1343787347"
}