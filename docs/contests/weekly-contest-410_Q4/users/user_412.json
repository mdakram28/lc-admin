{
    "username": "Ani_S",
    "submission": "class Solution {\n    static int mod = 1000000007;\n    \n    public int countOfPairs(int[] nums) {\n        long dp[][] = new long[nums.length + 1][1001];\n        \n        for(int i = 0; i < 1001; i++) {\n            dp[nums.length][i] = 1l;\n        }\n        \n        for(int i = nums.length - 1; i >= 0; i--) {\n            for(int val = 0; val <= nums[i]; val++) {\n                int next = i + 1 < nums.length ? nums[i + 1] : 1001;\n                int pos = binarySearch(nums[i], next, val);\n                \n                if(pos != -1) {\n                    dp[i][val] = (dp[i][val] + dp[i + 1][pos]) % mod;\n                }\n            }\n            \n            for(int j = 1; j < 1001; j++) {\n                dp[i][j] = (dp[i][j] + dp[i][j - 1]) % mod;\n            }\n        }\n        return (int)dp[0][1000];\n    }\n    \n    private int binarySearch(int num, int next, int val) {\n        int low = 0;\n        int high = next;\n        \n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            \n            if(mid <= val && (num - val) <= (next - mid)) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        \n        return high;\n    }\n}",
    "submit_ts": "1723347678",
    "subm_id": "1351603438"
}