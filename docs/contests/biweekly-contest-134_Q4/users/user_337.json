{
    "username": "CelonyMire",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef LC_LOCAL\n#include \"parser.hpp\"\n#else\n#define dbg(...)\n#endif\n\n// ----- CHANGE FOR PROBLEM -----\nstruct sparse_table {\n  vector<vector<int>> dp;\n  int k = 0;\n  sparse_table(int n, vector<int> &v) : k(__lg(n)) {\n    dp.resize(k + 1, vector<int>(n));\n    ranges::copy(v, dp[0].begin());\n    for (int i = 1; i <= k; i++)\n      for (int j = 0; j + (1 << i) <= n; j++) {\n        auto a = dp[i - 1][j];\n        auto b = dp[i - 1][j + (1 << (i - 1))];\n        dp[i][j] = a & b;\n      }\n  }\n  int query(int l, int r) {\n    int ans = (1LL << 31) - 1;\n    for (int i = k; i >= 0; i--) {\n      if ((1 << i) <= r - l + 1) {\n        auto a = ans;\n        auto b = dp[i][l];\n        ans = a & b;\n        l += 1 << i;\n      }\n    }\n    return ans;\n  }\n  int query_fast(int l, int r) { // only use if operation is idempotent!\n    int i = __lg(r - l + 1);\n    auto a = dp[i][l];\n    auto b = dp[i][r - (1 << i) + 1];\n    return min(a, b);\n  }\n};\n\ntemplate <typename T, typename U>\nT first_true(T lo, T hi, U f) {\n  ++hi;\n  while (lo < hi) {\n    T mid = lo + (hi - lo) / 2;\n    f(mid) ? hi = mid : lo = mid + 1;\n  }\n  return lo;\n}\n\ntemplate <typename T, typename U>\nT last_true(T lo, T hi, U f) {\n  --lo;\n  while (lo < hi) {\n    T mid = lo + (hi - lo + 1) / 2;\n    f(mid) ? lo = mid : hi = mid - 1;\n  }\n  return lo;\n}\n\nclass Solution {\npublic:\n  long long countSubarrays(vector<int> &a, int k) {\n    int n = a.size();\n    sparse_table sp(n, a);\n    long long ans = 0;\n    for (int i = 0; i < n; i++) {\n      int l = first_true(i, n - 1, [&](int m) {\n        return sp.query(i, m) <= k;\n      });\n      int r = last_true(i, n - 1, [&](int m) {\n        return sp.query(i, m) >= k;\n      });\n      if (l == n || r < i || sp.query(i, l) != k) {\n        continue;\n      }\n      ans += r - l + 1;\n    }\n    return ans;\n  }\n};\n// ----- CHANGE FOR PROBLEM -----\n\n#ifdef LC_LOCAL\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  exec(&Solution::countSubarrays); // CHANGE FOR PROBLEM\n}\n#endif",
    "submit_ts": "1720277433",
    "subm_id": "1311663464"
}