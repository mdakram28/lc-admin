{
    "username": "kunal0612",
    "submission": "class Solution\n{\npublic:\n    class Node\n    {\n    public:\n        bool flag = false;\n        Node *links[26];\n        int ce = 0, cp = 0;\n        vector<pair<int, int>> last;\n\n        bool contains(char c)\n        {\n            return links[c - 'a'] != nullptr;\n        }\n\n        void put(char c)\n        {\n            links[c - 'a'] = new Node();\n        }\n\n        Node *next(char c)\n        {\n            return links[c - 'a'];\n        }\n\n        bool isend()\n        {\n            return flag;\n        }\n\n        void incend()\n        {\n            ce++;\n        }\n\n        void incp()\n        {\n            cp++;\n        }\n\n        void decend()\n        {\n            ce--;\n        }\n\n        void decp()\n        {\n            cp--;\n        }\n\n        void setEnd()\n        {\n            flag = true;\n        }\n\n        bool isEnd()\n        {\n            return flag;\n        }\n\n        int getend()\n        {\n            return ce;\n        }\n\n        int getp()\n        {\n            return cp;\n        }\n    };\n\n    class Trie\n    {\n    public:\n        Node *root;\n        Trie()\n        {\n            root = new Node();\n        }\n\n        void insert(string &s, int index, int cost)\n        {\n            Node *tmp = root;\n            for (int i = 0; i < s.size(); ++i)\n            {\n                if (!tmp->contains(s[i]))\n                {\n                    tmp->put(s[i]);\n                }\n                tmp = tmp->next(s[i]);\n            }\n            tmp->setEnd();\n            tmp->incend();\n            tmp->last.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        vector<int> ans(target.size() + 1, INT_MAX);\n        ans[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i)\n        {\n            trie.insert(words[i], i, costs[i]);\n        }\n        int res=INT_MAX;\n        for (int i = 0; i < target.size(); ++i)\n        {\n\n            if (ans[i] != INT_MAX)\n            {\n                Node *node = trie.root;\n                int j=i;\n                while(j<target.size() and node->contains(target[j]))\n                {\n                    node = node->next(target[j]);\n                    for (auto &it : node->last)\n                    {\n                        int len = words[it.first].size();\n                        if (i + len <= target.size())\n                        {\n                            ans[i + len] = min(ans[i + len], ans[i] + it.second);\n                            if(i+len==target.size()) res=min(res,ans[i+len]);\n                        }\n                    }\n                    j++;\n                }\n            }\n        }\n        if(res==INT_MAX) res=-1;\n        return res;\n    }\n};",
    "submit_ts": "1720323628",
    "subm_id": "1312380174"
}