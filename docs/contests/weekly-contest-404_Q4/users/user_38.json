{
    "username": "hungt1",
    "submission": "class Solution {\npublic:\n    void dfs(int p, int u, vector<vector<int>> &adj, vector<int> &dist) {\n        for (int v : adj[u]) {\n            if (v == p) continue;\n            dist[v] = dist[u] + 1;\n            dfs(u, v, adj, dist);\n        }\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1; \n        int m = edges2.size() + 1;\n\n        vector<int> dist1(n, 0);\n        vector<int> dist2(m, 0);    \n\n        vector<vector<int>> adj1(n);\n        for (auto &e : edges1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        \n        vector<vector<int>> adj2(m);\n        for (auto &e : edges2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n\n        dfs(-1, 0, adj1, dist1);\n        int u = max_element(dist1.begin(), dist1.end()) - dist1.begin();\n        dist1[u] = 0;\n        dfs(-1, u, adj1, dist1);\n        \n        int d1 = *max_element(dist1.begin(), dist1.end());\n\n        dfs(-1, 0, adj2, dist2);\n        u = max_element(dist2.begin(), dist2.end()) - dist2.begin();\n        dist2[u] = 0;\n        dfs(-1, u, adj2, dist2);\n\n        int d2 = *max_element(dist2.begin(), dist2.end());\n\n        int ans = max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n\n        return ans;\n    }\n};",
    "submit_ts": 1719715430.0
}