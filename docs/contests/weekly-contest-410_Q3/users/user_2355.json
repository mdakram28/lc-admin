{
    "username": "rakesh125",
    "submission": "class Solution {\npublic:\n\nconst int MOD = 1e9 + 7;\n\nint countMonotonicPairs(vector<int>& nums) {\n    int n = nums.size();\n    int maxValue = *max_element(nums.begin(), nums.end());\n\n    // dp[i][j] will store the number of ways to form valid sequences for the first i elements\n    // such that arr1[i] = j\n    vector<vector<int>> dp(n, vector<int>(maxValue + 1, 0));\n\n    // Initialize base case for dp[0][j]\n    for (int j = 0; j <= nums[0]; j++) {\n        dp[0][j] = 1;\n    }\n\n    // Fill dp table ensuring proper monotonic conditions\n    for (int i = 1; i < n; i++) {\n        for (int j = 0; j <= nums[i]; j++) {\n            for (int k = 0; k <= j; k++) {  // k <= j ensures arr1[i] is non-decreasing\n                int arr2_i = nums[i] - j;\n                int arr2_prev = nums[i-1] - k;\n                if (arr2_i <= arr2_prev) {  // arr2[i] <= arr2[i-1] ensures arr2 is non-increasing\n                    dp[i][j] = (dp[i][j] + dp[i-1][k]) % MOD;\n                }\n            }\n        }\n    }\n\n    // The result will be the sum of dp[n-1][j] for all valid j\n    int result = 0;\n    for (int j = 0; j <= nums[n-1]; j++) {\n        result = (result + dp[n-1][j]) % MOD;\n    }\n\n    return result;\n}\n\n\n    int countOfPairs(vector<int>& nums) {\n        \n        return countMonotonicPairs(nums);\n        \n    }\n};",
    "submit_ts": "1723347214",
    "subm_id": "1351594322"
}