{
    "username": "guru92921",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        TrieNode* children[26] = {nullptr};\n        int cost = -1;\n    };\n    \n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        if (node->cost == -1) {\n            node->cost = cost;\n        } else {\n            node->cost = min(node->cost, cost); \n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        TrieNode* root = new TrieNode();\n\n        for (int i = 0; i < words.size(); i++) {\n            insert(root, words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue; \n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return (dp[n] != INT_MAX) ? dp[n] : -1;\n    }\n};\n",
    "submit_ts": "1720322668",
    "subm_id": "1312355991"
}