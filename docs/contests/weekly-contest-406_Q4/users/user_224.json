{
    "username": "SouvikG2003",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCosts, std::vector<int>& verticalCosts) {\n        // Sort the costs in descending order\n        std::sort(horizontalCosts.rbegin(), horizontalCosts.rend());\n        std::sort(verticalCosts.rbegin(), verticalCosts.rend());\n        \n        long long hIdx = 0, vIdx = 0;\n        long long horizontalSegments = 1, verticalSegments = 1;\n        long long totalExpense = 0;\n        \n        // Use a greedy method to merge cuts\n        while (hIdx < horizontalCosts.size() && vIdx < verticalCosts.size()) {\n            if (horizontalCosts[hIdx] > verticalCosts[vIdx]) {\n                totalExpense += horizontalCosts[hIdx] * verticalSegments;\n                horizontalSegments++;\n                hIdx++;\n            } else {\n                totalExpense += verticalCosts[vIdx] * horizontalSegments;\n                verticalSegments++;\n                vIdx++;\n            }\n        }\n        \n        // Include any remaining horizontal costs\n        while (hIdx < horizontalCosts.size()) {\n            totalExpense += horizontalCosts[hIdx] * verticalSegments;\n            hIdx++;\n        }\n        \n        // Include any remaining vertical costs\n        while (vIdx < verticalCosts.size()) {\n            totalExpense += verticalCosts[vIdx] * horizontalSegments;\n            vIdx++;\n        }\n        \n        return totalExpense;\n    }\n};",
    "submit_ts": "1720925276",
    "subm_id": "1320249182"
}