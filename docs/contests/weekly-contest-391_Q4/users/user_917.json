{
    "username": "qweraasdf",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        int f[4][n];\n        multiset<int> s1,s2,s3,s4;\n        for (int i = 0; i < n; ++i) {\n            s1.insert(points[i][0] + points[i][1]);\n            s2.insert(points[i][0] - points[i][1]);\n            s3.insert(-points[i][0] + points[i][1]);\n            s4.insert(-points[i][0] - points[i][1]);\n        }\n\n        int res = INT_MAX;\n        for (int i = 0; i < n; ++i) {\n            s1.erase(s1.find(points[i][0] + points[i][1]));\n            s2.erase(s2.find(points[i][0] - points[i][1]));\n            s3.erase(s3.find(-points[i][0] + points[i][1]));\n            s4.erase(s4.find(-points[i][0] - points[i][1]));\n            res = min(res, max(*s1.rbegin() - *s1.begin(), max(*s2.rbegin() - *s2.begin(), max(*s3.rbegin() - *s3.begin(), *s4.rbegin() - *s4.begin()))));\n            s1.insert(points[i][0] + points[i][1]);\n            s2.insert(points[i][0] - points[i][1]);\n            s3.insert(-points[i][0] + points[i][1]);\n            s4.insert(-points[i][0] - points[i][1]);\n        }\n\n        return res;\n    }\n};"
}