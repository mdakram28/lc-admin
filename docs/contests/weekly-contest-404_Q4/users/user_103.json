{
    "username": "etian6795",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        return Math.max(rec(edges1) + rec(edges2) - 1, Math.max(dia(edges1), dia(edges2)));\n    }\n    \n    public int rec(int[][] edges) {\n        int n = edges.length+1;\n        ArrayList<ArrayList<Integer>> e = new ArrayList<>();\n        for(int i = 0; i < n; i++) e.add(new ArrayList<>());\n        int[] deg = new int[n];\n        for(int[] x : edges) {\n            e.get(x[0]).add(x[1]);\n            e.get(x[1]).add(x[0]);\n            deg[x[0]]++;\n            deg[x[1]]++;\n        }\n        Queue<Integer> q = new LinkedList<>();\n        for(int i = 0; i < n; i++) {\n            if(deg[i] == 1) {\n                q.add(i);\n                deg[i]--;\n            }\n        }\n        int d = 1;\n        while(q.size()>1) {\n            int size = q.size();\n            while(size-->0) {\n                int curr = q.remove();\n                for(int x : e.get(curr)) {\n                    deg[x]--;\n                    if(deg[x] == 1) {\n                        q.add(x);\n                    }\n                }\n            }\n            d++;\n        }\n        //if(q.size()==1) d++;\n        \n        return d;\n    }\n    \n    public int dia(int[][] edges) {\n        int n = edges.length+1;\n        ArrayList<ArrayList<Integer>> e = new ArrayList<>();\n        for(int i = 0; i < n; i++) e.add(new ArrayList<>());\n        for(int[] x : edges) {\n            e.get(x[0]).add(x[1]);\n            e.get(x[1]).add(x[0]);\n        }\n        Queue<Integer> q = new LinkedList<>();\n        q.add(0);\n        int node = 0;\n        boolean[] seen = new boolean[n];\n        seen[0] = true;\n        while(q.size() > 0) {\n            int size = q.size();\n            while(size-->0) {\n                int curr = q.remove();\n                node = curr;\n                for(int x : e.get(curr)) {\n                    if(!seen[x]) {\n                        seen[x] = true;\n                        q.add(x);\n                    }\n                }\n            }\n        }\n        q = new LinkedList<>();\n        q.add(node);\n        seen = new boolean[n];\n        seen[node] = true;\n        int d = 0;\n        while(q.size() > 0) {\n            int size = q.size();\n            while(size-->0) {\n                int curr = q.remove();\n                node = curr;\n                for(int x : e.get(curr)) {\n                    if(!seen[x]) {\n                        seen[x] = true;\n                        q.add(x);\n                    }\n                }\n            }\n            d++;\n        }\n        return d-1;\n    }\n}",
    "submit_ts": "1719717095",
    "subm_id": "1304382344"
}