{
    "username": "kavya22222",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        def chebyshev_distance(point):\n            return max(abs(point[0]), abs(point[1]))\n\n        \n        transformed_points = [(x + y, x - y, idx) for idx, (x, y) in enumerate(points)]\n\n        transformed_points.sort(key=lambda x: x[1])\n        \n        sorted_points_y = transformed_points.copy()\n        transformed_points.sort(key=lambda x: x[0])\n        sorted_points_x = transformed_points\n        \n        ignore1 = sorted_points_y[0][2]\n        ignore2 = sorted_points_y[-1][2]\n        ignore3 = sorted_points_x[0][2]\n        ignore4 = sorted_points_x[-1][2]\n        \n        tp_1 = [(x + y, x - y, idx) for idx, (x, y) in enumerate(points) if idx != ignore1]\n        tp_1.sort(key=lambda x: x[1])\n        sp1_y = tp_1.copy()\n        tp_1.sort(key=lambda x: x[0])\n        sp1_x = tp_1\n        ans1 = max(abs(sp1_x[0][0] - sp1_x[-1][0]), abs(sp1_y[0][1] - sp1_y[-1][1]))\n\n        tp_2 = [(x + y, x - y, idx) for idx, (x, y) in enumerate(points) if idx != ignore2]\n        tp_2.sort(key=lambda x: x[1])\n        sp2_y = tp_2.copy()\n        tp_2.sort(key=lambda x: x[0])\n        sp2_x = tp_2\n        ans2 = max(abs(sp2_x[0][0] - sp2_x[-1][0]), abs(sp2_y[0][1] - sp2_y[-1][1]))\n\n        tp_3 = [(x + y, x - y, idx) for idx, (x, y) in enumerate(points) if idx != ignore3]\n        tp_3.sort(key=lambda x: x[1])\n        sp3_y = tp_3.copy()\n        tp_3.sort(key=lambda x: x[0])\n        sp3_x = tp_3\n        ans3 = max(abs(sp3_x[0][0] - sp3_x[-1][0]), abs(sp3_y[0][1] - sp3_y[-1][1]))\n\n        tp_4 = [(x + y, x - y, idx) for idx, (x, y) in enumerate(points) if idx != ignore4]\n        tp_4.sort(key=lambda x: x[1])\n        sp4_y = tp_4.copy()\n        tp_4.sort(key=lambda x: x[0])\n        sp4_x = tp_4\n        ans4 = max(abs(sp4_x[0][0] - sp4_x[-1][0]), abs(sp4_y[0][1] - sp4_y[-1][1]))\n\n        ans = min(ans1, ans2, ans3, ans4)\n    \n        return ans\n"
}