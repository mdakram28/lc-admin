{
    "username": "slowtyp3",
    "submission": "class Solution {\npublic:\n    struct Node {\n        int s,l,r;\n        Node *left,*right;\n        Node():s(0),l(0),r(0),left(NULL),right(NULL) {}\n    };\n\n    Node* insert(int l,int r) {\n        Node* n = new Node();\n        n->l=l;\n        n->r=r;\n        if(l==r) {\n            n->s=1;\n            return n;\n        }\n        int m=(l+r)/2;\n        n->left = insert(l,m);\n        n->right=insert(m+1,r);\n        n->s=n->left->s+n->right->s;\n        return n;\n    }\n    void makeHole(int l,int r,Node* root) {\n        if(root==NULL || r<l) return;\n        if(root->s==0) return;\n        if(l==root->l && r==root->r) {\n            //cout << \"Updated \" << l << \" \" << r << \"\\n\";\n            root->s=0;\n            return;\n        }\n        int m=(root->l+root->r)/2;\n        if(r<=m) makeHole(l,r,root->left);\n        else if(l>m) makeHole(l,r,root->right);\n        else {\n            makeHole(l,m,root->left);\n            makeHole(m+1,r,root->right);\n        }\n        int val=0;\n        if(root->right!=NULL) val+=root->right->s;\n        if(root->left!=NULL) val+=root->left->s;\n        root->s=val;\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int>ans;\n        Node* root = insert(1,n-1);\n        int l=n-1;\n        //cout << root->s << \"\\n\";\n        for(auto &i:queries) {\n            //cout << \"q\\n\";\n\n           makeHole(i[0]+1,i[1]-1,root);\n           ans.push_back(root->s);\n\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742784",
    "subm_id": "1343777070"
}