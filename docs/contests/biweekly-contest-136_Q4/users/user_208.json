{
    "username": "lu-chen-chen",
    "submission": "class Solution {\n    int n;\n    int[] ans;\n    Tree[] trees;\n\n    public int[] timeTaken(int[][] edges) {\n        n = edges.length + 1;\n        ans = new int[n];\n        trees = new Tree[n];\n        for (int i = 0; i < trees.length; i++) {\n            trees[i] = new Tree();\n        }\n        for (int[] edge : edges) {\n            trees[edge[0]].child.add(edge[1]);\n            trees[edge[1]].child.add(edge[0]);\n        }\n        build(0, -1);\n        dfs(0);\n        dfs1(0, -1);\n        for (int i = 0; i < n; i++) {\n            ans[i] = trees[i].dis.get(0);\n        }\n        return ans;\n    }\n\n    private void dfs1(int v, int p) {\n        if (p != -1) {\n            int a = trees[v].dis.get(0) + (v % 2 == 1 ? 1 : 2);\n            int b = trees[p].dis.get(0) == a ? trees[p].dis.get(1) : trees[p].dis.get(0);\n            b += p % 2 == 1 ? 1 : 2;\n            trees[v].dis.add(b);\n        }\n        trees[v].dis.sort(Comparator.comparingInt(o -> -o));\n        for (Integer w : trees[v].child) {\n            dfs1(w, v);\n        }\n    }\n\n    private void dfs(int v) {\n        for (Integer w : trees[v].child) {\n            dfs(w);\n            trees[v].dis.add(trees[w].dis.get(0) + (w % 2 == 1 ? 1 : 2));\n        }\n        trees[v].dis.sort(Comparator.comparingInt(o -> -o));\n    }\n\n    private void build(int v, int p) {\n        trees[v].child.remove(p);\n        for (Integer w : trees[v].child) {\n            build(w, v);\n        }\n    }\n}\n\nclass Tree {\n    Set<Integer> child = new HashSet<>();\n    List<Integer> dis = new ArrayList<>();\n\n    public Tree() {\n        dis.add(0);\n    }\n}",
    "submit_ts": "1722699166",
    "subm_id": "552274398"
}