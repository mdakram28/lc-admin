{
    "username": "Adarsh Pandey",
    "submission": "class Solution {\npublic:\n    char dp[100005][7];\n    char dp2[100005][7];\n    int nxt[100005][7];\n    int non_next[100005][7];\n\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        \n        if (k == 2) {\n            if (n <= 2) {\n                return string(n, '8');\n            } else {\n                return string(1, '8') + string(n - 2, '9') + string(1, '8');\n            }\n        }\n        \n        if (k == 5) {\n            if (n <= 2) {\n                return string(n, '5');\n            } else {\n                return string(1, '5') + string(n - 2, '9') + string(1, '5');\n            }\n        }\n\n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string s(n, '9');\n            s[0] = s[n - 1] = s[1] = s[n - 2] = '8';\n            return s;\n        }\n        \n        if (k == 8) {\n            if (n <= 6) {\n                return string(n, '8');\n            } else {\n                return string(3, '8') + string(n - 6, '9') + string(3, '8');\n            }\n        }\n        \n        if (k == 6) {\n            if (n == 1) return \"6\";\n            if (n == 2) return \"66\";\n            if (n == 3) return \"888\";\n            string s(n, '9');\n            s[0] = s[n - 1] = '8';\n            if (n % 2 == 1) {\n                s[n / 2] = '8';\n            } else {\n                s[n / 2] = s[n / 2 - 1] = '7';\n            }\n            return s;\n        }\n\n        if (k == 7) {\n            if (n == 1) return \"7\";\n            \n            fill(&dp[0][0], &dp[0][0] + sizeof(dp), 0);\n            fill(&dp2[0][0], &dp2[0][0] + sizeof(dp2), 0);\n\n            for (int i = 1; i < 10; ++i) {\n                dp[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    dp2[1][i % 7] = '0' + i;\n                }\n            }\n\n            int base_mod = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && dp[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int new_mod = (base_mod * digit + digit + j * 10) % 7;\n                        if (dp[i + 2][new_mod] == 0 || dp[i + 2][new_mod] < '0' + digit) {\n                            dp[i + 2][new_mod] = '0' + digit;\n                            nxt[i + 2][new_mod] = j;\n                        }\n                        if (digit == 0) continue;\n                        if (dp2[i + 2][new_mod] == 0 || dp2[i + 2][new_mod] < '0' + digit) {\n                           dp2[i + 2][new_mod] = '0' + digit;\n                            non_next[i + 2][new_mod] = j;\n                        }\n                    }\n                }\n                base_mod = (base_mod * 10) % 7;\n            }\n\n            int q = n;\n            string front(1, dp2[q][0]);\n            string back(1, dp2[q][0]);\n            int mod = non_next[q][0];\n            q -= 2;\n            while (q > 0) {\n                front += dp[q][mod];\n                if (q > 1) back += dp[q][mod];\n                mod = nxt[q][mod];\n                q -= 2;\n            }\n            reverse(back.begin(), back.end());\n            string s = front + back;\n            return s;\n        }\n\n        string s = \"\";\n        return s;\n    }\n};\n",
    "submit_ts": "1723952775",
    "subm_id": "1359804339"
}