{
    "username": "fakrrid",
    "submission": "#include<bits/stdc++.h>\n#include <cassert>\n#include <cmath>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <string>\n#include <stdlib.h>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\n#include<ext/pb_ds/tree_policy.hpp>\n#include<ext/pb_ds/assoc_container.hpp>\nusing namespace  __gnu_pbds;\nusing namespace std;\n\n#define ll long long int  \n#define For(n) for(ll i=0;i<n;i++)\n#define all(x) x.begin(),x.end()\n#define allr(x) x.rbegin(),x.rend()\n\ntypedef vector<int> VI;  \ntypedef vector<ll> VL; \ntypedef long double lld;\ntypedef unsigned long long ull;\n\nconst int MOD = 1e9 + 7;\n\n \n//--------------------------------- Trace Functions --------------------------------------\n \nvoid _print(ll t) {cerr << t;}\nvoid _print(int t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(lld t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\nvoid _print(ull t) {cerr << t;}\nvoid DBG() {\n\tcerr << \"]\" << endl;\n}\n\ntemplate<typename T1,typename T2>istream& operator>>(istream& in,pair<T1,T2> &a){in>>a.x>>a.y;return in;}\ntemplate<typename T1,typename T2>ostream& operator<<(ostream& out,pair<T1,T2> a){out<<a.x<<\" \"<<a.y;return out;}\ntemplate<typename T,typename T1>T maxs(T &a,T1 b){if(b>a)a=b;return a;}\ntemplate<typename T,typename T1>T mins(T &a,T1 b){if(b<a)a=b;return a;}\ntemplate<class H, class... T> void DBG(H h, T... t) {\n\tcerr << to_string(h);\n\tif (sizeof...(t))\n\t\tcerr << \", \";\n\tDBG(t...);\n}\n\n#define DEBUG(x...) { cout << \"(\" << #x << \")\" << \" = ( \"; Print(x); }\ntemplate <typename T1> void Print(T1 t1) { cout << t1 << \" )\" << endl; }\ntemplate <typename T1, typename... T2>\nvoid Print(T1 t1, T2... t2) { cout << t1 << \" , \"; Print(t2...); }\n\n// ----------------------------- Debuging -----------------------------------------------\n\nvoid __print(int x) {cerr << x;}\nvoid __print(long x) {cerr << x;}\nvoid __print(long long x) {cerr << x;}\nvoid __print(unsigned x) {cerr << x;}\nvoid __print(unsigned long x) {cerr << x;}\nvoid __print(unsigned long long x) {cerr << x;}\nvoid __print(float x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(long double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\n\ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\n\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifndef ONLINE_JUDGE\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x) cerr << endl;\n#else\n#define debug(x...)\n#endif\n\n\n\nclass Solution {\nprivate:\n    // Function to check if a given index is a peak\n    static bool isPeak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n\n    // Segment Tree class to manage peak counts\n    class SegmentTree {\n    private:\n        vector<int> tree;\n        int n;\n\n        void build(const vector<int>& nums, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = isPeak(nums, start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(nums, 2 * node + 1, start, mid);\n                build(nums, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        void update(const vector<int>& nums, int node, int start, int end, int idx) {\n            if (start == end) {\n                tree[node] = isPeak(nums, idx) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    update(nums, 2 * node + 1, start, mid, idx);\n                } else {\n                    update(nums, 2 * node + 2, mid + 1, end, idx);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int query(int node, int start, int end, int l, int r) {\n            if (r < start || end < l) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int left_query = query(2 * node + 1, start, mid, l, r);\n            int right_query = query(2 * node + 2, mid + 1, end, l, r);\n            return left_query + right_query;\n        }\n\n    public:\n        SegmentTree(const vector<int>& nums) {\n            n = nums.size();\n            tree.resize(4 * n); // Sufficient size for segment tree\n            build(nums, 0, 0, n - 1);\n        }\n\n        void update(const vector<int>& nums, int idx) {\n            update(nums, 0, 0, n - 1, idx);\n        }\n\n        int query(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n    };\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n       ios_base::sync_with_stdio(false);\n       cin.tie(NULL);\n       cout.tie(NULL);\n        int n = nums.size();\n        vector<int> results;\n        SegmentTree segTree(nums);\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                results.push_back(segTree.query(l + 1, r - 1)); // Query peaks in [l+1, r-1]\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int val = query[2];\n                nums[index] = val;\n                if (index > 0) segTree.update(nums, index - 1);\n                segTree.update(nums, index);\n                if (index < n - 1) segTree.update(nums, index + 1);\n            }\n        }\n\n        return results;\n    }\n};",
    "submit_ts": 1718508817.0
}