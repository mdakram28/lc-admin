{
    "username": "kabir1428",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n=nums.size(),mx=1; \n        \n        vector<vector<int>>dp(n,vector<int>(k+1,1)); // initialize the Dp table as follows\n        \n        vector<int> res(k+1,-1); \n        \n        vector<map<int,int>> seen(k+1); \n        \n        for(int i=0;i<n;i++){  // fill the DP table\n            for(int j=0;j<=k;j++){ \n                for(int m=0;m<j;m++){ \n                    dp[i][j]=max(dp[i][j],res[m]+1); \n                } \n                if(seen[j].find(nums[i])!=seen[j].end()){ \n                    dp[i][j]=max(dp[i][j] , seen[j][nums[i]]+1); \n                } \n                \n                mx=max(mx,dp[i][j]); \n            } \n            for(int j=0 ; j<=k; j++){ \n                \n                res[j]=max(res[j],dp[i][j]); \n                seen[j][nums[i]]=max(seen[j][nums[i]],dp[i][j]); \n            } \n        } \n        return mx; \n    }\n};",
    "submit_ts": 1717862303.0
}