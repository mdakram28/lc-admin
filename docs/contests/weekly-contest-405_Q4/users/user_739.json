{
    "username": "Parasmukati011",
    "submission": "class Solution {\n    private:\n    class TrieNode {\n    public:\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> word_ends;\n        \n        TrieNode() {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        \n        Trie() {\n            root = new TrieNode();\n        }\n        \n        void insert(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->word_ends.push_back({index, cost});\n        }\n    };\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                \n                for (const auto& [word_index, word_cost] : node->word_ends) {\n                    int word_len = words[word_index].length();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + word_cost);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322182",
    "subm_id": "1312342956"
}