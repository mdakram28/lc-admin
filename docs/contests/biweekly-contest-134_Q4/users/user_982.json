{
    "username": "Lakshya_1807",
    "submission": "\nstruct SegmentTree{\npublic:\n \n    int*segTree;\n    vector<int>arr;\n \n    SegmentTree(vector<int>ar){\n        arr = ar;\n        int n = arr.size();\n        segTree = new int[4*n];\n        build(1,0,n-1);\n    }\n \n    void build(int node,int si,int ei){\n        if(si == ei){\n            segTree[node] = arr[si];\n            return;\n        }\n \n        int mid= (si+ei)/2;\n        int left = node*2;\n        int right = node*2+1;\n        build(left,si,mid);\n        build(right,mid+1,ei);\n \n        segTree[node] = (segTree[left] & segTree[right]);\n    }\n \n    int query(int l,int r){\n        int n = arr.size();\n        return h2(1,0,n-1,l,r); \n    }\n \n    int h2(int node,int si,int ei,int l,int r){\n \n        if(si > r || ei < l){\n            return ((1<<30) - 1);\n        }\n \n        if(si == ei){\n            return segTree[node];\n        }\n \n        if(l<=si && r>=ei){\n            return segTree[node];\n        }\n \n        int mid = (si+ei)/2;\n \n        int left = node*2,right=node*2+1;\n        int la = h2(left,si,mid,l,r);\n        int ra = h2(right,mid+1,ei,l,r);\n \n        return (la&ra);\n    }\n \n};\n \n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n     \n        long long ans = 0;\n        \n        int n = nums.size();\n        \n        SegmentTree tree(nums);\n    \n        \n        for(int i=0;i<n;i++){\n            int si = 1 , ei = i+1;\n            int fi = -1 , li = -1;\n            \n            while(si <= ei){\n                int mid = (si + (ei-si)/2);\n                int l = i-mid+1;\n                int r = i;\n                int andv = tree.query(l,r);\n                \n                if(andv == k){\n                    fi = mid;\n                    ei = mid-1;\n                }else if(andv < k){\n                    ei = mid-1;\n                }else{\n                    si = mid+1;\n                }\n            }\n            \n            si = 1 , ei = i+1;\n            \n            while(si <= ei){\n                int mid = (si + (ei-si)/2);\n                int l = i-mid+1;\n                int r = i;\n                int andv = tree.query(l,r);\n                \n                if(andv == k){\n                    li = mid;\n                    si = mid+1;\n                }else if(andv < k){\n                    ei = mid-1;\n                }else{\n                    si = mid+1;\n                }\n            }\n            \n            if(fi != -1){\n                ans += (li-fi+1);\n            }\n            \n        }\n        \n        return ans;\n        \n        \n    }\n};",
    "submit_ts": "1720280267",
    "subm_id": "1311782969"
}