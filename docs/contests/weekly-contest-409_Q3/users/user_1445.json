{
    "username": "shubhamgoel184",
    "submission": "import java.util.SortedMap; \nclass Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        TreeMap<Integer, Integer> mp = new TreeMap<>();\n        for(int i = 0; i < n - 1; i++){\n            // List<Integer> li = new ArrayList<>();\n            // li.add(i + 1);\n            mp.put(i , i + 1);\n        }\n        int[] ans = new int[queries.length];\n        for(int i = 0; i < queries.length; i++){\n            // List<Integer> li = mp.get(queries[i][0]);\n            // if()\n            // li.set(0, Math.max(mp.get(0), queries[i][1]));\n            if(!mp.containsKey(queries[i][0])){\n                ans[i] = ans[i - 1];\n                continue;\n            }\n            else if(i > 0 && mp.get(queries[i][0]) >= queries[i][1]){\n                ans[i] = ans[i - 1];\n                continue;\n            }\n            if(i > 0){\n                int k = queries[i][0];\n                int steps = 0;\n                while(k < queries[i][1]){\n                    k = mp.get(k);\n                    steps++;\n                }\n                ans[i] = ans[i - 1] - steps + 1;\n            }\n            else{\n                mp.put(queries[i][0], queries[i][1]);\n                int k = 0;\n                int steps = 0;\n                while(k < n - 1){\n                    k = mp.get(k);\n                    steps++;\n                }\n                ans[i] = steps;\n            }\n            mp.put(queries[i][0], queries[i][1]);\n            removeKeysInRange(mp, queries[i][0], queries[i][1]);\n            // for(int j = queries[i][0] + 1; j < queries[i][1]; j++){\n            //     mp.put(j, -1);\n            // }\n            // ans[i] = dfs(mp, 0, n - 1, dp);\n        }\n        return ans;\n    }\n    public static void removeKeysInRange(TreeMap<Integer, Integer> map, int x, int y) {\n        // Get a sub-map with keys from (x, y)\n        SortedMap<Integer, Integer> subMap = map.subMap(x + 1, y);\n        // Collect the keys to remove\n        Set<Integer> keysToRemove = subMap.keySet();\n        List<Integer> keysList = new ArrayList<>(keysToRemove);\n        // Remove each key from the original map\n        for (Integer key : keysList) {\n            map.remove(key);\n        }\n    }\n    public int dfs(Map<Integer, List<Integer>> mp, int i, int n, int[] dp){\n        if(i == n){\n            return 0;\n        }\n        if(dp[i] <= n){\n            return dp[i];\n        }\n        int ans = n + 1;\n        List<Integer> li = mp.get(i);\n        for(Integer index : li){\n            ans = Math.min(ans, dfs(mp, index, n, dp));\n        }\n        dp[i] = ans + 1;\n        return ans + 1;\n    }\n}",
    "submit_ts": "1722743448",
    "subm_id": "1343792157"
}