{
    "username": "killer-whale",
    "submission": "from sortedcontainers import *\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        sl = SortedList([0])\n        # what is the max gap seen between 0 and x?\n        st = ST([0]*(5*10**4+1),func=max)\n        gaps = {0: inf}\n        res = []\n        for q in queries:\n            if len(q) == 2:\n                _, x = q\n                idx = sl.bisect_left(x)\n                prev = sl[idx - 1]\n                del st[prev]\n                gaps[prev] = x - prev\n                gaps[x] = sl[idx] - x if idx < len(sl) else inf\n                st[prev] = gaps[prev]\n                st[x] = gaps[x]\n                sl.add(q[1])\n            else:\n                _,a,b=q\n                idx = sl.bisect_left(a)\n                prev = sl[idx - 1]\n                diff = a - prev\n                tmp = st[prev]\n                st[prev] = diff\n                res.append(st[:a] >= b)\n                st[prev] = tmp\n                \n        return res\n\nclass ST:\n    def __init__(self, data, default=0, func=lambda x, y: x + y, offset=0, initfast=True):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self._offset = offset\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        if not initfast:\n            for i in reversed(range(_size)):\n                self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, key):\n        if isinstance(key, slice):\n            start = key.start if key.start is not None else -self._offset\n            stop = key.stop if key.stop is not None else -self._offset + self._len\n            return self.query(start, stop)\n        else:\n            return self.data[key + self._size + self._offset]\n\n    def __setitem__(self, idx, value):\n        idx += self._size + self._offset\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start = max(start, -self._offset) + self._offset\n        stop = min(stop, -self._offset + self._len) + self._offset\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def find_kth(self, k):\n        return BS.findmax(\n            -self._offset,\n            -self._offset + self._len,\n            lambda idx: self.query(-self._offset, idx) <= k\n        )\n\n    def query_all(self):\n        \"\"\"func of data[:]\"\"\"\n        return self.data[1]\n\n    def __repr__(self):\n        return \"ST({0})\".format(self.data[self._size:self._size + self._len])\n\nclass BS:\n    @staticmethod\n    def findmin(low: int, high: int, check) -> int:\n        \"\"\"find the minimum int x which make check true (high is exclusive)\"\"\"\n        while low < high - 1:\n            mid = low + (high - low) // 2\n            if check(mid):\n                high = mid\n            else:\n                low = mid\n        return low if check(low) else high\n\n    @staticmethod\n    def findmax(low: int, high: int, check) -> int:\n        \"\"\"find the maximum int x which make check true\"\"\"\n        while low < high - 1:\n            mid = low + (high - low) // 2\n            if check(mid):\n                low = mid\n            else:\n                high = mid\n        return high if check(high) else low\n\n    @staticmethod\n    def find_float_left(low: float, high: float, check, error=1e-6) -> float:\n        \"\"\"find the minimum float x which make check true\"\"\"\n        while low < high - error:\n            mid = low + (high - low) / 2\n            if check(mid):\n                high = mid\n            else:\n                low = mid\n        return low if check(low) else high\n\n    @staticmethod\n    def find_float_right(low: float, high: float, check, error=1e-6) -> float:\n        \"\"\"find the maximum float x which make check true\"\"\"\n        while low < high - error:\n            mid = low + (high - low) / 2\n            if check(mid):\n                low = mid\n            else:\n                high = mid\n        return high if check(high) else low",
    "submit_ts": "1716649874",
    "subm_id": "1267600069"
}