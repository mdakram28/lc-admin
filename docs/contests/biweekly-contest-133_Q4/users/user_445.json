{
    "username": "endxkartikey",
    "submission": "class Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INV = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> endToInv;\n        for (auto& req : reqs) {\n            endToInv[req[0] + 1] = req[1];\n        }\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        int len = 1;\n        while (len <= n) {\n            int curInv = 0;\n            while (curInv <= MAX_INV) {\n                int newPos = 0;\n                while (newPos < len) {\n                    int prevInv = curInv - newPos;\n                    if (prevInv >= 0) {\n                        dp[len][curInv] = (dp[len][curInv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                    ++newPos;\n                }\n                ++curInv;\n            }\n\n            if (endToInv.count(len) > 0) {\n                int reqInv = endToInv[len];\n                int curInv = 0;\n                while (curInv <= MAX_INV) {\n                    if (curInv != reqInv) {\n                        dp[len][curInv] = 0;\n                    }\n                    ++curInv;\n                }\n            }\n\n            ++len;\n        }\n\n        long long result = 0;\n        int curInv = 0;\n        while (curInv <= MAX_INV) {\n            result = (result + dp[n][curInv]) % MOD;\n            ++curInv;\n        }\n\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070481.0
}