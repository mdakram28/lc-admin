{
    "username": "forwarding7",
    "submission": "class Solution {\n  public:\n    class RangeContainer {\n      public:\n        int insert(int u, int v) {\n            int r = 0;\n            auto it = ranges.lower_bound(u);\n\n            // \u68c0\u67e5\u65b0\u8303\u56f4\u662f\u5426\u88ab\u5df2\u6709\u8303\u56f4\u5305\u542b\n            if (it != ranges.end() && it->first == u) {\n                if (it->second >= v) {\n                    return -1;\n                }\n            }\n            if (it != ranges.begin()) {\n                auto prev = std::prev(it);\n                if (prev->second >= v) {\n                    return -1; // \u88ab\u5305\u542b\u4e86\n                }\n            }\n\n            while (it != ranges.end() && it->first <= v) {\n                if (u <= it->first && v >= it->second) {\n                    r += (it->second - it->first - 1);\n                    it = ranges.erase(it);\n                } else {\n                    ++it;\n                }\n            }\n\n            ranges[u] = v;\n            return r;\n        }\n\n      private:\n        std::map<int, int> ranges; // \u4f7f\u7528 map \u5b58\u50a8\u8303\u56f4\n    };\n\n    vector<int> shortestDistanceAfterQueries(int n,\n                                             vector<vector<int>> &queries) {\n        // vector<int> length(n);\n        // for (int i = 0; i < n; i++) {\n        //     length[i] = n - i - 1;\n        // }\n\n        RangeContainer rc;\n\n        vector<int> ans;\n        ans.reserve(static_cast<int>(queries.size()));\n\n        int clen = n - 1;\n        for (const auto &query : queries) {\n            auto from = query[0], to = query[1];\n            auto res = rc.insert(from, to);\n            if (res >= 0) {\n                clen += res;\n                clen -= (to - from - 1);\n            }\n\n            ans.emplace_back(clen);\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1722742129",
    "subm_id": "1343761673"
}