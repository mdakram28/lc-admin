{
    "username": "peterrockwave",
    "submission": "class Solution:\n    def findBestPoints(self, points):\n        topright = 0\n        topleft = 0\n        botright = 0\n        botleft = 0\n        for i in range(len(points)):\n            if points[i][0] + points[i][1] > points[topright][0] + points[topright][1]:\n                topright = i\n            if -points[i][0] + points[i][1] > -points[topleft][0] + points[topleft][1]:\n                topleft = i\n            if points[i][0] - points[i][1] > points[botright][0] - points[botright][1]:\n                botright = i\n            if -points[i][0] - points[i][1] > -points[botleft][0] - points[botleft][1]:\n                botleft = i\n        \n        posscore = self.findScore(points[topright], points[botleft])\n        negscore = self.findScore(points[botright], points[topleft])\n        if posscore > negscore:\n            return topright, botleft\n        else:\n            return botright, topleft\n                \n    def findScore(self, p1, p2):\n        return abs(p1[0]-p2[0]) + abs(p1[1]-p2[1])\n        \n    def minimumDistance(self, points: List[List[int]]) -> int:\n        i1,i2 = self.findBestPoints(points)\n        p1 = points[:i1] + points[i1+1:]\n        p2 = points[:i2] + points[i2+1:]\n        i11, i12 = self.findBestPoints(p1)\n        i21, i22 = self.findBestPoints(p2)\n        s1 = self.findScore(p1[i11], p1[i12])\n        s2 = self.findScore(p2[i21], p2[i22])\n        return min(s1,s2)\n        \n        "
}