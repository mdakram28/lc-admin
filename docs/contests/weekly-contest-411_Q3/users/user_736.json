{
    "username": "gred0216",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        switch(k) {\n            case 1: \n            case 3:\n            case 9:\n                return string(n, '9');\n            case 2:\n                if(n <= 2) {\n                    return string(n, '8');\n                }\n                return \"8\" + string(n - 2, '9') + \"8\";\n            case 4:\n                if(n <= 4) {\n                    return string(n, '8');\n                }\n                else {\n                    return \"88\" + string(n - 4, '9') + \"88\";\n                }\n            case 5:\n                if(n <= 2) {\n                    return string(n, '5');\n                }\n                return \"5\" + string(n - 2, '9') + \"5\";\n            case 6:\n                if(n <= 2) {\n                    return string(n, '6');\n                }\n                if(n % 2 == 0) {\n                    return \"8\" + string((n - 4) / 2, '9') + \"77\" + string((n - 4) / 2, '9') + \"8\";\n                }\n                else {\n                    return \"8\" + string((n - 3) / 2, '9') + \"8\" + string((n - 3) / 2, '9') + \"8\";\n                }\n            case 7:\n                return palindrome_7(n);\n            case 8:\n                if(n <= 6) {\n                    return string(n, '8');\n                }\n                else {\n                    return \"888\" + string(n - 6, '9') + \"888\";\n                }\n            default:\n                return \"\";\n        }\n    }\n\n    string palindrome_7(int n) {\n        string palindrome = string(n, '9');\n\n        while (!isDivisible(palindrome, 7)) {\n            // Decrement the numeric value of the palindrome\n            int index = (n - 1) / 2; // Start from the middle digit\n            while (index >= 0 && palindrome[index] == '0') {\n                palindrome[index] = '9'; // Roll over the digit from 0 to 9\n                index--;\n            }\n            if (index >= 0) {\n                palindrome[index]--; // Decrement the current digit\n                // Mirror the changes\n                palindrome[n - 1 - index] = palindrome[index];\n            } else {\n                // All digits rolled over, so we are out of the range\n                return \"-1\"; // No valid palindrome exists\n            }\n        }\n\n        return palindrome;\n    }\n\n    bool isDivisible(const string& s, int k) {\n        int remainder = 0;\n        for(char digit: s) {\n            remainder = remainder * 10 + (digit - '0');\n            remainder %= k;\n        }\n        return remainder == 0;\n    }\n};\n\n// k\n// 1 -> all 9\n// 2 -> 8 ... 999 ... 8\n// 3 -> all 9\n// 4 -> 88 ... 999 ... 88\n// 5 -> 5 ... 9 ... 5\n// 6 -> n is odd: 8 999... 8 ..999 8 (put a 8 in the mid)\n//      n is even 8 999... 77 ..999 8 (put 2 7 in the mid)\n\n// 7 -> \n// 8 -> 888 ....999 ...888\n// 9 -> all 9\n\n\n// 7\n// 14\n// 21\n// 28\n// 35\n// 42\n// 49\n// 56\n// 63\n// 70\n// 77\n// 84\n// 91\n// 98\n// 105",
    "submit_ts": "1723953385",
    "subm_id": "1359819869"
}