{
    "username": "MemoJigsaW",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie_edges = dict()\n        for idx, w in enumerate(words):\n            head = trie_edges\n            for ch in w:\n                head.setdefault(ch, dict())\n                head = head.get(ch)\n            head['\\x00']=min(head.get('\\x00', inf), costs[idx])\n        \n        pq = list()\n        # cost, idx\n        pq.append(\n            (0, 0)\n        )\n        \n        n = len(target)\n        costs = [inf] * (n+1)\n        \n        while pq:\n            cur_cost, cur_idx = heapq.heappop(pq)\n            if cur_idx == n:\n                return cur_cost\n            if cur_cost > costs[cur_idx]:\n                continue\n            costs[cur_idx] = cur_cost\n            \n            head = trie_edges\n            while cur_idx < n and target[cur_idx] in head:\n                head = head.get(target[cur_idx])\n                cur_idx += 1\n                if '\\x00' in head:\n                    if cur_cost + head.get('\\x00') < costs[cur_idx]:\n                        costs[cur_idx] = cur_cost + head.get('\\x00')\n                        heapq.heappush(pq, (cur_cost + head.get('\\x00'), cur_idx))\n        \n        return -1\n                \n        ",
    "submit_ts": "1720321733",
    "subm_id": "1312330837"
}