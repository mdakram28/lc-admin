{
    "username": "xyz_xyz_xyz_xyz",
    "submission": "class Solution {\n    class Trie {\n        Map<Character, Trie> children = new HashMap<>();\n        int cost = -1;\n    }\n\n    Trie trie = new Trie();\n    int[] dp;\n\n    public void insert(String word, int cost) {\n        Trie cur = trie;\n        for (char c : word.toCharArray()) {\n            cur.children.putIfAbsent(c, new Trie());\n            cur = cur.children.get(c);\n        }\n        if (cur.cost == -1) {\n            cur.cost = cost;\n        } else {\n            cur.cost = Math.min(cur.cost, cost);\n        }\n    }\n\n    public int dfs(int tcur, String target) {\n        if (tcur == target.length()) return 0;\n        if (dp[tcur] != Integer.MAX_VALUE) return dp[tcur];\n        \n        int cost = Integer.MAX_VALUE;\n        Trie cur = trie;\n        \n        for (int i = tcur; i < target.length(); i++) {\n            char c = target.charAt(i);\n            if (!cur.children.containsKey(c)) break;\n            cur = cur.children.get(c);\n            if (cur.cost >= 0) {\n                int tcost = dfs(i + 1, target);\n                if (tcost != -1) cost = Math.min(cost, cur.cost + tcost);\n            }\n        }\n        if (cost == Integer.MAX_VALUE) return dp[tcur] = -1;\n        return dp[tcur] = cost;\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        dp = new int[target.length() + 1];\n        for (int i = 0; i < dp.length; i++) dp[i] = Integer.MAX_VALUE;\n\n        for (int i = 0; i < words.length; i++) {\n            insert(words[i], costs[i]);\n        }\n        return dfs(0, target);\n    }\n}",
    "submit_ts": "1720323960",
    "subm_id": "1312388235"
}