{
    "username": "unlitcode",
    "submission": "class Solution {\n    void dfs(vector<vector<int>>& v, int cur, long long score, int rook, vector<int>& r, vector<int>& c, long long& ans){\n        if (rook == 0){\n            ans = max(ans, score);\n        } else {\n            for (int i = cur; i < v.size(); i++){\n                int x = v[i][1];\n                int y = v[i][2];\n                if (r[x] == -1 && c[y] == -1){\n                    r[x] = x;\n                    c[y] = y;\n                    dfs(v, i+1, score + v[i][0], rook - 1, r, c, ans);\n                    r[x] = -1;\n                    c[y] = -1;\n                }\n            }\n        }\n    }\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        \n        \n        vector<vector<int>> v;\n\n        for (int i = 0; i < board.size(); i++){\n            priority_queue<vector<int>> pq;\n            for (int j = 0; j < board[0].size(); j++){\n                pq.push({board[i][j], i, j});\n            }\n            int three = 3;\n            while (three--){\n                v.push_back(pq.top());\n                pq.pop();\n            }\n\n        }\n\n        sort(v.begin(), v.end(), greater<>());\n\n        vector<int> r(board.size(), -1);\n        vector<int> c(board[0].size(), -1);\n        long long ans = LONG_MIN;\n        dfs(v, 0, 0, 3, r, c, ans);\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1723910147",
    "subm_id": "1359219153"
}