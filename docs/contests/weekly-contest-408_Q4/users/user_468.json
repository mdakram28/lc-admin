{
    "username": "Hardik_4",
    "submission": "class Solution {\n\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n    queue<int> q;\n    q.push(start);\n    vector<int> vis(nodes + 4, 0);\n    vis[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (auto v : graph[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = 1;\n            }\n        }\n    }\n    bool ans=vis[target1] || vis[target2];\n    return ans;\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        // int n=circles1.size();\n        int m=circles2.size();\n         vector<pair<pair<int, int>, int>> circles(m);\n         vector<vector<int>> graph(m + 4);\n        int num_circles=m;\n        \n        for (int i = 0; i < num_circles; ++i) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].first.second=circles2[i][1];\n            circles[i].second=circles2[i][2];\n        }\n    for (int i = 0; i < num_circles; ++i) {\n\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n\n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            \n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int bottom_left = bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4);\n    int top_right = bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4);\n    \n    return !(bottom_left || top_right);\n       \n        \n    }\n};",
    "submit_ts": "1722137815",
    "subm_id": "1335774505"
}