{
    "username": "E-Ro Nguyen",
    "submission": "const int N = 1e5 + 100;\nint mem[N][10], POW[N];\n\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        POW[0] = 1 % k;\n        for (int i = 1; i <= n; ++i) POW[i] = POW[i - 1] * 10 % k;\n        for (int i = 0; i <= n; ++i) {\n            for (int j = 0; j < k; ++j) mem[i][j] = -1;\n        }\n        string res(n, '-');\n        go(0, 0, res, k);\n        return res;\n    }\n\n    bool go(int i, int r, string& res, int k) {\n        if (i == (res.size() + 1) / 2) {\n            return r == 0;\n        }\n        if (mem[i][r] != -1) return mem[i][r];\n        for (int j = 9; j >= 0; --j) {\n            int cur_r = (r + j * (POW[res.size() - i - 1] + POW[i])) % k;\n            if (res.size() == i * 2 + 1) \n                cur_r = (r + j * POW[i]) % k;\n            \n            if (go(i + 1, cur_r, res, k)) {\n                res[i] = '0' + j;\n                res[res.size() - i - 1] = '0' + j;\n                mem[i][r] = 1;\n                return true;\n            }\n        }\n        mem[i][r] = 0;\n        return false;\n    }\n\n\n};",
    "submit_ts": "1723949519",
    "subm_id": "1359721700"
}