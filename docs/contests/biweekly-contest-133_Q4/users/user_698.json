{
    "username": "rishikesh32002",
    "submission": "     \n        \n  class Solution {\nprivate:\n    static const int MODULO = 1'000'000'007;\n    static const int MAX_INVERSIONS = 500;\n      //coding codes//\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n\n        unordered_map<int, int> endToInversions;\n        for (const auto& req : requirements) {\n            endToInversions[req[0] + 1] = req[1];\n        }\n\n        \n        \n        \n        //now let us think of the dp table \n        //lets do it how\n        \n        \n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n        \n        \n        \n        \n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                dp[len][inv] = 0;\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MODULO;\n                    }\n                }\n            }\n\n          \n            if (endToInversions.count(len) > 0) {\n                int reqInv = endToInversions[len];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != reqInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        \n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + dp[n][inv]) % MODULO;\n        }\n\n        return static_cast<int>(result);\n        //hence solved\n    }\n};",
    "submit_ts": 1719070718.0
}