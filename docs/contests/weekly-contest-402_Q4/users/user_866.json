{
    "username": "anandpatel9998",
    "submission": "class Solution {\n public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> result = new ArrayList<>();\n\n        int[] peaks = new int[nums.length];\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                peaks[i] = 1;\n            }\n        }\n        segmentTree segTree = new segmentTree(peaks);\n        \n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                result.add(segTree.query(l + 1, r));\n            } else {\n                int idx = query[1];\n                int updatedVal = query[2];\n                nums[idx] = updatedVal;\n                if (idx > 0 && idx < nums.length - 1) {\n                    update(idx, nums, peaks, segTree);\n                }\n                if (idx - 1 > 0 && idx - 1 < nums.length - 1) {\n                    update(idx - 1, nums, peaks, segTree);\n                }\n                if (idx + 1 > 0 && idx + 1 < nums.length - 1) {\n                    update(idx + 1, nums, peaks, segTree);\n                }\n            }\n        }\n        \n        return result;\n    }\n    \n    private void update(int idx, int[] nums, int[] peaks, segmentTree segTree) {\n        if (nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) {\n            peaks[idx] = 1;\n        } else {\n            peaks[idx] = 0;\n        }\n        segTree.modify(idx, peaks[idx]);\n    }\n\n    class segmentTree\n    {\n        int n;  // array size\n        int t[];\n\n        public segmentTree(int[] arr)\n        {\n            n=arr.length;\n            t=new int[3*n];\n            for(int i=0;i<n;i++)\n            {\n                t[n+i]=arr[i];\n            }\n            build();\n        }\n\n        void build() {  // build the tree\n            for (int i = n - 1; i > 0; --i) t[i] = t[i<<1] + t[i<<1|1];\n        }\n\n        void modify(int p, int value) {  // set value at position p\n            for (t[p += n] = value; p > 1; p >>= 1) t[p>>1] = t[p] + t[p^1];\n        }\n\n        int query(int l, int r) {  // sum on interval [l, r)\n            int res = 0;\n            for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\n                if ((l&1)!=0) res += t[l++];\n                if ((r&1)!=0) res += t[--r];\n            }\n            return res;\n        }\n    }\n}",
    "submit_ts": 1718508964.0
}