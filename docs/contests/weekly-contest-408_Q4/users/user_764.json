{
    "username": "imkartiksoni",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    // Helper function for BFS to check connectivity\n    int checkConnectivity(const vector<vector<int>>& adjList, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        vector<bool> visited(totalNodes, false);\n        q.push(start);\n        visited[start] = true;\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n\n            for (int neighbor : adjList[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return (visited[target1] || visited[target2]) ? 1 : 0;\n    }\n\n    // Main function to determine if the corners are connected\n    bool isPathBlocked(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> adjList(numCircles + 4);  // Graph adjacency list\n\n        // Create graph edges based on circle positions and radii\n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i][0] <= circles[i][2]) {\n                adjList[numCircles].push_back(i);\n                adjList[i].push_back(numCircles);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                adjList[numCircles + 2].push_back(i);\n                adjList[i].push_back(numCircles + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                adjList[numCircles + 1].push_back(i);\n                adjList[i].push_back(numCircles + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                adjList[numCircles + 3].push_back(i);\n                adjList[i].push_back(numCircles + 3);\n            }\n\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radiusSum = circles[i][2] + circles[j][2];\n\n                if (radiusSum >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n\n        // Verify blockages\n        int isBlocked = max(checkConnectivity(adjList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4),\n                            checkConnectivity(adjList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n\n        return isBlocked == 0;\n    }\n\n    // Wrapper function\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return isPathBlocked(X, Y, circles);\n    }\n};\n",
    "submit_ts": "1722138546",
    "subm_id": "1335793519"
}