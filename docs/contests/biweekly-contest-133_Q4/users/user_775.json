{
    "username": "Ansh_Bajpai",
    "submission": "class Solution {\n       const int MOD=1000000007;\n       const int MAX_INV=400;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n          unordered_map<int, int> constraintsMap;\n    for (const auto& constraint : requirements) {\n        constraintsMap[constraint[0] + 1] = constraint[1];\n    }\n    vector<vector<long long>> dp(n+1, vector<long long>(MAX_INV + 1, 0));\n    dp[0][0] = 1;\n    int length = 1;\n    while (length<=n) {\n        int inv = 0;\n        while (inv <= MAX_INV) {\n            if ((dp[length-1][inv])>0) {\n                int newPos = 0;\n                while (newPos<length) {\n                    int newInv = inv + newPos;\n                    if (newInv <= MAX_INV) {\n                        dp[length][newInv] = (dp[length][newInv] + dp[length - 1][inv]) % MOD;\n                    }\n                    newPos++;\n                }\n            }\n            inv++;\n        }\n        if (constraintsMap.find(length) != constraintsMap.end()) {\n            int requiredInv = constraintsMap[length];\n            int inv = 0;\n            while (inv <= MAX_INV) {\n                if (inv != requiredInv) {\n                    dp[length][inv] = 0;\n                }\n                inv++;\n            }\n        }\n        length++;\n    }\n    long long result = 0;\n    for (long long count : dp[n]) {\n        result = (result + count) % MOD;\n    }\n    return static_cast<int>(result);\n    }\n};",
    "submit_ts": "1719071200",
    "subm_id": "1296841339"
}