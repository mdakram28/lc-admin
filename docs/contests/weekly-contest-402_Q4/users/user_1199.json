{
    "username": "SaiSusshanth",
    "submission": "class NumArray:\n    def __init__(self, nums: List[int]):\n        self.n = len(nums)\n        self.tree = [0] * 2 * self.n\n        for i in range(self.n):\n            self.tree[i + self.n] = nums[i]\n        for i in range(self.n-1, 0, -1):\n            self.tree[i] = self.tree[2*i] + self.tree[2*i+1]\n        # print(self.tree)\n\n    def update(self, index: int, val: int) -> None:\n        index += self.n\n        self.tree[index] = val\n        while index > 1:\n            self.tree[index//2] = self.tree[index] + self.tree[index^1]\n            index //= 2\n\n    def sumRange(self, left: int, right: int) -> int:\n        left += self.n\n        right += self.n\n        res = 0\n        while left <= right:\n            if left & 1:\n                # if left odd:\n                res += self.tree[left]\n                left += 1\n            if right & 1 ==0:\n                # if right even\n                res += self.tree[right]\n                right -= 1\n            left //= 2\n            right //= 2\n        return res\n        \n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        peaks = [0]*n\n        res = []\n        \n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                peaks[i] = 1\n        \n        tree = NumArray(peaks)\n        \n        def check(arr, ind, n):\n            if ind == 0 or ind == n - 1: return 0\n            if arr[ind] > arr[ind - 1] and arr[ind] > arr[ind + 1]: return 1\n            return 0\n        \n        \n        for q in queries:\n            if q[0] == 2:\n                ind = q[1]\n                nums[ind] = q[2]\n                \n                if ind > 0:\n                    peaks[ind - 1] = check(nums, ind - 1, n)\n                    tree.update(ind - 1, peaks[ind - 1])\n                \n                if ind < n - 1:\n                    peaks[ind + 1] = check(nums, ind + 1, n)\n                    tree.update(ind + 1, peaks[ind + 1])\n                        \n                if ind > 0 and ind < n - 1:\n                    peaks[ind] = check(nums, ind, n)\n                    tree.update(ind, peaks[ind])\n                \n            else:\n                l, r = q[1], q[2]\n                # print(peaks, l, r)\n                res.append(tree.sumRange(l + 1, r - 1))\n        return res\n                \n                \n                \n                ",
    "submit_ts": "1718508573",
    "subm_id": "1289685143"
}