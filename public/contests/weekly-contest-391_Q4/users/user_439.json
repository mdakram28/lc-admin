{
    "username": "jiu-ren-36",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& po) {\n        multiset<int> st[4];\n        for(auto i: po)\n        {\n            st[0].insert(i[0] + i[1]);\n            st[1].insert(-i[0] + i[1]);\n            st[2].insert(-i[0] - i[1]);\n            st[3].insert(i[0] - i[1]);\n        }\n        // cout << st[0].size() << ' ';\n        int n = po.size();\n        int res = 1e9;\n        for(auto i: po)\n        {\n            int mx = 0;\n            auto it = st[0].lower_bound(i[0] + i[1]);\n            auto it1 = st[1].lower_bound(-i[0] + i[1]);\n            auto it2 = st[2].lower_bound(-i[0] - i[1]);\n            auto it3 = st[3].lower_bound(i[0] - i[1]);\n            st[0].erase(it);\n            st[1].erase(it1);\n            st[2].erase(it2);\n            st[3].erase(it3);\n            mx = max(mx, *st[0].rbegin() - *st[0].begin());\n            mx = max(mx, *st[1].rbegin() - *st[1].begin());\n            mx = max(mx, *st[2].rbegin() - *st[2].begin());\n            mx = max(mx, *st[3].rbegin() - *st[3].begin());\n            res = min(res, mx);\n            st[0].insert(i[0] + i[1]);\n            st[1].insert(-i[0] + i[1]);\n            st[2].insert(-i[0] - i[1]);\n            st[3].insert(i[0] - i[1]);\n        }\n        return res;\n        \n    }\n};"
}