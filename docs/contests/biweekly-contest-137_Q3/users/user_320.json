{
    "username": "figuretu",
    "submission": "type node struct {\n    val, i, j int\n}\nfunc maximumValueSum(board [][]int) int64 {\n    b := make([]node, len(board)*len(board[0]))\n    for i := range board {\n        for j := range board[i] {\n            b[i*len(board[0]) + j] = node{\n                val: board[i][j],\n                i: i,\n                j: j,\n            }\n        }\n    }\n    sort.Slice(b, func(i, j int) bool {\n        return b[i].val > b[j].val\n    })\n    res := math.MinInt64\n    s := len(b)\n    var dfs func(remain, i, sum int)\n    invalidRow := make([]bool, len(board))\n    invalidCol := make([]bool, len(board[0]))\n    dfs = func(remain, i, sum int) {\n        if remain == 0 {\n            res = max(res, sum)\n            return\n        }\n        for j := i; j < s; j++ {\n            if invalidCol[b[j].j] == true {\n                continue\n            }\n            if invalidRow[b[j].i] == true {\n                continue\n            }\n            if remain == 1 && res > sum + b[j].val {\n                break\n            }\n            if remain == 2 && res > sum + b[j].val*2 {\n                break\n            }\n            if remain == 3 && res > sum + b[j].val*3 {\n                break\n            }\n            invalidRow[b[j].i] = true\n            invalidCol[b[j].j] = true\n            dfs(remain-1, j+1, sum+b[j].val)\n            invalidRow[b[j].i] = false\n            invalidCol[b[j].j] = false\n        }\n    }\n    dfs(3, 0, 0)\n    return int64(res)\n}",
    "submit_ts": "1723909756",
    "subm_id": "556337837"
}