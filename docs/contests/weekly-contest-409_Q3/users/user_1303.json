{
    "username": "kaiserasif",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # there won't be any interleaving roads\n        # 1. and edge may be smaller and covered by another - skip\n        # 2. \n        # use a doubly linked list\n        # cut the chain after shorcircuiting\n        # measure the length of the chain, and subtract from prev len\n      \n        class Node:\n          def __init__(self, val, prev=None, next=None):\n            self.prev, self.next = prev, next\n            self.val = val\n\n        node_map = dict()\n        for i in range(n):\n          node_map[i] = Node(i)\n          if i > 0:\n            node_map[i-1].next = node_map[i]\n            node_map[i].prev = node_map[i-1]\n\n        ans = []\n        for u, v in queries:\n          if u in node_map and v in node_map and node_map[u].next != node_map[v]:\n            to_del = node_map[u].next\n            node_map[v].prev.next = None  # disconnect chain, else del won't stop\n            node_map[u].next = node_map[v]\n            node_map[v].prev = node_map[u]\n            \n            while to_del:\n              next = to_del.next\n              del node_map[to_del.val]\n              to_del = next\n\n          ans.append(len(node_map) - 1)\n\n        return ans",
    "submit_ts": "1722743768",
    "subm_id": "1343799217"
}