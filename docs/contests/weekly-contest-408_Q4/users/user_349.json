{
    "username": "ConstantineJin",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        parent = list(range(n))\n\n        def find(x):\n            if parent[x] != x:\n                parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX != rootY:\n                parent[rootY] = rootX\n\n        def are_circles_connected(c1, c2):\n            dx, dy = float(c1[0] - c2[0]), float(c1[1] - c2[1])\n            dist = math.sqrt(dx * dx + dy * dy)\n            return dist <= float(c1[2] + c2[2])\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if are_circles_connected(circles[i], circles[j]):\n                    union(i, j)\n\n        touch_top = set()\n        touch_bottom = set()\n        touch_left = set()\n        touch_right = set()\n\n        for i, circle in enumerate(circles):\n            x, y, r = circle\n            root = find(i)\n            if y + r >= Y:\n                touch_top.add(root)\n            if y - r <= 0:\n                touch_bottom.add(root)\n            if x - r <= 0:\n                touch_left.add(root)\n            if x + r >= X:\n                touch_right.add(root)\n\n        for i in range(n):\n            root = find(i)\n            if (root in touch_top and root in touch_bottom) or \\\n               (root in touch_left and root in touch_right) or \\\n               (root in touch_left and root in touch_bottom) or \\\n               (root in touch_top and root in touch_right):\n                return False\n\n        return True",
    "submit_ts": "1722137393",
    "subm_id": "1335762509"
}