{
    "username": "Rupal Malhotra",
    "submission": "class Solution {\npublic:\n    long long ans = LLONG_MIN;\n\n    void solve(vector<vector<int>>& board, vector<int>& rowUsed, vector<int>& colUsed, long long currSum, int noOfRooks) {\n        if (noOfRooks == 3) {\n            ans = max(ans, currSum);\n            return;\n        }\n\n        int ROWS = board.size(), COLS = board[0].size();\n\n        for (int row = 0; row < ROWS; row++) {\n            if (rowUsed[row]) continue;    \n            long long maxPossibleSum = currSum;\n            for (int i = noOfRooks; i < 3; i++) {\n                maxPossibleSum += *max_element(board[row].begin(), board[row].end());\n            }\n            if (maxPossibleSum <= ans) continue;\n\n            for (int col = 0; col < COLS; col++) {\n                if (colUsed[col]) continue;\n\n                rowUsed[row] = 1;\n                colUsed[col] = 1;\n                currSum += board[row][col];\n\n                solve(board, rowUsed, colUsed, currSum, noOfRooks + 1);\n\n                // Backtracking\n                currSum -= board[row][col];\n                rowUsed[row] = 0;\n                colUsed[col] = 0;\n            }\n        }\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int ROWS = board.size(), COLS = board[0].size();\n        vector<int> rowUsed(ROWS, 0);\n        vector<int> colUsed(COLS, 0);\n        long long currSum = 0;\n        solve(board, rowUsed, colUsed, currSum, 0);\n        return ans;\n    }\n};\n",
    "submit_ts": "1723909787",
    "subm_id": "1359205783"
}