{
    "username": "hk850522",
    "submission": "class Solution {\npublic:\n    int maxDeep(vector<vector<int>> & edges, int & inside) {\n        unordered_map<int, vector<int>> mp;\n        unordered_map<int, int> deep;\n        unordered_map<int, int> degree;\n\n        for (int i = 0; i < edges.size(); i++) {\n            int u = edges[i][0], v = edges[i][1];\n            mp[u].push_back(v);\n            mp[v].push_back(u);\n            degree[u]++;\n            degree[v]++;\n        }\n\n        \n\n        queue<int> q;\n        for (auto it : mp) {\n            if (it.second.size() == 1) {\n                q.push(it.first);\n                deep[it.first] = 1;\n                degree[it.first] = 0;\n            }\n        }\n\n        int maxDeep = 0;\n        int cnt = 0;\n        while (!q.empty()) {\n            int u = q.front();\n            maxDeep = max(maxDeep, deep[u]);\n            q.pop();\n            bool haveNext = false;\n            for (int i = 0; i < mp[u].size(); i++) {\n                int next = mp[u][i];\n                if (deep[next] == 0) {\n                    degree[next]--;\n                    haveNext = true;\n                    if (degree[next] == 1) {\n                        q.push(next);\n                        deep[next] = deep[u] + 1;\n                    }\n                }\n                else if (deep[next] == deep[u]) {\n                    cnt++;\n                }\n            }\n            if (!haveNext && cnt == 0) cnt++;\n        }\n        if (maxDeep <= 0) maxDeep++;\n        if (cnt == 2) inside = (maxDeep - 1) * 2 + 1;\n        if (cnt == 2) maxDeep++;\n        \n        if (cnt == 1) inside = (maxDeep - 1) * 2;\n        // cout << cnt << endl;\n        // cout << inside << endl;\n        return maxDeep;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if (edges1.size() == 0 && edges2.size() == 0) return 1;\n        int insideA = 0, insideB = 0;\n        int ans = maxDeep(edges1, insideA) + maxDeep(edges2, insideB) - 1;\n        return max(ans, max(insideA, insideB));\n    }\n};",
    "submit_ts": "1719719654",
    "subm_id": "1304447313"
}