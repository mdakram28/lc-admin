{
    "username": "pankaj_777",
    "submission": "class Solution {\npublic:\n    int cnt[2];\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        \n        auto dfs = [&] (int row, int col, auto&& dfs) -> void {\n            cnt[grid[row][col]]++;\n            grid[row][col] = -1;\n            if (grid[row][m - 1 - col] >= 0) dfs(row, m - 1 - col, dfs);\n            if (grid[n - 1 - row][col] >= 0) dfs(n - 1 - row, col, dfs);\n        };\n        \n        vector<vector<int>> count;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j] == -1) continue;\n                cnt[0] = cnt[1] = 0;\n                dfs(i, j, dfs);\n                count.push_back({cnt[0], cnt[1]});\n            }\n        }\n        \n        int N = count.size();\n        int dp[N + 1][4];\n        // index, cnt % 4, target\n        for (int i = 0; i < 4; i++) {\n            dp[N][i] = n * m;\n        }\n        \n        dp[N][0] = 0;\n        for (int i = N - 1; i >= 0; i--) {\n            for (int j = 0; j < 4; j++) {\n                dp[i][j] = count[i][1] + dp[i + 1][j];\n                dp[i][j] = min(dp[i][j], count[i][0] + dp[i + 1][(j + count[i][0] + count[i][1]) % 4]); \n            }\n        }\n        \n        return dp[0][0];\n    }\n};",
    "submit_ts": "1722698053",
    "subm_id": "1343168083"
}