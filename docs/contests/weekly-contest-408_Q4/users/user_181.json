{
    "username": "the_guy_07",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    bool dfs(int u, vector<bool>& vis, vector<ll> adj[], unordered_set<int>& bottom_right){\n        if(bottom_right.count(u)) return true;\n\n        bool blocked = false;\n        for(auto v : adj[u]){\n            if(!vis[v]){\n                vis[v] = true;\n                blocked = blocked || dfs(v, vis, adj, bottom_right);\n            }\n        }\n        return blocked;\n    }\n\n    bool canReachCorner(int x, int y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<ll> adj[n];\n        unordered_set<int> top_left, bottom_right;\n        \n        for(int i = 0; i < n; i++){\n            ll cx = circles[i][0], cy = circles[i][1], r = circles[i][2];\n\n            for(int j = 0; j < n; j++){\n                ll cx1 = circles[j][0], cy1 = circles[j][1], r1 = circles[j][2];\n                ll dist = (cx-cx1)*(cx-cx1) + (cy-cy1)*(cy-cy1);\n                if(dist <= (r1+r)*(r1+r)){\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n\n            // Check if the circle intersects with the boundary close to the top-left corner (0, Y) and (X, 0)\n            if(cy + r >= y || cx <= r) top_left.insert(i);\n\n            // Check if the circle intersects with the boundary close to the bottom-right corner (X, 0) and (0, Y)\n            if(cy <= r || cx + r >= x) bottom_right.insert(i);\n        }\n\n        vector<bool> vis(n, false);\n        bool blocked = false;\n        for(auto i : top_left){\n            if(!vis[i]){\n                vis[i] = true;\n                blocked = blocked || dfs(i, vis, adj, bottom_right); \n            }\n        }\n        return !blocked;\n    }\n};",
    "submit_ts": "1722135737",
    "subm_id": "1335712008"
}