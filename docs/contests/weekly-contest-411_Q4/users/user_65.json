{
    "username": "Haoyu Weng",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        def getWidth(s):\n            counts = [0, 0]\n            def check(j):\n                counts1 = list(counts)\n                counts1[int(s[j])] += 1\n                return counts1[0] <= k or counts1[1] <= k\n            width = []\n            j = 0\n            for i in range(n):\n                while j < len(s) and check(j):\n                    counts[int(s[j])] += 1\n                    j += 1\n                width.append(j-i)\n                counts[int(s[i])] -= 1\n            return width\n        width = getWidth(s)\n        widthR = getWidth(s[::-1])[::-1]\n        bit = RangeBIT(n)\n        for i in range(n):\n            bit.edit(i, i, width[i])\n        ans = [0] * len(queries)\n        qs = sorted(range(len(queries)), key=lambda q: queries[q][1])\n        end = n-1\n        offset = 0\n        for q in qs[::-1]:\n            l, r = queries[q]\n            while end > r:\n                begin = end - widthR[end] + 1\n                bit.edit(begin, end, -1)\n                end -= 1\n            ans[q] = bit.range(l, r)\n        return ans\n\nclass BIT:\n    def __init__(self, n):\n        self.n = n\n        self.arr = [0] * (n + 1)\n    def sum(self, i):\n        ans = 0\n        i += 1\n        while i > 0:\n            ans += self.arr[i]\n            i -= i & -i\n        return ans\n    def edit(self, i, x):\n        i += 1\n        while i <= self.n:\n            self.arr[i] += x\n            i += i & -i\n    def __iter__(self):\n        for i in range(self.n):\n            yield self.sum(i) - self.sum(i-1)\n    def __repr__(self):\n        return repr(list(self))\n\nclass RangeBIT:\n    def __init__(self, n):\n        self.n = n\n        self.bit1 = BIT(n)\n        self.bit2 = BIT(n)\n    def edit(self, l, r, x):\n        self.bit1.edit(l, x)\n        self.bit1.edit(r+1, -x)\n        self.bit2.edit(l, x*(l-1))\n        self.bit2.edit(r+1, -x*r)\n    def sum(self, r):\n        return self.bit1.sum(r) * r - self.bit2.sum(r)\n    def range(self, l, r):\n        return self.sum(r) - self.sum(l-1)\n    def __iter__(self):\n        for i in range(self.n):\n            yield self.range(i, i)\n    def __repr__(self):\n        return repr(list(self))",
    "submit_ts": "1723952377",
    "subm_id": "1359794805"
}