{
    "username": "user9821NM",
    "submission": "struct FenwickTree {\n    vector<int> bit;  // binary indexed tree\n    int n;\n\n    FenwickTree(int n) {\n        this->n = n;\n        bit.assign(n, 0);\n    }\n\n    int sum(int r) {\n        int ret = 0;\n        for (; r >= 0; r = (r & (r + 1)) - 1)\n            ret += bit[r];\n        return ret;\n    }\n\n    int sum(int l, int r) {\n        if(l > r) return 0;\n        return sum(r) - sum(l - 1);\n    }\n\n    void add(int idx, int delta) {\n        for (; idx < n; idx = idx | (idx + 1))\n            bit[idx] += delta;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        \n        FenwickTree tree(nums.size());\n        vector<int>answer;\n        \n        for(int i = 1; i + 1 < nums.size(); i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) tree.add(i, 1);\n        }\n        \n        auto isPeak = [&](int index) {\n            if(index <= 0 || index >= nums.size() - 1) return false;\n            return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n        };\n        \n        for(auto &i : queries) {\n            if(i[0] == 1) {\n                answer.push_back(tree.sum(i[1] + 1, i[2] - 1));\n            }\n            else {\n                \n                if(isPeak(i[1])) tree.add(i[1], -1);\n                if(isPeak(i[1] - 1)) tree.add(i[1] - 1, -1);\n                if(isPeak(i[1] + 1)) tree.add(i[1] + 1, -1);\n                \n                nums[i[1]] = i[2];\n                \n                if(isPeak(i[1])) tree.add(i[1], 1);\n                if(isPeak(i[1] - 1)) tree.add(i[1] - 1, 1);\n                if(isPeak(i[1] + 1)) tree.add(i[1] + 1, 1);\n            }\n        }\n        \n        \n        return answer;\n        \n    }\n};",
    "submit_ts": 1718506462.0
}