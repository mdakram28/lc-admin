{
    "username": "Mazaalai",
    "submission": "#include <bits/stdc++.h>\n// #pragma GCC optimize(\"O3, unroll-loops\")\n// #pragma GCC target(\"avx2\")\n// #define int long long\nusing namespace std;\n\n#define _upgrade                  \\\n    ios_base::sync_with_stdio(0); \\\n    cin.tie(0);                   \\\n    cout.tie(0);\n#define LINE \"---------------------\\n\"\n#define ALL(A) A.begin(), A.end()\n#define LLA(A) A.rbegin(), A.rend()\n#define Q queue\n#define ff first\n#define ss second\n#define pb push_back\n#define mp make_pair\n#define lb lower_bound \n#define ub upper_bound \n#define ub upper_bound \n#define umap unordered_map\n#define sz(x) (int)x.size()\n#define chmin(a,b) a=min(a,b)\n#define chmax(a,b) a=max(a,b)\n\nusing db = double;\nusing ld = long double;\nusing sint = short int;\nusing ll = long long;\nusing uint = unsigned int;\n// PQ going up <int, VI, greater<int> >\nusing VI = vector<int>;\nusing VVI = vector<VI>;\nusing VVVI = vector<VVI>;\nusing VB = vector<bool>;\nusing VVB = vector<VB>;\nusing VVVB = vector<VVB>;\nusing VLL = vector<ll>;\nusing VVLL = vector<VLL>;\nusing PII = pair<int, int>;\nusing VPI = vector<PII>;\nusing VVPI = vector<VPI>;\nusing PLL = pair<ll, ll>;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n \n\n\n\nconst int MOD = int(1e9) + 7;\nconst int INF = INT_MAX;\nconst ll INFF = INT64_MAX;\nconst db EPS = 1e-9;\nconst db PI = acos(-1.0); //M_PI;\nconst int moveX[] = {-1, 0, 1, 0};\nconst int moveY[] = {0, 1, 0, -1};\nclass Solution {\nprivate:\n    int n;\n    vector <int> node, nums;\n    void build(int l, int r, int head) {\n        if (l == r) {\n            if (l == 0 || r == n-1) return;\n            if (max(nums[l-1], nums[l+1]) < nums[l]) {\n                // cout << \"peak: \" << l+1 << '\\n';\n                node[head] = 1;\n            }\n            return;\n        }\n        int m =(l+r)/2;\n        build(l, m, head*2+1);\n        build(m+1, r, head*2+2);\n        node[head] = node[head*2+1]+node[head*2+2];\n        return;\n    }\n    int query(int l, int r, int L, int R, int head) {\n        if (l < 0 || r >= n) return 0;\n        if (r < L || R < l) return 0;\n        if (L <= l && r <= R) return node[head];\n        int m = (l+r)/2;\n        return query(l, m, L, R, head*2+1) + \n            query(m+1, r, L, R, head*2+2);\n    }\n    void update(int l, int r, int id, int head) {\n        if (l < 0 || r >= n) return;\n        if (l == r) {\n            node[head] = 0;\n            if (l == 0 || r == n-1) return;\n            if (max(nums[l-1], nums[l+1]) < nums[l]) {\n                // cout << \"peak: \" << l+1 << '\\n';\n                node[head] = 1;\n            }\n            return;\n        }\n        int m =(l+r)/2;\n        if (id <= m)\n            update(l, m, id, head*2+1);\n        else\n            update(m+1, r, id, head*2+2);\n\n        node[head] = node[head*2+1]+node[head*2+2];\n        return;\n    }\npublic:\n    Solution() {\n        _upgrade\n    }\n    vector<int> countOfPeaks(vector<int>& _nums, vector<vector<int>>& queries) {\n        nums = _nums;\n        n = nums.size();\n        node = VI(4*n, 0);\n        build(0, n-1, 0);\n        vector <int> ans;\n        for (auto& q : queries) {\n            int a, l, r;\n            a = q[0], l = q[1], r = q[2];\n            if (a == 1) {\n                if (r-l+1 < 3) {\n                    ans.pb(0);\n                } else {\n                    ans.pb(query(0, n-1, l, r, 0)-query(0, n-1, l, l, 0)-query(0, n-1, r, r, 0));\n                }\n            } else {\n                nums[l] = r;\n                update(0, n-1, l-1, 0);\n                update(0, n-1, l, 0);\n                update(0, n-1, l+1, 0);\n            }\n        }\n        return ans;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "submit_ts": 1718506535.0
}