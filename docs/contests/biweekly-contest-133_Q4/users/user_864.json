{
    "username": "gaganursmg",
    "submission": "\nclass Solution {\n    int mod=1000000007;\n    int max=400;\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> map= new HashMap<>();\n        for (int i = 0; i < requirements.length; i++) {\n         int[] req = requirements[i];\n            map.put(req[0] + 1, req[1]);\n           }\n        long[][] count=new long[n+1][max+1];\n        count[0][0]=1;\n        for (int i=1;i<=n;i++) {\n            for (int j=0;j <=max;j++) {\n                for (int k=0;k<i;k++) {\n                    int l=j-k;\n                    if (l>= 0) {\n                        count[i][j]=(count[i][j]+count[i- 1][l]) %mod;\n                    }\n                }\n            }\n            if (map.containsKey(i)) {\n                int G= map.get(i);\n                for (int j=0;j<=max;j++) {\n                    if (j!=G) {\n                        count[i][j] = 0;\n                    }\n                }\n            }\n        }\n       long output = 0;\n       for (int i = 0; i < count[n].length; i++) {\n        long c = count[n][i];\n       output = (output+c) % mod;\n       }\n        return (int) output;\n    }\n}",
    "submit_ts": 1719071417.0
}