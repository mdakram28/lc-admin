{
    "username": "hungry-leavittjf6",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass FenwickTree {\nprivate:\n    vector<int> sums;\npublic:\n    FenwickTree(int size) : sums(size + 1) {}\n\n    void update(int i, int delta) {\n        while (i < sums.size()) {\n            sums[i] += delta;\n            i += i & -i;\n        }\n    }\n    \n    void updateSet(int i, int delta) {\n    int currentValue = query(i) - query(i - 1); // \u8ba1\u7b97\u4f4d\u7f6ei\u7684\u5f53\u524d\u503c\n    int diff = delta - currentValue; // \u8ba1\u7b97\u4e0e\u6b32\u8bbe\u7f6e\u7684\u503c\u4e4b\u95f4\u7684\u5dee\u503c\n    update(i, diff); // \u4f7f\u7528\u539fupdate\u51fd\u6570\u5e94\u7528\u8fd9\u4e2a\u5dee\u503c\n}\n\n    int query(int i) {\n        if(i==-1)return 0;\n        int sum = 0;\n        while (i > 0) {\n            sum += sums[i];\n            i -= i & -i;\n        }\n        return sum;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& queries) {\n        int n = a.size();\n        FenwickTree tree(n + 2);\n        for (int i = 1; i < n-1; ++i) {\n            if (a[i] > a[i - 1] && a[i] > a[i + 1]) {\n                tree.updateSet(i, 1); \n            }\n        }\n        \n        vector<int> ans;\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                if(r-l+1<3){\n                    ans.push_back(0);\n                    continue;\n                }\n                ans.push_back(tree.query(r-1) - tree.query(l));\n            } else {\n                int pos = q[1], val = q[2];\n                // \u66f4\u65b0\u6570\u7ec4a\u7684\u503c\n               a[pos] = val;\n               for(int i = max(pos - 1, 1); i <= min(pos + 1, n - 2); i++) {\n    bool isPeak = a[i] > a[i - 1] && a[i] > a[i + 1];\n\n    tree.updateSet(i, isPeak ? 1 : 0);\n}\n                \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508815.0
}