{
    "username": "_global",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie obj =new Trie();\n        for(int i=0;i<words.length;i++) obj.insert(words[i],costs[i]);\n        int n= target.length();\n        int dp[]=new int[n+1];\n        Arrays.fill(dp,Integer.MAX_VALUE);\n        dp[n]=0;\n        for(int i=n-1;i>=0;i--){\n            Node node = obj.root;\n            for(int j=i,len=1;j<n;j++,len++){\n                int d = (target.charAt(j)-'a');\n                if(node.children[d]==null) break;\n                node = node.children[d];\n                if(node.isEnd && node.map.containsKey(len)){\n                    int cost = node.map.get(len);\n                    if(dp[j+1]==Integer.MAX_VALUE) continue;\n                    dp[i]=Math.min(cost+dp[j+1],dp[i]);\n                }\n            }\n        }\n        return dp[0]==Integer.MAX_VALUE ? -1 : dp[0];\n            \n    }\n}\nclass Trie{\n    Node root;\n    public Trie(){\n        this.root =new Node();\n    }\n    public void insert(String word,int cost){\n        Node node = root;\n        for(char c : word.toCharArray()){\n            int d = c-'a';\n            if(node.children[d]==null) node.children[d]=new Node();\n            node = node.children[d];\n        }\n        int n=word.length();\n        node.isEnd = true;\n        node.map.putIfAbsent(n,cost);\n        cost = Math.min(cost,node.map.get(n));\n        node.map.put(n,cost);\n    }\n}\nclass Node{\n    Node children[];\n    Map<Integer,Integer> map;\n    boolean isEnd;\n    public Node(){\n        this.children = new Node[26];\n        this.map = new HashMap<>();\n    }\n}",
    "submit_ts": "1720321084",
    "subm_id": "1312313048"
}