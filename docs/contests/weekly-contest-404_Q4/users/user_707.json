{
    "username": "Juanchoki",
    "submission": "class Solution {\npublic:\n    #define pii pair<int, int> \n    #define f first\n    #define s second\n    int n, m;\n    void dfs(int yo, int pa, int dist, vector<int> &v, vector<vector<int>> &adj)\n    {\n        v[yo] = dist;\n        for (int &u: adj[yo])\n        {\n            if (u == pa) continue;\n            dfs(u, yo, dist+1, v, adj);\n        }\n    }\n    \n    pii lejos(int origen, vector<vector<int>> &adj)\n    {\n        vector<int> v(adj.size());\n        dfs(origen, -1, 0, v, adj);\n        pii ret = {0, 0};\n        for (int i = 0; i < adj.size(); i++)\n        {\n            if (v[i] > ret.s)\n            {\n                ret.f = i;\n                ret.s = v[i];\n            }\n        }\n        cout << origen << \": \";\n        for (int &x: v) cout << x << \" \";\n        cout << \":\" <<ret.f;\n        cout << '\\n' << '\\n';\n        \n        return ret;\n    }\n    \n    int diametro(vector<vector<int>> &adj)\n    {\n        pii c1 = lejos(0, adj);\n        pii c2 = lejos(c1.f, adj);\n        return c2.s;\n    }\n   \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) \n    {\n        n = edges1.size()+1, m = edges2.size()+1;\n        vector<vector<int>> adj1(n), adj2(m);\n        for (vector<int> &v: edges1)\n        {\n            adj1[v[0]].push_back(v[1]);\n            adj1[v[1]].push_back(v[0]);\n        }\n        \n        for (vector<int> &v: edges2)\n        {\n            adj2[v[0]].push_back(v[1]);\n            adj2[v[1]].push_back(v[0]);\n        }\n        \n        int c1 = diametro(adj1), c2 = diametro(adj2);\n        cout << c1 << \" \" << c2 << '\\n';\n        int m1 = (c1>>1) + (c1&1), m2 = (c2>>1) + (c2 &1);\n        //int m1 = mit(adj1), m2 = mit(adj2);\n        return max (max(c1, c2), m1 + m2 + 1);\n    }\n};",
    "submit_ts": 1719718410.0
}