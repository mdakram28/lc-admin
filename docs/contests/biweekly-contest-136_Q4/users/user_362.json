{
    "username": "ctnya_8135",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (auto &edge: edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        int maxdist = 0, maxidx = 0;\n        function<void(int, int, int)> dfs = [&](int cur, int prev, int dist) {\n            if (dist > maxdist) {\n                maxidx = cur;\n                maxdist = dist;\n            }\n            for (auto nxt: adj[cur]) {\n                if (nxt != prev) {\n                    dfs(nxt, cur, dist + 1 + (nxt % 2 == 0));\n                }\n            }\n        };\n\n        dfs(0, -1, 0);\n        int diameter[2] = {maxidx, 0};\n\n        maxdist = 0, maxidx = diameter[0];\n        dfs(diameter[0], -1, 0);\n        diameter[1] = maxidx;\n\n        vector<vector<int>> dist(2, vector<int>(n));\n\n        function<void(int, int, int)> dfs1 = [&](int cur, int prev, int end) {\n            for (auto nxt: adj[cur]) {\n                if (nxt != prev) {\n                    dist[end][nxt] = dist[end][cur] + 1 + (cur % 2 == 0);\n                    dfs1(nxt, cur, end);\n                }\n            }\n        };\n        dfs1(diameter[0], -1, 0);\n        dfs1(diameter[1], -1, 1);\n\n        for (int i = 0; i < n; i++) {\n            dist[0][i] = max(dist[0][i], dist[1][i]);\n        }\n        return dist[0];\n    }\n};",
    "submit_ts": "1722700022",
    "subm_id": "1343229329"
}