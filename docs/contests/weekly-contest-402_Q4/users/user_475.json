{
    "username": "Lucas_Li",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if (start > 0 and start < len(nums) - 1 and nums[start] > nums[start - 1] and nums[start] > nums[start + 1]) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(nums, left_child, start, mid)\n            self.build(nums, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def update(self, nums, idx, value, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if (start > 0 and start < len(nums) - 1 and nums[start] > nums[start - 1] and nums[start] > nums[start + 1]) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(nums, idx, value, left_child, start, mid)\n            else:\n                self.update(nums, idx, value, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, node, start, end, L, R):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_sum = self.query(left_child, start, mid, L, R)\n        right_sum = self.query(right_child, mid + 1, end, L, R)\n        return left_sum + right_sum\n\n\n\n\nclass Solution:\n    \n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        seg_tree = SegmentTree(nums)\n        result = []\n\n        for query in queries:\n            if query[0] == 2:\n                _, index, value = query\n                nums[index] = value\n                if index > 0:\n                    seg_tree.update(nums, index - 1, nums[index - 1], 0, 0, n - 1)\n                seg_tree.update(nums, index, value, 0, 0, n - 1)\n                if index < n - 1:\n                    seg_tree.update(nums, index + 1, nums[index + 1], 0, 0, n - 1)\n            elif query[0] == 1:\n                _, l, r = query\n                if l == r:\n                    result.append(0)\n                else:\n                    result.append(seg_tree.query(0, 0, n - 1, l + 1, r - 1))\n\n        return result\n        \n        ",
    "submit_ts": 1718507941.0
}