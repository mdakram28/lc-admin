{
    "username": "Sar2486P",
    "submission": "class Solution {\n    int M = (int)(Math.pow(10 , 7))  ; \n    public int minFlips(int[][] grid) {\n        int [][]mat = grid ; \n        \n        int m = mat.length , n = mat[0].length ; \n        \n        int[][] g = new int[((m-1)/2+1)*((n-1)/2+1)][2] ; \n        \n        for(int i = 0 ; i<=(m-1)/2 ; i++){\n            for(int j = 0 ; j<= (n-1)/2 ; j++){\n                int ct0=0 , ct1 = 0 ; \n                \n                if(mat[i][j]==0) ct0++ ;\n                else ct1++ ; \n                \n                if(i!= m-1-i){\n                    if(mat[m-1-i][j]==0) ct0++ ; \n                    else ct1++ ; \n                }\n                if(j!= n-1-j){\n                    if(mat[i][n-1-j]==0) ct0++ ; \n                    else ct1++ ; \n                }\n                if(i!=m-1-i && j!=n-1-j){\n                    if(mat[m-1-i][n-1-j]==0) ct0++ ; \n                    else ct1++ ; \n                }\n                int idx = i*((n-1)/2 +1)+ j ; \n                g[idx][0] = ct0 ; \n                g[idx][1] = ct1 ; \n            }\n            \n        }\n        // for(int[]arr:g) System.out.println(Arrays.toString(arr)) ; \n         \n        int [][]dp = new int[g.length+1][4] ;\n        for(int []arr:dp)Arrays.fill(arr , -1) ; \n        return helper(0 ,  0  , g , dp) ; \n        \n        \n    }\n    \n    private int helper(int idx , int mod , int[][]mat , int[][]dp){\n        int n = mat.length ; \n        if(idx==n) return (mod==0)? 0 : M ; \n        \n        if(dp[idx][mod]!=-1) return dp[idx][mod] ; \n        int min = M ; \n        // swap curr to 1\n        min = Math.min(min , mat[idx][0]+helper(idx+1 , (mod+mat[idx][0]+mat[idx][1])%4 , mat ,dp)) ; \n        \n        // swap to 0\n        min = Math.min(min , mat[idx][1]+ helper(idx+1 , mod , mat , dp)) ; \n        \n        dp[idx][mod] = min ; \n        return min ; \n    }\n}",
    "submit_ts": "1722699794",
    "subm_id": "1343222538"
}