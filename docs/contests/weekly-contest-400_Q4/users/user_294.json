{
    "username": "PankajBhanwala",
    "submission": "class SegmentTree {\n    vector<int> tree;\n    int n;\n    \npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n    \n    void build(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            // Leaf node will have a single element\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            // Recursively build the segment tree\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            // Internal node will have the AND of the two children\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    \n    int query(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n    \nprivate:\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            // range represented by a node is completely outside the given range\n            return INT_MAX; // Since we are doing AND, use INT_MAX (all bits 1) as identity value\n        }\n        if (L <= start && end <= R) {\n            // range represented by a node is completely inside the given range\n            return tree[node];\n        }\n        // range represented by a node is partially inside and partially outside the given range\n        int mid = (start + end) / 2;\n        int left_child = query(2 * node + 1, start, mid, L, R);\n        int right_child = query(2 * node + 2, mid + 1, end, L, R);\n        return left_child & right_child;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int minDiff = INT_MAX;\n        for(int i = 0; i < n; i++) {\n            int low = i, high = n - 1;\n            while(low <= high) {\n                int mid = low + (high - low) / 2;\n                int rangeAnd = st.query(i, mid);\n                if(abs(k - rangeAnd) < minDiff) {\n                    minDiff = abs(k - rangeAnd);\n                }\n                if(rangeAnd == k)\n                    return 0;\n                else if(rangeAnd > k)\n                    low = mid + 1;\n                else\n                    high = mid - 1;\n            }\n        }\n        return minDiff;\n    }\n};",
    "submit_ts": 1717298522.0
}