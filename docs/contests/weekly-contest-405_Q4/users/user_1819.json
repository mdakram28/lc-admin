{
    "username": "shuyang0",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        c = {}\n        group = {}\n        adj = [[] for _ in range(len(target))]\n        for i, word in enumerate(words):\n            if word[0] not in group:\n                group[word[0]] = {}\n            if len(word) not in group[word[0]]:\n                group[word[0]][len(word)] = set()\n            group[word[0]][len(word)].add(word)\n            if word in c:\n                c[word] = min(c[word], costs[i])\n            else:\n                c[word] = costs[i]\n\n        min_cost = [float(\"inf\")] * (len(target) + 1)\n        q = []\n        heapq.heappush(q, (0, 0))\n        while q:\n            cost, i = heapq.heappop(q)\n            i = -i\n            if i == len(target):\n                return min_cost[i]\n            if cost > min_cost[i]:\n                continue\n            if target[i] in group:\n                g = group[target[i]]\n                for length in g:\n                    j = i + length\n                    if j > len(target):\n                        continue\n                    s = target[i:i+length]\n                    if s in g[length]:\n                        new_cost = cost + c[s]\n                        if new_cost < min_cost[j]:\n                            min_cost[j] = new_cost\n                            heapq.heappush(q, (new_cost, -j))\n        return -1\n            \n\n        ",
    "submit_ts": "1720324607",
    "subm_id": "1312403648"
}