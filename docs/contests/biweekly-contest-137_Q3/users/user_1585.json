{
    "username": "\u4e5d\u5929\u72d7",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution\n{\npublic:\n    typedef long long ll;\n    // pair<ll, ll> findmax(vector<vector<int>> &board, set<ll> limitx, set<ll> limity)\n    // {\n    //     ll maxval = -1e12;\n    //     pair<ll, ll> ans;\n    //     for (ll i = 0; i < board.size(); i++)\n    //         if (limitx.count(i) == 0)\n    //             for (ll j = 0; j < board[i].size(); j++)\n    //                 if (limity.count(j) == 0)\n    //                 {\n    //                     if (board[i][j] > maxval)\n    //                     {\n    //                         maxval = board[i][j];\n    //                         ans = {i, j};\n    //                     }\n    //                 }\n    //     return ans;\n    // }\n    // pair<ll, ll> findmax_row(vector<vector<int>> &board, set<ll> limitx, set<ll> limity, ll row)\n    // {\n    //     ll maxval = -1e12;\n    //     pair<ll, ll> ans;\n    //     for (ll j = 0; j < board[row].size(); j++)\n    //         if (limity.count(j) == 0)\n    //             if (board[row][j] > maxval)\n    //             {\n    //                 maxval = board[row][j];\n    //                 ans = {row, j};\n    //             }\n    //     return ans;\n    // }\n    // pair<ll, ll> findmax_col(vector<vector<int>> &board, set<ll> limitx, set<ll> limity, ll col)\n    // {\n    //     ll maxval = -1e12;\n    //     pair<ll, ll> ans;\n    //     for (ll i = 0; i < board.size(); i++)\n    //         if (limitx.count(i) == 0)\n    //             if (board[i][col] > maxval)\n    //             {\n    //                 maxval = board[i][col];\n    //                 ans = {i, col};\n    //             }\n    //     return ans;\n    // }\n    // long long ans(vector<vector<int>> &board, set<ll> limitx, set<ll> limity, ll cnt)\n    // {\n    //     long long ans1 = 0, ans2 = 0, ans3_1 = 0, ans3_2 = 0;\n    //     if (cnt < 0)\n    //         return -1e12;\n    //     if (cnt == 0)\n    //         return 0;\n    //     pair<ll, ll> maxval = findmax(board, limitx, limity);\n    //     limitx.insert(maxval.first);\n    //     limity.insert(maxval.second);\n    //     ans1 = board[maxval.first][maxval.second] + ans(board, limitx, limity, cnt - 1);\n    //     if (cnt == 1)\n    //         return ans1;\n    //     pair<ll, ll> maxval1 = findmax_row(board, limitx, limity, maxval.first);\n    //     pair<ll, ll> maxval2 = findmax_col(board, limitx, limity, maxval.second);\n    //     limitx.insert(maxval1.first);\n    //     limity.insert(maxval1.second);\n    //     limitx.insert(maxval2.first);\n    //     limity.insert(maxval1.second);\n    //     ans2 = board[maxval1.first][maxval1.second] + board[maxval2.first][maxval2.second] + ans(board, limitx, limity, cnt - 2);\n    //     if (cnt == 2)\n    //         return max(ans1, ans2);\n    //     pair<ll, ll> maxval1_row = findmax_row(board, limitx, limity, maxval1.first);\n    //     pair<ll, ll> maxval1_col = findmax_col(board, limitx, limity, maxval1.second);\n    //     ans3_1 = (long long)board[maxval2.first][maxval2.second] + board[maxval1_row.first][maxval1_row.second] + board[maxval1_col.first][maxval1_col.second];\n    //     pair<ll, ll> maxval2_row = findmax_row(board, limitx, limity, maxval2.first);\n    //     pair<ll, ll> maxval2_col = findmax_col(board, limitx, limity, maxval2.second);\n    //     ans3_2 = (long long)board[maxval1.first][maxval1.second] + board[maxval2_row.first][maxval2_row.second] + board[maxval2_col.first][maxval2_col.second];\n    //     return max(ans1, max(ans2, max(ans3_1, ans3_2)));\n    // }\n    long long maximumValueSum(vector<vector<int>> &board)\n    {\n        // \u6309\u7167\u884c\u6700\u5927\u503c\u5bf9board\u884c\u8fdb\u884c\u6392\u5e8f\n        sort(board.begin(), board.end(), [](vector<int> &a, vector<int> &b)\n             { return *max_element(a.begin(), a.end()) > *max_element(b.begin(), b.end()); });\n        // \u4e8c\u7ef4vector transpose\n        vector<vector<int>> board_t(board[0].size(), vector<int>(board.size()));\n        for (int i = 0; i < board.size(); i++)\n            for (int j = 0; j < board[i].size(); j++)\n                board_t[j][i] = board[i][j];\n        // \u6309\u7167\u5217\u6700\u5927\u503c\u5bf9board_t\u884c\u8fdb\u884c\u6392\u5e8f\n        sort(board_t.begin(), board_t.end(), [](vector<int> &a, vector<int> &b)\n             { return *max_element(a.begin(), a.end()) > *max_element(b.begin(), b.end()); });\n        // \u5728\u5de6\u4e0a\u89d29x9\u7684\u533a\u57df\u627e\u52303\u4e2a\u884c\u5217\u4e0d\u540c\u7684\u6570\u5b57\u548c\u7684\u6700\u5927\u503c\n        long long ret = -1e18;\n        for (int i = 0; i < min(9, (int)board_t.size()); i++)\n            for (int j = 0; j < min(9, (int)board_t[0].size()); j++)\n                for (int k = 0; k < min(9, (int)board_t.size()); k++)\n                    if (k != i)\n                        for (int l = 0; l < min(9, (int)board_t[0].size()); l++)\n                            if (l != j)\n                                for (int m = 0; m < min(9, (int)board_t.size()); m++)\n                                    if (m != i && m != k)\n                                        for (int n = 0; n < min(9, (int)board_t[0].size()); n++)\n                                            if (j != n && l != n)\n                                                ret = max(ret, (long long)board_t[i][j] + board_t[k][l] + board_t[m][n]);\n        return ret;\n    }\n};",
    "submit_ts": "1723909254",
    "subm_id": "556335286"
}