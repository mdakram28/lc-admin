{
    "username": "jiu-ren-36",
    "submission": "class Solution {\npublic:\n    vector<int> A;\n    vector<int> lazy;\n    void push_down(int cur, int l, int r) {\n        int mid = (l + r) / 2;\n        // cout << cur << '\\n';\n        lazy[cur*2] += lazy[cur];\n        lazy[cur*2+1] += lazy[cur];\n        A[cur*2] += (mid - l + 1) * lazy[cur];\n        A[cur*2 + 1] += (r - mid) * lazy[cur];\n        A[cur*2] = max(0, A[cur*2]);\n        A[cur*2+1] = max(0, A[cur*2+1]);\n        lazy[cur] = 0;\n    }\n    void bilud(int cur, int l, int r) {\n        if(l == r) {\n            A[cur] = 1;\n            return;\n        }\n        int mid = (l + r) / 2;\n        bilud(cur*2, l, mid);\n        bilud(cur*2+1, mid+1, r);\n        A[cur] = A[cur*2] + A[cur*2+1];\n    }\n    void update(int cur, int l, int r, int ul, int ur, int val) {\n        if(l >= ul && r <= ur) {\n            A[cur] += (r - l + 1) * val;\n            A[cur] = max(0, A[cur]);\n            lazy[cur] += val;\n            return;\n        }\n        int mid = (l + r) / 2;\n        push_down(cur, l, r);\n        if(mid >= ul) {\n            update(cur*2, l, mid, ul, ur, val);\n        }\n        if(mid + 1 <= ur) {\n            update(cur*2+1, mid + 1, r, ul, ur, val);\n        }\n        A[cur] = A[cur*2] + A[cur*2+1];\n    }\n    int query(int cur, int l, int r, int ul, int ur) {\n        if(l >= ul && r <= ur) {\n            return A[cur];\n        }\n        int mid = (l + r) / 2;\n        push_down(cur, l, r);\n        int ret = 0;\n        if(mid >= ul) {\n            ret += query(cur*2, l, mid, ul, ur);\n        }\n        if(mid + 1 <= ur) {\n            ret += query(cur*2+1, mid + 1, r, ul, ur);\n        }\n        A[cur] = A[cur*2] + A[cur*2+1];\n        return ret;\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int m = queries.size();\n        vector<int> res(m);\n        vector<int> g[n+5];\n        A = vector<int>(n * 4 +50, 0);\n        lazy = vector<int>(n * 4 +50, 0);\n        bilud(1, 0, n - 2);\n        for(int i = 0; i < n - 1; i++) {\n            g[i].push_back(i + 1);\n        }\n        for(int j = 0; j < m; j++ ) {\n            int l = queries[j][0], r = queries[j][1] - 1;\n            int ret = query(1, 0, n-2, l, r);\n            if(ret == 0) {\n                res[j] = res[j - 1];\n                continue;\n            }\n            update(1, 0, n-2, l, r, -1);\n            update(1, 0, n-2, l, l, 1);\n            res[j] = A[1];  \n        }\n        return res;\n    }\n};",
    "submit_ts": "1722741454",
    "subm_id": "552338318"
}