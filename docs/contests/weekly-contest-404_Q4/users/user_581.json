{
    "username": "Satyam1782",
    "submission": "class Solution {\n    \n    void dfs(int u,int p,vector<int> adj[],vector<int> &level){\n        \n        for(auto v:adj[u]){\n            if(v!=p){\n                dfs(v,u,adj,level);\n                // cout<<u<<\" \"<<v<<endl;\n                level[u]=max(level[u],1+level[v]);   \n            }\n            \n        }\n        \n    }\n    \n    void reroot(int v,int u,vector<int> adj[],vector<int> &level){\n        \n        level[u]=0;\n        level[v]=0;\n        for(auto it:adj[u]){\n            \n            if(it!=v){\n                level[u]=max(level[u],1+level[it]);\n            }\n        }\n        \n        for(auto it:adj[v]){\n            level[v]=max(level[v],1+level[it]);\n        }\n    }\n    \n    void dfs1(int u,int p,vector<int> adj[],vector<int> &level,int &mn){\n        mn=min(mn,level[u]);\n        // cout<<u<<\" \"<<level[u]<<endl;\n        for(auto v:adj[u]){\n            if(v!=p){\n                reroot(v,u,adj,level);\n                dfs1(v,u,adj,level,mn);\n                reroot(u,v,adj,level);      \n            }\n            \n        }\n    }\n    \n    \nvoid dfs2(int u,int p,vector<int> adj[],vector<int> &level)\n{\n\tif(p!=-1)\n\tlevel[u]=level[p]+1;\n \n\tfor(auto v:adj[u])\n\t{\n\t\tif(v!=p)\n\t\t{\n\t\t\tdfs2(v,u,adj,level);\n\t\t}\n\t}\n}\n\n    \n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1;\n        int m=edges2.size()+1;\n        \n        vector<int> adj1[n],adj2[m];\n        vector<int> level1(n),level2(m);\n        \n        for(auto it:edges1){\n            int u=it[0];\n            int v=it[1];\n            \n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        \n        for(auto it:edges2){\n            int u=it[0];\n            int v=it[1];\n            \n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        \n        \n        int mn1=n;\n        int mn2=m;\n        dfs(0,-1,adj1,level1);\n        dfs1(0,-1,adj1,level1,mn1);\n        \n        dfs(0,-1,adj2,level2);\n        dfs1(0,-1,adj2,level2,mn2);\n        \n        \n        fill(level1.begin(),level1.end(),0);\n        fill(level2.begin(),level2.end(),0);\n        \n        int meet=mn1+mn2+1;\n        \n        dfs2(0,-1,adj1,level1);\n \n        int maxi=0;\n\n        for(int i=0;i<n;i++)\n        {\n            if(level1[i]>level1[maxi])\n            {\n                maxi=i;\n            }\n        }\n\n        fill(level1.begin(),level1.end(),0);\n\n        dfs2(maxi,-1,adj1,level1);\n\n        for(int i=0;i<n;i++)\n        {\n            if(level1[i]>level1[maxi])\n            {\n                maxi=i;\n            }\n        }\n        \n        int d1=level1[maxi];\n        \n        \n        dfs2(0,-1,adj2,level2);\n \n        maxi=0;\n\n        for(int i=0;i<m;i++)\n        {\n            if(level2[i]>level2[maxi])\n            {\n                maxi=i;\n            }\n        }\n\n        fill(level2.begin(),level2.end(),0);\n\n        dfs2(maxi,-1,adj2,level2);\n\n        for(int i=0;i<m;i++)\n        {\n            if(level2[i]>level2[maxi])\n            {\n                maxi=i;\n            }\n        }\n        \n        int d2=level2[maxi];\n        \n        return max(meet,max(d1,d2));\n        \n        \n        \n    }\n};",
    "submit_ts": "1719719177",
    "subm_id": "1304435552"
}