{
    "username": "truongphamminh17",
    "submission": "/**\n * @param {number[]} nums\n * @param {number[]} target\n * @return {number}\n */\nvar minimumOperations = function (nums, target) {\n  class SparseTable {\n    constructor(arr) {\n      this.arr = arr;\n      this.n = arr.length;\n      this.log = [];\n      this.st = [];\n\n      this.buildLog();\n      this.buildSparseTable();\n    }\n\n    buildLog() {\n      this.log[1] = 0;\n      for (let i = 2; i <= this.n; i++) {\n        this.log[i] = this.log[Math.floor(i / 2)] + 1;\n      }\n    }\n\n    buildSparseTable() {\n      const K = this.log[this.n] + 1;\n      this.st = new Array(this.n).fill(0).map(() => new Array(K).fill(0));\n\n      for (let i = 0; i < this.n; i++) {\n        this.st[i][0] = i;\n      }\n\n      for (let j = 1; j <= this.log[this.n]; j++) {\n        for (let i = 0; i + (1 << j) <= this.n; i++) {\n          const left = this.st[i][j - 1];\n          const right = this.st[i + (1 << (j - 1))][j - 1];\n          this.st[i][j] = (this.arr[left] < this.arr[right]) ? left : right;\n        }\n      }\n    }\n\n    query(left, right) {\n      const j = this.log[right - left + 1];\n      const leftIndex = this.st[left][j];\n      const rightIndex = this.st[right - (1 << j) + 1][j];\n      return (this.arr[leftIndex] < this.arr[rightIndex]) ? leftIndex : rightIndex;\n    }\n  }\n\n  const diff = []\n  let result = 0;\n  for (let i = 0; i < nums.length; i++) {\n    diff.push(target[i] - nums[i])\n  }\n  let table = new SparseTable(diff)\n\n  function findRange(a, b, prevFind) {\n    if (a > b) return;\n    const minIndex = table.query(a, b)\n    const minValue = diff[minIndex]\n    const diffValue = minValue - prevFind;\n    if (diffValue > 0) {\n      result += diffValue;\n      findRange(a, minIndex - 1, prevFind + diffValue)\n      findRange(minIndex + 1, b, prevFind + diffValue)\n    } else {\n      findRange(a, minIndex - 1, prevFind)\n      findRange(minIndex + 1, b, prevFind)\n    }\n  }\n\n  findRange(0, nums.length - 1, 0)\n\n\n  for (let i = 0; i < nums.length; i++) {\n    diff[i] = -diff[i]\n  }\n\n  table = new SparseTable(diff)\n  findRange(0, nums.length - 1, 0)\n\n  return result\n};",
    "submit_ts": "1721532218",
    "subm_id": "1327980575"
}