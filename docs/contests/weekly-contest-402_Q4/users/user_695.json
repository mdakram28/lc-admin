{
    "username": "wanderingCicada",
    "submission": "class TreeNode:\n    def __init__(self, peaks, start, end):\n        self.start = start\n        self.end = end\n        self.middle = (start + end) // 2\n        self.count = 0\n        if start == end:\n            self.count = peaks[start]\n        else:\n            self.left = TreeNode(peaks, start, self.middle)\n            self.right = TreeNode(peaks, self.middle + 1, end)\n            self.count = self.left.count + self.right.count\n        \n    def query(self, start, end):\n        if start == self.start and end == self.end:\n            return self.count\n        if start > self.middle:\n            return self.right.query(start, end)\n        if end <= self.middle:\n            return self.left.query(start, end)\n        return self.left.query(start, self.middle) + self.right.query(self.middle + 1, end)\n    \n    def update(self, index, val):\n        if self.start == self.end:\n            self.count = val\n        elif index <= self.middle:\n            self.left.update(index, val)\n            self.count = self.left.count + self.right.count\n        else:\n            self.right.update(index, val)\n            self.count = self.left.count + self.right.count\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = [0] * len(nums)\n        for index, num in enumerate(nums):\n            if index > 0 and index < len(nums) - 1 and num > nums[index - 1] and num > nums[index + 1]:\n                peaks[index] = 1\n        root = TreeNode(peaks, 0, len(nums) - 1)\n        print(peaks)\n        ans = []\n        for (queryType, val1, val2) in queries:\n            if queryType == 1:\n                val1 += 1\n                val2 -= 1\n                if val1 <= val2:\n                    ans.append(root.query(val1, val2))\n                else:\n                    ans.append(0)\n            else:\n                nums[val1] = val2\n                for index in range(val1 - 1, val1 + 2):\n                    if index > 0 and index < len(nums) - 1:\n                        if nums[index] > nums[index - 1] and nums[index] > nums[index + 1]:\n                            peaks[index] = 1\n                        else:\n                            peaks[index] = 0\n                        root.update(index, peaks[index])\n        return ans\n        ",
    "submit_ts": 1718508271.0
}