{
    "username": "hiteshgup09",
    "submission": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public int waysToReachStair(int k) {\n        // Memoization map to store results of subproblems\n        Map<String, Long> memo = new HashMap<>();\n        // Start recursion from stair 1 and jump 0\n        return (int)waysToReachStairHelper(1, 0, k, true, memo);\n    }\n    \n    private long waysToReachStairHelper(int currentStair, int currentJump, int targetStair, boolean canGoDown, Map<String, Long> memo) {\n        // Base case: if currentStair equals targetStair\n        long totalWays = 0;\n        if (currentStair == targetStair) {\n            totalWays= 1;\n        }\n        \n        // Base case: if currentStair goes beyond reasonable bounds\n        if (currentStair < 0 || currentStair > targetStair + 100) {\n            return totalWays;\n        }\n        \n        // Create a unique key for memoization\n        String key = currentStair + \",\" + currentJump + \",\" + canGoDown;\n        if (memo.containsKey(key)) {\n            return memo.get(key);\n        }\n        \n        // Recursive case:\n        \n        \n        // Option 1: Go down one stair (if allowed)\n        if (canGoDown && currentStair > 0) {\n            totalWays += waysToReachStairHelper(currentStair - 1, currentJump, targetStair, false, memo);\n        }\n        \n        // Option 2: Go up 2^currentJump stairs\n        totalWays += waysToReachStairHelper(currentStair + (1 << currentJump), currentJump + 1, targetStair, true, memo);\n        \n        // Memoize the result\n        memo.put(key, totalWays);\n        \n        return totalWays;\n    }\n}\n",
    "submit_ts": "1716087108",
    "subm_id": "1261773275"
}