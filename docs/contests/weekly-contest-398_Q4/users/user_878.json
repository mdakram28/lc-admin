{
    "username": "YanJF",
    "submission": "import java.math.*;\nclass Solution {\n    public int waysToReachStair(int k) {\n        \n        int start = 1;\n        \n        if (k == 0) return 2;\n        if (k == 1) return 4;\n        if (k == 2) return 4;\n        if (k == 4) return 2;\n        \n        int idx = 0;\n        while (start < k) {\n            start += (1 << idx);\n            idx++;\n        }\n        int diff = start - k;\n        if (diff > idx + 1) return 0;\n        \n        return binomial(idx + 1, diff);\n        \n        \n    }\n    int binomial(final int N, final int K) {\n        BigInteger ret = BigInteger.ONE;\n        for (int k = 0; k < K; k++) {\n            ret = ret.multiply(BigInteger.valueOf(N-k))\n                     .divide(BigInteger.valueOf(k+1));\n        }\n        return ret.intValue();\n    }\n    // 1 -> 0 -> 1 -> 3 -> 2\n    // 1 -> 2 -> 4\n    // 1 -> 2 -> 4 -> 8\n}",
    "submit_ts": "1716088891",
    "subm_id": "1261827005"
}