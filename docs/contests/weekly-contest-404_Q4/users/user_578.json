{
    "username": "CoffeeRex",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int>> adj1(edges1.size() + 1, vector<int>(0));\n        vector<vector<int>> adj2(edges2.size() + 1, vector<int>(0));\n        \n        for (int i = 0; i < edges1.size(); i++) {\n            adj1[edges1[i][0]].push_back(edges1[i][1]);\n            adj1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        \n        for (int i = 0; i < edges2.size(); i++) {\n            adj2[edges2[i][0]].push_back(edges2[i][1]);\n            adj2[edges2[i][1]].push_back(edges2[i][0]);\n        }\n        \n        int len1 = -1;\n        \n        \n        queue<int> q1;\n        \n        \n        vector<int> visited1(edges1.size() + 1, 0);\n        \n        q1.push(0);\n        visited1[0] = 1;\n        int last1;\n        \n        while (!q1.empty()) {\n            //len1++;\n            int n = q1.size();\n            //cout << \"n \" << n << endl;\n            \n            for (int i = 0; i < n; i++) {\n                //cout << \"i made it to second for loop\" << endl;\n                int current = q1.front();\n                q1.pop();\n                \n                //cout << \"adj1[current].size() \" << adj1[current].size() << endl;\n                \n                for (int j = 0; j < adj1[current].size(); j++) {\n                    //cout << \"adj1[current][j] \" << adj1[current][j] << endl;\n                    if (visited1[adj1[current][j]] == 0) {\n                        q1.push(adj1[current][j]);\n                        //cout << \"check 1\" << endl;\n                        visited1[adj1[current][j]] = 1;\n                        //cout<< \"check 2 \" << endl;\n                    }\n                }\n                \n                if (q1.empty()) last1 = current;\n                \n                //cout << \"made it out \" << endl;\n            }\n        }\n        \n        cout << \"THIS IS IMPORTANT LAST1 \" << last1 << endl;\n        \n        queue<int> second1;\n        second1.push(last1);\n        vector<int> visited1Again(edges1.size() + 1, 0);\n        visited1Again[last1] = 1;\n        \n        while (!second1.empty()) {\n            //cout << \"second while\" << endl;\n            len1++;\n            \n            int n = second1.size();\n            \n            for (int i = 0; i < n; i++) {\n                //cout << \"second for\" << endl;\n                int current = second1.front();\n                second1.pop();\n                \n                //cout << \"current \" << current << endl;\n                //cout << \"adj1[current].size() \" << adj1[current].size() << endl;\n                \n                for (int j = 0; j < adj1[current].size(); j++) {\n                    if (visited1Again[adj1[current][j]] == 0) {\n                        second1.push(adj1[current][j]);\n                        visited1Again[adj1[current][j]] = 1;\n                    }\n                }\n            }\n        }\n        \n        queue<int> q2;\n        int len2 = -1;\n        vector<int> visited2(edges2.size() + 1, 0);\n        \n        q2.push(0);\n        visited2[0] = 1;\n        int last2;\n        \n        while (!q2.empty()) {\n            //len1++;\n            int n = q2.size();\n            //cout << \"n \" << n << endl;\n            \n            for (int i = 0; i < n; i++) {\n                //cout << \"i made it to second for loop\" << endl;\n                int current = q2.front();\n                q2.pop();\n                \n                //cout << \"adj1[current].size() \" << adj1[current].size() << endl;\n                \n                for (int j = 0; j < adj2[current].size(); j++) {\n                    //cout << \"adj1[current][j] \" << adj1[current][j] << endl;\n                    if (visited2[adj2[current][j]] == 0) {\n                        q2.push(adj2[current][j]);\n                        //cout << \"check 1\" << endl;\n                        visited2[adj2[current][j]] = 1;\n                        //cout<< \"check 2 \" << endl;\n                    }\n                }\n                \n                if (q2.empty()) last2 = current;\n                \n                //cout << \"made it out \" << endl;\n            }\n        }\n        \n        cout << \"THIS IS IMPORTANT last2 \" << last2 << endl;\n        \n        queue<int> second2;\n        second2.push(last2);\n        vector<int> visited2Again(edges2.size() + 1, 0);\n        visited2Again[last2] = 1;\n        \n        while (!second2.empty()) {\n            //cout << \"second while\" << endl;\n            len2++;\n            \n            int n = second2.size();\n            \n            for (int i = 0; i < n; i++) {\n                //cout << \"second for\" << endl;\n                int current = second2.front();\n                second2.pop();\n                \n                //cout << \"current \" << current << endl;\n                //cout << \"adj2[current].size() \" << adj2[current].size() << endl;\n                \n                for (int j = 0; j < adj2[current].size(); j++) {\n                    if (visited2Again[adj2[current][j]] == 0) {\n                        second2.push(adj2[current][j]);\n                        visited2Again[adj2[current][j]] = 1;\n                    }\n                }\n            }\n        }\n        \n        cout << \"len1 \" << len1 << \" len2 \" << len2 << endl;\n        \n        int val = len1/2 + len2/2 + (len1 % 2) + (len2 % 2) + 1;\n        \n        val = max(len1, val);\n        val = max(len2, val);\n        \n        return val;\n    }\n};",
    "submit_ts": "1719719476",
    "subm_id": "1304442896"
}