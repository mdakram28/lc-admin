{
    "username": "SimpleSheep03",
    "submission": "#include <ext/pb_ds/assoc_container.hpp>\nusing namespace __gnu_pbds;\ntemplate<typename T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, \ntree_order_statistics_node_update>;\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& queries) {\n        int n = v.size();\n        int q = queries.size();\n        ordered_set<int> peaks;\n        for(int i = 1 ; i < n - 1 ; i ++){\n            if(v[i] > v[i - 1] && v[i] > v[i + 1]){\n                peaks.insert(i);\n            }\n        }\n        vector<int> ans;\n        for(int i = 0 ; i < q ; i ++){\n            int type = queries[i][0];\n            if(type == 1){\n                int l = queries[i][1] , r = queries[i][2];\n                if(l == r){\n                    ans.push_back(0);\n                }\n                else{\n                    ans.push_back(peaks.order_of_key(r) - peaks.order_of_key(l + 1));\n                }\n            }\n            else{\n                int ind = queries[i][1] , x = queries[i][2];\n                if(ind > 0 && ind < n - 1){\n                    if(v[ind] > v[ind - 1] && v[ind] > v[ind + 1]){\n                        peaks.erase(ind);\n                    }\n                }\n                if(ind > 1 && ind < n){\n                    if(v[ind - 1] > v[ind - 2] && v[ind - 1] > v[ind]){\n                        peaks.erase(ind - 1);\n                    }\n                }\n                if(ind >= 0 && ind < n - 2){\n                    if(v[ind + 1] > v[ind + 2] && v[ind + 1] > v[ind]){\n                        peaks.erase(ind + 1);\n                    }\n                }\n                v[ind] = x;\n                if(ind > 0 && ind < n - 1){\n                    if(v[ind] > v[ind - 1] && v[ind] > v[ind + 1]){\n                        peaks.insert(ind);\n                    }\n                }\n                if(ind > 1 && ind < n){\n                    if(v[ind - 1] > v[ind - 2] && v[ind - 1] > v[ind]){\n                        peaks.insert(ind - 1);\n                    }\n                }\n                if(ind >= 0 && ind < n - 2){\n                    if(v[ind + 1] > v[ind + 2] && v[ind + 1] > v[ind]){\n                        peaks.insert(ind + 1);\n                    }\n                }\n                // cout << i << \" -> \" << endl;\n                // for(auto &c : peaks){\n                //     cout << c << \" \";\n                // }\n                // cout << endl;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507617.0
}