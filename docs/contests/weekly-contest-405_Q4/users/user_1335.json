{
    "username": "priyanshuraj35",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> links;\n    int price;\n    \n    TrieNode() : price(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->links.count(c)) {\n                node->links[c] = new TrieNode();\n            }\n            node = node->links[c];\n        }\n        node->price = min(node->price, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n\n\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) \n            {\n                if (!node->links.count(target[j])) break;\n\n                node = node->links[target[j]];\n                if (node->price != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->price);\n                }\n\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323951",
    "subm_id": "1312388011"
}