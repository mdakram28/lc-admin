{
    "username": "ToTea",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        // [xs, xe] to [ys, ye]\n        map<tuple<int,int,int,int>, int> dp;\n        auto minSize = [&](int xs, int xe, int ys, int ye) {\n            auto [it, ok] = dp.insert({{xs, xe, ys, ye}, 0});\n            if (!ok) return it->second;\n            int x1 = INT_MAX, x2 = 0, y1 = INT_MAX, y2 = 0;\n            for (int i = ys; i <= ye; ++i) {\n                for (int j = xs; j <= xe; ++j) {\n                    if (grid[i][j] == 1) {\n                        x1 = min(x1, j);\n                        x2 = max(x2, j);\n                        y1 = min(y1, i);\n                        y2 = max(y2, i);\n                    }\n                }\n            }\n            if (x1 != INT_MAX && y1 != INT_MAX) it->second = (x2 - x1 + 1) * (y2 - y1 + 1);\n            return it->second;\n        };\n\n        /*\n        abc  a  ab  aa  ab  ab\n             b  cb  bc  cc  ac\n             c\n        */\n        int minSum = INT_MAX;\n        for (int i = 0; i < grid.size(); ++i) {\n            int aCost = minSize(0, grid[0].size()-1, 0, i);\n            for (int j = i+1; j < grid.size(); ++j) {\n                int bCost = minSize(0, grid[0].size()-1, i+1, j);\n                int cCost = minSize(0, grid[0].size()-1, j+1, grid.size()-1);\n                minSum = min(minSum, aCost + bCost + cCost);\n            }\n            for (int j = 0; j < grid[0].size(); ++j) {\n                int bCost = minSize(0, j, i+1, grid.size()-1);\n                int cCost = minSize(j+1, grid[0].size()-1, i+1, grid.size()-1);\n                minSum = min(minSum, aCost + bCost + cCost);\n            }\n        }\n        for (int i = 0; i < grid[0].size(); ++i) {\n            int aCost = minSize(0, i, 0, grid.size()-1);\n            for (int j = 0; j < grid.size(); ++j) {\n                int bCost = minSize(i+1, grid[0].size()-1, 0, j);\n                int cCost = minSize(i+1, grid[0].size()-1, j+1, grid.size()-1);\n                minSum = min(minSum, aCost + bCost + cCost);\n            }\n            for (int j = i+1; j < grid[0].size(); ++j) {\n                int bCost = minSize(i+1, j, 0, grid.size()-1);\n                int cCost = minSize(j+1, grid[0].size()-1, 0, grid.size()-1);\n                minSum = min(minSum, aCost + bCost + cCost);\n            }\n        }\n        for (int i = 0; i < grid.size(); ++i) {\n            for (int j = 0; j < grid[0].size(); ++j) {\n                int aCost = minSize(0, j, 0, i);\n                int bCost = minSize(j+1, grid[0].size()-1, 0, i);\n                int cCost = minSize(0, grid[0].size()-1, i+1, grid.size()-1);\n                minSum = min(minSum, aCost + bCost + cCost);\n                bCost = minSize(j+1, grid[0].size()-1, 0, grid.size()-1);\n                cCost = minSize(0, j, i+1, grid.size()-1);\n                minSum = min(minSum, aCost + bCost + cCost);\n            }\n        }\n        return minSum;\n    }\n};",
    "submit_ts": 1719113736.0
}