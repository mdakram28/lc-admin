{
    "username": "c337134154",
    "submission": "class Solution {\npublic:\n    int bool_array_to_int(const std::vector<int>& bool_array, int d) {\n        int result = 0;\n        for (int i = 0; i < bool_array.size(); ++i) {\n            result += (bool_array[i] / d) * (1 << i);\n        }\n        return result;\n    }\n\n    long long countSubarrays(vector<int>& nums, int k) {\n                int n = nums.size();\n        long long ans = 0;\n        int r = -1, l = -1;\n        int cur = (1 << 30) - 1;\n        std::vector<int> bits(31, 0);\n\n        for (int i = 0; i < n; ++i) {\n            if ((nums[i] & k) != k) {\n                r = l = i;\n                cur = (1 << 30) - 1;\n                bits.assign(31, 0);\n                continue;\n            }\n\n            cur &= nums[i];\n            for (int j = 0; j < 31; ++j) {\n                bits[j] += (nums[i] >> j) & 1;\n            }\n\n            if (cur == k) {\n                while (r + 1 < i) {\n                    for (int j = 0; j < 31; ++j) {\n                        bits[j] -= ((nums[r + 1] >> j) & 1);\n                    }\n                    if (bool_array_to_int(bits, i - r - 1) != k) {\n                        for (int j = 0; j < 31; ++j) {\n                            bits[j] += ((nums[r + 1] >> j) & 1);\n                        }\n                        break;\n                    } else {\n                        ++r;\n                    }\n                }\n                ans += r - l + 1;\n            }\n        }\n        return ans;\n    }\n\n};",
    "submit_ts": "1720280973",
    "subm_id": "1311808645"
}