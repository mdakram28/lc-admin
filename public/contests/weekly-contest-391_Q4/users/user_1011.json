{
    "username": "AdamEvianYoung",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        sp = [0] * n\n        dp = [0] * n\n        for i,p in enumerate(points) :\n            sp[i] = (sum(p), p)\n            dp[i] = (p[0] - p[1], p)\n        # cand 0: remove max sp:\n        tr_sp = max(sp)\n        # print('tr_sp: ', tr_sp)\n        tr_dp = (tr_sp[1][0] - tr_sp[1][1], tr_sp[1])\n        # print('max: ', max(sp))\n        sp.remove(tr_sp)\n        dp.remove(tr_dp)\n        cand0 = max(abs( max(sp)[0] - min(sp)[0] ), abs( max(dp)[0] - min(dp)[0] ))\n        sp.append(tr_sp)\n        dp.append(tr_dp)\n        \n        tr_sp = min(sp)\n        tr_dp = (tr_sp[1][0] - tr_sp[1][1], tr_sp[1])\n        sp.remove(tr_sp)\n        dp.remove(tr_dp)\n        cand1 = max(abs( max(sp)[0] - min(sp)[0] ), abs( max(dp)[0] - min(dp)[0] ))\n        sp.append(tr_sp)\n        dp.append(tr_dp)\n        \n        tr_dp = max(dp)\n        tr_sp = (tr_dp[1][0] + tr_dp[1][1], tr_dp[1])\n        sp.remove(tr_sp)\n        dp.remove(tr_dp)\n        cand2 = max(abs( max(sp)[0] - min(sp)[0] ), abs( max(dp)[0] - min(dp)[0] ))\n        sp.append(tr_sp)\n        dp.append(tr_dp)\n        \n        tr_dp = min(dp)\n        tr_sp = (tr_dp[1][0] + tr_dp[1][1], tr_dp[1])\n        sp.remove(tr_sp)\n        dp.remove(tr_dp)\n        cand3 = max(abs( max(sp)[0] - min(sp)[0] ), abs( max(dp)[0] - min(dp)[0] ))\n        sp.append(tr_sp)\n        dp.append(tr_dp)\n        return min(cand0, cand1, cand2, cand3)\n        "
}