{
    "username": "amanlearnscode",
    "submission": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner = function (X, Y, circles) {\n    return helper(X, Y, circles);\n};\n\nvar helper = function (gridWidth, gridHeight, circleObstacles) {\n    const numCircles = circleObstacles.length;\n    const graph = Array.from({ length: numCircles + 4 }, () => []);\n\n    for (let i = 0; i < numCircles; i++) {\n\n        if (circleObstacles[i][0] <= circleObstacles[i][2]) {\n\n            graph[numCircles].push(i);\n            graph[i].push(numCircles);\n        }\n        if (gridWidth - circleObstacles[i][0] <= circleObstacles[i][2]) {\n\n            graph[numCircles + 2].push(i);\n            graph[i].push(numCircles + 2);\n        }\n        if (circleObstacles[i][1] <= circleObstacles[i][2]) {\n\n            graph[numCircles + 1].push(i);\n            graph[i].push(numCircles + 1);\n        }\n        if (gridHeight - circleObstacles[i][1] <= circleObstacles[i][2]) {\n\n            graph[numCircles + 3].push(i);\n            graph[i].push(numCircles + 3);\n        }\n        for (let j = i + 1; j < numCircles; ++j) {\n\n            const distanceBetweenCenters = Math.sqrt(Math.pow(circleObstacles[i][0] - circleObstacles[j][0], 2) + Math.pow(circleObstacles[i][1] - circleObstacles[j][1], 2));\n            const radiusSum = circleObstacles[i][2] + circleObstacles[j][2];\n\n            if (radiusSum >= distanceBetweenCenters) {\n                graph[i].push(j);\n                graph[j].push(i);\n            }\n        }\n    }\n\n    let isPathBlocked = 0;\n    isPathBlocked = Math.max(isPathBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n    isPathBlocked = Math.max(isPathBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n\n    return isPathBlocked === 0;\n}\n\nvar bfs = function (graph, start, target1, target2, nodeCount) {\n    const queue = [];\n    const visited = Array(nodeCount + 4).fill(false);\n\n    queue.push(start);\n    visited[start] = true;\n\n    while (queue.length > 0) {\n        const currentNode = queue.shift();\n        for (const neighbor of graph[currentNode]) {\n            if (!visited[neighbor]) {\n                queue.push(neighbor);\n                visited[neighbor] = true;\n            }\n        }\n    }\n\n    return (visited[target1] || visited[target2] ? 1 : 0);\n}",
    "submit_ts": "1722138558",
    "subm_id": "1335793808"
}