{
    "username": "jszqlew",
    "submission": "typedef long long ll;\nll square(int x) {\n    return ll(x) * x;\n}\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> adj(n + 4);\n        for (int i=0; i<n; ++i) {\n            int a = circles[i][0], b = circles[i][1], c = circles[i][2];\n            if (b - c >= Y) continue;\n            if (b + c <= 0) continue;\n            if (a - c >= X) continue;\n            if (a + c <= 0) continue;\n            for (int j=i+1; j<n; ++j) {\n                int d = circles[j][0], e = circles[j][1], f = circles[j][2];\n                // if (i == 0 && j == 2) {\n                //     cout << a << ' ' << b << ' ' << c << endl;\n                //     cout << d << ' ' << e << ' ' << f << endl;\n                // }\n                if (square(a - d) + square(b - e) <= square(c + f)) {\n                    adj[i + 4].push_back(j + 4);\n                    adj[j + 4].push_back(i + 4);\n                // if (i == 0 && j == 2) {\n                //     cout << \"here\" << endl;\n                // }\n                }\n            }\n            //top \n            if (b + c >= Y) {\n                adj[0].push_back(i + 4);\n                adj[i + 4].push_back(0);\n            }\n            // bottom\n            if (b - c <= 0) {\n                adj[1].push_back(i + 4);\n                adj[i + 4].push_back(1);\n            }\n            // left\n            if (a - c <= 0) {\n                adj[2].push_back(i + 4);\n                adj[i + 4].push_back(2);\n            }\n            // right\n            if(a + c >= X) {\n                adj[3].push_back(i + 4);\n                adj[i + 4].push_back(3);\n            }\n        }\n        // path from 0 or 2 to 1 or 3\n        vector<bool> vis(n + 4);\n        function<void(int)> dfs= [&](int u) {\n            if (vis[u]) return;\n            vis[u] = true;\n            for (int v : adj[u]) {\n                if (!vis[v]) {\n                    dfs(v);\n                }\n            }\n        };\n        dfs(0);\n        dfs(2);\n        // for(int i=0; i<n + 4; ++i) {\n        //     cout << i << \": \";\n        //     for (int v : adj[i]) cout << v << ' ';\n        //     cout << endl;\n        // }\n        return !(vis[1] || vis[3]);\n    }\n};",
    "submit_ts": "1722138034",
    "subm_id": "1335780346"
}