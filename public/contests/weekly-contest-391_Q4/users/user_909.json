{
    "username": "Roshanbangar",
    "submission": "class Solution {\npublic:\n    int findMin(vector<pair<long long, long long>>&diff, vector<pair<long long, long long>>&sum, long long i, long long minDistance) {\n        #define int long long\n        int n = diff.size();\n        // int minDistance = 1e18;\n        /* last of diff */\n        // int i = diff[n - 1].second;\n        int i1 = 0, i2 = n - 1, j1 = 0, j2 = n - 1;\n        if(diff[i1].second == i) {\n            i1 = i1 + 1;\n        }\n        if(diff[i2].second == i) {\n            i2 = i2 - 1;\n        }\n        if(sum[j1].second == i) {\n            j1 = j1 + 1;\n        }\n        if(sum[j2].second == i) {\n            j2 = j2 - 1;\n        }\n        // vector<int>x = {minDistance, diff[i2].first - diff[i1].first, sum[j2].first - sum[j1].first};\n        // for(auto z : x)cout<<z<<\" \";\n        // cout<<endl;\n        minDistance = min(minDistance, (max(diff[i2].first - diff[i1].first, sum[j2].first - sum[j1].first)));\n        \n        #undef int\n        return minDistance;\n        \n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        #define int long long\n        vector<pair<int, int>>diff;\n        vector<pair<int, int>>sum;\n        int n = points.size();\n        for(int i = 0; i < n; i++) {\n            int a = points[i][0];\n            int b = points[i][1];\n            diff.push_back({a - b, i});\n            sum.push_back({a + b, i});\n        }\n        sort(diff.begin(), diff.end());\n        sort(sum.begin(), sum.end());\n        \n        int minDistance = 1e18;\n        /* try all four points */\n        minDistance = findMin(diff, sum, diff[n - 1].second, minDistance);\n        minDistance = findMin(diff, sum, diff[0].second, minDistance);\n        minDistance = findMin(diff, sum, sum[0].second, minDistance);\n        minDistance = findMin(diff, sum, sum[n - 1].second, minDistance);\n        \n        \n        #undef int\n        return minDistance;\n            \n    }\n};"
}