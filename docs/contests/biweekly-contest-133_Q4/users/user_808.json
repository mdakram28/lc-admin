{
    "username": "bugmonk1001",
    "submission": "import java.io.BufferedReader;\nimport java.io.IOException;\nimport java.util.*;\n\nclass Solution {\n    BufferedReader r;\n    long fact[];\n    long ifact[];\n\n    int[] readArray() throws IOException {\n        String s[] = r.readLine().split(\" \");\n        int n = s.length;\n        int a[] = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = Integer.parseInt(s[i]);\n        }\n        return a;\n    }\n\n    long nck(int n, int k) {\n        return n < k ? 0 : ((fact[n] * 1L * ifact[n - k]) % MOD * ifact[k]) % MOD;\n    }\n\n    long binexpo(long a, long b) {\n        long ans = 1;\n        while (b > 0) {\n            if ((b & 1) > 0)\n                ans = (ans * a) % MOD;\n            a = (a * a) % MOD;\n            b = b >> 1;\n        }\n        return ans;\n    }\n\n   \n\n    final int MOD = (int) 1e9 + 7;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int MAX = 400;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int[] od : requirements)\n            map.put(od[0] + 1, od[1]);\n\n        long[][] cnt = new long[n + 1][MAX + 1];\n        cnt[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int k = 0; k <= MAX; k++) {\n                for (int it = 0; it < i; it++) {\n                    if (k - it >= 0)\n                        cnt[i][k] = (cnt[i][k] + cnt[i - 1][k - it]) % MOD;\n\n                }\n            }\n            if (map.containsKey(i)) {\n                int tk = map.get(i);\n                int k = 0;\n                while (k <= MAX) {\n                    if (k != tk) {\n                        cnt[i][k] = 0;\n                    }\n                    k++;\n                }\n            }\n        }\n        long res = 0;\n        for (long i : cnt[n])\n            res = (res + i) % MOD;\n        return (int) res;\n    }\n    \n     void buildFact(int n) {\n        fact = new long[n + 1];\n        ifact = new long[n + 1];\n        fact[0] = ifact[0] = 1;\n        for (int i = 1; i <= n; i++) {\n            fact[i] = (fact[i - 1] * i) % MOD;\n            ifact[i] = binexpo(fact[i], MOD - 2);\n        }\n    }\n\n}",
    "submit_ts": 1719071282.0
}