{
    "username": "Omaranbazna",
    "submission": "class TrieNode {\n    constructor() {\n        this.children = {};\n        this.cost = Infinity;\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.root = new TrieNode();\n    }\n\n    insert(word, cost) {\n        let node = this.root;\n        for (const char of word) {\n            if (!node.children[char]) {\n                node.children[char] = new TrieNode();\n            }\n            node = node.children[char];\n        }\n        node.cost = Math.min(node.cost, cost); // Store the minimum cost for the word\n    }\n\n    getCosts(target, start) {\n        const costs = [];\n        let node = this.root;\n        for (let i = start; i < target.length; i++) {\n            const char = target[i];\n            if (!node.children[char]) break;\n            node = node.children[char];\n            if (node.cost !== Infinity) {\n                costs.push([i + 1, node.cost]); // Store the position and cost\n            }\n        }\n        return costs;\n    }\n}\n\nvar minimumCost = function(target, words, costs) {\n    const n = target.length;\n    const dp = Array(n + 1).fill(Infinity);\n    dp[0] = 0;\n\n    const trie = new Trie();\n    for (let i = 0; i < words.length; i++) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    for (let i = 0; i < n; i++) {\n        if (dp[i] === Infinity) continue;\n\n        const costsFromHere = trie.getCosts(target, i);\n        for (const [end, cost] of costsFromHere) {\n            dp[end] = Math.min(dp[end], dp[i] + cost);\n        }\n    }\n\n    return dp[n] === Infinity ? -1 : dp[n];\n};",
    "submit_ts": "1720324572",
    "subm_id": "1312402800"
}