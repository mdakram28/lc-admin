{
    "username": "Iman_Navdekar",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    private int[] nums;\n    private int[] peaks;\n    private int[] fenwickTree;\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        this.nums = nums;\n        int n = nums.length;\n        this.peaks = new int[n];\n        this.fenwickTree = new int[n + 1];\n        List<Integer> result = new ArrayList<>();\n\n        // Initialize peaks and Fenwick Tree\n        for (int i = 1; i < n - 1; i++) {\n            if (isPeak(i)) {\n                peaks[i] = 1;\n                updateFenwickTree(i, 1);\n            }\n        }\n\n        // Process each query\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                // Query type [1, li, ri]: Count peaks in subarray nums[li..ri]\n                int li = query[1];\n                int ri = query[2];\n                int peakCount = 0;\n                if (ri - li >= 2) {\n                    peakCount = queryFenwickTree(ri - 1) - queryFenwickTree(li);\n                }\n                result.add(peakCount);\n            } else if (query[0] == 2) {\n                // Query type [2, indexi, vali]: Update nums[indexi] to vali\n                int index = query[1];\n                int value = query[2];\n\n                // Update peaks before and after the change\n                if (index > 0) updatePeakStatus(index - 1);\n                updatePeakStatus(index);\n                if (index < n - 1) updatePeakStatus(index + 1);\n\n                // Perform the update\n                nums[index] = value;\n\n                // Update peaks again after the change\n                if (index > 0) updatePeakStatus(index - 1);\n                updatePeakStatus(index);\n                if (index < n - 1) updatePeakStatus(index + 1);\n            }\n        }\n\n        return result;\n    }\n\n    private boolean isPeak(int i) {\n        return i > 0 && i < nums.length - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    private void updatePeakStatus(int i) {\n        if (i <= 0 || i >= nums.length - 1) return;\n        boolean wasPeak = peaks[i] == 1;\n        boolean isPeakNow = isPeak(i);\n        if (wasPeak && !isPeakNow) {\n            peaks[i] = 0;\n            updateFenwickTree(i, -1);\n        } else if (!wasPeak && isPeakNow) {\n            peaks[i] = 1;\n            updateFenwickTree(i, 1);\n        }\n    }\n\n    private void updateFenwickTree(int i, int delta) {\n        i++;\n        while (i < fenwickTree.length) {\n            fenwickTree[i] += delta;\n            i += i & -i;\n        }\n    }\n\n    private int queryFenwickTree(int i) {\n        i++;\n        int sum = 0;\n        while (i > 0) {\n            sum += fenwickTree[i];\n            i -= i & -i;\n        }\n        return sum;\n    }\n}\n",
    "submit_ts": 1718507388.0
}