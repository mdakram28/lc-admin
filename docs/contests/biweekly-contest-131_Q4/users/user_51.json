{
    "username": "hkmaxi",
    "submission": "class Solution {\npublic:\n    \n    int segtree[1000005];\n    void upd(int ind,int l,int r,int p,int val){\n        if(l>r){\n            return;\n        }\n        \n        if(l==r){\n            segtree[ind]=val;\n            return;\n        }\n        \n        int mid=(l+r)/2;\n        if(p<=mid){\n            upd(ind*2,l,mid,p,val);\n        }else{\n            upd(ind*2+1,mid+1,r,p,val);\n        }\n        \n        segtree[ind]=min(segtree[ind*2],segtree[ind*2+1]);\n    }\n    \n    int query(int ind,int l,int r,int st,int en){\n        if(l>r or r<st or l>en){\n            return 1e9;\n        }\n        \n        if(l>=st and r<=en){\n            return segtree[ind];\n        }\n        \n        int mid=(l+r)/2;\n        return min(query(ind*2,l,mid,st,en),query(ind*2+1,mid+1,r,st,en));\n    }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> sol;\n        \n        int q_size=queries.size();\n        int lim=min(50000,3*q_size);\n        set<int> obstacles;\n        obstacles.insert(0);\n        obstacles.insert(lim);\n        unordered_map<int,set<int> > avail;\n        set<int>::iterator it;\n        \n        for(int i=1;i<=lim;i++){\n        \n            upd(1,1,lim,i,1e9);\n            \n            if(i==lim){\n                avail[i].insert(0);\n                upd(1,1,lim,i,0);\n            }\n        }\n            \n        \n        \n        \n        for(auto q:queries){\n            \n            if(q[0]==1){\n                int ob=q[1];\n                it=obstacles.lower_bound(ob);\n                int en=*it;\n                it--;\n                int st=*it;\n                \n                 \n                \n                obstacles.insert(ob);\n                \n                avail[en-st].erase(st);\n                \n                if(avail[en-st].size()==0){\n                    upd(1,1,lim,en-st,1e9);\n                }else{\n                    upd(1,1,lim,en-st,*avail[en-st].begin());\n                }\n                \n                \n                avail[ob-st].insert(st);\n                avail[en-ob].insert(ob);\n                \n                \n                upd(1,1,lim,ob-st,*avail[ob-st].begin());\n                upd(1,1,lim,en-ob,*avail[en-ob].begin());\n                \n            \n                \n            }else{\n                \n                int sz=q[2];\n                int x=q[1];\n            \n                int avail=query(1,1,lim,sz,lim);\n                if(avail+sz<=x){\n                    sol.push_back(true);\n                }else{\n                    sol.push_back(false);\n                }\n            \n            }\n        }\n        \n        \n        return sol;\n    }\n};",
    "submit_ts": "1716649383",
    "subm_id": "1267586327"
}