{
    "username": "JustKitkat",
    "submission": "#define vi vector<int>\n#define FOR(a,b) for(auto i=a;i<b;++i)\nclass UnionFind{\nprivate:\n    vi p,rank,setSize,hi;\n    int numSets;\npublic:\n    UnionFind(int N){\n        p.assign(N, 0);\n        hi.assign(N,0);\n        FOR(0,N)p[i]=i,hi[i]=i;\n        rank.assign(N, 0);\n        setSize.assign(N,1);\n        numSets=N;\n    }\n\n    int findSet(int i){return(p[i]==i)?i:(p[i]=findSet(p[i]));}\n    bool isSameSet(int i,int j){return findSet(i)==findSet(j);}\n    int numDisjointSets(){return numSets;}\n    int sizeOfSet(int i){return setSize[findSet(i)];}\n    int gethi(int i){return hi[findSet(i)];}\n    \n    void unionSet(int i, int j){\n        if(isSameSet(i,j))return;\n        int x = findSet(i),y=findSet(j);\n        if(y<x)swap(x,y);\n        // hi[min(x,y)]=hi[max(x,y)];\n        p[x]=y;\n        // if(rank[x]==rank[y])++rank[y];\n        setSize[y]+=setSize[x];\n        --numSets;\n    }\n};\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        auto uf=UnionFind(n);\n        vector<int>res;\n        int ans=n-1;\n        for(auto x:queries){\n            // cout<<\"new query: \"<<x[0]<<' '<<x[1]<<endl;\n            if(uf.isSameSet(x[0],x[1]-1)){\n                res.push_back(ans);\n                continue;\n            }\n            for(int i=x[0];i<x[1];){\n                ans--;//=uf.sizeOfSet(i);\n                // cout<<i<<' '<<uf.findSet(i)<<endl;\n                if(i!=x[1])uf.unionSet(x[0],i);\n                // cout<<i<<' '<<uf.findSet(i)<<endl;\n                i=uf.findSet(i)+1;\n                // cout<<ans<<' '<<x[0]<<' '<<i<<endl;\n            }\n            ans++;\n            res.push_back(ans);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722742876",
    "subm_id": "1343779136"
}