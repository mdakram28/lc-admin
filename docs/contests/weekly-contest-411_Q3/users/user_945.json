{
    "username": "tse",
    "submission": "#include <string>\nusing namespace std;\n\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (n == 1) { \n            for (int num = 9; num >= 1; --num) {\n                if (num % k == 0)\n                    return to_string(num);\n            }\n            return \"-1\"; \n        }\n\n        string high(n, '9');\n        if( k == 5) {\n            high[n-1] = '5'; \n            high[0] = '5'; \n            return high;\n        }\n        if(k == 8) {\n            if(n <= 6) {\n                string res(n, '8');\n            return res;\n            } else {\n                high[n-1] = '8'; \n            high[0] = '8'; \n            high[n-2] = '8'; \n            high[1] = '8'; \n            high[n-3] = '8'; \n            high[2] = '8'; \n            return high;\n            }\n            \n        }\n        if( k == 4 ) {\n            high[n-1] = '8'; \n            high[0] = '8'; \n            if(n > 2) {\n                high[n-2] = '8'; \n            high[1] = '8';\n            }\n\n        }\n        if (k % 2 == 0) {\n            high[n-1] = '8'; \n            high[0] = '8'; \n        }\n        string palindrome = high;\n        \n        while (true) {\n            if (isDivisible(palindrome, k)) {\n                return palindrome;\n            }\n            \n            if (!prevPalindrome(palindrome, k)) {\n                break; // Break if no previous palindrome can be generated (underflow)\n            }\n        }\n\n        return \"-1\";\n    }\n\n    bool prevPalindrome(string &palindrome, int k) {\n        int len = palindrome.size();\n        int mid = len / 2;\n\n        if (len % 2 == 1) {\n            while(palindrome[mid] >= '0') {\n               // cout << palindrome<<endl;\n                palindrome[mid]--;\n            if (isDivisible(palindrome, k)) {\n                return true;\n            }\n        }\n            \n        }\n        if (len % 2 == 0) {\n\n            while(palindrome[mid] != '0') {\n                int mid1 = mid-1 ;\n            palindrome[mid]--;\n            palindrome[mid1]--;\n            if (isDivisible(palindrome, k)) {\n                return true;\n            }\n            \n            }\n            \n            palindrome[mid] = '9'; \n        }\n\n\n        // for (int i = mid - 1; i >= 0; --i) {\n        //     if (palindrome[i] != '0') {\n        //         palindrome[i]--;\n        //         palindrome[len - 1 - i] = palindrome[i];\n        //         for (int j = i + 1; j < mid; ++j) {\n        //             palindrome[j] = '9';\n        //             palindrome[len - 1 - j] = '9';\n        //         }\n        //         return true;\n        //     }\n        // }\n        return false;\n    }\n\n    bool isDivisible(const string &num, int k) {\n        int remainder = 0;\n        for (char digit : num) {\n            remainder = (remainder * 10 + (digit - '0')) % k;\n        }\n        return remainder == 0;\n    }\n};\n",
    "submit_ts": "1723953379",
    "subm_id": "1359819711"
}