{
    "username": "lochristopher9",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = None\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = cost\n    \n    def search(self, target, start):\n        node = self.root\n        i = start\n        while i < len(target) and target[i] in node.children:\n            node = node.children[target[i]]\n            if node.cost is not None:\n                yield (i + 1, node.cost)\n            i += 1\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        min_costs = {}\n        for i in range(len(words)):\n            if words[i] not in min_costs:\n                min_costs[words[i]] = costs[i]\n            else:\n                min_costs[words[i]] = min(min_costs[words[i]], costs[i])\n        \n        words = []\n        costs = []\n        for word in min_costs:\n            words.append(word)\n            costs.append(min_costs[word])\n        \n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            \n            for end, cost in trie.search(target, i):\n                dp[end] = min(dp[end], dp[i] + cost)\n        \n        # print(dp)\n                \n        return dp[n] if dp[n] != float('inf') else -1\n    ",
    "submit_ts": "1720321912",
    "subm_id": "1312335636"
}