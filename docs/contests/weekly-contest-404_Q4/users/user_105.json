{
    "username": "yag313",
    "submission": "def tree_center(n, edges):\n    if n == 1:\n        return [0]\n\n    # Build the adjacency list for the graph\n    adj = defaultdict(list)\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    \n    # Step 1: Find all leaf nodes\n    leaves = deque()\n    degree = [0] * n\n    for i in range(n):\n        degree[i] = len(adj[i])\n        if degree[i] == 1:\n            leaves.append(i)\n    \n    # Step 2: Remove leaves level by level\n    remaining_nodes = n\n    while remaining_nodes > 2:\n        leaves_count = len(leaves)\n        remaining_nodes -= leaves_count\n        for _ in range(leaves_count):\n            leaf = leaves.popleft()\n            for neighbor in adj[leaf]:\n                degree[neighbor] -= 1\n                if degree[neighbor] == 1:\n                    leaves.append(neighbor)\n    \n    # The remaining nodes are the center nodes\n    return list(leaves)\nclass Solution:\n    def treeDiameter(self, edges: List[List[int]]) -> int:\n        adj = defaultdict(set)\n        # print(edges)\n        for i, j in edges:\n            adj[i].add(j)\n            adj[j].add(i)\n        que = deque([(n, None, 0) for n in adj if len(adj[n]) == 1])\n        diam = 0\n        seen = set([_[0] for _ in que])\n        last_len = 1\n        while que:\n            last_len = len(que)\n            for _ in range(len(que)):\n                node, parent, diam = que.popleft()\n                for child in adj[node]:\n                    adj[child].discard(node)\n                    if len(adj[child]) == 1 and child not in seen:\n                        que.append((child, node, diam + 1))\n                        seen.add(child)\n        # print(diam, last_len)\n        return diam * 2 + (last_len >= 2)\n        \n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        center1 = tree_center(len(edges1) + 1, edges1)[0]\n        center2 = tree_center(len(edges2) + 1, edges2)[0]\n        n1 = len(edges1) + 1\n        edges = edges1.copy()\n        for i, j in edges2:\n            edges.append([i + n1, j + n1])\n        edges.append([center1, n1 + center2])\n        return self.treeDiameter(edges)\n        \n        \n        ",
    "submit_ts": "1719717136",
    "subm_id": "1304383439"
}