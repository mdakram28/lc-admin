{
    "username": "chaosxlive",
    "submission": "from math import inf\nfrom typing import List, Optional\n\n\nclass Solution:\n\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        XS = sorted(map(tuple, points))\n        YS = sorted(map(tuple, points), key=lambda x: (x[1], x[0]))\n        L = len(points)\n        result = inf\n\n        minsum = maxsum = points[0][0] + points[0][1]\n        mindiff = maxdiff = points[0][0] - points[0][1]\n        minsumi = maxsumi = mindiffi = maxdiffi = 0\n        for i in range(1, L):\n            sum = points[i][0] + points[i][1]\n            diff = points[i][0] - points[i][1]\n            if (sum < minsum):\n                minsum = sum\n                minsumi = i\n            elif (sum > maxsum):\n                maxsum = sum\n                maxsumi = i\n            if (diff < mindiff):\n                mindiff = diff\n                mindiffi = i\n            elif (diff > maxdiff):\n                maxdiff = diff\n                maxdiffi = i\n\n        result = max(maxsum - minsum, maxdiff - mindiff)\n\n        for ignore in [minsumi, maxsumi, mindiffi, maxdiffi]:\n            start = 1 if ignore == 0 else 0\n            minsum = maxsum = points[start][0] + points[start][1]\n            mindiff = maxdiff = points[start][0] - points[start][1]\n            for i in range(1, L):\n                if i == ignore:\n                    continue\n                sum = points[i][0] + points[i][1]\n                diff = points[i][0] - points[i][1]\n                if (sum < minsum):\n                    minsum = sum\n                elif (sum > maxsum):\n                    maxsum = sum\n                if (diff < mindiff):\n                    mindiff = diff\n                elif (diff > maxdiff):\n                    maxdiff = diff\n\n            result = min(result, max(maxsum - minsum, maxdiff - mindiff))\n\n        return result\n\n\n# print(Solution().minimumDistance([[3, 10], [5, 15], [10, 2], [4, 4]]))  # 12\n# print(Solution().minimumDistance([[1, 1], [1, 1], [1, 1]]))  # 12\n# print(Solution().minimumDistance([[10, 3], [4, 2], [8, 9], [9, 3], [4, 5], [6, 9], [9, 2], [7, 5]]))  # 10\n"
}