{
    "username": "david-c",
    "submission": "class SegmentTree {\n  int n;\n  vector<int> tree;\n\n  int f(int a, int b) { return a + b; }\n\n public:\n  SegmentTree(const vector<int>& leaves)\n      : n(leaves.size()), tree(n << 1) {\n    for (int i = 0; i < n; ++i) tree[i + n] = leaves[i];\n\n    // build the tree\n    for (int i = n - 1; i > 0; --i) tree[i] = f(tree[i << 1], tree[i << 1 | 1]);\n  }\n\n  // set value at position p\n  void modify(int p, int value) {\n    for (tree[p += n] = value; p > 1; p >>= 1)\n      tree[p >> 1] = f(tree[p], tree[p ^ 1]);\n  }\n\n  // f on interval [left, right)\n  int query(int left, int right) {\n    if (left >= right) return 0;\n    int res = 0;\n    for (left += n, right += n; left < right; left >>= 1, right >>= 1) {\n      if (left & 1) res = f(res, tree[left++]);\n      if (right & 1) res = f(tree[--right], res);\n    }\n    return res;\n  }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        const int n = nums.size();\n        vector<int> ispeak(n);\n        vector<int> res;\n        for (int i = 1; i < n - 1; ++i) {\n            ispeak[i] = nums[i - 1] < nums[i] && nums[i] > nums[i + 1];\n        }\n        SegmentTree t(ispeak);\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                res.push_back(t.query(q[1] + 1, q[2]));\n            } else {\n                nums[q[1]] = q[2];\n                for (int i = q[1] - 1; i <= q[1] + 1; ++i) {\n                    if (i <= 0 || i >= n - 1) continue;\n                    int newv = nums[i - 1] < nums[i] && nums[i] > nums[i + 1];\n                    if (newv != ispeak[i]) {\n                        ispeak[i] = newv;\n                        t.modify(i, newv);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718508272",
    "subm_id": "1289676555"
}