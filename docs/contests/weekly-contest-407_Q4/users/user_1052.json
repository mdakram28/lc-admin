{
    "username": "kircle",
    "submission": "class Solution {\npublic:\n  long long solve(const vector<int> &diffs, int l, int r, long long delta) {\n    // printf(\"%d %d %lld %lld\\n\", l, r, diffs[l] + delta, diffs[r] + delta);\n    while (l < r && (diffs[l] + delta) == 0)\n      l++;\n    while (l < r && (diffs[r] + delta) == 0)\n      r--;\n    if (diffs[l] + delta == 0)\n      return 0;\n    long long ret = 0;\n    if (diffs[l] + delta > 0 && diffs[r] + delta > 0) {\n      long long ndelta = -min(diffs[l] + delta, diffs[r] + delta);\n      ret += abs(ndelta);\n      ret += solve(diffs, l, r, delta + ndelta);\n    } else if (diffs[l] + delta < 0 && diffs[r] + delta < 0) {\n      long long ndelta = -max(diffs[l] + delta, diffs[r] + delta);\n      ret += abs(ndelta);\n      ret += solve(diffs, l, r, delta + ndelta);\n    } else {\n      int mid = r;\n      while (l < mid && !((diffs[mid] + delta > 0 && diffs[l] + delta > 0) ||\n                          diffs[mid] + delta < 0 && diffs[l] + delta < 0)) {\n        mid--;\n      }\n      ret += solve(diffs, l, mid, delta);\n      ret += solve(diffs, mid + 1, r, delta);\n    }\n    return ret;\n  }\n  long long minimumOperations(vector<int> &nums, vector<int> &target) {\n    int n = nums.size();\n    vector<int> diffs(n);\n    for (int i = 0; i < n; i++) {\n      diffs[i] = nums[i] - target[i];\n    }\n    long long ret = solve(diffs, 0, n - 1, 0);\n    return ret;\n  }\n};",
    "submit_ts": "1721532012",
    "subm_id": "548389894"
}