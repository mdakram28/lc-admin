{
    "username": "TooMuchFreeTime",
    "submission": "class Solution {\npublic:\n    \n    class SGTree{\npublic:\n   vector<int>seg;\n   SGTree(int n){\n     seg.resize(4*n+1);\n   }\n \n   void build(int ind,int low,int high,vector<int>&arr){\n    if(low==high){\n        seg[ind] = arr[low];\n        return;\n    }\n    int mid = (low+high)/2;\n    build(2*ind+1,low,mid,arr);\n    build(2*ind+2,mid+1,high,arr);\n    seg[ind] = seg[2*ind+1] + seg[2*ind+2];\n   }\n \n   int query(int ind,int low,int high,int l,int r){\n      //no overlap\n      if(l>high || low>r) return 0;\n      //complete overlap\n      if(l<=low && high<=r) return seg[ind];\n      int mid = (low+high)/2;\n      int left = query(2*ind+1,low,mid,l,r);\n      int right = query(2*ind+2,mid+1,high,l,r);\n      return left+right;\n   }\n \n   void update(int ind,int low,int high,int i,int val){\n    if(low==high){\n        seg[ind] = val;\n        return;\n    }\n    int mid = (low+high)/2;\n    if(i<=mid) update(2*ind+1,low,mid,i,val);\n    else update(2*ind+2,mid+1,high,i,val);\n    seg[ind] = seg[2*ind+1] + seg[2*ind+2];\n   }\n};\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n       int n = nums.size();\n       vector<int>v(n); \n       for(int i = 1 ; i < n - 1 ; i++){\n           if(nums[i] > nums[i-1] && nums[i] > nums[i+1]) v[i] = 1;\n       }\n        SGTree sg(n);\n        sg.build(0,0,n-1,v);\n        vector<int>ans;\n        // cout<<sg.query(0,0,n-1,0,n-1);\n        // cout<<\"\\n\";\n        for(auto it : queries){\n            if(it[0]==1){\n                int l = it[1] + 1 , r = it[2] - 1;\n                if(l>r){\n                    ans.push_back(0);\n                    continue;\n                }\n                int x = sg.query(0,0,n-1,l,r);\n                ans.push_back(x);\n            }\n            else{\n                int ind = it[1] , val = it[2];\n                nums[ind] = val;\n                // cout<<nums[ind]<<\"\\n\";\n                    if(ind>0 && ind<n-1 && nums[ind]>nums[ind-1] && nums[ind]>nums[ind+1]){\n                    v[ind] = 1;\n                    sg.update(0,0,n-1,ind,v[ind]);\n                    }   \n                    int x = ind - 1;\n                    if(x>0 && x<n-1 && nums[x]>nums[x-1] && nums[x]>nums[x+1]){\n                    v[x] = 1; \n                    sg.update(0,0,n-1,x,v[x]);\n                    }\n                    x = ind + 1;\n                    if(x>0 && x<n-1 && nums[x]>nums[x-1] && nums[x]>nums[x+1]){\n                    v[x] = 1; \n                    sg.update(0,0,n-1,x,v[x]);\n                    }\n                    if(ind>0 && ind<n-1 && (nums[ind]<=nums[ind-1] || nums[ind]<=nums[ind+1])){\n                    v[ind] = 0; \n                    sg.update(0,0,n-1,ind,v[ind]);\n                    }                  \n                    x = ind - 1;\n                    if(x>0 && x<n-1 && (nums[x]<=nums[x-1] || nums[x]<=nums[x+1])){\n                    v[x] = 0; \n                    sg.update(0,0,n-1,x,v[x]);\n                    }  \n                    x = ind + 1;\n                    if(x>0 && x<n-1 && (nums[x]<=nums[x-1] || nums[x]<=nums[x+1])){\n                    v[x] = 0; \n                    sg.update(0,0,n-1,x,v[x]);\n                    }\n                }\n            }\n        return ans;\n    }\n};",
    "submit_ts": "1718507977",
    "subm_id": "1289668155"
}