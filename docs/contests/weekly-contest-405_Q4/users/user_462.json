{
    "username": "NONO2008",
    "submission": "class TriwizardTournamentNode {\npublic:\n    unordered_map<char, TriwizardTournamentNode*> chelas;\n    int daan;\n\n    TriwizardTournamentNode() : daan(INT_MAX) {}\n};\n\nclass TriwizardTournament {\npublic:\n    TriwizardTournamentNode* muggle;\n\n    TriwizardTournament() {\n        muggle = new TriwizardTournamentNode();\n    }\n\n    void pattherDaalo(const string& magic, int galleon) {\n        TriwizardTournamentNode* timeTurner = muggle;\n        for (char ch : magic) {\n            if (!timeTurner->chelas.count(ch)) {\n                timeTurner->chelas[ch] = new TriwizardTournamentNode();\n            }\n            timeTurner = timeTurner->chelas[ch];\n        }\n        timeTurner->daan = min(timeTurner->daan, galleon);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& spells, vector<int>& karam) {\n        int n = target.size();\n        TriwizardTournament spellsBook;\n        for (int i = 0; i < spells.size(); ++i) {\n            spellsBook.pattherDaalo(spells[i], karam[i]);\n        }\n\n        vector<int> mapOfSecrets(n + 1, INT_MAX);\n        mapOfSecrets[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (mapOfSecrets[i] == INT_MAX) continue;\n            TriwizardTournamentNode* mischiefManaged = spellsBook.muggle;\n            for (int j = i; j < n; ++j) {\n                if (!mischiefManaged->chelas.count(target[j])) break;\n                mischiefManaged = mischiefManaged->chelas[target[j]];\n                if (mischiefManaged->daan != INT_MAX) {\n                    mapOfSecrets[j + 1] = min(mapOfSecrets[j + 1], mapOfSecrets[i] + mischiefManaged->daan);\n                }\n            }\n        }\n\n        return mapOfSecrets[n] == INT_MAX ? -1 : mapOfSecrets[n];\n    }\n};\n",
    "submit_ts": "1720322526",
    "subm_id": "1312352269"
}