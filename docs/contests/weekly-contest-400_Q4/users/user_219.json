{
    "username": "curiosity-10",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        if (n == 0) return abs(k);\n\n        // Step 1: Initialize prefix sum arrays for each bit position\n        vector<vector<int>> prefix_sum(32, vector<int>(n + 1, 0));\n\n        // Step 2: Fill the prefix sum arrays\n        for (int i = 0; i < 32; ++i) {\n            int bit = (1 << i);\n            for (int j = 0; j < n; ++j) {\n                prefix_sum[i][j + 1] = prefix_sum[i][j] + ((nums[j] & bit) ? 1 : 0);\n            }\n        }\n\n        int min_diff = INT_MAX;\n        int left = 0;\n        int current_and = nums[0];\n\n        // Step 3: Sliding window approach\n        for (int right = 0; right < n; ++right) {\n            if (right > 0) {\n                current_and &= nums[right];\n            }\n\n            while (left < right && current_and < k) {\n                min_diff = min(min_diff, abs(k - current_and));\n                current_and = recompute_and(prefix_sum, nums, left + 1, right);\n                left++;\n            }\n\n            min_diff = min(min_diff, abs(k - current_and));\n            if (min_diff == 0) return 0; // Early exit if we find the exact match\n        }\n\n        return min_diff;\n    }\n\nprivate:\n    int recompute_and(const vector<vector<int>>& prefix_sum, const vector<int>& nums, int start, int end) {\n        int result = ~0;\n        for (int i = 0; i < 32; ++i) {\n            int bit = (1 << i);\n            int count = prefix_sum[i][end + 1] - prefix_sum[i][start];\n            if (count == (end - start + 1)) {\n                result |= bit;\n            } else {\n                result &= ~bit;\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": "1717297567",
    "subm_id": "1274747495"
}