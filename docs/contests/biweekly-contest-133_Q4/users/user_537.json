{
    "username": "abhinav0603",
    "submission": "import java.util.*;\n\nclass Solution {\n\n    private static final int MOD = 1_000_000_007;\n\n    private static final int MAX_INVERSIONS = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n\n        Map<Integer, Integer> lengthToInversions = new HashMap<>();\n\n        for (int[] req : requirements) {\n\n            lengthToInversions.put(req[0] + 1, req[1]);\n\n        }\n\n        long[][] dp = new long[n + 1][MAX_INVERSIONS + 1];\n\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n\n            for (int inversions = 0; inversions <= MAX_INVERSIONS; inversions++) {\n\n                for (int newPos = 0; newPos < length; newPos++) {\n\n                    int prevInversions = inversions - newPos;\n\n                    if (prevInversions >= 0) {\n\n                        dp[length][inversions] = (dp[length][inversions] + dp[length - 1][prevInversions]) % MOD;\n\n                    }\n\n                }\n\n            }\n\n            if (lengthToInversions.containsKey(length)) {\n\n                int requiredInversions = lengthToInversions.get(length);\n\n                for (int inversions = 0; inversions <= MAX_INVERSIONS; inversions++) {\n\n                    if (inversions != requiredInversions) {\n\n                        dp[length][inversions] = 0;\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        long result = 0;\n\n        for (long count : dp[n]) {\n\n            result = (result + count) % MOD;\n\n        }\n\n        return (int) result;\n\n    }\n\n}",
    "submit_ts": "1719070334",
    "subm_id": "1296820461"
}