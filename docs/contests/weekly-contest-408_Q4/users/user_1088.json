{
    "username": "sitaramhanumanji52",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n#include <unordered_set>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // Helper function for BFS to check reachability\n    bool bfs(vector<vector<int>>& graph, int start, int t1, int t2, int n) {\n        queue<int> q;\n        vector<int> visited(n+4, 0);\n        q.push(start);\n        visited[start] = 1;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c2) {\n        int nc = c2.size();\n        vector<pair<pair<int, int>, int>> circles(nc);\n        vector<vector<int>> graph(nc + 4);\n\n        for (int i = 0; i < nc; ++i) {\n            circles[i] = {{c2[i][0], c2[i][1]}, c2[i][2]};\n        }\n\n        for (int i = 0; i < nc; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[nc].push_back(i);\n                graph[i].push_back(nc);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[nc + 2].push_back(i);\n                graph[i].push_back(nc + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[nc + 1].push_back(i);\n                graph[i].push_back(nc + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[nc + 3].push_back(i);\n                graph[i].push_back(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double dist = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) + pow(circles[i].first.second - circles[j].first.second, 2));\n                if (circles[i].second + circles[j].second >= dist) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        return !(bfs(graph, nc, nc + 1, nc + 2, nc + 4) || bfs(graph, nc + 3, nc + 2, nc + 1, nc + 4));\n    }\n};\n\n\n",
    "submit_ts": "1722139188",
    "subm_id": "1335810524"
}