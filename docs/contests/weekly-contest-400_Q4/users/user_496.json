{
    "username": "shivanshudixit16",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        \n        @cache\n        def oc(cn):\n            c = [0] * 34\n            \n            for i,cc in enumerate(bin(cn)[2:][::-1]):\n                # print(cn,i,cc)\n                c[i] += (1 if cc == \"1\" else 0)\n            # print(cn,c)\n            return c\n        \n        \n        def getNo(cc,cl):\n            cn = 0\n            for i in range(34):\n                if cc[i] == cl:\n                    cn |= (1<<i)\n            return cn\n        \n        def add(c1,c2):\n            for i in range(34):\n                c1[i] += c2[i]\n        \n        def sub(c1,c2):\n            for i in range(34):\n                c1[i] -= c2[i]\n            \n        \n        e = s = 0\n        \n        n = len(nums)\n        cc = [0] * 34\n        cl = 0\n        \n        ans = inf\n        while e < n:\n            coc = oc(nums[e])\n            \n            cl += 1\n            add(cc,coc)\n            \n            \n            cn = getNo(cc,cl)\n            # print(cn,s,e,cc)\n            \n            ans = min(ans,abs(cn-k))\n            \n            while cn < k and s <= e:\n                \n                coc = oc(nums[s])\n                cl -= 1\n                sub(cc,coc)\n\n                cn = getNo(cc,cl)\n                ans = min(ans,abs(cn-k))\n                s += 1\n                \n            e += 1\n        return ans\n                \n            ",
    "submit_ts": 1717298045.0
}