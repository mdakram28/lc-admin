{
    "username": "Inderpal Singh",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        int[][] maxRowWise = new int[m][]; // indices\n        // int[][] maxColWise = new int[n][]; // indices\n\n        for (int i=0; i<m; i++) maxRowWise[i] = new int[] {-1, -1, -1};\n        // for (int j=0; j<n; j++) maxColWise[j] = new int[] {-1, -1, -1};\n\n        for (int i=0; i<m; i++) {\n            int[] row = board[i];\n            int[] arr = new int[] {0, -1, -1};\n            int val;\n            for (int j=1; j<n; j++) {\n                val = row[j];\n                if (row[arr[0]] < val) {\n                    arr[2] = arr[1]; arr[1] = arr[0]; arr[0] = j;\n                } else if (arr[1] == -1 || row[arr[1]] < val) {\n                    arr[2] = arr[1]; arr[1] = j;\n                } else if (arr[2] == -1 || row[arr[2]] < val) {\n                    arr[2] = j;\n                }\n            }\n            maxRowWise[i] = arr;\n        }\n\n        int r1Col = -1;\n        long max = Long.MIN_VALUE;\n        for (int r1Row=0; r1Row<m; r1Row++) {\n            int[] maxRowIndices = maxRowWise[r1Row];\n            for (int i=0; i<maxRowWise[r1Row].length; i++) {\n                r1Col = maxRowIndices[i];\n                long curr = getMax(board, maxRowWise, r1Row, r1Col) + board[r1Row][r1Col];\n                if (curr > max) max = curr;\n            }\n        }\n\n        return max;\n    }\n    private long getMax(int[][] board, int[][] maxRowWise, int r1Row, int r1Col) {\n        int m = board.length, n = board[0].length, r2Col;\n        long max = Long.MIN_VALUE;\n\n        for (int r2Row=0; r2Row<m; r2Row++) {\n            if (r2Row == r1Row) continue;\n            int[] maxRowIndices = maxRowWise[r2Row];\n            for (int i=0; i<maxRowIndices.length; i++) {\n                r2Col = maxRowIndices[i];\n                if (r2Col == r1Col) continue;\n                long maxLeft = getMaxLeft(board, maxRowWise, r1Row, r1Col, r2Row, r2Col);\n                long curr = maxLeft + board[r2Row][r2Col];\n                if (curr > max) max = curr;\n            }\n        }\n        return max;\n    }\n    private long getMaxLeft(int[][] board, int[][] maxRowWise, int r1Row, int r1Col, int r2Row, int r2Col) {\n        int m = board.length, n = board[0].length, r3Col;\n        long max = Long.MIN_VALUE;\n        for (int r3Row=0; r3Row<m; r3Row++) {\n            if (r3Row == r1Row || r3Row == r2Row) continue;\n            int[] maxRowIndices = maxRowWise[r3Row];\n            for (int j=0; j<maxRowIndices.length; j++) {\n                r3Col = maxRowIndices[j];\n                if (r3Col == r1Col || r3Col == r2Col) continue;\n                if (max < board[r3Row][r3Col]) max = board[r3Row][r3Col];\n            }\n        }\n        return max;\n    }\n}\n",
    "submit_ts": "1723910077",
    "subm_id": "1359216516"
}