{
    "username": "vrangr",
    "submission": "typedef long long int ll;\nconst ll mod = (ll)1e9 + 123ll;\nvector<ll> fac(34), invfac(34);\n\nll inv(ll n) {\n    if (n <= 1ll) return 1;\n    return ((mod-mod/n)*(inv(mod%n)))%mod;\n}\n\nvoid init() {\n    static bool init = false;\n    if (init) return;\n    init = true;\n    fac[0] = invfac[0] = fac[1] = invfac[1] = 1ll;\n    for (ll f = 2ll; f < fac.size(); ++f) {\n        fac[f] = (fac[f-1]*f)%mod;\n        invfac[f] = (invfac[f-1]*inv(f))%mod;\n    }\n}\n\nll ncr(ll n, ll r) {\n    ll sol = (fac[n]*invfac[r])%mod;\n    return (sol*invfac[n-r])%mod;\n}\nclass Solution {\npublic:\n    int waysToReachStair(ll k) {\n        init();\n        if (k == 0) return 2;\n        if (k == 1) return 4;\n        int sol = 0;\n        for (ll bit = 0; bit < 31ll; ++bit) {\n            ll v = (1ll<<bit), sum = (v<<1ll);\n            if (sum < k) continue;\n            if (sum == k) {\n                sol++;\n                continue;\n            }\n            ll diff = sum-k;\n            if (diff > bit+2ll) continue;\n            sol += ncr(bit+2ll,diff);\n        }\n        return sol;\n    }\n};\n\n/*\n0\n1\n2\n\n2\n4\n4\n*/",
    "submit_ts": 1716088042.0
}