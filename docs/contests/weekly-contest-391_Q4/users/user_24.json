{
    "username": "n3_",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        s = []\n        d = []\n        for idx, (x, y) in enumerate(points):\n            s.append((idx, x+y))\n            d.append((idx, x-y))\n                    \n        def calc(skip=None):\n            s = []\n            d = []\n            \n            for idx, (x, y) in enumerate(points):\n                if idx == skip:\n                    continue \n                s.append(x+y)\n                d.append(x-y)\n            \n            s.sort()\n            d.sort()\n            \n            return max(s[-1]-s[0], d[-1]-d[0])\n        \n        s.sort(key=lambda x: x[1])\n        d.sort(key=lambda x: x[1])\n        \n        # print(s)\n        # print(d)\n        \n        cand = set([s[0][0], s[-1][0], d[0][0], d[-1][0]])\n        \n#         print(0, calc(0))\n#         print(1, calc(1))\n\n        # print(cand, [calc(c) for c in cand])\n        \n        return min([calc()] + [calc(c) for c in cand])"
}