{
    "username": "dhanushbommavaram",
    "submission": "\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n        build(nums);\n    }\n\n    void update(int idx, int value) {\n        idx += n;\n        tree[idx] = value;\n        while (idx > 1) {\n            idx /= 2;\n            tree[idx] = min(tree[2 * idx], tree[2 * idx + 1]);\n        }\n    }\n\n    int query(int left, int right) {\n        left += n;\n        right += n + 1;\n        int res = INT_MAX;\n        while (left < right) {\n            if (left % 2 == 1) {\n                res = min(res, tree[left]);\n                left++;\n            }\n            if (right % 2 == 1) {\n                right--;\n                res = min(res, tree[right]);\n            }\n            left /= 2;\n            right /= 2;\n        }\n        return res;\n    }\n\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums) {\n        for (int i = 0; i < n; i++) {\n            tree[i + n] = abs(nums[i]);\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = min(tree[i * 2], tree[i * 2 + 1]);\n        }\n    }\n};\n\nclass Solution {\npublic:\n    void getOps(vector<int>& nums, int i, int j, long long int& sum, long long int reduction, SegmentTree& segTree) {\n        if (i > j) {\n            return;\n        }\n        int mini = i;\n        int minValue = segTree.query(i, j);\n        for (int k = i; k <= j; k++) {\n            if (abs(nums[k]) == minValue) {\n                mini = k;\n                break;\n            }\n        }\n        sum += max(abs(nums[mini]) - reduction, 0LL);\n        reduction += max(abs(nums[mini]) - reduction, 0LL);\n        segTree.update(mini, INT_MAX);  \n        getOps(nums, i, mini - 1, sum, reduction, segTree);\n        getOps(nums, mini + 1, j, sum, reduction, segTree);\n    }\n\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        for (int i = 0; i < nums.size(); i++) {\n            nums[i] -= target[i];\n        }\n        int j = 0;\n        bool par = true;\n        long long int sum = 0;\n        SegmentTree segTree(nums);\n        for (int i = 0; i < nums.size(); i++) {\n            if ((nums[i] > 0) == par) {\n                continue;\n            } else {\n                getOps(nums, j, i - 1, sum, 0, segTree);\n                j = i;\n                par = (nums[i] >= 0);\n            }\n        }\n        getOps(nums, j, nums.size() - 1, sum, 0, segTree);\n        return sum;\n    }\n\n};",
    "submit_ts": "1721533124",
    "subm_id": "1328001845"
}