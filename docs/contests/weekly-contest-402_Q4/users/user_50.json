{
    "username": "Yawn_Sean",
    "submission": "class FenwickTree:\n    def __init__(self, nums):\n        n = len(nums)\n        self.n = n\n        self.bit = nums[:]\n        for i in range(n):\n            if i | (i + 1) < n:\n                self.bit[i | (i + 1)] += self.bit[i]\n\n    def sum(self, r):\n        res = 0\n        while r >= 0:\n            res += self.bit[r]\n            r = (r & (r + 1)) - 1\n        return res\n\n    def rsum(self, l, r):\n        return self.sum(r) - self.sum(l - 1)\n\n    def add(self, idx, delta):\n        if delta == 0: return\n        while idx < self.n:\n            self.bit[idx] += delta\n            idx = idx | (idx + 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        nums = [10 ** 6] + nums + [10 ** 6]\n        peaks = [0] * len(nums)\n        for i in range(1, len(nums) - 1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                peaks[i] = 1\n        fen = FenwickTree(peaks)\n        ans = []\n        for t, x, y in queries:\n            if t == 1:\n                x += 1\n                y += 1\n                ans.append(fen.rsum(x, y) - peaks[x] - peaks[y] if x < y else 0)\n            else:\n                x += 1\n                nums[x] = y\n                for i in range(x - 1, x + 2):\n                    if i != 0 and i != len(nums) - 1:\n                        new = 1 if nums[i] > nums[i-1] and nums[i] > nums[i+1] else 0\n                        fen.add(i, new - peaks[i])\n                        peaks[i] = new\n        return ans",
    "submit_ts": "1718505683",
    "subm_id": "1289590704"
}