{
    "username": "theabbie",
    "submission": "from sortedcontainers import SortedList\n\nclass SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        segtree = SegmentTree([-1] * n)\n        invs = SortedList()\n        res = []\n        s = 0\n        for l, r in queries:\n            if segtree.query(0, l + 1) >= r:\n                res.append(n - 1 - s)\n                continue\n            x = invs.bisect_left((l, float('-inf')))\n            while x < len(invs) and invs[x][0] >= l and invs[x][1] <= r:\n                xx, yy = invs.pop(x)\n                s -= yy - xx - 1\n            invs.add((l, r))\n            s += r - l - 1\n            segtree[l] = max(segtree[l], r)\n            res.append(n - 1 - s)\n        return res",
    "submit_ts": "1722740916",
    "subm_id": "1343731977"
}