{
    "username": "Lost_dawn8289",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &adj, int start, int t1, int t2, int nodes) {\n       \n        vector<int> vis(nodes + 4, 0);\n       \n        vis[start] = 1;\n         queue<int> q;\n         q.push(start);\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : adj[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        \n        int num = circles2.size();\n        vector<pair<pair<int, int>, int>> circles(circles2.size());\n        \n        for (int i = 0; i < num; ++i) {\n            circles[i].first.first = circles2[i][0];\n            circles[i].first.second = circles2[i][1];\n            circles[i].second = circles2[i][2];\n        }\n\n         vector<vector<int>> mat(circles2.size() + 4);\n        for (int i = 0; i < num; ++i) {\n            if (X - circles[i].first.first <= circles[i].second) {\n                mat[num + 2].push_back(i);\n                mat[i].push_back(num + 2);\n            }\n            if (circles[i].first.first <= circles[i].second) {\n                mat[num].push_back(i);\n                mat[i].push_back(num);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                mat[num + 3].push_back(i);\n                mat[i].push_back(num + 3);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                mat[num + 1].push_back(i);\n                mat[i].push_back(num + 1);\n            }\n            \n            for (int k = i + 1; k < num; k++) {\n                int rad = circles[i].second + circles[k].second;\n    double dis = sqrt(pow(circles[i].first.first - circles[k].first.first, 2) + pow(circles[i].first.second - circles[k].first.second, 2));   \n                if (rad >= dis) {\n                    mat[i].push_back(k);\n                    mat[k].push_back(i);\n                }\n            }\n        }\n\n        int check = 0;\n        check = max(check, bfs(mat, num, num + 1, num + 2, num + 4)); \n        check = max(check, bfs(mat, num + 3, num + 2, num + 1, num + 4)); \n\n        if (check) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722137226",
    "subm_id": "1335757753"
}