{
    "username": "shivaanshg_",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        int halfSize = n / 2;\n        \n        map<int, vector<int>> diffToMaxValuesMap;\n        vector<int> maxValues;\n        \n        for (int i = 0; i < halfSize; i++) {\n            int firstElem = nums[i];\n            int secondElem = nums[n - i - 1];\n            int difference = abs(firstElem - secondElem);\n            int maxValue1 = max(firstElem, k - secondElem);\n            int maxValue2 = max(secondElem, k - firstElem);\n            int maxValue = max(maxValue1, maxValue2);\n            diffToMaxValuesMap[difference].push_back(maxValue);\n            maxValues.push_back(maxValue);\n        }\n        \n        sort(maxValues.begin(), maxValues.end());        \n        int minChangesRequired = n;\n        \n        for (auto &pair : diffToMaxValuesMap) {\n            int currentDiff = pair.first;\n            int threshold = lower_bound(maxValues.begin(), maxValues.end(), currentDiff) - maxValues.begin();\n            int changesCount = (halfSize - threshold) + threshold * 2;\n            \n            for (auto &maxValue : pair.second) {\n                if (maxValue < currentDiff) {\n                    changesCount -= 2;\n                } else {\n                    changesCount -= 1;\n                }\n            }\n            \n            minChangesRequired = min(minChangesRequired, changesCount);\n        }\n        \n        return minChangesRequired;\n    }\n};\n",
    "submit_ts": "1721490308",
    "subm_id": "1327478926"
}