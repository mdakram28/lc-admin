{
    "username": "shivanshudixit16",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        arr = [0] * n\n        \n        for i in range(1,n-1):\n            if nums[i-1] < nums[i] > nums[i+1]:\n                arr[i] = 1\n        \n        \n        \n        # Max size of tree  \n        tree = [0] * (2 * n)  \n        def build(arr) : \n            # insert leaf nodes in tree  \n            for i in range(n) :  \n                tree[n + i] = arr[i]\n            # build the tree by calculating parents  \n            for i in range(n - 1, 0, -1) :  \n                tree[i] = tree[i << 1] + tree[i << 1 | 1]  \n  \n        # function to update a tree node  \n        def updateTreeNode(cx) :  \n            if cx <= 0 or cx >= n - 1:\n                return\n            isPeak = nums[cx-1] < nums[cx] > nums[cx+1]\n            if int(isPeak) == arr[cx]:\n                return\n            arr[cx] = int(isPeak)\n            value = arr[cx]\n            p = cx\n            # set value at position p  \n            tree[p + n] = value  \n            p = p + n;  \n            # move upward and update parents  \n            i = p\n            while i > 1 : \n                tree[i >> 1] = tree[i] + tree[i ^ 1]\n                i >>= 1; \n                \n                \n        # function to get sum on interval [l, r)  \n        def query(l, r) :  \n            res = 0;  \n            # loop to find the sum in the range  \n            l += n \n            r += n\n            while l < r : \n                if (l & 1) : \n                    res += tree[l]\n                    l += 1\n                if (r & 1) : \n                    r -= 1; \n                    res += tree[r]\n                l >>= 1\n                r >>= 1\n\n            return res\n        build(arr)\n        \n        ans = []\n        for qt,x,y in queries:\n            if qt == 1:\n                ans.append(query(x+1,y))\n            elif qt == 2:\n                nums[x] = y\n                updateTreeNode(x)\n                updateTreeNode(x+1)\n                updateTreeNode(x-1)\n        return ans\n                \n                \n            ",
    "submit_ts": "1718506932",
    "subm_id": "1289635743"
}