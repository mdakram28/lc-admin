{
    "username": "jaysukh_409",
    "submission": "class Solution {\npublic:\n    int n;\n    vector<int> BIT;\n    void update(int ind, int val)\n    {\n        while (ind <= n)\n\t\t{\n\t\t\tBIT[ind] += val;\n\t\t\tind += (ind & -ind);\n\t\t}\n    }\n    int query(int ind)\n\t{\n\t\tint ans = 0;\n\t\twhile (ind > 0)\n\t\t{\n\t\t\tans += BIT[ind];\n\t\t\tind -= (ind & -ind);\n\t\t}\n\t\treturn ans;\n\t}\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) \n    {\n        n = nums.size();\n        BIT.resize(n + 2, 0);\n        vector<int> isPeak(n, 1);\n        for (int i = 0; i < n; i++)\n        {\n            if (i && nums[i] <= nums[i - 1]) isPeak[i] = 0;\n            if (i != n - 1 && nums[i] <= nums[i + 1]) isPeak[i] = 0;\n            if (i == 0 || i == n - 1) isPeak[i] = 0;\n            update(i + 1, isPeak[i]);\n        }\n        cout << query(n) << \"\\n\";\n        vector<int> ans;\n        for (auto i : queries)\n        {\n            if (i[0] == 1)\n            {\n                int range = i[2] - i[1] + 1;\n                if (range <= 2)\n                {\n                    ans.push_back(0);\n                    continue;\n                }\n                int sum = query(i[2]);\n                cout << \"Sum: \" << sum <<\"\\n\";\n                sum -= query(i[1] + 1);\n                ans.push_back(sum);\n            }\n            else\n            {\n                // Update current\n                int curStatus = isPeak[i[1]];\n                int ind = i[1];\n                update(ind + 1, -curStatus);\n                nums[ind] = i[2];\n                isPeak[ind] = 1;\n                if (ind && nums[ind] <= nums[ind - 1]) isPeak[ind] = 0;\n                if (ind != n - 1 && nums[ind] <= nums[ind + 1]) isPeak[ind] = 0;\n                if (ind == 0 || ind == n - 1) isPeak[ind] = 0;\n                update(ind + 1, isPeak[ind]);\n                \n                // update previous\n                if (i[1])\n                {\n                    ind = i[1] - 1;\n                    curStatus = isPeak[ind];\n                    update(ind + 1, -curStatus);\n                    isPeak[ind] = 1;\n                    if (ind && nums[ind] <= nums[ind - 1]) isPeak[ind] = 0;\n                    if (ind != n - 1 && nums[ind] <= nums[ind + 1]) isPeak[ind] = 0;\n                    if (ind == 0 || ind == n - 1) isPeak[ind] = 0;\n                    update(ind + 1, isPeak[ind]);\n                }\n                \n                // update next\n                if (i[1] != n - 1)\n                {\n                    ind = i[1] + 1;\n                    curStatus = isPeak[ind];\n                    update(ind + 1, -curStatus);\n                    isPeak[ind] = 1;\n                    if (ind && nums[ind] <= nums[ind - 1]) isPeak[ind] = 0;\n                    if (ind != n - 1 && nums[ind] <= nums[ind + 1]) isPeak[ind] = 0;\n                    if (ind == 0 || ind == n - 1) isPeak[ind] = 0;\n                    update(ind + 1, isPeak[ind]);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507849.0
}