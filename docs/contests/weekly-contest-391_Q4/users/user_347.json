{
    "username": "pipixia-9527",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length;\n        \n        Integer[] id1 = new Integer[n];\n        Integer[] id2 = new Integer[n];\n        Integer[] id3 = new Integer[n];\n        Integer[] id4 = new Integer[n];\n        for(int i = 0; i < n; i++) {\n            id1[i] = i;\n            id2[i] = i;\n            id3[i] = i;\n            id4[i] = i;\n        }\n        Arrays.sort(id1, (x, y)->{\n            return points[x][0] + points[x][1] - (points[y][0] + points[y][1]);\n        });\n        Arrays.sort(id2, (x, y)->{\n            return points[x][0] - points[x][1] - (points[y][0] - points[y][1]);\n        });\n        Arrays.sort(id3, (x, y)->{\n            return -points[x][0] + points[x][1] - (-points[y][0] + points[y][1]);\n        });\n        Arrays.sort(id4, (x, y)->{\n            return -points[x][0] - points[x][1] - (-points[y][0] - points[y][1]);\n        });\n        // Arrays.sort(id1, (x, y)->{return x - y;});\n        int ans = (1 << 30);\n        for(int i = 0; i < n; i++) {\n            int l = 0, r = n - 1;\n            while(id1[l] == i)l++;\n            while(id1[r] == i)r--;\n            l = id1[l];\n            r=id1[r];\n            int max1 = (points[r][0] + points[r][1]) - (points[l][0] + points[l][1]);\n            \n            l = 0;\n            r = n - 1;\n            while(id2[l] == i)l++;\n            while(id2[r] == i)r--;\n            l = id2[l];\n            r=id2[r];\n            int max2 = (points[r][0] - points[r][1]) - (points[l][0] - points[l][1]);\n            \n              l = 0;\n            r = n - 1;\n            while(id3[l] == i)l++;\n            while(id3[r] == i)r--;\n            l = id3[l];\n                  r=id3[r];\n            int max3 = (-points[r][0] + points[r][1]) - (-points[l][0] + points[l][1]);\n            \n            l = 0;\n            r = n - 1;\n            while(id4[l] == i)l++;\n            while(id4[r] == i)r--;\n                l = id4[l];\n                  r=id4[r];\n            int max4 = (-points[r][0] - points[r][1]) - (-points[l][0] - points[l][1]);\n            int max = Math.max(Math.max(max1, max2), Math.max(max3, max4));\n            System.out.println(max1 + \" \" + max2 +\" \" + max3 +\" \" +max4);\n            ans = Math.min(max,ans);\n        }\n        return ans;\n         \n    }\n}"
}