{
    "username": "studysniped",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        # 2D DP :(((((\n        \n        dp = [[0]*(max(nums)+1) for _ in range(len(nums))]\n\n        # base case: i = 0: dp[0][j] = 1 for 0 leq j leq a1\n        for i in range(nums[0] + 1):\n            dp[0][i] = 1\n\n        # recurrence: i > 0 and 0 <= j <= a_i, dp[i][j] = sum(dp[i - 1][k]) \n        # for k s.t. 0 <= k <= min(j, a_i_1 - (a_i - j))\n        for i in range(1, len(nums)):\n            for j in range(nums[i] + 1):\n                for k in range(min(j, nums[i - 1] - (nums[i] - j)) + 1):\n                    dp[i][j] = (dp[i][j] + dp[i - 1][k])\n\n        return sum(dp[len(nums) - 1]) % (10**9+7)\n\n\n\n        \"\"\"\n        n = len(nums)\n        MOD = 10**9 + 7\n        \n        # Initialize dp array\n        dp = [[0] * (max(nums) + 1) for _ in range(n)]\n        \n        # Base case\n        for j in range(nums[0] + 1):\n            dp[0][j] = 1\n        \n        # Fill dp array\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                for k in range(min(j, nums[i-1] - (nums[i] - j)) + 1):\n                    dp[i][j] = (dp[i][j] + dp[i-1][k]) % MOD\n        \n        # Sum up the final row to get the result\n        result = sum(dp[n-1]) % MOD\n        \n        return result\n        \"\"\"",
    "submit_ts": "1723346967",
    "subm_id": "1351589036"
}