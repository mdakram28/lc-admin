{
    "username": "deepikak13",
    "submission": "var canReachCorner = function(maxWidth, maxHeight, circleArray) { \n    function breadthFirstSearch(graphArray, initialNode, endNode1, endNode2, nodeCount) { \n        const nodeQueue = []; \n        const visitedNodes = Array(nodeCount + 4).fill(false); \n        nodeQueue.push(initialNode); \n        visitedNodes[initialNode] = true; \n \n        while (nodeQueue.length > 0) { \n            const currentNode = nodeQueue.shift(); \n            for (const neighborNode of graphArray[currentNode]) { \n                if (!visitedNodes[neighborNode]) { \n                    nodeQueue.push(neighborNode); \n                    visitedNodes[neighborNode] = true; \n                } \n            } \n        } \n \n        return visitedNodes[endNode1] || visitedNodes[endNode2]; \n    } \n \n    const circleCount = circleArray.length; \n    const graphArray = Array(circleCount + 4).fill(null).map(() => []); \n    const circles = circleArray.map(circle => [circle[0], circle[1], circle[2]]); \n \n    for (let i = 0; i < circleCount; ++i) { \n        if (circles[i][0] <= circles[i][2]) { \n            graphArray[circleCount].push(i); \n            graphArray[i].push(circleCount); \n        } \n        if (maxWidth - circles[i][0] <= circles[i][2]) { \n            graphArray[circleCount + 2].push(i); \n            graphArray[i].push(circleCount + 2); \n        } \n        if (circles[i][1] <= circles[i][2]) { \n            graphArray[circleCount + 1].push(i); \n            graphArray[i].push(circleCount + 1); \n        } \n        if (maxHeight - circles[i][1] <= circles[i][2]) { \n            graphArray[circleCount + 3].push(i); \n            graphArray[i].push(circleCount + 3); \n        } \n        for (let j = i + 1; j < circleCount; ++j) { \n            const deltaX = circles[i][0] - circles[j][0]; \n            const deltaY = circles[i][1] - circles[j][1]; \n            const circleDistance = Math.sqrt(deltaX * deltaX + deltaY * deltaY); \n            if (circles[i][2] + circles[j][2] >= circleDistance) { \n                graphArray[i].push(j); \n                graphArray[j].push(i); \n            } \n        } \n    } \n \n    return !(breadthFirstSearch(graphArray, circleCount, circleCount + 1, circleCount + 2, circleCount + 4) || \n             breadthFirstSearch(graphArray, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4)); \n};\n",
    "submit_ts": "1722139100",
    "subm_id": "1335807868"
}