{
    "username": "sbiswas165",
    "submission": "class Solution {\n    \n    class P {\n        int r, c;\n        P(int r, int c) {\n            this.r = r;\n            this.c = c;\n        }\n    }\n    \n    public int minimumDistance(int[][] points) {\n        int smxi = 0;\n        int smni = 0;\n        int dmxi = 0;\n        int dmni = 0;\n        \n        ArrayList<P> pts = new ArrayList<P>();\n        for (int[] point : points) {\n            pts.add(new P(point[0], point[1]));\n        }\n        \n        for (int i = 0; i < pts.size(); i++) {\n            if (pts.get(i).r + pts.get(i).c > pts.get(smxi).r + pts.get(smxi).c) {\n                smxi = i;\n            }\n            \n            if (pts.get(i).r + pts.get(i).c < pts.get(smni).r + pts.get(smni).c) {\n                smni = i;\n            }\n            \n            if (pts.get(i).r - pts.get(i).c > pts.get(dmxi).r - pts.get(dmxi).c) {\n                dmxi = i;\n            }\n            \n            if (pts.get(i).r - pts.get(i).c < pts.get(dmni).r - pts.get(dmni).c) {\n                dmni = i;\n            }\n            \n        }\n        \n        \n        int a = solve(exclude(pts, smxi));\n        int b = solve(exclude(pts, smni));\n        int c = solve(exclude(pts, dmxi));\n        int d = solve(exclude(pts, dmni));\n        \n        return min(a, b, c, d);\n    }\n    \n    public int min(int a, int b, int c, int d) {\n        int A = Math.min(a, b);\n        int C = Math.min(c, d);\n        return Math.min(A, C);\n    }\n    \n    public ArrayList<P> exclude(ArrayList<P> points, int t) {\n        ArrayList<P> newList = new ArrayList<P>();\n        for (int i = 0; i < points.size(); i++) {\n            if (i == t) continue;\n            newList.add(new P(points.get(i).r, points.get(i).c));\n        }\n        return newList;\n    }\n    \n    public int solve(ArrayList<P> points) {\n        ArrayList<Integer> sums = new ArrayList<Integer>();\n        ArrayList<Integer> diff = new ArrayList<Integer>();\n        for (P p : points) {\n            sums.add(p.r + p.c);\n            diff.add(p.r - p.c);\n        }\n        \n        Collections.sort(sums);\n        Collections.sort(diff);\n        \n        return Math.max(sums.get(sums.size()-1) - sums.get(0), diff.get(diff.size()-1) - diff.get(0));\n    }\n}"
}