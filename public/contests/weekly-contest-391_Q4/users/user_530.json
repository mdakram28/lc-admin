{
    "username": "BadalArya",
    "submission": "class Solution {\npublic:\n    void MaxDist(vector<pair<int, int> >& A, int N)\n    {\n        // Vectors to store maximum and\n        // minimum of all the four forms\n        vector<int> V(N), V1(N);\n\n        for (int i = 0; i < N; i++) {\n            V[i] = A[i].first + A[i].second;\n            V1[i] = A[i].first - A[i].second;\n        }\n\n        // Sorting both the vectors\n        sort(V.begin(), V.end());\n        sort(V1.begin(), V1.end());\n\n        int maximum\n            = max(V.back() - V.front(), V1.back() - V1.front());\n\n    }\n    int minimumDistance(vector<vector<int>>& A) {\n        multiset<int> V, V1;\n        for(int i = 0; i < A.size(); i++) {\n            V.insert(A[i][0] + A[i][1]);\n            V1.insert(A[i][0] - A[i][1]);\n        }\n        int ans = INT_MAX;\n        for(int i = 0; i < A.size(); i++) {\n            int x = A[i][0] + A[i][1];\n            int y = A[i][0] - A[i][1];\n            auto it1 = V.upper_bound(x - 1);\n            auto it2 = V1.upper_bound(y - 1);\n            V.erase(it1);\n            V1.erase(it2);\n            \n            int V_F = *V.begin();\n            int V1_F = *V1.begin();\n            auto V_ = V.end();\n            auto V1_ = V1.end();\n            V_ = prev(V_);\n            V1_ = prev(V1_);\n            int V_B = *V_;\n            int V1_B = *V1_;\n            ans = min(ans, max(V_B - V_F, V1_B - V1_F));\n            V.insert(x);\n            V1.insert(y);\n        }\n        return ans;\n    }\n};"
}