{
    "username": "asdfanuiu",
    "submission": "/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\n\nclass TrieNode {\n    constructor() {\n        this.isWord = false;\n        this.arr = Number.MAX_VALUE;\n        this.children = {};\n    }\n}\n\n\nconst createTree = (root, word, index, costs) => {\n    let temp = root;\n    for (let i = 0; i < word.length; i++) {\n        let cur = word[i];\n        if (!(cur in temp.children)) {\n            let node = new TrieNode();\n            temp.children[cur] = node;\n        }\n        temp = temp.children[cur];\n        if (i === word.length - 1) {\n            temp.isWord = true;\n            temp.arr = Math.min(temp.arr, costs[index]);\n        }\n    }\n}\nvar minimumCost = function(target, words, costs) {\n    let n = target.length;\n    let m = words.length;\n    \n    let root = new TrieNode();\n    for (let i = 0; i < words.length; i++) {\n        createTree(root, words[i], i, costs);\n    }\n    let dp = new Array(n).fill(-1);\n    // dp[i] = Math.min(dp[i], dp[j] + costs[w] where target[j: i] === words[w]);\n    \n    \n    let dfs = (index) => {\n        if (index === n) return 0;\n        if (dp[index] >= 0) return dp[index];\n        let temp = root;\n        let cost = Number.MAX_VALUE;\n        for (let i = index; i < n; i++) {\n            let cur = target[i];\n            if (cur in temp.children) {\n                temp = temp.children[cur];\n                if (temp.arr !== Number.MAX_VALUE) cost = Math.min(cost, temp.arr + dfs(i + 1));\n                \n            } else {\n                break;\n            }\n        }\n        dp[index] = cost;\n        return cost;\n    }\n    let w = dfs(0);\n    return w === Number.MAX_VALUE ? -1 : w;\n};",
    "submit_ts": "1720321009",
    "subm_id": "1312310957"
}