{
    "username": "czjnbb",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def diam(e):\n            \n            l = len(e) + 1\n            d = defaultdict(list)\n            deg = [0] * l\n            \n            for a,b in e:\n                d[a].append(b)\n                d[b].append(a)\n                deg[a] += 1\n                deg[b] += 1\n            \n            stack = [i for i in range(l) if deg[i] == 1]\n            lev = 0\n            lastl = len(stack)\n            \n            while stack:\n                lev += 1\n                ll = len(stack)\n                lastl = ll\n                for _ in range(ll):\n                    cur = stack.pop(0)\n                    for nxt in d[cur]:\n                        deg[nxt] -= 1\n                        if deg[nxt] == 1:\n                            stack.append(nxt)\n            \n            if lastl > 1:\n                return [lev, lev]\n            else:\n                return [lev, lev - 1]\n        \n        \n        l1 = len(edges1)\n        l2 = len(edges2)\n        \n        if l1 == 0 and l2 == 0:\n            return 1\n        \n        if l1 > 0:\n            d11, d12 = diam(edges1)\n        else:\n            d11 = d12 = 0\n            \n        if l2 > 0:\n            d21, d22 = diam(edges2)\n        else:\n            d21 = d22 = 0\n        \n        # print(d11, d12, d21, d22)\n                \n        res = max(d11 + d12, d21 + d22) - 1\n        \n        if d11 == 0 and d12 == 0:\n            d11 = 1\n        elif d11 == 1 and d12 == 1:\n            d11 = 2\n        \n        if d21 == 0 and d22 == 0:\n            d21 = 1\n        elif d21 == 1 and d22 == 1:\n            d21 = 2\n        \n        return max(d12 + d22 + 1, res)\n                    \n        ",
    "submit_ts": "1719719256",
    "subm_id": "1304437509"
}