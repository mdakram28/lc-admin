{
    "username": "Aryan47_47",
    "submission": "class TrieNode {\npublic:\n    decltype(std::unordered_map<char, TrieNode*>()) children;\n\n    vector<pair<int, int>> word_ends;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n   Trie() : root(new TrieNode()) {}\n\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            auto it = node->children.find(c);\nif (it == node->children.end()) {\n    node->children[c] = new TrieNode();\n}\n\n            node = node->children[c];\n        }\n        node->word_ends.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        decltype(target.size()) n = target.size();\n\n        vector<int> dp(n + 1);\nstd::fill(dp.begin(), dp.end(), INT_MAX);\n\n        dp[0] = 0;\n\n        Trie trie;\n        int i = 0;\nfor (const auto& word : words) {\n    trie.insert(word, i, costs[i]);\n    ++i;\n}\n\n\n        for (int i = 0; i < n; ++i) {\n            if (auto value = dp[i]; value == INT_MAX) {\n    continue;\n}\n\n\n            decltype(trie.root) node = trie.root;\n\n            for (int j = i; j < n; ++j) {\n                if (auto it = node->children.find(target[j]); it == node->children.end()) {\n    break;\n}\n\n                node = node->children[target[j]];\n                for (auto& p : node->word_ends) {\n                    int word_len = words[p.first].size();\n                    if (auto index = i + word_len; index <= n) {\n    dp[index] = std::min(dp[index], dp[i] + p.second);\n}\n\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323858",
    "subm_id": "1312385749"
}