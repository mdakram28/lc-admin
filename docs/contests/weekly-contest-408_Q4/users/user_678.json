{
    "username": "AayushAgarwal001",
    "submission": "class Solution {\npublic:\n    int breadthFirstSearch(vector<vector<int>> &adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visitedNodes(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visitedNodes[startNode] = 1;\n        \n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighborNode : adjacencyList[currentNode]) {\n                if (!visitedNodes[neighborNode]) {\n                    nodeQueue.push(neighborNode);\n                    visitedNodes[neighborNode] = 1;\n                }\n            }\n        }\n        return visitedNodes[targetNode1] || visitedNodes[targetNode2];\n    }\n    \n    bool canReachCorner(int width, int height, vector<vector<int>>& circleSpecifications) {\n        vector<pair<pair<int, int>, int>> circles(circleSpecifications.size());\n        vector<vector<int>> adjacencyList(circleSpecifications.size() + 4);\n        int numberOfCircles = circleSpecifications.size();\n        \n        for (int i = 0; i < numberOfCircles; ++i) {\n            circles[i].first.first = circleSpecifications[i][0];\n            circles[i].first.second = circleSpecifications[i][1];\n            circles[i].second = circleSpecifications[i][2];\n        }\n        \n        for (int i = 0; i < numberOfCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjacencyList[numberOfCircles].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles);\n            }\n            if (width - circles[i].first.first <= circles[i].second) {\n                adjacencyList[numberOfCircles + 2].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjacencyList[numberOfCircles + 1].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 1);\n            }\n            if (height - circles[i].first.second <= circles[i].second) {\n                adjacencyList[numberOfCircles + 3].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 3);\n            }\n            for (int j = i + 1; j < numberOfCircles; ++j) {\n                double distanceBetweenCenters = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                                     pow(circles[i].first.second - circles[j].first.second, 2));\n                int sumOfRadii = circles[i].second + circles[j].second;\n                if (sumOfRadii >= distanceBetweenCenters) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n        \n        int blockedPath = 0;\n        blockedPath = max(blockedPath, breadthFirstSearch(adjacencyList, numberOfCircles, numberOfCircles + 1, numberOfCircles + 2, numberOfCircles + 4)); // Check for bottom-left corner\n        blockedPath = max(blockedPath, breadthFirstSearch(adjacencyList, numberOfCircles + 3, numberOfCircles + 2, numberOfCircles + 1, numberOfCircles + 4)); // Check for top-right corner\n        if (blockedPath) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722138282",
    "subm_id": "1335786730"
}