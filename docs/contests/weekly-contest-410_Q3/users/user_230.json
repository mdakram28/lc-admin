{
    "username": "g129512",
    "submission": "from typing import List\n\nM=10**9+7\n\nclass FenwickTree:\n    # \u53ef\u7528\u4e0b\u6807\u4e3a [0,maxN]\n    def __init__(self, maxN) -> None:\n        self.f = [0] * (maxN + 2)\n        pass\n    \n    # \u4e0b\u6807i\u589e\u52a0v\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\n    def add(self, i, v):\n        i+=1\n        while i<len(self.f):\n            self.f[i]+=v\n            self.f[i]%=M\n            i+=i&-i\n    \n    # \u67e5\u8be2\u95ed\u533a\u95f4[0,i]\u7684\u548c\n    def query(self,i):\n        i+=1\n        res=0\n        while i>0:\n            res+=self.f[i]\n            res%=M\n            i-=i&-i\n        return res\n\n    # \u67e5\u8be2\u95ed\u533a\u95f4[l,r]\u7684\u548c\n    def queryRange(self,l, r):\n        if r<l:return 0\n        return (self.query(r)-self.query(l-1)+M)%M\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        n=len(nums)\n\n        dp=FenwickTree(nums[0])\n        for i in range(0,nums[0]+1):\n            dp.add(i,1)\n        \n        def min(a,b):\n            return a if a<=b else b\n\n        for i in range(1,n):\n            ndp=FenwickTree(nums[i])\n            for j in range(0,nums[i]+1):\n                k=nums[i]-j\n                s=min(nums[i-1]-k, j)\n                q=dp.queryRange(0,s)\n                ndp.add(j,q)\n            dp=ndp\n        \n        # for j in range(0,nums[-1]+1):\n        #     print(dp.query(j))\n\n        return dp.queryRange(0,nums[-1])\n",
    "submit_ts": "1723345338",
    "subm_id": "1351553611"
}