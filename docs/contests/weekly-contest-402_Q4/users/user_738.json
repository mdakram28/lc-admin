{
    "username": "ferferge",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        from sortedcontainers import SortedList\n        sd = SortedList()\n        for i, num in enumerate(nums):\n            if i == 0 or i == len(nums) - 1: continue\n            if num > nums[i - 1] and num > nums[i + 1]:\n                sd.add(i)\n        \n        def update(idx):\n            if nums[idx - 1] < nums[idx] > nums[idx + 1]:\n                if idx not in sd:\n                    sd.add(idx)\n            else:\n                if idx in sd:\n                    sd.remove(idx)\n        \n        def f1(idx, val):\n            if 0 < idx < len(nums) - 1:\n                update(idx)\n            if 0 < idx + 1 < len(nums) - 1:\n                update(idx + 1)\n            if 0 < idx - 1 < len(nums) - 1:\n                update(idx - 1)\n                \n            \n        \n        def count_peaks(li, ri):\n            if li == ri: return 0\n            right = sd.bisect_left(ri)\n            if right < len(sd) and sd[right] == ri:\n                right -= 1\n            left = sd.bisect_left(li)\n\n            return  sd.bisect_right(ri - 1) - sd.bisect_right(li)\n        \n        answer = []\n        for query in queries:\n            if query[0] == 1:  # \u7c7b\u578b 1 \u67e5\u8be2\n                li, ri = query[1], query[2]\n                answer.append(count_peaks(li, ri))\n            elif query[0] == 2:  # \u7c7b\u578b 2 \u67e5\u8be2\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali  # \u66f4\u65b0\u503c\n                f1(indexi, vali)\n                \n        return answer",
    "submit_ts": 1718507746.0
}