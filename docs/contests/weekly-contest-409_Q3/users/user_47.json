{
    "username": "peterrockwave",
    "submission": "def find_last_leq(l, n):\n    lo = -1\n    hi = len(l)\n    while lo!=hi-1:\n        mi = (lo+hi)//2\n        if l[mi][0] <= n:\n            lo = mi\n        else:\n            hi = mi\n    return lo\n\ndef find_first_geq(l, n):\n    lo = -1\n    hi = len(l)\n    while lo!=hi-1:\n        mi = (lo+hi)//2\n        if l[mi][0] < n:\n            lo = mi\n        else:\n            hi = mi\n    return hi\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        currdist = n-1\n        usedsegments = []\n\n        for q in queries:\n            if q[0] < q[1]:\n                # see if it's contained in anything else\n                prev = find_last_leq(usedsegments, q[0])\n                contained = False\n                if prev!=-1:\n                    if usedsegments[prev][1] >= q[1]:\n                        contained = True\n                if not contained:\n                    # see if it contains anything else\n                    index = find_first_geq(usedsegments, q[0])\n                    while index < len(usedsegments) and usedsegments[index][1]<=q[1]:\n                        rq = usedsegments.pop(index)\n                        currdist += rq[1]-rq[0]-1\n                    usedsegments.insert(index, q)\n                    currdist -= q[1]-q[0]-1\n            ans.append(currdist)\n        return ans",
    "submit_ts": "1722740118",
    "subm_id": "1343711684"
}