{
    "username": "jszqlew",
    "submission": "import sys\nsys.setrecursionlimit(10000000)\nclass Solution:\n    def waysToReachStair(self, k: int) -> int:\n        # print('here')\n        @cache\n        def f(i, j, justback):\n            if i == 1 and j == 0 and justback == False:\n                return 1\n            if j < 0:\n                return 0\n            if i < 0:\n                return 0\n            if justback:\n                return f(i - 1, j, False)\n            return f(i - 2 ** (j - 1), j - 1, False) + f(i - 2 ** (j - 1), j - 1, True)\n        \n        n = m = 40\n        # dp = [[0] * n for _ in range(m)]\n        # for i in range(n - 1):\n        #     for j in range(m - 1):\n        #         if i > j:\n        #             continue\n        #         dp[i][j] = dp[i - 1][j] + dp[i][j - 1]\n        tot = 0\n        for jumps in range(n):\n            for backs in range(jumps + 2):\n                if 2 ** jumps - backs == k:\n                    # print(jumps, backs)\n                    # print(tot)\n                    tot += f(2 ** jumps + backs, jumps, False)\n                    # print(tot)\n                    tot += f(2 ** jumps + backs, jumps, True)\n                    # print(tot)\n        # imagine it was +1, then we would have 2 ** jumps - x becomes 2 ** jumps + x, now we can dp \n        return tot\n            \n        ",
    "submit_ts": "1716089122",
    "subm_id": "1261833673"
}