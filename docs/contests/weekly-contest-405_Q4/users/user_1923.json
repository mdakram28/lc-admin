{
    "username": "arshadali7398",
    "submission": "struct Node{\n    Node* links[26];\n    bool flag;\n    int cost;\n    bool containKey(char ch){\n        return links[ch-'a']!=NULL;\n    }\n    void put(char ch,Node* node){\n        links[ch-'a']=node;\n    }\n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n    void setcost(int x){\n        cost=x;\n    }\n    int getcost(){\n        return cost;\n    }\n    void setEnd(){\n        flag=true;\n    }\n    bool isEnd(){\n        return flag;\n    }\n};\n\nclass Trie {\npublic: Node* root;\npublic:\n    Trie() {\n        root=new Node();\n    }\n\n    Node* getnode(){\n        return root;\n    }\n    \n    void insert(string word,int x) {\n        Node * node=root;\n        for(int i=0;i<word.length();i++){\n            if(!node->containKey(word[i])){\n                node->put(word[i],new Node());\n            }\n                node=node->get(word[i]);\n        }\n        if(node->isEnd()){\n            node->setcost(min(x,node->getcost()));\n        }\n        else{\n            node->setcost(x);\n        }\n        node->setEnd();\n    }\n    \n    bool search(string word) {\n        Node* node=root;\n        for(int i=0;i<word.length();i++){\n            if(node->containKey(word[i])){\n                node=node->get(word[i]);\n            }\n            else{\n                return false;\n            }\n        }\n        return node->isEnd();\n    }\n    \n    bool startsWith(string prefix) {\n        Node* node=root;\n        for(int i=0;i<prefix.length();i++){\n            if(!node->containKey(prefix[i])){\n                return false;\n            }\n            node=node->get(prefix[i]);\n        }\n        return true;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n=words.size();\n        for(int i=0;i<n;i++){\n            trie.insert(words[i],costs[i]);\n        }\n\n        int m=target.length();\n        vector<int> dp(m+3,0);\n        Node* root=trie.getnode();\n\n        for(int i=m-1;i>=0;i--){\n            int ans=1e9;\n            Node* node=root;\n\n            int d=i;\n            while(d<m && node->containKey(target[d])){\n                node=node->get(target[d]);\n                d++;\n                if(node->isEnd()){\n                    ans=min(ans,node->getcost()+dp[d]);\n                }\n            }\n            dp[i]=ans;\n        }\n        int ans=dp[0];\n        if(ans==1e9)return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720323948",
    "subm_id": "1312387956"
}