{
    "username": "DoubleLei",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = cost\n    \n    def search(self, target, end):\n        node = self.root\n        matches = []\n        for i in range(end, -1, -1):\n            char = target[i]\n            if char not in node.children:\n                break\n            node = node.children[char]\n            if node.cost != float('inf'):\n                matches.append((i, node.cost))\n        return matches\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        d = {}\n        for word, cost in zip(words, costs):\n            d[word] = min(d.get(word, float('inf')), cost)\n        \n        trie = Trie()\n        for word in d:\n            trie.insert(word[::-1], d[word])\n\n        for j in range(1, n + 1):\n            matches = trie.search(target, j - 1)\n            for i, cost in matches:\n                dp[j] = min(dp[j], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n\n",
    "submit_ts": "1720321204",
    "subm_id": "1312316413"
}