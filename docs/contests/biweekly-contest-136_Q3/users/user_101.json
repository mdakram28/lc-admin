{
    "username": "callmepandey",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vector < pair < int,int> > values;\n        for(int i = 0;i<(n + 1)/2;++i) {\n            for(int j = 0;j<(m + 1)/2;++j) {\n                set < pair <int,int> > pos;\n                pos.insert({i , j});\n                pos.insert({n - i - 1 , j});\n                pos.insert({i , m - j - 1});\n                pos.insert({n - i - 1 , m - j - 1});\n                int oc = 0;\n                for(auto a : pos) {\n                    oc += grid[a.first][a.second];\n                }\n                values.push_back({oc , pos.size()});\n                \n            }\n        }\n        int x = values.size();\n        // vector < vector <int> > dp(x , vector <int>(4 , -1));\n        // function < int(int , int) > memo = [&](int i , int c) {\n        //     if(i == x) {\n        //         if(c == 0) return 0;\n        //         return n * m + 20;\n        //     }  \n        //     if(dp[i][c] != -1) return dp[i][c];\n        //     int &ans = dp[i][c];\n        //     ans = memo(i + 1 , c) + values[i].first;\n        //     ans = min(ans , memo(i + 1 , (c + values[i].second)%4) + values[i].second - values[i].first);\n        //     return ans;\n        // };\n        vector < int > dp(4 , n * m + 5);\n        dp[0] = 0;\n        for(int i = 0;i<x;++i) {\n            vector <int> ndp(4 , n * m + 5);\n            for(int j = 0;j<4;++j) {\n                ndp[j] = min(ndp[j] , dp[j] + values[i].first);\n                ndp[(j + values[i].second)%4] = min(ndp[(j + values[i].second)%4] , dp[j] + values[i].second - values[i].first);\n            }\n            dp = ndp;\n        }\n        return dp[0];\n    }\n};",
    "submit_ts": "1722698420",
    "subm_id": "1343180044"
}