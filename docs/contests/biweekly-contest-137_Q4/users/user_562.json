{
    "username": "Eren",
    "submission": "#define fi first\n#define se second\nclass Solution {\npublic:\n    long long dp[505][505][4]{};\n    long long dn[505][505][4]{};\n    long long d1[505][505][4]{};\n    long long d2[505][505][4]{};\n    \n    long long maximumValueSum(vector<vector<int>>& board) {\n        const int n = board.size();\n        const int m = board.front().size();\n        long long ans = 0;\n\n        for(int i = 0; i < n; i++)\n            for(int j = 0; j < m; j++)\n                board[i][j] += 1e9+1;\n        {\n            long long cmax[505]{}, rmax[505]{};\n            for(int i = 1; i <= n; i++){\n                for(int j = 1; j <= m; j++) {\n                    long long val = (long long)board[i-1][j-1];\n                    dp[i][j][1] = max(dp[i][j-1][1], dp[i-1][j][1]);\n                    dp[i][j][1] = max(dp[i][j][1], val);\n                    dp[i][j][2] = max(dp[i][j-1][2], dp[i-1][j][2]);\n                    long long mxver = cmax[i];\n                    long long mxhor = rmax[j];\n                    dp[i][j][2] = max(dp[i][j][2], mxver + mxhor);\n                    dp[i][j][3] = max(dp[i][j][3], dp[i-1][j-1][1] + mxver + mxhor);\n                    dp[i][j][2] = max(dp[i][j][2], dp[i-1][j-1][1] + val);\n                    dp[i][j][3] = max(dp[i][j-1][3], dp[i-1][j][3]);\n                    dp[i][j][3] = max(dp[i][j][3], dp[i-1][j-1][2] + val);\n                    ans = max(ans, dp[i][j][3]);\n                    cmax[i] = max(cmax[i], (long long)board[i-1][j-1]);\n                    rmax[j] = max(rmax[j], (long long)board[i-1][j-1]);\n                }\n            }\n        }\n        {\n            long long cmax[505]{}, rmax[505]{};\n        for(int i = n; i >= 1; i--){\n            for(int j = m; j >= 1; j--) {\n                long long val = (long long)board[i-1][j-1];\n                dn[i][j][1] = max(dn[i][j+1][1], dn[i+1][j][1]);\n                dn[i][j][1] = max(dn[i][j][1], val);\n                dn[i][j][2] = max(dn[i][j+1][2], dn[i+1][j][2]);\n                long long mxver = cmax[i];\n                long long mxhor = rmax[j];\n                dn[i][j][2] = max(dn[i][j][2], mxver + mxhor);\n                dn[i][j][3] = max(dn[i][j][3], dn[i+1][j+1][1] + mxver + mxhor);\n                dn[i][j][2] = max(dn[i][j][2], dn[i+1][j+1][1] + val);\n                dn[i][j][3] = max(dn[i][j+1][3], dn[i+1][j][3]);\n                dn[i][j][3] = max(dn[i][j][3], dn[i+1][j+1][2] + val);\n                ans = max(ans, dn[i][j][3]);\n                cmax[i] = max(cmax[i], (long long)board[i-1][j-1]);\n                rmax[j] = max(rmax[j], (long long)board[i-1][j-1]);\n            }\n        }\n        }\n        {\n            long long cmax[505]{}, rmax[505]{};\n        for(int i = 1; i <= n; i++){\n            for(int j = m; j >= 1; j--) {\n                long long val = (long long)board[i-1][j-1];\n                d1[i][j][1] = max(d1[i][j+1][1], d1[i-1][j][1]);\n                d1[i][j][1] = max(d1[i][j][1], val);\n                d1[i][j][2] = max(d1[i][j+1][2], d1[i-1][j][2]);\n                long long mxver = cmax[i];\n                long long mxhor = rmax[j];\n                d1[i][j][2] = max(d1[i][j][2], mxver + mxhor);\n                d1[i][j][3] = max(d1[i][j][3], d1[i-1][j+1][1] + mxver + mxhor);\n\n                d1[i][j][2] = max(d1[i][j][2], d1[i-1][j+1][1] + val);\n                d1[i][j][3] = max(d1[i][j+1][3], d1[i-1][j][3]);\n                d1[i][j][3] = max(d1[i][j][3], d1[i-1][j+1][2] + val);\n                ans = max(ans, d1[i][j][3]);\n                cmax[i] = max(cmax[i], (long long)board[i-1][j-1]);\n                rmax[j] = max(rmax[j], (long long)board[i-1][j-1]);\n            }\n        }\n        }\n        {\n            long long cmax[505]{}, rmax[505]{};\n        for(int i = n; i >= 1; i--){\n            for(int j = 1; j <= m; j++) {\n                long long val = (long long)board[i-1][j-1];\n                d2[i][j][1] = max(d2[i][j-1][1], d2[i+1][j][1]);\n                d2[i][j][1] = max(d2[i][j][1], val);\n                d2[i][j][2] = max(d2[i][j-1][2], d2[i+1][j][2]);\n                long long mxver = cmax[i];\n                long long mxhor = rmax[j];\n                d2[i][j][2] = max(d2[i][j][2], mxver + mxhor);\n                d2[i][j][3] = max(d2[i][j][3], d2[i+1][j-1][1] + mxver + mxhor);\n                d2[i][j][2] = max(d2[i][j][2], d2[i+1][j-1][1] + val);\n                d2[i][j][3] = max(d2[i][j-1][3], d2[i+1][j][3]);\n                d2[i][j][3] = max(d2[i][j][3], d2[i+1][j-1][2] + val);\n                ans = max(ans, d2[i][j][3]);\n                cmax[i] = max(cmax[i], (long long)board[i-1][j-1]);\n                rmax[j] = max(rmax[j], (long long)board[i-1][j-1]);\n            }\n        }}\n\n\n        return ans - 3e9 - 3;\n    }\n};\n// 239",
    "submit_ts": "1723910289",
    "subm_id": "1359224524"
}