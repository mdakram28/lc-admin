{
    "username": "iiijjj",
    "submission": "class Solution {\npublic:\n    class Trie {\n    private:\n        struct Node {\n            unordered_map<char, Node*> children;\n            int minCost = INT_MAX;  // Store the minimum cost of any word ending here.\n        };\n\n        unique_ptr<Node> root;\n\n    public:\n        Trie() : root(new Node()) {}\n\n        void insert(const string& word, int cost) {\n            Node* node = root.get();\n            for (auto c : word) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new Node();\n                }\n                node = node->children[c];\n            }\n            node->minCost = min(node->minCost, cost);  // Update minimum cost at the end of the word\n        }\n\n        // Find the minimum cost to construct `target` from index 0 to `end`\n        void findAndUpdateDP(const string& target, vector<int>& dp) {\n            for (int start = 0; start < target.size(); ++start) {\n                Node* node = root.get();\n                for (int j = start; j < target.size() && node; ++j) {\n                    char c = target[j];\n                    if (node->children.count(c) == 0) break;\n                    node = node->children[c];\n                    if (node->minCost != INT_MAX && dp[start] != INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], dp[start] + node->minCost);\n                    }\n                }\n            }\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        trie.findAndUpdateDP(target, dp);\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323954",
    "subm_id": "1312388078"
}