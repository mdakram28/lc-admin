{
    "username": "HaoyuWang417",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        queue = deque([(1, 0, True)])\n        ways = defaultdict(int)\n        ways[(1, 0, True)] = 1\n\n        while queue:\n            position, jump, can_go_down = queue.popleft()\n\n            # Move up\n            next_position_up = position + (1 << jump)\n            if next_position_up <= k + 1:\n                if (next_position_up, jump + 1, True) not in ways:\n                    queue.append((next_position_up, jump + 1, True))\n                ways[(next_position_up, jump + 1, True)] += ways[(position, jump, can_go_down)]\n\n            # Move down\n            if position > 0 and can_go_down:\n                next_position_down = position - 1\n                if (next_position_down, jump, False) not in ways:\n                    queue.append((next_position_down, jump, False))\n                ways[(next_position_down, jump, False)] += ways[(position, jump, can_go_down)]\n\n        # Sum up all ways to reach stair k with any jump value\n        total_ways = sum(ways[(k, jump, can_go_down)] for jump in range(32) for can_go_down in [True, False])\n        return total_ways",
    "submit_ts": "1716088006",
    "subm_id": "1261801074"
}