{
    "username": "zac4",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int N = circles.length;\n        DSU dsu = new DSU(N + 4);\n        for (int i = 0; i < N; i++) {\n            int x1 = circles[i][0];\n            int y1 = circles[i][1];\n            int r1 = circles[i][2];\n            if (Math.abs(x1) <= r1) {\n                dsu.union(i, N);\n            }\n            if (Math.abs(x1 - X) <= r1) {\n                dsu.union(i, N + 1);\n            }\n            if (Math.abs(y1) <= r1) {\n                dsu.union(i, N + 2);\n            }\n            if (Math.abs(y1 - Y) <= r1) {\n                dsu.union(i, N + 3);\n            }\n            for (int j = i + 1; j < N; j++) {\n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                int r2 = circles[j][2];\n                if (isTouching(x1, y1, r1, x2, y2, r2)) {\n                    dsu.union(i, j);\n                }\n            }\n        }\n        if (dsu.find(N) == dsu.find(N + 1)) {\n            return false;\n        }\n        if (dsu.find(N + 2) == dsu.find(N + 3)) {\n            return false;\n        }\n        if (dsu.find(N) == dsu.find(N + 2)) {\n            return false;\n        }\n        if (dsu.find(N + 1) == dsu.find(N + 3)) {\n            return false;\n        }\n        return true;\n    }\n\n    boolean isTouching(int x1, int y1, int r1, int x2, int y2, int r2) {\n        double distance = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n        return distance <= r1 + r2;\n    }\n\n    class DSU {\n        int[] parents, rank;\n\n        DSU(int N) {\n            this.parents = new int[N];\n            this.rank = new int[N];\n            for (int i = 0; i < N; i++) {\n                parents[i] = i;\n            }\n        }\n\n        DSU(DSU origin) {\n            this.parents = origin.parents.clone();\n            this.rank = origin.rank.clone();\n        }\n\n        void union(int x, int y) {\n            int p_x = find(x);\n            int p_y = find(y);\n            if (p_x != p_y) {\n                if (rank[p_x] > rank[p_y]) {\n                    parents[p_y] = p_x;\n                } else if (rank[p_x] < rank[p_y]) {\n                    parents[p_x] = p_y;\n                } else {\n                    parents[p_y] = p_x;\n                    rank[p_x]++;\n                }\n            }\n        }\n\n        int find(int x) {\n            if (parents[x] != x) {\n                parents[x] = find(parents[x]);\n            }\n            return parents[x];\n        }\n    }\n}",
    "submit_ts": "1722138108",
    "subm_id": "1335782300"
}