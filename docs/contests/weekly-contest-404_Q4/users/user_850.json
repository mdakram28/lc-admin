{
    "username": "Tanguilol",
    "submission": "class Solution {\n    \n    private static class Node {\n        \n        List<Edge> edges = new ArrayList<>();\n        \n    }\n    \n    private static class Edge {\n        \n        Node source;\n        Node dest;\n        int out;\n        \n        public Edge(Node source, Node dest) {\n            this.source = source;\n            this.dest = dest;\n            this.out = 0;\n        }\n        \n    }\n    \n    private static class Pair {\n        \n        int f;\n        int s;\n        \n        public Pair(int f, int s) {\n            this.f = f;\n            this.s = s;\n        }\n    }\n    \n    \n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        Pair p1 = centerDist(edges1);\n        Pair p2 = centerDist(edges2);\n        \n        return Math.max(Math.max(p1.s, p2.s), p1.f + p2.f + 1);\n    }\n    \n    private Pair centerDist(int[][] edges) {\n        Node[] nodes = new Node[edges.length + 1];\n        \n        for (int i = 0; i < nodes.length; i++) {\n            nodes[i] = new Node();\n        }\n        \n        for (int i = 0; i < edges.length; i++) {\n            Node n1 = nodes[edges[i][0]];\n            Node n2 = nodes[edges[i][1]];\n            \n            n1.edges.add(new Edge(n1, n2));\n            n2.edges.add(new Edge(n2, n1));\n        }\n        \n        for (int i = 0; i < nodes.length; i++) {\n            populateDistances(nodes[i], new Edge(new Node(), nodes[i]));\n        }\n        \n        int maxmax = Integer.MIN_VALUE;\n        int min = Integer.MAX_VALUE;\n        //int center = -1;\n        \n        for (int i = 0; i < nodes.length; i++) {\n            int max = 0;\n            \n            for (Edge e : nodes[i].edges) {\n                max = Math.max(max, e.out);\n            }\n            \n            min = Math.min(min, max);\n            maxmax = Math.max(maxmax, max);\n            /*\n            if (min == max) {\n                center = i;\n            }\n            */\n        }\n        \n        //System.out.println(center + \" \" + min);\n        //System.out.println(min + \" \" + maxmax);\n        \n        return new Pair(min, maxmax);\n    }\n    \n    private int populateDistances(Node n, Edge inc) {\n        int max = 0;\n        \n        for (Edge e : n.edges) {\n            if (e.dest == inc.source) {\n                continue;\n            }\n            \n            if (e.out != 0) {\n                max = Math.max(max, e.out);\n                \n            } else {\n                e.out = populateDistances(e.dest, e);\n                max = Math.max(max, e.out);\n            }\n        }\n        \n        return max + 1;\n    }\n    \n}",
    "submit_ts": "1719719507",
    "subm_id": "1304443622"
}