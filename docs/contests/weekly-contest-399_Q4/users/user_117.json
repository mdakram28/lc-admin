{
    "username": "skyinde2",
    "submission": "\nclass Solution:\n    def maximumSumSubsequence(self, nums: list[int], queries: list[list[int]]) -> int:\n        depth = 0\n        while (1 << depth) < len(nums):\n            depth += 1\n\n        k = (1 << depth) - len(nums)\n        nums += [-999999] * k\n        n = len(nums)\n\n        t = [(0, 0, 0, 0)] * (n * 2)\n\n        def maintain(i: int, d: int):\n            if d == depth:\n                t[i] = (0, -999999, -999999, nums[i - start])\n            else:\n                l = 2 * i\n                r = 2 * i + 1\n                t[i] = (max(t[l][0] + t[r][0], t[l][0] + t[r][2], t[l][1] + t[r][0]),\n                        max(t[l][0] + t[r][1], t[l][0] + t[r][3], t[l][1] + t[r][1]),\n                        max(t[l][2] + t[r][0], t[l][2] + t[r][2], t[l][3] + t[r][0]),\n                        max(t[l][2] + t[r][1], t[l][2] + t[r][3], t[l][3] + t[r][1]))\n\n        def maintain_re(i: int, d: int, j: int):\n            if d == depth:\n                t[i] = (0, -999999, -999999, nums[i - (1 << depth)])\n            else:\n                start = (i << depth - d) - (1 << depth)\n                size = 1 << depth - d\n                if j < start + size // 2:\n                    maintain_re(i * 2, d + 1, j)\n                else:\n                    maintain_re(i * 2 + 1, d + 1, j)\n                maintain(i, d)\n\n        for d in reversed(range(0, depth + 1)):\n            start = 1 << d\n            end = start + (n >> depth - d)\n            for i in range(start, end):\n                maintain(i, d)\n\n        ret = 0\n        for q in queries:\n            nums[q[0]] = q[1]\n            maintain_re(1, 0, q[0])\n\n            ret += max(t[1][0], t[1][1], t[1][2], t[1][3])\n            ret %= 1000000007\n\n        return ret\n\n",
    "submit_ts": 1716695047.0
}