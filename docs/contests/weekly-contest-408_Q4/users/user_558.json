{
    "username": "efflepw",
    "submission": "class UnionFind:\n    def __init__(self, size):\n        self.p = [i for i in range(size)]\n        self.size = size\n\n    def union(self, i, j):\n        pi, pj = self.find(i), self.find(j)\n        if pi != pj:\n            self.size -= 1\n            self.p[pj] = pi\n\n    def find(self, i):\n        if i == self.p[i]:\n            return i\n        self.p[i] = self.find(self.p[i])\n        return self.p[i]\n\n    def connected(self, i, j):\n        return self.find(i) == self.find(j)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # graph\n\n        # get all circles\n\n        # find if oposite sides of x y are connected via circles\n\n        # find circles connected to y\n        # find circles connected to x\n\n        # if there is a crossing -> true\n        # go throw all circles, and find if there are some crosing\n\n        # use UF ?\n\n        def insideRange(n, left, right):\n            return left <= n <= right\n\n        xConnected = []\n        yConnected = []\n        zxConnected = []\n        zyConnected = []\n\n        for i, circle in enumerate(circles):\n            if insideRange(X, circle[0] - circle[2], circle[0] + circle[2]):\n                xConnected.append(i)\n\n            if insideRange(Y, circle[1] - circle[2], circle[1] + circle[2]):\n                yConnected.append(i)\n            \n            if insideRange(0, circle[0] - circle[2], circle[0] + circle[2]):\n                zxConnected.append(i)\n\n            if insideRange(0, circle[1] - circle[2], circle[1] + circle[2]):\n                zyConnected.append(i)\n\n        def twoCirclesConnected(c1, c2):\n            dist = math.sqrt((c2[0] - c1[0]) ** 2 + (c2[1] - c1[1]) ** 2)\n\n            return c1[2] + c2[2] >= dist\n\n        uf = UnionFind(len(circles))\n\n        for i in range(len(circles)):\n            for j in range(i + 1, len(circles)):\n                if twoCirclesConnected(circles[i], circles[j]):\n                    uf.union(i, j)\n\n        for i in xConnected:\n            for j in yConnected:\n                if uf.connected(i, j):\n                    return False\n\n        for i in xConnected:\n            for j in zxConnected:\n                if uf.connected(i, j):\n                    return False\n\n        for i in yConnected:\n            for j in zyConnected:\n                if uf.connected(i, j):\n                    return False\n\n        for i in zxConnected:\n            for j in zyConnected:\n                if uf.connected(i, j):\n                    return False\n\n        return True",
    "submit_ts": "1722136961",
    "subm_id": "1335750050"
}