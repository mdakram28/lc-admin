{
    "username": "CppISWorstLang",
    "submission": "\nusing ll = long long;\n#define ar(x) array<int,x> \n#define all(c) (c).begin(), (c).end()\n#define rall(x) (x).rbegin(), (x).rend() \n#define sz(x) (int)(x).size()\n#define f0(e) for(int i = 0; i < (e); ++i)\n#define f1(e) for(int i = 1; i <= (e); ++i)\n#define f2(i,e) for(int i = 0; i < (e); ++i)\n#define f3(i,a,b) for (int i=(a);i<(b);i++)\n#define r3(i,b,a) for (int i=(b)-1;i>=(a);i--)\n#define Sm(a) accumulate((a).begin(), (a).end() , 0ll)\n#define Mn(a) (*min_element((a).begin(), (a).end()))\n#define Mx(a) (*max_element((a).begin(), (a).end()))\n#define rev(a) reverse((a).begin(), (a).end())\n#define each(x,a) for(auto& x : a)\nmt19937 mrand(random_device{}()); \nint rng(int x) { return mrand() % x;}\nint pct(long long x) {return __builtin_popcountll(x);} \nint lg(int x) {return x == 0 ? -1 : 31 - __builtin_clz(x);}\nint clg(int x) {return x <= 1 ? 0 : 32 - __builtin_clz(x - 1);}\ntemplate<class t,class u> bool cmx(t &a, const u &b){return a < b ? a = b, 1 : 0;}\ntemplate<class t,class u> bool cmn(t &a, const u &b){return b < a ? a = b, 1 : 0;}\ntemplate <class T> int lb(const vector<T> &v, const T &x) { return distance(begin(v), lower_bound(begin(v), end(v), x));}\ntemplate <class T> int rb(const vector<T> &v, const T &x) { return distance(begin(v), upper_bound(begin(v), end(v), x));}\ntemplate<class T,class A> void psum(vector<T>& s, const vector<A>&a){\n    int n=a.size();s.resize(n+1);s[0]=0;for(int i=0;i<n;++i)s[i+1]=s[i]+a[i];  \n};\ntemplate<typename T, typename F> T b_search(T l, T r, bool fst, F &&f) {\n    T c = fst ? r : l;\n    while(l<=r){T md=(l+r)/2;if(f(md)){c=md; fst?(r=md-1):(l=md+1);} else fst?(l=md+1):(r=md-1);}\n    return c;\n}\ntemplate <typename T, typename U> // pair\nostream& operator<<(ostream& out, const pair<T, U>& a) {return out << a.first << ' ' << a.second;}\ntemplate <typename T>  // vector\nostream& operator<<(ostream& out, const vector<T>& a) {for(int i=0,n=a.size(); i<n; ++i) out<<a[i]<<\" \\n\"[i==n-1]; return out;}\ntemplate <typename T, size_t N> // array\nostream& operator<<(ostream& out, const array<T, N>& a) {for(int i=0;i<N;++i)cout<<a[i]<<\" \\n\"[i==N-1];return out;}\ntemplate <typename T, typename U> // pair\nistream& operator>>(istream& in, pair<T, U>& a) {return in >> a.first >> a.second;}\ntemplate <typename T> // vector\nistream& operator>>(istream& in, vector<T>& a) {for (auto &x: a) in >> x; return in;}\ntemplate <typename T, size_t N> // array\nistream& operator>>(istream& in, array<T, N>& a) {for (int i=0;i<N;++i) in >> a[i]; return in;}\ntemplate<class T> void rd(T& x) {cin >> x;}\ntemplate<class H, class... T> void rd(H& h, T&... t) {rd(h); rd(t...);}\ntemplate<class A> void wt(A x) { cout << x;}\ntemplate<class H, class... T> void wt(const H& h, const T&... t) { wt(h); wt(t...);}\nbool is_vo(char c){return c=='a' || c=='e' || c=='i' || c=='o' || c=='u';}\nint s2t(string &s){return s[0]*600 + s[1]*60 + s[3]*10 + s[4] - 32208;} //s: \"HH:MM\" \n#ifdef sigma-yyf\n#define dbg(...) debug_impl(#__VA_ARGS__, __VA_ARGS__)\ntemplate <class H, class... Ts> void debug_impl(const char* s, const H& h, const Ts&... t) {\n    cerr << s << \": \" << h, ((cerr << \", \" << t), ..., (cerr << \"\\n\"));\n}\n#else\n#define dbg(...) void(0)\n#endif\nstruct fast_ios { \n    fast_ios(){ cin.tie(nullptr), ios::sync_with_stdio(false), cout << fixed << setprecision(10);};\n} fast_ios_;\nconstexpr char nl = '\\n';\nconstexpr int inf = 1'061'109'567;\nconstexpr ll infll = 2'000'000'000'000'000'000;\nconstexpr int N = 2e5 + 5;\nint n, m, k;\n\ntemplate <class S,           // \u7ebf\u6bb5\u6811\u7ef4\u62a4\u7684\u6570\u636e\u4fe1\u606f\n          S (*op)(S, S),    // \u5de6\u53f3\u5b50\u8282\u70b9\u4fe1\u606f\u5408\u5e76\u5230\u5f53\u524d\u8282\u70b9\n          S (*e)(),\n          class F,          // \u61d2\u6807\u8bb0\u7ef4\u62a4\u7684\u4fe1\u606f\n          S (*tag)(F, S),  // \u67e5\u8be2\u65f6\u7ed9\u5f53\u53bb\u8282\u70b9\u6253\u4e0a\u61d2\u6807\u8bb0\n          F (*merge)(F, F),  // \u61d2\u6807\u8bb0\u5408\u5e76\n          F (*id)()>        // \u61d2\u6807\u8bb0\u7684\u9ed8\u8ba4\u503c, \u7528\u4e8e\u6e05\u7a7a\u7236\u8282\u70b9\u7684\u61d2\u6807\u8bb0\nstruct LazySegTree {\n    int n, size, log;\n    vector<S> d;\n    vector<F> lz;\n    void pull(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n    void push_down(int k, F f) {\n        d[k] = tag(f, d[k]);\n        if (k < size) lz[k] = merge(f, lz[k]);\n    }\n    void push(int k) {\n        push_down(2 * k, lz[k]), push_down(2 * k + 1, lz[k]);\n        lz[k] = id();\n    }\n    LazySegTree() : LazySegTree(0) {}\n    explicit LazySegTree(int N) : LazySegTree(vector<S>(N, e())) {}\n    explicit LazySegTree(const vector<S>& v) : n(int(v.size())) {\n        log = ceil_lg(n), size = 1 << log;\n        d = vector<S>(2 * size, e()), lz = vector<F>(size, id());\n        for (int i = 0; i < n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) pull(i);\n    }\n    int ceil_lg(int x) {   // minimum non-neg x s.t. `n <= 2^x`\n        return x <= 1 ? 0 : 32 - __builtin_clz(x - 1);\n    }\n    void set(int p, S x) {   // 0 <= p < n\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        d[p] = x;\n        for (int i = 1; i <= log; i++) pull(p >> i);\n    }\n    S get(int p) {     // Assert 0 <= p < n\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        return d[p];\n    }\n    S get(int l, int r) {   // op(a[l], ..., a[r - 1])\n        if (l == r) return e();\n        l += size, r += size;\n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l) push(l >> i);\n            if (((r >> i) << i) != r) push((r - 1) >> i);\n        }\n        S sl = e(), sr = e();\n        while (l < r) {\n            if (l & 1) sl = op(sl, d[l++]);\n            if (r & 1) sr = op(d[--r], sr);\n            l >>= 1, r >>= 1;\n        }\n        return op(sl, sr);\n    }\n    S get_all() { return d[1]; }\n    void apply(int p, F f) {   // 0 <= p < n\n        p += size;\n        for (int i = log; i >= 1; i--) push(p >> i);\n        d[p] = tag(f, d[p]);\n        for (int i = 1; i <= log; i++) pull(p >> i);\n    }\n    void apply(int l, int r, F f) {  // a[i] = f(a[i]), [l, r)\n        if (l == r) return;\n        l += size, r += size;\n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l) push(l >> i);\n            if (((r >> i) << i) != r) push((r - 1) >> i);\n        }\n        int l2 = l, r2 = r;\n        while (l < r) {\n            if (l & 1) push_down(l++, f);\n            if (r & 1) push_down(--r, f);\n            l >>= 1, r >>= 1;\n        }\n        l = l2, r = r2;\n        for (int i = 1; i <= log; i++) {\n            if (((l >> i) << i) != l) pull(l >> i);\n            if (((r >> i) << i) != r) pull((r - 1) >> i);\n        }\n    }\n    template <bool (*g)(S)> int max_right(int l) {\n        return max_right(l, [](S x) { return g(x); });\n    }\n    template <class G> int max_right(int l, G g) { // 0 <= l <= n, g(e()) is true\n        if (l == n) return n;\n        l += size;\n        for (int i = log; i >= 1; i--) push(l >> i);\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!g(op(sm, d[l]))) {\n                while (l < size) {\n                    push(l);\n                    l = (2 * l);\n                    if (g(op(sm, d[l]))) sm = op(sm, d[l]), l++;\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return n;\n    }\n\n    template <bool (*g)(S)> int min_left(int r) {\n        return min_left(r, [](S x) { return g(x); });\n    }\n    template <class G> int min_left(int r, G g) { // 0 <= r <= n, g(e()) is true\n        if (r == 0) return 0;\n        r += size;\n        for (int i = log; i >= 1; i--) push((r - 1) >> i);\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!g(op(d[r], sm))) {\n                while (r < size) {\n                    push(r);\n                    r = (2 * r + 1);\n                    if (g(op(d[r], sm)))  sm = op(d[r], sm), r--;\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n};\n\nstruct S {\n    int pre[2] = {0, 0}; // \u524d\u7f000/1\u957f\u5ea6\n    int suf[2] = {0, 0}; // \u540e\u7f000/1\u957f\u5ea6\n    int mx[2] = {0, 0};  // \u533a\u95f4\u8fde\u7eed0/1\u6700\u5927\u503c\n    int cnt[2] = {0, 0}; // \u533a\u95f40/1\u7684\u6570\u91cf\n};\nusing F = bool; // \u662f\u5426\u53d6\u53cd\nS op(S x, S y) {\n    S s{};\n    for (int i = 0; i < 2; ++i) {\n        s.cnt[i] = x.cnt[i] + y.cnt[i];\n        s.pre[i] = x.cnt[i ^ 1] ? x.pre[i] : x.cnt[i] + y.pre[i];\n        s.suf[i] = y.cnt[i ^ 1] ? y.suf[i] : y.cnt[i] + x.suf[i];\n        s.mx[i] = max({x.mx[i], y.mx[i], x.suf[i] + y.pre[i]});\n    }\n    return s;\n}\nS e() {\n    return S{};\n};\nS E0() {\n    return S{ {1, 0}, {1, 0}, {1, 0}, {1, 0} };\n}\nS E1() {\n    return S{ {0, 1}, {0, 1}, {0, 1}, {0, 1} };\n}\nS tag(F f, S s) {\n    if (!f) return s;\n    swap(s.pre[0], s.pre[1]);\n    swap(s.cnt[0], s.cnt[1]);\n    swap(s.suf[0], s.suf[1]);\n    swap(s.mx[0], s.mx[1]);\n    return s;\n}\nF merge(F x, F y) { \n    return x ^ y;\n}\nF id() { return false; }\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& q) {\n        m=sz(q);\n        vector<bool> c;\n        n=0;\n        for(auto&d:q){\n            cmx(n,d[1]);\n        }\n        n+=2;\n        vector<S> v(n);\n        for (int i = 0; i < n; ++i) {\n             v[i] = i == 0 ? E0() : E1();\n        } \n        v[n-1] =  E0();\n        LazySegTree<S, op, e, F, tag, merge, id> seg(v);\n        f0(m){\n            auto &d=q[i];\n            if(d[0]==1){\n                seg.set(d[1], E0());\n            }else{\n                int k=seg.get(0, d[1]).mx[1];\n                // int y=seg.get(d[1]).mx[1];\n                c.push_back(1+k>=d[2]);\n                // cout<<\"k=\"<<k<<\",d=\"<<d[2]<<\"\\n\";\n            }\n        }\n        return c;\n    }\n};\n",
    "submit_ts": "1716649750",
    "subm_id": "1267596810"
}