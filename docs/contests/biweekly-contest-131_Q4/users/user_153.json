{
    "username": "celestialcoder",
    "submission": "class Solution {\npublic:\n    void upd(vector<int>& st, vector<int>& l, int ss, int se, int qs, int qe, int si, int k) {\n        if (l[si]) {\n            st[si] += l[si];\n            if (ss != se) {\n                l[si * 2 + 1] += l[si];\n                l[si * 2 + 2] += l[si];\n            }\n            l[si] = 0;\n        }\n        if (ss > se || ss > qe || qs > se) {\n            return;\n        }\n        if (qs <= ss && se <= qe) {\n            st[si] += k;\n            if (ss != se) {\n                l[si * 2 + 1] += k;\n                l[si * 2 + 2] += k;\n            }\n            return;\n        }\n        int m = (ss + se) / 2;\n        upd(st, l, ss, m, qs, qe, si * 2 + 1, k);\n        upd(st, l, m + 1, se, qs, qe, si * 2 + 2, k);\n        st[si] = max(st[si * 2 + 1], st[si * 2 + 2]);\n    }\n    int query(vector<int>& st, vector<int>& l, int ss, int se, int qs, int qe, int si) {\n        if (l[si]) {\n            st[si] += l[si];\n            if (ss != se) {\n                l[si * 2 + 1] += l[si];\n                l[si * 2 + 2] += l[si];\n            }\n            l[si] = 0;\n        }\n        if (ss > se || ss > qe || qs > se) {\n            return 0;\n        }\n        if (qs <= ss && se <= qe) {\n            return st[si];\n        }\n        int m = (ss + se) / 2;\n        return max(query(st, l, ss, m, qs, qe, si * 2 + 1), query(st, l, m + 1, se, qs, qe, si * 2 + 2));\n    }\n    void build(vector<int>& st, vector<int>& arr, int ss, int se, int si) {\n        if (ss > se) {\n            return;\n        }\n        if (ss == se) {\n            st[si] = arr[ss];\n            return;\n        }\n        int m = (ss + se) / 2;\n        build(st, arr, ss, m, si * 2 + 1);\n        build(st, arr, m + 1, se, si * 2 + 2);\n        st[si] = max(st[si * 2 + 1], st[si * 2 + 2]);\n    }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int q = queries.size(), maxX = 0;\n        for (int i = 0; i < q; i++) {\n            maxX = max(maxX, queries[i][1]);\n        }\n        int stSize = 4 * maxX + 4;\n        vector<int> st(stSize), l(stSize);\n        vector<int> arr(maxX + 1);\n        for (int i = 0; i <= maxX; i++) {\n            arr[i] = i;\n        }\n        build(st, arr, 0, maxX, 0);\n        set<int> obs;\n        vector<bool> ans;\n        for (int i = 0; i < q; i++) {\n            int x = queries[i][1];\n            if (queries[i][0] == 1) {\n                auto it = obs.upper_bound(x);\n                int y = maxX;\n                if (it != obs.end()) {\n                    y = *it;\n                }\n                int k = -query(st, l, 0, maxX, x, x, 0);\n                upd(st, l, 0, maxX, x + 1, y, 0, k);\n                obs.insert(x);\n            } else {\n                int sz = queries[i][2];\n                int maxSz = query(st, l, 0, maxX, 0, x, 0);\n                ans.push_back(sz <= maxSz);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716650827.0
}