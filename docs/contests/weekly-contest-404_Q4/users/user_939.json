{
    "username": "rudra13904",
    "submission": "class Solution {\npublic:\n        pair<int, int> bfs(int s, const vector<vector<int>>& g) {\n        int n = g.size();\n        vector<int> d(n, -1);\n        queue<int> q;\n        q.push(s);\n        d[s] = 0;\n        int f = s, md = 0;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) {\n                if (d[v] == -1) {\n                    d[v] = d[u] + 1;\n                    q.push(v);\n                    if (d[v] > md) {\n                        md = d[v];\n                        f = v;\n                    }\n                }\n            }\n        }\n        return {f, md};\n    }\n\n    int dia(const vector<vector<int>>& g) {\n        auto f = bfs(0, g);\n        auto d = bfs(f.first, g);\n        return d.second;\n    }\n\n    int depth(int s, const vector<vector<int>>& g) {\n        vector<int> d(g.size(), -1);\n        queue<int> q;\n        q.push(s);\n        d[s] = 0;\n        int md = 0;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) {\n                if (d[v] == -1) {\n                    d[v] = d[u] + 1;\n                    q.push(v);\n                    md = max(md, d[v]);\n                }\n            }\n        }\n        return md;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1;\n        int m = e2.size() + 1;\n        vector<vector<int>> g1(n), g2(m);\n        for (auto& e : e1) {\n            g1[e[0]].push_back(e[1]);\n            g1[e[1]].push_back(e[0]);\n        }\n        for (auto& e : e2) {\n            g2[e[0]].push_back(e[1]);\n            g2[e[1]].push_back(e[0]);\n        }\n        int d1 = dia(g1);\n        int d2 = dia(g2);\n        \n        int maxD = max(d1,d2);\n        int minD = min(d1,d2);\n        cout<<d1<<\" \"<<d2<<endl;\n        if(maxD==0) return 1;\n        if(minD==0){\n            if(maxD==d1){\n                if(e1.size()==1) return maxD+1;\n                return maxD/2 + 1;\n            }else{\n                if(e2.size()==1) return maxD+1;\n                return maxD/2 + 1;\n            }\n        }\n        if(maxD%2==0 && minD%2==0) return max(((maxD+minD)/2) + 1,maxD);\n        else if(maxD%2==0 && minD%2!=0) return max((maxD/2) + (minD/2 + 1) + 1,maxD);\n        else if(maxD%2!=0 && minD%2==0) return max((maxD/2 + 1) + minD/2 + 1,maxD);\n        return max((maxD/2 + 1) + (minD/2 + 1) + 1,maxD);\n    }\n};",
    "submit_ts": "1719719778",
    "subm_id": "1304450337"
}