{
    "username": "No000obCoder",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& H, vector<int>& V) {\n        sort(H.begin(), H.end(), greater<int>());\n        sort(V.begin(), V.end(), greater<int>());\n        \n        int i = 0, j = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long int totalCost = 0;\n        \n        // Greedily choose the next cut with the highest cost\n        while (i < H.size() && j < V.size()) {\n            if (H[i] > V[j]) {\n                totalCost += H[i] * verticalPieces;\n                ++i;\n                ++horizontalPieces;\n            } else {\n                totalCost += V[j] * horizontalPieces;\n                ++j;\n                ++verticalPieces;\n            }\n        }\n        \n        // Add remaining horizontal cuts\n        while (i < H.size()) {\n            totalCost += H[i] * verticalPieces;\n            ++i;\n        }\n        \n        // Add remaining vertical cuts\n        while (j < V.size()) {\n            totalCost += V[j] * horizontalPieces;\n            ++j;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926130",
    "subm_id": "1320276897"
}