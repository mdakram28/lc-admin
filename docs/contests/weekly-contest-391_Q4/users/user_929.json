{
    "username": "dholiyoo",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& p) {\n        \n    int n = p.size(); \n        \n    // vector<int> v(n), v1(n);\n        \n    set<pair<int,int>> s, d; \n    \n    // unordered_map<int, int> sum, diff; \n        \n    for (int i = 0; i < n; i++) {\n        int x = p[i][0] + p[i][1];\n        int y = p[i][0] - p[i][1];\n        \n        s.insert({x, i}); \n        d.insert({y, i}); \n        \n//         sum[v[i]]++; \n//         diff[v1[i]]++; \n        \n    }\n        \n    // auto [ss, is] = *s.begin(); \n    // auto [es, ie] = *s.rbegin(); \n    //     cout<<es<<ie; \n        \n        int ans = INT_MAX; \n        \n        \n        for(int i = 0; i < n; i++) {\n            //remove the current \n            int x = p[i][0] + p[i][1];\n            int y = p[i][0] - p[i][1];\n            \n            s.erase({x, i}); \n            d.erase({y, i}); \n            \n            //find the max manhatten distance now \n            auto [a, is] = *s.begin(); \n            auto [b, ie] = *s.rbegin();\n            \n            auto [c, isd] = *d.begin(); \n            auto [v, ied] = *d.rbegin();\n            \n            int dis = max(b - a, v - c); \n            \n            ans = min(ans, dis); \n            //reinsert \n            s.insert({x, i}); \n            d.insert({y, i}); \n        }\n    // auto last = \n \n//     // Sorting both the vectors\n//     sort(v.begin(), v.end());\n//     sort(v1.begin(), v1.end());\n \n//     for(auto it: v) cout<<it<<\" \"; \n//         cout<<endl; \n//         for(auto it: v1) cout<<it<<\" \"; \n//         cout<<endl; \n        \n//     //if i get the maximum \n//     int maximum\n//         = max(v.back() - v.front(), v1.back() - v1.front());\n     \n    return ans; \n        \n    }\n};"
}