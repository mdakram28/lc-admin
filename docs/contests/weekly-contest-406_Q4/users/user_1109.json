{
    "username": "kuradeharesh4002",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int hPieces = 1, vPieces = 1;\n        long totalCost = 0;\n        int i = 0, j = 0;\n\n        // Iterate through the cuts\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += horizontalCut[i] * vPieces;\n                ++hPieces;\n                ++i;\n            } else {\n                totalCost += verticalCut[j] * hPieces;\n                ++vPieces;\n                ++j;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += horizontalCut[i] * vPieces;\n            ++hPieces;\n            ++i;\n        }\n\n        // Add remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += verticalCut[j] * hPieces;\n            ++vPieces;\n            ++j;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925765",
    "subm_id": "1320265511"
}