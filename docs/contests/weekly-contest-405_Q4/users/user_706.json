{
    "username": "capsicle",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, unique_ptr<TrieNode>> children; \n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        unique_ptr<TrieNode> root;\n        \n        Trie() : root(make_unique<TrieNode>()) {}\n\n        void insert(const string& word, int index, int cost) {\n            TrieNode* currentNode = root.get();\n            for (char c : word) {\n                if (!currentNode->children.count(c))\n                    currentNode->children[c] = make_unique<TrieNode>();\n                currentNode = currentNode->children[c].get();\n            }\n            currentNode->wordEnds.emplace_back(index, cost);\n        }\n    };\n\n    int minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) {\n        if (target.empty() || words.empty() || costs.empty()) return -1; \n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX); \n        minCost[0] = 0; \n\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) continue; \n\n            TrieNode* currentNode = trie.root.get();\n\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break; \n                currentNode = currentNode->children[target[j]].get();\n                \n                for (const auto& wordInfo : currentNode->wordEnds) {\n                    int wordIndex = wordInfo.first;\n                    int wordCost = wordInfo.second;\n                    int wordLength = words[wordIndex].size();\n                    if (i + wordLength <= targetLength) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength]; \n    }\n};",
    "submit_ts": "1720322407",
    "subm_id": "1312349073"
}