{
    "username": "an1ket_62",
    "submission": "using ll=long long;\nclass Solution {\npublic:\n        struct node{\n        ll sum;\n        \n        node(){\n            sum=(1LL<<60)-1;\n        }\n    };\n\n    node t[4*200200];\n    node merge(node a,node b){\n        node ans;\n        ans.sum=a.sum&b.sum;\n        return ans;\n    }\n\n    void build(ll id,ll l,ll r,vector<int>&a){\n        if (l==r){\n            t[id].sum=a[l];\n            return;\n        }\n        ll mid=(l+r)/2;\n        build(2*id,l,mid,a);\n        build(2*id+1,mid+1,r,a);\n        t[id]=merge(t[2*id],t[2*id+1]);\n\n    }\n    void update(ll id,ll l,ll r,ll pos,ll val){\n        if (pos<l || pos>r){\n            return;\n        }\n        if (l==r){\n            t[id].sum+=val;\n            return;\n        }\n\n        ll mid=(l+r)/2;\n        update(2*id,l,mid,pos,val);\n        update(2*id+1,mid+1,r,pos,val);\n        t[id]=merge(t[2*id],t[2*id+1]);\n\n    }\n    node query(ll id,ll l,ll r,ll lq,ll rq){\n        if (lq>r || rq<l){\n            return node();\n        }\n        if (lq<=l && r<=rq){\n            return t[id];\n\n        }\n        ll mid=(l+r)/2;\n        return merge(query(2*id,l,mid,lq,rq),query(2*id+1,mid+1,r,lq,rq));\n\n    }\n    long long countSubarrays(vector<int>& a, int k) {\n        int n=a.size();\n        build(1,0,n-1,a);\n        ll ans=0;\n        for (int i=0;i<n;i++){\n            int left=-1;\n            int right=-1;\n            // cout << \"start \" <<i << endl;\n            int low=i;\n            int high=n-1;\n            while(low<=high){\n                int md=(low+high)/2;\n                int val=query(1,0,n-1,i,md).sum;\n                if (val>=k){\n                    left=md;\n                    low=md+1;\n                }\n                else{\n                    high=md-1;\n                }\n            }\n            low=i;\n            high=n-1;\n            while(low<=high){\n                int md=(low+high)/2;\n                int val=query(1,0,n-1,i,md).sum;\n                // cout << md << \" \" << k << endl;\n                if (val<=k){\n                    right=md;\n                    high=md-1;\n                }\n                else{\n                    low=md+1;\n                }\n            }\n            // cout << left << \" \" << right << endl;\n            if (left!=-1){\n            int val=query(1,0,n-1,i,right).sum;\n                if (val==k){\n                    ans+=(left-right+1);\n                }\n            }\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1720277784",
    "subm_id": "1311679813"
}