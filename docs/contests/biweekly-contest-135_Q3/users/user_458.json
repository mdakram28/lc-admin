{
    "username": "manassinghmainacc",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n#include <iterator>\n#include <numeric>\n\ntemplate<typename Container, typename Function>\nvoid forEach(const Container& container, Function func) {\n    for (auto it = container.begin(); it != container.end(); ++it) {\n        func(*it);\n    }\n}\n\ntemplate<typename Container, typename Function>\nvoid forEachIndexed(const Container& container, Function func) {\n    for (size_t i = 0; i < container.size(); ++i) {\n        func(container[i], i);\n    }\n}\n\nclass Solution {\npublic:\n    int minChanges(std::vector<int>& nums, int k) {\n        std::map<int, std::vector<int>> differenceMap;\n        std::vector<int> maxValues;\n\n        forEachIndexed(nums, [&](int num, size_t i) {\n            if (i >= nums.size() / 2) return;\n\n            int firstElement = nums[i];\n            int lastElement = nums[nums.size() - i - 1];\n            int diff = std::abs(firstElement - lastElement);\n            int maxValue = std::max({firstElement, lastElement, k - firstElement, k - lastElement});\n\n            differenceMap[diff].emplace_back(maxValue);\n            maxValues.emplace_back(maxValue);\n        });\n\n        int result = nums.size();\n        std::sort(maxValues.begin(), maxValues.end());\n\n        forEach(differenceMap, [&](const std::pair<const int, std::vector<int>>& entry) {\n            int diff = entry.first;\n            int totalChanges = std::lower_bound(maxValues.begin(), maxValues.end(), diff) - maxValues.begin();\n            totalChanges = totalChanges * 2 + (nums.size() / 2 - totalChanges);\n\n            forEach(entry.second, [&](int maxValue) {\n                if (maxValue < diff) {\n                    totalChanges -= 2;\n                } else {\n                    totalChanges -= 1;\n                }\n            });\n\n            result = std::min(result, totalChanges);\n        });\n\n        return result;\n    }\n};\n",
    "submit_ts": "1721488457",
    "subm_id": "1327422827"
}