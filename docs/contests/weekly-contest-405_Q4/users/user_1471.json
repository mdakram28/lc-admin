{
    "username": "huangalan",
    "submission": "class TrieNode:\n    def __init__(self):\n            self.children = {}\n            self.word_index = -1  \n\n    def addWord(self, word, index, costs):\n        pointer = self\n        for ch in word:\n            if ch not in pointer.children:\n                pointer.children[ch] = TrieNode()\n            pointer = pointer.children[ch]\n        if pointer.word_index == -1:\n            pointer.word_index = index \n        else:\n            if costs[pointer.word_index] > costs[index]:\n                pointer.word_index = index\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = TrieNode()\n        for i, word in enumerate(words):\n            root.addWord(word, i, costs)\n            \n        @lru_cache(None)\n        def dp(index):\n            if index == len(target):\n                return 0\n            \n            min_cost = math.inf\n            node = root\n            for j in range(index, len(target)):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.word_index != -1:\n                    remaining_cost = dp(j + 1)\n                    if remaining_cost != math.inf:\n                        min_cost = min(min_cost, costs[node.word_index] + remaining_cost)\n            \n            return min_cost\n\n        result = dp(0)\n        return result if result != math.inf else -1\n        ",
    "submit_ts": "1720322187",
    "subm_id": "1312343074"
}