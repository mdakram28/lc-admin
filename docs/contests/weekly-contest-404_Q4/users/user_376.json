{
    "username": "SupervisorMayHap",
    "submission": "from collections import defaultdict, deque\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def treeDiameter(edges) -> int:\n            def dfs(node, parent, depth, max_depth, max_node, tree):\n                if depth > max_depth:\n                    max_depth = depth\n                    max_node = node\n                for child in tree[node]:\n                    if child != parent:\n                        max_depth, max_node = dfs(child, node, depth + 1, max_depth, max_node, tree)\n                return max_depth, max_node\n\n\n            def find_diameter(root, tree):\n                _, node1 = dfs(root, None, 0, 0, None, tree)\n                max_depth, node2 = dfs(node1, None, 0, 0, None, tree)\n                return max_depth\n            degree = defaultdict(list)\n\n            for edge in edges:\n                n, m = edge[0], edge[1]\n                degree[n].append(m)\n                degree[m].append(n)\n            return find_diameter(0, degree)\n        def find_tree_centers(edges):\n            n = len(edges) + 1\n            if n <= 1:\n                return 0\n\n            graph = defaultdict(list)\n            degree = [0] * (n + 1)\n\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n                degree[u] += 1\n                degree[v] += 1\n\n            leaves = deque([i for i in range(0, n) if degree[i] == 1])\n            steps = 0\n            while n > 1:\n                # print(leaves)\n                num_leaves = len(leaves)\n                n -= num_leaves\n\n                for _ in range(num_leaves):\n                    leaf = leaves.popleft()\n                    for neighbor in graph[leaf]:\n                        degree[neighbor] -= 1\n                        if degree[neighbor] == 1:\n                            leaves.append(neighbor)\n                steps += 1\n            return steps\n        a = find_tree_centers(edges1)\n        b = find_tree_centers(edges2)\n        print(a, b)\n        if a == 0 and b == 0:\n            return 1\n        return max(a + b + 1, treeDiameter(edges1), treeDiameter(edges2))\n# 3, 5, 2, 2, 1\n'''\n\n'''",
    "submit_ts": 1719717505.0
}