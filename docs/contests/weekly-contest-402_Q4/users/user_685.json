{
    "username": "joyjitdas_7",
    "submission": "class Solution {\nprivate:\n    class PeakSegmentTree {\n    private:\n        vector<int> tree;\n        vector<int> arr;\n        int n;\n\n        bool isPeak(int i) {\n            if (i <= 0 || i >= n - 1) return false;\n            return arr[i] > arr[i - 1] && arr[i] > arr[i + 1];\n        }\n\n        void build(int node, int start, int end) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int query(int node, int start, int end, int l, int r) {\n            if (r < start || end < l) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = query(2 * node + 1, start, mid, l, r);\n            int rightQuery = query(2 * node + 2, mid + 1, end, l, r);\n            return leftQuery + rightQuery;\n        }\n\n        void update(int node, int start, int end, int idx) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    update(2 * node + 1, start, mid, idx);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n    public:\n        PeakSegmentTree(vector<int>& input) {\n            arr = input;\n            n = arr.size();\n            tree.resize(4 * n);\n            build(0, 0, n - 1);\n        }\n\n        int query(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n\n        void update(int index, int value) {\n            arr[index] = value;\n            if (index > 0) update(0, 0, n - 1, index - 1);\n            update(0, 0, n - 1, index);\n            if (index < n - 1) update(0, 0, n - 1, index + 1);\n        }\n    };\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> answer;\n        PeakSegmentTree segTree(nums);\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                int a=segTree.query(li,ri);\n                if(ri-1>=0) a=min(a,segTree.query(li,ri-1));\n                if(li+1<nums.size()) a=min(a,segTree.query(li+1,ri));\n                if(li+1<nums.size() && ri-1>=0) a=min(a,segTree.query(li+1,ri-1));\n                \n                answer.push_back(a);\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                segTree.update(index, value);\n            }\n        }\n\n        return answer;\n    }\n};",
    "submit_ts": 1718507931.0
}