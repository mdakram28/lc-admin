{
    "username": "oalad-zro",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        map<long long, long long> h, v;\n        for (auto x: horizontalCut) ++h[x];\n        for (auto x: verticalCut) ++v[x];\n        vector<pair<long long, long long>> h_lines, v_lines;\n        for (auto x: h) h_lines.push_back(x);\n        reverse(h_lines.begin(), h_lines.end());\n        for (auto x: v) v_lines.push_back(x);\n        reverse(v_lines.begin(), v_lines.end());\n        n = h.size();\n        m = v.size();\n        vector<vector<long long>> dp(n + 1, vector<long long>(m + 1, 1e18));\n        dp[0][0] = 0;\n        for (int i = 1; i <= n; ++i) {\n            dp[i][0] = h_lines[i - 1].first * h_lines[i - 1].second + dp[i - 1][0];\n        }\n        for (int i = 1; i <= m; ++i) {\n            dp[0][i] = v_lines[i - 1].first * v_lines[i - 1].second + dp[0][i - 1];\n        }       \n        long long cnt_h = 1;\n        for (int i = 1; i <= n; ++i) {\n            cnt_h += h_lines[i - 1].second;\n            long long cnt_v = 1;\n            for (int j = 1; j <= m; ++j) {\n                cnt_v += v_lines[j - 1].second;\n                dp[i][j] = min(dp[i][j - 1] + cnt_h * v_lines[j - 1].first * v_lines[j - 1].second, dp[i - 1][j] + cnt_v * h_lines[i - 1].first * h_lines[i - 1].second);\n                \n            }\n            \n        }\n        // for (auto &x: dp) {\n        //     for (auto y: x) {\n        //         cout << y << \" \";\n        //     }\n        //     cout << \"\\n\";\n        // }\n        return dp[n][m];\n    }\n};",
    "submit_ts": "1720925994",
    "subm_id": "546443331"
}