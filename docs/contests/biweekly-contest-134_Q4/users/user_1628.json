{
    "username": "huntermarchi17_03",
    "submission": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n        val n = nums.size\n        var count: Long = 0\n        val prevResults = mutableMapOf<Long, Long>()\n\n        for (i in nums.indices) {\n            val currResults = mutableMapOf<Long, Long>()\n\n            if (nums[i] == k) {\n                count++\n            }\n            currResults[nums[i].toLong()] = 1L\n\n            for ((valKey, freq) in prevResults) {\n                val newAndResult = valKey and nums[i].toLong()\n                if (newAndResult == k.toLong()) {\n                    count += freq\n                }\n                currResults[newAndResult] = currResults.getOrDefault(newAndResult, 0) + freq\n            }\n\n            prevResults.clear()\n            prevResults.putAll(currResults)\n        }\n\n        return count\n    }\n}\n",
    "submit_ts": "1720280849",
    "subm_id": "1311804220"
}