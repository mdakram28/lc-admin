{
    "username": "SambitSathua",
    "submission": "from collections import deque\nfrom math import sqrt\nfrom typing import List\n\nclass Solution:\n    def bfs(self, graph: List[List[int]], start: int, target1: int, target2: int, nodes: int) -> bool:\n        q = deque([start])\n        visited = [0] * (nodes + 4)\n        visited[start] = 1\n        \n        while q:\n            u = q.popleft()\n            for v in graph[u]:\n                if not visited[v]:\n                    q.append(v)\n                    visited[v] = 1\n        \n        return visited[target1] or visited[target2]\n\n    def canReachCorner(self, X: int, Y: int, circles2: List[List[int]]) -> bool:\n        circles = [((x, y), r) for x, y, r in circles2]\n        graph = [[] for _ in range(len(circles2) + 4)]\n        num_circles = len(circles2)\n        \n        for i in range(num_circles):\n            x, y, r = circles[i][0][0], circles[i][0][1], circles[i][1]\n            \n            if x <= r:\n                graph[num_circles].append(i)\n                graph[i].append(num_circles)\n            if X - x <= r:\n                graph[num_circles + 2].append(i)\n                graph[i].append(num_circles + 2)\n            if y <= r:\n                graph[num_circles + 1].append(i)\n                graph[i].append(num_circles + 1)\n            if Y - y <= r:\n                graph[num_circles + 3].append(i)\n                graph[i].append(num_circles + 3)\n            \n            for j in range(i + 1, num_circles):\n                x2, y2, r2 = circles[j][0][0], circles[j][0][1], circles[j][1]\n                distance = sqrt((x - x2) ** 2 + (y - y2) ** 2)\n                radius_sum = r + r2\n                if radius_sum >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        is_blocked = 0\n        is_blocked = max(is_blocked, self.bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4))  # Check for bottom-left corner\n        is_blocked = max(is_blocked, self.bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4))  # Check for top-right corner\n        \n        return not is_blocked\n",
    "submit_ts": "1722136739",
    "subm_id": "1335743562"
}