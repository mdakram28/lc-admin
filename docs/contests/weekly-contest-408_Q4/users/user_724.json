{
    "username": "kusagra18",
    "submission": "from collections import deque\nfrom typing import List\nimport math\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def bfs(graph, start, target1, target2, nodes):\n            queue = deque([start])\n            visited = [0] * (nodes + 4)\n            visited[start] = 1\n\n            while queue:\n                u = queue.popleft()\n                for v in graph[u]:\n                    if not visited[v]:\n                        queue.append(v)\n                        visited[v] = 1\n            return visited[target1] or visited[target2]\n\n        kushh = len(circles)\n        graph = [[] for _ in range(kushh + 4)]\n\n        for i in range(kushh):\n            x, y, r = circles[i]\n            if x <= r:\n                graph[kushh].append(i)\n                graph[i].append(kushh)\n            if X - x <= r:\n                graph[kushh + 2].append(i)\n                graph[i].append(kushh + 2)\n            if y <= r:\n                graph[kushh + 1].append(i)\n                graph[i].append(kushh + 1)\n            if Y - y <= r:\n                graph[kushh + 3].append(i)\n                graph[i].append(kushh + 3)\n            for j in range(i + 1, kushh):\n                xj, yj, rj = circles[j]\n                distance = math.sqrt((x - xj) ** 2 + (y - yj) ** 2)\n                radius_sum = r + rj\n                if radius_sum >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n\n        is_blocked = 0\n        is_blocked = max(is_blocked, bfs(graph, kushh, kushh + 1, kushh + 2, kushh + 4))  # Check for bottom-left corner\n        is_blocked = max(is_blocked, bfs(graph, kushh + 3, kushh + 2, kushh + 1, kushh + 4))  # Check for top-right corner\n\n        return is_blocked == 0\n",
    "submit_ts": "1722138732",
    "subm_id": "1335798261"
}