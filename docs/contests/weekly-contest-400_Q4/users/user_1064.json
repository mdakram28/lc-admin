{
    "username": "manimaran_s",
    "submission": "class Solution {\n    private int[] count;\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        count = new int[30];\n        int window = getWindow();\n        int output = Integer.MAX_VALUE;\n        for (int l = 0, r = 0; r < n; r++) {\n            for (int i = 0; i < 30; i++) {\n                count[i] += (((nums[r] >> i) & 1) ^ 1);\n            }\n            \n            window = getWindow();\n            output = Math.min(output, Math.abs(k - window));\n            while (window < k && l <= r) {\n                for (int i = 0; i < 30; i++) {\n                    count[i] -= (((nums[l] >> i) & 1) ^ 1);\n                }\n                \n                l++;\n                window = getWindow();\n                output = Math.min(output, Math.abs(k - window));\n            }\n        }\n        \n        return output;\n    }\n    \n    private int getWindow() {\n        int window = 1073741823;\n        for (int i = 0; i < 30; i++) {\n            if (count[i] != 0) {\n                window ^= (1 << i);\n            }\n        }\n        \n        return window;\n    }\n}",
    "submit_ts": 1717300430.0
}