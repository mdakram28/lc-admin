{
    "username": "solve_adorer",
    "submission": "class Solution {\n    struct ListNode {\n        int val;\n        ListNode* next;\n        ListNode(int value) : val(value), next(nullptr) {}\n    };\n\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) \n    {\n        vector<int> ans;\n        map<int, ListNode*> mp;\n        ListNode* head = new ListNode(0);\n        ListNode* prev = head;\n        mp[0] = head; // Initialize the map with the head node\n\n        for(int i = 1; i < n; i++) \n        {\n            ListNode* p = new ListNode(i);\n            prev->next = p;\n            prev = p;\n            mp[i] = p; // Store the pointer to the node in the map\n        }\n\n        // Process queries (this part depends on what the queries are supposed to do)\n        for (auto& q : queries) \n        {\n            if(mp.find(q[0]) == mp.end() || mp.find(q[1]) == mp.end()) \n            {\n                ans.push_back(mp.size()-1);\n                continue;\n            }\n            ListNode* p = mp[q[0]]->next;\n            int c = 0;\n            while(p != nullptr && p->val < q[1])\n            {\n                mp.erase(p->val);\n                ListNode* temp = p;\n                p = p->next;\n                delete temp; // Avoid memory leak\n                c++;\n            }\n            mp[q[0]]->next = p;\n            ans.push_back(mp.size()-1);\n        }\n        return ans;\n    }\n};\n\n/**\n * Example usage:\n * Solution sol;\n * vector<vector<int>> queries = {{0, 10}, {1, 20}};\n * vector<int> result = sol.shortestDistanceAfterQueries(5, queries);\n */\n",
    "submit_ts": "1722743989",
    "subm_id": "1343804516"
}