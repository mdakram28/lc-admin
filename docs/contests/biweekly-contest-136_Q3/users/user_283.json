{
    "username": "BtwdkEHOy2",
    "submission": "#define N (int)3e5 + 55\ntypedef pair<int,int> ii;\n\nclass Solution {\npublic:\n    vector<int> adj[N];\n    \n    bool vis[N], val[N];\n    int n, m, dp[N][5];\n    int get(int i, int j)\n    {\n        return i * (m + 1) + j + 1;\n    }\n    int count0, count1;\n    \n    void dfs(int u)\n    {\n        vis[u] = 1;\n        // cout << u << \"\\n\";\n        if(val[u] == 0) count0++;\n        else count1++;\n        for(auto v: adj[u])\n        {\n            if(!vis[v]) dfs(v);\n        }\n    }\n    int minFlips(vector<vector<int>>& grid) {\n        \n        n = grid.size() - 1;\n        m = grid[0].size() - 1;\n        \n        // col;\n        for(int i = 0; i <= (n + 1) * (m + 1); i++) \n            vis[i] = 0;\n        for(int i = 0; i <= n; i++)\n            for(int j = 0; j <= m; j++)\n                val[get(i, j)] = grid[i][j];\n        \n        for(int col = 0; col <= m; col++)\n        {\n            if(col >= m - col) break;\n            for(int r = 0; r <= n; r++)\n            {\n               adj[get(r, col)].push_back(get(r, m - col));\n               adj[get(r, m - col)].push_back(get(r, col));\n            }\n        }\n        for(int row = 0; row <= n; row++)\n        {\n            if(row >= n -  row) break;\n            for(int c = 0; c <= m; c++)\n            {\n                \n                adj[get(row, c)].push_back(get(n - row, c));\n                adj[get(n - row, c)].push_back(get(row, c));\n            }\n        }\n        vector<ii> blocks;\n        for(int i = 1; i <= (n + 1) * (m + 1); i++)\n        {\n            // cout << adj[i].size() << \" \" << i << \"!!!\\n\";\n            if(vis[i]) continue;\n            count0 = 0;\n            count1 = 0;\n           // cout << \"START\\n\";\n            dfs(i);\n            //cout << \"END\\n\";\n            blocks.push_back({count0, count1});\n            \n         //  cout << count0 << \" \" << count1 << \"@\\n\";\n        }\n       //cout << (int)blocks.size() << \"!!\";\n        \n        memset(dp, 0x3f, sizeof dp);\n    \n        dp[0][(blocks[0].second + blocks[0].first) % 4] = blocks[0].first;   \n        \n        dp[0][0] = min(dp[0][0], blocks[0].second);\n        \n       // cout << dp[0][0] << \"!!\\n\";\n        for(int i = 1; i < (int)blocks.size(); i++)\n        {\n            for(int p = 0; p <= 3; p++)\n            {\n                int newState = (p + blocks[i].second + blocks[i].first) % 4;\n                dp[i][newState] = min(dp[i][newState], dp[i - 1][p] + blocks[i].first);\n                dp[i][p] = min(dp[i][p], dp[i - 1][p] + blocks[i].second);\n            }\n        }\n        return dp[(int)blocks.size() - 1][0];\n    }\n};",
    "submit_ts": "1722697858",
    "subm_id": "1343161442"
}