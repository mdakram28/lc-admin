{
    "username": "nishantluhera",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n\n        def is_peak(i):\n            return 0 < i < self.n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        def build_tree(node, start, end):\n            if start == end:\n                self.tree[node] = 1 if is_peak(start) else 0\n            else:\n                mid = (start + end) // 2\n                build_tree(2 * node + 1, start, mid)\n                build_tree(2 * node + 2, mid + 1, end)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def update_tree(node, start, end, idx):\n            if start == end:\n                self.tree[node] = 1 if is_peak(start) else 0\n            else:\n                mid = (start + end) // 2\n                if start <= idx <= mid:\n                    update_tree(2 * node + 1, start, mid, idx)\n                else:\n                    update_tree(2 * node + 2, mid + 1, end, idx)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def query_tree(node, start, end, L, R):\n            if R < start or end < L:\n                return 0\n            if L <= start and end <= R:\n                return self.tree[node]\n            mid = (start + end) // 2\n            left_query = query_tree(2 * node + 1, start, mid, L, R)\n            right_query = query_tree(2 * node + 2, mid + 1, end, L, R)\n            return left_query + right_query\n\n        build_tree(0, 0, self.n - 1)\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if ri - li < 2:\n                    results.append(0)\n                else:\n                    results.append(query_tree(0, 0, self.n - 1, li + 1, ri - 1))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                self.nums[indexi] = vali\n                for i in [indexi - 1, indexi, indexi + 1]:\n                    if 0 <= i < self.n:\n                        update_tree(0, 0, self.n - 1, i)\n\n        return results",
    "submit_ts": 1718507468.0
}