{
    "username": "duke-alibubu",
    "submission": "class Solution {\n    int max;\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        max = 0;\n        return Math.max(minHeightTree(edges1) + minHeightTree(edges2) + 1, max);\n    }\n    \n    private int minHeightTree(int[][] edges){\n        int n = edges.length + 1;\n        int ans = 0;\n        int[] numEdge = new int[n];\n        \n        Set<Integer>[] adjList = new Set[n];\n        for (int i = 0; i < n; i++){\n            adjList[i]= new HashSet<>();\n        }\n        \n        for (int[] edge: edges){\n            int e1 = edge[0];\n            int e2 = edge[1];\n            numEdge[e1]++;\n            numEdge[e2]++;\n            adjList[e1].add(e2);\n            adjList[e2].add(e1);\n        }\n        \n        Queue<Integer> queue = new LinkedList<Integer>();\n        for (int i = 0; i < n; i++){\n            if (numEdge[i] == 1){\n                queue.offer(i);\n            }\n        }\n        \n        int left = n;\n        while(left > 1){\n            int size = queue.size();\n            for (int i = 0; i < size; i++){\n                int curr = queue.poll();\n                for (int next: adjList[curr]){\n                    adjList[next].remove(curr);\n                    numEdge[next]--;\n                    if (numEdge[next] == 1){\n                        queue.offer(next);\n                    }\n                }\n            }\n            left -= size;\n            ans++;\n        }\n        \n        //System.out.println(ans);\n        max = Math.max(max, 2*ans - (1-left));\n        return ans;\n    }\n}",
    "submit_ts": "1719718944",
    "subm_id": "1304429926"
}