{
    "username": "pein531",
    "submission": "class Solution {\npublic: \n    long long square(long long x) {\n        return x * x;\n    }\n    bool checkX(vector < int > & c, int X, int Y) {\n        return c[0] <= c[2] || c[1] >= Y - c[2];\n    }\n    bool checkY(vector < int > & c, int X, int Y) {\n        return c[1] <= c[2] || c[0] >= X - c[2];\n    }\n    bool check(vector < int > & c1, vector < int > & c2) {\n        return square(c1[0] - c2[0]) + square(c1[1] - c2[1]) <= square(c1[2] + c2[2]);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>> & circles) {\n        int n = circles.size();\n        vector<bool> isconnect(n);\n        deque<int> dq;\n        for(int i = 0; i < n; i++) {\n            if(checkX(circles[i], X, Y)) {\n                isconnect[i] = true;\n                dq.push_back(i);\n            }\n        }\n        while(!dq.empty()) {\n            int x = dq.front();\n            dq.pop_front();\n            for(int i = 0; i < n; i++) {\n                if((!isconnect[i]) && check(circles[i], circles[x])) {\n                    isconnect[i] = true;\n                    dq.push_back(i);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++) {\n            if(isconnect[i] && checkY(circles[i], X, Y)) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136768",
    "subm_id": "1335744424"
}