{
    "username": "Sanath_Kulla",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        auto get = [&](int x1 , int y1 , int x2 , int y2){\n               int a = 1e9 , b = -1 , c = 1e9 , d = -1;\n            bool p = 0;\n               for(int i = x1 ; i <= x2 ; i++){\n                   for(int j = y1 ; j <= y2;j++){\n                       if(grid[i][j]){\n                           p = 1;\n                           a = min(a , i);\n                           b = max(b , i);\n                           c=min(c , j);\n                           d = max(d , j);\n                       }\n                   }\n\n               }\n            vector<int> r = {a,b,c,d};\n            return r;\n        };\n        int ans = 1e9;\n        \n        for(int i = 0 ;  i < n ;i++){\n            for(int j = 0 ; j < m;j++){\n                if(i == n-1 and j == m-1)continue;\n                auto v = get(0,0,i,j);\n                int x1 = v[0] , x2 = v[1] , y1 = v[2] , y2 = v[3];\n                if(x2 == -1){\n                    continue;\n                }\n                int one = (x2-x1+1) * (y2-y1+1);\n                if(i == n-1 or get(i+1,0,n-1,j)[1] == -1){\n                    //do only right    \n                    for(int row = 0 ; row +1 < n ;row++){\n                        auto down = get(0,j+1 , row , m-1);\n                        auto up = get(row+1,j+1,n-1,m-1);\n                        if(down[1] != -1 and up[1] != -1){\n                          ans = min(ans , one + (down[1] - down[0] + 1) * (down[3] - down[2]+1) + (up[1] - up[0] + 1) * (up[3] - up[2]+1));\n                        }\n                    }\n                    for(int col = j+1 ; col + 1 < m;col++){\n                        auto down = get(0,j+1 , n-1 , col);\n                        auto up = get(0,col+1,n-1,m-1);\n                        if(down[1] != -1 and up[1] != -1){\n                          ans = min(ans , one + (down[1] - down[0] + 1) * (down[3] - down[2]+1) + (up[1] - up[0] + 1) * (up[3] - up[2]+1));\n                        }\n                    }\n                }\n                if(j == m-1 or get(0 , j+1 , i , m-1)[1] == -1){\n                    //do only down\n                        for(int col = 0 ; col+1<m;col++){\n                        auto down = get(i+1 , 0 , n-1 , col);\n                        auto up = get(i+1,col+1,n-1,m-1);\n                        if(down[1] != -1 and up[1] != -1){\n                          ans = min(ans , one + (down[1] - down[0] + 1) * (down[3] - down[2]+1) + (up[1] - up[0] + 1) * (up[3] - up[2]+1));\n                        }  \n                        }\n                    for(int row = i + 1 ; row +1 < n ;row++){\n                        auto down = get(i+1,0 , row , m-1);\n                        auto up = get(row+1,0,n-1,m-1);\n                        if(down[1] != -1 and up[1] != -1){\n                          ans = min(ans , one + (down[1] - down[0] + 1) * (down[3] - down[2]+1) + (up[1] - up[0] + 1) * (up[3] - up[2]+1));\n                        }\n                    }\n\n                }\n                //do both\n                //1\n                auto down = get(i+1,0,n-1,m-1);\n                auto up = get(0,j+1,i,m-1);\n                if(down[1] != -1 and up[1] != -1){\n                ans = min(ans , one + (down[1] - down[0] + 1) * (down[3] - down[2]+1) + (up[1] - up[0] + 1) * (up[3] - up[2]+1));\n                    \n                }\n                //2 \n                down = get(i+1,0,n-1,j);\n                up = get(0,j+1,n-1,m-1);\n                if(down[1] != -1 and up[1] != -1){\n                \n                ans = min(ans , one + (down[1] - down[0] + 1) * (down[3] - down[2]+1) + (up[1] - up[0] + 1) * (up[3] - up[2]+1));\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719113785.0
}