{
    "username": "nikatamliani1",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = (int)grid.size();\n        int m = (int)grid[0].size();\n        vector<pair<int, int>> mods;\n        int ans = 0, ones = 0;\n        set<set<pair<int, int>>> cands2;\n        vector<vector<bool>> seen(n, vector<bool>(m, false));\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                if (seen[i][j]) {\n                    continue;\n                }\n                set<pair<int, int>> cands;\n                for (int a : {i, n - i - 1}) {\n                    for (int b : {j, m - j - 1}) {\n                        cands.insert({a, b});\n                        seen[a][b] = 1;\n                    }\n                }\n                \n                vector<int> cnt(2);\n                for (pair<int, int> p : cands) {\n                    ++cnt[grid[p.first][p.second]];\n                }\n\n                if (cnt[0] < cnt[1]) {\n\n                    ans += cnt[0];\n                    int c_ones = cnt[0] + cnt[1];\n                    ones += c_ones;\n                    mods.push_back({(12 - c_ones) % 4, cnt[1] - cnt[0]});\n                } else {\n                    ans += cnt[1];\n                    int c_ones = 0;\n                    ones += c_ones;\n                    mods.push_back({(cnt[0] + cnt[1] - c_ones + 12) % 4, cnt[0] - cnt[1]});\n                }\n            }\n        }\n        \n        int need = (4 - ones % 4) % 4;\n        vector<int> dp(4, 10000000);\n        dp[0] = 0;\n        for (pair<int, int> p : mods) {\n            auto ndp = dp;\n            for (int m = 0; m < 4; ++m) {\n                int next_m = (m + p.first) % 4;\n                int cost = dp[m] + p.second;\n                ndp[next_m] = min(ndp[next_m], cost);\n            }\n            dp = ndp;\n        }\n        \n        return dp[need] + ans;\n    }\n};",
    "submit_ts": "1722697075",
    "subm_id": "1343133239"
}