{
    "username": "2swifty4u",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the cuts in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        // Reverse the arrays to simulate descending order\n        reverseArray(horizontalCut);\n        reverseArray(verticalCut);\n        \n        long totalCost = 0;\n        int hSegments = 1, vSegments = 1;\n        int hIndex = 0, vIndex = 0;\n        \n        // Process the cuts\n        while (hIndex < horizontalCut.length && vIndex < verticalCut.length) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += (long) horizontalCut[hIndex] * vSegments;\n                hSegments++;\n                hIndex++;\n            } else {\n                totalCost += (long) verticalCut[vIndex] * hSegments;\n                vSegments++;\n                vIndex++;\n            }\n        }\n        \n        // Add remaining horizontal cuts\n        while (hIndex < horizontalCut.length) {\n            totalCost += (long) horizontalCut[hIndex] * vSegments;\n            hSegments++;\n            hIndex++;\n        }\n        \n        // Add remaining vertical cuts\n        while (vIndex < verticalCut.length) {\n            totalCost += (long) verticalCut[vIndex] * hSegments;\n            vSegments++;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n    \n    private void reverseArray(int[] arr) {\n        int i = 0, j = arr.length - 1;\n        while (i < j) {\n            int temp = arr[i];\n            arr[i] = arr[j];\n            arr[j] = temp;\n            i++;\n            j--;\n        }\n    }\n}\n",
    "submit_ts": "1720926492",
    "subm_id": "1320287880"
}