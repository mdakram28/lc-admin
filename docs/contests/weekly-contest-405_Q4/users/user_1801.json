{
    "username": "arjun_06_s",
    "submission": "\n\nstruct TrieNode{\n    struct TrieNode* children[26];\n    bool isLeaf;\n    int cost;\n    \n    TrieNode() {\n        for (int i = 0; i < 26; i++) {\n            children[i] = nullptr;\n        }\n        isLeaf = false;\n        cost = -1;\n    }\n};\n\nclass Trie {\npublic:\n\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode;\n    }\n    \n    void insert(string word, int cost) {\n        TrieNode* cur = root;\n        for(char c: word){\n            if(!cur->children[c-'a'])\n            cur->children[c-'a'] = new TrieNode;\n            cur = cur->children[c-'a'];\n        }\n        cur->isLeaf = true;\n        cur->cost = cost;\n    }\n    \n    bool search(string word) {\n        TrieNode* cur = root;\n        for(char c: word){\n            if(!cur->children[c-'a']) return false;\n            cur = cur->children[c-'a'];\n        }\n        return cur->isLeaf;\n    }\n    \n    bool startsWith(string prefix) {\n        TrieNode* cur = root;\n        for(char c: prefix){\n            if(!cur->children[c-'a']) return false;\n            cur = cur->children[c-'a'];\n        }\n        return true;\n    }\n};\n\n\nclass Solution {\npublic:\n    string tar;\n    int n;\n    Trie trie;\n    vector<int> dp;\n\n    long long util(int ind){\n        if(ind==n) return 0;\n        if(dp[ind]!=-1) return dp[ind];\n        long long ans = INT_MAX;\n        TrieNode* cur = trie.root;\n\n        for(int i=ind; i<n; i++){\n            int index = tar[i]-'a';\n            if(!cur->children[index]) break;\n            cur = cur->children[index];\n            if(cur->isLeaf) ans = min(ans, cur->cost + util(i+1));\n        }\n        if(ans>=INT_MAX) dp[ind] = INT_MAX;\n        else dp[ind] = ans;\n        return dp[ind];\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n\n        unordered_map<string, int> mp;\n\n        for(int i=0; i<n; i++){\n            if(mp.find(words[i])==mp.end()) mp[words[i]] = costs[i];\n            else mp[words[i]] = min(mp[words[i]], costs[i]);\n        }\n        for(auto& i: mp)\n        trie.insert(i.first, i.second);\n\n        this->n = target.size();\n        tar = target;\n        dp = vector<int>(this->n, -1);\n\n        int ans = util(0);\n        if(ans>=INT_MAX) return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720323934",
    "subm_id": "1312387616"
}