{
    "username": "momochi003",
    "submission": "class SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def f(a, b):\n            return a+b\n        N = len(nums)\n        data = [0]*(N+1)\n        seg = SegmentTree(data, 0, f)\n        \n        for i in range(N):\n            if i == 0:\n                continue\n            if i == N-1:\n                continue\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                seg[i] = 1\n                \n        def is_peak(i):\n            if i <= 0 or i >= N-1:\n                return False\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                return True\n            return False\n        \n        def update_peak(i):\n            seg[i] = int(is_peak(i))\n            \n        ans = []\n        for (t, a, b) in queries:\n            if t == 1:\n                q = seg.query(a, b+1)\n                if is_peak(a):\n                    q -= 1\n                if is_peak(b):\n                    q -= 1\n                ans.append(max(0, q))\n                continue\n            if t == 2:\n                nums[a] = b\n                update_peak(a)\n                update_peak(a-1)\n                update_peak(a+1)\n                \n        return ans\n                \n                \n        \n        ",
    "submit_ts": "1718507465",
    "subm_id": "1289652439"
}