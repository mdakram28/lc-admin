{
    "username": "ChairmanMao",
    "submission": "\nfrom typing import List\nfrom sortedcontainers import SortedList\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        res = []\n        steps = n - 1\n        intervals = SortedList()\n        \n        for a, b in queries:\n            \n            # initial_length = b - a  # Initial interval length (exclusive)\n            # merged_length = initial_length\n\n            idx = intervals.bisect_left((a, 0))\n            \n            if idx < len(intervals):\n                c, d = intervals[idx]\n                if c <= a < b <= d:\n                    res.append(steps)\n                    continue\n                    \n            if idx - 1 >= 0:\n                c, d = intervals[idx - 1]\n                if c <= a < b <= d:\n                    res.append(steps)\n                    continue\n            \n            \n            while idx < len(intervals):\n                c, d = intervals[idx]\n                if a <= c < d <= b:\n                    steps += d - c - 1\n                    del intervals[idx]\n                else:\n                    break\n            \n            \n            while idx - 1 >= 0:\n                c, d= intervals[idx - 1]\n                if a <= c < d <= b:\n                    steps += d - c - 1\n                    del intervals[idx - 1]\n                else:\n                    break\n                    \n\n            # Insert the merged interval\n            intervals.add((a, b))\n\n            steps -= b - a - 1\n            \n            # print(intervals, steps)\n            \n            res.append(steps)\n        \n        return res",
    "submit_ts": "1722741656",
    "subm_id": "1343750236"
}