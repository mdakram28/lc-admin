{
    "username": "Mj13",
    "submission": "class Solution {\npublic:\n    int diameter(vector<int>adj[],int node,int &last,int n){\n        vector<int>dist(n,-1);\n        function<void(int,int)>dfs=[&](int node,int d){\n            dist[node]=d;\n            if(d>dist[last]){\n                last=node;\n            }\n            for(auto it:adj[node]){\n                if(dist[it]==-1){\n                    dfs(it,d+1);\n                }\n            }\n        };\n        last=node;\n        dfs(node,0);\n        return dist[last];\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1,m=edges2.size()+1;\n        vector<int>adj1[n];\n        vector<int>adj2[m];\n        for(auto it:edges1){\n            adj1[it[0]].push_back(it[1]);\n            adj1[it[1]].push_back(it[0]);\n        }\n        for(auto it:edges2){\n            adj2[it[0]].push_back(it[1]);\n            adj2[it[1]].push_back(it[0]);\n        }\n        int n1=0,n2=0;\n        diameter(adj1,0,n1,n);\n        diameter(adj2,0,n2,m);\n        int d1=diameter(adj1,n1,n1,n);\n        int d2=diameter(adj2,n2,n2,m);\n        int mindia=max(d2,d1);\n        return max(mindia,(d1+1)/2+(d2+1)/2+1);\n    }\n};",
    "submit_ts": "1719719779",
    "subm_id": "1304450347"
}