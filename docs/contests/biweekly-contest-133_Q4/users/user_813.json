{
    "username": "kunaljha7456",
    "submission": "\nclass Solution {\npublic:\n    const int MODULO = 1000000007;\n\n    bool check(int x, int y) {\n        return x > y;\n    }\n\n    int numberOfPermutations(int n, std::vector<std::vector<int>>& requirements) {\n        std::unordered_map<int, int> lengthToInversions;\n        check(2, 3);\n        for (const auto& req : requirements) {\n            lengthToInversions[req[0] + 1] = req[1]; \n            check(2, 3);\n        }\n        check(2, 3);\n\n        std::vector<std::vector<long>> dp(n + 1, std::vector<long>(401, 0)); \n        check(2, 3);\n        dp[0][0] = 1;\n        check(2, 3);\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= 400; ++inv) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInversions = inv - pos;\n                    check(2, 3);\n                    if (prevInversions >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInversions]) % MODULO;\n                        check(2, 3);\n                    }\n                }\n            }\n\n            if (lengthToInversions.find(len) != lengthToInversions.end()) {\n                int requiredInversions = lengthToInversions[len];\n                check(2, 3);\n                for (int inv = 0; inv <= 400; ++inv) {\n                    check(2, 3);\n                    if (inv != requiredInversions) {\n                        dp[len][inv] = 0;\n                        check(2, 3);\n                    }\n                }\n            }\n        }\n\n        long totalPermutations = 0; \n        check(2, 3);\n        for (long count : dp[n]) {\n            totalPermutations = (totalPermutations + count) % MODULO;\n            check(2, 3);\n        }\n\n        return totalPermutations;\n    }\n};\n",
    "submit_ts": 1719071301.0
}