{
    "username": "Prahil6109",
    "submission": "class Solution {\npublic:\n    double dist(int x1,int y1,int x2,int y2){\n        long long x = abs(x1-x2);\n        long long y = abs(y1-y2);\n        return sqrtl(x*x+y*y);\n    }\n    void dfs(int curr,vector<vector<int>> &graph,int &upper,int &lower,int &left,int &right,vector<bool> &visited,vector<vector<int>>& circles){\n        if(visited[curr]){\n            return;\n        }\n        visited[curr]=true;\n        lower=min(lower,circles[curr][1]-circles[curr][2]);\n        upper=max(upper,circles[curr][1]+circles[curr][2]);\n        left=min(left,circles[curr][0]-circles[curr][2]);\n        right=max(right,circles[curr][0]+circles[curr][2]);\n        for(auto next: graph[curr]){\n            dfs(next,graph,upper,lower,left,right,visited,circles);\n        }\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        // origin check\n        for(auto circle: circles){\n            double d = dist(0,0,circle[0],circle[1]);\n            if(d<=circle[2]){\n                return false;\n            }\n            if(circle[0]-circle[2]<=0 && circle[1]-circle[2]<=0){\n                return false;\n            }\n        }\n        // dest check\n        for(auto circle: circles){\n            double d = dist(X,Y,circle[0],circle[1]);\n            // cout<<d<<\" \"<<circle[2]<<endl;\n            if(d<=circle[2]){\n                return false;\n            }\n            if(circle[0]+circle[2]>=X && circle[1]+circle[2]>=Y){\n                return false;\n            }\n        }\n\n        int n = circles.size();\n        vector<vector<int>> graph(n);\n        for(int i=0;i<n;i++){\n            for(int j=0;j<n;j++){\n                if(i==j) continue;\n                double d = dist(circles[i][0],circles[i][1],circles[j][0],circles[j][1]);\n                if(d<=0ll+circles[i][2]+circles[j][2]){\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        vector<bool> visited(n,false);\n        for(int i=0;i<n;i++){\n            int lower=circles[i][1];\n            int upper=circles[i][1];\n            int left=circles[i][0];\n            int right=circles[i][0];\n            dfs(i,graph,upper,lower,left,right,visited,circles);\n            if(left<=0 && right>=X){\n                return false;\n            }\n            if(lower<=0 && upper>=Y){\n                return false;\n            }\n            if(left<=0 && lower<=0){\n                return false;\n            }\n            if(right>=X && upper>=Y){\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138918",
    "subm_id": "1335803080"
}