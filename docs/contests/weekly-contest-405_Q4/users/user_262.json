{
    "username": "babablacksheep014",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float(\"inf\")\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\n    def search(self, target, start_index):\n        node = self.root\n        positions = []\n        for i in range(start_index, len(target)):\n            char = target[i]\n            if char not in node.children:\n                break\n            node = node.children[char]\n            if node.cost is not None:\n                positions.append((i + 1, node.cost))\n        return positions\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        t = Trie()\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for w, c in zip(words, costs):\n            t.insert(w, c)\n        \n        for i in range(n + 1):\n            if dp[i] == float('inf'):\n                continue\n            positions = t.search(target, i)\n            for pos, cost in positions:\n                dp[pos] = min(dp[pos], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n            \n        ",
    "submit_ts": "1720321333",
    "subm_id": "1312320042"
}