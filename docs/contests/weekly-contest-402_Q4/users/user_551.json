{
    "username": "Zeyu_Shen",
    "submission": "class Solution {\npublic:\n    \n    struct segtree{\n        int size;\n        vector<int> sum;\n\n        void init(int n){\n            size = 1;\n            while(size < n) size <<= 1;\n            sum.assign(2 * size, 0);\n        }\n        \n        void update(int i, int v, int x, int lx, int rx){\n            if (rx - lx == 1){\n                sum[x] = v;\n                return;\n            }\n            int mid = (lx + rx) >> 1;\n            if (mid > i) update(i, v, 2 * x + 1, lx, mid);\n            else update(i, v, 2 * x + 2, mid, rx);\n            sum[x] = sum[2 * x + 1] + sum[2 * x + 2];\n        }\n\n        void update(int i, int v){\n            update(i, v, 0, 0, size);\n        }\n\n        int calc(int l, int r, int x, int lx, int rx){\n            if (rx <= l || lx >= r) return 0;\n            if (rx <= r && lx >= l) return sum[x];\n            int mid = (lx + rx) >> 1;\n            return calc(l, r, 2 * x + 1, lx, mid) + calc(l, r, 2 * x + 2, mid, rx);\n        }\n\n        int calc(int l, int r){\n            return calc(l, r, 0, 0, size);\n        }\n    };\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> ans;\n        int n = nums.size();\n        segtree seg;\n        seg.init(n);\n        for (int i = 1; i < n - 1; i ++){\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) seg.update(i, 1);\n        }\n        for (int i = 0; i < queries.size(); i ++){\n            if (queries[i][0] == 1){\n                int l = queries[i][1], r = queries[i][2];\n                ans.push_back(seg.calc(l + 1, r));\n            } else{\n                int idx = queries[i][1], val = queries[i][2];\n                nums[idx] = val;\n                if (idx != 0 && idx != n - 1 && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) seg.update(idx, 1);\n                else seg.update(idx, 0);\n                if (idx - 1 > 0 && nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > nums[idx]) seg.update(idx - 1, 1);\n                else if (idx - 1 >= 0) seg.update(idx - 1, 0);\n                if (idx + 1 <  n - 1 && nums[idx + 1] > nums[idx] && nums[idx + 1] > nums[idx + 2]) seg.update(idx + 1, 1);\n                else if (idx + 1 < n) seg.update(idx + 1, 0);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507574.0
}