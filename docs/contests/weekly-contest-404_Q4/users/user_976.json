{
    "username": "Hs9320",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& adj, int start, vector<int>& dist) {\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthest]) {\n                        farthest = neighbor;\n                    }\n                }\n            }\n        }\n        return farthest;\n    }\n\n    int calculateDiameter(vector<vector<int>>& adj, int n) {\n        vector<int> dist(n, -1);\n        int farthestNode = bfs(adj, 0, dist);\n        dist.assign(n, -1);\n        int otherEnd = bfs(adj, farthestNode, dist);\n        return dist[otherEnd];\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n\n        vector<vector<int>> adj1(n1), adj2(n2);\n        for (auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int diameter1 = calculateDiameter(adj1, n1);\n        int diameter2 = calculateDiameter(adj2, n2);\n\n        int radius1 = (diameter1 + 1) / 2;\n        int radius2 = (diameter2 + 1) / 2;\n\n        return max({diameter1, diameter2, radius1 + radius2 + 1});\n    }\n};\n",
    "submit_ts": "1719717903",
    "subm_id": "1304403728"
}