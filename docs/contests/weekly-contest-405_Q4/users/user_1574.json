{
    "username": "vaibhavrakyan",
    "submission": "int dp[50001];\nclass TrieNode{\n    public:\n    TrieNode* children[26];\n    int cost;\n    TrieNode(): cost(INT_MAX){\n        memset(children, NULL, sizeof(children));\n    }\n    \n};\n\nclass Trie{\n    public:\n    TrieNode* root;\n    Trie(){\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int cost){\n        TrieNode* tnode = root;\n        for(char ch:word){\n            if(!tnode->children[ch-'a']){\n                tnode->children[ch-'a'] = new TrieNode();\n            }        \n            tnode = tnode->children[ch-'a'];\n            \n        }\n        tnode->cost = min(tnode->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int helper(const string& s, int it, Trie& trie){\n        int n = s.length();\n        if(it == n) return 0;\n        \n        if(dp[it]!= -1) return dp[it];\n        \n        int min_cost = INT_MAX-10001;\n        TrieNode* tnode = trie.root;\n        \n        for(int i=it; i<n; i++){\n            char ch = s[i];\n            if(!tnode->children[ch-'a']) break;\n            tnode = tnode->children[ch-'a'];\n            if(tnode->cost != INT_MAX){\n                int cost = tnode->cost + helper(s, i+1, trie);\n                min_cost = min(cost, min_cost);\n            }\n        }\n        \n        return dp[it] = min_cost;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int i{};\n        int n = words.size();\n        Trie trie;\n        for(int i=0; i<words.size(); i++){\n            trie.insert(words[i], costs[i]);\n        }\n        memset(dp, -1, sizeof(dp));\n        int ans = helper(target, 0, trie);\n        if(ans >=  INT_MAX-10001) return -1;\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": "1720324492",
    "subm_id": "1312400838"
}