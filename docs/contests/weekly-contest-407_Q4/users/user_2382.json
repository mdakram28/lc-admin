{
    "username": "angry-mccarthygp9",
    "submission": "#pragma GCC optimize(\"Ofast\", \"inline\")\n#include <bits/stdc++.h>\n//#include <ext/rope>\n//#include <ext/pb_ds/assoc_container.hpp>\n//#include <ext/pb_ds/tree_policy.hpp>\n//#include <ext/pb_ds/trie_policy.hpp>\n//#include <ext/pb_ds/priority_queue.hpp>\n#define LL long long\n#define ULL unsigned LL\n#define LLL __int128\n#define ULLL unsigned LLL\n#define LD long double\n#define LLD __float128\n#define PII pair<int, int>\n#define PDD pair<double, double>\n#define x first\n#define y second\n#define INF 0x3f3f3f3f\n#define LINF 0x7f7f7f7f7f7f7f7f\n#define db1(a) cout << #a << \" = \" << a << \"\\t\\tline: \" << __LINE__ << endl\n#define db2(a) cout << #a << \" = [\"; for(auto &_ : a) cout << _ << \", \"; cout << \"]\" << \"\\t\\tline: \" << __LINE__ << endl\n#define db3(a, n) cout << #a << \" = [\"; for(int _ = 0; _ < n; _ ++ ) cout << a[_] << \", \"; cout << \"]\" << \"\\t\\tline: \" << __LINE__ << endl\nusing namespace std;\n//using namespace __gnu_cxx;\n//using namespace __gnu_pbds;\n//using Trie = trie<string, null_type, trie_string_access_traits<>, pat_trie_tag, trie_prefix_search_node_update>;\n//template <class T>\n//using Tree = tree<T, null_type, less_equal<T>, rb_tree_tag, tree_order_statistics_node_update>;\n//template <class T>\n//using Heap = __gnu_pbds::priority_queue<T, greater<T>, pairing_heap_tag>;\n\n//==========================================================================================================================================================\n\n/*\nnums =\n[9,2,6,10,4,8,3,4,2,3]\ntarget =\n[9,5,5,1,7,9,8,7,6,5]\n\n\n\n[0, 3, \n3\n\n\n-1, -9, \n8 + 1 \n9\n\n\n3, 1, 5, 3, 4, 2, ]\n2 + 2 + 1 + 1 + 1 + 1\n4 + 4\n8\n\n*/\n\n#define PNI pair<int, PII>\n\nclass Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        vector<int> arr;\n        for(int i = 0; i < nums.size(); i ++ )\n        {\n        \tarr.emplace_back(target[i] - nums[i]);\n\t\t}\n\t\t// db2(arr);\n\t\tvector<PNI> temp;\n\t\tpriority_queue<PNI, vector<PNI>, greater<PNI>> heap;\n\t\tfor(int i = 0; i < arr.size(); i ++ )\n\t\t{\n\t\t\tint j = i + 1;\n\t\t\twhile(j < arr.size() && arr[j] == arr[i]) j ++ ;\n\t\t\tif(arr[i] < 0)\n\t\t\t{\n\t\t\t\theap.push({arr[i], {i, j - 1}});\n\t\t\t}\n\t\t\telse if(arr[i] > 0)\n\t\t\t{\n\t\t\t\ttemp.push_back({-arr[i], {i, j - 1}});\n\t\t\t}\n\t\t\ti = j - 1;\n\t\t}\n\t\t\n\t\tLL ans = 0;\n\t\twhile(heap.size())\n\t\t{\n\t\t\tauto t = heap.top(); heap.pop();\n\t\t\twhile(heap.size() && t.x == heap.top().x && t.y.y == heap.top().y.x - 1)\n\t\t\t{\n\t\t\t\tt.y.y = heap.top().y.y;\n\t\t\t\theap.pop();\n\t\t\t}\n\t\t\t\n\t\t\tint l = t.y.x - 1, r = t.y.y + 1, k = 0;\n\t\t\tif(l >= 0) k = min(k, arr[l]);\n\t\t\tif(r < arr.size()) k = min(k, arr[r]);\n\t\t\t\n\t\t\tans += k - t.x;\n\t\t\tt.x = k;\n\t\t\tif(t.x != 0)\n\t\t\t{\n\t\t\t\theap.push(t);\n\t\t\t}\n\t\t\tarr[t.y.x] = arr[t.y.y] = t.x;\n\t\t}\n\t\t// db1(ans);\n\t\tfor(auto e : temp)\n\t\t{\n\t\t\theap.push(e);\n\t\t\tarr[e.y.x] = arr[e.y.y] = e.x;\n\t\t}\n\t\twhile(heap.size())\n\t\t{\n\t\t\tauto t = heap.top(); heap.pop();\n//\t\t\tdb1(t.x);\n//\t\t\tdb1(t.y.x);\n//\t\t\tdb1(t.y.y);\n\t\t\twhile(heap.size() && t.x == heap.top().x && t.y.y == heap.top().y.x - 1)\n\t\t\t{\n\t\t\t\tt.y.y = heap.top().y.y;\n\t\t\t\theap.pop();\n\t\t\t}\n\n\t\t\tint l = t.y.x - 1, r = t.y.y + 1, k = 0;\n\t\t\tif(l >= 0) k = min(k, arr[l]);\n\t\t\tif(r < arr.size()) k = min(k, arr[r]);\n\t\t\t\n\t\t\tans += k - t.x;\n\t\t\tt.x = k;\n\t\t\tif(t.x != 0)\n\t\t\t{\n\t\t\t\theap.push(t);\n\t\t\t}\n\t\t\tarr[t.y.x] = arr[t.y.y] = t.x;\n\t\t}\n\t\t// db1(ans);\n\t\treturn ans;\n    }\n};\n\n\n\n\n\n",
    "submit_ts": "1721533702",
    "subm_id": "548400551"
}