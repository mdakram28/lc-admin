{
    "username": "anubhavgeu",
    "submission": "class Solution {\npublic:\n    int mod = 1e9+7;\n    vector<vector<vector<int>>> dp; // Memoization table\n\n    int findPairs(vector<int>& nums, int idx, int prev1, int prev2) {\n        if (idx >= nums.size()) return 1;  // Reached the end of the array\n\n        if (dp[idx][prev1][prev2] != -1) return dp[idx][prev1][prev2];\n\n        int ans = 0;\n        for (int i = 0; i <= nums[idx]; i++) {\n            int arr1_val = i;\n            int arr2_val = nums[idx] - i;\n\n            // arr1 should be non-decreasing, arr2 should be non-increasing\n            if (arr1_val >= prev1 && arr2_val <= prev2) {\n                ans = (ans + findPairs(nums, idx + 1, arr1_val, arr2_val)) % mod;\n            }\n        }\n        return dp[idx][prev1][prev2] = ans;\n    }\n\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        dp = vector<vector<vector<int>>>(n, vector<vector<int>>(51, vector<int>(51, -1))); // nums[i] <= 50\n        return findPairs(nums, 0, 0, 50); // Initialize with 0 for arr1 and 50 for arr2\n    }\n};\n",
    "submit_ts": "1723345055",
    "subm_id": "1351547643"
}