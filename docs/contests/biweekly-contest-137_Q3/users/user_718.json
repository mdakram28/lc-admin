{
    "username": "nimish7866",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n\n        vector<vector<pair<int, int>>> topValues(m); \n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> values;\n            for (int j = 0; j < n; ++j) {\n                values.emplace_back(board[i][j], j);\n            }\n            sort(values.rbegin(), values.rend()); \n            topValues[i] = {values[0], values[1], values[2]}; \n        }\n\n        long long maxSum = LLONG_MIN;\n\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n\n                    for (const auto& v1 : topValues[r1]) {\n                        for (const auto& v2 : topValues[r2]) {\n                            if (v2.second == v1.second) continue; \n                            for (const auto& v3 : topValues[r3]) {\n                                if (v3.second == v1.second || v3.second == v2.second) continue;\n                                long long currentSum = (long long)v1.first + v2.first + v3.first;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723909706",
    "subm_id": "1359202670"
}