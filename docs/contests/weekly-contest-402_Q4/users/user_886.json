{
    "username": "chamel",
    "submission": "class Solution {\nprivate:\n    void update(vector<int> &BIT, int x, int v) {\n        while (x <= n) {\n            BIT[x] += v;\n            x += (x&-x);\n        }\n    }\n    \n    int get(vector<int> &BIT, int x) {\n        int res = 0;\n        while (x) {\n            res += BIT[x];\n            x &= x-1;\n        }\n        \n        return res;\n    }\n    \npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        \n        vector<int> BIT(n + 1, 0);\n        vector<bool> peak(n, false);\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > max(nums[i - 1], nums[i + 1])) {\n                update(BIT, i + 1, 1);\n                peak[i] = true;\n            }\n        }\n        \n        vector<int> res;\n        for (auto &q: queries) {\n            if (q[0] == 1) {\n                if (q[1] >= q[2])\n                    res.push_back(0);\n                else\n                    res.push_back(get(BIT, q[2]) - get(BIT, q[1] + 1));\n            } else {\n                nums[q[1]] = q[2];\n                \n                for (int i = max(1, q[1] - 1); i < min(n - 1, q[1] + 2); i++) {\n                    bool is_peak = nums[i] > max(nums[i - 1], nums[i + 1]);\n                    if (is_peak != peak[i]) {\n                        update(BIT, i + 1, (is_peak ? 1 : -1));\n                        peak[i] = is_peak;\n                    }\n                }\n            }\n        }\n        \n        return res;\n    }\n\nprivate:\n    int n;\n};",
    "submit_ts": "1718508421",
    "subm_id": "1289680751"
}