{
    "username": "amit_yd625",
    "submission": "class trieDataStructure {\npublic:\n    struct Node {\n        unordered_map<char, Node*> bachhe;\n        vector<pair<int, int>> khatam;\n    };\n\n    trieDataStructure() { root = new Node(); }\n\n    void insert(string& word, int pos, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->bachhe.count(c))\n                node->bachhe[c] = new Node();\n            node = node->bachhe[c];\n        }\n        node->khatam.push_back({pos, cost});\n    }\n\n    Node* getRoot() {\n        return root;\n    }\n\n    Node* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> newMemory(n + 1, INT_MAX);\n        newMemory[0] = 0;\n\n        trieDataStructure trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        int i = 0;\n        while (i < n) {\n            if (newMemory[i] == INT_MAX) {\n                ++i;\n                continue;\n            }\n\n            trieDataStructure::Node* node = trie.getRoot();\n            int j = i;\n            while (j < n && node->bachhe.count(target[j])) {\n                node = node->bachhe[target[j]];\n                for (auto& p : node->khatam) {\n                    int wornewMemoryos = p.first;\n                    int wordCost = p.second;\n                    int len = words[wornewMemoryos].size();\n                    if (i + len <= n) {\n                        newMemory[i + len] = min(newMemory[i + len], newMemory[i] + wordCost);\n                    }\n                }\n                ++j;\n            }\n            ++i;\n        }\n\n        return newMemory[n] == INT_MAX ? -1 : newMemory[n];\n    }\n};\n",
    "submit_ts": "1720322787",
    "subm_id": "1312359086"
}