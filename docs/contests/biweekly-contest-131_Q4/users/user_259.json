{
    "username": "omar_walied_ismail",
    "submission": "struct segtree {\n\n  vector<int>tree;\n  int initValue = 0;\n\n  int merge(int a, int b) {\n    return max(a, b);\n  }\n\n  segtree(vector<int>& v) {\n    int n = (int)v.size();\n    while (__builtin_popcount(n) != 1)\n      v.push_back(0), n++;\n    tree.resize(n << 1, initValue);\n    for (int i = 0; i < n; i++)\n      tree[i + n] = v[i];\n    for (int i = n - 1; i >= 1; i--)\n      tree[i] = merge(tree[i << 1] , tree[(i << 1) + 1]);\n  }\n\n  int f(int node, int left, int right, int low, int high) {\n    if (low <= left && right <= high)\n      return tree[node];\n    if (right < low || high < left)\n      return initValue;\n    int mid = (left + right) >> 1;\n    int ans = merge(f((node << 1), left, mid, low, high), f((node << 1) + 1, mid + 1, right, low, high));\n    return ans;\n  }\n\n  void setRange(int node, int left, int right, int low, int high, int v) {\n    if (low <= left && right <= high) {\n      tree[node] = v;\n      return;\n    }\n    if (right < low || high < left)\n      return;\n    int mid = (left + right) >> 1;\n    setRange((node << 1), left, mid, low, high, v);\n    setRange((node << 1) + 1, mid + 1, right, low, high, v);\n    tree[node] = merge(tree[node << 1], tree[(node << 1) + 1]);\n  }\n\n  void set(int pos, int val) {\n    pos += (int)tree.size() >> 1, tree[pos] = val;\n    while (pos > 1)\n      pos >>= 1, tree[pos] = merge(tree[pos << 1], tree[(pos << 1) + 1]);\n  }\n\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int maxLen=1e5;\n        vector<int>use(maxLen);\n        use[0]=maxLen;\n        set<pair<int,int>>s;\n        s.insert({0,maxLen-1});\n        segtree st(use);\n        vector<bool>ans;\n        for(auto &it:queries){\n            if(it[0]==1){\n                int x=it[1];\n                auto i=s.lower_bound({x,-1});\n                if(i==s.end()||i->first!=x)i--;\n                pair<int,int>p=*i;\n                p=*i;\n                s.erase(p);\n                s.insert({p.first,x});\n                st.set(p.first,x-p.first);use[p.first]=x-p.first;\n                s.insert({x,p.second});\n                st.set(x,p.second-x);use[x]=p.second-x;\n            }else{\n                int x=it[1],sz=it[2],last=x-sz;\n                int mx=st.f(1,0,use.size()-1,0,last);\n                ans.push_back(mx>=sz);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716651271",
    "subm_id": "1267636333"
}