{
    "username": "7oving Albattanifwf",
    "submission": "use std::cmp::max;\nuse std::collections::HashSet;\n\nimpl Solution {\n    pub fn maximum_value_sum(board: Vec<Vec<i32>>) -> i64 {\n        let mut f1 = Vec::new();\n        for x in &board {\n            let mut indexed_vec: Vec<(usize, &i32)> = x.iter().enumerate().collect();\n            indexed_vec.sort_by(|a, b| b.1.cmp(a.1));\n            f1.push((\n                *indexed_vec.first().unwrap().1,\n                indexed_vec.first().unwrap().0,\n                *indexed_vec.get(1).unwrap().1,\n                indexed_vec.get(1).unwrap().0,\n                *indexed_vec.get(2).unwrap().1,\n            ))\n        }\n        let mut ans = i64::MIN;\n        for i in 0..board.len() {\n            for j in 0..board.len() {\n                if i == j {\n                    continue;\n                }\n                for k in 0..board.len() {\n                    if i == k || j == k {\n                        continue;\n                    }\n                    let mut a = f1[i].0 as i64;\n                    let i_col = f1[i].1;\n                    let j_col;\n                    if i_col == f1[j].1 {\n                        j_col = f1[j].3;\n                        a += f1[j].2 as i64;\n                    } else {\n                        j_col = f1[j].1;\n                        a += f1[j].0 as i64;\n                    }\n                    let used = HashSet::from([i_col, j_col]);\n                    if !used.contains(&f1[k].1) {\n                        a += f1[k].0 as i64;\n                    } else if !used.contains(&f1[k].3) {\n                        a += f1[k].2 as i64;\n                    } else {\n                        a += f1[k].4 as i64;\n                    }\n                    ans = max(ans, a);\n                }\n            }\n        }\n        ans\n    }\n}",
    "submit_ts": "1723909943",
    "subm_id": "556338744"
}