{
    "username": "michaelm12358",
    "submission": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n\n    function buildTree(l, r) {\n        let mid = Math.floor((l+r)/2);\n\n        \n        if((r-l) === 1) {\n            let isPeak = false;\n            if(l > 0 && l < (nums.length-1)) {\n                isPeak = nums[l] > nums[l-1] && nums[l] > nums[l+1];\n            }\n\n            let peakCount = isPeak ? 1 : 0;\n\n\n            return {\n                peakCount\n            };\n        }\n\n        let root = {\n            peakCount: 0\n        };\n\n        if((mid-l) > 0) {\n            root.left = buildTree(l, mid);\n\n            root.peakCount += root.left.peakCount;\n        }\n        if((r-mid) > 0) {\n            root.right = buildTree(mid, r);\n\n            root.peakCount += root.right.peakCount;\n        }\n\n        return root;\n\n    }\n\n    let tree = buildTree(0, nums.length);\n\n\n    function updateCount(root, l, r, idx) {\n        if((r-l) === 1) {\n            let isPeak = false;\n            if(l > 0 && l < (nums.length-1)) {\n                isPeak = nums[l] > nums[l-1] && nums[l] > nums[l+1];\n            }\n\n            let peakCount = isPeak ? 1 : 0;\n\n            root.peakCount = peakCount;\n\n            return;\n        }\n\n\n        let mid = Math.floor((l+r)/2);\n\n        if(mid > idx) {\n            updateCount(root.left, l, mid, idx);\n        } else {\n            updateCount(root.right, mid, r, idx);\n        }\n\n        root.peakCount = root.left?.peakCount + root.right?.peakCount;\n\n    }\n\n    function getCount(root, l, r, targetL, targetR) {\n        if(l >= targetL && r <= targetR) {\n            return root.peakCount;\n        }\n\n        let result = 0;\n        let mid = Math.floor((l+r)/2);\n        if(targetL < mid) {\n            result += getCount(root.left, l, mid, targetL, targetR);\n        }\n        \n        if(mid < targetR) {\n            result += getCount(root.right, mid, r, targetL, targetR);\n        }\n\n\n\n        return result;\n    }\n\n    let result = [];\n    for(let query of queries) {\n        if(query[0] === 1) {\n            result.push(getCount(tree, 0, nums.length, query[1]+1, query[2]));\n        } else {\n            let idx = query[1];\n            let val = query[2];\n            nums[idx] = val;\n\n            if(idx > 0) {\n                updateCount(tree, 0, nums.length, idx-1);\n            }\n            if(idx < (nums.length-1)) {\n                updateCount(tree, 0, nums.length, idx+1);\n            }\n            updateCount(tree, 0, nums.length, idx);\n        }\n    }\n\n\n    return result;\n\n    \n};\n",
    "submit_ts": 1718508168.0
}