{
    "username": "_6174_P",
    "submission": "class Solution {\npublic:\n    bool bfs(const vector<vector<int>>& graph, int start, int end1, int end2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int curr = q.front();\n            q.pop();\n            for (int neighbor : graph[curr]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[end1] || visited[end2];\n    }\n\n    bool canReachCorner(int width, int height, vector<vector<int>>& circlesInput) {\n        vector<tuple<int, int, int>> circles(circlesInput.size());\n        vector<vector<int>> adjList(circlesInput.size() + 4);\n        int numCircles = circlesInput.size();\n\n        for (int i = 0; i < numCircles; ++i) {\n            circles[i] = make_tuple(circlesInput[i][0], circlesInput[i][1], circlesInput[i][2]);\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            int x, y, r;\n            tie(x, y, r) = circles[i];\n\n            if (x <= r) adjList[numCircles].push_back(i), adjList[i].push_back(numCircles);\n            if (width - x <= r) adjList[numCircles + 2].push_back(i), adjList[i].push_back(numCircles + 2);\n            if (y <= r) adjList[numCircles + 1].push_back(i), adjList[i].push_back(numCircles + 1);\n            if (height - y <= r) adjList[numCircles + 3].push_back(i), adjList[i].push_back(numCircles + 3);\n\n            for (int j = i + 1; j < numCircles; ++j) {\n                int x2, y2, r2;\n                tie(x2, y2, r2) = circles[j];\n                double dist = sqrt(pow(x - x2, 2) + pow(y - y2, 2));\n                if (r + r2 >= dist) adjList[i].push_back(j), adjList[j].push_back(i);\n            }\n        }\n\n        return !(max(bfs(adjList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4),\n                    bfs(adjList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)));\n    }\n};\n",
    "submit_ts": "1722137281",
    "subm_id": "1335759276"
}