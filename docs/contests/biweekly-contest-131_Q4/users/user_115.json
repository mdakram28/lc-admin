{
    "username": "VarunR",
    "submission": "class Solution {\npublic:\n    \n        int n;\n        vector<int> segtree;\n        \n        void init(int _n) {\n            n = _n;\n            segtree.resize(4 * n);\n        }\n        \n        void upd(int l, int r, int node, int ind, int val) {\n            if(l > ind or r < ind) return;\n            if(l > r) return;\n            if(l == r and l != ind) return;\n            if(l == r and l == ind) {\n                segtree[node] = val;\n                return;\n            }\n            int mid = (l + r)/2;\n            upd(l, mid, 2 * node + 1, ind, val);\n            upd(mid + 1, r, 2 * node + 2, ind, val);\n            segtree[node] = max(segtree[2 * node + 1], segtree[2 * node + 2]);\n        }\n        \n        int qry(int l, int r, int node, int tl, int tr) {\n            if(l > tr or r < tl) return 0;\n            if(l > r) return 0;\n            if(tl > tr) return 0;\n            if(tl <= l and tr >= r) return segtree[node];\n            int mid = (l + r)/2;\n            return max(qry(l, mid, 2 * node + 1, tl, tr), qry(mid + 1, r, 2 * node + 2, tl, tr));\n        }\n        \n        void upd(int ind, int val) {\n            upd(0, n - 1, 0, ind, val);\n        }\n        \n        int qry(int l, int r) {\n            return qry(0, n - 1, 0, l, r);\n        }\n    \n    void pr(int n) {\n        cout << \"pr: \";\n        for(int i = 0; i < n; i++) {\n            cout << qry(i, i) << \" \";\n        }\n        cout << '\\n';\n    }\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> g; \n        g.insert(0);\n        g.insert((int)3e5);\n        vector<bool> ret;\n        \n        int mx = 0;\n        \n        for(auto& x: queries) {\n            mx = max(mx, x[1]);\n        }\n        mx += 10;\n        \n        \n        init(mx);\n        \n        upd(0, (int)3e5);\n        \n        \n        for(auto& x: queries) {\n            // pr(mx);\n            if(x[0] == 1) {\n                int ob = x[1];\n                if(ob == 0) continue;\n                auto it = g.lower_bound(ob);\n                int r = *it;\n                it--;\n                int l = *it;\n                int ldist = ob - l;\n                int rdist = r - ob;\n                upd(l, ldist);\n                upd(ob, rdist);\n                g.insert(ob);\n            }\n            else {\n                int l = 0;\n                int r = x[1];\n                int sz = x[2];\n                r -= sz;\n                int val = qry(l, r);\n                if(val >= sz) {\n                    ret.push_back(true);\n                }\n                else ret.push_back(false);\n                // cout << val << \" \" << sz << '\\n';\n            }\n        } \n        // cout << '\\n';\n        return ret;\n    }\n};",
    "submit_ts": "1716650131",
    "subm_id": "1267607223"
}