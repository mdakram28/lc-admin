{
    "username": "muskan2901",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int size1 = edges1.size() + 1;\n        int size2 = edges2.size() + 1;\n\n        vector<vector<int>> graph1(size1);\n        vector<vector<int>> graph2(size2);\n\n        for (const auto& edge : edges1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n\n        pair<int, int> result1 = dfs(graph1, 0);\n        int node1 = result1.first;\n        result1 = dfs(graph1, node1);\n        int diameter1 = result1.second;\n\n        pair<int, int> result2 = dfs(graph2, 0);\n        int node2 = result2.first;\n        result2 = dfs(graph2, node2);\n        int diameter2 = result2.second;\n\n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n\n        return minDiameter;\n    }\n\nprivate:\n    pair<int, int> dfs(const vector<vector<int>>& graph, int start) {\n        int n = graph.size();\n        vector<int> distance(n, -1);\n        stack<pair<int, int>> s;\n        s.push({start, 0});\n        int furthestNode = start;\n        int maxDistance = 0;\n\n        while (!s.empty()) {\n            pair<int, int> current = s.top();\n            s.pop();\n            int node = current.first;\n            int dist = current.second;\n            if (distance[node] != -1) continue;\n            distance[node] = dist;\n            if (dist > maxDistance) {\n                maxDistance = dist;\n                furthestNode = node;\n            }\n            for (int neighbor : graph[node]) {\n                if (distance[neighbor] == -1) {\n                    s.push({neighbor, dist + 1});\n                }\n            }\n        }\n\n        return {furthestNode, maxDistance};\n    }\n};\n",
    "submit_ts": 1719719708.0
}