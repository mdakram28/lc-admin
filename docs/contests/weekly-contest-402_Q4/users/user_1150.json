{
    "username": "lthroy",
    "submission": "class SegTreeNode:\n    def __init__(self,a,b):\n        self.left = None\n        self.right = None\n        self.start = a; self.end = b\n        self.lazy_tag = 0\n        self.lazy_val = 0\n        if a == b:\n            self.info = 0\n            return\n        mid = a + (b-a)//2\n        assert self.left is None\n        self.left = SegTreeNode(a,mid)\n        self.right = SegTreeNode(mid+1,b)\n        #info means sum of squares\n        self.info = self.left.info + self.right.info\n        \n    def pushDown(self):\n        if self.lazy_tag == 1 and self.left:\n            self.left.info = self.lazy_val * (self.left.end - self.left.start + 1)\n            self.right.info = self.lazy_val * (self.right.end - self.right.start + 1)\n            self.left.lazy_tag = 1; self.left.lazy_val = self.lazy_val\n            self.right.lazy_tag = 1; self.right.lazy_val = self.lazy_val\n            self.lazy_tag = 0; self.lazy_val = 0\n            \n            \n    def updateRange(self,a,b,val):\n        if b < self.start or a > self.end:\n            return\n        if a <= self.start and self.end <= b:\n            size = self.end - self.start + 1\n            self.info = val*size\n            self.lazy_tag = 1\n            self.lazy_val = 1\n            return\n        if self.left:\n            self.pushDown()\n            self.left.updateRange(a,b,val)\n            self.right.updateRange(a,b,val)\n            self.info = self.left.info + self.right.info\n            \n    def queryRange(self,a,b):\n        if b < self.start or a > self.end:\n            return 0\n        if a <= self.start and self.end <= b:\n            return self.info\n        assert self.left is not None\n        self.pushDown()\n        L = self.left.queryRange(a,b); R = self.right.queryRange(a,b)\n        self.info = self.left.info + self.right.info\n        return L+R\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        root = SegTreeNode(0,n-1)\n        print(f\"case={nums},{queries}\")\n        def isPeak(index):\n            return index > 0 and index < n-1 and nums[index] > nums[index-1] and nums[index] > nums[index+1]\n                \n        for i in range(n):\n            if isPeak(i):\n                root.updateRange(i,i,1)\n                #print(f\"query({i},{i})={root.queryRange(i,i)}\")\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                res.append(root.queryRange(q[1]+1,q[2]-1))\n            else:\n                _,index,val = q\n                nums[index] = val\n                for j in (index-1,index,index+1):\n                    if 0 <= j < n:\n                        if isPeak(j):\n                            root.updateRange(j,j,1)\n                        else:\n                            root.updateRange(j,j,0)\n            #print(q,root.queryRange(0,n-1))\n        return res\n                    \n                \n        ",
    "submit_ts": 1718509383.0
}