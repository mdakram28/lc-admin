{
    "username": "coding_budha",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool isEnd;\n    int cost;\n    \n    TrieNode() : isEnd(false), cost(0) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    // Insert word with cost into Trie\n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->isEnd = true;\n        node->cost = cost;\n    }\n};\n\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        // if(target.size()==1){\n        //     int mn = INT_MAX;\n        //     for(int i=0; i<words.size(); i++){\n        //         if(words[i] == target)\n        //             mn = min(costs[i], mn);\n        //     }\n        //     return mn;\n        // }\n\n        unordered_map<string, int> umap;\n\n        for(int i=0; i<words.size(); i++){\n            if(umap[words[i]] == 0)\n                umap[words[i]] = costs[i];\n            else\n                umap[words[i]] = min(umap[words[i]], costs[i]);\n        }\n\n        for(int i=0; i<words.size(); i++){\n            costs[i] = umap[words[i]];\n        }\n\n        int n = target.size();\n        vector<int> dp(n + 1, -1); \n        dp[0] = 0;\n        \n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == -1) continue; \n            \n            TrieNode* node = trie.root;\n            \n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                if (node->children.count(ch)) {\n                    node = node->children[ch];\n                    if (node->isEnd) {\n                        if (dp[j + 1] == -1 || dp[j + 1] > dp[i] + node->cost) {\n                            dp[j + 1] = dp[i] + node->cost;\n                        }\n                    }\n                } else {\n                    break; \n                }\n            }\n        }\n        \n        return dp[n];\n    \n    }\n};",
    "submit_ts": "1720321451",
    "subm_id": "1312323219"
}