{
    "username": "practical-vvingf4j",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define f first\n#define s second\n#define lc (rt<<1)\n#define rc (rt<<1|1)\n#define pb push_back\n#define cl(a, b) memset(a, b, sizeof(a))\n#define mp(a, b) make_pair((a), (b))\n#define all(x) x.begin(),x.end()\ntypedef long long ll;\ntypedef pair<int, int> pi;\ntypedef pair<ll, ll> pl;\ntypedef pair<pi, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<pi> vii;\ntypedef vector<pl> vll;\ntypedef vector<pii> viii;\nconst int NO_DEB = 0;\n#define deb(...) logger(#__VA_ARGS__, __VA_ARGS__)\ntemplate <typename... Args>\nvoid logger(string vals, Args &&...values){\n    if (NO_DEB) return;\n    cout << vals << \" = \";\n    string delim = \"\";\n    (..., (cout << delim << values, delim = \", \"));\n    cout << endl;\n}\ntemplate<int MOD> struct mint {\n    static const int mod = MOD;\n    int v;\n    explicit operator int() const { return v; }\n    mint():v(0) {}\n    mint(ll _v):v(int(_v%MOD)) { v += (v<0)*MOD; }\n    mint& operator+=(mint o) {\n        if ((v += o.v) >= MOD) v -= MOD;\n        return *this; }\n    mint& operator-=(mint o) {\n        if ((v -= o.v) < 0) v += MOD;\n        return *this; }\n    mint& operator*=(mint o) {\n        v = int((ll)v*o.v%MOD); return *this; }\n    mint& operator/=(const mint& o) { return (*this) *= inv(o); }\n    friend mint pow(mint a, ll p) { assert(p >= 0);\n        return p==0?1:pow(a*a,p/2)*(p&1?a:1); }\n    friend mint inv(mint a) { assert(a.v != 0); return pow(a,MOD-2); }\n    friend mint operator+(mint a, mint b) { return a += b; }\n    friend mint operator-(mint a, mint b) { return a -= b; }\n    friend mint operator*(mint a, mint b) { return a *= b; }\n    friend mint operator/(mint a, const mint& b) { return a /= b; }\n};\nconst int inf = 0x3F3F3F3F;\nconst ll infl = 0x3F3F3F3F3F3F3F3FLL;\nconst int mod = 1e9 + 7;\nusing mi = mint<mod>;\nvoid print(vector<ll> & a){\n    for(int i=0; i<a.size(); i++) cout << a[i] << \" \\n\"[i+1==a.size()];\n}\n\nconst int MM = 1e5+2;\n\nclass Solution {\npublic:\n    void build(int l, int r, int rt){\n        if(l == r) { seg[rt] = l; lz[rt] = 0; return; }\n        int m = (l + r)/2;\n        build(l, m, lc); build(m+1, r, rc);\n    }\n    void pushdn(int rt){\n        seg[lc] += lz[rt]; lz[lc] += lz[rt];\n        seg[rc] += lz[rt]; lz[rc] += lz[rt]; lz[rt] = 0;\n    }\n    void upd(int l, int r, int x, int y, int v, int rt){\n        if(l == x && r == y) {\n            seg[rt] += v; lz[rt] += v; return;\n        }\n        if(lz[rt] != 0) pushdn(rt);\n        int m = (l + r)/2;\n        if(y <= m) upd(l, m, x, y, v, lc);\n        else if(x > m) upd(m+1, r, x, y, v, rc);\n        else { upd(l, m, x, m, v, lc); upd(m+1, r, m+1, y, v, rc); }\n    }\n    int query(int l, int r, int pos, int rt) {\n        if(l == r) return seg[rt];\n        if(lz[rt] != 0) pushdn(rt);\n        int m = (l + r)/2;\n        if(pos <= m) return query(l, m, pos, lc);\n        return query(m+1, r, pos, rc);\n    }\n    void updbit(int pos, int val){\n        for(int i=pos+1; i<MM; i+= i&-i) bit[i] = max(bit[i], val);\n    }\n    int qrybit(int pos) {\n        int ret = 0;\n        for(int i=pos+1; i; i-=i&-i) ret = max(ret, bit[i]);\n        return ret;\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> ret;\n        for(int i=0; i<n; i++) updbit(i, i+1);\n        build(0, n-1, 1);\n        for(const auto& q : queries) {\n            int u = q[0], v = q[1];\n            int mx = qrybit(u);\n            if(mx < v) {\n                int du = query(0, n-1, u, 1), dv = query(0, n-1, v, 1);\n                upd(0, n-1, v, n-1, -(dv - du - 1), 1);\n                updbit(u, v);\n            }\n            ret.push_back(query(0, n-1, n-1, 1));\n        }\n        return ret;\n    }\n    int seg[4*MM], lz[4*MM], bit[MM];\n};",
    "submit_ts": "1722742852",
    "subm_id": "552347307"
}