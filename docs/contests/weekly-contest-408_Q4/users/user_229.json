{
    "username": "Phoenix-101",
    "submission": "#define ll long long\nstruct dsu {\n    vector<ll> parent, groupSize;\n    ll NumGroup, size;\n \n    dsu(ll n) {\n        parent.resize(n + 5);\n        groupSize.resize(n + 5);\n        NumGroup = n, size = n;\n        for (ll i = 0; i <= n; i++) {\n            parent[i] = i;\n            groupSize[i] = 1;\n        }\n    }\n \n    void clear() {\n        NumGroup = size;\n        for (ll i = 0; i <= size; i++) {\n            parent[i] = i;\n            groupSize[i] = 1;\n        }\n    }\n \n    ll findLeader(ll node) {\n        return (parent[node] == node) ? node : parent[node] = findLeader(parent[node]);\n    }\n \n    bool SameGroup(ll a, ll b) {\n        ll LeaderA = findLeader(a);\n        ll LeaderB = findLeader(b);\n        return LeaderA == LeaderB;\n    }\n \n    bool MergeGroup(ll a, ll b) {\n        ll LeaderA = findLeader(a);\n        ll LeaderB = findLeader(b);\n        if (LeaderB == LeaderA)\n            return 0;\n        if (groupSize[LeaderA] < groupSize[LeaderB])\n            swap(LeaderA, LeaderB);\n        parent[LeaderB] = LeaderA;\n        groupSize[LeaderA] += groupSize[LeaderB];\n        NumGroup--;\n        return 1;\n    }\n \n    ll GetSize(ll node) {\n        ll leader = findLeader(node);\n        return groupSize[leader];\n    }\n \n    ll GetNumGroup() {\n        return NumGroup;\n    }\n};\nclass Solution {\npublic:\n    bool canReachCorner(int n, int m, vector<vector<int>>& circles) {\n    int k=circles.size();\n    vector<vector<ll>>v(k+4); \n    dsu d(k+4);\n    for(int i=0;i<k;i++){\n        ll x=circles[i][0],y=circles[i][1],s=circles[i][2];\n        v[i]={x,y,s};\n        if(x-s<=0) d.MergeGroup(i,k+2); // left \n        if(x+s>=n) d.MergeGroup(i,k+3); // right \n        if(y-s<=0) d.MergeGroup(i,k); // down \n        if(y+s>=m) d.MergeGroup(i,k+1); // up\n        for(int j=0;j<i;j++){\n            ll x1=v[j][0],y1=v[j][1],s1=v[j][2];\n            if((x-x1)*(x-x1)+(y-y1)*(y-y1)<=(s+s1)*(s+s1)){\n                d.MergeGroup(i,j);\n            }\n        }\n    }\n    if(d.SameGroup(k,k+1) || d.SameGroup(k,k+2) || d.SameGroup(k+2,k+3) || d.SameGroup(k+3,k+1)){\n        return false;\n    }\n    return true;\n    }\n};",
    "submit_ts": "1722135752",
    "subm_id": "1335712510"
}