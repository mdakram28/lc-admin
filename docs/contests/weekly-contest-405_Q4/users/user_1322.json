{
    "username": "oopzzozzo",
    "submission": "#include <map>\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n                map<string, int> m;\n        for(int i=0; i<words.size(); i++){\n            auto it = m.find(words[i]);\n            if(it != m.end())\n                it->second = min(it->second, costs[i]);\n            else\n                m.emplace(words[i], costs[i]);\n        }\n        words.clear();\n        costs.clear();\n        for(auto p:m){\n            words.push_back(p.first);\n            costs.push_back(p.second);\n        }\n\n        vector<vector<int>> cand(target.size());\n        for(int i=0; i<target.size(); i++)\n            cand[i].clear();\n        for(int i=0; i<words.size(); i++){\n            size_t pos = target.find(words[i], 0);\n            while(pos != string::npos){\n                cand[pos+words[i].size()-1].push_back(i);\n                if(pos == target.size()-1)\n                    break;\n                pos = target.find(words[i], pos+1);\n            }\n        }\n        vector<int> ans(target.size()+1, 1000000000);\n                ans[0] = 0;\n        for(int i=0; i<target.size(); i++)\n            for(auto c:cand[i])\n                ans[i+1] = min(ans[i+1], ans[i-words[c].size()+1] + costs[c]);\n        if(ans[target.size()] >= 1000000000)\n            return -1;\n        return ans[target.size()];\n\n    }\n\n\n};",
    "submit_ts": "1720323399",
    "subm_id": "1312374605"
}