{
    "username": "acmer29",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie *root = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            root->insert(words[i], costs[i]);\n        }\n        const int bound = 1e9;\n        vector<long long> dp(target.size(), bound);\n        for (int i = 0; i < target.size(); ++i) {\n            Trie *node = root;\n            for (int j = i; j < target.size(); ++j) {\n                Trie *next = node->find(target[j]);\n                if (next != nullptr) {\n                    if (next->cost != 0) {\n                        int prev = i == 0 ? 0 : dp[i - 1];\n                        dp[j] = min(dp[j], (long long)prev + (long long)next->cost);\n                    }\n                } else {\n                    break;\n                }\n                node = next;\n            }\n        }\n        // for (auto item : dp) cout << item << \" \";\n        // cout << endl;\n        return dp.back() >= bound ? -1 : dp.back();\n    }\nprivate:\n    struct Trie {\n        int cost;\n        Trie* child[26];\n        \n        Trie(): cost(0) {\n            memset(child, 0, sizeof(child));\n        }\n\n        void insert(string& str, int cost) {\n            Trie *current = this;\n            for (int i = 0; i < str.size(); ++i) {\n                if (current->child[str[i] - 'a'] == nullptr) {\n                    current->child[str[i] - 'a'] = new Trie();\n                }\n                current = current->child[str[i] - 'a'];\n            }\n            current->cost = current->cost == 0 ? cost : min(current->cost, cost);\n        }\n\n        Trie* find(char ch) {\n            Trie *current = this;\n            if (current->child[ch - 'a'] == nullptr) {\n                return nullptr;\n            }\n            current = current->child[ch - 'a'];\n            return current;\n        }\n    };\n};",
    "submit_ts": "1720322888",
    "subm_id": "1312361761"
}