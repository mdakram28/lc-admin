{
    "username": "aleem123",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int nn = colors.size();\n        \n        // Preallocate memory for vectors\n        vector<int> first(k);\n        vector<int> last(k);\n        \n        // Use std::copy instead of manual loop\n        std::copy(colors.begin(), colors.begin() + k, first.begin());\n        std::copy(colors.end() - k, colors.end(), last.rbegin());\n        \n        // Reserve space to avoid multiple reallocations\n        colors.reserve(colors.size() + 2 * k);\n        \n        // Use insert with iterator range for better performance\n        colors.insert(colors.begin(), last.rbegin(), last.rend());\n        colors.insert(colors.end(), first.begin(), first.end());\n\n        int n = colors.size();\n        vector<int> curr(n, 0);\n        vector<int> pre(n, 0);\n        \n        // Combine loops to reduce iterations\n        for(int i = 1; i < n - 1; ++i) {\n            curr[i] = (colors[i] != colors[i-1] && colors[i] != colors[i+1]);\n            pre[i] = pre[i-1] + curr[i];\n        }\n        \n        int ans = 0;\n        for(int i = k; i < k + nn; ++i) {\n            int count = pre[i] - pre[i-k+1] - curr[i];\n            ans += (count == k-2);\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720280892",
    "subm_id": "1311805761"
}