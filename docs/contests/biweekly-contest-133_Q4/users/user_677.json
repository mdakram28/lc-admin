{
    "username": "ar_bot",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    const int MOD = 1e9+7;\n    const int MAX_INVERSIONS = 400;\n    vector<vector<long long>> dp;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n       \n        dp.assign(n + 1, vector<long long>(MAX_INVERSIONS + 1, -1));\n\n        \n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n       \n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + topDownDP(n, inv, reqMap)) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n\n    long long topDownDP(int length, int inv, unordered_map<int, int>& reqMap) {\n        \n        if (length == 0) {\n            return (inv == 0) ? 1 : 0;\n        }\n\n        \n        if (dp[length][inv] != -1) {\n            return dp[length][inv];\n        }\n\n        \n        long long& result = dp[length][inv];\n        result = 0;\n        for (int newPos = 0; newPos < length; ++newPos) {\n            int prevInv = inv - newPos;\n            if (prevInv >= 0) {\n                result = (result + topDownDP(length - 1, prevInv, reqMap)) % MOD;\n            }\n        }\n\n        if (reqMap.count(length)) {\n            int targetInv = reqMap[length];\n            if (inv != targetInv) {\n                result = 0;\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1719070969",
    "subm_id": "1296836044"
}