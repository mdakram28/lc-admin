{
    "username": "Ankitsisodya",
    "submission": "class Solution {\npublic:\n    class SGT {\n    public:\n        vector<long long> seg, lazy;\n\n        SGT(long long n) {\n            seg.resize(4 * n + 1);\n            lazy.resize(4 * n + 1);\n        }\n        void build(long long ind, long long low, long long high, vector<int>& arr) {\n\n            if (low == high) {\n                seg[ind] = arr[low];\n                return;\n            }\n            long long mid = low + ((high - low) >> 1);\n\n            build((2 * ind) + 1, low, mid, arr);\n            build((2 * ind) + 2, mid + 1, high, arr);\n\n            seg[ind] = (seg[(2 * ind) + 1] & seg[(2 * ind) + 2]);\n        }\n\n        long long query(long long ind, long long low, long long high, long long l, long long r) {\n            // no overlap\n            if (l > high || r < low)\n                return (1 << 30) - 1;\n\n            // complete overlap\n            if (low >= l && r >= high)\n                return seg[ind];\n            long long mid = low + ((high - low) >> 1);\n            long long left = query(2 * ind + 1, low, mid, l, r);\n            long long right = query(2 * ind + 2, mid + 1, high, l, r);\n            return (left & right);\n        }\n    };\n\n    long long countSubarrays(vector<int>& a, int k) {\n        // agr number me koi bhi k ka bit nahi h toh answer nahi niklega\n\n        long long ans = 0;\n        long long n = a.size();\n        SGT ds(n);\n        ds.build(0, 0, n - 1, a);\n        for (long long i = 0; i < n; ++i) {\n            long long l = i, r = n - 1;\n            // sbse pehle kha k milega\n            long long leftpoint = -1;\n            while (l <= r) {\n                long long m = (l + r) / 2;\n                long long qu = ds.query(0, 0, n - 1, i, m);\n                // cout << l << \" \" << r << \"\\n\";\n                if (qu < k) {\n                    r = m - 1;\n                } else if (qu == k) {\n                    leftpoint = m;\n                    r = m - 1;\n                } else if (qu > k) {\n                    l = m + 1;\n                }\n            }\n            long long rightpoint = -1;\n            l = i, r = n - 1;\n            while (l <= r) {\n                long long m = (l + r) / 2;\n                // cout << l << \" \" << r << \"\\n\";\n                long long qu = ds.query(0, 0, n - 1, i, m);\n                // cout << qu << \"\\n\";\n                if (qu < k) {\n                    r = m - 1;\n                } else if (qu == k) {\n                    rightpoint = m;\n                    l = m + 1;\n                } else if (qu > k) {\n                    l = m + 1;\n                }\n            }\n            // cout << \"\\n\";\n            if (leftpoint != -1 && rightpoint != -1) {\n                ans += rightpoint - leftpoint + 1;\n            }\n            // cout << ans << \"\\n\";\n            // cout << \"ankit\\n\";\n            // cout << leftpoint << \" \" << rightpoint << \"\\n\";\n            // cout << \"ayush\\n\";\n                    \n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720281383",
    "subm_id": "1311823118"
}