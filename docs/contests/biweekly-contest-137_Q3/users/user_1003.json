{
    "username": "wjEajcwIBD",
    "submission": "class Node{\n    int val;\n    int i;\n    int j;\n    Node(int val,int i,int j){\n        this.val=val;\n        this.i=i;\n        this.j=j;\n    }\n}\nclass Solution {\n    public long maximumValueSum(int[][] board) {\n        HashMap<Integer,PriorityQueue<Node>> mapi=new HashMap<>();\n        HashMap<Integer,PriorityQueue<Node>> mapj=new HashMap<>();\n        int n=board.length;\n        int m=board[0].length;\n        List<Node> nodeList=new ArrayList<>();\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++){\n                if(!mapi.containsKey(i)){\n                    mapi.put(i,new PriorityQueue<>((Node n1,Node n2)->{\n                        return(n1.val-n2.val);\n                    }));\n                }\n                if(!mapj.containsKey(j)){\n                    mapj.put(j,new PriorityQueue<>((Node n1,Node n2)->{\n                        return(n1.val-n2.val);\n                    }));\n                }\n                mapi.get(i).add(new Node(board[i][j],i,j));\n                if(mapi.get(i).size()>3){\n                    mapi.get(i).poll();\n                }\n                mapj.get(j).add(new Node(board[i][j],i,j));\n                if(mapj.get(j).size()>3){\n                    mapj.get(j).poll();\n                }\n            }\n        }\n        for(int i=0;i<n;i++){\n            // System.out.println(i+\" \"+mapi.get(i).size());\n            while(mapi.get(i).size()>0){\n                nodeList.add(mapi.get(i).peek());\n                mapi.get(i).poll();\n            }\n            // System.out.println(i+\" \"+mapi.get(i).size());\n        }\n\n        for(int j=0;j<m;j++){\n            // System.out.println(j+\" \"+mapj.get(j).size());\n            while(mapj.get(j).size()>0){\n                nodeList.add(mapj.get(j).peek());\n                mapj.get(j).poll();\n            }\n            // System.out.println(j+\" \"+mapj.get(j).size());\n        }\n        Collections.sort(nodeList,(Node n1,Node n2)->{return(n2.val-n1.val);});\n        // System.out.println(nodeList.size());\n        long ans=Long.MIN_VALUE;\n        for(int i=0;i<nodeList.size();i++){\n            for(int j=i+1;j<nodeList.size();j++){\n                for(int k=j+1;k<nodeList.size();k++){\n                    if(helper(nodeList.get(i),nodeList.get(j),nodeList.get(k))){\n                        long temp=nodeList.get(i).val;\n                        temp+=nodeList.get(j).val;\n                        temp+=nodeList.get(k).val;\n                        ans=Math.max(ans,temp);\n                        break;\n                        // System.out.println(temp);\n                    }\n                }\n            }\n        } \n        return(ans);\n    }\n    public boolean helper(Node n1,Node n2,Node n3){\n        if(n1.i==n2.i || n1.i==n3.i || n2.i==n3.i){\n            return(false);\n        }\n        if(n1.j==n2.j || n1.j==n3.j || n2.j==n3.j){\n            return(false);\n        }\n        return(true);\n    }\n}",
    "submit_ts": "1723908632",
    "subm_id": "1359160732"
}