{
    "username": "pranavrao",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(-1) {}\n};\n\nclass Solution {\npublic:\n    TrieNode* build(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++){\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            if(node->cost == -1){\n                node->cost = costs[i];\n            }\n            else{\n                node->cost = min(node->cost, costs[i]);\n            }\n        }\n        return root;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        TrieNode* root = build(words, costs);\n        for(int i = 0; i < n; i++){\n            if(dp[i] != INT_MAX){\n                TrieNode* node = root;\n                for(int j = i; j < n; j++){\n                    if(node->children.count(target[j])){\n                        node = node->children[target[j]];\n                        if(node->cost != -1){\n                            dp[j + 1] = min(dp[i] + node->cost, dp[j + 1]); \n                        }\n                    }\n                    else{\n                        break;\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323008",
    "subm_id": "1312364966"
}