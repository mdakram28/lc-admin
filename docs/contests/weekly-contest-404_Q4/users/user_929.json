{
    "username": "darkdip2",
    "submission": "class Solution:\n    def treeDiameter(self, edges: list[list[int]]) -> int:\n        n = len(edges) + 1\n        adj = [[] for _ in range(n)]\n        \n        for e in edges:\n            adj[e[0]].append(e[1])\n            adj[e[1]].append(e[0])\n        \n        def bfs(start):\n            dist = [-1] * n\n            q = [start]\n            dist[start] = 0\n            farthest = start\n            \n            while q:\n                node = q.pop(0)\n                for nei in adj[node]:\n                    if dist[nei] == -1:\n                        dist[nei] = dist[node] + 1\n                        q.append(nei)\n                        if dist[nei] > dist[farthest]:\n                            farthest = nei\n            \n            return farthest, dist[farthest]\n        \n        fb = bfs(0)\n        sb = bfs(fb[0])\n        \n        return sb[1]\n\n    def findTreeCenters(self, edges: list[list[int]]) -> list[int]:\n        n = len(edges) + 1\n        adj = [[] for _ in range(n)]\n        degree = [0] * n\n        \n        for e in edges:\n            adj[e[0]].append(e[1])\n            adj[e[1]].append(e[0])\n            degree[e[0]] += 1\n            degree[e[1]] += 1\n        \n        leaves = []\n        \n        for i in range(n):\n            if degree[i] == 1:\n                leaves.append(i)\n        \n        remaining = n\n        \n        while remaining > 2:\n            cnt = len(leaves)\n            remaining -= cnt\n            \n            for _ in range(cnt):\n                leaf = leaves.pop(0)\n                \n                for nei in adj[leaf]:\n                    degree[nei] -= 1\n                    \n                    if degree[nei] == 1:\n                        leaves.append(nei)\n        \n        return leaves\n\n    def minimumDiameterAfterMerge(self, edges1: list[list[int]], edges2: list[list[int]]) -> int:\n        if not edges1 and not edges2:\n            return 1\n        if not edges1 or not edges2:\n            return 2\n        \n        d1 = self.treeDiameter(edges1)\n        d2 = self.treeDiameter(edges2)\n        \n        centers1 = self.findTreeCenters(edges1)\n        centers2 = self.findTreeCenters(edges2)\n        \n        min_diameter = float('inf')\n        \n        for c1 in centers1:\n            for c2 in centers2:\n                new_diameter = max(d1, d2, (d1 + 1) // 2 + (d2 + 1) // 2 + 1)\n                min_diameter = min(min_diameter, new_diameter)\n        \n        return min_diameter",
    "submit_ts": 1719719902.0
}