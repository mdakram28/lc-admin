{
    "username": "yong-ren-2n",
    "submission": "class SparseTable:\n    def __init__(self, data: list, func=lambda x, y: x | y):\n        self.func = func\n        self.st = [list(data)]\n        i, n = 1, len(self.st[0])\n        while 2 * i <= n:\n            pre = self.st[-1]\n            # \u8fd9\u91cc\u7528\u7684\u662f\u500d\u589e\u7684\u601d\u8def\uff0c\u6bd4\u5982\u4e00\u6b65\u7684\u65f6\u5019\u77e5\u9053 01 12 23\uff0c \u4e24\u6b65\u7684\u65f6\u5019\u5c31\u662f0123, 12\u662f\u6ca1\u6709\u4ef7\u503c\u7684\n            self.st.append([func(pre[j], pre[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n        # st \u8868\u7684\u884ci\u4ee3\u8868\u6b65\u957f\uff0c\u5217j\u4ee3\u8868\u5de6\u7aef\u70b9\uff0c\u6bd4\u5982st[1][2] \u8868\u793a[2, 2+1]\u7684\u7edf\u8ba1\u503c\n\n    def query(self, begin: int, end: int):  # \u67e5\u8be2\u95ed\u533a\u95f4[begin, end]\u7684\u6700\u5927\u503c\n        lg = (end - begin + 1).bit_length() - 1\n        return self.func(self.st[lg][begin], self.st[lg][end - (1 << lg) + 1])\n\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        # \u633a\u7b80\u5355\u7684 ST + \u4e8c\u5206\n        st = SparseTable(nums, func=lambda x, y: x & y)\n        \n        ans =  0\n        n = len(nums)\n        for i in range(n):\n            l = bisect_left(range(i, n), -k, key=lambda r: -st.query(i, r))\n            r = bisect_right(range(i, n), -k, key=lambda r: -st.query(i, r))\n            ans += r - l\n        \n        return ans\n            ",
    "submit_ts": "1720277186",
    "subm_id": "544555047"
}