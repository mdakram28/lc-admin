{
    "username": "pensive-easleys0j",
    "submission": "class SegmentTree {\nprivate:\n\tvector<int> tree;\n\tvector<int> nums;\n\tint n;\n\t\n\tvoid build(int node, int start, int end) {\n\t\tif (start == end) {\n\t\t\ttree[node] = isPeak(start) ? 1 : 0;\n\t\t} else {\n\t\t\tint mid = (start + end) / 2;\n\t\t\tbuild(2 * node + 1, start, mid);\n\t\t\tbuild(2 * node + 2, mid + 1, end);\n\t\t\ttree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n\t\t}\n\t}\n\t\n\tbool isPeak(int i) {\n\t\tif (i == 0 || i == n - 1) return false;\n\t\treturn nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n\t}\n\t\n\tvoid update(int node, int start, int end, int idx) {\n\t\tif (start == end) {\n\t\t\ttree[node] = isPeak(idx) ? 1 : 0;\n\t\t} else {\n\t\t\tint mid = (start + end) / 2;\n\t\t\tif (idx <= mid) {\n\t\t\t\tupdate(2 * node + 1, start, mid, idx);\n\t\t\t} else {\n\t\t\t\tupdate(2 * node + 2, mid + 1, end, idx);\n\t\t\t}\n\t\t\ttree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n\t\t}\n\t}\n\t\n\tint query(int node, int start, int end, int L, int R) {\n\t\tif (R < start || L > end) {\n\t\t\treturn 0;\n\t\t}\n\t\tif (L <= start && end <= R) {\n\t\t\treturn tree[node];\n\t\t}\n\t\tint mid = (start + end) / 2;\n\t\tint left_query = query(2 * node + 1, start, mid, L, R);\n\t\tint right_query = query(2 * node + 2, mid + 1, end, L, R);\n\t\treturn left_query + right_query;\n\t}\n\t\npublic:\n\tSegmentTree(vector<int>& nums) : nums(nums) {\n\t\tn = nums.size();\n\t\ttree.resize(4 * n, 0);\n\t\tbuild(0, 0, n - 1);\n\t}\n\t\n\tvoid update(int idx, int val) {\n\t\tnums[idx] = val;\n\t\tupdate(0, 0, n - 1, idx);\n\t\tif (idx > 0) update(0, 0, n - 1, idx - 1);\n\t\tif (idx < n - 1) update(0, 0, n - 1, idx + 1);\n\t}\n\t\n\tint query(int L, int R) {\n\t\treturn query(0, 0, n - 1, L, R);\n\t}\n};\n\nclass Solution {\npublic:\n\tvector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n\t\tSegmentTree segTree(nums);\n\t\tvector<int> result;\n\t\t\n\t\tfor (const auto& q : queries) {\n\t\t\tif (q[0] == 1) {\n\t\t\t\tint L = q[1] + 1;\n\t\t\t\tint R = q[2] - 1;\n\t\t\t\tif (L > R) {\n\t\t\t\t\tresult.push_back(0);\n\t\t\t\t} else {\n\t\t\t\t\tresult.push_back(segTree.query(L, R));\n\t\t\t\t}\n\t\t\t} else if (q[0] == 2) {\n\t\t\t\tint idx = q[1];\n\t\t\t\tint val = q[2];\n\t\t\t\tsegTree.update(idx, val);\n\t\t\t}\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n};",
    "submit_ts": 1718508835.0
}