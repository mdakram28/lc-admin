{
    "username": "PrabAce",
    "submission": "import java.util.*;\n\nclass Solution {\n    static class TrieNode {\n        TrieNode[] children;\n        boolean isEnd;\n        int minCost;\n\n        public TrieNode() {\n            children = new TrieNode[26];\n            isEnd = false;\n            minCost = Integer.MAX_VALUE;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = new TrieNode();\n\n        // Insert all words into Trie\n        for (int i = 0; i < words.length; i++) {\n            insertWord(root, words[i], costs[i]);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Process each position in the target string\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; // If not reachable, skip\n\n            TrieNode current = root;\n            for (int j = i; j < n; j++) {\n                int index = target.charAt(j) - 'a';\n                if (current.children[index] == null) break; // No word starts with this prefix\n\n                current = current.children[index];\n                if (current.isEnd) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + current.minCost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    private void insertWord(TrieNode root, String word, int cost) {\n        TrieNode current = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (current.children[index] == null) {\n                current.children[index] = new TrieNode();\n            }\n            current = current.children[index];\n        }\n        current.isEnd = true;\n        current.minCost = Math.min(current.minCost, cost); // Update minimum cost if lower\n    }\n}\n",
    "submit_ts": "1720324354",
    "subm_id": "1312397491"
}