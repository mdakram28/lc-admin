{
    "username": "nnustuder",
    "submission": "import bisect\nimport math\nimport heapq\nimport array\nfrom functools import cache\nimport itertools\nimport re\nimport os\nfrom collections import deque, Counter, defaultdict\nimport sys\n\ninf = float(\"inf\")\nsys.setrecursionlimit(100000)\nList = list\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def check(val):\n            pass\n        #     max_plus, min_plus, max_sub, min_sub = 0, inf, 0, inf\n        #     second_max_plus, second_min_plus, second_max_sub, second_min_sub = 0, inf, 0, inf\n        #     deleted = False\n        #     for x, y in points:\n        #         if x + y > max_plus:\n        #             max_plus, second_max_plus = x + y, max_plus\n        #         elif x + y > second_max_plus:\n        #             second_max_plus = x + y\n        #         if x + y < min_plus:\n        #             min_plus, second_min_plus = x + y, min_plus\n        #         elif x + y < second_min_plus:\n        #             second_min_plus = x + y\n        #         if x - y > max_sub:\n        #             max_sub, second_max_sub = x + y, max_sub\n        #         elif x - y > second_max_sub:\n        #             second_max_sub = x + y\n        #         if x - y < min_sub:\n        #             min_sub, second_min_sub = x - y, min_sub\n        #         elif x - y < second_min_sub:\n        #             second_min_sub = x - y\n        #         if max(new_max_plus - new_min_plus, new_max_sub - new_min_sub) > val:\n        #             if deleted:\n        #                 return False\n        #             else:\n        #                 deleted = True\n        #         else:\n        #             max_plus = new_max_plus\n        #             min_plus = new_min_plus\n        #             max_sub = new_max_sub\n        #             min_sub = new_min_sub\n        #     return True\n        # left, right = 0, 2 * 10**8\n        # while left < right:\n        #     mid = (left + right) // 2\n        #     if check(mid):right = mid\n        #     else:left = mid + 1\n        # return mid\n        n = len(points)\n        plus = sorted([[points[i][0] + points[i][1], i] for i in range(n)])\n        sub = sorted([[points[i][0] - points[i][1], i] for i in range(n)])\n        res = inf\n        smax = n - 1 if sub[-1][1] != plus[-1][1] else n - 2\n        smin = 0 if sub[0][1] != plus[-1][1] else 1\n        res = min(max(plus[-2][0] - plus[0][0], sub[smax][0] - sub[smin][0]), res)\n        \n        smax = n - 1 if sub[-1][1] != plus[0][1] else n - 2\n        smin = 0 if sub[0][1] != plus[0][1] else 1\n        res = min(max(plus[-1][0] - plus[1][0], sub[smax][0] - sub[smin][0]), res)\n        \n        pmax = n - 1 if sub[-1][1] != plus[-1][1] else n - 2\n        pmin = 0 if sub[-1][1] != plus[0][1] else 1\n        res = min(max(plus[pmax][0] - plus[pmin][0], sub[-2][0] - sub[0][0]), res)\n        \n        pmax = n - 1 if plus[-1][1] != sub[0][1] else n - 2\n        pmin = 0 if plus[0][1] != sub[0][1] else 1\n        res = min(max(plus[pmax][0] - plus[pmin][0], sub[-1][0] - sub[1][0]), res)\n        return res\ns = Solution()\nprint(s.minimumDistance([[3,2],[3,9],[7,10],[4,4],[8,10],[2,7]]))"
}