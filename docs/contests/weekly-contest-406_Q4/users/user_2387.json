{
    "username": "TheZwischenzug",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n            Queue<Integer> hq = new PriorityQueue<>(Collections.reverseOrder());\n            for (int h : horizontalCut) hq.add(h);\n\n            Queue<Integer> vq = new PriorityQueue<>(Collections.reverseOrder());\n            for (int v : verticalCut) vq.add(v);\n            long hPieces = 1;\n            long vPieces = 1;\n            long cost = 0;\n            while (!hq.isEmpty() && !vq.isEmpty()){\n                 if (hq.peek() > vq.peek()){\n                     cost += hPieces*hq.poll();\n                     vPieces++;\n                 }\n                 else{\n                     cost += vPieces*vq.poll();\n                     hPieces++;\n                 }\n            }\n            while (!hq.isEmpty()){\n                cost += hPieces*hq.poll();\n            }\n            while (!vq.isEmpty()){\n                cost += vPieces*vq.poll();\n            }\n            return cost;\n    }\n}",
    "submit_ts": "1720926157",
    "subm_id": "1320277681"
}