{
    "username": "runtime-terror_63",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_ALLOWED_INVERSIONS = 400;\n\n    unordered_map<int, int> parseRequirements(const vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIndexToRequiredInversions;\n        for (auto& req : requirements) {\n            endIndexToRequiredInversions[req[0] + 1] = req[1];\n        }\n        return endIndexToRequiredInversions;\n    }\n\n    void addInversionsToDP(vector<vector<long long>>& dp, int length, int currentInversions, int previousInversions) {\n        if (previousInversions >= 0) {\n            dp[length][currentInversions] = (dp[length][currentInversions] + dp[length - 1][previousInversions]) % MOD;\n        }\n    }\n\n    void zeroOutNonMatchingInversions(vector<vector<long long>>& dp, int length, int maxInversions, int requiredInversions) {\n        int currentInversions = 0;\n        while (currentInversions <= maxInversions) {\n            if (currentInversions != requiredInversions) {\n                dp[length][currentInversions] = 0;\n            }\n            ++currentInversions;\n        }\n    }\n\n    void calculateDP(vector<vector<long long>>& dp, int length, int maxInversions, const unordered_map<int, int>& endIndexToRequiredInversions) {\n        int currentInversions = 0;\n        while (currentInversions <= maxInversions) {\n            int newPosition = 0;\n            while (newPosition < length) {\n                int previousInversions = currentInversions - newPosition;\n                if (previousInversions >= 0) {\n                    addInversionsToDP(dp, length, currentInversions, previousInversions);\n                }\n                ++newPosition;\n            }\n            ++currentInversions;\n        }\n\n        if (endIndexToRequiredInversions.count(length) > 0) {\n            int requiredInversions = endIndexToRequiredInversions.at(length);\n            zeroOutNonMatchingInversions(dp, length, maxInversions, requiredInversions);\n        }\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIndexToRequiredInversions = parseRequirements(requirements);\n        \n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_ALLOWED_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        int length = 1;\n        while (length <= n) {\n            calculateDP(dp, length, MAX_ALLOWED_INVERSIONS, endIndexToRequiredInversions);\n            ++length;\n        }\n\n        long long result = 0;\n        int currentInversions = 0;\n        while (currentInversions <= MAX_ALLOWED_INVERSIONS) {\n            result = (result + dp[n][currentInversions]) % MOD;\n            ++currentInversions;\n        }\n\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070642.0
}