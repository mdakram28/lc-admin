{
    "username": "pendem_2003",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> g;\n    int par[100100];\n    int is_leaf[100100];\n    int subtree_size[100100];\n    int depth_node[100100];\n    int num_childs[100100];\n    void dfs(int node, int parent, int depth){\n        par[node] = parent;\n        depth_node[node] = depth;\n        num_childs[node] = 0;\n        subtree_size[node] = 1;\n        for (auto v : g[node]){\n            if (v==parent)continue;\n            num_childs[node]++;\n            dfs(v,node,depth+1);\n            subtree_size[node] += subtree_size[v];\n        }\n        if (num_childs[node]==0)is_leaf[node] = 1;\n    }\n    vector<vector<int>> g1;\n    int par1[100100];\n    int is_leaf1[100100];\n    int subtree_size1[100100];\n    int depth_node1[100100];\n    int num_childs1[100100];\n    void dfs1(int node, int parent, int depth){\n        par1[node] = parent;\n        depth_node1[node] = depth;\n        num_childs1[node] = 0;\n        subtree_size1[node] = 1;\n        for (auto v : g1[node]){\n            if (v==parent)continue;\n            num_childs1[node]++;\n            dfs1(v,node,depth+1);\n            subtree_size1[node] += subtree_size1[v];\n        }\n        if (num_childs1[node]==0)is_leaf1[node] = 1;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n;\n        n = (int)edges1.size();\n        n++;\n        g.resize(n+1);\n        for (int i=1;i<n;i++){\n            int a,b;\n            a = edges1[i-1][0];\n            b = edges1[i-1][1];\n            a++;\n            b++;\n            //cout<<a<<\" \"<<b<<\"\\n\";\n            g[a].push_back(b);\n            g[b].push_back(a);\n        }\n        dfs(1,0,0);\n        int match = 1;\n        for (int i=2;i<=n;i++){\n            //cout<<depth_node[i]<<\"\\n\";\n            if (depth_node[i]>depth_node[match]){\n                match = i;\n            }\n        }\n        dfs(match,0,0);\n        for (int i=1;i<=n;i++){\n            //cout<<depth_node[i]<<\"\\n\";\n            if (depth_node[i]>depth_node[match]){\n                match = i;\n            }\n        }\n        //cout<<depth_node[match]<<\"\\n\";\n        int ans = (depth_node[match]+1)/2;\n        //return ans;\n        \n        int n1;\n        n1 = (int)edges2.size();\n        n1++;\n        g1.resize(n1+1);\n        for (int i=1;i<n1;i++){\n            int a,b;\n            a = edges2[i-1][0];\n            b = edges2[i-1][1];\n            a++;\n            b++;\n            g1[a].push_back(b);\n            g1[b].push_back(a);\n        }\n        dfs1(1,0,0);\n        int match1 = 1;\n        for (int i=2;i<=n1;i++){\n            if (depth_node1[i]>depth_node1[match1]){\n                match1 = i;\n            }\n        }\n        dfs1(match1,0,0);\n        for (int i=1;i<=n1;i++){\n            if (depth_node1[i]>depth_node1[match1]){\n                match1 = i;\n            }\n        }\n        //cout<<depth_node1[match1]<<\"\\n\";\n        ans += (depth_node1[match1]+1)/2;\n        int ans1 = max(depth_node[match],depth_node1[match1]);\n        ans++;\n        ans = max(ans,ans1);\n        return ans;\n    }\n};",
    "submit_ts": "1719719898",
    "subm_id": "1304453395"
}