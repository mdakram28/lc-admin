{
    "username": "Hackerman784",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n#include <utility>\n\nclass Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& matrix) {\n        int numRows = matrix.size();\n        int numCols = matrix[0].size();\n        long long maxSum = LLONG_MIN;\n        std::vector<std::vector<long long>> topValues(numRows, std::vector<long long>(3, LLONG_MIN));\n        std::vector<std::vector<int>> topColumns(numRows, std::vector<int>(3, -1));\n\n        for (int i = 0; i < numRows; ++i) {\n            std::vector<std::pair<long long, int>> colValues;\n            for (int j = 0; j < numCols; ++j) {\n                colValues.emplace_back(matrix[i][j], j);\n            }\n            std::sort(colValues.rbegin(), colValues.rend()); \n\n            for (int k = 0; k < 3 && k < numCols; ++k) {\n                topValues[i][k] = colValues[k].first;\n                topColumns[i][k] = colValues[k].second;\n            }\n        }\n\n        // Calculate maximum sum using a helper function\n        maxSum = calculateMaxSum(topValues, topColumns, numRows);\n\n        return maxSum;\n    }\n\nprivate:\n    long long calculateMaxSum(const std::vector<std::vector<long long>>& topValues,\n                              const std::vector<std::vector<int>>& topColumns,\n                              int numRows) {\n        long long maxSum = LLONG_MIN;\n\n        // Try all combinations of different rows\n        for (int row1 = 0; row1 < numRows; ++row1) {\n            for (int row2 = row1 + 1; row2 < numRows; ++row2) {\n                for (int row3 = row2 + 1; row3 < numRows; ++row3) {\n                    for (int i = 0; i < 3; ++i) {\n                        for (int j = 0; j < 3; ++j) {\n                            if (topColumns[row2][j] == topColumns[row1][i]) continue;\n                            for (int k = 0; k < 3; ++k) {\n                                if (topColumns[row3][k] == topColumns[row1][i] || topColumns[row3][k] == topColumns[row2][j]) continue;\n\n                                long long currentSum = topValues[row1][i] + topValues[row2][j] + topValues[row3][k];\n                                maxSum = std::max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723910281",
    "subm_id": "1359224164"
}