{
    "username": "user9218i",
    "submission": "class Solution {\npublic:\n    vector<int> tree, lazy;\n    void update(int low, int high, int pos, int qlow, int qhigh, int qval) {\n        if(lazy[pos] != 0) {\n            tree[pos] += lazy[pos];\n            if(low != high)     lazy[2*pos+1] += lazy[pos], lazy[2*pos+2] += lazy[pos];\n            lazy[pos] = 0;\n        }\n        if(qlow <= low and high <= qhigh) {\n            tree[pos] += qval;\n            if(low != high)     lazy[2*pos+1] += qval, lazy[2*pos+2] += qval;\n            return;\n        }\n        if(qlow > high or qhigh < low)      return;\n        int mid = (low + high) >> 1;\n        update(low, mid, 2*pos+1, qlow, qhigh, qval);\n        update(mid+1, high, 2*pos+2, qlow, qhigh, qval);\n        tree[pos] = max(tree[2*pos+1], tree[2*pos+2]);\n        return;\n    }\n    int query(int low, int high, int pos, int qlow, int qhigh) {\n        if(lazy[pos] != 0) {\n            tree[pos] += lazy[pos];\n            if(low != high)     lazy[2*pos+1] += lazy[pos], lazy[2*pos+2] += lazy[pos];\n            lazy[pos] = 0;\n        }\n        if(qlow <= low and high <= qhigh) {\n            return tree[pos];\n        }\n        if(qlow > high or qhigh < low)      return 0;\n        int mid = (low + high) >> 1;\n        return max(query(low, mid, 2*pos+1, qlow, qhigh), query(mid+1, high, 2*pos+2, qlow, qhigh));\n    }\n    void build(int low, int high, int pos, vector<int>& v) {\n        if(low == high) {\n            tree[pos] = v[low];\n            return ;\n        }\n        int mid = (low + high) >> 1;\n        build(low, mid, 2*pos+1, v);\n        build(mid+1, high, 2*pos+2, v);\n        tree[pos] = max(tree[2*pos+1], tree[2*pos+2]);\n        return;\n    }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        \n        vector<int> v(1e5 + 1, 0);\n        tree.resize(5e5, 0);\n        lazy.resize(5e5, 0);\n        \n        for(int i = 0; i <= 1e5; i ++)   v[i] = i;\n        build(0, 1e5, 0, v);\n        \n        set<int> p;     \n        p.insert(0);    \n        p.insert(1e5);\n        \n        vector<bool> ans;\n        \n        for(auto it : queries) {\n            int t = it[0];\n            if(t == 1) {\n                int l = it[1];\n                auto it = p.lower_bound(l);\n                int next = *it;\n                int last = *(--it);\n                \n                //cout << last << \" \"<< next << \" \"<< l - last << endl;\n                // update l to next , with t - last\n                update(0, 1e5, 0, l+1, next, -(l - last));\n                p.insert(l);\n            }\n            else {\n                int l = it[1], sz = it[2];\n                int mx = query(0, 1e5, 0, 0, l);\n                ans.push_back(mx >= sz);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716649700.0
}