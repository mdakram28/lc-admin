{
    "username": "sdckivenchen",
    "submission": "from sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        n = 5*(10**4) + 1\n        tree = [0] * (n*2)\n        f = max\n        # function to update a tree node  \n        def update(p, value) :  \n            # set value at position p  \n            tree[p + n] = value;  \n            p = p + n  \n            # move upward and update parents  \n            i = p; \n            while i > 1 : \n                tree[i >> 1] = f(tree[i], tree[i ^ 1]) \n                i >>= 1\n\n        # function to get sum on interval [l, r)  \n        def query(l, r) :  \n            res = 0  \n            # loop to find the sum in the range  \n            l += n \n            r += n\n            while l < r : \n                if (l & 1) : \n                    res = f(res, tree[l])\n                    l += 1\n                if (r & 1) : \n                    r -= 1; \n                    res = f(res, tree[r])  \n\n                l >>= 1; \n                r >>= 1\n\n            return res;  \n\n        sl = SortedList()\n        furthest = 0\n        res = []\n        for q in queries:\n            cmd, *args = q\n            if cmd == 1:\n                # put\n                x = args[0]\n                if not sl:\n                    sl.add([0, x])\n                    update(x, x)\n                    furthest = x\n                    continue\n                \n                if x == furthest:\n                    continue\n                \n                if x > furthest:\n                    sl.add([furthest, x])\n                    update(x, x - furthest)\n                    furthest = x\n                    continue\n                \n                ind = sl.bisect_left([x, 0]) - 1\n                if ind == len(sl):\n                    print(sl, [x, 0], ind)\n                    raise\n                \n                l, r = sl[ind]\n                # print(sl, ind, [l, r])\n                \n                sl.remove([l, r])\n                update(r, r - l)\n                sl.add([l, x])\n                update(x, x - l)\n                sl.add([x, r])\n                update(r, r - x)\n                \n                # print(sl, \"\\n\")\n            else:\n                x, sz = args\n                if not sl or (x - furthest) >= sz:\n                    res.append(sz <= x)\n                    continue\n                if sz > x:\n                    res.append(False)\n                    continue\n                \n                \n                segi = sl.bisect_left([x, 0]) - 1\n                if segi < len(sl):\n                    l, r = sl[segi]\n                    # print(\"gives \", l, r)\n                    if (x > r and x - r >= sz) or (x <= r and x - l >= sz):\n                        res.append(True)\n                        continue\n                \n                preseg = query(0, x+1)\n                if preseg > 0:\n                    res.append(preseg >= sz)\n                else:\n                    res.append(sz <= x)\n                \n                # print(tree[:x+1])\n        return res\n\n                \n                \n                ",
    "submit_ts": 1716652142.0
}