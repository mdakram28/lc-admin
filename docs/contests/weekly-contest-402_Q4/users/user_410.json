{
    "username": "jasonshieh_new",
    "submission": "class Solution {\nprivate:\nclass PeakSegementArray {\n    vector<int> nums;\n    vector<int> isPeak;\n    vector<int> tree;\n    int n;\n    \n    bool isPeakElement(int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n    \n    void build(int start, int end, int node) {\n        if (start == end) {\n            tree[node] = isPeak[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(start, mid, 2 * node + 1);\n            build(mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n    \n    void updateTree(int start, int end, int idx, int value, int node) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                updateTree(start, mid, idx, value, 2 * node + 1);\n            } else {\n                updateTree(mid + 1, end, idx, value, 2 * node + 2);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n    \n    int queryTree(int start, int end, int L, int R, int node) {\n        if (start > R || end < L) return 0;\n        if (start >= L && end <= R) return tree[node];\n        int mid = (start + end) / 2;\n        return queryTree(start, mid, L, R, 2 * node + 1) + queryTree(mid + 1, end, L, R, 2 * node + 2);\n    }\n    \n    void updatePeakStatus(int i) {\n        if (i > 0 && i < nums.size() - 1) {\n            bool peak = isPeakElement(i);\n            if (isPeak[i] != peak) {\n                isPeak[i] = peak;\n                updateTree(0, n - 1, i, peak ? 1 : 0, 0);\n            }\n        }\n    }\n    \npublic:\n    PeakSegementArray(vector<int>& nums) : nums(nums), n(nums.size()), isPeak(nums.size(), false), tree(4 * nums.size(), 0) {\n        for (int i = 1; i < nums.size() - 1; ++i) {\n            isPeak[i] = isPeakElement(i);\n        }\n        build(0, n - 1, 0);\n    }\n    \n    void update(int idx, int val) {\n        nums[idx] = val;\n        updatePeakStatus(idx);\n        if (idx > 0) updatePeakStatus(idx - 1);\n        if (idx < nums.size() - 1) updatePeakStatus(idx + 1);\n    }\n    \n    int query(int l, int r) {\n        if (l + 1 >= r) return 0;\n        return queryTree(0, n - 1, l + 1, r - 1, 0);\n    }\n};\n    \npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        PeakSegementArray peakSegementArray(nums);\n        vector<int> result;\n\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                result.push_back(peakSegementArray.query(q[1], q[2]));\n            } else if (q[0] == 2) {\n                peakSegementArray.update(q[1], q[2]);\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1718507488.0
}