{
    "username": "WORTH_IT",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int K) {\n        int n = nums.length;\n\n        HashMap<Integer, Integer> lastPos = new HashMap<>();\n        int[][] dp = new int[n][K + 1];\n        for (var asd : dp)\n            Arrays.fill(asd, 1);\n        lastPos.put(nums[0], 0);\n        int[] max = new int[K + 1];\n        Arrays.fill(max, 1);\n        for (int i = 1; i < n; i++) {\n            for (int k = 0; k <= K; k++) {\n\n                int take = 0;\n                if (lastPos.containsKey(nums[i]))\n                    take = 1 + dp[lastPos.get(nums[i])][k];\n                if (k > 0)\n                    take = Math.max(take, 1 + max[k - 1]);\n\n                dp[i][k] = Math.max(dp[i][k], take);\n            }\n\n            for (int k = 0; k <= K; k++)\n                max[k] = Math.max(max[k], dp[i][k]);\n            lastPos.put(nums[i], i);\n        }\n\n        int ans = 0;\n        for (var asd : dp) {\n            for (var jkl : asd)\n                ans = Math.max(ans, jkl);\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1717859838.0
}