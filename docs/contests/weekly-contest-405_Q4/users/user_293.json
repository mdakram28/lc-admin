{
    "username": "DKPROCKS",
    "submission": "\nstruct Node {\n    unordered_map<char, Node*> children;\n    vector<pair<int, int>> wordCosts;\n};\n\nclass WordTrie {\npublic:\n    Node* rootNode;\n\n    WordTrie() { \n        rootNode = new Node(); \n    }\n\n    void insertWord(string& word, int index, int cost) {\n        Node* node = rootNode;\n        for (char c : word) {\n            if (!node->children.count(c))\n                node->children[c] = new Node();\n            node = node->children[c];\n        }\n        node->wordCosts.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        WordTrie wordTrie;\n        buildWordTrie(words, costs, wordTrie);\n\n        calculateDP(target, words, wordTrie, dp);\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    void buildWordTrie(vector<string>& words, vector<int>& costs, WordTrie& wordTrie) {\n        for (int i = 0; i < words.size(); ++i) {\n            wordTrie.insertWord(words[i], i, costs[i]);\n        }\n    }\n\n   void calculateDP(string& target, vector<string>& words, WordTrie& wordTrie, vector<int>& dp) {\n    int targetLength = target.size();\n\n    for (int startIdx = 0; startIdx < targetLength; ++startIdx) {\n        if (dp[startIdx] == INT_MAX) continue;\n\n        Node* currentNode = wordTrie.rootNode;\n        for (int currentIdx = startIdx; currentIdx < targetLength; ++currentIdx) {\n            char currentChar = target[currentIdx];\n            if (!currentNode->children.count(currentChar)) break;\n\n            currentNode = currentNode->children[currentChar];\n            for (auto& pair : currentNode->wordCosts) {\n                int wordIndex = pair.first;\n                int wordCost = pair.second;\n                int wordLength = words[wordIndex].size();\n                if (startIdx + wordLength <= targetLength) {\n                    dp[startIdx + wordLength] = min(dp[startIdx + wordLength], dp[startIdx] + wordCost);\n                }\n            }\n        }\n    }\n}\n};\n\n// Utility functions (additional)\nvector<string> splitString(string& input, char delimiter) {\n    vector<string> tokens;\n    string token;\n    istringstream tokenStream(input);\n    while (getline(tokenStream, token, delimiter)) {\n        tokens.push_back(token);\n    }\n    return tokens;\n}\n\nvoid printVector(vector<int>& vec) {\n    cout << \"[ \";\n    for (int i = 0; i < vec.size(); ++i) {\n        cout << vec[i];\n        if (i < vec.size() - 1)\n            cout << \", \";\n    }\n    cout << \" ]\" << endl;\n}",
    "submit_ts": "1720322043",
    "subm_id": "1312339140"
}