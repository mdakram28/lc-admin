{
    "username": "Sergei Romanov",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        result = float('-inf')\n\n        n = len(board)\n        m = len(board[0])\n        rows = [False] * n\n        cols = [False] * m\n\n        cells = []\n\n        for row, line in enumerate(board):\n            for col, val in enumerate(line):\n                cells.append((val, row, col))\n\n        cells.sort(reverse=True)\n\n        def check(row, col):\n            return not rows[row] and not cols[col]\n\n        def place_rook(row, col):\n            cols[col] = rows[row] = True\n\n        def remove_rook(row, col):\n            cols[col] = rows[row] = False\n\n\n        cnt = n * m\n        result = float('-inf')\n\n\n        one_val, one_row, one_col = cells[0]\n        place_rook(one_row, one_col)\n        two_val, two_row, two_col = cells[1]\n        if check(two_row, two_col):\n            place_rook(two_row, two_col)\n            three_val, three_row, three_col = cells[2]\n            if check(three_row, three_col):\n                return one_val + two_val + three_val\n            remove_rook(two_row, two_col)\n        remove_rook(one_row, one_col)\n\n\n        for one_val, one_row, one_col in cells[:700]:\n            place_rook(one_row, one_col)\n            for two_val, two_row, two_col in cells[:700]:\n                if check(two_row, two_col):\n                    place_rook(two_row, two_col)\n                    for three_val, three_row, three_col in cells:\n                        if check(three_row, three_col):\n                            break\n                    result = max(result, one_val + two_val + three_val)\n                    remove_rook(two_row, two_col)\n            remove_rook(one_row, one_col)\n\n        return result",
    "submit_ts": "1723909769",
    "subm_id": "1359205114"
}