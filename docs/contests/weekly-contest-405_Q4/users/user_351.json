{
    "username": "devangsvaghani",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct Node {\n    Node* links[26];\n    int cost;\n\n    Node(){\n        cost = INT_MAX;\n        for(int i = 0; i < 26; ++i){\n            links[i] = NULL;\n        }\n    }\n\n    bool hasKey(char c){\n        return (links[c - 'a'] != NULL);\n    }\n\n    Node* get(char c){\n        return links[c - 'a'];\n    }\n\n    void put(char c, Node* node){\n        links[c - 'a'] = node;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string& word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->hasKey(c)) {\n                node->put(c, new Node());\n            }\n            node = node->get(c);\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    void findMinCosts(string& s, int start, vector<long long>& dp) {\n        Node* node = root;\n        for (int i = start; i < s.size(); ++i) {\n            if (!node->hasKey(s[i])) break;\n            node = node->get(s[i]);\n            if (node->cost != INT_MAX) {\n                dp[i + 1] = min(dp[i + 1], dp[start] + node->cost);\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n            trie.findMinCosts(target, i, dp);\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720321603",
    "subm_id": "1312327303"
}