{
    "username": "TheRealRaymondJones",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = defaultdict(Trie)\n        self.cost = math.inf\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str, cost: int):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = Trie()\n        \n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        pq = [(0, 0)]\n        min_cost = [math.inf] * (n + 1)\n        min_cost[0] = 0\n        \n        while pq:\n            current_cost, pos = heapq.heappop(pq)\n            \n            if pos == n:\n                return current_cost\n            \n            if current_cost > min_cost[pos]:\n                continue\n            \n            node = trie.root\n            for i in range(pos, n):\n                if target[i] not in node.children:\n                    break\n                node = node.children[target[i]]\n                if node.cost < float('inf'):\n                    new_pos = i + 1\n                    new_cost = current_cost + node.cost\n                    if new_cost < min_cost[new_pos]:\n                        min_cost[new_pos] = new_cost\n                        heapq.heappush(pq, (new_cost, new_pos))\n        \n        return -1 if min_cost[n] == float('inf') else min_cost[n]",
    "submit_ts": "1720324229",
    "subm_id": "1312394578"
}