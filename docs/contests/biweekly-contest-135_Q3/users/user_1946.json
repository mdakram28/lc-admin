{
    "username": "Dark_World28",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffToXMap; // Map to store differences and possible X values\n        vector<int> allXValues; // Vector to store all possible X values\n        int n = nums.size();\n        int half = n / 2;\n\n        // Compute differences and possible X values for each pair\n        for (int i = 0; i < half; ++i) {\n            int left = nums[i];\n            int right = nums[n - i - 1];\n            int diff = abs(left - right);\n            int possibleX = max({left, right, k - left, k - right});\n            diffToXMap[diff].push_back(possibleX);\n            allXValues.push_back(possibleX);\n        }\n\n        int minChangesRequired = n; // Initialize with the maximum number of changes\n\n        // Sort all possible X values\n        sort(allXValues.begin(), allXValues.end());\n\n        // Calculate minimum changes required for each possible difference\n        for (const auto& entry : diffToXMap) {\n            int currentDiff = entry.first;\n            int numLessThanCurrentDiff = lower_bound(allXValues.begin(), allXValues.end(), currentDiff) - allXValues.begin();\n            int changesRequired = numLessThanCurrentDiff * 2 + (half - numLessThanCurrentDiff);\n\n            for (const auto& xValue : entry.second) {\n                if (xValue < currentDiff) {\n                    changesRequired -= 2; // Both elements need to change if xValue < currentDiff\n                } else {\n                    changesRequired -= 1; // Only one element needs to change if xValue >= currentDiff\n                }\n            }\n\n            minChangesRequired = min(minChangesRequired, changesRequired); // Track the minimum changes\n        }\n\n        return minChangesRequired;\n    }\n};\n",
    "submit_ts": "1721489077",
    "subm_id": "1327442154"
}