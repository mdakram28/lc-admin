{
    "username": "asynchron",
    "submission": "class Solution {\npublic:\n    vector<array<int, 2>> ps;\n\n    int distance(array<int, 2> p1, array<int, 2> p2) {\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]);\n    }\n\n    int minimumDistance(vector<vector<int>>& points) {\n        for(auto &p : points) {\n            ps.push_back(array{p[0], p[1]});\n        }\n        int n = points.size();\n        \n        array<int, 2> sp1{0, 0}, sp2{0, 100000001};\n\n        vector<array<int, 2>> dist1, dist2;\n        for(int i = 0; i < ps.size(); ++i) {\n            dist1.push_back(array{distance(sp1, ps[i]), i});\n            dist2.push_back(array{distance(sp2, ps[i]), i});\n        }\n        ranges::sort(dist1);\n        ranges::sort(dist2);\n\n        int minDist = INT_MAX;\n        if(dist1[n - 1][0] - dist1[0][0] > dist2[n - 1][0] - dist2[0][0]) {\n            {\n                int remove = dist1[0][1];\n                int d1 = dist1[n - 1][0] - dist1[1][0];\n                int d2 = 0;\n                if(remove == dist2[n-1][1] || remove == dist2[0][1]) {\n                    if(remove == dist2[n-1][1]) {\n                        d2 = dist2[n-2][0] - dist2[0][0];\n                    } else {\n                        d2 = dist2[n-1][0] - dist2[1][0];\n                    }\n                } else {\n                    d2 = dist2[n-1][0] - dist2[0][0];\n                }\n                minDist = min(minDist, max(d1, d2));\n            }\n            {\n                int remove = dist1[n - 1][1];\n                int d1 = dist1[n - 2][0] - dist1[0][0];\n                int d2 = 0;\n                if(remove == dist2[n-1][1] || remove == dist2[0][1]) {\n                    if(remove == dist2[n-1][1]) {\n                        d2 = dist2[n-2][0] - dist2[0][0];\n                    } else {\n                        d2 = dist2[n-1][0] - dist2[1][0];\n                    }\n                } else {\n                    d2 = dist2[n-1][0] - dist2[0][0];\n                }\n                minDist = min(minDist, max(d1, d2));\n            }\n        } else { // if (dist1[n - 1][0] - dist1[0][0] < dist2[n - 1][0] - dist2[0][0])\n            {\n                int remove = dist2[0][1];\n                int d2 = dist2[n - 1][0] - dist2[1][0];\n                int d1 = 0;\n                if(remove == dist1[n-1][1] || remove == dist1[0][1]) {\n                    if(remove == dist1[n-1][1]) {\n                        d1 = dist1[n-2][0] - dist1[0][0];\n                    } else {\n                        d1 = dist1[n-1][0] - dist1[1][0];\n                    }\n                } else {\n                    d1 = dist1[n-1][0] - dist1[0][0];\n                }\n                minDist = min(minDist, max(d1, d2));\n            }\n            {\n                int remove = dist2[n - 1][1];\n                int d2 = dist2[n - 2][0] - dist2[0][0];\n                int d1 = 0;\n                if(remove == dist1[n-1][1] || remove == dist1[0][1]) {\n                    if(remove == dist1[n-1][1]) {\n                        d1 = dist1[n-2][0] - dist1[0][0];\n                    } else {\n                        d1 = dist1[n-1][0] - dist1[1][0];\n                    }\n                } else {\n                    d1 = dist1[n-1][0] - dist1[0][0];\n                }\n                minDist = min(minDist, max(d1, d2));\n            }\n        }\n        return minDist;\n    }\n};"
}