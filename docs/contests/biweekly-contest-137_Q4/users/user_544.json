{
    "username": "Ark_e",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int[][] newBoard = new int[board.length][board[0].length];\n        for (int i = 0; i < board.length; ++i) {\n            for (int j = 0; j < board[0].length; ++j) {\n                newBoard[i][j] = board[board.length - i - 1][board[0].length - j - 1];\n            }\n        }\n        long res = Math.max(calc(board), calc(newBoard));\n        return res;\n    }\n\n    private long calc(int[][] board) {\n        long[][] maxThree = new long[3][3];\n        maxThree[0][0] = Long.MIN_VALUE;\n        maxThree[1][0] = Long.MIN_VALUE;\n        maxThree[2][0] = Long.MIN_VALUE;\n        for (int i = 0; i < board.length; ++i) {\n            for (int j = 0; j < board[0].length; ++j) {\n                if (!isBad(maxThree, i, j, board[i][j])) {\n                    if (board[i][j] > maxThree[0][0]) {\n                        maxThree[2] = maxThree[1];\n                        maxThree[1] = maxThree[0];\n                        maxThree[0] = new long[]{board[i][j], i, j};\n                    } else if (board[i][j] > maxThree[1][0] && !isBad(maxThree, i, j, board[i][j])) {\n                        maxThree[2] = maxThree[1];     \n                        maxThree[1] = new long[]{board[i][j], i, j};              \n                    } else if (board[i][j] > maxThree[2][0] && !isBad(maxThree, i, j, board[i][j])) {\n                        maxThree[2] = new long[]{board[i][j], i, j};  \n                    }\n                }\n\n            }\n        }\n        long maxSum = Long.MIN_VALUE;\n        for (int k = 0; k < 3; ++k) {\n            long sum = maxThree[k][0];\n            long[][] maxTwo = new long[2][3];\n            maxTwo[0][0] = Long.MIN_VALUE;\n            maxTwo[1][0] = Long.MIN_VALUE;\n            for (int i = 0; i < board.length; ++i) {\n                if (i != maxThree[k][1]) {\n                    for (int j = 0; j < board[0].length; ++j) {\n                        if (j != maxThree[k][2]) {\n                            if (board[i][j] > maxTwo[0][0]) {\n                                maxTwo[1] = maxTwo[0];   \n                                maxTwo[0] = new long[]{board[i][j], i, j};              \n                            } else if (board[i][j] > maxTwo[1][0]) {\n                                maxTwo[1] = new long[]{board[i][j], i, j};  \n                            }\n                        }\n                    }\n                }\n            }\n            for (int p = 0; p < 2; ++p) {\n                long twoSum = (long)sum + maxTwo[p][0];\n                long max = Long.MIN_VALUE;\n                for (int i = 0; i < board.length; ++i) {\n                    if (i != maxThree[k][1] && i != maxTwo[p][1]) {\n                        for (int j = 0; j < board[0].length; ++j) {\n                            if (j != maxThree[k][2] && j != maxTwo[p][2]) {\n                                max = Math.max(max, board[i][j]);\n                            }\n                        }\n                    }\n                }\n                long second = twoSum + max;\n                maxSum = Math.max(maxSum, second);\n            }\n        }\n\n        return maxSum;\n    }\n\n    private boolean isBad(long[][] arr, long x, long y, long val) {\n        for (int i = 0; i < arr.length; ++i) {\n            if ((x == arr[i][1] || y == arr[i][2]) && val <= arr[i][0]) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}",
    "submit_ts": "1723909257",
    "subm_id": "1359185579"
}