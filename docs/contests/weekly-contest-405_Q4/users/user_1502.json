{
    "username": "Avi_A",
    "submission": "class Solution {\n\n    static class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        List<int[]> indexes = new ArrayList<>(); // Store (index, cost) pairs\n    }\n\n    // Insert words into the trie\n    private void insert(TrieNode root, String word, int index, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.indexes.add(new int[]{index, cost});\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n\n        // Initialize trie\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            insert(root, words[i], i, costs[i]);\n        }\n\n        // Initialize dp array\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; // Base case: cost to form empty string is 0\n\n        // Iterate over each position in the target string\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                node = node.children.get(target.charAt(j));\n                if (node == null) break;\n                for (int[] indexCost : node.indexes) {\n                    int index = indexCost[0];\n                    int cost = indexCost[1];\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720323438",
    "subm_id": "1312375570"
}