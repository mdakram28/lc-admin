{
    "username": "__sebasti0n__",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& arr, int k) {\n        int ct=0;\n        vector<int> arr1;\n        int n=arr.size();\n        for(int i=0;i<2*n-1;i++){\n            if(arr[i%n]==arr[(i+1)%n]){\n                arr1.push_back(i+1);\n                cout<<arr1.back()<<\" \";\n            }\n        }\n        cout<<endl;\n        for(int i=0;i<n;i++){\n            int lidx=i+k-1;\n            if(arr1.empty()){\n                ct++;\n                continue;\n            }\n            auto it=upper_bound(arr1.begin(),arr1.end(),i)-arr1.begin();\n            auto it2=lower_bound(arr1.begin(),arr1.end(),lidx)-arr1.begin();\n            if(it2==arr1.size()&&it==arr1.size())ct++;\n            else if(it==it2&&arr1[it]>lidx)ct++;\n            // cout<<lidx<<\":\"<<endl;\n            // cout<<ct<<endl;\n            // else{\n            //     // if(it2==arr.size()||arr1[it2]>lidx)it2--;\n                // cout<<it<<\" \"<<it2<<endl;\n            //     // if(i<=arr1[it]&&lidx>=arr1[it2]);\n            //     // else ct++;\n            // }\n\n            \n        }\n        return ct;\n    }\n};",
    "submit_ts": "1720278678",
    "subm_id": "1311719590"
}