{
    "username": "da2zling-albattaninhi",
    "submission": "import java.util.*;\n\npublic class Solution {\n    public int minimumDistance(int[][] points) {\n        int res = Integer.MAX_VALUE;\n        TreeMap<Integer, Integer> m1 = new TreeMap<>();\n        TreeMap<Integer, Integer> m2 = new TreeMap<>();\n        for (int[] v : points) {\n            addPlus(m1, v);\n            addMinus(m2, v);\n        }\n        for (int[] v : points) {\n            removePlus(m1, v);\n            removeMinus(m2, v);\n//            remove(m, v);\n//            remove(m, v);\n            res = Math.min(res, Math.max(m1.lastKey() - m1.firstKey(), m2.lastKey() - m2.firstKey()));\n//            add(m, v);\n            addPlus(m1, v);\n            addMinus(m2, v);\n        }\n        return res;\n    }\n\n    private void remove(TreeMap<Integer, Integer> m, int[] v) {\n        remove(m, v[0] + v[1]);\n        remove(m, v[0] - v[1]);\n//        remove(m, -v[0] + v[1]);\n//        remove(m, -v[0] - v[1]);\n    }\n\n    private void remove(TreeMap<Integer, Integer> m, int v) {\n        Integer count = m.get(v);\n        if (count == 1) {\n            m.remove(v);\n        } else {\n            m.put(v, count - 1);\n        }\n    }\n\n    private void add(TreeMap<Integer, Integer> m, int[] v) {\n        m.merge(v[0] + v[1], 1, Integer::sum);\n        m.merge(v[0] - v[1], 1, Integer::sum);\n//        m.merge(-v[0] + v[1], 1, Integer::sum);\n//        m.merge(-v[0] - v[1], 1, Integer::sum);\n    }\n\n    private void addPlus(TreeMap<Integer, Integer> m, int[] v) {\n        m.merge(v[0] + v[1], 1, Integer::sum);\n    }\n\n    private void addMinus(TreeMap<Integer, Integer> m, int[] v) {\n        m.merge(v[0] - v[1], 1, Integer::sum);\n    }\n\n    private void removePlus(TreeMap<Integer, Integer> m, int[] v) {\n        int key = v[0] + v[1];\n        Integer count = m.get(key);\n        if (count == 1) {\n            m.remove(key);\n        } else {\n            m.put(key, count - 1);\n        }\n    }\n\n    private void removeMinus(TreeMap<Integer, Integer> m, int[] v) {\n        int key = v[0] - v[1];\n        Integer count = m.get(key);\n        if (count == 1) {\n            m.remove(key);\n        } else {\n            m.put(key, count - 1);\n        }\n    }\n}"
}