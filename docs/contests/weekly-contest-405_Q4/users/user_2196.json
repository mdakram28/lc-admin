{
    "username": "piyanshi_09",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\n\n\n\nclass Solution {\nint minCostToFormTarget(const string& target, const vector<string>& words, const vector<int>& costs) {\n    Trie trie;\n    int n = target.length();\n\n    for (size_t i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n\n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (!node->children.count(target[j])) break;\n\n            node = node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        return  minCostToFormTarget(target, words, costs);\n\n    }\n};",
    "submit_ts": "1720324417",
    "subm_id": "1312398970"
}