{
    "username": "friedall",
    "submission": "#include <iostream>\n#define ll long long\n\nusing namespace std;\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        ll k = sqrt(nums.size());\n        ll n = nums.size();\n        ll x, M = 1e9 + 7;\n        ll dp[50000][2][2], cur[2], s = 0, a, b;\n        for (int i=0; i<n; i+=k) {\n            for (int j=i; j<min(n, i+k); ++j) {\n                dp[j][0][0] = 0;\n                if (j != i) dp[j][0][1] = max(0LL, (ll)nums[j]), dp[j][1][0] = 0;\n                else dp[j][0][1] = dp[j][1][0] = 0;\n                dp[j][1][1] = max(0LL, (ll)nums[j]);\n                if (j != i) {\n                    dp[j][0][0] += max(0LL, max(dp[j-1][0][0], dp[j-1][0][1]));\n                    dp[j][1][0] += max(0LL, max(dp[j-1][1][0], dp[j-1][1][1]));\n                    dp[j][0][1] += max(0LL, dp[j-1][0][0]);\n                    dp[j][1][1] += max(0LL, dp[j-1][1][0]);\n                }\n            }\n        }\n        for (auto q : queries) {\n            x = q[0] / k;\n            nums[q[0]] = q[1];\n            for (int j=x*k; j<min(n, (x+1)*k); ++j) {\n                dp[j][0][0] = 0;\n                if (j != x*k) dp[j][0][1] = max(0LL, (ll)nums[j]), dp[j][1][0] = 0;\n                else dp[j][0][1] = dp[j][1][0] = 0;\n                dp[j][1][1] = max(0LL, (ll)nums[j]);\n                if (j != x*k) {\n                    dp[j][0][0] += max(0LL, max(dp[j-1][0][0], dp[j-1][0][1]));\n                    dp[j][1][0] += max(0LL, max(dp[j-1][1][0], dp[j-1][1][1]));\n                    dp[j][0][1] += max(0LL, dp[j-1][0][0]);\n                    dp[j][1][1] += max(0LL, dp[j-1][1][0]);\n                }\n            }\n            cur[0] = cur[1] = 0;\n            for (int i=0; i<(n+k-1)/k; ++i) {\n                a = max(dp[min(n-1, i*k+k-1)][0][0] + max(cur[0], cur[1]), dp[min(n-1, i*k+k-1)][1][0] + cur[0]);\n                b = max(dp[min(n-1, i*k+k-1)][0][1] + max(cur[0], cur[1]), dp[min(n-1, i*k+k-1)][1][1] + cur[0]);\n                //cout << dp[min(n-1, i+k-1)][0][1] + max(cur[0], cur[1]) << \"?\" << dp[min(n-1, i+k-1)][1][1] + cur[0] << endl;\n                //cout << a << \" \" << b << endl;\n                cur[0] = a, cur[1] = b;\n            }\n            //cout << max(cur[0], cur[1]) << endl;\n            s += max(cur[0], cur[1]);\n            s %= M;\n        }\n        return s;\n    }\n};",
    "submit_ts": 1716692307.0
}