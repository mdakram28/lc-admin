{
    "username": "JeffreyLC",
    "submission": "class SparseTable {\n public:\n    explicit SparseTable(const vector<int>& nums, const function<int(int, int)>& func, int init) : func_(func), init_(init) {\n        Build(nums);\n    }\n    \n    int Query(int lq, int rq) {\n        if (lq > rq) return init_;\n        int l = log2(rq - lq + 1);\n        return func_(sparse_table_[lq][l], sparse_table_[rq - (1 << l) + 1][l]);\n    }\n    \n private:\n    function<int(int, int)> func_;\n    int init_;\n    vector<vector<int>> sparse_table_;\n    \n    void Build(const vector<int>& nums) {\n        const int n = nums.size();\n        const int l = log2(n);\n        sparse_table_.resize(n);\n        for (int i = 0; i < n; ++i) {\n            sparse_table_[i].resize(l + 1, init_);\n        }\n        for (int i = 0; i < n; ++i) {\n            sparse_table_[i][0] = nums[i];\n        }\n        for (int j = 1; (1 << j) <= n; ++j) {\n            for (int i = 0; (i + (1 << j)) <= n; ++i) {\n                sparse_table_[i][j] = func_(sparse_table_[i][j - 1], sparse_table_[i + (1 << (j - 1))][j - 1]);\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SparseTable and_st = SparseTable(nums, [](int x, int y) -> int {\n            return (x & y);\n        }, INT_MAX);\n\n        const int n = nums.size();\n        int prev = 0, ans = INT_MAX;\n        for (int i = 0; i < n; ++i) {\n            prev = max(i, prev);\n            int res = and_st.Query(i, prev);\n            if (k >= res) {\n                ans = min(ans, k - res);\n                continue;\n            }\n            int j = prev;\n            while (j + 1 < n && (res & nums[j + 1]) > k) {\n                res &= nums[++j];\n            }\n            prev = j;\n            ans = min(ans, abs(k - res));\n            if (j + 1 < n) {\n                ans = min(ans, abs(k - (res & nums[j + 1])));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717296978.0
}