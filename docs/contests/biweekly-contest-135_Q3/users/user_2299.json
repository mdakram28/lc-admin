{
    "username": "vikky4321",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        unordered_map<int, vector<pair<int, int>>> diffGroups;\n        vector<int> maxValues;\n        int n = nums.size();\n        \n        for (int i = 0; i < n / 2; i++) {\n            int left = nums[i], right = nums[n - 1 - i];\n            int diff = abs(left - right);\n            int maxVal = max({left, right, k - left, k - right});\n            diffGroups[diff].push_back({i, maxVal});\n            maxValues.push_back(maxVal);\n        }\n        \n        sort(maxValues.begin(), maxValues.end());\n        \n        int minChangesNeeded = n;\n        \n        for (const auto& [diff, indices] : diffGroups) {\n            int changesForThisDiff = lower_bound(maxValues.begin(), maxValues.end(), diff) - maxValues.begin();\n            changesForThisDiff = changesForThisDiff * 2 + (n / 2 - changesForThisDiff);\n            \n            for (const auto& [index, maxVal] : indices) {\n                changesForThisDiff -= (maxVal >= diff) ? 1 : 2;\n            }\n            \n            minChangesNeeded = min(minChangesNeeded, changesForThisDiff);\n        }\n        \n        return minChangesNeeded;\n    }\n};",
    "submit_ts": "1721489712",
    "subm_id": "1327461456"
}