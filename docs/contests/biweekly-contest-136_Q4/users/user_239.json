{
    "username": "yuzining",
    "submission": "\n//c\n#ifndef _GLIBCXX_NO_ASSERT\n#include<cassert>\n#endif\n#include<cctype>\n#include<cerrno>\n#include <cfloat>\n#include <ciso646>\n#include <climits>\n#include <clocale>\n#include <cmath>\n#include <csetjmp>\n#include <csignal>\n#include <cstdarg>\n#include <cstddef>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <ctime>\n \n#if __cplusplus >= 201103L\n#include <ccomplex>\n#include <cfenv>\n#include <cinttypes>\n#include <cstdalign>\n#include <cstdbool>\n#include <cstdint>\n#include <ctgmath>\n#include <cwchar>\n#include <cwctype>\n#endif\n \n// C++\n#include <algorithm>\n#include <bitset>\n#include <complex>\n#include <deque>\n#include <exception>\n#include <fstream>\n#include <functional>\n#include <iomanip>\n#include <ios>\n#include <iosfwd>\n#include <iostream>\n#include <istream>\n#include <iterator>\n#include <limits>\n#include <list>\n#include <locale>\n#include <map>\n#include <memory>\n#include <new>\n#include <numeric>\n#include <ostream>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stack>\n#include <stdexcept>\n#include <streambuf>\n#include <string>\n#include <typeinfo>\n#include <utility>\n#include <valarray>\n#include <vector>\n \n#if __cplusplus >= 201103L\n#include <array>\n#include <atomic>\n#include <chrono>\n#include <condition_variable>\n#include <forward_list>\n#include <future>\n#include <initializer_list>\n#include <mutex>\n#include <random>\n#include <ratio>\n#include <regex>\n#include <scoped_allocator>\n#include <system_error>\n#include <thread>\n#include <tuple>\n#include <typeindex>\n#include <type_traits>\n#include <unordered_map>\n#include <unordered_set>\n#endif\n\nusing namespace std;\n\n\nclass Solution {\n    std::vector<std::vector<int>> e;\n    std::vector<int> dp[2], flag[2];\n    void dfs(int u, int f) {\n        for (const auto& v : e[u]) {\n            if (v == f) continue;\n            dfs(v, u);\n            int dis = dp[0][v] + (v % 2 == 1 ? 1 : 2);\n            if (dis >= dp[0][u]) {\n                std::swap(dp[0][u], dis);\n            }\n            if (dis >= dp[1][u]) {\n                std::swap(dp[1][u], dis);\n            }\n        }\n        \n    }\n    void dfs2(int u, int f) {\n        for (const auto& v : e[u]) {\n            if (v == f) continue;\n            int dis = u % 2 == 1 ? 1 : 2;\n            if (flag[0][u] || dp[0][u] - (v % 2 == 1 ? 1 : 2) != dp[0][v]) {\n                dis += dp[0][u];\n            } else {\n                dis += dp[1][u];\n            }\n            if (dis >= dp[0][v]) {\n                std::swap(dis, dp[0][v]);\n                flag[0][v] = 1;\n            }\n            if (dis >= dp[1][v]) {\n                std::swap(dis, dp[1][v]);\n            }\n            dfs2(v, u);\n        }\n    }\npublic:\n    vector<int> timeTaken(vector<vector<int>>& source_edges) {\n        int n = source_edges.size() + 1;\n        e.resize(n);\n        dp[0].resize(n, 0);\n        dp[1].resize(n, 0);\n        flag[0].resize(n, 0);\n        flag[1].resize(n, 0);\n        for (int i = 0; i < n - 1; i++) {\n            e[source_edges[i][0]].emplace_back(source_edges[i][1]);\n            e[source_edges[i][1]].emplace_back(source_edges[i][0]);\n        }\n        dfs(0, -1);\n        dfs2(0, -1);\n        std::vector<int> res(n);\n        for (int i = 0; i < n; i++) {\n            res[i] = std::max(dp[0][i], dp[1][i]);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722700070",
    "subm_id": "552278263"
}