{
    "username": "uzair-obaid",
    "submission": "#include <vector>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nconst int MOD = 1000000007;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        int maxInv = n * (n - 1) / 2;\n\n        vector<int> curr(maxInv + 1, 0), prev(maxInv + 1, 0);\n        prev[0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            fill(curr.begin(), curr.end(), 0);\n\n            vector<int> cumSum(maxInv + 1, 0);\n            cumSum[0] = prev[0];\n            for (int inv = 1; inv <= maxInv; ++inv) {\n                cumSum[inv] = (cumSum[inv - 1] + prev[inv]) % MOD;\n            }\n\n            for (int inv = 0; inv <= maxInv; ++inv) {\n                if (inv >= len) {\n                    curr[inv] = (cumSum[inv] - cumSum[inv - len] + MOD) % MOD;\n                } else {\n                    curr[inv] = cumSum[inv];\n                }\n            }\n\n            swap(curr, prev);\n        }\n\n        vector<int> invCnt(n + 1, -1);\n        for (const auto& r : reqs) {\n            int end = r[0];\n            int cnt = r[1];\n            invCnt[end + 1] = cnt;\n        }\n\n        fill(curr.begin(), curr.end(), 0);\n        prev[0] = 1;\n        for (int i = 1; i <= maxInv; ++i) {\n            prev[i] = 0;\n        }\n\n        for (int len = 1; len <= n; ++len) {\n            fill(curr.begin(), curr.end(), 0);\n\n            vector<int> cumSum(maxInv + 1, 0);\n            cumSum[0] = prev[0];\n            for (int inv = 1; inv <= maxInv; ++inv) {\n                cumSum[inv] = (cumSum[inv - 1] + prev[inv]) % MOD;\n            }\n\n            for (int inv = 0; inv <= maxInv; ++inv) {\n                if (inv >= len) {\n                    curr[inv] = (cumSum[inv] - cumSum[inv - len] + MOD) % MOD;\n                } else {\n                    curr[inv] = cumSum[inv];\n                }\n            }\n\n            swap(curr, prev);\n\n            if (invCnt[len] != -1) {\n                for (int inv = 0; inv <= maxInv; ++inv) {\n                    if (inv != invCnt[len]) {\n                        prev[inv] = 0;\n                    }\n                }\n            }\n        }\n\n        int res = 0;\n        for (int inv = 0; inv <= maxInv; ++inv) {\n            res = (res + prev[inv]) % MOD;\n        }\n\n        return res;\n    }\n};\n",
    "submit_ts": 1719069407.0
}