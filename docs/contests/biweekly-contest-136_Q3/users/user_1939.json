{
    "username": "practice-01",
    "submission": "// class Solution {\n// public:\n//     int minFlips(vector<vector<int>>& grid) \n//     {\n//         int n=grid.size(),m=grid[0].size();\n//         int count1=0,count2=0,numberOfOnes=0;\n//         for(int i=0;i<n;i++)\n//         {\n//             int start=0,end=m-1;\n//             int tempCount=0,flag=0;\n//             while(start<=end)\n//             {\n//                 if(start==end) \n//                 {\n//                     if(grid[i][start])\n//                     numberOfOnes++;\n//                     break;\n//                 }\n//                 if(grid[i][start]!=grid[i][end])\n//                 {\n//                    tempCount++;\n//                 }\n//                 else if(grid[i][start]==1)\n//                 {\n//                     numberOfOnes+=2;\n//                 }\n//                 start++;\n//                 end--;\n//             }\n//             count1+=tempCount;\n//         }    \n//         int mod=numberOfOnes%4;\n//         if(mod>2*count1)\n//         {\n//             count1+=min(mod-2*count1,mod);\n//         }\n//         number\n//         for(int i=0;i<m;i++)\n//         {\n//             int start=0,end=n-1;\n//             int tempCount=0;\n//             while(start<end)\n//             {\n//                 if(grid[start][i]!=grid[end][i])\n//                 {\n//                    tempCount++;\n//                 }\n//                 start++;\n//                 end--;\n//             }\n//             count2+=tempCount;\n//         } \n//         if(mod>2*count2)\n//         {\n//             count2+=min(mod-2*count2,mod);\n//         }\n//         return min(count1,count2);   \n//     }\n// };\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        \n        int cols = grid[0].size();\n        int rows = grid.size();\n        int minFlipsRequired = 0;\n        \n        // Check the middle cell if both rows and columns are odd\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (grid[rows / 2][cols / 2] == 1) {\n                minFlipsRequired += 1;\n            }\n        }\n\n        vector<int> shifts(3, 0);\n        \n        // Calculate flips needed for the middle row if rows are odd\n        if (rows % 2 == 1) {\n            int left = 0;\n            int right = cols - 1;\n            while (left < right) {\n                int sum = grid[rows / 2][left] + grid[rows / 2][right];\n                left += 1;\n                shifts[sum] += 1;\n                right -= 1;\n            }\n        }\n\n        // Calculate flips needed for the middle column if columns are odd\n        if (cols % 2 == 1) {\n            int top = 0;\n            int bottom = rows - 1;\n            while (top < bottom) {\n                int sum = grid[top][cols / 2] + grid[bottom][cols / 2];\n                bottom -= 1;\n                shifts[sum] += 1;\n                top += 1;\n            }\n        }\n\n        // Determine additional flips needed to balance shifts\n        if (shifts[2] % 2 == 1) {\n            if (shifts[1] > 0) {\n                minFlipsRequired += shifts[1];\n            } else {\n                minFlipsRequired += 2;\n            }\n        } else {\n            minFlipsRequired += shifts[1];\n        }\n\n        // Calculate flips needed for each 2x2 quadrant in the grid\n        int i = 0;\n        while (i < rows / 2) {\n            int j = 0;\n            while (j < cols / 2) {\n                int bottomRight = grid[rows - 1 - i][cols - 1 - j];\n                int bottomLeft = grid[rows - 1 - i][j];\n                int topLeft = grid[i][j];\n                int topRight = grid[i][cols - 1 - j];\n\n                int sum = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (sum != 0 && sum != 4) {\n                    minFlipsRequired += min(sum, 4 - sum);\n                }\n                j += 1;\n            }\n            i += 1;\n        }\n\n        return minFlipsRequired;\n    }\n};\n",
    "submit_ts": "1722699778",
    "subm_id": "1343222073"
}