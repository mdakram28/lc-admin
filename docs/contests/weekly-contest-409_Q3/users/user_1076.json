{
    "username": "Preditor",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int dp[] = new int[n], parent[] = new int[n], output[] = new int[queries.length],rank[] = new int[n], index = 0;\n        Arrays.fill(output,n);\n        for(int i=n-1;i>=0;i--) { dp[i] = n-i-1; parent[i] = i; rank[i] = 0; }\n        \n        int[] distances = new int[n];\n        for (int i = 1; i < n; ++i) {\n            distances[i] = distances[i - 1] + 1;\n        }\n\n        TreeSet<Integer> positions = new TreeSet<>();\n        for (int i = 0; i < n; ++i) {\n            positions.add(i);\n        }\n        for(int row[]:queries){\n            int a = parent(row[0],parent);\n            int b = parent(row[1],parent);\n            if(a!=b){\n                dp[a] = Math.min(dp[a],rank[row[0]]+1+dp[row[1]]+dp[row[0]]);\n                //System.out.println(a+\"   \"+b+\"   \"+rank[row[0]]+\"   \"+dp[row[1]]+\"   \"+dp[row[0]]);\n                output[index] = Math.min(output[index++],dp[a]);\n                rank[row[1]] = 1+rank[row[0]];\n                parent[b] = a;\n            }\n            else{\n                dp[a] = Math.min(dp[a],rank[row[0]]+1+dp[row[1]]);\n                output[index] = Math.min(output[index++],dp[a]);\n                rank[row[1]] = Math.min(rank[row[1]],1+rank[row[0]]);\n            }\n        }\n        int[] results = new int[queries.length];\n\n        for (int i = 0; i < queries.length; i++) {\n            int left = queries[i][0];\n            int right = queries[i][1];\n\n            List<Integer> toRemove = new ArrayList<>(positions.subSet(left + 1, right));\n            positions.removeAll(toRemove);\n\n            results[i] = positions.size() - 1;\n        }\n\n        return results;\n    }\n    public int parent(int a,int data[]){\n        if(data[a] == a) return a;\n        return parent(data[a],data);\n    }\n}",
    "submit_ts": "1722743958",
    "subm_id": "1343803622"
}