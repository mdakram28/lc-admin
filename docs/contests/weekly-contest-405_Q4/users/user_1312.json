{
    "username": "mutbuffereduint512_t",
    "submission": "#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#include <bits/stdc++.h>\nusing namespace std;\n\nusing ll = long long;\nusing u32 = unsigned int;\nusing u64 = unsigned long long;\n#ifdef ONLINE_JUDGE\nusing i128 = __int128;\nusing u128 = unsigned __int128;\nusing f128 = __float128;\n#endif\n\ntemplate <class T>\nconstexpr T infty = 0;\ntemplate <>\nconstexpr int infty<int> = 1'000'000'000;\ntemplate <>\nconstexpr ll infty<ll> = ll(infty<int>) * infty<int> * 2;\ntemplate <>\nconstexpr u32 infty<u32> = infty<int>;\ntemplate <>\nconstexpr u64 infty<u64> = infty<ll>;\n#ifdef ONLINE_JUDGE\ntemplate<>\nconstexpr i128 infty<i128> = i128(infty<ll>) * infty<ll>;\n#endif\ntemplate <>\nconstexpr double infty<double> = infty<ll>;\ntemplate <>\nconstexpr long double infty<long double> = infty<ll>;\n\nusing pi = pair<ll, ll>;\nusing vi = vector<ll>;\ntemplate <class T>\nusing vc = vector<T>;\ntemplate <class T>\nusing vvc = vector<vc<T>>;\ntemplate <class T>\nusing vvvc = vector<vvc<T>>;\ntemplate <class T>\nusing vvvvc = vector<vvvc<T>>;\ntemplate <class T>\nusing vvvvvc = vector<vvvvc<T>>;\ntemplate <class T>\nusing pq = priority_queue<T>;\ntemplate <class T>\nusing pqg = priority_queue<T, vector<T>, greater<T>>;\n\n#define vv(type, name, h, ...) \\\n\tvector<vector<type>> name(h, vector<type>(__VA_ARGS__))\n#define vvv(type, name, h, w, ...)   \\\n\tvector<vector<vector<type>>> name( \\\n\t\t\th, vector<vector<type>>(w, vector<type>(__VA_ARGS__)))\n#define vvvv(type, name, a, b, c, ...)       \\\n\tvector<vector<vector<vector<type>>>> name( \\\n\t\t\ta, vector<vector<vector<type>>>(       \\\n\t\t\t\t\t\t b, vector<vector<type>>(c, vector<type>(__VA_ARGS__))))\n\n// https://trap.jp/post/1224/\n#define FOR1(a) for (ll _ = 0; _ < ll(a); ++_)\n#define FOR2(i, a) for (ll i = 0; i < ll(a); ++i)\n#define FOR3(i, a, b) for (ll i = a; i < ll(b); ++i)\n#define FOR4(i, a, b, c) for (ll i = a; i < ll(b); i += (c))\n#define FOR1_R(a) for (ll i = (a)-1; i >= ll(0); --i)\n#define FOR2_R(i, a) for (ll i = (a)-1; i >= ll(0); --i)\n#define FOR3_R(i, a, b) for (ll i = (b)-1; i >= ll(a); --i)\n#define FORIN(x, A) for (auto&& x : A)\n#define overload4(a, b, c, d, e, ...) e\n#define overload3(a, b, c, d, ...) d\n#define FOR(...) overload4(__VA_ARGS__, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)\n#define FOR_R(...) overload3(__VA_ARGS__, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)\n\n#define FOR_subset(t, s) \\\n\tfor (ll t = (s); t >= 0; t = (t == 0 ? -1 : (t - 1) & (s)))\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define len(x) ll(x.size())\n#define elif else if\n\n#define eb emplace_back\n#define mp make_pair\n#define mt make_tuple\n#define fi first\n#define se second\n\n#define stoi stoll\n\nint popcnt(int x) { return __builtin_popcount(x); }\nint popcnt(u32 x) { return __builtin_popcount(x); }\nint popcnt(ll x) { return __builtin_popcountll(x); }\nint popcnt(u64 x) { return __builtin_popcountll(x); }\nint popcnt_mod_2(int x) { return __builtin_parity(x); }\nint popcnt_mod_2(u32 x) { return __builtin_parity(x); }\nint popcnt_mod_2(ll x) { return __builtin_parityll(x); }\nint popcnt_mod_2(u64 x) { return __builtin_parityll(x); }\n// (0, 1, 2, 3, 4) -> (-1, 0, 1, 1, 2)\nint topbit(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\nint topbit(u32 x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\nint topbit(ll x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\nint topbit(u64 x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\n// (0, 1, 2, 3, 4) -> (-1, 0, 1, 0, 2)\nint lowbit(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\nint lowbit(u32 x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\nint lowbit(ll x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\nint lowbit(u64 x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\n\ntemplate <typename T>\nT floor(T a, T b) {\n\treturn a / b - (a % b && (a ^ b) < 0);\n}\ntemplate <typename T>\nT ceil(T x, T y) {\n\treturn floor(x + y - 1, y);\n}\ntemplate <typename T>\nT bmod(T x, T y) {\n\treturn x - y * floor(x, y);\n}\ntemplate <typename T>\npair<T, T> divmod(T x, T y) {\n\tT q = floor(x, y);\n\treturn {q, x - q * y};\n}\n\ntemplate <typename T, typename U>\nT SUM(const vector<U> &A) {\n\tT sm = 0;\n\tfor (auto &&a: A) sm += a;\n\treturn sm;\n}\n\n#define MIN(v) *min_element(all(v))\n#define MAX(v) *max_element(all(v))\n#define LB(c, x) distance((c).begin(), lower_bound(all(c), (x)))\n#define UB(c, x) distance((c).begin(), upper_bound(all(c), (x)))\n#define UNIQUE(x) \\\n\tsort(all(x)), x.erase(unique(all(x)), x.end()), x.shrink_to_fit()\n\ntemplate <typename T>\nT POP(deque<T> &que) {\n\tT a = que.front();\n\tque.pop_front();\n\treturn a;\n}\ntemplate <typename T>\nT POP(pq<T> &que) {\n\tT a = que.top();\n\tque.pop();\n\treturn a;\n}\ntemplate <typename T>\nT POP(pqg<T> &que) {\n\tT a = que.top();\n\tque.pop();\n\treturn a;\n}\ntemplate <typename T>\nT POP(vc<T> &que) {\n\tT a = que.back();\n\tque.pop_back();\n\treturn a;\n}\n\ntemplate <typename F>\nll binary_search(F check, ll ok, ll ng, bool check_ok = true) {\n\tif (check_ok) assert(check(ok));\n\twhile (abs(ok - ng) > 1) {\n\t\tauto x = (ng + ok) / 2;\n\t\t(check(x) ? ok : ng) = x;\n\t}\n\treturn ok;\n}\ntemplate <typename F>\ndouble binary_search_real(F check, double ok, double ng, int iter = 100) {\n\tFOR(iter) {\n\t\tdouble x = (ok + ng) / 2;\n\t\t(check(x) ? ok : ng) = x;\n\t}\n\treturn (ok + ng) / 2;\n}\n\ntemplate <class T, class S>\ninline bool chmax(T &a, const S &b) {\n\treturn (a < b ? a = b, 1 : 0);\n}\ntemplate <class T, class S>\ninline bool chmin(T &a, const S &b) {\n\treturn (a > b ? a = b, 1 : 0);\n}\n\n// ? is -1\nvc<int> s_to_vi(const string &S, char first_char) {\n\tvc<int> A(S.size());\n\tFOR(i, S.size()) { A[i] = (S[i] != '?' ? S[i] - first_char : -1); }\n\treturn A;\n}\n\ntemplate <typename T, typename U>\nvector<T> cumsum(vector<U> &A, int off = 1) {\n\tint N = A.size();\n\tvector<T> B(N + 1);\n\tFOR(i, N) { B[i + 1] = B[i] + A[i]; }\n\tif (off == 0) B.erase(B.begin());\n\treturn B;\n}\n\n// stable sort\ntemplate <typename T>\nvector<int> argsort(const vector<T> &A) {\n\tvector<int> ids(len(A));\n\tiota(all(ids), 0);\n\tsort(all(ids),\n\t\t\t [&](int i, int j) { return (A[i] == A[j] ? i < j : A[i] < A[j]); });\n\treturn ids;\n}\n\n// A[I[0]], A[I[1]], ...\ntemplate <typename T>\nvc<T> rearrange(const vc<T> &A, const vc<int> &I) {\n\tvc<T> B(len(I));\n\tFOR(i, len(I)) B[i] = A[I[i]];\n\treturn B;\n}\n// based on yosupo's fastio\n#include <unistd.h>\n\nnamespace fastio {\n#define FASTIO\n// \u30af\u30e9\u30b9\u304c read(), print() \u3092\u6301\u3063\u3066\u3044\u308b\u304b\u3092\u5224\u5b9a\u3059\u308b\u30e1\u30bf\u95a2\u6570\nstruct has_write_impl {\n  template <class T>\n  static auto check(T &&x) -> decltype(x.write(), std::true_type{});\n \n  template <class T>\n  static auto check(...) -> std::false_type;\n};\n \ntemplate <class T>\nclass has_write : public decltype(has_write_impl::check<T>(std::declval<T>())) {\n};\n \nstruct has_read_impl {\n  template <class T>\n  static auto check(T &&x) -> decltype(x.read(), std::true_type{});\n \n  template <class T>\n  static auto check(...) -> std::false_type;\n};\n \ntemplate <class T>\nclass has_read : public decltype(has_read_impl::check<T>(std::declval<T>())) {};\n \nstruct Scanner {\n  FILE *fp;\n  char line[(1 << 15) + 1];\n  size_t st = 0, ed = 0;\n  void reread() {\n    memmove(line, line + st, ed - st);\n    ed -= st;\n    st = 0;\n    ed += fread(line + ed, 1, (1 << 15) - ed, fp);\n    line[ed] = '\\0';\n  }\n  bool succ() {\n    while (true) {\n      if (st == ed) {\n        reread();\n        if (st == ed) return false;\n      }\n      while (st != ed && isspace(line[st])) st++;\n      if (st != ed) break;\n    }\n    if (ed - st <= 50) {\n      bool sep = false;\n      for (size_t i = st; i < ed; i++) {\n        if (isspace(line[i])) {\n          sep = true;\n          break;\n        }\n      }\n      if (!sep) reread();\n    }\n    return true;\n  }\n  template <class T, enable_if_t<is_same<T, string>::value, int> = 0>\n  bool read_single(T &ref) {\n    if (!succ()) return false;\n    while (true) {\n      size_t sz = 0;\n      while (st + sz < ed && !isspace(line[st + sz])) sz++;\n      ref.append(line + st, sz);\n      st += sz;\n      if (!sz || st != ed) break;\n      reread();\n    }\n    return true;\n  }\n  template <class T, enable_if_t<is_integral<T>::value, int> = 0>\n  bool read_single(T &ref) {\n    if (!succ()) return false;\n    bool neg = false;\n    if (line[st] == '-') {\n      neg = true;\n      st++;\n    }\n    ref = T(0);\n    while (isdigit(line[st])) { ref = 10 * ref + (line[st++] & 0xf); }\n    if (neg) ref = -ref;\n    return true;\n  }\n  template <typename T,\n            typename enable_if<has_read<T>::value>::type * = nullptr>\n  inline bool read_single(T &x) {\n    x.read();\n    return true;\n  }\n  bool read_single(double &ref) {\n    string s;\n    if (!read_single(s)) return false;\n    ref = std::stod(s);\n    return true;\n  }\n  bool read_single(char &ref) {\n    string s;\n    if (!read_single(s) || s.size() != 1) return false;\n    ref = s[0];\n    return true;\n  }\n  template <class T>\n  bool read_single(vector<T> &ref) {\n    for (auto &d: ref) {\n      if (!read_single(d)) return false;\n    }\n    return true;\n  }\n  template <class T, class U>\n  bool read_single(pair<T, U> &p) {\n    return (read_single(p.first) && read_single(p.second));\n  }\n  template <size_t N = 0, typename T>\n  void read_single_tuple(T &t) {\n    if constexpr (N < std::tuple_size<T>::value) {\n      auto &x = std::get<N>(t);\n      read_single(x);\n      read_single_tuple<N + 1>(t);\n    }\n  }\n  template <class... T>\n  bool read_single(tuple<T...> &tpl) {\n    read_single_tuple(tpl);\n    return true;\n  }\n  void read() {}\n  template <class H, class... T>\n  void read(H &h, T &... t) {\n    bool f = read_single(h);\n    assert(f);\n    read(t...);\n  }\n  Scanner(FILE *fp) : fp(fp) {}\n};\n \nstruct Printer {\n  Printer(FILE *_fp) : fp(_fp) {}\n  ~Printer() { flush(); }\n \n  static constexpr size_t SIZE = 1 << 15;\n  FILE *fp;\n  char line[SIZE], small[50];\n  size_t pos = 0;\n  void flush() {\n    fwrite(line, 1, pos, fp);\n    pos = 0;\n  }\n  void write(const char val) {\n    if (pos == SIZE) flush();\n    line[pos++] = val;\n  }\n  template <class T, enable_if_t<is_integral<T>::value, int> = 0>\n  void write(T val) {\n    if (pos > (1 << 15) - 50) flush();\n    if (val == 0) {\n      write('0');\n      return;\n    }\n    if (val < 0) {\n      write('-');\n      val = -val; // todo min\n    }\n    size_t len = 0;\n    while (val) {\n      small[len++] = char(0x30 | (val % 10));\n      val /= 10;\n    }\n    for (size_t i = 0; i < len; i++) { line[pos + i] = small[len - 1 - i]; }\n    pos += len;\n  }\n  void write(const string s) {\n    for (char c: s) write(c);\n  }\n  void write(const char *s) {\n    size_t len = strlen(s);\n    for (size_t i = 0; i < len; i++) write(s[i]);\n  }\n  void write(const double x) {\n    ostringstream oss;\n    oss << fixed << setprecision(15) << x;\n    string s = oss.str();\n    write(s);\n  }\n  void write(const long double x) {\n    ostringstream oss;\n    oss << fixed << setprecision(15) << x;\n    string s = oss.str();\n    write(s);\n  }\n  template <typename T,\n            typename enable_if<has_write<T>::value>::type * = nullptr>\n  inline void write(T x) {\n    x.write();\n  }\n  template <class T>\n  void write(const vector<T> val) {\n    auto n = val.size();\n    for (size_t i = 0; i < n; i++) {\n      if (i) write(' ');\n      write(val[i]);\n    }\n  }\n  template <class T, class U>\n  void write(const pair<T, U> val) {\n    write(val.first);\n    write(' ');\n    write(val.second);\n  }\n  template <size_t N = 0, typename T>\n  void write_tuple(const T t) {\n    if constexpr (N < std::tuple_size<T>::value) {\n      if constexpr (N > 0) { write(' '); }\n      const auto x = std::get<N>(t);\n      write(x);\n      write_tuple<N + 1>(t);\n    }\n  }\n  template <class... T>\n  bool write(tuple<T...> tpl) {\n    write_tuple(tpl);\n    return true;\n  }\n  template <class T, size_t S>\n  void write(const array<T, S> val) {\n    auto n = val.size();\n    for (size_t i = 0; i < n; i++) {\n      if (i) write(' ');\n      write(val[i]);\n    }\n  }\n\t#ifdef ONLINE_JUDGE\n  void write(i128 val) {\n\t#else\n  void write(ll val) {\n\t#endif\n    string s;\n    bool negative = 0;\n    if (val < 0) {\n      negative = 1;\n      val = -val;\n    }\n    while (val) {\n      s += '0' + int(val % 10);\n      val /= 10;\n    }\n    if (negative) s += \"-\";\n    reverse(all(s));\n    if (len(s) == 0) s = \"0\";\n    write(s);\n  }\n};\nScanner scanner = Scanner(stdin);\nPrinter printer = Printer(stdout);\nvoid flush() { printer.flush(); }\nvoid print() { printer.write('\\n'); }\ntemplate <class Head, class... Tail>\nvoid print(Head &&head, Tail &&... tail) {\n  printer.write(head);\n  if (sizeof...(Tail)) printer.write(' ');\n  print(forward<Tail>(tail)...);\n}\n \nvoid read() {}\ntemplate <class Head, class... Tail>\nvoid read(Head &head, Tail &... tail) {\n  scanner.read(head);\n  read(tail...);\n}\n} // namespace fastio\nusing fastio::print;\nusing fastio::flush;\nusing fastio::read;\n\n#define INT(...)   \\\n\tint __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n#define LL(...)   \\\n\tll __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n#define U32(...)   \\\n\tu32 __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n#define U64(...)   \\\n\tu64 __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n#define STR(...)      \\\n\tstring __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n#define CHAR(...)   \\\n\tchar __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n#define DBL(...)      \\\n\tdouble __VA_ARGS__; \\\n\tread(__VA_ARGS__)\n\n#define VEC(type, name, size) \\\n\tvector<type> name(size);    \\\n\tread(name)\n#define VV(type, name, h, w)                     \\\n\tvector<vector<type>> name(h, vector<type>(w)); \\\n\tread(name)\n\nvoid YES(bool t = 1) { print(t ? \"YES\" : \"NO\"); }\nvoid NO(bool t = 1) { YES(!t); }\nvoid Yes(bool t = 1) { print(t ? \"Yes\" : \"No\"); }\nvoid No(bool t = 1) { Yes(!t); }\nvoid yes(bool t = 1) { print(t ? \"yes\" : \"no\"); }\nvoid no(bool t = 1) { yes(!t); }\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n\n#define umap unordered_map\nusing pii = pair<int, int>;\nstruct TNode{\n  umap<char, TNode*> link;\n  vc<pii> en;\n};\n\nclass T {\npublic:\n    TNode* tr;\n    T() { tr = new TNode(); }\n    void sert(string word, int dx, int ts) {\n        TNode* node = tr;\n        for (char c : word) {\n            if (!node->link.count(c)) {\n                node->link[c] = new TNode();\n            }\n            node = node->link[c];\n        }\n        node->en.eb(dx, ts);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        const int N = size(target);\n        const ll INF = infty<ll>;\n        vi DP(N + 1, INF);\n        DP.at(0) = 0;\n\n        T t;\n        FOR(i, len(words)){\n          t.sert(words[i], i, costs[i]);\n        }\n\n        FOR(i, N){\n          if(DP[i] == INF) continue;\n\n          TNode* temp = t.tr;\n          FOR(j, i, N){\n            if(!temp->link.count(target[j])) break;\n            temp = temp->link[target[j]];\n            FORIN(pr, temp->en){\n              const int el = len(words[pr.fi]);\n              if(i + el <= N){\n                chmin(DP[i + el], DP[i] + pr.se);\n              }\n            }\n          }\n        }\n        ll ret = DP[N] == INF ? -1 : DP[N];\n        return ret;\n    }\n};",
    "submit_ts": "1720324148",
    "subm_id": "1312392706"
}