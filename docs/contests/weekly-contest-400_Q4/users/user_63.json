{
    "username": "user9218i",
    "submission": "class Solution {\npublic:\n    // reference https://www.geeksforgeeks.org/bitwise-and-of-sub-array-closest-to-k/\n    static const int MAX_INT = 2147483647;\n\n    class SegmentTree {\n    public:\n        SegmentTree(const std::vector<int>& nums) : size(nums.size()) {\n            tree.assign(4 * size + 1, 0);\n            build(nums, 0, 0, size - 1);\n        }\n\n        void build(const std::vector<int>& nums, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = nums[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(nums, 2 * node + 1, start, mid);\n                build(nums, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n            }\n        }\n\n        int query(int left, int right) {\n            return query_helper(0, 0, size - 1, left, right);\n        }\n\n        int query_helper(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return MAX_INT;\n            }\n            if (left <= start && end <= right) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int left_result = query_helper(2 * node + 1, start, mid, left, right);\n            int right_result = query_helper(2 * node + 2, mid + 1, end, left, right);\n            return left_result & right_result;\n        }\n\n    private:\n        int size;\n        std::vector<int> tree;\n    };\n\n    int minimumDifference(const std::vector<int>& nums, int k) {\n        SegmentTree segment_tree(nums);\n        int min_difference = MAX_INT;\n        for (int i = 0; i < nums.size(); ++i) {\n            int left = i - 1, right = nums.size() - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (segment_tree.query(i, mid) >= k) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != i - 1) {\n                min_difference = std::min(min_difference, std::abs(segment_tree.query(i, left) - k));\n            }\n            min_difference = std::min(min_difference, std::abs(k - segment_tree.query(i, right)));\n        }\n        return min_difference;\n    }\n};",
    "submit_ts": "1717296968",
    "subm_id": "1274725356"
}