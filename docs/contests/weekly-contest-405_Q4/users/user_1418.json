{
    "username": "kill__api",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> child;\n        vector<int> index;\n    };\n\n    void insert(TrieNode* root, const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->child.find(c) == node->child.end()) {\n                node->child[c] = new TrieNode();\n            }\n            node = node->child[c];\n        }\n        node->index.push_back(index);\n    }\n\n    int cost(string &target, vector<string> &words,\n                            vector<int> &costs) {\n        int n = target.size();\n        int m = words.size();\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < m; ++i) {\n            insert(root, words[i], i);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX)\n                continue;\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->child.find(target[j]) == node->child.end())\n                    break;\n                node = node->child[target[j]];\n                for (int index : node->index) {\n                    if (dp[i] != INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\n    \n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        return cost(target, words, costs);\n    }\n};",
    "submit_ts": "1720323848",
    "subm_id": "1312385484"
}