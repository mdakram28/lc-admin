{
    "username": "lovqq",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int ans = INT_MAX;\n        int n = points.size();\n        vector<vector<pair<long long, int> >> p(4, vector<pair<long long, int>>(n, {0,0}));\n        for (int i = 0; i < n; i++) {\n            p[0][i].first = points[i][0] + points[i][1];\n            p[1][i].first = -points[i][0] + points[i][1];\n            p[2][i].first = points[i][0] - points[i][1];\n            p[3][i].first = -points[i][0] - points[i][1];\n\n            p[0][i].second = p[1][i].second = p[2][i].second = p[3][i].second = i;\n        }\n        for (int i = 0; i < 4; i++) sort(p[i].begin(), p[i].end());\n\n        int mx = -1;\n        int id1 = 0, id2 = 0;\n        for (int i = 0; i < 4; i++) {\n            // mx=max(mx,p[i][n-1].first-p[i][0].first);\n            if (p[i][n - 1].first - p[i][0].first > mx) {\n                mx = p[i][n - 1].first - p[i][0].first;\n                id1 = p[i][n - 1].second, id2 = p[i][0].second;\n            }\n        }\n\n\n\n\n        vector<vector<long long>> p1(4, vector<long long>());\n\n\n        for (int i = 0; i < n; i++) {\n            if (i == id1) continue;\n            p1[0].push_back(points[i][0] + points[i][1]);\n            p1[1].push_back(-points[i][0] + points[i][1]);\n            p1[2].push_back(points[i][0] - points[i][1]);\n            p1[3].push_back(-points[i][0] - points[i][1]);\n        }\n        for (int i = 0; i < 4; i++) sort(p1[i].begin(), p1[i].end());\n\n\n        mx = -1;\n        //int id1=0,id2=0;\n        for (int i = 0; i < 4; i++) {\n\n            //mx=max(mx,p1[i][n-2].first-p1[i][0].first);\n            if (p1[i][n - 2] - p1[i][0] > mx) {\n                mx = p1[i][n - 2] - p1[i][0];\n            }\n        }\n        ans = min(ans, mx);\n\n\n\n\n        vector<vector<long long>> p2(4, vector<long long>());\n\n\n        for (int i = 0; i < n; i++) {\n            if (i == id2) continue;\n            p2[0].push_back(points[i][0] + points[i][1]);\n            p2[1].push_back(-points[i][0] + points[i][1]);\n\n            p2[2].push_back(points[i][0] - points[i][1]);\n\n            p2[3].push_back(-points[i][0] - points[i][1]);\n\n        }\n        for (int i = 0; i < 4; i++) sort(p2[i].begin(), p2[i].end());\n\n\n        mx = -1;\n        //int id1=0,id2=0;\n        for (int i = 0; i < 4; i++) {\n\n            //mx=max(mx,p2[i][n-2].first-p[i][0].first);\n            if (p2[i][n - 2] - p2[i][0] > mx) {\n                mx = p2[i][n - 2] - p2[i][0];\n            }\n        }\n        ans = min(ans, mx);\n\n        return ans;\n    }\n};"
}