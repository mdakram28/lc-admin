{
    "username": "TimmyChiang",
    "submission": "class Solution {\npublic:\n    static const int MAXN = 2e9;\n    struct TrieNode {\n        TrieNode* vis[26] = {nullptr};\n        int cost[26] = {MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN, MAXN};\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* cur = root;\n            for (int j = 0; j < words[i].length(); ++j) {\n                if (!cur -> vis[words[i][j] - 'a'])\n                    cur -> vis[words[i][j] - 'a'] = new TrieNode();\n                if (j == words[i].length() - 1)\n                    cur -> cost[words[i][j] - 'a'] = min(cur -> cost[words[i][j] - 'a'], costs[i]);\n                cur = cur -> vis[words[i][j] - 'a'];\n            }\n        }\n        long long dp[50000];\n        fill(dp, dp+target.length(), MAXN);\n        if (root -> vis[target[0] - 'a'] == 0)\n            return -1;\n        // target[0]\n        TrieNode* cur = root;\n        int idx = 0;\n        while(cur && idx < target.length()) {\n            if (cur -> cost[target[idx] - 'a'] != MAXN)\n                dp[idx] = cur -> cost[target[idx] - 'a'];\n            cur = cur -> vis[target[idx] - 'a'];\n            ++idx;\n        }\n        // for (int i = 0; i < target.length(); ++i)   cout << dp[i] << \" \";   cout << \"\\n\";\n        for (int i = 0; i < target.length(); ++i) {\n            if (dp[i] == MAXN)\n                continue;\n            idx = i+1;\n            cur = root;\n            while(cur && idx < target.length()) {\n                // for (int j = 0; j < 26; ++j)    cout << cur -> vis[j] << \" \";  cout << \"\\n\";\n                // for (int j = 0; j < 26; ++j)    cout << cur -> cost[j] << \" \";  cout << \"\\n\";\n                if (cur -> cost[target[idx] - 'a'] != MAXN)\n                    dp[idx] = min(dp[idx], dp[i] + cur -> cost[target[idx] - 'a']);\n                cur = cur -> vis[target[idx] - 'a'];\n                ++idx;\n            }\n        }\n        // for (int i = 0; i < target.length(); ++i)   cout << dp[i] << \" \";\n        if (dp[target.length() - 1] == MAXN)\n            return -1;\n        return dp[target.length() - 1];\n    }\n};",
    "submit_ts": "1720323861",
    "subm_id": "1312385800"
}