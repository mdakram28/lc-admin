{
    "username": "1461_prakhar",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        const int MOD = 1e9 + 7;\n        \n        // Mapping requirements\n        unordered_map<int, int> inversionRequirements;\n        for (auto& req : reqs) {\n            inversionRequirements[req[0] + 1] = req[1];\n        }\n\n        const int maxInversions = 400;\n        vector<vector<long>> dp(n + 1, vector<long>(maxInversions + 1, 0));\n        dp[0][0] = 1;\n\n        // Fill the DP table\n        for (int length = 1; length <= n; ++length) {\n            for (int inversions = 0; inversions <= maxInversions; ++inversions) {\n                for (int insertPos = 0; insertPos < length; ++insertPos) {\n                    int previousInversions = inversions - insertPos;\n                    if (previousInversions >= 0) {\n                        dp[length][inversions] = (dp[length][inversions] + dp[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n            // Check and apply inversion requirements\n            if (inversionRequirements.count(length)) {\n                int requiredInversions = inversionRequirements[length];\n                for (int inversions = 0; inversions <= maxInversions; ++inversions) {\n                    if (inversions != requiredInversions) {\n                        dp[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n\n        // Count all valid permutations\n        long validPermutationCount = 0;\n        for (long count : dp[n]) {\n            validPermutationCount = (validPermutationCount + count) % MOD;\n        }\n\n        return validPermutationCount;\n    }\n};",
    "submit_ts": 1719071800.0
}