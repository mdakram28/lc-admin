{
    "username": "fastleopard",
    "submission": "class Solution {\npublic:\n    \nclass SegmentTree {\npublic:\n    SegmentTree(const std::vector<int>& data) {\n        n = data.size();\n        tree.resize(4 * n, 0);\n        lazy.resize(4 * n, INT_MIN); // INT_MIN indicates no update pending\n        build(data, 0, 0, n - 1);\n    }\n\n    void updateRange(int l, int r, int value) {\n        updateRange(0, 0, n - 1, l, r, value);\n    }\n\n    int queryRange(int l, int r) {\n        return queryRange(0, 0, n - 1, l, r);\n    }\n\nprivate:\n    int n;\n    std::vector<int> tree, lazy;\n\n    void build(const std::vector<int>& data, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = data[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(data, 2 * node + 1, start, mid);\n            build(data, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void propagate(int node, int start, int end) {\n        if (lazy[node] != INT_MIN) {\n            tree[node] = (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2 * node + 1] = lazy[node];\n                lazy[2 * node + 2] = lazy[node];\n            }\n            lazy[node] = INT_MIN;\n        }\n    }\n\n    void updateRange(int node, int start, int end, int l, int r, int value) {\n        propagate(node, start, end);\n\n        if (start > end || start > r || end < l) {\n            return;\n        }\n\n        if (start >= l && end <= r) {\n            lazy[node] = value;\n            propagate(node, start, end);\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        updateRange(2 * node + 1, start, mid, l, r, value);\n        updateRange(2 * node + 2, mid + 1, end, l, r, value);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int queryRange(int node, int start, int end, int l, int r) {\n        propagate(node, start, end);\n\n        if (start > end || start > r || end < l) {\n            return 0;\n        }\n\n        if (start >= l && end <= r) {\n            return tree[node];\n        }\n\n        int mid = (start + end) / 2;\n        int leftQuery = queryRange(2 * node + 1, start, mid, l, r);\n        int rightQuery = queryRange(2 * node + 2, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n};\n    \n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // need to know the best distance to a given node from 0.\n        // and the best distance from a given node to last node.\n//         vector<int> to(n, 0);\n//         vector<int> from(n, 0);\n//         for(int i = 0; i<n; ++i) {\n//             to[i] = i;\n//             from[i] = n-1-i;\n//         }\n        \n//         vector<int> res;\n//         int min_dist = n-1;\n//         for(const auto &q : queries) {\n//             int start = q[0];\n//             int end = q[1];\n            \n//             // Need to update 'to' for end and 'from' for start.\n//             from[start] = min(from[start], from[end] + 1);\n//             to[end] = min(to[end], to[start] + 1);\n            \n//             min_dist = min(min_dist, from[start] + to[start]);\n//             min_dist = min(min_dist, from[end] + to[end]);\n            \n//             res.push_back(min_dist);\n//         }\n        \n//         return res;\n        \n        vector<int> data(n, 1);\n        data[n-1] = 0;\n        SegmentTree s(data);\n        \n        vector<int> res;\n        for(const auto &q : queries) {\n            int start = q[0];\n            int end = q[1];\n            //int sum = s.queryRange(start+1, end-1);\n            //cout<<\"sum: \"<<sum<<\"start: \"<<start<<\", end: \"<<end<<endl;\n            s.updateRange(start+1, end-1, 0);\n            \n            int ans = s.queryRange(0, n-1);\n            // cout<<\"ans: \"<<ans<< \", sum: \"<<sum<<\", start: \"<<start<<\", end: \"<<end<<endl;\n            res.push_back(ans);\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1722741443",
    "subm_id": "1343745140"
}