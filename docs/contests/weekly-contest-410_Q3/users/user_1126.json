{
    "username": "Grind_Like_GM",
    "submission": "impl Solution {\n    pub fn count_of_pairs(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let mut memoization_table = vec![vec![vec![-1; 51]; 51]; n];\n        let result_count = Self::calculate_pairs(0, 0, nums[0], &nums, &mut memoization_table);\n        result_count\n    }\n\n    fn calculate_pairs(current_index: usize, current_non_decreasing: i32, current_non_increasing: i32, input_array: &Vec<i32>, memoization: &mut Vec<Vec<Vec<i32>>>) -> i32 {\n        if current_index >= input_array.len() {\n            return 1;\n        }\n\n        let modulo_value = 1_000_000_007;\n\n        if memoization[current_index][current_non_decreasing as usize][current_non_increasing as usize] != -1 {\n            return memoization[current_index][current_non_decreasing as usize][current_non_increasing as usize];\n        }\n\n        let mut total_pairs_count: i32 = 0;\n\n        for non_decreasing_value in current_non_decreasing..=input_array[current_index] {\n            for non_increasing_value in (0..=current_non_increasing).rev() {\n                if non_decreasing_value + non_increasing_value == input_array[current_index] {\n                    total_pairs_count += Self::calculate_pairs(current_index + 1, non_decreasing_value, non_increasing_value, input_array, memoization);\n                    total_pairs_count %= modulo_value;\n                }\n            }\n        }\n\n        memoization[current_index][current_non_decreasing as usize][current_non_increasing as usize] = total_pairs_count;\n\n        total_pairs_count\n    }\n}\n\n",
    "submit_ts": "1723345243",
    "subm_id": "1351551627"
}