{
    "username": "kisuke11",
    "submission": "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n    \n    def update(self, index, delta):\n        index += 1  \n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n    \n    def query(self, index):\n        index += 1  \n        result = 0\n        while index > 0:\n            result += self.tree[index]\n            index -= index & -index\n        return result\n    \n    def range_query(self, left, right):\n        return self.query(right) - self.query(left - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums, queries):\n        def is_peak(i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        n = len(nums)\n        fenwick_tree = FenwickTree(n)\n\n        for i in range(1, n - 1):\n            if is_peak(i):\n                fenwick_tree.update(i, 1)\n\n        result = []\n        for query in queries:\n            if query[0] == 1:\n                _, li, ri = query\n                if li == ri:\n                    result.append(0)\n                else:\n                    result.append(fenwick_tree.range_query(li + 1, ri - 1))\n            elif query[0] == 2:\n                _, indexi, vali = query\n                for i in range(indexi - 1, indexi + 2):\n                    if 1 <= i <= n - 2:\n                        if is_peak(i):\n                            fenwick_tree.update(i, -1)\n                nums[indexi] = vali\n                for i in range(indexi - 1, indexi + 2):\n                    if 1 <= i <= n - 2:\n                        if is_peak(i):\n                            fenwick_tree.update(i, 1)\n\n        return result\n\n",
    "submit_ts": 1718506194.0
}