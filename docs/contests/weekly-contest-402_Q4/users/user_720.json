{
    "username": "axfan",
    "submission": "import math\nfrom typing import List\nfrom collections import defaultdict, deque, Counter\nfrom typing import List\nfrom sortedcontainers import SortedList\nfrom bisect import bisect_left, bisect_right\nfrom functools import lru_cache\nimport sys\nsys.setrecursionlimit(10**7)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \"\"\"\n\n        :param nums:\n        :param queries:\n        :return:\n        \"\"\"\n        ret = []\n        p1 = SortedList()\n        for i in range(1, len(nums)-1):\n            if nums[i-1] < nums[i] > nums[i+1]:\n                p1.add(i)\n        for i in queries:\n            if i[0] == 1:\n                idx1 = bisect_right(p1, i[1])\n                idx2 = bisect_left(p1, i[2])\n                ret1 = max(0, idx2-idx1)\n                ret.append(ret1)\n            else:\n                idx, val = i[1], i[2]\n                ori = nums[idx]\n                nums[idx] = val\n                if idx > 0 and idx < len(nums)-1:\n                    if nums[idx-1] < nums[idx] > nums[idx+1]:\n                        if idx not in p1:\n                            p1.add(idx)\n                    else:\n                        if idx in p1:\n                            p1.remove(idx)\n                if idx > 0:\n                    if idx-1 in p1 and val >= nums[idx-1]:\n                        p1.remove(idx-1)\n                    if idx -1 > 0 and idx -1 < len(nums)-1:\n                        if nums[idx-2] < nums[idx-1] > nums[idx]:\n                            if idx-1 not in p1:\n                                p1.add(idx-1)\n                if idx < len(nums) - 1:\n                    if idx+1 in p1 and val >= nums[idx+1]:\n                        p1.remove(idx+1)\n                    if idx + 1 > 0 and idx + 1 < len(nums) - 1:\n                        if nums[idx] < nums[idx+1] > nums[idx+2]:\n                            if idx+1 not in p1:\n                                p1.add(idx+1)\n        return ret\n\na = Solution()\nprint(a.countOfPeaks([4,6,9,3,5], [[2,1,9],[2,1,6],[2,2,4],[1,1,3]])) # 0\nprint(a.countOfPeaks(nums = [3,1,4,2,5], queries = [[2,3,4],[1,0,4]])) # 0\nprint(a.countOfPeaks([8,10,10,9,10], [[2,0,1],[2,2,7],[1,0,2]])) # 1\nprint(a.countOfPeaks([8,5,9,3,5], [[1,2,4],[1,0,1],[2,2,4]])) # 0 0\nprint(a.countOfPeaks(nums = [4,1,4,2,1,5], queries = [[2,2,4],[1,0,2],[1,0,4]])) # 0 1\n\n\n",
    "submit_ts": 1718507118.0
}