{
    "username": "HarryYCChou",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        // diff count\n        unordered_map<int, int> count;\n\n        int n = nums.size();\n        for (int i = 0; i < n / 2; i++) {\n            count[abs(nums[i]-nums[n - i - 1])]++;\n        }\n\n        vector<pair<int, int>> sorted;\n        for (const auto& num : count) {\n            sorted.push_back({num.second, num.first});\n        }\n\n        sort(sorted.begin(), sorted.end());\n\n        int target = -1;\n        int ret = INT_MAX;\n\n        for (int i = sorted.size()-1; i >= 0; i--) {\n            if (target == sorted[i].second) continue;\n            target = sorted[i].second;\n\n            int new_ret = 0;\n            for (int i = 0; i < n / 2; i++) {\n                if (abs(nums[i]-nums[n - i - 1]) != target) {\n                    int s = min(nums[i], nums[n - i - 1]);\n                    int l = max(nums[i], nums[n - i - 1]);\n\n                    if ((s + target <= k) || (l-target >= 0)) new_ret++;\n                    else new_ret += 2;\n                }\n            }\n            if (new_ret > ret) break;\n            ret = min(ret, new_ret);\n        }\n        \n\n        return (ret == INT_MAX) ? 0 : ret;\n    }\n};",
    "submit_ts": "1721489383",
    "subm_id": "1327451635"
}