{
    "username": "Diptiranjan",
    "submission": "int IO = []{\n    ios::sync_with_stdio(false); cin.tie(nullptr); return 0;\n}();\nclass Solution {\npublic:\n    long long solve(vector<vector<int>>& grid, int rows, int cols, int k) {\n        long long maxResult = LLONG_MIN;\n        vector<bool> rowUsed(rows, true);\n        vector<bool> colUsed(cols, true);\n        return backtrack(grid, rows, cols, k, rowUsed, colUsed, 0, maxResult);\n    }\n\nprivate:\n    long long backtrack(vector<vector<int>>& grid, int rows, int cols, int k, \n                        vector<bool>& rowUsed, vector<bool>& colUsed, long long currentSum, long long& maxResult) {\n        if (k == 0) {\n            maxResult = max(maxResult, currentSum);\n            return maxResult;\n        }\n\n        for (int i = 0; i < rows; i++) {\n            if (!rowUsed[i]) continue;\n            for (int j = 0; j < cols; j++) {\n                if (!colUsed[j]) continue;\n\n                long long estimatedMax = currentSum + grid[i][j] + (k - 1) * maxGridValue; \n                if (estimatedMax <= maxResult) continue;\n                \n                long long newSum = currentSum + grid[i][j];\n                rowUsed[i] = false;\n                colUsed[j] = false;\n                backtrack(grid, rows, cols, k - 1, rowUsed, colUsed, newSum, maxResult);\n                rowUsed[i] = true;\n                colUsed[j] = true;\n            }\n        }\n\n        return maxResult;\n    }\n\n    long long maxGridValue;\n    \npublic:\n    long long maximumValueSum(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int k = 3;\n\n        maxGridValue = 0;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                maxGridValue = max(maxGridValue, (long long)grid[i][j]);\n            }\n        }\n\n        return solve(grid, rows, cols, k);\n    }\n};\n",
    "submit_ts": "1723909448",
    "subm_id": "1359192913"
}