{
    "username": "Abhishek Choudhary",
    "submission": "class FenwickTree:\n    def __init__(self, x):\n        self.bit = x\n        for i in range(len(x)):\n            j = i | (i + 1)\n            if j < len(x):\n                x[j] += x[i]\n \n    def update(self, idx, x):\n        while idx < len(self.bit):\n            self.bit[idx] += x\n            idx |= idx + 1\n \n    def query(self, end):\n        x = 0\n        while end:\n            x += self.bit[end - 1]\n            end &= end - 1\n        return x\n\nclass LinearAdd:\n    def __init__(self, n):\n        self.n = n\n        self.t0, self.t1, self.t2 = [0] * (n + 1), [0] * (n + 1), [0] * (n + 1)\n    \n    def f(self, i, x):\n        n = self.n\n        j = i\n        while j <= n:\n            z = j - i\n            self.t2[j] += x\n            self.t1[j] += (2 * z + 1) * x\n            self.t0[j] += (z * z + z) * x\n            j += -j & j\n\n    def s(self, i):\n        acc, j = 0, i\n        while j > 0:\n            k = i - j + 1\n            acc += self.t2[j] * k * k + self.t1[j] * k + self.t0[j]\n            j &= j - 1\n        return acc // 2\n    \n    def add(self, l, r):\n        self.f(l + 1, 1)\n        self.f(r + 2, l - r - 2)\n        self.f(r + 3, r - l + 1)\n        \n    def ddel(self, l, r):\n        self.f(l + 1, -1)\n        self.f(r + 2, -(l - r - 2))\n        self.f(r + 3, -(r - l + 1))\n        \n    def get(self, i):\n        return self.s(i + 1) - self.s(i)\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        j = n - 1\n        pf = [[0, 0] for _ in range(n + 1)]\n        for i in range(n):\n            pf[i + 1][0] = pf[i][0] + int(s[i] == '0')\n            pf[i + 1][1] = pf[i][1] + int(s[i] == '1')\n        adds = [[] for _ in range(n)]\n        dels = [[] for _ in range(n)]\n        addrange = [[] for _ in range(n)]\n        delrange = [[] for _ in range(n)]\n        for i in range(n - 1, -1, -1):\n            while j > i and min(pf[j + 1][1] - pf[i][1], pf[j + 1][0] - pf[i][0]) > k:\n                j -= 1\n            addrange[0].append((i, j))\n            delrange[i].append((i, j))\n            adds[0].append((j + 1, j - i + 1))\n            dels[i].append((j + 1, j - i + 1))\n        qg = [[] for _ in range(n)]\n        res = [0] * len(queries)\n        for i in range(len(queries)):\n            qg[queries[i][0]].append((queries[i][1], i))\n        curr = FenwickTree([0] * (n + 1))\n        scurr = LinearAdd(n)\n        for i in range(n):\n            for l, val in adds[i]:\n                curr.update(l, val)\n            for l, r in addrange[i]:\n                scurr.add(l, r)\n            for l, pos in qg[i]:\n                res[pos] = curr.query(l + 1) + scurr.get(l)\n            for l, r in delrange[i]:\n                scurr.ddel(l, r)\n            for l, val in dels[i]:\n                curr.update(l, -val)\n        return res",
    "submit_ts": "1723953219",
    "subm_id": "1359815463"
}