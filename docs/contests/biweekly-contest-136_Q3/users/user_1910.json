{
    "username": "a___s",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int calculateCount(const vector<vector<int>>& grid, int m, int n) {\n        int count = 0;\n        \n        for (int i = 0; i < m / 2; ++i) {\n            for (int j = 0; j < n / 2; ++j) {\n                int temp  =  grid[i][j] + grid[m - 1 - i][j] +  grid[i][n - 1 - j] + grid[m - 1 - i][n - 1 - j];\n                if (temp != 0 && temp != 4) {\n                    count += min(temp, 4 - temp);\n                }\n            }\n        }\n\n        return count;\n    }\n\n    int minFlips(const vector<vector<int>>& grid) {\n        \n        int rows = grid.size(), cols = grid[0].size(),ans = 0;\n        \n        if (rows & 1 && cols & 1) {\n            ans = grid[rows/2][cols/2] == 1? 1 : 0;\n        }\n\n        vector<int> v(3, 0);\n        if (rows & 1) {\n            int r = 0, c = cols - 1;\n            while (r < c) {\n                int t = grid[rows / 2][r] + grid[rows / 2][c];\n                v[t] += 1;\n                r += 1;\n                c -= 1;\n            }\n        }\n\n        if (cols & 1) {\n            int r = 0, c = rows - 1;\n            while (r < c) {\n                int t = grid[r][cols / 2] + grid[c][cols / 2];\n                v[t] += 1;\n                r += 1;\n                c -= 1;\n            }\n        }\n\n        if (v[2] & 1) {\n            if (v[1] > 0) {\n                ans += v[1];\n            } else {\n                ans += 2;\n            }\n        } else {\n            ans += v[1];\n        }\n\n        ans += calculateCount(grid, rows, cols);\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722700056",
    "subm_id": "1343230334"
}