{
    "username": "mittulofficial",
    "submission": "#include <vector>\n#include <algorithm>\n#include <queue>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the costs in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        long long totalCost = 0;\n        int h = 0, v = 0; // counters for horizontal and vertical cuts made\n        int hSegments = 1, vSegments = 1; // initial segments count\n\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += (long long)horizontalCut[h] * vSegments;\n                hSegments++;\n                h++;\n            } else {\n                totalCost += (long long)verticalCut[v] * hSegments;\n                vSegments++;\n                v++;\n            }\n        }\n        \n        // Remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[h] * vSegments;\n            h++;\n        }\n        \n        // Remaining vertical cuts\n        while (v < verticalCut.size()) {\n            totalCost += (long long)verticalCut[v] * hSegments;\n            v++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720924540",
    "subm_id": "1320220803"
}