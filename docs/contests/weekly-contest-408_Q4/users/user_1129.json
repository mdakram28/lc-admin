{
    "username": "filipopper",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    // Function to perform BFS and check if we can reach target corners\n    int bfs(vector<vector<int>>& graph, int start, int target1, int target2, int n) {\n        queue<int> q;\n        vector<int> visited(n + 4, 0);  // Visited array to keep track of visited nodes\n        q.push(start);\n        visited[start] = 1;\n\n        // Standard BFS loop\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n\n        // Check if we reached either of the target corners\n        return visited[target1] || visited[target2];\n    }\n\n    // Main function to determine if we can reach any corner from the start point\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int nc = circles.size();\n        vector<pair<pair<int, int>, int>> c(nc);  // Circle data: {{x, y}, radius}\n        vector<vector<int>> graph(nc + 4);  // Graph with extra nodes for corners\n\n        // Fill circle data structure\n        for (int i = 0; i < nc; ++i) {\n            c[i] = {{circles[i][0], circles[i][1]}, circles[i][2]};\n        }\n\n        // Build graph connections\n        for (int i = 0; i < nc; ++i) {\n            // Check if a circle touches the left wall\n            if (c[i].first.first <= c[i].second) {\n                graph[nc].push_back(i);\n                graph[i].push_back(nc);\n            }\n            // Check if a circle touches the right wall\n            if (X - c[i].first.first <= c[i].second) {\n                graph[nc + 2].push_back(i);\n                graph[i].push_back(nc + 2);\n            }\n            // Check if a circle touches the bottom wall\n            if (c[i].first.second <= c[i].second) {\n                graph[nc + 1].push_back(i);\n                graph[i].push_back(nc + 1);\n            }\n            // Check if a circle touches the top wall\n            if (Y - c[i].first.second <= c[i].second) {\n                graph[nc + 3].push_back(i);\n                graph[i].push_back(nc + 3);\n            }\n\n            // Check for intersections between circles\n            for (int j = i + 1; j < nc; ++j) {\n                double distance = sqrt(pow(c[i].first.first - c[j].first.first, 2) + \n                                       pow(c[i].first.second - c[j].first.second, 2));\n                if (c[i].second + c[j].second >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        // Check if there is no path connecting opposite corners\n        return !(bfs(graph, nc, nc + 1, nc + 2, nc + 4) || bfs(graph, nc + 3, nc + 2, nc + 1, nc + 4));\n    }\n};",
    "submit_ts": "1722139164",
    "subm_id": "1335809711"
}