{
    "username": "cuiaoxiang",
    "submission": "#define LOCAL\n#define _USE_MATH_DEFINES\n#include <array>\n#include <cassert>\n#include <cstdio>\n#include <cstring>\n#include <iostream>\n#include <iomanip>\n#include <string>\n#include <sstream>\n#include <vector>\n#include <queue>\n#include <stack>\n#include <list>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <algorithm>\n#include <complex>\n#include <cmath>\n#include <numeric>\n#include <bitset>\n#include <functional>\n#include <random>\n#include <ctime>\n\nusing namespace std;\n\ntemplate <typename A, typename B>\nostream& operator <<(ostream& out, const pair<A, B>& a) {\n  out << \"(\" << a.first << \",\" << a.second << \")\";\n  return out;\n}\ntemplate <typename T, size_t N>\nostream& operator <<(ostream& out, const array<T, N>& a) {\n  out << \"[\"; bool first = true;\n  for (auto& v : a) { out << (first ? \"\" : \", \"); out << v; first = 0;} out << \"]\";\n  return out;\n}\ntemplate <typename T>\nostream& operator <<(ostream& out, const vector<T>& a) {\n  out << \"[\"; bool first = true;\n  for (auto v : a) { out << (first ? \"\" : \", \"); out << v; first = 0;} out << \"]\";\n  return out;\n}\ntemplate <typename T, class Cmp>\nostream& operator <<(ostream& out, const set<T, Cmp>& a) {\n  out << \"{\"; bool first = true;\n  for (auto& v : a) { out << (first ? \"\" : \", \"); out << v; first = 0;} out << \"}\";\n  return out;\n}\ntemplate <typename T, class Cmp>\nostream& operator <<(ostream& out, const multiset<T, Cmp>& a) {\n  out << \"{\"; bool first = true;\n  for (auto& v : a) { out << (first ? \"\" : \", \"); out << v; first = 0;} out << \"}\";\n  return out;\n}\ntemplate <typename U, typename T, class Cmp>\nostream& operator <<(ostream& out, const map<U, T, Cmp>& a) {\n  out << \"{\"; bool first = true;\n  for (auto& p : a) { out << (first ? \"\" : \", \"); out << p.first << \":\" << p.second; first = 0;} out << \"}\";\n  return out;\n}\n#ifdef LOCAL\n#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)\n#else\n#define trace(...) 42\n#endif\ntemplate <typename Arg1>\nvoid __f(const char* name, Arg1&& arg1){\n  cerr << name << \": \" << arg1 << endl;\n}\ntemplate <typename Arg1, typename... Args>\nvoid __f(const char* names, Arg1&& arg1, Args&&... args){\n  const char* comma = strchr(names + 1, ',');\n  cerr.write(names, comma - names) << \": \" << arg1 << \" |\";\n  __f(comma + 1, args...);\n}\n\ntemplate <class T> auto vect(const T& v, int n) { return vector<T>(n, v); }\ntemplate <class T, class... D> auto vect(const T& v, int n, D... m) {\n  return vector<decltype(vect(v, m...))>(n, vect(v, m...));\n}\n\nusing int64 = long long;\nusing int128 = __int128_t;\nusing ii = pair<int, int>;\n#define SZ(x) (int)((x).size())\ntemplate <typename T> static constexpr T inf = numeric_limits<T>::max() / 2;\nconst int MOD = 1e9 + 7;\n// const int MOD = 998244353;\nmt19937_64 mrand(random_device{}());\nint64 rnd(int64 x) { return mrand() % x; }\nconstexpr inline int lg2(int64 x) { return x == 0 ? -1 : sizeof(int64) * 8 - 1 - __builtin_clzll(x); }\nconstexpr inline int64 p2ceil(int64 x) { return 1LL << (lg2(x - 1) + 1); }\ntemplate <class T> void out(const vector<T>& a) { for (int i = 0; i < SZ(a); ++i) cout << a[i] << \" \\n\"[i + 1 == SZ(a)]; }\ntemplate <class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate <class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\ntemplate <class T> void dedup(vector<T>& v) { sort(v.begin(), v.end()); v.erase(unique(v.begin(), v.end()), v.end()); }\ninline void add_mod(int& x, int y) { x += y; if (x >= MOD) x -= MOD; }\ninline void sub_mod(int& x, int y) { x += MOD - y; if (x >= MOD) x -= MOD; }\ninline int mod(int x) { return x >= MOD ? x - MOD : x; }\n\nstruct fast_ios {\n  fast_ios() {\n    cin.tie(nullptr);\n    ios::sync_with_stdio(false);\n    cout << fixed << setprecision(10);\n  };\n} fast_ios_;\n\nclass Solution {\n public:\n  long long maximumScore(vector<vector<int>>& a) {\n    int n = a.size();\n    auto C = vect<int64>(0, n + 1, n + 1);\n    for (int j = 0; j < n; ++j) {\n      for (int i = 0; i < n; ++i) {\n        C[j + 1][i + 1] = C[j + 1][i] + a[i][j];\n      }\n    }\n    auto dp = vect<int64>(0, n + 1, n + 1);\n    auto best1 = vect<int64>(0, n + 1, n + 1);\n    auto best2 = vect<int64>(0, n + 1, n + 1);\n    for (int pos = n; pos >= 1; --pos) {\n      for (int k = 0; k <= n; ++k) {\n        for (int pre = 0; pre <= n; ++pre) {\n          best1[k][pre] = dp[k][pre] - C[pos][k];\n          if (k > 0) ckmax(best1[k][pre], best1[k - 1][pre]);\n        }\n      }\n      for (int k = n; k >= 0; --k) {\n        for (int pre = 0; pre <= n; ++pre) {\n          best2[k][pre] = dp[k][pre] + C[pos - 1][k];\n          if (k + 1 <= n) ckmax(best2[k][pre], best2[k + 1][pre]);\n        }\n      }\n      auto ndp = vect<int64>(0, n + 1, n + 1);\n      for (int pre1 = 0; pre1 <= n; ++pre1) {\n        for (int pre2 = 0; pre2 <= n; ++pre2) {\n          int P = max(pre1, pre2);\n          ckmax(ndp[pre1][pre2], best1[P][pre1] + C[pos][pre1]);\n          // for (int k = 0; k <= P; ++k) {\n          //   ckmax(ndp[pre1][pre2], C[pos][pre1] - C[pos][k] + dp[k][pre1]);\n          // }\n          ckmax(ndp[pre1][pre2], best2[P][pre1] - C[pos - 1][P]);\n          // for (int k = P; k <= n; ++k) {\n          //   ckmax(ndp[pre1][pre2], C[pos - 1][k] - C[pos - 1][P] + dp[k][pre1]);\n          // }\n        }\n      }\n      swap(dp, ndp);\n    }\n    // function<int64(int, int, int)> solve =\n    //   [&](int pos, int pre1, int pre2) {\n    //     if (pos == n) return 0LL;\n    //     int64& ret = dp[pos][pre1][pre2];\n    //     if (ret >= 0) return ret;\n    //     ret = 0;\n    //     int P = max(pre1, pre2);\n    //     for (int cur = P + 1; cur <= n; ++cur) {\n    //       ckmax(ret, (pos > 0 ? C[pos - 1][cur] - C[pos - 1][P] : 0) +\n    //             solve(pos + 1, cur, pre1));\n    //     }\n    //     for (int cur = 0; cur <= P; ++cur) {\n    //       ckmax(ret, (pre1 >= cur ? C[pos][pre1] - C[pos][cur] : 0) + solve(pos + 1, cur, pre1));\n    //     }\n    //     return ret;\n    //   };\n    // int64 ret = solve(0, 0, 0);\n    // return ret;\n    return dp[0][0];\n  }\n};\n",
    "submit_ts": "1721489069",
    "subm_id": "548317178"
}