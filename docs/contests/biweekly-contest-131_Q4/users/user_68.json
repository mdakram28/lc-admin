{
    "username": "young_sean",
    "submission": "class MaxFenwickTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.bit = nums[:]\n        for i in range(self.n):\n            if i | (i + 1) < self.n and self.bit[i | (i + 1)] < self.bit[i]:\n                self.bit[i | (i + 1)] = self.bit[i]\n\n    def prefmax(self, r):\n        res = 0\n        while r >= 0:\n            res = max(res, self.bit[r])\n            r = (r & (r + 1)) - 1\n        return res\n\n    def set(self, idx,  v):\n        while idx < self.n:\n            if v > self.bit[idx]: self.bit[idx] = v\n            idx = idx | (idx + 1)\n\nclass UnionFind:\n    def __init__(self, n, size=None):\n        self.parent = list(range(n))\n        self.size = [1] * n if size is None else size\n\n    def find(self, a):\n        a = self.parent[a]\n        acopy = a\n        while a != self.parent[a]:\n            a = self.parent[a]\n        while acopy != a:\n            self.parent[acopy], acopy = a, self.parent[acopy]\n        return a\n\n    def merge(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb: return False\n        self.parent[pb] = pa\n        self.size[pa] += self.size[pb]\n        return True\n\n    def getSize(self, a):\n        return self.size[self.find(a)]\n\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        tmp = [0] + [10 ** 9]\n        for q in queries:\n            if q[0] == 1:\n                tmp.append(q[1])\n        tmp.sort()\n        d = {v: i for i, v in enumerate(tmp)}\n        stl = SortedList(tmp)\n        vals = [tmp[i+1] - tmp[i] for i in range(len(tmp) - 1)]\n        union = UnionFind(len(vals), vals)\n        fen = MaxFenwickTree(vals)\n        queries.reverse()\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                stl.remove(q[1])\n                pos = d[q[1]]\n                union.merge(pos - 1, pos)\n                p = union.find(pos)\n                fen.set(p, union.getSize(p))\n            else:\n                p = stl.bisect_right(q[1]) - 1\n                v = stl[p]\n                pos = d[v] - 1\n                if fen.prefmax(pos) >= q[2] or q[1] - v >= q[2]: ans.append(True)\n                else: ans.append(False)\n        ans.reverse()\n        return ans\n",
    "submit_ts": 1716648682.0
}