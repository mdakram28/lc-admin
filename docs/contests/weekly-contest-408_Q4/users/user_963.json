{
    "username": "lazyguy-_-",
    "submission": "class Solution {\n    struct DisjointSet {\n        vector<int> parent;\n        vector<int> size;\n\n        DisjointSet(int maxSize) {\n            parent.resize(maxSize);\n            size.resize(maxSize);\n            for (int i = 0; i < maxSize; i++) {\n                parent[i] = i;\n                size[i] = 1;\n            }\n        }\n\n        int find_set(int v) {\n            if (v == parent[v]) {\n                return v;\n            }\n            return parent[v] = find_set(parent[v]);\n        }\n\n        void union_set(int a, int b) {\n            a = find_set(a);\n            b = find_set(b);\n            if (a != b) {\n                if (size[a] < size[b]) {\n                    swap(a, b);\n                }\n                parent[b] = a;\n                size[a] += size[b];\n            }\n        }\n    };\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DisjointSet ss(n);\n\n        unordered_set<int> lt, rb;\n\n        for(int i = 0; i < n; i++) {\n            auto circle = circles[i];\n            uint64_t x = circle[0];\n            uint64_t y = circle[1];\n            int r = circle[2];\n            int exL = x - r;\n            int exR = x + r;\n            int exT = y + r;\n            int exB = y - r;\n            if(exL <= 0 && exR > 0 || exB < Y && exT >= Y) {\n                lt.insert(i);\n            }\n            if(exL < X && exR >= X || exB <= 0 && exT > 0) {\n                rb.insert(i);\n            }\n            for(int j = i + 1; j < n; j++) {\n                uint64_t x2 = circles[j][0];\n                uint64_t y2 = circles[j][1];\n                int r2 = circles[j][2];\n                uint64_t sq1 = (x - x2)*(x - x2);\n                uint64_t sq2 = (y - y2)*(y - y2);\n                auto d = sqrt(sq1 + sq2);\n                if(abs(r - r2) <= d && d <= (r + r2)) {\n                    ss.union_set(i, j);\n                }\n            }\n        }\n        for(const auto& c1:lt) {\n            int cc1 = ss.find_set(c1);\n            for(const auto& c2:rb) {\n                if(ss.find_set(c2) == cc1) {\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722138233",
    "subm_id": "1335785578"
}