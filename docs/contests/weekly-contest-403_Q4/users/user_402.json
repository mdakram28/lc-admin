{
    "username": "u77",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        \n        def process(A):\n            def is_valid(r1,r2,c1,c2):\n                return r1<=r2 and c1<=c2\n\n            @cache\n            def min_sub_grid(r1,r2,c1,c2):\n                if not is_valid(r1,r2,c1,c2):\n                    return math.inf\n                min_r,min_c = math.inf,math.inf\n                max_r,max_c = -math.inf,-math.inf\n\n                for r in range(r1,r2+1):\n                    for c in range(c1,c2+1):\n                        if A[r][c]:\n                            min_r = min(r, min_r)\n                            min_c = min(c, min_c)\n                            max_r = max(r, max_r)\n                            max_c = max(c, max_c)\n\n                return (max_r-min_r+1)*(max_c-min_c+1)\n\n            R = len(A)\n            C = len(A[0]) if R else 0\n\n            def clean(x):\n                return x if x!=math.inf else 0\n\n            @cache\n            def recurse1(r,c):\n                x = min_sub_grid(0,r,0,c)\n                y = min_sub_grid(0,r,c+1,C-1)\n                z = min_sub_grid(r+1,R-1,0,C-1)\n                if collections.Counter([x,y,z])[math.inf]==2:\n                    return math.inf\n                return clean(x)+clean(y)+clean(z)\n\n            @cache\n            def recurse2(r,c):\n                x = min_sub_grid(0,r,0,c)\n                y = min_sub_grid(0,R-1,c+1,C-1)\n                z = min_sub_grid(r+1,R-1,0,c)\n                if collections.Counter([x,y,z])[math.inf]==2:\n                    return math.inf\n                return clean(x)+clean(y)+clean(z)\n            \n            @cache\n            def recurse3(r1,r2):\n                x = min_sub_grid(0,r1,0,C-1)\n                y = min_sub_grid(r1+1,r2,0,C-1)\n                z = min_sub_grid(r2+1,R-1,0,C-1)\n                if collections.Counter([x,y,z])[math.inf]==2:\n                    return math.inf\n                return clean(x)+clean(y)+clean(z)\n                \n\n            res = math.inf\n            for r in range(R):\n                for c in range(C):\n                    res = min(res, recurse1(r,c), recurse2(r,c))\n            \n            if R >=3:\n                for r1,r2 in itertools.combinations(range(R),2):\n                    res = min(res, recurse3(r1,r2))\n            return res\n        \n        return min(process(grid[::-1]), process(grid), process(list(map(list,zip(*grid)))), process(list(map(list,zip(*grid)))[::-1]))",
    "submit_ts": 1719113375.0
}