{
    "username": "xiangxiang",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length, maxDiffCnt = 0;\n        Map<Integer, Integer> diffMap = new HashMap<>();\n        for(int i = 0 ; i < n / 2 ; i++) {\n            int diff = Math.abs(nums[i] - nums[n - i - 1]);\n            int cnt = diffMap.getOrDefault(diff, 0);\n            diffMap.put(diff, cnt+1);\n            maxDiffCnt = Math.max(maxDiffCnt, cnt);\n        }\n\n        int min = n;\n        for(Map.Entry<Integer, Integer> diffCnt : diffMap.entrySet()) {\n            int diff = diffCnt.getKey(), cnt = diffCnt.getValue();\n            if ( (n / 2 - cnt) > min || (n / 2 - cnt) > (n / 2 - maxDiffCnt) * 2) {\n                continue;\n            }\n            \n            int res = calculate(nums, k, diff);\n            min = Math.min(res, min);\n        }\n        return min;\n    }\n\n    private int calculate(int[] nums, int k, int diff) {\n        int n = nums.length, cnt = 0;\n        for(int i = 0 ; i < n / 2 ; i++) {\n            int j = n - i - 1;\n            if (diff == Math.abs(nums[i] - nums[j])) {\n                continue;\n            }\n\n            if ((nums[i] + diff >= 0 && nums[i] + diff <= k)\n                    || (nums[i] - diff >= 0 && nums[i] - diff <= k)\n                    || (nums[j] + diff >= 0 && nums[j] + diff <= k)\n                    || (nums[j] - diff >= 0 && nums[j] - diff <= k)) {\n                cnt++;\n            }else {\n                cnt += 2;\n            }\n        }\n        return cnt;\n    }\n}",
    "submit_ts": "1721488431",
    "subm_id": "548314407"
}