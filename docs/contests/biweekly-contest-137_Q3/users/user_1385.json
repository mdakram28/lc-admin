{
    "username": "HDZ",
    "submission": "#define MAXN 105\n#define MOD 1000000007\n#define INF 2100000000\n\n\nlong long dp[MAXN][MAXN][MAXN];\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        for (int i = 0; i < MAXN; ++i)\n        {\n            for (int j = 0; j < MAXN; ++j)\n            {\n                for (int k= 0; k< MAXN; ++k)\n                {\n                    dp[i][j][k] = -1e12;\n                }\n            }\n        }\n        long long n = board.size();\n        long long m = board[0].size();\n        vector<vector<long long>>helper(n);\n\n        for (long long i = 0; i < n; ++i)\n        {\n            long long m1=-1e12, m2 = -1e12, m3 = -1e12;\n            long long a1=-1, a2=-1, a3=-1;\n            for (long long j = 0; j < m; ++j)\n            {\n                if (board[i][j] >= m1)\n                {\n                    m3 = m2;\n                    a3 = a2;\n\n                    m2 = m1;\n                    a2 = a1;\n\n                    m1 = board[i][j];\n                    a1 = j;\n                }\n                else if (board[i][j] >= m2)\n                {\n                    m3 = m2;\n                    a3 = a2;\n\n                    m2 = board[i][j];\n                    a2 = j;\n                }\n                else if (board[i][j] >= m3)\n                {\n                    m3 = board[i][j];\n                    a3 = j;\n                }\n            }\n            helper[i].push_back(a1);\n            helper[i].push_back(a2);\n            helper[i].push_back(a3);\n        }\n\n        \n        for (long long j = 0; j < m; ++j)\n        {\n            for (long long k = 0; k <= m; ++k)\n            {\n                if (k==m)\n                {\n                    dp[0][j][k] = board[0][j];\n                }\n            }\n        }\n        long long res = -1e12;\n        for (long long i = 1; i < n; ++i)\n        {\n            for (long long j = 0; j < m; ++j)\n            {\n                for (long long k = 0; k <= m; ++k)\n                {\n                    if (k == m)\n                    {\n                        dp[i][j][k] = max(dp[i-1][j][k],(long long)board[i][j]);\n                    }\n                    else if (j != k)\n                    {\n                        dp[i][j][k] = max(dp[i - 1][j][m]+ board[i][k], dp[i - 1][k][m] + board[i][j]);\n                        dp[i][j][k] = max(dp[i - 1][j][k], dp[i][j][k]);\n                    }\n\n                    if (k != m&&k!=j)\n                    {\n                        long long col;\n                        for (auto tmp : helper[i])\n                        {\n                            if (tmp != j && tmp != k)\n                            {\n                                col = tmp;\n                                break;\n                            }\n                        }\n                        long long val = board[i][col];\n                        res = max(res, dp[i-1][j][k]+val);\n                    }\n                }\n            }\n        }\n\n        //for (long long i = 0; i < n; ++i)\n        //{\n        //    for (long long j = 0; j < m; ++j)\n        //    {\n        //        for (long long k = 0; k < m; ++k)\n        //        {\n        //            if(dp[i][j][k]!= -4629771061636907073)\n        //                cout << \"(\" << j << \",\" << k << \"):\" << dp[i][j][k] << \"  \";\n        //        }\n        //    }\n        //    cout << endl;\n        //}\n        return res;\n    }\n};",
    "submit_ts": "1723909983",
    "subm_id": "556338944"
}