{
    "username": "vikky4321",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\nprivate:\n    int processCenter(const vector<vector<int>>& g, int r, int c) {\n        return (r % 2 == 1 && c % 2 == 1 && g[r / 2][c / 2] == 1) ? 1 : 0;\n    }\n    \n    vector<int> calcEdgeShifts(const vector<vector<int>>& g, int r, int c) {\n        vector<int> sh(3, 0);\n        auto proc = [&](int start, int end, bool isRow) {\n            for (int i = start; i < end; ++i) {\n                int sum = isRow ? g[r/2][i] + g[r/2][c-1-i] : g[i][c/2] + g[r-1-i][c/2];\n                if (sum < 3) sh[sum]++;\n            }\n        };\n        if (r % 2) proc(0, c/2, true);\n        if (c % 2) proc(0, r/2, false);\n        return sh;\n    }\n    \n    int handleEdges(const vector<int>& sh) {\n        if (sh[2] % 2 == 0) return sh[1];\n        return sh[1] > 0 ? sh[1] : 2;\n    }\n    \n    int processCorners(const vector<vector<int>>& g, int r, int c) {\n        int res = 0;\n        for (int i = 0; i < r / 2; ++i) {\n            for (int j = 0; j < c / 2; ++j) {\n                int s = g[i][j] + g[r-1-i][j] + g[i][c-1-j] + g[r-1-i][c-1-j];\n                if (s != 0 && s != 4) res += min(s, 4 - s);\n            }\n        }\n        return res;\n    }\n\npublic:\n    int minFlips(vector<vector<int>>& g) {\n        int r = g.size(), c = g[0].size();\n        int res = processCenter(g, r, c);\n        vector<int> sh = calcEdgeShifts(g, r, c);\n        res += handleEdges(sh);\n        res += processCorners(g, r, c);\n        return res;\n    }\n};",
    "submit_ts": "1722700017",
    "subm_id": "1343229224"
}