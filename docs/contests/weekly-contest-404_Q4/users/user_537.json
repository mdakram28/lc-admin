{
    "username": "Arrrrrpit",
    "submission": "class Solution\n{\nprivate:\n    pair<int, int> helper(int a, const vector<vector<int>> &b)\n    {\n        int n = b.size();\n        vector<int> c(n, -1);\n        queue<int> q;\n        q.push(a);\n        c[a] = 0;\n        int d = a;\n        int e = 0;\n\n        while (!q.empty())\n        {\n            int f = q.front();\n            q.pop();\n            int g = 0;\n            while (g < b[f].size())\n            {\n                int h = b[f][g];\n                if (c[h] == -1)\n                {\n                    c[h] = c[f] + 1;\n                    q.push(h);\n                    if (c[h] > e)\n                    {\n                        e = c[h];\n                        d = h;\n                    }\n                }\n                g++;\n            }\n        }\n        return {d, e};\n    }\n\n    int helper2(const vector<vector<int>> &a)\n    {\n        auto [b, _] = helper(0, a);\n        auto [c, d] = helper(b, a);\n        return d;\n    }\n\n    int solve(vector<vector<int>> &a, vector<vector<int>> &b)\n    {\n        int n = a.size() + 1;\n        int m = b.size() + 1;\n\n        vector<vector<int>> c(n), d(m);\n        int i = 0;\n        while (i < a.size())\n        {\n            c[a[i][0]].push_back(a[i][1]);\n            c[a[i][1]].push_back(a[i][0]);\n            i++;\n        }\n        int j = 0;\n        while (j < b.size())\n        {\n            d[b[j][0]].push_back(b[j][1]);\n            d[b[j][1]].push_back(b[j][0]);\n            j++;\n        }\n\n        int e = helper2(c);\n        int f = helper2(d);\n\n        int g = max(e, f);\n        int h = max(g, (e + 1) / 2 + (f + 1) / 2 + 1);\n\n        return h;\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>> &a, vector<vector<int>> &b)\n    {\n        return solve(a, b);\n    }\n};",
    "submit_ts": "1719719653",
    "subm_id": "1304447262"
}