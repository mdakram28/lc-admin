{
    "username": "chethanal",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n\n    long long totalCost = 0;\n    int horizontalPieces = 1, verticalPieces = 1;\n    int i = 0, j = 0;\n\n    // Process cuts in a greedy manner\n    while (i < horizontalCut.size() && j < verticalCut.size()) {\n        if (horizontalCut[i] >= verticalCut[j]) {\n            totalCost += horizontalCut[i] * verticalPieces;\n            i++;\n            horizontalPieces++;\n        } else {\n            totalCost += verticalCut[j] * horizontalPieces;\n            j++;\n            verticalPieces++;\n        }\n    }\n\n    // Process remaining horizontal cuts\n    while (i < horizontalCut.size()) {\n        totalCost += horizontalCut[i] * verticalPieces;\n        i++;\n        horizontalPieces++;\n    }\n\n    // Process remaining vertical cuts\n    while (j < verticalCut.size()) {\n        totalCost += verticalCut[j] * horizontalPieces;\n        j++;\n        verticalPieces++;\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925494",
    "subm_id": "1320256613"
}