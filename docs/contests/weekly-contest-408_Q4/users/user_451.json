{
    "username": "senkp246",
    "submission": "class Solution {\n    private int bfs(List<List<Integer>> adj, int st, int t1, int t2, int node) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] vis = new boolean[node + 4];\n        q.offer(st);\n        vis[st] = true;\n\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : adj.get(u)) {\n                if (!vis[v]) {\n                    q.offer(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return vis[t1] || vis[t2] ? 1 : 0;\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] c) {\n        int num = c.length;\n        List<int[]> circles = new ArrayList<>(num);\n        List<List<Integer>> graph = new ArrayList<>(num + 4);\n        \n        for (int i = 0; i < num + 4; ++i) {\n            graph.add(new ArrayList<>());\n        }\n        \n        for (int[] circle : c) {\n            circles.add(new int[] {circle[0], circle[1], circle[2]});\n        }\n        \n        for (int i = 0; i < num; i++) {\n            int x = circles.get(i)[0];\n            int y = circles.get(i)[1];\n            int r = circles.get(i)[2];\n\n            if (x <= r) {\n                graph.get(num).add(i);\n                graph.get(i).add(num);\n            }\n            if (X - x <= r) {\n                graph.get(num + 2).add(i);\n                graph.get(i).add(num + 2);\n            }\n            if (y <= r) {\n                graph.get(num + 1).add(i);\n                graph.get(i).add(num + 1);\n            }\n            if (Y - y <= r) {\n                graph.get(num + 3).add(i);\n                graph.get(i).add(num + 3);\n            }\n            for (int j = i + 1; j < num; ++j) {\n                int xj = circles.get(j)[0];\n                int yj = circles.get(j)[1];\n                int rj = circles.get(j)[2];\n                double distance = Math.sqrt(Math.pow(x - xj, 2) + Math.pow(y - yj, 2));\n                int radiusSum = r + rj;\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, num, num + 1, num + 2, num + 4)); \n        isBlocked = Math.max(isBlocked, bfs(graph, num + 3, num + 2, num + 1, num + 4)); \n        return isBlocked == 0;\n    }\n}",
    "submit_ts": "1722137454",
    "subm_id": "1335764271"
}