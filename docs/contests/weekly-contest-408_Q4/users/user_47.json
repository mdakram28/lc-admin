{
    "username": "zokumyoin",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n\n        UnionFind uf = new UnionFind(circles.length + 4);\n        for (int i = 0; i < circles.length; i++) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (x - r <= 0) {\n                uf.union(i, circles.length);\n            }\n            if (x + r >= X) {\n                uf.union(i, circles.length + 1);\n            }\n            if (y - r <= 0) {\n                uf.union(i, circles.length + 2);\n            }\n            if (y + r >= Y) {\n                uf.union(i, circles.length + 3);\n            }\n            for (int j = i + 1; j < circles.length; j++) {\n                if (intersect(circles[i], circles[j])) {\n                    uf.union(i, j);\n                }\n            }\n        }\n        int N = circles.length;\n        if (uf.connected(N, N + 1) || uf.connected(N, N + 2) || uf.connected(N + 2, N + 3) || uf.connected(N + 1, N + 3)) {\n            return false;\n        }\n        return true;\n\n    }\n\n    private boolean intersect(int[] a, int[] b) {\n        long dx = a[0] - b[0];\n        long dy = a[1] - b[1];\n        return dx * dx + dy * dy <= ((long) a[2] + b[2]) * (a[2] + b[2]);\n    }\n\n    private static class UnionFind {\n        private int cnt;\n        private int[] root;\n\n        private UnionFind(int capacity) {\n            root = new int[capacity];\n            this.cnt = capacity;\n            for (int i = 0; i < root.length; i++) {\n                root[i] = i;\n            }\n        }\n\n        private int find(int s) {\n            while (root[s] != s) {\n                root[s] = root[root[s]];\n                s = root[s];\n            }\n            return s;\n        }\n\n        private void union(int s, int t) {\n            int rs = find(s);\n            int rt = find(t);\n            if (rs == rt) {\n                return;\n            }\n            root[rs] = rt;\n            cnt--;\n        }\n\n        private boolean connected(int s, int t) {\n            return find(s) == find(t);\n        }\n    }\n}",
    "submit_ts": "1722135251",
    "subm_id": "1335695256"
}