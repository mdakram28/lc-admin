{
    "username": "Rad0miR",
    "submission": "public class Solution {\n    public int NumberOfPermutations(int n, int[][] re) \n    {\n        const int mod = 1_000_000_007;\n        //Dictionary<(int, int), int> dp = new();\n        Dictionary<int, int> r = re.ToDictionary(arr => arr[0], arr => arr[1]);\n        \n        if (r.ContainsKey(0) && r[0] != 0) return 0;\n        \n        int[] dp = new int[401];\n        dp[0] = 1;\n        for (int k = 1; k < n; ++k) \n        {\n            int[] ndp = new int[401];\n            \n            if (r.TryGetValue(k, out int res)) \n            {\n                int ans = 0;\n                for (int i = 0, min = Math.Min(k, res); i <= min; ++i)\n                {\n                    ans += dp[res - i];\n                    ans %= mod;\n                }\n                ndp[res] = ans;\n            }\n            else\n            {\n                for (int i = 0; i < 401; ++i) \n                {\n                    ndp[i] = (int)(( (long)(i - 1 < 0 ? 0 : ndp[i - 1]) + dp[i] - (i - k - 1 < 0 ? 0 : dp[i - k - 1]) + mod) % mod);\n                }\n            }\n            dp = ndp;\n        }\n        return dp[r[n - 1]];\n        \n        /*\n        return Result(n - 1, r[n - 1]);\n        \n        int Result(int k, int x) \n        {\n            //if (x < 0) return 0;\n            if (k < 0) return x == 0 ? 1 : 0;\n            if (r.TryGetValue(k, out int res) && res != x) return 0;\n            \n            if (!dp.ContainsKey((k, x))) \n            {\n                int ans = 0;\n                ans = Result(k, x - 1) + Result(k - 1, x);\n                \n                /or (int i = 0, min = Math.Min(k, x); i <= k; ++i) \n                {\n                    ans += Result(k - 1, x - i);\n                    ans %= 1_000_000_007;\n                }\n                dp[(k, x)] = ans;\n            }\n            return dp[(k, x)];\n        }*/\n    }\n}",
    "submit_ts": 1719069935.0
}