{
    "username": "RayHongZ",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        def find(P):\n            T1 = (float('-inf'),-1,-1,-1) # (x+y)\n            T2 = (float('-inf'),-1,-1,-1) # (x-y)\n            T3 = (float('-inf'),-1,-1,-1) # (y-x)\n            T4 = (float('-inf'),-1,-1,-1) # (-x-y)\n            for i, (x, y) in enumerate(P):\n                if x+y > T1[0]:\n                    T1 = (x+y, x, y, i)\n                if x-y > T2[0]:\n                    T2 = (x-y, x, y, i)\n                if y-x > T3[0]:\n                    T3 = (y-x, x, y, i)\n                if -x-y > T4[0]:\n                    T4 = (-x-y, x, y, i)\n                    \n            ans = (-1, -1, -1)\n            for i, (x, y) in enumerate(P):\n                for T in [T1, T2, T3, T4]:\n                    d = abs(x-T[1]) + abs(y-T[2])\n                    if d > ans[0]:\n                        ans = (d, i, T[3])\n            return ans\n        \n        _, a, b = find(points)\n        r1, _, _ = find(points[:a] + points[a+1:])\n        r2, _, _ = find(points[:b] + points[b+1:])\n        return min(r1, r2)\n                    \n                "
}