{
    "username": "amsraman",
    "submission": "namespace Combo {\n    const int mod = 1e9 + 7;\n    vector<int> f = {1}, invf = {1};\n    int mul(int x, int y) {\n        return (1LL * x * y) % mod;\n    }\n    int exp(int x, int y) {\n        int ret = 1;\n        while(y) {\n            if(y & 1) ret = mul(ret, x);\n            x = mul(x, x), y >>= 1;\n        }\n        return ret;\n    }\n    int fact(int x) {\n        if(x < 0) return 0;\n        while(x >= f.size()) {\n            f.push_back(mul(f.size(), f.back()));\n        }\n        return f[x];\n    }\n    int ifact(int x) {\n        if(x < 0) return 0;\n        while(x >= invf.size()) {\n            invf.push_back(mul(exp(invf.size(), mod - 2), invf.back()));\n        }\n        return invf[x];\n    }\n    int inv(int x) {\n        return mul(fact(x - 1), ifact(x));\n    }\n    int ncr(int x, int y) {\n        if(x < y || x < 0) return 0;\n        return mul(fact(x), mul(ifact(x - y), ifact(y)));\n    }\n}\n\nusing namespace Combo;\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        long long up_dist = 0, tot_moves = 1, ans = 0;\n        k--;\n        while(true) {\n            if(up_dist >= k && up_dist - tot_moves <= k) {\n                int needed_down_moves = up_dist - k;\n                ans += ncr(tot_moves, needed_down_moves);\n            }\n            up_dist = 2 * up_dist + 1;\n            if(up_dist > 1e15) break;\n            ++tot_moves;\n        }\n        return ans;\n    }\n};\n/*\nnet 0\n\nup: 0, moves: 1: 1\n\nup: 1, moves: 2: 2\n\nup: 3, moves: 3: 1\n\nnet 1\n\nup: 0, moves: 1: 0\nup: 1, moves: 2: 0\nup: 3, moves: 3: 3\nup: 7, moves: 4: \n*/",
    "submit_ts": 1716087068.0
}