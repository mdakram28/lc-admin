{
    "username": "gao-gao-de-qiang-lc",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        int[] diff = new int[n/2];\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < n/2; i++) {\n            diff[i] = Math.abs(nums[i] - nums[n-1-i]);\n            map.merge(diff[i], 1, Integer::sum);\n        }\n        int ans = n;\n        for (Integer x : map.keySet()) {\n            int val = map.get(x);\n            if (n/2 - val > ans) {\n                continue;\n            }\n            int tmp = 0;\n            for (int i = 0; i < n/2; i++) {\n                if (diff[i] > x) {\n                    tmp++;\n                } else if (diff[i] < x) {\n                    int min = Math.min(nums[i], nums[n-1-i]);\n                    int max = Math.max(nums[i], nums[n-1-i]);\n                    if (max + x - diff[i] <= k || min - x + diff[i] >= 0) {\n                        tmp++;\n                    } else {\n                        tmp += 2;\n                    }\n                }\n            }\n            ans = Math.min(ans, tmp);\n        }\n        return ans;\n\n    }\n}",
    "submit_ts": "1721489495",
    "subm_id": "548319016"
}