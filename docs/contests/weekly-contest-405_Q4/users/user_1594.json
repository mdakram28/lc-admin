{
    "username": "hrshpreet",
    "submission": "class Solution {\npublic:\n    unsigned long long mod = 1e9 + 7;\n    unsigned long long prime = 31;\n\n    unsigned long long findHash(const string& str) {\n        unsigned long long hash = 0;\n        for (char i : str) {\n            hash = (hash * prime + (i-'a'+1)) % mod;\n        }\n        return hash;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        unordered_map<unsigned long long, pair<int, int>> mp; // hash -> length -> cost\n        vector<unsigned long long> targetHash(n+1, 0);\n        vector<unsigned long long> pwr(n+1, 1); \n\n        for (int i = 0; i < words.size(); ++i) {\n            unsigned long long wordHash = findHash(words[i]);\n            int len = words[i].size();\n            int cost = costs[i];\n            if (mp.find(wordHash) == mp.end() || cost < mp[wordHash].second) {\n                mp[wordHash] = {len, cost};\n            }\n        }\n\n        for (int i = 1; i <= n; ++i) {\n            targetHash[i] = (targetHash[i-1] * prime + (target[i-1] - 'a' + 1)) % mod;\n            pwr[i] = (pwr[i-1] * prime) % mod;\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            for (const auto& [hash, pair] : mp) {\n                int len = pair.first;\n                int cost = pair.second;\n                if (i + len <= n) {\n                    unsigned long long subHash = (mod + targetHash[i + len] - (targetHash[i] * pwr[len]) % mod) % mod;\n                    if (subHash == hash) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        for(auto i: dp) cout<<i<<\" \";\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323935",
    "subm_id": "1312387631"
}