{
    "username": "faiz_Ad_100",
    "submission": "class Solution {\n    public int numberOfPermutations(int n, int[][] arr) {\n        int max_Inversions = 400;\n\t\tint MOD = 1000000007;\n\t\tMap<Integer, Integer> mp = new HashMap<>();\n\t\tfor (int[] row : arr) {\n\t\t\tmp.put(row[0] + 1, row[1]);\n\t\t}\n\t\tlong[][] countArr = new long[n + 1][max_Inversions + 1];\n\t\tcountArr[0][0] = 1;\n\t\tfor (int length = 1; length <= n; length++) {\n\t\t\tfor (int inv = 0; inv <= max_Inversions; inv++) {\n\t\t\t\tfor (int newPos = 0; newPos < length; newPos++) {\n\t\t\t\t\tint prevInv = inv - newPos;\n\t\t\t\t\tif (prevInv >= 0) {\n\t\t\t\t\t\tcountArr[length][inv] = (countArr[length][inv] + countArr[length - 1][prevInv]) % MOD;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (mp.containsKey(length)) {\n\t\t\t\tint target = mp.get(length);\n\t\t\t\tfor (int inversion = 0; inversion <= max_Inversions; inversion++) {\n\t\t\t\t\tif (inversion != target) {\n\t\t\t\t\t\tcountArr[length][inversion] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tlong result = 0;\n\t\tfor (long count : countArr[n]) {\n\t\t\tresult = (result + count) % MOD;\n\t\t}\n\t\treturn (int) result;\n    }\n}",
    "submit_ts": "1719070576",
    "subm_id": "1296826461"
}