{
    "username": "ForgottenSemicolon",
    "submission": "class Solution {\n    \n    int x;\n    int maxCount;\n    \n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length+1;\n        int m = edges2.length+1;\n        List<List<Integer>> adj1 = new ArrayList<>();\n        for(int i = 0; i<=n; i++){\n            adj1.add(new ArrayList<>());\n        }\n        for(int [] edge : edges1){\n            adj1.get(edge[0]+1).add(edge[1]+1);\n            adj1.get(edge[1]+1).add(edge[0]+1);\n        }\n        List<List<Integer>> adj2 = new ArrayList<>();\n        for(int i = 0; i<=m; i++){\n            adj2.add(new ArrayList<>());\n        }\n        for(int [] edge : edges2){\n            adj2.get(edge[0]+1).add(edge[1]+1);\n            adj2.get(edge[1]+1).add(edge[0]+1);\n        }\n        int d1 = n==1 ? 0 : diameter(adj1, n)-1;\n        int d2 = m==1 ? 0 : diameter(adj2, m)-1;\n        int ans = Math.max(d1, d2);\n        int a1 = d1/2, a2 = d2/2;\n        int b1 = d1-a1, b2 = d2-a2;\n        ans = Math.max(ans, a1+a2+1);\n        ans = Math.max(ans, a1+b2+1);\n        ans = Math.max(ans, b1+a2+1);\n        ans = Math.max(ans, b1+b2+1);\n        return ans;\n    }\n\n    public void dfsUtil(int node, int count, boolean visited[], List<List<Integer>> adj){\n        visited[node] = true;\n        count++;\n        List<Integer> l = adj.get(node);\n        for(Integer i: l){\n            if(!visited[i]){\n                if (count >= maxCount) {\n                    maxCount = count;\n                    x = i;\n                }\n                dfsUtil(i, count, visited, adj);\n            }\n        }\n    }\n      \n    public void dfs(int node, int n, List<List<Integer>> adj){\n        boolean[] visited = new boolean[n + 1];\n        int count = 0;\n        Arrays.fill(visited, false);\n        dfsUtil(node, count + 1, visited, adj);\n         \n    }\n    \n    public int diameter(List<List<Integer>> adj, int n){\n        maxCount = Integer.MIN_VALUE;\n        dfs(1, n, adj);\n        dfs(x, n, adj);\n        return maxCount;\n    }\n}",
    "submit_ts": "1719719223",
    "subm_id": "1304436701"
}