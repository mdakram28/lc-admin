{
    "username": "vaibhavsingh18",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> e2c;\n\n        for_each(reqs.begin(), reqs.end(), [&e2c](const vector<int>& r) {\n            e2c.insert({r[0] + 1, r[1]}); \n        });\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(400 + 1, 0));\n        dp[0][0] = 1;\n\n        \n        for (auto& r : reqs) {\n            //cout<<\n        }\n\n        for (int l = 1; l <= n; ++l) {\n            for (int c = 0; c <= 400; ++c) {\n                for (int p = 0; p < l; ++p) {\n                    int pv = c - p;\n                    int tmt=p-c;\n                    if (pv >= 0) {\n                        dp[l][c] = (dp[l][c] + dp[l - 1][pv]) % 1'000'000'007;\n                    }\n                }\n            }\n\n            auto it = e2c.find(l);\n            if (it != e2c.end()) {\n                int rq = it->second;\n                for (int c = 0; c <= 400; ++c) {\n                    if (c != rq) {\n                        dp[l][c] = 0;\n                    }\n                }\n            }\n        }\n\n        long long res = 0;\n        for (int c = 0; c <= 400; ++c) {\n            res = (res + dp[n][c]) % 1'000'000'007;\n        }\n        cout<<res<<\" \";\n        return res;\n    }\n};\n",
    "submit_ts": 1719071551.0
}