{
    "username": "Qstrqch",
    "submission": "class Solution {\n    ArrayList<ArrayList<Integer>> adj1, adj2;\n    int[] dist;\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        adj1 = new ArrayList<>(); adj2 = new ArrayList<>();\n        int N = edges1.length + 1;\n        int M = edges2.length + 1;\n        dist = new int[Math.max(N, M)];\n        for (int i = 0 ; i <= N; i++) adj1.add(new ArrayList<>());\n        for (int i = 0; i <= M; i++) adj2.add(new ArrayList<>());\n        for (int[] i: edges1) {\n            adj1.get(i[0]).add(i[1]);\n            adj1.get(i[1]).add(i[0]);\n        }\n        for (int[] i: edges2) {\n            adj2.get(i[0]).add(i[1]);\n            adj2.get(i[1]).add(i[0]);\n        }\n        int dia1 = getDiameter(N, adj1);\n        int dia2 = getDiameter(M, adj2);\n        System.out.println(dia1 + \" \" + dia2);\n        return Math.max(dia1 / 2 + (dia1 % 2) + dia2 / 2 + (dia2 % 2) + 1, Math.max(dia1, dia2));\n        \n    }\n    public int getDiameter(int N, ArrayList<ArrayList<Integer>> adj) {\n        int idx = 0;\n        dist[idx] = 0;\n        getDist(0, -1, adj);\n        for (int i = 0; i < N; i++) {\n            if (dist[idx] < dist[i]) {\n                idx = i;\n            }\n        }\n        dist[idx] = 0;\n        getDist(idx, -1, adj);\n        int maxDist = 0;\n        for (int i = 0; i < N; i++) maxDist = Math.max(maxDist, dist[i]);\n        return maxDist;\n    }\n    public void getDist(int cur, int p, ArrayList<ArrayList<Integer>> adj) {\n        for (int nxt: adj.get(cur)) if (nxt != p) {\n            dist[nxt] = dist[cur] + 1;\n            getDist(nxt, cur, adj);\n        }\n    }\n\n\n}",
    "submit_ts": "1719718805",
    "subm_id": "1304426529"
}