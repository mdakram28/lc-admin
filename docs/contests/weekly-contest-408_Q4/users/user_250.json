{
    "username": "coderman2004",
    "submission": "import java.util.*;\n\nclass Solution {\n    public boolean bfs(List<List<Integer>> g, int s, int t1, int t2, int n) {\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] v = new boolean[n + 4];\n        q.add(s);\n        v[s] = true;\n\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int w : g.get(u)) {\n                if (!v[w]) {\n                    q.add(w);\n                    v[w] = true;\n                }\n            }\n        }\n        return v[t1] || v[t2];\n    }\n\n    private List<int[]> getCircles(int[][] c) {\n        List<int[]> circles = new ArrayList<>();\n        for (int[] circle : c) {\n            circles.add(new int[]{circle[0], circle[1], circle[2]});\n        }\n        return circles;\n    }\n\n    private List<List<Integer>> createGraph(int n) {\n        List<List<Integer>> g = new ArrayList<>();\n        for (int i = 0; i < n + 4; i++) {\n            g.add(new ArrayList<>());\n        }\n        return g;\n    }\n\n    private void connectEdges(List<List<Integer>> g, List<int[]> c, int n, int X, int Y) {\n        for (int i = 0; i < n; ++i) {\n            int cx = c.get(i)[0], cy = c.get(i)[1], r = c.get(i)[2];\n\n            if (cx <= r) {\n                g.get(n).add(i);\n                g.get(i).add(n);\n            }\n            if (X - cx <= r) {\n                g.get(n + 2).add(i);\n                g.get(i).add(n + 2);\n            }\n            if (cy <= r) {\n                g.get(n + 1).add(i);\n                g.get(i).add(n + 1);\n            }\n            if (Y - cy <= r) {\n                g.get(n + 3).add(i);\n                g.get(i).add(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                int cx2 = c.get(j)[0], cy2 = c.get(j)[1], r2 = c.get(j)[2];\n                double d = Math.sqrt(Math.pow(cx - cx2, 2) + Math.pow(cy - cy2, 2));\n                int rSum = r + r2;\n                if (rSum >= d) {\n                    g.get(i).add(j);\n                    g.get(j).add(i);\n                }\n            }\n        }\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] c) {\n        int n = c.length;\n        List<int[]> circles = getCircles(c);\n        List<List<Integer>> g = createGraph(n);\n        connectEdges(g, circles, n, X, Y);\n\n        boolean blocked = bfs(g, n, n + 1, n + 2, n);\n        blocked = blocked || bfs(g, n + 3, n + 2, n + 1, n);\n        \n        return !blocked;\n    }\n}\n",
    "submit_ts": "1722136279",
    "subm_id": "1335729362"
}