{
    "username": "nqvr",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        def process(L):\n            while len(L) >= 2 and L[0] <= L[1]:\n                L.pop(0)\n            while len(L) >= 2 and L[-2] >= L[-1]:\n                L.pop()\n            print(L)\n\n            if len(L) == 1:\n                return L[0]\n\n            minv = min(L)\n            l = [e - minv for e in L]\n            N = len(l)\n\n            ll = []\n            i = 0\n            while True:\n                while i < N and l[i] == 0:\n                    i += 1\n                if i == N:\n                    break\n                buffer = []\n                while i < N and l[i] > 0:\n                    buffer.append(l[i])\n                    i += 1\n                ll.append(buffer)\n                if i == N:\n                    break\n            \n            ans = minv\n            for e in ll:\n                ans += process(e)\n            return ans\n\n        N = len(nums)\n        diff = [target[i] - nums[i] for i in range(N)]\n\n\n        L = []\n\n        i = 0\n        while True:\n            while i < N and diff[i] == 0:\n                i += 1\n            if i == N:\n                break\n            pos = (diff[i] > 0)\n            buffer = []\n            while i < N and (diff[i] > 0) == pos:\n                buffer.append(diff[i] if pos else -diff[i])\n                i += 1\n            L.append(buffer)\n\n\n        ans = 0\n        for l in L:\n            ans += process(l)\n        return ans\n    \n    ",
    "submit_ts": "1721531859",
    "subm_id": "1327971659"
}