{
    "username": "death_of_might",
    "submission": "\n#define ll long long\n\n\nclass Solution {\npublic:\n    \n    ll stringtoint(string s)                              //string to ll\n{ stringstream in;in << s;ll val;in >> val;return val;}\nll binarystringtolongint(string s)\n{ return bitset<32>(s).to_ullong();}\nstring longtostring(ll val)\n{return bitset<32>(val).to_string();}\n\n    bool check(vector<ll> &req,vector<ll> &cnt,int end,int i,vector<int> &nums){\n\n        string temp=longtostring(nums[i]);\n\n            reverse(temp.begin(),temp.end());\n\n            string temp1=\"\";\n\n            for(int l=0;l<temp.size();l++){\n\n                ll cal=cnt[l];\n               \n               if(temp[l]==1)cal--;\n\n               if(cal==i-end)temp1+='1';\n               else temp1+='0';\n            }\n\n            reverse(temp1.begin(),temp1.end());\n            long long val=binarystringtolongint(temp1);\n\n\n           return val;\n\n\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n         int n = nums.size();\n    long long totalCnt = 0;\n    unordered_map<long long, long long> prevReq;\n\n    for (int i = 0; i < n; ++i) {\n        unordered_map<long long, long long> currReq;\n\n        if (nums[i] == k) {\n            totalCnt++;\n        }\n        currReq[nums[i]] = 1;\n\n        for (auto& [prevVal, prevFreq] : prevReq) {\n            long long newAndResult = prevVal & nums[i];\n            if (newAndResult == k) {\n                totalCnt += prevFreq;\n            }\n            currReq[newAndResult] += prevFreq;\n        }\n        \n        prevReq = currReq;\n    }\n    \n    return totalCnt;\n    }\n};",
    "submit_ts": "1720281148",
    "subm_id": "1311814853"
}