{
    "username": "suryaray345",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        // Calculate the diameters of the two individual trees\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> tree1 = buildTree(edges1, n);\n        vector<vector<int>> tree2 = buildTree(edges2, m);\n\n        int diameter1 = treeDiameter(tree1, n);\n        int diameter2 = treeDiameter(tree2, m);\n\n        // The minimum possible diameter of the resulting tree\n        return max(diameter1, max(diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1));\n    }\n\nprivate:\n    vector<vector<int>> buildTree(vector<vector<int>>& edges, int n) {\n        vector<vector<int>> tree(n);\n        for (const auto& edge : edges) {\n            tree[edge[0]].push_back(edge[1]);\n            tree[edge[1]].push_back(edge[0]);\n        }\n        return tree;\n    }\n\n    int treeDiameter(const vector<vector<int>>& tree, int n) {\n        vector<int> result = bfs(tree, n, 0);\n        result = bfs(tree, n, result[0]);\n        return result[1];\n    }\n\n    vector<int> bfs(const vector<vector<int>>& tree, int n, int start) {\n        queue<int> q;\n        vector<bool> visited(n, false);\n        vector<int> distance(n, 0);\n\n        q.push(start);\n        visited[start] = true;\n\n        int farthestNode = start;\n        int maxDistance = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : tree[node]) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = true;\n                    distance[neighbor] = distance[node] + 1;\n                    q.push(neighbor);\n                    if (distance[neighbor] > maxDistance) {\n                        maxDistance = distance[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, maxDistance};\n    }\n};\n",
    "submit_ts": 1719719447.0
}