{
    "username": "jxli",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        def insert(trie, word, cost):\n            for ch in word:\n                if ch not in trie:\n                    trie[ch] = {}\n                trie = trie[ch]\n                \n            trie['@'] = min(cost, trie.get('@', inf))\n            \n        root = {}\n        for i, word in enumerate(words):\n            insert(root, word, costs[i])\n        \n        @cache\n        def find(i):\n            if i == len(target):\n                return 0\n                \n            trie = root\n            res = inf\n            for j in range(i, len(target)):\n                ch = target[j]\n                if ch in trie:\n                    trie = trie[ch]\n                    cost = trie.get('@', -1)\n                    if cost > 0:\n                        r_cost = find(j + 1)\n                        if r_cost >= 0:\n                            res = min(res, cost + r_cost)\n                else:\n                    break\n                            \n            return res if res != inf else -1\n        \n        return find(0)\n                        \n                        \n                \n                \n                 \n                \n                \n        ",
    "submit_ts": "1720324179",
    "subm_id": "1312393416"
}