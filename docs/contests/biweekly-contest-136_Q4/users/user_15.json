{
    "username": "rvrty5",
    "submission": "class Solution:\n    def timeTaken(self, edges):\n        def dfs(u, fa):\n            f[u] = 0\n            for v in graph[u]:\n                if v == fa:\n                    continue\n                dfs(v, u)\n                if v & 1:\n                    f[u] = max(f[u], f[v] + 1)\n                else:\n                    f[u] = max(f[u], f[v] + 2)\n\n        def d2(u, fa):\n            mx, mxv = -1, -1\n            smx, smxv = -1, -1\n            for v in graph[u]:\n                if v == fa:\n                    continue\n                t = (f[v] + 1) if (v & 1) else (f[v] + 2)\n                if t > mx:\n                    smx, smxv = mx, mxv\n                    mx, mxv = t, v\n                elif t > smx:\n                    smx, smxv = t, v\n            tu = 1 if (u & 1) else 2\n            for v in graph[u]:\n                if v == fa:\n                    continue\n                if v == mxv:\n                    g[v] = max(g[v], max(g[u], smx) + tu)\n                else:\n                    g[v] = max(g[v], max(g[u], mx) + tu)\n                d2(v, u)\n\n        n = len(edges) + 1\n        graph = [[] for _ in range(n)]\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        f, g = [0] * n, [0] * n\n        dfs(0, -1)\n        d2(0, -1)\n        for i in range(n):\n            g[i] = max(g[i], f[i])\n        return g",
    "submit_ts": "1722696475",
    "subm_id": "1343109197"
}