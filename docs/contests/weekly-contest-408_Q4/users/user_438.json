{
    "username": "Saurabh_1008",
    "submission": "class Solution {  \npublic:  \n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {  \n        queue<int> q;  \n        vector<int> visited(nodes + 4, 0);  \n        q.push(start);  \n        visited[start] = 1;  \n\n        while (!q.empty()) {  \n            int u = q.front();  \n            q.pop();  \n            for (int v : graph[u]) {  \n                if (!visited[v]) {  \n                    q.push(v);  \n                    visited[v] = 1;  \n                }  \n            }  \n        }  \n        return visited[target1] || visited[target2];  \n    }  \n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {  \n        vector<pair<pair<int, int>, int>> circles(circles2.size());  \n        vector<vector<int>> graph(circles2.size() + 4);  \n        int numCircles = circles2.size();  \n\n        for (int i = 0; i < numCircles; ++i) {  \n            circles[i].first.first = circles2[i][0];  \n            circles[i].first.second = circles2[i][1];  \n            circles[i].second = circles2[i][2];  \n        }  \n\n        for (int i = 0; i < numCircles; ++i) {  \n            if (circles[i].first.first <= circles[i].second) {  \n                graph[numCircles].push_back(i);  \n                graph[i].push_back(numCircles);  \n            }  \n            if (X - circles[i].first.first <= circles[i].second) {  \n                graph[numCircles + 2].push_back(i);  \n                graph[i].push_back(numCircles + 2);  \n            }  \n            if (circles[i].first.second <= circles[i].second) {  \n                graph[numCircles + 1].push_back(i);  \n                graph[i].push_back(numCircles + 1);  \n            }  \n            if (Y - circles[i].first.second <= circles[i].second) {  \n                graph[numCircles + 3].push_back(i);  \n                graph[i].push_back(numCircles + 3);  \n            }  \n\n            for (int j = i + 1; j < numCircles; ++j) {  \n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +  \n                                       pow(circles[i].first.second - circles[j].first.second, 2));  \n                int radiusSum = circles[i].second + circles[j].second;  \n                if (radiusSum >= distance) {  \n                    graph[i].push_back(j);  \n                    graph[j].push_back(i);  \n                }  \n            }  \n        }  \n\n        int cornerBlocked = 0;   \n        cornerBlocked = max(cornerBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));  \n        cornerBlocked = max(cornerBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));  \n\n        if (cornerBlocked) {  \n            return false;  \n        }  \n        return true;  \n    }  \n};",
    "submit_ts": "1722137715",
    "subm_id": "1335771627"
}