{
    "username": "SR3mix",
    "submission": "typedef long long ll;\n\nclass UnionFind {\nprivate:\n    vector<int> parent; \n    vector<int> rank;\n    vector<int> counts;\n    int groups;\npublic:\n    UnionFind(int size) {\n        groups = size;\n        parent.resize(size, 0);\n        rank.resize(size, 0);\n        counts.resize(size, 1);\n        for (int i = 0; i < size; ++i) parent[i] = i;\n    }\n    int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n    void join(int x, int y) {\n        int pX = find(x);\n        int pY = find(y);\n        if (pX == pY) return;\n        if (rank[pX] > rank[pY]) {\n            parent[pY] = pX;\n            counts[pX] += counts[pY];\n        }\n        else if (rank[pX] < rank[pY]) {\n            parent[pX] = pY;\n            counts[pY] += counts[pX];\n        }\n        else {\n            parent[pY] = pX;\n            counts[pX] += counts[pY]; \n            rank[pX]++;\n        }\n        groups--;\n    }\n    int count(int x) {\n        return counts[find(x)];\n    }\n    int groupCount() {return groups;}\n};\n// CREDIT TO kaminyou FOR THIS TEMPLATE -> https://leetcode.com/kaminyou/\n\n\nclass Solution {\npublic:\n    bool areaIn(ll X, ll Y, ll x, ll y, ll r) {\n        if (x >= 0 && x <= X && y >= 0 && y <= Y) return true;\n        if (abs(x) <= r) {\n            ll xd = abs(x);\n            ll yd1 = abs(y);\n            ll yd2 = abs(y - Y);\n            if (y >= 0 && y <= Y) {\n                return true;\n            }\n            else if ((yd1 * yd1 + xd * xd <= r * r) || (yd2 * yd2 + xd * xd <= r * r)) {\n                return true;\n            }\n        }\n        // For it[0]\n        if (abs(y) <= r) {\n            ll yd = abs(y);\n            ll xd1 = abs(x);\n            ll xd2 = abs(x - X);\n            if (x >= 0 && x <= X) {\n                return true;\n            }\n            else if ((xd1 * xd1 + yd * yd <= r * r) || (xd2 * xd2 + yd * yd <= r * r)) {\n                return true;\n            }\n        }\n        // For it[3]\n        if (abs(x - X) <= r) {\n            ll xd = abs(x - X);\n            ll yd1 = abs(y);\n            ll yd2 = abs(y - Y);\n            if (y >= 0 && y <= Y) {\n                return true;\n            }\n            else if ((yd1 * yd1 + xd * xd <= r * r) || (yd2 * yd2 + xd * xd <= r * r)) {\n                return true;\n            }\n        }\n        // For it[2]\n        if (abs(y - Y) <= r) {\n            ll yd = abs(y);\n            ll xd1 = abs(x);\n            ll xd2 = abs(x - X);\n            if (x >= 0 && x <= X) {\n                return true;\n            }\n            else if ((xd1 * xd1 + yd * yd <= r * r) || (xd2 * xd2 + yd * yd <= r * r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        UnionFind uf(n);\n        //cout << \"X: \" << X << \" and Y: \" << Y << endl; \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) continue;\n                ll r1 = circles[i][2], x1 = circles[i][0], y1 = circles[i][1];\n                ll r2 = circles[j][2], x2 = circles[j][0], y2 = circles[j][1];\n                if (!areaIn(X, Y, x1, y1, r1)) continue;\n                if (!areaIn(X, Y, x2, y2, r2)) continue;\n                //cout << \"checking \" << i << \" and \" << j << endl;\n                ll md = (r1 + r2) * (r1 + r2);\n                ll td = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n                if (td <= md) {\n                    uf.join(i,j);\n                }\n            }\n        }\n        \n        vector<vector<int>>gs(n);\n        for (int i = 0; i < n; i++) gs[uf.find(i)].push_back(i);\n        \n        // for (auto i : gs) {\n        //     for (auto j : i) {\n        //         cout << j << \",\";\n        //     }\n        //     cout << endl;\n        // }\n        \n        for (auto &tv : gs) {\n            if (tv.size() == 0) continue;\n            vector<int>it(4);\n            for (auto i : tv) {\n                ll r = circles[i][2], x = circles[i][0], y = circles[i][1];\n                // For it[1]\n                // need yd * yd + xd * xd <= r^2\n                if (abs(x) <= r) {\n                    ll xd = abs(x);\n                    ll yd1 = abs(y);\n                    ll yd2 = abs(y - Y);\n                    if (y >= 0 && y <= Y) {\n                        it[1] = 1;\n                    }\n                    else if ((yd1 * yd1 + xd * xd <= r * r) || (yd2 * yd2 + xd * xd <= r * r)) {\n                        it[1] = 1;\n                    }\n                }\n                // For it[0]\n                if (abs(y) <= r) {\n                    ll yd = abs(y);\n                    ll xd1 = abs(x);\n                    ll xd2 = abs(x - X);\n                    if (x >= 0 && x <= X) {\n                        it[0] = 1;\n                    }\n                    else if ((xd1 * xd1 + yd * yd <= r * r) || (xd2 * xd2 + yd * yd <= r * r)) {\n                        it[0] = 1;\n                    }\n                }\n                // For it[3]\n                if (abs(x - X) <= r) {\n                    ll xd = abs(x - X);\n                    ll yd1 = abs(y);\n                    ll yd2 = abs(y - Y);\n                    if (y >= 0 && y <= Y) {\n                        it[3] = 1;\n                    }\n                    else if ((yd1 * yd1 + xd * xd <= r * r) || (yd2 * yd2 + xd * xd <= r * r)) {\n                        it[3] = 1;\n                    }\n                }\n                // For it[2]\n                if (abs(y - Y) <= r) {\n                    ll yd = abs(y);\n                    ll xd1 = abs(x);\n                    ll xd2 = abs(x - X);\n                    if (x >= 0 && x <= X) {\n                        it[2] = 1;\n                    }\n                    else if ((xd1 * xd1 + yd * yd <= r * r) || (xd2 * xd2 + yd * yd <= r * r)) {\n                        it[2] = 1;\n                    }\n                }\n            }\n            int tot = accumulate(it.begin(), it.end(), 0);\n            if (tot > 2) return false;\n            if (tot == 2) {\n                if (it[0] && it[1]) return false;\n                if (it[0] && it[2]) return false;\n                if (it[1] && it[3]) return false;\n                if (it[2] && it[3]) return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136756",
    "subm_id": "1335744036"
}