{
    "username": "aliakseivitenka",
    "submission": "class Solution {\n    \n    private class QueueItem {\n        \n        final int num;\n        final long pos;\n        final long jump;\n        final boolean goBackPrev;\n        \n        QueueItem(int _n, long _pos, long _jump, boolean _goBackPrev) {\n            num = _n;\n            pos = _pos;\n            jump = _jump;\n            goBackPrev = _goBackPrev;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            QueueItem queueItem = (QueueItem) o;\n            return pos == queueItem.pos && jump == queueItem.jump && goBackPrev == queueItem.goBackPrev;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(pos, jump, goBackPrev);\n        }\n        \n    }\n    \n    public int waysToReachStair(int k) {\n        Map<QueueItem, Integer> dp = new HashMap<>();\n        \n//         Queue<QueurItem> queue = new LinkedList<>();\n        \n//         queue.offer(new QueueItem(1, 1, 1, false));\n        \n//         while (!queue.isEmpty()) {\n//             QueueItem next = queue.remove();\n//             if (cur > 1000000001) {\n//                 return 0;\n//             }\n//             int sum = 0;\n//             if (!goBackPrev && cur > 0) {\n//                 sum += num(k, cur - 1, true, jump);\n//             }\n//             sum += num(k, cur + (jump), false, (2 * jump));\n//             return sum;\n//         }\n        return num(k, 1, false, 1, dp);\n    }\n    \n    private int toInt(boolean b) {\n        return b ? 1 : 0;\n    }\n    \n    private int pow(int num2) {\n        int sum = 0;\n        while (num2 > 0) {\n            sum++;\n            num2 >>= 1;\n        }\n        return sum;\n    }\n    \n    private int num(int k, long cur, boolean goBackPrev, long jump, Map<QueueItem, Integer> dp) {\n        if (cur > k + 1) {\n            return 0;\n        }\n        if (cur > 1000000001) {\n            return 0;\n        }\n        QueueItem key = new QueueItem(0, cur, jump, goBackPrev);\n        Integer res = dp.get(key);\n        if (res == null) {\n            int sum = 0;\n            if (k == cur) {\n                sum += 1;\n            }\n            if (!goBackPrev && cur > 0) {\n                sum += num(k, cur - 1, true, jump, dp);\n            }\n            sum += num(k, cur + (jump), false, (2 * jump), dp);\n            dp.put(key, sum);\n            res = sum;\n        }\n        return res;\n    }\n}",
    "submit_ts": 1716088730.0
}