{
    "username": "zeningc",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> ans = new ArrayList<>();\n        SegmentTree st = new SegmentTree(0, nums.length - 1, 0);\n        for (int i = 1; i < nums.length - 1; i++)\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                st.update(i, 1);\n        \n        for (int[] q : queries) {\n            int type = q[0];\n            if (type == 1)  {\n                int left = q[1] + 1;\n                int right = q[2] - 1;\n                if (left > right)   {\n                    ans.add(0);\n                    continue;\n                }\n                ans.add(st.query(left, right));\n                continue;\n            }\n            int idx = q[1];\n            int val = q[2];\n            int leftPeak = peakCnt(nums, idx - 1);\n            int rightPeak = peakCnt(nums, idx + 1);\n            int curPeak = peakCnt(nums, idx);\n            nums[idx] = val;\n            int leftPeakAfter = peakCnt(nums, idx - 1);\n            int rightPeakAfter = peakCnt(nums, idx + 1);\n            int curPeakAfter = peakCnt(nums, idx);\n            \n            if (idx > 0 && leftPeak != leftPeakAfter)\n                st.update(idx - 1, leftPeakAfter);\n            \n            if (idx < nums.length - 1 && rightPeak != rightPeakAfter)\n                st.update(idx + 1, rightPeakAfter);\n            \n            if (curPeak != curPeakAfter)\n                st.update(idx, curPeakAfter);\n        }\n        \n        return ans;\n    }\n    \n    int peakCnt(int[] nums, int idx) {\n        if (idx <= 0 || idx >= nums.length - 1)\n            return 0;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1] ? 1 : 0;\n    }\n}\n\nclass SegmentTree   {\n    Node root;\n    \n    public SegmentTree(int lo, int hi, int val)  {\n        root = buildTree(lo, hi, val);\n    }\n    \n    private Node buildTree(int lo, int hi, int val)  {\n        if (lo == hi)\n            return new Node(lo, hi, val);\n        int mid = getMid(lo, hi);\n        return new Node(lo, hi, val, buildTree(lo, mid, val), buildTree(mid + 1, hi, val));\n    }\n    \n    private int getMid(int lo, int hi)  {\n        return lo + (hi - lo) / 2;\n    }\n    \n    private void update(Node node, int lo, int hi, int val) {\n        if (node.lo == node.hi && node.hi == hi)   {\n            node.val = val;\n            return;\n        }\n        \n        int mid = getMid(node.lo, node.hi);\n        \n        if (hi <= mid)  {\n            update(node.left, lo, hi, val);\n        }\n        else if (lo > mid)  {\n            update(node.right, lo, hi, val);\n        }\n        else    {\n            update(node.left, lo, mid, val);\n            update(node.right, mid + 1, hi, val);\n        }\n        \n        node.val = node.left.val + node.right.val;\n    }\n    \n    public void update(int lo, int hi, int val)   {\n        update(root, lo, hi, val);\n    }\n    \n    public void update(int idx, int val)    {\n        update(idx, idx, val);\n    }\n    \n    private int query(Node node, int lo, int hi)   {\n        if (lo == node.lo && hi == node.hi)\n            return node.val;\n        \n        int mid = getMid(node.lo, node.hi);\n        if (hi <= mid)\n            return query(node.left, lo, hi);\n        else if (lo > mid)\n            return query(node.right, lo, hi);\n        \n        return query(node.left, lo, mid) + query(node.right, mid + 1, hi);\n    }\n    \n    public int query(int lo, int hi)    {\n        return query(root, lo, hi);\n    }\n}\n\nclass Node  {\n    int val;\n    int lo;\n    int hi;\n    Node left;\n    Node right;\n    \n    public Node(int lo, int hi, int val)    {\n        this.lo = lo;\n        this.hi = hi;\n        this.val = val;\n    }\n    \n    public Node(int lo, int hi, int val, Node left, Node right) {\n        this(lo, hi, val);\n        this.left = left;\n        this.right = right;\n    }\n}",
    "submit_ts": "1718508022",
    "subm_id": "1289669465"
}