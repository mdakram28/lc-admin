{
    "username": "adithyag1",
    "submission": "class Solution {\npublic:\n    int dp[30][30][30][30][4],area[30][30][30][30];\n    int minimumArea(int l,int r,int u,int d,vector<vector<int>>& grid) {\n        int n=grid.size(),m=grid[0].size();\n        if((l>=m || u>=n || r<0 || d<0))\n            return 901;\n        if(area[l][r][u][d]!=-1){\n            return area[l][r][u][d];\n        }\n        int foundone=0;\n        int minl=r,maxr=l,minu=d,maxd=u;\n        for(int i=u;i<=d;i++){\n            for(int j=l;j<=r;j++){\n                if(grid[i][j]){\n                    foundone=1;\n                    minl=min(j,minl);\n                    maxr=max(j,maxr);\n                    minu=min(i,minu);\n                    maxd=max(i,maxd);\n                }\n            }\n        }\n        return area[l][r][u][d]=foundone*(maxr-minl+1)*(maxd-minu+1);\n    }\n    int solve(int l,int r,int u,int d,int avlsplits,vector<vector<int>> &grid){\n        //cout<<l<<\" \"<<r<<\" \"<<u<<\" \"<<d<<\" \"<<avlsplits<<endl;\n        int n=grid.size(),m=grid[0].size();\n        if(avlsplits==0 || l==m || u==n || r==-1 || d==-1){\n             if((l==m || u==n || r==-1 || d==-1) && avlsplits==0)\n                return 0;\n            return 901;\n        }\n        if(dp[l][r][u][d][avlsplits]!=-1){\n            return dp[l][r][u][d][avlsplits];\n        }\n        int ans=901;\n        for(int newl=l+1;newl<=m;newl++){\n            ans=min(ans,\n            minimumArea(l,newl-1,u,d,grid)+solve(newl,r,u,d,avlsplits-1,grid));\n        }\n        for(int newu=u+1;newu<=n;newu++){\n            ans=min(ans,\n            minimumArea(l,r,u,newu-1,grid)+solve(l,r,newu,d,avlsplits-1,grid));\n        }\n        for(int newr=r-1;newr>=-1;newr--){\n            ans=min(ans,\n            minimumArea(newr+1,r,u,d,grid)+solve(l,newr,u,d,avlsplits-1,grid));\n        }\n        for(int newd=d-1;newd>=-1;newd--){\n            ans=min(ans,\n            minimumArea(l,r,newd+1,d,grid)+solve(l,r,u,newd,avlsplits-1,grid));\n        }\n        return dp[l][r][u][d][avlsplits]=ans;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        fill(&dp[0][0][0][0][0], &dp[0][0][0][0][0] + sizeof(dp) / sizeof(dp[0][0][0][0][0]), -1);\n        fill(&area[0][0][0][0], &area[0][0][0][0] + sizeof(area) / sizeof(area[0][0][0][0]), -1);\n    \n        int n=grid.size(),m=grid[0].size();\n        return solve(0,m-1,0,n-1,3,grid);\n    }\n};",
    "submit_ts": "1719115182",
    "subm_id": "1297362372"
}