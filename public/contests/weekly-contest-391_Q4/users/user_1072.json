{
    "username": "aaronyen",
    "submission": "class MINBIT:\n    def __init__(self, n):\n        self.bit = [float('inf')] * (n + 1)\n        self.n = n\n        \n    def update(self, idx, val):\n        while idx <= self.n:\n            self.bit[idx] = min(self.bit[idx], val)\n            idx += idx & -idx\n    \n    def getmin(self, idx):\n        res = float('inf')\n        while idx > 0:\n            res = min(res, self.bit[idx])\n            idx -= idx & -idx\n        return res\n\n    \nclass MAXBIT:\n    def __init__(self, n):\n        self.bit = [-float('inf')] * (n + 1)\n        self.n = n\n        \n    def update(self, idx, val):\n        while idx <= self.n:\n            self.bit[idx] = max(self.bit[idx], val)\n            idx += idx & -idx\n    \n    def getmax(self, idx):\n        res = -float('inf')\n        while idx > 0:\n            res = max(res, self.bit[idx])\n            idx -= idx & -idx\n        return res\n\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        points, curidx, curval = self.helper(points)\n        \n            \n        # print(curval, curidx)\n        cnt = 0\n        idx2 = -1\n        x, y = points[curidx]\n        for i in range(n):\n            if i == curidx:\n                continue\n            diff = abs(points[i][0] - x) + abs(points[i][1] - y)\n            if diff == curval:\n                cnt += 1\n                idx2 = i\n        # print(cnt, idx2)\n\n        if cnt > 1:\n            points2, curidx2, curval2 = self.helper(points[0:curidx] + points[curidx + 1:])\n            return curval2\n        else:        \n            points2, curidx2, curval2 = self.helper(points[0:curidx] + points[curidx + 1:])\n            points3, curidx3, curval3 = self.helper(points[0:idx2] + points[idx2 + 1:])\n            return min(curval2, curval3)\n    \n    def helper(self, points):\n        points.sort()\n        ys = {y for x, y in points}\n        idx2y = {}\n        y2idx = {}\n        for idx, y in enumerate(sorted(ys)):\n            idx2y[idx + 1] = y\n            y2idx[y] = idx + 1\n        # print(idx2y, y2idx)\n        # print(points)\n        \n        n = len(points)\n        maxbit = MAXBIT(n) # idx1, y - x\n        minbit = MINBIT(n) # idx2, y + x\n        curmax = -float('inf')\n        curidx = -1\n        \n        for i, (x, y) in enumerate(points):\n            idx1 = y2idx[y]\n            idx2 = -idx1 + n + 1\n            # print(\"idxs\",idx1, idx2)\n            \n            val1 = maxbit.getmax(idx2)\n            # print(i, val1)\n            if val1 not in (float('inf'), -float('inf')) and (-y + x) + val1 > curmax:\n                curmax = (-y + x) + val1\n                curidx = i\n            \n            val2 = minbit.getmin(idx1)\n            # print(i, val2)\n            if val2 not in (float('inf'), -float('inf')) and (y + x) - val2 > curmax:\n                curidx = i\n                curmax = (y + x) - val2\n                \n            maxbit.update(idx2, y - x)\n            minbit.update(idx1, y + x)\n        return points, curidx, curmax\n            \n        \n        \n        "
}