{
    "username": "Chief-DS",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        // Function to find the diameter of a tree using BFS\n        auto findDiameter = [](const vector<vector<int>>& edges, int n) {\n            vector<vector<int>> adj(n);\n            for (const auto& edge : edges) {\n                adj[edge[0]].push_back(edge[1]);\n                adj[edge[1]].push_back(edge[0]);\n            }\n            \n            auto bfs = [&](int start) {\n                vector<int> dist(n, -1);\n                queue<int> q;\n                q.push(start);\n                dist[start] = 0;\n                int farthestNode = start;\n                \n                while (!q.empty()) {\n                    int node = q.front();\n                    q.pop();\n                    for (int neighbor : adj[node]) {\n                        if (dist[neighbor] == -1) {\n                            dist[neighbor] = dist[node] + 1;\n                            q.push(neighbor);\n                            if (dist[neighbor] > dist[farthestNode]) {\n                                farthestNode = neighbor;\n                            }\n                        }\n                    }\n                }\n                return make_pair(farthestNode, dist[farthestNode]);\n            };\n            \n            int u = bfs(0).first;\n            int diameter = bfs(u).second;\n            return diameter;\n        };\n        \n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        int diameter1 = findDiameter(edges1, n);\n        int diameter2 = findDiameter(edges2, m);\n        \n        // The minimum diameter after merging\n        int minDiameterAfterMerge = max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n        \n        return minDiameterAfterMerge;\n    }\n};\n",
    "submit_ts": "1719718316",
    "subm_id": "1304414171"
}