{
    "username": "mayj-u",
    "submission": "struct Node {\n    Node* left;\n    Node* right;\n    int count;\n    int min;\n    int max;\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        Node* node = new Node();\n        node->min = 0;\n        node->max = nums.size() - 1;\n        for(size_t i=1;i<nums.size()-1;++i) {\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                add(node,i);\n            }\n        }\n        vector<int> result;\n        for(auto& q : queries) {\n            if(q[0] == 1) {\n                if(q[1] >= q[2] - 1) {\n                    result.emplace_back(0);\n                } else {\n                    result.emplace_back(query(node,q[1]+1,q[2]-1));\n                }\n            } else {\n                auto i = q[1];\n                if(i > 1) {\n                    if(q[2] >= nums[i-1] && nums[i] < nums[i-1] &&  nums[i-1] > nums[i-2]) {\n                        remove(node,i-1);\n                    }\n                    if(q[2] < nums[i-1] && nums[i] >= nums[i-1] &&  nums[i-1] > nums[i-2]) {\n                        add(node,i-1);\n                    }\n                }\n                if(i < nums.size() - 2) {\n                    if(q[2] >= nums[i+1] && nums[i] < nums[i+1] &&  nums[i+1] > nums[i+2]) {\n                        remove(node,i+1);\n                    }\n                    if(q[2] < nums[i+1] && nums[i] >= nums[i+1] &&  nums[i+1] > nums[i+2]) {\n                        add(node,i+1);\n                    }\n                }\n                if(i > 0 && i < nums.size()-1) {\n                    if(q[2] > nums[i-1] && q[2] > nums[i+1] && (nums[i] <= nums[i-1] || nums[i] <= nums[i+1])) {\n                        add(node,i);\n                    }\n                    if((q[2] <= nums[i-1] || q[2] <= nums[i+1]) && nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                        remove(node,i);\n                    }\n                }\n                nums[i] = q[2];\n            }\n        }\n        return result;\n    }\n    \n    void add(Node* node,int num) {\n        node->count++;\n        if(node->min == node->max) {\n            return;\n        }\n        auto mid = (node->min + node->max) / 2;\n        if(num <= mid) {\n            if(node->left == nullptr) {\n                node->left = new Node();\n                node->left->min = node->min;\n                node->left->max = mid;\n            }\n            add(node->left,num);\n        } else {\n            if(node->right == nullptr) {\n                node->right = new Node();\n                node->right->min = mid + 1;\n                node->right->max = node->max;\n            }\n            add(node->right,num);\n        }\n    }\n    \n    void remove(Node* node,int num) {\n        node->count--;\n        if(node->min == node->max) {\n            return;\n        }\n        auto mid = (node->min + node->max) / 2;\n        if(num <= mid) {\n            if(node->left == nullptr) {\n                node->left = new Node();\n                node->left->min = node->min;\n                node->left->max = mid;\n            }\n            remove(node->left,num);\n        } else {\n            if(node->right == nullptr) {\n                node->right = new Node();\n                node->right->min = mid + 1;\n                node->right->max = node->max;\n            }\n            remove(node->right,num);\n        }\n    }\n    \n    int query(Node* node,int min,int max) {\n        if(node->min >= min && node->max <= max) {\n            return node->count;\n        }\n        auto mid = (node->min + node->max) / 2;\n        int result = 0;\n        if(min <= mid) {\n            if(node->left == nullptr) {\n                node->left = new Node();\n                node->left->min = node->min;\n                node->left->max = mid;\n            }\n            result += query(node->left,min,max);\n        }\n        if(max > mid) {\n            if(node->right == nullptr) {\n                node->right = new Node();\n                node->right->min = mid + 1;\n                node->right->max = node->max;\n            }\n            result += query(node->right,min,max);\n        }\n        return result;\n    }\n};",
    "submit_ts": "1718507070",
    "subm_id": "539779059"
}