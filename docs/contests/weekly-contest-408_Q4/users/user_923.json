{
    "username": "tlecodes",
    "submission": "class Solution {\npublic:\n    bool isBlocked(vector<vector<int>> &obstacles, int curr, int dest1, int dest2, int size) {\n        queue<int> q;\n        vector<bool> vis(size, false);\n        q.push(curr);\n        vis[curr] = true;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int next : obstacles[node]) {\n                if (!vis[next]) {\n                    q.push(next);\n                    vis[next] = true;\n                }\n            }\n        }\n        return (vis[dest1] || vis[dest2]);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size(), size = n + 4;\n        vector<pair<pair<int, int>, int>> adj;\n        vector<vector<int>> obstacles(size, vector<int>());\n        for (int i = 0; i < n; i++) {\n            adj.push_back({{circles[i][0], circles[i][1]}, circles[i][2]});\n        }\n        for (int i = 0; i < n; i++) {\n            auto curr = adj[i];\n            if (curr.first.first <= curr.second) {\n                obstacles[i].push_back(n);\n                obstacles[n].push_back(i);\n            }\n            if (curr.first.second <= curr.second) {\n                obstacles[i].push_back(n + 1);\n                obstacles[n + 1].push_back(i);\n            }\n            if (X - curr.first.first <= curr.second) {\n                obstacles[i].push_back(n + 2);\n                obstacles[n + 2].push_back(i);\n            }\n            if (Y - curr.first.second <= curr.second) {\n                obstacles[i].push_back(n + 3);\n                obstacles[n + 3].push_back(i);\n            }\n            for (int j = i + 1; j < n; j++) {\n                auto next = adj[j];\n                int radius = curr.second + next.second;\n                double dx = pow(curr.first.first - next.first.first, 2);\n                double dy = pow(curr.first.second - next.first.second, 2);\n                double distance = sqrt(dx + dy);\n                if (radius >= distance) {\n                    obstacles[i].push_back(j);\n                    obstacles[j].push_back(i);\n                }\n            }\n        }\n        if (isBlocked(obstacles, n, n + 1, n + 2, size) || isBlocked(obstacles, n + 3, n + 2, n + 1, size)) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138686",
    "subm_id": "1335797086"
}