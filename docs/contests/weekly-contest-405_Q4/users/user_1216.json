{
    "username": "AdarshVishwakarma12",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.end_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for sub_val in word:\n            if sub_val not in node.children:\n                node.children[sub_val] = TrieNode()\n            node = node.children[sub_val]\n        node.end_word = True\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        cache = [float('inf')] * (len(target) + 1); cache[0]=0;\n        trie = Trie();\n        for i in range(len(words)): trie.insert(words[i], costs[i]);\n        n = len(target);\n        \n        for i in range(len(target)):\n            if cache[i] == float('inf'): continue \n            \n            node = trie.root\n            for j in range(i, len(target)):\n                sub_val = target[j]\n                if sub_val not in node.children: break \n                node = node.children[sub_val]\n                if node.end_word: cache[j+1] = min(cache[j+1], cache[i]+node.cost)\n        \n        return cache[n] if cache[n] != float('inf') else -1",
    "submit_ts": "1720323413",
    "subm_id": "1312374971"
}