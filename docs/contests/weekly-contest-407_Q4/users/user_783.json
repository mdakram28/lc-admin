{
    "username": "characterless",
    "submission": "class Solution {\npublic:\n    long long cal(vector<long long>& target) {\n        vector<long long> stack;\n        long long res = 0;\n\n        stack.push_back(target[0]);\n        for (long long i = 1; i < target.size(); i++) {\n            if (target[i] > stack.back()) {\n                stack.push_back(target[i]);\n                continue;\n            } \n            if (target[i] == stack.back())\n                continue;\n\n            long long top = stack.back();\n\n            while (!stack.empty() && target[i] < stack.back())\n                stack.pop_back();\n\n            res += top - target[i];\n            stack.push_back(target[i]);\n        }\n        \n        if (!stack.empty())\n            res += stack.back();\n\n        return res;\n    }\n\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        long long n = nums.size();\n        vector<long long> diff(n),temp;\n        for(long long i=0; i<n; i++){\n            diff[i] = target[i] - nums[i];\n        }\n        long long ans =0;\n        \n        for(long long i=0; i<n-1; i++){\n            if(diff[i]*diff[i+1] < 0){\n                temp.push_back(abs(diff[i]));\n                ans += cal(temp);\n                temp.clear();\n            }else{\n                temp.push_back(abs(diff[i]));\n            }\n        }\n        temp.push_back(abs(diff[n-1]));\n        ans += cal(temp);\n        return ans;\n    }\n};",
    "submit_ts": "1721531550",
    "subm_id": "1327963766"
}