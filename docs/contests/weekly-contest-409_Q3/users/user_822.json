{
    "username": "ou-hai-ziJHu23dNZ",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        // \u5927\u7684\u4e00\u5b9a\u5403\u5c0f\u7684\n        // \u9047\u5230\u5927\u7684\u5c31\u76f4\u63a5\u7b97\n        // \u9047\u5230\u5c0f\u7684\u5ffd\u7565\n        int dp = n - 1;\n        int[] ans = new int[queries.length];\n        // \u521d\u59cbdp\n        Manager manager = new Manager(n - 1);\n        for (int i = 0; i < queries.length; i++) {\n            int[] query = queries[i];\n            int left = query[0];\n            int right = query[1];\n            // \u662f\u5426\u88ab\u5305\u56f4\uff1f\n            if (manager.judgeBaoWei(left, right - 1)) {\n                ans[i] = dp;\n                continue;\n            }\n            // \u6ca1\u88ab\u5305\u56f4\uff0c\u5185\u90e8\u6709\u51e0\u6bb5\uff0c\u5360\u591a\u5c11\u9762\u79ef\uff1f\n            int regionArea = manager.getRegionArea(left, right - 1);\n            int regions = manager.getRegionsAndRemove(left, right - 1);\n            int preCost = right - left - regionArea + regions;\n            dp = dp - preCost + 1;\n            ans[i] = dp;\n            manager.addRegion(new int[] {left, right - 1});\n        }\n        return ans;\n    }\n\n    public class Manager {\n\n        private SegmentTree segmentTree;\n\n        private TreeSet<int[]> regions;\n\n        public Manager(int n) {\n            // \u521d\u59cb\u5316\n            segmentTree = new SegmentTree(0, n);\n            regions = new TreeSet<>((a, b) -> {\n                if (a[1] == b[1]) {\n                    return b[0] - a[0];\n                } else {\n                    return a[1] - b[1];\n                }\n            });\n        }\n\n        public boolean judgeBaoWei(int left, int right) {\n            // \u5224\u65ad\u662f\u5426\u88ab\u5305\u56f4\n            int[] floor = regions.floor(new int[]{left, right});\n            // \u5185\u90e8\u6709\uff0c\u80af\u5b9a\u6ca1\u88ab\u5305\u56f4\n            if (floor != null && floor[0] >= left && floor[1] <= right) {\n                return false;\n            }\n            // \u5185\u90e8\u6ca1\u6709\uff0c\u6ee1\u4e86\u5c31\u662f\u88ab\u5305\u56f4\n            return segmentTree.queryForSum(left, right + 1) == right - left + 1;\n        }\n\n        public void addRegion(int[] region) {\n            // \u6dfb\u52a0\u533a\u57df,\u8986\u76d6\u5185\u90e8\n            regions.add(region);\n            segmentTree.update(region[0], region[1] + 1, 1);\n        }\n\n        public int getRegionArea(int left, int right) {\n            // \u83b7\u53d6\u533a\u57df\u9762\u79ef\n            return (int) segmentTree.queryForSum(left, right + 1);\n        }\n\n        public int getRegionsAndRemove(int left, int right) {\n            // \u95ed\u533a\u95f4\u83b7\u53d6\u73b0\u5728\u533a\u95f4\u4e2a\u6570\n            // \u76f4\u63a5poll\u51fa\u6765\n            int count = 0;\n            int[] ints = {left, right};\n            while (!regions.isEmpty()) {\n                int[] floor = regions.floor(ints);\n                if (floor != null && floor[0] >= left && floor[1] <= right) {\n                    regions.remove(floor);\n                    count++;\n                } else {\n                    break;\n                }\n            }\n            return count;\n        }\n\n\n    }\n\n\n    public class SegmentTree {\n\n    // \u6240\u6709\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff01\uff01\uff01\uff01\uff01\n    public Node root;\n\n    public SegmentTree(long left, long right) {\n        root = new Node();\n        root.left = left;\n        root.right = right;\n    }\n\n    // \u5bf9\u533a\u95f4\u589e\u52a0val\n    public void add(long left, long right, int val) {\n        addWithNode(root, left, right, val);\n    }\n\n    public void add(long left, long right, long val) {\n        addWithNode(root, left, right, val);\n    }\n\n    // \u5c06\u533a\u95f4\u91cd\u7f6e\u6210val\n    public void update(long left, long right, long val) {\n        updateWithNode(root, left, right, val);\n    }\n\n    // \u67e5\u8be2\u6700\u5927\u503c\n    public long queryForMax(long left, long right) {\n        return queryForMaxWithNode(root, left, right);\n    }\n\n    // \u67e5\u8be2\u548c\n    public long queryForSum(long left, long right) {\n        return queryForSumWithNode(root, left, right);\n    }\n\n\n    private long queryForMaxWithNode(Node node, long left, long right) {\n        if (node == null) {\n            return 0;\n        }\n        if (node.left == left && node.right == right) {\n            return node.max;\n        }\n        long mid = (node.left + node.right) / 2;\n        pushDown(node);\n        long res = Long.MIN_VALUE;\n        if (left < mid) {\n            res = Math.max(queryForMaxWithNode(node.leftNode, left, Math.min(right, mid)), res);\n        }\n        if (right > mid) {\n            res = Math.max(queryForMaxWithNode(node.rightNode, Math.max(left, mid), right), res);\n        }\n        return res;\n    }\n\n    private long queryForSumWithNode(Node node, long left, long right) {\n        if (node == null) {\n            return 0;\n        }\n        if (node.left == left && node.right == right) {\n            return node.sum;\n        }\n        long mid = (node.left + node.right) / 2;\n        pushDown(node);\n        long res = 0;\n        if (left < mid) {\n            res += queryForSumWithNode(node.leftNode, left, Math.min(right, mid));\n        }\n        if (right > mid) {\n            res += queryForSumWithNode(node.rightNode, Math.max(left, mid), right);\n        }\n        return res;\n    }\n\n    private void updateWithNode(Node node, long left, long right, long val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum = (node.right - node.left) * val;\n            node.max = val;\n            node.add = val;\n            // \u7531\u4e8e\u662f\u91cd\u7f6e\u64cd\u4f5c\uff0c\u548cadd\u4e0d\u592a\u4e00\u6837\uff0c\u5c06\u5b69\u5b50\u8282\u70b9\u6e05\u7a7a\n            node.leftNode = null;\n            node.rightNode = null;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid) {\n            updateWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid) {\n            updateWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    // \u5f00\u533a\u95f4\n    private void addWithNode(Node node, long left, long right, int val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum += (node.right - node.left) * val;\n            node.max += val;\n            node.add += val;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid && node.leftNode != null) {\n            addWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid && node.rightNode != null) {\n            addWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    private void addWithNode(Node node, long left, long right, long val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum += (node.right - node.left) * val;\n            node.max += val;\n            node.add += val;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid && node.leftNode != null) {\n            addWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid && node.rightNode != null) {\n            addWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    // \u5411\u4e0b\u6c47\u603b\uff0c\u4fee\u6539\u3001\u67e5\u8be2\u5b50\u8282\u70b9\u4e4b\u524d\uff0c\u9700\u8981\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u6e05\u7a7a\u8282\u70b9add\u503c\n    private void pushDown(Node node) {\n        if (node == null) {\n            return;\n        }\n        if (node.left == node.right - 1) {\n            // \u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u4e0d\u7528\u4e0b\u63a8\u4e86\n            node.add = 0;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n        // \u52a8\u6001\u5f00\u70b9\n        if (node.leftNode == null) {\n            Node leftNode = new Node();\n            leftNode.left = node.left;\n            leftNode.right = mid;\n            node.leftNode = leftNode;\n        }\n        if (node.rightNode == null) {\n            Node rightNode = new Node();\n            rightNode.left = mid;\n            rightNode.right = node.right;\n            node.rightNode = rightNode;\n        }\n        if (node.add == 0) {\n            return;\n        }\n        // TODO \u5b9e\u65f6\u4e0b\u63a8\u7b54\u6848\n        node.leftNode.add += node.add;\n        node.leftNode.max += node.add;\n        node.leftNode.sum += node.add * (node.leftNode.right - node.leftNode.left);\n\n        node.rightNode.add += node.add;\n        node.rightNode.max += node.add;\n        node.rightNode.sum += node.add * (node.rightNode.right - node.rightNode.left);\n\n        node.add = 0;\n    }\n\n    // \u8ba1\u7b97\u5b8c\u5b50\u8282\u70b9\u540e\uff0c\u4e0a\u62a5\u4fe1\u606f\n    private void pushUp(Node node) {\n        if (node.leftNode != null && node.rightNode != null) {\n            // TODO \u6536\u96c6\u4e0b\u9762\u7684\u7b54\u6848\n            node.sum = node.leftNode.sum + node.rightNode.sum;\n            node.max = Math.max(node.leftNode.max, node.rightNode.max);\n        }\n    }\n\n    public class Node {\n        // [left,right) \u5de6\u95ed\u53f3\u5f00\u533a\u95f4\n        public long left;\n        public long right;\n\n        // \u533a\u95f4\u6700\u5927\u503c\n        long max = 0;\n        // \u533a\u95f4\u548c\n        long sum = 0;\n        // \u61d2\u6807\u8bb0(\u9700\u8981\u8c03\u6574\u7684\u5bc4\u5b58\u503c)\n        long add = 0;\n\n        // \u5b69\u5b50\u8282\u70b9\n        Node leftNode;\n        Node rightNode;\n    }\n}\n}",
    "submit_ts": "1722742912",
    "subm_id": "552347675"
}