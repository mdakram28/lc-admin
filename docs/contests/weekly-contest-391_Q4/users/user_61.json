{
    "username": "anhpp-i",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length, d[] = new int[n], p[] = new int[n];\n        for(int i = 0; i < n; i++) {\n            p[i] = points[i][0] + points[i][1];\n            d[i] = points[i][0] - points[i][1];\n        }\n        Arrays.sort(p);\n        Arrays.sort(d);\n        int res = 1_000_000_000;\n        for(int i = 0; i < n; i++) {\n            int pp = points[i][0] + points[i][1], dd = points[i][0] - points[i][1];\n            int max = -1_000_000_000;\n            max = (pp == p[0]) ? Math.max(max, p[n - 1] - p[1]) : (pp == p[n - 1]) ? Math.max(max, p[n - 2] - p[0]) : Math.max(max, p[n - 1] - p[0]);\n            max = (dd == d[0]) ? Math.max(max, d[n - 1] - d[1]) : (dd == d[n - 1]) ? Math.max(max, d[n - 2] - d[0]) : Math.max(max, d[n - 1] - d[0]);\n            res = Math.min(res, max);\n        }\n        return res;\n    }\n}"
}