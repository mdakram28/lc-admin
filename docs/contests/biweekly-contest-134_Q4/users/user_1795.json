{
    "username": "r07941023",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        arr = [0]*30\n        bits = bin(k)[2:][::-1]\n        for i in range(len(bits)):\n            arr[i] = int(bits[i])\n        \n        res = 0\n        block = -1\n        curr = [-1]*30\n        heap = []\n        for i in range(len(nums)):\n            if nums[i] & k != k:\n                block = i\n                curr = [-1]*30\n                heap = []\n                continue\n                \n            bits = bin(nums[i])[2:]\n            bits = (30-len(bits))*'0' + bits\n            state = True\n            for j in range(len(bits)):\n                if bits[len(bits)-j-1] == '0' and arr[j] == 0:\n                    curr[j] = i\n                    heappush(heap, [i, j])\n                if bits[len(bits)-j-1] == '1' and arr[j] == 0 and curr[j] == -1:\n                    state = False\n            if state == False:\n                continue\n                \n            if heap:\n                while True:\n                    arr_pos, bit_pos = heappop(heap)\n                    if curr[bit_pos] == arr_pos:\n                        break\n                heappush(heap, [arr_pos, bit_pos])\n                # print('1')\n                res += arr_pos-block\n            else:\n                # print('2')\n                res += i-block\n            # print(i, nums[i], res, block)\n        return res\n",
    "submit_ts": "1720281481",
    "subm_id": "1311826764"
}