{
    "username": "np_77",
    "submission": "#define ll long long\n\nclass Solution {\npublic:\n\nll modAdd(ll a, ll b, ll mod) {\n    return (a + b) % mod;\n}\n\n    ll solve(int index, int prev1, int prev2, vector<int>& numbers, vector<vector<vector<ll>>>& memo) {\n        const ll mod = 1e9 + 7;\n\n        // Base case\n        if (index >= numbers.size()) {\n            return 1;\n        }\n\n        // Return already computed result\n        if (memo[index][prev1][prev2] != -1) {\n            return memo[index][prev1][prev2];\n        }\n\n        ll result = 0;\n\n        // Create a temporary 1D dp array to store intermediate results\n        vector<ll> intermediate(prev2 + 1, 0);\n\n        // Fill the intermediate array based on possible values\n        for (int current = prev1; current <= numbers[index]; ++current) {\n            for (int remaining = 0; remaining <= prev2; ++remaining) {\n                if (current + remaining == numbers[index]) {\n                    intermediate[remaining] = modAdd(intermediate[remaining], solve(index + 1, current, remaining, numbers, memo), mod);\n                }\n            }\n        }\n\n        // Aggregate the results from intermediate array\n        for (int remaining = 0; remaining <= prev2; ++remaining) {\n            result = modAdd(result, intermediate[remaining], mod);\n        }\n\n        // Memoize and return result\n        return memo[index][prev1][prev2] = result;\n    }\n\nint countOfPairs(vector<int>& numbers) {\n    int size = numbers.size();\n    vector<vector<vector<ll>>> memo(size, vector<vector<ll>>(51, vector<ll>(51, -1)));\n    return solve(0, 0, numbers[0], numbers, memo);\n}\n};\n",
    "submit_ts": "1723346749",
    "subm_id": "1351584328"
}