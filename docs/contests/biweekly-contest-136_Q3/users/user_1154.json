{
    "username": "heartcodehacker",
    "submission": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int flips = 0, c1 = 0, c2 = 0;\n        int rows = grid.size(), cols = grid[0].size();\n        vector<vector<bool>> visited(rows, vector<bool>(cols, false));\n        \n        for (int i = 0; i < rows; ++i) {\n            for (int j = 0; j < cols; ++j) {\n                if (!visited[i][j]) {\n                    markVisited(i, j, rows, cols, visited);\n                    flips += processCell(i, j, rows, cols, grid, c1, c2);\n                }\n            }\n        }\n        \n        if (c1 % 4 != 0 && c2 == 0) flips += 2;\n        return flips;\n    }\n\nprivate:\n    void markVisited(int i, int j, int rows, int cols, vector<vector<bool>>& visited) {\n        visited[i][j] = true;\n        visited[rows - 1 - i][j] = true;\n        visited[i][cols - 1 - j] = true;\n        visited[rows - 1 - i][cols - 1 - j] = true;\n    }\n\n    int processCell(int i, int j, int rows, int cols, vector<vector<int>>& grid, int& c1, int& c2) {\n        if (i == rows - 1 - i && j == cols - 1 - j) {\n            return grid[i][j] == 1 ? 1 : 0;\n        } else if (i == rows - 1 - i) {\n            return handleSymmetricRow(i, j, cols, grid, c1, c2);\n        } else if (j == cols - 1 - j) {\n            return handleSymmetricCol(i, j, rows, grid, c1, c2);\n        } else {\n            return handleGeneralCase(i, j, rows, cols, grid);\n        }\n    }\n\n    int handleSymmetricRow(int i, int j, int cols, vector<vector<int>>& grid, int& c1, int& c2) {\n        int sum = grid[i][j] + grid[i][cols - 1 - j];\n        if (sum == 1) {\n            ++c2;\n            return 1;\n        } else if (sum == 2) {\n            c1 += 2;\n            return 0;\n        }\n        return 0;\n    }\n\n    int handleSymmetricCol(int i, int j, int rows, vector<vector<int>>& grid, int& c1, int& c2) {\n        int sum = grid[i][j] + grid[rows - 1 - i][j];\n        if (sum == 1) {\n            ++c2;\n            return 1;\n        } else if (sum == 2) {\n            c1 += 2;\n            return 0;\n        }\n        return 0;\n    }\n\n    int handleGeneralCase(int i, int j, int rows, int cols, vector<vector<int>>& grid) {\n        int sum = grid[i][j] + grid[rows - 1 - i][j] + grid[i][cols - 1 - j] + grid[rows - 1 - i][cols - 1 - j];\n        if (sum == 1 || sum == 3) {\n            return 1;\n        } else if (sum == 2) {\n            return 2;\n        }\n        return 0;\n    }\n};\n",
    "submit_ts": "1722699232",
    "subm_id": "1343205439"
}