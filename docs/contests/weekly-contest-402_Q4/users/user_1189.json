{
    "username": "chaitanyaarora30",
    "submission": "\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    int query(int li, int ri) {\n        return query(0, 0, n - 1, li, ri);\n    }\n\n    void update(int index, int value) {\n        nums[index] = value;\n        update(0, 0, n - 1, index);\n    }\n\nprivate:\n    vector<int> nums;\n    vector<int> tree;\n    int n;\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int li, int ri) {\n        if (ri < start || end < li) {\n            return 0;\n        }\n        if (li <= start && end <= ri) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = query(2 * node + 1, start, mid, li, ri);\n        int rightQuery = query(2 * node + 2, mid + 1, end, li, ri);\n        return leftQuery + rightQuery;\n    }\n\n    void update(int node, int start, int end, int index) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= index && index <= mid) {\n                update(2 * node + 1, start, mid, index);\n            } else {\n                update(2 * node + 2, mid + 1, end, index);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (auto& i : queries) {\n            if (i[0] == 1) {\n                int li = i[1], ri = i[2];\n                result.push_back(segTree.query(li + 1, ri - 1));\n            } else if (i[0] == 2) {\n                int index = i[1], value = i[2];\n                nums[index] = value;\n                segTree.update(index, value);\n                if (index > 0) segTree.update(index - 1, nums[index - 1]);\n                if (index < nums.size() - 1) segTree.update(index + 1, nums[index + 1]);\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1718508839.0
}