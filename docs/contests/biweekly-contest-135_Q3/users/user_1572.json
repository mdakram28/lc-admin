{
    "username": "mohitkanodia",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n      int n = nums.length;\n      HashMap<Integer, List<Integer>> map = new HashMap<>();\n      int[] max = new int[k + 1];\n      // int[] ps = new int[k + 1];\n\n      for (int i = 0; i < n / 2; i++) {\n        int diff = Math.abs(nums[i] - nums[n - 1 - i]);\n        map.putIfAbsent(diff, new ArrayList<>());\n        map.get(diff).add(i);\n\n        int currmax = 0;\n        int curr = Math.abs(nums[i] - 0);\n        currmax = Math.max(currmax, curr);\n        curr = Math.abs(nums[i] - k);\n        currmax = Math.max(currmax, curr);\n        curr = Math.abs(nums[n - i - 1] - 0);\n        currmax = Math.max(currmax, curr);\n        curr = Math.abs(nums[n - i - 1] - k);\n        currmax = Math.max(currmax, curr);\n\n        max[currmax]++;\n      }\n\n      // u.prln(map);\n      // u.pa(max);\n\n      // for (int i = 0; i < k + 1; i++) {\n      // ps[i] = i == 0 ? max[i] : ps[i - 1] + max[i];\n      // }\n      // u.pa(ps);\n\n      int min = Integer.MAX_VALUE;\n      int sum = 0;\n      // try to make 0 -> k all\n      for (int i = 0; i <= k; i++) {\n        int curr = 0;\n        List<Integer> list = map.getOrDefault(i, new ArrayList<>());\n        if (list.size() == n / 2) {\n          min = Math.min(0, min);\n          continue;\n        }\n        int two = sum;\n        int one = (n / 2) - two - list.size();\n        // u.prln(\"i: \" + i + \" \" + two + \" \" + one);\n        curr = 2 * two + one;\n        min = Math.min(curr, min);\n        sum += max[i];\n      }\n\n      return min;\n    }\n}",
    "submit_ts": "1721489640",
    "subm_id": "1327459360"
}