{
    "username": "ShashGod",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        \n        int totalFlips = 0;\n        \n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                totalFlips += calculateFlips(grid, i, j, rows, cols);\n            }\n        }\n        \n        totalFlips += handleMiddleRow(grid, rows, cols);\n        totalFlips += handleMiddleCol(grid, rows, cols);\n        \n        if (rows % 2 != 0 && cols % 2 != 0 && grid[rows / 2][cols / 2] == 1) {\n            totalFlips += 1;\n        }\n        \n        totalFlips += adjustForOddCount(grid, rows, cols);\n        \n        return totalFlips;\n    }\n    \nprivate:\n    int calculateFlips(const vector<vector<int>>& grid, int i, int j, int rows, int cols) {\n        vector<int> elements = {\n            grid[i][j],\n            grid[rows - i - 1][j],\n            grid[i][cols - j - 1],\n            grid[rows - i - 1][cols - j - 1]\n        };\n        \n        int countOnes = count(elements.begin(), elements.end(), 1);\n        \n        return min(countOnes, 4 - countOnes);\n    }\n\n    int handleMiddleRow(const vector<vector<int>>& grid, int rows, int cols) {\n        if (rows % 2 == 0) {\n            return 0;\n        }\n        \n        int midRow = rows / 2;\n        int flips = 0;\n        \n        for (int j = 0; j < cols / 2; ++j) {\n            if (grid[midRow][j] != grid[midRow][cols - j - 1]) {\n                flips += 1;\n            }\n        }\n        \n        return flips;\n    }\n    \n    int handleMiddleCol(const vector<vector<int>>& grid, int rows, int cols) {\n        if (cols % 2 == 0) {\n            return 0;\n        }\n        \n        int midCol = cols / 2;\n        int flips = 0;\n        \n        for (int i = 0; i < rows / 2; ++i) {\n            if (grid[i][midCol] != grid[rows - i - 1][midCol]) {\n                flips += 1;\n            }\n        }\n        \n        return flips;\n    }\n    \n    int adjustForOddCount(const vector<vector<int>>& grid, int rows, int cols) {\n        if (rows % 2 == 0 && cols % 2 == 0) {\n            return 0;\n        }\n        \n        int possibleFlips = 0;\n        int countOnes = 0;\n        \n        if (rows % 2 != 0) {\n            int midRow = rows / 2;\n            for (int j = 0; j < cols / 2; ++j) {\n                if (grid[midRow][j] != grid[midRow][cols - j - 1]) {\n                    possibleFlips += 1;\n                } else if (grid[midRow][j] == 1) {\n                    countOnes += 1;\n                }\n            }\n        }\n\n        if (cols % 2 != 0) {\n            int midCol = cols / 2;\n            for (int i = 0; i < rows / 2; ++i) {\n                if (grid[i][midCol] != grid[rows - i - 1][midCol]) {\n                    possibleFlips += 1;\n                } else if (grid[i][midCol] == 1) {\n                    countOnes += 1;\n                }\n            }\n        }\n        \n        if (possibleFlips == 0 && countOnes % 2 != 0) {\n            return 2;\n        }\n        \n        return 0;\n    }\n};\n",
    "submit_ts": "1722700300",
    "subm_id": "1343237692"
}