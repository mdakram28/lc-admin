{
    "username": "Imjrj",
    "submission": "import java.util.*;\n\nclass TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    int cost = Integer.MAX_VALUE;\n}\n\npublic class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        // Build the Trie from words\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            insert(root, words[i], costs[i]);\n        }\n        \n        // DP array to store minimum cost to form each prefix of target\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; // Base case: cost to form an empty string is 0\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                if (node.children.containsKey(target.charAt(j))) {\n                    node = node.children.get(target.charAt(j));\n                    if (node.cost != Integer.MAX_VALUE) {\n                        dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    private void insert(TrieNode root, String word, int cost) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            node.children.putIfAbsent(ch, new TrieNode());\n            node = node.children.get(ch);\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n}\n",
    "submit_ts": "1720324738",
    "subm_id": "1312406857"
}