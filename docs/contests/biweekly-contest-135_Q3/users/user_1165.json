{
    "username": "wintersoldier2004",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        HashMap<Integer, List<Integer>> map = new HashMap<>();\n        \n        List<Integer> list = new ArrayList<>();\n        int n = nums.length;\n        for(int i = 0;i<n/2;i++){\n            int diff = Math.abs(nums[i] - nums[n-i-1]);\n            int x = Math.max(Math.max(nums[i], nums[n-i-1]), Math.max(k-nums[i], k-nums[n-i-1]));\n            if(!map.containsKey(diff)) map.put(diff, new ArrayList<>());\n            map.get(diff).add(x);\n            list.add(x);\n            \n        }\n        int res = n;\n        Collections.sort(list);\n        for(int ele: map.keySet()){\n            int h = search(list, ele);\n            int count = h + n/2;\n            for(int e : map.get(ele)){\n                if(e<ele) count-=2;\n                else count -=1;\n            }\n            res = Math.min(res, count);\n        }\n        return res;\n        \n    }\n    public int search(List<Integer> list, int ele){\n        int low = 0, high = list.size() - 1;\n        int ans = -1;\n        while(low<=high){\n            int mid = (low+high)/2;\n            if(list.get(mid)<ele){\n                ans = mid;\n                low = mid + 1;\n            }else high = mid - 1;\n        }\n        return ans + 1;\n    }\n// l r , a r  a-r == max, r - a == max\n}",
    "submit_ts": "1721488915",
    "subm_id": "1327437080"
}