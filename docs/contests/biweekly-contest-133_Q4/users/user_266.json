{
    "username": "Harshitcode",
    "submission": "class Solution {\npublic:\n   const int MOD = 1e9 + 7;\n    int max_cnt = 400;\nlong long binomialCoeff(int n, int k, vector<vector<long long>>& C) {\n    if (C[n][k] != -1) return C[n][k];\n    if (k == 0 || k == n) return C[n][k] = 1;\n    return C[n][k] = (binomialCoeff(n - 1, k - 1, C) + binomialCoeff(n - 1, k, C)) % MOD;\n}\n\nint counTSolve(int n, const vector<vector<int>>& requirements) {\n        map<int, int> myMap;\n        for (const auto& req : requirements) {\n            myMap[req[0] + 1] = req[1];\n        }\n\n        vector<std::vector<long long>> pc(n + 1, std::vector<long long>(max_cnt + 1, 0));\n        pc[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= max_cnt; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int pi = inv - newPos;\n                    if (pi >= 0) {\n                        pc[length][inv] = (pc[length][inv] + pc[length - 1][pi]) % MOD;\n                    }\n                }\n            }\n\n            if (myMap.find(length) != myMap.end()) {\n                int ok = myMap[length];\n                for (int inv = 0; inv <= max_cnt; ++inv) {\n                    if (inv != ok) {\n                        pc[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long ans = 0;\n        for (auto& count : pc[n]) {\n            ans = (ans + count) % MOD;\n        }\n\n        return static_cast<int>(ans);\n\n}\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n       return counTSolve(n,requirements);\n    }\n};",
    "submit_ts": 1719069997.0
}