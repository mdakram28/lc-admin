{
    "username": "adrakChai",
    "submission": "class SGTree{\n    vector<int>seg;\n    public:\n    SGTree(int n){\n        seg.resize(4*n+1);\n\n    }\nvoid build(int ind,int low,int high,vector<int>& arr){\n    if(low==high){\n        seg[ind]=arr[low];\n        return;\n    }\n    int mid=(low+high)/2;\n    build((2*ind+1),low,mid,arr);\n    build((2*ind+2),mid+1,high,arr);\n    seg[ind]=seg[2*ind+1]&seg[2*ind+2];\n\n}\nint query(int ind,int low,int high,int l,int r){\n    if(r<low||high<l)\n    return INT_MAX;\n    if(low>=l&&high<=r)\n    return seg[ind];\n    int mid=(low+high)/2;\n    int left=query(2*ind+1,low,mid,l,r);\n    int right=query(2*ind+2,mid+1,high,l,r);\n    return left&right;\n}\n\n\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        int n = nums.size();\n        SGTree *obj=new SGTree(n);\n        obj->build(0,0,n-1,nums);\n   \n    int ans = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n\n      \n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (obj->query(0,0,n-1,i,mid) >= k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1)\n            ans = min(ans, abs(obj->query(0,0,n-1,i, l) - k));\n        ans = min(ans, abs(k - obj->query(0,0,n-1,i, r)));\n    }\n    return ans;\n        \n    }\n};",
    "submit_ts": 1717299407.0
}