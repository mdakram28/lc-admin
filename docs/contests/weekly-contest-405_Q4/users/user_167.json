{
    "username": "sam_990",
    "submission": "#define ll long long\n#define ull unsigned long long\n\n\n#define MAXN 50005\n\nconstexpr ull MOD = (1ULL << 61) - 1;\nconst ull seed = chrono::system_clock::now().time_since_epoch().count();\nconst ull base = mt19937_64(seed)() % (MOD / 3) + (MOD / 3);\n\null base_pow[MAXN] = {0};\n\nll modmul(ull a, ull b) {\n    ull l1 = (unsigned)a, h1 = a >> 32, l2 = (unsigned)b, h2 = b >> 32;\n    ull l = l1 * l2, m = l1 * h2 + l2 * h1, h = h1 * h2;\n    ull ret = (l & MOD) + (l >> 61) + (h << 3) + (m >> 29) + (m << 35 >> 3) + 1;\n    ret = (ret & MOD) + (ret >> 61);\n    ret = (ret & MOD) + (ret >> 61);\n    return ret - 1;\n}\n\nvoid init() {\n    if (base_pow[0]) return;\n    base_pow[0] = 1;\n    for (int i = 1; i < MAXN; i++) {\n        base_pow[i] = modmul(base_pow[i - 1], base);\n    }\n}\n\nstruct Hash {\n    vector<ll> prefix, suffix;\n\n    Hash(const string& s) {\n        int n = s.size();\n        prefix.resize(n + 3, 0);\n        suffix.resize(n + 3, 0);\n\n        for (int i = 1; i <= n; i++) { prefix[i] = modmul(prefix[i - 1], base) + s[i - 1] + 997; if (prefix[i] >= MOD) prefix[i] -= MOD; }\n        for (int i = n; i >= 1; i--) { suffix[i] = modmul(suffix[i + 1], base) + s[i - 1] + 997; if (suffix[i] >= MOD) suffix[i] -= MOD; }\n    }\n\n    ull get_hash(int l, int r) { ll h = prefix[r + 1] - modmul(base_pow[r - l + 1], prefix[l]); return h < 0 ? h + MOD : h; }\n    ull rev_hash(int l, int r) { ll h = suffix[l + 1] - modmul(base_pow[r - l + 1], suffix[r + 2]); return h < 0 ? h + MOD : h; }\n\n};\n\nclass Solution {\n    public:\n    Solution() {\n        init();\n    }\n    int minimumCost(string target, vector<string> words, vector<int> costs) {\n        unordered_map<string, int> mp;\n        for (int i = 0; i < words.size(); i++) {\n            if (mp.find(words[i]) == mp.end())\n                mp[words[i]] = costs[i];\n            else mp[words[i]] = min(mp[words[i]], costs[i]);\n        }\n\n        words.clear();\n        costs.clear();\n\n        for (auto& i : mp) {\n            words.push_back(i.first);\n            costs.push_back(i.second);\n        }\n\n        Hash ht(target);\n        int n = target.size();\n\n        vector<vector<array<int, 2>>> v(n + 5);\n\n        for (int i = 0; i < words.size(); i++) {\n            string& s = words[i];\n            int c = costs[i];\n\n            int len = s.size();\n\n            Hash hs(s);\n\n            for (int i = 0; i + len - 1 < n; i++) {\n                if (ht.get_hash(i, i + len - 1) == hs.get_hash(0, len - 1)) {\n                    v[i].push_back({c, len});\n                }\n            }\n        }\n\n        vector<int> dp(n + 2, (int)1e9);\n        dp[n] = 0;\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (auto& el : v[i]) {\n                dp[i] = min(dp[i], el[0] + dp[i + el[1]]);\n            }\n        }\n\n        if (dp[0] == (int)1e9) return -1;\n        else return dp[0];\n    }\n};",
    "submit_ts": "1720321303",
    "subm_id": "1312319194"
}