{
    "username": "Godisdead",
    "submission": "#include <vector>\n#include <algorithm>\n#include <queue>\n#include <iostream>\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(std::vector<std::vector<int>>& edges1, std::vector<std::vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        auto diameter1 = getDiameter(edges1, n);\n        auto diameter2 = getDiameter(edges2, m);\n\n        return std::max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n    }\n\nprivate:\n    std::pair<int, int> bfs(const std::vector<std::vector<int>>& adj, int start) {\n        std::queue<int> q;\n        q.push(start);\n        std::vector<int> dist(adj.size(), -1);\n        dist[start] = 0;\n        \n        int farthestNode = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, dist[farthestNode]};\n    }\n\n    int getDiameter(const std::vector<std::vector<int>>& edges, int n) {\n        std::vector<std::vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        auto [node1, _] = bfs(adj, 0);\n        auto [node2, diameter] = bfs(adj, node1);\n        return diameter;\n    }\n};",
    "submit_ts": 1719718253.0
}