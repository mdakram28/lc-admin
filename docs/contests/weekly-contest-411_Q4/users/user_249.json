{
    "username": "Neeraj Kumar",
    "submission": "const char fastio = [](){\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef vector<pii> vii;\ntypedef vector<pll> vll;\ntypedef vector<vi> vvi;\ntypedef vector<vl> vvl;\ntypedef vector<vii> vvii;\ntypedef vector<vll> vvll;\n\n#define ALL(iterable) (iterable).begin(), (iterable).end()\n#define RALL(iterable) (iterable).rbegin(), (iterable).rend()\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define ROUND(x) (((x) >= 0) ? (ll)((x) + 0.5) : (ll)((x) - 0.5))\n#define DEBUG(...) cout << \"[DEBUG-\" << __LINE__ << \"]:\"; debug_cout(__VA_ARGS__);\n\nshort dx4[] = {-1, 0, 1, 0};\nshort dy4[] = {0, 1, 0, -1};\n\nshort dx8[] = {-1, -1, -1, 0, 1, 1, 1, 0};\nshort dy8[] = {-1, 0, 1, 1, 1, 0, -1, -1};\n\nshort kx[] = {2, 1, -1, -2, -2, -1, 1, 2};\nshort ky[] = {1, 2, 2, 1, -1, -2, -2, -1};\n\ntemplate<typename T>\nvoid debug_cout(const T& arg) {\n    cout << \" \" << arg;\n}\n\ntemplate<typename T, typename... Args>\nvoid debug_cout(const T& firstArg, const Args&... args) {\n    cout << \" \" << firstArg;\n    debug_cout(args...);\n}\n\ntemplate <typename T1, typename T2>\nostream &operator<<(ostream &out, pair<T1, T2> &p)\n{\n    out << \"(\" << p.first << \",\" << p.second << \")\";\n    return out;\n}\n\ntemplate <typename T>\nostream &operator<<(ostream &out, vector<T> &vec)\n{\n    out << \"[\";\n    for (auto it = vec.begin(); it != vec.end(); ++it)\n    {\n        if (it != vec.begin())\n            out << \",\";\n        out << *it;\n    }\n    out << \"]\";\n    return out;\n}\n\nclass Solution {\nprivate:\n    int search(vi &nums, int start, const int k)\n    {\n        int low = start, high = nums.size() - 1, index = -1;\n        while (low <= high)\n        {\n            int mid = low + (high - low) / 2;\n            \n            int zeroes = nums[mid] - (start - 1 >= 0 ? nums[start - 1] : 0);\n            int ones = mid - start + 1 - zeroes;\n            \n            if (ones <= k || zeroes <= k)\n            {\n                index = mid;\n                low = mid + 1;\n            }\n            else\n                high = mid - 1;\n        }\n        \n        return index;\n    }\n\npublic:\n    vector<long long> countKConstraintSubstrings(string_view s, int k, vector<vector<int>>& queries) {\n        int n = s.length();\n        \n        vi zeroes(n);\n        zeroes[0] = s[0] == '0';\n        for (int i = 1; i < n; i++)\n            zeroes[i] = zeroes[i - 1] + (s[i] == '0');\n\n        vi limit;        \n        for (int i = 0; i < n; i++)\n            limit.push_back(search(zeroes, i, k));\n        \n        vl prefix(n);\n        prefix[0] = limit[0];\n        for (int i = 1; i < n; i++)\n            prefix[i] += prefix[i - 1] + limit[i];\n        \n        vl answer;\n        for (auto &&query: queries)\n        {\n            ll x = query[0], y = query[1];\n            \n            ll sum = prefix[y] - (x - 1 >= 0 ? prefix[x - 1] : 0);\n            ll index = upper_bound(limit.begin() + x, limit.end(), y) - limit.begin();\n            ll count = max(0LL, y - index + 1);\n            ll extra = 0;\n            if (index <= y)\n                extra = prefix[y] - (index - 1 >= 0 ? prefix[index - 1] : 0);\n            ll add = count * y;\n            \n            ll value = sum - extra + add - ((y - x + 1) * (x + y) / 2) + y - x + 1;\n            answer.push_back(value);\n        }\n        \n        return answer;\n    }\n};",
    "submit_ts": "1723952238",
    "subm_id": "1359791376"
}