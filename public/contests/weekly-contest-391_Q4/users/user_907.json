{
    "username": "cy171",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        points.sort()\n        def helper(nums):\n            ans = -1\n            res = []\n            apb = 0\n            amb = 0\n            for i, (a, b) in enumerate(nums[1:], 1):\n                if b >= nums[apb][1]:\n                    dis = a + b - (nums[apb][0]+nums[apb][1])\n                    if dis > ans:\n                        res = [i, apb]\n                        ans = dis\n                if b <= nums[amb][1]:\n                    dis = a - b - (nums[amb][0]-nums[amb][1])\n                    if dis > ans:\n                        res = [i, amb]\n                        ans = dis\n                # print(a+b, nums[apb][0]+nums[apb][1])\n                if a+b < nums[apb][0]+nums[apb][1]:\n                    apb = i\n                if a-b < nums[amb][0]-nums[amb][1]:\n                    amb = i\n            return ans, res\n        val, [a, b] = helper(points)\n        new = []\n        for i in range(len(points)):\n            if i != a:\n                new.append(points[i])\n        ans1, _ = helper(new)\n        \n        new = []\n        for i in range(len(points)):\n            if i != b:\n                new.append(points[i])\n        ans2, _ = helper(new)\n        \n        \n        # print(helper(points))\n        return min(ans1, ans2)\n                \n                \n            "
}