{
    "username": "jason_wong1",
    "submission": "class Solution {\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        \n        int mod = (int) (1e9 + 7);\n        long[][] dp = new long[n][1001];\n        for (int j = 0; j <= nums[0]; j++) {\n            dp[0][j] = 1;\n        }\n        \n        for (int i = 0; i < n - 1; i++) {\n            long[] diff = new long[1002];\n            for (int j = 0; j <= nums[i]; j++) {\n                if (dp[i][j] > 0) {\n                    int upper = nums[i + 1];\n                    int lower = Math.max(j, nums[i + 1] - nums[i] + j);\n                    if (upper >= lower) {\n                        diff[lower] += dp[i][j];\n                        diff[upper + 1] -= dp[i][j];\n                    }\n                }\n            }\n            dp[i + 1][0] = diff[0];\n            for (int j = 1; j <= 1000; j++) {\n                dp[i + 1][j] = (dp[i + 1][j - 1] + diff[j] + mod) % mod;\n            }\n        }\n        \n        long res = 0;\n        for (long re : dp[n - 1]) {\n            res = (res + re) % mod;\n        }\n        return (int) res;\n    }\n}",
    "submit_ts": "1723348542",
    "subm_id": "1351620319"
}