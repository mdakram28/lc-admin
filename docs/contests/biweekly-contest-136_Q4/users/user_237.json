{
    "username": "VILLANOVA_ECON",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        graph = collections.defaultdict(list)\n        \n        for x,y in edges:\n            if x%2 == 1:\n                graph[y].append((x,1))\n            else:\n                graph[y].append((x,2))\n            if y%2 == 1:\n                graph[x].append((y,1))\n            else:\n                graph[x].append((y,2))\n        \n        indegree= collections.defaultdict(int)\n        #nodes = set()\n        for x,y in edges:\n            indegree[x] += 1\n            indegree[y] += 1\n            \n        start_node = [x for x in graph.keys() if indegree[x] == 1]\n        from sortedcontainers import SortedList\n        dp = collections.defaultdict(int)\n        dp_s = collections.defaultdict(SortedList)\n        dp_other = collections.defaultdict(int)\n        \n        def recur_fn(node,parent):\n            res = 0\n            # print('node',node)\n            # print(graph,node)\n            for child,dist in graph[node]:\n                if child == parent:\n                    continue\n                temp_res = dist + recur_fn(child,node)\n                if node not in dp_s:\n                    dp_s[node].add(0)\n                dp_s[node].add(temp_res)\n                dp_other[(node,child)] = temp_res\n                res = max(res,temp_res)\n            dp[node] = res\n            return res\n        ans = [-1]*len(graph)\n        total_ans = recur_fn(start_node[0],-1)\n        \n        \n        def recur_fn2(node,parent,curr):\n            ans[node] = max(dp[node],curr)\n            for child,dist in graph[node]:\n                if child == parent:\n                    continue\n                zz = dp_other[(node,child)]\n                dp_s[node].discard(zz)\n                if node%2 == 1:\n                    recur_fn2(child,node,max(curr+1,dp_s[node][-1] + 1))\n                else: ##if node%2 == 2:\n                    recur_fn2(child,node,max(curr+2,dp_s[node][-1] + 2))\n                dp_s[node].add(zz)\n        #print(dp)\n        recur_fn2(start_node[0],-1,0)\n        del dp \n        del dp_s\n        del dp_other\n        return ans\n            \n                ",
    "submit_ts": "1722699770",
    "subm_id": "1343221804"
}