{
    "username": "whynot4",
    "submission": "class Solution {\n    public int minFlips(int[][] g) {\n        int n = g.length; \n        int m = g[0].length;\n        boolean debug = false;\n\n        /* \n            need to have a row AND col counterpart in order to be 1, otherwise %4 won't be zero\n            nvm, you need to treat the middle differently. it could be 1 in some cases\n            the exact center (if it exists) needs to be zero\n        */\n        int ans = 0;\n        var seen = new boolean[n][m];\n        for (int i=0; i<n; i++) {\n            if (i == n-1-i) {\n                continue;\n            } \n\n            // standard case\n            for (int j=0; j<m; j++) {\n                if (seen[i][j]) {\n                    continue;\n                }\n\n                if (j == m-1-j) {\n                    continue;\n                }\n\n                int ct = 0;\n                seen[i][j] = true;\n                if (g[i][j] == 1) {\n                    ct++;\n                }\n                seen[n-1-i][j] = true;\n                if (g[n-1-i][j] == 1) {\n                    ct++;\n                }\n                seen[i][m-1-j] = true;\n                if (g[i][m-1-j] == 1) {\n                    ct++;\n                }\n                seen[n-1-i][m-1-j] = true;\n                if (g[n-1-i][m-1-j] == 1) {\n                    ct++;\n                }\n                ans += Math.min(4-ct, ct);\n            }\n        }\n\n        // now handle middles\n        int halfN = n/2;\n        int rowPairs = 0;\n        int rowChange = 0;\n        if (n-1 == 2*halfN) {\n            int i = halfN;\n            for (int j=0; j<m; j++) {\n                if (seen[i][j]) {\n                    continue;\n                }\n                if (m-1-j == j) {\n                    if (g[i][j] == 1) { // center must be zero\n                        ans++;\n                    }\n                    seen[i][j] = true;\n                    continue;\n                }\n                seen[i][j] = true;\n                seen[i][m-1-j] = true;\n                if (g[i][j] + g[i][m-1-j] >= 1) {\n                    rowPairs++;\n                }\n                if (g[i][j] != g[i][m-1-j]) { // change recorded\n                    rowChange++;\n                }\n            }\n            if (debug) System.out.println(\"1. \" + rowPairs + \" \" + rowChange);\n            \n        }\n\n        int halfM = m/2;\n        int colPairs = 0;\n        int colChange = 0;\n        if (m-1 == 2*halfM) {\n            int j = halfM;\n            for (int i=0; i<n; i++) {\n                if (seen[i][j]) {\n                    continue;\n                }\n                if (n-1-i == i) {\n                    if (g[i][j] == 1) { // center must be zero\n                        ans++;\n                    }\n                    seen[i][j] = true;\n                    continue;\n                }\n                seen[i][j] = true;\n                seen[n-1-i][j] = true;\n                if (g[i][j] +g[n-1-i][j] >= 1) {\n                    colPairs++;\n                }\n                if (g[i][j] != g[n-1-i][j]) { // change recorded\n                    colChange++;\n                }\n            }\n            if (debug) System.out.println(\"2. \" + colPairs + \" \" + colChange);\n            \n        }\n\n        // messed up stuff\n        if ((rowPairs + colPairs) % 2 == 0 || rowPairs%2 == 0 && rowChange > 0 || colPairs%2 == 0 && colChange > 0) {\n            ans += rowChange + colChange;\n        } else {\n\n\n            if (rowPairs % 2 == 0) {\n                ans += rowChange;\n            } else {\n                ans += Math.max(2-rowChange, rowChange);\n            }\n\n            if (colPairs % 2 == 0) {\n                ans += colChange;\n            } else {\n                ans += Math.max(2-colChange, colChange);\n            }\n        }\n\n        return ans;\n    }\n}\n/*\n[[1],[1],[1],[0]]\nexpected = 1\n\n[[0,0,1],[0,0,1],[1,0,1],[1,0,0],[0,1,1]]\nexpected = 5\n\n[[1,1,0],[0,0,1],[1,1,1],[1,1,0],[0,1,0]]\nexpected 5\n\n*/",
    "submit_ts": "1722699052",
    "subm_id": "1343200034"
}