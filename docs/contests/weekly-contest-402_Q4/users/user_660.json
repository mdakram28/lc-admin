{
    "username": "Q4IYURYDjU",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        main_arr = [0]*n\n        \n        for i in range(1, n - 1):\n            if(nums[i] > nums[i - 1] and nums[i] > nums[i + 1]):\n                main_arr[i] = 1\n                \n        \n        N = 100005\n\n        # Max size of tree\n        tree = [0] * (2 * N)\n\n\n        # function to build the tree\n        def build(arr):\n            # insert leaf nodes in tree\n            for i in range(n):\n                tree[n + i] = arr[i]\n\n                # build the tree by calculating parents\n            for i in range(n - 1, 0, -1):\n                tree[i] = tree[i << 1] + tree[i << 1 | 1]\n\n            # function to update a tree node\n\n\n        def updateTreeNode(p, value):\n            # set value at position p\n            tree[p + n] = value\n            p = p + n\n\n            # move upward and update parents\n            i = p\n\n            while i > 1:\n                tree[i >> 1] = tree[i] + tree[i ^ 1]\n                i >>= 1\n\n            # function to get sum on interval [l, r)\n\n\n        def query(l, r):\n            res = 0\n\n            # loop to find the sum in the range\n            l += n\n            r += n\n\n            while l < r:\n\n                if (l & 1):\n                    res += tree[l]\n                    l += 1\n\n                if (r & 1):\n                    r -= 1\n                    res += tree[r]\n\n                l >>= 1\n                r >>= 1\n            return res\n                \n        build(main_arr)\n        \n        ans = []\n        \n        \n        for q in queries:\n            if q[0] == 2:\n                i = q[1]\n                nums[i] = q[2]\n                \n                if(True):\n                    \n                    try:\n                        if(nums[i] > nums[i - 1] and nums[i] > nums[i + 1]):\n                            main_arr[i] = 1\n                            updateTreeNode(i, 1)\n                        else:\n                            main_arr[i] = 0\n                            updateTreeNode(i, 0)\n                    except:\n                        pass\n                    \n                    try:\n                        if(nums[i - 1] > nums[i - 2] and nums[i - 1] > nums[i]):\n                            main_arr[i - 1] = 1\n                            updateTreeNode(i - 1, 1)\n                        else:\n                            main_arr[i - 1] = 0\n                            updateTreeNode(i - 1, 0)\n                    except:\n                        pass\n                    \n                    \n                    try:\n                        if(nums[i + 1] > nums[i + 2] and nums[i + 1] > nums[i]):\n                            main_arr[i + 1] = 1\n                            updateTreeNode(i + 1, 1)\n                        else:\n                            main_arr[i + 1] = 0\n                            updateTreeNode(i + 1, 0)\n                    except:\n                        pass\n            \n                continue\n            \n            \n            \n            l = q[1]\n            r = q[2]\n            \n            updateTreeNode(l, 0)\n            updateTreeNode(r, 0)\n            \n            total = query(l, r + 1)\n            \n            updateTreeNode(l, main_arr[l])\n            updateTreeNode(r, main_arr[r])\n            \n            ans.append(total)\n            \n        return ans\n        \n                ",
    "submit_ts": "1718507570",
    "subm_id": "1289655679"
}