{
    "username": "vivekvar_19",
    "submission": "class Solution {\npublic:\n    // map<pair<int, int>, int>mp;\n    // int solve(int& l, int& r,  vector<vector<int>>& pref) {\n    //     if (mp.find({l, r}) != mp.end()) return mp[{l, r}];\n    //     int ans = 0, curr;\n    //     for (int i = 0; i < 31; i++) {\n    //         if (l == 0) curr = pref[i][r];\n    //         else curr = pref[i][r] - pref[i][l - 1];\n    //         if (curr == r - l + 1) ans |= (1 << i);\n    //     }\n    //     return mp[{l, r}] = ans;\n    // }\n    void buildTree(vector<int>& tree, vector<int>& a, int index, int s, int e) {\n        if (s > e) return;\n        if (s == e) {\n            tree[index] = a[s];\n            return;\n        }\n        int m = (s + e)/2;\n        buildTree(tree, a, 2 * index, s, m);\n        buildTree(tree, a, 2 * index + 1, m + 1, e);\n        tree[index] = (tree[2 * index] & tree[2 * index + 1]);\n        return;\n    }\n    int query(vector<int>& tree, int index, int s, int e, int qs, int qe) {\n        if (qs > e || s > qe) return -1;\n        if (s >= qs && e <= qe) return tree[index];\n        int m = (s + e)/2;\n        int left_ans = query(tree, 2 * index, s, m, qs, qe);\n        int right_ans = query(tree, 2 * index + 1, m + 1, e, qs, qe);\n        return (left_ans & right_ans);\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        // vector<vector<int>>pref(31, vector<int>(nums.size(), 0));\n        long long int res = 0;\n        int n = nums.size();\n        vector<int>tree(4 * n + 2);\n        buildTree(tree, nums, 1, 0, n - 1);\n        // for (int i = 0; i < nums.size(); i++) {\n        //     for (int j = 0; j < 31; j++) {\n        //         if (nums[i] & (1 << j)) pref[j][i] = 1;\n        //     }\n        // }\n        // for (int i = 0; i < 31; i++) {\n        //     for (int j = 1; j < nums.size(); j++) pref[i][j] += pref[i][j - 1];\n        // }\n        for (int i = 0; i < n; i++) {\n            int l = i, r = n - 1, ans1 = -1, ans2 = -1, mid, curr;\n            while (l <= r) {\n                mid = l + (r - l)/2;\n                curr = query(tree, 1, 0, n - 1, i, mid);\n                // curr = solve(i, mid, pref);\n                if (curr == k) ans2 = mid, l = mid + 1;\n                else if (curr > k) l = mid + 1;\n                else r = mid - 1;\n            }\n            if (ans2 == -1) continue;\n            l = i;\n            r = ans2;\n            while (l <= r) {\n                mid = l + (r - l)/2;\n                curr = query(tree, 1, 0, n - 1, i, mid);\n                // curr = solve(i, mid, pref);\n                if (curr == k) ans1 = mid, r = mid - 1;\n                else if (curr > k) l = mid + 1;\n                else r = mid - 1;\n            }\n            res += (ans2 - ans1 + 1);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720279616",
    "subm_id": "1311758344"
}