{
    "username": "mahimagupta09",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size(); \n        vector<vector<int>> dp(n, vector<int>(k + 1, 1)); \n        int maxLength = 1; \n        vector<int> maxLengthsWithChanges(k + 1, -1); \n        vector<map<int, int>> maxLengthsForValue(k + 1); \n\n        for (int i = 0; i < n; i++) { \n            for (int changes = 0; changes <= k; changes++) { \n                for (int prevChanges = 0; prevChanges < changes; prevChanges++) { \n                    dp[i][changes] = max(dp[i][changes], 1 + maxLengthsWithChanges[prevChanges]); \n                } \n                if (maxLengthsForValue[changes].find(nums[i]) != maxLengthsForValue[changes].end()) { \n                    dp[i][changes] = max(dp[i][changes], 1 + maxLengthsForValue[changes][nums[i]]); \n                } \n                maxLength = max(maxLength, dp[i][changes]); \n            } \n            for (int changes = 0; changes <= k; changes++) { \n                maxLengthsWithChanges[changes] = max(maxLengthsWithChanges[changes], dp[i][changes]); \n                maxLengthsForValue[changes][nums[i]] = max(maxLengthsForValue[changes][nums[i]], dp[i][changes]); \n            } \n        } \n        return maxLength; \n    }\n};\n",
    "submit_ts": 1717861829.0
}