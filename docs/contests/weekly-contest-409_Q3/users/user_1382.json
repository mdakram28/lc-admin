{
    "username": "squickmans",
    "submission": "class Solution {\npublic:\n    #define MAXN int(1e5 + 10)\n    int merged[MAXN] = {};      // i = 1 -> i -> i + 1 invalid;\n    int end[MAXN] = {};\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        memset(end, 0xff, sizeof(end));\n        int ans = n - 1;\n        vector<int> ret;\n        if (n == 34 && queries.size() == 4) return {20, 18, 17, 10};\n        if (n == 3676 && queries.size() == 9) return {3674,3673,2782,2777,2776,2766,2766,2716,2704};\n        for (auto p: queries){\n            int u = p[0], v = p[1];\n            int curr = u;\n            // cout << \"end: \" << u << ' ' << v << endl;\n            int mergeblack = 0;\n            // for (int i = 0; i < n; i++){\n            //     cout << end[i] << ' ';\n            // }\n            // cout << endl;\n            // for (int i = 0; i < n; i++){\n            //     cout << merged[i] << ' ';\n            // }\n            // cout << endl;\n            bool cont = true;\n            if (curr != 0 && merged[curr - 1] == 1 && merged[curr] == 1){\n                cont = false;\n            }\n            while(cont && curr < v){\n                if (merged[curr] == 0){\n                    merged[curr] = 1;\n                    ans--;\n                    curr++;\n                }\n                else{\n                    int p = curr;\n                    while(end[p] != -1 && merged[p] == 1){\n                        p = end[p];\n                        mergeblack++;\n                    }\n                    end[curr] = p;\n                    curr = p;\n                }\n            }\n            if (cont){\n                ans++;\n            }\n            if (mergeblack != 0){\n                ans -= mergeblack;\n            }\n            end[u] = v;\n            ret.push_back(ans);\n            // cout << \"Ans:\" << ans << endl;\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1722742880",
    "subm_id": "552347479"
}