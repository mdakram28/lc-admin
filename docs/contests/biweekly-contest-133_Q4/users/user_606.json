{
    "username": "anirudhparida08",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int maxInversions = n * (n - 1) / 2;\n\n    vector<int> requiredInversions(n, -1);\n    for (const auto& req : requirements) {\n        requiredInversions[req[0]] = req[1];\n    }\n\n  \n    vector<vector<int>> dp(n + 1, vector<int>(maxInversions + 1, 0));\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n       \n        vector<int> prefixSums(maxInversions + 1, 0);\n        prefixSums[0] = dp[i-1][0];\n        for (int j = 1; j <= maxInversions; ++j) {\n            prefixSums[j] = (prefixSums[j-1] + dp[i-1][j]) % MOD;\n        }\n        \n        for (int j = 0; j <= maxInversions; ++j) {\n            dp[i][j] = (j - i >= 0 ? (prefixSums[j] - prefixSums[j-i] + MOD) % MOD : prefixSums[j]);\n        }\n\n        \n        if (requiredInversions[i - 1] != -1) {\n            for (int j = 0; j <= maxInversions; ++j) {\n                if (j != requiredInversions[i - 1]) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n    }\n\n\n    int result = 0;\n    int finalRequirement = requiredInversions[n - 1];\n    if (finalRequirement != -1) {\n        result = dp[n][finalRequirement];\n    } else {\n        for (int j = 0; j <= maxInversions; ++j) {\n            result = (result + dp[n][j]) % MOD;\n        }\n    }\n\n    return result;\n    }\n};",
    "submit_ts": "1719070182",
    "subm_id": "1296816678"
}