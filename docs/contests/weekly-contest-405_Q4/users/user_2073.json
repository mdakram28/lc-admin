{
    "username": "rajawattanya212",
    "submission": "\n\nclass Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        List<Integer> indices = new ArrayList<>(); // List to hold all word indices ending at this node\n    }\n    \n    private TrieNode buildTrie(String[] words) {\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (char c : words[i].toCharArray()) {\n                node = node.children.computeIfAbsent(c, k -> new TrieNode());\n            }\n            node.indices.add(i); // store the index of the word\n        }\n        return root;\n    }\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = buildTrie(words);\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                if (node.children.containsKey(target.charAt(j))) {\n                    node = node.children.get(target.charAt(j));\n                    for (int index : node.indices) {\n                        int cost = costs[index];\n                        dp[j + 1] = Math.min(dp[j + 1], dp[i] + cost);\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String target1 = \"abcdef\";\n        String[] words1 = {\"abdef\", \"abc\", \"d\", \"def\", \"ef\"};\n        int[] costs1 = {100, 1, 1, 10, 5};\n        System.out.println(solution.minimumCost(target1, words1, costs1)); // Output: 7\n\n        String target2 = \"aaaa\";\n        String[] words2 = {\"z\", \"zz\", \"zzz\"};\n        int[] costs2 = {1, 10, 100};\n        System.out.println(solution.minimumCost(target2, words2, costs2)); // Output: -1\n\n        String target3 = \"r\";\n        String[] words3 = {\"r\", \"r\", \"r\", \"r\"};\n        int[] costs3 = {1, 6, 3, 3};\n        System.out.println(solution.minimumCost(target3, words3, costs3)); // Output: 1\n    }\n}\n",
    "submit_ts": "1720321178",
    "subm_id": "1312315689"
}