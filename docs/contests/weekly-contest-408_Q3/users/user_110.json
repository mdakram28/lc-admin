{
    "username": "2499370956",
    "submission": "class Solution {\n    public int numberOfSubstrings(String s) {\n        int n = s.length();\n        TreeSet<Integer> ones = new TreeSet<>();\n        TreeSet<Integer> zeros = new TreeSet<>();\n        int[] oneSum = new int[n + 1];\n        for (int i = 0; i < s.length(); i++) {\n            int value = s.charAt(i) == '1' ? 1 : 0;\n            oneSum[i + 1] = oneSum[i] + value;\n            if (value == 1) {\n                ones.add(i);\n            } else {\n                zeros.add(i);\n            }\n        }\n\n        int out = 0;\n        for (int start = 0; start < n; start++) {\n            int end = start;\n            int z = 0;\n            int o = 0;\n            while (end < n) {\n                if (z + o == 0 || o >= z * z) {\n                    Integer nextZero = zeros.ceiling(end);\n                    if (nextZero == null) {\n                        out += n - end;\n                        break;\n                    }\n                    out += nextZero - end;\n                    end = nextZero + 1;\n                } else {\n                    end = Math.min(n, Math.max(end + 1, start + z + z * z));\n                }\n                o = oneSum[end] - oneSum[start];\n                z = end - start - o;\n                if (o >= z * z) {\n                    out++;\n                }\n            }\n        }\n        return out;\n    }\n}",
    "submit_ts": "1722135414",
    "subm_id": "1335701033"
}