{
    "username": "sarthak10092003",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        vector<unordered_map<int, int>> lastOccurrence(k + 1);\n        int maxLength = 1;\n        vector<int> maxDP(k + 1, -1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = max(dp[i][j], 1 + maxDP[l]);\n                }\n                if (lastOccurrence[j].find(nums[i]) != lastOccurrence[j].end()) {\n                    dp[i][j] = max(dp[i][j], 1 + lastOccurrence[j][nums[i]]);\n                }\n                maxLength = max(maxLength, dp[i][j]);\n            }\n            for (int j = 0; j <= k; ++j) {\n                maxDP[j] = max(maxDP[j], dp[i][j]);\n                lastOccurrence[j][nums[i]] = max(lastOccurrence[j][nums[i]], dp[i][j]);\n            }\n        }\n\n        return maxLength;\n    }\n};",
    "submit_ts": 1717861594.0
}