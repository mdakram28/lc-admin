{
    "username": "time-v5",
    "submission": "class Solution {\n    static int[] log = new int[100001];// 2^log[i] \u8868\u793a\u6700\u63a5\u8fd1 i \u7684 2 \u7684\u67d0\u6b21\u65b9\n    static {\n        log[0] = -1;\n        for (int i = 1; i <= 100000; i++) {\n            log[i] = log[i >> 1] + 1;\n        }\n    }\n    int[][] st;\n\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        st = new int[n][18];\n        // st \u8868\u9884\u5904\u7406\n        for (int i = 0; i < n; i++) {\n            st[i][0] = nums[i];\n        }\n        for (int j = 1; j < 18; j++) {\n            for (int i = 0; i + (1 << j) - 1 < n; i++) {\n                st[i][j] = st[i][j - 1] & st[i + (1 << (j - 1))][j - 1];\n            }\n        }\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            int l = left(0, i, k), r = right(0, i, k);\n            if (l != -1 && r != -1) {\n                ans += r - l + 1;\n            }\n        }\n        return ans;\n    }\n\n    public int left(int l, int r, int k) {\n        int b = r, m, ans = -1;\n        while (l <= r) {\n            m = (l + r) >> 1;\n            int v = query(m, b);\n            if (v >= k) {\n                ans = v;\n                r = m - 1;\n            } else {\n                l = m + 1;\n            }\n        }\n        return ans == k ? r + 1 : -1;\n    }\n\n    public int right(int l, int r, int k) {\n        int b = r, m, ans = -1;\n        while (l <= r) {\n            m = (l + r) >> 1;\n            int v = query(m, b);\n            if (v <= k) {\n                ans = v;\n                l = m + 1;\n            } else {\n                r = m - 1;\n            }\n        }\n        return ans == k ? l - 1 : -1;\n    }\n    \n    public int query(int l, int r) {\n        int g = log[r - l + 1];\n        return st[l][g] & st[r - (1 << g) + 1][g];\n    }\n}",
    "submit_ts": "1720277418",
    "subm_id": "544556536"
}