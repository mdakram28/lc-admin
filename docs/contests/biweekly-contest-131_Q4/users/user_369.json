{
    "username": "SomeBody_to_",
    "submission": "struct node{\n    int l0,r0,ma0;\n    bool isall0;\n    node(int l0,int r0,int ma0,bool isall0):l0(l0),r0(r0),ma0(ma0),isall0(isall0){};\n    node(){};\n};\n\nclass Seg {\npublic:\n    #define ls x<<1\n    #define rs x<<1|1\n    \n    ///\u6c42\u533a\u95f4\u6700\u5927\u8fde\u7eed0\u7684\u4e2a\u6570  \u5e26\u533a\u95f4\u4fee\u6539\u548c\u533a\u95f4\u67e5\u8be2\n    Seg(int n): tree(n * 4) {\n        build(1, 1, n);\n    }\n    \n    vector<node> tree;\n    \n    void pushup(int x)\n    {\n        tree[x].l0=tree[ls].l0+(tree[ls].isall0 ? tree[rs].l0 : 0);\n        tree[x].r0=tree[rs].r0+(tree[rs].isall0 ? tree[ls].r0 : 0);\n        tree[x].ma0=max(tree[ls].r0+tree[rs].l0,max(tree[ls].ma0,tree[rs].ma0));\n        tree[x].isall0=tree[ls].isall0&tree[rs].isall0;\n    }\n    \n    void build(int x,int l,int r)\n    {\n        if(l==r){\n            tree[x].l0=tree[x].r0=tree[x].ma0=tree[x].isall0=1;\n        }\n        else {\n            int mid=(l+r)/2;\n            build(ls,l,mid);\n            build(rs,mid+1,r);\n            pushup(x);\n        }\n    }\n    \n    void update(int x,int l,int r,int p)\n    {\n        if(l == r){\n            // tree[x].l0=tree[x].r0=tree[x].ma0=0;\n            tree[x].r0 = 0;\n            tree[x].isall0=0;\n            return ;\n        }\n        int mid=(l+r)/2;\n        if(mid>=p)update(ls,l,mid,p);\n        else update(rs,mid+1,r,p);\n        pushup(x);\n    }\n    \n    node query(int x,int l,int r,int ll,int rr)\n    {\n        if(ll<=l&&r<=rr) return tree[x];\n        \n        int mid=(l+r)/2;\n        if(rr<=mid) return query(ls,l,mid,ll,rr);\n        else if(mid+1<=ll)return query(rs,mid+1,r,ll,rr);\n        else {\n            node now;\n            now.isall0=now.l0=now.ma0=now.r0=0;\n            \n            node t1=query(ls,l,mid,ll,rr);\n            node t2=query(rs,mid+1,r,ll,rr);\n            now.l0=t1.l0+(t1.isall0 ? t2.l0:0);\n            now.r0=t2.r0+(t2.isall0 ? t1.r0:0);\n            now.ma0=max(t1.r0+t2.l0,max(t1.ma0,t2.ma0));\n            now.isall0=t1.isall0&t2.isall0;\n            return now;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& qs) {\n        vector<bool> ans;\n        int mx = 0;\n        for (auto& q : qs) mx = max(mx, q[1]);\n        int n = mx + 10;\n        Seg seg(n);\n        for (auto& q : qs) {\n            if (q[0] == 1) {\n                seg.update(1, 1, n, q[1]);\n            } else if (q[0] == 2) {\n                int sz = q[2];\n                auto node = seg.query(1, 1, n, 1, q[1]);\n                // printf(\"q[1] = %d, sz = %d, ma0 = %d\\n\", q[1], sz, node.ma0);\n                \n                // if ((node.ma0 != node.l0 ) && node.ma0 != node.r0) node.ma0++;\n                int len = min(q[1], node.ma0);\n                ans.push_back(len >= sz ? true : false);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716652461.0
}