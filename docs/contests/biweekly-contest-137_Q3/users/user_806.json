{
    "username": "sh_trgj",
    "submission": "#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <climits>\n\nclass Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        std::vector<std::tuple<long long, long long int, long long int>> candidates;\n        \n        // Collect the best cells for each row and column\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                candidates.push_back({(long long)board[i][j], i, j});\n            }\n        }\n        \n        // Sort candidates based on value in descending order\n        std::sort(candidates.rbegin(), candidates.rend());\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Explore combinations from top candidates\n        int len = std::min(20, (int)candidates.size()); // Limit candidates to top 20 to reduce the search space\n        \n        for (int a = 0; a < len; ++a) {\n            for (int b = a + 1; b < len; ++b) {\n                for (int c = b + 1; c < len; ++c) {\n                    auto [v1, r1, c1] = candidates[a];\n                    auto [v2, r2, c2] = candidates[b];\n                    auto [v3, r3, c3] = candidates[c];\n                    \n                    // Ensure no two rooks are in the same row or column\n                    if (r1 != r2 && r1 != r3 && r2 != r3 && c1 != c2 && c1 != c3 && c2 != c3) {\n                        maxSum = std::max(maxSum, v1 + v2 + v3);\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723905303",
    "subm_id": "1358996702"
}