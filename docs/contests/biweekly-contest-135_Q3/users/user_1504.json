{
    "username": "yuno1310",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        unordered_map<int, vector<int>> mp;\n        vector<int> mx; \n        int n = nums.size();  // Added missing variable `n`\n\n        // Iterate over half the array\n        for (int i = 0; i < n / 2; ++i) {\n            int a = nums[i], b = nums[n - i - 1];\n            int diff = abs(a - b);\n            int mxX = max({a, b, k - a, k - b});\n            mp[diff].push_back(mxX);\n            mx.push_back(mxX);\n        }\n        ranges::sort(mx.begin(), mx.end());\n        int ans = n; \n        for (auto &pair : mp) {\n            int diff = pair.first;\n            int cnt = binarySearch(mx, diff);  \n            int totalnow = cnt * 2 + (n / 2 - cnt);  \n            for (auto &it : pair.second) {\n                if (it < diff) {\n                    totalnow -= 2;\n                } else {\n                    totalnow -= 1;\n                }\n            }\n            ans = min(ans, totalnow);\n        }\n        return ans;\n    }\n\nprivate:\n    int binarySearch(const vector<int>& nums, int target) {\n        int left = 0, right = nums.size() - 1;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            if (nums[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return left;\n    }\n};\n",
    "submit_ts": "1721489850",
    "subm_id": "1327465692"
}