{
    "username": "CoreyLin",
    "submission": "class Solution {\n    func minFlips(_ grid: [[Int]]) -> Int {\n        // 11, 000000\n        // the mid point must be 0\n        var rowSize = grid.count\n        var colSize = grid[0].count\n        var topLeft = [0, 0]\n        var topRight = [0, colSize - 1]\n        var bottomLeft = [rowSize-1, 0]\n        var bottomRight = [rowSize-1, colSize - 1]\n        var result = 0\n        var twoCount = 0\n        var twoCount2 = 0\n        while topLeft[0] <= bottomLeft[0] {\n\n            var topLeft2 = topLeft\n            var topRight2 = topRight\n            var bottomLeft2 = bottomLeft\n            var bottomRight2 = bottomRight\n            // print(\"New iteration: \\(topLeft2) \\(topRight2) \\(bottomLeft2) \\(bottomRight2)\")\n            while topLeft2[1] <= topRight2[1] {\n                \n                if topLeft2 == topRight2 && topLeft2 == bottomLeft2 {\n                    // 1\n                    if grid[topLeft2[0]][topLeft2[1]] == 1 {\n                        result += 1\n                        // print(\"1. add 1\")\n                    }\n                } else if topLeft2 == topRight2 {\n                    //2\n                    if grid[topLeft2[0]][topLeft2[1]] != grid[bottomLeft2[0]][bottomLeft2[1]] {\n                        result += 1\n                        twoCount2 += 1\n                        // print(\"2. add 1\")\n                    } else if grid[topLeft2[0]][topLeft2[1]] == 1 {\n                        twoCount += 1\n                    }\n                } else if topLeft2 == bottomLeft2 {\n                    // 2\n                    if grid[topLeft2[0]][topLeft2[1]] != grid[topRight2[0]][topRight2[1]] {\n                        result += 1\n                        twoCount2 += 1\n                        // print(\"2. add 1\")\n                    } else if grid[topLeft2[0]][topLeft2[1]] == 1 {\n                        twoCount += 1\n                    }\n                } else {\n                    // 4\n                    var oneCount = 0\n                    var zCount = 0\n                    if grid[topLeft2[0]][topLeft2[1]] == 1 {\n                        oneCount += 1\n                    } else {\n                        zCount += 1\n                    }\n                    if grid[topRight2[0]][topRight2[1]] == 1 {\n                        oneCount += 1\n                    } else {\n                        zCount += 1\n                    }\n                    if grid[bottomLeft2[0]][bottomLeft2[1]] == 1 {\n                        oneCount += 1\n                    } else {\n                        zCount += 1\n                    }\n                    if grid[bottomRight2[0]][bottomRight2[1]] == 1 {\n                        oneCount += 1\n                    } else {\n                        zCount += 1\n                    }\n                    \n                    // print(\"4. add \\(4 - max(oneCount, zCount))\")\n                    result += (4 - max(oneCount, zCount))\n                }\n                topLeft2[1] += 1\n                topRight2[1] -= 1\n                bottomLeft2[1] += 1\n                bottomRight2[1] -= 1\n            }\n\n            topLeft[0] += 1\n            topRight[0] += 1\n            bottomLeft[0] -= 1\n            bottomRight[0] -= 1\n        }\n        if twoCount % 2 == 1 && twoCount2 == 0 {\n            result += 2\n        }\n        // print(\"twoCount \\(twoCount), twoCount2 \\(twoCount2)\")\n\n        return result\n    }\n}\n// 1 1 0 0 1\n// 0 1 1 0 1\n// 0 0 1 1 1\n// 1 0 1 1 0\n// 1 0 1 1 0\n// 0 0 1 1 1\n// 0 1 1 0 1\n// 1 1 0 1 0\n\n// ====\n// 1 + 1 + 0\n",
    "submit_ts": "1722699649",
    "subm_id": "1343218067"
}