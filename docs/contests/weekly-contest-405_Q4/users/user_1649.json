{
    "username": "anshu11n",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    TrieNode* root;\n    vector<int> dp;\n    \n    Solution() {\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    int minimumCost(string tar, vector<string>& w, vector<int>& c) {\n        int n = w.size();\n        for (int i = 0; i < n; i++) {\n            insert(w[i], c[i]);\n        }\n\n        int m = tar.length();\n        dp = vector<int>(m + 1, INT_MAX);\n        dp[m] = 0;\n\n        for (int i = m - 1; i >= 0; i--) {\n            TrieNode* node = root;\n            for (int j = i; j < m; j++) {\n                if (!node->children.count(tar[j])) break;\n                node = node->children[tar[j]];\n                if (node->cost != INT_MAX && dp[j + 1] != INT_MAX) {\n                    dp[i] = min(dp[i], node->cost + dp[j + 1]);\n                }\n            }\n        }\n\n        return dp[0] == INT_MAX ? -1 : dp[0];\n    }\n};\n",
    "submit_ts": "1720323802",
    "subm_id": "1312384382"
}