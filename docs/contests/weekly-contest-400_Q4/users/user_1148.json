{
    "username": "dhruv_g",
    "submission": "#include <vector>\n#include <climits>\nusing namespace std;\n\nclass RangeTree {\nprivate:\n    vector<int> segment;\n    int size;\n\n    void constructTree(vector<int>& input, int node, int left, int right) {\n        if (left == right) {\n            segment[node] = input[left];\n        } else {\n            int mid = (left + right) / 2;\n            constructTree(input, 2 * node + 1, left, mid);\n            constructTree(input, 2 * node + 2, mid + 1, right);\n            segment[node] = segment[2 * node + 1] & segment[2 * node + 2];\n        }\n    }\n\n    int query(int node, int left, int right, int queryLeft, int queryRight) {\n        if (queryRight < left || right < queryLeft) {\n            return INT_MAX;\n        }\n        if (queryLeft <= left && right <= queryRight) {\n            return segment[node];\n        }\n        int mid = (left + right) / 2;\n        int leftResult = query(2 * node + 1, left, mid, queryLeft, queryRight);\n        int rightResult = query(2 * node + 2, mid + 1, right, queryLeft, queryRight);\n        return leftResult & rightResult;\n    }\n\npublic:\n    RangeTree(vector<int>& input) {\n        size = input.size();\n        segment.resize(4 * size);\n        constructTree(input, 0, 0, size - 1);\n    }\n\n    int getRangeAnd(int queryLeft, int queryRight) {\n        return query(0, 0, size - 1, queryLeft, queryRight);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int threshold) {\n        int n = nums.size();\n        RangeTree rangeTree(nums);\n        int minDifference = INT_MAX;\n        \n        for (int i = 0; i < n; ++i) {\n            int left = i - 1, right = n - 1, mid;\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (rangeTree.getRangeAnd(i, mid) >= threshold)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                minDifference = min(minDifference, abs(rangeTree.getRangeAnd(i, left) - threshold));\n            minDifference = min(minDifference, abs(threshold - rangeTree.getRangeAnd(i, right)));\n        }\n        \n        return minDifference;\n    }\n};\n",
    "submit_ts": 1717300383.0
}