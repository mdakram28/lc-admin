{
    "username": "pein531",
    "submission": "typedef unsigned long long ULL;\nconst int N = 50010, INF = 0x3f3f3f3f;\nint dp[N];\n\nclass StringHash {\npublic:\n    explicit StringHash(string& str, int base=131) {\n        n = str.size();\n        this->base = base;\n        string s = \"*\" + str;\n        h.resize(n + 1);\n        p.resize(n + 1);\n        p[0] = 1;\n        for(int i = 1; i <= n; i++) {\n            h[i] = h[i - 1]*base + s[i];\n            p[i] = p[i - 1]*base;\n        }\n    }\n\n    ULL shash(int left, int right) {\n        ++left, ++right;\n        return h[right] - h[left - 1]*p[right - left + 1];\n    }\n\nprivate:\n    int base, n;\n    vector<ULL> h, p;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        StringHash tsh = StringHash(target);\n        map<int, unordered_map<ULL, int>> len2val;\n        for(int i = 0; i < n; i++) {\n            StringHash sh = StringHash(words[i]);\n            int len = words[i].size();\n            ULL hval = sh.shash(0, len - 1);\n            if(len2val.count(len) && len2val[len].count(hval)) {\n                len2val[len][hval] = min(len2val[len][hval], costs[i]);\n            }else {\n                len2val[len][hval] = costs[i];\n            }\n        }\n        int m = target.size();\n        memset(dp, 0x3f, sizeof(dp));\n        dp[m] = 0;\n        for(int i = m - 1; i >= 0; i--) {\n            for(auto&[offset, hval2cost]: len2val) {\n                if(i + offset > m) break;\n                ULL hval = tsh.shash(i, i + offset - 1);\n                if(hval2cost.count(hval)) {\n                    int cost = hval2cost[hval];\n                    dp[i] = min(dp[i], dp[i + offset] + cost);\n                }\n            }\n        }\n        return dp[0] == INF? -1: dp[0];\n    }\n};",
    "submit_ts": "1720323511",
    "subm_id": "1312377399"
}