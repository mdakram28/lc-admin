{
    "username": "Suryadeep2004",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> ch;\n        vector<pair<int, int>> we; \n    };\n\n    class Trie {\n    public:\n        TrieNode* rt; \n        Trie() { rt = new TrieNode(); }\n\n        void insert(string& wd, int idx, int cst) {\n            TrieNode* nd = rt;\n            for (char c : wd) {\n                if (!nd->ch.count(c))\n                    nd->ch[c] = new TrieNode();\n                nd = nd->ch[c];\n            }\n            nd->we.push_back({idx, cst});\n        }\n    };\n\n    void Suryadeep(string& target, vector<string>& words, vector<int>& costs, Trie& tr, vector<int>& dp) {\n        int n = target.size();\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* nd = tr.rt;\n\n            for (int iter = i; iter < n; iter++) {\n                if (!nd->ch.count(target[iter])) break;\n                nd = nd->ch[target[iter]];\n\n                for (auto& p : nd->we) {\n                    int wdIdx = p.first;\n                    int wdCst = p.second;\n                    int sizes = words[wdIdx].size();\n\n                    if (i + sizes <= n) dp[i + sizes] = min(dp[i + sizes], dp[i] + wdCst);\n                }\n            }\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int mm = words.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie tr;\n        for (int i = 0; i < mm; i++) tr.insert(words[i], i, costs[i]);\n\n        Suryadeep(target, words, costs, tr, dp);\n\n        if(dp[n] != INT_MAX) return dp[n];\n        return -1;\n    }\n};\n\n\n\n\n",
    "submit_ts": "1720324758",
    "subm_id": "1312407461"
}