{
    "username": "user2032m",
    "submission": "class Solution {\n    long long memo[102][102][102];\npublic:\n    long long dp(vector<vector<pair<int, int>>>& board, int i, int a, int b)\n    {\n        if(i >= board.size())\n            return -1e12;\n\n        if(memo[i][a][b] != -1)\n            return memo[i][a][b];\n\n        long long notplace = dp(board, i+1, a, b);\n\n        long long place = -1e12;\n\n        for(auto col: board[i])\n        {\n            if(a == 101)\n                place = max(place, col.first + dp(board, i+1, col.second, b));\n            else if(b == 101 && col.second != a)    \n                place = max(place, col.first + dp(board, i+1, a, col.second));\n            else if(col.second != a && col.second != b)\n            {\n                place = col.first; \n                break;\n            }\n        }\n\n        return memo[i][a][b] = max(notplace, place);\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<pair<int, int>>> b;\n        int m = board.size(), n = board[0].size();\n        memset(memo, -1, sizeof(memo));\n\n        for(int i=0;i<m;i++)\n        {\n            vector<pair<int, int>> v;\n\n            for(int j=0;j<n;j++)\n                v.push_back({board[i][j], j});\n\n            sort(rbegin(v), rend(v));\n            b.push_back(v);\n        }\n\n        return dp(b, 0, 101, 101);\n    }\n};",
    "submit_ts": "1723909531",
    "subm_id": "1359196086"
}