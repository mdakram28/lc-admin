{
    "username": "gurshaan_1",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> endWords;\n    };\n\n    class Trie {\n    public:\n        TrieNode* rootNode;\n        Trie() { rootNode = new TrieNode(); }\n\n        void insert(string& word, int idx, int cost) {\n            TrieNode* currentNode = rootNode;\n            for (char ch : word) {\n                if (!currentNode->children.count(ch))\n                    currentNode->children[ch] = new TrieNode();\n                currentNode = currentNode->children[ch];\n            }\n            currentNode->endWords.push_back({idx, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& wordList, vector<int>& costList) {\n        int targetLength = target.size();\n        vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < wordList.size(); ++i) {\n            trie.insert(wordList[i], i, costList[i]);\n        }\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.rootNode;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break;\n                currentNode = currentNode->children[target[j]];\n                for (auto& p : currentNode->endWords) {\n                    int wordIdx = p.first;\n                    int wordCost = p.second;\n                    int wordLen = wordList[wordIdx].size();\n                    if (i + wordLen <= targetLength) {\n                        dp[i + wordLen] = min(dp[i + wordLen], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n",
    "submit_ts": "1720324256",
    "subm_id": "1312395195"
}