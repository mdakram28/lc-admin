{
    "username": "123454321",
    "submission": "class RangeQuery:\n    def __init__(self, data, func=min):\n        self.func = func\n        self._data = _data = [list(data)]\n        i, n = 1, len(_data[0])\n        while 2 * i <= n:\n            prev = _data[-1]\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        depth = (stop - start).bit_length() - 1\n        return self.func(self._data[depth][start], self._data[depth][stop - (1 << depth)])\n\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        rmq = RangeQuery(nums, lambda x, y: x&y)\n        ans = 10**9\n        for i in range(n):\n            if k >= nums[i]:\n                ans = min(ans, k-nums[i])\n            else:\n                le = i\n                ri = n-1\n                while le < ri:\n                    mid = (le+ri+1)//2\n                    if rmq.query(i, mid+1) >= k:\n                        le = mid\n                    else:\n                        ri = mid-1\n                ans = min(ans, rmq.query(i, le+1)-k)\n                if le+1 < n:\n                    ans = min(ans, k-rmq.query(i, le+2))\n        return ans\n",
    "submit_ts": "1717296831",
    "subm_id": "1274719722"
}