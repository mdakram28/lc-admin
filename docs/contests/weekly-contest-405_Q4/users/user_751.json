{
    "username": "gajmain2020",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wends;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(string w, int idx, int cost) {\n        TrieNode* node = root;\n        for (char c : w) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wends.push_back({idx, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string tar, vector<string>& w, vector<int>& c) {\n        int n = tar.size();\n        Trie trie;\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < w.size(); ++i) {\n            trie.insert(w[i], i, c[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (!node->children.count(tar[j])) \n                    break;\n                \n                node = node->children[tar[j]];\n                for (auto& p : node->wends) {\n                    int wlen = w[p.first].size();\n                    if (i + wlen <= n) {\n                        dp[i + wlen] = min( dp[i] + p.second,dp[i + wlen]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] != INT_MAX? dp[n] : -1;\n    }\n};",
    "submit_ts": "1720322510",
    "subm_id": "1312351826"
}