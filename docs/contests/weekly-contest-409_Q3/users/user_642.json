{
    "username": "yzkkai",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> dsu(2 * n);\n        iota(dsu.begin(), dsu.end(), 0);\n        auto find = [&](auto& self, int cur) -> int {\n            return dsu[cur] == cur ? cur : dsu[cur] = self(self, dsu[cur]);\n        };\n        auto same = [&](int u, int v) {\n            u = find(find, u);\n            v = find(find, v);\n            return u == v;\n        };\n        auto unit = [&](int u, int v) {\n            u = find(find, u);\n            v = find(find, v);\n            dsu[u] = v;\n        };\n\n        int cnt = 2 * n;\n        auto merge = [&](int u, int v) {\n            u = find(find, u);\n            v = find(find, v);\n            for (int i = u; i < v;) {\n                if (!same(i, i + 1)) {\n                    unit(i, i + 1);\n                    --cnt;\n                }\n                i = find(find, i);\n            }\n        };\n\n        for (int i = 0; i < n - 1; ++i) {\n            merge(2 * i + 1, 2 * (i + 1));\n        }\n\n        vector<int> ans;\n        for (const auto& quer : queries) {\n            int u = quer[0], v = quer[1];\n            merge(2 * u + 1, 2 * v);\n\n            ans.emplace_back(cnt - 2);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722742566",
    "subm_id": "1343771923"
}