{
    "username": "JavOliva",
    "submission": "template<class T, T m_(T, T)> struct IterativeSegmentTree{\n  int n; vector<T> ST;\n  IterativeSegmentTree(){}\n  IterativeSegmentTree(vector<T> &a){\n    n = a.size(); ST.resize(n << 1);\n    for (int i=n;i<(n<<1);i++)ST[i]=a[i-n];\n    for (int i=n-1;i>0;i--)ST[i]=m_(ST[i<<1],ST[i<<1|1]);\n  }\n  void update(int pos, T val){ // replace with val\n    ST[pos += n] = val;\n    for (pos >>= 1; pos > 0; pos >>= 1)\n      ST[pos] = m_(ST[pos<<1], ST[pos<<1|1]);\n  }\n  T query(int l, int r){ // [l, r]\n    T ansL, ansR; bool hasL = 0, hasR = 0;\n    for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {\n      if (l & 1) \n        ansL=(hasL?m_(ansL,ST[l++]):ST[l++]),hasL=1;\n      if (r & 1) \n        ansR=(hasR?m_(ST[--r],ansR):ST[--r]),hasR=1;\n    }\n    if (!hasL) return ansR; if (!hasR) return ansL;\n    return m_(ansL, ansR);\n  }\n}; // Give vector of leaves and merge function\n\ntemplate<class T>\nT merge(T a, T b){\n  return a + b;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        int q = queries.size();\n        vector<int> sums(n);\n        for (int i = 0; i < n; i ++){\n            int leseras = 0;\n            if (i != 0 and nums[i] > nums[i - 1])\n                leseras ++;\n            if (i != n - 1 and nums[i] > nums[i + 1])\n                leseras ++;\n            if (leseras == 2)\n                sums[i] = 1;\n        }\n        IterativeSegmentTree<int, merge<int>> ST(sums);\n        vector<int> answers;\n        for (int i = 0; i < q; i ++){\n            int t = queries[i][0];\n            int l = queries[i][1];\n            int r = queries[i][2];\n            if (t == 1){\n                int cur_ans = (l + 1 <= r - 1 ? ST.query(l + 1, r - 1) : 0);\n                answers.push_back(cur_ans);\n            }\n            else{\n                nums[l] = r;\n                for (int i = max(0, l - 1); i <= min(n - 1, l + 1); i ++){\n                    int leseras = 0;\n                    if (i != 0 and nums[i] > nums[i - 1])\n                        leseras ++;\n                    if (i != n - 1 and nums[i] > nums[i + 1])\n                        leseras ++;\n                    if (leseras == 2)\n                        ST.update(i, 1);\n                    else\n                        ST.update(i, 0);\n                }\n            }\n        }\n        return answers;\n    }\n};",
    "submit_ts": 1718506092.0
}