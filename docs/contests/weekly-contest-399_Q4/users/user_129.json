{
    "username": "gonglinyuan",
    "submission": "class Tree:\n    def __init__(self, x):\n        self.x = x\n        self.lch = None\n        self.rch = None\n        self.ans00 = None\n        self.ans01 = None\n        self.ans10 = None\n        self.ans11 = None\n    \n    def push_up(self):\n        if self.lch is not None and self.rch is not None:\n            self.ans00 = max(\n                self.lch.ans00 + self.rch.ans00 + self.x,\n                self.lch.ans01 + self.rch.ans10,\n                0\n            )\n            self.ans01 = max(\n                self.lch.ans00 + self.rch.ans01 + self.x,\n                self.lch.ans01 + self.rch.ans11,\n                0\n            )\n            self.ans10 = max(\n                self.lch.ans10 + self.rch.ans00 + self.x,\n                self.lch.ans11 + self.rch.ans10,\n                0\n            )\n            self.ans11 = max(\n                self.lch.ans10 + self.rch.ans01 + self.x,\n                self.lch.ans11 + self.rch.ans11,\n                0\n            )\n        elif self.lch is not None:\n            self.ans00 = max(\n                self.lch.ans01,\n                0\n            )\n            self.ans01 = max(\n                self.lch.ans00 + self.x,\n                self.lch.ans01,\n                0\n            )\n            self.ans10 = max(\n                self.rch.ans11,\n                0\n            )\n            self.ans11 = max(\n                self.lch.ans10 + self.x,\n                self.lch.ans11,\n                0\n            )\n        elif self.rch is not None:\n            self.ans00 = max(\n                self.rch.ans10,\n                0\n            )\n            self.ans01 = max(\n                self.rch.ans11,\n                0\n            )\n            self.ans10 = max(\n                self.rch.ans00 + self.x,\n                self.rch.ans10,\n                0\n            )\n            self.ans11 = max(\n                self.rch.ans01 + self.x,\n                self.rch.ans11,\n                0\n            )\n        else:\n            self.ans00 = 0\n            self.ans10 = 0\n            self.ans01 = 0\n            self.ans11 = max(self.x, 0)\n    \n    def modify(self, l, r, k, x):\n        mid = (l + r) // 2\n        if k == mid:\n            self.x = x\n        elif k < mid:\n            self.lch.modify(l, mid - 1, k, x)\n        else:\n            self.rch.modify(mid + 1, r, k, x)\n        self.push_up()\n\n    \ndef build(l, r, arr):\n    if l > r:\n        return None\n    mid = (l + r) // 2\n    node = Tree(arr[mid])\n    node.lch = build(l, mid - 1, arr)\n    node.rch = build(mid + 1, r, arr)\n    node.push_up()\n    return node\n\n\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        p = 1000000007\n        n = len(nums)\n        tree = build(0, n - 1, nums)\n        ans = 0\n        for k, x in queries:\n            tree.modify(0, n - 1, k, x)\n            ans = (ans + tree.ans11) % p\n        return ans",
    "submit_ts": "1716694608",
    "subm_id": "1268120301"
}