{
    "username": "bouceback07",
    "submission": "class Solution {\n    int getAnd(vector<vector<int>> &pre, int r, int l) {\n        int ans = 0;\n        for(int po=0;po<30;po++) {\n            int temp = pre[r][po] - (l == 0 ? 0 : pre[l-1][po]);\n            if(temp == r-l+1) {\n                ans |= (1<<po);\n            } \n        }\n        return ans;\n    }\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int ans = 1e9+7;\n        int n = nums.size();\n        vector<vector<int>> pre(n, vector<int>(30, 0));\n        for(int i=0;i<n;i++) {\n            if(i > 0) {\n                pre[i] = pre[i-1];\n            }\n            for(int po=0;po<30;po++) {\n                if((nums[i]&(1<<po)) > 0) {\n                    pre[i][po]++;\n                }\n            }\n        }\n        \n        for(int i=0;i<n;i++) {\n            int lo = i, hg = n-1;\n            while(lo <= hg) {\n                int mid = (lo + hg)/2;\n                int tempand = getAnd(pre, mid, i);\n                ans = min(ans, abs(tempand - k));\n                if(tempand > k) {\n                    lo = mid + 1;\n                }\n                else {\n                    hg = mid - 1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298141.0
}