{
    "username": "Abhi_Srivastava",
    "submission": "class Solution {\npublic:\n    map<vector<int>, int> dp;\n    long long ways(long long curr, int k, bool lastused, int jump) {\n        vector<int> vec = {(int)curr, (int)lastused, jump};\n        if (dp.find(vec) != dp.end())\n            return dp[vec];\n        if (curr - k > 3)\n            return 0;\n        long long res = (curr == k);\n        if ((!lastused) && curr)\n            res += ways(curr - 1, k, 1, jump);\n        res += ways(curr + (1ll << jump), k, 0, jump + 1);\n        return dp[vec] = res;\n    }\n    int waysToReachStair(int k) {\n        return ways(1, k, 0, 0);        \n    }\n};",
    "submit_ts": "1716086989",
    "subm_id": "1261769513"
}