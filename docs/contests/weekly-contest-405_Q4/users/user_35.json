{
    "username": "garg07825",
    "submission": "\nimport java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    static class TrieNode {\n        Map<Character, TrieNode> children;\n        int index;\n\n        TrieNode() {\n            children = new HashMap<>();\n            index = -1;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        TrieNode root = new TrieNode();\n        \n        // Build the Trie\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (char c : words[i].toCharArray()) {\n                node = node.children.computeIfAbsent(c, k -> new TrieNode());\n            }\n            if (node.index == -1 || costs[i] < costs[node.index]) {\n                node.index = i;\n            }\n        }\n\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; // No cost to create an empty string\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; // Skip impossible states\n            \n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                node = node.children.get(target.charAt(j));\n                if (node == null) break;\n                if (node.index != -1) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + costs[node.index]);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n    }",
    "submit_ts": "1720319737",
    "subm_id": "1312269104"
}