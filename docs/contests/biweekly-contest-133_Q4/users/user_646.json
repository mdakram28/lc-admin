{
    "username": "aashishsoni",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n        int maxInversions = n * (n - 1) / 2;\n\n        vector<int> dp(maxInversions + 1, 0), prefixSum(maxInversions + 2, 0);\n        dp[0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            fill(prefixSum.begin(), prefixSum.end(), 0);\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                prefixSum[inv + 1] = (prefixSum[inv] + dp[inv]) % MOD;\n            }\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                dp[inv] = (prefixSum[inv + 1] - (inv >= len ? prefixSum[inv - len + 1] : 0) + MOD) % MOD;\n            }\n        }\n\n        vector<int> requiredInversions(n, -1);\n        for (const auto& req : requirements) {\n            requiredInversions[req[0]] = req[1];\n        }\n\n        vector<vector<int>> validDp(n + 1, vector<int>(maxInversions + 1, 0));\n        validDp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            fill(prefixSum.begin(), prefixSum.end(), 0);\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                prefixSum[inv + 1] = (prefixSum[inv] + validDp[len - 1][inv]) % MOD;\n            }\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                validDp[len][inv] = (prefixSum[inv + 1] - (inv >= len ? prefixSum[inv - len + 1] : 0) + MOD) % MOD;\n                if (requiredInversions[len - 1] != -1 && inv != requiredInversions[len - 1]) {\n                    validDp[len][inv] = 0;\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inv = 0; inv <= maxInversions; ++inv) {\n            result = (result + validDp[n][inv]) % MOD;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1719070002.0
}