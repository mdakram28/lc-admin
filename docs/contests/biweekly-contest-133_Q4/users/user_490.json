{
    "username": "Anish_das001",
    "submission": "class Solution {\npublic:\n    \n        static const int MOD = 1000000007;\n    static const int mi = 400;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n                // Convert requirements into a map for quick access\n        std::unordered_map<int, int> akkiReqMap;\n        for (const auto& akkiReq : requirements) {\n            akkiReqMap[akkiReq[0] + 1] = akkiReq[1];  // akkiReq[0] + 1 because akkiReq is 0-indexed but positions are 1-indexed\n        }\n\n        // DP array to count permutations with specific lengths and inversions\n        std::vector<std::vector<long long>> akkiPermCounts(n + 1, std::vector<long long>(mi + 1, 0));\n        akkiPermCounts[0][0] = 1;  // Base case: one way to arrange 0 elements with 0 inversions\n\n        // Fill the DP table\n        for (int akkiLength = 1; akkiLength <= n; akkiLength++) {\n            for (int akkiInv = 0; akkiInv <= mi; akkiInv++) {\n                for (int akkiNewPos = 0; akkiNewPos < akkiLength; akkiNewPos++) {\n                    int akkiPrevInv = akkiInv - akkiNewPos;\n                    if (akkiPrevInv >= 0) {\n                        akkiPermCounts[akkiLength][akkiInv] = (akkiPermCounts[akkiLength][akkiInv] + akkiPermCounts[akkiLength - 1][akkiPrevInv]) % MOD;\n                    }\n                }\n            }\n\n            // Apply requirements: If there is a requirement for current length\n            if (akkiReqMap.find(akkiLength) != akkiReqMap.end()) {\n                int akkiTargetInv = akkiReqMap[akkiLength];\n                for (int akkiInv = 0; akkiInv <= mi; akkiInv++) {\n                    if (akkiInv != akkiTargetInv) {\n                        akkiPermCounts[akkiLength][akkiInv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up all permutations of length n with any number of inversions\n        long long akkiResult = 0;\n        for (long long akkiCount : akkiPermCounts[n]) {\n            akkiResult = (akkiResult + akkiCount) % MOD;\n        }\n\n        return static_cast<int>(akkiResult);\n    }\n};",
    "submit_ts": 1719070247.0
}