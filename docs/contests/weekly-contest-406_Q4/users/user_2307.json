{
    "username": "armorodoid",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> horizontalQueue = new PriorityQueue<>(Comparator.reverseOrder());\n        PriorityQueue<Integer> verticalQueue = new PriorityQueue<>(Comparator.reverseOrder());\n        \n        \n        for (int hCut : horizontalCut) \n            horizontalQueue.add(hCut);\n        for (int vCut : verticalCut) \n            verticalQueue.add(vCut);\n        \n        \n        int hCount = 1, vCount = 1;\n        long totalCost = 0L;\n        \n        \n        while (!horizontalQueue.isEmpty() || !verticalQueue.isEmpty()) {\n            if (verticalQueue.isEmpty()) {\n                totalCost += horizontalQueue.poll() * vCount;\n                hCount++;\n            } else if (horizontalQueue.isEmpty()) {\n                totalCost += verticalQueue.poll() * hCount;\n                vCount++;\n            } else if (horizontalQueue.peek() >= verticalQueue.peek()) {\n                totalCost += horizontalQueue.poll() * vCount;\n                hCount++;\n            } else {\n                totalCost += verticalQueue.poll() * hCount;\n                vCount++;\n            }\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925999",
    "subm_id": "1320272855"
}