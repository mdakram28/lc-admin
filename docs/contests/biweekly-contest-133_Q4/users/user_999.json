{
    "username": "parwez0786",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    int MOD = 1000000007;\n    int MX = 400;\n    vector<vector<long long>> memo;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        memo.assign(n + 1, vector<long long>(MX + 1, -1));\n        memo[0][0] = 1;\n\n      \n        unordered_map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        long long result = 0;\n        for (int inv = 0; inv <= MX; inv++) {\n            result = (result + countPermutations(n, inv, reqMap)) % MOD;\n        }\n\n        return result;\n    }\n\nprivate:\n    long long countPermutations(int length, int inv, unordered_map<int, int>& reqMap) {\n     \n        if (memo[length][inv] != -1) {\n            return memo[length][inv];\n        }\n\n       \n        if (length == 0) {\n            return (inv == 0) ? 1 : 0;\n        }\n\n        // Recursive calculation\n        long long count = 0;\n        for (int newPos = 0; newPos < length; newPos++) {\n            int prevInv = inv - newPos;\n            if (prevInv >= 0) {\n                count = (count + countPermutations(length - 1, prevInv, reqMap)) % MOD;\n            }\n        }\n\n       \n        if (reqMap.count(length)) {\n            int targetInv = reqMap[length];\n            if (inv != targetInv) {\n                count = 0;\n            }\n        }\n\n       \n        memo[length][inv] = count;\n        return count;\n    }\n};\n",
    "submit_ts": 1719071769.0
}