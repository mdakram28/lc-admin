{
    "username": "Chetan khulage",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        vector<vector<pair<int, int>>> rowMaxes(m);\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> values;\n            for (int j = 0; j < n; ++j) {\n                values.emplace_back(board[i][j], j);\n            }\n\n            sort(values.rbegin(), values.rend());\n            if (values.size() > 3) {\n                values.resize(3);\n            }\n            rowMaxes[i] = values;\n        }\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    \n               \n                    set<int> usedCols;\n                    long long currentSum = LLONG_MIN;\n\n                    for (const auto& val1 : rowMaxes[r1]) {\n                        for (const auto& val2 : rowMaxes[r2]) {\n                            if (val1.second == val2.second) continue;  // Skip if column is the same\n                            for (const auto& val3 : rowMaxes[r3]) {\n                                if (val1.second != val3.second && val2.second != val3.second) {\n                                    currentSum = max(currentSum,\n                                        (long long)val1.first + val2.first + val3.first);\n                                }\n }\n                        }\n                    }\n\n                    maxSum = max(maxSum, currentSum);\n                }\n            }\n        }\n\n        return maxSum;\n \n    }\n};",
    "submit_ts": "1723908648",
    "subm_id": "1359161374"
}