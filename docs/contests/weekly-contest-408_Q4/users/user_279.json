{
    "username": "temirulan",
    "submission": "class Solution {\npublic:\n    bool contains(vector<int> &circle, int x, int y) {\n        int xo = circle[0], yo = circle[1], r = circle[2];\n        long long d = (x - xo) * 1ll * (x - xo) + (y - yo) * 1ll * (y - yo);\n        return r * 1ll * r >= d;\n    }\n    bool intersects(vector<int> &a, vector<int> &b) {\n        int x1 = a[0], y1 = a[1], r1 = a[2];\n        int x2 = b[0], y2 = b[1], r2 = b[2];\n        long long d = (x1 - x2) * 1ll * (x1 - x2) + (y1 - y2) * 1ll * (y1 - y2);\n        // sqrt(d) <= r1 + r2;\n        return d <= (r1 + r2) * 1ll * (r1 + r2);\n    }\n    bool horizontal(vector<int> &a, int y, int x) {\n        int xo = a[0], yo = a[1], r = a[2];\n        int dist = abs(yo - y);\n        if (dist > r) return false;\n        if (contains(a, 0, y) || contains(a, x, y)) return true;\n        return xo >= 0 && xo <= x;\n    }\n    bool vertical(vector<int> &a, int x, int y) {\n        int xo = a[0], yo = a[1], r = a[2];\n        int dist = abs(xo - x);\n        if (dist > r) return false;\n        if (contains(a, x, 0) || contains(a, x, y)) return true;\n        return yo >= 0 && yo <= y;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        int L = n, U = n + 1, R = n + 2, D = n + 3;\n        int sz = n + 4;\n        for (int i = 0; i < n; i++) {\n            if (contains(circles[i], 0, 0) || contains(circles[i], X, Y)) {\n                return false;\n            }\n        }\n        vector<vector<int> > g(sz, vector<int>());\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (intersects(circles[i], circles[j])) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n            if (vertical(circles[i], 0, Y)) {\n                g[i].push_back(L);\n                g[L].push_back(i);\n            }\n            if (horizontal(circles[i], 0, X)) {\n                g[i].push_back(D);\n                g[D].push_back(i);\n            }\n            if (vertical(circles[i], X, Y)) {\n                g[i].push_back(R);\n                g[R].push_back(i);\n            }\n            if (horizontal(circles[i], Y, X)) {\n                g[i].push_back(U);\n                g[U].push_back(i);\n            }\n        }\n\n        vector<int> used(sz, 0);\n        queue<int> q;\n        used[D] = used[R] = 1;\n        q.push(D);\n        q.push(R);\n        while (!q.empty()) {\n            int v = q.front(); q.pop();\n            for (int to : g[v]) {\n                if (!used[to]) {\n                    used[to] = 1;\n                    q.push(to);\n                }\n            }\n        }\n        if (used[L] || used[U]) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722136138",
    "subm_id": "1335724977"
}