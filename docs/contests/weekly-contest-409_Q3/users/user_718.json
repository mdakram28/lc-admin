{
    "username": "costheta",
    "submission": "class Solution {\npublic:\n    vector<int> st;\n    vector<int> lazy;\n    void update(int node, int start, int end, int l, int r) {\n        if (lazy[node] != 0) {\n            st[node] = (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2 * node] = lazy[node];\n                lazy[2 * node + 1] = lazy[node];\n            }\n            lazy[node] = 0;\n        }\n        if (start > end or start > r or end < l)\n            return;\n        if (start >= l and end <= r) {\n            st[node] = (end - start + 1);\n            if (start != end) {\n                lazy[2 * node] = 1;\n                lazy[2 * node+ 1] = 1;\n            }\n            return;\n        }\n        int mid = (start + end) / 2;\n        update(2 * node, start, mid, l, r);\n        update(2 * node + 1, mid + 1, end, l, r);\n        st[node] = st[2 * node] + st[2 * node + 1];\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (start > end or start > r or end < l)\n            return 0;\n        if (lazy[node] != 0) {\n            st[node] = (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2*node] = lazy[node];\n                lazy[2*node+1] = lazy[node];\n            }\n            lazy[node] = 0;\n        }\n        if (start >= l and end <= r) return st[node];\n        int mid = (start + end) / 2;\n        int p1 = query(2*node, start, mid, l, r);\n        int p2 = query(2*node+1, mid + 1, end, l, r);\n        return (p1 + p2);\n    }\n\n    vector<int> shortestDistanceAfterQueries(int n,\n                                             vector<vector<int>>& queries) {\n        int ans = n - 1;\n        vector<int> answer;\n        st = vector<int>(4 * n + 10, 0);\n        lazy = vector<int>(4 * n + 10, 0);\n        for (auto q : queries) {\n            if (q[0] >= q[1]) {\n                answer.push_back(ans);\n                continue;\n            }\n            \n            if (query(1,0,n-1,q[0],q[0]) || query(1,0,n-1,q[1],q[1])) {\n                answer.push_back(ans);\n                continue;\n            }\n            int g = query(1,0,n-1,q[0],q[1]);\n            //cout<<q[0]<<\" \"<<q[1]<<\" \"<<g<<endl;\n            ans+=g;\n            ans-=(q[1] - q[0] - 1);\n            update(1,0,n-1,q[0]+1,q[1]-1);\n            answer.push_back(ans);\n        }\n        return answer;\n    }\n};",
    "submit_ts": "1722742522",
    "subm_id": "1343770933"
}