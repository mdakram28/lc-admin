{
    "username": "azhan0222",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        pq = [[0, n, True]]\n        lookup = [-1] * (n + 1)\n\n        trie = {}\n        for word, cost in zip(words, costs):\n            cur = trie\n            for ch in word:\n                entry = cur.setdefault(ch, [{}, float('inf')])\n                cur = entry[0]\n            entry[1] = min(entry[1], cost)\n        # print(trie)\n        \n        while pq:\n            cost, rem, valid = heappop(pq)\n            # print(cost, rem, valid, pq)\n            if not valid:\n                continue\n            lookup[n - rem] = None\n            if rem == 0:\n                return cost\n            cur = trie\n            for i in range(n - rem, n):\n                if target[i] not in cur:\n                    break\n                cur, c = cur[target[i]]\n                if c != float('inf'):\n                    if lookup[i+1]:\n                        if lookup[i+1] != -1:\n                            if lookup[i+1][0] < cost + c:\n                                continue\n                            lookup[i+1][2] = False\n                        entry = [cost + c, n - i - 1, True]\n                        heappush(pq, entry)\n                        lookup[i+1] = entry\n        return -1\n        ",
    "submit_ts": "1720324723",
    "subm_id": "1312406458"
}