{
    "username": "shivanshudixit16",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        circles.sort()\n        c2 = sorted([ (circles[i][0]-circles[i][2],i) for i in range(len(circles)) ])\n        p = {}\n        r = {}\n        \n        def find(i):\n            x1,y1,r1 = circles[i]\n            r.setdefault(i, {\"mx\" : x1 - r1, \"max\": x1 + r1, \"my\" : y1 - r1, \"may\": y1 + r1 })\n            p.setdefault(i,i)\n            if p[i] != i:\n                p[i] = find(p[i])\n            return p[i]\n            \n        for ti in range(len(c2)):\n            i = c2[ti][-1]\n        # for i in range(len(circles)):\n            x1,y1,r1 = circles[i]\n            stj = bisect_left(c2,(x1 - r1,i))\n            etj = bisect_left(c2,(x1 + r1,i))\n            for tj in range(stj,min(len(c2),etj+1)):\n            # for j in range(i+1, len(circles)):\n                # if j > i + 1: break\n                j = c2[tj][-1]\n                p1,p2 = find(i),find(j)\n                \n                x2,y2,r2 = circles[j]\n                \n                if p1 == p2:\n                    r[p1][\"mx\"] = min(r[p1][\"mx\"],x1 - r1,x2 - r2)\n                    r[p1][\"max\"] = max(r[p1][\"max\"],x1 + r1,x2 + r2)\n                    \n                    r[p1][\"my\"] = min(r[p1][\"my\"],y1 - r1,y2 - r2)\n                    r[p1][\"may\"] = max(r[p1][\"may\"],y1 + r1,y2 + r2)\n                    continue\n                \n                \n                \n                # d = math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\n                # d = abs(x1 - x2)  + abs(y1 - y2)\n                d = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)\n                \n                fl = d <= (abs(r1 - r2)) or d <= ((r1 + r2)) or (d <= ((r1 - r2)**2)) or (d <= (r1 + r2)**2) \n                \n\n                # if (d <= r1 - r2) or (d <= r2 - r1) or (d < r1 + r2) or (d == r1 + r2) :\n                if fl:\n                    p1,p2 = find(i),find(j)\n                    \n                    if p1 != p2:\n                        p[p2] = p1\n                        r[p1][\"mx\"] = min(r[p1][\"mx\"],r[p2][\"mx\"])\n                        r[p1][\"max\"] = max(r[p1][\"max\"],r[p2][\"max\"])\n\n                        r[p1][\"my\"] = min(r[p1][\"my\"],r[p2][\"my\"])\n                        r[p1][\"may\"] = max(r[p1][\"may\"],r[p2][\"may\"])\n                    \n                    # r.setdefault(p1, {\"mx\" : inf, \"max\": -inf, \"my\" : inf, \"may\": -inf })\n                    r[p1][\"mx\"] = min(r[p1][\"mx\"],x1 - r1,x2 - r2)\n                    r[p1][\"max\"] = max(r[p1][\"max\"],x1 + r1,x2 + r2)\n                    \n                    r[p1][\"my\"] = min(r[p1][\"my\"],y1 - r1,y2 - r2)\n                    r[p1][\"may\"] = max(r[p1][\"may\"],y1 + r1,y2 + r2)\n                    \n                    if r[p1][\"mx\"] <= 0 and  r[p1][\"my\"] <= 0:\n                        return False\n\n                    if r[p1][\"max\"] >= X and  r[p1][\"may\"] >= Y:\n                        return False\n\n                    if r[p1][\"mx\"] <= 0 and  r[p1][\"max\"] >= X:\n                        return False\n\n                    if r[p1][\"may\"] >= Y and  r[p1][\"my\"] <= 0 :\n                        return False\n        \n        # print(p)\n        for i in range(len(circles)):\n            p1 = find(i)\n            x1,y1,r1 = circles[i]\n            # r.setdefault(p1, {\"mx\" : x1 - r1, \"max\": x1 + r1, \"my\" : y1 - r1, \"may\": y1 + r1 })\n            if p1 == i:\n                # print(i,r)\n                if r[p1][\"mx\"] <= 0 and  r[p1][\"my\"] <= 0:\n                    return False\n                \n                if r[p1][\"max\"] >= X and  r[p1][\"may\"] >= Y:\n                    return False\n                \n                if r[p1][\"mx\"] <= 0 and  r[p1][\"max\"] >= X:\n                    return False\n                \n                if r[p1][\"may\"] >= Y and  r[p1][\"my\"] <= 0 :\n                    return False\n        return True\n                \n                    \n                ",
    "submit_ts": "1722138595",
    "subm_id": "1335794811"
}