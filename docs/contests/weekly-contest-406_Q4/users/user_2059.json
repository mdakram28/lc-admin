{
    "username": "_manishka",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, int>> cuts;\n    for (int i = 0; i < horizontalCut.size(); ++i) {\n        cuts.push_back({horizontalCut[i], 0});\n    }\n    for (int j = 0; j < verticalCut.size(); ++j) {\n        cuts.push_back({verticalCut[j], 1});\n    }\n    \n    \n    sort(cuts.rbegin(), cuts.rend());\n    \n    long long totalCost = 0;\n    long long horizontalPieces = 1;\n    long long verticalPieces = 1;\n    \n   \n    for (auto& cut : cuts) {\n        int cost = cut.first;\n        int type = cut.second;\n        \n        if (type == 0) {\n           \n            totalCost += cost * verticalPieces;\n            horizontalPieces++;\n        } else {\n           \n            totalCost += cost * horizontalPieces;\n            verticalPieces++;\n        }\n    }\n    \n    return totalCost;\n    }\n};",
    "submit_ts": "1720925932",
    "subm_id": "1320270775"
}