{
    "username": "Rajdhakar2003",
    "submission": "class Solution {\n    private val MOD = 1_000_000_007\n    private val MAX_INVERSIONS = 400\n\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n        val reqMap = mutableMapOf<Int, Int>()\n        for (req in requirements) {\n            reqMap[req[0] + 1] = req[1]\n        }\n\n        val permCounts = Array(n + 1) { LongArray(MAX_INVERSIONS + 1) }\n        permCounts[0][0] = 1\n\n        for (length in 1..n) {\n            for (inv in 0..MAX_INVERSIONS) {\n                for (newPos in 0 until length) {\n                    val prevInv = inv - newPos\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD\n                    }\n                }\n            }\n\n            if (reqMap.containsKey(length)) {\n                val targetInv = reqMap[length]!!\n                for (inv in 0..MAX_INVERSIONS) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0\n                    }\n                }\n            }\n        }\n\n        var result: Long = 0\n        for (count in permCounts[n]) {\n            result = (result + count) % MOD\n        }\n\n        return result.toInt()\n    }\n}\n",
    "submit_ts": 1719069895.0
}