{
    "username": "kasinathansj",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] h, int[] v) {\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b)->Integer.compare(b[2],a[2]));\n        for(int i = 0 ; i < h.length ; i++)pq.add(new int[]{0,i,h[i]});\n        for(int i = 0 ; i < v.length ; i++)pq.add(new int[]{1,i,v[i]});\n        long ans = 0;\n        int r = 1;\n        int c = 1;\n        while(pq.size()>0){\n            int rb[] = pq.remove();\n            if(rb[0]==0){\n                ans += c*1l*rb[2];\n                r++;\n            }else{\n                ans += r*1l*rb[2];\n                c++;\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720925894",
    "subm_id": "1320269616"
}