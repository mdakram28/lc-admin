{
    "username": "naman2003now",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def dfs(A):\n            N = len(A)\n            mins = maxs = A[0][0] + A[0][1]\n            mind = maxd = A[0][0] - A[0][1]\n\n            sn, sx = 0, 0\n            dn, dx = 0, 0\n            \n            for i in range(1,N):\n                sum = A[i][0] + A[i][1]\n                diff = A[i][0] - A[i][1]\n                if (sum < mins):\n                    mins = sum\n                    sn = i\n                elif (sum > maxs):\n                    maxs = sum\n                    sx = i\n                    \n                if (diff < mind):\n                    mind = diff\n                    dn = i\n                elif (diff > maxd):\n                    maxd = diff\n                    dx = i\n            if maxs - mins > maxd - mind: \n                return maxs - mins, sn, sx\n            return maxd - mind, dn, dx\n        \n        output, i, j = dfs(points)\n        print(i, j)\n        temp = points[i]\n        points.pop(i)\n        output = min(dfs(points)[0], output)\n        points.insert(i, temp)\n        points.pop(j)\n        output = min(dfs(points)[0], output)\n        return output"
}