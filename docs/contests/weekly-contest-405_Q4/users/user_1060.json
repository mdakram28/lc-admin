{
    "username": "pele_3010",
    "submission": "class Solution {\npublic:\n#define ll long long\n int alphabet_size;\n \n// Trie data structure\nstruct Trie {\n    bool endOfWord = false;\n    ll cost=INT_MAX;\n    Trie* children[26];\n    Trie()\n    {\n        for (int i = 0; i < 26; i++)\n            children[i] = nullptr;\n    }\n};\n \n// Root of trie\nTrie* root;\n \n// Inserting the strings into trie\nvoid insert(string s,ll cost)\n{\n    int n = s.size();\n    Trie* prev = root;\n    for (int i = 0; i < n; i++) {\n        if (prev->children[s[i] - 'a'] == nullptr) {\n            Trie* temp = new Trie;\n            prev->children[s[i] - 'a'] = temp;\n        }\n        prev = prev->children[s[i] - 'a'];\n    }\n    prev->endOfWord = true;\n    prev->cost=min(cost,prev->cost);\n}\n    // int N;\n    // bool ans;\n    // string targett;\n    //     ll solve(int ind,vector<ll>&dp){\n    //         if(ind==N){\n    //             ans=1;\n    //             return 0;\n    //         }\n    //         if(dp[ind]!=-1){\n    //             return dp[ind];\n    //         }\n    //         bool found=0;\n    //         ll k=INT_MAX;\n    //         string a=\"\";\n    //         for(int i=ind;i<N;i++){\n    //             a+=targett[i];\n    //             if(m1[a]>0){\n    //             k=min(k,m1[a]+solve(i+1,dp));\n    //             found=1;\n    //             }\n    //         }\n    //         return dp[ind]=k;\n\n    //     }\n\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n// N=n; ans=0;\n// targett=target;\n  alphabet_size=26;\n\n root = new Trie;\n for (int i = 0; i < words.size(); i++) {\n         reverse(words[i].begin(), words[i].end());\n        insert(words[i],costs[i]);\n    }\n    \n    // unordered_map<string,int>m1;\n        vector<ll>dp(n+1,INT_MAX);\n        // for(int i=0;i<words.size();i++){\n        //     if(m1[words[i]]!=0){\n        //        m1[words[i]]=min(costs[i],m1[words[i]]); \n        //     }else\n        //     m1[words[i]]=costs[i];\n        // }\n        //  int j=solve(0,dp);\n        //  if(ans==1){\n        //     return j;\n        //  }\n        //  else{\n        //     return -1;\n        //  }\n            dp[n]=0;\n        for(int i=n-1;i>=0;i--){\n            string re=\"\";\n             Trie* ptr = root;\n            for(int j=i;j>=0;j--){\n                char ch = target[j];\n                re+=target[j];\n                if (ptr->children[ch - 'a'] == nullptr)\n                break;\n            ptr = ptr->children[ch - 'a'];\n \n            // String found, update the\n            // count(i)\n            if (ptr->endOfWord == true) {\n                dp[j]=min(dp[j],ptr->cost+dp[i+1]);\n\n            }\n            }\n        }\n        // cout<<dp[0]<<\"\\n\";\n        if(dp[0]<INT_MAX){\n            return dp[0];\n        }\n        else{\n            return -1;\n        }\n\n\n\n    }\n};",
    "submit_ts": "1720323354",
    "subm_id": "1312373510"
}