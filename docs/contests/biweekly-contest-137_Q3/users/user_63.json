{
    "username": "Yashesh Bhavsar",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        int [][] up = new int[m][n];\n        int [][] down = new int[m][n];\n        up[0] = board[0];\n        down[m-1] = board[m-1];\n        for(int i = 1; i<m; i++){\n            for(int j = 0; j<n; j++){\n                up[i][j] = Math.max(board[i][j], up[i-1][j]);\n            }\n        }\n        for(int i = m-2; i>=0; i--){\n            for(int j = 0; j<n; j++){\n                down[i][j] = Math.max(board[i][j], down[i+1][j]);\n            }\n        }\n        long ans = Long.MIN_VALUE;\n        for(int i = 1; i<m-1; i++){\n            PriorityQueue<int []> pq = new PriorityQueue<>((a, b) -> a[0]-b[0]);\n            for(int j = 0; j<n; j++){\n                pq.add(new int[]{board[i][j], j});\n            }\n            while(pq.size()>5)  pq.poll();\n            while(pq.size()>0){\n                int idx = pq.poll()[1];\n                long upmax1 = Long.MIN_VALUE, upmax2 = Long.MIN_VALUE;\n                long downmax1 = Long.MIN_VALUE, downmax2 = Long.MIN_VALUE;\n                int upidx = -1, downidx = -1;\n                for(int j = 0; j<n; j++){\n                    if(j==idx)  continue;\n                    if(up[i-1][j]>=upmax1){\n                        upmax2 = upmax1;\n                        upmax1 = up[i-1][j];\n                        upidx = j;\n                    }\n                    else if(up[i-1][j]>=upmax2){\n                        upmax2 = up[i-1][j];\n                    }\n                    if(down[i+1][j]>=downmax1){\n                        downmax2 = downmax1;\n                        downmax1 = down[i+1][j];\n                        downidx = j;\n                    }\n                    else if(down[i+1][j]>=downmax2){\n                        downmax2 = down[i+1][j];\n                    }\n                }\n                if(upidx==downidx){\n                    ans = Math.max(ans, Math.max(board[i][idx]+upmax1+downmax2, board[i][idx]+upmax2+downmax1));\n                }\n                else{\n                    ans = Math.max(ans, board[i][idx]+upmax1+downmax1);\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1723907736",
    "subm_id": "1359122000"
}