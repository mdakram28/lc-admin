{
    "username": "adithyagenie",
    "submission": "using ll = long long;\nusing lli = long long;\nusing vi = vector<int>;\nusing vlli = vector<lli>;\n\nclass Solution {\nprivate:\n    vector<vi> graph1, graph2;\n    int dia1, dia2, h1, h2, end1, end2;\n    void dfs(const int node, const int parent, const int h, const vector<vi>& graph, int& maxh, int& end) {\n        if (h > maxh) {\n            maxh = h;\n            end = node;\n        }\n        for (const int neigh: graph[node]) \n            if (neigh != parent) \n                dfs(neigh, node, h + 1, graph, maxh, end);\n    }\n    int solve(const vector<vi>& adj, int& maxh, int& end) {\n        maxh = 0;\n        dfs(0, -1, 0, adj, maxh, end);\n        int dia = 0;\n        maxh = 0;\n        dfs(end, -1, 0, adj, maxh, end);\n        dia = maxh;\n        return dia;\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vi>& e1, vector<vi>& e2) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        cout.tie(NULL);\n        int n = e1.size() + 1;\n        int m = e2.size() + 1;\n        graph1.resize(n);\n        graph2.resize(m);\n        // create graph\n        for (const auto& edge: e1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge: e2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }        \n        // get dia\n        dia1 = solve(graph1, h1, end1);\n        dia2 = solve(graph2, h2, end2);\n        int maxhalf = ((h1 + 1) / 2) + ((h2 + 1) / 2 + 1);\n        vector<int> ans = {dia1, dia2, maxhalf};\n        return *max_element(ans.begin(), ans.end());\n    }\n};",
    "submit_ts": "1719719334",
    "subm_id": "1304439371"
}