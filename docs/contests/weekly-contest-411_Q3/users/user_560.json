{
    "username": "Shivam",
    "submission": "\nclass Solution {\npublic:\n    char a[100001][7];\n    char b[100001][7];\n    int c[100001][7];\n    int d[100001][7];\n\n    string largestPalindrome(int length, int modulus) {\n\n        for (int i = 0; i < 10; ++i) {\n        }\n\n        if (modulus == 1 || modulus == 3 || modulus == 9) {\n            return string(length, '9');\n        }\n\n        if (modulus == 2) {\n            if (length == 1) {\n                return \"8\";\n            }\n            string r(length, '9');\n            r[0] = '8';\n            r[length - 1] = '8';\n            return r;\n        }\n\n        if (modulus == 5) {\n            if (length == 1) {\n                return \"5\";\n            }\n            string r(length, '9');\n            r[0] = '5';\n            r[length - 1] = '5';\n            return r;\n        }\n\n        if (modulus == 4) {\n            if (length <= 3) {\n                return string(length, '8');\n            }\n            string r(length, '9');\n            r[0] = '8';\n            r[length - 1] = '8';\n            r[1] = '8';\n            r[length - 2] = '8';\n            return r;\n        }\n\n        if (modulus == 8) {\n            if (length <= 5) {\n                return string(length, '8');\n            }\n            string r(length, '9');\n            r[0] = '8';\n            r[length - 1] = '8';\n            r[1] = '8';\n            r[length - 2] = '8';\n            r[2] = '8';\n            r[length - 3] = '8';\n            return r;\n        }\n\n        if (modulus == 6) {\n            if (length == 1) {\n                return \"6\";\n            }\n            if (length == 2) {\n                return \"66\";\n            }\n            if (length == 3) {\n                return \"888\";\n            }\n            string r(length, '9');\n            r[0] = '8';\n            r[length - 1] = '8';\n            if (length % 2 == 1) {\n                r[length / 2] = '8';\n            } else {\n                r[length / 2] = '7';\n                r[(length / 2) - 1] = '7';\n            }\n            return r;\n        }\n\n        if (modulus == 7) {\n            if (length == 1) {\n                return \"7\";\n            }\n\n            fill(&a[0][0], &a[0][0] + sizeof(a), 0);\n            fill(&b[0][0], &b[0][0] + sizeof(b), 0);\n\n            int x = 1;\n            while (x < 10) {\n                a[1][x % 7] = '0' + x;\n                if (x != 0) {\n                    b[1][x % 7] = '0' + x;\n                }\n                ++x;\n            }\n\n            int y = 10 % 7;\n            x = 0;\n            while (x <= 100000 - 2) {\n                int z = 0;\n                while (z < 7) {\n                    if ((x == 0 && z != 0) || (x > 0 && a[x][z] == 0)) {\n                        ++z;\n                        continue;\n                    }\n                    int w = 9;\n                    while (w >= 0) {\n                        int v = (y * w + w + z * 10) % 7;\n                        if (a[x + 2][v] == 0 || a[x + 2][v] < '0' + w) {\n                            a[x + 2][v] = '0' + w;\n                            c[x + 2][v] = z;\n                        }\n                        if (w == 0) {\n                            --w;\n                            continue;\n                        }\n                        if (b[x + 2][v] == 0 || b[x + 2][v] < '0' + w) {\n                            b[x + 2][v] = '0' + w;\n                            d[x + 2][v] = z;\n                        }\n                        --w;\n                    }\n                    ++z;\n                }\n                y = (y * 10) % 7;\n                ++x;\n            }\n            for (int i = 0; i < 10; ++i) {\n                int s = 11;\n                s++;\n            }\n            \n            //          int r_len = length;\n            // string f(1, b[r_len][0]);\n            // string bk(1, b[r_len][0]);\n            // int m = d[r_len][0];\n            // r_len -= 2;\n            // while (r_len) {\n            //     f += a[r_len][m];\n            //     if (r_len > 1) bk += a[r_len][m];\n            //     else break;\n            //     m = c[r_len][m];\n            //     r_len -= 2;\n            // }\n            // reverse(bk.begin(), bk.end());\n            // return f + bk;\n\n            int r_len = length;\n            string f(1, b[r_len][0]);\n            string bk(1, b[r_len][0]);\n            int m = d[r_len][0];\n            r_len -= 2;\n            while (r_len) {\n                f += a[r_len][m];\n                if (r_len > 1) bk += a[r_len][m];\n                else break;\n                m = c[r_len][m];\n                r_len -= 2;\n            }\n            reverse(bk.begin(), bk.end());\n            return f + bk;\n        }\n\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723953032",
    "subm_id": "1359810620"
}