{
    "username": "bhushan_k_j",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n map<int, vector<int>> mp;  // Store differences and associated X values\n        vector<int> xval;  // List of X values\n        \n        int n = nums.size();\n        int halfSize = n / 2;\n\n        // Process each pair (i, n - i - 1)\n        for (int i = 0; i < halfSize; ++i) {\n            int num1 = nums[i];\n            int num2 = nums[n - i - 1];\n            int diff = abs(num1 - num2);\n\n            int maxValue = max({num1, num2, k - num1, k - num2});\n            mp[diff].push_back(maxValue);\n            xval.push_back(maxValue);\n        }\n\n        int ops = n;  // Start with the maximum possible changes\n        sort(xval.begin(), xval.end());\n\n        // Evaluate each difference\n        for (const auto& [diff, values] : mp) {\n            int position = lower_bound(xval.begin(), xval.end(), diff) - xval.begin();\n            int changes = position * 2 + (halfSize - position);\n\n            // Adjust the number of changes based on the values associated with the current difference\n            for (const auto& X : values) {\n                if (X < diff) {\n                    changes -= 2;\n                } else {\n                    changes -= 1;\n                }\n            }\n\n            ops = min(ops, changes);\n        }\n\n        return ops;\n    }\n};",
    "submit_ts": "1721490165",
    "subm_id": "1327474899"
}