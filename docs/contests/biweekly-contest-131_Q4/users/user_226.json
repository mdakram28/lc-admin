{
    "username": "masatomo",
    "submission": "class SegTree {\nprivate:\n    int seg_size;\n    vector<int> seg_tree;\n\npublic:\n    SegTree(int n) {\n        seg_size = 1;\n        while (n > seg_size) seg_size *= 2;\n\n        seg_tree.assign(seg_size*2, -1);\n    }\n\n    void update(int index, int val) {\n        index += seg_size;\n        seg_tree[index] = max(seg_tree[index], val);\n        while (1) {\n            index /= 2;\n            if (index == 0) break;\n            seg_tree[index] = max(seg_tree[index * 2], seg_tree[index * 2 + 1]);\n        }\n    }\n\n    int query(int l, int r) {\n        int l_index = l + seg_size;\n        int r_index = r + seg_size;\n        int ans = -1;\n        while (l_index < r_index) {\n            if (l_index % 2 == 1) {\n                ans = max(ans, seg_tree[l_index]);\n                l_index++;\n            }\n            l_index /= 2;\n\n            if (r_index % 2 == 1) {\n                r_index--;\n                ans = max(ans, seg_tree[r_index]);\n            }\n            r_index /= 2;\n        }\n\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> st;\n        int n = queries.size();\n        \n        SegTree segTree(50001);\n        segTree.update(50001, 50001);\n        st.insert(0);\n        st.insert(50001);\n        \n        for (vector<int>& q: queries) {\n            if (q[0] == 1) {\n                st.insert(q[1]);\n            }\n        }\n        \n        auto it=st.begin(); it++;\n        for (; it != st.end(); it++) {\n            auto prev = it; prev--;\n            segTree.update(*it, *it - *prev);\n        }\n        \n        vector<bool> ans;\n        for (int i=n-1; i>=0; i--) {\n            vector<int> q = queries[i];\n            \n            if (q[0] == 1) {\n                int x = q[1];\n                auto it = st.find(x);\n                auto prev = it; prev--;\n                auto next = it; next++;\n                segTree.update(*(next), *(next) - *(prev));\n                // cout << *(next) << \" set to \" << *(next) - *(prev) << endl;\n                // segTree.update(x, x - *(prev));\n                // cout << x << \" set to \" << x - *(prev) << endl;\n                \n                // cout << \"query of \" << *(next) << \" = \" << segTree.query(0, *(next)+1) << endl;\n                // cout << \"query of \" << x << \" = \" << segTree.query(0, x+1) << endl;\n                st.erase(x);\n            } else {\n                int x = q[1];\n                int size = q[2];\n                \n                auto it = st.upper_bound(x); it--;\n                if (x - *it >= size) {\n                    // cout << \"diff = \" << x - *it << endl;\n                    ans.push_back(true);\n                    continue;\n                }\n                int space = segTree.query(0, x+1);\n                if (space >= size) {\n                    // cout << \"space = \" << space << endl;\n                    ans.push_back(true);\n                    continue;\n                }\n                \n                ans.push_back(false);\n            }\n        }\n        \n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": 1716651553.0
}