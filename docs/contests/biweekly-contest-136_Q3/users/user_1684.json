{
    "username": "soumikdutt",
    "submission": "class Solution {\npublic:\nint minFlips(vector<vector<int>> &grid) {\n    const int rows = grid.size(), cols = grid.front().size();\n    // if we have the middle row or col, we will deal with it separately\n    int flips = 0;\n    for (int i = 0; i < rows / 2; i++)\n        for (int j = 0; j < cols / 2; j++) {\n            int zo[2] = {};\n            const int a = grid[i][j];\n            const int b = grid[rows - 1 - i][j];\n            const int c = grid[rows - 1 - i][cols - 1 - j];\n            const int d = grid[i][cols - 1 - j];\n\n            zo[a]++, zo[b]++, zo[c]++, zo[d]++;\n            flips += min(zo[0], zo[1]);\n        }\n\n    int row_ones = 0, col_ones = 0, odd_flips = 0;\n\n    if (rows & 1) {\n        const int half_row = rows / 2;\n        for (int j = 0; j < cols / 2; j++)\n            if (grid[half_row][j] != grid[half_row][cols - 1 - j])\n                flips++, odd_flips++, row_ones += 2;\n            else if (grid[half_row][j])\n                row_ones += 2;\n    }\n\n    if (cols & 1) {\n        const int half_col = cols / 2;\n        for (int i = 0; i < rows / 2; i++)\n            if (grid[i][half_col] != grid[rows - 1 - i][half_col])\n                flips++, odd_flips++, col_ones += 2;\n            else if (grid[i][half_col])\n                col_ones += 2;\n    }\n\n    // if we have a centre zero, we will have to omit it definitely\n    if ((rows & 1) && (cols & 1) && grid[rows / 2][cols / 2])\n        flips++;\n\n    if ((row_ones + col_ones) % 4 != 0 && odd_flips == 0)\n        flips += 2;\n\n    return flips;\n}\n};",
    "submit_ts": "1722698348",
    "subm_id": "1343177788"
}