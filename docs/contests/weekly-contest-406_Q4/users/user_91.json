{
    "username": "Yatin_987",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        int hIndex = 0, vIndex = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n        \n        // Process cuts in a greedy manner\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                // Choose horizontal cut\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                // Choose vertical cut\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n        \n        // Process any remaining horizontal cuts\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            hIndex++;\n        }\n        \n        // Process any remaining vertical cuts\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720924692",
    "subm_id": "1320227058"
}