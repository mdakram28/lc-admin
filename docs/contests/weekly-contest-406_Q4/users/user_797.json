{
    "username": "mohammad515253",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        /*\n        The trick is to cut with the highest cost first\n        Now what about the direction?\n        \n        Let us vertical = [5, 7]\n        Horizontal = [3, 4]\n        \n        3x3\n        \n        First do 7\n        */\n        \n        priority_queue<pair<int, int>> pq;\n        \n        for(int it = 0; it < m - 1; it++)\n        {\n            pq.push({horizontalCut[it], 0});\n        }\n        \n        for(int it = 0; it < n - 1; it++)\n        {\n            pq.push({verticalCut[it], 1});\n        }\n        \n        int currHorizontal = 0, currVertical = 0;\n        long long totCost = 0LL;\n        \n        \n        while(!pq.empty())\n        {\n            auto curr = pq.top();\n            pq.pop();\n            \n            \n            // cout<<curr.first<<\" \"<<curr.second<<endl;\n            if(curr.second == 0)\n            {\n                totCost += (currVertical + 1) * curr.first;\n                currHorizontal++;\n            }\n            else\n            {\n                totCost += (currHorizontal + 1) * curr.first;\n                currVertical++;\n            }\n        }\n        \n        return totCost;\n    }\n};",
    "submit_ts": "1720925847",
    "subm_id": "1320268108"
}