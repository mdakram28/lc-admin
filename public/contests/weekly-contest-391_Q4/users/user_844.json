{
    "username": "zinchse",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def helper(banned: None) -> Tuple[int, int, int]:\n            s, d = [], []\n            for i, point in enumerate(points):\n                if i == banned: \n                    continue\n                s.append((point[0] + point[1], i))\n                d.append((point[0] - point[1], i))\n            s = sorted(s)\n            d = sorted(d)\n            \n            if s[-1][0] - s[0][0] > d[-1][0] - d[0][0]:\n                pair_points = s[0][1], s[-1][1]\n                res = s[-1][0] - s[0][0]\n            else:\n                pair_points = d[0][1], d[-1][1]\n                res = d[-1][0] - d[0][0]\n            return res, pair_points[0], pair_points[1]\n        \n        _, point1, point2 = helper(banned=[])\n        a, _, _ = helper(banned=point1)\n        b, _, _ = helper(banned=point2)\n        return min(a, b)\n            "
}