{
    "username": "qiye-5",
    "submission": "int __FAST_IO__ = []() { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); return 0; }();\n\nclass Solution {\n    int Split(vector<vector<int>>& grid, int x1, int x2, int y1, int y2, int d) {\n        int m = grid.size(), n = grid[0].size();\n        int res = m * n;\n        if (d > 0) {\n            for (int i = x1 + 1; i < x2; ++i) {\n                res = min(res, Split(grid, x1, i, y1, y2, 0) + Split(grid, i, x2, y1, y2, 0));\n            }\n\n            for (int j = y1 + 1; j < y2; ++j) {\n                res = min(res, Split(grid, x1, x2, y1, j, 0) + Split(grid, x1, x2, j, y2, 0));\n            }\n            return res;\n        }\n        int X1 = INT_MAX, Y1 = INT_MAX, X2 = 0, Y2 = 0;\n        for (int i = x1; i < x2; ++i) {\n            for (int j = y1; j < y2; ++j) {\n                if (grid[i][j] == 1) {\n                    X1 = min(X1, i);\n                    X2 = max(X2, i);\n\n                    Y1 = min(Y1, j);\n                    Y2 = max(Y2, j);\n                }\n            }\n        }\n        return X1 == INT_MAX ? (1) : (X2 - X1 + 1) * (Y2 - Y1 + 1);\n    }\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int res = m * n;\n        for (int i = 1; i < m; ++i) {\n            res = min(res, min((Split(grid, 0, i, 0, n, 1) + Split(grid, i, m, 0, n, 0)),\n                (Split(grid, 0, i, 0, n, 0) + Split(grid, i, m, 0, n, 1))));\n        }\n\n        for (int j = 1; j < n; ++j) {\n            res = min(res, min((Split(grid, 0, m, 0, j, 1) + Split(grid, 0, m, j, n, 0)),\n                (Split(grid, 0, m, 0, j, 0) + Split(grid, 0, m, j, n, 1))));\n        }\n        return res;\n    }\n};",
    "submit_ts": 1719112634.0
}