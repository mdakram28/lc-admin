{
    "username": "napgod_pk",
    "submission": "class Solution {\npublic:\n    vector<int> adj1[100005], adj2[100005];\n    int cnt[100005], vis[100005];\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = (int)edges1.size() + 1;\n        int m = (int)edges2.size() + 1;\n        int root = 0;\n        queue<int> q;\n        int newRoot = -1, maxHt = 0;\n        int dist1 = 0, dist2 = 0;\n        if (n > 1) {\n            for (int i = 0; i <= n; i++) {\n                vis[i] = 0;\n                cnt[i] = 0;\n                adj1[i].clear();\n            }\n            root = 0;\n            for (auto x : edges1) {\n                adj1[x[0]].push_back(x[1]);\n                adj1[x[1]].push_back(x[0]);\n                root = x[0];\n            }\n            vis[root] = 1;\n            q.push(root);\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (auto v : adj1[u]) {\n                    if (vis[v] == 0) {\n                        q.push(v);\n                        vis[v] = 1;\n                        cnt[v] = cnt[u] + 1;\n                    }\n                }\n            }\n            newRoot = -1, maxHt = 0;\n            for (int i = 0; i < n; i++) {\n                if (cnt[i] > maxHt) {\n                    maxHt = cnt[i];\n                    newRoot = i;\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                vis[i] = 0;\n                cnt[i] = 0;\n            }\n            vis[newRoot] = 1;\n            assert(q.empty() && newRoot >= 0);\n            q.push(newRoot);\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (auto v : adj1[u]) {\n                    if (vis[v] == 0) {\n                        q.push(v);\n                        vis[v] = 1;\n                        cnt[v] = cnt[u] + 1;\n                    }\n                }\n            }\n            for (int i = 0; i < n; i++) {\n                dist1 = max(dist1, cnt[i]);\n            }\n        }\n        if (m > 1) {\n            for (int i = 0; i <= m; i++) {\n                vis[i] = 0;\n                cnt[i] = 0;\n                adj2[i].clear();\n            }\n            root = 0;\n            for (auto x : edges2) {\n                adj2[x[0]].push_back(x[1]);\n                adj2[x[1]].push_back(x[0]);\n                root = x[0];\n            }\n            assert(q.empty());\n            vis[root] = 1;\n            q.push(root);\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (auto v : adj2[u]) {\n                    if (vis[v] == 0) {\n                        q.push(v);\n                        vis[v] = 1;\n                        cnt[v] = cnt[u] + 1;\n                    }\n                }\n            }\n            newRoot = -1, maxHt = 0;\n            for (int i = 0; i < m; i++) {\n                if (cnt[i] > maxHt) {\n                    maxHt = cnt[i];\n                    newRoot = i;\n                }\n            }\n            for (int i = 0; i < m; i++) {\n                vis[i] = 0;\n                cnt[i] = 0;\n            }\n            vis[newRoot] = 1;\n            assert(q.empty() && newRoot >= 0);\n            q.push(newRoot);\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (auto v : adj2[u]) {\n                    if (vis[v] == 0) {\n                        q.push(v);\n                        vis[v] = 1;\n                        cnt[v] = cnt[u] + 1;\n                    }\n                }\n            }\n            dist2 = 0;\n            for (int i = 0; i < m; i++) {\n                dist2 = max(dist2, cnt[i]);\n            }\n        }\n        int res = (dist1 + 1) / 2 + (dist2 + 1) / 2 + 1;\n        res = max(res, dist1);\n        res = max(res, dist2);\n        return res;\n    }\n};",
    "submit_ts": "1719717943",
    "subm_id": "1304404740"
}