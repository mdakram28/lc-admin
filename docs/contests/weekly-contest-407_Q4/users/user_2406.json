{
    "username": "dhruvin55",
    "submission": "class Solution {\npublic:\nclass SegmentTree {\npublic:\n    SegmentTree(const std::vector<long long>& arr) {\n        n = arr.size();\n        tree.resize(2 * n);\n        build(arr);\n    }\n\n    std::pair<long long, int> range_max(int l, int r) {\n        l += n;\n        r += n;\n        long long maximum = LLONG_MIN;\n        int max_index = -1;\n        while (l < r) {\n            if (l % 2 == 1) {\n                if (tree[l].first > maximum) {\n                    maximum = tree[l].first;\n                    max_index = tree[l].second;\n                }\n                l++;\n            }\n            if (r % 2 == 1) {\n                r--;\n                if (tree[r].first > maximum) {\n                    maximum = tree[r].first;\n                    max_index = tree[r].second;\n                }\n            }\n            l /= 2;\n            r /= 2;\n        }\n        return {maximum, max_index};\n    }\n\nprivate:\n    int n;\n    std::vector<std::pair<long long, int>> tree;\n\n    void build(const std::vector<long long>& arr) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = {arr[i], i};\n        }\n        for (int i = n - 1; i > 0; --i) {\n            if (tree[2 * i].first > tree[2 * i + 1].first) {\n                tree[i] = tree[2 * i];\n            } else {\n                tree[i] = tree[2 * i + 1];\n            }\n        }\n    }\n};\n    \nclass SegmentTree1 {\npublic:\n    SegmentTree1(const std::vector<long long>& arr) {\n        n = arr.size();\n        tree.resize(2 * n);\n        build(arr);\n    }\n\n    std::pair<long long, int> range_min(int l, int r) {\n        l += n;\n        r += n;\n        long long minimum = LLONG_MAX;\n        int min_index = -1;\n        while (l < r) {\n            if (l % 2 == 1) {\n                if (tree[l].first < minimum) {\n                    minimum = tree[l].first;\n                    min_index = tree[l].second;\n                }\n                l++;\n            }\n            if (r % 2 == 1) {\n                r--;\n                if (tree[r].first < minimum) {\n                    minimum = tree[r].first;\n                    min_index = tree[r].second;\n                }\n            }\n            l /= 2;\n            r /= 2;\n        }\n        return {minimum, min_index};\n    }\n\nprivate:\n    int n;\n    std::vector<std::pair<long long, int>> tree;\n\n    void build(const std::vector<long long>& arr) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = {arr[i], i};\n        }\n        for (int i = n - 1; i > 0; --i) {\n            if (tree[2 * i].first < tree[2 * i + 1].first) {\n                tree[i] = tree[2 * i];\n            } else {\n                tree[i] = tree[2 * i + 1];\n            }\n        }\n    }\n};\n\n\n    long long solve(vector<long long>& r ,SegmentTree1 &minT, SegmentTree &maxT, int j,int i,bool p,int r1)\n    {\n        if(i==j)\n        {\n            return 0;\n        }\n        if(i - j == 1)\n        {\n            if(p)\n            {\n                return r[j] - r1;\n            }\n            return r1 - r[j];\n        }\n        if(p)\n        {\n            auto result = minT.range_min(j,i);\n            return result.first - r1 + solve(r,minT,maxT,j,result.second,p,result.first) + solve(r,minT,maxT,result.second+1,i,p,result.first);\n        }\n        else\n        {\n            auto result = maxT.range_max(j,i);\n            return r1 - result.first + solve(r,minT,maxT,j,result.second,p,result.first) + solve(r,minT,maxT,result.second+1,i,p,result.first);\n        }\n\n    }\n    \n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        long long ans = 0;\n        vector<long long>r;\n       \n        int n = nums.size();\n        for(int i=0;i<n;i++)\n        {\n            r.push_back( target[i] - nums[i]);\n        }\n         SegmentTree1 minT(r);\n        SegmentTree maxT(r);\n         //  auto result = minT.range_min(0, 4);\n        bool p = false;\n        int y = -1;\n        int j = 0;\n       \n        for(int i = 0;i<n;i++)\n        {\n            if(y == -1)\n            {\n                j = i;\n                y = 1;\n                if(r[i] > 0)\n                {\n                    p = true;\n                }\n                else if(r[i] == 0)\n                {\n                    y = -1;\n                    \n                }\n                else\n                {\n                    p = false;\n                }\n                continue;\n            }\n            if(r[i] == 0)\n            {\n                ans = ans + solve( r,minT,maxT, j,i, p,0);\n                j = i+1;\n                y = -1;\n                continue;\n            }\n            \n            if(p)\n            {\n                if(r[i] < 0)\n                {\n                    ans = ans + solve( r,minT,maxT, j,i, p,0);\n                    j = i;\n                    p = false;\n                }\n            }\n            else\n            {\n                if(r[i] > 0)\n                {\n                    ans = ans + solve( r,minT,maxT, j,i, p,0);\n                    j= i;\n                    p = true;\n                } \n            }\n            \n        }\n        int i = n;\n         ans = ans + solve( r,minT,maxT, j,i, p,0);\n        return ans;\n    }\n};",
    "submit_ts": "1721533731",
    "subm_id": "1328015416"
}