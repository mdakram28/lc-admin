{
    "username": "saulmaldonado",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<pair<int, int>> costs;\n    TrieNode() {\n        this->children = vector<TrieNode*>(26);\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n\n        node->costs.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) {\n                    break;\n                }\n\n                node = node->children[target[j] - 'a'];\n\n                for (const auto& [idx, cost] : node->costs) {\n\n                    int l = i + words[idx].size();\n                    \n                    if (l <= n) {\n                        dp[l] = min(dp[l], dp[i] + cost);\n                    }\n\n                }\n\n            }\n        }\n\n        return dp[n] == INT_MAX? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324586",
    "subm_id": "1312403158"
}