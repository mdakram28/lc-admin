{
    "username": "yuruiyin",
    "submission": "class Solution {\npublic long countSubarrays(int[] nums, int k) {\n        int len = nums.length;\n        int[][] dp = new int[len][32];\n        int firstNum = nums[0];\n        for (int i = 0; i < 32 && firstNum != 0; i++) {\n            dp[0][i] = firstNum & 1;\n            firstNum >>= 1;\n        }\n\n        long ans = nums[0] == k ? 1 : 0;\n        for (int i = 1; i < len; i++) {\n            int num = nums[i];\n            for (int j = 0; j < 32 && num != 0; j++) {\n                dp[i][j] = (num & 1) == 1 ? dp[i-1][j] + 1 : 0;\n                num >>= 1;\n            }\n            int tmpK = k;\n            int zeroCount = 1;\n            int oneCount = i + 1;\n            for (int j = 0; j < 32; j++) {\n                int curBit = tmpK & 1;\n                tmpK >>= 1;\n                if (curBit == 0) {\n                    if (dp[i][j] == 0) {\n\n                    } else if (dp[i][j] == i + 1) {\n                        // \u6ca1\u6709\n                        zeroCount = i + 2;\n                        break;\n                    } else {\n                        zeroCount = Math.max(zeroCount, dp[i][j] + 1);\n                    }\n                } else {\n                    oneCount = Math.min(oneCount, dp[i][j]);\n                }\n            }\n\n            if (zeroCount != i + 2) {\n                ans += Math.max(0, oneCount - zeroCount + 1);\n            }\n\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1720280072",
    "subm_id": "544570410"
}