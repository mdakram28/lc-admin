{
    "username": "hkhzzz",
    "submission": "using pii = pair<int, int>;\nclass Solution {\npublic:\n    int cal_dist(vector<int>& a, vector<int>& b) {\n        return abs(a[0] - b[0]) + abs(a[1] - b[1]);\n    }\n    int show(vector<vector<int>>& points, int idx) {\n        vector<int> value = points[idx];\n        points.erase(points.begin() + idx);\n                pii up = {points[0][0], points[0][1]};\n        pii down = {points[0][0], points[0][1]};\n        int upidx = 0;\n        int downidx = 0;\n        int dist = cal_dist(points[0], points[1]);\n        int lidx = 0;\n        int ridx = 1;\n        for (int i = 0; i < points.size(); i ++) {\n            int cur_x = points[i][0];\n            int cur_up = points[i][1];\n            int cur_down = points[i][1];\n            int j = i + 1;\n            while(j < points.size() && points[j][0] == points[i][0]) {\n                cur_down = points[j][1];\n                j ++;\n            }\n            if (cur_up - cur_down > dist) {\n                dist = cur_up - cur_down;\n                lidx = i;\n                ridx = j - 1;\n            }\n            if (abs(cur_x - up.first) + abs(up.second - cur_down) > dist) {\n                dist = abs(cur_x - up.first) + abs(up.second - cur_down);\n                // cout << \"with up \" << dist << endl;\n                lidx = upidx;\n                ridx = j-1;\n                \n            }\n            if (abs(cur_x - down.first) + abs(cur_up - down.second) > dist) {\n                dist = abs(cur_x - down.first) + abs(cur_up - down.second);\n                // cout << \"with down \" << dist << \": \" << cur_x << \",\" << cur_up << \" -- \" << down.first << \",\" << down.second << endl;\n                lidx = downidx;\n                ridx = i;\n            }\n            \n            if (cur_up > up.second && cur_up - up.second > cur_x - up.first) {\n                up = {cur_x, cur_up};\n                upidx = i;\n            }\n            if (cur_down < down.second && down.second - cur_down > cur_x - down.first) {\n                down = {cur_x, cur_down};\n                downidx = j - 1;\n            }\n            // cout << lidx << \"(\" << points[lidx][0] << \",\" << points[lidx][1] << \")\" << \"--\" << ridx << \"(\" << points[ridx][0] << \",\" << points[ridx][1] << \")\" << \"=>\" << dist << endl;\n            i = j - 1;\n        }\n        points.insert(points.begin() + idx, value);\n        return dist;\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        sort(points.begin(), points.end(), [](vector<int>& a, vector<int>& b) {\n            return a[0] < b[0] || (a[0] == b[0] && a[1] > b[1]);\n        });\n        pii up = {points[0][0], points[0][1]};\n        pii down = {points[0][0], points[0][1]};\n        int upidx = 0;\n        int downidx = 0;\n        int dist = cal_dist(points[0], points[1]);\n        int lidx = 0;\n        int ridx = 1;\n        for (int i = 0; i < points.size(); i ++) {\n            int cur_x = points[i][0];\n            int cur_up = points[i][1];\n            int cur_down = points[i][1];\n            int j = i + 1;\n            while(j < points.size() && points[j][0] == points[i][0]) {\n                cur_down = points[j][1];\n                j ++;\n            }\n            if (cur_up - cur_down > dist) {\n                dist = cur_up - cur_down;\n                lidx = i;\n                ridx = j - 1;\n            }\n            if (abs(cur_x - up.first) + abs(up.second - cur_down) > dist) {\n                dist = abs(cur_x - up.first) + abs(up.second - cur_down);\n                // cout << \"with up \" << dist << endl;\n                lidx = upidx;\n                ridx = j-1;\n                \n            }\n            if (abs(cur_x - down.first) + abs(cur_up - down.second) > dist) {\n                dist = abs(cur_x - down.first) + abs(cur_up - down.second);\n                // cout << \"with down \" << dist << \": \" << cur_x << \",\" << cur_up << \" -- \" << down.first << \",\" << down.second << endl;\n                lidx = downidx;\n                ridx = i;\n            }\n            \n            if (cur_up > up.second && cur_up - up.second > cur_x - up.first) {\n                up = {cur_x, cur_up};\n                upidx = i;\n            }\n            if (cur_down < down.second && down.second - cur_down > cur_x - down.first) {\n                down = {cur_x, cur_down};\n                downidx = j - 1;\n            }\n            // cout << lidx << \"(\" << points[lidx][0] << \",\" << points[lidx][1] << \")\" << \"--\" << ridx << \"(\" << points[ridx][0] << \",\" << points[ridx][1] << \")\" << \"=>\" << dist << endl;\n            i = j - 1;\n        }\n\n        int dist1 = show(points, lidx);\n        int dist2 = show(points, ridx);\n        // cout << lidx << \", \" << ridx << \"=>\" << dist1 << \", \" << dist2 << endl;\n        return min(dist1, dist2);\n        \n    }\n};\n// [[4,1],[10,7],[5,6],[3,2],[10,9],[2,9],[2,8]]\n// => 12"
}