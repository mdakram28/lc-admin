{
    "username": "frabhinav",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        int h = 0, v = 0;\n        int horizontalParts = 1, verticalParts = 1;\n        long long totalCost = 0;\n        \n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += static_cast<long long>(horizontalCut[h]) * verticalParts;\n                ++horizontalParts;\n                ++h;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[v]) * horizontalParts;\n                ++verticalParts;\n                ++v;\n            }\n        }\n        while (h < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[h]) * verticalParts;\n            ++horizontalParts;\n            ++h;\n        }\n        while (v < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[v]) * horizontalParts;\n            ++verticalParts;\n            ++v;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925929",
    "subm_id": "1320270683"
}