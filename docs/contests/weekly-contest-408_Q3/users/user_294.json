{
    "username": "pcwuu",
    "submission": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        vector<int> zero;\n        int n = s.size();\n        for(int i = 0; i < n; i++)\n            if(s[i] == '0')\n                zero.push_back(i);\n        \n        int cntDominant = 0;\n        int cntOne = 0;\n        for(int i = 0; i < zero.size(); i++) {\n            cntOne = zero[i] - ((i > 0)? zero[i - 1] + 1 : 0);\n            cntDominant += cntOne * (cntOne + 1) / 2;\n        }\n        if(zero.size()) {\n            cntOne = (n - 1) - zero[zero.size() - 1];\n            cntDominant += cntOne * (cntOne + 1) / 2;            \n        }\n        else\n            cntDominant = n * (n + 1) / 2;\n        //cout << cntDominant << '\\n';\n              \n        for(int cntZero = 1; cntZero * cntZero <= n; cntZero++) {\n            for(int l = 0; l + cntZero - 1 < zero.size(); l++) {\n                int r = l + cntZero - 1;\n                int oneInBetween = zero[r] - zero[l] + 1 - cntZero;\n                int neededOnes = cntZero * cntZero - oneInBetween;\n                int leftOnes = zero[l] - ((l - 1 >= 0)? zero[l - 1] : -1) - 1;\n                int rightOnes = ((r + 1 < zero.size())? zero[r + 1] : n) - zero[r] - 1;\n                \n                 \n                for(int i = 0; i <= leftOnes; i++) {\n                    int need = max(neededOnes - i, 0);\n                    cntDominant += max(rightOnes - need + 1, 0); \n                    //cout << zero[l] << ' ' << zero[r] << ' ' << i << ' ' << need << ' ' << max(rightOnes - need + 1, 0) << '\\n';\n                }\n            }\n        }\n        return cntDominant;\n    } \n};\n\n// cnt non-dominant substring",
    "submit_ts": "1722139154",
    "subm_id": "1335809357"
}