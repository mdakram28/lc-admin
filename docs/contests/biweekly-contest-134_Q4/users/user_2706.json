{
    "username": "himanshuraj051",
    "submission": "class Solution {\n    Map<Pair<Integer, Integer>, Integer> c; \n   public class SegmentTreeNode {\n        int start, end;\n        SegmentTreeNode left, right;\n        int sum;\n\n        public SegmentTreeNode(int start, int end) {\n            this.start = start;\n            this.end = end;\n            this.left = null;\n            this.right = null;\n            this.sum = 0;\n        }\n    }\n\n    public SegmentTreeNode buildTree(int[] nums, int start, int end) {\n        if (start > end) {\n            return null;\n        } else {\n            SegmentTreeNode ret = new SegmentTreeNode(start, end);\n            if (start == end) {\n                ret.sum = nums[start];\n            } else {\n                int mid = start  + (end - start) / 2;             \n                ret.left = buildTree(nums, start, mid);\n                ret.right = buildTree(nums, mid + 1, end);\n                ret.sum = ret.left.sum & ret.right.sum;\n            }         \n            return ret;\n        }\n    }\n    \n    public int sumRange(SegmentTreeNode root, int start, int end) {\n        if (root.end == end && root.start == start) {\n            return root.sum;\n        } else {\n            int mid = root.start + (root.end - root.start) / 2;\n            if (end <= mid) {\n                return sumRange(root.left, start, end);\n            } else if (start >= mid+1) {\n                return sumRange(root.right, start, end);\n            }  else {    \n                return sumRange(root.right, mid+1, end) & sumRange(root.left, start, mid);\n            }\n        }\n    }\n\n    int bsl(int l, int r, int k, int[] nums, SegmentTreeNode sg) {\n        int f = r;\n        int ans = -1;\n        while(l <= r) {\n            int mid = (l+r)/2;\n            \n            int val = sumRange(sg, mid, f);\n            if(val == k) {\n                ans = mid;\n                r = mid - 1;\n            } else if(val > k) {\n                r = mid - 1;\n            } else {\n                l = mid+1;\n            }\n        }\n\n        return ans;\n    }\n    int bsr(int l, int r, int k, int[] nums, SegmentTreeNode sg) {\n        int f = r;\n        int ans = -1;\n        while(l <= r) {\n            int mid = (l+r)/2;\n            int val = sumRange(sg, mid, f);\n            if(val == k) {\n                ans = mid;\n                l = mid + 1;\n            } else if(val > k) {\n                r = mid - 1;\n            } else {\n                l = mid+1;\n            }\n        }\n\n        return ans;\n    }\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        SegmentTreeNode sg = buildTree(nums, 0, n-1);\n\n        long ans = 0;\n        for(int i=0; i<n; i++) {\n            int st = nums[i];\n            int l = bsl(0, i, k, nums, sg);\n            int r = bsr(0, i, k, nums, sg);\n\n            if(l == -1 || r == -1) {\n                continue;\n            }\n            ans += (r - l + 1);\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720279983",
    "subm_id": "1311772677"
}