{
    "username": "tiankonguse",
    "submission": "\ntypedef long long ll;\nclass Solution {\n  int pre[33][33];\n  int n, m;\n  int ans;\n  void Init() {\n    memset(pre, 0, sizeof(pre));\n    for (int i = 1; i <= n; i++) {\n      for (int j = 1; j <= m; j++) {\n        int v = grid[i - 1][j - 1];\n        pre[i][j] = v + pre[i][j - 1] + pre[i - 1][j] - pre[i - 1][j - 1];\n      }\n    }\n  }\n  int Solver(int x0, int y0, int x1, int y1) {\n    int top = 1000;\n    int down = 0;\n    int left = 1000;\n    int right = 0;\n\n    // printf(\"x=[%d, %d] y=[%d %d] \\n\", x0, x1, y0, y1);\n    for (int i = x0; i <= x1; i++) {\n      for (int j = y0; j <= y1; j++) {\n        if (grid[i][j]) {\n          top = min(top, i);\n          down = max(down, i);\n          left = min(left, j);\n          right = max(right, j);\n        }\n      }\n    }\n    return (down - top + 1) * (right - left + 1);\n  }\n  void Solver() {\n    // printf(\"n=%d m=%d \\n\", n, m);\n    // \u679a\u4e3e\u884c\n    for (int i = 1; i < n; i++) {\n      // [1,i]  [i+1, n]\n      int up = pre[i][m];\n      int down = pre[n][m] - pre[i][m];\n      if (up == 0 || down == 0) continue;\n\n      // \u5148\u679a\u4e3e\u884c\uff0c\u5728 [1,i] \u91cc\u62c6\u5206\n      for (int j = 1; j < i; j++) {\n        // [1, 1] [j, m]\n        // [j+1, 1] [i, m]\n        // [i+1, 1] [n, m]\n\n        int up = pre[j][m];\n        int mid = pre[i][m] - pre[j][m];\n        if (up == 0 || mid == 0) continue;\n\n        int tmp = 0;\n        tmp += Solver(0, 0, j - 1, m - 1);\n        tmp += Solver(j, 0, i - 1, m - 1);\n        tmp += Solver(i, 0, n - 1, m - 1);\n        ans = min(ans, tmp);\n      }\n\n      // \u518d\u679a\u4e3e\u5217\uff0c\u5728 [1,m] \u91cc\u62c6\u5206\n      for (int j = 1; j < m; j++) {\n        // [1,1] [i, j]\n        // [1,j+1] [i,m]\n        // [i+1, 1] [n, m]\n        int left = pre[i][j];\n        int right = pre[i][m] - pre[i][j];\n        if (left == 0 || right == 0) continue;\n\n        int tmp = 0;\n        tmp += Solver(0, 0, i - 1, j - 1);\n        tmp += Solver(0, j, i - 1, m - 1);\n        tmp += Solver(i, 0, n - 1, m - 1);\n        ans = min(ans, tmp);\n      }\n    }\n  }\n\n  void trans() {\n    n = grid.size();\n    m = grid.front().size();\n    vector<vector<int>> tmp(m, vector<int>(n, 0));\n\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        tmp[j][n - 1 - i] = grid[i][j];\n      }\n    }\n\n    grid = tmp;\n    n = grid.size();\n    m = grid.front().size();\n  }\n\n  vector<vector<int>> grid;\n\n public:\n  int minimumSum(vector<vector<int>>& grid_) {\n    grid.swap(grid_);\n    ans = INT_MAX;\n    for (int i = 0; i < 4; i++) {\n      trans();\n      Init();\n      Solver();\n    }\n    return ans;\n  }\n};",
    "submit_ts": 1719114189.0
}