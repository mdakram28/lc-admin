{
    "username": "killua-8",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        List<int[]> cuts = new ArrayList<>();\n        for (int i = 0; i < horizontalCut.length; i++) {\n            cuts.add(new int[]{horizontalCut[i], 0});\n        }\n        for (int i = 0; i < verticalCut.length; i++) {\n            cuts.add(new int[]{verticalCut[i], 1});\n        }\n\n        cuts.sort((a, b) -> b[0] - a[0]);\n\n        long ans = 0;\n        int h = 1;\n        int v = 1;\n\n        for (int[] cut : cuts) {\n            if (cut[1] == 0) { \n                ans += cut[0] * v;\n                h++; \n            } else { \n                ans += cut[0] * h;\n                v++;\n            }\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1720925421",
    "subm_id": "546439308"
}