{
    "username": "zzack_zack",
    "submission": "import sys\nsys.set_int_max_str_digits(1000000)\n\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        # if k==1 or k==3 or k==9:\n        #     return '1'*n\n        # if k==2:\n        #     if n==1: return 8\n        #     return '8'+'9'*(n-2)+'8'\n        # if k==8:\n        #     if n<=6: return '8'*n\n        #     return '8'*3 + '9'*(n-6) + '8'*3\n        # if k==5:\n        #     if n==1: return '5'\n        #     return '5' + 9*(n-2) + '5'\n        # if k==4:\n        #     if n==1: return '8'\n        #     if n==2: return '88'\n        #     if n==3: return '888'\n        #     return '88' + '9'*(n-4) + '88'\n        MOD = [pow(10,i,k) for i in range(n)]\n        @cache\n        def dfs(i,pre_mod):\n            if n%2==0 and i==n//2: return -1 if pre_mod else 0\n            if n%2 and i==(n-1)//2: \n                for num in range(9,2,-1):\n                    if (num*MOD[i]+pre_mod)%k==0:\n                        return num\n                return -1\n            for num in range(9,2,-1):\n                if dfs(i+1,(pre_mod+num*MOD[i]+num*MOD[n-1-i])%k)!=-1:\n                    return 10*dfs(i+1,(pre_mod+num*MOD[i]+num*MOD[n-1-i])%k)+num\n            return -1\n        num = str(dfs(0,k))\n        dfs.cache_clear()\n        if n%2:\n            return num[1:][::-1] + num\n        return num[::-1]+num\n\n            \n\n        \n        \n            \n        ",
    "submit_ts": "1723951568",
    "subm_id": "1359774692"
}