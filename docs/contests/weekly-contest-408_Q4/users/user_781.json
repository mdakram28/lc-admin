{
    "username": "cy171",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def find(a):\n            if a != union[a]:\n                union[a] = find(union[a])\n            return union[a]\n\n        def merge(a,b):\n            a = find(a)\n            b = find(b)\n            if a != b:\n                union[a] = b\n\n\n        n = len(circles)\n        union = [i for i in range(n)]\n        for i in range(n):\n            for j in range(i+1, n):\n                a1, b1, c1 = circles[i]\n                a2, b2, c2 = circles[j]\n                if (a1 - a2) ** 2 + (b1 - b2) ** 2 <= (c1 + c2)**2:\n                    merge(i, j)\n        group = [[float(\"inf\"),0,float(\"inf\"),0] for _ in range(n)]\n        # print(group, n)\n        for i in range(n):\n            idx = find(i)\n            x, y, c = circles[i]\n            # print(x, y, c)\n            group[idx][0] = min(group[idx][0], x-c)\n            group[idx][1] = max(group[idx][1], x+c)\n            group[idx][2] = min(group[idx][2], y-c)\n            group[idx][3] = max(group[idx][3], y+c)\n        # print(group)\n        for i in range(n):\n            l, r, b, t = group[i]\n            # print(t, Y, r, X)\n            if (l <= 0 and r >= X ) or (b<=0 and t >= Y) or (t >= Y and r >= X) or (b <= 0 and l <= 0):\n                return False\n        return True",
    "submit_ts": "1722138007",
    "subm_id": "1335779640"
}