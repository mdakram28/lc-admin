{
    "username": "Sayan1123",
    "submission": "\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a max heap to store cuts, use pair<int, char> where char is 'h' or 'v'\n        priority_queue<pair<int, char>> cuts;\n        \n        // Push all horizontal cuts to the heap\n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            cuts.push({horizontalCut[i], 'h'});\n        }\n        \n        // Push all vertical cuts to the heap\n        for (int i = 0; i < verticalCut.size(); ++i) {\n            cuts.push({verticalCut[i], 'v'});\n        }\n        \n        // Number of horizontal and vertical pieces\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n        \n        // Process the cuts in descending order of cost\n        while (!cuts.empty()) {\n            auto cut = cuts.top();\n            cuts.pop();\n            \n            if (cut.second == 'h') {\n                // Horizontal cut\n                totalCost += (long long)cut.first * verticalPieces;\n                horizontalPieces++;\n            } else {\n                // Vertical cut\n                totalCost += (long long)cut.first * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925188",
    "subm_id": "1320246013"
}