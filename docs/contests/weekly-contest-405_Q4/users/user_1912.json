{
    "username": "ashishsah0001",
    "submission": "class Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children;\n        int cost;\n\n        TrieNode() {\n            children = new HashMap<>();\n            cost = -1; // Indicates the end of a word with the corresponding cost\n        }\n    }\n\n    class Trie {\n        TrieNode root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(String word, int cost) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.cost = (node.cost == -1) ? cost : Math.min(node.cost, cost); // Store the minimum cost\n        }\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = new Trie();\n\n        // Insert all words with their costs into the trie\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // dp[i] represents the minimum cost to form the first i characters of the target\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Populate the dp array using the trie\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; // Skip unreachable states\n\n            TrieNode node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (!node.children.containsKey(target.charAt(j))) break;\n                node = node.children.get(target.charAt(j));\n                if (node.cost != -1) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n\n",
    "submit_ts": "1720323221",
    "subm_id": "1312370301"
}