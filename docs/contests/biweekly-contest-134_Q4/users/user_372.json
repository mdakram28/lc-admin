{
    "username": "mble6125",
    "submission": "class Solution {\n    vector<vector<int>> count;\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long res=0;\n        \n        count.resize(32);\n        \n        for (int i=0; i<nums.size(); ++i) {\n            for (int j=0; j<32; ++j) {\n                if (nums[i] & (1<<j)) continue;\n                count[j].push_back(i);\n            }\n        }\n        \n        for (int i=0; i<nums.size(); ++i) {\n            int cur=nums[i], j=i;\n            while((cur & k) >= k) {\n                int l=find(cur, j);\n                // cout<<i<<\" \"<<l<<\" \"<<cur<<endl;\n                if (cur==k) {\n                    res += (j-l);\n                }\n                if (l==-1) break;\n                cur &= nums[l];\n                j=l;\n            }\n        }\n        \n        return res;\n    }\n    \n    int find(int cur, int index) {\n        int res=-1;\n        for (int i=0; i<32; ++i) {\n            if (!(cur & (1<<i))) continue;\n            int l=0, r=count[i].size()-1;\n            while(l<=r) {\n                int mid=((l+r)>>1);\n                if (count[i][mid] < index) l=mid+1;\n                else r=mid-1;\n            }\n            \n            if (r!=-1) res=max(res, count[i][r]);\n        }\n        return res;\n    }\n    \n};",
    "submit_ts": "1720279033",
    "subm_id": "1311734492"
}