{
    "username": "Remineva",
    "submission": "class SegmentTree:\n    \n    def __init__(self, nums):\n        self.l = len(nums)\n        self.tree = [0] * self.l + nums\n        for i in range(self.l - 1, 0, -1):\n            self.tree[i] = self.tree[i<<1] + self.tree[i<<1|1]\n    \n    def update(self, i, val):\n        n = self.l + i\n        self.tree[n] = val\n        while n > 1:\n            self.tree[n>>1] = self.tree[n] + self.tree[n^1]\n            n >>= 1\n    \n    def sumRange(self, i, j):\n        m = self.l + i\n        n = self.l + j\n        res = 0\n        while m <= n:\n            if m & 1:\n                res += self.tree[m]\n                m += 1\n            m >>= 1\n            if n & 1 == 0:\n                res += self.tree[n]\n                n -= 1\n            n >>= 1\n        return res\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        flag = [0] * n\n        for i in range(1, n - 1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                flag[i] = 1\n        \n        seg = SegmentTree(flag)\n    \n        output = []\n        for u, i, j in queries:\n            if u == 1:\n                if j - 1 >= i + 1:\n                    res = seg.sumRange(i + 1, j - 1)\n                else:\n                    res = 0\n                output.append(res)\n            else:\n                if i == 0:\n                    nums[0] = j\n                    if nums[0] < nums[1]:\n                        if flag[1] == 0 and nums[1] > nums[2]:\n                            seg.update(1, 1)\n                            flag[1] = 1\n                    else:\n                        if flag[1] == 1:\n                            seg.update(1, 0)\n                            flag[1] = 0\n                elif i == n - 1:\n                    nums[i] = j\n                    if nums[i] < nums[i-1]:\n                        if flag[i-1] == 0 and nums[i-1] > nums[i-2]:\n                            seg.update(i-1, 1)\n                            flag[i-1] = 1\n                    else:\n                        if flag[i-1] == 1:\n                            seg.update(i-1, 0)\n                            flag[i-1] = 0\n                else:\n                    nums[i] = j\n                    if flag[i-1] == 1:\n                        if nums[i-1] <= nums[i]:\n                            seg.update(i-1, 0)\n                            flag[i-1] = 0\n                    else:\n                        if i != 1:\n                            if nums[i-1] > nums[i] and nums[i-1] > nums[i-2]:\n                                seg.update(i-1, 1)\n                                flag[i-1] = 1\n                    if flag[i] == 1:\n                        if nums[i-1] >= nums[i] or nums[i+1] >= nums[i]:\n                            seg.update(i, 0)\n                            flag[i] = 0\n                    else:\n                        if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                            seg.update(i, 1)\n                            flag[i] = 1\n                    if flag[i+1] == 1:\n                        if nums[i+1] <= nums[i]:\n                            seg.update(i+1, 0)\n                            flag[i+1] = 0\n                    else:\n                        if i != n - 2:\n                            if nums[i+1] > nums[i] and nums[i+1] > nums[i+2]:\n                                seg.update(i+1, 1)\n                                flag[i+1] = 1\n\n        return output",
    "submit_ts": 1718507733.0
}