{
    "username": "6cdh",
    "submission": "(define (min-changes nums k)\n  (define n (length nums))\n  (define-values (half1 half2) (split-at nums (/ n 2)))\n  (define rev-half2 (reverse half2))\n  (define mvs\n    (list->vector\n      (sort (map (\u03bb (a b)\n                   (max (max a b) (- k (min a b))))\n                 half1 rev-half2)\n            <)))\n  (define diffs (map abs-diff half1 rev-half2))\n  (define cter (sequence->counter diffs))\n\n  (define (cost X)\n    (define m (vector-length mvs))\n    (define index (bsearch-least 0 m (\u03bb (i) (>= (aref mvs i) X))))\n    (+ (* index 2) (- m index) (- (hash-ref cter X 0))))\n\n  (for/min (* 2 n) ([X (add1 k)])\n    (cost X)))\n\n(require (rename-in racket/unsafe/ops\n                    [unsafe-fxquotient quotient]))\n\n(define-syntax aref\n  (syntax-rules ()\n    [(_ arr) arr]\n    [(_ arr i dims ...)\n     (aref (vector-ref arr i) dims ...)]))\n\n(define (bsearch-least l r op)\n  (define m (quotient (+ l r) 2))\n  (cond [(= l r) l]\n        [(op m) (bsearch-least l m op)]\n        [else (bsearch-least (add1 m) r op)]))\n\n(define (sequence->counter seq)\n  (for/fold ([h (make-hash)])\n            ([v seq])\n    (hash-update! h v add1 0)\n    h))\n\n(define (abs-diff x y)\n  (abs (- x y)))\n\n(define-syntax-rule (for/min init-maximum-value args ... last-expr)\n  (for/fold ([mini init-maximum-value])\n            args ...\n    (min mini last-expr)))",
    "submit_ts": "1721488725",
    "subm_id": "1327431306"
}