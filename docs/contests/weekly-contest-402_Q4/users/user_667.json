{
    "username": "freetime430",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        high = len(nums)\n        arr = [0] * (high + 1)\n\n        def lowbit(x):\n            return x & -x\n        \n        def update(x, v):\n            while x <= high:\n                arr[x] += v\n                x += lowbit(x)\n\n        def get(x):\n            res = 0\n            while x > 0:\n                res += arr[x]\n                x -= lowbit(x)\n            return res\n        \n        for i in range(1, len(nums)-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                update(i+1, 1)\n        \n        res = []\n        for a, b, c in queries:\n            if a == 1:\n                if c - b >= 2:\n                    res.append(get(c)-get(b+1))\n                else:\n                    res.append(0)\n            else:\n                if 0 < b < len(nums)-1 and nums[b] > nums[b-1] and nums[b] > nums[b+1]:\n                    update(b+1, -1)\n                if 0 < b-1 < len(nums)-1 and nums[b-1] > nums[b-2] and nums[b-1] > nums[b]:\n                    update(b, -1)\n                if 0 < b+1 < len(nums)-1 and nums[b+1] > nums[b] and nums[b+1] > nums[b+2]:\n                    update(b+2, -1)\n                nums[b] = c\n                if 0 < b < len(nums)-1 and nums[b] > nums[b-1] and nums[b] > nums[b+1]:\n                    update(b+1, 1)\n                if 0 < b-1 < len(nums)-1 and nums[b-1] > nums[b-2] and nums[b-1] > nums[b]:\n                    update(b, 1)\n                if 0 < b+1 <len(nums)-1 and nums[b+1] > nums[b] and nums[b+1] > nums[b+2]:\n                    update(b+2, 1)\n        return res",
    "submit_ts": 1718508178.0
}