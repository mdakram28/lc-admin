{
    "username": "ayush_choudhary",
    "submission": "class Solution:\n    def maximumLength(self, numbers, k_value):\n        size = len(numbers)\n        lengths = [[1] * (k_value + 1) for _ in range(size)]\n        max_length = 1\n        max_lengths = [-1] * (k_value + 1)\n        num_to_lengths_map = [{} for _ in range(k_value + 1)]\n        \n        for i in range(size):\n            for j in range(k_value + 1):\n                for l in range(j):\n                    lengths[i][j] = max(lengths[i][j], 1 + max_lengths[l])\n                \n                if numbers[i] in num_to_lengths_map[j]:\n                    lengths[i][j] = max(lengths[i][j], 1 + num_to_lengths_map[j][numbers[i]])\n                \n                max_length = max(max_length, lengths[i][j])\n            \n            for j in range(k_value + 1):\n                max_lengths[j] = max(max_lengths[j], lengths[i][j])\n                num_to_lengths_map[j][numbers[i]] = max(num_to_lengths_map[j].get(numbers[i], -1), lengths[i][j])\n        \n        return max_length\n",
    "submit_ts": 1717862360.0
}