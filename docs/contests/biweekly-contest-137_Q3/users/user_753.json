{
    "username": "mew",
    "submission": "class Solution {\npublic:\n    struct my_comparator\n    {\n        // queue elements are vectors so we need to compare those\n        bool operator()(std::vector<int> const& a, std::vector<int> const& b) const\n        {\n            return a[0] < b[0];\n        }\n    };\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        priority_queue<std::vector<int>, std::vector<std::vector<int>>, my_comparator> all_pq;\n        vector<priority_queue<std::vector<int>, std::vector<std::vector<int>>, my_comparator>> row_pq(m);\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                all_pq.push({board[i][j], i, j});\n                row_pq[i].push({board[i][j], i, j});\n            }\n        }\n\n        long long ans = LLONG_MIN;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < m; k++) {\n                    long long cur = board[i][j];\n                    if (k == i)\n                        continue;\n\n                    vector<int> tmp_vec; \n                    if (row_pq[k].top()[2] == j) {\n                        tmp_vec = row_pq[k].top();\n                        row_pq[k].pop();\n                    }\n                    cur += row_pq[k].top()[0];\n                    // cout << \"debugtag01 \" << k << \" \" << row_pq[k].top()[0] << \" \" << row_pq[k].top()[1] << \" \" << row_pq[k].top()[2] << endl;\n                    int cur_row = row_pq[k].top()[2];\n                    if (!tmp_vec.empty())\n                        row_pq[k].push(tmp_vec);\n                    // cout << i << \" \" << j << \" \" << k << \" \" << cur_row << \" \" << cur << endl;\n                    \n                    vector<vector<int>> tmp_vec_1;\n                    while (true) {\n                        int cost = all_pq.top()[0], x = all_pq.top()[1], y = all_pq.top()[2];\n                        if (x == i || x == k) {\n                            tmp_vec_1.push_back(all_pq.top());\n                            all_pq.pop();\n                        } else if (y == j || y == cur_row) {\n                            tmp_vec_1.push_back(all_pq.top());\n                            all_pq.pop();\n                        } else {\n                            cur += cost;\n                            for (auto it : tmp_vec_1)\n                                all_pq.push(it);\n                            break;\n                        }\n                    }\n                    ans = max(ans, cur);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723907831",
    "subm_id": "556327744"
}