{
    "username": "bhavik_11",
    "submission": "class Solution {\nprivate:\n    bool bfs(vector<vector<int>> &graph, int start, int target1, int target2, int cnt) {\n        queue<int> q;\n        q.push(start);\n        vector<int> visited(cnt + 4, 0);\n        visited[start] = 1;\n\n        while(!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for(int neigh :graph[node]) {\n                if (!visited[neigh]) {\n                    q.push(neigh);\n                    visited[neigh] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> graph(n + 4);\n        int left = n;\n        int right = n+1;\n        int bottom = n+2;\n        int top = n+3;\n        \n        for(int i = 0; i < n; ++i) {\n            int cx1 = circles[i][0], cy1 = circles[i][1], r1 = circles[i][2];\n            if(cx1 <= r1) {\n                graph[left].push_back(i);\n                graph[i].push_back(left);\n            }\n            if(X - cx1 <= r1) {\n                graph[right].push_back(i); \n                graph[i].push_back(right);\n            }\n            if(cy1 <= r1) {\n                graph[bottom].push_back(i);\n                graph[i].push_back(bottom);\n            }\n            if(Y - cy1 <= r1) {\n                graph[top].push_back(i);\n                graph[i].push_back(top);\n            }\n            \n            for (int j = i + 1; j < n; ++j) {\n                int cx2 = circles[j][0], cy2 = circles[j][1], r2 = circles[j][2];\n                double distance = sqrt(pow(cx1 - cx2, 2) + pow(cy1 - cy2, 2));\n                if (r1 + r2 >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        // left to bottom blocked or right to top blocked\n        int res = bfs(graph, left, bottom, right, n + 4) || bfs(graph, top, right, bottom, n + 4);\n        return !res;\n    }\n};",
    "submit_ts": "1722138635",
    "subm_id": "1335795814"
}