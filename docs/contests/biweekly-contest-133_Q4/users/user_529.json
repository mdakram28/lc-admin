{
    "username": "TahsinArafat",
    "submission": "class Solution {\n    static const int MOD = 1000000007;\n    static const int MAX_INV = 400;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        map<int, int> reqMap;\n        for (const auto& req : reqs) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        std::vector<std::vector<long long>> permCnts(n + 1, std::vector<long long>(MAX_INV + 1, 0));\n        permCnts[0][0] = 1;\n\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= MAX_INV; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        permCnts[len][inv] = (permCnts[len][inv] + permCnts[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(len)) {\n                int targetInv = reqMap[len];\n                for (int inv = 0; inv <= MAX_INV; inv++) {\n                    if (inv != targetInv) {\n                        permCnts[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long res = 0;\n        for (long long cnt : permCnts[n]) {\n            res = (res + cnt) % MOD;\n        }\n        return static_cast<int>(res);\n    }\n};",
    "submit_ts": "1719070616",
    "subm_id": "1296827486"
}