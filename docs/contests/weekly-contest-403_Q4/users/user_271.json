{
    "username": "rozhkov",
    "submission": "from functools import lru_cache\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        @lru_cache(None)\n        def shrink(r1, r2, c1, c2):\n            if r2 < r1 or c2 < c1:\n                return 0\n            \n            minR = minC = inf\n            maxR = maxC = -1\n            for r in range(r1, r2+1):\n                for c in range(c1, c2+1):\n                    if grid[r][c] == 1:\n                        minC = min(minC, c)\n                        maxC = max(maxC, c)\n                        minR = min(minR, r)\n                        maxR = max(maxR, r)\n            return (maxC - minC + 1) * (maxR - minR + 1) if minR != inf else 0\n                    \n        @lru_cache(None)            \n        def trun(r1, r2, c1, c2, k):\n            if k == 1:\n                return shrink(r1, r2, c1, c2)\n            \n            res = inf\n            for r in range(r1, r2):\n                res = min(res, shrink(r1, r, c1, c2) + trun(r+1, r2, c1, c2, k-1), trun(r1, r, c1, c2, k-1) + shrink(r+1, r2, c1, c2))\n                \n            for c in range(c1, c2):\n                res = min(res, shrink(r1, r2, c1, c) + trun(r1, r2, c+1, c2, k-1), trun(r1, r2, c1, c, k-1) + shrink(r1, r2, c+1, c2))\n                \n            return res                \n                \n        \n        return trun(0, len(grid)-1, 0, len(grid[0])-1, 3)\n        ",
    "submit_ts": 1719114043.0
}