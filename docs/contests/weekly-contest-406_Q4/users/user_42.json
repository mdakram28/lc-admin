{
    "username": "Chen-Zhe-Xian",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a max heap to prioritize larger cuts\n        std::priority_queue<long long> horizontalCuts;\n        std::priority_queue<long long> verticalCuts;\n        \n        // Push all horizontal and vertical cuts into their respective heaps\n        for (int cost : horizontalCut) {\n            horizontalCuts.push(cost);\n        }\n        for (int cost : verticalCut) {\n            verticalCuts.push(cost);\n        }\n        \n        // Initial number of pieces\n        long long horizontalPieces = 1;\n        long long verticalPieces = 1;\n        \n        // Total cost\n        long long totalCost = 0;\n        \n        // Process the cuts in a way that minimizes cost\n        while (!horizontalCuts.empty() || !verticalCuts.empty()) {\n            if (verticalCuts.empty() || (!horizontalCuts.empty() && horizontalCuts.top() > verticalCuts.top())) {\n                // If vertical cuts are exhausted or horizontal cut is more expensive\n                totalCost += horizontalCuts.top() * verticalPieces;\n                horizontalCuts.pop();\n                ++horizontalPieces;\n            } else {\n                // If horizontal cuts are exhausted or vertical cut is more expensive\n                totalCost += verticalCuts.top() * horizontalPieces;\n                verticalCuts.pop();\n                ++verticalPieces;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720924817",
    "subm_id": "1320232095"
}