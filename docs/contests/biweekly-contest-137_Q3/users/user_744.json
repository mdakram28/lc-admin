{
    "username": "milan",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        \n        def get_max_val(a, b, c) -> int:\n            ret = -inf\n            for a_val, a_idx in a:\n                for b_val, b_idx in b:\n                    for c_val, c_idx in c:\n                        if a_idx != b_idx and b_idx != c_idx and a_idx != c_idx:\n                            ret = max(ret, a_val + b_val + c_val)\n            return ret\n\n        row_based_mx = []\n        for i, row in enumerate(board):\n            mx = [[-inf, -1], [-inf, -1], [-inf, -1]]\n            for j, val in enumerate(row):\n                if val > mx[0][0]:\n                    mx[1], mx[2] = mx[0], mx[1]\n                    mx[0] = [val, j]\n                elif val > mx[1][0]:\n                    mx[2] = mx[1]\n                    mx[1] = [val, j]\n                elif val > mx[2][0]:\n                    mx[2] = [val, j]\n            row_based_mx.append(mx)\n\n        m, n = len(board), len(board[0])\n        ans = -inf\n        for i in range(m):\n            for j in range(i + 1, m):\n                for k in range(j + 1, m):\n                    mx_val = get_max_val(row_based_mx[i], row_based_mx[j], row_based_mx[k])\n                    if mx_val > ans:\n                        ans = mx_val\n        return ans\n        \n",
    "submit_ts": "1723908007",
    "subm_id": "556328679"
}