{
    "username": "Khaled-Ahmed",
    "submission": "#define ll long long\n#define lo for (int i = 0; i < words.size(); ++i)\n#define loo  for (int j = i; j < l; ++j)\nclass Tree {\npublic:\n    class Ver {\n    public:\n        long long ret;\n        bool ok;\n        vector<Ver*> C;\n\n        Ver() {\n            C = vector<Ver*>(26, nullptr);\n            ret = LLONG_MAX;\n            ok = false;\n        }\n    };\n\n    Ver* root;\n\n    Tree() {\n        root = new Ver();\n    }\n\n    void AddFunc(const string& word, long long cost) {\n        Ver* N = root;\n        char ch = 'a';\n        for (char c : word) {\n            N->C[c - ch] = (N->C[c - ch] == nullptr) ? new Ver() : N->C[c - ch];\n            N = N->C[c - ch];\n        }\n        long long r = N->ret;\n        N->ret = min(cost, r);\n        N->ok = true;\n    }\n\n    Ver* Get() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Tree T;\n        ll l = target.size(), ini = 0;\n        vector<ll> answwer(l + 1, INT_MAX);\n        answwer[0] = ini;\n        lo { T.AddFunc(words[i], costs[i]); }\n        for (int i = 0; i < l; ++i) {\n            if (answwer[i] == INT_MAX) continue;\n\n            Tree::Ver* N = T.Get();\n            loo {\n                char ch = 'a';\n                if (!N->C[target[j] - ch])\n                    break;\n\n                N = N->C[target[j] - ch];\n                if (N->ok) {\n                    ll val = answwer[i] + N->ret;\n                    answwer[j + 1] = min(answwer[j + 1], val);\n                }\n            }\n        }\n        if (answwer[l] == INT_MAX)\n            return -1;\n        else\n            return answwer[l];\n    }\n};\n",
    "submit_ts": "1720323450",
    "subm_id": "1312375859"
}