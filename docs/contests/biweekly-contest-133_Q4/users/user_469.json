{
    "username": "rishabhofficial31",
    "submission": "class Solution {\n         private static final int MODULO = 1_000_000_007;\n    private static final int MAX_INV = 400;\n    public int numberOfPermutations(int n, int[][] requirements) {\n      \n\n        Map<Integer, Integer> reqMap = new HashMap<>();\n        for (int[] req : requirements) {\n            reqMap.put(req[0] + 1, req[1]);\n        }\n\n        long[][] dp = new long[n + 1][MAX_INV + 1];\n        dp[0][0] = 1;\n\n\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= MAX_INV; inversions++) {\n                for (int newPlacement = 0; newPlacement < length; newPlacement++) {\n                    int prevInversions = inversions - newPlacement;\n                    if (prevInversions >= 0) {\n                        dp[length][inversions] = (dp[length][inversions] + dp[length - 1][prevInversions]) % MODULO;\n                    }\n                }\n            }\n\n           \n\n            if (reqMap.containsKey(length)) {\n                int targetInversions = reqMap.get(length);\n                for (int inversions = 0; inversions <= MAX_INV; inversions++) {\n                    if (inversions != targetInversions) {\n                        dp[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : dp[n]) {\n            result = (result + count) % MODULO;\n        }\n\n        \n        return (int) result;\n    }\n}",
    "submit_ts": "1719069920",
    "subm_id": "1296809840"
}