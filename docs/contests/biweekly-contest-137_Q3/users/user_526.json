{
    "username": "Yoshi_mitsu",
    "submission": "\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& grid) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        \n        vector<vector<pair<int, int>>> maxInRow(numRows, vector<pair<int, int>>(3, {INT_MIN, -1}));\n\n        for (int r = 0; r < numRows; ++r) {\n            fillMaxInRow(grid, r, numCols, maxInRow);\n        }\n\n        return computeMaxSum(maxInRow, numRows);\n    }\n\nprivate:\n    void fillMaxInRow(const vector<vector<int>>& grid, int rowIndex, int numCols, vector<vector<pair<int, int>>>& maxInRow) {\n        vector<pair<int, int>> columnValues(numCols);\n        int col = 0;\n\n        while (col < numCols) {\n            columnValues[col] = {grid[rowIndex][col], col};\n            ++col;\n        }\n\n        sort(columnValues.rbegin(), columnValues.rend());\n\n        int top = min(3, numCols);\n        int i = 0;\n        while (i < top) {\n            maxInRow[rowIndex][i] = columnValues[i];\n            ++i;\n        }\n    }\n\n    long long computeMaxSum(const vector<vector<pair<int, int>>>& maxInRow, int numRows) {\n        long long highestSum = LLONG_MIN;\n        int r1 = 0;\n\n        while (r1 < numRows) {\n            int r2 = r1 + 1;\n\n            while (r2 < numRows) {\n                int r3 = r2 + 1;\n\n                while (r3 < numRows) {\n                    int c1 = 0;\n\n                    while (c1 < 3) {\n                        int c2 = 0;\n\n                        while (c2 < 3) {\n                            if (maxInRow[r1][c1].second == maxInRow[r2][c2].second) {\n                                ++c2;\n                                continue;\n                            }\n                            int c3 = 0;\n\n                            while (c3 < 3) {\n                                if (maxInRow[r1][c1].second == maxInRow[r3][c3].second ||\n                                    maxInRow[r2][c2].second == maxInRow[r3][c3].second) {\n                                    ++c3;\n                                    continue;\n                                }\n\n                                long long currentSum = (long long)maxInRow[r1][c1].first + maxInRow[r2][c2].first + maxInRow[r3][c3].first;\n                                highestSum = max(highestSum, currentSum);\n\n                                ++c3;\n                            }\n                            ++c2;\n                        }\n                        ++c1;\n                    }\n                    ++r3;\n                }\n                ++r2;\n            }\n            ++r1;\n        }\n\n        return highestSum;\n    }\n};\n",
    "submit_ts": "1723908460",
    "subm_id": "1359153625"
}