{
    "username": "Anish Majumdar",
    "submission": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar maximumValueSum = function(board) {\n    class MaxArray {\n        constructor(arr) {\n            this.maxTable = [];\n            let n = arr.length;\n            let k = 0;\n            while ((1 << k) <= n) k++;\n            this.maxTable = Array.from({ length: k }, () => Array(n).fill(0));\n            for (let i = 0; i < n; i++) {\n                this.maxTable[0][i] = arr[i];\n            }\n            this.intervals = [1];\n            for (let i = 1; i < k; i++) {\n                for (let j = 0; j + (1 << i) <= n; j++) {\n                    this.maxTable[i][j] = Math.max(this.maxTable[i - 1][j], this.maxTable[i - 1][j + (1 << (i - 1))]);\n                }\n                this.intervals.push(1 << i);\n            }\n        }\n\n        getMaxInRange(left, right) {\n            let length = right - left + 1;\n            let idx = Math.floor(Math.log2(length));\n            return Math.max(this.maxTable[idx][left], this.maxTable[idx][right - (1 << idx) + 1]);\n        }\n    }\n\n    function calculatePotential(primary, secondary, support) {\n        let n = primary.length;\n        let forwardPrimary = [...primary];\n        let forwardSecondary = [...secondary];\n        let backwardPrimary = [...primary];\n        let backwardSecondary = [...secondary];\n\n        for (let i = 1; i < n; i++) {\n            forwardPrimary[i] = Math.max(forwardPrimary[i], forwardPrimary[i - 1]);\n            forwardSecondary[i] = Math.max(forwardSecondary[i], forwardSecondary[i - 1]);\n        }\n        for (let i = n - 2; i >= 0; i--) {\n            backwardPrimary[i] = Math.max(backwardPrimary[i], backwardPrimary[i + 1]);\n            backwardSecondary[i] = Math.max(backwardSecondary[i], backwardSecondary[i + 1]);\n        }\n\n        let maxSum = Number.NEGATIVE_INFINITY;\n        for (let i = 1; i < n - 1; i++) {\n            let bestPotential = Math.max(\n                forwardPrimary[i - 1] + backwardSecondary[i + 1],\n                forwardSecondary[i - 1] + backwardPrimary[i + 1]\n            );\n            maxSum = Math.max(maxSum, bestPotential + support[i]);\n        }\n\n        return maxSum;\n    }\n\n    function calculateMaxSum(first, second, third) {\n        return Math.max(\n            calculatePotential(first, second, third),\n            calculatePotential(second, third, first),\n            calculatePotential(first, third, second)\n        );\n    }\n\n    let rows = board.length, cols = board[0].length;\n    let maxTables = board.map(row => new MaxArray(row));\n\n    let globalMax = Number.NEGATIVE_INFINITY;\n    for (let col = 1; col < cols - 1; col++) {\n        let firstCol = board.map(row => row[col]);\n        let leftMax = [], rightMax = [];\n\n        for (let row = 0; row < rows; row++) {\n            leftMax.push(maxTables[row].getMaxInRange(0, col - 1));\n            rightMax.push(maxTables[row].getMaxInRange(col + 1, cols - 1));\n        }\n\n        globalMax = Math.max(globalMax, calculateMaxSum(firstCol, leftMax, rightMax));\n    }\n\n    return globalMax;\n};\n",
    "submit_ts": "1723910041",
    "subm_id": "1359215105"
}