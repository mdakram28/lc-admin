{
    "username": "vjcp9058",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& tmkc) {\n        int n = tmkc.size();\n        vector<vector<int>> adj(n + 4);\n\n        for (int i = 0; i < n; ++i) {\n            int k = tmkc[i][0];\n            int l = tmkc[i][1];\n            int m = tmkc[i][2];\n\n            if (k <= m) {\n                adj[i].push_back(n);\n                adj[n].push_back(i);\n            }\n            if (l <= m) {\n                adj[i].push_back(n + 1);\n                adj[n + 1].push_back(i);\n            }\n            if (X - k <= m) {\n                adj[i].push_back(n + 2);\n                adj[n + 2].push_back(i);\n            }\n            if (Y - l <= m) {\n                adj[i].push_back(n + 3);\n                adj[n + 3].push_back(i);\n            }\n\n            for (int j = i + 1; j < n; ++j) {\n                long long dx = static_cast<long long>(tmkc[i][0]) - tmkc[j][0];\n                long long dy = static_cast<long long>(tmkc[i][1]) - tmkc[j][1];\n                long long distance_sq = dx * dx + dy * dy;\n                long long radius_sum = static_cast<long long>(tmkc[i][2]) + tmkc[j][2];\n                if (radius_sum * radius_sum >= distance_sq) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        auto bfs = [&](int start, int target1, int target2) {\n            queue<int> q;\n            vector<bool> visited(n + 4, false);\n            q.push(start);\n            visited[start] = true;\n\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : adj[u]) {\n                    if (!visited[v]) {\n                        q.push(v);\n                        visited[v] = true;\n                    }\n                }\n            }\n            return (visited[target1] || visited[target2]);\n        };\n\n        bool fuck = false;\n        fuck = fuck || bfs(n, n + 1, n + 2); // Check for bottom-left corner\n        fuck = fuck || bfs(n + 3, n + 2, n + 1); // Check for top-right corner\n\n        return !fuck;\n    }\n};\n",
    "submit_ts": "1722139175",
    "subm_id": "1335810103"
}