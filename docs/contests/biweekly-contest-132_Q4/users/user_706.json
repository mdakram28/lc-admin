{
    "username": "charliesabino",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> next_i(n, -1);\n        map<int, int> m;\n\n        for (int i = 0; i < n; i++) {\n            if (m.contains(nums[i])) {\n                next_i[m[nums[i]]] = i;\n            }\n            m[nums[i]] = i;\n        }\n\n        int ogk = k;\n        vector<vector<vector<int>>> memo(\n            n, vector<vector<int>>(2, vector<int>(k + 1, -1)));\n\n        auto dp = [&](auto&& dp, int i, int start, int k) {\n            if (i == n && k >= 0)\n                return 0;\n            if (k < 0)\n                return INT_MIN;\n            if (memo[i][start][k] != -1)\n                return memo[i][start][k];\n\n            if (start) {\n\n                memo[i][start][k] = max(1 + dp(dp, i + 1, 0, k - 1), 1);\n                if (next_i[i] != -1) {\n                    memo[i][start][k] =\n                        max(memo[i][start][k], 1 + dp(dp, next_i[i], 1, k));\n                }\n\n            } else {\n                memo[i][start][k] = max(1 + dp(dp, i + 1, 0, k - 1), 1);\n                if (next_i[i] != -1) {\n                    memo[i][start][k] =\n                        max(memo[i][start][k], 1 + dp(dp, next_i[i], 1, k));\n                }\n                memo[i][start][k] = max(memo[i][start][k], dp(dp, i + 1, 0, k));\n            }\n\n            return memo[i][start][k];\n        };\n\n        return dp(dp, 0, 0, k);\n    }\n};",
    "submit_ts": 1717862063.0
}