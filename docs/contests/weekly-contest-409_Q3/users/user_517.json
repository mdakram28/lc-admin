{
    "username": "pipixia-9527",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int[] d = new int[n];\n        for(int i = 0; i < n - 1; i++) {\n            d[i] = i;\n           \n        }\n        int m = queries.length;\n        int[] ans = new int[m];\n        int inf = n + 100;\n        int t = n - 1;\n        TreeMap<Integer, Integer> map = new TreeMap<>();\n        int sum = 0;\n        for(int i = 0; i < m; i++) {\n            int u = queries[i][0];\n            int v = queries[i][1];\n            Integer x = map.ceilingKey(u);\n            Integer y =null;\n            if(x != null)\n            {\n                 y = map.get(x);\n                 {\n                     while(x != null && y <= v) {\n                       \n                         \n                         sum -= y - x - 1;\n                         map.remove(x);\n                         x = map.ceilingKey(u);\n                         if(x != null)y = map.get(x);\n                     }\n                       // System.out.println(\"remove \" +map);\n                 }\n               \n            }\n            x = map.floorKey(u);\n            if(x == null || map.get(x) < v) {\n                map.put(u, v);\n                sum += v - u - 1;\n            }\n           \n         \n           // System.out.println(map + \" \" + sum);\n          \n            ans[i] = t - sum ;\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1722741491",
    "subm_id": "552338537"
}