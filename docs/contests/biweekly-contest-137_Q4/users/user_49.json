{
    "username": "Prashant Dhaka",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n          int m = board.size();\n    int n = board[0].size();\n\n    // Step 1: Find the top 3 values and their column indices for each row\n    std::vector<std::vector<std::pair<int, int>>> top3Values(m);\n    std::vector<std::pair<long long, int>> rowSums(m); // To store the sum and the row index\n\n    for (int i = 0; i < m; ++i) {\n        std::vector<std::pair<int, int>> rowValues;\n        for (int j = 0; j < n; ++j) {\n            rowValues.push_back({board[i][j], j});\n        }\n        // Sort the row values in descending order and keep the top 3\n        std::sort(rowValues.rbegin(), rowValues.rend());\n        top3Values[i] = std::vector<std::pair<int, int>>(rowValues.begin(), rowValues.begin() + 3);\n        // Calculate the sum of the top 3 values\n        long long rowSum = static_cast<long long>(rowValues[0].first) + rowValues[1].first + rowValues[2].first;\n        rowSums[i] = {rowSum, i};\n    }\n\n    // Step 2: Sort rows by their top 3 sum and select the top 50 rows\n    std::sort(rowSums.rbegin(), rowSums.rend()); // Sort in descending order\n    int rowCount = std::min(125, m); // Select top 50 rows or fewer\n\n    long long maxSum = LLONG_MIN;\n\n    // Step 3: Iterate over all combinations of 3 different rows from the top 50\n    for (int i = 0; i < rowCount - 2; ++i) {\n        for (int j = i + 1; j < rowCount - 1; ++j) {\n            for (int k = j + 1; k < rowCount; ++k) {\n                int r1 = rowSums[i].second;\n                int r2 = rowSums[j].second;\n                int r3 = rowSums[k].second;\n\n                // Step 4: Consider all combinations of the top 3 values from the chosen rows\n                for (const auto& v1 : top3Values[r1]) {\n                    for (const auto& v2 : top3Values[r2]) {\n                        for (const auto& v3 : top3Values[r3]) {\n                            // Ensure the columns are distinct (no rooks attacking each other)\n                            if (v1.second != v2.second && v1.second != v3.second && v2.second != v3.second) {\n                                long long currentSum = static_cast<long long>(v1.first) + v2.first + v3.first;\n                                maxSum = std::max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return maxSum;\n    }\n};",
    "submit_ts": "1723907051",
    "subm_id": "1359087225"
}