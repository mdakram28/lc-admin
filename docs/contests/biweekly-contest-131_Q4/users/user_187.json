{
    "username": "agoodloser",
    "submission": "class SegmentTree {\npublic:\n    using ll = long long;\n    \n    SegmentTree() {}\n\n    SegmentTree(const vector<int> &nums) : n(nums.size()) {\n        tree.resize(n + n);\n        for (int i = 0; i < n; ++i) tree[i + n] = nums[i];\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = max(tree[i << 1], tree[(i << 1) + 1]);\n        }\n    }\n\n    void update(int i, int val) {\n        tree[i += n] = val;\n        while (i > 0) {\n            tree[i >> 1] = max(tree[i], tree[i ^ 1]);\n            i >>= 1;\n        }\n    }\n\n    ll rangeOption(int i, int j) { // [i, j]\n        ll res = tree[i + n];\n        for (i += n, j += n; i <= j; i >>= 1, j >>= 1) {\n            if (i & 1) res = max(res, tree[i++]);\n            if (!(j & 1)) res = max(res, tree[j--]);\n        }\n        return res;\n    }\n    \n    ll get(int i) {\n        return tree[n + i];\n    }\n    \nprivate:\n    std::vector<ll> tree;\n    size_t n;\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        \n        int N = min(50000, 3 * (int)queries.size()) + 5;\n        \n        vector<int> v(N);\n        SegmentTree seg(v);\n        \n        set<int> st;\n        \n        \n        \n        for (auto &q : queries) {\n            if (q[0] == 1) {\n                int x = q[1];\n                \n                st.insert(x);\n                auto it = st.find(x);\n                \n                if (next(it) != st.end()) {\n                    int p = *next(it);\n                    int d = p - x; \n                    int t = seg.rangeOption(p, p);\n                    seg.update(p, d);\n                }\n                \n                if (it == st.begin()) {\n                    seg.update(x, x);\n                } else {\n                    int q = *prev(it);\n                    int d = x - q; \n                    seg.update(x, d);\n                }\n                \n                \n                \n                \n            } else {\n                int x = q[1], sz = q[2];\n                if (sz > x) res.push_back(false);\n                else if (st.empty()) res.push_back(true);\n                else if (x - *st.rbegin() >= sz) res.push_back(true);\n                else {\n                    auto it = st.lower_bound(x);\n                    if (it != st.begin() && x - *prev(it) >= sz) {\n                        res.push_back(true);\n                    }\n                    \n                    else {\n                        int d = seg.rangeOption(0, x);\n                        res.push_back(d == 0 || d >= sz);\n                    }\n                }\n                \n            }\n        }\n        return res;\n    }\n};\n/*\n\n[[1,2],[2,3,3],[2,3,1],[2,2,2]]\n[[1,7],[2,7,6],[1,2],[2,7,5],[2,7,6]]\n[[2,1,1]]\n[[1,1],[2,4,3]]\n[[1,2],[1,13],[2,10,10],[2,5,11],[2,10,3]]\n*/",
    "submit_ts": "1716650284",
    "subm_id": "534770333"
}