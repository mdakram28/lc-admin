{
    "username": "jaarshit",
    "submission": "class Solution {\n    bool bfs(const vector<vector<int>>& gr, int st, int t1, int t2, int n) {\n        queue<int> q;\n        q.push(st);\n        vector<int> vis(n + 4, 0);\n        vis[st] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : gr[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int nc = circles.size();\n        vector<vector<int>> gr(nc + 4);\n\n        for (int i = 0; i < nc; ++i) {\n            int x, y, r;\n            x = circles[i][0];\n            y = circles[i][1];\n            r = circles[i][2];\n            if (x <= r) {\n                gr[nc].push_back(i);\n                gr[i].push_back(nc);\n            }\n            if (X - x <= r) {\n                gr[nc + 2].push_back(i);\n                gr[i].push_back(nc + 2);\n            }\n            if (y <= r) {\n                gr[nc + 1].push_back(i);\n                gr[i].push_back(nc + 1);\n            }\n            if (Y - y <= r) {\n                gr[nc + 3].push_back(i);\n                gr[i].push_back(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                int xj, yj, rj;\n                xj = circles[j][0];\n                yj = circles[j][1];\n                rj = circles[j][2];\n                double distance = sqrt(pow(x - xj, 2) + pow(y - yj, 2));\n                \n                if (r + rj >= distance) {\n                    gr[i].push_back(j);\n                    gr[j].push_back(i);\n                }\n            }\n        }\n\n        bool is_blocked = false;\n        is_blocked = max(is_blocked, bfs(gr, nc, nc + 1, nc + 2, nc + 4));  // Check for bottom-left corner\n        is_blocked = max(is_blocked, bfs(gr, nc + 3, nc + 2, nc + 1, nc + 4));  // Check for top-right corner\n\n        return is_blocked == false;\n    }\n};",
    "submit_ts": "1722139076",
    "subm_id": "1335807182"
}