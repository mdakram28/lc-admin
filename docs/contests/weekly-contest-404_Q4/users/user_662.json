{
    "username": "ChairmanMao",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        neighs = defaultdict(set)\n        for a, b in edges1:\n            neighs[a].add(b)\n            neighs[b].add(a)\n        start = 0\n#         start2 = 0\n#         for key in neighs:\n#             if len(neighs[key]) == 1:\n#                 if start == 0:\n#                     start = key\n#                 else:\n#                     start2 = key\n                \n            \n    \n        def dfs(node, neighbors, visited):\n            visited.add(node)\n            \n            depth = 0\n            target = None\n            for nei in neighbors[node]:\n                if nei not in visited:\n                    dep, tar = dfs(nei, neighbors, visited)\n                    if dep + 1 > depth:\n                        depth, target = dep + 1, tar\n            \n            return (depth, target) if target is not None else (0, node)\n        \n        _, b = dfs(0, neighs, set())\n        length, c = dfs(b, neighs, set())\n        \n        neighs = defaultdict(set)\n        for a, b in edges2:\n            neighs[a].add(b)\n            neighs[b].add(a)\n            \n        _, b1 = dfs(0, neighs, set())\n        length1, c1 = dfs(b1, neighs, set())\n        \n        # print(b, c, length)\n        # print(b1, c1, length1)\n        \n        return max((length + 1) // 2 + 1 + (length1 + 1) // 2, length, length1)\n        \n        \n        \n        \n        \n        \n            \n        ",
    "submit_ts": "1719717965",
    "subm_id": "1304405291"
}