{
    "username": "pyaracetamol",
    "submission": "class Solution {\npublic:\n   struct TrieNode\n{\n    unordered_map<char, TrieNode *> children;\n    vector<pair<int, int>> endings;\n};\n\nclass Trie\n{\npublic:\n    TrieNode *root;\n    Trie() { root = new TrieNode(); }\n\n    void insert(const string &word, int idx, int cost)\n    {\n        TrieNode *node = root;\n        for (char c : word)\n        {\n            if (!node->children.count(c))\n                node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->endings.push_back({idx, cost});\n    }\n};\n\nint minimumCost(string &tget, vector<string> &words, vector<int> &costs)\n{\n    int n = tget.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i)\n    {\n        trie.insert(words[i], i, costs[i]);\n    }\n\n    for (int i = 0; i < n; ++i)\n    {\n        if (dp[i] == INT_MAX)\n            continue;\n\n        TrieNode *node = trie.root;\n        for (int j = i; j < n; ++j)\n        {\n            if (!node->children.count(tget[j]))\n                break;\n            node = node->children[tget[j]];\n            for (const auto &p : node->endings)\n            {\n                int wIdx = p.first, wCost = p.second, len = words[wIdx].size();\n                if (i + len <= n)\n                    dp[i + len] = min(dp[i + len], dp[i] + wCost);\n            }\n        }\n    }\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n\n};",
    "submit_ts": "1720323442",
    "subm_id": "1312375683"
}