{
    "username": "L3PKrRzIQI",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INVERSIONS = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> reqMap = new HashMap<>();\n        for (int[] req : requirements) {\n            reqMap.put(req[0] + 1, req[1]);\n        }\n\n        int[][] permCounts = new int[n + 1][MAX_INVERSIONS + 1];\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            int targetInv = reqMap.getOrDefault(length, -1);\n\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                permCounts[length][inv] = 0;\n\n                if (targetInv == -1 || inv == targetInv) {\n                    for (int newPos = 0; newPos < length; newPos++) {\n                        int prevInv = inv - newPos;\n                        if (prevInv >= 0) {\n                            permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            result = (result + permCounts[n][inv]) % MOD;\n        }\n\n        return result;\n    }\n\n}\n",
    "submit_ts": 1719070791.0
}