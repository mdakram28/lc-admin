{
    "username": "CapLevi10",
    "submission": "#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& tiles, int groupSize) {\n        int totalTiles = tiles.size();\n        if (groupSize == 1) {\n            return totalTiles;\n        }\n        \n        int alternatingGroupsCount = 0;\n        int currentAlternatingLength = 1;\n        \n        for (int index = 1; index < totalTiles + groupSize - 1; ++index) {\n            int currentIndex = getCircularIndex(index, totalTiles);\n            int previousIndex = getCircularIndex(index - 1, totalTiles);\n            \n            if (isAlternating(tiles[currentIndex], tiles[previousIndex])) {\n                ++currentAlternatingLength;\n            } else {\n                currentAlternatingLength = 1;\n            }\n            \n            if (currentAlternatingLength >= groupSize) {\n                ++alternatingGroupsCount;\n            }\n        }\n        \n        return alternatingGroupsCount;\n    }\n\nprivate:\n    int getCircularIndex(int index, int total) {\n        return index % total;\n    }\n\n    bool isAlternating(int currentColor, int previousColor) {\n        return currentColor != previousColor;\n    }\n};\n",
    "submit_ts": "1720280208",
    "subm_id": "1311780818"
}