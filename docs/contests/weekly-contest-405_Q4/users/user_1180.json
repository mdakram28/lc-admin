{
    "username": "drakefake785",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int,int>> wordIndices;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int index,int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back({index,cost});\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i,costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j]]) break;\n                node = node->children[target[j]];\n                for (auto idx : node->wordIndices) {\n                    int len = words[idx.first].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + idx.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322732",
    "subm_id": "1312357666"
}