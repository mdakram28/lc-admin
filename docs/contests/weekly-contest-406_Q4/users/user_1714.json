{
    "username": "tmtriet00",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> pqh = new PriorityQueue<>((a,b)->b-a);\n        PriorityQueue<Integer> pqv = new PriorityQueue<>((a,b)->b-a);\n\n        for(int cut : horizontalCut){\n            pqh.add(cut);\n        }\n\n        for(int cut : verticalCut){\n            pqv.add(cut);\n        }\n\n        long ans = 0l;\n\n        while(!pqh.isEmpty() || !pqv.isEmpty()){\n            Integer hmax = pqh.isEmpty() ? null : pqh.peek();\n            Integer vmax = pqv.isEmpty() ? null : pqv.peek();\n            boolean cutV = false;\n\n            if(hmax == null){\n                // selected = pqv.poll();\n                cutV = true;\n            }\n            else if(vmax == null){\n                // selected = pqh.poll();\n            }\n            else if(hmax > vmax){\n                // selected = pqh.poll();\n            }\n            else {\n                // selected = pqv.poll();\n                cutV = true;\n            }\n\n            if(cutV){\n                ans += (long)pqv.poll()*(long)(m-pqh.size());\n            }\n            else{\n                ans += (long)pqh.poll()*(long)(n-pqv.size());\n            }\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1720926424",
    "subm_id": "1320285836"
}