{
    "username": "kaival16",
    "submission": "struct TNode {\n    TNode * e[26];\n    bool flag=false;\n    int cost=INT_MAX;\n    bool containsKey(char ch){\n        return (e[ch-'a']!=NULL);\n    }\n    void put(char c,TNode *n){\n        e[c-'a']=n;\n    }\n    TNode* get(char ch){\n        return e[ch-'a'];\n    }\n};\n\n\nclass Trie {\n\npublic:\n    TNode* root;\n    Trie() {\n        root=new TNode();\n    }\n    void insert(string word,int cst) {\n        TNode* node=root;\n        for(int i=0;i<word.length();i++){\n            \n            if(!(node->containsKey(word[i]))){\n                node->put(word[i],new TNode());\n            }\n            node = node->get(word[i]);\n        }\n        node->flag=true;\n        node->cost=min(cst,node->cost);\n    }\n    int search(string word) {\n        TNode * node=root;\n        for(int i=0;i<word.length();i++){\n            if(!(node->containsKey(word[i]))){\n                return false;\n            }\n            node = node->get(word[i]);\n        }\n        return node->cost;\n    }\n\n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        TNode * node=root;\n        for(int i=0;i<prefix.length();i++){\n            if(!(node->containsKey(prefix[i]))){\n                return false;\n            }\n            node = node->get(prefix[i]);\n        }\n        return true;\n    }\n};\n\n\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        Trie* t=new Trie();\n        vector<int> dp(target.size()+2,INT_MAX);\n        for(int i=0;i<costs.size();i++){\n            t->insert(words[i],costs[i]);\n        }\n        dp[0] = 0; \n        \n         for (int j = 0; j < n; ++j) {\n            if (dp[j] == INT_MAX) \n                continue;  \n            TNode* node = t->root;\n            for (int k = j; k < n; ++k) {\n                if(!(node->containsKey(target[k]))) break;\n                node = node->e[target[k]-'a'];\n                if (node->cost != INT_MAX) {\n                    dp[k + 1] = min(dp[k + 1], dp[j] + (node->cost));\n                }\n            }\n        }\n        if(dp[n]==INT_MAX)return -1;\n        else return dp[n];\n    }\n};",
    "submit_ts": "1720324782",
    "subm_id": "1312408181"
}