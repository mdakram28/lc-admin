{
    "username": "cai_lw",
    "submission": "class Solution {\n    struct Point{\n        int x,y;\n        bool operator==(Point rhs)const{\n            return x==rhs.x&&y==rhs.y;\n        }\n    };\n    int dist(Point p,Point q){\n        return abs(p.x-q.x)+abs(p.y-q.y);\n    }\n    pair<Point,Point> farthest_points(const vector<Point>& pts){\n        array<Point,4> ext;\n        auto [it0,it1]=minmax_element(pts.begin(),pts.end(),[](Point p,Point q){\n            return p.x+p.y<q.x+q.y;\n        });\n        ext[0]=*it0;\n        ext[1]=*it1;\n        auto [it2,it3]=minmax_element(pts.begin(),pts.end(),[](Point p,Point q){\n            return p.x-p.y<q.x-q.y;\n        });\n        ext[2]=*it2;\n        ext[3]=*it3;\n        int ibest=0,jbest=0;\n        for(int i=0;i<4;i++)\n            for(int j=i+1;j<4;j++)\n                if(dist(ext[i],ext[j])>dist(ext[ibest],ext[jbest])){\n                    ibest=i;\n                    jbest=j;\n                }\n        return {ext[ibest],ext[jbest]};\n    }\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<Point> pts;\n        pts.reserve(points.size());\n        for(auto &p:points)\n            pts.emplace_back(p[0],p[1]);\n        auto [p,q]=farthest_points(pts);\n        int ans=dist(p,q);\n        auto ip=find(pts.begin(),pts.end(),p)-pts.begin();\n        auto iq=find(pts.begin(),pts.end(),q)-pts.begin();\n        auto pts_p=pts;\n        pts_p.erase(pts_p.begin()+ip);\n        auto [p1,q1]=farthest_points(pts_p);\n        ans=min(ans,dist(p1,q1));\n        auto pts_q=pts;\n        pts_q.erase(pts_q.begin()+iq);\n        auto [p2,q2]=farthest_points(pts_q);\n        ans=min(ans,dist(p2,q2));\n        return ans;\n    }\n};"
}