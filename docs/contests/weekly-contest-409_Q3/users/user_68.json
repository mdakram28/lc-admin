{
    "username": "laughing-parepvg",
    "submission": "import os,sys,random,threading\n#sys.exit() \u9000\u51fa\u7a0b\u5e8f\nfrom random import randint,choice,shuffle\n#randint(a,b)\u4ece[a,b]\u8303\u56f4\u968f\u673a\u9009\u62e9\u4e00\u4e2a\u6570\n#choice(seq)seq\u53ef\u4ee5\u662f\u4e00\u4e2a\u5217\u8868,\u5143\u7ec4\u6216\u5b57\u7b26\u4e32,\u4eceseq\u4e2d\u968f\u673a\u9009\u53d6\u4e00\u4e2a\u5143\u7d20\n#shuffle(x)\u5c06\u4e00\u4e2a\u53ef\u53d8\u7684\u5e8f\u5217x\u4e2d\u7684\u5143\u7d20\u6253\u4e71\nfrom copy import deepcopy\nfrom io import BytesIO,IOBase\nfrom types import GeneratorType\nfrom functools import lru_cache,reduce\n#reduce(op,\u8fed\u4ee3\u5bf9\u8c61)\nfrom bisect import bisect_left,bisect_right\n#bisect_left(x) \u5927\u4e8e\u7b49\u4e8ex\u7684\u7b2c\u4e00\u4e2a\u4e0b\u6807\n#bisect_right(x) \u5927\u4e8ex\u7684\u7b2c\u4e00\u4e2a\u4e0b\u6807\nfrom collections import Counter,defaultdict,deque\nfrom itertools import accumulate,combinations,permutations\n#accumulate(a)\u7528a\u5e8f\u5217\u751f\u6210\u4e00\u4e2a\u7d2f\u79ef\u8fed\u4ee3\u5668\uff0c\u4e00\u822clist\u5316\u524d\u9762\u653e\u4e2a[0]\u505a\u524d\u7f00\u548c\u7528\n#combinations(a,k)a\u5e8f\u5217\u9009k\u4e2a \u7ec4\u5408\u8fed\u4ee3\u5668\n#permutations(a,k)a\u5e8f\u5217\u9009k\u4e2a \u6392\u5217\u8fed\u4ee3\u5668\nfrom heapq import  heapify,heappop,heappush\n#heapify\u5c06\u5217\u8868\u8f6c\u4e3a\u5806\nfrom typing import Generic,Iterable,Iterator,TypeVar,Union,List\nfrom string import ascii_lowercase,ascii_uppercase,digits\n#\u5c0f\u5199\u5b57\u6bcd\uff0c\u5927\u5199\u5b57\u6bcd\uff0c\u5341\u8fdb\u5236\u6570\u5b57\nfrom math import ceil,floor,sqrt,pi,factorial,gcd,log,log10,log2,inf\n#ceil\u5411\u4e0a\u53d6\u6574\uff0cfloor\u5411\u4e0b\u53d6\u6574 \uff0csqrt\u5f00\u65b9 \uff0cfactorial\u9636\u4e58\nfrom decimal import Decimal,getcontext\n#Decimal(s) \u5b9e\u4f8b\u5316Decimal\u5bf9\u8c61,\u4e00\u822c\u4f7f\u7528\u5b57\u7b26\u4e32\n#getcontext().prec=100 \u4fee\u6539\u7cbe\u5ea6\nfrom sys import stdin, stdout, setrecursionlimit\ninput = lambda: sys.stdin.readline().rstrip(\"\\r\\n\")\nMI = lambda :map(int,input().split())\nli = lambda :list(MI())\nii = lambda :int(input())\nmod = int(1e9 + 7) #998244353\ninf = int(1e20)\npy = lambda :print(\"YES\")\npn = lambda :print(\"NO\")\nDIRS = [(0, 1), (1, 0), (0, -1), (-1, 0)]  # \u53f3\u4e0b\u5de6\u4e0a\nDIRS8 = [(0, 1), (1, 1), (1, 0), (1, -1), (0, -1), (-1, -1), (-1, 0),(-1, 1)]  # \u2192\u2198\u2193\u2199\u2190\u2196\u2191\u2197\n\n\n\nclass chain:\n    def __init__(self,n):\n        #\u7ef4\u62a4\u6bcf\u4e2a\u8282\u70b9\u7684\u524d\u9a71\u540e\u7ee7\uff0c\u521d\u59cb\u65f6\u6bcf\u4e2a\u70b9\u7684\u524d\u9a71\u548c\u540e\u7ee7\u90fd\u662f\u81ea\u5df1\n        self.nxtfa=list(range(n+2))\n        self.prefa=list(range(n+2))\n\n    def nxt(self,x):\n        t=x;fa=self.nxtfa\n        while fa[x]!=x:\n            x=fa[x]\n        while t!=x:\n            fa[t],t=x,fa[t]\n        return x\n\n    def pre(self,x):\n        t=x;fa=self.prefa\n        while fa[x]!=x:\n            x=fa[x]\n        while t!=x:\n            fa[t],t=x,fa[t]\n        return x\n\n    def remove(self,x):\n        self.nxtfa[x]=self.nxt(x+1)\n        self.prefa[x]=self.pre(x-1)\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        un=chain(n+5)\n        cnt=0\n        res=[]\n        for l,r in queries:\n            l+=1\n            r+=1\n            r-=1\n            p=un.nxt(l)\n            while p<r:\n                cnt+=1\n                un.remove(p)\n                p=un.nxt(p)\n            res.append(n-1-cnt)\n        return res\n            ",
    "submit_ts": "1722739528",
    "subm_id": "552325234"
}