{
    "username": "123GJWEQ2",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        if k <= 10:\n            res = [0]\n            def backtrack(cur_jumps, pos, used, thing):\n                if pos == k:\n                    res[0] += 1\n                if cur_jumps == 20:\n                    return\n                if used or not pos:\n                    backtrack(cur_jumps + 1, pos + (2 ** thing), False, thing + 1)\n                else:\n                    backtrack(cur_jumps + 1, pos + (2 ** thing), False, thing + 1)\n                    backtrack(cur_jumps + 1, pos - 1, True, thing)\n                    \n            backtrack(0, 1, False, 0)\n                    \n            return res[0]\n        \n        #become power of 2\n        #go down 2\n        #can intersperse things into power 2\n        \n        \n        jumps = 0\n        \n        pos = 1\n        \n        \n        while pos < k:\n            pos <<= 1\n            jumps += 1\n            \n        interweaves = pos - k\n        if interweaves > jumps + 1:\n            return 0\n        \n        return math.comb(jumps + 1, pos - k)",
    "submit_ts": "1716087895",
    "subm_id": "1261797714"
}