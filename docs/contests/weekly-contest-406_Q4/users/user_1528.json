{
    "username": "BhaargavB19",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         Integer[] hor = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] ver = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hor, Collections.reverseOrder());\n        Arrays.sort(ver, Collections.reverseOrder());\n\n        int hIndex = 0, vIndex = 0;\n        long totalCost = 0;\n        int hParts = 1;\n        int vParts = 1;\n\n        while (hIndex < hor.length && vIndex < ver.length) {\n            if (hor[hIndex] >= ver[vIndex]) {\n                totalCost += (long) hor[hIndex] * vParts;\n                hParts++;\n                hIndex++;\n            } else {\n                totalCost += (long) ver[vIndex] * hParts;\n                vParts++;\n                vIndex++;\n            }\n        }\n\n        while (hIndex < hor.length) {\n            totalCost += (long) hor[hIndex] * vParts;\n            hParts++;\n            hIndex++;\n        }\n\n        while (vIndex < ver.length) {\n            totalCost += (long) ver[vIndex] * hParts;\n            vParts++;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926011",
    "subm_id": "1320273214"
}