{
    "username": "chauncey95",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        max_cnt = min(n* (n-1) // 2, 400)\n        f = [[0] * (max_cnt+1) for i in range(n)]\n        req = dict(requirements)\n        if 0 in req and req[0] != 0:\n            return 0\n        f[0][0] = 1\n        for i in range(1, n):\n            for j in range(0, min((i * (i+1)//2)+1, max_cnt+1)):\n                k_range = range(max(0, j-i), min(((i) * (i-1) // 2) + 1, j+1, max_cnt + 1))\n                if i-1 in req:\n                    if req[i-1] in k_range:\n                        f[i][j] = (f[i][j] + f[i-1][req[i-1]]) % (10**9 + 7)\n                else:\n                    for k in k_range:\n                        # To prove: have if only have one way to add\n                        f[i][j] += f[i-1][k]\n                        f[i][j] %= 10**9 + 7\n        # print(f)\n        if req[n-1] <= max_cnt:\n            return f[n-1][req[n-1]]\n        else :\n            return 0",
    "submit_ts": 1719071356.0
}