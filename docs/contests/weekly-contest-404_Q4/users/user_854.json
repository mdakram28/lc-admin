{
    "username": "Usurper_29",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n\n        vector<vector<int>> graph1(n1);\n        vector<vector<int>> graph2(n2);\n\n        for (auto& edge : edges1) {\n            int u = edge[0], v = edge[1];\n            graph1[u].push_back(v);\n            graph1[v].push_back(u);\n        }\n\n        for (auto& edge : edges2) {\n            int u = edge[0], v = edge[1];\n            graph2[u].push_back(v);\n            graph2[v].push_back(u);\n        }\n\n        auto dfsTreeDiameter = [&](vector<vector<int>>& graph, int numNodes) {\n            vector<bool> visited(numNodes, false);\n            int maxTreeDiameter = 0;\n\n            function<int(int, int)> dfs = [&](int node, int parent) {\n                visited[node] = true;\n                int deepest = 0, secondDeepest = 0;\n\n                for (int neighbor : graph[node]) {\n                    if (neighbor != parent && !visited[neighbor]) {\n                        int depth = dfs(neighbor, node);\n                        if (depth > deepest) {\n                            secondDeepest = deepest;\n                            deepest = depth;\n                        } else if (depth > secondDeepest) {\n                            secondDeepest = depth;\n                        }\n                    }\n                }\n\n                maxTreeDiameter = max(maxTreeDiameter, deepest + secondDeepest);\n                return deepest + 1;\n            };\n\n            dfs(0, -1);\n\n            return maxTreeDiameter;\n        };\n\n        int t1 = dfsTreeDiameter(graph1, n1);\n        int t2 = dfsTreeDiameter(graph2, n2);\n\n        return max(max(t1, t2), (t1 + 1) / 2 + (t2 + 1) / 2 + 1);\n    }\n};\n",
    "submit_ts": "1719719521",
    "subm_id": "1304443985"
}