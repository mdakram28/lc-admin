{
    "username": "pengtsen",
    "submission": "class Solution {\n    unordered_map<int, int> cache;\n    int area(vector<vector<int>>& grid, int tl_r, int tl_c, int br_r, int br_c) {\n        //cout << tl_r << \"_\" << tl_c << \" ~ \" << br_r << \"_\" << br_c;\n        int key = (tl_r << 24) | (tl_c << 16) | (br_r << 8) | br_c;\n        \n        int res = 0;\n        if (cache.find(key) != cache.end()) {\n            res = cache[key];\n        } else {        \n            bool has_zero = 0;\n            int left = grid[0].size(), right = -1, top = grid.size(), bottom = -1;\n            for (int r = tl_r; r <= br_r; r++) {\n                for (int c = tl_c; c <= br_c; c++) {\n                    //cout << r << \", \" << c << endl;\n                    if (grid[r][c]) {\n                        has_zero = true;\n                        //cout << \"is 1\" << endl;\n                        top = min(top, r);\n                        left = min(left, c);\n                        bottom = max(bottom, r);\n                        right = max(right, c);\n                    }\n                }\n            }\n            res = (bottom - top + 1) * (right - left + 1);\n            if (!has_zero) res = 0;\n            cache[key] = res;\n        }\n        //cout << \" returns \" << res << endl;\n        return res;\n    }\n    vector<vector<int>> transpose(vector<vector<int>>& grid) {\n        vector<vector<int>> t(grid[0].size(), vector<int>(grid.size()));\n        for (int i = 0; i < grid.size(); i ++){\n            for (int j = 0; j < grid[0].size(); j++) {\n                t[j][i] = grid[i][j];\n            }\n        }\n        return t;\n    }\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        // two vertical bars\n        int res = INT_MAX;\n        if (grid[0].size() >= 3) {\n            for (int bar1 = 0; bar1 < grid[0].size() - 1; bar1++) {\n                for (int bar2 = bar1 + 1; bar2 < grid[0].size() - 1; bar2++) {\n                    int feasible = area(grid, 0, 0, grid.size() - 1, bar1) + area(grid, 0, bar1 + 1, grid.size() - 1, bar2)\n                         + area(grid, 0, bar2 + 1, grid.size() - 1, grid[0].size() - 1);\n                    res = min(res, feasible);\n                }\n            }\n        }\n        \n        // two horizontal bars\n        if (grid.size() >= 3) {\n            for (int bar1 = 0; bar1 < grid.size() - 1; bar1++) {\n                for (int bar2 = bar1 + 1; bar2 < grid.size() - 1; bar2++) {\n                    int feasible = area(grid, 0, 0, bar1, grid[0].size() - 1) + area(grid, bar1 + 1, 0, bar2, grid[0].size() - 1)\n                         + area(grid, bar2 + 1, 0, grid.size() - 1, grid[0].size() - 1);\n                    res = min(res, feasible);\n                }\n            }\n        }\n        \n        // horizontal then vertical\n        for (int round = 0; round < 2; round++) {\n            if (round == 1) {\n                grid = transpose(grid);\n                cache.clear();\n            }\n            //cout << grid.size() << \"*\" << grid[0].size() << endl;\n            for (int bar1 = 0; bar1 < grid.size() - 1; bar1++) {\n                for (int bar2 = 0; bar2 < grid[0].size() - 1; bar2++) {\n                    //cout << \"bar1=\" << bar1 << \", bar2=\" << bar2 << endl;\n                    // top is one region\n                    int feasible = area(grid, 0, 0, bar1, grid[0].size() - 1) + area(grid, bar1 + 1, 0, grid.size() - 1, bar2)\n                         + area(grid, bar1 + 1, bar2 + 1, grid.size() - 1, grid[0].size() - 1);\n                    res = min(res, feasible);\n                    //cout << \"res become \" << res << endl;\n\n                    // bottom part is one region\n                    feasible = area(grid, 0, 0, bar1, bar2) + area(grid, 0, bar2 + 1, bar1, grid[0].size() - 1)\n                         + area(grid, bar1 + 1, 0, grid.size() - 1, grid[0].size() - 1);\n                    res = min(res, feasible);\n                    //cout << \"res become \" << res << endl;\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1719113760.0
}