{
    "username": "hornedfoe",
    "submission": "class Solution{\n    private class UnionFind{\n        int parent[];\n        public UnionFind(int n){\n            parent = new int[n];\n            for(int i = 0 ; i < n ; i++) parent[i] = i;\n        }\n        public int find(int x){\n            while(x != parent[x]) x = parent[x] = parent[parent[x]];\n            return x;\n        }\n        public void union(int x , int y){\n            parent[find(x)] = find(y);\n        }\n    }\n    public boolean canReachCorner(int x , int y , int[][] nums){\n        int n = nums.length;\n        int[][] dirs = new int[][]{{0 , 0} , {0 , y} , {x , 0} , {x , y}};\n        UnionFind u = new UnionFind(n);\n        for(int i = 0 ; i < n ; i++){\n            for(int j = 0 ; j < n ; j++){\n                if(intersect(nums[i] , nums[j])) u.union(i , j);\n            }\n        }\n        Map<Integer , List<Integer>> map = new HashMap<>();\n        for(int i = 0 ; i < n ; i++){\n            map.computeIfAbsent(u.find(i) , v -> new ArrayList<>()).add(i);\n        }\n        // System.out.println(map);\n        for(List<Integer> list : map.values()){\n            boolean a = false , b = false , c = false , d = false;\n            for(int i : list){\n                a |= finder(nums[i] , dirs[0] , dirs[1]);\n                b |= finder(nums[i] , dirs[2] , dirs[3]);\n                c |= finder(nums[i] , dirs[0] , dirs[2]);\n                d |= finder(nums[i] , dirs[1] , dirs[3]);\n            }\n            if(a && b || c && d || a && c || b && d) return false;\n        }\n        return true;\n    }\n    private boolean intersect(int[] x , int[] y){\n        double d = Math.sqrt(Math.pow(x[0] - y[0] , 2) + Math.pow(x[1] - y[1] , 2));\n        return Math.abs(x[2] - y[2]) <= d && d <= x[2] + y[2];\n    }\n    private boolean finder(int[] X , int[] a , int[] b){\n        double A = b[1] - a[1];\n        double B = a[0] - b[0];\n        double C = 1d * b[0] * a[1] - 1d * b[1] * a[0];\n        double d = Math.abs(A * X[0] + B * X[1] + C) / Math.sqrt(A * A + B * B);\n        return d <= X[2];\n    }\n}",
    "submit_ts": "1722138968",
    "subm_id": "1335804374"
}