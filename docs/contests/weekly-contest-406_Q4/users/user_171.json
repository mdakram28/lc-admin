{
    "username": "emon49",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        long long horizontalPieces = 1, verticalPieces = 1, totalCost = 0; \n        vector<pair<int, char>> cuts;\n        for (int i = 0; i < m - 1; ++i) {\n            cuts.push_back({horizontalCut[i], 'H'});\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            cuts.push_back({verticalCut[i], 'V'});\n        }\n        \n        sort(cuts.begin(), cuts.end(), [](const pair<int, char>& a, const pair<int, char>& b) {\n            return a.first > b.first;\n        });\n        \n        for (auto cut : cuts) {\n            long long cost = cut.first;\n            char type = cut.second;\n            if (type == 'H') {\n                totalCost += cost * verticalPieces;\n                ++horizontalPieces; \n            } else {\n                totalCost += cost * horizontalPieces; \n                ++verticalPieces;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925181",
    "subm_id": "1320245761"
}