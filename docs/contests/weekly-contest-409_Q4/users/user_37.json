{
    "username": "merlininice",
    "submission": "struct Node {\n    int l, r;\n    int sum;\n    int add;\n}tr[200005];\nset<int> st;\nint a[100005];\nint ini[100005];\nint n;\nvoid build(int i, int l, int r) {\n    tr[i].l = l;\n    tr[i].r = r;\n    tr[i].add = 0;\n    if (l == r) {\n        tr[i].sum = ini[l];\n        return;\n    }\n    int mid = (l + r) / 2;\n    build(i+i, l, mid);\n    build(i+i+1, mid+1, r);\n    tr[i].sum = tr[i+i].sum + tr[i+i+1].sum;\n}\nvoid down(int i) {\n    tr[i].sum += (tr[i].r - tr[i].l + 1) * tr[i].add;\n    tr[i+i].add += tr[i].add;\n    tr[i+i+1].add += tr[i].add;\n    tr[i].add = 0;\n}\nvoid up(int i) {\n    tr[i].sum = tr[i+i].sum + (tr[i+i].r - tr[i+i].l + 1) * tr[i+i].add;\n    tr[i].sum += tr[i+i+1].sum + (tr[i+i+1].r - tr[i+i+1].l + 1) * tr[i+i+1].add;\n}\nvoid insert(int i, int l, int r, int add) {\n    if (l <= tr[i].l && r >= tr[i].r) {\n        tr[i].add += add;\n        return;\n    }\n    if (tr[i].r < l || tr[i].l > r) {\n        return;\n    }\n    down(i);\n    insert(i+i, l, r, add);\n    insert(i+i+1, l, r, add);\n    up(i);\n}\nint query(int i, int l, int r) {\n    if (tr[i].l >= l && tr[i].r <= r) {\n        return tr[i].sum + tr[i].add * (tr[i].r - tr[i].l + 1);\n    }\n    if (tr[i].r < l || tr[i].l > r) {\n        return 0;\n    }\n    down(i);\n    int res = 0;\n    res += query(i+i, l, r);\n    res += query(i+i+1, l, r);\n    return res;\n}\n\nvoid add_len(int l, int r, int x) {\n    if (r - l > n) {\n        insert(1, n, n, x * n);\n        return;\n    }\n    int ll, rr;\n    ll = max(1, r-(n-1) +1);\n    rr = r - l + 1;\n    insert(1, ll, rr, x);\n}\n\nvoid del_point(int i) {\n    int l = 0;\n    int r = 2 * n;\n    auto it = st.find(i);\n    if (it != st.begin()) {\n        it--;\n        l = *it;\n        it++;\n    }\n    it++;\n    if (it != st.end()) {\n        r = *it;\n    }\n    it--;\n    auto it1 = st.find(i);\n    //printf(\"del %d\\n\", i);\n    st.erase(it1);\n    //l, i, r\n    add_len(l, i - 1, -1);\n    add_len(i, r - 1, -1);\n    add_len(l, r - 1, 1);\n\n}\nvoid add_point(int i) {\n    int l = 0;\n    int r = 2 * n;\n    st.insert(i);\n    //printf(\"add %d\\n\", i);\n    auto it = st.find(i);\n    if (it != st.begin()) {\n        it--;\n        l = *it;\n        it++;\n    }\n    it++;\n    if (it != st.end()) {\n        r = *it;\n    }\n    it--;\n    //l, i, r\n    add_len(l, r - 1, -1);\n    add_len(l, i - 1, 1);\n    add_len(i, r - 1, 1);\n}\n\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& b, vector<vector<int>>& q) {\n        int i,j,k;\n        vector<int> res;\n        n = b.size();\n        int m = q.size();\n        st.clear();\n        for (i=0;i<n;++i) a[i] = a[i+n] = b[i];\n        for (i=0;i<=n;++i) {\n            ini[i] = 0;\n        }\n        int pre_c = a[n-1];\n        int now_l = 0;\n        for (i=n-1;i>=0;--i) {\n            if (a[i] == pre_c) {\n                now_l = 1;\n            } else {\n                now_l++;\n                pre_c = a[i];\n            }\n        }\n        for (i=n-1;i>=0;--i) {\n            if (a[i] == pre_c) {\n                now_l = 1;\n            } else {\n                now_l++;\n                pre_c = a[i];\n            }\n            now_l = min(now_l, n);\n            ini[now_l]++;\n        }\n        build(1, 0, n);\n        for (i=1;i<2*n;++i) {\n            if (a[i] == a[i-1]) {\n                //printf(\"add %d\\n\", i);\n                st.insert(i);\n            }\n        }\n        for (k=0;k<m;++k) {\n            if (q[k][0] == 1) {\n                //q[k][1] ~ n\n                int cnt = query(1, q[k][1], n);\n                res.push_back(cnt);\n            }\n            if (q[k][0] == 2) {\n                i = q[k][1];\n                if (a[i] == q[k][2]) {\n                    continue;\n                }\n                a[i] = q[k][2];\n                a[i+n] = q[k][2];\n                if (i != 0) {\n                    if (a[i] != a[i-1]) {\n                        del_point(i);\n                    } else {\n                        add_point(i);\n                    }\n                }\n                if (a[i+n] != a[i+n-1]) {\n                    //printf(\"i %d, %d %d\\n\", i, a[i+n], a[i+n-1]);\n                    del_point(i+n);\n                } else {\n                    add_point(i+n);\n                }\n                if (a[i] != a[i+1]) {\n                    del_point(i+1);\n                } else {\n                    add_point(i+1);\n                }\n                if (i != n-1) {\n                    if (a[i+n] != a[i+n+1]) {\n                        del_point(i+n+1);\n                    } else {\n                        add_point(i+n+1);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722743850",
    "subm_id": "552353188"
}