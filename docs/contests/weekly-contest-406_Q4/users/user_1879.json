{
    "username": "195517",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Sort the cut costs in descending order\n        std::sort(horizontalCut.rbegin(), horizontalCut.rend());\n        std::sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        int i = 0, j = 0;\n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        \n        // Use a greedy approach to pick the higher cost cut first\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += static_cast<long long>(horizontalCut[i]) * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[j]) * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n        \n        // Add the remaining horizontal cuts if any\n        while (i < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[i]) * verticalPieces;\n            i++;\n        }\n        \n        // Add the remaining vertical cuts if any\n        while (j < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[j]) * horizontalPieces;\n            j++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720926208",
    "subm_id": "1320279156"
}