{
    "username": "patuitar",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        '''\n        we can split it into 4 quadrants and then all other quadrants need to be \n        palindromic to the first quadrant\n        this will make it so the number of 1's is 4 naturally\n        edge case for the odd number of rows and columns\n        we can just ignore them for now and do all the quadrants\n        and then handle the single row or column separtely as an array.\n\n        if both are odd then the center is only 1 and will never be divisible by 4 if it is on\n        we need to count the number of 1's in the first half of the odd center\n        that do not match\n        we need and even number of pairs of ones\n        it costs the same amount of turn a single 1 to a palaindrome of 1s or 0s\n\n        '''\n        n, m = len(grid), len(grid[0])\n\n        count = 0\n        total = 0\n        \n        for i in range(n // 2):\n            for j in range(m // 2):\n                q1 = grid[i][j]\n                q2 = grid[i][m - j - 1]\n                q3 = grid[n - i - 1][j]\n                q4 = grid[n - i - 1][m - j - 1]\n\n                tot = q1 + q2 + q3 + q4\n                print(q1, q2, q3, q4)\n                match tot:\n                    case 0:\n                        continue\n                    case 4:\n                        total += 4\n                        continue\n                    case 1:\n                        count += 1\n                        continue\n                    case 2:\n                        count += 2\n                        total += 4\n                        continue\n                    case 3:\n                        count += 1\n                        total += 4\n                        continue\n        \n        # Handle odd number of rows\n        pairs = 0\n        singles = 0\n        if n % 2 == 1:\n            for j in range(m // 2):\n                q1 = grid[n // 2][j] \n                q2 = grid[n // 2][m - j - 1]\n\n                tot = q1 + q2\n                match tot:\n                    case 0:\n                        continue\n                    case 1:\n                        pairs += 1\n                        singles += 1\n                        total += 2\n                        continue\n                    case 2:\n                        pairs += 1\n                        total += 2\n                        continue\n\n\n        # Handle odd number of columns\n        if m % 2 == 1:\n            for i in range(n // 2):\n                q1 = grid[i][m // 2] \n                q2 = grid[n - i - 1][m // 2]\n\n                tot = q1 + q2\n                match tot:\n                    case 0:\n                        continue\n                    case 1:\n                        pairs += 1\n                        singles += 1\n                        total += 2\n                        continue\n                    case 2:\n                        pairs += 1\n                        total += 2\n                        continue\n        \n        if m % 2 == 1 and n % 2 == 1:\n            # Both are odd so the center must be a 0\n            if grid[n // 2][m // 2] == 1:\n                count += 1\n\n\n        if total % 4 != 0:\n            if singles == 0:\n                count += 2\n            else:\n                singles -= 1\n                count += 1\n        if pairs > 0:\n            count += singles\n        \n        print(total, count)\n        return count",
    "submit_ts": "1722699032",
    "subm_id": "1343199451"
}