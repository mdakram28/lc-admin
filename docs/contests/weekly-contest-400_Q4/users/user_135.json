{
    "username": "NerdyCoder",
    "submission": "class SegmentTree {\n public:\n    explicit SegmentTree(const vector<int> &nums) {\n        const int h = static_cast<int>(ceil(log2(nums.size())));\n        data.resize((1 << (h + 1)) - 1);\n        const int base = (1 << h) - 1;\n        for (int i = 0; i < nums.size(); ++i) {\n            data[i + base] = nums[i];\n        }\n        for (int i = nums.size(); i + base < data.size(); ++i) {\n            data[i + base] = INT_MAX;\n        }\n        for (int i = base - 1; i >= 0; --i) {\n            data[i] = (data[2 * i + 1] & data[2 * i + 2]);\n        }\n    }\n    \n    int query(int i, int j) {\n        int result = INT_MAX;\n        vector<tuple<int, int, int>> stk;\n        stk.emplace_back(0, 0, (data.size() + 1) / 2 - 1);\n        while (!stk.empty()) {\n            const auto [node, start_index, end_index] = stk.back();\n            stk.pop_back();\n            if (start_index >= i && end_index <= j) {\n                result &= data[node];\n                continue;\n            }\n            const int mid_index = start_index + (end_index - start_index) / 2;\n            if (i <= mid_index) {\n                stk.emplace_back(node * 2 + 1, start_index, mid_index);\n            }\n            if (j >= mid_index + 1) {\n                stk.emplace_back(node * 2 + 2, mid_index + 1, end_index);\n            }\n        }\n        return result;\n    }\n private:\n    vector<int> data;\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int result = INT_MAX;\n        SegmentTree tree(nums);\n        for (int i = 0, j = 0; j < nums.size(); ++j) {\n            while (i <= j && tree.query(i, j) < k) {\n                ++i;\n            }\n            if (i <= j) {\n                result = min(result, tree.query(i, j) - k);\n            }\n            if (i > 0) {\n                result = min(result, k - tree.query(i - 1, j));\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": 1717297745.0
}