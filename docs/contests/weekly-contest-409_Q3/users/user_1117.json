{
    "username": "FakeToxic",
    "submission": "#include <iostream>\n#include <bits/stdc++.h>\nusing namespace std;\n\n\n/****************** Aliases **********************/ \nusing ll= long long;\nusing lld= long double;\nusing ull= unsigned long long;\n\n/****************** Constants **********************/\nconst lld pi= 3.141592653589793238;\nconst ll INF= LONG_LONG_MAX;\nconst ll mod=1e9+7;\n\n/****************** TypeDefine **********************/\ntypedef pair<ll, ll> pll;\ntypedef vector<ll> vll;\ntypedef vector<pll> vpll;\ntypedef vector<string> vs;\ntypedef unordered_map<ll,ll> umll;\ntypedef map<ll,ll> mll;\ntypedef unordered_set<ll> usll;\ntypedef set<ll> sll;\ntypedef priority_queue<ll> pq;\n\n/****************** Macros **********************/\n#define ff first\n#define ss second\n#define pb push_back\n#define mp make_pair\n#define fl(i,n) for(int i=0;i<n;i++)\n#define rl(i,m,n) for(int i=n;i>=m;i--)\n#define each(it, v) for(auto& it: v)\n#define py cout<<\"YES\\n\"\n#define pm cout<<\"-1\\n\"\n#define pn cout<<\"NO\\n\"\n#define vr(v) v.begin(),v.end()\n#define rv(v) v.end(),v.begin()\n#define endl '\\n'\n\n\n/****************** Operator Overloads **********************/\ntemplate<typename T1, typename T2> // cin >> pair<T1, T2>\nistream& operator>>(istream &istream, pair<T1, T2> &p) { return (istream >> p.first >> p.second); }\ntemplate<typename T> // cin >> vector<T>\nistream& operator>>(istream &istream, vector<T> &v){for (auto &it : v)cin >> it;return istream;}\ntemplate<typename T1, typename T2> // cout << pair<T1, T2>\nostream& operator<<(ostream &ostream, const pair<T1, T2> &p) { return (ostream << p.first << \" \" << p.second); }\ntemplate<typename T> // cout << vector<T>\nostream& operator<<(ostream &ostream, const vector<T> &c) { for (auto &it : c) cout << it << \" \"; return ostream; }\n\n/****************** Utility Functions **********************/\ntemplate <typename T>\nvoid print(T &&t)  { cout << t << \"\\n\"; }\nvoid printarr(ll arr[], ll n){fl(i,n) cout << arr[i] << \" \";cout << \"\\n\";}\ntemplate<typename T>\nvoid printvec(vector<T>v){ll n=v.size();fl(i,n)cout<<v[i]<<\" \";cout<<\"\\n\";}\ntemplate<typename T>\nll sumvec(vector<T>v){ll n=v.size();ll s=0;fl(i,n)s+=v[i];return s;}\n\n/****************** Mathematical Functions **********************/\nll gcd(ll a, ll b){if (b == 0)return a;return gcd(b, a % b);} //__gcd \nll lcm(ll a, ll b){return (a/gcd(a,b)*b);}\nll moduloMultiplication(ll a,ll b,ll mod){ll res = 0;a %= mod;while (b){if (b & 1)res = (res + a) % mod;b >>= 1;}return res;}\nll powermod(ll x, ll y, ll p){ll res = 1;x = x % p;if (x == 0) return 0;while (y > 0){if (y & 1)res = (res*x) % p;y = y>>1;x = (x*x) % p;}return res;}\n\n\n/****************** Sorting **********************/\nbool sorta(const pair<int,int> &a,const pair<int,int> &b){return (a.second < b.second);}\nbool sortd(const pair<int,int> &a,const pair<int,int> &b){return (a.second > b.second);}\n\n/****************** Bits **********************/\nstring decToBinary(int n){string s=\"\";int i = 0;while (n > 0) {s =to_string(n % 2)+s;n = n / 2;i++;}return s;}\nll binaryToDecimal(string n){string num = n;ll dec_value = 0;int base = 1;int len = num.length();for(int i = len - 1; i >= 0; i--){if (num[i] == '1')dec_value += base;base = base * 2;}return dec_value;}\n\n/****************** Check **********************/\nbool isPrime(ll n){if(n<=1)return false;if(n<=3)return true;if(n%2==0||n%3==0)return false;for(int i=5;i*i<=n;i=i+6)if(n%i==0||n%(i+2)==0)return false;return true;}\nbool isPowerOfTwo(ll n){if(n==0)return false;return (ceil(log2(n)) == floor(log2(n)));}\nbool isPerfectSquare(ll x){if (x >= 0) {ll sr = sqrt(x);return (sr * sr == x);}return false;}\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vll distances(n, 0);\n        computeInitialDistances(distances, n);\n\n        sll activePositions;\n        initializePositions(activePositions, n);\n\n        vector<int> results;\n        processQueries(queries, activePositions, results);\n\n        return results;\n    }\n\nprivate:\n    void computeInitialDistances(vll& distances, int n) {\n        for (int i = 1; i < n; ++i) {\n            distances[i] = distances[i - 1] + 1;\n        }\n    }\n\n    void initializePositions(sll& positions, int n) {\n        fl(i,n){\n            positions.insert(i);\n        }\n    }\n\n    void processQueries(const vector<vector<int>>& queries, sll& positions, vector<int>& results) {\n        each(query,queries) {\n            int start = query[0];\n            int end = query[1];\n\n            auto itLower = positions.lower_bound(start + 1);\n            auto itUpper = positions.lower_bound(end);\n\n            positions.erase(itLower, itUpper);\n\n            results.pb(static_cast<int>(positions.size()) - 1);\n        }\n    }\n};\n",
    "submit_ts": "1722743173",
    "subm_id": "1343786043"
}