{
    "username": "khromykh",
    "submission": "class Solution {\n    public boolean canReachCorner(int x, int y, int[][] circles) {\n        int n = circles.length;\n        List<Integer>[] g= new ArrayList[n];\n        for (int i = 0; i < n; i++) {\n            g[i] = new ArrayList<>();\n        }\n        for (int i = 0; i < n; i++) {\n            for (int j = i+1; j < n; j++) {\n                if (connect(circles[i], circles[j])) {\n                    g[i].add(j);\n                    g[j].add(i);\n                }\n            }\n        }\n        int[] color = new int[n];\n        var q = new LinkedList<Integer>();\n        boolean[] added = new boolean[n];\n        for (int i = 0; i < n; i++) {\n            var c = circles[i];\n            if (tlu(c, y)) {\n                color[i] = 1;\n                q.offer(i);\n                added[i] = true;\n            }\n            if (tdr(c, x)) {\n                color[i] += 2;\n            }\n            if (color[i] == 3) return false;\n        }\n        System.out.println(Arrays.toString(color));\n        while (!q.isEmpty()) {\n            int cur = q.poll();\n            for (var next : g[cur]) {\n                if (color[next] == 2) return false;\n                if (!added[next]) q.offer(next);\n                added[next] = true;\n            }\n        }\n\n        return true;\n\n    }\n\n    boolean tlu(int[] c, int y) {\n        return Math.abs(c[1] - y) <= c[2] || Math.abs(c[0]) <= c[2];\n    }\n\n    boolean tdr(int[] c, int x) {\n        return Math.abs(c[0] - x) <= c[2] || Math.abs(c[1]) <= c[2];\n    }\n\n    boolean connect(int[] a, int[] b) {\n        long dx = Math.abs((long)a[0] - b[0]);\n        long dy = Math.abs((long)a[1] - b[1]);\n        long dr = a[2] + b[2];\n        return dx * dx + dy * dy <= dr * dr;\n    }\n\n}",
    "submit_ts": "1722136577",
    "subm_id": "1335738754"
}