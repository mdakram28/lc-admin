{
    "username": "h8086",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int wordIndex = -1;\n    \n    TrieNode() : children(26, nullptr), wordIndex(-1) {}\n};\n\nclass Solution {\nprivate:\n    void buildTrie(TrieNode* root, const vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children[c - 'a']) {\n                    node->children[c - 'a'] = new TrieNode();\n                }\n                node = node->children[c - 'a'];\n            }\n            if(node->wordIndex == -1) node->wordIndex = i;\n            else if(costs[node->wordIndex] > costs[i]) node->wordIndex = i;\n        }\n    }\n\npublic:\n    const long long inf = LLONG_MAX;\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<long long> dp(n + 1, inf);\n        dp[0] = 0;\n        \n        TrieNode* root = new TrieNode();\n        buildTrie(root, words, costs);\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == inf) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                \n                if (!node->children[target[j] - 'a']) break;\n                \n                node = node->children[target[j] - 'a'];\n                if (node->wordIndex != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[node->wordIndex]);\n                }\n            }\n        }\n        \n        return dp[n] == inf ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321505",
    "subm_id": "1312324654"
}