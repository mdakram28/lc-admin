{
    "username": "twitch_tv_qiqi_impact",
    "submission": "class SegmentTree:\n    def __init__(self, data, default=0, func=lambda x,y:x+y):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        st = SegmentTree([0] * n)\n        for i in range(1, n-1):\n            if nums[i-1] < nums[i] and nums[i] > nums[i+1]:\n                st[i] = 1\n                # print(i)\n        ret = []\n        for x, y, z in queries:\n            if x == 1:\n                # print(y+1, z)\n                ret.append(st.query(y+1, z))\n            else:\n                nums[y] = z\n                for i in range(y-1, y+2):\n                    if 1 <= i < n-1:\n                        st[i] = int(nums[i] > nums[i-1] and nums[i] > nums[i+1])\n        return ret\n                        \n        \n        ",
    "submit_ts": 1718506101.0
}