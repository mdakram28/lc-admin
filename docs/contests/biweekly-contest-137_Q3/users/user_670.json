{
    "username": "Harshit",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        \n        // Precompute top 3 values for each row and column\n        vector<vector<pair<int, int>>> rowMax(n);  // {value, column_index}\n        vector<vector<pair<int, int>>> colMax(m);  // {value, row_index}\n        \n        // Find top 3 values for each row\n        for (int i = 0; i < n; ++i) {\n            vector<pair<int, int>> values;\n            for (int j = 0; j < m; ++j) {\n                values.push_back({board[i][j], j});\n            }\n            // Sort by value in descending order and take top 3\n            sort(values.rbegin(), values.rend());\n            for (int k = 0; k < min(3, (int)values.size()); ++k) {\n                rowMax[i].push_back(values[k]);\n            }\n        }\n        \n        // Find top 3 values for each column\n        for (int j = 0; j < m; ++j) {\n            vector<pair<int, int>> values;\n            for (int i = 0; i < n; ++i) {\n                values.push_back({board[i][j], i});\n            }\n            // Sort by value in descending order and take top 3\n            sort(values.rbegin(), values.rend());\n            for (int k = 0; k < min(3, (int)values.size()); ++k) {\n                colMax[j].push_back(values[k]);\n            }\n        }\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Now we try to select 3 distinct cells from different rows and columns\n        // Loop through all rows and pick the best combination using precomputed values\n        for (int i1 = 0; i1 < n; ++i1) {\n            for (auto [val1, j1] : rowMax[i1]) {\n                // Try picking a second value from a different row\n                for (int i2 = 0; i2 < n; ++i2) {\n                    if (i2 == i1) continue;  // Skip the same row\n                    for (auto [val2, j2] : rowMax[i2]) {\n                        if (j2 == j1) continue;  // Skip the same column\n                        \n                        // Try picking a third value from a different row\n                        for (int i3 = 0; i3 < n; ++i3) {\n                            if (i3 == i1 || i3 == i2) continue;  // Skip the same rows\n                            for (auto [val3, j3] : rowMax[i3]) {\n                                if (j3 == j1 || j3 == j2) continue;  // Skip the same columns\n                                \n                                // Calculate the sum of the 3 selected values\n                                long long sum = (long long)val1 + val2 + val3;\n                                maxSum = max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723907849",
    "subm_id": "1359127047"
}