{
    "username": "humbl_pi",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.roots_dct = {} # potential roots\n        self.is_word = None ## does a word end @ this node? Else, cost\n\nclass Trie:\n\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        curr_node = self.root\n\n        for c in word:\n            # print(f'ADD: {c} + {curr_node.roots_dct}')\n\n            ## if char already in the trie, get its node\n            if c in curr_node.roots_dct:\n                curr_node = curr_node.roots_dct[c]\n            ## else, create new node\n            else:\n                curr_node.roots_dct[c] = TrieNode()\n                ## move to new node for the next char\n                curr_node = curr_node.roots_dct[c]\n\n        ## at end of word, set that node's is_word to cost (or smaller, if exists)\n        if curr_node.is_word is not None:\n            curr_node.is_word = min(cost, curr_node.is_word)\n        else:\n            curr_node.is_word = cost\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        ## data structure to store options + costs\n        n = len(words)\n        trieMe = Trie()\n        for i in range(n):\n            trieMe.insert(words[i], costs[i])\n\n        lent = len(target)\n        ## srch @ i:\n        @lru_cache(None)\n        def srch(i):\n            if i == lent: return 0\n            ans = float('inf')\n            curr_node = trieMe.root\n            curri = i ## index of `target` currently looking at\n            while curri<lent:\n                if target[curri] not in curr_node.roots_dct:\n                    break\n                else:\n                    curr_node = curr_node.roots_dct[target[curri]]\n                    curri += 1\n                if curr_node.is_word is not None:\n                    ans = min(ans, curr_node.is_word+srch(curri))\n            return ans\n\n        finalans = srch(0)\n        return finalans if finalans<float('inf') else -1\n\n\"\"\"\ntarget = \"abcdef\", \nwords = [\n    \"abdef\", 100\n    \"abc\", 1\n    \"d\", 1\n    \"def\", 10\n    \"ef\", 5\n], \ncosts = [100,1,1,10,5]\n\nwhich valid options do I have to proceed?\nDP: which one is cheapest?\n\"\"\"",
    "submit_ts": "1720321511",
    "subm_id": "1312324816"
}