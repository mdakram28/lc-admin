{
    "username": "himanshuyadv6645",
    "submission": "\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort both cut arrays in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        int i = horizontalCut.length - 1;\n        int j = verticalCut.length - 1;\n        \n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        long totalCost = 0;\n        \n        // Process the cuts in a greedy manner\n        while (i >= 0 && j >= 0) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += (long) horizontalCut[i] * verticalPieces;\n                horizontalPieces++;\n                i--;\n            } else {\n                totalCost += (long) verticalCut[j] * horizontalPieces;\n                verticalPieces++;\n                j--;\n            }\n        }\n        \n        // If any horizontal cuts are left\n        while (i >= 0) {\n            totalCost += (long) horizontalCut[i] * verticalPieces;\n            horizontalPieces++;\n            i--;\n        }\n        \n        // If any vertical cuts are left\n        while (j >= 0) {\n            totalCost += (long) verticalCut[j] * horizontalPieces;\n            verticalPieces++;\n            j--;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925123",
    "subm_id": "1320243692"
}