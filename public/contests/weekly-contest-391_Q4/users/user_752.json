{
    "username": "NerdyCoder",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pair<int, int>> values(4);\n        for (int i = 0; i < 4; ++i) {\n            values[i].first = values[i].second = kDirs[i].first * points[0][0] + kDirs[i].second * points[0][1];\n        }\n        int max_value = 0;\n        int candidate = 0;\n        for (int i = 1; i < points.size(); ++i) {\n            int value = 0;\n            for (int j = 0; j < 4; ++j) {\n                const int val = kDirs[j].first * points[i][0] + kDirs[j].second * points[i][1];\n                value = max(value, val - values[j].first);\n                value = max(value, values[j].second - val);\n                values[j].first = min(values[j].first, val);\n                values[j].second = max(values[j].second, val);\n            }\n            if (value > max_value) {\n                max_value = value;\n                candidate = i;\n            }\n        }\n        int another = -1;\n        for (int i = 0; i < points.size(); ++i) {\n            if (abs(points[i][0] - points[candidate][0]) + abs(points[i][1] - points[candidate][1]) == max_value) {\n                another = i;\n                break;\n            }\n        }\n        return min(solve(points, candidate), solve(points, another));\n    }\nprivate:\n    static constexpr array<pair<int, int>, 4> kDirs = {{{1, 1}, {-1, 1}, {1, -1}, {-1, -1}}};\n        \n    int solve(const vector<vector<int>> &points, int index) {\n        int result = 0;\n        bool first = true;\n        vector<pair<int, int>> values(4);\n        for (int i = 0; i < points.size(); ++i) {\n            if (i == index) {\n                continue;\n            }\n            for (int j = 0; j < kDirs.size(); ++j) {\n                const int val = kDirs[j].first * points[i][0] + kDirs[j].second * points[i][1];\n                if (first) {\n                    values[j].first = values[j].second = val;\n                } else {\n                    result = max(result, val - values[j].first);\n                    result = max(result, values[j].second - val);\n                    values[j].first = min(values[j].first, val);\n                    values[j].second = max(values[j].second, val);\n                }\n            }\n            first = false;\n        }\n        return result;\n    }\n};"
}