{
    "username": "alen0216056",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        std::map<int, size_t> sum_count;\n        std::map<int, size_t> diff_count;\n        for (const auto &p : points)\n        {\n            sum_count[p[0] + p[1]]++;\n            diff_count[p[0] - p[1]]++;\n        }\n        \n        int res = std::numeric_limits<int>::max();\n        for (const auto &p : points)\n        {\n            const auto sum = p[0] + p[1];\n            const auto diff = p[0] - p[1];\n            if (auto it = sum_count.find(sum); it->second == 1)\n            {\n                sum_count.erase(it);\n                \n                if (auto it2 = diff_count.find(diff); it2->second == 1)\n                {\n                    diff_count.erase(it2);\n                    \n                    res = std::min(res, std::max(sum_count.rbegin()->first - sum_count.begin()->first, diff_count.rbegin()->first - diff_count.begin()->first));\n                    \n                    diff_count[diff]++;\n                    \n                }\n                else\n                {\n                    res = std::min(res, std::max(sum_count.rbegin()->first - sum_count.begin()->first, diff_count.rbegin()->first - diff_count.begin()->first));\n                }\n                \n                sum_count[sum]++;\n            }\n            else\n            {\n                if (auto it2 = diff_count.find(diff); it2->second == 1)\n                {\n                    diff_count.erase(it2);\n                    \n                    res = std::min(res, std::max(sum_count.rbegin()->first - sum_count.begin()->first, diff_count.rbegin()->first - diff_count.begin()->first));\n                    \n                    diff_count[diff]++;\n                }\n                else\n                {\n                    res = std::min(res, std::max(sum_count.rbegin()->first - sum_count.begin()->first, diff_count.rbegin()->first - diff_count.begin()->first));\n                }\n            }\n            \n            \n            \n        }\n        return res;\n    }\n};"
}