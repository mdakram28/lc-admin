{
    "username": "birjusinghshekhawat98",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        // Store top 3 values with their column indices for each row\n        vector<vector<pair<long long, int>>> top3(m, vector<pair<long long, int>>(3, {LLONG_MIN, -1}));\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<long long, int>> row(n);\n            for (int j = 0; j < n; ++j) {\n                row[j] = {board[i][j], j};\n            }\n            sort(row.rbegin(), row.rend());\n            for (int k = 0; k < 3 && k < n; ++k) {\n                top3[i][k] = row[k];\n            }\n        }\n\n        // Consider all combinations of 3 rows\n        for (int r1 = 0; r1 < m - 2; ++r1) {\n            for (int r2 = r1 + 1; r2 < m - 1; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Get the top values for these three rows\n                    vector<tuple<long long, int, int>> candidates;\n                    for (auto [val1, c1] : top3[r1]) {\n                        for (auto [val2, c2] : top3[r2]) {\n                            for (auto [val3, c3] : top3[r3]) {\n                                if (c1 != c2 && c1 != c3 && c2 != c3) {\n                                    candidates.push_back({val1 + val2 + val3, c1, c2});\n                                }\n                            }\n                        }\n                    }\n                    for (const auto& [sum, _, __] : candidates) {\n                        maxSum = max(maxSum, sum);\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723907283",
    "subm_id": "1359099779"
}