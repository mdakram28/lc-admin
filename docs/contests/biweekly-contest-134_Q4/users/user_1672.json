{
    "username": "Yash9890",
    "submission": "class Solution {\n      private int[][] sparseTable;\n    private int[] log;\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n\n        long ans = 0;\n        SparseTable(nums);\n        for(int i = 0; i < n; i++){\n            int low = i, high = n-1;\n            int index = -1;\n            while(low<=high){\n                int mid =(low+high)/2;\n                int cur = rangeAND(i,mid);\n               if(cur >= k){\n                   index = Math.max(mid,index);\n                   low = mid+1;\n               }else {\n                   high = mid-1;\n               }\n            }\n            int index2= n;\n            low = i;\n            high = n-1;\n            while(low<=high){\n                int mid =(low+high)/2;\n                int cur = rangeAND(i,mid);\n                if(cur > k){\n                    low = mid+1;\n                }else {\n                    if(cur == k){\n                        index2 = Math.min(mid,index2);\n                    }\n                    high = mid-1;\n                }\n            }\n            if(index != -1 && index2 != n){\n                int len = index-index2+1;\n                ans+=len;\n            }\n        }\n        return ans;\n    }\n\n    public void SparseTable(int[] arr) {\n        int n = arr.length;\n        int maxLog = (int) (Math.log(n) / Math.log(2)) + 1;\n\n        // Initialize the sparse table\n        sparseTable = new int[n][maxLog];\n        log = new int[n + 1];\n\n        // Precompute logs\n        log[1] = 0;\n        for (int i = 2; i <= n; i++) {\n            log[i] = log[i / 2] + 1;\n        }\n\n        // Initialize sparse table for the intervals with length 1\n        for (int i = 0; i < n; i++) {\n            sparseTable[i][0] = arr[i];\n        }\n\n        // Compute values from smaller to larger intervals\n        for (int j = 1; j < maxLog; j++) {\n            for (int i = 0; i + (1 << j) <= n; i++) {\n                sparseTable[i][j] = sparseTable[i][j - 1] & sparseTable[i + (1 << (j - 1))][j - 1];\n            }\n        }\n    }\n    public int rangeAND(int left, int right) {\n        int range = right - left + 1;\n        int logRange = log[range];\n        return sparseTable[left][logRange] & sparseTable[right - (1 << logRange) + 1][logRange];\n    }\n}",
    "submit_ts": "1720280568",
    "subm_id": "1311794252"
}