{
    "username": "coastline-c",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        tree = new int[n*4];\n        int i1 = n-1;\n        for (int i = 1; i < n-1; i++) {\n            if (nums[i-1] < nums[i] && nums[i] > nums[i+1]) {\n                update(0, 0, i1, i, i, 1);\n            }\n        }\n        List<Integer> list = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                if (query[1]+1 >= query[2]) {\n                    list.add(0);\n                }else {\n                    list.add(find(0, 0, i1, query[1] + 1, query[2] - 1));\n                }\n            }else {\n                nums[query[1]] = query[2];\n                if (query[1]-1 > 0) {\n                    if (nums[query[1]-2] < nums[query[1]-1] && nums[query[1]-1] > nums[query[1]]) {\n                        update(0, 0, i1, query[1]-1, query[1]-1, 1);\n                    }else {\n                        update(0, 0, i1, query[1]-1, query[1]-1, 0);\n                    }\n                }\n                if (query[1] > 0 && query[1] < n-1) {\n                    if (nums[query[1]-1] < nums[query[1]] && nums[query[1]] > nums[query[1]+1]) {\n                        update(0, 0, i1, query[1], query[1], 1);\n                    }else {\n                        update(0, 0, i1, query[1], query[1], 0);\n                    }\n                }\n                if (query[1]+1 < n-1) {\n                    if (nums[query[1]] < nums[query[1]+1] && nums[query[1]+1] > nums[query[1]+2]) {\n                        update(0, 0, i1, query[1]+1, query[1]+1, 1);\n                    }else {\n                        update(0, 0, i1, query[1]+1, query[1]+1, 0);\n                    }\n                }\n            }\n        }\n        return list;\n    }\n    int[] tree;\n    public void update(int index, int l, int r, int L, int R, int value) {\n        if (l >= L && r <= R) {\n            tree[index] = value;\n            return;\n        }\n        int mid = (l+r)>>1;\n        if (mid >= L) update(index*2+1, l, mid, L, R, value);\n        if (mid+1 <= R) update(index*2+2, mid+1, r, L, R, value);\n        tree[index] = tree[index*2+1]+tree[index*2+2];\n    }\n    public int find(int index, int l, int r, int L, int R) {\n        if (l >= L && r <= R) {\n            return tree[index];\n        }\n        int answer = 0;\n        int mid = (l+r)>>1;\n        if (mid >= L) answer+=find(index*2+1, l, mid, L, R);\n        if (mid+1 <= R) answer+=find(index*2+2, mid+1, r, L, R);\n        return answer;\n    }\n}",
    "submit_ts": 1718509140.0
}