{
    "username": "JAGAN_POKALA",
    "submission": "\n\nclass Solution {\nclass DSU {\n    vector<int> rank, par, size;\npublic:\n    DSU(int n) {\n        rank.resize(n + 1, 0);\n        par.resize(n + 1);\n        size.resize(n + 1);\n        for (int i = 0; i <= n; i++) {\n            par[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    int find_Upar(int node) {\n        if (par[node] == node) {\n            return node;\n        }\n        return par[node] = find_Upar(par[node]);\n    }\n\n    void unionByRank(int u, int v) {\n        int up_u = find_Upar(u);\n        int up_v = find_Upar(v);\n        if (up_u == up_v) {\n            return;\n        }\n        if (rank[up_u] < rank[up_v]) {\n            par[up_u] = up_v;\n        } else if (rank[up_u] > rank[up_v]) {\n            par[up_v] = up_u;\n        } else {\n            par[up_v] = up_u;\n            rank[up_u]++;\n        }\n    }\n\n    void unionBySize(int u, int v) {\n        int up_u = find_Upar(u);\n        int up_v = find_Upar(v);\n        if (up_u == up_v) {\n            return;\n        }\n        if (size[up_u] < size[up_v]) {\n            par[up_u] = up_v;\n            size[up_v] += size[up_u];\n        } else {\n            par[up_v] = up_u;\n            size[up_u] += size[up_v];\n        }\n    }\n};\npublic:\n    bool canReachCorner(int x, int y, vector<vector<int>>& c) {\n        int n = c.size();\n        DSU d = DSU(n);\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                long long ax = c[i][0];\n                long long ay = c[i][1];\n                long long bx = c[j][0];\n                long long by = c[j][1];\n                long long dis = (ax - bx) * (ax - bx) + (ay - by) * (ay - by);\n                long long radsq = 1ll*(c[i][2] + c[j][2]) * (c[i][2] + c[j][2]);\n                if (dis <= radsq) {\n                    d.unionByRank(i, j);\n                }\n            }\n        }\n        \n        vector<int> top, bottom, left, right;\n        for (int i = 0; i < n; i++) {\n            if (c[i][1] + c[i][2] >= y) {\n                top.push_back(i);\n            }\n            if (c[i][1] - c[i][2] <= 0) {\n                bottom.push_back(i);\n            }\n            if (c[i][0] + c[i][2] >= x) {\n                right.push_back(i);\n            }\n            if (c[i][0] - c[i][2] <= 0) {\n                left.push_back(i);\n            }\n        }\n        \n        for (int i : top) {\n            for (int j : right) {\n                if (d.find_Upar(i) == d.find_Upar(j)) {\n                    return false;\n                }\n            }\n        }\n        for (int i : bottom) {\n            for (int j : left) {\n                if (d.find_Upar(i) == d.find_Upar(j)) {\n                    return false;\n                }\n            }\n        }\n        for (int i : top) {\n            for (int j : bottom) {\n                if (d.find_Upar(i) == d.find_Upar(j)) {\n                    return false;\n                }\n            }\n        }\n        for (int i : left) {\n            for (int j : right) {\n                if (d.find_Upar(i) == d.find_Upar(j)) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n};\n",
    "submit_ts": "1722139001",
    "subm_id": "1335805216"
}