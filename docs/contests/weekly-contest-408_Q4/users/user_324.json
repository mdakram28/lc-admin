{
    "username": "saurabh_1907",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &adjList, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        vector<int> seen(totalNodes + 4, 0);\n        q.push(start);\n        seen[start] = 1;\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n            for (int neighbor : adjList[current]) {\n                if (!seen[neighbor]) {\n                    q.push(neighbor);\n                    seen[neighbor] = 1;\n                }\n            }\n        }\n        return seen[target1] || seen[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circlesInput) {\n        vector<pair<pair<int, int>, int>> circles(circlesInput.size());\n        vector<vector<int>> adjList(circlesInput.size() + 4);\n        int numCircles = circlesInput.size();\n\n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circlesInput[i][0];\n            circles[i].first.second = circlesInput[i][1];\n            circles[i].second = circlesInput[i][2];\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[numCircles].push_back(i);\n                adjList[i].push_back(numCircles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                adjList[numCircles + 2].push_back(i);\n                adjList[i].push_back(numCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[numCircles + 1].push_back(i);\n                adjList[i].push_back(numCircles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                adjList[numCircles + 3].push_back(i);\n                adjList[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(adjList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); \n        isBlocked = max(isBlocked, bfs(adjList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); \n        return !isBlocked;\n    }\n};\n",
    "submit_ts": "1722137276",
    "subm_id": "1335759127"
}