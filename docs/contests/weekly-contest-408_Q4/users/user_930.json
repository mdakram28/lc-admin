{
    "username": "Manu-Bharadwaj-BN",
    "submission": "function canReachCorner(width, height, obstacles) {\n    let { sqrt } = Math;\n\n    function performBFS(adjacencyList, startNode, endNode1, endNode2, totalNodes) {\n        let queue = [startNode];\n        let visitedNodes = new Array(totalNodes + 4).fill(0);\n        visitedNodes[startNode] = 1;\n\n        while (queue.length > 0) {\n            let currentNode = queue.shift();\n            for (let adjacentNode of adjacencyList[currentNode]) {\n                if (!visitedNodes[adjacentNode]) {\n                    queue.push(adjacentNode);\n                    visitedNodes[adjacentNode] = 1;\n                }\n            }\n        }\n        return visitedNodes[endNode1] || visitedNodes[endNode2];\n    }\n\n    let totalCircles = obstacles.length;\n    let adjacencyList = Array.from({ length: totalCircles + 4 }, () => []);\n\n    for (let i = 0; i < totalCircles; i++) {\n        let [centerX, centerY, radius] = obstacles[i];\n        if (centerX <= radius) {\n            adjacencyList[totalCircles].push(i);\n            adjacencyList[i].push(totalCircles);\n        }\n        if (width - centerX <= radius) {\n            adjacencyList[totalCircles + 2].push(i);\n            adjacencyList[i].push(totalCircles + 2);\n        }\n        if (centerY <= radius) {\n            adjacencyList[totalCircles + 1].push(i);\n            adjacencyList[i].push(totalCircles + 1);\n        }\n        if (height - centerY <= radius) {\n            adjacencyList[totalCircles + 3].push(i);\n            adjacencyList[i].push(totalCircles + 3);\n        }\n        for (let j = i + 1; j < totalCircles; j++) {\n            let [otherCenterX, otherCenterY, otherRadius] = obstacles[j];\n            let distanceBetweenCenters = sqrt((centerX - otherCenterX) ** 2 + (centerY - otherCenterY) ** 2);\n            let combinedRadii = radius + otherRadius;\n            if (combinedRadii >= distanceBetweenCenters) {\n                adjacencyList[i].push(j);\n                adjacencyList[j].push(i);\n            }\n        }\n    }\n\n    let isPathBlocked = 0;\n    isPathBlocked = Math.max(isPathBlocked, performBFS(adjacencyList, totalCircles, totalCircles + 1, totalCircles + 2, totalCircles + 4)); // Check for bottom-left corner\n    isPathBlocked = Math.max(isPathBlocked, performBFS(adjacencyList, totalCircles + 3, totalCircles + 2, totalCircles + 1, totalCircles + 4)); // Check for top-right corner\n\n    return isPathBlocked === 0;\n}\n\n",
    "submit_ts": "1722138692",
    "subm_id": "1335797217"
}