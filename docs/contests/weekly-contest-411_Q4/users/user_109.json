{
    "username": "Adoring Bhabha",
    "submission": "class BIT:\n    def __init__(self, nums):\n        self.c = (len(nums) + 1) * [0]\n        for i, n in enumerate(nums):\n            self.update(i, n)\n        # print(self.c)\n\n\n    def update(self, idx, x):\n        idx += 1\n        while idx < len(self.c):\n            self.c[idx] += x\n            idx += idx & (-idx)\n\n\n    def query(self, i, j):\n        # print('query', i, j)\n        if i != 0:\n            return self.query(0, j) - self.query(0, i - 1)\n\n        j += 1\n        res = 0\n        while j:\n            res += self.c[j]\n            j -= j & (-j)\n        # print('query', i, j ,res)\n        return res\n\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        end_record = []\n        n = len(s)\n        end = -1\n        cnt = [0, 0]\n        for start in range(n):\n            while end + 1 < n and (cnt[int(s[end + 1])] + 1 <= k or cnt[1 - int(s[end + 1])] <= k):\n                end += 1\n                cnt[int(s[end])] += 1\n            end_record.append(end)\n            cnt[int(s[start])] -= 1\n\n        print(end_record)\n\n        bit = BIT(end_record)\n\n        res = []\n        for i, j in queries:\n            idx = bisect.bisect_left(end_record, j)\n            cur_res = 0\n            # print(i, j, idx)\n            idx = max(idx, i)\n            if idx <= j:\n                cur_res += (j - idx + 2) * (j - idx + 1) // 2\n                # print(cur_res)\n            if i <= idx - 1:\n                cur_res += bit.query(i, idx - 1) - (idx - i) * (i + idx - 3) // 2\n                # print(bit.query(i, idx - 1))\n                # print(cur_res)\n            res.append(cur_res)\n\n        return res\n\n\n",
    "submit_ts": "1723953092",
    "subm_id": "556415485"
}