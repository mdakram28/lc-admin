{
    "username": "ProfessorWolf_1",
    "submission": "class Solution {\npublic:\n    bool solve(int width, int height, vector<vector<int>>& circles) {\n        \n    int numCircles = circles.size();\n    vector<vector<int>> graph(numCircles + 4);\n    for (int i = 0; i < numCircles; i++) {\n        if (circles[i][0] <= circles[i][2]) {\n            graph[numCircles].push_back(i);\n            graph[i].push_back(numCircles);\n        }\n        if (width - circles[i][0] <= circles[i][2]) {  \n            graph[numCircles + 2].push_back(i);\n            graph[i].push_back(numCircles + 2);\n        }\n        if (circles[i][1] <= circles[i][2]) {            \n            graph[numCircles + 1].push_back(i);            \n            graph[i].push_back(numCircles + 1);\n        }\n        if (height - circles[i][1] <= circles[i][2]) {           \n            graph[numCircles + 3].push_back(i);            \n            graph[i].push_back(numCircles + 3);\n        }\n        for (int j = i + 1; j < numCircles; ++j) {            \n            double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));            \n            int radiusSum = circles[i][2] + circles[j][2];            \n            if (radiusSum >= distance) {                \n                graph[i].push_back(j);\n                graph[j].push_back(i);\n            }\n        }\n    }\n    int blocked = 0;    \n    blocked = max(blocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));    \n    blocked = max(blocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));     \n    return blocked == 0;\n}\n    int bfs(vector<vector<int>>& graph, int start, int target1, int target2, int numNodes) {\n        queue<int> q;\n        vector<bool> visited(numNodes + 4, false);\n        q.push(start);\n        visited[start] = true;\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n            for (int neighbor : graph[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        return (visited[target1] || visited[target2] ? 1 : 0);\n    }\n    bool canReachCorner(int width, int height, vector<vector<int>>& circles) {\n        return solve(width, height, circles);\n    }\n};",
    "submit_ts": "1722138057",
    "subm_id": "1335780983"
}