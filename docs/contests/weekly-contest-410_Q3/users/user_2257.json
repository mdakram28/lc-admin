{
    "username": "dxOZMk6NYV",
    "submission": "#define ll long long int \nclass Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n          int n = nums.size();\n        memoTable.resize(n, vector<vector<ll>>(51, vector<ll>(51, -1)));\n\n        // Initiate the recursive pair calculation\n        return computePairs(0, 0, nums[0], nums);\n    }\n\nprivate:\n    vector<vector<vector<ll>>> memoTable;\n    const ll MOD = 1e9 + 7;\n\n    ll computePairs(int currentIndex, int prevVal1, int prevVal2, const vector<int>& nums) {\n        if (currentIndex >= nums.size()) return 1;\n\n        if (memoTable[currentIndex][prevVal1][prevVal2] != -1) return memoTable[currentIndex][prevVal1][prevVal2];\n\n        ll totalWays = 0;\n        int targetSum = nums[currentIndex];\n\n        // Iterate over possible values for arr1 and arr2\n        int arr1Val = prevVal1;\n        while (arr1Val <= targetSum) {\n            int arr2Val = prevVal2;\n            while (arr2Val >= 0) {\n                // Validate if the pair satisfies the sum condition\n                if (arr1Val + arr2Val == targetSum) {\n                    totalWays = (totalWays + computePairs(currentIndex + 1, arr1Val, arr2Val, nums)) % MOD;\n                }\n                --arr2Val;\n            }\n            ++arr1Val;\n        }\n\n        memoTable[currentIndex][prevVal1][prevVal2] = totalWays;\n        return totalWays;\n    }\n};",
    "submit_ts": "1723347122",
    "subm_id": "1351592375"
}