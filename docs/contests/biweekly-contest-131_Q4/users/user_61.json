{
    "username": "mayj-u",
    "submission": "struct Node {\n    Node* left;\n    Node* right;\n    int num = 0;\n    int minNum;\n    int maxNum;\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> s;\n        Node* root = new Node();\n        int maxNum = 0;\n        for(auto& q : queries) {\n            maxNum = max(maxNum,q[1]);\n        }\n        root->minNum = 0;\n        root->maxNum = maxNum;\n        add(root,maxNum,maxNum);\n        add(root,0,0);\n        vector<bool> result;\n        s.emplace(maxNum);\n        s.emplace(0);\n        for(auto& q : queries) {\n            if(q[0] == 1) {\n                auto iter = s.lower_bound(q[1]);\n                remove(root,*iter);\n                add(root,*iter - q[1],*iter);\n                if(iter != s.begin()) {\n                    --iter;\n                    add(root,q[1] - *iter,q[1]);\n                }\n                s.emplace(q[1]);\n            } else {\n                if(q[2] > q[1]) {\n                   result.emplace_back(false);\n                    continue;\n                }\n                auto iter = s.lower_bound(q[1]);\n                --iter;\n                if(q[1] - *iter >= q[2]) {\n                    result.emplace_back(true);\n                    continue;\n                }\n                auto num = find(root,*iter);\n                result.emplace_back(num >= q[2]);\n            }\n        }\n        return result;\n    }\n    \n    void add(Node* node,int num,int index) {\n        if(node->minNum == node->maxNum) {\n            node->num = num;\n            return;\n        }\n        node->num = max(node->num,num);\n        int mid = (node->minNum + node->maxNum) / 2;\n        if(index <= mid) {\n            if(node->left == nullptr) {\n                node->left = new Node();\n                node->left->minNum = node->minNum;\n                node->left->maxNum = mid;\n            }\n            add(node->left,num,index);\n        } else {\n            if(node->right == nullptr) {\n                node->right = new Node();\n                node->right->minNum = mid + 1;\n                node->right->maxNum = node->maxNum;\n            }\n            add(node->right,num,index);\n        }\n    }\n    \n    void remove(Node* node,int index) {\n        if(node->minNum == node->maxNum) {\n            node->num = 0;\n            return;\n        }\n        int mid = (node->minNum + node->maxNum) / 2;\n        if(index <= mid) {\n            remove(node->left,index);\n        } else {\n            remove(node->right,index);\n        }\n        node->num = 0;\n        if(node->left != nullptr) {\n            node->num = max(node->num,node->left->num);\n        }\n        if(node->right != nullptr) {\n            node->num = max(node->num,node->right->num);\n        }\n    }\n    \n    int find(Node* node,int index) {\n        if(node->minNum == node->maxNum) {\n            return node->num;\n        }\n        if(index >= node->maxNum) {\n            return node->num;\n        }\n        int mid = (node->minNum + node->maxNum) / 2;\n        int result = 0;\n        if(node->left != nullptr) {\n            result = max(result,find(node->left,index));\n        }\n        if(index > mid && node->right != nullptr) {\n            result = max(result,find(node->right,index));\n        }\n        return result;\n    }\n};",
    "submit_ts": "1716649470",
    "subm_id": "534766702"
}