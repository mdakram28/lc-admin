{
    "username": "uday",
    "submission": "class Solution {\n    fun maximumValueSum(board: Array<IntArray>): Long {\n        val m = board.size\n        val n = board[0].size\n        var maxSum = Long.MIN_VALUE\n        val bestValues = Array(m) { LongArray(3) { Long.MIN_VALUE } }\n        val bestColumns = Array(m) { IntArray(3) { -1 } }\n\n        for (i in board.indices) {\n            val colValues = board[i].mapIndexed { j, value -> value to j }\n            colValues.sortedByDescending { it.first }.take(3).forEachIndexed { k, (value, col) ->\n                bestValues[i][k] = value.toLong()\n                bestColumns[i][k] = col\n            }\n        }\n\n        for (r1 in 0 until m) {\n            for (r2 in r1 + 1 until m) {\n                for (r3 in r2 + 1 until m) {\n                    for (i in 0 until 3) {\n                        for (j in 0 until 3) {\n                            if (bestColumns[r2][j] == bestColumns[r1][i]) continue\n                            for (k in 0 until 3) {\n                                if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue\n\n                                val currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k]\n                                maxSum = maxOf(maxSum, currentSum)\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum\n    }\n}\n",
    "submit_ts": "1723910359",
    "subm_id": "1359227381"
}