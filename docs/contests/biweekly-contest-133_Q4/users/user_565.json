{
    "username": "kedardeshmukh2003",
    "submission": "class Solution {\n    private static final int MODULO = 1000000007;\n    private static final int MAX_INVERSIONS = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n\n        Map<Integer, Integer> requirementMap = new HashMap<>();\n        for (int[] req : requirements) {\n            requirementMap.put(req[0] + 1, req[1]);\n        }\n\n        long[][] permutationCounts = new long[n + 1][MAX_INVERSIONS + 1];\n        permutationCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= MAX_INVERSIONS; inversions++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int previousInversions = inversions - newPos;\n                    if (previousInversions >= 0) {\n                        permutationCounts[length][inversions] = (permutationCounts[length][inversions] \n                                                                  + permutationCounts[length - 1][previousInversions]) % MODULO;\n                    }\n                }\n            }\n\n            if (requirementMap.containsKey(length)) {\n                int targetInversions = requirementMap.get(length);\n                for (int inversions = 0; inversions <= MAX_INVERSIONS; inversions++) {\n                    if (inversions != targetInversions) {\n                        permutationCounts[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : permutationCounts[n]) {\n            result = (result + count) % MODULO;\n        }\n\n        return (int) result; \n    }\n}\n",
    "submit_ts": 1719070369.0
}