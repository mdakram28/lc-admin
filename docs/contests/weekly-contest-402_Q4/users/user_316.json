{
    "username": "xyz_xyz_xyz_xyz",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n        vector<int> tree;\n        vector<int> nums;\n        int n;\n\n        bool isPeak(int i) {\n            if (i <= 0 || i >= n - 1) return false;\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        }\n\n        void buildTree(int node, int start, int end) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                buildTree(2 * node + 1, start, mid);\n                buildTree(2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        void updateTree(int node, int start, int end, int idx, int val) {\n            if (start == end) {\n                nums[idx] = val;\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    updateTree(2 * node + 1, start, mid, idx, val);\n                } else {\n                    updateTree(2 * node + 2, mid + 1, end, idx, val);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int queryTree(int node, int start, int end, int l, int r) {\n            if (r < start || end < l) {\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = queryTree(2 * node + 1, start, mid, l, r);\n            int rightQuery = queryTree(2 * node + 2, mid + 1, end, l, r);\n            return leftQuery + rightQuery;\n        }\n\n    public:\n        SegmentTree(vector<int>& nums) : nums(nums) {\n            n = nums.size();\n            tree.resize(4 * n, 0);\n            buildTree(0, 0, n - 1);\n        }\n\n        void update(int idx, int val) {\n            updateTree(0, 0, n - 1, idx, val);\n        }\n\n        int query(int l, int r) {\n            return queryTree(0, 0, n - 1, l + 1, r - 1);\n        }\n    };\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segmentTree(nums);\n        vector<int> answer;\n        int n = nums.size();\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1], ri = query[2];\n                answer.push_back(segmentTree.query(li, ri));\n            } else if (query[0] == 2) {\n                int index = query[1], val = query[2];\n                segmentTree.update(index, val);\n                if(index+1<n)segmentTree.update(index+1, nums[index+1]);\n                if(index-1>=0)segmentTree.update(index-1, nums[index-1]);\n                nums[index] = val;\n            }\n        }\n\n        return answer;        \n    }\n};",
    "submit_ts": 1718506841.0
}