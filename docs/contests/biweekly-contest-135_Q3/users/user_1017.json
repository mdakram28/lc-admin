{
    "username": "ekagrasinha",
    "submission": "class Solution {\nprivate:\n    struct PairData {\n        int delta;\n        int maxPossible;\n    };\n\n    vector<PairData> calculatePairData(const vector<int>& sequence, int limit) {\n        vector<PairData> result;\n        int n = sequence.size();\n        for (int i = 0; i < n / 2; ++i) {\n            int left = sequence[i], right = sequence[n - 1 - i];\n            int delta = abs(left - right);\n            int maxPossible = max({left, right, limit - left, limit - right});\n            result.push_back({delta, maxPossible});\n        }\n        return result;\n    }\n\n    int computeMinChanges(const vector<PairData>& pairData) {\n        map<int, vector<int>> deltaGroups;\n        vector<int> maxPossibles;\n\n        for (const auto& data : pairData) {\n            deltaGroups[data.delta].push_back(data.maxPossible);\n            maxPossibles.push_back(data.maxPossible);\n        }\n\n        sort(maxPossibles.begin(), maxPossibles.end());\n        int minChanges = pairData.size() * 2;\n\n        for (const auto& [delta, group] : deltaGroups) {\n            int changes = lower_bound(maxPossibles.begin(), maxPossibles.end(), delta) - maxPossibles.begin();\n            changes = changes * 2 + (pairData.size() - changes);\n            \n            for (int maxPossible : group) {\n                changes -= (maxPossible < delta) ? 2 : 1;\n            }\n\n            minChanges = min(minChanges, changes);\n        }\n\n        return minChanges;\n    }\n\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        auto pairData = calculatePairData(nums, k);\n        return computeMinChanges(pairData);\n    }\n};",
    "submit_ts": "1721489060",
    "subm_id": "1327441634"
}