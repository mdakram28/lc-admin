{
    "username": "wzy19",
    "submission": "class Solution {\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        const int n = grid.size();\n        if (n == 1) {\n            return 0;\n        }\n        if (n == 2) {\n            return max((long long)grid[0][0] + (long long)grid[1][0], (long long)grid[0][1] + (long long)grid[1][1]);\n        }\n        long long ans =0;\n        long long f[3][102][102];\n        for (int i = 0; i <= n; ++i) {\n            for (int j= 0; j <= n; ++j) {\n                if (i == j) {\n                    f[1][i][j] = 0;\n                } else if (i > j) {\n                    f[1][i][j] = f[1][i-1][j] + (long long)grid[i-1][1];\n                } else if (i < j) {\n                    f[1][i][j] = f[1][i][j-1] + (long long)grid[j-1][0];\n                }\n                // cout << i <<\" \"<< j << \" :\" << f[1][i][j] << endl;\n            }\n        } \n        int now = 2;\n        int prev = 1;\n        for (int k = 2; k < n; ++k ) {\n            // cout << \"now is \" << k << endl;\n            now = k % 3;\n            prev = (k + 2) % 3;\n            for (int i = 0; i <= n; ++i) {\n                long long max_col = 0;\n                for (int j = 0; j <= n; ++j) {\n                    if (f[prev][j][i] > max_col) {\n                        max_col = f[prev][j][i];\n                    }\n                }\n                f[now][i][i] = max_col;\n               // printf(\"(%d, %d):{%ld}\\n\", i, i, f[now][i][i]);\n                for (int j = i - 1; j >= 0; --j) {\n                    f[now][i][j] = f[now][i][j+1] + (long long)grid[j][k];\n                }\n                for (int j = i + 1; j <= n; ++j) {\n                    long long tmp_sum = 0;\n                    f[now][i][j] = 0;\n                    for (int m = j; m > i; --m) {\n                        f[now][i][j] = max(f[now][i][j], f[prev][m][i] + tmp_sum);\n                        tmp_sum += (long long)grid[m-1][k-1];\n                    }\n                    for (int m = i; m >= 0; --m) {\n                        f[now][i][j] = max(f[now][i][j], f[prev][m][i] + tmp_sum);\n                    }\n                    for (int m = j + 1; m <= n; ++m) {\n                        f[now][i][j] = max(f[now][i][j], f[prev][m][i]);\n                    }\n                }\n            }\n        }\n\n        for (int i = 0; i <=n; ++i) {\n            for (int j = 0; j <= n; ++j) {\n                ans = max(ans, f[now][i][j]);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1721490900",
    "subm_id": "548324704"
}