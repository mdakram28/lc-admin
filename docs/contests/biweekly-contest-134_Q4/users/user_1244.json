{
    "username": "user9539",
    "submission": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n        val tree = SegmentTree(nums.size)\n        tree.build(nums)\n       // println(tree.tree.toList())\n        fun getAnd(l: Int, r: Int): Int {\n            return tree.query(l, r)\n        }\n        \n        fun findLeft(i: Int): Int {\n            var l = i\n            var r = nums.size-1\n            while (l < r) {\n                val mid = (l+r)/2\n                if (getAnd(i, mid) <= k) {\n                    r = mid\n                } else {\n                    l = mid+1\n                }\n            }\n            return l\n        }\n        fun findRight(i: Int): Int {\n            var l = i\n            var r = nums.size-1\n            while (l < r) {\n                val mid = (l+r+1)/2\n                if (getAnd(i, mid) >= k) {\n                    l = mid\n                } else {\n                    r = mid-1\n                }\n            }\n            return l\n        }\n        var ans = 0L\n        for (i in nums.indices) {\n            val left = findLeft(i)\n            val right = findRight(i)\n            //println(\"i=$i, left=$left, right=$right\")\n          //  println(\"getAnd(i, left) ${getAnd(i, left)}\")\n           // println(\"getAnd(i, right) ${getAnd(i, right)}\")\n            if (getAnd(i, left) == k && getAnd(i, right) == k) {\n                //val result = ((left-i+1)+(right-i+1))*(right-left+1)/2\n                val result = (right-left+1)\n              //  println(\"result = $result\")\n                ans += result\n            }\n        }\n        return ans\n    }\n}\n\nclass SegmentTree(private val n: Int) {\n     val tree = IntArray(4 * n) { 0 }\n\n    fun build(arr: IntArray) {\n        buildTree(arr, 0, n - 1, 0)\n    }\n\n    private fun buildTree(arr: IntArray, start: Int, end: Int, node: Int) {\n        if (start == end) {\n            tree[node] = arr[start]\n        } else {\n            val mid = (start + end) / 2\n            buildTree(arr, start, mid, 2 * node + 1)\n            buildTree(arr, mid + 1, end, 2 * node + 2)\n            tree[node] = tree[2 * node + 1] and tree[2 * node + 2]\n        }\n    }\n\n    fun update(index: Int, value: Int) {\n        updateTree(0, n - 1, index, value, 0)\n    }\n\n    private fun updateTree(start: Int, end: Int, index: Int, value: Int, node: Int) {\n        if (start == end) {\n            tree[node] = value\n        } else {\n            val mid = (start + end) / 2\n            if (index <= mid) {\n                updateTree(start, mid, index, value, 2 * node + 1)\n            } else {\n                updateTree(mid + 1, end, index, value, 2 * node + 2)\n            }\n            tree[node] = tree[2 * node + 1] and tree[2 * node + 2]\n        }\n    }\n\n    fun query(left: Int, right: Int): Int {\n        return queryTree(0, n - 1, left, right, 0)\n    }\n\n    private fun queryTree(start: Int, end: Int, left: Int, right: Int, node: Int): Int {\n        if (left > end || right < start) {\n            return -1\n        }\n        if (left <= start && right >= end) {\n            return tree[node]\n        }\n        val mid = (start + end) / 2\n        val leftQuery = queryTree(start, mid, left, right, 2 * node + 1)\n        val rightQuery = queryTree(mid + 1, end, left, right, 2 * node + 2)\n\n        return if (leftQuery == -1 ) rightQuery\n        else if (rightQuery == -1) leftQuery\n        else rightQuery and leftQuery\n    }\n}",
    "submit_ts": "1720280557",
    "subm_id": "1311793852"
}