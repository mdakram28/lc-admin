{
    "username": "modelflat",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n\n        horizontalCut.sort(key=lambda x: -x)\n        verticalCut.sort(key=lambda x: -x)\n\n        arr = []\n        p1, p2 = 0, 0\n        while p1 < len(horizontalCut) or p2 < len(verticalCut):\n            if p1 == len(horizontalCut):\n                arr.append((p1 + 1) * verticalCut[p2])\n                p2 += 1\n            elif p2 == len(verticalCut):\n                arr.append((p2 + 1) * horizontalCut[p1])\n                p1 += 1\n            elif horizontalCut[p1] > verticalCut[p2]:\n                arr.append((p2 + 1) * horizontalCut[p1])\n                p1 += 1\n            elif horizontalCut[p1] < verticalCut[p2]:\n                arr.append((p1 + 1) * verticalCut[p2])\n                p2 += 1\n            elif m > n:\n                arr.append((p2 + 1) * horizontalCut[p1])\n                p1 += 1\n            else:\n                arr.append((p1 + 1) * verticalCut[p2])\n                p2 += 1\n\n        return sum(arr)\n\n        # @cache\n        # def f(v, x, h, y):\n        #     if h == len(horizontalCut) and v == len(verticalCut):\n        #         return 0\n            \n        #     if h == len(horizontalCut):\n        #         return x * verticalCut[v] + f(v + 1, x, h, y + 1)\n\n        #     if v == len(verticalCut):\n        #         return y * horizontalCut[h] + f(v, x + 1, h + 1, y)\n\n        #     return min(\n        #         x * verticalCut[v] + f(v + 1, x, h, y + 1),\n        #         y * horizontalCut[h] + f(v, x + 1, h + 1, y),\n        #     )\n\n        return \n",
    "submit_ts": "1720926261",
    "subm_id": "1320280834"
}