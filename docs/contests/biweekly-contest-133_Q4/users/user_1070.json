{
    "username": "shubhamthrills",
    "submission": "class Solution:\n    ModulesOperation,SecondLimit = 10**9 + 7,400\n    \n    def numberOfPermutations(self, n, requirements):\n        TrackerFinal = {req[0] + 1: req[1] for req in requirements}\n        Tracker = [[0] * (self.SecondLimit + 1) for _ in range(n + 1)]\n        Counter,CounterTracker,Tracker[0][0] = 0 ,1,1\n        while CounterTracker <= n:\n            TempLimit, Counter = 0, Counter + 1\n            while TempLimit <= self.SecondLimit:\n                NewPointer = 0\n                while NewPointer < CounterTracker:\n                    LastLimit = TempLimit - NewPointer\n                    if LastLimit >= 0:\n                        Tracker[CounterTracker][TempLimit] = (Tracker[CounterTracker][TempLimit] + Tracker[CounterTracker - 1][LastLimit]) % self.ModulesOperation\n                    NewPointer += 1\n                TempLimit += 1\n            if CounterTracker in TrackerFinal:\n                requiredInversions = TrackerFinal[CounterTracker]\n                TempLimit = 0\n                while self.SecondLimit >= TempLimit:\n                    if requiredInversions != TempLimit:\n                        Tracker[CounterTracker][TempLimit] = 0\n                    TempLimit = 1 + TempLimit\n            CounterTracker = 1 + CounterTracker\n        FinalResult, TempLimit = 0, 0\n        while TempLimit <= self.SecondLimit:\n            FinalResult = (FinalResult + Tracker[n][TempLimit]) % self.ModulesOperation\n            TempLimit = 1 + TempLimit\n        if (Counter):\n            Counter = FinalResult\n        else:\n            Counter = 0\n        return Counter\n",
    "submit_ts": 1719071649.0
}