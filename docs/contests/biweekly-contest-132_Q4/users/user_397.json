{
    "username": "Naman_21112001",
    "submission": "class Solution {\npublic:\n    \n      bool cmp(int &a , int &b){\n        return a>b;\n    }\n    \n    int maximumLength(vector<int>& nums, int k) {\n        int N = nums.size() , overallMaxLength = 1;\n        vector<vector<int>> dp(N, vector<int>(k + 1, 1));\n         \n        vector<unordered_map<int, int>> elementToMaxLenMap(k + 1);\n        vector<int> maxLenWithDistinct(k + 1, -1);\n        \n        \n//         for (int i = 1; i < nums.size(); i++) \n//         {   \n//             bool parity;\n//             for (int j = 0; j <= k; j++) \n//             {   \n//                 long long sum = 0;\n//                 for (int m = 0;m<i; m++) \n//                 {   \n//                     if (nums[m] == nums[i])dp[i][j] = max(dp[i][j],1+dp[m][j]);\n//                     else if (j > 0) {\n//                         flag = true;\n                        \n//                         dp[i][j] = max(dp[i][j], 1+dp[m][j - 1]);\n//                         sum++;\n//                     }\n//                 }\n//                 ans_max = max( dp[i][j],ans_max);\n//                 if(ans_max>dp[i][j])flag = false;\n//             }\n//         }\n        bool include , maxinclude , exclude ;\n        // init\n        include = maxinclude = exclude = false;\n        for (int i = 0; i < N; ++i)\n        {   \n            int ans = 0;\n            for (int j = 0; j <= k; j++) \n            {\n                for (int l = 0; l < j; l++) dp[i][j] = max(1+maxLenWithDistinct[l] , dp[i][j]);\n                \n                if (elementToMaxLenMap[j].find(nums[i]) != elementToMaxLenMap[j].end()) {\n                    dp[i][j] = max(dp[i][j], 1+elementToMaxLenMap[j][nums[i]]);\n                    ans++;\n                }\n                if(ans%2 == 0)ans = 0;\n                overallMaxLength = max(overallMaxLength, dp[i][j]);\n            }\n            \n            bool take = false;\n            for (int j = 0; j <= k; ++j) {\n                maxLenWithDistinct[j] = max(maxLenWithDistinct[j], dp[i][j]);\n                elementToMaxLenMap[j][nums[i]] = max(elementToMaxLenMap[j][nums[i]],dp[i][j]);\n                take = false;\n            }\n        }\n\n        return overallMaxLength;\n    }\n};",
    "submit_ts": 1717862367.0
}