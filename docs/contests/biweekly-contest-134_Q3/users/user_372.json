{
    "username": "12121-b",
    "submission": "class Fenwick {\npublic:\n    explicit Fenwick(int n): sums_(n + 1) {}\n\n    int lowbit(int x) {\n        return x&-x;\n    }\n\n    void add(int idx, int val) {\n        for(++idx; idx < sums_.size(); idx += lowbit(idx)) {\n            sums_[idx] += val;\n        }\n    }\n\n    int query(int idx) {\n        int ans = 0;\n        for(++idx; idx > 0; idx -= lowbit(idx)) {\n            ans += sums_[idx];\n        }\n        return ans;\n    }\n\n    int query(int left, int right) {\n        return query(right) - query(left - 1);\n    }\n\n    int operator[](int x) {\n        return query(x);\n    }\n\nprivate:\n    vector<int> sums_;\n};\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        for(int i = 0; i < k - 1; i++) {\n            colors.push_back(colors[i]);\n        }\n        int m = colors.size();\n        Fenwick bit(m);\n        bit.add(0, 1);\n        for(int i = 1; i < m; i++) {\n            if(colors[i] != colors[i - 1]) {\n                bit.add(i, 1);\n            }\n        }\n        int ans = 0;\n        for(int r = k - 1; r < m; r++) {\n            int l = r - k + 1;\n            if(bit.query(l, r) == k || (bit.query(l, r) == k - 1 && bit.query(l, l) == 0)) {\n                ans++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278965",
    "subm_id": "544565291"
}