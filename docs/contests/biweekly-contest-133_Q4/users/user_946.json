{
    "username": "chayansurana3",
    "submission": "\nclass Solution {\nprivate:\n    static const int MODULO = 1e9 + 7;\n\n    void modifyDP(vector<vector<long>>& table, int currentLength, int maxInversion) {\n        for (int currentInversion = 0; currentInversion <= maxInversion; ++currentInversion) {\n            for (int position = 0; position < currentLength; ++position) {\n                int previousInversion = currentInversion - position;\n                if (previousInversion >= 0) {\n                    table[currentLength][currentInversion] = \n                        (table[currentLength][currentInversion] + table[currentLength - 1][previousInversion]) % MODULO;\n                }\n            }\n        }\n    }\n\npublic:\n    int numberOfPermutations(int size, vector<vector<int>>& conditions) {\n        long long res = 0;\n        unordered_map<int, int> conditionMap;\n        for (const auto& condition : conditions) {\n            conditionMap[condition[0] + 1] = condition[1];\n        }\n        vector<vector<long>> dpTable(size + 1, vector<long>(405 + 1, 0));\n        dpTable[0][0] = 1;\n        for (int length = 1; length <= size; ++length) {\n            modifyDP(dpTable, length, 405);\n            if (conditionMap.find(length) != conditionMap.end()) {\n                int requiredInversion = conditionMap[length];\n                for (int currentInversion = 0; currentInversion <= 405; ++currentInversion) {\n                    if (currentInversion != requiredInversion) dpTable[length][currentInversion] = 0;\n                }\n            }\n        }\n        for (auto count : dpTable[size]) res = (res + count) % MODULO;\n        return static_cast<int>(res);\n    }\n};",
    "submit_ts": 1719071320.0
}