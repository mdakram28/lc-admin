{
    "username": "SagarMondal",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        vector<vector<long long>> dp(n + 1, vector<long long>(400 + 1, 0));\n        long long result = 0;\n        unordered_map<int, int> mp;\n        for (const auto& req : requirements) {\n            mp[req[0] + 1] = req[1];\n        }     \n        dp[0][0] = 1;\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % 1000000007;\n                    }\n                }\n            }\n            if (mp.count(len) > 0) {\n                int inv = mp[len];\n                for (int j = 0; j <= 400; j++) {\n                    if (j != inv) {\n                        dp[len][j] = 0;\n                    }\n                }\n            }\n        }\n        for (int inv = 0; inv <= 400; inv++) {\n            result = (result + dp[n][inv]) % 1000000007;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719071744.0
}