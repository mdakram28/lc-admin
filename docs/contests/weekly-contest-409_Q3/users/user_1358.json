{
    "username": "Rishabh_0310",
    "submission": "\nstatic auto _ = [](){\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return nullptr;\n}();\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> distances = initializeDistances(n);\n        set<int> positions = initializePositions(n);\n        return processQueries(queries, positions);\n    }\n\nprivate:\n    vector<int> initializeDistances(int n) {\n        vector<int> distances(n, 0);\n        int i = 1;\n        while (i < n) {\n            distances[i] = distances[i - 1] + 1;\n            ++i;\n        }\n        return distances;\n    }\n\n    set<int> initializePositions(int n) {\n        set<int> positions;\n        int i = 0;\n        while (i < n) {\n            positions.insert(i);\n            ++i;\n        }\n        return positions;\n    }\n\n    vector<int> processQueries(const vector<vector<int>>& queries, set<int>& positions) {\n        vector<int> result;\n        for (const auto& query : queries) {\n            int l = query[0];\n            int rt = query[1];\n            \n            // Use a do-while loop to find the lower bound\n            auto lowerBoundIt = positions.lower_bound(l + 1);\n            auto upperBoundIt = positions.lower_bound(rt);\n\n            // Use a while loop to erase elements\n            while (lowerBoundIt != upperBoundIt) {\n                lowerBoundIt = positions.erase(lowerBoundIt);\n            }\n\n            result.push_back(positions.size() - 1);\n        }\n        return result;\n    }\n};",
    "submit_ts": "1722743533",
    "subm_id": "1343794082"
}