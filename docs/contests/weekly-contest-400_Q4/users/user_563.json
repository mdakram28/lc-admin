{
    "username": "2499370956",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        Integer[] data = new Integer[n];\n        for (int i = 0; i < n; i++) {\n            if (nums[i] == k) {\n                return 0;\n            }\n            data[i] = nums[i];\n        }\n        SegmentTree<Integer> stAnd = new SegmentTree<>(nums.length, 0xFFFFFFFF, (a, b) -> a & b, data);\n        for (int i = 0; i < n; i++) {\n            stAnd.set(i, nums[i]);\n        }\n        int out = Integer.MAX_VALUE;\n        for (int i = n - 1; i >= 0; i--) {\n            if (stAnd.get(i, n) - k >= out) {\n                continue;\n            }\n            if (k - nums[i] >= out) {\n                continue;\n            }\n            int low = i + 1;\n            int high = n;\n            while (low < high) {\n                int mid = (low + high) / 2;\n                int value = stAnd.get(i, mid);\n                out = Math.min(out, Math.abs(k - value));\n                if (value > k) {\n                    low = mid + 1;\n                } else if (value < k) {\n                    high = mid - 1;\n                } else {\n                    return 0;\n                }\n            }\n            int value = stAnd.get(i, low);\n            out = Math.min(out, Math.abs(k - value));\n        }\n        return out;\n    }\n\n    public class SegmentTree<T> {\n        private int size;\n        private T defaultValue;\n        private BiFunction<T, T, T> mergeFunction;\n        private Node<T> root;\n        private T[] data;\n\n        public SegmentTree(int size, T defaultValue, BiFunction<T, T, T> mergeFunction) {\n            this.size = size;\n            this.defaultValue = defaultValue;\n            this.mergeFunction = mergeFunction;\n            this.root = create(0, size);\n        }\n\n        public SegmentTree(int size, T defaultValue, BiFunction<T, T, T> mergeFunction, T[] data) {\n            this.size = size;\n            this.defaultValue = defaultValue;\n            this.mergeFunction = mergeFunction;\n            this.data = data;\n            this.root = create(0, size);\n        }\n\n        public void set(int index, T value) {\n            set(this.root, index, value);\n        }\n\n        public T get(int start, int end) {\n            return get(this.root, start, end);\n        }\n\n        private Node create(int start, int end) {\n            Node<T> node = new Node<>();\n            node.start = start;\n            node.end = end;\n            if (end - start > 1) {\n                int mid = (end + start) / 2;\n                node.left = create(start, mid);\n                node.right = create(mid, end);\n                node.value = this.mergeFunction.apply(node.left.value, node.right.value);\n            } else {\n                node.value = this.data != null ? this.data[start] : this.defaultValue;\n            }\n            return node;\n        }\n\n        private T set(Node<T> node, int index, T value) {\n            if (index >= node.start && index < node.end) {\n                if (node.end - node.start > 1) {\n                    node.value = this.mergeFunction.apply(set(node.left, index, value), set(node.right, index, value));\n                } else {\n                    node.value = value;\n                }\n            }\n            return node.value;\n        }\n\n        private T get(Node<T> node, int start, int end) {\n            if (node.start >= start && node.end <= end) {\n                return node.value;\n            }\n            if (node.start >= end || node.end <= start) {\n                return this.defaultValue;\n            }\n            return this.mergeFunction.apply(get(node.left, start, end), get(node.right, start, end));\n        }\n\n        class Node<T> {\n            int start;\n            int end;\n            T value;\n            Node<T> left;\n            Node<T> right;\n        }\n\n    }\n}",
    "submit_ts": "1717298548",
    "subm_id": "1274782876"
}