{
    "username": "revector",
    "submission": "class Solution:\n  def getPointCost(self, grid: List[List[int]], r: int, c: int) -> int:\n    row_n, col_n = len(grid), len(grid[0])\n    rx, cx = row_n - 1 - r, col_n - 1 - c\n    points = (grid[r][c], grid[rx][c], grid[r][cx], grid[rx][cx])\n    s = sum(points)\n    cost = min(s, 4 - s)\n    return cost\n\n  def getMiddleCost(self, line: List[int]) -> (int, int):\n    n = len(line)\n    if n % 2 == 1:\n      line = line[:n//2] + line[n//2+1:]\n      n -= 1\n    total = sum(line)\n    half1, half2 = line[:n//2], line[n//2:][::-1]\n    unpaired_cnt = sum(1 for n1, n2 in zip(half1, half2) if (n1 + n2) % 2 == 1)\n    return unpaired_cnt, total % 4\n\n  def minFlips(self, grid: List[List[int]]) -> int:\n    row_n, col_n = len(grid), len(grid[0])\n    total_cost = 0\n    for r in range(row_n // 2):\n      for c in range(col_n // 2):\n        total_cost += self.getPointCost(grid, r, c)\n\n    middleRow = grid[row_n // 2]\n    middleCol = [grid[r][col_n // 2] for r in range(row_n)]\n    rcost, rrem, ccost, crem = 0, 0, 0, 0\n    if row_n % 2 == 1:\n      rcost, rrem = self.getMiddleCost(middleRow)\n    if col_n % 2 == 1:\n      ccost, crem = self.getMiddleCost(middleCol)\n    if rcost + ccost > 0:\n      total_cost += rcost + ccost\n    else:\n      total_cost += (rrem + crem) % 4\n\n    if row_n % 2 == 1 and col_n % 2 == 1:\n      total_cost += grid[row_n // 2][col_n // 2]\n\n    return total_cost\n",
    "submit_ts": "1722699113",
    "subm_id": "552274147"
}