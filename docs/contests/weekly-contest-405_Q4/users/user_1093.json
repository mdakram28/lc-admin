{
    "username": "mallick_rajdeep",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> ends; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie(){ \n            root = new TrieNode(); \n        }\n\n        void insert(string& word, int i, int cost){\n            TrieNode* node = root;\n            for(char ch: word){\n                if (!(node->child.count(ch)))   node->child[ch] = new TrieNode();\n                node = node->child[ch];\n            }\n            node->ends.push_back({i, cost});\n        }\n    };\n\n    int n;\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        n = target.size();\n\n        Trie trie;\n        int wlen = words.size();\n        for(int i = 0; i < wlen; i++)  trie.insert(words[i], i, costs[i]);\n        \n\n        vector<int> dp(n+1, 1e9);\n        dp[0] = 0;\n        for(int i = 0; i < n; i++){\n            if(dp[i] == 1e9) continue;\n\n            TrieNode* node = trie.root;\n            for(int j = i; j < n; j++){\n                if (!node->child.count(target[j])) break;\n                node = node->child[target[j]];\n\n                for(auto p: node->ends){\n                    int wi = p.first, wc = p.second;\n                    int len = words[wi].size();\n                    if(i+len <= n)   dp[i+len] = min(dp[i+len], dp[i]+wc);\n                }\n            }\n        }\n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323129",
    "subm_id": "1312368011"
}