{
    "username": "adityabhartichegg",
    "submission": "#include <vector>\n#include <algorithm>\n#include <tuple>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Step 1: Precompute top 3 values for each row\n        vector<vector<pair<int, int>>> rowTop(m);\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < n; ++j) {\n                rowValues.push_back({board[i][j], j});\n            }\n            sort(rowValues.rbegin(), rowValues.rend()); // Sort by value descending\n            if (rowValues.size() > 3) rowValues.resize(3); // Keep only top 3 values\n            rowTop[i] = rowValues;\n        }\n        \n        // Step 2: Precompute top 3 values for each column\n        vector<vector<pair<int, int>>> colTop(n);\n        for (int j = 0; j < n; ++j) {\n            vector<pair<int, int>> colValues;\n            for (int i = 0; i < m; ++i) {\n                colValues.push_back({board[i][j], i});\n            }\n            sort(colValues.rbegin(), colValues.rend()); // Sort by value descending\n            if (colValues.size() > 3) colValues.resize(3); // Keep only top 3 values\n            colTop[j] = colValues;\n        }\n        \n        // Step 3: Find the maximum sum of placing 3 rooks\n        long long maxSum = LLONG_MIN;\n        \n        for (int r1 = 0; r1 < m; ++r1) {\n            for (const auto& [v1, c1] : rowTop[r1]) {\n                for (int r2 = r1 + 1; r2 < m; ++r2) {\n                    for (const auto& [v2, c2] : rowTop[r2]) {\n                        if (c1 == c2) continue; // Columns must be different\n                        for (int r3 = r2 + 1; r3 < m; ++r3) {\n                            for (const auto& [v3, c3] : rowTop[r3]) {\n                                if (c1 == c3 || c2 == c3) continue; // Columns must be different\n                                long long currentSum = (long long)v1 + v2 + v3;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723907157",
    "subm_id": "1359093143"
}