{
    "username": "hakonleung",
    "submission": "class _PriorityQueue {\n    static getChildIdx(idx) {\n        return [(idx << 1) + 1, (idx << 1) + 2]\n    }\n    static getParentIdx(idx) {\n        return (idx - 1) >> 1\n    }\n    constructor(compare = (a, b) => a - b) {\n        this.compare = compare\n        this.pipe = []\n    }\n    swap(i, j) {\n        [this.pipe[i], this.pipe[j]] = [this.pipe[j], this.pipe[i]]\n    }\n    enqueue(element, priority = element) {\n        this.pipe.push({\n            element,\n            priority\n        })\n        let curIdx = this.pipe.length - 1\n        let parentIdx = _PriorityQueue.getParentIdx(curIdx)\n        while (parentIdx >= 0 && this.compare(this.pipe[curIdx].priority, this.pipe[parentIdx].priority) < 0) {\n            this.swap(curIdx, parentIdx)\n            curIdx = parentIdx\n            parentIdx = _PriorityQueue.getParentIdx(curIdx)\n        }\n    }\n    dequeue() {\n        this.swap(0, this.pipe.length - 1)\n        const res = this.pipe.pop()\n        let curIdx = 0\n        let [l, r] = _PriorityQueue.getChildIdx(curIdx)\n        while (l < this.pipe.length) {\n            let minIdx = curIdx\n            if (this.compare(this.pipe[l].priority, this.pipe[minIdx].priority) < 0) {\n                minIdx = l\n            }\n            if (r < this.pipe.length && this.compare(this.pipe[r].priority, this.pipe[minIdx].priority) < 0) {\n                minIdx = r\n            }\n            if (minIdx === curIdx) break\n            this.swap(curIdx, minIdx)\n            curIdx = minIdx;\n            [l, r] = _PriorityQueue.getChildIdx(curIdx)\n        }\n        return res\n    }\n    front() {\n        return this.pipe[0]\n    }\n    isEmpty() {\n        return !this.pipe.length\n    }\n    size() {\n        return this.pipe.length\n    }\n}\n/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar minChanges = function(nums, k) {\n    const abs = []\n    for (let i = 0; i < nums.length / 2; i += 1) {\n        abs.push(Math.abs(nums[i] - nums[nums.length - i - 1]))\n    }\n    const min = new _PriorityQueue(), max = new _PriorityQueue((a, b) => b - a), set = new Set()\n    const idxs = abs.map((_, i) => i).sort((a, b) => abs[b] - abs[a])\n    let ans = Infinity\n    idxs.forEach(id => {\n        min.enqueue(id, Math.min(nums[id], nums[nums.length - id - 1]))\n        max.enqueue(id, Math.max(nums[id], nums[nums.length - id - 1]))\n        set.add(id)\n    })\n    for (let i = 0; i < idxs.length; i += 1) {\n        const id = idxs[i]\n        const x = abs[id]\n        let j = i\n        while (j < idxs.length && abs[idxs[j]] === x) {\n            set.delete(idxs[j])\n            j += 1\n        }\n        while (max.front() && max.front().priority >= x) set.delete(max.dequeue().element)\n        while (min.front() && min.front().priority <= k - x) set.delete(min.dequeue().element)\n        // console.log(i, j, set)\n        ans = Math.min(ans, i + set.size + idxs.length - j)\n        i = j - 1\n    }\n    // console.log(ans)\n    return ans\n};",
    "submit_ts": "1721489229",
    "subm_id": "548317885"
}