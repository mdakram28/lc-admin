{
    "username": "Tussar",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int minCost; // Minimum cost to reach this node\n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n             TrieNode* root = new TrieNode();\n        \n        // Build the Trie from words and costs\n        for (int i = 0; i < words.size(); ++i) {\n            string word = words[i];\n            int cost = costs[i];\n            \n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            \n            // Update minimum cost for the word end node\n            node->minCost = min(node->minCost, cost);\n        }\n        \n        // Dynamic programming array\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Process each position in the target string\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip unreachable positions\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.count(c)) {\n                    node = node->children[c];\n                    if (node->minCost != INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                    }\n                } else {\n                    break; // No further matching possible\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324075",
    "subm_id": "1312390988"
}