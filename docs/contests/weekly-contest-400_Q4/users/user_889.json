{
    "username": "phanthaiduong22",
    "submission": "class Tree {\npublic:\n    vector<int> tree;\n    int n;\n\n    void buildTree(vector<int>& nums, int left, int right, int index) {\n        if (left == right) {\n            tree[index] = nums[left];\n            return;\n        }\n        int mid = left + (right - left) / 2; \n        buildTree(nums, left, mid, 2 * index + 1);\n        buildTree(nums, mid + 1, right, 2 * index + 2);\n        tree[index] = (tree[index * 2 + 1] & tree[index * 2 + 2]);\n    }\n\n    int queryTree(int left, int right, int index, int qleft, int qright) {\n        if (qright < left || qleft > right) {\n            return INT_MAX; \n        }\n        if (qleft <= left && right <= qright) {\n            return tree[index];\n        }\n\n        int mid = left + (right - left) / 2; \n        return queryTree(left, mid, index * 2 + 1, qleft, qright) & queryTree(mid + 1, right, index * 2 + 2, qleft, qright);\n    }\n\n    Tree(vector<int> &nums) {\n        n = nums.size();\n        tree = vector<int>(4 * n);\n        buildTree(nums, 0, n - 1, 0);\n    }\n\n    int rangeAnd(int left, int right) {\n        return queryTree(0, n - 1, 0, left, right);\n    }\n};\n\nclass Solution {\npublic:\n    int n;\n\n    int minimumDifference(vector<int> nums, int k) {\n        int ans = INT_MAX;\n        n = nums.size();\n\n        Tree tree = Tree(nums);\n\n        for (int i = 0; i < n; ++i) {\n            int l = i - 1, r = n - 1;\n            while (r - l > 1) {\n                int m = l + (r - l) / 2;\n                if (tree.rangeAnd(i, m) >= k) {\n                    l = m;\n                } else {\n                    r = m;\n                }\n            }\n\n            if (l != -1) {\n                ans = min(ans, abs(k - tree.rangeAnd(i, l)));\n            }\n            ans = min(ans, abs(k - tree.rangeAnd(i, r)));\n        }\n\n        for(int i = 0; i < n; ++i){\n            ans = min(ans, abs(k - nums[i]));\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": 1717299638.0
}