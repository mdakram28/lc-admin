{
    "username": "Lei Mingyu",
    "submission": "class Solution {\npublic:\n    #define ll long long \n    #define maxn 100010\n    ll _a[maxn],_ts[maxn<<2],_tma[maxn<<2],_tmi[maxn<<2],_tg[maxn<<2],_s,_ma,_mi;\n    inline ll left(ll p){return p<<1;}\n    inline ll right(ll p){return p<<1|1;}\n    inline void push_up(ll node){\n        _ts[node]=_ts[left(node)]+_ts[right(node)];\n        _tmi[node]=min(_tmi[left(node)],_tmi[right(node)]);\n        _tma[node]=max(_tma[left(node)],_tma[right(node)]);\n    }\n    inline void lazy_add(ll node,ll start,ll end,ll value){\n        _tg[node]+=value;\n        _ts[node]+=value*(end-start+1);\n        _tmi[node]+=value;\n        _tma[node]+=value;\n    }\n    inline void push_down(ll node,ll start,ll end,ll mid){\n        if(_tg[node]==0)return;\n        lazy_add(left(node),start,mid,_tg[node]);\n        lazy_add(right(node),mid+1,end,_tg[node]);\n        _tg[node]=0;\n    }\n    void build(ll node,ll start,ll end){\n        if(start==end){_tmi[node]=_tma[node]=_ts[node]=_a[start];return;}\n        ll mid=(start+end)>>1;\n        build(left(node),start,mid);\n        build(right(node),mid+1,end);\n        push_up(node);\n    }\n    void update(ll node,ll start,ll end,ll cl,ll cr,ll value){\n        if(cl<=start && end<=cr){lazy_add(node,start,end,value);return;}\n        ll mid=(start+end)>>1;\n        push_down(node,start,end,mid);\n        if(cl<=mid) update(left(node),start,mid,cl,cr,value);\n        if(mid<cr) update(right(node),mid+1,end,cl,cr,value);\n        push_up(node);\n    }\n    ll query_sum(ll node,ll start,ll end,ll cl,ll cr){\n        if(start>=cl&&end<=cr)return _ts[node];\n        ll mid=(start+end)>>1,_s(0);\n        push_down(node,start,end,mid);\n        if(cl<=mid)_s=_s+query_sum(left(node),start,mid,cl,cr);\n        if(mid<cr)_s=_s+query_sum(right(node),mid+1,end,cl,cr);\n        return _s;\n    }\n    ll query_min(ll node,ll start,ll end,ll cl,ll cr){\n        if(start>=cl&&end<=cr)return _tmi[node];\n        ll mid=(start+end)>>1,_s(0x3f3f3f3f);\n        push_down(node,start,end,mid);\n        if(cl<=mid)_s=min(_s,query_min(left(node),start,mid,cl,cr));\n        if(mid<cr)_s=min(_s,query_min(right(node),mid+1,end,cl,cr));\n        return _s;\n    }\n    ll query_max(ll node,ll start,ll end,ll cl,ll cr){\n        if(start>=cl&&end<=cr)return _tma[node];\n        ll mid=(start+end)>>1,_s(0);\n        push_down(node,start,end,mid);\n        if(cl<=mid)_s=max(_s,query_max(left(node),start,mid,cl,cr));\n        if(mid<cr)_s=max(_s,query_max(right(node),mid+1,end,cl,cr));\n        return _s;\n    }\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& q) {\n        memset(_a, 0, sizeof(_a));\n        // start from 1\n        build(1, 1, s.size()+5);\n        int pre=0, cnt0=0, cnt1=0;\n        int n=q.size();\n        vector<long long> res(n, 0);\n        map<int, vector<pair<int, int>>> mp;\n        for (int i=0; i<n; ++i) {\n            mp[q[i][1]].push_back({i, q[i][0]});\n        }\n        for (int i=0; i<s.size(); ++i) {\n            if (s[i]=='0') {\n                cnt0++;\n            } else {\n                cnt1++;\n            }\n            while (cnt0>k&&cnt1>k) {\n                if (s[pre]=='0') {\n                    cnt0--;\n                } else {\n                    cnt1--;\n                }\n                pre++;\n            }\n            // add 1 to [pre, i]\n            update(1, 1, s.size()+5, pre+1, i+1, 1);\n            if (mp.find(i)!=mp.end()) {\n                for (int x=0; x<mp[i].size(); ++x) {\n                    int index=mp[i][x].first;\n                    int start=mp[i][x].second;\n                    // get sum from start to i\n                    res[index]=query_sum(1, 1, s.size()+5, start+1, i+1);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723951736",
    "subm_id": "1359778843"
}