{
    "username": "akash4898",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <utility>\nusing namespace std;\n\nclass Solution {\npublic:\n    pair<int, int> bfs(const vector<vector<int>>& graph, int start) {\n        int n = graph.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int farthest_node = start;\n        int max_distance = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : graph[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n\n                    if (dist[neighbor] > max_distance) {\n                        max_distance = dist[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthest_node, max_distance};\n    }\n\n    vector<int> find_tree_center(const vector<vector<int>>& graph) {\n        int n = graph.size();\n        pair<int, int> p1 = bfs(graph, 0);\n        pair<int, int> p2 = bfs(graph, p1.first);\n\n        int dist = p2.second;\n        vector<int> path;\n        vector<int> dist_from_start(n, -1);\n        queue<int> q;\n        q.push(p1.first);\n        dist_from_start[p1.first] = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : graph[node]) {\n                if (dist_from_start[neighbor] == -1) {\n                    dist_from_start[neighbor] = dist_from_start[node] + 1;\n                    q.push(neighbor);\n\n                    if (neighbor == p2.first) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        int current = p2.first;\n        while (current != p1.first) {\n            path.push_back(current);\n            for (int neighbor : graph[current]) {\n                if (dist_from_start[neighbor] == dist_from_start[current] - 1) {\n                    current = neighbor;\n                    break;\n                }\n            }\n        }\n        path.push_back(p1.first);\n\n        vector<int> centers;\n        if (path.size() % 2 == 0) {\n            centers.push_back(path[path.size() / 2 - 1]);\n            centers.push_back(path[path.size() / 2]);\n        } else {\n            centers.push_back(path[path.size() / 2]);\n        }\n\n        return centers;\n    }\n\n    void add_edge_between_centers(vector<vector<int>>& graph1, vector<vector<int>>& graph2) {\n        vector<int> centers1 = find_tree_center(graph1);\n        vector<int> centers2 = find_tree_center(graph2);\n\n        if (!centers1.empty() && !centers2.empty()) {\n            int center1 = centers1[0];\n            int center2 = centers2[0];\n\n            int n1 = graph1.size();\n            int n2 = graph2.size();\n\n            // Combine the graphs\n            vector<vector<int>> combined_graph(n1 + n2);\n\n            // Copy graph1\n            for (int i = 0; i < n1; ++i) {\n                combined_graph[i] = graph1[i];\n            }\n\n            // Copy graph2 and adjust indices\n            for (int i = 0; i < n2; ++i) {\n                for (int neighbor : graph2[i]) {\n                    combined_graph[n1 + i].push_back(n1 + neighbor);\n                }\n            }\n\n            // Add edge between centers\n            combined_graph[center1].push_back(n1 + center2);\n            combined_graph[n1 + center2].push_back(center1);\n\n            // Update graph1 to be the combined graph\n            graph1 = combined_graph;\n        }\n    }\n\n    int find_diameter(const vector<vector<int>>& graph) {\n        if (graph.empty()) return 0;\n        pair<int, int> p1 = bfs(graph, 0);\n        pair<int, int> p2 = bfs(graph, p1.first);\n        return p2.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n\n        vector<vector<int>> graph1(n1);\n        vector<vector<int>> graph2(n2);\n\n        for (const auto& edge : edges1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n\n        add_edge_between_centers(graph1, graph2);\n        return find_diameter(graph1);\n    }\n};\n",
    "submit_ts": 1719719041.0
}