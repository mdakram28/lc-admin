{
    "username": "Storm",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        List<Integer> zeroIndices = new ArrayList<Integer>();\n        List<Integer> oneIndices = new ArrayList<Integer>();\n        int length = s.length();\n        for (int i = 0; i < length; i++) {\n            if (s.charAt(i) == '0') {\n                zeroIndices.add(i);\n            } else {\n                oneIndices.add(i);\n            }\n        }\n        int zerosCount = zeroIndices.size(), onesCount = oneIndices.size();\n        int[] minEndIndices = new int[length];\n        Arrays.fill(minEndIndices, Integer.MAX_VALUE);\n        int zeroPointer = 0, onePointer = 0;\n        for (int i = 0; i < length; i++) {\n            while (zeroPointer < zerosCount && zeroIndices.get(zeroPointer) < i) {\n                zeroPointer++;\n            }\n            while (onePointer < onesCount && oneIndices.get(onePointer) < i) {\n                onePointer++;\n            }\n            if (zerosCount - zeroPointer <= k || onesCount - onePointer <= k) {\n                break;\n            }\n            int lastZeroIndex = zeroIndices.get(zeroPointer + k);\n            int lastOneIndex = oneIndices.get(onePointer + k);\n            minEndIndices[i] = Math.max(lastZeroIndex, lastOneIndex);\n        }\n        int[] maxStartIndices = new int[length];\n        Arrays.fill(maxStartIndices, Integer.MIN_VALUE);\n        zeroPointer = zerosCount - 1;\n        onePointer = onesCount - 1;\n        for (int i = length - 1; i >= 0; i--) {\n            while (zeroPointer >= 0 && zeroIndices.get(zeroPointer) > i) {\n                zeroPointer--;\n            }\n            while (onePointer >= 0 && oneIndices.get(onePointer) > i) {\n                onePointer--;\n            }\n            if (zeroPointer + 1 <= k || onePointer + 1 <= k) {\n                break;\n            }\n            int firstZeroIndex = zeroIndices.get(zeroPointer - k);\n            int firstOneIndex = oneIndices.get(onePointer - k);\n            maxStartIndices[i] = Math.min(firstZeroIndex, firstOneIndex);\n        }\n        int[] suffixCounts = new int[length];\n        for (int i = 0; i < length; i++) {\n            suffixCounts[i] = minEndIndices[i] < Integer.MAX_VALUE ? length - minEndIndices[i] : 0;\n        }\n        long[] sums = new long[length + 1];\n        for (int i = 0; i < length; i++) {\n            sums[i + 1] = sums[i] + suffixCounts[i];\n        }\n        int queriesCount = queries.length;\n        long[] answer = new long[queriesCount];\n        for (int i = 0; i < queriesCount; i++) {\n            int start = queries[i][0], end = queries[i][1];\n            int rangeLength = end - start + 1;\n            answer[i] = (long) rangeLength * (rangeLength + 1) / 2;\n            if (minEndIndices[start] > end) {\n                continue;\n            }\n            int maxStart = maxStartIndices[end];\n            long currCount = sums[maxStart + 1] - sums[start];\n            long reduce = length - end - 1;\n            currCount -= reduce * (maxStart - start + 1);\n            answer[i] -= currCount;\n        }\n        return answer;\n    }\n}",
    "submit_ts": "1723952402",
    "subm_id": "556411402"
}