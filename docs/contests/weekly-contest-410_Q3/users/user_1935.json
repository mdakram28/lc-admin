{
    "username": "mohdsuhailfalahi",
    "submission": " #define ll long long int\n\nclass Solution {\npublic:\n    using MemoTable = vector<vector<vector<ll>>>;\n\n    // Function to handle modulo operation and ensure positive results\n    ll modulo(ll value, ll mod) {\n        return ((value % mod) + mod) % mod;\n    }\n\n    // Function to initialize the memoization table\n    void initializeMemo(MemoTable& memo, int n, int maxValue) {\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= maxValue; ++j) {\n                fill(memo[i][j].begin(), memo[i][j].end(), -1);\n            }\n        }\n    }\n\n    // Function to check if the pair (x, y) sums to the target value\n    bool isValidCombination(int x, int y, int target) {\n        return x + y == target;\n    }\n\n    // Recursive function to count the number of valid monotonic pairs\n    ll countValidPairs(int index, int prevArr1, int prevArr2, const vector<int>& nums, MemoTable& memo) {\n        const int MOD_VAL = 1e9 + 7;\n        const int n = nums.size();\n\n        // Base case: if index is out of bounds, return 1\n        if (index == n) {\n            return 1;\n        }\n\n        // Return the result from the memoization table if already computed\n        if (memo[index][prevArr1][prevArr2] != -1) {\n            return memo[index][prevArr1][prevArr2];\n        }\n\n        ll count = 0;\n        // Iterate over all possible values for arr1 and arr2\n        for (int arr1Value = prevArr1; arr1Value <= nums[index]; ++arr1Value) {\n            for (int arr2Value = prevArr2; arr2Value >= 0; --arr2Value) {\n                if (isValidCombination(arr1Value, arr2Value, nums[index])) {\n                    count = modulo(count + countValidPairs(index + 1, arr1Value, arr2Value, nums, memo), MOD_VAL);\n                }\n            }\n        }\n\n        return memo[index][prevArr1][prevArr2] = count;\n    }\n\n    // Main function to count the monotonic pairs\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        int maxValue = *max_element(nums.begin(), nums.end());\n        MemoTable memo(n, vector<vector<ll>>(maxValue + 1, vector<ll>(maxValue + 1, -1)));\n        return countValidPairs(0, 0, nums[0], nums, memo);\n    }\n};\n",
    "submit_ts": "1723346157",
    "subm_id": "1351571486"
}