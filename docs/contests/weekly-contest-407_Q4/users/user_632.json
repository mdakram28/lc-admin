{
    "username": "hr_boghani",
    "submission": "#include <bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n\n\n#define ll long long\n#define li long int\n#define ull unsigned long long\n#define ld long double\n\n\ntypedef tree<ll, null_type, greater_equal<ll>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key\n\n\n#define fix fixed<<setprecision(10)\n#define mod LLONG_MAX\n#define pb push_back\n#define ff first\n#define ss second\n#define yes cout<<\"YES\"<<endl\n#define no cout<<\"NO\"<<endl\n\n#define f(i, l, r) for (ll i = l; i < r; i++)\n#define rf(j, l, r) for (ll j = l; j >= r; j--)\n#define all(v) v.begin(),v.end()\n#define disp(v) for(int i=0 ;i<v.size() ;i++) cout << v[i] <<' '; cout << endl;\n#define sum(v,a,b) accumulate(v+a,v+b,0)\nclass Solution {\npublic:\n    \n    ll anspos(vector<ll>& tp){\n        int n = tp.size();\n        if(tp.size()==0) return 0;\n        ll curr=tp[0];\n        ll ans=curr;\n        for(int i=0;i<n;i++){\n            if(tp[i]<=curr){\n                curr=tp[i];\n            }else{\n                ans+=(tp[i]-curr);\n                curr=tp[i];\n            }\n        }\n        return ans;\n    }\n    \n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        ll ans=0;\n        int n = nums.size();\n        vector<ll> v(n,0);\n        for(int i=0;i<n;i++){\n            v[i]=target[i]-nums[i];\n        }\n        int i=0;\n        while(i<n){\n            vector<ll> tp;\n            while(i<n && v[i]>0){\n                tp.pb(v[i]);\n                i++;\n            }\n            ans+=anspos(tp);\n            tp.clear();\n            while(i<n && v[i]<0){\n                tp.pb(-v[i]);\n                i++;\n            }\n            ans+=anspos(tp);\n            while(i<n && v[i]==0){\n                i++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721531579",
    "subm_id": "1327964576"
}