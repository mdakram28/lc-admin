{
    "username": "samthenoob",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n\n    def is_peak(self, i):\n        if i <= 0 or i >= self.n - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            self.build(2 * node + 1, start, mid)\n            self.build(2 * node + 2, mid + 1, end)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update(self, idx, start, end, node):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(idx) else 0\n        else:\n            mid = (start + end) // 2\n            if start <= idx <= mid:\n                self.update(idx, start, mid, 2 * node + 1)\n            else:\n                self.update(idx, mid + 1, end, 2 * node + 2)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def range_query(self, L, R, start, end, node):\n        if L > end or R < start:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_query = self.range_query(L, R, start, mid, 2 * node + 1)\n        right_query = self.range_query(L, R, mid + 1, end, 2 * node + 2)\n        return left_query + right_query\n\n    def update_value(self, index, value):\n        self.nums[index] = value\n        if index > 0:\n            self.update(index - 1, 0, self.n - 1, 0)\n        self.update(index, 0, self.n - 1, 0)\n        if index < self.n - 1:\n            self.update(index + 1, 0, self.n - 1, 0)\n\n    def query_peaks(self, L, R):\n        if L >= R - 1:\n            return 0\n        return self.range_query(L + 1, R - 1, 0, self.n - 1, 0)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        st = SegmentTree(nums)\n        result = []\n        for q in queries:\n            if q[0] == 1:\n                result.append(st.query_peaks(q[1], q[2]))\n            elif q[0] == 2:\n                st.update_value(q[1], q[2])\n        return result\n        ",
    "submit_ts": "1718506829",
    "subm_id": "1289632335"
}