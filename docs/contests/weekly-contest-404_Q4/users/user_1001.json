{
    "username": "__ARYAN1__",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define mod 1000000007\n\n#define ll long long\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define vi vector<int>\n#define vb vector<bool>\n#define vvi vector<vector<int>>\n#define vvb vector<vector<bool>>\n#define vvc vector<vector<char>>\n#define vvll vector<vector<long long int>>\n#define vc vector<char>\n#define vll vector<long long>\n#define mii map<int, int>\n#define umii unordered_map<int, int>\n#define si set<int>\n#define qi queue<int>\n#define rep(i, s, e) for (ll i = s; i <= e; i++)\n#define ren(i, s, e) for (ll i = s; i >= e; i--)\n\nclass Solution {\npublic:\n    \n    pii bfs(int start, vvi &adj) {\n        int n = adj.size();\n        vi dist(n, -1);\n        qi q;\n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {  \n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthestNode, maxDist};\n    }\n\n    int dia(vector<vector<int>>& e) {\n        if (e.empty()) return 0;\n\n        int n = e.size() + 1;\n        vvi adj(n);\n        \n        for (const auto& edge : e) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        \n        auto [node, _] = bfs(0, adj);\n\n       \n        auto [tmp, diameter] = bfs(node, adj);\n\n        return diameter;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        ll n = dia(edges1), m = dia(edges2);\n        ll len = max(n, m);\n        if(n & 1){\n            if(m & 1){\n                len = max(len, (n/2) + (m/2) + 3);\n            }\n            else{\n                len = max(len, (n/2) + (m/2) + 2);\n            }\n        }\n        else{\n            if(m & 1){\n                len = max(len, (n/2) + (m/2) + 2);\n            }\n            else{\n                len = max(len, (n/2) + (m/2) + 1);\n            }\n        }\n        return len;\n    }\n};",
    "submit_ts": "1719718411",
    "subm_id": "1304416544"
}