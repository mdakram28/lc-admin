{
    "username": "KKKXY",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int[] a = getLen(edges1);\n        int[] b = getLen(edges2);\n        //System.out.println(a + \" \" + b);\n        return Math.max(Math.max(a[1], b[1]), a[0] + b[0] + 1);\n    }\n    \n    public int[] getLen(int[][] ed) {\n        int n = ed.length + 1;\n        int[] deg = new int[n];\n        List<List<Integer>> adj = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adj.add(new ArrayList<>());\n        }\n        for (int[] e : ed) {\n            adj.get(e[0]).add(e[1]);\n            adj.get(e[1]).add(e[0]);\n            deg[e[0]]++;\n            deg[e[1]]++;\n        }\n        Queue<Integer> q = new LinkedList<>();\n\n        Set<Integer> set = new HashSet<>();\n        for (int i = 0; i < n; i++) {\n            if (deg[i] == 1) {\n                q.add(i);\n                set.add(i);\n            }\n        }\n        boolean single = false;\n        int dis = 0;\n        while (!q.isEmpty()) {\n            int len = q.size();\n            if (len > 1) {\n                dis++;\n        } else {\n                single = true;\n            }\n            for (int i = 0; i < len; i++) {\n                int cur = q.poll();\n                List<Integer> l = adj.get(cur);\n                for (int neib : l) {\n                    deg[neib]--;\n                    if (deg[neib] == 1 && set.add(neib)) {\n                        q.add(neib);\n                    }\n                }\n            }\n        }\n        int dia = single ? dis * 2 : dis * 2 - 1;\n        return new int[]{dis, dia};\n    }\n}",
    "submit_ts": "1719719505",
    "subm_id": "1304443560"
}