{
    "username": "sjbeginner",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INV_COUNT = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        // Create a map to store constraints\n        Map<Integer, Integer> constraintMap = new HashMap<>();\n        for (int[] constraint : requirements) {\n            constraintMap.put(constraint[0], constraint[1]);\n        }\n\n        // DP table to store permutation counts\n        long[][] dp = new long[n + 1][MAX_INV_COUNT + 1];\n        dp[0][0] = 1;\n\n        // Fill DP table\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= MAX_INV_COUNT; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    if (inv >= pos) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - pos]) % MOD;\n                    }\n                }\n            }\n\n            // Apply constraints\n            if (constraintMap.containsKey(len - 1)) {\n                int requiredInv = constraintMap.get(len - 1);\n                for (int inv = 0; inv <= MAX_INV_COUNT; inv++) {\n                    if (inv != requiredInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up valid permutations of length n\n        long result = 0;\n        for (int inv = 0; inv <= MAX_INV_COUNT; inv++) {\n            result = (result + dp[n][inv]) % MOD;\n        }\n\n        return (int) result;\n    }\n\n   \n}\n",
    "submit_ts": 1719071111.0
}