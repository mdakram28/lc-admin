{
    "username": "Tudor67",
    "submission": "class Solution {\nprivate:\n    pair<int, int> getRange(int a, int b){\n        if(a == b){\n            return {a, b};\n        }\n        if(a >= 0){\n            return {a, b};\n        }\n        return {0, max(-a, b)};\n    }\n    \npublic:\n    int minChanges(vector<int>& nums, int k) {\n        const int N = nums.size();\n        \n        using Event = tuple<int, int, int, int>;\n        vector<Event> events;\n        int maxPoint = k;\n        \n        for(int i = 0, j = N - 1; i < j; ++i, --j){\n            int a = nums[i];\n            int b = nums[j];\n            if(a > b){\n                swap(a, b);\n            }\n            \n            events.push_back({0, i, b - a, b - a});\n            \n            pair<int, int> p1 = getRange(b - k, b);\n            events.push_back({1, i, p1.first, p1.second});\n            pair<int, int> p2 = getRange(a - k, a);\n            events.push_back({1, i, p2.first, p2.second});\n            \n            events.push_back({2, i, 0, k});\n            \n            maxPoint = max({maxPoint, p2.second, p1.second, b});\n        }\n        \n        enum EventType{ ADD = 1, ERASE = 2};\n        using T3 = tuple<int, int, int>;\n        vector<vector<T3>> eventsAt(maxPoint + 2);\n        \n        for(Event e: events){\n            //cout << \"cost = \" << get<0>(e) << \", i = \" << get<1>(e);\n            //cout << \", a = \" << get<2>(e) << \", b = \" << get<3>(e) << endl;\n            int cost = get<0>(e);\n            int i = get<1>(e);\n            int a = get<2>(e);\n            int b = get<3>(e);\n            eventsAt[a].push_back({EventType::ADD, cost, i});\n            eventsAt[b + 1].push_back({EventType::ERASE, cost, i});\n        }\n        \n        const int INF = 1e9;\n        int totalCost = 0;\n        int resCost = INF;\n        int distinct = 0;\n        vector<vector<int>> activeCosts(N / 2);\n        for(int p = 0; p <= maxPoint; ++p){\n            for(const T3& T: eventsAt[p]){\n                int eventType = get<0>(T);\n                int cost = get<1>(T);\n                int i = get<2>(T);\n                if(eventType == EventType::ADD){\n                    if(activeCosts[i].empty()){\n                        distinct += 1;\n                        totalCost += cost;\n                        activeCosts[i].push_back(cost);\n                    }else{\n                        totalCost -= *min_element(activeCosts[i].begin(), activeCosts[i].end());\n                        activeCosts[i].push_back(cost);\n                        totalCost += *min_element(activeCosts[i].begin(), activeCosts[i].end());\n                    }\n                }else{\n                    totalCost -= *min_element(activeCosts[i].begin(), activeCosts[i].end());\n                    auto it = find(activeCosts[i].begin(), activeCosts[i].end(), cost);\n                    assert(it != activeCosts[i].end());\n                    activeCosts[i].erase(it);\n                    if(activeCosts[i].empty()){\n                        distinct -= 1;\n                    }else{\n                        totalCost += *min_element(activeCosts[i].begin(), activeCosts[i].end());\n                    }\n                }\n            }\n            \n            if(distinct == N / 2){\n                resCost = min(resCost, totalCost);\n            }\n        }\n        \n        return resCost;\n    }\n};",
    "submit_ts": "1721489972",
    "subm_id": "1327469260"
}