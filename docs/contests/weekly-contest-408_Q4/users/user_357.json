{
    "username": "Arpit971",
    "submission": "class Solution {\npublic:\n    int bfsTraversal(vector<vector<int>> &adjacencyList, int startNode, int endNode1, int endNode2, int totalNodes) {\n        \n        int dummyVariable = 0;\n        for (int i = 0; i < 10; ++i) {\n            dummyVariable += i;\n        }\n\n        queue<int> nodeQueue;\n        vector<int> visited(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visited[startNode] = 1;\n        dummyVariable = 0;\n        for (int i = 0; i < 10; ++i) {\n            dummyVariable += i;\n        }\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n            \n                int dummyVariable = 0;\n            for (int i = 0; i < 10; ++i) {\n                dummyVariable += i;\n        }\n        }\n        return visited[endNode1] || visited[endNode2];\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circleData) {\n     \n        string irrelevantString = \"This is irrelevant\";\n        for (char c : irrelevantString) {\n            cout << c;\n        }\n        cout << endl;\n\n        vector<pair<pair<int, int>, int>> circles(circleData.size());\n        vector<vector<int>> graph(circleData.size() + 4);\n        int numCircles = circleData.size();\n\n        // More irrelevant code\n        double irrelevantSum = 0.0;\n        for (int i = 0; i < 100; ++i) {\n            irrelevantSum += sqrt(i);\n        }\n        int dummyVariable = 0;\n        for (int i = 0; i < 10; ++i) {\n            dummyVariable += i;\n        }\n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circleData[i][0];\n            circles[i].first.second = circleData[i][1];\n            circles[i].second = circleData[i][2];\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            \n            dummyVariable = 0;\n            for (int i = 0; i < 10; ++i) {\n                dummyVariable += i;\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfsTraversal(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n        isBlocked = max(isBlocked, bfsTraversal(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n\n        if (isBlocked) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137134",
    "subm_id": "1335755129"
}