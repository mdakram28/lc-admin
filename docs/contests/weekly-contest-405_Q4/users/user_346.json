{
    "username": "gourabsingha1",
    "submission": "// **** Flexible Trie - O(N * S), O(N * S) ****\nclass TrieNode2 {\npublic:\n    unordered_map<char, TrieNode2*> children;\n    vector<pair<int, int>> wordEnds; \n    int cntEndWith; // Count no. of words equal to word\n    int cntPrefix; // Count no. of prefixes equal to word\n\n    TrieNode2() {\n        cntEndWith = 0;\n        cntPrefix = 0;\n    }\n};\n\nclass Trie2 {\npublic:\n    TrieNode2* root;\n\n    Trie2() {\n        root = new TrieNode2();\n    }\n\n    void insert(string& word, int& i, int cost) {\n        TrieNode2* node = root;\n        for(auto& ch : word) {\n            if(node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode2();\n            }\n            node = node->children[ch];\n            node->cntPrefix++;\n        }\n        node->cntEndWith++;\n        node->wordEnds.push_back({i, cost});\n    }\n\n    bool search(string& word) {\n        TrieNode2* node = root;\n        for(auto& ch : word) {\n            if(node->children.find(ch) == node->children.end()) {\n                return 0;\n            }\n            node = node->children[ch];\n        }\n        return node->cntEndWith;\n    }\n\n    void erase(string& word) { // Assuming word exists\n        TrieNode2* node = root;\n        for(auto& ch : word) {\n            if(node->children.find(ch) == node->children.end()) {\n                return;\n            }\n            node = node->children[ch];\n            node->cntPrefix--;\n        }\n        node->cntEndWith--;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie2 trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n                TrieNode2* node = trie.root;\n                for (int j = i; j < n; ++j) {\n                    if (node->children.count(target[j]) == 0) {\n                        break;\n                    }\n                    else {\n                        node = node->children[target[j]];\n                        for (auto& [k, c] : node->wordEnds) {\n                            int len = words[k].size();\n                            if (i + len <= n) {\n                                dp[i + len] = min(dp[i + len], dp[i] + c);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if(dp[n] == INT_MAX) {\n            dp[n] = -1;\n        }\n        return dp[n];\n    }\n};",
    "submit_ts": "1720321684",
    "subm_id": "1312329552"
}