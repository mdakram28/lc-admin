{
    "username": "VimT",
    "submission": "impl Solution {\n    pub fn time_taken(edges: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = edges.len() + 1;\n        let mut g = vec![vec![]; n];\n        for edge in edges {\n            g[edge[0] as usize].push(edge[1] as usize);\n            g[edge[1] as usize].push(edge[0] as usize);\n        }\n    \n        let mut f0 = vec![0; n]; // \u4ee50\u4e3a\u6839\u7684\u6811\u4e0a\uff0c\u6807\u8bb0\u6240\u6709\u8282\u70b9\u9700\u8981\u7684\u65f6\u95f4\n        let mut f = vec![0; n]; // \u4ee5i\u4e3a\u6839\u7684\u6811\u4e0a\uff0c\u6807\u8bb0\u6240\u6709\u8282\u70b9\u9700\u8981\u7684\u65f6\u95f4\n    \n        // \u7b2c\u4e00\u6b21dfs\u6c42 \u4ee50\u4e3a\u6839\u6807\u8bb0\u6240\u6709\u8282\u70b9\u9700\u8981\u7684\u65f6\u95f4\n        fn dfs1(g: &Vec<Vec<usize>>, fa: usize, u: usize, f0: &mut Vec<i64>) {\n            let mut max = 0;\n            for &v in &g[u] {\n                if v != fa {\n                    // \u5b50\u6811\u8def\u5f84\u7684\u6700\u5927\u503c\n                    dfs1(g, u, v, f0);\n                    max = max.max(f0[v]);\n                }\n            }\n            f0[u] = max + 2 - u as i64 % 2;\n        }\n    \n        // \u7b2c\u4e8c\u6b21dfs \u6c42\u8f6c\u79fb\n        // \u5c06\u6574\u68f5\u6811\u7684\u6839\u8282\u70b9\u4ece r \u6362\u5230 r \u7684\u4e00\u4e2a\u76f8\u90bb\u8282\u70b9 r1\n        // \u4ea4\u6362\u4e4b\u540e\uff0c\u9664\u4e86 r\u548cr1 \u8fd9\u4e24\u4e2a\u8282\u70b9\uff0c\u5176\u4ed6\u8282\u70b9\u7684 f0 \u662f\u4e0d\u53d8\u7684\u3002 \u8fd9\u6837\u53ea\u66f4\u65b0r\u548cr1\uff0c\u5373\u5b8c\u6210\u6362\u6839\n        fn dfs2(g: &Vec<Vec<usize>>, f0: &mut Vec<i64>, f: &mut Vec<i64>, fa: usize, u: usize) {\n            let mut m1 = 0; // \u5b50\u6811\u8def\u5f84\u7684\u6700\u5927\u503c\n            let mut m2 = 0; // \u5b50\u6811\u8def\u5f84\u7684\u6b21\u5927\u503c\n            for &v in &g[u] {\n                // u\u4e3a\u6839\u65f6\u7684 \u5b50\u6811\u8def\u5f84\u7684\u6700\u5927\u503c\u548c\u6b21\u5927\u503c\n                if f0[v] > m1 {\n                    m2 = m1;\n                    m1 = f0[v];\n                } else if f0[v] > m2 {\n                    m2 = f0[v];\n                }\n            }\n    \n            // \u6362\u6839\u540e\u7684 \u5f53\u524d\u8def\u5f84\u6700\u5927\u503c \u53ef\u80fd\u7684\u53d8\u5316\n            f[u] = m1;\n    \n            // \u6362\u6839\u5230v\n            for &v in &g[u] {\n                if v != fa {\n                    // v\u4e3a\u6839\u8282\u70b9\u540e\uff0c\u539fv\u662f\u6700\u5927\u8def\u5f84\u4e0a\u7684\u70b9\u3002\u8981\u6362\u6210\u6b21\u5927\u8def\u5f84\n                    if f0[v] == m1 {\n                        f0[u] = m2 + 2 - u as i64 % 2;\n                    } else {\n                        f0[u] = m1 + 2 - u as i64 % 2;\n                    }\n                    dfs2(g, f0, f, u, v);\n                }\n            }\n        }\n    \n        dfs1(&g, n, 0, &mut f0);\n        dfs2(&g, &mut f0, &mut f, n, 0);\n        f.into_iter().map(|x| x as i32).collect()\n    }\n}",
    "submit_ts": "1722699303",
    "subm_id": "552275034"
}