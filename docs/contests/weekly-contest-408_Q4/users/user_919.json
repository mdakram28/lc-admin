{
    "username": "ansonll",
    "submission": "from typing import List\nfrom math import sqrt\n\nclass UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [1] * n\n\n    def find(self, u):\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n\n    def union(self, u, v):\n        root_u = self.find(u)\n        root_v = self.find(v)\n        if root_u != root_v:\n            if self.rank[root_u] > self.rank[root_v]:\n                self.parent[root_v] = root_u\n            elif self.rank[root_u] < self.rank[root_v]:\n                self.parent[root_u] = root_v\n            else:\n                self.parent[root_v] = root_u\n                self.rank[root_u] += 1\n    \n    def get_par(self):\n        return self.parent\n\n    def get_rank(self):\n        return self.rank\n\ndef circles_intersect(c1, c2):\n    x1, y1, r1 = c1\n    x2, y2, r2 = c2\n    distance = sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n    return distance <= r1 + r2\n\ndef not_block(circles, X, Y):\n    n = len(circles)\n    uf = UnionFind(n + 4)  # \u6700\u540e 4 \u4e2a\u662f\u7528\u4e8e\u4e0a\u4e0b\u5de6\u53f3\u8fb9\u754c\u7684\u865a\u62df\u8282\u70b9\n    \n    # \u5408\u5e76\u76f8\u4ea4\u7684\u5706\n    for i in range(n):\n        for j in range(i + 1, n):\n            if circles_intersect(circles[i], circles[j]):\n                uf.union(i, j)\n    \n    # \u865a\u62df\u8282\u70b9\u4ee3\u8868\u8fb9\u754c\n    left_border = n\n    right_border = n + 1\n    top_border = n + 2\n    bottom_border = n + 3\n\n    for i, (x, y, r) in enumerate(circles):\n        if x - r <= 0:\n            uf.union(i, left_border)\n        if x + r >= X:\n            # print('yes')\n            uf.union(i, right_border)\n        if y - r <= 0:\n            uf.union(i, bottom_border)\n        if y + r >= Y:\n            # print('yes')\n            uf.union(i, top_border)\n\n    # print(uf.get_par())\n    # print(uf.get_rank())\n    # \u68c0\u67e5\u662f\u5426\u6709\u8def\u5f84\u963b\u585e\n    if uf.find(top_border) == uf.find(right_border) or uf.find(bottom_border) == uf.find(left_border) or uf.find(top_border) == uf.find(bottom_border) or uf.find(left_border) == uf.find(right_border):\n        return False\n    return True\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        return not_block(circles, X, Y)",
    "submit_ts": "1722138660",
    "subm_id": "1335796434"
}