{
    "username": "i_am_coderrrrr",
    "submission": "\n#include <bits/stdc++.h>\nusing namespace std;\n#define ff first\n#define ss second\n#define mp make_pair\n#define ll long long\n#define ld long double\n#define rep(i, n) for (ll i = 0; i < n; i++)\n#define rev(i, n) for (ll i = n; i >= 0; i--)\n#define rep_a(i, a, n) for (ll i = a; i < n; i++)\n#define pb push_back\n#define all(_obj) _obj.begin(), _obj.end()\n#define pll pair<ll, ll>\n#define vll vector<ll>\n#define vvll vector<vll>\n#define vpll vector<pll>\n#define pc(n) __builtin_popcountll(n)\n#define endl \"\\n\"\n#define INF INT32_MAX\nconst ll N = 1e5 + 11, mod = 1e9 + 7, mod2 = 3037000493ll;\n\n// https://www.geeksforgeeks.org/bitwise-and-of-sub-array-closest-to-k/\n\n// Segment Tree class to perform task optimally\nclass SegmentTree\n{\npublic:\n    vector<int> tree;\n    int n;\n\n    // Constructor\n    SegmentTree(vector<int> &arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<int> &arr, int node, int start,\n               int end)\n    {\n        if (start == end)\n        {\n            tree[node] = arr[start];\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    // query function to get bitwise AND of the range\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l)\n        {\n            return INF;\n        }\n        if (l <= start && end <= r)\n        {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        // bitwise AND operation result\n        return p1 & p2;\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumDifference(vector<int> &nums, int k)\n    {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int ans = INF;\n        for (int i = 0; i < n; i++)\n        {\n            int l = i - 1, r = n - 1, mid;\n\n            // binary search implementation\n            while (r - l > 1)\n            {\n                mid = (l + r) / 2;\n                if (st.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = min(ans, abs(st.query(i, l) - k));\n            ans = min(ans, abs(k - st.query(i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717296926.0
}