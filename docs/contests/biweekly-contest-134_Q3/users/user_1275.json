{
    "username": "farhan_akhtar2003",
    "submission": "class Solution {\npublic:\n    \n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n    int count = 0;\n    int n = colors.size();\n    \n    if (k <= 1 || k > n) return 0;\n\n    int start = 0; // Start of the current potential group\n    int length = 1; // Current length of the alternating sequence\n\n    // Iterate through the array in a circular manner\n    for (int i = 1; i < n + k - 1; ++i) {\n        // Check if the current and previous tiles alternate\n        if (colors[(i - 1) % n] != colors[i % n]) {\n            length++;\n            if (length == k) { // Found a valid group\n                count++;\n                start++; // Move start to prevent overlapping\n                length--; // Adjust length as we move the start\n            }\n        } else {\n            // Reset start and length if the pattern breaks\n            start = i;\n            length = 1;\n        }\n    }\n    \n    return count;\n    }\n};",
    "submit_ts": "1720277371",
    "subm_id": "1311660572"
}