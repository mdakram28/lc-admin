{
    "username": "rajnsunny",
    "submission": "class Solution {\npublic:\n    int dfs(const vector<vector<int>>& adj, int start, int& farNode) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n\n        function<void(int, int)> dfsVisit = [&](int node, int d) {\n            dist[node] = d;\n            if (d > dist[farNode]) {\n                farNode = node;\n            }\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dfsVisit(neighbor, d + 1);\n                }\n            }\n        };\n\n        farNode = start;\n        dfsVisit(start, 0);\n        return dist[farNode];\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        \n\n        int farNode1 = 0;\n        int d1 = dfs(adj1, 0, farNode1);\n        d1 = dfs(adj1, farNode1, farNode1);\n\n        int farNode2 = 0;\n        int d2 = dfs(adj2, 0, farNode2);\n        d2 = dfs(adj2, farNode2, farNode2);\n\n        int minDiameter = max(d1, d2);\n        int half1 = (d1 + 1) / 2;\n        int half2 = (d2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n\n        return minDiameter;\n    }\n\n};",
    "submit_ts": 1719717473.0
}