{
    "username": "Jinroy",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        diffs = []\n\n        for i in range(len(target)):\n            diffs.append(target[i] - nums[i])\n\n        left = 0\n        right = 0\n        direction = 0\n        subOps = 0\n        totalOps = 0\n        # print(diffs)\n        while right < len(diffs):\n            if direction == 0:\n                if diffs[right] >= 0:\n                    direction = 1\n                else:\n                    direction = -1\n            elif direction == 1:\n                if diffs[right] >= 0:\n                    right += 1\n                    continue\n                else:\n                    curOps = 0\n                    subOps = 0\n                    while left < right:\n                        if diffs[left] >= curOps:\n                            curOps = diffs[left]\n                            subOps = min(subOps, curOps)\n                            left += 1\n                        else:\n                            totalOps += max(0, curOps - subOps)\n                            subOps = diffs[left]\n                            left += 1\n                            curOps = 0\n                    totalOps += max(0, curOps - subOps)\n                    direction = -1\n            else:\n                if diffs[right] < 0:\n                    right += 1\n                    continue\n                else:\n                    curOps = 0\n                    subOps = 0\n                    while left < right:\n                        if abs(diffs[left]) >= curOps:\n                            curOps = abs(diffs[left])\n                            subOps = min(subOps, curOps)\n                            left += 1\n                        else:\n                            totalOps += max(0, curOps - subOps)\n                            subOps = abs(diffs[left])\n                            left += 1\n                            curOps = 0\n                    totalOps += max(0, curOps - subOps)\n                    direction = 1\n            right += 1\n        \n        # print(left, right, direction, totalOps)\n        # print(diffs)\n        if left < right:\n            if direction == 1:\n                curOps = 0\n                subOps = 0\n                while left < right:\n                    if diffs[left] >= curOps:\n                        curOps = diffs[left]\n                        subOps = min(subOps, curOps)\n                        left += 1\n                    else:\n                        totalOps += max(0, curOps - subOps)\n                        subOps = diffs[left]\n                        left += 1\n                        curOps = 0\n                totalOps += max(0, curOps - subOps)\n            else:\n                curOps = 0\n                subOps = 0\n                while left < right:\n                    if abs(diffs[left]) >= curOps:\n                        curOps = abs(diffs[left])\n                        subOps = min(subOps, curOps)\n                        left += 1\n                    else:\n                        totalOps += max(0, curOps - subOps)\n                        subOps = abs(diffs[left])\n                        left += 1\n                        curOps = 0\n                totalOps += max(0, curOps - subOps)\n        return totalOps\n        ",
    "submit_ts": "1721532392",
    "subm_id": "1327984749"
}