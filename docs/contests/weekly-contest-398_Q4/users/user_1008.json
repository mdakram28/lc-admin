{
    "username": "sungyuk1",
    "submission": "class Solution {\npublic:\n    long long ans; \n    int k; \n    \n    int waysToReachStair(int k_) {\n        unordered_map<long long, unordered_map<long long, unordered_map<bool, long long>>> memo; \n        ans = 0;\n        k = k_;\n        \n        return dfs(1, 0, true, memo);\n        \n        \n    }\n    \n    long long dfs(int stair, int jump, bool can_down, unordered_map<long long, unordered_map<long long, unordered_map<bool, long long>>> & memo){\n        \n        if(stair > k+2){\n            return 0;\n        }else if(memo.contains(stair) && memo[stair].contains(jump) && memo[stair][jump].contains(can_down)){\n            return memo[stair][jump][can_down];\n        }\n        \n        long long res_down = 0; \n        if(stair != 0 && can_down){\n            res_down = dfs(stair-1, jump, !can_down, memo);\n            memo[stair-1][jump][!can_down] = res_down;\n        }\n        \n        long long new_stair = stair + pow(2, jump);\n        long long res_up = dfs(new_stair, jump+1, true, memo);\n        memo[new_stair][jump+1][true] = res_up;\n        \n        if(stair == k){\n            return 1+res_down + res_up; \n        }\n        return res_down + res_up;\n        \n        \n        \n        \n    }\n};\n\n/*\n0\n1\n2\n3\n4\nexpected res \n2\n4\n4\n3\n2\n*/\n",
    "submit_ts": "1716090051",
    "subm_id": "1261857942"
}