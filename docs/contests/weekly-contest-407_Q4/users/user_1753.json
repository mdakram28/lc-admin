{
    "username": "Rudranil_Acharya",
    "submission": "class Solution {\npublic:\n\n// class SGtree {\n// public:\n//     vector<int> seg;\n// public:\n\n//     SGtree(int n) {\n//         seg.resize(4 * n + 1);\n//     }\n//     void combine(int id) {\n//         seg[id] = min(seg[2 * id], seg[(2 * id) + 1]);\n//         return;\n//     }\n//     void build(int id, int l, int r, vector<int> &a) {\n//         if (r - l == 1) {\n\n//             seg[id] = a[l];\n//             return;\n//         }\n\n//         int mid = ((int)l + r) / 2;\n\n//         build(2 * id, l, mid, a);\n//         build(2 * id + 1, mid, r, a);\n\n\n//         combine(id);\n\n//         return;\n//     }\n\n//     int query(int id, int x, int y, int l, int r) {\n//         if (l >= x and r <= y) {\n\n//             return seg[id];\n//         }\n//         else if (l >= y or r <= x) {\n\n\n//             int use = INT64_MAX;\n//             return use;\n//         }\n\n//         int mid = ((int)l + r) / 2;\n\n\n//         int left = query(2 * id, x, y, l, mid);\n//         int right = query(2 * id + 1, x, y, mid, r);\n//         return min(left, right);\n//     }\n\n//     void update(int id, int l, int r, int index, int value) {\n\n//         if (r <= index or l > index) {\n//             return;\n//         }\n//         if ((r - l) == 1) {\n//             if (index == l) {\n//                 seg[id] = value;\n//             }\n//             return;\n\n//         }\n\n//         int mid = (int)l + r;\n//         mid = mid / 2;\n//         update(2 * id, l, mid, index, value);\n//         update((2 * id) + 1, mid, r, index, value);\n//         combine(id);\n//         return;\n//     }\n\n// };\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n=nums.size();\n        long long ans=0;\n\n        vector<long long> dp(n+1,0);\n        dp[0]=abs(nums[0]-target[0]);\n        for(int i=1;i<nums.size();i++){\n            if(nums[i]<=target[i]){\n                if(nums[i-1]<=target[i-1]){\n                    int d1=target[i-1]-nums[i-1];\n                    int d2=target[i]-nums[i];\n                    if(d2>d1){\n                        dp[i]=(long long)(d2-d1)+dp[i-1];\n                    }\n                    else{\n                        dp[i]=dp[i-1];\n                    }\n                }\n                else{\n                    dp[i]=(long long)dp[i-1]+target[i]-nums[i];\n                }\n            }\n            else{\n                if(nums[i-1]>target[i-1]){\n                    int d1=abs(target[i-1]-nums[i-1]);\n                    int d2=abs(target[i]-nums[i]);\n                    if(d2>d1){\n                        dp[i]=(long long)(abs(d2-d1))+dp[i-1];\n                    }\n                    else{\n                        dp[i]=dp[i-1];\n                    }\n                }\n                else{\n                    dp[i]=(long long)dp[i-1]+abs(target[i]-nums[i]);\n                }\n\n            }\n        }\n        return dp[n-1];\n        // int start=0;\n        // while(start<n){\n        //     int diff=nums[start]-target[start];\n        //     int curr=0;\n        //     if(diff>=0){\n        //         while(start<n and diff>=0){\n        //             diff=nums[start]-target[start];\n        //             if(diff<0){\n        //                 break;\n        //             }\n        //             curr=max(curr,abs(diff));\n        //             start++;\n        //         }\n        //         ans=(long long)ans+curr;\n        //        // cout<<\"hi \"<<curr<<endl;\n\n        //     }\n        //     else{\n        //         while(start<n and diff<0){\n        //             diff=nums[start]-target[start];\n        //             if(diff>0){\n        //                 break;\n        //             }\n        //             curr=max(curr,abs(diff));\n        //             start++;\n        //         }\n        //         ans=(long long)ans+curr;\n        //     // cout<<\"hi \"<<curr<<endl;\n\n        //     }\n        //     // while(start<n and )\n        // }\n        // return ans;\n        \n        \n    }\n};",
    "submit_ts": "1721532659",
    "subm_id": "1327991055"
}