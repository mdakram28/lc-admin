{
    "username": "iAnanyaGhosh",
    "submission": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <functional> // for greater\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horiCut, vector<int>& vertCut) {\n        // Sort the costs in descending order\n        sort(horiCut.begin(), horiCut.end(), greater<int>());\n        sort(vertCut.begin(), vertCut.end(), greater<int>());\n        \n        // Initialize the number of segments\n        int h = 1;\n        int v = 1;\n        \n        // Initialize total cost\n        long long totalCost = 0;\n        \n        // points for hori and vert cuts\n        int h_point = 0;\n        int v_point = 0;\n        \n        // Process cuts until all are done\n        while (h_point < horiCut.size() && v_point < vertCut.size()) {\n            if (horiCut[h_point] >= vertCut[v_point]) {\n                totalCost += static_cast<long long>(horiCut[h_point]) * v;\n                h++;\n                h_point++;\n            } else {\n                totalCost += static_cast<long long>(vertCut[v_point]) * h;\n                v++;\n                v_point++;\n            }\n        }\n        \n        // Process remaining hori cuts\n        while (h_point < horiCut.size()) {\n            totalCost += static_cast<long long>(horiCut[h_point]) * v;\n            h++;\n            h_point++;\n        }\n        \n        // Process remaining vert cuts\n        while (v_point < vertCut.size()) {\n            totalCost += static_cast<long long>(vertCut[v_point]) * h;\n            v++;\n            v_point++;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926732",
    "subm_id": "1320294815"
}