{
    "username": "lkm_leetcode",
    "submission": "\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        length = len(nums)\n        \n        \n        def IsPeek(i):\n            return  0 < i < length - 1 and nums[i-1] < nums[i] and nums[i] > nums[i+1]\n        \n\n        class SegmentTreeNode:\n            def __init__(self,i,j):\n                self.i = i \n                self.j = j\n                if i == j:\n                    self.val = int(IsPeek(i))        \n                    return\n                mid = (i + j)//2 \n                self.left_child = SegmentTreeNode(i, mid)\n                self.right_child = SegmentTreeNode(mid + 1, j)\n                self.val = 0 \n                self.val += self.left_child.val\n                self.val += self.right_child.val\n                return \n\n            def Query(self, i, j):\n                if j < self.i or i > self.j:\n                    return 0 \n                if i <= self.i and self.j <= j:\n                    return self.val \n                return self.left_child.Query(i,j) + self.right_child.Query(i,j)\n\n            def Update(self, i, val):\n                if self.i == self.j == i:\n                    self.val = val\n                    return \n\n                if self.i <= i <= self.j:\n                    self.left_child.Update(i, val)\n                    self.right_child.Update(i,val)\n                    self.val = self.left_child.val + self.right_child.val\n                    return \n                return  \n        \n\n        \n        segment_tree_root = SegmentTreeNode(0, length - 1)\n        ret = []\n        \n        \n        # print(f\"{nums = }\")\n        \n            \n        for query in queries:\n            if query[0] == 1:\n                _,i,j = query  \n                # print(\"count num peeks in %d, %d\"%(i,j))\n                ans = segment_tree_root.Query(i,j)\n                # here \n                # take subarray first \n                if i == j:\n                    if IsPeek(i):\n                        ans -=1\n                else:\n                    if IsPeek(i):\n                        ans -= 1\n                    if IsPeek(j):\n                        ans -= 1\n                ret.append(ans)\n            else:\n                _,i,val = query\n                nums[i] = val\n                # print(f\"updating position {i} to value {val}\")\n                \n                for j in [i-1, i, i+1]:\n                    if j < 0 or j >= length:\n                        continue \n                    new_val = int(IsPeek(j))\n                    segment_tree_root.Update(j, new_val)\n                 \n                # print(nums)\n        return ret ",
    "submit_ts": "1718507174",
    "subm_id": "1289643456"
}