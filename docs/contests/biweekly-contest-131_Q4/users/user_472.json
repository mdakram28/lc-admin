{
    "username": "fatalerror-i",
    "submission": "class Fenwick:\n    def __init__(self, n):\n        self.nums = [0] * n\n        self.tree = [0] * (n+1)\n\n    @staticmethod\n    def lowbit(x):\n        return x & -x\n\n    def update(self, i, x):\n        self.nums[i] = x\n        i += 1\n        while i <= len(self.nums):\n            self.tree[i] = max(self.tree[i], x)\n            i += self.lowbit(i)\n\n    def premax(self, i):\n        mx = 0\n        i += 1\n        while i > 0:\n            mx = max(mx, self.tree[i])\n            i -= self.lowbit(i)\n        return mx\n\n\nfrom sortedcontainers import SortedList as SL\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        mx = max(q[1] for q in queries) + 1\n        blocks = SL([0, mx])\n        fwt = Fenwick(mx+1)\n        for q in queries:\n            if q[0] == 1:\n                blocks.add(q[1])\n        # print(queries)\n        # print(mx, blocks)\n        for i in range(1, len(blocks)):\n            fwt.update(blocks[i], blocks[i]-blocks[i-1])\n            \n        ans = []\n        for tp, x, *sz in reversed(queries):\n            if tp == 1:\n                idx = blocks.bisect_left(x)\n                gap = blocks[idx+1] - blocks[idx-1]\n                fwt.update(blocks[idx+1], gap)\n                blocks.pop(idx)\n            else:\n                sz = sz[0]\n                if sz > x:\n                    ans.append(False)\n                    continue\n                idx = blocks.bisect_right(x) - 1\n                ans.append(x - blocks[idx] >= sz or fwt.premax(blocks[idx]) >= sz)\n        \n        ans.reverse()\n        return ans\n                \n                \n                \n                \n                \n                \n                \n                \n                ",
    "submit_ts": 1716652715.0
}