{
    "username": "sveng101",
    "submission": "import heapq\nfrom sortedcontainers import SortedList\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        rngs = []\n        for i, num in enumerate(nums):\n            if num & k != k:\n                if rngs and len(rngs[-1]) == 1:\n                    rngs[-1].append(i)\n                continue\n            if not rngs or len(rngs[-1]) == 2:\n                rngs.append([i])\n        if rngs and len(rngs[-1]) == 1: rngs[-1].append(n)\n        #print(rngs)\n\n        def rangeAndCount(i1: int, i2: int) -> int:\n            nums2 = nums[i1: i2]\n            #print(i1, i2, nums2)\n            n2 = len(nums2)\n            mx = max(nums2)\n            pow2 = 1\n            mx_bit = 0\n            qus = {}\n            mx2 = mx\n            k2 = k\n            curr_bit = 0\n            while mx2:\n                if not k2 & 1:\n                    qus[curr_bit] = deque()\n                    mx_bit = curr_bit\n                mx2 >>= 1\n                k2 >>= 1\n                curr_bit += 1\n            #print(qus)\n            if not qus:\n                return (n2 * (n2 + 1)) >> 1\n            for i, num in enumerate(nums2):\n                num2 = num\n                for curr_bit in range(mx_bit + 1):\n                    if curr_bit in qus.keys() and not num2 & 1:\n                        qus[curr_bit].append(i)\n                    num2 >>= 1\n            #print(qus)\n            z_bit_nxt_lst = SortedList()\n            for z_bit_qu in qus.values():\n                if not z_bit_qu: return 0\n                #z_bit_heap.append(-z_bit_qu[0])\n                z_bit_nxt_lst.add(z_bit_qu[0])\n            #heapq.heapify(z_bit_heap)\n            #print(z_bit_heap)\n            #print(z_bit_nxt_lst)\n            res = 0\n            for i, num in enumerate(nums2):\n                #print(i, num, n2, i, z_bit_nxt_lst)\n                res += n2 - max(i, z_bit_nxt_lst[-1])#-z_bit_heap[0])\n                #print(res)\n                for qu in qus.values():\n                    if qu[0] == i:\n                        qu.popleft()\n                        if not qu: return res\n                        #heapq.heappush(z_bit_heap, -qu[0])\n                        z_bit_nxt_lst.remove(i)\n                        z_bit_nxt_lst.add(qu[0])\n            #print(res)\n            return res\n\n        return sum(rangeAndCount(*rng) for rng in rngs)",
    "submit_ts": "1720280103",
    "subm_id": "1311777002"
}