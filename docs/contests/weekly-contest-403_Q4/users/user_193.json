{
    "username": "frixxxer",
    "submission": "class Solution:\n    def precompute(self, grid):\n        out = [[0] * len(grid[0]) for rows in range(len(grid))]\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                out[i][j] = grid[i][j] + (0 if i == 0 else out[i-1][j]) + (0 if j == 0 else out[i][j-1])\n        return out\n    def get_sum(self, com, r1, r2, c1, c2):\n        return com[r2][c2] \\\n            -(0 if c1 == 0 else com[r2][c1-1]) \\\n            - (0 if r1 == 0 else com[r1-1][c2]) \\\n            + (0 if r1 == 0 or c2 == 0 else com[r1-1][c1 - 1])\n    \n    def minimumArea(self, grid: List[List[int]], r1, r2, c1, c2) -> int:\n        rmi, rma, cmi, cma = 9999, -9999, 9999, -9999\n        for i in range(r1, r2+1):\n            for j in range(c1, c2+1):\n                if grid[i][j]:\n                    rmi = min(rmi, i)\n                    rma = max(rma, i)\n                    cmi = min(cmi, j)\n                    cma = max(cma, j)\n        return (rma - rmi + 1) * (cma - cmi + 1)\n    def split_horiz_score(self, grid, prec, e1, e2, lo = None, hi = None):\n        rows, cols = len(grid), len(grid[0])\n        if lo is None:\n            lo, hi = 0, cols - 1\n        tentative_sol = 9999999999\n        for horizontal in range(lo, hi):\n            # print(f\"\\t\\t{horizontal=} {self.get_sum(prec, e1, e2, lo, horizontal)} {self.get_sum(prec, e1, e2, horizontal + 1, hi)}\")\n            # print(f\"{prec=}\")\n            if self.get_sum(prec, e1, e2, lo, horizontal) and \\\n                self.get_sum(prec, e1, e2, horizontal + 1, hi):\n                b = self.minimumArea(grid, e1, e2, lo, horizontal)\n                c = self.minimumArea(grid, e1, e2, horizontal + 1, hi)\n                print(f\"\\t\\t{b=}, {c=}\")\n                tentative_sol = min(tentative_sol, b + c)\n        return tentative_sol\n    def split_vert_score(self, grid, prec, d1, d2, lo = None, hi = None):\n        rows, cols = len(grid), len(grid[0])\n        if lo is None:\n            lo, hi = 0, rows - 1\n        tentative_sol = 9999999999\n        for vertical in range(lo, hi):\n            if self.get_sum(prec, lo, vertical, d1, d2) and \\\n                self.get_sum(prec, vertical + 1, hi, d1, d2):\n                b = self.minimumArea(grid, lo, vertical, d1, d2)\n                c = self.minimumArea(grid, vertical + 1, hi, d1, d2)\n                tentative_sol = min(tentative_sol, b + c)\n        return tentative_sol\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        r, c = [False] * len(grid), [False] * len(grid[0])\n        for i in range(len(grid)):\n            for j in range(len(grid[0])):\n                if grid[i][j]:\n                    r[i] = True\n                    c[j] = True\n        r = [i for i, v in enumerate(r) if v]\n        c = [i for i, v in enumerate(c) if v]\n        grid2 = [row[min(c):max(c) + 1] for row in grid[min(r):max(r) + 1]]\n        grid = grid2\n        prec = self.precompute(grid)\n        print(f\"{grid=}\", f\"{prec=}\")\n        rows, cols = len(grid), len(grid[0])\n        tentative_sol = 99999999\n        for vertical in range(rows - 1):\n            balls = [(0, vertical, vertical+1, rows-1), (vertical+1, rows-1, 0, vertical)]\n            for r1, r2, e1, e2 in balls:\n                if self.get_sum(prec, r1, r2, 0, cols - 1):\n                    a = self.minimumArea(grid, r1, r2, 0, cols-1)\n                    tentative_sol = min(tentative_sol, a + self.split_horiz_score(grid, prec, e1, e2))\n                    tentative_sol = min(tentative_sol, a + self.split_vert_score(grid, prec, 0, cols-1, lo=e1, hi=e2))\n        for horizontal in range(cols - 1):\n            balls = [(0, horizontal, horizontal+1, cols-1), (horizontal+1, cols-1, 0, horizontal)]\n            for c1, c2, d1, d2 in balls:\n                if self.get_sum(prec, 0, rows-1, c1, c2):\n                    # print(\"horiz\", c1, c2)\n                    a = self.minimumArea(grid, 0, rows-1, c1, c2)\n                    h = self.split_horiz_score(grid, prec, 0, rows-1, lo=d1, hi=d2)\n                    if c1 == 0 and c2 == 0:\n                        print(f\"\\t{h} ({d1=}, {d2=})\")\n                    tentative_sol = min(tentative_sol, a + h)\n                    tentative_sol = min(tentative_sol, a + self.split_vert_score(grid, prec, d1, d2))\n        return tentative_sol\n                        \n        ",
    "submit_ts": 1719112862.0
}