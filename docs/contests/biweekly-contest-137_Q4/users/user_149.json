{
    "username": "MSA TANZEEL",
    "submission": "\nclass Solution\n{\npublic:\n    long long maximumValueSum(vector<vector<int>> &board)\n    {\n        int n = board.size();\n        int m = board[0].size();\n        const long long inf = 1e18;\n        long long ans = -1e18;\n\n        vector<vector<long long>> v(n + 2, vector<long long>(m + 2, 0));\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                v[i][j] = board[i - 1][j - 1];\n            }\n        }\n\n        vector<vector<long long>> maxTopLeft(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> maxTopRight(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> maxBottomLeft(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> maxBottomRight(n + 2, vector<long long>(m + 2, -inf));\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                maxTopLeft[i][j] = v[i][j];\n                maxTopLeft[i][j] = max(maxTopLeft[i][j], maxTopLeft[i][j - 1]);\n                maxTopLeft[i][j] = max(maxTopLeft[i][j], maxTopLeft[i - 1][j]);\n                maxTopLeft[i][j] = max(maxTopLeft[i][j], maxTopLeft[i - 1][j - 1]);\n            }\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = m; j >= 1; j--)\n            {\n                maxTopRight[i][j] = v[i][j];\n                maxTopRight[i][j] = max(maxTopRight[i][j], maxTopRight[i][j + 1]);\n                maxTopRight[i][j] = max(maxTopRight[i][j], maxTopRight[i - 1][j]);\n                maxTopRight[i][j] = max(maxTopRight[i][j], maxTopRight[i - 1][j + 1]);\n            }\n        }\n\n        for (int i = n; i >= 1; i--)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                maxBottomLeft[i][j] = v[i][j];\n                maxBottomLeft[i][j] = max(maxBottomLeft[i][j], maxBottomLeft[i][j - 1]);\n                maxBottomLeft[i][j] = max(maxBottomLeft[i][j], maxBottomLeft[i + 1][j]);\n                maxBottomLeft[i][j] = max(maxBottomLeft[i][j], maxBottomLeft[i + 1][j - 1]);\n            }\n        }\n\n        for (int i = n; i >= 1; i--)\n        {\n            for (int j = m; j >= 1; j--)\n            {\n                maxBottomRight[i][j] = v[i][j];\n                maxBottomRight[i][j] = max(maxBottomRight[i][j], maxBottomRight[i][j + 1]);\n                maxBottomRight[i][j] = max(maxBottomRight[i][j], maxBottomRight[i + 1][j]);\n                maxBottomRight[i][j] = max(maxBottomRight[i][j], maxBottomRight[i + 1][j + 1]);\n            }\n        }\n\n        vector<vector<long long>> maxTop(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> maxBottom(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> maxLeft(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> maxRight(n + 2, vector<long long>(m + 2, -inf));\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                maxTop[i][j] = max(v[i][j], maxTop[i-1][j]);\n            }\n        }\n\n        for (int i = n; i >= 1; i--)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                maxBottom[i][j] = max(v[i][j], maxBottom[i+1][j]);\n            }\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                maxLeft[i][j] = max(v[i][j], maxLeft[i][j-1]);\n            }\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = m; j >= 1; j--)\n            {\n                maxRight[i][j] = max(v[i][j], maxRight[i][j+1]);\n            }\n        }\n\n        vector<vector<long long>> dpTopLeft(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> dpTopRight(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> dpBottomLeft(n + 2, vector<long long>(m + 2, -inf));\n        vector<vector<long long>> dpBottomRight(n + 2, vector<long long>(m + 2, -inf));\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                dpTopLeft[i][j] = v[i][j] + maxTopLeft[i - 1][j - 1];\n                dpTopLeft[i][j] = max(dpTopLeft[i][j], maxTop[i-1][j] + maxLeft[i][j-1]);\n                dpTopLeft[i][j] = max(dpTopLeft[i][j], dpTopLeft[i][j - 1]);\n                dpTopLeft[i][j] = max(dpTopLeft[i][j], dpTopLeft[i - 1][j]);\n                dpTopLeft[i][j] = max(dpTopLeft[i][j], dpTopLeft[i - 1][j - 1]);\n            }\n        }\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = m; j >= 1; j--)\n            {\n                dpTopRight[i][j] = v[i][j] + maxTopRight[i - 1][j + 1];\n                dpTopRight[i][j] = max(dpTopRight[i][j], maxTop[i-1][j] + maxRight[i][j+1]);\n                dpTopRight[i][j] = max(dpTopRight[i][j], dpTopRight[i][j + 1]);\n                dpTopRight[i][j] = max(dpTopRight[i][j], dpTopRight[i - 1][j]);\n                dpTopRight[i][j] = max(dpTopRight[i][j], dpTopRight[i - 1][j + 1]);\n            }\n        }\n\n        for (int i = n; i >= 1; i--)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                dpBottomLeft[i][j] = v[i][j] + maxBottomLeft[i + 1][j - 1];\n                dpBottomLeft[i][j] = max(dpBottomLeft[i][j], maxBottom[i+1][j] + maxLeft[i][j-1]);\n                dpBottomLeft[i][j] = max(dpBottomLeft[i][j], dpBottomLeft[i][j - 1]);\n                dpBottomLeft[i][j] = max(dpBottomLeft[i][j], dpBottomLeft[i + 1][j]);\n                dpBottomLeft[i][j] = max(dpBottomLeft[i][j], dpBottomLeft[i + 1][j - 1]);\n            }\n        }\n\n        for (int i = n; i >= 1; i--)\n        {\n            for (int j = m; j >= 1; j--)\n            {\n                dpBottomRight[i][j] = v[i][j] + maxBottomRight[i + 1][j + 1];\n                dpBottomRight[i][j] = max(dpBottomRight[i][j], maxBottom[i+1][j] + maxRight[i][j+1]);\n                dpBottomRight[i][j] = max(dpBottomRight[i][j], dpBottomRight[i][j + 1]);\n                dpBottomRight[i][j] = max(dpBottomRight[i][j], dpBottomRight[i + 1][j]);\n                dpBottomRight[i][j] = max(dpBottomRight[i][j], dpBottomRight[i + 1][j + 1]);\n            }\n        }\n\n\n\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 1; j <= m; j++)\n            {\n                ans = max(ans, v[i][j] + dpTopLeft[i - 1][j - 1]);\n                ans = max(ans, v[i][j] + dpTopRight[i - 1][j + 1]);\n                ans = max(ans, v[i][j] + dpBottomLeft[i + 1][j - 1]);\n                ans = max(ans, v[i][j] + dpBottomRight[i + 1][j + 1]);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723909241",
    "subm_id": "1359184957"
}