{
    "username": "mycoolhairison",
    "submission": "from sortedcontainers import SortedList\nclass Solution:\n    def checkPeak(self, nums, i):\n        n = len(nums)\n        if i==0 or i==n-1:\n            return False\n        return (nums[i]>max(nums[i-1],nums[i+1]))\n        \n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        ret = []\n        peaks = SortedList()\n        isPeak = [0]*n\n        for i in range(n):\n            if self.checkPeak(nums,i):\n                peaks.add(i)\n                isPeak[i]=1\n        for q in queries:\n            if q[0]==2:\n                j = q[1]\n                nums[j]=q[2]\n                for k in {j-1,j,j+1}:\n                    if 0<=k<n:\n                        if (isPeak[k] and not self.checkPeak(nums,k)):\n                            isPeak[k]=0\n                            peaks.remove(k)\n                        elif (not isPeak[k] and self.checkPeak(nums,k)):\n                            isPeak[k]=1\n                            peaks.add(k)\n            if q[0]==1:\n                p = len(peaks)\n                if len(peaks)>0:\n                    a = peaks.bisect_left(q[1]+1)\n                    b = peaks.bisect_right(q[2]-1)\n                    # if a>p-1:\n                    #     ret.append(0)\n                    #     break\n                    # if peaks[a]==q[1]:\n                    #     a+=1\n                    #     if a>p-1:\n                    #         ret.append(0)\n                    #         break\n                    # if b==0:\n                    #     ret.append(0)\n                    #     break\n                    # if peaks[b-1]==q[2]:\n                    #     b-=1\n                    #     if b==0:\n                    #         break\n                    ret.append(max(0,b-a))\n                else:\n                    ret.append(0)\n        return ret\n        \n        ",
    "submit_ts": "1718507198",
    "subm_id": "1289644218"
}