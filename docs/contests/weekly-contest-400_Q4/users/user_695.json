{
    "username": "Dengxj",
    "submission": "class Tree {\npublic:\n    Tree(vector<int> nums): n(nums.size()), A(4 * n) {\n        build(nums, 1, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\nprivate:\n    void build(const vector<int>& nums, int i, int l, int r) {\n        if (l == r) {\n            A[i] = nums[l];\n            return;\n        }\n        if (l < r) {\n            int m = (l + r) / 2;\n            build(nums, 2 * i, l, m);\n            build(nums, 2 * i + 1, m + 1, r);\n            A[i] = A[2 * i] & A[2 * i + 1];\n        }\n    }\n\n    int query(int i, int l, int r, int L, int R) {\n        if (L <= l && r <= R)\n            return A[i];\n        if (R < l || r < L) {\n            return (1u << 31) - 1;\n        }\n        int m = (l + r) / 2;\n        int res = query(2 * i, l, m, L, R) & query(2 * i + 1, m + 1, r, L, R);\n        return res;\n    }\n\n    int n;\n    vector<int> A;\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        int res = INT_MAX;\n        \n        auto tree = Tree(nums);\n        for (int i = 0; i < n; ++i) {\n            int l = i, r = n;\n            while (l < r) {\n                int m = (l + r) / 2;\n                auto x = tree.query(i, m);\n                if (x >= k) {\n                    l = m + 1;\n                } else {\n                    r = m;\n                }\n            }\n            res = min(res, abs(k - tree.query(i, l)));\n            res = min(res, abs(k - tree.query(i, l - 1)));\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1717299368.0
}