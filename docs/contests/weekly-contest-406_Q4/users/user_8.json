{
    "username": "Coder-75",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the horizontal and vertical cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h = 0, v = 0; // Pointers for horizontal and vertical cuts\n        long long hPieces = 1, vPieces = 1; // Number of horizontal and vertical pieces\n        long long totalCost = 0;\n        \n        // Process cuts\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] > verticalCut[v]) {\n                totalCost += horizontalCut[h] * vPieces;\n                hPieces++;\n                h++;\n            } else {\n                totalCost += verticalCut[v] * hPieces;\n                vPieces++;\n                v++;\n            }\n        }\n        \n        // Add remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            totalCost += horizontalCut[h] * vPieces;\n            h++;\n        }\n        \n        // Add remaining vertical cuts\n        while (v < verticalCut.size()) {\n            totalCost += verticalCut[v] * hPieces;\n            v++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720924565",
    "subm_id": "1320221728"
}