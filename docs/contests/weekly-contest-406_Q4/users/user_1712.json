{
    "username": "user7828GM",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end());\n        reverse(horizontalCut.begin(), horizontalCut.end());\n        \n        sort(verticalCut.begin(), verticalCut.end());\n        reverse(verticalCut.begin(), verticalCut.end());\n        \n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n        \n        int i = 0, j = 0;\n        \n        while (i < horizontalCut.size() and j < verticalCut.size())\n        {\n            if (horizontalCut[i] >= verticalCut[j])\n                totalCost += (long long) horizontalCut[i] * (long long) verticalPieces, horizontalPieces++, i++;\n            else\n                totalCost += (long long) verticalCut[j] * (long long) horizontalPieces, verticalPieces++, j++;\n        }\n        \n        while (i < horizontalCut.size())\n            totalCost += (long long) horizontalCut[i] * (long long) verticalPieces, i++;\n            \n        while (j < verticalCut.size())\n            totalCost += (long long) verticalCut[j] * (long long) horizontalPieces, j++;\n            \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926420",
    "subm_id": "1320285738"
}