{
    "username": "Marmaduke",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        const int M = 200;\n        vector<int> dp(M,0);\n        vector<int> A = {1,0,0}; // state, whether you've stepped back, value of jump\n        queue<vector<int>> Q;\n        Q.push(A);\n        while(!Q.empty())\n        {\n            auto v = Q.front();\n            Q.pop();\n            int x = v[0];\n            int back = v[1];\n            int jump = v[2];\n            dp[x]++;\n            if(back == 0 && x >= 0)\n            {\n                Q.push({x-1, 1, jump});\n            }\n            if(x + (1<<jump) < M)\n            {\n                Q.push({x+(1<<jump), 0, jump+1});\n            }\n        }\n        if(k <= 50)\n        {\n            return dp[k];\n        }\n        \n        // now we just copy the pattern we see from testing\n        const int R = 40;\n        const long long int mod = 1e12;\n        vector<vector<long long int>> ncr(R+1, vector<long long int>(R+1));\n        ncr[0][0] = 1;\n        for(int n = 1; n <= R; n++)\n        {\n            for(int r = 0; r <= n; r++)\n            {\n                if(r == 0 || r == n)\n                {\n                    ncr[n][r] = 1;\n                }\n                else\n                {\n                    ncr[n][r] = (ncr[n-1][r-1] + ncr[n-1][r]) % mod;\n                }\n            }\n        }\n        \n        map<long long int, long long int> U;\n        long long int t = 16;\n        int row = 5;\n        const long long int limit = 2e9;\n        while(t < limit)\n        {\n            for(int k = 0; k <= row; k++)\n            {\n                U[t-k] = ncr[row][k];\n            }\n            t *= 2;\n            row++;\n        }\n        \n\n        \n        if(U.count(k))\n        {\n            return U[k];\n        }\n        \n        return 0;\n    }\n};",
    "submit_ts": "1716088308",
    "subm_id": "1261810163"
}