{
    "username": "adityaewms",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n        \n        // Sort requirements by end index\n        sort(requirements.begin(), requirements.end());\n        \n        // Initialize dp array\n        // dp[i][j] represents the number of valid permutations\n        // for the first i elements with j inversions\n        vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n        dp[0][0] = 1;\n        \n        vector<int> fact(n + 1, 1);\n        for (int i = 1; i <= n; i++) {\n            fact[i] = (1LL * fact[i-1] * i) % MOD;\n        }\n        \n        int req_idx = 0;\n        for (int i = 1; i <= n; i++) {\n            vector<vector<int>> new_dp(n + 1, vector<int>(401, 0));\n            \n            for (int j = 0; j <= 400; j++) {\n                for (int k = 0; k < i; k++) {\n                    // Place the new element at position k\n                    int new_inv = j + k;\n                    if (new_inv <= 400) {\n                        new_dp[i][new_inv] = (new_dp[i][new_inv] + dp[i-1][j]) % MOD;\n                    }\n                }\n            }\n            \n            // Check if this prefix needs to satisfy a requirement\n            if (req_idx < requirements.size() && requirements[req_idx][0] == i - 1) {\n                int cnt = requirements[req_idx][1];\n                for (int j = 0; j <= 400; j++) {\n                    if (j != cnt) new_dp[i][j] = 0;\n                }\n                req_idx++;\n            }\n            \n            dp = move(new_dp);\n        }\n        \n        // Sum up all valid permutations\n        int result = 0;\n        for (int j = 0; j <= 400; j++) {\n            result = (result + dp[n][j]) % MOD;\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": 1719069739.0
}