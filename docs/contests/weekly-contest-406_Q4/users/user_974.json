{
    "username": "horiseun",
    "submission": "class Solution {\npublic:\n  long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n    sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n    vector<pair<int, int>> cuts;\n    int idx1 = 0, idx2 = 0;\n    for (int i = 0; i < m + n - 2; i++) {\n      // cout << idx1 << \" \" << m - 1 << \" \" << idx2 << \" \" << n - 1 << \"\\n\";\n      if (idx1 == m - 1) {\n        cuts.push_back({1, verticalCut[idx2]});\n        idx2++;\n        continue;\n      }\n      if (idx2 == n - 1) {\n        cuts.push_back({0, horizontalCut[idx1]});\n        idx1++;\n        continue;\n      }\n      if (horizontalCut[idx1] > verticalCut[idx2]) {\n        cuts.push_back({0, horizontalCut[idx1]});\n        idx1++;\n      } else {\n        cuts.push_back({1, verticalCut[idx2]});\n        idx2++;\n      }\n      // if (i % 2) {\n      //   cuts.push_back({1, verticalCut[idx2]});\n      //   idx2++;\n      // } else {\n      //   cuts.push_back({0, horizontalCut[idx1]});\n      //   idx1++;\n      // }\n    }\n    // for (auto [a, b] : cuts) {\n    //   cout << a << \" \" << b << \"\\n\";\n    // }\n    long long ans1 = 0, hpieces = 1, vpieces = 1;\n    for (auto [a, b] : cuts) {\n      if (a == 0) {\n        // this is a horizontal cut\n        ans1 += vpieces * b;\n        hpieces++;\n      } else {\n        ans1 += hpieces * b;\n        vpieces++;\n      }\n    }\n    long long ans2 = 0;\n    hpieces = vpieces = 1;\n    cuts.clear();\n    idx1 = idx2 = 0;\n    for (int i = 0; i < m + n - 2; i++) {\n      // cout << idx1 << \" \" << m - 1 << \" \" << idx2 << \" \" << n - 1 << \"\\n\";\n      if (idx1 == m - 1) {\n        cuts.push_back({1, verticalCut[idx2]});\n        idx2++;\n        continue;\n      }\n      if (idx2 == n - 1) {\n        cuts.push_back({0, horizontalCut[idx1]});\n        idx1++;\n        continue;\n      }\n      if (i % 2 == 0) {\n        cuts.push_back({1, verticalCut[idx2]});\n        idx2++;\n      } else {\n        cuts.push_back({0, horizontalCut[idx1]});\n        idx1++;\n      }\n    }\n    for (auto [a, b] : cuts) {\n      if (a == 0) {\n        // this is a horizontal cut\n        ans2 += vpieces * b;\n        hpieces++;\n      } else {\n        ans2 += hpieces * b;\n        vpieces++;\n      }\n    }\n    return min(ans1, ans2);\n  }\n};",
    "submit_ts": "1720925662",
    "subm_id": "1320262086"
}