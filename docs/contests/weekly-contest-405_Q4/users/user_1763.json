{
    "username": "Shree_Govind_Jee",
    "submission": "class TrieN {\npublic:\n    unordered_map<char, TrieN*> child;\n    vector<pair<int, int>> list;\n};\n\nclass Trie {\npublic:\n    TrieN* root_node;\n\n    Trie() {\n        root_node = new TrieN();\n    }\n\n    void insert(string word, int idx, int cost) {\n        TrieN* node = root_node;\n        for (char c : word) {\n            if (!node->child.count(c)) {\n                node->child[c] = new TrieN();\n            }\n            node = node->child[c];\n        }\n        node->list.push_back({idx, cost});\n    }\n};\n\n\n\n// DRIVE CODE\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         length of the target\n        int t_len = target.size();\n        \n        \n        //         length of the words\n        int size = words.size();\n        \n        \n        \n//         DP initilization\n        vector<int> dp(t_len + 1, INT_MAX);\n        dp[0] = 0;\n\n        \n        \n// MAJOR PART\n        Trie tire;\n        for (int i = 0; i < size; ++i) {\n            tire.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < t_len; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieN* tn = tire.root_node;\n            for (int j = i; j < t_len; ++j) {\n                if (!tn->child.count(target[j])) {\n                    break;\n                }\n                tn = tn->child[target[j]];\n                for (auto& n : tn->list) {\n                    int len = words[n.first].size();\n                    if (i + len <= t_len) {\n                        dp[i + len] = min(dp[i] + n.second, dp[i + len]);\n                    }\n                }\n            }\n        }\n\n        return dp[t_len] == INT_MAX ? -1 : dp[t_len];\n    }\n};",
    "submit_ts": "1720324729",
    "subm_id": "1312406615"
}