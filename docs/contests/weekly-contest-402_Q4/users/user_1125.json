{
    "username": "BerryWong",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = SortedList()\n        def is_peak(i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n        for i in range(1, len(nums) - 1):\n            if is_peak(i):\n                peaks.add(i)\n\n        result = []\n        for query in queries:\n            if query[0] == 2:\n                index, value = query[1], query[2]\n                # Update the value in nums\n                nums[index] = value\n                # Check and update peaks around the changed index\n                for i in range(max(1, index - 1), min(len(nums) - 1, index + 2)):\n                    if is_peak(i):\n                        if i not in peaks:\n                            peaks.add(i)\n                    elif i in peaks:\n                        peaks.remove(i)\n                \n            elif query[0] == 1:\n                l, r = query[1], query[2]\n                # Count peaks in the range\n                count = 0\n                # Use bisect to find the range of peaks within the query bounds\n                start = peaks.bisect_left(l + 1)\n                end = peaks.bisect_right(r - 1)\n                count = max(end - start, 0)\n                result.append(count)\n\n        return result\n        ",
    "submit_ts": 1718508109.0
}