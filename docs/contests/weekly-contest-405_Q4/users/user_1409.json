{
    "username": "jmyanxiang",
    "submission": "class Trie:\n    char: Optional[str]\n    cost: Optional[int]\n    children: Dict[str, \"Trie\"]\n    min_child_len: int\n\n    def __init__(self, char: str = None):\n        self.char = char\n        self.cost = None\n        self.children = {}\n        self.min_child_len = inf\n\n    def __contains__(self, char: str) -> bool:\n        return char in self.children\n\n    def __getitem__(self, char: str) -> Optional[str]:\n        return self.children[char] if char in self.children else None\n\n    def __setitem__(self, char: str, trie: \"Trie\"):\n        self.children[char] = trie\n\n    def insert(self, word: str, cost: int) -> None:\n        curr = self\n        for i, char in enumerate(word):\n            curr.min_child_len = min(curr.min_child_len, len(word) - i)\n            if char not in curr:\n                curr[char] = Trie(char)\n            curr = curr[char]\n        if curr.cost is None:\n            curr.cost = cost\n        else:\n            curr.cost = min(curr.cost, cost)\n        curr.min_child_len = 0\n        \n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        \n        # trie = Trie()\n        # for word, cost in zip(words, costs):\n        #     trie.insert(word, cost)\n        word2cost = defaultdict(lambda: inf)\n        for word, cost in zip(words, costs):\n            word2cost[word] = min(word2cost[word], cost)\n        \n        dp = [inf] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(len(target)):\n            if dp[i] == inf:\n                continue\n            for word, cost in word2cost.items():\n                if target.startswith(word, i):\n                    dp[i + len(word)] = min(dp[i + len(word)], dp[i] + cost)\n    \n        return dp[n] if dp[n] < inf else -1\n\n#     \"r\"\n# [\"r\",\"r\",\"r\",\"r\"]\n# [1,6,3,3]\n# => 1",
    "submit_ts": "1720323532",
    "subm_id": "1312377852"
}