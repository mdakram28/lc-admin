{
    "username": "satviksr",
    "submission": "class Solution {\n    const int N = 2001;\npublic:\n    int countOfPairs(vector<int>& nums) {\n        // DP[i][X][Y] = \n        int n = nums.size();\n        vector<long long> dp(N + 1);\n        dp[0] = 1;\n        accumulate(dp);\n        long long ans = 0;\n        int p = 1e9 + 7;\n        int prev = nums[0];\n        for(int i = 0; i < n; i++) {\n            int s = nums[i];\n            vector<long long> next_dp(N + 1);\n            long long t = 0;\n            int diff = max(0, s - prev);\n            for(int x = 0; x <= s; x++) {\n                int res = x - diff >= 0 && x - diff < N ? dp[x - diff] : 0;\n                next_dp[x] = res;\n                t += res;\n            }\n            prev = nums[i];\n            swap(next_dp, dp);\n            ans = t % p;\n            accumulate(dp);\n        }\n        return ans;\n    }\n\n    void accumulate(vector<long long> &dp) {\n        int p = 1e9 + 7;\n        // cout << dp[0] <<\" \";\n        for(int i = 1; i < N; i++) {\n                dp[i] = (dp[i] + dp[i-1]) % p;\n                // cout << dp[i] <<\" \";\n        }\n        // cout << endl;\n    }\n};\n\n\n/*\n[1, 0, 0, 0]\n[0, 1, 0, 0]\n[0, 0, 1, 0]\n[0, 0, 0, 1]\n\n[0, 2] -> 1\n[1, 1] -> 1\n[2, 0] -> 1\n\n[0] -> 1\n[1] -> 2\n[2] -> 3\n\n\n[0, 3] -> nil\n[1, 2] -> (0, 2)\n[2, 1] -> (1, 1), (2, 0)\n[3, 0] -> (2, 0)\n\n\n[0] -> 0\n[1] -> 1\n[2] -> 2\n[3] -> 1\n[4] -> 0\n\n[0, 2] -> nil\n[1, 1] -> (1, 2) #1\n[2, 0] -> (1, 2) #1, (2, 1) #2\n\n[0] -> 0\n[1] -> 1\n[2] -> 3\n*/",
    "submit_ts": "1723347945",
    "subm_id": "1351608627"
}