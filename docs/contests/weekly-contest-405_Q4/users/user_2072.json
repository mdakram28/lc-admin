{
    "username": "vijay_sankar_reddy",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n         int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; // base case: cost of forming an empty string is 0\n        \n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            List<int[]> matches = trie.search(target, i);\n            for (int[] match : matches) {\n                int endIdx = match[0];\n                int cost = match[1];\n                dp[endIdx] = Math.min(dp[endIdx], dp[i] + cost);\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n    static class TrieNode {\n        TrieNode[] children;\n        int cost;\n        \n        TrieNode() {\n            this.children = new TrieNode[26];\n            this.cost = Integer.MAX_VALUE; // Initialize with a large value\n        }\n    }\n    \n    static class Trie {\n        TrieNode root;\n        \n        Trie() {\n            this.root = new TrieNode();\n        }\n        \n        void insert(String word, int cost) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                if (node.children[c - 'a'] == null) {\n                    node.children[c - 'a'] = new TrieNode();\n                }\n                node = node.children[c - 'a'];\n            }\n            node.cost = Math.min(node.cost, cost); // Store the minimum cost for this word\n        }\n        \n        List<int[]> search(String target, int start) {\n            List<int[]> matches = new ArrayList<>();\n            TrieNode node = root;\n            for (int i = start; i < target.length(); i++) {\n                char c = target.charAt(i);\n                if (node.children[c - 'a'] == null) break;\n                node = node.children[c - 'a'];\n                if (node.cost != Integer.MAX_VALUE) {\n                    matches.add(new int[]{i + 1, node.cost}); // store end index and cost\n                }\n            }\n            return matches;\n        }\n    }\n}",
    "submit_ts": "1720321228",
    "subm_id": "1312317074"
}