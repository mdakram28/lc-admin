{
    "username": "Citypop",
    "submission": "class Solution {\n    const int64_t MOD = (int64_t)1e9 + 7;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int m = requirements.size();\n        int max_c = 0;\n        for(int i = 0; i < m; i++) {\n            max_c = std::max(max_c, requirements[i][1]);\n        }\n        \n        std::sort(requirements.begin(), requirements.end());\n        \n        if(requirements[0][0] == 0 && requirements[0][1] != 0) {\n            return 0;\n        }\n        \n        std::vector<std::vector<int64_t>> dp(n + 1, std::vector<int64_t>(max_c + 1, 0));\n        dp[1][0] = 1;\n        \n        for(int i = 2; i <= n; i++) {\n            auto it = std::lower_bound(requirements.begin(), requirements.end(), i - 1, [](const std::vector<int>& a, int x) {\n                return a[0] < x;\n            });\n            \n            if(it == requirements.end() || (*it)[0] != i - 1) {\n                for(int j = 0; j <= max_c; j++) {\n                    for(int k = 0; k < i; k++) {\n                        if(i - k - 1 + j <= max_c) {\n                            dp[i][i - k - 1 + j] += dp[i - 1][j];\n                            dp[i][i - k - 1 + j] %= MOD;\n                        }\n                    }\n                }\n            } else {\n                int j = (*it)[1];\n                for(int k = 0; k < i; k++) {\n                    if(j - (i - k - 1) >= 0) {\n                        dp[i][j] += dp[i - 1][j - (i - k - 1)];\n                        dp[i][j] %= MOD;\n                    }\n                }\n            }\n        }\n        \n        return dp[n][requirements[m - 1][1]];\n    }\n};",
    "submit_ts": 1719068610.0
}