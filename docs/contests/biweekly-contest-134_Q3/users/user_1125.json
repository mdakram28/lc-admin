{
    "username": "mohdquamartyagi",
    "submission": "class Solution {\npublic:\n    \n    int solve(vector<int>& v, int k){\n      int n = v.size(); // Get the size of the vector v\nint cnt = 0; // Initialize the count of valid sequences\nint consecutiveDifferentColors = 1; // Initialize the count of consecutive different colors\nint i = 1; // Start from the second element\n\nwhile (i < n + k - 1) { // Iterate until we have checked n + k - 2 elements\n    int currIndex = i; // Current index\n    int prevIndex = i - 1; // Previous index\n\n    // Adjust indices to wrap around if they exceed the size of v\n    if (currIndex >= n) {\n        currIndex -= n;\n    }\n    if (prevIndex >= n) {\n        prevIndex -= n;\n    }\n\n    // Check if the current and previous elements are different\n    if (v[currIndex] != v[prevIndex]) {\n        ++consecutiveDifferentColors; // Increment the count of different colors\n    } else {\n        consecutiveDifferentColors = 1; // Reset the count if they are the same\n    }\n\n    // If the count of different colors is at least k, increment the valid sequence count\n    if (consecutiveDifferentColors >= k) {\n        ++cnt;\n    }\n\n    ++i; // Move to the next element\n}\n\nreturn cnt; // Return the count of valid sequences\n\n    }\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        return solve(colors,k);\n    }\n};",
    "submit_ts": "1720280691",
    "subm_id": "1311798641"
}