{
    "username": "trentinitaco",
    "submission": "class Solution {\npublic:\n    int C(int n, int k) {\n        double res = 1;\n        for (int i = 1; i <= k; ++i)\n            res = res * (n - k + i) / i;\n        return (int)(res + 0.01);\n    }   \n    \n    int waysToReachStair(int k) {\n        // insight #1 - for numbers greater than 4, we will only have one possible number of times we need to go back, so we just do combinatorics. So we just need to hardcode numbers before this, and then for nubmers larger, find the log base 2 of the number\n        if(k == 0)\n            return 2;\n        if(k == 1)\n            return 4;\n        if(k == 2)\n            return 4;\n        if(k == 3)\n            return 3;\n        if(k == 4)\n            return 2;\n        \n        int bin = ceil(log2(k)); // number of times we want to go up\n        int diff = (long long)pow((long long)2, bin) - k; // number of times we need to go down\n        if(diff > bin+1)\n            return 0;\n        return C(bin+1, diff);\n    }   \n};",
    "submit_ts": "1716088906",
    "subm_id": "1261827446"
}