{
    "username": "frogfox",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n=len(circles)\n        pat=[i for i in range(n)]\n        \n        def f(x,y):\n            return [min(dic[x][0],dic[y][0]),\n            min(dic[x][1],dic[y][1]),\n            max(dic[x][2],dic[y][2]),\n            max(dic[x][3],dic[y][3])]\n        \n        dic={}\n        for i in range(n):\n            x,y,r=circles[i]\n            dic[i]=[max(0,x-r),max(0,y-r),min(x+r,X),min(y+r,Y)]\n            \n        def find(x):\n            if pat[x]!=x:\n                pat[x]=find(pat[x])\n            return pat[x]\n        \n        def union(x,y):\n            a,b=find(x),find(y)\n            if a<b:\n                pat[b]=a\n                dic[a]=f(a,b)\n            elif b<a:\n                pat[a]=b\n                dic[b]=f(a,b)\n        \n        for i in range(n):\n            x1,y1,r1=circles[i]\n            for j in range(i):\n                x2,y2,r2=circles[j]\n                dx=abs(x2-x1)\n                dy=abs(y2-y1)\n                dz=dx*dx+dy*dy\n                # print('i',i,'j',j,'dz',dz,(r1+r2)**2)\n                if (r1+r2)**2>=dz:\n                    # print('union')\n                    union(i,j)\n        \n        for i in range(n):\n            p=find(i)\n            # print('i',i,'p',p,dic[p])\n            if dic[p][0]==0 and dic[p][2]==X:return False\n            if dic[p][1]==0 and dic[p][3]==Y:return False\n            if (dic[p][0]==0 and dic[p][2]<=X) and (dic[p][1]==0 and dic[p][3]<=Y):return False\n            if (dic[p][0]>=0 and dic[p][2]==X) and (dic[p][1]>=0 and dic[p][3]==Y):return False\n            \n        return True\n            \n                ",
    "submit_ts": "1722137068",
    "subm_id": "1335753224"
}