{
    "username": "yzkkai",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        vector dp(n + 1, vector<int> (k + 1, -1));\n        vector use(n + 1, vector<int>(k + 1));\n        vector nxt(n + 1, vector<int>(k + 1));\n\n        vector<int> ten(n + 1, 1);\n        for (int i = 1; i <= n; ++i)\n            ten[i] = ten[i - 1] * 10 % k;\n\n        auto dfs = [&](auto& self, int pos, int rem) -> bool {\n            if (dp[pos][rem] != -1) return dp[pos][rem];\n            dp[pos][rem] = 0;\n            if (pos == (n + 1) / 2) return rem == 0;\n            for (int i = 9; i >= 0; --i) {\n                int tmp = ((rem - i * (ten[n - pos - 1] + ten[pos]) % k) + k) % k;\n                if (n - pos - 1 == pos)\n                    tmp = ((rem - i * ten[pos] % k) + k) % k;\n\n                if (self(self, pos + 1, tmp)) {\n                    dp[pos][rem] = 1;\n                    use[pos][rem] = i;\n                    nxt[pos][rem] = tmp;\n                    return 1;\n                }\n            }\n\n            return 0;\n        };\n\n        dfs(dfs, 0, 0);\n\n        string ans;\n        int pos = 0, rem = 0;\n        while (pos != (n + 1) / 2) {\n            ans += '0' + use[pos][rem];\n            rem = nxt[pos][rem];\n            ++pos;\n        }\n\n        if (n & 1) {\n            string t = ans.substr(0, n / 2);\n            reverse(t.begin(), t.end());\n            ans += t;\n        }\n        else {\n            string t = ans;\n            reverse(t.begin(), t.end());\n            ans += t;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723950312",
    "subm_id": "1359742685"
}