{
    "username": "mkawa222",
    "submission": "class SparseTable:\n    def __init__(self, op, e, aa):\n        self.op = op\n        self.e = e\n        self.w = w = len(aa)\n        self.h = h = w.bit_length()\n        table = [aa]+[[e() for _ in range(w)] for _ in range(h-1)]\n        tablei1 = table[0]\n        for i in range(1, h):\n            tablei = table[i]\n            for j in range(w-(1 << i)+1):\n                rj = j+(1 << (i-1))\n                tablei[j] = op(tablei1[j], tablei1[rj])\n            tablei1 = tablei\n        self.table = table\n\n    # [l,r)\u306e\u53d6\u5f97\n    def prod(self, l, r):\n        if l == r: return self.e()\n        i = (r-l).bit_length()-1\n        tablei = self.table[i]\n        return self.op(tablei[l], tablei[r-(1 << i)])\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        def binary_search(l, r, minimize):\n            if minimize: l -= 1\n            else: r += 1\n            while l+1 < r:\n                m = (l+r)//2\n                if ok(m) ^ minimize: l = m\n                else: r = m\n            if minimize: return r\n            return l\n\n        def ok(m):\n            return sp.prod(m,i+1)>>j&1\n\n        e=(1<<31)-1\n        sp=SparseTable(lambda a,b:a&b,lambda :e,nums)\n        # cs=[]\n        # for i in range(31):\n        #     cur=[0]\n        #     for a in nums:\n        #         cur.append(cur[-1]+a>>i&1)\n        #     cs.append(cur)\n        ans=10**9+5\n        last=[0]*31\n        for i,a in enumerate(nums):\n            for j in range(30):\n                if a>>j&1:continue\n                last[j]=i\n            ii=sorted(set(last))\n            for l in ii:\n                ans=min(ans,abs(k-sp.prod(l,i+1)))\n        return ans\n",
    "submit_ts": "1717300352",
    "subm_id": "1274841471"
}