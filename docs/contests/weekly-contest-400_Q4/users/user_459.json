{
    "username": "nicolasalba",
    "submission": "#define ACTIVE_DEBUG\n\n// ############ Ignore macros and debugger ########################\n#include \"bits/stdc++.h\"\nusing namespace std;\n\n#define pb push_back\n#define F first\n#define S second\n#define all(x) (x).begin(), (x).end()\n#define sortt(x) sort(all(x))\n\nusing ll = long long;\nusing ld = long double;\nusing pi = pair<int, int>;\nusing pl = pair<ll, ll>;\nusing ti = tuple<long long, long long, long long>;\nusing vi = vector<int>;\nusing vb = vector<bool>;\nusing vl = vector<ll>;\nusing vs = vector<string>;\nusing vvl = vector<vl>;\nusing vpl = vector<pl>;\n\ntemplate<class T> using pql = priority_queue<T,vector<T>,greater<T>>;\ntemplate<class T> using pqg = priority_queue<T>;\n\nvoid __print(int x) {cout << x;}\nvoid __print(long long x) {cout << x;}\nvoid __print(string x) {cout << x;}\nvoid __print(char x) {cout << '\\'' << x << '\\'';}\nvoid __print(bool x) {cout << (x ? \"T\" : \"F\");}\n\nvoid __print(map<ll,ll> mp) {\n    for (auto p : mp) {\n        cout << p.F << \":\" << p.S << \",\";\n    }\n}\n\ntemplate<typename T> // for data structures (vector, set, map, etc)\n\nvoid __print(const T &xs)\n{cout << \"[ \"; for (auto &x : xs) {__print(x);cout << ' ';}cout << ']';}\n\nvoid _print()\n{cout << \"]\" << endl;}\n\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v)\n{__print(t); if (sizeof...(v)) cout << \", \"; _print(v...);}\n\n#ifdef ACTIVE_DEBUG\n    #define deb(x...) cout << \"[\" << #x << \"] = [\", _print(x)\n    #define LINE cout << \"-------------------\" << endl;\n#else\n    #define deb(x...) \"C\"\n    #define LINE \"C\"\n#endif\n// ############ Ignore macros and debugger ########################\n\n\nstruct Node { ll x = (1ll << 60)-1; };\n\nNode e() { return Node(); }\n \nNode op(Node &a, Node &b) {\n    Node c;\n    c.x = a.x & b.x;\n    return c;\n}\n// <<<<<<<\n \nstruct segtree { \n    vector<Node> t;\n    ll n;\n \n    void init(int n) {\n        t.assign(n * 2, e());\n        this->n = n;\n    }\n \n    void init(vector<Node>& s) {\n        n = s.size();\n        t.assign(n * 2, e());\n        for (int i = 0; i < n; i++) {\n            t[i+n] = s[i];\n        }\n        build();\n    }\n \n    void build() {  // build the tree\n        for (int i = n - 1; i > 0; --i) t[i] = op(t[i<<1], t[i<<1|1]);\n    }\n \n    // set value at position p\n    void update(int p, const Node& value) {\n        for (t[p += n] = value; p >>= 1; ) t[p] = op(t[p<<1], t[p<<1|1]);\n    }\n \n    // sum on interval [l, r]\n    Node query(int l, int r) {\n        r++; // make this inclusive\n        Node resl=e(), resr=e(); // null element\n        for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\n            if (l&1) resl = op(resl, t[l++]);\n            if (r&1) resr = op(t[--r], resr);\n        }\n        return op(resl, resr);\n    }\n \n    Node get(int i) {\n        return query(i, i);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        segtree sp;\n        sp.init(nums.size());\n        ll n = nums.size();\n        for (int i =0;i<n;i++) {\n            sp.update(i,{ nums[i] });\n        }\n        ll mn = INT64_MAX;\n\n        for (int i = 0;i<n;i++) {\n            ll left = i;\n            ll right = n-1;\n            ll ans = i;\n            while (left <= right) {\n                ll mid = (left + right)/2;\n                if (sp.query(i,mid).x > k) {\n                    ans = mid;\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            // deb(i,ans);\n            mn = min(mn, abs((ll)k-(ll)sp.query(i,ans).x));\n            if (ans + 1 < n) {\n                mn = min(mn, abs((ll)k-(ll)sp.query(i,ans+1).x));\n            }\n        }\n        return mn;\n    }\n};",
    "submit_ts": 1717297932.0
}