{
    "username": "AnujPanchal2001",
    "submission": "class Solution {\n        public int minFlips(int[][] grid) {\n            return solve(grid, grid.length, grid[0].length);\n        }\n\n        private int solve(int[][] grid, int m, int n) {\n//            int count = solveRow(grid, m, n);\n//            count += solveCol(grid, m, n);\n//\n//            count += solveOne(grid, m, n);\n\n            int count1 = 0;\n            int count2 = 0;\n            int count3 = 0;\n            long[] ans = {0L};\n\n            if((m & 1) == 1) {\n                for(int j=0;j<n/2;j++) {\n                    int sum = grid[m >> 1][j] + grid[m >> 1][n - 1 - j];\n\n                    if(sum == 0)\n                        continue;\n                    else if(sum == 1)\n                        count1++;\n                    else if(sum == 2)\n                        count2++;\n                    else\n                        count3++;\n                }\n            }\n\n            if((n & 1) == 1) {\n                for(int i=0;i<m/2;i++) {\n                    int sum = grid[i][n >> 1] + grid[m - 1 - i][n >> 1];\n\n                    if(sum == 0)\n                        continue;\n                    else if(sum == 1)\n                        count1++;\n                    else if(sum == 2)\n                        count2++;\n                    else\n                        count3++;\n                }\n            }\n\n            if((count2 & 1) == 0) {\n                ans[0] += count1;\n            }else {\n                if(count1 <= 0) {\n                    ans[0] += 3;\n                    ans[0]--;\n                } else\n                    ans[0] += count1;\n            }\n\n            if(((m & 1) == 1) && ((n & 1) == 1)) {\n                ans[0] += grid[m >> 1][n >> 1];\n            }\n\n            int count = 0;\n            for(int i=0;i<(m >> 1);i++) {\n                for(int j=0;j<(n >> 1);j++) {\n                    int count4 = 0;\n                    if(grid[i][j] == 1)\n                        count4++;\n                    if(grid[m - 1 - i][j] == 1)\n                        count4++;\n                    if(grid[i][n - 1- j] == 1)\n                        count4++;\n                    if(grid[m - 1 - i][n - 1- j] == 1)\n                        count4++;\n\n                    if(count4 == 0)\n                        continue;\n                    if(count4 == 4)\n                        continue;\n                    ans[0] += (count4 < 4 - count4)? count4: 4 - count4;\n                    ans[0]++;\n                    count++;\n                }\n            }\n            return (int)ans[0] - count;\n        }\n\n//        private int solveRow(int[][] grid, int m, int n) {\n//            int count = 0;\n//            for(int i=0;i<m;i++) {\n//                for(int j=0;j<n/2;j++) {\n//                    if(grid[i][j] != grid[i][n - 1 - j])\n//                        count++;\n//                }\n//            }\n//            return count;\n//        }\n//\n//        private int solveCol(int[][] grid, int m, int n) {\n//            int count = 0;\n//            for(int j=0;j<n;j++) {\n//                for(int i=0;i<m/2;i++) {\n//                    if(grid[i][j] != grid[m - i - 1][j])\n//                        count++;\n//                }\n//            }\n//            return count;\n//        }\n    }",
    "submit_ts": "1722700117",
    "subm_id": "1343232206"
}