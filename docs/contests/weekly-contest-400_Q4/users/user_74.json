{
    "username": "MeetBrahmbhatt",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& v, int k) {\n        int n = (int) v.size();\n        int ans = INT_MAX;\n        \n        vector<vector<int>> B(n + 1, vector<int>(31, n));\n        for (int i = n - 1; i >= 0; i--) { \n            for (int j = 0; j < 31; j++) { \n                B[i][j] = B[i + 1][j];\n                if (~v[i] >> j & 1) {\n                    B[i][j] = i;\n                }\n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            vector<int> I(31);\n            iota(begin(I), end(I), 0);\n            sort(begin(I), end(I), [&] (int x, int y) {\n               return B[i][x] < B[i][y]; \n            });\n            \n            int cur = v[i];\n            ans = min(ans, abs(cur - k));\n            \n            for (int j = 0; j < 31; j++) {\n                int ptr = j;\n                while (ptr < 31 and B[i][I[ptr]] == B[i][I[j]]) {\n                    if (B[i][I[j]] < n and (v[i] >> I[ptr] & 1)) {\n                        cur ^= (1 << I[ptr]);\n                    }\n                    ptr++;\n                }\n                ans = min(ans, abs(cur - k));\n                j = ptr - 1;\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717297042.0
}