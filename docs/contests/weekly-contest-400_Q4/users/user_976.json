{
    "username": "SpecialBeing",
    "submission": "class Solution {\npublic:\n    \n    \n    int AND (vector<vector<int>>& digits, int l, int r) {\n        int ans = 0;\n        for (int i = 0; i < 30; i++) {\n            if (digits[i][l] == digits[i][r]) ans += (1 << i);\n        }\n        return ans;\n    }\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> digits(30, vector<int>(n + 1));\n        for (int i = 0; i < 30; i += 1) {\n            for (int j = 0; j < n; ++j) {\n                digits[i][j + 1] = digits[i][j];\n                if ((nums[j] & (1 << i)) == 0) digits[i][j + 1] += 1;\n            }\n        }\n        \n        int ans = 1e9;\n        for (int i = 0; i < n; ++i){\n            int l = i + 1, r = n;\n            int cur = AND(digits, i, l);\n            if (cur <= k) {\n                ans = min(ans, k - cur);\n                continue;\n            }\n            cur = AND(digits, i, r);\n            if (cur >= k){\n                ans = min(ans, cur - k);\n                continue;\n            }\n            while (r - l > 1) {\n                int m = (l + r) / 2;\n                cur = AND(digits, i, m);\n                if (cur > k) l = m;\n                else r = m;\n            }\n            ans = min(ans, abs(k - AND(digits, i, l)));\n            ans = min(ans, abs(k - AND(digits, i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717300173.0
}