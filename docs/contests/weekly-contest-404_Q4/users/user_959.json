{
    "username": "Raj_vardhan_Singh",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int len1 = edges1.size() + 1;\n        int len2 = edges2.size() + 1;\n        \n        vector<vector<int>> adjList1(len1);\n        vector<vector<int>> adjList2(len2);\n        \n        for (const auto& link : edges1) {\n            adjList1[link[0]].push_back(link[1]);\n            adjList1[link[1]].push_back(link[0]);\n        }\n        for (const auto& link : edges2) {\n            adjList2[link[0]].push_back(link[1]);\n            adjList2[link[1]].push_back(link[0]);\n        }\n        \n        auto dfsHelper = [&](const vector<vector<int>>& graph, int startNode, int& farNode) {\n            int nodes = graph.size();\n            vector<int> dist(nodes, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int depth) {\n                dist[node] = depth;\n                if (depth > dist[farNode]) {\n                    farNode = node;\n                }\n                for (int neighbor : graph[node]) {\n                    if (dist[neighbor] == -1) {\n                        dfsVisit(neighbor, depth + 1);\n                    }\n                }\n            };\n            farNode = startNode;\n            dfsVisit(startNode, 0);\n            return dist[farNode];\n        };\n        \n        int firstNode = 0;\n        dfsHelper(adjList1, 0, firstNode);\n        int diam1 = dfsHelper(adjList1, firstNode, firstNode);\n        \n        int secondNode = 0;\n        dfsHelper(adjList2, 0, secondNode);\n        int diam2 = dfsHelper(adjList2, secondNode, secondNode);\n        \n        int minimumDiameter = max(diam1, diam2);\n        int halfDiam1 = (diam1 + 1) / 2;\n        int halfDiam2 = (diam2 + 1) / 2;\n        minimumDiameter = max(minimumDiameter, halfDiam1 + halfDiam2 + 1);\n        \n        return minimumDiameter;\n    }\n};\n",
    "submit_ts": "1719719395",
    "subm_id": "1304440923"
}