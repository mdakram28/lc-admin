{
    "username": "shivam_kumar124",
    "submission": "#include <algorithm>\n#include <iostream>\n#include <vector>\n\n#define MAX_VAL INT32_MAX\n\nclass Solution {\npublic:\n    class SegTree {\n    public:\n        std::vector<int> segTree;\n        int size;\n\n        SegTree(std::vector<int>& data) {\n            size = data.size();\n            segTree.resize(4 * size);\n            construct(data, 0, 0, size - 1);\n        }\n\n        void construct(std::vector<int>& data, int node, int start, int end) {\n            if (start == end) {\n                segTree[node] = data[start];\n            } else {\n                int mid = (start + end) / 2;\n                construct(data, 2 * node + 1, start, mid);\n                construct(data, 2 * node + 2, mid + 1, end);\n                segTree[node] = segTree[2 * node + 1] & segTree[2 * node + 2];\n            }\n        }\n\n        int getAndInRange(int left, int right) {\n            return getAndInRange(0, 0, size - 1, left, right);\n        }\n\n    private:\n        int getAndInRange(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return MAX_VAL;\n            }\n            if (left <= start && end <= right) {\n                return segTree[node];\n            }\n            int mid = (start + end) / 2;\n            int leftAnd = getAndInRange(2 * node + 1, start, mid, left, right);\n            int rightAnd = getAndInRange(2 * node + 2, mid + 1, end, left, right);\n            return leftAnd & rightAnd;\n        }\n    };\n\n    int minimumDifference(std::vector<int>& data, int target) {\n        int n = data.size();\n        SegTree st(data);\n        int result = MAX_VAL;\n\n        for (int i = 0; i < n; i++) {\n            int left = i - 1, right = n - 1;\n\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (st.getAndInRange(i, mid) >= target) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n\n            if (left != i - 1) {\n                result = min(result, abs(st.getAndInRange(i, left) - target));\n            }\n            result = min(result, abs(target - st.getAndInRange(i, right)));\n        }\n        return result;\n    }\n};\n",
    "submit_ts": "1717300670",
    "subm_id": "1274851282"
}