{
    "username": "Nishant_2604",
    "submission": "class Solution {\npublic:\n   void dfs(int node, int parent, std::vector<std::vector<int>>& adj, std::vector<std::vector<int>>& dp) {\n        dp[node][0] = 0;\n        dp[node][1] = 0;\n\n        for (auto neighbor : adj[node]) {\n            if (neighbor != parent) {\n                dfs(neighbor, node, adj, dp);\n            }\n        }\n\n        int maxChild1 = 0, maxChild2 = 0;\n        for (auto neighbor : adj[node]) {\n            if (neighbor != parent) {\n                if (dp[neighbor][0] > maxChild1) {\n                    maxChild2 = maxChild1;\n                    maxChild1 = dp[neighbor][0];\n                } else if (dp[neighbor][0] > maxChild2) {\n                    maxChild2 = dp[neighbor][0];\n                }\n            }\n        }\n          dp[node][0] = maxChild1 + 1;\n        dp[node][1] = 1 + maxChild1 + maxChild2;\n       \n    }\n\n    int minimumDiameterAfterMerge(std::vector<std::vector<int>>& edges1, std::vector<std::vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        std::vector<std::vector<int>> adj1(n), adj2(m);\n          for (auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        for (auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n       \n        std::vector<std::vector<int>> dp1(n, std::vector<int>(2));\n        std::vector<std::vector<int>> dp2(m, std::vector<int>(2));\n         dfs(0, -1, adj2, dp2);\n        dfs(0, -1, adj1, dp1);\n       \n\n        int d1 = 0, d2 = 0;\n        for (int i = 0; i < n; ++i) {\n            d1 = std::max(d1, dp1[i][0]);\n            d1 = std::max(d1, dp1[i][1]);\n        }\n\n        for (int i = 0; i < m; ++i) {\n            d2 = std::max(d2, dp2[i][0]);\n            d2 = std::max(d2, dp2[i][1]);\n        }\n\n        return std::max(std::max(d1-1, d2-1), ((d1) / 2 + (d2) / 2) + 1);\n    }\n};",
    "submit_ts": "1719719643",
    "subm_id": "1304447023"
}