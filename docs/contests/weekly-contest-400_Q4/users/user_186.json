{
    "username": "sshivendra764",
    "submission": "class Solution {\npublic:\n    \n    int table[100001][30]; \n  \n// it builds sparse table. \nvoid buildSparseTable(vector<int> &arr, int n) \n{ \n    // GCD of single element is element itself \n    for (int i = 0; i < n; i++) \n        table[i][0] = arr[i]; \n  \n    // Build sparse table \n    for (int j = 1; j <= log2(n); j++) \n        for (int i = 0; i <= n - (1 << j); i++) \n            table[i][j] = (table[i][j - 1] & table[i + (1 << (j - 1))][j - 1]); \n} \n  \n// Returns GCD of arr[L..R] \nint query(int L, int R) \n{ \n\n    int j = (int)log2(R - L + 1); \n \n    return (table[L][j] & table[R - (1 << j) + 1][j]); \n} \n  \n    \n    int minimumDifference(vector<int>& vec, int k) {\n        ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n        \n        int n = vec.size();\n\n    buildSparseTable(vec , n);\n        \n        int ans = 1e9;\n\n    for(int i=0;i<n;i++){\n        int ind = i , cur = vec[i];\n\n        ans = min(ans , abs(cur - k));\n\n        while(ind < n){\n            int low = ind , high = n-1 , idx = -1;\n\n            while(low <= high){\n                int mid = (low + high) / 2;\n\n                if(query(i , mid) == cur) {\n                    idx = mid;\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n\n            ind = idx+1;\n            if(ind < n) {\n                cur &= vec[ind];\n                ans = min(ans , abs(cur - k));\n            }\n        }\n    }\n\n    return ans;\n\n    }\n};",
    "submit_ts": "1717297441",
    "subm_id": "1274742639"
}