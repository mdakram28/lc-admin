{
    "username": "mkRg2rq7mu",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\n#include <memory>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, unique_ptr<TrieNode>> children; // Use unique_ptr for automatic memory management\n        vector<pair<int, int>> wordEnds; // Stores (index, cost) for words ending at this node\n    };\n\n    class Trie {\n    public:\n        unique_ptr<TrieNode> root;\n        \n        Trie() : root(make_unique<TrieNode>()) {}\n\n        // Insert a word into the Trie with its index and cost\n        void insert(const string& word, int index, int cost) {\n            TrieNode* currentNode = root.get();\n            for (char c : word) {\n                if (!currentNode->children.count(c))\n                    currentNode->children[c] = make_unique<TrieNode>();\n                currentNode = currentNode->children[c].get();\n            }\n            currentNode->wordEnds.emplace_back(index, cost);\n        }\n    };\n\n    // Function to calculate the minimum cost to form the target string\n    int minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) {\n        if (target.empty() || words.empty() || costs.empty()) return -1; // Early exit if input is empty\n\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX); // DP array for minimum costs\n        minCost[0] = 0; // Starting point, cost is 0\n\n        Trie trie;\n        // Insert all words into the Trie with their respective costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        // Traverse the target string\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) continue; // Skip if current position is unreachable\n\n            TrieNode* currentNode = trie.root.get();\n            // Try to extend the current position with words from the Trie\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break; // Stop if no matching character\n                currentNode = currentNode->children[target[j]].get();\n                \n                // Check all words ending at this node\n                for (const auto& wordInfo : currentNode->wordEnds) {\n                    int wordIndex = wordInfo.first;\n                    int wordCost = wordInfo.second;\n                    int wordLength = words[wordIndex].size();\n                    if (i + wordLength <= targetLength) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + wordCost); // Update the DP array\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength]; // Return -1 if target cannot be formed\n    }\n};\n",
    "submit_ts": "1720321859",
    "subm_id": "1312334202"
}