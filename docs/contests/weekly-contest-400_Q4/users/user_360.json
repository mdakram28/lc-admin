{
    "username": "jakao",
    "submission": "class Solution {\npublic:\n#define MAXN 100005\n#define K 18\n    int minimumDifference(vector<int>& nums, int k) {\n\n        int st[K + 1][MAXN];\n        int n = nums.size();\n\n        std::copy(nums.begin(), nums.end(), st[0]);\n\n        for (int i = 1; i <= K; i++)\n            for (int j = 0; j + (1 << i) <= n; j++)\n                st[i][j] = (st[i - 1][j] & st[i - 1][j + (1 << (i - 1))]);\n\n       \n        int ret = 1e9;\n        for(int i = 0; i < n; i++){\n            int now = nums[i];\n            int L = i, R = n-1;\n            for (int i = K; i >= 0; i--) {\n                if ((1 << i) <= R - L + 1 && (now&st[i][L]) >= k) {\n                    now &= st[i][L];\n                    L += 1 << i;\n                }\n            }\n            // cout << i << \" \" << L << \" \" << now << endl;\n            ret = min(ret, abs(now - k));\n            if(L <= n-1) ret = min(ret, abs((now&nums[L])-k));\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1717298170",
    "subm_id": "1274769888"
}