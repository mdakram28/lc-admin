{
    "username": "Likey_00",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        bit_cnts = [0] * 32\n        left = 0\n        \n        def curr_and(window_size):\n            and_val = 0\n            for i in range(32):\n                if bit_cnts[i] == window_size:\n                    and_val |= (1 << i)\n            return and_val\n        \n        def update_bit_cnts(num, is_add):\n            nonlocal bit_cnts\n            for i in range(32):\n                if (1 << i) & num:\n                    if is_add:\n                        bit_cnts[i] += 1\n                    else:\n                        bit_cnts[i] -= 1\n\n        sol = float('inf')\n        for right in range(len(nums)):\n            update_bit_cnts(nums[right], True)\n            sol = min(sol, abs(k - curr_and(right - left + 1)))\n            while left < right and (temp := curr_and(right - left + 1)) <= k:\n                sol = min(sol, abs(k - temp))\n                update_bit_cnts(nums[left], False)\n                left += 1\n            sol = min(sol, abs(k - curr_and(right - left + 1)))\n            \n        \n        return sol\n                \n                ",
    "submit_ts": "1717299097",
    "subm_id": "1274801699"
}