{
    "username": "tonmoy1912",
    "submission": "#define ll long long\n\nclass disjointSet{\n    vector<int> parent,size;\n    public:\n    disjointSet(int n){\n        parent.resize(n+1);\n        size.resize(n+1,1);\n        for(int i=0;i<=n;i++){\n            parent[i]=i;\n        }\n    }\n\n    int findUPar(int node){\n        if(parent[node]==node){\n            return  node;\n        }\n        return parent[node]=findUPar(parent[node]);\n    }\n\n    void unionBySize(int u,int v){\n        int ulp_u=findUPar(u);\n        int ulp_v=findUPar(v);\n        if(ulp_u==ulp_v){\n            return ;\n        }\n        if(size[ulp_u]<size[ulp_v]){\n            parent[ulp_u]=ulp_v;\n            size[ulp_v]+=size[ulp_u];\n        }\n        else{\n            parent[ulp_v]=ulp_u;\n            size[ulp_u]+=size[ulp_v];\n        }\n    }\n};\n\nclass Solution {\n    bool check(vector<int> &arr1,vector<int> &arr2){\n        ll x=abs(arr1[0]-arr2[0]);\n        ll y=abs(arr1[1]-arr2[1]);\n        ll r1=x*x+y*y;\n        ll r2=arr1[2]+arr2[2];\n        r2=r2*r2;\n        return r1<=r2;\n    }\n    \n    void getSides(vector<int> &arr,ll X,ll Y,vector<pair<int,int>> &ans){\n        ll x=arr[0],y=arr[1],r=arr[2];\n        if(x+r>=X){\n            ans.push_back({X,-1});\n        }\n        if(x-r<=0){\n            ans.push_back({0,-1});\n        }\n        if(y+r>=Y){\n            ans.push_back({-1,Y});\n        }\n        if(y-r<=0){\n            ans.push_back({-1,0});\n        } \n    }\n    \n    bool isBlocked(vector<pair<int,int>> &arr,int X,int Y){\n        set<char> s;\n        for(auto &it:arr){\n            if(it.first==0){\n                s.insert('L');\n            }\n            if(it.first==X){\n                s.insert('R');\n            }\n            if(it.second==0){\n                s.insert('D');\n            }\n            if(it.second==Y){\n                s.insert('U');\n            }\n        }\n        // for(auto it:s){\n        //     cout<<it;\n        // }\n        // cout<<endl;\n        if((s.count('U')==1 && s.count('D')==1) || (s.count('U')==1 && s.count('R')==1) || (s.count('L')==1 && s.count('R')==1) || (s.count('L')==1 && s.count('D')==1) ){\n            return true;\n        }\n        return false;\n    }\n    \npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& arr) {\n        int n=arr.size();\n        disjointSet dsu(n);\n        for(int i=0;i<n;i++){\n            for(int j=i+1;j<n;j++){\n                if(check(arr[i],arr[j])){\n                    dsu.unionBySize(i,j);\n                }\n            }\n        }\n        unordered_map<int,vector<pair<int,int>>> m;\n        for(int i=0;i<n;i++){\n            m[dsu.findUPar(i)].push_back({arr[i][0],arr[i][1]});\n            getSides(arr[i],X,Y,m[dsu.findUPar(i)]);\n        }\n        for(auto it:m){\n            if(isBlocked(it.second,X,Y)){\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138076",
    "subm_id": "1335781502"
}