{
    "username": "archip",
    "submission": "class Fenwick:\n    def findRSB(self, i):\n        return i & -i\n    \n    def __init__(self, nums: List[int]):\n        self.n = len(nums) + 1\n        self.nums = [0] + nums\n        self.tree = [0 for i in range(self.n)]\n        \n        for i in range(1, self.n):\n            self.tree[i] = self.nums[i]\n            \n        for child in range(1, self.n):\n            parent = child + self.findRSB(child)\n            if parent < self.n:\n                self.tree[parent] += self.tree[child]\n\n    def update(self, index: int, val: int) -> None:\n        index += 1\n        toAdd = val - self.nums[index]\n        self.nums[index] = val\n        i = index\n        while i < self.n:\n            self.tree[i] += toAdd\n            i += self.findRSB(i)\n\n    def prefix(self, i):\n        ans = 0\n        while i != 0:\n            ans += self.tree[i]\n            i -= self.findRSB(i)\n        return ans\n    \n    def range_sum(self, left: int, right: int) -> int:\n        return self.prefix(right + 1) - self.prefix(left)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = [0 for _ in range(len(nums))]\n        for idx in range(1, len(nums) - 1):\n            if nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1]:\n                peaks[idx] = 1\n#        print('==', peaks)\n        fenwick = Fenwick(peaks)\n        ans = []\n        for query in queries:\n            if query[0] == 1:\n                subarray = fenwick.range_sum(query[1], query[2])\n                if peaks[query[1]]: subarray -= 1\n                if query[2] != query[1] and peaks[query[2]]: subarray -= 1\n                ans.append(subarray)\n                continue\n            _, idx, value = query\n            old = nums[idx]\n            nums[idx] = value\n            \n            if value > old:\n                if idx != 0 and peaks[idx - 1] and nums[idx] >= nums[idx - 1]:\n                    peaks[idx - 1] = 0\n                    fenwick.update(idx - 1, 0)\n                if idx != len(nums) - 1 and peaks[idx + 1] and nums[idx] >= nums[idx + 1]:\n                    peaks[idx + 1] = 0\n                    fenwick.update(idx + 1, 0)\n                if idx != 0 and idx != len(nums) - 1 and nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1]:\n                    peaks[idx] = 1\n                    fenwick.update(idx, 1)\n            else:\n                if idx != len(nums) - 1 and nums[idx] < nums[idx + 1] and not peaks[idx + 1]:\n                    if idx + 1 != len(nums) - 1 and nums[idx + 1] > nums[idx + 2]:\n                        peaks[idx + 1] = 1\n                        fenwick.update(idx + 1, 1)\n                if idx != 0 and nums[idx] < nums[idx - 1] and not peaks[idx - 1]:\n                    if idx - 1 != 0 and nums[idx - 1] > nums[idx - 2]:\n                        peaks[idx - 1] = 1\n                        fenwick.update(idx - 1, 1)\n                if idx != 0 and idx != len(nums) - 1 and (nums[idx] <= nums[idx - 1] or nums[idx] <= nums[idx + 1]):\n                    peaks[idx] = 0\n                    fenwick.update(idx, 0)\n#            print(peaks)\n#            print(nums)\n        return ans",
    "submit_ts": "1718507243",
    "subm_id": "1289645610"
}