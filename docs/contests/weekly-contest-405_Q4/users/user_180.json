{
    "username": "Blitxen",
    "submission": "class Node:\n    def __init__(self):\n        self.children = {}\n        self.isWord = False\n        self.cost = None\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Node()\n        \n        n = len(target)\n        \n        for word, cost in zip(words, costs):\n            tmp = trie\n            for c in word:\n                if c not in tmp.children:\n                    tmp.children[c] = Node()\n                \n                tmp = tmp.children[c]\n            tmp.isWord = True\n            \n            if tmp.cost:\n                tmp.cost = min(cost, tmp.cost)\n            else:\n                tmp.cost = cost\n        \n        @cache\n        def dp(i):\n            if i == n:\n                return 0\n            \n            ans = math.inf\n            \n            tmp = trie\n            for j in range(i, n):\n                if target[j] not in tmp.children:\n                    return ans\n                \n                tmp = tmp.children[target[j]]\n                \n                if tmp.isWord:\n                    ans = min(ans, dp(j + 1) + tmp.cost)\n                    \n            return ans\n        \n        ans = dp(0)\n        \n        return ans if ans != math.inf else -1",
    "submit_ts": "1720321328",
    "subm_id": "1312319897"
}