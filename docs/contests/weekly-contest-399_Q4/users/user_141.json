{
    "username": "sky1429",
    "submission": "mod = 10**9 + 7\n\nclass segment:\n    def __init__(self, lo, hi):\n        self.val00 = 0\n        self.val01 = 0\n        self.val10 = 0\n        self.val11 = 0\n        self.lo = lo\n        self.hi = hi\n        if lo < hi - 1:\n            mid = (lo + hi) // 2\n            self.left = segment(lo, mid)\n            self.right = segment(mid, hi)\n    \n    def update(self, ind, val):\n        if self.lo == ind and self.hi == ind + 1:\n            self.val00 = 0\n            self.val01 = 0\n            self.val10 = 0\n            self.val11 = val\n            return\n        if self.lo > ind or self.hi <= ind:\n            return\n        if self.lo < self.hi - 1:\n            self.left.update(ind, val)\n            self.right.update(ind, val)\n            self.val00 = max(self.left.val00 + self.right.val00, self.left.val00 + self.right.val10, \n                             self.left.val01 + self.right.val00, 0)\n            self.val01 = max(self.left.val00 + self.right.val01, self.left.val00 + self.right.val11, \n                            self.left.val01 + self.right.val01, 0)\n            self.val10 = max(self.left.val10 + self.right.val00, self.left.val10 + self.right.val10, \n                            self.left.val11 + self.right.val00, 0)\n            self.val11 = max(self.left.val10 + self.right.val01, self.left.val10 + self.right.val11,\n                            self.left.val11 + self.right.val01, 0)\n    \n    def query(self, lo, hi):\n        if lo <= self.lo and self.hi <= hi:\n            return self.val00, self.val01, self.val10, self.val11\n        if lo >= self.hi or self.lo >= hi:\n            return 0, 0, 0, 0\n        \n        l00, l01, l10, l11 = self.left.query(lo, hi)\n        r00, r01, r10, r11 = self.right.query(lo, hi)\n        \n        res00 = max(0, l00 + r00, l00 + r10, l01 + r00)\n        res01 = max(0, l00 + r01, l00 + r11, l01 + r01)\n        res10 = max(0, l10 + r00, l10 + r10, l11 + r00)\n        res11 = max(0, l10 + r01, l10 + r11, l11 + r01)\n        \n        return res00, res01, res10, res11\n        \n\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        n = len(nums)\n        st = segment(0, n)\n        for i, x in enumerate(nums):\n            st.update(i, x)\n        \n        ans = []\n        \n        for pos, x in queries:\n            st.update(pos, x)\n            tem = max(st.query(0, n))\n            ans.append(tem % mod)\n        return sum(ans) % mod\n",
    "submit_ts": 1716693860.0
}