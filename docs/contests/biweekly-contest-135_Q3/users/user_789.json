{
    "username": "zyy941204",
    "submission": "class Solution {\n    private int helper(int[] nums, int target, int k) {\n        int left = 0, right = nums.length - 1, res = 0;\n        while (left < right) {\n            int diff = Math.abs(nums[left] - nums[right]);\n            if (diff != target) {\n                if ((nums[left] + target >= 0 && nums[left] + target <= k)\n                        || (nums[left] - target >= 0 && nums[left] - target <= k)\n                        || (nums[right] + target >= 0 && nums[right] + target <= k)\n                        || (nums[right] - target >= 0 && nums[right] - target <= k)) {\n                    res += 1;\n                } else {\n                    res += 2;\n                }\n            }\n            ++left;\n            --right;\n        }\n        return res;\n    }\n\n    public int minChanges(int[] nums, int k) {\n        int len = nums.length, res = Integer.MAX_VALUE;\n        int left = 0, right = len - 1;\n        Map<Integer, Integer> map = new HashMap<>();\n        while (left < right) {\n            int diff = Math.abs(nums[left] - nums[right]);\n            map.put(diff, map.getOrDefault(diff, 0) + 1);\n            ++left;\n            --right;\n        }\n        System.out.println(map);\n        PriorityQueue<int[]> pq = new PriorityQueue<>((o1, o2) -> {\n            if (o1[1] != o2[1]) {\n                return o2[1] - o1[1];\n            } else {\n                return o1[0] - o2[0];\n            }\n        });\n        for (var entry : map.entrySet()) {\n            pq.offer(new int[]{entry.getKey(), entry.getValue()});\n        }\n        int[] arr = pq.poll();\n        res = Math.min(res, helper(nums, arr[0], k));\n        if (!pq.isEmpty()) {\n            arr = pq.poll();\n            res = Math.min(res, helper(nums, arr[0], k));\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721488454",
    "subm_id": "1327422748"
}