{
    "username": "Deepanshu_Jindal",
    "submission": "import java.util.Arrays;\n\npublic class Solution {\n    private static final long MOD = 1_000_000_007;\n    \n    // Main method to count the monotonic pairs\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        // Initialize the DP table with -1\n        long[][][] dp = new long[n][51][51];\n        for (long[][] matrix : dp) {\n            for (long[] row : matrix) {\n                Arrays.fill(row, -1);\n            }\n        }\n        // Start the recursion\n        return (int) solve(0, 0, nums[0], nums, dp);\n    }\n    \n    // Recursive method to solve the problem\n    private long solve(int thor, int ironMan, int hulk, int[] nums, long[][][] dp) {\n        if (thor >= nums.length) return 1;\n        \n        if (dp[thor][ironMan][hulk] != -1) return dp[thor][ironMan][hulk];\n        \n        long result = 0;\n        for (int blackWidow = ironMan; blackWidow <= nums[thor]; blackWidow++) {\n            for (int captainAmerica = hulk; captainAmerica >= 0; captainAmerica--) {\n                if (blackWidow + captainAmerica == nums[thor]) {\n                    result = (result + solve(thor + 1, blackWidow, captainAmerica, nums, dp)) % MOD;\n                }\n            }\n        }\n        \n        return dp[thor][ironMan][hulk] = result;\n    }\n}\n",
    "submit_ts": "1723345333",
    "subm_id": "1351553482"
}