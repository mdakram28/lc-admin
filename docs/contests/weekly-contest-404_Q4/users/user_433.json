{
    "username": "someshghoshjoyguru",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        dist[start] = 0;\n        queue<int> q;\n        q.push(start);\n        int farthestNode = start;\n        int maxDist = 0;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, maxDist};\n    }\n\n    int treeDiameter(const vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        pair<int, int> farthest = bfs(0, adj);\n        \n        pair<int, int> otherFarthest = bfs(farthest.first, adj);\n        \n        return otherFarthest.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = treeDiameter(edges1);\n        int d2 = treeDiameter(edges2);\n        \n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": "1719718335",
    "subm_id": "1304414625"
}