{
    "username": "piyush_razz",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    map<string, int>mp;\nstruct TrieNode {\n\n    // pointer array for child nodes of each node\n    TrieNode* childNode[26];\n\n    // Used for indicating ending of string\n    bool wordEnd;\n    int cost;\n\n    TrieNode()\n    {\n        // constructor\n        // initialize the wordEnd variable with false\n        // initialize every index of childNode array with\n        // NULL\n        wordEnd = false;\n        cost = 0;\n        for (int i = 0; i < 26; i++) {\n            childNode[i] = NULL;\n        }\n    }\n};\nvoid insert_key(TrieNode* root, string& key)\n{\n    // Initialize the currentNode pointer\n    // with the root node\n    TrieNode* currentNode = root;\n\n    // Iterate across the length of the string\n    for (auto c : key) {\n\n        // Check if the node exist for the current\n        // character in the Trie.\n        if (currentNode->childNode[c - 'a'] == NULL) {\n\n            // If node for current character does not exist\n            // then make a new node\n            TrieNode* newNode = new TrieNode();\n\n            // Keep the reference for the newly created\n            // node.\n            currentNode->childNode[c - 'a'] = newNode;\n        }\n\n        // Now, move the current node pointer to the newly\n        // created node.\n        currentNode = currentNode->childNode[c - 'a'];\n    }\n\n    // Increment the wordEndCount for the last currentNode\n    // pointer this implies that there is a string ending at\n    // currentNode.\n    currentNode->wordEnd = 1;\n    currentNode->cost = mp[key];\n    \n}\n\n    int minimumCost(string s1, vector<string>& s, vector<int>& a) {\n        int n = a.size();\n        //map<string, int>mp;\n        mp.clear();\n        set<string>st;\n        vector<vector<string>>arr(n+1);\n        for(int i=0;i<n; i++){\n            if(mp.find(s[i])==mp.end()){\n                mp[s[i]] = a[i];\n            }\n            else{\n                st.insert(s[i]);\n                mp[s[i]] = min(mp[s[i]], a[i]);\n            }\n        }\n        TrieNode* root = new TrieNode();\n        for(auto it : mp)\n        {\n            string s2 = it.first;\n            insert_key(root, s2);\n        }\n        int m = s1.size();\n        ll dp[m+1];\n        s1 = \"&\" + s1;\n        dp[0] =0;;\n        for(int i=1; i<=m; i++){\n            dp[i] = 1e12;\n        }\n        \n        for(int i=1; i<=m; i++)\n        {\n            if(dp[i-1]==1e12){\n                continue;\n            }\n            string tmp =\"\";\n            TrieNode* currentNode = root;\n            for(int j=i;j<=m; j++){\n                tmp += s1[j];\n                if(currentNode->childNode[s1[j] - 'a'] == NULL){\n                    break;\n                }\n                currentNode = currentNode->childNode[s1[j] - 'a'];\n                if(currentNode->wordEnd==1){\n                    dp[j] = min(dp[j], dp[i-1]+currentNode->cost);\n                }\n            }\n        }\n        if(dp[m]==1e12){\n            dp[m] = -1;\n        }\n        return dp[m];\n    }\n};",
    "submit_ts": "1720323876",
    "subm_id": "1312386194"
}