{
    "username": "Time-limit-exceed",
    "submission": "class SegmentTree {\npublic:\nvector<int> tree;\nint n;\n\n\nSegmentTree(vector<int>& arr)\n{\n    n = arr.size();\n    tree.resize(4 * n);\n    build(arr, 0, 0, n - 1);\n}\n\nvoid build(vector<int>& arr, int node, int start,\n           int end)\n{\n    if (start == end) {\n        tree[node] = arr[start];\n    }\n    else {\n        int mid = (start + end) / 2;\n        build(arr, 2 * node + 1, start, mid);\n        build(arr, 2 * node + 2, mid + 1, end);\n\n        tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n    }\n}\n\nint query(int l, int r)\n{\n    return query(0, 0, n - 1, l, r);\n}\n\nint query(int node, int start, int end, int l, int r)\n{\n    if (r < start || end < l) {\n        return INT_MAX;\n    }\n    if (l <= start && end <= r) {\n        return tree[node];\n    }\n    int mid = (start + end) / 2;\n    int p1 = query(2 * node + 1, start, mid, l, r);\n    int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n    return p1 & p2;\n}\n};\n\nclass Solution {\n\npublic:\nint minimumDifference(vector<int>& arr, int k) {\nint n = arr.size();\nSegmentTree st(arr);\nint ans = INT_MAX;\nfor (int i = 0; i < n; i++) {\nint l = i - 1, r = n - 1, mid;\n\n\n    while (r - l > 1) {\n        mid = (l + r) / 2;\n        if (st.query(i, mid) >= k)\n            l = mid;\n        else\n            r = mid;\n    }\n    if (l != i - 1)\n        ans = min(ans, abs(st.query(i, l) - k));\n    ans = min(ans, abs(k - st.query(i, r)));\n}\nreturn ans;\n}\n};",
    "submit_ts": 1717298671.0
}