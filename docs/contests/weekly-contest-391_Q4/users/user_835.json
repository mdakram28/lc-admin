{
    "username": "papaya",
    "submission": "#include<bits/stdc++.h>\nusing namespace std ; \n\n#define add emplace_back \n\ntypedef long long int64 ; \n\nconst int64 INF = 1e18 ; \n\nclass Solution {\npublic:\n    vector<vector<int>> a ; \n    int n ; \n\n    vector< vector<pair<int64, int64 > > > info ; \n\n    void init_1 ( ) { \n\n        multiset< tuple<int64,  int64 >> s ; \n        s.emplace( -INF ,  -1 ) ; \n        s.emplace( -INF ,  -1 ) ; \n        \n        info.assign( n , {} ) ; \n\n        // cout << \"in in 1111 \\n\" ;\n\n        for( int i = n - 1 ; i >= 0 ; i-- ) {\n            int64 x = a[i][0] ;\n            int64 y = a[i][1] ; \n            \n            auto p1 = ( --s.end() ) ;\n            auto p2 = prev( p1 ) ; \n\n            auto [ vj_1 , j1 ] = *p1 ;\n            auto [ vj_2 , j2 ] = *p2 ; \n\n            int64 v1 = vj_1 - ( x + y ) ;\n            int64 v2 = vj_2 - ( x + y ) ;\n\n            if( j1 >= 0 ) { \n                info[i].add( v1 , j1 ) ; \n            }\n            if( j2 >= 0 ) { \n                info[i].add( v2 , j2 ) ; \n            }\n\n            if( j1 >= 0 ) { \n                info[j1].add( v1 , i ) ;\n            }\n            if( j2 >= 0 ) { \n                info[j2].add( v2 , i ) ; \n            }\n\n            s.emplace( x + y , i ) ; \n        }\n        // cout << \" over init 1 \\n\" ; \n     \n    }\n    void init_2 ( ) { \n\n        multiset< tuple<int64,  int64 >> s ; \n        s.emplace( -INF ,  -1 ) ; \n        s.emplace( -INF ,  -1 ) ; \n        \n        for( int i = n - 1 ; i >= 0 ; i-- ) {\n            int64 x = a[i][0] ;\n            int64 y = a[i][1] ; \n            \n            auto p1 = ( --s.end() ) ;\n            auto p2 = prev( p1 ) ; \n\n            auto [ vj_1 , j1 ] = *p1 ;\n            auto [ vj_2 , j2 ] = *p2 ; \n\n            int64 v1 = vj_1 - ( x - y ) ;\n            int64 v2 = vj_2 - ( x - y ) ;\n\n            if( j1 >= 0 ) { \n                info[i].add( v1 , j1 ) ; \n            }\n            if( j2 >= 0 ) { \n                info[i].add( v2 , j2 ) ; \n            }\n\n            if( j1 >= 0 ) { \n                info[j1].add( v1 , i ) ;\n            }\n            if( j2 >= 0 ) { \n                info[j2].add( v2 , i ) ; \n            }\n\n            s.emplace( x - y , i ) ; \n        }\n    }\n    void init ( ) {\n\n        // cout  << \" start 1 111 1\\n\" ; \n\n        init_1() ;\n\n        // cout << \"over 11111 \\n\" ; \n\n        init_2() ; \n\n        // cout << \" over all init\\n\" ; \n     \n\n        for( int i = 0 ; i < n ; i++ ) {\n            auto &p = info[i] ; \n            if( p.size() == 0 ) {\n                continue ; \n            }\n            sort( p.begin() , p.end() , greater<>() ) ; \n\n            // cout << \"\\n\\ni: \" << i << \"\\n\" ; \n            // cout << a[i][0] << \" \" << a[i][1] << \"\\n\" ; \n\n            // for( auto [ val , j ] : p ) {\n            //     cout << \"val: \" << val << \" j: \" << j << \"\\n\" ; \n            // }\n            // cout << \"\\n\" ;\n        }\n    }\n    int64 get( int x ) {\n        int64 max_val = -INF ; \n        for( int i = 0 ; i < n ; i++ ) {\n            auto &p = info[i] ; \n            if( p.size() == 0 ) {\n                continue ; \n            }\n            if( i == x ) {\n                continue ; \n            }\n            for( auto [ vj , j2 ] : p ) {\n                if( j2 == x ) {\n                    continue ; \n                }\n                max_val = max( max_val , vj ) ; \n                break ; \n            }\n        }\n        return max_val ; \n    }\n    int solve( ) { \n\n        init( ) ; \n        \n        int64 max_val = -INF ; \n        for( int i = 0 ; i < n ; i++ ) {\n            auto &p = info[i] ; \n            if( p.size() == 0 ) {\n                continue ; \n            }\n            auto [vj, j2 ] = p[0] ;\n            max_val = max( max_val , vj ) ; \n        }\n\n        vector<int> tmp ; \n        vector<int> in_deg( n , 0 ) ; \n        for( int i = 0 ; i < n ; i++ ) {\n            auto &p = info[i] ; \n            if( p.size() == 0 ) {\n                continue ; \n            }\n            auto [vj, j2 ] = p[0] ;\n            if( vj == max_val ) { \n                tmp.add( i ) ; \n\n                in_deg[i]++ ; \n                // in_deg[ j2]++ ; \n            }\n        }\n        int m = tmp.size() ; \n\n        // cout << \"m: \" << m << \"\\n\" ; \n\n        int64 ret = INF ; \n        for( auto x : tmp ) { \n\n            int64 max_val2 = get( x ) ; \n\n            // cout << \"del x ; \" << x << \" max_val2 : \" << max_val2 << \"\\n\" ; \n\n            ret = min( ret , max_val2 ) ; \n        }\n        return ret ; \n    }\n\n    int minimumDistance(vector<vector<int>>& points) {\n        a = points; \n        n = a.size() ; \n        sort( a.begin() , a.end() ) ; \n\n        return solve( ) ; \n\n    }\n};\n\n\n\n\nint mai22n( )  { \n    Solution  t; \n\n    vector<vector<int> > a ;\n    int n ; \n\n    a =  { { 3 , 10 } , { 5 , 15 } , { 10 , 2 } , { 4 , 4 } } ; \n    \n    a = { { 1 , 1 } , { 1 , 1 } , { 1 , 1 } } ; \n\n    \n    // [[4,1],[10,7],[5,6],[3,2],[10,9],[2,9],[2,8]]\n\n    a = { { 4 , 1 , } , { 10 , 7 } , { 5 , 6 } , { 3 , 2 } , { 10 , 9 } , \n        { 2 , 9 } , { 2 , 8 } \n    } ;\n\n    auto ans = t.minimumDistance(  a ) ; \n    cout << ans << \"\\n\" ;\n\n\n    return 0 ; \n}\n"
}