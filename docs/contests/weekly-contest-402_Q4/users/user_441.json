{
    "username": "ericet1234",
    "submission": "struct FenwickTree {\n    vector<int> bit;  // binary indexed tree\n    int n;\n\n    FenwickTree(int n) {\n        this->n = n;\n        bit.assign(n, 0);\n    }\n\n    FenwickTree(vector<int> a) : FenwickTree(a.size()) {\n        for (size_t i = 0; i < a.size(); i++)\n            add(i, a[i]);\n    }\n\n    int sum(int r) {\n        int ret = 0;\n        for (; r >= 0; r = (r & (r + 1)) - 1)\n            ret += bit[r];\n        return ret;\n    }\n\n    int sum(int l, int r) {\n        if(l>r){\n            return 0;\n        }\n        return sum(r) - sum(l - 1);\n    }\n\n    void add(int idx, int delta) {\n        for (; idx < n; idx = idx | (idx + 1))\n            bit[idx] += delta;\n    }\n};\n\n\nclass Solution {\nprivate:\n    bool check(vector<int>& nums, int *data, int index){\n        if(index<=0 || index>=nums.size()-1){\n            return false;\n        }\n        int t = (nums[index-1]<nums[index]) && (nums[index]>nums[index+1]);\n        return data[index] != t;\n    }\n    \npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        const int SIZE = 131068;\n        \n        FenwickTree tree(SIZE);\n        int data[100001] = {0};\n        for(int i=1, size=nums.size() ; i<size-1 ; i++){\n            data[i] = (nums[i-1]<nums[i]) && (nums[i]>nums[i+1]);\n            \n            if(data[i]==1){\n                tree.add(i, 1);\n                //printf(\"%d %d\\n\", i, 1);\n            }\n        }\n        \n        vector<int> ans;\n        int index;\n        for(int i=0, size=queries.size() ; i<size ; i++){\n            if(queries[i][0]==1){\n                ans.push_back(tree.sum(queries[i][1]+1, queries[i][2]-1));\n            } else {\n                index = queries[i][1];\n                nums[index] = queries[i][2];\n                \n                for(int j=index-1 ; j<=index+1 ; j++){\n                    if(check(nums, data, j)){\n                        tree.add(j, 1-2*data[j]);\n                        data[j] = 1 - data[j];\n                        //printf(\"%d %d\\n\", j, data[j]);\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718507575.0
}