{
    "username": "supreet04singh",
    "submission": "class DSU {\npublic:\n    vector<int> parent, rank;\n\n    DSU(int n) : parent(n), rank(n, 0) {\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n\n    int find(int x) {\n        if (x != parent[x]) {\n            parent[x] = find(parent[x]);\n        }\n        return parent[x];\n    }\n\n    void unite(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY]) {\n                parent[rootY] = rootX;\n            } else if (rank[rootX] < rank[rootY]) {\n                parent[rootX] = rootY;\n            } else {\n                parent[rootY] = rootX;\n                rank[rootX]++;\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool solve(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DSU dsu(n + 4);\n\n        for (int i = 0; i < n; i++) {\n            if (circles[i][0] <= circles[i][2]) {\n                dsu.unite(n, i);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                dsu.unite(n + 2, i);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                dsu.unite(n + 1, i);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                dsu.unite(n + 3, i);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double dist = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radSum = circles[i][2] + circles[j][2];\n                if (radSum >= dist) {\n                    dsu.unite(i, j);\n                }\n            }\n        }\n\n        if (dsu.find(n) == dsu.find(n + 1) || dsu.find(n) == dsu.find(n + 2)) {\n            return false;\n        }\n        if (dsu.find(n + 3) == dsu.find(n + 1) || dsu.find(n + 3) == dsu.find(n + 2)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return solve(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138234",
    "subm_id": "1335785584"
}