{
    "username": "hackysackacus",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<vector<int>> sums(points.size());\n        vector<vector<int>> diffs(points.size());\n        for (int i = 0; i < points.size(); i++) {\n            sums[i] = {points[i][0] + points[i][1], i};\n            diffs[i] = {points[i][0] - points[i][1], i};\n        }\n        \n        sort(sums.begin(), sums.end());\n        sort(diffs.begin(), diffs.end());\n        int cand1 = sums.back()[0] - sums[0][0];\n        int cand2 = diffs.back()[0] - diffs[0][0];\n        \n        vector<int> cands(2);\n        if (cand1 > cand2) {\n            cands[0] = sums.back()[1];\n            cands[1] = sums[0][1];\n        }\n        else {\n            cands[0] = diffs.back()[1];\n            cands[1] = diffs[0][1];\n        }\n        \n        int ans = max(cand1, cand2);\n        for (int i = 0; i < cands.size(); i++) {\n            vector<vector<int>> temp;\n            for (int j = 0; j < points.size(); j++) {\n                if (j == cands[i])\n                    continue;\n                temp.push_back(points[j]);\n            }\n            ans = min(ans, getSum(temp));\n        }\n        \n        return ans;\n    }\n    \n    int getSum(vector<vector<int>>& points) {\n        vector<int> sums(points.size());\n        vector<int> diffs(points.size());\n        for (int i = 0; i < points.size(); i++) {\n            sums[i] = points[i][0] + points[i][1];\n            diffs[i] = points[i][0] - points[i][1];\n        }\n        \n        sort(sums.begin(), sums.end());\n        sort(diffs.begin(), diffs.end());\n        int cand1 = sums.back() - sums[0];\n        int cand2 = diffs.back() - diffs[0];\n        return max(cand1, cand2);\n    }\n};"
}