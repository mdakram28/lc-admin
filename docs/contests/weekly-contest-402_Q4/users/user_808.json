{
    "username": "Semi__colon",
    "submission": "class SegmentTree {\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n    \n    // Helper function to check if an index is a peak\n    int isPeak(int idx) {\n        if (idx <= 0 || idx >= n - 1) return 0;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1] ? 1 : 0;\n    }\n    \n    int build(int l, int r, int pos) {\n        if (l == r) {\n            tree[pos] = isPeak(l) ? 1 : 0;\n            return tree[pos];\n        }\n        int mid = l + (r - l) / 2;\n        tree[pos] = build(l, mid, 2 * pos + 1) + build(mid + 1, r, 2 * pos + 2);\n        return tree[pos];\n    }\n    \n    void update(int l, int r, int idx, int pos) {\n        if (idx < l || idx > r) return;\n        if (l == r) {\n            tree[pos] = isPeak(l) ? 1 : 0;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        update(l, mid, idx, 2 * pos + 1);\n        update(mid + 1, r, idx, 2 * pos + 2);\n        tree[pos] = tree[2 * pos + 1] + tree[2 * pos + 2];\n    }\n    \n    int query(int l, int r, int ql, int qr, int pos) {\n        if (ql <= l && qr >= r) return tree[pos];\n        if (ql > r || qr < l) return 0;\n        int mid = l + (r - l) / 2;\n        return query(l, mid, ql, qr, 2 * pos + 1) + query(mid + 1, r, ql, qr, 2 * pos + 2);\n    }\n    \npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(0, n - 1, 0);\n    }\n    \n    void update(int idx, int val) {\n        nums[idx] = val;\n        update(0, n - 1, idx, 0);\n        if (idx > 0) update(0, n - 1, idx - 1, 0);\n        if (idx < n - 1) update(0, n - 1, idx + 1, 0);\n    }\n    \n    int query(int l, int r) {\n        if (l >= r - 1) return 0; // Subarray too small to contain any peaks\n        return query(0, n - 1, l + 1, r - 1, 0);\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        vector<int> result;\n        \n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                result.push_back(segTree.query(l, r));\n            } else if (query[0] == 2) {\n                int idx = query[1];\n                int val = query[2];\n                segTree.update(idx, val);\n                nums[idx] = val;\n                if(idx > 0) segTree.update(idx - 1, nums[idx -1]);\n                if(idx < n-1) segTree.update(idx + 1, nums[idx + 1]);\n            }\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": "1718508224",
    "subm_id": "1289675193"
}