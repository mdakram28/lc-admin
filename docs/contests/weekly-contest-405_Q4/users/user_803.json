{
    "username": "SuhaniGaur333",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndices;\n};\nclass Solution {\npublic:\nvoid insertTrie(TrieNode* rt, const string& word, int i) {\n    TrieNode* nod = rt;\n    for (char c : word) {\n        if (nod->children.find(c) == nod->children.end()) {\n            nod->children[c] = new TrieNode();\n        }\n        nod = nod->children[c];\n    }\n    nod->wordIndices.push_back(i);\n}\n\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int num = target.size();\n    vector<int> dp(num + 1, INT_MAX);\n    dp[0] = 0; \n\n    TrieNode* rt = new TrieNode();\n    for (int i = 0; i < words.size(); ++i) {\n        insertTrie(rt, words[i], i);\n    }\n\n    for (int k = 0; k < num; ++k) {\n        if (dp[k] == INT_MAX) continue; \n\n        TrieNode* nod = rt;\n        for (int t = k; t < num; ++t) {\n            if (nod->children.find(target[t]) == nod->children.end()) break;\n            nod = nod->children[target[t]];\n            for (int wi : nod->wordIndices) {\n                int len = words[wi].size();\n                if (k + len <= num) {\n                    dp[k + len] = min(dp[k + len], dp[k] + costs[wi]);\n                }\n            }\n        }\n    }\n\n    return dp[num] == INT_MAX ? -1 : dp[num];\n}};\n\n\n",
    "submit_ts": "1720322899",
    "subm_id": "1312362061"
}