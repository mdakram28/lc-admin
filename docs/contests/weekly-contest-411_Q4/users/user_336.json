{
    "username": "angel30818",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        start_pos = [0] * len(s)  # find the starting position for each ending\n        valid_len = []\n        \n        n = len(s)\n        \n        counts = [0, 0]\n        \n        p = 0\n        \n        for q in range(len(s)):\n            counts[int(s[q])] += 1\n            \n            while counts[0] > k and counts[1] > k:\n                counts[int(s[p])] -= 1\n                p += 1\n        \n            start_pos[q] = p\n            cnt = q - p + 1\n            valid_len.append(cnt)\n        \n        # prefix summ for valid lengths\n        ps = [0]\n        for i in range(len(s)):\n            ps.append(ps[-1] + valid_len[i])\n        \n        res = []\n        \n        for l, r in queries:\n            \n            # into two scenarios\n            k = min(r+1, bisect.bisect(start_pos, l))\n            prev = k - l\n            \n            # full combinations\n            prev_sum = prev * (prev+1) // 2\n            \n            # calculate prefix summ differences\n            nxt_sum = ps[r+1] - ps[k]\n            \n            res.append(prev_sum + nxt_sum)\n            \n        return res\n                    \n                    \n            \n                                ",
    "submit_ts": "1723953404",
    "subm_id": "1359820351"
}