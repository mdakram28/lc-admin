{
    "username": "xianglaniunan",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        // collect diff frequency\n        int n = nums.length;\n        Map<Integer, Integer> map = new HashMap<>();\n        for(int i = 0; i < n / 2; i++)\n        {\n            int diff = Math.abs(nums[i] - nums[n - i - 1]);\n            map.put(diff, map.getOrDefault(diff, 0) + 1);\n        }\n        // try every diff?\n        Queue<int[]> q = new PriorityQueue<>((a, b)->(b[1] - a[1]));\n        for(int key : map.keySet()) q.offer(new int[]{key, map.get(key)});\n        \n        // calculate number of changes required\n        int re = Integer.MAX_VALUE;\n        // System.out.println(map);\n        int maxf = q.peek()[1];\n        while(!q.isEmpty())\n        {\n            int[] p = q.poll();\n            int diff = p[0], freq = p[1];\n            int t = calc(nums, diff, k);\n            if(re < t) break;\n            re = t;\n        }\n        return re;\n    }\n    \n    int calc(int[] nums, int d, int k)\n    {\n        int n = nums.length;\n        int re = 0;\n        for(int i = 0; i < n / 2; i++)\n        {\n            int a = Math.min(nums[i], nums[n - 1 - i]);\n            int b = Math.max(nums[i], nums[n - i - 1]);\n            if(b - a == d) continue;\n            // modifying a to 0 \n            if(a + d <= k || b - d >= 0) re++;\n            else re += 2;\n        }\n        // System.out.printf(\"d=%d re=%d\\n\", d, re);\n        return re;\n    }\n}",
    "submit_ts": "1721488068",
    "subm_id": "1327410495"
}