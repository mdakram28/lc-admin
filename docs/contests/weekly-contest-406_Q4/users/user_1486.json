{
    "username": "jyotilaxmimasahari21",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         // Sort horizontal and vertical cuts in descending order\n        std::sort(horizontalCut.rbegin(), horizontalCut.rend());\n        std::sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int h = 0, v = 0;\n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n\n        // While there are cuts to process\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += static_cast<long long>(horizontalCut[h]) * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[v]) * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n\n        // Process remaining horizontal cuts if any\n        while (h < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[h]) * verticalPieces;\n            horizontalPieces++;\n            h++;\n        }\n\n        // Process remaining vertical cuts if any\n        while (v < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[v]) * horizontalPieces;\n            verticalPieces++;\n            v++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926290",
    "subm_id": "1320281778"
}