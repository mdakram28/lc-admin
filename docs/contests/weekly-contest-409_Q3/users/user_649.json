{
    "username": "lucasomee006",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (4 * self.n)\n        self.lazy = [0] * (4 * self.n)\n        self.build(data, 0, 0, self.n - 1)\n    \n    def build(self, data, node, start, end):\n        if start == end:\n            self.tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(data, left_child, start, mid)\n            self.build(data, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def update_range(self, l, r):\n        self._update_range(0, 0, self.n - 1, l, r)\n    \n    def _update_range(self, node, start, end, l, r):\n        if self.lazy[node] != 0:\n            self.tree[node] = 0\n            if start != end:\n                self.lazy[2 * node + 1] = 1\n                self.lazy[2 * node + 2] = 1\n            self.lazy[node] = 0\n        \n        if start > end or start > r or end < l:\n            return\n        \n        if start >= l and end <= r:\n            self.tree[node] = 0\n            if start != end:\n                self.lazy[2 * node + 1] = 1\n                self.lazy[2 * node + 2] = 1\n            return\n        \n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        self._update_range(left_child, start, mid, l, r)\n        self._update_range(right_child, mid + 1, end, l, r)\n        self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def range_sum(self, l, r):\n        return self._range_sum(0, 0, self.n - 1, l, r)\n    \n    def _range_sum(self, node, start, end, l, r):\n        if self.lazy[node] != 0:\n            self.tree[node] = 0\n            if start != end:\n                self.lazy[2 * node + 1] = 1\n                self.lazy[2 * node + 2] = 1\n            self.lazy[node] = 0\n        \n        if start > end or start > r or end < l:\n            return 0\n        \n        if start >= l and end <= r:\n            return self.tree[node]\n        \n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_sum = self._range_sum(left_child, start, mid, l, r)\n        right_sum = self._range_sum(right_child, mid + 1, end, l, r)\n        return left_sum + right_sum\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        # Initialize the segment tree with distances of 1 between adjacent nodes\n        costs = [1 for _ in range(n-1)]\n        s = SegmentTree(costs)\n        ans = []\n        pastQueries = {}\n        for query in queries:\n            \n            start, end = query\n            s.update_range(start+1, end-1)  # Set the range [start, end] to zero\n            ans.append(s.range_sum(0, len(costs)-1))  # Query the sum of all distances\n            \n        return ans\n",
    "submit_ts": "1722741681",
    "subm_id": "1343750885"
}