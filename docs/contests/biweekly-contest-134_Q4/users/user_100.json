{
    "username": "theabbie",
    "submission": "from collections import deque\n\nclass Stack:\n    def __init__(self, init, func):\n        self.stack = deque([(init, init)])\n        self.func = func\n        \n    def push(self, val):\n        top, topfunc = self.stack[-1]\n        self.stack.append((val, self.func(topfunc, val)))\n        \n    def empty(self):\n        return len(self.stack) <= 1\n    \n    def size(self):\n        return len(self.stack) - 1\n        \n    def pop(self):\n        if not self.empty():\n            top, topfunc = self.stack.pop()\n            return top\n            \n    def funcval(self):\n        top, topfunc = self.stack[-1]\n        return topfunc\n\nclass Queue:\n    def __init__(self, init, func):\n        self.func = func\n        self.f = Stack(init, func)\n        self.s = Stack(init, func)\n        \n    def push(self, val):\n        self.f.push(val)\n        \n    def empty(self):\n        return self.f.empty() and self.s.empty()\n    \n    def size(self):\n        return self.f.size() + self.s.size()\n    \n    def pop(self):\n        if self.s.empty():\n            while not self.f.empty():\n                self.s.push(self.f.pop())\n        if not self.s.empty():\n            return self.s.pop()\n                    \n    def funcval(self):\n        return self.func(self.f.funcval(), self.s.funcval())\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        def count(x):\n            i = 0\n            res = 0\n            q = Queue((1 << 33) - 1, lambda a, b: a & b)\n            for j in range(n):\n                q.push(nums[j])\n                while i < j and q.funcval() < x:\n                    q.pop()\n                    i += 1\n                if q.funcval() >= x:\n                    res += j - i + 1\n            return res\n        return count(k) - count(k + 1)",
    "submit_ts": "1720276544",
    "subm_id": "1311620449"
}