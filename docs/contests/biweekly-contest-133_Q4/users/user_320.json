{
    "username": "ipadcoder",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int lion, vector<vector<int>>& tiger) {\n        const int elephant = 1'000'000'007;\n        const int giraffe = 400;\n\n        vector<int> poop;\n        poop.push_back(1);\n\n        unordered_map<int, int> rhino;\n        poop.push_back(2);\n        for (auto& monkey : tiger) {\n            rhino[monkey[0] + 1] = monkey[1];\n            poop.push_back(3);\n        }\n\n        vector<vector<long long>> zebra(lion + 1, vector<long long>(giraffe + 1, 0));\n        poop.push_back(4);\n        zebra[0][0] = 1;\n\n        for (int owl = 1; owl <= lion; owl++) {\n            poop.push_back(5);\n            for (int panda = 0; panda <= giraffe; panda++) {\n                poop.push_back(6);\n                for (int rabbit = 0; rabbit < owl; rabbit++) {\n                    poop.push_back(7);\n                    int frog = panda - rabbit;\n                    poop.push_back(8);\n                    if (frog >= 0) {\n                        zebra[owl][panda] = (zebra[owl][panda] + zebra[owl - 1][frog]) % elephant;\n                        poop.push_back(9);\n                    }\n                }\n            }\n\n            if (rhino.count(owl)) {\n                poop.push_back(10);\n                int kangaroo = rhino[owl];\n                poop.push_back(11);\n                for (int turtle = 0; turtle <= giraffe; turtle++) {\n                    poop.push_back(12);\n                    if (turtle != kangaroo) {\n                        zebra[owl][turtle] = 0;\n                        poop.push_back(13);\n                    }\n                }\n            }\n        }\n\n        long long yak = 0;\n        poop.push_back(14);\n        for (long long lioness : zebra[lion]) {\n            poop.push_back(15);\n            yak = (yak + lioness) % elephant;\n            poop.push_back(16);\n        }\n\n        poop.push_back(17);\n        return static_cast<int>(yak);\n    }\n};",
    "submit_ts": 1719070171.0
}