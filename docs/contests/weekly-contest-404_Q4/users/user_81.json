{
    "username": "gaoqiaoheimu",
    "submission": "class Solution {\npublic:\n    void res(vector<int> &dis) {\n        for(int k=0;k<dis.size();k++) dis[k] = 0;\n    }\n    \n    void dfs(int x, vector<vector<int>>& edge, int &mx, int &id, vector<int> &dis) {\n        if (dis[x] > mx) {\n            mx = dis[x];\n            id = x;\n        }\n        for(auto y: edge[x]) {\n            if (dis[y] > 0) continue;\n            dis[y] = dis[x] + 1;\n            dfs(y, edge, mx, id, dis);\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        int st, id, mx;\n        \n        int p, q;\n        vector<int> dis(max(n, m), 0);\n        vector<vector<int>> edge1(n, vector<int>()), edge2(m, vector<int>());\n        \n        for(auto e: edges1) {\n            int x = e[0], y = e[1];\n            edge1[x].push_back(y);\n            edge1[y].push_back(x);\n        }\n        \n        for(auto e: edges2) {\n            int x = e[0], y = e[1];\n            edge2[x].push_back(y);\n            edge2[y].push_back(x);\n        }\n        \n        st = 0; mx = 0; res(dis);\n        dis[st] = 1;\n        dfs(st, edge1, mx, id, dis);\n        \n        st = id; mx = 0; res(dis);\n        dis[st] = 1;\n        dfs(st, edge1, mx, id, dis);\n        p = mx - 1;\n        \n        \n        st = 0; mx = 0; res(dis);\n        dis[st] = 1;\n        dfs(st, edge2, mx, id, dis);\n        \n        st = id; mx = 0; res(dis);\n        dis[st] = 1;\n        dfs(st, edge2, mx, id, dis);\n        q = mx - 1;\n        \n        if (p < q) swap(p, q);\n        \n        q = (q + 1) / 2 + 1;\n        int l = (p + 1) / 2, r = p - l;\n        \n        return l + max(q, r);\n    }\n};",
    "submit_ts": "1719716863",
    "subm_id": "1304376061"
}