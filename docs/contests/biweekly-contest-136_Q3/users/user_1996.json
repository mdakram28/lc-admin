{
    "username": "vidhi_1607",
    "submission": "class Solution {\npublic:\n int calculate_min_flips(int pair_index, int current_modulo_sum, vector<vector<int>>& counts, vector<vector<int>>& dp) {\n        if (pair_index >= counts.size()) {\n            return (current_modulo_sum == 0) ? 0 : 1e9;\n        }\n\n        if (dp[pair_index][current_modulo_sum] != -1) {\n            return dp[pair_index][current_modulo_sum];\n        }\n\n        int min_flips = 1e9;\n        int new_modulo_sum = (current_modulo_sum + counts[pair_index][0] + counts[pair_index][1]) % 4;\n\n       \n        min_flips = min(min_flips, counts[pair_index][0] + calculate_min_flips(pair_index + 1, new_modulo_sum, counts, dp));\n       \n        min_flips = min(min_flips, counts[pair_index][1] + calculate_min_flips(pair_index + 1, current_modulo_sum, counts, dp));\n\n        return dp[pair_index][current_modulo_sum] = min_flips;\n    }\n\n    int minFlips(vector<vector<int>>& grid) {\n        vector<vector<int>> counts;\n        int row_count = grid.size();\n        int col_count = grid[0].size();\n\n        int top_row = 0, bottom_row = row_count - 1;\n        while (top_row < bottom_row) {\n            int left_col = 0, right_col = col_count - 1;\n            while (left_col < right_col) {\n                vector<int> cell_count(2, 0);\n                cell_count[grid[top_row][left_col]]++;\n                cell_count[grid[top_row][right_col]]++;\n                cell_count[grid[bottom_row][left_col]]++;\n                cell_count[grid[bottom_row][right_col]]++;\n                counts.push_back(cell_count);\n                left_col++;\n                right_col--;\n            }\n            if (left_col == right_col) {\n                vector<int> cell_count(2, 0);\n                cell_count[grid[top_row][left_col]]++;\n                cell_count[grid[bottom_row][right_col]]++;\n                counts.push_back(cell_count);\n            }\n            top_row++;\n            bottom_row--;\n        }\n\n        if (top_row == bottom_row) {\n            int left_col = 0, right_col = col_count - 1;\n            while (left_col < right_col) {\n                vector<int> cell_count(2, 0);\n                cell_count[grid[top_row][left_col]]++;\n                cell_count[grid[top_row][right_col]]++;\n                counts.push_back(cell_count);\n                left_col++;\n                right_col--;\n            }\n            if (left_col == right_col) {\n                vector<int> cell_count(2, 0);\n                cell_count[grid[top_row][left_col]]++;\n                counts.push_back(cell_count);\n            }\n        }\n\n        int pair_count = counts.size();\n        vector<vector<int>> dp(pair_count + 1, vector<int>(4, -1));\n        int min_flips_needed = calculate_min_flips(0, 0, counts, dp);\n        return min_flips_needed;\n}\n};",
    "submit_ts": "1722700126",
    "subm_id": "1343232446"
}