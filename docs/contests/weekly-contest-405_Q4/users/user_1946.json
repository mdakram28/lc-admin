{
    "username": "ylbedit",
    "submission": "\n\nclass Solution {\n    private static class AhoCorasickNode {\n        AhoCorasickNode[] children = new AhoCorasickNode[26];\n        AhoCorasickNode fail;\n        List<Integer> wordIndices = new ArrayList<>();\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        AhoCorasickNode root = buildAhoCorasick(words);\n        \n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        AhoCorasickNode node = root;\n        for (int i = 0; i < n; i++) {\n            char c = target.charAt(i);\n            while (node != root && node.children[c - 'a'] == null) {\n                node = node.fail;\n            }\n            node = node.children[c - 'a'] != null ? node.children[c - 'a'] : root;\n\n            for (int wordIndex : node.wordIndices) {\n                int wordLength = words[wordIndex].length();\n                if (i >= wordLength - 1 && dp[i - wordLength + 1] != Integer.MAX_VALUE) {\n                    dp[i + 1] = Math.min(dp[i + 1], dp[i - wordLength + 1] + costs[wordIndex]);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    private AhoCorasickNode buildAhoCorasick(String[] words) {\n        AhoCorasickNode root = new AhoCorasickNode();\n\n        // Build trie\n        for (int i = 0; i < words.length; i++) {\n            AhoCorasickNode node = root;\n            for (char c : words[i].toCharArray()) {\n                if (node.children[c - 'a'] == null) {\n                    node.children[c - 'a'] = new AhoCorasickNode();\n                }\n                node = node.children[c - 'a'];\n            }\n            node.wordIndices.add(i);\n        }\n\n        // Build failure links\n        Queue<AhoCorasickNode> queue = new LinkedList<>();\n        for (AhoCorasickNode child : root.children) {\n            if (child != null) {\n                child.fail = root;\n                queue.offer(child);\n            }\n        }\n\n        while (!queue.isEmpty()) {\n            AhoCorasickNode node = queue.poll();\n            for (int i = 0; i < 26; i++) {\n                AhoCorasickNode child = node.children[i];\n                if (child != null) {\n                    AhoCorasickNode fail = node.fail;\n                    while (fail != root && fail.children[i] == null) {\n                        fail = fail.fail;\n                    }\n                    child.fail = fail.children[i] != null ? fail.children[i] : root;\n                    child.wordIndices.addAll(child.fail.wordIndices);\n                    queue.offer(child);\n                }\n            }\n        }\n\n        return root;\n    }\n}",
    "submit_ts": "1720323639",
    "subm_id": "1312380429"
}