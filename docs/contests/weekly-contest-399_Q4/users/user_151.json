{
    "username": "shchen527",
    "submission": "class Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        def updateNode(tree, pos, tl, tr, i, val):\n            if tl > tr:\n                return\n\n            if tl == tr:\n                tree[pos][0] = max(0, val)\n                tree[pos][1] = 0\n                tree[pos][2] = 0\n                tree[pos][3] = 0\n                return\n            \n            tm = (tl + tr) // 2\n            left, right = 2*pos, 2*pos + 1\n            if i <= tm:\n                updateNode(tree, left, tl, tm, i, val)\n            else:\n                updateNode(tree, right, tm + 1, tr, i, val)\n            \n            tree[pos][0] = max(tree[left][0] + tree[right][1], tree[left][2] + tree[right][0])\n            tree[pos][1] = max(tree[left][1] + tree[right][1], tree[left][3] + tree[right][0])\n            tree[pos][2] = max(tree[left][0] + tree[right][3], tree[left][2] + tree[right][2])\n            tree[pos][3] = max(tree[left][1] + tree[right][3], tree[left][3] + tree[right][2])\n\n                \n        n = len(nums)\n        tree = [[0, 0, 0, 0] for _ in range(4*n+4)]\n\n        for i in range(n):\n            updateNode(tree, 1, 0, n - 1, i, nums[i])\n\n        ans, mod = 0, int(1e9+7)\n\n        for p, x in queries:\n            updateNode(tree, 1, 0, n - 1, p, x)\n            ans = (ans + tree[1][0]) % mod\n        \n        return ans",
    "submit_ts": 1716694924.0
}