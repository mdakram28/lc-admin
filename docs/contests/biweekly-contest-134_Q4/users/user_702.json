{
    "username": "as_a_Friend",
    "submission": "class Solution {\npublic:\n    class SparseTable {\n    public:\n        vector<vector<int>> st;\n        vector<int> log;\n\n        SparseTable(const vector<int>& arr) {\n            int n = arr.size();\n            int k = log2(n) + 1;\n        \n            st.assign(n, vector<int>(k));\n            log.assign(n + 1, 0);\n        \n            for (int i = 0; i < n; ++i)\n                st[i][0] = arr[i];\n\n            for (int i = 2; i <= n; ++i)\n                log[i] = log[i / 2] + 1;\n\n            for (int j = 1; j <= k; ++j) {\n                for (int i = 0; i + (1 << j) <= n; ++i) {\n                    st[i][j] = st[i][j - 1] & st[i + (1 << (j - 1))][j - 1];\n                }\n            }\n        }\n\n        int query(int l, int r) {\n            int j = log[r - l + 1];\n            return st[l][j] & st[r - (1 << j) + 1][j];\n        }\n    };\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long ans = 0;\n        SparseTable st(nums);\n\n        for (int i = 0; i < n; ++i) {\n            int left = i, right = n - 1, l = n, r = i-1;\n\n            // Find the rightmost index greater than i with bitwise AND greater than k\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (st.query(i, mid) > k) {\n                    r = mid;\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n\n            // Find the leftmost index greater than i with bitwise AND less than k\n            left = i;\n            right = n - 1;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                if (st.query(i, mid) < k) {\n                    l = mid;\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n                ans += (l-r-1);\n        }\n\n        return ans;\n    }\n};\n\n\n",
    "submit_ts": "1720279451",
    "subm_id": "1311751699"
}