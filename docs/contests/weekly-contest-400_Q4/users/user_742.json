{
    "username": "enots43",
    "submission": "class SegmentTree {\npublic:\n    vector<int> segment_tree;\n    int size;\n\n    SegmentTree(vector<int>& array){\n        size = array.size();\n        segment_tree.resize(4 * size);\n        buildTree(array, 0, 0, size - 1);\n    }\n\n    int rangeQuery(int left, int right){\n        return rangeQuery(0, 0, size - 1, left, right);\n    }\n\n    int rangeQuery(int node_index, int start_index, int end_index, int left, int right){\n        if (right < start_index || end_index < left) {\n            return INT_MAX;\n        }\n        if (left <= start_index && end_index <= right) {\n            return segment_tree[node_index];\n        }\n        int mid_index = (start_index + end_index) / 2;\n        int left_result = rangeQuery(2 * node_index + 1, start_index, mid_index, left, right);\n        int right_result = rangeQuery(2 * node_index + 2, mid_index + 1, end_index, left, right);\n\n        return left_result & right_result;\n    }\n\n    void buildTree(vector<int>& array, int node_index, int start_index, int end_index){\n        if (start_index == end_index) {\n            segment_tree[node_index] = array[start_index];\n        }\n        else {\n            int mid_index = (start_index + end_index) / 2;\n            buildTree(array, 2 * node_index + 1, start_index, mid_index);\n            buildTree(array, 2 * node_index + 2, mid_index + 1, end_index);\n\n            segment_tree[node_index] = segment_tree[2 * node_index + 1] & segment_tree[2 * node_index + 2];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segment_tree(nums);\n        int min_diff = INT_MAX;\n\n        for (int start = 0; start < n; start++) {\n            int left = start - 1, right = n - 1, middle;\n\n            while (right - left > 1) {\n                middle = (left + right) / 2;\n                if (segment_tree.rangeQuery(start, middle) >= k)\n                    left = middle;\n                else\n                    right = middle;\n            }\n\n            if (left != start - 1)\n                min_diff = min(min_diff, abs(segment_tree.rangeQuery(start, left) - k));\n\n            min_diff = min(min_diff, abs(k - segment_tree.rangeQuery(start, right)));\n        }\n\n        return min_diff;\n\n    }\n};",
    "submit_ts": "1717299514",
    "subm_id": "1274815209"
}