{
    "username": "Shahi77",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = (start > 0 && start < n - 1 && nums[start - 1] < nums[start] && nums[start] > nums[start + 1]) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        return query(2 * node + 1, start, mid, l, r) + query(2 * node + 2, mid + 1, end, l, r);\n    }\n\n    void update(int node, int start, int end, int idx, int val, vector<int>& nums) {\n        if (start == end) {\n            nums[idx] = val;\n            tree[node] = (idx > 0 && idx < n - 1 && nums[idx - 1] < nums[idx] && nums[idx] > nums[idx + 1]) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, val, nums);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, val, nums);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    void update(int idx, int val, vector<int>& nums) {\n        update(0, 0, n - 1, idx, val, nums);\n        if (idx > 0) update(0, 0, n - 1, idx - 1, nums[idx - 1], nums);\n        if (idx < n - 1) update(0, 0, n - 1, idx + 1, nums[idx + 1], nums);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n          int n = nums.size();\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                if (li + 1 >= ri) {\n                    result.push_back(0);\n                } else {\n                    result.push_back(segTree.query(li + 1, ri - 1));\n                }\n            } else if (query[0] == 2) {\n                int indexi = query[1];\n                int vali = query[2];\n                segTree.update(indexi, vali, nums);\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1718508286.0
}