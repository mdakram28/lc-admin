{
    "username": "zhangsz1998",
    "submission": "class SegmentTree:\n    \n    def __init__(self, vals):\n        self.n = len(vals)\n        self.vals = vals\n        self.sumv= [0] * (self.n * 4 + 1)\n        self.build(1, 0, self.n - 1)\n        \n    def build(self, o, l, r):\n        if l == r:\n            self.sumv[o] = self.vals[l]\n        else:\n            m = l + (r - l) // 2\n            lc, rc = o * 2, o * 2 + 1\n            self.build(lc, l, m)\n            self.build(rc, m + 1, r)\n            self.sumv[o] = self.sumv[lc] + self.sumv[rc]\n    \n    def update(self, idx, v):\n        def recursive_update(o, l, r):\n            if l == r == idx:\n                self.sumv[o] += v\n            else:\n                m = l + (r - l) // 2\n                lc, rc = o * 2, o * 2 + 1\n                if idx <= m:\n                    recursive_update(lc, l, m)\n                else:\n                    recursive_update(rc, m + 1, r)\n                self.sumv[o] = self.sumv[lc] + self.sumv[rc]\n        recursive_update(1, 0, self.n - 1)\n        \n    def query(self, ql, qr):\n        ans = 0\n        def recursive_query(o, l, r):\n            nonlocal ans\n            if ql <= l <= r <= qr:\n                ans += self.sumv[o]\n            else:\n                m = l + (r - l) // 2\n                lc, rc = o * 2, o * 2 + 1\n                if qr > m:\n                    recursive_query(rc, m + 1, r)\n                if ql <= m:\n                    recursive_query(lc, l, m)\n        recursive_query(1, 0, self.n - 1)\n        return ans\n                    \n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        vals = [0] * n\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                vals[i] = 1\n        tree = SegmentTree(vals)\n        ans = []\n        for t, a, b in queries:\n            if t == 1:\n                q = tree.query(a, b)\n                for i in set([a, b]):\n                    if vals[i] == 1:\n                        q -= 1\n                ans.append(q)\n            elif t == 2:\n                nums[a] = b\n                for i in [a - 1, a, a + 1]:\n                    if i <= 0 or i >= n - 1:\n                        continue\n                    if vals[i] == 1 and not(nums[i] > nums[i - 1] and nums[i] > nums[i + 1]):\n                        vals[i] = 0\n                        tree.update(i, -1)\n                    elif vals[i] == 0 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                        vals[i] = 1\n                        tree.update(i, 1)\n        return ans\n",
    "submit_ts": "1718508506",
    "subm_id": "539787728"
}