{
    "username": "Ammar1510",
    "submission": "static const int N=1e5;\nint t[2 * N];\nint n;\n\nvoid build() {  // build the tree\n  for (int i = n - 1; i > 0; --i) t[i] = t[i<<1]&t[i<<1|1];\n}\n\nvoid upd(int p, int value) {  // set value at position p\n  for (t[p += n] = value; p > 1; p >>= 1) t[p>>1] = t[p]&t[p^1];\n}\n\nint qry(int l, int r) {  // sum on interval [l, r)\n  int res = (1<<30)-1;\n  for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\n    if (l&1) res = res&t[l++];\n    if (r&1) res = res&t[--r];\n  }\n  return res;\n}\n\nclass Solution {\n    \npublic:\n   \n    long long countSubarrays(vector<int>& a, int k) {\n        long long ans=0;\n        n=a.size();\n        for(int i=0;i<n;i++)t[i+n]=a[i];\n        build();\n        for(int i=0;i<n;i++){\n            int l=0,r=i,fst=i+1,z=(1<<30)-1;\n            while(l<=r){\n                int mid=(l+r)/2;\n                int val=qry(mid,i+1);\n                if(val<=k){\n                    z=val;\n                    fst=mid;l=mid+1;\n                }\n                else r=mid-1;\n            }\n            if(z!=k)continue;\n            l=0,r=fst;\n            int lst=fst+1;\n            while(l<=r){\n                int mid=(l+r)/2;\n                int val=qry(mid,i+1);\n                if(val>=k){\n                    lst=mid;r=mid-1;\n                }\n                else l=mid+1;\n            }\n            // cout<<i<<endl;\n            // cout<<fst<<\" \"<<lst<<endl;\n            ans+=fst-lst+1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277785",
    "subm_id": "1311679900"
}