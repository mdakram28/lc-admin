{
    "username": "Adi",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n        vector<vector<pair<long long, int>>> rowMax(m, vector<pair<long long, int>>(3, {LLONG_MIN, -1}));\n        for (int r = 0; r < m; ++r) {\n            for (int c = 0; c < n; ++c) {\n                long long currentValue = board[r][c];\n                for (int k = 0; k < 3; ++k) {\n                    if (currentValue > rowMax[r][k].first) {\n                        for (int l = 2; l > k; --l) {\n                            rowMax[r][l] = rowMax[r][l - 1];\n                        }\n                        rowMax[r][k] = {currentValue, c};\n                        break;\n                    }\n                }\n            }\n        }\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Step 3: Check all column combinations\n                    vector<long long> candidates;\n                    for (const auto& [val1, c1] : rowMax[r1]) {\n                        for (const auto& [val2, c2] : rowMax[r2]) {\n                            if (c2 == c1) continue;\n                            for (const auto& [val3, c3] : rowMax[r3]) {\n                                if (c3 == c1 || c3 == c2) continue;\n                                candidates.push_back(val1 + val2 + val3);\n                            }\n                        }\n                    }\n                    if (!candidates.empty()) {\n                        maxSum = max(maxSum, *max_element(candidates.begin(), candidates.end()));\n                    }\n                }\n            }\n        }\n        return maxSum;\n    }\n};\n\n",
    "submit_ts": "1723907793",
    "subm_id": "1359124497"
}