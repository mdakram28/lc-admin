{
    "username": "haifengc",
    "submission": "class Solution {\n    class Pair {\n        int start;\n        int end;\n        Pair(int s, int e) {\n            start = s;\n            end = e;\n        }\n\n\n\n    }\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int[] ret = new int[queries.length];\n        TreeSet<Pair> tree = new TreeSet<>(new Comparator<Pair>() {\n            @Override\n            public int compare(Pair o1, Pair o2) {\n                if(o1.start == o2.start) return o1.end - o2.end;\n                return o1.start - o2.start;\n            }\n        });\n\n        for(int i = 0;i < n - 1;++i) {\n            tree.add(new Pair(i, i + 1));\n        }\n\n        for (int i = 0; i < queries.length; ++i) {\n            int s = queries[i][0];\n            int e = queries[i][1];\n            //System.out.println(\"-------------------\");\n            Set<Pair> subSet = new TreeSet<>(tree.subSet(new Pair(s, s), new Pair(e, e)));\n            boolean found = false;\n            for(Pair p: subSet) {\n               // System.out.println(p.start + \" \" + p.end);\n                if(p.start >= s && p.end <= e) {\n                    found = true;\n                    tree.remove(new Pair(p.start, p.end));\n                }\n            }\n            if(found) tree.add(new Pair(s, e));\n         //   System.out.println(\"Tree size: \" +  tree.size());\n//            for(Pair p: tree) {\n//                System.out.println(p.start + \" \" + p.end);\n//            }\n\n            ret[i] = tree.size();\n        }\n        return ret;\n    }\n\n\n}",
    "submit_ts": "1722743704",
    "subm_id": "1343797806"
}