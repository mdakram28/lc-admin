{
    "username": "A_Le_K",
    "submission": "static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();\n\ntypedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;\ntypedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;\ntypedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;\ntypedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;\n\n#define pb push_back\n#define mp make_pair\n#define eb emplace_back\n#define xx first\n#define yy second\n#define FOR(i,N) for(int i=0; i<N; i++)\n#define g0(x) get<0>(x)\n#define g1(x) get<1>(x)\n#define g2(x) get<2>(x)\n#define g3(x) get<3>(x)\n#define g4(x) get<4>(x)\n\ntemplate<typename A> string to_string(A* ptr) { stringstream ss; ss << \"0x\" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }\nstring to_string(char c) { return ((string)\"'\"+c)+ \"'\"; }\ntemplate <typename A, typename B> string to_string(pair<A, B> p);\ntemplate <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);\ntemplate <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);\nstring to_string(const string& s) { return '\"' + s + '\"'; }\nstring to_string(const char* s) { return to_string((string) s); }\nstring to_string(bool b) { return (b ? \"true\" : \"false\"); }\nstring to_string(vector<bool> v) {\n    bool first = true; string res = \"{\";\n\tfor (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += \", \"; } first = false; res += to_string(v[i]); }\n\tres += \"}\"; return res;\n}\ntemplate <size_t N> string to_string(bitset<N> v) { string res = \"\"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }\ntemplate <typename A> string to_string(A v) {\n\tbool first = true; string res = \"{\";\n\tfor (const auto &x : v) {\n\t\tif (!first) { res += \", \"; }\n\t\tfirst = false; res += to_string(x);\n\t}\n\tres += \"}\"; return res;\n}\ntemplate <typename A, typename B> string to_string(pair<A, B> p) { return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\"; }\ntemplate <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\"; }\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) { return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\"; }\nvoid debug_out() { cout << endl; }\ntemplate <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << \" \" << to_string(H); debug_out(T...); }\n\n#define popc __builtin_popcountll\n//#define popc __builtin_popcount\n//#define clz __builtin_clzll\n//#define clz __builtin_clz\ninline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }\ninline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }\n\ntemplate<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }\ntemplate<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }\n\ntemplate<typename T>\ninline T true_mod(T A, T B)\n{\n    assert(B>=1);\n    A%=B;\n    if(A<0) A+=B;\n    return A;\n}\n\ntemplate<typename T>\ninline T div_down(T A, T B)\n{\n    return (A-true_mod(A,B))/B;\n}\n\ntemplate<typename T>\ninline T div_up(T A, T B)\n{\n    return div_down(A+B-1, B);\n}\n\n#define all(x) (x).begin(), (x).end()\n\n#if 1\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define dbg(...) 42\n#endif\n\nnamespace atcoder {\n \ntemplate <class S, S (*op)(S, S), S (*e)()> struct segtree {\n  public:\n    segtree() : segtree(0) {}\n    segtree(int n) : segtree(std::vector<S>(n, e())) {}\n    segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = 0;\n        while((1<<log)<_n) log++;\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n \n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n \n    S get(int p) {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n    }\n \n    S prod(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n \n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n        return op(sml, smr);\n    }\n \n    S all_prod() { return d[1]; }\n \n    template <bool (*f)(S)> int max_right(int l) {\n        return max_right(l, [](S x) { return f(x); });\n    }\n    template <class F> int max_right(int l, F f) {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!f(op(sm, d[l]))) {\n                while (l < size) {\n                    l = (2 * l);\n                    if (f(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n \n    template <bool (*f)(S)> int min_left(int r) {\n        return min_left(r, [](S x) { return f(x); });\n    }\n    template <class F> int min_left(int r, F f) {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!f(op(d[r], sm))) {\n                while (r < size) {\n                    r = (2 * r + 1);\n                    if (f(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n \n  private:\n    int _n, size, log;\n    std::vector<S> d;\n \n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n \n}  // namespace atcoder\n \npii mymax(pii a, pii b) {\n    return max(a, b);\n}\n \nconst int INF=1e9+100;\npii ninf() {\n    return {-INF, -1};\n}\n\ntypedef atcoder::segtree<pii, mymax, ninf> segtree;\n\ntypedef pii pnt;\n\nvoid upd(segtree& ST, int pos, int val, int idx) {\n    pii tmp={val, idx};\n    pii old=ST.get(pos);\n    pii nova=max(old, tmp);\n    \n    ST.set(pos, nova);\n    \n}\n\nclass Solution {\n    int3 solve(vector<pnt>& p) {\n        const int n=p.size();\n        sort(all(p));\n        \n        map<int, int> my;\n        for(auto [x,y]: p) my[y]=0;\n        \n        int K=0;\n        for(auto&[k,val]: my) val=K++;\n        \n        int3 result={-INF, -1, -1};\n        \n        segtree ST_nxny(K);\n        segtree ST_nxpy(K);\n        \n        FOR(i, n) {\n            const auto [x, y]=p[i];\n            \n            const int iy=my[y];\n            \n            const pii res_left=ST_nxny.prod(0, iy);\n            const auto [val, ileft]=res_left;\n            \n            domax(result, {val+x+y, ileft, i});\n            \n            const pii res_right=ST_nxpy.prod(iy, K);\n            const auto [valr, iright]=res_right;\n            \n            domax(result, {valr+x-y, iright, i});\n            \n            //ST_nxny.set(iy, -x-y);\n            //ST_nxny.set(iy, -x-y)\n            upd(ST_nxny, iy, -x-y, i);\n            upd(ST_nxpy, iy, -x+y, i);\n        }\n        \n        return result;\n    }\n    \n    vector<pnt> exclude(const vector<pnt>& p, int ex) {\n        const int n=p.size();\n        \n        vector<pnt> res;\n        FOR(i, n) if(i!=ex) res.pb(p[i]);\n        return res;\n    }\n    \npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        const int n=points.size();\n        \n        vector<pnt> p(n);\n        FOR(i, n) p[i]={points[i][0], points[i][1]};\n        \n        sort(all(p));\n        \n        auto [val_ignore, i, j]=solve(p);\n        \n        auto p1=exclude(p, i);\n        auto p2=exclude(p, j);\n        \n        auto [val1, i1, j1]=solve(p1);\n        auto [val2, i2, j2]=solve(p2);\n        \n        return min(val1, val2);\n    }\n};"
}