{
    "username": "ryanwong0127",
    "submission": "#include <bits/stdc++.h>\n#pragma GCC optimize(2)\n#define rep(i, a, b) for (int i = (a); i < (b); ++i)\n#define rep_(i, a, b) for (int i = (a); i > (b); i--)\n#define mst(x, a) memset(x, a, sizeof(x))\n#define all(a) begin(a), end(a)\n#define lowbit(x) ((x) & (-(x)))\n#define bitcnt(x) (__builtin_popcountll(x))\n#define se second\n#define fi first\n#define pb push_back\n#define maxe max_element\n#define mine min_element\nusing namespace std;\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<ll, ll> pll;\ntypedef pair<int, ll> pil;\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<vi> vvi;\nconstexpr static int dirs[4][2] = {{0, -1}, {0, 1}, {-1, 0}, {1, 0}};\nconstexpr static int inf = 0x3f3f3f3f, mod = 1e9 + 7;\nconst ll infl = 0x3f3f3f3f3f3f3f3fll;\ntemplate<class T> bool chmax(T &a, T b) {\n    if (a >= b) return false;\n    a = b; return true;\n}\ntemplate<class T> bool chmin(T &a, T b) {\n    if (a <= b) return false;\n    a = b; return true;\n}\ntemplate<class T> bool chsum(T &a, T b) {\n    a = (a + b + mod) % mod;\n    return 0;\n}\nclass UnionFind {\npublic:\n    UnionFind(int size) {\n        parent.resize(size);\n        rank.resize(size, 1);\n        for (int i = 0; i < size; ++i) {\n            parent[i] = i;\n        }\n    }\n\n    ll find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]); // Path compression\n        }\n        return parent[x];\n    }\n\n    void unite(int x, int y) {\n        ll rootX = find(x);\n        ll rootY = find(y);\n\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY]) {\n                parent[rootY] = rootX;\n            } else if (rank[rootX] < rank[rootY]) {\n                parent[rootX] = rootY;\n            } else {\n                parent[rootY] = rootX;\n                rank[rootX] += 1;\n            }\n        }\n    }\n\nprivate:\n    vector<ll> parent;\n    vector<ll> rank;\n};\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        auto circleGroups = findTouchingCircles(circles);\n\n        for (const auto& group : circleGroups) {\n            bool coversTwoEdges = checkBoundaryCoverage(circles, group.second, X, Y);\n            if (coversTwoEdges) {\n                return false;\n            }\n        }\n        return true;\n    }\nprivate:\n    bool areTouching(const vector<int>& circle1, const vector<int>& circle2) {\n        ll x1 = circle1[0], y1 = circle1[1], r1 = circle1[2];\n        ll x2 = circle2[0], y2 = circle2[1], r2 = circle2[2];\n        ll dx = x1 - x2;\n        ll dy = y1 - y2;\n        ll distanceSq = dx * dx + dy * dy;\n        ll radiusSumSq = (r1 + r2) * (r1 + r2);\n        return distanceSq <= radiusSumSq;\n    }\n\n    unordered_map<ll, vector<ll>> findTouchingCircles(const vector<vector<int>>& circles) {\n        ll n = circles.size();\n        UnionFind uf(n);\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (areTouching(circles[i], circles[j])) {\n                    uf.unite(i, j);\n                }\n            }\n        }\n\n        unordered_map<ll, vector<ll>> circleGroups;\n        for (int i = 0; i < n; ++i) {\n            ll root = uf.find(i);\n            circleGroups[root].push_back(i);\n        }\n\n        return circleGroups;\n    }\n\n    bool touchesLeft(int x, int y, int r) {\n        return x - r <= 0;\n    }\n\n    bool touchesRight(int x, int y, int r, int xmax) {\n        return x + r >= xmax;\n    }\n\n    bool touchesBottom(int x, int y, int r) {\n        return y - r <= 0;\n    }\n\n    bool touchesTop(int x, int y, int r, int ymax) {\n        return y + r >= ymax;\n    }\n\n    bool checkBoundaryCoverage(const vector<vector<int>>& circles, const vector<ll>& group, int xmax, int ymax) {\n        unordered_set<string> touchedEdges;\n\n        for (ll idx : group) {\n            ll x = circles[idx][0];\n            ll y = circles[idx][1];\n            ll r = circles[idx][2];\n\n            if (touchesLeft(x, y, r)) touchedEdges.insert(\"left\");\n            if (touchesRight(x, y, r, xmax)) touchedEdges.insert(\"right\");\n            if (touchesBottom(x, y, r)) touchedEdges.insert(\"bottom\");\n            if (touchesTop(x, y, r, ymax)) touchedEdges.insert(\"top\");\n        }\n\n        if (touchedEdges.count(\"left\") && touchedEdges.count(\"bottom\")) return true;\n        if (touchedEdges.count(\"right\") && touchedEdges.count(\"top\")) return true;\n        if (touchedEdges.count(\"bottom\") && touchedEdges.count(\"top\")) return true;\n        if (touchedEdges.count(\"left\") && touchedEdges.count(\"right\")) return true;\n\n        return false;\n    }\n};",
    "submit_ts": "1722138348",
    "subm_id": "1335788462"
}