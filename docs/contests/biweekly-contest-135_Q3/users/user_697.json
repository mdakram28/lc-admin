{
    "username": "DamianSz",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n\n        def is_changable(num, new_diff):\n            return num - new_diff >= 0 or num + new_diff <= k \n\n        diff_to_count = defaultdict(int)\n        max_count = 0\n        for i in range(len(nums) // 2):\n            diff = abs(nums[i] - nums[-i - 1])\n            diff_to_count[diff] += 1\n            max_count = max(diff_to_count[diff], max_count)\n        \n        stuff = []\n        for key,val in diff_to_count.items():\n            stuff.append((val, key))\n        stuff.sort(reverse=True)\n        \n        ans = float('inf')\n        wasted_ops = 1\n        # max - wasted_ops must be less than current count to be wortht it\n        for count, diff in stuff:\n            if max_count - wasted_ops >= count:\n                break\n\n            wasted_ops = max_count - count\n\n            curr_ops = 0\n            for j in range(len(nums) // 2):\n                if abs(nums[j] - nums[-j - 1]) != diff:\n                    if is_changable(nums[j], diff) or is_changable(nums[-j - 1], diff):\n                        curr_ops += 1\n                    else:\n                        curr_ops += 2\n                        wasted_ops += 1\n                if curr_ops > ans:\n                    break\n            ans = min(ans, curr_ops)\n        return ans\n",
    "submit_ts": "1721488003",
    "subm_id": "1327408354"
}