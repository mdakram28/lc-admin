{
    "username": "SkylerTsai",
    "submission": "from bisect import bisect_left\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        obspos = [0]\n        obsmax = [0]\n        ret = []\n        for q in queries:\n            if q[0] == 1:\n                pos = bisect_left(obspos, q[1])\n                obspos.insert(pos, q[1])\n\n                if pos == 0: \n                    obsmax.insert(pos, q[1])\n                elif pos == len(obsmax):\n                    obsmax.append(max(obsmax[pos - 1], obspos[pos] - obspos[pos - 1]))\n                else: \n                    obsmax.insert(pos, max(obsmax[pos - 1], obspos[pos] - obspos[pos - 1]))\n                    \n                for i in range(pos + 1, len(obsmax)):\n                    temp = max(obsmax[i - 1], obspos[i] - obspos[i - 1])\n                    if obsmax[i] == temp: break\n                    obsmax[i] = temp\n                #print(pos, obspos, obsmax)\n            else:\n                pos = bisect_left(obspos, q[1])\n                if pos == len(obspos) or obspos[pos] > q[1]: pos -= 1\n                #print(q, pos, obspos, obsmax)\n                ret.append(q[1] - obspos[pos] >= q[2] or obsmax[pos] >= q[2])\n                    \n        return ret",
    "submit_ts": "1716650453",
    "subm_id": "1267615932"
}