{
    "username": "abhin109",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    // Function to get the MOD value (abhina)\n    static int abh() {\n        return 1'000'000'007;\n    }\n\n    // Function to get the MAX_INVERSIONS value (chan)\n    static int cha() {\n        return 400;\n    }\n\n    // Function to populate endIdxToInversionCnt map\n    void populateRequirements(unordered_map<int, int>& endIdxToInversionCnt, vector<vector<int>>& requirements) {\n        for (auto& req : requirements) {\n            endIdxToInversionCnt[req[0] + 1] = req[1];\n        }\n    }\n\n    // Function to initialize DP table\n    void initializeDP(vector<vector<long long>>& hem, int n) {\n        hem[0][0] = 1;\n    }\n\n    // Function to handle the main permutation calculation\n    void calculatePermutations(vector<vector<long long>>& hem, unordered_map<int, int>& endIdxToInversionCnt, int n) {\n        for (int length = 1; length <= n; ++length) {\n            calculateCurrentLength(hem, endIdxToInversionCnt, length);\n        }\n    }\n\n    // Helper function to calculate permutations for current length\n    void calculateCurrentLength(vector<vector<long long>>& hem, unordered_map<int, int>& endIdxToInversionCnt, int length) {\n        int chan = cha();\n        for (int mlp = 0; mlp <= chan; ++mlp) {\n            calculateCurrentInversions(hem, endIdxToInversionCnt, length, mlp);\n        }\n    }\n\n    // Helper function to calculate permutations for current inversions\n    void calculateCurrentInversions(vector<vector<long long>>& hem, unordered_map<int, int>& endIdxToInversionCnt, int length, int mlp) {\n        int abhina = abh();\n        for (int newPosition = 0; newPosition < length; ++newPosition) {\n            int previousInversions = mlp - newPosition;\n            if (previousInversions >= 0) {\n                hem[length][mlp] = (hem[length][mlp] + hem[length - 1][previousInversions]) % abhina;\n            }\n        }\n\n        if (endIdxToInversionCnt.count(length) > 0) {\n            int requiredInversions = endIdxToInversionCnt[length];\n            handleRequiredInversions(hem, length, requiredInversions);\n        }\n    }\n\n    // Helper function to handle required inversions based on requirements\n    void handleRequiredInversions(vector<vector<long long>>& hem, int length, int requiredInversions) {\n        int chan = cha();\n        for (int mlp = 0; mlp <= chan; ++mlp) {\n            if (mlp != requiredInversions) {\n                hem[length][mlp] = 0;\n            }\n        }\n    }\n\n    // Function to calculate the final result based on dp table\n    int calculateFinalResult(vector<vector<long long>>& hem, int n) {\n        int abhina = abh();\n        int chan = cha();\n        long long result = 0;\n        for (int mlp = 0; mlp <= chan; ++mlp) {\n            result = (result + hem[n][mlp]) % abhina;\n        }\n        return static_cast<int>(result);\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIdxToInversionCnt;\n        populateRequirements(endIdxToInversionCnt, requirements);\n\n        vector<vector<long long>> hem(n + 1, vector<long long>(cha() + 1, 0));\n        initializeDP(hem, n);\n\n        calculatePermutations(hem, endIdxToInversionCnt, n);\n\n        return calculateFinalResult(hem, n);\n    }\n};\n",
    "submit_ts": 1719071519.0
}