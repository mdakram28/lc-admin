{
    "username": "Vysotin Danil",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        int maxPoses[m][3];\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                maxPoses[i][j] = -1;\n            }\n        }\n\n        bool flag;\n        int max;\n        for (int i = 0; i < m; ++i) {\n            for (int k = 0; k < 3; ++k) {\n                max = INT_MIN;\n                for (int j = 0; j < n; ++j) {\n                    flag = true;\n                    for (int pos : maxPoses[i]) {\n                        if (j == pos) {\n                            flag = false;\n                        }\n                    }\n                    if (flag && board[i][j] > max) {\n                        max = board[i][j];\n                        maxPoses[i][k] = j;\n                    }\n                }\n            }\n        }\n//        map<int, int> maxes;\n//        for (const auto& row : maxPoses) {\n//            for (int el : row) {\n//                maxes[el]++;\n//            }\n//        }\n        int c1 = -1, c2 = -1, c3 = -1;\n        long long s;\n        long long ans = LONG_LONG_MIN;\n        for (int i = 0; i < m; ++i) {\n            c1 = maxPoses[i][0];\n            for (int j = 0; j < m; ++j) {\n                if (i == j) {\n                    continue;\n                }\n                if (c1 == maxPoses[j][0]) {\n                    c2 = maxPoses[j][1];\n                } else {\n                    c2 = maxPoses[j][0];\n                }\n                for (int k = 0; k < m; ++k) {\n                    if (k == i || k == j) {\n                        continue;\n                    }\n                    if (maxPoses[k][0] == c1 || maxPoses[k][0] == c2) {\n                        if (maxPoses[k][1] == c1 || maxPoses[k][1] == c2) {\n                            c3 = maxPoses[k][2];\n                        } else {\n                            c3 = maxPoses[k][1];\n                        }\n                    } else {\n                        c3 = maxPoses[k][0];\n                    }\n                    s = (long long) board[i][c1] + (long long) board[j][c2] + (long long) board[k][c3];\n                    if (s > ans) {\n                        ans = s;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723909708",
    "subm_id": "1359202742"
}