{
    "username": "wweijia",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n\n        @cache\n        def minimumArea(t, b, l, r):\n            row_min = None\n            row_max = None\n            col_min = None\n            col_max = None\n\n            for i in range(t, b + 1):\n                for j in range(l, r + 1):\n                    if grid[i][j]:\n                        if row_min is None:\n                            row_min = i\n                        row_max = i\n\n            for j in range(l, r + 1):\n                for i in range(t, b + 1):\n                    if grid[i][j]:\n                        if col_min is None:\n                            col_min = j\n                        col_max = j\n\n            if row_max == None or row_min == None or col_max == None or col_min == None:\n                return inf\n\n            return (row_max - row_min + 1) * (col_max - col_min + 1)\n\n        @cache\n        def dfs(t, b, l, r, k):\n            if t > b or l > r:\n                return inf\n\n            if k == 1:\n                return minimumArea(t, b, l, r)\n\n            # if (t > b or l > r) and k == 0:\n            #     return 0\n\n            # if t > b or l > r or k == 0:\n            #     return inf\n\n            res = inf\n            for i in range(t, b + 1):\n                res = min(res, dfs(t, i, l, r, 1) + dfs(i + 1, b, l, r, k - 1))\n                res = min(res, dfs(i, b, l, r, 1) + dfs(t, i - 1, l, r, k - 1))\n\n            for i in range(l, r + 1):\n                res = min(res, dfs(t, b, l, i, 1) + dfs(t, b, i + 1, r, k - 1))\n                res = min(res, dfs(t, b, i, r, 1) + dfs(t, b, l, i - 1, k - 1))\n\n            return res\n\n        m, n = len(grid), len(grid[0])\n        return dfs(0, m - 1, 0, n - 1, 3)",
    "submit_ts": 1719113884.0
}