{
    "username": "154775258",
    "submission": "    const int N = 1e5 + 1;\nclass Solution {\npublic:\n\n    int f[N * 4];\n    \n    void bulid(vector<int>& nums,int k,int l,int r){\n        if(l == r){\n            f[k] = nums[l-1];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        bulid(nums,k << 1, l, mid);\n        bulid(nums,(k << 1) + 1, mid + 1, r);\n        f[k] = f[k << 1] & f[(k << 1) + 1];\n    }\n    \n    int get(int k,int l,int r,int left,int right){\n        if(l == left && r == right){\n            return f[k];\n        }\n        int mid = (l + r) >> 1;\n        if(right <= mid)return get(k << 1, l, mid, left, right);\n        if(left > mid)return get((k << 1) + 1, mid + 1, r, left, right);\n        return get(k << 1,l,mid,left, mid) & get((k << 1) + 1, mid + 1, r, mid + 1,right);\n    }\n    \n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        bulid(nums,1,1, n);\n        long long ans = 0;\n        for(int i = 1;i <= n;++i){\n            int l = i,r = n;\n            while(l <= r){\n                int mid = (l + r) >> 1;\n                int num = get(1,1,n,i, mid);\n                if(num <= k){\n                    r = mid - 1;\n                }\n                else{\n                    l = mid + 1;\n                }\n            }\n            ans -= l;\n            l = i,r = n;\n            \n            while(l <= r){\n                int mid = (l + r) >> 1;\n                int num = get(1,1,n,i, mid);\n                if(num < k){\n                    r = mid - 1;\n                }\n                else{\n                    l = mid + 1;\n                }\n            }\n            ans += l;\n        }\n        cout << '\\n';\n        return ans;\n    }\n};",
    "submit_ts": "1720280689",
    "subm_id": "1311798583"
}