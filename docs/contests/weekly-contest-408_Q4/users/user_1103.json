{
    "username": "codejedi-ai",
    "submission": "public class Solution\n{\n    public bool CanReachCorner(int X, int Y, IList<IList<int>> circles)\n    {\n        int n = circles.Count;\n        const int MAX_N = 1002;\n        bool[,] linkedCircles = new bool[MAX_N, MAX_N];\n\n        bool CircleLinked(IList<int> c1, IList<int> c2)\n        {\n            int x1 = c1[0], y1 = c1[1], r1 = c1[2];\n            int x2 = c2[0], y2 = c2[1], r2 = c2[2];\n            return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2) <= (r1 + r2) * (r1 + r2);\n        }\n\n        for (int i = 0; i < n; ++i)\n        {\n            for (int j = i + 1; j < n; ++j)\n            {\n                if (CircleLinked(circles[i], circles[j]))\n                {\n                    linkedCircles[i, j] = linkedCircles[j, i] = true;\n                }\n            }\n        }\n\n        const int startNode = 1000, endNode = 1001;\n\n        for (int i = 0; i < n; ++i)\n        {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (x - r <= 0)\n            {\n                linkedCircles[startNode, i] = linkedCircles[i, startNode] = true;\n            }\n            if (x + r >= X)\n            {\n                linkedCircles[i, endNode] = linkedCircles[endNode, i] = true;\n            }\n            if (y - r <= 0)\n            {\n                linkedCircles[i, endNode] = linkedCircles[endNode, i] = true;\n            }\n            if (y + r >= Y)\n            {\n                linkedCircles[startNode, i] = linkedCircles[i, startNode] = true;\n            }\n        }\n\n        Queue<int> queue = new Queue<int>();\n        HashSet<int> visited = new HashSet<int>();\n        queue.Enqueue(startNode);\n        visited.Add(startNode);\n\n        while (queue.Count > 0)\n        {\n            int curr = queue.Dequeue();\n            if (curr == endNode)\n            {\n                return false;\n            }\n            for (int i = 0; i < MAX_N; ++i)\n            {\n                if (linkedCircles[curr, i] && !visited.Contains(i))\n                {\n                    queue.Enqueue(i);\n                    visited.Add(i);\n                }\n            }\n        }\n\n        return true;\n    }\n}\n",
    "submit_ts": "1722138995",
    "subm_id": "1335805054"
}