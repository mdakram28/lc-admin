{
    "username": "rishi01prince",
    "submission": "class Solution {\npublic:\n    long long help(map<vector<long long>, long long> &mpp, long long i, int &k, long long can, long long jump ,long long &ans) {\n    // if (i == k) ans++;\n    if (mpp.find({i, can, jump}) != mpp.end()) return mpp[{i, can, jump}];\n    long long curr = i+ static_cast<long long>(powl(static_cast<long double>(2), static_cast<long double>(jump)));\n\n    long long take = 0, take2 = 0;\n    if (i > 0 && can) {\n        take = help(mpp, i - 1, k, 0, jump , ans); \n        if(i-1 == k) take++; \n    }\n   \n    if (curr <= k+1) {\n        take2 = help(mpp, curr, k, 1, jump + 1 , ans);\n        if(curr == k) take2++;\n    }\n    // cout<<i<<\" \"<<take<<\" \"<<take2<<endl;\n    return mpp[{i, can, jump}] = take + take2;\n}\n\nint waysToReachStair(int k) {\n    map<vector<long long>, long long> mpp;\n    long long ans = 0;\n    long long res = (help(mpp, 1, k, 1, 0 , ans)); \n    if(k == 1) res++;\n    return (int)res;\n}\n};",
    "submit_ts": "1716090006",
    "subm_id": "1261856883"
}