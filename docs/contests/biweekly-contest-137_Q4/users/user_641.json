{
    "username": "prefixsum",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        \"\"\"\n        Find the three largest values in each row, so that the next best can be\n        selected in the case of a conflict. Group these values into columns so that\n        three columns can be picked with the maximum sum of non-conflicting cells.\n        \"\"\"\n        best = []\n        for i in range(len(board)):\n            row = board[i]\n            indexed_row = [(row[j], j) for j in range(len(row))]\n            best_in_indexed_row = heapq.nlargest(3, indexed_row)\n            for cell in best_in_indexed_row:\n                best.append((cell[0], i, cell[1]))\n        best.sort(reverse=True)\n        best = best[:27]\n        result = None\n        for i in range(len(best)):\n            for j in range(i + 1, len(best)):\n                for k in range(j + 1, len(best)):\n                    if best[i][1] == best[j][1]:\n                        continue\n                    if best[i][1] == best[k][1]:\n                        continue\n                    if best[j][1] == best[k][1]:\n                        continue\n                    if best[i][2] == best[j][2]:\n                        continue\n                    if best[i][2] == best[k][2]:\n                        continue\n                    if best[j][2] == best[k][2]:\n                        continue\n                    if not result:\n                        result = best[i][0] + best[j][0] + best[k][0]\n                    else:\n                        result = max(result, best[i][0] + best[j][0] + best[k][0])\n        return result\n",
    "submit_ts": "1723908704",
    "subm_id": "1359163735"
}