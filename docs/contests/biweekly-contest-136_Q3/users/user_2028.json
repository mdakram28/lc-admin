{
    "username": "ASHIS_MISHRA",
    "submission": "class Solution {\n    int n;\n    int m;\n\n    private boolean isMiddleOne(int grid[][]) {\n        return n % 2 == 1 && m % 2 == 1 && grid[n / 2][m / 2] == 1;\n    }\n\n    private void solve(List<Integer> shift, int[][] grid, boolean isRow) {\n        if (isRow && n % 2 == 1) {\n            int row = n / 2;\n            for (int a = 0, b = m - 1; a < b; a++, b--) {\n                int sm = grid[row][a] + grid[row][b];\n                shift.set(sm, shift.get(sm) + 1);\n            }\n        } else if (!isRow && m % 2 == 1) {\n            int col = m / 2;\n            for (int a = 0, b = n - 1; a < b; a++, b--) {\n                int sm = grid[a][col] + grid[b][col];\n                shift.set(sm, shift.get(sm) + 1);\n            }\n        }\n    }\n\n    private int inner(int[][] grid) {\n        int flips = 0;\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int a = grid[i][j];\n                int b = grid[n - 1 - i][j];\n                int c = grid[i][m - 1 - j];\n                int d = grid[n - 1 - i][m - 1 - j];\n\n                int sm = a + b + c + d;\n\n                if (sm != 0 && sm != 4) {\n                    flips += Math.min(sm, 4 - sm);\n                }\n            }\n        }\n        return flips;\n    }\n\n    public int minFlips(int[][] grid) {\n        n = grid.length;\n        m = grid[0].length;\n        int count = 0;\n\n        if (isMiddleOne(grid)) {\n            count += 1;\n        }\n\n        List<Integer> shift = new ArrayList<>();\n        for(int i=0;i<3;i++){\n            shift.add(0);\n        }\n\n        solve(shift, grid, true); \n        solve(shift, grid, false);\n\n        if (shift.get(2) % 2 != 1) {\n            count += shift.get(1);\n        } \n        else {\n            count += shift.get(1) > 0 ? shift.get(1) : 2;\n        }\n\n        count += inner(grid);\n\n        return count;\n    }\n}\n",
    "submit_ts": "1722700150",
    "subm_id": "1343233156"
}