{
    "username": "Ajinkya Shinde",
    "submission": "class Solution {\n    long recur(int row,int placed, HashMap<Integer,Boolean> cols_not_allowed,int[][] board){\n        if(placed == 3) return 0;\n        int n = board.length,m=board[0].length;\n        if(row == n) return Integer.MIN_VALUE;\n        long not_place = recur(row+1,placed,cols_not_allowed,board);\n        long place = Integer.MIN_VALUE;\n        for(int j=0;j<m;j++){\n            if(cols_not_allowed.containsKey(j) == false){\n                //can place in this col\n                cols_not_allowed.put(j,true);\n                long temp = recur(row+1,placed+1,cols_not_allowed,board) + board[row][j];\n                place = Math.max(place,temp);\n                cols_not_allowed.remove(j);\n            }\n            //else we cant put it, so lets move on to the next;\n        }\n        //lets return the max of place in this row or not.\n        return Math.max(not_place,place);\n    }\n    long count_placed(int first,int second){\n        int placed=0;\n        if(first!=-1)placed++;\n        if(second!=-1)placed++;\n        return placed;\n    }\n    long recur2(int row,int first,int second,int[][]board,long[][][] dp){\n        int n = board.length,m=board[0].length;\n        if(row == n-1){\n            long placed = count_placed(first,second);\n            if(placed < 2) {\n                //means not even two are placed yer.\n                return (long)-1e10;\n            }\n            //else we need to place the third one.\n            placed = (long)-1e10;\n            for(int j=0;j<m;j++){\n                if(j!=first && j!=second){\n                    //means i cane place at thsi position.\n                    placed = Math.max(placed, board[row][j]);\n                }\n            }\n            //just return the max of the cols in the last ;\n            return dp[row][first+1][second+1] = placed;\n        }\n        if(dp[row][first+1][second+1]!=1e10) return dp[row][first+1][second+1];\n        long already_placed = count_placed(first,second);\n        long not_placed = recur2(row+1,first,second,board,dp);\n        long placed = (long)-1e10;\n        if(already_placed == 2){\n            //just count this as the last\n             placed = (long)-1e10;\n            for(int j=0;j<m;j++){\n                if(j!=first && j!=second) placed=Math.max(placed,board[row][j]);\n            }\n\n        }\n        else if(already_placed == 0){\n             placed = (long)-1e10;\n            for(int j=0;j<m;j++){\n                placed = Math.max(placed,board[row][j]+recur2(row+1,j,second,board,dp));\n            }\n            return Math.max(placed,not_placed);\n        }\n        else{\n            //can be one oly\n\n            for(int j=0;j<m;j++){\n                if(j!=first) placed=Math.max(placed , board[row][j]+recur2(row+1,first,j,board,dp));\n            }\n        }\n        return dp[row][first+1][second+1] = Math.max(placed,not_placed);\n\n        //means now this is not the last row, means i can or cant place some thing here.\n\n        \n        //place some thign here.\n\n    }\n\n    public long maximumValueSum(int[][] board) {\n        // HashMap<Integer,Boolean> map = new HashMap<>();\n        // return recur(0,0,map,board);\n        int n = board.length;\n        long dp[][][] = new long[n][102][102];\n        for(int i=0;i<n;i++){\n            for(int j=0;j<102;j++) Arrays.fill(dp[i][j],(long)1e10);\n        }\n        return recur2(0,-1,-1,board,dp);\n    }\n}",
    "submit_ts": "1723909740",
    "subm_id": "1359203995"
}