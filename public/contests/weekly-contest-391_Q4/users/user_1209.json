{
    "username": "abdulrahman27",
    "submission": "#define ll long long \nclass Solution {\npublic:\n    int MaxDist(vector<pair<int, int> >& A, int N)\n    {\n        // Vectors to store maximum and\n        // minimum of all the four forms\n        vector<int> V(N), V1(N);\n\n        for (int i = 0; i < N; i++) {\n            V[i] = A[i].first + A[i].second;\n            V1[i] = A[i].first - A[i].second;\n        }\n\n        // Sorting both the vectors\n        sort(V.begin(), V.end());\n        sort(V1.begin(), V1.end());\n        int Max=V[V.size()-1]-V[0];\n        Max=max(Max,min(V1[V1.size()-2]-V1[0],V1[V1.size()-1]-V1[1]));\n        int Min=V1[V1.size()-1]-V1[0];\n        Min=max(Min,min(V[V.size()-2]-V[0],V[V.size()-1]-V[1]));\n        int ans=min(Min,Max);\n        for (int i=0;i<N;i++)\n        {\n            if (A[i].first+A[i].second==V[0])\n            {\n                if (A[i].first-A[i].second==V1[0])\n                    ans=min(ans,max(V[N-1]-V[1],V1[N-1]-V1[1]));\n                else if (A[i].first-A[i].second==V1[N-1])\n                    ans=min(ans,max(V[N-1]-V[1],V1[N-2]-V1[0]));\n            }\n            else if (A[i].first+A[i].second==V[N-1])\n            {\n                if (A[i].first-A[i].second==V1[0])\n                    ans=min(ans,max(V[N-2]-V[0],V1[N-1]-V1[1]));\n                else if (A[i].first-A[i].second==V1[N-1])\n                    ans=min(ans,max(V[N-2]-V[0],V1[N-2]-V1[0]));\n            }\n            \n        }\n        return ans;\n\n    }\n    int minimumDistance(vector<vector<int>>& p) {\n        vector<pair<int,int>> A;\n        for (ll i=0;i<p.size();i++)\n        {\n            pair<int,int> x;\n            x.first=p[i][0];\n            x.second=p[i][1];\n            A.push_back(x);\n        }\n        return MaxDist(A,A.size());\n        \n    }\n};"
}