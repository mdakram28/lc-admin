{
    "username": "babablacksheep014",
    "submission": "from collections import defaultdict, deque\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def get_graph(edges):\n            graph = defaultdict(list)\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n            return graph\n\n        def get_diameter(graph):            \n            diameter = 0\n            def dfs(node, parent):\n                nonlocal diameter\n                h1, h2 = 0, 0\n                for child in graph[node]:\n                    if child != parent:\n                        h = dfs(child, node)\n                        if h > h1:\n                            h2 = h1\n                            h1 = h\n                        elif h > h2:\n                            h2 = h\n                diameter = max(diameter, h1 + h2)\n                return h1 + 1\n\n            dfs(0, -1)\n            return diameter\n\n        def bfs(tree, start):\n            n = len(tree)\n            dist = [-1] * n\n            dist[start] = 0\n            queue = deque([start])\n            \n            while queue:\n                node = queue.popleft()\n                for neighbor in tree[node]:\n                    if dist[neighbor] == -1:\n                        dist[neighbor] = dist[node] + 1\n                        queue.append(neighbor)\n            \n            max_dist = max(dist)\n            farthest_node = dist.index(max_dist)\n            return farthest_node, max_dist, dist\n\n        def get_min_height(tree):\n            if not tree:\n                return 0\n            u, _, _ = bfs(tree, 0)\n            v, _, dist_from_u = bfs(tree, u)\n            _, max_dist_from_v, dist_from_v = bfs(tree, v)\n            \n            min_height = float('inf')\n            for i in range(len(tree)):\n                height_when_rooted_at_i = max(dist_from_u[i], dist_from_v[i])\n                min_height = min(min_height, height_when_rooted_at_i)\n            \n            return min_height\n                \n        graph1, graph2 = get_graph(edges1), get_graph(edges2)\n        diameter1, diameter2 = get_diameter(graph1), get_diameter(graph2)\n        max_h1, max_h2 = get_min_height(graph1), get_min_height(graph2)\n\n        return max(\n            diameter1,\n            diameter2,\n            max_h1 + max_h2 + 1\n        )\n\n             \n                    \n         ",
    "submit_ts": 1719717945.0
}