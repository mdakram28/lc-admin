{
    "username": "shepherd_a",
    "submission": "import sys\n\nsys.setrecursionlimit(1000)\n\nclass TrieNode:\n\n    def __init__(self):\n        self.children = dict()\n        self.cost = None\n\n    def append(self, s: str, cost:int):\n        if not s:\n            return\n        node = self\n        for c in s:\n            if c in node.children:\n                node = node.children[c]\n            else:\n                new_node = TrieNode()\n                node.children[c] = new_node\n                node = new_node\n        node.cost = cost if node.cost == None else min(cost, node.cost)\n\n    def get_costs(self, s:str):\n        result = []\n        node = self\n        for i,c in enumerate(s):\n            if c not in node.children:\n                break\n            node = node.children[c]\n            result.append(node.cost)\n        return result \n\nclass Solution:\n    def minimumCost(self, target: str, words: list[str], costs: list[int]) -> int:\n        root = TrieNode()\n        for w,c in zip(words,costs):\n            root.append(w, c)\n        dp = root.get_costs(target)\n        dp += [None] * (len(target) - len(dp))\n        for i in range(1, len(target)):\n            if dp[i-1] == None:\n                continue\n            costs = root.get_costs(target[i:])\n            for j,c in enumerate(costs):\n               if c == None:\n                   continue\n               if dp[i+j] == None:\n                   dp[i+j] = c + dp[i-1]\n               else:\n                   dp[i+j] = min(dp[i+j], c + dp[i-1]) \n        return -1 if dp[-1] == None else dp[-1]\n",
    "submit_ts": "1720324624",
    "subm_id": "1312404064"
}