{
    "username": "tttyyy49",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int[] a = new int[k + 1];\n        SegmentTree tree = new SegmentTree(a);\n        \n        for (int i = 0, j = nums.length - 1; i < j; ++i, --j) {\n            int l = Math.min(nums[i], nums[j]);\n            int r = Math.max(nums[i], nums[j]);\n            int d = r - l;\n            \n            int max1 = Math.max(k - l, r);\n            \n            tree.update(1, 0, k, 0, d - 1, 1);\n            tree.update(1, 0, k, d + 1, max1, 1);\n            tree.update(1, 0, k, max1 + 1, k, 2);\n        }\n        \n        int res = Integer.MAX_VALUE;\n        for (int i = 0; i <= k; ++i) {\n            res = Math.min(res, tree.get(1, 0, k, i));\n        }\n\n        return res;\n    }\n}\n\nclass SegmentTree {\n    int[] t;\n    int n;\n\n    public SegmentTree(int[] a) {\n        n = a.length;\n        t = new int[n * 4];\n        build(a, 1, 0, n - 1);\n    }\n\n    void build(int a[], int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = a[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(a, v*2, tl, tm);\n            build(a, v*2+1, tm+1, tr);\n            t[v] = 0;\n        }\n    }\n    \n    void update(int v, int tl, int tr, int l, int r, int add) {\n        if (l > r)\n            return;\n        if (l == tl && r == tr) {\n            t[v] += add;\n        } else {\n            int tm = (tl + tr) / 2;\n            update(v*2, tl, tm, l, Math.min(r, tm), add);\n            update(v*2+1, tm+1, tr, Math.max(l, tm+1), r, add);\n        }\n    }\n\n    int get(int v, int tl, int tr, int pos) {\n        if (tl == tr)\n            return t[v];\n        int tm = (tl + tr) / 2;\n        if (pos <= tm)\n            return t[v] + get(v*2, tl, tm, pos);\n        else\n            return t[v] + get(v*2+1, tm+1, tr, pos);\n    }\n}",
    "submit_ts": "1721489157",
    "subm_id": "1327444686"
}