{
    "username": "tabaahii07",
    "submission": "#include <vector>\n#include <cmath>\nusing namespace std;\n\nclass SparseTable {\npublic:\n    // Function to combine two elements using AND operation\n    int combine(int a, int b) {\n        return a & b;\n    }\n\n    // Constructor to build the sparse table from the input array\n    SparseTable(const vector<int>& array) {\n        n = array.size();\n        maxLog = log2(n) + 1;\n        table = vector<vector<int>>(n, vector<int>(maxLog));\n        build(array);\n    }\n\n    // Function to perform range query for the AND operation\n    int query(int left, int right) {\n        int log = log2(right - left + 1);\n        return combine(table[left][log], table[right - (1 << log) + 1][log]);\n    }\n\nprivate:\n    int n, maxLog;\n    vector<vector<int>> table;\n\n    // Function to build the sparse table\n    void build(const vector<int>& array) {\n        for (int i = 0; i < n; ++i) {\n            table[i][0] = array[i];\n        }\n        for (int j = 1; (1 << j) <= n; ++j) {\n            for (int i = 0; (i + (1 << j) - 1) < n; ++i) {\n                table[i][j] = combine(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int target) {\n        SparseTable st(nums);\n        long long totalSubarrays = 0;\n        const int n = nums.size();\n        \n        for (int start = 0; start < n; ++start) {\n            int left = start, right = n - 1, mid;\n            int minIndex = -1, maxIndex = -1;\n            \n            // Binary search for the minimum valid index\n            while (left <= right) {\n                mid = (left + right) / 2;\n                if (st.query(start, mid) > target) {\n                    left = mid + 1;\n                } else {\n                    minIndex = mid;\n                    right = mid - 1;\n                }\n            }\n            \n            if (minIndex == -1 || st.query(start, minIndex) != target) continue;\n\n            // Binary search for the maximum valid index\n            left = start;\n            right = n - 1;\n            while (left <= right) {\n                mid = (left + right) / 2;\n                if (st.query(start, mid) >= target) {\n                    left = mid + 1;\n                    maxIndex = mid;\n                } else {\n                    right = mid - 1;\n                }\n            }\n            \n            totalSubarrays += 1LL * (maxIndex - minIndex + 1);\n        }\n        \n        return totalSubarrays;\n    }\n};\n",
    "submit_ts": "1720278073",
    "subm_id": "1311693146"
}