{
    "username": "ManyuD",
    "submission": "class NumArray:\n\n    def __init__(self, nums: List[int]):\n        self.nums = nums\n        b = ceil(math.log(len(nums), 2))\n        baselen = 1 << b\n        self.baselen = baselen\n        t = [0] * baselen\n        \n        def processT(t):\n            res = []\n            # print(t)\n            for i in range(len(t)):\n                if i == 0 or i == len(t) - 1:\n                    res.append(0)\n                else:\n                    if t[i] > t[i - 1] and t[i] > t[i + 1]:\n                        res.append(1)\n                    else:\n                        res.append(0)\n            return res\n        \n        t[: len(nums)] = processT(nums)\n        # print(t)        \n        arr = [0] * ((1 << (b + 1)) - 1)\n        arr[len(arr) - len(t) :] = t[::]\n\n        self.actStart = len(arr) - len(t)\n        # print(\"act start\", self.actStart)\n        for i in range(len(arr) - len(t) - 1, -1, -1):\n            arr[i] = arr[i * 2 + 1] + arr[i * 2 + 2]\n\n        self.arr = arr\n        # print(arr)\n\n    def update(self, index: int, val: int, first = False) -> None:\n        # print(index, val, first)\n        def hupd(i, nleft, nright):\n            # print(i, nleft, nright, index)\n            if nleft == nright == index:\n                self.arr[i] += val\n                return\n\n            if not (nleft <= index <= nright):\n                return\n\n            self.arr[i] += val\n            mid = (nleft + nright) // 2\n            hupd(i * 2 + 1, nleft, mid)\n            hupd(i * 2 + 2, mid + 1, nright)\n\n        offset = len(self.arr) - self.baselen\n        # idx = index + offset\n        idx = self.actStart + index\n        self.nums[index] = val\n        # print(\"base\", self.actStart, self.baselen,offset, idx, len(self.arr))\n        # val -= self.arr[idx]\n        \n        # self.arr[idx] = val\n        val = 0\n        \n        if (index > 0 and index < len(self.nums) - 1):\n            aftUpdt = (self.nums[index] > self.nums[index + 1]) and (self.nums[index] > self.nums[index - 1])\n            # print(f\"aft : {aftUpdt}, self.arr : {self.arr[idx]}\", self.nums, idx)\n            if int(self.arr[idx]) != aftUpdt:\n                if self.arr[idx] == 0:\n                    val = 1\n                else:\n                    val = -1\n        else:\n            # print(\"OHO\")\n            if first and index - 1 >= 0:\n                self.update(index - 1, self.nums[index - 1])\n            if first and index + 1 < len(self.nums):\n                self.update(index + 1, self.nums[index + 1])\n            return 0\n        \n        \n                \n        \n            \n        # print(val)\n        hupd(0, 0, self.baselen - 1)\n        \n        if first and index - 1 >= 0:\n            self.update(index - 1, self.nums[index - 1])\n        if first and index + 1 < len(self.nums):\n            self.update(index + 1, self.nums[index + 1])\n        # print(self.arr)\n\n    def sumRange(self, left: int, right: int) -> int:\n\n        def hsum(i, nleft, nright):\n\n            if nleft == left and nright == right:\n                return self.arr[i]\n\n            if nleft > right or nright < left:\n                return 0\n\n            if left <= nleft <= nright <= right:\n                return self.arr[i]\n\n            mid = (nleft + nright) // 2\n\n            return hsum(i * 2 + 1, nleft, mid) + hsum(i * 2 + 2, mid + 1, nright)\n\n        return hsum(0, 0, self.baselen - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        res = []\n        n = len(nums)\n        \n        seg = NumArray(nums)\n        \n        \n        for q, a, b in queries:\n            if q == 2:\n                seg.update(a, b, True)\n                # print(seg.arr)\n                # print(seg.nums)\n            else:\n                # print(seg.nums, seg.arr)\n                res.append(seg.sumRange(a + 1, b - 1))\n        return res",
    "submit_ts": "1718508845",
    "subm_id": "1289692654"
}