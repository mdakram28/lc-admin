{
    "username": "wddd",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return \"9\".repeat(n);\n        }\n        if (k == 2) {\n            return n == 1 ? \"8\" : \"8\" + \"9\".repeat(n - 2) + \"8\";\n        }\n        if (k == 4) {\n            if (n < 4) {\n                return \"8\".repeat(n);\n            } else {\n                return \"88\" + \"9\".repeat(n - 4) + \"88\";\n            }\n        }\n        if (k == 8) {\n            if (n < 6) {\n                return \"8\".repeat(n);\n            } else {\n                return \"888\" + \"9\".repeat(n - 6) + \"888\";\n            }\n        }\n        if (k == 5) {\n            return n == 1 ? \"5\" : \"5\" + \"9\".repeat(n - 2) + \"5\";\n        }\n        if (k == 6) {\n            if (n == 1) {\n                return \"6\";\n            } else if (n % 2 == 1) {\n                return \"8\" + \"9\".repeat((n - 1) / 2 - 1) + \"8\" + \"9\".repeat((n - 1) / 2 - 1) + \"8\";\n            } else {\n                if (n == 2) {\n                    return \"66\";\n                } else {\n                    return \"8\" + \"9\".repeat(n / 2 - 2) + \"77\" + \"9\".repeat(n / 2 - 2) + \"8\";\n                }\n            }\n        }\n        if (k == 7) {\n            if (n == 1) {\n                return \"7\";\n            } else if (n % 2 == 0) {\n                StringBuilder sb = new StringBuilder(\"9\".repeat(n));\n\n                while (true) {\n                    if (isDivisible7(sb.toString())) {\n                        return sb.toString();\n                    }\n                    minus(sb, n);\n                    if (end(sb)) {\n                        return \"7\".repeat(n);\n                    }\n                }\n            } else {\n                StringBuilder sb = new StringBuilder(\"9\".repeat(n));\n\n                while (true) {\n                    if (isDivisible7(sb.toString())) {\n                        return sb.toString();\n                    }\n                    minus(sb, n);\n                    if (end(sb)) {\n                        return \"7\".repeat(n);\n                    }\n                }\n            }\n        }\n\n        return \"\";\n    }\n\n    private boolean end(StringBuilder sb) {\n        for (int i = 0; i < sb.length(); i++) {\n            if (sb.charAt(i) != '7') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    private void minus(StringBuilder sb, int n) {\n        if (n % 2 == 0) {\n            for (int i = n / 2 - 1; i >= 0; i--) {\n                if (sb.charAt(i) > '0') {\n                    sb.setCharAt(i, (char) (sb.charAt(i) - 1));\n                    sb.setCharAt(n - 1 - i, sb.charAt(i));\n                    break;\n                } else {\n                    sb.setCharAt(i, '9');\n                    sb.setCharAt(n - 1 - i, '9');\n                }\n            }\n        } else {\n            for (int i = n / 2; i >= 0; i--) {\n                if (sb.charAt(i) > '0') {\n                    sb.setCharAt(i, (char) (sb.charAt(i) - 1));\n                    sb.setCharAt(n - 1 - i, sb.charAt(i));\n                    break;\n                } else {\n                    sb.setCharAt(i, '9');\n                    sb.setCharAt(n - 1 - i, '9');\n                }\n            }\n        }\n    }\n\n    private boolean isDivisible7(String num) {\n        int n = num.length();\n        if (n == 0 && num.charAt(0) == '0')\n            return true;\n\n        // Append required 0s at the beginning.\n        if (n % 3 == 1)\n            num = \"00\" + num;\n        if (n % 3 == 2)\n            num = \"0\" + num;\n        n = num.length();\n\n        // add digits in group of three in gSum\n        long gSum = 0, p = 1;\n        for (int i = n - 1; i >= 0; i--) {\n\n            // group saves 3-digit group\n            long group = 0;\n            group += num.charAt(i--) - '0';\n            group += (num.charAt(i--) - '0') * 10;\n            group += (num.charAt(i) - '0') * 100;\n            gSum = gSum + group * p;\n            // generate alternate series of plus and minus\n            p = p * -1;\n        }\n\n        // calculate result till 3 digit sum\n        return (gSum % 7 == 0);\n    }\n}",
    "submit_ts": "1723951114",
    "subm_id": "1359763605"
}