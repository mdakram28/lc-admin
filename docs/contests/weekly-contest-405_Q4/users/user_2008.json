{
    "username": "sairohan123",
    "submission": "class Node{\npublic:\n    map<char, Node*>children;\n    int cost;\n    bool is_end;\n    Node(){\n        is_end = false;\n        cost = 0;\n    }\n    \n    void setIsEnd(){\n        is_end = true;\n    }\n    \n    bool getIsEnd(){\n        return is_end;\n    }\n    \n    bool containsKey(char ch){\n        return children.count(ch);\n    }\n    \n    Node* getNext(char ch){\n        return children[ch];\n    }\n    \n    void setNext(char ch, Node* new_node){\n        children[ch] = new_node;\n    }\n    \n    void setCost(int cost_){\n        cost = cost_;\n    }\n    \n    int getCost(){\n        return cost;\n    }\n};\n\nclass Trie{\npublic:\n    Node* root;\n    Trie(){\n        root = new Node();\n    }\n    \n    void insert(string &s, int cost){\n        Node* p = root;\n        for(int i = 0; i < s.size(); i++){\n            if(!(p -> containsKey(s[i]))){\n                Node* new_node = new Node();\n                p -> setNext(s[i], new_node);\n            }\n            p = p -> getNext(s[i]);\n        }\n        \n        if(p -> getIsEnd()){\n            cost = min(cost, p -> getCost());\n        }\n        p -> setIsEnd();\n        p -> setCost(cost);\n    }\n    \n    vector<pair<int, int>> getMatchCosts(string &s, int start_pos){\n        Node* p = root;\n        vector<pair<int, int>>ans;\n        for(int i = start_pos; i < s.size(); i++){\n            if(!(p -> containsKey(s[i]))){\n                break;\n            }\n            p = p -> getNext(s[i]);\n            if(p -> getIsEnd()){\n                ans.push_back({i + 1, p -> getCost()});\n            }\n        }\n        return ans;\n    }\n    \n    \n};\n\nclass Solution {\npublic:\n    int dp[50001];\n    \n    void resetDP(int n){\n        for(int i = 0; i < n; i++){\n            dp[i] = -1;\n        }\n    }\n    \n    int getMC(vector<pair<int, int>>&nicpl, string &target, int n){\n        if(n == 0){\n            return 0;\n        }\n        if(dp[n] != -1){\n            return dp[n];\n        }\n        int ans = INT_MAX;\n        // auto nicpl = trie -> getMatchCosts(target, target.size() - 1 - n + 1);\n        // auto nicpl = gmvs;\n        for(auto [ni, cost] : nicpl){\n            int cni = target.size() - 1 - ni + 1;\n            auto cand = getMC(nicpl, target, cni);\n            cand = (cand != INT_MAX) ? cand + cost : cand;\n            ans = min(ans, cand);\n        }\n        return dp[n] = ans;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        for(int i = 0; i < words.size(); i++){\n            reverse(words[i].begin(), words[i].end());\n            trie -> insert(words[i], costs[i]);\n        }\n        reverse(target.begin(), target.end());\n        int ans;\n        // resetDP(target.size() + 1);\n        dp[0] = 0;\n        for(int i = 0; i < target.size(); i++){\n            auto nicpl = trie -> getMatchCosts(target, target.size() - 1 - i);\n            int cans = INT_MAX;\n            for(auto [ni, cost] : nicpl){\n                int cni = target.size() - 1 - ni + 1;\n                // cout << cni << \", \";\n                auto cand = dp[cni];\n                cand = (cand != INT_MAX) ? cand + cost : cand;\n                cans = min(cans, cand);\n            }\n            ans = cans;\n            dp[i + 1] = cans;\n        }\n        // cout << \"\\n\";\n        \n        // auto ans = getMC(gmvs, target, target.size());\n        return (ans == INT_MAX) ? -1 : ans;\n    }\n};",
    "submit_ts": "1720324659",
    "subm_id": "1312404930"
}