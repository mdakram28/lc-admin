{
    "username": "ddiibboo",
    "submission": "class Solution {\n    \n    int[][] mat;\n    int[][][][][] dp;\n    \n    public int minimumSum(int[][] grid) {\n        mat = grid;\n        int m = grid.length;\n        int n = grid[0].length;\n        dp = new int[m][n][m][n][3];\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                for (int k = 0; k < m; ++k) {\n                    for (int l = 0; l < n; ++l) {\n                        Arrays.fill(dp[i][j][k][l], -1);\n                    }\n                }\n            }\n        }\n        return dfs(0, 0, m - 1, n - 1, 3);\n    }\n    \n    private int dfs(int x1, int y1, int x2, int y2, int cnt) {\n        \n        if (dp[x1][y1][x2][y2][cnt - 1] != -1) {\n            return dp[x1][y1][x2][y2][cnt - 1];\n        }\n        \n        if (cnt == 1) {\n            int minX = Integer.MAX_VALUE, minY = Integer.MAX_VALUE, maxX = -1, maxY = -1;\n            for (int i = x1; i <= x2; ++i) {\n                for (int j = y1; j <= y2; ++j) {\n                    if (mat[i][j] == 1) {\n                        minX = Math.min(minX, i);\n                        maxX = Math.max(maxX, i);\n                        minY = Math.min(minY, j);\n                        maxY = Math.max(maxY, j);\n                    }\n                }\n            }\n            if (maxX == -1) dp[x1][y1][x2][y2][cnt - 1] = 0;\n            else dp[x1][y1][x2][y2][cnt - 1] = (maxX - minX + 1) * (maxY - minY + 1);\n        } else {\n            // Row\n            dp[x1][y1][x2][y2][cnt - 1] = (x2 - x1 + 1) * (y2 - y1 + 1);\n            for (int i = x1; i < x2; ++i) {\n                for (int j = 1; j <= cnt - 1; ++j) {\n                    int u = dfs(x1, y1, i, y2, j);\n                    int v = dfs(i + 1, y1, x2, y2, cnt - j);\n                    dp[x1][y1][x2][y2][cnt - 1] = Math.min(dp[x1][y1][x2][y2][cnt - 1], u + v);\n                }\n            }\n\n            // Column\n            for (int i = y1; i < y2; ++i) {\n                for (int j = 1; j <= cnt - 1; ++j) {\n                    int u = dfs(x1, y1, x2, i, j);\n                    int v = dfs(x1, i + 1, x2, y2, cnt - j);\n                    dp[x1][y1][x2][y2][cnt - 1] = Math.min(dp[x1][y1][x2][y2][cnt - 1], u + v);\n                }\n            }\n        }\n        // System.out.println(String.format(\"dp[%d][%d][%d][%d][%d] = %d\", x1, y1, x2, y2, cnt, dp[x1][y1][x2][y2][cnt - 1]));\n        return dp[x1][y1][x2][y2][cnt - 1];\n    }\n}",
    "submit_ts": 1719113687.0
}