{
    "username": "Ojaswa Sharma",
    "submission": "sys.set_int_max_str_digits(100000)\nclass Solution:\n    def div2(self, n):\n        base = [\"9\"] * n\n        base[0] = base[-1] = \"8\"\n        return base\n\n    def div3(self, n):\n        return [\"9\"] * n\n\n    def div4(self, n):\n        if n < 2:\n            return [\"8\"]\n        base = [\"9\"] * n\n        base[0] = base[1] = \"8\"\n        base[-1] = base[-2] = \"8\"\n        return base\n\n    def div5(self, n):\n        base = [\"9\"] * n\n        base[0] = base[-1] = \"5\"\n        return base\n\n    def div6(self, n):\n        if n <= 2:\n            return [\"6\"] * n\n        if n==4:\n            return [\"8\",\"7\",\"7\",\"8\"]\n        base = [\"9\"] * n\n        base[0] = base[-1] = \"8\" \n        if n%2==1:\n            base[n//2]=\"8\"\n        else:\n            base[n//2-1]=base[n//2]=\"7\"\n        return base\n\n        \n    def div7(self, n):\n        if n < 1:\n            return \"\"\n        \n        base = [\"9\"] * n\n        \n        def mod7(num_list):\n            num = int(\"\".join(num_list))\n            return num % 7\n        \n        remainder = mod7(base)\n        if remainder == 0:\n            return base\n        \n        half_n = n // 2\n        if n % 2 == 1: \n            middle_index = half_n\n            for i in range(10):\n                base[middle_index] = str((9 - i) % 10)\n                if mod7(base) == 0:\n                    return base\n        \n        else: \n            left_index = half_n - 1\n            right_index = half_n\n            for i in range(10):\n                base[left_index] = base[right_index] = str((9 - i) % 10)\n                if mod7(base) == 0:\n                    return base\n        return base\n\n    def div8(self, n):\n        if n < 3:\n            return [\"8\"] * n\n        base = [\"9\"] * n\n        base[0] = base[1] = base[2] = \"8\"\n        base[-1] = base[-2] = base[-3] = \"8\"\n        return base\n\n    def div9(self, n):\n        return [\"9\"] * n\n\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1:\n            return \"\".join(self.div3(n))\n        if k == 2:\n            return \"\".join(self.div2(n))\n        if k == 3:\n            return \"\".join(self.div3(n))\n        if k == 4:\n            return \"\".join(self.div4(n))\n        if k == 5:\n            return \"\".join(self.div5(n))\n        if k == 6:\n            return \"\".join(self.div6(n))\n        if k == 7:\n            return \"\".join(self.div7(n))\n        if k == 8:\n            return \"\".join(self.div8(n))\n        return \"\".join(self.div9(n))\n",
    "submit_ts": "1723952891",
    "subm_id": "1359807190"
}