{
    "username": "Chakshu Verma",
    "submission": "int powers[100001][10];\nbool f = false;\n\nvoid once(){\n    for(int j=1; j<10; j++){\n        powers[0][j] = ((j == 1) ? 0 : 1);\n        for(int i=1; i<100001; i++){\n            powers[i][j] = (powers[i - 1][j] * 10) % j;\n        }\n    }\n}\n\nclass Solution {\n    int N;\n    int n;\n    int k;\npublic:\n\n    pair<int, int> rec(int i, int j, vector<vector<pair<int, int>>> &dp){\n        if(i == N){\n            return dp[i][j];\n        }\n\n        if(dp[i][j] != make_pair(-1, -1))  return dp[i][j];\n\n        dp[i][j] = {-2, -2};\n\n        for(int d=9; d>=(i ? 0 : 1); d--){\n            int x = n - i - 1, y = i;\n            int newJ = (j + ((powers[x][k] * d) % k)) % k;\n            if(x != y){\n                newJ = (newJ + ((powers[y][k] * d) % k)) % k;\n            }\n            // int newJ = (((powers[x][k] * d) % k) + ((powers[y][k] * d) % k) + j) % k;\n            // cout << i << \" \" << j << \" \" << d << \"\\n\";\n            pair<int, int> p = rec(i + 1, newJ, dp);\n            if(p.first != -2){\n                dp[i][j] = {d, newJ};\n                break;\n            }\n        }\n\n        return dp[i][j];\n    }\n\n    string largestPalindrome(int n, int k) {\n        this->n = n;\n        this->k = k;\n        if(!f){\n            f = true;\n            once();\n        }\n\n        N = (n + 1) / 2;\n\n        vector<vector<pair<int, int>>> dp(N + 2, vector<pair<int, int>>(k, {-1, -1}));\n        for(int j=1; j<k; j++)  dp[N][j] = {-2, -1};\n        dp[N][0] = {0, -1};\n\n        pair<int, int> p = rec(0, 0, dp);\n        string ans = \"\";\n\n        for(int i=0; i<N; i++){\n            ans += char(p.first + '0');\n            p = dp[i + 1][p.second];\n        }\n        string t = ans;\n        if(n&1){\n            t.pop_back();\n        }\n        reverse(t.begin(), t.end());\n        ans += t;\n        return ans;\n    }\n};",
    "submit_ts": "1723951197",
    "subm_id": "1359765644"
}