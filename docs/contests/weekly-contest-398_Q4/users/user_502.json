{
    "username": "madhav_23",
    "submission": "const long long N = 35;\nconst long long M = 1e9 + 7;\nconst int MOD = 1e9 + 7;\nlong long int inv[N], fac_inv[N], fac[N];\n\nvoid initialize()\n{\n    int i;\n    inv[1] = 1;\n    for (i = 2; i <= N - 2; i++)\n    {\n        inv[i] = (MOD - MOD / i) * inv[MOD % i] % MOD;\n    }\n    fac[0] = fac[1] = 1;\n    for (i = 2; i <= N - 2; i++)\n    {\n        fac[i] = i * fac[i - 1] % MOD;\n    }\n    fac_inv[0] = fac_inv[1] = 1;\n    for (i = 2; i <= N - 2; i++)\n    {\n        fac_inv[i] = inv[i] * fac_inv[i - 1] % MOD;\n    }\n}\nint ncr(int n, int r)\n{\n    if (n < r)\n    {\n        return 0;\n    }\n    return (fac[n] * fac_inv[r] % MOD) * fac_inv[n - r] % MOD;\n}\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        initialize();\n        if(k==0) return 2;\n        if(k<=2) return 4;\n        if(k==4) return 2;\n        int pr=0, x=1;\n        while(x<k){\n            x*=2; pr++;\n        }\n        if(k<x-pr-1) return 0;\n        if(k==x-pr-1) return 1; \n        if(k==pr) return 1; \n        int d=k-(x-pr-1); \n        int ans=ncr(pr, d)+ncr(pr, d-1); \n        return ans;\n    }\n};",
    "submit_ts": "1716089058",
    "subm_id": "1261831832"
}