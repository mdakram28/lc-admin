{
    "username": "masteralphi",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        big = 10**9+7\n        mx = 0\n        for en, cn in requirements:\n            mx = max(mx, cn+1)\n            if cn > (en+1) * en // 2:\n                return 0\n        requirements.sort()\n        m = len(requirements)\n        for i in range(1, m):\n            if requirements[i-1][1] > requirements[i][1]:\n                return 0\n        # dp[i][j][k] - number of permutations of size 0,...i having j inversions such that the last element is k\n        # aligned with all constraints\n        cur_id = 0\n        dp = [0] * mx\n        dp[0] = 1\n        for i in range(n):\n            u = [0] * mx\n            if requirements[cur_id][0] == i:\n                for k in range(min(requirements[cur_id][1], i)+1):\n                    u[requirements[cur_id][1]] += dp[requirements[cur_id][1]-k]                    \n                cur_id += 1\n            else:\n                for j in range(mx):\n                    for k in range(min(j, i)+1):\n                        u[j] += dp[j-k]\n                        u[j] %= big\n            dp = [el % big for el in u]\n        return sum(dp) % big",
    "submit_ts": 1719068827.0
}