{
    "username": "aabhas_gupta",
    "submission": "class Solution {\npublic:\n    struct TrieNode{\n        vector<pair<int, int>> words;\n        unordered_map<char, TrieNode*> children;\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        int w = words.size();\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0;\n        TrieNode* root = new TrieNode();\n        for (int i=0;i<w;i++) {\n            TrieNode* node = root;\n            for (char ch:words[i]) {\n                if (node->children.find(ch) == node->children.end()) {\n                    node->children[ch] = new TrieNode();\n                }\n                node = node->children[ch];\n            }\n            node->words.push_back({words[i].length(),costs[i]});\n        }\n\n        for (int i=0;i<n;i++) {\n            if (dp[i] != INT_MAX){\n                TrieNode* node = root;\n                for (int j=i;j<n;j++) {\n                    if (node->children.find(target[j]) == node->children.end()) \n                        break;\n                    node = node->children[target[j]];\n                    for (auto word : node->words) {\n                        int len = word.first;\n                        int cost = word.second;\n                        if (len+i<=n) {\n                            dp[len+i] = min(dp[len+i], dp[i]+cost);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[n] != INT_MAX ? dp[n] : -1;\n    }\n};",
    "submit_ts": "1720322361",
    "subm_id": "1312347849"
}