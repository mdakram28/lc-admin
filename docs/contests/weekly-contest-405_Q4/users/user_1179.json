{
    "username": "navkar98",
    "submission": "from collections import defaultdict, deque\n\nclass TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.cost = None\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        def build_trie(words, costs):\n            root = TrieNode()\n            for word, cost in zip(words, costs):\n                node = root\n                for char in word:\n                    node = node.children[char]\n                \n                if node.cost:\n                    node.cost = min(node.cost, cost)\n                else:    \n                    node.cost = cost\n            return root\n\n        n = len(target)\n    \n        trie = build_trie(words, costs)\n        \n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = trie\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost is not None:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n\n        # print(dp)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720323019",
    "subm_id": "1312365220"
}