{
    "username": "aditya1a2yadav",
    "submission": "const int MOD = 1e9 + 7;\nconst int MAX_INVERSIONS = 400;\n\nint n;\nvector<vector<int>> requirements;\nint totalCount = 0;\n\n// Function to count inversions in the prefix [0..endi] of the permutation\nint countInversions(const vector<int>& perm, int end) {\n    int inversions = 0;\n    for (int i = 0; i <= end; ++i) {\n        for (int j = i + 1; j <= end; ++j) {\n            if (perm[i] > perm[j]) {\n                inversions++;\n            }\n        }\n    }\n    return inversions;\n}\n\n// Function to check if the current permutation satisfies all the requirements\nbool isValid(const vector<int>& perm) {\n    for (const auto& req : requirements) {\n        int end = req[0];\n        int cnt = req[1];\n        if (countInversions(perm, end) != cnt) {\n            return false;\n        }\n    }\n    return true;\n}\n\n// Backtracking function to generate permutations and count valid ones\nvoid backtrack(vector<int>& perm, vector<bool>& used, int depth) {\n    if (depth == n) {\n        if (isValid(perm)) {\n            totalCount = (totalCount + 1) % MOD;\n        }\n        return;\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (!used[i]) {\n            perm[depth] = i;\n            used[i] = true;\n            backtrack(perm, used, depth + 1);\n            used[i] = false;\n        }\n    }\n}\nclass Solution {\n    public:\n    \npublic:\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n    for (const auto& req : requirements) {\n        reqMap[req[0] + 1] = req[1];\n    }\n\n    vector<vector<long>> permCounts(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n    permCounts[0][0] = 1;\n\n    for (int length = 1; length <= n; length++) {\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            for (int newPos = 0; newPos < length; newPos++) {\n                int prevInv = inv - newPos;\n                if (prevInv >= 0) {\n                    permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                }\n            }\n        }\n\n        if (reqMap.find(length) != reqMap.end()) {\n            int targetInv = reqMap[length];\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                if (inv != targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n    }\n\n    long result = 0;\n    for (long count : permCounts[n]) {\n        result = (result + count) % MOD;\n    }\n\n    return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719070374.0
}