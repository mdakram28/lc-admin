{
    "username": "LGM70",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minimumDifference(int[] nums, int k) {\n        SegmentTree tree = new SegmentTree(nums, 0, nums.length);\n        int ans = Integer.MAX_VALUE / 2;\n        for (int i = 0; i < nums.length; i++) {\n            int lt = 1, rt = nums.length - i + 1;\n            int minDiff = Math.abs(nums[i] - k);\n            while (lt < rt) {\n                int mid = (lt + rt) / 2;\n                int tmp = tree.calc(i, i + mid);\n                minDiff = Math.min(minDiff, Math.abs(tmp - k));\n                if (tmp == k) {\n                    return 0;\n                }\n                else if (tmp < k) {\n                    rt = mid;\n                }\n                else {\n                    lt = mid + 1;\n                }\n            }\n            ans = Math.min(ans, minDiff);\n        }\n        return ans;\n    }\n\n    class SegmentTree {\n        int lt, rt;\n        int res;\n        SegmentTree left, right;\n\n        SegmentTree(int[] nums, int lt, int rt) {\n            this.lt = lt;\n            this.rt = rt;\n            if (lt == rt - 1) {\n                res = nums[lt];\n            }\n            else {\n                int mid = (lt + rt) / 2;\n                left = new SegmentTree(nums, lt, mid);\n                right = new SegmentTree(nums, mid, rt);\n                res = left.res & right.res;\n            }\n        }\n\n        int calc(int l, int r) {\n            int mid = (lt + rt) / 2;\n            if (l == lt && r == rt) {\n                return res;\n            }\n            else if (l >= mid) {\n                return right.calc(l, r);\n            }\n            else if (r <= mid) {\n                return left.calc(l, r);\n            }\n            else {\n                return left.calc(l, mid) & right.calc(mid, r);\n            }\n        }\n    }\n}",
    "submit_ts": "1717298272",
    "subm_id": "1274773148"
}