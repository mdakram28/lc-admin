{
    "username": "Z3ROsum",
    "submission": "fun e(t: IntArray): Long {\n    var operations = 0L\n    var d = 0L\n    \n    for (i in t.indices) {\n        val f = t[i].toLong()\n        if (f > d) operations += f - d\n        d = f\n    }\n    \n    return operations\n}\nfun divs(i: Int): Int {\n    if (i> 0) return 1\n    if (i < 0) return -1\n    return 0\n}\nclass Solution {\n    fun minimumOperations(nums: IntArray, target: IntArray): Long {\n        var two = target.indices.map { target[it] - nums[it] }\n        var etc = mutableListOf<MutableList<Int>>() ;var sdf = mutableListOf<Int>() ;var dkc = mutableListOf<MutableList<Int>>()\n        var third = divs(two[0])\n        for (diff in two) {\n            var diffSign = divs(diff)\n            if (diffSign == third) sdf.add(diff)\n            else {\n                if (third == 1)etc.add(sdf) else dkc.add(sdf)\n                sdf = mutableListOf(diff)\n                third = diffSign\n            }\n        }\n        if (sdf.isNotEmpty()) {\n            if (third == 1) etc.add(sdf)else dkc.add(sdf)\n        }\n        var total = 0L\n        for (i in etc) {\n            var sdf = e(i.toIntArray())\n            total += sdf\n        }\n        for (i in dkc) {\n            var eddd = e(i.map { -it }.toIntArray())\n            total += eddd\n        }\n        return total\n    }\n}",
    "submit_ts": "1721532046",
    "subm_id": "1327976278"
}