{
    "username": "junruiw",
    "submission": "class Solution {\n    int doFind(vector<int>& parents, int n) {\n        int p = parents[n];\n        while (p != parents[p]) {\n            parents[p] = parents[parents[p]];\n            p = parents[p];\n        }\n        return p;\n    }\n    \n    int doUnion(vector<int>& parents, vector<int>& ranks, int n1, int n2) {\n        int p1 = doFind(parents, n1);\n        int p2 = doFind(parents, n2);\n        if (p1 == p2) {\n            return 0;\n        }\n        \n        if (ranks[p1] > ranks[p2]) {\n            parents[p2] = p1;\n            ranks[p1] += ranks[p2];\n        } else {\n            parents[p1] = p2;\n            ranks[p2] += ranks[p1];\n        }\n        \n        return 1;\n    }\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<int> parents(circles.size());\n        vector<int> ranks(circles.size(), 1);\n        for (int i = 0; i < circles.size(); i++)\n            parents[i] = i;\n        \n        for (int i = 0; i < circles.size(); i++) {\n            if ((long long)(circles[i][0] - 0) * (circles[i][0] - 0) + (long long)(circles[i][1] - 0) * (circles[i][1] - 0) <= (long long)circles[i][2] * circles[i][2] ||\n                (long long)(circles[i][0] - X) * (circles[i][0] - X) + (long long)(circles[i][1] - Y) * (circles[i][1] - Y) <= (long long)circles[i][2] * circles[i][2]) {\n                return false;\n            }\n            for (int j = i + 1; j < circles.size(); j++) {\n                int x1 = circles[i][0];\n                int y1 = circles[i][1];\n                int r1 = circles[i][2];\n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                int r2 = circles[j][2];\n                if ((long long)(x1 - x2) * (x1 - x2) + (long long)(y1 - y2) * (y1 - y2) <= (long long)(r1 + r2) * (r1 + r2)) {\n                    doUnion(parents, ranks, i, j);\n                }\n            }\n        }\n\n        vector<vector<int>> boundaries(circles.size(), vector<int>(4, -1));\n        for (int i = 0; i < circles.size(); i++) {\n            int p = doFind(parents, i);\n            if (boundaries[p][0] == -1 || circles[i][0] - circles[i][2] < boundaries[p][0]) {\n                boundaries[p][0] = circles[i][0] - circles[i][2];\n            }\n            if (boundaries[p][1] == -1 || circles[i][0] + circles[i][2] > boundaries[p][1]) {\n                boundaries[p][1] = circles[i][0] + circles[i][2];\n            }\n            if (boundaries[p][2] == -1 || circles[i][1] - circles[i][2] < boundaries[p][2]) {\n                boundaries[p][2] = circles[i][1] - circles[i][2];\n            }\n            if (boundaries[p][3] == -1 || circles[i][1] + circles[i][2] > boundaries[p][3]) {\n                boundaries[p][3] = circles[i][1] + circles[i][2];\n            }\n        }\n\n        for (int i = 0; i < circles.size(); i++) {\n            int p = doFind(parents, i);\n            if (boundaries[p][0] <= 0 && boundaries[p][1] >= X || boundaries[p][2] <= 0 && boundaries[p][3] >= Y || boundaries[p][0] <= 0 && boundaries[p][2] <= 0 || boundaries[p][1] >= X && boundaries[p][3] >= Y) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722137161",
    "subm_id": "1335755892"
}