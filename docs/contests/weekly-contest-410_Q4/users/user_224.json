{
    "username": "mnaoumov",
    "submission": "public class Solution\n{\n    public int CountOfPairs(int[] nums)\n    {\n        var n = nums.Length;\n        var sum = nums[^1];\n\n        for (var i = 1; i < n; i++)\n        {\n            var diff = Math.Max(0, nums[i] - nums[i - 1]);\n            sum -= diff;\n\n            if (sum < 0)\n            {\n                return 0;\n            }\n        }\n\n        var factorialDp =\n            new DynamicProgramming<int, ModNumber>((a, recursiveFunc) => a == 0 ? 1 : a * recursiveFunc(a - 1));\n        var inverseDp = new DynamicProgramming<int, ModNumber>((a, _) =>\n        {\n            if (a == 1)\n            {\n                return 1;\n            }\n\n            return ((ModNumber) a).Inverse();\n        });\n        var inverseFactorialDp =\n            new DynamicProgramming<int, ModNumber>((a, recursiveFunc) =>\n                a == 0 ? 1 : Inverse(a) * recursiveFunc(a - 1));\n\n        return Choose(sum + n, n);\n\n        ModNumber Choose(int a, int b) => Factorial(a) * InverseFactorial(b) * InverseFactorial(a - b);\n        ModNumber Factorial(int a) => factorialDp.GetOrCalculate(a);\n        ModNumber InverseFactorial(int a) => inverseFactorialDp.GetOrCalculate(a);\n        ModNumber Inverse(int a) => inverseDp.GetOrCalculate(a);\n    }\n\n    private class ModNumber\n    {\n        private const int Modulo = 1_000_000_007;\n        private readonly int _value;\n\n        private ModNumber(long value) => _value = value >= 0 ? Mod(value) : Mod(Mod(value) + Modulo);\n\n        private static int Mod(long value) => (int) (value % Modulo);\n\n        public static implicit operator ModNumber(int value) => new(value);\n        public static implicit operator int(ModNumber modNumber) => modNumber._value;\n\n        public static ModNumber operator +(ModNumber modNumber1, ModNumber modNumber2) =>\n            new(modNumber1._value + modNumber2._value);\n\n        public static ModNumber operator -(ModNumber modNumber1, ModNumber modNumber2) =>\n            new(modNumber1._value - modNumber2._value);\n\n        public static ModNumber operator *(ModNumber modNumber1, ModNumber modNumber2) =>\n            new(1L * modNumber1._value * modNumber2._value);\n\n        public ModNumber Inverse() => (int) BigInteger.ModPow(_value, Modulo - 2, Modulo);\n\n        public override string ToString() => _value.ToString();\n    }\n\n    private class DynamicProgramming<TKey, TValue> where TKey : notnull\n    {\n        private readonly Func<TKey, Func<TKey, TValue>, TValue> _func;\n        private readonly Dictionary<TKey, TValue> _cache = new();\n\n        public DynamicProgramming(Func<TKey, Func<TKey, TValue>, TValue> func)\n        {\n            _func = func;\n        }\n\n        public TValue GetOrCalculate(TKey key)\n        {\n            if (!_cache.TryGetValue(key, out var value))\n            {\n                _cache[key] = value = _func(key, GetOrCalculate);\n            }\n\n            return value;\n        }\n    }\n}\n",
    "submit_ts": "1723346388",
    "subm_id": "1351576504"
}