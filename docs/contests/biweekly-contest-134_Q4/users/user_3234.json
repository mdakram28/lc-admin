{
    "username": "satyam_9911",
    "submission": "class Solution {\npublic: \n    \n    #define ll long long \n    \n    bool solve(int curAnd , set<int> &set){\n          \n        for(auto k : set){\n            if (curAnd & (1 << k))continue; \n            return false; \n        } \n        \n        return true; \n    }\n    \n    \n    ll countSubarraysWithBitwiseAnd(std::vector<int>& nums, int k) {\n    \n        ll count = 0;\n        int n = nums.size(); \n        int start = 0 , end = 0; \n        vector<int> bits(64 , 0); \n        \n        for(int idx = 0 ; k > 0 ; idx++){\n            bits[idx] = k%2; \n            k/=2; \n        }  \n        \n        set<int> set; \n        for(int i = 0; i < 64 ; i++){\n            if(bits[i])set.insert(i); \n        }\n         \n        int curAnd = nums[0];  \n        vector<int> v; \n        for(int start = 0 ; start < n ; start++){\n             bool ok = solve(nums[start] , set);  \n             if(ok)v.push_back(1); \n             else v.push_back(0); \n            \n        } \n        \n        return count; \n    }\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n         \n        \n        int n = nums.size(); \n        ll ans = 0; \n        \n        unordered_map<ll,ll> map1; \n        \n        for(int i = 0 ; i < n ; i++){\n              \n            \n             unordered_map<ll,ll> map2;  \n            \n             if(nums[i]==k)\n             ans++;  \n        \n             map2[nums[i]]++; \n            \n             for(auto it : map1){ \n                  ll val = it.first; \n                  ll freq = it.second; \n                 \n                  ll curAnd = val & nums[i];  \n                 \n                  if(curAnd == k){\n                      ans+=freq; \n                  } \n                 \n                  map2[curAnd]+=freq; \n             } \n            \n             map1 = map2; \n        } \n        \n        return ans; \n        \n    }\n};",
    "submit_ts": "1720281213",
    "subm_id": "1311817092"
}