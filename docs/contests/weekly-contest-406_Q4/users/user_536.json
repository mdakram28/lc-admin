{
    "username": "pranati543",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, char>> cuts;\n        for (int cost : horizontalCut) {\n            cuts.push({cost, 'h'});\n        }\n        for (int cost : verticalCut) {\n            cuts.push({cost, 'v'});\n        }\n        \n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n        while (!cuts.empty()) {\n            auto [cost, type] = cuts.top();\n            cuts.pop();\n            \n            if (type == 'h') {\n                totalCost += static_cast<long long>(cost) * verticalPieces;\n                ++horizontalPieces;\n            } else {\n                totalCost += static_cast<long long>(cost) * horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925276",
    "subm_id": "1320249181"
}