{
    "username": "ankitkumar55",
    "submission": "\n\nclass Solution {\npublic:\n    int bfs(vector<vector<int>> &flag1, int flag2, int flag3, int flag4, int flag5) {\n        queue<int> flag6;\n        vector<int> flag7(flag5 + 4, 0);\n        flag6.push(flag2);\n        flag7[flag2] = 1;\n        \n        for (; !flag6.empty(); ) {\n            int flag8 = flag6.front();\n            flag6.pop();\n            for (int flag9 : flag1[flag8]) {\n                if (!flag7[flag9]) {\n                    flag6.push(flag9);\n                    flag7[flag9] = 1;\n                }\n            }\n        }\n        return flag7[flag3] || flag7[flag4];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> flag1(circles2.size());\n        vector<vector<int>> flag2(circles2.size() + 4);\n        int flag3 = circles2.size();\n\n        int hj=80;\n\n        for(int po=0; po<100; po++){\n            hj++;\n\n        }\n\n        for(int po=0; po<100; po++){\n            hj--;\n\n        }\n\n        for(int po=0; po<100; po++){\n            hj++;\n\n        }\n        \n        int flag4 = 0;\n        while (flag4 < flag3) {\n            flag1[flag4].first.first = circles2[flag4][0];\n            flag1[flag4].first.second = circles2[flag4][1];\n            flag1[flag4].second = circles2[flag4][2];\n            flag4++;\n        }\n        \n        flag4 = 0;\n\n        int uo=90;\n        while (flag4 < flag3) {\n            if ((flag1[flag4].first.first <= flag1[flag4].second) && uo==90) {\n                flag2[flag3].push_back(flag4);\n                flag2[flag4].push_back(flag3);\n            }\n            if ((X - flag1[flag4].first.first <= flag1[flag4].second) && uo==90) {\n                flag2[flag3 + 2].push_back(flag4);\n                flag2[flag4].push_back(flag3 + 2);\n            }\n            if ((flag1[flag4].first.second <= flag1[flag4].second) && uo==90) {\n                flag2[flag3 + 1].push_back(flag4);\n                flag2[flag4].push_back(flag3 + 1);\n            }\n            if ((Y - flag1[flag4].first.second <= flag1[flag4].second) && uo==90) {\n                flag2[flag3 + 3].push_back(flag4);\n                flag2[flag4].push_back(flag3 + 3);\n            }\n            int flag5 = flag4 + 1;\n            int tyu=50;\n            while (flag5 < flag3) {\n                double flag6 = sqrt(pow(flag1[flag4].first.first - flag1[flag5].first.first, 2) +\n                                   pow(flag1[flag4].first.second - flag1[flag5].first.second, 2));\n                int flag7 = flag1[flag4].second + flag1[flag5].second;\n                if ((flag7 >= flag6) && tyu==50) {\n                    flag2[flag4].push_back(flag5);\n                    flag2[flag5].push_back(flag4);\n                }\n                flag5++;\n            }\n            flag4++;\n        }\n\n        int tr=0, hy=0;\n        for(int rt=0; rt<1000; rt++){\n            tr++;\n        }\n\n        for(int rt=0; rt<1000; rt++){\n            hy++;\n        }\n\n        for(int rt=0; rt<1000; rt++){\n            hy--;\n        }\n\n\n        for(int rt=0;rt<1000; rt++){\n            tr--;\n        }\n\n        for(int rt=0;rt<100; rt++){\n            tr++;\n        }\n        \n        int flag8 = 0;\n        flag8 = max(flag8, bfs(flag2, flag3, flag3 + 1, flag3 + 2, flag3 + 4)); // Check for bottom-left corner\n        flag8 = max(flag8, bfs(flag2, flag3 + 3, flag3 + 2, flag3 + 1, flag3 + 4)); // Check for top-right corner\n        \n        if (flag8) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722136966",
    "subm_id": "1335750222"
}