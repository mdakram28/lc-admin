{
    "username": "Binary_Blaze",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        int res = 0;\n        // we have taken middle col also to count that also  \n        if (n % 2 == 1 && m % 2 == 1) {\n            if (grid[n / 2][m / 2] == 1) {\n                res += 1;\n            }\n        }\n\n        int[] flips = new int[3];\n        if (n % 2 == 1) {\n            int row = 0, col = m - 1;\n            while (row < col) {\n                int totalFlps = grid[n / 2][row] + grid[n / 2][col];\n                flips[totalFlps] += 1;\n                row += 1;\n                col -= 1;\n            }\n        }\n\n        // For col also flip the matrix\n        if (m % 2 == 1) {\n            int row = 0, col = n - 1;\n            while (row < col) {\n                int totalFlps = grid[row][m / 2] + grid[col][m / 2];\n                flips[totalFlps] += 1;\n                row += 1;\n                col -= 1;\n            }\n        }\n\n        if (flips[2] % 2 == 1) {\n            if (flips[1] > 0) {\n                res += flips[1];\n            } else {\n                res += 2;\n            }\n        } else {\n            res += flips[1];\n        }\n\n\n        // Handling the base conditions for the matrix\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int topLeft = grid[i][j];\n                int bottomLeft = grid[n - 1 - i][j];\n                int topRight = grid[i][m - 1 - j];\n                int bottomRight = grid[n - 1 - i][m - 1 - j];\n\n                int totalFlps = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (totalFlps != 0 && totalFlps != 4) {\n                    res += Math.min(totalFlps, 4 - totalFlps);\n                }\n            }\n        }\n\n        return res;\n    }\n}",
    "submit_ts": "1722699829",
    "subm_id": "1343223673"
}