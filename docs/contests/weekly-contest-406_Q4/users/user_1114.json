{
    "username": "yge2",
    "submission": "class Solution {\n    public class A implements Comparable<A> {\n        boolean h;\n        int c;\n        public A(int cc, boolean hh) {\n            c = cc;\n            h = hh;\n        }\n        public int compareTo(A a) {\n            return a.c - c;\n        }\n    }\n    public long minimumCost(int m, int n, int[] h, int[] v) {\n        PriorityQueue<A> pq = new PriorityQueue<>();\n        for (int i=0; i<m-1; i++)\n            pq.add(new A(h[i], true));\n        for (int i=0; i<n-1; i++)\n            pq.add(new A(v[i], false));\n        int hc = 1;\n        int vc = 1;\n        long ans = 0;\n        while (!pq.isEmpty()) {\n            A a = pq.poll();\n            if (a.h) {\n                ans += (long) (a.c * hc);\n                vc++;\n            } else {\n                ans += (long) (a.c * vc);\n                hc++;\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720925733",
    "subm_id": "1320264443"
}