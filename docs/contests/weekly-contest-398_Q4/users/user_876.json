{
    "username": "zeningc",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        int m = 31;\n        int[] power = new int[m];\n        power[0] = 1;\n        for (int i = 1; i < m; i++)\n            power[i] = power[i - 1] * 2;\n        List<int[]> list = new ArrayList<>();\n        int cur = 1;\n        int jump = 0;\n        while (cur - jump - 1 <= k) {\n            list.add(new int[] {cur, jump});\n            cur = cur + power[jump];\n            jump++;\n        }\n        long ans = 0;\n        for (int[] arr : list)  {\n            int pos = arr[0];\n            int j = arr[1];\n            if (pos < k)\n                continue;\n            if (pos == k)   {\n                ans++;\n                continue;\n            }\n            \n            int need = pos - k;\n            if (need > j + 1)\n                continue;\n            \n            ans += comb(j + 1, need);\n        }\n        \n        return (int)ans;\n    }\n    \n    long comb(int n, int k) {\n        if (k == 0 || k == n) {\n            return 1;\n        }\n        if (k > n) {\n            return 0;\n        }\n        k = Math.min(k, n - k); // Use the smaller k for efficiency\n        long c = 1;\n        for (int i = 0; i < k; i++) {\n            c = (long)c * (n - i) / (i + 1);\n        }\n        return c;\n    }\n}",
    "submit_ts": "1716089478",
    "subm_id": "1261843313"
}