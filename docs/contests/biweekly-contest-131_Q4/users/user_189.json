{
    "username": "biharicoder",
    "submission": "from sortedcontainers import SortedList\n\nclass SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        MX = min(5 * 10 ** 4, 3 * len(queries)) + 10\n        bst = SortedList([0, MX])\n        segtree = SegmentTree([0] * (MX + 1))\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                x = q[1]\n                pos = bst.bisect_left(x)\n                l = bst[pos - 1]\n                r = bst[pos]\n                segtree[r] = r - x\n                segtree[x] = x - l\n                bst.add(x)\n            if q[0] == 2:\n                x, sz = q[1], q[2]\n                pos = bst.bisect_left(x)\n                if bst[pos] > x:\n                    pos -= 1\n                l = bst[pos]\n                if x - l >= sz:\n                    res.append(True)\n                else:\n                    res.append(segtree.query(0, x + 1) >= sz)\n        return res",
    "submit_ts": "1716650388",
    "subm_id": "1267614215"
}