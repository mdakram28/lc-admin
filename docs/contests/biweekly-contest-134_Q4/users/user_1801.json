{
    "username": "ankur145",
    "submission": "class Solution {\nprivate:\n    long long countSubarraysEndingAtIndex(const vector<int>& nums, int k, int endIndex, unordered_map<long long, long long>& prevResults) {\n        long long count = 0;\n        long long num = nums[endIndex];\n        if (num == k) ++count;\n        for (auto& [val, freq] : prevResults) {\n            long long newAndResult = val & num;\n            if (newAndResult == k) count += freq;\n        }\n        return count;\n    }\n    void updatePrevResults(unordered_map<long long, long long>& prevResults, long long num) {\n        unordered_map<long long, long long> currResults;\n        for (auto& [val, freq] : prevResults) {\n            long long newAndResult = val & num;\n            currResults[newAndResult] += freq;\n        }\n        currResults[num]++;\n        prevResults = move(currResults); \n    }\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long count = 0;\n        unordered_map<long long, long long> prevResults;\n        for (int i = 0; i < n; ++i) {\n            count += countSubarraysEndingAtIndex(nums, k, i, prevResults);\n            updatePrevResults(prevResults, nums[i]);\n        }\n        return count;\n    }\n};\n",
    "submit_ts": "1720280889",
    "subm_id": "1311805645"
}