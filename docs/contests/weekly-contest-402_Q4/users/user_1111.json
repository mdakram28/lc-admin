{
    "username": "wadhwaaman1013",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass SegmentTree {\npublic:\n  int left_most, right_most;\n  SegmentTree *left_child, *right_child;\n  int res;\n\n  SegmentTree(int left, int right, vector<int> &v) {\n    left_most = left;\n    right_most = right;\n    if (left_most == right_most) {\n      res = v[left];\n      left_child = nullptr;\n      right_child = nullptr;\n    } else {\n      int mid = (left + right) / 2;\n      left_child = new SegmentTree(left_most, mid, v);\n      right_child = new SegmentTree(mid + 1, right_most, v);\n      recalc();\n    }\n  }\n\n  void recalc() {\n    if (left_most == right_most)\n      return;\n    res = left_child->res + right_child->res;\n  }\n\n  void point_update(int index, int new_val) {\n    if (left_most == right_most) {\n      res = new_val;\n      return;\n    }\n\n    if (index <= left_child->right_most)\n      left_child->point_update(index, new_val);\n    else\n      right_child->point_update(index, new_val);\n    recalc();\n  }\n\n  int range(int l, int r) {\n    if (l > right_most || r < left_most)\n      return 0;\n    if (l <= left_most && r >= right_most)\n      return res;\n    return left_child->range(l, r) + right_child->range(l, r);\n  }\n\n  ~SegmentTree() {\n    if (left_child != nullptr)\n      delete left_child;\n    if (right_child != nullptr)\n      delete right_child;\n  }\n};\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> new_vec;\n        for(int i = 0; i < nums.size(); i++) {\n            if (i == 0 || i == nums.size() - 1) {\n                new_vec.push_back(0);\n            }\n            else{\n                if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]){\n                    new_vec.push_back(1);\n                }\n                else{\n                    new_vec.push_back(0);\n                }\n            }\n        }\n        \n        SegmentTree s = SegmentTree(0, new_vec.size() - 1, new_vec);\n        \n        \n        vector<int> res;\n        for(auto row : queries) {\n            if (row[0] == 1)  {\n                if (row[1] == row[2]){\n                    res.push_back(0);}\n                else{\n                    res.push_back(s.range(row[1], row[2]) - (new_vec[row[1]] + new_vec[row[2]]));}\n            }\n            else{\n                nums[row[1]] = row[2];\n                \n                for(int i = row[1] - 1; i < row[1] + 2; i++){\n                    if (i <= 0 || i >= (nums.size() - 1)) {\n                        continue;\n                    }\n                    else{\n                        if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]){\n                            s.point_update(i, 1);\n                            new_vec[i] = 1;\n                            // new_vec.push_back(1);\n                        }\n                        else{\n                            s.point_update(i, 0);\n                            new_vec[i] = 0;\n                            // new_vec.push_back(0);\n                        }\n                    }\n                }\n            }\n        }\n            \n            return res;\n        \n    }\n};",
    "submit_ts": 1718508672.0
}