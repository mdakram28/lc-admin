{
    "username": "tourmaline",
    "submission": "from sortedcontainers import SortedList\nfrom collections import defaultdict\n\n\nclass Solution(object):\n    def minimumSum(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # one rectangle\n        def get_min_area1(points):\n            assert len(points) >= 1\n            i_min = float('inf')\n            i_max = float('-inf')\n            j_min = float('inf')\n            j_max = float('-inf')\n            for i, j in points:\n                i_min = min(i_min, i)\n                i_max = max(i_max, i)\n                j_min = min(j_min, j)\n                j_max = max(j_max, j)\n            return (i_max - i_min + 1) * (j_max - j_min + 1)    \n        \n        def transpose(points):\n            return [(j, i) for i, j in points]\n\n        def get_min_area2_sweep_i(points):\n            assert len(points) > 0\n            i_to_js = defaultdict(list)\n            for i, j in points:\n                i_to_js[i].append(j)\n            J1 = SortedList()\n            J2 = SortedList(j for _, j in points)\n            min_area = float('inf')\n            sorted_i = sorted(i_to_js.keys())    \n            # note if len(sorted_i) == 1, then we return float('inf')\n            for k in range(len(sorted_i) - 1):\n                i = sorted_i[k]\n                i2 = sorted_i[k+1]\n                for j in i_to_js[i]:\n                    J1.add(j)\n                    J2.remove(j)\n                area1 = (i - sorted_i[0] + 1) * (J1[-1] - J1[0] + 1)\n                area2 = (sorted_i[-1] - i2 + 1) * (J2[-1] - J2[0] + 1)\n                min_area = min(min_area, area1 + area2)\n            return min_area\n        \n        def get_min_area2(points):\n            return min(get_min_area2_sweep_i(points), get_min_area2_sweep_i(transpose(points)))\n        \n        def get_min_area3_sweep_i(points):\n            assert len(points) > 0\n            i_to_js = defaultdict(list)\n            for i, j in points:\n                i_to_js[i].append(j)\n            J1 = SortedList()\n            J2 = SortedList(j for _, j in points)\n            points1 = set()\n            points2 = set(points)\n            min_area = float('inf')\n            sorted_i = sorted(i_to_js.keys())    \n            # note if len(sorted_i) == 1, then we return float('inf')\n            for k in range(len(sorted_i) - 1):\n                i = sorted_i[k]\n                i2 = sorted_i[k+1]\n                for j in i_to_js[i]:\n                    J1.add(j)\n                    J2.remove(j)\n                    points1.add((i, j))\n                    points2.remove((i, j))\n                area1 = (i - sorted_i[0] + 1) * (J1[-1] - J1[0] + 1)\n                area2 = (sorted_i[-1] - i2 + 1) * (J2[-1] - J2[0] + 1)\n                min_area = min(min_area, area1 + get_min_area2(points2), get_min_area2(points1) + area2)\n            return min_area\n        \n        def get_min_area3(points):\n            return min(get_min_area3_sweep_i(points), get_min_area3_sweep_i(transpose(points)))\n        \n        m = len(grid)\n        n = len(grid[0])\n        points = {(i, j) for i in range(m) for j in range(n) if grid[i][j] == 1}\n        return get_min_area3(points)",
    "submit_ts": 1719113291.0
}