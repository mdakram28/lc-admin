{
    "username": "lihaicoder",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \n        def sqdist_to_point(*, x1, y1, x2, y2):\n            return (x1 - x2)**2 + (y1 - y2)**2\n        \n        def sqdist_to_right(*, x, y):\n            if x <= X:\n                d1 = y**2\n            else:\n                d1 = sqdist_to_point(x1 = x, y1 = y, x2 = X, y2 = 0)\n            if y <= Y:\n                d2 = (x - X)**2\n            else:\n                d2 = sqdist_to_point(x1 = x, y1 = y, x2 = X, y2 = Y)\n            return min(d1, d2)\n        \n        def sqdist_to_left(*, x, y):\n            if x <= X:\n                d1 = (y - Y)**2\n            else:\n                d1 = sqdist_to_point(x1 = x, y1 = y, x2 = X, y2 = Y)\n            if y <= Y:\n                d2 = x**2\n            else:\n                d2 = sqdist_to_point(x1 = x, y1 = y, x2 = 0, y2 = Y)\n            return min(d1, d2)\n        \n        tolist = [[] for _ in range(len(circles) + 5)]\n        for i, (x, y, r) in enumerate(circles):\n            if sqdist_to_point(x1 = x, y1 = y, x2 = 0, y2 = 0) <= r**2:\n                return False\n            if sqdist_to_point(x1 = x, y1 = y, x2 = X, y2 = Y) <= r**2:\n                return False\n            if sqdist_to_right(x = x, y = y) <= r**2:\n                tolist[-1].append(i)\n                tolist[i].append(-1)\n            if sqdist_to_left(x = x, y = y) <= r**2:\n                tolist[-2].append(i)\n                tolist[i].append(-2)\n\n        for i, (x1, y1, r1) in enumerate(circles):\n            for j in range(i+1, len(circles)):\n                x2, y2, r2 = circles[j]\n                if sqdist_to_point(x1 = x1, y1 = y1, x2 = x2, y2 = y2) <= (r1 + r2)**2:\n                    tolist[i].append(j)\n                    tolist[j].append(i)\n        \n        visited = [False]*(len(circles) + 5)\n        \n        def dfs(cur):\n            if cur == -2:\n                return True\n            visited[cur] = True\n            for to in tolist[cur]:\n                if not visited[to]:\n                    if dfs(to):\n                        return True\n            return False\n        \n        return not dfs(-1)\n                \n",
    "submit_ts": "1722136075",
    "subm_id": "1335722987"
}