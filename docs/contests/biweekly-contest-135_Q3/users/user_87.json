{
    "username": "lu-yu-chen",
    "submission": "#include <bits/stdc++.h>\n#include <unistd.h>\n\n#define all(a) a.begin(), a.end()\nusing namespace std;using llong = long long;\n#define to(container, a) [](auto &&A) { return container(all(A)); }(a)\ntemplate <typename... Args>llong pow(llong x, auto b, auto MOD) { if (b < 0) x = pow(x, MOD - 2, MOD), b = -b; if (not x) return x; llong res = 1; for (; b; (x *= x) %= MOD, b >>= 1) if (b & 1) (res *= x) %= MOD; return res;} //\ntemplate <typename T> T sum(auto &&a, T res) { for (auto x : a) res += x; return res;}//\ntemplate <typename T> llong sum(T &&a) { return sum(forward<T>(a), 0ll); }    //\ntemplate <typename T> T reversed(T a) { ranges::reverse(a); return a;} //\ntemplate <typename T> T uniqued(T a) { ranges::sort(a); a.resize(unique(begin(a), end(a)) - begin(a)); return a;} //\ntemplate <typename... Args>auto sorted(auto a, Args &&...args) { sort(begin(a), end(a), args...); return a;} //\ntemplate <typename T>vector<T> &operator+=(vector<T> &a, const vector<T> &b) { a.insert(end(a), begin(b), end(b)); return a;};template <typename T>vector<T> operator+(vector<T> a, const vector<T> &b) { return a += b; }; //\ntemplate <typename T>vector<T> &operator*=(vector<T> &a, int k) { if (k <= 0) a.clear(); else { assert(a.size() * k < INT_MAX); int N = a.size() * k; a.reserve(N); while (a.size() * 2 <= N) a += a; a.insert(end(a), begin(a), begin(a) + (N - a.size())); } return a;};template <typename T>vector<T> operator*(vector<T> a, int k) { return a *= k; }; //\nstruct range { struct Iterator { using iterator_category = std::random_access_iterator_tag; using value_type = int64_t; using difference_type = ptrdiff_t; using pointer = int64_t; using reference = int64_t &; int64_t val, d; Iterator(){}; Iterator(int64_t val, int64_t d) : val(val), d(d){}; value_type operator*() const { return val; } Iterator &operator++() { return val += d, *this; } difference_type operator-(const Iterator &other) const { return (val - other.val) / d; } bool operator==(const Iterator &other) const { return val == other.val; } }; Iterator Begin, End; range(int64_t n) : Begin(0, 1), End(max(n, int64_t{0}), 1){}; range(int64_t a, int64_t b, int64_t d = int64_t(1)) : Begin(a, d), End(b, d) { int64_t cnt = (b - a) / d + bool((b - a) % d); End.val = a + max(cnt, int64_t(0)) * d; }; Iterator begin() const { return Begin; } Iterator end() const { return End; }}; //\ntemplate <typename RET>auto make_vector(RET x) { return x; }template <typename T1, typename T2, typename... Args>auto make_vector(T1 m, T2 n, Args... arg) { return vector(m, make_vector(n, arg...)); }\n/* print */ template <typename Tuple, typename F, size_t... N> void TupleCall(Tuple &t, F &&f, std::index_sequence<N...>) { (f(get<N>(t)), ...); }template <typename... Args>std::ostream &operator<<(std::ostream &out, const std::tuple<Args...> &t) { TupleCall(t, [&](auto &&a) { out << a << ' '; }, make_index_sequence<sizeof...(Args)>{}); return out;}template <typename T1, typename T2>std::ostream &operator<<(std::ostream &out, const std::pair<T1, T2> &t) { return out << t.first << ' ' << t.second; }template <typename T>std::ostream &operator<<(std::ostream &out, const std::vector<T> &v) { for (size_t i = 0, n = v.size(); i < n; ++i) out << v[i] << ' '; return out;}template <typename T, typename... Args>void print(const T &t, const Args &...args) { cout << t; if constexpr (sizeof...(args)) { cout << ' '; print(args...); } else { cout << endl; }} //\nauto io = [](){return cin.tie(nullptr) -> sync_with_stdio(false);}();\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> temp(n / 2, 0), res(k + 2, 0);\n        for (int i = 0; i < n / 2; ++i) {\n            temp[i] = abs(nums[n - i - 1] - nums[i]);\n            int flag = max(max(k - nums[n - i - 1], nums[n - i - 1]), max(k - nums[i], nums[i]));\n            ++res[0];\n            --res[temp[i]];\n            ++res[temp[i] + 1];\n            ++res[flag + 1];\n        }\n        for (int i = 1; i < k + 2; ++i) {\n            res[i] += res[i - 1];\n        }\n        int ans = INT_MAX;\n        for (int x = 0; x <= k; ++x) {\n            ans = min(ans, res[x]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721486997",
    "subm_id": "548307924"
}