{
    "username": "kedarghadage",
    "submission": "struct Node {\n    Node* links[26];\n    bool flag = false;\n    int minCost = INT_MAX;\n\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    void setEnd(int cost) {\n        flag = true;\n        minCost = min(minCost, cost);\n    }\n\n    bool isEnd() {\n        return flag;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->containsKey(c)) {\n                node->put(c, new Node());\n            }\n            node = node->get(c);\n        }\n        node->setEnd(cost);\n    }\n\n    int getMinCost(string word) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->containsKey(c)) {\n                return -1;\n            }\n            node = node->get(c);\n        }\n        if (!node->isEnd()) {\n            return -1;\n        }\n        return node->minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int targetLen = target.length();\n        vector<int> dp(targetLen + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < targetLen; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* curr = trie.root;\n            for (int j = i; j < targetLen; ++j) {\n                char c = target[j];\n                if (!curr->containsKey(c)) break;\n                curr = curr->get(c);\n\n                if (curr->isEnd()) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr->minCost);\n                }\n            }\n        }\n\n        return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n    }\n};",
    "submit_ts": "1720322919",
    "subm_id": "1312362621"
}