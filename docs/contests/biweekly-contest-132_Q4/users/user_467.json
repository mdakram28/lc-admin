{
    "username": "rushiiisb",
    "submission": "class Solution {\npublic:\n    \n    int calculateMaxSubsequence(vector<int>& nums, int maxChanges)\n    {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(maxChanges + 1, 1)); \n        \n        int maxSubseqLength = 1;\n        \n        vector<int> maxChangesVec(maxChanges + 1, -1); \n        \n        vector<map<int, int>> maxChangesMap(maxChanges + 1); \n        \n        for(int i = 0; i < n; i++) \n        { \n            for(int j = 0; j <= maxChanges; j++) \n            { \n                for(int l = 0; l < j; l++) \n                { \n                    dp[i][j] = max(dp[i][j], 1 + maxChangesVec[l]); \n                } \n                \n                if(maxChangesMap[j].find(nums[i]) != maxChangesMap[j].end()) \n                { \n                    dp[i][j] = max(dp[i][j], 1 + maxChangesMap[j][nums[i]]); \n                    \n                } \n                \n                maxSubseqLength = max(maxSubseqLength, dp[i][j]); \n            } \n            \n            for(int j = 0; j <= maxChanges; j++)\n            { \n                maxChangesVec[j] = max(maxChangesVec[j], dp[i][j]); \n                \n                \n                maxChangesMap[j][nums[i]] = max(maxChangesMap[j][nums[i]], dp[i][j]); \n            } \n        } \n        return maxSubseqLength; \n    }\n\n    int maximumLength(vector<int>& nums, int maxChanges) {\n        \n        \n        int result = calculateMaxSubsequence(nums, maxChanges);\n        \n        return result;\n    }\n};\n",
    "submit_ts": "1717862340",
    "subm_id": "1281820117"
}