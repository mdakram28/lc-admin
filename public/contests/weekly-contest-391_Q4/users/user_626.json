{
    "username": "TheCleanser",
    "submission": "class Solution {\npublic:\n    int MaxDist(vector<pair<int, int> >& A, int N)\n    {\n        // Vectors to store maximum and\n        // minimum of all the four forms\n        vector<int> V(N), V1(N);\n        multiset<int> ms, ms1; \n        int ans = INT_MAX;\n\n        for (int i = 0; i < N; i++) {\n            V[i] = A[i].first + A[i].second;\n            V1[i] = A[i].first - A[i].second;\n            \n            ms.insert(V[i]); ms1.insert(V1[i]);\n        }\n        \n        for (int i = 0; i < N; i++) {\n            int x = A[i].first + A[i].second;\n            int y = A[i].first - A[i].second;\n            \n            ms.erase(ms.find(x));\n            ms1.erase(ms1.find(y));\n            \n            int d = max( (*ms1.rbegin() - *ms1.begin()) , ( *ms.rbegin() - *ms.begin()));\n            \n            ans = min(ans, d);\n            \n            ms.insert(V[i]); ms1.insert(V1[i]);\n        }\n\n        return ans;\n    }\n \n    \n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pair<int, int>> v;\n        for(auto it: points){\n            v.push_back(make_pair(it[0], it[1]));\n        }\n        int ans = MaxDist(v, v.size());\n        return ans;\n    }\n};"
}