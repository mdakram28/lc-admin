{
    "username": "Nithin_Ambati",
    "submission": "struct Node {\n    Node* links[26];\n    bool end = false;\n    int cost = INT_MAX;\n\n    bool containsKey(char ch) {\n        return links[ch - 'a'];\n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    void setEnd() {\n        end = true;\n    }\n\n    bool getEnd() {\n        return end;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string s, int cost) {\n        Node* node = root;\n        for (auto it : s) {\n            if (!node->containsKey(it)) {\n                node->put(it, new Node());\n            }\n            node = node->get(it);\n        }\n        node->setEnd();\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int solve(Trie& t1, vector<int>& dp, string& s, int i) {\n        if (i == s.size()) return 0;\n        if (dp[i] != INT_MAX) return dp[i];\n\n        int ans = INT_MAX;\n\n        Node* node = t1.root;\n        for (int j = i; j < s.size(); j++) {\n            if (!node->containsKey(s[j])) break;\n            node = node->get(s[j]);\n            if (node->getEnd()) {\n                int nextCost = solve(t1, dp, s, j + 1);\n                if (nextCost != INT_MAX) {\n                    ans = min(ans, node->cost + nextCost);\n                }\n            }\n        }\n        return dp[i] = ans;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t1;\n        for (int i = 0; i < words.size(); i++) {\n            t1.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(target.size(), INT_MAX);\n        int result = solve(t1, dp, target, 0);\n        return result == INT_MAX ? -1 : result;\n    }\n};\n\n",
    "submit_ts": "1720323991",
    "subm_id": "1312388993"
}