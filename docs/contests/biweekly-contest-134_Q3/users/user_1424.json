{
    "username": "vidy7014",
    "submission": "// class Solution {\n// public:\n//     int numberOfAlternatingGroups(vector<int>& colors, int k) {\n//         // Extend the colors vector\n//         colors.insert(colors.end(), colors.begin(), colors.begin() + k - 1);\n        \n//         int res = 0;\n//         int n = 1;\n        \n//         for (int i = 1; i < colors.size(); i++) { // Start from 1 to avoid out of bounds for colors[i-1]\n//             n = (colors[i] != colors[i - 1]) ? n + 1 : 1;\n//             if (n >= k) {\n//                 res++;\n//             }\n//         }\n        \n//         return res;\n//     }\n// };\n\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        // Extend the colors vector\n        extendColors(colors, k);\n        \n        return countAlternatingGroups(colors, k);\n    }\n\nprivate:\n    void extendColors(vector<int>& colors, int k) {\n        colors.insert(colors.end(), colors.begin(), colors.begin() + k - 1);\n    }\n    \n    int countAlternatingGroups(const vector<int>& colors, int k) {\n        int res = 0;\n        int n = 1;\n\n        for (int i = 1; i < colors.size(); i++) { // Start from 1 to avoid out of bounds for colors[i-1]\n            n = (colors[i] != colors[i - 1]) ? n + 1 : 1;\n            if (n >= k) {\n                res++;\n            }\n        }\n        \n        return res;\n    }\n};\n",
    "submit_ts": "1720279870",
    "subm_id": "1311768388"
}