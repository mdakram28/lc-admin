{
    "username": "T1N",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def max_mh_dis(points):\n            max_sum = points[0][0] + points[0][1]\n            min_sum = max_sum\n            max_diff = points[0][0] - points[0][1]\n            min_diff = max_diff\n            \n            occur_i_min1 = 0\n            occur_i_max1 = 0\n            occur_i_min2 = 0\n            occur_i_max2 = 0\n            for i in range(1, len(points)):\n                sum_now = points[i][0] + points[i][1]\n                diff = points[i][0] - points[i][1]\n                if sum_now < min_sum:\n                    min_sum = sum_now\n                    occur_i_min1 = i\n                elif sum_now > max_sum:\n                    max_sum = sum_now\n                    occur_i_max1 = i\n\n                if diff < min_diff:\n                    min_diff = diff\n                    occur_i_min2 = i\n                elif diff > max_diff:\n                    max_diff = diff\n                    occur_i_max2 = i\n\n            maximum = max(max_sum - min_sum, max_diff - min_diff)\n\n            return maximum, occur_i_min1, occur_i_max1, occur_i_min2, occur_i_max2\n        \n        res = max_mh_dis(points)\n        r1 = max_mh_dis(points[:res[1]] + points[res[1] + 1:])\n        r2 = max_mh_dis(points[:res[2]] + points[res[2] + 1:])\n        r3 = max_mh_dis(points[:res[3]] + points[res[3] + 1:])\n        r4 = max_mh_dis(points[:res[4]] + points[res[4] + 1:])\n        \n        return min(r1[0], r2[0], r3[0], r4[0])"
}