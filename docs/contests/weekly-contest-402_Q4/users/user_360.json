{
    "username": "Time-limit-exceed",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\npublic:\n    SegmentTree(int n) : n(n), tree(2 * n, 0) {}\n\n    void update(int index, bool val) {\n        index += n;\n        tree[index] = (int)(val);\n        while (index > 1) {\n            index >>= 1;\n            tree[index] = tree[index * 2] + tree[index * 2 + 1];\n        }\n    }\n\n    int query(int left, int right) {\n        left += n;\n        right += n;\n        int count = 0;\n        while (left <= right) {\n            if (left % 2 == 1) {\n                count += tree[left];\n                left++;\n            }\n            if (right % 2 == 0) {\n                count += tree[right];\n                right--;\n            }\n            left >>= 1;\n            right >>= 1;\n        }\n        return count;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree st(n);\n\n        // Build the segment tree\n        for (int i = 1; i < n - 1; i++) {\n            st.update(i, nums[i - 1] < nums[i] && nums[i] > nums[i + 1]);\n        }\n\n        // Process the queries\n        vector<int> answer;\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                answer.push_back(st.query(l + 1, r - 1));\n            } else {\n                int index = query[1], val = query[2];\n                int oldVal = nums[index];\n                nums[index] = val;\n                if (index > 0 && index < n - 1) {\n                    if (index - 1 > 0) {\n                        st.update(index - 1, nums[index - 2] < nums[index - 1] && nums[index - 1] > nums[index]);\n                    }\n                    st.update(index, nums[index - 1] < nums[index] && nums[index] > nums[index + 1]);\n                    if (index + 1 < n - 1) {\n                        st.update(index + 1, nums[index] < nums[index + 1] && nums[index + 1] > nums[index + 2]);\n                    }\n                } else if (index == 0) {\n                    if (n > 1) {\n                        st.update(1, nums[1] > nums[0] && nums[1] > nums[2]);\n                    }\n                } else {\n                    if (n > 2) {\n                        st.update(n - 2, nums[n - 2] > nums[n - 1] && nums[n - 2] > nums[n - 3]);\n                    }\n                }\n            }\n        }\n\n        return answer;\n    }\n};",
    "submit_ts": 1718507012.0
}