{
    "username": "twitch_tv_qiqi_impact",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        sl = SortedList()\n        n = len(colors)\n        l = []\n        for i in range(n):\n            l.append(int(colors[i] != colors[(i+1)%n]))\n        p = []\n        cts = {}\n        \n        def addseg(q):\n            sl.add(q)\n            t = q[1] - q[0] + 1\n            if t not in cts:\n                cts[t] = 0\n            cts[t] += 1\n            \n        def rmseg(q):\n            sl.remove(q)\n            t = q[1] - q[0] + 1\n            cts[t] -= 1\n            if cts[t] == 0:\n                del cts[t]\n        \n        \n        for i in range(n):\n            if l[i] and not p:\n                p.append(i)\n            if not l[i] and p:\n                p.append(i-1)\n                addseg(tuple(p))\n                p = []\n        if p:\n            p.append(n-1)\n            addseg(tuple(p))\n        \n        def fin(v):\n            if not 0 <= v < n:\n                return None\n            a = sl.bisect_left((v, v))\n            for x in [a, a-1]:\n                if 0 <= x < len(sl):\n                    g, h = sl[x]\n                    if g <= v <= h:\n                        return (g, h)\n            return None\n        \n        \n        \n        def flip(idx):\n            l[idx] = 1 - l[idx]\n            if l[idx] == 1:\n                a = fin(idx - 1)\n                c = fin(idx + 1)\n                if not a and not c:\n                    addseg((idx, idx))\n                elif a and c:\n                    rmseg(a)\n                    rmseg(c)\n                    addseg((a[0], c[1]))\n                elif a:\n                    rmseg(a)\n                    addseg((a[0], idx))\n                else:\n                    rmseg(c)\n                    addseg((idx, c[1]))\n            else:\n                a, b = fin(idx)\n                if a == b:\n                    rmseg((a, b))\n                elif a < idx < b:\n                    rmseg((a, b))\n                    addseg((a, idx-1))\n                    addseg((idx+1, b))\n                elif a == idx:\n                    rmseg((a, b))\n                    addseg((a+1, b))\n                else:\n                    rmseg((a, b))\n                    addseg((a, b-1))\n        \n        \n        ret = []\n        for q in queries:\n            if len(q) == 3:\n                _, x, y = q\n                if colors[x] != y:\n                    colors[x] = y\n                    flip(x)\n                    flip((x-1)%n)\n                    # print(cts)\n            else:\n                _, p = q\n                # print(q)\n                if len(sl) == 1 and sl[0] == (0, n-1):\n                    ret.append(n)\n                else:\n                    # print(cts)\n                    cur = 0\n                    for t in cts:\n                        if t >= p - 1:\n                            v = cts[t]\n                            cur += v * (t - p + 2)\n                    # print(cur, sl)\n                    if sl and sl[0][0] == 0 and sl[-1][1] == n-1:\n                        a = sl[0][1] - sl[0][0] + 1\n                        b = sl[-1][1] - sl[-1][0] + 1\n                        if a + b >= p - 1:\n                            # print(a, b, p)\n                            cur += a + b - p + 2\n                        if a >= p - 1:\n                            cur -= a - p + 2\n                        if b >= p - 1:\n                            cur -= b - p + 2\n                    ret.append(cur)\n        return ret\n                            \n                       \n                       ",
    "submit_ts": "1722743358",
    "subm_id": "1343790152"
}