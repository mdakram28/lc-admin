{
    "username": "CoderVinit28",
    "submission": "\n// Disjoint Set Union //\nclass DSU{\npublic:\n\tvector<int> parents;\n    vector<vector<int>> hori, verti;\n\tint components;\n\tDSU(int n, vector<vector<int>>& c){\n\t\tthis->parents = vector<int>(n, -1);\n\t\tthis->hori = vector<vector<int>>(n, vector<int>(2, -1));\n\t\tthis->verti = vector<vector<int>>(n, vector<int>(2, -1));\n        for(int i=0; i<c.size(); i++){\n            hori[i][0] = c[i][0]-c[i][2];\n            hori[i][1] = c[i][0]+c[i][2];\n            verti[i][0] = c[i][1]-c[i][2];\n            verti[i][1] = c[i][1]+c[i][2];\n        }\n\t\tthis->components = n;\n\t}\n\n\tint findParent(int node){\n\t\tif( parents[node] == -1 ){\n\t\t\treturn node;\n\t\t}\n\t\treturn parents[node] = findParent(parents[node]);\n\t}\n\n\tbool _union(int u, int v){\n\t\tif( isParentSame(u, v) ) return false;\n\t\tint pu = findParent(u);\n\t\tint pv = findParent(v);\n\t\tparents[pv] = pu;\n        hori[pu][0] = min(hori[pu][0], hori[pv][0]);\n        hori[pu][1] = max(hori[pu][1], hori[pv][1]);\n        verti[pu][0] = min(verti[pu][0], verti[pv][0]);\n        verti[pu][1] = max(verti[pu][1], verti[pv][1]);\n\t\tcomponents -= 1;\n\t\treturn true;\n\t}\n\n\tbool isParentSame(int u, int v){\n\t\tint pu = findParent(u);\n\t\tint pv = findParent(v);\n\t\treturn pu == pv;\n\t}\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int x1 = 0, y1 = 0, x2 = X, y2 = Y;\n\n        int n = circles.size();\n        DSU dsu(n, circles);\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if( isConnected(circles[i], circles[j]) ){\n                    dsu._union(i, j);\n                }\n            }\n        }\n\n        for(int i=0; i<n; i++){\n            int p = dsu.findParent(i);\n            int minx = dsu.hori[p][0];\n            int maxx = dsu.hori[p][1];\n            int miny = dsu.verti[p][0];\n            int maxy = dsu.verti[p][1];\n\n            if( (y2 >= miny && y2 <= maxy) && (x2 >= minx && x2 <= maxx) ){\n                return false;\n            }\n            if( minx <= x1 && maxx >= x2 ){\n                return false;\n            }\n            if( miny <= y1 && maxy >= y2 ){\n                return false;\n            }\n\n            if( (y1 >= miny && y1 <= maxy) && (x1 >= minx && x1 <= maxx) ){\n                return false;\n            }\n            // if( minx <= x1 && maxx >= x2 ){\n            //     return false;\n            // }\n            // if( miny <= y1 && maxy >= y2 ){\n            //     return false;\n            // }\n\n        }\n        return true;\n    }\n\n\n    bool isConnected(vector<int> &b1, vector<int> &b2){\n        long x1 = b1[0], y1 = b1[1];\n        long x2 = b2[0], y2 = b2[1];\n        long r1 = b1[2];\n        long r2 = b2[2];\n        long base = x2 - x1;\n        long per = y2 - y1;\n        double hypo = sqrt((base*base)+(per*per));\n        return double(r1+r2) >= hypo;\n    }\n};",
    "submit_ts": "1722138960",
    "subm_id": "1335804168"
}