{
    "username": "Anantdeep_Singh",
    "submission": "from typing import List\nfrom collections import deque\nimport math\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def bfs(graph, start, target1, target2, nodes):\n            queue = deque([start])\n            visited = [0] * (nodes + 4)\n            visited[start] = 1\n\n            while queue:\n                u = queue.popleft()\n                for v in graph[u]:\n                    if not visited[v]:\n                        queue.append(v)\n                        visited[v] = 1\n            return visited[target1] or visited[target2]\n\n        num_circles = len(circles)\n        graph = [[] for _ in range(num_circles + 4)]\n\n        for i in range(num_circles):\n            x, y, r = circles[i]\n            # Connect circle `i` to boundaries if it intersects them\n            if x <= r:\n                graph[num_circles].append(i)\n                graph[i].append(num_circles)\n            if X - x <= r:\n                graph[num_circles + 2].append(i)\n                graph[i].append(num_circles + 2)\n            if y <= r:\n                graph[num_circles + 1].append(i)\n                graph[i].append(num_circles + 1)\n            if Y - y <= r:\n                graph[num_circles + 3].append(i)\n                graph[i].append(num_circles + 3)\n            # Connect circles that overlap\n            for j in range(i + 1, num_circles):\n                xj, yj, rj = circles[j]\n                distance = math.sqrt((x - xj) ** 2 + (y - yj) ** 2)\n                radius_sum = r + rj\n                if radius_sum >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n\n        # Check if there is a clear path from the bottom-left to the top-right\n        is_blocked = 0\n        is_blocked = max(is_blocked, bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4))  # Check from bottom-left\n        is_blocked = max(is_blocked, bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4))  # Check to top-right\n\n        return is_blocked == 0\n",
    "submit_ts": "1722139115",
    "subm_id": "1335808273"
}