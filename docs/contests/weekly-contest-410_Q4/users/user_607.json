{
    "username": "lwy123177",
    "submission": "class Solution {\n    int MOD = (int)1e9+7;\n    // int dfs(int[] nums, int i, int lastArr1) {\n    //     if (i == nums.length) return 1;\n    //     int ans = 0;\n    //     int lastArr2 = i == 0 ? nums[i] : nums[i - 1] - lastArr1;\n    //     for (int j1 = nums[i]; j1 >= lastArr1; j1--) {\n    //         int j2 = nums[i] - j1;\n    //         if (j2 > lastArr2) break;\n    //         ans = ans + dfs(nums, i + 1, j1);\n    //     }\n    //     return ans;\n    // }\n    int subtract(int a, int b) {\n        int c = a - b;\n        if (c < 0) c += MOD;\n        return c;\n    }\n    int query(int[] prefix, int l, int r) {\n        if (r < l) return 0;\n        return subtract(prefix[r], (l == 0 ? 0 : prefix[l - 1]));\n    }\n    public int countOfPairs(int[] nums) {\n        int n = nums.length, maxi = 0;\n        for (int x : nums) maxi = Math.max(maxi, x);\n        int[][] dp = new int[n + 1][maxi + 1];\n        int[][] prefixs = new int[n + 1][maxi + 1];\n        for (int i = n; i >= 0; i--) {\n            for (int lastArr1 = 0; lastArr1 <= maxi; lastArr1++) {\n                if (i == n) {\n                    dp[i][lastArr1] = 1;\n                    continue;\n                }\n                int lastArr2 = i == 0 ? nums[i] : nums[i - 1] - lastArr1;\n                dp[i][lastArr1] = query(prefixs[i+1], Math.max(lastArr1, nums[i] - lastArr2), nums[i]);\n                // int ans = 0;\n                // for (int j1 = Math.max(lastArr1, nums[i] - lastArr2); j1 <= nums[i]; j1++) {\n                //     ans = (ans + dp[i + 1][j1]) % MOD;\n                // }\n                // for (int j1 = nums[i]; j1 >= lastArr1; j1--) {\n                //     int j2 = nums[i] - j1;\n                //     if (j2 > lastArr2) break;\n                //     ans = (ans + dp[i + 1][j1]) % MOD;\n                // }\n                // dp[i][lastArr1] = ans;\n            }\n            prefixs[i][0] = dp[i][0];\n            for (int lastArr1 = 1; lastArr1 <= maxi; lastArr1++) {\n                prefixs[i][lastArr1] = (prefixs[i][lastArr1 - 1] + dp[i][lastArr1]) % MOD;\n            }\n        } \n        return dp[0][0];\n        // return dfs(nums, 0, 0);\n    }\n}",
    "submit_ts": "1723348470",
    "subm_id": "1351618916"
}