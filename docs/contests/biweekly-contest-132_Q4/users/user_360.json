{
    "username": "Rajdhakar2003",
    "submission": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n        val size = nums.size\n        val lengths = Array(size) { IntArray(k + 1) { 1 } }\n        var maxLength = 1\n        val maxLengths = IntArray(k + 1) { -1 }\n        val numToLengthsMap = Array(k + 1) { mutableMapOf<Int, Int>() }\n        \n        for (i in 0 until size) {\n            for (j in 0..k) {\n                for (l in 0 until j) {\n                    lengths[i][j] = maxOf(lengths[i][j], 1 + maxLengths[l])\n                }\n                \n                if (nums[i] in numToLengthsMap[j]) {\n                    lengths[i][j] = maxOf(lengths[i][j], 1 + numToLengthsMap[j][nums[i]]!!)\n                }\n                \n                maxLength = maxOf(maxLength, lengths[i][j])\n            }\n            \n            for (j in 0..k) {\n                maxLengths[j] = maxOf(maxLengths[j], lengths[i][j])\n                numToLengthsMap[j][nums[i]] = maxOf(numToLengthsMap[j].getOrDefault(nums[i], 0), lengths[i][j])\n            }\n        }\n        \n        return maxLength\n    }\n}\n",
    "submit_ts": 1717862080.0
}