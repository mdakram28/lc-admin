{
    "username": "yzhu-bs",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // \u4f18\u5148\u961f\u5217\uff08\u6700\u5927\u5806\uff09\uff0c\u6309\u5207\u5272\u5f00\u9500\u964d\u5e8f\u6392\u5217\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n\n        for (int i = 0; i < horizontalCut.length; i++) {\n            pq.offer(new int[]{horizontalCut[i], 0}); // 0 \u8868\u793a\u6c34\u5e73\u5207\u5272\u7ebf\n        }\n        for (int i = 0; i < verticalCut.length; i++) {\n            pq.offer(new int[]{verticalCut[i], 1}); // 1 \u8868\u793a\u5782\u76f4\u5207\u5272\u7ebf\n        }\n\n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        // \u8d2a\u5fc3\u9009\u62e9\uff1a\u4f18\u5148\u9009\u53d6\u5f00\u9500\u8f83\u5927\u7684\u5207\u5272\u7ebf\n        while (!pq.isEmpty()) {\n            int[] cut = pq.poll();\n            int cost = cut[0];\n            int type = cut[1];\n\n            if (type == 0) { // \u6c34\u5e73\u5207\u5272\u7ebf\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } else { // \u5782\u76f4\u5207\u5272\u7ebf\n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926143",
    "subm_id": "546444347"
}