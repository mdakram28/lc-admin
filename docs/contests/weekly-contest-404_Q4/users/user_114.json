{
    "username": "Wibo",
    "submission": "class Solution {\npublic:\n    typedef long long int ll;\n    \n    void addEdge(vector<vector<int>>& adjList, int x, int y) {\n        adjList[x].push_back(y);\n        adjList[y].push_back(x);\n    }\n\n    int calcDepth(vector<vector<int>>& island, int dad, int node) {\n        int res = 0;\n        for(int child : island[node])\n            if(child != dad)\n                res = max(res, calcDepth(island, node, child) + 1);\n        return res;\n    }\n\n    vector<int> findMid(vector<vector<int>>& island) { //This function is based on this video \"https://www.youtube.com/watch?v=nzF_9bjDzdc\"\n        int n = island.size();\n        if (n == 1) return {0};\n        vector<int> degree(n);\n        vector<int> leaves;\n        for(int i = 0; i < n; i++) {\n            degree[i] = island[i].size();\n            if(degree[i] == 1) leaves.push_back(i);\n        }\n        int c = n - leaves.size();\n        while(c) {\n            vector<int> new_leaves;\n            for(int leaf : leaves) {\n                for(int neighbour : island[leaf]) if(--degree[neighbour] == 1) new_leaves.push_back(neighbour);\n                degree[leaf] = 0;\n            }\n            // leaves.clear();\n            // for(int new_leaf : new_leaves) leaves.push_back(new_leaf);\n            swap(leaves, new_leaves);\n            c -= leaves.size();\n        }\n        return leaves;\n    }\n\n    int solve2(vector<vector<int>>& island1, vector<vector<int>>& island2) { //O(N1 + N2)\n        vector<int> mid1 = findMid(island1);\n        vector<int> mid2 = findMid(island2);\n        int d1 = calcDepth(island1, -1, mid1[0]);\n        int d2 = calcDepth(island2, -1, mid2[0]);\n        return max(d1 + d2 + 1, max(2*d1 - (mid1.size()==2), 2*d2 - (mid2.size()==2)));\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1, n2 = edges2.size() + 1;\n        vector<vector<int>> island1(n1);\n        for(int i = 0; i < n1 - 1 ; i++) {\n            int x = edges1[i][0], y = edges1[i][1];\n            addEdge(island1, x, y);\n        }\n        vector<vector<int>> island2(n2);\n        for(int i = 0; i < n2 - 1; i++) {\n            int x = edges2[i][0], y = edges2[i][1];\n            addEdge(island2, x, y);\n        }\n\n        return solve2(island1, island2);\n    }\n};",
    "submit_ts": "1719716609",
    "subm_id": "1304369186"
}