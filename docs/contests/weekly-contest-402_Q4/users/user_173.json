{
    "username": "gcasd001-e",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define ull unsigned long long int\n#define db double\n#define ldb long double\n#define int128 __int128_t\n#define fr(x) freopen(x,\"r\",stdin);\n#define fw(x) freopen(x,\"w\",stdout);\n#define mst(x,a) memset(x,a,sizeof(x));\n#define all(x) (x).begin(),(x).end()\n#define rall(x) (x).rbegin(),(x).rend()\n#define fi first\n#define se second\n#define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define yes std::cout << \"Yes\\n\"\n#define no std::cout << \"No\\n\"\n#ifdef LOCAL\n#include \"leetcode.h\"\n#endif // LOCAL\ntemplate <typename T> int si(const T &x) { return x.size(); }\ntemplate <typename T, typename S> inline bool chmax(T &a, const S &b) { if (a < b) { a = b; return true; } return false; }\ntemplate <typename T, typename S> inline bool chmin(T &a, const S &b) { if (b < a) { a = b; return true; } return false; }\nconst int mod = 1000000007;\nconst int inf = 0x3f3f3f3f;\n\ntemplate <typename T>\nstruct BIT {\n  int N;\n  std::vector<T> data;\n\n  BIT(int size = 0) {\n    init(size);\n  }\n\n  void init(int size) {\n    N = size + 2;\n    data.assign(N + 1, T{});\n  }\n  T sum(int k) const {\n    if (k < 0) return T{};  // return 0 if k < 0\n    T ret{};\n    for (int i = k + 1; i > 0; i -= i & -i) ret += data[i];\n    return ret;\n  }\n  T sum(int l, int r) const { return sum(r) - sum(l - 1); }\n\n  T operator[](int k) const { return sum(k) - sum(k - 1); }\n\n  void add(int k, T x) {\n    for (int i = k + 1; i < N; i += i & -i) data[i] += x;\n  }\n  void imos(int l, int r, T x) {\n    add(l, x);\n    add(r + 1, -x);\n  }\n  int kth(T k) {\n    int x = 0;\n    for (int i = 1 << __lg(N); i > 0; i >>= 1) {\n      if (x + i < N && data[x + i] < k) {\n        x += i;\n        k -= data[x];\n      }\n    }\n    return x;\n  }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& qry) {\n      int n = si(nums);\n      int Q = si(qry);\n      auto check_single = [&](int i) {\n        int ret = 0;\n        if (i && nums[i] > nums[i-1]) ret++;\n        if (i + 1 < n && nums[i] > nums[i+1]) ret++;\n        return ret == 2;\n      };\n      vector<int> ans;\n      BIT<int> b(n);\n      for (int i = 0; i < n; i++) {\n        if (check_single(i)) {\n          b.add(i, 1);\n        }\n      }\n      for (int i = 0; i < Q; i++) {\n        if (qry[i][0] == 1) {\n          int l = qry[i][1], r = qry[i][2];\n          int t = l+1 > r-1 ? 0 : b.sum(l+1, r-1);\n            ans.push_back(t);\n        } else {\n          int k = qry[i][1], x = qry[i][2];\n          for (int j = k - 1; j <= k + 1; j++) {\n            if (j < 0 || j >= n) continue;\n            if (check_single(j)) b.add(j, -1);\n          }\n          nums[k] = x;\n          for (int j = k - 1; j <=k+1; j++) {\n            if (j < 0 || j >= n) continue;\n            if (check_single(j)) b.add(j, 1);\n          }\n        }\n      }\n      return ans;\n    }\n};\n",
    "submit_ts": 1718506649.0
}