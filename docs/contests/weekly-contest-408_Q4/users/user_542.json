{
    "username": "CtrlC_CtrlV",
    "submission": "\nclass Solution {\n\npublic:\n    \n    int bfs(vector<vector<int>> &adj, int s, int t1, int t2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(s);\n        visited[s] = 1;\n\n        while (!q.empty()) {\n            int top = q.front();\n            q.pop();\n            for (int adjNOde : adj[top]) {\n                if (!visited[adjNOde]) {\n                    q.push(adjNOde);\n                    visited[adjNOde] = 1;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n         vector<vector<int>> temp(circles.begin(), circles.end());\n         vector<vector<int>> adj(circles.size() + 4);\n        \n         for (int i = 0; i < n; ++i) {\n             \n            if (temp[i][0] <= temp[i][2]) {\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if (X - temp[i][0] <= temp[i][2]) {\n                adj[n + 2].push_back(i);\n                adj[i].push_back(n + 2);\n            }\n            if (temp[i][1] <= temp[i][2]) {\n                adj[n + 1].push_back(i);\n                adj[i].push_back(n + 1);\n            }\n            if (Y - temp[i][1] <= temp[i][2]) {\n                adj[n + 3].push_back(i);\n                adj[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; j++) {\n                if (temp[i][2] + temp[j][2] >= sqrt(pow(temp[i][0] - temp[j][0], 2) + pow(temp[i][1] - temp[j][1], 2))) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        int ans = 0;\n        ans = max(ans, bfs(adj, n, n + 1, n + 2, n + 4)); \n        ans = max(ans, bfs(adj, n + 3, n + 2, n + 1, n + 4)); \n        return !ans;\n    }\n};",
    "submit_ts": "1722138103",
    "subm_id": "1335782179"
}