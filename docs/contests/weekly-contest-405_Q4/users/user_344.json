{
    "username": "shri21",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n#include <climits>\n#include <iostream>\n\nstruct TrieNode {\n    std::unordered_map<char, TrieNode*> children;\n    std::vector<std::pair<int, int>> wordEnds; \n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n\n    void insert(const std::string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c))\n                node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->wordEnds.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        int n = target.size();\n        std::vector<int> dp = initializeDP(n);\n\n        Trie trie = buildTrie(words, costs);\n\n        calculateDP(target, words, trie, dp);\n\n        return getResult(dp);\n    }\n\nprivate:\n    Trie buildTrie(const std::vector<std::string>& words, const std::vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            insertWordToTrie(trie, words[i], i, costs[i]);\n        }\n        return trie;\n    }\n\n    void insertWordToTrie(Trie& trie, const std::string& word, int index, int cost) {\n        trie.insert(word, index, cost);\n    }\n\n    std::vector<int> initializeDP(int n) {\n        std::vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        return dp;\n    }\n\n    void calculateDP(const std::string& target, const std::vector<std::string>& words, Trie& trie, std::vector<int>& dp) {\n        int n = target.size();\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            updateDP(target, words, trie, dp, i);\n        }\n    }\n\n    void updateDP(const std::string& target, const std::vector<std::string>& words, Trie& trie, std::vector<int>& dp, int i) {\n        TrieNode* node = trie.root;\n        for (int j = i; j < target.size(); ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            processTrieNode(node, words, dp, i, j);\n        }\n    }\n\n    void processTrieNode(TrieNode* node, const std::vector<std::string>& words, std::vector<int>& dp, int i, int j) {\n        for (const auto& p : node->wordEnds) {\n            int wordIndex = p.first;\n            int wordCost = p.second;\n            int len = words[wordIndex].size();\n            if (i + len <= dp.size() - 1) {\n                dp[i + len] = std::min(dp[i + len], dp[i] + wordCost);\n            }\n        }\n    }\n\n    int getResult(const std::vector<int>& dp) {\n        int result = dp.back();\n        return result == INT_MAX ? -1 : result;\n    }\n\n    void debugPrintTrie(Trie& trie) {\n        printTrieNode(trie.root, \"\");\n    }\n\n    void printTrieNode(TrieNode* node, const std::string& prefix) {\n        if (!node) return;\n        if (!node->wordEnds.empty()) {\n            std::cout << \"Prefix: \" << prefix << \", Ends: \";\n            for (const auto& p : node->wordEnds) {\n                std::cout << \"(\" << p.first << \", \" << p.second << \") \";\n            }\n            std::cout << std::endl;\n        }\n        for (const auto& child : node->children) {\n            printTrieNode(child.second, prefix + child.first);\n        }\n    }\n\n    void debugPrintDP(const std::vector<int>& dp) {\n        for (int val : dp) {\n            std::cout << val << \" \";\n        }\n        std::cout << std::endl;\n    }\n\n    void debugPrintSubstrings(const std::string& target, const std::unordered_map<std::string, int>& wc) {\n        int n = target.size();\n        for (int i = 1; i <= n; ++i) {\n            for (const auto& pair : wc) {\n                const std::string& w = pair.first;\n                if (i >= w.size()) {\n                    std::string sub = target.substr(i - w.size(), w.size());\n                    std::cout << \"Substring: \" << sub << \" at position \" << i << std::endl;\n                }\n            }\n        }\n    }\n\n    void debugPrintWordCostMap(const std::unordered_map<std::string, int>& wc) {\n        for (const auto& pair : wc) {\n            std::cout << \"Word: \" << pair.first << \", Cost: \" << pair.second << std::endl;\n        }\n    }\n};\n",
    "submit_ts": "1720321871",
    "subm_id": "1312334531"
}