{
    "username": "sunny0405",
    "submission": "class Solution {\n    int[][] preCount;\n    \n    private int and(int l, int r) {\n        int result = 0, len = r - l + 1;\n        for (int i = 0; i < 32; i++) {\n            if (preCount[r + 1][i] - preCount[l][i] == len)\n                result |= 1 << i;\n        }\n        return result;\n    }\n    \n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        preCount = new int[n + 1][32];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 32; j++) {\n                preCount[i + 1][j] = preCount[i][j] + ((nums[i] >> j) & 1);\n            }\n        }\n        \n        int result = Integer.MAX_VALUE;\n        \n        for (int i = 0; i < n; i++) {\n            int low = i - 1, high = n - 1, mid = 0;\n            while (low + 1 < high) {\n                mid = (low + high) >> 1;\n                if (and(i, mid) >= k)\n                    low = mid;\n                else\n                    high = mid;\n            }\n            result = Math.min(result, Math.abs(k - and(i, high)));\n            if (low + 1 != i)\n                result = Math.min(result, Math.abs(k - and(i, low)));\n        }\n        \n        return result;\n    }\n}",
    "submit_ts": 1717300479.0
}