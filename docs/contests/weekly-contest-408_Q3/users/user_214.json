{
    "username": "hkhzzz",
    "submission": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        int n = s.length();\n        vector<vector<int>> dp(1);\n        dp[0].push_back(-1); // always find it\n        \n        int ret = 0;\n        int cur0 = 0;\n        for (int i = 0; i < s.length(); i ++) {\n            if (s[i] == '0') cur0 ++;\n            for (int j = dp.size() - 1; j >= 0 && (i - (cur0 - j) * (cur0 - j + 1)) >= -1; j --) {\n                if (dp[j].empty() || dp[j][0] > (i - (cur0 - j) * (cur0 - j + 1))) continue;\n                // cout << \"find #0 \" << j<< \" find index less than \" << i - (cur0 - j) * (cur0 - j + 1) << endl;\n                \n                int size = upper_bound(dp[j].begin(), dp[j].end(), (i - (cur0 - j) * (cur0 - j + 1))) - dp[j].begin();\n                ret += size;\n                // cout << \"+=\" << size << endl;\n            }\n            // cout << i << \" current have #zeros \" << cur0;\n            if (s[i] == '0'){\n                dp.push_back({i});\n                // cout << \" new \" << dp.size()-1 << endl;\n            }\n            else {\n                dp[dp.size()-1].push_back({i});\n                // cout << \" total \" << dp.size()-1 << endl;\n            }\n            // cout << \"> end of \" << i << \" has \" << ret << endl;\n        }\n        // cout << \"--\" << endl;\n        return ret;\n        \n        // int ret = 0;\n        // for (int i = 0; i < n; i ++) { // start from i\n        //     int cnt0 = 0;\n        //     int cnt1 = 0;\n        //     for (int j = i+1; j <= n; j ++) { // to j [i, j)\n        //         if (s[j-1] == '1') cnt1 ++;\n        //         else cnt0 ++;\n        //         // cout << i << \"--\" << j << \": \" << cnt0 << \",\" << cnt1 << endl;\n        //         if (cnt1 >= cnt0 * cnt0) ret ++;\n        //     }\n        // }\n        // return ret;\n    }\n};",
    "submit_ts": "1722137298",
    "subm_id": "1335759782"
}