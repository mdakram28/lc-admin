{
    "username": "chiang03",
    "submission": "#include<bits/stdc++.h>\nnamespace R = ranges;\nnamespace V = views;\nclass Solution {\n    vector<array<array<int, 2>, 4>> g;\n    map<array<int, 3>, long long> dp;\n    long long dfs_im(int r, int a, int b){\n        long long ans = dfs(r+1, a, b);\n        for(int i=0; i<3; ++i){\n            if(g[r][i][1] == a || g[r][i][1] == b){\n                continue;\n            }\n            if(a == 500){\n                ans = max(ans, g[r][i][0] + dfs(r+1, g[r][i][1], b));\n            } else if(b == 500){\n                ans = max(ans, g[r][i][0] + dfs(r+1, a, g[r][i][1]));\n            } else {\n                ans = max(ans, (long long)g[r][i][0]);\n            }\n        }\n        return ans;\n    }\n     long long dfs(int r, int a, int b){\n        if(r == g.size()){\n            return -1e15;\n        }\n        auto it = dp.find({r, a, b});\n        if(it != end(dp)){\n            return it->second;\n        }\n        return dp[{r, a, b}] = dfs_im(r, a, b);\n    }\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        g.resize(board.size());\n        // vector<vector<array<int, 2>>> bb(board);\n        for(int i=0; i<board.size(); ++i){\n            g[i].fill(array<int, 2>{(int)(-2e9), -1});\n            for(int c=0; c<board[0].size(); ++c){\n                g[i][3] = {board[i][c], c};\n                R::inplace_merge(g[i], begin(g[i])+3, greater{});\n                // for(int c=0;c<3;++c){\n                    // cout<<g[i][c][0]<<' ';\n                // }\n            }\n            // cout<<'\\n';\n        }\n        return dfs(0, 500, 500);\n    }\n};",
    "submit_ts": "1723909539",
    "subm_id": "1359196387"
}