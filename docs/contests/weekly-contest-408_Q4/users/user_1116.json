{
    "username": "luyangg",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def find(i):\n            while i != par[i]:\n                par[i] = par[par[i]] # path compression\n                i = par[i]\n            return i\n        def union(i, j):\n            i, j = find(i), find(j)\n            if i == j: return 0\n            else: par[i] = j\n            return 1\n        def isConnected(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            dist_sq = (x1 - x2) ** 2 + (y1 - y2) ** 2\n            return dist_sq <= (r1 + r2) ** 2\n        def touch_point(circle, point):\n            x, y, r = circle\n            px, py = point\n            dist_sq = (x - px) ** 2 + (y - py) ** 2\n            return dist_sq <= r ** 2\n        \n        n = len(circles)\n        par = [i for i in range(len(circles))]\n        for i in range(n):\n            for j in range(i + 1, n):\n                if isConnected(circles[i], circles[j]):\n                    union(i, j)\n        for i in range(n):\n            find(i)\n        for i in range(n):\n            if touch_point(circles[i], (0, 0)):\n                return False\n        for i in range(n):\n            if touch_point(circles[i], (X, Y)):\n                return False\n        touch = [-1, -1, -1, -1]\n        for i, (x, y, r) in enumerate(circles):\n            if x - r <= 0:\n                if touch[0] != -1 and touch[0] != find(i):\n                    union(touch[0], i)\n                touch[0] = find(i)\n            if y - r <= 0:\n                if touch[3] != -1 and touch[3] != find(i):\n                    union(touch[3], i)\n                touch[3] = find(i)\n            if x + r >= X:\n                if touch[2] != -1 and touch[2] != find(i):\n                    union(touch[2], i)\n                touch[2] = find(i)\n            if y + r >= Y:\n                if touch[1] != -1 and touch[1] != find(i):\n                    union(touch[1], i)\n                touch[1] = find(i)\n            if touch[0] == touch[3] and touch[0] != -1:\n                return False\n            if touch[1] == touch[2] and touch[1] != -1:\n                return False\n            if touch[0] == touch[2] and touch[0] != -1:\n                return False\n            if touch[1] == touch[3] and touch[1] != -1:\n                return False\n        return True",
    "submit_ts": "1722139158",
    "subm_id": "1335809509"
}