{
    "username": "Ayush743",
    "submission": "class Solution {\npublic:\n    double Distance(int& x1, int& y1, int& x2, int& y2) {\n        double a = abs(x1 - x2);\n        double b = abs(y1 - y2);\n\n        double distance = a * a + b * b;\n        distance = sqrt(distance);\n\n        return distance;\n    }\n\n    bool intersecting_circles(vector<int>& circle1, vector<int>& circle2) {\n        int x1 = circle1[0];\n        int y1 = circle1[1];\n        int r1 = circle1[2];\n\n        int x2 = circle2[0];\n        int y2 = circle2[1];\n        int r2 = circle2[2];\n\n        double center_distance = r1 + r2;\n        double distance = Distance(x1, y1, x2, y2);\n\n        if (distance <= center_distance)\n            return true;\n\n        return false;\n    }\n    void initialize(vector<vector<int>>& graph, int& n,\n                    vector<vector<int>>& circles) {\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j)\n                    continue;\n\n                if (intersecting_circles(circles[i], circles[j])) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        return;\n    }\n\n    bool BFS(int& n, vector<vector<int>>& circles, vector<vector<int>>& graph,\n             int& rectangle_x, int& rectangle_y) {\n        queue<int> q;\n        vector<bool> nodes_visited(n, false);\n\n        for (int i = 0; i < n; i++) {\n            if (circles[i][0] - circles[i][2] <= 0 ||\n                circles[i][1] + circles[i][2] >= rectangle_y) {\n                q.push(i);\n                nodes_visited[i] = true;\n            }\n        }\n\n        while (!q.empty()) {\n            int x = q.front();\n            q.pop();\n\n            if (circles[x][0] + circles[x][2] >= rectangle_x ||\n                circles[x][1] - circles[x][2] <= 0) {\n                return false;\n            }\n\n            for (int neighbours : graph[x]) {\n                if (nodes_visited[neighbours] == false) {\n                    q.push(neighbours);\n                    nodes_visited[neighbours] = true;\n                }\n            }\n        }\n        return true;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int rectangle_x, rectangle_y;\n        rectangle_x = X;\n        rectangle_y = Y;\n\n        int n = circles.size();\n\n        vector<vector<int>> graph(n);\n        initialize(graph, n, circles);\n\n        bool isReachable = BFS(n, circles, graph, rectangle_x, rectangle_y);\n\n        if (isReachable)\n            return true;\n        return false;\n    }\n};",
    "submit_ts": "1722135410",
    "subm_id": "1335700866"
}