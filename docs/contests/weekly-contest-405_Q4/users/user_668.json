{
    "username": "Sai_uday",
    "submission": "from typing import List, Dict\n\nclass TrieNode:\n    def __init__(self):\n        self.children: Dict[str, TrieNode] = {}\n        self.cost = float('inf')  # Initialize the cost to infinity\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str, cost: int):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def get_cost(self, substring: str) -> int:\n        node = self.root\n        for char in substring:\n            if char not in node.children:\n                return float('inf')\n            node = node.children[char]\n        return node.cost\n\nclass Solution:\n    def minimumCost(self, s: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        n = len(s)\n        max_cost = float('inf')\n        dp = [max_cost] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == max_cost:\n                continue\n            node = trie.root\n            for j in range(i, n):\n                if s[j] not in node.children:\n                    break\n                node = node.children[s[j]]\n                if node.cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != max_cost else -1\n\n\n",
    "submit_ts": "1720320724",
    "subm_id": "1312302810"
}