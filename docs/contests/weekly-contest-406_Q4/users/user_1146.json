{
    "username": "kvt_one",
    "submission": "#include <vector>\n#include <queue>\n#include <functional>\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        std::priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n        std::priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        long long totalCost = 0;\n\n        while (!hCuts.empty() && !vCuts.empty()) {\n            if (hCuts.top() > vCuts.top()) {\n                totalCost += static_cast<long long>(hCuts.top()) * verticalPieces;\n                hCuts.pop();\n                horizontalPieces++;\n            } else {\n                totalCost += static_cast<long long>(vCuts.top()) * horizontalPieces;\n                vCuts.pop();\n                verticalPieces++;\n            }\n        }\n\n        while (!hCuts.empty()) {\n            totalCost += static_cast<long long>(hCuts.top()) * verticalPieces;\n            hCuts.pop();\n        }\n        \n        while (!vCuts.empty()) {\n            totalCost += static_cast<long long>(vCuts.top()) * horizontalPieces;\n            vCuts.pop();\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925787",
    "subm_id": "1320266187"
}