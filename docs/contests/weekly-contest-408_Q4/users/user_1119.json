{
    "username": "vyash382",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int[] point = {X,Y};\n        List<List<Integer>> list = new ArrayList<>();\n        Boolean[] vis = new Boolean[circles.length];\n        DSU dsu = new DSU(circles.length);\n        for(int i=0;i<circles.length;i++){\n            if(funcc(circles[i],point)) return false;\n            for(int j =0;j<circles.length;j++){\n                if(intersects(circles[i],circles[j])){\n                    dsu.union(i,j);\n                }\n            }\n        }\n        HashMap<Integer,List<Integer>> map = new HashMap<>();\n        for(int i=0;i<circles.length;i++){\n            int aa = dsu.find(i);\n            if(!map.containsKey(aa)) {\n                List<Integer> ll = new ArrayList<>();\n                ll.add(-1);\n                ll.add(Integer.MAX_VALUE);\n                ll.add(Integer.MAX_VALUE);\n                ll.add(-1);\n                map.put(aa,ll);\n            }\n            List<Integer> k = map.get(aa);\n            int up = circles[i][1]+circles[i][2];\n            int down = circles[i][1]-circles[i][2];\n            int left = circles[i][0]-circles[i][2];\n            int right = circles[i][0]+circles[i][2];\n            up = Math.max(up,k.get(0));\n            down = Math.min(down,k.get(1));\n            left = Math.min(left,k.get(2));\n            right = Math.max(right,k.get(3));\n            k.set(0,up);\n            k.set(1,down);\n            k.set(2,left);\n            k.set(3,right);\n        }\n        Boolean flag = true;\n        for(var f:map.keySet()){\n            List<Integer> ll = map.get(f);\n            // System.out.println(ll);\n            if((ll.get(0)>=Y && ll.get(1)<=0 ) || (ll.get(2)<=0 && ll.get(3)>=X) || (ll.get(0)>=Y && ll.get(3)>=X) || (ll.get(1)<=0 && ll.get(2)<=0) ){\n                flag = false;\n                break;\n            }\n        }\n        return flag;\n    }\n    public static boolean funcc(int[] circle, int[] point) {\n        // Extracting center coordinates and radius of the circle\n        int xC = circle[0];\n        int yC = circle[1];\n        int r = circle[2];\n\n        // Extracting point coordinates\n        int xP = point[0];\n        int yP = point[1];\n\n        // Calculate the distance between the center of the circle and the point\n        double distance = Math.sqrt(Math.pow(xP - xC, 2) + Math.pow(yP - yC, 2));\n        // System.out.println(distance);\n        // Check if the point lies inside or on the boundary of the circle\n        return distance <= r;\n    }\n    public static boolean intersects(int[] circle1, int[] circle2) {\n       \n        int x1 = circle1[0];\n        int y1 = circle1[1];\n        int r1 = circle1[2];\n\n        int x2 = circle2[0];\n        int y2 = circle2[1];\n        int r2 = circle2[2];\n\n        \n        double distanceBetweenCenters = Math.sqrt(Math.pow(x2 - x1, 2) + Math.pow(y2 - y1, 2));\n\n        \n        return distanceBetweenCenters <= (r1 + r2);\n    }\n}\nclass DSU {\n    private int[] parent;\n    private int[] rank;\n\n    \n    public DSU(int size) {\n        parent = new int[size];\n        rank = new int[size];\n        for (int i = 0; i < size; i++) {\n            parent[i] = i;\n            rank[i] = 0;\n        }\n    }\n\n    \n    public int find(int x) {\n        if (parent[x] != x) {\n            parent[x] = find(parent[x]); \n        }\n        return parent[x];\n    }\n\n    \n    public boolean union(int x, int y) {\n        int rootX = find(x);\n        int rootY = find(y);\n\n        if (rootX != rootY) {\n            if (rank[rootX] > rank[rootY]) {\n                parent[rootY] = rootX;\n            } else if (rank[rootX] < rank[rootY]) {\n                parent[rootX] = rootY;\n            } else {\n                parent[rootY] = rootX;\n                rank[rootX]++;\n            }\n            return true;\n        }\n        return false;\n    }\n\n    \n    public boolean connected(int x, int y) {\n        return find(x) == find(y);\n    }\n\n    \n}",
    "submit_ts": "1722137938",
    "subm_id": "1335777767"
}