{
    "username": "_priyanshu_101_",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& v) {\n        int k = 1;\n        for (auto &x : v) k = max(k, x[1]);\n        vector <vector<long long>> dp(2, vector <long long> (k + 1));\n        dp[0][0] = 1; \n        int pointer = 0, sz = v.size();\n        long long MOD = 1E9 + 7;\n        sort(v.begin(), v.end());\n        for (int i = 1; i <= n; ++i)\n        {\n            bool cur = (i % 2);\n            bool pre = !cur; \n\n            dp[cur][0] = dp[pre][0];\n            for (int j = 1; j <= k; ++j)\n            {\n                dp[cur][j] = (dp[cur][j - 1] + dp[pre][j]) % MOD;\n                if (j >= i)\n                    dp[cur][j] = (dp[cur][j] - dp[pre][j - i] + MOD) % MOD;\n            }\n            if (pointer < sz && v[pointer][0] == (i - 1)) {\n                for (int j = 0; j <= k; j ++) {\n                    if (j != v[pointer][1]) dp[cur][j] = 0;\n                }\n                pointer ++;\n            }\n            // for (int j = 0; j <= k; j ++) {\n            //     cout << dp[cur][j] << ' ';\n            // }\n            // cout << '\\n';\n        }\n        return dp[n % 2][v.back()[1]];\n    }\n};",
    "submit_ts": 1719070610.0
}