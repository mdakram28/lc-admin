{
    "username": "rohanvedula",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        # first idea: dp on removing element?\n        # second idea: some type of divide and conquer?\n        # third idea: find 3 separate instance a) with all points, max distance has to be between x and y\n        # b) remove x then find max, \n        # c) remove y then find max, return min of x,y\n        \n    \n        # to-do: find max mahattan distance given set of points\n        n = len(points)\n        def find_max_distance(points):\n            maxs = mins = 0\n            maxd = mind = 0\n            \n            for i in range(1, n):\n                s = points[i][0]+points[i][1]\n                d = points[i][0]-points[i][1]\n                if s>points[maxs][0]+points[maxs][1]:\n                    maxs = i\n                elif s<points[mins][0]+points[mins][1]:\n                    mins = i\n                \n                if d>points[maxd][0]-points[maxd][1]:\n                    maxd = i\n                elif d<points[mind][0]-points[mind][1]:\n                    mind = i\n            \n            if points[maxs][0]+points[maxs][1]-(points[mins][0]+points[mins][1])>points[maxd][0]-points[maxd][1]-(points[mind][0]-points[mind][1]):\n                return points[maxs][0]+points[maxs][1]-(points[mins][0]+points[mins][1]), (maxs, mins)\n            return points[maxd][0]-points[maxd][1]-(points[mind][0]-points[mind][1]), (maxd, mind)\n        \n        d, p = find_max_distance(points)\n        temp = points[p[0]]\n        points[p[0]] = points[p[1]]\n        \n        min_dist1, k = find_max_distance(points)\n        points[p[0]] = temp\n        points[p[1]] = temp\n        \n        min_dist2, k = find_max_distance(points)\n        return min(min_dist1, min_dist2)\n        \n        \n        \n        "
}