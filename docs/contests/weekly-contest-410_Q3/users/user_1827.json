{
    "username": "lucasomee006",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        #the first elements need to sum up to nums[0]\n        #the second elements needs to sum up to nums[1]\n        #since they're non-negative, if nums[1] > nums[0], you have to increase the first \n        #obviously the monotonically increasing array has to start <= the min element in the array\n        #at each step there's a difference between the previous array. If it's negative, you can \n        MOD = 10**9 + 7\n        @cache\n        def dp(i, sumInc, sumDec):\n            if i == len(nums):\n                return 1\n            if i == 0:\n                curSum = 0\n                for j in range(0, nums[0]+1):\n                    curSum += dp(i+1, j, nums[0]-j)\n                    curSum %= MOD\n                return curSum\n            else:\n                dif = nums[i] - sumInc - sumDec\n                curSum = 0\n                for j in range(sumInc, nums[i]+1):\n                    if nums[i]-j <= sumDec:\n                        curSum += dp(i+1, j, nums[i]-j)\n                        curSum %= MOD\n                return curSum\n        return dp(0, 0, nums[0])\n                \n\n                    #they have to equal nums[i]\n                    \n",
    "submit_ts": "1723346014",
    "subm_id": "1351568244"
}