{
    "username": "lydxlx",
    "submission": "#include <vector>\n#include <cmath>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\nprivate:\n    vector<vector<int>> ans;\n\n    void preprocess(const vector<int>& nums) {\n        int size = nums.size();\n        ans.assign(17, vector<int>(size, 0));\n        for (int i = 0; i < size; ++i) {\n            ans[0][i] = nums[i];\n        }\n        for (int i = 1; i < 17; ++i) {\n            int half = 1 << (i - 1);\n            for (int j = 0; j + half < size; ++j) {\n                ans[i][j] = ans[i - 1][j] & ans[i - 1][j + half];\n            }\n        }\n    }\n\n    int getAnd(int left, int right) {\n        int total = right - left + 1;\n        int index = 0;\n        while ((1 << (index + 1)) <= total) {\n            ++index;\n        }\n        return ans[index][left] & ans[index][right - (1 << index) + 1];\n    }\n\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int res = INT_MAX;\n        preprocess(nums);\n        int size = nums.size();\n\n        for (int i = 0; i < size; ++i) {\n            int left = i, right = size - 1;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                int cur = getAnd(i, mid);\n                if (cur < k) {\n                    right = mid - 1;\n                } else {\n                    res = min(res, cur - k);\n                    left = mid + 1;\n                }\n            }\n            left = i;\n            right = size - 1;\n            while (left <= right) {\n                int mid = (left + right) / 2;\n                int cur = getAnd(i, mid);\n                if (cur > k) {\n                    left = mid + 1;\n                } else {\n                    res = min(res, k - cur);\n                    right = mid - 1;\n                }\n            }\n        }\n\n        return res;\n    }\n};\n",
    "submit_ts": 1717296975.0
}