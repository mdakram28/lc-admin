{
    "username": "Vraj_Dobariya_59",
    "submission": "\n\n\n#define N 100002\n\n\nint tree[4 * N];\n\nvoid build(int* arr, int node, int start, int end)\n{\n\tif (start == end) {\n\t\ttree[node] = arr[start];\n\t\treturn;\n\t}\n\tint mid = (start + end) >> 1;\n\tbuild(arr, 2 * node, start, mid);\n\tbuild(arr, 2 * node + 1, mid + 1, end);\n\ttree[node] = tree[2 * node] & tree[2 * node + 1];\n}\n\nint query(int node, int start, int end, int l, int r)\n{\n\tif (start > end || start > r || end < l) {\n\t\treturn INT_MAX;\n\t}\n\n\tif (start >= l && end <= r) {\n\t\treturn tree[node];\n\t}\n\n\tint mid = (start + end) >> 1;\n\tint q1 = query(2 * node, start, mid, l, r);\n\tint q2 = query(2 * node + 1, mid + 1, end, l, r);\n\treturn (q1 & q2);\n}\n\n// Function to count requisite number of subarrays\nlong long countSubArr(const int* arr, int n, int K)\n{\n\tlong long count = 0;\n\tfor (int i = 0; i < n; i++) {\n\n\t\t// Check for subrrays starting with index i\n\t\tint low = i, high = n - 1, index = INT_MAX;\n\t\twhile (low <= high) {\n\n\t\t\tint mid = (low + high) >> 1;\n\n\t\t\t// If OR of subarray [i..mid] >= K,\n\t\t\t// then all subsequent subarrays will have OR >= K\n\t\t\t// therefore reduce high to mid - 1\n\t\t\t// to find the minimal length subarray \n\t\t\t// [i..mid] having OR >= K\n\t\t\tif (query(1, 0, n - 1, i, mid) <= K) {\n\t\t\t\tindex = min(index, mid);\n\t\t\t\thigh = mid - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlow = mid + 1;\n\t\t\t}\n\t\t}\n\n\t\t// Increase count with number of subarrays\n\t\t// having OR >= K and starting with index i\n\t\tif (index != INT_MAX) {\n\t\t\tcount += n - index;\n\t\t}\n\t}\n\treturn count;\n}\n\n// Driver code\nlong long solve(vector<int>nums,int kk,int nn){\n    int n =  nums.size();\n    int k= kk;\n    int arr[n];\n    \n    for(int i=0;i<n;i++){\n        arr[i] = nums[i];\n    }\n    build(arr, 1, 0, n - 1);\n    long long ans = countSubArr(arr, n, k-1);\n    long long ans2 = countSubArr(arr, n, k);\n    return ans2-ans;\n}\n\nclass Solution {\npublic:\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n       return solve(nums,k,nums.size());\n    }\n};",
    "submit_ts": "1720281099",
    "subm_id": "1311813101"
}