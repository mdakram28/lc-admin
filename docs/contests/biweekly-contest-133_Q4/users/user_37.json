{
    "username": "leetcode2679",
    "submission": "class Solution {\n    int MOD = 1_000_000_007;\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int[][][] dp = new int[n + 1][401][2];\n        dp[0][0][1] = 1;\n        for(int len = 1; len <= n; len++) {\n            for(int inv = 0; inv <= 400; inv++) {\n                for(int k = 0; k < len; k++) {\n                    if(inv >= k) {\n                        dp[len][inv][0] = (dp[len][inv][0] + dp[len - 1][inv - k][0]) % MOD;\n                        dp[len][inv][1] = (dp[len][inv][1] + dp[len - 1][inv - k][1]) % MOD;\n                    }\n                }\n            }\n            for(int[] req : requirements) {\n                if(req[0] == len - 1) {\n                    for(int inv = 0; inv <= 400; inv++) {\n                        if(inv != req[1]) {\n                            dp[len][inv][1] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        int result = 0;\n        for(int inv = 0; inv <= 400; inv++) {\n            result = (result + dp[n][inv][1]) % MOD;\n        }\n        return result;\n    }\n}",
    "submit_ts": 1719067940.0
}