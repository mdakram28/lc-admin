{
    "username": "amsraman",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = (int) edges1.size() + 1, m = (int) edges2.size() + 1;\n        vector<vector<int>> g1(n), g2(m);\n        for(auto vec: edges1) {\n            int u = vec[0], v = vec[1];\n            g1[u].push_back(v);\n            g1[v].push_back(u);\n        }\n        for(auto vec: edges2) {\n            int u = vec[0], v = vec[1];\n            g2[u].push_back(v);\n            g2[v].push_back(u);\n        }\n        vector<int> dwn1(n, 0), dwn2(m, 0);\n        auto dfs = [&](auto rec, vector<vector<int>> & g, vector<int> & dwn, int u, int p) -> void {\n            for(int v: g[u]) {\n                if(v == p) continue;\n                rec(rec, g, dwn, v, u);\n                dwn[u] = max(dwn[u], dwn[v] + 1);\n            }\n        };\n        dfs(dfs, g1, dwn1, 0, 0);\n        dfs(dfs, g2, dwn2, 0, 0);\n        int diam1 = 0, diam2 = 0, b1 = 1e9, b2 = 1e9;\n        auto dfs2 = [&](auto rec, vector<vector<int>> & g, vector<int> & dwn, int & diam, int & b, int u, int p, int d) -> void {\n            int m1 = 0, m2 = 0;\n            for(int v: g[u]) {\n                if(v == p) continue;\n                m2 = max(m2, dwn[v] + 1);\n                if(m2 > m1) swap(m1, m2);\n            }\n            b = min(b, max(m1, d)); diam = max(diam, d + m1);\n            for(int v: g[u]) {\n                if(v == p) continue;\n                int new_d = max(d, dwn[v] + 1 == m1 ? m2 : m1) + 1;\n                rec(rec, g, dwn, diam, b, v, u, new_d);\n            }\n        };\n        dfs2(dfs2, g1, dwn1, diam1, b1, 0, 0, 0);\n        dfs2(dfs2, g2, dwn2, diam2, b2, 0, 0, 0);\n        return max({diam1, diam2, b1 + b2 + 1});\n    }\n};\n/*\nnew_diameter = min(d1, d2, down(one) + down(two))\n*/",
    "submit_ts": "1719716137",
    "subm_id": "1304356013"
}