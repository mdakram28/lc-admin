{
    "username": "mehtaharsh2903",
    "submission": "class Solution {\npublic:\n    pair<int,int> find(int n, vector<int> adj[], vector<int> degree) {\n        // degree = 1 then add into queue\n        queue<int> q;\n        for(int i = 0 ; i < n ; i++)\n            if(degree[i] == 1)\n                q.push(i);\n        int nodes = n;\n        int radius = 0;\n        int count = 0;\n        int run = 0;\n        while(nodes > 1 && !q.empty()) {\n            run++;\n            int size = q.size();\n            if(size >= 2 && nodes > 2)\n                count++;\n            radius++;\n            //cout << nodes << \" , \" << size << endl;\n            for(int i = 0 ; i < size ; i++) {\n                int currNode = q.front();\n                q.pop();\n                nodes--;\n                for(auto it : adj[currNode]) {\n                    degree[it]--;\n                    if(degree[it] == 1)\n                        q.push(it);\n                }\n            }\n        }\n        //cout << \"radius = \" << radius << \", count :\" << count << \" run \" << run << endl;\n        return {radius,run+count};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        // create adj list\n        vector<int> adj1[edges1.size()+1];\n        vector<int> adj2[edges2.size()+1];\n        vector<int> degree1(edges1.size()+1);\n        vector<int> degree2(edges2.size()+1);\n\n        for(auto it : edges1) {\n            adj1[it[0]].push_back(it[1]);\n            adj1[it[1]].push_back(it[0]);\n            degree1[it[0]]++;\n            degree1[it[1]]++;\n        }\n\n        for(auto it : edges2) {\n            adj2[it[0]].push_back(it[1]);\n            adj2[it[1]].push_back(it[0]);\n            degree2[it[0]]++;\n            degree2[it[1]]++;\n        }\n\n        pair<int,int> t1 = find(degree1.size(), adj1, degree1);\n        pair<int,int> t2 = find(degree2.size(), adj2, degree2);\n        //cout << t1.first << \", \" << t1.second << \" and \" << t2.first << \", \" << t2.second << endl; \n        return max((t1.first+t2.first+1), max(t1.second,t2.second));\n    }\n};",
    "submit_ts": "1719718301",
    "subm_id": "1304413836"
}