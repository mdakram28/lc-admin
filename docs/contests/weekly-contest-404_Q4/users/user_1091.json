{
    "username": "pankaj_777",
    "submission": "class Solution {\npublic:\n    int solve(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n + 1);\n        vector<int> dist(n, 0);\n        for (auto edge : edges) {\n            int u = edge[0], v = edge[1];\n\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n\n        auto dfs = [&] (int node, int parent, auto&& dfs) -> void {\n            for (auto v : adj[node]) {\n                if (v == parent) continue;\n                dist[v] = dist[node] + 1;\n                dfs(v, node, dfs);\n            }\n        };\n\n        dfs(0, -1, dfs);\n\n        int maxi = 0, node = 0;\n        for (int i = 0; i < n; i++) {\n            if (dist[i] > maxi) {\n                maxi = dist[i];\n                node = i;\n            }\n            dist[i] = 0;\n        }\n\n        dfs(node, -1, dfs);\n        return *max_element(dist.begin(), dist.end());\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = solve(edges1), d2 = solve(edges2);\n        return max({d1, d2, 1 + (d1 + 1) / 2 + (d2 + 1) / 2});\n    }\n};",
    "submit_ts": 1719718694.0
}