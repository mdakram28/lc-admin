{
    "username": "manohar_29",
    "submission": "class Solution \n{\n    vector<int> a;\n    vector<int> seg;\n\n    void build(int ind,int l,int r)\n    {\n        if(l==r)\n        {\n            seg[ind]=a[l];\n            return;\n        }\n\n        int m=(l+r)/2;\n        build(2*ind+1,l,m);\n        build(2*ind+2,m+1,r);\n        seg[ind]=max(seg[2*ind+1],seg[2*ind+2]);\n    }\n\n    int findMax(int ind,int l,int r,int x,int y)\n    {\n        if(l>=x && r<=y)\n        {\n            return seg[ind];\n        }\n        if(r<x || y<l)\n        {\n            return 0;\n        }\n\n        int m=(l+r)/2;\n        return max(findMax(2*ind+1,l,m,x,y),findMax(2*ind+2,m+1,r,x,y));\n    }\n\n    void update(int ind,int l,int r,int updInd,int val)\n    {\n        if(l==r)\n        {\n            if(updInd==l)\n                seg[ind]=val;\n            return;\n        }\n\n        int m=(l+r)/2;\n        if(updInd>=l && updInd<=m)\n        {\n            update(2*ind+1,l,m,updInd,val);\n        }\n        else\n        {\n            update(2*ind+2,m+1,r,updInd,val);\n        }\n        seg[ind]=max(seg[2*ind+1],seg[2*ind+2]);\n    }\n\n    \n    \npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) \n    {\n        int i,j,t,p,q,k,l,d1,d2,n=50001;\n        map<int,int> od;\n        vector<bool> res;\n        od[0]=0; od[50000]=0;\n        \n        a.resize(n,0);\n        a[50000]=50000;\n        seg.resize(4*n,0);\n        build(0,0,n-1);\n        \n        for(auto z:queries)\n        {\n            t=z[0];\n            if(t==1)\n            {\n                k=z[1];\n                \n                auto it=od.lower_bound(k);\n                q=it->first;\n                d2=it->second;\n                \n                it--;\n                p=it->first;\n                d1=it->second;\n                \n                od[p]=d1;\n                od[k]=abs(k-p);\n                od[q]=abs(k-q);\n                \n                // cout<<p<<\" \"<<q<<\" $ \";\n                \n                // a[p]=a[p]\n                a[k]=abs(p-k);\n                a[q]=abs(q-k);\n                \n                update(0,0,n-1,k,a[k]);\n                update(0,0,n-1,q,a[q]);\n                \n                \n            }\n            else\n            {\n                k=z[1];\n                l=z[2];\n                \n                auto it=od.upper_bound(k);\n                it--;\n                p=it->first;\n                d2=it->second;\n                \n                // cout<<p<<\" %% \";\n                \n                i=abs(p-k);\n                \n                t=findMax(0,0,n-1,0,p);\n                \n                // cout<<t<<\" == \";\n                        \n                if(max(i,t)>=l)\n                {\n                    res.push_back(true);\n                }\n                else\n                {\n                    res.push_back(false);\n                }\n            }\n            \n        }\n        return res;\n    }\n};",
    "submit_ts": 1716652179.0
}