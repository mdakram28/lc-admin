{
    "username": "adeeb125",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n1 = edges1.length + 1;\n        int n2 = edges2.length + 1;\n        List<Integer>[] tree1 = new ArrayList[n1];\n        for (int i = 0; i < n1; i++) {\n            tree1[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges1) {\n            tree1[edge[0]].add(edge[1]);\n            tree1[edge[1]].add(edge[0]);\n        }\n        List<Integer>[] tree2 = new ArrayList[n2];\n        for (int i = 0; i < n2; i++) {\n            tree2[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges2) {\n            tree2[edge[0]].add(edge[1]);\n            tree2[edge[1]].add(edge[0]);\n        }\n        int diameter1 = calculateDiameter(tree1);\n        int diameter2 = calculateDiameter(tree2);\n        return Math.max(diameter1, Math.max(diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1));\n    }\n    private int[] bfsFurthestNode(List<Integer>[] edges, int startNode) {\n        int n = edges.length;\n        int[] dist = new int[n];\n        Arrays.fill(dist, -1);\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(startNode);\n        dist[startNode] = 0;\n\n        int furthestNode = startNode;\n        int maxDist = 0;\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : edges[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.add(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        furthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return new int[]{furthestNode, maxDist};\n    }\n    private int calculateDiameter(List<Integer>[] edges) {\n        int[] result1 = bfsFurthestNode(edges, 0);\n        int[] result2 = bfsFurthestNode(edges, result1[0]);\n        return result2[1];\n    }\n}",
    "submit_ts": 1719717238.0
}