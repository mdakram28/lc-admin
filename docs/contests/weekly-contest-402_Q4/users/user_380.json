{
    "username": "LarryNY",
    "submission": "class BIT:\n    def __init__(self, N: int):\n        self.stree = [0] * (N + 1)\n\n    def increase(self, i, x):\n        while i < len(self.stree):\n            self.stree[i] += x\n            i |= (i + 1)\n            \n    def total(self, i):\n        s = 0\n        \n        while i >= 0:\n            s += self.stree[i]\n            i &= i + 1\n            i -= 1\n        return s\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        N = len(nums)\n        bit = BIT(N + 1)\n        \n        for i in range(1, N - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                bit.increase(i + 1, 1)\n        \n        ans = []\n        for t, x, y in queries:\n            if t == 1:\n                ans.append(max(bit.total(y) - bit.total(x + 1), 0))\n            else:\n                for i in range(x - 1, x + 1 + 1):\n                    if i - 1 >= 0 and i + 1 < N:\n                        peak = (nums[i] > nums[i - 1] and nums[i] > nums[i + 1])\n                        if peak:\n                            bit.increase(i + 1, -1)\n                    \n                nums[x] = y\n                \n                for i in range(x - 1, x + 1 + 1):\n                    if i - 1 >= 0 and i + 1 < N:\n                        peak = (nums[i] > nums[i - 1] and nums[i] > nums[i + 1])\n                        if peak:\n                            bit.increase(i + 1, 1)\n                \n        return ans",
    "submit_ts": 1718506485.0
}