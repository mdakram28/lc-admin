{
    "username": "MistyDragon10",
    "submission": "class Solution {\nprivate:\n    bool bfs(vector<vector<int>>& grp, int s, int t1, int t2, int n) {\n        queue<int> q;\n        vector<int> v(n + 4, 0);\n        q.push(s);\n        v[s] = 1;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int w : grp[u]) {\n                if (!v[w]) {\n                    q.push(w);\n                    v[w] = 1;\n                }\n            }\n        }\n        return v[t1] || v[t2];\n    }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<int> r(n);\n        vector<vector<int>> grp(n + 4);\n        vector<pair<int, int>> c(n);\n        for (int i = 0; i < n; ++i) {\n            c[i] = {circles[i][0], circles[i][1]};\n            r[i] = circles[i][2];\n        }\n        for (int i = 0; i < n; ++i) {\n            if (c[i].first <= r[i]) {\n                grp[n].push_back(i);\n                grp[i].push_back(n);\n            }\n            if (X - c[i].first <= r[i]) {\n                grp[n + 2].push_back(i);\n                grp[i].push_back(n + 2);\n            }\n            if (c[i].second <= r[i]) {\n                grp[n + 1].push_back(i);\n                grp[i].push_back(n + 1);\n            }\n            if (Y - c[i].second <= r[i]) {\n                grp[n + 3].push_back(i);\n                grp[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double dis = sqrt(pow(c[i].first - c[j].first, 2) +\n                                  pow(c[i].second - c[j].second, 2));\n                int sum = r[i] + r[j];\n                if (sum >= dis) {\n                    grp[i].push_back(j);\n                    grp[j].push_back(i);\n                }\n            }\n        }\n        return !bfs(grp, n, n + 1, n + 2, n + 4) &&\n               !bfs(grp, n + 3, n + 2, n + 1, n + 4);\n    }\n};\n",
    "submit_ts": "1722138287",
    "subm_id": "1335786835"
}