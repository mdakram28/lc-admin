{
    "username": "quyse",
    "submission": "template <typename T>\nstruct MinTree\n{\n  int n;\n  vector<T> q;\n  T inf;\n  MinTree(int m, T inf = {}) : inf(inf)\n  {\n    for(n = 2; n < m; n *= 2);\n    q.assign(n * 2 - 1, inf);\n  }\n  T get(int i) const\n  {\n    return q[i + n - 1];\n  }\n  void set(int i, T t)\n  {\n    i += n - 1;\n    q[i] = t;\n    do\n    {\n      i = (i - 1) / 2;\n      q[i] = min(q[i * 2 + 1], q[i * 2 + 2]);\n    }\n    while(i > 0);\n  }\n  T range(int l, int r) const\n  {\n    return range(l, r, 0, 0, n);\n  }\n  T range(int l, int r, int i, int a, int b) const\n  {\n    if(a >= l && b <= r) return q[i];\n    if(a >= r || b <= l) return inf;\n    int m = (a + b) / 2;\n    return min(range(l, r, i * 2 + 1, a, m), range(l, r, i * 2 + 2, m, b));\n  }\n};\n\nint const inf = 0x7fffffff;\n\nstruct Node\n{\n  int e[26];\n  int cost = 0;\n  Node()\n  {\n    fill(e, e + 26, -1);\n  }\n};\n\nclass Solution {\npublic:\n  int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.length();\n\n    vector<Node> trie;\n    trie.push_back({});\n    for(int i = 0; i < (int)words.size(); ++i)\n    {\n      auto const& w = words[i];\n      int u = 0;\n      for(int j = 0; j < w.length(); ++j)\n      {\n        int c = w[j] - 'a';\n        if(trie[u].e[c] < 0)\n        {\n          trie[u].e[c] = trie.size();\n          trie.push_back({});\n        }\n        u = trie[u].e[c];\n      }\n      if(trie[u].cost == 0 || trie[u].cost > costs[i])\n      {\n        trie[u].cost = costs[i];\n      }\n    }\n\n    MinTree<tuple<bool, int, int>> d(n + 1, { false, inf, -1 });\n    for(int i = 0; i <= n; ++i)\n      d.set(i, {false, inf, i});\n    d.set(0, { false, 0, 0 });\n    for(;;)\n    {\n      auto [iflag, id, i] = d.range(0, n + 1);\n      if(iflag || id >= inf) break;\n      if(i == n) break;\n      d.set(i, {true, id, i});\n\n      int u = 0;\n      for(int j = i; j < n; ++j)\n      {\n        int c = target[j] - 'a';\n        if(trie[u].e[c] < 0) break;\n        u = trie[u].e[c];\n        if(trie[u].cost > 0)\n        {\n          int t = j + 1;\n          auto [tflag, td, ti] = d.get(t);\n          if(tflag || id + trie[u].cost >= td) continue;\n          d.set(t, {false, id + trie[u].cost, t});\n        }\n      }\n    }\n    int res = get<1>(d.get(n));\n    return res < inf ? res : -1;\n  }\n};",
    "submit_ts": "1720322057",
    "subm_id": "1312339519"
}