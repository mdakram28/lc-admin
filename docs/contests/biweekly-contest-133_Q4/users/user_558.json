{
    "username": "pranshujain0111",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n/* clang-format off */\n\n/* TYPES  */\n#define ll long long\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define vi vector<int>\n#define vll vector<long long>\n#define mii map<int, int>\n#define si set<int>\n#define sc set<char>\n\n/* FUNCTIONS */\n#define f(i,s,e) for(long long int i=s;i<e;i++)\n#define cf(i,s,e) for(long long int i=s;i<=e;i++)\n#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)\n#define pb push_back\n#define eb emplace_back\n\n/* PRINTS */\ntemplate <class T>\nvoid print_v(vector<T> &v) { cout << \"{\"; for (auto x : v) cout << x << \",\"; cout << \"\\b}\"; }\n\n/* UTILS */\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define read(type) readInt<type>()\nll min(ll a,int b) { if (a<b) return a; return b; }\nll min(int a,ll b) { if (a<b) return a; return b; }\nll max(ll a,int b) { if (a>b) return a; return b; }\nll max(int a,ll b) { if (a>b) return a; return b; }\nll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }\nll lcm(ll a,ll b) { return a/gcd(a,b)*b; }\nstring to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }\nstring to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }\nbool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }\nvoid yes() { cout<<\"YES\\n\"; }\nvoid no() { cout<<\"NO\\n\"; }\n\nclass Solution {\nprivate:\n    const int MI = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> requirementMap = createRequirementMap(requirements);\n\n        vector<vector<ll>> permCounts = calculatePermutationCounts(n, requirementMap);\n\n        int result = calculateResult(permCounts, n);\n\n        return result;\n    }\n\nprivate:\n    unordered_map<int, int> createRequirementMap(vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        return reqMap;\n    }\n\n    vector<vector<ll>> calculatePermutationCounts(int n, unordered_map<int, int>& reqMap) {\n        vector<vector<ll>> permCounts(n + 1, vector<ll>(MI + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MI; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MI; ++inv) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        return permCounts;\n    }\n\n    int calculateResult(vector<vector<ll>>& permCounts, int n) {\n        ll result = 0;\n        for (int inv = 0; inv <= MI; ++inv) {\n            result = (result + permCounts[n][inv]) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070358.0
}