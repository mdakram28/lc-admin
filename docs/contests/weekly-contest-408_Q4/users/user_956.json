{
    "username": "vishnu_1264",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>&graph, int s, int t1, int t2, int n) {\n        vector<bool>visited(n+4,false);\n        queue<int>q;\n        q.push(s);\n        visited[s]=true;\n        while(!q.empty()){\n            int x = q.front(); q.pop();\n            for(int it:graph[x]){\n                if(!visited[it]){\n                    q.push(it);\n                    visited[it]=true;\n                }\n            }\n        }\n        if(visited[t1] || visited[t2]) return 1;\n        return 0;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<pair<pair<int,int>,int>>v(n);\n        vector<vector<int>>graph(n+4);\n        for(int i=0;i<n;i++){\n            v[i].first.first = circles[i][0];\n            v[i].first.second = circles[i][1];\n            v[i].second = circles[i][2];\n        }\n        for(int i=0;i<n;i++){\n            if(v[i].first.first <= v[i].second){\n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if(v[i].first.second <= v[i].second){\n                graph[n+1].push_back(i);\n                graph[i].push_back(n+1);\n            }\n            if(X-v[i].first.first <= v[i].second){\n                graph[n+2].push_back(i);\n                graph[i].push_back(n+2);\n            }\n            if(Y-v[i].first.second <= v[i].second) {\n                graph[n+3].push_back(i);\n                graph[i].push_back(n+3);\n            }\n            for(int j=i+1;j<n;j++){\n                double distance = sqrt(pow(v[i].first.first - v[j].first.first, 2) + \n                    pow(v[i].first.second - v[j].first.second, 2));\n                int rsum = v[i].second + v[j].second;\n                if(rsum >= distance){\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        int ans = 0;\n        int b1 = bfs(graph,n,n+1,n+2,n+4), b2=bfs(graph,n+3,n+2,n+1,n+4);\n        ans = max({ans,b1,b2});\n        if(ans>0) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722138801",
    "subm_id": "1335800030"
}