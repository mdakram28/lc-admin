{
    "username": "qian-zhuo-bei-shang",
    "submission": "class Solution(object):\n    def minimumDistance(self, points):\n        \"\"\"\n        :type points: List[List[int]]\n        :rtype: int\n        \"\"\"\n\n        m=len(points)\n        max_plus = min_plus = max_minus = min_minus = None\n        a=b=c=d=-1\n        for i in range(m):\n            item = points[i]\n            x = item[0]\n            y = item[1]\n            if max_plus is None or x + y > max_plus:\n                max_plus = x + y\n                a=i\n            if min_plus is None or x + y < min_plus:\n                min_plus = x + y\n                b=i\n            if max_minus is None or x - y > max_minus:\n                max_minus = x - y\n                c=i\n            if min_minus is None or x - y < min_minus:\n                min_minus = x - y\n                d=i\n\n        def maxManhattanDistance(k):\n            max_plus = min_plus = max_minus = min_minus = None\n\n            for i in range(m):\n                if i == k:\n                    continue\n                item = points[i]\n                x = item[0]\n                y = item[1]\n                if max_plus is None or x + y > max_plus:\n                    max_plus = x + y\n                if min_plus is None or x + y < min_plus:\n                    min_plus = x + y\n                if max_minus is None or x - y > max_minus:\n                    max_minus = x - y\n                if min_minus is None or x - y < min_minus:\n                    min_minus = x - y\n            return max(max_plus - min_plus, max_minus - min_minus)\n\n        return min(maxManhattanDistance(a),maxManhattanDistance(b),maxManhattanDistance(c),maxManhattanDistance(d))\n\n"
}