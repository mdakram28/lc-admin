{
    "username": "rastsislau",
    "submission": "class Solution {\npublic:\n\nclass SegmentTree {\n    vector<int> tree;\n    vector<int> arr;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int val) {\n        if (start == end) {\n            arr[idx] = val;\n            tree[node] = val;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, val);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, val);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_sum = query(2 * node + 1, start, mid, L, R);\n        int right_sum = query(2 * node + 2, mid + 1, end, L, R);\n        return left_sum + right_sum;\n    }\n\npublic:\n    SegmentTree(vector<int>& input_arr) {\n        arr = input_arr;\n        n = arr.size();\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    void set(int idx, int val) {\n        if (idx < 0 || idx >= n)\n        {\n            return;\n        }\n        update(0, 0, n - 1, idx, val);\n    }\n\n    int sum(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n};\n    \n    int isPeak(vector<int>& nums, int i)\n    {\n        //cout << \"isPeak \" << nums.size() << \" \" << i << endl;\n        if (i<=0 || (i >= (nums.size()-1)))\n        {\n            return 0;\n        }\n        //cout << \"isPeak2 \" << nums.size() << \" \" << i << endl;\n        return (nums[i] > nums[i-1] && nums[i] > nums[i+1]) ? 1 : 0;\n    }\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector <int> peaks(n,0);\n        for (int i=1;i<n-1;i++)\n        {\n            peaks[i] = isPeak(nums,i);\n        }\n        SegmentTree peaks_sg(peaks);\n        \n        \n        vector<int> result;\n        \n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                \n                int l = query[1], r = query[2];\n                l++;\n                r--;\n                if (l > r)\n                {\n                    result.push_back(0);\n                }\n                else\n                {\n                    result.push_back(peaks_sg.sum(l, r));\n                }\n            } else if (query[0] == 2) {\n                int i = query[1], x = query[2];\n                nums[i] = x;\n                //cout << \"hi1\" << endl;\n                peaks_sg.set(i-1, isPeak(nums, i-1));\n                //cout << \"hi2\" << endl;\n                peaks_sg.set(i, isPeak(nums, i));\n                //cout << \"hi3\" << endl;\n                peaks_sg.set(i+1, isPeak(nums, i+1));\n                //cout << \"hi4\" << endl;\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1718508310",
    "subm_id": "1289677612"
}