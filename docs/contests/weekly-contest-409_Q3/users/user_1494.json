{
    "username": "capsicle2",
    "submission": "class SegmentTree {\nprivate:\n    vector<long long> tree, lazySet, lazyAdd;\n    vector<bool> lazyFlag;\n    int n;\n\n    void build(int node, int start, int end, const vector<int>& arr) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid, arr);\n            build(2 * node + 2, mid + 1, end, arr);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void propagate(int node, int start, int end) {\n        if (lazyFlag[node]) {\n            tree[node] = lazySet[node] * (end - start + 1);\n            if (start != end) {\n                lazyFlag[2 * node + 1] = lazyFlag[2 * node + 2] = true;\n                lazySet[2 * node + 1] = lazySet[2 * node + 2] = lazySet[node];\n                lazyAdd[2 * node + 1] = lazyAdd[2 * node + 2] = 0;\n            }\n            lazySet[node] = 0;\n            lazyFlag[node] = false;\n        }\n\n        if (lazyAdd[node] != 0) {\n            tree[node] += lazyAdd[node] * (end - start + 1);\n            if (start != end) {\n                if (!lazyFlag[2 * node + 1]) lazyAdd[2 * node + 1] += lazyAdd[node];\n                if (!lazyFlag[2 * node + 2]) lazyAdd[2 * node + 2] += lazyAdd[node];\n            }\n            lazyAdd[node] = 0;\n        }\n    }\n\n    void updateRangeSet(int node, int start, int end, int l, int r, int value) {\n        propagate(node, start, end);\n        if (start > r || end < l) return;\n\n        if (start >= l && end <= r) {\n            lazyFlag[node] = true;\n            lazySet[node] = value;\n            lazyAdd[node] = 0;\n            propagate(node, start, end);\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        updateRangeSet(2 * node + 1, start, mid, l, r, value);\n        updateRangeSet(2 * node + 2, mid + 1, end, l, r, value);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    void updatePoint(int node, int start, int end, int idx, int value) {\n        propagate(node, start, end);\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updatePoint(2 * node + 1, start, mid, idx, value);\n            } else {\n                updatePoint(2 * node + 2, mid + 1, end, idx, value);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    long long queryRange(int node, int start, int end, int l, int r) {\n        propagate(node, start, end);\n        if (start > r || end < l) return 0;\n        if (start >= l && end <= r) return tree[node];\n\n        int mid = (start + end) / 2;\n        long long left = queryRange(2 * node + 1, start, mid, l, r);\n        long long right = queryRange(2 * node + 2, mid + 1, end, l, r);\n        return left + right;\n    }\n\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        lazySet.assign(4 * n, 0);\n        lazyAdd.assign(4 * n, 0);\n        lazyFlag.assign(4 * n, false);\n        build(0, 0, n - 1, arr);\n    }\n\n    void updateRangeSet(int l, int r, int value) {\n        updateRangeSet(0, 0, n - 1, l, r, value);\n    }\n\n    void updatePoint(int idx, int value) {\n        updatePoint(0, 0, n - 1, idx, value);\n    }\n\n    long long queryRange(int l, int r) {\n        return queryRange(0, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& q) {\n        vector<int> v(n,1),ans;\n        v[0]=0; \n        SegmentTree st(v);\n        for(int i=0;i<q.size();i++)\n        {\n            int l=q[i][0], r=q[i][1]; \n            if(st.queryRange(l,l)==0 && st.queryRange(r,r)==0); // do nothing\n            else\n            {\n                st.updateRangeSet(l+1,r-1,0);\n                st.updatePoint(r,1);\n            }\n            ans.push_back(st.queryRange(0,n-1));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743093",
    "subm_id": "1343784172"
}