{
    "username": "MeetBrahmbhatt",
    "submission": "const int inf = 1e9;\nclass Solution {\npublic:\n    int maximumLength(vector<int>& v, int k) {\n        int n = (int) v.size();\n        \n        vector<int> t = v;\n        sort(begin(t), end(t));\n        t.erase(unique(begin(t), end(t)), end(t));\n        \n        for (int i = 0; i < n; i++) {\n            v[i] = (int) (lower_bound(begin(t), end(t), v[i]) - t.begin());\n        }\n        \n        int sz = (int) t.size();\n        multiset<int> st[k + 1];\n        vector<vector<int>> dp(sz, vector<int>(k + 1, -inf));\n        \n        auto update = [&] (int id, int K, int val) {\n            if (dp[id][K] >= val) {\n                return;\n            }\n            if (dp[id][K] != -inf) {\n                st[K].erase(st[K].find(dp[id][K]));\n            }\n            dp[id][K] = val;\n            st[K].insert(val);\n        };\n        \n        auto get = [&] (int K, int id) {\n            if (st[K].empty()) {\n                return -inf;\n            }\n            if (dp[id][K] != -inf) {\n                st[K].erase(st[K].find(dp[id][K]));\n            }\n            int res = -inf;\n            if (!st[K].empty()) {\n                res = *st[K].rbegin();\n            } \n            if (dp[id][K] != -inf) {\n                st[K].insert(dp[id][K]);\n            }\n            return res;\n        };\n        \n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                int cur = (dp[v[i]][j] == -inf ? -inf : dp[v[i]][j] + 1);\n                if (j) {\n                    int r = get(j - 1, v[i]);\n                    if (r != -inf) {\n                        cur = max(cur, r + 1);\n                    }\n                }\n                update(v[i], j, cur);\n                ans = max(ans, dp[v[i]][j]);\n            }\n            update(v[i], 0, 1);\n            ans = max(ans, dp[v[i]][0]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717861007.0
}