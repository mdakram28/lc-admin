{
    "username": "AtulKeshari",
    "submission": "#define rep(i,n) for(int i=0;i<n;i++)\nclass Node {\n    public:\n        unordered_map<char, Node*> children;\n        vector<pair<int, int>> wordEnds;\n\n        Node() {}\n    };\n\n    class Trie {\n    public:\n        Node* root;\n        Trie() { root = new Node(); }\n\n        void insert(int index, string& word, int cost) {\n            Node* node = root;\n            for (char c : word) {\n                if (node->children.find(c) == node->children.end())\n                    node->children[c] = new Node();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\nclass Solution {\npublic:\nint solve(string target, vector<string>& words, vector<int>& costs){\n    int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        int index = 0;\n        for (auto& word : words) {\n            trie.insert(index, word, costs[index++]);\n        }\n\n        rep(i,n) {\n            if (dp[i] != INT_MAX) {\n                Node* node = trie.root;\n                for (int j = i; j < n; ++j) {\n                    if (node->children.find(target[j]) == node->children.end()){\n                        goto x;\n                    }\n                    node = node->children[target[j]];\n                    for (auto [val,fr]: node->wordEnds) {\n                        int len=words[val].size();\n                        if (i + words[val].size() <= n) {\n                            dp[i + len] = min(dp[i + len], dp[i] + fr);\n                        }\n                    }\n                }\n            }\n            x:;\n        }\n        if(dp[n]>=INT_MAX)return -1;\n    return dp[n];\n}\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        return solve(target,words,costs);\n    }\n};",
    "submit_ts": "1720323072",
    "subm_id": "1312366624"
}