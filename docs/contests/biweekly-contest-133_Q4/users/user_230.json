{
    "username": "Quar",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        \n        dct = dict(requirements)\n        MODULO = 10**9 + 7\n        \n        nmax = [(n - 1) * n // 2] * n\n        \n        for i in reversed(range(n)):\n            if i in dct:\n                nmax[i] = min(nmax[i], dct[i])\n            if i + 1 < n:\n                nmax[i] = min(nmax[i], nmax[i + 1])\n        \n        \n        @cache\n        def dp(i, ninv):\n            if i >= n:\n                return 1\n            if i in dct:\n                if ninv <= dct[i] and dct[i] - ninv <= i:\n                    return dp(i + 1, dct[i])\n                else:\n                    return 0\n            else:\n                return sum(dp(i + 1, ninv + j) for j in range(min(i, nmax[i] - ninv) + 1)) % MODULO\n        \n        return dp(0, 0)\n                ",
    "submit_ts": 1719069547.0
}