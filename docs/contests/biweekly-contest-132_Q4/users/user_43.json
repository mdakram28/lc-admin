{
    "username": "didwhddks",
    "submission": "const int inf = -2E8;\n\ntemplate <typename Info>\nstruct SegTree {\n    int n;\n    vector<Info> info;\n \n    SegTree(int n = 0) {\n        init(n);\n    }\n \n    void init(int n) {\n        this->n = n;\n        info.assign(4 * n, Info());\n    }\n \n    void pull(int i) {\n        info[i] = info[2 * i] + info[2 * i + 1];\n    }\n \n    void set(int idx, Info _info, int i, int L, int R) {\n        if (L == R) {\n            info[i] = info[i] + _info;\n            return;\n        }\n        int mid = (L + R) / 2;\n        if (idx <= mid) {\n            set(idx, _info, 2 * i, L, mid);\n        } else {\n            set(idx, _info, 2 * i + 1, mid + 1, R);\n        }\n        pull(i);\n    }\n\n    void set(int idx, Info _info) {\n        set(idx, _info, 1, 0, n - 1);\n    }\n \n    Info rangeQuery(int qL, int qR, int i, int L, int R) {\n        if (R < qL || qR < L) {\n            return Info();\n        }\n        if (qL <= L && R <= qR) {\n            return info[i];\n        }\n        int mid = (L + R) / 2;\n        Info a = rangeQuery(qL, qR, 2 * i, L, mid);\n        Info b = rangeQuery(qL, qR, 2 * i + 1, mid + 1, R);\n        return a + b;\n    }\n\n    Info rangeQuery(int qL, int qR) {\n        return rangeQuery(qL, qR, 1, 0, n - 1);\n    }\n};\n\nstruct Info {\n    int mx;\n    Info(int x = inf) {\n        mx = x;\n    }\n    Info operator+(const Info& b) {\n        Info c;\n        c.mx = max(mx, b.mx);\n        return c;\n    }\n};\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        const int n = nums.size();\n        vector dp(n, vector<int>(k + 1, inf));\n        \n        vector<int> a = nums;\n        sort(a.begin(), a.end());\n        a.erase(unique(a.begin(), a.end()), a.end());\n        \n        auto get = [&](int x) -> int {\n            return lower_bound(a.begin(), a.end(), x) - a.begin();\n        };\n        \n        const int m = a.size();\n        vector<SegTree<Info>> seg(k + 1, SegTree<Info>(m));\n        \n        int ans = inf;\n        for (int i = 0; i < n; ++i) {\n            dp[i][0] = 1;\n            int idx = get(nums[i]);\n            for (int j = 0; j < k + 1; ++j) {\n                if (j) {\n                    dp[i][j] = max(dp[i][j], max(seg[j - 1].rangeQuery(0, idx - 1).mx, seg[j - 1].rangeQuery(idx + 1, m - 1).mx) + 1);\n                }\n                dp[i][j] = max(dp[i][j], seg[j].rangeQuery(idx, idx).mx + 1);\n                ans = max(ans, dp[i][j]);\n            }\n            for (int j = 0; j < k + 1; ++j) {\n                seg[j].set(idx, Info(dp[i][j]));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717859335",
    "subm_id": "1281718752"
}