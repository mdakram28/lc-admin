{
    "username": "Saket_ahlawat",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\n#include <iostream>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> tree(n);\n\n        // Build the tree\n        for (auto& edge : edges) {\n            int u = edge[0];\n            int v = edge[1];\n            tree[u].push_back(v);\n            tree[v].push_back(u);\n        }\n\n        vector<int> depth(n);\n        vector<int> dp1(n, 0), dp2(n, 0);\n\n        // First DFS to calculate the maximum depths (dp1 and dp2)\n        function<void(int, int)> dfs1 = [&](int node, int parent) {\n            for (int neighbor : tree[node]) {\n                if (neighbor == parent) continue;\n                dfs1(neighbor, node);\n                int val = depth[neighbor] + (neighbor % 2 == 0 ? 2 : 1);\n                if (val > dp1[node]) {\n                    dp2[node] = dp1[node];\n                    dp1[node] = val;\n                } else if (val > dp2[node]) {\n                    dp2[node] = val;\n                }\n            }\n            depth[node] = dp1[node];\n        };\n\n        dfs1(0, -1);\n\n        vector<int> result(n);\n\n        // Second DFS to calculate the re-rooted maximum depths\n        function<void(int, int)> dfs2 = [&](int node, int parent) {\n            for (int neighbor : tree[node]) {\n                if (neighbor == parent) continue;\n\n                int use_depth = (dp1[node] == depth[neighbor] + (neighbor % 2 == 0 ? 2 : 1)) ? dp2[node] : dp1[node];\n                int val = (node % 2 == 0 ? use_depth + 2 : use_depth + 1);\n\n                if (val > dp1[neighbor]) {\n                    dp2[neighbor] = dp1[neighbor];\n                    dp1[neighbor] = val;\n                } else if (val > dp2[neighbor]) {\n                    dp2[neighbor] = val;\n                }\n\n                dfs2(neighbor, node);\n            }\n            result[node] = dp1[node];\n        };\n\n        dfs2(0, -1);\n\n        return result;\n    }\n};",
    "submit_ts": "1722700751",
    "subm_id": "1343251710"
}