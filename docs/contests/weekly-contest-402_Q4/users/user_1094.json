{
    "username": "saty_yad",
    "submission": "class Solution {\npublic:\n      vector<int> nums;\n    vector<int> isPeak;\n    vector<int> BIT;\n    int n;\n    \n    // Function to check if an element at index is a peak\n    bool isPeakAt(int index) {\n        if (index <= 0 || index >= n - 1) return false;\n        return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n    }\n\n    // Function to update the BIT\n    void updateBIT(int index, int delta) {\n        for (; index < BIT.size(); index += index & -index) {\n            BIT[index] += delta;\n        }\n    }\n\n    // Function to query the BIT\n    int queryBIT(int index) {\n        int sum = 0;\n        for (; index > 0; index -= index & -index) {\n            sum += BIT[index];\n        }\n        return sum;\n    }\n\n    // Function to initialize the nums and peak status\n    void initialize(vector<int>& inputNums) {\n        nums = inputNums;\n        n = nums.size();\n        isPeak.assign(n, 0);\n        BIT.assign(n + 1, 0);\n        \n        for (int i = 1; i < n - 1; ++i) {\n            if (isPeakAt(i)) {\n                isPeak[i] = 1;\n                updateBIT(i + 1, 1);\n            }\n        }\n    }\n\n    // Function to update a value and adjust peak status\n    void update(int index, int value) {\n        nums[index] = value;\n        // Update the peak status and BIT for the index and its neighbors\n        for (int i = max(1, index - 1); i <= min(n - 2, index + 1); ++i) {\n            int wasPeak = isPeak[i];\n            isPeak[i] = isPeakAt(i) ? 1 : 0;\n            if (wasPeak != isPeak[i]) {\n                updateBIT(i + 1, isPeak[i] - wasPeak);\n            }\n        }\n    }\n\n    // Function to count peaks in a range\n    int countPeaks(int left, int right) {\n        if (left >= right - 1) return 0; // No peaks possible in such a small range\n        return queryBIT(right) - queryBIT(left + 1);\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n         initialize(nums);\n        vector<int> results;\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                results.push_back(countPeaks(query[1], query[2]));\n            } else if (query[0] == 2) {\n                update(query[1], query[2]);\n            }\n        }\n        return results;\n    }\n};",
    "submit_ts": 1718508019.0
}