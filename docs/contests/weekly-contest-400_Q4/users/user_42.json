{
    "username": "_priyanshu_101_",
    "submission": "template <typename T, class F = function<T(const T&, const T&)>>\nclass SparseTable {\n public:\n  int n;\n  vector<vector<T>> mat;\n  F func;\n\n  SparseTable(const vector<T>& a, const F& f) : func(f) {\n    n = static_cast<int>(a.size());\n    int max_log = 32 - __builtin_clz(n);\n    mat.resize(max_log);\n    mat[0] = a;\n    for (int j = 1; j < max_log; j++) {\n      mat[j].resize(n - (1 << j) + 1);\n      for (int i = 0; i <= n - (1 << j); i++) {\n        mat[j][i] = func(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);\n      }\n    }\n  }\n\n  T get(int from, int to) const {\n    int lg = 32 - __builtin_clz(to - from + 1) - 1;\n    return func(mat[lg][from], mat[lg][to - (1 << lg) + 1]);\n  }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SparseTable <int> sb(nums, [&](int a, int b) {\n            return (a & b);\n        });\n        int ans = INT_MAX, n = nums.size();\n        for (int i = 0; i < n; i ++) {\n            if (nums[i] <= k) {\n                ans = min(ans, k - nums[i]);\n            }\n            else {\n                // nums[i] > k\n                int l = i, r = n - 1;\n                while (l <= r) {\n                    int mid = (l + r) >> 1;\n                    int have = sb.get(i, mid);\n                    ans = min(ans, abs(have - k));\n                    if (have > k) {\n                        l = mid + 1;\n                    }\n                    else {\n                        r = mid - 1;\n                    }\n                }\n                \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717295934.0
}