{
    "username": "plus2047",
    "submission": "const int N = 26, INF = INT_MAX;\n\nstruct TNode {\n    TNode *child[N];\n    int cost = INF;\n    TNode() {\n        fill(child, child+N, nullptr);\n    }\n};\n\nclass Solution {\n    void insert(TNode* node, string word, int cost) {\n        for(char c: word) {\n            int idx = c - 'a';\n            if(node->child[idx] == nullptr) {\n                node->child[idx] = new TNode();\n            }\n            node = node->child[idx];\n        }\n        node->cost = min(node->cost, cost);\n    }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int m = target.size(), n = words.size();\n        TNode* root = new TNode();\n        for(int i = 0; i < n; i++) {\n            reverse(words[i].begin(), words[i].end());\n            insert(root, words[i], costs[i]);\n        }\n\n        vector<int> dp(m + 1, INF);\n        dp[m] = 0;\n        for(int i = m - 1; i >= 0; i--) {\n            if(dp[i + 1] < INF) {\n                int j = i;\n                TNode *curr = root;\n                while(j >= 0 and curr->child[target[j] - 'a'] != nullptr) {\n                    curr = curr->child[target[j] - 'a'];\n                    if(curr->cost < INF) {\n                        dp[j] = min(dp[j], curr->cost + dp[i + 1]);\n                    }\n                    j--;\n                }\n            }\n        }\n        return dp[0] < INF ? dp[0] : -1;\n    }\n};",
    "submit_ts": "1720322507",
    "subm_id": "1312351731"
}