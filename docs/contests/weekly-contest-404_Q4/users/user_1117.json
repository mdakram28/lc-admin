{
    "username": "akhilkr0104",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj)\n    {\n    int n = adj.size();\n    vector<int> distance(n, -1);\n    queue<int> q;\n    q.push(start);\n    distance[start] = 0;\n    int farthestNode = start;\n    int maxDistance = 0;\n    \n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (int it : adj[node]) {\n            if (distance[it] == -1) {\n                distance[it] = distance[node] + 1;\n                q.push(it);\n                if (distance[it] > maxDistance) {\n                    maxDistance = distance[it];\n                    farthestNode = it;\n                }\n            }\n        }\n    }\n    return {farthestNode, maxDistance};\n    }\n    int find(const vector<vector<int>>& adj) \n    {\n        pair<int, int> ans1 = bfs(0, adj);\n        pair<int, int> ans2 = bfs(ans1.first, adj);\n        return ans2.second;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n    \n        vector<vector<int>> adj1(n), adj2(m);\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        int dia1 = find(adj1);\n        int dia2 = find(adj2);\n        \n        return max({dia1, dia2, (dia1 + 1) / 2 + (dia2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": "1719718857",
    "subm_id": "1304427796"
}