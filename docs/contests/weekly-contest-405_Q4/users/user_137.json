{
    "username": "mohammad515253",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        bool isEnd;\n        TrieNode *children[26];\n        int cost;\n        \n        TrieNode()\n        {\n            isEnd = false;\n            \n            for(int it = 0; it < 26; it++)\n            {\n                children[it] = nullptr;\n            }\n            \n            cost = INT_MAX;\n        }\n    };\n    \n    \n    long long dp[50001];\n    \n    long long findMinCost(int currIdx, string &target, TrieNode *rootNode)\n    {\n        if(currIdx >= target.size())\n        {\n            return 0;\n        }\n        \n        if(dp[currIdx] != -1LL)\n        {\n            return dp[currIdx];\n        }\n        \n        TrieNode *currNode = rootNode;\n        long long ans = INT_MAX;\n        \n        // cout<<currIdx<<endl;\n        \n        for(int it = currIdx; it < target.size(); it++)\n        {\n            if(currNode->children[target[it] - 'a'] == nullptr)\n                break;\n            \n            currNode = currNode->children[target[it] - 'a'];\n            \n            if(currNode->isEnd)\n            {\n                ans = min(ans, currNode->cost + findMinCost(it + 1, target, rootNode));\n            }\n        }\n        \n        return (dp[currIdx] = ans);\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode *rootNode = new TrieNode(), *currNode;\n        \n        for(int it = 0; it < words.size(); it++)\n        {\n            currNode = rootNode;\n            \n            for(char &ch : words[it])\n            {\n                if(currNode->children[ch - 'a'] == nullptr)\n                {\n                    currNode->children[ch - 'a'] = new TrieNode();\n                }\n                \n                currNode = currNode->children[ch - 'a'];\n            }\n            \n            currNode->isEnd = true;\n            currNode->cost = min(currNode->cost, costs[it]);\n        }\n        \n        memset(dp, -1LL, sizeof(dp));\n        \n        long long ret = findMinCost(0, target, rootNode);\n        \n        return (ret == INT_MAX ? (-1) : (ret));\n    }\n};",
    "submit_ts": "1720321186",
    "subm_id": "1312315921"
}