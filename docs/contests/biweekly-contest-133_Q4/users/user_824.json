{
    "username": "abhinav_0804",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define ff first\n#define ss second\n#define pb push_back\n#define ppb pop_back\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define MAX(x) *max_element(all(x))\n#define MIN(x) *min_element(all(x))\n#define SUM(x) accumulate(all(x), 0LL)\n\n/* --------------------------------------------------------- TEMPLATES -------------------------------------------------------------- */\n\ntemplate<typename T> using min_heap = priority_queue<T, vector<T>, greater<T>>;\ntemplate<typename T> using max_heap = priority_queue<T>;\ntemplate<typename T> T ceil(T x, T y) {return (x >= 0 ? (x + y - 1) / y : x / y);}\ntemplate<typename T> T floor(T x, T y) {return x / y - ((x ^ y) < 0 and x % y);}\ntemplate<typename T> T gcd(T x, T y) {return (x ? gcd(y % x, x) : y);}\ntemplate<typename T> T lcm(T x, T y) {return x / gcd(x, y) * y;}\ntemplate<typename P, typename Q> P bpow(P x, Q y) {P res = 1; while (y > 0) {if (y & 1) res *= x; y = y >> 1, x *= x;} return res;}\n\n/* --------------------------------------------------------- UNIVERSAL CONSTANTS --------------------------------------------------- */\n\nconst int mod = 1e9 + 7;// 998244353LL; // 10000000069LL; // 3006703054056749LL;\n\n/* ------------------------------------------------------- SOLUTION TO THE PROBLEM ------------------------------------------------- */\n\nclass Solution {\npublic:\n    long long dp[310][410];\n    int numberOfPermutations(int n, vector<vector<int>>& arr) {\n        sort(all(arr));\n        memset(dp,0LL,sizeof(dp));\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 401; j++) {\n                for (int k = 0; k < n; k++) {\n                    if(k>=i) break;\n                    if (j >= k) dp[i][j] = ((dp[i][j] % mod) + (dp[i - 1][j - k] % mod)) % mod;\n                }\n            }\n\n            for (int j = 0; j < (int) arr.size(); j++) {\n                if (arr[j][0] == i - 1) {\n                    for (int k = 0; k < 401; k++) {\n                        if (k != arr[j][1]) dp[i][k] = 0;\n                    }\n                }\n            }\n        }\n        long long ans = 0;\n        for (int i = 0; i < 401; i++) ans += dp[n][i];\n        ans %= mod;\n        return ans;\n\n\n    }\n};",
    "submit_ts": 1719071319.0
}