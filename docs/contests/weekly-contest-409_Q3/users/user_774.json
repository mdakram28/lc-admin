{
    "username": "hmetao",
    "submission": " class Solution {\n        public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n            int[] ans = new int[queries.length];\n            BitIndexTree b1 = new BitIndexTree(n);\n            BitIndexTree b2 = new BitIndexTree(n);\n            for (int i = 0; i < n; i++) {\n                b1.add(i, i, n - 1 - i);\n            }\n            int[] cnt = new int[n];\n            for (int i = 0; i < n; i++) {\n                cnt[i] = i + 1;\n            }\n            for (int i = 0; i < queries.length; i++) {\n                int[] query = queries[i];\n                int l = query[0];\n                int r = query[1];\n                if (b2.query(l) == 0 && cnt[l] < r) {\n                    int dis = b1.query(l) - (1 + b1.query(r));\n                    b1.add(0, l, -dis);\n                    cnt[l] = r;\n                }\n                if (l + 1 <= r - 1) b2.add(l + 1, r - 1, 1);\n                ans[i] = b1.query(0);\n            }\n\n            return ans;\n        }\n\n        class BitIndexTree {\n            long[] trie;\n            int n;\n\n            public BitIndexTree(int n) {\n                this.n = n;\n                trie = new long[n + 1];\n            }\n\n            public int lowBit(int x) {\n                return x & (-x);\n            }\n\n            public void add(int l, int r, int nums) {\n                l++;\n                r++;\n                for (int i = l; i <= n; i += lowBit(i)) {\n                    trie[i] += nums;\n                }\n                for (int i = r + 1; i <= n; i += lowBit(i)) {\n                    trie[i] -= nums;\n                }\n            }\n\n\n            public int query(int index) {\n                index++;\n                int ans = 0;\n                for (int i = index; i >= 1; i -= lowBit(i)) ans += trie[i];\n                return ans;\n            }\n        }\n    }",
    "submit_ts": "1722743033",
    "subm_id": "552348369"
}