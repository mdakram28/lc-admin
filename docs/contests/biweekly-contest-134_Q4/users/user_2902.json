{
    "username": "kaushiki_03",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& array, int target) {\n        int size = array.size();\n        long long total = 0;\n        unordered_map<long long, long long> previousResults;\n\n        for (int index = 0; index < size; ++index) {\n            unordered_map<long long, long long> currentResults; \n            // Check if the current element itself is equal to target\n            if (array[index] == target) {\n                ++total;\n            }\n            currentResults[array[index]] += 1; // Start with the current element itself\n\n            // Update total and currentResults based on previousResults\n            for (auto& [value, frequency] : previousResults) {\n                long long newAndResult = value & array[index];\n                if (newAndResult == target) {\n                    total += frequency;\n                }\n                currentResults[newAndResult] += frequency;\n            }\n            \n            previousResults = move(currentResults); // Move currentResults to previousResults\n        }\n\n        return total;\n    }\n};\n",
    "submit_ts": "1720278617",
    "subm_id": "1311716921"
}