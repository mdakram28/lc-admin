{
    "username": "shaswatgusain1",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost = INT_MAX;\n};\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = min(node->cost, cost); \n    }\n    TrieNode* getRoot() const {\n        return root;\n    }\nprivate:\n    TrieNode* root;\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        initializeTrie(trie, words, costs);\n        return calculateMinimumCost(target, trie);\n    }\nprivate:\n    void initializeTrie(Trie& trie, const vector<string>& words, const vector<int>& costs) {\n        for (size_t i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n    }\n    int calculateMinimumCost(const string& target, const Trie& trie) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            updateDPForPosition(i, target, trie, dp);\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n    void updateDPForPosition(int start, const string& target, const Trie& trie, vector<int>& dp) {\n        TrieNode* node = trie.getRoot();\n        int n = target.size();\n        for (int j = start; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) {\n                break;\n            }\n            node = node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[start] + node->cost);\n            }\n        }\n    }\n};",
    "submit_ts": "1720324599",
    "subm_id": "1312403479"
}