{
    "username": "balkishan_mandal",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h_index = 0, v_index = 0;\n        long long h_pieces = 1, v_pieces = 1;\n        long long total_cost = 0;\n        \n       \n        while (h_index < horizontalCut.size() && v_index < verticalCut.size()) {\n            if (horizontalCut[h_index] >= verticalCut[v_index]) {\n                total_cost += static_cast<long long>(horizontalCut[h_index]) * v_pieces;\n                ++h_index;\n                ++h_pieces;\n            } else {\n                total_cost += static_cast<long long>(verticalCut[v_index]) * h_pieces;\n                ++v_index;\n                ++v_pieces;\n            }\n        }\n        \n        \n        while (h_index < horizontalCut.size()) {\n            total_cost += static_cast<long long>(horizontalCut[h_index]) * v_pieces;\n            ++h_index;\n            ++h_pieces;\n        }\n        \n        \n        while (v_index < verticalCut.size()) {\n            total_cost += static_cast<long long>(verticalCut[v_index]) * h_pieces;\n            ++v_index;\n            ++v_pieces;\n        }\n        \n        return total_cost;\n    }\n};\n",
    "submit_ts": "1720925993",
    "subm_id": "1320272657"
}