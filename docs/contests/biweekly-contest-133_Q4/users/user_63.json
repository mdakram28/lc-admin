{
    "username": "frqN2pzkdp",
    "submission": "class Solution {\n    private static final int MOD = 1_000_000_007;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n      \n        Arrays.sort(requirements, (a, b) -> a[0] - b[0]);\n        \n        \n        long[][] dp = new long[n + 1][n * (n - 1) / 2 + 1];\n        dp[0][0] = 1;\n        \n        \n        for (int i = 1; i <= n; i++) {\n           \n            long[] prefixSum = new long[n * (n - 1) / 2 + 1];\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                prefixSum[j] = (j == 0) ? dp[i - 1][j] : (prefixSum[j - 1] + dp[i - 1][j]) % MOD;\n            }\n            \n          \n            for (int j = 0; j <= i * (i - 1) / 2; j++) {\n                dp[i][j] = prefixSum[j];\n                if (j >= i) {\n                    dp[i][j] = (dp[i][j] - prefixSum[j - i] + MOD) % MOD;\n                }\n            }\n            \n          \n            for (int[] req : requirements) {\n                if (req[0] == i - 1) {\n                    for (int j = 0; j <= i * (i - 1) / 2; j++) {\n                        if (j != req[1]) {\n                            dp[i][j] = 0;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        \n        \n        long result = 0;\n        for (int j = 0; j <= n * (n - 1) / 2; j++) {\n            result = (result + dp[n][j]) % MOD;\n        }\n        \n        return (int) result;\n    }\n}",
    "submit_ts": 1719068166.0
}