{
    "username": "abhishekvaish",
    "submission": "class SegmentTree:\n    def __init__(self, vals, func, null):\n        tree = {}\n\n        def _build(l,r):\n            if l == r:\n                tree[l,r] = vals[l]\n                return tree[l,r]\n            m = (l+r) // 2\n            tree[l,r] = func(_build(l,m) , _build(m+1,r))\n            return tree[l,r]\n        \n\n        _build(0,len(vals)-1)\n        self.tree = tree \n        self.func = func \n        self.null = null\n        self.n = len(vals)\n    \n \n    def query(self,x,y):\n        tree = self.tree\n        func = self.func \n        null = self.null\n        n = self.n\n\n        def _query(l,r):\n            if r < x or y < l :\n                # no overlap (x,y)=(1,3)  (l,r)=(5,6)\n                return null \n            if x <= l and r <= y :\n                return tree[l,r]\n            m = (l+r) // 2\n            return func(_query(l,m) , _query(m+1,r))\n\n        return _query(0, n-1)\n\n\n    def update(self, index, val):\n        tree = self.tree\n        func = self.func \n        n = self.n\n        def _update(l,r):\n            if l == r == index :\n                tree[l,r] = val\n                return tree[l,r]\n            \n            m = (l+r) // 2\n            if index <= m :\n                _update(l,m)\n            else:\n                _update(m+1,r)\n\n            tree[l,r] = func(tree[l,m] , tree[m+1,r])\n        \n        _update(0,n-1)\n    \n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        n = len(nums)\n        peaks = [0] * n\n        for i in range(1,n-1):\n            if nums[i-1] < nums[i] > nums[i+1]:\n                peaks[i] = 1\n        \n        def is_peak(i):\n            return 0 < i < n - 1 and nums[i-1] < nums[i] > nums[i+1]\n        \n        st = SegmentTree(peaks, lambda x,y: x+y, 0)\n        res = []\n        for t,l,r in queries:\n            if t == 1:\n                if r-l > 1:\n                    res.append( st.query(l+1,r-1) )\n                else:\n                    res.append(0)\n            else:\n                nums[l] = r\n                \n                if is_peak(l) and peaks[l] == 0:\n                    peaks[l] = 1\n                    st.update(l,1)\n                elif not is_peak(l) and peaks[l] == 1:\n                    peaks[l] = 0\n                    st.update(l,0)\n                \n                if l > 0:\n                    if is_peak(l-1) and peaks[l-1] == 0:\n                        peaks[l-1] = 1\n                        st.update(l-1,1)\n                    elif not is_peak(l-1) and peaks[l-1] == 1:\n                        peaks[l-1] = 0\n                        st.update(l-1,0)\n                \n                if l < n-1:\n                    if is_peak(l+1) and peaks[l+1] == 0:\n                        peaks[l+1] = 1\n                        st.update(l+1,1)\n                    elif not is_peak(l+1) and peaks[l+1] == 1:\n                        peaks[l+1] = 0\n                        st.update(l+1,0)\n                    \n        return res\n        ",
    "submit_ts": 1718507519.0
}