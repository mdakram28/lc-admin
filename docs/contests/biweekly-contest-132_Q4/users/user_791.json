{
    "username": "211FA04639",
    "submission": "def is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef is_armstrong(number):\n    \"\"\"Check if a number is an Armstrong number.\"\"\"\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(number)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Calculate the sum of each digit raised to the power of num_digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number\n\ndef gcd(a, b):\n    \"\"\"Calculate the Greatest Common Divisor (GCD) of two numbers using Euclidean algorithm.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef are_coprime(num1, num2):\n    \"\"\"Check if two numbers are co-prime.\"\"\"\n    return gcd(num1, num2) == 1\ndef is_perfect_number(n):\n    \"\"\"Check if a number is a perfect number.\"\"\"\n    if n < 2:\n        return False\n    # Calculate the sum of proper divisors\n    sum_of_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n            if i != n // i:\n                sum_of_divisors += n // i\n    # Check if the sum of divisors is equal to the original number\n    return sum_of_divisors == n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\ndef fibonacci_series(n):\n    \"\"\"Generate Fibonacci series up to n terms.\"\"\"\n    if n <= 0:\n        return \"Number of terms must be a positive integer.\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    \n    series = [0, 1]\n    for i in range(2, n):\n        next_term = series[-1] + series[-2]\n        series.append(next_term)\n    return series\nclass Solution:\n    def maximumLength(self, sequence: List[int], allowed_distinct: int) -> int:\n        n = len(sequence)\n        # DP table to store maximum lengths\n        length_dp = [[1] * (allowed_distinct + 1) for _ in range(n)]\n        max_length = 1\n        # Tracks the maximum length of sequences with up to 'allowed_distinct' distinct numbers\n        max_lengths_with_distinct_count = [-1] * (allowed_distinct + 1)\n        # Maps to track the maximum length ending with specific values for each distinct count\n        max_length_map = [{} for _ in range(allowed_distinct + 1)]\n        \n        for i in range(n):\n            for current_distinct in range(allowed_distinct + 1):\n                for previous_distinct in range(current_distinct):\n                    length_dp[i][current_distinct] = max(length_dp[i][current_distinct], 1 + max_lengths_with_distinct_count[previous_distinct])\n                if sequence[i] in max_length_map[current_distinct]:\n                    length_dp[i][current_distinct] = max(length_dp[i][current_distinct], 1 + max_length_map[current_distinct][sequence[i]])\n                max_length = max(max_length, length_dp[i][current_distinct])\n            \n            for current_distinct in range(allowed_distinct + 1):\n                max_lengths_with_distinct_count[current_distinct] = max(max_lengths_with_distinct_count[current_distinct], length_dp[i][current_distinct])\n                max_length_map[current_distinct][sequence[i]] = max(max_length_map[current_distinct].get(sequence[i], 0), length_dp[i][current_distinct])\n        \n        return max_length\ndef is_prime(n):\n    \"\"\"Check if a number is a prime number.\"\"\"\n    if n <= 1:\n        return False\n    if n <= 3:\n        return True\n    if n % 2 == 0 or n % 3 == 0:\n        return False\n    i = 5\n    while i * i <= n:\n        if n % i == 0 or n % (i + 2) == 0:\n            return False\n        i += 6\n    return True\ndef is_armstrong(number):\n    \"\"\"Check if a number is an Armstrong number.\"\"\"\n    # Convert the number to a string to easily iterate over each digit\n    num_str = str(number)\n    # Calculate the number of digits\n    num_digits = len(num_str)\n    # Calculate the sum of each digit raised to the power of num_digits\n    sum_of_powers = sum(int(digit) ** num_digits for digit in num_str)\n    # Check if the sum of powers is equal to the original number\n    return sum_of_powers == number\n\ndef gcd(a, b):\n    \"\"\"Calculate the Greatest Common Divisor (GCD) of two numbers using Euclidean algorithm.\"\"\"\n    while b != 0:\n        a, b = b, a % b\n    return a\n\ndef are_coprime(num1, num2):\n    \"\"\"Check if two numbers are co-prime.\"\"\"\n    return gcd(num1, num2) == 1\ndef is_perfect_number(n):\n    \"\"\"Check if a number is a perfect number.\"\"\"\n    if n < 2:\n        return False\n    # Calculate the sum of proper divisors\n    sum_of_divisors = 1\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            sum_of_divisors += i\n            if i != n // i:\n                sum_of_divisors += n // i\n    # Check if the sum of divisors is equal to the original number\n    return sum_of_divisors == n\ndef factorial(n):\n    \"\"\"Calculate the factorial of a number.\"\"\"\n    if n < 0:\n        return \"Factorial is not defined for negative numbers.\"\n    if n == 0 or n == 1:\n        return 1\n    result = 1\n    for i in range(2, n + 1):\n        result *= i\n    return result\ndef fibonacci_series(n):\n    \"\"\"Generate Fibonacci series up to n terms.\"\"\"\n    if n <= 0:\n        return \"Number of terms must be a positive integer.\"\n    if n == 1:\n        return [0]\n    if n == 2:\n        return [0, 1]\n    \n    series = [0, 1]\n    for i in range(2, n):\n        next_term = series[-1] + series[-2]\n        series.append(next_term)\n    return series",
    "submit_ts": 1717861941.0
}