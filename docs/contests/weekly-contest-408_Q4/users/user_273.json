{
    "username": "angel30818",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def is_touch_circle(cir1, cir2):\n            x0, y0, r0 = cir1\n            x1, y1, r1 = cir2\n            gapx = x0-x1\n            gapy = y0-y1\n            return gapx ** 2 + gapy ** 2 <= (r0 + r1) ** 2\n        \n        def is_touch_x_axis(cir):\n            x0, y0, r0 = cir\n            return y0 <= r0 and 0 <= x0 <= X\n        \n        def is_touch_y_axis(cir):\n            x0, y0, r0 = cir\n            return x0 <= r0 and 0 <= y0 <= Y\n        \n        def is_touch_x_top(cir, Y):\n            x0, y0, r0 = cir\n            return abs(Y-y0) <= r0 and 0 <= x0 <= X\n        \n        def is_touch_y_top(cir, X):\n            x0, y0, r0 = cir\n            return abs(X-x0) <= r0 and 0 <= y0 <= Y\n        \n        # if covers 0, 0 - out, covers X, Y - out\n        for x, y, c in circles:\n            if is_touch_circle((x, y, c), (0, 0, 0)):\n                return False\n            if is_touch_circle((x, y, c), (X, Y, 0)):\n                return False\n            \n        \n        # if 4 pairs of edges are connected - out\n        parents = {}\n\n        def find(p): \n            if p not in parents:\n                parents[p] = p\n            if parents[p] != p:\n                parents[p] = find(parents[p])\n            return parents[p]\n\n        def union(p, q):\n            i, j = find(p), find(q)\n            if i == j: \n                return\n            parents[i] = j\n\n        def connected(p, q):\n            return find(p) == find(q)\n        \n        XMax, XMin, YMax, YMin = \"topX\", \"bottomX\", \"topY\", \"bottomY\"\n        \n        for i in range(len(circles)):\n            cir1 = tuple(circles[i])\n            # see if touches any of the edges\n            if is_touch_y_axis(cir1):\n                union(cir1, YMin)\n            \n            if is_touch_y_top(cir1, X):\n                union(cir1, YMax)\n\n            if is_touch_x_axis(cir1):\n                union(cir1, XMin)\n            \n            if is_touch_x_top(cir1, Y):\n                union(cir1, XMax)\n            \n            \n            for j in range(i+1, len(circles)):\n                \n                \n                cir2 = tuple(circles[j])\n                \n                if is_touch_circle(cir1, cir2):\n                    union(cir1, cir2)\n        \n        # check if the pairs would touch\n        if connected(XMin, YMin) or connected(XMax, YMax) or connected(XMax, XMin) or connected(YMax, YMin):\n            return False\n    \n        return True\n        \n        \n        \n        \n        \n        \n        \n        \n        ",
    "submit_ts": "1722136698",
    "subm_id": "1335742332"
}