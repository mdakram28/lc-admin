{
    "username": "rahin1301",
    "submission": "class Solution:\n\n    def build(self, nums):\n        # TC: O(n) Space: O(n)\n        self.n = len(nums)\n        self.tree = [0] * 2 * self.n\n        for i in range(self.n):\n            self.tree[i + self.n] = nums[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1]\n        print(self.tree)\n\n    def update(self, index: int, val: int) -> None:\n        # TC: O(log(n))\n        index += self.n\n        self.tree[index] = val\n        while index > 1:\n            self.tree[index // 2] = self.tree[index] + self.tree[index ^ 1]\n            index //= 2\n\n    def sumRange(self, left: int, right: int) -> int:\n        # TC: O(log(n))\n        left += self.n\n        right += self.n\n        res = 0\n        while left <= right:\n            if left & 1:\n                # if left odd:\n                res += self.tree[left]\n                left += 1\n            if right & 1 == 0:\n                # if right even\n                res += self.tree[right]\n                right -= 1\n            left //= 2\n            right //= 2\n        return res\n\n    def countOfPeaks(self,nums, queries):\n\n        n = len(nums)\n        peaks = [0] * n\n\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                peaks[i] = 1\n        ##print(peaks)\n        self.build(peaks)\n        ans=[]\n        for query in queries:\n            if query[0] == 1:\n                left=min(query[1]+1,n-1)\n                right=max(query[2]-1,0)\n                ans.append( self.sumRange(left,right))\n            else:\n                nums[query[1]]=query[2]\n                index=query[1]\n                peakValue = peaks[index]\n                peakValueUpdated = peaks[index]\n                if index-1>=0 and index+1 <n:\n                    if nums[index]>nums[index-1] and nums[index]>nums[index+1]:\n                        peakValueUpdated=1\n                    else:\n                        peakValueUpdated = 0\n                    peaks[index] = peakValueUpdated\n                    if peakValue != peakValueUpdated:\n                        self.update(index,peakValueUpdated)\n                if index-1>=0 and index-2>=0:\n                    peakValue = peaks[index-1]\n                    peakValueUpdated = peaks[index-1]\n                    if nums[index-1]> nums[index] and nums[index-1]>nums[index-2]:\n                        peakValueUpdated =1\n                    else:\n                        peakValueUpdated=0\n                    peaks[index-1]= peakValueUpdated\n                    if peakValue != peakValueUpdated:\n                        self.update(index-1,peakValueUpdated)\n                if index+1<n and index+2<n:\n                    peakValue = peaks[index +1]\n                    peakValueUpdated = peaks[index + 1]\n                    if nums[index + 1] > nums[index] and nums[index +1] > nums[index + 2]:\n                        peakValueUpdated = 1\n                    else:\n                        peakValueUpdated = 0\n                    peaks[index+1] = peakValueUpdated\n                    if peakValue != peakValueUpdated:\n                        self.update(index+1, peakValueUpdated)\n                \n                ###print(peaks)\n        \n        return ans\n                    \n\n\n",
    "submit_ts": 1718509819.0
}