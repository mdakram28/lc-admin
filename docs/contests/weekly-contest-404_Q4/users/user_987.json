{
    "username": "Abhishek_11_",
    "submission": "class Solution {\npublic:\n    pair<int, int> height(int node, int parent, vector<vector<int>>& Adj) {\n        int height1 = 0, height2 = 0, diameter = 0;\n        for (auto i : Adj[node]) {\n            if (i != parent) {\n                pair<int, int> p = height(i, node, Adj);  // Correct parent parameter\n                if (p.first > height1) {\n                    height2 = height1;\n                    height1 = p.first;\n                } else if (p.first > height2) {\n                    height2 = p.first;\n                }\n                diameter = max(diameter, p.second);\n            }\n        }\n        return {height1 + 1, max(diameter, height1 + height2)};\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> Adj1(n), Adj2(m);\n\n        for (int i = 0; i < n - 1; ++i) {\n            Adj1[edges1[i][0]].push_back(edges1[i][1]);\n            Adj1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n\n        for (int i = 0; i < m - 1; ++i) {\n            Adj2[edges2[i][0]].push_back(edges2[i][1]);\n            Adj2[edges2[i][1]].push_back(edges2[i][0]);\n        }\n\n        pair<int, int> p1 = height(0, -1, Adj1);\n        pair<int, int> p2 = height(0, -1, Adj2);\n        return max({(p1.second + 1) / 2 + (p2.second + 1) / 2 + 1,p1.second,p2.second});\n    }\n};\n",
    "submit_ts": "1719716926",
    "subm_id": "1304377732"
}