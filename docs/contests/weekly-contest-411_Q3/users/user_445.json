{
    "username": "Dmitrii Shulaikin",
    "submission": "impl Solution {\n    pub fn fill(n: i32) -> String {\n        (0..n).map(|_| \"9\").collect::<String>()\n    }\n\n    pub fn bf(n: i32, k: i32) -> String {\n        let mut max = 1;\n        for _ in 0..n-1 {\n            max *= 10;\n        }\n\n        for i in (max..=(max*10 - 1)).rev() {\n            if i % k != 0 {\n                continue;\n            }\n\n            let str = i.to_string();\n\n            let mut i = 0; \n            let mut j = str.len() - 1;\n\n\n            let bytes = str.as_bytes();\n            let mut is_pal = true;\n\n            while i < j {\n                if bytes[i] != bytes[j] {\n                    is_pal = false;\n                    break;\n                }\n                i += 1;\n                j -= 1;\n            }\n\n            if is_pal {\n                return str;\n            }\n        }\n\n        return \"\".to_string();\n    }\n\n    pub fn largest_palindrome(n: i32, k: i32) -> String {\n        if n <= 7 {\n            return Self::bf(n, k);\n        }\n\n        if k == 5 {\n            return format!(\"5{}5\", Self::fill(n - 2))\n        }\n\n        if k == 1 || k == 3 || k == 9 {\n            return format!(\"9{}9\", Self::fill(n - 2))\n        }\n\n        if k == 2 {\n            return format!(\"8{}8\", Self::fill(n - 2))\n        }\n\n        if k == 4 {\n            return format!(\"88{}88\", Self::fill(n - 4))\n        }\n\n        if k == 8 {\n            return format!(\"888{}888\", Self::fill(n - 6))\n        }\n\n        if k == 6 {\n            if n % 2 == 0 {\n                return format!(\"8{}77{}8\", Self::fill((n - 4) / 2), Self::fill((n - 4) / 2))\n            } else {\n                return format!(\"8{}8{}8\", Self::fill((n - 3) / 2), Self::fill((n - 3) / 2))\n            }\n        }\n\n        if k == 7 {\n            let mut a = '7';\n            let mut b = '5';\n\n            if (n / 6) % 2 == 1 {\n                a = '4';\n                b = '6';\n            }\n\n            if n % 6 == 0 {\n                return Self::fill(n);\n            }\n\n            if n % 6 == 1 || n % 6 == 5 {\n                return format!(\"{}{a}{}\", Self::fill((n - 1) / 2), Self::fill((n - 1) / 2))\n            }\n\n            if n % 6 == 2 || n % 6 == 4 {\n                return format!(\"{}{a}{a}{}\", Self::fill((n - 2) / 2), Self::fill((n - 2) / 2))\n            }\n\n            return format!(\"{}{b}{}\", Self::fill((n - 1) / 2), Self::fill((n - 1) / 2))\n        }\n\n        return \"\".to_string()\n    }\n}",
    "submit_ts": "1723952778",
    "subm_id": "1359804425"
}