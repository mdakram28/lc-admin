{
    "username": "jtsuited",
    "submission": "Circle = namedtuple(\"Circle\", \"x y r\")\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def connected(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            return (x1 - x2)**2 + (y1 - y2)**2 <= (r1+r2)**2\n\n        edges = defaultdict(list)\n\n        def dfs(u, v, vis):\n            if u == v:\n                return True\n            if u in vis:\n                return False\n            vis.add(u)\n            for nxt in edges[u]:\n                if nxt not in vis:\n                    found = dfs(nxt, v, vis)\n                    if found:\n                        return True\n            return False\n\n        n = len(circles)\n        for i in range(n):\n            x1, y1, r1 = circles[i]\n            if x1 - r1 <= 0:\n                edges['w'].append(i)\n                edges[i].append('w')\n            if x1 + r1 >= X:\n                edges['e'].append(i)\n                edges[i].append('e')\n            if y1 - r1 <= 0:\n                edges['s'].append(i)\n                edges[i].append('s')\n            if y1 + r1 >= Y:\n                edges['n'].append(i)\n                edges[i].append('n')\n            for j in range(i+1, n):\n                if connected(circles[i], circles[j]):\n                    edges[i].append(j)\n                    edges[j].append(i)\n        \n        if dfs('w', 'e', set()):\n            return False\n        if dfs('n', 's', set()):\n            return False\n        if dfs('w', 's', set()):\n            return False\n        if dfs('n', 'e', set()):\n            return False\n        return True\n        \n",
    "submit_ts": "1722138507",
    "subm_id": "1335792506"
}