{
    "username": "Levi_Ackerman_04",
    "submission": "struct TrieNode {\n    \n    TrieNode* Children[26];\n    int WordCost = INT_MAX;\n    bool IsEndOfWord = false;\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i)\n            Children[i] = nullptr;\n    }\n\n    int GetWordCost() {\n        return WordCost;\n    }\n\n    bool IsWordEnd() {\n        return IsEndOfWord;\n    }\n\n    void SetEnd(int cost) {\n        WordCost = min(WordCost,cost);\n        IsEndOfWord = true;\n    }\n\n    TrieNode* GetNextNode(char c) {\n        return Children[c - 'a'];\n    }\n\n    void AddChild(char c) {\n        Children[c - 'a'] = new TrieNode;\n    }\n\n    bool HasChild(char c) {\n        return Children[c - 'a'] != nullptr;\n    }\n};\n\nclass Solution {\npublic:\n    int solve(int idx, string& target, TrieNode* root, vector<int>& dp) {\n\n        if (idx == target.size())\n             return 0;\n\n        if (dp[idx] != -1)\n         return dp[idx];\n\n        int Cost = INT_MAX;\n        TrieNode* node = root;\n\n        for (int i = idx; i < target.size(); ++i) {\n            char currChar = target[i];\n\n            if (node->HasChild(currChar)) {\n\n                node = node->GetNextNode(currChar);\n\n                if (node->IsWordEnd()) {\n                    int currCost = node->GetWordCost();\n\n                    int remainCost = solve(i + 1, target, root, dp);\n                    if (remainCost != INT_MAX) {\n                        Cost = min(Cost, currCost + remainCost);\n                    }\n                }\n            } else {\n                break;\n            }\n        }\n\n        return dp[idx] = Cost;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int numWords = words.size();\n        TrieNode* root = new TrieNode();\n\n        for (int i = 0; i < numWords; ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->HasChild(c)) {\n                    node->AddChild(c);\n                }\n                node = node->GetNextNode(c);\n            }\n            node->SetEnd(costs[i]);\n        }\n\n        vector<int> dp(target.size(), -1);\n\n        int res = solve(0, target, root, dp);\n        if(res == INT_MAX)\n            return -1;\n        return res;\n\n    }\n};",
    "submit_ts": "1720324448",
    "subm_id": "1312399715"
}