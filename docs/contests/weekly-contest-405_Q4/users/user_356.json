{
    "username": "TrickyCat",
    "submission": "public class Solution\n{\n\t// @TrickyCat\n\tpublic int MinimumCost(string target, string[] words, int[] costs)\n\t{\n\t\tconst int inf = 1_000_000_000;\n\n\t\t(words, costs) = Deduplicate(words, costs);\n\n\t\tvar trie = new Trie();\n\t\tfor (int i = 0; i < words.Length; i++)\n\t\t\ttrie.Add(words[i], costs[i]);\n\t\tvar memo = new int[target.Length];\n\t\tvar res = F(0);\n\t\treturn res == inf ? -1 : res;\n\n\n\t\tint F(int i)\n\t\t{\n\t\t\tif (i == target.Length) { return 0; }\n\t\t\tif (memo[i] != 0) { return memo[i]; }\n\n\t\t\tint ans = inf;\n\t\t\tvar node = trie;\n\n\t\t\tfor (int j = i; j < target.Length; j++)\n\t\t\t{\n\t\t\t\tif (node.next[target[j] - 'a'] == null)\n\t\t\t\t{\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tnode = node.next[target[j] - 'a'];\n\t\t\t\tif (node.eow)\n\t\t\t\t{\n\t\t\t\t\tans = Math.Min(ans, node.cost + F(j + 1));\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn memo[i] = ans;\n\t\t}\n\t}\n\n\t(string[] words, int[] costs) Deduplicate(string[] words, int[] costs)\n\t{\n\t\tvar m = new Dictionary<string, int>();\n\t\tfor (int i = 0; i < words.Length; i++)\n\t\t{\n\t\t\tm[words[i]] = Math.Min(costs[i], m.GetValueOrDefault(words[i], 1_000_000_000));\n\t\t}\n\t\tvar resW = new string[m.Count];\n\t\tvar resC = new int[m.Count];\n\t\tint j = 0;\n\t\tforeach (var (w, c) in m)\n\t\t{\n\t\t\tresW[j] = w;\n\t\t\tresC[j] = c;\n\t\t\tj++;\n\t\t}\n\t\treturn (resW, resC);\n\t}\n\n\tclass Trie\n\t{\n\t\tpublic Trie[] next = new Trie[26];\n\t\tpublic bool eow;\n\t\tpublic int cost;\n\n\t\tpublic void Add(string word, int wCost)\n\t\t{\n\t\t\tvar node = this;\n\t\t\tfor (int i = 0; i < word.Length; i++)\n\t\t\t{\n\t\t\t\tif (node.next[word[i] - 'a'] == null)\n\t\t\t\t{\n\t\t\t\t\tnode.next[word[i] - 'a'] = new();\n\t\t\t\t}\n\t\t\t\tnode = node.next[word[i] - 'a'];\n\t\t\t}\n\t\t\tnode.cost = wCost;\n\t\t\tnode.eow = true;\n\t\t}\n\t}\n}",
    "submit_ts": "1720321917",
    "subm_id": "1312335756"
}