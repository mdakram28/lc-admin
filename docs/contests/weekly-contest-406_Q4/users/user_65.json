{
    "username": "sree24_10",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] d = new Integer[horizontalCut.length];\n        Integer[] u = new Integer[verticalCut.length];\n        \n        for (int i = 0; i < horizontalCut.length; i++) d[i] = horizontalCut[i];\n        for (int i = 0; i < verticalCut.length; i++) u[i] = verticalCut[i];\n        \n        Arrays.sort(d, Collections.reverseOrder());\n        Arrays.sort(u, Collections.reverseOrder());\n        \n        int c = 0, k = 0, p = 1, i = 1;\n        long l = 0;\n        \n        while (c < d.length && k < u.length) {\n            if (d[c] >= u[k]) {\n                l += (long) d[c] * i;\n                p++;\n                c++;\n            } else {\n                l += (long) u[k] * p;\n                i++;\n                k++;\n            }\n        }\n        \n        while (c < d.length) {\n            l += (long) d[c] * i;\n            c++;\n        }\n        \n        while (k < u.length) {\n            l += (long) u[k] * p;\n            k++;\n        }\n        \n        return l;\n    }\n}\n",
    "submit_ts": "1720924893",
    "subm_id": "1320235054"
}