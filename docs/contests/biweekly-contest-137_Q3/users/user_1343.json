{
    "username": "Qjbtiger",
    "submission": "using ll = long long;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        const int n = board[0].size(), m = board.size();\n        vector<ll> dp(n, -LLONG_MAX / 2);\n        vector<vector<ll> > dp1(n, vector<ll>(n, -LLONG_MAX / 2)), dp2(n, vector<ll>(n, -LLONG_MAX / 2));\n\n        for (int i = 0; i < m; i++) {\n            if (i > 1) {\n                for (int j = 0; j < n; j++) {\n                    for (int k = 0; k < n; k++) {\n                        if (k != j) {\n                            dp[j] = max(dp[j], dp2[k][j] + board[i][j]);\n                        }\n                    }\n                }\n            }\n            if (i > 0) {\n                for (int j = 0; j < n; j++) {\n                    for (int k = 0; k < n; k++) {\n                        if (k != j) {\n                            dp2[k][j] = max(dp2[k][j], dp1[k][j] + board[i][k]);\n                        }\n                    }\n                }\n            }\n\n            ll max1 = -INT_MAX, max1p = -1, max2 = -INT_MAX, max2p = -1, max4 = -INT_MAX, max4p = -1;\n            for (int j = 0; j < n; j++) {\n                if (board[i][j] >= max1) {\n                    max4 = max2;\n                    max4p = max2p;\n                    max2 = max1;\n                    max2p = max1p;\n                    max1 = board[i][j];\n                    max1p = j;\n                } else if (board[i][j] >= max2) {\n                    max4 = max2;\n                    max4p = max2p;\n                    max2 = board[i][j];\n                    max2p = j;\n                } else if (board[i][j] > max4) {\n                    max4 = board[i][j];\n                    max4p = j;\n                }\n            }\n\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (k != j) {\n                        ll maxNow = max1;\n                        if (j == max1p || k == max1p) {\n                            maxNow = max2;\n                            if (j == max2p || k == max2p) {\n                                maxNow = max4;\n                            }\n                        }\n                        dp1[j][k] = max(dp1[j][k], (ll) maxNow);\n                    }\n                }\n            }\n        }\n        // ll ans = -INT_MAX / 2;\n        // for (int i = 0; i < n; i++) {\n        //     for (int j = 0; j < n; j++) {\n        //         for (int k = 0; k < n; k++) {\n        //             ans = max(ans, dp[i][j][k]);\n        //         }\n        //     }\n        // }\n        return *max_element(dp.begin(), dp.end());\n    }\n};",
    "submit_ts": "1723910355",
    "subm_id": "1359227192"
}