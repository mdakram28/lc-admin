{
    "username": "Scyther_07",
    "submission": "\n#define ll long long\n// #define int long long\n\n#define lc id << 1\n#define rc id << 1 | 1\n\nconst ll MAX_N = 100010;\n\nstruct node{\n    ll lazy, mx;\n    node(int x = 0): lazy(0), mx(x) {}\n    friend node operator+(const node &a, const node &b){\n        return node(max(a.mx, b.mx));\n    }\n} t[4 * MAX_N];\nvector<ll> a;\nll n, q;\n\nvoid push(int id, int l, int r){\n    if(t[id].lazy){\n        if(l != r){\n            t[lc].lazy += t[id].lazy;\n            t[rc].lazy += t[id].lazy;\n        }\n        t[id].mx -= t[id].lazy;\n        t[id].lazy = 0;\n    }\n}\nvoid build(int id=1, int l=0, int r=MAX_N-1){\n    if(l==r) t[id] = node(a[l]);\n    else{\n        int mid=(l+r)>>1;\n        build(lc, l, mid);\n        build(rc, mid+1, r);\n        t[id]=t[lc]+t[rc];\n    }\n}\nvoid update(int id, int l, int r, int lq, int rq, int val){\n    push(id, l, r);\n    if(r<lq || l>rq) return;\n    if(lq<=l && r<=rq){\n        t[id].lazy = val;\n        push(id, l, r);\n        return;\n    }\n    int mid=(l+r)>>1;\n    update(lc, l, mid, lq, rq, val);\n    update(rc, mid+1, r, lq, rq, val);\n    t[id]=t[lc]+t[rc];\n}\nnode query(int id, int l, int r, int lq, int rq){\n    push(id, l, r);\n    if(r<lq || l>rq) return node();\n    if(lq<=l && r<=rq) return t[id];\n    int mid=(l+r)>>1;\n    return query(lc, l, mid, lq, rq) + query(rc, mid+1, r, lq, rq);\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        a = vector<ll>(MAX_N);\n        for(int i = MAX_N - 1, j = 0; i >= 0; --i, ++j) a[i] = j;\n        build();\n        set<int> st;\n\n        auto get_left = [&](int R) -> int{\n            int L = 0;\n            if(!st.empty() && st.lower_bound(R) != st.begin()) L = *(--st.lower_bound(R));\n            return L;\n        };\n\n        vector<bool> ans;\n\n        for(auto v: queries){\n            int t = v[0];\n            if(t == 1){\n                int x = v[1];\n                int L = get_left(x);\n                auto nn = query(1, 0, MAX_N - 1, x, x).mx;\n                update(1, 0, MAX_N - 1, L, x - 1, nn);\n                st.insert(x);\n            }else{\n                int x = v[1], w = v[2], temp, L;\n                if(!st.count(x)){\n                    temp = query(1, 0, MAX_N - 1, x, x).mx;\n                    L = get_left(x);\n                    update(1, 0, MAX_N - 1, L, x - 1, temp);\n                }\n                auto nn = query(1, 0, MAX_N - 1, 0, x - 1).mx;\n                if(!st.count(x)){\n                    update(1, 0, MAX_N - 1, L, x - 1, -temp);\n                }\n                if(nn >= w){\n                    ans.push_back(true);\n                }else{\n                    ans.push_back(false);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716651555.0
}