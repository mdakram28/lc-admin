{
    "username": "jacobj2",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.tree=[0]*(4*len(nums))\n        self.nums=nums\n        self.build_tree(0,0,len(nums)-1)\n    def build_tree(self, node, left, right):\n        if left==right:\n            self.tree[node]=self.nums[left]\n            return\n        mid = (left+right)>>1\n        self.build_tree(2*node+1,left,mid)\n        self.build_tree(2*node+2,mid+1,right)\n        self.tree[node]=self.tree[2*node+1]+self.tree[2*node+2]\n    def update(self, node, left, right, index, value):\n        if left==right:\n            self.tree[node]=value\n            return\n        mid = (left+right)>>1\n        if index<=mid:\n            self.update(2*node+1,left,mid,index,value)\n        else:\n            self.update(2*node+2,mid+1,right,index,value)\n        self.tree[node]=self.tree[2*node+1]+self.tree[2*node+2]\n    def query(self, node, left, right, arrLeft, arrRight):\n        if arrLeft>right or arrRight<left: return 0\n        if arrLeft>=left and arrRight<=right: return self.tree[node]\n        mid = (arrLeft+arrRight)>>1\n        return self.query(2*node+1,left,right,arrLeft,mid)+self.query(2*node+2,left,right,mid+1,arrRight)\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peakArr = [0]*len(nums)\n        for i in range(1,len(nums)-1):\n            if nums[i]>nums[i-1] and nums[i]>nums[i+1]:\n                peakArr[i]=1\n        segTree = SegmentTree(peakArr)\n        res=[]\n        for t,u,v in queries:\n            if t==1:\n                a=segTree.query(0,u,v,0,len(nums)-1)\n                #print(peakArr)\n                if peakArr[u]==1: a-=1\n                if peakArr[v]==1 and u!=v: a-=1\n                res.append(a)\n            else:\n                nums[u]=v\n                if peakArr[u]==1 and (nums[u]<=nums[u+1] or nums[u]<=nums[u-1]):\n                    segTree.update(0,0,len(nums)-1,u,0)\n                    peakArr[u]=0\n                elif peakArr[u]==0 and (u>0 and u+1<len(nums) and nums[u]>nums[u+1] and nums[u]>nums[u-1]):\n                    segTree.update(0,0,len(nums)-1,u,1)\n                    peakArr[u]=1\n                if u+1<len(nums) and peakArr[u+1]==1 and (nums[u+1]<=nums[u]):\n                    segTree.update(0,0,len(nums)-1,u+1,0)\n                    peakArr[u+1]=0\n                elif u+2<len(nums) and peakArr[u+1]==0 and (nums[u+1]>nums[u] and nums[u+1]>nums[u+2]):\n                    segTree.update(0,0,len(nums)-1,u+1,1)\n                    peakArr[u+1]=1\n                if u>0 and peakArr[u-1]==1 and (nums[u-1]<=nums[u]):\n                    segTree.update(0,0,len(nums)-1,u-1,0)\n                    peakArr[u-1]=0\n                elif u>1 and peakArr[u-1]==0 and (nums[u-1]>nums[u] and nums[u-1]>nums[u-2]):\n                    segTree.update(0,0,len(nums)-1,u-1,1)\n                    peakArr[u-1]=1\n        return res",
    "submit_ts": 1718507027.0
}