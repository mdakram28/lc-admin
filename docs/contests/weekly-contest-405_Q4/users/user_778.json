{
    "username": "apurvdwivedi518",
    "submission": "from typing import List, Dict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self,word,cost):\n        node = self.root\n        for char in word:\n            # if char not present\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node=node.children[char]\n        # the node.cost will be the min cost used in a word\n        node.cost=min(node.cost,cost)\n    \n    def findMinCost(self,target,idx):\n        node=self.root\n        res={}\n        for i in range(idx,len(target)):\n            if target[i] not in node.children:\n                break\n            node=node.children[target[i]]\n            # store the cost with the ending idx\n            if node.cost!=float('inf'):\n                res[i+1]=node.cost\n        return res\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n=len(target)\n        dp=[float('inf')]*(n+1)\n        dp[0]=0\n        \n        trie=Trie()\n        # filling trie\n        for word,cost in zip(words,costs):\n            trie.insert(word,cost)\n        \n        for i in range(n):\n            if dp[i]==float('inf'):     # not reachable\n                continue\n            # check for all ending indices of substrs\n            minCosts=trie.findMinCost(target,i)\n            for end,cost in minCosts.items():\n                dp[end]=min(dp[end],dp[i]+cost)\n        \n        return dp[n] if dp[n]!=float('inf') else -1",
    "submit_ts": "1720322255",
    "subm_id": "1312344914"
}