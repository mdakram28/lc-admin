{
    "username": "leva94",
    "submission": "class Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"\n        requirements = sorted(requirements)\n        total_inv = requirements[-1][-1]\n        req_dict = dict()\n        for r in requirements[:-1]:\n            req_dict[n - 1 - r[0]] = total_inv - r[1]\n        if (n - 1) in req_dict and req_dict[n - 1] != total_inv:\n            return 0\n        req_dict[n - 1] = total_inv\n        # print(req_dict)\n        res_dict = dict()\n        def count(n_used, n_inv):\n            if n_inv > total_inv:\n                return 0\n            if n_used in req_dict and req_dict[n_used] != n_inv:\n                return 0\n            if n_used == n - 1:\n                return 1\n            if (n_used, n_inv) in res_dict:\n                return res_dict[(n_used, n_inv)]\n            val = 0\n            if (n_used + 1) in req_dict:\n                diff = req_dict[(n_used + 1)] - n_inv\n                if diff >= 0 and diff < n - n_used:\n                    val = count(n_used + 1, req_dict[(n_used + 1)])\n            else:\n                for i in range(n - n_used):\n                    val += count(n_used + 1, n_inv + i)\n                    val %= 1000000007\n            res_dict[(n_used, n_inv)] = val\n            return val\n        \n        return count(0, 0)\n            \n        \n        \n        \n        ",
    "submit_ts": 1719071384.0
}