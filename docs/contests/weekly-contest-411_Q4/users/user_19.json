{
    "username": "Maruzensky",
    "submission": "from bisect import bisect_left, bisect_right\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        idx_0, idx_1 = [], []\n        \n        for i, c in enumerate(s):\n            if c == '0':\n                idx_0.append(i)\n            else:\n                idx_1.append(i)\n                \n        idx_0.extend([n + 3] * (k + 3))\n        idx_1.extend([n + 3] * (k + 3))\n        \n        right = []\n                \n        seen_0, seen_1 = 0, 0\n        \n        for i, c in enumerate(s):\n            right.append(max(idx_0[seen_0 + k], idx_1[seen_1 + k]))\n            if c == '0':\n                seen_0 += 1\n            else:\n                seen_1 += 1\n                \n        psum = [0]\n        for r in right:\n            psum.append(psum[-1] + r)\n            \n        answer = []\n        for l, r in queries:\n            idx = bisect_right(right, r) - 1\n            if idx < l:\n                bad = 0\n            else:\n                bad = (r + 1) * (idx - l + 1) - psum[idx + 1] + psum[l]\n            \n            width = r - l + 1\n            full = (width * width + width) // 2\n            \n            answer.append(full - bad)\n            \n            # print(full, bad)\n            \n        return answer",
    "submit_ts": "1723950707",
    "subm_id": "1359752905"
}