{
    "username": "silvernarcissus",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        \n        //System.out.println(handle(grid, 0, 0, 1, 0));\n        \n        int res = 10000000;\n        \n        // 3 col\n        for(int y1 = 0; y1 < m - 1; y1++){\n            for(int y2 = y1 + 1; y2 < m - 1; y2++){\n                int a1 = handle(grid, 0, 0, n - 1, y1);\n                int a2 = handle(grid, 0, y1 + 1, n - 1, y2);\n                int a3 = handle(grid, 0, y2 + 1, n - 1, m - 1);\n                \n                if(a1 == 0 || a2 == 0 || a3 == 0){\n                    continue;\n                }\n                \n                res = Math.min(res, a1 + a2 + a3);\n            }\n        }\n        \n        \n        \n        // 3 row\n        for(int x1 = 0; x1 < n - 1; x1++){\n            for(int x2 = x1 + 1; x2 < n - 1; x2++){\n                int a1 = handle(grid, 0, 0, x1, m - 1);\n                int a2 = handle(grid, x1 + 1, 0, x2, m - 1);\n                int a3 = handle(grid, x2 + 1, 0, n - 1, m - 1);\n                \n                if(a1 == 0 || a2 == 0 || a3 == 0){\n                    continue;\n                }\n                \n                res = Math.min(res, a1 + a2 + a3);\n            }\n        }\n        \n        // 2 row\n        for(int x1 = 0; x1 < n - 1; x1++){\n            // up\n            int a1 = handle(grid, 0, 0, x1, m - 1);\n            if(a1 != 0){\n                for(int y = 0; y < m - 1; y++){\n                    int a2 = handle(grid, x1 + 1, 0, n - 1, y);\n                    int a3 = handle(grid, x1 + 1, y + 1, n - 1, m - 1);\n                    \n                    if(a2 != 0 && a2 != 0){\n                        res = Math.min(res, a1 + a2 + a3);\n                    }\n                }\n            }\n            \n            \n            // down\n            a1 = handle(grid, x1 + 1, 0, n - 1, m - 1);\n            if(a1 != 0){\n                for(int y = 0; y < m - 1; y++){\n                    int a2 = handle(grid, 0, 0, x1, y);\n                    int a3 = handle(grid, 0, y + 1, x1, m - 1);\n                    \n                    if(a2 != 0 && a2 != 0){\n                        res = Math.min(res, a1 + a2 + a3);\n                    }\n                }\n            }\n        }\n        \n        // 2 col\n        for(int y1 = 0; y1 < m - 1; y1++){\n            // left\n            int a1 = handle(grid, 0, 0, n - 1, y1);\n            if(a1 != 0){\n                for(int x = 0; x < n - 1; x++){\n                    int a2 = handle(grid, 0, y1 + 1, x, m - 1);\n                    int a3 = handle(grid, x + 1, y1 + 1, n - 1, m - 1);\n                    \n                    if(a2 != 0 && a2 != 0){\n                        res = Math.min(res, a1 + a2 + a3);\n                    }\n                }\n            }\n            \n            \n            // right\n            a1 = handle(grid, 0, y1 + 1, n - 1, m - 1);\n            if(a1 != 0){\n                for(int x = 0; x < n - 1; x++){\n                    int a2 = handle(grid, 0, 0, x, y1);\n                    int a3 = handle(grid, x + 1, 0, n - 1, y1);\n                    \n                    if(a2 != 0 && a2 != 0){\n                        res = Math.min(res, a1 + a2 + a3);\n                    }\n                }\n            }\n        }\n        \n        return res;\n    }\n    \n    private int handle(int[][] grid, int sx, int sy, int ex, int ey){\n        int n = grid.length;\n        int m = grid[0].length;\n        \n        int ux = n + 1;\n        int dx = 0;\n        int ly = m + 1;\n        int ry = 0;\n        \n        for(int i = sx; i <= ex; i++){\n            for(int j = sy; j <= ey; j++){\n                if(grid[i][j] == 1){\n                    ux = Math.min(ux, i);\n                    dx = Math.max(dx, i);\n                    ly = Math.min(ly, j);\n                    ry = Math.max(ry, j);\n                }\n            }\n        }\n        \n        if(ux != n + 1){\n            return (dx - ux + 1) * (ry - ly + 1);\n        }\n        \n        return 0;\n    }\n}",
    "submit_ts": "1719112646",
    "subm_id": "541393465"
}