{
    "username": "user9104rY",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontal_pieces = 1\n        vertical_pieces = 1\n\n        horizontal_heap = [-cut for cut in horizontalCut]\n        vertical_heap = [-cut for cut in verticalCut]\n\n        heapify(horizontal_heap)\n        heapify(vertical_heap)\n\n        res = 0\n\n        while horizontal_heap and vertical_heap:\n            if horizontal_heap[0] < vertical_heap[0]:\n                res -= heappop(horizontal_heap) * vertical_pieces\n                horizontal_pieces += 1\n            else:\n                res -= heappop(vertical_heap) * horizontal_pieces\n                vertical_pieces += 1\n\n        while horizontal_heap:\n            res -= heappop(horizontal_heap) * vertical_pieces\n\n        while vertical_heap:\n            res -= heappop(vertical_heap) * horizontal_pieces\n\n        return res",
    "submit_ts": "1720925254",
    "subm_id": "1320248375"
}