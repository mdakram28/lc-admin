{
    "username": "sssssummer",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        List<int[]> newpoints = new ArrayList<>();\n        int n = points.length;\n        for (int i = 0; i < n; i++) {\n            newpoints.add(points[i]);\n        }\n        int[]  res = minDist(newpoints);\n        \n        List<int[]> points1 = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i != res[1]) {\n                points1.add(points[i]);\n            }\n        }\n        \n        List<int[]> points2 = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i != res[2]) {\n                points2.add(points[i]);\n            }\n        }\n        \n        int[] res1 = minDist(points1);\n        int[] res2 = minDist(points2);\n        return Math.min(res1[0], res2[0]);\n    }\n    \n    \n    int[] minDist(List<int[]> points) {\n        \n        List<int[]> l = new ArrayList<>();\n        List<int[]> l1 = new ArrayList<>();\n        for (int i = 0; i < points.size(); i++) {\n            l.add(new int[]{points.get(i)[0] + points.get(i)[1], i});\n            l1.add(new int[]{points.get(i)[0] - points.get(i)[1], i});\n        }\n        Collections.sort(l, (a, b) -> (a[0] - b[0]));\n        Collections.sort(l1, (a, b) -> (a[0] - b[0]));\n        \n        int num1 = l.get(l.size()-1)[0] - l.get(0)[0];\n        int num2 = l1.get(l1.size()-1)[0] - l1.get(0)[0];\n        \n        \n        if (num1 >= num2) {\n            return new int[]{num1, l.get(l.size()-1)[1], l.get(0)[1]};\n        } else {\n            return new int[]{num2, l1.get(l1.size()-1)[1], l1.get(0)[1]};\n        }\n        \n    }\n \n}"
}