{
    "username": "triggered18101",
    "submission": "from collections import deque\nfrom typing import List\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def bfs(farthest_node, graph):\n            n = len(graph)\n            distances = [-1] * n\n            queue = deque([farthest_node])\n            distances[farthest_node] = 0\n            max_distance = 0\n            farthest_point = farthest_node\n            while queue:\n                node = queue.popleft()\n                for neighbor in graph[node]:\n                    if distances[neighbor] == -1:\n                        distances[neighbor] = distances[node] + 1\n                        queue.append(neighbor)\n                        if distances[neighbor] > max_distance:\n                            max_distance = distances[neighbor]\n                            farthest_point = neighbor\n            return farthest_point, max_distance\n        \n        def find_diameter(graph):\n            farthest_node, _ = bfs(0, graph)\n            farthest_point, diameter = bfs(farthest_node, graph)\n            return diameter\n        \n        def build_graph(edges, n):\n            graph = [[] for _ in range(n)]\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n            return graph\n        \n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        \n        graph1 = build_graph(edges1, n)\n        graph2 = build_graph(edges2, m)\n        \n        diameter1 = find_diameter(graph1)\n        diameter2 = find_diameter(graph2)\n        \n        new_diameter = max(diameter1, diameter2, (diameter1 + 1) // 2 + 1 + (diameter2 + 1) // 2)\n        \n        return new_diameter\n\n# # Test case\n# solution = Solution()\n# print(solution.minimumDiameterAfterMerge([[0,1],[0,2],[0,3]], [[0,1]]))  # Output: 3\n# print(solution.minimumDiameterAfterMerge([[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]))  # Output: 5\n",
    "submit_ts": "1719717654",
    "subm_id": "1304397330"
}