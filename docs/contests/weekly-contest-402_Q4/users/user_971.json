{
    "username": "Acepted",
    "submission": "class Solution {\npublic:\n    int sum[100010 << 2];\n    int a[100010];\n    void build(int l, int r, int o) {\n        if (l == r) {\n            sum[o] = a[l - 1];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(l, mid, o << 1);\n        build(mid + 1, r, o << 1 | 1);\n        sum[o] = sum[o << 1] + sum[o << 1 | 1];\n    }\n    void update(int l, int r, int pos, int x, int o) {\n        if (l == r) {\n            sum[o] = x;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        if (pos <= mid) update(l, mid, pos, x, o << 1);\n        else update(mid + 1, r, pos, x, o << 1 | 1);\n        sum[o] = sum[o << 1] + sum[o << 1 | 1];\n    }\n    int query(int L, int R, int l, int r, int o) {\n        if (L <= l && r <= R) {\n            return sum[o];\n        }\n        int mid = (l + r) >> 1;\n        int ans = 0;\n        if (mid >= L) ans += query(L, R, l, mid, o << 1);\n        if (mid < R) ans += query(L , R, mid + 1, r, o << 1 | 1);\n        return ans; \n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int cnt = 0;\n        int n = nums.size();\n        for (int i = 1; i < nums.size() - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                a[i] = 1;\n            }\n        }\n        build(1, n, 1);\n        vector<int> ans;\n       // cout << query(1, 3, 1, 3, 1) << endl;\n        for (auto &q : queries) {\n            if (q[0] == 1) {\n                if (q[2] - q[1] + 1 <= 2) ans.emplace_back(0);\n                else\n                ans.emplace_back(query(q[1] + 2, q[2], 1, n, 1));\n            } else {\n                nums[q[1]] = q[2];\n                if (q[1] > 0 && q[1] < n - 1) {\n                    if (nums[q[1]] > nums[q[1]-1] && nums[q[1]] > nums[q[1]+1]) {\n                         update(1, n, q[1] + 1, 1, 1);\n                    } else{\n                        update(1, n, q[1] + 1, 0, 1);\n                    }\n                } \n                int pos = q[1] - 1;\n                if (pos - 1 >= 0) {\n                    if (nums[pos] > nums[pos + 1] && nums[pos] > nums[pos - 1]) {\n                        update(1, n, pos + 1, 1, 1);\n                    } else{\n                        update(1, n, pos + 1, 0, 1);\n                    }\n                }\n                pos = q[1] + 1;\n                if (pos + 1 < n) {\n                    if (nums[pos] > nums[pos + 1] && nums[pos] > nums[pos - 1]) {\n                        update(1, n, pos+ 1, 1, 1);\n                    } else{\n                        update(1, n, pos + 1, 0, 1);\n                    }\n                }\n                \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508007.0
}