{
    "username": "musafir7",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         priority_queue<pair<int, char>> cuts;\n    \n    for (int cost : horizontalCut) {\n        cuts.push({cost, 'H'});\n    }\n    \n    for (int cost : verticalCut) {\n        cuts.push({cost, 'V'});\n    }\n\n    long long totalCost = 0;\n    int horizontalPieces = 1, verticalPieces = 1;\n\n    // Process the cuts by always choosing the most expensive cut first\n    while (!cuts.empty()) {\n        auto cut = cuts.top();\n        cuts.pop();\n        \n        if (cut.second == 'H') {\n            totalCost += static_cast<long long>(cut.first) * verticalPieces;\n            ++horizontalPieces;\n        } else {\n            totalCost += static_cast<long long>(cut.first) * horizontalPieces;\n            ++verticalPieces;\n        }\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720924859",
    "subm_id": "1320233779"
}