{
    "username": "Sariabell",
    "submission": "using LL = long long;\n\nclass Solution {\npublic:\n    struct SegTreeNode {\n        LL val;\n        LL add;\n    };\n\n    vector<SegTreeNode> nodes;\n\n    void pushdown(int o, int l, int r) {\n        if (l == r) {\n            // add\n            nodes[o].val += nodes[o].add;\n        }\n        else {\n            // add\n            int mid = l + (r - l) / 2;\n            nodes[o * 2].add += nodes[o].add;\n            nodes[o * 2 + 1].add += nodes[o].add;\n        }\n        // add\n        nodes[o].add = 0;\n    }\n\n    void build(int o, int l, int r, vector<LL>& v) {\n        if (l == r) {\n            nodes[o].val = v[l - 1];\n        }\n        else {\n            int mid = l + (r - l) / 2;\n            build(o * 2, l, mid, v);\n            build(o * 2 + 1, mid + 1, r, v);\n        }\n    }\n\n    void range_add(int o, int l, int r, int ql, int qr, int add) {\n        if (ql <= l && r <= qr) {\n            nodes[o].add += add;\n            return;\n        }\n        if (qr < l || r < ql) return;\n        pushdown(o, l, r);\n\n        int mid = l + (r - l) / 2;\n        if (ql <= mid)\n            range_add(o * 2, l, mid, ql, qr, add);\n        if (mid + 1 <= qr)\n            range_add(o * 2 + 1, mid + 1, r, ql, qr, add);\n    }\n\n\n    LL get_val(int o, int l, int r, int i) {\n        pushdown(o, l, r);\n\n        if (l == r)\n            return nodes[o].val;\n        int mid = l + (r - l) / 2;\n        if (i <= mid)\n            return get_val(o * 2, l, mid, i);\n        else\n            return get_val(o * 2 + 1, mid + 1, r, i);\n    }\n\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        vector<LL> v;\n        for (int i = 0; i < n; ++i)\n            v.push_back(nums[i] - target[i]);\n        \n        nodes.resize(4 * n);\n        build(1, 1, n, v);\n\n        LL ans = 0;\n        \n        int r = n;\n        int l = 1;\n        while (l <= r) {\n            LL vl = 0, vr = 0;\n            while (l <= r && 0 <= (vl = get_val(1, 1, n, l)))\n                ++l;\n            while (l <= r && 0 <= (vr = get_val(1, 1, n, r)))\n                --r;\n            if (l <= r) {\n                LL d = min(abs(vl), abs(vr));\n                range_add(1, 1, n, l, r, d);\n                ans += d;\n            }\n        }\n        ans += get_val(1, 1, n, 1);\n        for (int i = 1; i < n; ++i) {\n            LL a = get_val(1, 1, n, i);\n            LL b = get_val(1, 1, n, i + 1);\n            ans += max(0LL, b - a);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721531989",
    "subm_id": "548389763"
}