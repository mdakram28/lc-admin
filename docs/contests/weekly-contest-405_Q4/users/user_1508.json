{
    "username": "jonliu03",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = {}\n        for word, cost in zip(words, costs):\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {}\n                node = node[char]\n            if '$' not in node:\n                node['$'] = cost\n            else:\n                node['$'] = min(node['$'], cost)\n\n        dp = [float('inf')] * (n + 1)\n        dp[n] = 0\n\n        for i in range(n - 1, -1, -1):\n            node = trie\n            for j in range(i, n):\n                if target[j] not in node:\n                    break\n                node = node[target[j]]\n                if '$' in node:\n                    dp[i] = min(dp[i], node['$'] + dp[j + 1])\n\n        return dp[0] if dp[0] != float('inf') else -1\n",
    "submit_ts": "1720321679",
    "subm_id": "1312329422"
}