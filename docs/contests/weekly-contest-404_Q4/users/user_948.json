{
    "username": "bommireddyvenkatadheerajreddy",
    "submission": "\nclass Solution {\npublic:\n    // Helper function to perform BFS and return the farthest node and distances\n    pair<int, vector<int>> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest_node = start;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthest_node]) {\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return make_pair(farthest_node, dist);\n    }\n\n    // Function to calculate the diameter of a tree\n    int treeDiameter(const vector<vector<int>>& edges, int n) {\n        if (n == 1) return 0; // Single node case\n        \n        vector<vector<int>> adj(n);\n        for (int i = 0; i < edges.size(); ++i) {\n            adj[edges[i][0]].emplace_back(edges[i][1]);\n            adj[edges[i][1]].emplace_back(edges[i][0]);\n        }\n\n        // Find the farthest node from node 0\n        pair<int, vector<int>> bfs_result1 = bfs(0, adj);\n        int farthest_node1 = bfs_result1.first;\n        vector<int> dist1 = bfs_result1.second;\n\n        // Find the farthest node from the previously found farthest node\n        pair<int, vector<int>> bfs_result2 = bfs(farthest_node1, adj);\n        int farthest_node2 = bfs_result2.first;\n        vector<int> dist2 = bfs_result2.second;\n\n        // The diameter is the maximum distance found in the second BFS\n        int diameter = *max_element(dist2.begin(), dist2.end());\n        \n        return diameter;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        int diameter1 = treeDiameter(edges1, n);\n        int diameter2 = treeDiameter(edges2, m);\n\n        // Calculate the minimum possible diameter after connecting the two trees\n        int min_possible_diameter = max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n        \n        return min_possible_diameter;\n    }\n};\n\n",
    "submit_ts": 1719716936.0
}