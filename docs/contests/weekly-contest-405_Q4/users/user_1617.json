{
    "username": "alchemist_17",
    "submission": "struct Node {\n    unordered_map<char, Node*> links;\n    vector<pair<int, int>> v;\n\n    bool containsKey(char x) { return links.count(x); }\n\n    void put(char x) { links[x] = new Node(); }\n\n    Node* next(char x) { return links[x]; }\n\n    void addWordEnd(int index, int cost) { v.push_back({index, cost}); }\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() { root = new Node(); }\n\n    void insert(string& word, int index, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->containsKey(c)) {\n                node->put(c);\n            }\n            node = node->next(c);\n        }\n        node->addWordEnd(index, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(nullptr);\n        cout.tie(nullptr);\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->links.count(target[j]) == 0) {\n                    break;\n                }\n\n                node = node->next(target[j]);\n                for (auto& p : node->v) {\n                    int in = p.first;\n                    int cost = p.second;\n                    int sz = words[in].size();\n                    if (i + sz <= n) {\n                        dp[i + sz] = min(dp[i + sz], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323699",
    "subm_id": "1312381908"
}