{
    "username": "KondalDurgam",
    "submission": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nclass STree {\n    constructor(nums) {\n        this.nums = nums;\n        this.n = nums.length;\n        this.tree = new Array(this.n * 4).fill(0);\n        this.build(0, 0, this.n - 1);\n    }\n\n    isPeak(index) {\n        if (index <= 0 || index >= this.n - 1) return false;\n        return this.nums[index] > this.nums[index - 1] && this.nums[index] > this.nums[index + 1];\n    }\n\n    build(node, start, end) {\n        if (start == end) {\n            this.tree[node] = this.isPeak(start) ? 1 : 0;\n        } else {\n            let mid = Math.floor((start + end) / 2);\n            this.build(2 * node + 1, start, mid);\n            this.build(2 * node + 2, mid + 1, end);\n            this.tree[node] = this.tree[2 * node + 1] + this.tree[2 * node + 2];\n        }\n    }\n\n    update(index, value, node, start, end) {\n        if (start == end) {\n            this.nums[index] = value;\n            this.tree[node] = this.isPeak(index) ? 1 : 0;\n        } else {\n            let mid = Math.floor((start + end) / 2);\n            if (index <= mid) {\n                this.update(index, value, 2 * node + 1, start, mid);\n            } else {\n                this.update(index, value, 2 * node + 2, mid + 1, end);\n            }\n            this.tree[node] = this.tree[2 * node + 1] + this.tree[2 * node + 2];\n        }\n    }\n\n    query(l, r, node, start, end) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return this.tree[node];\n        }\n        let mid = Math.floor((start + end) / 2);\n        let leftQuery = this.query(l, r, 2 * node + 1, start, mid);\n        let rightQuery = this.query(l, r, 2 * node + 2, mid + 1, end);\n        return leftQuery + rightQuery;\n    }\n\n    queryRange(l, r) {\n        return this.query(l, r, 0, 0, this.n - 1);\n    }\n\n    updateValue(index, value) {\n        this.update(index, value, 0, 0, this.n - 1);\n        if (index > 0) {\n            this.update(index - 1, this.nums[index - 1], 0, 0, this.n - 1);\n        }\n        if (index < this.n - 1) {\n            this.update(index + 1, this.nums[index + 1], 0, 0, this.n - 1);\n        }\n    }\n}\nvar countOfPeaks = function(nums, queries) {\n    const sTree = new STree(nums);\n    const result = [];\n\n    for (let query of queries) {\n        if (query[0] === 1) {\n            const [_, li, ri] = query;\n            result.push(sTree.queryRange(li + 1, ri - 1));\n        } else if (query[0] === 2) {\n            const [_, indexi, vali] = query;\n            sTree.updateValue(indexi, vali);\n        }\n    }\n\n    return result;\n};",
    "submit_ts": "1718509782",
    "subm_id": "1289717169"
}