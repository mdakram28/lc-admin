{
    "username": "johnandreslee",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        class SegmentTree:\n            def __init__(self, data):\n                self.n = len(data)\n                self.data = data\n                self.tree = [0] * (4 * self.n)\n                self.build(0, 0, self.n - 1)\n\n            def build(self, node, start, end):\n                if start == end:\n                    self.tree[node] = self.is_peak(start)\n                else:\n                    mid = (start + end) // 2\n                    left_child = 2 * node + 1\n                    right_child = 2 * node + 2\n                    self.build(left_child, start, mid)\n                    self.build(right_child, mid + 1, end)\n                    self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n            def is_peak(self, idx):\n                if idx == 0 or idx == self.n - 1:\n                    return 0\n                if self.data[idx] > self.data[idx - 1] and self.data[idx] > self.data[idx + 1]:\n                    return 1\n                return 0\n\n            def query(self, node, start, end, L, R):\n                if start > R or end < L:\n                    return 0\n                if L <= start and end <= R:\n                    return self.tree[node]\n                mid = (start + end) // 2\n                left_child = 2 * node + 1\n                right_child = 2 * node + 2\n                left_sum = self.query(left_child, start, mid, L, R)\n                right_sum = self.query(right_child, mid + 1, end, L, R)\n                return left_sum + right_sum\n\n            def update(self, node, start, end, idx):\n                if start == end:\n                    self.tree[node] = self.is_peak(idx)\n                else:\n                    mid = (start + end) // 2\n                    left_child = 2 * node + 1\n                    right_child = 2 * node + 2\n                    if start <= idx <= mid:\n                        self.update(left_child, start, mid, idx)\n                    else:\n                        self.update(right_child, mid + 1, end, idx)\n                    self.tree[node] = self.tree[left_child] + self.tree[right_child]\n        \n        \n        n = len(nums)\n        st = SegmentTree(nums)\n        result = []\n\n        for q in queries:\n            if q[0] == 1:\n                li, ri = q[1], q[2]\n                if li == ri:\n                    result.append(0)\n                else:\n                    result.append(st.query(0, 0, n - 1, li + 1, ri - 1))\n            elif q[0] == 2:\n                idx, val = q[1], q[2]\n                nums[idx] = val\n                if idx > 0:\n                    st.update(0, 0, n - 1, idx - 1)\n                st.update(0, 0, n - 1, idx)\n                if idx < n - 1:\n                    st.update(0, 0, n - 1, idx + 1)\n\n        return result\n\n    \n    ",
    "submit_ts": 1718506102.0
}