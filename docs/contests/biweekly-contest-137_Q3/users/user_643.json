{
    "username": "JYOTI JAIN",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Step 1: Find top 3 elements in each row\n        vector<vector<pair<int, int>>> topThree(m);\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                topThree[i].push_back({board[i][j], j});\n            }\n            sort(topThree[i].rbegin(), topThree[i].rend());\n            if (topThree[i].size() > 3) topThree[i].resize(3);\n        }\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Step 2 & 3: Generate combinations and check column constraint\n        for (int i = 0; i < m - 2; i++) {\n            for (int j = i + 1; j < m - 1; j++) {\n                for (int k = j + 1; k < m; k++) {\n                    for (auto& x : topThree[i]) {\n                        for (auto& y : topThree[j]) {\n                            for (auto& z : topThree[k]) {\n                                if (x.second != y.second && y.second != z.second && z.second != x.second) {\n                                    // Step 4: Update max sum\n                                    maxSum = max(maxSum, (long long)x.first + y.first + z.first);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723909378",
    "subm_id": "1359190265"
}