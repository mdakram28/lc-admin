{
    "username": "aditya_c0des",
    "submission": "/*--structure--*/\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> child;\n    int cost;\n    bool isEnd;\n    \n    TrieNode(): cost(INT_MAX), isEnd(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for(char ch: word) {\n            if(node->child.find(ch) == node->child.end()) {\n                node->child[ch] = new TrieNode();\n            }\n            node = node->child[ch];\n        }\n        node->isEnd = true;\n        node->cost = min(node->cost, cost);\n    }\n};\n\n/*--structure--*/\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.length();\n        vector<int> dp(n+1,INT_MAX);\n        dp[0]=0;\n\n        Trie trie;\n        for(int i=0; i<words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for(int i=0; i<n; ++i) {\n            if(dp[i]==INT_MAX)continue;\n\n            TrieNode* node=trie.root;\n            for(int j=i; j<n; ++j) {\n                if(node->child.find(target[j])==node->child.end())break;\n                node=node->child[target[j]];\n                if(node->isEnd) {\n                    dp[j+1]=min(dp[j+1], dp[i]+node->cost);\n                }\n            }\n        }\n        \n        return dp[n]==INT_MAX?-1:dp[n];\n    }\n};",
    "submit_ts": "1720321761",
    "subm_id": "1312331605"
}