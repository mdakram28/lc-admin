{
    "username": "chandrkant54",
    "submission": "class Solution {\npublic:\n\nint f(int t){\n    return t*1000;\n}\n    \nint minChanges(vector<int>& nums, int k) {\n    map<int, vector<int>> diffToMaxValMap;\n    vector<int> allMaxValues;\n    int a=f(5);\n    int n = nums.size();\n\n    // Step through the first half of the array to find pairs\n    for (int i = 0; i < n / 2; ++i) {\n        int elem1 = nums[i];\n        int elem2 = nums[n - i - 1];\n        int diff = abs(elem1 - elem2);\n\n        // Calculate possible maximum values for changes\n        int maxPossibleVal = max({elem1, elem2, k - elem1, k - elem2});\n\n        // Map the difference to possible max values\n        diffToMaxValMap[diff].push_back(maxPossibleVal);\n        allMaxValues.push_back(maxPossibleVal);\n    }\n\n    int minChangesRequired = n;\n\n    // Sort the list of all maximum values\n    sort(allMaxValues.begin(), allMaxValues.end());\n\n    // Calculate the minimum number of changes required\n    for (const auto& [diff, maxValues] : diffToMaxValMap) {\n        int threshold = lower_bound(allMaxValues.begin(), allMaxValues.end(), diff) - allMaxValues.begin();\n        threshold = threshold * 2 + (n / 2 - threshold);\n\n        for (const auto& maxVal : maxValues) {\n            if (maxVal < diff) {\n                threshold -= 2;\n            } else {\n                threshold -= 1;\n            }\n        }\n\n        minChangesRequired = min(minChangesRequired, threshold);\n    }\n\n    return minChangesRequired;\n}\n};",
    "submit_ts": "1721489800",
    "subm_id": "1327464174"
}