{
    "username": "Kevinchenshujian",
    "submission": "class TrieNode {\n    constructor() {\n        this.children = {};\n        this.cost = Infinity;\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.root = new TrieNode();\n    }\n\n    insert(word, cost) {\n        let node = this.root;\n        for (let char of word) {\n            if (!node.children[char]) {\n                node.children[char] = new TrieNode();\n            }\n            node = node.children[char];\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n\n    searchPrefixes(target, start, dp) {\n        let node = this.root;\n        for (let i = start; i < target.length; i++) {\n            if (!node.children[target[i]]) {\n                break;\n            }\n            node = node.children[target[i]];\n            dp[i + 1] = Math.min(dp[i + 1], dp[start] + node.cost);\n        }\n    }\n}\n/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost = function (target, words, costs) {\n    const trie = new Trie();\n    for (let i = 0; i < words.length; i++) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    const n = target.length;\n    const dp = new Array(n + 1).fill(Infinity);\n    dp[0] = 0;\n\n    for (let i = 0; i < n; i++) {\n        if (dp[i] === Infinity) continue;\n        trie.searchPrefixes(target, i, dp);\n    }\n\n    return dp[n] === Infinity ? -1 : dp[n];\n\n};",
    "submit_ts": "1720323791",
    "subm_id": "1312384146"
}