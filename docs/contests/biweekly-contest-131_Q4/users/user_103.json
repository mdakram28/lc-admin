{
    "username": "nocturne_",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeMap;\nimport java.util.concurrent.ConcurrentSkipListSet;\n\nclass Solution {\n    public List<Boolean> getResults(int[][] queries) {\n        ConcurrentSkipListSet<Integer> skipListSet = new ConcurrentSkipListSet<>();\n        skipListSet.add(0);\n        skipListSet.add(Integer.MAX_VALUE);\n\n        TreeMap<Integer, Integer> maxSpace = new TreeMap<>();\n        maxSpace.put(Integer.MAX_VALUE, Integer.MAX_VALUE);\n\n        List<Boolean> result = new ArrayList<>();\n\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int x = query[1];\n                Integer behind = skipListSet.ceiling(x);\n                Integer front = skipListSet.floor(x);\n\n                int space = Math.max(maxSpace.getOrDefault(front, 0), x - front);\n                maxSpace.put(x, space);\n\n                skipListSet.add(x);\n\n                int preSpace = space;\n                int pre = x;\n                for (Integer node : skipListSet.tailSet(behind, true)) {\n                    int currentSpace = node - pre;\n                    int actualSpace = Math.max(currentSpace, preSpace);\n\n                    if (actualSpace >= maxSpace.get(node)) {\n                        break;\n                    } else {\n                        maxSpace.put(node, actualSpace);\n                        pre = node;\n                        preSpace = actualSpace;\n                    }\n                }\n            } else {\n                int x = query[1];\n                int sz = query[2];\n\n                Integer floor = skipListSet.floor(x);\n\n                int space = Math.max(x - floor, maxSpace.getOrDefault(floor, 0));\n\n                result.add(space >= sz);\n            }\n        }\n\n        return result;\n    }\n}",
    "submit_ts": 1716650027.0
}