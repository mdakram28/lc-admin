{
    "username": "snamy520",
    "submission": "impl Solution {\n        pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {\n            const UB: usize = 30;\n            const OO: i32 = (1 << UB) - 1;\n            let n = nums.len();\n            let sb = {\n                let mut sb = vec![Vec::with_capacity(n + 1); UB];\n                for b_i in 0..UB {\n                    let mut s = 0;\n                    sb[b_i].push(s);\n                    for (i, v) in nums.iter().enumerate() {\n                        s += (v >> b_i) & 1;\n                        sb[b_i].push(s);\n                    }\n                }\n                sb\n            };\n            let get_and = |i: usize, j: usize| -> i32 {\n                let w = (j - i) as i32;\n                if w == 0 {\n                    return OO;\n                }\n                let mut d = 0;\n                for b_i in 0..UB {\n                    let c = sb[b_i][j] - sb[b_i][i];\n                    if c == w {\n                        d |= 1 << b_i;\n                    }\n                }\n                d\n            };\n            // for i in 0..n { for j in i..=n { println!(\"{i} {j}: {}\", get_and(i, j)); } }\n            let (mut r, mut i, mut j_s, mut j_t) = (0, 0, 0, 0);\n            while i < n {\n                if j_s < i {\n                    j_s = i;\n                }\n                let mut cur_s = get_and(i, j_s);\n                while j_s < n {\n                    let v = cur_s & nums[j_s];\n                    if v <= k {\n                        break;\n                    }\n                    j_s += 1;\n                    cur_s = v;\n                }\n                if j_t < j_s {\n                    j_t = j_s;\n                }\n                let mut cur_t = get_and(i, j_t);\n                while j_t < n {\n                    let v = cur_t & nums[j_t];\n                    if v < k {\n                        break;\n                    }\n                    j_t += 1;\n                    cur_t = v;\n                }\n                r += (j_t - j_s) as i64;\n                // println!(\"[{i}] {} | {j_s} ({cur_s}) | {j_t} ({cur_t}) => {r}\", nums[i]);\n                i += 1;\n            }\n            r\n        }\n\n}",
    "submit_ts": "1720278995",
    "subm_id": "1311732881"
}