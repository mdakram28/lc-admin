{
    "username": "deadRabbit",
    "submission": "int MX = -1;\nvector<pair<int,int>> C;\n\nvoid check(int d, int a, int b) {\n    if (d>MX) {\n        MX = d;\n        C.clear();\n        C.push_back({a,b});\n    } else if (d==MX) {\n        C.push_back({a,b});\n    }\n}\n\nint run_maxes(vector<vector<int>> &P, int ignore=-1) {\n    int add = 0;\n    set<pair<int,int>> Q;\n    MX = -1;\n    C.clear();\n    for (int i = P.size()-1; i>=0; --i) if (i!=ignore) {\n        if (Q.size()) {\n            check(((--Q.end())->first - (P[i][0] + P[i][1])), i, (--Q.end())->second);\n            if (Q.size()>1) {\n                check(-(Q.begin()->first + (P[i][0] - P[i][1])), i, Q.begin()->second);    \n            }\n        } \n        Q.insert({P[i][1]+P[i][0],i});\n        Q.insert({P[i][1]-P[i][0],i});\n    }\n    return MX;\n}\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& P) {\n        sort(P.begin(), P.end());\n        run_maxes(P);\n        int c1 = C[0].first;\n        int c2 = C[0].second;\n        return min(run_maxes(P,c1), run_maxes(P,c2));\n    }\n};"
}