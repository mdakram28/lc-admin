{
    "username": "Access-Denied",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        const int n = grid.size();\n        const int m = grid.front().size();\n\n\n        int res = 0;\n        for (int i = 0; i < (n >> 1); ++i) {\n            for (int j = 0; j < (m >> 1); ++j) {\n                int ones = grid[i][j] +\n                    grid[i][m - j - 1] +\n                    grid[n - i - 1][j] +\n                    grid[n - i - 1][m - j - 1];\n                res += std::min(ones, 4 - ones);\n            }\n        }\n\n        int centerMismatchPairs = 0;\n        int centerOnePairs = 0;\n        if (n & 1) { // row in the middle\n            for (int j = 0; j < (m >> 1); ++j) {\n                if (grid[n >> 1][j] != grid[n >> 1][m - j - 1]) {\n                    centerMismatchPairs++;\n                } else {\n                    centerOnePairs += grid[n >> 1][j];\n                }\n            }\n        }\n\n        if (m & 1) {\n            for (int i = 0; i < (n >> 1); ++i) {\n                if (grid[i][m >> 1] != grid[n - i - 1][m >> 1]) {\n                    centerMismatchPairs++;\n                } else {\n                    centerOnePairs += grid[i][m >> 1];\n                }\n            }\n        }\n\n        centerOnePairs %= 2;\n        if (centerOnePairs == 1 && centerMismatchPairs == 0) {\n            res += 2; // make last pair of 1-s to 00\n        } else {\n            res += centerMismatchPairs;\n        }\n\n        if ((n & 1) && (m & 1)) {\n            res += grid[n >> 1][m >> 1];\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1722698009",
    "subm_id": "1343166646"
}