{
    "username": "goldenwind",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int, int>> lu, ld, ru, rd;\n        for(int i=0; i<points.size(); i++) {\n            ld.push_back({-points[i][0] - points[i][1], i});\n            ru.push_back({ points[i][0] + points[i][1], i});\n            lu.push_back({-points[i][0] + points[i][1], i});\n            rd.push_back({ points[i][0] - points[i][1], i});\n        }\n        sort(lu.begin(), lu.end());\n        sort(ru.begin(), ru.end());\n        sort(ld.begin(), ld.end());\n        sort(rd.begin(), rd.end());\n        \n        int _max = 0;\n        vector<int> p;\n        for(int i=0; i<points.size(); i++) {\n            int d1 = points[i][0] + points[i][1] + ld.back().first;\n            int d2 = -points[i][0] - points[i][1] + ru.back().first;\n            int d3 = points[i][0] - points[i][1] + lu.back().first;\n            int d4 = -points[i][0] + points[i][1] + rd.back().first;\n            int d = max(max(d1,d2),max(d3,d4));\n            \n            if(d > _max) {\n                _max = d;\n                p.clear();\n                p.push_back(i);\n            } else if(d == _max) {\n                p.push_back(i);\n            }\n        }\n        \n        cout << _max << endl;\n        \n        // for(int i:p) cout << i << ' '; cout << endl;\n        \n        \n        // if(p.size() > 2) {\n        //     return _max;\n        // }\n        \n        int res = _max;\n        for(int rm: p) {\n            int tmp = 0;\n            for(int i=0; i<points.size(); i++) {\n                if(i == rm) continue;\n                \n                int d1 = points[i][0] + points[i][1] + ld.back().first;\n                if(ld.back().second == rm) d1 = points[i][0] + points[i][1] + ld[n-2].first;\n                int d2 = -points[i][0] - points[i][1] + ru.back().first;\n                if(ru.back().second == rm) d2 = -points[i][0] - points[i][1] + ru[n-2].first;\n                int d3 = points[i][0] - points[i][1] + lu.back().first;\n                if(lu.back().second == rm) d3 = points[i][0] - points[i][1] + lu[n-2].first;\n                int d4 = -points[i][0] + points[i][1] + rd.back().first;\n                if(rd.back().second == rm) d4 = -points[i][0] + points[i][1] + rd[n-2].first;\n                int d = max(max(d1,d2),max(d3,d4));\n                tmp = max(tmp, d);\n            }\n            res = min(res, tmp);\n        }\n        \n        return res;\n    }\n};\n\n// x1+y1 -x2-y2 ld\n// -x1-y1+x2+y2 ru\n// x1-y1 -x2+y2 lu\n// -x1+y1+x2-y2 rd"
}