{
    "username": "adgsful",
    "submission": "#include <ext/pb_ds/assoc_container.hpp>\nusing namespace __gnu_pbds;\ntemplate <typename T> \nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag,tree_order_statistics_node_update>;\n\ntemplate <typename T> struct ordered_multiset {\n    ordered_set<pair<T, int>> ost;\n    map<T, int> freq;\n\n    void insert(T val) {\n        ost.insert(make_pair(val, ++freq[val]));\n    }\n\n    void erase(T val) {\n        ost.erase(make_pair(val, freq[val]--));\n    }\n\n    int order_of_key(T val) {\n        return ost.order_of_key(make_pair(val, -1));\n    }\n\n    T find_by_order(T val) {\n        return ost.find_by_order(val)->first;\n    }\n\n    int size() {\n        return ost.size();\n    }\n\n    bool empty() {\n        return ost.empty();\n    }\n\n};\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n=nums.size();\n        unordered_map<int,int> mp;\n        ordered_multiset<int> s;\n        for(int i=0;i<n/2;i++){\n            if (nums[i]>nums[n-1-i]) swap(nums[i],nums[n-1-i]);\n            mp[abs(nums[i]-nums[n-1-i])]++;\n            int g=max(k-nums[i],nums[n-1-i]-0);\n            //cout<<g<<\" \"<<s.order_of_key(g)<<\" \";\n            s.insert(g);\n        }\n        \n        //cout<<\"\\n\";\n        int ans=1e9;\n        for(int x=0;x<=k;x++){\n            \n            int cnt=0;\n            int g_small=s.order_of_key(x);\n            //cout<<x<<\"\u3000\"<<g_small<<\" \";\n            cnt+=g_small*2;\n            cnt+=(n/2-g_small);\n            cnt-=mp[x];\n            ans=min(ans,cnt);\n        }\n        return (int)ans;\n    }\n};",
    "submit_ts": "1721490195",
    "subm_id": "1327475783"
}