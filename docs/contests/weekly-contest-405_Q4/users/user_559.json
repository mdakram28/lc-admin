{
    "username": "Mj13",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        num_words = len(words)\n        word_cost_map = {}\n        for index, word in enumerate(words):\n            if word in word_cost_map:\n                word_cost_map[word] = min(word_cost_map[word], costs[index])\n            else:\n                word_cost_map[word] = costs[index]\n        dp = [float('inf')] * (len(target) + 1)\n        dp[0] = 0\n        for i in range(1, len(target) + 1):\n            for word, cost in word_cost_map.items():\n                word_length = len(word)\n                if i >= word_length and target[i - word_length:i] == word:\n                    dp[i] = min(dp[i], dp[i - word_length] + cost)\n        result = dp[len(target)]\n        return result if result != float('inf') else -1\n",
    "submit_ts": "1720321810",
    "subm_id": "1312332884"
}