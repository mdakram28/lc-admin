{
    "username": "REED_W",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        return sln1(edges1, edges2);\n    }\n\n    private int sln1(int[][] edges1, int[][] edges2){\n        int n = edges1.length+1;\n        int m = edges2.length+1;\n        int l1 = help(edges1);\n        int l2 = help(edges2);\n        //System.out.printf(\"%d %d\\n\", l1, l2);\n        if(l1>l2) {\n            if(l1/2 <= (l2+1)/2+1) return (l1+1)/2+(l2+1)/2+1;\n            else return l1;\n        }else{\n            if(l2/2 <= (l1+1)/2+1) return (l1+1)/2+(l2+1)/2+1;\n            else return l2;\n        }\n    }\n\n    private int help(int[][] edges){\n        int n = edges.length+1;\n        int total = n;\n        List<Integer>[] es = new List[n];\n        for(int i = 0;i<n;i++) es[i] = new ArrayList<>();\n        int[] deg = new int[n];\n        for(int[] e: edges){\n            es[e[0]].add(e[1]);\n            es[e[1]].add(e[0]);\n            deg[e[0]]++;\n            deg[e[1]]++;\n        }\n        Deque<Integer> que = new ArrayDeque<>();\n        for(int i = 0;i<n;i++) if(deg[i] == 1) que.addLast(i);\n        int step = 0;\n        while(que.size()>0 && total>2){\n            for(int l = que.size(); l>0;l--){\n                total--;\n                int curr = que.removeFirst();\n                for(int next: es[curr]){\n                    deg[next]--;\n                    if(deg[next] == 1) que.addLast(next);\n                }\n            }\n            step+=2;\n        }\n        if(total==2) step++;\n        return step;\n    }\n}",
    "submit_ts": "1719718783",
    "subm_id": "1304425964"
}