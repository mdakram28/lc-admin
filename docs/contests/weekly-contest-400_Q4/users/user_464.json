{
    "username": "21Cash",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(arr, 2 * node + 1, start, mid);\n            buildTree(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int rangeAnd(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return INT_MAX;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftAnd = rangeAnd(2 * node + 1, start, mid, L, R);\n        int rightAnd = rangeAnd(2 * node + 2, mid + 1, end, L, R);\n        return leftAnd & rightAnd;\n    }\n\n    void updateTree(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateTree(2 * node + 1, start, mid, idx, value);\n            } else {\n                updateTree(2 * node + 2, mid + 1, end, idx, value);\n            }\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\npublic:\n    SegmentTree(vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        buildTree(arr, 0, 0, n - 1);\n    }\n\n    int rangeAnd(int L, int R) {\n        return rangeAnd(0, 0, n - 1, L, R);\n    }\n\n    void update(int idx, int value) {\n        updateTree(0, 0, n - 1, idx, value);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int K) {\n        int N = nums.size();\n        int INF = 2e9;\n        int res = INF;\n        \n        SegmentTree segTree(nums);\n        \n        for(int i = 0; i < N; i++) {\n            \n            res = min(res, abs(nums[i] - K));\n            \n            if(nums[i] <= K) {\n                res = min(res, abs(nums[i] - K));\n                continue;\n            }\n            \n            int l = i, r = N - 1, best = l;\n            while(l <= r) {\n                int mid = l + (r - l) / 2;\n                \n                int andVal = segTree.rangeAnd(i, mid);\n                res = min(res, abs(K - andVal));\n                if(andVal == K) return 0;\n                \n                if(andVal < K) {\n                    r = mid - 1;\n                }\n                else l = mid + 1;\n            }\n        }\n        \n        return res;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n",
    "submit_ts": "1717298562",
    "subm_id": "1274783362"
}