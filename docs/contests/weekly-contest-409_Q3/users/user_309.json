{
    "username": "yi-zhi-bao-zi-h",
    "submission": "from sortedcontainers import SortedList\nfrom typing import *\n\nclass DiffFenwick:\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [[0, 0] for _ in range(n + 1)]\n\n    def _add(self, i: int, val: int):\n        mul = i * val\n        while i <= self.n:\n            self.tree[i][0] += val\n            self.tree[i][1] += mul\n            i += i & -i\n\n    def update(self, left: int, right: int, val: int) -> None:\n        self._add(left + 1, val)\n        self._add(right + 2, -val)\n\n    def prefix_query(self, index: int) -> int:\n        i = index + 1\n        s0, s1 = 0, 0\n        while i:\n            s0 += self.tree[i][0]\n            s1 += self.tree[i][1]\n            i &= i - 1\n        return (index + 2) * s0 - s1\n\n    def range_query(self, left: int, right: int) -> int:\n        return self.prefix_query(right) - self.prefix_query(left - 1)\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        s = SortedList()\n        cur = 0\n        ans = list()\n        ft = DiffFenwick(n + 1)\n        for q in queries:\n            u, v = q\n            l, r = s.bisect_left([u, u]), s.bisect_left([v, v]) - 1\n            if ft.range_query(u, v - 1) == v - u and r - l <= 0:\n                ans.append(n - 1 - cur + len(s))\n                continue\n            i = s.bisect_left([u, u])\n            while i < len(s) and s[i][0] < v:\n                _u, _v = s.pop(i)\n                cur -= _v - _u\n                ft.update(_u, _v - 1, -1)\n            s.add([u, v])\n            ft.update(u, v - 1, 1)\n            cur += v - u\n\n            ans.append(n - 1 - cur + len(s))\n        return ans\n\n",
    "submit_ts": "1722741184",
    "subm_id": "552336562"
}