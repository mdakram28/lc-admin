{
    "username": "Akash0P",
    "submission": "const int N = 1e5 + 5;\n\nclass SGTree {\n  int n;\n  vector<int> sg;\npublic:\n  SGTree() {\n    sg.resize(4*N);\n  }\n  void update(int idx, int x, int i, int l, int r) {\n    if(r < idx || idx < l) return;\n    if(l == r) {\n      sg[i] = x;\n      return;\n    }\n    int m = (l + r)/2;\n    update(idx, x, 2*i+1, l, m), update(idx, x, 2*i+2, m+1, r);\n    sg[i] = sg[2*i+1] + sg[2*i+2];\n  }\n  int query(int L, int R, int i, int l, int r) {\n    if(r < L || R < l) return 0;\n    if(L <= l && r <= R) return sg[i];\n    int m = (l + r)/2;\n    return query(L, R, 2*i+1, l, m) + query(L, R, 2*i+2, m+1, r);\n  }\n};\n\nclass SGMax {\n  int n;\n  vector<int> sg;\npublic:\n  SGMax() {\n    sg.resize(4*N);\n  }\n  void update(int idx, int x, int i, int l, int r) {\n    if(r < idx || idx < l) return;\n    if(l == r) {\n      sg[i] = x;\n      return;\n    }\n    int m = (l + r)/2;\n    update(idx, x, 2*i+1, l, m), update(idx, x, 2*i+2, m+1, r);\n    sg[i] = max(sg[2*i+1], sg[2*i+2]);\n  }\n  int query(int L, int R, int i, int l, int r) {\n    if(r < L || R < l) return 0;\n    if(L <= l && r <= R) return sg[i];\n    int m = (l + r)/2;\n    return max(query(L, R, 2*i+1, l, m), query(L, R, 2*i+2, m+1, r));\n  }\n};\n\nclass Solution {\npublic:\n  vector<bool> getResults(vector<vector<int>>& queries) {\n    vector<bool> ans;\n\n    int mm = queries.size();\n\n    SGTree num;\n    SGMax maxi;\n    set<int> st;\n    st.insert(0);\n\n    for(int i = 0; i < mm; i++) {\n      int t = queries[i][0], x = queries[i][1], sz;\n      if(t == 1) {\n        auto it = st.lower_bound(x);\n        if(it != st.end()) {\n\n          int id = *it;\n          maxi.update(id, id - x, 0, 0, N-1);\n\n          // modify maxi;\n        }\n        if(it != st.begin()) {\n          it--;\n\n          int id = *it;\n          maxi.update(x, x - id, 0, 0, N-1);\n\n          // modify maxi\n        }\n        st.insert(x);\n        num.update(x, 1, 0, 0, N-1);\n      }else{\n        sz = queries[i][2];\n\n        int tot = num.query(0, x, 0, 0, N-1);\n\n        if(tot == 0) {\n\n          if(x >= sz) ans.push_back(1);\n          else ans.push_back(0);\n          continue;\n\n        }\n\n        int index = x, low = 0, high = x;\n\n        while(low <= high) {\n\n          int mid = (low + high)/2;\n\n          if(num.query(0, mid, 0, 0, N-1) == tot) index = mid, high = mid - 1;\n          else low = mid + 1;\n\n        }\n\n        if(x - index >= sz) {\n          ans.push_back(1);\n          continue;\n        }\n\n        int mx = maxi.query(0, index, 0, 0, N-1);\n\n        if(mx >= sz) ans.push_back(1);\n        else ans.push_back(0);\n\n      }\n    }\n\n    return ans;\n  }\n};",
    "submit_ts": "1716650667",
    "subm_id": "1267621542"
}