{
    "username": "LarryNY",
    "submission": "INF = 10 ** 20\n\nclass Node:\n    def __init__(self):\n        self.edges = {}\n        self.cost = INF\n        \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        N = len(target)\n        root = Node()\n        \n        for word, cost in zip(words, costs):\n            current = root\n            \n            for c in word:\n                if c not in current.edges:\n                    current.edges[c] = Node()\n                current = current.edges[c]\n            current.cost = min(current.cost, cost)\n            \n        dp = [INF] * (N + 1)\n        dp[0] = 0\n            \n        for i in range(N):\n            \n            current = root\n            for j in range(i, N):\n                if target[j] not in current.edges:\n                    break\n                    \n                current = current.edges[target[j]]\n                if current.cost != INF:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + current.cost)\n            \n        #print(dp)\n        if dp[-1] >= INF:\n            return -1\n        return dp[-1]\n",
    "submit_ts": "1720320765",
    "subm_id": "1312303900"
}