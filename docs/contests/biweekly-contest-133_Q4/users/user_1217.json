{
    "username": "s-6",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int lebron, vector<vector<int>>& requirements) {\n        int mod = 1000000007;\n\n        sort(requirements.begin(), requirements.end());\n\n        int kobe = lebron * (lebron - 1) / 2;\n\n        vector<vector<int>> durant(lebron + 1, vector<int>(kobe + 1, 0));\n        durant[0][0] = 1;\n\n        auto countInversions = [&](vector<int>& prefix) {\n            int jordan = 0;\n            int len = prefix.size();\n            for (int i = 0; i < len; ++i) {\n                for (int j = i + 1; j < len; ++j) {\n                    if (prefix[i] > prefix[j]) {\n                        jordan++;\n                    }\n                }\n            }\n            return jordan;\n        };\n\n        for (int i = 1; i <= lebron; ++i) {\n            for (int j = 0; j <= kobe; ++j) {\n                durant[i][j] = durant[i - 1][j];\n                if (j > 0) {\n                    durant[i][j] = (durant[i][j] + durant[i][j - 1]) % mod;\n                }\n                if (j >= i) {\n                    durant[i][j] = (durant[i][j] - durant[i - 1][j - i] + mod) % mod;\n                }\n            }\n            for (auto& req : requirements) {\n                int curry = req[0];\n                int shaq = req[1];\n                if (curry == i - 1) {\n                    for (int j = 0; j <= kobe; ++j) {\n                        if (j != shaq) {\n                            durant[i][j] = 0;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n\n        int result = 0;\n        for (int j = 0; j <= kobe; ++j) {\n            result = (result + durant[lebron][j]) % mod;\n        }\n\n        return result;\n    }\n};\n\n",
    "submit_ts": "1719071890",
    "subm_id": "1296856387"
}