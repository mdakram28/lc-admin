{
    "username": "Heisenberg2003",
    "submission": "class Solution {\npublic:\n    struct TrieNode\n    {\n        TrieNode* child[26];\n        bool flag=false;\n        int cost=INT_MAX;\n        bool containChar(char character)\n        {\n            return (child[character-'a']!=NULL);\n        }\n        void putNode(char nxtchar,TrieNode* node)\n        {\n            child[nxtchar-'a']=node;\n        }\n        TrieNode* getNode(char character)\n        {\n            return child[character-'a'];\n        }\n        void setEnd(int costnode)\n        {\n            flag=true;\n            cost=min(cost,costnode);\n        }\n        bool isEnd()\n        {\n            return flag;\n        }\n        int whatCost()\n        {\n            return cost;\n        }\n    };\n\n    TrieNode* root = new TrieNode();\n\n    void insertWord(string &word,int &cost)\n    {\n        TrieNode* node=root;\n        for(int i=0;i<word.size();i++)\n        {\n            if(node->containChar(word[i]) == false)\n            {\n                node->putNode(word[i],new TrieNode());\n            }\n            node=node->getNode(word[i]);\n        }\n        node->setEnd(cost);\n        return;\n    }\n\n    int TrieDfs(string &word,int ptr,vector<long long>&dp)\n    {\n        if(ptr==word.size())\n        {\n            return 0;\n        }\n        if(dp[ptr]!=(-1))\n        {\n            return dp[ptr];\n        }\n        long long mincost=INT_MAX;\n        TrieNode* node=root;\n        for(int i=ptr;i<word.size();i++)\n        {\n            if(node->containChar(word[i]))\n            {\n                node=node->getNode(word[i]);\n            }\n            else\n            {\n                break;\n            }\n            if(node->isEnd())\n            {\n                mincost=min(mincost,(long long)node->whatCost()+TrieDfs(word,i+1,dp));\n            }\n        }\n        dp[ptr]=mincost;\n        return dp[ptr];\n    }\n    int minimumCost(string target,vector<string>&words,vector<int>&costs) \n    {\n        for(int i=0;i<words.size();i++)\n        {\n            insertWord(words[i],costs[i]);\n        }\n        vector<long long>dp(target.size(),-1);\n        long long ans=TrieDfs(target,0,dp);\n        if(ans>=INT_MAX)\n        {\n            ans=-1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720322805",
    "subm_id": "1312359570"
}