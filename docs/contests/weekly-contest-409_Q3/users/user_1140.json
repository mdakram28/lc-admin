{
    "username": "KUjeff",
    "submission": "class Solution(object):\n    def shortestDistanceAfterQueries(self, n, queries):\n        ans = []\n        distance = n-1\n        lis = []\n        m = 0\n\n        for a, b in queries:\n            ind = bisect_left(lis, (a, b))\n            #case1 enclosed by another interval\n            if ind > 0 and lis[ind-1][0] <= a and lis[ind-1][1] >= b: \n                # print(\"case1\")\n                pass\n            elif ind < m and lis[ind][0] == a and lis[ind][1] >= b:\n                # print(\"case1\")\n                pass\n            #case2 no overlap\n            elif m == 0 or (ind == 0 and lis[0][0] >= b) or (ind == m and lis[m-1][1] <= a) or (0 < ind < m and lis[ind-1][1] <= a and lis[ind][0] >= b):\n                # print(\"case2\")\n                m += 1\n                distance -= b - a - 1\n                lis.insert(ind, (a, b))\n            #case3 encloses other intervals\n            else:\n                # print(\"case3\")\n                i = ind-1 if (ind > 0 and lis[ind-1][0] == a) else ind\n                save = []\n                while i < m and lis[i][0] < b:\n                    save.append(i)\n                    i += 1\n                for i in save[::-1]:\n                    distance += lis[i][1] - lis[i][0] - 1\n                    lis.pop(i)\n                    m -= 1\n                m += 1\n                distance -= b - a - 1\n                lis.insert(ind, (a, b))\n            ans.append(distance)\n\n        return ans\n        \"\"\"\n        :type n: int\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        ",
    "submit_ts": "1722743531",
    "subm_id": "1343794050"
}