{
    "username": "Tani2611",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MODULO = 1_000_000_007; // Modulo constant\n    private static final int MAX_INV = 400; // Maximum number of inversions considered\n\n    public int numberOfPermutations(int n, int[][] constraints) {\n        // Map to store inversion requirements for specific lengths\n        Map<Integer, Integer> inversionRequirements = new HashMap<>();\n        for (int[] constraint : constraints) {\n            int permLength = constraint[0];\n            int requiredInversions = constraint[1];\n            inversionRequirements.put(permLength + 1, requiredInversions); // Adjust for 1-based index\n        }\n\n        // DP table to store the number of permutations with specific lengths and inversions\n        long[][] dpTable = new long[n + 1][MAX_INV + 1];\n        dpTable[0][0] = 1; // Base case: 1 permutation of length 0 with 0 inversions\n\n        for (int permLength = 1; permLength <= n; permLength++) {\n            // Iterate over all possible numbers of inversions\n            for (int invCount = 0; invCount <= MAX_INV; invCount++) {\n                // Iterate over all positions where a new element can be inserted\n                for (int newPosition = 0; newPosition < permLength; newPosition++) {\n                    int previousInversions = invCount - newPosition; // Calculate previous inversions\n                    if (previousInversions >= 0) {\n                        dpTable[permLength][invCount] = (dpTable[permLength][invCount] + dpTable[permLength - 1][previousInversions]) % MODULO; // Update current count\n                    }\n                }\n            }\n\n            // Apply inversion constraints if specified for the current length\n            if (inversionRequirements.containsKey(permLength)) {\n                int targetInversions = inversionRequirements.get(permLength); // Required inversions for this length\n                for (int invCount = 0; invCount <= MAX_INV; invCount++) {\n                    if (invCount != targetInversions) {\n                        dpTable[permLength][invCount] = 0; // Invalidate permutations that do not meet the requirement\n                    }\n                }\n            }\n        }\n\n        long totalCount = 0; // Variable to accumulate the final result\n        for (long permCount : dpTable[n]) {\n            totalCount = (totalCount + permCount) % MODULO; // Sum up all valid permutation counts\n        }\n\n        return (int) totalCount; // Return the result as an integer\n    }\n}\n",
    "submit_ts": "1719071588",
    "subm_id": "1296849982"
}