{
    "username": "qq1239426256",
    "submission": "class Solution {\npublic:\n    vector<int> prefix_function(string& s) {\n        int n = s.size();\n        vector<int> pi(n);\n        for (int i = 1; i < n; i++) {\n            int j = pi[i - 1];\n            while (j > 0 && s[i] != s[j]) j = pi[j - 1];\n            if (s[i] == s[j]) j++;\n            pi[i] = j;\n        }\n        return pi;\n    }\n    vector<int> kmp(string& text, string& pattern) {\n        vector<int> pi = prefix_function(pattern);\n        vector<int> res;\n        int c = 0, m = pattern.size();\n        for (int i = 0; i < text.size(); i++) {\n            char v = text[i];\n            while (c && pattern[c] != v) {\n                c = pi[c - 1];\n            }\n            if (pattern[c] == v) {\n                c++;\n            }\n            if (c == m) {\n                res.push_back(i - m + 1);\n                c = pi[c - 1];\n            }\n        }\n        return res;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // \u7ed9words\u53bb\u91cd\n        unordered_map<string, int> mp;\n        for (int i = 0; i < words.size(); i++) {\n            if (mp.count(words[i])) {\n                mp[words[i]] = min(mp[words[i]], costs[i]);\n            } else {\n                mp[words[i]] = costs[i];\n            }\n        }\n        words.clear();\n        costs.clear();\n        for (auto [k, v] : mp) {\n            words.push_back(k);\n            costs.push_back(v);\n        }\n        int n = target.size();\n        int m = words.size();\n        vector<int> mp1[n + 1];\n        for (int i = 0; i < m; i++) {\n            auto v = kmp(target, words[i]);\n            for (auto x : v)\n                mp1[x].push_back(i);\n        }\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        for (int i : mp1[0]) {\n            if (costs[i] < dp[words[i].size()]) {\n                dp[words[i].size()] = costs[i];\n                pq.push({costs[i], words[i].size()});\n            }\n        }\n        while (!pq.empty()) {\n            auto [cost, idx] = pq.top();\n            pq.pop();\n            if (cost > dp[idx]) continue;\n            for (int i : mp1[idx]) {\n                if (cost + costs[i] < dp[idx + words[i].size()]) {\n                    dp[idx + words[i].size()] = cost + costs[i];\n                    pq.push({cost + costs[i], idx + words[i].size()});\n                }\n            }\n        }\n        return dp[n] >= 1e9 ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322309",
    "subm_id": "1312346409"
}