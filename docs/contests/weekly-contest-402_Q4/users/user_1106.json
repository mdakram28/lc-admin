{
    "username": "jackieckc",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n/*\nconstexpr int n = 1000;\nSegTree<int> st(n);\nst.Update(0, 1);\nauto max_val = st.QueryMax(0, n - 1); // => 1\n*/\ntemplate <typename T>\nclass SegTree {\n public:\n  SegTree(int n) : n_(n) {\n    int sz = ceil(log2(n));\n    sz = 2 * pow(2, sz) - 1;\n    tree_ = vector<T>(sz);\n  }\n\n  T Query(int l, int r) { return query_util(0, l, r, 0, n_ - 1); }\n\n  void Update(int i, T val) { update_util(0, 0, n_ - 1, i, val); }\n\n private:\n  T query_util(int i, int qL, int qR, int l, int r) {\n    if (l >= qL && r <= qR) return tree_[i];\n    if (l > qR || r < qL) return 0;\n    int m = (l + r) / 2;\n    return query_util(2 * i + 1, qL, qR, l, m) +\n               query_util(2 * i + 2, qL, qR, m + 1, r);\n  }\n\n  void update_util(int i, int l, int r, int pos, T val) {\n    if (pos < l || pos > r) return;\n    if (l == r) {\n      tree_[i] = val;\n      return;\n    }\n    int m = (l + r) / 2;\n    update_util(2 * i + 1, l, m, pos, val);\n    update_util(2 * i + 2, m + 1, r, pos, val);\n    tree_[i] = tree_[2 * i + 1] + tree_[2 * i + 2];\n  }\n\n  int n_;\n  vector<T> tree_;\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> res;\n        vector<int> arr(n);\n        SegTree<int> st(n);\n        \n        for (int i = 1; i < n - 1; i++) {\n            arr[i] = nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n            st.Update(i, arr[i]);\n        }\n        // for (auto v : arr) {\n        //     cout << v << \" \";\n        // }\n        // cout << endl;\n        \n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                // cout << \"q \" << q[1] << \" \" << q[2] << \" \" << st.Query(q[1] + 1, q[2] - 1) << endl;\n                res.push_back(st.Query(q[1] + 1, q[2] - 1));        \n            } else {\n                int i = q[1];\n                nums[q[1]] = q[2];\n                for (int j = i - 1; j <= i + 1; j++) {\n                    if (j > 0 && j < n - 1) {\n                        int v = nums[j] > nums[j - 1] && nums[j] > nums[j + 1];\n                        // cout << \"update \" << j << \" \" << v << endl;\n                        st.Update(j, v);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718508656",
    "subm_id": "1289687555"
}