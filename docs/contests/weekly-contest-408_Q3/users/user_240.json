{
    "username": "theabbie",
    "submission": "class Solution {\npublic:\n    int numberOfSubstrings(string s) {\n        int n = s.length();\n        vector<int> p(n + 1, 0);\n        for (int i = 0; i < n; i++) {\n            p[i + 1] = p[i] + (s[i] == '1');\n        }\n        vector<int> dp(n + 1, 0);\n        for (int i = n - 1; i >= 0; i--) {\n            if (s[i] == '1') {\n                dp[i] = 1 + dp[i + 1];\n            } else {\n                dp[i] = 0;\n            }\n        }\n        int res = 0;\n        int i = 0;\n        while (i < n) {\n            int ctr = 1;\n            while (i < n - 1 && s[i] == s[i + 1]) {\n                ctr++;\n                i++;\n            }\n            if (s[i] == '1') {\n                res += ctr * (ctr + 1) / 2;\n            }\n            i++;\n        }\n        for (int z = 1; z <= n - p[n] && z * z <= p[n]; z++) {\n            int j = 0;\n            for (int i = 0; i < n; i++) {\n                j = max(j, i);\n                while (j < n && (j - i + 1) - (p[j + 1] - p[i]) < z) {\n                    j++;\n                }\n                if (j == n) {\n                    break;\n                }\n                int ones = p[j + 1] - p[i];\n                int lower = max(z * z - ones, 0);\n                res += max(dp[j + 1] - lower + 1, 0);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722136305",
    "subm_id": "1335730194"
}