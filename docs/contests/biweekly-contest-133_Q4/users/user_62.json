{
    "username": "SrikanthPula",
    "submission": "class Solution {\n      \n    private static final int MOD = 1000000007;\n    public int numberOfPermutations(int n, int[][] requirements) {\n       \n        int[][] dpArray = new int[n + 1][401];\n        dpArray[0][0] = 1; \n\n        \n        for (int i = 1; i <= n; i++) {\n            for (int k = 0; k <= 400; k++) {\n                for (int j = 0; j < i; j++) {\n                    if (k - j >= 0) {\n                        dpArray[i][k] = (dpArray[i][k] + dpArray[i - 1][k - j]) % MOD;\n                    }\n                }\n            }\n        }\n\n        int[] prefixInversions = new int[n];\n        Arrays.fill(prefixInversions, -1);\n        for (int[] req : requirements) {\n            prefixInversions[req[0]] = req[1];\n        }\n\n        return calculateValidPermutations(dpArray, n, prefixInversions);\n    }\n\n    private int calculateValidPermutations(int[][] dp, int n, int[] prefixInversions) {\n        int[][] validDpArr = new int[n + 1][401];\n        validDpArr[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int k = 0; k <= 400; k++) {\n                for (int j = 0; j < i; j++) {\n                    if (k - j >= 0 && validDpArr[i - 1][k - j] > 0) {\n                        if (prefixInversions[i - 1] == -1 || prefixInversions[i - 1] == k) {\n                            validDpArr[i][k] = (validDpArr[i][k] + validDpArr[i - 1][k - j]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int k = 0; k <= 400; k++) {\n            if (prefixInversions[n - 1] == -1 || prefixInversions[n - 1] == k) {\n                ans = (ans + validDpArr[n][k]) % MOD;\n            }\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1719068238",
    "subm_id": "1296758052"
}