{
    "username": "tepamid",
    "submission": "\n#define fo(i, n) for (int i = 0; i < n; ++i)\n#define foback(i, n) for (int i = n - 1; i >= 0; --i)\n#define fo1(i, n) for (ll i = 1; i <= n; ++i)\n\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define makeunique(x) sort(all(x)), (x).resize(unique(all(x)) - (x).begin())\n\ntypedef long long ll;\n\nstruct SegTreeSetGetMax\n{\n    typedef ll Node;\n\n    Node op(Node lv, Node rv) {\n        return max(lv, rv);\n    }\n\n    void setLeaf(int x, int v) {\n        tree[x] = v;\n    }\n\n    const Node ZERO = 0;\n\n    vector<Node> tree;\n    int size;\n\n    void init(int n) {\n        size = 1;\n        while (size < n)\n            size *= 2;\n        tree.assign(2 * size - 1, ZERO);\n    }\n\n//     void build(const vector<Node> &a, int x, int lx, int rx) {\n//         if (rx - lx == 1) {\n//             if (lx < a.size())\n//                 setLeaf(x, a[lx]);\n//             return;\n//         }\n\n//         int m = (lx + rx) / 2;\n//         build(a, getLeftChild(x), lx, m);\n//         build(a, getRightChild(x), m, rx);\n\n//         tree[x] = op(tree[getLeftChild(x)], tree[getRightChild(x)]);\n//     }\n\n//     void build(const vector<Node> &a) {\n//         init(a.size());\n//         build(a, 0, 0, size);\n//     }\n\n    void set(int i, Node v) {\n        set(i, v, 0, 0, size);\n    }\n\n    void set(int i, Node v, int x, int lx, int rx) {\n        if (rx - lx == 1)\n        {\n            setLeaf(x, v);\n            return;\n        }\n\n        int m = (lx + rx) / 2;\n        if (i < m)\n        {\n            set(i, v, getLeftChild(x), lx, m);\n        }\n        else\n        {\n            set(i, v, getRightChild(x), m, rx);\n        }\n\n        tree[x] = op(tree[getLeftChild(x)], tree[getRightChild(x)]);\n    }\n\n    Node get(int l, int r, int x, int lx, int rx)\n    {\n        if (lx >= r || l >= rx)\n        {\n            return ZERO;\n        }\n\n        if (lx >= l && rx <= r)\n        {\n            return tree[x];\n        }\n\n        int m = (lx + rx) / 2;\n        auto s1 = get(l, r, getLeftChild(x), lx, m);\n        auto s2 = get(l, r, getRightChild(x), m, rx);\n        return op(s1, s2);\n    }\n\n    Node get(int l, int r)\n    {\n        return get(l, r, 0, 0, size);\n    }\n\n    int getLeftChild(int x)\n    {\n        return 2 * x + 1;\n    }\n\n    int getRightChild(int x)\n    {\n        return 2 * x + 2;\n    }\n};\n\n\n\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& qs) {\n        vector<bool> ans;\n        \n        set<int> se;\n        se.insert(0);\n        \n        SegTreeSetGetMax st;\n        st.init(100'100);\n        // a[0] = 1e9;\n        st.set(0, 1e9);\n        \n        for(auto q:qs) {\n            auto t = q[0];\n            auto x = q[1];\n            \n            auto px = x;\n            {\n                auto it = se.upper_bound(x);\n                it = prev(it);\n                px = *it;\n            }\n            \n            if (t == 1) {\n                se.insert(x);\n                auto len = st.get(px,px+1); // a[px];\n                auto newLen = x-px;\n                // a[px] = newLen;\n                // a[x] = len - newLen;\n                \n                st.set(px, newLen);\n                st.set(x, len - newLen);\n                \n            } else {\n                auto sz = q[2];\n                \n                ll lastLen = x - px;\n                ll maxLen = st.get(0, px);\n                \n                // cout << sz << endl;\n                // cout << maxLen << \" \" << lastLen << endl;\n                \n                if (se.size()==1) {\n                    maxLen = x;\n                }\n                \n                maxLen = max(maxLen, lastLen);\n                \n                if (sz <= maxLen) {\n                    ans.push_back(true);\n                } else {\n                    ans.push_back(false);\n                }\n                \n            \n            }\n        }\n        \n        return ans;\n        \n    }\n};\n\n",
    "submit_ts": "1716649361",
    "subm_id": "1267585664"
}