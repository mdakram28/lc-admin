{
    "username": "joyjitdas_7",
    "submission": "class Solution {\n    static class SegmentTree {\n        int[] stTree;\n        int size;\n\n        public void build(int[] data) {\n            this.size = data.length;\n            this.stTree = new int[2 * size];\n            for (int i = 0; i < size; i++) {\n                stTree[size + i] = data[i];\n            }\n            for (int i = size - 1; i > 0; --i) {\n                stTree[i] = stTree[i << 1] & stTree[i << 1 | 1];\n            }\n        }\n\n        public int query(int left, int right) {\n            int result = ~0;\n            for (left += size, right += size; left < right; left >>= 1, right >>= 1) {\n                if ((left & 1) == 1) result &= stTree[left++];\n                if ((right & 1) == 1) result &= stTree[--right];\n            }\n            return result;\n        }\n    }\n\n    public int minimumDifference(int[] arr, int target) {\n        int len = arr.length;\n        SegmentTree segTree = new SegmentTree();\n        segTree.build(arr);\n        int minDiff = Integer.MAX_VALUE;\n\n        for (int start = 0; start < len; start++) {\n            int lo = start, hi = len - 1, bestEnd = start;\n            while (lo <= hi) {\n                int mid = (lo + hi) / 2;\n                int currentAnd = segTree.query(start, mid + 1);\n                int currentDiff = Math.abs(target - currentAnd);\n                if (currentDiff < minDiff) {\n                    minDiff = currentDiff;\n                    bestEnd = mid;\n                }\n                if (currentAnd > target) {\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n        }\n\n        return minDiff;\n    }\n}",
    "submit_ts": 1717300046.0
}