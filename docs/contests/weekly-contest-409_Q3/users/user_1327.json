{
    "username": "guins_j",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> ret(queries.size());\n        // starting idces of the queries\n        set<int> roads;\n        map<int, int> query_map;\n        auto final_sz = n - 1;\n        for (int i = 0; i < queries.size(); i++) {\n            auto& query = queries[i];\n\n            // the current road is more efficient than the new road\n            auto low_it = roads.upper_bound(query[0]);\n            if (low_it != roads.begin()) {\n                low_it = prev(low_it);\n            }\n            if (low_it != roads.end() && *low_it <= query[0] && query_map[*low_it] >= query[1]) {\n                ret[i] = final_sz;\n                continue;\n            }\n\n            // compute the current distance\n            auto curr_dist = 0, prev_idx = query[0];\n            low_it = roads.lower_bound(query[0]);\n            while (low_it != roads.end()) {\n                if (*low_it >= query[1]) {\n                    break;\n                }\n                curr_dist += (*low_it) - prev_idx;\n                curr_dist++;\n                prev_idx = query_map[*low_it];\n                low_it++;\n            }\n            curr_dist += query[1] - prev_idx;\n            // clean up\n            roads.erase(roads.lower_bound(query[0]), roads.lower_bound(query[1]));\n\n            final_sz = final_sz - curr_dist + 1;\n            ret[i] = final_sz;\n            roads.insert(query[0]);\n            query_map[query[0]] = query[1];\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1722743896",
    "subm_id": "1343802158"
}