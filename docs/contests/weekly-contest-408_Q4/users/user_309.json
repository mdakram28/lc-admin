{
    "username": "afakeusername",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<vector<int>> adjList(circles.size());\n        for (int i = 0; i < circles.size(); i++) {\n            for (int j = i + 1; j < circles.size(); j++) {\n                if (circles[i][2] + circles[j][2] >= sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2))) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        vector<bool> visited(circles.size(), false);\n        for (int i = 0; i < circles.size(); i++) {\n            if (visited[i])\n                continue;\n            visited[i] = true;\n            bool a = false, b = false;\n            queue<int> bfs;\n            bfs.push(i);\n            while (bfs.size()) {\n                int node = bfs.front();\n                bfs.pop();\n                if (X - circles[node][0] <= circles[node][2] || circles[node][1] <= circles[node][2])\n                    a = true;\n                if (circles[node][0] <= circles[node][2] || Y - circles[node][1] <= circles[node][2])\n                    b = true;\n                for (int other : adjList[node]) {\n                    if (visited[other])\n                        continue;\n                    visited[other] = true;\n                    bfs.push(other);\n                }\n                if (a && b)\n                    break;\n            }\n            if (a && b)\n                return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136581",
    "subm_id": "1335738851"
}