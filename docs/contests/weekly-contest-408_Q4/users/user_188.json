{
    "username": "TheCleanser",
    "submission": "/*\n    Can't if there exists some connected component of circles in which both (left or top) and (bottom and right) are tocuhed\n*/\n\ntypedef long long int ll;\ntypedef __int128_t i128;\n\nclass Solution {\npublic:\n    \n    vector<int> curr;\n    \n    void dfs(int c, vector<int> adj[], vector<bool>& vis)\n    {\n        vis[c] = true; curr.push_back(c);\n        for(auto it: adj[c]){\n            if(!vis[it]){\n                dfs(it, adj, vis);\n            }\n        }\n    }\n    \n    bool intersect(vector<int>& c1, vector<int>& c2)\n    {\n        ll x1 = c1[0]; ll y1 = c1[1]; ll r1 = c1[2]; \n        ll x2 = c2[0]; ll y2 = c2[1]; ll r2 = c2[2]; \n        \n        ll dx = abs(x1 - x2); ll dy = abs(y1 - y2);\n        \n        i128 dxp = dx; i128 dyp = dy;\n        \n        i128 distSQ = dxp * dxp + dyp * dyp;\n        \n        i128 rr = (i128) (r1 + r2) * (i128) (r1 + r2);\n        \n        return rr >= distSQ;\n    }\n    \n    bool check(int rx, int ry, vector<vector<int>>& circles)\n    {\n        bool topLeft = false; bool bottomRight = false;\n        for(int i : curr){\n            vector<int>& v = circles[i];\n            int x = v[0];\n            int y = v[1];\n            int rad = v[2];\n            \n      \n            if(x - rad <= 0) topLeft = true;\n            if(x + rad >= rx) bottomRight = true;\n            if(y - rad <= 0) bottomRight = true;\n            if(y + rad >= ry) topLeft = true;\n        }\n\n        return !(topLeft && bottomRight);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size(); vector<int> adj[n];\n        for(int i = 0; i < n; i++){\n            for(int j = 0; j < n; j++){\n                if(i != j && intersect(circles[i], circles[j])){\n                    adj[i].push_back(j);\n                }\n            }\n        }\n        \n        vector<bool> vis(n, false); bool ans = true;\n        \n        for(int i = 0; i < n; i++){\n            if(!vis[i]){\n                dfs(i, adj, vis);\n                ans &= check(X, Y, circles);\n                curr.clear();\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1722136065",
    "subm_id": "1335722661"
}