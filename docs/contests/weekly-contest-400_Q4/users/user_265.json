{
    "username": "ceetcode",
    "submission": "#include <vector>\n#include <algorithm>\n#include <limits>\n#include <cmath>\nusing namespace std;\n\nclass SegTree {\npublic:\n    SegTree(const vector<int>& data) {\n        size = data.size();\n        tree.resize(4 * size);\n        construct_tree(data, 0, 0, size - 1);\n    }\n\n    int range_query(int query_left, int query_right) {\n        return _range_query_helper(0, 0, size - 1, query_left, query_right);\n    }\n\nprivate:\n    int size;\n    vector<int> tree;\n\n    void construct_tree(const vector<int>& data, int index, int left, int right) {\n        if (left == right) {\n            tree[index] = data[left];\n        } else {\n            int mid = left + (right - left) / 2;\n            construct_tree(data, 2 * index + 1, left, mid);\n            construct_tree(data, 2 * index + 2, mid + 1, right);\n            tree[index] = tree[2 * index + 1] & tree[2 * index + 2];\n        }\n    }\n\n    int _range_query_helper(int index, int left, int right, int query_left, int query_right) {\n        if (query_right < left || right < query_left) {\n            return numeric_limits<int>::max();\n        }\n        if (query_left <= left && right <= query_right) {\n            return tree[index];\n        }\n        int mid = left + (right - left) / 2;\n        int left_result = _range_query_helper(2 * index + 1, left, mid, query_left, query_right);\n        int right_result = _range_query_helper(2 * index + 2, mid + 1, right, query_left, query_right);\n        return left_result & right_result;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegTree seg_tree(nums);\n        int res = numeric_limits<int>::max();\n        for (int i = 0; i < n; ++i) {\n            int l = i, r = n - 1;\n            while (l < r) {\n                int mid = ceil(l + (r - l) / 2.0);\n                if (seg_tree.range_query(i, mid) >= k) {\n                    l = mid;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            res = min({res, abs(seg_tree.range_query(i, l) - k), abs(k - seg_tree.range_query(i, l + 1))});\n        }\n        return res;\n    }\n};\n",
    "submit_ts": 1717297806.0
}