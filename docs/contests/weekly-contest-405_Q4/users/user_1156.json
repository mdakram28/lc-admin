{
    "username": "chetuu04",
    "submission": "class Solution {\npublic:\n    int minimumCost(string& target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n        minCost[0] = 0;\n\n        unordered_map<string, int> wordCostMap;\n\n        for (int idx = 0; idx < words.size(); ++idx) {\n            const string& word = words[idx];\n            int cost = costs[idx];\n            if (wordCostMap.find(word) == wordCostMap.end() || cost < wordCostMap[word]) {\n                wordCostMap[word] = cost;\n            }\n        }\n\n        vector<string>().swap(words);\n        vector<int>().swap(costs);\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n\n            for (const auto& entry : wordCostMap) {\n                const string& currentWord = entry.first;\n                int cost = entry.second;\n                int len = currentWord.size();\n\n                if (i + len <= targetLength && target.compare(i, len, currentWord) == 0) {\n                    minCost[i + len] = min(minCost[i + len], minCost[i] + cost);\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n};\n",
    "submit_ts": "1720322973",
    "subm_id": "1312364034"
}