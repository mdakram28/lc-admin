{
    "username": "ianwong1999",
    "submission": "class Solution {\npublic:\n    int par[200055];\n    int sz[200055];\n    int have[200055][2];\n    int dp[2][4];\n    \n    int fin(int x) {\n        if (par[x] == x) return x;\n        return par[x] = fin(par[x]);\n    }\n    void unite(int x, int y) {\n        x = fin(x);\n        y = fin(y);\n        \n        if (x == y) return;\n        \n        par[x] = y;\n        sz[y] += sz[x];\n        have[y][0] += have[x][0];\n        have[y][1] += have[x][1];\n    }\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        auto id = [&](int x, int y) {\n            return x * m + y;\n        };\n        \n        int tot = n * m;\n        \n        for (int i = 0; i < tot; i++) {\n            par[i] = i;\n            sz[i] = 1;\n            have[i][0] = have[i][1] = 0;\n        }\n        \n        for (int i = 0; i < n; i++) for (int j = 0; j < m; j++) {\n            have[id(i, j)][grid[i][j]]++;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                unite(id(i, j), id(i, m - j - 1));\n            }\n        }\n        \n        for (int j = 0; j < m; j++) {\n            for (int i = 0; i < n; i++) {\n                unite(id(i, j), id(n - i - 1, j));\n            }\n        }\n        \n        memset(dp, 63, sizeof(dp));\n        \n        dp[1][0] = 0;\n        \n        \n        for (int i = 0; i < tot; i++) {\n            if (i != fin(i)) continue;\n            \n            swap(dp[0], dp[1]);\n            \n            memset(dp[1], 63, sizeof(dp[1]));\n            \n            // choose 0\n            {\n                for (int j = 0; j < 4; j++) {\n                    dp[1][j] = min(dp[1][j], dp[0][j] + have[i][1]);\n                }\n            }\n            \n            // choose 1\n            {\n                for (int j = 0; j < 4; j++) {\n                    int to = (j + sz[i]) % 4;\n                    dp[1][to] = min(dp[1][to], dp[0][j] + have[i][0]);\n                }\n            }\n        }\n        \n        return dp[1][0];;\n    }\n};",
    "submit_ts": "1722696240",
    "subm_id": "1343098513"
}