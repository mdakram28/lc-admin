{
    "username": "destroyer_baldev01",
    "submission": "class TrieNode{\n    public :\n        unordered_map<char,TrieNode *> children;\n        vector<pair<int,int>> word_ends;\n};\n\nclass Trie{\n    public:\n        TrieNode * root;\n\n        Trie(){\n            root = new TrieNode();\n        }\n\n        void insert(string word,int index,int cost)\n        {\n            TrieNode *node =  root;\n            for(char c : word)\n            {\n                if(!node->children.count(c)){\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->word_ends.push_back({index,cost});\n        }\n};\n\nclass Solution {\npublic:\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int m = words.size();\n\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n\n       Trie tre;\n       for(int i=0; i<m;i++)\n       {\n            tre.insert(words[i],i,costs[i]);\n       }\n\n\n\n        for(int i =0; i<n;i++)\n        {\n            if(dp[i] == INT_MAX) continue;\n           \n            TrieNode* node = tre.root;\n            for(int j =i; j <n;j++)\n            {\n                if(!node->children .count(target[j]))\n                {\n                    break;\n                }\n                node = node->children[target[j]];\n                for(auto &p : node->word_ends)\n                {\n                    int word_len = words[p.first].size();\n                    if(i+word_len <= n)\n                    {\n                        dp[i+word_len] = min(dp[i+word_len],dp[i]+p.second);\n                    }\n                }\n            }\n\n\n        }\n        \n        if(dp[n] == INT_MAX) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324568",
    "subm_id": "1312402714"
}