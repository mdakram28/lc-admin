{
    "username": "doge_cheems",
    "submission": "import java.util.*;\nimport java.util.stream.*;\n\npublic class Solution {\n    private long f(List<long[]> A, long N) {\n        long[] init = A.get(0);\n        long minSum = init[0] + init[1], maxSum = minSum;\n        long minDiff = init[0] - init[1], maxDiff = minDiff;\n\n        for (long[] a : A) {\n            long sum = a[0] + a[1], diff = a[0] - a[1];\n            minSum = Math.min(minSum, sum);\n            maxSum = Math.max(maxSum, sum);\n            minDiff = Math.min(minDiff, diff);\n            maxDiff = Math.max(maxDiff, diff);\n        }\n\n        return Math.max(maxSum - minSum, maxDiff - minDiff);\n    }\n    \n    public int minimumDistance(int[][] points) {\n        List<long[]> A = Stream.of(points).map(p -> new long[] {p[0], p[1]}).collect(Collectors.toList());\n        \n        long minSum = A.get(0)[0] + A.get(0)[1], maxSum = minSum;\n        long minDiff = A.get(0)[0] - A.get(0)[1], maxDiff = minDiff;\n        int[] indices = new int[4];\n\n        for (int i = 1; i < A.size(); i++) {\n            long[] a = A.get(i);\n            long sum = a[0] + a[1], diff = a[0] - a[1];\n\n            if (sum < minSum) {\n                minSum = sum;\n                indices[0] = i;\n            } \n            else if (sum > maxSum) {\n                maxSum = sum;\n                indices[1] = i;\n            }\n\n            if (diff < minDiff) {\n                minDiff = diff;\n                indices[2] = i;\n            } \n            else if (diff > maxDiff) {\n                maxDiff = diff;\n                indices[3] = i;\n            }\n        } \n        \n        long ans = Long.MAX_VALUE;\n\n        for (int t : indices) {\n            ArrayList<long[]> curr = new ArrayList<long[]>(A);\n            curr.remove(t);\n            ans = Math.min(ans, f(curr, curr.size()));\n        }\n        \n        return (int) ans;\n    }\n}\n"
}