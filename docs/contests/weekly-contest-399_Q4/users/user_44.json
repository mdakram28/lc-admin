{
    "username": "Tinky1224",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.nums = [0]*(4*n+5)\n        self.a1 = [0]*(4*n+5) # include l and r\n        self.a2 = [0]*(4*n+5) # include l\n        self.a3 = [0]*(4*n+5) # include r\n        self.a4 = [0]*(4*n+5) # not include l and r\n        self.right = n\n\n    def update(self, index, num):\n        self._update(0, 0, self.right, index, num)\n    def _update(self, index, curr_left, curr_right, target_index, num):\n        if curr_left == curr_right:\n            self.nums[index] = num\n            self.a1[index] = num\n            self.a2[index] = 0\n            self.a3[index] = 0\n            self.a4[index] = 0\n            return\n\n        mid = (curr_left + curr_right) >> 1\n        if target_index > mid:\n            self._update(index*2+2, mid+1, curr_right, target_index, num)\n        else:\n            self._update(index*2+1, curr_left, mid, target_index, num)\n\n        self.a1[index] = max(\n            self.a1[index*2+1] + self.a3[index*2+2],\n            self.a2[index*2+1] + self.a1[index*2+2],\n            self.a2[index*2+1] + self.a3[index*2+2]\n        )\n        self.a2[index] = max(\n            self.a1[index*2+1] + self.a4[index*2+2],\n            self.a2[index*2+1] + self.a2[index*2+2],\n            self.a2[index*2+1] + self.a4[index*2+2]\n        )\n        self.a3[index] = max(\n            self.a3[index*2+1] + self.a3[index*2+2],\n            self.a4[index*2+1] + self.a1[index*2+2],\n            self.a4[index*2+1] + self.a3[index*2+2]\n        )\n        self.a4[index] = max(\n            self.a3[index*2+1] + self.a4[index*2+2],\n            self.a4[index*2+1] + self.a2[index*2+2],\n            self.a4[index*2+1] + self.a4[index*2+2]\n        )\n        return\n    def query(self):\n        return max(self.a1[0], self.a2[0], self.a3[0], self.a4[0])\n\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        MOD = 10**9+7\n        n = len(nums)\n        seg = SegmentTree(n)\n        for i, num in enumerate(nums):\n            seg.update(i, num)\n        res = 0\n        for p, num in queries:\n            seg.update(p, num)\n            res += seg.query()\n            res %= MOD\n        return res",
    "submit_ts": 1716693022.0
}