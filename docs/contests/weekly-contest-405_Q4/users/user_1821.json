{
    "username": "birds3345",
    "submission": "template<int size, typename Container>\nclass Trie\n{\npublic:\n\ttypedef std::function<int(typename Container::iterator::value_type)> Transformer;\n\n\tTrie(Transformer transformer)\n\t\t: root(new Node()), transformer(transformer)\n\t{\n\t}\n\n\tvoid insert(typename Container::iterator from, typename Container::iterator to, int cost)\n\t{\n\t\tNode* current = root;\n\t\tfor (auto it = from; it != to; it++)\n\t\t{\n\t\t\tint index = transformer(*it);\n\t\t\tif (!current->children[index])\n\t\t\t\tcurrent->children[index] = new Node();\n\n\t\t\tcurrent = current->children[index];\n\t\t}\n\n\t\tcurrent->cost = min(current->cost, cost);\n\t}\n    \n\tstruct Node\n\t{\n\t\tint cost = INT_MAX;\n\n\t\tNode* children[size];\n\t};\n\n\tTransformer transformer;\n\tNode* root;\n};\n\nclass Solution {\npublic:\n    int solve(int i, typename Trie<26, string>::Node* node, typename Trie<26, string>::Node* root, string& target, unordered_map<long long, vector<int>>& dp)\n    {\n        long long id = reinterpret_cast<long long>(node);\n        if (dp.contains(id) && dp[id][i] != -1) return dp[id][i];\n        if (i == target.size()) return node->cost;\n        \n        int res = INT_MAX;\n        typename Trie<26, string>::Node* next = node->children[target[i] - 'a'];\n        if (next)\n        {\n            if (next->cost != INT_MAX)\n            {\n                int r = solve(i + 1, root, root, target, dp);\n                if (r != INT_MAX)\n                    res = min(res, r + next->cost);\n            }\n            res = min(res, solve(i + 1, next, root, target, dp));\n        }\n        \n        if (!dp.contains(id))\n            dp[id] = vector<int>(50001, -1);\n        return dp[id][i] = res;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie<26, string> trie([](char c)\n        {\n            return c - 'a';          \n        });\n        \n        int i = 0;\n        for (string& word : words)\n            trie.insert(word.begin(), word.end(), costs[i++]);\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            Trie<26, string>::Node* current = trie.root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (!current->children[index]) break;\n                current = current->children[index];\n                if (current->cost != INT_MAX) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + current->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323409",
    "subm_id": "1312374859"
}