{
    "username": "Coding_geek20",
    "submission": "class Solution {\npublic:\n    int getMid(int s, int e) { return s + (e -s)/2; } \n \n/* A recursive function to get the sum of values in the given range \n    of the array. The following are parameters for this function. \n \n    st --> Pointer to segment tree \n    si --> Index of current node in the segment tree. Initially \n            0 is passed as root is always at index 0 \n    ss & se --> Starting and ending indexes of the segment represented \n                by current node, i.e., st[si] \n    qs & qe --> Starting and ending indexes of query range */\nint getSumUtil(int *st, int ss, int se, int qs, int qe, int si) \n{ \n    // If segment of this node is a part of given range, then return \n    // the sum of the segment \n    if (qs <= ss && qe >= se) \n        return st[si]; \n \n    // If segment of this node is outside the given range \n    if (se < qs || ss > qe) \n        return 0; \n \n    // If a part of this segment overlaps with the given range \n    int mid = getMid(ss, se); \n    return getSumUtil(st, ss, mid, qs, qe, 2*si+1) + \n        getSumUtil(st, mid+1, se, qs, qe, 2*si+2); \n} \n \n/* A recursive function to update the nodes which have the given \nindex in their range. The following are parameters \n    st, si, ss and se are same as getSumUtil() \n    i --> index of the element to be updated. This index is \n            in the input array. \ndiff --> Value to be added to all nodes which have i in range */\nvoid updateValueUtil(int *st, int ss, int se, int i, int diff, int si) \n{ \n    // Base Case: If the input index lies outside the range of \n    // this segment \n    if (i < ss || i > se) \n        return; \n \n    // If the input index is in range of this node, then update \n    // the value of the node and its children \n    st[si] = st[si] + diff; \n    if (se != ss) \n    { \n        int mid = getMid(ss, se); \n        updateValueUtil(st, ss, mid, i, diff, 2*si + 1); \n        updateValueUtil(st, mid+1, se, i, diff, 2*si + 2); \n    } \n} \n \n// The function to update a value in input array and segment tree. \n// It uses updateValueUtil() to update the value in segment tree \nvoid updateValue(vector<int>&arr, int *st, int n, int i, int new_val) \n{ \n    // Check for erroneous input index \n    if (i < 0 || i > n-1) \n    { \n        cout<<\"Invalid Input\"; \n        return; \n    } \n \n    // Get the difference between new value and old value \n    int diff = new_val - arr[i]; \n \n    // Update the value in array \n    arr[i] = new_val; \n \n    // Update the values of nodes in segment tree \n    updateValueUtil(st, 0, n-1, i, diff, 0); \n} \n \n// Return sum of elements in range from index qs (query start) \n// to qe (query end). It mainly uses getSumUtil() \nint getSum(int *st, int n, int qs, int qe) \n{ \n    // Check for erroneous input values \n    if (qs < 0 || qe > n-1 || qs > qe) \n    { \n        cout<<\"Invalid Input\"; \n        return -1; \n    } \n \n    return getSumUtil(st, 0, n-1, qs, qe, 0); \n} \n \n// A recursive function that constructs Segment Tree for array[ss..se]. \n// si is index of current node in segment tree st \nint constructSTUtil(vector<int>&arr, int ss, int se, int *st, int si) \n{ \n    // If there is one element in array, store it in current node of \n    // segment tree and return \n    if (ss == se) \n    { \n        st[si] = arr[ss]; \n        return arr[ss]; \n    } \n \n    // If there are more than one elements, then recur for left and \n    // right subtrees and store the sum of values in this node \n    int mid = getMid(ss, se); \n    st[si] = constructSTUtil(arr, ss, mid, st, si*2+1) + \n            constructSTUtil(arr, mid+1, se, st, si*2+2); \n    return st[si]; \n} \n \n/* Function to construct segment tree from given array. This function \nallocates memory for segment tree and calls constructSTUtil() to \nfill the allocated memory */\nint *constructST(vector<int>&arr, int n) \n{ \n    // Allocate memory for the segment tree \n \n    //Height of segment tree \n    int x = (int)(ceil(log2(n))); \n \n    //Maximum size of segment tree \n    int max_size = 2*(int)pow(2, x) - 1; \n \n    // Allocate memory \n    int *st = new int[max_size]; \n \n    // Fill the allocated memory st \n    constructSTUtil(arr, 0, n-1, st, 0); \n \n    // Return the constructed segment tree \n    return st; \n} \n    vector<int> countOfPeaks(vector<int>& arr, vector<vector<int>>& queries) {\n        int n=arr.size();\n        vector<int>sum(n,0);\n        for(int i=1;i<n-1;i++){\n            if(arr[i]>arr[i-1]&&arr[i]>arr[i+1])sum[i]=1;\n        }\n           vector<int>ans;\n        int *st = constructST(sum, n); \n        for(int i=0;i<queries.size();i++)\n        {\n            if(queries[i][0]==1)\n            {\n                if((queries[i][2]-queries[i][1])<2)ans.push_back(0);\n                else\n                ans.push_back(getSum(st,n,queries[i][1]+1,queries[i][2]-1));\n            }\n            else\n            {\n                int idx=queries[i][1],val=queries[i][2];\n                if(idx>0&&idx<n-1)\n                {\n                    arr[idx]=val;\n                    if(arr[idx]>arr[idx-1]&&arr[idx]>arr[idx+1])\n                    {\n                        updateValue(sum, st, n, idx, 1);\n                    }\n                    else updateValue(sum, st, n, idx, 0);\n                    if(idx-1>0)\n                    {\n                         if(arr[idx-1]>arr[idx-2]&&arr[idx-1]>arr[idx])\n                    {\n                        updateValue(sum, st, n, idx-1, 1);\n                    }\n                    else updateValue(sum, st, n, idx-1, 0);\n                    }\n                    if(idx+1<n-1)\n                    {\n                         if(arr[idx+1]>arr[idx+2]&&arr[idx+1]>arr[idx])\n                    {\n                        updateValue(sum, st, n, idx+1, 1);\n                    }\n                    else updateValue(sum, st, n, idx+1, 0);\n                    }\n                }\n                else if(idx==0)\n                {\n                    arr[idx]=val;\n                    if(idx+1<n-1)\n                    {\n                         if(arr[idx+1]>arr[idx+2]&&arr[idx+1]>arr[idx])\n                    {\n                        updateValue(sum, st, n, idx+1, 1);\n                    }\n                    else updateValue(sum, st, n, idx+1, 0);\n                    }\n                }\n                else\n                {\n                    arr[idx]=val;\n                    if(idx-1>0)\n                    {\n                         if(arr[idx-1]>arr[idx-2]&&arr[idx-1]>arr[idx])\n                    {\n                        updateValue(sum, st, n, idx-1, 1);\n                    }\n                    else updateValue(sum, st, n, idx-1, 0);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508030.0
}