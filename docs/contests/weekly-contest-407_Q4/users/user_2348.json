{
    "username": "albertnguyentran",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        '''\n        Take the difference array (negative/positive?)\n\n        nums = [3,5,1,2], target = [4,6,2,4]\n\n        difference = [1, 1, 1, 2]\n\n        nums = [1,3,2], target = [2,1,4]\n\n        difference = [1, -2, 2]\n\n        This question can be phrased as\n\n        How many operations to get from array of 0s to difference array\n        '''\n\n        differences = []\n        for n, t in zip(nums, target):\n            differences.append(t-n)\n        \n        n = len(nums)\n        \n        count = abs(differences[0])\n\n        for i in range(1, n):\n            cur = differences[i]\n            prev = differences[i-1]\n\n            if (cur > 0 and prev > 0) or (cur < 0 and prev < 0):\n                cur = abs(cur)\n                prev = abs(prev)\n                \n                count += max(cur-prev, 0)\n                #print('here', cur, prev, 'count: ', count)\n            else:\n                count += abs(cur)\n        \n        return count",
    "submit_ts": "1721533374",
    "subm_id": "1328007537"
}