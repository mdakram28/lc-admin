{
    "username": "Admiring ShockleyZns",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        def build(cur_index, l, r):\n            # \u5efa\u6811\n            if l == r:\n                sum_L[cur_index] = L[l]\n                return\n\n            middle = (l + r) // 2\n            build(cur_index * 2, l, middle)\n            build(cur_index * 2 + 1, middle + 1, r)\n            sum_L[cur_index] = sum_L[cur_index * 2] + sum_L[cur_index * 2 + 1]\n            return\n\n\n        def query(cur_index, l, r, L, R):\n            if L <= l and r <= R:\n                return sum_L[cur_index]\n\n            middle = (l + r) // 2\n            res = 0\n            if L <= middle:\n                res += query(cur_index * 2, l, middle, L, R)\n            if R > middle:\n                res += query(cur_index * 2 + 1, middle + 1, r, L, R)\n            return res\n        \n        n = len(s)\n        # left_L = [0] * n\n        right_L = [n - 1] * n\n        zero = 0\n        one = 0\n        i = 0\n        j = -1\n        while i < n:\n            while j + 1 < n:\n                if s[j + 1] == \"1\":\n                    one += 1\n                else:\n                    zero += 1\n                if one > k and zero > k:\n                    if s[j + 1] == \"1\":\n                        one -= 1\n                    else:\n                        zero -= 1\n                    break\n                else:\n                    j += 1\n            # if i == 0:\n            #     print(\"j = \", j)            \n            # left_L[j - 1] = i\n            right_L[i] = j\n            if s[i] == \"1\":\n                one -= 1\n            else:\n                zero -= 1\n            i += 1\n        L = [0] * n\n        for i in range(n):\n            L[i] = right_L[i] - i + 1\n        sum_L = [0] * (n << 2)\n        build(1, 0, n - 1)\n        \n        # print(right_L)\n        # print(L)\n        ans = []\n        for a, b in queries:\n            if b <= right_L[a]:\n                length = b - a + 1\n                ans.append((1 + length) * length // 2)\n            else:\n                left = a\n                right = b\n                while left < right:\n                    middle = (left + right + 1) // 2\n                    if right_L[middle] <= b:\n                        left = middle\n                    else:\n                        right = middle - 1\n                length = b - left\n                res = (1 + length) * length // 2\n                res2 = query(1, 0, n - 1, a, left)\n                ans.append(res + res2)\n        return ans\n        \n        ",
    "submit_ts": "1723953402",
    "subm_id": "556417363"
}