{
    "username": "b_for_beluga",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int M = 1_000_000_007;\n    private static final int X = 400;\n\n    public int numberOfPermutations(int n, int[][] r) {\n        Map<Integer, Integer> m = preprocessRequirements(r);\n        long[][] p = initializePermCounts(n);\n\n        for (int l = 1; l <= n; l++) {\n            updatePermCounts(p, l);\n            enforceRequirements(p, l, m);\n        }\n\n        return calculateResult(p, n);\n    }\n\n    private Map<Integer, Integer> preprocessRequirements(int[][] r) {\n        Map<Integer, Integer> m = new HashMap<>();\n        for (int[] q : r) {\n            m.put(q[0] + 1, q[1]);\n        }\n        return m;\n    }\n\n    private long[][] initializePermCounts(int n) {\n        long[][] p = new long[n + 1][X + 1];\n        p[0][0] = 1;\n        return p;\n    }\n\n    private void updatePermCounts(long[][] p, int l) {\n        for (int i = 0; i <= X; i++) {\n            for (int j = 0; j < l; j++) {\n                int k = i - j;\n                if (k >= 0) {\n                    p[l][i] = (p[l][i] + p[l - 1][k]) % M;\n                }\n            }\n        }\n    }\n\n    private void enforceRequirements(long[][] p, int l, Map<Integer, Integer> m) {\n        if (m.containsKey(l)) {\n            int t = m.get(l);\n            for (int i = 0; i <= X; i++) {\n                if (i != t) {\n                    p[l][i] = 0;\n                }\n            }\n        }\n    }\n\n    private int calculateResult(long[][] p, int n) {\n        long z = 0;\n        for (long y : p[n]) {\n            z = (z + y) % M;\n        }\n        return (int) z;\n    }\n}\n",
    "submit_ts": 1719070182.0
}