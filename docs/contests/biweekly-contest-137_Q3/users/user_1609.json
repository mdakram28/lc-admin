{
    "username": "Mourya_sai",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n    int n = board[0].size();\n\n    vector<tuple<long long, long long, long long>> candidates;\n\n    for (int i = 0; i < m; ++i) {\n        vector<pair<long long, int>> rowMax;\n        for (int j = 0; j < n; ++j) {\n            rowMax.push_back({board[i][j], j});\n        }\n        sort(rowMax.rbegin(), rowMax.rend());\n        for (int k = 0; k < min(3, (int)rowMax.size()); ++k) {\n            candidates.push_back({rowMax[k].first, i, rowMax[k].second});\n        }\n    }\n\n    for (int j = 0; j < n; ++j) {\n        vector<pair<long long, int>> colMax;\n        for (int i = 0; i < m; ++i) {\n            colMax.push_back({board[i][j], i});\n        }\n        sort(colMax.rbegin(), colMax.rend());\n        for (int k = 0; k < min(3, (int)colMax.size()); ++k) {\n            candidates.push_back({colMax[k].first, colMax[k].second, j});\n        }\n    }\n\n    sort(candidates.rbegin(), candidates.rend());\n\n    long long maxSum = LLONG_MIN;\n    int size = candidates.size();\n    for (int i = 0; i < size; ++i) {\n        for (int j = i + 1; j < size; ++j) {\n            for (int k = j + 1; k < size; ++k) {\n                auto [val1, r1, c1] = candidates[i];\n                auto [val2, r2, c2] = candidates[j];\n                auto [val3, r3, c3] = candidates[k];\n\n                if (r1 != r2 && r1 != r3 && r2 != r3 && c1 != c2 && c1 != c3 && c2 != c3) {\n                    maxSum = max(maxSum, (long long)(val1 + val2 + val3));\n                }\n            }\n        }\n    }\n\n    return maxSum;\n    }\n};",
    "submit_ts": "1723909006",
    "subm_id": "1359175872"
}