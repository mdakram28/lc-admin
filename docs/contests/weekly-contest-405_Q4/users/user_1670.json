{
    "username": "Terror_404",
    "submission": "class Solution {\npublic:\n     struct Node {\n        unordered_map<char, Node*> c;\n        vector<pair<int, int>> wE;\n    };\n\n    class Trie {\n    public:\n        Node* root;\n        Trie() { root = new Node(); }\n\n        void insert(string& s, int index, int cost) {\n            Node* node = root;\n            for (auto i:s) {\n                if (!node->c.count(i))\n                    node->c[i] = new Node();\n                node = node->c[i];\n            }\n            node->wE.push_back({index, cost});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         int n = target.size();\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n\n        Trie tr;\n        for (int i = 0; i < words.size(); ++i) {\n            tr.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = tr.root;\n            for (int j = i; j < n; ++j) {\n                if (node->c.find(target[j])==node->c.end()) break;\n                node = node->c[target[j]];\n                for (auto& p : node->wE) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == 1e9 ? -1 : dp[n];\n    \n    }\n};",
    "submit_ts": "1720324459",
    "subm_id": "1312400013"
}