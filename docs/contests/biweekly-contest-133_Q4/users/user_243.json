{
    "username": "odinson776",
    "submission": "class Solution {\n    private let MOD = 1_000_000_007\n    private let MAX_INVERSIONS = 400\n\n    func numberOfPermutations(_ n: Int, _ requirements: [[Int]]) -> Int {\n        var reqMap = [Int: Int]()\n        for req in requirements {\n            reqMap[req[0] + 1] = req[1]\n        }\n\n        var permCounts = Array(repeating: Array(repeating: 0 as Int, count: MAX_INVERSIONS + 1), count: n + 1)\n        permCounts[0][0] = 1\n\n        for length in 1...n {\n            for inv in 0...MAX_INVERSIONS {\n                for newPos in 0..<length {\n                    let prevInv = inv - newPos\n                    if prevInv >= 0 {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD\n                    }\n                }\n            }\n\n            if let targetInv = reqMap[length] {\n                for inv in 0...MAX_INVERSIONS {\n                    if inv != targetInv {\n                        permCounts[length][inv] = 0\n                    }\n                }\n            }\n        }\n\n        var result: Int = 0\n        for count in permCounts[n] {\n            result = (result + count) % MOD\n        }\n\n        return result\n    }\n}\n",
    "submit_ts": "1719069862",
    "subm_id": "1296808336"
}