{
    "username": "hicoder",
    "submission": "from typing import List\n\nclass UnionFind:\n    def __init__(self, size: int):\n        self.parent = list(range(size))\n        self.rank = [1] * size\n        self.max_x = [0] * size\n        self.max_y = [0] * size\n        self.min_x = [0] * size\n        self.min_y = [0] * size\n    \n    def find(self, x: int) -> int:\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x: int, y: int) -> None:\n        rootX = self.find(x)\n        rootY = self.find(y)\n        \n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.parent[rootY] = rootX\n                self.update_bounds(rootX, rootY)\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.parent[rootX] = rootY\n                self.update_bounds(rootY, rootX)\n            else:\n                self.parent[rootY] = rootX\n                self.rank[rootX] += 1\n                self.update_bounds(rootX, rootY)\n    \n    def update_bounds(self, root, other):\n        self.max_x[root] = max(self.max_x[root], self.max_x[other])\n        self.max_y[root] = max(self.max_y[root], self.max_y[other])\n        self.min_x[root] = min(self.min_x[root], self.min_x[other])\n        self.min_y[root] = min(self.min_y[root], self.min_y[other])\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        uf = UnionFind(n)\n        \n        def intersect(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            dist_sq = (x1 - x2) ** 2 + (y1 - y2) ** 2\n            rad_sum_sq = (r1 + r2) ** 2\n            return dist_sq <= rad_sum_sq\n        \n        for i in range(n):\n            x, y, r = circles[i]\n            uf.max_x[i] = x + r\n            uf.max_y[i] = y + r\n            uf.min_x[i] = x - r\n            uf.min_y[i] = y - r\n        \n        for i in range(n):\n            for j in range(i + 1, n):\n                if intersect(circles[i], circles[j]):\n                    uf.union(i, j)\n        \n        touches_x0 = set()\n        touches_xX = set()\n        touches_y0 = set()\n        touches_yY = set()\n        \n        for i in range(n):\n            root = uf.find(i)\n            x, y, r = circles[i]\n            if x - r <= 0:\n                touches_x0.add(root)\n            if x + r >= X:\n                touches_xX.add(root)\n            if y - r <= 0:\n                touches_y0.add(root)\n            if y + r >= Y:\n                touches_yY.add(root)\n        \n        for root in touches_x0:\n            if root in touches_xX:\n                return False\n            if (root in touches_y0):\n                return False\n        \n        for root in touches_y0:\n            if root in touches_yY:\n                return False\n\n        for root in touches_xX:\n            if root in touches_yY:\n                return False\n\n        return True\n",
    "submit_ts": "1722136952",
    "subm_id": "1335749782"
}