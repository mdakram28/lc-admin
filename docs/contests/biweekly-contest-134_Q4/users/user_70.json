{
    "username": "ernestlu",
    "submission": "class Solution {\npublic:\ntemplate<typename T, bool maximum_mode = false>\nstruct RMQ {\n    static int highest_bit(unsigned x) {\n        return x == 0 ? -1 : 31 - __builtin_clz(x);\n    }\n\n    int n = 0;\n    vector<T> values;\n    vector<vector<int>> range_low;\n\n    RMQ(const vector<T> &_values = {}) {\n        if (!_values.empty())\n            build(_values);\n    }\n\n    void build(const vector<T> &_values) {\n        values = _values;\n        n = int(values.size());\n        int levels = highest_bit(n) + 1;\n        range_low.resize(levels);\n\n        for (int k = 0; k < levels; k++)\n            range_low[k].resize(n - (1 << k) + 1);\n\n        for (int i = 0; i < n; i++)\n            range_low[0][i] = _values[i];\n\n        for (int k = 1; k < levels; k++)\n            for (int i = 0; i <= n - (1 << k); i++)\n                range_low[k][i] = range_low[k - 1][i] & range_low[k - 1][i + (1 << (k - 1))];\n    }\n\n    // Note: breaks ties by choosing the largest index.\n    int query(int a, int b) const {\n        assert(0 <= a && a < b && b <= n);\n        int level = highest_bit(b - a);\n        return range_low[level][a] & range_low[level][b - (1 << level)];\n    }\n};\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        using ll = long long;\n\n        int n = (int)nums.size();\n        RMQ<int> rmq(nums);\n        ll ans = 0;\n        for (int i = 0; i < n; i++) {\n            int lo = i, hi = n;\n            while (lo < hi) {\n                int mid = (lo + hi) >> 1;\n                if (rmq.query(i, mid + 1) <= k)\n                    hi = mid;\n                else lo = mid + 1;\n            }\n            if (lo == n)\n                continue;\n            if (rmq.query(i, lo + 1) != k)\n                continue;\n            int lft = lo;\n            lo = i, hi = n - 1;\n            while (lo < hi) {\n                int mid = (lo + hi + 1) >> 1;\n                if (rmq.query(i, mid + 1) >= k)\n                    lo = mid;\n                else hi = mid - 1;\n            }\n            int rgt = lo;\n            ans += rgt - lft + 1;\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1720277378",
    "subm_id": "1311660907"
}