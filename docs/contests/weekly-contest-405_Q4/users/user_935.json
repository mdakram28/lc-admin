{
    "username": "Kyouma007",
    "submission": "class Solution {\npublic:\n    \n    class Trie {\n    class Node{\n        public: \n        vector<Node*> children; \n        bool isEnd; \n        int index = -1; \n        int minCost = -1;\n        int len = -1;\n        Node(){\n            children.resize(26, NULL);\n            isEnd = false; \n            index = -1; \n            len = -1; \n            minCost = -1;\n        }\n    };\n    public:\n    Node* root; \n    Trie() {\n        root = new Node(); \n    }\n        \n    void findList(string &word, int ind, int dp[]){\n        Node *curr = root; \n        // vector<pair<int, int>> ans; \n        for (int i = ind; i < word.size(); i++){\n            char ch = word[i];\n            if (curr -> children[ch - 'a'] == NULL){\n                break; \n            }else{\n                curr = curr -> children[ch - 'a'];\n                if (curr -> isEnd){\n                    // ans.push_back({curr -> index, curr -> minCost}); \n                    dp[ind] = min(dp[ind], curr -> minCost + dp[ind + curr -> len]);\n                }\n            }\n        }\n        \n       \n        \n    }\n        \n    \n    void insert(string &word, int index, int cost) {\n        Node* curr = root; \n        for (auto ch: word){\n            // check if the child node exists or not\n            // if not exists then create it\n            if (curr->children[ch - 'a'] == NULL){\n                curr -> children[ch - 'a'] = new Node();\n            }\n            curr = curr -> children[ch - 'a'];\n        }\n        if (curr -> isEnd){\n            if (curr -> minCost > cost){\n                curr -> index = index; \n                curr -> minCost = cost;\n                curr -> len = word.size();\n            }\n        }else{\n            curr->isEnd = true; \n            curr -> index = index; \n            curr -> minCost = cost;\n            curr -> len = word.size();\n        }\n        \n    }\n    \n    bool search(string word) {\n        Node* curr = root; \n        for (auto ch: word){\n            // check if the child node exists or not\n            // if not exists then create it\n            if (curr->children[ch - 'a'] == NULL){\n                return false; \n            }\n            curr = curr -> children[ch - 'a'];\n        }\n        return curr -> isEnd; \n    }\n    \n    bool startsWith(string prefix) {\n        Node* curr = root; \n        for (auto ch: prefix){\n            // check if the child node exists or not\n            // if not exists then create it\n            if (curr->children[ch - 'a'] == NULL){\n                return false; \n            }\n            curr = curr -> children[ch - 'a'];\n        }\n        return true; \n    }\n};\n    \n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         unordered_map<string, int> minCost; \n//         for (int i = 0; i < words.size(); i++){\n//             if (minCost.count(words[i]) == 0){\n//                 minCost[words[i]] = costs[i];\n//             }else{\n//                 minCost[words[i]] = min(minCost[words[i]], costs[i]);\n//             }\n//         }\n        \n//         vector<string> newWords; \n//         vector<int> newCosts; \n//         for (auto it: minCost){\n//             newWords.push_back(it.first);\n//             newCosts.push_back(it.second);\n//         }\n        \n        Trie t; \n        int ind = 0; \n        for (auto word: words){\n        \n            t.insert(word, ind, costs[ind]);\n            ind++;\n        }\n        \n        int n = target.size(); \n        \n        int dp[n + 1];\n        dp[n] = 0;\n        for (int i = n - 1; i >= 0; i--){\n            dp[i] = 1e9; \n            t.findList(target, i, dp);\n//             for (auto ind: possibleOptions){\n      \n//                 dp[i] = min(dp[i], ind.second + dp[i + words[ind.first].size()]);\n//             }\n        }\n       \n        return dp[0] >= 1e9 ? -1 : dp[0];\n    }\n};\n\n/*\n\"r\"\n[\"r\",\"r\",\"r\",\"r\"]\n[1,6,3,3]\n\n*/",
    "submit_ts": "1720322516",
    "subm_id": "1312351997"
}