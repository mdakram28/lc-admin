{
    "username": "its_akshayyyy",
    "submission": "// class Solution {\n// public:\n//     vector<bool> getResults(vector<vector<int>>& queries) {\n//         set<int> obstacles;\n//         vector<bool> ans;\n\n//         for (const auto& query : queries) {\n//             if (query[0] == 1) {\n//                 obstacles.insert(query[1]);\n//             } else {\n//                 int x = query[1], sz = query[2];\n//                 auto it = obstacles.lower_bound(x - sz + 1);\n//                 if (obstacles.empty() && sz > x) {\n//                     ans.push_back(false);\n//                 } else {\n//                     ans.push_back(it == obstacles.end() || *it >= x);\n//                 }\n//             }\n//         }\n\n//         return ans;\n//     }\n// };\n\n#include <vector>\n#include <map>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\nprivate:\n    vector<long> segT;\n\n    void build(int s, int e, int i, vector<long>& a) {\n        if (s == e) {\n            segT[i] = a[s];\n            return;\n        }\n        int mid = s + (e - s) / 2;\n        build(s, mid, 2 * i + 1, a);\n        build(mid + 1, e, 2 * i + 2, a);\n        segT[i] = max(segT[2 * i + 1], segT[2 * i + 2]);\n    }\n\n    void update(int s, int e, int i, int q, long v) {\n        if (s == e) {\n            segT[i] = v;\n            return;\n        }\n        int mid = s + (e - s) / 2;\n        if (q <= mid)\n            update(s, mid, 2 * i + 1, q, v);\n        else\n            update(mid + 1, e, 2 * i + 2, q, v);\n        segT[i] = max(segT[2 * i + 1], segT[2 * i + 2]);\n    }\n\n    long range(int s, int e, int i, int qs, int qe) {\n        if (qs <= s && qe >= e)\n            return segT[i];\n        if (qs > e || qe < s)\n            return INT_MIN;\n        int mid = s + (e - s) / 2;\n        long l = range(s, mid, 2 * i + 1, qs, qe);\n        long r = range(mid + 1, e, 2 * i + 2, qs, qe);\n        return max(l, r);\n    }\n\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> arr;\n        set<int> s;\n        s.insert(0);\n        s.insert(100000);\n        map<int, int> m;\n        m[0] = 0;\n        m[100000] = 100000;\n        segT = vector<long>(5 * (int)(1e5), 0);\n\n        for (auto& i : queries) {\n            if (i[0] == 1) {\n                s.insert(i[1]);\n                auto it = s.lower_bound(i[1]);\n                int prev = *(--it);\n                int next = *s.lower_bound(i[1] + 1);\n                m[next] = next - i[1];\n                m[i[1]] = i[1] - prev;\n                update(0, 100000, 0, i[1], m[i[1]]);\n                update(0, 100000, 0, next, m[next]);\n            } else {\n                auto it = s.lower_bound(i[1]);\n                int prev = *(--it);\n                if (i[1] - prev >= i[2]) {\n                    arr.push_back(true);\n                    continue;\n                } else if (range(0, 100000, 0, 0, i[1]) >= i[2]) {\n                    arr.push_back(true);\n                    continue;\n                }\n                arr.push_back(false);\n            }\n        }\n        return arr;\n    }\n};\n",
    "submit_ts": 1716652755.0
}