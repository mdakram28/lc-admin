{
    "username": "tiankonguse",
    "submission": "\ntypedef long long ll;\nconst int dirs[4][2] = {{1, 1}, {1, -1}, {-1, 1}, {-1, -1}};\nclass Solution\n{\npublic:\n  int minimumDistance(vector<vector<int>> &points)\n  {\n    int n = points.size();\n    vector<vector<pair<int, int>>> nums(4, vector<pair<int, int>>(n));\n    for (int i = 0; i < n; i++)\n    {\n      auto x = points[i][0], y = points[i][1];\n      for (int k = 0; k < 4; k++)\n      {\n        nums[k][i] = {x * dirs[k][0] + y * dirs[k][1], i};\n      }\n    }\n\n    for (int k = 0; k < 4; k++)\n    {\n      sort(nums[k].begin(), nums[k].end());\n    }\n\n    auto High = [&nums](int k, int pos)->int\n    {\n      int n = nums[k].size();\n        // printf(\"high n=%d k=%d pos=%d begin\\n\", n, k, pos);\n      for (int i = n - 1;i>=0; i--)\n      {\n        auto [v, p] = nums[k][i];\n        if (p != pos)\n        {\n          return v;\n        }\n      }\n        // printf(\"high k=%d pos=%d end\\n\", k, pos);\n      return 0;\n    };\n    auto Low = [&nums](const int k, const int pos)->int\n    {\n        // printf(\"low k=%d pos=%d begin\\n\", k, pos);\n      int n = nums[k].size();\n      for (int i = 0;i<n; i++)\n      {\n        auto [v, p] = nums[k][i];\n        if (p != pos)\n        {\n          return v;\n        }\n      }\n        // printf(\"low k=%d pos=%d end\\n\", k, pos);\n      return 0;\n    };\n\n    int ans = INT_MAX;\n    for (int i = 0; i < n; i++)\n    {\n      int tmp = 0;\n      for (int k = 0; k < 4; k++)\n      {\n        tmp = max(tmp, High(k, i) - Low(k, i));\n      }\n      ans = min(ans, tmp);\n    }\n        // printf(\"ans=%d\\n\", ans);\n    return ans;\n  }\n};\n"
}