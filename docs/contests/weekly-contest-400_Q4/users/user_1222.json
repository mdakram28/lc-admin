{
    "username": "harshraj4423",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int target) {\n        int currentANDValue = nums[0];\n        int bestDiff = Math.abs(currentANDValue - target);\n\n        HashMap<Integer, Integer> windowBitCounts = new HashMap<>();\n        int num = nums[0];\n        for (int j = 0; j < 32; j++) {\n            if ((num & (1 << j)) != 0) {\n                windowBitCounts.put(j, windowBitCounts.getOrDefault(j, 0) + 1);\n            }\n        }\n\n        int leftIdx = 0, rightIdx = 0;\n        while (rightIdx < nums.length) {\n            if (currentANDValue > target || leftIdx > rightIdx) {\n                rightIdx++;\n                if (rightIdx >= nums.length) {\n                    break;\n                }\n                num = nums[rightIdx];\n                for (int j = 0; j < 32; j++) {\n                    if ((num & (1 << j)) != 0) {\n                        windowBitCounts.put(j, windowBitCounts.getOrDefault(j, 0) + 1);\n                    }\n                }\n            } else {\n                num = nums[leftIdx];\n                for (int j = 0; j < 32; j++) {\n                    if ((num & (1 << j)) != 0) {\n                        windowBitCounts.put(j, windowBitCounts.getOrDefault(j, 0) - 1);\n                    }\n                }\n                leftIdx++;\n            }\n\n            currentANDValue = 0;\n            for (int key : windowBitCounts.keySet()) {\n                if (windowBitCounts.get(key) == rightIdx - leftIdx + 1) {\n                    currentANDValue += (1 << key);\n                }\n            }\n\n            if (leftIdx <= rightIdx) {\n                bestDiff = Math.min(bestDiff, Math.abs(currentANDValue - target));\n            }\n        }\n\n        return bestDiff;\n    }\n}",
    "submit_ts": 1717300743.0
}