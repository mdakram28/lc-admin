{
    "username": "Yyyyyfei",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # Cost of forming empty string is zero\n        \n        # Use a dictionary to map each word to its minimum cost\n        word_cost = {}\n        for word, cost in zip(words, costs):\n            if word in word_cost:\n                word_cost[word] = min(word_cost[word], cost)\n            else:\n                word_cost[word] = cost\n\n        for i in range(1, n + 1):\n            for word, cost in word_cost.items():\n                if i >= len(word) and target[i-len(word):i] == word:\n                    dp[i] = min(dp[i], dp[i-len(word)] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720324446",
    "subm_id": "1312399666"
}