{
    "username": "codr_mansi",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int maxInversions = n * (n - 1) / 2;\n        vector<long long> dp(maxInversions + 1, 0);\n        vector<int> req(n, -1);\n\n        // Initialize requirements\n        for (const auto& r : requirements) {\n            req[r[0]] = r[1];\n        }\n\n        // Base case\n        dp[0] = 1;\n\n        for (int i = 1; i <= n; ++i) {\n            vector<long long> prefixSum(maxInversions + 2, 0);\n            for (int j = 0; j <= maxInversions; ++j) {\n                prefixSum[j + 1] = (prefixSum[j] + dp[j]) % MOD;\n            }\n\n            for (int j = maxInversions; j >= 0; --j) {\n                int start = max(0, j - i + 1);\n                dp[j] = (prefixSum[j + 1] - prefixSum[start] + MOD) % MOD;\n            }\n\n            // Check if this prefix needs to satisfy a requirement\n            if (req[i - 1] != -1) {\n                long long temp = dp[req[i - 1]];\n                fill(dp.begin(), dp.end(), 0);\n                dp[req[i - 1]] = temp;\n            }\n        }\n\n        return dp[req[n - 1]];\n    }\n};",
    "submit_ts": "1719070395",
    "subm_id": "1296821948"
}