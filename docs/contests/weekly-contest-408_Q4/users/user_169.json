{
    "username": "vskesha",
    "submission": "class DisjointSet:\n    def __init__(self, n):\n        self.root = list(range(n))\n    \n    def find(self, node):\n        if self.root[node] != node:\n            self.root[node] = self.find(self.root[node])\n        return self.root[node]\n\n    def union(self, node1, node2):\n        root1 = self.find(node1)\n        root2 = self.find(node2)\n        if root1 != root2:\n            self.root[root2] = root1\n    \n    def connected(self, node1, node2) -> bool:\n        return self.find(node1) == self.find(node2)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        lc = len(circles)\n        ds = DisjointSet(lc + 2)\n\n        for i in range(1, lc):\n            x1, y1, r1 = circles[i]\n            for j in range(i):\n                x2, y2, r2 = circles[j]\n                dist = ((x1 - x2)**2 + (y1 - y2)**2)**0.5\n                if dist <= r1 + r2:\n                    ds.union(i, j)\n\n        for i in range(lc):\n            x1, y1, r1 = circles[i]\n            if x1 <= r1 or Y - y1 <= r1:\n                ds.union(lc, i)\n            if y1 <= r1 or X - x1 <= r1:\n                ds.union(lc + 1, i)\n        \n        return not ds.connected(lc, lc + 1)",
    "submit_ts": "1722136275",
    "subm_id": "1335729236"
}