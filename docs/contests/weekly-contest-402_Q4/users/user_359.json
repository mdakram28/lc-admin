{
    "username": "vrangr",
    "submission": "template<typename type> inline void print(const type &var) {\n    cout << var;\n}\ntemplate<typename t1, typename t2> inline void print(const pair<t1,t2> &pr) {\n    cout << \"(\";\n    print(pr.first);\n    cout<< \",\";\n    print(pr.second);\n    cout<< \")\";\n}\ntemplate<typename type> inline void print(const vector<type> &vec) {\n    for (const auto &it : vec) {\n        print(it);cout << \" \";\n    }\n}\n#define debug(x) if(false){cout<<#x<<\": \";print(x);cout<<endl;}\nclass segtree {\nprivate:\n    int get(int ind) {\n        assert(ind >= 0 && ind < n);\n        if (ind == n-1 || ind == 0) return 0;\n        return ((a[ind] > a[ind-1]) && (a[ind]>a[ind+1]));\n    }\npublic:\n    int n;\n    vector<int> tree, a;\n    segtree(const vector<int> &vals) {\n        n = vals.size();\n        int gn = (n<<1);\n        if (__builtin_popcount(gn) != 1)\n            gn = (1<<(32-__builtin_clz(gn)));\n        tree.assign(gn,0);\n        a = vals;\n        for (int i = 0; i < n; ++i) {\n            if (i == 0 || i == n-1) continue;\n            tree[i+n] = get(i);\n        }\n        for (int i = n-1; i > 0; --i)\n            tree[i] = tree[i<<1]+tree[i<<1|1];\n        debug(n);\n        debug(gn);\n    }\n    \n    void upd(int ind, int x) {\n        assert(x == 0 || x == 1);\n        assert(ind >= 0 && ind < n);\n        ind+=n;\n        tree[ind] = x;\n        for (;ind>1;ind>>=1)\n            tree[(ind>>1)] = tree[ind]+tree[ind^1];\n    }\n    \n    void update(int ind, int x) {\n        assert(ind >= 0 && ind < n);\n        if (ind == 0 || ind == n-1) {\n            a[ind] = x;\n            if (ind == n-1) upd(n-2,get(n-2));\n            else upd(1,get(1));\n            return;\n        }\n        a[ind] = x;\n        // debug(ind);\n        // debug(a);\n        // debug(get(ind));\n        // debug(get(ind-1));\n        // debug(get(ind+1));\n        upd(ind,get(ind));\n        // debug(tree);\n        upd(ind-1,get(ind-1));\n        upd(ind+1,get(ind+1));\n    }\n    \n    int query(int l, int r) {\n        int res = 0;\n        l++;\n        r--;\n        for (l+=n,r+=n;l<r;l>>=1,r>>=1) {\n            if (l&1) res += tree[l++];\n            if (r&1) res += tree[--r];\n        }\n        return res;\n    }\n    \n    void pt() {\n        debug(tree);\n        debug(a);\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> sol;\n        segtree st(nums);\n        for (auto &q : queries) {\n            debug('\\n');\n            debug(q);\n            st.pt();\n            if (q[0] == 1) {\n                sol.push_back(st.query(q[1],q[2]+1));\n            }\n            else {\n                st.update(q[1],q[2]);\n            }\n        }\n        return sol;\n    }\n};",
    "submit_ts": 1718507309.0
}