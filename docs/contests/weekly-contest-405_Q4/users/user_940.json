{
    "username": "sarvesh__21",
    "submission": "class Solution {\npublic:\n    \n    struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int minCost; \n    TrieNode() : minCost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        \n        if (node->minCost == -1 || cost < node->minCost) {\n            node->minCost = cost;\n        }\n    }\n    \n  \n    int getMinCost(const string& word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                return -1;\n            }\n            node = node->children[ch];\n        }\n        return node->minCost;\n    }\n};\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    Trie trie;\n    int n = words.size();\n    int m = target.size();\n    for (int i = 0; i < n; ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n    \n    \n    vector<long long> dp(m + 1, 1e18); \n    dp[0] = 0;\n    \n    for (int i = 0; i < m; ++i) {\n        TrieNode* node = trie.root;\n        for (int j = i; j < m; ++j) {\n            char ch = target[j];\n            if (!node->children.count(ch)) {\n                break; \n            }\n            node = node->children[ch];\n            if (node->minCost != -1) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n            }\n        }\n    }\n    \n    if(dp[m]==1e18)return -1;\n    return dp[m];\n}\n};",
    "submit_ts": "1720323124",
    "subm_id": "1312367871"
}