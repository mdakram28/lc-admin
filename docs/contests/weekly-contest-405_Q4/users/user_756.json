{
    "username": "finraell",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        enigmatic_max_cost = float('inf')\n        perplexing_length = len(target)\n        cryptic_word_map = {}\n\n        for cryptic_index in range(len(words)):\n            cryptic_word = words[cryptic_index]\n            perplexing_cost = costs[cryptic_index]\n            if cryptic_word not in cryptic_word_map or perplexing_cost < cryptic_word_map[cryptic_word]:\n                cryptic_word_map[cryptic_word] = perplexing_cost\n\n        mystic_dp = [enigmatic_max_cost] * (perplexing_length + 1)\n        mystic_dp[0] = 0\n\n        for cryptic_start in range(perplexing_length):\n            if mystic_dp[cryptic_start] == enigmatic_max_cost:\n                continue\n            for cryptic_word, perplexing_cost in cryptic_word_map.items():\n                perplexing_len = len(cryptic_word)\n                if cryptic_start + perplexing_len <= perplexing_length and target[cryptic_start:cryptic_start + perplexing_len] == cryptic_word:\n                    mystic_dp[cryptic_start + perplexing_len] = min(mystic_dp[cryptic_start + perplexing_len], mystic_dp[cryptic_start] + perplexing_cost)\n\n        final_cost = mystic_dp[perplexing_length]\n        return final_cost if final_cost != enigmatic_max_cost else -1",
    "submit_ts": "1720319939",
    "subm_id": "1312277324"
}