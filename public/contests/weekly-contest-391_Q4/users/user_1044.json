{
    "username": "agrawalashutosh635",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& A) {\n        int N = A.size();\n        // vector<int> V(N), V1(N);\n        // for (int i = 0; i < N; i++) V[i] = A[i][0] + A[i][1],  V1[i] = A[i][0] - A[i][1];\n        // sort(V.begin(), V.end());\n        // sort(V1.begin(), V1.end());\n        // return min(V.back() - V.front(), V1.back() - V1.front());\n        \n        multiset<int> s1,s2;\n        for(int i = 0;i<N;i++){\n            s1.insert( A[i][0] + A[i][1]);\n            s2.insert(A[i][0] - A[i][1]);\n        };\n        \n        int res = INT_MAX;\n        for(int i =0; i<N;i++){\n            int temp1 = A[i][0] + A[i][1], temp2 = A[i][0] - A[i][1];\n            s1.erase(s1.find(temp1));\n            s2.erase(s2.find(temp2));\n            res = min(res, max(\n                (*s1.rbegin()) - (*s1.begin()),\n                (*s2.rbegin()) - (*s2.begin())\n            ));\n            \n            s1.insert(temp1);\n            s2.insert(temp2);\n        }\n        return res;\n    }\n};"
}