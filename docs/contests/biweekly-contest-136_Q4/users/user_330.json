{
    "username": "helloWorld4628",
    "submission": "class Solution {\npublic:\n    // void dfs(int node, int par, vector<vector<int>>&adj, int &temp, int time){\n    //     temp = max(temp, time);\n    //     for(auto it : adj[node]){\n    //         if(it == par) continue;\n    //         if(it%2) dfs(it, node, adj, temp, time+1);\n    //         else dfs(it, node, adj, temp, time+2);\n    //     }\n    // }\n\n    int dfs(int node, int par, vector<vector<int>>&adj, vector<map<int, int>>&map1){\n        int time = 0;\n        int h1 = -1, h2 = -1, node1 = -1, node2 = -1;\n        for(auto it : adj[node]){\n            if(it == par) continue;\n            int ab = dfs(it, node, adj, map1);\n            time = max(time, ab);\n            if(ab > h1){\n                h2 = h1;\n                node2 = node1;\n                h1 = ab;\n                node1 = it;\n            }\n            else if(ab > h2){\n                h2 = ab;\n                node2 = it;\n            }\n        }\n        if(node1 == -1){\n\n        }\n        else if(node2 == -1){\n            map1[node][node1] = h1;\n        }\n        else{\n            map1[node][node1] = h1;\n            map1[node][node2] = h2;\n        }\n        if(node%2) return time + 1;\n        return time + 2;\n    }\n\n    void dfs2(int node, int par, vector<vector<int>>&adj, vector<map<int, int>>&map1, int height, vector<int>&heights){\n        // cout<<node<<\" \"<<height<<endl;\n        if(node == 0){\n            int h1 = -1, h2 = -1, node1 = -1, node2 = -1;\n            for(auto it : map1[node]){\n                if(h1 == -1){\n                    h1 = it.second;\n                    node1 = it.first;\n                }\n                else{\n                    h2 = it.second;\n                    node2 = it.first;\n                }\n            }\n            if(h2 > h1){\n                swap(h1 , h2);\n                swap(node1, node2);\n            }\n            for(auto it : adj[node]){\n                if(it == node1){\n                    int abc = 0;\n                    if(node%2) abc = 1;\n                    else abc = 2;\n                    dfs2(it, node, adj, map1, max(h2, 0) + abc, heights);\n                }\n                else{\n                    int abc = 0;\n                    if(node%2) abc = 1;\n                    else abc = 2;\n                    dfs2(it, node, adj, map1, max(h1, 0) + abc, heights);\n                }\n            }\n            return;\n        }\n        int h1 = -1, h2 = -1, node1 = -1, node2 = -1;\n            for(auto it : map1[node]){\n                if(h1 == -1){\n                    h1 = it.second;\n                    node1 = it.first;\n                }\n                else{\n                    h2 = it.second;\n                    node2 = it.first;\n                }\n            }\n            if(h2 > h1){\n                swap(h1 , h2);\n                swap(node1, node2);\n            }\n            heights[node] = max(height, h1);\n            // if(node == 3 || node == 4){\n            //     cout<<height<<endl;\n            // }\n            for(auto it : adj[node]){\n                if(it == par) continue;\n                if(it == node1){\n                    int abc = 0;\n                    if(node%2) abc = 1;\n                    else abc = 2;\n                    dfs2(it, node, adj, map1, max(h2, max(height, 0)) + abc, heights);\n                }\n                else{\n                    int abc = 0;\n                    if(node%2) abc = 1;\n                    else abc = 2;\n                    dfs2(it, node, adj, map1, max(h1, max(0, height)) + abc, heights);\n                }\n            }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for(int i=0;i<n-1;i++){\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n        }\n        vector<int> ans(n);\n        vector<int> heights(n);\n        vector<map<int, int>> map1(n);\n        ans[0] = dfs(0, -1, adj, map1) - 2;\n        // for(int i=0;i<n;i++){\n        //     cout<<i<<\" \"<<endl;\n        //     for(auto it : map1[i]){\n        //         cout<<it.first<<\" \"<<it.second<<endl;\n        //     }\n        //     cout<<endl;\n        // }\n        dfs2(0, -1, adj, map1, 0, heights);\n        for(int i=1;i<n;i++){\n            ans[i] = heights[i];\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722700228",
    "subm_id": "1343235494"
}