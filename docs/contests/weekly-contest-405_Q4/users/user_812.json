{
    "username": "user4958DL",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    bool isEndOfWord;\n    \n    TrieNode() {\n        this->cost = INT_MAX;\n        this->isEndOfWord = false;\n    }\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->isEndOfWord = true;\n        node->cost = min(node->cost, cost);\n    }\n    \n    bool find_word(const string& word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                return false;\n            }\n            node = node->children[c];\n        }\n        return node->isEndOfWord; \n    }\n    \n    bool is_prefix(const string& prefix) {\n        TrieNode* node = root;\n        for (char c : prefix) {\n            if (node->children.find(c) == node->children.end()) {\n                return false; \n            }\n            node = node->children[c];\n        }\n        return true; \n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<int> resultant(n + 1, INT_MAX);\n        resultant[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (resultant[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                if (node->isEndOfWord) {\n                    resultant[j + 1] = min(resultant[j + 1], resultant[i] + node->cost);\n                }\n            }\n        }\n\n        return resultant[n] == INT_MAX ? -1 : resultant[n];\n    }\n};",
    "submit_ts": "1720322620",
    "subm_id": "1312354743"
}