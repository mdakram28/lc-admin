{
    "username": "azesx",
    "submission": "using ll = long long;\n#define _rep_sel(a1,a2,a3,a4,exp,...) exp\n#define rep_n(n) for(ll i=0;i<(ll)(n);++i)\n#define rep_in(i,n) for(ll i=0;i<(ll)(n);++i)\n#define rep_isn(i,s,n) for(ll i=(ll)(s);i<(ll)(n);++i)\n#define rep_isninc(i,s,n,inc) for(ll i=(ll)(s);i<(ll)(n);i+=(ll)(inc))\n#define rep(...) _rep_sel(__VA_ARGS__,rep_isninc,rep_isn,rep_in,rep_n)(__VA_ARGS__)\n#define rrep(i,j,n,m) for(ll i=0;i<(ll)(n);++i) for(ll j=0;j<(ll)(m);++j)\n#define per(i,n) for(ll i=(ll)(n);i>=(ll)0;--i)\n#define each(it, a) for (const auto& it: a)\nconstexpr ll inf = 1e18+1;\ntemplate <class T, class TVal> inline bool chmax(T &a, const TVal &b) { return (a < b ? a = b, 1 : 0); }\ntemplate <class T, class TVal> inline bool chmin(T &a, const TVal &b) { return (a > b ? a = b, 1 : 0); }\ntemplate<typename T1, typename T2 = T1> struct v2 { T1 x; T2 y; friend strong_ordering operator<=>(const v2&, const v2&) = default; };\ntemplate<typename T1, typename T2 = T1, typename T3 = T1> struct v3 { T1 x; T2 y; T3 z; friend strong_ordering operator<=>(const v3&, const v3&) = default; };\ntemplate<typename T> using vec = vector<T>;\ntemplate<typename T> using vvec = vector<vector<T>>;\nusing veci = vec<ll>; using vveci = vvec<ll>;\nusing vecb = vec<bool>; using vvecb = vvec<bool>;\nusing v2i = v2<ll>; using v3i = v3<ll>;\ntemplate<typename T> using pq_dec = priority_queue<T>;\ntemplate<typename T> using pq_inc = priority_queue<T, vector<T>, greater<T>>;\n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& A, int k) {\n        veci last(64, inf);\n        ll valid = 0;\n        ll res = 0;\n        rep(i, A.size()){\n            ll from = inf;\n            ll to = -1;\n            rep(j, 64){\n                if(!(A[i] & (1ll << j))){\n                    last[j] = i;\n                }\n\n                if(!(k & (1ll << j))){\n                    chmin(from, last[j]);\n                    chmax(to, last[j]);\n                }\n            }\n\n            rep(j, 64){\n                if(!(A[i] & (1ll << j)) && (k & (1ll << j))){\n                    valid = i + 1;\n                }\n            }\n\n            if(to > i){\n                continue;\n            }\n\n            res += max(0ll, from - valid + 1ll);\n            res = res;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1720279407",
    "subm_id": "1311749974"
}