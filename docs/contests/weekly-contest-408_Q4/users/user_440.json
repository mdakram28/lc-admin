{
    "username": "hriticksidana44",
    "submission": "from collections import deque\nfrom math import sqrt\nfrom typing import List\n\nclass Solution:\n    def bfs(self, graph: List[List[int]], start: int, target1: int, target2: int, totalNodes: int) -> bool:\n        nodesQueue = deque([start])\n        visited = [0] * (totalNodes + 4)\n        visited[start] = 1\n\n        while nodesQueue:\n            currentNode = nodesQueue.popleft()\n            for neighbor in graph[currentNode]:\n                if not visited[neighbor]:\n                    nodesQueue.append(neighbor)\n                    visited[neighbor] = 1\n\n        return visited[target1] or visited[target2]\n\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        numCircles = len(circles)\n        graph = [[] for _ in range(numCircles + 4)]\n\n        for i in range(numCircles):\n            x, y, radius = circles[i]\n            if x <= radius:\n                graph[numCircles].append(i)\n                graph[i].append(numCircles)\n            if X - x <= radius:\n                graph[numCircles + 2].append(i)\n                graph[i].append(numCircles + 2)\n            if y <= radius:\n                graph[numCircles + 1].append(i)\n                graph[i].append(numCircles + 1)\n            if Y - y <= radius:\n                graph[numCircles + 3].append(i)\n                graph[i].append(numCircles + 3)\n            for j in range(i + 1, numCircles):\n                x2, y2, radius2 = circles[j]\n                distance = sqrt((x - x2) ** 2 + (y - y2) ** 2)\n                if radius + radius2 >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n\n        isBlocked = False\n        isBlocked = isBlocked or self.bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)  # Check for bottom-left corner\n        isBlocked = isBlocked or self.bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)  # Check for top-right corner\n\n        return not isBlocked\n",
    "submit_ts": "1722137120",
    "subm_id": "1335754764"
}