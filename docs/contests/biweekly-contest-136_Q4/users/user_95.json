{
    "username": "JeffreyLC",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        const int n = edges.size() + 1;\n        BuildAdjacencyList(n, edges);\n        vector<int> ans(n);\n        for (int i = 0; i < n; ++i) {\n            ans[i] = dfs(i, -1);\n        }\n        return ans;\n    }\nprivate:\n    vector<unordered_map<int, int>> adj;\n    vector<multiset<int>> dist;\n    vector<int> call_cnt;\n    \n    void BuildAdjacencyList(int n, const vector<vector<int>>& edges) {\n        adj.resize(n);\n        dist.resize(n);\n        call_cnt.resize(n);\n        for (const vector<int>& edge : edges) {\n            adj[edge[0]][edge[1]] = adj[edge[1]][edge[0]] = -1;\n        }\n    }\n    \n    int dfs(int x, int p) {\n        int t = 0;\n        if (++call_cnt[x] <= 2) {\n            for (auto& [y, t2] : adj[x]) {\n                if (p == y) continue;\n                if (t2 == -1) {\n                    t2 = dfs(y, x);\n                    dist[x].insert((y % 2 == 1 ? 1 : 2) + t2);\n                }\n                t = max(t, (y % 2 == 1 ? 1 : 2) + t2);\n            }\n        } else {\n            if (p != -1) {\n                int elem = adj[x][p] + (p % 2 == 1 ? 1 : 2);\n                dist[x].erase(dist[x].find(elem));\n                t = *dist[x].rbegin();\n                dist[x].insert(elem);\n            } else {\n                t = *dist[x].rbegin();\n            }\n        }\n        return t;\n    }\n};",
    "submit_ts": "1722698391",
    "subm_id": "1343179122"
}