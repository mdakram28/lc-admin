{
    "username": "dogdog",
    "submission": "class Solution {\n    class Node{\n        Node ls, rs;\n        int add, val;\n    }\n    int N = (int)1e9;\n    Node root = new Node();\n    void update(Node node, int ls, int rs, int l, int r, int val){\n        if(l <= ls && rs <= r){\n            node.add = val;\n            node.val = val;\n            return;\n        }\n        pushdown(node); \n        int mid = ls + (rs - ls) / 2;\n        if(l <= mid){\n            update(node.ls, ls, mid, l, r, val);\n        }\n        if(r > mid){\n            update(node.rs, mid + 1, rs, l, r, val);\n        }\n        pushup(node);\n    }\n    int query(Node node, int ls, int rs, int l, int r){\n        if(l <= ls && rs <= r){\n            return node.val;\n        }\n        pushdown(node);\n        int mid = ls + (rs - ls) / 2;\n        int ans = 0;\n        if(l <= mid){\n            ans = Math.max(ans, query(node.ls, ls, mid, l, r));\n        }\n        if(r > mid){\n            ans = Math.max(ans, query(node.rs, mid + 1, rs, l, r));\n        }\n        return ans;\n    }\n    void pushdown(Node node){\n        if(node.ls == null) node.ls = new Node();\n        if(node.rs == null) node.rs = new Node();\n        if(node.add == 0) return;\n        node.ls.add = node.add;\n        node.rs.add = node.add;\n        node.ls.val = node.add;\n        node.rs.val = node.add;\n        node.add = 0;\n    }\n    void pushup(Node node){\n        node.val = Math.max(node.ls.val, node.rs.val);\n    }\n    public List<Boolean> getResults(int[][] qs) {\n        int len = qs.length;\n        int N = 3 * len + 10;\n        // int[][] lca = new int[m][20];\n        List<Boolean> ans = new ArrayList<>();\n        // int max = 0;\n        TreeMap<Integer, Integer> tm = new TreeMap<>();\n        tm.put(1, N * 10);\n        update(root, 1, N, 1, 1, N * 10 - 1);\n        for(int i = 0; i < len; i++){\n            int[] p = qs[i];\n            if(p[0] == 1){\n                int x = p[1] + 1;\n                int a = tm.floorKey(x);\n                int b = a + tm.get(a);\n                int pre = b - a;\n                tm.remove(a);\n                if(x - a > 0) tm.put(a, x - a);\n                if(b - x > 0) tm.put(x, b - x);\n                update(root, 1, N, a, a, x - a);\n                update(root, 1, N, x, x, b - x);\n                // System.out.println(a + \" \" + x);\n            }else{\n                if(p[2] > p[1]){\n                    ans.add(false);\n                    continue;\n                }\n                int r = p[1] + 1, x = p[2];\n                int cur = query(root, 1, N, 1, r - x);\n                // System.out.println(cur);\n                if(cur >= x) ans.add(true);\n                else ans.add(false);\n            }\n           \n        }\n        return ans;\n        \n    }\n}",
    "submit_ts": 1716651802.0
}