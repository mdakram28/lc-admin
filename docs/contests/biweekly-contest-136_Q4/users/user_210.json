{
    "username": "ard001",
    "submission": "class Solution {\npublic:\n    void dfs(int u,int p,vector<vector<int>>&tree,vector<int>&dp){\n        dp[u] = 0;\n        for(int v: tree[u])if(v!=p){\n            dfs(v,u,tree,dp);\n            dp[u] = max(dp[u], 1 + (v&1^1) + dp[v]);\n        }\n    }\n    void dfs2(int u,int p,int c,vector<vector<int>>&tree,vector<int>&dp,vector<int>&ans){\n        if(p==-1) ans[u] = dp[u];\n        else ans[u] = max(dp[u],c);\n        \n\n        int idx = -1, _max1 = 0, _max2 = 0;\n        for(int i=0;i<tree[u].size();++i){\n            int v = tree[u][i], w = dp[v] + 1 + (v&1^1);\n            if(v==p)continue;\n            else if(idx==-1)idx=i,_max1=w;\n            else if(_max1<=w)_max2=_max1,idx=i,_max1=w;\n            else if(_max2<w)_max2=w;\n        }\n        for(int i=0;i<tree[u].size();++i){\n            int v = tree[u][i] ;\n            if(v==p)continue;\n            int c0 = 1 + max(i==idx ? _max2: _max1, c ) + (u&1^1);\n            dfs2(v,u,c0,tree,dp,ans);\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        const int n = edges.size() + 1;\n        vector<vector<int>> tree(n,vector<int>());\n        for(vector<int> edge: edges){\n            tree[edge[0]].push_back(edge[1]);\n            tree[edge[1]].push_back(edge[0]);\n        }\n        vector<int> ans(n,0);\n        vector<int> dp(n,0);\n        dfs(0,0,tree,dp);\n        dfs2(0,-1,0,tree,dp,ans);\n        return ans;\n    }\n};",
    "submit_ts": "1722699526",
    "subm_id": "1343214377"
}