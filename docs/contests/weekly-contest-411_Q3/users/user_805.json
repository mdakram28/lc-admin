{
    "username": "Tycho",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        \n        if k in [1,3,9]:\n            return \"9\" * n\n        if k == 2:\n            if n == 1:\n                return \"8\"\n            return \"8\" + \"9\" * (n - 2) + \"8\"\n        if k == 4:\n            if n <= 4:\n                return \"8\" * n\n            return \"88\" + \"9\" * (n - 4) + \"88\"\n        if k == 5:\n            if n == 1:\n                return \"5\"\n            return \"5\" + \"9\" * (n - 2) + \"5\"\n        if k == 6:\n            if n == 1:\n                return \"6\"\n            if n == 2:\n                return \"66\"\n            if n == 3:\n                return \"888\"\n            if n % 2 == 0:\n                return \"8\" + \"9\" * (n//2 - 2) + \"77\" + \"9\" * (n//2-2) + \"8\"\n            return \"8\" + \"9\" * (n//2 - 1) + \"8\" + \"9\" * (n//2-1) + \"8\"\n        if k == 7:\n            m7 = [0]\n            for i in range(1,100001):\n                m7.append((m7[-1] * 10 + 9) % 7)\n            s = [9 for i in range(n)]\n            r = m7[len(s)]\n            while r % k != 0:\n                #print(n,k,r,s)\n                if n % 2 == 0:\n                    s[n//2] -= 1\n                    s[n//2 - 1] -= 1\n                    r -= m7[n//2] +1 \n                    r -= m7[n//2 - 1] + 1\n                else:\n                    s[n//2] -= 1\n                    r -= m7[n//2] + 1\n                r = r % k\n            return \"\".join(str(i) for i in s)\n        if k == 8:\n            if n <= 6:\n                return \"8\" * n\n            return \"888\" + \"9\" * (n - 6) + \"888\"",
    "submit_ts": "1723950857",
    "subm_id": "1359756892"
}