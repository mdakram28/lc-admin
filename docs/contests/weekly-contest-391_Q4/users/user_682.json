{
    "username": "cavenqjw",
    "submission": "class Solution:\n    def d(self, points: List[List[int]]) -> int:\n        n = len(points)\n        x = [0] * n\n        y = [0] * n\n        for i in range(n):\n            x[i] = (points[i][0] + points[i][1], i)\n            y[i] = (points[i][0] - points[i][1], i)\n        \n        x.sort()\n        y.sort()\n        \n        return x, y\n        \n    \n    def minimumDistance(self, points: List[List[int]]) -> int:\n        x, y = self.d(points)\n        n = len(points)\n        i, j = 0, 0\n        if x[-1][0] - x[0][0] > y[-1][0] - y[0][0]:\n            i, j = x[-1][1], x[0][1]\n        else:\n            i, j = y[-1][1], y[0][1]\n        \n        # case 1\n        i1, j1 = 0, 0\n        for k in range(n):\n            if x[k][1] == i:\n                i1 = k\n                break\n        for k in range(n):\n            if y[k][1] == i:\n                j1 = k\n                break\n        m = 400000000\n        x1 = x[0:i1] + x[i1+1:]\n        y1 = y[0:j1] + y[j1+1:]\n        mm = max(x1[-1][0] - x1[0][0], y1[-1][0] - y1[0][0])\n        if mm < m :\n            m = mm\n        \n        # case 2\n        i2, j2 = 0, 0\n        for k in range(n):\n            if x[k][1] == j:\n                i2 = k\n                break\n        for k in range(n):\n            if y[k][1] == j:\n                j2 = k\n                break\n        x2 = x[0:i2] + x[i2+1:]\n        y2 = y[0:j2] + y[j2+1:]\n        mm = max(x2[-1][0] - x2[0][0], y2[-1][0] - y2[0][0])\n        if mm < m :\n            m = mm\n        return m"
}