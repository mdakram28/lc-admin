{
    "username": "Mohammadreza2020",
    "submission": "from typing import List\n\nclass Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        MOD = 10**9 + 7\n        \n        # Sort requirements and create a mapping\n        requirements.sort()\n        req_map = {end: count for end, count in requirements}\n        \n        # Initialize DP table\n        dp = [[0] * 401 for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, n + 1):\n            for j in range(401):\n                for k in range(i):\n                    if j >= k:\n                        dp[i][j] = (dp[i][j] + dp[i-1][j-k]) % MOD\n            \n            # Apply the requirement if it exists for this index\n            if i - 1 in req_map:\n                req_count = req_map[i - 1]\n                if req_count > 400:\n                    return 0\n                temp = [0] * 401\n                temp[req_count] = dp[i][req_count]\n                dp[i] = temp\n        \n        return dp[n][req_map[n-1]] if n-1 in req_map else sum(dp[n]) % MOD\n\n# Example usage\nsolution = Solution()\nn = 5\nrequirements = [[0,0],[4,5],[1,0]]\nprint(solution.numberOfPermutations(n, requirements))  # Output should be 11",
    "submit_ts": 1719068669.0
}