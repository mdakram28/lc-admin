{
    "username": "anuragmudgil00",
    "submission": "class Solution {\npublic:\n\n    void calc(int start, vector<vector<int>> &graph, map<pair<int,int>,int> &m, vector<vector<int>> &dp, vector<int> &visited){\n        \n        //cout<<start<<\"YO\"<<endl ;\n        int mx = 0 ;\n        int mx_s = -1 ;\n        int second_max = 0 ;\n        int second_max_s = -1 ;\n        for(int i=0;i<graph[start].size();i++){\n            int g = graph[start][i] ;\n            // if(start==0){\n            //     cout<<g<<\" \"<<mx<<\"HI\"<<endl ;\n            // }\n            \n            if(visited[g]==1){\n                continue ;\n            }\n            visited[g] = 1 ;\n            calc(g, graph, m, dp, visited) ;\n            int w = 1 ;\n            if(g%2==0){\n                w = 2 ;\n            }\n            int val = dp[g][0] + w ;\n            \n            if(val>=mx){\n                \n                second_max = mx ;\n                second_max_s = mx_s ;\n                mx = val ;\n                mx_s = g ;\n                \n            } \n            else if(val>=second_max){\n                second_max = val ;\n                second_max_s = g ;\n            }\n            else{\n\n            }\n        }\n        dp[start][0] = mx ;\n        dp[start][1] = mx_s ;\n        dp[start][2] = second_max ;\n        dp[start][3] = second_max_s ;\n    }\n\n    void dfs(int start, vector<vector<int>> &graph, map<pair<int,int>,int> &m, vector<vector<int>> &dp, vector<int> &visited, vector<int> &ans, int p){\n        \n        ans[start] = dp[start][0] ;\n        if(p!=-1){\n            if(dp[p][1]!=start){\n                int w = 1 ;\n                if(p%2==0){\n                    w = 2 ;\n                }\n                int o1 = w +  dp[p][0] ;\n                if(o1>=dp[start][0]){\n                    dp[start][2] = dp[start][0] ;\n                    dp[start][3] = dp[start][1] ;\n                    dp[start][0] = o1 ;\n                    dp[start][1] = p ; \n                }\n                else if(o1>=dp[start][2]){\n                    dp[start][2] = o1 ;\n                    dp[start][3] = p ; \n                }\n                ans[start] = max(ans[start], o1) ;\n            }\n            if(dp[p][3]!=start){\n                int w = 1 ;\n                if(p%2==0){\n                    w = 2 ;\n                }\n                int o1 = w + dp[p][2] ;\n                if(o1>=dp[start][0]){\n                    dp[start][2] = dp[start][0] ;\n                    dp[start][3] = dp[start][1] ;\n                    dp[start][0] = o1 ;\n                    dp[start][1] = p ; \n                }\n                else if(o1>=dp[start][2]){\n                    dp[start][2] = o1 ;\n                    dp[start][3] = p ; \n                }\n                ans[start] = max(ans[start], o1) ;\n            }\n        }\n\n\n        for(int i=0;i<graph[start].size();i++){\n            int g = graph[start][i] ;\n            if(visited[g]==1){\n                continue ;\n            }\n            visited[g] = 1 ;\n            dfs(g, graph, m, dp, visited, ans, start) ;\n        }\n\n    }\n\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        \n        int n = edges.size() + 1 ;\n        vector<vector<int>> graph(n) ;\n        map<pair<int,int>,int> m ;\n        for(int i=0;i<edges.size();i++){\n            int u = edges[i][0] ;\n            int v = edges[i][1] ;\n            // if(v%2==0){\n            //     m[{u,v}] = 2 ;\n            // }\n            // else{\n            //     m[{u,v}] = 1 ;\n            // }\n            // if(u%2==0){\n            //     m[{v,u}] = 2 ;\n            // }\n            // else{\n            //     m[{v,u}] = 1 ;\n            // }\n            graph[u].push_back(v) ;\n            graph[v].push_back(u) ;\n        }\n\n        vector<int> visited(n) ; visited[0] = 1 ;\n        vector<vector<int>> dp(n, vector<int>(4)) ;\n        calc(0, graph, m, dp, visited) ;\n\n        // for(int i=0;i<dp.size();i++){\n        //     cout<<dp[i][0]<<\" \"<<dp[i][1]<<\" \"<<dp[i][2]<<\" \"<<dp[i][3]<<endl ;\n        // }\n\n        vector<int> ans(n) ;\n        vector<int> visited1(n) ; visited1[0] = 1 ;\n        dfs(0, graph, m, dp, visited1, ans, -1) ;\n        return ans ;\n\n    }\n};",
    "submit_ts": "1722700657",
    "subm_id": "1343248659"
}