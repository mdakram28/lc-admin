{
    "username": "uselesstest1",
    "submission": "class Solution {\n    int[] dfs(ArrayList<Integer>[] ad, int node,int p){\n        \n        int ct = -1,nxt = -1;\n        for(int v : ad[node]){\n            if(v != p){\n                int[] dd = dfs(ad,v,node);\n                if(dd[0] > ct){\n                    ct = dd[0];\n                    nxt = dd[1];\n                }\n            }\n        }\n        \n        if(nxt == -1) return new int[]{0,node};\n        return new int[]{ct+1,nxt};\n    }\n    int len(ArrayList<Integer>[] ad){\n        if(ad[0] == null)return 0;\n        int[] gg = dfs(ad , 0,-1);\n        // System.out.println(gg[0]+  \" \"+gg[1]);\n        return dfs(ad,gg[1] , -1)[0];\n    }\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        \n        ArrayList<Integer>[] ad = new ArrayList[100000];\n        for(int[] x:edges1){\n            if(ad[x[0]] == null) ad[x[0]] = new ArrayList<>();\n            if(ad[x[1]] == null) ad[x[1]] = new ArrayList<>();\n            ad[x[0]].add(x[1]);\n            ad[x[1]].add(x[0]);\n        }\n        int len1 = len(ad);\n        // System.out.println(len1);\n        ad = new ArrayList[100000];\n        for(int[] x:edges2){\n            if(ad[x[0]] == null) ad[x[0]] = new ArrayList<>();\n            if(ad[x[1]] == null) ad[x[1]] = new ArrayList<>();\n            ad[x[0]].add(x[1]);\n            ad[x[1]].add(x[0]);\n        }\n        int len2 = len(ad);\n        int ans = len1 % 2 == 0 ? len1/2  : len1/2 +1;\n        ans += len2 % 2 == 0 ? len2/2  : len2/2 +1;\n        int max = Math.max(ans+1 , len1);\n        max = Math.max(max, len2);\n        return max;\n    }\n}",
    "submit_ts": 1719718173.0
}