{
    "username": "kaq",
    "submission": "class Solution {\npublic:\n    tuple<int, int, int> getMaxDiff(vector<pair<int, int>>& arr) {\n        auto [minVal, minInd] = *min_element(arr.begin(), arr.end());\n        auto [maxVal, maxInd] = *max_element(arr.begin(), arr.end());\n        return {maxVal - minVal, minInd, maxInd};\n    }\n    \n    tuple<int, int, int> getMaxDistance(vector<vector<int>>& points) {\n        // returns the distance and the two indices\n        vector<pair<int, int>> a;\n        vector<pair<int, int>> b;\n        for (int i = 0; i < points.size(); i++) {\n            a.emplace_back(points[i][0] + points[i][1], i);\n            b.emplace_back(points[i][0] - points[i][1], i);\n        }\n        auto [a1, a2, a3] = getMaxDiff(a);\n        auto [b1, b2, b3] = getMaxDiff(b);\n        if (a1 > b1) {\n            return {a1, a2, a3};\n        } else {\n            return {b1, b2, b3};\n        }\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        auto [maxDistance, index1, index2] = getMaxDistance(points);\n        vector<vector<int>> points1;\n        vector<vector<int>> points2;\n        for (int i = 0; i < points.size(); i++) {\n            if (i != index1) {\n                points1.push_back(points[i]);\n            }\n            if (i != index2) {\n                points2.push_back(points[i]);\n            }\n        }\n        auto [a1, a2, a3] = getMaxDistance(points1);\n        auto [b1, b2, b3] = getMaxDistance(points2);\n        return min(a1, b1);\n    }\n};"
}