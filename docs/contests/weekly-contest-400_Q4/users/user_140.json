{
    "username": "chromate00",
    "submission": "#include <cassert>\n#include <vector>\n\n// CUT begin\n// Static sequence sparse table\n// Complexity: O(NlogN) for precalculation, O(1) per query\ntemplate <class S, S (*op)(S, S), S (*e)()> struct sparse_table {\n    int N, lgN;\n    std::vector<std::vector<S>> d;\n    std::vector<int> lgx_table;\n    sparse_table() {}\n    sparse_table(const std::vector<S> &sequence) : N(sequence.size()) {\n        lgx_table.resize(N + 1);\n        for (int i = 2; i < N + 1; ++i) lgx_table[i] = lgx_table[i >> 1] + 1;\n        lgN = lgx_table[N] + 1;\n        d.assign(lgN, std::vector<S>(N, e()));\n        d[0] = sequence;\n        for (int h = 1; h < lgN; ++h) {\n            for (int i = 0; i + (1 << h) <= N; ++i) {\n                d[h][i] = op(d[h - 1][i], d[h - 1][i + (1 << (h - 1))]);\n            }\n        }\n    }\n    S prod(int l, int r) const { // [l, r), 0-indexed\n        assert(l >= 0 and r <= N);\n        if (l >= r) return e();\n        int h = lgx_table[r - l];\n        return op(d[h][l], d[h][r - (1 << h)]);\n    }\n};\n\nint op(int a,int b){return a&b;}\nint e(){return -1;}\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        sparse_table<int,op,e>sp(nums);\n        int ans=1e9;\n        for(int i=1;i<=size(nums);i++)\n        {\n            int L=0,R=i-1;\n            int d=1<<20;\n            while(d>0)\n            {\n                if(L+d<i&&sp.prod(L+d,i)<=k)L+=d;\n                d>>=1;\n            }\n            d=1<<20;\n            while(d>0)\n            {\n                if(R-d>=0&&sp.prod(R-d,i)>=k)R-=d;\n                d>>=1;\n            }\n            ans=min(ans,abs(k-sp.prod(R,i)));\n            ans=min(ans,abs(k-sp.prod(L,i)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297185.0
}