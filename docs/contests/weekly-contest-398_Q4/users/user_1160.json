{
    "username": "danishp511",
    "submission": "class Solution {\npublic:\n  \n    int fun(unordered_map<int, vector<vector<int>>> &dp, int k, int i, int jump, bool take) {\n        if (jump > 31 || i > k + 5)\n            return 0;\n\n        if(dp.count(i) && dp[i][jump][take] != -1)\n            return dp[i][jump][take];\n\n        int ans;\n        if(i == k){\n            ans=1;\n        }else{\n            ans=0;\n        }\n        \n        \n        if (take){\n           // Go down to stair i - 1. This operation cannot be used consecutively or on stair 0.\n            ans += fun(dp,k, i-1, jump, false);\n        }\n            \n        if (i + (1 << jump) <= k + 1){\n            // Go up to stair i + 2^jump. And then, jump becomes jump + 1.\n            ans += fun(dp, k, i+(1<<jump), jump+1, true);\n        }\n            \n        dp[i].resize(32, vector<int>(2, -1));\n\n        return dp[i][jump][take] = ans;\n    }\n    public:\n    int waysToReachStair(int k) {\n        unordered_map<int, vector<vector<int>>> dp;\n        int i=1;\n        int jump=0;\n        bool takeJump= true;\n        \n        return fun(dp, k, i, jump, takeJump);\n    } \n\n};",
    "submit_ts": "1716090700",
    "subm_id": "1261873418"
}