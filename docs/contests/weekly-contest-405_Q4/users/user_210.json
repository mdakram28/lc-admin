{
    "username": "AJHarsh",
    "submission": "class Solution {\npublic:\n\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> words; // Store (word index, word length)\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index, int length) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->words.emplace_back(index, length);\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nint dfs(const string& target, int pos, const vector<string>& words, const vector<int>& costs, vector<int>& memo, TrieNode* root) {\n    if (pos == target.size()) return 0;\n    if (memo[pos] != -1) return memo[pos];\n\n    int minCost = INT_MAX;\n    TrieNode* node = root;\n    for (int i = pos; i < target.size(); ++i) {\n        if (!node->children.count(target[i])) break;\n        node = node->children[target[i]];\n\n        for (const auto& [index, length] : node->words) {\n            if (i + 1 >= length) {\n                int cost = dfs(target, i + 1, words, costs, memo, root);\n                if (cost != INT_MAX) {\n                    minCost = min(minCost, cost + costs[index]);\n                }\n            }\n        }\n    }\n\n    return memo[pos] = minCost;\n}\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i, words[i].size());\n    }\n\n    vector<int> memo(target.size(), -1);\n    int result = dfs(target, 0, words, costs, memo, trie.getRoot());\n    return result == INT_MAX ? -1 : result;\n    }\n};",
    "submit_ts": "1720320852",
    "subm_id": "1312306413"
}