{
    "username": "IAFB358kMw",
    "submission": "import java.util.*;\n\npublic class Solution {\n    \n    Map<Integer, Integer> makeMap(int[][] requirements) {\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int[] r : requirements) {\n            map.put(r[0] + 1, r[1]);\n        }\n        return map;\n    }\n    \n    int solve(long[][] dp, int n) {\n        long result = 0;\n        for (int i = 0; i <= MAX; ++i) {\n            result = (result + dp[n][i]) % MOD;\n        }\n        return (int) result;\n    }\n\n    int numberOfPermutations(int n, int[][] requirements) {\n        Map<Integer, Integer> mp = makeMap(requirements);\n\n\n        long[][] dp = new long[n + 1][MAX + 1];\n        dp[0][0] = 1;\n\n        int s = 1;\n        while (s <= n) {\n            int c = 0;\n            while (c <= MAX) {\n                int np = 0;\n                while (np < s) {\n                    int p = c - np;\n                    if (p >= 0) {\n                        dp[s][c] = (dp[s][c] + dp[s - 1][p]) % MOD;\n                    }\n                    np++;\n                }\n                c++;\n            }\n\n            if (mp.containsKey(s)) {\n                int r = mp.get(s);\n                for (c = 0; c <= MAX; ++c) {\n                    if (c != r) {\n                        dp[s][c] = 0;\n                    }\n                }\n            }\n\n            s++;\n        }\n\n        long result = 0;\n        for (int i = 0; i <= MAX; ++i) {\n            result = (result + dp[n][i]) % MOD;\n        }\n\n        return solve(dp,n);\n    }\n    \n    private static final int MOD = 1000000007;\n    private static final int MAX= 400;\n}\n",
    "submit_ts": "1719071351",
    "subm_id": "1296844795"
}