{
    "username": "leetcodeyu1990",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        \n        def min_area_cover(grid, r1, c1, r2, c2):\n            min_row, max_row = len(grid), -1\n            min_col, max_col = len(grid[0]), -1\n\n            for r in range(r1, r2+1):\n                for c in range(c1, c2+1):\n                    if grid[r][c] == 1:\n                        min_row = min(min_row, r)\n                        max_row = max(max_row, r)\n                        min_col = min(min_col, c)\n                        max_col = max(max_col, c)\n\n            if max_col == -1 or max_row == -1:\n                return 0  # No 1s in this sub-grid\n            return (max_row - min_row + 1) * (max_col - min_col + 1)\n        \n        def find_min_area_with_row_cuts(grid):\n            m = len(grid)\n            min_area = float('inf')\n\n            for x in range(1, m - 1):\n                for y in range(x + 1, m):\n                    area1 = min_area_cover(grid, 0, 0, x - 1, len(grid[0]) - 1)\n                    area2 = min_area_cover(grid, x, 0, y - 1, len(grid[0]) - 1)\n                    area3 = min_area_cover(grid, y, 0, m - 1, len(grid[0]) - 1)\n                    \n                    # if area1 == 0 or area 2 == 0 or area3 == 0:\n                    #     continue \n                    \n                    total_area = area1 + area2 + area3\n                    min_area = min(min_area, total_area)\n\n            return min_area\n        \n        \n        def find_min_area_with_col_cuts(grid):\n            n = len(grid[0])\n            min_area = float('inf')\n\n            # Iterate over possible cuts\n            for x in range(1, n - 1):\n                for y in range(x + 1, n):\n                    area1 = min_area_cover(grid, 0, 0, len(grid) - 1, x - 1)\n                    area2 = min_area_cover(grid, 0, x, len(grid) - 1, y - 1)\n                    area3 = min_area_cover(grid, 0, y, len(grid) - 1, n - 1)\n                    # if (area1 == 0 or area 2 == 0 or area3 == 0):\n                    #     continue\n                    total_area = area1 + area2 + area3\n                    min_area = min(min_area, total_area)\n\n            return min_area\n        def find_min_area_with_one_cut_each(grid):\n            m, n = len(grid), len(grid[0])\n            min_total_area = float('inf')\n\n            # Iterate over possible cuts\n            for x in range(1, m):\n                for y in range(1, n):\n                    area_a = min_area_cover(grid, 0, 0, x - 1, y - 1)\n                    area_b = min_area_cover(grid, 0, y, x - 1, n - 1)\n                    area_c = min_area_cover(grid, x, 0, m - 1, y - 1)\n                    area_d = min_area_cover(grid, x, y, m - 1, n - 1)\n\n                    # Calculate areas for each configuration\n                    config1 = area_a + area_b + min_area_cover(grid, x, 0, m - 1, n - 1)  # (A+B), C, D\n                    config2 = area_b + area_d + min_area_cover(grid, 0, 0, m - 1, y - 1)  # (B+D), A, C\n                    config3 = area_a + area_c + min_area_cover(grid, 0, y, m - 1, n - 1)  # (A+C), B, D\n                    config4 = area_c + area_d + min_area_cover(grid, 0, 0, x - 1, n - 1)  # (C+D), A, B\n\n                    # Find minimum area for current cut positions\n                    min_area = min(config1, config2, config3, config4)\n                    min_total_area = min(min_total_area, min_area)\n\n            return min_total_area\n\n        def partition_and_calculate_area(grid, partition_type):\n            m, n = len(grid), len(grid[0])\n            min_area = m * n \n\n            if partition_type == 1:  # 2 cuts in the row\n                total_area = find_min_area_with_row_cuts(grid)\n                min_area = min(min_area, total_area)\n\n            elif partition_type == 2:  # 2 cuts in the col\n                total_area = find_min_area_with_col_cuts(grid)\n                min_area = min(min_area, total_area)\n\n            elif partition_type == 3:  # 1 cut in the row and 1 cut in the col \n                total_area = find_min_area_with_one_cut_each(grid)\n                min_area = min(min_area, total_area)\n            \n\n            return min_area\n\n\n        min_area = float('inf')\n        for type_cut in range(1, 5):\n            min_area = min(min_area, partition_and_calculate_area(grid, type_cut))\n        return min_area\n",
    "submit_ts": 1719113976.0
}