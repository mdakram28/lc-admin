{
    "username": "WORTH_IT",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n        int n = grid.length, m = grid[0].length;\n\n        TetraFunction<Integer, Integer, Integer, Integer, Integer> minArea = new TetraFunction<Integer, Integer, Integer, Integer, Integer>() {\n            @Override\n            public Integer apply(Integer x, Integer y, Integer X, Integer Y) {\n                int i = n, I = 0, j = m, J = 0;\n                for (int r = x; r <= X; r++) {\n                    for (int c = y; c <= Y; c++) {\n                        if (grid[r][c] == 1) {\n                            i = Math.min(i, r);\n                            j = Math.min(j, c);\n                            I = Math.max(I, r);\n                            J = Math.max(J, c);\n                        }\n                    }\n                }\n\n                if (i == n)\n                    return 1;\n                return (I - i + 1) * (J - j + 1);\n            }\n        };\n\n        int ans = Integer.MAX_VALUE;\n\n        // Left\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < m - 1; j++) {\n                int a1 = minArea.apply(0, 0, i, j);\n                int a2 = minArea.apply(0, j + 1, n - 1, m - 1);\n                int a3 = minArea.apply(i + 1, 0, n - 1, j);\n\n                ans = Math.min(ans, a1 + a2 + a3);\n            }\n        }\n\n        // Right\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < m - 1; j++) {\n                int a1 = minArea.apply(0, 0, n - 1, j);\n                int a2 = minArea.apply(0, j + 1, i, m - 1);\n                int a3 = minArea.apply(i + 1, j + 1, n - 1, m - 1);\n\n                ans = Math.min(ans, a1 + a2 + a3);\n            }\n        }\n\n        // Up\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < m - 1; j++) {\n                int a1 = minArea.apply(0, 0, i, j);\n                int a2 = minArea.apply(0, j + 1, i, m - 1);\n                int a3 = minArea.apply(i + 1, 0, n - 1, m - 1);\n\n                ans = Math.min(ans, a1 + a2 + a3);\n            }\n        }\n\n        // Down\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 0; j < m - 1; j++) {\n                int a1 = minArea.apply(0, 0, i, m - 1);\n                int a2 = minArea.apply(i + 1, 0, n - 1, j);\n                int a3 = minArea.apply(i + 1, j + 1, n - 1, m - 1);\n\n                ans = Math.min(ans, a1 + a2 + a3);\n            }\n        }\n\n        // Hor\n        for (int i = 0; i < n; i++) {\n            for (int I = i + 1; I < n - 1; I++) {\n                int a1 = minArea.apply(0, 0, i, m - 1);\n                int a2 = minArea.apply(i + 1, 0, I, m - 1);\n                int a3 = minArea.apply(I + 1, 0, n - 1, m - 1);\n\n                ans = Math.min(ans, a1 + a2 + a3);\n            }\n        }\n\n        // Ver\n        for (int j = 0; j < m; j++) {\n            for (int J = 0; J < m - 1; J++) {\n                int a1 = minArea.apply(0, 0, n - 1, j);\n                int a2 = minArea.apply(0, j + 1, n - 1, J);\n                int a3 = minArea.apply(0, J + 1, n - 1, m - 1);\n\n                ans = Math.min(ans, a1 + a2 + a3);\n            }\n        }\n\n        return ans;\n    }\n}\n\n@FunctionalInterface\ninterface TriFunction<One, Two, Three, Return> {\n    public Return apply(One one, Two two, Three three);\n}\n\n@FunctionalInterface\ninterface TetraFunction<One, Two, Three, Four, Return> {\n    public Return apply(One one, Two two, Three three, Four four);\n}\n\n@FunctionalInterface\ninterface PentaFunction<One, Two, Three, Four, Five, Return> {\n    public Return apply(One one, Two two, Three three, Four four, Five five);\n}",
    "submit_ts": 1719112278.0
}