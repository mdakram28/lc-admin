{
    "username": "yaoyi92",
    "submission": "class Solution {\n    int farthest;\n    // partly from https://www.geeksforgeeks.org/diameter-tree-using-dfs/\n    // Sets maxCount as maximum distance from node.\n    void dfsUtil(int node, int count, bool visited[],\n                       int& maxCount, vector<vector<int>>& adj)\n    {\n        visited[node] = true;\n        count++;\n        for (auto i: adj[node]) {\n            if (!visited[i]) {\n                if (count >= maxCount) {\n                    maxCount = count;\n                    farthest = i;\n                }\n                dfsUtil(i, count, visited, maxCount, adj);\n            }\n        }\n    }\n     \n    // The function to do DFS traversal. It uses recursive\n    // dfsUtil()\n    void dfs(int node, int n, vector<vector<int>>& adj, int& maxCount)\n    {\n        bool visited[n];\n        int count = 0;\n     \n        // Mark all the vertices as not visited\n        for (int i = 0; i < n; ++i)\n            visited[i] = false;\n     \n        // Increment count by 1 for visited node\n        dfsUtil(node, count + 1, visited, maxCount, adj);\n    }\n\n    int diameter(vector<vector<int>>& adj, int n) {\n        int ret = INT_MIN/2;\n        dfs(0, n, adj, ret);\n        dfs(farthest, n, adj, ret);\n        return max(ret, 0);\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> adj1(n);\n        for (vector<int>& edge: edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        vector<vector<int>> adj2(m);\n        for (vector<int>& edge: edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        //cout << diameter(adj1, n) << \" \" << diameter(adj2, m) << endl;\n        int d1 = diameter(adj1, n) -1 ;\n        int d2 = diameter(adj2, m) -1 ;\n        int d3 = d1/2 + (d1%2==1) + d2/2 + (d2%2==1) + 1;\n        return max(max(d1, d2),d3);\n        \n    }\n};",
    "submit_ts": 1719717188.0
}