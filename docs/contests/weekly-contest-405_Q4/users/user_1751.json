{
    "username": "Jackyen",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.costs = []\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.costs.append(cost)\n\n    def search(self, s, start):\n        node = self.root\n        results = []\n        for i in range(start, len(s)):\n            if s[i] not in node.children:\n                break  \n            node = node.children[s[i]]\n            for cost in node.costs:\n                results.append((i + 1, cost))\n        return results\n\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        word_cost_map = defaultdict(lambda: float('inf'))\n        for word, cost in zip(words, costs):\n            word_cost_map[word] = min(word_cost_map[word], cost)\n\n        trie = Trie()\n        for word, cost in word_cost_map.items():\n            trie.insert(word, cost)\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            matches = trie.search(target, i)\n            for end, cost in matches:\n                if end <= n:\n                    dp[end] = min(dp[end], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n\n",
    "submit_ts": "1720324409",
    "subm_id": "1312398799"
}