{
    "username": "AhmedYahia74",
    "submission": "class Solution {\npublic:\n    vector<multiset<int>>v;\n    vector<int>parent,adj[(int)1e5+1];\n    vector<int>ans;\n    int dfs(int i,int p) {\n\n        parent[i]=p;\n        int curr = 0;\n        for (int j: adj[i]) {\n            if (j == p)continue;\n            int now = dfs(j, i);\n            v[i].insert(now);\n            curr = max(curr, now);\n        }\n        curr += (i % 2 == 0) + 1;\n        return curr;\n    }\n    void dfs2(int i,int p){\n        int mx=0,mx1=0;\n        if(v[i].size()) {\n            mx = *v[i].rbegin();\n            mx1=mx;\n        }\n        cout<<mx<<' ';\n        if(~parent[i] && v[parent[i]].size()>1){\n            v[parent[i]].erase(v[parent[i]].find(mx+((i % 2 == 0) + 1)));\n            int temp=*v[parent[i]].rbegin()+((parent[i]%2==0)+1);\n            v[parent[i]].insert(mx+((i % 2 == 0) + 1));\n            v[i].insert(temp);\n            mx= max(mx,temp);\n        }\n        else if(~parent[i]){\n            v[i].insert((parent[i]%2==0)+1);\n            mx= max(mx,(parent[i]%2==0)+1);\n        }\n        \n        ans[i]=mx;\n        for (int j: adj[i]) {\n            if (j == p)continue;\n            dfs2(j,i);\n        }\n\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        v.resize(edges.size() + 1);\n        parent.resize(edges.size() + 1);\n        for (int i = 0; i < edges.size(); ++i) {\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n        }\n        dfs(0, -1);\n        ans.resize(edges.size()+1);\n        dfs2(0,-1);\n        return ans;\n    }\n};",
    "submit_ts": "1722700162",
    "subm_id": "1343233501"
}