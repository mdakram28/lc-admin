{
    "username": "_otto",
    "submission": "import numpy as np\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        grid = np.array(grid)\n        #@cache\n        def get(L, R, UP, DOWN, grid) -> int:\n            cnt = 0\n            l = inf\n            r = 0\n            up = inf\n            down = 0\n            ok = False\n            for i in range(UP, DOWN + 1):\n                for j in range(L, R + 1):\n                    if grid[i][j] == 1:\n                        l = min(l, j)\n                        r = max(r, j)\n                        up = min(up, i)\n                        down = max(down, i)\n                        ok = True\n            return (down - up + 1) * (r - l + 1) if ok else inf\n        \n        ans = inf\n        for _ in range(4):\n            M, N = grid.shape\n            #grid = grid.tolist()\n            for i in range(M - 2):\n                first = get(0, N - 1, 0, i, grid)\n                for j in range(i + 1, M - 1):\n                    tmp = first + get(0, N - 1, i + 1, j, grid) + get(0, N - 1, j + 1, M - 1, grid)\n                    ans = min(ans, tmp)\n            for i in range(M - 1):\n                first = get(0, N - 1, 0, i, grid)\n                for j in range(N - 1):\n                    tmp = first + get(0, j, i + 1, M - 1, grid) + get(j + 1, N - 1, i + 1, M -1, grid)\n                    ans = min(ans, tmp)\n            #grid = np.array(grid)\n            grid = np.rot90(grid)\n        return ans",
    "submit_ts": 1719113288.0
}