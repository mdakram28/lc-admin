{
    "username": "_dystopian",
    "submission": "class Segment_tree_{\npublic:\n    vector<int> seg;\n    int s;\n    Segment_tree_(vector<int>& arr)\n    {\n        s = arr.size();\n        seg.resize(4*s);\n        construct(arr, 0, 0, s - 1);\n    }\n    int lengthOfLonestSubstring(string s) {\n        map<char,int> mp;\n        // Array int[26]\n        int st =0;\n        int len = 0;\n        for(int i=0;i<s.size();i++){\n            if(mp.find(s[i]) != mp.end()){\n                st = mp[s[i]] +1;\n                mp[s[i]] = i;\n            }\n            else{  \n            len = max(len,i-st+1);\n            mp[s[i]] = i;\n            }\n        }\n        return len;\n    }\n    void construct(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            seg[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            construct(arr, 2 * node + 1, start, mid);\n            construct(arr, 2 * node + 2, mid + 1, end);\n\n            seg[node]\n                = seg[2 * node + 1] & seg[2 * node + 2];\n        }\n    }\nint lengthOfLongesSubstring(string s) {\n        map<char,int> mp;\n        // Array int[26]\n        int st =0;\n        int len = 0;\n        for(int i=0;i<s.size();i++){\n            if(mp.find(s[i]) != mp.end()){\n                st = mp[s[i]] +1;\n                mp[s[i]] = i;\n            }\n            else{  \n            len = max(len,i-st+1);\n            mp[s[i]] = i;\n            }\n        }\n        return len;\n    }\n    int find(int l, int r)\n    {\n        return find(0, 0, s - 1, l, r);\n    }\n\n    int find(int curr, int s, int e, int l, int r)\n    {\n        if (r < s || e < l) {\n            return INT_MAX;\n        }\n        if (l <= s && e <= r) {\n            return seg[curr];\n        }\n        int mid = (s + e) / 2;\n        int p1 = find(2 * curr + 1, s, mid, l, r);\n        int p2 = find(2 * curr + 2, mid + 1, e, l, r);\n\n        return p1 & p2;\n    }\n    int lenghOfLongestSubstring(string s) {\n        map<char,int> mp;\n        // Array int[26]\n        int st =0;\n        int len = 0;\n        for(int i=0;i<s.size();i++){\n            if(mp.find(s[i]) != mp.end()){\n                st = mp[s[i]] +1;\n                mp[s[i]] = i;\n            }\n            else{  \n            len = max(len,i-st+1);\n            mp[s[i]] = i;\n            }\n        }\n        return len;\n    }\n};\n\nclass Solution {\npublic:\n \n    int minimumDifference(vector<int>& arr, int k) {\n         int n = arr.size();\n    Segment_tree_ st(arr);\n    int ans = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        int lt = i - 1, rt = n - 1, m;\n\n        while (rt - lt > 1) {\n            m = (lt + rt) / 2;\n            if (st.find(i, m) >= k)\n                lt = m;\n            else\n                rt = m;\n        }\n        if (lt != i - 1)\n            ans = min(ans, abs(st.find(i, lt) - k));\n        ans = min(ans, abs(k - st.find(i, rt)));\n    }\n    return ans;\n    }\n};",
    "submit_ts": "1717300029",
    "subm_id": "1274831649"
}