{
    "username": "theamantaneja",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> indices; // {word_index, cost}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int word_index, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->indices.push_back({word_index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            trie->insert(words[i], i, costs[i]);\n        }\n        \n        for (int i = 0; i <= n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie->root;\n            for (int j = i; j < n; ++j) {\n                if (node == nullptr) break;\n                char ch = target[j];\n                if (node->children.find(ch) != node->children.end()) {\n                    node = node->children[ch];\n                    for (auto& index_cost_pair : node->indices) {\n                        int word_index = index_cost_pair.first;\n                        int cost = index_cost_pair.second;\n                        int word_len = words[word_index].length();\n                        if (i + word_len <= n) {\n                            dp[i + word_len] = min(dp[i + word_len], dp[i] + cost);\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320683",
    "subm_id": "1312301632"
}