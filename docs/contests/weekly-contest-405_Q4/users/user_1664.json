{
    "username": "SanskritiGupta-03",
    "submission": "from typing import List, Dict\nfrom collections import defaultdict\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Preprocess words and their minimum costs into a dictionary\n        word_cost_dict = {}\n        for i, word in enumerate(words):\n            if word not in word_cost_dict:\n                word_cost_dict[word] = costs[i]\n            else:\n                word_cost_dict[word] = min(word_cost_dict[word], costs[i])\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            # Only check for words that can match the remaining substring\n            for word, cost in word_cost_dict.items():\n                len_word = len(word)\n                if i + len_word <= n and target[i:i+len_word] == word:\n                    dp[i + len_word] = min(dp[i + len_word], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n\n",
    "submit_ts": "1720321730",
    "subm_id": "1312330739"
}