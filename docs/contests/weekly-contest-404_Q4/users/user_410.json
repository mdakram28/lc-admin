{
    "username": "anshulagarwal3131",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adj,adj2;\n    vector<int> dist;\n    int diameter = 0,leaf = 0,maxi = 0;\n    void findLeaf(int nod,int par,int dist){\n        for(auto i : adj[nod]){\n            if(i!=par){\n                if(dist+1>maxi){\n                    leaf = i;\n                    maxi = dist+1;\n                }\n                findLeaf(i,nod,dist+1);\n            }\n        }\n    }\n    void dfs(int nod,int par = -1){\n        for(auto i : adj[nod]){\n            if(i!=par){\n                dist[i] = dist[nod]+1;\n                diameter = max(diameter,dist[i]);\n                dfs(i,nod);\n            }\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1,m = edges2.size()+1;\n        adj.resize(n);\n        adj2.resize(m);\n        dist.resize(n);\n        for(auto i : edges1){\n            adj[i[0]].push_back(i[1]);\n            adj[i[1]].push_back(i[0]);\n        }\n        for(auto i : edges2){\n            adj2[i[1]].push_back(i[0]);\n            adj2[i[0]].push_back(i[1]);\n        }\n        int d1 = 0;\n        if(edges1.size()){\n        findLeaf(0,-1,0);\n        dfs(leaf);\n        d1 = diameter;\n       \n        }\n         adj.clear();\n        adj = adj2;\n        maxi  = 0;\n        diameter = 0;\n        dist.resize(m);\n        int d2 = 0;\n        if(edges2.size()){\n        for(int j = 0;j<m;j++)\n            dist[j]= 0;\n        findLeaf(0,-1,0);\n        dfs(leaf);\n        d2 = diameter;\n        }\n        if(edges1.empty() || edges2.empty())\n            return (d1+1)/2+(d2+1)/2+1;\n        return max((d1+1)/2+max(d1/2,(d2+1)/2+1),(d2+1)/2+max(d2/2,(d1+1)/2+1));\n    }\n};",
    "submit_ts": "1719718541",
    "subm_id": "1304419825"
}