{
    "username": "aviralagrawal",
    "submission": "class Solution {\npublic:\n    \n    struct Node {\n        Node* links[26];\n        bool flag = false;\n        int cost = INT_MAX;\n        bool containsKey(char ch) {\n            return links[ch - 'a'];\n        }\n        \n        void put(char ch, Node* node) {\n            links[ch - 'a'] = node;\n        }\n        \n        Node* get(char ch) {\n            return links[ch - 'a'];\n        }\n        \n        void setEnd() {\n            flag = true;\n        }\n        \n        bool isEnd() {\n            return flag;\n        }\n        \n        void setCost(int cost) {\n            this->cost = min(this->cost, cost);\n        }\n        \n        int getCost() {\n            return cost;\n        }\n    };\n    Node* root = new Node();\n    void insertIntoTrie(string &word, Node* root, int cost) {\n        Node* node = root;\n        for(int i=0;i<word.size();i++) {\n            if(!node->containsKey(word[i])) {\n                node->put(word[i], new Node());\n            }\n            node = node->get(word[i]);\n        }\n        node->setEnd();\n        node->setCost(cost);\n    } \n    \n    \n    int helper(int ind, Node* node, string &target, vector<int> &dp) {\n        if(ind == target.size()) {\n            if(node->isEnd()) {\n                return node->getCost();\n            }\n            else {\n                return 1e9;\n            }\n        }\n        \n        if(dp[ind] != -1 && node == root) {\n            return dp[ind];\n        }\n        \n        int pick = 1e9;\n        if(node->isEnd()) {\n            pick = node->getCost() + helper(ind, root, target, dp);\n        }\n        int not_pick = 1e9;\n        if(node->containsKey(target[ind])) {\n            not_pick = 0 + helper(ind+1, node->get(target[ind]), target, dp);\n        }\n        \n        if(node == root) {\n            return dp[ind] = min(pick, not_pick);\n        }\n        else {\n            return min(pick, not_pick);\n        } \n    }\n    \n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        vector<int> dp(target.size(), -1);\n        for(int i=0;i<words.size();i++) {\n            insertIntoTrie(words[i], root, costs[i]);\n        }\n        int ans = helper(0, root, target, dp);\n        return ans >= 1e9 ? -1 : ans;\n    }\n};",
    "submit_ts": "1720323152",
    "subm_id": "1312368608"
}