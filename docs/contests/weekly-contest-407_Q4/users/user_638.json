{
    "username": "Arucade",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] t) {\n        long res = 0l;\n        Stack<Integer> stack = new Stack<>();        \n        for (int i = 0, n = nums.length; i < n; i++) {\n            int d = nums[i] - t[i];\n            if (d == 0) {\n                stack.clear();\n            } else if (d > 0) {\n                if (!stack.isEmpty() && stack.peek() < 0) {\n                    stack.clear();\n                    res += (long)d;\n                } else {\n                    if (!stack.isEmpty() && stack.peek() >= d) {\n                        while (!stack.isEmpty() && stack.peek() >= d) stack.pop();\n                    } else {\n                        res += (long)(d - (stack.isEmpty() ? 0 : stack.peek()));\n                    }\n                }\n                stack.push(d);\n            } else {\n                if (!stack.isEmpty() && stack.peek() > 0) {\n                    stack.clear();\n                    res += (long)(-d);\n                } else {\n                    if (!stack.isEmpty() && stack.peek() <= d) {\n                        while (!stack.isEmpty() && stack.peek() <= d) stack.pop();\n                    } else {\n                        res += (long)((stack.isEmpty() ? 0 : stack.peek()) - d);\n                    }\n                }\n                stack.push(d);\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721531590",
    "subm_id": "1327964861"
}