{
    "username": "abhishekrajput_22",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the cut costs in descending order\n        Integer[] horizontalCutDesc = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] verticalCutDesc = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        Arrays.sort(horizontalCutDesc, Collections.reverseOrder());\n        Arrays.sort(verticalCutDesc, Collections.reverseOrder());\n        \n        int hIndex = 0, vIndex = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long totalCost = 0;\n\n        // Greedily choose the most expensive cut from both horizontal and vertical cuts\n        while (hIndex < horizontalCutDesc.length && vIndex < verticalCutDesc.length) {\n            if (horizontalCutDesc[hIndex] >= verticalCutDesc[vIndex]) {\n                totalCost += (long) horizontalCutDesc[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                totalCost += (long) verticalCutDesc[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n\n        // Add the remaining horizontal cuts\n        while (hIndex < horizontalCutDesc.length) {\n            totalCost += (long) horizontalCutDesc[hIndex] * verticalPieces;\n            hIndex++;\n        }\n\n        // Add the remaining vertical cuts\n        while (vIndex < verticalCutDesc.length) {\n            totalCost += (long) verticalCutDesc[vIndex] * horizontalPieces;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926312",
    "subm_id": "1320282457"
}