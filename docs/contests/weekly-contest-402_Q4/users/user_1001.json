{
    "username": "Deepu09",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        class SegmentTree:\n            def __init__(self, nums):\n                self.n = len(nums)\n                self.nums = nums\n                self.tree = [0] * (4 * self.n)\n                self.build(0, 0, self.n - 1)\n\n            def build(self, node, start, end):\n                if start == end:\n                    self.tree[node] = self.is_peak(start)\n                else:\n                    mid = (start + end) // 2\n                    left_child = 2 * node + 1\n                    right_child = 2 * node + 2\n                    self.build(left_child, start, mid)\n                    self.build(right_child, mid + 1, end)\n                    self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n            def is_peak(self, idx):\n                if idx == 0 or idx == self.n - 1:\n                    return 0\n                if self.nums[idx] > self.nums[idx - 1] and self.nums[idx] > self.nums[idx + 1]:\n                    return 1\n                return 0\n\n            def update(self, idx, value, node, start, end):\n                if start == end:\n                    self.nums[idx] = value\n                    self.tree[node] = self.is_peak(idx)\n                else:\n                    mid = (start + end) // 2\n                    left_child = 2 * node + 1\n                    right_child = 2 * node + 2\n                    if start <= idx <= mid:\n                        self.update(idx, value, left_child, start, mid)\n                    else:\n                        self.update(idx, value, right_child, mid + 1, end)\n                    self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n            def query(self, L, R, node, start, end):\n                if R < start or end < L:\n                    return 0\n                if L <= start and end <= R:\n                    return self.tree[node]\n                mid = (start + end) // 2\n                left_child = 2 * node + 1\n                right_child = 2 * node + 2\n                left_sum = self.query(L, R, left_child, start, mid)\n                right_sum = self.query(L, R, right_child, mid + 1, end)\n                return left_sum + right_sum\n\n            def update_point(self, idx, value):\n                self.update(idx, value, 0, 0, self.n - 1)\n                if idx+1<self.n:\n                    self.update(idx+1, nums[idx+1], 0, 0, self.n - 1)\n                if idx>=1:\n                    self.update(idx-1, nums[idx-1], 0, 0, self.n - 1)\n\n                if idx > 0:\n                    self.update(idx - 1, self.nums[idx - 1], 0, 0, self.n - 1)\n                if idx < self.n - 1:\n                    self.update(idx + 1, self.nums[idx + 1], 0, 0, self.n - 1)\n\n            def range_query(self, L, R):\n                return self.query(L, R, 0, 0, self.n - 1)\n\n    \n        segment_tree = SegmentTree(nums)\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                results.append(segment_tree.range_query(li+1, ri-1))\n            elif query[0] == 2:\n                index, value = query[1], query[2]\n                segment_tree.update_point(index, value)\n\n        return (results)  # Outputs the results of the count peaks queries\n \n                ",
    "submit_ts": "1718508676",
    "subm_id": "1289688088"
}