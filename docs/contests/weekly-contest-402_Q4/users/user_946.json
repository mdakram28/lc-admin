{
    "username": "sohamslc5",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        data = nums;\n        peaks.resize(4 * n, 0);\n        build(0, 0, n - 1);\n    }\n\n    void update(int idx, int value) {\n        // Update the value and potentially update neighbors\n        updateUtil(0, 0, n - 1, idx, value);\n        if (idx > 0) {\n            updateUtil(0, 0, n - 1, idx - 1, data[idx - 1]);\n        }\n        if (idx < n - 1) {\n            updateUtil(0, 0, n - 1, idx + 1, data[idx + 1]);\n        }\n    }\n\n    int query(int l, int r) {\n        return max(0, queryUtil(0, 0, n - 1, l, r) - isPeak(l) - isPeak(r));\n    }\n\nprivate:\n    vector<int> data;\n    vector<int> peaks;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            peaks[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            peaks[node] = peaks[2 * node + 1] + peaks[2 * node + 2];\n        }\n    }\n\n    void updateUtil(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            data[idx] = value;\n            peaks[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateUtil(2 * node + 1, start, mid, idx, value);\n            } else {\n                updateUtil(2 * node + 2, mid + 1, end, idx, value);\n            }\n            peaks[node] = peaks[2 * node + 1] + peaks[2 * node + 2];\n        }\n    }\n\n    int queryUtil(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return peaks[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = queryUtil(2 * node + 1, start, mid, l, r);\n        int rightQuery = queryUtil(2 * node + 2, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\n    bool isPeak(int idx) {\n        if (idx <= 0 || idx >= n - 1) return false;\n        bool leftGreater = (data[idx] > data[idx - 1]);\n        bool rightGreater = (data[idx] > data[idx + 1]);\n        return leftGreater && rightGreater;\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector <int> ans;\n        for(vector <int> query : queries) {\n            int x = query[0];\n            if(x == 1) {\n                ans.push_back(segTree.query(query[1], query[2]));\n            }\n            else {\n                segTree.update(query[1], query[2]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508555.0
}