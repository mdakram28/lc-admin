{
    "username": "user3251q",
    "submission": "class Solution {  \n    public function minChanges(array $nums, int $k): int {  \n        $m = [];  \n        $v = [];  \n        $n = count($nums);  \n        $halfSize = $n / 2;  \n\n        // Calculate differences and populate map and vector  \n        for ($i = 0; $i < $halfSize; $i++) {  \n            $a = $nums[$i];  \n            $b = $nums[$n - $i - 1];  \n            $diff = abs($a - $b);  \n            $X = max($a, $b, $k - $a, $k - $b);  \n\n            // Store the difference in the map  \n            if (!isset($m[$diff])) {  \n                $m[$diff] = [];  \n            }  \n            $m[$diff][] = $X;  \n            $v[] = $X;  \n        }  \n\n        $ans = $n;  // Initialize answer to the length of nums  \n        sort($v);   // Sort the vector  \n\n        // Iterate over the map  \n        foreach ($m as $diff => $values) {  \n            $T = $this->lowerBound($v, $diff) * 2 + ($halfSize - $this->lowerBound($v, $diff));  \n            foreach ($values as $X) {  \n                if ($X < $diff) {  \n                    $T -= 2;  \n                } else {  \n                    $T -= 1;  \n                }  \n            }  \n            $ans = min($ans, $T);  \n        }  \n\n        return $ans;  \n    }  \n\n    // Function to perform a binary search to find lower bound  \n    private function lowerBound(array $v, int $target): int {  \n        $low = 0;  \n        $high = count($v);  \n        \n        while ($low < $high) {  \n            $mid = intdiv($low + $high, 2);  \n            if ($v[$mid] < $target) {  \n                $low = $mid + 1;  \n            } else {  \n                $high = $mid;  \n            }  \n        }  \n        \n        return $low;  \n    }  \n}  \n\n// Example usage  \n$solution = new Solution();  \n$nums = [1, 0, 1, 2, 4, 3];  \n$k = 4;  \n$output = $solution->minChanges($nums, $k);  \necho $output;  // Expected Output: 2",
    "submit_ts": "1721488923",
    "subm_id": "1327437353"
}