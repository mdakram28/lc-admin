{
    "username": "ycq-7",
    "submission": "class Solution:\n    def maxPoints(self, points):\n        max_plus = max_minus = max_diff_plus = max_diff_minus = float('-inf')\n        min_plus = min_minus = min_diff_plus = min_diff_minus = float('inf')\n        max_plus_point = max_minus_point = max_diff_plus_point = max_diff_minus_point = None\n        min_plus_point = min_minus_point = min_diff_plus_point = min_diff_minus_point = None\n\n        for point in points:\n            x, y = point\n            if x + y > max_plus:\n                max_plus = x + y\n                max_plus_point = point\n            if x + y < min_plus:\n                min_plus = x + y\n                min_plus_point = point\n            if x - y > max_minus:\n                max_minus = x - y\n                max_minus_point = point\n            if x - y < min_minus:\n                min_minus = x - y\n                min_minus_point = point\n            if -x + y > max_diff_plus:\n                max_diff_plus = -x + y\n                max_diff_plus_point = point\n            if -x + y < min_diff_plus:\n                min_diff_plus = -x + y\n                min_diff_plus_point = point\n            if -x - y > max_diff_minus:\n                max_diff_minus = -x - y\n                max_diff_minus_point = point\n            if -x - y < min_diff_minus:\n                min_diff_minus = -x - y\n                min_diff_minus_point = point\n\n        distances = {\n            (max_plus - min_plus): (max_plus_point, min_plus_point),\n            (max_minus - min_minus): (max_minus_point, min_minus_point),\n            (max_diff_plus - min_diff_plus): (max_diff_plus_point, min_diff_plus_point),\n            (max_diff_minus - min_diff_minus): (max_diff_minus_point, min_diff_minus_point)\n        }\n\n        max_distance = max(distances.keys())\n        return distances[max_distance], max_distance\n\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        p2, maxdis = self.maxPoints(points)\n        n = len(points)\n        remove1 = []\n        i = 0\n        while i < n:\n            if points[i] == p2[0]:\n                break\n            remove1.append(points[i])\n            i += 1\n        remove1.extend(points[i + 1:])\n        remove2 = []\n        i = 0\n        while i < n:\n            if points[i] == p2[1]:\n                break\n            remove2.append(points[i])\n            i += 1\n        remove2.extend(points[i + 1:])\n        _, m1 = self.maxPoints(remove1)\n        _, m2 = self.maxPoints(remove2)\n        ans = min(m1, m2, maxdis)\n        if ans == float('-inf'):\n            return 0\n        return ans"
}