{
    "username": "eshujisingh",
    "submission": "class Solution {\npublic:\n    #define N 100001 \n\n    vector<int> adj[N];\n    int height[N];\n    int dis[N];\n    \n    void dfs2(int src, int par)\n    {\n        int max1 = 0;\n        int max2 = 0;\n        for (auto u : adj[src]) {\n            if (u != par) {\n                if (height[u] >= max1) {\n                    max2 = max1;\n                    max1 = height[u];\n                }\n                else if (height[u] > max2) {\n                    max2 = height[u];\n                }\n            }\n        }\n        \n    \n        int sum = 0;\n    \n        for (auto u : adj[src]) {\n            if (u != par) {\n                sum = ((max1 == height[u]) ? max2 : max1);\n\n                if (max1 == height[u]) dis[u]= 1 + max(1 + max2, dis[src]);\n                else dis[u]= 1 + max(1 + max1, dis[src]);\n\n                dfs2(u, src);\n            }\n        }\n    }\n\n\n    void dfs1(int src, int par)\n    {\n        for (auto u : adj[src]) {\n            if (u != par) {\n                dfs1(u, src);\n                height[src]\n                    = max(height[src], height[u]);\n            }\n        }\n        height[src] += 1;\n    }\n\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size() + 1;\n        int m = edges2.size() + 1 ; \n\n        for(int i=0;i<N; i++) {\n            adj[i].clear() ; \n        }\n\n        for(int i=0; i<n-1; i++) {\n            int u = edges1[i][0], v=edges1[i][1] ; \n            adj[v].push_back(u);\n            adj[u].push_back(v); \n        }\n\n        memset(dis, 0 , sizeof(dis));\n\n        memset(height, 0, sizeof(height));\n\n\n        dfs1(0,-1);\n        dfs2(0,-1);\n\n\n        int mx = 0 ;\n        int mn = INT_MAX; \n        for (int i = 0; i < n; i++){\n             int val=  max(dis[i], height[i]) - 1 ;\n             mx= max(mx, val) ; \n             mn = min(mn, val ) ; \n        }\n\n        for(int i=0; i<N; i++) {\n        adj[i].clear() ; \n        }\n        for(int i=0; i<m-1; i++) {\n        int u = edges2[i][0], v=edges2[i][1] ; \n        adj[v].push_back(u);\n        adj[u].push_back(v) ; \n        }\n        memset(height, 0, sizeof(height)) ; \n        memset(dis, 0 , sizeof(dis)) ; \n\n\n        dfs1(0, -1);\n        dfs2(0, -1);\n\n\n        int mmx = 0 , mmn = INT_MAX; \n        for (int i = 0; i < m; i++){\n             int val=  max(dis[i], height[i]) - 1;\n             mmx = max(mmx, val) ; \n             mmn = min(mmn, val ) ; \n        }\n\n        return max(max(mx,mmx),mn+mmn+1) ; \n    }\n\n};",
    "submit_ts": 1719719980.0
}