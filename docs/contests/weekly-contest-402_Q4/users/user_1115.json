{
    "username": "shaili17",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> res = new ArrayList<>();\n        int[] peak = new int[nums.length];\n        BitSum bit = new BitSum(nums.length + 1);\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) peak[i] = 1;\n            bit.update(i + 1, peak[i]);\n        }\n\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                int query = bit.query(q[2] + 1) - bit.query(q[1]);\n                query -= peak[q[1]];\n                if (q[1] != q[2]) query -= peak[q[2]];\n                res.add(query);\n            } else {\n                //\n\n                int i = q[1], val = q[2];\n                if (nums[i] == val) continue;\n                if (i > 0 && peak[i - 1] == 1 && nums[i - 1] <= val) {\n                    peak[i - 1] = 0;\n                    bit.update(i, -1);\n                }\n                if (i > 0 && i < nums.length - 1 && peak[i] == 1 && (val <= nums[i - 1] || val <= nums[i + 1]) && peak[i] == 1) {\n                    peak[i] = 0;\n                    bit.update(i + 1, -1);\n                }\n\n                if (i < nums.length - 1 && peak[i + 1] == 1 && nums[i + 1] <= val) {\n                    peak[i + 1] = 0;\n                    bit.update(i + 2, -1);\n                }\n                nums[i] = val;\n                if (i > 0 && i < nums.length - 1 && val > nums[i - 1] && val > nums[i + 1] && peak[i] == 0) {\n                    peak[i] = 1;\n                    bit.update(i + 1, 1);\n                }\n                if (i - 1 > 0 && i - 1 < nums.length - 1 && nums[i - 1] > nums[i - 2] && nums[i - 1] > nums[i] && peak[i - 1] == 0) {\n                    peak[i - 1] = 1;\n                    bit.update(i, 1);\n                }\n                if (i + 1 > 0 && i + 1 < nums.length - 1 && nums[i + 1] > nums[i] && nums[i + 1] > nums[i + 2] && peak[i + 1] == 0) {\n                    peak[i + 1] = 1;\n                    bit.update(i + 2, 1);\n                }\n            }\n        }\n        return res;\n    }\n\n    class BitSum {\n        private int[] tree;\n\n        public BitSum(int n) {\n            tree = new int[n];\n        }\n        public void update(int i, int val) {\n            // \u628ai\u5f80\u4e0a\u7684\u6240\u6709\u7236\u533a\u95f4\u90fd\u8d4b\u503c\n            // x + lowbit(x) = parent(x)\n            while (i < tree.length) {\n                tree[i] += val; // \u524d\u7f00\u548c\u6539\u4e3a\u52a0\u53f7\u5373\u53ef\n                i += lowbit(i); // calculate lowbit of index i\n            }\n        }\n\n        public int query(int i) {\n            int res = 0;\n            while (i > 0) {\n                res += tree[i];\n                // \u6bcf\u6b21\u628ai\u66f4\u65b0\u6210\u6bd4i\u5c0f\u7684\u4e0b\u4e00\u4e2ainverval\n                i -= lowbit(i);\n            }\n            return res;\n        }\n\n        public int lowbit(int i) {\n            return i & -i;\n        }\n    }\n}",
    "submit_ts": 1718507782.0
}