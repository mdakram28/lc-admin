{
    "username": "stupidRR",
    "submission": "class Solution {\n    struct DSU {\n    std::vector<int> f, siz;\n    DSU(int n) : f(n), siz(n, 1)\n    { \n        std::iota(f.begin(), f.end(), 0); \n    }\n    int leader(int x) {\n        while (x != f[x]) x = f[x] = f[f[x]];\n        return x;\n    }\n    bool same(int x, int y) { return leader(x) == leader(y); }\n    bool merge(int x, int y) {\n        x = leader(x);\n        y = leader(y);\n        if (x == y) return false;\n        siz[x] += siz[y];\n        f[y] = x;\n        return true;\n    }\n    int size(int x) { return siz[leader(x)]; }\n};\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        DSU d(n+5);\n        \n        for(int i=0;i<n;i++)\n        {\n            int x=circles[i][0];\n            int y=circles[i][1];\n            int r=circles[i][2];\n            \n            if(x+r>=X)\n                d.merge(i+1,n+1);\n            if(x-r<=0)\n                d.merge(i+1,n+2);\n            \n            if(y+r>=Y)\n                d.merge(i+1,n+3);\n            if(y-r<=0)\n                d.merge(i+1,n+4);\n        }\n        \n        for(int i=0;i<n;i++)\n        {\n            long long x=circles[i][0];\n            long long y=circles[i][1];\n            long long r=circles[i][2];\n            for(int j=i+1;j<n;j++)\n            {\n                long long a=circles[j][0];\n                long long b=circles[j][1];\n                long long c=circles[j][2];\n                \n                long long dist=(x-a)*(x-a)+(y-b)*(y-b);\n                \n                if(dist<=(r+c)*(r+c))\n                    d.merge(i+1,j+1);\n            }\n        }\n        \n        if(d.same(n+1,n+2))\n            return false;\n        if(d.same(n+3,n+4))\n            return false;\n        if(d.same(n+1,n+3))\n            return false;\n        if(d.same(n+2,n+4))\n            return false;\n        return true;\n    }\n};",
    "submit_ts": "1722134530",
    "subm_id": "1335669296"
}