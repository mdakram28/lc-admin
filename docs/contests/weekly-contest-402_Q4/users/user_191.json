{
    "username": "feibonaqixu",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> st;\n    vector<int>& nums; \n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            st[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            st[node] = st[2 * node] + st[2 * node + 1];\n        }\n    }\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            st[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node, start, mid, idx);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx);\n            }\n            st[node] = st[2 * node] + st[2 * node + 1];\n        }\n    }\n\n    // Query the number of peaks in the range [L, R]\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) return 0;\n        if (L <= start && end <= R) return st[node];\n        int mid = (start + end) / 2;\n        int leftQuery = query(2 * node, start, mid, L, R);\n        int rightQuery = query(2 * node + 1, mid + 1, end, L, R);\n        return leftQuery + rightQuery;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        st.resize(4 * n);\n        build(1, 0, n - 1);\n    }\n\n    void update(int idx) {\n        if (idx > 0) update(1, 0, n - 1, idx - 1);\n        update(1, 0, n - 1, idx);\n        if (idx < n - 1) update(1, 0, n - 1, idx + 1);\n    }\n\n    int query(int L, int R) {\n        return query(1, 0, n - 1, L + 1, R - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int L = query[1], R = query[2];\n                result.push_back(st.query(L, R));\n            } else if (query[0] == 2) {\n                int index = query[1], val = query[2];\n                nums[index] = val;\n                st.update(index);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": "1718507034",
    "subm_id": "1289639056"
}