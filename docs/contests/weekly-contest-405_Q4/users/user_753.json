{
    "username": "adityaps6864",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        unordered_map<string, int> wordCostMap;\n        int numberOfWords = words.size();\n\n        // Populate the map with the minimum cost for each word\n        for (int i = 0; i < numberOfWords; ++i) {\n            const string& word = words[i];\n            int cost = costs[i];\n\n            if (wordCostMap.find(word) == wordCostMap.end()) {\n                wordCostMap[word] = cost;\n            } else {\n                wordCostMap[word] = min(wordCostMap[word], cost);\n            }\n        }\n\n        int targetLength = target.size();\n        vector<int> dp(targetLength + 1, 1000000000);\n        dp[targetLength] = 0;\n\n        // Fill the dp array\n        for (int i = targetLength - 1; i >= 0; --i) {\n            for (const auto& entry : wordCostMap) {\n                const string& word = entry.first;\n                int cost = entry.second;\n                int wordLength = word.size();\n\n                if (i + wordLength <= targetLength && \n                    equal(target.begin() + i, target.begin() + i + wordLength, word.begin())) {\n                    dp[i] = min(dp[i], cost + dp[i + wordLength]);\n                }\n            }\n        }\n\n        return dp[0] == 1000000000 ? -1 : dp[0];\n    }\n};\n",
    "submit_ts": "1720322876",
    "subm_id": "1312361400"
}