{
    "username": "YarosHarm",
    "submission": "class Solution {\n    static void dbg(Object... args) {\n        List<String> lst = new ArrayList<>();\n        for(Object arg : args) {\n        if(arg.getClass().isArray()) {\n        lst.add(Arrays.toString((int[]) arg));\n        } else {\n        lst.add(arg.toString());\n        }\n        }\n        System.out.println(\"[\" + String.join(\", \", lst) + \"]\");\n        }\n\nstatic void dbg(Object obj) {\n        System.out.println(obj);\n        }\n\nstatic void dbg(int[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(boolean[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(long[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(char[] arr) {\n        System.out.println(Arrays.toString(arr));\n        }\n\nstatic void dbg(int[][] arr) {\n        List<String> lst = new ArrayList<>();\n        for(int i = 0; i < arr.length; i++) {\n        lst.add(Arrays.toString(arr[i]));\n        }\n        System.out.println(\"[\" + String.join(\",\", lst) + \"]\");\n        }\n\nstatic void dbg(long[][] arr) {\n        List<String> lst = new ArrayList<>();\n        for(int i = 0; i < arr.length; i++) {\n        lst.add(Arrays.toString(arr[i]));\n        }\n        System.out.println(\"[\" + String.join(\",\", lst) + \"]\");\n        }\n\nstatic void dbg(List<int[]> lst) {\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n        res.add(Arrays.toString(lst.get(i)));\n        }\n        System.out.println(\"[\" + String.join(\",\", res) + \"]\");\n        }\n\nstatic void dbg(Queue<int[]> q) {\n        List<int[]> lst = new ArrayList<>(q);\n        List<String> res = new ArrayList<>();\n        for(int i = 0; i < lst.size(); i++) {\n        res.add(Arrays.toString(lst.get(i)));\n        }\n        System.out.println(\"[\" + String.join(\",\", res) + \"]\");\n        }\n\nstatic void dbgSegmentTree(long[] tree) {\n        int n = tree.length;\n        List<List<String>> res = new ArrayList<>();\n        for(int level = 2; level <= n; level = (level << 1)) {\n        List<String> curr = new ArrayList<>();\n        int c = n / level;\n        for(int j = c; j < c + c; j++) {\n        curr.add(tree[j] + \"\");\n        }\n        res.add(curr);\n        }\n        Collections.reverse(res);\n        for (List<String> re : res) {\n        dbg(re);\n        }\n        }\n\n\n    public int maxOperations(String s) {\n        int n = s.length();\n        int[] dp = new int[n + 1];\n        \n        int res = 0;\n        int prev = n;\n        for(int i = n - 1; i >= 0; i--) {\n            if(s.charAt(i) == '1') {\n                dp[i] = dp[prev];\n                if((i + 1) != prev) {\n                    dp[i]++;\n                }\n                res += dp[i];\n                prev = i;\n            }\n        }\n        //dbg(dp);\n        return res;\n    }\n}\n/**\n0010110010\n0010110001\n0010100011\n0010000111\n */",
    "submit_ts": "1721529834",
    "subm_id": "1327914352"
}