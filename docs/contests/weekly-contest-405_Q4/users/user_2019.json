{
    "username": "h_bugw7",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define pb push_back\n#define mp make_pair\n#define fi first\n#define se second\n\n#define ALL(x) (x).begin(), (x).end()\n#define FOR(i, a, b) for (int i=(a);i<(b);i++)\n#define REP(i,n) FOR(i,0,n)\n#define SORT(v) sort((v).begin(),(v).end())\n#define RSORT(v) sort((v).rbegin(),(v).rend())\n#define UN(v) SORT(v),(v).erase(unique((v).begin(),(v).end()),(v).end())\n\ntypedef long double ld;\ntypedef long long ll;\ntypedef pair<int, int> pii;\ntypedef pair<pii, int> ppi;\ntypedef pair<int, pii> pip;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vi;\ntypedef vector<vi> vii;\ntypedef vector<pair<int, int>> vpii;\n\nint gcd(int a, int b) { return b ? gcd(b, a % b) : a; }\n\nconst int MOD = 1e9 + 7;\n\n// -------------------------------------------------------\n// Trie Tree\nclass TrieNode {\npublic:\n    int val;\n    map<char, TrieNode*> children;\n    TrieNode(): val(INT_MAX) { }\n};\n\nclass TrieTree {\npublic:\n    TrieNode* head;\n    int find(const string& s, TrieNode* node, int index) {\n        if(!node) return INT_MAX;\n        if(index == s.size()) return node->val;\n\n        auto it = node->children.find(s[index]);\n        if(it == node->children.end()) return INT_MAX;\n        return find(s, it->second, index+1);\n    }\n    void add(const string& s, TrieNode* node, int index, int val) {\n        if(index == s.size()) {\n            node->val = min(node->val, val);\n            return;\n        }\n        TrieNode* child = nullptr;\n        auto it = node->children.find(s[index]);\n        if(it == node->children.end()) child = node->children[s[index]] = new TrieNode();\n        else child = it->second;\n        add(s, child, index+1, val);\n    }\n    TrieTree(): head(new TrieNode()) { }\n    int find(const string& s) {\n        return find(s, head, 0);\n    }\n    void add(const string& s, int val) {\n        return add(s, head, 0, val);\n    }\n};\n\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieTree tree;\n        REP(i, words.size()) {\n            tree.add(words[i], costs[i]);\n        }\n        vi dp(target.length(), INT_MAX);\n        REP(l, target.length()) {\n            int pre = l ? dp[l-1] : 0;\n            if(pre == INT_MAX) continue;\n            TrieNode* node = tree.head;\n            FOR(r, l, target.length()) {\n                node = node->children[target[r]];\n                if(!node) break;\n                if(node->val == INT_MAX) continue;\n                dp[r] = min(dp[r], pre + node->val);\n            }\n        }\n        return dp.back() == INT_MAX ? -1 : dp.back();\n    }\n};",
    "submit_ts": "1720324665",
    "subm_id": "1312405064"
}