{
    "username": "ankitchandra6201",
    "submission": "\n\n\n\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\nprivate:\n    vector<vector<int>> graph;\n    vector<int> height;\n    int diameter;\n\n    \n    void buildGraph(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        graph.assign(n, vector<int>());\n        \n        if (edges.empty()) {\n            return; \n        }\n        \n        for (auto& edge : edges) {\n            if (edge.size() >= 2) {\n                graph[edge[0]].push_back(edge[1]);\n                graph[edge[1]].push_back(edge[0]);\n            }\n        }\n    }\n\n    \n    void dfs(int node, int parent) {\n        int max_height1 = 0, max_height2 = 0;\n        for (int i = 0; i < graph[node].size(); ++i) {\n            int child = graph[node][i];\n            if (child != parent) {\n                dfs(child, node);\n                int h = height[child] + 1;\n                if (h > max_height1) {\n                    max_height2 = max_height1;\n                    max_height1 = h;\n                } else if (h > max_height2) {\n                    max_height2 = h;\n                }\n            }\n        }\n        \n        height[node] = max_height1;\n        diameter = max(diameter, max_height1 + max_height2);\n    }\n\n    \n    pair<int, int> processTreeHelper() {\n        int n = graph.size();\n        height.assign(n, 0);\n        diameter = 0;\n\n        dfs(0, -1);\n\n        int center = 0, min_height = n;\n        for (int i = 0; i < n; ++i) {\n            int max_dist = max(height[i], diameter - height[i]);\n            if (max_dist < min_height) {\n                min_height = max_dist;\n                center = i;\n            }\n        }\n\n        return {diameter, min_height};\n    }\n\npublic:\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        buildGraph(edges1);\n        auto [diameter1, height1] = processTreeHelper();\n\n        buildGraph(edges2);\n        auto [diameter2, height2] = processTreeHelper();\n\n        return max({diameter1, diameter2, height1 + height2 + 1});\n    }\n};\n",
    "submit_ts": 1719719931.0
}