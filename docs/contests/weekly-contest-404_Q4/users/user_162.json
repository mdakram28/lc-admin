{
    "username": "pushuu",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        auto giv = [&] (vector <vector <int>> &e) -> int {\n            int n = e.size() + 1;\n            vector <vector <int>> a (n);\n            for (int i = 0; i < n - 1; i++) {\n                int u = e[i][0], v = e[i][1];\n                a[u].push_back(v);\n                a[v].push_back(u);\n            }\n            vector <int> dis (n, -1);\n            dis[0] = 0;\n            queue <int> q;\n            q.push(0);\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : a[u]) if (dis[v] == -1) {\n                    dis[v] = dis[u] + 1;\n                    q.push(v);\n                }\n            }\n            \n            int mx = 0, node = -1;\n            for (int i = 0; i < n; i++) {\n                if (mx <= dis[i]) {\n                    mx = dis[i];\n                    node = i;\n                }\n                dis[i] = -1;\n            }\n            \n            q.push(node);\n            dis[node] = 0;\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : a[u]) {\n                    if (dis[v] == -1) {\n                        dis[v] = dis[u] + 1;\n                        q.push(v);\n                    }\n                }\n            }\n            \n            return *max_element(dis.begin(), dis.end());\n        };\n        \n        int d1 = giv(e1);\n        int d2 = giv(e2);\n        // cout << d1 << ' ' << d2 << '\\n';\n        int ans = max(d1, d2);\n        ans = max(ans, (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n        return ans;\n    }\n};",
    "submit_ts": 1719717238.0
}