{
    "username": "akki001",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &adjList, int source, int targetA, int targetB, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visited(totalNodes + 4, 0);\n        nodeQueue.push(source);\n        visited[source] = 1;\n        \n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetA] || visited[targetB];\n    }\n    \n    bool canReachCorner(int width, int height, vector<vector<int>>& circleParams) {\n        vector<pair<pair<int, int>, int>> circles(circleParams.size());\n        vector<vector<int>> adjList(circleParams.size() + 4);\n        int circleCount = circleParams.size();\n        \n        for (int i = 0; i < circleCount; ++i) {\n            circles[i].first.first = circleParams[i][0];\n            circles[i].first.second = circleParams[i][1];\n            circles[i].second = circleParams[i][2];\n        }\n        \n        for (int i = 0; i < circleCount; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[circleCount].push_back(i);\n                adjList[i].push_back(circleCount);\n            }\n            if (width - circles[i].first.first <= circles[i].second) {\n                adjList[circleCount + 2].push_back(i);\n                adjList[i].push_back(circleCount + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[circleCount + 1].push_back(i);\n                adjList[i].push_back(circleCount + 1);\n            }\n            if (height - circles[i].first.second <= circles[i].second) {\n                adjList[circleCount + 3].push_back(i);\n                adjList[i].push_back(circleCount + 3);\n            }\n            for (int j = i + 1; j < circleCount; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(adjList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4)); // Check for bottom-left corner\n        isBlocked = max(isBlocked, bfs(adjList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4)); // Check for top-right corner\n        if (isBlocked) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722138202",
    "subm_id": "1335784780"
}