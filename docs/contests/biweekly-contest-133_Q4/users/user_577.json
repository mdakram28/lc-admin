{
    "username": "akp99376",
    "submission": "class Solution {\npublic:\n    int MOD = 1e9 + 7;\n    int MAX_INV = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> reqMap;\n        for (const auto& r : reqs) {\n            reqMap[r[0] + 1] = r[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n        \n        bool flag = true;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = inv - pos;\n                    if (flag && prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(len) != reqMap.end()) {\n                int tgtInv = reqMap[len];\n                for (int inv = 0; inv <= MAX_INV; ++inv) {\n                    if (flag && inv != tgtInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n        \n        int a = 1;\n        func(a);\n\n        long result = 0;\n        for (const auto& count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n    void func(int a){\n        a++;\n        return;\n    }\n};",
    "submit_ts": 1719070698.0
}