{
    "username": "Nikhil Priyadarshan",
    "submission": "#include <vector>\n#include <array>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& board) {\n        int numRows = board.size();\n        int numCols = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        auto topValues = getTopThreeValues(board, numRows, numCols);\n\n        for (int row1 = 0; row1 < numRows; ++row1) {\n            for (int row2 = row1 + 1; row2 < numRows; ++row2) {\n                for (int row3 = row2 + 1; row3 < numRows; ++row3) {\n                    maxSum = std::max(maxSum, calculateMaxSum(topValues[row1], topValues[row2], topValues[row3]));\n                }\n            }\n        }\n\n        return maxSum;\n    }\n\nprivate:\n    std::vector<std::array<std::pair<int, int>, 3>> getTopThreeValues(const std::vector<std::vector<int>>& board, int numRows, int numCols) {\n        std::vector<std::array<std::pair<int, int>, 3>> topThree(numRows);\n        for (int row = 0; row < numRows; ++row) {\n            std::vector<std::pair<int, int>> valueColPairs;\n            for (int col = 0; col < numCols; ++col) {\n                valueColPairs.push_back({board[row][col], col});\n            }\n            std::sort(valueColPairs.rbegin(), valueColPairs.rend());\n            for (int i = 0; i < 3; ++i) {\n                topThree[row][i] = valueColPairs[i];\n            }\n        }\n        return topThree;\n    }\n\n    long long calculateMaxSum(const std::array<std::pair<int, int>, 3>& topRow1,\n                              const std::array<std::pair<int, int>, 3>& topRow2,\n                              const std::array<std::pair<int, int>, 3>& topRow3) {\n        long long maxSum = LLONG_MIN;\n\n        // Iterate through all possible column combinations\n        for (int i = 0; i < 3; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                if (topRow1[i].second == topRow2[j].second) continue;\n                for (int k = 0; k < 3; ++k) {\n                    if (topRow1[i].second == topRow3[k].second || topRow2[j].second == topRow3[k].second) continue;\n                    long long currentSum = static_cast<long long>(topRow1[i].first) +\n                                           static_cast<long long>(topRow2[j].first) +\n                                           static_cast<long long>(topRow3[k].first);\n                    maxSum = std::max(maxSum, currentSum);\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723909155",
    "subm_id": "1359181691"
}