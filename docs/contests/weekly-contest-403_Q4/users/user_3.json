{
    "username": "tonghuikang",
    "submission": "\n\ndef minimumArea(grid: List[List[int]]) -> int:\n    m, n = len(grid), len(grid[0])\n    min_row, max_row = m, 0\n    min_col, max_col = n, 0\n\n    for i in range(m):\n        for j in range(n):\n            if grid[i][j] == 1:\n                min_row = min(min_row, i)\n                max_row = max(max_row, i)\n                min_col = min(min_col, j)\n                max_col = max(max_col, j)\n\n    if min_row > max_row or min_col > max_col:\n        return 0\n\n    return (max_row - min_row + 1) * (max_col - min_col + 1)\n\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        # either it is a hamburger or a T-joint\n        \n        minres = len(grid) * len(grid[0])\n\n        for _ in range(4):\n        \n            n = len(grid)\n            m = len(grid)\n            \n            for x in range(1,n):\n                for y in range(1,m):\n                    val = 0\n                    val += minimumArea([[x for x in row[:y]] for row in grid[:x]])\n                    val += minimumArea([[x for x in row[y:]] for row in grid[:x]])\n                    val += minimumArea([[x for x in row] for row in grid[x:]])\n                    minres = min(minres, val)\n                    \n            for x in range(1,n):\n                for y in range(x+1,n):\n                    val = 0\n                    val += minimumArea([[x for x in row] for row in grid[:x]])\n                    val += minimumArea([[x for x in row] for row in grid[x:y]])\n                    val += minimumArea([[x for x in row] for row in grid[y:]])\n                    minres = min(minres, val)\n\n            grid = list(zip(*grid[::-1]))\n\n        return minres\n        \n        \n        \n        ",
    "submit_ts": "1719110740",
    "subm_id": "541382770"
}