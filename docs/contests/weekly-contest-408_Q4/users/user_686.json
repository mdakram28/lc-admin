{
    "username": "ninja_master2002",
    "submission": "class Solution {\n    int x,x1,y1;\n    bool dfs(int node,vector<int>adj[],vector<int>&vis){\n        vis[node]=true;\n        for(auto it:adj[node]){\n            if(it==x1||it==y1)return true;\n            if(!vis[it])\n                if(dfs(it,adj,vis))return true;\n        }\n        return false;\n    }\n    int helper(int node1,int node2,vector<int>adj[]) {\n        vector<int> vis(x, 0);\n        if(dfs(node1,adj,vis))return true ;\n        vis.resize(x,0);\n        if(dfs(node2,adj,vis))return true ;\n        return false;\n    }\npublic:\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        vector<int> adj[n+4];\n        x=n+4,x1=n+1,y1=n+2;\n        for(int i=0;i<n-1;i++){\n            for (int j = i + 1; j < n; ++j) {\n                if (sqrt(pow(circles[i][0] - circles[j][0], 2LL) + pow(circles[i][1] - circles[j][1], 2LL))<=circles[i][2]+0LL+circles[j][2]) {\n                    adj[j].push_back(i);\n                    adj[i].push_back(j);\n                }\n            }\n        }\n        \n         for (int i = 0; i < n; ++i) {\n             \n            if (circles[i][0] <= circles[i][2]) {\n                adj[i].push_back(n);\n                adj[n].push_back(i);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                adj[i].push_back(n + 1);\n                adj[n + 1].push_back(i);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                adj[i].push_back(n + 2);\n                adj[n + 2].push_back(i);\n            }\n            \n            if (Y - circles[i][1] <= circles[i][2]) {\n                adj[i].push_back(n + 3);\n                adj[n + 3].push_back(i);\n            }\n            \n        }\n        if(helper(n+3,n,adj))return false;\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722138025",
    "subm_id": "1335780112"
}