{
    "username": "Guru_Prasath_K_S",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> vertical;\n        priority_queue<int> horizontal;\n        \n        for(int i = 0 ; i < horizontalCut.size() ; i++) {\n            horizontal.push(horizontalCut[i]);\n        }\n        \n        for(int i = 0 ; i < verticalCut.size() ; i++) {\n            vertical.push(verticalCut[i]);\n        }\n        \n        int hcut = 1;\n        int vcut = 1;\n        \n        \n        long long ans = 0;\n        \n        while(!vertical.empty() && !horizontal.empty()) {\n            if(vertical.top() < horizontal.top()) {\n                int top = horizontal.top();\n                horizontal.pop();\n                \n                vcut += 1;\n                \n                ans = ans + (long long)(top * hcut);\n            } else {\n                int top = vertical.top();\n                vertical.pop();\n                \n                hcut += 1;\n                \n                ans = ans + (long long)(top * vcut);\n            }\n        }\n        \n        while(!vertical.empty()) {\n            int top = vertical.top();\n            vertical.pop();\n                \n            hcut += 1;\n                \n            ans = ans + (long long)(top * vcut);\n        }\n        \n        while(!horizontal.empty()) {\n            int top = horizontal.top();\n            horizontal.pop();\n                \n            vcut += 1;\n                \n            ans = ans + (long long)(top * hcut);\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720926347",
    "subm_id": "1320283480"
}