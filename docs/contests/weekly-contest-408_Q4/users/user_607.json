{
    "username": "madars",
    "submission": "class Solution {\npublic:\ntypedef long long ll;\nstruct dsu {\n    int n;\n    vector<int> p, sz;\n\n    dsu(int n_) : n(n_), p(vector<int>(n_)), sz(vector<int>(n_, 1)) {\n        iota(p.begin(), p.end(), 0);\n    }\n\n    inline int find(int x) {\n        if (p[x] == x) return x;\n        p[x] = find(p[x]);\n        return p[x];\n    }\n\n    inline bool unite(int x, int y) { // return true if two sets were united\n        x = find(x); y = find(y);\n        if (x == y) return false;\n        if (sz[x] < sz[y]) swap(x,y);\n        p[y] = x; sz[x] += sz[y]; // x is the root of the union\n        return true;\n    }\n\n    int szof(int x) { return sz[find(x)]; }\n};\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        dsu D(n+4); // N circles, LEFT, RIGHT, BOTTOM, TOP\n        for (int i = 0; i < n; ++i) {\n            ll x0 = circles[i][0], y0 = circles[i][1], r0 = circles[i][2];\n            if (x0 * x0 + y0 * y0 <= r0*r0) return false; // has bottom left\n            if ((x0-X)*(x0-X) + (y0-Y)*(y0-Y) <= r0*r0) return false; // has top right\n            \n            if (x0 <= r0) D.unite(i, n);\n            if (x0 >= X-r0) D.unite(i, n+1);\n            if (y0 <= r0) D.unite(i, n+2);\n            if (y0 >= Y-r0) D.unite(i, n+3);\n            for (int j = i+1; j < n; ++j) {\n                ll x1 = circles[j][0], y1 = circles[j][1], r1 = circles[j][2];\n                if ((x0-x1)*(x0-x1)+(y0-y1)*(y0-y1) <= (r0+r1)*(r0+r1)) {\n                    // overlap\n                    D.unite(i, j);\n                }\n            }\n        }\n\n        // LEFT, RIGHT, BOTTOM, TOP\n        if (D.find(n) == D.find(n+1)) return false; // LR\n        if (D.find(n) == D.find(n+2)) return false; // left bottom\n        if (D.find(n+2) == D.find(n+3)) return false; // bottom top\n        if (D.find(n+3) == D.find(n+1)) return false; // top right\n        return true;\n    }\n};",
    "submit_ts": "1722138030",
    "subm_id": "1335780258"
}