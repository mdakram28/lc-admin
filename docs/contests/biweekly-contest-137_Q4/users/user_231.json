{
    "username": "\u758f\u6c50",
    "submission": "# \u6bcf\u884c\u91cc\u53ea\u6709\u53ef\u80fd\u9009\u524d3\u5927\uff0c\u5217\u540c\u7406\uff1b\u5927\u5c0f\u76f8\u540c\u65f6x/y\u5927\u7684\u4f18\u5148\uff1b\u8fd9\u6837\u6392\u9664\u6240\u6709\u5176\u4ed6\u7684\u503c\u4ee5\u540evalid\u5750\u6807\u6570\u662f\u5f88\u5c11\u7684\n# \u5728valid\u5750\u6807\u91cc\u6328\u4e2a\u5faa\u73af\n# \u53ea\u6709\u53ef\u80fd\u662fvalid\u91cc\u6700\u5927\u768411\u4e2a\u4e2d\uff0c\u56e0\u4e3a\u6bcf\u4e2a\u6700\u5927\u7684\u53ef\u80fd\u5c01\u67402\u4e2a\u540c\u884c\u548c2\u4e2a\u540c\u5217\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        h, w = len(board), len(board[0])\n        valid_mask = [[True for x in range(w)] for y in range(h)]\n        # judge rows\n        for y in range(h):\n            # sorted_ids = sorted([x for x in range(w)], key=lambda k: (board[y][k], k), reverse=True)\n            sorted_ids = nlargest(3, [x for x in range(w)], key=lambda k: (board[y][k], k))\n            for x in range(w):\n                if x not in sorted_ids:\n                    valid_mask[y][x] = False\n        # judge columns\n        for x in range(w):\n            # sorted_ids = sorted([y for y in range(h)], key=lambda k: (board[k][x], k), reverse=True)\n            sorted_ids = nlargest(3, [y for y in range(h)], key=lambda k: (board[k][x], k))\n            for y in range(h):\n                if y not in sorted_ids:\n                    valid_mask[y][x] = False\n        # valid list\n        valid = []\n        for y in range(h):\n            for x in range(w):\n                if valid_mask[y][x]:\n                    valid.append((x, y))\n        # print(len(valid), valid)\n        # only remain largest 11 in valid\n        valid.sort(key=lambda x: board[x[1]][x[0]], reverse=True)\n        # search in valid\n        res = -inf\n        vl = len(valid)\n        vl = min(vl, 11) # only search largest 11\n        def g(k):\n            return board[k[1]][k[0]]\n        for ai in range(vl):\n            a = valid[ai]\n            for bi in range(ai+1, vl):\n                b = valid[bi]\n                if a[0] == b[0] or a[1] == b[1]:\n                    continue\n                for ci in range(bi+1, vl):\n                    c = valid[ci]\n                    if a[0] == c[0] or b[0] == c[0] or a[1] == c[1] or b[1] == c[1]:\n                        continue\n                    res = max(res, g(a) + g(b) + g(c))\n        return res",
    "submit_ts": "1723908307",
    "subm_id": "556330279"
}