{
    "username": "m_d__noor",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        long ans = 0;\n        int n = nums.length;\n        int[] temp = new int[n];\n        \n        // Calculate the differences and store in temp\n        for (int i = 0; i < n; i++) {\n            temp[i] = target[i] - nums[i];\n        }\n\n        int i = 0;\n        while (i < n) {\n            // Skip zero values\n            while (i < n && temp[i] == 0) i++;\n            if (i >= n) break;\n\n            int j = i + 1;\n            int min = Math.abs(temp[i]);\n            boolean flag = temp[i] > 0;\n\n            // Find the range where values are consistent (all positive or all negative)\n            while (j < n) {\n                if (temp[j] == 0) break;\n                if (flag && temp[j] < 0) break;\n                if (!flag && temp[j] > 0) break;\n                min = Math.min(min, Math.abs(temp[j]));\n                j++;\n            }\n\n            // Increment the operation count by the smallest absolute value in the range\n            ans += min;\n\n            // Adjust the values in the range\n            for (int k = i; k < j; k++) {\n                if (temp[k] > 0) {\n                    temp[k] -= min;\n                } else {\n                    temp[k] += min;\n                }\n            }\n        }\n\n        return ans;\n    }\n}\n",
    "submit_ts": "1721533310",
    "subm_id": "1328006096"
}