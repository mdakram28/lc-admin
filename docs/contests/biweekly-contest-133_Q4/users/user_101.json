{
    "username": "codebegin62",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MOD = 1_000_000_007;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int[][] dp = new int[n + 1][400 + 1]; // dp[end][inv] represents number of ways to create permutation of length 'end' with 'inv' inversions.\n        dp[0][0] = 1; // base case\n        \n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                dp[len][inv] = 0;\n                for (int k = 0; k < len; k++) {\n                    if (inv >= k) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        int[] maxInversions = new int[n];\n        Arrays.fill(maxInversions, -1);\n\n        for (int[] req : requirements) {\n            int endIndex = req[0];\n            int cnt = req[1];\n            maxInversions[endIndex] = cnt;\n        }\n\n        int[][] validDp = new int[n + 1][401];\n        validDp[0][0] = 1;\n        \n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                if (maxInversions[len - 1] != -1 && inv != maxInversions[len - 1]) continue;\n                validDp[len][inv] = 0;\n                for (int k = 0; k < len; k++) {\n                    if (inv >= k) {\n                        validDp[len][inv] = (validDp[len][inv] + validDp[len - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        int totalValidPermutations = 0;\n        for (int inv = 0; inv <= 400; inv++) {\n            totalValidPermutations = (totalValidPermutations + validDp[n][inv]) % MOD;\n        }\n        \n        return totalValidPermutations;\n    }\n}\n",
    "submit_ts": 1719068057.0
}