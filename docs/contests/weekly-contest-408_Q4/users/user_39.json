{
    "username": "ethanrao",
    "submission": "class Solution {\npublic:\n    bool intersect(std::vector<int> &a, std::vector <int> &b){\n        long long t = 1ll * (a[0] - b[0]) * (a[0] - b[0]) + 1ll * (a[1] - b[1]) * (a[1] - b[1]);\n        return 1ll * (a[2] + b[2]) * (a[2] + b[2]) >= t;\n    }\n    int fa[1005], n;\n    int fd(int x){\n        return x == fa[x] ? x : fa[x] = fd(fa[x]);\n    }\n    void merge(int x, int y){\n        x = fd(x);\n        y = fd(y);\n        if(x != y) fa[y] = x;\n        return ;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        n = circles.size();\n        for(int i = 1; i <= n + 4; ++i) fa[i] = i;\n        for(int i = 0; i < n; ++i)\n            for(int j = i + 1; j < n; ++j)\n                if(intersect(circles[i], circles[j]))\n                    merge(i + 1, j + 1);\n        for(int i = 0; i < n; ++i){\n            if(circles[i][1] <= circles[i][2]) merge(i + 1, n + 1);\n            if(circles[i][0] <= circles[i][2]) merge(i + 1, n + 2);\n            if(X - circles[i][0] <= circles[i][2]) merge(i + 1, n + 3);\n            if(Y - circles[i][1] <= circles[i][2]) merge(i + 1, n + 4);\n            if(fd(n + 1) == fd(n + 2) || fd(n + 3) == fd(n + 4) || fd(n + 1) == fd(n + 4) || fd(n + 2) == fd(n + 3)) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722135780",
    "subm_id": "1335713422"
}