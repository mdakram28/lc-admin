{
    "username": "kexunz1",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        # select a subarray nums[l..r] such that |k - (nums[l] AND nums[l + 1] ... AND nums[r])| is minimum.\n        n = len(nums)\n        \n        ans = 10**10\n        \n        sparse_table = [[0 for _ in range(30)] for _ in range(n)]\n        \n        for i in range(n):\n            sparse_table[i][0] = nums[i]\n        for j in range(1, 30):\n            for i in range(n):\n                if i + (1 << j) <= n:\n                    sparse_table[i][j] = sparse_table[i][j - 1] & sparse_table[i + (1 << (j - 1))][j - 1]\n        \n        import math\n        def get_and_sum(l, r):\n            length = r - l + 1\n            bits = int(math.log2(length))\n            return sparse_table[l][bits] & sparse_table[r - (1 << bits) + 1][bits]\n        \n        for i in range(n):\n            # binary search for the right end such that [i..r] is the smallest that's >= k\n            \n            l = i\n            r = n - 1\n            pos = i\n            while l <= r:\n                mid = (l + r) // 2\n                if get_and_sum(i, mid) >= k:\n                    pos = mid\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            \n            ans = min(ans, abs(k - get_and_sum(i, pos)))\n            if pos + 1 < n:\n                ans = min(ans, abs(k - get_and_sum(i, pos + 1)))\n        \n        return ans",
    "submit_ts": 1717298536.0
}