{
    "username": "Numan-",
    "submission": "class TrieNode {\n    public $children = [];\n    public $cost = PHP_INT_MAX;\n}\n\nclass Solution {\n    private $root;\n    \n    function __construct() {\n        $this->root = new TrieNode();\n    }\n    \n    function addWord($word, $cost) {\n        $node = $this->root;\n        foreach (str_split($word) as $char) {\n            if (!isset($node->children[$char])) {\n                $node->children[$char] = new TrieNode();\n            }\n            $node = $node->children[$char];\n        }\n        $node->cost = min($node->cost, $cost);\n    }\n    \n    function minimumCost($target, $words, $costs) {\n        $n = strlen($target);\n        $dp = array_fill(0, $n + 1, PHP_INT_MAX);\n        $dp[0] = 0;\n\n        // Add all words to the Trie\n        foreach ($words as $i => $word) {\n            $this->addWord($word, $costs[$i]);\n        }\n\n        // Dynamic Programming with Trie\n        for ($i = 0; $i < $n; $i++) {\n            if ($dp[$i] == PHP_INT_MAX) continue;\n            $node = $this->root;\n            for ($j = $i; $j < $n; $j++) {\n                if (!isset($node->children[$target[$j]])) break;\n                $node = $node->children[$target[$j]];\n                if ($node->cost != PHP_INT_MAX) {\n                    $dp[$j + 1] = min($dp[$j + 1], $dp[$i] + $node->cost);\n                }\n            }\n        }\n\n        return $dp[$n] == PHP_INT_MAX ? -1 : $dp[$n];\n    }\n}",
    "submit_ts": "1720320601",
    "subm_id": "1312299214"
}