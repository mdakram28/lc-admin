{
    "username": "ConnectedPuddle",
    "submission": "public class Solution {\n    public int MinimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        var (r1, d1) = ComputeRadiusAndDiameter(edges1.Length+1, edges1);\n        Console.WriteLine($\"{r1}, {d1}\");\n        var (r2, d2) = ComputeRadiusAndDiameter(edges2.Length+1, edges2);\n        Console.WriteLine($\"{r2}, {d2}\");\n        int d3 = r1 + r2 + 1;\n        return Math.Max(Math.Max(d1, d2), d3);\n    }\n    \n    public (int, int) ComputeRadiusAndDiameter(int n, int[][] edges)\n    {\n        if (n == 1)\n        {\n            return (0, 0);\n        }\n        Node[] nodes = new Node[n];\n        for (int i = 0; i < n; i++)\n        {\n            nodes[i] = new();\n        }\n        foreach(int[] edge in edges)\n        {\n            nodes[edge[0]].Edges.Add(edge[1]);\n            nodes[edge[1]].Edges.Add(edge[0]);\n        }\n        List<int> leaves = new();\n        for (int i = 0; i < n; i++)\n        {\n            if (nodes[i].Edges.Count == 1)\n            {\n                leaves.Add(i);\n            }\n        }\n        int radius = 0;\n        int nodesLeft = n;\n        while (true)\n        {\n            if (nodesLeft == 1)\n            {\n                return (radius, radius * 2);\n            }\n            if (nodesLeft == 2)\n            {\n                return (radius + 1, radius * 2 + 1);\n            }\n            nodesLeft -= leaves.Count;\n            List<int> nextLeaves = new();\n            foreach(int next in leaves)\n            {\n                foreach(int adjacent in nodes[next].Edges)\n                {\n                    nodes[next].Edges.Remove(adjacent);\n                    nodes[adjacent].Edges.Remove(next);\n                    if (nodes[adjacent].Edges.Count == 1)\n                    {\n                        nextLeaves.Add(adjacent);\n                    }\n                }\n            }\n            leaves = nextLeaves;\n            radius++;\n        }\n        return (0, 0);\n    }\n    \n    public class Node\n    {\n        public HashSet<int> Edges = new();\n    }\n}\n",
    "submit_ts": 1719717283.0
}