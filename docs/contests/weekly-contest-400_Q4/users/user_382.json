{
    "username": "yeshsingh",
    "submission": "#define INF INT32_MAX\nclass ANDSegmentTree {\npublic:\n    vector<int> segmentTree;\n    int size;\n    const int MAX_INT = INT32_MAX;  \n    ANDSegmentTree(vector<int>& array) {\n        size = array.size();\n        segmentTree.resize(4 * size);\n        buildTree(array, 0, 0, size - 1);\n    }\n    void buildTree(vector<int>& array, int node, int start, int end) {\n        if (start == end) {\n            segmentTree[node] = array[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(array, 2 * node + 1, start, mid);\n            buildTree(array, 2 * node + 2, mid + 1, end);\n            segmentTree[node] = segmentTree[2 * node + 1] & segmentTree[2 * node + 2];\n        }\n    }\n    int rangeQuery(int left, int right) {\n        return rangeQuery(0, 0, size - 1, left, right);\n    }\n    int rangeQuery(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return MAX_INT;\n        }\n        if (left <= start && end <= right) {\n            return segmentTree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = rangeQuery(2 * node + 1, start, mid, left, right);\n        int rightResult = rangeQuery(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n};\n\nclass Solution {\n    int closestANDResult(vector<int>& array, int target) {\n        int n = array.size();\n        ANDSegmentTree andTree(array);\n        int minimumDifference = INT32_MAX;\n        for (int i = 0; i < n; i++) {\n            int left = i - 1, right = n - 1, mid;\n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (andTree.rangeQuery(i, mid) >= target)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                minimumDifference = min(minimumDifference, abs(andTree.rangeQuery(i, left) - target));\n            minimumDifference = min(minimumDifference, abs(target - andTree.rangeQuery(i, right)));\n        }\n        return minimumDifference;\n    }\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        return closestANDResult(nums, k);\n    }\n};",
    "submit_ts": 1717298865.0
}