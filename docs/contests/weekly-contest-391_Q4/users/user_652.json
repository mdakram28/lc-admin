{
    "username": "hoanh",
    "submission": "\n\nvector<int> candidates(const vector<vector<int>>& p) {\n  int n = p.size();\n\n  vector<pair<int,int>> a, b;\n\n  for (int i = 0; i < n; ++i) {\n    int x = p[i][0], y = p[i][1];\n    a.push_back({ x - y, i });\n    b.push_back({ x + y, i });\n  }\n\n  sort(a.begin(), a.end());\n  sort(b.begin(), b.end());\n  \n//   for (auto x : a) cout << x.first << \" \" << x.second << \", \"; cout << endl;\n//   for (auto x : b) cout << x.first << \" \" << x.second << \", \"; cout << endl;\n\n  set<int> c;\n  c.insert(a[0].second);\n  c.insert(a[n - 1].second);\n  c.insert(b[0].second);\n  c.insert(b[n - 1].second);\n  \n  // cout << \"candidates: \";\n  // for (auto x : c) cout << x << \", \";\n  // cout << endl;\n  \n  return vector<int>(c.begin(), c.end());\n}\n\nint manhattan(const vector<int>& a, const vector<int>& b) {\n  int res = abs(a[0] - b[0]) + abs(a[1] - b[1]);\n  // cout << \"manhattan of \" << a[0] << \" \" << a[1] << \" \" << b[0] << \" \" << b[1] << \" is  \" << res << endl;\n  return res;\n}\n\nint maxManhattan(const vector<vector<int>>& p, const vector<int>& indexes) {\n  int res = 0;\n  for (int i = 0; i < (int) indexes.size(); ++i) {\n    for (int j = i + 1; j < (int) indexes.size(); ++j) {\n      res = max(res, manhattan(p[indexes[i]], p[indexes[j]]));\n    }\n  }\n  return res;\n}\n\nclass Solution {\npublic:\n  int minimumDistance(vector<vector<int>>& p) {\n    vector<int> c = candidates(p);\n    // for (int x : c) cout << x << endl;\n    \n    int res = INT_MAX;\n    \n    for (int i : c) {\n      vector<vector<int>> q = p;\n      q.erase(q.begin() + i);\n      \n      // for (auto x : q) cout << \"(\" << x[0] << \", \" << x[1] << \") \";\n      // cout << endl;\n      \n      vector<int> cans = candidates(q);\n      int maxMan = maxManhattan(q, cans);\n      // cout << \"maxMan after removing \" << i << \" is \" << maxMan << endl;\n      res = min(res, maxMan);\n    }\n    \n    return res;\n  }\n};"
}