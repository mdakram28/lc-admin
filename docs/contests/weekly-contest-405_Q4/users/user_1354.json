{
    "username": "shenderian69420",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        \nclass Trie:\n    def __init__(self):\n        self.trie = TrieNode()\n        \n    def insert(self, word, cost):\n        cur = self.trie\n        for w in word:\n            if w not in cur.children:\n                cur.children[w] = TrieNode()\n            cur = cur.children[w]\n        cur.cost = min(cur.cost, cost)\n    \n    def search(self, target, idx):\n        cur = self.trie\n        res = []\n        for i in range(idx, len(target)):\n            if target[i] not in cur.children:\n                break\n            cur = cur.children[target[i]]\n            if cur.cost != float('inf'):\n                res.append((i + 1, cur.cost))\n        return res\n        \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        N = len(target)\n        trie = Trie()\n\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n\n        dp = [float('inf')] * (N + 1)\n        dp[0] = 0\n        \n        for i in range(N):\n            if dp[i] == float('inf'):\n                continue\n            trie_search = trie.search(target, i)\n            for j, cost in trie_search:\n                dp[j] = min(dp[j], dp[i] + cost)\n\n        return dp[-1] if dp[-1] != float('inf') else -1\n",
    "submit_ts": "1720323712",
    "subm_id": "1312382202"
}