{
    "username": "Ritu8299",
    "submission": "class Solution {\npublic:\nclass Node {\n    public:\n        map<char, Node*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n       Node* root;\n        Trie()\n         { root = new Node(); \n         }\n\n        void insert(string& word, int idx, int cost) {\n            Node* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new Node();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({idx, cost});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n       // priority_queue <pair<int,string>, vector<pair<int,string>>, greater<pair<int,string>>> pq;\n        //pq.push({0,\"\"});\n        int n=words.size();\n//         map<string,int> mpp,minCost;\n//         for(int i=0;i<n;i++){\n//             int temp=INT_MAX;\n//             if(mpp.find(words[i])!=mpp.end()){\n//                 temp=mpp[words[i]];\n//             }\n// mpp[words[i]]=min(costs[i],temp);\n//         }\n       \n        int m=target.size();\n        int ans=INT_MAX;\n//         while(pq.empty()!=1){\n//             int cost = pq.top().first;\n//             string temp = pq.top().second;\n//             pq.pop();\n//             // if(minCost.find(temp)!=minCost.end() && minCost[temp]<cost)\n//             // continue;\n           \n\n//             int start = temp.size();\n//            for(int i=0;i+start<m;i++){\n//               string add = target.substr(start,i+1);\n//               if(mpp.find(add)!=mpp.end() && (minCost.find(temp+add)==minCost.end() || minCost[temp+add]>cost+mpp[add])){\n//                 pq.push({cost+mpp[add],temp+add});\n//  minCost [temp+add]=cost+mpp[add];\n//               }\n           \n//             }\n        \n//         }\n//         if(minCost.find(target)==minCost.end())\n//         return -1;\n//         return minCost[target];\n\n\n       \n        \n        Trie trie;\n        for (int i = 0; i < n; i++) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        vector<int> minCost(m + 1, INT_MAX);\n         minCost[0]=0;\n\n\n        for (int i = 0; i < m; ++i) {\n            if ( minCost[i]!= INT_MAX){\n            Node* node = trie.root;\n            for (int j = i; j < m; j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto p : node->wordEnds) {\n                    int idx = p.first;\n                    int cost = p.second;\n                    int len = words[idx].size();\n                    if (len+i <= m) {\n                         minCost[len+i] = min( minCost[len+i],  minCost[i] + cost);\n                    }\n                }\n            }\n        }\n        }\n             if( minCost[m]==INT_MAX)\n        return -1 ;\n        return  minCost[m];\n    }\n};",
    "submit_ts": "1720324463",
    "subm_id": "1312400105"
}