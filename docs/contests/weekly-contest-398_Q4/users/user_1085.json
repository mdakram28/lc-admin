{
    "username": "44_sparsh",
    "submission": "class Solution {\npublic:\n    // int jump = 0;\n    map<vector<int>, int>dp;\n    int solve(int &k, int start, int prev, int jump){\n        if(start > k+1){\n            return 0;\n        }\n        if(start < 0)return 0;\n        if(dp.find({start, prev, jump}) != dp.end()){\n            return dp[{start, prev, jump}];\n        }\n        \n        int oneDown = 0;\n        if(prev == 0){\n            oneDown = solve(k, start-1, 1, jump);\n        }\n        int oneUp = solve(k, start + pow(2, jump), 0, jump+1);\n        if(start == k){\n            return dp[{start, prev, jump}] = oneDown+oneUp+1;\n        }\n        return dp[{start, prev, jump}] = oneDown+oneUp;\n    }\n    \n    int waysToReachStair(int k) {\n        return solve(k, 1, 0, 0);\n    }\n};",
    "submit_ts": 1716090200.0
}