{
    "username": "fsyun",
    "submission": "class Solution {\n    int[][] cnt;\n    int[] pos;\n    int f(int p, int q) {\n        return Math.min(cnt[q][0] - cnt[p - 1][0], cnt[q][1] - cnt[p - 1][1]);\n    }\n    public long[] countKConstraintSubstrings(String s0, int k, int[][] qs) {\n        char[] str = s0.toCharArray();\n        int n = str.length;\n        cnt = new int[n + 1][2];\n        for (int i = 1; i <= n; i++) {\n            cnt[i][0] = cnt[i - 1][0];\n            cnt[i][1] = cnt[i - 1][1];\n            cnt[i][str[i - 1] - '0']++;\n        }\n        pos = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            int p = 1, q = i;\n            while (p < q) {\n                int mid = p + (q - p) / 2;\n                if (f(mid, i) > k)\n                    p = mid + 1;\n                else\n                    q = mid;\n            }\n            pos[i] = p;\n        }\n        long[] sum = new long[n + 1];\n        for (int i = 1; i <= n; i++)\n            sum[i] = sum[i - 1] + (i - pos[i] + 1);\n        int m = qs.length;\n        long[] ans = new long[m];\n        for (int i = 0; i < m; i++) {\n            int from = qs[i][0] + 1, to = qs[i][1] + 1;\n            long s = 0;\n            if (pos[to] < from) {\n                int len = to - from + 1;\n                s = 1L * (1 + len) * len / 2;\n            } else {\n                int p = from, q = to;\n                while (p < q) {\n                    int mid = p + (q - p) / 2;\n                    if (pos[mid] >= from)\n                        q = mid;\n                    else\n                        p = mid + 1;\n                }\n                int len = p - 1 - from + 1;\n                s = 1L * (1 + len) * len / 2 + sum[to] - sum[p - 1];\n            }\n            ans[i] = s;\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1723952423",
    "subm_id": "1359795937"
}