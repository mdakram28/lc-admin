{
    "username": "dgeyfman",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n    \n    def is_peak(self, i):\n        if i <= 0 or i >= self.n - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n    \n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            self.build(2 * node + 1, start, mid)\n            self.build(2 * node + 2, mid + 1, end)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def update(self, idx, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(idx) else 0\n        else:\n            mid = (start + end) // 2\n            if start <= idx <= mid:\n                self.update(idx, 2 * node + 1, start, mid)\n            else:\n                self.update(idx, 2 * node + 2, mid + 1, end)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query(self, l, r, node, start, end):\n        if r < start or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_query = self.query(l, r, 2 * node + 1, start, mid)\n        right_query = self.query(l, r, 2 * node + 2, mid + 1, end)\n        return left_query + right_query\n    \n    def handle_update(self, idx, val):\n        self.nums[idx] = val\n        affected_indices = {idx}\n        if idx > 0:\n            affected_indices.add(idx - 1)\n        if idx < self.n - 1:\n            affected_indices.add(idx + 1)\n        \n        for i in affected_indices:\n            self.update(i, 0, 0, self.n - 1)\n    \n    def handle_query(self, l, r):\n        if l == r:\n            return 0\n        return self.query(l + 1, r - 1, 0, 0, self.n - 1)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        seg_tree = SegmentTree(nums)\n        result = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                result.append(seg_tree.handle_query(li, ri))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                seg_tree.handle_update(indexi, vali)\n        return result",
    "submit_ts": 1718506998.0
}