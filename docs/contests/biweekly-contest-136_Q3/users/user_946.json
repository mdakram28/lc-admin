{
    "username": "lucasschnee2",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        M, N = len(grid), len(grid[0])\n        INF = 10 ** 20\n        overall_counts = []\n        \n        l, r = 0, M - 1\n        \n        while l < r:\n            counts = []\n            row1 = grid[l]\n            row2 = grid[r]\n                \n            ll, rr = 0, N - 1\n                   \n            while ll < rr:\n                c = [0] * 5\n                c_1 = row1[ll] + row2[ll] + row1[rr] + row2[rr]\n                \n                \n                c[0] = c_1 \n                c[1] = INF\n                c[2] = INF\n                c[3] = INF \n                c[4] = 4 - c_1  \n                \n                ll += 1\n                rr -= 1\n                \n                counts.append(c) \n                \n            if ll == rr:\n                c = [0] * 3\n                c_1 = row1[ll] + row2[ll]\n                c[0] = c_1  \n                c[1] = INF\n                c[2] = 2 - c_1\n                counts.append(c) \n                \n            overall_counts.append(counts)\n            l += 1\n            r -= 1\n        \n        if l == r:\n            row1 = grid[l]\n            counts = []\n            ll, rr = 0, N - 1\n            \n            while ll < rr:\n                c = [0] * 3\n                c_1 = row1[ll] + row1[rr]\n                c[0] = c_1 \n                c[1] = INF\n                c[2] = 2 - c_1\n                \n                ll += 1\n                rr -= 1\n                \n                counts.append(c) \n                \n            if ll == rr:\n                c = [0] * 2\n                c_1 = row1[ll]\n                c[0] = c_1  \n                c[1] = 1 - c_1  \n                \n                counts.append(c) \n            \n            overall_counts.append(counts)\n            \n        @lru_cache(None)\n        def calc(i, j, cur_ones):\n            if i == len(overall_counts):\n                \n                if cur_ones == 0:\n                    return 0\n                return INF\n            \n            if j == len(overall_counts[i]):\n                return calc(i + 1, 0, cur_ones)\n            \n            best = INF\n            \n            \n            for k in range(len(overall_counts[i][j])):\n                best = min(best, calc(i, j + 1, (cur_ones + k) % 4) + overall_counts[i][j][k])\n                \n            return best\n\n        result = calc(0, 0, 0)\n        \n\n        return result if result != INF else -1\n",
    "submit_ts": "1722698449",
    "subm_id": "1343180953"
}