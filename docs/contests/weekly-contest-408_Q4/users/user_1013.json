{
    "username": "SamChen856",
    "submission": "# similar: https://leetcode.com/problems/detonate-the-maximum-bombs/description/\n# https://leetcode.com/discuss/interview-question/1419362/Google-Phone-screen\n# https://leetcode.com/discuss/interview-question/1447784/Google-Phone-Interview\n\nclass Solution:\n    # dfs, time O(n^2), space O(n)\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n\n        G = defaultdict(list)\n        for i, (x1, y1, r1) in enumerate(circles):\n            for j, (x2, y2, r2) in enumerate(circles):\n                if i < j and (x1 - x2) ** 2 + (y1 - y2) ** 2 <= (r1 + r2) ** 2:\n                    G[i].append(j)\n                    G[j].append(i)\n\n        visited = set()\n        \n        def dfs(cur):\n            visited.add(cur)\n\n            x, y, r = circles[cur]\n            if x - r <= 0:\n                blocks[0] = 1\n            if x + r >= X:\n                blocks[1] = 1\n            if y - r <= 0:\n                blocks[2] = 1\n            if y + r >= Y:\n                blocks[3] = 1\n\n            for nxt in G[cur]:\n                if nxt not in visited:\n                    dfs(nxt)\n        \n        for i, (x, y, r) in enumerate(circles):\n            blocks = [0] * 4\n            if x - r <= 0 or x + r >= X or y - r <= 0 or y + r >= Y:\n                if x - r <= 0:\n                    blocks[0] = 1\n                if x + r >= X:\n                    blocks[1] = 1\n                if y - r <= 0:\n                    blocks[2] = 1\n                if y + r >= Y:\n                    blocks[3] = 1\n\n            dfs(i)\n            if blocks[0] == blocks[2] == 1 or blocks[1] == blocks[3] == 1 or blocks[0] == blocks[1] == 1 or blocks[2] == blocks[3] == 1:\n                return False\n\n        return True\n",
    "submit_ts": "1722138109",
    "subm_id": "1335782343"
}