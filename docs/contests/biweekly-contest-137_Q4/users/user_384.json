{
    "username": "CogentCoder73",
    "submission": "class Solution {\npublic:\n    struct T3 {\n        pair<long long, pair<int, int>> p1;\n        pair<long long, pair<int, int>> p2;\n        pair<long long, pair<int, int>> p3;\n        T3() {\n            p1 = {0, {0, 0}};\n            p2 = {0, {0, 0}};\n            p3 = {0, {0, 0}};\n        }\n    };\n    static bool comp1(const T3& a, const T3& b) {\n        return a.p1.first > b.p1.first;\n    }\n    static bool comp2(const T3& a, const T3& b) {\n        return a.p2.first > b.p2.first;\n    }\n    static bool comp3(const T3& a, const T3& b) {\n        return a.p3.first > b.p3.first;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<T3> top3(n);\n        int m1, i1, m2, i2, m3, i3;\n        for (int col = 0; col < n; col++) {\n            m1 = INT_MIN;\n            m2 = INT_MIN;\n            m3 = INT_MIN;\n            i1 = INT_MIN;\n            i2 = INT_MIN;\n            i3 = INT_MIN;\n            for (int row = 0; row < m; row++) {\n                if (board[row][col] >= m1) {\n                    m3 = m2;\n                    i3 = i2;\n                    m2 = m1;\n                    i2 = i1;\n                    m1 = board[row][col];\n                    i1 = row;\n                } else if (board[row][col] >= m2) {\n                    m3 = m2;\n                    i3 = i2;\n                    m2 = board[row][col];\n                    i2 = row;\n                } else if (board[row][col] >= m3) {\n                    m3 = board[row][col];\n                    i3 = row;\n                }\n            }\n            top3[col].p1 = {m1, {i1, col}};\n            top3[col].p2 = {m2, {i2, col}};\n            top3[col].p3 = {m3, {i3, col}};\n        }\n        int k = min(n, 9);\n        set<pair<long long, pair<int, int>>> check;\n        sort(top3.begin(), top3.end(), comp1);\n        for (int i = 0; i < k; i++) check.insert(top3[i].p1);\n        sort(top3.begin(), top3.end(), comp2);\n        for (int i = 0; i < k; i++) check.insert(top3[i].p2);\n        sort(top3.begin(), top3.end(), comp3);\n        for (int i = 0; i < k; i++) check.insert(top3[i].p3);\n        long long cur;\n        long long mx = LLONG_MIN;\n        for (pair<long long, pair<int, int>> p1 : check) {\n            // cout << p1.second.first << \", \" << p1.second.second << \": \" << p1.first << \"\\n\";\n            for (pair<long long, pair<int, int>> p2 : check) {\n                if (p1.second.second == p2.second.second || p1.second.first == p2.second.first) continue;\n                for (pair<long long, pair<int, int>> p3 : check) {\n                    if (p1.second.second == p3.second.second || p2.second.second == p3.second.second) continue;\n                    if (p1.second.first == p3.second.first || p2.second.first == p3.second.first) continue;\n                    cur = p1.first + p2.first + p3.first;\n                    if (cur > mx) mx = cur;\n                }\n            }\n        }\n        return mx;\n    }\n};",
    "submit_ts": "1723908219",
    "subm_id": "1359143301"
}