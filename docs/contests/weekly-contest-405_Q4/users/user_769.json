{
    "username": "omgupta20382038",
    "submission": "class TrieNode { \npublic: \n    unordered_map<char, TrieNode*> children; \n    int cost; \n     \n    TrieNode() : cost(INT_MAX) {} \n}; \n \nclass Trie { \npublic: \n    TrieNode* root; \n     \n    Trie() { \n        root = new TrieNode(); \n    } \n     \n    void insert( string& word, int wordCost) { \n        TrieNode* currentNode = root; \n        for (char character : word) { \n            if (!currentNode->children.count(character)) { \n                currentNode->children[character] = new TrieNode(); \n            } \n            currentNode = currentNode->children[character]; \n        } \n        currentNode->cost = min(currentNode->cost, wordCost); \n    } \n}; \n \nclass Solution { \npublic: \n    void processTrie(TrieNode* rootNode,  string& targetString, vector<int>& costArray, int startIndex, int stringLength) {\n        TrieNode* currentNode = rootNode;\n        for (int currentIndex = startIndex; currentIndex < stringLength; ++currentIndex)\n        {\n            if (!currentNode->children.count(targetString[currentIndex])) break;\n            currentNode = currentNode->children[targetString[currentIndex]];\n            if (currentNode->cost != INT_MAX) {\n                costArray[currentIndex + 1] = min(costArray[currentIndex + 1], costArray[startIndex] + currentNode->cost);\n            }\n        }\n    }\n\n    void insertWordsIntoTrie(Trie& trie,  vector<string>& wordList,  vector<int>& costList) {\n        for (int index = 0; index < wordList.size(); ++index) {\n            trie.insert(wordList[index], costList[index]);\n        }\n    }\n\n    int minimumCost(string target, vector<string>& wordList, vector<int>& costList) {\n        int targetLength = target.size();\n        Trie trie;\n\n        insertWordsIntoTrie(trie, wordList, costList);\n\n        vector<int> costArray(targetLength + 1, INT_MAX);\n        costArray[0] = 0;\n\n        for (int index = 0; index < targetLength; ++index) {\n            if (costArray[index] == INT_MAX) continue;\n            processTrie(trie.root, target, costArray, index, targetLength);\n        }\n\n        return costArray[targetLength] == INT_MAX ? -1 : costArray[targetLength];\n    }\n};\n",
    "submit_ts": "1720323135",
    "subm_id": "1312368161"
}