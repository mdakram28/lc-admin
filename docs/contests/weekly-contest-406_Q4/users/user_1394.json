{
    "username": "jjsiddhant03",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n       // Sort both cuts in descending order to maximize the pieces affected by each cut\n    sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    int hIndex = 0, vIndex = 0;\n    long long horizontalPieces = 1, verticalPieces = 1;\n    long long totalCost = 0;\n\n    // Use a greedy approach to always perform the most expensive cut next\n    while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n        if (horizontalCut[hIndex] > verticalCut[vIndex]) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            horizontalPieces++;\n            hIndex++;\n        } else {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            verticalPieces++;\n            vIndex++;\n        }\n    }\n\n    // Add remaining horizontal cuts if any\n    while (hIndex < horizontalCut.size()) {\n        totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n        horizontalPieces++;\n        hIndex++;\n    }\n\n    // Add remaining vertical cuts if any\n    while (vIndex < verticalCut.size()) {\n        totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n        verticalPieces++;\n        vIndex++;\n    }\n\n    return totalCost;\n        \n    }\n};",
    "submit_ts": "1720925928",
    "subm_id": "1320270649"
}