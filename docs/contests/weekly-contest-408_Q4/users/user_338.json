{
    "username": "drebelsky",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # if any left circle touches any right circle, we can not make it\n        # if any top circle touches any bottom circle, we can not make it\n        # we can dsu the circles and see if any component blocks us\n        rep = {i: i for i in range(len(circles))}\n        size = {i: 1 for i in range(len(circles))}\n        x_min = {i: x - r for i, (x, y, r) in enumerate(circles)}\n        y_min = {i: y - r for i, (x, y, r) in enumerate(circles)}\n        x_max = {i: x + r for i, (x, y, r) in enumerate(circles)}\n        y_max = {i: y + r for i, (x, y, r) in enumerate(circles)}\n        def find(node):\n            if rep[node] != node:\n                rep[node] = find(rep[node])\n            return rep[node]\n        def union(a, b):\n            a = find(a)\n            b = find(b)\n            if a == b:\n                return\n            if size[a] < size[b]:\n                a, b = b, a\n            size[a] += size[b]\n            x_min[a] = min(x_min[a], x_min[b])\n            y_min[a] = min(y_min[a], y_min[b])\n            x_max[a] = max(x_max[a], x_max[b])\n            y_max[a] = max(y_max[a], y_max[b])\n            rep[b] = a\n        for i, (x1, y1, r1) in enumerate(circles):\n            for j, (x2, y2, r2) in enumerate(circles):\n                dist = (x2 - x1) ** 2 + (y2 - y1) ** 2\n                if dist <= (r1 + r2)**2:\n                    union(i, j)\n        for i in range(len(circles)):\n            if rep[i] != i:\n                continue\n            left = x_min[i] <= 0\n            right = x_max[i] >= X\n            bot = y_min[i] <= 0\n            top = y_max[i] >= Y\n            if left and (right or bot):\n                return False\n            if top and (right or bot):\n                return False\n        return True",
    "submit_ts": "1722135854",
    "subm_id": "1335715692"
}