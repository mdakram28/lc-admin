{
    "username": "leat14536",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        mx1 = []\n        mn1 = []\n\n        mx2 = []\n        mn2 = []\n\n        for i, (x, y) in enumerate(points):\n            heapq.heappush(mx1, (-(x + y), i))\n            heapq.heappush(mn1, (x + y, i))\n\n            heapq.heappush(mx2, (-(x - y), i))\n            heapq.heappush(mn2, (x - y, i))\n        ans = inf\n\n        # print(-mx1[0][0] - mn1[0][0], -mx2[0][0] - mn2[0][0])\n\n        for i, (x, y) in enumerate(points):\n            v1, v2, v3, v4 = -mx1[0][0], mn1[0][0], -mx2[0][0], mn2[0][0]\n            if mx1[0][1] == i:\n                c = heapq.heappop(mx1)\n                v1 = -mx1[0][0]\n                heapq.heappush(mx1, c)\n            if mn1[0][1] == i:\n                c = heapq.heappop(mn1)\n                v2 = mn1[0][0]\n                heapq.heappush(mn1, c)\n            if mx2[0][1] == i:\n                c = heapq.heappop(mx2)\n                v3 = -mx2[0][0]\n                heapq.heappush(mx2, c)\n            if mn2[0][1] == i:\n                c = heapq.heappop(mn2)\n                v4 = mn2[0][0]\n                heapq.heappush(mn2, c)\n            ans = min(ans, max(v1 - v2, v3 - v4))\n        return ans\n"
}