{
    "username": "hustler11",
    "submission": "class Solution {\npublic:\n    class TrieNode{\n        public:\n        TrieNode* childNode[26];\n        bool wordEnd;\n        int cost;\n\n        TrieNode() {\n            wordEnd = false;\n            cost = INT_MAX;\n            for (int i = 0; i < 26; i++) {\n                childNode[i] = NULL;\n            }\n        }\n    };\n\n    void insert(TrieNode* root, string& key, int c){\n        TrieNode* currentNode = root;\n        for (auto c : key) {\n            if (currentNode->childNode[c - 'a'] == NULL)\n                currentNode->childNode[c - 'a'] = new TrieNode();\n            currentNode = currentNode->childNode[c - 'a'];\n        }\n        currentNode->cost = min(c, currentNode->cost);\n        currentNode->wordEnd = 1;\n    }\n\n    int solve(int i, int n, int k,string &t,vector<pair<string, int>> &w,vector<int> &dp){\n\n        if(i==k){\n            return 0;\n        }\n        if(dp[i]!=-1)\n            return dp[i];\n\n        int mn = 1e9;\n        for(auto &[str, val]: w){\n            if(str[0]>t[i])\n                break;\n            if(str[0]==t[i]){\n                int j=i+1, l=1;\n                while(j<k && l<str.size() && str[l]==t[j])\n                    j++, l++;\n                if(l==str.size()){\n                    int tmp = solve(j, n, k, t, w, dp);\n                    mn = min(mn, val + tmp);\n                }\n            }\n        }\n        return dp[i] = mn;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        int n = words.size(), k = target.size();\n        vector<int> dp(k+1, INT_MAX);\n        TrieNode* tr = new TrieNode;\n        for (int i = 0; i < n; i++) {\n            insert(tr, words[i], costs[i]);\n        }\n        \n        dp[0] = 0;\n        for (int i = 0; i < k; i++) {\n            if (dp[i]!=INT_MAX){\n                TrieNode* node = tr;\n                for (int j = i; j < k; ++j) {\n                    if (node->childNode[target[j]-'a']){\n                        node = node->childNode[target[j]-'a'];\n                        if (node->cost != INT_MAX)\n                            dp[j+1] = min(dp[j+1], dp[i]+node->cost);\n                    }\n                    else \n                    break;\n                }\n            }\n        }\n        \n        if(dp[k]==INT_MAX)\n            dp[k] = -1;\n        return dp[k];\n    }\n};",
    "submit_ts": "1720324703",
    "subm_id": "1312405946"
}