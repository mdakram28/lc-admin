{
    "username": "pranay360",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1, edges2):\n        graphSize1 = len(edges1) + 1\n        graphSize2 = len(edges2) + 1\n\n        adjacencyList1 = [[] for _ in range(graphSize1)]\n        adjacencyList2 = [[] for _ in range(graphSize2)]\n\n        idx = 0\n        while idx < len(edges1):\n            edge = edges1[idx]\n            adjacencyList1[edge[0]].append(edge[1])\n            adjacencyList1[edge[1]].append(edge[0])\n            idx += 1\n\n        idx = 0\n        while idx < len(edges2):\n            edge = edges2[idx]\n            adjacencyList2[edge[0]].append(edge[1])\n            adjacencyList2[edge[1]].append(edge[0])\n            idx += 1\n\n        def doDFS(graph, root):\n            totalNodes = len(graph)\n            dist = [-1] * totalNodes\n            maxDistNode = root\n\n            def visitNodeTraversal(node, distValue):\n                nonlocal maxDistNode\n                dist[node] = distValue\n                if distValue > dist[maxDistNode]:\n                    maxDistNode = node\n                neighborIdx = 0\n                while neighborIdx < len(graph[node]):\n                    if dist[graph[node][neighborIdx]] == -1:\n                        visitNodeTraversal(graph[node][neighborIdx], distValue + 1)\n                    neighborIdx += 1\n\n            visitNodeTraversal(root, 0)\n            return maxDistNode, dist[maxDistNode]\n\n        initialNode1, _ = doDFS(adjacencyList1, 0)\n        d1 = doDFS(adjacencyList1, initialNode1)[1]\n\n        initialNode2, _ = doDFS(adjacencyList2, 0)\n        d2 = doDFS(adjacencyList2, initialNode2)[1]\n\n        smallestDiameter = max(d1, d2)\n        mid1 = (d1 + 1) // 2\n        mid2 = (d2 + 1) // 2\n\n        smallestDiameter = max(smallestDiameter, mid1 + mid2 + 1)\n        return smallestDiameter\n",
    "submit_ts": "1719719403",
    "subm_id": "1304441138"
}