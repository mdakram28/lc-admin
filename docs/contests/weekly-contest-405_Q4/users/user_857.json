{
    "username": "anandind",
    "submission": "class Trie {\npublic:\n    vector<pair<int, int>> wi;\n    map<char, Trie*> next;\n};\n\nclass TrieNode {\npublic:\n    Trie* root;\n    void build() {\n        root = new Trie();\n    }\n    void update(string& word, int index) {\n        Trie* cur = root;\n        for (char c : word) {\n            if (!cur->next.count(c))\n                cur->next[c] = new Trie();\n            cur = cur->next[c];\n        }\n        int length = word.size();\n        cur->wi.push_back({index, length});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        TrieNode trie;\n        trie.build();\n        int len = t.length();\n        vector<int> dp(len + 1, 1e9);\n        dp[0] = 0;\n        int ww = w.size();\n        for (int i = 0; i < ww; ++i) {\n            trie.update(w[i], i);\n        }\n\n        for (int i = 0; i < len; ++i) {\n            if (dp[i] == 1e9) continue;\n            Trie* curNode = trie.root;\n            for (int j = i; j < len; ++j) {\n                if (curNode->next.count(t[j])) {\n                    curNode = curNode->next[t[j]];\n                    for (auto& it : curNode->wi) {\n                        int wI = it.first, wL = it.second;\n                        if (j + 1 >= i + wL) {\n                            dp[j + 1] = min(dp[j + 1], dp[i] + c[wI]);\n                        }\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        return dp[len] == 1e9 ? -1 : dp[len];\n    }\n};\n",
    "submit_ts": "1720322387",
    "subm_id": "1312348557"
}