{
    "username": "gred0216",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        long long h_segment = 1, v_segment = 1;\n        long long totalCost = 0;\n        sort(horizontalCut.begin(), horizontalCut.end());\n        sort(verticalCut.begin(), verticalCut.end());\n\n        while(horizontalCut.size() > 0 && verticalCut.size() > 0) {\n            int h_cut = horizontalCut.back();\n            int v_cut = verticalCut.back();\n\n            if(h_cut * v_segment + v_cut * (h_segment + 1) > h_cut * (v_segment + 1) + v_cut * h_segment) {\n                // We should choose v_cut first\n                totalCost += v_cut * h_segment;\n                v_segment += 1;\n                verticalCut.pop_back();\n            }\n            else {\n                totalCost += h_cut * v_segment;\n                h_segment += 1;\n                horizontalCut.pop_back();\n            }\n        }\n\n        while(horizontalCut.size() > 0) {\n            totalCost += horizontalCut.back() * v_segment;\n            horizontalCut.pop_back();\n        }\n\n        while(verticalCut.size() > 0) {\n            totalCost += verticalCut.back() * h_segment;\n            verticalCut.pop_back();\n        }\n\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926612",
    "subm_id": "1320291266"
}