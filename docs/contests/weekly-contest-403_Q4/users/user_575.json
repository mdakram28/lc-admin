{
    "username": "BimmyBoi123",
    "submission": "class Solution {\n    int[][] dp;\n    int[][] grid;\n    int ans;\n\n    boolean intersect(int i, int j, int[] l, int[] r, int[] t, int[] b) {\n        if (r[i] == -1 || r[j] == -1)\n            return false;\n\n        int xInt = Math.max(Math.min(r[i], r[j]) - Math.max(l[i], l[j]) + 1, 0);\n        int yInt = Math.max(Math.min(b[i], b[j]) - Math.max(t[i], t[j]) + 1, 0);\n        return xInt * yInt > 0;\n    }\n\n    int totalArea(int[] l, int[] r, int[] t, int[] b) {\n        int area = 0;\n        for (int i = 0; i < 3; i++)\n            area += (r[i] - l[i] + 1) * (b[i] - t[i] + 1);\n        return area;\n    }\n\n    void recurse(int square, int[] l, int[] r, int[] t, int[] b) {\n        if (square == grid.length * grid[0].length) {\n            if (r[0] != -1 && r[1] != -1 && r[2] != -1) {\n                ans = Math.min(ans, totalArea(l, r, t, b));\n                if (totalArea(l, r, t, b) == 33) {\n                    for (int i : l)\n                        System.out.print(i + \" \");\n                    System.out.println();\n                    for (int i : r)\n                        System.out.print(i + \" \");\n                    System.out.println();\n                    for (int i : t)\n                        System.out.print(i + \" \");\n                    System.out.println();\n                    for (int i : b)\n                        System.out.print(i + \" \");\n                    System.out.println();\n                }\n            }\n            return;\n        }\n\n        int row = square / grid[0].length;\n        int col = square % grid[0].length;\n\n        if (grid[row][col] == 0) {\n            recurse(square + 1, l, r, t, b);\n            return;\n        }\n\n        for (int i = 0; i < 3; i++) {\n            int prevL = l[i];\n            int prevR = r[i];\n            int prevT = t[i];\n            int prevB = b[i];\n\n            l[i] = Math.min(l[i], col);\n            r[i] = Math.max(r[i], col);\n            t[i] = Math.min(t[i], row);\n            b[i] = Math.max(b[i], row);\n\n            if (!intersect(i, (i + 1) % 3, l, r, t, b) && !intersect(i, (i + 2) % 3, l, r, t, b))\n                recurse(square + 1, l, r, t, b);\n\n            l[i] = prevL;\n            r[i] = prevR;\n            t[i] = prevT;\n            b[i] = prevB;\n        }\n    }\n\n    public int minimumSum(int[][] grid) {\n        dp = new int[grid.length][grid[0].length];\n        this.grid = grid;\n        ans = grid.length * grid[0].length;\n        int[] l = new int[] { 300, 300, 300 };\n        int[] r = new int[] { -1, -1, -1 };\n        int[] t = new int[] { 300, 300, 300 };\n        int[] b = new int[] { -1, -1, -1 };\n\n        recurse(0, l, r, t, b);\n\n        return ans;\n    }\n}",
    "submit_ts": 1719114608.0
}