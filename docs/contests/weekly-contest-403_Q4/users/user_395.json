{
    "username": "lucifer1006",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n\n        left = [[[[m] * m for _ in range(m)]\n                 for _ in range(n)] for _ in range(n)]\n        right = [[[[-1] * m for _ in range(m)]\n                  for _ in range(n)] for _ in range(n)]\n        top = [[[[n] * m for _ in range(m)]\n                for _ in range(n)] for _ in range(n)]\n        bottom = [[[[-1] * m for _ in range(m)]\n                   for _ in range(n)] for _ in range(n)]\n\n        for i in range(n):\n            for j in range(m):\n                for p in range(i, n):\n                    for q in range(j, m):\n                        if p > i:\n                            left[i][p][j][q] = left[i][p - 1][j][q]\n                            right[i][p][j][q] = right[i][p - 1][j][q]\n                            top[i][p][j][q] = top[i][p - 1][j][q]\n                            bottom[i][p][j][q] = bottom[i][p - 1][j][q]\n                        if q > j:\n                            left[i][p][j][q] = min(\n                                left[i][p][j][q], left[i][p][j][q - 1])\n                            right[i][p][j][q] = max(\n                                right[i][p][j][q], right[i][p][j][q - 1])\n                            top[i][p][j][q] = min(\n                                top[i][p][j][q], top[i][p][j][q - 1])\n                            bottom[i][p][j][q] = max(\n                                bottom[i][p][j][q], bottom[i][p][j][q - 1])\n\n                        if grid[p][q] == 1:\n                            left[i][p][j][q] = min(left[i][p][j][q], q)\n                            right[i][p][j][q] = q\n                            top[i][p][j][q] = min(top[i][p][j][q], p)\n                            bottom[i][p][j][q] = p\n\n        one = [[[[0] * m for _ in range(m)]\n                for _ in range(n)] for _ in range(n)]\n        for i in range(n):\n            for j in range(m):\n                for p in range(i, n):\n                    for q in range(j, m):\n                        l = left[i][p][j][q]\n                        r = right[i][p][j][q]\n                        t = top[i][p][j][q]\n                        b = bottom[i][p][j][q]\n                        if l > r or t > b:\n                            one[i][p][j][q] = -1\n                        else:\n                            one[i][p][j][q] = (r - l + 1) * (b - t + 1)\n                            \n        colspan = [[n * m] * m for _ in range(m)]\n        for l in range(m):\n            for r in range(l, m):\n                for mid in range(1, n):\n                    if one[0][mid - 1][l][r] == -1 or one[mid][n - 1][l][r] == -1:\n                        continue\n                    colspan[l][r] = min(colspan[l][r], one[0]\n                                        [mid - 1][l][r] + one[mid][n - 1][l][r])\n\n                for mid in range(l + 1, r + 1):\n                    if one[0][n - 1][l][mid - 1] == -1 or one[0][n - 1][mid][r] == -1:\n                        continue\n                    colspan[l][r] = min(colspan[l][r], one[0]\n                                        [n - 1][l][mid - 1] + one[0][n - 1][mid][r])\n\n        rowspan = [[n * m] * n for _ in range(n)]\n        for t in range(n):\n            for b in range(t, n):\n                for mid in range(1, m):\n                    if one[t][b][0][mid - 1] == -1 or one[t][b][mid][m - 1] == -1:\n                        continue\n                    rowspan[t][b] = min(rowspan[t][b], one[t]\n                                        [b][0][mid - 1] + one[t][b][mid][m - 1])\n                for mid in range(t + 1, b + 1):\n                    if one[t][mid - 1][0][m - 1] == -1 or one[mid][b][0][m - 1] == -1:\n                        continue\n                    rowspan[t][b] = min(rowspan[t][b], one[t]\n                                        [mid - 1][0][m - 1] + one[mid][b][0][m - 1])\n\n        ans = n * m\n        for mid in range(1, m):\n            if one[0][n - 1][mid][m - 1] != -1:\n                ans = min(ans, colspan[0][mid - 1] + one[0][n - 1][mid][m - 1])\n            if one[0][n - 1][0][mid - 1] != -1:\n                ans = min(ans, colspan[mid][m - 1] + one[0][n - 1][0][mid - 1])\n\n        for mid in range(1, n):\n            if one[mid][n - 1][0][m - 1] != -1:\n                ans = min(ans, rowspan[0][mid - 1] + one[mid][n - 1][0][m - 1])\n            if one[0][mid - 1][0][m - 1] != -1:\n                ans = min(ans, rowspan[mid][n - 1] + one[0][mid - 1][0][m - 1])\n\n        return ans\n",
    "submit_ts": 1719113956.0
}