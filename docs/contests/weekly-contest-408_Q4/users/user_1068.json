{
    "username": "Tanguilol",
    "submission": "class Solution {\n    \n    private final double FLUFF = 0.00000001;\n    \n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        List<Set<Integer>> groups = new ArrayList<>();\n        Map<Integer, Set<Integer>> groupMap = new HashMap<>();\n        \n        for (int i = 0; i < circles.length; i++) {\n            Set<Integer> group = groupMap.computeIfAbsent(i, k -> new HashSet<>());\n            boolean newGroup = false;\n            \n            if (group.isEmpty()) {\n                newGroup = true;\n            }\n            \n            group.add(i);\n            \n            for (int j = i + 1; j < circles.length; j++) {\n                if (groupMap.get(j) == group) {\n                    continue;\n                }\n                \n                if (circlesCollide(circles[i][0], circles[i][1], circles[i][2], circles[j][0], circles[j][1], circles[j][2])) {\n                    Set<Integer> otherGroup = groupMap.get(j);\n                    if (otherGroup == null) {\n                        group.add(j);\n                        groupMap.put(j, group);\n                        \n                    } else {\n                        for (Integer k : group) {\n                            groupMap.put(k, otherGroup);\n                        }\n                        \n                        otherGroup.addAll(group);\n                        group = otherGroup;\n                        newGroup = false;\n                    }\n                }\n            }\n            \n            if (newGroup) {\n                groups.add(group);\n            }\n        }\n        \n        System.out.println(groups);\n        \n        for (Set<Integer> group : groups) {\n            boolean top = false;\n            boolean bottom = false;\n            boolean left = false;\n            boolean right = false;\n            \n            for (Integer c : group) {\n                top |= top(circles[c][0], circles[c][1], circles[c][2], X, Y);\n                bottom |= bottom(circles[c][0], circles[c][1], circles[c][2], X, Y);\n                left |= left(circles[c][0], circles[c][1], circles[c][2], X, Y);\n                right |= right(circles[c][0], circles[c][1], circles[c][2], X, Y);\n            }\n            \n            //System.out.println(top + \" \" + bottom + \" \" + left + \" \" + right);\n            \n            if (top && right) {\n                return false;\n            }\n            \n            if (bottom && left) {\n                return false;\n            }\n            \n            if (top && bottom) {\n                return false;\n            }\n            \n            if (left && right) {\n                return false;\n            }\n        }\n        \n        return true;\n    }\n    \n    private boolean circlesCollide(int x1, int y1, int r1, int x2, int y2, int r2) {\n        return r1 + r2 + FLUFF >= distance(x1, y1, x2, y2);\n    }\n    \n    private boolean top(int cx, int cy, int cr, int X, int Y) {\n        if (cx > X) {        \n            return cr + FLUFF >= distance(cx, cy, X, Y);\n        } else {\n            return cr + FLUFF >= distance(cx, cy, cx, Y);\n        }\n    }\n    \n    private boolean bottom(int cx, int cy, int cr, int X, int Y) {\n        if (cx > X) {        \n            return cr + FLUFF >= distance(cx, cy, X, 0);\n        } else {\n            return cr + FLUFF >= distance(cx, cy, cx, 0);\n        }\n    }\n    \n    private boolean right(int cx, int cy, int cr, int X, int Y) {\n        if (cy > Y) {        \n            return cr + FLUFF >= distance(cx, cy, X, Y);\n        } else {\n            return cr + FLUFF >= distance(cx, cy, X, cy);\n        }\n    }\n    \n    private boolean left(int cx, int cy, int cr, int X, int Y) {\n        if (cy > Y) {        \n            return cr + FLUFF >= distance(cx, cy, 0, Y);\n        } else {\n            return cr + FLUFF >= distance(cx, cy, 0, cy);\n        }\n    }\n    \n    private double distance(int x1, int y1, int x2, int y2) {\n        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));\n    }\n    \n}",
    "submit_ts": "1722138708",
    "subm_id": "1335797653"
}