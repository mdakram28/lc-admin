{
    "username": "wangdh15",
    "submission": "class Solution {\npublic:\n    \n    struct Node {\n        int l, r;\n        int val;\n    };\n    \n    static constexpr int N = 100005;\n    Node tr[N << 2];\n    vector<int> nums;\n    int n;\n    \n    void build(int u, int l, int r) {\n        tr[u] = {l, r, 0};\n        if (l == r) {\n            if (l - 1 >= 0 && l + 1 < n) {\n                tr[u].val = nums[l] > nums[l-1] && nums[l] > nums[l+1];\n            }\n            return;\n        }\n        int mid = l + r >> 1;\n        build(u << 1, l, mid);\n        build(u << 1 | 1, mid + 1, r);\n        tr[u].val = tr[u<<1].val + tr[u<<1|1].val;\n    }\n    \n    \n    void modify(int u, int loc, int x) {\n        if (tr[u].l == tr[u].r) {\n            tr[u].val = x;\n            return;\n        } else {\n            int mid = tr[u].l + tr[u].r >> 1;\n            if (loc <= mid) modify(u << 1, loc, x);\n            else modify(u << 1 | 1, loc, x);\n            tr[u].val = tr[u<<1].val + tr[u<<1|1].val;\n        }\n    }\n    \n    int query(int u, int l, int r) {\n        if (tr[u].l >= l && tr[u].r <= r) return tr[u].val;\n        int mid = tr[u<<1].r;\n        int ans = 0;\n        if (l <= mid) ans += query(u << 1, l, r);\n        if (r > mid) ans += query(u << 1 | 1, l, r);\n        return ans;\n    }\n    \n    vector<int> countOfPeaks(vector<int>& ns, vector<vector<int>>& queries) {\n        nums = std::move(ns);\n        n = nums.size();\n        vector<int> ans;\n        build(1, 0, n - 1);\n        for (auto& x : queries) {\n            if (x[0] == 1) {\n                if (x[1] + 1 <= x[2] - 1) ans.push_back(query(1, x[1] + 1, x[2] - 1));\n                else ans.push_back(0);\n            } else {\n                if (x[1] - 2 >= 0) {\n                    int idx = x[1] - 1;\n                    int old = nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n                    int nnew = nums[idx] > nums[idx - 1] && nums[idx] > x[2];\n                    if (old != nnew) modify(1, idx, nnew);\n                }\n                if (x[1] + 2 < n) {\n                    int idx = x[1] + 1;\n                    int old = nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n                    int nnew = nums[idx] > x[2] && nums[idx] > nums[idx + 1];\n                    if (old != nnew) modify(1, idx, nnew);\n                }\n                if (x[1] - 1 >= 0 && x[1] + 1 < n) {\n                    int idx = x[1];\n                    int old = nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n                    int nnew = x[2] > nums[idx - 1] && x[2] > nums[idx + 1];\n                    if (old != nnew) modify(1, idx, nnew);\n                }\n                nums[x[1]] = x[2];\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507907.0
}