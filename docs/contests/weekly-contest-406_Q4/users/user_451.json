{
    "username": "Vito123",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a combined list of all cuts with their type (0 for horizontal, 1 for vertical)\n        vector<pair<int, int>> cuts;\n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            cuts.emplace_back(horizontalCut[i], 0);\n        }\n        for (int j = 0; j < verticalCut.size(); ++j) {\n            cuts.emplace_back(verticalCut[j], 1);\n        }\n\n        // Sort the cuts in descending order of cost\n        sort(cuts.rbegin(), cuts.rend());\n\n        // Initialize counters for the number of segments\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long long result = 0;\n\n        // Process each cut\n        for (const auto& cut : cuts) {\n            if (cut.second == 0) { // Horizontal cut\n                result += (long long)cut.first * verticalPieces;\n                horizontalPieces++;\n            } else { // Vertical cut\n                result += (long long)cut.first * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1720925235",
    "subm_id": "1320247697"
}