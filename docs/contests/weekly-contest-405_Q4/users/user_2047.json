{
    "username": "hg585",
    "submission": "class TrieNode {\n    constructor() {\n        this.children = {};\n        this.costs = [];\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.root = new TrieNode();\n    }\n\n    insert(word, cost) {\n        let node = this.root;\n        for (let char of word) {\n            if (!node.children[char]) {\n                node.children[char] = new TrieNode();\n            }\n            node = node.children[char];\n        }\n        node.costs.push(cost);\n    }\n\n    search(target, start) {\n        let node = this.root;\n        const results = [];\n        for (let i = start; i < target.length; i++) {\n            if (!node.children[target[i]]) break;\n            node = node.children[target[i]];\n            if (node.costs.length > 0) {\n                for (let cost of node.costs) {\n                    results.push([i + 1, cost]);\n                }\n            }\n        }\n        return results;\n    }\n}\n\n/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost = function(target, words, costs) {\n    const n = target.length;\n    const trie = new Trie();\n    \n    // Insert words and their costs into the trie\n    for (let i = 0; i < words.length; i++) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    const dp = new Array(n + 1).fill(Infinity);\n    dp[0] = 0;\n\n    for (let i = 0; i < n; i++) {\n        if (dp[i] === Infinity) continue;\n        \n        const matches = trie.search(target, i);\n        for (const [end, cost] of matches) {\n            dp[end] = Math.min(dp[end], dp[i] + cost);\n        }\n    }\n\n    return dp[n] === Infinity ? -1 : dp[n];\n};\n\n// Example usage\nconsole.log(minimumCost(\"abcdef\", [\"abdef\", \"abc\", \"d\", \"def\", \"ef\"], [100, 1, 1, 10, 5])); // Output: 7\nconsole.log(minimumCost(\"aaaa\", [\"z\", \"zz\", \"zzz\"], [1, 10, 100])); // Output: -1\n",
    "submit_ts": "1720320221",
    "subm_id": "1312287209"
}