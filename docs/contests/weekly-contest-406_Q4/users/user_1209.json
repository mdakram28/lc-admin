{
    "username": "Aryansh_812",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        long long totalCost = 0;\n        int horizontalSegments = 1; // Initially we have 1 horizontal segment\n        int verticalSegments = 1;   // Initially we have 1 vertical segment\n\n        int hIndex = 0;\n        int vIndex = 0;\n\n        // While there are still cuts to be made\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            // If the next horizontal cut is more expensive, make a horizontal\n            // cut\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) *\n                             verticalSegments;\n                horizontalSegments++;\n                hIndex++;\n            } else { // Otherwise, make a vertical cut\n                totalCost += static_cast<long long>(verticalCut[vIndex]) *\n                             horizontalSegments;\n                verticalSegments++;\n                vIndex++;\n            }\n        }\n\n        // If there are still horizontal cuts left\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) *\n                         verticalSegments;\n            hIndex++;\n        }\n\n        // If there are still vertical cuts left\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) *\n                         horizontalSegments;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926122",
    "subm_id": "1320276652"
}