{
    "username": "minotaurking",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.cost = 0\n\nclass Trie:\n    def __init__(self):\n        \"\"\"\n        init TRIE \n        \"\"\"\n        self.root = TrieNode()\n        self.current = self.root\n\n    def insert(self, word: str, cost) -> None:\n        \"\"\"\n        insert word into TRIE\n        \"\"\"\n        current = self.root\n        for letter in word:\n            current = current.children[letter]\n        if current.cost == 0:\n            current.cost = cost\n        else:\n            current.cost = min(current.cost, cost)\n\n    def search(self, c) -> int:\n        current = self.current.children.get(c)\n        if current is None:\n            return -1\n        self.current = current\n        return current.cost\n\n    def clear(self):\n        self.current = self.root\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n\n        res = [2 ** 31 - 1] * (len(target) + 1)\n        res[0] = 0\n        start = [0] * len(target)\n        start[0] = 1\n        for i in range(len(target)):\n            if start[i] == 0:\n                continue\n            trie.clear()\n            for j in range(i, len(target)):\n                cost = trie.search(target[j])\n                if cost == -1:\n                    break\n                if cost == 0:\n                    continue\n                res[j + 1] = min(res[j + 1], res[i] + cost)\n                if j < len(target) - 1:\n                    start[j+1] = 1\n        if res[-1] == 2 ** 31 - 1:\n            return -1\n        return res[-1]",
    "submit_ts": "1720324450",
    "subm_id": "1312399785"
}