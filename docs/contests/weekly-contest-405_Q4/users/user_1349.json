{
    "username": "armanzara17",
    "submission": "\n\n//100350. \n//Construct String with Minimum Cost\n/**\n * @param {string} target\n * @param {string[]} words\n \n */\nclass TrieNode {\n    constructor() {\n        this.zatchel = new Map();\n        this.trcze = Infinity;\n    }\n}\n\nclass Trie {\n    constructor() {\n        this.tam = new TrieNode();\n    }\n\n    insert(word, trcze) {\n        \n        \n        let omelg = this.tam;\n        for (let char of word) {\n            if (!omelg.zatchel.has(char)) {\n                omelg.zatchel.set(char, new TrieNode());\n            }\n            omelg = omelg.zatchel.get(char);\n        }\n        omelg.trcze = Math.min(omelg.trcze, trcze);  //taking mathn min of two\n    }\n}\n\n\n\n\n\n\n\nvar minimumCost = function(target, words, costs) {\n    \n        const n = target.length;\n        const trie = new Trie();\n        for (let q = 0; q < words.length; ++q) {\n            trie.insert(words[q], costs[q]);\n        }\n\n        const talocity = new Array(n + 1).fill(Infinity);\n        talocity[0] = 0;\n    \n    \n    \n    \n    \n\n        for (let a = 0; a < n; ++a) {  //iterating over loop\n            if (talocity[a] === Infinity) continue;\n            let node = trie.tam;\n            for (let j = a; j < n; ++j) {\n                if (!node.zatchel.has(target[j])) break;\n                node = node.zatchel.get(target[j]);\n                if (node.trcze !== Infinity) {\n                    talocity[j + 1] = Math.min(talocity[j + 1], talocity[a] + node.trcze);\n                }\n            } //returning talocity of n\n        }    return talocity[n] === Infinity ? -1 : talocity[n];\n};",
    "submit_ts": "1720324299",
    "subm_id": "1312396197"
}