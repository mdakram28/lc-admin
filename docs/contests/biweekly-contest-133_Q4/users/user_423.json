{
    "username": "Yuvraj_Tiwary",
    "submission": "// // +98-97-1\n\n\n\n\n\n\n\n\n\n\n\n /*...................................................................*\n  *............___..................___.....____...______......___....*\n  *.../|....../...\\........./|...../...\\...|.............|..../...\\...*\n  *../.|...../.....\\......./.|....|.....|..|.............|.../........*\n  *....|....|.......|...../..|....|.....|..|............/...|.........*\n  *....|....|.......|..../...|.....\\___/...|___......../....|..___....*\n  *....|....|.......|.../....|...../...\\.......\\....../.....|./...\\...*\n  *....|....|.......|../_____|__..|.....|.......|..../......|/.....\\..*\n  *....|.....\\...../.........|....|.....|.......|.../........\\...../..*\n  *..__|__....\\___/..........|.....\\___/...\\___/.../..........\\___/...*\n  *...................................................................*\n  */\n\n\n\n// /*\n\n// #line 1 \"/home/maspy/compro/library/my_template.hpp\"\n// #if defined(LOCAL)\n// #include <my_template_compiled.hpp>\n// #else\n\n// // https://codeforces.com/blog/entry/96344\n// #pragma GCC optimize(\"Ofast,unroll-loops\")\n// // \u3044\u307e\u306e CF \u3060\u3068\u3053\u308c\u5165\u308c\u308b\u3068\u52d5\u304b\u306a\u3044\uff1f\n// // #pragma GCC target(\"avx2,popcnt\")\n\n// #include <bits/stdc++.h>\n\n// using namespace std;\n\n// using ll = long long;\n// using u32 = unsigned int;\n// using u64 = unsigned long long;\n// using i128 = __int128;\n// using u128 = unsigned __int128;\n// using f128 = __float128;\n\n// template <class T>\n// constexpr T infty = 0;\n// template <>\n// constexpr int infty<int> = 1'000'000'000;\n// template <>\n// constexpr ll infty<ll> = ll(infty<int>) * infty<int> * 2;\n// template <>\n// constexpr u32 infty<u32> = infty<int>;\n// template <>\n// constexpr u64 infty<u64> = infty<ll>;\n// template <>\n// constexpr i128 infty<i128> = i128(infty<ll>) * infty<ll>;\n// template <>\n// constexpr double infty<double> = infty<ll>;\n// template <>\n// constexpr long double infty<long double> = infty<ll>;\n\n// using pi = pair<ll, ll>;\n// using vi = vector<ll>;\n// template <class T>\n// using vc = vector<T>;\n// template <class T>\n// using vvc = vector<vc<T>>;\n// template <class T>\n// using vvvc = vector<vvc<T>>;\n// template <class T>\n// using vvvvc = vector<vvvc<T>>;\n// template <class T>\n// using vvvvvc = vector<vvvvc<T>>;\n// template <class T>\n// using pq = priority_queue<T>;\n// template <class T>\n// using pqg = priority_queue<T, vector<T>, greater<T>>;\n\n// #define vv(type, name, h, ...) \\\n//   vector<vector<type>> name(h, vector<type>(__VA_ARGS__))\n// #define vvv(type, name, h, w, ...)   \\\n//   vector<vector<vector<type>>> name( \\\n//       h, vector<vector<type>>(w, vector<type>(__VA_ARGS__)))\n// #define vvvv(type, name, a, b, c, ...)       \\\n//   vector<vector<vector<vector<type>>>> name( \\\n//       a, vector<vector<vector<type>>>(       \\\n//              b, vector<vector<type>>(c, vector<type>(__VA_ARGS__))))\n\n// // https://trap.jp/post/1224/\n// #define FOR1(a) for (ll _ = 0; _ < ll(a); ++_)\n// #define FOR2(i, a) for (ll i = 0; i < ll(a); ++i)\n// #define FOR3(i, a, b) for (ll i = a; i < ll(b); ++i)\n// #define FOR4(i, a, b, c) for (ll i = a; i < ll(b); i += (c))\n// #define FOR1_R(a) for (ll i = (a)-1; i >= ll(0); --i)\n// #define FOR2_R(i, a) for (ll i = (a)-1; i >= ll(0); --i)\n// #define FOR3_R(i, a, b) for (ll i = (b)-1; i >= ll(a); --i)\n// #define overload4(a, b, c, d, e, ...) e\n// #define overload3(a, b, c, d, ...) d\n// #define FOR(...) overload4(__VA_ARGS__, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)\n// #define FOR_R(...) overload3(__VA_ARGS__, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)\n\n// #define FOR_subset(t, s) \\\n//   for (ll t = (s); t >= 0; t = (t == 0 ? -1 : (t - 1) & (s)))\n// #define all(x) x.begin(), x.end()\n// #define len(x) ll(x.size())\n// #define elif else if\n\n// #define eb emplace_back\n// #define mp make_pair\n// #define mt make_tuple\n// #define fi first\n// #define se second\n\n// #define stoi stoll\n\n// int popcnt(int x) { return __builtin_popcount(x); }\n// int popcnt(u32 x) { return __builtin_popcount(x); }\n// int popcnt(ll x) { return __builtin_popcountll(x); }\n// int popcnt(u64 x) { return __builtin_popcountll(x); }\n// int popcnt_mod_2(int x) { return __builtin_parity(x); }\n// int popcnt_mod_2(u32 x) { return __builtin_parity(x); }\n// int popcnt_mod_2(ll x) { return __builtin_parityll(x); }\n// int popcnt_mod_2(u64 x) { return __builtin_parityll(x); }\n// // (0, 1, 2, 3, 4) -> (-1, 0, 1, 1, 2)\n// int topbit(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\n// int topbit(u32 x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\n// int topbit(ll x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\n// int topbit(u64 x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\n// // (0, 1, 2, 3, 4) -> (-1, 0, 1, 0, 2)\n// int lowbit(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\n// int lowbit(u32 x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\n// int lowbit(ll x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\n// int lowbit(u64 x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\n\n// template <typename T>\n// T floor(T a, T b) {\n//   return a / b - (a % b && (a ^ b) < 0);\n// }\n// template <typename T>\n// T ceil(T x, T y) {\n//   return floor(x + y - 1, y);\n// }\n// template <typename T>\n// T bmod(T x, T y) {\n//   return x - y * floor(x, y);\n// }\n// template <typename T>\n// pair<T, T> divmod(T x, T y) {\n//   T q = floor(x, y);\n//   return {q, x - q * y};\n// }\n\n\n//     const edge_type* end() const {\n//       if (l == r) { return 0; }\n//       return &G->csr_edges[r];\n//     }\n\n//   private:\n//     const Graph* G;\n//     int l, r;\n//   };\n\n//   bool is_prepared() { return prepared; }\n\n//   Graph() : N(0), M(0), prepared(0) {}\n//   Graph(int N) : N(N), M(0), prepared(0) {}\n\n//   void build(int n) {\n//     N = n, M = 0;\n//     prepared = 0;\n//     edges.clear();\n//     indptr.clear();\n//     csr_edges.clear();\n//     vc_deg.clear();\n//     vc_indeg.clear();\n//     vc_outdeg.clear();\n//   }\n\n//   void add(int frm, int to, T cost = 1, int i = -1) {\n//     assert(!prepared);\n//     assert(0 <= frm && 0 <= to && to < N);\n//     if (i == -1) i = M;\n//     auto e = edge_type({frm, to, cost, i});\n//     edges.eb(e);\n//     ++M;\n//   }\n\n// #ifdef FASTIO\n//   // wt, off\n//   void read_tree(bool wt = false, int off = 1) { read_graph(N - 1, wt, off); }\n\n//   void read_graph(int M, bool wt = false, int off = 1) {\n//     for (int m = 0; m < M; ++m) {\n//       INT(a, b);\n//       a -= off, b -= off;\n//       if (!wt) {\n//         add(a, b);\n//       } else {\n//         T c;\n//         read(c);\n//         add(a, b, c);\n//       }\n//     }\n//     build();\n//   }\n// #endif\n\n//   void build() {\n//     assert(!prepared);\n//     prepared = true;\n//     indptr.assign(N + 1, 0);\n//     for (auto&& e: edges) {\n//       indptr[e.frm + 1]++;\n//       if (!directed) indptr[e.to + 1]++;\n//     }\n//     for (int v = 0; v < N; ++v) { indptr[v + 1] += indptr[v]; }\n//     auto counter = indptr;\n//     csr_edges.resize(indptr.back() + 1);\n//     for (auto&& e: edges) {\n//       csr_edges[counter[e.frm]++] = e;\n//       if (!directed)\n//         csr_edges[counter[e.to]++] = edge_type({e.to, e.frm, e.cost, e.id});\n//     }\n//   }\n\n//   OutgoingEdges operator[](int v) const {\n//     assert(prepared);\n//     return {this, indptr[v], indptr[v + 1]};\n//   }\n\n//   vc<int> deg_array() {\n//     if (vc_deg.empty()) calc_deg();\n//     return vc_deg;\n//   }\n\n//   pair<vc<int>, vc<int>> deg_array_inout() {\n//     if (vc_indeg.empty()) calc_deg_inout();\n//     return {vc_indeg, vc_outdeg};\n//   }\n\n//   int deg(int v) {\n//     if (vc_deg.empty()) calc_deg();\n//     return vc_deg[v];\n//   }\n\n//   int in_deg(int v) {\n//     if (vc_indeg.empty()) calc_deg_inout();\n//     return vc_indeg[v];\n//   }\n\n//   int out_deg(int v) {\n//     if (vc_outdeg.empty()) calc_deg_inout();\n//     return vc_outdeg[v];\n//   }\n\n// #ifdef FASTIO\n//   void debug() {\n//     print(\"Graph\");\n//     if (!prepared) {\n//       print(\"frm to cost id\");\n//       for (auto&& e: edges) print(e.frm, e.to, e.cost, e.id);\n//     } else {\n//       print(\"indptr\", indptr);\n//       print(\"frm to cost id\");\n//       FOR(v, N) for (auto&& e: (*this)[v]) print(e.frm, e.to, e.cost, e.id);\n//     }\n//   }\n// #endif\n\n//   vc<int> new_idx;\n//   vc<bool> used_e;\n\n//   // G \u306b\u304a\u3051\u308b\u9802\u70b9 V[i] \u304c\u3001\u65b0\u3057\u3044\u30b0\u30e9\u30d5\u3067 i \u306b\u306a\u308b\u3088\u3046\u306b\u3059\u308b\n//   // {G, es}\n//   Graph<T, directed> rearrange(vc<int> V, bool keep_eid = 0) {\n//     if (len(new_idx) != N) new_idx.assign(N, -1);\n//     int n = len(V);\n//     FOR(i, n) new_idx[V[i]] = i;\n//     Graph<T, directed> G(n);\n//     vc<int> history;\n//     FOR(i, n) {\n//       for (auto&& e: (*this)[V[i]]) {\n//         if (len(used_e) <= e.id) used_e.resize(e.id + 1);\n//         if (used_e[e.id]) continue;\n//         int a = e.frm, b = e.to;\n//         if (new_idx[a] != -1 && new_idx[b] != -1) {\n//           history.eb(e.id);\n//           used_e[e.id] = 1;\n//           int eid = (keep_eid ? e.id : -1);\n//           G.add(new_idx[a], new_idx[b], e.cost, eid);\n//         }\n//       }\n//     }\n//     FOR(i, n) new_idx[V[i]] = -1;\n//     for (auto&& eid: history) used_e[eid] = 0;\n//     G.build();\n//     return G;\n//   }\n\n// private:\n//   void calc_deg() {\n//     assert(vc_deg.empty());\n//     vc_deg.resize(N);\n//     for (auto&& e: edges) vc_deg[e.frm]++, vc_deg[e.to]++;\n//   }\n\n//   void calc_deg_inout() {\n//     assert(vc_indeg.empty());\n//     vc_indeg.resize(N);\n//     vc_outdeg.resize(N);\n//     for (auto&& e: edges) { vc_indeg[e.to]++, vc_outdeg[e.frm]++; }\n//   }\n// };\n// #line 3 \"/home/maspy/compro/library/graph/shortest_path/warshall_floyd.hpp\"\n\n// // \u8ca0\u8fba\u304c\u3042\u3063\u3066\u3082\u8ca0\u9589\u8def\u304c\u306a\u3051\u308c\u3070\u6b63\u3057\u304f\u52d5\u4f5c\u3059\u308b\u3002\n// // \u8ca0\u9589\u8def\u304c\u3042\u308b\u304b\u3069\u3046\u304b\u306f\u3001dist[v][v] < 0 \u3068\u306a\u308b v \u304c\u3042\u308b\u304b\u3069\u3046\u304b\u3067\u5224\u5b9a\u3002\n// template <typename T, typename GT>\n// vc<vc<T>> warshall_floyd(GT& G) {\n//   ll N = G.N;\n//   vv(T, dist, N, N, infty<T>);\n//   FOR(v, N) {\n//     dist[v][v] = 0;\n//     for (auto&& e: G[v]) chmin(dist[v][e.to], e.cost);\n//   }\n//   FOR(k, N) FOR(i, N) {\n//     if (dist[i][k] == infty<T>) continue;\n//     FOR(j, N) {\n//       if (dist[k][j] == infty<T>) continue;\n//       chmin(dist[i][j], dist[i][k] + dist[k][j]);\n//     }\n//   }\n//   return dist;\n// }\n// #line 1 \"/home/maspy/compro/library/flow/maxflow.hpp\"\n// // incremental \u306b\u8fba\u3092\u8ffd\u52a0\u3057\u3066\u3088\u3044\n// // \u8fba\u306e\u5bb9\u91cf\u306e\u5909\u66f4\u304c\u53ef\u80fd\n// // \u5909\u66f4\u3059\u308b capacity \u304c F \u306e\u3068\u304d\u3001O((N+M)|F|) \u6642\u9593\u3067\u66f4\u65b0\n// template <typename Cap>\n// struct MaxFlow {\n//   struct Edge {\n//     int to, rev;\n//     Cap cap; // \u6b8b\u3063\u3066\u3044\u308b\u5bb9\u91cf. \u3057\u305f\u304c\u3063\u3066 cap+flow \u304c\u5b9a\u6570.\n//     Cap flow = 0;\n//   };\n\n//   const int N, source, sink;\n//   vvc<Edge> edges;\n//   vc<pair<int, int>> pos;\n//   vc<int> prog, level;\n//   vc<int> que;\n//   bool calculated;\n\n//   MaxFlow(int N, int source, int sink)\n//       : N(N),\n//         source(source),\n//         sink(sink),\n//         edges(N),\n//         calculated(0),\n//         flow_ans(0) {}\n\n//   void add(int frm, int to, Cap cap, Cap rev_cap = 0) {\n//     calculated = 0;\n//     assert(0 <= frm && frm < N);\n//     assert(0 <= to && to < N);\n//     assert(Cap(0) <= cap);\n//     int a = len(edges[frm]);\n//     int b = (frm == to ? a + 1 : len(edges[to]));\n//     pos.eb(frm, a);\n//     edges[frm].eb(Edge{to, b, cap, 0});\n//     edges[to].eb(Edge{frm, a, rev_cap, 0});\n//   }\n\n//   void change_capacity(int i, Cap after) {\n//     auto [frm, idx] = pos[i];\n//     auto& e = edges[frm][idx];\n//     Cap before = e.cap + e.flow;\n//     if (before < after) {\n//       calculated = (e.cap > 0);\n//       e.cap += after - before;\n//       return;\n//     }\n//     e.cap = after - e.flow;\n//     // \u5dee\u5206\u3092\u62bc\u3057\u623b\u3059\u51e6\u7406\u767a\u751f\n//     if (e.cap < 0) flow_push_back(e);\n//   }\n\n//   void flow_push_back(Edge& e0) {\n//     auto& re0 = edges[e0.to][e0.rev];\n//     int a = re0.to;\n//     int b = e0.to;\n//     /*\n//     \u8fba e0 \u306e\u5bb9\u91cf\u304c\u6b63\u306b\u306a\u308b\u3088\u3046\u306b\u623b\u3059\n//     path-cycle \u5206\u89e3\u3092\u8003\u3048\u308c\u3070\u3001\n//     - uv \u8fba\u3092\u542b\u3080\u30b5\u30a4\u30af\u30eb\u3092\u6d88\u3059\n//     - suvt \u30d1\u30b9\u3092\u6d88\u3059\n//     \u524d\u8005\u306f\u6b8b\u4f59\u30b0\u30e9\u30d5\u3067 ab \u30d1\u30b9\uff08flow_ans \u304c\u5909\u308f\u3089\u306a\u3044\uff09\n//     \u5f8c\u8005\u306f\u6b8b\u4f59\u30b0\u30e9\u30d5\u3067 tb, as \u30d1\u30b9\n//     */\n// /*\n//     auto find_path = [&](int s, int t, Cap lim) -> Cap {\n//       vc<bool> vis(N);\n//       prog.assign(N, 0);\n//       auto dfs = [&](auto& dfs, int v, Cap f) -> Cap {\n//         if (v == t) return f;\n//         for (int& i = prog[v]; i < len(edges[v]); ++i) {\n//           auto& e = edges[v][i];\n//           if (vis[e.to] || e.cap <= Cap(0)) continue;\n//           vis[e.to] = 1;\n//           Cap a = dfs(dfs, e.to, min(f, e.cap));\n//           assert(a >= 0);\n//           if (a == Cap(0)) continue;\n//           e.cap -= a, e.flow += a;\n//           edges[e.to][e.rev].cap += a, edges[e.to][e.rev].flow -= a;\n//           return a;\n//         }\n//         return 0;\n//       };\n//       return dfs(dfs, s, lim);\n//     };\n\n//     while (e0.cap < 0) {\n//       Cap x = find_path(a, b, -e0.cap);\n//       if (x == Cap(0)) break;\n//       e0.cap += x, e0.flow -= x;\n//       re0.cap -= x, re0.flow += x;\n//     }\n//     Cap c = -e0.cap;\n//     while (c > 0 && a != source) {\n//       Cap x = find_path(a, source, c);\n//       assert(x > 0);\n//       c -= x;\n//     }\n//     c = -e0.cap;\n//     while (c > 0 && b != sink) {\n//       Cap x = find_path(sink, b, c);\n//       assert(x > 0);\n//       c -= x;\n//     }\n//     c = -e0.cap;\n//     e0.cap += c, e0.flow -= c;\n//     re0.cap -= c, re0.flow += c;\n//     flow_ans -= c;\n//   }\n\n//   // frm, to, flow\n//   vc<tuple<int, int, Cap>> get_flow_edges() {\n//     vc<tuple<int, int, Cap>> res;\n//     FOR(frm, N) {\n//       for (auto&& e: edges[frm]) {\n//         if (e.flow <= 0) continue;\n//         res.eb(frm, e.to, e.flow);\n//       }\n//     }\n//     return res;\n//   }\n\n//   vc<bool> vis;\n\n//   // \u5dee\u5206\u3067\u306f\u306a\u304f\u3053\u308c\u307e\u3067\u306e\u7dcf\u91cf\n//   Cap flow() {\n//     if (calculated) return flow_ans;\n//     calculated = true;\n//     while (set_level()) {\n//       prog.assign(N, 0);\n//       while (1) {\n//         Cap x = flow_dfs(source, infty<Cap>);\n//         if (x == 0) break;\n//         flow_ans += x;\n//         chmin(flow_ans, infty<Cap>);\n//         if (flow_ans == infty<Cap>) return flow_ans;\n//       }\n//     }\n//     return flow_ans;\n//   }\n\n//   // \u6700\u5c0f\u30ab\u30c3\u30c8\u306e\u5024\u304a\u3088\u3073\u3001\u30ab\u30c3\u30c8\u3092\u8868\u3059 01 \u5217\u3092\u8fd4\u3059\n//   pair<Cap, vc<int>> cut() {\n//     flow();\n//     vc<int> res(N);\n//     FOR(v, N) res[v] = (level[v] >= 0 ? 0 : 1);\n//     return {flow_ans, res};\n//   }\n\n//   // O(F(N+M)) \u304f\u3089\u3044\u4f7f\u3063\u3066\u7d4c\u8def\u5fa9\u5143\n//   // simple path \u306b\u306a\u308b\n//   vvc<int> path_decomposition() {\n//     flow();\n//     auto edges = get_flow_edges();\n//     vvc<int> TO(N);\n//     for (auto&& [frm, to, flow]: edges) { FOR(flow) TO[frm].eb(to); }\n//     vvc<int> res;\n//     vc<int> vis(N);\n\n//     FOR(flow_ans) {\n//       vc<int> path = {source};\n//       vis[source] = 1;\n//       while (path.back() != sink) {\n//         int to = POP(TO[path.back()]);\n//         while (vis[to]) { vis[POP(path)] = 0; }\n//         path.eb(to), vis[to] = 1;\n//       }\n//       for (auto&& v: path) vis[v] = 0;\n//       res.eb(path);\n//     }\n//     return res;\n//   }\n\n//   void debug() {\n//     print(\"source\", source);\n//     print(\"sink\", sink);\n//     print(\"edges (frm, to, cap, flow)\");\n//     FOR(v, N) {\n//       for (auto& e: edges[v]) {\n//         if (e.cap == 0 && e.flow == 0) continue;\n//         print(v, e.to, e.cap, e.flow);\n//       }\n//     }\n//   }\n\n// private:\n//   Cap flow_ans;\n\n//   bool set_level() {\n//     que.resize(N);\n//     level.assign(N, -1);\n//     level[source] = 0;\n//     int l = 0, r = 0;\n//     que[r++] = source;\n//     while (l < r) {\n//       int v = que[l++];\n//       for (auto&& e: edges[v]) {\n//         if (e.cap > 0 && level[e.to] == -1) {\n//           level[e.to] = level[v] + 1;\n//           if (e.to == sink) return true;\n//           que[r++] = e.to;\n//         }\n//       }\n//     }\n//     return false;\n//   }\n\n//   Cap flow_dfs(int v, Cap lim) {\n//     if (v == sink) return lim;\n//     Cap res = 0;\n//     for (int& i = prog[v]; i < len(edges[v]); ++i) {\n//       auto& e = edges[v][i];\n//       if (e.cap > 0 && level[e.to] == level[v] + 1) {\n//         Cap a = flow_dfs(e.to, min(lim, e.cap));\n//         if (a > 0) {\n//           e.cap -= a, e.flow += a;\n//           edges[e.to][e.rev].cap += a, edges[e.to][e.rev].flow -= a;\n//           res += a;\n//           lim -= a;\n//           if (lim == 0) break;\n//         }\n//       }\n//     }\n//     return res;\n//   }\n// };\n// #line 2 \"/home/maspy/compro/library/flow/binary_optimization.hpp\"\n\n// template <typename T, bool MINIMIZE>\n// struct Binary_Optimization {\n//   int n;\n//   int nxt;\n//   int source, sink;\n//   T base_cost;\n//   map<pair<int, int>, T> edges;\n\n//   Binary_Optimization(int n) : n(n), base_cost(0) {\n//     source = n;\n//     sink = n + 1;\n//     nxt = n + 2;\n//   }\n\n//   // xi \u3092 0, 1 \u306b\u3059\u308b\u3068\u304d\u306b\u304b\u304b\u308b\u30b3\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3002\n//   void add_1(int i, T x0, T x1) {\n//     assert(0 <= i && i < n);\n//     if (!MINIMIZE) { x0 = -x0, x1 = -x1; }\n//     _add_1(i, x0, x1);\n//   }\n\n//   // (xi,xj) = (00,01,10,11) \u3068\u3059\u308b\u3068\u304d\u306b\u304b\u304b\u308b\u30b3\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3002\n//   // \u30b3\u30b9\u30c8\u304c\u52a3\u30e2 x00 + x11 <= x10 + x10 \u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n//   // \u7279\u306b\u3001\u5bfe\u89d2\u6210\u5206\u306b\u5229\u5f97\u3092\u4e0e\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n//   void add_2(int i, int j, T x00, T x01, T x10, T x11) {\n//     assert(i != j);\n//     assert(0 <= i && i < n);\n//     assert(0 <= j && j < n);\n//     if (!MINIMIZE) {\n//       x00 = -x00, x01 = -x01;\n//       x10 = -x10, x11 = -x11;\n//     }\n//     _add_2(i, j, x00, x01, x10, x11);\n//   }\n\n//   // (xi,xj,xk) = (000,001,010,011,100,101,110,111)\n//   // \u3068\u3059\u308b\u3068\u304d\u306b\u304b\u304b\u308b\u30b3\u30b9\u30c8\u3092\u8ffd\u52a0\u3059\u308b\u3002\u52a3\u30e2\u306b\u306a\u3063\u3066\u3044\u308b\u5fc5\u8981\u304c\u3042\u308b\u3002\n//   // \u7279\u306b\u3001000 \u3084 111 \u306b\u5229\u5f97\u3092\u4e0e\u3048\u308b\u3053\u3068\u304c\u3067\u304d\u308b\u3002\n//   void add_3(int i, int j, int k, T x000, T x001, T x010, T x011, T x100,\n//              T x101, T x110, T x111) {\n//     assert(i != j && i != k && j != k);\n//     assert(0 <= i && i < n);\n//     assert(0 <= j && j < n);\n//     assert(0 <= k && k < n);\n//     if (!MINIMIZE) {\n//       x000 = -x000, x001 = -x001;\n//       x010 = -x010, x011 = -x011;\n//       x100 = -x100, x101 = -x101;\n//       x110 = -x110, x111 = -x111;\n//     }\n//     _add_3(i, j, k, x000, x001, x010, x011, x100, x101, x110, x111);\n//   }\n\n//   // \u6700\u5c0f\u5024\u304a\u3088\u3073\u300101 \u5217\u3092\u8fd4\u3059\n//   pair<T, vc<int>> calc() {\n//     MaxFlow<T> G(nxt, source, sink);\n//     for (auto&& [key, cap]: edges) {\n//       auto [frm, to] = key;\n//       G.add(frm, to, cap);\n//     }\n\n//     auto [val, cut] = G.cut();\n//     val += base_cost;\n//     chmin(val, infty<T>);\n//     cut.resize(n);\n//     if (!MINIMIZE) val = -val;\n//     return {val, cut};\n//   }\n\n//   void debug() {\n//     print(\"base_cost\", base_cost);\n//     print(\"source=\", source, \"sink=\", sink);\n//     for (auto&& [key, cap]: edges) print(key, cap);\n//   }\n\n// private:\n//   void add_base(T t) {\n//     base_cost += t;\n//     assert(-infty<T> < base_cost && base_cost < infty<T>);\n//   }\n//   void add_edge(int i, int j, T t) {\n//     assert(t >= 0);\n//     if (t == 0) return;\n//     pair<int, int> key = mp(i, j);\n//     edges[key] += t;\n//     assert(edges[key] <= infty<T>);\n//   }\n\n//   void _add_1(int i, T x0, T x1) {\n//     if (x0 <= x1) {\n//       add_base(x0);\n//       add_edge(source, i, x1 - x0);\n//     } else {\n//       add_base(x1);\n//       add_edge(i, sink, x0 - x1);\n//     }\n//   }\n\n//   void _add_2(int i, int j, T x00, T x01, T x10, T x11) {\n//     assert(x00 + x11 <= x01 + x10);\n//     _add_1(i, x00, x10);\n//     _add_1(j, 0, x11 - x10);\n//     add_edge(i, j, x01 + x10 - x00 - x11);\n//   }\n\n//   void _add_3(int i, int j, int k, T x000, T x001, T x010, T x011, T x100,\n//               T x101, T x110, T x111) {\n//     T p = x000 - x100 - x010 - x001 + x110 + x101 + x011 - x111;\n//     if (p > 0) {\n//       add_base(x000);\n//       _add_1(i, 0, x100 - x000);\n//       _add_1(j, 0, x010 - x000);\n//       _add_1(k, 0, x001 - x000);\n//       _add_2(i, j, 0, 0, 0, x000 + x110 - x100 - x010);\n//       _add_2(i, k, 0, 0, 0, x000 + x101 - x100 - x001);\n//       _add_2(j, k, 0, 0, 0, x000 + x011 - x010 - x001);\n//       // \u3042\u3068\u306f\u3001111 \u306e\u3068\u304d\u306b\u5229\u5f97 p \u3092\u8ffd\u52a0\u3059\u308b\n//       add_base(-p);\n//       // 111 \u4ee5\u5916\u3060\u3068\u30b3\u30b9\u30c8 p\n//       add_edge(i, nxt, p);\n//       add_edge(j, nxt, p);\n//       add_edge(k, nxt, p);\n//       add_edge(nxt, sink, p);\n//       ++nxt;\n//     } else {\n//       p = -p;\n//       add_base(x111);\n//       _add_1(i, x011 - x111, 0);\n//       _add_1(i, x101 - x111, 0);\n//       _add_1(i, x110 - x111, 0);\n//       _add_2(i, j, x111 + x001 - x011 - x101, 0, 0, 0);\n//       _add_2(i, k, x111 + x010 - x011 - x110, 0, 0, 0);\n//       _add_2(j, k, x111 + x100 - x101 - x110, 0, 0, 0);\n//       // 000 \u306e\u3068\u304d\u306b\u5229\u5f97 p \u3092\u8ffd\u52a0\u3059\u308b\n//       add_base(-p);\n//       // 000 \u4ee5\u5916\u3060\u3068\u30b3\u30b9\u30c8 p\n//       add_edge(nxt, i, p);\n//       add_edge(nxt, j, p);\n//       add_edge(nxt, k, p);\n//       add_edge(source, nxt, p);\n//       ++nxt;\n//     }\n//   }\n// };\n// #line 6 \"main.cpp\"\n\n// void solve() {\n//   LL(N, M);\n//   Graph<int, 0> G0(N);\n//   G0.read_graph(M);\n//   auto dist = warshall_floyd<int>(G0);\n\n//   LL(S, B, K);\n//   vi U(S), A(S), F(S), P(S);\n//   FOR(i, S) read(U[i], A[i], F[i], P[i]), --U[i];\n//   vi V(B), D(B), G(B);\n//   FOR(i, B) read(V[i], D[i], G[i]), --V[i];\n\n//   vi val(S, -infty<ll>);\n//   /*\n//   \u3053\u3053\u3092\u9ad8\u901f\u5316\u3059\u308b\u5fc5\u8981\u304c\u3042\u308b\n//   FOR(i, S) FOR(j, B) {\n//     chmin(F[i], N);\n//     ll d = dist[U[i]][V[j]];\n//     if (d <= F[i] && A[i] >= D[j]) { chmax(val[i], G[j]); }\n//   }\n//   */\n//   // (d,g)\n//   /*\n//   vvc<int> IDS(N);\n//   FOR(i, B) IDS[V[i]].eb(i);\n//   vvc<ll> DD(N);\n//   vvc<ll> GG(N);\n//   FOR(v, N) {\n//     vi X, Y;\n//     for (auto& j: IDS[v]) { X.eb(D[j]), Y.eb(G[j]); }\n//     auto I = argsort(X);\n//     X = rearrange(X, I);\n//     Y = rearrange(Y, I);\n//     FOR(i, len(X) - 1) { chmax(Y[i + 1], Y[i]); }\n//     DD[v] = X, GG[v] = Y;\n//   }\n\n//   FOR(i, S) {\n//     chmin(F[i], N);\n//     FOR(v, N) {\n//       ll d = dist[U[i]][v];\n//       if (d > F[i]) continue;\n//       ll a = A[i];\n//       ll k = UB(DD[v], a);\n//       --k;\n//       if (0 <= k && k < len(DD[v])) { chmax(val[i], GG[v][k]); }\n//     }\n//   }\n\n\n//   //\n// // //+92-90-2\n// // #line 1 \"library/my_template.hpp\"\n// // #if defined(LOCAL)\n// // #include <my_template_compiled.hpp>\n// // #else\n\n// // // https://codeforces.com/blog/entry/96344\n// // #pragma GCC optimize(\"Ofast,unroll-loops\")\n// // // \u3044\u307e\u306e CF \u3060\u3068\u3053\u308c\u5165\u308c\u308b\u3068\u52d5\u304b\u306a\u3044\uff1f\n// // // #pragma GCC target(\"avx2,popcnt\")\n\n// // #include <bits/stdc++.h>\n\n// // using namespace std;\n\n// // using ll = long long;\n// // using u32 = unsigned int;\n// // using u64 = unsigned long long;\n// // using i128 = __int128;\n// // using u128 = unsigned __int128;\n// // using f128 = __float128;\n\n// // template <class T>\n// // constexpr T infty = 0;\n// // template <>\n// // constexpr int infty<int> = 1'000'000'000;\n// // template <>\n// // constexpr ll infty<ll> = ll(infty<int>) * infty<int> * 2;\n// // template <>\n// // constexpr u32 infty<u32> = infty<int>;\n// // template <>\n// // constexpr u64 infty<u64> = infty<ll>;\n// // template <>\n// // constexpr i128 infty<i128> = i128(infty<ll>) * infty<ll>;\n// // template <>\n// // constexpr double infty<double> = infty<ll>;\n// // template <>\n// // constexpr long double infty<long double> = infty<ll>;\n\n// // using pi = pair<ll, ll>;\n// // using vi = vector<ll>;\n// // template <class T>\n// // using vc = vector<T>;\n// // template <class T>\n// // using vvc = vector<vc<T>>;\n// // template <class T>\n// // using vvvc = vector<vvc<T>>;\n// // template <class T>\n// // using vvvvc = vector<vvvc<T>>;\n// // template <class T>\n// // using vvvvvc = vector<vvvvc<T>>;\n// // template <class T>\n// // using pq = priority_queue<T>;\n// // template <class T>\n// // using pqg = priority_queue<T, vector<T>, greater<T>>;\n\n// // #define vv(type, name, h, ...) \\\n// //   vector<vector<type>> name(h, vector<type>(__VA_ARGS__))\n// // #define vvv(type, name, h, w, ...)   \\\n// //   vector<vector<vector<type>>> name( \\\n// //       h, vector<vector<type>>(w, vector<type>(__VA_ARGS__)))\n// // #define vvvv(type, name, a, b, c, ...)       \\\n// //   vector<vector<vector<vector<type>>>> name( \\\n// //       a, vector<vector<vector<type>>>(       \\\n// //              b, vector<vector<type>>(c, vector<type>(__VA_ARGS__))))\n\n// // // https://trap.jp/post/1224/\n// // #define FOR1(a) for (ll _ = 0; _ < ll(a); ++_)\n// // #define FOR2(i, a) for (ll i = 0; i < ll(a); ++i)\n// // #define FOR3(i, a, b) for (ll i = a; i < ll(b); ++i)\n// // #define FOR4(i, a, b, c) for (ll i = a; i < ll(b); i += (c))\n// // #define FOR1_R(a) for (ll i = (a)-1; i >= ll(0); --i)\n// // #define FOR2_R(i, a) for (ll i = (a)-1; i >= ll(0); --i)\n// // #define FOR3_R(i, a, b) for (ll i = (b)-1; i >= ll(a); --i)\n// // #define overload4(a, b, c, d, e, ...) e\n// // #define overload3(a, b, c, d, ...) d\n// // #define FOR(...) overload4(__VA_ARGS__, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)\n// // #define FOR_R(...) overload3(__VA_ARGS__, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)\n\n// // #define FOR_subset(t, s) \\\n// //   for (ll t = (s); t >= 0; t = (t == 0 ? -1 : (t - 1) & (s)))\n// // #define all(x) x.begin(), x.end()\n// // #define len(x) ll(x.size())\n// // #define elif else if\n\n// // #define eb emplace_back\n// // #define mp make_pair\n// // #define mt make_tuple\n// // #define fi first\n// // #define se second\n\n// // #define stoi stoll\n\n// // int popcnt(int x) { return __builtin_popcount(x); }\n// // int popcnt(u32 x) { return __builtin_popcount(x); }\n// // int popcnt(ll x) { return __builtin_popcountll(x); }\n// // int popcnt(u64 x) { return __builtin_popcountll(x); }\n// // int popcnt_mod_2(int x) { return __builtin_parity(x); }\n// // int popcnt_mod_2(u32 x) { return __builtin_parity(x); }\n// // int popcnt_mod_2(ll x) { return __builtin_parityll(x); }\n// // int popcnt_mod_2(u64 x) { return __builtin_parityll(x); }\n// // // (0, 1, 2, 3, 4) -> (-1, 0, 1, 1, 2)\n// // int topbit(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\n// // int topbit(u32 x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\n// // int topbit(ll x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\n// // int topbit(u64 x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\n// // // (0, 1, 2, 3, 4) -> (-1, 0, 1, 0, 2)\n// // int lowbit(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\n// // int lowbit(u32 x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\n// // int lowbit(ll x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\n// // int lowbit(u64 x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\n\n// // template <typename T>\n// // T floor(T a, T b) {\n// //   return a / b - (a % b && (a ^ b) < 0);\n// // }\n// // template <typename T>\n// // T ceil(T x, T y) {\n// //   return floor(x + y - 1, y);\n// // }\n// // template <typename T>\n// // T bmod(T x, T y) {\n// //   return x - y * floor(x, y);\n// // }\n// // template <typename T>\n// // pair<T, T> divmod(T x, T y) {\n// //   T q = floor(x, y);\n// //   return {q, x - q * y};\n// // }\n\n// // template <typename T, typename U>\n// // T SUM(const vector<U> &A) {\n// //   T sm = 0;\n// //   for (auto &&a: A) sm += a;\n// //   return sm;\n// // }\n\n// // #define MIN(v) *min_element(all(v))\n// // #define MAX(v) *max_element(all(v))\n// // #define LB(c, x) distance((c).begin(), lower_bound(all(c), (x)))\n// // #define UB(c, x) distance((c).begin(), upper_bound(all(c), (x)))\n// // #define UNIQUE(x) \\\n// //   sort(all(x)), x.erase(unique(all(x)), x.end()), x.shrink_to_fit()\n\n// // template <typename T>\n// // T POP(deque<T> &que) {\n// //   T a = que.front();\n// //   que.pop_front();\n// //   return a;\n// // }\n// // template <typename T>\n// // T POP(pq<T> &que) {\n// //   T a = que.top();\n// //   que.pop();\n// //   return a;\n// // }\n// // template <typename T>\n// // T POP(pqg<T> &que) {\n// //   T a = que.top();\n// //   que.pop();\n// //   return a;\n// // }\n// // template <typename T>\n// // T POP(vc<T> &que) {\n// //   T a = que.back();\n// //   que.pop_back();\n// //   return a;\n// // }\n\n// // template <typename F>\n// // ll binary_search(F check, ll ok, ll ng, bool check_ok = true) {\n// //   if (check_ok) assert(check(ok));\n// //   while (abs(ok - ng) > 1) {\n// //     auto x = (ng + ok) / 2;\n// //     (check(x) ? ok : ng) = x;\n// //   }\n// //   return ok;\n// // }\n// // template <typename F>\n// // double binary_search_real(F check, double ok, double ng, int iter = 100) {\n// //   FOR(iter) {\n// //     double x = (ok + ng) / 2;\n// //     (check(x) ? ok : ng) = x;\n// //   }\n// //   return (ok + ng) / 2;\n// // }\n\n\n\n\n\n/* CREATED BY YUVRAJ */\n\n\n\n\n\n#line 1 \"library/my_template.hpp\"\n#if defined(LOCAL)\n#include <my_template_compiled.hpp>\n#else\n\n// https://codeforces.com/blog/entry/96344\n#pragma GCC optimize(\"Ofast,unroll-loops\")\n// \u3044\u307e\u306e CF \u3060\u3068\u3053\u308c\u5165\u308c\u308b\u3068\u52d5\u304b\u306a\u3044\uff1f\n// #pragma GCC target(\"avx2,popcnt\")\n\n#include <bits/stdc++.h>\n#include <iostream>\n#include <cstdio>\n#include <cstdlib>\n#include <algorithm>\n#include <cmath>\n#include <vector>\n#include <set>\n#include <map>\n#include <unordered_set>\n#include <unordered_map>\n#include <queue>\n#include <ctime>\n#include <cassert>\n#include <complex>\n#include <string>\n#include <cstring>\n#include <chrono>\n#include <random>\n#include <bitset>\n\nusing namespace std;\n\nusing ll = long long;\nusing u32 = unsigned int;\nusing u64 = unsigned long long;\nusing i128 = __int128;\nusing u128 = unsigned __int128;\nusing f128 = __float128;\n\ntemplate <class T>\nconstexpr T infty = 0;\ntemplate <>\nconstexpr int infty<int> = 1'000'000'000;\ntemplate <>\nconstexpr ll infty<ll> = ll(infty<int>) * infty<int> * 2;\ntemplate <>\nconstexpr u32 infty<u32> = infty<int>;\ntemplate <>\nconstexpr u64 infty<u64> = infty<ll>;\ntemplate <>\nconstexpr i128 infty<i128> = i128(infty<ll>) * infty<ll>;\ntemplate <>\nconstexpr double infty<double> = infty<ll>;\ntemplate <>\nconstexpr long double infty<long double> = infty<ll>;\n\nusing pi = pair<ll, ll>;\nusing vi = vector<ll>;\ntemplate <class T>\nusing vc = vector<T>;\ntemplate <class T>\nusing vvc = vector<vc<T>>;\ntemplate <class T>\nusing vvvc = vector<vvc<T>>;\ntemplate <class T>\nusing vvvvc = vector<vvvc<T>>;\ntemplate <class T>\nusing vvvvvc = vector<vvvvc<T>>;\ntemplate <class T>\nusing pq = priority_queue<T>;\ntemplate <class T>\nusing pqg = priority_queue<T, vector<T>, greater<T>>;\n\n#define vv(type, name, h, ...) \\\n  vector<vector<type>> name(h, vector<type>(__VA_ARGS__))\n#define vvv(type, name, h, w, ...)   \\\n  vector<vector<vector<type>>> name( \\\n      h, vector<vector<type>>(w, vector<type>(__VA_ARGS__)))\n#define vvvv(type, name, a, b, c, ...)       \\\n  vector<vector<vector<vector<type>>>> name( \\\n      a, vector<vector<vector<type>>>(       \\\n             b, vector<vector<type>>(c, vector<type>(__VA_ARGS__))))\n\n// https://trap.jp/post/1224/\n#define FOR1(a) for (ll _ = 0; _ < ll(a); ++_)\n#define FOR2(i, a) for (ll i = 0; i < ll(a); ++i)\n#define FOR3(i, a, b) for (ll i = a; i < ll(b); ++i)\n#define FOR4(i, a, b, c) for (ll i = a; i < ll(b); i += (c))\n#define FOR1_R(a) for (ll i = (a)-1; i >= ll(0); --i)\n#define FOR2_R(i, a) for (ll i = (a)-1; i >= ll(0); --i)\n#define FOR3_R(i, a, b) for (ll i = (b)-1; i >= ll(a); --i)\n#define overload4(a, b, c, d, e, ...) e\n#define overload3(a, b, c, d, ...) d\n#define FOR(...) overload4(__VA_ARGS__, FOR4, FOR3, FOR2, FOR1)(__VA_ARGS__)\n#define FOR_R(...) overload3(__VA_ARGS__, FOR3_R, FOR2_R, FOR1_R)(__VA_ARGS__)\n\n#define FOR_subset(t, s) \\\n  for (ll t = (s); t >= 0; t = (t == 0 ? -1 : (t - 1) & (s)))\n#define all(x) x.begin(), x.end()\n#define len(x) ll(x.size())\n#define elif else if\n\n#define eb emplace_back\n#define mp make_pair\n#define mt make_tuple\n#define fi first\n#define se second\n\n#define stoi stoll\n\nint popcnt(int x) { return __builtin_popcount(x); }\nint popcnt(u32 x) { return __builtin_popcount(x); }\nint popcnt(ll x) { return __builtin_popcountll(x); }\nint popcnt(u64 x) { return __builtin_popcountll(x); }\nint popcnt_mod_2(int x) { return __builtin_parity(x); }\nint popcnt_mod_2(u32 x) { return __builtin_parity(x); }\nint popcnt_mod_2(ll x) { return __builtin_parityll(x); }\nint popcnt_mod_2(u64 x) { return __builtin_parityll(x); }\n// (0, 1, 2, 3, 4) -> (-1, 0, 1, 1, 2)\nint topbit(int x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\nint topbit(u32 x) { return (x == 0 ? -1 : 31 - __builtin_clz(x)); }\nint topbit(ll x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\nint topbit(u64 x) { return (x == 0 ? -1 : 63 - __builtin_clzll(x)); }\n// (0, 1, 2, 3, 4) -> (-1, 0, 1, 0, 2)\nint lowbit(int x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\nint lowbit(u32 x) { return (x == 0 ? -1 : __builtin_ctz(x)); }\nint lowbit(ll x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\nint lowbit(u64 x) { return (x == 0 ? -1 : __builtin_ctzll(x)); }\n\ntemplate <typename T>\nT floor(T a, T b) {\n  return a / b - (a % b && (a ^ b) < 0);\n}\ntemplate <typename T>\nT ceil(T x, T y) {\n  return floor(x + y - 1, y);\n}\ntemplate <typename T>\nT bmod(T x, T y) {\n  return x - y * floor(x, y);\n}\ntemplate <typename T>\npair<T, T> divmod(T x, T y) {\n  T q = floor(x, y);\n  return {q, x - q * y};\n}\n\ntemplate <typename T, typename U>\nT SUM(const vector<U> &A) {\n  T sm = 0;\n  for (auto &&a: A) sm += a;\n  return sm;\n}\n\n#define MIN(v) *min_element(all(v))\n#define MAX(v) *max_element(all(v))\n#define LB(c, x) distance((c).begin(), lower_bound(all(c), (x)))\n#define UB(c, x) distance((c).begin(), upper_bound(all(c), (x)))\n#define UNIQUE(x) \\\n  sort(all(x)), x.erase(unique(all(x)), x.end()), x.shrink_to_fit()\n\ntemplate <typename T>\nT POP(deque<T> &que) {\n  T a = que.front();\n  que.pop_front();\n  return a;\n}\ntemplate <typename T>\nT POP(pq<T> &que) {\n  T a = que.top();\n  que.pop();\n  return a;\n}\ntemplate <typename T>\nT POP(pqg<T> &que) {\n  T a = que.top();\n  que.pop();\n  return a;\n}\ntemplate <typename T>\nT POP(vc<T> &que) {\n  T a = que.back();\n  que.pop_back();\n  return a;\n}\n\ntemplate <typename F>\nll binary_search(F check, ll ok, ll ng, bool check_ok = true) {\n  if (check_ok) assert(check(ok));\n  while (abs(ok - ng) > 1) {\n    auto x = (ng + ok) / 2;\n    (check(x) ? ok : ng) = x;\n  }\n  return ok;\n}\ntemplate <typename F>\ndouble binary_search_real(F check, double ok, double ng, int iter = 100) {\n  FOR(iter) {\n    double x = (ok + ng) / 2;\n    (check(x) ? ok : ng) = x;\n  }\n  return (ok + ng) / 2;\n}\n\ntemplate <class T, class S>\ninline bool chmax(T &a, const S &b) {\n  return (a < b ? a = b, 1 : 0);\n}\ntemplate <class T, class S>\ninline bool chmin(T &a, const S &b) {\n  return (a > b ? a = b, 1 : 0);\n}\n\n// ? \u306f -1\nvc<int> s_to_vi(const string &S, char first_char) {\n  vc<int> A(S.size());\n  FOR(i, S.size()) { A[i] = (S[i] != '?' ? S[i] - first_char : -1); }\n  return A;\n}\n\ntemplate <typename T, typename U>\nvector<T> cumsum(vector<U> &A, int off = 1) {\n  int N = A.size();\n  vector<T> B(N + 1);\n  FOR(i, N) { B[i + 1] = B[i] + A[i]; }\n  if (off == 0) B.erase(B.begin());\n  return B;\n}\n\n// stable sort\ntemplate <typename T>\nvector<int> argsort(const vector<T> &A) {\n  vector<int> ids(len(A));\n  iota(all(ids), 0);\n  sort(all(ids),\n       [&](int i, int j) { return (A[i] == A[j] ? i < j : A[i] < A[j]); });\n  return ids;\n}\n\n// A[I[0]], A[I[1]], ...\ntemplate <typename T>\nvc<T> rearrange(const vc<T> &A, const vc<int> &I) {\n  vc<T> B(len(I));\n  FOR(i, len(I)) B[i] = A[I[i]];\n  return B;\n}\n#endif\n#line 1 \"library/other/io.hpp\"\n#define FASTIO\n#include <unistd.h>\n\n// https://judge.yosupo.jp/submission/21623\nnamespace fastio {\nstatic constexpr uint32_t SZ = 1 << 17;\nchar ibuf[SZ];\nchar obuf[SZ];\nchar out[100];\n// pointer of ibuf, obuf\nuint32_t pil = 0, pir = 0, por = 0;\n\nstruct Pre {\n  char num[10000][4];\n  constexpr Pre() : num() {\n    for (int i = 0; i < 10000; i++) {\n      int n = i;\n      for (int j = 3; j >= 0; j--) {\n        num[i][j] = n % 10 | '0';\n        n /= 10;\n      }\n    }\n  }\n} constexpr pre;\n\ninline void load() {\n  memcpy(ibuf, ibuf + pil, pir - pil);\n  pir = pir - pil + fread(ibuf + pir - pil, 1, SZ - pir + pil, stdin);\n  pil = 0;\n  if (pir < SZ) ibuf[pir++] = '\\n';\n}\n\ninline void flush() {\n  fwrite(obuf, 1, por, stdout);\n  por = 0;\n}\n\nvoid rd(char &c) {\n  do {\n    if (pil + 1 > pir) load();\n    c = ibuf[pil++];\n  } while (isspace(c));\n}\n\nvoid rd(string &x) {\n  x.clear();\n  char c;\n  do {\n    if (pil + 1 > pir) load();\n    c = ibuf[pil++];\n  } while (isspace(c));\n  do {\n    x += c;\n    if (pil == pir) load();\n    c = ibuf[pil++];\n  } while (!isspace(c));\n}\n\ntemplate <typename T>\nvoid rd_real(T &x) {\n  string s;\n  rd(s);\n  x = stod(s);\n}\n\ntemplate <typename T>\nvoid rd_integer(T &x) {\n  if (pil + 100 > pir) load();\n  char c;\n  do\n    c = ibuf[pil++];\n  while (c < '-');\n  bool minus = 0;\n  if constexpr (is_signed<T>::value || is_same_v<T, i128>) {\n    if (c == '-') { minus = 1, c = ibuf[pil++]; }\n  }\n  x = 0;\n  while ('0' <= c) { x = x * 10 + (c & 15), c = ibuf[pil++]; }\n  if constexpr (is_signed<T>::value || is_same_v<T, i128>) {\n    if (minus) x = -x;\n  }\n}\n\nvoid rd(int &x) { rd_integer(x); }\nvoid rd(ll &x) { rd_integer(x); }\nvoid rd(i128 &x) { rd_integer(x); }\nvoid rd(u32 &x) { rd_integer(x); }\nvoid rd(u64 &x) { rd_integer(x); }\nvoid rd(u128 &x) { rd_integer(x); }\nvoid rd(double &x) { rd_real(x); }\nvoid rd(long double &x) { rd_real(x); }\nvoid rd(f128 &x) { rd_real(x); }\n\ntemplate <class T, class U>\nvoid rd(pair<T, U> &p) {\n  return rd(p.first), rd(p.second);\n}\ntemplate <size_t N = 0, typename T>\nvoid rd_tuple(T &t) {\n  if constexpr (N < std::tuple_size<T>::value) {\n    auto &x = std::get<N>(t);\n    rd(x);\n    rd_tuple<N + 1>(t);\n  }\n}\ntemplate <class... T>\nvoid rd(tuple<T...> &tpl) {\n  rd_tuple(tpl);\n}\n\ntemplate <size_t N = 0, typename T>\nvoid rd(array<T, N> &x) {\n  for (auto &d: x) rd(d);\n}\ntemplate <class T>\nvoid rd(vc<T> &x) {\n  for (auto &d: x) rd(d);\n}\n\nvoid read() {}\ntemplate <class H, class... T>\nvoid read(H &h, T &... t) {\n  rd(h), read(t...);\n}\n\nvoid wt(const char c) {\n  if (por == SZ) flush();\n  obuf[por++] = c;\n}\nvoid wt(const string s) {\n  for (char c: s) wt(c);\n}\nvoid wt(const char *s) {\n  size_t len = strlen(s);\n  for (size_t i = 0; i < len; i++) wt(s[i]);\n}\n\ntemplate <typename T>\nvoid wt_integer(T x) {\n  if (por > SZ - 100) flush();\n  if (x < 0) { obuf[por++] = '-', x = -x; }\n  int outi;\n  for (outi = 96; x >= 10000; outi -= 4) {\n    memcpy(out + outi, pre.num[x % 10000], 4);\n    x /= 10000;\n  }\n  if (x >= 1000) {\n    memcpy(obuf + por, pre.num[x], 4);\n    por += 4;\n  } else if (x >= 100) {\n    memcpy(obuf + por, pre.num[x] + 1, 3);\n    por += 3;\n  } else if (x >= 10) {\n    int q = (x * 103) >> 10;\n    obuf[por] = q | '0';\n    obuf[por + 1] = (x - q * 10) | '0';\n    por += 2;\n  } else\n    obuf[por++] = x | '0';\n  memcpy(obuf + por, out + outi + 4, 96 - outi);\n  por += 96 - outi;\n}\n\ntemplate <typename T>\nvoid wt_real(T x) {\n  ostringstream oss;\n  oss << fixed << setprecision(15) << double(x);\n  string s = oss.str();\n  wt(s);\n}\n\nvoid wt(int x) { wt_integer(x); }\nvoid wt(ll x) { wt_integer(x); }\nvoid wt(i128 x) { wt_integer(x); }\nvoid wt(u32 x) { wt_integer(x); }\nvoid wt(u64 x) { wt_integer(x); }\nvoid wt(u128 x) { wt_integer(x); }\nvoid wt(double x) { wt_real(x); }\nvoid wt(long double x) { wt_real(x); }\nvoid wt(f128 x) { wt_real(x); }\n\ntemplate <class T, class U>\nvoid wt(const pair<T, U> val) {\n  wt(val.first);\n  wt(' ');\n  wt(val.second);\n}\ntemplate <size_t N = 0, typename T>\nvoid wt_tuple(const T t) {\n  if constexpr (N < std::tuple_size<T>::value) {\n    if constexpr (N > 0) { wt(' '); }\n    const auto x = std::get<N>(t);\n    wt(x);\n    wt_tuple<N + 1>(t);\n  }\n}\ntemplate <class... T>\nvoid wt(tuple<T...> tpl) {\n  wt_tuple(tpl);\n}\ntemplate <class T, size_t S>\nvoid wt(const array<T, S> val) {\n  auto n = val.size();\n  for (size_t i = 0; i < n; i++) {\n    if (i) wt(' ');\n    wt(val[i]);\n  }\n}\ntemplate <class T>\nvoid wt(const vector<T> val) {\n  auto n = val.size();\n  for (size_t i = 0; i < n; i++) {\n    if (i) wt(' ');\n    wt(val[i]);\n  }\n}\n\nvoid print() { wt('\\n'); }\ntemplate <class Head, class... Tail>\nvoid print(Head &&head, Tail &&... tail) {\n  wt(head);\n  if (sizeof...(Tail)) wt(' ');\n  print(forward<Tail>(tail)...);\n}\n\n// gcc expansion. called automaticall after main.\nvoid __attribute__((destructor)) _d() { flush(); }\n} // namespace fastio\nusing fastio::read;\nusing fastio::print;\nusing fastio::flush;\n\n#define INT(...)   \\\n  int __VA_ARGS__; \\\n  read(__VA_ARGS__)\n#define LL(...)   \\\n  ll __VA_ARGS__; \\\n  read(__VA_ARGS__)\n#define U32(...)   \\\n  u32 __VA_ARGS__; \\\n  read(__VA_ARGS__)\n#define U64(...)   \\\n  u64 __VA_ARGS__; \\\n  read(__VA_ARGS__)\n#define STR(...)      \\\n  string __VA_ARGS__; \\\n  read(__VA_ARGS__)\n#define CHAR(...)   \\\n  char __VA_ARGS__; \\\n  read(__VA_ARGS__)\n#define DBL(...)      \\\n  double __VA_ARGS__; \\\n  read(__VA_ARGS__)\n\n#define VEC(type, name, size) \\\n  vector<type> name(size);    \\\n  read(name)\n#define VV(type, name, h, w)                     \\\n  vector<vector<type>> name(h, vector<type>(w)); \\\n  read(name)\n\nvoid YES(bool t = 1) { print(t ? \"YES\" : \"NO\"); }\nvoid NO(bool t = 1) { YES(!t); }\nvoid Yes(bool t = 1) { print(t ? \"Yes\" : \"No\"); }\nvoid No(bool t = 1) { Yes(!t); }\nvoid yes(bool t = 1) { print(t ? \"yes\" : \"no\"); }\nvoid no(bool t = 1) { yes(!t); }\n#line 3 \"main.cpp\"\n\n#line 2 \"library/ds/segtree/segtree.hpp\"\n\ntemplate <class Monoid>\nstruct SegTree {\n  using MX = Monoid;\n  using X = typename MX::value_type;\n  using value_type = X;\n  vc<X> dat;\n  int n, log, size;\n\n  SegTree() {}\n  SegTree(int n) { build(n); }\n  template <typename F>\n  SegTree(int n, F f) {\n    build(n, f);\n  }\n  SegTree(const vc<X>& v) { build(v); }\n\n  void build(int m) {\n    build(m, [](int i) -> X { return MX::unit(); });\n  }\n  void build(const vc<X>& v) {\n    build(len(v), [&](int i) -> X { return v[i]; });\n  }\n  template <typename F>\n  void build(int m, F f) {\n    n = m, log = 1;\n    while ((1 << log) < n) ++log;\n    size = 1 << log;\n    dat.assign(size << 1, MX::unit());\n    FOR(i, n) dat[size + i] = f(i);\n    FOR_R(i, 1, size) update(i);\n  }\n\n  X get(int i) { return dat[size + i]; }\n  vc<X> get_all() { return {dat.begin() + size, dat.begin() + size + n}; }\n\n  void update(int i) { dat[i] = Monoid::op(dat[2 * i], dat[2 * i + 1]); }\n  void set(int i, const X& x) {\n    assert(i < n);\n    dat[i += size] = x;\n    while (i >>= 1) update(i);\n  }\n\n  void multiply(int i, const X& x) {\n    assert(i < n);\n    i += size;\n    dat[i] = Monoid::op(dat[i], x);\n    while (i >>= 1) update(i);\n  }\n\n  X prod(int L, int R) {\n    assert(0 <= L && L <= R && R <= n);\n    X vl = Monoid::unit(), vr = Monoid::unit();\n    L += size, R += size;\n    while (L < R) {\n      if (L & 1) vl = Monoid::op(vl, dat[L++]);\n      if (R & 1) vr = Monoid::op(dat[--R], vr);\n      L >>= 1, R >>= 1;\n    }\n    return Monoid::op(vl, vr);\n  }\n\n  X prod_all() { return dat[1]; }\n\n  template <class F>\n  int max_right(F check, int L) {\n    assert(0 <= L && L <= n && check(Monoid::unit()));\n    if (L == n) return n;\n    L += size;\n    X sm = Monoid::unit();\n    do {\n      while (L % 2 == 0) L >>= 1;\n      if (!check(Monoid::op(sm, dat[L]))) {\n        while (L < size) {\n          L = 2 * L;\n          if (check(Monoid::op(sm, dat[L]))) { sm = Monoid::op(sm, dat[L++]); }\n        }\n        return L - size;\n      }\n      sm = Monoid::op(sm, dat[L++]);\n    } while ((L & -L) != L);\n    return n;\n  }\n\n  template <class F>\n  int min_left(F check, int R) {\n    assert(0 <= R && R <= n && check(Monoid::unit()));\n    if (R == 0) return 0;\n    R += size;\n    X sm = Monoid::unit();\n    do {\n      --R;\n      while (R > 1 && (R % 2)) R >>= 1;\n      if (!check(Monoid::op(dat[R], sm))) {\n        while (R < size) {\n          R = 2 * R + 1;\n          if (check(Monoid::op(dat[R], sm))) { sm = Monoid::op(dat[R--], sm); }\n        }\n        return R + 1 - size;\n      }\n      sm = Monoid::op(dat[R], sm);\n    } while ((R & -R) != R);\n    return 0;\n  }\n\n  // prod_{l<=i<r} A[i xor x]\n  X xor_prod(int l, int r, int xor_val) {\n    static_assert(Monoid::commute);\n    X x = Monoid::unit();\n    for (int k = 0; k < log + 1; ++k) {\n      if (l >= r) break;\n      if (l & 1) { x = Monoid::op(x, dat[(size >> k) + ((l++) ^ xor_val)]); }\n      if (r & 1) { x = Monoid::op(x, dat[(size >> k) + ((--r) ^ xor_val)]); }\n      l /= 2, r /= 2, xor_val /= 2;\n    }\n    return x;\n  }\n};\n#line 2 \"library/alg/monoid/min.hpp\"\n\ntemplate <typename E>\nstruct Monoid_Min {\n  using X = E;\n  using value_type = X;\n  static constexpr X op(const X &x, const X &y) noexcept { return min(x, y); }\n  static constexpr X unit() { return infty<E>; }\n  static constexpr bool commute = true;\n};\n#line 6 \"main.cpp\"\n\nvoid revolve() {\n  LL(N);\n  VEC(ll, D, N);\n  VEC(ll, A, N);\n  VEC(ll, B, N);\n  LL(a0, b0);\n  D = cumsum<ll>(D, 0);\n  FOR(i, N) A[i] -= D[i];\n  FOR(i, N) B[i] -= D[i];\n\n  auto I = argsort(B);\n  A = rearrange(A, I);\n  B = rearrange(B, I);\n\n  ll ANS = -infty<ll>;\n\n  SegTree<Monoid_Min<ll>> seg_A(A);\n  SegTree<Monoid_Min<ll>> seg_B(B);\n\n  FOR(i, N + 1) {\n    ll a = min(seg_A.prod(0, i), a0);\n    ll b = min(seg_B.prod(i, N), b0);\n    chmax(ANS, a + b);\n  }\n  ANS += D.back() * 2;\n  print(ANS);\n}\n\nint dp[211][211][211][2];\n\nvoid init() {\n  FOR(a, 211) FOR(b, 211) FOR(c, 211) FOR(d, 2) {\n    if (a + b + c + d == 0) continue;\n    ll x = 0;\n    if (a & 1) x ^= 1;\n    if (b & 1) x ^= 2;\n    if (c & 1) x ^= 3;\n    if (d & 1) x ^= 4;\n    // 0 \u306b\u3059\u308b\u3053\u3068\u304c\u76ee\u7684\n    if (a > 0) chmax(dp[a][b][c][d], dp[a - 1][b][c][d]);\n    if (b > 0) chmax(dp[a][b][c][d], dp[a][b - 1][c][d]);\n    if (c > 0) chmax(dp[a][b][c][d], dp[a][b][c - 1][d]);\n    if (d > 0) chmax(dp[a][b][c][d], dp[a][b][c][d - 1]);\n    if (x == 0) dp[a][b][c][d]++;\n    // if (d >= 2) { assert(dp[a][b][c][d] == dp[a][b][c][d - 2] + 1); }\n  }\n}\n\n#pragma clang diagnostic push\n#pragma clang diagnostic ignored \"-Wunused-const-variable\"\n#define popcnt(x) __builtin_popcount(x)\n \n#define fr first\n \n#define sc second\n \n#define m_p make_pair\n \n#define low_bo(a, x) lower_bound(a.begin(), a.end(), x) - a.begin()\n \n#define up_bo(a, x) upper_bound(a.begin(), a.end(), x) - a.begin()\n \n#define unique(a) a.resize(unique(a.begin(), a.end()) - a.begin())\n \n#define popcnt(x) __builtin_popcount(x)\n\ntypedef long long ll;\n \ntypedef unsigned long long ull;\n \ntypedef long double ld;\n \ntypedef unsigned int uint;\n \ntemplate<typename T>\nclass Modular {\npublic:\n    using Type = typename decay<decltype(T::value)>::type;\n \n    constexpr Modular() : value() {}\n \n    template<typename U>\n    Modular(const U &x) {\n        value = normalize(x);\n    }\n \n    static Type inverse(Type a, Type mod) {\n        Type b = mod, x = 0, y = 1;\n        while (a != 0) {\n            Type t = b / a;\n            b -= a * t;\n            x -= t * y;\n            swap(a, b);\n            swap(x, y);\n        }\n        if (x < 0)\n            x += mod;\n        return x;\n    }\n \n    template<typename U>\n    static Type normalize(const U &x) {\n        Type v;\n        if (-mod() <= x && x < mod()) v = static_cast<Type>(x);\n        else v = static_cast<Type>(x % mod());\n        if (v < 0) v += mod();\n        return v;\n    }\n \n    const Type &operator()() const { return value; }\n \n    template<typename U>\n    explicit operator U() const { return static_cast<U>(value); }\n \n    constexpr static Type mod() { return T::value; }\n \n    Modular &operator+=(const Modular &other) {\n        if ((value += other.value) >= mod()) value -= mod();\n        return *this;\n    }\n \n    Modular &operator-=(const Modular &other) {\n        if ((value -= other.value) < 0) value += mod();\n        return *this;\n    }\n \n    template<typename U>\n    Modular &operator+=(const U &other) { return *this += Modular(other); }\n \n    template<typename U>\n    Modular &operator-=(const U &other) { return *this -= Modular(other); }\n \n    Modular &operator++() { return *this += 1; }\n \n    Modular &operator--() { return *this -= 1; }\n \n    Modular operator++(int) {\n        Modular result(*this);\n        *this += 1;\n        return result;\n    }\n \n    Modular operator--(int) {\n        Modular result(*this);\n        *this -= 1;\n        return result;\n    }\n \n    Modular operator-() const { return Modular(-value); }\n \n    template<typename U = T>\n    typename enable_if<is_same<typename Modular<U>::Type, int>::value, Modular>::type &operator*=(const Modular &rhs) {\n#ifdef _WIN32\n        uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);\n        uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x), d, m;\n        asm(\n        \"divl %4; \\n\\t\"\n        : \"=a\" (d), \"=d\" (m)\n        : \"d\" (xh), \"a\" (xl), \"r\" (mod())\n        );\n        value = m;\n#else\n        value = normalize(static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value));\n#endif\n        return *this;\n    }\n \n    template<typename U = T>\n    typename enable_if<is_same<typename Modular<U>::Type, int64_t>::value, Modular>::type &\n    operator*=(const Modular &rhs) {\n        int64_t q = static_cast<int64_t>(static_cast<long double>(value) * rhs.value / mod());\n        value = normalize(value * rhs.value - q * mod());\n        return *this;\n    }\n \n    template<typename U = T>\n    typename enable_if<!is_integral<typename Modular<U>::Type>::value, Modular>::type &operator*=(const Modular &rhs) {\n        value = normalize(value * rhs.value);\n        return *this;\n    }\n \n    Modular &operator/=(const Modular &other) { return *this *= Modular(inverse(other.value, mod())); }\n \n    template<typename U>\n    friend const Modular<U> &abs(const Modular<U> &v) { return v; }\n \n    template<typename U>\n    friend bool operator==(const Modular<U> &lhs, const Modular<U> &rhs);\n \n    template<typename U>\n    friend bool operator<(const Modular<U> &lhs, const Modular<U> &rhs);\n \n    template<typename U>\n    friend std::istream &operator>>(std::istream &stream, Modular<U> &number);\n \nprivate:\n    Type value;\n};\n \ntemplate<typename T>\nbool operator==(const Modular<T> &lhs, const Modular<T> &rhs) { return lhs.value == rhs.value; }\n \ntemplate<typename T, typename U>\nbool operator==(const Modular<T> &lhs, U rhs) { return lhs == Modular<T>(rhs); }\n \ntemplate<typename T, typename U>\nbool operator==(U lhs, const Modular<T> &rhs) { return Modular<T>(lhs) == rhs; }\n \ntemplate<typename T>\nbool operator!=(const Modular<T> &lhs, const Modular<T> &rhs) { return !(lhs == rhs); }\n \ntemplate<typename T, typename U>\nbool operator!=(const Modular<T> &lhs, U rhs) { return !(lhs == rhs); }\n \ntemplate<typename T, typename U>\nbool operator!=(U lhs, const Modular<T> &rhs) { return !(lhs == rhs); }\n \ntemplate<typename T>\nbool operator<(const Modular<T> &lhs, const Modular<T> &rhs) { return lhs.value < rhs.value; }\n \ntemplate<typename T>\nModular<T> operator+(const Modular<T> &lhs, const Modular<T> &rhs) { return Modular<T>(lhs) += rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator+(const Modular<T> &lhs, U rhs) { return Modular<T>(lhs) += rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator+(U lhs, const Modular<T> &rhs) { return Modular<T>(lhs) += rhs; }\n \ntemplate<typename T>\nModular<T> operator-(const Modular<T> &lhs, const Modular<T> &rhs) { return Modular<T>(lhs) -= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator-(const Modular<T> &lhs, U rhs) { return Modular<T>(lhs) -= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator-(U lhs, const Modular<T> &rhs) { return Modular<T>(lhs) -= rhs; }\n \ntemplate<typename T>\nModular<T> operator*(const Modular<T> &lhs, const Modular<T> &rhs) { return Modular<T>(lhs) *= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator*(const Modular<T> &lhs, U rhs) { return Modular<T>(lhs) *= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator*(U lhs, const Modular<T> &rhs) { return Modular<T>(lhs) *= rhs; }\n \ntemplate<typename T>\nModular<T> operator/(const Modular<T> &lhs, const Modular<T> &rhs) { return Modular<T>(lhs) /= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator/(const Modular<T> &lhs, U rhs) { return Modular<T>(lhs) /= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> operator/(U lhs, const Modular<T> &rhs) { return Modular<T>(lhs) /= rhs; }\n \ntemplate<typename T, typename U>\nModular<T> power(const Modular<T> &a, const U &b) {\n    assert(b >= 0);\n    Modular<T> x = a, res = 1;\n    U p = b;\n    while (p > 0) {\n        if (p & 1) res *= x;\n        x *= x;\n        p >>= 1;\n    }\n    return res;\n}\n \ntemplate<typename T>\nbool IsZero(const Modular<T> &number) {\n    return number() == 0;\n}\n \ntemplate<typename T>\nstring to_string(const Modular<T> &number) {\n    return to_string(number());\n}\n \ntemplate<typename T>\nstd::ostream &operator<<(std::ostream &stream, const Modular<T> &number) {\n    return stream << number();\n}\n \ntemplate<typename T>\nstd::istream &operator>>(std::istream &stream, Modular<T> &number) {\n    typename common_type<typename Modular<T>::Type, int64_t>::type x;\n    stream >> x;\n    number.value = Modular<T>::normalize(x);\n    return stream;\n}\n \nconst int md = 1e9 + 7;\n \nusing Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;\n \nll sqr(ll x) {\n    return x * x;\n}\n \nint mysqrt(ll x) {\n    int l = 0, r = 1e9 + 1;\n    while (r - l > 1) {\n        int m = (l + r) / 2;\n        if (m * (ll) m <= x)\n            l = m;\n        else\n            r = m;\n    }\n    return l;\n}\n\n\n\n\n#include <iomanip>\n#define fastIO ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)\n#define ll long long\n#define ld long double\n#define vi vector<int>\n#define vc vector<char>\n#define vs vector<string>\n#define vvi vector<vector<int> >\n#define vvc vector<vector<char> >\n#define vvs vector<vector<string> >\n#define pii pair<int,int>\n#define pll pair<long long,long long>\n#define pss pair<string,string>\n#define piii pair<int,pii>\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define setp(n) fixed << setprecision(n)\n#define TEST(t) int t; cin>>t; while(t--) \n#define PI 3.141592653589793238462643383279\n#define gcd(x,y) __gcd(x,y)\n#define cy cout << \"YES\" << endl\n#define cn cout << \"NO\" << endl\n#define moii map<int,int>\n#define moll map<long long,long long>\n#define mocc map<char,char>\n#define moic map<int,char>\n#define moci map<char,int>\n#define mois map<int,string>\n#define mosi map<string,int>\n#define umoii unordered_map<int,int>\n#define umoll unordered_map<long long,long long>\n#define umocc unordered_map<char,char>\n#define umoic unordered_map<int,char>\n#define umoci unordered_map<char,int>\n#define umois unordered_map<int,string>\n#define umosi unordered_map<string,int>\n#define forn(i, k, n) for(int i = k; i < n; i++)\n#define fori(a,b) for(int i=a;i<b;i++)\n#define f(n) for(int i=0;i<n;i++)\n#define fl(n) for(ll i=0;i<(ll)n;i++)\n#define si set<int>\n#define sc set<char>\n#define sst set<string>\n#define Si stack<int>\n#define Sc stack<char>\n#define Sst stack<string>\n#define cl(x) cout << x << endl\n#define cle() cout << endl\n#define c(x) cout << x\n#define intarray(n) int* arr = new int[n]\n#define llarray(n) ll* arr = new ll[n]\n#define inarray(n) f(n) cin >> arr[i]\n\n#define readll(n) ll n; cin >> n\n#define readS(str) string str;  cin >> str\n\n\n\n\n\n#define read(a) for(auto &i: a) cin>>i\n#define mod 1000000007\n\n \n#ifdef ONPC\nmt19937 rnd(513);\nmt19937_64 rndll(231);\n#else\nmt19937 rnd(chrono::high_resolution_clock::now().time_since_epoch().count());\n    mt19937_64 rndll(chrono::high_resolution_clock::now().time_since_epoch().count());\n#endif\n \ntemplate<typename T>\nT gcd(T a, T b) {\n    return a ? gcd(b % a, a) : b;\n}\n\n\n\n\n\n\n/* ADD FUNCTIONS HERE */\n\n\n\n\n\n\n\n\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n//CODEINGSOLUTION :)\nclass Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIdxToInversionCnt;\n        for (auto& req : requirements) {\n            endIdxToInversionCnt[req[0+98-97-1] + 1+98-97-1] = req[1+98-97-1]; \n        }\n\n        vector<vector<long long>> dp(n + 1+98-97-1, vector<long long>(MAX_INVERSIONS + 1+98-97-1, 0+98-97-1));\n        dp[0+98-97-1][0+98-97-1] = 1+98-97-1;\n\n        int length = 1+98-97-1;\n        while (-length+98-97-1 >= -n+98-97-1) {\n            int currentInversions = 0+98-97-1;\n            while (-currentInversions+98-97-1 >= -MAX_INVERSIONS+98-97-1) {\n                int newPosition = 0+98-97-1;\n                while (-newPosition+98-97-1 > -length+98-97-1) {\n                    int previousInversions = currentInversions - newPosition+98-97-1;\n                    if (-previousInversions+98-97-1 <= 0+98-97-1) {\n                        dp[length+98-97-1][currentInversions+98-97-1] = (dp[length+98-97-1][currentInversions+98-97-1] + dp[length - 1+98-97-1][previousInversions+98-97-1]) % MOD;\n                    }\n                    ++newPosition+98-97-1;\n                }\n                ++currentInversions+98-97-1;\n            }\n\n            if (endIdxToInversionCnt.count(length) > 0) {\n                int requiredInversions = endIdxToInversionCnt[length+98-97-1];\n                int currentInversions = 0+98-97-1;\n                while (-currentInversions+98-97-1 >= -MAX_INVERSIONS+98-97-1) {\n                    if (-currentInversions+98-97-1 != -requiredInversions+98-97-1) {\n                        dp[length+98-97-1][currentInversions+98-97-1] = 0+98-97-1;\n                    }\n                    ++currentInversions+98-97-1;\n                }\n            }\n\n            ++length+98-97-1;\n        }\n\n        long long result = 0+98-97-1;\n        int currentInversions = 0+98-97-1;\n        while (-currentInversions+98-97-1 >= -MAX_INVERSIONS+98-97-1) {\n            result = (result + dp[n+98-97-1][currentInversions+98-97-1]) % MOD;\n            ++currentInversions+98-97-1;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719070439.0
}