{
    "username": "salyu",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int tbl[30][30][30][30];\n        int n = grid.size(), m = grid[0].size();\n        vector<int> rows(n), cols(m);\n        for (int r = 0; r < n; ++r) {\n            for (int c = 0; c < m; ++c) {\n                if (grid[r][c]) {\n                    rows[r] |= 1 << c;\n                    cols[c] |= 1 << r;\n                }\n            }\n        }\n        for (int t = 0; t < n; ++t) {\n            int R = 0;\n            for (int b = t; b < n; ++b) {\n                R |= rows[b];\n                for (int l = 0; l < m; ++l) {\n                    int C = 0;\n                    for (int r = l; r < m; ++r) {\n                        C |= cols[r];\n                        int il = l, ir = r, it = t, ib = b;\n                        while (il < m && (R & (1 << il)) == 0) { ++il; }\n                        while (ir >= 0 && (R & (1 << ir)) == 0) { --ir; }\n                        while (it < n && (C & (1 << it)) == 0) { ++it; }\n                        while (ib >= 0 && (C & (1 << ib)) == 0) { --ib; }\n                        tbl[l][t][r][b] = max(0, ir - il + 1) * max(0, ib - it + 1);\n                        //cout << l << \" \" << t << \" \" << r << \" \" << b << \" \" << \"    : \" << tbl[l][t][r][b] << endl;\n                    }\n                }\n            }\n        }\n        constexpr int INV = 100000;\n        auto rest = [&](int l, int t, int r, int b) {\n            int res = INV;\n            for (int R = t; R < b; ++R) {\n                if (tbl[l][t][r][R] > 0 && tbl[l][R + 1][r][b] > 0) {\n                    res = min(res, tbl[l][t][r][R] + tbl[l][R + 1][r][b]);\n                }\n            }\n            for (int C = l; C < r; ++C) {\n                if (tbl[l][t][C][b] > 0 && tbl[C + 1][t][r][b] > 0) {\n                    res = min(res, tbl[l][t][C][b] + tbl[C + 1][t][r][b]);\n                }\n            }\n            return res;\n        };\n        auto divide = [&](int l, int t, int r, int b) {\n            int res = INV;\n            for (int R = t; R < b; ++R) {\n                if (tbl[l][t][r][R] > 0) {\n                    res = min(res, tbl[l][t][r][R] + rest(l, R + 1, r, b));\n                }\n                if (tbl[l][R + 1][r][b] > 0) {\n                    res = min(res, tbl[l][R + 1][r][b] + rest(l, t, r, R));\n                }\n            }\n            for (int C = l; C < r; ++C) {\n                if (tbl[l][t][C][b] > 0) {\n                    res = min(res, tbl[l][t][C][b] + rest(C + 1, t, r, b));\n                }\n                if (tbl[C + 1][t][r][b] > 0) {\n                    res = min(res, tbl[C + 1][t][r][b] + rest(l, t, C, b));\n                }\n            }\n            return res;\n        };\n        //cout << \"     \" << endl;\n        return divide(0, 0, m - 1, n - 1);\n    }\n};",
    "submit_ts": "1719115100",
    "subm_id": "1297360388"
}