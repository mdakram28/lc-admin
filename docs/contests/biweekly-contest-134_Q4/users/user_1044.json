{
    "username": "daksh_4103",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int target) {\n        long long subarrayCount = 0;\n        unordered_map<long long, long long> previousAndResults;\n        int arraySize = nums.size();\n\n        for (int i = 0; i < arraySize; ++i) {\n            unordered_map<long long, long long> currentAndResults;\n            \n            // Check if current element is equal to target\n            if (nums[i] == target) {\n                ++subarrayCount;\n            }\n            currentAndResults[nums[i]] = 1;\n\n            // Process previous results\n            processPreviousResults(previousAndResults, currentAndResults, nums[i], target, subarrayCount);\n            \n            previousAndResults = currentAndResults;\n        }\n        \n        return subarrayCount;\n    }\n\nprivate:\n    void processPreviousResults(unordered_map<long long, long long>& previousResults, unordered_map<long long, long long>& currentResults, int currentNum, int target, long long& count) {\n        for (auto& [andResult, frequency] : previousResults) {\n            long long newAndResult = andResult & currentNum;\n            if (newAndResult == target) {\n                count += frequency;\n            }\n            currentResults[newAndResult] += frequency;\n        }\n    }\n};",
    "submit_ts": "1720280550",
    "subm_id": "1311793587"
}