{
    "username": "\u5170\u8d1d\u516c",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n         int n = board.length;\n        int m = board[0].length;\n        int[][][] f = new int[n][3][3];\n        PriorityQueue<int[]> p = new PriorityQueue<>((o1, o2) -> (o1[2] - o2[2]));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (p.size() == 3) {\n                    if (board[i][j] > p.peek()[2]){\n                        p.poll();\n                        p.offer(new int[]{i, j, board[i][j]});\n                    }\n                    \n                }else {\n                    p.offer(new int[]{i, j, board[i][j]});\n                }\n            }\n            f[i][0] = p.poll();\n            f[i][1] = p.poll();\n            f[i][2] = p.poll();\n        }\n        boolean[] vis = new boolean[m];\n        Long ret = Long.MIN_VALUE;\n        long sum = 0;\n        for (int i = 0; i < n; i++) {\n            sum += f[i][2][2];\n            vis[f[i][2][1]] = true;\n            for (int j = 0; j < n; j++) {\n                if (j == i) continue;\n                int idx = vis[f[j][2][1]] ? 1 : 2;\n                vis[f[j][idx][1]] = true;\n                sum += f[j][idx][2];\n                for (int k = 0; k < n; k++) {\n                    if (k == i || k == j) continue;\n                    int idxK = !vis[f[k][2][1]] ? 2 : (!vis[f[k][1][1]] ? 1 : 0);\n                    ret = Math.max(sum + f[k][idxK][2], ret);\n                }\n                sum -= f[j][idx][2];\n                vis[f[j][idx][1]] = false;\n            }\n            vis[f[i][2][1]] = false;\n            sum -= f[i][2][2];\n        }\n        return ret;\n    }\n}",
    "submit_ts": "1723910393",
    "subm_id": "556341139"
}