{
    "username": "scotchtape",
    "submission": "template<class T> struct Seg { // comb(ID,b) = b\n    const T ID = (1LL<<33)-1; T comb(T a, T b) { return a&b; }\n    int n; vector<T> seg;\n    void init(int _n) { n = _n; seg.assign(2*n,ID); }\n    void pull(int p) { seg[p] = comb(seg[2*p],seg[2*p+1]); }\n    void upd(int p, T val) { // set val at position p\n        seg[p += n] = val; for (p /= 2; p; p /= 2) pull(p); }\n    T query(int l, int r) {\t// sum on interval [l, r]\n        T ra = ID, rb = ID;\n        for (l += n, r += n+1; l < r; l /= 2, r /= 2) {\n            if (l&1) ra = comb(ra,seg[l++]);\n            if (r&1) rb = comb(seg[--r],rb);\n        }\n        return comb(ra,rb);\n    }\n};\n\nusing ll = long long;\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& a, int k) {\n        ll n = a.size();\n        Seg<ll> seg; seg.init(n);\n        for (int i = 0; i < n; ++i) seg.upd(i, a[i]);\n\n        ll ans = 1e9;\n        for (int i = 0; i < n; ++i) {\n            int lo = i, hi = n-1;\n            lo--;\n            while (lo < hi) {\n                int mid = lo + (hi - lo + 1) / 2;\n                if (seg.query(i, mid) >= k) lo = mid;\n                else hi = mid - 1;\n            }\n\n            if (lo == i-1) ++lo;\n            if (lo >= i)\n                ans = min(ans, abs(seg.query(i, lo)-k));\n            if (lo+1 < n)\n                ans = min(ans, abs(seg.query(i, lo+1)-k));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717296170.0
}