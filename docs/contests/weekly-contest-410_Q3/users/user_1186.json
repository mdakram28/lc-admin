{
    "username": "Shivam002",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        const int MOD = 1e9 + 7;\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(1001, 0));  /// dp[i][j] means number of ways for arr1[i] = j\n\n        /// Initialize DP for the first element\n        for (int j = 0; j <= nums[0]; ++j) {\n            dp[0][j] = 1;  /// There's only one way to set arr1[0] and arr2[0] for each valid j\n        }\n\n        for (int i = 1; i < n; ++i) {\n            vector<int> new_dp(1001, 0);\n            \n            for (int j = 0; j <= nums[i]; ++j) {\n                int required_arr2 = nums[i] - j;\n                if (required_arr2 >= 0 && required_arr2 <= 1000) {\n                    /// Ensure arr1 is non-decreasing and arr2 is non-increasing\n                    for (int k = 0; k <= j; ++k) {  // We can only transition from a state where arr1[i-1] <= arr1[i]\n                        if (required_arr2 <= nums[i-1] - k) {  // /Ensure arr2[i-1] >= arr2[i]\n                            new_dp[j] = (new_dp[j] + dp[i-1][k]) % MOD;\n                        }\n                    }\n                }\n            }\n            dp[i] = new_dp;\n        }\n\n        // Sum up all the valid ways at the last idx\n        int result = 0;\n        for (int j = 0; j <= nums[n-1]; ++j) {\n            result = (result + dp[n-1][j]) % MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1723345056",
    "subm_id": "1351547669"
}