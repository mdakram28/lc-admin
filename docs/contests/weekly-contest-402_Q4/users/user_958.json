{
    "username": "krat9707",
    "submission": "static const int fast = []{\n    std::ios_base::sync_with_stdio(false);\n    std::cin.tie(0);\n    std::cout.tie(0);\n\n    return 0;\n}();\n\n\ntemplate <class T>\nclass segTree {\n    int n;\n    vector<T> t;\n    vector<T> nums;\n\n    bool isPeak(int index) {\n        if (index <= 0 || index >= n - 1) return false;\n        return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n    }\n\n    void build(int currNode, int l, int r) {\n        if (l == r) {\n            t[currNode] = isPeak(l) ? 1 : 0;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        build(currNode * 2, l, mid);\n        build(currNode * 2 + 1, mid + 1, r);\n        t[currNode] = t[currNode * 2] + t[currNode * 2 + 1];\n    }\n\n    void update(int pos, int currNode, int l, int r) {\n        if (l == r) {\n            t[currNode] = isPeak(l) ? 1 : 0;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        if (pos <= mid) {\n            update(pos, currNode * 2, l, mid);\n        } else {\n            update(pos, currNode * 2 + 1, mid + 1, r);\n        }\n        t[currNode] = t[currNode * 2] + t[currNode * 2 + 1];\n    }\n\n    int get(int currNode, int l, int r, int find_l, int find_r) {\n        if (l > find_r || r < find_l) return 0;\n        if (l >= find_l && r <= find_r) return t[currNode];\n        int mid = l + (r - l) / 2;\n        return get(currNode * 2, l, mid, find_l, find_r) + get(currNode * 2 + 1, mid + 1, r, find_l, find_r);\n    }\n\npublic:\n    segTree(vector<T>& arr) {\n        n = arr.size();\n        nums = arr;\n        t.resize(4 * n);\n        build(1, 0, n - 1);\n    }\n\n    int get(int l, int r) {\n        return get(1, 0, n - 1, l, r);\n    }\n\n    void update(int pos, T val) {\n        nums[pos] = val;\n        if (pos > 0) update(pos - 1, 1, 0, n - 1);\n        update(pos, 1, 0, n - 1);\n        if (pos < n - 1) update(pos + 1, 1, 0, n - 1);\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        segTree<int> seg(nums);\n        \n        vector<int> ans;\n        for(auto& q : queries)\n        {\n            if(q[0] == 1)\n            {\n                ans.push_back(seg.get(q[1]+1, q[2]-1));\n            }\n            else\n            {\n                seg.update(q[1], q[2]);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718508278.0
}