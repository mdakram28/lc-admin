{
    "username": "phungtienminh",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        ans = 10 ** 9\n        m = len(grid)\n        n = len(grid[0])\n        \n        if m == 1:\n            cnt = 0\n            for j in range(n):\n                if grid[0][j] == 1:\n                    cnt += 1\n                    \n            vec = []\n            temp = 0\n            \n            min_pos = -1\n            max_pos = 0\n            for j in range(n):\n                if grid[0][j] == 1:\n                    if min_pos == -1:\n                        min_pos = j\n                    \n                    max_pos = j\n                    \n            for j in range(min_pos, max_pos):\n                if grid[0][j] == 0:\n                    temp += 1\n                else:\n                    if temp > 0:\n                        vec.append(temp)\n                        temp = 0\n            \n            if temp > 0:\n                vec.append(temp)\n                \n            vec.sort(reverse=True)\n            for i in range(2, len(vec)):\n                cnt += vec[i]\n            \n            return cnt\n        \n        if n == 1:\n            cnt = 0\n            for j in range(m):\n                if grid[j][0] == 1:\n                    cnt += 1\n                    \n            vec = []\n            temp = 0\n            \n            min_pos = -1\n            max_pos = 0\n            for j in range(m):\n                if grid[j][0] == 1:\n                    if min_pos == -1:\n                        min_pos = j\n                    \n                    max_pos = j\n                    \n            for j in range(min_pos, max_pos):\n                if grid[j][0] == 0:\n                    temp += 1\n                else:\n                    if temp > 0:\n                        vec.append(temp)\n                        temp = 0\n            \n            if temp > 0:\n                vec.append(temp)\n                \n            vec.sort(reverse=True)\n            for i in range(2, len(vec)):\n                cnt += vec[i]\n            \n            return cnt\n        \n        def calc_area(min_x, min_y, max_x, max_y):\n            return max(0, max(max_x - min_x + 1, 0) * max(max_y - min_y + 1, 0))\n        \n        def find_rect_area(start_x, start_y, end_x, end_y):\n            min_x, min_y = 1000, 1000\n            max_x, max_y = -1, -1\n\n            for x in range(start_x, end_x + 1):\n                for y in range(start_y, end_y + 1):\n                    if grid[x][y] == 1:\n                        min_x = min(min_x, x)\n                        max_x = max(max_x, x)\n                        min_y = min(min_y, y)\n                        max_y = max(max_y, y)\n                        \n            return calc_area(min_x, min_y, max_x, max_y)\n        \n        for i in range(m - 1):\n            for j in range(n - 1):\n                # Case 1\n                total_area = 0\n                total_area += find_rect_area(0, 0, i, j)\n                total_area += find_rect_area(0, j + 1, i, n - 1)\n                total_area += find_rect_area(i + 1, 0, m - 1, n - 1)\n                ans = min(ans, total_area)\n                \n                # Case 2\n                total_area = 0\n                total_area += find_rect_area(0, 0, i, n - 1)\n                total_area += find_rect_area(i + 1, 0, m - 1, j)\n                total_area += find_rect_area(i + 1, j + 1, m - 1, n - 1)\n                ans = min(ans, total_area)\n                \n                # Case 3\n                total_area = 0\n                total_area += find_rect_area(0, 0, i, j)\n                total_area += find_rect_area(i + 1, 0, m - 1, j)\n                total_area += find_rect_area(0, j + 1, m - 1, n - 1)\n                ans = min(ans, total_area)\n                \n                # Case 4\n                total_area = 0\n                total_area += find_rect_area(0, 0, m - 1, j)\n                total_area += find_rect_area(0, j + 1, i, n - 1)\n                total_area += find_rect_area(i + 1, j + 1, m - 1, n - 1)\n                ans = min(ans, total_area)\n                \n        # Case 5\n        for i in range(m - 1):\n            for j in range(i + 1, m):\n                total_area = 0\n                total_area += find_rect_area(0, 0, i, n - 1)\n                total_area += find_rect_area(i + 1, 0, j, n - 1)\n                total_area += find_rect_area(j + 1, 0, m - 1, n - 1)\n                ans = min(ans, total_area)\n                \n        # Case 6\n        for i in range(n - 1):\n            for j in range(i + 1, n):\n                total_area = 0\n                total_area += find_rect_area(0, 0, m - 1, i)\n                total_area += find_rect_area(0, i + 1, m - 1, j)\n                total_area += find_rect_area(0, j + 1, m - 1, n - 1)\n                ans = min(ans, total_area)\n                \n        return ans\n                \n                ",
    "submit_ts": 1719111590.0
}