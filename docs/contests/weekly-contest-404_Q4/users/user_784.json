{
    "username": "Remineva",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        \n        g1 = [[] for _ in range(n)]\n        for i, j in edges1:\n            g1[i].append(j)\n            g1[j].append(i)\n        g2 = [[] for _ in range(m)]\n        for i, j in edges2:\n            g2[i].append(j)\n            g2[j].append(i)\n            \n        def find_dia(g):\n            d = [-1] * len(g)\n            def dfs(i):\n                for j in g[i]:\n                    if d[j] == -1:\n                        d[j] = d[i] + 1\n                        dfs(j)\n            d[0] = 0\n            dfs(0)\n            curr = 0\n            i = 0\n            for j, dd in enumerate(d):\n                if dd > curr:\n                    curr = dd\n                    i = j\n            d = [-1] * len(g)\n            d[i] = 0\n            dfs(i)\n            dd = max(d)\n            return dd\n        \n        if g1[0]:\n            d1 = find_dia(g1)\n        else:\n            d1 = 0\n\n        if g2[0]:\n            d2 = find_dia(g2)\n        else:\n            d2 = 0\n        \n        \n        if d1 & 1:\n            h1 = (d1 + 1) // 2\n            new = h1 + (d2 + 1) // 2 + 1\n            res = max(d1, d2)\n            return max(res, new)\n        else:\n            h1 = d1 // 2\n            new = h1 + (d2 + 1) // 2 + 1\n            res = max(d1, d2)\n            return max(res, new)\n        ",
    "submit_ts": 1719718776.0
}