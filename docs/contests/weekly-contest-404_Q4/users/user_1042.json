{
    "username": "kalpik888",
    "submission": "class Solution {\npublic:\nint dia1;\nint dia2;\nint mnode1;\nint mnode2;\n    void dfs(int node,vector<vector<int>> &adj,int par,int dis){\n    dis++;\n    for(auto i:adj[node]){\n        if(i!=par){\n            if(dis>dia1){\n                dia1=dis;\n                mnode1=i;\n            }\n            dfs(i,adj,node,dis);\n        }\n    }\n    return;\n}\n\n void dfss(int node,vector<vector<int>> &adj,int par,int dis){\n    dis++;\n    for(auto i:adj[node]){\n        if(i!=par){\n            if(dis>dia2){\n                dia2=dis;\n                mnode2=i;\n            }\n            dfss(i,adj,node,dis);\n        }\n    }\n    return;\n}\n\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n=e1.size(),m=e2.size();\n         \n        if(n==0 && m==0)return 1;\n        vector<vector<int>> adj1(n+1),adj2(m+1);\n        for(auto i:e1){\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);  \n\n        }\n        for(auto i:e2){\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n\n        }\n         dia1=0;\n         mnode1=-1;\n         if(n)\n        dfs(0,adj1,-1,0);\n        dia1=0;\n        if(n)\n        dfs(mnode1,adj1,-1,0);\n        dia2=0,mnode2=-1;\n        if(m)\n        dfss(0,adj2,-1,0);\n        dia2=0;\n        if(m)\n        dfss(mnode2,adj2,-1,0);\n       n++,m++;\n       // cout<<n<<\" \"<<m<<endl;\n       int h1=dia1/2;\n       int h2=dia2/2;\n       if(dia1&1)h1++;\n       if(dia2&1)h2++;\n       if(n==2 && m==2)return 3;\n       return max(max(dia1,dia2),h1+h2+1);\n        \n        if(n==2 && m>4)return max(dia1,dia2);\n        if(m==2 && n>4)return max(dia1,dia2);\n        if(dia1%2==0 && dia2%2==0 && dia1!=dia2){\n            return max(dia1,dia2);\n        }\n        else return max(dia1,dia2) +1;\n    }\n};",
    "submit_ts": 1719718041.0
}