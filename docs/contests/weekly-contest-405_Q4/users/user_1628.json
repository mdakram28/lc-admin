{
    "username": "unknown1313",
    "submission": "#define LL long long\n#define pb push_back\n\nclass Node {\n    public: \n    map<char, Node*> children;\n    vector<pair<int,int> > suffixes;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Node* root = new Node();\n        \n        int N = target.size();\n        int dp[N+5];\n        for(int i = 0; i <= N; i++) dp[i] = 1e9;\n        dp[0] = 0;\n        \n        for(int i = 0; i < words.size(); i++) {\n            string word = words[i];\n            \n            Node* node = root;\n            \n            for(auto c: word) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new Node();\n                }\n                node = node->children[c];\n            }\n            node->suffixes.pb({i, costs[i]});\n        }\n        \n        for(int i = 0; i < N; i++) {\n            if (dp[i] == 1e9) continue;\n            \n            Node* node = root;\n            for(int j = i; j < N; j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                \n                for(auto &next_node: node->suffixes) {\n                    int len = words[next_node.first].size();\n                    if (i + len <= N) {\n                        dp[i + len] = min(dp[i + len], dp[i] + next_node.second);\n                    }\n                }\n            }\n        }\n        \n        if (dp[N] == 1e9) return -1;\n        return dp[N];\n    }\n};",
    "submit_ts": "1720324322",
    "subm_id": "1312396736"
}