{
    "username": "iixre",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution(object):\n    def numberOfAlternatingGroups(self, colors, queries):\n        \"\"\"\n        :type colors: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        n = len(colors)\n        s = SortedList()\n        sum = [0] * (n + 1)\n        count = [0] * (n + 1)\n        r = []\n        for i in range(1, n):\n            if colors[i] == colors[i - 1]:\n                self.insert(n, i - 1, s, count, sum)\n        if colors[n - 1] == colors[0]:\n            self.insert(n, n - 1, s, count, sum)\n        for q in queries:\n            if q[0] == 1:\n                k = q[1]\n                r.append(n if not s else (self.getsum(n, sum) - self.getsum(k - 1, sum) - (k - 1) * (self.getsum(n, count) - self.getsum(k - 1, count))))\n            else:\n                ind = q[1]\n                if colors[ind] == q[2]:\n                    continue\n                colors[ind] = q[2]\n                before = (ind + n - 1) % n\n                if colors[ind] == colors[before]:\n                    self.insert(n, before, s, count, sum)\n                else:\n                    self.remove(n, before, s, count, sum)\n                after = (ind + 1) % n\n                if colors[ind] == colors[after]:\n                    self.insert(n, ind, s, count, sum)\n                else:\n                    self.remove(n, ind, s, count, sum)\n        return r\n    def lowbit(self, x):\n        return x & (-x)\n    def update(self, i, x, c):\n        if i == 0:\n            return\n        while i < len(c):\n            c[i] += x\n            i += self.lowbit(i)\n    def getsum(self, i, c):\n        r = 0\n        while i:\n            r += c[i]\n            i -= self.lowbit(i)\n        return r\n    def make(self, insert, t, n, s, count, sum):\n        if len(s) == 1:\n            self.update(n, 1 if insert else -1, count)\n            self.update(n, n if insert else -n, sum)\n        before = (t - 1 + len(s)) % len(s)\n        after = (t + 1) % len(s)\n        len1 = n if len(s) == 2 else (s[after] - s[before] + n) % n\n        self.update(len1, -1 if insert else 1, count)\n        self.update(len1, -len1 if insert else len1, sum)\n        len2 = (s[t] - s[before] + n) % n\n        self.update(len2, 1 if insert else -1, count)\n        self.update(len2, len2 if insert else -len2, sum)\n        len3 = (s[after] - s[t] + n) % n\n        self.update(len3, 1 if insert else -1, count)\n        self.update(len3, len3 if insert else -len3, sum)\n        if not insert:\n            s.pop(t)\n    def insert(self, n, x, s, count, sum):\n        s.add(x)\n        self.make(True, s.index(x), n, s, count, sum)\n    def remove(self, n, x, s, count, sum):\n        self.make(False, s.index(x), n, s, count, sum)",
    "submit_ts": "1722740936",
    "subm_id": "552334753"
}