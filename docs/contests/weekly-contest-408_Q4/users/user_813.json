{
    "username": "cogentcoder73",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    struct Circ {\n        ll x, y, r;\n        bool c1, c2;\n        Circ(int X, int Y, int R, int rx, int ry) {\n            x = X;\n            y = Y;\n            r = R;\n            c1 = x <= r || y >= ry - r;\n            c2 = x >= rx - r || y <= r;\n        }\n        bool intr(Circ o) {\n            return (o.x - x) * (o.x - x) + (o.y - y) * (o.y - y) <= (o.r + r) * (o.r + r);\n        }\n    };\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<Circ> c;\n        for (int i = 0; i < n; i++) {\n            c.push_back(Circ(circles[i][0], circles[i][1], circles[i][2], X, Y));\n            if (c[i].c1 && c[i].c2) return false;\n        }\n        vector<vector<int>> adj(n);\n        for (int i = 0; i < n - 1; i++) {\n            for (int j = 1; j < n; j++) {\n                if (c[i].intr(c[j])) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        vector<bool> visited(n, false);\n        queue<int> q;\n        int cur;\n        bool c1t;\n        for (int i = 0; i < n; i++) {\n            if (visited[i] || (!c[i].c1 && !c[i].c2)) continue;\n            c1t = c[i].c1;\n            q.push(i);\n            visited[i] = true;\n            while (!q.empty()) {\n                cur = q.front(); q.pop();\n                if (c[cur].c2 && c1t || c[cur].c1 && !c1t) return false;\n                for (int j : adj[cur]) {\n                    if (!visited[j]) {\n                        q.push(j);\n                        visited[j] = true;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138704",
    "subm_id": "1335797544"
}