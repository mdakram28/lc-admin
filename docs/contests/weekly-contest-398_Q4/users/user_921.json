{
    "username": "sharpcm",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    class Solver {\n    private:\n        unordered_map<int, vector<vector<int>>> memoization_table;\n\n        int calculate_ways(int target_step, int current_step, int current_jump, bool can_move_up) {\n             if (current_jump > 31)\n                return 0;\n            if (current_step > target_step + 5)\n                return 0;\n\n           \n\n            if (memoization_table.count(current_step) && memoization_table[current_step][current_jump][can_move_up] != -1)\n                return memoization_table[current_step][current_jump][can_move_up];\n\n            int number_of_ways = (current_step == target_step);\n            if (can_move_up)\n                number_of_ways += calculate_ways(target_step, current_step - 1, current_jump, false);\n            if (current_step + (1 << current_jump) <= target_step + 1)\n                number_of_ways += calculate_ways(target_step, current_step + (1 << current_jump), current_jump + 1, true);\n\n            memoization_table[current_step].resize(32, vector<int>(2, -1));\n\n            return memoization_table[current_step][current_jump][can_move_up] = number_of_ways;\n        }\n\n    public:\n        int solve(int k) {\n            return calculate_ways(k, 1, 0, true);\n        }\n    };\n\npublic:\n    int waysToReachStair(int k) {\n        Solver solver;\n        return solver.solve(k);\n    } \n};\n",
    "submit_ts": 1716089884.0
}