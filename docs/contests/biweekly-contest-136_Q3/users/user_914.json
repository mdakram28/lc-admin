{
    "username": "timothyleong97",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        const int m = grid.size();\n        const int n = grid.front().size();\n        int result = 0;\n\n        // For cells off the central tee, just synchronise them.\n        for (int i = 0; i < m / 2; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int sum = 0;\n                for (int row: {i, m - 1 - i}) {\n                    for (int col : {j, n - 1 - j}) {\n                        sum += grid[row][col];\n                    }\n                }\n                result += min(sum, 4 - sum);\n            }\n        }\n\n        // If you have a center, the center must become 0.\n        if ((m & 1) and (n & 1)) {\n            result += grid[m / 2][n / 2] == 1;\n        }\n        \n        // For the central row or column without the center, sum the total ones and zeros,\n        // then sum the total number of flips you need to make.\n        int tee_ones = 0;\n        int flips_needed = 0;\n\n        if (m & 1) {\n            for (int j = 0; j < n / 2; j++) {\n                if (grid[m / 2][j] == 1) {\n                    tee_ones++;\n                }\n\n                if (grid[m / 2][n - 1 -j] == 1) {\n                    tee_ones++;\n                }\n\n                if (grid[m / 2][j] != grid[m / 2][n - 1 - j]) {\n                    flips_needed++;\n                }\n            }\n        }\n\n        if (n & 1) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][n / 2] == 1) {\n                    tee_ones++;\n                }\n\n                if (grid[m - 1 - i][n / 2] == 1) {\n                    tee_ones++;\n                }\n\n                if (grid[i][n / 2] != grid[m - 1 - i][n / 2]) {\n                    flips_needed++;\n                }\n            }\n        }\n\n        int ones_to_delete = tee_ones % 4;\n        int ones_to_add = 4 - ones_to_delete;\n        int min_ones_adjustment = min(ones_to_delete, ones_to_add);\n        // if flips_needed is greater eq, then you can hit it, and the rest are flipped to zero.\n        // if flips_needed is less than min_ones_adjustment, then you need to flip the extra\n        result += max(flips_needed, min_ones_adjustment);\n        return result;\n    }\n};",
    "submit_ts": "1722698080",
    "subm_id": "1343169001"
}