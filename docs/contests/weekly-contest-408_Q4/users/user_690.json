{
    "username": "vijay9119y",
    "submission": "from collections import deque\nfrom typing import List\nimport math\n\n\nclass Solution:\n    def canReachCorner(self, targetX: int, targetY: int, circles: List[List[int]]) -> bool:\n        return self.solve(targetX, targetY, circles)\n    \n    def solve(self, targetX: int, targetY: int, circles: List[List[int]]) -> bool:\n        numCircles = len(circles)\n        graph = [[] for _ in range(numCircles + 4)]\n        \n        for i in range(numCircles):\n            x, y, radius = circles[i]\n            if x <= radius:\n                graph[numCircles].append(i)\n                graph[i].append(numCircles)\n            if targetX - x <= radius:\n                graph[numCircles + 2].append(i)\n                graph[i].append(numCircles + 2)\n            if y <= radius:\n                graph[numCircles + 1].append(i)\n                graph[i].append(numCircles + 1)\n            if targetY - y <= radius:\n                graph[numCircles + 3].append(i)\n                graph[i].append(numCircles + 3)\n            \n            for j in range(i + 1, numCircles):\n                otherX, otherY, otherRadius = circles[j]\n                distance = math.sqrt((x - otherX) ** 2 + (y - otherY) ** 2)\n                if radius + otherRadius >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        # Check for blocking paths\n        isBlocked = self.bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)\n        isBlocked = max(isBlocked, self.bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4))\n        \n        return isBlocked == 0\n    \n    def bfs(self, graph: List[List[int]], start: int, target1: int, target2: int, numNodes: int) -> int:\n        queue = deque([start])\n        visited = [False] * (numNodes + 4)\n        visited[start] = True\n        \n        while queue:\n            node = queue.popleft()\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    queue.append(neighbor)\n                    visited[neighbor] = True\n        \n        return 1 if visited[target1] or visited[target2] else 0\n",
    "submit_ts": "1722138346",
    "subm_id": "1335788424"
}