{
    "username": "codePriyanka",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        auto getDiam = [&](vector<vector<int>>& e) {\n            int n = e.size() + 1;\n            vector<vector<int>> adj(n);\n            for (auto& ed : e) {\n                adj[ed[0]].push_back(ed[1]);\n                adj[ed[1]].push_back(ed[0]);\n            }\n            \n            auto bfs = [&](int s) {\n                vector<int> d(n, -1);\n                queue<int> q;\n                q.push(s);\n                d[s] = 0;\n                int farNode = s;\n                \n                while (!q.empty()) {\n                    int u = q.front();\n                    q.pop();\n                    \n                    for (int v : adj[u]) {\n                        if (d[v] == -1) {\n                            d[v] = d[u] + 1;\n                            q.push(v);\n                            if (d[v] > d[farNode]) {\n                                farNode = v;\n                            }\n                        }\n                    }\n                }\n                \n                return make_pair(farNode, d[farNode]);\n            };\n            \n            auto firstBFS = bfs(0);\n            auto secondBFS = bfs(firstBFS.first);\n            \n            return secondBFS.second;\n        };\n\n        int d1 = getDiam(e1);\n        int d2 = getDiam(e2);\n        \n        int maxD1 = (d1 + 1) / 2;\n        int maxD2 = (d2 + 1) / 2;\n        \n        int newDiam = max(d1, d2);\n        newDiam = max(newDiam, maxD1 + maxD2 + 1);\n        \n        return newDiam;\n    }\n};\n",
    "submit_ts": "1719718846",
    "subm_id": "1304427550"
}