{
    "username": "DeepanshuJindal",
    "submission": "from typing import List\n\nclass Solution:\n    def __init__(self):\n        self.segmentTree = None\n        self.n = None\n\n    def buildSegmentTree(self, peaks, start, end, node):\n        if start == end:\n            self.segmentTree[node] = peaks[start]\n        else:\n            mid = start + (end - start) // 2\n            self.buildSegmentTree(peaks, start, mid, 2 * node + 1)\n            self.buildSegmentTree(peaks, mid + 1, end, 2 * node + 2)\n            self.segmentTree[node] = self.segmentTree[2 * node + 1] + self.segmentTree[2 * node + 2]\n\n    def updateSegmentTree(self, start, end, idx, value, node):\n        if start == end:\n            self.segmentTree[node] = value\n        else:\n            mid = start + (end - start) // 2\n            if idx <= mid:\n                self.updateSegmentTree(start, mid, idx, value, 2 * node + 1)\n            else:\n                self.updateSegmentTree(mid + 1, end, idx, value, 2 * node + 2)\n            self.segmentTree[node] = self.segmentTree[2 * node + 1] + self.segmentTree[2 * node + 2]\n\n    def querySegmentTree(self, start, end, l, r, node):\n        if r < start or l > end:\n            return 0\n        if l <= start and r >= end:\n            return self.segmentTree[node]\n        mid = start + (end - start) // 2\n        return self.querySegmentTree(start, mid, l, r, 2 * node + 1) + self.querySegmentTree(mid + 1, end, l, r, 2 * node + 2)\n\n    def isPeak(self, nums, n, i):\n        if i <= 0 or i >= n - 1:\n            return False\n        return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        self.n = len(nums)\n        results = []\n        peaks = [0] * self.n\n\n        for i in range(1, self.n - 1):\n            peaks[i] = 1 if self.isPeak(nums, self.n, i) else 0\n\n        self.segmentTree = [0] * (4 * self.n)\n        self.buildSegmentTree(peaks, 0, self.n - 1, 0)\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                results.append(self.querySegmentTree(0, self.n - 1, li + 1, ri - 1, 0))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                for i in range(max(1, indexi - 1), min(self.n - 2, indexi + 1) + 1):\n                    peakStatus = 1 if self.isPeak(nums, self.n, i) else 0\n                    self.updateSegmentTree(0, self.n - 1, i, peakStatus, 0)\n\n        return results\n\n\n",
    "submit_ts": 1718506857.0
}