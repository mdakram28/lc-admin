{
    "username": "agrawalh",
    "submission": "class Solution {\n    class Node {\n        int val;\n        int cost;\n        Node[] children;\n        boolean isWord;\n        public Node(int val) {\n            this.val = val;\n            this.cost = Integer.MAX_VALUE;\n            children = new Node[26];\n            isWord = false;\n        }\n    }\n    \n    private void insert(Node node, String w, int cost) {\n        Node root = node;\n        for(char ch : w.toCharArray()) {\n            int val = ch-'a';\n            if (root.children[val] == null) {\n                root.children[val] = new Node(val);\n            }\n            root = root.children[val];\n        }\n        root.isWord = true;\n        root.cost = Math.min(cost, root.cost);\n    }\n    \n    Node dummy = new Node(0);\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n+1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        for(int i = 0 ; i< words.length; i++) insert(dummy, words[i], costs[i]);\n        Queue<Integer> q = new LinkedList<>();\n        q.offer(1);\n        \n        while (!q.isEmpty()) {\n            int curInd = q.poll(), i = 0;\n            // System.out.println(\"curInd: \"+ curInd + \", dp[curInd]: \" + dp[curInd-1]);\n            Node tmp = dummy;\n            while (curInd+i <= n && tmp.children[target.charAt(curInd+i-1)-'a'] != null) {\n                tmp = tmp.children[target.charAt(curInd+i-1)-'a'];\n                if (tmp.isWord) {\n                    int newCost = Math.min(dp[curInd+i], dp[curInd-1]+tmp.cost);\n                    if (newCost < dp[curInd+i]) q.offer(curInd+i+1);\n                    dp[curInd+i] = newCost;\n                }\n                i++;\n            }\n        }\n        if (dp[n] == Integer.MAX_VALUE) return -1;\n        return dp[n];\n    }\n}",
    "submit_ts": "1720321716",
    "subm_id": "1312330397"
}