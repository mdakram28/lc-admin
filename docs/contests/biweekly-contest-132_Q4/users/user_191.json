{
    "username": "_sajid",
    "submission": "class Solution {\n    private int arr[];\n    private Integer memo[][];\n    private int solve(int i, int k) {\n        if (i >= arr.length) return 0;\n        if (k < 0) return 0;\n        int ans = 0;\n        \n        if (memo[i][k] != null) return memo[i][k];\n        \n        for (int x = i + 1; x < arr.length; x++) {\n            if (arr[x] == arr[i])\n                ans = Math.max(ans, solve(x, k));\n            else\n                ans = Math.max(ans, solve(x, k - 1));\n        }\n        return memo[i][k] = ans + 1;\n    }\n    \n    public int maximumLength(int[] arr, int K) {\n        int dp[][] = new int[arr.length][K + 1];\n        \n        int prevmax[] = new int[arr.length];\n        for (int k = 0; k <= K; k++) {\n            Map<Integer, Integer> same = new HashMap<>(); //element => max dp\n            int curmax[] = new int[arr.length];\n            for (int i = arr.length - 1; i >= 0; i--) {\n                dp[i][k] = 1;\n                \n                //fetch from hash map\n                dp[i][k] = Math.max(\n                    dp[i][k],\n                    Math.max(\n                        1 + same.getOrDefault(arr[i], 0),\n                        (((i + 1) < arr.length) ? (1 + prevmax[i + 1]) : 1)\n                    )                  \n               );\n                \n                //save to hash map\n                final int curdp = dp[i][k];\n                same.compute(arr[i], (key, val) -> {\n                    if (val == null) val = 0;\n                    if (val < curdp) return curdp;\n                    return val;\n                });\n                curmax[i] = Math.max(i + 1 < curmax.length ? curmax[i + 1] : 0, dp[i][k]);\n                \n                // for (int x = i + 1; x < arr.length; x++) {\n                //     if (arr[x] == arr[i])\n                //         dp[i][k] = Math.max(dp[i][k], 1 + dp[x][k]);\n                //     else if (k > 0)\n                //         dp[i][k] = Math.max(dp[i][k], 1 + dp[x][k - 1]);\n                // }\n                \n                \n                \n            }\n            prevmax = curmax;\n        }\n        int ans = 0;\n        for (int i = 0; i < arr.length; i++)\n            ans = Math.max(ans, dp[i][K]);\n        return ans;\n        \n        \n        \n        \n        \n        // arr = nums;\n        // int ans = 0;\n        // memo = new Integer[nums.length][k + 1];\n        // for (int i = 0; i < nums.length; i++)\n        //     ans = Math.max(ans, solve(i, k));\n        // // for (int i = 0; i <= 125000000; i++)\n        // //     ans += ans - 1;\n        // return ans;\n    }\n}",
    "submit_ts": "1717860833",
    "subm_id": "1281770880"
}