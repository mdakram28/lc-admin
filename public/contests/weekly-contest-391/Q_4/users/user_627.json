{
    "username": "ChenJiale",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        sort(points.begin(), points.end());\n        int n = points.size();\n        vector<vector<pair<int, int>>> p(4, vector<pair<int, int>>(n));\n        for (int i = 0; i < n; ++i) {\n            int x = points[i][0], y = points[i][1];\n            p[0][i] = {x - y, i};        \n            p[1][i] = {x + y, i};\n            p[2][i] = {-x - y, i};\n            p[3][i] = {-x + y, i};\n        }\n        for (int i = 0; i < 4; ++i)\n            sort(p[i].begin(), p[i].end());\n        int ans = INT_MAX;\n        int cur = -INT_MAX;\n        vector<int> farthest_p;\n        for (int j = 0; j < 4; ++j)\n            if (p[j].back().first - p[j].front().first > cur) {\n                cur = p[j].back().first - p[j].front().first;\n                farthest_p = {p[j].front().second, p[j].back().second};\n            }\n        \n        vector<vector<pair<int, int>>> backup = p;\n        for (int i = 0; i < 2; ++i) {\n            int target = farthest_p[i];\n            for (int j = 0; j < 4; ++j)\n                p[j].erase(find_if(p[j].begin(), p[j].end(), [target](const pair<int, int>& a) {\n                    return a.second == target;\n                }));\n            for (int j = 0; j < 4; ++j)\n                sort(p[j].begin(), p[j].end());\n            cur = 0;\n            for (int j = 0; j < 4; ++j)\n                cur = max(cur, p[j].back().first - p[j].front().first);\n            ans = min(ans, cur);\n            p = backup;\n        }\n        \n        return ans;\n    }\n};"
}