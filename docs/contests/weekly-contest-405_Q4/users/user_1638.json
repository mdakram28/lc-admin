{
    "username": "saumya1_sakshi",
    "submission": "class Solution {\npublic:\n struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new TrieNode();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> memo(n + 1, INT_MAX);\n        memo[0] = 0;\n\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n\n        for (int p2 = 0; p2 < n; ++p2) {\n            if (memo[p2] == INT_MAX) continue;\n\n            TrieNode* node = t.root;\n            for (int j = p2; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto& p : node->wordEnds) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (p2 + len <= n) {\n                        memo[p2 + len] = min(memo[p2 + len], memo[p2] + wordCost);\n                    }\n                }\n            }\n        }\n\n        if(memo[n] == INT_MAX) return -1 ;\nreturn memo[n];\n    }\n};",
    "submit_ts": "1720324656",
    "subm_id": "1312404848"
}