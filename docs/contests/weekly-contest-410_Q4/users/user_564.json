{
    "username": "MarkUki",
    "submission": "public class Solution\n{\n    const int MOD = 1_000_000_007;\n\n    public int CountOfPairs(int[] nums)\n    {\n        int n = nums.Length;\n        int MAX = nums.Max();\n\n        int[,] bounds = new int[n, 2];\n        for (int i = 0; i < n; i++)\n        {\n            bounds[i, 0] = MAX + 1;\n            bounds[i, 1] = 0;\n        }\n\n        bool check(int x, int i, int dir)\n        {\n            if (dir == 0 && i == 0 || dir == 1 && i == n - 1)\n            {\n                return true;\n            }\n\n            if (dir == 0)\n            {\n                return nums[i] - x <= nums[i - 1] - bounds[i - 1, dir];\n            }\n\n            return nums[i] - x >= nums[i + 1] - bounds[i + 1, dir];\n        }\n\n        int limit = 0;\n        for (int i = 0; i < n; i++)\n        {\n            int left = limit, right = nums[i];\n            while (left < right)\n            {\n                int mid = (left + right) / 2;\n\n                if (check(mid, i, 0))\n                {\n                    right = mid;\n                }\n                else\n                {\n                    left = mid + 1;\n                }\n            }\n\n            if (check(left, i, 0))\n            {\n                bounds[i, 0] = left;\n                limit = bounds[i, 0];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        limit = nums[n - 1];\n        for (int i = n - 1; i >= 0; i--)\n        {\n            int left = 0, right = limit;\n            while (left < right)\n            {\n                int mid = (left + right + 1) / 2;\n\n                if (check(mid, i, 1))\n                {\n                    left = mid;\n                }\n                else\n                {\n                    right = mid - 1;\n                }\n            }\n\n            if (check(left, i, 1))\n            {\n                bounds[i, 1] = left;\n                limit = bounds[i, 1];\n            }\n            else\n            {\n                break;\n            }\n        }\n\n        int[,] dp = new int[n, MAX + 1];\n        for (int i = bounds[0, 0]; i <= MAX; i++)\n        {\n            if (i == bounds[0, 0])\n            {\n                dp[0, i] = 1;\n            }\n            else if (i <= bounds[0, 1])\n            {\n                dp[0, i] = dp[0, i - 1] + 1;\n            }\n            else\n            {\n                dp[0, i] = dp[0, i - 1];\n            }\n        }\n\n        for (int i = 1; i < n; i++)\n        {\n            for (int j = bounds[i, 0]; j <= bounds[i, 1]; j++)\n            {\n                int x = Math.Min(j, j - nums[i] + nums[i - 1]);\n                if (j == bounds[i, 0])\n                {\n                    dp[i, j] = dp[i - 1, x];\n                }\n                else if (j <= bounds[i, 1])\n                {\n                    dp[i, j] = (dp[i - 1, x] + dp[i, j - 1]) % MOD;\n                }\n            }\n\n            for (int j = bounds[i, 1] + 1; j <= MAX; j++)\n            {\n                dp[i, j] = dp[i, j - 1];\n            }\n        }\n\n        return dp[n - 1, MAX];\n    }\n}",
    "submit_ts": "1723348207",
    "subm_id": "1351613649"
}