{
    "username": "randomGirl",
    "submission": "#include <vector>\nusing namespace std;\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    bool isPeak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1)\n            return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(const vector<int>& nums, int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(nums, idx) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(nums, 2 * node + 1, start, mid, idx);\n            } else {\n                update(nums, 2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node + 1, start, mid, l, r);\n        int right_query = query(2 * node + 2, mid + 1, end, l, r);\n        return left_query + right_query;\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    void update(const vector<int>& nums, int idx) {\n        update(nums, 0, 0, n - 1, idx);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l + 1, r - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> results;\n\n        SegmentTree segTree(nums);\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                results.push_back(segTree.query(l, r));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int val = query[2];\n                nums[index] = val;\n                if (index > 0) segTree.update(nums, index - 1);\n                segTree.update(nums, index);\n                if (index < n - 1) segTree.update(nums, index + 1);\n            }\n        }\n\n        return results;\n    }\n};\n",
    "submit_ts": "1718508694",
    "subm_id": "1289688586"
}