{
    "username": "Alientation",
    "submission": "import java.math.BigInteger;\n\nclass Solution {\n    public int waysToReachStair(int k) {\n        if (k == 0) {\n            return 2;\n        } else if (k == 1) {\n            return 4;\n        }\n        \n        BigInteger[] factorial = new BigInteger[60];\n        factorial[0] = BigInteger.ONE;\n        for (int i = 1; i < factorial.length; i++) {\n            factorial[i] = factorial[i-1].multiply(BigInteger.valueOf(i));\n        }\n        \n        int count = 0;\n        for (int jumps = 0; jumps <= 30; jumps++) {\n            int max = (1 << (jumps));\n            int numDecrements = max - k;\n            // System.out.println(jumps + \": \" + max + \" + \" + numDecrements);\n            if (numDecrements >= 0 && numDecrements <= jumps+1) {\n                int val = 0;\n                if (numDecrements-1 < 0 ) {\n                    val = 1;\n                } else {\n                    val = factorial[jumps+1].divide(factorial[jumps+1-numDecrements]).divide(factorial[numDecrements]).intValue();\n                }\n                // System.out.println(\" <<< SUCCESS : \" + val);\n                count+=val;\n            }\n        }\n        \n        return count;\n        \n        \n        /*\n        00000001 : 0\n        00000000 : 0\n        00000001 : 1\n        00000000 : 1\n        00000010 : 2\n        00000001 : 2\n        00000101 : 3\n        00000100 : 3\n        00001100 : 4\n        00001011 : 4\n        00011011 : 5\n        00011010 : 5\n        00111010 : 6\n        00111001 : 6\n        01111001 : 7\n        01111000 : 7\n        11111000 : 8\n        11110111 : 9\n        \n        \n        */\n    }\n}",
    "submit_ts": 1716089417.0
}