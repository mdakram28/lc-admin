{
    "username": "vsukhoy",
    "submission": "class Solution:\n    def radius(self, edges):\n        if not edges:\n            return 0, 0\n        n = len(edges) + 1\n        adj = {}\n        deg = {}\n        for a, b in edges:\n            deg[a] = deg.get(a, 0) + 1\n            deg[b] = deg.get(b, 0) + 1\n            adj.setdefault(a, []).append(b)\n            adj.setdefault(b, []).append(a)\n\n        leafs = [v for v, d in deg.items() if d == 1]\n        q = []\n        for v in range(n):\n            if deg[v] == 1:\n                q.append(v)\n        \n        nn = n\n        radius = 0\n        while nn > 2:\n            nq = len(q)\n            nn -= nq\n            \n            qq = []\n            for v in q:\n                for vv in adj[v]:\n                    deg[vv] -= 1\n                    if deg[vv] == 1:\n                        qq.append(vv)\n            q = qq\n            radius += 1\n        if nn == 1:\n            diameter = 2*radius\n        if nn == 2:\n            diameter = 2*radius + 1\n            radius += 1\n        return radius, diameter\n        \n        \n\n    \n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        r1, d1 = self.radius(edges1)\n        r2, d2 = self.radius(edges2)\n        #print(\"r1 =\", r1)\n        #print(\"r2 =\", r2)\n        #if not edges1:\n        #    return d2\n        #if not edges2:\n        #    return d1\n        return max(r1 + 1 + r2, d1, d2)",
    "submit_ts": "1719719022",
    "subm_id": "1304431851"
}