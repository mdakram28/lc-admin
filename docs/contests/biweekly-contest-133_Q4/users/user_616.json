{
    "username": "dubeytarun1001",
    "submission": "class Solution {\npublic:\n  int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n    const int MOD = 1e9 + 7;\n    \n    // Initialize dp arrays\n    vector<int> dp(n * (n - 1) / 2 + 1, 0);\n    vector<int> new_dp(n * (n - 1) / 2 + 1, 0);\n    dp[0] = 1;\n\n    // Compute dp using while loop\n    int len = 1;\n    while (len <= n) {\n        int inv = 0;\n        int sum = 0;\n        while (inv <= n * (n - 1) / 2) {\n            sum = (sum + dp[inv]) % MOD;\n            if (inv >= len) {\n                sum = (sum - dp[inv - len] + MOD) % MOD;\n            }\n            new_dp[inv] = sum;\n            inv++;\n        }\n        swap(dp, new_dp);\n        len++;\n    }\n\n    // Prepare requiredInversions array\n    vector<int> reqInversions(n, -1);\n    for (auto& req : requirements) {\n        reqInversions[req[0]] = req[1];\n    }\n\n    // Initialize count arrays\n    vector<int> count(n * (n - 1) / 2 + 1, 0);\n    vector<int> new_count(n * (n - 1) / 2 + 1, 0);\n    count[0] = 1;\n\n    // Compute count using while loop\n    len = 1;\n    while (len <= n) {\n        int inv = 0;\n        int sum = 0;\n        while (inv <= n * (n - 1) / 2) {\n            sum = (sum + count[inv]) % MOD;\n            if (inv >= len) {\n                sum = (sum - count[inv - len] + MOD) % MOD;\n            }\n            if (reqInversions[len - 1] == -1 || reqInversions[len - 1] == inv) {\n                new_count[inv] = sum;\n            } else {\n                new_count[inv] = 0;\n            }\n            inv++;\n        }\n        swap(count, new_count);\n        len++;\n    }\n\n    // Calculate the result\n    int result = 0;\n    int inv = 0;\n    while (inv <= n * (n - 1) / 2) {\n        if (reqInversions[n - 1] == -1 || reqInversions[n - 1] == inv) {\n            result = (result + count[inv]) % MOD;\n        }\n        inv++;\n    }\n\n    return result;\n}\n\n};",
    "submit_ts": 1719069903.0
}