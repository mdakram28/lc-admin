{
    "username": "puck00",
    "submission": "class Solution {\nprivate:\n    static const int N = 1e5 + 5;\n    int bits[N], m;\n\n    int lowbit(int x) {\n        return x & -x;\n    }\n\n    void update(int i, int k) {\n        while (i <= m) {\n            bits[i] += k;\n            i += lowbit(i);\n        }\n    }\n\n    int getsum(int i) {\n        int ans = 0;\n        while (i > 0) {\n            ans += bits[i];\n            i -= lowbit(i);\n        }\n        return ans;\n    }\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> ve(n, 0);\n        for (int i = 1; i + 1 < n; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                ve[i] = 1;\n            }\n        }\n        memset(bits, 0, sizeof(bits));\n        m = n - 1;\n        for (int i = 1; i + 1 < n; i++) {\n            update(i, ve[i]);\n        }\n        vector<int> res;\n        for (int i = 0; i < queries.size(); i++) {\n            if (queries[i][0] == 1) {\n                if (queries[i][2] - 1 > queries[i][1]) {\n                    res.push_back(getsum(queries[i][2] - 1) - getsum(queries[i][1]));\n                } else {\n                    res.push_back(0);\n                }\n            } else {\n                int pos = queries[i][1], num = queries[i][2];\n                nums[pos] = num;\n                if (pos - 1 > 0) {\n                    if (nums[pos - 1] > nums[pos - 2] && nums[pos - 1] > nums[pos]) {\n                        if (ve[pos - 1] == 0) {\n                            update(pos - 1, 1);\n                            ve[pos - 1] = 1;\n                        }\n                    } else {\n                        if (ve[pos - 1] == 1) {\n                            update(pos - 1, -1);\n                            ve[pos - 1] = 0;\n                        }\n                    }\n                }\n                if (pos > 0 && pos + 1 < n) {\n                    if (nums[pos] > nums[pos - 1] && nums[pos] > nums[pos + 1]) {\n                        if (ve[pos] == 0) {\n                            update(pos, 1);\n                            ve[pos] = 1;\n                        }\n                    } else {\n                        if (ve[pos] == 1) {\n                            update(pos, -1);\n                            ve[pos] = 0;\n                        }\n                    }\n                }\n                if (pos + 2 < n) {\n                    if (nums[pos + 1] > nums[pos] && nums[pos + 1] > nums[pos + 2]) {\n                        if (ve[pos + 1] == 0) {\n                            update(pos + 1, 1);\n                            ve[pos + 1] = 1;\n                        }\n                    } else {\n                        if (ve[pos + 1] == 1) {\n                            update(pos + 1, -1);\n                            ve[pos + 1] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718508277.0
}