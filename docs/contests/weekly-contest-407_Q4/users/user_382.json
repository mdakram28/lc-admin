{
    "username": "sunsq",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        n = len(nums)\n        pos = [0] * n\n        neg = [0] * n\n        for i in range(n):\n            d = target[i] - nums[i]\n            if d > 0:\n                pos[i] = d\n            else:\n                neg[i] = -d\n        \n        # print(pos)\n        # print(neg)\n        \n        tree1 = SegTree(pos)\n        tree2 = SegTree(neg)\n\n        def dfs1(base: int, l: int, r: int) -> int:\n            if l > r:\n                return 0\n            if l == r:\n                return pos[l] - base\n            val, idx = tree1.query(1, 1, n, l + 1, r + 1)\n            res = val - base\n            res += dfs1(val, l, idx - 1)\n            res += dfs1(val, idx + 1, r)\n            return res\n        \n        def dfs2(base: int, l: int, r: int) -> int:\n            if l > r:\n                return 0\n            if l == r:\n                return neg[l] - base\n            val, idx = tree2.query(1, 1, n, l + 1, r + 1)\n            res = val - base\n            res += dfs2(val, l, idx - 1)\n            res += dfs2(val, idx + 1, r)\n            return res\n        \n        return dfs1(0, 0, n - 1) + dfs2(0, 0, n - 1)\n        \n        \n        \nclass SegTree:\n    __slots__ = 'tree', 'nums'\n\n    def __init__(self, nums: List[int]):\n        n = len(nums)\n        self.tree = [None] * (n * 4)\n        self.nums = nums\n        self.build(1, 1, n)\n    \n    def build(self, o: int, l: int, r: int) -> None:\n        if l == r:\n            self.tree[o] = (self.nums[l - 1], l - 1)\n            return\n        m = (l + r) // 2\n        self.build(o * 2, l, m)\n        self.build(o * 2 + 1, m + 1, r)\n        self.tree[o] = min(self.tree[o * 2], self.tree[o * 2 + 1], key=lambda x: x[0])\n    \n    def query(self, o: int, l: int, r: int, ql: int, qr: int) -> tuple:\n        if ql <= l and r <= qr:\n            return self.tree[o]\n        res = (float('inf'), -1)\n        m = (l + r) // 2\n        if ql <= m:\n            res = min(res, self.query(o * 2, l, m, ql, qr), key=lambda x: x[0])\n        if qr > m:\n            res = min(res, self.query(o * 2 + 1, m + 1, r, ql, qr), key=lambda x: x[0])\n        return res\n    \n'''\n\n[1,1,1,2]\n\n'''",
    "submit_ts": "1721530709",
    "subm_id": "1327941567"
}