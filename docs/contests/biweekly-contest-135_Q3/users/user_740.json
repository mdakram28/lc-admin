{
    "username": "AKJ003",
    "submission": "// Function to compute binary exponentiation (modular exponentiation)\nlong long binExpo(long long base, long long exp, long long mod) {\n    long long result = 1;\n    while (exp > 0) {\n        if (exp % 2 == 1) { // If exp is odd\n            result = (result * base) % mod;\n        }\n        base = (base * base) % mod;\n        exp /= 2;\n    }\n    return result;\n}\n\n// Function to compute the greatest common divisor (GCD) using Euclidean algorithm\nint gcd(int a, int b) {\n    while (b != 0) {\n        int temp = b;\n        b = a % b;\n        a = temp;\n    }\n    return a;\n}\n\n// Function to compute primes up to a given limit using the Sieve of Eratosthenes\nvector<bool> sieveOfEratosthenes(int limit) {\n    vector<bool> isPrime(limit + 1, true);\n    isPrime[0] = isPrime[1] = false;\n    for (int p = 2; p * p <= limit; ++p) {\n        if (isPrime[p]) {\n            for (int multiple = p * p; multiple <= limit; multiple += p) {\n                isPrime[multiple] = false;\n            }\n        }\n    }\n    return isPrime;\n}\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffToX;\n        vector<int> XValues;\n        \n        int n = nums.size();\n        for (int i = 0; i < n / 2; ++i) {\n            int num1 = nums[i];\n            int num2 = nums[n - i - 1];\n            int diff = abs(num1 - num2);\n            int maxVal = max({num1, num2, k - num1, k - num2});\n            \n            diffToX[diff].push_back(maxVal);\n            XValues.push_back(maxVal);\n        }\n        \n        int minChanges = n;\n        sort(XValues.begin(), XValues.end());\n       \n        for (const auto& [difference, xValues] : diffToX) {\n            int position = lower_bound(XValues.begin(), XValues.end(), difference) - XValues.begin();\n            int currentChanges = position * 2 + (n / 2 - position);\n            \n            for (int x : xValues) {\n                if (x < difference) {\n                    currentChanges -= 2;\n                } else {\n                    currentChanges -= 1;\n                }\n            }\n            \n            minChanges = min(minChanges, currentChanges);\n        }\n\n        return minChanges;\n    }\n};\n",
    "submit_ts": "1721488979",
    "subm_id": "1327439051"
}