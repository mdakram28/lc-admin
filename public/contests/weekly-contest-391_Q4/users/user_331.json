{
    "username": "jiachen_wu",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def md(p1, p2):\n            return abs(p1[0]-p2[0]) + abs(p1[1]-p2[1])\n        \n        sort1 = sorted(points, key=lambda x: (x[0]+x[1]))\n        sort11 = sorted(sort1[0:-1], key=lambda x: (x[0]-x[1]))\n        #print(sort1)\n        ans11 = max(md(sort1[0], sort1[-2]), md(sort11[0], sort11[-1]))\n        sort12 = sorted(sort1[1:], key=lambda x: (x[0]-x[1]))\n        ans12 = max(md(sort1[1], sort1[-1]), md(sort12[0], sort12[-1]))\n        ans1 = min(ans11, ans12)\n        #print(sort1)\n        #print(ans11, ans12)\n \n        \n        sort2 = sorted(points, key=lambda x: (x[0]-x[1]))\n        sort21 = sorted(sort2[0:-1], key=lambda x: (x[0]+x[1]))\n        ans21 = max(md(sort2[0], sort2[-2]), md(sort21[0], sort21[-1]))\n        sort22 = sorted(sort2[1:], key=lambda x: (x[0]+x[1]))\n        ans22 = max(md(sort2[1], sort2[-1]), md(sort22[0], sort22[-1]))\n        ans2 = min(ans21, ans22)\n        \n        return min(ans1, ans2)\n    \n        #(0, 8)\n        #(1, 2)\n        #(10, 8)\n        #(11, 2)"
}