{
    "username": "arpit_markana",
    "submission": "class Solution {\npublic:\n    int mi = 0;\n    void dfs(int u, int par, vector<int>& def, vector<vector<int>>& adj) {\n        for (auto i : adj[u]) {\n            if (i == par)\n                continue;\n            def[i] = def[u] + 1;\n            if (def[i] > def[mi])\n                mi = i;\n            dfs(i, u, def, adj);\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<vector<int>> adj1(n), adj2(m);\n        for (auto i : edges1) {\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);\n        }\n        for (auto i : edges2) {\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n        }\n        vector<int> def1(n, 0), def2(m, 0);\n        dfs(0, -1, def1, adj1);\n        int st1 = mi;\n        mi = 0;\n        def1[st1] = 0;\n        dfs(st1, st1, def1, adj1);\n        int en1 = mi;\n        mi = 0;\n        dfs(0, -1, def2, adj2);\n        int st2 = mi;\n        mi = 0;\n        def2[st2] = 0;\n        dfs(st2, st2, def2, adj2);\n        int en2 = mi;\n        int di1 = def1[en1], di2 = def2[en2];\n        return max({(((di1 + 1) / 2) + ((di2 + 1) / 2) + 1), di1, di2});\n    }\n};",
    "submit_ts": "1719719200",
    "subm_id": "1304436128"
}