{
    "username": "ImJoshiANE",
    "submission": "int MaxDist(vector<vector<int>>& A, int idx)\n{\n    cout<<idx<<\" \";\n    int N = A.size();\n    vector<int> V, V1;\n \n    for (int i = 0; i < N; i++) {\n        if(i != idx){\n            V.push_back(A[i][0] + A[i][1]);\n            V1.push_back(A[i][0] - A[i][1]);   \n        }\n    }\n \n    // Sorting both the vectors\n    sort(V.begin(), V.end());\n    sort(V1.begin(), V1.end());\n \n    int maximum = max(V.back() - V.front(), V1.back() - V1.front());\n \n    return maximum;\n}\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& A) {\n        int N = A.size();\n        vector<pair<int, int>> V(N), V1(N);\n\n        for (int i = 0; i < N; i++) {\n            V[i] = {A[i][0] + A[i][1], i};\n            V1[i] = {A[i][0] - A[i][1], i};\n        }\n\n        sort(V.begin(), V.end());\n        sort(V1.begin(), V1.end());\n\n        // int si = V[0].second;\n        // int li = V[N-1].second;\n        // int sii = V1[0].second;\n        // int lii = V1[N-1].second;\n\n        // max(V.back() - V.front(), V1.back() - V1.front());\n\n        int up = V[N-1].first - V[0].first;\n        int down = V1[N-1].first - V1[0].first;\n        \n        // cout<<up<<\" \"<<down<<endl;\n        \n        int c1=0, c2=0;\n        \n        if(up >= down){\n            // Remove first\n            c1 = MaxDist(A, V[0].second);\n\n            // Remove Last\n            c2 = MaxDist(A, V[N-1].second);\n        } else{\n            // Remove first\n            c1 = MaxDist(A, V1[0].second);\n\n            // Remove Last\n            c2 = MaxDist(A, V1[N-1].second);\n            // cout<<c2<<\" \";\n        }\n        \n        // cout<<c1<<\" \"<<c2;\n        \n        return min(c1, c2);\n    }\n};"
}