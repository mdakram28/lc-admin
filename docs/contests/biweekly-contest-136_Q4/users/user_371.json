{
    "username": "stevenhgs2",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        adj = defaultdict(list)\n        n = 0\n        for x, y in edges:\n            adj[x].append(y)\n            adj[y].append(x)\n            n = max(n, x)\n            n = max(n, y)\n        n += 1\n\n        n_t_h = [(0, None)]\n        n_n_t_h = []\n        last_seen = None\n        while n_t_h or f_n_t_h:\n            f_n_t_h = []\n            for node, prev in n_t_h:\n                for n_n in adj[node]:\n                    if n_n == prev:\n                        continue\n                    if n_n % 2 == 0:\n                        f_n_t_h.append((n_n, node))\n                    else:\n                        n_n_t_h.append((n_n, node))\n                last_seen = node\n            n_t_h = n_n_t_h\n            n_n_t_h = f_n_t_h\n        \n        n_t_h = [(last_seen, None)]\n        n_n_t_h = []\n        last_seen2 = None\n        time2 = 0\n        to_reach2 = [0 for _ in range(n)]\n        while n_t_h or f_n_t_h:\n            f_n_t_h = []\n            for node, prev in n_t_h:\n                to_reach2[node] = time2\n                for n_n in adj[node]:\n                    if n_n == prev:\n                        continue\n                    if n_n % 2 == 0:\n                        f_n_t_h.append((n_n, node))\n                    else:\n                        n_n_t_h.append((n_n, node))\n                last_seen2 = node\n            n_t_h = n_n_t_h\n            n_n_t_h = f_n_t_h\n            time2 += 1\n\n        n_t_h = [(last_seen2, None)]\n        n_n_t_h = []\n        time1 = 0\n        to_reach1 = [0 for _ in range(n)]\n        while n_t_h or f_n_t_h:\n            f_n_t_h = []\n            for node, prev in n_t_h:\n                to_reach1[node] = time1\n                for n_n in adj[node]:\n                    if n_n == prev:\n                        continue\n                    if n_n % 2 == 0:\n                        f_n_t_h.append((n_n, node))\n                    else:\n                        n_n_t_h.append((n_n, node))\n            n_t_h = n_n_t_h\n            n_n_t_h = f_n_t_h\n            time1 += 1\n\n\n        minus1 = int(last_seen % 2 == 0)\n        minus2 = int(last_seen2 % 2 == 0)\n        result = []\n        for i in range(n):\n            minus = int(i % 2 == 0)\n            time1 = to_reach1[i] + minus2 - minus\n            time2 = to_reach2[i] + minus1 - minus\n            result.append(max(time1, time2))\n        \n        return result",
    "submit_ts": "1722700728",
    "subm_id": "1343250958"
}