{
    "username": "vikky anand",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');  // All 9's case.\n        } else if (k == 2) {\n            return handleKTwo(n);\n        } else if (k == 4) {\n            return handleKFour(n);\n        } else if (k == 5) {\n            return handleKFive(n);\n        } else if (k == 6) {\n            return handleKSix(n);\n        } else if (k == 7) {\n            return handleKSeven(n);\n        } else if (k == 8) {\n            return handleKEight(n);\n        }\n        return \"-1\";\n    }\n\nprivate:\n    string handleKTwo(int n) {\n        if (n == 1) return \"8\";\n        string res(n, '9');\n        res[0] = '8';\n        res[n - 1] = '8';\n        return res;\n    }\n\n    string handleKFour(int n) {\n        if (n == 1) return \"8\";\n        if (n == 2) return \"88\";  \n        \n        // For n > 2\n        string res(n, '9');\n        res[0] = '8';\n        res[n - 1] = '8';\n        res[n - 2] = '8';\n        res[1] = '8';\n        return res;\n    }\n\n    string handleKFive(int n) {\n        if (n == 1) return \"5\";\n        string res(n, '9');\n        res[0] = '5';\n        res[n - 1] = '5';\n        return res;\n    }\n\nstring handleKSix(int n) {\n    if (n == 1) return \"6\";\n    if (n == 2) return \"66\";\n    \n    // For n > 2\n    string res(n, '9');\n    res[0] = '8';\n    res[n - 1] = '8';\n    \n    // Calculate the sum of the digits\n    int middleSum = 9 * (n - 2);\n    int totalSum = 8 + 8 + middleSum;\n\n    if (n % 2 == 1) {  \n        if (totalSum % 3 == 1) {\n            res[n/2] = '8';  \n        } else if (totalSum % 3 == 2) {\n            res[n/2] = '7';  \n        }\n    } else {  \n        int middle1 = n/2 - 1;\n        int middle2 = n/2;\n        \n        if (totalSum % 3 == 1) {\n            res[middle1] = res[middle2] = '7';\n        } else if (totalSum % 3 == 2) {\n            res[middle1] = res[middle2] = '8';\n        }\n    }\n    \n    return res;\n}\n\nstring handleKSeven(int n) {\n    if (n == 1) return \"7\";\n    if (n == 2) return \"77\";\n\n    string res(n, '9');\n\n    if (n % 2 == 0) {\n        // n is even: Check divisibility by changing the middle 2 elements\n        int mid1 = n / 2 - 1;\n        int mid2 = n / 2;\n\n        for (int i = 9; i >= 0; i--) {\n            res[mid1] = res[mid2] = '0' + i;\n            long long remainder = 0;\n            for (int j = 0; j < n; j++) {\n                remainder = (remainder * 10 + (res[j] - '0')) % 7;\n            }\n            if (remainder == 0) {\n                return res;\n            }\n        }\n    } else {\n        // n is odd: Check divisibility by changing the middle element\n        int mid = n / 2;\n\n        for (int i = 9; i >= 0; i--) {\n            res[mid] = '0' + i;\n            long long remainder = 0;\n            for (int j = 0; j < n; j++) {\n                remainder = (remainder * 10 + (res[j] - '0')) % 7;\n            }\n            if (remainder == 0) {\n                return res;\n            }\n        }\n    }\n\n    return \"-1\";  // This line is practically unreachable with the given logic.\n}\n\n\n    string handleKEight(int n) {\n        if (n == 1) return \"8\";\n        if (n == 2) return \"88\";\n        if (n == 3) return \"888\";  \n        if (n == 4) return \"8888\";\n        if (n == 5) return \"88888\";\n        if (n == 6) return \"888888\";\n        string res(n, '9');\n        res[0] = '8';\n        res[1] = '8';\n        res[2] = '8';\n        res[n - 3] = '8';\n        res[n - 1] = '8';\n        res[n - 2] = '8';\n        return res;\n    }\n};\n",
    "submit_ts": "1723953203",
    "subm_id": "1359815041"
}