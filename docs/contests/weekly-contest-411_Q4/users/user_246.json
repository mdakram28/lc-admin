{
    "username": "Di Ying",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        pre_sum = [(0,0)]\n        curr = [0,0]\n        for i , c in enumerate(s):\n            if c == '0':\n                curr[0] += 1\n            else:\n                curr[1] += 1\n            pre_sum.append(tuple(curr))\n        \n        #print(pre_sum)\n        count = []\n        total = [0]\n        for curr in range(len(s)):\n            left = curr\n            right = len(s) - 1\n            while left < right:\n                mid = right - (right - left) // 2\n                zeros = pre_sum[mid + 1][0] - pre_sum[curr][0]\n                ones = pre_sum[mid + 1][1] - pre_sum[curr][1]\n                #print(curr, mid, zeros, ones)\n                if zeros <= k or ones <= k:\n                    left = mid\n                else:\n                    right = mid - 1\n            #print(curr, right,right - curr + 1)\n            count.append(right)\n            total.append(total[-1] + right - curr + 1)\n\n        #print(total)\n        #print(count)\n        ans = []\n        for left_b, right_b in queries:\n            left = left_b\n            right = right_b + 1\n            while left < right:\n                mid = left + (right - left) // 2\n                if count[mid] > right_b:\n                    right = mid\n                else:\n                    left = mid + 1\n            \n            curr = total[left] - total[left_b] + (right_b - left + 2) * (right_b - left + 1) // 2\n            #print(left_b, total[left], total[left_b])\n            ans.append(curr)\n        return ans\n\n\n\n\n            \n            \n",
    "submit_ts": "1723951552",
    "subm_id": "1359774299"
}