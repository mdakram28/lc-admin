{
    "username": "bhanunegi420",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> child;\n    int val;\n    bool isEnd;\n\n    TrieNode() : child(26, nullptr), val(1e9), isEnd(false) {}\n};\n\nclass Trie{\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void addWord(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->child[c - 'a']) {\n                node->child[c - 'a'] = new TrieNode();\n            }\n            node = node->child[c - 'a'];\n        }\n        node->val = min(cost, node->val);\n        node->isEnd = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        ios_base::sync_with_stdio(0);\n        cin.tie(0);\n        cout.tie(0);\n\n        Trie t;\n        int length = target.size();\n        vector<int> FminimumCost(length + 1, 1e9);\n\n        for (int i = 0; i < words.size(); ++i) {\n            t.addWord(words[i], costs[i]);\n        }\n\n        FminimumCost[0] = 0;\n\n        for (int i = 0; i < length; i++) {\n            if (FminimumCost[i] == 1e9) continue;\n\n            TrieNode* node = t.getRoot();\n            for (int j = i; j < length; j++) {\n                char c = target[j];\n                if (!node->child[c - 'a']) break;\n                node = node->child[c - 'a'];\n                if (node->isEnd) {\n                    FminimumCost[j + 1] = min(FminimumCost[j + 1],FminimumCost[i] + node->val);\n                }\n            }\n        }\n\n        return FminimumCost[length] == 1e9 ? -1 : FminimumCost[length];\n    }\n};",
    "submit_ts": "1720322674",
    "subm_id": "1312356140"
}