{
    "username": "\u6728\u6c50i",
    "submission": "class Solution {\npublic:\n  long long maximumValueSum(vector<vector<int>>& board) {\n    int n = board.size(), m = board.front().size();\n    constexpr long long inf = 1e18;\n    vector<vector<int>> down(n, vector<int>(m, -1e9));\n    for (int i = n - 1; i >= 0; i--) {\n      for (int j = 0; j < m; j++) {\n        if (i != n - 1) {\n          down[i][j] = down[i + 1][j];\n        }\n        down[i][j] = max(down[i][j], board[i][j]);\n      }\n    }\n\n    vector<vector<int>> up(n, vector<int>(m, -1e9));\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        if (i != 0) {\n          up[i][j] = up[i - 1][j];\n        }\n        up[i][j] = max(up[i][j], board[i][j]);\n      }\n    }\n\n    auto update = [&](array<pair<int, int>, 2>& a, pair<int, int> val) {\n      if (val > a[0]) {\n        a[1] = a[0];\n        a[0] = val;\n      } else if (val > a[1]) {\n        a[1] = val;\n      }\n    };\n\n    auto get_best = [&](array<pair<int, int>, 2>& a, array<pair<int, int>, 2>& b) {\n      long long best = -inf;\n      for (auto [x, at_x] : a) {\n        for (auto [y, at_y] : b) {\n          if (at_x != at_y) {\n            best = max(best, 1LL * x + y);\n          }\n        }\n      }\n      return best;\n    };\n\n    long long ans = -inf;\n    for (int i = 1; i + 1 < n; i++) {\n      array<pair<int, int>, 2> up_left{pair(-1e9, -1), pair(-1e9, -1)};\n      array<pair<int, int>, 2> down_left{pair(-1e9, -1), pair(-1e9, -1)};\n      set<pair<int, int>> up_right = {pair(-1e9, -1)};\n      set<pair<int, int>> down_right = {pair(-1e9, -1)};\n      for (int j = 0; j < m; j++) {\n        up_right.emplace(up[i - 1][j], j);\n      }\n      for (int j = 0; j < m; j++) {\n        down_right.emplace(down[i + 1][j], j);\n      }\n      // for (auto [k, v] : up_right) cout << k << \" \" << v << endl;\n      for (int j = 0; j < m; j++) {\n        // cout << up_left[0].first + down_right.rbegin()->first << endl;\n        // cout << 1LL * down_left[0].first + up_right.rbegin()->first << endl;\n        up_right.erase({up[i - 1][j], j});\n        down_right.erase({down[i + 1][j], j});\n        if (i > 0) {\n          ans = max(ans, 1LL * up_left[0].first + down_right.rbegin()->first + board[i][j]);\n        }\n        if (j < m) {\n          ans = max(ans, 1LL * down_left[0].first + up_right.rbegin()->first + board[i][j]);\n        }\n        if (j >= 2) {\n          ans = max(ans, get_best(up_left, down_left) + board[i][j]);\n        }\n        if (j <= m - 3) {\n          array<pair<int, int>, 2> a = {*down_right.rbegin(), *next(down_right.rbegin())};\n          array<pair<int, int>, 2> b = {*up_right.rbegin(), *next(up_right.rbegin())};\n          ans = max(ans, get_best(a, b) + board[i][j]);\n        }\n        update(up_left, {up[i - 1][j], j});\n        update(down_left, {down[i + 1][j], j});\n        \n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": "1723910077",
    "subm_id": "556339429"
}