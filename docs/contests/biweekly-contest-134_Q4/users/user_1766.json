{
    "username": "21Cash",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n\n// --------------------- Debug Template ----------------------------\n\n#define DEBUG_OUT\n// #define DEBUG_TC_NUM\n\nvoid __print(int x) { cout << x; }\nvoid __print(long x) { cout << x; }\nvoid __print(long long x) { cout << x; }\nvoid __print(unsigned x) { cout << x; }\nvoid __print(unsigned long x) { cout << x; }\nvoid __print(unsigned long long x) { cout << x; }\nvoid __print(float x) { cout << x; }\nvoid __print(double x) { cout << x; }\nvoid __print(long double x) { cout << x; }\nvoid __print(char x) { cout << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cout << (x ? \"true\" : \"false\"); }\ntemplate <size_t N>\nvoid __print(const bitset<N>& x) { cout << x; };\n\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x);\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v);\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x) {\n    cout << '{';\n    __print(x.first);\n    cout << \", \";\n    __print(x.second);\n    cout << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x) {\n    int f = 0;\n    cout << '{';\n    for (auto &i : x) cout << (f++ ? \", \" : \"\"), __print(i);\n    cout << \"}\";\n}\nvoid _print() { cout << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {\n    __print(t);\n    if (sizeof...(v)) cout << \", \";\n    _print(v...);\n}\n\ntemplate<class T> bool ckmin(T&a, const T& b) { bool B = a > b; a = min(a,b); return B; }\ntemplate<class T> bool ckmax(T&a, const T& b) { bool B = a < b; a = max(a,b); return B; }\n\n\n#ifdef DEBUG_OUT\n\n#define dout std::cout\n\n#define dbg(x...)                                                            \\\n    cout << \"[\" << #x << \"] = [\"; \\\n    _print(x);                                                               \\\n    // cout << endl;\n\n// NOTE : If Debugging in Leetcode, Replace (__LINE__) With (__LINE__ - 9)\n#define f_dbg(x...)                                                            \\\n    cout << \"[\" << __func__ << \":\" << (__LINE__)  << \" [\" << #x << \"] = [\"; \\\n    _print(x);                                                               \\\n    // cout << endl;\n    \n#else\n\n#define dout if (false) std::cout\n#define dbg(x...)\n#define f_dbg(x...)\n\n#endif  \n  \n// -------------------------- Debug Template Ends --------------------------------------\n\n\nclass SparseTable {\nprivate:\n    std::vector<std::vector<int>> table;\n    std::vector<int> log;\n\n    void build(const std::vector<int>& arr) {\n        int n = arr.size();\n        int max_log = std::log2(n) + 1;\n\n        log.resize(n + 1);\n        log[1] = 0;\n        for (int i = 2; i <= n; ++i) {\n            log[i] = log[i / 2] + 1;\n        }\n\n        table.resize(n, std::vector<int>(max_log));\n        for (int i = 0; i < n; ++i) {\n            table[i][0] = arr[i];\n        }\n\n        for (int j = 1; (1 << j) <= n; ++j) {\n            for (int i = 0; (i + (1 << j) - 1) < n; ++i) {\n                table[i][j] = table[i][j - 1] & table[i + (1 << (j - 1))][j - 1];\n            }\n        }\n    }\n\npublic:\n    SparseTable(const std::vector<int>& arr) {\n        build(arr);\n    }\n\n    int query(int l, int r) {\n        int j = log[r - l + 1];\n        return table[l][j] & table[r - (1 << j) + 1][j];\n    }\n};\n\nvector<int> get_cnt_arr(const vector<int>& arr) {\n    int n = arr.size();\n    vector<int> res(n);\n    int i = 0;\n    \n    while (i < n) {\n        int j = i;\n        while (j < n && arr[j] == arr[i]) {\n            j++;\n        }\n        int length = j - i;\n        for (int k = i; k < j; k++) {\n            res[k] = length - (k - i);\n        }\n        i = j;\n    }\n    \n    return res;\n}\n\n#define ll long long\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int K) {\n        \n        SparseTable Q(nums);\n        \n        ll N = nums.size();\n        \n        vector<int> cnt_arr = get_cnt_arr(nums);\n        \n        auto get_right = [&] (int ind) -> int {\n        \tint l = ind, r = N - 1;\n        \t\n        \tint best = l;\n        \t\n        \twhile(l <= r) {\n        \t\tint mid = l + (r - l)/ 2;\n        \t\t\n        \t\tll cur_and = Q.query(ind, mid);\n        \t\t\n        \t\tif(cur_and == K) {\n        \t\t\tbest = mid;\n        \t\t\tr = mid - 1;\n        \t\t}\n        \t\telse if(cur_and > K){\n        \t\t\tl = mid + 1;\n        \t\t}\n        \t\telse r = mid - 1;\n        \t}\n        \t\n        \treturn best;\n        };\n        \n        auto get_rightmost = [&] (int ind, int start) -> int {\n            int l = start, r = N - 1, best = start;\n            \n            while(l <= r) {\n                int mid = l + (r - l) / 2;\n                int cur_and = Q.query(ind, mid);\n                if(cur_and == K) {\n                    best = max(best, mid);\n                    l = mid + 1;\n                }\n                else {\n                    r = mid - 1;\n                }\n            } \n            \n            return best;\n        } ;\n        \n        \n        ll res = 0;\n        \n        \n        for(int i = 0; i < N; i++) {\n        \tint right = get_right(i);\n        \t\n        \t\n        \tif(Q.query(i, right) == K) {\n\t\t\t\t// res += cnt_arr[right];       \n                int right_most_ind = get_rightmost(i, right);\n                 \t\t\n                res += (right_most_ind - right + 1);\n        \t}\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1720281566",
    "subm_id": "1311830085"
}