{
    "username": "66glory-CUNY",
    "submission": "int ok(long long x1, long long y1, long long x2, long long y2, long long r1, long long r2)\n{\n    double d = sqrt((x1 - x2) * (x1 - x2)\n                         + (y1 - y2) * (y1 - y2));\n\n    if (d <= r1 - r2) {\n        return true;\n    }\n    else if (d <= r2 - r1) {\n        return true;\n    }\n    else if (d < r1 + r2) {\n        return true;\n    }\n    else if (d == r1 + r2) {\n        return true;\n    }\n    else {\n        return false;\n    }\n}\n\nbool over(long long R, long long Xc, long long Yc,\n                         long long X1, long long Y1,\n                         long long X2, long long Y2)\n{\n    \n    // Find the nearest point on the \n    // rectangle to the center of \n    // the circle\n    long long Xn = max(X1, min(Xc, X2));\n    long long Yn = max(Y1, min(Yc, Y2));\n     \n    // Find the distance between the \n    // nearest point and the center \n    // of the circle\n    // Distance between 2 points, \n    // (x1, y1) & (x2, y2) in \n    // 2D Euclidean space is\n    // ((x1-x2)**2 + (y1-y2)**2)**0.5\n    long long Dx = Xn - Xc;\n    long long Dy = Yn - Yc;\n    return (Dx * Dx + Dy * Dy) <= R * R;\n} \n\nbool over1(double x_c, double y_c, double r, \n                          double x_r1, double y_r1, \n                          double x_r2, double y_r2) {\n    // Find the closest point on the rectangle to the circle's center\n    double closestX = std::clamp(x_c, x_r1, x_r2);\n    double closestY = std::clamp(y_c, y_r1, y_r2);\n\n    // Calculate the distance from the circle's center to this closest point\n    double dx = x_c - closestX;\n    double dy = y_c - closestY;\n    double distance = std::sqrt(dx * dx + dy * dy);\n\n    // Check if the distance is less than or equal to the circle's radius\n    return distance <= r;\n}\n\nconst int N = 1050;\nint p[N];\n\nint find(int u) {\n    return p[u] == u ? u : p[u] = find(p[u]);\n}\n\nclass Solution {\npublic:\n    bool canReachCorner(int w, int h, vector<vector<int>>& a) {\n        int n = a.size();\n        for(int i = 0; i <= n + 4; i++) p[i] = i;\n        \n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                if(ok(a[i][0], a[i][1], a[j][0], a[j][1], a[i][2], a[j][2])) {\n                    int r1 = find(i), r2 = find(j);\n                    if(r1 != r2) p[r1] = r2;\n                }\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            int x = a[i][0], y = a[i][1], r = a[i][2];\n            if(over1(x, y, r, -1, 0, 0, h)) {\n                int r1 = find(i), r2 = find(n + 1);\n                if(r1 != r2) p[r1] = r2;\n            }\n            if(over1(x, y, r, w, 0, w + 1, h)) {\n                int r1 = find(i), r2 = find(n + 2);\n                if(r1 != r2) p[r1] = r2;\n            }\n        }\n        \n        for(int i = 0; i < n; i++) {\n            int x = a[i][0], y = a[i][1], r = a[i][2];\n            if(over1(x, y, r, 0, -1, w, 0)) {\n                int r1 = find(i), r2 = find(n + 3);\n                if(r1 != r2) p[r1] = r2;\n            }\n            if(over1(x, y, r, 0, h, w, h + 1)) {\n                int r1 = find(i), r2 = find(n + 4);\n                if(r1 != r2) p[r1] = r2;\n            }\n        }\n        \n        if(find(n + 1) == find(n + 2)) return false;\n        if(find(n + 3) == find(n + 4)) return false;\n        if(find(n + 1) == find(n + 3)) return false;\n        if(find(n + 2) == find(n + 4)) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722138397",
    "subm_id": "1335789720"
}