{
    "username": "boxlesscat",
    "submission": "constexpr int K = 26;\nconstexpr int INF = INT_MAX >> 1;\n\nstruct Vertex {\n    int next[K];\n    int output = INF;\n\n    Vertex() {\n        fill(begin(next), end(next), -1);\n    }\n};\n\n\nvoid add_string(string const& s, vector<Vertex>& trie, int cost) {\n    int v = 0;\n    for (char ch : s) {\n        int c = ch - 'a';\n        if (trie[v].next[c] == -1) {\n            trie[v].next[c] = trie.size();\n            trie.emplace_back();\n        }\n        v = trie[v].next[c];\n    }\n    trie[v].output = min(trie[v].output, cost);\n}\n\nint sz;\n\nint dp[50001];\n\nint solve(string& target, vector<Vertex>& trie, int i) {\n    if (i == sz) {\n        return 0;\n    }\n    int& ans = dp[i];\n    if (ans != -1)\n        return ans;\n    ans = INF;\n    int x = i;\n    int v = 0;\n    int c = target[i] - 'a';\n    while (x != sz and trie[v].next[c] != -1) {\n        v = trie[v].next[c];\n        if (trie[v].output != INF) {\n            ans = min(ans, solve(target, trie, x + 1) + trie[v].output);\n        }\n        if (x == sz - 1)\n            break;\n        c = target[++x] - 'a';\n    }\n    return ans;\n}\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        vector<Vertex> trie(1);\n        const int size = words.size();\n        sz = target.size();\n        for (int i = 0; i < size; ++i)\n            add_string(words[i], trie, costs[i]);\n        memset(dp, -1, sizeof (int) * (sz + 1));\n        int ans = solve(target, trie, 0);\n        if (ans == INF)\n            return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720324130",
    "subm_id": "1312392297"
}