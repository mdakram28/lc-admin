{
    "username": "wanghy012",
    "submission": "class Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        res = 0\n        nodes = [segmentTreeNode(max(i,0),0,0,0) for i in nums]\n        oldnodes = nodes\n        n = len(nums)\n        mod = pow(10,9) + 7\n        while n > 1:\n            m = n // 2\n            newNodes = []\n            for i in range(m):\n                newNodes.append(segmentTreeNode(left = oldnodes[2*i], right = oldnodes[2*i + 1]))\n                oldnodes[2*i].parent = newNodes[-1]\n                oldnodes[2*i + 1].parent = newNodes[-1]\n            if n % 2 == 1:\n                newNodes.append(segmentTreeNode(left = oldnodes[n-1]))\n                oldnodes[n-1].parent = newNodes[-1]\n            n = len(newNodes)\n            oldnodes = newNodes\n        topNode = oldnodes[0]\n        for pos, x in queries:\n            nodes[pos].updateTree(max(x,0),0,0,0)\n            res = (res + topNode.m) % mod\n        return res\n    \nclass segmentTreeNode:\n    def __init__(self, m = 0, mnl = 0, mnr = 0, mnlr = 0, left = None, right = None):\n        if left is None:\n            self.m = m\n            self.mnl = mnl\n            self.mnr = mnr\n            self.mnlr = mnlr\n            self.left = None\n            self.right = None\n            self.parent = None\n        else:\n            node = self\n            if right is None:\n                self.left = left\n                self.right = None\n                self.parent = None\n                self.m = self.left.m\n                self.mnl =self.left.mnl\n                self.mnr = self.left.mnr\n                self.mnlr = self.left.mnlr\n            else:\n                self.left = left\n                self.right = right\n                self.parent = None\n                self.m = max(self.left.m + self.right.mnl, self.left.mnr + self.right.m)\n                self.mnl = max(self.left.mnl + self.right.mnl, self.left.mnlr + self.right.m)\n                self.mnr = max(self.left.m + self.right.mnlr, self.left.mnr + self.right.mnr)\n                self.mnlr = max(self.left.mnl + self.right.mnlr, self.left.mnlr + self.right.mnr)\n            \n    \n    def updateTree(self, m, mnl, mnr, mnlr):\n        assert self.left is None and self.right is None\n        self.m = m\n        self.mnl = mnl\n        self.mnr = mnr\n        self.mnlr = mnlr\n        node = self.parent\n        while node is not None:\n            if node.right is None:\n                node.m = node.left.m\n                node.mnl = node.left.mnl\n                node.mnr = node.left.mnr\n                node.mnlr = node.left.mnlr\n            else:\n                node.m = max(node.left.m + node.right.mnl, node.left.mnr + node.right.m)\n                node.mnl = max(node.left.mnl + node.right.mnl, node.left.mnlr + node.right.m)\n                node.mnr = max(node.left.m + node.right.mnlr, node.left.mnr + node.right.mnr)\n                node.mnlr = max(node.left.mnl + node.right.mnlr, node.left.mnlr + node.right.mnr)\n            node = node.parent\n        \n    def getMaxSum(self):\n        node = self\n        while node.parent is not None:\n            node = node.parent\n        return node.m\n    \n        \n        \n            ",
    "submit_ts": "1716693445",
    "subm_id": "1268086531"
}