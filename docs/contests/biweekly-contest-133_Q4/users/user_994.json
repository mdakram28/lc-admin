{
    "username": "mkaif1617",
    "submission": "class Solution {\n    public:\n        const int MOD = 1e9+7;\n        const int maxi = 400;\n    \n        int numberOfPermutations(int n, vector<vector<int>>& arr) {\n            \n            \n             unordered_map<int, int> mp;\n            for (auto& it : arr) {\n                mp[it[0] + 1] = it[1];\n            }\n    \n            vector<vector<long long>> tot_cnt(n + 1, vector<long long>(maxi + 1, 0));\n            tot_cnt[0][0] = 1;\n    \n            for (int p = 1; p <= n; p++) {\n\n                for (int inv = 0; inv <= maxi; inv++) {\n                    for (int npos = 0; npos < p; npos++) {\n                        int ans_prev = inv - npos;\n                        if (ans_prev >= 0) tot_cnt[p][inv] = (tot_cnt[p][inv] + tot_cnt[p - 1][ans_prev]) % MOD;\n                        \n                    }\n                }\n    \n                if (mp.count(p)) {\n                    int required = mp[p];\n                    for (int inv = 0; inv <= maxi; inv++)  if (inv != required) tot_cnt[p][inv] = 0;\n                       \n                        \n                }\n            }\n    \n            long long ans = 0;\n            for (int inv = 0; inv <= maxi; inv++) ans = (ans + tot_cnt[n][inv]) % MOD;\n            \n             long long res = static_cast<int>(ans);\n            return res;\n        \n        }\n    };",
    "submit_ts": "1719071167",
    "subm_id": "1296840594"
}