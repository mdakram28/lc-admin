{
    "username": "ddiibboo",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String S, int k, int[][] queries) {\n        int n = S.length();\n        char[] s = S.toCharArray();\n\n        int[] ok = new int[n];\n        long[] sum = new long[n];\n        for (int i = 0, j = 0, cnt0 = 0, cnt1 = 0; i < n; ++i) {\n            while (j < n) {\n                if (s[j] == '0' && cnt0 > k - 1 && cnt1 > k) break;\n                if (s[j] == '1' && cnt0 > k && cnt1 > k - 1) break;\n                if (s[j] == '0') ++cnt0;\n                else ++cnt1;\n                ++j;\n            }\n            ok[i] = j;\n            sum[i] = i == 0 ? ok[i] : sum[i - 1] + ok[i];\n            if (s[i] == '0') --cnt0;\n            else --cnt1;\n        }\n\n        // for (int x : ok) System.out.print(x + \" \");\n        // System.out.println();\n        // for (long x : sum) System.out.print(x + \" \");\n        // System.out.println();\n        \n        int idx = 0;\n        long[] ans = new long[queries.length];\n        for (int[] q : queries) {\n            int l = q[0];\n            int r = q[1];\n            int d = l - 1;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (ok[mid] <= q[1] + 1) {\n                    d = mid;\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            //System.out.println(String.format(\"l = %d, r = %d, d = %d\", q[0], q[1], d));\n            ans[idx] = 0;\n            if (d >= q[0]) {\n                ans[idx] += getSum(sum, d) - getSum(sum, q[0] - 1) - getSum(q[0], d);\n                //System.out.println(\"1: ans = \" + ans[idx]);\n            }\n            if (d < q[1]) {\n                ans[idx] += 1L * (q[1] + 1) * (q[1] - d) - getSum(d + 1, q[1]);\n                //System.out.println(\"2: ans = \" + ans[idx]);\n            }\n            ++idx;\n        }\n\n        return ans;\n    }\n\n    private long getSum(long[] sum, int idx) {\n        if (idx < 0) return 0;\n        return sum[idx];\n    }\n\n    private long getSum(int l, int r) {\n        if (l > r) return 0;\n        return 1L * (r - l + 1) * (l + r) / 2;\n    }\n}",
    "submit_ts": "1723952988",
    "subm_id": "1359809538"
}