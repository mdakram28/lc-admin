{
    "username": "lyk-ohlyk",
    "submission": "\nclass Solution {\npublic:\n    vector<vector<int>> grid;\n    vector<vector<int>> sum;\n    int n, m;\n    \n    int minimumSum(vector<vector<int>>& g) {\n        grid = g;\n        n = g.size();\n        m = g[0].size();\n        \n        sum = vector<vector<int>>(n, vector<int>(m, 0));\n        // presum\n        for (int i = 0; i < n; ++i)\n        {\n            for (int j = 0; j < m; ++j)\n            {\n                if (i > 0) sum[i][j] += sum[i - 1][j];\n                if (j > 0) sum[i][j] += sum[i][j - 1];\n                if (i > 0 && j > 0) sum[i][j] -= sum[i - 1][j - 1];\n                \n                sum[i][j] += grid[i][j];\n            }\n        }\n        \n        int res = INT_MAX;\n        int a1=INT_MAX, a2=INT_MAX, a3=INT_MAX;\n        for (int i1 = 0; i1 < n; ++i1)\n        {\n            for (int j1 = 0; j1 < m; ++j1)\n            {\n                // \u5148\u627e\u4e00\u4e2a\u5de6\u4e0a\u89d2\u7684\u77e9\u5f62\n                if (!hasOne(0, 0, i1, j1)) continue;\n                a1 = minimumArea(0, 0, i1, j1);\n                \n                // \u5269\u4e0b\u7684\u533a\u57df\u88ab\u5212\u5206\u4e3a\u4e24\u4e2a\u533a\u57df\n                \n                // \u53f3\u8fb9\u7684\u4e3a\u7a7a\n                int a23 = INT_MAX;\n                if (!hasOne(i1+1, 0, n-1, j1)) {\n                    // \u5728\u4e0b\u9762\u7684\u77e9\u5f62\u4e2d\u5206\u4e24\u4e2a\n                    a23 = partition(0, j1+1, n-1, m-1);\n                }\n                // \u4e0b\u9762\u7684\u77e9\u5f62\u4e3a\u7a7a\n                else if (!hasOne(0, j1+1, i1, m-1))\n                {\n                    // \u5728\u53f3\u8fb9\u4e00\u6574\u5757\u5206\u4e24\u4e2a\n                    a23 = partition(i1+1, 0, n-1, m-1);\n                }\n                else // \u53f3\u8fb9\u548c\u4e0b\u9762\u90fd\u6709\uff0c\n                {\n                    int a2 = minimumArea(i1+1, 0, n-1, j1);\n                    int a3 = minimumArea(0, j1+1, n-1, m-1);\n                    a23 = min(a23, a2+a3);\n                    \n                    a2 = minimumArea(0, j1+1, i1, m-1);\n                    a3 = minimumArea(i1+1, 0, n-1, m-1);\n                    a23 = min(a23, a2+a3);\n                }\n                \n                if (a23 != INT_MAX)\n                {\n                    res = min(res, a23 + a1);\n                }\n                \n            }\n        }\n        \n        return res;\n    }\n    \n    int partition(int x1, int y1, int x2, int y2)\n    {\n        int min_a = INT_MAX;\n        for (int i = x1; i < x2; ++i) \n        {\n            if (!hasOne(x1, y1, i, y2)) continue;\n            if (!hasOne(i+1, y1, x2, y2)) continue;\n            int a1 = minimumArea(x1, y1, i, y2);\n            int a2 = minimumArea(i+1, y1, x2, y2);\n            // cout << \"partition res: \" << x1 << \" \" << x2 << \" \" <<y1 << \" \" << y2 << \" \" << a1 << \" \" << a2 << endl;\n            min_a = min(min_a, a1+a2);\n        }\n        \n        for (int j = y1; j < y2; ++j) \n        {\n            if (!hasOne(x1, y1, x2, j)) continue;\n            if (!hasOne(x1, j+1, x2, y2)) continue;\n            \n            int a1 = minimumArea(x1, y1, x2, j);\n            int a2 = minimumArea(x1, j+1, x2, y2);      \n            // cout << \"partition res: \" << x1 << \" \" << x2 << \" \" <<y1 << \" \" << y2 << \" \" << a1 << \" \" << a2 << endl;      \n            min_a = min(min_a, a1+a2);\n        }\n        \n        // cout << \"partition: \" << min_a << \" \" << x1 << \" \" << y1 << \" \" << x2 << \" \" << y2 << endl;\n        \n        return min_a;\n    }\n    \n    bool hasOne(int lt_x, int lt_y, int rd_x, int rd_y) {\n        if (lt_x < 0 || lt_y < 0 || rd_x >= n || rd_y >= m) return false;\n        if (lt_y > rd_y || lt_x > rd_x) return false;\n        \n        int s2 = sum[rd_x][rd_y];\n        bool res = false;\n        if (lt_x == 0 && lt_y == 0)\n            res = s2 > 0;\n        else if (lt_x == 0)\n            res = s2 - sum[0][lt_y - 1] > 0;\n        else if (lt_y == 0)\n            res = s2 - sum[lt_x - 1][0] > 0;\n        else\n            res = s2 - sum[lt_x - 1][lt_y - 1] > 0;\n\n        return res;\n    }\n    \n    int minimumArea(int lt_x, int lt_y, int rd_x, int rd_y) {\n        int res = 0;\n        int min_i = INT_MAX, min_j = INT_MAX, max_i = 0, max_j = 0;\n        \n        bool found = false;\n        for (int i = lt_x; i <= rd_x; ++i)\n        {\n            for (int j = lt_y; j <= rd_y; ++j)\n            {\n                if (grid[i][j] == 1) {\n                    min_i = min(i, min_i);\n                    max_i = max(i, max_i);\n                    min_j = min(j, min_j);\n                    max_j = max(j, max_j);\n                    found = true;\n                }\n            }\n        }\n        \n        if (!found) return 0;\n        \n        res = (max_i - min_i + 1) * (max_j - min_j + 1);\n        \n        // cout << \"minimumArea: \" << res << \" \" << lt_x << \" \" << lt_y << \" \" << rd_x << \" \" << rd_y << endl;\n        return res;\n    }\n    \n};",
    "submit_ts": 1719114715.0
}