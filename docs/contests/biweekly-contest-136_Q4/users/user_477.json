{
    "username": "abhishek_248",
    "submission": "vector<int> a,b;\nvoid dfs(vector<vector<int>>& graph,int n,int node,int parent){\n    for(int child:graph[node]){\n        if(child==parent)continue;\n        dfs(graph,n,child,node);\n        int num;\n        if(child&1)num=1;\n        else num=2;\n        a[node]=max(a[node],a[child]+num);\n    }\n}\nvoid dfs1(vector<vector<int>>& graph,int n,int node,int parent,int fromp){\n    int f=-1,s=-1;\n    for(int child:graph[node]){\n        if(child==parent)continue;\n        int num=a[child]+1 + (child%2==0);\n        if(num>f){\n            s=f;\n            f=num;\n        }\n        else if(num>s)s=num;\n       \n    }\n    if(node!=0)fromp+=1+(parent%2==0);\n        b[node]=max(fromp,a[node]);\n        for(int child:graph[node]){\n            if(parent==child)continue;\n            int num=a[child]+1 + (child%2==0);\n            if(num==f)dfs1(graph,n,child,node,max(fromp,s));\n            else dfs1(graph,n,child,node,max(fromp,f));\n        }\n}\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        vector<vector<int>> graph(n);\n        a.assign(n,0);\n        b.assign(n,0);\n        for(auto i:edges){\n            graph[i[0]].push_back(i[1]);\n            graph[i[1]].push_back(i[0]);\n        }\n        dfs(graph,n,0,-1);\n        b[0]=a[0];\n        dfs1(graph,n,0,0,0);\n        return b;\n    }\n};",
    "submit_ts": "1722700423",
    "subm_id": "1343241482"
}