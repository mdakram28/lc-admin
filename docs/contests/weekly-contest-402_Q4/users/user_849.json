{
    "username": "hewhocodes",
    "submission": "class Solution {\npublic:\n    void make_tree(vector<bool>& v,vector<int>& t,int idx,int tl,int tr){\n        if(tl>tr){\n            return;\n        }\n        if(tl==tr){\n            t[idx]=v[tl];\n            return;\n        }\n        int tm = (tl+tr)/2;\n        make_tree(v,t,2*idx,tl,tm);\n        make_tree(v,t,2*idx+1,tm+1,tr);\n        t[idx] = t[2*idx]+t[2*idx+1];\n    }\n    int get_ans(vector<int>& t,int idx,int tl,int tr,int l,int r){\n        if(tl>tr || l>r) return 0;\n        if(tl==l && tr==r) return t[idx];\n        int m = (tl+tr)/2;\n        if(l<=m && r>=m+1){\n            return get_ans(t,2*idx,tl,m,l,m)+get_ans(t,2*idx+1,m+1,tr,m+1,r);\n        }\n        if(l>m && r>=m+1){\n            return get_ans(t,2*idx+1,m+1,tr,l,r);\n        }\n        if(l<=m && r<=m){\n            return get_ans(t,2*idx,tl,m,l,r);   \n        }\n        return 0;\n    }\n    void update(vector<int>& t,int tl,int tr,int idx,vector<bool>& v,int target){\n        if(target<tl || target>tr) return;\n        if(tl==tr && tl==target){\n            t[idx] = v[tl];\n            return;\n        }\n        update(t,tl,(tl+tr)/2,2*idx,v,target);\n        update(t,(tl+tr)/2+1,tr,2*idx+1,v,target);\n        t[idx] = t[2*idx]+t[2*idx+1];\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<bool> v(nums.size(),0);\n        for(int i=1;i<nums.size()-1;i++){\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]) v[i]=1;\n        }\n        int n = nums.size();\n        vector<int> t(4*n+4,-1);\n        make_tree(v,t,1,0,n-1);\n        vector<int> ans;\n        \n        for(auto &e:queries){\n            if(e[0]==1){\n                int l = e[1];\n                int r = e[2];\n                ans.push_back(get_ans(t,1,0,n-1,l+1,r-1));   \n                // for(auto &e:t){\n                //     cout<<e<<\" \";\n                // }\n                // cout<<endl;\n            }else{\n                int idx = e[1];\n                int val = e[2];\n                int prev = nums[idx];\n                if(idx!=0){\n                    if(v[idx-1] && nums[idx-1]<=val){\n                        v[idx-1] = 0;\n                        update(t,0,n-1,1,v,idx-1);\n                    }\n                }\n                if(v[idx] && (val<=nums[idx-1] || val<=nums[idx+1])){\n                    v[idx] = 0;\n                    update(t,0,n-1,1,v,idx);\n                }\n                if(idx+1<=n-1 && v[idx+1] && (nums[idx+1]<=val)){\n                    v[idx+1] = 0;\n                    update(t,0,n-1,1,v,idx+1);\n                }\n                if(idx>1 && !v[idx-1] && (nums[idx-1]>nums[idx-2] && nums[idx-1]>val)){\n                    v[idx-1] = 1;\n                    update(t,0,n-1,1,v,idx-1);\n                }\n                if(idx<n-2 && !v[idx+1] && (nums[idx+1]>nums[idx+2] && nums[idx+1]>val)){\n                    v[idx+1] = 1;\n                    update(t,0,n-1,1,v,idx+1);\n                }\n                if(idx>0 && idx<n-1 && !v[idx] && (nums[idx-1]<val && nums[idx+1]<val)){\n                    v[idx] = 1;\n                    update(t,0,n-1,1,v,idx);\n                }\n                nums[idx] = val;\n            }\n        }\n        \n        \n        return ans;\n    }\n};",
    "submit_ts": 1718508320.0
}