{
    "username": "t747",
    "submission": "class Solution {\npublic:\n    // so lame, saw a lot of solves and realized this is a classic problem, code is from GFG which was posted before this contest which is allowed.\n    // link: https://www.geeksforgeeks.org/minimum-cost-cut-board-squares/\nlong long mn(vector<long long>&X, vector<long long>&Y)\n{\n    int m = X.size();\n    int n = Y.size();\n    long long res = 0;\n \n    //  sort the horizontal cost in reverse order\n    sort(X.begin(),X.end());\n    reverse(X.begin(),X.end());\n    sort(Y.begin(),Y.end());\n    reverse(Y.begin(),Y.end());\n \n    //  sort the vertical cost in reverse order\n    // sort(Y, Y + n, greater<int>());\n \n    //  initialize current width as 1\n    long long hzntl = 1, vert = 1;\n \n    //  loop until one or both cost array are processed\n    int i = 0, j = 0;\n    while (i < m && j < n)\n    {\n        if (X[i] > Y[j])\n        {\n            res += X[i] * vert;\n \n            //  increase current horizontal part count by 1\n            hzntl++;\n            i++;\n        }\n        else\n        {\n            res += Y[j] * hzntl;\n \n            //  increase current vertical part count by 1\n            vert++;\n            j++;\n        }\n    }\n \n    // loop for horizontal array, if remains\n    long long total = 0;\n    while (i < m)\n        total += X[i++];\n    res += total * vert;\n \n    // loop for vertical array, if remains\n    total = 0;\n    while (j < n)\n        total += Y[j++];\n    res += total * hzntl;\n \n    return res;\n}\n    long long minimumCost(int m, int n, vector<int>& h, vector<int>& v) {\n        vector<long long> X;\n        vector<long long> Y;\n        for(auto i : h) X.push_back(i);\n        for(auto i : v)Y.push_back(i);\n        return mn(X,Y);\n    }\n};",
    "submit_ts": "1720926330",
    "subm_id": "1320282974"
}