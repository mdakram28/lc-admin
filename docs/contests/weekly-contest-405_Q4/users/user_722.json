{
    "username": "singh_codes",
    "submission": "class Solution {\npublic:\n\n struct Node {\n        unordered_map<char, Node*> next;\n        vector<pair<int, int>> ends;\n    };\n\n    class Trie {\n    public:\n        Node* root;\n        Trie() { root = new Node(); }\n\n        void add(string& s, int ind, int cost) {\n            Node* node = root;\n            for (char c : s) {\n                if (!node->next.count(c))\n                    node->next[c] = new Node();\n                node = node->next[c];\n            }\n            node->ends.push_back({ind, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& dict, vector<int>& cost) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < dict.size(); ++i) {\n            trie.add(dict[i], i, cost[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->next.count(target[j])) break;\n                node = node->next[target[j]];\n                for (auto& p : node->ends) {\n                    int ind = p.first;\n                    int c = p.second;\n                    int len = dict[ind].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + c);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX)return -1;\n        return dp[n];\n       \n       }\n    };",
    "submit_ts": "1720322751",
    "subm_id": "1312358186"
}