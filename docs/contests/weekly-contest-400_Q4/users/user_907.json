{
    "username": "rishigupta26121",
    "submission": "\nclass SegmentTree {\nprivate:\n    int n;\n    vector<int> tree;\n\npublic:\n    SegmentTree(const vector<int>& data) {\n        n = data.size();\n        tree.resize(2 * n);\n        build(data);\n    }\n\n    void build(const vector<int>& data) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = data[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n\n    int   query(int left, int right) {\n        int  result = 2147483648-1;  // bitwise AND identity for 32-bit integers\n        left += n;\n        right += n + 1;\n\n        while (left < right) {\n            if (left % 2 == 1) {\n                result &= tree[left];\n                left++;\n            }\n            if (right % 2 == 1) {\n                right--;\n                result &= tree[right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n\n        return result;\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n   \n    int n = nums.size();\n    SegmentTree seg_tree(nums);\n    int min_diff = numeric_limits<int>::max();\n\n    for (int start = 0; start < n; ++start) {\n        int low = start, high = n - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            int subarray_and = seg_tree.query(start, mid);\n            min_diff = min(min_diff, abs(k - subarray_and));\n            if (subarray_and > k) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n\n    return min_diff;\n\n\n        \n    }\n};",
    "submit_ts": 1717300276.0
}