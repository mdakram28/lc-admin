{
    "username": "cpp20",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges)+1\n        g = [[] for i in range(n)]\n        for a,b in edges:\n            g[a].append((2-(b%2),b))\n            g[b].append((2-(a%2),a))\n        #print(g)\n        \n        child = [0]*n\n        def dfs(cur,pre):\n            t = 0\n            for w,nx in g[cur]:\n                if nx == pre:\n                    continue\n                t = max(t, dfs(nx,cur)+w)\n            child[cur] = t\n            return child[cur]\n        dfs(0,-1)\n        #print(child)\n\n        res = [0]*n\n        def dfs2(cur, pre, ww):\n            #print('dfs2', cur, pre, ww)\n            arr = []\n            for w, nx in g[cur]:\n                if nx != pre:\n                    arr.append((child[nx]+w, nx))\n\n            c = 0\n            pre = []\n            for v,_ in arr:\n                pre.append(c)\n                c = max(c, v)\n            c = 0\n            suf = []\n            for v,_ in arr[::-1]:\n                suf.append(c)\n                c = max(c, v)\n            suf = suf[::-1]\n\n            mww = ww\n            for i, (mw, nx) in enumerate(arr):\n                dfs2(nx, cur, max(ww, pre[i], suf[i])+2-(cur%2))\n                mww = max(mww, mw)           \n            res[cur] = mww\n\n        dfs2(0,-1,0)\n        return res",
    "submit_ts": "1722699549",
    "subm_id": "552276125"
}