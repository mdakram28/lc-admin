{
    "username": "imveer2003",
    "submission": "class Solution {\npublic:\n    void dfs(int node, int par, vector<vector<int>> &adj,vector<int> &dist){\n        for(auto i: adj[node]){\n            if(i != par){\n                dist[i] = dist[node] + 1;\n                dfs(i,node,adj,dist);\n            }\n        }\n    }\n    int findDiameter(int n, vector<vector<int>> &adj){\n        vector<int> dist(n+1);\n        dfs(0,0,adj,dist);\n        int mx1 = -1, node;\n        for(int i = 0; i <= n; ++i){\n            if(dist[i] > mx1){\n                mx1 = dist[i];\n                node = i;\n            }\n        }\n        dfs(node,node,adj,dist);\n        int mx2 = -1;\n        for(int i = 0; i <= n; ++i){\n            if(dist[i] > mx2){\n                mx2 = dist[i];\n                node = i;\n            }\n        }\n        return mx2 - mx1;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size(), m = edges2.size();\n        vector<vector<int>> adj1(n+1),adj2(m+1);\n        for(auto i: edges1){\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);\n        }\n        for(auto i: edges2){\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n        }\n        int d1 = findDiameter(n,adj1);\n        int d2 = findDiameter(m,adj2);\n        return max((d1+1)/2 + (d2+1)/2 + 1,max(d1,d2));\n    }\n};",
    "submit_ts": 1719718865.0
}