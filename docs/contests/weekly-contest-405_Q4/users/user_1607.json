{
    "username": "Shakti10128",
    "submission": "class Solution {\npublic:\n    \nstruct TrieNode {\n    TrieNode* children[26];\n    vector<int> wordIndices;\n\n    TrieNode() {\n        fill(begin(children), end(children), nullptr);\n    }\n};\n\nvoid insert(TrieNode* root, const string& word, int index) {\n    TrieNode* node = root;\n    for (char c : word) {\n        int idx = c - 'a';\n        if (!node->children[idx])\n            node->children[idx] = new TrieNode();\n        node = node->children[idx];\n    }\n    node->wordIndices.push_back(index);\n}\n\nint minCostToConstructTarget(const string& target, const vector<string>& words, const vector<int>& costs) {\n    int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    TrieNode* root = new TrieNode();\n    for (int i = 0; i < words.size(); ++i) {\n        insert(root, words[i], i);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        TrieNode* node = root;\n        for (int j = i; j < n; ++j) {\n            int idx = target[j] - 'a';\n            if (!node->children[idx]) break;\n            node = node->children[idx];\n            for (int wordIndex : node->wordIndices) {\n                int len = words[wordIndex].size();\n                if (j + 1 >= len) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[wordIndex]);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        return minCostToConstructTarget(target,words,costs);\n    }\n};",
    "submit_ts": "1720323371",
    "subm_id": "1312373902"
}