{
    "username": "natty_me",
    "submission": "\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int d1 = solve(e1);\n        int d2 = solve(e2);\n\n        int min_dia = max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n        return min_dia;\n    }\n    \nprivate:\n    int solve(const vector<vector<int>>& nums) {\n        if (nums.empty()) {\n            return 0;\n        }\n\n        int n = nums.size() + 1;\n        vector<vector<int>> adj(n);\n        for (const auto& edge : nums) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        auto bfs = [&](int start) {\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthest_node = start;\n\n            while (!q.empty()) {\n                int node = q.front(); q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n            return make_pair(farthest_node, dist[farthest_node]);\n        };\n\n        int far_node = bfs(0).first;\n        int diameter = bfs(far_node).second;\n\n        return diameter;\n    }\n};",
    "submit_ts": 1719717989.0
}