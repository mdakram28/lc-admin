{
    "username": "code_pixel07",
    "submission": "class Solution {\npublic:\n   struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n        void insert(const string& word, int index, int cost) {\n        TrieNode* currentNode = root;\n        for (char character : word) {\n            if (!currentNode->children.count(character)) {\n                currentNode->children[character] = new TrieNode();\n            }\n            currentNode = currentNode->children[character];\n        }\n        currentNode->wordEnds.push_back({index, cost});\n    }\n};\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> memo(n + 1, INT_MAX);\n        memo[0] = 0;\n        Trie trie;\n        for (int idx = 0; idx < words.size(); idx++) {\n            trie.insert(words[idx], idx, costs[idx]);\n        }\n        for (int idx = 0; idx < n; ++idx) {\n        if (memo[idx] == INT_MAX) continue; \n        TrieNode* node = trie.root; \n        for (int j = idx; j < n; ++j) {\n        if (!node->children.count(target[j])) break;\n        node = node->children[target[j]];\n        for (auto& p : node->wordEnds) {\n            int wordIndex = p.first;\n            int costOfWords = p.second;\n            int len = words[wordIndex].size();\n            if (idx + len <= n) {\n                memo[idx + len] = min(memo[idx + len], memo[idx] + costOfWords);\n            }\n        }\n    }\n}\n\n        if(memo[n]==INT_MAX) return -1;\n        else return memo[n];\n}\n};",
    "submit_ts": "1720324536",
    "subm_id": "1312401912"
}