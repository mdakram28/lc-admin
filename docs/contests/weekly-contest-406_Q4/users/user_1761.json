{
    "username": "VinayPurohit31",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n               List<int[]> cuts = new ArrayList<>();\n        \n        // Add all horizontal cuts to the list\n        for (int i = 0; i < horizontalCut.length; i++) {\n            cuts.add(new int[]{horizontalCut[i], 0}); // 0 represents a horizontal cut\n        }\n        \n        // Add all vertical cuts to the list\n        for (int j = 0; j < verticalCut.length; j++) {\n            cuts.add(new int[]{verticalCut[j], 1}); // 1 represents a vertical cut\n        }\n        \n        // Sort cuts in descending order based on their cost\n        cuts.sort((a, b) -> b[0] - a[0]);\n        \n        long totalCost = 0;\n        int horizontalSegments = 1; // Initially we have one horizontal segment\n        int verticalSegments = 1; // Initially we have one vertical segment\n        \n        // Iterate through the sorted cuts list\n        for (int[] cut : cuts) {\n            if (cut[1] == 0) { // Horizontal cut\n                totalCost += (long) cut[0] * verticalSegments;\n                horizontalSegments++;\n            } else { // Vertical cut\n                totalCost += (long) cut[0] * horizontalSegments;\n                verticalSegments++;\n            }\n        }\n        \n        return totalCost; \n    }\n}",
    "submit_ts": "1720926143",
    "subm_id": "1320277264"
}