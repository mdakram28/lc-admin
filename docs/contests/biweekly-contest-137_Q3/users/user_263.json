{
    "username": "qu1ck",
    "submission": "def fmax(a, b):\n    return a if a > b else b\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        ans = -10**15\n        def solve():\n            n = len(board)\n            m = len(board[0])\n            ans = -10**15\n            dp = [[-10**15]*m for _ in range(n)]\n            pmax = [list(board[i]) for i in range(n)]\n            rmax = [list(board[i]) for i in range(n)]\n            cmax = [list(board[i]) for i in range(n)]\n            for i in range(n):\n                for j in range(m):\n                    if i>0:\n                        pmax[i][j] = fmax(pmax[i][j], pmax[i-1][j])\n                        cmax[i][j] = fmax(cmax[i][j], cmax[i-1][j])\n                    if j>0:\n                        pmax[i][j] = fmax(pmax[i][j], pmax[i][j-1])\n                        rmax[i][j] = fmax(rmax[i][j], rmax[i][j-1])\n            for i in range(2, n):\n                for j in range(2, m):\n                    dp[i][j] = fmax(dp[i][j], pmax[i-2][j-2] + board[i-1][j-1])\n                    dp[i][j] = fmax(dp[i][j], rmax[i-1][j-2] + cmax[i-2][j-1])\n                    if i > 2:\n                        dp[i][j] = fmax(dp[i][j], dp[i-1][j])\n                    if j > 2:\n                        dp[i][j] = fmax(dp[i][j], dp[i][j-1])\n                    ans = fmax(ans, board[i][j] + dp[i][j])\n            return ans\n        \n        def rotate():\n            n = len(board)\n            m = len(board[0])\n            for i in range(n//2):\n                for j in range(m):\n                    board[i][j], board[n-i-1][m-j-1] = board[n-i-1][m-j-1], board[i][j]\n            if n % 2 == 1:\n                i = n//2\n                for j in range(m//2):\n                    board[i][j], board[n-i-1][m-j-1] = board[n-i-1][m-j-1], board[i][j]\n        \n        def flip():\n            n = len(board)\n            m = len(board[0])\n            for i in range(n//2):\n                for j in range(m):\n                    board[i][j], board[n-i-1][j] = board[n-i-1][j], board[i][j]\n        \n        def rflip():\n            n = len(board)\n            m = len(board[0])\n            for i in range(n):\n                for j in range(m//2):\n                    board[i][j], board[i][m-j-1] = board[i][m-j-1], board[i][j]\n                    \n        ans = fmax(ans, solve())\n        rotate()\n        ans = fmax(ans, solve())\n        rotate()\n        flip()\n        ans = fmax(ans, solve())\n        flip()\n        rflip()\n        ans = fmax(ans, solve())\n        return ans",
    "submit_ts": "1723909799",
    "subm_id": "1359206220"
}