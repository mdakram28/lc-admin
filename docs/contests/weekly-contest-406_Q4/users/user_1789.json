{
    "username": "harshit__singhal",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        // Initialize the number of segments\n        int horizontalSegments = 1;\n        int verticalSegments = 1;\n        \n        // Total cost\n        long long totalCost = 0;\n        \n        // Indices for cuts\n        int hIndex = 0, vIndex = 0;\n        \n        // Process the cuts\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += (long long)horizontalCut[hIndex] * verticalSegments;\n                horizontalSegments++;\n                hIndex++;\n            } else {\n                totalCost += (long long)verticalCut[vIndex] * horizontalSegments;\n                verticalSegments++;\n                vIndex++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (hIndex < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[hIndex] * verticalSegments;\n            horizontalSegments++;\n            hIndex++;\n        }\n        \n        // Process remaining vertical cuts\n        while (vIndex < verticalCut.size()) {\n            totalCost += (long long)verticalCut[vIndex] * horizontalSegments;\n            verticalSegments++;\n            vIndex++;\n        }\n        \n        return totalCost; \n    }\n};",
    "submit_ts": "1720925463",
    "subm_id": "1320255548"
}