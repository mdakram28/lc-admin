{
    "username": "chuan-chih",
    "submission": "mod = 10 ** 9 + 7\n\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        n = len(nums)\n        \n        class SegmentTreeNode:\n            def __init__(self, lo, hi) -> None:\n                self.lo = lo\n                self.hi = hi\n                self.parent = None\n                self.val = [0, 0, 0, 0]\n                if lo + 1 < hi:\n                    mid = (lo + hi) // 2\n                    self.left = SegmentTreeNode(lo, mid)\n                    self.left.parent = self\n                    self.right = SegmentTreeNode(mid, hi)\n                    self.right.parent = self\n\n            def update(self, i):\n                if self.lo + 1 < self.hi:\n                    mid = (self.lo + self.hi) // 2\n                    if i < mid:\n                        self.left.update(i)\n                    else:\n                        self.right.update(i)\n                    a, b, c, d = self.left.val\n                    e, f, g, h = self.right.val\n                    self.val[0] = max(c + f, a + f, c + e)\n                    self.val[1] = max(d + f, b + f, d + e)\n                    self.val[2] = max(c + h, a + h, c + g)\n                    self.val[3] = max(d + h, b + h, d + g)\n                    for i in range(4):\n                        self.val[i] %= mod\n                else:\n                    self.val = [max(0, nums[i]), 0, 0, 0]\n        \n        st = SegmentTreeNode(0, n)\n        for i, x in enumerate(nums):\n            if x > 0:\n                st.update(i)\n        ans = 0\n        for i, x in queries:\n            nums[i] = x\n            st.update(i)\n            ans += max(st.val)\n            ans %= mod\n        return ans\n            \n        \n        ",
    "submit_ts": 1716695857.0
}