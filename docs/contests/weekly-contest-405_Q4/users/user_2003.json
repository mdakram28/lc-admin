{
    "username": "Nitesh_EE",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices; // {word index, cost}\n};\n\nclass Trie {\npublic:\n    Trie() : root(new TrieNode()) {}\n\n    void insert(const string &word, int wordIndex, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back({wordIndex, cost});\n    }\n\n    vector<pair<int, int>> search(const string &prefix) {\n        TrieNode* node = root;\n        for (char c : prefix) {\n            if (!node->children.count(c)) return {};\n            node = node->children[c];\n        }\n        return node->wordIndices;\n    }\n\n\n    TrieNode* root;\n};\nclass Solution {\npublic:\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;  // Cost to construct an empty string is 0\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i, costs[i]);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;  // If it's not possible to reach this point, skip it\n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            for (auto &[wordIndex, cost] : node->wordIndices) {\n                int len = words[wordIndex].size();\n                if (j - i + 1 == len) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720324634",
    "subm_id": "1312404314"
}