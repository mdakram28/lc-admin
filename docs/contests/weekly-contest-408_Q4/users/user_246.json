{
    "username": "abhinav200146",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int bfsTraversal(vector<vector<int>>& adjList, int startNode, int target1, int target2, int totalNodes) {\n        queue<int> nodesQueue;\n        vector<int> visitedNodes(totalNodes + 4, 0);\n        nodesQueue.push(startNode);\n        visitedNodes[startNode] = 1;\n\n        for (; !nodesQueue.empty(); ) {\n            int currNode = nodesQueue.front();\n            nodesQueue.pop();\n            for (int i = 0; i < adjList[currNode].size(); ++i) {\n                int neighborNode = adjList[currNode][i];\n                if (!visitedNodes[neighborNode]) {\n                    nodesQueue.push(neighborNode);\n                    visitedNodes[neighborNode] = 1;\n                }\n            }\n        }\n        return visitedNodes[target1] || visitedNodes[target2];\n    }\n    \n    bool canReachCorner(int maxX, int maxY, vector<vector<int>>& circleData) {\n        vector<pair<pair<int, int>, int>> circleDetails(circleData.size());\n        vector<vector<int>> adjacencyList(circleData.size() + 4);\n        int numCircles = circleData.size();\n        \n        int i = 0;\n        while (i < numCircles) {\n            circleDetails[i].first.first = circleData[i][0];\n            circleDetails[i].first.second = circleData[i][1];\n            circleDetails[i].second = circleData[i][2];\n            ++i;\n        }\n\n        i = 0;\n        while (i < numCircles) {\n            if (circleDetails[i].first.first <= circleDetails[i].second) {\n                adjacencyList[numCircles].push_back(i);\n                adjacencyList[i].push_back(numCircles);\n            }\n            if (maxX - circleDetails[i].first.first <= circleDetails[i].second) {\n                adjacencyList[numCircles + 2].push_back(i);\n                adjacencyList[i].push_back(numCircles + 2);\n            }\n            if (circleDetails[i].first.second <= circleDetails[i].second) {\n                adjacencyList[numCircles + 1].push_back(i);\n                adjacencyList[i].push_back(numCircles + 1);\n            }\n            if (maxY - circleDetails[i].first.second <= circleDetails[i].second) {\n                adjacencyList[numCircles + 3].push_back(i);\n                adjacencyList[i].push_back(numCircles + 3);\n            }\n            int j = i + 1;\n            while (j < numCircles) {\n                double distanceBetweenCenters = sqrt(pow(circleDetails[i].first.first - circleDetails[j].first.first, 2) +\n                                                     pow(circleDetails[i].first.second - circleDetails[j].first.second, 2));\n                int combinedRadii = circleDetails[i].second + circleDetails[j].second;\n                if (combinedRadii >= distanceBetweenCenters) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n                ++j;\n            }\n            ++i;\n        }\n        \n        int isPathBlocked = 0;\n        isPathBlocked = max(isPathBlocked, bfsTraversal(adjacencyList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check from bottom-left corner\n        isPathBlocked = max(isPathBlocked, bfsTraversal(adjacencyList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check from top-right corner\n        \n        return !isPathBlocked;\n    }\n};\n",
    "submit_ts": "1722136855",
    "subm_id": "1335746937"
}