{
    "username": "HVCYM",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    int cost;\n    TrieNode* children[26];\n    TrieNode() : cost(INT_MAX) {\n      for(int i = 0; i < 26; i++) {\n        children[i] = nullptr;\n      }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children[c - 'a'] == nullptr) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->cost = min(node -> cost, cost);\n    }\n    \n    void search(const string& s, int end, vector<pair<int, int>> &results) {\n        TrieNode* node = root;\n        for (int i = end; i >= 0; --i) {\n            char c = s[i];\n            if (node->children[c - 'a'] == nullptr) break;\n            node = node->children[c - 'a'];\n            if (node->cost != INT_MAX) {\n                results.push_back({end - i + 1, node->cost});\n            }\n        }\n    }\n};\n\nclass Solution {\n    public:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n      vector<long long> dp(n + 1, INT_MAX);\n      dp[0] = 0; // Base case: cost to form an empty string is 0\n\n      // Build the Trie\n      Trie trie;\n      for (int i = 0; i < words.size(); ++i) {\n          reverse(words[i].begin(), words[i].end());\n          trie.insert(words[i], costs[i]);\n      }\n\n      // Fill the dp array\n      vector<pair<int, int>> matches;\n      for (int i = 1; i <= n; ++i) {\n          matches.clear();\n          trie.search(target, i - 1, matches);\n          for (auto &match : matches) {\n              int length = match.first;\n              int cost = match.second;\n              dp[i] = min(dp[i], dp[i - length] + cost);\n          }\n      }\n\n      return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323485",
    "subm_id": "1312376729"
}