{
    "username": "shubhambhatt037",
    "submission": "class Solution {\n    static const int MODULO_CONST = 1000000007;\n    int result;\n    static const int MAX_INVERSIONS_CONST = 401;\n    long long totalValidPerms = 0;\npublic:\n    int numberOfPermutations(int arrayLength, vector<vector<int>>& reqs) {\n        unordered_map<int, int> reqMapping;\n        vector<vector<long long>> dp(arrayLength + 1, vector<long long>(MAX_INVERSIONS_CONST + 1, 0));\n        dp[0][0] = 1;\n        for (const auto& req : reqs) \n            reqMapping[req[0] + 1] = req[1];\n        \n        for (int l = 1; l <= arrayLength; l++) {\n            for (int i = 0; i <= MAX_INVERSIONS_CONST; i++) \n                for (int p = 0; p < l; p++) {\n                    int previousInv = (i - p);\n                    if (previousInv >= 0) \n                        dp[l][i] = (dp[l][i] + dp[l - 1][previousInv]) % MODULO_CONST;\n                }\n            \n            if (reqMapping.count(l)) {\n                int requiredInv = reqMapping[l];\n                for (int i = 0; i <= MAX_INVERSIONS_CONST; i++) {\n                    if (i != requiredInv) {\n                        dp[l][i] = 0; // Zero out invalid inversion counts\n                    }\n                }\n            }\n        }\n        for (long long count : dp[arrayLength]) \n            totalValidPerms = (totalValidPerms + count) % MODULO_CONST;\n        \n        result = static_cast<int>(totalValidPerms);\n        return result;\n    }\n};\n",
    "submit_ts": 1719071961.0
}