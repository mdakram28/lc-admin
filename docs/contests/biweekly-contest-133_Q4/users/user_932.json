{
    "username": "chilamwarmanas",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1'000'000'007;\n        const int MAX_INVERSIONS = 400;\n        \n        // Mapping end index to inversion count\n        unordered_map<int, int> requirementMap;\n        for (auto& req : requirements) {\n            requirementMap[req[0] + 1] = req[1]; // req[0] + 1 because end index is 0-based in the input\n        }\n        \n        // DP table: pc[len][inv] will store number of permutations of length len with exactly inv inversions\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        \n        // Base case: 1 way to permute an empty array with 0 inversions\n        dp[0][0] = 1;\n        \n        // Fill the DP table\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n            \n            // Apply the requirements\n            if (requirementMap.count(len)) {\n                int targetInv = requirementMap[len];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != targetInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n        \n        // Calculate the result as the sum of dp[n][inv] for all inversions inv\n        long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + dp[n][inv]) % MOD;\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": "1719071574",
    "subm_id": "1296849675"
}