{
    "username": "kulfi_12",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.min_cost = float('inf')  # To store minimum cost for words ending at this node\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = TrieNode()\n        \n        # Build the Trie\n        for word, cost in zip(words, costs):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.min_cost = min(node.min_cost, cost)\n        \n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Traverse through target using DP\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.min_cost < float('inf'):\n                    next_index = j + 1\n                    dp[next_index] = min(dp[next_index], dp[i] + node.min_cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720323776",
    "subm_id": "1312383796"
}