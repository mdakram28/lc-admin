{
    "username": "skywalkert",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& seq) {\n        typedef long long LL;\n        static const int maxn = 301, maxm = 401, mod = (int)1e9 + 7;\n        static int dp[maxm];\n        sort(seq.begin(), seq.end(), greater<>());\n        int mx = seq[0][1];\n        dp[0] = 1;\n        for(int i = 0; i < n; ++i) {\n            int plim = min(mx, i * (i - 1) / 2), clim = min(mx, i * (i + 1) / 2);\n            for(int j = 1; j <= plim; ++j)\n                (dp[j] += dp[j - 1]) >= mod && (dp[j] -= mod);\n            for(int j = plim + 1; j <= clim; ++j)\n                dp[j] = dp[j - 1];\n            for(int j = clim; j >= i + 1; --j)\n                (dp[j] -= dp[j - i - 1]) < 0 && (dp[j] += mod);\n            if(!seq.empty() && seq.back()[0] == i) {\n                int k = seq.back()[1], v = k <= clim ? dp[k] : 0;\n                seq.pop_back();\n                memset(dp, 0, (clim + 1) * sizeof(int));\n                v && (dp[k] = v);\n            }\n        }\n        return dp[mx];\n    }\n};",
    "submit_ts": 1719067568.0
}