{
    "username": "pm_12",
    "submission": "class Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"\n        MOD = 1000000007\n        MAX_INVERSIONS = 400\n\n        # Convert requirements into a dictionary for quick lookup\n        inversion_requirements = {req[0] + 1: req[1] for req in requirements}\n\n        # DP array to track permutation counts for given lengths and inversion counts\n        dp_array = [[0] * (MAX_INVERSIONS + 1) for _ in range(n + 1)]\n        dp_array[0][0] = 1  # Base case: one way to have a permutation of length 0 with 0 inversions\n\n        for length in range(1, n + 1):\n            for inv in range(MAX_INVERSIONS + 1):\n                for position in range(length):\n                    previous_inversions = inv - position\n                    if previous_inversions >= 0:\n                        dp_array[length][inv] = (dp_array[length][inv] + dp_array[length - 1][previous_inversions]) % MOD\n\n            # Enforce the requirements if there are any for the current length\n            if length in inversion_requirements:\n                required_inversions = inversion_requirements[length]\n                for inv in range(MAX_INVERSIONS + 1):\n                    if inv != required_inversions:\n                        dp_array[length][inv] = 0\n\n        # Calculate the total number of valid permutations of length n\n        result = sum(dp_array[n]) % MOD\n\n        return result\n\n        ",
    "submit_ts": "1719070643",
    "subm_id": "1296828161"
}