{
    "username": "jainamit130",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        int ans = 1;\n        vector<int> maxChanges(k + 1, -1);\n        vector<map<int, int>> maxChangesMap(k + 1);\n\n        for (int i = 0; i < n; i++) {\n            updateDP(nums, dp, maxChanges, maxChangesMap, i, k);\n            ans = max(ans, findMax(dp[i]));\n            updateMaxChanges(nums[i], dp[i], maxChanges, maxChangesMap);\n        }\n        return ans;\n    }\n\nprivate:\n    void updateDP(vector<int>& nums, vector<vector<int>>& dp, vector<int>& maxChanges, vector<map<int, int>>& maxChangesMap, int index, int k) {\n        for (int j = 0; j <= k; j++) {\n            for (int l = 0; l < j; l++) {\n                dp[index][j] = max(dp[index][j], 1 + maxChanges[l]);\n            }\n            if (maxChangesMap[j].find(nums[index]) != maxChangesMap[j].end()) {\n                dp[index][j] = max(dp[index][j], 1 + maxChangesMap[j][nums[index]]);\n            }\n        }\n    }\n\n    int findMax(vector<int>& arr) {\n        int maxVal = arr[0];\n        for (int val : arr) {\n            maxVal = max(maxVal, val);\n        }\n        return maxVal;\n    }\n\n    void updateMaxChanges(int num, vector<int>& dpRow, vector<int>& maxChanges, vector<map<int, int>>& maxChangesMap) {\n        for (int j = 0; j < maxChanges.size(); j++) {\n            maxChanges[j] = max(maxChanges[j], dpRow[j]);\n            maxChangesMap[j][num] = max(maxChangesMap[j][num], dpRow[j]);\n        }\n    }\n};\n\n\n\n",
    "submit_ts": 1717862066.0
}