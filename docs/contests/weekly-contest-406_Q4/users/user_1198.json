{
    "username": "Rohit_089",
    "submission": "class Solution {\npublic:\n\n\n    \n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        int h = 0, v = 0;\n        int hp = 1, vp = 1;\n        long long cp = 0;\n        \n        // Perform greedy cuts\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] > verticalCut[v]) {\n                cp += static_cast<long long>(horizontalCut[h]) * vp;\n                hp++;\n                h++;\n            } else {\n                cp += static_cast<long long>(verticalCut[v]) * hp;\n                vp++;\n                v++;\n            }\n        }\n        \n        // Add remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            cp += static_cast<long long>(horizontalCut[h]) * vp;\n            h++;\n        }\n        \n       \n        while (v < verticalCut.size()) {\n            cp += static_cast<long long>(verticalCut[v]) * hp;\n            v++;\n        }\n        \n        return cp;\n    \n        \n    }\n};",
    "submit_ts": "1720926118",
    "subm_id": "1320276525"
}