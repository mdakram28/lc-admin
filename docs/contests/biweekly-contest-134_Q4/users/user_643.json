{
    "username": "avadhut7969",
    "submission": "class Solution {\npublic:\n    vector<int>tree;\n    void build(int node,int st,int end,vector<int>&nums){\n        if(st==end){\n            tree[node]=nums[st];\n            return;\n        }\n        int mid=(st+end)/2;\n        build(node*2,st,mid,nums);\n        build(node*2+1,mid+1,end,nums);\n        tree[node]=tree[node*2]&tree[node*2 +1];\n    }\n    int query(int node,int st,int end,int l,int r){\n        if(end<l || st>r) return INT_MAX;\n        if(st==end) return tree[node];\n        if(st>=l && end<=r) return tree[node];\n        int mid=(st+end)/2;\n        int left=query(node*2,st,mid,l,r);\n        int right=query(node*2+1,mid+1,end,l,r);\n        return left&right;\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n=nums.size();\n        tree.resize(4*n+1);\n        build(1,0,n-1,nums);\n        \n        long long ans=0;\n        for(int l=0;l<n;l++){\n            int st=-1,ed=-1;\n            int lo=l,hi=n-1;\n            // cout<<query(1,0,lo,l,l)<<endl;\n            while(lo<=hi){\n                int mid=(lo+hi)/2;\n                int nd=query(1,0,n-1,l,mid);\n                if(nd==k){\n                    st=mid;\n                    hi=mid-1;\n                }else if(nd>k){\n                   lo=mid+1;\n                }else{\n                   hi=mid-1;\n                }\n            }\n            lo=l,hi=n-1;\n            while(lo<=hi){\n                int mid=(lo+hi)/2;\n                int nd=query(1,0,n-1,l,mid);\n                if(nd==k){\n                    ed=mid;\n                    lo=mid+1;\n                }else if(nd>k){\n                   lo=mid+1;\n                }else{\n                   hi=mid-1;\n                }\n            }\n            // cout<<st<<\" \"<<ed<<endl;\n            // cout<<(ed-st+1)<<endl;\n            if(st!=-1) ans+=(long long)(ed-st+1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279052",
    "subm_id": "1311735305"
}