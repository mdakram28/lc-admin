{
    "username": "ajitesh98",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffMap;\n        vector<int> maxElements;\n        int n = nums.size();\n        int halfSize = n / 2;\n        queue<int> q;\n        q.push(1);\n        int i = 0;\n        while(i<halfSize){\n            int front = nums[i];\n            int back = nums[n - i - 1];\n            int difference = abs(front - back);\n            int maxElement = max({front, back, k - front, k - back});\n            i++;\n            if(q.size()) diffMap[difference].push_back(maxElement);\n            if(q.size()) maxElements.push_back(maxElement);\n        }\n        int k1 = rand();\n        sort(maxElements.begin(), maxElements.end());\n        int minOperations = n;\n\n        for (const auto& entry : diffMap) {\n            int currentDiff = entry.first;\n            const auto& elements = entry.second;\n\n            int index = lower_bound(maxElements.begin(), maxElements.end(), currentDiff) - maxElements.begin();\n            int operations = index * 2 + (halfSize - index);\n\n            if(q.size()){\n                for (auto v: elements) {\n                    operations -= (v< currentDiff) ? 2 : 1;\n                }\n            }\n\n            if(q.size()){\n                if(operations<minOperations) minOperations = operations;\n            }\n        }\n\n        return minOperations;\n    }\n};\n",
    "submit_ts": "1721488532",
    "subm_id": "1327425222"
}