{
    "username": "Harshil_2602",
    "submission": "class Solution {\npublic:\n    class SegmentTree \n    { \n        public: \n        vector<int> tree ; \n        int n; \n        SegmentTree(vector<int> &v) \n        { \n            n = v.size() ; \n            tree.resize(4 * n) ; \n            build(v, 0, 0, n - 1) ; \n        } \n        void build(vector<int> &v , int id , int l , \n                   int r) \n        { \n            if (l == r) \n           { \n                tree[id] = v[l]; \n            } \n            else \n           { \n                int mid = l + (r - l)/2 ; \n                build(v, 2*id + 1 , l , mid) ; \n                build(v, 2*id + 2, mid + 1, r); \n                tree[id] = tree[2*id + 1]&tree[2*id + 2] ; \n            } \n        } \n        int query(int id , int l1 , int r1, int l, int r) \n        { \n            if (r < l1 || r1 < l) \n           { \n                return INT_MAX ; \n            } \n            if (l <= l1 && r1 <= r) \n           { \n                return tree[id]; \n            } \n            int mid = l1 + (r1 - l1)/2 ; \n            int ans1 = query(2*id + 1 , l1 , mid , l, r) ; \n            int ans2 = query(2*id + 2 , mid + 1, r1 , l, r) ; \n            return ans1&ans2 ; \n        } \n    }; \n    int minimumDifference(vector<int>& nums, int k) \n    { \n        int n = nums.size() ; \n        SegmentTree t(nums) ; \n        int ans = INT_MAX ; \n        for (int i = 0 ; i<n ; i++) \n        { \n            int l = i - 1 , r = n - 1 ; \n            while (r - l > 1) \n            { \n                int mid = l + (r - l)/2 ; \n                if (t.query(0 , 0 , n - 1 , i , mid) >= k) l = mid ; \n                else r = mid ; \n            } \n            ans = min(ans, abs(k - t.query(0 , 0 , n - 1 , i , r))) ; \n            if (l != i - 1) ans = min(ans, abs(t.query(0 , 0 , n - 1 , i , l) - k)) ; \n        } \n        return ans ; \n         \n    } \n};",
    "submit_ts": "1717299884",
    "subm_id": "1274826938"
}