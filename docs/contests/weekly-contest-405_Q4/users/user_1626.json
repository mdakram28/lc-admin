{
    "username": "Wilsano",
    "submission": "class Solution {\npublic:\n    class Trie{\n    public:\n        unordered_map<char, Trie*> next;\n        int cost = INT_MAX;\n        bool is_end = false;\n\n        void insert(const string& word, int cost){\n            Trie *root = this;\n            for(const char& letter : word){\n                if(root->next[letter] == nullptr){\n                    root->next[letter] = new Trie();\n                }\n                root = root->next[letter];\n            }\n            root->cost = min(root->cost, cost);\n            root->is_end = true;\n        }\n        \n        void query(const string& target, int start, vector<int>& dp){\n            Trie *root = this;\n            int count = 0;\n            for(int i = start; i < target.size(); ++i){\n                char letter = target[i];\n                if(root->next[letter] == nullptr){\n                    return;\n                }\n                root = root->next[letter];\n                count += 1;\n                if(root->is_end){\n                    int end = start + count - 1;\n                    if(start == 0 || dp[start - 1] != INT_MAX){\n                        int prev = (start == 0) ? 0 : dp[start - 1];\n                        dp[end] = min(dp[end], prev + root->cost);\n                    }\n                }\n            }\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie *trie = new Trie();\n        for(int i = 0; i < words.size(); ++i){\n            trie->insert(words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        vector<int> dp(n, INT_MAX);\n        for(int i = 0; i < n; ++i){\n            trie->query(target, i, dp);\n        }\n        return (dp.back() == INT_MAX) ? -1 : dp.back();\n    }\n};",
    "submit_ts": "1720324019",
    "subm_id": "1312389665"
}