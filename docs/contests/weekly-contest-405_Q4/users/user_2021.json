{
    "username": "jayesh47",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<pair<int, int>> wordIndices;  // (index, cost) pairs\n    \n    TrieNode() : children(26, nullptr) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Build Trie\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], i, costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->children[target[j] - 'a'] == nullptr) break;\n                \n                node = node->children[target[j] - 'a'];\n                for (const auto& [index, cost] : node->wordIndices) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n        \n        // Clean up Trie\n        deleteTrie(root);\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    void insertWord(TrieNode* root, const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children[c - 'a'] == nullptr) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->wordIndices.emplace_back(index, cost);\n    }\n    \n    void deleteTrie(TrieNode* node) {\n        if (node == nullptr) return;\n        for (TrieNode* child : node->children) {\n            deleteTrie(child);\n        }\n        delete node;\n    }\n};",
    "submit_ts": "1720323723",
    "subm_id": "1312382489"
}