{
    "username": "Aitijhya_Modak",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        priority_queue<vector<long long>> pq;\n        \n        for (int i=0;i<nums.size();i++) {\n            if (target[i] - nums[i] == 0) continue;\n            pq.push({i, target[i] - nums[i]});\n        }\n        \n        long long output = 0;\n        while(!pq.empty()) {\n            vector<long long> curr = pq.top();\n            pq.pop();\n            long long sign = getSign(curr[1]);\n            long long mine = abs(curr[1]);\n            long long ci = curr[0];\n            stack<vector<long long>> st;\n            st.push(curr);\n            \n            while(!pq.empty() && getSign(pq.top()[1]) == sign && pq.top()[0] == ci - 1 ) {\n                mine = min(mine, abs(pq.top()[1]));\n                st.push(pq.top());\n                pq.pop();\n                ci--;\n            }\n            output += 1LL * mine;\n            while(!st.empty()) {\n                if (abs(st.top()[1]) - mine == 0 ) st.pop();\n                else {\n                    pq.push({st.top()[0], ( abs(st.top()[1]) - mine) * sign});\n                    st.pop();\n                }\n            }\n        }\n        \n        return output;\n    }\n    \n    long long getSign(long long n) {\n        if (n < 0) return -1;\n        return 1;\n    }\n};",
    "submit_ts": "1721532489",
    "subm_id": "1327987059"
}