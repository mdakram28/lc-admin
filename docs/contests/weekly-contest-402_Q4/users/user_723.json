{
    "username": "leat14536",
    "submission": "\nclass BIT:\n    def __init__ (self, n):\n        self.tree = [0] * n\n\n    def add (self, i, val):\n        while i < len(self.tree):\n            self.tree[i] += val\n            # \u52a0lowbit\n            i += i & -i\n\n    def query (self, i):\n        if i == 0: return 0\n        res = 0\n        while i > 0:\n            res += self.tree[i]\n            # \u51cflowbit\n            i &= i - 1\n        return res\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = BIT(n + 2)\n        v = [0] * n\n\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                tree.add(i + 1, 1)\n                v[i] = 1\n        def comp (i):\n            if i == 0 or i >= n - 1: return 0\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                return 1\n            return 0\n\n        ans = []\n        for op, x, y in queries:\n            if op == 1:\n                if x + 1 >= y:\n                    ans.append(0)\n                else:\n                    y = min(y, n - 1)\n                    ans.append(tree.query(y) - tree.query(x + 1))\n            else:\n                if x == 0:\n                    nums[x] = y\n                    f = v[1]\n                    t = comp(1)\n                    if f != t:\n                        if f == 1: # \u5cf0\u503c\u53d8\u975e\u5cf0\u503c\n                            tree.add(2, -1)\n                        else:\n                            tree.add(2, 1)\n                    v[1] = t\n                elif x == n - 1:\n                    nums[x] = y\n                    f = v[n - 2]\n                    t = comp(n - 2)\n                    if f != t:\n                        if f == 1: # \u5cf0\u503c\u53d8\u975e\u5cf0\u503c\n                            tree.add(n - 1, -1)\n                        else:\n                            tree.add(n - 1, 1)\n                    v[n - 2] = t\n                else:\n                    pre = v[x - 1: x + 2]\n                    nums[x] = y\n                    cur = [comp(x - 1), comp(x), comp(x + 1)]\n                    for i, (f, t) in enumerate(zip(pre, cur)):\n                        if f == t: continue\n                        if f == 1: # \u5cf0\u503c\u53d8\u975e\u5cf0\u503c\n                            tree.add(x + i, -1)\n                        else:\n                            tree.add(x + i, 1)\n\n\n                    v[x - 1: x + 2] = cur\n        return ans",
    "submit_ts": "1718507720",
    "subm_id": "539783063"
}