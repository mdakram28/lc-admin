{
    "username": "lwm7708",
    "submission": "#include <iterator>\n#include <map>\n#include <set>\n#include <utility>\n#include <vector>\n\nclass Solution {\n\npublic:\n\n    auto shortestDistanceAfterQueries(int n, std::vector<std::vector<int>>& queries) {\n\n        auto answer = std::vector<int>();\n        auto idxs = std::set<int>();\n        auto len = n - 1;\n        auto mxs = std::map<int, int>({std::make_pair(-1, -1)});\n        auto roads = std::set<int>();\n\n        answer.reserve(std::size(queries));\n\n        for (auto i = 0; i < n - 1; ++i) {\n            idxs.insert(std::end(idxs), i);\n        }\n\n        for (const auto& x : queries) {\n            auto c_it = mxs.upper_bound(x[0]);\n            if (std::prev(c_it)->second < x[1]) {\n                for (\n                    auto it = idxs.lower_bound(x[0]); it != std::end(idxs) && *it < x[1];\n                    it = idxs.erase(it)\n                ) {\n                    --len;\n                }\n                ++len;\n                idxs.insert(x[0]);\n                while (c_it != std::end(mxs) && c_it->second <= x[1]) {\n                    c_it = mxs.erase(c_it);\n                }\n                mxs.insert_or_assign(x[0], x[1]);\n            }\n            answer.push_back(len);\n        }\n\n        return answer;\n\n    }\n\n};\n\n",
    "submit_ts": "1722739987",
    "subm_id": "1343708298"
}