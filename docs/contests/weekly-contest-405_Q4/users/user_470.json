{
    "username": "kusagra18",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> kush;\n        vector<pair<int, int>> raj;\n    };\n    \n    class Trie {\n    public:\n        TrieNode* root;\n        \n        Trie() { root = new TrieNode(); }\n        \n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->kush.count(c))\n                    node->kush[c] = new TrieNode();\n                node = node->kush[c];\n            }\n            node->raj.push_back({index, cost});\n        }\n    };\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            \n            TrieNode* node = trie.root;\n            \n            for (int j = i; j < n; ++j) {\n                if (!node->kush.count(target[j])) break;\n                \n                node = node->kush[target[j]];\n\n                for (auto& p : node->raj) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    \n                    dp[j + 1] = min(dp[j + 1], dp[i] + wordCost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720321936",
    "subm_id": "1312336256"
}