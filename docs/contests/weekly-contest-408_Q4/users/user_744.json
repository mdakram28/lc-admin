{
    "username": "jaysukh_409",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) \n    {\n        int n = circles.size();\n        vector<vector<int>> adj(n, vector<int>());\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = i + 1; j < n; j++)\n            {\n                long long rad = (circles[i][2] + circles[j][2]);\n                rad *= rad;\n                int x1 = circles[i][0], y1 = circles[i][1];\n                int x2 = circles[j][0], y2 = circles[j][1];\n                long long dis = (long long)(x1 - x2) * (long long)(x1 - x2);\n                dis += ((long long)(y1 - y2) * (long long)(y1 - y2));\n                if (dis <= rad)\n                {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }  \n        vector<int> visited(n, 0);\n        queue<int> q;\n        set<int> st;\n        for (int i = 0; i < n; i++)\n        {\n            if (circles[i][2] >= circles[i][1] || (X - circles[i][0]) <= circles[i][2])\n            {\n                q.push(i);\n                visited[i] = 1;\n            }\n            if (circles[i][2] >= circles[i][0] || (Y - circles[i][1]) <= circles[i][2]) st.insert(i);\n        }\n        while (!q.empty())\n        {\n            int x = q.front();\n            q.pop();\n            if (st.find(x) != st.end()) return false;\n            for (auto i : adj[x])\n            {\n                if (!visited[i])\n                {\n                    visited[i] = 1;\n                    q.push(i);\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138197",
    "subm_id": "1335784628"
}