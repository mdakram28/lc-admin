{
    "username": "8S4E0rZaEE",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int, vector<int>, greater<int>> hCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int, vector<int>, greater<int>> vCuts(verticalCut.begin(), verticalCut.end());\n        \n        // Initial cake size is (m-1) x (n-1) and total cost is 0\n        int hSize = m - 1;\n        int vSize = n - 1;\n        long long totalCost = 0;\n\n        // While there are cuts to be made\n        while (!hCuts.empty() && !vCuts.empty()) {\n            if (hCuts.top() < vCuts.top()) {\n                totalCost += hCuts.top() * (vSize + 1);\n                hCuts.pop();\n                hSize--;\n            } else {\n                totalCost += vCuts.top() * (hSize + 1);\n                vCuts.pop();\n                vSize--;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (!hCuts.empty()) {\n            totalCost += hCuts.top() * (vSize + 1);\n            hCuts.pop();\n        }\n\n        // If there are remaining vertical cuts\n        while (!vCuts.empty()) {\n            totalCost += vCuts.top() * (hSize + 1);\n            vCuts.pop();\n        }\n\n        return totalCost;\n    \n    }\n};",
    "submit_ts": "1720924747",
    "subm_id": "546434002"
}