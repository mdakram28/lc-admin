{
    "username": "allrounderankit",
    "submission": "class Solution {\npublic:\n    int computeArea(int r1, int c1, int r2, int c2, vector<vector<int>>& g) {\n        int minRow = 400, minCol = 400;\n        int maxRow = 0, maxCol = 0;\n        int count = 0;\n\n        for (int i = r1; i <= r2; ++i) {\n            for (int j = c1; j <= c2; ++j) {\n                if (g[i][j] == 1) {\n                    minRow = min(minRow, i);\n                    minCol = min(minCol, j);\n                    maxRow = max(maxRow, i);\n                    maxCol = max(maxCol, j);\n                    count++;\n                }\n            }\n        }\n\n        return count == 0 ? 1 : (maxRow - minRow + 1) * (maxCol - minCol + 1);\n    }\n\n    int findMinimumSum(vector<vector<int>>& g) {\n        int n = g.size();\n        int m = g[0].size();\n        int minSum = 1e8;\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                checkHorizontalVerticalSplits(i, j, g, n, m, minSum);\n            }\n        }\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                checkMixedSplits(i, j, g, n, m, minSum);\n            }\n        }\n\n        checkVerticalSplits(g, n, m, minSum);\n        checkHorizontalSplits(g, n, m, minSum);\n\n        return minSum;\n    }\n\n    void checkHorizontalVerticalSplits(int i, int j, vector<vector<int>>& g, int n, int m, int& minSum) {\n        int ms = computeArea(0, 0, i, j, g) + computeArea(0, j + 1, i, m - 1, g) + computeArea(i + 1, 0, n - 1, m - 1, g);\n        minSum = min(minSum, ms);\n\n        ms = computeArea(0, 0, i, m - 1, g) + computeArea(i + 1, j + 1, n - 1, m - 1, g) + computeArea(i + 1, 0, n - 1, j, g);\n        minSum = min(minSum, ms);\n    }\n\n    void checkMixedSplits(int i, int j, vector<vector<int>>& g, int n, int m, int& minSum) {\n        int ms = computeArea(0, 0, n - 1, j, g) + computeArea(0, j + 1, i, m - 1, g) + computeArea(i + 1, j + 1, n - 1, m - 1, g);\n        minSum = min(minSum, ms);\n\n        ms = computeArea(0, 0, i, j, g) + computeArea(i + 1, 0, n - 1, j, g) + computeArea(0, j + 1, n - 1, m - 1, g);\n        minSum = min(minSum, ms);\n    }\n\n    void checkVerticalSplits(vector<vector<int>>& g, int n, int m, int& minSum) {\n        for (int i = 0; i < m; ++i) {\n            for (int j = i + 1; j < m; ++j) {\n                int ms = computeArea(0, 0, n - 1, i, g) + computeArea(0, i + 1, n - 1, j, g) + computeArea(0, j + 1, n - 1, m - 1, g);\n                minSum = min(minSum, ms);\n            }\n        }\n    }\n\n    void checkHorizontalSplits(vector<vector<int>>& g, int n, int m, int& minSum) {\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                int ms = computeArea(0, 0, i, m - 1, g) + computeArea(i + 1, 0, j, m - 1, g) + computeArea(j + 1, 0, n - 1, m - 1, g);\n                minSum = min(minSum, ms);\n            }\n        }\n    }\n\n    int minimumSum(vector<vector<int>>& g) {\n        return findMinimumSum(g);\n    }\n};\n",
    "submit_ts": "1719113478",
    "subm_id": "1297326147"
}