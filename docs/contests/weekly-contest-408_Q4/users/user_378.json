{
    "username": "ciphercraft",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int xCoor, int yCoor, vector<vector<int>>& c2) {\n        int n = size(c2);\n        vector<pair<pair<int, int>, int>> c(n);\n        vector<vector<int>> g(n + 11);\n        for (int i = 1; i <= n; ++i) {\n            c[i - 1] = {{c2[i - 1][0], c2[i - 1][1]}, c2[i - 1][2]};\n        }\n        for (int i = 1; i <= n; ++i) {\n            if (xCoor - c[i - 1].first.first <= c[i - 1].second) {\n                g[n + 2].push_back(i - 1);\n                g[i - 1].push_back(n + 2);\n            }\n            if (c[i - 1].first.first <= c[i - 1].second) {\n                g[n].push_back(i - 1);\n                g[i - 1].push_back(n);\n            }\n            if (yCoor - c[i - 1].first.second <= c[i - 1].second) {\n                g[n + 3].push_back(i - 1);\n                g[i - 1].push_back(n + 3);\n            }\n            if (c[i - 1].first.second <= c[i - 1].second) {\n                g[n + 1].push_back(i - 1);\n                g[i - 1].push_back(n + 1);\n            }\n            for (int j = i - 1; j < n - 1; ++j) {\n                if ((c[i - 1].second + c[j + 1].second) >= \n                sqrt(pow(c[i - 1].first.first - c[j + 1].first.first, 2) + \n                     pow(c[i - 1].first.second - c[j + 1].first.second, 2))) {\n                    g[i - 1].push_back(j + 1);\n                    g[j + 1].push_back(i - 1);\n                }\n            }\n        }\n        function<bool(int, int, int)> bfs = [&](int s, int t1, int t2) {\n            deque<int> bfs; vector<int> v(n + 11, 0);\n            bfs.push_back(s);  v[s] = 1;\n            while (size(bfs)) {\n                int node = bfs.front();\n                bfs.pop_front();\n                for (int neighbor : g[node]) {\n                    if (v[neighbor]) {\n                        continue;\n                    }\n                    else {\n                        bfs.push_back(neighbor);\n                        v[neighbor] = 1;\n                    }\n                }\n            }\n            return v[t1] or v[t2];\n        };\n        \n        return !(bfs(n, n + 1, n + 2) or bfs(n + 3, n + 2, n + 1));\n    }\n};\n",
    "submit_ts": "1722137518",
    "subm_id": "1335766071"
}