{
    "username": "sai_dheeraj_peketi",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& arr, int k) {\n        if (arr.size() < k)\n            return 0;\n\n        // Extend the array by adding the first k-1 elements to the end\n        vector<int> extendedArr = arr;\n        for (int i = 0; i < k - 1; ++i) {\n            extendedArr.push_back(arr[i]);\n        }\n\n        string pattern1 = createAlternatingPattern(k, 0);\n        string pattern2 = createAlternatingPattern(k, 1);\n        string text = vectorToString(extendedArr);\n\n        int count1 = KMPSearch(pattern1, text, arr.size(), k);\n        int count2 = KMPSearch(pattern2, text, arr.size(), k);\n\n        return count1 + count2;\n    }\n\nprivate:\n    string createAlternatingPattern(int k, int start) {\n        string pattern = \"\";\n        for (int i = 0; i < k; i++) {\n            pattern += ((i % 2) == start) ? '0' : '1';\n        }\n        return pattern;\n    }\n\n    string vectorToString(const vector<int>& arr) {\n        string result = \"\";\n        for (int num : arr) {\n            result += (num == 0) ? '0' : '1';\n        }\n        return result;\n    }\n\n    vector<int> computeLPSArray(const string& pattern) {\n        int M = pattern.length();\n        vector<int> lps(M, 0);\n        int len = 0;\n        int i = 1;\n\n        while (i < M) {\n            if (pattern[i] == pattern[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return lps;\n    }\n\n    int KMPSearch(const string& pattern, const string& text, int originalSize, int k) {\n        int M = pattern.length();\n        int N = text.length();\n\n        vector<int> lps = computeLPSArray(pattern);\n\n        int i = 0; // index for text\n        int j = 0; // index for pattern\n        int count = 0;\n\n        while (i < N) {\n            if (pattern[j] == text[i]) {\n                i++;\n                j++;\n            }\n\n            if (j == M) {\n                // Only count matches that start within the original array length\n                if (i - M < originalSize) {\n                    count++;\n                }\n                j = lps[j - 1];\n            } else if (i < N && pattern[j] != text[i]) {\n                if (j != 0) {\n                    j = lps[j - 1];\n                } else {\n                    i++;\n                }\n            }\n        }\n        return count;\n    }\n};",
    "submit_ts": "1720278177",
    "subm_id": "1311697790"
}