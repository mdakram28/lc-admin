{
    "username": "sach_code",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& tree, int n) {\n    vector<int> dist(n, -1);\n    queue<int> q;\n    q.push(start);\n    dist[start] = 0;\n    int farthest = start;\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (int neighbor : tree[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                if (dist[neighbor] > dist[farthest]) {\n                    farthest = neighbor;\n                }\n            }\n        }\n    }\n    return make_pair(farthest, dist[farthest]);\n}\n\nint treeDiameter(const vector<vector<int>>& tree, int n) {\n    auto p1 = bfs(0, tree, n);\n    auto p2 = bfs(p1.first, tree, n);\n    return p2.second;\n}\n\nint minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n    int n = edges1.size() + 1;\n    int m = edges2.size() + 1;\n\n    vector<vector<int>> tree1(n), tree2(m);\n    for (const auto& edge : edges1) {\n        tree1[edge[0]].push_back(edge[1]);\n        tree1[edge[1]].push_back(edge[0]);\n    }\n    for (const auto& edge : edges2) {\n        tree2[edge[0]].push_back(edge[1]);\n        tree2[edge[1]].push_back(edge[0]);\n    }\n\n    int d1 = treeDiameter(tree1, n);\n    int d2 = treeDiameter(tree2, m);\n\n\n    int newDiameter = max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n\n    return newDiameter;\n}\n};",
    "submit_ts": "1719715436",
    "subm_id": "1304336689"
}