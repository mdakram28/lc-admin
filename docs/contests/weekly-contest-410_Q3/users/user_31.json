{
    "username": "Nomomo",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        \n        # dp[i][v] will hold the count of valid (arr1, arr2) pairs up to index i with arr1[i] = v\n        dp = [[0] * (nums[i] + 1) for i in range(n)]\n        \n        # Initialize dp for the first element\n        for v in range(nums[0] + 1):\n            dp[0][v] = 1\n        \n        # Fill dp for other elements\n        for i in range(1, n):\n            # We use a prefix sum to optimize the transition step\n            prefix_sum = [0] * (nums[i-1] + 2)  # +2 to handle bounds safely\n            \n            # Calculate prefix sums for dp[i-1]\n            for j in range(nums[i-1] + 1):\n                prefix_sum[j + 1] = (prefix_sum[j] + dp[i-1][j]) % MOD\n            \n            # Now compute dp values for the current i\n            for v in range(nums[i] + 1):\n                # arr2[i-1] is decreasing, so nums[i-1] - arr1[i-1] >= nums[i] - v\n                # arr1[i-1] <= v thus, arr1[i-1] = j where j is in range(0, v+1)\n                # so j needs to also satisfy j <= nums[i-1] - (nums[i] - v)\n                max_j = min(v, nums[i-1] - (nums[i] - v))\n                if max_j >= 0:\n                    dp[i][v] = (prefix_sum[max_j + 1]) % MOD\n        \n        # Calculate the final result by summing the last row of dp\n        result = 0\n        for v in range(nums[n-1] + 1):\n            result = (result + dp[n-1][v]) % MOD\n        \n        return result",
    "submit_ts": "1723344577",
    "subm_id": "1351537578"
}