{
    "username": "GabrielXu",
    "submission": "#pragma GCC optimize(\"O3,unroll-loops\")\n#include <bits/stdc++.h>\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\nusing namespace std;\n#define forn(z) for(int i=0; i<z; i++)\n#define forn2(z) for(int j=0; j<z; j++)\n#define fastIO ios_base::sync_with_stdio(false);cin.tie(NULL)\ntypedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef vector<ll> vll;\ntypedef pair<ll,ll> pll;\n#define pb push_back\n#define all(x) x.begin(), x.end()\n#define fi first\n#define se second\n#define nl \"\\n\"\n#define dbg(z, n) forn(n)cerr<<z[i]<<\" \\n\"[i==n-1];\n#define dbg2(z, n, m) forn(n)forn2(m)cerr<<z[i][j]<<\" \\n\"[j==m-1];\n#define dbg3(z) auto itt=z.begin(); while(itt!=z.end()) {__print(*itt); cerr << \" \"; itt++;} cerr << \"\\n\";\nll int_sqrt(ll a) {long long x = sqrt(a) + 2; while(x * x > a) x--; return x;}\nll int_pow(ll a, ll b) {ll ans=1; while(b--)ans*=a; return ans;}\nvoid __print(int x) {cerr << x;}\nvoid __print(ll x) {cerr << x;}\nvoid __print(double x) {cerr << x;}\nvoid __print(char x) {cerr << '\\'' << x << '\\'';}\nvoid __print(const char *x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(const string &x) {cerr << '\\\"' << x << '\\\"';}\nvoid __print(bool x) {cerr << (x ? \"true\" : \"false\");}\ntemplate<typename T, typename V>\nvoid __print(const pair<T, V> &x) {cerr << '{'; __print(x.first); cerr << ','; __print(x.second); cerr << '}';}\ntemplate<typename T>\nvoid __print(const T &x) {int f = 0; cerr << '{'; for (auto &i: x) cerr << (f++ ? \",\" : \"\"), __print(i); cerr << \"}\";}\nvoid _print() {cerr << \"]\\n\";}\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {__print(t); if (sizeof...(v)) cerr << \", \"; _print(v...);}\n#ifndef DONLINE_JUDGE\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\n#else\n#define debug(x...) 42\n#endif\nstruct custom_hash {\n    static uint64_t splitmix64(uint64_t x) {\n        // http://xorshift.di.unimi.it/splitmix64.c\n        x += 0x9e3779b97f4a7c15;\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n        return x ^ (x >> 31);\n    }\n    size_t operator()(uint64_t x) const {\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n        return splitmix64(x + FIXED_RANDOM);\n    }\n};\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n=grid.size();\n        int m=grid[0].size();\n        int ans=0;\n        forn(n/2) {\n            forn2(m/2) {\n                int ones=0;\n                ones+=grid[i][j];\n                ones+=grid[n-i-1][j];\n                ones+=grid[i][m-j-1];\n                ones+=grid[n-i-1][m-j-1];\n                ans+=min(ones, 4-ones);\n            }\n        }\n        int ones=0;\n        int diff=0;\n        if(m%2==1) {\n            forn(n/2) {\n                if(grid[i][m/2]!=grid[n-i-1][m/2]) {\n                    diff++;\n                } else if(grid[i][m/2]==1) {\n                    ones+=2;\n                }\n            }\n        } if(n%2==1) {\n            forn2(m/2) {\n                if(grid[n/2][j]!=grid[n/2][m-j-1]) {\n                    diff++;\n                } else if(grid[n/2][j]==1) {\n                    ones+=2;\n                }\n            }\n        }\n        ans+=diff;\n        if(ones%4==2&&diff==0) ans+=2;\n        if(n%2==1&&m%2==1) ans+=grid[n/2][m/2];\n        return ans;\n    }\n};",
    "submit_ts": "1722696709",
    "subm_id": "1343119005"
}