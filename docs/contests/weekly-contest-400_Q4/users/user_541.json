{
    "username": "Rainingcity",
    "submission": "class SegTree {\nprivate:\n    vector<int> v{};\n    int n;\n    void build(int idx, int l, int r, vector<int>& nums) {\n        if (l == r) {\n            v[idx] = nums[l];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        int idxl = idx << 1;\n        build(idxl, l, mid, nums);\n        build(idxl + 1, mid + 1, r, nums);\n        v[idx] = v[idxl] & v[idxl + 1];\n    }\n    int query(int idx, int l, int r, int tl, int tr) {\n        if (l == tl && r == tr) return v[idx];\n        int idxl = idx << 1;\n        int mid = (l + r) >> 1;\n        if (tr <= mid) return query(idxl, l, mid, tl, tr);\n        else if (tl > mid) return query(idxl + 1, mid + 1, r, tl, tr);\n        else return query(idxl, l, mid, tl, mid) & query(idxl + 1, mid + 1, r, mid + 1, tr);\n    }\npublic:\n    SegTree(){}\n    SegTree(int _n): n(_n) {\n        v.resize(5 * n, 0);\n    }\n    void build(vector<int>& nums) {\n        n = nums.size();\n        v.clear();\n        v.resize(5 * n, 0);\n        build(1, 0, n - 1, nums);\n    }\n    int query(int tl, int tr) {\n        return query(1, 0, n - 1, tl, tr);\n    }\n};\n\nclass Solution {\nprivate:\n    int diff(int x, int y) {\n        return abs(x - y);\n    }\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegTree st;\n        st.build(nums);\n        int ans = 1e9+7;\n        for(int i = 0; i < n; i++) {\n            int l = i, r = n - 1;\n            while(l < r) {\n                int mid = (l + r) >> 1;\n                int res = st.query(i, mid);\n                if (res > k) l = mid + 1;\n                else r = mid;\n            }\n            int prev = -1;\n            if (r > i) {\n                prev = st.query(i, r - 1);\n                ans = min(ans, diff(prev, k));\n            }\n            ans = min(ans, diff(prev & nums[r], k));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297897.0
}