{
    "username": "blshal",
    "submission": "class Solution {\n    class TrieNode {\n        public:\n            vector<TrieNode*> children;\n            int cost;\n            bool endOfWord;\n\n            TrieNode() : children(26, nullptr), cost(INT_MAX), endOfWord(false) {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const string& word, int cost) {\n            TrieNode* node = root;\n            for (char ch : word) {\n                if (!node->children[ch - 'a']) {\n                    node->children[ch - 'a'] = new TrieNode();\n                }\n                node = node->children[ch - 'a'];\n            }\n            node->cost = min(cost, node->cost);\n            node->endOfWord = true;\n        }\n\n        TrieNode* getRoot() {\n            return root;\n        }\n    };\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n         Trie trie;\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        minCost[0] = 0;\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < targetLength; ++j) {\n                char ch = target[j];\n                if (!node->children[ch - 'a']) break;\n                node = node->children[ch - 'a'];\n                if (node->endOfWord) {\n                    minCost[j + 1] = min(minCost[j + 1], minCost[i] + node->cost);\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n};",
    "submit_ts": "1720323142",
    "subm_id": "1312368331"
}