{
    "username": "shivamaggarwal513",
    "submission": "class Solution {\nprivate:\n    int manhattan(vector<vector<int>>& points, int i, int j) {\n        return abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1]);\n    }\n    \n    pair<int, int> maxManhattanDistance(vector<vector<int>>& points, int remove = -1) {\n        int n = points.size();\n        vector<pair<int, int>> sum, diff;\n        for (int i = 0; i < n; i++) {\n            if (i != remove) {\n                sum.push_back({points[i][0] + points[i][1], i});\n                diff.push_back({points[i][0] - points[i][1], i});\n            }\n        }\n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        int maxDist = max(sum.back().first - sum.front().first, diff.back().first - diff.front().first);\n        return maxDist == sum.back().first - sum.front().first\n            ? make_pair(sum.back().second, sum.front().second)\n            : make_pair(diff.back().second, diff.front().second);\n    }\n    \npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        auto [mi, mj] = maxManhattanDistance(points);\n        auto [mi1, mj1] = maxManhattanDistance(points, mi);\n        auto [mi2, mj2] = maxManhattanDistance(points, mj);\n        return min({\n            manhattan(points, mi, mj),\n            manhattan(points, mi1, mj1),\n            manhattan(points, mi2, mj2)\n        });\n    }\n};"
}