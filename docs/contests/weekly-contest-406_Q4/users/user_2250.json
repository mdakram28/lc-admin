{
    "username": "Php_developer_lcby",
    "submission": "<?php\n\nclass Solution {\n    public function minimumCost($m, $n, $horizontalCut, $verticalCut) {\n        // Sort the cuts in descending order\n        rsort($horizontalCut);\n        rsort($verticalCut);\n\n        $totalCost = 0;\n        $hSegments = 1;\n        $vSegments = 1;\n        $hIndex = 0;\n        $vIndex = 0;\n\n        // Process the cuts\n        while ($hIndex < count($horizontalCut) && $vIndex < count($verticalCut)) {\n            if ($horizontalCut[$hIndex] >= $verticalCut[$vIndex]) {\n                $totalCost += $horizontalCut[$hIndex] * $vSegments;\n                $hSegments++;\n                $hIndex++;\n            } else {\n                $totalCost += $verticalCut[$vIndex] * $hSegments;\n                $vSegments++;\n                $vIndex++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while ($hIndex < count($horizontalCut)) {\n            $totalCost += $horizontalCut[$hIndex] * $vSegments;\n            $hSegments++;\n            $hIndex++;\n        }\n\n        // If there are remaining vertical cuts\n        while ($vIndex < count($verticalCut)) {\n            $totalCost += $verticalCut[$vIndex] * $hSegments;\n            $vSegments++;\n            $vIndex++;\n        }\n\n        return $totalCost;\n    }\n}\n\n// Example usage\n$solution = new Solution();\n$m = 5;\n$n = 4;\n$horizontalCut = [1, 2, 4];\n$verticalCut = [1, 3];\necho $solution->minimumCost($m, $n, $horizontalCut, $verticalCut); // Output: 4 (Explanation: (4*1) + (4*1) = 4)\n\n?>\n",
    "submit_ts": "1720925558",
    "subm_id": "1320258698"
}