{
    "username": "Hayford08",
    "submission": "constexpr long long INF = 1e9;\nstruct Trie{\n    array<Trie*, 26> children;\n    long long cost;\n    Trie() : cost(INF) {\n        for (int i = 0; i < 26; i++){\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<long long> dp;\n    vector<vector<int>> adj;\n    int n; \n    Trie* root;\n    void insert(string &word, long long cost){\n        auto curr = root;\n        for (auto &c : word) {\n            int pos = c - 'a';\n            if (!curr->children[pos]){\n                curr->children[pos] = new Trie();\n            }\n            curr = curr->children[pos];\n        }\n        curr->cost = min(cost, curr->cost);\n    }\n\n    long long solve(int idx, string &target) {\n        if (idx == n){\n            return 0;\n        }\n        long long res = dp[idx];\n        if (res != -1){\n            return res;\n        }\n        res = INF;\n        auto curr = root;\n        for (int i = idx; i < (int)target.size(); i++) {\n            int pos = target[i] - 'a';\n            if (!curr->children[pos]) {\n                break;\n            }\n            curr = curr->children[pos];\n            if (curr->cost != INF){\n                res = min(res, curr->cost + solve(i + 1, target));\n            }\n        }\n        return dp[idx] = res;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new Trie();\n        int sz = words.size();\n        for (int i = 0; i < sz; i++){\n            insert(words[i], costs[i]);\n        }\n        n = target.size();\n        dp = vector<long long>(n, -1);\n\n        long long res = solve(0, target);\n        if (res >= INF){\n            return -1;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720323542",
    "subm_id": "1312378089"
}