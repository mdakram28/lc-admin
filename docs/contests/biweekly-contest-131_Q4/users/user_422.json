{
    "username": "wangyuqi",
    "submission": "\nstruct Node{\n    int mx, lmx, rmx, len;\n}node[50000 * 20];\n\nvoid build(int p, int l, int r) {\n    node[p].mx = r - l + 1;\n    node[p].lmx = r - l + 1;\n    node[p].rmx = r - l + 1;\n    node[p].len = r - l + 1;\n    if (l == r) return;\n    int mid = (l + r) >> 1;\n    build(p << 1, l, mid);\n    build(p << 1 | 1, mid + 1, r);\n}\n\nvoid update(int p, int l, int r, int x) {\n    if (l == r) {\n        node[p].mx = 0;\n        node[p].lmx = 0;\n        node[p].rmx = 0;\n        return;\n    }\n    \n    int mid = (l + r) >> 1;\n    int ls = (p << 1);\n    int rs = ls | 1;\n    \n    if (x <= mid) update(ls, l, mid, x);\n    else update(rs, mid + 1, r, x);\n    \n    node[p].lmx = node[ls].lmx;\n    if (node[ls].lmx == node[ls].len) node[p].lmx = mid - l + 1 + node[rs].lmx;\n    \n    node[p].rmx = node[rs].rmx;\n    if (node[rs].rmx == node[rs].len) node[p].rmx = r - mid + node[ls].rmx;\n    \n    node[p].mx = max({node[ls].mx, node[rs].mx, node[p].lmx, node[p].rmx, node[ls].rmx + node[rs].lmx});\n}\n\nNode query(int p, int l, int r, int ql, int qr) {\n    if (ql <= l && r <= qr) {\n        return node[p];\n    }\n    int mid = (l + r) >> 1;\n    int ls = (p << 1);\n    int rs = ls | 1;\n    if (ql <= mid && mid < qr) {\n        Node nl = query(ls, l, mid, ql, qr);\n        Node nr = query(rs, mid + 1, r, ql, qr);\n        Node ret = Node();\n        ret.len = nl.len + nr.len;\n        \n        ret.lmx = nl.lmx;\n        if (nl.lmx == nl.len) ret.lmx = nl.len + nr.lmx;\n            \n        ret.rmx = nr.rmx;\n        if (nr.rmx == nr.len) ret.rmx = nr.len + nl.rmx;\n        \n        ret.mx = max({ret.lmx, ret.rmx, nl.rmx + nr.lmx, nl.mx, nr.mx});\n        return ret;\n    } else if (ql <= mid) {\n        return query(ls, l, mid, ql, qr);\n    } else {\n        return query(rs, mid + 1, r, ql, qr);\n    }\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ret(0);\n        int p = 3 * queries.size();\n        int n = min(50000, p) + 10;\n        // n = 13;\n        build(1, 1, n);\n        for (auto& v: queries) {\n            if (v[0] == 1) {\n                update(1, 1, n, v[1] + 1);\n            } else {\n                Node tmp = query(1, 1, n, 1, v[1] + 1);\n                int l = 1, r = v[1] + 1;\n                int val = tmp.mx;\n                l += tmp.lmx;\n                r -= tmp.rmx;\n                if (l <= r) {\n                    Node tmp2 = query(1, 1, n, l, r);\n                    val = max(val, tmp2.mx + 1);\n                }\n                val = min(val, v[1]);\n                // cout << tmp.mx << \"---\" << val << endl;\n                ret.push_back(val >= v[2]);\n                // break;\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1716652107.0
}