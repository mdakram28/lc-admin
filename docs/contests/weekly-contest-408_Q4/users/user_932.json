{
    "username": "ankkkush",
    "submission": "class Solution {\n    public boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        queue.add(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.add(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        int numCircles = circles2.length;\n        List<List<Integer>> graph = new ArrayList<>(numCircles + 4);\n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        int[][] circles = new int[numCircles][3];\n        for (int i = 0; i < numCircles; i++) {\n            circles[i][0] = circles2[i][0];\n            circles[i][1] = circles2[i][1];\n            circles[i][2] = circles2[i][2];\n        }\n\n        for (int i = 0; i < numCircles; i++) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n\n            if (x <= r) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - x <= r) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (y <= r) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - y <= r) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; j++) {\n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                int r2 = circles[j][2];\n                double distance = Math.sqrt(Math.pow(x - x2, 2) + Math.pow(y - y2, 2));\n                int radiusSum = r + r2;\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) ? 1 : 0); // Check for bottom-left corner\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4) ? 1 : 0); // Check for top-right corner\n\n        return isBlocked == 0;\n    }\n}",
    "submit_ts": "1722137500",
    "subm_id": "1335765555"
}