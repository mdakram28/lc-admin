{
    "username": "himeshdevs",
    "submission": "class Solution {\npublic:\n        int minFlips(vector<vector<int>>& grid) {\n        int row = grid[0].size(),r = 0,col = grid.size(),p=0,c=0;\n        // Loop through the 2x2 sub-grids\n        for (int a = 0; a < col / 2; ++a) {\n            for (int b = 0; b < row / 2; ++b) {\n                vector<int> e = {grid[a][b],grid[col - a - 1][b],grid[a][row - b - 1],grid[col - a - 1][row - b - 1]};                \n                int o = accumulate(e.begin(), e.end(), 0);                \n                r += min(o, 4 - o);\n            }\n        }\n        // Handle the middle row if n is odd\n        if (col % 2 != 0) {\n            for (int d = 0; d < row / 2; ++d) {\n                if (grid[col / 2][d] != grid[col / 2][row - d - 1]) {\n                    r += 1;\n                    p += 1;\n                } else {\n                    if (grid[col / 2][d] == 1) {\n                        c += 1;\n                    }\n                }\n            }\n        }        \n        // Handle the middle column if m is odd\n        if (row % 2 != 0) {\n            for (int f = 0; f < col / 2; ++f) {\n                if (grid[f][row/ 2] != grid[col - f - 1][row / 2]) {\n                    r += 1;\n                    p += 1;\n                } else {\n                    if (grid[f][row / 2] == 1) {\n                        c += 1;\n                    }\n                }\n            }\n        }        \n        // Handle the central element if both n and m are odd\n        if (col % 2 != 0 && row % 2 != 0 && grid[col/ 2][row / 2] == 1) {\n            r += 1;\n        }        \n        if (p == 0 && c % 2 != 0) {\n            r += 2;\n        }\n        return r;\n    }\n};",
    "submit_ts": "1722700063",
    "subm_id": "1343230556"
}