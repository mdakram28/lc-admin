{
    "username": "Ayanerru",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        e = collections.defaultdict(list)\n        for u, v in edges:\n            e[u].append(v)\n            e[v].append(u)\n        \n        n = len(edges) + 1\n        sub = [0] * n\n        def dfs(node, par):\n            tmp = 0\n            for child in e[node]:\n                if child == par: continue\n                dfs(child, node)\n                cost = 1 if child % 2 == 1 else 2\n                tmp = max(tmp, cost + sub[child])\n            sub[node] = tmp\n            # print('node', node, ', cost = ', tmp)\n            return \n        \n        \n        from sortedcontainers import SortedList\n        dfs(0, -1)\n        ans = [0] * n\n        ans[0] = sub[0]\n        def dfs2(node, par, par_val=0):\n            sl = SortedList([par_val])\n            for child in e[node]:\n                if child == par: continue\n                if child % 2 == 0:\n                    sl.add(sub[child]+2)\n                else:\n                    sl.add(sub[child]+1)\n            ans[node] = sl[-1]\n            \n            tmp = sub[node]\n            for child in e[node]:\n                if child == par: continue\n                tar = sub[child] + (2 if child % 2 == 0 else 1)\n                sl.remove(tar)\n                send = sl[-1] + (2 if node % 2 == 0 else 1)\n                dfs2(child, node, send)                \n                sl.add(tar)\n                # sub[node] = tmp\n                \n        dfs2(0, -1)\n        # print(sub[0])\n        \n        return ans\n        ",
    "submit_ts": "1722700307",
    "subm_id": "1343237892"
}