{
    "username": "kjhave",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n\n        vector<int> g(m, INT_MIN);\n        vector<vector<int>> f(m + 1, vector<int>(m + 1, INT_MIN));\n\n        long long res = LLONG_MIN;\n        for (int i = 1; i < n; i++){\n            if (i > 1){\n                vector<int> h(m, INT_MIN);\n                \n                for (int j = m - 1; j > 0; j--)\n                    h[j - 1] = max(board[i][j], h[j]);\n\n                int pre = INT_MIN;\n\n                for (int a = 0; a < m; a++){\n                    int mid = INT_MIN;\n                    for (int b = a + 1; b < m; b++){\n                        res = max(res, 1ll * f[a][b] + max({pre, mid, h[b]}));\n                        mid = max(mid, board[i][b]);\n                    }\n                    pre = max(pre, board[i][a]);\n                }\n            }\n\n            for (int j = 0; j < m; j++)\n                    g[j] = max(g[j], board[i - 1][j]);\n            \n            for (int a = 0; a < m - 1; a++)\n            for (int b = a + 1; b < m; b++)\n                f[a][b] = f[b][a] = max({f[a][b], board[i][a] + g[b], board[i][b] + g[a]});\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1723909347",
    "subm_id": "1359189094"
}