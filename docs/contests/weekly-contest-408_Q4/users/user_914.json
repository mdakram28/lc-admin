{
    "username": "technique_god",
    "submission": "class FindUnion:\n    def __init__(self):\n        self.parent={}\n        self.size={}\n\n    def find(self, x):\n        if x not in self.parent:\n            self.parent[x] = x\n            self.size[x] = 1\n        while self.parent[x] != x:\n            x, self.parent[x] = self.parent[x], self.parent[ self.parent[x] ]\n        return x\n\n    def union(self, x, y):\n        x = self.find(x)\n        y = self.find(y)\n\n        if x == y:\n            return\n\n        if self.size[x]<self.size[y]:\n            x,y = y,x\n        \n        self.size[x] += self.size[y]\n        self.parent[y] = x\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        df = FindUnion()\n        df.union(\"L\",\"U\")\n        df.union(\"R\",\"D\")\n        inf = float(\"infinity\")\n        for i,(xi,yi,ri) in enumerate(circles):\n            for j,(xj,yj,rj) in enumerate(circles):\n                if i >= j:\n                    continue\n                if (xi-xj)**2 + (yi-yj)**2 <= (ri+rj)**2:\n                    df.union(i,j)\n            \n            if Y <= yi+ri:\n                df.union(i,\"U\")\n            if 0 >= yi-ri:\n                df.union(i,\"D\")\n            if 0 >= xi-ri:\n                df.union(i,\"L\")\n            if X <= xi+ri:\n                df.union(i,\"R\")\n        \n        return df.find(\"L\") != df.find(\"R\") \n            \n        \n                ",
    "submit_ts": "1722138637",
    "subm_id": "1335795877"
}