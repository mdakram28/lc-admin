{
    "username": "bowobo",
    "submission": "const int N = 100005;\nclass Solution {\npublic:\n    int in[N], out[N];\n    void dfs(int node, int p, vector<int> adj[]){\n        in[node] = 0;\n        for(auto x: adj[node]){\n            if(x == p) continue;\n            dfs(x, node, adj);\n            in[node] = max(in[node], in[x] + ((x & 1) ? 1 : 2));\n        }\n    }\n    \n    void dfs1(int node, int p, vector<int> adj[]){\n        int mx1 = 0, mx2 = 0;\n        for(auto x: adj[node]){\n            if(x == p) continue;\n            int cur = in[x] + ((x & 1) ? 1 : 2);\n            if(cur >= mx1){\n                mx2 = mx1;\n                mx1 = cur;\n            }\n            else if(cur > mx2) mx2 = cur;\n        }\n        \n        for(auto x: adj[node]){\n            if(x == p) continue;\n            int add = ((node & 1) ? 1 : 2);\n            int term1 = out[node] + add;\n            if((in[x] + ((x & 1) ? 1 : 2)) == mx1){\n                add += mx2;\n            }\n            else{\n                add += mx1;\n            }\n            \n            out[x] = max(term1, add);\n            dfs1(x, node, adj);\n        }\n    }\n    \n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<int> adj[n];\n        for(auto x: edges){\n            adj[x[0]].push_back(x[1]);\n            adj[x[1]].push_back(x[0]);\n        }\n        \n        dfs(0, -1, adj);\n        out[0] = 0;\n        dfs1(0, -1, adj);\n        \n        // for(int i = 0; i < n; i++) cout << in[i] << \" \";\n        // cout << \"\\n\";\n        // for(int i = 0; i < n; i++) cout << out[i] << \" \";\n        // cout << \"\\n\";\n        \n        vector<int> ans(n);\n        for(int i = 0; i < n; i++){\n            ans[i] = max(in[i], out[i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722699065",
    "subm_id": "1343200443"
}