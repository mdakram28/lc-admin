{
    "username": "changeme",
    "submission": "class Solution {\n    static class BIT {\n        int[] bit; // 1 indexed\n\n        public BIT(int[] a) {\n            bit = new int[a.length + 1];\n            // for (int i = 0; i < a.length; i++) {\n            // update(i, a[i]);\n            // }\n            for (int i = 1; i <= a.length; i++) {\n                bit[i] += a[i - 1];\n                int p = i + (i & -i);\n                if (p <= a.length) {\n                    bit[p] += bit[i];\n                }\n            }\n        }\n\n        void update(int i, int v) {\n            // add v to all intervals that include i\n            // i += i & -i is i += lsb(i)\n            for (++i; i < bit.length; i += i & -i) { \n                bit[i] += v;\n            }\n        }\n\n        // sum of values in [0 .. i]\n        int sum(int i) {\n            int sum = 0;\n            // sum at i and all parents of i\n            for (++i; i > 0; i -= i & -i) { // i -= lsb(i), get parent of i\n                sum += bit[i];\n            }\n            return sum;\n        }\n    }\n\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        var start = new TreeMap<Integer, int[]>();\n        var end = new TreeMap<Integer, int[]>();\n        var d = new int[n];\n        for (int i = 1; i < d.length; i++) {\n            d[i] = 1;\n        }\n        var bit = new BIT(d);\n        var res = new int[queries.length];\n        for (int i = 0; i < res.length; i++) {\n            var q = queries[i];\n            var s = start.ceilingEntry(q[0]);\n            while (s != null && s.getValue()[1] <= q[1]) {\n                int dif = s.getValue()[0] - s.getValue()[1] + 1;\n                bit.update(s.getValue()[1], -dif);\n                start.remove(s.getValue()[0]);\n                end.remove(s.getValue()[1]);\n                s = start.ceilingEntry(q[0]);\n            }\n            var e = end.ceilingEntry(q[1]);\n            if (s == null || s.getValue()[1] <= q[0] || s.getValue()[0] >= q[1]) {\n                if (e == null || e.getValue()[0] > q[0]) {\n                    int dif = q[0] - q[1] + 1;\n                    bit.update(q[1], dif);\n                    start.put(q[0], q);\n                    end.put(q[1], q);\n                }\n            }\n            res[i] = bit.sum(n - 1);\n        }\n        return res;\n    }\n}",
    "submit_ts": "1722743536",
    "subm_id": "1343794167"
}