{
    "username": "tonyli00000",
    "submission": "struct AC {\n    int N, P;\n    const int A = 26;\n    vector <vector <int>> next;\n    vector <int> link, out_link;\n    vector <vector <int>> out;\n    AC() : N(0), P(0) { node(); }\n    int node() {\n        next.emplace_back(A, 0);\n        link.emplace_back(0);\n        out_link.emplace_back(0);\n        out.emplace_back(0);\n        return N++;\n    }\n    inline int get(char c) {\n        return c - 'a';\n    }\n    int add_pattern(const string T) {\n        int u = 0;\n        for (auto c : T) {\n            if (!next[u][get(c)]) next[u][get(c)] = node();\n            u = next[u][get(c)];\n        }\n        out[u].push_back(P);\n        return P++;\n    }\n    void compute() {\n        queue <int> q;\n        for (q.push(0); !q.empty();) {\n            int u = q.front(); q.pop();\n            for (int c = 0; c < A; ++c) {\n                int v = next[u][c];\n                if (!v) next[u][c] = next[link[u]][c];\n                else {\n                    link[v] = u ? next[link[u]][c] : 0;\n                    out_link[v] = out[link[v]].empty() ? out_link[link[v]] : link[v];\n                    q.push(v);\n                }\n            }\n        }\n    }\n    int advance(int u, char c) {\n        while (u && !next[u][get(c)]) u = link[u];\n        u = next[u][get(c)];\n        return u;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string s, vector<string>& v, vector<int>& costs) {\n        int n = v.size();\n        unordered_map<string, int>C;\n        for (int i = 0; i < n; i++) {\n            if (!C.count(v[i]))C[v[i]] = costs[i];\n            else C[v[i]] = min(C[v[i]], costs[i]);\n        }\n        sort(v.begin(), v.end());\n        v.erase(unique(v.begin(), v.end()), v.end());\n        AC aho;\n        vector<int> len(n + 3, 0);\n        vector<int> use_cost(n + 3, 0);\n        for (auto &s : v) {\n            int val = aho.add_pattern(s);\n            len[val] = s.size();\n            use_cost[val] = C[s];\n        }\n        aho.compute();\n        n = s.size();\n        vector<int> dp(n, 2e9);\n        int u = 0;\n\n        for (int i = 0; i < n; i++) {\n            char c = s[i];\n            u = aho.advance(u, c);\n            for (int v = u; v; v = aho.out_link[v]) {\n                for (auto p : aho.out[v]) {\n                    dp[i] = min(dp[i], (i - len[p] >= 0 ? dp[i - len[p]] : 0) + use_cost[p]);\n                }\n            }\n        }\n         if (dp[n - 1] == 2e9)return -1;\n        return dp[n - 1];\n    }\n};",
    "submit_ts": "1720321316",
    "subm_id": "1312319550"
}