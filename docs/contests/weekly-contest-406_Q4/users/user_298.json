{
    "username": "dim_rn",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Initialize the number of pieces along each dimension\n        h_pieces = 1\n        v_pieces = 1\n        \n        # Total cost initialization\n        total_cost = 0\n        \n        # Combine all cuts with their type and sort by cost in descending order\n        cuts = []\n        for cost in horizontalCut:\n            cuts.append((cost, 'h'))\n        for cost in verticalCut:\n            cuts.append((cost, 'v'))\n        \n        # Sort the cuts based on cost (descending)\n        cuts.sort(reverse=True, key=lambda x: x[0])\n        \n        # Execute each cut\n        for cost, typ in cuts:\n            if typ == 'h':\n                # Multiply the cost of horizontal cut by the number of vertical pieces\n                total_cost += cost * v_pieces\n                h_pieces += 1\n            else: # 'v'\n                # Multiply the cost of vertical cut by the number of horizontal pieces\n                total_cost += cost * h_pieces\n                v_pieces += 1\n        \n        return total_cost\n",
    "submit_ts": "1720925384",
    "subm_id": "1320252890"
}