{
    "username": "rajvir_singh",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> end;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(string word, int idx, int cost) {\n        TrieNode* node = root;\n        for(auto c : word){\n            if(!node->children.count(c)) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->end.push_back({idx, cost});\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n+1, 1e9);\n        dp[0] = 0; Trie T;\n        for (int i = 0; i < words.size(); i++) T.insert(words[i], i, costs[i]);\n        for (int i = 0; i < n; i++) {\n            if(dp[i] == 1e9) continue;\n            TrieNode* X = T.root;\n            for (int j = i; j < n; j++) {\n                if (!X->children.count(target[j])) break;\n                X = X->children[target[j]];\n                for (auto it: X->end) {\n                    int sz = words[it.first].size();\n                    if (i+sz <= n) dp[i+sz] = min(dp[i]+it.second,dp[i+sz]);\n                }\n            }\n        }\n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322570",
    "subm_id": "1312353401"
}