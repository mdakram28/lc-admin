{
    "username": "190031309_JAYAKRISHNA",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        const int MOD = 1'000'000'007;\n        const int MAX_INV = 400;\n        \n        // Map to store the required inversions for given lengths\n        unordered_map<int, int> requiredInversions;\n        for (auto& req : reqs) {\n            requiredInversions[req[0] + 1] = req[1];\n        }\n\n        // DP table to store the number of permutations of each length with specific inversions\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        // Build the DP table\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= MAX_INV; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            // Apply the required inversions for the current length\n            if (requiredInversions.count(len)) {\n                int targetInv = requiredInversions[len];\n                for (int inv = 0; inv <= MAX_INV; inv++) {\n                    if (inv != targetInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up all valid permutations of length n\n        long res = 0;\n        for (long count : dp[n]) {\n            res = (res + count) % MOD;\n        }\n\n        return res;\n    }\n};\n",
    "submit_ts": "1719070537",
    "subm_id": "1296825502"
}