{
    "username": "saurabh_pr",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n=nums.size();\n        priority_queue<pair<int,int>,vector<pair<int,int>>, greater<pair<int,int>>> pq;\n        long long minOperation=0;\n        int j=0;\n        for(int i=0;i<n;i++)\n        {\n            j=i;\n            int increment=0;\n            map<int,int> adjacent;\n            adjacent[i-1]=1;\n            \n            \n            if((target[i]-nums[i])==0)\n                continue;\n            \n            else if((target[i]-nums[i])>0)\n                increment=1;\n            \n            if(increment)\n            {\n               // int flag=0;\n                while(i<n&&(target[i]-nums[i])>0)\n                {\n                    pq.push({target[i]-nums[i],i});\n                   // flag=1;\n                    i++;\n                }\n              //  if(flag)\n                i--;\n            }\n            else\n            {\n               // int flag=0;\n                while(i<n&&(target[i]-nums[i])<0){\n                    pq.push({nums[i]-target[i],i});\n                   // flag=1;\n                    i++;\n                }\n               // if(flag)\n                i--;\n            }\n            int partition=1;\n            int operationPerformed=0;\n            adjacent[i+1]=1;\n            while(!pq.empty())\n            {\n                pair<int,int> top=pq.top();\n                pq.pop();\n                int need=top.first-operationPerformed;\n                 minOperation+=partition*need;\n                 operationPerformed+=need;\n                if(adjacent.find(top.second-1)==adjacent.end()&&adjacent.find(top.second+1)==adjacent.end())\n                {\n                    partition++;\n                    adjacent[top.second]++;\n                }\n                adjacent[top.second]++;\n                if(adjacent.find(top.second-1)!=adjacent.end()&&adjacent.find(top.second+1)!=adjacent.end())\n                    partition--;\n                \n            }\n        }\n        map<int,int> adjacent;\n        adjacent[j-1]++;\n        adjacent[n]++;\n        int partition=1;\n        int operationPerformed=0;\n         while(!pq.empty())\n            {\n                pair<int,int> top=pq.top();\n                pq.pop();\n                int need=top.first-operationPerformed;\n                minOperation+=partition*need;\n                operationPerformed+=need;\n                if(adjacent.find(top.second-1)==adjacent.end()&&adjacent.find(top.second+1)==adjacent.end())\n                {\n                    partition++;\n                    \n                }\n             adjacent[top.second]++;\n                 if(adjacent.find(top.second-1)!=adjacent.end()&&adjacent.find(top.second+1)!=adjacent.end())\n                    partition--;\n                \n            }\n        return minOperation;\n    }\n};",
    "submit_ts": "1721533755",
    "subm_id": "1328015969"
}