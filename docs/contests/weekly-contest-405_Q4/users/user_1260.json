{
    "username": "jbr1510",
    "submission": "struct Node\n{\n    Node *links[26];\n    bool flag = false;\n    int value = INT_MAX;\n\n    bool containsKey(char ch)\n    {\n        return (links[ch - 'a'] != NULL);\n    }\n\n    void put(char ch, Node *node)\n    {\n        links[ch - 'a'] = node;\n    }\n\n    Node *get(char ch)\n    {\n        return links[ch - 'a'];\n    }\n\n    void setEnd()\n    {\n        flag = true;\n    }\n\n    bool isEnd()\n    {\n        return flag;\n    }\n};\n\nclass Trie\n{\n    Node *root;\n\npublic:\n    Trie()\n    {\n        root = new Node();\n    }\n\n    void insert(string word, int cost)\n    {\n        Node *node = root;\n        for (auto i : word)\n        {\n            if (!node->containsKey(i))\n                node->put(i, new Node());\n\n            node = node->get(i);\n        }\n        node->value = min(node->value, cost);\n        node->setEnd();\n    }\n\n    Node *getRoot()\n    {\n        return root;\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        Trie *t = new Trie();\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i)\n            t->insert(words[i], costs[i]);\n\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i)\n        {\n            if (dp[i] == INT_MAX)\n                continue;\n\n            Node *node = t->getRoot();\n            for (int j = i; j < n; ++j)\n            {\n                char c = target[j];\n                if (!node->containsKey(c))\n                    break;\n                node = node->get(c);\n                if (node->isEnd())\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->value);\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323496",
    "subm_id": "1312377004"
}