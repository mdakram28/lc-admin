{
    "username": "pranav_todkar",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCost, vector<int>& verticalCost) {\n        long long totalCost = 0;\n        m=m-1;\n        n=n-1;\n\n        // Sort the horizontal cost array in descending order\n        sort(horizontalCost.begin(), horizontalCost.end(), greater<int>());\n\n        // Sort the vertical cost array in descending order\n        sort(verticalCost.begin(), verticalCost.end(), greater<int>());\n\n        long long horizontalParts = 1, verticalParts = 1; // Initialize current width as 1\n\n        long long i = 0, j = 0;\n        while (i < m && j < n) {\n            if (horizontalCost[i] > verticalCost[j]) {\n                // Add cost of the current horizontal part\n                totalCost += (long long)horizontalCost[i] * verticalParts;\n\n                // Increase the current horizontal part count by 1\n                horizontalParts++;\n                i++;\n            } else {\n                // Add cost of the current vertical part\n                totalCost += (long long)verticalCost[j] * horizontalParts;\n\n                // Increase the current vertical part count by 1\n                verticalParts++;\n                j++;\n            }\n        }\n\n        // Loop for the remaining horizontal array\n        long long remainingHorizontalCost = 0;\n        while (i < m)\n            remainingHorizontalCost += (long long)horizontalCost[i++];\n        totalCost += remainingHorizontalCost * verticalParts;\n\n        // Loop for the remaining vertical array\n        long long remainingVerticalCost = 0;\n        while (j < n)\n            remainingVerticalCost += (long long)verticalCost[j++];\n        totalCost += remainingVerticalCost * horizontalParts;\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925969",
    "subm_id": "1320271945"
}