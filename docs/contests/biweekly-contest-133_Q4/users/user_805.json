{
    "username": "Prashanth_KPY",
    "submission": "import kotlin.math.max\nclass Solution {\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n        val MOD = 1_000_000_007\n        val MAX_INV = 400\n        val r = mutableMapOf<Int, Int>()\n        for (a in requirements) r[a[0] + 1] = a[1]\n        val kpy = Array(n + 1) { LongArray(MAX_INV + 1) }\n        kpy[0][0] = 1\n        for (len in 1..n) {\n            for (inv in 0..MAX_INV) {\n                for (pos in 0 until len) {\n                    val prevInv = inv - pos\n                    if (prevInv >= 0) kpy[len][inv] = (kpy[len][inv] + kpy[len - 1][prevInv]) % MOD\n                }\n            }\n\n            if (r.containsKey(len)) {\n                val t = r[len]!!\n                for (inv in 0..MAX_INV) {\n                    if (inv != t) kpy[len][inv] = 0\n                }\n            }\n        }\n        var res = 0L\n        for (count in kpy[n]) res = (res + count) % MOD\n        return res.toInt()\n    }\n}",
    "submit_ts": 1719070976.0
}