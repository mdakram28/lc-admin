{
    "username": "suksham13",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1'000'000'007;\n        const int MAX_INV = 400;\n\n        // Map to store inversion constraints\n        unordered_map<int, int> constraintMap;\n        for(auto& req : requirements) {\n            constraintMap[req[0] + 1] = req[1];\n        }\n\n        // dp[length][inv] represents number of permutations of `length` elements with `inv` inversions\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        // Fill the DP table\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                dp[length][inv] = 0;\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    if (inv >= newPos) {\n                        dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - newPos]) % MOD;\n                    }\n                }\n            }\n            // Apply constraints\n            if (constraintMap.count(length)) {\n                int targetInv = constraintMap[length];\n                for (int inv = 0; inv <= MAX_INV; ++inv) {\n                    if (inv != targetInv) {\n                        dp[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up all valid permutations of length n\n        long result = 0;\n        for (long count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1719071960",
    "subm_id": "1296858017"
}