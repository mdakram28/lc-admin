{
    "username": "alexy201",
    "submission": "class SegmentTree {\nprivate:\n    int n;\n    std::vector<int> tree;\n    std::vector<bool> lazy;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = 1;  // Initially all bits are 1\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(2 * node, start, mid);\n        build(2 * node + 1, mid + 1, end);\n        tree[node] = tree[2 * node] + tree[2 * node + 1];\n    }\n\n    void propagate(int node, int start, int end) {\n        if (lazy[node]) {\n            tree[node] = 0;  // Reset to 0\n            if (start != end) {\n                lazy[2 * node] = true;\n                lazy[2 * node + 1] = true;\n            }\n            lazy[node] = false;\n        }\n    }\n\n    void update(int node, int start, int end, int l, int r) {\n        propagate(node, start, end);\n        if (start > r || end < l) return;\n        if (l <= start && end <= r) {\n            tree[node] = 0;  // Reset to 0\n            if (start != end) {\n                lazy[2 * node] = true;\n                lazy[2 * node + 1] = true;\n            }\n            return;\n        }\n        int mid = (start + end) / 2;\n        update(2 * node, start, mid, l, r);\n        update(2 * node + 1, mid + 1, end, l, r);\n        tree[node] = tree[2 * node] + tree[2 * node + 1];\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        propagate(node, start, end);\n        if (start > r || end < l) return 0;\n        if (l <= start && end <= r) return tree[node];\n        int mid = (start + end) / 2;\n        return query(2 * node, start, mid, l, r) + query(2 * node + 1, mid + 1, end, l, r);\n    }\n\npublic:\n    SegmentTree(int size) {\n        n = size;\n        tree.resize(4 * n);\n        lazy.resize(4 * n, false);\n        build(1, 0, n - 1);\n    }\n\n    void unflip(int l, int r) {\n        update(1, 0, n - 1, l, r);\n    }\n\n    int sum(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        SegmentTree st(n);\n        vector <int> ans;\n        for (auto u : queries){\n            st.unflip(u[0] + 1, u[1] - 1);\n            ans.push_back(st.sum(0, n - 1) - 1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743699",
    "subm_id": "1343797687"
}