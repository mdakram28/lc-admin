{
    "username": "PranjaySidhwani",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        vector<vector<int>> L;\n\n        // Create a list of [value, row, column]\n        for (int j = 0; j < n; j++) {\n            for (int k = 0; k < m; k++) {\n                L.push_back({board[j][k], j, k});\n            }\n        }\n\n        // Sort based on the value in decreasing order\n        sort(L.begin(), L.end(), [](const vector<int>& a, const vector<int>& b) {\n            return a[0] > b[0];\n        });\n\n        // Choose the minimum of total elements or 2*(n + m)\n        int count = min((int)L.size(), 2 * (n + m));\n        long long ans = LLONG_MIN;  // Initialize ans as the minimum possible integer\n\n        // Iterate to find the maximum sum of 3 non-conflicting elements\n        for (int j = 0; j <(n+m); j++) {\n            for (int k = j + 1; k < count; k++) {\n                for (int l = k + 1; l < count; l++) {\n                    if (L[j][1] == L[k][1] || L[k][1] == L[l][1] || L[l][1] == L[j][1] || \n                        L[j][2] == L[k][2] || L[k][2] == L[l][2] || L[l][2] == L[j][2]) {\n                        continue;\n                    } else {\n                        // // Print j, k, l and corresponding L elements\n                        // cout << \"j: \" << j << \", k: \" << k << \", l: \" << l << endl;\n                        // cout << \"L[j]: [\" << L[j][0] << \", \" << L[j][1] << \", \" << L[j][2] << \"]\" << endl;\n                        // cout << \"L[k]: [\" << L[k][0] << \", \" << L[k][1] << \", \" << L[k][2] << \"]\" << endl;\n                        // cout << \"L[l]: [\" << L[l][0] << \", \" << L[l][1] << \", \" << L[l][2] << \"]\" << endl;\n\n                        ans = max(ans, (long long)L[j][0] + L[k][0] + L[l][0]);\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1723908608",
    "subm_id": "1359159700"
}