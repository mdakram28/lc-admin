{
    "username": "agrim07",
    "submission": "#define MOD 1000000007\n#define INF 10000010\n#define endl \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define ff first\n#define ss second\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n\nclass Solution {\npublic:\n    int singleRectangle(int rowStart, int colStart, int rowEnd, int colEnd, vector<vector<int>> &grid) {\n        if(rowEnd < rowStart)\n            return INF;\n        if(colEnd < colStart)\n            return INF;\n\n        int n = sz(grid), m = sz(grid[0]);\n\n        int row1, row2, col1, col2;\n        row2 = col2 = -1;\n        row1 = n + 1, col1 = m + 1;\n\n        for(int i = rowStart; i <= rowEnd; i++) {\n            for(int j = colStart; j <= colEnd; j++) {\n                if(grid[i][j]) {\n                    row1 = min(row1, i);\n                    row2 = max(row2, i);\n\n                    col1 = min(col1, j);\n                    col2 = max(col2, j);\n                }\n            }\n        }\n\n        if(row2 == -1)\n            return INF;\n        return (row2 - row1 + 1) * (col2 - col1 + 1);\n    }\n\n    int splitMix(vector<vector<int>>& grid) {\n        int n = sz(grid), m = sz(grid[0]);\n\n        int area = INF;\n        for(int r = 0; r < n; r++) { // maybe r + 1 < n?\n            for(int c = 0; c < m; c++) {\n                area = min(area, singleRectangle(0, 0, r, m - 1, grid) + singleRectangle(r + 1, 0, n - 1, c, grid) + singleRectangle(r + 1, c + 1, n - 1, m - 1, grid));\n            }\n        }\n\n        return area;\n    }\n\n    int splitThree(vector<vector<int>>& grid) {\n        int n = sz(grid), m = sz(grid[0]);\n\n        int area = INF;\n        for(int r1 = 0; r1 < n; r1++) {\n            for(int r2 = r1 + 1; r2 < n; r2++) {\n                area = min(area, singleRectangle(0, 0, r1, m - 1, grid) + singleRectangle(r1 + 1, 0, r2, m - 1, grid) + singleRectangle(r2 + 1, 0, n - 1, m - 1, grid));\n            }\n        }\n\n        return area;\n    }\n\n    void rotateGrid(vector<vector<int>> &grid) {\n        if (grid.empty() || grid[0].empty()) return;\n\n        int rows = sz(grid);\n        int cols = sz(grid[0]);\n\n        vector<vector<int>> rotatedGrid(cols, vector<int>(rows));\n\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                rotatedGrid[c][rows - 1 - r] = grid[r][c];\n            }\n        }\n\n        grid = rotatedGrid;\n    }\n    \n    void printGrid(vector<vector<int>>& grid) {\n        for(auto &v: grid) {\n            for(auto &x: v)\n                cout << x << \" \";\n            cout << endl;\n        }\n        cout << endl;\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = sz(grid), m = sz(grid[0]);\n        \n        int cnt = 0;\n        for(auto &v: grid) {\n            for(auto &x: v)\n                cnt += x;\n        }\n        \n        // printGrid(grid);\n        \n        if(cnt == 3)\n            return 3;\n\n        int ans = INF;\n        ans = min(splitThree(grid), splitMix(grid));\n        // cout << splitThree(grid) << endl;\n\n        for(int i = 0; i < 3; i++) {\n            rotateGrid(grid);\n            // printGrid(grid);\n            ans = min({ans, splitThree(grid), splitMix(grid)});\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1719114634.0
}