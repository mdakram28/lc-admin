{
    "username": "Ir1descent",
    "submission": "import java.math.BigInteger;\nclass Solution {\n    public String largestPalindrome(int n, int k) {\n        StringBuffer sb = new StringBuffer();\n        if(k == 1 || k == 3 || k == 9) {\n            for(int i = 0; i < n; i++) {\n                sb.append('9');\n            }\n        }else if(k == 2) {\n            if(n == 1) {return \"8\";};\n            sb.append('8');\n            for(int i = 1; i < n - 1; i++) {\n                sb.append('9');\n            }\n            sb.append('8');\n        }else if(k == 8) {\n            if(n <= 6) {\n                for(int i = 0; i < n; i++) {\n                    sb.append('8');\n                }\n                return sb.toString();\n            }\n            sb.append(\"888\");\n            for(int i = 3; i < n - 3; i++) {\n                sb.append('9');\n            }\n            sb.append(\"888\");\n        } else if(k == 5) {\n            if(n == 1) {return \"5\";}\n            sb.append('5');\n            for(int i = 1; i < n - 1; i++) {\n                sb.append('9');\n            }\n            sb.append('5');\n        }else if(k == 6) {\n            if(n == 1) {return \"6\";}\n            if(n == 2) {return \"66\";}\n            if(n == 3) {return \"888\";}\n            if(n == 4) {return \"8778\";}\n            sb.append('8');\n            for(int i = 0; i < (n - 1) / 2 - 1; i++) {\n                sb.append('9');\n            }\n            if(n % 2 == 1) {\n                sb.append('8');\n            }else {\n                sb.append(\"77\");\n            }\n            for(int i = 0; i < (n - 1) / 2 - 1; i++) {\n                sb.append('9');\n            }\n            sb.append('8');\n        }else if(k == 7) {\n            if(n == 1) {return \"7\";}\n            if(n == 2) {return \"77\";}\n            StringBuilder half = new StringBuilder();\n            half.append(\"9\".repeat((n - 1) / 2)); // \u524d\u534a\u90e8\u5206\uff0c\u6240\u6709\u6570\u5b57\u4e3a9\n\n            if (n % 2 == 1) { // \u5947\u6570\u4f4d\n                for (int middle = 9; middle >= 0; middle--) {\n                    String palindrome = half.toString() + middle + half.reverse().toString();\n                    if (isDivisibleBy7(palindrome)) {\n                        System.out.println(\"The largest \" + n + \"-digit palindrome divisible by 7 is: \" + palindrome);\n                        return palindrome;\n                    }\n                    half.reverse(); // \u6062\u590d\u524d\u534a\u90e8\u5206\u4ee5\u8fdb\u884c\u4e0b\u6b21\u5faa\u73af\n                }\n            } else { // \u5076\u6570\u4f4d\n                for (int middle = 9; middle >= 0; middle--) {\n                    String palindrome = half.toString() + middle + middle + half.reverse().toString();\n                    if (isDivisibleBy7(palindrome)) {\n                        System.out.println(\"The largest \" + n + \"-digit palindrome divisible by 7 is: \" + palindrome);\n                        return palindrome;\n                    }\n                    half.reverse(); // \u6062\u590d\u524d\u534a\u90e8\u5206\u4ee5\u8fdb\u884c\u4e0b\u6b21\u5faa\u73af\n                }\n            }\n        }else if(k == 4) {\n            if(n == 1) {return \"8\";}\n            if(n == 2) {return \"88\";}\n            if(n == 3) {return \"888\";}\n            if(n == 4) {return \"8888\";}\n            sb.append(\"88\");\n            for(int i = 2; i < n - 2; i++) {\n                sb.append('9');\n            }\n            sb.append(\"88\");\n        }\n        return sb.toString();\n    }\n\n    private static boolean isDivisibleBy7(String number) {\n        long remainder = 0;\n        for (char digit : number.toCharArray()) {\n            remainder = (remainder * 10 + (digit - '0')) % 7;\n        }\n        return remainder == 0;\n    }\n}",
    "submit_ts": "1723953354",
    "subm_id": "1359819010"
}