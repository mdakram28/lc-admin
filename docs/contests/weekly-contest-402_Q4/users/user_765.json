{
    "username": "ayan_200",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    void buildTree(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(2 * node, start, mid);\n            buildTree(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    void updateTree(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateTree(2 * node, start, mid, idx);\n            } else {\n                updateTree(2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int queryTree(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = queryTree(2 * node, start, mid, l, r);\n        int rightQuery = queryTree(2 * node + 1, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\n    bool isPeak(int index) {\n        if (index <= 0 || index >= n - 1) return false;\n        return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n    }\n\npublic:\n    SegmentTree(const vector<int>& input) {\n        nums = input;\n        n = nums.size();\n        tree.resize(4 * n, 0);\n        buildTree(1, 0, n - 1);\n    }\n\n    void update(int idx, int val) {\n        nums[idx] = val;\n        if (idx > 0 && idx < n - 1) updateTree(1, 0, n - 1, idx);\n        if (idx - 1 > 0) updateTree(1, 0, n - 1, idx - 1);\n        if (idx + 1 < n - 1) updateTree(1, 0, n - 1, idx + 1);\n    }\n\n    int query(int l, int r) {\n        if (l >= r) return 0;\n        return queryTree(1, 0, n - 1, l + 1, r - 1);\n    }\n};\n\nclass Solution {\npublic:\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> answer;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                answer.push_back(segTree.query(li, ri));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                segTree.update(index, value);\n            }\n        }\n        return answer;\n    }\n};",
    "submit_ts": 1718508122.0
}