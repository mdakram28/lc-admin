{
    "username": "madflash",
    "submission": "def dd(g):\n    def dfs(u, p):\n        res = [0,u]\n        for v in g[u]:\n            if v != p:\n                x = dfs(v, u)\n                res = max(res, [1 + x[0], x[1]])\n        return res\n    return dfs(dfs(0,-1)[1], -1)[0]\n        \n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        t1 = defaultdict(list)\n        t2 = defaultdict(list)\n        for u, v in edges1:\n            t1[u].append(v)\n            t1[v].append(u)\n        for u,v in edges2:\n            t2[u].append(v)\n            t2[v].append(u)\n        n = len(edges1) + 1\n        m = len(edges2)  + 1\n        dp1 = [0] * n\n        dp2 = [0] * m\n        up1 = [0] * n\n        up2 = [0] * m\n        \n        def dfs1(u, p = -1):\n            nonlocal dp1\n            dp1[u] = 1\n            for v in t1[u]:\n                if v != p:\n                    dfs1(v, u)\n                    dp1[u] = max(dp1[u], 1 + dp1[v])\n                    \n        def dfs2(u, p = -1):\n            nonlocal dp2\n            dp2[u] = 1\n            for v in t2[u]:\n                if v != p:\n                    dfs2(v, u)\n                    dp2[u] = max(dp2[u], 1 + dp2[v])\n                    \n        mm1, mm2 = inf, inf\n                    \n        def dfs11(u, p = -1):\n            nonlocal up1, mm1\n            c = []\n            for v in t1[u]:\n                if v != p:\n                    c.append(v)\n                    \n            mm1 = min(mm1, max(up1[u] + 1, dp1[u]))\n            for i in range(len(c)):\n                v = c[i]\n                mx = 0\n                for j in range(len(c)):\n                    if i == j: continue\n                    mx = max(mx, dp1[c[j]])\n                up1[v] = max(1 + up1[u], 1 + mx)\n                dfs11(v, u)\n                      \n            \n        def dfs22(u, p = -1):\n            nonlocal up2, mm2\n            c = []\n            for v in t2[u]:\n                if v != p:\n                    c.append(v)\n                    \n            mm2 = min(mm2, max(up2[u] + 1, dp2[u]))\n            for i in range(len(c)):\n                v = c[i]\n                mx = 0\n                for j in range(len(c)):\n                    if i == j: continue\n                    mx = max(mx, dp2[c[j]])\n                up2[v] = max(1 + up2[u], 1 + mx)\n                dfs22(v,u)\n                    \n        dfs1(0,-1)\n        dfs2(0,-1)\n        dfs11(0,-1)\n        dfs22(0,-1)\n        best = inf\n        d1, d2 = dd(t1), dd(t2)\n        for u in range(n):\n            bb = max(up1[u] + 1, dp1[u])\n            bb = max(bb + mm2, d1 + 1, d2 + 1)\n            best = min(best, bb)\n        for u in range(m):\n            bb = max(up2[u] + 1, dp2[u])\n            bb = max(bb + mm1, d1 + 1, d2 + 1)\n            best = min(best, bb)\n            \n        return best - 1\n",
    "submit_ts": "1719719104",
    "subm_id": "1304433826"
}