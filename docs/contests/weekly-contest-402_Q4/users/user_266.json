{
    "username": "hastings2k",
    "submission": "A = 0 # [l,r]\nB = 2 # [lchild,rchild]\nC = 1 # cntPeak\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        debug = 0\n        def _build(l,r):\n            now = {A:[l,r],C:0,B:[None,None]}\n            if l == r:\n                if 0<l<n-1:\n                    now[C] = 1 if nums[l-1]<nums[l]>nums[l+1] else 0\n            else:\n                m = (l+r)//2\n                now[B][0],now[B][1] = _build(l,m),_build(m+1,r)\n                now[C] = now[B][0][C]+now[B][1][C]\n            return now\n        def _update(now,i,v):\n            l,r = now[A]\n            if i<l or r<i:\n                return now[C]\n            if i == l and i == r:\n                nums[i] = v\n                now[C] = 1 if 0<i<n-1 and nums[i-1]<nums[i]>nums[i+1] else 0\n            else:\n                now[C] = _update(now[B][0],i,v)+_update(now[B][1],i,v)\n            return now[C]\n        def _get(now,x,y):\n            l,r = now[A]\n            if x<=l and r<=y:\n                return now[C]\n            if y<l or r<x:\n                return 0\n            return _get(now[B][0],x,y)+_get(now[B][1],x,y)\n        root = _build(0,n-1)\n        if debug:\n            print(root)\n        out = []\n        for t,i,j in queries:\n            \n            if t == 1:\n                # out.append(_get(root,i,j))\n                if j-i<2:\n                    out.append(0)\n                else:\n                    out.append(_get(root,i+1,j-1))\n            else:\n                _update(root,i,j)\n                if i:\n                    _update(root,i-1,nums[i-1])\n                if i+1<n:\n                    _update(root,i+1,nums[i+1])\n            if debug:\n                print(t,i,j,root,out)\n        return out",
    "submit_ts": 1718507004.0
}