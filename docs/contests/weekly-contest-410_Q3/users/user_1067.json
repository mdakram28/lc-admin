{
    "username": "Nikhil_The_Avenger",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        const int MOD = 1e9 + 7;\n        const int MAX_VAL = 1000;\n        \n        // dp[i][j] represents the number of ways to have arr1[i-1] = j\n        vector<vector<long long>> dp(2, vector<long long>(MAX_VAL + 1, 0));\n        \n        // Initialize for the first element\n        for (int j = 0; j <= nums[0]; j++) {\n            dp[0][j] = 1;\n        }\n        \n        // Fill the dp table\n        for (int i = 1; i < n; i++) {\n            vector<long long>& prev = dp[(i-1) % 2];\n            vector<long long>& curr = dp[i % 2];\n            fill(curr.begin(), curr.end(), 0);\n            \n            for (int last1 = 0; last1 <= nums[i-1]; last1++) {\n                if (prev[last1] == 0) continue;\n                \n                int last2 = nums[i-1] - last1;\n                for (int curr1 = last1; curr1 <= nums[i]; curr1++) {\n                    int curr2 = nums[i] - curr1;\n                    if (curr2 <= last2) {\n                        curr[curr1] = (curr[curr1] + prev[last1]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        // Sum up all possibilities for the last index\n        long long result = 0;\n        for (int j = 0; j <= nums[n-1]; j++) {\n            result = (result + dp[(n-1) % 2][j]) % MOD;\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": "1723345449",
    "subm_id": "1351556010"
}