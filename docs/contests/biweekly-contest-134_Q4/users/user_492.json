{
    "username": "MadhubratDixit",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            int leftChild = 2 * node + 1;\n            int rightChild = 2 * node + 2;\n\n            build(arr, leftChild, start, mid);\n            build(arr, rightChild, mid + 1, end);\n\n            tree[node] = tree[leftChild] & tree[rightChild];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || L > end) {\n            return ~0; // Return all 1s for AND operation (bitwise identity)\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n\n        int mid = (start + end) / 2;\n        int leftChild = 2 * node + 1;\n        int rightChild = 2 * node + 2;\n\n        int leftResult = query(leftChild, start, mid, L, R);\n        int rightResult = query(rightChild, mid + 1, end, L, R);\n\n        return leftResult & rightResult;\n    }\n\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    int rangeQuery(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n};\n\nclass Solution {\npublic: \n    int f(int i,int high,SegmentTree &seg,int k) {\n        int low = i;\n        int ans = high+1;\n        while(low<=high) {\n            int mid = low + (high-low)/2;\n            int val = seg.rangeQuery(i,mid);\n            if(val>k) {\n                low = mid + 1;\n            }\n            else if(val==k) {\n                ans = mid;\n                high = mid-1;\n            }\n            else high = mid-1;\n        }\n        return ans;\n    }\n    int f1(int i,int high,SegmentTree &seg,int k) {\n        int low = i;\n        int ans = high+1;\n        while(low<=high) {\n            int mid = low + (high-low)/2;\n            int val = seg.rangeQuery(i,mid);\n            if(val>k) {\n                low = mid + 1;\n            }\n            else if(val==k) {\n                ans = mid;\n                low = mid+1;\n            }\n            else high = mid-1;\n        }\n        return ans;\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        for(int i=0;i<n;i++) {\n            int high = f1(i,n-1,segTree,k);\n            int low = f(i,n-1,segTree,k);\n            if(high!=n) {\n                ans += ((long long)high-(long long)low+1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278498",
    "subm_id": "1311711767"
}