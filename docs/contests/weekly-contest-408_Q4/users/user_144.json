{
    "username": "yumichael",
    "submission": "class DSU:\n    def __init__(self, index):\n        self.index = index\n        self.rank = 0\n        self.parent = self\ndef find(self):\n    if self.parent is self:\n        return self\n    root = find(self.parent)\n    self.parent = root\n    return root\ndef union(x, y):\n    x = find(x)\n    y = find(y)\n    if x is y:\n        return False\n    if x.rank < y.rank:\n        x, y = y, x\n    y.parent = x\n    if x.rank == y.rank:\n        x.rank += 1\n    return True\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        nodes = [DSU(i) for i in range(n)]\n        left_node = DSU('left')\n        right_node = DSU('right')\n\n        def intersect_left(x, y, r):\n            r2 = r ** 2\n            left_middle = abs(x) <= r and 0 <= y <= Y\n            bottom_left_corner = x ** 2 + y ** 2 <= r2\n            top_left_corner = x ** 2 + (y - Y) ** 2 <= r2\n            top_middle = abs(y - Y) <= r and 0 <= x <= X\n            top_right_corner = (x - X) ** 2 + (y - Y) ** 2 <= r2\n            return left_middle or bottom_left_corner or top_left_corner or top_middle or top_right_corner\n\n        def intersect_right(x, y, r):\n            r2 = r ** 2\n            right_middle = abs(x - X) <= r and 0 <= y <= Y\n            bottom_left_corner = x ** 2 + y ** 2 <= r2\n            bottom_right_corner = (x - X) ** 2 + y ** 2 <= r2\n            bottom_middle = abs(y) <= r and 0 <= x <= X\n            top_right_corner = (x - X) ** 2 + (y - Y) ** 2 <= r2\n            return right_middle or bottom_left_corner or bottom_right_corner or bottom_middle or top_right_corner\n\n        for i in range(n):\n            xi, yi, ri = circles[i]\n            if intersect_left(xi, yi, ri):\n                union(left_node, nodes[i])\n            if intersect_right(xi, yi, ri):\n                union(right_node, nodes[i])\n        for i in range(n - 1):\n            xi, yi, ri = circles[i]\n            for j in range(i, n):\n                xj, yj, rj = circles[j]\n                if (xi - xj) ** 2 + (yi - yj) ** 2 <= (ri + rj) ** 2:\n                    union(nodes[i], nodes[j])\n        if find(left_node) is find(right_node):\n            return False\n        return True",
    "submit_ts": "1722138906",
    "subm_id": "1335802744"
}