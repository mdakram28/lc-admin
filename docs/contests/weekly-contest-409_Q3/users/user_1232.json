{
    "username": "novain",
    "submission": "class Solution {\npublic:\nint findDistance(int x, int y, map<int, list<pair<int, int>>::iterator> &mm,\n                     list<pair<int, int>> &li)\n    {\n        int i = x;\n        // for (auto k : li)\n        // {\n        //     if (k.first < x && k.second >= y)\n        //     {\n        //         return li.size();\n        //     }\n        // }\n        // while (i >= 0)\n        // {\n        //     i--;\n        //     if (mm.find(i) != mm.end())\n        //     {\n        //         pair<int, int> pi = *mm[i];\n        //         if (pi.second >= y)\n        //         {\n        //             return li.size();\n        //         }\n        //     }\n        // }\n        auto mmi = mm.lower_bound(x);\n        if (mmi != mm.end())\n        {\n            pair<int, int> pi = *mm[(*mmi).first];\n            if (pi.first <= x)\n            {\n                if (pi.second >= y)\n                {\n                    return li.size();\n                }\n            }\n            else\n            {\n                --mmi;\n                pair<int, int> pi2 = *mm[(*mmi).first];\n                if (pi2.second >= y)\n                {\n                    return li.size();\n                }\n            }\n        }\n        else\n        {\n            --mmi;\n            pair<int, int> pi2 = *mm[(*mmi).first];\n            if (pi2.second >= y)\n            {\n                return li.size();\n            }\n        }\n        i = x;\n        while (true)\n        {\n            if (mm.find(i) != mm.end() && i != y)\n            {\n                pair<int, int> pi = *mm[i];\n                if (pi.second > y)\n                {\n                    return li.size();\n                }\n                li.erase(mm[i]);\n                mm.erase(i);\n                i = pi.second;\n            }else{\n                break;\n            }\n        }\n        // li.insert()\n        li.push_front(make_pair(x, y));\n        mm[x] = li.begin();\n        return li.size();\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>> &q)\n    {\n        list<pair<int, int>> li;\n        vector<int> ans;\n        map<int, list<pair<int, int>>::iterator> mm;\n        for (int i = 0; i < n - 1; i++)\n        {\n            li.push_front(make_pair(i, i + 1));\n            mm[i] = li.begin();\n        }\n\n        // binary search and merge intervals\n        for (int i = 0; i < q.size(); i++)\n        {\n            ans.push_back(findDistance(q[i][0], q[i][1], mm, li));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743507",
    "subm_id": "1343793492"
}