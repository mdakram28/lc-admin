{
    "username": "swagatika_parida_",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n        for (int i = 0; i < horizontalCut.length; i++) {\n            pq.offer(new int[] {horizontalCut[i], 0});\n        }\n        for (int i = 0; i < verticalCut.length; i++) {\n            pq.offer(new int[] {verticalCut[i], 1});\n        }\n\n        long hCuts = 1, vCuts = 1, totalCost = 0;\n        while (!pq.isEmpty()) {\n            int[] cut = pq.poll();\n            if (cut[1] == 0) {\n                totalCost += (long) cut[0] * vCuts;\n                hCuts++;\n            } else {\n                totalCost += (long) cut[0] * hCuts;\n                vCuts++;\n            }\n        }\n\n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720926386",
    "subm_id": "1320284732"
}