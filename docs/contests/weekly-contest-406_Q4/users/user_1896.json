{
    "username": "tonghuikang",
    "submission": "def find_peak(func_, minimize=False, left=0, right=2**31 - 1):\n    # https://leetcode.com/problems/peak-index-in-a-mountain-array/discuss/139848/\n    # find the peak value of a function, assumes that the ends are not peaks\n    # ASSUMES THAT THERE IS NO PLATEAUS\n\n    def func(val):\n        # negative the value of func_ if we are minimizing\n        if minimize:\n            return -func_(val)\n        return func_(val)\n\n    while left < right:\n        mid = (left + right) // 2\n        if func(mid) < func(mid + 1):\n            left = mid + 1\n        else:\n            right = mid\n\n    return left\n\nLARGE = 10 ** 18\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:        \n        \n        arr = sorted(horizontalCut, reverse=True)  # n\n        brr = sorted(verticalCut, reverse=True)  # m\n        \n        n = len(arr)\n        m = len(brr)\n        \n        # you have arr\n        # for each brr, where do you insert to minimize the total cost\n        \n        res = sum(arr) + sum(brr)\n        \n        psum = [0]\n        for x in arr:\n            psum.append(psum[-1] + x)\n        \n        \n        for y in brr:\n            \n            def func(idx):\n                left = idx * y\n                right = (psum[-1] - psum[idx])\n                val = left + right\n                return val\n            \n            idx = find_peak(func, minimize=True, left=0, right=n)\n            \n            val = func(idx)\n            # print(y, idx, val)\n            res += val\n        \n        return res\n        \n        \n",
    "submit_ts": "1720926519",
    "subm_id": "546446746"
}