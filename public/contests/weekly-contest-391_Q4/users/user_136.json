{
    "username": "zokumyoin",
    "submission": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.TreeMap;\n\nclass Solution {\n    public int minimumDistance(int[][] points) {\n\n        // ? x1 ? y1 ? x2 ? y2\n\n        TreeMap<Integer, List<Integer>> sum = new TreeMap<>();\n        TreeMap<Integer, List<Integer>> diff = new TreeMap<>();\n\n        for (int i = 0; i < points.length; i++) {\n            int x = points[i][0], y = points[i][1];\n            sum.putIfAbsent(x + y, new ArrayList<>());\n            sum.get(x + y).add(i);\n            diff.putIfAbsent(x - y, new ArrayList<>());\n            diff.get(x - y).add(i);\n        }\n\n        List<Integer> list = new ArrayList<>();\n\n        if (sum.lastEntry().getValue().size() == 1) {\n            list.add(sum.lastEntry().getValue().get(0));\n        }\n        if (sum.firstEntry().getValue().size() == 1) {\n            list.add(sum.firstEntry().getValue().get(0));\n        }\n\n\n        if (diff.lastEntry().getValue().size() == 1) {\n            list.add(diff.lastEntry().getValue().get(0));\n        }\n        if (diff.firstEntry().getValue().size() == 1) {\n            list.add(diff.firstEntry().getValue().get(0));\n        }\n        \n        int ans = Math.max(sum.lastKey() - sum.firstKey(), diff.lastKey() - diff.firstKey());\n\n        for (int remove : list) {\n\n            sum = new TreeMap<>();\n            diff = new TreeMap<>();\n\n            for (int i = 0; i < points.length; i++) {\n                if (i == remove) {\n                    continue;\n                }\n                int x = points[i][0], y = points[i][1];\n                sum.putIfAbsent(x + y, new ArrayList<>());\n                sum.get(x + y).add(i);\n                diff.putIfAbsent(x - y, new ArrayList<>());\n                diff.get(x - y).add(i);\n            }\n            int candidate = Math.max(sum.lastKey() - sum.firstKey(), diff.lastKey() - diff.firstKey());\n            ans = Math.min(ans, candidate);\n        }\n        \n        return ans;\n\n    }\n}"
}