{
    "username": "Ashish_kumar0707",
    "submission": "class Solution {\npublic:\n\n    \nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nvoid insert(TrieNode* root, const string& word, int cost) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (!node->children.count(c)) {\n            node->children[c] = new TrieNode();\n        }\n        node = node->children[c];\n    }\n    node->cost = min(node->cost, cost);\n}\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n    int n = target.size();\n\n    // Build the Trie\n    for (int i = 0; i < words.size(); ++i) {\n        insert(root, words[i], costs[i]);\n    }\n\n    // DP array to store the minimum cost to form target[0:i]\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    // Fill DP array\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        TrieNode* node = root;\n        for (int j = i; j < n; ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322133",
    "subm_id": "1312341601"
}