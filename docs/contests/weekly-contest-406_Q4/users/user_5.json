{
    "username": "KaushikKumaran",
    "submission": "\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort the cut costs in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        total_cost = 0\n        horizontal_segments = 1  # Start with 1 horizontal segment\n        vertical_segments = 1    # Start with 1 vertical segment\n        \n        # Pointers for horizontal and vertical cuts\n        h_index = 0\n        v_index = 0\n        \n        # Process cuts until all cuts are made\n        while h_index < len(horizontalCut) or v_index < len(verticalCut):\n            if h_index < len(horizontalCut) and (v_index >= len(verticalCut) or horizontalCut[h_index] >= verticalCut[v_index]):\n                # Perform a horizontal cut\n                total_cost += horizontalCut[h_index] * vertical_segments\n                horizontal_segments += 1  # Increase the number of horizontal segments\n                h_index += 1\n            else:\n                # Perform a vertical cut\n                total_cost += verticalCut[v_index] * horizontal_segments\n                vertical_segments += 1  # Increase the number of vertical segments\n                v_index += 1\n        \n        return total_cost\n",
    "submit_ts": "1720924514",
    "subm_id": "1320219759"
}