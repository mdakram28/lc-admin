{
    "username": "smilences",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        '''\n        d00 = (x1-x2) + (y1-y2) = (x1+y1) - (x2+y2)\n        d01 = (x1-x2) - (y1-y2) = (x1-y1) - (x2-y2)\n        d10 = - (x1-x2) + (y1-y2) = -(x1-y1) + (x2-y2)\n        d11 = - (x1-x2) - (y1-y2) = -(x1+y1) + (x2+y2)\n        '''\n        \n        xpy = [x+y for x,y in points]\n        xdy = [x-y for x,y in points]\n        \n        max_xpy = max(xpy)\n        min_xpy = min(xpy)\n        p = sorted((z,i) for i,z in enumerate(xpy))\n        d = sorted((z,i) for i,z in enumerate(xdy))\n        pmx = p[-1][0] - p[0][0]\n        dmx = d[-1][0] - d[-1][0]\n        maxmhd = max(pmx,dmx)\n\n        res = set()\n        res.add(p[-1][1])\n        res.add(p[0][1])\n        res.add(d[-1][1])\n        res.add(d[0][1])\n        \n        p = sorted(xpy)\n        d = sorted(xdy)\n\n        ans = inf\n        for i in res:\n            pr = p[:]\n            pr.remove(xpy[i])\n            dr = d[:]\n            dr.remove(xdy[i])\n\n            ansr = max(pr[-1]-pr[0],dr[-1]-dr[0])\n            ans = min(ans,ansr)\n        return ans"
}