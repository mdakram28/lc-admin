{
    "username": "kashyap_lokesh",
    "submission": "vector<int> computeLPSArray(string pat)\n{\n    // length of the previous longest prefix suffix\n    int len = 0;\n    int M=pat.size();\n    vector<int>lps(M);\n \n    lps[0] = 0; // lps[0] is always 0\n \n    // the loop calculates lps[i] for i = 1 to M-1\n    int i = 1;\n    while (i < M) {\n        if (pat[i] == pat[len]) {\n            len++;\n            lps[i] = len;\n            i++;\n        }\n        else // (pat[i] != pat[len])\n        {\n            // This is tricky. Consider the example.\n            // AAACAAAA and i = 7. The idea is similar\n            // to search step.\n            if (len != 0) {\n                len = lps[len - 1];\n \n                // Also, note that we do not increment\n                // i here\n            }\n            else // if (len == 0)\n            {\n                lps[i] = 0;\n                i++;\n            }\n        }\n    }\n    return lps;\n}\n\n\nint  Match(string text, string pattern) {\n\tvector<int> lps = computeLPSArray(pattern);\n    vector<int> res;\n    int  n = text.size(), m = pattern.size();\n    int i = 0,j = 0;\n    while(i < n)\n    {\n        if(text[i] == pattern[j])\n        {\n            i++;\n            j++;\n        }\n        if(j == m)\n        {\n            res.push_back(i - j + 1);\n            j = lps[j - 1];\n        }\n        else if(text[i] != pattern[j])\n        {\n            if(j != 0)\n            {\n                j = lps[j - 1];\n            }\n            else\n            {\n                i++;\n            }\n        }\n    }\n    return (int)res.size();\n}\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& a, int k) {\n        \n        int n=a.size();\n        vector<int>temp;\n        for(int i=0;i<n;i++)\n                temp.push_back(a[i]);\n    \n        for(int i=0;i<k-1;i++)\n                temp.push_back(a[i]);\n    \n        string str=\"\";\n        for(auto it:temp)\n            str.push_back('0'+it);\n        \n        // cout<<str<<endl;\n        \n        string s1 = \"\",s2=\"\";\n        int val1=0,val2=1;\n        for (int i = 0; i < k; i++)\n        {\n            s1.push_back('0'+(val1));\n            val1^=1;\n            \n            s2.push_back('0'+(val2));\n            val2^=1;\n        }\n       \n        \n        int ans=0;\n        ans=Match(str,s1);\n        ans+=Match(str,s2);\n        return ans;\n        \n    }\n};",
    "submit_ts": "1720280764",
    "subm_id": "1311801215"
}