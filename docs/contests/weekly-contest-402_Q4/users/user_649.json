{
    "username": "hiiragikagami-77",
    "submission": "class Solution {\nprivate:\n    class BIT {\n    private:\n        vector<int> tree;\n\n    public:\n        BIT(int n) :tree(n, 0) {\n        }\n\n        void update(int i, int delta) {\n            while (i < tree.size()) {\n                tree[i] += delta;\n                i += i & -i;            //i&-i\u53d6\u6700\u4f4e\u4f4d\u76841\uff0ci\u52a0\u4e0a\u6700\u4f4e\u4f4d\u76841\u76f8\u5f53\u4e8e\u6811\u72b6\u6570\u7ec4\u5f80\u4e0a\u8fdb\u4e00\u6b65\n            }\n        }\n\n        int presum(int i) {\n            int ans = 0;\n            while (i > 0) {\n                ans += tree[i];\n                i &= i - 1;             //\u6bd4\u598211=1011\uff0c\u4e0d\u65ad\u62b9\u53bb\u6700\u5c3e\u7aef\u76841\u5c31\u53ef\u4ee5\u3002\u56e0\u6b64\u4e5f\u53ef\u5199\u4f5ci-=i&-i\n            }\n\n            return ans;\n        }\n\n        int query(int left, int right) {\n            return presum(right) - presum(left - 1);\n        }\n    };\n\n    BIT* t;\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> isPeak(n, 0);\n\n        t = new BIT(n + 1);\n\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                t->update(i + 1, 1);\n                isPeak[i] = 1;\n            }\n        }\n\n        vector<int> ans;\n        \n        ans.reserve(queries.size());\n\n        for (const vector<int>& query : queries) {\n            if (query[0] == 1) {\n                int res = t->query(query[1] + 1, query[2] + 1) - isPeak[query[1]];\n\n                res -= (query[1] != query[2]) ? isPeak[query[2]] : 0;\n                ans.emplace_back(res);\n            }\n            else {\n                int idx = query[1];\n                int val = query[2];\n\n                for (int i = max(1, idx - 1); i <= min(n - 2, idx + 1); i++) {\n                    if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                        t->update(i + 1, -1);\n                        isPeak[i] = 0;\n                    }\n                }\n\n                nums[idx] = val;\n\n                for (int i = max(1, idx - 1); i <= min(n - 2, idx + 1); i++) {\n                    if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                        t->update(i + 1, 1);\n                        isPeak[i] = 1;\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1718507840.0
}