{
    "username": "bigflow_drs",
    "submission": "class TrieNode {\npublic:\n    char data;\n    bool is_terminal;\n    int cost;\n    TrieNode* children[26];\n\n    TrieNode(char value) {\n        data = value;\n        is_terminal = false;\n        cost = 1e9;\n        for (int i = 0; i < 26; i++) {\n            children[i] = NULL;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode('!');\n    }\n    \n    void insert(string word, int word_cost) {\n        TrieNode* temp = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (temp->children[index] == NULL) {\n                temp->children[index] = new TrieNode(c);\n            }\n            temp = temp->children[index];\n        }\n        temp->is_terminal = true;\n        temp->cost = min(temp->cost, word_cost);\n    }\n    \n    int search(string word) {\n        TrieNode* temp = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (temp->children[index] == NULL) {\n                return 1e9;\n            }\n            temp = temp->children[index];\n        }\n        return temp->is_terminal ? temp->cost : 1e9;\n    }\n};\n\n\nclass Solution {\npublic:\n    int f(int i, Trie& trie, string& t, vector<int>& dp){\n        if (i == t.length()) return 0;\n        if (dp[i] != -1) return dp[i];\n\n        TrieNode* node = trie.root;\n        int ans = 1e9;\n        for (int j = i; j < t.length(); ++j) {\n            if (node->children[t[j] - 'a'] == NULL) break;\n            node = node->children[t[j] - 'a'];\n            if (node->is_terminal) {\n                ans = min(ans, node->cost + f(j + 1, trie, t, dp));\n            }\n        }\n\n        return dp[i] = ans;\n    }\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         int n = target.length();\n//         vector<int> dp(n, -1);\n//         Trie trie;\n\n//         for (int i = 0; i < words.size(); ++i) {\n//             trie.insert(words[i], costs[i]);\n//         }\n\n//         int ans = f(0, trie, target, dp);\n//         if(ans >= 1e9) ans = -1 ;\n//         return ans;\n//     }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == 1e9) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (node->children[index] == nullptr) break;\n                node = node->children[index];\n                if (node->is_terminal) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return (dp[n] >= 1e9) ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323218",
    "subm_id": "1312370220"
}