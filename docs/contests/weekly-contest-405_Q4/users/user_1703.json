{
    "username": "cpriyanshug00",
    "submission": "\nstruct TrieNode {\n\tunordered_map<char, TrieNode*> children;\n\tint minCost;\n\n\tTrieNode() {\n\t\tminCost = numeric_limits<int>::max();\n\t}\n};\n\nclass Trie {\nprivate:\n\tTrieNode* root;\n\npublic:\n\tTrie() {\n\t\troot = new TrieNode();\n\t}\n\n\tTrieNode* getRoot() const {\n\t\treturn root;\n\t}\n\n\tvoid insert(string word, int cost) {\n\t\tTrieNode* curr = root;\n\t\tfor (char c : word) {\n\t\t\tif (curr->children.find(c) == curr->children.end()) {\n\t\t\t\tcurr->children[c] = new TrieNode();\n\t\t\t}\n\t\t\tcurr = curr->children[c];\n\t\t}\n\t\tcurr->minCost = min(curr->minCost, cost);\n\t}\n\n\tint getMinCost(string prefix) {\n\t\tTrieNode* curr = root;\n\t\tfor (char c : prefix) {\n\t\t\tif (curr->children.find(c) == curr->children.end()) {\n\t\t\t\treturn numeric_limits<int>::max();\n\t\t\t}\n\t\t\tcurr = curr->children[c];\n\t\t}\n\t\treturn curr->minCost;\n\t}\n};\n\nclass Solution {\npublic:\n\tint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\t\tint n = target.length();\n\t\tvector<int> dp(n + 1, numeric_limits<int>::max());\n\t\tdp[0] = 0;\n\n\t\tTrie trie;\n\t\tfor (int i = 0; i < words.size(); ++i) {\n\t\t\ttrie.insert(words[i], costs[i]);\n\t\t}\n\n\t\tfor (int i = 0; i < n; ++i) {\n\t\t\tif (dp[i] == numeric_limits<int>::max()) continue;\n\t\t\tTrieNode* curr = trie.getRoot();\n\t\t\tfor (int j = i; j < n; ++j) {\n\t\t\t\tif (curr->children.find(target[j]) == curr->children.end()) break;\n\t\t\t\tcurr = curr->children[target[j]];\n\t\t\t\tint cost = curr->minCost;\n\t\t\t\tif (cost != numeric_limits<int>::max()) {\n\t\t\t\t\tdp[j + 1] = min(dp[j + 1], dp[i] + cost);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn dp[n] == numeric_limits<int>::max() ? -1 : dp[n];\n\t}\n};\n\n\n",
    "submit_ts": "1720323934",
    "subm_id": "1312387605"
}