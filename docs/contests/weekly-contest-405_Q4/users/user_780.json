{
    "username": "priyanshu2607",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& a, int b, int c) {\n            TrieNode* d = root;\n            for (char e : a) {\n                if (!d->children.count(e))\n                    d->children[e] = new TrieNode();\n                d = d->children[e];\n            }\n            d->wordEnds.push_back({b, c});\n        }\n    };\n\n    int minimumCost(string a, vector<string>& b, vector<int>& c) {\n        int d = a.size();\n        vector<int> e(d + 1, INT_MAX);\n        e[0] = 0;\n\n        Trie f;\n        for (int g = 0; g < b.size(); ++g) {\n            f.insert(b[g], g, c[g]);\n        }\n\n        for (int h = 0; h < d; ++h) {\n            if (e[h] == INT_MAX) continue;\n\n            TrieNode* i = f.root;\n            for (int j = h; j < d; ++j) {\n                if (!i->children.count(a[j])) break;\n                i = i->children[a[j]];\n                for (auto& k : i->wordEnds) {\n                    int l = k.first;\n                    int m = k.second;\n                    int n = b[l].size();\n                    if (h + n <= d) {\n                        e[h + n] = min(e[h + n], e[h] + m);\n                    }\n                }\n            }\n        }\n\n        return e[d] == INT_MAX ? -1 : e[d];\n    }\n};\n",
    "submit_ts": "1720321651",
    "subm_id": "1312328643"
}