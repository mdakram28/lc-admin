{
    "username": "likuRTvpvd",
    "submission": "\n\nclass Solution { \npublic: \n    char d[100001][7]; \n    char dz[100001][7]; \n    int nm[100001][7]; \n    int nzm[100001][7]; \n    \n    string largestPalindrome(int n, int k) { \n        if (k == 1 || k == 3 || k == 9) return string(n, '9'); \n        if (k == 2) { \n            if (n == 1) return \"8\"; \n            string r(n, '9'); \n            r[0] = r[n - 1] = '8'; \n            return r; \n        } \n        if (k == 5) { \n            if (n == 1) return \"5\"; \n            string r(n, '9'); \n            r[0] = r[n - 1] = '5'; \n            return r; \n        } \n        if (k == 4) { \n            if (n <= 3) return string(n, '8'); \n            string r(n, '9'); \n            r[0] = r[n - 1] = r[1] = r[n - 2] = '8'; \n            return r; \n        } \n        if (k == 8) { \n            if (n <= 5) return string(n, '8'); \n            string r(n, '9'); \n            r[0] = r[n - 1] = r[1] = r[n - 2] = r[2] = r[n - 3] = '8'; \n            return r; \n        } \n        if (k == 6) { \n            if (n == 1) return \"6\"; \n            if (n == 2) return \"66\"; \n            if (n == 3) return \"888\"; \n            string r(n, '9'); \n            r[0] = r[n - 1] = '8'; \n            if (n % 2 == 1) r[n / 2] = '8'; \n            else r[n / 2] = r[(n / 2) - 1] = '7'; \n            return r; \n        } \n        if (k == 7) { \n            if (n == 1) return \"7\"; \n            fill(&d[0][0], &d[0][0] + sizeof(d), 0); \n            fill(&dz[0][0], &dz[0][0] + sizeof(dz), 0); \n            for (int i = 1; i < 10; ++i) { \n                d[1][i % 7] = '0' + i; \n                if (i != 0) dz[1][i % 7] = '0' + i; \n            } \n            int b = 10 % 7; \n            for (int i = 0; i <= 100000 - 2; ++i) { \n                for (int j = 0; j < 7; ++j) { \n                    if ((i == 0 && j != 0) || (i > 0 && d[i][j] == 0)) continue; \n                    for (int c = 9; c >= 0; --c) { \n                        int m = (b * c + c + j * 10) % 7; \n                        if (d[i + 2][m] == 0 || d[i + 2][m] < '0' + c) { \n                            d[i + 2][m] = '0' + c; \n                            nm[i + 2][m] = j; \n                        } \n                        if (c == 0) continue; \n                        if (dz[i + 2][m] == 0 || dz[i + 2][m] < '0' + c) { \n                            dz[i + 2][m] = '0' + c; \n                            nzm[i + 2][m] = j; \n                        } \n                    } \n                } \n                b = (b * 10) % 7; \n            } \n            int q = n; \n            string f(1, dz[q][0]); \n            string bck(1, dz[q][0]); \n            int mod = nzm[q][0]; \n            q -= 2; \n            while (q) { \n                f += d[q][mod]; \n                if (q > 1) bck += d[q][mod]; \n                else break; \n                mod = nm[q][mod]; \n                q -= 2; \n            } \n            reverse(bck.begin(), bck.end()); \n            return f + bck; \n        } \n        return \"\"; \n    } \n};\n",
    "submit_ts": "1723953435",
    "subm_id": "1359821176"
}