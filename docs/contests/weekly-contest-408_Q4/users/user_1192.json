{
    "username": "tmate",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        set<vector<int>> uset(circles.begin(), circles.end());\n        circles.clear();\n        circles.insert(circles.end(), uset.begin(), uset.end());\n        queue<vector<int>> qcircles;\n        for (vector<int> circle : circles) {\n            int x = circle[0];\n            int y = circle[1];\n            int r = circle[2];\n            if (x - r <= 0 || x + r >= X || y - r <= 0 || y + r >= Y) qcircles.push(circle);\n        }\n        for (vector<int> circle : circles) {\n            int x = circle[0];\n            int y = circle[1];\n            int r = circle[2];\n            if (!(x - r <= 0 || x + r >= X || y - r <= 0 || y + r >= Y)) qcircles.push(circle);\n        }\n        map<vector<int>,int> mp;\n        queue<pair<vector<int>,int>> q;\n        while (!qcircles.empty()) {\n            vector<int> c1 = qcircles.front();\n            qcircles.pop();\n            int cnt = 0;\n            int status = 0;\n            int x = c1[0];\n            int y = c1[1];\n            int r = c1[2];\n            if (x - r <= 0 || y + r >= Y) {\n                cnt++;\n                status = 1;\n            }\n            if (x + r >= X || y - r <= 0) {\n                cnt++;\n                status = 2;\n            }\n            if (cnt == 2) return false;\n            q.push({c1, status});\n            while (!q.empty()) {\n                vector<int> c2 = q.front().first;\n                int stat = q.front().second;\n                q.pop();\n                if (mp.find(c2) != mp.end()) {\n                    int mpstat = mp[c2];\n                    if (stat + mpstat == 3) return false;\n                    continue;\n                }\n                mp[c2] = stat;\n                int n = qcircles.size() + 2;\n                while (!qcircles.empty()) {\n                    if (n-- < 0) break;\n                    vector<int> c3 = qcircles.front();\n                    qcircles.pop();\n                    cnt = 0;\n                    status = 0;\n                    x = c3[0];\n                    y = c3[1];\n                    r = c3[2];\n                    if (x - r <= 0 || y + r >= Y) {\n                        cnt++;\n                        status = 1;\n                    }\n                    if (x + r >= X || y - r <= 0) {\n                        cnt++;\n                        status = 2;\n                    }\n                    if (cnt == 2) return false;\n                    double dist = sqrt(static_cast<double>(pow(max(x, c2[0]) - min(x, c2[0]),2) + pow(max(y, c2[1]) - min(y, c2[1]),2)));\n                    if (r + c2[2] < dist) {\n                        qcircles.push(c3);\n                        continue;\n                    }\n                    if (stat + status == 3) return false;\n                    q.push({c3, max(stat,status)});\n                }          \n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138898",
    "subm_id": "1335802539"
}