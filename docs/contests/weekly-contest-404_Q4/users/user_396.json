{
    "username": "navaneethsubramanian030",
    "submission": "class Solution {\npublic:\n    pair<int, vector<int>> findTreeDiameterAndCenters(int n, vector<vector<int>>& edges) {\n        if (n == 1) return {0, {0}};\n\n        vector<vector<int>> adj(n);\n        for (auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        auto bfs = [&](int start) -> pair<int, int> {\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthestNode = start, maxDist = 0;\n\n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > maxDist) {\n                            maxDist = dist[neighbor];\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            return {farthestNode, maxDist};\n        };\n\n        int farthestNode, diameter;\n        tie(farthestNode, diameter) = bfs(0);\n        int oppositeNode;\n        tie(oppositeNode, diameter) = bfs(farthestNode);\n\n        vector<int> distFromFarthest(n, -1);\n        queue<int> q;\n        q.push(farthestNode);\n        distFromFarthest[farthestNode] = 0;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (distFromFarthest[neighbor] == -1) {\n                    distFromFarthest[neighbor] = distFromFarthest[node] + 1;\n                    q.push(neighbor);\n                }\n            }\n        }\n\n        vector<int> diameterPath;\n        int node = oppositeNode;\n        while (node != farthestNode) {\n            diameterPath.push_back(node);\n            for (int neighbor : adj[node]) {\n                if (distFromFarthest[neighbor] == distFromFarthest[node] - 1) {\n                    node = neighbor;\n                    break;\n                }\n            }\n        }\n        diameterPath.push_back(farthestNode);\n\n        int length = diameterPath.size();\n        vector<int> centers;\n        if (length % 2 == 0 && length >= 2) {\n            centers.push_back(diameterPath[length / 2 - 1]);\n            centers.push_back(diameterPath[length / 2]);\n        } else if (length % 2 == 1 && length >= 1) {\n            centers.push_back(diameterPath[length / 2]);\n        }\n\n        return {diameter, centers};\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto [diameter1, centers1] = findTreeDiameterAndCenters(edges1.size() + 1, edges1); // Adjust size calculation\n        auto [diameter2, centers2] = findTreeDiameterAndCenters(edges2.size() + 1, edges2); // Adjust size calculation\n\n        int minDiameter = INT_MAX;\n        for (int center1 : centers1) {\n            for (int center2 : centers2) {\n                int combinedDiameter = max({diameter1, diameter2, (diameter1 + 1) / 2 + 1 + (diameter2 + 1) / 2});\n                minDiameter = min(minDiameter, combinedDiameter);\n            }\n        }\n        return minDiameter;\n    }\n};\n",
    "submit_ts": "1719718767",
    "subm_id": "1304425564"
}