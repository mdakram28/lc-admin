{
    "username": "jam930725",
    "submission": "class Solution {\n    int[] ind;\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int cc = circles.length;\n        ind = new int[cc];\n        Area[] areas = new Area[cc];\n        for(int i = 0; i < cc; i++) {\n            ind[i] = i;\n            areas[i] = new Area(edgeContact(circles[i], X, Y));\n        }\n        for(int i = 0; i < cc; i++) {\n            for(int j = i+1; j < cc; j++) {\n                int ip = find(i), jp = find(j);\n                if(ip != jp && intersect(circles[i], circles[j])) {\n                    if(ip > jp) {\n                        int tmp = ip;\n                        ip = jp;\n                        jp = tmp;\n                    }\n                    join(ip, jp);\n                    areas[ip].connect(areas[i]);\n                    areas[ip].connect(areas[j]);\n                    areas[ip].connect(areas[jp]);\n                }\n            }\n        }\n        boolean[] v = new boolean[cc];\n        for(int i: ind) {\n            if(v[i])\n                continue;\n            v[i] = true;\n            if(areas[i].block())\n                return false;\n        }\n        return true;\n    }\n\n    public void join(int a, int b) {\n        ind[b] = a;\n    }\n\n    public int find(int x) {\n        if(ind[x] == x)\n            return x;\n        return ind[x] = find(ind[x]);\n    }\n\n    public boolean[] edgeContact(int[] c, int X, int Y) {\n        boolean[] rt = new boolean[4];\n        // up left bottom right\n        rt[0] = Math.abs(Y - c[1]) <= c[2];\n        rt[1] = Math.abs(X - c[0]) <= c[2];\n        rt[2] = Math.abs(0 - c[1]) <= c[2];\n        rt[3] = Math.abs(0 - c[0]) <= c[2];\n        return rt;\n    }\n\n    public boolean intersect(int[] c1, int[] c2) {\n        return dis(c1, c2) <= c1[2]+c2[2];\n    }\n\n    public double dis(int[] c1, int[] c2) {\n        int x = Math.abs(c1[0] - c2[0]);\n        int y = Math.abs(c1[1] - c2[1]);\n        return Math.sqrt(x*x + y*y);\n    }\n\n    public class Area {\n        boolean[] contact = new boolean[4];\n\n        public Area(boolean[] contact) {\n            this.contact = contact;\n        }\n\n        public void connect(Area other) {\n            for(int i = 0; i < 4; i++)\n                this.contact[i] |= other.contact[i];\n        }\n\n        public boolean block() {\n            return (\n                (this.contact[0] && this.contact[1]) || \n                (this.contact[2] && this.contact[3]) ||\n                (this.contact[0] && this.contact[2]) ||\n                (this.contact[1] && this.contact[3])\n            );\n        }\n    }\n}",
    "submit_ts": "1722137985",
    "subm_id": "1335779042"
}