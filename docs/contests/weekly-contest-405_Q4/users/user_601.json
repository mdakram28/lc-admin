{
    "username": "potatoyy",
    "submission": "class Node:\n    def __init__(self):\n        self.children = {}\n        self.cost = inf\n        \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        root = Node()\n        # d = defaultdict(lambda: inf)\n        # for i, w in enumerate(words):\n        #     d[w] = min(d[w], costs[i])\n        for i, word in enumerate(words):\n            curr = root\n            for c in word:\n                if c not in curr.children:\n                    curr.children[c] = Node()\n                curr = curr.children[c]\n            curr.cost = min(costs[i], curr.cost)\n            \n        @cache\n        def dfs(idx):\n            if idx == n:\n                return 0\n            i = idx\n            cur = root\n            res = inf\n            while i < n:\n                x = target[i]\n                if x in cur.children:\n                    if cur.children[x].cost != inf:\n                        res = min(res, cur.children[x].cost + dfs(i + 1))\n                    cur = cur.children[x]\n                    i += 1\n                else:\n                    break\n            return res\n        ans = dfs(0)\n        return ans if ans != inf else -1\n            \n                \n            \n                \n        \n        ",
    "submit_ts": "1720322236",
    "subm_id": "1312344414"
}