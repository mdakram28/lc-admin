{
    "username": "tushhr",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, e1: List[List[int]], e2: List[List[int]]) -> int:\n        \n        def trv(e):\n            idgr = [0]*(len(e) + 1)\n            maxi = [0]*(len(e) + 1)\n            ngbr = defaultdict(list)\n            for strt, end in e:\n                idgr[strt] += 1\n                idgr[end] += 1\n                ngbr[strt].append(end)\n                ngbr[end].append(strt)\n            \n            tmp = min(idgr)\n            dq = deque([])\n            for idx, num in enumerate(idgr):\n                if num == tmp:\n                    dq.append(idx)\n            \n            ans = 0\n            tmp2 = 0\n            while(dq):\n                node = dq.popleft()\n                idgr[node] -= 1\n                # print(node, maxi)\n                for nbr in ngbr[node]:\n                    if idgr[nbr] > 0:\n                        tmp2 = max(tmp2, maxi[nbr] + maxi[node] + 1)\n                        # print(tmp2, nbr, node, maxi[nbr], maxi[node])\n\n                        maxi[nbr] = max(maxi[nbr], maxi[node] + 1)\n                        idgr[nbr] -= 1\n\n                        if idgr[nbr] == 1:\n                            dq.append(nbr)\n            \n            # print(maxi)\n            return [maxi[node], tmp2]                \n        \n        maxe1, we1 = trv(e1)\n        maxe2, we2 = trv(e2)\n        # print(we1, we2)\n        \n        return max(maxe1 + maxe2 + 1, we1, we2)",
    "submit_ts": 1719718042.0
}