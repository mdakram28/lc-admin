{
    "username": "nyp00n",
    "submission": "const int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n    sort(requirements.begin(), requirements.end());\n\n    int max_inversions = 0;\n    for (auto& req : requirements) {\n        max_inversions = max(max_inversions, req[1]);\n    }\n\n    vector<int> dp(max_inversions + 1, 0);\n    dp[0] = 1; \n\n    vector<int> prev_dp(max_inversions + 1, 0);\n    int current_max_inv = 0; \n\n    for (int len = 1; len <= n; ++len) {\n        current_max_inv = min(current_max_inv + (len - 1), max_inversions);\n\n        prev_dp = dp;\n        fill(dp.begin(), dp.end(), 0);\n\n        vector<int> prefix_sum(current_max_inv + 1, 0);\n        prefix_sum[0] = prev_dp[0];\n        for (int inv = 1; inv <= current_max_inv; ++inv) {\n            prefix_sum[inv] = (prefix_sum[inv - 1] + prev_dp[inv]) % MOD;\n        }\n\n        for (int inv = 0; inv <= current_max_inv; ++inv) {\n            if (inv == 0) {\n                dp[inv] = prefix_sum[inv];\n            } else {\n                int start_inv = inv - len;\n                if (start_inv < 0) {\n                    dp[inv] = prefix_sum[inv];\n                } else {\n                    dp[inv] = (prefix_sum[inv] - prefix_sum[start_inv] + MOD) % MOD;\n                }\n            }\n        }\n\n        for (auto& req : requirements) {\n            if (req[0] + 1 == len) {\n                int cnti = req[1];\n                vector<int> new_dp(max_inversions + 1, 0);\n                new_dp[cnti] = dp[cnti];  \n                dp = new_dp;\n                break;  \n            }\n        }\n    }\n\n    int result = 0;\n    for (int inv = 0; inv <= max_inversions; ++inv) {\n        result = (result + dp[inv]) % MOD;\n    }\n\n    return result;\n    }\n};",
    "submit_ts": "1719067506",
    "subm_id": "1296728149"
}