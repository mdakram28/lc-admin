{
    "username": "chen_111",
    "submission": "class Solution {\n    struct TrieNode{\n        int count;\n        TrieNode* next[26];\n        TrieNode(){\n            for(int i = 0; i < 26; i++){\n                next[i] = NULL;\n            }\n            count = INT_MAX/2;\n        }\n        ~TrieNode(){\n            for(auto child : next){\n                if(child) delete child;\n            }\n        }\n    };\n    TrieNode* root = new TrieNode();\n    int res = INT_MAX;\n    vector<int> memo;\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        vector<int> dp(target.size() + 1, INT_MAX / 2);\n        dp[0] = 0;\n\n        for(int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            auto word = words[i];\n            for(auto ch : word) {\n                if(node->next[ch - 'a'] == NULL) node->next[ch - 'a'] = new TrieNode();\n                node = node->next[ch - 'a'];\n            }\n            node->count = min(node->count, costs[i]);\n        }\n\n        for(int i = 0; i < target.size(); i++) {\n            if (dp[i] == INT_MAX / 2) continue; // No valid way to reach this point\n            \n            TrieNode* node = root;\n            for(int j = i; j < target.size(); j++) {\n                auto ch = target[j];\n                if(node->next[ch - 'a'] != NULL) {\n                    node = node->next[ch - 'a'];\n                    if(node->count != INT_MAX / 2) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + node->count);\n                    }\n                } else break;\n            }\n        }\n\n        return dp[target.size()] == INT_MAX / 2 ? -1 : dp[target.size()];\n    }\n    \n    void backtrack(string target, vector<int>& costs, int sum, int cur){\n        if(cur == target.size()){\n            res = min(res, sum);\n            return;\n        }\n        if(memo[cur] < sum){\n            return;\n        }\n        else {\n            memo[cur] = min(memo[cur], sum);\n        }\n        \n        TrieNode* node = root;\n        \n        for(int i = cur; i < target.size(); i++){\n            auto ch = target[i];\n            if(node->next[ch-'a'] != NULL){\n                node = node->next[ch-'a'];\n                if(node->count != INT_MAX/2){\n                    // \u653e\u5165costs, \u8d70\u5230\u54ea, target...\n                    backtrack(target, costs, sum + node->count, i+1);\n                }\n            }\n            else break;\n        }\n    }\n};",
    "submit_ts": "1720323330",
    "subm_id": "1312372936"
}