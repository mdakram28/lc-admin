{
    "username": "modelflat",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n\n        def dist(x1, y1, x2, y2):\n            return ((x1 - x2)**2 + (y1 - y2)**2)**.5\n\n        def intersecting(x1, y1, r1, x2, y2, r2):\n            return dist(x1, y1, x2, y2) <= r1 + r2\n        \n        def within(x, y, i):\n            return intersecting(x, y, 0, circles[i][0], circles[i][1], circles[i][2])\n\n        for i in range(len(circles)):\n            if within(0, 0, i) or within(X, Y, i):\n                return False\n\n        g = defaultdict(list)\n        for i, (x1, y1, r1) in enumerate(circles):\n            for j, (x2, y2, r2) in enumerate(circles[:i]):\n                if intersecting(x1, y1, r1, x2, y2, r2):\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        def search(sources, predicate):\n            q = deque()\n            seen = set()\n            for s in sources:\n                if predicate(s):\n                    return True\n                q.append(s)\n            while q:\n                node = q.popleft()\n                if node not in seen:\n                    seen.add(node)\n                    if predicate(node):\n                        return True\n                    for nxt in g.get(node, []):\n                        if nxt not in seen:\n                            q.append(nxt)\n            return False\n\n        \n        ix0 = []\n        for i in range(len(circles)):\n            if circles[i][0] <= circles[i][2]:\n                ix0.append(i)\n\n        if search(ix0, lambda n: circles[n][1] <= circles[n][2]):\n            return False\n\n        if search(ix0, lambda n: abs(X - circles[n][0]) <= circles[n][2]):\n            return False\n\n        iyY = []\n        for i in range(len(circles)):\n            if abs(Y - circles[i][1]) <= circles[i][2]:\n                iyY.append(i)\n\n        if search(iyY, lambda n: circles[n][1] <= circles[n][2]):\n            return False\n\n        if search(iyY, lambda n: abs(X - circles[n][0]) <= circles[n][2]):\n            return False\n\n        return True",
    "submit_ts": "1722138888",
    "subm_id": "1335802250"
}