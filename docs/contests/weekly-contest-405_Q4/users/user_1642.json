{
    "username": "tmimotw",
    "submission": "class Solution {\npublic int minimumCost(String target, String[] words, int[] costs) {\n    var trie = new TrieMinimumCost();\n    for (int i = 0; i < words.length; i++) {\n      trie.insert(words[i], costs[i]);\n    }\n    var dp = new int[target.length()];\n    Arrays.fill(dp, Integer.MAX_VALUE);\n    var subString = new StringBuilder();\n    for (int i = 0; i < target.length(); i++) {\n      subString.append(target.charAt(i));\n      dp[i] = trie.search(subString.toString(), dp, i);\n    }\n    return (dp[target.length() - 1] == Integer.MAX_VALUE) ? -1 : dp[target.length() - 1];\n  }\n\n  class TrieNodeMinimumCost {\n    boolean isWord;\n    TrieNodeMinimumCost[] children;\n    int cost;\n\n    public TrieNodeMinimumCost() {\n      isWord = false;\n      children = new TrieNodeMinimumCost[26];\n      cost = Integer.MAX_VALUE;\n    }\n  }\n\n  class TrieMinimumCost {\n    TrieNodeMinimumCost root;\n\n    public TrieMinimumCost() {\n      root = new TrieNodeMinimumCost();\n    }\n\n    public void insert(String word, int cost) {\n      // word = new StringBuilder(word).reverse().toString();\n      var node = root;\n      for (int i = word.length() - 1; i >= 0; i--) {\n        var c = word.charAt(i);\n        // for (var c : word.toCharArray()) {\n        var index = c - 'a';\n        if (node.children[index] == null) {\n          node.children[index] = new TrieNodeMinimumCost();\n        }\n        node = node.children[index];\n      }\n      node.isWord = true;\n      node.cost = Math.min(node.cost, cost);\n    }\n\n    public int search(String word, int[] dp, int currentDpIndex) {\n      var result = Integer.MAX_VALUE;\n      var node = root;\n      var countChar = 0;\n      for (int i = word.length() - 1; i >= 0; i--) {\n        var c = word.charAt(i);\n        // for (var c : word.toCharArray()) {\n        var index = c - 'a';\n        if (node.children[index] == null) {\n          return result;\n        }\n        node = node.children[index];\n        countChar++;\n        if (node.isWord) {\n          if (currentDpIndex - countChar == -1) {\n            result = Math.min(result, node.cost);\n          }\n          if (currentDpIndex - countChar >= 0 && dp[currentDpIndex - countChar] != Integer.MAX_VALUE) {\n            result = Math.min(result, dp[currentDpIndex - countChar] + node.cost);\n          }\n        }\n      }\n      return result;\n    }\n  }\n}",
    "submit_ts": "1720324075",
    "subm_id": "1312390973"
}