{
    "username": "koshmar_",
    "submission": "class Solution {\npublic:\nint diam(vector<vector<int>>& edges) {\n\n    vector<vector<int>> graph(edges.size()+1);\n\n    for(auto& e:edges) {\n        graph[e[0]].push_back(e[1]);\n        graph[e[1]].push_back(e[0]);\n    }\n\n    vector<int> visited(graph.size(),0);\n    queue<int> q;\n    q.push(0);\n    int last = 0;\n    visited[0] = 1;\n\n    while(!q.empty()) {\n\n        int node = q.front();\n        q.pop();\n        for(auto ch:graph[node])\n            if (visited[ch]!=1) {\n            last=ch;\n            q.push(ch);\n            visited[ch]=1;\n        }\n    }\n\n    for(int& v:visited) v=0;\n    while(!q.empty()) q.pop();\n    visited[last] = 1;\n    q.push(last);\n\n    int level = 0;\n\n    for(;!q.empty();++level) {\n\n        for(int sz=q.size(); sz>0; --sz) {\n\n            int node = q.front();\n            q.pop();\n            for(auto ch:graph[node])\n                if (visited[ch]!=1) {\n                q.push(ch);\n                visited[ch]=1;\n            }\n        }\n    }\n\n    return level-1;\n\n\n}\n\nint minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n\n    int d1 = diam(edges1);\n    int d2 = diam(edges2);\n\n\n    return max( max(d1,d2), 1+max(d1/2,d1-d1/2) + max(d2/2,d2-d2/2) );\n}\n};",
    "submit_ts": 1719718713.0
}