{
    "username": "Kar Deepak Kumar",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n\n        negINF = -10**10\n        m = len(board)\n        n = len(board[0])\n\n        values = [[board[row][col], row, col] for row in range(m) for col in range(n)]\n        values = sorted(values, reverse = True)\n\n        def areRooksAttacking(rooks):\n            rows = set()\n            cols = set()\n            for row, col in rooks:\n                if row in rows:\n                    return True\n                if col in cols:\n                    return True\n                rows.add(row)\n                cols.add(col)\n            return False\n\n        def checkScore(rooks):\n            if areRooksAttacking(rooks):\n                return negINF\n            result = 0\n            for row, col in rooks:\n                result += board[row][col]\n            return result\n\n        result = negINF\n\n        for rook1 in range(m*n-2):\n            if values[rook1][0] + values[rook1 + 1][0] + values[rook1 + 2][0] <= result:\n                break\n            for rook2 in range(rook1+1, m*n-1):\n                if values[rook1][0] + values[rook2][0] + values[rook2+1][0] <= result:\n                    break\n                rooks = [[values[rook1][1], values[rook1][2]]] + [[values[rook2][1], values[rook2][2]]]\n                if areRooksAttacking(rooks):\n                    continue\n                for rook3 in range(rook2+1, m*n):\n                    rooks = [[values[rook1][1], values[rook1][2]]] + [[values[rook2][1], values[rook2][2]]] + [[values[rook3][1], values[rook3][2]]]\n                    if areRooksAttacking(rooks):\n                        continue\n                    curScore = checkScore(rooks)\n                    if curScore < result:\n                        break\n                    result = max(result, curScore)\n\n        return result",
    "submit_ts": "1723910016",
    "subm_id": "1359214170"
}