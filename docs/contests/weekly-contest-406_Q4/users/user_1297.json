{
    "username": "Sohail_Gouri",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h = 0, v = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long cost = 0;\n\n        // Merge process: pick the maximum cut each time\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] > verticalCut[v]) {\n                cost += horizontalCut[h] * verticalPieces;\n                h++;\n                horizontalPieces++;\n            } else {\n                cost += verticalCut[v] * horizontalPieces;\n                v++;\n                verticalPieces++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            cost += horizontalCut[h] * verticalPieces;\n            h++;\n            horizontalPieces++;\n        }\n\n        // If there are remaining vertical cuts\n        while (v < verticalCut.size()) {\n            cost += verticalCut[v] * horizontalPieces;\n            v++;\n            verticalPieces++;\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720925871",
    "subm_id": "1320268915"
}