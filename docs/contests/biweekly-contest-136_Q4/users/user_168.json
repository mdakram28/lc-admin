{
    "username": "AndyLead",
    "submission": "class Solution {\n    vector<int> timeDown;\n    vector<int> totalTime;\n    vector<vector<int>> edges;\n\n    void initTimeDown(int node, int parent = -1) {\n        int time = 0;\n        for(auto child: edges[node]) if(child != parent) {\n            initTimeDown(child, node);\n            if(child % 2 == 1) time = max(time, 1 + timeDown[child]);\n            else time = max(time, 2 + timeDown[child]);\n        }\n        timeDown[node] = time;\n    }\n\n     void initTotalTime(int node, int parent = -1, int parent_time = 0) {\n        totalTime[node] = max(timeDown[node], parent_time);\n\n        int biggest_child = -1, time = 0;\n        for(auto child: edges[node]) if(child != parent) {\n            if(child % 2 == 1) {\n                if(1 + timeDown[child] > time) time = 1 + timeDown[child], biggest_child = child;\n            } else {\n                if(2 + timeDown[child] > time) time = 2 + timeDown[child], biggest_child = child;\n            }\n        }\n\n        int worst_time = max(parent_time, time);\n        for(auto child: edges[node]) if(child != parent and child != biggest_child) {\n            if(node % 2 == 1) {\n                initTotalTime(child, node, 1 + worst_time);\n            } else {\n                initTotalTime(child, node, 2 + worst_time);\n            }\n        }\n\n        int next_time = 0;\n          for(auto child: edges[node]) if(child != parent and child != biggest_child) {\n            if(child % 2 == 1) {\n                if(1 + timeDown[child] > next_time) next_time = 1 + timeDown[child];\n            } else {\n                if(2 + timeDown[child] > next_time) next_time = 2 + timeDown[child];\n            }\n        }\n\n        worst_time = max(parent_time, next_time);\n        if(biggest_child != -1) {\n            if(node % 2 == 1) {\n                initTotalTime(biggest_child, node, 1 + worst_time);\n            } else {\n                initTotalTime(biggest_child, node, 2 + worst_time);\n            }\n        }\n    }\n\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        timeDown.resize(n);\n        totalTime.resize(n);\n        this->edges.resize(n);\n        for(auto e: edges) this->edges[e[0]].push_back(e[1]), this->edges[e[1]].push_back(e[0]);        \n        initTimeDown(0, -1);\n        initTotalTime(0, -1);\n        return totalTime;\n    }\n};",
    "submit_ts": "1722699499",
    "subm_id": "1343213520"
}