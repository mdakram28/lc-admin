{
    "username": "Ayanerru",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    class SegtreeAnd {\n    public:\n        SegtreeAnd(vector<int> arr) {\n            int n = arr.size();\n            size = 1;\n            while(size < n)\n                size *= 2;\n            agg = vector<int>(size*2, (1<<30)-1); // 1073741823 > 1e9\n            build(arr, 0, 0, size);\n        }\n        void build(vector<int>& arr, int nd_id, int lb, int rb) {\n            if (rb - lb == 1) { // top-down assignment\n                if (lb < (int)(arr.size())) {\n                    agg[nd_id] = arr[lb];\n                }\n                return;\n            }\n            int mid = lb + (rb-lb) / 2;\n            build(arr, nd_id*2+1, lb, mid);\n            build(arr, nd_id*2+2, mid, rb);\n            agg[nd_id] = (agg[nd_id*2+1] & agg[nd_id*2+2]);\n        }\n\n            // notice: range [lb, rb)\n        void update(int i, int val, int nd_id, int lb, int rb) {\n            if (rb-lb == 1) {\n                agg[nd_id] = val;\n                return;\n            }\n            int mid = lb + (rb-lb) / 2;\n            if (i < mid) {\n                update(i, val, nd_id*2+1, lb, mid);\n            } else {\n                update(i, val, nd_id*2+2, mid, rb);\n            }\n            agg[nd_id] = (agg[nd_id*2+1] & agg[nd_id*2+2]);\n        }\n        void update(int i, int val) {\n            update(i, val, 0, 0, size);\n        }\n        int get_and(int l, int r, int nd_id, int lb, int rb) {\n            if (lb >= r || l >= rb) // total outer\n                return INT_MAX;\n            if (lb >= l && rb <= r) // total inner\n                return agg[nd_id];\n            int mid = lb + (rb-lb) / 2;\n            int agg_l = get_and(l, r, nd_id*2+1, lb, mid);\n            int agg_r = get_and(l, r, nd_id*2+2, mid, rb);\n            return (agg_l & agg_r);\n        }\n        int get_and(int l, int r) {\n            return get_and(l, r, 0, 0, size);\n        }\n    private:\n        int size;\n        vector<int> agg;\n    };\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        ll ans = 0;\n        SegtreeAnd* st = new SegtreeAnd(nums);\n        for(int i = 0; i < n; i++) {\n            if (nums[i] < k) continue;\n            // start\n            int lo = i, hi = n;\n            while (lo < hi) {\n                int mid = lo + (hi - lo) / 2;\n                if (st->get_and(i, mid+1) > k) {\n                    lo = mid+1;\n                } else {\n                    hi = mid;\n                }\n            }\n            int beg = lo;\n            \n            // end\n            lo = i, hi = n;\n            while (lo < hi) {\n                int mid = lo + (hi - lo) / 2;\n                if (st->get_and(i, mid+1) >= k) {\n                    lo = mid+1;\n                } else {\n                    hi = mid;\n                }\n            }\n            int ed = lo;\n            // cout << \"i = \" << i << \", beg = \" << beg << \", ed = \" << ed << endl;\n            ans += ll(ed - beg);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278138",
    "subm_id": "1311696057"
}