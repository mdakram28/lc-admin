{
    "username": "taoz-kc",
    "submission": "from math import ceil, log2\n\nclass segment_tree:\n    # merge(left, right): function used to merge the two halves\n    # basef(value): function applied on individual values\n    # basev: identity for merge function, merger(value, basev) = value\n    # update(node_value, old, new): function to update the nodes\n    def __init__(self, array, merge=lambda x,y:x+y, basev = 0, basef=lambda x:x):\n        self.merge = merge\n        self.basef = basef\n        self.basev = basev\n        self.n = len(array)\n        self.array = array\n        self.tree = [0] * ( 2**ceil(log2(len(array))+1) - 1 )\n        self.build(array)\n    \n    def __str__(self):\n        return ' '.join([str(x) for x in self.tree])\n\n    def _build_util(self, l, r, i, a):\n        if(l==r):\n            self.tree[i] = self.basef(a[l])\n            return self.tree[i]\n        mid = (l+r)//2\n        self.tree[i] = self.merge(self._build_util(l,mid, 2*i+1, a), self._build_util(mid+1, r, 2*i+2, a))\n        return self.tree[i]\n\n    def build(self, a):\n        self._build_util(0, len(a)-1, 0, a)\n\n    def _query_util(self, i, ln, rn, l, r):\n        if ln>=l and rn<=r:\n            return self.tree[i]\n        if ln>r or rn<l:\n            return self.basev\n        return self.merge( self._query_util( 2*i+1, ln, (ln+rn)//2, l, r ), self._query_util( 2*i+2, (ln+rn)//2+1, rn, l, r ) )\n\n    def query(self, l, r):\n        return self._query_util( 0, 0, self.n-1, l, r )\n\n    def _update_util(self, i, ln, rn, x, v):\n        if x>=ln and x<=rn:\n            if ln != rn:\n                self._update_util( 2*i+1, ln, (ln+rn)//2, x, v )\n                self._update_util( 2*i+2, (ln+rn)//2 + 1, rn, x, v )\n                self.tree[i] = self.merge(self.tree[2*i+1], self.tree[2*i+2])\n            else:\n                self.tree[i] = self.basef(v)\n\n    def update(self, x, v):\n        self._update_util( 0, 0, self.n-1, x, v )   \n        self.array[x] =v       \n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        res = [0]*n\n        for i in range(1,n-1):\n            if nums[i]>nums[i-1] and nums[i]> nums[i+1]:\n                res[i] =1\n        sg = segment_tree(res)\n        \n        def isGood(i):\n            if i <0 or i >=n-1:\n                return 0\n            if nums[i]>nums[i-1] and nums[i]> nums[i+1]:\n                return 1\n            else:\n                return 0\n        \n        ret =[]\n        for t,f,t1 in queries:\n            if t == 1:\n                ret.append(sg.query(f+1,t1-1))\n            if t ==2:\n                nums[f]=t1\n                if f -1>=0:\n                    sg.update(f-1,isGood(f-1))\n                sg.update(f,isGood(f))\n                if f+1<n-1:\n                    sg.update(f+1,isGood(f+1))\n        return ret",
    "submit_ts": "1718506466",
    "subm_id": "539775147"
}