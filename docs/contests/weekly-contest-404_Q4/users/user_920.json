{
    "username": "ashish_2298744",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        g1 = {}\n        for i in edges1:\n            if i[0] not in g1:\n                g1[i[0]] = []\n            if i[1] not in g1:\n                g1[i[1]] = []\n\n            g1[i[0]].append(i[1])\n            g1[i[1]].append(i[0])\n\n        g2 = {}\n        for i in edges2:\n            if i[0] not in g2:\n                g2[i[0]] = []\n            if i[1] not in g2:\n                g2[i[1]] = []\n\n            g2[i[0]].append(i[1])\n            g2[i[1]].append(i[0])\n\n        def getDepth(g):\n            if not g:\n                return 0\n            vis = set()\n            last = [0, 0]\n            def dfs(node, depth):\n                nonlocal last\n                vis.add(node)\n                if depth > last[0]:\n                    last = [depth, node]\n                for i in g[node]:\n                    if i not in vis:\n                        dfs(i, depth + 1)\n            dfs(0, 0)\n\n            mx = 0\n            vis = set()\n            def dfs2(node, depth):\n                nonlocal mx\n                vis.add(node)\n                mx = max(mx, depth)\n                for i in g[node]:\n                    if i not in vis:\n                        dfs2(i, depth + 1)\n            dfs2(last[1], 0)\n            return mx\n\n        a = getDepth(g1)\n        b = getDepth(g2)\n        print(a, b)\n        if a == b:\n            if a % 2 == 0:\n                return a // 2 + b // 2 + 1\n            else:\n                return (a + 1) // 2 + (b + 1) // 2 + 1\n        else:\n            if a % 2 == 0:\n                if b % 2 == 0:\n                    return max(a // 2 + b // 2 + 1, a, b)\n                else:\n                    return max(a // 2 + (b + 1) // 2 + 1, a, b)\n            else:\n                if b % 2 == 0:\n                    return max((a + 1) // 2 + b // 2 + 1, a, b)\n                else:\n                    return max((a + 1) // 2 + (b + 1) // 2 + 1, a, b)\n        \n",
    "submit_ts": "1719717576",
    "subm_id": "1304395256"
}