{
    "username": "user3603T",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        N = len(points)\n        V = [0 for i in range(N)]\n        V1 = [0 for i in range(N)]\n\n        for i in range(N):\n            V[i] = [points[i][0] + points[i][1], i]\n            V1[i] = [points[i][0] - points[i][1], i]\n\n        # Sorting both the vectors\n        V.sort(key = lambda x : x[0])\n        V1.sort(key = lambda x : x[0])\n        #print(V, V1)\n        to_del = [V[0][1], V[-1][1], V1[0][1], V1[-1][1]]\n\n\n        curr_min = float('inf')\n\n        for idx in to_del:\n            if idx != 0:\n                minsum = maxsum = points[0][0] + points[0][1]\n                mindiff = maxdiff = points[0][0] - points[0][1]\n            else:\n                minsum = maxsum = points[1][0] + points[1][1]\n                mindiff = maxdiff = points[1][0] - points[1][1]\n\n            for i in range(1, N):\n                if i != idx:\n                    sum = points[i][0] + points[i][1]\n                    diff = points[i][0] - points[i][1]\n                    if (sum < minsum):\n                        minsum = sum\n                    elif (sum > maxsum):\n                        maxsum = sum\n                    if (diff < mindiff):\n                        mindiff = diff\n                    elif (diff > maxdiff):\n                        maxdiff = diff\n\n            maximum = max(maxsum - minsum, maxdiff - mindiff)\n\n            curr_min = min(curr_min, maximum)\n\n        return(curr_min)\n            \n        \n        \n        \n        "
}