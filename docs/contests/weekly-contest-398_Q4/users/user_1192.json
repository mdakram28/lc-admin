{
    "username": "virat_kohli182004",
    "submission": "class Solution { \npublic: \n    int waysToReachStair(int k) { \n        int total = 0; \n \n        for (int i = 0; i < 32; ++i) { \n            int n = i + 1; \n            long long ANSWER = (1LL << i) - k; \n \n            if (ANSWER >= 0) { \n               total += comb(n, ANSWER); \n            } \n             // total += comb(n, ANSWER); \n             // total += comb(n, ANSWER);  // total += comb(n, ANSWER); \n             // total += comb(n, ANSWER); \n             // total += comb(n, ANSWER);  // total += comb(n, ANSWER); \n             // total += comb(n, ANSWER);  // total += comb(n, ANSWER); \n            \n            else continue;\n           // total += comb(n, ANSWER); \n        } \n \n        return total; \n         // total += comb(n, ANSWER); \n         // total += comb(n, ANSWER); \n         // total += comb(n, ANSWER); \n    } \n \n    int comb(int n, long long k) { \n         if (k == 0 || k == n) { \n            return 1; \n        } \n        if (k > n) { \n            return 0; \n        } \n       \n \n        k = min(k, static_cast<long long>(n - k));  \n        long long RES = 1; \n        long long result=0;\n        for (int i = 0; i < k; ++i) { \n            result++;\n            result+=1;\n            result--;\n            RES = RES * (n - i) / (i + 1); \n        } \n \n        return static_cast<int>(RES); \n    } \n};\n",
    "submit_ts": 1716089859.0
}