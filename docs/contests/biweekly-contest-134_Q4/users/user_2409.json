{
    "username": "Shreya_Mathur19",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& array, int target) {\n        int size = array.size();\n        long long total_count = 0;\n        unordered_map<long long, long long> prefix_counts;\n\n        for (int index = 0; index < size; ++index) {\n            // Create a new map for current prefix sums\n            unordered_map<long long, long long> current_prefix_sums;\n\n            // Check if the current element itself is equal to the target\n            if (array[index] == target) {\n                ++total_count;\n            }\n\n            // Include the current element in the current prefix sums\n            current_prefix_sums[array[index]] = 1;\n\n            // Update total_count by checking previous prefix sums\n            for (auto& [value, frequency] : prefix_counts) {\n                // Calculate the new AND result with the current element\n                long long new_and_result = value & array[index];\n                \n                // If new AND result matches the target, add its frequency to total_count\n                if (new_and_result == target) {\n                    total_count += frequency;\n                }\n\n                // Update current prefix sums with the new AND result frequency\n                current_prefix_sums[new_and_result] += frequency;\n            }\n\n            // Update prefix_counts to the current prefix sums for next iteration\n            prefix_counts = current_prefix_sums;\n        }\n\n        return total_count;\n    }\n};\n",
    "submit_ts": "1720280931",
    "subm_id": "1311807141"
}