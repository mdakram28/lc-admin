{
    "username": "Abhineet309",
    "submission": "import logging\nfrom typing import List, Tuple\nfrom collections import Counter\n\nlogging.basicConfig(level=logging.INFO)\nlogger = logging.getLogger(__name__)\n\nclass BinaryStringProcessor:\n    @staticmethod\n    def count_occurrences(string: str) -> Tuple[int, int]:\n        counter = Counter(string)\n        return counter['0'], counter['1']\n\n    @staticmethod\n    def is_valid_binary_string(string: str) -> bool:\n        return all(char in '01' for char in string)\n\nclass Solution:\n    def __init__(self):\n        self.processor = BinaryStringProcessor()\n\n    def preprocess_string(self, input_string: str) -> List[int]:\n        processed_sequence = []\n        encountered_one_flag = False\n        \n        for current_character in input_string:\n            if current_character == '1':\n                processed_sequence.append(1)\n                encountered_one_flag = True\n            elif current_character == '0' and encountered_one_flag:\n                processed_sequence.append(0)\n                encountered_one_flag = False\n        \n        return processed_sequence\n\n    def calculate_operations(self, processed_sequence: List[int]) -> int:\n        total_operations_count = 0\n        consecutive_ones_count = 0\n        \n        for current_element in processed_sequence:\n            if current_element == 1:\n                consecutive_ones_count = consecutive_ones_count + 1\n            else:\n                total_operations_count = total_operations_count + consecutive_ones_count\n        \n        return total_operations_count\n\n    def maxOperations(self, input_string: str) -> int:\n        logger.info(f\"Processing input string: {input_string}\")\n\n        if not self.processor.is_valid_binary_string(input_string):\n            logger.error(\"Invalid input: String contains characters other than 0 and 1\")\n            return -1\n\n        zero_count, one_count = self.processor.count_occurrences(input_string)\n        logger.debug(f\"Input string contains {zero_count} zeros and {one_count} ones\")\n\n        if len(input_string) == 0:\n            logger.warning(\"Empty input string\")\n            return 0\n\n        processed_sequence = self.preprocess_string(input_string)\n        logger.debug(f\"Processed sequence: {processed_sequence}\")\n\n        total_operations_count = self.calculate_operations(processed_sequence)\n        \n        logger.info(f\"Total operations count: {total_operations_count}\")\n        return total_operations_count\n\n# Example usage\nif __name__ == \"__main__\":\n    solution = Solution()\n    test_cases = [\"110011\", \"001\", \"111000\", \"010101\"]\n    \n    for test_case in test_cases:\n        result = solution.maxOperations(test_case)\n        print(f\"Max operations for '{test_case}': {result}\")",
    "submit_ts": "1721530134",
    "subm_id": "1327923894"
}