{
    "username": "hustlerr",
    "submission": "class Solution {\npublic:\n    template <typename T>\n    struct SparseTable {\n    inline static constexpr T INF = numeric_limits<T>::max() / 2;\n    int N;\n    vector<vector<T> > table;\n    T f(T a, T b) { return a & b; }\n    SparseTable() {}\n    SparseTable(const vector<T> &v) : N(v.size()) {\n        int b = 1;\n        while ((1 << b) <= N) ++b;\n        table.push_back(v);\n        for (int i = 1; i < b; i++) {\n        table.push_back(vector<T>(N, INF));\n        for (int j = 0; j + (1 << i) <= N; j++) {\n            table[i][j] = f(table[i - 1][j], table[i - 1][j + (1 << (i - 1))]);\n        }\n        }\n    }\n    // [l, r)\n    T query(int l, int r) {\n        assert(0 <= l and l <= r and r <= N);\n        if (l == r) return INF;\n        int b = 31 - __builtin_clz(r - l);\n        return f(table[b][l], table[b][r - (1 << b)]);\n    }\n    };\n    long long countSubarrays(vector<int>& a, int k) {\n        long long ans = 0;\n        SparseTable<int> S(a);\n        int n = a.size();\n        for(int i = 0; i < n; i++){\n            int l = 0, r = i, resl = n + 1, resr = -1;\n            while(l <= r){\n                int mid = (l + r) / 2;\n                int q = S.query(mid, i + 1);\n                \n                if(q < k){\n                    l = mid + 1;\n                }\n                else {\n                    if(q == k){\n                        resl = mid;\n                    }\n                    r = mid - 1;\n                }\n            }\n            l = 0, r = i;\n            while(l <= r){\n                int mid = (l + r) / 2;\n                int q = S.query(mid, i + 1);\n                \n                if(q <= k){\n                    if(q == k){\n                        resr = mid;\n                    }\n                    l = mid + 1;\n                }\n                else {\n                    r = mid - 1;\n                }\n            }\n            if (resr != -1){\n                ans += resr - resl + 1;\n            }\n        }   \n        return ans;\n    }\n};",
    "submit_ts": "1720278786",
    "subm_id": "1311724186"
}