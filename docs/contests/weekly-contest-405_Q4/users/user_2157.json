{
    "username": "suvaditya",
    "submission": "// \u0939\u0930 \u0939\u0930 \u092e\u0939\u093e\u0926\u0947\u0935\n\n#[derive(Clone)]\nstruct SuffixTrieNode {\n    end: bool,\n    cost: i32,\n    children: Vec<SuffixTrieNode>,\n}\n\nimpl Default for SuffixTrieNode {\n    fn default() -> Self {\n        Self {\n            end: false,\n            cost: i32::MAX,\n            children: Default::default(),\n        }\n    }\n}\n\nstruct SuffixTrie {\n    root: SuffixTrieNode,\n}\n\nimpl SuffixTrie {\n    pub fn new() -> Self {\n        Self {\n            root: Default::default(),\n        }\n    }\n\n    pub fn add(&mut self, word: &[u8], cost: i32) {\n        let mut ptr = &mut self.root;\n        for &b in word.iter().rev() {\n            let index = b as usize - 0x61;\n            if ptr.children.is_empty() {\n                ptr.children = vec![Default::default(); 26];\n            }\n            ptr = &mut ptr.children[index];\n        }\n        ptr.end = true;\n        ptr.cost = ptr.cost.min(cost);\n    }\n}\n\nimpl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n        let mut dp = vec![i32::MAX; target.len() + 1];\n        dp[0] = 0;\n        let mut st = SuffixTrie::new();\n        for (word, cost) in words.iter().zip(costs.iter()) {\n            st.add(word.as_bytes(), *cost);\n        }\n        let t = target.as_bytes();\n        for i in 1..=t.len() {\n            let mut index = i as isize;\n            let mut ptr = &st.root;\n            while index > 0 && !ptr.children.is_empty() {\n                index -= 1;\n                ptr = &ptr.children[t[index as usize] as usize - 0x61];\n                if ptr.end {\n                    dp[i] = dp[i].min(dp[index as usize].saturating_add(ptr.cost));\n                }\n            }\n        }\n        match dp[target.len()] {\n            i32::MAX => -1,\n            r => r,\n        }\n    }\n}",
    "submit_ts": "1720323170",
    "subm_id": "1312369053"
}