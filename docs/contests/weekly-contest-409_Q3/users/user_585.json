{
    "username": "ravneet_b",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        Intervals intervals = new Intervals();\n        int[] answer = new int[queries.length];\n        for (int i = 0; i < queries.length; i++) {\n            int length = intervals.add(queries[i]);\n            answer[i] = n-1-length+intervals.intervals.size();\n        }\n        return answer;\n    }\n}\n\nclass Intervals {\n    TreeSet<int[]> intervals; \n    int length;\n\n    Intervals() {\n        intervals = new TreeSet<>((a,b) -> a[0]-b[0]);\n        length = 0;\n    }\n\n    int add(int[] interval) {\n        if (intervals.isEmpty()) {\n            intervals.add(interval);\n            length += interval[1] - interval[0];\n            return length;\n        }\n        int[] previous = intervals.floor(interval);\n        if (previous != null && previous[1] >= interval[1]) {\n            return length; // we can reject this edge.\n        }\n        int[] next = intervals.ceiling(interval);\n        while (next != null && next[1] <= interval[1]) {\n            length -= next[1] - next[0];\n            intervals.remove(next);\n            next = intervals.ceiling(interval);\n        }\n        intervals.add(interval);\n        // Iterator<int[]> it = intervals.iterator();\n        // while (it.hasNext()) System.out.print(Arrays.toString(it.next()));\n        // System.out.println();\n        return length += interval[1]-interval[0];\n    }\n\n}",
    "submit_ts": "1722742071",
    "subm_id": "1343760256"
}