{
    "username": "HarshithaG",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the costs in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());        \n        // Initialize number of pieces\n        int horizontalPieces = 1, verticalPieces = 1;        \n        // Initialize total cost\n        long long totalCost = 0;        \n        // Indices for the cuts\n        int i = 0, j = 0;\n        // Loop until all cuts are processed\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += (long long)horizontalCut[i] * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += (long long)verticalCut[j] * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n        // Process remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[i] * verticalPieces;\n            horizontalPieces++;\n            i++;\n        }\n        // Process remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += (long long)verticalCut[j] * horizontalPieces;\n            verticalPieces++;\n            j++;\n        }\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926159",
    "subm_id": "1320277732"
}