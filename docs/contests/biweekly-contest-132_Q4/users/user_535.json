{
    "username": "user3744L",
    "submission": "class Solution {\npublic:\n\n    int maximumLength(vector<int> &nums, int k) {\n        int n = nums.size();\n        map<int, vector<int>> mp;\n        vector<int> curr(k + 1, 0), prev(k + 1, 0);\n        int ans = 0;\n        for(int i = 0; i < nums.size(); i++){\n            curr = vector<int> (k + 1, 0);\n\n            if(!mp.count(nums[i])) mp[nums[i]].resize(k + 1, 0);\n            for(int j = 0; j <= k; j++)\n                curr[j] = mp[nums[i]][j] + 1;\n\n\n            for(int j = 0; j < k; j++)\n                curr[j + 1] = max(curr[j + 1], 1 + prev[j]);\n\n            for(int j = 0; j <= k; j++)\n                mp[nums[i]][j] = max(curr[j], mp[nums[i]][j]);\n\n            for(int j = 0; j <= k; j++)\n                curr[j] = max(curr[j], prev[j]);\n\n            ans = max(ans, *max_element(curr.begin(), curr.end()));\n            prev = curr;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717862004.0
}