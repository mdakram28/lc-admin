{
    "username": "weiqizheng",
    "submission": "impl Solution {\n    pub fn count_k_constraint_substrings(s: String, k: i32, queries: Vec<Vec<i32>>) -> Vec<i64> {\n        let s = s.into_bytes();\n        let n = s.len();\n\n        let mut ranges = Vec::with_capacity(n);\n        let mut one_count = 0;\n        let mut zero_count = 0;\n        let mut front_pos = 0;\n        let mut back_pos = 0;\n        while front_pos < s.len() {\n            let front_ch = s[front_pos];\n            if front_ch == b'1' {\n                one_count += 1;\n            } else {\n                zero_count += 1;\n            }\n            while one_count.min(zero_count) > k {\n                let back_ch = s[back_pos];\n                if back_ch == b'1' {\n                    one_count -= 1;\n                } else {\n                    zero_count -= 1;\n                }\n                back_pos += 1;\n            }\n            ranges.push(back_pos as i32);\n\n            front_pos += 1;\n        }\n\n        // dbg!(&ranges);\n\n        let mut ranges_presum = Vec::with_capacity(n);\n        // ranges_presum.push(0);\n        let mut sum = 0_i64;\n        for i in 0..s.len() {\n            sum += (i as i32 - ranges[i] + 1) as i64;\n            ranges_presum.push(sum);\n        }\n\n        // dbg!(&ranges_presum);\n\n        let mut result = Vec::with_capacity(queries.len());\n        for query in queries {\n            let left = query[0];\n            let right = query[1];\n            let mut partition_point = ranges.partition_point(|&x| x <= left) as i64 - 1;\n            if partition_point > right as i64 {\n                partition_point = right as i64;\n            }\n\n            let mut total = 0_i64;\n            // println!(\n            //     \"left {left} right {right} partition_point {partition_point} value {}\",\n            //     ranges[partition_point as usize]\n            // );\n            total +=\n                (partition_point - left as i64 + 1) * (1 + partition_point - left as i64 + 1) / 2; // n *(a1 + an) / 2\n                                                                                                   // println!(\"total {total}\");\n            total += ranges_presum[right as usize] - ranges_presum[partition_point as usize];\n            // println!(\"total {total}\");\n\n            result.push(total);\n        }\n        result\n    }\n}",
    "submit_ts": "1723951447",
    "subm_id": "556405496"
}