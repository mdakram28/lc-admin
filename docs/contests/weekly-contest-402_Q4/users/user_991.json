{
    "username": "dj3013158",
    "submission": "from typing import List\n\n# \u7ebf\u6bb5\u6811\u7684\u8282\u70b9\u7c7b\nclass TreeNode:\n    def __init__(self, val=0):\n        self.left = -1                              # \u533a\u95f4\u5de6\u8fb9\u754c\n        self.right = -1                             # \u533a\u95f4\u53f3\u8fb9\u754c\n        self.val = val                              # \u8282\u70b9\u503c\uff08\u533a\u95f4\u503c\uff09\n        self.lazy_tag = None                        # \u533a\u95f4\u548c\u95ee\u9898\u7684\u5ef6\u8fdf\u66f4\u65b0\u6807\u8bb0\n\n# \u7ebf\u6bb5\u6811\u7c7b\nclass SegmentTree:\n    def __init__(self, nums):\n        self.size = len(nums)\n        self.tree = [TreeNode() for _ in range(4 * self.size)]  # \u7ef4\u62a4 TreeNode \u6570\u7ec4\n        self.nums = nums                            # \u539f\u59cb\u6570\u636e\n        if self.size > 0:\n            self.__build(0, 0, self.size - 1)\n\n    # \u6784\u5efa\u7ebf\u6bb5\u6811\uff0c\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\u4e3a index\uff0c\u8282\u70b9\u7684\u533a\u95f4\u4e3a [left, right]\n    def __build(self, index, left, right):\n        self.tree[index].left = left\n        self.tree[index].right = right\n        if left == right:                           # \u53f6\u5b50\u8282\u70b9\uff0c\u8282\u70b9\u503c\u4e3a\u5bf9\u5e94\u4f4d\u7f6e\u7684\u5143\u7d20\u503c\n            self.tree[index].val = self.nums[left]\n            return\n\n        mid = left + (right - left) // 2            # \u5de6\u53f3\u8282\u70b9\u5212\u5206\u70b9\n        left_index = index * 2 + 1                  # \u5de6\u5b50\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\n        right_index = index * 2 + 2                 # \u53f3\u5b50\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\n        self.__build(left_index, left, mid)         # \u9012\u5f52\u521b\u5efa\u5de6\u5b50\u6811\n        self.__build(right_index, mid + 1, right)   # \u9012\u5f52\u521b\u5efa\u53f3\u5b50\u6811\n        self.__pushup(index)                        # \u5411\u4e0a\u66f4\u65b0\u8282\u70b9\u7684\u533a\u95f4\u503c\n\n    # \u5411\u4e0a\u66f4\u65b0\u4e0b\u6807\u4e3a index \u7684\u8282\u70b9\u533a\u95f4\u503c\uff0c\u8282\u70b9\u7684\u533a\u95f4\u503c\u7b49\u4e8e\u8be5\u8282\u70b9\u5de6\u53f3\u5b50\u8282\u70b9\u5143\u7d20\u503c\u7684\u805a\u5408\u8ba1\u7b97\u7ed3\u679c\n    def __pushup(self, index):\n        left_index = index * 2 + 1                  # \u5de6\u5b50\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\n        right_index = index * 2 + 2                 # \u53f3\u5b50\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\n        self.tree[index].val = self.tree[left_index].val + self.tree[right_index].val\n\n    # \u5355\u70b9\u66f4\u65b0\uff0c\u5c06 nums[i] \u66f4\u6539\u4e3a val\n    def update_point(self, i, val):\n        self.nums[i] = val\n        self.__update_point(i, val, 0, 0, self.size - 1)\n\n    # \u5355\u70b9\u66f4\u65b0\uff0c\u5c06 nums[i] \u66f4\u6539\u4e3a val\u3002\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\u4e3a index\uff0c\u8282\u70b9\u7684\u533a\u95f4\u4e3a [left, right]\n    def __update_point(self, i, val, index, left, right):\n        if self.tree[index].left == self.tree[index].right:\n            self.tree[index].val = val              # \u53f6\u5b50\u8282\u70b9\uff0c\u8282\u70b9\u503c\u4fee\u6539\u4e3a val\n            return\n\n        mid = left + (right - left) // 2            # \u5de6\u53f3\u8282\u70b9\u5212\u5206\u70b9\n        left_index = index * 2 + 1                  # \u5de6\u5b50\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\n        right_index = index * 2 + 2                 # \u53f3\u5b50\u8282\u70b9\u7684\u5b58\u50a8\u4e0b\u6807\n        if i <= mid:                                # \u5728\u5de6\u5b50\u6811\u4e2d\u66f4\u65b0\u8282\u70b9\u503c\n            self.__update_point(i, val, left_index, left, mid)\n        else:                                       # \u5728\u53f3\u5b50\u6811\u4e2d\u66f4\u65b0\u8282\u70b9\u503c\n            self.__update_point(i, val, right_index, mid + 1, right)\n        self.__pushup(index)                        # \u5411\u4e0a\u66f4\u65b0\u8282\u70b9\u7684\u533a\u95f4\u503c\n\n    # \u533a\u95f4\u67e5\u8be2\n    def query(self, L, R, index, left, right):\n        if L <= left and right <= R:\n            return self.tree[index].val\n        if right < L or left > R:\n            return 0\n\n        mid = left + (right - left) // 2\n        left_index = index * 2 + 1\n        right_index = index * 2 + 2\n        return self.tree[left_index].val if left == right else self.query(L, R, left_index, left, mid) + self.query(L, R, right_index, mid + 1, right)\n\n# \u5224\u65ad\u662f\u5426\u4e3a\u5cf0\u503c\ndef is_peak(nums, i):\n    if i == 0 or i == len(nums) - 1:\n        return 0\n    return 1 if nums[i - 1] < nums[i] > nums[i + 1] else 0\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        peak_status = [0] * n\n\n        for i in range(1, n - 1):\n            peak_status[i] = is_peak(nums, i)\n            \n        st = SegmentTree(peak_status)\n        \n        result = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if ri - li <= 1:\n                    result.append(0)\n                else:\n                    result.append(st.query(li + 1, ri - 1, 0, 0, len(nums) - 1))\n            elif query[0] == 2:\n                index, value = query[1], query[2]\n                nums[index] = value\n                for j in range(max(1, index - 1), min(n - 1, index + 2)):\n                    st.update_point(j, is_peak(nums, j))\n                    \n        return result\n",
    "submit_ts": "1718508647",
    "subm_id": "1289687345"
}