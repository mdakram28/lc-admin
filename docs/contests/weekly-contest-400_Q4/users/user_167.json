{
    "username": "Mamba_Feng",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        self.build(data)\n    \n    def build(self, data):\n        for i in range(self.n):\n            self.tree[self.n + i] = data[i]\n        \n\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i * 2] & self.tree[i * 2 + 1]\n    \n    def query(self, l, r):\n        l += self.n\n        r += self.n + 1 \n        res = -1  \n        \n        while l < r:\n            if l % 2:\n                res &= self.tree[l]\n                l += 1\n            if r % 2:\n                r -= 1\n                res &= self.tree[r]\n            l //= 2\n            r //= 2\n        \n        return res\n\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        A = SegmentTree(nums)\n        N = len(nums)\n        sol = abs(k-nums[0])\n        \n        # print(A.tree)\n\n        idx1, idx2 = 0, 0 \n        while idx2 < N: \n            if idx1 == idx2: \n                idx2 += 1\n                continue \n            tmp_val = A.query(idx1, idx2-1)\n            sol = min(sol, abs(k-tmp_val))\n            if tmp_val < k:\n                idx1 += 1\n            elif tmp_val == k:\n                return 0\n            else:\n                idx2 += 1 \n        while idx1 < N: \n            tmp_val = A.query(idx1, N-1)\n            sol = min(sol, abs(k-tmp_val))\n            idx1 += 1\n        return sol ",
    "submit_ts": 1717297952.0
}