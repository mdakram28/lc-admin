{
    "username": "vasugondaliya",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.word = False\n        self.children = {}\n        self.cost = math.inf\n        \n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str, cost: int) -> None:\n        node = self.root\n        for i in word:\n            if i not in node.children:\n                node.children[i] = TrieNode()\n            node = node.children[i]\n        node.word = True\n        node.cost = min(node.cost, cost)\n\n    def search(self, word: str) -> bool:\n        node = self.root\n        for i in word:\n            if i not in node.children:\n                return False\n            node =  node.children[i]\n        return node.word\n    \n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        dp = [math.inf] * len(target)\n        for i in range(len(target)):\n            if i == 0 or dp[i - 1] != math.inf:\n                curr = trie.root\n                for j in range(i, len(target)):\n                    c = target[j]\n                    if c not in curr.children:\n                        break\n\n                    curr = curr.children[c]\n                    if curr.word:\n                        total_cost = curr.cost + (dp[i - 1] if dp[i - 1] != math.inf else 0)\n                        dp[j] = min(dp[j], total_cost)\n        return dp[-1] if dp[-1] != math.inf else -1\n        \n        \n        \n            ",
    "submit_ts": "1720321265",
    "subm_id": "1312318117"
}