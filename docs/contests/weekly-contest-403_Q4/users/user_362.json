{
    "username": "nu-li-xue-xi-de-xiao-g",
    "submission": "# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\n\n\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n\n\n        m,n = len(grid), len(grid[0])\n\n\n        # @lru_cache(typed=False, maxsize=128000)\n        def dp3(ii1, ii2, jj1, jj2):\n            ans = 0x7f7f7f7f\n            for mid_i in range(ii1, ii2):\n                ans = min(ans, dp2(ii1, mid_i, jj1, jj2) + dp1(mid_i+1, ii2, jj1, jj2), dp1(ii1, mid_i, jj1, jj2) + dp2(mid_i+1, ii2, jj1, jj2))\n            for mid_j in range(jj1, jj2):\n                ans = min(ans, dp2(ii1, ii2, jj1, mid_j) + dp1(ii1, ii2, mid_j+1, jj2), dp1(ii1, ii2, jj1, mid_j) + dp2(ii1, ii2, mid_j+1, jj2))\n            return ans\n\n        # @lru_cache(typed=False, maxsize=128000)\n        def dp2(ii1, ii2, jj1, jj2):\n            ans = 0x7f7f7f7f\n            for mid_i in range(ii1, ii2):\n                ans = min(ans, dp1(ii1, mid_i, jj1, jj2) + dp1(mid_i + 1, ii2, jj1, jj2),\n                          dp1(ii1, mid_i, jj1, jj2) + dp1(mid_i + 1, ii2, jj1, jj2))\n            for mid_j in range(jj1, jj2):\n                # print(ii1, ii2)\n                ans = min(ans, dp1(ii1, ii2, jj1, mid_j) + dp1(ii1, ii2, mid_j + 1, jj2),\n                          dp1(ii1, ii2, jj1, mid_j) + dp1(ii1, ii2, mid_j + 1, jj2))\n            return ans\n\n\n        # @lru_cache(typed=False, maxsize=128000)\n        def dp1(ii1, ii2, jj1, jj2):\n\n            cnt = 0\n\n            min_i = 0x7f7f7f77f\n            max_i = -1\n            min_j = 0x7f7f7f7f7\n            max_j = -1\n            for i in range(ii1, ii2+1):\n                for j in range(jj1, jj2+1):\n                    if grid[i][j] == 0:\n                        continue\n\n                    cnt += 1\n                    min_i = min(min_i, i)\n                    max_i = max(max_i, i)\n                    min_j = min(min_j, j)\n                    max_j = max(max_j, j)\n\n            if cnt == 0:\n                return 1\n\n            return (max_i - min_i + 1) * (max_j - min_j + 1)\n\n\n        return dp3(0, m-1, 0, n-1)\n",
    "submit_ts": 1719114637.0
}