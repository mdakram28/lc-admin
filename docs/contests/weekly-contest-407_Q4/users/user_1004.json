{
    "username": "Black-Cat-Commander",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n\n        long[] inc = new long[n];\n        for (int i = 0; i < n; i++) {\n            inc[i] = nums[i] - target[i];\n        }\n\n        return minimumOperations(inc);\n    }\n\n    private long minimumOperations(long[] inc) {\n        int n = inc.length;\n\n        long[] dp = new long[n];\n        dp[0] = Math.abs(inc[0]);\n        for (int i = 1; i < n; i++) {\n            long inc0 = inc[i - 1];\n            long inc1 = inc[i];\n\n            if ((inc0 > 0 && inc1 > 0) || (inc0 < 0 && inc1 < 0)) { // \u540c\u53f7\n                long a1 = Math.abs(inc0);\n                long a2 = Math.abs(inc1);\n\n                dp[i] = dp[i - 1];\n                if (a1 < a2) {\n                    dp[i] += a2 - a1;\n                }\n            } else { // \u5f02\u53f7\n                dp[i] = dp[i - 1] + Math.abs(inc1);\n            }\n        }\n\n        return dp[n - 1];\n    }\n}",
    "submit_ts": "1721532230",
    "subm_id": "548391143"
}