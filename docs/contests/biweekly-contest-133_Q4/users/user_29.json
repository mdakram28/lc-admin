{
    "username": "VideCode_1",
    "submission": "/*          || \u091c\u092f \u0936\u094d\u0930\u0940 \u0930\u093e\u092e || \u0950 \u0928\u092e\u0903 \u0936\u093f\u0935\u093e\u092f || \u0939\u0930 \u0939\u0930 \u092e\u0939\u093e\u0926\u0947\u0935 || \u091c\u092f \u092c\u091c\u0930\u0902\u0917 \u092c\u0932\u0940 || */ \n/*  Name:Ayush Dubey    \nID:https://codeforces.com/profile/dubeyayush2006*/ \n\n\n\nvar numberOfPermutations = function(n, requirements) {\n    const MOD = 10**9 + 7;\n    \n   \n    let dp = Array.from({ length: n + 1 }, () => Array(n * (n - 1) / 2 + 1).fill(0));\n    dp[0][0] = 1;\n\n    for (let len = 1; len <= n; len++) {\n        let prefixSum = Array(n * (n - 1) / 2 + 1).fill(0);\n        \n      \n        for (let inv = 0; inv <= len * (len - 1) / 2; inv++) {\n            prefixSum[inv] = (prefixSum[inv - 1] || 0) + dp[len - 1][inv];\n            if (prefixSum[inv] >= MOD) prefixSum[inv] -= MOD;\n        }\n\n  \n        for (let inv = 0; inv <= len * (len - 1) / 2; inv++) {\n            if (inv >= len) {\n                dp[len][inv] = (prefixSum[inv] - prefixSum[inv - len] + MOD) % MOD;\n            } else {\n                dp[len][inv] = prefixSum[inv];\n            }\n        }\n    }\n\n \n    let constraints = Array(n).fill(-1);\n    for (let [end, count] of requirements) {\n        constraints[end] = count;\n    }\n\n \n    let validDp = Array.from({ length: n + 1 }, () => Array(n * (n - 1) / 2 + 1).fill(0));\n    validDp[0][0] = 1;\n\n    for (let len = 1; len <= n; len++) {\n        let prefixSum = Array(n * (n - 1) / 2 + 1).fill(0);\n\n        \n        for (let inv = 0; inv <= len * (len - 1) / 2; inv++) {\n            prefixSum[inv] = (prefixSum[inv - 1] || 0) + validDp[len - 1][inv];\n            if (prefixSum[inv] >= MOD) prefixSum[inv] -= MOD;\n        }\n\n       \n        for (let inv = 0; inv <= len * (len - 1) / 2; inv++) {\n            if (constraints[len - 1] !== -1 && constraints[len - 1] !== inv) continue;\n            if (inv >= len) {\n                validDp[len][inv] = (prefixSum[inv] - prefixSum[inv - len] + MOD) % MOD;\n            } else {\n                validDp[len][inv] = prefixSum[inv];\n            }\n        }\n    }\n\n    let result = 0;\n    for (let inv = 0; inv <= n * (n - 1) / 2; inv++) {\n        if (constraints[n - 1] === -1 || constraints[n - 1] === inv) {\n            result = (result + validDp[n][inv]) % MOD;\n        }\n    }\n\n    return result;\n};\n\n// Example 1:\nconsole.log(numberOfPermutations(3, [[2, 2], [0, 0]])); // Output: 2\n\n// Example 2:\nconsole.log(numberOfPermutations(3, [[2, 2], [1, 1], [0, 0]])); // Output: 1\n\n// Example 3:\nconsole.log(numberOfPermutations(2, [[0, 0], [1, 0]])); // Output: 1\n",
    "submit_ts": 1719067482.0
}