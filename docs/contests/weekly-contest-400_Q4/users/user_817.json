{
    "username": "user5551tF",
    "submission": "class CustomSegmentTree {\n    private int[] tree;\n    private int size;\n\n    public void initialize(int[] array) {\n        this.size = array.length;\n        this.tree = new int[4 * size];\n        buildTree(array, 0, 0, size - 1);\n    }\n\n    private void buildTree(int[] array, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = array[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(array, 2 * node + 1, start, mid);\n            buildTree(array, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    public int queryRange(int left, int right) {\n        return queryHelper(0, 0, size - 1, left, right);\n    }\n\n    private int queryHelper(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return Integer.MAX_VALUE;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = queryHelper(2 * node + 1, start, mid, left, right);\n        int rightResult = queryHelper(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n}\n\nclass Solution {\n    public int minimumDifference(int[] numbers, int k) {\n        int arraySize = numbers.length;\n        CustomSegmentTree segmentTree = new CustomSegmentTree();\n        segmentTree.initialize(numbers);\n        int minDifference = Integer.MAX_VALUE;\n\n        for (int i = 0; i < arraySize; i++) {\n            minDifference = findMinDifference(i, arraySize, k, segmentTree, minDifference);\n        }\n        return minDifference;\n    }\n\n    private int findMinDifference(int index, int arraySize, int k, CustomSegmentTree segmentTree, int minDifference) {\n        int left = index - 1, right = arraySize - 1;\n        \n        while (right - left > 1) {\n            int mid = (left + right) / 2;\n            if (segmentTree.queryRange(index, mid) >= k) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n\n        if (left != index - 1) {\n            minDifference = Math.min(minDifference, calculateAbsoluteDifference(segmentTree.queryRange(index, left), k));\n        }\n        minDifference = Math.min(minDifference, calculateAbsoluteDifference(k, segmentTree.queryRange(index, right)));\n        \n        return minDifference;\n    }\n\n    private int calculateAbsoluteDifference(int a, int b) {\n        return Math.abs(a - b);\n    }\n}",
    "submit_ts": 1717299730.0
}