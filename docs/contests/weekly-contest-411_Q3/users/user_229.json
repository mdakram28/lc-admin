{
    "username": "danieldumitran",
    "submission": "#include <stdint.h>\n#include <string.h>\n#include <math.h>\n#include <assert.h>\n\n#include <iostream>\n#include <unordered_set>\n#include <unordered_map>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <queue>\n#include <set>\n#include <map>\n#include <stack>\n#include <memory>\n#include <list>\n#include <functional>\n#include <condition_variable>\n#include <mutex>\n\n#ifndef LOCALRUN\n#define printf(format, ...)\n#endif\n\nconstexpr long long kLeetMod = 1000000007ll;\n\n#ifdef LOCALRUN\nstruct TreeNode {\n  int val;\n  TreeNode *left;\n  TreeNode *right;\n  TreeNode(int x) : val(x), left(NULL), right(NULL) {}\n};\n\nstruct ListNode {\n  int val;\n  ListNode *next;\n  ListNode() : val(0), next(nullptr) {}\n  ListNode(int x) : val(x), next(nullptr) {}\n  ListNode(int x, ListNode *next) : val(x), next(next) {}\n};\n#endif\n\nconstexpr int maxn = 100000;\n\nusing namespace std;\n\nclass Solution {\nprivate:\n  std::string to_str(int x) {\n    char buffer[128];\n    sprintf(buffer, \"%d\", x);\n    return buffer;\n  }\n\n  bool is_palindrome(const std::string& s) const {\n    const int n = s.size();\n    const char* st = s.data();\n    const char* en = s.data() + n - 1;\n    while (st < en) {\n      if (*st != *en) return false;\n      ++st; --en;\n    }\n    return true;\n  }\n\n  void put(char what, int& st, int& en, char* buffer) {\n    buffer[st] = what;\n    buffer[en] = what;\n    ++st; --en;\n  }\n\n  bool found = false;\n\n  bool is_k_divisible(const std::string& s, int k) {\n    int result = 0;\n    int digit_mod = 1;\n    for (int i = s.size() - 1; i >= 0; --i) {\n      assert(s[i] >= '0' && s[i] <= '9');\n      result += (s[i] - '0') * digit_mod;\n      result %= k;\n      digit_mod *= 10; digit_mod %= k;\n    }\n    return result == 0;\n  }\n\n  void back(int st, int en, char* buffer, int k) {\n    if (st > en) {\n      if (is_k_divisible(buffer, k)) {\n        found = true;\n      }\n      return;\n    }\n\n    for (char ch = '9'; ch >= '0'; --ch) {\n      buffer[st] = buffer[en] = ch;\n      back(st + 1, en - 1, buffer, k);\n      if (found) return;\n    }\n    buffer[st] = buffer[en] = '*';\n  }\n\npublic:\n  Solution() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n  }\n\n  string largestPalindrome(int n, int k) {\n    if (n == 1) {\n      for (int i = 9; i >= 1; --i)\n        if (i % k == 0) return to_str(i);\n      assert(false);\n    }\n\n    if (n == 2) {\n      for (int i = 99; i >= 10; --i) {\n        if (i % k != 0) continue;\n        const std::string s = to_str(i);\n        if (!is_palindrome(s)) continue;\n        return s;\n      }\n      assert(false);\n    }\n\n    if (n == 3) {\n      for (int i = 999; i >= 100; --i) {\n        if (i % k != 0) continue;\n        const std::string s = to_str(i);\n        if (!is_palindrome(s)) continue;\n        return s;\n      }\n    }\n\n    char buffer[maxn + 1];\n    for (int i = 0; i < n; ++i) { buffer[i] = '*'; } buffer[n] = 0;\n\n    if (k == 8) {\n      if (n == 4) return \"8888\";\n      if (n == 5) return \"88888\";\n      if (n == 6) return \"888888\";\n      for (int i = 0; i < n; ++i)\n        buffer[i] = i < 3 || i + 3 >= n ? '8': '9';\n      return buffer;\n    }\n\n    int st = 0; int en = n - 1;\n    if (k == 5) { put('5', st, en, buffer); }\n    if (k % 2 == 0) { put('8', st, en, buffer); }\n    if (k % 4 == 0) { put('8', st, en, buffer); }\n\n    back(st, en, buffer, k);\n    assert(found);\n    return buffer;\n\n    assert(false);\n  }\n};\n\n#ifdef LOCALRUN\nvoid run_test(int n, int k) {\n  printf(\"%d %d -> %s\\n\", n, k, Solution().largestPalindrome(n, k).c_str());\n}\n\nint main() {\n  run_test(3, 5);\n  run_test(1, 4);\n  run_test(2, 5);\n  run_test(1, 5);\n  run_test(1, 8);\n  run_test(2, 8);\n  run_test(3, 8);\n  run_test(4, 8);\n  run_test(5, 8);\n  run_test(6, 8);\n  run_test(7, 8);\n  run_test(8, 8);\n  run_test(1, 6);\n  run_test(2, 6);\n  run_test(3, 6);\n  run_test(4, 6);\n  run_test(5, 6);\n  run_test(100000, 1);\n  run_test(100000, 2);\n  run_test(100000, 3);\n  run_test(100000, 4);\n  run_test(100000, 5);\n  run_test(100000, 6);\n  run_test(100000, 7);\n  run_test(100000, 8);\n  run_test(100000, 9);\n  return 0;\n}\n#endif\n",
    "submit_ts": "1723951124",
    "subm_id": "1359763833"
}