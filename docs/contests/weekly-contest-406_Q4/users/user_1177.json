{
    "username": "piyush_lasane",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n        \n        int hIndex = 0, vIndex = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long totalCost = 0;\n        \n        // Greedily choose the maximum cost cut at each step\n        while (hIndex < hCuts.length && vIndex < vCuts.length) {\n            if (hCuts[hIndex] >= vCuts[vIndex]) {\n                totalCost += (long) hCuts[hIndex] * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                totalCost += (long) vCuts[vIndex] * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (hIndex < hCuts.length) {\n            totalCost += (long) hCuts[hIndex] * verticalPieces;\n            horizontalPieces++;\n            hIndex++;\n        }\n        \n        // Process remaining vertical cuts\n        while (vIndex < vCuts.length) {\n            totalCost += (long) vCuts[vIndex] * horizontalPieces;\n            verticalPieces++;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925803",
    "subm_id": "1320266680"
}