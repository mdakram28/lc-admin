{
    "username": "Orz",
    "submission": "class Solution {\n    int n, m;\n    public long maximumValueSum(int[][] board) {\n        n = board.length; m = board[0].length;\n        List<PriorityQueue<int[]>> pqs = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            pqs.add(new PriorityQueue<>(Comparator.comparingInt(a -> a[0])));\n            for (int j = 0; j < m; j++) {\n                if (pqs.get(i).size() < 3) pqs.get(i).add(new int[] {board[i][j], j});\n                else if (pqs.get(i).peek()[0] < board[i][j]) {\n                    pqs.get(i).poll();\n                    pqs.get(i).add(new int[] {board[i][j], j});\n                }\n            }\n        }\n        long ans = -(1L<<60);\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                for (int k = j + 1; k < n; k++) {\n                    for (var v1 : pqs.get(i)) {\n                        for (var v2 : pqs.get(j)) {\n                            for (var v3 : pqs.get(k)) {\n                                if (v1[1] != v2[1] && v1[1] != v3[1] && v2[1] != v3[1]) {\n                                    ans = Math.max(ans, (long) v1[0] + v2[0] + v3[0]);   \n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1723907376",
    "subm_id": "1359104509"
}