{
    "username": "AKJ003",
    "submission": "class Solution {\npublic:\n      long long power(int base, int exp) {\n        if (exp == 0) {\n            return 1;\n        }\n        \n        long long half = power(base, exp / 2);\n        long long result = half * half;\n        \n        if (exp % 2 != 0) {\n            result *= base;\n        }\n        \n        return result;\n    }\n    unordered_map<int, vector<vector<int>>> dpp;\n\nint ff(int target, int cs, int cj, bool down) {\n    if (cs > target + 5)\n        return 0;\n\n    if (cj > 31)\n        return 0;\n\n    if (dpp.count(cs) && dpp[cs][cj][down] != -1)\n        return dpp[cs][cj][down];\n\n    int ways = (cs == target);\n    if (down)\n        ways += ff(target, cs - 1, cj, false);\n    if (cs + (1 << cj) <= target + 1)\n        ways += ff(target, cs + (1 << cj), cj + 1, true);\n\n    dpp[cs].resize(32, vector<int>(2, -1));\n\n    return dpp[cs][cj][down] = ways;\n}\n\n    int f(vector<int>& e, int k,int i,vector<int>&dp)\n    {\n        if(i>=e.size())\n        {\n            return 0;\n        }\n        if(dp[i]!=-1002)\n        {\n            return dp[i];\n        }\n        return dp[i]=e[i]+f(e,k,i+k,dp);\n       \n    }\n    int waysToReachStair(int k) {\n        return  ff(k, 1, 0, 1);\n    }\n};",
    "submit_ts": 1716088499.0
}