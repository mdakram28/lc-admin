{
    "username": "Tan Nguyen Nguyen",
    "submission": "const int N = 1e5 + 5;\n#define ll long long\nclass Solution {\npublic:\n    ll sumArith(int l, int r) {\n        return 1ll * (r - l + 1) * (l + r) / 2;\n    }\n\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size(); s = ' ' + s;\n        vector<int> pos(n + 1, 0);\n        vector<ll> sum(n + 1, 0);\n        int id[2], cnt[2];\n        id[0] = id[1] = -1;\n        cnt[0] = cnt[1] = 0;\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j < 2; j++) {\n                while (cnt[j] <= k && id[j] <= n) {\n                    ++id[j];\n                    if (id[j] > n) break;\n                    if (s[id[j]] - '0' == j) ++cnt[j];\n                }\n            }\n            pos[i] = max(id[0], id[1]);\n            --cnt[s[i] - '0'];\n            sum[i] = sum[i - 1] + pos[i];\n        }\n        // for (auto i : pos) cout << i << ' ';\n        // cout << '\\n';\n        vector<ll> ans;\n        for (auto v : queries) {\n            int L = v[0], R = v[1];\n            ++L, ++R;\n            int pL = L, pR = R;\n            while (pL <= pR) {\n                int mid = (pL + pR) >> 1;\n                if (pos[mid] <= R + 1) pL = ++mid;\n                else pR = --mid;\n            }\n            // cout << L << ' ' << R << ' ' << pR << endl;\n            ans.push_back(1ll * (R - pR) * (R + 1) + (sum[pR] - sum[L - 1]) - sumArith(L, R));\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723951105",
    "subm_id": "1359763370"
}