{
    "username": "xin_cheng",
    "submission": "class Solution {\npublic:\n    static const int MX = 0x3f3f3f3f;\n    struct Node {\n        int l, r;\n        int val; // \u533a\u95f4\u6700\u5927\u503c\n        int tag;\n    };\n    int m;\n    vector<Node> tr;\n    void build(int u, int l, int r) {\n        tr[u] = {l, r, 0, 0};\n        if(l == r) return;\n        int mid = (l + r) >> 1;\n        build(u << 1, l, mid);\n        build(u << 1 | 1, mid + 1, r);\n    }\n    void pushup(int u) {\n        tr[u].val = max(tr[u << 1].val, tr[u << 1 | 1].val);    \n    }\n    void pushdown(int u) {\n        if(tr[u].tag) {\n            tr[u << 1].tag += tr[u].tag;\n            tr[u << 1].val = tr[u].val;\n            tr[u << 1 | 1].tag += tr[u].tag;\n            tr[u << 1 | 1].val = tr[u].val;\n            tr[u].tag = 0;\n        }\n    }\n    void update(int u, int L, int R, int val) {\n        if(L <= tr[u].l and tr[u].r <= R) {\n            tr[u].val = val;\n            tr[u].tag = 1;\n            return;\n        }\n        pushdown(u);\n        int mid = (tr[u].l + tr[u].r) >> 1;\n        if(L <= mid) update(u << 1, L, R, val);\n        if(mid < R) update(u << 1 | 1, L, R, val);\n        pushup(u);\n    }\n    int query(int u, int L, int R) {\n        if(L == R) return 0;\n        if(L <= tr[u].l and tr[u].r <= R) return tr[u].val;\n        pushdown(u);\n        int mid = (tr[u].l + tr[u].r) >> 1;\n        int res = 0;\n        if(L <= mid) res = max(res, query(u << 1, L, R));\n        if(mid < R) res = max(res, query(u << 1 | 1, L, R));\n        return res;\n    }\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        vector<int> disc;\n        for(int i = 0; i < n; i++) {\n            if(queries[i][0] == 1) disc.push_back(queries[i][1]);\n        }\n        disc.push_back(0);\n        sort(disc.begin(), disc.end());\n        this->m = disc.back();\n        tr.resize((m + 2) * 4);\n        build(1, 0, m + 1);\n        set<int> st;\n        st.insert(0);\n        vector<bool> ans;\n        for(auto q : queries) {\n            if(q[0] == 1) {\n                if(q[1] > *st.rbegin()) {\n                    int val = q[1] - *st.rbegin();\n                    int r = q[1], l = *st.rbegin();\n                    update(1, r, r, val);\n                    st.insert(q[1]);\n                }\n                else {\n                    auto it = st.upper_bound(q[1]);\n                    int r = *it;\n                    it--;\n                    int l = *it;\n                    update(1, q[1], q[1], q[1] - l);\n                    update(1, r, r, r - q[1]);\n                    st.insert(q[1]);\n                }\n            }\n            else {\n                int x = q[1], sz = q[2];\n                auto it = st.upper_bound(x);\n                it--;\n                int r = *it;\n                int a1 = query(1, 0, r);\n                int maxv = max(a1, x - r);\n                ans.push_back(sz <= maxv);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716652617",
    "subm_id": "534779554"
}