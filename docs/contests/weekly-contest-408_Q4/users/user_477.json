{
    "username": "pratham_gupta",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) \n    {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& inputCircles) {\n        vector<pair<pair<int, int>, int>> circlePair(inputCircles.size());\n        vector<vector<int>> graph(inputCircles.size() + 4);\n        int circleCount=inputCircles.size();\n        \n        for (int i = 0; i < circleCount; ++i) {\n            circlePair[i].first.first=inputCircles[i][0];\n            circlePair[i].first.second=inputCircles[i][1];\n            circlePair[i].second=inputCircles[i][2];\n\n            if (circlePair[i].first.first <= circlePair[i].second) {\n                graph[circleCount].push_back(i);\n                graph[i].push_back(circleCount);\n            }\n            if (X - circlePair[i].first.first <= circlePair[i].second) {\n                graph[circleCount + 2].push_back(i);\n                graph[i].push_back(circleCount + 2);\n            }\n            if (circlePair[i].first.second <= circlePair[i].second) {\n                graph[circleCount + 1].push_back(i);\n                graph[i].push_back(circleCount + 1);\n            }\n            if (Y - circlePair[i].first.second <= circlePair[i].second) {\n                graph[circleCount + 3].push_back(i);\n                graph[i].push_back(circleCount + 3);\n            }\n        }\n        \n        for (int i = 0; i < circleCount; ++i) {\n            for (int j = i + 1; j < circleCount; ++j) {\n                if (circlePair[i].second + circlePair[j].second >= sqrt(pow(circlePair[i].first.first - circlePair[j].first.first, 2) + pow(circlePair[i].first.second - circlePair[j].first.second, 2))) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int ans = 0;\n        ans = max(ans, bfs(graph, circleCount, circleCount + 1, circleCount + 2, circleCount + 4)); \n        ans = max(ans, bfs(graph, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4));\n        if (ans) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722137844",
    "subm_id": "1335775285"
}