{
    "username": "wanghaocheng",
    "submission": "class Solution {\npublic:\n    struct BIT {\n        static constexpr int LIMIT = 1 << 20;\n        vector<int> data;\n        \n        BIT(): data(LIMIT, 0) {}\n        \n        int lowbit(int x) {\n            return x - (x & (x - 1));\n        }\n        \n        void add(int x, int val) {\n            //cout << \"add \" << x << \" val = \" << val << endl;\n            if (x == 0)\n                return;\n            \n            while (x > 0) {\n                data[x] += val;\n                x -= lowbit(x);\n            }\n        }\n        \n        int query(int x) {\n            //cout << \"query \" << x;\n            if (x == 0) {\\\n                return 0;\n            }\n            int result = 0;\n            while (x < LIMIT) {\n                result += data[x];\n                x += lowbit(x);\n            }\n            \n            //cout << \" result = \" << result << endl;\n            return result;\n        }\n    };\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        auto ispeak = [&](int i) {\n            return i != 0 && i != n - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        };\n        \n        vector<int> p(n, 0);\n        BIT bit;\n        for (int i = 0; i < n; ++i) {\n            if (ispeak(i)) {\n                p[i] = 1;\n                bit.add(i + 1, 1);\n            }\n        }\n        \n        vector<int> result;\n        for (int i = 0; i < queries.size(); ++i) {\n            if (queries[i][0] == 1) {\n                if (queries[i][2] - queries[i][1] <= 1) {\n                    result.push_back(0);\n                } else {\n                    result.push_back(bit.query(queries[i][1] + 2) - bit.query(queries[i][2] + 1));\n                }\n            } else {\n                int old[3];\n                int idx = queries[i][1];\n                int v = queries[i][2];\n                \n                if (idx > 0) old[0] = p[idx - 1];\n                old[1] = p[idx];\n                if (idx < n - 1) old[2] = p[idx + 1];\n                \n                nums[idx] = v;\n                if (idx > 0) {\n                    p[idx - 1] = ispeak(idx - 1);\n                    bit.add(idx, p[idx - 1] - old[0]);\n                }\n                \n                p[idx] = ispeak(idx);\n                bit.add(idx + 1, p[idx] - old[1]);\n                \n                if (idx < n - 1) {\n                    p[idx + 1] = ispeak(idx + 1);\n                    bit.add(idx + 2, p[idx + 1] - old[2]);\n                }\n            }\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": 1718507983.0
}