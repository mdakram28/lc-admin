{
    "username": "Nishu__one8",
    "submission": "#define ll int\nint M = 1e9+7; \nstruct Node{\n int l1,l2,r1,r2;\n\n Node(){\n  l1= 0; // l,r\n  l2= 0;  // l,r-1\n  r1= 0;  // l+1, r\n  r2= 0;  // l+1,r-1\n }\n\n Node(int l1,int l2,int r1,int r2){\n  this->l1= l1;\n  this->l2= l2;\n  this->r1= r1;\n  this->r2= r2;\n }\n};\n\nclass SegementTree{\n  \n  public:\n    vector<Node> tree;\n\n  SegementTree(int n){\n    tree.resize(4*n+4);\n  }\n\n    Node Combine(Node &a, Node &b){\n        Node ans(0,0,0,0);\n         ans.l2 = max({a.l2+ b.l2, a.l2+ b.r2 , a.l1+ b.r2}); \n         ans.r1 = max({a.r1+ b.r1, a.r2+ b.r1 , a.r2+ b.l1}); \n         ans.r2 = max({a.r2+ b.r2, a.r2+ b.l2 , a.r1+ b.r2}); \n          ans.l1 = max({a.l1+ b.r1, a.l2+ b.l1}); \n         ans.l1%=M;\n         ans.l2%=M;\n         ans.r1%=M;\n         ans.r2%=M;\n       return ans; \n    }\n    \n  void Build(ll node,ll st,ll end,vector<ll> &a){\n    if(st== end){\n      tree[node].l1 = a[st];\n      tree[node].l2 = 0;\n      tree[node].r1 = 0;\n      tree[node].r2 = 0;\n      return;\n    }\n\n    ll mid = (st+ end)>>1;\n    Build(2*node,st,mid,a);\n    Build(2*node+1,mid+1,end,a);\n\n    tree[node] = Combine(tree[2*node],tree[2*node+1]);\n  } \n\n\n  Node Query(ll node,ll st,ll end,ll l,ll r){\n    if(st>r || end<l) \n       return Node(0,0,0,0);\n    \n    if(l<=st && r>=end) \n       return tree[node];\n\n     ll mid = (st+end)>>1;\n     Node q1 = Query(2*node,st,mid,l,r);    \n     Node q2 = Query(2*node+1,mid+1,end,l,r);    \n\n    return Combine(q1,q1);\n  }\n\n  void PointUpdate(ll node,ll st,ll end,ll ind,ll val,vector<ll> &a){\n      if(st==end){\n        a[st]= val;\n        tree[node].l1= val;\n        tree[node].l2 = 0;\n        tree[node].r1 = 0;\n        tree[node].r2 = 0;\n        return;\n    }  \n    ll mid = (st+end)>>1;\n\n  if(mid>=ind)\n    PointUpdate(2*node,st,mid,ind,val,a);\n  else\n    PointUpdate(2*node+1,mid+1,end,ind,val,a);\n\n    tree[node] = Combine(tree[2*node],tree[2*node+1]);\n  }\n\n};\nclass Solution {\npublic:\nint maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n    int M = 1e9+7;    \n    int n = nums.size();\n    SegementTree st(n+1);\n    st.Build(1,0,n-1,nums);\n\n    int ans=0;\n    for(auto it: queries){\n       st.PointUpdate(1,0,n-1,it[0],it[1],nums);\n       // Node t = st.Query(1,0,n-1,0,n-1);\n       Node t = st.tree[1]; \n       int tot=max({t.l1,t.l2,t.r1,t.r2});\n        // cout<<tot<<'\\n';\n       ans = (ans+ tot+ 0LL)%M;     \n    }\n\n    return ans;\n}\n};",
    "submit_ts": 1716694511.0
}