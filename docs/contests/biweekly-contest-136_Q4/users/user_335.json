{
    "username": "ou-hai-ziJHu23dNZ",
    "submission": "class Solution {\n    private List<Integer>[] matrix;\n\n    private int[] dp;\n\n    private int[] ans;\n\n    public int[] timeTaken(int[][] edges) {\n        // \u7ed9\u4f60\u4e00\u68f5 \u65e0\u5411 \u6811\uff0c\u6811\u4e2d\u8282\u70b9\u4ece 0 \u5230 n - 1 \u7f16\u53f7\u3002\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n - 1 \u7684\u4e8c\u7ef4\u6574\u6570\u6570\u7ec4 edges \uff0c\u5176\u4e2d edges[i] = [ui, vi] \u8868\u793a\u8282\u70b9 ui \u548c vi \u5728\u6811\u4e2d\u6709\u4e00\u6761\u8fb9\u3002\n        //\n        //\u4e00\u5f00\u59cb\uff0c\u6240\u6709 \u8282\u70b9\u90fd \u672a\u6807\u8bb0 \u3002\u5bf9\u4e8e\u8282\u70b9 i \uff1a\n        //\n        //\u5f53 i \u662f\u5947\u6570\u65f6\uff0c\u5982\u679c\u65f6\u523b x - 1 \u8be5\u8282\u70b9\u6709 \u81f3\u5c11 \u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48\u8282\u70b9 i \u4f1a\u5728\u65f6\u523b x \u88ab\u6807\u8bb0\u3002\n        //\u5f53 i \u662f\u5076\u6570\u65f6\uff0c\u5982\u679c\u65f6\u523b x - 2 \u8be5\u8282\u70b9\u6709 \u81f3\u5c11 \u4e00\u4e2a\u76f8\u90bb\u8282\u70b9\u5df2\u7ecf\u88ab\u6807\u8bb0\u4e86\uff0c\u90a3\u4e48\u8282\u70b9 i \u4f1a\u5728\u65f6\u523b x \u88ab\u6807\u8bb0\u3002\n        //\u8bf7\u4f60\u8fd4\u56de\u4e00\u4e2a\u6570\u7ec4 times \uff0c\u8868\u793a\u5982\u679c\u4f60\u5728\u65f6\u523b t = 0 \u6807\u8bb0\u8282\u70b9 i \uff0c\u90a3\u4e48\u65f6\u523b times[i] \u65f6\uff0c\u6811\u4e2d\u6240\u6709\u8282\u70b9\u90fd\u4f1a\u88ab\u6807\u8bb0\u3002\n        //\n        //\u8bf7\u6ce8\u610f\uff0c\u6bcf\u4e2a times[i] \u7684\u7b54\u6848\u90fd\u662f\u72ec\u7acb\u7684\uff0c\u5373\u5f53\u4f60\u6807\u8bb0\u8282\u70b9 i \u65f6\uff0c\u6240\u6709\u5176\u4ed6\u8282\u70b9\u90fd\u672a\u6807\u8bb0\u3002\n        // \u8ba1\u7b97\u6807\u8bb0\u5404\u4e2a\u70b9\uff0c\u8513\u5ef6\u7684\u65f6\u95f4\n        int n = edges.length + 1;\n        // n\u4e2a\u8282\u70b9\n        int[] times = new int[n];\n        // \u6bcf\u4e2a\u65b9\u5411\uff0c\u90fd\u53ef\u4ee5\u8ba1\u7b97\u51fa\uff0c\u8fd9\u4e2a\u65b9\u5411\u540e\uff0cx\u79d2\uff0c\u53ef\u4ee5\u8513\u5ef6\u5230\u7684\u8282\u70b9\n        matrix = new List[n];\n        for (int i = 0; i < n; i++) {\n            matrix[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            matrix[edge[0]].add(edge[1]);\n            matrix[edge[1]].add(edge[0]);\n        }\n        dp = new int[n];\n        dfs(0, 0);\n        // \u8ba1\u7b97\u6bcf\u4e2a\u8282\u70b9\u7684\u65f6\u95f4\n        ans = new int[n];\n        dfs2(0, 0, 0);\n        return ans;\n    }\n\n    private void dfs2(int root, int pre, int other) {\n        int preCost = pre % 2 == 0 ? other + 2 : other + 1;\n        if (root == 0) {\n            preCost = 0;\n        }\n        ans[root] = Math.max(dp[root], preCost);\n        // \u5b69\u5b50\u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\n        int[] left;\n        int[] right;\n        if (root == 0) {\n            left = new int[matrix[root].size()];\n            right = new int[matrix[root].size()];\n        } else {\n            left = new int[matrix[root].size() - 1];\n            right = new int[matrix[root].size() - 1];\n        }\n        int leftIdx = 0;\n        int rightIdx = right.length - 1;\n        for (int i = 0; i < matrix[root].size(); i++) {\n            Integer integer = matrix[root].get(i);\n            if (integer == pre) {\n                continue;\n            }\n            int add = integer % 2 == 0 ? 2 : 1;\n            left[leftIdx] = Math.max(leftIdx == 0 ? 0 : left[leftIdx - 1], dp[integer] + add);\n            leftIdx++;\n        }\n        for (int i = matrix[root].size() - 1; i >= 0; i--) {\n            Integer integer = matrix[root].get(i);\n            if (integer == pre) {\n                continue;\n            }\n            int add = integer % 2 == 0 ? 2 : 1;\n            right[rightIdx] = Math.max(rightIdx == right.length - 1 ? 0 : right[rightIdx + 1], dp[integer] + add);\n            rightIdx--;\n        }\n        int idx = 0;\n        for (int i = 0; i < matrix[root].size(); i++) {\n            Integer integer = matrix[root].get(i);\n            if (integer == pre) {\n                continue;\n            }\n            int maxLeft = idx == 0 ? 0 : left[idx - 1];\n            int maxRight = idx == left.length - 1 ? 0 : right[idx + 1];\n            int max = Math.max(maxLeft, maxRight);\n            dfs2(integer, root, Math.max(max, preCost));\n            idx++;\n        }\n    }\n\n    private int dfs(int root, int pre) {\n        int max = 0;\n        for (Integer integer : matrix[root]) {\n            if (integer == pre) {\n                continue;\n            }\n            if (integer % 2 == 1) {\n                max = Math.max(max, dfs(integer, root) + 1);\n            } else {\n                max = Math.max(max, dfs(integer, root) + 2);\n            }\n        }\n        dp[root] = max;\n        return max;\n    }\n}",
    "submit_ts": "1722699403",
    "subm_id": "552275480"
}