{
    "username": "Anass",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        # keep the 3 bests\n        # from the back make it select the 3 best along the other axis\n        # then for every pair check the 3 best and select accordingly\n        # n <-> i\n        # m <-> j\n        # board[i][j]\n        n = len(board)\n        m = len(board[0])\n        newBoard = []\n        for row in board:\n            sortedRow = sorted(\n                [(value, index) for index, value in enumerate(row)], reverse=True\n            )\n            newBoard.append(sortedRow[:3])\n\n        # (value, label)\n        bests = []\n        current = []\n        for i in range(n - 1, -1, -1):\n            current = sorted(current + newBoard[i], reverse=True)\n            markedLabels = set()\n            new = []\n            for value, label in current:\n                if label not in markedLabels and len(new) < 3:\n                    new.append((value, label))\n                markedLabels.add(label)\n            current = new\n            bests.append(current)\n\n        # compute the result with 2 lups\n        def f(a, b, c):\n            # print(a,b,c,\"gg\")\n            r = -float(\"inf\")\n            for i in range(3):\n                for j in range(3):\n                    for k in range(3):\n                        if len({a[i][1], b[j][1], c[k][1]}) == 3:\n                            r = max(r, a[i][0] + b[j][0] + c[k][0])\n            return r\n        # print(newBoard)\n        # print(bests)\n        bests.reverse()\n        result = -float(\"inf\")\n        for i in range(n - 2):\n            for j in range(i + 1, n - 1):\n                result = max(result, f(newBoard[i], newBoard[j], bests[j + 1]))\n\n        return result\n",
    "submit_ts": "1723909162",
    "subm_id": "1359181944"
}