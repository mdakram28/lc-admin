{
    "username": "wddd",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int offset = 1;\n        while (offset < nums.length) {\n            offset <<= 1;\n        }\n\n        int[] tree = new int[offset * 2];\n\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                tree[i + offset] = 1;\n            }\n        }\n        for (int i = offset - 1; i > 0; i--) {\n            tree[i] = tree[i * 2] + tree[i * 2 + 1];\n        }\n\n        List<Integer> result = new ArrayList<>();\n\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                result.add(query(tree, q[1] + 1, q[2] - 1, offset));\n            } else {\n                nums[q[1]] = q[2];\n                \n                checkAndUpdate(tree, nums, offset, q[1] - 1);\n                checkAndUpdate(tree, nums, offset, q[1]);\n                checkAndUpdate(tree, nums, offset, q[1] + 1);\n                \n//                if (q[1] > 0 && q[1] < nums.length - 1) {\n//                    if (tree[q[1] + offset] == 1 && (nums[q[1]] <= nums[q[1] - 1] || nums[q[1]] <= nums[q[1] + 1])) {\n//                        update(tree, q[1], 0, offset);\n//                    }\n//                    if (tree[q[1] + offset] == 0 && (nums[q[1]] > nums[q[1] - 1] && nums[q[1]] > nums[q[1] + 1])) {\n//                        update(tree, q[1], 0, offset);\n//                    }\n//                }\n//                \n//                update(tree, q[1], q[2], offset);\n            }\n        }\n\n        return result;\n    }\n\n    private void checkAndUpdate(int[] tree, int[] nums, int offset, int ind) {\n        if (ind <= 0 || ind >= nums.length - 1) {\n            return;\n        }\n        \n        if (tree[ind + offset] == 1 && (nums[ind] <= nums[ind - 1] || nums[ind] <= nums[ind + 1])) {\n            update(tree, ind, 0, offset);\n        }\n        if (tree[ind + offset] == 0 && (nums[ind] > nums[ind - 1] && nums[ind] > nums[ind + 1])) {\n            update(tree, ind, 1, offset);\n        }\n    }\n\n    private void update(int[] tree, int ind, int val, int offset) {\n        ind += offset;\n        tree[ind] = val;\n        \n        ind >>= 1;\n        while (ind > 0) {\n            tree[ind] = tree[ind * 2] + tree[ind * 2 + 1];\n            ind >>= 1;\n        }\n    }\n\n    private int query(int[] tree, int left, int right, int offset) {\n        left += offset;\n        right += offset;\n\n        int result = 0;\n        while (left <= right) {\n            if (left % 2 == 1) {\n                result += tree[left];\n                left++;\n            }\n            if (right % 2 == 0) {\n                result += tree[right];\n                right--;\n            }\n            left >>= 1;\n            right >>= 1;\n        }\n\n        return result;\n    }\n}",
    "submit_ts": "1718506781",
    "subm_id": "1289630779"
}