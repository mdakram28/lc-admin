{
    "username": "Rhacoal",
    "submission": "struct segtree {\n    struct node {\n        int l, r;\n        int sum;\n    };\n    vector<node> nodes{node{}};\n    segtree() {\n        nodes.reserve(500001);\n    }\n    int get(int &n) {\n        if (n != 0) {\n            return n;\n        }\n        int r = nodes.size();\n        n = r;\n        nodes.push_back(node{});\n        return r;\n    }\n    static constexpr int s0 = 0, t0 = 100001;\n    int query(int from, int to, int p = 0, int s = s0, int t = t0) {\n        if (from <= s && to >= t) {\n            return nodes[p].sum;\n        }\n        int ret{};\n        int m = (t - s) / 2 + s;\n        if (from < m && nodes[p].l) {\n            ret += query(from, to, nodes[p].l, s, m);\n        }\n        if (to > m && nodes[p].r) {\n            ret += query(from, to, nodes[p].r, m, t);\n        }\n        return ret;\n    }\n    void update0(int i, int d, int p = 0, int s = s0, int t = t0) {\n        nodes[p].sum += d;\n        if (t - s == 1) {\n            return;\n        }\n        int m = (t - s) / 2 + s;\n        if (i < m) {\n            update0(i, d, get(nodes[p].l), s, m);\n        } else {\n            update0(i, d, get(nodes[p].r), m, t);\n        }\n    }\n    void update(int i, int d) {\n        if (d) {\n            update0(i, d);\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        segtree st;\n        int n = nums.size();\n        vector<int> peek(n, 0);\n        auto is_peek = [&](int i) {\n            if (i == 0 || i == n - 1) {\n                return false;\n            }\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                return true;\n            }\n            return false;\n        };\n        for (int i = 1; i + 1 < n; ++i) {\n            if (is_peek(i)) {\n                peek[i] = true;\n                st.update(i, 1);\n            }\n        }\n        vector<int> ret{};\n        for (auto &q : queries) {\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                if (r - l <= 1) {\n                    ret.push_back(0);\n                } else {\n                    int c = st.query(l + 1, r);\n                    ret.push_back(c);\n                }\n            } else {\n                int i = q[1], v = q[2];\n                nums[i] = v;\n                if (i > 0) {\n                    st.update(i - 1, is_peek(i - 1) - peek[i - 1]);\n                    peek[i - 1] = is_peek(i - 1);\n                }\n                if (i + 1 < n) {\n                    st.update(i + 1, is_peek(i + 1) - peek[i + 1]);\n                    peek[i + 1] = is_peek(i + 1);\n                }\n                st.update(i, is_peek(i) - peek[i]);\n                peek[i] = is_peek(i);\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1718508005",
    "subm_id": "1289669018"
}