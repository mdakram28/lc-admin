{
    "username": "ayush91003",
    "submission": "class Solution {\n    long long count = 0;\n\n    void divide_n_conquer(int i, int j, std::vector<int>& nums, std::vector<int>& target) {\n        if (i > j) return;\n\n        // Calculate the required operations for the current range [i, j]\n        int min_delta = INT_MAX;\n        for (int k = i; k <= j; ++k) {\n            min_delta = std::min(min_delta, std::abs(nums[k] - target[k]));\n        }\n\n        // Update count based on the minimum delta found\n        count += min_delta;\n\n        // Update nums array based on the minimum delta found\n        for (int k = i; k <= j; ++k) {\n            if (nums[k] < target[k]) {\n                nums[k] += min_delta;\n            } else {\n                nums[k] -= min_delta;\n            }\n        }\n\n        // Further divide the array into subranges\n        int a = i;\n        int b = a;\n\n        while (b <= j) {\n            if (nums[a] == target[a]) {\n                a++;\n                b++;\n                continue;\n            } else if (nums[a] < target[a]) {\n                while (b <= j && nums[b] < target[b]) {\n                    b++;\n                }\n                divide_n_conquer(a, b - 1, nums, target);\n                a = b;\n            } else {\n                while (b <= j && nums[b] > target[b]) {\n                    b++;\n                }\n                divide_n_conquer(a, b - 1, nums, target);\n                a = b;\n            }\n        }\n    }\n\npublic:\n    long long minimumOperations(std::vector<int>& nums, std::vector<int>& target) {\n        int n = nums.size();\n        int i = 0, j = 0;\n\n        while (j < n) {\n            if (nums[i] == target[i]) {\n                i++;\n                j++;\n                continue;\n            } else if (nums[i] < target[i]) {\n                while (j < n && nums[j] < target[j]) {\n                    j++;\n                }\n                divide_n_conquer(i, j - 1, nums, target);\n                i = j;\n            } else {\n                while (j < n && nums[j] > target[j]) {\n                    j++;\n                }\n                divide_n_conquer(i, j - 1, nums, target);\n                i = j;\n            }\n        }\n\n        return count;\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n// class Solution {\n//     long long count = 0;\n\n//     void divide_n_conquer(int i, int j, std::vector<int>& nums, std::vector<int>& target) {\n//         // if (i > j) return;\n//         if(i == j) {\n//             count++;\n//             return;\n//         }\n\n//         // // Calculate the required operations for the current range [i, j]\n//         // int min_delta = INT_MAX;\n//         // for (int k = i; k <= j; ++k) {\n//         //     min_delta = std::min(min_delta, std::abs(nums[k] - target[k]));\n//         // }\n//         // int t = i;\n//         int md = INT_MAX;\n//         if(nums[i] < target[j]){\n//             for(int t = i;t <=j; t++){\n//                 md = min(md, abs(nums[i] - target[i]));\n//             }\n//             for(int t = i; t <= j; t++){\n//                 nums[i] = nums[i] + md;\n//             }\n//         }\n//         else{\n//             for(int t = i; t <= j; t++){\n//                 md = min(md, abs(nums[i] - target[i]));\n//             }\n//             for(int t = i; t <= j; t++){\n//                 nums[i] = nums[i] - md;\n//             }\n//         }\n\n//         int a = i;\n//         int b = a;\n\n//         while (b <= j) {\n//             if (nums[a] == target[a]) {\n//                 a++;\n//                 b++;\n//                 continue;\n//             } else if (nums[a] < target[a]) {\n//                 while (b < j+1 && nums[b] < target[b]) {\n//                     b++;\n//                 }\n//                 divide_n_conquer(a, b - 1, nums, target);\n//                 a = b;\n//             } else {\n//                 while (b < j+1 && nums[b] > target[b]) {\n//                     b++;\n//                 }\n//                 divide_n_conquer(a, b - 1, nums, target);\n//                 a = b;\n//             }\n//         }\n//     }\n\n// public:\n//     long long minimumOperations(std::vector<int>& nums, std::vector<int>& target) {\n//         int n = nums.size();\n//         int i = 0, j = 0;\n\n//         while (j < n) {\n//             if (nums[i] == target[i]) {\n//                 i++;\n//                 j++;\n//                 continue;\n//             } else if (nums[i] < target[i]) {\n//                 while (j < n && nums[j] < target[j]) {\n//                     j++;\n//                 }\n//                 divide_n_conquer(i, j - 1, nums, target);\n//                 i = j;\n//             } else {\n//                 while (j < n && nums[j] > target[j]) {\n//                     j++;\n//                 }\n//                 divide_n_conquer(i, j - 1, nums, target);\n//                 i = j;\n//             }\n//         }\n\n//         return count;\n//     }\n// };\n\n\n\n\n\n\n\n\n\n\n\n\n\n// // class Solution {\n// //     long long count = 0;\n\n\n\n\n\n// //     void divide_n_conquer(int i, int j, vector<int>& nums, vector<int>& target){\n// //         if(i == j){\n// //             count += abs(nums[i] - target[i]);\n// //         }\n// //         // calculations...\n\n\n\n// //         // after partition... \n\n        \n\n\n\n// //     }\n// // public:\n// //     long long minimumOperations(vector<int>& nums, vector<int>& target) {\n// //         // initial partition\n\n// //         int i = 0, j = i;\n// //         while(j < n){\n// //             if(nums[i] == target[i]){\n// //                 i++;\n// //                 j++;\n// //                 continue;\n// //             }\n// //             else if(nums[i] < target[i]){\n                \n// //                 while(j < n && nums[j] < target[j]){\n// //                     j++;\n// //                 }\n// //                 divide_n_conquer(i,j-1,nums,target);\n// //                 i = j;\n// //             }\n// //             else{\n// //                 while( j < n && nums[j] > target[j]){\n// //                     j++;\n// //                 }\n// //                 divide_n_conquer(i,j-1, nums, target);\n// //                 i = j;\n// //             }\n// //         }\n\n        \n        \n// //     }\n// // };",
    "submit_ts": "1721533688",
    "subm_id": "1328014485"
}