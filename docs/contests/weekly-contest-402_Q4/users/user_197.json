{
    "username": "zronghui",
    "submission": "class SegmentTree:\n    def __init__(self, op=max, e=lambda: -float(\"inf\"), a=[]):\n\n        self.n = n = len(a)\n        self.op, self.e = op, e\n        self.leafN = 1\n        while n > self.leafN:\n            self.leafN <<= 1\n        self.offset = self.leafN\n\n        self.x = [e for _ in range(self.leafN << 1)]\n        if a:\n            self.x[self.offset : self.offset + n] = a[:]\n            l = self.offset\n            r = l + self.leafN\n            while 1 < l:\n                for i in range(l, r, 2):\n                    self.x[i >> 1] = op(self.x[i], self.x[i + 1])\n                l >>= 1\n                r >>= 1\n\n    def get_value(self, i):\n\n        return self.x[self.offset + i]\n\n    def tolist(self):\n        res = []\n        for i in range(self.n):\n            res.append(self.get_value(i))\n        return res\n\n    def set_value(self, i, val):\n\n        i += self.offset\n        self.x[i] = val\n        while 1 < i:\n            i >>= 1\n            j = i << 1\n            self.x[i] = self.op(self.x[j], self.x[j + 1])\n\n    def prod(self, l, r):\n\n        l += self.offset\n        r += self.offset\n        val_l, val_r = self.e, self.e\n        while l < r:\n            if l & 1:\n                val_l = self.op(val_l, self.x[l])\n                l += 1\n            if r & 1:\n                r -= 1\n                val_r = self.op(self.x[r], val_r)\n            l >>= 1\n            r >>= 1\n        return self.op(val_l, val_r)\n\n    def __setitem__(self, k: int, key):\n        self.set_value(k, key)\n\n    def __getitem__(self, k):\n\n        if isinstance(k, slice):\n            l = k.start if k.start is not None else 0\n            r = k.stop if k.stop is not None else self.n - 1\n            if l < 0:\n                l += self.n\n            if r < 0:\n                r += self.n\n            return self.prod(l, r + 1)\n        if k < 0:\n            k += self.n\n        return self.get_value(k)\n\n    def __len__(self):\n        return self.n\n\n    def __str__(self):\n        return str(self.tolist())\n\n    def __bool__(self):\n        return self.n != 0\n\n    def __repr__(self):\n        return f\"SegmentTree({self.tolist()})\"\n\n\nfrom typing import List\n\n\nclass Solution:\n    def countOfPeaks(self, a: List[int], qs: List[List[int]]) -> List[int]:\n        n = len(a)\n        b = [0] * n\n        for i in range(1, n - 1):\n            if a[i] > a[i - 1] and a[i] > a[i + 1]:\n                b[i] = 1\n        st = SegmentTree(op=lambda x, y: x + y, e=0, a=b)\n        res = []\n        for t, l, r in qs:\n            if t == 1:\n                res.append(st.prod(l + 1, r))\n            else:\n                i, v = l, r\n                a[i] = v\n                for j in range(i - 1, i + 1 + 1):\n                    if not 0 <= j < n:\n                        continue\n                    if j - 1 >= 0 and j + 1 < n and a[j] > a[j - 1] and a[j] > a[j + 1]:\n                        st[j] = 1\n                    else:\n                        st[j] = 0\n        return res\n",
    "submit_ts": 1718506452.0
}