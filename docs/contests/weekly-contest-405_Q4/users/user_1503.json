{
    "username": "josh7611",
    "submission": "class Solution {\n    Integer[] dp;\n    class TrieNode {\n        TrieNode[] next = new TrieNode[26];\n        int val = Integer.MAX_VALUE;\n\n        public void add(String word, int cost) {\n            TrieNode node = this;\n            for (char c: word.toCharArray()) {\n                if (node.next[c - 'a'] == null) {\n                    node.next[c - 'a'] = new TrieNode();\n                }\n                // System.out.print(c + \", \");\n                node = node.next[c - 'a'];\n            }\n            \n            node.val = Math.min(cost, node.val);\n            // System.out.println(word.charAt(word.length() - 1) + \" == \" + node.val);\n        }\n\n        public int find(String word, int index) {\n            // System.out.println(\"find from == \" + from); \n            int from = index;\n            if (from == word.length()) {\n                return 0;\n            }\n            if (dp[from] != null) {\n                // System.out.println(from + \" val == \" + dp[from]);\n                return dp[index];\n            }\n            TrieNode node = this;\n            int minCost = Integer.MAX_VALUE;\n            for (int i = from; i < word.length(); ++i) {\n                char c = word.charAt(i);\n                from++;\n                if (node.next[c - 'a'] == null) {\n                    // System.out.print(c + \" == null \");\n                    break;\n                }\n                node = node.next[c - 'a'];\n\n                // if (node.val > res) {\n                //     break;\n                // }\n\n                if (node.val != Integer.MAX_VALUE) {\n                    // System.out.print(c + \" find \");\n                    int find = this.find(word, from);\n                    if (find != -1) {\n                        minCost = Math.min(minCost, node.val + find);\n                    }\n                }\n              \n                // System.out.println(c + \", \" + node.val);\n            }\n            // System.out.print(\"\\n\");\n            \n            return dp[index] = (minCost == Integer.MAX_VALUE? -1: minCost);\n        }\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        \n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; ++i) {\n            root.add(words[i], costs[i]);\n        }\n\n        dp = new Integer[target.length() + 1];\n        return root.find(target, 0);\n    }\n}",
    "submit_ts": "1720323145",
    "subm_id": "1312368412"
}