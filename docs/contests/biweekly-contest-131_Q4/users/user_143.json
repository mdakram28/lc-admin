{
    "username": "zhou-zhou-36",
    "submission": "struct SegTree\n{\n    //\u533a\u95f4\u4fee\u6539assignment,\u533a\u95f4\u67e5\u8be2max\n    int n;\n    vector<int> t;\n    int h;\n    vector<int> d;\n    vector<int> len;\n    void Build(int size)\n    {\n        n=size;\n        h=sizeof(int)*8-__builtin_clz(n);\n        t.assign(n*2,0);\n        d.assign(n,0);\n        len.assign(n*2,1);\n        for(int i=n-1;i>=0;--i)\n        {\n            len[i]=len[i<<1]*2;\n        }\n    }\n    void Build(vector<int> &vi)\n    {\n        n=vi.size();\n        h=sizeof(int)*8-__builtin_clz(n);\n        t.assign(n*2,0);\n        d.assign(n,0);\n        len.assign(n*2,1);\n        for(int i=0;i<n;++i)\n        {\n            t[i+n]=vi[i];\n        }\n        for(int i=n-1;i>0;--i)\n        {\n            t[i]=max(t[i<<1],t[i<<1|1]);\n            len[i]=len[i<<1]*2;\n        }\n    }\n    void Apply(int p,int val)\n    {\n        t[p]=val;\n        if(p<n) d[p]=val;\n    }\n    void PushUp(int p)\n    {\n        while(p>1)\n        {\n            p>>=1;\n            if(d[p]==0) t[p]=max(t[p<<1],t[p<<1|1]);\n            else t[p]=d[p];\n        }\n    }\n    void PushDown(int p)\n    {\n        for(int s=h;s>0;--s)\n        {\n            int i=p>>s;\n            if(d[i]!=0)\n            {\n                Apply(i<<1,d[i]);\n                Apply(i<<1|1,d[i]);\n            }\n            d[i]=0;\n        }\n    }\n    void Modify(int le,int ri,int val)\n    {\n        le+=n;\n        ri+=n;\n        PushDown(le);\n        PushDown(ri-1);\n        for(int l=le,r=ri;l<r;l>>=1,r>>=1)\n        {\n            if(l&1) Apply(l++,val);\n            if(r&1) Apply(--r,val);\n        }\n        PushUp(le);\n        PushUp(ri-1);\n    }\n    int Query(int l,int r)\n    {\n        l+=n;\n        r+=n;\n        PushDown(l);\n        PushDown(r-1);\n        int ans=INT_MIN;\n        for(;l<r;l>>=1,r>>=1)\n        {\n            if(l&1) ans=max(ans,t[l++]);\n            if(r&1) ans=max(t[--r],ans);\n        }\n        return ans;\n    }\n};\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        int maxv=0;\n        for(vector<int> &q:queries)\n        {\n            maxv=max(maxv,q[1]);\n        }\n        vector<int> vt(maxv+1,maxv);\n        SegTree tr;\n        tr.Build(vt);\n        map<int,int> mseg;\n        mseg[maxv]=0;\n        // mseg[maxv+2]=maxv+2;\n        for(vector<int> &q:queries)\n        {\n            if(q[0]==1)\n            {\n                int mid=q[1];\n                auto it=mseg.lower_bound(mid);\n                int le=it->second,ri=it->first;\n                tr.Modify(le,mid,mid-le);\n                tr.Modify(mid,ri+1,ri+1-mid);\n                mseg[mid-1]=le;\n                it->second=mid;\n            }\n            else\n            {\n                bool tans=false;\n                auto it=mseg.lower_bound(q[1]-1);\n                if(q[1]-1-it->second+1>=q[2])\n                {\n                    tans=true;\n                }\n                else if(tr.Query(0,it->second)>=q[2])\n                {\n                    tans=true;\n                }\n                ans.push_back(tans);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716650747",
    "subm_id": "534772257"
}