{
    "username": "yashkanojiya08",
    "submission": "class Solution {\npublic:\n        struct TreNode {\n            unordered_map<char,TreNode*> child;\n            vector<pair<int,int>> wordEnd;\n        };\n    \n    class Tre{\n        public:\n        TreNode* root;\n        Tre(){root = new TreNode();}\n        \n        void insertNode(string & word,int idx,int cost){\n            TreNode* node = root;\n            for(char c:word){\n                if(!node->child.count(c))\n                    node->child[c] = new TreNode();\n                \n                node=node->child[c];\n            }\n            node->wordEnd.push_back({idx,cost});\n        }\n    };\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        vector<int> yk(n+1,INT_MAX);\n        yk[0]=0;\n        \n        Tre tre;\n        for(int i=0; i<words.size();++i){\n            tre.insertNode(words[i],i,costs[i]);\n        }\n        for(int i=0;i<n;++i){\n            if(yk[i] == INT_MAX)\n                continue;\n            \n            TreNode* node=tre.root;\n            \n            for(int j=i;j<n;++j){\n                if(!node->child.count(target[j]))\n                    break;\n                \n                node=node->child[target[j]];\n                for(auto &p:node->wordEnd){\n                    int wordidx=p.first;\n                    int wordcost=p.second;\n                    int leng=words[wordidx].size();\n                    if(i+leng <=n){\n                        yk[i+leng]=min(yk[i+leng],yk[i]+wordcost);\n                    }\n                }\n            }\n        }\n        return yk[n] == INT_MAX ?-1 :yk[n];\n    }\n};",
    "submit_ts": "1720322530",
    "subm_id": "1312352380"
}