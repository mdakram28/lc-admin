{
    "username": "yzkkai",
    "submission": "const int mod = 1e9 + 7;\n\nclass Solution {\npublic:\n    struct segTree {\n        int l, r, mid;\n        long long sumlr = 0, suml = 0, sumr = 0, sum = 0;\n        segTree *lson = nullptr, *rson = nullptr;\n\n        segTree(int _l, int _r) : l(_l), r(_r), mid((l + r) >> 1) {}\n        \n        void pull() {\n            sum = max(lson->sumr + rson->sum, lson->sum + rson->suml) % mod;\n            \n            suml = max(lson->sumlr + rson->sum, lson->suml + rson->suml) % mod;\n            \n            sumr = max(lson->sumr + rson->sumr, lson->sum + rson->sumlr) % mod;\n            \n            sumlr = max(lson->sumlr + rson->sumr, lson->suml + rson->sumlr) % mod;\n            \n            return;\n        }\n        \n        void build(const vector<int> &nums) {\n            if (r - l == 1) {\n                sumlr = max(0, nums[l]);\n                return;\n            }\n            \n            lson = new segTree(l, mid);\n            rson = new segTree(mid, r);\n            \n            lson->build(nums);\n            rson->build(nums);\n            \n            pull();\n            return;\n        }\n        \n        void modify(int pos, int val) {\n            if (r - l == 1) {\n                sumlr = max(0, val);\n                return;\n            }\n            \n            if (pos < mid)\n                lson->modify(pos, val);\n            if (pos >= mid)\n                rson->modify(pos, val);\n            \n            pull();\n            return;\n        }\n    };\n    \n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        segTree *root = new segTree(0, n);\n        root->build(nums);\n        \n        long long ans = 0;\n        for (const auto &q : queries) {\n            root->modify(q[0], q[1]);\n            ans = (ans + root->sumlr) % mod;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1716692858.0
}