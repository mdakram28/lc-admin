{
    "username": "Pranay__01",
    "submission": "class Trie{\n    Map<Character, Trie> childs;\n    boolean isEnd;\n    int cost;\n    Trie(){\n        childs = new HashMap<>();\n        isEnd = false;\n        cost = Integer.MAX_VALUE;\n    }\n}\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = words.length; \n        Trie root = new Trie();\n        for(int i = 0; i < n; i++){\n            Trie curr = root;\n            for(int j = words[i].length() - 1; j > -1; j--){\n                char ch = words[i].charAt(j);\n                if(!curr.childs.containsKey(ch))     curr.childs.put(ch, new Trie());\n                curr = curr.childs.get(ch);\n            }\n            curr.isEnd = true;\n            curr.cost = Math.min(curr.cost, costs[i]);\n        }\n        int m = target.length(), amountReq[] = new int[m];\n        for(int i = 0; i < m; i++){\n            amountReq[i] = Integer.MAX_VALUE;\n            int j = i;\n            Trie curr = root;\n            // System.out.println(target.charAt(j));\n            while(j > -1 && curr.childs.containsKey(target.charAt(j))){\n                curr = curr.childs.get(target.charAt(j));\n                int prevAmt = j == 0? 0 : amountReq[j - 1];\n                if(curr.isEnd && prevAmt != Integer.MAX_VALUE){\n                    amountReq[i] = Math.min(amountReq[i], prevAmt + curr.cost);\n                }\n                // System.out.println(target.charAt(j));\n                j--;\n            }\n            // System.out.println(Arrays.toString(amountReq));\n        }\n        return amountReq[m - 1] == Integer.MAX_VALUE? -1 : amountReq[m - 1];\n    }\n}",
    "submit_ts": "1720324454",
    "subm_id": "1312399882"
}