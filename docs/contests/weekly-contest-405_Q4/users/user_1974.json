{
    "username": "evgenus",
    "submission": "from heapq import heappop, heappush\nfrom collections import defaultdict, deque\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def find_prefixes(self, s, start):\n        node = self.root\n        result = []\n        for i in range(start, len(s)):\n            if s[i] not in node.children:\n                break\n            node = node.children[s[i]]\n            if node.cost != float('inf'):\n                result.append((i + 1, node.cost))\n        return result\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        n = len(target)\n        pq = [(0, 0)]\n        min_cost = [float('inf')] * (n + 1)\n        min_cost[0] = 0\n\n        while pq:\n            current_cost, current_pos = heappop(pq)\n\n            if current_pos == n:\n                return current_cost\n\n            if current_cost > min_cost[current_pos]:\n                continue\n\n            for next_pos, add_cost in trie.find_prefixes(target, current_pos):\n                new_cost = current_cost + add_cost\n                if new_cost < min_cost[next_pos]:\n                    min_cost[next_pos] = new_cost\n                    heappush(pq, (new_cost, next_pos))\n\n        return -1 if min_cost[n] == float('inf') else min_cost[n]",
    "submit_ts": "1720324419",
    "subm_id": "1312399012"
}