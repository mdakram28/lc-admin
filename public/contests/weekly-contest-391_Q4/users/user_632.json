{
    "username": "cybsbbbb",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        \n        idx_list = list(range(n))\n        candidates = set()\n        candidates.add(max(idx_list, key=lambda i: [points[i][0], points[i][1]]))\n        candidates.add(max(idx_list, key=lambda i: [points[i][0], -points[i][1]]))\n        candidates.add(max(idx_list, key=lambda i: [-points[i][0], points[i][1]]))\n        candidates.add(max(idx_list, key=lambda i: [-points[i][0], -points[i][1]]))\n        candidates.add(max(idx_list, key=lambda i: [points[i][1], points[i][0]]))\n        candidates.add(max(idx_list, key=lambda i: [points[i][1], -points[i][0]]))\n        candidates.add(max(idx_list, key=lambda i: [-points[i][1], points[i][0]]))\n        candidates.add(max(idx_list, key=lambda i: [-points[i][1], -points[i][0]]))\n        candidates.add(max(idx_list, key=lambda i: points[i][1] + points[i][0]))\n        candidates.add(max(idx_list, key=lambda i: points[i][1] - points[i][0]))\n        candidates.add(max(idx_list, key=lambda i: -points[i][1] + points[i][0]))\n        candidates.add(max(idx_list, key=lambda i: -points[i][1] - points[i][0]))\n\n        def dist(i, j):\n            return abs(points[i][0] - points[j][0]) + abs(points[i][1] - points[j][1])\n        \n        def helper(idx):\n            idx_list = list(range(idx)) + list(range(idx + 1, n))\n            candidates = set()\n            candidates.add(max(idx_list, key=lambda i: [points[i][0], points[i][1]]))\n            candidates.add(max(idx_list, key=lambda i: [points[i][0], -points[i][1]]))\n            candidates.add(max(idx_list, key=lambda i: [-points[i][0], points[i][1]]))\n            candidates.add(max(idx_list, key=lambda i: [-points[i][0], -points[i][1]]))\n            candidates.add(max(idx_list, key=lambda i: [points[i][1], points[i][0]]))\n            candidates.add(max(idx_list, key=lambda i: [points[i][1], -points[i][0]]))\n            candidates.add(max(idx_list, key=lambda i: [-points[i][1], points[i][0]]))\n            candidates.add(max(idx_list, key=lambda i: [-points[i][1], -points[i][0]]))\n            candidates.add(max(idx_list, key=lambda i: points[i][1] + points[i][0]))\n            candidates.add(max(idx_list, key=lambda i: points[i][1] - points[i][0]))\n            candidates.add(max(idx_list, key=lambda i: -points[i][1] + points[i][0]))\n            candidates.add(max(idx_list, key=lambda i: -points[i][1] - points[i][0]))\n            \n            ans = 0\n            candidate_list = list(candidates)\n            for i in range(len(candidate_list)):\n                for j in range(i + 1, len(candidate_list)):\n                    ans = max(ans, dist(candidate_list[i], candidate_list[j]))\n            return ans\n        \n        return min(helper(candidate) for candidate in candidates)\n        \n        "
}