{
    "username": "_kevinyang",
    "submission": "import java.util.*;\n\nclass Solution {\n    static class PolyHash {\n        List<Long> powers;\n        List<Long> powers2;\n        List<Long> hashes;\n        List<Long> hashes2;\n        long seed = 500002961L;\n        long seed2 = 500003263L;\n        final long mod = 1000000007L;\n        final long mod2 = 998244353L;\n        List<Long> arr;\n\n        void init(long n) {\n            powers = new ArrayList<>(Collections.nCopies((int) (n + 5), 1L));\n            powers2 = new ArrayList<>(Collections.nCopies((int) (n + 5), 1L));\n            hashes = new ArrayList<>(Collections.nCopies((int) (n + 5), 0L));\n            hashes2 = new ArrayList<>(Collections.nCopies((int) (n + 5), 0L));\n\n            for (long i = 1; i <= n; i++) {\n                powers.set((int) i, (powers.get((int) (i - 1)) * seed) % mod);\n                powers2.set((int) i, (powers2.get((int) (i - 1)) * seed2) % mod2);\n            }\n            for (long i = 1; i <= n; i++) {\n                hashes.set((int) i, (hashes.get((int) (i - 1)) * seed + arr.get((int) i)) % mod);\n                hashes2.set((int) i, (hashes2.get((int) (i - 1)) * seed2 + arr.get((int) i)) % mod2);\n            }\n        }\n\n        void init(long n, String s) {\n            arr = new ArrayList<>(Collections.nCopies((int) (n + 5), 0L));\n            for (long i = 1; i <= n; i++) {\n                arr.set((int) i, (long) s.charAt((int) (i - 1)));\n            }\n            init(n);\n        }\n\n        void init(long n, List<Long> a) {\n            arr = new ArrayList<>(Collections.nCopies((int) (n + 5), 0L));\n            for (long i = 1; i <= n; i++) {\n                arr.set((int) i, a.get((int) i));\n            }\n            init(n);\n        }\n\n        int ha(long a, long b) {\n            return (int) ((a * b) % mod);\n        }\n\n        int subhash(long l, long r) {\n            long hsh = (hashes.get((int) r) - hashes.get((int) (l - 1)) * powers.get((int) (r - l + 1)) % mod + mod) % mod;\n            return (int) hsh;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Set<Integer> len = new HashSet<>();\n        for (String s : words) {\n            len.add(s.length());\n        }\n        List<Integer> lens = new ArrayList<>(len);\n        Collections.sort(lens);\n        \n        PolyHash hsh = new PolyHash();\n        int n = target.length();\n        hsh.init(n, target);\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, (int) 2e9);\n        dp[0] = 0;\n\n        Map<Integer, Integer> hm = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            String nxt = words[i];\n            PolyHash hs = new PolyHash();\n            hs.init(nxt.length(), nxt);\n            int m = nxt.length();\n            int hash = hs.subhash(1, m);\n            hm.put(hash, hm.getOrDefault(hash, costs[i]));\n            if (hm.containsKey(hash)) {\n                hm.put(hash, Math.min(hm.get(hash), costs[i]));\n            } else {\n                hm.put(hash, costs[i]);\n            }\n        }\n\n        for (int i = 1; i <= n; i++) {\n            for (int l : lens) {\n                if (i < l) break;\n                int hash = hsh.subhash(i - l + 1, i);\n                if (hm.containsKey(hash)) {\n                    dp[i] = Math.min(dp[i], dp[i - l] + hm.get(hash));\n                }\n            }\n        }\n\n        if (dp[n] > 1e9) return -1;\n        return dp[n];\n    }\n}\n",
    "submit_ts": "1720320950",
    "subm_id": "1312309247"
}