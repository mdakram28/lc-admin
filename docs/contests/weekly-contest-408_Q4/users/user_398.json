{
    "username": "VinnyOnLC",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n\n        int[] parent = new int[circles.length];\n        for (int i = 0; i < parent.length; i++) {\n            parent[i] = i;\n        }\n        int[] rank = new int[circles.length];\n        Arrays.fill(rank, 1);\n\n        boolean[] touchesBR = new boolean[circles.length]; // touchesBR[i] == true if root of i touches BR\n        boolean[] touchesUL = new boolean[circles.length]; // same as above\n        \n        for (int i = 0; i < circles.length; i++) {\n            int[] circle = circles[i];\n            int x = circle[0];\n            int y = circle[1];\n            int r = circle[2];\n\n            if (x - r <= 0 || y + r >= Y) touchesUL[i] = true;\n            if (x + r >= X || y - r <= 0) touchesBR[i] = true;\n\n            for (int j = i+1; j < circles.length; j++) {\n                int[] circle2 = circles[j];\n                int x2 = circle2[0];\n                int y2 = circle2[1];\n                int r2 = circle2[2];\n\n                if (x2 - r2 <= 0 || y2 + r2 >= Y) touchesUL[j] = true;\n                if (x2 + r2 >= X || y2 - r2 <= 0) touchesBR[j] = true;\n\n                long xSq = (long)(x - x2) * (x - x2);\n                long ySq = (long)(y - y2) * (y - y2);\n                long rSq = (long)(r + r2) * (r + r2);\n\n                // System.out.println(xSq + \" \" + ySq + \" \" + rSq);\n\n                if (xSq + ySq <= rSq) union(i, j, parent, rank, touchesBR, touchesUL);\n            }\n        }\n\n        for (int i = 0; i < circles.length; i++) {\n            if (touchesBR[i] && touchesUL[i]) return false;\n        }\n        return true;\n    }\n\n    private void union(int x, int y, int[] parent, int[] rank, boolean[] touchesBR, boolean[] touchesUL) {\n        int xRoot = find(x, parent);\n        int yRoot = find(y, parent);\n        if (xRoot == yRoot) return;\n        if (rank[xRoot] > rank[yRoot]) {\n            parent[yRoot] = xRoot;\n            if (touchesBR[yRoot]) touchesBR[xRoot] = true;\n            if (touchesUL[yRoot]) touchesUL[xRoot] = true;\n        } else {\n            parent[xRoot] = yRoot;\n            if (rank[xRoot] == rank[yRoot]) rank[yRoot]++;\n            if (touchesBR[xRoot]) touchesBR[yRoot] = true;\n            if (touchesUL[xRoot]) touchesUL[yRoot] = true;\n        }\n    }\n\n    private int find(int x, int[] parent) {\n        while (x != parent[x]) {\n            x = parent[x];\n        }\n        return x;\n        /*\n        if (x != parent[x]) {\n            parent[x] = find(parent[x], parent);\n        }\n        return parent[x];\n        */\n    }\n}\n\n\n// 1. are the UR/LL edges touched? if not, then yes\n// 2. do the circles form a barrier across the square? if not, then yes",
    "submit_ts": "1722136985",
    "subm_id": "1335750772"
}