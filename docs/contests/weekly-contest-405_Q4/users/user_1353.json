{
    "username": "cygnuss",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        # trie traversal\n        \n        trie = {}\n        for word, cost in zip(words, costs):\n            curr = trie\n            for c in word:\n                if c not in curr:\n                    curr[c] = {}\n                curr = curr[c]\n            curr['*'] = min(curr.get('*', cost), cost)\n        \n        @cache\n        def dp(idx):\n            # min cost for target[idx...]\n            if idx == len(target):\n                return 0\n            curr = trie\n            ans = float('inf')\n            for i in range(idx, len(target)):\n                # print(curr)\n                c = target[i]\n                if c in curr:\n                    curr = curr[c]\n                    if '*' in curr:                \n                        ans = min(ans, curr['*'] + dp(i+1))\n                else:\n                    break\n            return ans\n        \n        res = dp(0)\n        return res if res < float('inf') else -1\n        # global_min = float('inf')\n\n        # def dfs(idx, node):\n        #     if idx == len(target):\n        #         return node.get('*', float('inf'))\n        #     c = target[idx]\n        #     ans = float('inf')\n        #     if '*' in node:\n        #         ans = min(ans, node['*'] + dfs(idx, trie))\n        #     if c in node:\n        #         ans = min(ans, dfs(idx+1, node[c]))            \n        #     return ans\n        \n        # v = dfs(0, trie)\n        # return v if v < float('inf') else -1\n",
    "submit_ts": "1720324010",
    "subm_id": "1312389462"
}