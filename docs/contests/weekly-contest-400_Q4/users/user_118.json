{
    "username": "NatapongS",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        vector<int> qs[30];\n        int n = nums.size();\n        for (int i = 0, id = 1; i < 30; ++i, id <<= 1) {\n            qs[i].resize(n + 1);\n            for (int j = 1; j <= n; ++j) {\n                qs[i][j] = qs[i][j -1] + ((nums[j -1] & id) ? 1 : 0);\n            }\n        }\n        int ans = 1e9 + 7;\n        auto get_val = [&](int l, int r) -> int {\n            int sum = 0, len = r- l + 1;\n            for (int j = 0; j < 30; ++j) {\n                if (qs[j][r] - qs[j][l -1] == len) sum += 1 << j;\n            }\n            return sum;\n        };\n        for (int i = 1; i <= n; ++i) {\n            if (nums[i -1] <= k) {\n                ans = min(ans, k - nums[i -1]);\n                continue;\n            }\n            int mi = 1, ma = i;\n            while (mi < ma) {\n                int mid = mi + ma >> 1;\n                int sum = get_val(mid, i);\n                if (sum >= k) {\n                    ma = mid;\n                } else {\n                    mi = mid + 1; \n                }\n            }\n            ans = min(ans, get_val(mi, i) - k);\n            if (mi > 1) ans = min(ans, k - get_val(mi -1, i));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297091",
    "subm_id": "1274730163"
}