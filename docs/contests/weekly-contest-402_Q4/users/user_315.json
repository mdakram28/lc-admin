{
    "username": "cybsbbbb",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = [0] * (2 * n)\n        \n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                tree[i + n] = 1\n        for i in range(n - 1, 0, -1):\n            tree[i] = tree[i << 1] + tree[i << 1 | 1]\n        \n        def updateTreeNode(p, value):\n            tree[p + n] = value\n            p = p + n\n            i = p\n            while i > 1:\n                tree[i >> 1] = tree[i] + tree[i ^ 1]\n                i >>= 1\n\n        def query(l, r):\n            res = 0\n            l += n\n            r += n\n            while l < r:\n                if (l & 1):\n                    res += tree[l]\n                    l += 1\n                if (r & 1):\n                    r -= 1\n                    res += tree[r]\n                l >>= 1\n                r >>= 1\n            return res\n        \n        ans = []\n        \n        # print(tree)\n        \n        for ind, p1, p2 in queries:\n            if ind == 1:\n                ans.append(query(p1 + 1, p2))\n            if ind == 2:\n                idx = p1\n                nums[idx] = p2\n                for i in range(max(1, idx - 1), min(idx + 2, n - 1)):\n                    if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                        updateTreeNode(i, 1)\n                    else:\n                        updateTreeNode(i, 0)\n            # print(tree)\n        return ans\n                \n",
    "submit_ts": "1718506548",
    "subm_id": "1289622820"
}