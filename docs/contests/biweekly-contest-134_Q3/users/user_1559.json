{
    "username": "Zeus_28",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <functional>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& inputColors, int kValue) {\n        int N = inputColors.size();\n        inputColors.insert(inputColors.end(), inputColors.begin(), inputColors.end());\n        \n        unordered_map<int, bool> cacheMap;\n        \n        function<bool(int)> isAlternative = [&](int start) -> bool {\n            if (start > 0 && cacheMap.find(start - 1) != cacheMap.end() && cacheMap[start - 1]) {\n                return inputColors[start + kValue - 1] != inputColors[start + kValue - 2];\n            }\n            for (int i = start; i < start + kValue - 1; ++i) {\n                if (inputColors[i] == inputColors[i + 1]) {\n                    return false;\n                }\n            }\n            return true;\n        };\n        \n        auto populateCache = [&](int index) {\n            if (cacheMap.find(index) == cacheMap.end()) {\n                cacheMap[index] = isAlternative(index);\n            }\n        };\n        \n        auto countAlternatingGroups = [&]() {\n            int count = 0;\n            for (int i = 0; i < N; ++i) {\n                populateCache(i);\n                if (cacheMap[i]) {\n                    count++;\n                }\n            }\n            return count;\n        };\n        \n        return countAlternatingGroups();\n    }\n};\n",
    "submit_ts": "1720280728",
    "subm_id": "1311799936"
}