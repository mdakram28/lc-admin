{
    "username": "bekorn",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k)\n    {\n        int const N = nums.size();\n        unordered_map<int, int> diffs;\n        for (int i = 0; i < N / 2; i++)\n            diffs[abs(nums[i] - nums[N - 1 - i])]++;\n\n        int min_changes = INT_MAX;\n\n        for (int i = 0; i < 5; i++)\n        {\n            int dominant_diff, dominant_diff_count = 0;\n            for (auto [diff, count] : diffs)\n            {\n                if (count > dominant_diff_count)\n                    dominant_diff_count = count,\n                    dominant_diff = diff;\n                //printf(\"%d: %d\\n\", diff, count);\n            }\n\n            int changes = 0;\n            for (int i = 0; i < N / 2; i++)\n            {\n                int a = nums[i];\n                int b = nums[N - 1 - i];\n                int diff = abs(a - b);\n                if (diff != dominant_diff)\n                {\n                    if (min(a, b) > k - dominant_diff && max(a, b) < dominant_diff)\n                    {\n                        changes += 2;\n                        //printf(\"%d, %d +2\\n\", a, b);\n                    }\n                    else\n                    {\n                        changes += 1;\n                        //printf(\"%d, %d +1\\n\", a, b);\n                    }\n                }\n            }\n\n            //printf(\"Change = %d for X = %d\\n\", changes, dominant_diff);\n            min_changes = min(min_changes, changes);\n            diffs.erase(dominant_diff);\n        }\n\n        return min_changes;\n    }\n};",
    "submit_ts": "1721489896",
    "subm_id": "1327466998"
}