{
    "username": "ankur145",
    "submission": "class Solution {\nprivate:\n    vector<int> extendColors(vector<int>& colors, int k) {\n        vector<int> extendedColors(colors.begin(), colors.end());\n        extendedColors.insert(extendedColors.end(), colors.begin(), colors.begin() + k - 1);\n        return extendedColors;\n    }\n    int countAlternatingGroups(vector<int>& extendedColors, int k) {\n        int ans = 0;\n        for (int i = 0; i < extendedColors.size(); ) {\n            int count = countAlternatingSequence(extendedColors, i);\n            ans += max(0, count - k + 1);\n            i += count;\n        }\n        return ans;\n    }\n    int countAlternatingSequence(vector<int>& extendedColors, int start) {\n        int count = 1;\n        while (start + count < extendedColors.size() && extendedColors[start + count] != extendedColors[start + count - 1]) {\n            count++;\n        }\n        return count;\n    }\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        vector<int> extendedColors = extendColors(colors, k);\n        return countAlternatingGroups(extendedColors, k);\n    }\n};\n\n",
    "submit_ts": "1720280598",
    "subm_id": "1311795328"
}