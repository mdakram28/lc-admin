{
    "username": "Abhinav2107",
    "submission": "impl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        let n = nums.len();\n        let k = k as usize;\n        let half = n / 2;\n        let mut diff_counts = vec![0; k + 1];\n        let mut max_diff_1 = vec![];\n        max_diff_1.reserve(half);\n        for i in 0..half {\n            let mut a = nums[i] as usize;\n            let mut b = nums[n - i - 1] as usize;\n            if a > b {\n                std::mem::swap(&mut a, &mut b);\n            }\n            // println!(\"i = {i}, diff = {}, max_diff_1 = {}\", b - a, std::cmp::max(k - a, b));\n            diff_counts[b - a] += 1;\n            max_diff_1.push(std::cmp::max(k - a, b));\n        }\n        max_diff_1.sort_unstable();\n        // println!(\"{max_diff_1:?}\");\n        let mut min_changes = half;\n        for diff in 0..=k {\n            if diff_counts[diff] == 0 {\n                continue;\n            }\n            let count_1 = half - max_diff_1.partition_point(|&max_diff| max_diff < diff);\n            let changes = n - count_1 - diff_counts[diff];\n            // println!(\"diff = {diff}, changes = {changes}\");\n            if changes < min_changes {\n                min_changes = changes;\n            }\n        }\n        min_changes as i32\n    }\n}",
    "submit_ts": "1721489056",
    "subm_id": "1327441506"
}