{
    "username": "PeterChenX",
    "submission": "class Solution {\n    int n;\n    long long helper(vector<int>& diff) {\n        bool isAllZero = true;\n        for(auto& d : diff){\n            if(abs(d) != 0){\n                isAllZero = false;\n                break;\n            }\n        }\n        if(isAllZero)\n            return 0;\n\n        long long res = 0;\n        int index = 0;\n        int sign = diff[index] == 0 ? 0 : (diff[index] > 0 ? 1 : -1); // -1, 0, 1\n        int value = abs(diff[index]);\n        for(int i = 1; i < n; i++){\n            int cur_sign = diff[i] == 0 ? 0 : (diff[i] > 0 ? 1 : -1);\n            int cur_value = abs(diff[i]);\n            if(cur_sign == sign){\n                value = min(value, cur_value);\n            }else{\n                res += value;\n                for(int j = index; j < i; j++){\n                    diff[j] -= (long long)sign * value;\n                }\n                index = i;\n                sign = diff[index] == 0 ? 0 : (diff[index] > 0 ? 1 : -1);\n                value = abs(diff[index]);\n            }\n        }\n        res += value;\n        for(int j = index; j < n; j++){\n            diff[j] -= (long long)sign * value;\n        }\n        return res + helper(diff);\n    }\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        n = nums.size();\n        vector<int> diff(n);\n        for(int i = 0; i < n; i++)\n            diff[i] = target[i] - nums[i];\n        return helper(diff);\n    }\n};",
    "submit_ts": "1721533884",
    "subm_id": "1328018763"
}