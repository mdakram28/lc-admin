{
    "username": "pri_tam",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> nodes;\n    vector<pair<int, int>> endings;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            if (!current->nodes.count(c)) {\n                current->nodes[c] = new TrieNode();\n            }\n            current = current->nodes[c];\n        }\n        current->endings.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int length = target.size();\n        vector<int> dp(length + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < length; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* current = trie.root;\n            for (int j = i; j < length; ++j) {\n                if (!current->nodes.count(target[j])) {\n                    break;\n                }\n                current = current->nodes[target[j]];\n                for (auto& p : current->endings) {\n                    int word_length = words[p.first].size();\n                    if (i + word_length <= length) {\n                        dp[i + word_length] = min(dp[i + word_length], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[length] == INT_MAX ? -1 : dp[length];\n    }\n};",
    "submit_ts": "1720323657",
    "subm_id": "1312380906"
}