{
    "username": "devanshsharma07",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        int[][] cache = new int[n][k + 1];\n        int ansBYCT = 1;\n        int[] vk = new int[k + 1];\n        Arrays.fill(vk, -1);\n        List<Map<Integer, Integer>> vkm = new ArrayList<>();\n        for (int i = 0; i <= k; i++) {\n            vkm.add(new HashMap<>());\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                cache[i][j] = 1;\n                for (int l = 0; l < j; l++) {\n                    cache[i][j] = Math.max(cache[i][j], 1 + vk[l]);\n                }\n                if (vkm.get(j).containsKey(nums[i])) {\n                    cache[i][j] = Math.max(cache[i][j], 1 + vkm.get(j).get(nums[i]));\n                }\n                ansBYCT = Math.max(ansBYCT, cache[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                vk[j] = Math.max(vk[j], cache[i][j]);\n                vkm.get(j).put(nums[i], Math.max(vkm.get(j).getOrDefault(nums[i], 0), cache[i][j]));\n            }\n        }\n        return ansBYCT;\n    }\n}\n",
    "submit_ts": 1717862371.0
}