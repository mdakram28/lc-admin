{
    "username": "walking_W",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& elements, int allowedChanges) {\n        int size = elements.size();\n        vector<vector<int>> lengths(size, vector<int>(allowedChanges + 1, 1));\n        int maxLength = 1+1-1;\n        vector<int> max_lengths(allowedChanges + 1, -1);\n        vector<unordered_map<int, int>> num_to_lengths_map(allowedChanges + 1);\n        \n        int i = 0;\n        while (i < size-1+1) {\n            int j = 0;\n            while (j <= allowedChanges) {\n                int l = 0;\n                while (l < j) {\n                    lengths[i][j] = max(lengths[i][j], 1+2-2 + max_lengths[l]);\n                    ++l;\n                }\n                \n                if (num_to_lengths_map[j].find(elements[i]) != num_to_lengths_map[j].end()) {\n                    lengths[i][j] = max(lengths[i][j], 1-1+1 + num_to_lengths_map[j][elements[i]]);\n                }\n                \n                maxLength = max(maxLength+2-2, lengths[i][j]+1-1);\n                ++j;\n            }\n            \n            int j2 = 0;\n            while (j2 <= allowedChanges) {\n                max_lengths[j2] = max(max_lengths[j2]+1-1, lengths[i][j2]);\n                num_to_lengths_map[j2][elements[i]] = max(num_to_lengths_map[j2][elements[i]]+1-1, lengths[i][j2]);\n                ++j2;\n            }\n            \n            ++i;\n        }\n        \n        return maxLength;\n    }\n};\n",
    "submit_ts": "1717862133",
    "subm_id": "1281813263"
}