{
    "username": "coderchamp07",
    "submission": "class Solution {\npublic:\n    vector<int> tree;\n    void build(const std::vector<int>& arr, int node, int start, int end) {\n        if (start == end)\n            tree[node] = arr[start];\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end)\n            tree[node] = value;\n        else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid)\n                update(2 * node + 1, start, mid, idx, value);\n            else\n                update(2 * node + 2, mid + 1, end, idx, value);\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L)\n            return INT_MIN;\n        if (L <= start && end <= R)\n            return tree[node];\n        int mid = (start + end) / 2;\n        int lmx = query(2 * node + 1, start, mid, L, R);\n        int rmx = query(2 * node + 2, mid + 1, end, L, R);\n        return max(lmx, rmx);\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> out;\n        tree.resize(4 * n, 0);\n\n        int ans = n - 1;\n        map<int, int> startToEndInc;\n        for(auto& q : queries) {\n            int startBeforeMxEnd = query(0, 0, n - 1, 0, q[0]);\n            if(startBeforeMxEnd < q[1]) {\n                auto it = startToEndInc.lower_bound(q[0]);\n                vector<int> era;\n                while(it != startToEndInc.end() && (*it).first < q[1]) {\n                    ans += (*it).second - (*it).first - 1;\n                    era.push_back((*it).first);\n                    it++;\n                }\n                for(int x : era)\n                    startToEndInc.erase(x);\n                ans -= q[1] - q[0] - 1;\n                startToEndInc[q[0]] = q[1];\n                update(0, 0, n - 1, q[0], q[1]);\n            }\n            out.push_back(ans);\n        }\n        return out;\n    }\n};",
    "submit_ts": "1722741748",
    "subm_id": "1343752534"
}