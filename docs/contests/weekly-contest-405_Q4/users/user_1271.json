{
    "username": "NamanGokhru",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> children;\n    int cost;\n    Node(){\n         cost = INT_MAX ; \n    }\n};\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n    void insert(string& word,int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new Node();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost); \n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie t;\n        int  m = words.size() ; \n        for (int i = 0; i <m; ++i) {\n            t.insert(words[i], costs[i]);\n        }\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0; \n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue; \n            \n            Node* node = t.root;\n            for (int j = i; j < n; j++) {\n                if (!node->children.count(target[j])) break; \n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {  \n                    dp[j+1] = min(dp[j+1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        \n        if(dp[n] == INT_MAX)return -1 ;\n        else return dp[n];\n    }\n};\n",
    "submit_ts": "1720323511",
    "subm_id": "1312377380"
}