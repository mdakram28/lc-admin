{
    "username": "CAEL0",
    "submission": "#include <bits/stdc++.h>\n#define sz size()\n#define bk back()\n#define fi first\n#define se second\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nstruct Node {\n    int x, d;\n    bool operator<(const Node &o) const {\n        if (d == o.d)\n            return x < o.x;\n        return d > o.d;\n    }\n};\n\nstruct Trie {\n    vector<pair<char, Trie *>> nxt;\n    int cost;\n\n    Trie() { cost = INT_MAX; }\n\n    void insert(string &s, int idx, int c) {\n        if (idx == s.sz) {\n            cost = min(cost, c);\n            return;\n        }\n\n        for (auto node : nxt) {\n            if (node.fi == s[idx]) {\n                node.se->insert(s, idx + 1, c);\n                return;\n            }\n        }\n\n        nxt.push_back({s[idx], new Trie});\n        nxt.bk.se->insert(s, idx + 1, c);\n    }\n\n    void search(string &target, int idx, int d, priority_queue<Node> &pq, vector<int> &dist) {\n        if (dist.sz == idx)\n            return;\n\n        if (cost != INT_MAX && d + cost < dist[idx]) {\n            dist[idx] = d + cost;\n            pq.push({idx, dist[idx]});\n        }\n\n        for (auto node : nxt) {\n            if (node.fi == target[idx]) {\n                node.se->search(target, idx + 1, d, pq, dist);\n                return;\n            }\n        }\n    }\n};\n\nclass Solution {\n  public:\n    int minimumCost(string target, vector<string> &words, vector<int> &costs) {\n        Trie trie;\n        for (int i = 0; i < words.sz; i++)\n            trie.insert(words[i], 0, costs[i]);\n\n        int n = target.sz;\n        vector<int> dist(n + 1, INT_MAX);\n        dist[0] = 0;\n\n        priority_queue<Node> pq;\n        pq.push({0, 0});\n\n        while (pq.sz) {\n            Node cur = pq.top();\n            pq.pop();\n\n            if (cur.x == n)\n                break;\n\n            if (dist[cur.x] == cur.d)\n                trie.search(target, cur.x, cur.d, pq, dist);\n        }\n\n        return (dist[n] == INT_MAX ? -1 : dist[n]);\n    }\n};",
    "submit_ts": "1720323058",
    "subm_id": "1312366260"
}