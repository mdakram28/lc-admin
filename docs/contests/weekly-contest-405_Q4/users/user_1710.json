{
    "username": "im_sparrow05",
    "submission": "class Solution {\npublic:\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\n//     map<string,int> mp;\n//     int solve(string& target,int i,vector<int>& dp){\n//         int n = target.size();\n//         if(i>=n){\n//             return 0;\n//         }\n        \n//         if(dp[i]!=-1){\n//             return dp[i];\n//         }\n        \n//         string s = \"\";\n//         int ans = 1e9;\n//         for(int j=i;j<n;j++){\n//             s += target[j];\n//             if(mp.find(s)!=mp.end()){\n//                 ans = min(ans,mp[s] + solve(target,j+1,dp));\n//             }\n//         }\n        \n//         return dp[i] = ans;\n//     }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         int n = words.size();\n//         for(int i=0;i<n;i++){\n//             if(mp.find(words[i])!=mp.end()){\n//                 mp[words[i]] = min(costs[i],mp[words[i]]);\n//             }\n//             else{\n//             mp[words[i]] = costs[i];\n//             }\n//         }\n        \n//         vector<int> dp(target.size()+2,-1);\n//         int ans = solve(target,0,dp);\n        \n//         if(ans==1e9){\n//             return -1;\n//         }\n        \n//         return ans;\n        \n        int n = target.size();\n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])){\n                    break;\n                }\n\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324242",
    "subm_id": "1312394880"
}