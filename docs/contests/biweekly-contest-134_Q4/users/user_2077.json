{
    "username": "Manoj_Dhundhalva",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long count = 0;\n        \n        unordered_map<long long, long long> previous_map;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> current_map;\n\n            // Check if the current element itself equals k\n            if (nums[i] == k) {\n                ++count;\n            }\n\n            // Initialize the current element in the map\n            current_map[nums[i]] += 1;\n\n            // Iterate over the previous map to compute new AND values\n            for (auto& [value, frequency] : previous_map) {\n                long long new_and = value & nums[i];\n                if (new_and == k) {\n                    count += frequency;\n                }\n                current_map[new_and] += frequency;\n            }\n            \n            // Update the previous map with the current map\n            previous_map = current_map;\n        }\n        \n        return count;\n    }\n};\n",
    "submit_ts": "1720281596",
    "subm_id": "1311831623"
}