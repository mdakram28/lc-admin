{
    "username": "nikhs18_2003",
    "submission": "class Solution {\npublic:\n    bool isConnected(vector<vector<int>> &adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<bool> visited(totalNodes + 4, false);\n        nodeQueue.push(startNode);\n        visited[startNode] = true;\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n    \n    bool canReachCorner(int targetX, int targetY, vector<vector<int>>& circlesData) {\n        int numCircles = circlesData.size();\n        vector<pair<pair<int, int>, int>> circleList(numCircles);\n        vector<vector<int>> adjacencyList(numCircles + 4);\n        for (int i = 0; i < numCircles; ++i) {\n            circleList[i].first.first = circlesData[i][0];\n            circleList[i].first.second = circlesData[i][1];\n            circleList[i].second = circlesData[i][2];\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            if (circleList[i].first.first <= circleList[i].second) {\n                adjacencyList[numCircles].push_back(i);\n                adjacencyList[i].push_back(numCircles);\n            }\n            if (targetX - circleList[i].first.first <= circleList[i].second) {\n                adjacencyList[numCircles + 2].push_back(i);\n                adjacencyList[i].push_back(numCircles + 2);\n            }\n            if (circleList[i].first.second <= circleList[i].second) {\n                adjacencyList[numCircles + 1].push_back(i);\n                adjacencyList[i].push_back(numCircles + 1);\n            }\n            if (targetY - circleList[i].first.second <= circleList[i].second) {\n                adjacencyList[numCircles + 3].push_back(i);\n                adjacencyList[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circleList[i].first.first - circleList[j].first.first, 2) +\n                                       pow(circleList[i].first.second - circleList[j].first.second, 2));\n                int combinedRadius = circleList[i].second + circleList[j].second;\n                if (combinedRadius >= distance) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        bool isReachable = isConnected(adjacencyList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) ||\n                           isConnected(adjacencyList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n        bool ans=!isReachable;\n        return ans;\n    }\n};\n",
    "submit_ts": "1722138810",
    "subm_id": "1335800273"
}