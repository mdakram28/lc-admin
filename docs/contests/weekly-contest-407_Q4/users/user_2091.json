{
    "username": "ws1255",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        int[] arr = new int[n];\n        long res = 0;\n        for(int i = 0; i < n; i++) {\n            arr[i] = target[i] - nums[i];\n        }\n        // System.out.println(\"arr: \" + Arrays.toString(arr));\n        LinkedList<Integer> list = new LinkedList<>();\n        for(int num : arr) {\n            if(list.isEmpty() || ((num >= 0 && list.peekLast() >= 0) || (num < 0 && list.peekLast() < 0))) {\n                list.offerLast(num);\n            } else {\n                res += helper(list);\n                list = new LinkedList<>();\n                list.offerLast(num);\n            }\n        }\n        res += helper(list);\n        \n        return res;\n    }\n    \n    long helper(List<Integer> list) {\n        // System.out.println(\"list: \" + list);\n        int[] nums = list.stream().map(e -> Math.abs(e)).mapToInt(Integer::intValue).toArray();\n        int n = nums.length;\n        Stack<Integer> stack = new Stack<>();\n        stack.push(nums[0]);\n        long res = 0;\n        \n        for(int i = 1; i < n; i++) {\n            if(nums[i] > nums[i - 1]) stack.push(nums[i] - nums[i - 1]);\n            else {\n                int diff = nums[i - 1] - nums[i];\n                while(diff > 0) {\n                    int top = stack.pop();\n                    int need = Math.min(top, diff);\n                    res += need;\n                    top -= need;\n                    diff -= need;\n                    \n                    if(top > 0) stack.push(top);\n                }\n            }\n        }\n        \n        while(!stack.isEmpty()) {\n            res += stack.pop();\n        }\n        \n        return res;\n    }\n}",
    "submit_ts": "1721533390",
    "subm_id": "1328007896"
}