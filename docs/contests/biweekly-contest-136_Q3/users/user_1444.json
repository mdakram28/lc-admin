{
    "username": "thatdns",
    "submission": "class Solution {\n    int m, n;\npublic:\n    int to1D(int r, int c) {\n        return (r * n + c);\n    }\n\n    int CountOnes(vector<vector<int>>& grid, int r, int c) {\n        int ones = 1;\n        int r1 = (m - 1 - r);\n        int c1 = (n - 1 - c);\n        if (c != c1 && grid[r][c1] == 1)\n            ++ones;\n        if (r != r1 && grid[r1][c] == 1)\n            ++ones;\n        if (r != r1 && c != c1 && grid[r1][c1] == 1)\n            ++ones;\n        return ones;\n    }\n\n    int CountNeeded(vector<vector<int>>& grid, int r, int c) {\n        int actual = 1;\n        int r1 = (m - 1 - r);\n        int c1 = (n - 1 - c);\n        if (c != c1)\n            ++actual;\n        if (r != r1)\n            ++actual;\n        if (r != r1 && c != c1)\n            ++actual;\n        return actual - CountOnes(grid, r, c);\n    }\n\n    void MarkSeen(unordered_set<int>& seen, int r, int c) {\n        int r1 = (m - 1 - r);\n        int c1 = (n - 1 - c);\n        seen.insert(to1D(r, c));\n        seen.insert(to1D(r, c1));\n        seen.insert(to1D(r1, c));\n        seen.insert(to1D(r1, c1));\n    }\n\n    int minFlips(vector<vector<int>>& grid) {\n        m = grid.size();\n        n = grid[0].size();\n\n        int ans = 0, a = 0, b = 0, c = 0;\n        unordered_set<int> seen;\n        for (int i=0; i<grid.size(); ++i) {\n            for (int j=0; j<grid[i].size(); ++j) {\n                if (grid[i][j] == 1 && seen.find(to1D(i, j)) == seen.end()) {\n                    int ones = CountOnes(grid, i, j);\n                    int needed = CountNeeded(grid, i, j);\n                    if (ones == 1) {\n                        if (needed == 0) {\n                            c += 1;\n                        } else if (needed == 1) {\n                            b += 1;\n                        } else if (needed == 3) {\n                            ++ans;\n                        } else {\n                            cout << \"1: Not possible! \" << i << \", \" << j << endl;\n                        }\n                    } else if (ones == 2) {\n                        if (needed == 0) {\n                            ++a;\n                        } else if (needed == 2) {\n                            ans += 2;\n                        } else {\n                            cout << \"2: Not possible! \" << i << \", \" << j << endl;\n                        }\n                    } else if (ones == 3) {\n                        if (needed == 1) {\n                            ans += 1;\n                        } else {\n                            cout << \"3: Not possible! \" << i << \", \" << j << endl;\n                        }\n                    }\n\n                    // cout << ones << \" & \" << needed << \" => ans = \" << ans << endl;\n                    // Mark all nodes as seen\n                    MarkSeen(seen, i, j);\n                }\n            }\n        }\n        // cout << a << \", \" << b << \", \" << c << endl;\n        while (a > 0) {\n            if ((2*a) % 4 == 0) {\n                a = 0;\n            } else {\n                // need 2 ones\n                if (b > 0) {\n                    // b gives 2 ones\n                    ++a;\n                    --b;\n                    ans += 1;\n                } else if (c > 1) {\n                    // c gives 2 ones\n                    c -= 2;\n                    ++a;\n                    ans += 2;\n                } else {\n                    // a abandons 2 ones\n                    --a;\n                    ans += 2;\n                }\n            }\n        }\n        if (b > 0) {\n            ans += b;\n            b = 0;\n        }\n        if (c > 0) {\n            ans += c;\n            c = 0;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722699615",
    "subm_id": "1343217046"
}