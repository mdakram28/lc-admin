{
    "username": "coder_sunny",
    "submission": "const int as = 26, mi = INT_MAX;\nbool a=1;\n\n\nbool b=0;\n\nclass TN {\npublic:\n    vector<unique_ptr<TN>> ch;\n    int mc;bool ew; TN () : ch(as), mc(mi), ew(false) {}\n};\n\nbool x=1;\n\nclass tt {\nprivate:\n    unique_ptr<TN> root;\n\npublic:\n    tt() : root(make_unique<TN>()) {}\n\n    void insert(const string &word, int cost) {\n        TN *current = root.get();\n        for (char ch : word) {\n            int index = ch - 'a';\n            if (!current->ch[index]) {\n                current->ch[index] = make_unique<TN>();\n            }\n            current = current->ch[index].get();\n        }\n        current->mc = min(current->mc, cost);\n        current->ew = true;\n    }\n\n    TN* getRoot() {\n        return root.get();\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(const string &target, const vector<string> &words, const vector<int> &costs) {\n        \n        int KKK=INT_MIN;\n        \n        \n        tt tr;  size_t p =0;\n        \n        while(p<words.size()){\n        tr.insert(words[p], costs[p]);p++;\n        }\n        vector<int> dp(target.length() + 1, mi);\n        dp[0] = 0;\n\n        int idx = 0;\n        while ( target.length() >idx) {\n            if (dp[idx] == mi) {\n                ++idx; continue;\n            }\n            TN* node = tr.getRoot(); int pos = idx;\n            while (pos < target.length()) {\n                char currentChar = target[pos]; int childIndex = currentChar - 'a';   \n                if (!node->ch[childIndex])\n                {\n                    break;\n                }\n                node = node->ch[childIndex].get();\n                if (node->ew) {\n                    dp[pos + 1] = min(dp[pos + 1], dp[idx] + node->mc);\n                }\n                ++pos;\n            }\n            ++idx;\n        }\n\n        return dp[target.length()] == mi ? -1 : dp[target.length()];\n    }\n};",
    "submit_ts": "1720323315",
    "subm_id": "1312372601"
}