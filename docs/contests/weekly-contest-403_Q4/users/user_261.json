{
    "username": "Fzldq",
    "submission": "import sortedcontainers\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        res1 = self.helper(grid)\n        res2 = self.helper(grid[::-1])\n        grid_t = list(zip(*grid))\n        res3 = self.helper(grid_t)\n        res4 = self.helper(grid_t[::-1])\n        return min(res1, res2, res3, res4)\n\n    def helper(self, grid):\n        m, n = len(grid), len(grid[0])\n        res = m * n\n        xsort = [(i, j) for i in range(m) for j in range(n) if grid[i][j]]\n        ones = len(xsort)\n        xs = sortedcontainers.SortedList([tmp[0] for tmp in xsort])\n        ys = sortedcontainers.SortedList([tmp[1] for tmp in xsort])\n\n        def func(st):\n            return st[-1] - st[0] + 1\n\n        o1 = 0\n        # \u7b2c\u4e00\u5200\u6a2a\n        x1, y1 = sortedcontainers.SortedList(), sortedcontainers.SortedList()\n        for i in range(m - 1):\n            while o1 < ones and xsort[o1][0] <= i:\n                tx, ty = xsort[o1]\n                x1.add(tx)\n                y1.add(ty)\n                xs.remove(tx)\n                ys.remove(ty)\n                o1 += 1\n            if len(x1) == 0:\n                continue\n\n            # \u7b2c\u4e8c\u5200\u6a2a\n            x2, y2 = sortedcontainers.SortedList(), sortedcontainers.SortedList()\n            x3, y3 = xs.copy(), ys.copy()\n            o2 = o1\n            for j in range(i + 1, m - 1):\n                while o2 < ones and xsort[o2][0] <= j:\n                    tx, ty = xsort[o2]\n                    x2.add(tx)\n                    y2.add(ty)\n                    x3.remove(tx)\n                    y3.remove(ty)\n                    o2 += 1\n                if len(x2) == 0 or len(x3) == 0:\n                    continue\n                res = min(res, func(x1) * func(y1) + func(x2) * func(y2) + func(x3) * func(y3))\n\n            # \u7b2c\u4e8c\u5200\u7ad6\n            x2, y2 = sortedcontainers.SortedList(), sortedcontainers.SortedList()\n            x3, y3 = xs.copy(), ys.copy()\n            xsort_ = sorted(xsort[o1:], key=lambda tmp: tmp[1])\n            o2 = 0\n            for j in range(n - 1):\n                while o2 < len(xsort_) and xsort_[o2][1] <= j:\n                    tx, ty = xsort_[o2]\n                    x2.add(tx)\n                    y2.add(ty)\n                    x3.remove(tx)\n                    y3.remove(ty)\n                    o2 += 1\n                if len(x2) == 0 or len(x3) == 0:\n                    continue\n                res = min(res, func(x1) * func(y1) + func(x2) * func(y2) + func(x3) * func(y3))\n        return res\n\n",
    "submit_ts": 1719113678.0
}