{
    "username": "dongjiangeng",
    "submission": "from collections import deque\nfrom heapq import heappush, heappop\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:        \n        word_costs = {}\n        for (word, cost) in zip(words, costs):\n            if word in word_costs:\n                word_costs[word] = min(word_costs[word], cost)\n            else:\n                word_costs[word] = cost\n                \n        n = len(target)\n        to_checks = [(0, 0)]\n        cost_at_pos = [None for _ in range(n+1)]\n        cost_at_pos[0] = 0\n        \n        while len(to_checks) > 0:\n            (cost, to_check) = heappop(to_checks)\n            if to_check == n:\n                break\n            if cost > cost_at_pos[to_check]:\n                continue\n            \n            sub_target = target[to_check:]\n            for (word, word_cost) in word_costs.items():\n                if not sub_target.startswith(word):\n                    continue\n                next_check = to_check + len(word)\n                next_cost = cost + word_cost\n                if cost_at_pos[next_check] is None or cost_at_pos[next_check] > next_cost:\n                    cost_at_pos[next_check] = next_cost\n                    heappush(to_checks, (next_cost, next_check))\n        \n        return cost_at_pos[n] or -1",
    "submit_ts": "1720322970",
    "subm_id": "1312363946"
}