{
    "username": "Turkhuu",
    "submission": "class Solution {\npublic:\n    const long long inf = -(1LL << 61);\n    long long max_weights(int n, int m, vector<int> x, vector<int> y, vector<int> w) {\n      vector<vector<int>> b(n);\n      for (int i = 0; i < m; i++) {\n        b[x[i]].push_back(i);\n      }\n      vector d(n, vector<int>{-1});\n      vector<vector<int>> r(n), p(n);\n      for (int i = 0; i < n; i++) {\n        sort(b[i].begin(), b[i].end(), [&](int j, int k) {\n          return y[j] < y[k];\n        });\n        for (int j : b[i]) {\n          r[i].push_back(y[j]);\n          p[i].push_back(w[j]);\n          if (i > 0) {\n            d[i - 1].push_back(y[j]);\n          }\n          if (i < n - 1) {\n            d[i + 1].push_back(y[j]);\n          }\n        }\n      }\n      vector<vector<long long>> ssum(n), psum(n);\n      for (int i = 0; i < n; i++) {\n        int k = p[i].size();\n        psum[i] = vector<long long>(k + 1);\n        ssum[i] = vector<long long>(k + 1);\n        for (int j = 0; j < k; j++) {\n          psum[i][j + 1] = psum[i][j] + p[i][j];\n        }\n        for (int j = k - 1; j >= 0; j--) {\n          ssum[i][j] = ssum[i][j + 1] + p[i][j];\n        }\n      }\n      auto suf_sum = [&](int i, int x) -> long long {\n        if (i == -1) {\n          return 0;\n        }\n        return ssum[i][upper_bound(r[i].begin(), r[i].end(), x) - r[i].begin()];\n      };\n      auto pre_sum = [&](int i, int x) -> long long {\n        if (i == -1) {\n          return 0;\n        }\n        return psum[i][upper_bound(r[i].begin(), r[i].end(), x) - r[i].begin()];\n      };\n      vector<int> e{-1};\n      vector<array<long long, 2>> dp{{0, 0}};\n      for (int i = 0; i < n; i++) {\n        sort(d[i].begin(), d[i].end());\n        auto pd = dp;\n        int l = d[i].size();\n        dp = vector(l, array<long long, 2>{inf, inf});\n        int k = pd.size();\n        vector<long long> pmax(k + 1, inf);\n        for (int j = 0; j < k; j++) {\n          pmax[j + 1] = max(pmax[j], pd[j][0] + suf_sum(i - 1, e[j]));\n        }\n        vector<long long> smax(k + 1, inf);\n        for (int j = k - 1; j >= 0; j--) {\n          smax[j] = max(smax[j + 1], max(pd[j][0], pd[j][1]) - suf_sum(i, e[j]));\n        }\n        for (int j = 0; j < k; j++) {\n          dp[0][0] = max(dp[0][0], max(pd[j][0], pd[j][1]));\n          dp[0][1] = max(dp[0][1], max(pd[j][0], pd[j][1]) + pre_sum(i, e[j]));\n        }\n        for (int j = 1; j < l; j++) {\n          dp[j][0] = max({dp[j][0], max(pd[0][1], pd[0][0] + pre_sum(i - 1, d[i][j])), pmax[upper_bound(e.begin(), e.end(), d[i][j]) - e.begin()] - suf_sum(i - 1, d[i][j])});\n          dp[j][1] = max({dp[j][1], max(pd[0][1], pd[0][0] + pre_sum(i - 1, d[i][j])), smax[lower_bound(e.begin(), e.end(), d[i][j]) - e.begin()] + suf_sum(i, d[i][j])});\n        }\n        e.swap(d[i]);\n      }\n      long long ans = 0;\n      for (auto v : dp) {\n        ans = max(ans, max(v[0], v[1]));\n      }\n      return ans;\n    }\n    long long maximumScore(vector<vector<int>>& a) {\n        vector<int> x, y, w;\n        int n = a.size();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                x.push_back(i);\n                y.push_back(j);\n                w.push_back(a[i][j]);\n            }\n        }\n        return max_weights(n, n * n, y, x, w);\n    }\n};",
    "submit_ts": "1721488064",
    "subm_id": "1327410373"
}