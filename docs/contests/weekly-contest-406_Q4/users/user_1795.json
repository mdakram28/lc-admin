{
    "username": "mudit_1634",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n     std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        int i = 0, j = 0;\n\n        // Use a greedy approach to add the most expensive cuts first\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += (long long) horizontalCut[i] * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += (long long) verticalCut[j] * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += (long long) horizontalCut[i] * verticalPieces;\n            horizontalPieces++;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += (long long) verticalCut[j] * horizontalPieces;\n            verticalPieces++;\n            j++;\n        }\n\n        return totalCost;\n    }\n\n};",
    "submit_ts": "1720925679",
    "subm_id": "1320262638"
}