{
    "username": "kHarsh3715",
    "submission": "class segtree {\npublic:\n    vector<int> st;\n    segtree(int n) {\n        st.assign(4*n,1);\n    }\n    void build (int node, int l, int r, vector<int> &v) {\n        if (l == r) {\n            st[node] = v[l];\n            return;\n        }\n        int mid = (l+r)/2;\n        build(2*node, l, mid,v);\n        build(2*node+1,mid+1,r,v);\n        st[node] = ((st[2*node]&st[2*node+1]));\n        int lef = st[2*node], rig = st[2*node+1];\n        // cout << st[node] << \" \" << st[2*node] << \" \" << st[2*node+1] << \" \" << ((lef&rig)) << endl;\n    }\n    long long qry (int node, int l, int r, int i, int j) {\n        if (l > r || i > j) return ((1ll<<33)-1);\n        if (l == i && r == j) {\n            return st[node];\n        }\n        int mid = (l+r)/2;\n        return ((qry(2*node, l, mid, i, min(mid,j))&qry(2*node+1,mid+1,r,max(mid+1,i),j)));\n    }\n};\n\nclass Solution {\npublic:\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        segtree st(n);\n        st.build(1,0,n-1,nums);\n        auto bs_l = [&] (int ind) -> int {\n            int low = ind, high = n-1;\n            int ans = 1e9;\n            while (low <= high) {\n                int mid = (low+high)/2;\n                int and_val = st.qry(1,0,n-1,ind,mid);\n                if (and_val > k) {\n                    low = mid+1;\n                    continue;\n                }\n                if (and_val == k) {\n                    ans = min(ans,mid);\n                    high = mid-1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            return ans;\n        };\n        auto bs_r = [&] (int ind) -> int {\n            int low = ind, high = n-1;\n            int ans = -1;\n            while (low <= high) {\n                int mid = (low+high)/2;\n                int and_val = st.qry(1,0,n-1,ind,mid);\n                if (and_val > k) {\n                    low = mid+1;\n                    continue;\n                }\n                if (and_val == k) {\n                    ans = max(ans,mid);\n                    low = mid+1;\n                }\n                else {\n                    high = mid-1;\n                }\n            }\n            return ans;\n        };\n        \n\n        long long ans = 0;\n        for (int i = 0; i < n; i++) {\n            int lef = bs_l(i), rig = bs_r(i);\n            if (rig >= lef) {\n                ans += (rig-lef+1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279518",
    "subm_id": "1311754401"
}