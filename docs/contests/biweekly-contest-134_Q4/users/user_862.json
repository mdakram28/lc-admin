{
    "username": "saikat93ify",
    "submission": "class Solution \n{\n    public:\n    \n    int is_bit_set(int n, int bit)\n    {\n        return ( (n&(1 << bit)) != 0 );\n    }\n    \n    long long countSubarrays(vector<int>& nums, int k) \n    {\n        const int NO_OF_BITS = 31; \n        vector <int> last_zero(NO_OF_BITS, -1); \n        long long good_subarrays = 0; \n        for(int i = 0; i < nums.size(); i++)\n        {\n            for(int bit = 0; bit < NO_OF_BITS; bit++)\n            {\n                if(!is_bit_set(nums[i], bit))\n                {\n                    last_zero[bit] = i;\n                }\n            }\n            \n            int max_good_bit_position = 0, min_bad_bit_position = i + 1;\n            for(int bit = 0; bit < NO_OF_BITS; bit++)\n            {\n                if(is_bit_set(k, bit))\n                {\n                    max_good_bit_position = max(max_good_bit_position, last_zero[bit] + 1);\n                }\n                else \n                {\n                    min_bad_bit_position = min(min_bad_bit_position, last_zero[bit]);\n                }\n            }\n            \n            long long good_subarrays_ending_here = 0;\n            if(max_good_bit_position <= min_bad_bit_position && min_bad_bit_position != -1)\n            {\n                good_subarrays_ending_here += (min_bad_bit_position - max_good_bit_position + 1);\n            }\n            good_subarrays += good_subarrays_ending_here;\n            \n            //cout << \"i = \" << i << \" Max Good Bit Position = \" << max_good_bit_position << \" Min Bad Bit Position = \" << min_bad_bit_position << \" Good Subarrays Ending = \" << good_subarrays_ending_here << \"\\n\";\n            \n        }\n        \n        return good_subarrays;\n    }\n};",
    "submit_ts": "1720277762",
    "subm_id": "1311678822"
}