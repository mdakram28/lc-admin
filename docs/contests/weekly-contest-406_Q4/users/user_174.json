{
    "username": "Vighnesh_Patidar",
    "submission": "class Solution {\npublic:\n     long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int h = 1; // Number of horizontal pieces\n        int v = 1; // Number of vertical pieces\n        long long totalCost = 0; // To store the total cost\n        int i = 0; // Pointer for horizontal cuts\n        int j = 0; // Pointer for vertical cuts\n\n        // Iterate through both arrays of cuts\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += (long long)horizontalCut[i] * v;\n                h++;\n                i++;\n            } else {\n                totalCost += (long long)verticalCut[j] * h;\n                v++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[i] * v;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += (long long)verticalCut[j] * h;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924884",
    "subm_id": "1320234689"
}