{
    "username": "Alonelover4",
    "submission": "class SegmentTree:\n    def getResults(self, queries, data):\n        mm = len(data)\n        t = [0] * (2 << mm.bit_length())\n\n        def build(o: int, l: int, r: int) -> None:\n            if l == r:\n                if 0 < l < mm - 1 and data[l - 1] < data[l] and data[l] > data[l + 1]:\n                    t[o] = 1\n                else:\n                    t[o] = 0\n                return\n            m = (l + r) // 2\n            build(o * 2, l, m)\n            build(o * 2 + 1, m + 1, r)\n            t[o] = t[o * 2] + t[o * 2 + 1]\n\n        # \u628a i \u5904\u7684\u503c\u6539\u6210 val\n        def update(o: int, l: int, r: int, i: int, val: int) -> None:\n            if l == r:\n                if 0 < i < mm - 1 and data[i - 1] < val and val > data[i + 1]:\n                    t[o] = 1\n                else:\n                    t[o] = 0\n                return\n            m = (l + r) // 2\n            if i <= m:\n                update(o * 2, l, m, i, val)\n            else:\n                update(o * 2 + 1, m + 1, r, i, val)\n            t[o] = t[o * 2] + t[o * 2 + 1]\n\n        # \u67e5\u8be2 [L, R] \u4e2d\u7684\u4e4b\u548c\n        def query(o: int, l: int, r: int, L, R) -> int:\n            if L > R or l > R or r < L:\n                return 0\n            if L <= l and r <= R:\n                return t[o]\n            m = (l + r) // 2\n            ans = 0\n            ans += query(o * 2, l, m, L, R)\n            ans += query(o * 2 + 1, m + 1, r, L, R)\n            return ans \n\n        ans = []\n        build(1, 0, mm - 1)\n        for x, l, r in queries:\n            if x == 1:\n                ans.append(query(1, 0, mm - 1, l + 1, r - 1))\n            else:\n                data[l] = r\n                update(1, 0, mm - 1, l, r)\n                if l > 1:\n                    update(1, 0, mm - 1, l - 1, data[l - 1])\n                if l < mm - 2:\n                    update(1, 0, mm - 1, l + 1, data[l + 1])\n        return ans\n\nclass Solution:\n    def countOfPeaks(self, nums, queries):\n        return SegmentTree().getResults(queries, nums)\n",
    "submit_ts": 1718509693.0
}