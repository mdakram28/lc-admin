{
    "username": "jeffkmeng",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        # the only thing that matters is the differeces => make them all zero\n        # the order of operations dosen't matter\n        diffs = [target_num - num for num, target_num in zip(nums, target)]\n        # process each group of elements with the same signs independently of other groups\n        # print(diffs)\n\n        # [2, 2, 1, 2, -1, -1] (4 ops)\n        def process_group(a, b) -> int:\n            # processes range(a, b)\n            res = 0\n            prev = 0\n            for i in range(a, b):\n                x = abs(diffs[i]) # since we process different groups independently\n                res += max(0, x - prev)\n                prev = x\n            return res\n        def sign(i: int):\n            x = diffs[i]\n            return 0 if x == 0 else x / abs(x)\n        res = 0\n        start = 0\n        for i, x in enumerate(nums):\n            if i + 1 == len(nums) or sign(i) != sign(i + 1):\n                res += process_group(start, i + 1)\n                start = i + 1\n\n        return res\n                \n            \n\n        # [2, 2, -2, 1, -2, 2, 2] -- is there ever a reason to do an operation on a subarray with both signs?\n        # it seems like the answer is probably no\n\n",
    "submit_ts": "1721530672",
    "subm_id": "1327940475"
}