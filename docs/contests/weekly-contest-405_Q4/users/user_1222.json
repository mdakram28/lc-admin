{
    "username": "kalwayssleep",
    "submission": "\n#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minimum_cost;\n    \n    TrieNode() : minimum_cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insertWord(const string& word, int cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            if (!current->children.count(c)) {\n                current->children[c] = new TrieNode();\n            }\n            current = current->children[c];\n        }\n        current->minimum_cost = min(current->minimum_cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int target_length = target.size();\n        Trie trie;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], costs[i]);\n        }\n        \n        vector<int> dp(target_length + 1, INT_MAX);\n        dp[0] = 0; \n        \n        for (int start = 0; start < target_length; ++start) {\n            if (dp[start] == INT_MAX) continue; \n            TrieNode* current_node = trie.root;\n            \n            for (int end = start; end < target_length; ++end) {\n                char current_char = target[end];\n                \n                if (!current_node->children.count(current_char)) break;\n                \n                current_node = current_node->children[current_char];\n                \n                if (current_node->minimum_cost != INT_MAX) {\n                    dp[end + 1] = min(dp[end + 1], dp[start] + current_node->minimum_cost);\n                }\n            }\n        }\n        \n        return dp[target_length] == INT_MAX ? -1 : dp[target_length];\n    }\n};\n\n",
    "submit_ts": "1720322820",
    "subm_id": "1312359946"
}