{
    "username": "laughing-parepvg",
    "submission": "class BIT:\n    \"\"\"\u5355\u70b9\u4fee\u6539,\u533a\u95f4\u548c\u67e5\u8be2\"\"\"\n\n    __slots__ = \"size\", \"bit\", \"tree\"\n\n    def __init__(self, n: int):\n        self.size = n\n        self.bit = n.bit_length()\n        self.tree = [0]*(n+1)\n\n    def add(self, index: int, delta: int) -> None:\n        # index \u5fc5\u987b\u5927\u4e8e0\n        while index <= self.size:\n            self.tree[index]+=delta\n            index += index & -index\n\n    def _query(self, index: int) -> int: \n        res = 0\n        while index > 0:\n            res += self.tree[index]\n            index -= index & -index\n        return res\n\n    def query(self, left: int, right: int) -> int:\n        return self._query(right) - self._query(left - 1)\n        \n    def bisectLeft(self, k: int) -> int:\n        \"\"\"\u8fd4\u56de\u7b2c\u4e00\u4e2a\u524d\u7f00\u548c\u5927\u4e8e\u7b49\u4e8ek\u7684\u4f4d\u7f6epos\n        1 <= pos <= self.size + 1\n        \"\"\"\n        curSum, pos = 0, 0\n        for i in range(self.bit, -1, -1):\n            nextPos = pos + (1 << i)\n            if nextPos <= self.size and curSum + self.tree[nextPos] < k:\n                pos = nextPos\n                curSum += self.tree[pos]\n        return pos + 1\nclass Solution:\n    def countOfPeaks(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        n=len(a)\n        a=[inf,inf]+a+[inf,inf]\n        \n        res=[]\n        bit=BIT(n+5)\n        for i in range(1,n+3):\n            if a[i]>a[i-1] and a[i]>a[i+1]:\n                bit.add(i,1)\n        for i in range(len(queries)):\n            op,x,y=queries[i]\n            if op==1:\n                x+=2\n                y+=2\n                ans=bit.query(x,y)\n                if a[x]>a[x-1] and a[x]>a[x+1]:\n                    ans-=1\n                if x!=y and a[y]>a[y+1] and a[y]>a[y-1]:\n                    ans-=1\n                res.append(ans)\n            else:\n                x+=2\n                for nx in [x-1,x,x+1]:\n                    if a[nx]>a[nx-1] and a[nx]>a[nx+1]:\n                        bit.add(nx,-1)\n                a[x]=y\n                for nx in [x-1,x,x+1]:\n                    if a[nx]>a[nx-1] and a[nx]>a[nx+1]:\n                        bit.add(nx,1)\n        return res",
    "submit_ts": 1718506834.0
}