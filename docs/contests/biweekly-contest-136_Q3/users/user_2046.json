{
    "username": "Yogender_K26",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int flips = 0;\n\n        // Adjust for center cell in odd dimensions\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            flips += (grid[rows / 2][cols / 2] == 1) ? 1 : 0;\n        }\n\n        // Calculate flips needed for rows and columns\n        vector<int> flipCount(3, 0); // flipCount[0], flipCount[1], flipCount[2]\n        if (rows % 2 == 1) {\n            flipCount = countFlipsForCenterRow(grid, cols, rows / 2);\n        }\n\n        if (cols % 2 == 1) {\n            flipCount = countFlipsForCenterColumn(grid, rows, cols / 2, flipCount);\n        }\n\n        // Adjust based on flips needed for center row and column\n        flips += computeCenterAdjustments(flipCount);\n\n        // Handle flips for 2x2 blocks\n        flips += computeBlockAdjustments(grid, rows, cols);\n\n        return flips;\n    }\n\nprivate:\n    vector<int> countFlipsForCenterRow(vector<vector<int>>& grid, int cols, int rowIndex) {\n        vector<int> flipCount(3, 0);\n        int left = 0;\n        int right = cols - 1;\n        while (left < right) {\n            int sum = grid[rowIndex][left] + grid[rowIndex][right];\n            flipCount[sum]++;\n            left++;\n            right--;\n        }\n        return flipCount;\n    }\n\n    vector<int> countFlipsForCenterColumn(vector<vector<int>>& grid, int rows, int colIndex, vector<int>& flipCount) {\n        int top = 0;\n        int bottom = rows - 1;\n        while (top < bottom) {\n            int sum = grid[top][colIndex] + grid[bottom][colIndex];\n            flipCount[sum]++;\n            top++;\n            bottom--;\n        }\n        return flipCount;\n    }\n\n    int computeCenterAdjustments(vector<int>& flipCount) {\n        if (flipCount[2] % 2 == 1) {\n            return (flipCount[1] > 0) ? flipCount[1] : 2;\n        }\n        return flipCount[1];\n    }\n\n    int computeBlockAdjustments(vector<vector<int>>& grid, int rows, int cols) {\n        int blockFlips = 0;\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int a = grid[i][j];\n                int b = grid[rows - 1 - i][j];\n                int c = grid[i][cols - 1 - j];\n                int d = grid[rows - 1 - i][cols - 1 - j];\n\n                int sum = a + b + c + d;\n                if (sum != 0 && sum != 4) {\n                    blockFlips += min(sum, 4 - sum);\n                }\n            }\n        }\n        return blockFlips;\n    }\n};\n",
    "submit_ts": "1722700162",
    "subm_id": "1343233520"
}