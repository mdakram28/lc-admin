{
    "username": "hqf418",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        // 0 0 3 2   1 3  3 3 4 4\n        int n = nums.length;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < n / 2; i ++) {\n            int diff = Math.abs(nums[i] - nums[n - i - 1]);\n            map.put(diff, map.getOrDefault(diff, 0) + 1);\n        }\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n        for (int key : map.keySet()) {\n            pq.offer(new int[] {map.get(key), key});\n        }\n        int min = n;\n        while (!pq.isEmpty()) {\n            int[] top = pq.poll();\n            if (top[1] <= k / 2) {\n                min = Math.min(min, (n / 2 - top[0]));\n                return min;\n            }\n            int change = 0;\n            for (int i = 0; i < n / 2; i ++) {\n                int l = nums[i], r = nums[n - i - 1];\n                int diff = Math.abs(l - r);\n                if (diff != top[1]) {\n                    change ++;\n                    if (l + top[1] > k && l - top[1] < 0 && r + top[1] > k && r - top[1] < 0) {\n                        change ++;\n                    }\n                }\n            }\n            min = Math.min(min, change);\n        }\n        return min;\n    }\n}",
    "submit_ts": "1721488533",
    "subm_id": "1327425232"
}