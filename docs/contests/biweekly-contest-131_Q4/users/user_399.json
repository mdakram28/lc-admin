{
    "username": "kaname_asuka",
    "submission": "from sortedcontainers import SortedList\nclass Seg_Tree:\n    def __init__(self, n):\n        msb = self.msb(n)\n        if n == (1 << msb):\n            new_n = n\n        else:\n            new_n = (1 << (msb + 1))\n        tree = [0] * (2 * new_n)\n        self.n = new_n\n        self.tree = tree\n\n    @staticmethod\n    def msb(n):\n        ans = 0\n        while n:\n            n = n >> 1\n            ans += 1\n        return ans\n    \n    def range_q(self, a, b):\n        a += self.n\n        b += self.n\n        ans = -inf\n        while a <= b:\n            if a % 2 == 1:\n                ans = max(ans, self.tree[a])\n                a += 1\n            if b % 2 == 0:\n                ans = max(ans, self.tree[b])\n                b -= 1\n            a = a >> 1\n            b = b >> 1\n        return ans\n    \n    def update(self, k, x):\n        k += self.n\n        self.tree[k] = x\n        k //= 2\n        while k >= 1:\n            self.tree[k] = max(self.tree[2 * k], self.tree[2 * k + 1])\n            k //= 2\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        ans = []\n        blocks = SortedList()\n        N = 1 + min(5 * 10**4, 3 * len(queries)) \n        tree = Seg_Tree(N)\n        for q in queries:\n            if q[0] == 1:\n                if len(blocks) == 0:\n                    blocks.add(q[1])\n                    tree.update(q[1], q[1])\n                else:\n                    idx = blocks.bisect_left(q[1])\n                    if idx == 0:\n                        tree.update(blocks[0], blocks[0] - q[1])\n                        tree.update(q[1], q[1])\n                    elif idx == len(blocks):\n                        tree.update(q[1], q[1] - blocks[-1])\n                    else:\n                        tree.update(q[1], q[1] - blocks[idx - 1])\n                        tree.update(blocks[idx], blocks[idx] - q[1])\n                    blocks.add(q[1])\n            else:\n                x, size = q[1], q[2]\n                idx = blocks.bisect_left(x)\n                if idx == 0:\n                    ans.append(x >= size)\n                else:\n                    max_seg = max(x - blocks[idx - 1], tree.range_q(0, blocks[idx - 1]))\n                    ans.append(max_seg >= size)\n        return ans",
    "submit_ts": 1716652389.0
}