{
    "username": "silvernarcissus",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        DynamicSegmentSumTree tree = new DynamicSegmentSumTree();\n        tree.modify(1, n - 1, 1);\n        \n        int m = queries.length;\n        int[] res = new int[m];\n        for(int i = 0; i < m; i++){\n            tree.modify(queries[i][0] + 1, queries[i][1] - 1, 0);\n            res[i] = tree.query(0, n);\n        }\n        \n        \n        return res;\n    }\n}\n\n\nclass DynamicSegmentSumTree {\n  private Node root = new Node(0, 1_000_01);\n\n  public DynamicSegmentSumTree() {\n\n  }\n\n  public void modify(int l, int r, int v) {\n    modify(l, r, v, root);\n  }\n\n  public void modify(int l, int r, int v, Node node) {\n    if (l > r) {\n      return;\n    }\n    if (node.l >= l && node.r <= r) {\n      node.v = (node.r - node.l + 1) * v;\n      node.add = v;\n      node.changed = true;\n      return;\n    }\n    pushdown(node);\n    if (l <= node.mid) {\n      modify(l, r, v, node.left);\n    }\n    if (r > node.mid) {\n      modify(l, r, v, node.right);\n    }\n    pushup(node);\n  }\n\n  public int query(int l, int r) {\n    return query(l, r, root);\n  }\n\n  public int query(int l, int r, Node node) {\n    if (l > r) {\n      return 0;\n    }\n    if (node.l >= l && node.r <= r) {\n      return node.v;\n    }\n    pushdown(node);\n    int v = 0;\n    if (l <= node.mid) {\n      v += query(l, r, node.left);\n    }\n    if (r > node.mid) {\n      v += query(l, r, node.right);\n    }\n    return v;\n  }\n\n  public void pushup(Node node) {\n    node.v = node.left.v + node.right.v;\n  }\n\n  public void pushdown(Node node) {\n    if (node.left == null) {\n      node.left = new Node(node.l, node.mid);\n    }\n    if (node.right == null) {\n      node.right = new Node(node.mid + 1, node.r);\n    }\n    if (node.changed) {\n      Node left = node.left, right = node.right;\n      left.add = node.add;\n      right.add = node.add;\n      left.v = (left.r - left.l + 1) * node.add;\n      right.v = (right.r - right.l + 1) * node.add;\n      left.changed = true;\n      right.changed = true;\n      node.add = 0;\n      node.changed = false;\n    }\n  }\n\n  class Node {\n\n    Node left;\n    Node right;\n    int l;\n    int r;\n    int mid;\n    int v;\n    int add;\n    boolean changed;\n\n    public Node(int l, int r) {\n      this.l = l;\n      this.r = r;\n      this.mid = (l + r) >> 1;\n    }\n  }\n}\n\n",
    "submit_ts": "1722741677",
    "subm_id": "552339725"
}