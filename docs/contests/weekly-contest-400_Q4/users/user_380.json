{
    "username": "atulsoam5",
    "submission": "class Solution {\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n        build(nums);\n    }\n\n    int rangeAND(int left, int right) {\n        left += n;\n        right += n + 1;\n        int result = INT_MAX;\n        while (left < right) {\n            if (left % 2 == 1) {\n                result &= tree[left];\n                left++;\n            }\n            if (right % 2 == 1) {\n                right--;\n                result &= tree[right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n        return result;\n    }\n\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums) {\n        for (int i = 0; i < n; i++) {\n            tree[i + n] = nums[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n};\n\nint minAbsDifference(vector<int>& nums, int k) {\n    int n = nums.size();\n    SegmentTree segTree(nums);\n    int minDiff = INT_MAX;\n\n    // Use a sliding window with binary search\n    for (int i = 0; i < n; ++i) {\n        int left = i, right = n - 1, bestDiff = INT_MAX;\n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            int currentAND = segTree.rangeAND(i, mid);\n            int diff = abs(currentAND - k);\n            bestDiff = min(bestDiff, diff);\n            if (diff == 0) {\n                return 0;  // Early exit if perfect match is found\n            }\n            if (currentAND >= k) {\n                left = mid + 1;  // Expand the range\n            } else {\n                right = mid - 1;  // Shrink the range\n            }\n        }\n        minDiff = min(minDiff, bestDiff);\n    }\n\n    return minDiff;\n}\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        return minAbsDifference(nums , k);\n    }\n};",
    "submit_ts": 1717298265.0
}