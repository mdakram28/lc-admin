{
    "username": "zokumyoin",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    public int numberOfSubstrings(String s) {\n\n        int N = s.length();\n        int[] prevZero = new int[N];\n        int[] nextZero = new int[N];\n        Arrays.fill(prevZero, -1);\n        Arrays.fill(nextZero, N);\n        // TODO: init\n\n        int prev = -1;\n        for (int i = 0; i < N; i++) {\n            prevZero[i] = prev;\n            if (s.charAt(i) == '0') {\n                prev = i;\n            }\n        }\n        int next = N;\n        for (int i = N - 1; i >= 0; i--) {\n            nextZero[i] = next;\n            if (s.charAt(i) == '0') {\n                next = i;\n            }\n        }\n\n\n        int ans = 0;\n\n        // count all 1s\n        for (int i = 0; i < N; i++) {\n            if (s.charAt(i) == '1') {\n                ans += nextZero[i] - i;\n\n            }\n        }\n\n        for (int z = 1; z * z + z <= N; z++) {\n            int zero = 0;\n            int j = 0;\n            while (j < N && zero < z) {\n                if (s.charAt(j) == '0') {\n                    zero++;\n                }\n                j++;\n            }\n            if (zero < z) {\n                break;\n            }\n            j--;\n            int i = 0;\n            while (s.charAt(i) == '1') {\n                i++;\n            }\n\n            int left = i - prevZero[i] - 1;\n            int right = nextZero[j] - j - 1;\n            int middle = j - i + 1 - z;\n\n            ans += compute(left, right, middle, z * z);\n\n            // System.out.printf(\"i=%d j=%d left=%d r=%d m=%d z=%d, cpt=%d\\n\", i, j, left, right, middle, z, compute(left, right, middle, z * z));\n\n            while (true) {\n                i = nextZero[i];\n                j = nextZero[j];\n                if (j >= N) {\n                    break;\n                }\n\n                left = i - prevZero[i] - 1;\n                right = nextZero[j] - j - 1;\n                middle = j - i + 1 - z;\n                ans += compute(left, right, middle, z * z);\n\n\n                // System.out.printf(\"i=%d j=%d left=%d r=%d m=%d z=%d, cpt=%d\\n\", i, j, left, right, middle, z, compute(left, right, middle, z * z));\n            }\n        }\n        return ans;\n\n    }\n\n    private int compute(int l, int r, int m, int total) {\n        if (l + r + m < total) {\n            return 0;\n        }\n        if (m >= total) {\n            return (l + 1) * (r + 1);\n        }\n        return compute(l, r, total - m);\n    }\n\n    private int compute(int l, int r, int total) {\n        if (l + r < total) {\n            return 0;\n        }\n        if (l + r == total) {\n            return 1;\n        }\n        int lmin = Math.max(0, total - r);\n\n        // lmin -> r\n        // lmin + 1 -> r, r-1\n        // ...\n        // l -> total - l ... r\n        \n        // ->2 1 1\n        // 0+1\n        // 1+0, 1+1\n        // 2+0, 2+1\n\n        int ans = 0;\n        for (int ll = lmin; ll <= l; ll++) {\n            int rmin = Math.max(0, total - ll);\n            ans += r - rmin + 1;\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1722137488",
    "subm_id": "1335765240"
}