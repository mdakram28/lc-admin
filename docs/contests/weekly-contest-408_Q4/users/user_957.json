{
    "username": "simpcoder02",
    "submission": "using ll = long long int;\n\nclass DSU {\npublic:\n    ll n;\n    vector<ll> parent, rank;\n    \n    DSU(int n) {\n        parent.resize(n); rank.resize(n, 1);\n        for(int i = 0; i < n; i ++)\n            parent[i] = i;\n    }\n    \n    ll get_parent(int a) {\n        return a == parent[a] ? a : get_parent(parent[a]);\n    }\n    \n    void mergee(int a, int b) {\n        a = get_parent(a);\n        b = get_parent(b);\n        if(a == b) return;\n        if(rank[a] < rank[b]) parent[a] = b;\n        else if(rank[a] > rank[b]) parent[b] = a;\n        else {\n            parent[b] = a;\n            rank[a] ++;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    \n    bool overlap(ll x1, ll y1, ll r1, ll x2, ll y2, ll r2) {\n        ll d1 = abs(x1 - x2) * abs(x1 - x2) + abs(y1 - y2) * abs(y1 - y2);\n        ll d2 = (r1 + r2) * (r1 + r2);\n        return d1 <= d2;\n    }\n    \n    bool inside(ll xc, ll yc, ll r, ll x, ll y) {\n        ll p = abs(x - xc) * abs(x - xc) + abs(y - yc) * abs(y - yc) - (r*r);\n        if(p <= 0) return true;\n        return false;\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        for(int i = 0; i < n; i ++) {\n            ll cx = circles[i][0], cy = circles[i][1], r = circles[i][2];\n            if(inside(cx, cy, r, 0, 0)) return false;\n            if(inside(cx, cy, r, X, Y)) return false;\n        }\n        DSU dsu(n + 2);\n        for(int i = 0; i < n; i ++) {\n            for(int j = i + 1; j < n; j ++) {\n                if(overlap(circles[i][0], circles[i][1], circles[i][2], circles[j][0], circles[j][1], circles[j][2])) {\n                    dsu.mergee(i, j);\n                }\n            }\n        }\n        for(int i = 0; i < n; i ++) {\n            ll cx = circles[i][0], cy = circles[i][1], r = circles[i][2];\n            ll ty = cy + r, by = cy - r;\n            if(Y >= by and Y <= ty) dsu.mergee(i, n);\n            ll lx = cx - r, rx = cx + r;\n            if(lx <= 0 and rx >= 0) dsu.mergee(i, n);\n        }\n        for(int i = 0; i < n; i ++) {\n            ll cx = circles[i][0], cy = circles[i][1], r = circles[i][2];\n            ll ty = cy + r, by = cy - r;\n            if(by <= 0 and ty >= 0) dsu.mergee(i, n + 1);\n            ll lx = cx - r, rx = cx + r;\n            if(X >= lx and X <= rx) dsu.mergee(i, n + 1);\n        }\n        ll p = dsu.get_parent(n), q = dsu.get_parent(n + 1);\n        if(p == q) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722138517",
    "subm_id": "1335792738"
}