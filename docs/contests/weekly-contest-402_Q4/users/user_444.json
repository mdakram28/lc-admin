{
    "username": "strange-davinciper",
    "submission": "\ntemplate <class T = int> struct fenwick { // 0 or 1-indexed, doesn't matter\n    vector<T> bit, val;\n    int n;\n\n    fenwick() {};\n\n    fenwick(int N) { // Maximum position allowed in fenwick tree\n        n = N+1; // we will offset all positions by 1 to handle 0-indexed\n        bit.resize(n+1);\n        val.resize(n+1);\n    }\n\n    void add(int pos, T delta) {\n        val[pos] += delta;\n        for (pos++; pos <= n; pos += pos&-pos) bit[pos] += delta;\n    }\n\n    void set(int pos, T v) {\n        add(pos, v - val[pos]);\n    }\n\n    T query(int pos) { // return sum of positions <= x\n        T res = 0;\n        for (pos++; pos; pos -= pos&-pos) res += bit[pos];\n        return res;\n    }\n\n    T query(int l, int r) { // return sum between [l, r]\n        return query(r) - query(l-1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& A, vector<vector<int>>& queries) {\n        int N = A.size();\n        auto fw = fenwick(N);\n        \n        for (int i = 1; i < N - 1; ++i) {\n            fw.set(i, A[i] > A[i - 1] && A[i] > A[i + 1]);\n        }\n        vector<int> res;\n        for (const auto& q : queries) {\n            auto t = q[0], i = q[1], b = q[2];\n            if (t == 1) {\n                auto x = fw.query(i, b) - (fw.query(i) - fw.query(i - 1)) - (b != i ? (fw.query(b) - fw.query(b - 1)) : 0);\n                res.push_back(x);\n            } else {\n                A[i] = b;\n                for (int j = max(1, i - 1); j <= min(i + 1, N - 2); ++j)\n                    fw.set(j, A[j] > A[j - 1] && A[j] > A[j + 1]);\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1718506982",
    "subm_id": "539778486"
}