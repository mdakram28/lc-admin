{
    "username": "a0518",
    "submission": "class Node:\n    def __init__(self):\n        self.cost = float(\"inf\")\n        self.child = {}\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        m, n = len(words), len(target)\n        mp = defaultdict(lambda: float(\"inf\"))\n        for i, word in enumerate(words): mp[word] = min(mp[word], costs[i])\n        words = [word for word in mp]\n\n        trie = Node()\n        for i, word in enumerate(words):\n            curr = trie\n            for j in range(len(word)):\n                if word[j] not in curr.child:\n                    curr.child[word[j]] = Node()\n                curr = curr.child[word[j]] \n            curr.cost = mp[word]\n        \n        def go(i):\n            curr = trie\n            for j in range(i, n):\n                if target[j] not in curr.child: break\n                cost = curr.child[target[j]].cost\n                dp[i] = min(dp[i], cost + (dp[j+1] if j+1 < n else 0))\n                curr = curr.child[target[j]]\n        \n        dp = [float(\"inf\") for _ in range(n)]\n        for i in reversed(range(n)): go(i)\n        \n        return dp[0] if dp[0] != float(\"inf\") else -1\n        ",
    "submit_ts": "1720322860",
    "subm_id": "1312360968"
}