{
    "username": "Godisdead",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int len = target.size();\n        vector<int> min_cost(len + 1, INT_MAX);\n        min_cost[0] = 0;\n\n        // Trie data structure to store words and their costs\n        struct TrieNode {\n            unordered_map<char, TrieNode *> childs;\n            vector<pair<int, int>> ends;\n        };\n\n        class Trie {\n        public:\n            TrieNode *root;\n            \n            Trie() {\n                root = new TrieNode();\n            }\n\n            void insert(const string &word, int idx, int cst) {\n                TrieNode *node = root;\n                for (char c : word) {\n                    if (!node->childs.count(c))\n                        node->childs[c] = new TrieNode();\n                    node = node->childs[c];\n                }\n                node->ends.push_back({idx, cst});\n            }\n        };\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        // Dynamic programming to find minimum cost\n        for (int i = 0; i < len; ++i) {\n            if (min_cost[i] != INT_MAX) {\n                TrieNode *node = trie.root;\n                bool found = true;\n                for (int j = i; j < len; ++j) {\n                    if (!found) break;\n                    if (!node->childs.count(target[j])) found = false;\n                    if (found) {\n                        node = node->childs[target[j]];\n                        for (auto &p : node->ends) {\n                            int word_idx = p.first;\n                            int word_cst = p.second;\n                            int word_len = words[word_idx].size();\n                            int next_len = i + word_len;\n                            if (next_len <= len) {\n                                min_cost[next_len] = min(min_cost[next_len], min_cost[i] + word_cst);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (min_cost[len] == INT_MAX)\n            return -1;\n\n        return min_cost[len];\n    }\n};\n",
    "submit_ts": "1720323365",
    "subm_id": "1312373748"
}