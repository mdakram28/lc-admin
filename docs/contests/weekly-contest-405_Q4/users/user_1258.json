{
    "username": "shishirkushwah",
    "submission": "struct TrieNode {\n    TrieNode* links[26];\n    int value;\n    \n    TrieNode() : value(INT_MAX) {\n        fill(begin(links), end(links), nullptr);\n    }\n\n    bool containsKey(char ch) {\n        return (links[ch - 'a'] != NULL);\n    }\n    \n    TrieNode* get(char ch) {\n        return links[ch - 'a'];\n    }\n    \n    void put(char ch, TrieNode* node) {\n        links[ch - 'a'] = node;\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->containsKey(ch)) {\n                node->put(ch, new TrieNode());\n            }\n            node = node->get(ch);\n        }\n        node->value = min(node->value, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(const string& target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->containsKey(target[j])) break;\n                node = node->get(target[j]);\n                if (node->value != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->value);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323492",
    "subm_id": "1312376921"
}