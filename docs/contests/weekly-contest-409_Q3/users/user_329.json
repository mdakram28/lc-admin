{
    "username": "22cs01048",
    "submission": "#include <vector>\n#include <set>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // Initialize the dp vector\n        vector<int> dp(n, 0);\n        for (int i = 1; i < n; ++i) {\n            dp[i] = dp[i - 1] + 1;\n        }\n\n        set<int> s;\n        for (int i = 0; i < n; ++i) {\n            s.insert(i);\n        }\n\n        vector<int> ans;\n\n        for (const auto& query : queries) {\n            int l = query[0];\n            int r = query[1];\n\n            auto lb = s.lower_bound(l+1);\n            auto ub = s.lower_bound(r);\n\n            // Erase the range [l, r]\n            s.erase(lb, ub);\n\n            // Calculate the shortest distance\n            // int min_distance = n; // Initialize with a large number\n            // if (!s.empty()) {\n            //     auto it = s.begin();\n            //     int prev = *it;\n            //     ++it;\n\n            //     while (it != s.end()) {\n            //         min_distance = min(min_distance, *it - prev);\n            //         prev = *it;\n            //         ++it;\n            //     }\n            // }\n            // for(auto x : s)cout<<x<<\" \";cout<<\"\\n\";\n\n            ans.push_back(s.size()-1);\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722740299",
    "subm_id": "1343716244"
}