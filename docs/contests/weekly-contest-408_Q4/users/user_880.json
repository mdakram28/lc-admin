{
    "username": "utkarsh_anand_",
    "submission": "class Solution {\npublic:\n    int bfs(const vector<vector<int>>& g, int start, int t1, int t2, int n) {\n        queue<int> q;\n        vector<bool> vis(n+4, false);\n        q.push(start);\n        vis[start] = true;\n\n        while(!q.empty()){\n            int a=q.front();\n            q.pop();\n            for(int b:g[a]){\n                if(!vis[b]){\n                    q.push(b);\n                    vis[b]=true;\n                }\n            }\n        }\n        if(vis[t1] || vis[t2]){\n            return 1;\n        } \n        else{\n            return 0;\n        }\n    }\n    \n    vector<vector<int>> constructGraph(int X, int Y, const vector<vector<int>>& circles){\n        int c=circles.size();\n        vector<vector<int>> g(c+4);\n\n        for(int i=0; i<c; ++i){\n            if(circles[i][0]<=circles[i][2]){\n                g[c].push_back(i);\n                g[i].push_back(c);\n            }\n            if(X-circles[i][0]<=circles[i][2]){\n                g[c+2].push_back(i);\n                g[i].push_back(c+2);\n            }\n            if(circles[i][1]<=circles[i][2]){\n                g[c+1].push_back(i);\n                g[i].push_back(c+1);\n            }\n            if(Y-circles[i][1]<=circles[i][2]){\n                g[c+3].push_back(i);\n                g[i].push_back(c+3);\n            }\n            for(int j=i+1; j<c; ++j){\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) +\n                                       pow(circles[i][1] - circles[j][1], 2));\n                int rsum = circles[i][2]+circles[j][2];\n                if (rsum>=distance){\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        return g;\n    }\n    \n    bool isCornerReachable(int X, int Y, const vector<vector<int>>& g){\n        int c=g.size()-4;\n        int blk=0;\n        blk = max(blk, bfs(g, c, c + 1, c + 2, c + 4));\n        blk = max(blk, bfs(g, c + 3, c + 2, c + 1, c + 4));\n        return blk==0;\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<vector<int>> g = constructGraph(X, Y, circles);\n        return isCornerReachable(X, Y, g);\n    }\n};",
    "submit_ts": "1722138874",
    "subm_id": "1335801903"
}