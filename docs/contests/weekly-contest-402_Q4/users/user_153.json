{
    "username": "shakibahmed01999",
    "submission": "class SegmentTree{\n    vector<int> arr, tree;\n    int n;\n    \n    int findCurr(int start, int end, int mid){\n        if(start == end)\n            return 0;\n        \n        if(mid - 1 >= start and arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1])\n            return 1;\n        \n        if(mid + 2 <= end and arr[mid + 1] > arr[mid] and arr[mid + 1] > arr[mid + 2])\n            return 1;\n        \n        return 0;\n        \n    }\n    \n    void build(int start, int end, int treeNode){\n        if(start == end){\n            tree[treeNode] = 0;\n            return;\n        }\n        \n        int mid = (start + end) / 2;\n        build(start, mid, 2 * treeNode);\n        build(mid + 1, end, 2 * treeNode + 1);\n        \n        tree[treeNode] = tree[2 * treeNode] + tree[2 * treeNode + 1] + findCurr(start, end, mid);\n    }\n    \n    void update(int start, int end, int treeNode, int idx, int val){\n        if(start == end){\n            arr[idx] = val;\n            tree[treeNode] = 0;\n            return;\n        }\n        \n        int mid = (start + end) / 2;\n        if(idx <= mid)\n            update(start, mid, 2 * treeNode, idx, val);\n        else\n            update(mid + 1, end, 2 * treeNode + 1, idx, val);\n        \n        tree[treeNode] = tree[2 * treeNode] + tree[2 * treeNode + 1] + findCurr(start, end, mid);\n    }\n    \n    int query(int start, int end, int treeNode, int left, int right){\n        if(start >= left and end <= right)\n            return tree[treeNode];\n        \n        if(start > right or end < left)\n            return 0;\n        \n        int mid = (start + end) / 2;\n        int leftSum = query(start, mid, 2 * treeNode, left, right),\n            rightSum = query(mid + 1, end, 2 * treeNode + 1, left, right);\n        \n        \n        int sum = leftSum + rightSum;\n        \n        if(mid - 1 >= start and arr[mid] > arr[mid - 1] and arr[mid] > arr[mid + 1] and mid - 1 >= left and mid + 1 <= right)\n            sum++;\n        \n        if(mid + 2 <= end and arr[mid + 1] > arr[mid] and arr[mid + 1] > arr[mid + 2] and mid >= left and mid + 2 <= right)\n            sum++;\n        \n        return sum;\n        \n    }\n    \npublic:\n    SegmentTree(vector<int> &nums){\n        int n = nums.size();\n        this->n = n;\n        arr = nums;\n        tree.resize(4 * n);\n        build(0, n - 1, 1);\n    }\n    \n    void update(int idx, int val){\n        update(0, n - 1, 1, idx, val);\n    }\n    \n    int query(int left, int right){\n        return query(0, n - 1, 1, left, right);\n    }\n    \n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        \n        vector<int> res;\n        \n        for(int i = 0; i < queries.size(); i++){\n            int t = queries[i][0], idx = queries[i][1], val = queries[i][2];\n            if(t == 2){\n                st.update(idx, val);\n            }\n            else{\n                res.push_back(st.query(idx, val));\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1718506866.0
}