{
    "username": "kocyte",
    "submission": "class Solution {\npublic:\n    int MAXN = 50005;\n    int n = MAXN, t[4*50005] = {0};\n\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) \n            return 0;\n        if (l == tl && r == tr) {\n            return t[v];\n        }\n        int tm = (tl + tr) / 2;\n        return max(query(v*2, tl, tm, l, min(r, tm))\n               , query(v*2+1, tm+1, tr, max(l, tm+1), r));\n    }\n    void update(int v, int tl, int tr, int pos, int new_val) {\n        if (tl == tr) {\n            t[v] = new_val;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                update(v*2, tl, tm, pos, new_val);\n            else\n                update(v*2+1, tm+1, tr, pos, new_val);\n            t[v] = max(t[v*2], t[v*2+1]);\n        }\n    }\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> set;\n        set.insert(0);\n        \n        vector<bool> ret;\n        \n        for (int i = 0; i < queries.size(); i++) {\n            if (queries[i][0] == 1) {\n                auto it = set.upper_bound(queries[i][1]);\n                \n                if (it != set.end()) {\n                    int v = *it;\n                    update(1, 0, n - 1, v, v - queries[i][1]);\n\n                }\n                \n                it--;\n                int x = *it;\n                \n                set.insert(queries[i][1]);\n                update(1, 0, n - 1, queries[i][1], queries[i][1] - x);\n                // std::cout << queries[i][1] - x << \"a\\n\";\n            } else {\n                \n                auto it = set.upper_bound(queries[i][1]);\n                it--;\n                int x = *it;\n                \n                bool swap = set.count(queries[i][1]) == 0;\n                \n                \n                if (swap)\n                    update(1, 0, n - 1, queries[i][1], queries[i][1] - x);\n                \n                int ls = query(1, 0, n - 1, 0, queries[i][1]);\n                // std::cout << ls << \"\\n\";\n                if (ls >= queries[i][2])\n                    ret.push_back(true);\n                else\n                    ret.push_back(false);\n                \n                if (swap)\n                    update(1, 0, n - 1, queries[i][1], 0);\n\n            }\n        }\n        \n        return ret;\n        \n        \n    }\n};",
    "submit_ts": 1716651560.0
}