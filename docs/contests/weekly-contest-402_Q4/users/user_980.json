{
    "username": "Rakesh_898",
    "submission": "/*\u0950 \u092d\u0942\u0930\u094d\u092d\u0941\u0935\u0903 \u0938\u094d\u0935 \u0924\u0924\u094d\u0938\u0935\u093f\u0924\u0941\u0930\u094d\u0935\u0930\u0947\u0923\u094d\u092f\u0902\n\u092d\u0930\u094d\u0917\u094b \u0926\u0947\u0935\u0938\u094d\u092f \u0927\u0940\u092e\u0939\u093f\n\u0927\u093f\u092f\u094b \u092f\u094b \u0928\u0903 \u092a\u094d\u0930\u091a\u094b\u0926\u092f\u093e\u0924\u0965*/\n\n#include <iostream>\n#include <algorithm>\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#define ll long long int\n#define vi vector<ll>\n#define vec vector<int>\n#define vs vector<string>\n#define pb push_back\n#define forll for (ll i = 0; i < n; i++)\n#define forf(i, a, b) for (ll i = a; i < b; i++)\n#define forr(i, x, y) for (ll i = x; i >= y; i--)\n#define mod 1000000007\n// #define MOD 998244353\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate <class T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\nvector<ll> segTree;\nvoid build(vector<ll> &v, ll start, ll end, ll index)\n{\n    if (start == end)\n    {\n        if (start >= 1 && start < (v.size() - 1))\n        {\n            if (v[start] > v[start - 1] && v[start] > v[start + 1])\n            {\n                segTree[index] = 1;\n            }\n            else\n            {\n                segTree[index] = 0;\n            }\n        }\n        else\n        {\n            segTree[index] = 0;\n        }\n        return;\n    }\n    ll mid = (start + end) >> 1;\n    ll left = 2 * index;\n    ll right = 2 * index + 1;\n    build(v, start, mid, left);\n    build(v, mid + 1, end, right);\n    segTree[index] = segTree[left] + segTree[right];\n}\n\nvoid update(vector<ll> &v, ll start, ll end, ll index, ll pos, ll val)\n{\n    if (start == end)\n    {\n        v[pos] = val;\n        if (start >= 1 && start < (v.size() - 1))\n        {\n            if (v[start] > v[start - 1] && v[start] > v[start + 1])\n            {\n                segTree[index] = 1;\n            }\n            else\n            {\n                segTree[index] = 0;\n            }\n        }\n        else\n        {\n            segTree[index] = 0;\n        }\n        return;\n    }\n    ll mid = (start + end) >> 1;\n    ll left = 2 * index;\n    ll right = 2 * index + 1;\n    if (pos <= mid)\n    {\n        update(v, start, mid, left, pos, val);\n    }\n    else\n    {\n        update(v, mid + 1, end, right, pos, val);\n    }\n    segTree[index] = segTree[left] + segTree[right];\n}\n\nll query(ll start, ll end, ll index, ll l, ll r)\n{\n    // complete overlap\n    if (start >= l && end <= r)\n    {\n        return segTree[index];\n    }\n    // disjoint\n    if (l > end || r < start)\n    {\n        return 0;\n    }\n    ll mid = (start + end) >> 1;\n    ll left = 2 * index;\n    ll right = 2 * index + 1;\n    return query(start, mid, left, l, r) + query(mid + 1, end, right, l, r);\n}\n\nclass Solution\n{\npublic:\n    vector<int> countOfPeaks(vector<int> &nums, vector<vector<int>> &queries)\n    {\n        ll n = nums.size();\n        segTree.resize(5 * n + 10, 0);\n        vector<ll> v;\n        forll\n        {\n            v.push_back(nums[i] * 1ll);\n        }\n        build(v, 0, n - 1, 1);\n        vector<int> ans;\n        for (auto &it : queries)\n        {\n            if (it[0] == 1)\n            {\n                ll l = it[1] + 1;\n                ll r = it[2] - 1;\n                if (l > r)\n                {\n                    ans.push_back(0ll);\n                }\n                else\n                {\n                    ans.push_back(query(0, n - 1, 1, l, r));\n                }\n            }\n            else\n            {\n                ll pos = it[1];\n                ll val = it[2];\n                update(v, 0, n - 1, 1, pos, val);\n                if ((pos - 1) >= 0)\n                {\n                    update(v, 0, n - 1, 1, pos - 1, v[pos - 1]);\n                }\n                if ((pos + 1) <= n - 1)\n                {\n                    update(v, 0, n - 1, 1, it[1] + 1, v[pos + 1]);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718507723",
    "subm_id": "1289660494"
}