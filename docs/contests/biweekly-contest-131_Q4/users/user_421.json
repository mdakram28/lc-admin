{
    "username": "sfpotato",
    "submission": "const int N = 5e5 + 5, SZ = N << 2, INF = 0x7fffffff;\n\nint n;\nint a[N];\n\nstruct data {\n  int mx, mx2, mn, mn2, cmx, cmn, tmx, tmn, tad;\n  long long sum;\n} t[SZ];\n\nvoid pushup(int u) {\n  const int lu = u << 1, ru = u << 1 | 1;\n  t[u].sum = t[lu].sum + t[ru].sum;\n  if (t[lu].mx == t[ru].mx) {\n    t[u].mx = t[lu].mx, t[u].cmx = t[lu].cmx + t[ru].cmx;\n    t[u].mx2 = max(t[lu].mx2, t[ru].mx2);\n  } else if (t[lu].mx > t[ru].mx) {\n    t[u].mx = t[lu].mx, t[u].cmx = t[lu].cmx;\n    t[u].mx2 = max(t[lu].mx2, t[ru].mx);\n  } else {\n    t[u].mx = t[ru].mx, t[u].cmx = t[ru].cmx;\n    t[u].mx2 = max(t[lu].mx, t[ru].mx2);\n  }\n  if (t[lu].mn == t[ru].mn) {\n    t[u].mn = t[lu].mn, t[u].cmn = t[lu].cmn + t[ru].cmn;\n    t[u].mn2 = min(t[lu].mn2, t[ru].mn2);\n  } else if (t[lu].mn < t[ru].mn) {\n    t[u].mn = t[lu].mn, t[u].cmn = t[lu].cmn;\n    t[u].mn2 = min(t[lu].mn2, t[ru].mn);\n  } else {\n    t[u].mn = t[ru].mn, t[u].cmn = t[ru].cmn;\n    t[u].mn2 = min(t[lu].mn, t[ru].mn2);\n  }\n}\n\nvoid push_add(int u, int l, int r, int v) {\n  // \u66f4\u65b0\u52a0\u6cd5\u6807\u8bb0\u7684\u540c\u65f6\uff0c\u66f4\u65b0 $\\min$ \u548c $\\max$ \u6807\u8bb0\n  t[u].sum += (r - l + 1ll) * v;\n  t[u].mx += v, t[u].mn += v;\n  if (t[u].mx2 != -INF) t[u].mx2 += v;\n  if (t[u].mn2 != INF) t[u].mn2 += v;\n  if (t[u].tmx != -INF) t[u].tmx += v;\n  if (t[u].tmn != INF) t[u].tmn += v;\n  t[u].tad += v;\n}\n\nvoid push_min(int u, int tg) {\n  // \u6ce8\u610f\u6bd4\u8f83 $\\max$ \u6807\u8bb0\n  if (t[u].mx <= tg) return;\n  t[u].sum += (tg * 1ll - t[u].mx) * t[u].cmx;\n  if (t[u].mn2 == t[u].mx) t[u].mn2 = tg;  // !!!\n  if (t[u].mn == t[u].mx) t[u].mn = tg;    // !!!!!\n  if (t[u].tmx > tg) t[u].tmx = tg;        // \u66f4\u65b0\u53d6 $\\max$ \u6807\u8bb0\n  t[u].mx = tg, t[u].tmn = tg;\n}\n\nvoid push_max(int u, int tg) {\n  if (t[u].mn > tg) return;\n  t[u].sum += (tg * 1ll - t[u].mn) * t[u].cmn;\n  if (t[u].mx2 == t[u].mn) t[u].mx2 = tg;\n  if (t[u].mx == t[u].mn) t[u].mx = tg;\n  if (t[u].tmn < tg) t[u].tmn = tg;\n  t[u].mn = tg, t[u].tmx = tg;\n}\n\nvoid pushdown(int u, int l, int r) {\n  const int lu = u << 1, ru = u << 1 | 1, mid = (l + r) >> 1;\n  if (t[u].tad)\n    push_add(lu, l, mid, t[u].tad), push_add(ru, mid + 1, r, t[u].tad);\n  if (t[u].tmx != -INF) push_max(lu, t[u].tmx), push_max(ru, t[u].tmx);\n  if (t[u].tmn != INF) push_min(lu, t[u].tmn), push_min(ru, t[u].tmn);\n  t[u].tad = 0, t[u].tmx = -INF, t[u].tmn = INF;\n}\n\nvoid build(int u = 1, int l = 1, int r = n) {\n  t[u].tmn = INF, t[u].tmx = -INF;  // \u53d6\u6781\u9650\n  if (l == r) {\n    t[u].sum = t[u].mx = t[u].mn = a[l];\n    t[u].mx2 = -INF, t[u].mn2 = INF;\n    t[u].cmx = t[u].cmn = 1;\n    return;\n  }\n  int mid = (l + r) >> 1;\n  build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n  pushup(u);\n}\n\nvoid add(int L, int R, int v, int u = 1, int l = 1, int r = n) {\n  if (R < l || r < L) return;\n  if (L <= l && r <= R) return push_add(u, l, r, v);  // !!! \u5fd8 return\n  int mid = (l + r) >> 1;\n  pushdown(u, l, r);\n  add(L, R, v, u << 1, l, mid), add(L, R, v, u << 1 | 1, mid + 1, r);\n  pushup(u);\n}\n\nvoid tomin(int L, int R, int v, int u = 1, int l = 1, int r = n) {\n  if (R < l || r < L || t[u].mx <= v) return;\n  if (L <= l && r <= R && t[u].mx2 < v) return push_min(u, v);\n  int mid = (l + r) >> 1;\n  pushdown(u, l, r);\n  tomin(L, R, v, u << 1, l, mid), tomin(L, R, v, u << 1 | 1, mid + 1, r);\n  pushup(u);\n}\n\nvoid tomax(int L, int R, int v, int u = 1, int l = 1, int r = n) {\n  if (R < l || r < L || t[u].mn >= v) return;\n  if (L <= l && r <= R && t[u].mn2 > v) return push_max(u, v);\n  int mid = (l + r) >> 1;\n  pushdown(u, l, r);\n  tomax(L, R, v, u << 1, l, mid), tomax(L, R, v, u << 1 | 1, mid + 1, r);\n  pushup(u);\n}\n\nlong long qsum(int L, int R, int u = 1, int l = 1, int r = n) {\n  if (R < l || r < L) return 0;\n  if (L <= l && r <= R) return t[u].sum;\n  int mid = (l + r) >> 1;\n  pushdown(u, l, r);\n  return qsum(L, R, u << 1, l, mid) + qsum(L, R, u << 1 | 1, mid + 1, r);\n}\n\nlong long qmax(int L, int R, int u = 1, int l = 1, int r = n) {\n  if (R < l || r < L) return -INF;\n  if (L <= l && r <= R) return t[u].mx;\n  int mid = (l + r) >> 1;\n  pushdown(u, l, r);\n  return max(qmax(L, R, u << 1, l, mid), qmax(L, R, u << 1 | 1, mid + 1, r));\n}\n\nlong long qmin(int L, int R, int u = 1, int l = 1, int r = n) {\n  if (R < l || r < L) return INF;\n  if (L <= l && r <= R) return t[u].mn;\n  int mid = (l + r) >> 1;\n  pushdown(u, l, r);\n  return min(qmin(L, R, u << 1, l, mid), qmin(L, R, u << 1 | 1, mid + 1, r));\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        set<int> blocks;\n        blocks.insert(0);\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                blocks.insert(q[1]);\n            }\n        }\n        map<int, int> ind;\n        ind[0] = 0;\n        int k = 1;\n        for (auto it = blocks.begin(); it != blocks.end(); ) {\n            int l = *it;\n            it++;\n            if (it != blocks.end()) {\n                ind[*it] = k++;\n                a[ind[*it]] = *it-l;\n            }\n        }\n        n = blocks.size();\n        build();\n        for (int i = queries.size()-1; i >= 0; i--) {\n            auto q = queries[i];\n            if (q[0] == 1) {\n                auto it = blocks.find(q[1]);\n                it--;\n                int l = *it;\n                it++;it++;\n                if (it != blocks.end()) {\n                    tomax(ind[*it], N-1, *it-l);\n                }\n                blocks.erase(q[1]);\n            } else {\n                int x = q[1], sz = q[2];\n                auto it = blocks.upper_bound(x);\n                it--;\n                if (x-*it >= sz || qmax(0, ind[*it]) >= sz) {\n                    ans.push_back(true);\n                } else {\n                    ans.push_back(false);\n                }\n            }\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": 1716652327.0
}