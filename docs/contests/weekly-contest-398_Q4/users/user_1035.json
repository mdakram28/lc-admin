{
    "username": "stellarhuman09",
    "submission": "class Solution {\npublic:\n    int func(int curr,int k,int dec,int exp,map<vector<int>,int> &dp){\n        vector<int> state = {curr,dec,exp};\n        if(dp.find(state)!=dp.end()){\n            return dp[{curr,dec,exp}];\n        }\n        int tot = 0;\n        if(k==curr){\n            tot++;\n        }\n        if((curr-1)>k){\n            return dp[{curr,dec,exp}] = 0;\n        }\n        int ncurr = curr + pow(2,exp);\n        tot += func(ncurr,k,1,exp+1,dp);\n        if(dec>0 && curr>0){\n            tot += func(curr-1,k,0,exp,dp);\n        }\n        return dp[{curr,dec,exp}] = tot;\n    }\n    int waysToReachStair(int k) {\n        map<vector<int>,int> dp;\n        return func(1,k,1,0,dp);\n    }\n};",
    "submit_ts": 1716090111.0
}