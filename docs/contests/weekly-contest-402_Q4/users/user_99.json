{
    "username": "GoldenShadow5",
    "submission": "class Solution {\n    private static int N;\n    private static int[] BIT;\n    private static void update(int index, int add) {\n        while(index <= N) {\n            BIT[index] += add;\n            index += index&-index;\n        }\n    }\n    private static int query(int index) {\n        int sum = 0;\n        while(index > 0) {\n            sum += BIT[index];\n            index -= index&-index;\n        }\n        return sum;\n    }\n    private static boolean isPeak(int[] nums, int i) {\n        if(i <= 0 || i >= nums.length-1) {\n            return false;\n        }\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        N = nums.length;\n        BIT = new int[N+1];\n        for(int i = 1; i < nums.length-1; i++) {\n            if(isPeak(nums, i)) {\n                update(i+1, 1);\n            }\n        }\n        List<Integer> res = new ArrayList<>();\n        for(int[] q: queries) {\n            if(q[0] == 1) {\n                res.add(Math.max(0, query(q[2])-query(q[1]+1)));\n            } else {\n                int i = q[1];\n                int v = q[2];\n                for(int a = -1; a <= 1; a++) {\n                    if(isPeak(nums, i+a)) {\n                        update(i+a+1, -1);\n                    }\n                }\n                nums[i] = v;\n                for(int a = -1; a <= 1; a++) {\n                    if(isPeak(nums, i+a)) {\n                        update(i+a+1, 1);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": 1718506269.0
}