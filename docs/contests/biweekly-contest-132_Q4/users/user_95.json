{
    "username": "CoffeeRex",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        vector<vector<int>> dp(nums.size(), vector<int>(k+1, 0));\n        unordered_map<int, int> last_seen;\n        vector<int> best(k+1, 0);\n        int largest = 1;\n        \n        last_seen[nums[0]] = 0;\n        \n        for (int i = 0; i <= k; i++) {\n            dp[0][i] = 1;\n            best[i] = 1;\n        }\n        \n        for (int i = 1; i < nums.size(); i++) {\n            vector<int> new_best(k+1, 0);\n            int last = -1;\n            if (last_seen.find(nums[i]) != last_seen.end()) {\n                last = last_seen[nums[i]];\n            }\n            for (int j = k; j >= 0 ; j--) {\n                if (j == k) {\n                    if (last != - 1) dp[i][j] = dp[last][j] + 1;\n                    else {\n                        dp[i][j] = 1;\n                    }\n                }\n                \n                else {\n                    if (last != -1) {\n                        dp[i][j] = max(best[j+1], dp[last][j]) + 1;\n                    }\n                    \n                    else {\n                        dp[i][j] = best[j+1] + 1;\n                    }\n                }               \n                \n                new_best[j] = max(best[j], dp[i][j]);\n                largest = max(largest, dp[i][j]);\n            }\n            \n            last_seen[nums[i]] = i;\n            best = new_best;\n        }\n        \n        /*cout << \"dp array\" << endl;\n        \n        for (auto& row : dp) {\n            for (auto& col : row) {\n                cout << col << \" \";\n            }\n            \n            cout << endl;\n        }*/\n        \n        return largest;\n    }\n};",
    "submit_ts": 1717860228.0
}