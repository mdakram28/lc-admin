{
    "username": "RugvedVK",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n       \n        Integer[] horizontal = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vertical = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(horizontal, Collections.reverseOrder());\n        Arrays.sort(vertical, Collections.reverseOrder());\n\n        int hIndex = 0, vIndex = 0;\n        int hPieces = 1, vPieces = 1;\n        long cost = 0;\n\n       \n        while (hIndex < horizontal.length && vIndex < vertical.length) {\n            if (horizontal[hIndex] >= vertical[vIndex]) {\n                cost += horizontal[hIndex] * vPieces;\n                hPieces++;\n                hIndex++;\n            } else {\n                cost += vertical[vIndex] * hPieces;\n                vPieces++;\n                vIndex++;\n            }\n        }\n\n       \n        while (hIndex < horizontal.length) {\n            cost += horizontal[hIndex] * vPieces;\n            hPieces++;\n            hIndex++;\n        }\n\n       \n        while (vIndex < vertical.length) {\n            cost += vertical[vIndex] * hPieces;\n            vPieces++;\n            vIndex++;\n        }\n\n        return cost;\n    }\n}",
    "submit_ts": "1720926428",
    "subm_id": "1320285964"
}