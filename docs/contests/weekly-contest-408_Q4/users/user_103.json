{
    "username": "ocavue",
    "submission": "from typing import List\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        uf = [i for i in range(n + 4)]\n        border_t = n\n        border_b = n + 1\n        border_l = n + 2\n        border_r = n + 3\n\n        def find(x: int) -> int:\n            if uf[x] != x:\n                uf[x] = find(uf[x])\n            return uf[x]\n\n        def union(x: int, y: int) -> None:\n            uf[find(x)] = find(y)\n\n        def is_union(x: int, y: int) -> bool:\n            return find(x) == find(y)\n\n        for i in range(n):\n            xi, yi, ri = circles[i]\n\n            if xi <= ri:\n                union(i, border_l)\n            if xi + ri >= X:\n                union(i, border_r)\n            if yi <= ri:\n                union(i, border_b)\n            if yi + ri >= Y:\n                union(i, border_t)\n\n            for j in range(i + 1, n):\n                xj, yj, rj = circles[j]\n                if (xi - xj) ** 2 + (yi - yj) ** 2 <= (ri + rj) ** 2:\n                    union(i, j)\n\n        if is_union(border_t, border_b):\n            return False\n        if is_union(border_l, border_r):\n            return False\n        if is_union(border_l, border_b):\n            return False\n        if is_union(border_t, border_r):\n            return False\n\n        return True\n\n ",
    "submit_ts": "1722135863",
    "subm_id": "1335716012"
}