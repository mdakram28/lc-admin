{
    "username": "Manjunath_123",
    "submission": "class Solution {\npublic:\n    struct Node{\n        unordered_map<char,Node*> child;\n        vector<pair<int,int>> ends;\n    };\n    class Trie{\n        public:\n        Node* root;\n        Trie(){root = new Node();}\n\n        void insert(string& word,int index,int cost){\n            Node* node = root;\n            for(char c:word){\n                if(!node->child.count(c)) node->child[c] = new Node();\n\n                node = node->child[c];\n            }\n            node->ends.push_back({index,cost});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n\n        for(int i = 0;i < words.size(); i++){\n            trie.insert(words[i],i,costs[i]);\n        }\n\n        for(int i = 0;i < n;i++){\n            if(dp[i] == INT_MAX) continue;\n\n            Node* node = trie.root;\n\n            for(int j = i;j < n;j++){\n                if(!node->child.count(target[j])) break;\n\n                node = node->child[target[j]];\n\n                for(auto& p: node->ends){\n                    int wordIn = p.first;\n                    int wordC = p.second;\n\n                    int len = words[wordIn].size();\n\n                    if(i+len <=n){\n                        dp[i+len] = min(dp[i+len],dp[i] + wordC);\n                    }\n                }\n\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1:dp[n];\n    }\n};",
    "submit_ts": "1720322873",
    "subm_id": "1312361300"
}