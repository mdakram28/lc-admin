{
    "username": "didwhddks",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        const int n = edges1.size() + 1;\n        const int m = edges2.size() + 1;\n        vector adj1(n, vector<int>());\n        vector adj2(m, vector<int>());\n        \n        for (auto &e : edges1) {\n            int a = e[0], b = e[1];\n            adj1[a].push_back(b);\n            adj1[b].push_back(a);\n        }\n        for (auto &e : edges2) {\n            int a = e[0], b = e[1];\n            adj2[a].push_back(b);\n            adj2[b].push_back(a);\n        }\n        \n        vector<int> h1(n), h2(m);\n        auto dfs1 = [&](auto self, int u, int par) -> void {\n            for (int v : adj1[u]) {\n                if (v == par) {\n                    continue;\n                }\n                self(self, v, u);\n                h1[u] = max(h1[u], h1[v] + 1);\n            }\n        };\n        auto dfs2 = [&](auto self, int u, int par) -> void {\n            for (int v : adj2[u]) {\n                if (v == par) {\n                    continue;\n                }\n                self(self, v, u);\n                h2[u] = max(h2[u], h2[v] + 1);\n            }\n        };\n        dfs1(dfs1, 0, -1);\n        dfs2(dfs2, 0, -1);\n        \n        int a1 = n, a2 = m;\n        int a3 = 0, a4 = 0;\n        auto dfs3 = [&](auto self, int u, int par, int d) -> void {\n            a1 = min(a1, max(h1[u], d));\n            a3 = max(a3, d + h1[u]);\n            // cout << u << \" \" << d << \" \" << h1[u] << \"\\n\";\n            pair<int, int> mx1 = {d, -1};\n            pair<int, int> mx2 = {-1, -1};\n            for (int v : adj1[u]) {\n                if (v == par) {\n                    continue;\n                }\n                auto p = make_pair(h1[v] + 1, v);\n                if (p > mx1) {\n                    mx2 = mx1;\n                    mx1 = p;\n                } else if (p > mx2) {\n                    mx2 = p;\n                }\n            }\n            for (int v : adj1[u]) {\n                if (v == par) {\n                    continue;\n                }\n                self(self, v, u, (v == mx1.second ? mx2.first : mx1.first) + 1);\n            }\n        };\n        auto dfs4 = [&](auto self, int u, int par, int d) -> void {\n            a2 = min(a2, max(h2[u], d));\n            a4 = max(a4, d + h2[u]);\n            pair<int, int> mx1 = {d, -1};\n            pair<int, int> mx2 = {-1, -1};\n            for (int v : adj2[u]) {\n                if (v == par) {\n                    continue;\n                }\n                auto p = make_pair(h2[v] + 1, v);\n                if (p > mx1) {\n                    mx2 = mx1;\n                    mx1 = p;\n                } else if (p > mx2) {\n                    mx2 = p;\n                }\n            }\n            for (int v : adj2[u]) {\n                if (v == par) {\n                    continue;\n                }\n                self(self, v, u, (v == mx1.second ? mx2.first : mx1.first) + 1);\n            }\n        };\n        dfs3(dfs3, 0, -1, 0);\n        dfs4(dfs4, 0, -1, 0);\n        \n        return max({a3, a4, a1 + a2 + 1});\n    }\n};",
    "submit_ts": "1719718297",
    "subm_id": "1304413724"
}