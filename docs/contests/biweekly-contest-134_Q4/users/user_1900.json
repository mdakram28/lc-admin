{
    "username": "astronom1cal",
    "submission": "#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <climits>\n#include <numeric>\n#include <iomanip>\n#include <fstream>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <bitset>\n#include <utility>\n#include <array>\n#include <vector>\n#include <deque>\n#include <forward_list>\n#include <list>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n#include <stack>\n#include <queue>\n#include <functional>\n#include <popcntintrin.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\n// LLONG_MAX is 9,223,372,036,854,775,807 (19 digits)\n// ULLONG_MAX is 18,446,744,073,709,551,615 (20 digits)\n\nusing namespace __gnu_pbds;\ntemplate <typename T>\nusing ordered_set = tree<T, null_type, std::less<T>, rb_tree_tag, tree_order_statistics_node_update>;\ntemplate <typename T>\nusing ordered_multiset = tree<std::pair<T, T>, null_type, std::less<std::pair<T, T>>, rb_tree_tag, tree_order_statistics_node_update>;\n\n// use a map to keep track of duplicates in ordered multiset, like 2-1, 2-2, 2-3, and so on\n\nusing ll = long long;\nusing ld = long double;\nusing namespace std;\n\nclass Solution\n{\npublic:\n    long long countSubarrays(vector<int> &nums, int k)\n    {\n        ll n = (ll)nums.size();\n\n        vector<vector<ll>> first0bit(n, vector<ll>(32));\n\n        for (ll i = 0; i < 32; i++)\n        {\n            ll bit = nums[n - 1] & (1LL << i);\n\n            if (bit)\n            {\n                first0bit[n - 1][i] = -1;\n            }\n\n            else\n            {\n                first0bit[n - 1][i] = n - 1;\n            }\n        }\n\n        for (ll i = n - 2; i >= 0; i--)\n        {\n            for (ll j = 0; j < 32; j++)\n            {\n                ll bit = nums[i] & (1LL << j);\n\n                if (bit)\n                {\n                    first0bit[i][j] = first0bit[i + 1][j];\n                }\n\n                else\n                {\n                    first0bit[i][j] = i;\n                }\n            }\n        }\n\n        ll ans = 0;\n\n        for (ll i = 0; i < n; i++)\n        {\n            ll l = i, r = n - 1;\n            bool ok = true;\n\n            for (ll j = 0; j < 32; j++)\n            {\n                ll bit1 = nums[i] & (1LL << j);\n                ll bit2 = k & (1LL << j);\n \n                if (bit1 == 0 && bit2 != 0)\n                {\n                    ok = false;\n                    break;\n                }\n\n                if (bit2)\n                {\n                    if (first0bit[i][j] != -1)\n                    {\n                        r = min(r, first0bit[i][j] - 1);\n                    }\n                }\n\n                else\n                {\n                    if (first0bit[i][j] == -1)\n                    {\n                        ok = false;\n                        break;\n                    }\n\n                    l = max(l, first0bit[i][j]);\n                }\n            }\n\n            if (ok && r - l + 1 > 0)\n            {\n                ans += r - l + 1;\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720281403",
    "subm_id": "1311823841"
}