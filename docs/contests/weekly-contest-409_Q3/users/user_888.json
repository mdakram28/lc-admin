{
    "username": "harshrupavatiya",
    "submission": "// class Solution {\n// public:\n//     vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        \n//     }\n// };\n\n// class Solution {\n// public:\n//     vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {  \n//         // vector<vector<pair<int, int>>> graph(n);\n//         // for (int i = 0; i < n - 1; ++i) {\n//         //     graph[i].emplace_back(i + 1, 1);\n//         // }\n\n//         // vector<int> result;\n//         // vector<int> distances(n, INT_MAX);\n         \n//         // dijkstra(n, graph, 0, distances);\n        \n//         // for (const auto& query : queries) {\n//         //     int x = query[0];\n//         //     int y = query[1];\n//         //     graph[x].emplace_back(y, 1);\n             \n//         //     dijkstra(n, graph, 0, distances);\n             \n//         //     int distance = distances[n - 1];\n//         //     result.push_back(distance == INT_MAX ? -1 : distance);\n//         // }\n        \n//         // return result;\n\n        \n//     }\n// };\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& q) {\n        vector<int> d(n, 0);\n        for (int i = 1; i < n; ++i) {\n            d[i] = d[i - 1] + 1;\n        }\n\n        set<int> p;\n        for (int i = 0; i < n; ++i) {\n            p.insert(i);\n        }\n\n        vector<int> r;\n\n        for (const auto& qi : q) {\n            int l = qi[0];\n            int rt = qi[1];\n\n            auto lb = p.lower_bound(l + 1);\n            auto ub = p.lower_bound(rt);\n\n            p.erase(lb, ub);\n\n            r.push_back(p.size() - 1);\n        }\n\n        return r;\n    }\n};",
    "submit_ts": "1722743447",
    "subm_id": "1343792119"
}