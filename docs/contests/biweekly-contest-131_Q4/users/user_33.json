{
    "username": "danzhi",
    "submission": "class Solution {\n      public static List<Boolean> getResults(int[][] queries) {\n    List<Boolean> ans = new ArrayList<>();\n    TreeSet<Integer> obs = new TreeSet<>();\n    final int hig = 50000;\n    obs.add(0);\n    obs.add(hig);\n    RangeMaxSegmentTree st = new RangeMaxSegmentTree(hig + 1, 0);\n    st.set(0, hig);\n    // PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());\n    // pq.add(hig);\n    int m = queries.length;\n    for (int i = 0; i < m; i++) {\n      int x = queries[i][1];\n      if (queries[i][0] == 1) {\n        int v = obs.floor(x);\n        int w = obs.ceiling(x);\n        // System.out.format(\"  i:%d x:%d v:%d w:%d\\n\", i, x, v, w);\n        // split [v,w] into [v,x] and [x,w]\n        st.set(v, x-v);\n        st.set(x, w-x);\n        obs.add(x);\n      } else {\n        int k = queries[i][2];\n        int v = obs.floor(x);\n        int max = st.getRangeMax(0, v-1);\n        boolean ok = max >= k || x - v >= k;\n        // System.out.format(\"  i:%d x:%d k:%d v:%d max:%d %s\\n\", i, x, k, v, max, ok ? \"YES\":\"NO\");\n        ans.add(ok);\n      }\n    }\n    return ans;\n  }\n\n  static class RangeMaxSegmentTree {\n    int n;\n    int[] arr;\n\n    public RangeMaxSegmentTree(int size, int defaultValue) {\n      this.n = 1;\n      while (n < size) {\n        n <<= 1;\n      }\n      arr = new int[2 * n];\n      Arrays.fill(arr, defaultValue);\n    }\n\n    public RangeMaxSegmentTree(int[] a) {\n      this(a.length, (int) -1e9-500);\n      for (int i = 0; i < a.length; ++i) {\n        arr[i + n] = a[i];\n      }\n      for (int i = n - 1; i >= 1; --i) {\n        arr[i] = Math.max(arr[i << 1], arr[i << 1 | 1]);\n      }\n    }\n\n    public void set(int i, int x) {\n      i += n;\n      arr[i] = x;\n      for (i >>= 1; i >= 1; i >>= 1) {\n        arr[i] = Math.max(arr[i << 1], arr[(i << 1) | 1]);\n      }\n    }\n\n    public int get(int i) {\n      return arr[i + n];\n    }\n\n    public int getRangeMax(int l, int r) {\n      if (r < l) {\n        return 0;\n      }\n      int resL = arr[0];\n      int resR = arr[0];\n      for (l += n, r += n; l <= r; l >>= 1, r >>= 1) {\n        if ((l & 1) != 0) {\n          resL = Math.max(resL, arr[l++]);\n        }\n        if ((r & 1) == 0) {\n          resR = Math.max(arr[r--], resR);\n        }\n        // System.out.format(\"  l:%d r:%d resL:%d resR:%d\\n\", l, r, resL, resR);\n      }\n      return Math.max(resL, resR);\n    }\n  }\n}",
    "submit_ts": 1716649538.0
}