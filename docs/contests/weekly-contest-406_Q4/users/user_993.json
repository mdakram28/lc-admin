{
    "username": "Sarthak2509Agarwal",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, char>> minHeap;\n    \n        for (int cost : horizontalCut) {\n            minHeap.push({cost, 'h'});\n        }\n        \n        for (int cost : verticalCut) {\n            minHeap.push({cost, 'v'});\n        }\n        \n        int h_pieces = 1; \n        int v_pieces = 1; \n        \n        long long total_cost = 0;\n        \n        while (!minHeap.empty()) {\n            auto [cost, cut_type] = minHeap.top();\n            minHeap.pop();\n            \n            if (cut_type == 'h') {\n                total_cost += cost * v_pieces;\n                h_pieces++;\n            } else {\n                total_cost += cost * h_pieces;\n                v_pieces++;\n            }\n        }\n        \n        return total_cost;\n    }\n};",
    "submit_ts": "1720925980",
    "subm_id": "1320272235"
}