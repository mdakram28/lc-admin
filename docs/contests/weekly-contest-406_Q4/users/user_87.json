{
    "username": "user2941fE",
    "submission": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"\n        # Combine the cuts with their respective types (0 for horizontal, 1 for vertical)\n        cuts = [(cost, 0) for cost in horizontalCut] + [(cost, 1) for cost in verticalCut]\n        \n        # Sort the cuts based on their cost in descending order\n        cuts.sort(reverse=True, key=lambda x: x[0])\n        \n        # Initialize the number of horizontal and vertical segments\n        horizontal_segments = 1\n        vertical_segments = 1\n        \n        # Initialize the total cost\n        total_cost = 0\n        \n        # Iterate through the sorted cuts\n        for cost, cut_type in cuts:\n            if cut_type == 0:\n                # Horizontal cut\n                total_cost += cost * vertical_segments\n                horizontal_segments += 1\n            else:\n                # Vertical cut\n                total_cost += cost * horizontal_segments\n                vertical_segments += 1\n        \n        return total_cost\n\n# Example usage:\nsolution = Solution()\nprint(solution.minimumCost(2, 2, [7], [4]))  # Output: 15\nprint(solution.minimumCost(3, 2, [1, 3], [5]))  # Output: 13\n",
    "submit_ts": "1720924981",
    "subm_id": "1320238327"
}