{
    "username": "kvt_one",
    "submission": "class Solution {\npublic:\n     int performBFS(const std::vector<std::vector<int>>& adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visited(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visited[startNode] = 1;\n\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int circleCount = circles.size();\n        vector<std::pair<std::pair<int, int>, int>> circleInfo(circleCount);\n        vector<std::vector<int>> adjacencyList(circleCount + 4);\n\n        for (int i = 0; i < circleCount; ++i) {\n            circleInfo[i] = {{circles[i][0], circles[i][1]}, circles[i][2]};\n        }\n        for (int i = 0; i < circleCount; ++i) {\n            int x = circleInfo[i].first.first;\n            int y = circleInfo[i].first.second;\n            int radius = circleInfo[i].second;\n\n            if (x <= radius) {\n                adjacencyList[circleCount].push_back(i);\n                adjacencyList[i].push_back(circleCount);\n            }\n            if (X - x <= radius) {\n                adjacencyList[circleCount + 2].push_back(i);\n                adjacencyList[i].push_back(circleCount + 2);\n            }\n            if (y <= radius) {\n                adjacencyList[circleCount + 1].push_back(i);\n                adjacencyList[i].push_back(circleCount + 1);\n            }\n            if (Y - y <= radius) {\n                adjacencyList[circleCount + 3].push_back(i);\n                adjacencyList[i].push_back(circleCount + 3);\n            }\n            for (int j = i + 1; j < circleCount; ++j) {\n                double distance = std::sqrt(std::pow(x - circleInfo[j].first.first, 2) +\n                                            std::pow(y - circleInfo[j].first.second, 2));\n                int radiusSum = radius + circleInfo[j].second;\n                if (radiusSum >= distance) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n        int pathBlocked = 0;\n        pathBlocked = std::max(pathBlocked, performBFS(adjacencyList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4));\n        pathBlocked = std::max(pathBlocked, performBFS(adjacencyList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4));\n\n        return !pathBlocked;\n    }\n};",
    "submit_ts": "1722136823",
    "subm_id": "1335746006"
}