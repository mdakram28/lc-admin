{
    "username": "singh_deopa",
    "submission": "class Solution {\n    long long infi = 1LL * INT_MAX;\n    \n    int dfs(vector<vector<unordered_map<int, int>>>& dp, int& k, int stair, int jump, int can) {\n        if (stair == k) {\n            return 1;\n        }\n        \n        if (dp[jump][can].count(stair)) {\n            return dp[jump][can][stair];\n        }\n        \n        int cur = (stair == k) ? 1 : 0;\n        \n        if (can == 1 && stair != 0) {\n            cur = dfs(dp, k, stair - 1, jump, 0);\n        }\n        \n        long long val = 1LL * stair + (1LL << jump);\n        \n        if (val <= 1LL * (k + 1)) {\n            cur += dfs(dp, k, (int) val, jump + 1, 1);\n        }\n        \n        // cout << stair << \" \" << jump << \" \" << can << \" \" << cur << \"\\n\";\n        \n        return dp[jump][can][stair] = cur;\n    }\npublic:\n    int waysToReachStair(int k) {\n        if (k == 0) {\n            return 2;\n        }\n        \n        if (k <= 2) {\n            return 4;\n        }\n        \n        vector<vector<unordered_map<int, int>>> dp(30, vector<unordered_map<int, int>>(2));\n        return dfs(dp, k, 1, 0, 1);\n    }\n};",
    "submit_ts": "1716088229",
    "subm_id": "1261807845"
}