{
    "username": "dohoanggiahuy317",
    "submission": "from functools import lru_cache\nfrom typing import List\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        n = len(nums)\n        \n        # Initialize the DP table\n        dp = [[0] * (max(nums) + 1) for _ in range(n)]\n        prefix_sum = [[0] * (max(nums) + 1) for _ in range(n)]\n        \n        for j in range(nums[0] + 1):\n            dp[0][j] = 1  # There's exactly one way to pick arr1[0] = j and arr2[0] = nums[0] - j\n            prefix_sum[0][j] = (prefix_sum[0][j-1] + dp[0][j]) if j > 0 else dp[0][j]\n        # print(dp)\n        # print(prefix_sum)\n        # print()\n\n        # Fill the DP table for subsequent indices\n        for i in range(1, n):\n            for j in range(nums[i] + 1):\n                arr2_i = nums[i] - j\n                \n                # We need to find prefix sums that respect:\n                # 1. arr1[i-1] <= j (so we consider only dp[i-1][k] where k <= j)\n                # 2. arr2[i-1] >= arr2[i] = nums[i] - j (so we only consider valid prefix sums)\n                \n                if arr2_i >= 0:\n                    # We want to sum all dp[i-1][k] where:\n                    # - k <= j (to ensure arr1 is non-decreasing)\n                    # - nums[i-1] - k >= arr2_i (to ensure arr2 is non-increasing)\n                    \n                    max_valid_k = min(j, nums[i-1] - arr2_i)\n                    if max_valid_k >= 0:\n                        dp[i][j] = prefix_sum[i-1][max_valid_k] % MOD\n                \n                prefix_sum[i][j] = (prefix_sum[i][j-1] + dp[i][j]) % MOD if j > 0 else dp[i][j]\n        \n            # print(dp)\n            # print(prefix_sum)\n            # print()\n\n        # The final result is the sum of the last row in the DP table\n        return sum(dp[n-1][j] for j in range(nums[-1] + 1)) % MOD",
    "submit_ts": "1723346716",
    "subm_id": "1351583632"
}