{
    "username": "abhis6102003",
    "submission": "from typing import List\nfrom collections import defaultdict\nimport bisect\n\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        # Create a dictionary to store differences and their corresponding potential X values\n        diff_map = defaultdict(list)\n        potential_values = []\n        \n        n = len(nums)\n        half = n // 2\n        \n        # Iterate through each pair\n        for i in range(half):\n            a = nums[i]\n            b = nums[n - i - 1]\n            diff = abs(a - b)\n            max_val = max(a, b, k - a, k - b)\n            diff_map[diff].append(max_val)\n            potential_values.append(max_val)\n        \n        # Initialize the answer with the size of nums\n        min_changes = n\n        \n        # Sort potential values for binary search\n        potential_values.sort()\n        \n        # Iterate through each entry in diff_map\n        for diff, x_values in diff_map.items():\n            index = bisect.bisect_left(potential_values, diff)\n            changes_needed = index * 2 + (half - index)\n            \n            for x in x_values:\n                if x < diff:\n                    changes_needed -= 2\n                else:\n                    changes_needed -= 1\n            \n            min_changes = min(min_changes, changes_needed)\n        \n        return min_changes",
    "submit_ts": "1721489316",
    "subm_id": "1327449661"
}