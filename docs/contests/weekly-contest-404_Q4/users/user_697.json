{
    "username": "mdakram28",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        g1 = defaultdict(list)\n        g2 = defaultdict(list)\n        \n        for a, b in edges1:\n            g1[a].append(b)\n            g1[b].append(a)\n        \n        for a, b in edges2:\n            g2[a].append(b)\n            g2[b].append(a)\n            \n        \n        def get_farthest(g, at, parent):\n            ret = (0, at)\n            for to in g[at]:\n                if to == parent:\n                    continue\n                d, end = get_farthest(g, to, at)\n                ret = max(ret, (d+1, end))\n            \n            return ret\n        \n        _, start = get_farthest(g1, 0, None)\n        d1, end = get_farthest(g1, start, None)\n        \n        # print(start, end, d1)\n        \n        _, start = get_farthest(g2, 0, None)\n        d2, end = get_farthest(g2, start, None)\n        # print(start, end, d2)\n        \n        # d1 = ceil(d1/2) if d1%2 == 1 else d1//2 + 1\n        # d2 = ceil(d2/2) if d2%2 == 1 else d2//2 + 1\n        \n        \n        \n        return max(ceil(d1/2) + ceil(d2/2) + 1, d1, d2)\n        ",
    "submit_ts": "1719718974",
    "subm_id": "1304430621"
}