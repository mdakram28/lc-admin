{
    "username": "tttyyy49",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = new TrieNode();\n        \n        for (int i = 0; i < words.length; ++i) {\n            TrieNode cur = root;\n            for (char ch : words[i].toCharArray()) {\n                int c = ch - 'a';\n                if (cur.children[c] == null) {\n                    cur.children[c] = new TrieNode();\n                }\n                cur = cur.children[c];\n            }\n            if (cur.cost == -1) {\n                cur.cost = costs[i];\n            } else {\n                cur.cost = Math.min(cur.cost, costs[i]);\n            }\n            \n        }\n        \n        int[] dp = new int[target.length()];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        int res = dfs(0, target, root, dp);\n        return res == Integer.MAX_VALUE ? -1 : res;\n    }\n    \n    int dfs(int offset, String target, TrieNode root, int[] dp) {\n        if (offset == target.length()) return 0;\n        \n        if (dp[offset] != Integer.MAX_VALUE) return dp[offset];\n        \n        int cost = Integer.MAX_VALUE;\n        \n        TrieNode cur = root;\n        for (int i = offset; i < target.length(); ++i) {\n            int c = target.charAt(i) - 'a';\n            \n            cur = cur.children[c];\n            \n            if (cur == null) break;\n            \n            if (cur.cost != -1) {\n                int remain = dfs(i + 1, target, root, dp);\n                if (remain != Integer.MAX_VALUE) cost = Math.min(cost, cur.cost + remain);\n            }\n        }\n        \n        return dp[offset] = cost;\n    }\n}\n\nclass TrieNode {\n    int cost;\n    TrieNode[] children;\n    \n    public TrieNode() {\n        cost = -1;\n        children = new TrieNode[26];\n    }\n}",
    "submit_ts": "1720322046",
    "subm_id": "1312339233"
}