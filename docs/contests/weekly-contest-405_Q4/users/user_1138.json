{
    "username": "pala1",
    "submission": "class TrieNode {\npublic:\n    map<char, TrieNode*> nextNodes;\n    vector<pair<int, int>> endWords;\n};\n\nclass Trie {\npublic:\n    TrieNode* rootNode;\n\n    Trie() {\n        rootNode = new TrieNode();\n    }\n\n    void insertWord(string word, int index, int cost) {\n        TrieNode* currentNode = rootNode;\n        for (char ch : word) {\n            if (!currentNode->nextNodes.count(ch)) {\n                currentNode->nextNodes[ch] = new TrieNode();\n            }\n            currentNode = currentNode->nextNodes[ch];\n        }\n        currentNode->endWords.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> minCost(n + 1, INT_MAX);\n        minCost[0] = 0;\n\n        Trie wordTrie;\n        int m=words.size();\n        for (int i = 0; i <m ; ++i) {\n            wordTrie.insertWord(words[i], i, costs[i]);\n        }\n        int i=0;\n        while(i<n){\n            if (minCost[i] == INT_MAX) {\n                i++;\n                continue;\n            }\n\n            TrieNode* currentNode = wordTrie.rootNode;\n            int j=i;\n            while(j<n){\n               if (!(currentNode->nextNodes.count(target[j]))) {\n                    break;\n                }\n                currentNode = currentNode->nextNodes[target[j]];\n                for (auto& part : currentNode->endWords) {\n                    int wordLength = words[part.first].size();\n                    if ((i + wordLength )<= n) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + part.second);\n                    }\n                } \n                j++;\n            }\n            i++;\n        }\n        \n        if(minCost[n]==INT_MAX){\n           return -1; \n        }\n        return minCost[n];\n\n        \n    }\n};",
    "submit_ts": "1720323536",
    "subm_id": "1312377960"
}