{
    "username": "qinzhe",
    "submission": "class Solution(object):\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        \"\"\"\n        :type m: int\n        :type n: int\n        :type horizontalCut: List[int]\n        :type verticalCut: List[int]\n        :rtype: int\n        \"\"\"\n        # Sort both lists of cuts in descending order of costs\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n\n        # Initialize counters for the number of segments in each direction\n        horizontal_segments = 1  # Starts as one whole piece\n        vertical_segments = 1    # Starts as one whole piece\n\n        # Initialize total cost\n        total_cost = 0\n\n        # Pointers for horizontal and vertical cuts\n        i, j = 0, 0\n\n        # Process each cut by selecting the highest cost available cut next\n        while i < len(horizontalCut) or j < len(verticalCut):\n            # Decide whether to cut horizontally or vertically next\n            if j < len(verticalCut) and (i >= len(horizontalCut) or verticalCut[j] >= horizontalCut[i]):\n                # Make a vertical cut, affecting all horizontal segments\n                total_cost += verticalCut[j] * horizontal_segments\n                vertical_segments += 1\n                j += 1\n            else:\n                # Make a horizontal cut, affecting all vertical segments\n                total_cost += horizontalCut[i] * vertical_segments\n                horizontal_segments += 1\n                i += 1\n\n        return total_cost",
    "submit_ts": "1720924726",
    "subm_id": "1320228502"
}