{
    "username": "zinchse",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def is_left_or_top(x, y, r):\n            return x - r <= 0 or y + r >= Y\n\n        def is_right_or_bottom(x, y, r):\n            return x + r >= X or y - r <= 0\n\n        def circles_intersect(circle1, circle2):\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            distance = math.sqrt((x1 - x2) ** 2 + (y1 - y2) ** 2)\n            return distance <= r1 + r2\n\n        n = len(circles)\n        graph = defaultdict(list)\n\n        for i in range(n):\n            for j in range(i + 1, n):\n                if circles_intersect(circles[i], circles[j]):\n                    graph[tuple(circles[i])].append(tuple(circles[j]))\n                    graph[tuple(circles[j])].append(tuple(circles[i]))\n\n        queue = deque([tuple(u) for u in circles if is_right_or_bottom(*u)])\n        seen = set(queue)\n        while queue:\n            u = queue.popleft()\n            if is_left_or_top(*u):\n                return False\n            for v in graph[u]:\n                if v not in seen:\n                    seen.add(v)\n                    queue.append(v)\n        return True\n\n",
    "submit_ts": "1722136297",
    "subm_id": "1335729935"
}