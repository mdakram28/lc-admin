{
    "username": "mipha-2022",
    "submission": "# \u7ebf\u6bb5\u6811\u7684\u6709\u6548\u7d22\u5f15\u4ece1\u5f00\u59cb\n# \u5bf9\u4e8e\u5e8f\u53f7\u4e3ak\u7684\u7ebf\u6bb5\u6811\uff0c\u5de6\u5b69\u5b50\u662f2*k,\u53f3\u5b69\u5b50\u662f2*k+1\n# \u7ebf\u6bb5\u6811\u63a8\u8350\u4f7f\u7528\u5de6\u95ed\u53f3\u95ed\u533a\u95f4\u6765\u5904\u7406\u95ee\u9898\n\nclass SegmentTree:\n    def __init__(self,n):\n        # n = len(nums)\n        # # f\u8bb0\u5f55\u7684\u662f\u7279\u5b9a\u533a\u95f4\uff0cf[k]\uff0c\u5e8f\u53f7\u4e3ak\u7684\u70b9\uff1a\u8be5\u8282\u70b9\u638c\u7ba1\u7684\u7d22\u5f15\u4e3al,r\uff0c\u503c\u533a\u95f4l~r\u7684\u6570\u5b57\u603b\u548c\n        # self.nums = [0] + nums # \u52a0\u4e00\u4e2a\u54e8\u5175\u8282\u70b9\uff0c\u4f7f\u5f97\u6570\u7ec4\u7684\u6709\u6548\u7d22\u5f15\u4e3a1\uff5en\n        # \u5de6\u8fb9\u6570\u8d77\u6700\u8fd1\u7684\u677f\u5b50\u8ddd\u79bb\uff0c\u53f3\u8fb9\u6570\u8d77\u6700\u8fd1\u7684\u677f\u5b50\u8ddd\u79bb\uff0c\u533a\u95f4\u5185\u6700\u5927\u7a7a\u533a\u95f4\n        self.f = [[0,0,0] for i in range(4*n)]\n        self.buildTree(1,0,n)\n    \n    def pushup(self,k,l,mid,r):\n        # \u7236\u8282\u70b9\u7684\u4fe1\u606f\u4e3a\u5de6\u53f3\u5b69\u5b50\u6c47\u603b\n        ll,lr,lmax = self.f[2*k]\n        rl,rr,rmax = self.f[2*k+1]\n\n        t = 0\n        if lr == -1:\n            t += mid - l\n        else:\n            t += lr\n        \n        if rl == -1:\n            t += r - (mid+1) + 1\n        else:\n            t += rl + 1\n        \n        self.f[k][2] = max(lmax,rmax,t)\n\n        if ll == -1:\n            if rl == -1:\n                self.f[k][0] = -1\n            else:\n                self.f[k][0] = mid - l + rl + 1\n        else:\n            self.f[k][0] = ll\n        \n        if rr == -1:\n            if lr == -1:\n                self.f[k][1] = -1\n            else:\n                self.f[k][1] = r - (mid+1) + lr + 1\n        else:\n            self.f[k][1] = rr\n\n    def buildTree(self,k,l,r):\n        # \u5e8f\u53f7\u4e3ak\u7684\u7d22\u5f15\uff0c\u638c\u7ba1\u7684\u8303\u56f4\u662fl~r\n        # \u8fd9\u91cc\u8981\u6ce8\u610f\uff0c\u5bf9\u4e8e\u4e00\u68f5\u6570\u7ec4\u957f\u5ea6\u786e\u5b9a\u7684\u7ebf\u6bb5\u6811\uff0ck\u662f\u53ef\u4ee5\u552f\u4e00\u786e\u5b9al,r\u7684\n        # \u4f8b\u5982\u6839\u8282\u70b91 \u4e00\u5b9a\u5bf9\u5e94 1~n\n        # \u5373\u540c\u4e00\u4e2ak\u5bf9\u5e94\u552f\u4e00\u7684l,r\n        if l == r: \n            # \u53f6\u5b50\u8282\u70b9\n            # \u53ea\u6709\u81ea\u5df1\uff0c\u5de6\u53f3\u90fd\u6ca1\u677f\u5b50\n            self.f[k] = [-1,-1,0]\n            return \n        mid = (l+r)//2\n        # \u5206\u6cbb + \u540e\u5e8f\u904d\u5386\u7684\u601d\u60f3\n        self.buildTree(2*k,l,mid)       # \u5904\u7406\u5de6\u5b69\u5b50\n        self.buildTree(2*k+1,mid+1,r)     # \u5904\u7406\u53f3\u5b69\u5b50\n\n        self.pushup(k,l,mid,r)\n        \n\n        \n    # \u66f4\u65b0\u5355\u70b9\uff0c\u8bbe\u7acb\u969c\u788d\u7269\n    def update(self,k,l,r,i):\n        # \u5e8f\u53f7\u4e3ak\u7684\u7d22\u5f15\uff0c\u638c\u7ba1\u7684\u8303\u56f4\u662fl~r\n        if l == r:\n            self.f[k] = [0,0,0]\n            # \u53f6\u5b50\u8282\u70b9\n            return \n        mid = (l+r)//2\n        # \u770b\u7d22\u5f15i\u5728\u5de6\u53f3\u5b50\u6811\u7684\u54ea\u4e00\u8fb9\u3002\u9012\u5f52\u66f4\u65b0\n        if i <= mid: # \u5728\u5de6\u5b50\u6811\n            self.update(2*k,l,mid,i)\n        elif i > mid: # \u5728\u53f3\u5b50\u6811\n            self.update(2*k+1,mid+1,r,i)\n        \n        self.pushup(k,l,mid,r)\n    \n    def query(self,k,l,r,start,end):\n        # start~end\u59cb\u7ec8\u662fl~r\u7684\u5b50\u533a\u95f4\n        # \u5e8f\u53f7\u4e3ak\u7684\u7d22\u5f15\uff0c\u638c\u7ba1\u7684\u8303\u56f4\u662fl~r\n        # \u5728\u6574\u68f5\u6811\u4e0a\u8fdb\u884c\u641c\u5bfb start~end \u7d22\u5f15\u6240\u6c47\u603b\u7684\u8303\u56f4\u548c\n        if l == start and r == end:\n            return self.f[k]\n        mid = (l+r)//2\n        if end <= mid: # \u5982\u679cstart~end\u5b8c\u5168\u5728\u5de6\u534a\u8fb9\uff0c\u5219\u53ea\u9700\u8981\u7b97\u5de6\u5b50\u6811\n            return self.query(2*k,l,mid,start,end)\n        if mid < start: # \u5982\u679cstart~end\u5b8c\u5168\u5728\u53f3\u534a\u8fb9\uff0c\u5219\u53ea\u9700\u8981\u7b97\u53f3\u5b50\u6811\n            return self.query(2*k+1,mid+1,r,start,end)\n        # \u5426\u5219\uff0c\u9700\u8981\u540c\u65f6\u8003\u8651\u5de6\u53f3\u5b69\u5b50\n        leftPart = self.query(2*k,l,mid,start,mid) # \u6ce8\u610f\uff1a\u5728\u8fd9\u91cc\u6700\u540e\u4e00\u4e2a\u53c2\u6570\u662fmid\u800c\u4e0d\u662fend\n        rightPart = self.query(2*k+1,mid+1,r,mid+1,end) # \u6ce8\u610f\uff1a\u5728\u8fd9\u91cc\u5012\u6570\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662fmid+1\u800c\u4e0d\u662fstart\n\n        # \u7236\u8282\u70b9\u7684\u4fe1\u606f\u4e3a\u5de6\u53f3\u5b69\u5b50\u6c47\u603b\n        ll,lr,lmax = leftPart\n        rl,rr,rmax = rightPart\n\n        l,r = start,end\n        # print(l,mid,r)\n        # print(leftPart,rightPart)\n\n        res = [0,0,0]\n        t = 0\n        if lr == -1:\n            t += mid - l\n        else:\n            t += lr\n        \n        if rl == -1:\n            t += r - (mid+1) + 1\n        else:\n            t += rl + 1\n        \n        res[2] = max(lmax,rmax,t)\n\n        if ll == -1:\n            if rl == -1:\n                res[0] = -1\n            else:\n                res[0] = mid - l + rl + 1\n        else:\n            res[0] = ll\n        \n        if rr == -1:\n            if lr == -1:\n                res[1] = -1\n            else:\n                res[1] = r - (mid+1) + lr + 1\n        else:\n            res[1] = rr\n        # print(res)\n        # print()\n        # \u56e0\u4e3a\uff1a# start~end\u59cb\u7ec8\u662fl~r\u7684\u5b50\u533a\u95f4\uff0c\u5426\u5219\u9012\u5f52\u4f1a\u6ca1\u6709\u51fa\u53e3\n        return res\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        n = min(int(5e4),3*len(queries))\n        tree = SegmentTree(n)\n        res = []\n        for arr in queries:\n            if len(arr) == 2:\n                x = arr[-1]\n                tree.update(1,0,n,x)\n            else:\n                _,x,sz = arr\n\n\n                # print(arr,tree.query(1,0,n,0,x))\n                if tree.query(1,0,n,0,x)[2] >= sz:\n                    res.append(True)\n                else:\n                    res.append(False)\n        return res\n",
    "submit_ts": 1716651605.0
}