{
    "username": "jeffkmeng",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        ROWS = len(grid)\n        COLS = len(grid[0])\n        \n        def minimumArea(lrow: int, rrow: int, lcol: int, rcol: int) -> int:\n            # min area for the rect with each row, col in range(lrow, rrow) and range(lcol, rcol)\n            # e.g. rrow and rcol are exclusive\n            \n            minR = float(\"inf\")\n            maxR = float(\"-inf\")\n\n            minC = float(\"inf\")\n            maxC = float(\"-inf\")\n            \n            foundOne = False\n            \n            for r in range(lrow, rrow):\n                for c in range(lcol, rcol):\n                    x = grid[r][c]\n                    if x == 1:\n                        foundOne = True\n                        minR = min(minR, r)\n                        maxR = max(maxR, r)\n\n                        minC = min(minC, c)\n                        maxC = max(maxC, c)\n                        \n            if not foundOne:\n                return 0\n\n            return (maxR - minR + 1) * (maxC - minC + 1)\n        \n        def minAreaWithTwo(lrow: int, rrow: int, lcol: int, rcol: int) -> int:\n            res = float(\"inf\")\n            # given a rect, returns the min area covering it with two rectangles\n            for r in range(lrow, rrow - 1):\n                # split horizontally after r\n                res = min(res, minimumArea(lrow, r + 1, lcol, rcol) + minimumArea(r + 1, rrow, lcol, rcol))\n                \n            for c in range(lcol, rcol - 1):\n                # split vertically after c\n                res = min(res, minimumArea(lrow, rrow, lcol, c + 1) + minimumArea(lrow, rrow, c + 1, rcol))\n            \n            return res\n        \n#         minR = float(\"inf\")\n#         minC = float(\"inf\")\n        minArea = float(\"inf\")\n        \n        # print(\"RC\", ROWS, COLS)\n        # print(\"1 0 1\\n1 1 1\\n0 1 0\\n\")\n                \n        for r, row in enumerate(grid):\n            for c, x in enumerate(row):\n                # first, find the minimum rectangle within this box\n                # if x == 0:\n                #     continue\n                # if x == 1:\n                #     minR = min(minR, r)\n                #     minC = min(minC, c)\n                    \n                # try all possible bottom right corners for the first rectangle (find the top left corner)\n                tlArea = minimumArea(0, r + 1, 0, c + 1)# (r - minR + 1) * (c - minC + 1)\n                \n                # the three rectangles either account for the area (topLeft, bottomLeft, right) or the area (topLeft, topRight, bottom)\n                blArea = minimumArea(r + 1, ROWS, 0, c + 1)\n                rightArea = minimumArea(0, ROWS, c + 1, COLS)\n                \n                trArea = minimumArea(0, r + 1, c + 1, COLS)\n                bottomArea = minimumArea(r + 1, ROWS, 0, COLS)\n                # print(r, c, \"|\",\n                #     tlArea, \"+\", blArea, \"+\", rightArea, \" | \",\n                #     tlArea, \"+\", trArea, \"+\", bottomArea)\n                minArea = min(\n                    minArea,\n                    tlArea + blArea + rightArea, \n                    tlArea + trArea + bottomArea\n                )\n                \n                if r == ROWS - 1: # if the tr is actually the entire height or width, calculate the minimum with both\n                    # print(\"MArow: \", r, c, \"|\", 0, ROWS, c + 1, COLS, \" => \", minAreaWithTwo(0, ROWS, c + 1, COLS))\n                    minArea = min(minArea, tlArea + minAreaWithTwo(0, ROWS, c + 1, COLS))\n                elif c == COLS - 1:\n                    # print(\"MAcol: \", r, c, \"|\", r + 1, ROWS, 0, COLS, \" => \", minAreaWithTwo(r + 1, ROWS, 0, COLS))\n                    minArea = min(minArea, tlArea + minAreaWithTwo(r + 1, ROWS, 0, COLS))\n        \n        return minArea",
    "submit_ts": "1719114749",
    "subm_id": "1297353168"
}