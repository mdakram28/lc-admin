{
    "username": "ltf0501",
    "submission": "class Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        const int kMod = int(1e9 + 7);\n        \n        int n = int(nums.size());\n        int ans = 0;\n        vector mx(4, vector<int64_t>((n << 2) + 10)); // bit0: pre, bit1: suf\n        \n        const int64_t kInf = int64_t(1e15);\n\n        vector<tuple<int, int, int>> prepare;\n\n            for (int i = 0; i < 4; i++) {\n                for (int j = 0; j < 4; j++) {\n                    if ((i & (1 << 1)) && (j & (1 << 0)))\n                        continue;\n                    int x = (i & 1) | (j & 2);\n                    prepare.emplace_back(i, j, x);\n                    //cout << i << ' ' << j << ' ' << x << '\\n';\n                }\n            }\n        auto merge = [&](int o, int lc, int rc) {\n            for (int i = 0; i < 4; i++) mx[i][o] = -kInf;\n            for (auto &[i, j, x] : prepare)\n                    mx[x][o] = max(mx[x][o], mx[i][lc] + mx[j][rc]);\n\n        };\n        auto build = [&]() {\n            auto build = [&](auto self, int l, int r, int o)->void {\n                if (r - l == 1) {\n                    mx[0][o] = 0, mx[3][o] = nums[l];\n                    mx[1][o] = mx[2][o] = -kInf;\n                    return;\n                }\n                int mid = (l + r) >> 1;\n                int lc = (o << 1), rc = (o << 1 | 1);\n                self(self, l, mid, lc), self(self, mid, r, rc);\n\n\n                merge(o, lc, rc);\n\n            };\n            build(build, 0, n, 1);\n        };\n        \n        auto update = [&](int pos, int x) {\n            auto update = [&](auto self, int l, int r, int o, int pos, int x)->void {\n                if (r - l == 1) {\n                    nums[l] = x;\n                    mx[0][o] = 0, mx[3][o] = nums[l];\n                    mx[1][o] = mx[2][o] = -kInf;\n                    return;\n                }\n                int mid = (l + r) >> 1;\n                int lc = (o << 1), rc = (o << 1 | 1);\n                if (pos < mid) self(self, l, mid, lc, pos, x);\n                else self(self, mid, r, rc, pos, x);\n                merge(o, lc, rc);\n\n            };\n            \n            update(update, 0, n, 1, pos, x);\n        };\n        \n        build();\n        for (auto q : queries) {\n            int pos = q[0], x = q[1];\n            update(pos, x);\n            int64_t tmp_ans = -kInf;\n            for (int i = 0; i < 4; i++) tmp_ans = max(tmp_ans, mx[i][1]);\n            //cout << tmp_ans << '\\n';\n            ans = (ans + tmp_ans % kMod) % kMod;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716693245",
    "subm_id": "1268080080"
}