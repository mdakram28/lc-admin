{
    "username": "Divyan2003",
    "submission": "    struct Cut {\n    int cost;\n    char type; // 'H' for horizontal, 'V' for vertical\n};\n\nclass Solution {\npublic:\n\nlong long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n    // Step 1: Combine and sort the cuts\n    vector<Cut> cuts;\n    cuts.reserve(horizontalCut.size() + verticalCut.size());\n\n    for (int i = 0; i < m - 1; ++i) {\n        cuts.push_back({horizontalCut[i], 'H'});\n    }\n    for (int j = 0; j < n - 1; ++j) {\n        cuts.push_back({verticalCut[j], 'V'});\n    }\n\n    // Sort cuts by cost in ascending order\n    sort(cuts.begin(), cuts.end(), [](const Cut& a, const Cut& b) {\n        return a.cost > b.cost;\n    });\n\n    // Step 2: Initialize counters\n    int horizontal_segments = 1;\n    int vertical_segments = 1;\n    long long total_cost = 0;\n\n    // Step 3: Process each cut\n    for (const auto& cut : cuts) {\n        if (cut.type == 'H') {\n            total_cost += static_cast<long long>(cut.cost) * vertical_segments;\n            ++horizontal_segments;\n        } else { // cut.type == 'V'\n            total_cost += static_cast<long long>(cut.cost) * horizontal_segments;\n            ++vertical_segments;\n        }\n    }\n\n    // Step 4: Return the total cost\n    return total_cost;\n}\n};",
    "submit_ts": "1720925980",
    "subm_id": "1320272248"
}