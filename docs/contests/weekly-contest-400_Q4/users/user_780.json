{
    "username": "Z3ROsum",
    "submission": "#include <iostream>\n#include <vector>\n#include <cmath>\n#include <limits>\n\nusing namespace std;\n\nclass SegmentTree {\nprivate:\n    vector<int> a;\n    vector<int> t;\n    \npublic:\n    SegmentTree(vector<int>& n) {\n        a = n;\n        int s = a.size();\n        int h = (int)(log2(s) + 1);\n        int m = 2 * (int)pow(2, h) - 1;\n        t.resize(m);\n        b(0, 0, s - 1);\n    }\n    \n    void b(int o, int s, int e) {\n        if (s == e) {\n            t[o] = a[s];\n        } else {\n            int m = (s + e) / 2;\n            b(2 * o + 1, s, m);\n            b(2 * o + 2, m + 1, e);\n            t[o] = t[2 * o + 1] & t[2 * o + 2];\n        }\n    }\n    \n    int q(int l, int r) {\n        return u(0, 0, a.size() - 1, l, r);\n    }\n    \n    int u(int o, int s, int e, int l, int r) {\n        if (l <= s && r >= e) {\n            return t[o];\n        }\n        if (r < s || l > e) {\n            return INT_MAX;\n        }\n        int m = (s + e) / 2; return u(2 * o + 1, s, m, l, r) & u(2 * o + 2, m + 1, e, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& n, int k) {\n        int d = INT_MAX;\n        for (auto i : n) d = min(d, abs(i - k));\n        int l = 0,r=1;\n        SegmentTree b(n);\n        while (r < n.size()) {\n            int c = b.q(l, r);\n            d = min(d, abs(c - k));\n            if (c < k && r != l) l++; else r++;\n        }\n        return d;\n    }\n};\n",
    "submit_ts": "1717300219",
    "subm_id": "1274837501"
}