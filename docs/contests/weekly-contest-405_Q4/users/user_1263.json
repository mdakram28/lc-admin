{
    "username": "alexshaoo",
    "submission": "struct Trie {\n    unordered_map<char, Trie*> children;\n    vector<pair<int, int>> wordIndices;\n};\nclass Solution {\npublic:\n    void insert(Trie* root, const string& word, int index, int cost) {\n        Trie* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new Trie();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back({index, cost});\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie* root = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], i, costs[i]);\n        }\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            Trie* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                for (auto& p : node->wordIndices) {\n                    int wordIndex = p.first;\n                    int cost = p.second;\n                    int len = words[wordIndex].length();\n                    if (j + 1 >= i + len) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322899",
    "subm_id": "1312362084"
}