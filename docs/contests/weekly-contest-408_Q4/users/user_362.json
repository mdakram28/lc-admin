{
    "username": "nevinbaiju97",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [0] * n\n\n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.parent[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.parent[rootX] = rootY\n            else:\n                self.parent[rootY] = rootX\n                self.rank[rootX] += 1\n\ndef distance(c1, c2):\n    return ((c1[0] - c2[0]) ** 2 + (c1[1] - c2[1]) ** 2) ** 0.5\n\ndef circles_touch(c1, c2):\n    return distance(c1, c2) <= (c1[2] + c2[2])\n\ndef group_circles(circles):\n    n = len(circles)\n    uf = UnionFind(n)\n\n    for i in range(n):\n        for j in range(i + 1, n):\n            if circles_touch(circles[i], circles[j]):\n                uf.union(i, j)\n\n    groups = {}\n    for i in range(n):\n        root = uf.find(i)\n        if root not in groups:\n            groups[root] = []\n        groups[root].append(circles[i])\n\n    return list(groups.values())\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        groups = group_circles(circles)\n#         print(groups)\n        for group in groups:\n            lmao = [0] * 4\n            for x, y, r in group:\n#                 print(x, y, r)\n                if y - r <= 0:\n                    lmao[0] = 1\n                if y + r >= Y:\n                    lmao[1] = 1\n                if x-r <=0:\n                    lmao[2] = 1\n                if x+r >= X:\n                    lmao[3] = 1\n#             print(lmao)\n            if max(lmao[0] + lmao[1], lmao[0]+lmao[2], lmao[1]+lmao[3], lmao[3]+lmao[2]) >= 2:\n                return False\n            \n        return True",
    "submit_ts": "1722136506",
    "subm_id": "1335736629"
}