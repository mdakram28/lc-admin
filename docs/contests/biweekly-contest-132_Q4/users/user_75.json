{
    "username": "allrounderankit",
    "submission": "class Solution {\npublic:\n    int dp[5002][52][2];\n    map<int, vector<int>> pos;\n\n    int solve(int idx, vector<int>& nums, int k, int ms) {\n        if (idx == nums.size()) return ms == 0 ? -1 : 0;\n        if (k < 0) return -1;\n\n        if (dp[idx][k][ms] != -1) return dp[idx][k][ms];\n\n        int opt1 = 0, opt2 = 0, opt3 = 0, opt4 = 0;\n\n        if (ms == 0) {\n            opt3 = solve(idx + 1, nums, k, 0);\n        }\n\n        if (idx < nums.size() - 1 && nums[idx] != nums[idx + 1])\n            opt1 = 1 + solve(idx + 1, nums, k - 1, 1);\n        else if (idx < nums.size() - 1 && nums[idx] == nums[idx + 1])\n            opt1 = 1 + solve(idx + 1, nums, k, 1);\n\n        int nextPosIdx = upper_bound(pos[nums[idx]].begin(), pos[nums[idx]].end(), idx) - pos[nums[idx]].begin();\n        if (nextPosIdx != pos[nums[idx]].size())\n            opt2 = 1 + solve(pos[nums[idx]][nextPosIdx], nums, k, 1);\n\n        opt4 = 1 + solve(idx + 1, nums, k - 1, 0);\n\n        return dp[idx][k][ms] = max({opt1, opt2, opt3, opt4});\n    }\n\n    int maximumLength(vector<int>& nums, int k) {\n        pos.clear();\n        memset(dp, -1, sizeof(dp));\n\n        for (int i = 0; i < nums.size(); ++i) {\n            pos[nums[i]].push_back(i);\n        }\n\n        return solve(0, nums, k, 0) + 1;\n    }\n    \n};",
    "submit_ts": 1717859988.0
}