{
    "username": "time-v5",
    "submission": "class Solution {\n    int n;\n    int[] head, nxt, to;\n    int[] last, lastNo;\n    int[] second;\n    int[] ans;\n\n    public int[] timeTaken(int[][] edges) {\n        n = edges.length + 1;\n        head = new int[n];\n        nxt = new int[n << 1];\n        to = new int[n << 1];\n        Arrays.fill(head, -1);\n        for (int i = 0, j = 2; i < edges.length; i++) {\n            int u = edges[i][0], v = edges[i][1];\n            nxt[j] = head[u]; head[u] = j; to[j++] = v;\n            nxt[j] = head[v]; head[v] = j; to[j++] = u;\n        }\n        last = new int[n];\n        lastNo = new int[n];\n        second = new int[n];\n        ans = new int[n];\n        dfs(-1, 0);\n        for (int i = 0; i < n; i++) {\n            ans[i] = last[i];\n        }\n        dfs2(-1, 0, 0);\n        return ans;\n    }\n\n    public void dfs2(int f, int u, int preLast) {\n        for (int e = head[u], v; e != -1; e = nxt[e]) {\n            v = to[e];\n            if (f != v) {\n                int pl;\n                if (v == lastNo[u]) {\n                    pl = Math.max(preLast, second[u]) + ((u & 1) == 0 ? 2 : 1);\n                } else {\n                    pl = Math.max(preLast, last[u]) + ((u & 1) == 0 ? 2 : 1);\n                }\n                ans[v] = Math.max(ans[v], pl);\n                dfs2(u, v, pl);\n            }\n        }\n    }\n\n    public void dfs(int f, int u) {\n        for (int e = head[u], v; e != -1; e = nxt[e]) {\n            v = to[e];\n            if (f != v) {\n                dfs(u, v);\n                int t = last[v] + ((v & 1) == 0 ? 2 : 1);\n                if (last[u] < t) {\n                    second[u] = last[u];\n                    last[u] = t;\n                    lastNo[u] = v;\n                } else if (second[u] < t) {\n                    second[u] = t;\n                }\n            }\n        }\n    }\n}",
    "submit_ts": "1722699045",
    "subm_id": "552273794"
}