{
    "username": "sisyphus3",
    "submission": "#define sz(x) int(x.size())\n#define all(x) x.begin(), x.end()\n#define db double\n#define ll long long\n#define ar array\ntemplate<typename T> bool ckmin(T& a, const T& b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\n#define rint(l, r) uniform_int_distribution<int>(l, r)(rng)\nconst int hash_mod = int(1e9)+7;\nint binpow(int a, int b) {\n    int r = 1;\n    for (; b > 0; b >>= 1, a = (long long)a*a%hash_mod) if (b&1) r = (long long)r*a%hash_mod;\n    return r;\n}\nconst int b_N = 2;\nbool init_ = 0;\narray<int, b_N> bases;\nvoid init() {\n    for (int i = 0; i < b_N; i++) {\n        bases[i] = rint(2, hash_mod-1);\n    }\n}\nstruct Hash {\n    array<vector<int>, b_N> pref, inv;\n    Hash() {}\n    Hash(const string &s) {\n        if (!init_) init(), init_ = 1;\n        int n = s.size();\n        for (int i = 0; i < b_N; i++) {\n            pref[i].resize(n), inv[i].resize(n);\n            inv[i][n-1] = binpow(binpow(bases[i], n-1), hash_mod-2);\n            for (int j = n-2; j >= 0; j--) inv[i][j] = (long long)inv[i][j+1] * bases[i] % hash_mod;\n            for (int j = 0, b = 1; j < n; j++, b = (long long)b * bases[i] % hash_mod) {\n                pref[i][j] = (j?pref[i][j-1]:0) + (long long)b*(s[j]+2)%hash_mod;\n                if (pref[i][j] >= hash_mod) pref[i][j] -= hash_mod;\n            }\n        }\n    }\n    array<int, b_N> query(int l, int r) const {\n        array<int, b_N> ret;\n        for (int i = 0; i < b_N; i++) {\n            ret[i] = pref[i][r] - (l?pref[i][l-1]:0);\n            if (ret[i] < 0) ret[i] += hash_mod;\n            ret[i] = (long long)ret[i] * inv[i][l] % hash_mod;\n        }\n        return ret;\n    }\n};\n\nclass Solution {\npublic:\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = sz(target), m = sz(words);\n        Hash h(target);\n        const int N = 100;\n        vector<Hash> e(m);\n        for (int i = 0; i < m; i++) e[i] = Hash(words[i]);\n        map<ar<int, b_N>, int> got[N+1];\n        vector<int> other;\n        for (int i = 0; i < m; i++) { \n            if (sz(words[i]) <= N) {\n                auto s = e[i].query(0, sz(words[i]) - 1);\n                if (got[sz(words[i])].count(s)) ckmin(got[sz(words[i])][s], costs[i]);\n                else got[sz(words[i])][s] = costs[i];\n            }\n            else other.emplace_back(i);\n        }\n        const int INF = 1e9;\n        vector<int> dp(n, INF);\n        for (int i = 0; i < n; i++) {\n            for (int j = 1; i+j-1 < n && j <= N; j++) {\n                auto s = h.query(i, i+j-1);\n                if (got[j].count(s)) ckmin(dp[i+j-1], (i ? dp[i-1] : 0) + got[j][s]);\n            }\n            for (int idx : other) {\n                if (i + sz(words[idx]) - 1 < n) {\n                    int len = sz(words[idx]);\n                    if (h.query(i, i+len-1) == e[idx].query(0, len-1)) {\n                        ckmin(dp[i+len-1], (i ? dp[i-1] : 0) + costs[idx]);\n                    }\n                }\n            }\n        }\n        return dp.back() == INF ? -1 : dp.back();\n    }\n};",
    "submit_ts": "1720320941",
    "subm_id": "1312308986"
}