{
    "username": "lee0560",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        \n        def dfs(cur, parent):\n            for nxt in e[cur]:\n                if nxt != parent:\n                    dfs(nxt, cur)\n                    val = maxi[nxt] + (1 if nxt & 1 else 2)\n                    if val > maxi[cur]:\n                        maxi[cur], maxi2[cur] = val, maxi[cur]\n                    elif val > maxi2[cur]:\n                        maxi2[cur] = val\n        \n        def dp(cur, parent, L):\n            for nxt in e[cur]:\n                if nxt != parent:\n                    res[nxt] = max(maxi[nxt], L)\n                    val = maxi[nxt] + (1 if nxt & 1 else 2)\n                    if val == maxi[cur]:\n                        val2 = maxi2[cur]\n                    else:\n                        val2 = maxi[cur]\n                    val2 = max(val2, L) + (1 if cur & 1 else 2)\n                    res[nxt] = max(res[nxt], val2)\n                    dp(nxt, cur, val2)\n        \n        n = len(edges) + 1\n        e = [[] for _ in range(n)]\n        for u,v in edges:\n            e[u].append(v)\n            e[v].append(u)\n        maxi, maxi2 = [0] * n, [0] * n\n        dfs(0, -1)\n        res = [-inf] * n\n        res[0] = maxi[0]\n        dp(0, -1, 0)\n        return res",
    "submit_ts": "1722699565",
    "subm_id": "552276192"
}