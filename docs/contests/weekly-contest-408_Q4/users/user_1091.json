{
    "username": "Kartik_agarwal",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graphs, int start, int t1, int t2, int node) {\n    queue<int> q;\n    vector<int> vi(node + 4, 0);\n    q.push(start);\n    vi[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graphs[u]) {\n            if (!vi[v]) {\n                q.push(v);\n                vi[v] = 1;\n            }\n        }\n    }\n    return vi[t1] || vi[t2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& c2) {\n         vector<pair<pair<int, int>, int>> circle(c2.size());\n         vector<vector<int>> graph(c2.size() + 4);\n        int c_num=c2.size();\n        \n        for (int i = 0; i < c_num; ++i) {\n            circle[i].first.first=c2[i][0];\n            circle[i].first.second=c2[i][1];\n            circle[i].second=c2[i][2];\n           \n        }\n        \n        \n        \n         for (int i = 0; i < c_num; ++i) {\n             \n            if (circle[i].first.first <= circle[i].second) {\n                graph[c_num].push_back(i);\n                graph[i].push_back(c_num);\n            }\n            if (X - circle[i].first.first <= circle[i].second) {\n                graph[c_num + 2].push_back(i);\n                graph[i].push_back(c_num + 2);\n            }\n            if (circle[i].first.second <= circle[i].second) {\n                graph[c_num + 1].push_back(i);\n                graph[i].push_back(c_num + 1);\n            }\n            if (Y - circle[i].first.second <= circle[i].second) {\n                graph[c_num + 3].push_back(i);\n                graph[i].push_back(c_num + 3);\n            }\n            for (int j = i + 1; j < c_num; ++j) {\n                double distance = sqrt(pow(circle[i].first.first - circle[j].first.first, 2) + pow(circle[i].first.second - circle[j].first.second, 2));\n                int sum_r = circle[i].second + circle[j].second;\n                if (sum_r >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int blocked = 0;\n  \n blocked = max(blocked, bfs(graph, c_num, c_num + 1, c_num + 2, c_num + 4));\n    blocked = max(blocked, bfs(graph, c_num + 3, c_num + 2, c_num + 1, c_num + 4));\n        if (blocked){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722138932",
    "subm_id": "1335803467"
}