{
    "username": "Homie_Lander7",
    "submission": "struct Node\n{\n    long long f_lr;   // f(l, r)\n    long long f_l1r;  // f(l+1, r)\n    long long f_lr1;  // f(l, r-1)\n    long long f_l1r1; // f(l+1, r-1)\n\n    Node() : f_lr(0), f_l1r(0), f_lr1(0), f_l1r1(0) {}\n    Node(long long value) : f_lr(value), f_l1r(0), f_lr1(0), f_l1r1(0) {}\n};\n\nclass SegmentTree\n{\n    vector<Node> tree;\n    vector<long long> array;\n    int n;\n\n    Node merge(const Node &left, const Node &right)\n    {\n         Node result;\n        result.f_lr = max({left.f_lr + right.f_l1r, left.f_lr1 + right.f_lr, left.f_lr1 + right.f_l1r});\n        result.f_l1r = max({left.f_l1r + right.f_l1r, left.f_l1r1 + right.f_lr, left.f_l1r1 + right.f_l1r});\n        result.f_lr1 = max({left.f_lr1 + right.f_l1r1, left.f_lr + right.f_l1r1, left.f_lr1 + right.f_lr1});\n        result.f_l1r1 = max({left.f_l1r1 + right.f_lr1, left.f_l1r + right.f_l1r1, left.f_l1r1 + right.f_lr1});\n\n        return result;\n    }\n\n    void build(int node, int start, int end)\n    {\n        if (start == end)\n        {\n            tree[node] = Node(array[start]);\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    void update(int node, int start, int end, int idx, long long value)\n    {\n        if (start == end)\n        {\n            array[idx] = value;\n            tree[node] = Node(value);\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid)\n            {\n                update(2 * node + 1, start, mid, idx, value);\n            }\n            else\n            {\n                update(2 * node + 2, mid + 1, end, idx, value);\n            }\n            tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\npublic:\n    SegmentTree(const vector<long long> &arr)\n    {\n        n = arr.size();\n        array = arr;\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    void update(int idx, long long value)\n    {\n        update(0, 0, n - 1, idx, value);\n    }\n\n    long long get_max_sum()\n    {\n        if (n == 0)\n            return 0;\n        return max({tree[0].f_lr, tree[0].f_l1r, tree[0].f_lr1, tree[0].f_l1r1});\n    }\n};\nvector<long long> globe;\nlong long brute(int idx, int value)\n{\n    globe[idx] = value;\n    int n = globe.size();\n    long long result = 0;\n    vector<long long> dp(n, 0);\n    for (int i = 0; i < n; i++)\n    {\n        if (i - 2 >= 0)\n        {\n            dp[i] = max(dp[i], dp[i - 2] + max(0ll, globe[i]));\n        }\n        if (i - 1 >= 0)\n        {\n            dp[i] = max(dp[i], dp[i - 1]);\n        }\n        dp[i] = max(dp[i], max(0ll, globe[i]));\n    }\n    return *max_element(dp.begin(), dp.end());\n}\nclass Solution\n{\npublic:\n    int maximumSumSubsequence(vector<int> &nums, vector<vector<int>> &queries)\n    {\n        const int MOD = 1e9 + 7;\n        int n = nums.size();\n        vector<long long> nums_long(n);\n        for (int i = 0; i < n; i++)\n        {\n            nums_long[i] = nums[i];\n        }\n        SegmentTree tree(nums_long);\n        long long result = 0;\n        globe = nums_long;\n\n        for (const auto &query : queries)\n        {\n            int idx = query[0];\n            int value = query[1];\n            // dbg(tree.get_max_sum());\n            tree.update(idx, value);\n            assert(tree.get_max_sum() >= 0);\n            result += tree.get_max_sum();\n            // if (tree.get_max_sum() != brute(idx, value))\n            // {\n            //     cout << \"idx: \" << idx << \" value: \" << value << endl;\n            //     cout << \"tree: \" << tree.get_max_sum() << \" brute: \" << brute(idx, value) << endl;\n            //     break;\n            // }\n        }\n        result %= MOD;\n        assert(result >= 0);\n        return result;\n    }\n};",
    "submit_ts": 1716695208.0
}