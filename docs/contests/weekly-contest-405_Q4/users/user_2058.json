{
    "username": "rv2003",
    "submission": "class Solution {\n    class TrieNode {\n        TrieNode[] children;\n        PriorityQueue<Integer> costs;\n\n        TrieNode() {\n            children = new TrieNode[26];\n            costs = new PriorityQueue<>();\n        }\n    }\n\n    public void insert(TrieNode root, String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            if (node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new TrieNode();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.costs.offer(cost);\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        TrieNode root = new TrieNode();\n\n        // Insert all words into the Trie with their costs\n        for (int i = 0; i < words.length; i++) {\n            insert(root, words[i], costs[i]);\n        }\n\n        // Initialize the dp array\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Dynamic programming with Trie traversal\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                node = node.children[target.charAt(j) - 'a'];\n                if (node == null) break;\n                if (!node.costs.isEmpty()) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.costs.peek());\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }}",
    "submit_ts": "1720320784",
    "subm_id": "1312304453"
}