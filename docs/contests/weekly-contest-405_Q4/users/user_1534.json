{
    "username": "secret_154",
    "submission": "class Solution {\npublic:\n   struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> words; // pair of (length, cost)\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->words.push_back({word.size(), cost});\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // Base case: the cost to form an empty string is 0\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue; // Skip unreachable states\n        TrieNode* node = trie.getRoot();\n        for (int j = i; j < n && node != nullptr; ++j) {\n            if (node->children.count(target[j])) {\n                node = node->children[target[j]];\n                for (const auto& word : node->words) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + word.second);\n                }\n            } else {\n                break;\n            }\n        }\n    }\n  \n\n   if(dp[n]!=INT_MAX)\n       return dp[n];\n        return -1;\n    }\n};",
    "submit_ts": "1720323242",
    "subm_id": "1312370784"
}