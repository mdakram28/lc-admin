{
    "username": "saif_ali_siddiqui07F",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> differenceMap;\n        vector<int> maxValues;\n        int numsSize = nums.size();\n        int halfSize = numsSize / 2;\n\n    for (int i = 0; i < halfSize; i++) {\n        int firstElement = nums[i];\n        int secondElement = nums[numsSize - i - 1];\n        int absDifference = abs(firstElement - secondElement);\n        int maxValue = max({firstElement, secondElement, k - firstElement, k - secondElement});\n        differenceMap[absDifference].push_back(maxValue);\n        maxValues.push_back(maxValue);\n    }\n\n        int minOperations = numsSize;\n        sort(maxValues.begin(), maxValues.end());\n\n    for (auto& differencePair : differenceMap) {\n        int currentDifference = differencePair.first;\n        int operationsCount = lower_bound(maxValues.begin(), maxValues.end(), currentDifference) - maxValues.begin();\n        operationsCount = operationsCount * 2 + (halfSize - operationsCount);\n\n        for (auto& value : differencePair.second) {\n            if (value < currentDifference) {\n                operationsCount -= 2;\n            } else {\n                operationsCount -= 1;\n            }\n        }\n\n        minOperations = min(minOperations, operationsCount);\n    }\n\n        return minOperations;\n    }\n};",
    "submit_ts": "1721490337",
    "subm_id": "1327479772"
}