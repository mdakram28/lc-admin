{
    "username": "ixian",
    "submission": "// solved by: nikhil singh\n// date: 06/07/2024\nclass Solution {\npublic: \n        long long int countSubarrays(vector<int>& nums, int k) {\n        int total_nums = nums.size();\n\n        long long int subarrays = 0;\n        map<long long int, long long int> last_ptr;\n\n        int idx = 0;\n        while (idx < total_nums) {\n            \n            // Map to store the results of the previous iteration\n            map<long long int, long long int> present_ptr;\n\n            if (nums[idx] == k) {\n                ++subarrays;\n            }\n\n            present_ptr[nums[idx]] = 1;\n            auto iter = last_ptr.begin();\n            \n            while (iter != last_ptr.end()) {\n                long long int element = iter->first;\n                long long int reps = iter->second;\n                \n                 // Compute the AND operation\n                long long int upshot = element & nums[idx];\n                if (upshot == k) {\n                    subarrays += reps;\n                }\n                \n                // Update the frequency of the result of the AND operation\n                present_ptr[upshot] += reps;\n                iter++;\n            }\n\n            last_ptr = present_ptr;\n            idx++;\n        }\n\n        return subarrays;\n    }\n};\n\n\n",
    "submit_ts": "1720279978",
    "subm_id": "1311772492"
}