{
    "username": "Nguy\u1ec5n Th\u1ea3o",
    "submission": "class SegNode:\n    def __init__(self, lo,hi):\n        if lo==hi:\n            self.lo,self.hi,self.left,self.right=lo,hi,None,None\n        else:\n            mid=(lo+hi)//2\n            self.lo,self.hi,self.left,self.right=lo,hi,SegNode(lo,mid), SegNode(mid+1,hi)\n        self.val, self.lazy=0,0\n    def update(self, v):\n        self.lazy+=v\n        self.val += (self.hi-self.lo+1)*v\n    def _flush(self):\n        self.left.update(self.lazy)\n        self.right.update(self.lazy)\n        self.lazy=0\n    def inc(self, lo, hi):\n        if self.hi<lo or self.lo>hi: return\n        if lo<=self.lo and self.hi<=hi:\n            self.update(1)\n            return\n        if self.lazy>0:\n            self._flush()\n        self.left.inc(lo,hi)\n        self.right.inc(lo,hi)\n        self.val = self.left.val + self.right.val\n    def query(self, lo,hi):\n        if self.hi<lo or self.lo>hi: return 0\n        if lo <= self.lo and self.hi<=hi:\n            return self.val\n        if self.lazy>0: self._flush()\n        return self.left.query(lo,hi) + self.right.query(lo,hi)\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        endr = [n]*n\n        c,start = Counter(), 0\n        for i,ch in enumerate(s):\n            c[ch]+=1\n            while c['0']>k and c['1']>k:\n                endr[start] = i\n                c[s[start]]-=1\n                start+=1\n        seg = SegNode(0, n)\n        res = [0]*len(queries)\n        toask = [[] for _ in range(n)]\n        for i,q in enumerate(queries):\n            toask[q[0]].append(i)\n        for i in range(n-1,-1,-1):\n            seg.inc(i, endr[i]-1)\n            for j in toask[i]:\n                l,r = queries[j]\n                res[j] = seg.query(l,r)\n        return res\n\n        # return [0]*len(queries)\n\n        ",
    "submit_ts": "1723951064",
    "subm_id": "1359762308"
}