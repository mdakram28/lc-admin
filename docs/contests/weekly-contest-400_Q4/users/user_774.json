{
    "username": "fenwick-tree",
    "submission": "\nclass Solution {\npublic:\n    static const int N = 200000;\n    static const int bit = 32;\n    int prefix_count[bit][N] = {0}; // Initialize to 0\n\n    void findPrefixCount(vector<int>& A) {\n        int n = A.size();\n        for (int i = 0; i < bit; i++) {\n            prefix_count[i][0] = ((A[0] >> i) & 1);\n            for (int j = 1; j < n; j++) {\n                prefix_count[i][j] = ((A[j] >> i) & 1);\n                prefix_count[i][j] += prefix_count[i][j - 1];\n            }\n        }\n    }\n\n    int minimumDifference(vector<int>& A, int k) {\n        int n = A.size();\n        findPrefixCount(A);\n        int result = INT_MAX;\n\n        for (int i = 0; i < n; i++) {\n            int low = i;\n            int high = n - 1;\n\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                int res = 0;\n\n                for (int j = 0; j < bit; j++) {\n                    int x;\n                    if (i == 0)\n                        x = prefix_count[j][mid];\n                    else\n                        x = prefix_count[j][mid] - prefix_count[j][i - 1];\n\n                    if (x == mid - i + 1) res = (res | (1 << j));\n                }\n\n                if (res > k) {\n                    result = min(result, res - k);\n                    low = mid + 1;\n                } else if (res == k) {\n                    result = min(result, res - k);\n                    break; \n                } else {\n                    result = min(result, k - res);\n                    high = mid - 1;\n                }\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1717298282.0
}