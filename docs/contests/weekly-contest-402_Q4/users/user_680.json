{
    "username": "XxFALCONxX",
    "submission": "class SegmentTree {\n\n\n    public:\n    std::vector<int> tree;\n    std::vector<int> arr;\n    int n;\n    SegmentTree(const std::vector<int>& nums) {\n        n = nums.size();\n        arr = nums;\n        tree.resize(4 * n, 0);\n        build(0, 0, n - 1);\n    }\n\n    int isPeak(int index) {\n        if (index == 0 || index == n - 1) return 0;\n        if(arr[index] > arr[index - 1] && arr[index] > arr[index + 1]) return 1;\n        return 0;\n    }\n    bool ndc(int a, int b, int c){\n        return a<=b && b<=c;\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start);\n        } else {\n            int mid = start + (end-start)/2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n        // cout<<\"BUILD \"<<start<<\" \"<<end<<\" => \"<<tree[node]<<\" ..\"<<isPeak(start)<<endl;\n    }\n    \n\n    void update(int index, int value) {\n        arr[index] = value;\n        updateUtil(0, 0, n - 1, index, value);\n    }\n\n    void updateUtil(int node, int start, int end, int index, int value) {\n        if (start == end) {\n            tree[node] = isPeak(start);\n        } else {\n            int mid = start + (end - start)/2;\n            if(ndc(start, index, mid)){\n                updateUtil(2 * node + 1, start, mid, index, value);\n                if(index == mid && index + 1 <= end) updateUtil(2 * node + 2, mid + 1, end, index + 1, value);\n            } else {\n                updateUtil(2 * node + 2, mid + 1, end, index, value);\n                if(index == mid + 1 && index - 1 >= start) updateUtil(2 * node + 1, start, mid, index - 1, value);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n        \n    }\n\n    int query(int L, int R) {\n        return queryUtil(0, 0, n - 1, L, R);\n    }\n\n    int queryUtil(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = start + (end - start) / 2;\n        int leftQuery = queryUtil(2 * node + 1, start, mid, L, R);\n        int rightQuery = queryUtil(2 * node + 2, mid + 1, end, L, R);\n        return leftQuery + rightQuery;\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(std::vector<int>& nums, std::vector<std::vector<int>>& queries) {\n    SegmentTree segTree(nums);\n    std::vector<int> result;\n        \n    // for(auto i:segTree.tree) cout<<i<<\" \"; cout<<endl;\n\n    for (const auto& query : queries) {\n        if (query[0] == 1) {\n            int li = query[1];\n            int ri = query[2];\n            if(li + 1 > ri - 1) result.push_back(0);\n            else result.push_back(segTree.query(li + 1, ri - 1));\n        } else if (query[0] == 2) {\n            int indexi = query[1];\n            int vali = query[2];\n            segTree.update(indexi, vali);\n        }\n    }\n    \n    return result;\n}\n};",
    "submit_ts": "1718508225",
    "subm_id": "1289675207"
}