{
    "username": "sfpotato",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        long long ans = 0;\n        int n = nums.size();\n        vector<int> d(n+2);\n        for (int i = 0; i < n; i++) {\n            d[i+1] = target[i] - nums[i];\n        }\n        d[0] = 0;\n        d[n+1] = 0;\n        stack<int> s;\n        auto clear = [&]() {\n            while (!s.empty()) s.pop();\n        };\n        for (int i = 0; i <= n+1; i++) {\n            if (d[i] >= 0) {\n                while (!s.empty() && (abs(s.top()) > abs(d[i]))) {\n                    int h = s.top(); s.pop();\n                    ans += h - max(d[i], s.top());\n                }    \n                s.push(d[i]);\n            } else {\n                ans += abs(s.top());\n                clear();\n                s.push(0);\n            }\n        }\n        clear();\n        for (int i = 0; i <= n+1; i++) {\n            if (d[i] <= 0) {\n                while (!s.empty() && (abs(s.top()) > abs(d[i]))) {\n                    int h = abs(s.top()); s.pop();\n                    ans += h - max(abs(d[i]), abs(s.top()));\n                }    \n                s.push(d[i]);\n            } else {\n                ans += abs(s.top());\n                clear();\n                s.push(0);\n            }\n        }\n        return ans;\n    }\n};\n// [1, -2, 2]",
    "submit_ts": "1721532869",
    "subm_id": "548394795"
}