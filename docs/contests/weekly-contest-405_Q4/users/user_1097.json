{
    "username": "parthahere001",
    "submission": "class TNode {\npublic:\n    unordered_map<char, TNode*> ch; // children nodes\n    vector<pair<int, int>> end; // word index and cost\n\n    TNode() : ch(), end() {}\n};\n\n// Trie structure\nclass Trie {\npublic:\n    TNode* root;\n\n    Trie() {\n        root = new TNode();\n    }\n\n    void add(const string& word, int idx, int cost) {\n        TNode* cur = root;\n        for (char c : word) {\n            if (!cur->ch.count(c)) {\n                cur->ch[c] = new TNode();\n            }\n            cur = cur->ch[c];\n        }\n        cur->end.push_back({idx, cost});\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string tgt, vector<string>& wrds, vector<int>& csts) {\n        int n = tgt.size();\n        vector<long long> dp(n+1, 1e17);\n        dp[0] = 0; \n\n        Trie trie;\n        for (int i = 0; i < wrds.size(); ++i) {\n            trie.add(wrds[i], i, csts[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == 1e17) continue; \n\n            TNode* cur = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!cur->ch.count(tgt[j])) break; \n                cur = cur->ch[tgt[j]];\n                for (auto& p : cur->end) {\n                    int w_len = wrds[p.first].size();\n                    if (i + w_len <= n) {\n                        dp[i + w_len] = min(dp[i + w_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n        if (dp[n]==1e17)\n            return -1;\n        return dp[n];\n       \n    }\n};",
    "submit_ts": "1720322541",
    "subm_id": "1312352683"
}