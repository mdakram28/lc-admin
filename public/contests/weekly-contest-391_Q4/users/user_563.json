{
    "username": "hhhhao-7",
    "submission": "class Solution {\nprivate:\n    int getWithout(vector<vector<pair<int,int>>> p, int node){\n        int mx = 0;\n        for(int i=0;i<4;i++){\n            if(p[i].front().second!=node && p[i].back().second!=node){\n                mx = max(mx, p[i].back().first- p[i].front().first);\n            }else if(p[i][0].second==node){\n                mx = max(mx, p[i].back().first- p[i][1].first);\n            }else if(p[i].back().second==node){\n                mx = max(mx, p[i][p[i].size()-2].first-p[i][0].first);\n            }\n        }\n        return mx;\n\n    }\n\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        \n        vector<vector<pair<int,int>>> p(4);\n        int n = points.size();\n        for(int i=0;i<n;i++){\n            int x = points[i][0];\n            int y = points[i][1];\n            p[0].push_back({x+y,i});\n            p[1].push_back({-x+y,i});\n            p[2].push_back({x-y,i});\n            p[3].push_back({-x-y,i});\n        }\n        int mx=0;\n        unordered_set<int> us;\n        for(int i=0;i<4;i++){\n            sort(p[i].begin(),p[i].end());\n            if(mx<p[i][n-1].first-p[i][0].first){\n                mx = p[i][n-1].first-p[i][0].first;\n                us.clear();\n            }\n            if(mx==p[i][n-1].first-p[i][0].first){\n                us.insert(p[i][n-1].second);\n                us.insert( p[i][0].second);\n            }\n        }\n        int ans = INT_MAX;\n        for(auto x: us){\n            cout << x << endl;\n            ans = min(getWithout(p, x), ans);\n        }\n        return ans;\n\n    }\n};"
}