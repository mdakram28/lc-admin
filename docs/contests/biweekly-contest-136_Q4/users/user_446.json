{
    "username": "wang-wen-qi-i",
    "submission": "import java.util.ArrayList;\nimport java.util.Collections;\n\nclass Solution {\n    public int[] timeTaken(int[][] edges) {\n\t\tint n = edges.length + 1;\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tArrayList<Integer>[] tree = new ArrayList[n];\n\t\tinitEdges(edges, tree);\n\t\t\n\t\t@SuppressWarnings(\"unchecked\")\n\t\tArrayList<int[]>[] max = new ArrayList[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tmax[i] = new ArrayList<int[]>();\n\t\t}\n\t\tsearch(tree, 0, max, -1);\n\t\t\n\t\tsearch(tree, 0, max, -1, 0);\n\t\t\n\t\tint[] ans = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tif (max[i].size() >= 1) {\n\t\t\t\tans[i] = max[i].get(0)[1];\n\t\t\t}\n\t\t}\n\t\treturn ans;\n    }\n\n\tprivate void search(ArrayList<Integer>[] tree, int p, ArrayList<int[]>[] max, int pre, int preVal) {\n\t\taddInto(max[p], pre, preVal);\n\t\tArrayList<Integer> sons = tree[p];\n\t\tfor (int s : sons) {\n\t\t\tif (s == pre) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint newPreVal = 0;\n\t\t\tif (max[p].size() >= 1 && max[p].get(0)[0] != s) {\n\t\t\t\tnewPreVal = max[p].get(0)[1];\n\t\t\t} else if (max[p].size() >= 2) {\n\t\t\t\tnewPreVal = max[p].get(1)[1];\n\t\t\t}\n\t\t\tif (p % 2 == 1) {\n\t\t\t\tnewPreVal += 1;\n\t\t\t} else {\n\t\t\t\tnewPreVal += 2;\n\t\t\t}\n\t\t\tsearch(tree, s, max, p, newPreVal);\n\t\t}\n\t}\n\n\tprivate int search(ArrayList<Integer>[] tree, int p, ArrayList<int[]>[] max, int pre) {\n\t\tint sonsMax = 0;\n\t\tArrayList<Integer> sons = tree[p];\n\t\tfor (int s : sons) {\n\t\t\tif (s == pre) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint each = search(tree, s, max, p);\n\t\t\tif (s % 2 == 1) {\n\t\t\t\tsonsMax = Math.max(sonsMax, each + 1);\n\t\t\t\taddInto(max[p], s, each + 1);\n\t\t\t} else {\n\t\t\t\tsonsMax = Math.max(sonsMax, each + 2);\n\t\t\t\taddInto(max[p], s, each + 2);\n\t\t\t}\n\t\t}\n\t\treturn sonsMax;\n\t}\n\n\tprivate void addInto(ArrayList<int[]> list, int i, int val) {\n\t\tlist.add(new int[] {i, val});\n\t\tCollections.sort(list, (x,y)->y[1]-x[1]);\n\t\tif (list.size() > 2) {\n\t\t\tlist.remove(2);\n\t\t}\n\t}\n\n\tprivate void initEdges(int[][] edges, ArrayList<Integer>[] list) {\n\t\tint n = list.length;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tlist[i] = new ArrayList<Integer>();\n\t\t}\n\t\tfor (int[] e : edges) {\n\t\t\tlist[e[0]].add(e[1]);\n\t\t\tlist[e[1]].add(e[0]);\n\t\t}\n\t}\n}",
    "submit_ts": "1722698327",
    "subm_id": "552270372"
}