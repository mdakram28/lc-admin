{
    "username": "user21ru",
    "submission": "\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort horizontal and vertical cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int i = 0, j = 0;\n        long long h_pieces = 1, v_pieces = 1;\n        long long totalCost = 0;\n\n        // Process the cuts in descending order of cost\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += horizontalCut[i] * v_pieces;\n                h_pieces++;\n                i++;\n            } else {\n                totalCost += verticalCut[j] * h_pieces;\n                v_pieces++;\n                j++;\n            }\n        }\n\n        // Process any remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += horizontalCut[i] * v_pieces;\n            h_pieces++;\n            i++;\n        }\n\n        // Process any remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += verticalCut[j] * h_pieces;\n            v_pieces++;\n            j++;\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925524",
    "subm_id": "1320257571"
}