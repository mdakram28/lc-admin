{
    "username": "roygaurav2004",
    "submission": "class Solution {\npublic:\n    int findDia(int n, vector<int> adj[]){\n        int nn = 0;\n        int maxi = 0;\n        queue<pair<int,int>> q;\n        q.push({0,0});\n        vector<int> vis(n,0);\n        vis[0] = 1;\n        while(!q.empty()){\n            int node = q.front().first;\n            int d = q.front().second;\n            if(d> maxi) maxi =d, nn = node;\n            q.pop();\n            for(auto it:adj[node]){\n                if(!vis[it]){\n                    vis[it] = 1;\n                    q.push({it,d+1});\n                }\n            }\n        }\n        for(int i=0; i<n; i++) vis[i] = 0;\n        q.push({nn,0});\n        maxi = 0;\n        vis[nn] = 1;\n        while(!q.empty()){\n            int node = q.front().first;\n            int d = q.front().second;\n            if(d> maxi) maxi =d;\n            q.pop();\n            for(auto it:adj[node]){\n                if(!vis[it]){\n                    vis[it] = 1;\n                    q.push({it,d+1});\n                }\n            }\n        }\n        \n        return maxi;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1; int m = edges2.size()+1;\n        vector<int> adj1[n]; vector<int> adj2[m];\n        for(auto it:edges1){\n            adj1[it[0]].push_back(it[1]);\n            adj1[it[1]].push_back(it[0]);\n        }\n        for(auto it:edges2){\n            adj2[it[0]].push_back(it[1]);\n            adj2[it[1]].push_back(it[0]);\n        }\n        \n        int dia1 = findDia(n,adj1);\n        int dia2 = findDia(m,adj2);\n        \n        return max({(1+(dia1+1)/2 + (dia2+1)/2),dia1,dia2});\n    }\n};",
    "submit_ts": "1719717938",
    "subm_id": "1304404603"
}