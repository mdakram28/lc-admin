{
    "username": "amsraman",
    "submission": "template <class B>\nstruct SparseTable : public B {\n    using T = typename B::T;\n    int n; vector<vector<T>> st;\n    SparseTable(vector<T> & a): n((int) a.size()), st(__lg(n) + 1, vector<T>(n, B::e)) {\n        for(int i = 0; i < n; i++) {\n            st[0][i] = a[i];\n        }\n        int lev = __lg(n);\n        for(int i = 1; i <= lev; i++) {\n            for(int j = 0; j < n; j++) {\n                st[i][j] = B::comb(st[i - 1][j], st[i - 1][min(n - 1, j + (1 << (i - 1)))]);\n            }\n        }\n    }\n    T qry(int l, int r) {\n        int lev = __lg(r - l + 1);\n        return B::comb(st[lev][l], st[lev][r - (1 << lev) + 1]);\n    }\n};\n\nstruct And {\n    using T = int;\n    const T e = INT_MAX;\n    T comb(T a, T b) {\n        return a & b;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = (int) nums.size();\n        SparseTable<And> st(nums); int ans = INT_MAX;\n        for(int i = 0; i < n; i++) {\n            int cur = i;\n            ans = min(ans, abs(k - nums[i]));\n            int tot = st.qry(0, i);\n            while(st.qry(cur, i) != tot) {\n                int lb = 0, ub = cur - 1, ref = st.qry(cur, i);\n                while(lb < ub) {\n                    int mid = (lb + ub + 1) / 2;\n                    if(st.qry(mid, i) == ref) {\n                        ub = mid - 1;\n                    } else {\n                        lb = mid;\n                    }\n                }\n                cur = ub;\n                ans = min(ans, abs(k - st.qry(cur, i)));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297025",
    "subm_id": "1274727638"
}