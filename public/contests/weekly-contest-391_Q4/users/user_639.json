{
    "username": "arjit_07",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        multiset<int> v, v1;\n        int n = points.size();\n        for(int i = 0; i < n; i++){\n            v.insert(points[i][0] + points[i][1]);\n            v1.insert(points[i][0] - points[i][1]);\n        }\n        \n        \n        int ans = INT_MAX;\n//         cout << *v.begin() << \" \" << *(--v.end()) << endl;\n//         cout << *v1.begin() << \" \" << *v1.end() << endl;\n        \n        for(int i = 0; i < n; i++){\n            int sm1 = points[i][0] + points[i][1];\n            int sm2 = points[i][0] - points[i][1];\n            auto it1 = v.find(sm1);\n            v.erase(it1);\n            auto it2 = v1.find(sm2);\n            v1.erase(it2);\n            int dist = max(*(--v.end()) - *v.begin(), *(--v1.end()) - *v1.begin());\n            \n            ans = min(ans, dist);\n            v.insert(sm1);\n            v1.insert(sm2);\n        }\n        return ans;\n    }\n};"
}