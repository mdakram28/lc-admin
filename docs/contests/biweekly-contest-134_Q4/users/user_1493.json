{
    "username": "spaceandtimecomp",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        int lg[n + 1];\n        lg[0] = 0;\n        for (int i = 1; i <= n; i++) lg[i] = (1 << lg[i - 1] == i) + lg[i - 1];\n        int f[n][lg[n]];\n        for (int i = 0; i < n; i++) f[i][0] = nums[i];\n        for (int j = 0; j < lg[n]; j++) \n        {\n            int t = (1 << (j + 1)) - 1;\n            for (int i = 0; i + t< n; i++)\n            {\n                f[i][j + 1] = f[i][j] & f[i + (1 << j)][j];\n            }\n        }\n        auto compute = [&](int l, int r)\n        {\n            int layer = lg[r - l + 1] - 1;\n            return f[l][layer] & f[r - (1 << layer) + 1][layer];\n        };\n        auto equalKthLow = [&](int R){\n            int l = 0, r = R;\n            while (l < r)\n            {\n                int mid = (l + r) >> 1;\n                int cur = compute(mid, R);\n                if (cur == k || (cur & k) == k) r = mid;\n                else l = mid + 1;\n            }\n            return l;\n        };\n        auto greaterKth = [&](int R){\n            int l = 0, r = R;\n            while (l < r)\n            {\n                int mid = (l + r) >> 1;\n                int cur = compute(mid, R);\n                if ((cur & k) == k && cur > k) r = mid;\n                else l = mid + 1;\n            }\n            return l;\n        };\n        long long ans = 0;\n        for (int i = 0; i < n; i++)\n        {\n            int l = equalKthLow(i), r = greaterKth(i);\n            ans += r - l + (nums[i] == k);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720281238",
    "subm_id": "544575005"
}