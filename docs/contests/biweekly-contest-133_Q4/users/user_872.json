{
    "username": "vedant_laddha",
    "submission": "import scala.collection.mutable.HashMap\n\nobject Solution {\n  val MOD: Int = 1_000_000_007\n  val MAX_INVERSIONS: Int = 400\n\n  def numberOfPermutations(n: Int, requirements: Array[Array[Int]]): Int = {\n    val endIdxToInversionCnt = new HashMap[Int, Int]()\n    for (req <- requirements) {\n      endIdxToInversionCnt(req(0) + 1) = req(1)\n    }\n\n    val dp = Array.ofDim[Long](n + 1, MAX_INVERSIONS + 1)\n    for (i <- 0 to n) {\n      for (j <- 0 to MAX_INVERSIONS) {\n        dp(i)(j) = 0\n      }\n    }\n    dp(0)(0) = 1\n\n    var length = 1\n    while (length <= n) {\n      var currentInversions = 0\n      while (currentInversions <= MAX_INVERSIONS) {\n        var newPosition = 0\n        while (newPosition < length) {\n          val previousInversions = currentInversions - newPosition\n          if (previousInversions >= 0) {\n            dp(length)(currentInversions) = (dp(length)(currentInversions) + dp(length - 1)(previousInversions)) % MOD\n          }\n          newPosition += 1\n        }\n        currentInversions += 1\n      }\n\n      if (endIdxToInversionCnt.contains(length)) {\n        val requiredInversions = endIdxToInversionCnt(length)\n        var currentInversions = 0\n        while (currentInversions <= MAX_INVERSIONS) {\n          if (currentInversions != requiredInversions) {\n            dp(length)(currentInversions) = 0\n          }\n          currentInversions += 1\n        }\n      }\n\n      length += 1\n    }\n\n    var result: Long = 0\n    var currentInversions = 0\n    while (currentInversions <= MAX_INVERSIONS) {\n      result = (result + dp(n)(currentInversions)) % MOD\n      currentInversions += 1\n    }\n\n    result.toInt\n  }\n}",
    "submit_ts": 1719071134.0
}