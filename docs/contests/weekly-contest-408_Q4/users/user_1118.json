{
    "username": "hardikn13",
    "submission": "class Solution {\npublic:\n    \n    bool solve(int X, int Y, vector<vector<int>>& cir) {\n        \n        int n = cir.size();\n        vector<vector<int>> graph(n + 4);\n        \n        for (int i = 0; i < n; i++) {\n            \n            if (cir[i][0] <= cir[i][2]) {\n                \n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if (X - cir[i][0] <= cir[i][2]) {\n                \n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            if (cir[i][1] <= cir[i][2]) {\n                \n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - cir[i][1] <= cir[i][2]) {\n                \n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                \n                double dist = sqrt(pow(cir[i][0] - cir[j][0], 2) + pow(cir[i][1] - cir[j][1], 2));\n                int radSum = cir[i][2] + cir[j][2];\n                \n                if (radSum >= dist) {\n                    \n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int blocked = 0;\n        \n        blocked = max(blocked, bfs(graph, n, n + 1, n + 2, n + 4));\n        blocked = max(blocked, bfs(graph, n + 3, n + 2, n + 1, n + 4)); \n        \n        return blocked == 0;\n    }\n    \n    int bfs(vector<vector<int>>& graph, int start, int target1, int target2, int size) {\n        \n        queue<int> q;\n        vector<bool> visited(size + 4, false);\n        \n        q.push(start);\n        visited[start] = true;\n        \n        while (!q.empty()) {\n            \n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : graph[node]) {\n                \n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        \n        return (visited[target1] || visited[target2] ? 1 : 0);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        \n        return solve(X, Y, circles);\n    }\n};\n",
    "submit_ts": "1722138579",
    "subm_id": "1335794384"
}