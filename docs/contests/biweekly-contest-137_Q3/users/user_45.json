{
    "username": "hank55663",
    "submission": "#define pb push_back\n#define x first\n#define y second\n#define pdd pair<double,double>\n#define pii pair<int,int>\n#define pll pair<LL,LL>\n#define mp make_pair\n#define LL long long\n#define ULL unsigned long long\n#define sqr(x) ((x)*(x))\n#define pi acos(-1)\n#define MEM(x) memset(x,0,sizeof(x))\n#define MEMS(x) memset(x,-1,sizeof(x))\nclass Solution {\npublic:\n    struct CostFlow {\n    static const int MXN = 1005;\n    static const long long INF = 102938475610293847LL;\n    struct Edge {\n        int v, r;\n        long long f, c;\n        Edge(int a,int b,int _c,int d):v(a),r(b),f(_c),c(d){\n\t\t}\n    };\n    int n, s, t, prv[MXN], prvL[MXN], inq[MXN];\n    long long dis[MXN], fl, cost;\n    vector<Edge> E[MXN];\n    void init(int _n, int _s, int _t) {\n        n = _n; s = _s; t = _t;\n        for (int i=0; i<n; i++) E[i].clear();\n        fl = cost = 0;\n    }\n    void add_edge(int u, int v, long long f, long long c)\n    {\n        E[u].pb(Edge(v, E[v].size() , f, c));\n        E[v].pb(Edge(u, E[u].size()-1, 0, -c));\n    }\n    pll flow() {\n        while(true){\n            for (int i=0; i<n; i++) {\n                dis[i] = INF;\n                inq[i] = 0;\n            }\n            dis[s] = 0;\n            queue<int> que;\n            que.push(s);\n            while (!que.empty()) {\n                int u = que.front(); que.pop();\n                inq[u] = 0;\n                for (int i=0; i<E[u].size(); i++) {\n                    int v = E[u][i].v;\n                    long long w = E[u][i].c;\n                    if (E[u][i].f > 0 && dis[v] > dis[u] + w) {\n                        assert(E[u][i].f>0);\n                        prv[v] = u; prvL[v] = i;\n                        dis[v] = dis[u] + w;\n                        if (!inq[v]) {\n                            inq[v] = 1;\n                            que.push(v);\n                        }\n                    }\n                }\n            }\n          //  for(int i = 0;i<n;i++)printf(\"%lld \",dis[i]);\n         //   printf(\"\\n\");\n          //  printf(\"%d %d\\n\",t,dis[t]);\n            if (dis[t] == INF) break;\n            long long tf = INF;\n            \n            for (int v=t, u, l; v!=s; v=u) {\n                u=prv[v]; l=prvL[v];\n                tf = min(tf, E[u][l].f);\n              //  printf(\"%d\\n\",E[u][l].f);\n               //        printf(\"%d %d %d %d %d %d\\n\",v,u,s,t,E[0][0].f,tf);\n            }          //  printf(\"%d %d %d %d %d %d\\n\",v,u,s,t,E[0][0].f,tf);\n               //   printf(\"!%d %d %d\\n\",s,t,E[0][0].f);\n            for (int v=t, u, l; v!=s; v=u) {\n                u=prv[v]; l=prvL[v];\n                    //  printf(\"!%d %d %d\\n\",s,t,E[0][0].f);\n              //  printf(\"? %d %d %d %d\\n\",u,v,E[u][l].f,l);\n                E[u][l].f -= tf;\n                E[v][E[u][l].r].f += tf;\n               // printf(\"? %d %d %d %d\\n\",u,v,E[u][l].f,l);\n            }\n            cost += tf * dis[t];\n            fl += tf;\n        }\n        return {fl, cost};\n    }\n}flow;\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n=board.size(),m=board[0].size();\n        flow.init(n+m+3,0,n+m+2);\n        flow.add_edge(0,n+m+1,3,0);\n        for(int i = 1;i<=n;i++)flow.add_edge(n+m+1,i,1,0);\n        for(int j = 1;j<=m;j++)flow.add_edge(j+n,n+m+2,1,0);\n        for(int i =0;i<board.size();i++){\n            for(int j=0;j<board[0].size();j++){\n                flow.add_edge(i+1,j+n+1,1,-board[i][j]);    \n            }\n        }\n        return -flow.flow().y;\n    }\n};",
    "submit_ts": "1723906892",
    "subm_id": "1359078405"
}