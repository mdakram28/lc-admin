{
    "username": "gegeezpz",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Map<String, Integer> map = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            map.put(words[i], Math.min(map.getOrDefault(words[i], Integer.MAX_VALUE), costs[i]));\n        }\n        int idx = 0;\n        String[] newW = new String[map.size()];\n        int[] newC = new int[map.size()];\n        for (Map.Entry<String, Integer> e : map.entrySet()) {\n            newW[idx] = e.getKey();\n            newC[idx] = e.getValue();\n            idx++;\n        }\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        Trie trie = new Trie();\n        for (int i = 0; i < newW.length; i++) {\n            trie.insert(newW[i], i);\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            List<int[]> prefixes = trie.searchPrefixes(target, i);\n            for (int[] prefix : prefixes) {\n                int endIndex = prefix[0] + 1;\n                int wordIndex = prefix[1];\n                dp[endIndex] = Math.min(dp[endIndex], dp[i] + newC[wordIndex]);\n            }\n        }\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n    \n    class TrieNode {\n        Map<Character, TrieNode> children;\n        int index;\n\n        TrieNode() {\n            children = new HashMap<>();\n            index = -1;\n        }\n    }\n\n    class Trie {\n        TrieNode root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(String word, int index) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.index = index;\n        }\n\n        List<int[]> searchPrefixes(String s, int start) {\n            TrieNode node = root;\n            List<int[]> result = new ArrayList<>();\n            for (int i = start; i < s.length(); i++) {\n                char c = s.charAt(i);\n                if (!node.children.containsKey(c)) {\n                    break;\n                }\n                node = node.children.get(c);\n                if (node.index != -1) {\n                    result.add(new int[]{i, node.index});\n                }\n            }\n            return result;\n        }\n    }\n}",
    "submit_ts": "1720323416",
    "subm_id": "1312375014"
}