{
    "username": "mikeac",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        \n        bit = [0] * (n + 1)\n\n        def query(x: int) -> int:\n            res = 0\n            while x:\n                res += bit[x]\n                x &= x - 1\n            return res\n\n        def add(x: int, val: int):\n            while x <= n:\n                bit[x] += val\n                x += x & -x\n        \n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                add(i + 1, 1)\n        \n        ans = []\n        def restore(i: int):\n            if 0 < i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                add(i + 1, -1)\n        def recal(i: int):\n            if 0 < i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                add(i + 1, 1)\n        for t, a, b in queries:\n            if t == 1:\n                if a + 2 > b:\n                    ans.append(0)\n                else:\n                    print(query(b))\n                    print(query(a + 1))\n                    ans.append(query(b) - query(a + 1))\n            else:\n                restore(a)\n                restore(a - 1)\n                restore(a + 1)\n                nums[a] = b\n                recal(a)\n                recal(a - 1)\n                recal(a + 1)\n        return ans",
    "submit_ts": "1718506330",
    "subm_id": "539774288"
}