{
    "username": "Ayush_Gautam0704",
    "submission": "class Solution {\npublic:\n    Solution() {\n        std::ios_base::sync_with_stdio(false);\n        std::cin.tie(nullptr);\n        std::cout.tie(nullptr);\n    }\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> words;\n    };\n\n    void insertWord(TrieNode* root, const string& word, int cost, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->words.push_back({word.length(), cost});\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], costs[i], i);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX)\n                continue;\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.find(c) == node->children.end())\n                    break;\n                node = node->children[c];\n                for (const auto& [length, cost] : node->words) {\n                    if (j - i + 1 == length) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320268",
    "subm_id": "1312288743"
}