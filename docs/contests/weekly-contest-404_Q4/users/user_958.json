{
    "username": "Celestial_Coder",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n      int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        unordered_set<int>st;\n        vector<vector<int>> fir(n);\n        vector<vector<int>> sec(m);\n        \n        for (const auto& edge : edges1) {\n            int from=edge[0],to=edge[1];\n            fir[from].push_back(to);\n            fir[to].push_back(from);\n        }\n        for (const auto& edge : edges2) {\n            st.insert(edge[1]);\n            sec[edge[0]].push_back(edge[1]);\n            sec[edge[1]].push_back(edge[0]);\n        }\n\n        auto help = [](const vector<vector<int>>& adj, int start, int& de) {\n            vector<int> vis(adj.size(), -1);\n            function<void(int, int)> recu = [&](int f, int d) {\n                vis[f] = d;\n                if (d > vis[de]) {\n                    de = f;\n                }\n                for (int it : adj[f]) \n                    if (vis[it] == -1 )\n                        recu(it, d + 1);\n                    \n            };\n            de = start;\n            recu(start, 0);\n            return vis[de];\n        };\n        int x=0;\n        help(fir, 0, x);\n        int d1 = help(fir, x, x);\n        int c=0;\n        help(sec, 0, c);\n        int d2 = help(sec,c, c);   \n       int res = max(max(d1, d2), (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n        \n        return res;\n    }\n};",
    "submit_ts": "1719719184",
    "subm_id": "1304435717"
}