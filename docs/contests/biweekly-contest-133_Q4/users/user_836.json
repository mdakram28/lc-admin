{
    "username": "Kj_singh",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    const int MAX_INV = 400;\n    \n    \n    int countInversions(const vector<int>& perm) {\n    int invCount = 0;\n    for (int i = 0; i < perm.size(); ++i) {\n        for (int j = i + 1; j < perm.size(); ++j) {\n            if (perm[i] > perm[j]) {\n                invCount++;\n            }\n        }\n    }\n    return invCount;\n }\n    \n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        \n        unordered_map<int, int> endToInv;\n        \n        for (auto& req : reqs) {\n            endToInv[req[0] + 1] = req[1]; \n        }\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int curInv = 0; curInv <= MAX_INV; ++curInv) {\n                for (int newPos = 0; newPos < len; ++newPos) {\n                    int prevInv = curInv - newPos;\n                    if (prevInv >= 0) {\n                        dp[len][curInv] = (dp[len][curInv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (endToInv.count(len) > 0) {\n                int reqInv = endToInv[len];\n                for (int curInv = 0; curInv <= MAX_INV; ++curInv) {\n                    if (curInv != reqInv) {\n                        dp[len][curInv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long res = 0;\n        for (int curInv = 0; curInv <= MAX_INV; ++curInv) {\n            res = (res + dp[n][curInv]) % MOD;\n        }\n\n        return res;\n    }\n\n};",
    "submit_ts": "1719070748",
    "subm_id": "1296830758"
}