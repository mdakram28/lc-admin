{
    "username": "sdjhanjd",
    "submission": "auto optimize_cpp_stdio = []()\n{\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n    std::cout.tie(nullptr);\n    return 0;\n}();\nstruct UF\n{\n    vector<int> fa;\n    int count;\n    UF(int n) : fa(n), count(n)\n    {\n        for (int i = 0; i < n; ++i)\n            fa[i] = i;\n    }\n    void init(int n)\n    {\n        fa.resize(n);\n        count = n;\n        for (int i = 0; i < n; ++i)\n            fa[i] = i;\n    }\n    int find(int u) { return u == fa[u] ? u : fa[u] = find(fa[u]); }\n    void unite(int u, int v)\n    {\n        int up = find(u), vp = find(v);\n        if (up != vp)\n        {\n            fa[up] = vp;\n            count--;\n        }\n    }\n    bool connect(int u, int v) { \n        if(find(u) == find(v)) {\n            // cout << u << \", \" << v << endl;\n            return true;\n        }\n        return false; \n        }\n    int getCount() { return count; }\n};\nclass Solution\n{\npublic:\n    const static int maxn = 1e5 + 10;\n    const static int maxm = 1e5 + 10;\n    const static long long mod = 1e9 + 7;\n    const long long INF_LL = 0x3f3f3f3f3f3f3f3f;\n    const int INF = 0x3f3f3f3f;\n    // n up, n + 1 right, n + 2 down, n + 3 left\n    int n;\n    void checkCircleRect(int index, int x, int y, int r, int X, int Y, UF &uf)\n    {\n        if (x - r <= 0)\n            uf.unite(index, n + 3);\n        if (y - r <= 0)\n            uf.unite(index, n + 2);\n        if (x + r >= X)\n            uf.unite(index, n + 1);\n        if (y + r >= Y)\n            uf.unite(index, n);\n    }\n    double dis(long long x1, long long y1, long long x2, long long y2)\n    {\n        return sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>> &circles)\n    {\n        n = circles.size();\n        UF uf(n + 4);\n        for (int i = 0; i < n; ++i)\n        {\n            checkCircleRect(i, circles[i][0], circles[i][1], circles[i][2], X, Y, uf);\n            for (int j = i + 1; j < n; ++j)\n            {\n                double dist = dis(circles[i][0], circles[i][1], circles[j][0], circles[j][1]);\n                if (dist <= 1ll * circles[i][2] + 1ll * circles[j][2])\n                {\n                    uf.unite(i, j);\n                    // cout << i << \", \" << j << \", connect \" << dist << endl;\n                }\n            }\n        }\n        // n up, n + 1 right, n + 2 down, n + 3 left\n        if (uf.connect(n + 3, n + 2) || uf.connect(n + 3, n + 1) || uf.connect(n, n + 2) || uf.connect(n, n + 1))\n        {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722137108",
    "subm_id": "1335754410"
}