{
    "username": "Sudhanshuu418",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n     public int longestValidParentheses(String s) {\n        Stack<Integer> stack = new Stack<Integer>();\n        int max=0;\n        int left = -1;\n        for(int j=0;j<s.length();j++){\n            if(s.charAt(j)=='(') stack.push(j);            \n            else {\n                if (stack.isEmpty()) left=j;\n                else{\n                    stack.pop();\n                    if(stack.isEmpty()) max=Math.max(max,j-left);\n                    else max=Math.max(max,j-stack.peek());\n                }\n            }\n        }\n        return max;\n    }\n\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the cuts in descending order\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n\n        int hIndex = 0, vIndex = 0;\n        long totalCost = 0;\n        int hPieces = 1, vPieces = 1;\n\n        // Traverse through both arrays\n        while (hIndex < hCuts.length && vIndex < vCuts.length) {\n            if (hCuts[hIndex] >= vCuts[vIndex]) {\n                totalCost += hCuts[hIndex] * vPieces;\n                hPieces++;\n                hIndex++;\n            } else {\n                totalCost += vCuts[vIndex] * hPieces;\n                vPieces++;\n                vIndex++;\n            }\n        }\n\n        // Add remaining cuts\n        while (hIndex < hCuts.length) {\n            totalCost += hCuts[hIndex] * vPieces;\n            hIndex++;\n        }\n\n        while (vIndex < vCuts.length) {\n            totalCost += vCuts[vIndex] * hPieces;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720925327",
    "subm_id": "1320250913"
}