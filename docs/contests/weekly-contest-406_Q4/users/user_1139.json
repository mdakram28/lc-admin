{
    "username": "Boshiang",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int,int>> pq; // first is cut, second is direction\n        for (const int& h:horizontalCut)\n        {\n            pq.push({h,0});\n        }\n        for (const int& v:verticalCut)\n        {\n            pq.push({v,1});\n        }\n        int hor = 1, ver = 1;\n        long long ans = 0;\n        while (!pq.empty())\n        {\n            auto inform = pq.top();\n            pq.pop();\n            long long cut = inform.first;\n            long long direction = inform.second;\n            if (direction == 0)\n            {\n                ans += (long long) cut * (long long) ver;\n                hor++;\n            }\n            else if (direction == 1)\n            {\n                ans += (long long) cut * (long long) hor;\n                ver++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720925783",
    "subm_id": "1320266061"
}