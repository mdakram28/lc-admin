{
    "username": "MOHIR_MBSTU",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h = 0, v = 0; // Indices for horizontal and vertical cuts\n        long long horizontalPieces = 1, verticalPieces = 1; // Initial number of pieces\n        long long totalCost = 0;\n        \n        // Process cuts in a greedy manner\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += static_cast<long long>(horizontalCut[h]) * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[v]) * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[h]) * verticalPieces;\n            horizontalPieces++;\n            h++;\n        }\n        \n        // Process remaining vertical cuts\n        while (v < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[v]) * horizontalPieces;\n            verticalPieces++;\n            v++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925128",
    "subm_id": "1320243858"
}