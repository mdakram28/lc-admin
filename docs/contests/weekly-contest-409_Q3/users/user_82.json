{
    "username": "curiosity-10",
    "submission": "#include <vector>\n#include <iostream>\n#include <list>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // Create a doubly linked list representing the cities\n        list<int> cities;\n        unordered_map<int, list<int>::iterator> nodeMap; // Map to store iterators to nodes\n\n        for (int i = 0; i < n; ++i) {\n            cities.push_back(i);\n            nodeMap[i] = prev(cities.end());\n        }\n        \n        vector<int> answer;\n        int ans = n - 1;\n        // Process each query\n        for (auto& query : queries) {\n            int u = query[0], v = query[1];\n            if (nodeMap.find(u) == nodeMap.end() || nodeMap.find(v) == nodeMap.end()) {\n                answer.push_back(ans);\n                continue;\n            }\n        \n            \n            // Find the iterator to the node with value u and v\n            auto it_u = nodeMap[u];\n            auto it_v = nodeMap[v];\n            \n            // Remove all nodes between u and v (exclusive)\n            auto it = next(it_u);\n            while (it != it_v) {\n                nodeMap.erase(*it); // Remove from map\n                it = cities.erase(it);\n                ans --;\n            }\n            \n            // Calculate the distance from 0 to n-1\n            answer.push_back(ans);\n        }\n        \n        return answer;\n    }\n};\n",
    "submit_ts": "1722739783",
    "subm_id": "552326950"
}