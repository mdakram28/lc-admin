{
    "username": "hkhzzz",
    "submission": "using ll = long long;\nclass Solution {\npublic:\n    ll jp[32];\n    ll jpsum[32];\n    unordered_map<ll, int> Map;\n    \n    int search(int fw, int bw, int st, int ju, bool backokay) {\n        if (bw > fw + 1 || fw < 0 || bw < 0) return 0;\n        if (fw > 0 && bw == 0) return 1; // forward\n        if (fw == 0 && ((bw == 0) || (bw == 1 && backokay))) return 1;\n            \n        ll hash = fw * 1000 + bw * 10 + backokay;\n        if (Map.count(hash)) return Map[hash];\n        // cout << fw << \", \" << bw << \", \" << st << \", \" << ju << \" okay? \" << backokay << endl;\n        // start with bw?\n        int ret = 0;\n        ret += search(fw-1, bw, st + jp[ju], ju + 1, true);\n        if (backokay && st >= 1) {\n            ret += search(fw, bw-1, st - 1, ju, false);\n        }\n        \n        // cout << \"get \" << ret << endl;\n        Map[hash] = ret;\n        return ret;\n    }\n    \n    int waysToReachStair(int k) {\n        // vector<ll> jp(32, 0ll);\n        // vector<ll> jpsum(32, 0ll);\n        jp[0] = 1ll;\n        jpsum[0] = 1ll;\n        int ret = 0;\n        \n        for (int i = 1; i < 32; i ++) {\n            jp[i] = jp[i-1] * 2ll;\n            jpsum[i] = jpsum[i-1] + jp[i];\n        }\n        if (k <= 1) ret += 1; // 0 forward\n        \n        for (int i = 0; i < 32; i ++) { // number of operationg 1\n            if (jpsum[i] - 2 * i - 2 > k) break; // too large\n            if (jpsum[i] + 1 < k) continue;\n            \n            int back = jpsum[i] + 1 - k;\n            // cout << \"initial \" << \"fw \" << (i+1) << \" bw \" << back << endl;\n            if (back > i + 1 + 1) continue;\n            // cout << \"fw \" << (i+1) << \" bw \" << back << endl;\n            \n            ret += search(i + 1, back, 1, 0, true);\n            \n        }\n        return ret;\n    }\n};",
    "submit_ts": "1716090655",
    "subm_id": "1261872368"
}