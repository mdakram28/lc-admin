{
    "username": "alokakc",
    "submission": "class Solution {\n    int mod = (int)(1e9 + 7);\n    int[][][] dp;\n\n    public int dfs(int i, int prevArr1, int prevArr2, int[] nums) {\n        if (i == nums.length) {\n            return 1;\n        }\n        \n        if (dp[i][prevArr1][prevArr2] != -1) {\n            return dp[i][prevArr1][prevArr2];\n        }\n        \n        int count = 0;\n        int left = 0, right = nums[i];\n        while (left <= nums[i] && right >= 0 && left + right == nums[i]) {\n            if (left >= prevArr1 && right <= prevArr2) {\n                count = (count + dfs(i + 1, left, right, nums)) % mod;\n            }\n            left++; right--;\n        }\n        \n        dp[i][prevArr1][prevArr2] = count;\n        return count;\n    }\n\n    public int countOfPairs(int[] nums) {\n        int maxVal = Arrays.stream(nums).max().getAsInt();\n        dp = new int[nums.length][maxVal + 1][maxVal + 1];\n        for (int[][] layer : dp) {\n            for (int[] row : layer) {\n                Arrays.fill(row, -1);\n            }\n        }\n        return dfs(0, 0, maxVal, nums);\n    }\n}\n",
    "submit_ts": "1723346693",
    "subm_id": "1351583141"
}