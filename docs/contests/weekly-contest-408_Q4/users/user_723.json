{
    "username": "satwika_555",
    "submission": "from collections import deque\nfrom math import sqrt\n\nclass Solution:\n    def solve(self, X, Y, c):\n        n = len(c)\n        g = [[] for _ in range(n + 4)]\n        \n        for i in range(n):\n            x, y, r = c[i]\n            if x <= r:\n                g[n].append(i)\n                g[i].append(n)\n            if X - x <= r:\n                g[n + 2].append(i)\n                g[i].append(n + 2)\n            if y <= r:\n                g[n + 1].append(i)\n                g[i].append(n + 1)\n            if Y - y <= r:\n                g[n + 3].append(i)\n                g[i].append(n + 3)\n            for j in range(i + 1, n):\n                dist = sqrt((x - c[j][0]) ** 2 + (y - c[j][1]) ** 2)\n                r_sum = r + c[j][2]\n                if r_sum >= dist:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        def bfs(g, s, t1, t2, n):\n            q = deque([s])\n            vis = [False] * (n + 4)\n            vis[s] = True\n            \n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if not vis[v]:\n                        q.append(v)\n                        vis[v] = True\n            \n            return vis[t1] or vis[t2]\n        \n        blocked = 0\n        blocked = max(blocked, bfs(g, n, n + 1, n + 2, n + 4))\n        blocked = max(blocked, bfs(g, n + 3, n + 2, n + 1, n + 4))\n        \n        return blocked == 0\n    \n    def canReachCorner(self, X, Y, c):\n        return self.solve(X, Y, c)\n",
    "submit_ts": "1722138732",
    "subm_id": "1335798248"
}