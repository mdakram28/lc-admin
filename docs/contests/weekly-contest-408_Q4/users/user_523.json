{
    "username": "me_secret",
    "submission": "\nclass Solution {\npublic:\n    bool canReachCorner(int X_Eren, int Y_Mikasa, vector<vector<int>>& chakravyuh_Luffy) {\n        int sankhya_chakravyuh = chakravyuh_Luffy.size();\n        vector<pair<pair<int, int>, int>> chakravyuh(sankhya_chakravyuh);\n        vector<vector<int>> rekhachitra(sankhya_chakravyuh + 4);\n        \n        chakravyuhTaiyaarKaro(chakravyuh_Luffy, chakravyuh, sankhya_chakravyuh);\n\n        rekhachitraBanavo(X_Eren, Y_Mikasa, chakravyuh, rekhachitra, sankhya_chakravyuh);\n\n        int avrodh_ka_parinaam = 0;\n        avrodh_ka_parinaam = max(avrodh_ka_parinaam, bfs(rekhachitra, sankhya_chakravyuh, sankhya_chakravyuh + 1, sankhya_chakravyuh + 2, sankhya_chakravyuh + 4)); // Check for bottom-left corner\n        avrodh_ka_parinaam = max(avrodh_ka_parinaam, bfs(rekhachitra, sankhya_chakravyuh + 3, sankhya_chakravyuh + 2, sankhya_chakravyuh + 1, sankhya_chakravyuh + 4)); // Check for top-right corner\n        \n        return avrodh_ka_parinaam == 0;\n    }\n\nprivate:\n    void chakravyuhTaiyaarKaro(const vector<vector<int>>& chakravyuh_Luffy, vector<pair<pair<int, int>, int>>& chakravyuh, int sankhya_chakravyuh) {\n        for (int i = 0; i < sankhya_chakravyuh; ++i) {\n            chakravyuh[i].first.first = chakravyuh_Luffy[i][0];\n            chakravyuh[i].first.second = chakravyuh_Luffy[i][1];\n            chakravyuh[i].second = chakravyuh_Luffy[i][2];\n        }\n    }\n\n    void rekhachitraBanavo(int X_Eren, int Y_Mikasa, const vector<pair<pair<int, int>, int>>& chakravyuh, vector<vector<int>>& rekhachitra, int sankhya_chakravyuh) {\n        for (int i = 0; i < sankhya_chakravyuh; ++i) {\n            simaChakravyuhKoRekhachitraMeinJodo(X_Eren, Y_Mikasa, chakravyuh, rekhachitra, i, sankhya_chakravyuh);\n            chakravyuhKeBeechKiDooriJanchKaro(chakravyuh, rekhachitra, i, sankhya_chakravyuh);\n        }\n    }\n\n    void simaChakravyuhKoRekhachitraMeinJodo(int X_Eren, int Y_Mikasa, const vector<pair<pair<int, int>, int>>& chakravyuh, vector<vector<int>>& rekhachitra, int i, int sankhya_chakravyuh) {\n        if (chakravyuh[i].first.first <= chakravyuh[i].second) {\n            rekhachitra[sankhya_chakravyuh].push_back(i);\n            rekhachitra[i].push_back(sankhya_chakravyuh);\n        }\n        if (X_Eren - chakravyuh[i].first.first <= chakravyuh[i].second) {\n            rekhachitra[sankhya_chakravyuh + 2].push_back(i);\n            rekhachitra[i].push_back(sankhya_chakravyuh + 2);\n        }\n        if (chakravyuh[i].first.second <= chakravyuh[i].second) {\n            rekhachitra[sankhya_chakravyuh + 1].push_back(i);\n            rekhachitra[i].push_back(sankhya_chakravyuh + 1);\n        }\n        if (Y_Mikasa - chakravyuh[i].first.second <= chakravyuh[i].second) {\n            rekhachitra[sankhya_chakravyuh + 3].push_back(i);\n            rekhachitra[i].push_back(sankhya_chakravyuh + 3);\n        }\n    }\n\n    void chakravyuhKeBeechKiDooriJanchKaro(const vector<pair<pair<int, int>, int>>& chakravyuh, vector<vector<int>>& rekhachitra, int i, int sankhya_chakravyuh) {\n        for (int j = i + 1; j < sankhya_chakravyuh; ++j) {\n            double doori = sqrt(pow(chakravyuh[i].first.first - chakravyuh[j].first.first, 2) +\n                                pow(chakravyuh[i].first.second - chakravyuh[j].first.second, 2));\n            int trijyaYog = chakravyuh[i].second + chakravyuh[j].second;\n            if (trijyaYog >= doori) {\n                rekhachitra[i].push_back(j);\n                rekhachitra[j].push_back(i);\n            }\n        }\n    }\n\n    int bfs(const vector<vector<int>>& rekhachitra, int shuruaat, int lakshya1, int lakshya2, int sankhya_nodes) {\n        queue<int> kram;\n        vector<int> dekhaHua(sankhya_nodes + 4, 0);\n        kram.push(shuruaat);\n        dekhaHua[shuruaat] = 1;\n\n        while (!kram.empty()) {\n            int vartamaan = kram.front();\n            kram.pop();\n            for (int agla : rekhachitra[vartamaan]) {\n                if (!dekhaHua[agla]) {\n                    kram.push(agla);\n                    dekhaHua[agla] = 1;\n                }\n            }\n        }\n        return dekhaHua[lakshya1] || dekhaHua[lakshya2];\n    }\n};\n\n",
    "submit_ts": "1722136847",
    "subm_id": "1335746713"
}