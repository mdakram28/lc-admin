{
    "username": "practise_121",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll long long\n#define ld long double\n#define fr(i,a,b) for(ll i=a;i<b;i++)\n#define frr(i,a,b) for(ll i=a;i>=b;i--)\n#define endl '\\n'\n#define sz(x) (ll)x.size()\n#define vl vector<ll>\n#define pb push_back\n#define ppb pop_back\n#define rt return\n#define pll pair<ll,ll>\n#define ff first\n#define ss second\n#define all(v) v.begin(),v.end()\n#define rall(v) v.rbegin(),v.rend()\n#define print(x) for(auto it:x) {cout<<it<<\" \";}cout<<endl;\n#define vvprint(v) for(auto it: v){ for(auto it1: it){ cout<<it1<<\" \";} cout<<endl;}\n#define M1 1000000007\n#define M2 998244353\nconst ll inf = 1e18;\n\n//---------------------------------------------------------------------------------------------------------------------------------------------------------------\n#ifndef ONLINE_JUDGE\n #define cerr cout//erropen\n #define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n #define mdebug(...) cerr <<\"[\" << #__VA_ARGS__ << \"] = [\"; _print(__VA_ARGS__);cerr<<\"]\";cerr<<endl;\n#else\n #define debug(x)\n #define mdebug(...)\n#endif\n\nvoid _print(ll t) {cerr << t;}\nvoid _print(bool t) {cerr << t;}\nvoid _print(int t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\n\ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <typename Head, typename... Tail> void _print(const Head &H, const Tail &...T) {_print(H);if (sizeof...(T))cerr << \", \";_print(T...);}\n//--------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n#define msb(n) (64 - __builtin_clzll(n))\nll pwr(ll a,ll b){ ll prd=1; while(b--){ prd*=a; } return prd; }\nll __lcm(ll a,ll b){ return ((a/__gcd(a,b))*b);}\n\nclass Solution {\npublic:\n\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        TrieNode* failure;\n        int cost;\n        vector<int> wordIndices;\n        TrieNode() : failure(nullptr), cost(INT_MAX) {}\n    };\n\n    void insert(TrieNode* root, const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back(index);\n    }\n\n    void buildFailureLinks(TrieNode* root) {\n        queue<TrieNode*> q;\n        root->failure = root;\n        for (auto& pair : root->children) {\n            pair.second->failure = root;\n            q.push(pair.second);\n        }\n        while (!q.empty()) {\n            TrieNode* current = q.front();\n            q.pop();\n            for (auto& pair : current->children) {\n                char c = pair.first;\n                TrieNode* child = pair.second;\n                TrieNode* fail = current->failure;\n                while (fail != root && fail->children.find(c) == fail->children.end()) {\n                    fail = fail->failure;\n                }\n                if (fail->children.find(c) != fail->children.end()) {\n                    child->failure = fail->children[c];\n                } else {\n                    child->failure = root;\n                }\n                q.push(child);\n            }\n        }\n    }\n\n    int minCostToFormTarget(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        int m = words.size();\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < m; ++i) {\n            insert(root, words[i], i);\n        }\n        buildFailureLinks(root);\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* node = root;\n        for (int i = 0; i < n; ++i) {\n            while (node != root && node->children.find(target[i]) == node->children.end()) {\n                node = node->failure;\n            }\n            if (node->children.find(target[i]) != node->children.end()) {\n                node = node->children[target[i]];\n            } else {\n                node = root;\n            }\n\n            TrieNode* temp = node;\n            while (temp != root) {\n                for (int index : temp->wordIndices) {\n                    int wordLength = words[index].length();\n                    if (i + 1 >= wordLength && dp[i + 1 - wordLength] != INT_MAX) {\n                        dp[i + 1] = min(dp[i + 1], dp[i + 1 - wordLength] + costs[index]);\n                    }\n                }\n                temp = temp->failure;\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        return minCostToFormTarget(target,words,costs);\n    }\n};",
    "submit_ts": "1720322701",
    "subm_id": "1312356843"
}