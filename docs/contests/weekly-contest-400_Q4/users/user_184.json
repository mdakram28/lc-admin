{
    "username": "Abeed_shaik",
    "submission": "template<class T, class F>\nstruct segment_tree{\n\tint n, size, log;\n\tvector<T> data;\n\tF TT; // monoid operation (always adjacent)\n\tT T_id; // monoid identity\n\t// O(n)\n\tsegment_tree(int n, F TT, T T_id): segment_tree(vector<T>(n, T_id), TT, T_id){}\n\t// O(n)\n\tsegment_tree(int n, T init, F TT, T T_id): segment_tree(vector<T>(n, init), TT, T_id){}\n\t// O(n)\n\tsegment_tree(const vector<T> &a, F TT, T T_id): n((int)a.size()), TT(TT), T_id(T_id){ // O(n)\n\t\tlog = __lg(max(n - 1, 1)) + 1, size = 1 << log;\n\t\tdata = vector<T>(size << 1, T_id);\n\t\tcopy(a.begin(), a.end(), data.begin() + size);\n\t\tfor(auto i = size - 1; i >= 1; -- i) refresh(i);\n\t}\n\t// O(1)\n\tvoid refresh(int i){\n\t\tdata[i] = TT(data[i << 1], data[i << 1 | 1]);\n\t}\n\t// O(log n)\n\tvoid set(int p, T x){\n\t\tassert(0 <= p && p < n);\n\t\tdata[p += size] = x;\n\t\tfor(auto i = 1; i <= log; ++ i) refresh(p >> i);\n\t}\n\t// O(log n)\n\tvoid update(int p, T x){\n\t\tassert(0 <= p && p < n);\n\t\tp += size;\n\t\tdata[p] = TT(data[p], x);\n\t\tfor(auto i = 1; i <= log; ++ i) refresh(p >> i);\n\t}\n\t// O(1)\n\tT query(int p) const{\n\t\tassert(0 <= p && p < n);\n\t\treturn data[p + size];\n\t}\n\t// O(log n)\n\tT query(int l, int r) const{\n\t\tassert(0 <= l && l <= r && r <= n);\n\t\tT res_left = T_id, res_right = T_id;\n\t\tfor(l += size, r += size; l < r; l >>= 1, r >>= 1){\n\t\t\tif(l & 1) res_left = TT(res_left, data[l ++]);\n\t\t\tif(r & 1) res_right = TT(data[-- r], res_right);\n\t\t}\n\t\treturn TT(res_left, res_right);\n\t}\n\t// O(1)\n\tT query_all() const{\n\t\treturn data[1];\n\t}\n\t// pred(sum[l, r)) is T, T, ..., T, F, F, ..., F\n\t// Returns max r with T\n\t// O(log n)\n\tint max_pref(int l, auto pred) const{\n\t\tassert(0 <= l && l <= n && pred(T_id));\n\t\tif(l == n) return n;\n\t\tl += size;\n\t\tT sm = T_id;\n\t\tdo{\n\t\t\twhile(~l & 1) l >>= 1;\n\t\t\tif(!pred(TT(sm, data[l]))){\n\t\t\t\twhile(l < size){\n\t\t\t\t\tl = l << 1;\n\t\t\t\t\tif(pred(TT(sm, data[l]))) sm = TT(sm, data[l ++]);\n\t\t\t\t}\n\t\t\t\treturn l - size;\n\t\t\t}\n\t\t\tsm = TT(sm, data[l ++]);\n\t\t}while((l & -l) != l);\n\t\treturn n;\n\t}\n\t// pred(sum[l, r)) is F, F, ..., F, T, T, ..., T\n\t// Returns min l with T\n\t// O(log n)\n\tint min_suff(int r, auto pred) const{\n\t\tassert(0 <= r && r <= n && pred(T_id));\n\t\tif(r == 0) return 0;\n\t\tr += size;\n\t\tT sm = T_id;\n\t\tdo{\n\t\t\t-- r;\n\t\t\twhile(r > 1 && r & 1) r >>= 1;\n\t\t\tif(!pred(TT(data[r], sm))){\n\t\t\t\twhile(r < size){\n\t\t\t\t\tr = r << 1 | 1;\n\t\t\t\t\tif(pred(TT(data[r], sm))) sm = TT(data[r --], sm);\n\t\t\t\t}\n\t\t\t\treturn r + 1 - size;\n\t\t\t}\n\t\t\tsm = TT(data[r], sm);\n\t\t}while((r & -r) != r);\n\t\treturn 0;\n\t}\n\ttemplate<class output_stream>\n\tfriend output_stream &operator<<(output_stream &out, const segment_tree<T, F> &seg){\n\t\tout << \"[\";\n\t\tfor(auto i = 0; i < seg.n; ++ i){\n\t\t\tout << seg.query(i);\n\t\t\tif(i != seg.n - 1) out << \", \";\n\t\t}\n\t\treturn out << ']';\n\t}\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        vector<vector<int>> pos(31);\n\n        segment_tree seg(nums, [&](int l, int r) {return (l & r);}, (1 << 30) - 1);\n        for(int i = 0; i < nums.size(); i++){\n            for(int j = 0; j < 31; j++){\n                if(nums[i] & (1 << j)) continue;\n                pos[j].push_back(i);\n            }\n        }\n\n        int ret = 1 << 30;\n        for(int i = 0; i < nums.size(); i++){\n            ret = min(ret, abs(nums[i] - k));\n            set<int> right;\n            for(int j = 0; j < 31; j++){\n                if(nums[i] & (1 << j)){\n                    int next_idx = lower_bound(pos[j].begin(), pos[j].end(), i) - pos[j].begin();\n                    if(next_idx == pos[j].size()) continue;\n                    right.insert(pos[j][next_idx]);\n                }\n            }\n            for(auto r: right){\n                ret = min(ret, abs(k - seg.query(i, r + 1)));\n            }\n        }\n\n\n        return ret;\n    }\n};",
    "submit_ts": 1717297706.0
}