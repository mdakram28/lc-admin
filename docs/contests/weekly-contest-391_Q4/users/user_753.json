{
    "username": "yakkun19",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n    \n        def helper(points):\n\n            minsum = maxsum = points[0][0] + points[0][1]\n            mindiff = maxdiff = points[0][0] - points[0][1]\n            ii = 0\n            jj = 0\n            kk = 0\n            ll = 0\n\n            for i in range(1,len(points)):\n                sum = points[i][0] + points[i][1]\n                diff = points[i][0] - points[i][1]\n                if (sum < minsum):\n                    minsum = sum\n                    ii = i\n                elif (sum > maxsum):\n                    maxsum = sum\n                    jj = i\n                if (diff < mindiff):\n                    mindiff = diff\n                    kk = i\n                elif (diff > maxdiff):\n                    maxdiff = diff\n                    ll = i\n\n            return (maxsum - minsum, jj, ii) if maxsum - minsum >= maxdiff - mindiff else (maxdiff - mindiff, kk, ll) \n\n        _, i, j = helper(points)\n        \n        res, _, _ = min(helper(points[:i] + points[i+1:]), helper(points[:j] + points[j+1:]))\n        \n        return res\n    \n    \n    "
}