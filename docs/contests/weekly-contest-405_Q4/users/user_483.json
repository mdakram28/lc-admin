{
    "username": "Ronak9910",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    Trie() : root(new TrieNode()) {}\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = cost;\n    }\n    \n    TrieNode* getRoot() const {\n        return root;\n    }\n    \nprivate:\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n//     int minCostToConstructTarget(const string& target, const vector<string>& words, const vector<int>& costs) {\n//     int n = target.size();\n//     int m = words.size();\n    \n//     // Initialize dp array with infinity\n//     vector<int> dp(n + 1, INT_MAX);\n//     dp[0] = 0;\n    \n//     // Build a Trie from the words and their costs\n//     Trie trie;\n//     for (int i = 0; i < m; ++i) {\n//         trie.insert(words[i], costs[i]);\n//     }\n    \n//     // Iterate through each position of the target string\n//     for (int i = 0; i < n; ++i) {\n//         if (dp[i] == INT_MAX) {\n//             continue;  // Skip unreachable states\n//         }\n        \n//         // Use the Trie to find matching words starting from the current position\n//         TrieNode* node = trie.getRoot();\n//         for (int j = i; j < n; ++j) {\n//             if (!node->children.count(target[j])) {\n//                 break;\n//             }\n//             node = node->children[target[j]];\n//             if (node->cost != -1) {\n//                 dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n//             }\n//         }\n//     }\n    \n//     return dp[n] == INT_MAX ? -1 : dp[n];\n// }\n\n    // long solve(string &target, unordered_map<string , int> &mp, vector<int> &costs, int ind, int n, int &len, vector<long> &dp)\n    // {\n    //     if(ind >= n)\n    //         return 0;\n    //     if(dp[ind] != -1LL)\n    //         return dp[ind];\n    //     long min_ans = INT_MAX;\n    //     string temp;\n    //     for(int i = ind; i < n && temp.size() <= len; i++)\n    //     {\n    //         temp += target[i];\n    //         if(mp.find(temp) != mp.end())\n    //             min_ans = min(min_ans, costs[mp[temp]] + solve(target, mp, costs, i + 1, n, len, dp));\n    //     }\n    //     return dp[ind] = min_ans;\n    // }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // unordered_map<string, int> mp;\n        // int m = words.size();\n        // int len = 0;\n        // for(int i = 0; i < m; i++)\n        // {\n        //     if(mp.find(words[i]) != mp.end())\n        //     {\n        //         if(costs[i] < costs[mp[words[i]]])\n        //             mp[words[i]] = i;\n        //     }\n        //     else\n        //         mp[words[i]] = i;\n        //     if(words[i].size() > len)\n        //         len = words[i].size();\n        // }\n        // int n = target.size();\n        // vector<long> dp(n, -1LL);\n        // long val = solve(target, mp, costs, 0, n, len, dp);\n        // if(val == INT_MAX)\n        //     return -1;\n        // return val;\n        int n = target.size();\n    int m = words.size();\n    unordered_map<string, int> mp1;\n    for(int i = 0; i < m; i++)\n        {\n            if(mp1.find(words[i]) != mp1.end())\n            {\n                if(costs[i] < mp1[words[i]])\n                    mp1[words[i]] = costs[i];\n            }\n            else\n                mp1[words[i]] = costs[i];\n    }\n    // Initialize dp array with infinity\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n    \n    // Build a Trie from the words and their costs\n    Trie trie;\n    for(auto it : mp1) {\n        trie.insert(it.first, it.second);\n    }\n    //     Trie trie;\n    // for (int i = 0; i < m; ++i) {\n    //     trie.insert(words[i], costs[i]);\n    // }\n    \n    // Iterate through each position of the target string\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) {\n            continue;  // Skip unreachable states\n        }\n        \n        // Use the Trie to find matching words starting from the current position\n        TrieNode* node = trie.getRoot();\n        for (int j = i; j < n; ++j) {\n            if (!node->children.count(target[j])) {\n                break;\n            }\n            node = node->children[target[j]];\n            if (node->cost != -1) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n    \n    return dp[n] == INT_MAX ? -1 : dp[n];\n                            \n    }\n};",
    "submit_ts": "1720321957",
    "subm_id": "1312336817"
}