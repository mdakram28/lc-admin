{
    "username": "VVHack",
    "submission": "class Solution {\npublic:\n  struct SegmentTree {\n    long long begin, end;\n    long long andVal = -1;\n    SegmentTree *left = nullptr, *right = nullptr;\n    SegmentTree(long long begin, long long end) : begin(begin), end(end) {}\n\n    void add(long long key, long long val) {\n      andVal = andVal & val;\n      if (end - begin == 1) return;\n      long long mid = (begin + end) / 2;\n      if (key < mid) {\n        if (!left) {\n          left = new SegmentTree(begin, mid);\n        }\n        left->add(key, val);\n      } else {\n        if (!right) {\n          right = new SegmentTree(mid, end);\n        }\n        right->add(key, val);\n      }\n    }\n\n    long long getAndInRange(long long rangeBegin, long long rangeEnd) {\n      if (begin == rangeBegin && end == rangeEnd) {\n        return andVal;\n      }\n      long long mid = (begin + end) / 2;\n      if (rangeEnd <= mid) {\n        if (!left) return 0;\n        return left->getAndInRange(rangeBegin, rangeEnd);\n      }\n      if (rangeBegin >= mid) {\n        if (!right) return 0;\n        return right->getAndInRange(rangeBegin, rangeEnd);\n      }\n      if (left && right) {\n        return left->getAndInRange(rangeBegin, mid) & right->getAndInRange(mid, rangeEnd);\n      } else if (left) {\n        return left->getAndInRange(rangeBegin, mid);\n      } else if (right) {\n        return right->getAndInRange(mid, rangeEnd);\n      }\n      return -1;\n    }\n  };\n  \n  int minimumDifference(vector<int>& nums, int k) {\n    int n = nums.size();\n    int diff = abs(nums[0] - k);\n    auto seg = new SegmentTree(0, 1 << (int)(ceil(log(n) / log(2))));\n    for (int i = 0; i < n; ++i) {\n      seg->add(i, nums[i]);\n    }\n    int first = 0, last = 0;\n    int bitwiseAnd = nums[0];\n    while (first < n) {\n      last = max(first, last);\n      bitwiseAnd = seg->getAndInRange(first, last + 1);\n      //cout << \"AND in [\" << first << \", \" << last << \"] = \" << bitwiseAnd << endl;\n      diff = min(diff, abs(bitwiseAnd - k));\n      while (bitwiseAnd >= k && last < n) {\n        bitwiseAnd &= nums[last];\n        //cout << \"AND in [\" << first << \", \" << last << \"] = \" << bitwiseAnd << endl;\n        diff = min(diff, abs(bitwiseAnd - k));\n        ++last;\n      }\n      if (bitwiseAnd < k && last > first) {\n        --last;\n      }\n      ++first;\n    }\n    //queue<pair<int, int>> q;\n    //int bitwiseAnd = -1;\n    //for (int i = n - 1; i >= 0; --i) {\n    //  diff = min(diff, abs(nums[i] - k));\n    //  if (nums[i] <= k) {\n    //    bitwiseAnd = nums[i];\n    //  } else {\n    //    bitwiseAnd &= nums[i];\n    //  }\n    //  diff = min(diff, abs(bitwiseAnd - k));\n    //}\n    return diff;\n  }\n};\n/*\n[5,13,90,92,49]\n10\n*/",
    "submit_ts": 1717299833.0
}