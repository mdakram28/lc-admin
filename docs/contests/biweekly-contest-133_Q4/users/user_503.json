{
    "username": "aryanR0212",
    "submission": "class Solution {\nprivate:\n    int mod = 1e9+7;\n    int size = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n        unordered_map<int, int> mp;\n        for (const auto& it : req) {\n            mp[it[0] + 1] = it[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(size + 1, 0));\n        dp[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= size; j++) {\n                for (int k = 0; k < i; k++) {\n                    int m = j - k;\n                    if (m >= 0) {\n                        dp[i][j]+=dp[i-1][m];\n                        dp[i][j]%=mod;\n                    }\n                }\n            }\n\n            if (mp.find(i) != mp.end()) {\n                int ans = mp[i];\n                for (int j = 0; j <= size; j++) {\n                    if (j != ans) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (auto it : dp[n]) {\n            result+=it;\n            result%=mod;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1719070573",
    "subm_id": "1296826372"
}