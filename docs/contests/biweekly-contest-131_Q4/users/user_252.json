{
    "username": "OkamiWang",
    "submission": "#define getmid int mid = (l + r) >> 1\n#define ls (o << 1)\n#define rs (o << 1 | 1)\nconst int maxn = 50000 + 5;\n\nstruct node {\n  int val;\n} t[maxn << 2];\n\nvoid pushup(int o) {\n  t[o].val = max(t[ls].val, t[rs].val);\n}\n\nvoid build(int o, int l, int r) {\n  if (l == r) {\n    t[o].val = 0;\n    return;\n  }\n  getmid;\n  build(ls, l, mid);\n  build(rs, mid + 1, r);\n  pushup(o);\n}\n\nvoid update(int o, int l, int r, int L, int R, int d) {\n  if (r < L || l > R) return;\n  if (L <= l && r <= R) {\n    t[o].val = d;\n    return;\n  }\n  getmid;\n  update(ls, l, mid, L, R, d);\n  update(rs, mid + 1, r, L, R, d);\n  pushup(o);\n}\n\nint querySegmentTree(int o, int l, int r, int L, int R) {\n  if (r < L || l > R) return 0;\n  if (L <= l && r <= R) return t[o].val;\n  getmid;\n  int ret = max(querySegmentTree(ls, l, mid, L, R), querySegmentTree(rs, mid + 1, r, L, R));\n  return ret;\n}\n\nclass Solution {\n public:\n  vector<bool> getResults(vector<vector<int>>& queries) {\n    const int n = 50000;\n    memset(t, 0, sizeof(t));\n    build(1, 1, n);\n    set<pair<int, int>> bars;\n    int farestObstacle = 0;\n    int smallestObstacle = 0x3f3f3f3f;\n    vector<bool> ans;\n    for (auto query : queries) {\n      if (query[0] == 1) {\n        int x = query[1];\n        if (x > farestObstacle) {\n          int len = x - farestObstacle;\n          bars.insert({farestObstacle, x});\n          farestObstacle = x;\n          update(1, 1, n, x, x, len);\n        } else {\n          auto it = bars.lower_bound({x, x});\n          it--;\n          auto [l, r] = *it;\n          bars.erase(it);\n          bars.insert({l, x});\n          bars.insert({x, r});\n          update(1, 1, n, r, r, r - x);\n          update(1, 1, n, x, x, x - l);\n        }\n        smallestObstacle = min(smallestObstacle, x);\n      } else {\n        int x = query[1];\n        int sz = query[2];\n        if (x - farestObstacle >= sz) {\n          ans.push_back(true);\n        } else if (x <= smallestObstacle) {\n          ans.push_back(x >= sz);\n        } else {\n          int longestBarLen = querySegmentTree(1, 1, n, 1, x);\n          if (longestBarLen < sz) {\n            auto it = bars.lower_bound({x, x});\n            it--;\n            auto [l, r] = *it;\n            if (r > x) {\n              ans.push_back(x - l >= sz);\n            } else {\n              ans.push_back(false);\n            }\n          } else {\n            ans.push_back(true);\n          }\n        }\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": 1716650908.0
}