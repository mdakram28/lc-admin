{
    "username": "Trafalgar_Law7",
    "submission": "class Solution {\n    private:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> mp;\n        vector<pair<int, int>> vp; \n    };\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { \n            root = new TrieNode();\n        }\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char &i : word) {\n                if (!node->mp.count(i))\n                    node->mp[i] = new TrieNode();\n                node = node->mp[i];\n            }\n            node->vp.push_back({index, cost});\n        }\n    };\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        int res=0;\n        #pragma unroll\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        #pragma unroll\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            #pragma unroll\n            for (int j = i; j < n; ++j) {\n                if (!node->mp.count(target[j])){\n                    break;\n                }\n                node = node->mp[target[j]];\n                #pragma unroll\n                for (auto &it : node->vp) {\n                    int len = words[it.first].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + it.second);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX)res=-1;\n        else res=dp[n];\n        return res;\n    }\n};",
    "submit_ts": "1720322702",
    "subm_id": "1312356893"
}