{
    "username": "avijain14",
    "submission": "#define ll long long\n\ntemplate<typename Node>\nstruct SparseTable {\nprivate:\n    vector<vector<Node>> table;\n\tvector<ll> logValues;\n\tint n;\n\tint maxLog;\n\tvector<ll> a;\n    void build() {\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ttable[i][0] = Node(a[i]);\n\t\t}\n\t\tfor (int i = 1; i <= maxLog; i++) {\n\t\t\tfor (int j = 0; (j + (1 << i)) <= n; j++) {\n\t\t\t\ttable[j][i].merge(table[j][i - 1], table[j + (1 << (i - 1))][i - 1]);\n\t\t\t}\n\t\t}\n\t}\n\npublic:\n\tSparseTable(int n1, vector<ll> &arr) {\n\t\tn = n1;\n\t\ta = arr;\n\t\ttable.resize(n);\n\t\tlogValues.resize(n + 1);\n\t\tmaxLog = log2(n);\n\t\tlogValues[1] = 0;\n\t\tfor (int i = 2; i <= n; i++) {\n\t\t\tlogValues[i] = logValues[i / 2] + 1;\n\t\t}\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\ttable[i].resize(maxLog + 1);\n\t\t\tfill(table[i].begin(), table[i].end(), Node());\n\t\t}\n\t\tbuild();\n\t}\n\tNode queryNormal(int left, int right) {\n\t\tif (right < left || left < 0) return Node();\n\t\t\n\t\tNode ans = Node();\n\t\tfor (int j = logValues[right - left + 1]; j >= 0; j--) {\n\t\t\tif ((1 << j) <= right - left + 1) {\n\t\t\t\tans.merge(ans, table[left][j]);\n\t\t\t\tleft += (1 << j);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n\t}\n};\nstruct Node1 {\n\tll val;\n\tNode1() {\n\t\tval = (1LL << 31) - 1;\n\t}\n\tNode1(ll v) {\n\t\tval = v;\n\t}\n\tvoid merge(Node1 &l, Node1 &r) {\n\t\tval = l.val & r.val;\n\t}\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) \n    {\n        int n = nums.size();\n\n        vector<ll> tmp;\n        for (int i : nums) tmp.push_back(i);\n        SparseTable<Node1> sptb(n, tmp);\n\n        int res = INT_MAX;\n        for (int i : nums) res = min(res, abs(i - k));\n        if (res == 0)\n            return res;\n\n        for (int i = 0; i < n; i++)\n        {\n            if (nums[i] < k) continue;\n\n            int st = i + 1, en = n - 1;\n            while (st <= en)\n            {\n                int md = (st + en) / 2;\n\n                int qry = sptb.queryNormal(i, md).val;\n\n                if (qry < k) \n                {\n                    res = min(res, abs(k - qry));\n                    en = md - 1;\n                }\n                else\n                {\n                    res = min(res, abs(k - qry));\n                    st = md + 1;\n                }\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1717300379.0
}