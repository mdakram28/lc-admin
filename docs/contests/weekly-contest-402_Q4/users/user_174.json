{
    "username": "mcy4ever",
    "submission": "class Solution {\n    private boolean isPeak(int[] nums, int k) {\n        if (k == 0 || k == nums.length - 1) {\n            return false;\n        }\n        return nums[k] > nums[k - 1] && nums[k] > nums[k + 1];\n    }\n    private void updateNum(int[] nums, int[] bit, int k, int diff) {\n        for (int i = Math.max(0, k - 1); i <= Math.min(nums.length - 1, k + 1); i++) {\n            if (isPeak(nums, i)) {\n                update(bit, i, diff);\n            }\n        }\n    }\n    private void update(int[] bit, int k, int diff) {\n        k++;\n        while (k < bit.length) {\n            bit[k] += diff;\n            k += k & -k;\n        }\n    }\n    private int getSum(int[] bit, int k) {\n        k++;\n        int ans = 0;\n        while (k > 0) {\n            ans += bit[k];\n            k -= k & -k;\n        }\n        return ans;\n    }\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int[] bit = new int[nums.length + 1];\n        for (int i = 0; i < nums.length; i++) {\n            if (isPeak(nums, i)) {\n                update(bit, i, 1);\n            }\n        }\n        List<Integer> ans = new ArrayList<>();\n        for (int[] q : queries) {\n            if (q[0] == 2) {\n                updateNum(nums, bit, q[1], -1);\n                nums[q[1]] = q[2];\n                updateNum(nums, bit, q[1], 1);\n            } else if (q[1] >= q[2] - 1) {\n                ans.add(0);\n            } else {\n                ans.add(getSum(bit, q[2] - 1) - getSum(bit, q[1]));\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1718506968",
    "subm_id": "1289636861"
}