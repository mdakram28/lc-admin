{
    "username": "user8114002",
    "submission": "struct TrieNode { \n    int cost;\n    TrieNode* children[26]; \n    TrieNode(){\n        cost = 1e9;\n        for (int i = 0; i < 26; i++) children[i] = NULL;\n    }\n};\n\nstruct Trie{ \n    TrieNode* root;\n    Trie(){\n        root = new TrieNode();\n    };\n    void insert(string word, int cost){\n        TrieNode* node = root;\n        for (char ch: word){\n            if (node->children[ch-'a'] == NULL) {\n                node->children[ch-'a'] = new TrieNode();\n            }\n            node = node->children[ch-'a'];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    int get(string word) {\n        TrieNode* node = root;\n        for (char ch: word) {\n            if (node->children[ch-'a'] == NULL){\n                return 1e9;\n            }\n            node = node->children[ch-'a'];\n        }\n        return node->cost;\n    }\n};\nclass Solution {\npublic:\n    int dp[50005];\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie = Trie();\n        int m = costs.size();\n        for (int i = 0; i < m; i++) trie.insert(words[i],costs[i]);\n        for (int i = 1; i <= n; i++) dp[i] = 1e9;\n        for (int i = 0; i < n; i++){\n            int j = i;\n            TrieNode* node = trie.root;\n            while (node->children[target[j]-'a'] != NULL){\n                node = node->children[target[j]-'a'];\n                dp[j+1] = min(dp[j+1],dp[i]+node->cost);\n                j++;\n                if (j==n)break;\n            }\n        } \n        return dp[n] == 1e9 ? -1 : dp[n];\n        \n    }\n};\n// use hashing? \n// if word[j] == s[i-len(word[j])+1:i] o(1)\n// => dp[i] = min(dp[i], dp[i-len(word[j])] + costs[j]) o(1)\n// loop overall word in words => o(n)\n\n",
    "submit_ts": "1720322017",
    "subm_id": "1312338477"
}