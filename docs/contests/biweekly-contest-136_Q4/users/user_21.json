{
    "username": "gooday-3",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = (int) edges.size() + 1;\n        vector<vector<int>> graph(n);\n        vector<int> pars(n, -1);\n        vector<int> ord;\n        ord.reserve(n);\n        \n        for (auto& e : edges) {\n            int u = e[0], v = e[1];\n            graph[u].push_back(v);\n            graph[v].push_back(u);\n        }\n        \n        int rt = 0;\n        ord.push_back(rt);\n        for (int i = 0; i < (int) ord.size(); ++i) {\n            int u = ord[i];\n            for (auto v : graph[u]) {\n                if (v == pars[u]) {\n                    continue;\n                }\n                pars[v] = u;\n                ord.push_back(v);\n            }\n        }\n        \n        vector<int> res(n, 0);\n        \n        reverse(ord.begin(), ord.end());\n        vector<int> dp(n, 0);\n        \n        for (auto u : ord) {\n            int p = pars[u];\n            \n            for (auto v : graph[u]) {\n                if (v == p) {\n                    continue;\n                }\n                \n                if (v & 1) {\n                    dp[u] = max(dp[u], dp[v] + 1);\n                } else {\n                    dp[u] = max(dp[u], dp[v] + 2);\n                }\n            }\n        }\n        \n        const int INF = 1 << 24;\n        \n        reverse(ord.begin(), ord.end());\n        vector<int> up(n, 0);\n        \n        res[rt] = dp[rt];\n        \n        for (auto u : ord) {\n            int p = pars[u];\n            \n            for (auto v : graph[u]) {\n                if (v == p) {\n                    continue;\n                }\n                \n                if (u & 1) {\n                    up[v] = up[u] + 1;\n                } else {\n                    up[v] = up[u] + 2;\n                }\n            }\n            \n            \n            int sz = (int) graph[u].size();\n            {\n                int mx = -INF;\n                for (int i = 0; i < sz; ++i) {\n                    int v = graph[u][i];\n                    if (v == p) {\n                        continue;\n                    }\n                    int ans = up[v];\n                    ans = max(ans, mx + ((u & 1) ? 1 : 2));\n                    \n                    up[v] = max(up[v], ans);\n                    \n                    res[v] = max(res[v], ans);\n                    res[v] = max(res[v], dp[v]);\n                    \n                    if (v & 1) {\n                        mx = max(mx, dp[v] + 1);\n                    } else {\n                        mx = max(mx, dp[v] + 2);\n                    }\n                }\n            }\n            \n            {\n                int mx = -INF;\n                for (int i = sz - 1; i >= 0; --i) {\n                    int v = graph[u][i];\n                    if (v == p) {\n                        continue;\n                    }\n                    int ans = up[v];\n                    ans = max(ans, mx + ((u & 1) ? 1 : 2));\n                    up[v] = max(up[v], ans);\n                    \n                    res[v] = max(res[v], ans);\n                    \n                    if (v & 1) {\n                        mx = max(mx, dp[v] + 1);\n                    } else {\n                        mx = max(mx, dp[v] + 2);\n                    }\n                }\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1722697568",
    "subm_id": "552266745"
}