{
    "username": "parag776",
    "submission": "const auto exclusive = [](const auto& a, const auto& base, const auto& merge_into, int vertex) {\n    int n = (int)a.size();\n    using Aggregate = std::decay_t<decltype(base)>;\n    std::vector<Aggregate> b(n, base);\n    for (int bit = (int)std::__lg(n); bit >= 0; --bit) {\n        for (int i = n - 1; i >= 0; --i) b[i] = b[i >> 1];\n        int sz = n - (n & !bit);\n        for (int i = 0; i < sz; ++i) {\n            int index = (i >> bit) ^ 1;\n            b[index] = merge_into(b[index], a[i], vertex, i);\n        }\n    }\n    return b;\n};\n// MergeInto : Aggregate * Value * Vertex(int) * EdgeIndex(int) -> Aggregate\n// Base : Vertex(int) -> Aggregate\n// FinalizeMerge : Aggregate * Vertex(int) * EdgeIndex(int) -> Value\nconst auto rerooter = [](const auto& g, const auto& base, const auto& merge_into, const auto& finalize_merge) {\n    int n = (int)g.size();\n    using Aggregate = std::decay_t<decltype(base(0))>;\n    using Value = std::decay_t<decltype(finalize_merge(base(0), 0, 0))>;\n    std::vector<Value> root_dp(n), dp(n);\n    std::vector<std::vector<Value>> edge_dp(n), redge_dp(n);\n    \n    std::vector<int> bfs, parent(n);\n    bfs.reserve(n);\n    bfs.push_back(0);\n    for (int i = 0; i < n; ++i) {\n        int u = bfs[i];\n        for (auto v : g[u]) {\n            if (parent[u] == v) continue;\n            parent[v] = u;\n            bfs.push_back(v);\n        }\n    }\n    \n    for (int i = n - 1; i >= 0; --i) {\n        int u = bfs[i];\n        int p_edge_index = -1;\n        Aggregate aggregate = base(u);\n        for (int edge_index = 0; edge_index < (int)g[u].size(); ++edge_index) {\n            int v = g[u][edge_index];\n            if (parent[u] == v) {\n                p_edge_index = edge_index;\n                continue;\n            }\n            aggregate = merge_into(aggregate, dp[v], u, edge_index);\n        }\n        dp[u] = finalize_merge(aggregate, u, p_edge_index);\n    }\n    \n    for (auto u : bfs) {\n        dp[parent[u]] = dp[u];\n        edge_dp[u].reserve(g[u].size());\n        for (auto v : g[u]) edge_dp[u].push_back(dp[v]);\n        auto dp_exclusive = exclusive(edge_dp[u], base(u), merge_into, u);\n        redge_dp[u].reserve(g[u].size());\n        for (int i = 0; i < (int)dp_exclusive.size(); ++i) redge_dp[u].push_back(finalize_merge(dp_exclusive[i], u, i));\n        root_dp[u] = finalize_merge(n > 1 ? merge_into(dp_exclusive[0], edge_dp[u][0], u, 0) : base(u), u, -1);\n        for (int i = 0; i < (int)g[u].size(); ++i) {\n            dp[g[u][i]] = redge_dp[u][i];\n        }\n    }\n\n    return std::make_tuple(std::move(root_dp), std::move(edge_dp), std::move(redge_dp));\n};\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n    int n = 0;\n    for(int i=0;i<edges.size();i++){\n        n = max(n, max(edges[i][0], edges[i][1]));\n    }\n    n++;\n    vector<vector<int>> tree(n);\n    for(int i=0;i<edges.size();i++){\n        tree[edges[i][0]].push_back(edges[i][1]);\n        tree[edges[i][1]].push_back(edges[i][0]);\n    }\n\n    using Aggregate = int;\n    using Value = int;\n \n    auto base = [](int vertex) -> Aggregate {\n        return 0;\n    };\n    auto merge_into = [&](Aggregate vertex_dp, Value neighbor_dp, int vertex, int edge_index) -> Aggregate {\n        // debug(vertex)\n        // debug(tree[vertex][edge_index])\n        // debug(vertex_dp)\n        // debug(neighbor_dp)\n        // debug(edge_index)\n        // debug(neighbor_dp)\n        // debug(neighbor_dp + 2-(tree[vertex][edge_index]&1))\n        return max(vertex_dp, neighbor_dp + 2-(tree[vertex][edge_index]&1));\n    };\n    auto finalize_merge = [](Aggregate vertex_dp, int vertex, int edge_index) -> Value {\n        // debug(vertex_dp)\n        return vertex_dp;\n    };\n\n    auto [reroot_result, edge_dp, redge_dp] = rerooter(tree, base, merge_into, finalize_merge);\n    return reroot_result;\n}\n};",
    "submit_ts": "1722699249",
    "subm_id": "1343205971"
}