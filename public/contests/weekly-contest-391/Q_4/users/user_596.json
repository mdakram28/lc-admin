{
    "username": "lwpyr",
    "submission": "using ll = long long;\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        map<ll, vector<int>> as;\n        map<ll, vector<int>> ms;\n        int idx = 0;\n        for(auto&p: points) {\n            as[p[0]+p[1]].push_back(idx);\n            ms[p[0]-p[1]].push_back(idx);\n            idx += 1;\n        }\n        auto asb = as.begin();\n        auto ase = --as.end();\n        auto msb = ms.begin();\n        auto mse = --ms.end();\n        ll res = ase->first - asb->first;\n        res = max(res, mse->first - msb->first);\n        if (asb->second.size() == 1) {\n            auto new_asb = next(asb);\n            auto new_ase = ase;\n            auto new_msb = msb;\n            auto new_mse = mse;\n            if (new_ase->second.size() == 1 && new_ase->second[0] == asb->second[0]) {\n                --new_ase;\n            }\n            if (new_msb->second.size() == 1 && new_msb->second[0] == asb->second[0]) {\n                ++new_msb;\n            }\n            if (new_mse->second.size() == 1 && new_mse->second[0] == asb->second[0]) {\n                --new_mse;\n            }\n            ll cur_res = new_ase->first - new_asb->first;\n            cur_res = max(cur_res, new_mse->first - new_msb->first);\n            res = min(res, cur_res);\n        }\n        if (ase->second.size() == 1) {\n            auto new_asb = asb;\n            auto new_ase = prev(ase);\n            auto new_msb = msb;\n            auto new_mse = mse;\n            if (new_asb->second.size() == 1 && new_asb->second[0] == ase->second[0]) {\n                ++new_asb;\n            }\n            if (new_msb->second.size() == 1 && new_msb->second[0] == ase->second[0]) {\n                ++new_msb;\n            }\n            if (new_mse->second.size() == 1 && new_mse->second[0] == ase->second[0]) {\n                --new_mse;\n            }\n            ll cur_res = new_ase->first - new_asb->first;\n            cur_res = max(cur_res, new_mse->first - new_msb->first);\n            res = min(res, cur_res);\n        }\n        if (msb->second.size() == 1) {\n            auto new_asb = asb;\n            auto new_ase = ase;\n            auto new_msb = next(msb);\n            auto new_mse = mse;\n            if (new_asb->second.size() == 1 && new_asb->second[0] == msb->second[0]) {\n                ++new_asb;\n            }\n            if (new_ase->second.size() == 1 && new_ase->second[0] == msb->second[0]) {\n                --new_ase;\n            }\n            if (new_mse->second.size() == 1 && new_mse->second[0] == msb->second[0]) {\n                --new_mse;\n            }\n            ll cur_res = new_ase->first - new_asb->first;\n            cur_res = max(cur_res, new_mse->first - new_msb->first);\n            res = min(res, cur_res);\n        }\n        if (mse->second.size() == 1) {\n            auto new_asb = asb;\n            auto new_ase = ase;\n            auto new_msb = msb;\n            auto new_mse = prev(mse);\n            if (new_asb->second.size() == 1 && new_asb->second[0] == mse->second[0]) {\n                ++new_asb;\n            }\n            if (new_ase->second.size() == 1 && new_ase->second[0] == mse->second[0]) {\n                --new_ase;\n            }\n            if (new_msb->second.size() == 1 && new_msb->second[0] == mse->second[0]) {\n                ++new_msb;\n            }\n            ll cur_res = new_ase->first - new_asb->first;\n            cur_res = max(cur_res, new_mse->first - new_msb->first);\n            res = min(res, cur_res);\n        }\n        return res;\n    }\n};"
}