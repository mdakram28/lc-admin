{
    "username": "haku-less",
    "submission": "class Solution {\n    fun minChanges(nums: IntArray, k: Int): Int {\n        val n = nums.size\n        val halfN = n / 2\n        val diff = HashMap<Int, Int>()\n\n        for (i in 0 until n / 2) {\n            val c = abs(nums[i] - nums[n - i - 1])\n            diff[c] = diff.getOrDefault(c, 0) + 1\n        }\n\n        var ans = n\n        diff.keys.sortedByDescending { diff[it] }.take(4).forEach { targetDiff ->\n            var changes = 0\n            for (i in 0 until halfN) {\n                val left = nums[i]\n                val right = nums[n - i - 1]\n                if (abs(left - right) != targetDiff) {\n                    if (left + targetDiff in 0..k || left - targetDiff in 0..k) {\n                        changes++\n                    } else if (right + targetDiff in 0..k || right - targetDiff in 0..k) {\n                        changes++\n                    } else {\n                        changes += 2\n                    }\n                }\n            }\n            ans = minOf(ans, changes)\n        }\n        return ans\n    }\n}",
    "submit_ts": "1721487036",
    "subm_id": "548308120"
}