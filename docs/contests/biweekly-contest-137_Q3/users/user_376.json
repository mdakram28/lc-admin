{
    "username": "Dinh Trung Tran",
    "submission": "function maximumValueSum(board: number[][]): number {\n    const ROWS = board.length;\n    const COLS = board[0].length;\n    \n    const cells: { value: number, row: number, col: number }[] = [];\n    for (let r = 0; r < ROWS; r++) {\n        for (let c = 0; c < COLS; c++) {\n            cells.push({ value: board[r][c], row: r, col: c });\n        }\n    }\n    cells.sort((a, b) => b.value - a.value); \n\n    let maxSum = -Infinity;\n    \n    for (let i = 0; i < cells.length; i++) {\n        const { row: row1, col: col1, value: val1 } = cells[i];\n        for (let j = i + 1; j < cells.length; j++) {\n            const { row: row2, col: col2, value: val2 } = cells[j];\n            if (row1 === row2 || col1 === col2) continue; \n            for (let k = j + 1; k < cells.length; k++) {\n                const { row: row3, col: col3, value: val3 } = cells[k];\n                if (row1 === row3 || col1 === col3 || row2 === row3 || col2 === col3) continue; \n                const currentSum = val1 + val2 + val3;\n                maxSum = Math.max(maxSum, currentSum);\n                break;\n            }\n        }\n    }\n    \n    return maxSum;\n}\nfunction maximumValueSum3(board: number[][]): number {\n    const ROWS = board.length;\n    const COLS = board[0].length;\n    const cols: any = new Set();\n\n    const map = {};\n    const dfs = (row) => {\n        if (cols.size == 3) return 0;\n        if (row >= ROWS) return -Infinity;\n        let key = row;\n        for (let i of cols) key += ',' + i;\n        if (map[key] != null) return map[key];\n        \n        let res = -Infinity;\n        for (let i = 0; i < COLS; i++) {\n            if (cols.has(i)) continue;\n            // contain\n            cols.add(i);\n            res = Math.max(res, board[row][i] + dfs(row + 1));\n            cols.delete(i);\n\n            // not contain\n            res = Math.max(res, dfs(row + 1));\n        }\n        map[key] = res;\n        return res;\n    }\n    return dfs(0);\n}\n\nfunction maximumValueSum2(board: number[][]): number {\n    const m = board.length;\n    const n = board[0].length;\n    \n    const maxHeap = new PriorityQueue({compare: (a, b) => b[0] - a[0]});\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            maxHeap.enqueue([board[i][j], i, j])\n        }\n    }\n    const rows = new Set();\n    const cols = new Set();\n    let sum = 0;\n    while (rows.size < m) {\n        const [max, r, c] = maxHeap.dequeue();\n        if (rows.has(r) || cols.has(c)) continue;\n        // if (max <= 0) break;\n        rows.add(r);\n        cols.add(c);\n        sum += max;\n    }\n    return sum;\n};",
    "submit_ts": "1723909478",
    "subm_id": "1359194092"
}