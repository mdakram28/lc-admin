{
    "username": "prin100603",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() {\n        cost = 1e9;\n    }\n\n    bool contains(char ch) {\n        return children.find(ch) != children.end();\n    }\n\n    TrieNode* getNext(char ch) {\n        return children[ch];\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& st, int cost) {\n        TrieNode* node = root;\n\n        for (char c : st) {\n            if(!node->contains(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->getNext(c);\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie obj;\n\n        for (int i = 0; i < words.size(); i++)\n            obj.insert(words[i], costs[i]);\n\n        vector<int> cache(n + 1, 1e9);\n        cache[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (cache[i] == 1e9)\n                continue;\n\n            TrieNode* ptr = obj.root;\n            for (int j = i; j < n; j++) {\n                if (ptr->contains(target[j])) {\n                    ptr = ptr->getNext(target[j]);\n\n                    if (ptr->cost != 1e9 && (cache[j + 1] > cache[i] + ptr->cost))\n                        cache[j + 1] = cache[i] + ptr->cost;\n                }\n                else\n                    break;\n            }\n        }\n\n        if(cache[n] == 1e9)\n            return -1;\n        \n        return cache[n];\n    }\n};",
    "submit_ts": "1720324565",
    "subm_id": "1312402630"
}