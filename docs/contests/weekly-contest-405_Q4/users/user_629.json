{
    "username": "violet_07",
    "submission": "class TrieNode:\n    def __init__(self,):\n        self.children = {}\n        self.index = None\n\nclass Trie:\n    def __init__(self, target, costs):\n        self.root = TrieNode()\n        self.target = target\n        self.dp = [float('inf')] * (len(target) + 1)\n        self.dp[0] = 0\n        self.costs = costs\n    \n    def insert(self, word, index):\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = TrieNode()\n            current = current.children[char]\n\n        if current.index == None or self.costs[current.index] > self.costs[index]:\n            current.index = index\n    \n    def search(self, start):\n        if self.dp[start] == float('inf'):\n            return\n\n        current = self.root\n\n        for i in range(start, len(self.target)):\n            char = self.target[i]\n\n            if char not in current.children:\n                return\n\n            current = current.children[char]\n\n            if current.index != None:\n                self.dp[i + 1] = min(self.dp[start] + self.costs[current.index], self.dp[i + 1])\n                \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie(target, costs)\n        n = len(target)\n\n        for i, word in enumerate(words):\n            trie.insert(word, i)\n\n        for start in range(n):\n            trie.search(start)\n        \n        if trie.dp[n] == float('inf'):\n            return -1\n        \n        return trie.dp[n]\n",
    "submit_ts": "1720321974",
    "subm_id": "1312337291"
}