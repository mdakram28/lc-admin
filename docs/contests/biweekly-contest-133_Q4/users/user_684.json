{
    "username": "harsshukla_1111",
    "submission": "class Solution {\npublic:\n    static const int MOD = 1e9+7;\n    static const int MAX_INVERSIONS = 400;\n    typedef long long ll;\n    typedef vector<int> v;\n    typedef unordered_map<int,int> ump;\n    \n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> requirementMap = convertRequirementsToMap(requirements);\n\n        vector<vector<long>> permutationCounts = calculatePermutationCounts(n, requirementMap);\n\n        long result = sumPermutationsForLengthN(permutationCounts, n);\n\n        return static_cast<int>(result);\n    }\n\nprivate:\n    unordered_map<int, int> convertRequirementsToMap(vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (const auto& requirement : requirements) {\n            reqMap[requirement[0] + 1] = requirement[1];\n        }\n        return reqMap;\n    }\n\n    vector<vector<long>> calculatePermutationCounts(int n, unordered_map<int, int>& requirementMap) {\n        vector<vector<long>> permCounts(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        int length = 1;\n        while (length <= n) {\n            int inversions = 0;\n            while (inversions <= MAX_INVERSIONS) {\n                int position = 0;\n                while (position < length) {\n                    int previousInversions = inversions - position;\n                    if (previousInversions >= 0) {\n                        permCounts[length][inversions] = \n                            (permCounts[length][inversions] + permCounts[length - 1][previousInversions]) % MOD;\n                    }\n                    position++;\n                }\n                inversions++;\n            }\n\n            if (requirementMap.find(length) != requirementMap.end()) {\n                int requiredInversions = requirementMap[length];\n                inversions = 0;\n                while (inversions <= MAX_INVERSIONS) {\n                    if (inversions != requiredInversions) {\n                        permCounts[length][inversions] = 0;\n                    }\n                    inversions++;\n                }\n            }\n            length++;\n        }\n\n        return permCounts;\n    }\n\n    long sumPermutationsForLengthN(vector<vector<long>>& permCounts, int n) {\n        long result = 0;\n        vector<string> vec = {\"harsh\",\"shukla\"};\n        for (const auto& count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        return result;\n    }\n};",
    "submit_ts": "1719070985",
    "subm_id": "1296836380"
}