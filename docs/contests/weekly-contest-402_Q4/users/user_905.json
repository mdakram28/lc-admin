{
    "username": "voidname",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\nusing ll = long long;\n\ntemplate <typename T = int>\nclass FenwickTree {\n  static int lowbit(int x) { return x & -x; }\n  int n;\n  vector<T> t;\n\n public:\n  FenwickTree(int n) : n(n), t(n + 1) {}\n  T query(int l, int r) {\n    if (l > r) return 0;\n    auto query = [&](int pos) {\n      pos++;\n      T res = 0;\n      while (pos) {\n        res += t[pos];\n        pos -= lowbit(pos);\n      }\n      return res;\n    };\n    if (l == 0) return query(r);\n    return query(r) - query(l - 1);\n  }\n  void add(int pos, T num) {\n    pos++;\n    while (pos <= n) {\n      t[pos] += num;\n      pos += lowbit(pos);\n    }\n  }\n};\n\nclass Solution {\n public:\n  vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n    auto check = [&](int idx) {\n      return idx && idx + 1 < nums.size() && nums[idx - 1] < nums[idx] && nums[idx] > nums[idx + 1];\n    };\n    FenwickTree fenwick(nums.size() + 1);\n    auto f = [&](int idx) {\n      int raw = fenwick.query(idx + 1, idx + 1);\n      int now = check(idx);\n      fenwick.add(idx + 1, now - raw);\n    };\n    for (int i = 0; i < nums.size(); i++) {\n      if (check(i)) {\n        fenwick.add(i + 1, 1);\n      }\n    }\n    vector<int> ans;\n    for (auto& q : queries) {\n      if (q[0] == 1) {\n        int l = q[1], r = q[2];\n        if (l == r) {\n          ans.push_back(0);\n        } else {\n          ans.push_back(fenwick.query(l + 1, r + 1) - fenwick.query(l + 1, l + 1) - fenwick.query(r + 1, r + 1));\n        }\n      } else {\n        int idx = q[1], val = q[2];\n        nums[idx] = val;\n        f(idx);\n        if (idx) f(idx - 1);\n        if (idx + 1 < nums.size()) f(idx + 1);\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": 1718506403.0
}