{
    "username": "null_Hawk",
    "submission": "class Solution {\n    private static final int MODULUS = 1_000_000_007;\n    private int[][][] cache;\n    private int[] sequence;\n    private int maxVal;\n    \n    public int countOfPairs(int[] nums) {\n        sequence = nums;\n        int n = nums.length;\n        maxVal = 0;\n        for (int num : nums) {\n            maxVal = Math.max(maxVal, num);\n        }\n        \n        cache = new int[n][maxVal + 1][maxVal + 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= maxVal; j++) {\n                Arrays.fill(cache[i][j], -1);\n            }\n        }\n        \n        return recursiveCount(0, 0, maxVal);\n    }\n    private int recursiveCount(int index, int ascending, int descending) {\n        if (index == sequence.length) {\n            return 1;\n        }\n        \n        if (cache[index][ascending][descending] != -1) {\n            return cache[index][ascending][descending];\n        }\n        \n        long count = 0;\n        for (int split = 0; split <= sequence[index]; split++) {\n            int ascPart = split;\n            int descPart = sequence[index] - split;\n            if (ascPart >= ascending && descPart <= descending) {\n                count += recursiveCount(index + 1, ascPart, descPart);\n                count %= MODULUS;\n            }\n        }\n        \n        cache[index][ascending][descending] = (int) count;\n        return (int) count;\n    }\n}",
    "submit_ts": "1723346776",
    "subm_id": "1351584904"
}