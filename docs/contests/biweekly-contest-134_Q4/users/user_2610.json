{
    "username": "weizhe2",
    "submission": "#include <vector>\n#include <iostream>\n\nclass SegmentTree {\npublic:\n    SegmentTree(const std::vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n        build(nums);\n    }\n\n    int rangeAnd(int left, int right) {\n        int res = -1; // All bits set\n        left += n;\n        right += n + 1;\n        while (left < right) {\n            if (left & 1) {\n                res &= tree[left++];\n            }\n            if (right & 1) {\n                res &= tree[--right];\n            }\n            left >>= 1;\n            right >>= 1;\n        }\n        return res;\n    }\n\nprivate:\n    int n;\n    std::vector<int> tree;\n\n    void build(const std::vector<int>& nums) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = nums[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[i << 1] & tree[i << 1 | 1];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(std::vector<int>& nums, int k) {\n        long long count = 0;\n        int n = nums.size();\n        SegmentTree segTree(nums);\n\n        for (int i = 0; i < n; ++i) {\n            int left = findLeftmost(nums, segTree, i, n, k);\n            if (left == -1) continue;\n            int right = findRightmost(nums, segTree, i, n, k);\n            \n            //cout<< i <<\":\"  <<left <<\":\" << right<<endl;\n            count += (right - left + 1);\n        }\n        \n        return count;\n    }\n\nprivate:\n    int findLeftmost(const std::vector<int>& nums, SegmentTree& segTree, int i, int n, int k) {\n        int low = i, high = n - 1, best = -1;\n        while (low + 1 < high) {\n            int mid = (low + high) / 2;\n            \n            if (segTree.rangeAnd(i, mid) > k) {\n                \n                low = mid;\n            } else {\n                high = mid;\n            }\n        }\n        if (segTree.rangeAnd(i, high) == k) {\n                \n                best = high;\n        }\n        if (segTree.rangeAnd(i, low) == k) {\n                \n                best = low;\n        }\n        \n        \n        \n        return best;\n    }\n\n    int findRightmost(const std::vector<int>& nums, SegmentTree& segTree, int i, int n, int k) {\n        int low = i, high = n - 1, best = -1;\n        while (low + 1 < high) {\n            int mid = (low + high) / 2;\n            \n            if (segTree.rangeAnd(i, mid) < k) {\n                \n                high = mid;\n            } else {\n                low = mid;\n            }\n        }\n        \n        if (segTree.rangeAnd(i, low) == k) {\n                \n                best = low;\n        }\n        \n        \n        \n        if (segTree.rangeAnd(i, high) == k) {\n                \n                best = high;\n        }\n        \n        \n        \n        return best;\n    }\n};\n\n\n\n",
    "submit_ts": "1720279120",
    "subm_id": "1311738276"
}