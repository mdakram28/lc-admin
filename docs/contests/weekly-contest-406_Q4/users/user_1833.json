{
    "username": "smith9807",
    "submission": "public class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        \n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        \n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n        \n        int hIndex = 0, vIndex = 0;\n        int hSegments = 1, vSegments = 1;\n        long totalCost = 0;\n        \n        \n        while (hIndex < hCuts.length && vIndex < vCuts.length) {\n            if (hCuts[hIndex] >= vCuts[vIndex]) {\n                totalCost += (long) hCuts[hIndex] * vSegments;\n                hSegments++;\n                hIndex++;\n            } else {\n                totalCost += (long) vCuts[vIndex] * hSegments;\n                vSegments++;\n                vIndex++;\n            }\n        }\n        \n        \n        while (hIndex < hCuts.length) {\n            totalCost += (long) hCuts[hIndex] * vSegments;\n            hIndex++;\n        }\n        \n        \n        while (vIndex < vCuts.length) {\n            totalCost += (long) vCuts[vIndex] * hSegments;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720926177",
    "subm_id": "1320278245"
}