{
    "username": "OmAmar",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        from collections import deque,defaultdict\n        def bfs(start,graph):\n            dist = [-1 for i in range(len(graph))]\n            visited = [False for i in range(len(graph))]\n            dist[start] = 0\n            visited[start] = True\n            q = deque([start])\n            st = start\n            maxi = 0\n            while q:\n                node = q.popleft()\n                for i in graph[node]:\n                    if not visited[i] and dist[i]==-1:\n                        visited[i] = True\n                        dist[i]=dist[node]+1\n                        q.append(i)\n                        if dist[i]>maxi:\n                            maxi = dist[i]\n                            st = i \n            return dist,st\n        fans = 1\n        fans1 = 0\n        if edges1:\n            graph = defaultdict(list)\n            for i in edges1:\n                graph[i[0]].append(i[1])\n                graph[i[1]].append(i[0])\n            k,t = bfs(0,graph)\n            dist1,k1 = bfs(t,graph)\n            dist2,k= bfs(k1,graph)\n            ans = float('inf')\n            for i in range(len(dist1)):\n                ans = min(ans,max(dist1[i],dist2[i]))\n                fans1 = max(fans1,dist1[i],dist2[i])\n            fans += ans\n        if edges2:\n            graph = defaultdict(list)\n            for i in edges2:\n                graph[i[0]].append(i[1])\n                graph[i[1]].append(i[0])\n            k,t = bfs(0,graph)\n            dist1,k1 = bfs(t,graph)\n            dist2,k= bfs(k1,graph)\n            ans = float('inf')\n            for i in range(len(dist1)):\n                ans = min(ans,max(dist1[i],dist2[i]))\n                fans1 = max(fans1,dist1[i],dist2[i])\n            fans += ans\n        return max(fans,fans1)",
    "submit_ts": "1719718071",
    "subm_id": "1304408031"
}