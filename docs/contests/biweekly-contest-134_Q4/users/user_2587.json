{
    "username": "BenCollins",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long res = 0;\n        \n        vector<int> bits(32, 0);\n        for (int i=0; i<32; ++i) {\n            if ((k & (1 << i)) > 0) {\n                bits[i] = 1;\n            }\n        }\n        \n        vector<int> ones(32, 0);\n\n        for (int l = 0; l < nums.size(); ++l) {\n            int n = nums[l];\n            for (int i=0; i<32; ++i) {\n                if ((n & (1 << i)) > 0) {\n                    ++ones[i];\n                } else {\n                    ones[i] = 0;\n                }\n            }\n            \n            // Check now.\n            int leftmost = 0;\n            int rightmost = l;\n            bool skip = false;\n            for (int i=0; i<32; ++i) {\n                if (bits[i] == 0) {\n                    if (ones[i] == l+1) {\n                        skip = true;\n                        break;\n                    }\n                    rightmost = min(rightmost, l-ones[i]);\n                } else {\n                    if (ones[i] == 0) {\n                        skip = true;\n                        break;\n                    }\n                    leftmost = max(leftmost, l-ones[i]+1);\n                }\n            }\n            // cout << l << \" \" << ones[0] << \" \" << ones[1] << endl;\n            // cout << l << \" \" << leftmost << \" \" << rightmost << endl;\n            if (!skip && rightmost >= leftmost)\n                res += rightmost - leftmost + 1;\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1720279490",
    "subm_id": "1311753303"
}