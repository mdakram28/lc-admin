{
    "username": "prateek24112001",
    "submission": "import java.util.*;\n\nclass Solution {\n    private int[] nums;\n    private int[] segTree;\n    private int n;\n\n    // Helper method to determine if an index is a peak\n    private boolean isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    // Build the segment tree to count peaks\n    private void buildSegTree(int si, int ss, int se) {\n        if (ss == se) {\n            segTree[si] = isPeak(ss) ? 1 : 0;\n            return;\n        }\n        int mid = (ss + se) / 2;\n        buildSegTree(2 * si + 1, ss, mid);\n        buildSegTree(2 * si + 2, mid + 1, se);\n        segTree[si] = segTree[2 * si + 1] + segTree[2 * si + 2];\n    }\n\n    // Update the segment tree\n    private void updateSegTree(int si, int ss, int se, int idx) {\n        if (ss == se) {\n            segTree[si] = isPeak(ss) ? 1 : 0;\n            return;\n        }\n        int mid = (ss + se) / 2;\n        if (idx <= mid) {\n            updateSegTree(2 * si + 1, ss, mid, idx);\n        } else {\n            updateSegTree(2 * si + 2, mid + 1, se, idx);\n        }\n        segTree[si] = segTree[2 * si + 1] + segTree[2 * si + 2];\n    }\n\n    // Query the segment tree for the count of peaks in range [qs, qe]\n    private int querySegTree(int si, int ss, int se, int qs, int qe) {\n        if (ss > qe || se < qs) return 0;\n        if (ss >= qs && se <= qe) return segTree[si];\n        int mid = (ss + se) / 2;\n        return querySegTree(2 * si + 1, ss, mid, qs, qe) + querySegTree(2 * si + 2, mid + 1, se, qs, qe);\n    }\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        this.nums = nums;\n        this.n = nums.length;\n        this.segTree = new int[4 * n];\n\n        buildSegTree(0, 0, n - 1);\n\n        List<Integer> result = new ArrayList<>();\n\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                if (li == ri || li + 1 == ri) {\n                    result.add(0);\n                } else {\n                    result.add(querySegTree(0, 0, n - 1, li + 1, ri - 1));\n                }\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                nums[index] = value;\n                for (int i = index - 1; i <= index + 1; i++) {\n                    if (i > 0 && i < n - 1) {\n                        updateSegTree(0, 0, n - 1, i);\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n}\n",
    "submit_ts": 1718507343.0
}