{
    "username": "pnarayan001",
    "submission": "class Solution {\npublic:\n    /**\n     * Performs a breadth-first search (BFS) on the graph starting from the given node.\n     * \n     * @param graph The graph represented as an adjacency list.\n     * @param start The node to start the search from.\n     * @param target1 The first target node to search for.\n     * @param target2 The second target node to search for.\n     * @param nodes The total number of nodes in the graph.\n     * \n     * @return True if either target node is reachable from the start node, false otherwise.\n     */\n    bool bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<bool> visited(nodes + 4, false);\n        q.push(start);\n        visited[start] = true;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    \n    /**\n     * Checks if it is possible to reach the corner of the rectangle from the given circles.\n     * \n     * @param X The width of the rectangle.\n     * @param Y The height of the rectangle.\n     * @param circles The list of circles, where each circle is represented as a vector of three integers: x, y, and radius.\n     * \n     * @return True if it is possible to reach the corner, false otherwise.\n     */\n    bool canReachCorner(int X, int Y, const vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<pair<pair<int, int>, int>> circleList(numCircles);\n        vector<vector<int>> graph(numCircles + 4);\n        \n        // Convert the input circles to a more convenient format\n        for (int i = 0; i < numCircles; ++i) {\n            circleList[i].first.first = circles[i][0];\n            circleList[i].first.second = circles[i][1];\n            circleList[i].second = circles[i][2];\n        }\n        \n        // Build the graph\n        for (int i = 0; i < numCircles; ++i) {\n            // Check if the circle intersects with the left edge of the rectangle\n            if (circleList[i].first.first <= circleList[i].second) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            // Check if the circle intersects with the right edge of the rectangle\n            if (X - circleList[i].first.first <= circleList[i].second) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            // Check if the circle intersects with the top edge of the rectangle\n            if (circleList[i].first.second <= circleList[i].second) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            // Check if the circle intersects with the bottom edge of the rectangle\n            if (Y - circleList[i].first.second <= circleList[i].second) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            // Check for intersections between circles\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circleList[i].first.first - circleList[j].first.first, 2) +\n                                       pow(circleList[i].first.second - circleList[j].first.second, 2));\n                int radiusSum = circleList[i].second + circleList[j].second;\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        // Perform BFS to check if the corner is reachable\n        bool isBlocked = bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) ||\n                         bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n        \n        return !isBlocked;\n    }\n};",
    "submit_ts": "1722137317",
    "subm_id": "1335760288"
}