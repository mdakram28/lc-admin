{
    "username": "\u6797\u65f6",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m,n = len(board),len(board[0])\n        col = [[-1] * 3 for _ in range(m)]\n        for i in range(m):\n            t1 = t2 = t3 = -1\n            for j in range(n):\n                v = board[i][j]\n                if t1 == -1 or v > board[i][t1]:\n                    t3 = t2\n                    t2 = t1\n                    t1 = j\n                elif t2 == -1 or v > board[i][t2]: \n                    t3 = t2\n                    t2 = j\n                elif t3 == -1 or v > board[i][t3]: \n                    t3 = j\n            col[i] = [t1,t2,t3]\n        @cache\n        def dfs(i,f):\n            total = bin(f).count('1')\n            ret = -inf\n            if total == 3:\n                return 0\n            if (3-total) > m - i:\n                return -inf\n            ret = max(ret,dfs(i+1,f))\n            for k in range(3):\n                cc = col[i][k]\n                if f&(1<<cc) == 0:\n                    ccc = f|(1<<cc)\n                \n                    ret = max(ret,board[i][cc] + dfs(i+1,ccc))\n            return ret\n        return dfs(0,0)\n            ",
    "submit_ts": "1723909076",
    "subm_id": "556334377"
}