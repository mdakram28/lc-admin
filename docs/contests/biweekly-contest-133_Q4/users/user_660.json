{
    "username": "immrhrroff",
    "submission": "class Solution {\npublic:\n    static const int mod = 1'000'000'007;\n    static const int temp = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        return f(n, requirements);\n    }\n\nprivate:\n    int f(int n, vector<vector<int>>& requirements) {\n        vector<vector<long>> dp(n + 1, vector<long>(temp + 1, 0));\n        dp[0][0] = 1;\n\n        map<int, int> mp;\n        for (const auto& req : requirements) {\n            mp[req[0] + 1] = req[1];\n        }\n\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j <= temp; ++j) {\n                for (int it = 0; it < i; ++it) {\n                    int last = j - it;\n                    if (last >= 0) {\n                        dp[i][j] = ( 0+ dp[i - 1][last]+dp[i][j]) % mod;\n                    }\n                    else{\n                        //nothing\n                    }\n                }\n            }\n\n            if (mp.find(i) != mp.end()) {\n                int need = mp[i];\n                for (int j = 0; j <= temp; ++j) {\n                    if (j != need) {\n                        dp[i][j] = 0;\n                    }\n                    else{\n                        //nothing\n                    }\n                }\n            }\n        }\n\n        long ans = 0;\n        for (long count : dp[n]) {\n            ans = (ans + count) % mod;\n        }\n\n        return static_cast<int>(ans);\n    }\n};",
    "submit_ts": 1719070926.0
}