{
    "username": "grechkay",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k in [1,3,9]: return '9' * n\n        if k == 5:\n            if n == 1: return '5'\n            else: return '5' + '9' * (n-2) + '5'\n        if k == 2:\n            if n == 1: return '8'\n            else: return '8' + '9' * (n-2) + '8'\n        if k == 4:\n            if n < 5: return '8' * n\n            else: return '88' + (n - 4) * '9' + '88'\n        if k == 8:\n            if n < 7: return '8' * n\n            else: return '888' + (n - 6) * '9' + '888'\n        if k == 6:\n            if n == 1: return '6'\n            if n == 2: return '66'\n            if n % 2 == 1:\n                return '8' + (n // 2 - 1) * '9' + '8' + (n // 2 - 1) * '9' + '8'\n            else:\n                return '8' + (n // 2 - 2) * '9' + '77' + (n//2 - 2) * '9' + '8'\n        \n        # if not that means k == 7\n        if n == 1: return \"7\"\n        if n == 2: return \"77\"\n        mod7 = {0: 1, 1: 3, 2: 2, 3: 6, 4: 4, 5: 5}\n        tmod7 = 0\n        for pos in range(n):\n            mod6 = pos % 6\n            tmod7 += 9 * mod7[mod6]\n            tmod7 %= 7\n\n        if n % 2 == 1:\n            pos = n // 2\n            mod7_1 = mod7[pos % 6]\n            digit = 9\n            while tmod7 % 7 != 0:\n                digit -= 1\n                tmod7 -= mod7_1\n            return '9' * (n // 2) + str(digit) + '9' * (n // 2)\n        else:\n            pos1 = n // 2 - 1\n            pos2 = n // 2\n            mod7_1 = mod7[pos1 % 6]\n            mod7_2 = mod7[pos2 % 6]\n            digit = 9\n            while tmod7 % 7 != 0:\n                digit -= 1\n                tmod7 -= mod7_1\n                tmod7 -= mod7_2\n            return '9' * (n // 2 - 1) + str(digit) * 2 + '9' * (n // 2 - 1)\n\n\n        \n",
    "submit_ts": "1723952337",
    "subm_id": "1359793826"
}