{
    "username": "JhaoZ",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        starting_circles = set()\n        ending_circles = set()\n        for index, c in enumerate(circles):\n            x = c[0]\n            y = c[1]\n            r = c[2]\n            # bottom and right\n            if y - r <= 0 <= y + r:\n                starting_circles.add(index)\n            elif x - r <= X <= x + r:\n                starting_circles.add(index)\n\n            # top and left\n            if x - r <= 0 <= x + r:\n                ending_circles.add(index)\n            elif y - r <= Y <= y + r:\n                ending_circles.add(index)\n        \n        # make graph\n        graph = {}\n\n        for i in range(len(circles)):\n            graph[i] = []\n\n        for i, c1 in enumerate(circles):\n            for j, c2, in enumerate(circles):\n                if i != j:\n                    if (c2[0] - c1[0]) ** 2 + (c2[1] -c1[1])**2 <= (c1[2] + c2[2])**2:\n                        graph[i].append(j)\n        \n        def bfs(start):\n            queue = deque()\n            visited = set()\n            queue.append(start)\n            visited.add(start)\n            while queue:\n                curr = queue.popleft()\n                for n in graph[curr]:\n                    if n in ending_circles:\n                        return True\n                    if n not in visited:\n                        visited.add(n)\n                        queue.append(n)\n            return False\n        \n        \n        for i in starting_circles:\n            if i in starting_circles and i in ending_circles:\n                return False\n            if bfs(i):\n                return False\n        return True\n\n        \n        \n\n            ",
    "submit_ts": "1722137723",
    "subm_id": "1335771876"
}