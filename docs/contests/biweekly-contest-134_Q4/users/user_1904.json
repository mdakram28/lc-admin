{
    "username": "vj99_",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        long count = 0;\n        \n        HashMap<Long, Long> prevResults = new HashMap<>();\n\n        for (int i = 0; i < n; ++i) {\n            HashMap<Long, Long> currResults = new HashMap<>();\n            \n            // Check if current element itself equals k\n            if (nums[i] == k) {\n                ++count;\n            }\n            \n            // Initialize current results map with current element\n            currResults.put((long) nums[i], currResults.getOrDefault((long) nums[i], 0L) + 1);\n\n            // Iterate through previous results map\n            for (long val : prevResults.keySet()) {\n                long newAndResult = val & nums[i];\n                \n                // Check if bitwise AND equals k, update count\n                if (newAndResult == k) {\n                    count += prevResults.get(val);\n                }\n                \n                // Update current results map with new AND result\n                currResults.put(newAndResult, currResults.getOrDefault(newAndResult, 0L) + prevResults.get(val));\n            }\n            \n            // Update previous results to current results for next iteration\n            prevResults = currResults;\n        }\n        \n        return count;\n    }\n}",
    "submit_ts": "1720281104",
    "subm_id": "1311813287"
}