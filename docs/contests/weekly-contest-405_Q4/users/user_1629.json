{
    "username": "rozhkov",
    "submission": "import sys\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        def backtrack(ind, cost):\n            if ind == n:\n                self.res = min(self.res, cost)\n                return\n            if ind in cached and cached[ind] <= cost:\n                return\n            else:\n                cached[ind] = cost\n                \n            cur = Trie\n            for i in range(ind, n):\n                if target[i] in cur:\n                    cur = cur[target[i]]\n                    if '#' in cur:\n                        backtrack(i+1, cost + cur['#'])\n                else:\n                    break\n\n\n        sys.setrecursionlimit(10**5)\n        SS = set()\n        for word in words:\n            for c in word:\n                SS.add(c)\n        if any(c not in SS for c in target):\n            return -1\n\n        Trie = {}\n        n = len(target)\n        D = {}\n        cached = {}\n        for i in range(len(words)):\n            D[words[i]] = min(D.get(words[i], inf), costs[i])\n        W = []\n        C = []\n        for key, val in D.items():\n            W.append(key)\n            C.append(val)\n\n        if len(W) == 1:\n            lw = len(W[0])\n            if n % lw == 0 and W[0] * (n // lw) == target:\n                return C[0] * (n // lw)\n            else:\n                return -1\n\n        for cst, word in zip(C, W):\n            cur = Trie\n            for c in word:\n                if c not in cur:\n                    cur[c] = {}\n                cur = cur[c]\n            cur[\"#\"] = cst\n\n        dp = [-1]*n\n        for cost, word in zip(C, W):\n            if word == target[:len(word)]:\n                dp[len(word)-1] = cost\n\n        for i in range(n):\n            if dp[i] != -1:\n                cur = Trie\n                for j in range(i+1, n):\n                    if target[j] in cur:\n                        cur = cur[target[j]]\n                        if '#' in cur:\n                            if dp[j] == -1 or dp[j] > dp[i] + cur['#']:\n                                dp[j] = dp[i] + cur['#']\n                    else:\n                        break\n\n        return dp[-1]\n        #self.res = inf\n        #backtrack(0, 0)\n        return self.res if self.res != inf else -1\n        ",
    "submit_ts": "1720323728",
    "subm_id": "1312382598"
}