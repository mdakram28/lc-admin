{
    "username": "fmota",
    "submission": "template<typename T = int, T mod = 1'000'000'007, typename U = long long>\nstruct umod{\n    T val;\n    umod(): val(0){}\n    umod(U x){ x %= mod; if(x < 0) x += mod; val = x;}\n    umod& operator += (umod oth){ val += oth.val; if(val >= mod) val -= mod; return *this; }\n    umod& operator -= (umod oth){ val -= oth.val; if(val < 0) val += mod; return *this; }\n    umod& operator *= (umod oth){ val = ((U)val) * oth.val % mod; return *this; }\n    umod& operator /= (umod oth){ return *this *= oth.inverse(); }\n    umod& operator ^= (U oth){ return *this = pwr(*this, oth); }\n    umod operator + (umod oth) const { return umod(*this) += oth; }\n    umod operator - (umod oth) const { return umod(*this) -= oth; }\n    umod operator * (umod oth) const { return umod(*this) *= oth; }\n    umod operator / (umod oth) const { return umod(*this) /= oth; }\n    umod operator ^ (long long oth) const { return umod(*this) ^= oth; }\n    bool operator < (umod oth) const { return val < oth.val; }\n    bool operator > (umod oth) const { return val > oth.val; }\n    bool operator <= (umod oth) const { return val <= oth.val; }\n    bool operator >= (umod oth) const { return val >= oth.val; }\n    bool operator == (umod oth) const { return val == oth.val; }\n    bool operator != (umod oth) const { return val != oth.val; }\n    umod pwr(umod a, U b) const { umod r = 1; for(; b; a *= a, b >>= 1) if(b&1) r *= a; return r; }\n    umod inverse() const {\n        U a = val, b = mod, u = 1, v = 0;\n        while(b){\n            U t = a/b;\n            a -= t * b; swap(a, b);\n            u -= t * v; swap(u, v);\n        }\n        if(u < 0)\n            u += mod;\n        return u;\n    }\n};\n\nusing U = umod<>;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n        vector<int> to(n, -1);\n        for(auto e : req){\n            to[e[0]] = e[1];\n        }\n        const int maxv = 420;\n        vector<U> invs(maxv, 0);\n        invs[0] = 1;\n        for(int i = 0; i < n; i++){\n            vector<U> ninvs(maxv, 0);\n            for(int pv = 0; pv < maxv; pv++){\n                if(!invs[pv].val) continue;\n                for(int j = 0; j <= i && pv + j < maxv; j++){\n                    ninvs[pv + j] += invs[pv];\n                }\n            }\n            if(to[i] != -1){\n                for(int j = 0; j < maxv; j++){\n                    if(j == to[i]) continue;\n                    ninvs[j] = 0;\n                }\n            }\n            invs = ninvs;\n        }\n        return invs[to[n - 1]].val;\n    }\n};",
    "submit_ts": 1719067200.0
}