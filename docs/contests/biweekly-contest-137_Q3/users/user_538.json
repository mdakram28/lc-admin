{
    "username": "crazyhamada10",
    "submission": "class Solution {\npublic:\n    \n    long long solve(int r, int c1, int c2, const vector<vector<int>>& board, vector<vector<vector<long long>>>& dp) {\n        \n        if(r == board.size()) return 0;\n        \n        if(dp[r][c1+1][c2+1] != numeric_limits<long long int>::min()) return dp[r][c1+1][c2+1];\n                \n        long long ans = numeric_limits<long long int>::min();\n            \n\n        int rem = (c1 == -1) + (c2 == -1) + 1;\n        if (board.size() - r > rem) {\n            ans = solve(r+1, c1, c2, board, dp);\n        }\n        \n        int m = board[r].size();\n        for(int j=0; j<m; j++) {\n            if(j == c1 || j == c2) continue;\n            \n            if(c1 == -1) {\n                ans = max(ans, solve(r+1, j, c2, board, dp) + (long long)board[r][j]);\n            } else if (c2 == -1) {\n                ans = max(ans, solve(r+1, c1, j, board, dp) + (long long)board[r][j]);\n            } else {\n                ans = max(ans, (long long)board[r][j]);\n            }\n        }\n        return dp[r][c1+1][c2+1] = ans;\n    }\n    \n    \n    \n    long long maximumValueSum(vector<vector<int>>& board) {\n        int r = board.size();\n        int c = board[0].size() + 1;\n        vector<vector<vector<long long>>> dp(r);\n        for(int i=0; i<r; i++) {\n            dp[i].resize(c, vector<long long>(c, numeric_limits<long long int>::min()));\n        }\n        \n        long long ans = solve(0, -1, -1, board, dp);\n        return ans;\n        \n    }\n};",
    "submit_ts": "1723908577",
    "subm_id": "1359158438"
}