{
    "username": "akshun_007",
    "submission": "struct Node{\n    Node* links[26];\n    bool flag=false;\n    int value=INT_MAX;\n    bool containsKey(char ch){\n        return links[ch-'a']!=NULL;\n    }\n    void put(char ch, Node* node){\n        links[ch-'a']=node;\n    }\n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n    void setEnd(){\n        flag=true;\n    }\n    bool isEnd(){\n        return flag;\n    }\n    void setVal(int cost){\n        value=min(value,cost);\n    }\n    int getVal(){\n        return value;\n    }\n};\nclass Trie{\npublic:\n    Node* root;\n    Trie(){\n        root=new Node();\n    }  \n    void insert(string &word, int cost){\n        Node* node=root;\n        for(auto it:word){\n            if(!node->containsKey(it)){\n                node->put(it,new Node());\n            }\n            node=node->get(it);\n        }\n        node->setVal(cost);\n        node->setEnd();\n    }\n    void helper(vector<int> &dist, int i, string &word, int n){\n        Node* node=root;\n        for(int j=i; j<n; j++){\n            if(!node->containsKey(word[j])){\n                break;\n            }\n            node=node->get(word[j]);\n            if(node->isEnd()){\n                dist[j+1]=min(dist[j+1],dist[i]+node->getVal());\n            }\n        }\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        int m=words.size();\n        vector<int> dist(n+1,INT_MAX);\n        Trie tr;\n        for(int i=0; i<m; i++){\n            tr.insert(words[i],costs[i]);\n        }\n        dist[0]=0;\n        for(int i=0; i<n; i++){\n            if(dist[i]!=INT_MAX){\n                tr.helper(dist,i,target,n);\n            }\n        }\n        if(dist[n]==INT_MAX){\n            return -1;\n        }\n        return dist[n];\n    }\n};",
    "submit_ts": "1720323640",
    "subm_id": "1312380446"
}