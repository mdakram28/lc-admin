{
    "username": "pr_pratik001",
    "submission": "\nclass TrieNode {\npublic:\n    map<char, TrieNode*> child;\n    vector<pair<int, int>> index; \n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(string &word, int word_index, int cost) {\n        TrieNode* node = root;\n        for (auto c : word) {\n            if (!node->child.count(c)) {\n                node->child[c] = new TrieNode();\n            }\n            node = node->child[c];\n        }\n        node->index.push_back({word_index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int m = words.size();\n        \n       \n        Trie trie;\n        for (int i = 0; i < m; ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n      \n        vector<int> memo(n + 1, INT_MAX);\n        memo[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (memo[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (!node->child.count(target[j])) \n                break;\n                node = node->child[target[j]];\n                for (auto &p : node->index) {\n                    int word_index = p.first;\n                    int cost = p.second;\n                    int wordlen = words[word_index].size();\n                    if (j - i + 1 == wordlen) {\n                        memo[j + 1] = min(memo[j + 1], memo[i] + cost);\n                    }\n                }\n            }\n        }\n        \n        if(memo[n]==INT_MAX) return -1;\n        else return memo[n];\n    }\n};\n\n\n",
    "submit_ts": "1720324311",
    "subm_id": "1312396462"
}