{
    "username": "AtulKeshari",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    public:\n        vector<int> segmentArray;\n        int size;\n\n        SegmentTree(const vector<int>& nums) {\n            size = nums.size();\n            segmentArray.assign(2 * size, INT_MAX);\n            for (int i = 0; i < size; ++i)\n                segmentArray[size + i] = nums[i];\n            for (int i = size - 1; i > 0; --i)\n                segmentArray[i] = segmentArray[i * 2] & segmentArray[i * 2 + 1];\n        }\n\n        int rangeQuery(int left, int right) {\n            int result = INT_MAX;\n            left += size;\n            right += size + 1;\n\n            while (left < right) {\n                if (left & 1)\n                    result &= segmentArray[left++];\n                if (right & 1)\n                    result &= segmentArray[--right];\n                left >>= 1;\n                right >>= 1;\n            }\n\n            return result;\n        }\n    };\n\n    int minimumDifference(vector<int>& nums, int target) {\n        int numSize = nums.size();\n        SegmentTree segTree(nums);\n        int minDifference = INT_MAX;\n\n        for (int i = 0; i < numSize; ++i) {\n            int left = i, right = numSize - 1;\n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                int andResult = segTree.rangeQuery(i, mid);\n                minDifference = min(abs(target - andResult), minDifference);\n                if (andResult >= target) {\n                    left = mid + 1;\n                } else {\n                    right = mid - 1;\n                }\n            }\n        }\n\n        return minDifference;\n    }\n};\n",
    "submit_ts": 1717298581.0
}