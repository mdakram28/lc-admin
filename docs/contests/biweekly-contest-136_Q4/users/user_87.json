{
    "username": "libkonstantin",
    "submission": "class Solution {\n\n    int cnt;\n    int[] head;\n    int[] next;\n    int[] to;\n\n    int[] depth;\n\n    void initGraph(int n, int m) {\n        head = new int[n];\n        Arrays.fill(head, -1);\n        next = new int[2 * m];\n        to = new int[2 * m];\n        cnt = 0;\n\n        depth = new int[n];\n    }\n\n    void add(int u, int v) {\n        to[cnt] = v;\n        next[cnt] = head[u];\n        head[u] = cnt++;\n        to[cnt] = u;\n        next[cnt] = head[v];\n        head[v] = cnt++;\n    }\n    \n    int len(int u) {\n        return 2 - (u % 2);\n    }\n\n    void dfsDepth(int u, int p) {\n        for (int i = head[u]; i != -1; i = next[i]) {\n            int v = to[i];\n            if (v == p) {\n                continue;\n            }\n            dfsDepth(v, u);\n            depth[u] = Math.max(depth[u], depth[v] + len(v));\n        }\n    }\n\n    void dfsAns(int u, int p, int pMax, int[] ans) {\n        int dMax0 = 0, dMax1 = 0;\n        for (int i = head[u]; i != -1; i = next[i]) {\n            int v = to[i];\n            if (v == p) {\n                continue;\n            }\n            if (dMax0 <= depth[v] + len(v)) {\n                dMax1 = dMax0;\n                dMax0 = depth[v] + len(v);\n            } else if (dMax1 <= depth[v] + len(v)) {\n                dMax1 = depth[v] + len(v);\n            }\n        }\n        \n        ans[u] = Math.max(pMax, dMax0);\n\n        for (int i = head[u]; i != -1; i = next[i]) {\n            int v = to[i];\n            if (v == p) {\n                continue;\n            }\n            int dMax = (depth[v] + len(v) == dMax0) ? dMax1 : dMax0;\n            dfsAns(v, u, len(u) + Math.max(pMax, dMax), ans);\n        }\n    }\n\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        initGraph(n, n - 1);\n        for (int[] edge : edges) {\n            int u = edge[0];\n            int v = edge[1];\n            add(u, v);\n        }\n\n        dfsDepth(0, -1);\n        int[] ans = new int[n];\n        dfsAns(0, -1, 0, ans);\n        \n        return ans;\n    }\n}",
    "submit_ts": "1722698467",
    "subm_id": "1343181527"
}