{
    "username": "keyyuan",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        x,y = points[0]\n        a = [x+y,x+y,x-y,x-y]\n        b = [inf,-inf,inf,-inf]\n        cnt = [[0] for _ in range(4)]\n        for i,(x,y) in enumerate(points):\n            if i == 0: continue\n            c, d = x + y, x - y\n            if c < a[0]: a[0], b[0], cnt[0] = c, a[0], [i]\n            elif c == a[0]: cnt[0].append(i)\n            elif c < b[0]: b[0] = c\n            if c > a[1]: a[1], b[1], cnt[1] = c, a[1], [i]\n            elif c == a[1]: cnt[1].append(i)\n            elif c > b[1]: b[1] = c\n            if d < a[2]: a[2], b[2], cnt[2] = d, a[2], [i]\n            elif d == a[2]: cnt[2].append(i)\n            elif d < b[2]: b[2] = d\n            if d > a[3]: a[3], b[3], cnt[3] = d, a[3], [i]\n            elif d == a[3]: cnt[3].append(i)\n            elif d > b[3]: b[3] = d\n        # print(a,b,cnt)\n        c,d = a[1] - a[0], a[3] - a[2]\n        # print(c,d)\n        res = set()\n        if c > d:\n            if len(cnt[0]) > 1 and len(cnt[1]) > 1: return c\n            if len(cnt[0]) == 1: res.add(cnt[0][0])\n            if len(cnt[1]) == 1: res.add(cnt[1][0])\n        elif d > c:\n            if len(cnt[2]) > 1 and len(cnt[3]) > 1: return d\n            if len(cnt[2]) == 1: res.add(cnt[2][0])\n            if len(cnt[3]) == 1: res.add(cnt[3][0])\n        else:\n            if (len(cnt[0]) > 1 and len(cnt[1]) > 1) or (len(cnt[2]) > 1 and len(cnt[3]) > 1): return c\n            for i in [0,1]:\n                for j in [2,3]:\n                    if len(cnt[i]) == 1 and len(cnt[j]) == 1 and cnt[i][0] == cnt[j][0]: res.add(cnt[i][0])\n        # print(res)\n        ans = max(c,d)\n        for x in res:\n            e = [-1] * 4\n            for i in range(4):\n                if x in cnt[i] and len(cnt[i]) == 1: e[i] = b[i]\n                else: e[i] = a[i]\n            score = max(e[1]-e[0],e[3]-e[2])\n            # print(x,e,score)\n            ans = min(ans, score)\n        return ans"
}