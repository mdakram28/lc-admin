{
    "username": "Abhi242",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long ans = 0;\n        unordered_map<long long, long long> prev;\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> curr; \n\n            if (nums[i] == k) {\n                ++ans;\n            }\n            curr[nums[i]] = 1;\n\n            for (auto& [v, f] : prev) {\n                long long newa = v & nums[i];\n                if (newa == k) {\n                    ans += f;\n                }\n                curr[newa] += f;\n            }\n            \n            prev = curr;\n        }\n        \n        return ans;\n\n//     int n = nums.size();\n//     long long count = 0;\n    \n//     unordered_map<int, int> andMap;\n//     andMap[0] = 1;\n    \n//     int currentAnd = ~0;\n    \n//     for (int i = 0; i < n; ++i) {\n//         currentAnd &= nums[i];\n//         cout<<currentAnd<<\" \";\n//         count += andMap[currentAnd^k];\n//         andMap[currentAnd^k]++;\n//         if (currentAnd == 0) {\n//             currentAnd = ~0;\n//             // andMap.clear();\n//             // andMap[0] = 1;\n//         }\n//     }\n//     cout<<endl;\n//     return count;\n    }\n};",
    "submit_ts": "1720281047",
    "subm_id": "1311811248"
}