{
    "username": "harshbardolia",
    "submission": "class SGTree {\npublic:\n    vector<int> seg;\n    int n;\n\n    SGTree(vector<int>& a) {\n        this->n = (int) a.size();\n        seg.resize(4 * n + 1);\n        Build(a);\n    }\n\n    int func(int left, int right) {\n        return (left & right);\n    }\n\n    void build(int ind, int low, int high, vector<int>& a) {\n        if (low == high) {\n            seg[ind] = a[low];\n            return;\n        }\n\n        int mid = low + (high - low) / 2;\n        build(2 * ind + 1, low, mid, a);\n        build(2 * ind + 2, mid + 1, high, a);\n        seg[ind] = func(seg[2 * ind + 1], seg[2 * ind + 2]);\n    }\n\n    int query(int ind, int low, int high, int l, int r) {\n        if (r < low || l > high)\n            return (1 << 30) - 1;\n\n        if (low >= l && high <= r)\n            return seg[ind];\n\n        int mid = low + (high - low) / 2;\n        int left = query(2 * ind + 1, low, mid, l, r);\n        int right = query(2 * ind + 2, mid + 1, high, l, r);\n        return func(left, right);\n    }\n\n    void Build(vector<int>& a) {\n        build(0, 0, n - 1, a);\n    }\n\n    int Query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SGTree tree(nums);\n        int n = (int) nums.size();\n        int res = INT_MAX;\n        \n        for (int i = 0; i < n; i++) {\n            int l = i;\n            int r = n - 1;\n            int pos = i;\n            \n            while (l <= r) {\n                int m = (l + r) / 2;\n                int val = tree.Query(i, m);\n                if (val >= k) {\n                    pos = m;\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n            \n            int val = tree.Query(i, pos);\n            res = min(res, abs(val - k));\n            \n            if (pos - 1 >= i) {\n                val = tree.Query(i, pos - 1);\n                res = min(res, abs(val - k));\n            }\n            \n            if (pos + 1 < n) {\n                val = tree.Query(i, pos + 1);\n                res = min(res, abs(val - k));\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1717297472",
    "subm_id": "1274743765"
}