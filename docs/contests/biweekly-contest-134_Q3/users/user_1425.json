{
    "username": "___PhoenixOp",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n         int n = colors.size();\n        int count = 0;\n        int alternatingCount = 0;\n\n        // Check initial k-1 elements\n        for (int i = 0; i < k - 1; ++i) {\n            if (colors[i] != colors[(i + 1) % n]) {\n                ++alternatingCount;\n            }\n        }\n\n        // Slide the window across the array\n        for (int i = 0; i < n; ++i) {\n            int end = (i + k - 1) % n;\n            if (alternatingCount == k - 1) {\n                ++count;\n            }\n            // Move the window one step forward\n            // Remove the effect of the old start of the window\n            if (colors[i] != colors[(i + 1) % n]) {\n                --alternatingCount;\n            }\n            // Add the effect of the new end of the window\n            if (colors[end] != colors[(end + 1) % n]) {\n                ++alternatingCount;\n            }\n        }\n\n        return count;\n    }\n};",
    "submit_ts": "1720277739",
    "subm_id": "1311677797"
}