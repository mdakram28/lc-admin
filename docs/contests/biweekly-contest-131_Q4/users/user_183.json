{
    "username": "rayvivek779",
    "submission": "#define ll long long\ntemplate<typename T>\nstruct seg_node {\n  T val, pref, suf, sum;\n  seg_node() {}\n  seg_node operator+(const seg_node & other) {\n    seg_node res;\n    res.sum = sum + other.sum;\n    res.pref = max(pref, sum + other.pref);\n    res.suf = max(other.suf, other.sum + suf);\n    res.val = max({val, other.val, suf + other.pref});\n    return res;\n  }\n  seg_node(T curr) {\n    val = pref = suf = sum = curr;\n  }\n};\ntemplate<typename T>\nclass general_seg {\n  int n;\n  vector<T> Arr;\n  vector<seg_node<T>> tree;\n  void build (int ind, int l, int r) {\n    if (l == r) {\n      tree[ind] = seg_node<T>(Arr[l]);\n      return ;\n    }\n    int mid = (l + r) >> 1;\n    build(ind << 1, l, mid);\n    build(ind << 1 | 1, mid + 1, r);\n    tree[ind] = tree[ind << 1] + tree[ind << 1 | 1];\n  }\n  void update(int ind, int l, int r, int pos, T value) {\n    if (l == r) {\n      Arr[l] = value;\n      tree[ind] = seg_node<T>(value);\n      return ;\n    }\n    int mid = (l + r) >> 1;\n    if (pos <= mid) {\n      update(ind << 1, l, mid, pos, value);\n    } else update(ind << 1 | 1, mid + 1, r, pos, value);\n    tree[ind] = tree[ind << 1] + tree[ind << 1 | 1];\n  }\n  seg_node<T> query(int ind, int l, int r, int start, int end) {\n    if (l >= start && r <= end) return tree[ind];\n    int mid = (l + r) >> 1;\n    if (end <= mid) {\n      return query(ind << 1, l, mid, start, end);\n    } else if (start > mid) {\n      return query(ind << 1 | 1, mid + 1, r, start, end);\n    }\n    return query(ind << 1, l, mid, start, end) + query(ind << 1 | 1, mid + 1, r, start, end);\n  }\npublic:\n  general_seg() {}\n  general_seg(int n, vector<T> lst) {\n    init(n, lst);\n  }\n  void init(int n, vector<T> lst) {\n    this->n = n, Arr = lst;\n    tree.resize(4 * n);\n    build(1, 0, n - 1);\n  }\n  void update(int pos, T value) {\n    update(1, 0, n - 1, pos, value);\n  }\n  seg_node<T> query(int start, int end) {\n    if (start > end) return seg_node<T>(0);\n    return query(1, 0, n - 1, start, end);\n  }\n};\nclass Solution {\npublic:\n  vector<bool> getResults(vector<vector<int>>& queries) {\n    ll max_x = 0;\n    for (auto query : queries)\n      max_x = max(max_x, (ll)query[1]);\n    \n    vector<bool> result;\n    general_seg<ll> obj(max_x + 1, vector<ll>(max_x + 1, 1));\n    for (auto query : queries) {\n      if (query[0] == 1) {\n        obj.update(query[1], INT32_MIN);\n      } else {\n        ll tmp = max(obj.query(1, query[1] - 1).val, 0ll) + 1;\n        result.push_back(tmp >= query[2]);\n      }\n    }\n    return result;\n  }\n};",
    "submit_ts": 1716649826.0
}