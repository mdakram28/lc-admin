{
    "username": "int_overflow",
    "submission": "#define bitscount 32\n#define MAX 100007\nint prefix_count[bitscount][MAX];\nvoid findPrefixCount(vector<int> &arr, int n) {\n \n    for (int i = 0; i < bitscount; i++) {\n \n        prefix_count[i][0] = ((arr[0] >> i) & 1);\n        for (int j = 1; j < n; j++) {\n            prefix_count[i][j] = ((arr[j] >> i) & 1);\n            prefix_count[i][j] += prefix_count[i][j - 1];\n        }\n    }\n}\n \nint rangeAnd(int l, int r) {\n \n    // To store the answer\n    int ans = 0;\n \n    // Loop for each bit\n    for (int i = 0; i < bitscount; i++) {\n        // To store the number of variables\n        // with ith bit set\n        int x;\n        if (l == 0)\n            x = prefix_count[i][r];\n        else\n            x = prefix_count[i][r]\n                - prefix_count[i][l - 1];\n \n        // Condition for ith bit\n        // of answer to be set\n        if (x == r - l + 1)\n            ans = (ans | (1 << i));\n    }\n \n    return ans;\n}\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        for(int i=0;i<32;++i) {\n            for(int j=0;j<=n;++j) {\n                prefix_count[i][j] = 0;\n            }\n        }\n        findPrefixCount(nums, nums.size());\n        int ans = abs(k - nums[0]);\n        for(int i=0;i<n;++i) {\n            int l = i;\n            int r = (int)nums.size() - 1;\n            while(l <= r) {\n                int mid = (l + (r-l)  / 2);\n                int and_query = rangeAnd(i, mid);\n                ans = min(ans, abs(and_query - k));\n                if(and_query <= k) {\n                    r = mid - 1;\n                }\n                else {\n                    l = mid + 1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717300028.0
}