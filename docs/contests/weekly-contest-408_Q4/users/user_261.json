{
    "username": "soupboy",
    "submission": "class Solution {\npublic:\n    bool isIntersect(long long x1, long long y1, long long r1, long long x2, long long y2, long long r2) {\n        long long dx = abs(x2-x1);\n        long long dy = abs(y2-y1);\n        double distSq = (dx * dx) + (dy * dy);\n        \n        double sumSq = (r1+r2)*(r1+r2);\n        \n        if(distSq <= sumSq) {\n            // overlapping\n            return true;\n        }\n        \n        return false;        \n    }\n    \n    \n    vector<int>parent;\n    vector<bool> touchLeft, touchRight , touchDown, touchUp;\n    \n    void init(int n) {\n        for(int i=0;i<n;i++) {\n            parent.push_back(i);\n            touchLeft.push_back(false);\n            touchRight.push_back(false);\n            touchDown.push_back(false);\n            touchUp.push_back(false);\n        }\n    }\n    \n    int find(int a) {\n        if(a == parent[a]) {\n            return a;\n        }\n        return parent[a] = find(parent[a]);\n    }\n    \n    void unite(int a, int b) {\n        a = find(a);\n        b = find(b);\n        \n        if(a==b) {\n            // do nothing;\n            return;\n        }\n        \n        // we need to combine;\n        \n        touchUp[a] = touchUp[b] || touchUp[a];\n        touchDown[a] = touchDown[b] || touchDown[a];\n        touchLeft[a] = touchLeft[b] || touchLeft[a];\n        touchRight[a] = touchRight[b] || touchRight[a];\n        \n        parent[b] = a;\n        \n    }\n    \n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        init(n);\n        \n        for(int i=0;i<n;i++) {\n            int xi = circles[i][0];\n            int yi = circles[i][1];\n            int ri = circles[i][2];\n            if(xi + ri >= X) {\n                touchRight[i] = true;\n            }\n            if(xi - ri <= 0) {\n                touchLeft[i] = true;\n            }\n            if(yi + ri >= Y) {\n                touchUp[i] = true;\n            }\n            if(yi - ri <= 0) {\n                touchDown[i] = true;\n            }\n        }\n        \n        for(int i=0;i<n;i++) {\n            long long x1 = circles[i][0];\n            long long y1 = circles[i][1];\n            long long r1 = circles[i][2];\n            for(int j=i+1;j<n;j++) {\n                long long x2 = circles[j][0];\n                long long y2 = circles[j][1];\n                long long r2 = circles[j][2];\n                \n                if(isIntersect(x1,y1,r1,x2,y2,r2)) {\n                    // cout<<\"here\\n\";\n                    unite(i,j);\n                }\n            }\n        }\n        \n        \n        for(int i=0;i<n;i++) {\n            int a = find(i);\n            // cout<<i<<\" \"<<a<<\"\\n\";            \n            if((touchUp[a] && touchRight[a]) || (touchLeft[a] && touchDown[a]) || (touchUp[a] && touchDown[a]) || (touchLeft[a] && touchRight[a])) {\n                // cout<<\"\\n\\n\";\n                return false;\n            }\n        }        \n        // cout<<\"\\n\\n\";\n        \n        return true;\n        \n        \n        \n        \n        \n    }\n};",
    "submit_ts": "1722136631",
    "subm_id": "1335740408"
}