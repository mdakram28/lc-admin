{
    "username": "rhythm_09",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<pair<int, int>> words;\n        unordered_map<char, TrieNode*> mp;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(const string& word, int ind, int cost) {\n            TrieNode* node = root;\n            for (auto it : word) {\n                if (!node->mp.count(it))\n                    node->mp[it] = new TrieNode();\n                node = node->mp[it];\n            }\n            node->words.emplace_back(ind, cost);\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words,\n                    vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n                TrieNode* node = trie.root;\n                for (int j = i; j < n; ++j) {\n                    if (!node->mp.count(target[j]))\n                        break;\n                    node = node->mp[target[j]];\n                    for (const auto& it : node->words) {\n                        int ind = it.first;\n                        int cost = it.second;\n                        int sz = words[ind].size();\n                        if (i + sz <= n) {\n                            dp[i + sz] = min(dp[i + sz], dp[i] + cost);\n                        }\n                    }\n                }\n            }\n        }\n\n        if(dp[n] == INT_MAX) return -1;\n        else return dp[n];\n    }\n};",
    "submit_ts": "1720323066",
    "subm_id": "1312366457"
}