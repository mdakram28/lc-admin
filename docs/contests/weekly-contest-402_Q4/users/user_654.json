{
    "username": "StackEnqueue2",
    "submission": "class Solution {\npublic:\n    \n    int t[8 * 100000];\nvoid build(int a[], int v, int tl, int tr)\n{\n  if (tl == tr)\n  {\n    t[v] = a[tl];\n  }\n  else\n  {\n    int tm = (tl + tr) / 2;\n    build(a, v * 2 , tl, tm);\n    build(a, v * 2 + 1, tm + 1, tr);\n    t[v] = (t[v * 2 + 1] + t[v * 2 ]);\n  }\n}\n \nint sum(int v, int tl, int tr, int l, int r)\n{\n  if (l > r)\n    return 0;\n  if (l == tl && r == tr)\n  {\n    return t[v];\n  }\n  int tm = (tl + tr) / 2;\n  return (sum(v * 2 , tl, tm, l, min(r, tm)) + sum(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r));\n}\n\n\nvoid update(int v, int tl, int tr, int pos, int new_val)\n{\n  if (tl == tr)\n  {\n    t[v] = new_val;\n  }\n  else\n  {\n    int tm = (tl + tr) / 2;\n    if (pos <= tm)\n      update(v * 2 , tl, tm, pos, new_val);\n    else\n      update(v * 2 + 1, tm + 1, tr, pos, new_val);\n    t[v] = (t[v * 2 + 1] + t[v * 2 ]);\n  }\n}\n    \n    \n    \n    \n    \n    \n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        vector<int> ans;\n        int n=a.size();\n        int fr[n];\n        fr[0] = 0;\n        for(int i=1;i<n;i++)\n        {\n            if(i==n-1)fr[i]=0;\n            else\n            {\n                fr[i] = 0;\n                if(a[i] > a[i-1]  && a[i+1] < a[i])fr[i]=1;\n            }\n        }\n        build(fr,1,0,n-1);\n        \n        // for(int i=0;i<n;i++)cout<<fr[i]<<\" \";\n        // cout<<\"\\n\";\n        // cout<<sum(1,0,n-1,1,3)<<\"\\n\";\n        \n        for(auto i:q)\n        {\n            int fir=i[0],sec=i[1],thi=i[2];\n            \n            if(fir == 1)\n            {\n                // cout<<sec<<\" \"<<thi<<\"\\n\";\n                if(sec == thi || sec == thi-1)\n                    ans.push_back(0);\n                else\n                ans.push_back(sum(1,0,n-1,sec+1,thi-1));\n            }\n            else\n            {\n                a[sec]=thi;\n                fr[sec] = 0;\n                if(sec == 0 || sec == n-1){}\n                \n                else if(a[sec] > a[sec-1] && a[sec+1] < a[sec]){\n                    fr[sec] = 1;\n                    update(1,0,n-1,sec,fr[sec]);\n                }\n                else{\n                    fr[sec] = 0;\n                    update(1,0,n-1,sec,fr[sec]);\n                }\n                if(sec-1 > 0 && a[sec-1] > a[sec-2] && a[sec] < a[sec-1])\n                {\n                    fr[sec-1] = 1;\n                    update(1,0,n-1,sec-1,fr[sec-1]);\n                }\n                else if(sec-1>=0){\n                    fr[sec-1] = 0;\n                    update(1,0,n-1,sec-1,fr[sec-1]);\n                }\n                if(sec+1 < n-1 && a[sec+1] > a[sec] && a[sec+2] < a[sec+1])\n                {\n                    fr[sec+1] = 1;\n                    update(1,0,n-1,sec+1,fr[sec+1]);\n                }\n                else if(sec+1 < n){\n                    fr[sec+1] = 0;\n                    update(1,0,n-1,sec+1,fr[sec+1]);\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718507245.0
}