{
    "username": "dipakbaghel47",
    "submission": "#define INF INT_MAX\n\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    // Constructor\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    // query function to get bitwise AND of the range\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        // bitwise AND operation result\n        return p1 & p2;\n    }\n};\n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& a, int k) {\n        \n        long long ans = 0ll;\n        \n        \n        int n = a.size();\n        \n        SegmentTree st(a);\n        \n        \n        for ( int i = 0 ; i < n; i++)\n        {\n            int low = i;\n            int high = n - 1;\n            \n            int ind1 = -1;\n            \n            while ( low <= high )\n            {\n               int mid = (low + high) / 2;\n                \n               int val = st.query(i,mid);\n                \n               if ( val == k)\n               {\n                  ind1 = mid;\n                  \n                  high = mid - 1;\n               }\n                \n               if ( val < k)\n               {\n                  high = mid - 1;\n               }\n                \n               if ( val > k)\n               {\n                  low = mid + 1;\n               }\n            }\n            \n            if ( ind1 == -1) continue;\n            \n            low = i;\n            high = n - 1;\n            \n            int ind2 = -1;\n            \n            \n             while ( low <= high )\n            {\n               int mid = (low + high) / 2;\n                \n               int val = st.query(i,mid);\n                \n               if ( val == k)\n               {\n                  ind2 = mid;\n                  \n                  low = mid + 1;\n               }\n                \n               if ( val < k)\n               {\n                  high = mid - 1;\n               }\n                \n               if ( val > k)\n               {\n                  low = mid + 1;\n               }\n            }\n            \n            \n            // cout << ind1 << \" \" << ind2 << endl;\n            \n            ans = 0ll + ans + 1ll + ind2 - ind1;\n        }\n        \n        \n        return ans;\n      \n        \n        \n        \n    }\n};",
    "submit_ts": "1720279651",
    "subm_id": "1311759754"
}