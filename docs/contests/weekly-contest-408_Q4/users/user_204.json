{
    "username": "ArunSiva",
    "submission": "class Solution {\nprivate:\n    int bfs(const vector<vector<int>>& g, int s, int t1, int t2, int n) {\n            queue<int> q;\n            vector<int> v(n + 4, 0);\n            q.push(s);\n            v[s] = 1;\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int x : g[u]) {\n                    if (!v[x]) {\n                        q.push(x);\n                        v[x] = 1;\n                    }\n                }\n            }\n            return v[t1] || v[t2];\n        }\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c2) {\n        vector<pair<pair<int, int>, int>> c(c2.size());\n        vector<vector<int>> g(c2.size() + 4);\n        int n = c2.size();\n\n        for (int i = 0; i < n; ++i) {\n            c[i].first.first = c2[i][0];\n            c[i].first.second = c2[i][1];\n            c[i].second = c2[i][2];\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (c[i].first.first <= c[i].second) {\n                g[n].push_back(i);\n                g[i].push_back(n);\n            }\n            if (X - c[i].first.first <= c[i].second) {\n                g[n + 2].push_back(i);\n                g[i].push_back(n + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                g[n + 1].push_back(i);\n                g[i].push_back(n + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) {\n                g[n + 3].push_back(i);\n                g[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double d = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                     pow(c[i].first.second - c[j].first.second, 2));\n                int rs = c[i].second + c[j].second;\n                if (rs >= d) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        int b = 0;\n        b = max(b, bfs(g, n, n + 1, n + 2, n + 4));\n        b = max(b, bfs(g, n + 3, n + 2, n + 1, n + 4));\n        return !b;\n    }\n};\n\n\n",
    "submit_ts": "1722136364",
    "subm_id": "1335732130"
}