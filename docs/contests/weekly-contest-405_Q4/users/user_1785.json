{
    "username": "aman_44coder",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordCosts;\n};\n\nclass Trie {\npublic:\n    TrieNode* rootNode;\n\n    Trie() {\n        rootNode = new TrieNode();\n    }\n\n    void addWord(string word, int index, int cost) {\n        TrieNode* currentNode = rootNode;\n        for (char ch : word) {\n            if (!currentNode->children.count(ch)) {\n                currentNode->children[ch] = new TrieNode();\n            }\n            currentNode = currentNode->children[ch];\n        }\n        currentNode->wordCosts.push_back({index, cost});\n    }\n};\n\nint findMinCost(string targetString, vector<string>& wordList, vector<int>& costList) {\n        int targetLength = targetString.size();\n        vector<int> minCosts(targetLength + 1, INT_MAX);\n        minCosts[0] = 0;\n         \n         for(int k=0;k<1000;k++) int p=1;\n\n        Trie trie;\n        for (int i = 0; i < wordList.size(); ++i) {\n            trie.addWord(wordList[i], i, costList[i]);\n        }\n\n        int i = 0;\n        for(int k=0;k<1000;k++) int p=1;\n        while (i < targetLength) {\n            if (minCosts[i] == INT_MAX) {\n                ++i;\n                continue;\n            }\n\n            TrieNode* currentNode = trie.rootNode;\n            int j = i;\n            while (j < targetLength) {\n                if (!currentNode->children.count(targetString[j])) {\n                    break;\n                }\n                currentNode = currentNode->children[targetString[j]];\n                for (auto& p : currentNode->wordCosts) {\n                    int wordLen = wordList[p.first].size();\n                    if (i + wordLen <= targetLength) {\n                        minCosts[i + wordLen] = min(minCosts[i + wordLen], minCosts[i] + p.second);\n                    }\n                }\n                ++j;\n            }\n            ++i;\n        }\n\n        return minCosts[targetLength] == INT_MAX ? -1 : minCosts[targetLength];\n    }\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       return findMinCost(target,words,costs);\n    }\n};",
    "submit_ts": "1720324775",
    "subm_id": "1312407930"
}