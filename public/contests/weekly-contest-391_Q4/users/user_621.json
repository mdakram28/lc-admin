{
    "username": "dingmingcheng1",
    "submission": "class Solution {\n    Set<Integer> x1 = new HashSet<>();\n    public int mh(int[][] points, int delete, boolean tj) {\n        int ans =0 ;\n        for (int i = 0; i < (1<<2); i++) {\n            int max = Integer.MIN_VALUE;\n//            int maxIdx;\n            int min = Integer.MAX_VALUE;\n//            int minIdx;\n            Set<Integer> maxIdx = new HashSet<>();\n            Set<Integer> minIdx = new HashSet<>();\n            for (int j = 0; j < points.length; j++) {\n                if (j == delete) continue;\n                int jl = 0;\n                for (int k = 0; k < 2; k++) {\n                    if (((1 << k) & i) > 0) {\n                        jl += points[j][k];\n                    } else {\n                        jl -= points[j][k];\n                    }\n                }\n                if (jl > max) {\n                    max = jl;\n                    maxIdx.clear();\n                    maxIdx.add(j);\n                } else if (jl == max) {\n                    maxIdx.add(j);\n                }\n\n                if (jl < min) {\n                    min = jl;\n                    minIdx.clear();\n                    minIdx.add(j);\n                } else if (jl == min) {\n                    minIdx.add(j);\n                }\n            }\n            ans = Math.max(ans, max- min);\n            if (tj) {\n                x1.addAll(maxIdx);\n                x1.addAll(minIdx);\n            }\n        }\n\n        return ans;\n    }\n    public int minimumDistance(int[][] points) {\n        Set<String> s1 = new HashSet<>();\n        mh(points, -1, true);\n        int ans =Integer.MAX_VALUE ;\n        for (Integer idx : x1) {\n            String x2 = points[idx][0] + \"_\"  +points[idx][1];\n            if (s1.contains(x2)) continue;\n            s1.add(x2);\n            int zt = mh(points, idx, false);\n            ans = Math.min(ans, zt);\n        }\n        return ans;\n    }\n\n}"
}