{
    "username": "qqwrv",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        std::unordered_map<\n            int, std::unordered_map<int, std::unordered_map<int, int>>>\n            memo;\n        std::function<void(int, int, int, int&)> dfs2 = [&](int x, int j,\n                                                     int can, int& res) {\n            if (x < 0) return;\n            if (j < -1) return;\n\n            if (x == 1) ++res;\n\n            if (can)\n                dfs2(x + 1, j, 0, res);\n            if (j >= 0)\n                dfs2(x - (1 << j), j - 1, 1, res);\n        };\n        std::function<int(int, int, int, int)> dfs = [&](int x, int j,\n                                                    int can, int s) -> int {\n            if (j < -1)\n                return 0;\n            if (x < 0)\n                return 0;\n\n            if (x == 1 && ((j == 0 && j == s) || j == -1)) {\n                int res = 0;\n                dfs2(x, j, can, res);\n                return memo[x][j][can] = res;\n            }\n\n            // if (x == 1 && j == -1 && can == 1) return 1;\n            // if (x == 1 && j == -1 && can == 0) return 1;\n            // if (x == 1 && j == -1 && can == 1) return 4;\n            // if (x == 1 && j == -1 && can == 0) return 2;\n\n            if (memo.contains(x) && memo[x].contains(j) &&\n                memo[x][j].contains(can))\n                return memo[x][j][can];\n\n            int res = 0;\n            if (can)\n                res += dfs(x + 1, j, 0, s);\n            if (j >= 0)\n                res += dfs(x - (1 << j), j - 1, 1, s);\n\n            memo[x][j][can] = res;\n            return res;\n        };\n\n        int res = 0;\n        for (int j = 0; j < 31; ++j) {\n            res += dfs(k, j, 1, j);\n            // std::cout << j << \": \" << res << std::endl;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1716089170.0
}