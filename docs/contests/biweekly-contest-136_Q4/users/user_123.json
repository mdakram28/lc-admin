{
    "username": "huiget-6",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        nei = [[] for _ in range(n)]\n        for x, y in edges:\n            nei[x].append(y)\n            nei[y].append(x)\n        a = [0] * n\n        def dfs1(x, parent=None):\n            ret = 0\n            for y in nei[x]:\n                if y != parent:\n                    a[y] = dfs1(y, x)\n                    # print(a[y], y)\n                    ret = max(ret, a[y] + 1 + int(y % 2 == 0))\n            return ret\n        dfs1(0)\n        times = [0] * n\n\n        def dfs2(x, parent=None, accum=0):\n            branches = []\n            if parent is not None:\n                branches.append(accum + 1 + (int(parent % 2 == 0)))\n            else:\n                branches.append(0)\n            for y in nei[x]:\n                if y == parent:\n                    continue\n                branches.append(a[y] + 1 + int(y % 2 == 0))\n            branches.sort(reverse=True)\n            for y in nei[x]:\n                if y == parent:\n                    continue\n                if a[y] + 1 + int(y % 2 == 0) == branches[0]:\n                    dfs2(y, x, branches[1])\n                else:\n                    dfs2(y, x, branches[0])\n            times[x] = branches[0]\n\n        dfs2(0)\n        return times",
    "submit_ts": "1722698864",
    "subm_id": "552272899"
}