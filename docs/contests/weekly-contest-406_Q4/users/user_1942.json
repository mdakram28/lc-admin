{
    "username": "AshishPatel17",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, char>> pairing ;\n        \n        \n        for (int i = 0; i < horizontalCut.size(); i++) {\n            pairing.push_back({horizontalCut[i], 'H'});\n        }\n        \n        for (int j = 0; j < verticalCut.size(); j++) {\n            pairing.push_back({verticalCut[j], 'V'});\n        }\n        \n        sort(pairing.begin(), pairing.end() , greater<pair<int,char>>());\n        int hs = 1;\n        int vs = 1;\n        long long ans = 0;\n        for (auto& parts : pairing) {\n            if (parts.second == 'H') {\n                ans += parts.first * vs;\n                hs++;\n            } else {\n                ans += parts.first * hs;\n                vs++;\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720926227",
    "subm_id": "1320279766"
}