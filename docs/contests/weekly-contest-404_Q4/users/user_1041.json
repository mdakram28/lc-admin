{
    "username": "sangyanDayal",
    "submission": "class Solution {\npublic:\n    \n    int N = 1e5+1;\n    \n    int diameter1  =-1;\n    int diameter2 = -1;\n    \n    int dfs1(int node, int parent, int dp1[], int dp2[], vector<int> adj[])\n{\n \n    // Store the first maximum and secondmax\n    int firstmax = -1;\n    int secondmax = -1;\n \n    // Traverse for all children of node\n    for (auto i = adj[node].begin(); i != adj[node].end(); ++i) {\n        if (*i == parent)\n            continue;\n \n        // Call DFS function again\n        dfs1(*i, node, dp1, dp2, adj);\n \n        // Find first max\n        if (firstmax == -1) {\n            firstmax = dp1[*i];\n        }\n        else if (dp1[*i] >= firstmax) // Secondmaximum\n        {\n            secondmax = firstmax;\n            firstmax = dp1[*i];\n        }\n        else if (dp1[*i] > secondmax) // Find secondmaximum\n        {\n            secondmax = dp1[*i];\n        }\n    }\n \n    // Base case for every node\n    dp1[node] = 1;\n    if (firstmax != -1) // Add\n        dp1[node] += firstmax;\n \n    // Find dp[2]\n    if (secondmax != -1)\n        dp2[node] = 1 + firstmax + secondmax;\n \n    diameter1 = max(diameter1, max(dp1[node], dp2[node]));\n    // Return maximum of both\n    return max(dp1[node], dp2[node]);\n}\n    \n    \n    \n     int dfs2(int node, int parent, int dp1[], int dp2[], vector<int> adj[])\n{\n \n    // Store the first maximum and secondmax\n    int firstmax = -1;\n    int secondmax = -1;\n \n    // Traverse for all children of node\n    for (auto i = adj[node].begin(); i != adj[node].end(); ++i) {\n        if (*i == parent)\n            continue;\n \n        // Call DFS function again\n        dfs2(*i, node, dp1, dp2, adj);\n \n        // Find first max\n        if (firstmax == -1) {\n            firstmax = dp1[*i];\n        }\n        else if (dp1[*i] >= firstmax) // Secondmaximum\n        {\n            secondmax = firstmax;\n            firstmax = dp1[*i];\n        }\n        else if (dp1[*i] > secondmax) // Find secondmaximum\n        {\n            secondmax = dp1[*i];\n        }\n    }\n \n    // Base case for every node\n    dp1[node] = 1;\n    if (firstmax != -1) // Add\n        dp1[node] += firstmax;\n \n    // Find dp[2]\n    if (secondmax != -1)\n        dp2[node] = 1 + firstmax + secondmax;\n \n    diameter2 = max(diameter2, max(dp1[node], dp2[node]));\n    // Return maximum of both\n    return max(dp1[node], dp2[node]);\n}\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        \n        int n = edges1.size()+1;\n        int m = edges2.size()+1;\n        \n        vector<int> adj1[n];\n        for(int i=0;i<edges1.size();i++){\n            int x = edges1[i][0];\n            int y = edges1[i][1];\n            adj1[x].push_back(y);\n            adj1[y].push_back(x);\n        }\n        \n        vector<int> adj2[m];\n        for(int i=0;i<edges2.size();i++){\n            int x = edges2[i][0];\n            int y = edges2[i][1];\n            adj2[x].push_back(y);\n            adj2[y].push_back(x);\n        }\n        \n        if(n==1 && m == 1)\n            return 1;\n        if(n==1){\n            int dp3[m + 1], dp4[m + 1];\n            memset(dp3, 0, sizeof dp3);\n            memset(dp4, 0, sizeof dp4);\n            dfs2(1, 1, dp3, dp4, adj2);\n            int d2 = diameter2;\n            return max(d2-1, d2/2+1);\n        }\n        if(m==1){\n            int dp1[n+1], dp2[n + 1];\n            memset(dp1, 0, sizeof dp1);\n            memset(dp2, 0, sizeof dp2);\n             dfs1(1, 1, dp1, dp2, adj1);\n            int d1 = diameter1;\n            return max(d1-1, d1/2+1);\n        }\n        \n        \n        \n        \n        \n        int dp1[n+1], dp2[n + 1];\n        memset(dp1, 0, sizeof dp1);\n        memset(dp2, 0, sizeof dp2);\n        \n        int dp3[m + 1], dp4[m + 1];\n        memset(dp3, 0, sizeof dp3);\n        memset(dp4, 0, sizeof dp4);\n        \n        dfs1(1, 1, dp1, dp2, adj1);\n        dfs2(1, 1, dp3, dp4, adj2);\n            \n        int d1 = diameter1,d2=diameter2;\n        //cout<<d1<<\" \"<<d2<<endl;\n        int ans = 0;\n        ans = max(d1/2 + d2/2 + 1, max(d1-1,d2-1));\n        \n       return ans;\n            \n        \n    }\n};",
    "submit_ts": 1719718608.0
}