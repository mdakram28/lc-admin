{
    "username": "allrounderankit",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adj1, adj2;\n\n    pair<int, int> bfs(const vector<vector<int>>& adj, int start) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neigh : adj[node]) {\n                if (dist[neigh] == -1) {\n                    dist[neigh] = dist[node] + 1;\n                    q.push(neigh);\n                    if (dist[neigh] > dist[farthest]) {\n                        farthest = neigh;\n                    }\n                }\n            }\n        }\n        return {farthest, dist[farthest]};\n    }\n\n    int ankit(const vector<vector<int>>& adj) {\n        auto [s, _] = bfs(adj, 0); \n        auto [e, d] = bfs(adj, s);\n        return d;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        adj1.resize(n);\n        adj2.resize(m);\n        for (const auto& e : edges1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        for (const auto& e : edges2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n\n        int d1 = ankit(adj1);\n        int d2 = ankit(adj2);\n\n        \n        return max(d1, max(d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1));\n    }\n};\n",
    "submit_ts": 1719715230.0
}