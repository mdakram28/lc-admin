{
    "username": "Mitsu_9835",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& g, int s, int val1, int val2, int size) {\n        queue<int> q;\n        vector<bool> vis(size+4,false);\n        q.push(s);\n        vis[s] = true;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for(int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return (vis[val1] || vis[val2] ? 1 : 0);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<vector<int>> grid(n + 4);\n        for (int i=0;i<n;i++) {\n            if (c[i][0] <= c[i][2]) {\n                grid[n].push_back(i);\n                grid[i].push_back(n);\n            }\n            if (X - c[i][0] <= c[i][2]) {\n                grid[n + 2].push_back(i);\n                grid[i].push_back(n + 2);\n            }\n            if (c[i][1] <= c[i][2]) {\n                grid[n + 1].push_back(i);\n                grid[i].push_back(n + 1);\n            }\n            if (Y - c[i][1] <= c[i][2]) {\n                grid[n + 3].push_back(i);\n                grid[i].push_back(n + 3);\n            }\n            for (int j = i + 1;j<n; ++j) {\n                double dist = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n                int rs = c[i][2] + c[j][2];\n                if (rs >= dist) {\n                    grid[i].push_back(j);\n                    grid[j].push_back(i);\n                }\n            }\n        }\n        int flag = 0;\n        flag = max(flag, bfs(grid,n,n+1,n+2,n+4));\n        flag = max(flag, bfs(grid,n+3,n+2,n+1,n+4)); \n        return flag == 0;\n    }\n};",
    "submit_ts": "1722139126",
    "subm_id": "1335808546"
}