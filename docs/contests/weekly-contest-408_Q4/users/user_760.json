{
    "username": "teenaupadhyay123",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int bfs(List<List<Integer>> graph, int shuru, int fst, int sst, int fuck) {\n        Queue<Integer> qq = new LinkedList<>();\n        boolean[] dekha = new boolean[fuck + 4];\n        qq.offer(shuru);\n        dekha[shuru] = true;\n\n        while (!qq.isEmpty()) {\n\n            int u = qq.poll();\n            for (int v : graph.get(u)) {\n\n                if (!dekha[v]) {\n                    qq.offer(v);\n\n                    dekha[v] = true;\n                }\n            }\n        }\n        return dekha[fst] || dekha[sst] ? 1 : 0;\n\n    }\n\n    public boolean canReachCorner(int es, int ey, int[][] golu) {\n        int[][] gol = new int[golu.length][3];\n\n        List<List<Integer>> graph = new ArrayList<>();\n\n        for (int ies = 0; ies< golu.length + 4; ies++) {\n\n            graph.add(new ArrayList<>());\n        }\n        int fuck = golu.length;\n\n        for (int ies = 0; ies < fuck; ++ies) {\n\n            gol[ies][0] = golu[ies][0];\n\n            gol[ies][1] = golu[ies][1];\n\n            gol[ies][2] = golu[ies][2];\n\n        }\n\n        for (int ies = 0; ies < fuck; ++ies) {\n\n            if (gol[ies][0] <= gol[ies][2]) {\n\n                graph.get(fuck).add(ies);\n\n                graph.get(ies).add(fuck);\n            }\n            if (es - gol[ies][0] <= gol[ies][2]) {\n\n                graph.get(fuck + 2).add(ies);\n\n                graph.get(ies).add(fuck + 2);\n\n            }\n            if (gol[ies][1] <= gol[ies][2]) {\n\n\n                graph.get(fuck + 1).add(ies);\n\n                graph.get(ies).add(fuck + 1);\n\n\n            }\n            if (ey - gol[ies][1] <= gol[ies][2]) {\n                graph.get(fuck + 3).add(ies);\n\n                graph.get(ies).add(fuck + 3);\n\n            }\n            for (int jes = ies + 1; jes< fuck; ++jes) {\n                double distance = Math.sqrt(Math.pow(gol[ies][0] - gol[jes][0], 2) +\n\n                        Math.pow(gol[ies][1] - gol[jes][1], 2));\n\n                int radiusSum = gol[ies][2] + gol[jes][2];\n\n                if (radiusSum >= distance) {\n\n                    graph.get(ies).add(jes);\n\n                    graph.get(jes).add(ies);\n                }\n            }\n        }\n        int band = 0;\n        band = Math.max(band, bfs(graph, fuck, fuck + 1, fuck + 2, fuck + 4)); \n        \n        band = Math.max(band, bfs(graph, fuck + 3, fuck + 2, fuck + 1, fuck + 4));\n        return band == 0;\n    }\n}",
    "submit_ts": "1722137940",
    "subm_id": "1335777794"
}