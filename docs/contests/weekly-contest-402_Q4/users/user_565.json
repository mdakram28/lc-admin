{
    "username": "elastic-bassiejo",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        # \u7ebf\u6bb5\u6811\u4f18\u5316\n        n = len(nums)\n        mx = n + 1\n        t = DynamicSegmentTree(mx)\n        for i in range(1, n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                t.update(1,1,mx,i, 1)\n        \n        ans = []\n        for x, y, z in queries:\n            if x == 1:\n                if y+1 > z-1:\n                    ans.append(0)\n                else:\n                    ans.append(t.query(1,1,mx,y+1,z-1))\n            else:\n                if y >= 2:\n                    if nums[y-1] > nums[y-2] and nums[y-1] > nums[y]:\n                        if nums[y-1] <= z:\n                            t.update(1,1,mx,y-1, 0)\n                    else:\n                        if nums[y-1] > nums[y-2] and nums[y-1] > z:\n                            t.update(1,1,mx,y-1, 1)\n                \n                if y + 2 < n:\n                    if nums[y+1] > nums[y+2] and nums[y+1] > nums[y]:\n                        if nums[y+1] <= z:\n                            t.update(1,1,mx,y+1, 0)\n                    else:\n                        if nums[y+1] > nums[y+2] and nums[y+1] > z:\n                            t.update(1,1,mx,y+1, 1)\n                \n                if 1 <= y < n-1:\n                    if nums[y] > nums[y+1] and nums[y] > nums[y-1]:\n                        if nums[y+1] >= z or nums[y-1] >= z:\n                            t.update(1,1,mx,y,0)\n                    else:\n                        if z > nums[y+1] and z > nums[y-1]:\n                            t.update(1,1,mx,y, 1)\n                nums[y] = z\n        return ans\n\n\nclass DynamicSegmentTree:\n    def __init__(self,n:int):\n        self.tree = [0] * (4 * n)\n    def update(self,o: int, l: int, r: int, i: int, val: int) -> None:\n        if l == r:\n            self.tree[o] = val\n            return\n        m = (l + r) // 2\n        if i <= m: self.update(o * 2, l, m, i, val)\n        else: self.update(o * 2 + 1, m + 1, r, i, val)\n        self.tree[o] = self.tree[o * 2] + self.tree[o * 2 + 1]\n    def query(self,o: int, l: int, r: int, L: int, R: int) -> int:  \n        if L <= l and r <= R: return self.tree[o]\n        res = 0\n        m = (l + r) // 2\n        if L <= m: res = self.query(o * 2, l, m, L, R)\n        if R > m: res += self.query(o * 2 + 1, m + 1, r, L, R)\n        return res\n\n\n        \n# class DynamicSegmentTree:\n#     def __init__(self, n):\n#         self.cnt = [0] * (4 * n)\n#         self.todo = [0] * (4 * n)\n\n#     # \u7ef4\u62a4\u533a\u95f4\u6700\u5927\u503c\n#     def maintain(self, o: int) -> None:\n#         self.cnt[o] = self.cnt[o * 2] + self.cnt[o * 2 + 1]\n\n#     def do(self, o: int, l: int, r: int, val: int) -> None:\n#         self.cnt[o] = self.cnt[o] + val\n#         self.todo[o] = self.todo[o] + val\n\n#     def spread(self, o: int, l: int, r: int) -> None:\n#         v = self.todo[o]\n#         if v:\n#             m = (l + r) // 2\n#             self.do(o * 2, l, m, v)\n#             self.do(o * 2 + 1, m + 1, r, v)\n#             self.todo[o] = 0\n\n#     # \u533a\u95f4 [L,R] \u5185\u7684\u6570\u90fd\u66f4\u65b0\u4e3a v   o,l,r=1,1,n\n#     def update(self, o: int, l: int, r: int, L: int, R: int, val: int) -> None:\n#         if L <= l and r <= R:\n#             self.do(o, l, r, val)\n#             return\n#         self.spread(o, l, r)\n#         m = (l + r) // 2\n#         if m >= L:\n#             self.update(o * 2, l, m, L, R, val)\n#         if m < R:\n#             self.update(o * 2 + 1, m + 1, r, L, R, val)\n#         self.maintain(o)\n\n#     def query(self, o: int, l: int, r: int, L: int, R: int) -> int:\n#         if L <= l and r <= R:\n#             return self.cnt[o]\n#         self.spread(o, l, r)\n#         m = (l + r) // 2\n#         res = 0\n#         if L <= m:\n#             res =  self.query(o * 2, l, m, L, R)\n#         if m < R:\n#             res = res + self.query(o * 2 + 1, m + 1, r, L, R)\n#         return res\n",
    "submit_ts": 1718507624.0
}