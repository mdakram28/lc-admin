{
    "username": "anusarati",
    "submission": "class Solution\n{\npublic:\n    int maximumLength(vector<int> &nums, int k)\n    {\n        // at each position, we track the length of the best good subsequence\n        // that ends with each number we've encountered so far, and the differences\n        // dp over numbers (length), indices (length), and k (maybe length)\n        unordered_map<int, map<int, int>> seqs;\n\n        // k |-> length (sorted descending) |-> num\n        unordered_map<int, multimap<int, int, greater<void>>> bests;\n\n        int best = 0;\n        for (int n : nums)\n        {\n            seqs[n][0];\n            for (auto &[diff, length] : seqs[n])\n            {\n                best = max(best, ++length);\n            }\n            // get best per diff of other sequences and add 1 to their lengths and diff to compare\n            for (auto &[diff, lengths] : bests)\n            {\n                if (diff < k)\n                {\n                    for (auto &[length, n2] : lengths)\n                    {\n                        if (n2 == n)\n                            continue;\n                        //cout << \"(\" << n << \", \" << n2 << \", \" << diff << \", \" << length + 1 << \") \";\n                        seqs[n][diff + 1] = max(seqs[n][diff + 1], length + 1);\n                        best = max(best, length + 1);\n                        break;\n                    }\n                }\n            }\n            //cout << endl;\n            // update bests\n            for (auto &[diff, length] : seqs[n])\n            {\n                bests[diff].insert(make_pair(length, n));\n            }\n#if 0\n            cout << n << ' ';\n            for (auto &[diff, length] : seqs[n])\n            {\n                cout << \"(\" << diff << \", \" << length << \") \";\n            }\n            cout << endl;\n#endif\n        }\n        return best;\n    }\n};",
    "submit_ts": "1717861250",
    "subm_id": "1281784767"
}