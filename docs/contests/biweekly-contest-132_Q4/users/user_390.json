{
    "username": "whynot4",
    "submission": "class Solution {\n    boolean debug = false;\n    /*\n        [89,89,90,88,88,88,88,90,90]\n        k = 2\n        expected = 8 (returned 7)\n    */ \n    public int maximumLength(int[] f, int k) {\n        int n = f.length;\n        var dp = new int[k+1][n];\n\n        var eq = new int[n]; // index of the last equal value\n        var seen = new HashMap<Integer, Integer>();\n        for (int i=0; i<n; i++) {\n            if (seen.containsKey(f[i])) {\n                eq[i] = seen.get(f[i]);\n            } else {\n                eq[i] = -1;\n            }\n            seen.put(f[i], i);\n        }\n        if (debug) System.out.println(\"eq: \" + Arrays.toString(eq));\n\n        dp[0][0] = 1;\n        for (int i=1; i<n; i++) {\n            int x = eq[i];\n            if (x != -1) { // extend last different value\n                dp[0][i] = 1 + dp[0][ x ];\n            } else {\n                dp[0][i] = 1; // cannot extend\n            }\n        }\n        for (int i=1; i<=k; i++) {\n            dp[i][0] = 1;\n        }\n\n        if (debug) {\n            System.out.println(\"dp: \");\n            for (int i=0; i<=k; i++) {\n                System.out.println(Arrays.toString(dp[i]));\n            }\n        }\n\n        for (int i=1; i<=k; i++) {\n            int maxInx1 = 0;\n            int maxInx2 = -1;\n            for (int j=1; j<n; j++) {\n                int e = eq[j];\n                if (e != -1) {\n                    dp[i][j] = 1 + dp[i][e];\n                }\n                if (f[maxInx1] != f[j]) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + dp[i-1][maxInx1]);\n                } else if (maxInx2 != -1) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + dp[i-1][maxInx2]);\n                }\n\n                if (dp[i-1][j] >= dp[i-1][maxInx1]) {\n                    if (f[maxInx1] == f[j]) {\n                        maxInx1 = j; \n                    } else {\n                        maxInx2 = maxInx1;\n                        maxInx1 = j;\n                    }\n                } else if (maxInx2 == -1 || dp[i-1][j] > dp[i-1][maxInx2]) {\n                    if (f[j] != f[maxInx1]) {\n                        maxInx2 = j;\n                    }\n                }\n            }\n        }\n        if (debug) {\n            System.out.println(\"dp: \");\n            for (int i=0; i<=k; i++) {\n                System.out.println(Arrays.toString(dp[i]));\n            }\n        }\n\n        int bestLen = 0;\n        for (int i=0; i<=k; i++) {\n            for (int j=0; j<n; j++) {\n                bestLen = Math.max(bestLen, dp[i][j]);\n            }\n        }\n        return bestLen;\n    }\n}",
    "submit_ts": 1717862043.0
}