{
    "username": "gupta_nihal",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, bool>> cuts;\n    \n        for (int i = 0; i < m - 1; ++i) {\n            cuts.push_back({horizontalCut[i], true});\n        }\n\n        for (int j = 0; j < n - 1; ++j) {\n            cuts.push_back({verticalCut[j], false});\n        }\n\n        sort(cuts.rbegin(), cuts.rend());\n\n        ll h = 1, v = 1;\n        ll ans = 0;\n\n        for (const auto& cut : cuts) {\n            if (cut.second) {\n                ans += 1LL * cut.first * v;\n                ++h;\n            } else { // Vertical cut\n                ans += 1LL * cut.first * h;\n                ++v;\n            }\n        }\n\n        return ans;\n\n    }\n};",
    "submit_ts": "1720925682",
    "subm_id": "1320262739"
}