{
    "username": "avishikta_here",
    "submission": "class Solution {\nprivate:\n    int calculateMinChanges(const vector<int>& arr, const map<int, vector<int>>& m, int n) {\n        int f = n;  // Initialize with the maximum possible value\n\n        for (auto &val : m) {\n            int diff = val.first;\n            int ans = lower_bound(arr.begin(), arr.end(), diff) - arr.begin();\n            ans = ans * 2 + (n / 2 - ans);\n\n            for (auto &elemn : val.second) {\n                if (elemn < diff) {\n                    ans -= 2;\n                } else {\n                    ans -= 1;\n                }\n            }\n\n            f = min(f, ans);\n        }\n\n        return f;\n    }\n    int solve(vector<int>& nums, int k ,int n,map<int,vector<int>>&mp ){\n        int i=0;\n        vector<int>arr;\n        while(i<n/2){\n            int pos=abs(nums[i]-nums[n-i-1]);\n         int elemn = max({nums[i], nums[n - i - 1], k - nums[ i ], k - nums[n - i - 1]});\n            mp[pos].push_back(elemn);\n            arr.push_back(elemn);\n            i++;\n        }\n        sort(arr.begin(), arr.end());\n        return calculateMinChanges(arr, mp, n);\n\n    }\n\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n=nums.size();\n        map<int,vector<int>>mp;\n        return solve(nums,k,n,mp);\n    }\n};",
    "submit_ts": "1721489884",
    "subm_id": "1327466647"
}