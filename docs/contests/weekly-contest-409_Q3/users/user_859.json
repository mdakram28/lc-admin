{
    "username": "yzmyzm",
    "submission": "class BIT {\nprivate:\n    vector<int> m_arr;\npublic:\n    BIT(int n) : m_arr(n + 1) {}\n\n    int get_lower(int x) {\n        return x & (-x);\n    }\n\n    void add(int index, int to_add) {\n        while (index < m_arr.size()) {\n            m_arr[index] += to_add;\n            index += get_lower(index);\n        }\n    }\n\n    int query(int index) {\n        int res = 0;\n        while (index > 0) {\n            res += m_arr[index];\n            index -= get_lower(index);\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int m = queries.size();\n        \n        vector<int> res;\n\n        BIT bit(n + 10);\n        vector<int> diff(n + 10, 1);\n        set<int> ends;\n        unordered_map<int, int> end2start;\n        for (int i = 2; i <= n; ++ i) bit.add(i, 1);\n        for (const auto& q: queries) {\n            int l = q[0] + 1, r = q[1] + 1;\n            int sum = bit.query(r) - bit.query(l);\n            if (sum > 1) {\n                bit.add(r, - (sum - 1));\n                diff[r] -= sum - 1;\n                \n                auto eit = ends.upper_bound(r);\n                if (eit != ends.end() && end2start[*eit] <= l) {\n                    bit.add(*eit, sum - 1);\n                    diff[*eit] += sum - 1;\n                }\n            }\n            res.push_back(bit.query(n));\n            ends.insert(r);\n            end2start[r] = l;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722742393",
    "subm_id": "1343767893"
}