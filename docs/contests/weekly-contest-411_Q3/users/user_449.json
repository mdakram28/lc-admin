{
    "username": "yyyying",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1:\n            return '9' * n\n        elif k == 2:\n            if n == 1:\n                return '8'\n            else:\n                return '8' + '9' * (n-2) + '8'\n        elif k == 3 or k == 9:\n            return '9' * n\n        elif k == 4:\n            if n <= 4:\n                return '8' * n\n            else:\n                return '88' + '9' * (n-4) + '88'\n        elif k == 5:\n            if n == 1 or n == 2:\n                return '5' * n\n            else:\n                return '5' + '9' * (n-2) + '5'\n        elif k == 6:\n            if n == 1 or n == 2:\n                return '6' * n\n            else:\n                if n % 2 == 0:\n                    x = (n - 4) // 2\n                    return '8' + '9' * x + '77' + '9' * x + '8'\n                else:\n                    x = (n-3) // 2\n                    return '8' + '9' * x + '8' + '9' * x + '8'\n        elif k == 7:\n            if n == 1 or n == 2:\n                return '7' * n\n            buf = ['','7','77','5','77','7','','4','44','6','44','4']\n            x = n % 12\n            y = (n - len(buf[x])) // 2\n            return '9' * y + buf[x] + '9' * y\n\n        else:\n            if n <= 6:\n                return '8' * n\n            else:\n                return '888' + '9' * (n-6) + '888'\n",
    "submit_ts": "1723951925",
    "subm_id": "556408511"
}