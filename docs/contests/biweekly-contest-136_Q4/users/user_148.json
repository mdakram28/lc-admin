{
    "username": "xi-jun-xiao-zi",
    "submission": "from collections import defaultdict\nfrom typing import List\n\n\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        neighbors = defaultdict(list)\n        for x, y in edges:\n            neighbors[x].append(y)\n            neighbors[y].append(x)\n\n        subtree = [0] * n\n        brothers = [0] * n\n        ans = [0] * n\n\n        def helper1(node, parent):\n            li = []\n            for neighbor in neighbors[node]:\n                if neighbor == parent:\n                    continue\n                li.append((helper1(neighbor, node) + 2 - neighbor % 2, neighbor))\n            li.sort(reverse=True)\n            if not li:\n                subtree[node] = 0\n                return 0\n            subtree[node] = li[0][0]\n            if len(li) > 1:\n                brothers[li[0][1]] = li[1][0]\n                for i in range(1, len(li)):\n                    brothers[li[i][1]] = li[0][0]\n            return li[0][0]\n\n        helper1(0, -1)\n\n        def helper2(node, parent, other):\n            ans[node] = max(subtree[node], other)\n            for neighbor in neighbors[node]:\n                if neighbor == parent:\n                    continue\n                helper2(neighbor, node, 2 - node % 2 + max(other, brothers[neighbor]))\n                \n        helper2(0, - 1, 0)\n        return ans\n",
    "submit_ts": "1722698588",
    "subm_id": "552271567"
}