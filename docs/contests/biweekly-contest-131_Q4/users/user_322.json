{
    "username": "Assassin-Killer",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.TreeSet;\n\nclass Solution {\n    int[] sum;\n    int[] lazy;\n    int n;\n\n    public List<Boolean> getResults(int[][] queries) {\n        int n = Math.min(queries.length * 3, 50000) + 1;\n        sum = new int[4 * n];\n        lazy = new int[4 * n];\n        int[] a = new int[n];\n        for (int i = 0; i < n; i++) {\n            a[i] = i;\n        }\n        build(a, 0, n - 1, 1);\n        TreeSet<Integer> set = new TreeSet<>();\n        set.add(0);\n        set.add(n);\n        List<Boolean> list = new ArrayList<>();\n        for (int i = 0; i < queries.length; i++) {\n            if (queries[i][0] == 1) {\n                int x = queries[i][1];\n                int r = set.ceiling(x);\n                set.add(x);\n                // x + 1 --- r     - x hao\n                int v = query(x, x, 0, n - 1, 1);\n                update(x + 1, r, -v, 0, n - 1, 1);\n            } else {\n                int x = queries[i][1], y = queries[i][2];\n                int v = query(0, x, 0, n - 1, 1);\n                list.add(y <= v);\n            }\n        }\n        return list;\n\n    }\n\n\n    public void build(int[] a, int l, int r, int rt) { //rt = 1\u5f00\u59cb\n        if (l == r) {\n            sum[rt] = a[l];\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(a, l, mid, rt << 1);\n        build(a, mid + 1, r, rt << 1 | 1);\n        pushUp(rt);\n    }\n\n    public void pushUp(int rt) {\n        sum[rt] = Math.max(sum[rt << 1], sum[rt << 1 | 1]);\n    }\n\n    public void pushDown(int rt, int ln, int rn) {\n        if (lazy[rt] != 0) {\n            lazy[rt << 1] += lazy[rt];\n            lazy[rt << 1 | 1] += lazy[rt];\n            sum[rt << 1] += lazy[rt];\n            sum[rt << 1 | 1] += lazy[rt];\n            lazy[rt] = 0;\n        }\n    }\n\n    public void update(int L, int R, int v, int l, int r, int rt) { //\u66f4\u65b0[L,R] + v;\n        if (L <= l && r <= R) {\n            lazy[rt] += v;\n            sum[rt] += v ;\n            return;\n        }\n        int mid = (l + r) >> 1;\n//        pushDown(rt, mid - l + 1, r - mid);\n        if (L <= mid) update(L, R, v, l, mid, rt << 1);\n        if (mid < R) update(L, R, v, mid + 1, r, rt << 1 | 1);\n        pushUp(rt);\n    }\n\n    public int query(int L, int R, int l, int r, int rt) {\n        if (L <= l && r <= R) {\n            return sum[rt];\n        }\n        int mid = (l + r) >> 1;\n        pushDown(rt, mid - l + 1, r - mid);\n        int res = -1;\n        if (L <= mid) res = Math.max(query(L, R, l, mid, rt << 1), res);\n        if (mid < R) res = Math.max(query(L, R, mid + 1, r, rt << 1 | 1), res);\n        return res;\n    }\n\n\n}",
    "submit_ts": "1716652371",
    "subm_id": "534778622"
}