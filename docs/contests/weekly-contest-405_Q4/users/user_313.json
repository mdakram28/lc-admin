{
    "username": "tccmarshima",
    "submission": "import heapq\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.costs = []\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.costs.append(cost)\nclass Solution():\n    def minimumCost(self,target, words, costs):\n        # Build the trie\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        n = len(target)\n        min_costs = [float('inf')] * (n + 1)\n        min_costs[0] = 0\n\n        heap = [(0, 0)]  # (current_cost, current_index)\n\n        while heap:\n            current_cost, i = heapq.heappop(heap)\n            \n            if current_cost > min_costs[i]:\n                continue\n            \n            if i == n:\n                return current_cost\n            \n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                for cost in node.costs:\n                    new_cost = current_cost + cost\n                    if new_cost < min_costs[j + 1]:\n                        min_costs[j + 1] = new_cost\n                        heapq.heappush(heap, (new_cost, j + 1))\n\n        return -1 if min_costs[n] == float('inf') else min_costs[n]",
    "submit_ts": "1720321495",
    "subm_id": "1312324383"
}