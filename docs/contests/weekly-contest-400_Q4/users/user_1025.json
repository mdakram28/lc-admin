{
    "username": "jasonreed7",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        ans = inf\n        bc = BitCount()\n        n = len(nums)\n        start = 0\n\n        for end in range(n):\n            bc.add(nums[end])\n\n            val = bc.val()\n            print(start, end, val)\n\n            ans = min(ans, abs(k - val))\n\n            while val < k and start < end:\n                bc.remove(nums[start])\n\n                val = bc.val()\n                # print(start + 1, end, val)\n\n                ans = min(ans, abs(k - val))\n\n                if val >= k:\n                    bc.add(nums[start])\n                    val = bc.val()\n                    break\n                else:\n                    start += 1\n\n        return ans\n\nclass BitCount:\n    def __init__(self):\n        self.zeroCount = [0] * 31\n        self.oneCount = [0] * 31\n        self.count = 0\n\n    def add(self, num):\n        self.count += 1\n        place = 0\n\n        while num > 0:\n            if num % 2 == 0:\n                self.zeroCount[place] += 1\n            else:\n                self.oneCount[place] += 1\n            \n            num //= 2\n            place += 1\n\n        # print(self.zeroCount)\n        # print(self.oneCount)\n\n    def remove(self, num):\n        self.count -= 1\n        place = 0\n\n        while num > 0:\n            if num % 2 == 0:\n                self.zeroCount[place] -= 1\n            else:\n                self.oneCount[place] -= 1\n            \n            num //= 2\n            place += 1\n\n    def val(self):\n        ans = 0\n        curr = 1\n\n        for i in range(31):\n            # ans += curr if self.zeroCount[i] > 0 and self.oneCount[i] > 0 else 0\n            ans += curr if self.count > 0 and self.oneCount[i] == self.count else 0\n            curr *= 2\n\n        return ans",
    "submit_ts": 1717300350.0
}