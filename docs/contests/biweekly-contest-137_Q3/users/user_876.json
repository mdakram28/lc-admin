{
    "username": "Rudraksh Jain",
    "submission": "class Solution {\npublic:\n    void update(vector<vector<int>>& board,int i, int m,int &f,int& s, int& t){\n        for(int j = 0; j < m; j++){\n            if(f == -1 || board[i][j] > board[i][f]){\n                t = s;\n                s = f;\n                f = j;\n            }\n            else if(s == -1 || board[i][j] > board[i][s]){\n                t = s;\n                s = j;\n            }\n            else if(t == -1 || board[i][j] > board[i][t]){\n                t = j;\n            }\n        }\n    }\n    long long maxValue(vector<vector<int>>& board,vector<vector<int>>&maxBoard, int placed, int i,int n, int m,vector<int>& visited){\n        if(placed == 3) return 0;\n        long long ans = LLONG_MIN;\n        for(int j = 0; j < 3; j++){\n            int chosen = maxBoard[i][j];\n            if(visited[chosen]) continue;\n            visited[chosen] = 1;\n            ans = max(ans,board[i][chosen] + maxValue(board,maxBoard,placed+1,i+1,n,m,visited));\n            visited[chosen] = 0;\n        }\n        if(3-placed < n-i){\n            ans = max(ans,maxValue(board,maxBoard,placed,i+1,n,m,visited));\n        }\n        return ans;\n        \n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        vector<int> visited(m);\n        vector<vector<int>> maxBoard(n,vector<int>(3,-1));\n        for(int i = 0; i < n; i++){\n            update(board,i,m,maxBoard[i][0],maxBoard[i][1],maxBoard[i][2]);\n        }\n        return maxValue(board,maxBoard,0,0,n,m,visited);\n    }\n};",
    "submit_ts": "1723909506",
    "subm_id": "1359195113"
}