{
    "username": "VarunR",
    "submission": "class Solution {\npublic:\n    \n     int n;\n        vector<vector<long long>> segtree;\n        \n        void init(int _n) {\n            n = _n;\n            segtree.resize(4 * n, vector<long long>(4, (int)0));\n        }\n    \n        // 0, left select right select 1, left seelct right not select\n        // 2, left not select right select 3, left not select right not select\n        // max of all these\n    \n        vector<long long> comb(vector<long long>& l, vector<long long>& r) {\n            vector<long long> ret(4);\n            ret[0] = max(l[0] + r[2], l[1] + r[0]);\n            ret[1] = max(l[0] + r[3], l[1] + r[1]);\n            ret[2] = max(l[2] + r[2], l[3] + r[0]);\n            ret[3] = max(l[2] + r[3], l[3] + r[1]);\n            ret[1] = max(ret[1], ret[3]);\n            ret[2] = max(ret[2], ret[3]);\n            ret[0] = max(max(ret[1], ret[2]), ret[0]);\n            return ret;\n        }\n        \n        void upd(int l, int r, int node, int ind, int val) {\n            if(l > ind or r < ind) return;\n            if(l > r) return;\n            if(l == r and l != ind) return;\n            if(l == r and l == ind) {\n                val = max((long long)val, 0ll);\n                segtree[node] = {(long long)val, 0ll, 0ll, 0ll};\n                return;\n            }\n            int mid = (l + r)/2;\n            upd(l, mid, 2 * node + 1, ind, val);\n            upd(mid + 1, r, 2 * node + 2, ind, val);\n            segtree[node] = comb(segtree[2 * node + 1], segtree[2 * node + 2]);\n        }\n        \n        vector<long long> qry(int l, int r, int node, int tl, int tr) {\n            if(l > tr or r < tl) return {0ll, 0ll, 0ll, 0ll};\n            if(l > r) return {0ll, 0ll, 0ll, 0ll};\n            if(tl > tr) return {0ll, 0ll, 0ll, 0ll};\n            if(tl <= l and tr >= r) return segtree[node];\n            int mid = (l + r)/2;\n            return {0ll, 0ll, 0ll, 0ll};\n            // return comb(qry(l, mid, 2 * node + 1, tl, tr), qry(mid + 1, r, 2 * node + 2, tl, tr));\n        }\n        \n        void upd(int ind, int val) {\n            upd(0, n - 1, 0, ind, val);\n        }\n        \n        long long qry(int l, int r) {\n            // return qry(0, n - 1, 0, 0, n - 1)[0];\n            return segtree[0][0];\n        }\n    \n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        init((int)nums.size());\n        for(int i = 0; i < (int)nums.size(); i++) {\n            upd(i, nums[i]);\n        }\n        int mod = (int)1e9 + 7;\n        long long ret = 0;\n        for(auto& x: queries) {\n            int ind = x[0];\n            int val = x[1];\n            upd(ind, val);\n            ret += qry(0, 0);\n            ret %= mod;\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1716693251.0
}