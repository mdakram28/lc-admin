{
    "username": "BZH110",
    "submission": "class Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        int n = colors.size(), cnt[2]{0};\n        map<int,int> m;\n        map<int,int> size;\n        for(int i=0;i<n;i++){\n            if(i > 0 && colors[i] != colors[i-1]){\n                auto it = m.end();\n                it--;\n                size[it->second]--;\n                if(size[it->second] == 0)\n                    size.erase(it->second);\n                it->second++;\n                size[it->second]++;\n            }\n            else{\n                m[i] = 1;\n                size[1]++;\n            }\n            cnt[colors[i]]++;\n        }\n        vector<int> ans;\n        for(auto& q:queries){\n            if(q[0] == 1){\n                auto it = size.lower_bound(q[1]);\n                int t = 0;\n                while(it != size.end()){\n                    t += (it->first - q[1] + 1) * it->second;\n                    it++;\n                }\n                if(colors[n-1] != colors[0]) {\n                    if(m.size() > 1) {\n                        int add = 0;\n                        if (m.begin()->second >= q[1])\n                            t -= m.begin()->second - q[1] + 1;\n                        add += m.begin()->second;\n                        it = m.end();\n                        it--;\n                        if (it->second >= q[1])\n                            t -= it->second - q[1] + 1;\n                        add += it->second;\n                        if (add >= q[1])\n                            t += add - q[1] + 1;\n                    }\n                    else{\n                        t = n;\n                    }\n                }\n                ans.push_back(t);\n            }\n            else{\n                if(colors[q[1]] == q[2])\n                    continue;\n                auto it = m.lower_bound(q[1] + 1);\n                it--;\n                auto pre = it;\n                if(pre != m.begin()){\n                    pre--;\n                }\n                auto back = it;\n                back++;\n\n                if(it->second == 1){\n                    size[1]--;\n                    if(size[1] == 0)\n                        size.erase(1);\n                    m.erase(it);\n                    if(pre != it) {\n                        size[pre->second]--;\n                        if(size[pre->second] == 0)\n                            size.erase(pre->second);\n                        pre->second += 1;\n                        size[pre->second]++;\n                        if(pre != back) {\n                            size[pre->second]--;\n                            if(size[pre->second] == 0)\n                                size.erase(pre->second);\n                            pre->second += back->second;\n                            size[pre->second]++;\n                            size[back->second]--;\n                            if(size[back->second] == 0)\n                                size.erase(back->second);\n                            if(back != m.end())\n                                m.erase(back);\n                        }\n                    }\n                    else{\n                        m.insert({back->first - 1, back->second + 1});\n                        size[back->second + 1]++;\n                        size[back->second]--;\n                        if(size[back->second] == 0)\n                            size.erase(back->second);\n                        if(back != m.end())\n                            m.erase(back);\n                    }\n                }\n                else{\n                    if(it->first == q[1]){\n                        m.insert({it->first + 1, it->second - 1});\n                        size[it->second - 1]++;\n                        size[it->second]--;\n                        if(size[it->second] == 0)\n                            size.erase(it->second);\n                        m.erase(it);\n                        if(pre != it) {\n                            size[pre->second]--;\n                            if(size[pre->second] == 0)\n                                size.erase(pre->second);\n                            pre->second++;\n                            size[pre->second]++;\n                        }\n                        else{\n                            m.insert({q[1], 1});\n                            size[1]++;\n                        }\n                    }\n                    else if(it->first + it->second == q[1] + 1){\n                        size[it->second]--;\n                        if(size[it->second] == 0)\n                            size.erase(it->second);\n                        it->second--;\n                        size[it->second]++;\n                        if(back != m.end()) {\n                            m.insert({back->first - 1, back->second + 1});\n                            size[back->second + 1]++;\n                            size[back->second]--;\n                            if(size[back->second] == 0)\n                                size.erase(back->second);\n                            m.erase(back);\n                        }\n                        else{\n                            m.insert({q[1], 1});\n                            size[1]++;\n                        }\n                    }\n                    else{\n                        m.insert({q[1], 1});\n                        size[1]++;\n                        m.insert({q[1] + 1, it->second - (q[1] - it->first) - 1});\n                        size[it->second - (q[1] - it->first) - 1]++;\n                        size[it->second]--;\n                        if(size[it->second] == 0)\n                            size.erase(it->second);\n                        it->second = q[1] - it->first;\n                        size[it->second]++;\n                    }\n                }\n\n                colors[q[1]] = q[2];\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743852",
    "subm_id": "1343801135"
}