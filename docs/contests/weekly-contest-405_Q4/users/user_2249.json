{
    "username": "Fun_Purpose",
    "submission": "#include <iostream>\n#include <unordered_map>\n#include <vector>\n#include <climits>\n#include <string>\n\nusing namespace std;\n\nclass Node {\npublic:\n    char data;\n    bool terminal;\n    int cost;\n    unordered_map<char, Node*> children;\n\n    Node(char data) {\n        this->data = data;\n        this->terminal = false;\n        this->cost = INT_MAX;\n    }\n\n    void makeTerminal(int cost) {\n        this->cost = min(cost, this->cost);\n        this->terminal = true;\n    }\n};\n\nclass Solution {\npublic:   \n    Node* root;\n\n    Solution() {\n        root = new Node('/0');\n    }\n\n    void insert(const string &word, int cost) {\n        Node* curr = root;\n        for (char ch : word) {\n            if (curr->children.find(ch) == curr->children.end()) {\n                curr->children[ch] = new Node(ch);\n            }\n            curr = curr->children[ch];\n        }\n        curr->makeTerminal(cost);\n    }   \n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        for (int i = 0; i < n; ++i) {\n            insert(words[i], costs[i]);\n        }\n\n        int m = target.size();\n        vector<int> dp(m + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < m; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            Node* curr = root;\n            for (int j = i; j < m; ++j) {\n                if (curr->children.find(target[j]) == curr->children.end()) break;\n                curr = curr->children[target[j]];\n                if (curr->terminal) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr->cost);\n                }\n            }\n        }\n\n        return dp[m] == INT_MAX ? -1 : dp[m];\n    }\n};\n",
    "submit_ts": "1720324740",
    "subm_id": "1312406908"
}