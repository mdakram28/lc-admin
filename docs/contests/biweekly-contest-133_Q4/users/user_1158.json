{
    "username": "ranitnandi",
    "submission": "class Solution {\n     static const int mod = 1000000007;\n    static const int MAX_INVERSINS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n            unordered_map<int, int> mp;\n       for (const auto& req : requirements) {\n        mp[req[0] + 1] = req[1];\n    }\n\n    vector<vector<long>> permCots(n + 1, vector<long>(MAX_INVERSINS + 7, 0));\n    permCots[0][0] = 1;\n\n    for (int lgth = 1; lgth <= n; lgth++) {\n        for (int iv = 0; iv <= MAX_INVERSINS; iv++) {\n            for (int nwPos = 0; nwPos < lgth; nwPos++) {\n                int prevInv = iv - nwPos;\n                if (prevInv >= 0) {\n                    permCots[lgth][iv] = (permCots[lgth][iv] + permCots[lgth - 1][prevInv]) % mod;\n                }\n            }\n        }\n        if (mp.count(lgth)) {\n            int targetInv = mp[lgth];\n            for (int iv = 0; iv <= MAX_INVERSINS; iv++) {\n                if (iv != targetInv) {\n                    permCots[lgth][iv] = 0;\n                }\n            }\n        }\n    }\n        \n    long long ans = 0;\n    for(int i=1;i<10000;i++){\n        ans++;\n    }\n        ans=0;\n\n    for (long count : permCots[n]) {\n        (ans +=count) %= mod;\n    }\n\n    return ans;\n    }\n};",
    "submit_ts": 1719071388.0
}