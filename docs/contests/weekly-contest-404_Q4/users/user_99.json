{
    "username": "ninja_master2002",
    "submission": "class Solution {\n    void dfs(int curr,vector<int>adj[],int par,vector<int>&level){\n        if(par!=-1){\n            level[curr]=level[par]+1;\n        }\n        for(auto child:adj[curr]){\n            if(child!=par){\n                dfs(child,adj,curr,level);\n            }\n        }\n    }\n    int helper(vector<vector<int>>& edges){\n        int n=edges.size();\n        n++;\n        vector<int>adj[n];\n        for(auto it:edges){\n            adj[it[0]].push_back(it[1]);\n            adj[it[1]].push_back(it[0]);\n        }\n        vector<int>level(n,0);\n        dfs(0,adj,-1,level);\n        int maxi=*max_element(level.begin(),level.end());\n        int node;\n        for(int i=0;i<n;i++){\n            if(level[i]==maxi){\n                node=i;\n                break;\n            }\n        }\n        vector<int>level2(n,0);\n        dfs(node,adj,-1,level2);\n        return (*max_element(level2.begin(),level2.end()));\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int diam1=helper(edges1);\n        int diam2=helper(edges2);\n        // cout<<diam1<<\" \"<<diam2<<endl;\n        int temp1=(diam1+1)/2;\n        int temp2=(diam2+1)/2;\n        int temp3=temp1+temp2+1;\n//         if(diam1==1){\n//             temp3=temp2+1;\n//         }\n//         else if(diam2==1){\n//             temp3=temp1+1;\n//         }\n//         else{\n            \n//         }\n        return max({diam1,diam2,temp3});\n    }\n};",
    "submit_ts": "1719717328",
    "subm_id": "1304388691"
}