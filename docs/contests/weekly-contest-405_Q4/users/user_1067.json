{
    "username": "concl",
    "submission": "\ndef heappush(heap, item, position_dict):\n    \"\"\"Push item onto heap, maintaining the heap invariant and updating the position dictionary.\"\"\"\n    heap.append(item)\n    position_dict[item[1]] = len(heap) - 1\n    _siftup(heap, len(heap) - 1, position_dict)\n\ndef heappop(heap, position_dict):\n    \"\"\"Pop the smallest item off the heap, maintaining the heap invariant and updating the position dictionary.\"\"\"\n    lastelt = heap.pop()\n    if heap:\n        returnitem = heap[0]\n        heap[0] = lastelt\n        position_dict[lastelt[1]] = 0\n        _siftdown(heap, 0, position_dict)\n    else:\n        returnitem = lastelt\n    position_dict.pop(returnitem[1], None)\n    return returnitem\n\ndef _siftup(heap, pos, position_dict):\n    \"\"\"Move a node up in the heap, ensuring the heap property is maintained.\"\"\"\n    newitem = heap[pos]\n    while pos > 0:\n        parentpos = (pos - 1) >> 1\n        parent = heap[parentpos]\n        if newitem[0] < parent[0]:\n            heap[pos] = parent\n            position_dict[parent[1]] = pos\n            pos = parentpos\n            continue\n        break\n    heap[pos] = newitem\n    position_dict[newitem[1]] = pos\n\ndef _siftdown(heap, pos, position_dict):\n    \"\"\"Move a node down in the heap, ensuring the heap property is maintained.\"\"\"\n    endpos = len(heap)\n    startpos = pos\n    newitem = heap[pos]\n    childpos = 2 * pos + 1  # Left child position\n    while childpos < endpos:\n        rightpos = childpos + 1\n        if rightpos < endpos and not heap[childpos][0] < heap[rightpos][0]:\n            childpos = rightpos\n        heap[pos] = heap[childpos]\n        position_dict[heap[childpos][1]] = pos\n        pos = childpos\n        childpos = 2 * pos + 1\n    heap[pos] = newitem\n    position_dict[newitem[1]] = pos\n    _siftup(heap, pos, position_dict)\n\ndef decrease_key(heap, old_item_key, new_item, position_dict):\n    \"\"\"Decrease the value of an item in the heap and update the heap and position dictionary.\"\"\"\n    pos = position_dict.pop(old_item_key)\n    heap[pos] = new_item\n    position_dict[new_item[1]] = pos\n    _siftup(heap, pos, position_dict)\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.end = False\n        self.cost = inf\n\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        current_node = self.root\n        for char in word:\n            if char not in current_node.children:\n                current_node.children[char] = TrieNode()\n            current_node = current_node.children[char]\n        current_node.cost = min(current_node.cost, cost)\n        current_node.end = True\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        n = len(target)\n        bruh = Trie()\n\n        for i, s in enumerate(words):\n            bruh.insert(s, costs[i])\n        \n        seen = set()\n        h = [[0, 0]]\n        pos_dict = {0: 0}\n        while h:\n            cost, node = heappop(h, pos_dict)\n            if node == n:\n                return cost\n            elif node in seen:\n                continue\n            \n            seen.add(node)\n            next = node\n            temp = bruh.root\n            while next < n:\n                if target[next] in temp.children:\n                    temp = temp.children[target[next]]\n                    if temp.end:\n                        if next + 1 in pos_dict:\n                            if h[pos_dict[next + 1]][0] > cost + temp.cost:\n                                decrease_key(h, next + 1, [cost + temp.cost, next + 1], pos_dict)\n                        else:\n                            heappush(h, [cost + temp.cost, next + 1], pos_dict)\n                        \n                    next += 1\n                else:\n                    break\n                        \n\n        return -1\n",
    "submit_ts": "1720323374",
    "subm_id": "1312373999"
}