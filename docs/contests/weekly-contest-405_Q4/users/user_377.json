{
    "username": "pankaj_777",
    "submission": "#define ll long long int\nconst ll INF = 1e14;\n\nstruct Node {\n    Node* links[26];\n    bool flag = false;\n    ll cost = INF;\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    void setEnd() {\n        flag = true;\n    }\n\n    bool isEnd() {\n        return flag;\n    }\n    \n    void setCost(ll cost) {\n        this -> cost = min(this -> cost, cost);\n    }\n    \n    ll getCost() {\n        return cost;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string word, int cost) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node -> containsKey(word[i])) {\n                node -> put(word[i], new Node());\n            }\n            node = node -> get(word[i]);\n        }\n        node -> setEnd();\n        node -> setCost(cost);\n    }\n\n    bool search(string word) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node -> containsKey(word[i])) {\n                return false;\n            }\n            node = node -> get(word[i]);\n        }\n        return node -> isEnd();\n    }\n\n    bool startsWith(string prefix) {\n        Node* node = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            if (!node -> containsKey(prefix[i])) {\n                return false;\n            }\n            node = node -> get(prefix[i]);\n        }\n        return true;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie ds;\n        for (int i = 0; i < words.size(); i++) {\n            ds.insert(words[i], costs[i]);\n        }\n        \n        vector<ll> dp(n + 1, INF);\n        dp[n] = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            Node* curr = ds.root;\n            for (int j = i; j < n; j++) {\n                if (!curr -> containsKey(target[j])) break;\n                curr = curr -> get(target[j]);\n                dp[i] = min(dp[i], curr -> getCost() + dp[j + 1]);\n            }\n        }\n        return dp[0] < INF ? dp[0] : -1;\n    }\n};",
    "submit_ts": "1720321983",
    "subm_id": "1312337560"
}