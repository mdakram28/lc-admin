{
    "username": "CelonyMire",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef LC_LOCAL\n#include \"parser.hpp\"\n#else\n#define dbg(...)\n#endif\n\n// ----- CHANGE FOR PROBLEM -----\nclass Solution {\npublic:\n  int minimumSum(vector<vector<int>> &g) {\n    int ans = 1e9;\n    int n = g.size(), m = g[0].size();\n    map<int, set<int>> xs, ys;\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        if (!g[i][j])\n          continue;\n        xs[i].insert(j);\n        ys[j].insert(i);\n      }\n    }\n    int p = xs.size(), q = ys.size();\n    vector<int> xv, yv;\n    for (auto &[k, _] : xs) {\n      xv.push_back(k);\n    }\n    for (auto &[k, _] : ys) {\n      yv.push_back(k);\n    }\n    auto solve_col = [&](int min_h, int max_h, int rects) {\n      vector<int> yv2, mnx2, mxx2;\n      for (int i = 0; i < q; i++) {\n        auto it = ys[yv[i]].lower_bound(min_h);\n        if (it != ys[yv[i]].end() && *it <= max_h) {\n          yv2.push_back(yv[i]);\n          mnx2.push_back(*it);\n          mxx2.push_back(*--ys[yv[i]].upper_bound(max_h));\n        }\n      }\n      int l = yv2.size();\n      if (l < rects)\n        return (int)1e9;\n      vector dp(l + 1, vector(rects + 1, (int)1e9));\n      dp[0][0] = 0;\n      for (int i = 0; i < l; i++) {\n        int mnx = 1e9, mxx = 0;\n        for (int j = i; j < l; j++) {\n          mnx = min(mnx, min(mnx2[i], mnx2[j]));\n          mxx = max(mxx, max(mxx2[i], mxx2[j]));\n          int area = (yv2[j] - yv2[i] + 1) * (mxx - mnx + 1);\n          for (int k = 0; k < rects; k++) {\n            dp[j + 1][k + 1] = min(dp[j + 1][k + 1], dp[i][k] + area);\n          }\n        }\n      }\n      return dp[l][rects];\n    };\n    auto solve_row = [&](int min_w, int max_w, int rects) {\n      vector<int> xv2, mny2, mxy2;\n      for (int i = 0; i < p; i++) {\n        auto it = xs[xv[i]].lower_bound(min_w);\n        if (it != xs[xv[i]].end() && *it <= max_w) {\n          xv2.push_back(xv[i]);\n          mny2.push_back(*it);\n          mxy2.push_back(*--xs[xv[i]].upper_bound(max_w));\n        }\n      }\n      int l = xv2.size();\n      if (l < rects)\n        return (int)1e9;\n      vector dp(l + 1, vector(rects + 1, (int)1e9));\n      dp[0][0] = 0;\n      for (int i = 0; i < l; i++) {\n        int mny = 1e9, mxy = 0;\n        for (int j = i; j < l; j++) {\n          mny = min(mny, min(mny2[i], mny2[j]));\n          mxy = max(mxy, max(mxy2[i], mxy2[j]));\n          int area = (xv2[j] - xv2[i] + 1) * (mxy - mny + 1);\n          for (int k = 0; k < rects; k++) {\n            dp[j + 1][k + 1] = min(dp[j + 1][k + 1], dp[i][k] + area);\n          }\n        }\n      }\n      return dp[l][rects];\n    };\n    ans = min(ans, solve_col(0, n, 3));\n    ans = min(ans, solve_row(0, m, 3));\n    for (int l = 0; l < p - 1; l++) {\n      ans = min(ans, solve_col(0, xv[l], 1) + solve_col(xv[l + 1], n, 2));\n      ans = min(ans, solve_col(0, xv[l], 2) + solve_col(xv[l + 1], n, 1));\n    }\n    for (int l = 0; l < q - 1; l++) {\n      ans = min(ans, solve_row(0, yv[l], 1) + solve_row(yv[l + 1], m, 2));\n      ans = min(ans, solve_row(0, yv[l], 2) + solve_row(yv[l + 1], m, 1));\n    }\n    return ans;\n  }\n};\n// ----- CHANGE FOR PROBLEM -----\n\n#ifdef LC_LOCAL\nint main() {\n  ios_base::sync_with_stdio(false);\n  cin.tie(NULL);\n  exec(&Solution::minimumSum); // CHANGE FOR PROBLEM\n}\n#endif",
    "submit_ts": 1719113603.0
}