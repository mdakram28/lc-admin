{
    "username": "ianwong1999",
    "submission": "class Solution {\npublic:\n    vector<int> g[100055];\n    int dp[100055];\n    \n    void dfs(int v, int par = -1) {\n        dp[v] = 0;\n        \n        for (auto u : g[v]) {\n            if (u == par) continue;\n            \n            dfs(u, v);\n            \n            dp[v] = max(dp[v], dp[u] + (2 - (u % 2)));\n        }\n    }\n    void rdfs(int v, int par = -1, int prev = 0) {\n        dp[v] = max(dp[v], prev);\n        \n        int high = prev;\n        int second = 0;\n        \n        \n        for (auto u : g[v]) {\n            if (u == par) continue;\n            \n            int c = dp[u] + (2 - (u % 2));\n            \n            if (c > high) {\n                second = high;\n                high = c;\n            } else if (c > second) {\n                second = c;\n            }\n        }\n        \n        for (auto u : g[v]) {\n            if (u == par) continue;\n            int c = dp[u] + (2 - (u % 2));\n            if (c == high) {\n                rdfs(u, v, second + (2 - (v % 2)));\n            } else {\n                rdfs(u, v, high + (2 - (v % 2)));\n            }\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        \n        for (int i = 0; i < n; i++) g[i].clear();\n        \n        for (const auto& vec : edges) {\n            int x=  vec[0];\n            int y = vec[1];\n            \n            g[x].push_back(y);\n            g[y].push_back(x);\n        }\n        \n        dfs(0);\n        rdfs(0);\n        \n        vector<int> res(n);\n        \n        for (int i = 0; i < n; i++) res[i] = dp[i];\n        return res;\n    }\n};",
    "submit_ts": "1722696674",
    "subm_id": "1343117596"
}