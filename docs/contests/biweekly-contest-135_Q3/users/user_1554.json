{
    "username": "bhaskar-3219",
    "submission": "class Solution {\npublic:\n    int changesRequired(const vector<int>& nums, int k, int X) {\n    int n = nums.size();\n    int changes = 0;\n\n    for (int i = 0; i <= n / 2; ++i) {\n        int left = nums[i];\n        int right = nums[n - i - 1];\n        int diff = abs(left - right);\n\n         if (diff != X) {\n            // Check how many changes are needed\n            if (left - X >= 0 && left - X <= k && right + X >= 0 && right + X <= k) {\n                // Either left can be changed to (left - X) or right can be changed to (right + X)\n                changes += 1;\n            } else if (right - X >= 0 && right - X <= k && left + X >= 0 && left + X <= k) {\n                // Either right can be changed to (right - X) or left can be changed to (left + X)\n                changes += 1;\n            } else {\n                // Otherwise, we need two changes: one to make left or right to some value and then adjust the other\n                changes += 2;\n            }\n        }\n    }\n\n    return changes;\n}\n    \n    int minChanges(vector<int>& nums, int k) {\n       \n\n        int n = nums.size();\n    map<int, vector<int>> diffMap;\n    vector<int> potentialX;\n\n    // Collecting the differences and potential X values\n    for (int i = 0; i < n / 2; ++i) {\n        int a = nums[i];\n        int b = nums[n - i - 1];\n        int diff = abs(a - b);\n\n        // Potential X values based on a, b, and k\n        int X = max({a, b, k - a, k - b});\n        diffMap[diff].push_back(X);\n        potentialX.push_back(X);\n    }\n\n    int minChanges = n; // Initialize to the maximum possible number of changes\n    sort(potentialX.begin(), potentialX.end());\n\n    // Calculate the minimum changes for each unique difference\n    for (const auto& [diff, values] : diffMap) {\n        int changesRequired = lower_bound(potentialX.begin(), potentialX.end(), diff) - potentialX.begin();\n        changesRequired = changesRequired * 2 + (n / 2 - changesRequired);\n\n        for (const auto& X : values) {\n            if (X < diff) {\n                changesRequired -= 2; // Two changes required if X < diff\n            } else {\n                changesRequired -= 1; // One change required if X >= diff\n            }\n        }\n\n        minChanges = min(minChanges, changesRequired);\n    }\n\n    return minChanges;\n    }\n};",
    "submit_ts": "1721489621",
    "subm_id": "1327458812"
}