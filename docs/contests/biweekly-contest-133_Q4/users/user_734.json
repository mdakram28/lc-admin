{
    "username": "rahulbhl22",
    "submission": "class Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\n    void processRequirements(const vector<vector<int>>& requirements, unordered_map<int, int>& inversionRequirements) {\n        for (const auto& req : requirements) {\n            inversionRequirements[req[0] + 1] = req[1];\n        }\n    }\n\n    void computePermCounts(int n, vector<vector<long>>& permCounts, const unordered_map<int, int>& inversionRequirements) {\n        for (int length = 1; length <= n; ++length) {\n            for (int inversions = 0; inversions <= MAX_INVERSIONS; ++inversions) {\n                for (int position = 0; position < length; ++position) {\n                    int prevInversions = inversions - position;\n                    if (prevInversions >= 0) {\n                        permCounts[length][inversions] = (permCounts[length][inversions] + permCounts[length - 1][prevInversions]) % MOD;\n                    }\n                }\n            }\n\n            if (inversionRequirements.count(length)) {\n                int targetInversions = inversionRequirements.at(length);\n                for (int inversions = 0; inversions <= MAX_INVERSIONS; ++inversions) {\n                    if (inversions != targetInversions) {\n                        permCounts[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    long calculateResult(const vector<vector<long>>& permCounts, int n) {\n        long result = 0;\n        for (long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        return result;\n    }\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> inversionRequirements;\n        processRequirements(requirements, inversionRequirements);\n\n        vector<vector<long>> permCounts(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        computePermCounts(n, permCounts, inversionRequirements);\n\n        return static_cast<int>(calculateResult(permCounts, n));\n    }\n};",
    "submit_ts": 1719070807.0
}