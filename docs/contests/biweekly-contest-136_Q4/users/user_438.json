{
    "username": "viscount777",
    "submission": "class Solution {\n    static class Edge {\n        Integer finishTime = null;\n        int dst;\n\n        Edge(int d) {\n            dst = d;\n        }\n    }\n\n    List<Map<Integer, Edge>> graph = new ArrayList<>();\n    int res[];\n    int secondMax[];\n    int maxFrom[];\n\n    public int[] timeTaken(int[][] edges) {\n        int n = 0;\n        for (int[] e: edges) {\n            while (graph.size() <= e[0] || graph.size() <= e[1]) {\n                graph.add(new HashMap<>());\n            }\n            graph.get(e[0]).put(e[1], new Edge(e[1]));\n            graph.get(e[1]).put(e[0], new Edge(e[0]));\n            n = Math.max(n, e[0]);\n            n = Math.max(n, e[1]);\n        }\n\n        res = new int[n + 1];\n        secondMax = new int[n + 1];\n        maxFrom = new int[n + 1];\n        for (int i = 0; i <= n; i++) {\n            res[i] = rec(i, null);\n        }\n        return res;\n    }\n\n    int rec(int cur, Integer from) {\n        if (res[cur] != 0) {\n            if (from == null || from != maxFrom[cur]) {\n                return res[cur];\n            }\n            return secondMax[cur];\n        }\n\n        int max = 0;\n        int secondMax = 0;\n        int maxFrom = -1;\n        for (var next: graph.get(cur).entrySet()) {\n            Edge edge = next.getValue();\n            if (edge.finishTime != null) {\n                if (edge.finishTime > max) {\n                    secondMax = max;\n                    max = edge.finishTime;\n                    maxFrom = edge.dst;\n                } else if (edge.finishTime > secondMax) {\n                    secondMax = edge.finishTime;\n                }\n                continue;\n            }\n\n            int edgeTime = edge.dst % 2 == 0 ? 2 : 1;\n            if (edge.finishTime == null) {\n                // mark edge visited\n                Integer tmp = graph.get(edge.dst).get(cur).finishTime;\n                graph.get(edge.dst).get(cur).finishTime = 0;\n\n                edge.finishTime = rec(edge.dst, cur);\n\n                graph.get(edge.dst).get(cur).finishTime = tmp;\n            }\n            edgeTime += edge.finishTime;\n            edge.finishTime = edgeTime;\n            if (edge.finishTime > max) {\n                    secondMax = max;\n                    max = edge.finishTime;\n                    maxFrom = edge.dst;\n            } else if (edge.finishTime > secondMax) {\n                    secondMax = edge.finishTime;\n            }\n        }\n        this.secondMax[cur] = secondMax;\n        this.maxFrom[cur] = maxFrom;\n        return max;\n    }\n}",
    "submit_ts": "1722698148",
    "subm_id": "1343171272"
}