{
    "username": "kasinathansj",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int peak[] = new int[nums.length];\n        Fenwick fn = new Fenwick(nums.length);\n        for(int i = 1 ; i < nums.length-1 ; i++){\n            if(nums[i]>nums[i-1]&&nums[i]>nums[i+1]){\n                fn.add(i,1);\n                peak[i] = 1;\n            }\n        }\n        ArrayList<Integer> ans = new ArrayList<>();\n        for(int q[] : queries){\n            if(q[0]==1){\n                int sum = fn.range(q[1],q[2]);\n                if(peak[q[1]]==1)sum--;\n                if(peak[q[2]]==1&&q[1]!=q[2])sum--;\n                ans.add(sum);\n            }else{\n                nums[q[1]] = q[2];\n                if(peak[q[1]]==1){\n                    int p = q[1];\n                    if(nums[p-1]<nums[p]&&nums[p+1]<nums[p]){}\n                    else {\n                        peak[q[1]] = 0;\n                        fn.add(q[1],-1);\n                    }\n                }else{\n                    int p = q[1];\n                    if(p-1>=0&&p+1<nums.length){\n                        if(nums[p]>nums[p-1]&&nums[p]>nums[p+1]){\n                            peak[p] = 1;\n                            fn.add(p,1);\n                        }\n                    }\n                }\n                if(q[1]-1>0){\n                    if(peak[q[1]-1]==1){\n                        int p = q[1]-1;\n                        if(nums[p]>nums[p-1]&&nums[p]>nums[p+1]){}\n                        else {\n                            peak[p] = 0;\n                            fn.add(p,-1);\n                        }\n                    }else{\n                        int p = q[1]-1;\n                        if(nums[p]>nums[p-1]&&nums[p]>nums[p+1]){\n                            peak[p] = 1;\n                            fn.add(p,1);\n                        }\n                    }\n                }\n                if(q[1]+1<nums.length-1){\n                    if(peak[q[1]+1]==1){\n                        int p = q[1]+1;\n                        if(nums[p]>nums[p-1]&&nums[p]>nums[p+1]){}\n                        else {\n                            peak[p] = 0;\n                            fn.add(p,-1);\n                        }\n                    }else{\n                        int p = q[1]+1;\n                        if(nums[p]>nums[p-1]&&nums[p]>nums[p+1]){\n                            peak[p] = 1;\n                            fn.add(p,1);\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}\n\nclass Fenwick {\n    int n;\n    int arr[];\n    int org[];\n\n    Fenwick(int n) {\n        this.n = n + 1;\n        this.arr = new int[n + 1];\n        this.org = new int[n + 1];\n    }\n\n    void add(int i, int e) {\n        i++;\n        while (i < n) {\n            arr[i] += e;\n            i += (i & (-i));\n        }\n    }\n\n    int sum(int i) {\n        i++;\n        int sum = 0;\n        while (i > 0) {\n            sum += arr[i];\n            i -= (i & (-i));\n        }\n        return sum;\n    }\n\n    int range(int fr, int to) {\n        return sum(to) - sum(fr - 1);\n    }\n\n    void update(int i, int e) {\n        i++;\n        int up = e - org[i];\n        org[i] = e;\n        add(i - 1, up);\n    }\n\n    int lowerBound(int val) {\n        int sum = 0;\n        int pos = 0;\n        int bitmask = 1;\n        while (bitmask <= n)\n            bitmask <<= 1;\n        bitmask >>= 1;\n        for (int i = bitmask; i > 0; i >>= 1) {\n            if (pos + i < n && sum + arr[pos + i] < val) {\n                sum += arr[pos + i];\n                pos += i;\n            }\n        }\n        return pos + 1;\n    }\n}\n",
    "submit_ts": 1718507867.0
}