{
    "username": "pradyumnna",
    "submission": "class Solution \n{\n    public int compute(int i, int j, int[][] dp)\n    {\n        int ans = 0;\n        for(int p=0;p<32;p++)\n        {\n            if(dp[j+1][p]-dp[i][p] == j-i+1)\n            {\n                ans = ans + (1<<p);\n            }\n        }\n        \n        return ans;\n    }\n    \n    public int minimumDifference(int[] nums, int k) \n    {\n        \n        int ans = Integer.MAX_VALUE;\n        int n = nums.length;\n        var dp = new int[n+1][32];\n        for(int i=0;i<n;i++)\n        {\n            int count =0, temp = nums[i];\n            while(temp>0)\n            {\n                dp[i+1][count] = dp[i][count] + temp%2;\n                count++;\n                temp = temp/2;\n            }\n        }\n        \n        int j = 0;\n        for(int i=0;i<n;i++)\n        {\n            j = Math.max(j,i);\n            while(j< n && compute(i, j , dp)>=k)\n            {\n                int temp = compute(i, j , dp);\n                ans = Math.min(ans, Math.abs(k -temp));\n                j++;\n            }\n            \n            if(j<n){\n                int temp = compute(i, j , dp);\n                ans = Math.min(ans, Math.abs(k -temp));\n            }\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": 1717299669.0
}