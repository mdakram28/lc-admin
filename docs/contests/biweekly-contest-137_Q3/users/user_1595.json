{
    "username": "tum_ho",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        // Helper function to find the top 3 values in a vector along with their indices\n        auto getTopThree = [](const vector<int>& values) -> vector<pair<int, int>> {\n            vector<pair<int, int>> topThree;\n            vector<pair<int, int>> indexedValues;\n            \n            for (int i = 0; i < values.size(); ++i) {\n                indexedValues.push_back({values[i], i});\n            }\n            \n            sort(indexedValues.rbegin(), indexedValues.rend()); // Sort in descending order\n            \n            for (int i = 0; i < 3 && i < indexedValues.size(); ++i) {\n                topThree.push_back(indexedValues[i]);\n            }\n            \n            return topThree;\n        };\n\n        // Find top 3 values for each row\n        vector<vector<pair<int, int>>> topRows(m);\n        for (int r = 0; r < m; ++r) {\n            topRows[r] = getTopThree(board[r]);\n        }\n\n        // Find top 3 values for each column\n        vector<vector<pair<int, int>>> topCols(n);\n        for (int c = 0; c < n; ++c) {\n            vector<int> colValues(m);\n            for (int r = 0; r < m; ++r) {\n                colValues[r] = board[r][c];\n            }\n            topCols[c] = getTopThree(colValues);\n        }\n\n        // Brute force all combinations of the top 3 values from rows and columns\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (const auto& [value1, c1] : topRows[r1]) {\n                        for (const auto& [value2, c2] : topRows[r2]) {\n                            if (c2 == c1) continue;\n                            for (const auto& [value3, c3] : topRows[r3]) {\n                                if (c3 == c1 || c3 == c2) continue;\n                                maxSum = max(maxSum, static_cast<long long>(value1) + value2 + value3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723909860",
    "subm_id": "1359208454"
}