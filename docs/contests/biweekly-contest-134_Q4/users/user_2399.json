{
    "username": "accelerator-a5",
    "submission": "template <typename T> class SparseTable {\n    using VT = vector<T>;\n    using VVT = vector<VT>;\n    using func_type = function<T(const T&, const T&)>;\n\n    VVT ST;\n\n    static T default_func(const T& t1, const T& t2) { return t1 & t2; }\n\n    func_type op;\n\npublic:\n    SparseTable(const vector<T>& v, func_type _func = default_func) {\n        op = _func;\n        int len = v.size(), l1 = ceil(log2(len)) + 1; // l1 = lg[len] + 1;\n        ST.assign(len, VT(l1, 0));\n        for (int i = 0; i < len; ++i) {\n            ST[i][0] = v[i];\n        }\n        for (int j = 1; j < l1; ++j) {\n            int pj = (1 << (j - 1));\n            for (int i = 0; i + pj < len; ++i) {\n                ST[i][j] = op(ST[i][j - 1], ST[i + (1 << (j - 1))][j - 1]);\n            }\n        }\n    }\n    // \u8fd4\u56de\u503c\uff0c\u5e76\u4e14\u533a\u95f4\u662f[l,r]\n    T query(int l, int r) {\n        int lt = r - l + 1;\n        int q = floor(log2(lt));\n        return op(ST[l][q], ST[r - (1 << q) + 1][q]);\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        SparseTable st(nums);\n        long long ans = 0;\n        for (int i = 0; i < n; ++i) {\n            if (nums[i] < k)\n                continue;\n            int l = i, r = n - 1, ri = i;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                int cur = st.query(i, mid);\n                if (cur == k) {\n                    ri = mid;\n                    l = mid + 1;\n                } else if(cur < k) {\n                    r = mid - 1;\n                } else{\n                    l = mid + 1;\n                }\n            }\n            l = i, r = n - 1;\n            int le = i;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                int cur = st.query(i, mid);\n                if (cur > k) {\n                    l = mid + 1;\n                } else if(cur == k){\n                    le = mid;\n                    r = mid - 1;\n                }else{\n                    r = mid - 1;\n                }\n            }\n            // cout << i << \" \" << pos << \"\\n\";\n            if(ri < le)continue;\n            if (ri == i) {\n                if (nums[i] == k) {\n                    ans++;\n                }\n                continue;\n            }\n            ans += (ri - le + 1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279493",
    "subm_id": "544567720"
}