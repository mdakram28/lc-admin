{
    "username": "liuliangcan",
    "submission": "class ZKW:\n    # n = 1\n    # size = 1\n    # log = 2\n    # d = [0]\n    # op = None\n    # e = 10 ** 15\n    \"\"\"\u81ea\u4f4e\u5411\u4e0a\u975e\u9012\u5f52\u5199\u6cd5\u7ebf\u6bb5\u6811\uff0c0_indexed\n    tmx = ZKW(pre, max, -2 ** 61)\n    \"\"\"\n    __slots__ = ('n', 'op', 'e', 'log', 'size', 'd')\n\n    def __init__(self, V, OP, E):\n        \"\"\"\n        V: \u539f\u6570\u7ec4\n        OP: \u64cd\u4f5c:max,min,sum\n        E: \u6bcf\u4e2a\u5143\u7d20\u9ed8\u8ba4\u503c\n        \"\"\"\n        self.n = len(V)\n        self.op = OP\n        self.e = E\n        self.log = (self.n - 1).bit_length()\n        self.size = 1 << self.log\n        self.d = [E for i in range(2 * self.size)]\n        for i in range(self.n):\n            self.d[self.size + i] = V[i]\n        for i in range(self.size - 1, 0, -1):\n            self.update(i)\n\n    def set(self, p, x):\n        # assert 0 <= p and p < self.n\n        update = self.update\n        p += self.size\n        self.d[p] = x\n        for i in range(1, self.log + 1):\n            update(p >> i)\n\n    def get(self, p):\n        # assert 0 <= p and p < self.n\n        return self.d[p + self.size]\n\n    def query(self, l, r):  # [l,r)\u5de6\u95ed\u53f3\u5f00\n        # assert 0 <= l and l <= r and r <= self.n\n        sml, smr, op, d = self.e, self.e, self.op, self.d\n\n        l += self.size\n        r += self.size\n\n        while l < r:\n            if l & 1:\n                sml = op(sml, d[l])\n                l += 1\n            if r & 1:\n                smr = op(d[r - 1], smr)\n                r -= 1\n            l >>= 1\n            r >>= 1\n        return self.op(sml, smr)\n\n    def all_query(self):\n        return self.d[1]\n\n    def update(self, k):\n        self.d[k] = self.op(self.d[k << 1], self.d[k << 1 | 1])\n\n    def __str__(self):\n        return str([self.get(i) for i in range(self.n)])\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        m = len(queries)\n        zkw = ZKW([0]*(3*m), max, 0)\n        sl = SortedList([0])\n        ans = []\n        for qs in queries:\n            if qs[0] == 1:\n                x = qs[1]\n                p = sl.bisect_left(x)\n                if p != len(sl):\n                    b = sl[p]\n                    zkw.set(b,  b-x)\n                    zkw.set(x , x - sl[p-1])\n                else:\n                    zkw.set(x , x - sl[-1])\n                sl.add(x)\n            else:\n                x,sz = qs[1:]\n                p = sl.bisect_left(x)\n                t = sl[p-1]\n                if x - t >= sz:\n                    ans.append(True)\n                    continue \n                if zkw.query(0,t+1)>=sz:\n                    ans.append(True)\n                else:\n                    ans.append(False)\n                \n        return ans\n                \n                \n                \n                \n                \n        ",
    "submit_ts": 1716649385.0
}