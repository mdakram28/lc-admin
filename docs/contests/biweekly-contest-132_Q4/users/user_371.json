{
    "username": "navedw2469",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int K) {\n        vector<vector<int>> dp(nums.size(), vector<int> (K + 1, 1));\n        \n        vector<int> prev(K + 1), prevMax(K + 1, 1);\n        map<pair<int, int>, int> mp;\n        int ans = 1;\n        \n        for(int i = 0; i < nums.size(); i++){\n            for(int k = K; ~k; k--){\n                if(k && i) dp[i][k] = max(dp[i][k], dp[prev[k - 1]][k - 1] + 1);\n                if(mp.find(make_pair(nums[i], k)) != mp.end()) dp[i][k] = max(dp[i][k], mp[make_pair(nums[i], k)] + 1);\n                mp[make_pair(nums[i], k)] = dp[i][k];\n                ans = max(ans, dp[i][k]);\n                if(dp[i][k] > prevMax[k]) {\n                    prev[k] = i;\n                    prevMax[k] = dp[i][k];\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717861343.0
}