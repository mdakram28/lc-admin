{
    "username": "jidnyasa123",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n            unordered_map<int, vector<int>> diffToMaxValues;\n        vector<int> maxValues;\n\n        // Step 1: Calculate differences and their corresponding max values\n        for (int i = 0; i < nums.size() / 2; i++) {\n            int left = nums[i];\n            int right = nums[nums.size() - i - 1];\n            int difference = abs(left - right);\n            int maxValue = max({left, right, k - left, k - right});\n            diffToMaxValues[difference].push_back(maxValue);\n            maxValues.push_back(maxValue);\n        }\n\n        int minChangesRequired = nums.size();\n        sort(maxValues.begin(), maxValues.end());\n\n        // Step 2: Calculate minimum changes for each difference\n        for (const auto& entry : diffToMaxValues) {\n            int difference = entry.first;\n            int changesNeeded = lower_bound(maxValues.begin(), maxValues.end(), difference) - maxValues.begin();\n            changesNeeded = changesNeeded * 2 + (nums.size() / 2 - changesNeeded);\n\n            for (const int maxValue : entry.second) {\n                if (maxValue < difference) {\n                    changesNeeded -= 2;\n                } else {\n                    changesNeeded -= 1;\n                }\n            }\n\n            minChangesRequired = min(minChangesRequired, changesNeeded);\n        }\n\n        return minChangesRequired;\n    }\n};",
    "submit_ts": "1721489684",
    "subm_id": "1327460668"
}