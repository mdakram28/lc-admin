{
    "username": "rodyli123",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        length = len(nums)\n        firsthalf = nums[:length//2]\n        secondhalf = nums[length//2:]\n        secondhalf = secondhalf[::-1]\n\n        hmap = defaultdict(int)\n        for f, s in zip(firsthalf, secondhalf):\n            hmap[abs(f-s)] += 1\n        lst = sorted(hmap.items(), key=lambda x: (x[1], -x[0]), reverse=True)\n        max_tuple = lst[0]\n        res = 0\n        \n        for f, s in zip(firsthalf, secondhalf):\n            diff = abs(f - s)\n            \n            if diff != max_tuple[0]:\n                need = max_tuple[0] - diff\n                upper = max(f, s) + need\n                lower = min(f, s) - need\n                if upper <= k or lower >= 0:\n                    res += 1\n                else:\n                    res += 2\n\n        if len(lst) > 2:\n            acc = 0\n            max_tuple = lst[1]\n            for f, s in zip(firsthalf, secondhalf):\n                diff = abs(f - s)\n                \n                if diff != max_tuple[0]:\n                    need = max_tuple[0] - diff\n                    upper = max(f, s) + need\n                    lower = min(f, s) - need\n                    if upper <= k or lower >= 0:\n                        acc += 1\n                    else:\n                        acc += 2\n            return min(acc, res)\n        return res\n                    \n        \n",
    "submit_ts": "1721489042",
    "subm_id": "1327441088"
}