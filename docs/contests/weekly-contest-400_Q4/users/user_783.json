{
    "username": "loganwatchorn",
    "submission": "func abs(a int) int {\n    if a >= 0 { return a }\n    return -a\n}\nfunc min(a,b int) int {\n    if a<b {return a}\n    return b\n}\n\ntype BitUnion struct {\n    Size int\n    Bits [32][]int\n}\nfunc (this *BitUnion) Pop(l int) {\n    for i := range this.Bits {\n        if len(this.Bits[i]) > 0 && this.Bits[i][0] == l {\n            this.Bits[i] = this.Bits[i][1:]\n        }\n    }\n    this.Size--\n}\nfunc (this *BitUnion) Push(r int, n int) {\n    i := 0\n    for n > 0 {\n        if n % 2 == 1 {\n            this.Bits[i] = append(this.Bits[i], r)\n        }\n        n /= 2\n        i++\n    }\n    this.Size++\n}\nfunc (this *BitUnion) asInt() int {\n    if this.Size == 0 { return 0 }\n    res := 0\n    n := 1\n    for i := range this.Bits {\n        if len(this.Bits[i]) == this.Size {\n            res += n\n        }\n        n *= 2\n    }\n    return res\n}\n\nfunc minimumDifference(nums []int, k int) int {\n    N := len(nums)\n    \n    bitUnion := &BitUnion{}\n    \n    l := 0\n    r := 0\n    minDiff := 10000000000\n    curr := 0\n    // iteration := 0\n    for l < N {\n        // iteration++\n        // fmt.Println(iteration)\n        for l < r && curr < k {\n            bitUnion.Pop(l)\n            curr = bitUnion.asInt()\n            minDiff = min(minDiff, abs(k - curr))\n            l++\n            // fmt.Println(l, r, curr)\n            // fmt.Println(bitUnion)\n        }\n        \n        if r < N {\n            bitUnion.Push(r, nums[r])\n            curr = bitUnion.asInt()\n            minDiff = min(minDiff, abs(k - curr))\n            r++\n            // fmt.Println(l, r, curr)\n            // fmt.Println(bitUnion)\n        } else if curr >= k {\n            break\n        }\n        // fmt.Println()\n    }\n    // fmt.Println(\"done\")\n    return minDiff\n}",
    "submit_ts": 1717300223.0
}