{
    "username": "hhhhxdu",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        // \u5b50\u6570\u7ec4\n        int n = nums.length;\n        int[] need = new int[n];\n        for (int i = 0; i < n; i++) {\n            need[i] = target[i] - nums[i];\n        }\n        // \u8d2a\u5fc3 \u6bcf\u6b21\u627e\u6700\u5927,\u6700\u5927\u662f\u6307\u8ba9\u66f4\u591a\u7684\u5b50\u6570\u7ec4\u53c2\u4e0e\n        long cnt = 0L;\n        for (int i = 0; i < n;) {\n            if (need[i] == 0) {\n                i++;\n                continue;\n            }\n            int direction = need[i] > 0 ? 1 : -1;\n            int min = Math.abs(need[i]);\n            int j = i;\n            while (j < n && direction * need[j] > 0) {\n                min = Math.min(Math.abs(need[j]), min);\n                j++;\n            }\n            cnt += min;\n            for (int k = i; k < j; k++) {\n                need[k] -= min * direction;\n            }\n\n        }\n\n        return cnt;\n\n    }\n}",
    "submit_ts": "1721532357",
    "subm_id": "548391891"
}