{
    "username": "sakshibhardwaj14",
    "submission": "class Solution {\n   \n    private static final int MOD = 1000000007;\n    private int[][][] memo;\n\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        int maxVal = 0;\n\n        // Find the maximum value in the nums array\n        for (int num : nums) {\n            maxVal = Math.max(maxVal, num);\n        }\n\n        // Initialize the memoization table\n        memo = new int[n][maxVal + 1][maxVal + 1];\n        for (int[][] row : memo) {\n            for (int[] col : row) {\n                Arrays.fill(col, -1);\n            }\n        }\n\n        // Start backtracking from index 0\n        return backtrack(nums, 0, 0, maxVal);\n    }\n\n    private int backtrack(int[] nums, int index, int prev1, int prev2) {\n        if (index == nums.length) {\n            return 1;\n        }\n\n        if (memo[index][prev1][prev2] != -1) {\n            return memo[index][prev1][prev2];\n        }\n\n        int count = 0;\n\n        for (int i = prev1; i <= nums[index]; i++) {\n            int j = nums[index] - i;\n            if (j <= prev2) {\n                count = (count + backtrack(nums, index + 1, i, j)) % MOD;\n            }\n        }\n\n        memo[index][prev1][prev2] = count;\n        return count % MOD;\n    }\n}",
    "submit_ts": "1723346116",
    "subm_id": "1351570530"
}