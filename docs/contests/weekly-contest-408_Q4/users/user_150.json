{
    "username": "LouisCheng",
    "submission": "class DisjSet: \n    def __init__(self, n): \n        # Constructor to create and \n        # initialize sets of n items \n        self.rank = [1] * n \n        self.parent = [i for i in range(n)]\n        self.touches = [[False, False] for i in range(n)]\n  \n  \n    # Finds set of given item x \n    def find(self, x): \n          \n        # Finds the representative of the set \n        # that x is an element of \n        if (self.parent[x] != x): \n              \n            # if x is not the parent of itself \n            # Then x is not the representative of \n            # its set, \n            self.parent[x] = self.find(self.parent[x]) \n              \n            # so we recursively call Find on its parent \n            # and move i's node directly under the \n            # representative of this set \n  \n        return self.parent[x] \n  \n  \n    # Do union of two sets represented \n    # by x and y. \n    def Union(self, x, y): \n          \n        # Find current sets of x and y \n        xset = self.find(x) \n        yset = self.find(y) \n  \n        # If they are already in same set \n        if xset == yset: \n            return\n\n        new = [self.touches[xset][0] or self.touches[yset][0], self.touches[xset][1] or self.touches[yset][1]]\n        self.touches[xset] = new\n        self.touches[yset] = new\n        # Put smaller ranked item under \n        # bigger ranked item if ranks are \n        # different \n        if self.rank[xset] < self.rank[yset]: \n            self.parent[xset] = yset \n  \n        elif self.rank[xset] > self.rank[yset]: \n            self.parent[yset] = xset \n  \n        # If ranks are same, then move y under \n        # x (doesn't matter which one goes where) \n        # and increment rank of x's tree \n        else: \n            self.parent[yset] = xset \n            self.rank[xset] = self.rank[xset] + 1\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def dis(x, y): return (x[0] - y[0]) ** 2 + (x[1] - y[1]) ** 2\n        union = DisjSet(len(circles))\n        for k in range(len(circles)):\n            find1 = union.find(k)\n            if dis(circles[k], [circles[k][0], 0]) <= circles[k][2] ** 2:\n                union.touches[find1][1] = True\n            if dis(circles[k], [X, circles[k][1]]) <= circles[k][2] ** 2:\n                union.touches[find1][1] = True\n            if dis(circles[k], [0, circles[k][1]]) <= circles[k][2] ** 2:\n                union.touches[find1][0] = True\n            if dis(circles[k], [circles[k][0], Y]) <= circles[k][2] ** 2:\n                union.touches[find1][0] = True\n            if union.touches[find1] == [True, True]: return False\n\n        for i in range(len(circles)):\n            for j in range(i + 1, len(circles)):\n                if dis(circles[i], circles[j]) <= (circles[i][2] + circles[j][2]) ** 2:\n                    union.Union(i, j)\n                    if union.touches[union.find(i)] == [True, True]: return False\n        return True\n        \n",
    "submit_ts": "1722136537",
    "subm_id": "1335737545"
}