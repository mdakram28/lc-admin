{
    "username": "SACHIN_MOURYA",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <cstring>\n#include <limits.h>\n\nusing namespace std;\n\nstruct Trie {\n    unordered_map<char, Trie*> child;\n    pair<bool, long long> isEnd; // (isEnd, minCost)\n\n    Trie() {\n        isEnd = {false, INT_MAX}; // Initialize with LLONG_MAX for comparison purposes\n    }\n};\n\nclass Solution {\npublic:\n    Trie* root;\n\n    Solution() {\n        root = new Trie(); // Initialize root pointer\n    }\n    \n    void insert(const string& s, long long cost) {\n        Trie* curr = root;\n        for (char c : s) {\n            if (!curr->child.count(c)) {\n                curr->child[c] = new Trie();\n            }\n            curr = curr->child[c];\n        }\n        curr->isEnd = {true, min(cost, curr->isEnd.second)};\n    }\n\n    long long dp[100000];\n\n    long long f(const string& s, int i) {\n        if (s.size() == i) return 0;\n        if (~dp[i]) return dp[i];\n        Trie* curr = root;\n        long long mn = INT_MAX;\n        for (int j = i; j < s.size(); j++) {\n            if (!curr->child.count(s[j])) {\n                break;\n            }\n            curr = curr->child[s[j]];\n            if (curr->isEnd.first) {\n                mn = min(mn, min (1000000000ll , curr->isEnd.second +0ll+ f(s, j + 1)));\n            }\n        }\n        return dp[i] = mn;\n    }\n\n    long long minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            insert(words[i], costs[i]);\n        }\n        memset(dp, -1, sizeof(dp));\n        long long len = f(target, 0);\n        if (len >= 1e9) return -1;\n        return len;\n    }\n};\n",
    "submit_ts": "1720322868",
    "subm_id": "1312361190"
}