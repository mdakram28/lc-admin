{
    "username": "mxc3",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        return minMaxDistToOrigin(points);\n    }\n    int cross(const vector<int>& a, const vector<int>& b, const vector<int>& c) {\n        return (b[0] - a[0]) * (c[1] - a[1]) - (c[0] - a[0]) * (b[1] - a[1]);\n    }\n\n    int manhattanDistance(const vector<int>& a, const vector<int>& b) {\n        return abs(a[0] - b[0]) + abs(a[1] - b[1]);\n    }\n\n    int minMaxDistToOrigin(vector<vector<int>>& points) {\n        int n = points.size();\n        sort(points.begin(), points.end());\n\n        multiset<int> st1, st2;\n        for (auto &point : points) {\n            int x = point[0], y = point[1];\n            st1.insert(x + y);\n            st2.insert(x - y);\n        }\n        int ret = INT_MAX;\n        for (auto &point : points) {\n            int x = point[0], y = point[1];\n            st1.erase(st1.find(x + y));\n            int a = *st1.rbegin() - *st1.begin();\n            st1.insert(x + y);\n            st2.erase(st2.find(x - y));\n            int b = *st2.rbegin() - *st2.begin();\n            st2.insert(x - y);\n            ret = min(ret, max(a, b));\n        }\n        return ret;\n    }\n};"
}