{
    "username": "sumi_62",
    "submission": "class Solution {\n    int width, height;\n\npublic:\n    bool ispossibletoreach(int from, int to, int r) {\n        return std::sqrt(1LL * from * from + 1LL * to * to) <= r;\n    }\n\n\n    void dfs(int idx, int &ends, std::vector<bool> &vis, const std::vector<std::vector<int>> &graph, const std::vector<std::vector<int>>& cr) {\n        if (cr[idx][0] + cr[idx][2] >= width){\n            ends |= (1 << 3);\n        } \n        \n        if (cr[idx][0] - cr[idx][2] <= 0){\n            ends |= (1 << 1);\n        } \n        if (cr[idx][1] - cr[idx][2] <= 0){\n             ends |= (1 << 0);\n        }\n        if (cr[idx][1] + cr[idx][2] >= height){\n             ends |= (1 << 2);\n        }\n        \n        for (int neighbor : graph[idx]) {\n            if (vis[neighbor]) {\n                vis[neighbor] = false;\n                dfs(neighbor, ends, vis, graph, cr);\n            }\n        }\n    }\n\n    bool canReachCorner(int w, int h, std::vector<std::vector<int>>& cr) {\n        width = w;\n        height = h;\n        int n = cr.size();\n        \n        // Create the adjacency list graph\n        std::vector<std::vector<int>> graph(n);\n        for (int i = 0; i < n; ++i) {\n            if (ispossibletoreach(cr[i][0], cr[i][1], cr[i][2])){\n                return false;\n            } \n            for (int j = i + 1; j < n; ++j) {\n                int dx = std::abs(cr[i][0] - cr[j][0]);\n                int dy = std::abs(cr[i][1] - cr[j][1]);\n                int totalrad = cr[i][2] + cr[j][2];\n                if (ispossibletoreach(dx, dy, totalrad)) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i); // Since the graph is undirected\n                }\n            }\n        }\n\n        std::vector<bool> vis(n, true);\n        for (int i = 0; i < n; ++i) {\n            if (vis[i]) {\n                int ends = 0;\n                vis[i] = false;\n                dfs(i, ends, vis, graph, cr);\n                if (((ends & (1 << 0)) && (ends & (1 << 1)))\n                ||((ends & (1 << 3)) && (ends & (1 << 1)))\n                ||((ends & (1 << 3)) && (ends & (1 << 2)))\n                ||((ends & (1 << 0)) && (ends & (1 << 2)))){\n                     return false;\n                }\n               \n            }\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722138684",
    "subm_id": "1335797028"
}