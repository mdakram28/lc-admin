{
    "username": "saourabhmittal07",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    bool isEndOfWord;\n\n    TrieNode() : cost(INT_MAX), isEndOfWord(false) {}\n};\n\nclass Solution {\npublic:\n    TrieNode* root;\n    \n    Solution() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->isEndOfWord = true;\n        node->cost = min(node->cost, cost);  // If there are multiple costs, take the minimum\n    }\n    \n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        int n = t.size();\n        \n        // Build the Trie\n        for (int i = 0; i < w.size(); i++) {\n            insert(w[i], c[i]);\n        }\n        \n        vector<long long> dp(n + 1, INT_MAX);\n        dp[n] = 0;  // Base case: cost of reaching the end is 0\n        \n        for (int i = n - 1; i >= 0; i--) {\n            TrieNode* node = root;\n            for (int j = i; j < n && node; j++) {\n                if (node->children.find(t[j]) == node->children.end()) break;\n                node = node->children[t[j]];\n                if (node->isEndOfWord) {\n                    dp[i] = min(dp[i], node->cost + dp[j + 1]);\n                }\n            }\n        }\n        \n        return dp[0] == INT_MAX ? -1 : dp[0];\n    }\n};\n",
    "submit_ts": "1720324728",
    "subm_id": "1312406602"
}