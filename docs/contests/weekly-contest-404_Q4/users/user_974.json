{
    "username": "shauryamalik432",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int diameter_tree1 = treeDiameter(edges1);\n        int diameter_tree2 = treeDiameter(edges2);\n\n        // Calculate the minimum possible diameter of the new tree\n        int min_diameter = max({diameter_tree1, diameter_tree2, \n                                (diameter_tree1 + 1) / 2 + (diameter_tree2 + 1) / 2 + 1});\n        return min_diameter;\n    }\n    \nprivate:\n    int treeDiameter(const vector<vector<int>>& edges) {\n        if (edges.empty()) {\n            return 0;\n        }\n\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        auto bfs = [&](int start) {\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthest_node = start;\n\n            while (!q.empty()) {\n                int node = q.front(); q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n            return make_pair(farthest_node, dist[farthest_node]);\n        };\n\n        int farthest_node = bfs(0).first;\n        int diameter = bfs(farthest_node).second;\n\n        return diameter;\n    }\n};\n",
    "submit_ts": 1719715335.0
}