{
    "username": "user8557",
    "submission": "\nstruct SegmentNode {\n    SegmentNode(int l, int r) : leftRange(l), rightRange(r) {}\n    int leftRange;\n    int rightRange;\n    SegmentNode *lchild = nullptr;\n    SegmentNode *rchild = nullptr;\n    int maxSpace = 0;\n};\n\nint getMid(int leftRange, int rightRange) {\n    return (leftRange + rightRange) / 2;\n}\n\nint getMaxSpace(SegmentNode *node) {\n    if (!node) {\n        return 0;\n    }\n    return node->maxSpace;\n}\n\nvoid updateMaxSpace(SegmentNode *node) {\n    if (!node) {\n        return;\n    }\n    node->maxSpace = max(getMaxSpace(node->lchild), getMaxSpace(node->rchild));\n}\n\nvoid decreaseNode(SegmentNode *root, int x, int newLen) {\n    if (root->leftRange == root->rightRange) {\n        root->maxSpace = newLen;\n        return;\n    }\n    int mid = getMid(root->leftRange, root->rightRange);\n    if (x <= mid) {\n        decreaseNode(root->lchild, x, newLen);\n    } else {\n        decreaseNode(root->rchild, x, newLen);\n    }\n    updateMaxSpace(root);\n}\n\nvoid insertNode(SegmentNode *root, int x, int len) {\n    if (root->leftRange == root->rightRange) {\n        root->maxSpace = len;\n        return;\n    }\n    int mid = getMid(root->leftRange, root->rightRange);\n    if (x <= mid) {\n        if (!root->lchild) {\n            root->lchild = new SegmentNode(root->leftRange, mid);\n        }\n        insertNode(root->lchild, x, len);\n    } else {\n        if (!root->rchild) {\n            root->rchild = new SegmentNode(mid + 1, root->rightRange);\n        }\n        insertNode(root->rchild, x, len);\n    }\n    updateMaxSpace(root);\n}\n\n// \u6240\u6709\u5c0f\u4e8ex\u7684\u6700\u5927\u503c\nint searchMaxLen(SegmentNode *root, int x) {\n    if (x < 0) {\n        return 0;\n    }\n    if (!root) {\n        return 0;\n    }\n    if (root->leftRange >= x) {\n        return 0;\n    }\n    if (root->rightRange < x) {\n        return root->maxSpace;\n    }\n    return max(searchMaxLen(root->lchild, x), searchMaxLen(root->rchild, x));\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        set<int> obs; obs.insert(0); obs.insert(50000);\n        SegmentNode *root = new SegmentNode(0, 50000);\n        insertNode(root, 0, 50000);\n        insertNode(root, 50000, 0);\n        for (auto q : queries) {\n            int op = q[0];\n            if (op == 1) {\n                int x = q[1];\n                obs.insert(x);\n\n                auto iter = obs.find(x);\n                iter--;\n                int leftX = *iter;\n                decreaseNode(root, leftX, x - leftX);\n\n                iter++; iter++;\n                int rightX = *iter;\n                insertNode(root, x, rightX - x);\n            } else {\n                int x = q[1];\n                int sz = q[2];\n                auto lastObsIter = obs.upper_bound(x);\n                lastObsIter--;\n                int lastObsX = *lastObsIter;\n                if (x - lastObsX >= sz) {\n                    res.push_back(true);\n                } else {\n                    int maxLenBefore = searchMaxLen(root, lastObsX);\n                    res.push_back(maxLenBefore >= sz);\n                }\n            }\n        }\n        return res;\n    }\n};\n",
    "submit_ts": "1716651215",
    "subm_id": "534774174"
}