{
    "username": "Ernest Lu",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n  vector dp(n + 5, vector<bool>(k, false));\n  vector parent(n + 1, vector<int>(k, -1));\n  vector<int> p10(n + 1, 1);\n  vector<int> mod_val(n + 1, 0);\n  for (int i = 1; i <= n; i++)\n    p10[i] = (p10[i - 1] * 10LL) % k;\n\n  dp[(n + 1) / 2 + 1][0] = true;\n  for (int i = (n + 1) / 2 - 1; i >= 0; i--) {\n    int idx = i + 1;\n    int md = (n % 2 == 1 and i == ((n + 1) / 2 - 1) ? p10[i]\n                                                    : p10[i] + p10[n - 1 - i]);\n    md %= k;\n    mod_val[i] = md;\n\n    for (int d = 9; d >= 0; d--) {\n      if (i == 0 and d == 0)\n        continue;\n\n      for (int p = 0; p < k; p++) {\n        if (!dp[idx + 1][p])\n          continue;\n\n        int new_delta = (p + md * d) % k;\n        dp[idx][new_delta] = true;\n        if (parent[idx][new_delta] == -1)\n          parent[idx][new_delta] = d;\n      }\n    }\n  }\n\n  int cur_delta = 0, cur_id = 1;\n  string ans(n, '0');\n  while (cur_id <= (n + 1) / 2) {\n    int c = parent[cur_id][cur_delta];\n    if (n % 2 == 1 and cur_id == (n + 1) / 2) {\n      ans[cur_id - 1] = c + '0';\n    } else {\n      ans[cur_id - 1] = c + '0';\n      ans[n - 1 - (cur_id - 1)] = c + '0';\n    }\n\n    int new_delta = ((cur_delta - c * mod_val[cur_id - 1]) % k + k) % k;\n    cur_id++;\n    cur_delta = new_delta;\n  }\n  return ans;\n}\n};",
    "submit_ts": "1723950002",
    "subm_id": "1359734559"
}