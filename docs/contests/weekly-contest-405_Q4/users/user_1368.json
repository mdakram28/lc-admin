{
    "username": "jvm29",
    "submission": "class TrieNode {\n    List<TrieNode> children;\n    int value;\n    boolean isEndOfWord;\n\n    TrieNode() {\n        children = new ArrayList<>(26); \n        for (int i = 0; i < 26; i++) {\n            children.add(null);\n        }\n        value = Integer.MAX_VALUE;\n        isEndOfWord = false;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children.get(index) == null) {\n                node.children.set(index, new TrieNode());\n            }\n            node = node.children.get(index);\n        }\n        node.value = Math.min(cost, node.value);\n        node.isEndOfWord = true;\n    }\n    public boolean search(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int index = c - 'a';\n            if (node.children.get(index) == null) {\n                return false;\n            }\n            node = node.children.get(index);\n        }\n        return node.isEndOfWord;\n    }\n    public boolean startsWith(String prefix) {\n        TrieNode node = root;\n        for (char c : prefix.toCharArray()) {\n            int index = c - 'a';\n            if (node.children.get(index) == null) {\n                return false;\n            }\n            node = node.children.get(index);\n        }\n        return true;\n    }\n    public TrieNode getRoot() {\n        return root;\n    }\n}\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie trie = new Trie();\n        int length = target.length();\n        int[] minimumCost = new int[length + 1];\n        \n         for (int i = 0; i <= length; i++) {\n            minimumCost[i] = Integer.MAX_VALUE;\n        }\n        \n         for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        minimumCost[0] = 0;\n        \n         for (int i = 0; i < length; i++) {\n            if (minimumCost[i] == Integer.MAX_VALUE) continue;\n\n            TrieNode node = trie.getRoot();\n            for (int j = i; j < length; j++) {\n                char c = target.charAt(j);\n                int index = c - 'a';\n                if (node.children.get(index) == null) break;\n                node = node.children.get(index);\n                if (node.isEndOfWord) {\n                    minimumCost[j + 1] = Math.min(minimumCost[j + 1], minimumCost[i] + node.value);\n                }\n            }\n        }\n\n        return minimumCost[length] == Integer.MAX_VALUE ? -1 : minimumCost[length];\n    }\n}\n",
    "submit_ts": "1720324335",
    "subm_id": "1312397017"
}