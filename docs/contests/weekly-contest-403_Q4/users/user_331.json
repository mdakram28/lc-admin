{
    "username": "iivankon",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        n, m = len(grid[0]), len(grid)\n        \n        ones = []\n        for i in range(n):\n            for j in range(m):\n                if grid[j][i] == 1:\n                    ones.append((i, j))\n                    \n        best_1 = self.find_best_res(ones, n, m)\n        ones_transposed = [(j, i) for i, j in ones]\n        best_2 = self.find_best_res(ones_transposed, m, n)\n        return min(best_1, best_2)\n        \n        \n    def find_best_res(self, ones, n, m):\n        res = float('inf')\n        for i_part in range(n - 1):\n            left, right = self.partition_vertically(ones, i_part)\n            # vertical\n            one = left\n            for i_part_2 in range(i_part, n - 1):\n                two, three = self.partition_vertically(right, i_part_2)\n                candidate = self.find_result(one) + self.find_result(two) + self.find_result(three)\n                res = min(candidate, res)\n            for j_part in range(m - 1):\n                two, three = self.partition_horizontally(right, j_part)\n                candidate = self.find_result(one) + self.find_result(two) + self.find_result(three)\n                res = min(candidate, res)\n            one = right\n            for j_part in range(m - 1):\n                two, three = self.partition_horizontally(left, j_part)\n                candidate = self.find_result(one) + self.find_result(two) + self.find_result(three)\n                res = min(candidate, res)\n        return res\n        \n    def partition_vertically(self, ones, i_part):\n        left = []\n        right = []\n        for i, j in ones:\n            if i <= i_part:\n                left.append((i, j))\n            else:\n                right.append((i, j))\n        return left, right\n    \n    def partition_horizontally(self, ones, j_part):\n        left = []\n        right = []\n        for i, j in ones:\n            if j <= j_part:\n                left.append((i, j))\n            else:\n                right.append((i, j))\n        return left, right\n        \n    def find_result(self, ones):\n        if not ones:\n            return 0\n        ones.sort()\n        min_col, max_col = ones[0][0], ones[-1][0]\n        ones.sort(key=lambda x: x[1])\n        min_row, max_row = ones[0][1], ones[-1][1]\n        return (max_row - min_row + 1) * (max_col - min_col + 1)\n        \n        \n        \n        \n        ",
    "submit_ts": "1719114395",
    "subm_id": "1297345932"
}