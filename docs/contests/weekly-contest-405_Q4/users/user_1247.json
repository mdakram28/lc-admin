{
    "username": "captainprice27",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(int size) : size(size) {\n        tree.resize(4 * size, INT_MAX);\n    }\n    \n    void update(int index, int value) {\n        update(0, 0, size - 1, index, value);\n    }\n    \n    int query(int left, int right) {\n        return query(0, 0, size - 1, left, right);\n    }\n    \nprivate:\n    vector<int> tree;\n    int size;\n    \n    void update(int node, int start, int end, int index, int value) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (index <= mid) {\n                update(2 * node + 1, start, mid, index, value);\n            } else {\n                update(2 * node + 2, mid + 1, end, index, value);\n            }\n            tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n    \n    int query(int node, int start, int end, int left, int right) {\n        if (right < start || left > end) {\n            return INT_MAX;\n        }\n        if (left <= start && right >= end) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        return min(query(2 * node + 1, start, mid, left, right), query(2 * node + 2, mid + 1, end, left, right));\n    }\n};\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; // Stores pairs of (index, cost) where word ends\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new TrieNode();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        SegmentTree segTree(n + 1);\n        segTree.update(0, 0);\n        \n        for(int h=0;h<30;h++){}\n        for(int h=0;h<30;h++){}\n        for(int h=0;h<30;h++){}\n        for(int h=0;h<30;h++){}\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) \n            {\n                if (!node->children.count(target[j])) break; \n                \n                for(int h=0;h<30;h++){}\n                for(int h=0;h<30;h++){}\n                for(int h=0;h<30;h++){}\n                \n                node = node->children[target[j]];\n                \n                for (auto& p : node->wordEnds) \n                {\n                    int wrd_indx = p.first;\n                    int wrd_cost = p.second;\n                    \n                    \n                    for(int h=0;h<30;h++){}\n                    for(int h=0;h<30;h++){}\n                    for(int h=0;h<30;h++){}\n                    int thala = 21;\n                    long long prayas = 10e7+21 ;\n                    \n                    int len = words[wrd_indx].size();\n                    if (i + len <= n) \n                    {\n                        int new_cost = dp[i] + wrd_cost;\n                        if (new_cost < dp[i + len]) \n                        {\n                            dp[i + len] = new_cost;\n                            \n                            for(int h=0;h<30;h++){}\n                            for(int h=0;h<30;h++){}\n                            \n                            segTree.update(i + len, new_cost);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323464",
    "subm_id": "1312376201"
}