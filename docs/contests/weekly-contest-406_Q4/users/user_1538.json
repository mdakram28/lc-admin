{
    "username": "gaurav_592",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, char>> pq;\n\n        for (int i = 0; i < horizontalCut.size(); i++) {\n            pq.push({horizontalCut[i], 'H'});\n        }\n\n        for (int j = 0; j < verticalCut.size(); j++) {\n            pq.push({verticalCut[j], 'V'});\n        }\n\n        int h = 1;\n        int v = 1;\n\n        long long cost = 0;\n\n        while(!pq.empty()) {\n            int k = pq.top().first;\n            char type = pq.top().second;\n            pq.pop();\n            \n            if(type == 'H'){\n                cost += k * v;\n                h++;\n            } \n            else{\n                cost += k * h;\n                v++;\n            }\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720926016",
    "subm_id": "1320273361"
}