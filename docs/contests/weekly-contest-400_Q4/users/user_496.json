{
    "username": "Satyam_86770",
    "submission": "class Solution {\npublic:\n    \n    vector<int> arr;\nvector<int> segTree;\n\nvoid build(int ind, int start, int end){\n    if(start == end) // leaf node\n    {\n        segTree[ind] = arr[start];\n        return;\n    }\n    int mid = (start + end) / 2;\n    build(2 * ind, start, mid);\n    build(2 * ind + 1, mid + 1, end);\n    segTree[ind] = (segTree[2 * ind] & segTree[2 * ind + 1]);\n}\n\nint query(int ind, int start, int end, int left, int right){\n    // completely overlapping\n    if(start >= left && end <= right){\n        return segTree[ind];\n    }\n    if(start > right || end < left){\n        return ((1<<30)-1);\n    }\n    int mid = (start + end) / 2;\n    int ansLeft = query(2 * ind, start, mid, left, right);\n    int ansRight = query(2 * ind + 1, mid + 1, end, left, right);\n    return (ansLeft & ansRight);\n}\n\n\n    int minimumDifference(vector<int>& v, int k) {\n        \n        int n=v.size();\n        vector<int>adj[30];\n        \n        arr.resize(n,0);\n        segTree.resize((4*n)+1,0);\n\n        for(int i=0;i<n;i++)\n        {\n          arr[i]=v[i];\n        }\n        \n        build(1,0,n-1);\n\n\n        int ans=1e9;\n        \n        for(int i=0;i<n;i++)\n        {\n             int l=i;\n             int r=n-1;\n             while(l<=r)\n             {\n                int mid=(l+r)/2;\n                int curAnd=query(1,0,n-1,i,mid);\n                ans=min(ans,abs(curAnd-k));\n                if(curAnd<=k)\n                {\n                    r=mid-1;\n                }\n                else{\n                    l=mid+1;\n                }\n                \n             }\n        }\n        return ans;  \n    }\n};",
    "submit_ts": "1717298346",
    "subm_id": "1274775777"
}