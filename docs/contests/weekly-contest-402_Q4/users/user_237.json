{
    "username": "abhinayakolla1111",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n    \n    def build(self, arr, start, end, node):\n        if start == end:\n            self.tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            self.build(arr, start, mid, 2 * node + 1)\n            self.build(arr, mid + 1, end, 2 * node + 2)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def update(self, start, end, idx, value, node):\n        if start == end:\n            self.tree[node] = value\n        else:\n            mid = (start + end) // 2\n            if start <= idx <= mid:\n                self.update(start, mid, idx, value, 2 * node + 1)\n            else:\n                self.update(mid + 1, end, idx, value, 2 * node + 2)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query(self, start, end, l, r, node):\n        if r < start or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_query = self.query(start, mid, l, r, 2 * node + 1)\n        right_query = self.query(mid + 1, end, l, r, 2 * node + 2)\n        return left_query + right_query\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        is_peak = [0] * n\n        \n        def is_peak_at(i):\n            if i == 0 or i == n - 1:\n                return 0\n            return 1 if nums[i - 1] < nums[i] > nums[i + 1] else 0\n        \n        for i in range(1, n - 1):\n            is_peak[i] = is_peak_at(i)\n        \n        seg_tree = SegmentTree(n)\n        seg_tree.build(is_peak, 0, n - 1, 0)\n        \n        results = []\n        \n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if li == ri:\n                    results.append(0)\n                else:\n                    results.append(seg_tree.query(0, n - 1, li + 1, ri - 1, 0))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                for i in range(max(1, indexi - 1), min(n - 1, indexi + 2)):\n                    new_peak = is_peak_at(i)\n                    seg_tree.update(0, n - 1, i, new_peak, 0)\n        \n        return results\n\n\n",
    "submit_ts": 1718506912.0
}