{
    "username": "wanderingCicada",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.rank = [0] * n\n        self.rep = [i for i in range(n)]\n        self.uniqueReps = set(self.rep)\n    \n    def find(self, n):\n        if self.rep[n] != n:\n            self.rep[n] = self.find(self.rep[n])\n        return self.rep[n]\n\n    def same(self, a, b):\n        return self.find(a) == self.find(b)\n\n    def union(self, a, b):\n        if self.same(a, b):\n            return\n        aRep = self.find(a)\n        bRep = self.find(b)\n\n        higher = aRep\n        lower = bRep\n        if self.rank[aRep] == self.rank[bRep]:\n            self.rank[aRep] += 1\n        elif self.rank[aRep] < self.rank[bRep]:\n            higher, lower = lower, higher\n        self.rep[lower] = higher\n        self.uniqueReps.remove(lower)\n\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def overLapRectangle(circle1):\n            x1, y1, r1 = circle1\n            if x1 <= X and y1 <= Y:\n                return True\n            elif x1 <= X and y1 > Y:\n                return r1 >= y1 - Y\n            elif y1 <= Y and x1 > X:\n                return r1 >= x1 - X\n            else:\n                return overLap(circle1, (X, Y, 0))\n\n        def overLap(circle1, circle2):\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            dist = math.sqrt(abs(x1 - x2) ** 2 + abs(y1 - y2) ** 2)\n            return dist <= r1 + r2\n        def overLapX(circle1, xCoordinate):\n            x1, y1, r1 = circle1\n            return abs(x1 - xCoordinate) <= r1\n        \n        def overLapY(circle1, yCoordinate):\n            x1, y1, r1 = circle1\n            return abs(y1 - yCoordinate) <= r1\n\n        total = len(circles)\n        xAxis = total\n        xBorder = total + 1\n        yAxis = total + 2\n        yBorder = total + 3\n\n        unionFind = UnionFind(total + 4)\n        for index, circle in enumerate(circles):\n            if not overLapRectangle(circle):\n                continue\n            for i in range(index + 1, len(circles)):\n                otherCircle = circles[i]\n                if overLap(circle, otherCircle):\n                    unionFind.union(index, i)\n            if overLapX(circle, 0):\n                unionFind.union(index, xAxis)\n            if overLapX(circle, X):\n                unionFind.union(index, xBorder)\n            if overLapY(circle, 0):\n                unionFind.union(index, yAxis)\n            if overLapY(circle, Y):\n                unionFind.union(index, yBorder)\n        \n        if unionFind.same(xAxis, xBorder):\n            return False\n        if unionFind.same(yAxis, yBorder):\n            return False\n        if unionFind.same(xBorder, yBorder):\n            return False\n        if unionFind.same(xAxis, yAxis):\n            return False\n\n        return True",
    "submit_ts": "1722137657",
    "subm_id": "1335770020"
}