{
    "username": "ianwong1999",
    "submission": "class Solution {\npublic:\n    unsigned long long dp[55][55];\n    int waysToReachStair(int k) {\n        dp[0][0] = 1;\n        \n        for (int i = 1; i <= 35; i++) {\n            dp[i][0] = 1;\n            for (int j = 1; j <= i; j++) {\n                dp[i][j] = dp[i - 1][j] + dp[i - 1][j - 1];\n            }\n        }\n        \n        int res = 0;\n        \n        if (k == 0 || k == 1) res++;\n        \n        for (int i = 0; i <= 30; i++) {\n            long long ub = 1;\n            \n            for (int j = 0; j <= i; j++) {\n                ub += (1ll << j);\n            }\n            \n            long long lb = ub - (i + 2);\n            \n            if (lb > k) continue;\n            if (ub < k) continue;\n            \n            res += dp[i + 2][ub - k];\n//            cout << i << endl;\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1716087143.0
}