{
    "username": "rishabhteli14",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    int minimumCost(string target, vector<string>& arr, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < arr.size(); ++i) {\n            insert(root, arr[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n//         int n = target.size();\n//         vector<int> dp(n + 1, INT_MAX);\n//         dp[0] = 0;\n\n//         for (int i = 0; i < n; ++i) {\n//             if (dp[i] == INT_MAX) continue;\n//             for (int j = 0; j < arr.size(); ++j) {\n//                 string str = arr[j];\n//                 int num = costs[j];\n//                 int len = str.length();\n//                 if (i + len <= n && target.substr(i, len) == str) {\n//                     dp[i + len] = min(dp[i + len], dp[i] + num);\n//                 }\n//             }\n//         }\n\n//         return dp[n] == INT_MAX ? -1 : dp[n];\n        \n        \n        // int n = target.size();\n        // vector<int> dp(n+1, INT_MAX);\n        // dp[0] = 0;\n        // unordered_map<string, int> ump;\n        // for (int i = 0; i < arr.size(); ++i) {\n        //     if (ump.find(arr[i]) == ump.end()) {\n        //         ump[arr[i]] = costs[i];\n        //     } else {\n        //         ump[arr[i]] = min(ump[arr[i]], costs[i]);\n        //     }\n        // }\n        // for (int i = 0; i < n; ++i) {\n        //     if (dp[i] == INT_MAX) continue;\n        //     for (auto& it : ump) {\n        //         string str = it.first;\n        //         int num = it.second;\n        //         int len = str.length();\n        //         if (i + len <= n && target.substr(i, len) == str) {\n        //             dp[i + len] = min(dp[i + len], dp[i] + num);\n        //         }\n        //     }\n        // }\n        // return dp[n]!=INT_MAX?dp[n]:-1;\n    }\n};",
    "submit_ts": "1720323206",
    "subm_id": "1312369939"
}