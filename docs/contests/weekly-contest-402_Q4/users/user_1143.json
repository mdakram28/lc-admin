{
    "username": "anonys",
    "submission": "from sortedcontainers import SortedSet\n\nclass Solution:\n    def countOfPeaks(self, nums: list[int], queries: list[list[int]]) -> list[int]:\n\n        def checkPeak(nums, n, idx):\n            if idx < 1 or idx >= n-1:\n                return False\n            if nums[idx] > nums[idx-1] and nums[idx] > nums[idx+1]:\n                return True\n            return False\n\n\n        sl = SortedSet()\n        n = len(nums)\n        for i in range(1, n-1):\n            if checkPeak(nums, n, i): # i is a peak\n                sl.add(i)\n\n        ans = []\n        for query in queries:\n            if query[0] == 2:\n                # Update\n                idx = query[1]\n                val = query[2]\n\n                nums[idx] = val\n                # Check idx, idx-1, idx+1\n                if checkPeak(nums, n, idx):\n                    sl.add(idx)\n                else:\n                    sl.discard(idx)\n\n                if checkPeak(nums, n, idx-1):\n                    sl.add(idx-1)\n                else:\n                    sl.discard(idx-1)\n\n                if checkPeak(nums, n, idx+1):\n                    sl.add(idx+1)\n                else:\n                    sl.discard(idx+1)\n\n            else:\n                # countOfPeaks\n                l = query[1] + 1\n                r = query[2] - 1\n                if l > r:\n                    ans.append(0)\n                    continue\n\n                id_left = sl.bisect_left(l)\n                id_right = sl.bisect_right(r)\n                ans.append(id_right - id_left)\n\n        return ans\n\n\n\n\n\ntemp = Solution()\nnums = [4,1,4,2,1,5]; queries = [[2,2,4],[1,0,2],[1,0,4]]\nans = temp.countOfPeaks(nums, queries)\nprint(ans)\n",
    "submit_ts": "1718509652",
    "subm_id": "1289713790"
}