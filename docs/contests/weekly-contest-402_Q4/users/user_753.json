{
    "username": "mahesh_193",
    "submission": "class SegmentTree {\n    vector<int> segTree;\n    int len;\npublic:\n    SegmentTree(vector<int>& nums) {\n        len = nums.size();\n        segTree = vector<int>(4 * len, 0);\n        buildTree(1, 0, len - 1, nums);\n    }\n    \n    int buildTree(int ind, int l, int r, vector<int>& nums) {\n        if (l == r) {\n            return segTree[ind] = nums[l];\n        }\n        int mid = l + (r - l) / 2;\n        return segTree[ind] = buildTree(2 * ind, l, mid, nums) + buildTree(2 * ind + 1, mid + 1, r, nums);\n    }\n    \n    \n    void updateHelper(int ind, int l, int r, int index, int val) {\n        if (l > index || index > r) {\n            return;\n        }\n        if (l == index && r == index) {\n            segTree[ind] = val;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        updateHelper(2 * ind, l, mid, index, val);\n        updateHelper(2 * ind + 1, mid + 1, r, index, val);\n        segTree[ind] = segTree[2 * ind] + segTree[2 * ind + 1];\n    }\n    \n    \n    void update(int ind, int val) {\n        updateHelper(1, 0, len - 1, ind, val);\n    }\n    \n    int queryHelper(int ind, int l, int r, int ql, int qr) {\n        if (ql > r || l > qr) {\n            return 0;\n        }\n        if (l >= ql && r <= qr) {\n            return segTree[ind];\n        }\n        int mid = l + (r - l) / 2;\n        return queryHelper(2 * ind, l, mid, ql, qr) + queryHelper(2 * ind + 1, mid + 1, r, ql, qr);\n    }\n    \n    int query(int l, int r) {\n        if (l > r) {\n            return 0;\n        }\n        return queryHelper(1, 0, len - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int len = nums.size();\n        int numQueries = queries.size();\n        vector<int> vals(len, 0);\n        for (int i = 1; i < len - 1; ++i) {\n            vals[i] = (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n        }\n        SegmentTree sg(vals);\n        vector<int> responses;\n        for (int i = 0; i < numQueries; ++i) {\n            vector<int> query = queries[i];\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                responses.push_back(sg.query(l + 1, r - 1));\n            } else {\n                int ind = query[1], val = query[2];\n                nums[ind] = val;\n                for (int j = ind - 1; j <= ind + 1; ++j) {\n                    if (j <= 0 || j >= len - 1) {\n                        continue;\n                    }\n                    vals[j] = (nums[j] > nums[j - 1] && nums[j] > nums[j + 1]);\n                    sg.update(j, vals[j]);\n                }\n            }\n        }\n        return responses;\n    }\n};",
    "submit_ts": 1718508379.0
}