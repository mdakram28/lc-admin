{
    "username": "STARs_56789",
    "submission": "#ifndef LOCAL\n#pragma GCC optimize(\"Ofast\", \"unroll-loops\")\n#endif\n\n#include <bits/stdc++.h>\n\nnamespace mitsuha{\ntemplate <typename T, typename U>\nstd::ostream &operator<<(std::ostream &os, const std::pair<T, U> &A) {\n    os << A.first << \" \" << A.second;\n    return os;\n}\n\ntemplate <typename T>\nstd::ostream &operator<<(std::ostream &os, const std::vector<T> &A) {\n    for (size_t i = 0; i < A.size(); i++) {\n        if (i) os << \" \";\n        os << A[i];\n    }\n    return os;\n}\n\nvoid print() {\n    std::cout << \"\\n\";\n    std::cout.flush();\n}\n\ntemplate <class Head, class... Tail>\nvoid print(Head &&head, Tail &&... tail) {\n    std::cout << head;\n    if (sizeof...(Tail)) std::cout << \" \";\n    print(std::forward<Tail>(tail)...);\n}\n}\n\nnamespace mitsuha {\ntemplate <class T> bool chmin(T& x, const T& y) { \n    return y >= x ? false : (x = y, true); \n}\ntemplate <class T> bool chmax(T& x, const T& y) { \n    return y <= x ? false : (x = y, true); \n}\ntemplate <class T> constexpr T fld(const T x, const T y) { \n    T q = x / y, r = x % y; return q - ((x ^ y) < 0 and (r != 0)); \n}\ntemplate <class T> constexpr T cld(const T x, const T y) { \n    T q = x / y, r = x % y; return q + ((x ^ y) > 0 and (r != 0)); \n}\ntemplate <class T> constexpr T rem(const T x, const T y) { \n    return x - y * fld(x, y); \n}\ntemplate <class Iterable> void settify(Iterable& a) { \n    std::sort(a.begin(), a.end()), a.erase(std::unique(a.begin(), a.end()), a.end()); \n}\ntemplate <size_t D> struct Dim : std::array<int, D> {\n    template <typename ...Ints> Dim(const Ints& ...ns) : \n        std::array<int, D>::array{ static_cast<int>(ns)... } {}\n};\ntemplate <typename ...Ints> Dim(const Ints& ...) -> Dim<sizeof...(Ints)>;\ntemplate <class T, size_t D, size_t I = 0>\nauto ndvec(const Dim<D> &ns, const T& value = {}) {\n    if constexpr (I + 1 < D) {\n        return std::vector(ns[I], ndvec<T, D, I + 1>(ns, value));\n    } else {\n        return std::vector<T>(ns[I], value);\n    }\n}\n}\n\nnamespace mitsuha {\nusing str = std::string;\nusing int128 = __int128;\nusing uint128 = unsigned __int128;\ntemplate <class T> using min_priority_queue \n                            = std::priority_queue<T, std::vector<T>, std::greater<T>>;\ntemplate <class T> using max_priority_queue \n                            = std::priority_queue<T, std::vector<T>, std::less<T>>;\n}\nnamespace mitsuha { \n    const std::vector<std::string> Yes = {\"No\", \"Yes\"};\n    const std::vector<std::string> YES = {\"NO\", \"YES\"};\n}\n \n#ifndef __COUNTER__\n#define __COUNTER__ __LINE__\n#endif\n\n#define TL (long long)\n \n#define OVERLOAD5(a, b, c, d, e, ...) e\n#define REP1_0(b, c) REP1_1(b, c)\n#define REP1_1(b, c) for (long long REP_COUNTER_##c = 0; REP_COUNTER_##c < TL(b); ++REP_COUNTER_##c)\n#define REP1(b) REP1_0(b, __COUNTER__)\n#define REP2(i, b) for (long long i = 0; i < TL(b); ++i)\n#define REP3(i, a, b) for (long long i = TL(a); i < TL(b); ++i)\n#define REP4(i, a, b, c) for (long long i = TL(a); i < TL(b); i += TL(c))\n#define For(...) OVERLOAD5(__VA_ARGS__, REP4, REP3, REP2, REP1)(__VA_ARGS__)\n#define Frr(i, a) for (long long i = TL(a)-1; i >= 0; --i)\n\n#define All(iterable) std::begin(iterable), std::end(iterable)\n#define len(iterable) TL iterable.size()\n#define elif else if\n\n#define KBIT(a, k) (a & (1ULL << k))\n\n#define Assert(x) void(0);\n\nusing namespace mitsuha;\nusing namespace std;\n \nconstexpr int iinf = std::numeric_limits<int>::max() / 2;\nconstexpr long long linf = std::numeric_limits<long long>::max() / 2;\n\nnamespace mitsuha{\ntemplate <typename X>\nstruct Monoid_Add {\n    using value_type = X;\n    static constexpr X op(const X &x, const X &y) noexcept { return x + y; }\n    static constexpr X inverse(const X &x) noexcept { return -x; }\n    static constexpr X power(const X &x, long long n) noexcept { return X(n) * x; }\n    static constexpr X unit() { return X(0); }\n    static constexpr bool commute = true;\n};\n} // namespace mitsuha\n\nnamespace mitsuha{\ntemplate <typename Monoid>\nstruct FenwickTree {\n    using G = Monoid;\n    using E = typename G::value_type;\n    int n;\n\n    FenwickTree() {}\n    FenwickTree(int n) { build(n); }\n    template <typename F>\n    FenwickTree(int n, F f) {\n        build(n, f);\n    }\n    FenwickTree(const vector<E>& v) { build(v); }\n\n    E prod_all() const { return total; }\n    E sum_all() const { return total; }\n    E sum(int k) { return prod(k); }\n    E prod(int k) const { return prefix_prod(k); }\n    E prefix_prod(int k) const {\n        chmin(k, n);\n        E ret = G::unit();\n        for (; k > 0; k -= k & -k) ret = G::op(ret, dat[k - 1]);\n        return ret;\n    }\n    E sum(int L, int R) { return prod(L, R); }\n    E prod(int L, int R) const {\n        chmax(L, 0), chmin(R, n);\n        if (R <= L) return 0;\n        if (L == 0) return prefix_prod(R);\n        assert(0 <= L && L <= R && R <= n);\n        E pos = G::unit(), neg = G::unit();\n        while (L < R) { pos = G::op(pos, dat[R - 1]), R -= R & -R; }\n        while (R < L) { neg = G::op(neg, dat[L - 1]), L -= L & -L; }\n        return G::op(pos, G::inverse(neg));\n    }\n\n    void add(int k, E x) { multiply(k, x); }\n    void multiply(int k, E x) {\n        static_assert(G::commute);\n        total = G::op(total, x);\n        for (++k; k <= n; k += k & -k) dat[k - 1] = G::op(dat[k - 1], x);\n    }\n\n    auto operator[](int i) {\n        struct {\n            int i;\n            FenwickTree<Monoid>& ft;\n            operator E() const { return ft.prod(i, i + 1); }\n            auto& operator++() { return *this += 1; }\n            auto& operator--() { return *this -= 1; }\n            auto& operator+=(E val) { ft.multiply(i, val); return *this; }\n            auto& operator-=(E val) { ft.multiply(i, -val); return *this; }\n            auto& operator*=(E val) { E cur = ft.prod(i, i + 1); ft.multiply(i, cur * val - cur); return *this; }\n            auto& operator/=(E val) { E cur = ft.prod(i, i + 1); ft.multiply(i, cur / val - cur); return *this; }\n            auto& operator%=(E val) { E cur = ft.prod(i, i + 1); ft.multiply(i, cur % val - cur); return *this; }\n            auto& operator =(E val) { E cur = ft.prod(i, i + 1); ft.multiply(i, val - cur); return *this; }\n        } obj{ i, *this };\n        return obj;\n    }\n    E operator()(int l, int r) const { return prod(l, r); }\n\n    vector<E> get_all() {\n        vector<E> res(n);\n        For(i, n) res[i] = prod(i, i + 1);\n        return res;\n    }\n\n    // use only when check is monotonic,\n    // i.e using monoid_add all vals >= 0\n    template <class F>\n    int max_right(int L, const F& check) {\n        assert(check(G::unit()));\n        E s = G::unit();\n        int i = L;\n        int k = [&]() {\n            while (1) {\n                if (i % 2 == 1) { s = G::op(s, G::inverse(dat[i - 1])), i -= 1; }\n                if (i == 0) { return (n == 0 ? -1 : 31 - __builtin_clz(n)) + 1; }\n                int k = (i == 0 ? -1 : __builtin_ctz(i)) - 1;\n                if (i + (1 << k) > n) return k;\n                E t = G::op(s, dat[i + (1 << k) - 1]);\n                if (!check(t)) { return k; }\n                s = G::op(s, G::inverse(dat[i - 1])), i -= i & -i;\n            }\n        }();\n        while (k) {\n            --k;\n            if (i + (1 << k) - 1 < len(dat)) {\n                E t = G::op(s, dat[i + (1 << k) - 1]);\n                if (check(t)) { i += (1 << k), s = t; }\n            }\n        }\n        return i;\n    }\n\n    // check(i, x)\n    // use only when check is monotonic,\n    // i.e using monoid_add all vals >= 0\n    template <class F>\n    int max_right_with_index(int L, const F& check) {\n        assert(check(L, G::unit()));\n        E s = G::unit();\n        int i = L;\n        int k = [&]() {\n            while (1) {\n                if (i % 2 == 1) { s = G::op(s, G::inverse(dat[i - 1])), i -= 1; }\n                if (i == 0) { return (n == 0 ? -1 : 31 - __builtin_clz(n)) + 1; }\n                int k = (i == 0 ? -1 : __builtin_ctz(i)) - 1;\n                if (i + (1 << k) > n) return k;\n                E t = G::op(s, dat[i + (1 << k) - 1]);\n                if (!check(i + (1 << k), t)) { return k; }\n                s = G::op(s, G::inverse(dat[i - 1])), i -= i & -i;\n            }\n        }();\n        while (k) {\n            --k;\n            if (i + (1 << k) - 1 < len(dat)) {\n                E t = G::op(s, dat[i + (1 << k) - 1]);\n                if (check(i + (1 << k), t)) { i += (1 << k), s = t; }\n            }\n        }\n        return i;\n    }\n\n    // use only when check is monotonic,\n    // i.e using monoid_add all vals >= 0\n    template <class F>\n    int min_left(int R, const F& check) {\n        assert(check(G::unit()));\n        E s = G::unit();\n        int i = R;\n        int k = 0;\n        while (i > 0 && check(s)) {\n            s = G::op(s, dat[i - 1]);\n            k = (i == 0 ? -1 : __builtin_ctz(i));\n            i -= i & -i;\n        }\n        if (check(s)) {\n            assert(i == 0);\n            return 0;\n        }\n        while (k) {\n            --k;\n            E t = G::op(s, G::inverse(dat[i + (1 << k) - 1]));\n            if (!check(t)) { i += (1 << k), s = t; }\n        }\n        return i + 1;\n    }\n\n    // access by index k in fenwick set\n    int kth(E k, int L = 0) {\n        return max_right(L, [&k](E x) -> bool { return x <= k; });\n    }\n\nprivate:\n    vector<E> dat;\n    E total;\n    \npublic:\n    void build(int m) {\n        n = m;\n        dat.assign(m, G::unit());\n        total = G::unit();\n    }\n    void build(const vector<E>& v) {\n        build(len(v), [&](int i) -> E { return v[i]; });\n    }\n    template <typename F>\n    void build(int m, F f) {\n        n = m;\n        dat.clear();\n        dat.reserve(n);\n        total = G::unit();\n        for(int i = 0; i < n; ++i) { dat.emplace_back(f(i)); }\n        for (int i = 1; i <= n; ++i) {\n            int j = i + (i & -i);\n            if (j <= n) dat[j - 1] = G::op(dat[i - 1], dat[j - 1]);\n        }\n        total = prefix_prod(m);\n    }\n};\n\ntemplate<class Monoid>\nstd::ostream &operator<<(std::ostream &out, const FenwickTree<Monoid> &_ft){\n    auto ft = _ft;\n    out << \"[\";\n    for(auto i = 0; i < ft.n; ++ i){\n        out << ft[i];\n        if(i != ft.n - 1) out << \", \";\n    }\n    return out << ']';\n}\n} // namespace mitsuha\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        \n        int n = len(nums);\n\n        FenwickTree<Monoid_Add<int>> Ft(n, [&](int i){\n            if (i == 0 or i == n - 1) return 0;\n            return int(nums[i - 1] < nums[i] and nums[i] > nums[i + 1]);\n        });\n\n        vector<int> ret;\n        \n        auto get = [&](int i){\n            if (i == 0 or i == n - 1) return 0;\n            return int(nums[i - 1] < nums[i] and nums[i] > nums[i + 1]);\n        };\n\n        For(x, len(queries)){\n            if (queries[x][0] == 1){\n                ret.push_back(Ft.prod(queries[x][1] + 1, queries[x][2]));\n            } else{\n                nums[queries[x][1]] = queries[x][2];\n                For(i, queries[x][1] - 1, queries[x][1] + 2){\n                    if (i <= 0 or i >= n - 1){\n                        if (i < 0 or i > n - 1) continue;\n                        Ft[i] = 0;\n                    } else{\n                        Ft[i] = int(nums[i - 1] < nums[i] and nums[i] > nums[i + 1]);\n                    }\n                }\n            }\n        }\n        return ret;\n    }\n};\n\n",
    "submit_ts": 1718507352.0
}