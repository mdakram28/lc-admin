{
    "username": "yash_107",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        map<int, vector<int>> diffMap;\n        vector<int> allXValues;\n        for (int i = 0; i < n / 2; ++i) \n        {\n            int num1 = nums[i];\n            int num2 = nums[n - i - 1];\n            int diff = abs(num1 - num2);\n            int maxX = max({num1, num2, k - num1, k - num2});\n            diffMap[diff].push_back(maxX);\n            allXValues.push_back(maxX);\n        }\n        sort(allXValues.begin(), allXValues.end());\n        int minChanges = n;\n        for (auto& [diff, xValues] : diffMap) \n        {\n            sort(xValues.begin(), xValues.end());\n            int countLessThanDiff = lower_bound(allXValues.begin(), allXValues.end(), diff) - allXValues.begin();\n            int totalChanges = countLessThanDiff * 2 + (n / 2 - countLessThanDiff);\n            for (int x : xValues) \n            {\n                if (x < diff) \n                {\n                    totalChanges -= 2;\n                } \n                else \n                {\n                    totalChanges -= 1;\n                }\n            }\n            minChanges = min(minChanges, totalChanges);\n        }\n        return minChanges;\n    }\n};",
    "submit_ts": "1721489090",
    "subm_id": "1327442546"
}