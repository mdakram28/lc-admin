{
    "username": "johnep",
    "submission": "from collections import Counter\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        diff_c = Counter()\n        i = 0\n        n = len(nums)\n        while i < n - i - 1:\n            diff_c[abs(nums[i] - nums[n - i - 1])] += 1\n            i += 1\n\n\n        def min_most_common(c):\n            most_common = list(c.most_common())\n            print(most_common)\n            res = most_common[0][0]\n            for key, occ in most_common:\n                #print(key)\n                if c[key] != c[res]:\n                    return res\n                else:\n                    res = min(key, res)\n            return res\n\n  \n        #x = min_most_common(diff_c)\n        #print(x)\n        \n        def get_count(x):\n            i = 0\n            count = 0\n            while i < n - i - 1:\n                if abs(nums[i] - nums[n - i - 1]) != x:\n                    if nums[i] >= x or k >= nums[i] + x or nums[n-i-1] >= x or k >= nums[n-i-1] + x:\n                        count += 1\n                        #print(\"here1\", i, n-i-1, nums[i], nums[n-i-1])\n                    else:\n                        count += 2\n                        #print('here2')\n\n                i += 1\n            return count\n\n\n        most_common = list(diff_c.most_common())\n        prev_freq = most_common[0][1]\n        min_count = math.inf\n        for key, freq in most_common:\n            count = get_count(key)\n            if count > min_count and freq != prev_freq:\n                break\n\n            min_count = min(min_count, count)\n\n\n        return min_count\n        #return 0",
    "submit_ts": "1721488642",
    "subm_id": "1327428701"
}