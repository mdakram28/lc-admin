{
    "username": "Algeo3603",
    "submission": "class Solution {\npublic:\n    int sum(int x) {\n        return x * (x + 1) / 2;\n    }\n    \n    long long getWays(int target, int start_term, int end_term) {\n        const int MOD = 1e9 + 7;\n        \n        vector<long long> dp(target + 1);\n        dp[0] = 1;\n        \n        for (int term = start_term; term <= end_term; term++) {\n            // calculate the window of size t, and then slide it backwards\n            long long window = 0;\n            int left = target + 1, right = target;\n            for (int i = 0; i < term; i++) {\n                left--;\n                window += dp[left];\n                window %= MOD;\n                if (left == 0) break;\n            }\n            \n            for (int t = target; t > 0; t--) {\n                if (left != 0) {\n                    left--;\n                    window += dp[left];\n                    window %= MOD;\n                }\n                window = (window - dp[right] + MOD) % MOD;\n                right--;\n                dp[t] += window;\n                dp[t] %= MOD;\n            }            \n        }\n        \n        return dp[target];\n        \n        return 0ll;\n    }\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int Q = requirements.size();\n        sort(requirements.begin(), requirements.end());\n        \n        long long ANSWER = 1;\n        const int MOD = 1e9 + 7;\n        \n        int prev_end = -1, inversions_done = 0;\n        \n        for (int q = 0; q < Q; q++) {\n            int curr_end = requirements[q][0];\n            int target_inv = requirements[q][1];\n            \n            if (curr_end == prev_end) return 0;\n            \n            int inv_req = target_inv - inversions_done;\n            if (inv_req < 0) return 0;\n            if (inv_req > sum(curr_end) - sum(prev_end)) return 0;\n            \n            // get number of ways possible\n            // cout << getWays(inv_req, prev_end + 1, curr_end) << \"\\n\";\n            \n            ANSWER *= getWays(inv_req, prev_end + 1, curr_end);\n            ANSWER %= MOD;\n            \n            prev_end = curr_end;\n            inversions_done = target_inv;\n        }\n        \n        return ANSWER;\n    }\n};",
    "submit_ts": 1719071893.0
}