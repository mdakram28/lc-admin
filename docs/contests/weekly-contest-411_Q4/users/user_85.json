{
    "username": "q1w2e3r4",
    "submission": "class Solution {\npublic:\n    struct TreeArr{\n        long long v[100005];\n        int n;\n        void init(int _n){\n            n = _n;\n            for(int i=1;i<=n;i++) v[i] = 0;\n        }\n        void add(int x, int val){\n            for(int i=x;i<=n;i+=i&-i) v[i] += val;\n        }\n        long long query(int x){\n            long long res = 0;\n            for(int i=x;i;i-=i&-i) res += v[i];\n            return res;\n        }\n    }cnt, sum;\n\n    struct Query{\n        int l,r,id;\n        long long ans = 0;\n        bool operator < (const Query &rhs) const{\n            return r < rhs.r;\n        }\n    };\n\n    int nxt0[100005], nxt1[100005];\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        cnt.init(n+1); sum.init(n+1);\n\n        vector<Query> q;\n        int Q = queries.size();\n        for(int i=0;i<Q;i++){\n            q.push_back({queries[i][0]+1, queries[i][1]+1, i, 0});\n        }\n        sort(q.begin(), q.end());\n\n        queue<int> q0,q1;\n        q0.push(n+1), q1.push(n+1);\n        for(int i=n;i>=1;i--){\n            if(s[i-1] == '0') q0.push(i);\n            else q1.push(i);\n            if(q0.size() > k+1) q0.pop();\n            if(q1.size() > k+1) q1.pop();\n\n            nxt0[i] = q0.front();\n            nxt1[i] = q1.front();\n        }\n\n        typedef pair<int,int> PII;\n        vector<PII> v; \n        for(int i=1;i<=n;i++){\n            v.push_back({max(nxt0[i], nxt1[i]) - 1, i});\n        }\n        sort(v.begin(), v.end());\n        // for(auto [a,b]: v){\n        //     cout << a << \" \" << b << endl;\n        // }\n\n        int i1 = 0, i2 = 0;\n        for(int lim = 1; lim <= n; lim ++){\n            while(i1 < n && v[i1].first <= lim){\n                cnt.add(v[i1].second, 1);\n                sum.add(v[i1].second, v[i1].first);\n                // cout << \"add\" << v[i1].second << \" \" << v[i1].first << endl;\n                i1 ++;\n            }\n            // cout << \"!!\" << sum.query(n) << endl;\n            while(i2 < Q && q[i2].r <= lim){\n                int l = q[i2].l, r = q[i2].r;\n                long long tmp = 0;\n                tmp += (long long)lim * (r - l + 1 - (cnt.query(r) - cnt.query(l-1)));\n                // cout << l << \" \" << r << \" \" << tmp << \" \";\n                tmp += sum.query(r) - sum.query(l-1);\n                // cout << tmp << \" \" << endl;\n                tmp -= 1LL * (l+r-2) * (r-l+1) / 2;\n                q[i2].ans = tmp;\n\n                i2 ++;\n            }\n        }\n\n        vector<long long> ans(Q);\n        for(int i=0;i<Q;i++){\n            // cout << q[i].id << \" \" << q[i].ans << endl;\n            ans[q[i].id] = q[i].ans;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723952265",
    "subm_id": "556410570"
}