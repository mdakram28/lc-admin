{
    "username": "Yaksh Darji",
    "submission": "import java.util.*;\n\npublic class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        long maxSum = Long.MIN_VALUE;\n        \n        // Best values and columns tracking\n        long[][] bestValues = new long[m][3];\n        int[][] bestColumns = new int[m][3];\n\n        // Populate best values and columns for each row\n        for (int i = 0; i < m; ++i) {\n            List<int[]> colValues = new ArrayList<>();\n            for (int j = 0; j < n; ++j) {\n                colValues.add(new int[]{board[i][j], j});\n            }\n            colValues.sort((a, b) -> Long.compare(b[0], a[0])); // Sort in descending order\n\n            for (int k = 0; k < 3 && k < n; ++k) {\n                bestValues[i][k] = colValues.get(k)[0];\n                bestColumns[i][k] = colValues.get(k)[1];\n            }\n        }\n\n        // Try all combinations of 3 different rows\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (int i = 0; i < 3; ++i) {\n                        for (int j = 0; j < 3; ++j) {\n                            if (bestColumns[r2][j] == bestColumns[r1][i]) continue;\n                            for (int k = 0; k < 3; ++k) {\n                                if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue;\n\n                                long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                                maxSum = Math.max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        \n        int[][] board1 = {\n            {-3, 1, 1, 1},\n            {-3, 1, -3, 1},\n            {-3, 2, 1, 1}\n        };\n        System.out.println(solution.maximumValueSum(board1)); // Output: 4\n\n        int[][] board2 = {\n            {1, 2, 3},\n            {4, 5, 6},\n            {7, 8, 9}\n        };\n        System.out.println(solution.maximumValueSum(board2)); // Output: 15\n\n        int[][] board3 = {\n            {1, 1, 1},\n            {1, 1, 1},\n            {1, 1, 1}\n        };\n        System.out.println(solution.maximumValueSum(board3)); // Output: 3\n    }\n}\n",
    "submit_ts": "1723910051",
    "subm_id": "1359215490"
}