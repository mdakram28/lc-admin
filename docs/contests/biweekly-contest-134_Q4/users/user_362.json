{
    "username": "dnuj4097",
    "submission": "from bisect import bisect_right\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        \n        n = len(nums)\n        vmax = max(max(nums), k)\n        m = len(bin(vmax)) - 2\n        \n        loc = [[] for _ in range(m)]\n        for i,x in enumerate(nums):\n            bin_x = bin(x)[2:].zfill(m)\n            for j,y in enumerate(bin_x):\n                if y == '0': loc[j].append(i)\n        #print('loc =', loc)\n        bin_k = bin(k)[2:].zfill(m)\n        \n        ans = 0\n        for i,x in enumerate(nums):\n            bin_x = bin(x)[2:].zfill(m)\n            #print(i, bin_x, bin_k)\n            lb, ub = i, n\n            for j in range(m):\n                xj, kj = bin_x[j], bin_k[j]\n                if kj == '0':\n                    if xj == '1':\n                        idx = bisect_right(loc[j], i)\n                        if idx < len(loc[j]):\n                            lb = max(lb, loc[j][idx])\n                        else: lb = n\n                else:\n                    if xj == '0': lb = n\n                    else:\n                        idx = bisect_right(loc[j], i)\n                        if idx < len(loc[j]):\n                            ub = min(ub, loc[j][idx])\n                if lb >= ub: break\n            #print(lb, ub)\n            if lb < ub: ans += ub - lb\n        return ans",
    "submit_ts": "1720278996",
    "subm_id": "1311732919"
}