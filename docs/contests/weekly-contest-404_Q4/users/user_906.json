{
    "username": "Scoopsicus",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        \n        \n        # https://leetcode.com/problems/minimum-height-trees/description/\n        def findMinHeightTrees(n, edges):\n            \n            \n            if len(edges) == 0:\n                return (0, -1)\n\n            # edge cases\n            if n == 1:\n                return (1, -1)\n            if n <= 2:\n                # return [i for i in range(n)]\n                return (1, -1)\n\n            # Build the graph with the adjacency list\n            neighbors = [set() for i in range(n)]\n            for start, end in edges:\n                neighbors[start].add(end)\n                neighbors[end].add(start)\n\n            # Initialize the first layer of leaves\n            leaves = []\n            for i in range(n):\n                if len(neighbors[i]) == 1:\n                    leaves.append(i)\n                    \n                    \n                    \n            depthResult = 0\n\n            # Trim the leaves until reaching the centroids\n            remaining_nodes = n\n            while remaining_nodes > 2:\n                depthResult += 1\n                \n                remaining_nodes -= len(leaves)\n                new_leaves = []\n                # remove the current leaves along with the edges\n                while leaves:\n                    leaf = leaves.pop()\n                    # the only neighbor left for the leaf node\n                    neighbor = neighbors[leaf].pop()\n                    # remove the only edge left\n                    neighbors[neighbor].remove(leaf)\n                    if len(neighbors[neighbor]) == 1:\n                        new_leaves.append(neighbor)\n\n                # prepare for the next round\n                leaves = new_leaves\n\n            # The remaining nodes are the centroids of the graph\n            # return leaves\n            # print(\"AAAAAAA\")\n            # print(depthResult)\n            if len(leaves) > 1:\n                # print(\"BBBBBBBB\")\n                return (depthResult+1, depthResult+1+depthResult)\n            # hasMultiple\n            # return (depthResult, )\n            # print(\"CCCCCCCC\")\n            return (depthResult, depthResult+depthResult)\n        \n        \n        \n        \n\n        N = len(edges1)+1\n        M = len(edges2)+1\n        \n        # print()\n        \n        (height1, span1) = findMinHeightTrees(N, edges1)\n        (height2, span2) = findMinHeightTrees(M, edges2)\n        # print(height1)\n        # print(height2)\n        return max(height1+height2+1, span1, span2)\n        # return height1 + height2 + 1\n",
    "submit_ts": 1719719487.0
}