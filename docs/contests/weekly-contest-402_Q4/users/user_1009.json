{
    "username": "FightEveryDay",
    "submission": "class Solution {\n      static class SegmentTree {\n        private int[] st;\n        private int[] nums;\n\n        public SegmentTree(int[] nums) {\n            int n = nums.length;\n            this.nums = nums;\n            st = new int[4 * n];\n            build(0, 0, n - 1);\n        }\n\n        private void build(int node, int start, int end) {\n            if (start == end) {\n                st[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                st[node] = st[2 * node + 1] + st[2 * node + 2];\n            }\n        }\n\n        public void update(int idx, int value) {\n            if (nums[idx] == value) return;\n            nums[idx] = value;\n            update(0, 0, nums.length - 1, idx);\n            if (idx > 0) update(0, 0, nums.length - 1, idx - 1);\n            if (idx < nums.length - 1) update(0, 0, nums.length - 1, idx + 1);\n        }\n\n        private void update(int node, int start, int end, int idx) {\n            if (start == end) {\n                st[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (idx <= mid) {\n                    update(2 * node + 1, start, mid, idx);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx);\n                }\n                st[node] = st[2 * node + 1] + st[2 * node + 2];\n            }\n        }\n\n        public int query(int L, int R) {\n            return query(0, 0, nums.length - 1, L, R);\n        }\n\n        private int query(int node, int start, int end, int L, int R) {\n            if (R < start || end < L) {\n                return 0;\n            }\n            if (L <= start && end <= R) {\n                return st[node];\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = query(2 * node + 1, start, mid, L, R);\n            int rightQuery = query(2 * node + 2, mid + 1, end, L, R);\n            return leftQuery + rightQuery;\n        }\n\n        private boolean isPeak(int idx) {\n            if (idx <= 0 || idx >= nums.length - 1) {\n                return false;\n            }\n            return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n        }\n    }\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> res = new ArrayList<>();\n        SegmentTree st = new SegmentTree(nums);\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                int temp = st.query(li, ri);\n                if (temp > 0 && li != 0 && st.isPeak(li)) {\n                    temp--;\n                }\n                if (temp > 0 && ri != nums.length - 1 && st.isPeak(ri)) {\n                    temp--;\n                }\n                res.add(temp);\n            } else {\n                st.update(query[1], query[2]);\n            }\n        }\n        return res;\n    }\n}\n\n/*\n[5,4,8,6]\n[[1,2,2],[1,1,2],[2,1,6]]\n[0,0]\n*/",
    "submit_ts": "1718508404",
    "subm_id": "1289680315"
}