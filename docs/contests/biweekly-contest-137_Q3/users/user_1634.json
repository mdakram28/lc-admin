{
    "username": "ajith47csrn",
    "submission": "class Solution(object):\n    def maximumValueSum(self, board):\n        m = len(board)\n        n = len(board[0])\n        max_sum = float('-inf')\n\n        # Precompute the best 3 values and their columns for each row\n        row_best_cols = []\n        for i in range(m):\n            # Get all (value, column) pairs for the current row\n            row_vals = [(board[i][j], j) for j in range(n)]\n            # Sort by value descending and take the top 3\n            row_vals.sort(reverse=True, key=lambda x: x[0])\n            row_best_cols.append(row_vals[:3])\n        \n        # Try all combinations of 3 different rows\n        for row_comb in combinations(range(m), 3):\n            # Get all combinations of columns from the selected rows\n            for c1 in row_best_cols[row_comb[0]]:\n                for c2 in row_best_cols[row_comb[1]]:\n                    if c2[1] == c1[1]:\n                        continue\n                    for c3 in row_best_cols[row_comb[2]]:\n                        if c3[1] == c1[1] or c3[1] == c2[1]:\n                            continue\n                        # Calculate the sum for this combination of rows and columns\n                        current_sum = c1[0] + c2[0] + c3[0]\n                        max_sum = max(max_sum, current_sum)\n\n        return max_sum\n\nboard = [[-3,1,1,1],[-3,1,-3,1],[-3,2,1,1]]\nres = Solution().maximumValueSum(board)\nprint(res)\n        ",
    "submit_ts": "1723908470",
    "subm_id": "1359154063"
}