{
    "username": "daystzh",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        return count(nums, k) - count(nums, k + 1);\n    }\n    private int get(int[][] f, int l, int r) {\n        if(l > r) return -1;\n        int ret = 0;\n        for(int j= 0; j < 32; j++) {\n            int c = f[r][j] - (l == 0 ? 0 : f[l - 1][j]);\n            if(c == r - l + 1) ret += (1 << j);\n        }\n        return ret;\n    }\n    private long count(int[] nums, int k) {\n        int n = nums.length;\n        int[][] f= new int[n][32];\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < 32; j++) {\n                int x = nums[i] & (1 << j);\n                if(x > 0) {\n                    f[i][j] = i == 0? 1 : f[i - 1][j] + 1;\n                } else {\n                    f[i][j] = i == 0 ? 0 : f[i - 1][j];\n                }\n            }\n        }\n        int l = 0;\n        long ret = 0;\n        for(int i = 0; i < n; i++) {\n            while(l <= i && get(f, l, i) < k)l++;\n            ret += (i - l + 1);\n        }\n        return ret;\n    }\n}",
    "submit_ts": "1720277811",
    "subm_id": "544558921"
}