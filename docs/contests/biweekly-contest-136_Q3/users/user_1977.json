{
    "username": "_Knight_11",
    "submission": "class DisjointSet{\n\n    public:\n    vector<int> parent,rank,size;\n\n    DisjointSet(int n){\n        parent.resize(n+1);\n        rank.resize(n+1,0);\n        size.resize(n+1,0);\n\n        for(int i=0;i<=n;i++){\n            parent[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    int findUPar(int node){\n        if(node == parent[node])return node;\n\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    void union_by_rank(int u, int v){\n        int ulp_u = findUPar(u);\n        int ulp_v = findUPar(v);\n\n        if(ulp_u == ulp_v)return;\n\n        if(rank[ulp_u] < rank[ulp_v]){\n            parent[ulp_u] = ulp_v;\n        }\n        else if(rank[ulp_u] > rank[ulp_v]){\n            parent[ulp_v] = ulp_u;\n        }\n        else{\n            parent[ulp_v] = ulp_u;\n            rank[ulp_u]++;\n        }\n    }\n\n    void union_by_size(int u, int v){\n        int ulp_u = findUPar(u);\n        int ulp_v = findUPar(v);\n\n        if(ulp_u == ulp_v)return;\n\n        if(size[ulp_u] < size[ulp_v]){\n            parent[ulp_u] = ulp_v;\n            size[ulp_v] += size[ulp_u];\n        }\n        else{\n            parent[ulp_v] = ulp_u;\n            size[ulp_u] += size[ulp_v];\n        }\n    }\n};\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int cnt = 0;\n        \n        if (n % 2 == 1 && m % 2 == 1) {\n\n            if (grid[n / 2][m / 2] == 1) {\n                cnt += 1;\n            }\n        }\n\n        vector<int> arr(3, 0);\n\n\n        if (n % 2 == 1) {\n            int a = 0, b = m - 1;\n            while (a < b) {\n                int ind = grid[n / 2][a] + grid[n / 2][b];\n                arr[ind] += 1;\n                a += 1;\n                b -= 1;\n            }\n        }\n\n\n        if (m % 2 == 1) {\n            int a = 0, b = n - 1;\n            while (a < b) {\n                int ind = grid[a][m / 2] + grid[b][m / 2];\n                arr[ind] += 1;\n                a += 1;\n                b -= 1;\n            }\n        }\n\n        if (arr[2] % 2 == 1) {\n            if (arr[1] > 0) {\n                cnt += arr[1];\n            } else {\n               cnt += 2;\n            }\n        } else {\n            cnt += arr[1];\n        }\n\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int p = grid[i][j];\n                int q = grid[n - 1 - i][j];\n                int r = grid[i][m - 1 - j];\n                int s = grid[n - 1 - i][m - 1 - j];\n\n                int ind = p+q+r+s;\n\n                if (ind != 0 && ind != 4) {\n                    cnt += min(ind, 4 - ind);\n                }\n            }\n        }\n\n        return cnt;\n    }\n};",
    "submit_ts": "1722700115",
    "subm_id": "1343232149"
}