{
    "username": "foolishNebula",
    "submission": "\nclass Solution {\npublic:\n    static const int mod = 1000000007;\n    static const int max_inversions = 400;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> req_map;\n        for (const auto& req : requirements) {\n            req_map[req[0] + 1] = req[1];\n        }\n\n        vector<vector<int>> perm_counts(n + 1, vector<int>(max_inversions + 1, 0));\n        perm_counts[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= max_inversions; ++inv) {\n                for (int new_pos = 0; new_pos < length; ++new_pos) {\n                    int prev_inv = inv - new_pos;\n                    if (prev_inv >= 0) {\n                        perm_counts[length][inv] += perm_counts[length - 1][prev_inv];\n                        perm_counts[length][inv] %= mod;\n                    }\n                }\n            }\n\n            if (req_map.find(length) != req_map.end()) {\n                int target_inv = req_map[length];\n                for (int inv = 0; inv <= max_inversions; ++inv) {\n                    if (inv != target_inv) {\n                        perm_counts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inv = 0; inv <= max_inversions; ++inv) {\n            result = (result + perm_counts[n][inv]) % mod;\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1719071758.0
}