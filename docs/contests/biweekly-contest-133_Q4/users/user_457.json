{
    "username": "parijat7",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) \n    {\n        int maxInversions = 1001;\n        \n        int mod = 1e9+7;\n        \n        unordered_map<int,int> mp;\n        \n        \n        for(auto& req: requirements)\n        {\n            mp[req[0]+1]=req[1];\n        }\n        \n        vector<vector<long long int>> dp(n+1, vector<long long int>(maxInversions+1,0));\n        dp[0][0]=1;\n        \n        for(int i=1;i<=n;i++)\n        {\n            for(int j=0;j<=maxInversions;j++)\n            {\n                for(int k=0;k<i;k++)\n                {\n                    int l = j-k;\n                    if(l>=0)\n                    {\n                        dp[i][j] = (dp[i][j] + dp[i-1][l])%mod;\n                    }\n                    \n                }\n            }\n            \n            if(mp.find(i)!=mp.end())\n            {\n                int t = mp[i];\n                for (int j = 0; j <= maxInversions;j++) \n                {\n                    if (j != t) \n                    {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n        \n        long long int result =0;\n        \n        for (auto& cnt : dp[n]) \n        {\n            result = (result + cnt) % mod;\n        }\n        \n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719070502.0
}