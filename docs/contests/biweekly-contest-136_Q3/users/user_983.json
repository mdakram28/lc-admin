{
    "username": "samarth_717",
    "submission": "class Solution {\npublic:\n    int dp[200005][5];\n\n    int check(vector<pair<int,int>>& v, int i, int x) {\n        if (i == v.size()) {\n            x = x % 4;\n            if (x == 0) return 0;\n            else return 1e9;\n        }\n        if (dp[i][x] != -1) return dp[i][x];\n        // cout<<i<<\" \"<<x<<endl;\n        int ans = INT_MAX;\n        \n        ans = min(ans, v[i].first - v[i].second + check(v, i + 1, (x + v[i].first) % 4));\n        \n        ans = min(ans, v[i].second + check(v, i + 1, x));\n        \n        // return ans;\n        return dp[i][x] = ans;\n    }\n\n    int minFlips(vector<vector<int>>& grid) {\n        memset(dp, -1, sizeof(dp));\n        int n = grid.size();\n        int m = grid[0].size();\n        vector<pair<int, int>> v;\n        set<pair<int, int>> sp;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (sp.find({i, j}) != sp.end()) continue;\n\n                int sum = grid[i][j];\n                sp.insert({i, j});\n                \n                int size = 1;\n                \n                if (i != n - i - 1) {\n                    sum += grid[n - i - 1][j];\n                    sp.insert({n - i - 1, j});\n                    size++;\n                }\n                if (j != m - j - 1) {\n                    sum += grid[i][m - j - 1];\n                    sp.insert({i, m - j - 1});\n                    size++;\n                }\n                if (i != n - i - 1 && j != m - j - 1) {\n                    sum += grid[n - i - 1][m - j - 1];\n                    sp.insert({n - i - 1, m - j - 1});\n                    size++;\n                }\n\n                v.push_back({size, sum});\n            }\n        }\n\n        return check(v, 0, 0);\n    }\n};\n",
    "submit_ts": "1722698402",
    "subm_id": "1343179476"
}