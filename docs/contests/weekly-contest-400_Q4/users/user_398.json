{
    "username": "Abhishek12115047",
    "submission": "class Solution {\npublic:\nvector<int> a ; \nvector<int> segment ; \nvoid build(int index , int low , int high ){\n    if(low == high){\n        segment[index] = a[low] ;\n        return ; \n    }\n    int mid = (low + high) / 2 ; \n    build(2 * index + 1 , low , mid ) ;\n    build(2 * index + 2 , mid + 1 ,high) ;\n    segment[index] = segment[2*index + 1] & segment[2*index + 2] ;\n}\n\nint query(int index , int low , int high , int l , int r){\n    if(low >= l && high <= r){\n        return segment[index] ;\n    }\n    if(high < l || low > r){\n        return  INT32_MAX; \n    }\n    int mid = (low + high) / 2 ; \n    int left = query(2 * index + 1 , low , mid , l , r) ;\n    int right = query(2 * index + 2 , mid + 1 , high , l , r) ;\n    return left & right ;\n}\n\nint minimumDifference(vector<int> &nums, int k)\n{\n    int n = nums.size() ; \n    a = nums ; \n    segment.resize(4 * n , 0) ; \n    build(0 , 0 , n - 1) ; \n    int ans = INT32_MAX ; \n    for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (query(0 , 0 , n - 1 , i , mid) >= k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1)\n            ans = min(ans, abs(query(0 , 0 , n - 1 , i , l) - k));\n        ans = min(ans, abs(k - query(0 , 0 , n - 1 , i , r)));\n    }\n    return ans;\n}\n};",
    "submit_ts": "1717298323",
    "subm_id": "1274774974"
}