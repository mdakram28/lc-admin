{
    "username": "agrawalji",
    "submission": "import java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\n\nclass Solution {\n\n    class SegmentTree{\n        int tree[];\n        int size;\n        int arr[];\n        int n ;\n\n        public SegmentTree(int arr[], int n){\n            this.size  = 4*n;\n            tree = new int[size];\n            this.arr = arr;\n            this.n = n;\n            buildTree(0, n-1, 0);\n        }\n\n        private int buildTree(int start, int end, int curr){\n            if(start == end){\n                int cnt = (start !=0 && start!= n-1 && (arr[start] > arr[start-1] && arr[start] > arr[start+1])) ? 1 : 0;\n\n                return tree[curr] = cnt;\n            }\n\n            int mid = (start + end)>>1;\n\n            tree[curr] = buildTree(start, mid, 2*curr+1) + buildTree(mid+1, end, 2*curr+2);\n\n            return tree[curr];\n        }\n\n        public int query(int s, int e, int qs, int qe, int i){\n\n            if(qs <=s && e <= qe){\n\n                return tree[i];\n            }\n\n            if(e < qs || s > qe) return 0;\n\n            int mid = (s+e)>>1;\n\n            return query(s, mid, qs, qe, 2*i+1) + query(mid+1, e, qs, qe, 2*i+2);\n        }\n\n        public void update(int start, int end, int i, int treeIndex, int val){\n            if(i < start || i > end) return ;\n            if(start == end){\n                arr[i] = val;\n                int cnt = (start !=0 && start != n-1 && (arr[start] > arr[start-1] && arr[start] > arr[start+1])) ? 1 : 0;\n                tree[treeIndex] = cnt;\n                return;\n            }\n\n            int mid = (start+end)>>1;\n\n            update(start, mid, i, 2*treeIndex+1, val);\n            update(mid+1, end, i, 2*treeIndex+2, val);\n            tree[treeIndex] = tree[2*treeIndex+1] + tree[2*treeIndex+2];\n\n\n        }\n\n\n    }\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        SegmentTree tree = new SegmentTree(nums, nums.length);\n        List<Integer> ans = new ArrayList<>();\n        int n = nums.length;\n        for(int[] q : queries){\n            if(q[0] == 1){\n                int cnt = tree.query(0, nums.length-1, q[1], q[2], 0);\n                int start = q[1];\n                int end = q[2];\n                if(start == end){\n                    if(start !=0 && start != n-1 && (nums[start] > nums[start-1] && nums[start] > nums[start+1])){\n                        cnt--;\n                    }\n                    \n                }else{\n                    if(start !=0 && start != n-1 && (nums[start] > nums[start-1] && nums[start] > nums[start+1])){\n                        cnt--;\n                    }\n\n                    if(end !=0 && end != n-1 && (nums[end] > nums[end-1] && nums[end] > nums[end+1])){\n                        cnt--;\n                    }\n                    \n                }\n                ans.add(cnt);\n            }else{\n                int ind = q[1];\n                int val = q[2];\n                nums[ind] = val;\n                tree.update(0, nums.length-1, ind, 0, val);\n                if(ind-1 >=0){\n                    tree.update(0, nums.length-1, ind-1, 0, nums[ind-1]);\n                }\n                if(ind+1  < n){\n                    tree.update(0, n-1, ind+1, 0, nums[ind+1]);\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1718509135.0
}