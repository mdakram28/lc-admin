{
    "username": "lone17",
    "submission": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [[1] * n for _ in range(k + 1)]\n        heaps = [[(-1, nums[0])] for _ in range(k + 1)]\n        last_seen = {nums[0]: 0}\n        for c in range(1, n):\n            if nums[c] in last_seen:\n                prev = last_seen[nums[c]]\n                for r in range(k + 1):\n                    dp[r][c] = dp[r][prev] + 1\n                    heappush(heaps[r], (-dp[r][c], nums[c]))\n            for r in range(1, k + 1):\n                tmp = None\n                if heaps[r - 1][0][1] == nums[c]:\n                    tmp = heappop(heaps[r - 1])\n                while heaps[r - 1] and heaps[r - 1][0][1] == nums[c]:\n                    heappop(heaps[r - 1])\n                if heaps[r - 1]:\n                    score, x = heaps[r - 1][0]\n                    i = last_seen[x]\n                    if dp[r][c] < dp[r - 1][i] + 1:\n                        dp[r][c] = dp[r - 1][i] + 1\n                        heappush(heaps[r], (-dp[r][c], nums[c]))\n                if tmp:\n                    heappush(heaps[r - 1], tmp)\n            # for r in range(1, k + 1):\n            #     for x, i in last_seen.items():\n            #         if x != nums[c]:\n            #             dp[r][c] = max(dp[r][c], dp[r - 1][i] + 1)\n            last_seen[nums[c]] = c\n        \n        return max(max(row) for row in dp)\n        ",
    "submit_ts": "1717862030",
    "subm_id": "1281809768"
}