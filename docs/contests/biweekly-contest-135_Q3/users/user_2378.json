{
    "username": "yuvraj_2503",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        HashMap<Integer, ArrayList<Integer>> mp= new HashMap<>();\n        \n        ArrayList<Integer> arr = new ArrayList<>();\n\n        int n = nums.length;\n        \n        for (int i = 0; i < n / 2; i++) {\n            int x = nums[i];\n            int y = nums[n - i - 1];\n            \n            int dif = Math.abs(x - y);\n            \n            int[] diffArr = new int[]{x,y, k-x, k-y};\n            \n            int max = getMax(diffArr);\n            \n            if(mp.containsKey(dif)){\n                mp.get(dif).add(max);\n            }else{\n                mp.put(dif, new ArrayList<>());\n                mp.get(dif).add(max);\n            }\n            \n            arr.add(max);\n        }\n\n        int ans = n;\n        Collections.sort(arr);\n\n        for (int x : mp.keySet()) {\n            \n            int p = lowerBound(arr, x);\n            \n            p =  p * 2 + (n / 2 - p);\n            \n            for (int v : mp.get(x)) {\n                if (v < x) p -= 2;\n                else p--;\n            }\n\n            ans = Math.min(ans, p);\n        }\n\n        return ans;\n    }\n\n    private int lowerBound(ArrayList<Integer> arr, int x) {\n        int low = 0, high = arr.size();\n        int mid;\n        while (low < high) {\n            mid = low + (high - low) / 2;\n            if (x <= arr.get(mid)) high = mid;\n             else low = mid + 1;\n        }\n        \n        if (low < arr.size() && arr.get(low) < x) low++;\n        return low;\n    }\n\n    private int getMax(int[] diffArr) {\n        int max=Integer.MIN_VALUE;\n        for(int x: diffArr){\n            max= Math.max(x, max);\n        }\n        return max;\n    }\n}",
    "submit_ts": "1721490395",
    "subm_id": "1327481380"
}