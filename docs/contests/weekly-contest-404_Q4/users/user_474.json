{
    "username": "daschinmayakumar26",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adj1(n), adj2(m);\n        \n        for (auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        \n        for (auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        int diameter1 = getDiameter(adj1).first;\n        int diameter2 = getDiameter(adj2).first;\n        \n        int height1 = getDiameter(adj1).second;\n        int height2 = getDiameter(adj2).second;\n        \n        return max({diameter1, diameter2, height1 + height2 + 1});\n    }\n    \nprivate:\n    pair<int, int> getDiameter(vector<vector<int>>& adj) {\n        int n = adj.size();\n        auto farthest = bfs(0, adj);\n        auto result = bfs(farthest.first, adj);\n        return {result.second, result.second / 2 + (result.second % 2)};\n    }\n    \n    pair<int, int> bfs(int start, vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        \n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n        int maxDist = 0;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return {farthestNode, maxDist};\n    }\n};\n",
    "submit_ts": "1719715736",
    "subm_id": "1304344889"
}