{
    "username": "jupiterepoch",
    "submission": "class Solution:\n\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n\n        def process(diff):\n            diff = [abs(d) for d in diff] + [0]\n            operations = 0\n            stk = []\n            # print(diff)\n            for i in range(len(diff)):\n                while stk and diff[i] <= diff[stk[-1][0]]:\n                    j, h = stk[-1]\n                    stk.pop()\n                    # prev = -1 if not stk else stk[-1][0]\n                    prevh = 0 if not stk else stk[-1][1]\n                    # if stk:\n                    #     operations += (h - stk[-1][1])\n                    # else:\n                    #     operations += (h - diff[i])\n                    operations += min(h - prevh, h - diff[i])\n                    \n                if stk and diff[i] == diff[stk[-1][0]]:\n                    stk[-1][0] = i\n                else:\n                    stk.append([i, diff[i]])\n            # print(\"@\", operations)\n            return operations\n\n        diff = [n-t for n, t in zip(nums, target)]\n\n        operations = 0\n        curr = []\n        for d in diff:\n            if d == 0:\n                if curr:\n                    operations += process(curr)\n                curr = []\n            if not curr:\n                curr.append(d)\n            else:\n                if d * curr[-1] > 0:\n                    curr.append(d)\n                else:\n                    operations += process(curr)\n                    curr = [d]\n\n        if curr:\n            operations += process(curr)\n        \n        return operations\n            ",
    "submit_ts": "1721533376",
    "subm_id": "1328007569"
}