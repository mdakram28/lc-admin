{
    "username": "leovl48",
    "submission": "class Solution {\npublic:\n\n    pair<vector<int>, vector<int>> dist_diameter(vector<vector<int>>& adj){\n        int n = adj.size();\n        queue<int> q;\n        q.push(0);\n        vector<int> dist(n, -1);\n        dist[0] = 0;\n        int best = 0;\n        while(!q.empty()){\n            int u = q.front(); q.pop();\n            if(dist[u] > dist[best]) best = u;\n            for(int v : adj[u]){\n                if(dist[v] == -1){\n                    dist[v] = dist[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        q.push(best);\n        fill(dist.begin(), dist.end(), -1);\n        dist[best] = 0;\n        int new_best = best;\n        while(!q.empty()){\n            int u = q.front(); q.pop();\n            if(dist[u] > dist[new_best]) new_best = u;\n            for(int v : adj[u]){\n                if(dist[v] == -1){\n                    dist[v] = dist[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        //cout << best << ' ' << new_best << '\\n';\n        vector<int> new_dist(n, -1);\n        new_dist[new_best] = 0;\n        q.push(new_best);\n        while(!q.empty()){\n            int u = q.front(); q.pop();\n            for(int v : adj[u]){\n                if(new_dist[v] == -1){\n                    new_dist[v] = new_dist[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        //cout << \"new_dist:===\\n\";\n        //for(int x : new_dist) cout << x << ' '; cout << \"=======\\n\";\n        pair<vector<int>, vector<int>> ans = {dist, new_dist};\n        return ans;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = (int) edges1.size() + 1;\n        int m = (int) edges2.size() + 1;\n        vector<vector<int>> adj1(n), adj2(m);\n\n        for(auto e : edges1){\n            int u = e[0], v = e[1];\n            adj1[u].push_back(v); \n            adj1[v].push_back(u); \n        }\n        for(auto e : edges2){\n            int u = e[0], v = e[1];\n            adj2[u].push_back(v); \n            adj2[v].push_back(u); \n        }\n\n        pair<vector<int>, vector<int>> D1 = dist_diameter(adj1);\n        pair<vector<int>, vector<int>> D2 = dist_diameter(adj2);\n\n        int ans = *max_element(D1.first.begin(), D1.first.end());\n        ans = max(ans, *max_element(D2.first.begin(), D2.first.end()));\n\n        /*cout << \"D1.first\\n\";\n        for(int i = 0; i < n; i++) cout << D1.first[i] << ' '; cout << '\\n';\n        cout << \"D2.first\\n\";\n        for(int i = 0; i < n; i++) cout << D1.second[i] << ' '; cout << '\\n';\n    */\n        int mn1 = 100000000;\n        for(int i = 0; i < n; i++){\n            mn1 = min(mn1, max(D1.first[i], D1.second[i]));\n        }\n        int mn2 = 100000000;\n        for(int i = 0; i < m; i++){\n            mn2 = min(mn2, max(D2.first[i], D2.second[i]));\n        }\n        ans = max(ans, mn1 + mn2 + 1);\n        return ans;\n    }\n};",
    "submit_ts": 1719717222.0
}