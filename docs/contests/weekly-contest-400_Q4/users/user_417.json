{
    "username": "tinku_vishnu",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n=nums.length; int min=Integer.MAX_VALUE;\n        Seg seg=new Seg(nums);\n        for(int i=0;i<n;i++){\n            int low=i-1; int high=n-1;\n            while(high-low>1){\n                int mid=low+(high-low)/2;\n                if(seg.query(0,0,n-1,i,mid)>=k){\n                    low=mid;\n                }\n                else high=mid;\n            }\n            min=Math.min(min,Math.abs(k-seg.query(0,0,n-1,i,high)));\n            if(low!=i-1){\n                min=Math.min(Math.abs(seg.query(0,0,n-1,i,low)-k),min);\n            }\n        }\n        return min;\n    }\n}\n\nclass Seg {\n    int[] seg;\n    int n;\n    public Seg(int[] nums) {\n        n=nums.length;\n        this.seg = new int[4 * n];\n        build(0,0,n-1,nums);\n    }\n    public void update(int index, int val) {\n        update(0,val,0,n-1,index);\n    }\n    \n    public void build(int idx,int l,int r,int nums[]){\n        if(l==r){\n            seg[idx]=nums[l];\n            return;\n        }\n        int mid=(l+r)/2;\n        build(2*idx+1,l,mid,nums);\n        build(2*idx+2,mid+1,r,nums);\n        seg[idx]=seg[idx*2+2]&seg[idx*2+1];\n    }\n    public void update(int idx,int val,int l,int r,int i){\n        if(l==r){\n            seg[idx]=val;\n            return;\n        }\n        int mid=(l+r)/2;\n        if(i<=mid)update(2*idx+1,val,l,mid,i);\n        else update(2*idx+2,val,mid+1,r,i);\n        seg[idx]=seg[idx*2+2]+seg[idx*2+1];\n    }\n    public int query(int idx,int left,int right,int l,int r){\n        if (l<=left&&right<=r)\n            return seg[idx]; \n        if (r<left||right<l)\n            return Integer.MAX_VALUE;\n        int mid=left+(right-left)/2;\n        return query(2*idx+1,left,mid,l,r)&query(2*idx+2,mid+1,right,l,r);\n    }\n}",
    "submit_ts": "1717298980",
    "subm_id": "1274797875"
}