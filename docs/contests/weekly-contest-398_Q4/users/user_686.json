{
    "username": "EdwardZhou1",
    "submission": "class Solution {\npublic:\n    \n    long long ncr (long n, long r) {\n        if(r==0)\n            return 1;\n        else {\n            long num = n * ncr(n - 1, r - 1);\n            return num/r;\n        }\n    }\n    \n    int waysToReachStair(int k) {\n        vector<long long> inc;\n        inc.push_back(0);\n        inc.push_back(1);\n        while(inc.back() <= k) {\n            long long val = inc.back();\n            val = 2*val + 1;\n            inc.push_back(val);\n        }\n        \n        \n        int num_ways = 0;\n        \n        for (int i = 0; i < inc.size(); i++) {\n            int max_minus = i+1;\n            if (k <= inc[i] + 1 && k >= inc[i] + 1 - max_minus) {\n                int n = i+1;\n                int r = inc[i] + 1 - k;\n                num_ways += ncr(n, r);\n            }\n        }\n        return num_ways;\n    }\n};",
    "submit_ts": 1716088702.0
}