{
    "username": "Harikrishna Shenoy",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    vector<vector<ll> > merge_sort_tree;\n    vector<vector<ll> > merge_sort_tree_sum;\n    \n    void merge_tree_node(ll l,ll r,ll target){\n        ll n=merge_sort_tree[l].size(),m=merge_sort_tree[r].size();\n        vector<ll> ret;\n        ll i=0,j=0;\n        \n        while(i<n and j<m){\n            if(merge_sort_tree[l][i]<=merge_sort_tree[r][j]){\n                merge_sort_tree[target].emplace_back(merge_sort_tree[l][i++]);\n            }else{\n                merge_sort_tree[target].emplace_back(merge_sort_tree[r][j++]);\n            }\n        }\n        \n        while(i<n){\n           merge_sort_tree[target].emplace_back(merge_sort_tree[l][i++]);\n        }\n        \n        while(j<m){\n            merge_sort_tree[target].emplace_back(merge_sort_tree[r][j++]);\n        }\n        \n     \n        \n    }\n    void build(ll node,ll l,ll r,vector<ll> &a){\n        if(l>r){\n            return ;\n        }\n        \n        if(l==r){\n            merge_sort_tree[node].push_back(a[l]);\n            merge_sort_tree_sum[node].push_back(a[l]);\n            return;\n        }\n        \n        ll mid=(l+r)/2;\n        build(node*2,l,mid,a);\n        build(node*2+1,mid+1,r,a);\n        \n        merge_tree_node(node*2,node*2+1,node);\n        merge_sort_tree_sum[node]=merge_sort_tree[node];\n        int sz=merge_sort_tree[node].size();\n        for(int i=1;i<sz;i++){\n            merge_sort_tree_sum[node][i]+=merge_sort_tree_sum[node][i-1];\n        }\n        \n        \n    }\n    ll get_sum(ll l,ll r){\n        return ((r-l+1)*(r+l))/2ll;\n    }\n    \n    ll get_cnt_query(ll node,ll l,ll r,ll st,ll en,ll q,ll &sum){\n        \n        \n        if(l>r or r<st or l>en){\n            return 0;\n        }\n        \n        if(l>=st and r<=en){\n            \n            // cnt of indexes less than r;\n            auto it=lower_bound(merge_sort_tree[node].begin(),merge_sort_tree[node].end(),q);\n            \n            if(it==merge_sort_tree[node].begin()){\n                return 0;\n            }\n            \n            it--;\n            ll ind=it-merge_sort_tree[node].begin();\n \n\n            sum+=merge_sort_tree_sum[node][ind];\n            return ind+1;\n    \n        }\n        \n        \n        \n        ll mid=(l+r)/2;\n        \n        return get_cnt_query(node*2,l,mid,st,en,q,sum)+get_cnt_query(node*2+1,mid+1,r,st,en,q,sum);\n    }\n    \n    \n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        ll n=s.size();\n        vector<ll> max_poss_end(n);\n        vector<ll> count_one(n,0),count_zero(n,0);\n        \n        merge_sort_tree.resize(4*n+5);\n        merge_sort_tree_sum.resize(4*n+5);\n        \n        for(ll i=0;i<n;i++){\n            count_one[i]=(s[i]=='1');\n            count_zero[i]=(s[i]=='0');\n            \n            if(i-1>=0){\n                count_one[i]+=count_one[i-1];\n                count_zero[i]+=count_zero[i-1];\n            }\n        }\n        \n        for(int i=0;i<n;i++){\n            \n            int lo=i,hi=n-1,r=i;\n            \n            while(hi>=lo){\n                int mid=(hi+lo)/2;\n                int c0=count_zero[mid];\n                int c1=count_one[mid];\n                \n                if(i-1>=0){\n                    c0-=count_zero[i-1];\n                    c1-=count_one[i-1];\n                }\n                \n                if(c0<=k or c1<=k){\n                    r=max(r,mid);\n                    lo=mid+1;\n                }else{\n                    hi=mid-1;\n                }\n            }\n            \n            max_poss_end[i]=r;\n\n        }\n        \n        \n        \n        build(1,0,n-1,max_poss_end);\n        \n        \n        vector<ll> sol;\n        \n       for(auto q:queries){\n            ll l=q[0];\n            ll r=q[1];\n            \n            ll len=r-l+1;\n            \n            ll ans=len-get_sum(l,r);\n            ll sum_ls_r=0;\n                \n            ll cnt_ls_r=get_cnt_query(1,0,n-1,l,r,r,sum_ls_r);\n            ll cnt_gt_r=len-cnt_ls_r;\n            \n            ans=ans+cnt_gt_r*r;\n            ans=ans+sum_ls_r;\n            \n            sol.push_back(ans);\n            \n        \n        }\n        \n       \n        return sol;\n    }\n};",
    "submit_ts": "1723953021",
    "subm_id": "1359810344"
}