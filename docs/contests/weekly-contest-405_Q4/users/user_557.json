{
    "username": "anti_quark",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef long double ld;\ntypedef vector<int> vi;\ntypedef vector<ll> vl;\ntypedef pair<int, int> pi;\ntypedef pair<ll, ll> pl;\ntypedef map<int, int> mpi;\ntypedef map<ll, ll> mpl;\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<ll>> vvl;\ntypedef vector<pair<int, int>> vpi;\ntypedef vector<pair<ll, ll>> vpl;\n\n#define f first\n#define s second\n#define pb push_back\n#define INF 2e18\n#define mod 1000000007\n#define fast_cin()                    \\\n    ios_base::sync_with_stdio(false); \\\n    cin.tie(NULL);                    \\\n    cout.tie(NULL)\n#define space cout << endl\n#define log(x) cout << x << endl\n#define dbg cout << \"-----------\" << endl\n#define yes cout << \"Yes\" << endl\n#define no cout << \"No\" << endl\n#define print(a)      \\\n    for (auto &i : a) \\\n    cout << i << \" \"\n#define all(x) (x).begin(), (x).end()\n#define sz(x) ((ll)(x).size())\n#define rev(v) reverse(all(v))\n#define asc(v) sort(all(v))\n#define des(v) sort(all(v), greater<int>())\n#define maxi(v) max_element(all(v))\n#define mini(v) min_element(all(v))\n\nll gcd(ll a, ll b)\n{\n    return b == 0 ? a : gcd(b, a % b);\n}\n\nll lcm(ll a, ll b)\n{\n    return (a * b) / gcd(a, b);\n}\n\nclass TrieNode\n{\npublic:\n    unordered_map<char, TrieNode *> child;\n    vector<int> temp;\n};\n\nclass Trie\n{\npublic:\n    TrieNode *root;\n    Trie()\n    {\n        root = new TrieNode();\n    }\n\n    void insert(const string &word, int idx)\n    {\n        TrieNode *node = root;\n        for (auto ch : word)\n        {\n            if (!node->child.count(ch))\n            {\n                node->child[ch] = new TrieNode();\n            }\n            node = node->child[ch];\n        }\n        node->temp.push_back(idx);\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i)\n        {\n            trie.insert(words[i], i);\n        }\n\n        for (int i = 0; i < n; i++)\n        {\n            if (dp[i] == INT_MAX)\n            {\n                continue;\n            }\n            TrieNode *node = trie.root;\n            for (int j = i; j < n && node; j++)\n            {\n                if (!node->child.count(target[j]))\n                    break;\n                node = node->child[target[j]];\n                for (auto idx : node->temp)\n                {\n                    int xx = words[idx].length();\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[idx]);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320983",
    "subm_id": "1312310158"
}