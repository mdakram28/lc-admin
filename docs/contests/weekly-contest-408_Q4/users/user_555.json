{
    "username": "CowOpening",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def isTouchRight(circle):\n            x,y,r = circle\n            return y-r<=0 or x+r>=X\n        def isTouchLeft(circle):\n            x,y,r = circle\n            return y+r>=Y or x-r<=0\n        def isColliding(circle1, circle2):\n            x1,y1,r1 = circle1\n            x2,y2,r2 = circle2\n            distance = sqrt((x1 - x2)**2 + (y1 - y2)**2)\n            return distance <= r1+r2\n        parent = [i for i in range(len(circles))]\n        def find(i):\n            if i != parent[i]:\n                parent[i] = find(parent[i])\n            return parent[i]\n        def unify(x,y):\n            rootX = find(x)\n            rootY = find(y)\n            if rootX!=rootY:\n                parent[rootX] = rootY\n        collidingLeft = [False] * len(circles)\n        collidingRight = [False] * len(circles)\n        for i in range(len(circles)):\n            for j in range(i+1,len(circles)):\n                if isColliding(circles[i], circles[j]):\n                    unify(i,j)\n\n        for i,circle in enumerate(circles):\n            if isTouchRight(circle):\n                collidingRight[find(i)]=True\n            if isTouchLeft(circle):\n                collidingLeft[find(i)]=True\n            if collidingLeft[find(i)] and collidingRight[find(i)]:\n                return False\n        return True\n                \n        ",
    "submit_ts": "1722136953",
    "subm_id": "1335749790"
}