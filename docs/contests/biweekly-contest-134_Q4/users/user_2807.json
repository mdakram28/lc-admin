{
    "username": "h8086",
    "submission": "class Solution {\npublic:\n    using ll = long long;\n\n    class SegmentTree {\n    private:\n        vector<int> st;\n        int n;\n\n        // Helper function to build the segment tree\n        void build(vector<int>& arr, int v, int tl, int tr) {\n            if (tl == tr) {\n                st[v] = arr[tl];\n            } else {\n                int tm = (tl + tr) / 2;\n                build(arr, v * 2, tl, tm);\n                build(arr, v * 2 + 1, tm + 1, tr);\n                st[v] = st[v * 2] & st[v * 2 + 1];\n            }\n        }\n\n        // Helper function to query the segment tree\n        int query(int v, int tl, int tr, int l, int r) {\n            if (l > r) return INT_MAX; // Or any suitable default value for AND operation\n            if (l == tl && r == tr) return st[v];\n\n            int tm = (tl + tr) / 2;\n            return query(v * 2, tl, tm, l, min(r, tm)) & query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);\n        }\n\n    public:\n        SegmentTree(vector<int>& arr) {\n            n = arr.size();\n            st.resize(4 * n); // Allocate space for the segment tree\n            build(arr, 1, 0, n - 1); // Build the segment tree\n        }\n\n        // Function to find AND value in range [l, r]\n        int rangeAND(int l, int r) {\n            return query(1, 0, n - 1, l, r);\n        }\n    };\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(nums);\n\n        ll ans = 0;\n\n        for (int i = 0; i < n; i++) {\n            int l = i;\n            int r = n - 1;\n            ll res = 0;\n\n            int first = -1;\n            int last = -1;\n\n            while (l <= r) {\n                int mid = l + (r - l) / 2;\n\n                int x = st.rangeAND(i, mid);\n\n                if (x == k) {\n                    first = mid;\n                    r = mid - 1;\n                } else if (x > k) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n            \n            \n            l = i, r = n-1;\n            while (l <= r) {\n                int mid = l + (r - l) / 2;\n\n                int x = st.rangeAND(i, mid);\n\n                if (x == k) {\n                    last = mid;\n                    l = mid + 1;\n                } else if (x > k) {\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n\n            if (first != -1) {\n                ans += last-first+1;\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1720278873",
    "subm_id": "1311727903"
}