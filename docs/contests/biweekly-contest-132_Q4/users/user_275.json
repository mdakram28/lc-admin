{
    "username": "20240628.harshshukla14",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1));\n        fill(dp.begin(), dp.end(), vector<int>(k + 1, 1));\n        \n        int ans = 1;\n        vector<int> v(k + 1, -1);\n        vector<unordered_map<int, int>> m(k + 1);\n\n        \n        // for (int i = 1; i < n; ++i) {\n        //     for (int j = 0; j < i; ++j) {\n        //         if (abs(nums[i] - nums[j]) <= k) {\n        //             dp[i] = max(dp[i], dp[j] + 1);\n        //         }\n        //     }\n        //     ans = max(ans, dp[i]);\n        // }\n        \n        for (int i = 0; i < n; i++) {\n            int j = 0;\n            while (j <= k) {\n                int l = 0;\n                while (l < j) {\n                    dp[i][j] = max(dp[i][j], 1 + v[l]);\n                    l++;\n                }\n                if (m[j].find(nums[i]) != m[j].end()) {\n                    dp[i][j] = max(dp[i][j], 1 + m[j][nums[i]]);\n                }\n                ans = max(ans, dp[i][j]);\n                j++;\n            }\n            \n            for (int j = 0; j <= k; j++) {\n                v[j] = max(v[j], dp[i][j]);\n                m[j][nums[i]] = max(m[j][nums[i]], dp[i][j]);\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": 1717861684.0
}