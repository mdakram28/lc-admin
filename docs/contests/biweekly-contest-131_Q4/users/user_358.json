{
    "username": "wait_rain_stops",
    "submission": "class Solution {\n    int[] sum,left,right,cnt;\n    public List<Boolean> getResults(int[][] queries) {\n        int n=queries.length;\n        int N=Math.min(50000,3*n)+1;\n        sum=new int[N<<2];\n        left=new int[N<<2];\n        right=new int[N<<2];\n        cnt=new int[N<<2];\n        build(1,N,1);\n        List<Boolean> ans=new ArrayList<>();\n        for(int[] q : queries){\n            int m=q.length;\n            if(m==2){\n                update(q[1]+1,1,N,1);\n            }else{\n                int[] res=query(1,q[1]+1,1,N,1);\n                ans.add(res[0]>=q[2]);\n            }\n        }\n        return ans;\n    }\n    public void build(int l, int r, int cur) {\n        if (l == r) {\n            left[cur]=right[cur]=sum[cur] = 0;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        build(l, mid, cur << 1);\n        build(mid + 1, r, cur << 1 | 1);\n        left[cur]=right[cur]=sum[cur] = sum[cur << 1] + sum[cur << 1 | 1] + 1;\n    }\n    //\u533a\u95f4\u6c42\u548c\n    public int[] query(int L, int R, int l, int r, int cur) {\n        if (L <= l && r <= R) return new int[]{sum[cur],left[cur],right[cur],cnt[cur]};\n        int mid = (l + r) >> 1;\n        int[] res1=new int[4],res2=new int[4];\n        if (L <= mid)   res1 = query(L, R, l, mid, cur << 1);   \n        if (R > mid)    res2 = query(L, R, mid + 1, r, cur << 1 | 1);   \n        if(L > mid) return res2;\n        if(R <= mid)    return res1;\n        int[] res=new int[4];\n        res[0]=Math.max(res1[0],res2[0]);\n        res[0]=Math.max(res[0],res1[2]+res2[1]+1);\n        if(res1[3]==0){\n            res[1]=res1[1]+res2[1]+1;\n        }else{\n            res[1]=res1[1];\n        }\n        if(res2[3]==0){\n            res[2]=res2[2]+res1[2]+1;\n        }else{\n            res[2]=res2[2];\n        }\n        res[3]=res1[3]+res2[3];\n        return res;\n    }\n    //\u533a\u95f4\u4fee\u6539\n    public void update(int x,int l, int r, int cur) {\n        if(l==r){\n            left[cur]=right[cur]=sum[cur] = 0;\n            cnt[cur]++;\n            return;\n        }\n        int mid = (l + r) >> 1;\n        if (x <= mid) update(x, l, mid, cur << 1);\n        if (x > mid) update(x, mid + 1, r, cur << 1 | 1);\n        cnt[cur]=cnt[cur<<1]+cnt[cur<<1|1];\n        sum[cur] = Math.max(sum[cur << 1],sum[cur << 1 | 1]);\n        sum[cur] = Math.max(sum[cur],left[cur<<1|1]+right[cur<<1]+1);\n        if(cnt[cur<<1]==0){\n            left[cur]=left[cur<<1]+left[cur<<1|1]+1;\n        }else{\n            left[cur]=left[cur<<1];\n        }\n        if(cnt[cur<<1|1]==0){\n            right[cur]=right[cur<<1|1]+right[cur<<1]+1;\n        }else{\n            right[cur]=right[cur<<1|1];\n        }\n    }\n}",
    "submit_ts": 1716652075.0
}