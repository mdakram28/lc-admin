{
    "username": "Gargi_Bhardwaj",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        List<Integer> allXValues = new ArrayList<>();\n        int n = nums.length;\n        \n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int diff = Math.abs(a - b);\n            int X = Math.max(a, Math.max(b, Math.max(k - a, k - b)));\n            \n            map.computeIfAbsent(diff, key -> new ArrayList<>()).add(X);\n            allXValues.add(X);\n        }\n        \n        int ans = n;\n        Collections.sort(allXValues);\n        \n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int diff = entry.getKey();\n            List<Integer> XList = entry.getValue();\n            \n            int T = lowerBound(allXValues, diff) * 2 + (n / 2 - lowerBound(allXValues, diff));\n            \n            for (int X : XList) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, T);\n        }\n        \n        return ans;\n    }\n    \n    private int lowerBound(List<Integer> sortedList, int value) {\n        int left = 0;\n        int right = sortedList.size();\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (sortedList.get(mid) < value) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n}\n",
    "submit_ts": "1721488949",
    "subm_id": "1327438098"
}