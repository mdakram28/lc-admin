{
    "username": "lukeiscoding",
    "submission": "from typing import List as L\n\nclass S:\n    def __init__(s, n):\n        class T:\n            def __init__(s, v=0):\n                s.l = -1\n                s.r = -1\n                s.v = v\n                s.lt = None\n        s.sz = len(n)\n        s.t = [T() for _ in range(4 * len(n))]\n        s.n = n\n        if s.sz > 0:\n            s.__build(0, 0, s.sz - 1)\n\n    def __build(s, i, l, r):\n        s.t[i].l = l\n        s.t[i].r = r\n        if l == r:\n            s.t[i].v = s.n[l]\n            return\n        m = l + (r - l) // 2\n        li = i * 2 + 1\n        ri = i * 2 + 2\n        s.__build(li, l, m)\n        s.__build(ri, m + 1, r)\n        s.__pushup(i)\n\n    def __pushup(s, i):\n        li = (i + 1) * 2  - 1\n        ri = (i + 1) * 2\n        s.t[i].v = s.t[ri].v + s.t[li].v\n\n    def upd_p(s, i, v):\n        s.n[i] = v\n        s.__upd_p(i, v, 0, 0, s.sz - 1)\n\n    def __upd_p(s, i, v, idx, l, r):\n        if l == r:\n            s.t[idx].v = v\n            return\n        m = l + (r - l) // 2\n        li = idx * 2 + 1\n        ri = idx * 2 + 2\n        if i > m:\n            s.__upd_p(i, v, ri, m + 1, r)\n        else:\n            s.__upd_p(i, v, li, l, m)\n        s.__pushup(idx)\n\n    def q(s, L, R, idx, l, r):\n        if L <= l and r <= R:\n            return s.t[idx].v\n        if r < L or l > R:\n            return 0\n        m = l + (r - l) // 2\n        li = idx * 2 + 1\n        ri = idx * 2 + 2\n        return s.q(L, R, li, l, m) + s.q(L, R, ri, m + 1, r)\n\n\ndef is_peak(n, i):\n    if i != 0 and i != len(n) - 1:\n        return 1 if n[i - 1] < n[i] > n[i + 1] else 0\n    return 0\n\nclass Solution:\n    def countOfPeaks(s, n: L[int], q: L[L[int]]) -> L[int]:\n        ps = [is_peak(n, i) for i in range(len(n))]\n        st = S(ps)\n        r = []\n        for a in q:\n            if a[0] == 2:\n                val = a[2]\n                idx = a[1]\n                n[idx] = val\n                for j in range(max(1, idx - 1), min(len(n) - 1, idx + 2)):\n                    st.upd_p(j, is_peak(n, j))\n            else:\n                ri = a[2]\n                l = a[1]\n                r.append(st.q(l + 1, ri - 1, 0, 0, len(n) - 1) if ri - l > 1 else 0)\n        return r\n",
    "submit_ts": "1718509187",
    "subm_id": "1289701730"
}