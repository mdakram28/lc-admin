{
    "username": "johnzhengguo",
    "submission": "class Solution {\n    public int numberOfSubstrings(String s) {\n        \n        int n = s.length();\n\n        int yCount = 0;\n        int[] yMap = new int[n+1]; // yMap[k]: the index when the k-th one appears\n        Arrays.fill(yMap, -1);\n        int[] yCountArr = new int[n]; // yCountCumuArr[i]: at index i, the cumulative count of ones, inclusive\n        \n        int zCount = 0;\n        int[] zMap = new int[n+1]; // iMap[k]: the index when the k-th one appears\n        Arrays.fill(zMap, -1);\n        int[] zCountArr = new int[n]; \n        \n        for (int i = 0; i < n; i += 1) {\n            if (s.charAt(i) == '1') {\n                yCount += 1;\n                yMap[yCount] = i;\n            } else {\n                zCount += 1;\n                zMap[zCount] = i;\n            }\n            yCountArr[i] = yCount;\n            zCountArr[i] = zCount;\n            \n            // System.out.println(\"i: \" + i + \", yCount: \" +  yCount);\n        }\n        \n        int finalResult = 0;\n        \n        // subarray starting from a\n        for (int a = 0; a < n; a += 1) {\n            \n            int res = 0;\n            \n            // i0 i1 i4 i9 ...\n            //    z1 z2 z3 ... \n            \n            int yCountSoFar = (a == 0 ? 0 : yCountArr[a-1]);\n            int zCountSoFar = (a == 0 ? 0 : zCountArr[a-1]);\n            \n            // System.out.println(\"a: \" + a);\n            // System.out.println(\"yCountSoFar: \" +  yCountSoFar);\n            // System.out.println(\"zCountSoFar: \" +  zCountSoFar);\n            \n            ArrayList<Integer> yPosList = new ArrayList<>();\n            ArrayList<Integer> zPosList = new ArrayList<>();\n            \n            for (int count = 0; count * count + a <= n; count += 1) {\n                int yCountRequired = yCountSoFar + count * count;\n                if (yCountRequired > n) break;\n                int p = yMap[yCountRequired];\n                if (count != 0 && p == -1) break;\n                yPosList.add(p);\n            }\n            \n            for (int count = 0; ; count += 1) {\n                int zCountRequired = zCountSoFar + count;\n                if (zCountRequired > n) break;\n                int p = zMap[zCountRequired];\n                if (count != 0 && p == -1) break;\n                zPosList.add(p);\n                \n                if (count >= 2 && (count-1) * (count-1) + a >= n) break;\n            }\n            \n            \n            // System.out.println(\"yPosList: \" + yPosList);\n            // System.out.println(\"zPosList: \" + zPosList);\n            \n            ArrayList<Integer> mergeTagList = new ArrayList<>();\n            ArrayList<Integer> mergePosList = new ArrayList<>();\n            int s1 = yPosList.size();\n            int s2 = zPosList.size();\n            int p1 = 1;\n            int p2 = 1;\n            while ( (p1 < s1) || (p2 < s2) )  {\n                if (p1 == s1) {\n                    mergePosList.add(zPosList.get(p2));\n                    mergeTagList.add(-p2);\n                    p2 += 1;\n                } else if (p2 == s2) {\n                    mergePosList.add(yPosList.get(p1));\n                    mergeTagList.add(p1);\n                    p1 += 1;\n                } else {\n                    if (yPosList.get(p1) < zPosList.get(p2)) {\n                        if (yPosList.get(p1) != -1) {\n                            mergePosList.add(yPosList.get(p1));\n                            mergeTagList.add(p1);\n                        }\n                        p1 += 1;\n                        \n                    } else {\n                        if (zPosList.get(p2) != -1) {\n                            mergePosList.add(zPosList.get(p2));\n                            mergeTagList.add(-p2);\n                        }\n                        p2 += 1;\n                    }\n                }\n            }\n            \n            // System.out.println(\"mergeTagList: \" + mergeTagList);\n            // System.out.println(\"mergePosList: \" + mergePosList);\n            \n            int listSize = mergePosList.size();\n            int currState = 0;\n            int currPos = a;\n            for (int i = 0; i < listSize; i += 1) {\n                int tag = mergeTagList.get(i);\n                int pos = mergePosList.get(i);\n                if (currState >= 0) {\n                    if (tag > 0) {\n                        currState = tag;\n                    } else if (tag < 0) {\n                        if (currState + tag >= 0) {\n                            // do nothing\n                        } else {\n                            currState = tag;\n                            res += (pos - currPos);\n                        }\n                    }\n                } else {\n                    if (tag > 0) {\n                        if (currState + tag >= 0) {\n                            currPos = pos;\n                            currState = tag;\n                        } else {\n                            // do nothing\n                        }\n                    } else {\n                        currState = tag;\n                    }\n                }\n            }\n            \n            if (currState >= 0) {\n                res += (n - currPos);\n            }\n            \n            // System.out.println(\"res: \" + res);\n            \n            finalResult += res;\n        }\n        \n        return finalResult;\n    }\n}\n\n// \"001\"",
    "submit_ts": "1722138325",
    "subm_id": "1335787847"
}