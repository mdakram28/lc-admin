{
    "username": "rvrty5",
    "submission": "from sortedcontainers import SortedSet\n\nclass Solution:\n    class BIT:\n        def __init__(self, sz=0):\n            self.n = sz\n            self.tr = [0] * (sz + 5)\n\n        def update(self, x, vl):\n            i = x + 1\n            while i <= self.n:\n                self.tr[i] += vl\n                i += i & -i\n\n        def query(self, x):\n            ret = 0\n            i = x + 1\n            while i:\n                ret += self.tr[i]\n                i -= i & -i\n            return ret\n\n    def numberOfAlternatingGroups(self, a, queries):\n        n = len(a)\n        stb = SortedSet()\n        ret = []\n        e = self.BIT(n + 1)\n        s = self.BIT(n + 1)\n\n        def ar(x, val):\n            s.update(x, val * x)\n            e.update(x, val)\n\n        ar(n, 1)\n\n        def add(x):\n            if not stb:\n                ar(n, -1)\n                ar(n-1, 1)\n            else:\n                if len(stb) == 1:\n                    ar(n - 1, -1)\n                    p = stb[0]\n                    if p < x:\n                        ar(x - p, 1)\n                        ar(p + n - x, 1)\n                    else:\n                        ar(p - x, 1)\n                        ar(x + n - p, 1)\n                else:\n                    it = stb.bisect_left(x)\n                    if it == len(stb):\n                        l = stb[-1]\n                        r = stb[0] + n\n                        ar(r - l, -1)\n                        ar(r - x, 1)\n                        ar(x - l, 1)\n                    else:\n                        if it == 0:\n                            l = stb[-1]\n                            r = stb[it]\n                            ar(r + n - l, -1)\n                            ar(r - x, 1)\n                            ar(x + n - l, 1)\n                        else:\n                            l = stb[it-1]\n                            r = stb[it]\n                            ar(r - l, -1)\n                            ar(r - x, 1)\n                            ar(x - l, 1)\n            stb.add(x)\n\n        def rm(x):\n            if len(stb) == 1:\n                ar(n - 1, -1)\n                ar(n, 1)\n            else:\n                if len(stb) == 2:\n                    ar(n - 1, 1)\n                    p = stb[0]\n                    if p == x:\n                        p = stb[-1]\n                    if p < x:\n                        ar(x - p, -1)\n                        ar(p + n - x, -1)\n                    else:\n                        ar(p - x, -1)\n                        ar(x + n - p, -1)\n                else:\n                    it = stb.bisect_left(x)\n                    if it == len(stb) - 1:\n                        l = stb[it-1]\n                        r = stb[0] + n\n                        ar(r - l, 1)\n                        ar(r - x, -1)\n                        ar(x - l, -1)\n                    else:\n                        if it == 0:\n                            l = stb[-1]\n                            r = stb[it + 1]\n                            ar(r + n - l, 1)\n                            ar(r - x, -1)\n                            ar(x + n - l, -1)\n                        else:\n                            l = stb[it-1]\n                            r = stb[it + 1]\n                            ar(r - l, 1)\n                            ar(r - x, -1)\n                            ar(x - l, -1)\n            stb.remove(x)\n\n        for i in range(n):\n            if a[(i + n - 1) % n] == a[i]:\n                add(i)\n\n        for q in queries:\n            if len(q) & 1:\n                x, nx = q[1], (q[1]+1) % n\n                if a[x] == a[(x + n - 1) % n]:\n                    rm(x)\n                if a[x] == a[nx]:\n                    rm(nx)\n                a[x] = q[2]\n                if a[(x + n - 1) % n] == a[x]:\n                    add(x)\n                if a[x] == a[nx]:\n                    add(nx)\n            else:\n                if len(stb) == 1 and n & 1:\n                    ret.append(n - q[1] + 1)\n                elif not stb and n ^ 1:\n                    ret.append(n)\n                else:\n                    total = s.query(n) - s.query(q[1] - 1)\n                    v = e.query(n) - e.query(q[1] - 1)\n                    ret.append(total - v * (q[1] - 1))\n\n        return ret",
    "submit_ts": "1722742744",
    "subm_id": "1343776151"
}