{
    "username": "flowing",
    "submission": "class Solution {\n    static class minimumCostTrieNode {\n        Map<Character, minimumCostTrieNode> children = new HashMap<>();\n        int cost = (int) (1e9+7);\n    }\n\n    static class minimumCostTrie {\n        minimumCostTrieNode root = new minimumCostTrieNode();\n\n        void insert(String word, int cost) {\n            minimumCostTrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node.children.putIfAbsent(c, new minimumCostTrieNode());\n                node = node.children.get(c);\n            }\n            node.cost = Math.min(node.cost, cost);\n        }\n\n        Map<Integer, Integer> searchPrefixes(String target, int start) {\n            Map<Integer, Integer> lengthsWithCosts = new HashMap<>();\n            minimumCostTrieNode node = root;\n            for (int i = start; i < target.length(); i++) {\n                char c = target.charAt(i);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                lengthsWithCosts.put(i - start + 1, node.cost);\n            }\n            return lengthsWithCosts;\n        }\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, (int) (1e9+7));\n        dp[0] = 0;\n\n        minimumCostTrie minimumCostTrie = new minimumCostTrie();\n        for (int i = 0; i < words.length; i++) {\n            minimumCostTrie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == (int) (1e9+7)) continue;\n            Map<Integer, Integer> lengthsWithCosts = minimumCostTrie.searchPrefixes(target, i);\n            for (Map.Entry<Integer, Integer> entry : lengthsWithCosts.entrySet()) {\n                int length = entry.getKey();\n                int cost = entry.getValue();\n                dp[i + length] = Math.min(dp[i + length], dp[i] + cost);\n            }\n        }\n\n        return dp[n] == (int) (1e9+7) ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720321795",
    "subm_id": "1312332492"
}