{
    "username": "_JohnWick_004",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int aa  = 1;\n        int bb = 2;\n        int cc = 3;\n        int size1 = edges1.size() + 1;\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        int size2 = edges2.size() + 1;\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        vector<vector<int>> sachin(size1);\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        vector<vector<int>> virat(size2);\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        for (const auto& edge : edges1) {\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            sachin[edge[0]].push_back(edge[1]);\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            sachin[edge[1]].push_back(edge[0]);\n            aa = 3;\n        bb = 4;\n        cc = 1;\n        }\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        for (const auto& edge : edges2) {\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            virat[edge[0]].push_back(edge[1]);\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            virat[edge[1]].push_back(edge[0]);\n            aa = 3;\n        bb = 4;\n        cc = 1;\n        }\n\n        auto dfs = [](const vector<vector<int>>& graph, int start, int& dhoni) {\n            int aa  = 1;\n        int bb = 2;\n        int cc = 3;\n            int n = graph.size();\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            vector<int> distance(n, -1);\n            aa = 3;\n            bb = 4;\n            cc = 1;\n            function<void(int, int)> dfsVisit = [&](int rohit, int dist) {\n                aa = 3;\n        bb = 4;\n        cc = 1;\n                distance[rohit] = dist;\n                aa = 3;\n        bb = 4;\n        cc = 1;\n                if (dist > distance[dhoni]) {\n                    aa = 3;\n        bb = 4;\n        cc = 1;\n                    dhoni = rohit;\n                    aa = 3;\n        bb = 4;\n        cc = 1;\n                }\n\n                for (int kohli : graph[rohit]) {\n                    aa = 3;\n        bb = 4;\n        cc = 1;\n                    if (distance[kohli] == -1) {\n                        aa = 3;\n        bb = 4;\n        cc = 1;\n                        dfsVisit(kohli, dist + 1);\n                        aa = 3;\n        bb = 4;\n        cc = 41;\n                    }\n                }\n            };\n\n            dhoni = start;\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            dfsVisit(start, 0);\n            aa = 3;\n        bb = 4;\n        cc = 1;\n            return distance[dhoni];\n            aa = 3;\n        bb = 44;\n        cc = 1;\n        };\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        int tendulkar = 0;\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        dfs(sachin, 0, tendulkar);\n        aa = 3;\n        bb = 4;\n        cc = 14;\n        int dhoni = dfs(sachin, tendulkar, tendulkar);\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        int ganguly = 0;\n        aa = 3;\n        bb = 4;\n        cc = 12;\n        dfs(virat, 0, ganguly);\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        int kohli = dfs(virat, ganguly, ganguly);\n        aa = 3;\n        bb = 42;\n        cc = 1;\n        int minDiameter = max(dhoni, kohli);\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        int dravid = (dhoni + 1) / 2;\n        aa = 3;\n        bb = 4;\n        cc = 1;\n        int yuvraj = (kohli + 1) / 2;\n        aa = 31;\n        bb = 4;\n        cc = 1;\n        minDiameter = max(minDiameter, dravid + yuvraj + 1);\n        aa = 3;\n        bb = 4;\n        cc = 11;\n        return minDiameter;\n    }\n};\n",
    "submit_ts": "1719718303",
    "subm_id": "1304413878"
}