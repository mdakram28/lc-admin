{
    "username": "alioth4j",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int res = 0;\n        // step1\n        for (int i = 0; i < m / 2; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int count0 = 0;\n                if (grid[i][j] == 0) {\n                    count0++;\n                }\n                if (grid[m - i - 1][j] == 0) {\n                    count0++;\n                }\n                if (grid[i][n - j - 1] == 0) {\n                    count0++;\n                }\n                if (grid[m - i - 1][n - j - 1] == 0) {\n                    count0++;\n                }\n                res += Math.min(count0, (4 - count0));\n            }\n        }\n        // step2\n        if (m % 2 == 0 && n % 2 == 0) {\n            return res;\n        }\n        if (m % 2 == 0) {\n            int col = n / 2;\n            int times = 0, count1 = 0;\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][col] != grid[m - i -1][col]) {\n                    grid[i][col] = 0;\n                    grid[m - i -1][col] = 0;\n                    times++;\n                }\n            }\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][col] == 1) {\n                    count1 += 2;\n                }\n            }\n            if (count1 % 4 == 0) {\n                return res + times;\n            }\n            if (times >= 1) {\n                return res + times;\n            }\n            return res + times + 2;\n        } else if (n % 2 == 0) {\n            int row = m / 2;\n            int times = 0, count1 = 0;\n            for (int j = 0; j < n / 2; j++) {\n                if (grid[row][j] != grid[row][n - j -1]) {\n                    grid[row][j] = 0;\n                    grid[row][n - j -1] = 0;\n                    times++;\n                }\n            }\n            for (int j = 0; j < n / 2; j++) {\n                if (grid[row][j] == 1) {\n                    count1 += 2;\n                }\n            }\n            if (count1 % 4 == 0) {\n                return res + times;\n            }\n            if (times >= 1) {\n                return res + times;\n            }\n            return res + times + 2;\n        } else {\n            int row = m / 2;\n            int col = n / 2;\n            if (grid[row][col] == 1) {\n                res++;\n            }\n\n            int times = 0, count1 = 0;\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][col] != grid[m - i -1][col]) {\n                    grid[i][col] = 0;\n                    grid[m - i -1][col] = 0;\n                    times++;\n                }\n            }\n            for (int j = 0; j < n / 2; j++) {\n                if (grid[row][j] != grid[row][n - j -1]) {\n                    grid[row][j] = 0;\n                    grid[row][n - j -1] = 0;\n                    times++;\n                }\n            }\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][col] == 1) {\n                    count1 += 2;\n                }\n            }\n            for (int j = 0; j < n / 2; j++) {\n                if (grid[row][j] == 1) {\n                    count1 += 2;\n                }\n            }\n            if (count1 % 4 == 0) {\n                return res + times;\n            }\n            if (times >= 1) {\n                return res + times;\n            }\n            return res + times + 2;\n        }\n    }\n}",
    "submit_ts": "1722699335",
    "subm_id": "552275176"
}