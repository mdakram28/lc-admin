{
    "username": "Vasyl Dovhanych",
    "submission": "using ll = long long;\n#define _rep_sel(a1,a2,a3,a4,exp,...) exp\n#define rep_n(n) for(ll i=0;i<(ll)(n);++i)\n#define rep_in(i,n) for(ll i=0;i<(ll)(n);++i)\n#define rep_isn(i,s,n) for(ll i=(ll)(s);i<(ll)(n);++i)\n#define rep_isninc(i,s,n,inc) for(ll i=(ll)(s);i<(ll)(n);i+=(ll)(inc))\n#define rep(...) _rep_sel(__VA_ARGS__,rep_isninc,rep_isn,rep_in,rep_n)(__VA_ARGS__)\n#define rrep(i,j,n,m) for(ll i=0;i<(ll)(n);++i) for(ll j=0;j<(ll)(m);++j)\n#define per(i,n) for(ll i=(ll)(n);i>=(ll)0;--i)\n#define each(it, a) for (const auto& it: a)\nconstexpr ll inf64 = 1e18+1;\nconstexpr int inf32 = 1e9+1;\ntemplate<class T, class TVal> inline bool chmax(T &a, const TVal &b) { return (a < b ? a = b, 1 : 0); }\ntemplate<class T, class TVal> inline bool chmin(T &a, const TVal &b) { return (a > b ? a = b, 1 : 0); }\ntemplate<typename T1, typename T2 = T1> struct v2 { T1 x; T2 y; friend strong_ordering operator<=>(const v2&, const v2&) = default; };\ntemplate<typename T1, typename T2 = T1, typename T3 = T1> struct v3 { T1 x; T2 y; T3 z; friend strong_ordering operator<=>(const v3&, const v3&) = default; };\ntemplate<typename T> using vec = vector<T>;\ntemplate<typename T> using vvec = vector<vector<T>>;\nusing veci = vec<ll>; using vveci = vvec<ll>;\nusing vecb = vec<bool>; using vvecb = vvec<bool>;\nusing v2i = v2<ll>; using v3i = v3<ll>;\ntemplate<typename T> using pq_dec = priority_queue<T>;\ntemplate<typename T> using pq_inc = priority_queue<T, vector<T>, greater<T>>;\n\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& M) {\n        vec<set<v2i>> mas(M[0].size());\n        rrep(i, j, M.size(), M[0].size())\n        {\n            mas[j].insert(v2i{(ll)M[i][j], i});\n            if(mas[j].size() > 20) mas[j].erase(mas[j].begin());\n        }\n\n        vec<v3i> cc;\n        rep(j, M[0].size())\n        {\n            for (auto item : mas[j])\n            {\n                cc.push_back(v3i{(item.x), item.y, j});\n            }\n        }\n\n        ranges::sort(cc, greater<>());\n        ll mx = (ll)M[0][0] + (ll)M[1][1] + (ll)M[2][2];\n        rep(i1, min((ll)cc.size(), (ll)100))\n        {\n            int k2 = 0;\n            for (ll i2 = i1 + 1; i2 < cc.size() && k2 < 100; ++i2)\n            {\n                if(cc[i2].y == cc[i1].y || cc[i2].z == cc[i1].z) continue;\n\n                int k3 = 0;\n                for (ll i3 = i2 + 1; i3 < cc.size() && k3 < 100; ++i3)\n                {\n                    if(cc[i3].y == cc[i2].y || cc[i3].z == cc[i2].z ||\n                        cc[i3].y == cc[i1].y || cc[i3].z == cc[i1].z ||\n                        cc[i2].y == cc[i1].y || cc[i2].z == cc[i1].z) continue;\n\n                    ll t = cc[i3].x + cc[i2].x + cc[i1].x;\n                    chmax(mx, t);\n                    k3++;\n                }\n\n                k2++;\n            }\n        }\n\n        return mx;\n    }\n};",
    "submit_ts": "1723908560",
    "subm_id": "1359157757"
}