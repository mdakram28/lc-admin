{
    "username": "UZQueen",
    "submission": "class Solution:\n    @lru_cache\n    def recurse(self, i, jump, went_down_already, k):\n        ret = 0\n\n        if i > k + 1:\n            # if we've reached 2 steps above our\n            # current k value, theres no way for\n            # us to go down two steps in a row to\n            # reach k, so we return 0 since it's\n            # now impossible\n            return 0\n\n        if i == k:\n            ret = 1\n            \n        if went_down_already or i == 0:\n            # must only go up\n            return ret + self.recurse(i + pow(2, jump), jump + 1, False, k)\n        else:\n            go_up = self.recurse(i + pow(2, jump), jump + 1, False, k)\n            go_down = self.recurse(i - 1, jump, True, k)\n\n            return ret + go_up + go_down\n\n    def waysToReachStair(self, k: int) -> int:\n        ways = self.recurse(1, 0, False, k)\n\n        return ways",
    "submit_ts": "1716088669",
    "subm_id": "1261820608"
}