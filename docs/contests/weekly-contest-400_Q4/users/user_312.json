{
    "username": "deepak_yadav_7",
    "submission": "class segmentree {\npublic:\n    vector<int> tree;\n    int n;\n    segmentree(vector<int>& nums)\n    {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n    void build(vector<int>& nums, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = nums[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int t1 = query(2 * node + 1, start, mid, l, r);\n        int t2 = query(2 * node + 2, mid + 1, end, l, r);\n        return t1 & t2;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        segmentree st(nums);\n        int minDif = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int s = i - 1, e = n - 1, mid;\n            while (e - s > 1) {\n                mid = (s + e) / 2;\n                if (st.query(i, mid) >= k)\n                    s = mid;\n                else\n                    e = mid;\n            }\n            if (s != i - 1) {\n                minDif = min(minDif, abs(st.query(i, s) - k));\n            }\n            minDif = min(minDif, abs(k - st.query(i, e)));\n        }\n        return minDif;\n    }\n};",
    "submit_ts": "1717297049",
    "subm_id": "1274728591"
}