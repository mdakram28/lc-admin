{
    "username": "dj_khalid",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    private:\n        vector<int> tree;\n        vector<int> arr;\n        int n;\n\n        void buildTree(int node, int start, int end) {\n            if (start == end) {\n                // Leaf node will have a single element\n                tree[node] = arr[start];\n            } else {\n                int mid = (start + end) / 2;\n                // Recursively build the segment tree\n                buildTree(2 * node + 1, start, mid);\n                buildTree(2 * node + 2, mid + 1, end);\n                // Internal node will have the sum of both its children\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        void updateTree(int node, int start, int end, int idx, int val) {\n            if (start == end) {\n                // Leaf node\n                arr[idx] = val;\n                tree[node] = val;\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    // If idx is in the left child, recurse on the left child\n                    updateTree(2 * node + 1, start, mid, idx, val);\n                } else {\n                    // If idx is in the right child, recurse on the right child\n                    updateTree(2 * node + 2, mid + 1, end, idx, val);\n                }\n                // Internal node will have the sum of both its children\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int queryTree(int node, int start, int end, int l, int r) {\n            if (r < start || end < l) {\n                // range represented by a node is completely outside the given range\n                return 0;\n            }\n            if (l <= start && end <= r) {\n                // range represented by a node is completely inside the given range\n                return tree[node];\n            }\n            // range represented by a node is partially inside and partially outside the given range\n            int mid = (start + end) / 2;\n            int p1 = queryTree(2 * node + 1, start, mid, l, r);\n            int p2 = queryTree(2 * node + 2, mid + 1, end, l, r);\n            return p1 + p2;\n        }\n\n    public:\n        SegmentTree(vector<int>& input) {\n            arr = input;\n            n = arr.size();\n            tree.resize(4 * n);\n            buildTree(0, 0, n - 1);\n        }\n\n        void update(int idx, int val) {\n            updateTree(0, 0, n - 1, idx, val);\n        }\n\n        int query(int l, int r) {\n            return queryTree(0, 0, n - 1, l, r);\n        }\n    };\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> v(n, 0), res;\n\n        for (int i = 1; i < n - 1; ++i) {\n            if ((nums[i] > nums[i - 1]) && (nums[i] > nums[i + 1])) {\n                v[i] = 1;\n            }\n        }\n\n        SegmentTree segTree(v);\n        int m = queries.size();\n\n        for (int i = 0; i < m; ++i) {\n            if (queries[i][0] == 1) {\n                if ((queries[i][2] - queries[i][1]) < 2) {\n                    res.push_back(0);\n                } else {\n                    res.push_back(segTree.query(queries[i][1]+1, queries[i][2] - 1)); // Convert 1-based to 0-based\n                }\n            } else {\n                int idx = queries[i][1];\n                nums[idx] = queries[i][2];\n\n                if (idx > 0 && idx < n - 1) {\n                    if (nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) {\n                        segTree.update(idx, 1);\n                    } else {\n                        segTree.update(idx, 0);\n                    }\n                }\n\n                if (idx - 1 > 0 && idx - 1 < n - 1) {\n                    if (nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > nums[idx]) {\n                        segTree.update(idx - 1, 1);\n                    } else {\n                        segTree.update(idx - 1, 0);\n                    }\n                }\n\n                if (idx + 1 > 0 && idx + 1 < n - 1) {\n                    if (nums[idx + 1] > nums[idx + 2] && nums[idx + 1] > nums[idx]) {\n                        segTree.update(idx + 1, 1);\n                    } else {\n                        segTree.update(idx + 1, 0);\n                    }\n                }\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1718508930",
    "subm_id": "1289694889"
}