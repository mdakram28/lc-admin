{
    "username": "agentsam007",
    "submission": "class TrieNode {\npublic:\n    map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* trie = build_trie(words, costs);\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    TrieNode* build_trie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (size_t i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = min(node->cost, costs[i]);\n        }\n        return root;\n    }\n};",
    "submit_ts": "1720323274",
    "subm_id": "1312371589"
}