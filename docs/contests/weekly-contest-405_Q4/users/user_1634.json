{
    "username": "aksh--_it",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> word_ends;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int cost, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.push_back({cost, index});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int m = words.size();\n        Trie trie;\n\n        for (int i = 0; i < m; ++i) {\n            trie.insert(words[i], costs[i], i);\n        }\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n      \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* top = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!top->children.count(target[j])) {\n                    break; // No more matching words in Trie\n                }\n\n                top = top->children[target[j]];\n                for (auto& p : top->word_ends) {\n                    int word_cost = p.first;\n                    int word_index = p.second;\n                    int word_len = words[word_index].size();\n\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + word_cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\n",
    "submit_ts": "1720323434",
    "subm_id": "1312375488"
}