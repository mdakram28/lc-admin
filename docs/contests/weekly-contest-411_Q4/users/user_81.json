{
    "username": "Yang Xiao",
    "submission": "const int N = 100007;\n\nlong long sum[N * 4];\nlong long delta[N * 4];\n\nvoid build(int left, int right, int x) {\n    sum[x] = delta[x] = 0;\n    if (left < right) {\n        int mid = (left + right) >> 1;\n        build(left, mid, x * 2);\n        build(mid + 1, right, x * 2 + 1);\n    }\n}\n\nvoid down(int left, int right, int x) {\n    if (delta[x] > 0) {\n        int mid = (left + right) >> 1;\n        delta[x * 2] += delta[x];\n        delta[x * 2 + 1] += delta[x];\n        sum[x * 2] += (mid - left + 1) * delta[x];\n        sum[x * 2 + 1] += (right - mid) * delta[x];\n        delta[x] = 0;\n    }\n}\n\nvoid up(int x) {\n    sum[x] = sum[x * 2] + sum[x * 2 + 1];\n}\n\nvoid increment(int left, int right, int l, int r, int x, long long d) {\n    if (l <= left && r >= right) {\n        delta[x] += d;\n        sum[x] += d * (right - left + 1);\n        return;\n    }\n    down(left, right, x);\n    int mid = (left + right) >> 1;\n    if (l <= mid) increment(left, mid, l, r, x * 2, d);\n    if (r > mid) increment(mid + 1, right, l, r, x * 2 + 1, d);\n    up(x);\n}\n\nlong long getSum(int left, int right, int l, int r, int x) {\n    if (l <= left && r >= right) {\n        return sum[x];\n    }\n    down(left, right, x);\n    int mid = (left + right) >> 1;\n    long long ret = 0;\n    if (l <= mid) ret += getSum(left, mid, l, r, x * 2);\n    if (r > mid) ret += getSum(mid + 1, right, l, r, x * 2 + 1);\n    up(x);\n    return ret;\n}\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        vector<tuple<int, int, int>> q;\n        for (int i = 0; i < queries.size(); ++i) {\n            q.push_back(make_tuple(queries[i][0], queries[i][1], i));\n        }\n        sort(q.begin(), q.end(), [&](const tuple<int, int, int>& l, const tuple<int, int, int>& r) {\n           return get<0>(l) > get<0>(r); \n        });\n        \n        build(0, n - 1, 1);\n        \n        vector<long long> ans(q.size(), 0);\n        int curQuery = 0;\n        int right = n - 1;\n        int count[2] = {0, 0};\n        for (int i = n - 1; i >= 0; --i) {\n            ++count[s[i] - '0'];\n            while (count[0] > k && count[1] > k) {\n                --count[s[right] - '0'];\n                --right;\n            }\n            increment(0, n - 1, i, right, 1, 1);\n            while (curQuery < q.size() && get<0>(q[curQuery]) == i) {\n                int l, r, id;\n                tie(l, r, id) = q[curQuery++];\n                ans[id] = getSum(0, n - 1, l, r, 1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723951836",
    "subm_id": "1359781236"
}