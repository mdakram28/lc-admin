{
    "username": "drstrange_1410",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &v, int root, int X, int Y, int n) {\n    queue<int> q;\n    vector<int> vis(n + 4, 0);\n    q.push(root);\n    vis[root] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : v[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = 1;\n            }\n        }\n    }\n    return vis[X] || vis[Y];\n}\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n         \n        int n = circles.size();\n        vector<vector<int>> v(n+ 4);\n        \n         for (int i = 0; i < n; ++i) {\n            int x , y , r;\n             x = circles[i][0];\n             y = circles[i][1] ;\n             r = circles[i][2] ;\n            if (x <= r) {\n                v[n].push_back(i);\n                v[i].push_back(n);\n            }\n            if (X - x <= r) {\n                v[n + 2].push_back(i);\n                v[i].push_back(n + 2);\n            }\n            if (y <= r) {\n                v[n + 1].push_back(i);\n                v[i].push_back(n + 1);\n            }\n            if (Y - y <= r) {\n                v[n + 3].push_back(i);\n                v[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double d = sqrt(pow(x - circles[j][0], 2) +\n                                       pow(y - circles[j][1], 2));\n                int radius_sum = r + circles[j][2];\n                if (radius_sum >= d) {\n                    v[i].push_back(j);\n                    v[j].push_back(i);\n                }\n            }\n        }\n        \n        int k = 0;\n        \nk = max(k, bfs(v, n, n + 1, n + 2, n + 4)); \n    k = max(k, bfs(v, n + 3, n + 2, n + 1, n + 4)); \n        if (k){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722137933",
    "subm_id": "1335777616"
}