{
    "username": "Andyp3",
    "submission": "#define ll long long\n\nclass HashedString {\n  private:\n\t// change M and B if you want\n\tstatic const long long M = 1e9 + 9;\n\tstatic const long long B = 9973;\n\n\t// pow[i] contains B^i % M\n\tstatic vector<long long> pow;\n\n\t// p_hash[i] is the hash of the first i characters of the given string\n\tvector<long long> p_hash;\n\n  public:\n\tHashedString(const string &s) : p_hash(s.size() + 1) {\n\t\twhile (pow.size() < s.size()) { pow.push_back((pow.back() * B) % M); }\n\n\t\tp_hash[0] = 0;\n\t\tfor (int i = 0; i < s.size(); i++) {\n\t\t\tp_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;\n\t\t}\n\t}\n\n\tlong long get_hash(int start, int end) {\n\t\tlong long raw_val =\n\t\t    (p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]));\n\t\treturn (raw_val % M + M) % M;\n\t}\n};\nvector<long long> HashedString::pow = {1};\n\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        string s = \"\";\n        for (auto it : colors) s+= '0'+it;\n        for (auto it : colors) s+= '0'+it;\n        string t1 = \"\";\n        string t2 = \"\";\n        for (int i = 0; i<k; i++){\n            if(i&1){\n                t1 +='0';\n                t2 += '1';\n            }\n            else{\n                t1 += '1';\n                t2 += '0';\n            }\n        }\n        HashedString hs1(s);\n        HashedString hs2(t1);\n        HashedString hs3(t2);\n        int count = 0;\n        for (int i = 0; i<colors.size(); i++){\n            if (hs1.get_hash(i,i+k-1)==hs2.get_hash(0,k-1) || hs1.get_hash(i,i+k-1)==hs3.get_hash(0,k-1)) count++;\n        }\n        return count;\n\n    }\n};",
    "submit_ts": "1720277464",
    "subm_id": "1311664929"
}