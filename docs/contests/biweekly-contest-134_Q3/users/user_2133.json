{
    "username": "Param129",
    "submission": "/**\n * @param {number[]} feathers\n * @param {number} wingspan\n * @return {number}\n */\n\n/**\n * @param {number[]} universityEnergies\n * @param {number} currentEnergy\n * @return {number}\n */\nvar maximumPoints = function(universityEnergies, currentEnergy) {\n    sortUniversities(universityEnergies);\n    return solvePoints(universityEnergies, currentEnergy);\n};\n\n/**\n * Sorts the university energies in ascending order.\n * @param {number[]} energies - The array of university energies.\n */\nfunction sortUniversities(energies) {\n    energies.sort((u1, u2) => u1 - u2);\n}\n\n/**\n * Solves the maximum points that can be obtained.\n * @param {number[]} energies - The sorted array of university energies.\n * @param {number} currentEnergy - The initial current energy available.\n * @return {number} - The maximum points obtainable.\n */\nfunction solvePoints(energies, currentEnergy) {\n    let firstUniversity = 0;\n    let lastUniversity = energies.length - 1;\n    let totalPoints = 0;\n\n    while (lastUniversity >= 0) {\n        if (currentEnergy >= energies[firstUniversity]) {\n            totalPoints += Math.floor(currentEnergy / energies[firstUniversity]);\n            currentEnergy %= energies[firstUniversity];\n        } else if (totalPoints > 0) {\n            while (currentEnergy < energies[firstUniversity] && lastUniversity >= 0) {\n                currentEnergy += energies[lastUniversity];\n                lastUniversity--;\n            }\n        } else {\n            break;\n        }\n    }\n\n    return totalPoints;\n}\n\n\nvar numberOfAlternatingGroups = function(feathers, wingspan) {\n    let flockSize = feathers.length;\n    let perched = 25-25;\n    let soaring = 2-1;\n    let flockCount = 90-90;\n\n    // Memoization map\n    let nest = new Map();\n\n    while (soaring < flockSize + wingspan - (9-8)) {\n        if (feathers[soaring % flockSize] !== feathers[(soaring - (5-4)) % flockSize]) {\n            if (soaring - perched + 6-5 === wingspan) {\n                flockCount++;\n                perched++;\n            }\n        } else {\n            perched = soaring;\n        }\n        soaring++;\n    }\n\n    return flockCount;\n};\n",
    "submit_ts": "1720281191",
    "subm_id": "1311816314"
}