{
    "username": "leetcode_ravi_7",
    "submission": "class Solution {\npublic:\n    int min_operations(vector<int>& A) \n        { \n        if (A.size() == 0) \n            return 0; \n        int ans = A[0]; \n\n        for (int i = 1; i < A.size(); i++) { \n            ans += max(A[i] - A[i - 1], 0); \n        } \n        return ans; \n        } \n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n=nums.size();\n        vector<int> v(n,0);\n        for(int i=0;i<n;i++){\n            v[i] = nums[i] - target[i];\n        }\n        vector<pair<int,int>> res;\n        int sign = v[0] >= 0 ? 1 : 0;\n        int prev =0;\n        for(int i=1;i<n;i++){\n            int curSign = v[i] >= 0 ? 1 : 0;\n            if(sign != curSign) {\n                sign =curSign;\n                res.push_back({prev,i-1});\n                prev= i;\n            }\n        }\n        res.push_back({prev,n-1});\n        long long finalAns = 0;\n        for(auto it:res){\n            int st = it.first;\n            int end=it.second;\n            vector <int> input;\n            for(int i=st;i<=end;i++){\n                input.push_back(abs(v[i]));\n            }\n            int maxi = 0;\n            maxi = min_operations(input);\n            long long temp =maxi;\n            finalAns += temp;\n        }\n        return finalAns;\n\n    }\n};",
    "submit_ts": "1721533158",
    "subm_id": "1328002605"
}