{
    "username": "yashmaini",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> diffToValuesMap = new HashMap<>();\n        List<Integer> valuesList = new ArrayList<>();\n\n        int length = nums.length;\n\n        for (int i = 0; i < length / 2; ++i) {\n            int left = nums[i];\n            int right = nums[length - i - 1];\n            int currentDiff = Math.abs(left - right);\n\n            int maxValue = Math.max(left, Math.max(right, Math.max(k - left, k - right)));\n\n            diffToValuesMap.computeIfAbsent(currentDiff, key -> new ArrayList<>()).add(maxValue);\n            valuesList.add(maxValue);\n        }\n\n        int minChangesRequired = length;\n        Collections.sort(valuesList);\n\n        for (Map.Entry<Integer, List<Integer>> entry : diffToValuesMap.entrySet()) {\n            int currentDiff = entry.getKey();\n            List<Integer> valuesForDiff = entry.getValue();\n\n            int position = Collections.binarySearch(valuesList, currentDiff);\n            if (position < 0) {\n                position = -position - 1;\n            } else {\n                while (position > 0 && valuesList.get(position - 1) == currentDiff) {\n                    position--;\n                }\n            }\n\n            int changesRequired = position * 2 + (length / 2 - position);\n\n            for (int maxValue : valuesForDiff) {\n                if (maxValue < currentDiff) {\n                    changesRequired -= 2;\n                } else {\n                    changesRequired -= 1;\n                }\n            }\n\n            minChangesRequired = Math.min(minChangesRequired, changesRequired);\n        }\n\n        return minChangesRequired;\n    }\n}",
    "submit_ts": "1721489212",
    "subm_id": "1327446439"
}