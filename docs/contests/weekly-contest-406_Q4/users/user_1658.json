{
    "username": "dibbacodes",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCuts, std::vector<int>& verticalCuts) {\n        // Sort the cuts in ascending order and then reverse to get descending order\n        sort(horizontalCuts.begin(), horizontalCuts.end());\n        sort(verticalCuts.begin(), verticalCuts.end());\n        reverse(horizontalCuts.begin(), horizontalCuts.end());\n        reverse(verticalCuts.begin(), verticalCuts.end());\n\n        int hIndex = 0, vIndex = 0;\n        int horizontalSections = 1, verticalSections = 1;\n        long long totalCost = 0;\n\n        // Process the cuts while both indices are within their respective arrays\n        while (hIndex < horizontalCuts.size() && vIndex < verticalCuts.size()) {\n            if (horizontalCuts[hIndex] <= verticalCuts[vIndex]) {\n                totalCost += static_cast<long long>(verticalCuts[vIndex]) *\n                horizontalSections;\n                ++verticalSections;\n                ++vIndex;\n                \n            } else {\n                totalCost += static_cast<long long>(horizontalCuts[hIndex]) *\n                verticalSections;\n                ++horizontalSections;\n                ++hIndex;\n            }\n        }\n\n        // Process remaining vertical cuts, if any\n        while (vIndex < verticalCuts.size()) {\n            totalCost += static_cast<long long>(verticalCuts[vIndex]) *\n            horizontalSections;\n            ++vIndex;\n        }\n\n        // Process remaining horizontal cuts, if any\n        while (hIndex < horizontalCuts.size()) {\n            totalCost += static_cast<long long>(horizontalCuts[hIndex]) *\n            verticalSections;\n            ++hIndex;\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925645",
    "subm_id": "1320261551"
}