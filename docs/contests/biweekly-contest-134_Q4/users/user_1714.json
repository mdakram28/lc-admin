{
    "username": "lakkshyag",
    "submission": "class Solution\n{\n    public:\n    \n    int const INT_SIZE = 32;\n    \n    void bitArrayOperation(int* bitArray, int const &n, int num, int const op)\n    {// add operation op = 1, sub operation op = -1;\n        int i = 0;\n        while ( i <= n-1 )\n        {\n            if ( (num & (1 << i)) ) bitArray[i] += 1*op;\n            i++;\n        }\n    }\n    \n    int bitArrayToNum(int* bitArray, int const &n, int start, int end)\n    {\n        int num = 0;\n        for (int i = 0; i <= n-2; i++)\n        {\n            if (bitArray[i] == (end - start + 1)) num += (1 << i);\n        }\n        \n        return num;\n    }\n    \n    void bitArrayPrint(int* bitArray, int const n = 32)\n    {\n        for (int i = 0; i <= n-1; i++) cout<<bitArray[i]<<\" \";\n        cout<<endl;\n    }\n    \n    long long returnMoreThanEqualK(vector<int>& nums, int k)\n    {//bit array = count of ones, more used to that\n        int const n = nums.size();\n        long long ans = 0;\n        int bitArray[32] = {0};\n                \n        int i = 0, j = 0;\n        while (j <= n-1)\n        {\n            bitArrayOperation(bitArray, INT_SIZE, nums[j], 1);            \n            while (i <= j && bitArrayToNum(bitArray, INT_SIZE, i, j) < k)\n            {\n                bitArrayOperation(bitArray, INT_SIZE, nums[i], -1);                                \n                i++;\n            }\n            \n            ans += (j - i + 1);            \n            j++;\n        }\n        \n        return ans;\n    }\n    \n    \n    long long countSubarrays(vector<int>& nums, int k)\n    {\n        int const n = nums.size();\n        long long ans = returnMoreThanEqualK(nums, k) - returnMoreThanEqualK(nums, k+1);\n\n        return ans;\n    }\n};",
    "submit_ts": "1720279681",
    "subm_id": "1311760905"
}