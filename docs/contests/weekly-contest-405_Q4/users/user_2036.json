{
    "username": "hani_28",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> childNodes;\n    int minimumCost;\n\n    TrieNode() : minimumCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* rootNode;\n\n    Trie() {\n        rootNode = new TrieNode();\n    }\n\n    void insert(string word, int cost) {\n        TrieNode* currentNode = rootNode;\n        for (char character : word) {\n            if (!currentNode->childNodes[character]) {\n                currentNode->childNodes[character] = new TrieNode();\n            }\n            currentNode = currentNode->childNodes[character];\n        }\n        currentNode->minimumCost = min(currentNode->minimumCost, cost);\n    }\n\n    int search(string prefix) {\n        TrieNode* currentNode = rootNode;\n        for (char character : prefix) {\n            if (!currentNode->childNodes[character]) {\n                return INT_MAX;\n            }\n            currentNode = currentNode->childNodes[character];\n        }\n        return currentNode->minimumCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        Trie trie;\n        for (int index = 0; index < words.size(); ++index) {\n            trie.insert(words[index], costs[index]);\n        }\n\n        vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int startIndex = 0; startIndex < targetLength; ++startIndex) {\n            if (dp[startIndex] == INT_MAX) continue;  // Skip unreachable states\n\n            TrieNode* currentNode = trie.rootNode;\n            for (int endIndex = startIndex; endIndex < targetLength; ++endIndex) {\n                char character = target[endIndex];\n                if (!currentNode->childNodes[character]) break;\n                currentNode = currentNode->childNodes[character];\n                if (currentNode->minimumCost != INT_MAX) {\n                    dp[endIndex + 1] = min(dp[endIndex + 1], dp[startIndex] + currentNode->minimumCost);\n                }\n            }\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n\n",
    "submit_ts": "1720323374",
    "subm_id": "1312373990"
}