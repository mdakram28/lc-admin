{
    "username": "LowSugarCoke",
    "submission": "class Solution {\npublic:\n    array<int, 400004> mxs, mns, mxd, mnd;\n    void Spull(int p){\n        mxs[p] = max(mxs[2 * p], mxs[2 * p + 1]);\n        mns[p] = min(mns[2 * p], mns[2 * p + 1]);\n    }\n    void Supdate(int p, int l, int r, int x, int v){\n        if(l > x || r < x) return;\n        if(l == r){\n            mxs[p] = mns[p] = v;\n            return;\n        }\n        Supdate(2 * p, l, (l + r) / 2, x, v);\n        Supdate(2 * p + 1, (l + r) / 2 + 1, r, x, v);\n        Spull(p);\n    }\n    int Squery(int p, int l, int r, int ql, int qr, int t){\n        if(r < ql || l > qr) return t? -1e9 : 1e9;\n        if(l >= ql && r <= qr) return t? mxs[p] : mns[p];\n        if(t) return max(Squery(2 * p, l, (l + r) / 2, ql, qr, t), Squery(2 * p + 1, (l + r) / 2 + 1, r, ql, qr, t));\n        else return min(Squery(2 * p, l, (l + r) / 2, ql, qr, t), Squery(2 * p + 1, (l + r) / 2 + 1, r, ql, qr, t));\n    }\n    void Dpull(int p){\n        mxd[p] = max(mxd[2 * p], mxd[2 * p + 1]);\n        mnd[p] = min(mnd[2 * p], mnd[2 * p + 1]);\n    }\n    void Dupdate(int p, int l, int r, int x, int v){\n        if(l > x || r < x) return;\n        if(l == r){\n            mxd[p] = mnd[p] = v;\n            return;\n        }\n        Dupdate(2 * p, l, (l + r) / 2, x, v);\n        Dupdate(2 * p + 1, (l + r) / 2 + 1, r, x, v);\n        Dpull(p);\n    }\n    int Dquery(int p, int l, int r, int ql, int qr, int t){\n        if(r < ql || l > qr) return t? -1e9 : 1e9;\n        if(l >= ql && r <= qr) return t? mxd[p] : mnd[p];\n        if(t) return max(Dquery(2 * p, l, (l + r) / 2, ql, qr, t), Dquery(2 * p + 1, (l + r) / 2 + 1, r, ql, qr, t));\n        else return min(Dquery(2 * p, l, (l + r) / 2, ql, qr, t), Dquery(2 * p + 1, (l + r) / 2 + 1, r, ql, qr, t));\n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        int x, y, n = points.size(), dis = 1e9;\n        for(int i = 0; i < 400004; i++){\n            mxs[i] = mxd[i] = -1e9;\n            mns[i] = mnd[i] = 1e9;\n        }\n        for(int i = 0; i < n; i++){\n            x = points[i][0], y = points[i][1];\n            Supdate(1, 0, n - 1, i, x + y);\n            Dupdate(1, 0, n - 1, i, x - y);\n        }\n        for(int i = 0; i < n; i++){\n            dis = min(dis, max(max(Squery(1, 0, n - 1, 0, i - 1, 1), Squery(1, 0, n - 1, i + 1, n - 1, 1)) - min(Squery(1, 0, n - 1, 0, i - 1, 0), Squery(1, 0, n - 1, i + 1, n - 1, 0)), max(Dquery(1, 0, n - 1, 0, i - 1, 1), Dquery(1, 0, n - 1, i + 1, n - 1, 1)) - min(Dquery(1, 0, n - 1, 0, i - 1, 0), Dquery(1, 0, n - 1, i + 1, n - 1, 0))));\n        }\n        return dis;\n    }\n};"
}