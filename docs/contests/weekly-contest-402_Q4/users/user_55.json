{
    "username": "gooday-3",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = (int) nums.size();\n        \n        vector<int> X(n, 0);\n        for (int i = 1; i + 1 < n; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                X[i] = 1;\n            }\n        }\n        \n        FenwickTree ft(n + 2);\n        for (int i = 0; i < n; ++i) {\n            ft.put(i, X[i]);\n        }\n        \n        vector<int> res;\n        for (auto& V: queries) {\n            int t = V[0];\n            if (t == 1) {\n                int l = V[1];\n                int r = V[2];\n                ++l, --r;\n                auto ans = ft.get(l, r);\n                res.push_back(ans);\n            } else {\n                int p = V[1];\n                int x = V[2];\n                \n                nums[p] = x;\n                \n                for (int i = -1; i <= 1; ++i) {\n                    int pp = p + i;\n                    if (!(pp >= 0 && pp < n)) {\n                        continue;\n                    }\n                    int nx = 0;\n                    if (pp - 1 >= 0 && pp + 1 < n && nums[pp - 1] < nums[pp] && nums[pp] > nums[pp + 1]) {  \n                        nx = 1;                     \n                    }\n                    \n                    int diff = nx - X[pp];\n                    if (diff != 0) {\n                        ft.put(pp, diff);\n                    }\n                    X[pp] = nx;\n                }\n            }\n        }\n        \n        return res;\n    }\n    \nprivate:\n    class FenwickTree {\n    public:\n        FenwickTree(int n) : N(n), data(N, 0) {\n            h = 0;\n            while (1 << (h + 1) <= N) {\n                ++h;\n            }\n        }\n\n        void reset() {\n            fill(data.begin(), data.end(), 0);\n        }\n\n        void put(int x, long long v) {\n            assert(x >= 0);\n            for (; x < N; x |= x + 1) {\n                data[x] += v;\n            }\n        }\n\n        long long get(int x) {\n            assert(x < N);\n            long long res = 0;\n            for (; x >= 0; x = (x & (x + 1)) - 1) {\n                res += data[x];\n            }\n            return res;\n        }\n\n\n        long long get(int l, int r) {\n            if (l > r) {\n                return 0;\n            }\n            return get(r) - get(l - 1);\n        }\n\n    private:\n        int N;\n        int h;\n        vector<long long> data;\n};\n\n};",
    "submit_ts": "1718506317",
    "subm_id": "539774206"
}