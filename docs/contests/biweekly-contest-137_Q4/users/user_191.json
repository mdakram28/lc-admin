{
    "username": "Mohit",
    "submission": "class Solution {\n    HashMap<Integer, int[]> map;\n    int[][] dp; // suffix max\n\n    public long maximumValueSum(int[][] board) {\n      int n = board.length;\n      int m = board[0].length;\n      map = new HashMap<>();\n\n      // build 3 max per row\n      for (int i = 0; i < n; i++) {\n        Integer[] sort = new Integer[m];\n        int[] cu = board[i];\n        Arrays.setAll(sort, j -> j);\n        Arrays.sort(sort, (x, y) -> cu[y] - cu[x]);\n        map.put(i, new int[] { sort[0], sort[1], sort[2] });\n      }\n\n      // build suffix max\n      dp = new int[n][m];\n      for (int i = n - 1; i >= 0; i--) {\n        if (i == n - 1) {\n          dp[i] = board[n - 1];\n        } else {\n          for (int j = 0; j < m; j++) {\n            dp[i][j] = Math.max(dp[i + 1][j], board[i][j]);\n          }\n        }\n\n        int index = i + 501;\n\n        Integer[] sort = new Integer[m];\n        Arrays.setAll(sort, j -> j);\n        int[] cu = dp[i];\n        Arrays.sort(sort, (x, y) -> cu[y] - cu[x]);\n        map.put(index, new int[] { sort[0], sort[1], sort[2] });\n      }\n\n      // try all combinations of rows\n      long max = Long.MIN_VALUE;\n\n      for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n - 1; j++) {\n          int k = j + 1;\n          int index = k + 501;\n          long curr = maxall(i, j, index, board);\n          max = Math.max(max, curr);\n        }\n      }\n\n      return max;\n    }\n\n    long maxall(int a, int b, int c, int[][] board) {\n      long max = Long.MIN_VALUE;\n      max = Math.max(max, maxcol(a, b, c, board));\n      max = Math.max(max, maxcol(a, c, b, board));\n      max = Math.max(max, maxcol(b, a, c, board));\n      max = Math.max(max, maxcol(b, c, a, board));\n      max = Math.max(max, maxcol(c, a, b, board));\n      max = Math.max(max, maxcol(c, b, a, board));\n      return max;\n    }\n\n    long maxcol(int a, int b, int c, int[][] board) {\n      long curr = 0;\n\n      int[] a1 = map.get(a);\n      int[] b1 = map.get(b);\n      int[] c1 = map.get(c);\n\n      int[] a2 = a >= 501 ? dp[a - 501] : board[a];\n      int[] b2 = b >= 501 ? dp[b - 501] : board[b];\n      int[] c2 = c >= 501 ? dp[c - 501] : board[c];\n      Set<Integer> taken = new HashSet<>();\n\n      curr += 1L * (a2[a1[0]]);\n      taken.add(a1[0]);\n\n      if (!taken.contains(b1[0])) {\n        curr += 1L * (b2[b1[0]]);\n        taken.add(b1[0]);\n      } else {\n        curr += 1L * (b2[b1[1]]);\n        taken.add(b1[1]);\n      }\n\n      if (!taken.contains(c1[0])) {\n        curr += 1L * (c2[c1[0]]);\n        taken.add(c1[0]);\n      } else if (!taken.contains(c1[1])) {\n        curr += 1L * (c2[c1[1]]);\n        taken.add(c1[1]);\n      } else {\n        curr += 1L * (c2[c1[2]]);\n      }\n\n      return curr;\n    }\n  }",
    "submit_ts": "1723909767",
    "subm_id": "1359205021"
}