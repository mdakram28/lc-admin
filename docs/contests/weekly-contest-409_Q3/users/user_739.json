{
    "username": "6cdh",
    "submission": "(define (shortest-distance-after-queries n queries)\n  (define farthest (make-segtree n 0 max))\n\n  (for ([i (sub1 n)])\n    (segtree-set! farthest i (add1 i)))\n\n  (define (distof from to)\n    (if (= from to)\n        0\n        (add1 (distof (segtree-ref farthest from) to))))\n\n  (define min-dist (sub1 n))\n  (for/list ([q queries])\n    (match q\n      [(list u v)\n       (define old (segtree-ref farthest u))\n       (when (and (<= (segtree-query farthest 0 (sub1 u)) u)\n                  (> v old))\n         (set! min-dist (- min-dist (distof old v))))\n       (segtree-set! farthest u (max old v))\n       min-dist])))\n\n(require (rename-in racket/unsafe/ops\n                    [unsafe-fxquotient quotient]))\n\n(define-syntax aref\n  (syntax-rules ()\n    [(_ arr) arr]\n    [(_ arr i dims ...)\n     (aref (vector-ref arr i) dims ...)]))\n\n(define-syntax aset!\n  (syntax-rules ()\n    [(_ arr dim new-val)\n     (vector-set! arr dim new-val)]\n    [(_ arr dim1 dims ... new-val)\n     (aset! (vector-ref arr dim1) dims ... new-val)]))\n\n(define (tree1-father k)\n  (quotient k 2))\n\n(define (tree1-left k)\n  (* 2 k))\n\n(define (tree1-right k)\n  (add1 (* 2 k)))\n\n(define (make-segtree len init op)\n  (let ([n (max 2 (expt 2 (exact-ceiling (log len 2))))])\n    (list (make-vector (* 2 n) init) n op)))\n\n(define (segtree-ref segtree k)\n  (match-let ([(list tree n op) segtree])\n    (aref tree (+ k n))))\n\n(define (segtree-query segtree left right)\n  (match-let ([(list tree n op) segtree])\n    (let loop ([l (+ left n)] [r (+ right n)] [result (aref tree 0)])\n      (cond [(> l r) result]\n            [(odd? l) (loop (add1 l) r (op result (aref tree l)))]\n            [(even? r) (loop l (sub1 r) (op result (aref tree r)))]\n            [else (loop (tree1-father l) (tree1-father r) result)]))))\n\n(define (segtree-set! segtree key newv)\n  (match-let ([(list tree n op) segtree])\n    (aset! tree (+ key n) newv)\n\n    (let loop ([k (tree1-father (+ key n))])\n      (when (>= k 1)\n        (aset! tree k\n               (op (aref tree (tree1-left k))\n                   (aref tree (tree1-right k))))\n        (loop (tree1-father k))))))",
    "submit_ts": "1722742279",
    "subm_id": "1343765261"
}