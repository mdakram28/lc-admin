{
    "username": "guillermomarr3",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost); \n    }\n\n    int find(const string& target, int start) {\n        TrieNode* node = root;\n        int n = target.size();\n        int minCost = INT_MAX;\n        for (int i = start; i < n; ++i) {\n            if (node->children.find(target[i]) == node->children.end()) {\n                break;\n            }\n            node = node->children[target[i]];\n            if (node->cost != INT_MAX) {\n                minCost = min(minCost, node->cost);\n            }\n        }\n        return minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        Trie trie;\n\n      \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n       \n        dp[0] = 0;\n\n      \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            int currentCost = dp[i];\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], currentCost + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324644",
    "subm_id": "1312404571"
}