{
    "username": "user3751Xt",
    "submission": "#include <unordered_map>\n\nclass Solution {\npublic:\n    using ll = long long;\n    using MemoKey = std::tuple<ll, int, bool>;\n\n    struct MemoKeyHash {\n        std::size_t operator()(const MemoKey& key) const {\n            return std::hash<ll>()(std::get<0>(key)) ^ std::hash<int>()(std::get<1>(key)) ^ std::hash<bool>()(std::get<2>(key));\n        }\n    };\n\n    int waysToReachStair(int k) {\n        int ans = 0;\n        std::unordered_map<MemoKey, int, MemoKeyHash> memo;\n        lol(1, k, 0, false, ans, memo);\n        return ans;    \n    }\n\nprivate:\n    void lol(ll cur, ll target, int shift, bool prevDown, int& count, std::unordered_map<MemoKey, int, MemoKeyHash>& memo) {\n        if (cur > target + 1) return;\n\n        MemoKey key = std::make_tuple(cur, shift, prevDown);\n        if (memo.find(key) != memo.end()) {\n            count += memo[key];\n            return;\n        }\n\n        int localCount = 0;\n        if (cur == target) {\n            localCount++;\n        }\n        if (!prevDown && cur != 0) {\n            int tempCount = 0;\n            lol(cur - 1, target, shift, true, tempCount, memo);\n            localCount += tempCount;\n        }\n        int tempCount = 0;\n        lol(cur + (1 << shift), target, shift + 1, false, tempCount, memo);\n        localCount += tempCount;\n\n        memo[key] = localCount;\n        count += localCount;\n    }\n};\n",
    "submit_ts": "1716089165",
    "subm_id": "1261834884"
}