{
    "username": "adoring-bhabha",
    "submission": "import bisect\n\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        np = n // 2\n        max_X = [] # max X avai in one change\n        for i in range(np):\n            n1, n2 = nums[i], nums[n - 1 - i]\n            if n1 > n2:\n                n1, n2 = n2, n1\n            max_X.append(max(n2, k - n1))\n        max_X.sort()\n        \n        res = np\n        cur_max_freq = 0\n        \n        diffs = [abs(nums[i] - nums[n - 1 - i]) for i in range(np)]\n        freqs = {}\n        diffs.sort()\n        i = 0\n        while i < len(diffs):\n            if diffs[i] in freqs:\n                freqs[diffs[i]] += 1\n            else:\n                freqs[diffs[i]] = 1\n            i += 1\n            \n        i = 0\n        while i < len(diffs):\n            X = diffs[i]\n            if freqs[X] <= cur_max_freq:\n                i += freqs[X]\n                continue\n            cur_max_freq = freqs[X]\n            j = i + freqs[X] - 1 # end of X\n            \n            cur_res = 0\n            # cur_res += np - i - freqs[X] # diff > X, change 1 time\n            cur_res += np - freqs[X]\n            no_twice = bisect.bisect_left(max_X, X)\n            cur_res += no_twice\n            res = min(res, cur_res)\n            \n        return res\n            \n        \n        ",
    "submit_ts": "1721489507",
    "subm_id": "548319067"
}