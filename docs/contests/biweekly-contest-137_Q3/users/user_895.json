{
    "username": "larry",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m = len(board)\n        n = len(board[0])\n        \n        # Check every combo of rows (2 * 10^7)\n        # DP: store the top three indices in each row\n        top = [[(float('-inf'), -1)] * 3 for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] > top[i][0][0]:\n                    top[i][2] = top[i][1]\n                    top[i][1] = top[i][0]\n                    top[i][0] = (board[i][j], j)\n                elif board[i][j] > top[i][1][0]:\n                    top[i][2] = top[i][1]\n                    top[i][1] = (board[i][j], j)\n                elif board[i][j] > top[i][2][0]:\n                    top[i][2] = (board[i][j], j)\n                    \n        #print(top)\n        # Then basically get those nine elements and take the top 3 until they are not all in the same row\n        lst = list(itertools.combinations(range(m), 3))\n        \n        res = float('-inf')\n        for x, y, z in lst:\n            lst1 = top[x]\n            lst2 = top[y]\n            lst3 = top[z]\n            \n            for i in lst1:\n                for j in lst2:\n                    for k in lst3:\n                        if i[1] != j[1] and i[1] != k[1] and j[1] != k[1]:\n                            res = max(res, i[0] + j[0] + k[0])\n        \n        return res\n        ",
    "submit_ts": "1723907955",
    "subm_id": "1359131868"
}