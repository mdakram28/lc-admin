{
    "username": "Rad0miR",
    "submission": "public class Solution \n{\n    class Node \n    {\n        public int cost = Int32.MaxValue;\n        public Node[] _next = new Node[26];\n        \n        public ref Node next(char c) => ref _next[c - 'a'];\n    }\n    \n    public int MinimumCost(string target, string[] words, int[] costs) \n    {\n        Node root = new();\n        foreach (var p in words.Zip(costs)) Add(p.First, p.Second);\n        \n        Dictionary<Node, int> cur = new() { [root] = 0 }, next = new();\n        \n        foreach (char c in target) \n        {\n            foreach (var kvp in cur) \n            {\n                Node nn = kvp.Key.next(c);\n                if (nn is null) continue;\n                \n                AddToNext(nn, kvp.Value);\n                if (nn.cost != Int32.MaxValue) AddToNext(root, kvp.Value + nn.cost);\n                \n                void AddToNext(Node pos, int cost) \n                {\n                    int val = next.TryGetValue(pos, out int res) ? res : Int32.MaxValue;\n                    next[pos] = Math.Min(cost, val);\n                }\n            }\n            (cur, next) = (next, cur);\n            next.Clear();\n        }\n        \n        return cur.TryGetValue(root, out int res) ? res : -1;\n        \n        void Add(string s, int cost) \n        {\n            Node cur = root;\n            foreach (char c in s) \n            {\n                if (cur.next(c) is null) cur.next(c) = new Node();\n                cur = cur.next(c);\n            }\n            cur.cost = Math.Min(cost, cur.cost);\n        }\n    }\n}",
    "submit_ts": "1720321969",
    "subm_id": "1312337163"
}