{
    "username": "zk299",
    "submission": "class SegmentNode:\n    def __init__(self, start, end, sum, left=None, right=None):\n        self.start = start\n        self.end = end\n        self.sum = sum\n        self.left = left\n        self.right = right\n\n# # [1,2,7,4]\n# #     (0, 3, 1+2+7+4)\n#       /             \\\n#   [0,1, 1+2]    [2,3, 7+4]\n#   /      \\         /        \\\n#  [0,0,1] [1,1,2]  [2,2,7]   [3,3,4]\n\ndef build_tree(nums, start, end):\n    if start == end:\n        return SegmentNode(start, end, nums[start])\n    mid = (start + end) // 2\n    left = build_tree(nums, start, mid)\n    right = build_tree(nums, mid + 1, end)\n    return SegmentNode(start, end, left.sum + right.sum, left, right)\n    \ndef update_tree(root, index, val):\n    if root.start == root.end == index:\n        root.sum = val\n        return\n    mid = (root.start + root.end) // 2\n    if index <= mid:\n        update_tree(root.left, index, val)\n    else:\n        update_tree(root.right, index, val)\n    root.sum = root.left.sum + root.right.sum\n\ndef query_sum(root, i, j):\n    if i > j: return 0\n    # time complexity: O(logn + k)\n    if root.start == i and root.end == j:\n        return root.sum\n    mid = (root.start + root.end) // 2\n    if j <= mid:\n        return query_sum(root.left, i, j)\n    elif i > mid:\n        return query_sum(root.right, i, j)\n    else:\n        return query_sum(root.left, i, mid) \\\n            + query_sum(root.right, mid + 1, j)\n\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        new_nums = [0] * n\n        for i in range(1,n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                new_nums[i] = 1\n                \n        # print(new_nums)\n        \n        root = build_tree(new_nums, 0, n-1)\n        \n        # print(query_sum(root, 0, n-1))\n        \n        \n        def get_val(idx):\n            if idx-1< 0 or idx+1 >= n:\n                return 0\n            if nums[idx] > nums[idx+1] and nums[idx] > nums[idx-1]:\n                return 1\n            return 0\n        \n        \n        res = []\n        for a,b,c in queries:\n            if a == 1:\n                res.append(query_sum(root, b+1, c-1))\n            else:\n                if b == 0:\n                    nums[b] = c\n                    update_tree(root, b+1, get_val(b+1))\n                elif b == n-1:\n                    nums[b] = c\n                    update_tree(root, b-1, get_val(b-1))\n                else:\n                    nums[b] = c\n                    update_tree(root, b, get_val(b))\n                    update_tree(root, b-1, get_val(b-1))\n                    update_tree(root, b+1, get_val(b+1))\n                    \n        \n        return res\n                        \n                \n        \n        \n        ",
    "submit_ts": 1718507815.0
}