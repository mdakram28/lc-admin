{
    "username": "ANKITbittu",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> children;\n    int val;\n    //creating the constructure\n    Node() : val(1e9) {}\n};\n\nclass Trie {\npublic:\n    Node* root;\n  ///node create\n\n    Trie() {\n        root=new Node();\n    }\n///add the element\n    void add(const string& word, int bt) {\n        Node* node = root;\n        for (auto c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new Node();\n            }\n            node = node->children[c];\n        }\n        node->val = min(node->val,bt);\n    }\n///remove the element\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n      vector<int>temp(n + 1, 1e9);\n        temp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.add(words[i], costs[i]);\n        }\n        for (int i = 0; i<n; i++) {\n            if (temp[i] == 1e9) continue;\n            Node* ak = trie.root;\n            for (int j = i; j < n; j++) {\n                if (!ak->children.count(target[j])) break;\n                ak = ak->children[target[j]];\n                if (ak->val !=1e9) {\n                    temp[j + 1]=min(temp[j + 1], temp[i]+ak->val);\n                }\n            }\n        }\n///findng value minimum of whole if 1e9 then put -1 otherwise ans\n       if(temp[n] == 1e9){\n        return -1;\n       }\n return  temp[n];\n    }\n};",
    "submit_ts": "1720323972",
    "subm_id": "1312388547"
}