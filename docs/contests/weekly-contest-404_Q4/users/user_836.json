{
    "username": "SanskarDhyani",
    "submission": "// Function to perform BFS and return the farthest node and its distance from the start node\npair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n    int n = adj.size();\n    vector<int> dist(n, -1);\n    queue<int> q;\n    q.push(start);\n    dist[start] = 0;\n    int farthest_node = start, max_dist = 0;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                if (dist[neighbor] > max_dist) {\n                    max_dist = dist[neighbor];\n                    farthest_node = neighbor;\n                }\n            }\n        }\n    }\n    return {farthest_node, max_dist};\n}\n\n// Function to calculate the diameter of a tree given its adjacency list\nint calculateDiameter(const vector<vector<int>>& adj) {\n    pair<int, int> p1 = bfs(0, adj);\n    pair<int, int> p2 = bfs(p1.first, adj);\n    return p2.second;\n}\n\n// Function to calculate the radius of a tree given its diameter\nint calculateRadius(int diameter) {\n    return (diameter + 1) / 2;\n}\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n          int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        // Create adjacency lists for the two trees\n        vector<vector<int>> adj1(n), adj2(m);\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        // Calculate the diameters of the two trees\n        int diameter1 = calculateDiameter(adj1);\n        int diameter2 = calculateDiameter(adj2);\n\n        // Calculate the radii of the two trees\n        int radius1 = calculateRadius(diameter1);\n        int radius2 = calculateRadius(diameter2);\n\n        // The minimum possible diameter of the resulting tree\n        return max({diameter1, diameter2, radius1 + radius2 + 1});\n    }\n};",
    "submit_ts": "1719719680",
    "subm_id": "1304447929"
}