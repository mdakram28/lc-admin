{
    "username": "junwan1979",
    "submission": "from sortedcontainers import SortedList\nclass Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        \n        res, sec = 0, []\n        for i, n in enumerate(nums):\n            k = n - target[i]\n            if not sec:\n                sec.append(k)\n            else:\n                if sec[-1] >= 0:\n                    if k >= 0:\n                        sec.append(k)\n                    else:\n                        res += self.getMin(sec)\n                        sec = [k]\n                else:\n                    if k < 0:\n                        sec.append(k)\n                    else:\n                        res += self.getMin(sec)\n                        sec = [k]\n                        \n        res += self.getMin(sec)\n        return res\n                        \n    \n    def getMin(self, nums:List[int]) -> int:\n        if nums[0] < 0:\n            nums = [-k for k in nums]\n        s_l = []\n        for i, n in enumerate(nums):\n            s_l.append((n, i))\n        \n        s_l.sort()\n        \n        search_list = SortedList()\n        \n        res = 0\n        \n        for n, index in s_l:\n            p = (index, n)\n            i = search_list.bisect_left(p)\n            n1, n2 = 0, 0\n            if i > 0:\n                n1 = search_list[i - 1][1]\n            if i < len(search_list):\n                n2 = search_list[i][1]\n            res += n - max(n1, n2)\n            search_list.add(p)\n        return res\n        \n        ",
    "submit_ts": "1721532896",
    "subm_id": "1327996597"
}