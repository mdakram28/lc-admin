{
    "username": "sandbag",
    "submission": "class fenwick_tree{\n    public:\n    vector<int> v;\n    int n;\n    fenwick_tree(int x) {\n        v.resize(x, 0);\n        n = x;\n    }\n    int get(int x) {\n        int res = 0;\n        while (x >= 0) {\n            res += v[x];\n            x &= (x+1);\n            x--;\n        }\n        return res;\n    }\n    int query(int a, int b) {\n        return get(b)-get(a-1);\n    }\n    void add (int i, int x) {\n        while (i < n) {\n            v[i] += x;\n            i |= (i+1);\n        }\n    }\n};\n\n\nclass Solution {\npublic:\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int cnt = 0;\n        int n = nums.size();\n        vector<int> ans;\n        fenwick_tree ft(nums.size());\n        for (int i = 1; i < nums.size()-1; i++) {\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                cnt++;\n                ft.add(i, 1);\n            }\n        }\n        for (auto i : queries) {\n            if(i[0] == 1) {\n                // for (auto i : nums) cout << i << \" \"; cout << endl;\n                // for (int j = 0; j < n; j++) cout << ft.query(j, j) << \" \"; cout << endl;\n                // cout << i[1]+1 << \" \" << i[2]-1 << endl;\n                if(i[1]+1 >= n || i[2]-1 < 0 || (i[1]+1) > (i[2]-1)) ans.push_back(0);\n                else {\n                    ans.push_back(ft.query(i[1]+1, i[2]-1));\n                }\n            }\n            else {\n                int k = i[1];\n                int mid = nums[k];\n                int nu = i[2];\n                int l = k-1;\n                int r = k+1;\n                int old = ft.query(k, k);\n                int isPeak = 0;\n                nums[k] = nu;\n                if (k>0 && k < nums.size()-1 && nums[k-1] < nums[k] && nums[k] > nums[k+1]) isPeak = 1;\n                ft.add(k, isPeak-old);\n                \n                if(l > 0) {\n                    // cout << nu << endl;\n                    old = ft.query(l, l);\n                    isPeak = 0;\n                    if (l < nums.size()-1 && nums[l-1] < nums[l] && nums[l] > nums[l+1]) isPeak = 1;\n                    // cout << \"IS PEAK: \" << isPeak << endl;\n                    ft.add(l, isPeak-old);\n                }\n                if(r+1<n) {\n                    old = ft.query(r, r);\n                    isPeak = 0;\n                    if(r-1 >= 0 && (r+1) < n && nums[r-1] < nums[r] && nums[r+1] < nums[r]) isPeak = 1;\n                    ft.add(r, isPeak-old);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507643.0
}