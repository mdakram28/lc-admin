{
    "username": "swapnilbhatnagar2255",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int end1, int end2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n            for (int neighbor : graph[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[end1] || visited[end2];\n    }\n    \n    bool canReachCorner(int maxX, int maxY, vector<vector<int>>& obstacleInfo) {\n        vector<pair<pair<int, int>, int>> obstacles(obstacleInfo.size());\n        vector<vector<int>> adjacencyList(obstacleInfo.size() + 4);\n        int obstacleCount = obstacleInfo.size();\n\n        for (int i = 0; i < obstacleCount; ++i) {\n            obstacles[i].first.first = obstacleInfo[i][0];\n            obstacles[i].first.second = obstacleInfo[i][1];\n            obstacles[i].second = obstacleInfo[i][2];\n        }\n\n        for (int i = 0; i < obstacleCount; ++i) {\n            if (obstacles[i].first.first <= obstacles[i].second) {\n                adjacencyList[obstacleCount].push_back(i);\n                adjacencyList[i].push_back(obstacleCount);\n            }\n            if (maxX - obstacles[i].first.first <= obstacles[i].second) {\n                adjacencyList[obstacleCount + 2].push_back(i);\n                adjacencyList[i].push_back(obstacleCount + 2);\n            }\n            if (obstacles[i].first.second <= obstacles[i].second) {\n                adjacencyList[obstacleCount + 1].push_back(i);\n                adjacencyList[i].push_back(obstacleCount + 1);\n            }\n            if (maxY - obstacles[i].first.second <= obstacles[i].second) {\n                adjacencyList[obstacleCount + 3].push_back(i);\n                adjacencyList[i].push_back(obstacleCount + 3);\n            }\n            for (int j = i + 1; j < obstacleCount; ++j) {\n                double distanceBetweenCenters = sqrt(pow(obstacles[i].first.first - obstacles[j].first.first, 2) +\n                                                     pow(obstacles[i].first.second - obstacles[j].first.second, 2));\n                int combinedRadius = obstacles[i].second + obstacles[j].second;\n                if (combinedRadius >= distanceBetweenCenters) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        int pathBlocked = 0;\n        pathBlocked = max(pathBlocked, bfs(adjacencyList, obstacleCount, obstacleCount + 1, obstacleCount + 2, obstacleCount + 4));\n        pathBlocked = max(pathBlocked, bfs(adjacencyList, obstacleCount + 3, obstacleCount + 2, obstacleCount + 1, obstacleCount + 4));\n\n        if (pathBlocked) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722136297",
    "subm_id": "1335729932"
}