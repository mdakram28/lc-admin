{
    "username": "theabbie",
    "submission": "from collections import *\nfrom sortedcontainers import SortedList\n\nclass DICT:\n    def __init__(self):\n        self.vals = {}\n        self.vv = SortedList()\n        \n    def get(self, key):\n        if key in self.vals:\n            return self.vals[key]\n        return float('-inf')\n    \n    def set(self, key, val):\n        if key in self.vals:\n            self.vv.remove(self.vals[key])\n        self.vals[key] = val\n        self.vv.add(self.vals[key])\n        \n    def maxwithout(self, key):\n        if key in self.vals:\n            self.vv.remove(self.vals[key])\n        res = float('-inf')\n        if len(self.vv) > 0:\n            res = self.vv[-1]\n        if key in self.vals:\n            self.vv.add(self.vals[key])\n        return res\n\nclass Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [[0] * (k + 1) for _ in range(n)]\n        mrems = defaultdict(DICT)\n        for i in range(n - 1, -1, -1):\n            for rem in range(k + 1):\n                if rem > 0:\n                    dp[i][rem] = max(dp[i][rem], dp[i][rem - 1])\n                dp[i][rem] = max(dp[i][rem], 1 + mrems[rem].get(nums[i]))\n                if rem == 0:\n                    continue\n                dp[i][rem] = max(dp[i][rem], 1 + mrems[rem - 1].maxwithout(nums[i]))\n            for rem in range(k + 1):\n                mrems[rem].set(nums[i], max(mrems[rem].get(nums[i]), dp[i][rem]))\n        res = 0\n        for i in range(n):\n            res = max(res, 1 + dp[i][k])\n        return res",
    "submit_ts": 1717862035.0
}