{
    "username": "hero777",
    "submission": "class Solution {\npublic:\n    void dfs2(vector<vector<int>> &e, int i, int p, int &ans2, vector<vector<vector<int>>> &y){\n        ans2 = min(ans2, y[i][0][1]);\n        //cout << i << ' ' << y[i][0][1] << '\\n';\n        for(int n: e[i]){\n            if(n == p){\n                continue;\n            }\n            for(int j = 0; j < 2; j++){\n                if(y[i][j][0] != n && y[i][j][1] > y[n][1][1]-1){\n                    y[n][1][1] = y[i][j][1]+1;\n                    y[n][1][0] = i;\n                    if(y[n][0][1] < y[n][1][1]){\n                        swap(y[n][0][1], y[n][1][1]);\n                        swap(y[n][0][0], y[n][1][0]);\n                    }\n                }\n            }\n            dfs2(e, n, i, ans2, y);\n        }\n    }\n    void dfs(vector<vector<int>> &e, int i, int p, int &ans, vector<vector<vector<int>>> &y){\n        y[i].push_back({-2, 0});\n        y[i].push_back({-3, 0});\n        for(int n: e[i]){\n            if(n == p)\n                continue;\n            dfs(e, n, i, ans, y);\n            if(y[n][0][1] >= y[i][1][1]-1){\n                y[i][1][0] = n;\n                y[i][1][1] = y[n][0][1] + 1;\n                if(y[i][1][1] > y[i][0][1]){\n                    swap(y[i][0][1], y[i][1][1]);\n                    swap(y[i][0][0], y[i][1][0]);\n                }\n            }\n        }\n        ans = max(ans, y[i][0][1]+y[i][1][1]);   \n    }\n    vector<int> findD(vector<vector<int>>& edges){\n        int n = edges.size() + 1;\n        vector<vector<int>> e(n, vector<int>());\n        for(vector<int> edge:edges){\n            e[edge[0]].push_back(edge[1]);\n            e[edge[1]].push_back(edge[0]);\n        }\n        int ans = 0;\n        vector<vector<vector<int>>> y(n, vector<vector<int>>());\n        dfs(e, 0, -1, ans, y);\n        int ans2 = 1e8;\n        dfs2(e, 0, -1, ans2, y);\n        return {ans, ans2};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<int> x1 = findD(edges1);\n        vector<int> x2 = findD(edges2);\n        //cout << x1[0] << ' ' << x1[1] << ' ' << x2[0] << ' ' << x2[1] << '\\n';\n        int ans = max(x1[0], x2[0]);\n        return max(ans, x1[1]+x2[1]+1);\n    }\n};",
    "submit_ts": "1719718878",
    "subm_id": "1304428333"
}