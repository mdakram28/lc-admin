{
    "username": "tdkde-shou-wang",
    "submission": "class Node:\n    def __init__(self, pre: \"Node\", nxt: \"Node\", value: int) -> None:\n        self.value = value\n        self.pre = pre\n        self.nxt = nxt\n\nclass LinkList:\n\n    def __init__(self, n: int):\n        self.n = n\n        self.head = Node(None, None, -1)\n        self.tail = Node(None, None, -1)\n        self.head.nxt = self.tail\n        self.tail.pre = self.head\n        self.d = {}\n        self.init_linklist(n)\n\n    def init_linklist(self, n: int):\n        for i in range(n):\n            node = Node(self.tail.pre, self.tail, i)\n            self.d[i] = node\n            self.tail.pre.nxt = node\n            self.tail.pre = node\n        \n    def update(self, start: int, end: int):\n        start_node: Node = self.d.get(start, None)\n        end_node: Node = self.d.get(end, None)\n        if start_node is None or end_node is None:\n            # \u88ab\u5176\u4ed6\u8303\u56f4\u5305\u56f4\uff0c\u4e0d\u9700\u8981\u8003\u8651\n            return\n        # \u5220\u9664start\u5230end\u4e4b\u95f4\u7684\u8282\u70b9\n        pre = start_node\n        nxt = start_node.nxt\n        while nxt != end_node:\n            # \u5220\u9664nxt\n            self.d.pop(nxt.value)\n            nxt.nxt.pre = pre\n            pre.nxt = nxt.nxt\n            nxt = pre.nxt\n    \n    def get_path(self):\n        return len(self.d) - 1\n        \nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ll = LinkList(n)\n        ans = []\n        for start, end in queries:\n            ll.update(start, end)\n            ans.append(ll.get_path())\n        return ans",
    "submit_ts": "1722740952",
    "subm_id": "552334860"
}