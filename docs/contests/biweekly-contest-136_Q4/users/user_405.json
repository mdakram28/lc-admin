{
    "username": "leaf_node_",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        std::vector<std::vector<int>> A(n);\n        for (auto it : edges) {\n            A[it[0]].push_back(it[1]);\n            A[it[1]].push_back(it[0]);\n        }\n\n        std::vector<int> lvl(n, -1), dist(n, -1);\n\n        std::function<void(int, int)> dfs = [&] (int x, int p) {\n            if (p != -1) {\n                lvl[x] = lvl[p] + 1;\n                dist[x] = dist[p] + 1 + (x % 2 == 0);\n            }\n            for (auto y : A[x]) {\n                if (y != p) {\n                    dfs(y, x);\n                }\n            }\n        };\n\n        lvl[0] = 0; dist[0] = 0;\n        dfs(0, -1);\n\n        int n1 = 0;\n        for (int i = 1; i < n; i++) {\n            if (dist[i] > dist[n1]) {\n                    n1 = i;\n                }\n        }\n\n        lvl[n1] = 0; dist[n1] = 0;\n        dfs(n1, -1);\n\n        int n2 = 0;\n        for (int i = 1; i < n; i++) {\n            if (dist[i] > dist[n2]) {\n                    n2 = i;\n                }\n        }\n\n        auto d1 = dist;\n        lvl[n2] = 0; dist[n2] = 0;\n        dfs(n2, -1);\n\n        dfs(n2, -1);\n\n        if (n1 & 1) {\n            for (int i = 0; i < n; i+=2) {\n                d1[i]--;\n            }\n        }\n        else {\n            for (int i = 1; i < n; i += 2) {\n                d1[i]++;\n            }\n        }\n\n        if (n2 & 1) {\n            for (int i = 0; i < n; i+=2) {\n                dist[i]--;\n            }\n        }\n        else {\n            for (int i = 1; i < n; i += 2) {\n                dist[i]++;\n            }\n        }\n\n        // cout << n1 <<' ' << n2 << '\\n';\n        // for (auto it : d1) cout << it << ' ';\n        // cout << \"\\n\";\n        // for (auto it : dist) cout << it << ' ';\n        // cout << \"\\n\";\n\n        std::vector<int> ans(n);\n        for (int i = 0; i < n; i++) {\n            ans[i] = std::max(d1[i], dist[i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722700477",
    "subm_id": "1343243111"
}