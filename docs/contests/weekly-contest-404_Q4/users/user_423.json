{
    "username": "rajmanas",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& e : edges1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        \n        for (const auto& e : edges2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n\n        auto dfs = [](const vector<vector<int>>& adj, int start, int& far) {\n            int sz = adj.size();\n            vector<int> dist(sz, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int d) {\n                dist[node] = d;\n                if (d > dist[far]) {\n                    far = node;\n                }\n                for (int nei : adj[node]) {\n                    if (dist[nei] == -1) {\n                        dfsVisit(nei, d + 1);\n                    }\n                }\n            };\n            \n            far = start;\n            dfsVisit(start, 0);\n            return dist[far];\n        };\n\n        int far1 = 0;\n        dfs(adj1, 0, far1);\n        int diam1 = dfs(adj1, far1, far1);\n\n        int far2 = 0;\n        dfs(adj2, 0, far2);\n        int diam2 = dfs(adj2, far2, far2);\n        \n        int minDiam = max(diam1, diam2);\n        int half1 = (diam1 + 1) / 2;\n        int half2 = (diam2 + 1) / 2;\n        minDiam = max(minDiam, half1 + half2 + 1);\n        \n        return minDiam;\n    }\n};\n",
    "submit_ts": "1719717462",
    "subm_id": "1304392174"
}