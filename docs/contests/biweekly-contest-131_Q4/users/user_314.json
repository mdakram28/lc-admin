{
    "username": "g_jha37",
    "submission": "class Solution {\n    // vector<int> seg;\n    int MX{1000000};\npublic:\n    void update(vector<int> &seg, int id, int newval){\n        int n = seg.size() >> 1;\n        seg[id + n] = newval;\n        for(int child = id + n; child > 1; child >>= 1){\n            seg[child >> 1] = max(seg[child], seg[child ^ 1]);\n        }\n    }\n\n    int query(vector<int>& seg, int r){\n        int n = seg.size() >> 1, l;\n        int res = 0;\n        for(l = n, r += n; l < r; l >>= 1, r >>= 1){\n            if(l & 1){\n                res = max(res, seg[l++]);\n            }\n            if(r & 1)\n                res = max(res, seg[--r]);\n        }\n\n        return res;\n    }\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<int> seg(100004, 0);\n        int n = seg.size() >> 1;\n        update(seg, 0, MX);\n        // return {};\n        set<int> obstacles;\n        obstacles.insert(0);\n        vector<bool> ans;\n        for(auto& v : queries){\n            if(v[0] == 1){\n                auto it_greater = obstacles.upper_bound(v[1]);\n                auto it_small = it_greater;\n                it_small--;\n\n                update(seg, *it_small, v[1] - *it_small);\n                if(it_greater == obstacles.end())\n                    update(seg, v[1], MX);\n                else\n                    update(seg, v[1], *it_greater - v[1]);\n                obstacles.insert(v[1]);\n            }\n            else{\n                // continue;\n                int mxsize = query(seg, v[1] - v[2] + 1);\n                // for(auto id : obstacles)\n                //     cout << seg[id + n] << \"\\t\";\n                // cout << \"\\n\";\n                // cout << mxsize << \"\\n\";\n                if(mxsize >= v[2])\n                    ans.emplace_back(true);\n                else\n                    ans.emplace_back(false);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1716651423.0
}