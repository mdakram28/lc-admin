{
    "username": "MickyOr",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\ntypedef long long ll;\n\nstruct rect{\n  int minRow, maxRow, minCol, maxCol;\n  rect() {\n    minRow = 1000;\n    maxRow = -1000;\n    minCol = 1000;\n    maxCol = -1000;\n  }\n  bool good() {\n    return minRow <= maxRow && minCol <= maxCol;\n  }\n  int getArea() {\n    if (minRow > maxRow || minCol > maxCol) return 1000;\n    return (maxRow - minRow + 1) * (maxCol - minCol + 1);\n  }\n};\n\nconst int tam = 30;\n\nrect pre[tam][tam][tam][tam];\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n      int n = grid.size();\n      int m = grid[0].size();\n      for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n          for (int k = i; k < n; k++) {\n            for (int l = j; l < m; l++) {\n              rect up;\n              rect left;\n              if (k > 0) up = pre[i][j][k-1][l];\n              if (l > 0) left = pre[i][j][k][l-1];\n              pre[i][j][k][l].minRow = min(up.minRow, left.minRow);\n              pre[i][j][k][l].maxRow = max(up.maxRow, left.maxRow);\n              pre[i][j][k][l].minCol = min(up.minCol, left.minCol);\n              pre[i][j][k][l].maxCol = max(up.maxCol, left.maxCol);\n              if (grid[k][l] == 1) {\n                pre[i][j][k][l].minRow = min(pre[i][j][k][l].minRow, k);\n                pre[i][j][k][l].maxRow = max(pre[i][j][k][l].maxRow, k);\n                pre[i][j][k][l].minCol = min(pre[i][j][k][l].minCol, l);\n                pre[i][j][k][l].maxCol = max(pre[i][j][k][l].maxCol, l);\n              }\n            }\n          }\n        }\n      }\n      int ans = INT_MAX;\n      for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n          rect A = pre[0][0][i][j];\n          if (!A.good()) continue;\n          // remaining right\n          if (j < m-1 && (i == n-1 || !pre[i+1][0][n-1][j].good())) {\n            for (int k = 0; k < n-1; k++) {\n              rect B = pre[0][j+1][k][m-1];\n              rect C = pre[k+1][j+1][n-1][m-1];\n              ans = min(ans, A.getArea() + B.getArea() + C.getArea());\n            }\n            for (int k = j+1; k < m-1; k++) {\n              rect B = pre[0][j+1][n-1][k];\n              rect C = pre[0][k+1][n-1][m-1];\n              ans = min(ans, A.getArea() + B.getArea() + C.getArea());\n            }\n          }\n          // remaining down\n          if (i < n-1 && (j == m-1 || !pre[0][j+1][i][m-1].good())) {\n            for (int k = 0; k < m-1; k++) {\n              rect B = pre[i+1][0][n-1][k];\n              rect C = pre[i+1][k+1][n-1][m-1];\n              ans = min(ans, A.getArea() + B.getArea() + C.getArea());\n            }\n            for (int k = i+1; k < n-1; k++) {\n              rect B = pre[i+1][0][k][m-1];\n              rect C = pre[k+1][0][n-1][m-1];\n              ans = min(ans, A.getArea() + B.getArea() + C.getArea());\n            }\n          }\n          // right big, down small\n          if (i < n-1 && j < m-1) {\n            rect B = pre[0][j+1][n-1][m-1];\n            rect C = pre[i+1][0][n-1][j];\n            ans = min(ans, A.getArea() + B.getArea() + C.getArea());\n          }\n          // down big, right small\n          if (i < n-1 && j < m-1) {\n            rect B = pre[i+1][0][n-1][m-1];\n            rect C = pre[0][j+1][i][m-1];\n            ans = min(ans, A.getArea() + B.getArea() + C.getArea());\n          }\n        }\n      }\n      return ans;\n    }\n};",
    "submit_ts": 1719114206.0
}