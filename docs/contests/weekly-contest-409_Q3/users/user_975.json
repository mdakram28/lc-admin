{
    "username": "echeresh",
    "submission": "class Node:\n    def __init__(self):\n        self.left = None\n        self.right = None\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def build_tree(lo, hi):\n            n = hi - lo + 1\n            if n == 0: return None\n            m = lo + n // 2\n            node = Node()\n            node.lo, node.hi = lo, hi\n            node.count = n\n            if n == 1: return node\n            node.left = build_tree(lo, m - 1)\n            node.right = build_tree(m, hi)\n            return node\n\n        def update_tree(node, l, r):\n            if not node: return 0\n            ll = max(node.lo, l)\n            rr = min(node.hi, r)\n            if ll > rr: return 0\n            if node.count == 0: return 0\n            if node.count == (node.hi - node.lo + 1) == (rr - ll + 1):\n                res = node.count\n                node.count = 0\n                return res\n            lc = update_tree(node.left, l, r)\n            rc = update_tree(node.right, l, r)\n            node.count -= lc + rc\n            return lc + rc\n            \n        root = build_tree(0, n - 1)\n        res = []\n        for l, r in queries:\n            if l + 1 <= r - 1:\n                update_tree(root, l + 1, r - 1)\n            res.append(root.count - 1)\n        return res",
    "submit_ts": "1722743397",
    "subm_id": "1343791032"
}