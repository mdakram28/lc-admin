{
    "username": "Arghya71",
    "submission": "import java.util.ArrayList;\nimport java.util.HashMap;\nimport java.util.List;\nimport java.util.TreeSet;\n\nclass Solution {\n    private static long[] segTree;\n    private static final int MAX_RANGE = 100000;\n\n    private static void build(int start, int end, int idx, long[] arr) {\n        if (start == end) {\n            segTree[idx] = arr[start];\n            return;\n        }\n        int mid = start + (end - start) / 2;\n        build(start, mid, 2 * idx + 1, arr);\n        build(mid + 1, end, 2 * idx + 2, arr);\n        segTree[idx] = Math.max(segTree[2 * idx + 1], segTree[2 * idx + 2]);\n    }\n\n    private static void update(int start, int end, int idx, int pos, long value) {\n        if (start == end) {\n            segTree[idx] = value;\n            return;\n        }\n        int mid = start + (end - start) / 2;\n        if (pos <= mid) {\n            update(start, mid, 2 * idx + 1, pos, value);\n        } else {\n            update(mid + 1, end, 2 * idx + 2, pos, value);\n        }\n        segTree[idx] = Math.max(segTree[2 * idx + 1], segTree[2 * idx + 2]);\n    }\n\n    private static long rangeQuery(int start, int end, int idx, int left, int right) {\n        if (left <= start && right >= end) {\n            return segTree[idx];\n        }\n        if (left > end || right < start) {\n            return Long.MIN_VALUE;\n        }\n        int mid = start + (end - start) / 2;\n        long leftResult = rangeQuery(start, mid, 2 * idx + 1, left, right);\n        long rightResult = rangeQuery(mid + 1, end, 2 * idx + 2, left, right);\n        return Math.max(leftResult, rightResult);\n    }\n\n    public List<Boolean> getResults(int[][] queries) {\n        List<Boolean> results = new ArrayList<>();\n        TreeSet<Integer> set = new TreeSet<>();\n        HashMap<Integer, Integer> map = new HashMap<>();\n        set.add(0);\n        set.add(MAX_RANGE);\n        map.put(0, 0);\n        map.put(MAX_RANGE, MAX_RANGE);\n        segTree = new long[4 * MAX_RANGE];\n\n        for (int[] query : queries) {\n            if (query[0] == 1) { // Insertion operation\n                int position = query[1];\n                set.add(position);\n                int previous = set.lower(position);\n                int next = set.higher(position);\n                map.put(next, next - position);\n                map.put(position, position - previous);\n                update(0, MAX_RANGE, 0, position, map.get(position));\n                update(0, MAX_RANGE, 0, next, map.get(next));\n            } else { // Query operation\n                int position = query[1];\n                int width = query[2];\n                int previous = set.lower(position);\n                if (position - previous >= width) {\n                    results.add(true);\n                } else if (rangeQuery(0, MAX_RANGE, 0, 0, position) >= width) {\n                    results.add(true);\n                } else {\n                    results.add(false);\n                }\n            }\n        }\n        return results;\n    }\n}\n",
    "submit_ts": 1716652607.0
}