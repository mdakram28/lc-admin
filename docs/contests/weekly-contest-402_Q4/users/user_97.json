{
    "username": "tojuna",
    "submission": "class BIT:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (n + 1)\n    def update(self, idx, val):\n        while idx < len(self.tree):\n            self.tree[idx] += val\n            idx += idx & (-idx)\n    def query(self, idx):\n        total = 0\n        while idx > 0:\n            total += self.tree[idx]\n            idx -= idx & (-idx)\n        return total\n    def range_query(self, left, right):\n        return self.query(right) - self.query(left - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums, queries):\n        def is_peak(i):\n            return False if (i <= 0 or i >= len(nums) - 1) else (nums[i] > nums[i - 1] and nums[i] > nums[i + 1])\n        n = len(nums)\n        fenwick = BIT(n)\n        peaks = [False] * n\n        for i in range(1, n - 1):\n            if is_peak(i):\n                peaks[i] = True\n                fenwick.update(i + 1, 1)\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                li, ri = q[1], q[2]\n                if li == ri or li + 1 == ri:\n                    ans.append(0)\n                else:\n                    ans.append(fenwick.range_query(li + 2, ri))\n            elif q[0] == 2:\n                index, val = q[1], q[2]\n                nums[index] = val\n                for i in range(max(1, index - 1), min(n - 1, index + 2)):\n                    was_peak = peaks[i]\n                    is_now_peak = is_peak(i)\n                    if was_peak != is_now_peak:\n                        peaks[i] = is_now_peak\n                        fenwick.update(i + 1, 1 if is_now_peak else -1)\n        return ans\n",
    "submit_ts": 1718506442.0
}