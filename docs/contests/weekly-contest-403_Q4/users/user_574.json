{
    "username": "sho1004",
    "submission": "#ifdef _SM_LOCAL\n#include \"debug.hpp\" // IWYU pragma: keep\n#else\n#include <bits/stdc++.h>\n#define Debug(...)\n#endif\nusing namespace std;\nusing ll = long long;\n// constexpr ll inf = LLONG_MAX >> 1;\nconstexpr int inf = INT_MAX >> 1;\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = (int)grid.size();\n        int m = (int)grid[0].size();\n        int mx = max(n, m);\n        vector A(mx, vector<int>(mx));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                A[i][j] = grid[i][j];\n            }\n        }\n        vector B(mx, vector<int>(mx));\n        auto Rotate = [&]() {\n            for (int i = 0; i < mx; i++) {\n                for (int j = 0; j < mx; j++) {\n                    B[j][mx - 1 - i] = A[i][j];\n                }\n            }\n            swap(A, B);\n        };\n        int mn = n * m + 1;\n        auto Solve = [&](int a, int b, int c, int d) -> int {\n            int h = c - a, w = d - b;\n            if (h == 0 || w == 0) return 0;\n            vector temp(h, vector<int>(w));\n            for (int i = a; i < c; i++) {\n                for (int j = b; j < d; j++) {\n                    temp[i - a][j - b] = A[i][j];\n                }\n            }\n            for (int i = 0; i < h; i++) {\n                for (int j = 0; j + 1 < w; j++) {\n                    temp[i][j + 1] += temp[i][j];\n                }\n            }\n            for (int j = 0; j < w; j++) {\n                for (int i = 0; i + 1 < h; i++) {\n                    temp[i + 1][j] += temp[i][j];\n                }\n            }\n            int sum = temp.back().back();\n            if (sum == 0) return 0;\n            vector<int> mnj(w, 1000);\n            int res = inf;\n            for (int i = h - 1; i >= 0; i--) {\n                for (int j = w - 1; j >= 0; j--) {\n                    if (temp[i][j] == sum) mnj[j] = i;\n                    int t = 0;\n                    if (j > 0) t += temp[h - 1][j - 1];\n                    if (i > 0) t += temp[i - 1][w - 1];\n                    if (i > 0 && j > 0) t -= temp[i - 1][j - 1];\n                    if (t != 0) continue;\n                    for (int k = j; k < w; k++) {\n                        res = min(res, (mnj[k] - i + 1) * (k - j + 1));\n                    }\n                }\n            }\n            return res;\n        };\n\n\n        int ans = inf;\n                for (int itr = 0; itr < 2; itr++) {\n        for (int x = 1; x < mx; x++) {\n            for (int y = 1; y < mx; y++) {\n                    {\n                        int left = Solve(0, 0, mx, y);\n                        int righttop = Solve(0, y, x, mx);\n                        int rightbottom = Solve(x, y, mx, mx);\n                        ans = min(ans, left + righttop + rightbottom);\n                    }\n                    {\n                        int lefttop = Solve(0, 0, x, y);\n                        int leftbottom = Solve(x, 0, mx, y);\n                        int right = Solve(0, y, mx, mx);\n                        ans = min(ans, lefttop + leftbottom + right);\n                    }\n                }\n            }\n                    Rotate();\n        }\n        Rotate();\n        Rotate();\n                for (int itr = 0; itr < 2; itr++) {\n        for (int i = 1; i < mx; i++) {\n            for (int j = i + 1; j < mx; j++) {\n                    int now = Solve(0, 0, i, mx);\n                    now += Solve(i, 0, j, mx);\n                    now += Solve(j, 0, mx, mx);\n                    ans = min(ans, now);\n                    now = Solve(0, 0, mx, i);\n                    now += Solve(0, i, mx, j);\n                    now += Solve(0, j, mx, mx);\n                    ans = min(ans, now);\n                }\n\n            }\n                    Rotate();\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719114614.0
}