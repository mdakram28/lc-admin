{
    "username": "profchi",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        \n        int [][] zero = new int [nums.length][30];\n\n        int [] current = new int [30];\n        Arrays.fill(current, nums.length);\n\n        for (int i = nums.length - 1; i >= 0; --i) {\n\n            for (int j = 0; j < current.length; ++j) {\n                int bit = ((1 << j) & nums[i]) == 0 ? 0 : 1;\n                if (bit == 0) {\n                    current[j] = i;\n                }\n                zero[i][j] = current[j];\n            }\n        }\n\n        int min, max, mid;\n\n        long result = 0;\n\n        for (int i = 0; i < nums.length; ++i) {\n            if (nums[i] < k)\n                continue;\n\n            min = i - 1;\n            max = nums.length;\n\n            while (max - min > 1) {\n                mid = (max + min) / 2;\n\n                if (getAnd(zero, i, mid) > k)\n                    min = mid;\n                else\n                    max = mid;\n            }\n\n            min++;\n\n            if (min == nums.length || getAnd(zero, i, min) != k)\n                continue;\n\n            int start = min;\n\n            //System.out.println(i + \" \" + min);\n\n            min = start;\n            max = nums.length;\n\n            while (max - min > 1) {\n                mid = (max + min) / 2;\n\n                if (getAnd(zero, i, mid) != k)\n                    max = mid;\n                else\n                    min = mid;\n            }\n\n            //System.out.println(i + \" \" + max + \" \" + start);\n\n            result += max - start;\n        }\n\n        return result;\n    }\n\n\n    private int getAnd(int [][] zero, int l, int r) {\n\n        int result = (int)Math.pow(2, 30);\n        --result;\n\n        for (int i = 0; i < 30; ++i) {\n            if (zero[l][i] <= r)\n                result ^= 1 << i;\n        }\n\n\n        return result;\n    }\n}",
    "submit_ts": "1720278397",
    "subm_id": "1311707435"
}