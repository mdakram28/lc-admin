{
    "username": "loganwatchorn",
    "submission": "class Solution {\n    struct Trie {\n        int cost;\n        bool isLeaf;\n        vector<Trie*> children;\n        Trie() :\n            cost(INT_MAX),\n            isLeaf(false),\n            children(vector<Trie*>(26, nullptr)) {};\n    };\n\n    int M, N;\n    string target;\n    Trie* root;\n\n    vector<int> memo;\n    int dp(int i) {\n        if (i == M) return 0;\n        if (memo[i] != -1) return memo[i];\n        \n        int ans = INT_MAX;\n        Trie* curr = root;\n        for (int i2=i; i2<M; i2++) {\n            char c = target[i2];\n            curr = curr->children[c-'a'];\n            if (curr == nullptr) break;\n\n            if (curr->isLeaf) {\n                int nextCost = dp(i2+1);\n                if (nextCost < INT_MAX)\n                    ans = min(ans, curr->cost + dp(i2+1));\n            }\n        }\n\n        memo[i] = ans;\n        return ans;\n    }\npublic:\n    int minimumCost(string _target, vector<string>& words, vector<int>& costs) {\n        target = _target;\n        M = target.size();\n        N = words.size();\n        \n        root = new Trie();\n        for (int i=0; i<N; i++) {\n            Trie* curr = root;\n            for (int j=0; j<words[i].size(); j++) {\n                char c = words[i][j];\n                if (curr->children[c-'a'] == nullptr) {\n                    curr->children[c-'a'] = new Trie();\n                }\n                curr = curr->children[c-'a'];\n            }\n            curr->isLeaf = true;\n            curr->cost = min(curr->cost, costs[i]);\n        }\n        \n        memo = vector<int>(M, -1);\n        int ans = dp(0);\n        if (ans == INT_MAX) return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720324763",
    "subm_id": "1312407579"
}