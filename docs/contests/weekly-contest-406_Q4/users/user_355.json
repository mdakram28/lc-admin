{
    "username": "shri21",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort both cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int hSegments = 1, vSegments = 1;\n        long long totalCost = 0;\n        \n        int i = 0, j = 0;\n        \n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                // Choose horizontal cut\n                totalCost += (long long)horizontalCut[i] * vSegments;\n                hSegments++;\n                i++;\n            } else {\n                // Choose vertical cut\n                totalCost += (long long)verticalCut[j] * hSegments;\n                vSegments++;\n                j++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[i] * vSegments;\n            i++;\n        }\n        \n        // Process remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += (long long)verticalCut[j] * hSegments;\n            j++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925141",
    "subm_id": "1320244342"
}