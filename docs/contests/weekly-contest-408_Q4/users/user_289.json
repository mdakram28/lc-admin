{
    "username": "frabhinav",
    "submission": "class Solution {\npublic:\n    int performBFS(vector<vector<int>>& adjList, int startNode, int endNode1, int endNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visitedNodes(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visitedNodes[startNode] = 1;\n        \n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visitedNodes[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visitedNodes[neighbor] = 1;\n                }\n            }\n        }\n        return visitedNodes[endNode1] || visitedNodes[endNode2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> circleDetails(circles2.size());\n        vector<vector<int>> adjacencyList(circles2.size() + 4);\n        int numCircles = circles2.size();\n        \n        for (int i = 0; i < numCircles; ++i) {\n            circleDetails[i].first.first = circles2[i][0];\n            circleDetails[i].first.second = circles2[i][1];\n            circleDetails[i].second = circles2[i][2];\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            if (circleDetails[i].first.first <= circleDetails[i].second) {\n                adjacencyList[numCircles].push_back(i);\n                adjacencyList[i].push_back(numCircles);\n            }\n            if (X - circleDetails[i].first.first <= circleDetails[i].second) {\n                adjacencyList[numCircles + 2].push_back(i);\n                adjacencyList[i].push_back(numCircles + 2);\n            }\n            if (circleDetails[i].first.second <= circleDetails[i].second) {\n                adjacencyList[numCircles + 1].push_back(i);\n                adjacencyList[i].push_back(numCircles + 1);\n            }\n            if (Y - circleDetails[i].first.second <= circleDetails[i].second) {\n                adjacencyList[numCircles + 3].push_back(i);\n                adjacencyList[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distBetweenCenters = sqrt(pow(circleDetails[i].first.first - circleDetails[j].first.first, 2) +\n                                                 pow(circleDetails[i].first.second - circleDetails[j].first.second, 2));\n                int combinedRadii = circleDetails[i].second + circleDetails[j].second;\n                if (combinedRadii >= distBetweenCenters) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n        \n        int pathBlocked = 0;\n        pathBlocked = max(pathBlocked, performBFS(adjacencyList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n        pathBlocked = max(pathBlocked, performBFS(adjacencyList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n        \n        if (pathBlocked) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137084",
    "subm_id": "1335753686"
}