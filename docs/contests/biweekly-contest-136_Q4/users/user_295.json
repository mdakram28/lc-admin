{
    "username": "rejur",
    "submission": "class Solution {\npublic:\n    struct node {\n        int to, w, next;\n    };\n    static const int N = 1e5 + 5;\n    node mp[2 * N];\n    int head[N], cnt;\n    int dist[N][3], pot[N];\n\n    void dfs1 (int u, int f) {\n        dist[u][0] = dist[u][1] = dist[u][2] = 0;\n        for (int i = head[u]; ~i; i = mp[i].next) {\n            int to = mp[i].to, w = mp[i].w;\n            if (to != f) {\n                dfs1(to, u);\n                if (dist[to][0] + w >= dist[u][0]) {\n                    pot[u] = to;\n                    dist[u][1] = dist[u][0];\n                    dist[u][0] = dist[to][0] + w;\n                }\n                else if (dist[to][0] + w > dist[u][1]) \n                    dist[u][1] = dist[to][0] + w;\n            }\n        }\n    }\n\n    void dfs2 (int u, int f) {\n        for (int i = head[u]; ~i; i = mp[i].next) {\n            int to = mp[i].to;\n            int w = (u % 2 == 0) ? 2 : 1;\n            if (to != f) {\n                if (pot[u] == to)\n                    dist[to][2] = w + max(dist[u][1], dist[u][2]);\n                else\n                    dist[to][2] = w + max(dist[u][0], dist[u][2]);\n                dfs2(to, u);\n            }\n        }\n    }\n\n    void add (int u, int v) {\n        mp[cnt] = (node) {v, (v % 2 == 1) ? 1 : 2, head[u]};\n        head[u] = cnt++;\n        mp[cnt] = (node) {u, (u % 2 == 1) ? 1 : 2, head[v]};\n        head[v] = cnt++;\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n, v, w;\n        memset(head, -1, sizeof(head));\n        cnt = 0;\n        n = edges.size() + 1;\n        for (int i = 0; i < edges.size(); i++) {\n            add(edges[i][0], edges[i][1]);\n        }\n        /*\n        for (int i = 0; i < cnt; i++) {\n            cout << mp[i].to << \" \" << mp[i].w << endl;\n        }\n        */\n        dfs1(0, -1);\n        dfs2(0, -1);\n        vector<int> res;\n        cout << n << endl;\n        for (int i = 0; i < n; i++) {\n            cout << dist[i][0] << \" \" << dist[i][2] << endl;\n            res.push_back (max (dist[i][0], dist[i][2]));\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722699984",
    "subm_id": "552277944"
}