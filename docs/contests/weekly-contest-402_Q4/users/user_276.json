{
    "username": "_brucewayne_",
    "submission": "class Solution {\npublic:\n    class SegmentTree \n    {\n        private:\n        vector<int> tree;\n        vector<int> nums;\n        int n;\n\n        void build(int node, int start, int end) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        void update(int node, int start, int end, int idx) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (start <= idx && idx <= mid) {\n                    update(2 * node + 1, start, mid, idx);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int query(int node, int start, int end, int L, int R) {\n            if (R < start || end < L) {\n                return 0;\n            }\n            if (L <= start && end <= R) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = query(2 * node + 1, start, mid, L, R);\n            int rightQuery = query(2 * node + 2, mid + 1, end, L, R);\n            return leftQuery + rightQuery;\n        }\n\n        bool isPeak(int idx) {\n            if (idx <= 0 || idx >= n - 1) {\n                return false;\n            }\n            return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n        }\n\n    public:\n        SegmentTree(vector<int>& nums) {\n            this->nums = nums;\n            this->n = nums.size();\n            tree.resize(4 * n, 0);\n            build(0, 0, n - 1);\n        }\n\n        void update(int idx, int val) {\n            nums[idx] = val;\n            update(0, 0, n - 1, idx);\n            if (idx > 0) update(0, 0, n - 1, idx - 1);\n            if (idx < n - 1) update(0, 0, n - 1, idx + 1);\n        }\n\n        int query(int L, int R) {\n            return query(0, 0, n - 1, L, R);\n        }\n    };\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) \n    {\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                int li = q[1];\n                int ri = q[2];\n                if (ri - li <= 1) {\n                    result.push_back(0);\n                } else {\n                    result.push_back(segTree.query(li + 1, ri - 1));\n                }\n            } else if (q[0] == 2) {\n                int indexi = q[1];\n                int vali = q[2];\n                segTree.update(indexi, vali);\n            }\n        }\n\n        return result;\n        }\n};",
    "submit_ts": 1718506429.0
}