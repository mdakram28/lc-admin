{
    "username": "nafnil",
    "submission": "class Solution {\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        int n = nums.length;\n        int m = (n+99) / 100;\n        long[][] dp = new long[m][4];\n        for (int i = 0; i < m; i++) {\n            dp[i] = gao(get(nums, i*100, 100));\n        }\n        long re = 0;\n        for (int[] query : queries) {\n            int x = query[0], y = query[1];\n            nums[x] = y;\n            dp[x/100] = gao(get(nums, x/100*100, 100));\n            long end = 0, noend = 0;\n            for (long[] longs : dp) {\n                long newend = Math.max(longs[2] + end, longs[3] + noend);\n                long newnoend = Math.max(longs[0]+end, longs[1] + noend);\n                end = newend;\n                noend = newnoend;\n            }\n            re += Math.max(end, noend);\n        }\n        int mod = (int) 1e9 + 7;\n        return (int) (re % mod);\n    }\n    // 0\u5de6\u53f3\u4e0d\u53d6 1\u53d6\u5de6 2\u53d6\u53f3 3\u53d6\u5de6\u53f3\n    long[] gao(int[] arr) {\n        int n = arr.length;\n        if (n==1) return new long[]{0, 0, 0, Math.max(0, arr[0])};\n        long[] dp = new long[n];\n        long[] dp2 = new long[n];\n        dp[0] = Math.max(arr[0], 0);\n        dp[1] = Math.max(Math.max(arr[0], arr[1]), 0);\n        dp2[1] = Math.max(arr[1], 0);\n        for (int i = 2; i < n; i++) {\n            dp[i] = Math.max(dp[i-1], dp[i-2] + arr[i]);\n            dp2[i] = Math.max(dp2[i-1], dp2[i-2] + arr[i]);\n        }\n        return new long[]{dp2[n-2], dp[n-2], dp2[n-1], dp[n-1]};\n    }\n    int[] get(int[] arr, int start, int len) {\n        len = Math.min(len, arr.length - start);\n        int[] re = new int[len];\n        for (int i = 0; i < len; i++) {\n            re[i] = arr[i+start];\n        }\n        return re;\n    }\n}",
    "submit_ts": 1716694120.0
}