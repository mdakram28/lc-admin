{
    "username": "rayvivek779",
    "submission": "template <typename T, class func = function<T(const T &, const T &)>>\nclass spashTable {\npublic:\n  int n, Log;\n  func myfunc;\n  T **Table, *arr;\n  spashTable(vector<T> & lst, const func & F) : myfunc(F) { \n    n = lst.size(), Log = ceil(log2((int)lst.size())) + 5;\n    arr = new T[n + 1];\n    Table = new T*[n + 1];\n    for(int i = 0; i < n; i++) {\n      Table[i] = new T[Log];\n      arr[i] = lst[i], Table[i][0] = lst[i];\n    }\n    buildTable();\n  }\n\tvoid buildTable() {\n\t\tfor (int j = 1; j <= Log; j++) {\n\t\t\tfor (int i = 0; (i + (1 << j) - 1) < n; i++)\n\t\t\t\tTable[i][j] = myfunc(Table[i][j - 1], Table[i + (1 << (j - 1))][j - 1]);\n\t\t}\n\t}\n\tT query(int l, int r){\n\t\tint j = __lg(r - l + 1);\n\t\treturn myfunc(Table[l][j], Table[r - (1 << j) + 1][j]);\n\t}\n};\nclass Solution {\npublic:\n  long long countSubarrays(vector<int>& nums, int k) {\n    long long result = 0;\n    spashTable<int> st(nums, [&](int a, int b) { return a & b; });\n    for (int i = 0; i < nums.size(); i++) {\n      int l = i, r = nums.size() - 1, al = -1, ar = -1;\n      while (l <= r) {\n        int mid = (l + r) >> 1;\n        if (st.query(i, mid) <= k) {\n          r = mid - 1, al = mid;\n        } else {\n          l = mid + 1;\n        }\n      }\n      if (al == -1 || st.query(i, al) != k) \n        continue;\n      l = i, r = nums.size() - 1;\n      while (l <= r) {\n        int mid = (l + r) >> 1;\n        if (st.query(i, mid) >= k) {\n          l = mid + 1, ar = mid;\n        } else {\n          r = mid - 1;\n        }\n      }\n      result += (ar - al + 1);\n    }\n    return result;\n  }\n};",
    "submit_ts": "1720276805",
    "subm_id": "1311633455"
}