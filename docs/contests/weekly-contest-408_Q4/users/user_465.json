{
    "username": "sukankshi08",
    "submission": "class Solution {\npublic:\n\n\n    int bfs(vector<vector<int>> &graph, int s, int one, int two, int n) {\n    queue<int> q;\n    vector<int> vis(n + 4, 0);\n    q.push(s);\n    vis[s] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graph[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = 1;\n            }\n        }\n    }\n    return vis[one] || vis[two];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& cir) {\n         vector<pair<pair<int, int>, int>> temp(cir.size());\n         vector<vector<int>> gg(cir.size() + 4);\n        int n=cir.size();\n        \n        for (int i = 0; i < n; ++i) {\n            temp[i].first.first=cir[i][0];\n            temp[i].first.second=cir[i][1];\n            temp[i].second=cir[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < n; ++i) {\n             \n            if (temp[i].first.first <= temp[i].second) {\n                gg[n].push_back(i);\n                gg[i].push_back(n);\n            }\n            if (X - temp[i].first.first <= temp[i].second) {\n                gg[n + 2].push_back(i);\n                gg[i].push_back(n + 2);\n            }\n            if (temp[i].first.second <= temp[i].second) {\n                gg[n + 1].push_back(i);\n                gg[i].push_back(n + 1);\n            }\n            if (Y - temp[i].first.second <= temp[i].second) {\n                gg[n + 3].push_back(i);\n                gg[i].push_back(n + 3);\n            }\n            for (int j = i +1; j < n; ++j) {\n                double dist = sqrt(pow(temp[i].first.first - temp[j].first.first, 2) +\n                                       pow(temp[i].first.second - temp[j].first.second, 2));\n                int radius_sum = temp[i].second + temp[j].second;\n                if (radius_sum >= dist) {\n                    gg[i].push_back(j);\n                    gg[j].push_back(i);\n                }\n            }\n        }\n        \n        int a = 0;\na = max(a, bfs(gg, n, n + 1, n + 2, n + 4));\n    a = max(a, bfs(gg, n + 3, n + 2, n + 1, n + 4));\n        if (a){return false;}\n        return true;\n       \n        \n       \n    \n    }\n};",
    "submit_ts": "1722137796",
    "subm_id": "1335773997"
}