{
    "username": "karunakar_516",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n\n//Macros\n#define ll int\n#define pb push_back\n#define ppb pop_back\n#define sqrt isqrt\n#define popcount __builtin_popcountll\n#define for_(i,a,n) for(ll i=a;i<n;i++)\n#define all(a) a.begin(),a.end()\n#define mini(a) *min_element(all(a))\n#define maxi(a) *max_element(all(a))\n#define endl \"\\n\"\n#define fio ios_base::sync_with_stdio(false), cin.tie(NULL), cout.tie(NULL)\n#define ordered_set tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>\n\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n//---------------------------------------------------------------------------------------------------------------------------------------------------------\n//Most Used Functions\n\nll lcm(ll a,ll b){\n    ll g=__gcd(a,b);\n    return (a*b)/g;\n}\n\nll ceil_div(ll a,ll b){\n    return a/b+(ll)(a%b==0);\n}\n\n\n//------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n//FenwickTree\nstruct FenwickTree {\n    vector<ll> bit; \n    ll n;\n\n    FenwickTree(ll n) {\n        this->n = n;\n        bit.assign(n, 0);\n    }\n\n    FenwickTree(vector<ll>  &a) : FenwickTree(a.size()) {\n        for (size_t i = 0; i < a.size(); i++)\n            add(i, a[i]);\n    }\n\n    ll sum(ll r) {\n        ll ret = 0;\n        for (; r >= 0; r = (r & (r + 1)) - 1)\n            ret += bit[r];\n        return ret;\n    }\n\n    ll sum(ll l, ll r) {\n        return sum(r) - sum(l - 1);\n    }\n\n    void add(ll idx, ll delta) {\n        for (; idx < n; idx = idx | (idx + 1))\n            bit[idx] += delta;\n    }\n};\n\n//SegmentTree\n\nvector<ll> seg;\nclass SGT\n{\n\t\n\tpublic:\n    int n;\n    vector<ll> brr;\n\tSGT(int n)\n\t{\n        this-> n=n;\n\t\tseg.resize(4*n + 1);\n        \n\t}\n \n\tvoid build(ll ind, ll low, ll high, vector<ll> &arr)\n\t{\n        \n\t\tif(low == high)\n\t\t{\n\t\t\tif(low!=0 and low!=arr.size()-1){\n                seg[ind]=(ll)(arr[low]>arr[low-1] and arr[low]>arr[low+1]);\n            }\n\t\t\treturn;\n\t\t}\n \n\t\tll mid = (low+high)>>1;\n\t\tbuild(2*ind+1, low, mid, arr);\n\t\tbuild(2*ind+2, mid+1, high, arr);\n        seg[ind]=seg[ind*2+1]+seg[ind*2+2];\n\t}\n \n\tll query(ll ind, ll low,ll high,ll l,ll r)\n\t{\n\t\tif(r<low || high<l) return 0;\n\t\tif(low>=l && high<=r) return seg[ind];\n \n\t\tll mid = (low+high)>>1;\n\t\tll left = query(2*ind+1, low, mid, l, r);\n\t\tll right = query(2*ind+2, mid+1, high, l, r);\n \n\t\treturn left+right;\n\t}\n\t\n\tvoid update(ll ind, ll low, ll high, ll i,ll val,vector<ll>& arr)\n\t{\n\t\tif(low == high)\n\t\t{\n\t\t\tif(low!=0 and low!=n-1){\n                seg[ind]=(ll)(arr[low]>arr[low-1] and arr[low]>arr[low+1]);\n            }\n\t\t\treturn;\n\t\t}\n \n\t\tll mid = (low+high)>>1;\n\t\tif(i<=mid) update(2*ind+1, low, mid, i, val,arr);\n\t\telse update(2*ind+2, mid+1, high, i, val,arr);\n \n\t\tseg[ind] =(seg[ind*2+1]+seg[2*ind+2]);\n\t}\n \n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        auto sg=SGT(nums.size());\n        sg.build(0,0,n-1,nums);\n        vector<int> ans;\n        for(auto i:queries){\n            if(i[0]==1){\n                int l=i[1],r=i[2];\n                \n                ans.pb(sg.query(0,0,n-1,l+1,r-1));\n            }\n            else{\n                nums[i[1]]=i[2];\n                sg.update(0,0,n-1,i[1],i[2],nums);\n                sg.update(0,0,n-1,i[1]-1,0,nums);\n                sg.update(0,0,n-1,i[1]+1,0,nums);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718507494",
    "subm_id": "1289653368"
}