{
    "username": "pahadixpanda",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // Function to perform BFS to check reachability from start to target nodes\n    int sahayak(const vector<vector<int>>& adj, int start, int t1, int t2, int n) {\n        queue<int> q;\n        vector<int> visited(n, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n    }\n    \n    // Function to determine if there's a path to reach the corners\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<pair<pair<int, int>, int>> circ(numCircles);\n        vector<vector<int>> adj(numCircles + 4);\n        \n        // Initialize circle properties\n        for (int i = 0; i < numCircles; ++i) {\n            circ[i] = {{circles[i][0], circles[i][1]}, circles[i][2]};\n        }\n        \n        // Build the graph\n        for (int i = 0; i < numCircles; ++i) {\n            if (circ[i].first.first <= circ[i].second) adj[numCircles].push_back(i), adj[i].push_back(numCircles);\n            if (X - circ[i].first.first <= circ[i].second) adj[numCircles + 2].push_back(i), adj[i].push_back(numCircles + 2);\n            if (circ[i].first.second <= circ[i].second) adj[numCircles + 1].push_back(i), adj[i].push_back(numCircles + 1);\n            if (Y - circ[i].first.second <= circ[i].second) adj[numCircles + 3].push_back(i), adj[i].push_back(numCircles + 3);\n            \n            for (int j = i + 1; j < numCircles; ++j) {\n                double dist = sqrt(pow(circ[i].first.first - circ[j].first.first, 2) +\n                                   pow(circ[i].first.second - circ[j].first.second, 2));\n                int radiusSum = circ[i].second + circ[j].second;\n                if (radiusSum >= dist) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        // Check connectivity to the corners\n        bool reachable = !sahayak(adj, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) &&\n                         !sahayak(adj, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n        return reachable;\n    }\n};\n",
    "submit_ts": "1722138301",
    "subm_id": "1335787207"
}