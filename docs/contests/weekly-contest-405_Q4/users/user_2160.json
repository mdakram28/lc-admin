{
    "username": "anithaguntreddi07",
    "submission": "\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        buildTrie(root, words, costs);\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* curr = root;\n            for (int j = i; j < n; ++j) {\n                if (curr->children.find(target[j]) == curr->children.end()) break;\n                curr = curr->children[target[j]];\n                if (curr->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    void buildTrie(TrieNode* root, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* curr = root;\n            for (char c : words[i]) {\n                if (curr->children.find(c) == curr->children.end()) {\n                    curr->children[c] = new TrieNode();\n                }\n                curr = curr->children[c];\n            }\n            curr->cost = min(curr->cost, costs[i]);\n        }\n    }\n};",
    "submit_ts": "1720322333",
    "subm_id": "1312347065"
}