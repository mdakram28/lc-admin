{
    "username": "nobodytk11",
    "submission": "class Solution {\npublic:\n    static const int N = 1e5 + 5;  \n    \n    int a[N]; \n    int f[30][N];  \n    \n    int get(int l, int r) {\n        int k = log2(r - l + 1); \n        return (f[k][l] & f[k][r - (1 << k) + 1]); \n    }\n    \n    int binSearch1(int l, int r, int k) {\n        int i = l;  \n        int ans = r + 1; \n        while (l <= r) {\n            int mid = (l + r) >> 1; \n            if (get(i, mid) <= k) {\n                ans = mid;  \n                r = mid - 1; \n            }\n            else {\n                l = mid + 1; \n            }\n        }\n        return ans; \n    }\n    \n    int binSearch2(int l, int r, int k) {\n        int i = l;  \n        int ans = r + 1; \n        while (l <= r) {\n            int mid = (l + r) >> 1; \n            if (get(i, mid) < k) {\n                ans = mid;  \n                r = mid - 1; \n            }\n            else {\n                l = mid + 1; \n            }\n        }\n        return ans; \n    }\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size(); \n        for (int i = 1; i <= n; i++) a[i] = nums[i - 1]; \n        \n        for (int i = 1; i <= n; i++) f[0][i] = a[i];  \n        \n        for (int k = 1; (1 << k) <= n; k++) {\n            for (int i = 1; i + (1 << k) - 1 <= n; i++) {\n                f[k][i] = (f[k - 1][i] & f[k - 1][i + (1 << (k - 1))]); \n            }\n        }\n        \n        long long ans = 0;  \n        for (int i = 1; i <= n; i++) {\n            int l = binSearch1(i, n, k);  \n            int r = binSearch2(i, n, k); \n            ans += r - l;  \n        }\n        \n        return ans; \n    }\n};",
    "submit_ts": "1720278431",
    "subm_id": "1311708846"
}