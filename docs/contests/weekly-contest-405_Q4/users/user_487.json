{
    "username": "vanshika_79",
    "submission": "class Solution {\npublic:\nstruct TrieNode {\n    std::unordered_map<char, TrieNode*> children;\n    int minCost;\n    TrieNode() : minCost(INT_MAX) {}\n};\n\nvoid insert(TrieNode* root, const std::string& word, int cost) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (!node->children.count(c)) {\n            node->children[c] = new TrieNode();\n        }\n        node = node->children[c];\n    }\n    node->minCost = std::min(node->minCost, cost);\n}\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int targetLength = target.size();\n    std::vector<int> dp(targetLength + 1, INT_MAX);\n    dp[0] = 0; // No cost to form an empty string\n    \n    // Build Trie from words\n    TrieNode* root = new TrieNode();\n    for (int i = 0; i < words.size(); ++i) {\n        insert(root, words[i], costs[i]);\n    }\n    \n    // Traverse the target and update dp array\n    for (int i = 0; i < targetLength; ++i) {\n        if (dp[i] == INT_MAX) continue; // Skip if this prefix is not reachable\n        \n        TrieNode* node = root;\n        for (int j = i; j < targetLength; ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            if (node->minCost != INT_MAX) { // Found a valid word\n                int nextPos = j + 1;\n                dp[nextPos] = std::min(dp[nextPos], dp[i] + node->minCost);\n            }\n        }\n    }\n    \n    return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n}\n    \n};",
    "submit_ts": "1720321960",
    "subm_id": "1312336929"
}