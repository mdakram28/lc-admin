{
    "username": "Xuanzhang98",
    "submission": "class Solution {\n    int covered = 0;\n    List<int[]> intervals = new ArrayList();\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        intervals.add(new int[]{-1, -1});\n        int l = queries.length;\n        int[] res = new int[l];\n\n        for(int i = 0; i < l; i++){\n            insert(new int[]{queries[i][0] + 1, queries[i][1] - 1});\n            res[i] = n - covered - 1;\n        }\n\n        return res;\n    }\n\n    public void insert(int[] query) {\n        if(query[0] > query[1]) return;\n        int n = intervals.size(), i = intervals.size();\n\n        int l = 0, r = n - 1;\n        while(l <= r){\n            int mid = (r - l) / 2 + l;\n            if(intervals.get(mid)[1] < query[0]){\n                i = mid + 1;\n                l = mid + 1;\n            }else{\n                r = mid - 1;\n            }\n        }\n\n        while (i < intervals.size() && query[1] >= intervals.get(i)[0]) {\n            query[0] = Math.min(query[0], intervals.get(i)[0]);\n            query[1] = Math.max(query[1], intervals.get(i)[1]);\n            covered -= (intervals.get(i)[1] - intervals.get(i)[0] + 1);\n            intervals.remove(i);\n        }\n\n        intervals.add(i, query);\n\n        covered += query[1] - query[0] + 1;\n\n        return;\n    }\n}",
    "submit_ts": "1722743169",
    "subm_id": "1343785965"
}