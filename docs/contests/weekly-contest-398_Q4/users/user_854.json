{
    "username": "yaoyi92",
    "submission": "class Solution {\n    \n//int nCr(int n, int r)\n//{\n//    if (r > n)\n//        return 0;\n//    if (r == 0 || r == n)\n//        return 1;\n//    return nCr(n - 1, r - 1) + nCr(n - 1, r);\n//}\n    \nint nCr(int n, int r) {\n    // If r is greater than n, return 0\n    if (r > n) return 0;\n    // If r is 0 or equal to n, return 1\n    if (r == 0 || n == r) return 1;\n    // Initialize the logarithmic sum to 0\n    double res = 0;\n    // Calculate the logarithmic sum of the numerator and denominator using loop\n    for (int i = 0; i < r; i++) {\n        // Add the logarithm of (n-i) and subtract the logarithm of (i+1)\n        res += log(n-i) - log(i+1);\n    }\n    // Convert logarithmic sum back to a normal number\n    return (int)round(exp(res));\n}\n\n\npublic:\n    int waysToReachStair(int k) {\n        int ret = 0;\n        for(int i = 0; i < 30; i++) {\n            int x = -(k - (1<<i));\n            //cout << x << endl;\n            if (x >= 0 && x <= i+1) {\n                ret += nCr(i+1, x);\n            }\n        }\n        //cout << endl;\n        return ret;\n        \n    }\n};",
    "submit_ts": "1716088535",
    "subm_id": "1261816826"
}