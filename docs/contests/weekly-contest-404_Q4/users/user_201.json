{
    "username": "wixton",
    "submission": "class Solution {\npublic:\n    int help(vector<int> g[],int n) {\n        vector<int> h(n,0);\n        dfs(0, -1, g, h);\n        int idx = 0;\n        for(int i=0;i<n;i++) {\n            if(h[idx]<h[i]) {\n                idx=i;\n            }\n        }\n        vector<int> H(n,0);\n        dfs(idx, -1, g, H);\n        int idx1 = 0;\n        for(int i=0;i<n;i++) {\n            if(H[idx1] < H[i]) {\n                idx1 = i;\n            }\n        }\n        return H[idx1];\n    }\n    struct DSU\n{\n    vector<int> par, rnk, sz;\n    int c;\n    DSU(int n) : par(n + 1), rnk(n + 1, 0), sz(n + 1, 1), c(n) {\n        for (int i = 1; i <= n; ++i)\n            par[i] = i;\n    }\n    int find(int i) {\n        return (par[i] == i ? i : (par[i] = find(par[i])));\n    }\n    bool same(int i, int j) {\n        return find(i) == find(j);\n    }\n    int get_size(int i) {\n        return sz[find(i)];\n    }\n    int count() {\n        return c; // connected components\n    }\n    int merge(int i, int j) {\n        if ((i = find(i)) == (j = find(j)))\n            return -1;\n        else\n            --c;\n        if (rnk[i] > rnk[j])\n            swap(i, j);\n        par[i] = j;\n        sz[j] += sz[i];\n        if (rnk[i] == rnk[j])\n            rnk[j]++;\n        return j;\n    }\n};\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& ar1, vector<vector<int>>& ar2) {\n        int n = ar1.size()+1;\n        int m = ar2.size()+1;\n        vector<int> g1[n], g2[m];\n        DSU ds(n);\n        for(auto i : ar1) {\n            g1[i[0]].push_back(i[1]);            \n            g1[i[1]].push_back(i[0]);\n        }\n        for(auto i : ar2) {\n            g2[i[0]].push_back(i[1]);            \n            g2[i[1]].push_back(i[0]);\n        }\n        int res1 = help(g1,n);\n        int res2 = help(g2,m);\n        int mx = max(res1, res2);\n        mx = max(mx,(res1 + 1)/2 + (res2 + 1)/2 + 1);\n        return mx;\n    }\n    void dfs(int node, int par,vector<int> g[],vector<int> &h) {\n        for(auto ch : g[node]) {\n            if(ch !=par) {\n                h[ch] = 1 + h[node];\n                dfs(ch, node, g, h);\n            }\n        }\n    }\n    \n};",
    "submit_ts": "1719717539",
    "subm_id": "1304394264"
}