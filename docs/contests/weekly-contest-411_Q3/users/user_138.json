{
    "username": "aknov711",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        int dp[n/2 + 4][k];\n        memset(dp, -1, sizeof(dp));\n        int pw[n+1];\n        pw[0]=1;\n        for(int i=1;i<=n;i++){\n            pw[i] = pw[i-1]*10;\n            pw[i]%=k; \n        }\n        \n        if(n%2){\n            for(int dig=0;dig<=9;dig++){\n                int ulta=n-1-n/2;\n                int mod = (dig * pw[ulta])%k;\n                dp[n/2][mod] = max(dp[n/2][mod], dig);\n            }\n        } else {\n            for(int dig=0;dig<=9;dig++){\n                int ulta=n-1-n/2;\n                int mod1 = (dig * pw[ulta])%k;\n                int mod2 = (dig * pw[ulta+1])%k;\n                mod1+=mod2;\n                mod1%=k;\n                dp[n/2-1][mod1] = max(dp[n/2-1][mod1], dig);\n            }\n        }\n        \n        for(int pos=(n+1)/2-2; pos>=0; pos--){\n            for(int dig=0; dig<=9; dig++){\n                int ulta1 = n-1-pos;\n                int ulta2 = pos;\n                int mod1 = (dig * pw[ulta1])%k;\n                int mod2 =  (dig * pw[ulta2])%k;\n                mod1 += mod2;\n                mod1 %= k;\n                \n                for(int aageMod=0; aageMod<k; aageMod++){\n                    if(dp[pos+1][aageMod] == -1)\n                        continue;\n                    int newMod = (mod1 + aageMod)%k;\n                    dp[pos][newMod] = max(dp[pos][newMod], dig);\n                }\n            }\n        }\n        \n        string ans;\n        for(int i=0;i<n;i++)\n            ans+=\"*\";\n        \n        int curMod=0;\n        for(int pos=0;pos<=(n+1)/2-2; pos++){\n            for(int dig=9;dig>=0;dig--){\n                int contri = (dig * pw[pos])%k;\n                contri += (dig * pw[n-1-pos])%k;\n                contri %= k;\n                \n                int newMod = (curMod - contri)%k;\n                if(newMod < 0)\n                    newMod += k;\n                if(dp[pos+1][newMod] != -1){\n                    ans[pos]='0' + dig;\n                    ans[n-1-pos]='0' + dig;\n                    curMod = newMod;\n                    break;\n                }\n            }\n        }\n        \n        int rem = (n+1)/2 - 1;\n        int ref = n-1-rem;\n        \n        ans[rem] = '0' + dp[rem][curMod];\n        ans[ref] = ans[rem];\n        \n        return ans;\n    }\n};",
    "submit_ts": "1723950657",
    "subm_id": "1359751657"
}