{
    "username": "whoawhoawhoa",
    "submission": "class Solution {\n    static int n, stair;\n    public int waysToReachStair(int k) {\n        stair = k;\n        n = 31 - Integer.numberOfLeadingZeros(k);\n        // System.out.println(\"n = \" + n);\n        Map<Integer, Integer>[][] dp = new Map[n + 3][2];\n        return go(dp, 0, 0, 1);\n    }\n    \n    static int go(Map<Integer, Integer>[][] dp, int steps, int prev, int num) {\n        // System.out.println(steps);\n        if (steps > n + 2) {\n            return 0;\n        }\n        if (dp[steps][prev] != null && dp[steps][prev].containsKey(num)) {\n            return dp[steps][prev].get(num);\n        }\n        int res = 0;\n        if ((stair ^ num) == 0) {\n            res++;\n        }\n        if (prev == 1) {\n            // no step back\n            res += go(dp, steps + 1, prev ^ 1, num + (1 << steps));\n        } else {\n            // step back\n            res += go(dp, steps, prev ^ 1, num - 1);\n            // w/o step back\n            res += go(dp, steps + 1, prev, num + (1 << steps));\n        }\n        if (dp[steps][prev] == null) {\n            dp[steps][prev] = new HashMap<>();\n        }\n        dp[steps][prev].put(num, res);\n        return res;\n    }\n}",
    "submit_ts": 1716089944.0
}