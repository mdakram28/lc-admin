{
    "username": "Rajat-Raj",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4);\n        \n        createGraph(graph, circles, numCircles, X, Y);\n        \n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n        \n        return isBlocked == 0;\n    }\n    \nprivate:\n    void createGraph(vector<vector<int>>& graph, const vector<vector<int>>& circles, int numCircles, int X, int Y) {\n        for (int i = 0; i < numCircles + 4; ++i) {\n            graph[i] = vector<int>();\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            addBoundaryConnections(graph, circles[i], i, numCircles, X, Y);\n            for (int j = i + 1; j < numCircles; ++j) {\n                addCircleConnections(graph, circles[i], circles[j], i, j);\n            }\n        }\n    }\n    \n    void addBoundaryConnections(vector<vector<int>>& graph, const vector<int>& circle, int index, int numCircles, int X, int Y) {\n        if (circle[0] <= circle[2]) {\n            graph[numCircles].push_back(index);\n            graph[index].push_back(numCircles);\n        }\n        if (X - circle[0] <= circle[2]) {\n            graph[numCircles + 2].push_back(index);\n            graph[index].push_back(numCircles + 2);\n        }\n        if (circle[1] <= circle[2]) {\n            graph[numCircles + 1].push_back(index);\n            graph[index].push_back(numCircles + 1);\n        }\n        if (Y - circle[1] <= circle[2]) {\n            graph[numCircles + 3].push_back(index);\n            graph[index].push_back(numCircles + 3);\n        }\n    }\n    \n    void addCircleConnections(vector<vector<int>>& graph, const vector<int>& circle1, const vector<int>& circle2, int index1, int index2) {\n        double distance = sqrt(pow(circle1[0] - circle2[0], 2) + pow(circle1[1] - circle2[1], 2));\n        int radiusSum = circle1[2] + circle2[2];\n        if (radiusSum >= distance) {\n            graph[index1].push_back(index2);\n            graph[index2].push_back(index1);\n        }\n    }\n    \n    int bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<bool> visited(nodes, false);\n        q.push(start);\n        visited[start] = true;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2] ? 1 : 0;\n    }\n};",
    "submit_ts": "1722138736",
    "subm_id": "1335798357"
}