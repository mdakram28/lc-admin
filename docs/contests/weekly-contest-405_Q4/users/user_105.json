{
    "username": "07dishwasherbob8",
    "submission": "typedef long long ll;\ntypedef long double ld;\nconst ll MOD = 1e9 + 7;\n\ntemplate<typename T>\nstd::ostream& operator<<(std::ostream& os, const vector<T> v) {\n    for(auto x : v) os << x << \" \";\n    return os;\n}\n\nconst ll M1 = 998244353, B1 = 9973;\nstruct stringhash {\n    vector<ll> h1;\n    vector<ll> p1;\n    int n;\n\n    stringhash(string s) {\n        this->n = s.size();\n        p1.push_back(1);\n        for(int i = 0 ; i < n; i++) {\n            p1.push_back(p1.back() * B1 % M1);\n        }\n        h1.push_back(0);\n        for(int i = 0; i < n; i++) {\n            h1.push_back((h1[i] * B1 + s[i]) % M1);\n        }\n    }\n\n    ll get_hash(int l, int r) { //[l,r) because that's the cool, Andwerp way\n        ll num1 = (h1[r] - h1[l] * p1[r-l] % M1 + M1) % M1;\n        return num1;\n    }\n\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int n = words.size();\n\n        map<string,int> m;\n        for(int i = 0; i < n; i++) {\n\n            if(m.count(words[i])) {\n                m[words[i]] = min(m[words[i]], costs[i]);\n            } else {\n                m[words[i]] = costs[i];\n            }\n        }\n\n        words.clear();\n        costs.clear();\n        for(auto [s, c] : m) {\n            words.push_back(s);\n            costs.push_back(c);\n        }\n        n = words.size();\n\n        stringhash mainhash(target);\n        vector<ll> hashes;\n        for(int i = 0; i < n; i++) {\n            stringhash sh(words[i]);\n            hashes.push_back(sh.get_hash(0,words[i].size()));\n        }\n        vector<int> dp(target.size() + 1,2e9);\n        dp[0] = 0;\n        for(int i = 1; i <= target.size(); i++) {\n            for(int j = 0; j < n; j++) {\n                int length = words[j].size();\n                if(length <= i && mainhash.get_hash(i-length,i) == hashes[j]) {\n\n                    dp[i] = min(dp[i], dp[i-length] + costs[j]);\n                }\n            }\n        }\n\n        // cout << \"dp : \" << dp << '\\n';\n\n        if(dp.back() >= 2e9) {\n            return -1;\n        } else {\n            return dp.back();\n        }\n    }\n};",
    "submit_ts": "1720320159",
    "subm_id": "1312285129"
}