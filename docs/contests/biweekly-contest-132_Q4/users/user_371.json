{
    "username": "alex-does-leetcode",
    "submission": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp = [0] * n\n        mx = [0] * n\n        last = defaultdict(int)\n        for i in range(n):\n            if nums[i] in last:\n                dp[i] = dp[last[nums[i]]] + 1\n            else:\n                dp[i] = 1\n            if i < n-1:\n                mx[i+1] = max(mx[i], dp[i])\n            last[nums[i]] = i\n        # print(dp)\n        # print(mx)\n        dp2 = dp\n        mx2 = mx\n        for r in range(k):\n            # print(f\"round = {r+1}\")\n            last = defaultdict(int)\n            dp = [0] * n\n            mx = [0] * n\n            for i in range(n):\n                # extend\n                if nums[i] in last:\n                    dp[i] = dp[last[nums[i]]] + 1\n                else:\n                    dp[i] = 1\n                # can i use the previous max?\n                if mx2[i]+1 > dp[i]:\n                    dp[i] = mx2[i]+1\n                if i < n-1:\n                    mx[i+1] = max(mx[i], dp[i])\n                last[nums[i]] = i\n            dp2 = dp\n            mx2 = mx\n        # print(\"dp = \", str(dp))\n        # print(\"mx = \", str(mx))\n        return max(dp[-1], mx[-1])",
    "submit_ts": 1717861031.0
}