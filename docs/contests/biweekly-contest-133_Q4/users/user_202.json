{
    "username": "celestialcoder",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int> req(n, -1);\n        for (auto& r : requirements) {\n            req[r[0]] = r[1];\n        }\n        if (req[0] > 0) {\n            return 0;\n        }\n        int m = 400, mod = 1e9 + 7;\n        vector<vector<int>> dp(2, vector<int>(m + 1));\n        dp[0][0] = 1;\n        vector<int> p(m + 2, 1);\n        p[0] = 0;\n        for (int i = 1; i < n; i++) {\n            if (req[i] == -1) {\n                for (int j = 0; j <= m; j++) {\n                    if (j > i) {\n                        dp[1][j] = (p[j + 1] - p[j - i] + mod) % mod;\n                    } else {\n                        dp[1][j] = p[j + 1];\n                    }\n                }\n            } else {\n                int j = req[i];\n                if (j > i) {\n                    dp[1][j] = (p[j + 1] - p[j - i] + mod) % mod;\n                } else {\n                    dp[1][j] = p[j + 1];\n                }\n            }\n            for (int j = 0; j <= m; j++) {\n                dp[0][j] = dp[1][j], dp[1][j] = 0, p[j] = 0;\n            }\n            for (int j = 0; j <= m; j++) {\n                p[j + 1] = (p[j] + dp[0][j]) % mod;\n            }\n        }\n        return dp[0][req[n - 1]];\n    }\n};",
    "submit_ts": "1719069532",
    "subm_id": "1296799296"
}