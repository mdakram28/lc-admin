{
    "username": "UShitcslj",
    "submission": "class SegmentTree:\n    def __init__(self, nums: List[int]):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n+4)\n        self.build(0, 0, self.n - 1)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def is_peak(self, i):\n        if i == 0 or i == self.n - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n\n    def update(self, idx, value):\n        self.update_tree(0, 0, self.n - 1, idx, value)\n\n    def update_tree(self, node, start, end, idx, value):\n        if start == end:\n            self.nums[idx] = value\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update_tree(left_child, start, mid, idx, value)\n            else:\n                self.update_tree(right_child, mid + 1, end, idx, value)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, L, R):\n        return self.query_tree(0, 0, self.n - 1, L, R)\n\n    def query_tree(self, node, start, end, L, R):\n        \n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query_tree(left_child, start, mid, L, R)\n        right_query = self.query_tree(right_child, mid + 1, end, L, R)\n        return left_query + right_query\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        seg_tree = SegmentTree(nums)\n        result = []\n\n        for query in queries:\n            if query[0] == 1:\n                _, li, ri = query\n                result.append(seg_tree.query(li+1, ri-1))\n            elif query[0] == 2:\n                _, index, val = query\n                seg_tree.update(index, val)\n                if index>0:\n                    seg_tree.update(index-1, nums[index-1])\n                if index+1<len(nums):\n                    seg_tree.update(index+1, nums[index+1])\n\n        return result\n        ",
    "submit_ts": 1718507189.0
}