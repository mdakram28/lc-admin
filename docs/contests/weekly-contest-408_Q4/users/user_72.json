{
    "username": "Maruzensky",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        class DSU:\n            def __init__(self, n):\n                self.uf = list(range(n))\n                self.size = [1] * n\n                self.group = n\n\n            def parent(self, idx):\n                if idx == self.uf[idx]:\n                    return idx\n                self.uf[idx] = self.parent(self.uf[idx])\n                return self.uf[idx]\n\n            def merge(self, idx1, idx2):\n                idx1 = self.parent(idx1)\n                idx2 = self.parent(idx2)\n\n                if idx1 != idx2:\n                    self.group -= 1\n\n                    r = (self.size[idx1] < self.size[idx2])\n                    if r:\n                        self.uf[idx1] = self.uf[idx2]\n                        self.size[idx2] += self.size[idx1]\n                    else:\n                        self.uf[idx2] = self.uf[idx1]\n                        self.size[idx1] += self.size[idx2]\n\n                    return True\n                return False\n\n        n = len(circles)\n        dsu = DSU(n + 4)\n        \n        dsu.merge(n, n + 1)\n        dsu.merge(n + 2, n + 3)\n        \n        for i, (x, y, r) in enumerate(circles):\n            if x <= r:\n                dsu.merge(i, n)\n            if y + r >= Y:\n                dsu.merge(i, n + 1)\n            if y <= r:\n                dsu.merge(i, n + 2)\n            if x + r >= X:\n                dsu.merge(i, n + 3)\n                \n        for i in range(n):\n            for j in range(i + 1, n):\n                x1, y1, r1 = circles[i]\n                x2, y2, r2 = circles[j]\n                \n                d = (x1 - x2)**2 + (y1 - y2)**2\n                if d <= (r1 + r2)**2:\n                    dsu.merge(i, j)\n                    \n        return dsu.parent(n) != dsu.parent(n + 2)",
    "submit_ts": "1722135840",
    "subm_id": "1335715288"
}