{
    "username": "BipradeepBera",
    "submission": "class Solution {\npublic:\n\n    vector<long long> seg;\n\n    void build(long long indx, long long low, long long high, vector<long long> &a)\n    {\n        if (low == high)\n        {\n            seg[indx] = a[low];\n            return;\n        }\n\n        long long mid = (low + high) / 2;\n        build(2 * indx + 1, low, mid, a);\n        build(2 * indx + 2, mid + 1, high, a);\n        \n        seg[indx]=(seg[2*indx+1] & seg[2*indx+2]);\n    }\n\n    long long query(long long indx, long long low, long long high, long long l, long long r)\n    {\n        if (low >= l && high <= r)\n        {\n            return seg[indx];\n        }\n\n        if (low > r || high < l)\n        {\n            return INT_MAX;\n        }\n        long long mid = (low + high) / 2;\n\n        long long left = query(2 * indx + 1, low, mid, l, r);\n        long long right = query(2 * indx + 2, mid + 1, high, l, r);\n        \n        long long ans=(left & right);\n        return ans;\n    }\n    \n    long long countSubarrays(vector<int>& nums, int K) {\n        \n        vector<long long> a;\n        \n        int n=nums.size();\n        \n        seg.resize(4 * n);\n        \n        \n        for(int i=0;i<n;i++)\n        {\n            a.push_back((long long)nums[i]);\n        }\n        \n        long long k=K;\n        \n        build(0,0,n-1,a);\n        \n        long long ans=0ll;\n        \n        for(int i=0;i<n;i++)\n        {\n            int l=i;\n            int r=n-1;\n            \n            int lower_bound=-1;\n            \n            while(l<=r)\n            {\n                int mid=l+(r-l)/2;\n                \n                int val=query(0,0,n-1,i,mid);\n                \n                if(val==k)\n                {\n                    lower_bound=mid;\n                    r=mid-1;\n                }\n                else if(val>k)\n                {\n                   l=mid+1; \n                }\n                else\n                {\n                    r=mid-1;\n                }\n            }\n            \n            if(lower_bound==-1)\n            {\n                continue;\n            }\n            \n            l=i;\n            r=n-1;\n            int upper_bound=-1;\n            \n            while(l<=r)\n            {\n                int mid=l+(r-l)/2;\n                \n                int val=query(0,0,n-1,i,mid);\n                \n                if(val==k)\n                {\n                    upper_bound=mid;\n                    l=mid+1;\n                }\n                else if(val>k)\n                {\n                  l=mid+1; \n                }\n                else\n                {\n                    r=mid-1;\n                }\n            }\n            \n            //cout<<\"i=\"<<i<<\"\\n\";\n            ans+=(long long)(upper_bound-lower_bound+1ll);\n            // cout<<upper_bound<<\"\\n\";\n            // cout<<lower_bound<<\"\\n\";\n            // cout<<\"ans=\"<<ans<<\"\\n\";\n        }\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": "1720281024",
    "subm_id": "1311810456"
}