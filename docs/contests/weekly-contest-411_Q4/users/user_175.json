{
    "username": "CogentCoder73",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.length();\n        vector<int> fails(n);\n        vector<int> maxSub(n);\n        vector<long long> msPfx(n + 1);\n        set<int> cVals;\n        map<int, int> matching;\n        int o = 0;\n        int z = 0;\n        int r = n - 1;\n        int c = n - 1;\n        for (int i = n - 1; i >= 0; i--) {\n            if (s[i] == '1') o++;\n            else z++;\n            while (o > k && z > k) {\n                if (s[c] == '1') o--;\n                else z--;\n                c--;\n            }\n            fails[i] = c + 1;\n            cVals.insert(c);\n            matching[c] = i;\n            maxSub[i] = fails[i] - i;\n        }\n        // for (int i = 0; i < n; i++) cout << fails[i] << \", \";\n        // cout << endl;\n        // for (int i : cVals) cout << i << \": \" << matching[i] << \", \";\n        // cout << endl;\n        msPfx[0] = 0;\n        for (int i = 1; i <= n; i++) msPfx[i] = maxSub[i - 1] + msPfx[i - 1];\n        int q = queries.size();\n        vector<long long> res(q);\n        for (int i = 0; i < q; i++) {\n            c = *cVals.lower_bound(queries[i][1]);\n            // cout << c << \"; \";\n            if (matching[c] <= queries[i][0]) res[i] = (((long long) queries[i][1] - queries[i][0] + 1) *  (queries[i][1] - queries[i][0] + 2))/2;\n            else {\n                // cout << \"p\";\n                res[i] = msPfx[matching[c]] - msPfx[queries[i][0]];\n                res[i] += (((long long) queries[i][1] - matching[c] + 1) *  (queries[i][1] - matching[c] + 2))/2;\n            }\n            // cout << endl;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723953366",
    "subm_id": "1359819361"
}