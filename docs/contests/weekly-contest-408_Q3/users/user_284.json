{
    "username": "sbiswas165",
    "submission": "class Solution {\n    public int numberOfSubstrings(String S) {\n        // the number of zeros is bounded by sqrt(N) if that\n        // n^3/2log(n)\n        // suppose the string has k zeros, then we know that \n        /*\n        Fixed k:\n        \n         -fix the end point of the string\n         -[i, j] should be the start point for k zeros\n         -[>= k^2 ones]\n         -[1, e] to achieve this\n         [i, min(e,j)] ways  if e > i\n        \n        */\n        \n        int ct = 0;\n        int n = S.length();\n        int[] A = new int[n+1];\n        int s = 0;\n        \n        \n        int z = 0;\n        int o = 0;\n       \n        int[] pZ = new int[n+1];\n        int[] pO = new int[n+1];\n        \n        HashMap<Integer, Integer> zmap = new HashMap<Integer, Integer>();\n        HashMap<Integer, Integer> omap = new HashMap<Integer, Integer>();\n        \n        zmap.put(0, 0);\n        omap.put(0, 0);\n        \n        for (int i = 1; i <= n; i++) {\n            if (S.charAt(i-1) == '0') {\n                A[i] = 0;\n                s=0;\n                z++;\n            } else {\n                A[i] = 1;\n                s++;\n                o++;\n            }\n            \n            pZ[i] = z;\n            pO[i] = o;\n            \n            zmap.put(pZ[i], i);\n            omap.put(pO[i], i);\n            \n            ct += s;\n        }\n        \n        for (int k = 1; k*k <= pO[n] && k <= pZ[n]; k++) {\n            \n            \n            // System.out.println(\"k = \"+ k);\n            \n            for (int i = 1; i <= n; i++) {\n                if (pZ[i] < k) {\n                    continue; \n                }\n                \n                if (pO[i] < k*k) \n                    continue;\n                \n                int lo = 1;\n                int hi = i;\n                \n                // biggest index lo such that p[i] - p[lo-1] >= k\n                \n                // p(i) - p(lo-1) = k => p(lo-1) = p(i) - k =>  max(L(p(i) - k - 1),0) + 1 <= lo-1 <= L(p(i) - k)\n                //                                              1 + max(L, 0) <= lo <= L + 1\n                \n                // while (lo != hi) {\n                //     // p(i) - p(lo-1) >= k\n                //     int mid = (lo + hi + 1)/2;\n                //     if (pZ[i] - pZ[mid-1] >= k) {\n                //         lo = mid;\n                //     } else {\n                //         hi = mid-1;\n                //     }\n                // }\n                \n                \n                int b = zmap.get(pZ[i] - k) + 1;\n                \n                // tells me the index s.t p(i) - p(lo-1) >= k\n//                 lo = 1;\n//                 hi = i;\n//                 while (lo != hi) {\n//                     int mid = (lo + hi)/2;\n//                     if (pZ[i] - pZ[mid-1] <= k) {\n//                         hi = mid;\n//                     } else {\n//                         lo = mid+1;\n//                     }\n//                 }\n                \n                int a = 1;\n                \n                if (zmap.containsKey(pZ[i] - k - 1)) {\n                    a = zmap.get(pZ[i] - k - 1) + 2;\n                }\n                \n                \n                // tell me the index s.t P(i) - P(index-1) >= k^2\n                \n                // lo = 1;\n                // hi = i;\n                // while (lo != hi) {\n                //     int mid = (lo + hi + 1)/2;\n                //     if (pO[i] - pO[mid-1] >= k*k) {\n                //         lo = mid;\n                //     } else {\n                //         hi = mid-1;\n                //     }\n                // }\n                \n                int c = omap.get(pO[i] - k*k) + 1;\n                \n                if (c < a) {\n                    continue;\n                }\n                \n                if (c > b) {\n                    c = b;\n                }\n                \n                ct += c-a+1;\n                \n                \n            }\n            \n            \n            // System.out.println();\n        }\n        \n        return ct;\n    }\n    \n    \n}",
    "submit_ts": "1722138690",
    "subm_id": "1335797185"
}