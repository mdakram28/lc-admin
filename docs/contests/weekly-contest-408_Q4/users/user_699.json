{
    "username": "_Knight_11",
    "submission": "class DisjointSet{\n\n    public:\n    vector<int> parent,rank,size;\n\n    DisjointSet(int n){\n        parent.resize(n+1);\n        rank.resize(n+1,0);\n        size.resize(n+1,0);\n\n        for(int i=0;i<=n;i++){\n            parent[i] = i;\n            size[i] = 1;\n        }\n    }\n\n    int findUPar(int node){\n        if(node == parent[node])return node;\n\n        return parent[node] = findUPar(parent[node]);\n    }\n\n    // void union_by_rank(int u, int v){\n    //     int ulp_u = findUPar(u);\n    //     int ulp_v = findUPar(v);\n\n    //     if(ulp_u == ulp_v)return;\n\n    //     if(rank[ulp_u] < rank[ulp_v]){\n    //         parent[ulp_u] = ulp_v;\n    //     }\n    //     else if(rank[ulp_u] > rank[ulp_v]){\n    //         parent[ulp_v] = ulp_u;\n    //     }\n    //     else{\n    //         parent[ulp_v] = ulp_u;\n    //         rank[ulp_u]++;\n    //     }\n    // }\n\n    void union_by_size(int u, int v){\n        int ulp_u = findUPar(u);\n        int ulp_v = findUPar(v);\n\n        if(ulp_u == ulp_v)return;\n\n        if(size[ulp_u] < size[ulp_v]){\n            parent[ulp_u] = ulp_v;\n            size[ulp_v] += size[ulp_u];\n        }\n        else{\n            parent[ulp_v] = ulp_u;\n            size[ulp_u] += size[ulp_v];\n        }\n    }\n};\nclass Solution {\npublic:\n     int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool dfs(vector<int> &vis, int node, vector<int> adjl[]){\n        vis[node] = 1;\n\n        for(auto it : adjl[node]){\n            if(!vis[it]){\n                if(dfs(vis,it,adjl))return true;\n            }\n        }\n        return false;\n    }\n    \n        bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n             vector<pair<pair<int, int>, int>> dp(circles2.size());\n\n             vector<vector<int>> adj(circles2.size() + 4);\n                int cnt=circles2.size();\n        \n        for (int i = 0; i < cnt; ++i) {\n            dp[i].first.first=circles2[i][0];\n\n            dp[i].first.second=circles2[i][1];\n\n            dp[i].second=circles2[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < cnt; ++i) {\n             \n            if (dp[i].first.first <= dp[i].second) {\n                adj[cnt].push_back(i);\n                adj[i].push_back(cnt);\n            }\n\n            if (X - dp[i].first.first <= dp[i].second) {\n                adj[cnt + 2].push_back(i);\n                adj[i].push_back(cnt + 2);\n            }\n\n            if (dp[i].first.second <= dp[i].second) {\n                adj[cnt + 1].push_back(i);\n                adj[i].push_back(cnt + 1);\n            }\n\n            if (Y - dp[i].first.second <= dp[i].second) {\n                adj[cnt + 3].push_back(i);\n                adj[i].push_back(cnt + 3);\n            }\n\n            for (int j = i + 1; j < cnt; ++j) {\n                double distance = sqrt(pow(dp[i].first.first - dp[j].first.first, 2) +\n                                       pow(dp[i].first.second - dp[j].first.second, 2));\n                int radius_sum = dp[i].second + dp[j].second;\n                if (radius_sum >= distance) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        int is_blocked = 0;\n    is_blocked = max(is_blocked, bfs(adj, cnt,cnt + 1, cnt + 2, cnt + 4)); \n    is_blocked = max(is_blocked, bfs(adj, cnt + 3, cnt + 2, cnt + 1, cnt + 4)); \n        if (is_blocked){return false;}\n        return true;\n       \n        \n    }\n};\n",
    "submit_ts": "1722138375",
    "subm_id": "1335789168"
}