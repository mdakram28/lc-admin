{
    "username": "12113078",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> words;  // (index, cost)\n};\n\nclass Solution {\npublic:\n    void insertTrie(TrieNode* root, const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->words.emplace_back(index, cost);\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertTrie(root, words[i], i, costs[i]);\n        }\n\n        auto cmp = [](pair<int, int>& a, pair<int, int>& b) {\n            return a.second > b.second;\n        };\n        priority_queue<pair<int, int>, vector<pair<int, int>>, decltype(cmp)> pq(cmp);\n        pq.push({0, 0});\n\n        while (!pq.empty()) {\n            auto [pos, cost] = pq.top();\n            pq.pop();\n\n            if (cost > dp[pos]) continue;\n\n            TrieNode* node = root;\n            for (int i = pos; i < n; ++i) {\n                if (!node->children.count(target[i])) break;\n                node = node->children[target[i]];\n\n                for (auto& [index, word_cost] : node->words) {\n                    int next_pos = i + 1;\n                    int new_cost = cost + word_cost;\n                    if (new_cost < dp[next_pos]) {\n                        dp[next_pos] = new_cost;\n                        pq.push({next_pos, new_cost});\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323704",
    "subm_id": "1312382001"
}