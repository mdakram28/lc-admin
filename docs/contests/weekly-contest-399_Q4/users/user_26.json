{
    "username": "DylanSmith",
    "submission": "typedef long long ll;\n\n#define pb push_back\n#define sz(x) (int)x.size()\n#define all(x) begin(x),end(x)\n#define lb(x,y) lower_bound(all(x),y)-begin(x)\nclass Solution {\npublic:\n    struct node {\n        ll lr = 0, lR = 0, Lr = 0, LR = 0;\n    };\n    int mod = 1000000007;\n    node merge(node a, node b) {\n        node res;\n        res.lr = max(a.lr + b.lr, max(a.lr + b.Lr, a.lR + b.lr));\n        res.lR = max(a.lr + b.lR, max(a.lr + b.LR, a.lR + b.lR));\n        res.Lr = max(a.Lr + b.lr, max(a.Lr + b.Lr, a.LR + b.lr));\n        res.LR = max(a.Lr + b.lR, max(a.Lr + b.LR, a.LR + b.lR));\n        return res;\n    }\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int M = 1; while (M < sz(nums)) M <<= 1;\n        vector<node> tree(M * 2);\n        for (int i = 0; i < sz(nums); i++) tree[i + M] = {0, 0, 0, nums[i]};\n        for (int i = M - 1; i > 0; i--) tree[i] = merge(tree[i * 2], tree[i * 2 + 1]);\n        int res = 0;\n        for (vector<int> q : queries) {\n            int n = q[0] + M;\n            tree[n] = {0, 0, 0, q[1]};\n            n >>= 1;\n            while (n) {\n                tree[n] = merge(tree[n * 2], tree[n * 2 + 1]);\n                n >>= 1;\n            }\n            res += max(max(tree[1].lr, tree[1].lR), max(tree[1].Lr, tree[1].LR)) % mod;\n            if (res >= mod) res -= mod;\n        }\n        return res;\n    }\n};",
    "submit_ts": 1716691981.0
}