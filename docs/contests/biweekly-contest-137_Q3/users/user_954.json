{
    "username": "zty122",
    "submission": "class Solution {\npublic:\n    static bool my_cmp(vector<long long> & vec_a, vector<long long> & vec_b){\n        return vec_a[0] > vec_b[0];\n    }\n     long long takeAndIterate(vector<vector<long long> >& dp, vector<vector<long long> >& taken, int m, int n, int depth){\n        long long max_score = -9223372036854775808;\n        for(int i = 0 ; i < min((long)(2 * (m + n)), (long)dp.size()) ;i ++){\n            bool take = true;\n            if(depth > 0)\n                for(int j = 0 ; j < taken.size() ; j++){\n                    if((dp[i][1] == taken[j][0]) || (dp[i][2] == taken[j][1])){\n                        take = false;\n                        break;\n                    }\n                }\n            if(take){\n                if(depth == 2){\n                    return dp[i][0];\n                }\n                else{\n                    vector<long long> new_vec = {dp[i][1], dp[i][2]};\n                    taken.push_back(new_vec);\n                    max_score = max(max_score, dp[i][0] + takeAndIterate(dp, taken, m, n, depth + 1));\n                    taken.pop_back();\n                }\n            }\n        }\n        return max_score;\n     }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        long long m = board.size();\n        long long n = board[0].size();\n        vector<vector<long long> > dp(m * n, vector<long long>());\n        vector<vector<long long> > taken;\n        for(long long i = 0 ; i < m ; i ++)\n            for(long long j = 0 ; j < n ; j++){\n                dp[i*n + j].push_back(board[i][j]);\n                dp[i*n + j].push_back(i);\n                dp[i*n + j].push_back(j);\n            }\n        sort(dp.begin(), dp.end(), my_cmp);\n        return takeAndIterate(dp, taken, m, n, 0);\n    }\n};",
    "submit_ts": "1723910209",
    "subm_id": "1359221441"
}