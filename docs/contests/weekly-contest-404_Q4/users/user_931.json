{
    "username": "Hayford08",
    "submission": "class Solution {\npublic:\n    int ans;\n    void dfs(int u, int par, int d, vector<vector<int>> &adj, vector<int> &dist) {\n        dist[u] = max(dist[u], d);\n        for (auto &v : adj[u]) {\n            if (v == par){\n                continue;\n            }\n            dfs(v, u, d + 1, adj, dist);\n        }\n    }\n\n    int solve(vector<vector<int>> &edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (auto &edge : edges) {\n            int u = edge[0], v = edge[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        vector<int> dist(n);\n        dfs(0, -1, 0, adj, dist);\n        auto it = max_element(dist.begin(), dist.end());\n        ans = max(ans, *it);\n        int u = it - dist.begin();\n        dfs(u, -1, 0, adj, dist);\n        it = max_element(dist.begin(), dist.end());\n        ans = max(ans, *it);\n        u = it - dist.begin();\n        dfs(u, -1, 0, adj, dist);\n        return *min_element(dist.begin(), dist.end());\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        ans = 0;\n        return max(ans, 1 + solve(edges1) + solve(edges2));\n    }\n};",
    "submit_ts": 1719719958.0
}