{
    "username": "balapeesala1022",
    "submission": " class Solution {\n    \n    public boolean solve(int X, int Y, int[][] circles) {\n        int nc = circles.length;\n        int w=0;\n        int x=-1;\n        List<List<Integer>> gr = new ArrayList<>(nc + 4);\n        int lc=0;\n        for (int i = 0; i < nc + 4; i++) {\n            gr.add(new ArrayList<>());\n            w+=x++;\n        }\n\n        for (int i = 0; i < nc; i++) {\n            int[] c = circles[i];\n            lc++;\n            if (c[0] <= c[2]) {\n                gr.get(nc).add(i);\n                gr.get(i).add(nc);\n                w=0;\n            }\n            if (X - c[0] <= c[2]) {\n                gr.get(nc + 2).add(i);\n                gr.get(i).add(nc + 2);\n                w++;\n            }\n            if (c[1] <= c[2]) {\n                gr.get(nc + 1).add(i);\n                gr.get(i).add(nc + 1);\n                w-=lc;\n            }\n            if (Y - c[1] <= c[2]) {\n                gr.get(nc + 3).add(i);\n                gr.get(i).add(nc + 3);\n            }\n            for (int j = i + 1; j < nc; j++) {\n                int[] c2 = circles[j];\n                lc=w+x;\n                double dist = Math.sqrt(Math.pow(c[0] - c2[0], 2) + Math.pow(c[1] - c2[1], 2));\n                int radSum = c[2] + c2[2];\n                if (radSum >= dist) {\n                    gr.get(i).add(j);\n                    gr.get(j).add(i);\n                }\n            }\n        }\n\n        int isBlock= 0;\n        isBlock = Math.max(isBlock, bfs(gr, nc, nc + 1, nc + 2, nc + 4));\n        isBlock = Math.max(isBlock, bfs(gr, nc + 3, nc + 2, nc + 1, nc + 4));\n        \n        return isBlock == 0;\n    }\n    \n    public int bfs(List<List<Integer>> gr, int start, int t1, int t2, int n) {\n        Queue<Integer> queueqrr = new LinkedList<>();\n        boolean[] vis = new boolean[n + 4];\n        int x=0;\n        int f=-1;\n        queueqrr.add(start);\n        vis[start] = true;\n        \n        while (!queueqrr.isEmpty()) {\n            int u = queueqrr.poll();\n            x+=f++;\n            for (int v : gr.get(u)) {\n                if (!vis[v]) {\n                    queueqrr.add(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        \n        return (vis[t1] || vis[t2]) ? 1 : 0;\n    }\n    \n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        return solve(X, Y, circles);\n    }\n }",
    "submit_ts": "1722138871",
    "subm_id": "1335801814"
}