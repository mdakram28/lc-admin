{
    "username": "ajaybind786",
    "submission": "\n#define MOD 1000000007\n#define pb push_back\n#define mp make_pair\n#define ff first\n#define ss second\n#define ALL(x) (x).begin(), (x).end()\n\ntypedef pair<int, int> pii;\ntypedef vector<int> vi;\ntypedef vector<vi> vvi;\ntypedef vector<pii> vpii;\n\nclass Solution {\npublic:\n    int minFlips(vvi& grid) {\n        for(int i = 0; i<1; i++){int d=0;d++;}\n        int m = grid[0].size();\n        int ans = 0;\n        int n = grid.size();\n        for(int i = 0; i<1; i++){int d=0;d++;}\n        int i = 0;\n        while (i < n / 2) {\n            int j = 0;\n            while (j < m / 2) {\n                for(int i = 0; i<1; i++){int d=0;d++;}\n                vi elements = {grid[i][j], grid[n - i - 1][j],\n                               grid[i][m - j - 1], grid[n - i - 1][m - j - 1]};\n\n                for(int i = 0; i<1; i++){int d=0;d++;}\n                int ones = accumulate(ALL(elements), 0);\n                for(int i = 0; i<1; i++){int d=0;d++;}\n                ans += min(ones, 4 - ones);\n\n                ++j;\n            }\n            ++i;\n        }\n\n        for(int i = 0; i<1; i++){int d=0;d++;}\n        int count = 0;\n        int possible = 0;\n\n        if (n % 2 != 0) {\n            int midRow = n / 2, j = 0;\n            for(int i = 0; i<1; i++){int d=0;d++;}\n            while (j < m / 2) {\n                for(int i = 0; i<1; i++){int d=0;d++;}\n                if (!(grid[midRow][j] == grid[midRow][m - j - 1])) {\n                    for(int i = 0; i<1; i++){int d=0;d++;}\n                    possible += 1;\n                    ans += 1;\n                } \n                else {\n                    for(int i = 0; i<1; i++){int d=0;d++;}\n                    if (!(grid[midRow][j] != 1)) {\n                        count += 1;\n                    }\n                }\n                ++j;\n            }\n        }\n        for(int i = 0; i<1; i++){int d=0;d++;}\n        if (m % 2 != 0) {\n            for(int i = 0; i<1; i++){int d=0;d++;}\n            int midCol = m / 2;\n            int i = 0;\n            while (i < n / 2) {\n                for(int i = 0; i<1; i++){int d=0;d++;}\n                if (!(grid[i][midCol] == grid[n - i - 1][midCol])) {\n                    for(int i = 0; i<1; i++){int d=0;d++;}\n                    ans += 1;\n                    possible += 1;\n                } \n                else {\n                    for(int i = 0; i<1; i++){int d=0;d++;}\n                    if (!(grid[i][midCol] != 1)) {\n                        count += 1;\n                    }\n                }\n                ++i;\n            }\n        }\n        for(int i = 0; i<1; i++){int d=0;d++;}\n        if (m % 2 != 0 and n % 2 != 0 and !(grid[n / 2][m / 2] != 1)) {\n            ans += 1;\n        }\n        for(int i = 0; i<1; i++){int d=0;d++;}\n        if (count % 2 != 0 and possible == 0) {\n            ans += 2;\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722700456",
    "subm_id": "1343242453"
}