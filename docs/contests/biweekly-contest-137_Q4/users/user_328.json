{
    "username": "Wen-Chieh Tung",
    "submission": "class Solution {\n public:\n  long long maximumValueSum(vector<vector<int>>& board) {    \n    int R = board.size(), C = board[0].size();\n    \n    vector<vector<int>> max_up(R, vector<int>(C));\n    for (int r = 0; r < R; ++r) {\n      for (int c = 0; c < C; ++c) {\n        if (r == 0) {\n          max_up[r][c] = board[r][c];\n        } else {\n          max_up[r][c] = max(max_up[r - 1][c], board[r][c]);\n        }\n      }\n    }\n    \n    vector<vector<int>> max_down(R, vector<int>(C));\n    for (int r = R - 1; r >= 0; --r) {\n      for (int c = 0; c < C; ++c) {\n        if (r == R - 1) {\n          max_down[r][c] = board[r][c];\n        } else {\n          max_down[r][c] = max(max_down[r + 1][c], board[r][c]);\n        }\n      }\n    }\n    \n    long long max_sum = -4E9;\n    // enumerate center location\n    for (int r = 1; r + 1 < R; ++r) {\n      set<pair<int, int>> all_up;\n      set<pair<int, int>> all_down;\n      for (int c = 0; c < C; ++c) {\n        all_up.emplace(max_up[r - 1][c], c);\n      }\n      for (int c = 0; c < C; ++c) {\n        all_down.emplace(max_down[r + 1][c], c);\n      }\n      for (int c = 0; c < C; ++c) {\n        all_up.erase({max_up[r - 1][c], c});\n        all_down.erase({max_down[r + 1][c], c});\n        \n        auto it_up = all_up.end();\n        pair<int, int> up1 = *(--it_up);\n        pair<int, int> up2 = *(--it_up);\n        \n        auto it_down = all_down.end();\n        pair<int, int> down1 = *(--it_down);\n        pair<int, int> down2 = *(--it_down);\n          \n        if (up1.second != down1.second) {\n          max_sum = max(static_cast<long long>(board[r][c]) + up1.first + down1.first, max_sum);\n        } else {\n          max_sum = max(static_cast<long long>(board[r][c]) + up1.first + down2.first, max_sum);\n          max_sum = max(static_cast<long long>(board[r][c]) + up2.first + down1.first, max_sum);\n        }\n        \n        all_up.emplace(max_up[r - 1][c], c);\n        all_down.emplace(max_down[r + 1][c], c);\n      }\n    }\n    return max_sum;\n  }\n};",
    "submit_ts": "1723909400",
    "subm_id": "1359191146"
}