{
    "username": "yh157612",
    "submission": "fn find(parent: &mut [usize], x: usize) -> usize {\n    if parent[x] == x {\n        return x;\n    }\n    parent[x] = find(parent, parent[x]);\n    parent[x]\n}\n\nfn merge(parent: &mut [usize], x: usize, y: usize) {\n    let px = find(parent, x);\n    let py = find(parent, y);\n    parent[py] = px;\n}\n\nimpl Solution {\n    pub fn can_reach_corner(x: i32, y: i32, circles: Vec<Vec<i32>>) -> bool {\n        let n = circles.len();\n        let mut parent: Vec<_> = (0..(n + 2)).collect();\n        for i in 0..n {\n            for j in (i + 1)..n {\n                let x1 = circles[i][0] as i64;\n                let y1 = circles[i][1] as i64;\n                let r1 = circles[i][2] as i64;\n                let x2 = circles[j][0] as i64;\n                let y2 = circles[j][1] as i64;\n                let r2 = circles[j][2] as i64;\n                if ((x1 - x2).abs()).pow(2) + ((y1 - y2).abs()).pow(2) <= (r1 + r2).pow(2) {\n                    merge(&mut parent, i, j);\n                }\n            }\n        }\n\n        for i in 0..n {\n            let x1 = circles[i][0];\n            let y1 = circles[i][1];\n            let r1 = circles[i][2];\n            if x1.abs() <= r1 || (y1 - y).abs() <= r1 {\n                merge(&mut parent, i, n);\n            }\n            if y1.abs() <= r1 || (x1 - x).abs() <= r1 {\n                merge(&mut parent, i, n + 1);\n            }\n        }\n\n        find(&mut parent, n) != find(&mut parent, n + 1)\n    }\n}",
    "submit_ts": "1722136210",
    "subm_id": "1335727149"
}