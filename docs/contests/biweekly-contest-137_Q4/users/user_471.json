{
    "username": "ssayzx",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        using ll = long long;\n        const ll INF = 1e18;\n        const int INF1 = 1e9;\n        int n = board.size(), m = board[0].size();\n        ll ans = -INF;\n\n        using le = vector<int>;\n        vector<int> left(m), right(m);\n        auto cal2 = [&](le &a, le &b, le &c) {\n            left[0] = a[0], right[m - 1] = c[m - 1];\n            for(int i = 1; i < m; i++) {\n                int j = m - 1 - i;\n                left[i] = max(left[i - 1], a[i]);\n                right[j] = max(right[j + 1], c[j]);\n            }\n            for (int i = m - 2; i >= 1; i--) {\n                ans = max(ans, (ll)b[i] + left[i - 1] + right[i + 1]);\n            }\n        };\n\n        auto cal = [&](le &a, le &b, le &c) {\n            cal2(a, b, c); cal2(a, c, b);\n            cal2(b, a, c); cal2(b, c, a);\n            cal2(c, a, b); cal2(c, b, a);\n        };\n\n        vector<int> c(m, -INF1);\n        vector<vector<int>> as(n, vector<int>(m, -INF1));\n        as[0] = board[0];\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                as[i][j] = max(as[i - 1][j], board[i][j]);\n            }\n        }\n        for (int i = n - 2; i >= 1; i--) {\n            for (int k = 0; k < m; k++) c[k] = max(c[k], board[i + 1][k]);\n            cal(as[i - 1], board[i], c);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723909826",
    "subm_id": "556338136"
}