{
    "username": "jayant_dhidhi",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long count = 0;\n        \n        unordered_map<long long, long long> prevResults;\n\n        int index = 0;\n        while (index < n) {\n            unordered_map<long long, long long> currResults;\n            processCurrentElement(nums, k, index, count, currResults);\n            updateResults(prevResults, currResults, k, count, nums[index]);\n            prevResults = currResults;\n            ++index;\n        }\n        \n        return count;\n    }\n\nprivate:\n    void processCurrentElement(const vector<int>& nums, int k, int index, long long& count, unordered_map<long long, long long>& currResults) {\n        if (nums[index] == k) {\n            ++count;\n        }\n        currResults[nums[index]] = 1;\n    }\n\n    void updateResults(const unordered_map<long long, long long>& prevResults, unordered_map<long long, long long>& currResults, int k, long long& count, int currentElement) {\n        for (const auto& [val, freq] : prevResults) {\n            long long newAndResult = computeAndResult(val, currentElement);\n            updateCountIfEqualToK(newAndResult, k, count, freq);\n            updateCurrResults(currResults, newAndResult, freq);\n        }\n    }\n\n    long long computeAndResult(long long val, int currentElement) {\n        return val & currentElement;\n    }\n\n    void updateCountIfEqualToK(long long newAndResult, int k, long long& count, long long freq) {\n        if (newAndResult == k) {\n            count += freq;\n        }\n    }\n\n    void updateCurrResults(unordered_map<long long, long long>& currResults, long long newAndResult, long long freq) {\n        currResults[newAndResult] += freq;\n    }\n};\n",
    "submit_ts": "1720278530",
    "subm_id": "1311713156"
}