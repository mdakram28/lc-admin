{
    "username": "nemokwy",
    "submission": "class NumArray:\n    def __init__(self, nums: List[int]):\n        self.n = len(nums)\n        self.data = nums.copy()\n        self.a = [0] * self.n * 4\n        for i in range(self.n):\n            self.update(i,nums[i])\n\n    def _update(self, o,l,r,i,v):\n        if l == r:\n            self.a[o] = v\n            return\n        m = (l + r) // 2\n        if i <= m:\n            self._update(o*2,l,m,i,v)\n        else:\n            self._update(o*2+1,m+1,r,i,v)\n        self.a[o] = self.a[o*2] + self.a[o*2+1]\n\n    def _query(self, o, l, r, L, R):\n        if L <= l and r <= R:\n            return self.a[o]\n        m = (l + r) // 2\n        res = 0\n        if L <= m:\n            res += self._query(o*2,l,m,L,R)\n        if R > m:\n            res += self._query(o*2+1,m+1,r,L,R)\n        return res\n    \n    def _query2(self, o, l, r, L, R, mx):\n        # print(o,l,r,L,R,mx)\n        if self._query(self, o, l, r, L, R) <= mx:\n            return -1\n        if l == r:\n            if self.data[l-1] > mx:\n                # print(l-1,mx)\n                return l - 1\n            return -1\n        m = (l + r) // 2\n        if L <= m:\n            val = self._query2(o*2,l,m,L,R,mx)\n            if val > -1:\n                return val\n        if R > m:\n            val = self._query2(o*2+1,m+1,r,L,R,mx)\n            if val > -1:\n                return val\n        return -1\n\n    def update(self, index: int, val: int) -> None:\n        self.data[index] = val\n        if index > 0 and index < self.n-1 and self.data[index] > self.data[index-1] and self.data[index] > self.data[index+1]:\n            t = 1\n        else:\n            t = 0\n        self._update(1,1,self.n,index+1,t)\n        index -= 1\n        if index > 0 and index < self.n-1 and self.data[index] > self.data[index-1] and self.data[index] > self.data[index+1]:\n            t = 1\n        else:\n            t = 0\n        self._update(1,1,self.n,index+1,t)\n        index += 2\n        if index > 0 and index < self.n-1 and self.data[index] > self.data[index-1] and self.data[index] > self.data[index+1]:\n            t = 1\n        else:\n            t = 0\n        self._update(1,1,self.n,index+1,t)\n\n    def sumRange(self, left: int, right: int) -> int:\n        return self._query(1,1,self.n, left+1,right+1)\n    \n    def firstIndexLargeThanMx(self, left: int, right: int, mx):\n        return self._query2(1,1,self.n, left+1,right+1, mx)\n                \n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        d = [999999] + nums + [999999]\n        s = NumArray(d)\n        ret = []\n        for u,l,r in queries:\n            if u == 1:\n                ret.append(s.sumRange(l+1+1,r))\n            else:\n                # print(s.data)\n                # print(s.a)\n                s.update(l+1,r)\n        return ret",
    "submit_ts": "1718506719",
    "subm_id": "1289628754"
}