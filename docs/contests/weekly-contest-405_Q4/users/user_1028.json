{
    "username": "sslel",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n \n        int n = target.length() ;\n        int[] dp = new int[n] ;\n        Arrays.fill(dp, Integer.MAX_VALUE) ;\n        \n        \n        HashMap<String, Integer> indexToMin = new HashMap() ;\n        for (int i=0; i<words.length; i++) {\n            if (indexToMin.get(words[i] ) == null ) {\n                indexToMin.put(words[i], i) ;\n            } else {\n                int preIndex = indexToMin.get(words[i]) ; \n                if (costs[i] < costs[preIndex]) {\n                    indexToMin.put(words[i], i ) ;\n                }\n            }\n        }\n        \n        \n        \n        Trie trie = new Trie( words, costs, dp ) ;\n        \n        \n        for (int i=0; i<words.length; i++) {\n            trie.add( words[i], indexToMin.get( words[i] )  ) ;\n        }\n        \n        for (int i=0; i<n; i++) {\n            if ( i == 0 || dp[i-1] != Integer.MAX_VALUE ) {\n                trie.query( target, i) ;\n            }\n        }\n        \n       // System.out.println(Arrays.toString(dp)) ;\n        \n        if ( dp[n-1] == Integer.MAX_VALUE) {\n            return -1 ;\n        }\n        \n        return dp[n-1] ;\n        \n    }\n}\n\nclass Trie {\n    TrieNode root;\n    String[] words;\n    int[] costs ;\n    int[] dp ;\n    Trie( String[] words, int[] costs, int[] dp ) {\n        root = new TrieNode() ;\n        this.words = words;\n        this.costs = costs;\n        this.dp = dp ;\n    }\n    \n    void add(String word, int index ) {\n        TrieNode cur = root ;\n        for (int i=0; i< word.length(); i++) {\n            char ch = word.charAt(i) ;\n            if ( cur.children.get(ch) == null ) {\n                cur.children.put(ch, new TrieNode()) ;\n            }\n            cur = cur.children.get(ch) ;\n        }\n        cur.index  = index;\n    }\n    \n    void query( String target, int from) {\n        \n        TrieNode cur = root ;\n        int end = from ;  \n        while ( end < target.length() && cur.children.get( target.charAt(end) ) != null   ) {\n            cur = cur.children.get( target.charAt(end) ) ;\n            if (cur.index != -1  ) {\n                //System.out.println(from + \",\" + end + \",\" + cur.index) ;\n                dp[end] = Math.min( (  from - 1 >= 0 ?  dp[from -1 ] : 0 )  + costs[cur.index], dp[end]  ) ;\n            }\n            end ++ ;\n        }\n        \n        \n    }\n    \n} \n\nclass TrieNode {\n    HashMap<Character, TrieNode> children ;\n    int index ;\n    TrieNode () {\n        children = new HashMap<Character, TrieNode>() ;\n        index = -1 ;\n    }\n}",
    "submit_ts": "1720322991",
    "subm_id": "1312364540"
}