{
    "username": "\u76d6\u4f26\u7684\u79d8\u5bc6",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int n = board.length;\n        int m = board[0].length;\n        int[][] rmax = new int[n][3];\n        int[][] ridx = new int[n][3];\n        // \u53d6\u51fa\u6bcf\u884c\u524d\u4e09\n        for(int i = 0;i < n;i++){\n            Arrays.fill(rmax[i] , Integer.MIN_VALUE);\n            for(int j = 0;j < m;j++){\n                if(board[i][j] > rmax[i][0]){\n                    rmax[i][2] = rmax[i][1];\n                    rmax[i][1] = rmax[i][0];\n                    rmax[i][0] = board[i][j];\n                    \n                    ridx[i][2] = ridx[i][1];\n                    ridx[i][1] = ridx[i][0];\n                    ridx[i][0] = j;\n                }else if(board[i][j] > rmax[i][1]){\n                    rmax[i][2] = rmax[i][1];\n                    rmax[i][1] = board[i][j];\n\n                    ridx[i][2] = ridx[i][1];\n                    ridx[i][1] = j;\n                }else if(board[i][j] > rmax[i][2]){\n                    rmax[i][2] = board[i][j];\n                    ridx[i][2] = j;\n                }\n            }\n        } \n\n        return dfs(rmax,ridx,0,0,-1,-1);\n\n    }\n\n    Map<String,Long> memo = new HashMap<>();\n    // \u5df2\u7ecf\u653e\u4e86k\u4e2a , \u524d\u4e24\u4e2a\u653e\u5728pre1 \u548c pre 2 \u5217\n    public long dfs(int[][] rmax, int[][] ridx, int k, int i, int pre1 ,int pre2){\n        \n        if(k == 3){ // \u5df2\u7ecf\u653e\u6ee1\u4e09\u4e2a\u4e86\n            return 0L;\n        }\n        if(i == rmax.length){\n            return Long.MIN_VALUE / 2;\n        }\n\n        String key = k + \"_\" + i +\"_\" + pre1 +\"_\" + pre2;\n        // System.out.print(key + \"  \");\n        // System.out.println(memo.containsKey(key));\n        if(memo.containsKey(key)){\n            return memo.get(key);\n        }\n\n        long ans = 0L;\n        // \u5f53\u524d\u5217\u9009\u62e9 or \u4e0d\u9009\n        // \u4e0d\u9009\n        ans = dfs(rmax,ridx,k,i+1,pre1,pre2);\n\n        // \u5224\u65ad\u662f\u5426\u80fd\u9009\u6700\u5927\n        if(k == 0){\n            ans = Math.max(ans,rmax[i][0] + dfs(rmax,ridx,k+1,i+1,ridx[i][0],-1));\n            ans = Math.max(ans,rmax[i][1] + dfs(rmax,ridx,k+1,i+1,ridx[i][1],-1));\n            ans = Math.max(ans,rmax[i][2] + dfs(rmax,ridx,k+1,i+1,ridx[i][2],-1));\n            \n        }else if(k == 1){\n            if(ridx[i][0] != pre1){\n                ans = Math.max(ans,rmax[i][0] + dfs(rmax,ridx,k+1,i+1,pre1,ridx[i][0]));\n            }\n            if(ridx[i][1] != pre1){\n                ans = Math.max(ans,rmax[i][1] + dfs(rmax,ridx,k+1,i+1,pre1,ridx[i][1]));\n            }\n            if(ridx[i][2] != pre1){\n                ans = Math.max(ans,rmax[i][2] + dfs(rmax,ridx,k+1,i+1,pre1,ridx[i][2]));\n            }\n        }else{\n            if(ridx[i][0] != pre1 && ridx[i][0] != pre2){\n                ans = Math.max(ans,rmax[i][0] );\n            }\n            if(ridx[i][1] != pre1 && ridx[i][1] != pre2){\n                ans = Math.max(ans,rmax[i][1] );\n            }\n            if(ridx[i][2] != pre1 && ridx[i][2] != pre2){\n                ans = Math.max(ans,rmax[i][2] );\n            }\n        }\n\n        memo.put(key,ans);\n        return ans;\n        \n\n\n\n\n\n\n\n    }\n\n\n}",
    "submit_ts": "1723907530",
    "subm_id": "556326065"
}