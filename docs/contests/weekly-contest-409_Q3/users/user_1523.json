{
    "username": "intelliCode",
    "submission": "# from sortedcontainers import SortedList\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, N: int, Q: List[List[int]]) -> List[int]:\n        sortedL = [];       sortedR = []\n        sumCurr = 0\n\n        retL = [0] * len(Q)\n        for i,(a,b) in enumerate(Q):\n            indA = bisect_left(sortedL, a)\n            indB = bisect_right(sortedR, b)\n            # print (indA, indB, sortedL, sortedR)\n            if not sortedL:\n                sortedL.append(a)\n                sortedR.append(b)\n                sumCurr += (b-a-1)\n            else:\n                if indA<indB:\n                    for ind in range(indA, indB)[::-1]:\n                        # print (sortedL, sortedR, ind, indA, indB)\n                        aInd,bInd = sortedL.pop(ind),sortedR.pop(ind)\n                        sumCurr += - (bInd-aInd-1)\n                    sortedL.insert(indA, a)\n                    sortedR.insert(indA, b) \n                    sumCurr += (b-a-1)\n                elif b==sortedR[indB-1]:\n                    ddd = 3\n                elif indA==indB==len(sortedL):\n                    if b > sortedR[-1]:\n                        sortedL.insert(indA, a)\n                        sortedR.insert(indA, b) \n                        sumCurr += (b-a-1)\n                elif indA==indB and a < sortedL[indA]:\n                    sortedL.insert(indA, a)\n                    sortedR.insert(indA, b) \n                    sumCurr += (b-a-1)\n            retL[i] = N-1-sumCurr\n        return retL\n\n",
    "submit_ts": "1722743141",
    "subm_id": "1343785302"
}