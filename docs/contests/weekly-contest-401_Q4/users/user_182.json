{
    "username": "karanrahar",
    "submission": "class Solution {\npublic:\n    void findCombinations(vector<int>& arr, int k, int start, vector<int>& currentCombination, vector<vector<int> >& allCombinations, unordered_map<string, bool>& memo, int sum = 0) {\n    if (k == 0) {\n        // If we have found a combination that adds up to k, add it to the result\n        // long summ = 0;\n        // for (int i = 0; i < currentCombination.size(); ++i) {\n        //     if(currentCombination[i] <= summ)\n        //     {\n        //         return;\n        //     }\n        //     summ += currentCombination[i];\n        // }\n        allCombinations.push_back(currentCombination);\n        return;\n    }\n    \n\n    string key = to_string(k) + \"-\" + to_string(start);\n    if (memo.find(key) != memo.end()) {\n        return;\n    }\n\n    for (int i = start; i < arr.size() && arr[i] <= k ; ++i) {\n        if(allCombinations.size() > 0)\n        {\n            return;\n        }\n        if(arr[i] <= sum)\n        {\n            continue;\n        }\n        currentCombination.push_back(arr[i]);\n        findCombinations(arr, k - arr[i], i + 1, currentCombination, allCombinations, memo, sum + arr[i]);\n        currentCombination.pop_back(); // backtrack\n    }\n\n    memo[key] = true;\n}\n\nvector<vector<int> > combinationSum(vector<int>& arr, int k) {\n    vector<vector<int> > allCombinations;\n    vector<int> currentCombination;\n    unordered_map<string, bool> memo; // Use memoization to reduce complexity\n    findCombinations(arr, k, 0, currentCombination, allCombinations, memo);\n    return allCombinations;\n}\n\nint maxTotalReward(vector<int>& rewardValues) {\n        set<int> uniqueSortedValues(rewardValues.begin(), rewardValues.end());\n        vector<int> arr(uniqueSortedValues.begin(), uniqueSortedValues.end());\n        int k = arr[arr.size() - 1];\n        while(true)\n        {\n            k--;\n            vector<vector<int> > allCombinations = combinationSum(arr, k);\n            if(allCombinations.size() > 0)\n            {\n                return arr[arr.size() - 1] + k;\n            }\n        }\n    }\n};",
    "submit_ts": 1717905580.0
}