{
    "username": "ja235711",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        const int n = nums.size();\n        vector<vector<int>> dp(k+1, vector<int>(n, 1));\n        vector<unordered_map<int, int>> eq_max(k + 1); //k, prefix max len until i\n        vector<int> total_max(k + 1);\n        int res = 1;\n        for(int j = 0; j <= k; j++) {\n            eq_max[j][nums[0]] = 1;\n            total_max[j] = 1;\n        }\n        for(int i = 1; i < n; i++) {\n            for(int j = 0; j <= k; j++) {\n                if (j > 0) {\n                    dp[j][i] = max(dp[j][i], total_max[j - 1] + 1);\n                }\n                dp[j][i] = max(dp[j][i], eq_max[j][nums[i]] + 1);\n                //printf(\"p[%d][%d] = %d \", j, i, dp[j][i]);\n                res = max(res, dp[j][i]);\n                \n                \n            }\n            \n            for(int j = 0; j <= k; j++) {\n                eq_max[j][nums[i]] = max(eq_max[j][nums[i]],  dp[j][i]);\n                total_max[j] = max(total_max[j], dp[j][i]);\n            }\n            //printf(\"\\n\");\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717860092.0
}