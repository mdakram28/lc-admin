{
    "username": "Vaibhav8844",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n        public:\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { \n            root = new TrieNode(); \n        }\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new TrieNode();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size();i++) \n            trie.insert(words[i], i, costs[i]);\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) \n                continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n;j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto [ind, cst] : node->wordEnds) {\n                    int l = words[ind].size();\n                    if (i + l <= n) \n                        dp[i + l] = min(dp[i + l], dp[i] + cst);\n                }\n            }\n        }\n        int ans=dp[n];\n        if(ans==INT_MAX)\n            return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720324239",
    "subm_id": "1312394785"
}