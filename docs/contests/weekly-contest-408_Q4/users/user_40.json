{
    "username": "megurine",
    "submission": "#include <bits/stdc++.h>\n\n#ifdef MEGURINE\n#include \"algo/debug.h\"\n#include \"algo/debug_lc.h\"\n#else\n#define debug(...) 42\n#endif\n\nusing namespace std;\n\n#define itr(it) begin(it), end(it)\n\nint __fast_io__ = []() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();\n\nclass DSU {\n    vector<int> fa, sz;\npublic:\n    explicit DSU(int n) : fa(n), sz(n, 1) { iota(begin(fa), end(fa), 0); }\n\n    int find(int i) { return i == fa[i] ? i : (fa[i] = find(fa[i])); }\n\n    void join(int i, int j) {\n        debug(i, j);\n        int a = find(i), b = find(j);\n        if (a == b) return;\n        if (sz[a] < sz[b]) swap(a, b);\n        fa[b] = a, sz[a] += sz[b];\n    }\n\n    int operator[](const int i) { return find(i); }\n\n    int size(int i) { return sz[find(i)]; }\n\n    void reset(int n) {\n        fa.resize(n), sz.resize(n);\n        iota(begin(fa), end(fa), 0);\n        fill(begin(sz), end(sz), 1);\n    }\n};\n\nusing i64 = int64_t;\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>> &circles) {\n        int n = circles.size();\n        DSU dsu(n + 4);\n        for (int i = 1; i <= n; ++i) {\n            auto &p1 = circles[i - 1];\n            int x1 = p1[0], y1 = p1[1], r1 = p1[2];\n            if (x1 <= r1) dsu.join(i, 0);\n            if (y1 <= r1) dsu.join(i, n + 1);\n            if (x1 + r1 >= X) dsu.join(i, n + 2);\n            if (y1 + r1 >= Y) dsu.join(i, n + 3);\n            for (int j = i + 1; j <= n; ++j) {\n                auto &p2 = circles[j - 1];\n                int x2 = p2[0], y2 = p2[1], r2 = p2[2];\n                i64 dx = x2 - x1, dy = y2 - y1, rr = r1 + r2;\n                if (dx * dx + dy * dy <= rr * rr) {\n                    dsu.join(i, j);\n                }\n            }\n        }\n        debug(dsu[0], dsu[n + 1], dsu[n + 2], dsu[n + 3]);\n        return dsu[0] != dsu[n + 1] && dsu[n + 1] != dsu[n + 3] && dsu[0] != dsu[n + 2] && dsu[n + 2] != dsu[n + 3];\n    }\n};\n\n#ifdef MEGURINE\n\nint main() {\n    freopen(\"../input.txt\", \"r\", stdin);\n    freopen(\"../output.txt\", \"w\", stdout);\n    clock_t start = clock();\n    int T;\n    cin >> T;\n    getchar();\n    while (T--) {\n        Solution sol;\n        test<int, int, vector<vector<int>>>(sol, &Solution::canReachCorner);\n    }\n\n    clock_t end = clock();\n    cout << \"\\nRunning Time: \" << (double) (end - start) / CLOCKS_PER_SEC * 1000 << \"ms\" << endl;\n    return 0;\n}\n\n#endif\n",
    "submit_ts": "1722136061",
    "subm_id": "1335722519"
}