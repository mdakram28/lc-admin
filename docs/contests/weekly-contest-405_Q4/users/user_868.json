{
    "username": "aroratanmay1403",
    "submission": "class Solution {\npublic:\n     const int ALPHABET_SIZE = 26;\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool isEndOfWord;\n    int cost;\n\n    TrieNode() : isEndOfWord(false), cost(INT_MAX) {}\n};\n\nclass Trie {\nprivate:\n\npublic:\n        TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            if (current->children.find(c) == current->children.end()) {\n                current->children[c] = new TrieNode();\n            }\n            current = current->children[c];\n        }\n        current->isEndOfWord = true;\n        current->cost = min(current->cost, cost); // Update cost if lower\n    }\n\n    TrieNode* searchPrefix(const string& prefix) {\n        TrieNode* current = root;\n        for (char c : prefix) {\n            if (current->children.find(c) == current->children.end()) {\n                return nullptr;\n            }\n            current = current->children[c];\n        }\n        return current;\n    }\n};\n\nint minCostToFormTarget(const string& target, const vector<string>& words, const vector<int>& costs) {\n    int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    for (int right = 0; right < n; ++right) {\n        if (dp[right] == INT_MAX) continue;\n\n        TrieNode* current = trie.root;\n        for (int i = right; i < n; ++i) {\n            char c = target[i];\n            if (current->children.find(c) == current->children.end()) {\n                break;\n            }\n            current = current->children[c];\n            if (current->isEndOfWord) {\n                dp[i + 1] = min(dp[i + 1], dp[right] + current->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    //     Trie trie;\n    // for (int i = 0; i < words.size(); ++i) {\n    //     trie.insert(words[i], costs[i]);\n    // }\n        return minCostToFormTarget(target,words,costs);\n    }\n};",
    "submit_ts": "1720322401",
    "subm_id": "1312348904"
}