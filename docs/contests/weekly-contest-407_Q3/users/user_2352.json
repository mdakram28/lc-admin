{
    "username": "albertnguyentran",
    "submission": "class Solution:\n    def maxOperations(self, s: str) -> int:\n        '''\n\n        it seems like the best approach is to move 1s from left to right instead of in reverse\n\n        why?\n\n        consider 1001101\n\n        moving from left to right\n\n        we first have\n\n        0011101\n\n        this allows us to move the 3 1's in the middle sequentially\n\n        because for every 1 in the center we hit we create a block\n\n        just use a prefix sum?\n        \n        if there is a zero in between two 1s increasing the count by the number of 1s we've seen\n        '''\n\n        ans = 0\n        number_of_ones_seen = 0\n        n = len(s)\n        i = 0\n\n        # 111101100\n        # 011111100\n\n        while i < n:\n            if i == n-1:\n                return ans + number_of_ones_seen if s[i] == \"0\" else ans\n            \n            if s[i] == \"1\":\n                number_of_ones_seen += 1\n            \n            if s[i+1] == \"1\":\n                i += 1\n                continue\n            \n            i += 1\n\n            while i < n and s[i] == \"0\":\n                i += 1\n            \n            ans += number_of_ones_seen\n            \n            if i >= n:\n                break\n            \n        return ans\n\n\n",
    "submit_ts": "1721531462",
    "subm_id": "1327961546"
}