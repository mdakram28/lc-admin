{
    "username": "brenner1",
    "submission": "class Solution {\npublic:\n    int diam(vector<vector<int>> e) {\n        int n = 0;\n        for (auto cur : e) {\n            int u = cur[0], v = cur[1];\n            n = max(n, max(u, v));\n        }\n        vector<vector<int>> adj(n + 1);\n        for (auto cur : e) {\n            int u = cur[0], v = cur[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        auto dfs = [&](auto &&self, int v, int p) -> pair<int, int> {\n            pair<int, int> ans = {v, 0};\n            for (int ch : adj[v]) if (ch != p) {\n                auto nxt = self(self, ch, v);\n                nxt.second++;\n                if (nxt.second > ans.second) {\n                    ans = nxt;\n                }\n            }\n            return ans;\n        };\n        int v = dfs(dfs, 0, -1).first;\n        return dfs(dfs, v, -1).second;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int x = diam(edges1);\n        int y = diam(edges2);\n        int ans = (x + 1) / 2 + (y + 1) / 2 + 1;\n        ans = max(ans, x);\n        ans = max(ans, y);\n        return ans;\n    }\n};",
    "submit_ts": "1719716910",
    "subm_id": "1304377315"
}