{
    "username": "AlaudaeHong",
    "submission": "class Solution:\n    \n    def minimumArea(self, start_i, start_j, end_i, end_j) -> int:\n        if start_i >= end_i or start_j >= end_j:\n            self.cache[(start_i, start_j, end_i, end_j)] = 10000\n            return 10000\n        elif (start_i, start_j, end_i, end_j) in self.cache:\n            return self.cache[(start_i, start_j, end_i, end_j)]\n        \n        area = [1001, 1001, -1, -1]\n        \n        for i in range(start_i, end_i):\n            for j in range(start_j, end_j):\n                if self.grid[i][j] == 0:\n                    continue\n                    \n                p = (i, j)\n                                \n                area[0] = min(area[0], p[0])\n                area[2] = max(area[2], p[0])\n\n                area[1] = min(area[1], p[1])\n                area[3] = max(area[3], p[1])\n                \n        self.cache[(start_i, start_j, end_i, end_j)] = (area[2]-area[0]+1) * (area[3]-area[1]+1)\n        return self.cache[(start_i, start_j, end_i, end_j)]\n    \n    def vertical_split(self, start_i, start_j, end_i, end_j, num_splited):\n        if num_splited == 2:\n            return self.minimumArea(start_i, start_j, end_i, end_j)\n        \n        min_area = 10000\n        for j in range(start_j+1, end_j):\n            area = self.minimumArea(start_i, start_j, end_i, j) + \\\n                        min(self.horizon_split(start_i, j, end_i, end_j, num_splited+1), \n                            self.vertical_split(start_i, j, end_i, end_j, num_splited+1))\n            min_area = min(min_area, area)\n            \n            area = self.minimumArea(start_i, j, end_i, end_j) + \\\n                        min(self.horizon_split(start_i, start_j, end_i, j, num_splited+1), \n                            self.vertical_split(start_i, start_j, end_i, j, num_splited+1))\n            min_area = min(min_area, area)\n            \n        return min_area\n    \n    def horizon_split(self, start_i, start_j, end_i, end_j, num_splited):\n        if num_splited == 2:\n            return self.minimumArea(start_i, start_j, end_i, end_j)\n        \n        min_area = 10000\n        for i in range(start_i+1, end_i):\n            area = self.minimumArea(start_i, start_j, i, end_j) + \\\n                        min(self.horizon_split(i, start_j, end_i, end_j, num_splited+1), \n                            self.vertical_split(i, start_j, end_i, end_j, num_splited+1))\n            min_area = min(min_area, area)\n            \n            area = self.minimumArea(i, start_j, end_i, end_j) + \\\n                        min(self.horizon_split(start_i, start_j, i, end_j, num_splited+1), \n                            self.vertical_split(start_i, start_j, i, end_j, num_splited+1))\n            min_area = min(min_area, area)\n            \n        return min_area\n            \n    \n    def minimumSum(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        self.num_row = len(grid)\n        self.num_col = len(grid[0])\n        self.cache = dict()\n        \n        min_area = 10000\n        \n        min_area = min(min_area, self.vertical_split(0, 0, self.num_row, self.num_col, 0))\n        min_area = min(min_area, self.horizon_split(0, 0, self.num_row, self.num_col, 0))\n        \n        # for line in self.cache:\n        #     print(line, self.cache[line])\n        \n        return min_area\n        ",
    "submit_ts": 1719112784.0
}