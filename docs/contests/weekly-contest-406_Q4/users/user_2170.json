{
    "username": "BeanChuang",
    "submission": "class Solution {\n    using LL = long long;\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        LL ret = 0;\n        priority_queue<LL> pqH;\n        priority_queue<LL> pqV;\n\n        LL horizonPiece = 1;\n        LL verticalPiece = 1;\n\n        for (auto& cost : horizontalCut) pqH.push(cost);\n        for (auto& cost : verticalCut) pqV.push(cost);\n\n        while (!pqH.empty() or !pqV.empty()) {\n            if (!pqH.empty() and !pqV.empty()) {\n                if (pqH.top() > pqV.top()) {\n                    ret += horizonPiece * pqH.top();\n                    pqH.pop();\n                    verticalPiece += 1;\n                } else {\n                    ret += verticalPiece * pqV.top();\n                    pqV.pop();\n                    horizonPiece += 1;\n                }\n            } else if (!pqH.empty()) {\n                ret += horizonPiece * pqH.top();\n                pqH.pop();\n                verticalPiece += 1;\n            } else {\n                ret += verticalPiece * pqV.top();\n                pqV.pop();\n                horizonPiece += 1;\n            }\n        }\n\n        return ret;\n    }\n};\n//    1   2\n// 2\n// 3\n// 2\n// 3\n// 1\n\n// h=1, v=1\n\n// 3+3\n// h=1, v=4",
    "submit_ts": "1720925773",
    "subm_id": "1320265723"
}