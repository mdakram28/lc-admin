{
    "username": "crimsonred",
    "submission": "class Solution {\npublic:\n    const int INF = 1e9;\n    \n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = 0;\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                vector a{grid[i][j], grid[i][m - 1 - j], grid[n - 1 - i][j], grid[n - 1 - i][m - 1 - j]};\n                int ones = accumulate(a.begin(), a.end(), 0);\n                ans += min(ones, 4 - ones);\n            }\n        }\n        ans += minFlipsCentral(grid, n, m);\n        return ans;\n    }\n    \n    int minFlipsCentral(vector<vector<int>>& grid, int n, int m) {\n        if (n % 2 == 0 && m % 2 == 0) {\n            return 0;\n        }\n        \n        vector<int> a;\n        if (n % 2 == 1) {\n            for (int j = 0; j < m / 2; ++j) {\n                a.push_back(grid[n / 2][j] + grid[n / 2][m - 1 - j]);\n            }\n        }\n        if (m % 2 == 1) {\n            for (int i = 0; i < n / 2; ++i) {\n                a.push_back(grid[i][m / 2] + grid[n - 1 - i][m / 2]);\n            }\n        }\n        \n        vector dp(4, vector((int) a.size() + 1, INF));\n        dp[0][(int) a.size()] = 0;\n        for (int i = (int) a.size() - 1; i >= 0; --i) {\n            for (int rem = 0; rem < 4; ++rem) {\n                if (a[i] == 2) { // 11\n                    dp[rem][i] = min({\n                        dp[rem][i],\n                        dp[(rem - 2 + 4) % 4][i + 1], // 11\n                        2 + dp[rem][i + 1] // 00\n                    });\n                } else if (a[i] == 1) { // 10\n                    dp[rem][i] = min({\n                        dp[rem][i],\n                        1 + dp[(rem - 2 + 4) % 4][i + 1], // 11\n                        1 + dp[rem][i + 1] // 00\n                    });\n                } else { // 00\n                    dp[rem][i] = min({\n                        dp[rem][i],\n                        dp[rem][i + 1], // 00\n                        2 + dp[(rem - 2 + 4) % 4][i + 1] // 11\n                    });\n                }\n            }\n        }\n        \n        return dp[0][0] + (n % 2 == 1 && m % 2 == 1 ? grid[n / 2][m / 2] : 0);\n    }\n};",
    "submit_ts": "1722698180",
    "subm_id": "1343172336"
}