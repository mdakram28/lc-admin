{
    "username": "LarryNY",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        R = len(grid)\n        C = len(grid[0])\n        \n        total = 0\n        for i in range(R // 2):\n            for j in range(C // 2):\n                current = 1\n                \n                if grid[i][j] == grid[i][C - j - 1]:\n                    current += 1\n                if grid[i][j] == grid[R - i - 1][j]:\n                    current += 1\n                if grid[i][j] == grid[R - i - 1][C - j - 1]:\n                    current += 1\n                    \n                total += min(current, 4 - current)\n            \n        ones = 0\n        count = 0\n        if C % 2 == 1:\n            for i in range(R // 2):\n                if grid[i][C // 2] != grid[R - i - 1][C // 2]:\n                    count += 1\n            for i in range(R):\n                if grid[i][C // 2] == 1:\n                    ones += 1\n            if C % 2 == 1 and R % 2 == 1 and grid[R // 2][C // 2] == 1:\n                ones -= 1\n            #print(\"C\", count, ones)\n            #total += max(count, min(ones, 4 - ones))\n\n        if R % 2 == 1:\n            for i in range(C // 2):\n                if grid[R // 2][i] != grid[R // 2][C - i - 1]:\n                    count += 1\n            for i in range(C):\n                if grid[R // 2][i] == 1:\n                    ones += 1\n            if C % 2 == 1 and R % 2 == 1 and grid[R // 2][C // 2] == 1:\n                ones -= 1\n            #print(\"R\", count, ones)\n            #total += max(count, min(ones, 4 - ones))\n        ones %= 4\n        total += max(count, min(ones, 4 - ones))\n            \n        if C % 2 == 1 and R % 2 == 1 and grid[R // 2][C // 2] == 1:\n            total += 1\n                \n        return total",
    "submit_ts": "1722697498",
    "subm_id": "1343148726"
}