{
    "username": "mojiawei69",
    "submission": "const int MAXN = 50005; // \u5047\u8bbe\u6700\u5927\u5143\u7d20\u6570\u91cf\u4e3a10^5 \nclass Solution {\npublic:\nint tree[4 * MAXN]; // \u7ebf\u6bb5\u6811\u6570\u7ec4\uff0c\u5927\u5c0f\u4e3a\u5143\u7d20\u6570\u91cf\u76844\u500d  \nint arr[MAXN + 1]; // \u539f\u59cb\u6570\u7ec4  \n// \u6784\u5efa\u7ebf\u6bb5\u6811  \nvoid build(int v, int tl, int tr, int arr[]) {  \n    if (tl == tr) {  \n        // \u53f6\u8282\u70b9\uff0c\u76f4\u63a5\u4ece\u6570\u7ec4\u4e2d\u8d4b\u503c  \n        tree[v] = arr[tl];  \n    } else {  \n        int tm = (tl + tr) / 2;  \n        // \u9012\u5f52\u6784\u5efa\u5de6\u5b50\u6811\u548c\u53f3\u5b50\u6811  \n        build(2 * v, tl, tm, arr);  \n        build(2 * v + 1, tm + 1, tr, arr);  \n        // \u5f53\u524d\u8282\u70b9\u7684\u503c\u4e3a\u5de6\u53f3\u5b50\u6811\u4e2d\u7684\u6700\u5927\u503c  \n        tree[v] = max(tree[2 * v], tree[2 * v + 1]);  \n    }  \n}  \n  \n// \u5355\u70b9\u4fee\u6539  \nvoid update(int v, int tl, int tr, int idx, int new_val, int arr[]) {  \n    if (tl == tr) {  \n        arr[idx] = new_val;  \n        tree[v] = new_val;  \n    } else {  \n        int tm = (tl + tr) / 2;  \n        if (idx <= tm) {  \n            update(2 * v, tl, tm, idx, new_val, arr);  \n        } else {  \n            update(2 * v + 1, tm + 1, tr, idx, new_val, arr);  \n        }  \n        // \u66f4\u65b0\u5f53\u524d\u8282\u70b9\u7684\u503c  \n        tree[v] = max(tree[2 * v], tree[2 * v + 1]);  \n    }  \n}  \n  \n// \u67e5\u8be2\u524dk\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c  \nint query(int v, int tl, int tr, int k) {  \n    if (k <= tl) {  \n        return INT_MIN; // \u5982\u679ck\u5c0f\u4e8e\u5f53\u524d\u533a\u95f4\u7684\u5de6\u7aef\u70b9\uff0c\u8fd4\u56de\u6700\u5c0f\u503c  \n    } else if (k >= tr) {  \n        return tree[v]; // \u5982\u679ck\u5927\u4e8e\u5f53\u524d\u533a\u95f4\u7684\u53f3\u7aef\u70b9\uff0c\u8fd4\u56de\u5f53\u524d\u533a\u95f4\u7684\u6700\u5927\u503c  \n    } else {  \n        int tm = (tl + tr) / 2;  \n        if (k <= tm) {  \n            return query(2 * v, tl, tm, k); // \u67e5\u8be2\u5de6\u5b50\u6811  \n        } else {  \n            return max(tree[2 * v], query(2 * v + 1, tm + 1, tr, k)); // \u67e5\u8be2\u53f3\u5b50\u6811\uff0c\u5e76\u4e0e\u5de6\u5b50\u6811\u7684\u6700\u5927\u503c\u6bd4\u8f83  \n        }  \n    }  \n}  \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        for (int i = 0; i <= MAXN; i++) {  \n            arr[i] = 0; \n        }  \n        arr[MAXN] = MAXN;\n        build(1, 0, MAXN, arr);\n        set<int> st; vector<bool> ret;\n        st.insert(0); st.insert(MAXN);\n        for(auto q: queries) {\n            if(q[0] == 1) {\n                int x = q[1];\n                auto it = st.lower_bound(x);\n                int l = *prev(it), r = *it;\n                update(1,0,MAXN,r,r == MAXN ? MAXN : r-x,arr);\n                update(1,0,MAXN,x,x-l,arr);\n                st.insert(x);\n            } else {\n                int x = q[1], y = q[2];\n                int max_val = query(1, 0, MAXN, x); // \u67e5\u8be2\u524dk\u4e2a\u4f4d\u7f6e\u7684\u6700\u5927\u503c\uff0c\u6ce8\u610fk-1\u662f\u56e0\u4e3a\u6570\u7ec4\u4e0b\u6807\u4ece0\u5f00\u59cb\n                auto it = st.lower_bound(x);\n                int l = *prev(it);\n                cout << max_val << endl;\n                ret.push_back(max_val >= y || (x - l) >= y);\n            }\n        }\n        \n        return ret;\n    }\n};",
    "submit_ts": 1716652579.0
}