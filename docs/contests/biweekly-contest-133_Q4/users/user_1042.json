{
    "username": "Saniya21",
    "submission": "class Solution {\npublic:\nint MOD = 1e9+7;\nint numberOfPermutations(int n, vector<vector<int>>& requirements) {\n    int max_inversions = 0;\n    for (auto req : requirements) {\n        max_inversions = max(max_inversions, req[1]);\n    }\n\n    unordered_map<int, int> mp;\n    for(auto req: requirements){\n        mp[req[0]+1] = req[1];\n    }\n    \n    vector<vector<int>> dp(n + 1, vector<int>(max_inversions + 1, 0));\n    dp[0][0] = 1;\n\n    for (int length = 1; length <= n; ++length) {\n        for (int inversions = 0; inversions <= max_inversions; ++inversions) {\n            dp[length][inversions] = 0;\n            for (int i = 0; i < length; ++i) {\n                if (inversions >= i) {\n                    dp[length][inversions] = (dp[length][inversions] + dp[length - 1][inversions - i]) % MOD;\n                }\n            }\n        }\n        if(mp.find(length) != mp.end()){\n            int inv = mp[length];\n            for(int i=0; i<=max_inversions; i++){\n                if(i != inv) dp[length][i]=0;\n            }\n        }\n    }\n\n    int sum = 0;\n    for(int i: dp[n]){\n        sum += i%MOD;\n    }\n\n    return sum;\n}\n};",
    "submit_ts": 1719071872.0
}