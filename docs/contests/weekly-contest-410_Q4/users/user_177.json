{
    "username": "ocavue",
    "submission": "from typing import List\nfrom functools import cache\n\n\nMOD = 10**9 + 7\n\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n\n        m = max(nums) + 1\n\n        prev_num1_counter = [0] * m\n        num1_counter = [0] * m\n        presum = [0] * (m + 1)\n\n        for num1 in range(0, nums[0] + 1):\n            num1_counter[num1] = 1\n\n        for i in range(1, n):\n            num = nums[i]\n            pre = nums[i - 1]\n\n            for j, x in enumerate(num1_counter):\n                presum[j + 1] = (presum[j] + x) % MOD\n\n            num1_counter, prev_num1_counter = prev_num1_counter, num1_counter\n            num1_counter = [0] * m\n\n            for num1 in range(0, nums[i] + 1):\n                # num2 = nums[i] - num1\n\n                min_pre1 = max(num1, pre - num + num1)\n\n                num1_counter[num1] = presum[-1] - presum[min_pre1]\n\n        return sum(num1_counter) % MOD\n\n        # @cache\n        # def dfs(i: int, num1: int) -> int:\n        #     num = nums[i]\n        #     num2 = num - num1\n        #     if num1 < 0 or num2 < 0:\n        #         return 0\n\n        #     if i == n - 1:\n        #         return 1\n\n        #     next_num = nums[i + 1]\n        #     result = 0\n        #     for next_num1 in range(0, num1 + 1):\n        #         next_num2 = next_num - next_num1\n        #         if next_num2 >= num2:\n        #             result += dfs(i + 1, next_num1)\n        #         else:\n        #             break\n        #     return result % MOD\n\n        # num1_counter = 0\n        # for num1 in range(0, nums[0] + 1):\n        #     num1_counter += dfs(0, num1)\n        # return num1_counter % MOD\n\n ",
    "submit_ts": "1723345718",
    "subm_id": "1351561859"
}