{
    "username": "warrior_raj_09",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n\n        List<Integer>[] adj1 = createAdjList(edges1, n);\n        List<Integer>[] adj2 = createAdjList(edges2, m);\n\n        int diameter1 = calculateDiameter(adj1);\n        int diameter2 = calculateDiameter(adj2);\n\n        int minD = Math.max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n\n        return Math.max(minD, half1 + half2 + 1);\n    }\n\n    private List<Integer>[] createAdjList(int[][] edges, int size) {\n        List<Integer>[] adjList = new ArrayList[size];\n        for (int i = 0; i < size; i++) {\n            adjList[i] = new ArrayList<>();\n        }\n        for (int[] edge : edges) {\n            adjList[edge[0]].add(edge[1]);\n            adjList[edge[1]].add(edge[0]);\n        }\n        return adjList;\n    }\n\n    private int calculateDiameter(List<Integer>[] adjList) {\n        int[] farthestNodeInfo = bfs(adjList, 0);\n        int[] diameterInfo = bfs(adjList, farthestNodeInfo[0]);\n        return diameterInfo[1];\n    }\n\n    private int[] bfs(List<Integer>[] adjList, int startNode) {\n        int n = adjList.length;\n        int[] distances = new int[n];\n        Arrays.fill(distances, -1);\n\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(startNode);\n        distances[startNode] = 0;\n\n        int farthestNode = startNode;\n        while (!queue.isEmpty()) {\n            int currentNode = queue.poll();\n            for (int neighbor : adjList[currentNode]) {\n                if (distances[neighbor] == -1) {\n                    distances[neighbor] = distances[currentNode] + 1;\n                    queue.add(neighbor);\n                    if (distances[neighbor] > distances[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return new int[]{farthestNode, distances[farthestNode]};\n    }\n}\n\n",
    "submit_ts": "1719717681",
    "subm_id": "1304398030"
}