{
    "username": "dhruvbansal153",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> pq1 = new PriorityQueue<>(Collections.reverseOrder());\n        PriorityQueue<Integer> pq2 = new PriorityQueue<>(Collections.reverseOrder());\n        for (int h : horizontalCut) {\n            pq1.add(h);\n        }\n        for (int h : verticalCut) {\n            pq2.add(h);\n        }\n        long cost = 0;\n        int hp = 1;\n        int vp = 1;\n        while (!pq1.isEmpty() || !pq2.isEmpty()) {\n            if (!pq1.isEmpty() && (pq2.isEmpty() || pq1.peek() >= pq2.peek())) {\n                cost += pq1.poll() * vp;\n                hp++;\n            } else {\n                cost += pq2.poll() * hp;\n                vp++;\n            }\n        }\n        return cost; \n    }\n}",
    "submit_ts": "1720926187",
    "subm_id": "1320278538"
}