{
    "username": "sinhadhruba2001",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        // int ans = 0;\n        map<int, int> mp;\n        int mm = ((m + 1) >> 1);\n        int nn = ((n + 1) >> 1);\n        vector<vector<int>> dp((nn * mm) + 10, vector<int>(4, 1e6));\n        int idx = 1;\n        dp[0][0] = 0;\n\n        for (int i = 0; i < mm; i++) {\n            for (int j = 0; j < nn; j++) {\n                mp.clear();\n                int x, y;\n                x = i; y = j;\n                mp[(n * x) + y] = grid[x][y];\n                x = m - 1 - i; y = j;\n                mp[(n * x) + y] = grid[x][y];\n                x = i; y = n - 1 - j;\n                mp[(n * x) + y] = grid[x][y];\n                x = m - 1 - i; y = n - 1 - j;\n                mp[(n * x) + y] = grid[x][y];\n\n                int tot = mp.size();\n                int ones = 0;\n                // cout << tot << endl;\n                for (auto &it : mp) ones += it.second;\n                \n                for (int p = 0; p < 4; p++) {\n                    dp[idx][(tot + p) % 4] = min(dp[idx][(tot + p) % 4], dp[idx-1][p] + (tot - ones));\n                    dp[idx][p] = min(dp[idx][p], dp[idx-1][p] + ones);\n                }\n\n                idx++;\n            }\n        }\n\n        return dp[idx-1][0];\n    }\n};",
    "submit_ts": "1722698939",
    "subm_id": "1343196569"
}