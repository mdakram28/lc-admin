{
    "username": "lydxlx",
    "submission": "#include <vector>\n#include <set>\n#include <map>\n#include <iostream>\nusing namespace std;\n\nint lsb(int index) {\n    return index & -index;\n}\n\nconst int MAXN = 55555;\n\nint tree[MAXN];\nint sumTree[MAXN];\nint len[MAXN];\n\nint query(int t[], int index) {\n    int sum = 0;\n    while (index > 0) {\n        sum += t[index];\n        index -= lsb(index);\n    }\n    return sum;\n}\n\nvoid update(int t[], int index, int value) {\n    while (index < MAXN) {\n        t[index] += value;\n        index += lsb(index);\n    }\n}\n\nvoid init() {\n    memset(tree, 0, sizeof(tree));\n    memset(sumTree, 0, sizeof(sumTree));\n}\n\nclass Solution {\n    void erase(set<int>& diff, int loc, int n) {\n        int curlen = len[loc];\n        update(tree, curlen + 1, -1);\n        update(sumTree, curlen + 1, -curlen);\n        diff.erase(loc);\n        if (diff.size() == 0) {\n            return;\n        }\n        auto it = diff.lower_bound(loc);\n        auto it2 = it;\n        if (it == diff.begin()) {\n            it2 = diff.end();\n            it2--;\n        }\n        else {\n            it2--;\n        }\n        int low = *it2;\n        int lowlen = len[low];\n        update(tree, lowlen + 1, -1);\n        update(sumTree, lowlen + 1, -lowlen);\n        int newlen = len[low] + curlen;\n        len[low] = newlen;\n        update(tree, newlen + 1, 1);\n        update(sumTree, newlen + 1, newlen);\n    }\n\n    void insert(set<int>& diff, int loc, int n) {\n        if (diff.size() == 0) {\n            diff.insert(loc);\n            len[loc] = n;\n            update(tree, n + 1, 1);\n            update(sumTree, n + 1, n);\n            return;\n        }\n        auto it = diff.lower_bound(loc);\n        auto it2 = it;\n        if (it == diff.begin()) {\n            it2 = diff.end();\n            it2--;\n        }\n        else {\n            it2--;\n        }\n        int low = *it2;\n        int lowlen = len[low];\n        update(tree, lowlen + 1, -1);\n        update(sumTree, lowlen + 1, -lowlen);\n        int newlen = loc - low;\n        if (newlen < 0) {\n            newlen += n;\n        }\n        int loclen = lowlen - newlen;\n        len[low] = newlen;\n        len[loc] = loclen;\n        diff.insert(loc);\n        update(tree, loclen + 1, 1);\n        update(sumTree, loclen + 1, loclen);\n        update(tree, newlen + 1, 1);\n        update(sumTree, newlen + 1, newlen);\n    }\n\n    int check(int size) {\n        int count = query(tree, MAXN - 1);\n        count -= query(tree, size);\n        int totalSum = query(sumTree, MAXN - 1);\n        totalSum -= query(sumTree, size);\n        return totalSum - count * (size - 1);\n    }\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        vector<int> ans;\n        set<int> diff;\n        init();\n        int n = colors.size();\n        for (int i = 0; i < n; i++) {\n            int prev = i == 0 ? n - 1 : i - 1;\n            if (colors[i] == colors[prev]) {\n                insert(diff, i, n);\n            }\n        }\n        for (const auto q : queries) {\n            if (q[0] == 1) {\n                int length = q[1];\n                if (diff.size() == 0) {\n                    ans.push_back(n);\n                }\n                else {\n                    ans.push_back(check(length));\n                }\n            }\n            else {\n                int index = q[1];\n                int color = q[2];\n                if (colors[index] != color) {\n                    int prev = (index + n - 1) % n;\n                    int next = (index + 1) % n;\n                    if (colors[index] == colors[prev]) {\n                        erase(diff, index, n);\n                    }\n                    else {\n                        insert(diff, index, n);\n                    }\n                    if (colors[next] == colors[index]) {\n                        erase(diff, next, n);\n                    }\n                    else {\n                        insert(diff, next, n);\n                    }\n                    colors[index] = color;\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1722742637",
    "subm_id": "1343773621"
}