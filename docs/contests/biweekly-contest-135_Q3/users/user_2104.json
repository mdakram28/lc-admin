{
    "username": "King_hacker",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& numbers, int threshold) {\n        map<int, vector<int>> differenceMap;\n        vector<int> sortedValues;\n \n        // Iterate over the first half of the numbers array\n        for (int index = 0; index < numbers.size() / 2; ++index) {\n            int startValue = numbers[index];\n            int endValue = numbers[numbers.size() - index - 1];\n            int difference = abs(startValue - endValue);\n\n            // Calculate the maximum of possible values\n            int maxValue = max({startValue, endValue, threshold - startValue, threshold - endValue});\n\n            // Store the maximum value for the computed difference\n            differenceMap[difference].push_back(maxValue);\n            sortedValues.push_back(maxValue);\n        }\n\n        // Initialize the answer with a high value\n        int result = numbers.size();  \n        sort(sortedValues.begin(), sortedValues.end());\n\n        // Evaluate each unique difference\n        for (const auto& [diff, valuesList] : differenceMap) {\n            // Find the position where the difference would be inserted in the sorted list\n            int position = lower_bound(sortedValues.begin(), sortedValues.end(), diff) - sortedValues.begin();\n            position = position * 2 + (numbers.size() / 2 - position);\n\n            // Adjust position based on values less than the difference\n            for (const auto& maxVal : valuesList) {\n                if (maxVal < diff) {\n                    position -= 2;\n                } else {\n                    position -= 1;\n                }\n            }\n\n            // Update the minimum result\n            result = min(result, position);\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1721490123",
    "subm_id": "1327473703"
}