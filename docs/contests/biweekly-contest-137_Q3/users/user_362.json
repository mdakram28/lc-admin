{
    "username": "sovngarde42",
    "submission": "\n// using ll = long long;\n// class Solution {\n// public:\n//     ll solve(vector<vector<int>> &g) {\n//         int n = g.size(), m = g[0].size();\n//         vector<vector<vector<ll>>> dp(4, vector<vector<ll>>(n, vector<ll>(m, -3000000000)));\n\n//         for (int R = 1; R < 4; R += 1) {\n//             for (int i = 0; i < n; i += 1) {\n//                 for (int j = 0; j < m; j += 1) {\n//                     // [][]\n//                     // [][]\n//                     if (i == 0 || j == 0) {\n//                         if (R == 1) {\n//                             if (i == 0 && j == 0) {\n//                                 dp[R][i][j] = g[0][0];\n//                             } else if (i == 0) {\n//                                 dp[R][i][j] = max(dp[R][i][j-1], g[i][j]);\n//                             } else if (j == 0) {\n//                                 dp[R][i][j] = max(dp[R][i-1][j], g[i][j]);\n//                             }\n//                         }\n//                     } \n//                 }\n//             }\n//         }\n//         return dp[3][n-1][m-1];\n//     }\n\n//     void rot180 (vector<vector<int>> &g) {\n//         int n = g.size(), m = g[0].size();\n//         for (int i = 0; i < n/2; i += 1) {\n//             for (int j = 0; j < m; j += 1) {\n//                 swap(g[i][j], g[n-i-1][m-j-1]);\n//             }\n//         }\n//         if (n&1) {\n//             for (int j = 0; j < m/2; j += 1) {\n//                 swap(g[n/2][j], g[n/2][m-1-j]);\n//             }\n//         }\n//     }\n\n//     long long maximumValueSum(vector<vector<int>>& board) {\n//         ll n = board.size();\n//         ll m = board[0].size();\n//         vector<vector<int>> board2(m, vector<int>(n));\n//         for (int i = 0; i < n; i += 1) {\n//             for (int j = 0; j < m; j+= 1) {\n//                 board2[j][i] = board[i][j];\n//             }\n//         }\n//         ll ans = -3000000000;\n        \n\n//         ans = max(ans, solve(board));\n//         ans = max(ans, solve(board2));\n\n//         rot180(board);\n//         rot180(board2);\n//         ans = max(ans, solve(board));\n//         ans = max(ans, solve(board2));\n//         return ans;\n//     }\n// };\n\n\nusing ll = long long;\nclass Solution {\npublic:\n\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        ll n = board.size();\n        ll m = board[0].size();\n        vector<pair<int, int>> v;\n        for (int i = 0; i < n; i += 1) {\n            for (int j = 0; j < m; j += 1) {\n                v.push_back({board[i][j], i*m+j});\n            }\n        }\n        sort(begin(v), end(v));\n        reverse(begin(v), end(v));\n        ll mx = max(m, n)*2+3;\n        mx = min(mx, (ll)n*m);\n\n        while (v.size() > mx) {\n            v.pop_back();\n        }\n\n        ll ans = -3000000000;\n        for (int i = 0; i < mx; i += 1) {\n            for (int j = i+1; j < mx; j += 1) {\n                for (int k = j+1; k < mx; k += 1) {\n\n                    int a = v[i].second/m;\n                    int b = v[i].second%m;\n                    int c = v[j].second/m;\n                    int d = v[j].second%m;\n                    int e = v[k].second/m;\n                    int f = v[k].second%m;\n                    if (a != c &&  a != e && c != e && b != d && b != f && d != f) {\n                        ans= max(ans, (ll)v[i].first + (ll)v[j].first + (ll)v[k].first);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723908894",
    "subm_id": "1359171459"
}