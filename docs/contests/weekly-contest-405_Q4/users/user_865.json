{
    "username": "killer-whale",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie trie = new Trie(words, costs);\n        int n = target.length();\n        long[] dp = new long[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[n] = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            for (MatchResult result : trie.matchall(target, i)) {\n                dp[i] = Math.min(dp[i], result.cost + dp[result.index]);\n            }\n        }\n        return dp[0] < Integer.MAX_VALUE ? (int)dp[0] : -1;\n    }\n}\n\nclass Node {\n    Map<Character, Node> children = new HashMap<>();\n    int cnt = 0;\n    int cost = Integer.MAX_VALUE;\n\n    public Node get(char key) {\n        return children.computeIfAbsent(key, k -> new Node());\n    }\n\n    public boolean containsKey(char key) {\n        return children.containsKey(key);\n    }\n}\n\nclass Trie {\n    Node root = new Node();\n\n    public Trie(String[] words, int[] costs) {\n        if (words != null) {\n            for (int i = 0; i < words.length; i++) {\n                add(words[i], costs[i]);\n            }\n        }\n    }\n\n    public void add(String word, int cost) {\n        Node cur = root;\n        for (char letter : word.toCharArray()) {\n            cur = cur.get(letter);\n        }\n        cur.cnt++;\n        cur.cost = Math.min(cur.cost, cost);\n    }\n\n    public boolean contains(String word) {\n        Node cur = root;\n        for (char letter : word.toCharArray()) {\n            if (!cur.containsKey(letter)) {\n                return false;\n            }\n            cur = cur.get(letter);\n        }\n        return cur.cnt > 0;\n    }\n\n    public List<MatchResult> matchall(String word, int idx) {\n        List<MatchResult> results = new ArrayList<>();\n        Node cur = root;\n        for (int i = idx; i < word.length(); i++) {\n            char letter = word.charAt(i);\n            if (!cur.containsKey(letter)) {\n                break;\n            }\n            cur = cur.get(letter);\n            if (cur.cnt > 0) {\n                results.add(new MatchResult(i + 1, cur.cost));\n            }\n        }\n        return results;\n    }\n}\n\nclass MatchResult {\n    int index;\n    int cost;\n\n    public MatchResult(int index, int cost) {\n        this.index = index;\n        this.cost = cost;\n    }\n}",
    "submit_ts": "1720321099",
    "subm_id": "1312313466"
}