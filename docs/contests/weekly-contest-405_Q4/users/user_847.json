{
    "username": "Raja_Sodani",
    "submission": "    // Trie Node Structure\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> indices; // Stores pairs of (index, cost)\n    };\n\n    // Trie Class\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        // Insert word with its index and cost\n        void insert(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->indices.emplace_back(index, cost);\n        }\n\n        // Search for words that are prefixes of target starting from pos\n        void search(const string& target, int pos, vector<int>& dp) {\n            TrieNode* node = root;\n            for (int i = pos; i < target.size(); ++i) {\n                if (!node->children.count(target[i])) {\n                    break;\n                }\n                node = node->children[target[i]];\n                for (auto& [index, cost] : node->indices) {\n                    if (dp[pos] != INT_MAX) {\n                        dp[i + 1] = min(dp[i + 1], dp[pos] + cost);\n                    }\n                }\n            }\n        }\n    };\n\nclass Solution {\npublic:\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // Cost to form an empty string is 0\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n                trie.search(target, i, dp);\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322981",
    "subm_id": "1312364244"
}