{
    "username": "h_thawani",
    "submission": "class Solution {\n    public:\n\n    struct TrieNode{\n        unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> wordend;\n    };\n  \n  class Trie{\n    public:\n\n    TrieNode* root;\n\n    Trie() {\n        root=new TrieNode();\n    }\n\n    void insert( string &word, int ind, int cost){\n\n        TrieNode *node=root;\n\n        for(char c: word){\n            if(!node->child.count(c)){\n                node->child[c]=new TrieNode();\n\n            }\n\n            node=node->child[c];\n        }\n\n        node->wordend.push_back({ind, cost});\n    }\n  };\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        int n=target.size();\n\n        vector<int> dp(n+1, INT_MAX);\n\n        dp[0]=0;\n\n        Trie trie;\n\n        for(int i=0; i<words.size(); i++){\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for(int i=0; i<n; i++){\n            if(dp[i]==INT_MAX) continue;\n\n            TrieNode *node=trie.root;\n\n            for(int j=i; j<n; j++){\n                if(!node->child.count(target[j]))  break;\n\n                node=node->child[target[j]];\n\n                for(auto &it: node->wordend){\n                    int index=it.first;\n                    int tempcost=it.second;\n                    int sz=words[index].size();\n\n                    if(i+sz<=n)  dp[i+sz]=min(dp[i+sz], dp[i]+tempcost);\n                }\n            }\n        }\n\n        if(dp[n]==INT_MAX) return -1;\n\n        return dp[n];\n\n    }\n};",
    "submit_ts": "1720322431",
    "subm_id": "1312349740"
}