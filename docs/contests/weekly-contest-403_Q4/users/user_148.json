{
    "username": "onlyblues",
    "submission": "const int N = 35;\n\nint n, m;\nint g[N][N];\nint f[N][N][N][N][4];\n\nint dfs(int x1, int y1, int x2, int y2, int k) {\n    if (f[x1][y1][x2][y2][k] != -1) return f[x1][y1][x2][y2][k];\n    if (!k) {\n        for (int i = x1; i <= x2; i++) {\n            for (int j = y1; j <= y2; j++) {\n                if (g[i][j]) return f[x1][y1][x2][y2][k] = n * m;\n            }\n        }\n        return f[x1][y1][x2][y2][k] = 0;\n    }\n    if (k == 1) {\n        int a = n, b = m, c = -1, d = -1;\n        for (int i = x1; i <= x2; i++) {\n            for (int j = y1; j <= y2; j++) {\n                if (g[i][j]) {\n                    a = min(a, i);\n                    b = min(b, j);\n                    c = max(c, i);\n                    d = max(d, j);\n                }\n            }\n        }\n        return f[x1][y1][x2][y2][k] = (c - a + 1) * (d - b + 1);\n    }\n    int ret = n * m;\n    for (int i = x1; i < x2; i++) {\n        for (int j = 0; j <= k; j++) {\n            ret = min(ret, dfs(x1, y1, i, y2, j) + dfs(i + 1, y1, x2, y2, k - j));\n        }\n    }\n    for (int i = y1; i < y2; i++) {\n        for (int j = 0; j <= k; j++) {\n            ret = min(ret, dfs(x1, y1, x2, i, j) + dfs(x1, i + 1, x2, y2, k - j));\n        }\n    }\n    return f[x1][y1][x2][y2][k] = ret;\n}\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        n = grid.size(), m = grid[0].size();\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                g[i][j] = grid[i][j];\n                for (int u = i; u < n; u++) {\n                    for (int v = j; v < m; v++) {\n                        for (int k = 0; k <= 3; k++) {\n                            f[i][j][u][v][k] = -1;\n                        }\n                    }\n                }\n            }\n        }\n        return dfs(0, 0, n - 1, m - 1, 3);\n    }\n};",
    "submit_ts": 1719113062.0
}