{
    "username": "vasugondaliya",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def bfs(adj, start, p1, p2, n):\n            queue = deque([start])\n            visited = [0] * (n + 4)\n            visited[start] = 1\n\n            while queue:\n                u = queue.popleft()\n                for v in adj[u]:\n                    if not visited[v]:\n                        queue.append(v)\n                        visited[v] = 1\n            return visited[p1] or visited[p2]\n\n        n = len(circles)\n        adj = [[] for _ in range(n + 4)]\n\n        for i in range(n):\n            x, y, r = circles[i]\n            if x <= r:\n                adj[n].append(i)\n                adj[i].append(n)\n            if X - x <= r:\n                adj[n + 2].append(i)\n                adj[i].append(n + 2)\n            if y <= r:\n                adj[n + 1].append(i)\n                adj[i].append(n + 1)\n            if Y - y <= r:\n                adj[n + 3].append(i)\n                adj[i].append(n + 3)\n            for j in range(i + 1, n):\n                xj, yj, rj = circles[j]\n                distance = math.sqrt((x - xj) ** 2 + (y - yj) ** 2)\n                total_r = r + rj\n                if total_r >= distance:\n                    adj[i].append(j)\n                    adj[j].append(i)\n\n        closed = 0\n        closed = max(closed, bfs(adj, n, n + 1, n + 2, n + 4))\n        closed = max(closed, bfs(adj, n + 3, n + 2, n + 1, n + 4))\n\n        return closed == 0",
    "submit_ts": "1722138725",
    "subm_id": "1335798084"
}