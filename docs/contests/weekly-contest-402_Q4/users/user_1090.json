{
    "username": "plus2047",
    "submission": "class Solution {\n    int prefix(vector<int>& tree, int x) {\n        int res = 0;\n        for(int k = x + 1; k > 0; k -= (k & -k)) res += tree[k];\n        return res;\n    }\n    void add(vector<int>& tree, int x, int value) {\n        for(int k = x + 1; k < tree.size(); k += (k & -k)) tree[k] += value;\n    }\n    int is_peak(vector<int>& nums, int x) {\n        return x > 0 and x + 1 < nums.size() and nums[x] > nums[x - 1] and nums[x] > nums[x + 1];\n    }\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> tree(n + 1);\n        for(int i = 1; i + 1 < n; i++) {\n            if(nums[i] > nums[i - 1] and nums[i] > nums[i + 1]) {\n                add(tree, i, 1);\n            }\n        }\n        vector<int> res;\n        for(auto& v: queries) {\n            if(v[0] == 1) {\n                res.push_back(v[1] >= v[2] ? 0 : prefix(tree, v[2] - 1) - prefix(tree, v[1]));\n            } else {\n                int x = v[1], val = v[2];\n                int left = is_peak(nums, x - 1), curr = is_peak(nums, x), right = is_peak(nums, x + 1);\n                nums[x] = val;\n                if(x > 0) add(tree, x - 1, is_peak(nums, x - 1) - left);\n                add(tree, x, is_peak(nums, x) - curr);\n                if(x < n) add(tree, x + 1, is_peak(nums, x + 1) - right);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718508304.0
}