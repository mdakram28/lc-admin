{
    "username": "jason7708",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size(), l = 0;\n        vector<int> cnt(32, 0);\n\n        auto update = [&] (int x, int d) {\n            for(int i=0; i<32; i++) {\n                if(((x >> i) & 1) == 0) {\n                    cnt[i] += d;\n                }\n            }\n        };\n        auto get = [&] () {\n            int cur = (1 >> 31) - 1;\n            for(int i=0; i<32; i++) {\n                if(cnt[i] > 0) {\n                    cur &= ~(1 << i);\n                }\n            }\n            return cur;\n        };\n        int ans = INT_MAX;\n        for(int r=0; r<n; r++) {\n            update(nums[r], 1);\n            while(l <= r && get() < k) {\n                ans = min(ans, abs(get() - k));\n                update(nums[l], -1);\n                l++;\n            }\n            ans = min(ans, abs(get() - k));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717298409",
    "subm_id": "1274778006"
}