{
    "username": "Maillew",
    "submission": "\ntypedef long long ll;\n\ntypedef long double ld;\ntypedef pair<int,int> pii;\nbool DEBUG = 1;\n#define log2(x) ((x==0)? 0:63 - __builtin_clzll(x))\n#define pb push_back\n#define ms(x, y) memset(x, y, sizeof x)\n#define popcount __builtin_popcount\n#define all(v) v.begin(), v.end()\n\nconst int inf=0x3f3f3f3f; const ll LLINF=0x3f3f3f3f3f3f3f3f;\ninline ll gcd(ll a, ll b) {return b == 0 ? a : gcd(b, a % b);}\ninline ll lcm(ll a, ll b) { return a / gcd(a, b) * b;}\n\n#define deb(...) logger(#__VA_ARGS__, __VA_ARGS__)\ntemplate <typename... Args>\nvoid logger(string vals, Args &&...values){\n    if (DEBUG){\n        cout << vals << \" = \";\n        string delim = \"\";\n        (..., (cout << delim << values, delim = \", \"));\n        cout << endl;\n    }\n}\nconst ll mod = 1e9+7;\nstruct tri{\n    ll x,y,z;\n    bool operator<(const tri &one)const{\n        if(x==one.x) return y<one.y;\n        return x<one.x;\n    }//pqs are backwards\n};\nll fpow(ll a, ll b){\n    if (b == 0) return 1;\n    ll res = fpow(a, b / 2)%mod;\n    if (b % 2) return ((res * res) * a) %mod;\n    else return (res * res) %mod;\n}\nstruct PolyHash{\n    /*\n    WARNING: make sure the values in the array or string are in the range [0,5e8]\n    */\n    vector<long long>powers;\n    vector<long long>hashes;\n    int seed = 131;\n    long long mod = (long long)1e9+7;\n    vector<long long>arr;\n    int _n;\n    int _cost;\n    int length(){\n        return _n;\n    }\n    int cost(){\n        return _cost;\n    }\n    void init(long long n){\n        _n = n;\n        powers.resize(n+5); powers[0] = 1;\n        hashes.resize(n+5);\n        for(long long i = 1; i<=n; i++){\n            powers[i] = powers[i-1]*seed; powers[i]%=mod;\n        }\n        for(long long i = 1; i<=n; i++){\n            hashes[i] = hashes[i-1]*seed+arr[i]; hashes[i]%=mod;\n        }\n    }\n    void init(long long n, string s, int cost){//string is 0 indexed\n        arr.resize(n+5);\n        _cost = cost;\n        for(long long i = 1; i<=n; i++){\n            arr[i] = s[i-1];\n        }\n        init(n);\n    }\n    pair<long long,long long> subhash(long long l, long long r){//inclusive\n        long long hsh = hashes[r]-hashes[l-1]*powers[r-l+1]%mod; hsh+=mod; hsh%=mod;\n        return {hsh,hsh};\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& WORDS, vector<int>& COSTS) {\n        PolyHash hsh;\n        hsh.init(target.size(),target,0);\n        int m = WORDS.size();\n        int n = target.length();\n       \n        map<pair<ll,ll>,pii> mp[n+1];//for each len, and then the hash, what is best {cost,len} that works for\n        for(int i =0; i< WORDS.size(); i++){\n            PolyHash cur;\n            cur.init(WORDS[i].length(), WORDS[i], COSTS[i]);\n            if(mp[WORDS[i].length()].find(cur.subhash(1,WORDS[i].length())) == mp[WORDS[i].length()].end()){\n                mp[WORDS[i].length()][cur.subhash(1,WORDS[i].length())] = {COSTS[i],WORDS[i].length()};\n            }\n            else{\n                if(COSTS[i]<mp[WORDS[i].length()][cur.subhash(1,WORDS[i].length())].first){\n                    mp[WORDS[i].length()][cur.subhash(1,WORDS[i].length())] = {COSTS[i],WORDS[i].length()};\n                }\n            }\n        }\n        vector<pii> pos[n+1];//for each position, sqrtn candidates of words that can work\n        for(int i =1; i<=n; i++){//len\n            if(mp[i].size() ==0) continue;\n            for(int j=i; j<=n; j++){\n                if(mp[i].find(hsh.subhash(j-i+1,j))!=mp[i].end()){\n                    pos[j].pb(mp[i][hsh.subhash(j-i+1,j)]);\n                }\n            }\n        }\n        int dp[n+1];\n        ms(dp,0x3f);\n        dp[0] = 0;\n        for(int j =1; j<=n; j++){\n            for(pii cur: pos[j]){//should only have sqrtn candidates here\n                dp[j] = min(dp[j], dp[j-cur.second] + cur.first);\n            }\n        }\n        \n        if(dp[n]!=0x3f3f3f3f){\n            return dp[n];\n        }\n        else return -1;\n\n    }\n};",
    "submit_ts": "1720324203",
    "subm_id": "1312393972"
}