{
    "username": "LessThanExpert",
    "submission": "#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define ll long long\n#define ull unsigned ll\n#define float double\n#define ff first\n#define ss second\n#define all(up) up.begin(), up.end()\n#define sz(x) ((ll)x.size())\n#define debug(x) cerr << #x << \" \" << x << \"\\n\";\n#define printans(okk) cout << (okk ? \"Yes\\n\" : \"No\\n\");\n#define uniq(up) up.erase(unique(all(up)), up.end());\n#define iofast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\ntemplate <class T>\nusing oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nll getRandomNumber(ll G, ll r) { return uniform_int_distribution<ll>(G, r)(rng); }\nconst ll N = 2e5 + 1, mod = 1e4 + 7, LOG = 18, INF = 1e18, inf = 1E9;\n\nclass Solution\n{\n    vector<vector<int>> pf,sparseTable;\n    int n;\n    void buildSparseTable(int n,vector<int>&arr) {\n    for (int i = 0; i < n; ++i) {\n        sparseTable[i][0] = arr[i];\n    }\n\n    for (int j = 1; (1 << j) <= n; ++j) {\n        for (int i = 0; (i + (1 << j) - 1) < n; ++i) {\n            sparseTable[i][j] = (sparseTable[i][j-1] & sparseTable[i + (1 << (j - 1))][j - 1]);\n        }\n    }\n}\n\nint AND(int L, int R) {\n    int j = log2(R - L + 1);\n    return (sparseTable[L][j] & sparseTable[R - (1 << j) + 1][j]);\n}\n    int Greater(int ind, vector<int> &ar, int k)\n    {\n        int lo = ind, hi = n - 1, p =  ind - 1;\n        while (lo <= hi)\n        {\n            int mid = (lo + hi) / 2;\n            if (AND(ind, mid) > k)\n            {\n                p = mid;\n                lo = mid + 1;\n            }\n            else\n                hi = mid - 1;\n        }\n        return p;\n    }\n    int GreaterEqual(int ind, vector<int> &ar, int k)\n    {\n        int lo = ind, hi = n - 1, p =  - 1;\n        while (lo <= hi)\n        {\n            int mid = (lo + hi) / 2;\n            if (AND(ind, mid) >= k)\n            {\n                p = mid;\n                lo = mid + 1;\n            }\n            else\n                hi = mid - 1;\n        }\n        return p;\n    }\n\npublic:\n    long long countSubarrays(vector<int> &ar, int k)\n    {\n        n = ar.size();\n        pf = vector<vector<int>>(32, vector<int>(n + 2));\n        sparseTable=vector<vector<int>>(n+2, vector<int>(32));\n        buildSparseTable(n,ar);\n        for(int i=0;i<32;i++){\n            for(int j=0;j<n;j++){\n                if(ar[j]&(1LL<<i)) pf[i][j]=1;\n                if(j) pf[i][j]+=pf[i][j-1];\n            }\n        }\n        long long ans = 0;\n        for (int i = 0; i < n; i++)\n        {\n            int G=Greater(i, ar, k),GE=GreaterEqual(i, ar, k);\n            if(GE>G)\n            ans += GE - G;\n        }\n        return ans;\n    }\n};\n\nauto init = []()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();",
    "submit_ts": "1720277843",
    "subm_id": "1311682641"
}