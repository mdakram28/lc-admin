{
    "username": "Rhacoal",
    "submission": "using ll = long long;\n\nstruct segtree {\n    struct node {\n        int l{}, r{};\n        int maxv{};\n    };\n    vector<node> nodes{node{}};\n\n    int get(int &i) {\n        int v = i;\n        if (i == 0) {\n            v = nodes.size();\n            i = v;\n        }\n        nodes.emplace_back();\n        return v;\n    }\n\n    static constexpr int s0 = 0, t0 = 100000;\n    int insert(int i, int v, int p = 0, int s = s0, int t = t0) {\n        if (t - s == 1) {\n            // printf(\"set(%d, %d, %d, %d, %d) = %d\\n\", i, v, p, s, t, v);\n            nodes[p].maxv = v;\n            return v;\n        }\n        int m = (t - s) / 2 + s;\n        int maxv{};\n        if (i < m) {\n            if (nodes[p].r) {\n                maxv = nodes[nodes[p].r].maxv;\n            }\n            maxv = max(maxv, insert(i, v, get(nodes[p].l), s, m));\n        } else {\n            if (nodes[p].l) {\n                maxv = nodes[nodes[p].l].maxv;\n            }\n            maxv = max(maxv, insert(i, v, get(nodes[p].r), m, t));\n        }\n        // printf(\"set(%d, %d, %d, %d, %d) = %d\\n\", i, v, p, s, t, maxv);\n        nodes[p].maxv = maxv;\n        return maxv;\n    }\n\n    // < x\n    int query(int x, int p = 0, int s = s0, int t = t0) {\n        // printf(\"query(%d, %d, %d, %d) (%d)\\n\", x, p, s, t, nodes[p].maxv);\n        if (x >= t) {\n            // printf(\"[%d](%d, %d) = %d\\n\", p, s, t, nodes[p].maxv);\n            return nodes[p].maxv;\n        }\n        int m = (t - s) / 2 + s;\n        int maxv = 0;\n        if (nodes[p].l) {\n            maxv = query(x, nodes[p].l, s, m);\n        }\n        if (x >= m && nodes[p].r) {\n            maxv = max(maxv, query(x, nodes[p].r, m, t));\n        }\n        return maxv;\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        map<int, int> sp;\n        segtree st;\n        sp[0] = INT_MAX;\n        vector<bool> ret{};\n        st.insert(0, INT_MAX);\n        for (auto &q : queries) {\n            if (q[0] == 1) {\n                int x = q[1];\n                auto it = prev(sp.lower_bound(x));\n                int l = x - it->first;\n                int s = it->second - (x - it->first);\n                it->second = l;\n                sp.emplace(x, s);\n                st.insert(it->first, l);\n                st.insert(x, s);\n                // printf(\"+set(%d, %d)\\n\", it->first, l);\n                // printf(\" set(%d, %d)\\n\", x, s);\n            } else {\n                int x = q[1];\n                int sz = q[2];\n                if (x < sz) {\n                    ret.push_back(false);\n                } else {\n                    int l = x - sz;\n                    int lmax = st.query(l + 1);\n                    // printf(\"-query(%d) = %d\\n\", l + 1, lmax);\n                    ret.push_back(lmax >= sz);\n                }\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1716649880",
    "subm_id": "1267600254"
}