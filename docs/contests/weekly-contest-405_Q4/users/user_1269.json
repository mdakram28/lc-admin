{
    "username": "Bhargav_chirmadasu_30053",
    "submission": "from typing import List, Dict\n\nclass TrieNode:\n    def __init__(self):\n        self.children: Dict[str, TrieNode] = {}\n        self.cost = float('inf')\n\nclass Solution:\n    def buildTrie(self, words: List[str], costs: List[int]) -> TrieNode:\n        root = TrieNode()\n        for word, cost in zip(words, costs):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.cost = min(node.cost, cost)\n        return root\n    \n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        root = self.buildTrie(words, costs)\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n\n            node = root\n            for j in range(i, n):\n                if target[j] in node.children:\n                    node = node.children[target[j]]\n                    if node.cost != float('inf'):\n                        dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n                else:\n                    break\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720323810",
    "subm_id": "1312384592"
}