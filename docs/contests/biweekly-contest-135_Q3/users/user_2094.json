{
    "username": "stupid_panda",
    "submission": "use std::collections::HashMap;\nimpl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        let n = nums.len();\n        let mut bound_diffs: Vec<i32> = vec![];\n        let mut abs_diff = HashMap::<i32, usize>::new();\n        for i in 0..(n / 2) {\n            let small = nums[i].min(nums[n - i - 1]);\n            let large = nums[i].max(nums[n - i - 1]);\n            bound_diffs.push(large.max(k - small));\n            *abs_diff\n                .entry((nums[i] - nums[n - i - 1]).abs())\n                .or_insert(0) += 1;\n        }\n\n        bound_diffs.sort_unstable();\n        let mut ans = n / 2;\n        for (&diff, &count) in &abs_diff {\n            let out_count = bound_diffs.partition_point(|&v| v < diff);\n            ans = ans.min(n / 2 - count + out_count);\n        }\n        ans as _\n    }\n}",
    "submit_ts": "1721489816",
    "subm_id": "1327464673"
}