{
    "username": "shabbir0",
    "submission": "// class Solution {\n// public:\n//     int minChanges(vector<int>& nums, int k) {\n//         int ans=INT_MAX,n=nums.size();\n//         for(int i=0;i<n/2;i++){\n//             int an=abs(nums[i]-nums[n-i-1]),x=0;\n//             for(int j=0;j<n/2;j++){\n//                 int af=abs(nums[j]-nums[n-j-1]);\n//                 int m1=max(nums[j],nums[n-j-1]);\n//                 int m2=min(nums[j],nums[n-j-1]);\n//                 if(af!=an){\n//                     if(af<an){\n//                         if((k-m1)>=(an-af) || m2(an-af) ){\n//                             x+=1;\n//                         }\n//                         else{\n//                             x+=2;\n//                         }\n//                     }\n//                     else{\n//                         x+=1;\n//                     }\n//                 }\n//             }\n//             ans=min(ans,x);\n//         }\n//         return ans;\n//     }\n// };\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int totalElements = nums.size();\n        int numPairs = totalElements / 2;\n        unordered_map<int, vector<int>> differenceToMaxValuesMap;\n        vector<int> allMaxValues;\n\n        for (int i = 0; i < numPairs; ++i) {\n            int first = nums[i];\n            int second = nums[totalElements - i - 1];\n            int currentDifference = abs(first - second);\n            int maxValue = max({first, second, k - first, k - second});\n            \n            differenceToMaxValuesMap[currentDifference].push_back(maxValue);\n            allMaxValues.push_back(maxValue);\n        }\n\n        int minimumChangesRequired = totalElements;\n\n        sort(allMaxValues.begin(), allMaxValues.end());\n\n        for (const auto& entry : differenceToMaxValuesMap) {\n            int difference = entry.first;\n            const vector<int>& maxValuesForDifference = entry.second;\n\n            auto lowerBoundIt = lower_bound(allMaxValues.begin(), allMaxValues.end(), difference);\n            int indexInSortedList = lowerBoundIt - allMaxValues.begin();\n            int requiredChanges = indexInSortedList * 2 + (numPairs - indexInSortedList);\n\n            for (int maxValue : maxValuesForDifference) {\n                if (maxValue < difference) {\n                    requiredChanges -= 2;\n                } else {\n                    requiredChanges -= 1;\n                }\n            }\n\n            minimumChangesRequired = min(minimumChangesRequired, requiredChanges);\n        }\n\n        return minimumChangesRequired;\n    \n    }\n};\n",
    "submit_ts": "1721489758",
    "subm_id": "1327462841"
}