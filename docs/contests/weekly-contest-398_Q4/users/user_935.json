{
    "username": "icherniukh",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        a = defaultdict(int) # (i, jump)\n        a[(1, 0)] = 1\n        added = set()\n        added.add((1, 0))\n        q = []\n        heappush(q, (1, 0))\n        # q = [(1, 0)]\n        while q:\n            # i, j = q.pop()\n            i, j = heappop(q)\n            val = a[(i, j)]\n            \n            if i > k + 1:\n                continue\n            \n            x, y = i - 1, j\n            \n            x += (2 ** j)\n            y += 1\n            a[(x, y)] += val\n            \n            if (x, y) not in added:\n                # q.append((x, y))\n                heappush(q, (x, y))\n                # q.append((x, y))\n                added.add((x, y))\n            \n            x, y = i, j\n            x += (2 ** j)\n            y += 1\n            a[(x, y)] += val\n            \n            if (x, y) not in added:\n                # q.append((x, y))\n                heappush(q, (x, y))\n                added.add((x, y))\n                \n        ans = 0\n        for j in range(35):\n            ans += a[(k, j)]\n            ans += a[(k + 1, j)]\n        return ans",
    "submit_ts": 1716089598.0
}