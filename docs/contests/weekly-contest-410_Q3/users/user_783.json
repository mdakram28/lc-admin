{
    "username": "Deepanshu_30",
    "submission": "class Solution {\n    // Recursive method\n    private long ferrari(int honda, int toyota, int tesla, int[] bmw, long[][][] ford) {\n        // Base case: If index is out of bounds, return 1\n        if (honda >= bmw.length) {\n            return 1;\n        }\n\n        long mercedes = 0;\n        long mod = 1000000007; // 1e9 + 7 in Java\n\n        // Memoization check\n        if (ford[honda][toyota][tesla] != -1) {\n            return ford[honda][toyota][tesla];\n        }\n\n        // Loop through possible values\n        for (int audi = toyota; audi <= bmw[honda]; audi++) {\n            for (int nissan = tesla; nissan >= 0; nissan--) {\n                if (audi + nissan == bmw[honda]) {\n                    mercedes += ferrari(honda + 1, audi, nissan, bmw, ford);\n                    mercedes %= mod;\n                }\n            }\n        }\n\n        // Store result in dp array and return\n        ford[honda][toyota][tesla] = mercedes;\n        return mercedes;\n    }\n\n    // Initialization method\n    private long lamborghini(int[] bmw) {\n        int chevrolet = bmw.length;\n        long[][][] ford = new long[chevrolet][51][51];\n\n        // Initialize dp array with -1\n        for (int i = 0; i < chevrolet; i++) {\n            for (int j = 0; j < 51; j++) {\n                for (int k = 0; k < 51; k++) {\n                    ford[i][j][k] = -1;\n                }\n            }\n        }\n\n        return ferrari(0, 0, bmw[0], bmw, ford);\n    }\n\n    // Main method to calculate the result\n    public int countOfPairs(int[] bmw) {\n        return (int) lamborghini(bmw);\n    }\n}\n",
    "submit_ts": "1723344848",
    "subm_id": "1351543328"
}