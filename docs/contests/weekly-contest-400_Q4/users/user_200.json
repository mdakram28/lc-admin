{
    "username": "didwhddks",
    "submission": "template <typename Info>\nstruct SegTree {\n    int n;\n    vector<Info> info;\n \n    SegTree(int n = 0) {\n        init(n);\n    }\n \n    void init(int n) {\n        this->n = n;\n        info.assign(4 * n, Info());\n    }\n \n    void pull(int i) {\n        info[i] = info[2 * i] + info[2 * i + 1];\n    }\n \n    void set(int idx, Info _info, int i, int L, int R) {\n        if (L == R) {\n            info[i] = _info;\n            return;\n        }\n        int mid = (L + R) / 2;\n        if (idx <= mid) {\n            set(idx, _info, 2 * i, L, mid);\n        } else {\n            set(idx, _info, 2 * i + 1, mid + 1, R);\n        }\n        pull(i);\n    }\n\n    void set(int idx, Info _info) {\n        set(idx, _info, 1, 0, n - 1);\n    }\n \n    Info rangeQuery(int qL, int qR, int i, int L, int R) {\n        if (R < qL || qR < L) {\n            return Info();\n        }\n        if (qL <= L && R <= qR) {\n            return info[i];\n        }\n        int mid = (L + R) / 2;\n        Info a = rangeQuery(qL, qR, 2 * i, L, mid);\n        Info b = rangeQuery(qL, qR, 2 * i + 1, mid + 1, R);\n        return a + b;\n    }\n\n    Info rangeQuery(int qL, int qR) {\n        return rangeQuery(qL, qR, 1, 0, n - 1);\n    }\n};\n\nstruct Info {\n    // To-do\n    int _and;\n    Info(int x = -1) {\n        _and = x;\n    }\n    Info operator+(const Info& b) {\n        Info c;\n        c._and = _and & b._and;\n        return c;\n    }\n};\n\nconstexpr int inf = 4E8;\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        const int n = nums.size();\n        SegTree<Info> seg(n);\n        for (int i = 0; i < n; ++i) {\n            seg.set(i, Info(nums[i]));\n        }\n\n        int ans = inf;\n        for (int i = 0; i < n; ++i) {\n            int L = i, R = n - 1;\n            while (L < R) {\n                int mid = (L + R + 1) / 2;\n                if (seg.rangeQuery(i, mid)._and >= k) {\n                    L = mid;\n                } else {\n                    R = mid - 1;\n                }\n            }\n            // cout << seg.rangeQuery(i, L)._and << \"\\n\";\n            ans = min(ans, abs(seg.rangeQuery(i, L)._and - k));\n            ++L;\n            if (L < n) {\n                ans = min(ans, abs(k - seg.rangeQuery(i, L)._and));\n            }            \n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297481",
    "subm_id": "1274744083"
}