{
    "username": "LemonDrop47",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> child;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string &word, int cost) {\n        TrieNode* node=root;\n        for (char ch:word) {\n            if (node->child.find(ch)==node->child.end()) {\n                node->child[ch] = new TrieNode();\n            }\n            node = node->child[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n    \nprivate:\n    TrieNode* root;\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i=0;i<words.size();i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        for (int i=0;i<n;i++) {\n            if (dp[i]==INT_MAX) \n                continue;\n            TrieNode* node=trie.getRoot();\n            for (int j=i;j<n;j++) {\n                if (node->child.find(target[j])==node->child.end()) \n                    break;\n                node = node->child[target[j]];\n                if (node->cost!=INT_MAX) {\n                    dp[j+1] = min(dp[j+1], dp[i]+node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321275",
    "subm_id": "1312318409"
}