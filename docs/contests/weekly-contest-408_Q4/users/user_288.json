{
    "username": "VivekShah2004",
    "submission": "import java.util.*;\n\nclass Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        List<Pair<Pair<Integer, Integer>, Integer>> circleList = new ArrayList<>();\n        List<List<Integer>> graph = new ArrayList<>();\n        int numCircles = circles.length;\n\n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            circleList.add(new Pair<>(new Pair<>(circles[i][0], circles[i][1]), circles[i][2]));\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            if (circleList.get(i).getKey().getKey() <= circleList.get(i).getValue()) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - circleList.get(i).getKey().getKey() <= circleList.get(i).getValue()) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (circleList.get(i).getKey().getValue() <= circleList.get(i).getValue()) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - circleList.get(i).getKey().getValue() <= circleList.get(i).getValue()) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = Math.sqrt(Math.pow(circleList.get(i).getKey().getKey() - circleList.get(j).getKey().getKey(), 2) +\n                        Math.pow(circleList.get(i).getKey().getValue() - circleList.get(j).getKey().getValue(), 2));\n                int radiusSum = circleList.get(i).getValue() + circleList.get(j).getValue();\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n\n        return isBlocked == 0;\n    }\n\n    private int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        queue.add(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.add(v);\n                    visited[v] = true;\n                }\n            }\n        }\n\n        return (visited[target1] || visited[target2]) ? 1 : 0;\n    }\n\n    private static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n    }\n}\n",
    "submit_ts": "1722136780",
    "subm_id": "1335744795"
}