{
    "username": "kalki02",
    "submission": "class Solution {\npublic:\n    #define ll int\n    #define all(x) x.begin(), x.end()\n    \n    void dfs(vector<ll>* adj, ll src, ll par, vector<ll>& lev, ll cnt) {\n        lev[src] = cnt; cnt++;\n        for (auto x : adj[src]) {\n            if (x != par) {\n                dfs(adj, x, src, lev, cnt);\n            }\n        }\n    }\n\n     vector<int> HHM(int n, vector<vector<int>>& e) {\n        \n        vector<ll>adj[n];\n         \n        for (auto x : e) {\n            int u = x[0], v = x[1];\n            adj[u].push_back(v); adj[v].push_back(u);\n        }\n         \n        vector<ll>lev(n, 0);\n         \n        ll leaf = 0, mx = 0; \n        dfs(adj, 0, -1, lev, 0);\n         \n        for (int i = 0; i < n; i++) {\n            if (mx < lev[i]) {\n                mx = lev[i]; leaf = i;\n            }\n        }\n         \n        lev.clear(); \n        lev.resize(n, 0);\n         \n        dfs(adj, leaf, -1, lev, 0);\n         \n        mx = *max_element(all(lev));\n        vector<int> lev1(n, 0);\n        \n        for(int i = 0; i < n; i++){\n            if(mx == lev[i]) {\n                dfs(adj, i, -1, lev1, 0); break;\n            }\n        }\n         \n        for(int i = 0; i < n; i++){\n            lev[i] = max(lev1[i], lev[i]);\n        }\n         \n        return lev;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1, m = e2.size() + 1;\n        \n        vector<int> a = HHM(n, e1);\n        vector<int> b = HHM(m, e2);\n        \n        // for(auto x : a) cout << x << \" \"; cout << endl;\n        // for(auto x : b) cout << x << \" \"; cout << endl;\n        // cout << endl;\n        \n        int ans = 0;\n        \n        for(auto x : a) ans = max(ans, x);\n        for(auto x : b) ans = max(ans, x);\n        \n        sort(all(a)); \n        sort(all(b));\n        \n        return max(ans, a[0] + b[0] + 1);\n        \n    }\n};",
    "submit_ts": 1719719741.0
}