{
    "username": "limitations",
    "submission": "class Solution {\n    static class Info{\n        int up;\n        int down;\n        int left;\n        int right;\n\n        public Info(int up, int down, int left, int right) {\n            this.up = up;\n            this.down = down;\n            this.left = left;\n            this.right = right;\n        }\n    }\n    int[][] grid;\n    int m;\n    int n;\n    public int minimumSum(int[][] grid) {\n        m = grid.length;\n        n = grid[0].length;\n        this.grid = grid;\n        int left = n-1;\n        int right = 0;\n        int up = m-1;\n        int down = 0;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (grid[i][j] == 1){\n                    up = Math.min(up,i);\n                    down = Math.max(down,i);\n                    left = Math.min(left,j);\n                    right = Math.max(right,j);\n                }\n            }\n        }\n        List<Info[]> infos = firstCut(new Info(up, down, left, right));\n        int minAre = m*n;\n        for (Info[] info : infos) {\n            Info info1 = info[0];\n            Info info2 = info[1];\n            minAre = Math.min(minAre,getCut(info1,info2));\n        }\n        return minAre;\n    }\n    public int getCut(Info info1,Info info2){\n        return Math.min(\n            getMinSum(info1)+getAre(info2),\n            getMinSum(info2)+getAre(info1)    \n        );\n    }\n    public int getMinSum(Info info){\n        if (getAre(info) == 1){\n            return m*n;\n        }\n        List<Info[]> infos = firstCut(info);\n        int res = Integer.MAX_VALUE;\n        for (Info[] info1 : infos) {\n            res = Math.min(res,getAre(info1[0])+getAre(info1[1]));\n        }\n        return res;\n    }\n    public int getAre(Info info){\n        return (info.down-info.up+1)*(info.right-info.left+1);\n    }\n    //\u5148\u780d\u7b2c\u4e00\u5200,\u7136\u540e\u7f29\n    public List<Info[]> firstCut(Info info){\n        List<Info[]> res = new ArrayList<>(m*n);\n        //\u6a2a\u780d\n        int up = info.up;\n        int down = info.down;\n        int left = info.left;\n        int right = info.right;\n        for (int line = up ; line < down;line++){\n            res.add(new Info[]{getMiniInfo(new Info(up,line,info.left,info.right)),getMiniInfo(new Info(line+1,down,info.left,info.right))});\n        }\n        //\u7eb5\u780d\n        for (int colLine = left;colLine<right;colLine++){\n            res.add(new Info[]{getMiniInfo(new Info(up,down,left,colLine)),getMiniInfo(new Info(up,down,colLine+1,right))});\n        }\n        return res;\n    }\n    public Info getMiniInfo(Info src){\n        int down = src.down;\n        int up =src.up;\n        int left = src.left;\n        int right = src.right;\n        next:\n        while (up <= down){\n            for (int i = left;i<=right;i++){\n                if (grid[up][i] == 1){\n                    break next;\n                }\n            }\n            up++;\n        }\n        next:\n        while (up <= down){\n            for (int i = left;i<=right;i++){\n                if (grid[down][i] == 1){\n                    break next;\n                }\n            }\n            down--;\n        }\n        next:\n        while (left <= right){\n            for (int i = up;i<=down;i++){\n                if (grid[i][left] == 1){\n                    break next;\n                }\n            }\n            left++;\n        }\n        next:\n        while (left <= right){\n            for (int i = up;i<=down;i++){\n                if (grid[i][right] == 1){\n                    break next;\n                }\n            }\n            right--;\n        }\n        return new Info(up,down,left,right);\n    }\n    \n}",
    "submit_ts": 1719114140.0
}