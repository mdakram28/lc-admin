{
    "username": "magic1024",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        self.build(data)\n\n    def build(self, data):\n        for i in range(self.n):\n            self.tree[self.n + i] = data[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]\n\n    def update(self, pos, value):\n        pos += self.n\n        self.tree[pos] = value\n        while pos > 1:\n            pos //= 2\n            self.tree[pos] = self.tree[pos * 2] + self.tree[pos * 2 + 1]\n\n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = 0\n        while l < r:\n            if l % 2:\n                res += self.tree[l]\n                l += 1\n            if r % 2:\n                r -= 1\n                res += self.tree[r]\n            l //= 2\n            r //= 2\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        def check(nums, i):\n            if i <= 0 or i >= len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        n = len(nums)\n        ans = [0] * n\n        for i in range(1, n - 1):\n            ans[i] = 1 if check(nums, i) else 0\n        \n        seg_tree = SegmentTree(ans)\n\n        fins = []\n        \n        for q in queries:\n            if q[0] == 2:\n                i, v = q[1:]\n                nums[i] = v\n                for i in range(max(1, i - 1), min(n - 1, i + 2)):\n                    seg_tree.update(i, 1 if check(nums, i) else 0)\n            elif q[0] == 1:\n                l, r = q[1:]\n                fins.append(seg_tree.query(l + 1, r))\n        \n        return fins",
    "submit_ts": 1718506616.0
}