{
    "username": "KUSHBAJAJ07",
    "submission": "class Solution {\n\npublic:\n    int solve(vector<vector<int>> &graph, int start, int t1, int t2, int n) {\n    queue<int> q;\n    vector<int> visited(n + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graph[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[t1] || visited[t2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         vector<pair<pair<int, int>, int>> cir(circles2.size());\n         vector<vector<int>> graph(circles2.size() + 4);\n        int n_c=circles2.size();\n        \n        for (int i = 0; i < n_c; ++i) {\n            cir[i].first.first=circles2[i][0];\n            cir[i].first.second=circles2[i][1];\n            cir[i].second=circles2[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < n_c; ++i) {\n             \n            if (cir[i].first.first <= cir[i].second) {\n                graph[n_c].push_back(i);\n                graph[i].push_back(n_c);\n            }\n            if (X - cir[i].first.first <= cir[i].second) {\n                graph[n_c + 2].push_back(i);\n                graph[i].push_back(n_c + 2);\n            }\n            if (cir[i].first.second <= cir[i].second) {\n                graph[n_c + 1].push_back(i);\n                graph[i].push_back(n_c + 1);\n            }\n            if (Y - cir[i].first.second <= cir[i].second) {\n                graph[n_c + 3].push_back(i);\n                graph[i].push_back(n_c + 3);\n            }\n            for (int j = i + 1; j < n_c; ++j) {\n                double distance = sqrt(pow(cir[i].first.first - cir[j].first.first, 2) +\n                                       pow(cir[i].first.second - cir[j].first.second, 2));\n                int radius_sum = cir[i].second + cir[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int temp = 0;\ntemp = max(temp, solve(graph, n_c, n_c + 1, n_c + 2, n_c + 4)); \n    temp = max(temp, solve(graph, n_c + 3, n_c + 2, n_c + 1, n_c + 4)); \n        if (temp){return false;}\n        return true;\n       \n        \n       \n    }\n};",
    "submit_ts": "1722138138",
    "subm_id": "1335783116"
}