{
    "username": "junwan1979",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        rows, cols, res = len(grid), len(grid[0]), 900\n        \n        for i in range(rows - 1):\n            sum1 = self.getRect(grid, 0, i, 0, cols - 1)\n            sum2 = self.getMinForTwo(grid, i + 1, rows - 1, 0, cols - 1)\n            res = min(res, sum1 + sum2)\n            sum1 = self.getMinForTwo(grid, 0, i, 0, cols - 1)\n            sum2 = self.getRect(grid, i + 1, rows - 1, 0, cols - 1)\n            res = min(res, sum1 + sum2)\n        \n        for i in range(cols - 1):\n            sum1 = self.getRect(grid, 0, rows - 1, 0, i)\n            sum2 = self.getMinForTwo(grid, 0, rows - 1, i + 1, cols - 1)\n            res = min(res, sum1 + sum2)\n            sum1 = self.getMinForTwo(grid, 0, rows - 1, 0, i)\n            sum2 = self.getRect(grid, 0, rows - 1, i + 1, cols - 1)\n            res = min(res, sum1 + sum2)\n        \n        return res\n            \n    def getMinForTwo(self, grid, r1, r2, c1, c2)-> int:\n        res = 900\n        for i in range(r1, r2):\n            sum1 = self.getRect(grid, r1, i, c1, c2)\n            sum2 = self.getRect(grid, i + 1, r2, c1, c2)\n            res = min(res, sum1 + sum2)\n        \n        for i in range(c1, c2):\n            sum1 = self.getRect(grid, r1, r2, c1, i)\n            sum2 = self.getRect(grid, r1, r2, i + 1, c2)\n            res = min(res, sum1 + sum2)\n        \n        return res\n        \n    \n    def getRect(self, grid, r1, r2, c1, c2) -> int:\n        x1, x2, y1, y2 = r1, r2, c1, c2\n        for i in range(r1, r2 + 1):\n            has_one = False\n            for j in range(c1, c2 + 1):\n                if grid[i][j] == 1:\n                    has_one = True\n                    break\n            if has_one:\n                break\n            else:\n                x1 = i + 1\n                \n        if x1 > x2: return 0\n        \n        for i in range(r2, r1 - 1, -1):\n            has_one = False\n            for j in range(c1, c2 + 1):\n                if grid[i][j] == 1:\n                    has_one = True\n                    break\n            if has_one:\n                break\n            else:\n                x2 = i - 1\n        \n        for j in range(c1, c2 + 1):\n            has_one = False\n            for i in range(r1, r2 + 1):\n                if grid[i][j] == 1:\n                    has_one = True\n                    break\n            if has_one:\n                break\n            else:\n                y1 = j + 1\n        \n        for j in range(c2, c1 - 1, -1):\n            has_one = False\n            for i in range(r1, r2 + 1):\n                if grid[i][j] == 1:\n                    has_one = True\n                    break\n            if has_one:\n                break\n            else:\n                y2 = j - 1\n            \n        return (x2 - x1 + 1) * (y2 - y1 + 1)\n        \n    \n    \n            \n        ",
    "submit_ts": 1719113289.0
}