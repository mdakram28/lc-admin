{
    "username": "ou-hai-ziJHu23dNZ",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        // \u7ed9\u4f60\u4e00\u4e2a\u957f\u5ea6\u4e3a n \u7684\u6574\u6570\u6570\u7ec4 nums \uff0cn \u662f \u5076\u6570 \uff0c\u540c\u65f6\u7ed9\u4f60\u4e00\u4e2a\u6574\u6570 k \u3002\n        //\n        //\u4f60\u53ef\u4ee5\u5bf9\u6570\u7ec4\u8fdb\u884c\u4e00\u4e9b\u64cd\u4f5c\u3002\u6bcf\u6b21\u64cd\u4f5c\u4e2d\uff0c\u4f60\u53ef\u4ee5\u5c06\u6570\u7ec4\u4e2d \u4efb\u4e00 \u5143\u7d20\u66ff\u6362\u4e3a 0 \u5230 k \u4e4b\u95f4\u7684 \u4efb\u4e00 \u6574\u6570\u3002\n        //\n        //\u6267\u884c\u5b8c\u6240\u6709\u64cd\u4f5c\u4ee5\u540e\uff0c\u4f60\u9700\u8981\u786e\u4fdd\u6700\u540e\u5f97\u5230\u7684\u6570\u7ec4\u6ee1\u8db3\u4ee5\u4e0b\u6761\u4ef6\uff1a\n        //\n        //\u5b58\u5728\u4e00\u4e2a\u6574\u6570 X \uff0c\u6ee1\u8db3\u5bf9\u4e8e\u6240\u6709\u7684 (0 <= i < n) \u90fd\u6709 abs(a[i] - a[n - i - 1]) = X \u3002\n        //\u8bf7\u4f60\u8fd4\u56de\u6ee1\u8db3\u4ee5\u4e0a\u6761\u4ef6 \u6700\u5c11 \u4fee\u6539\u6b21\u6570\u3002\n        // \u5bf9\u79f0\u7684\u4f4d\u7f6e\u7684\u6570\u503c\u76f8\u5dee\u7684\u7edd\u5bf9\u503c\u662f\u4e00\u4e2a\u5e38\u6570\n\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length / 2; i++) {\n            int diff = Math.abs(nums[i] - nums[nums.length - i - 1]);\n            map.put(diff, map.getOrDefault(diff, 0) + 1);\n        }\n//        Integer integer = map.values().stream().max(Integer::compareTo).get();\n//        return nums.length / 2 - integer;\n\n        // \u627e\u5230\u6bcf\u5bf9\u7684\u6210\u672c1\u533a\u95f4\n        SegmentTree segmentTree = new SegmentTree(0, k + 1);\n        for (int i = 0; i < nums.length / 2; i++) {\n            int diff = Math.abs(nums[i] - nums[nums.length - i - 1]);\n            int max1 = Math.max(diff, Math.abs(nums[i]));\n            max1 = Math.max(max1, Math.abs(nums[i] - k));\n            max1 = Math.max(max1, Math.abs(nums[nums.length - i - 1] - k));\n            max1 = Math.max(max1, Math.abs(nums[nums.length - i - 1]));\n            segmentTree.add(max1, max1 + 1, 1);\n        }\n        int res = Integer.MAX_VALUE;\n        for (int i = 0; i <= k; i++) {\n            // \u4fee\u6539\u62100\u7684\u7b54\u6848\n            int ans = (int)segmentTree.queryForSum(i, k + 1);\n            int d = ans;\n            ans -= map.getOrDefault(i, 0);\n            ans += 2 * (nums.length / 2 - d);\n            res = Math.min(res, ans);\n        }\n        return res;\n\n    }\n    \n    \n    public class SegmentTree {\n\n    // \u6240\u6709\u90fd\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff01\uff01\uff01\uff01\uff01\n    public Node root;\n\n    public SegmentTree(long left, long right) {\n        root = new Node();\n        root.left = left;\n        root.right = right;\n    }\n\n    // \u5bf9\u533a\u95f4\u589e\u52a0val\n    public void add(long left, long right, int val) {\n        addWithNode(root, left, right, val);\n    }\n\n    // \u5c06\u533a\u95f4\u91cd\u7f6e\u6210val\n    public void update(long left, long right, long val) {\n        updateWithNode(root, left, right, val);\n    }\n\n    // \u67e5\u8be2\u6700\u5927\u503c\n    public long queryForMax(long left, long right) {\n        return queryForMaxWithNode(root, left, right);\n    }\n\n    // \u67e5\u8be2\u548c\n    public long queryForSum(long left, long right) {\n        return queryForSumWithNode(root, left, right);\n    }\n\n\n    private long queryForMaxWithNode(Node node, long left, long right) {\n        if (node == null) {\n            return 0;\n        }\n        if (node.left == left && node.right == right) {\n            return node.max;\n        }\n        long mid = (node.left + node.right) / 2;\n        pushDown(node);\n        long res = Long.MIN_VALUE;\n        if (left < mid) {\n            res = Math.max(queryForMaxWithNode(node.leftNode, left, Math.min(right, mid)), res);\n        }\n        if (right > mid) {\n            res = Math.max(queryForMaxWithNode(node.rightNode, Math.max(left, mid), right), res);\n        }\n        return res;\n    }\n\n    private long queryForSumWithNode(Node node, long left, long right) {\n        if (node == null) {\n            return 0;\n        }\n        if (node.left == left && node.right == right) {\n            return node.sum;\n        }\n        long mid = (node.left + node.right) / 2;\n        pushDown(node);\n        long res = 0;\n        if (left < mid) {\n            res += queryForSumWithNode(node.leftNode, left, Math.min(right, mid));\n        }\n        if (right > mid) {\n            res += queryForSumWithNode(node.rightNode, Math.max(left, mid), right);\n        }\n        return res;\n    }\n\n    private void updateWithNode(Node node, long left, long right, long val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum = (node.right - node.left) * val;\n            node.max = val;\n            node.add = val;\n            // \u7531\u4e8e\u662f\u91cd\u7f6e\u64cd\u4f5c\uff0c\u548cadd\u4e0d\u592a\u4e00\u6837\uff0c\u5c06\u5b69\u5b50\u8282\u70b9\u6e05\u7a7a\n            node.leftNode = null;\n            node.rightNode = null;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid) {\n            updateWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid) {\n            updateWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    // \u5f00\u533a\u95f4\n    private void addWithNode(Node node, long left, long right, int val) {\n        if (node.left == left && node.right == right) {\n            // TODO \u627e\u5230\u6700\u7ec8\u70b9\uff0c\u76f4\u63a5\u4e0b\u63a8\u7b54\u6848\n            node.sum += (node.right - node.left) * val;\n            node.max += val;\n            node.add += val;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n\n        // pushDown\n        pushDown(node);\n        if (left < mid && node.leftNode != null) {\n            addWithNode(node.leftNode, left, Math.min(right, mid), val);\n        }\n        if (right > mid && node.rightNode != null) {\n            addWithNode(node.rightNode, Math.max(left, mid), right, val);\n        }\n        pushUp(node);\n    }\n\n    // \u5411\u4e0b\u6c47\u603b\uff0c\u4fee\u6539\u3001\u67e5\u8be2\u5b50\u8282\u70b9\u4e4b\u524d\uff0c\u9700\u8981\u8c03\u7528\u6b64\u65b9\u6cd5\uff0c\u6e05\u7a7a\u8282\u70b9add\u503c\n    private void pushDown(Node node) {\n        if (node == null) {\n            return;\n        }\n        if (node.left == node.right - 1) {\n            // \u53ea\u6709\u4e00\u4e2a\u70b9\uff0c\u4e0d\u7528\u4e0b\u63a8\u4e86\n            node.add = 0;\n            return;\n        }\n        long mid = (node.left + node.right) / 2;\n        // \u52a8\u6001\u5f00\u70b9\n        if (node.leftNode == null) {\n            Node leftNode = new Node();\n            leftNode.left = node.left;\n            leftNode.right = mid;\n            node.leftNode = leftNode;\n        }\n        if (node.rightNode == null) {\n            Node rightNode = new Node();\n            rightNode.left = mid;\n            rightNode.right = node.right;\n            node.rightNode = rightNode;\n        }\n        if (node.add == 0) {\n            return;\n        }\n        // TODO \u5b9e\u65f6\u4e0b\u63a8\u7b54\u6848\n        node.leftNode.add += node.add;\n        node.leftNode.max += node.add;\n        node.leftNode.sum += node.add * (node.leftNode.right - node.leftNode.left);\n\n        node.rightNode.add += node.add;\n        node.rightNode.max += node.add;\n        node.rightNode.sum += node.add * (node.rightNode.right - node.rightNode.left);\n\n        node.add = 0;\n    }\n\n    // \u8ba1\u7b97\u5b8c\u5b50\u8282\u70b9\u540e\uff0c\u4e0a\u62a5\u4fe1\u606f\n    private void pushUp(Node node) {\n        if (node.leftNode != null && node.rightNode != null) {\n            // TODO \u6536\u96c6\u4e0b\u9762\u7684\u7b54\u6848\n            node.sum = node.leftNode.sum + node.rightNode.sum;\n            node.max = Math.max(node.leftNode.max, node.rightNode.max);\n        }\n    }\n\n    public class Node {\n        // [left,right) \u5de6\u95ed\u53f3\u5f00\u533a\u95f4\n        public long left;\n        public long right;\n\n        // \u533a\u95f4\u6700\u5927\u503c\n        long max = 0;\n        // \u533a\u95f4\u548c\n        long sum = 0;\n        // \u61d2\u6807\u8bb0(\u9700\u8981\u8c03\u6574\u7684\u5bc4\u5b58\u503c)\n        long add = 0;\n\n        // \u5b69\u5b50\u8282\u70b9\n        Node leftNode;\n        Node rightNode;\n    }\n}\n}",
    "submit_ts": "1721486884",
    "subm_id": "548307380"
}