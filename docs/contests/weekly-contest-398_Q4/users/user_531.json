{
    "username": "johnzhengguo",
    "submission": "class Solution {\n\n    // the possible locations are 1 - d + 2^j -1 = 2^j -d, where d <= j+1\n    \n    \n    public int waysToReachStair(int k) {\n        \n        \n        int[] twojs = new int[31];\n        twojs[0] = 1;\n        for (int j = 1; j < 31; j += 1) {\n            twojs[j] = twojs[j-1] * 2;\n        }\n        \n        int res = 0;\n        \n        for (int j = 0; j < 31; j += 1) {\n            if (twojs[j] < k) {\n                // do nothing\n            } else {\n                int d = twojs[j] - k;\n                \n                if (d <= j+1) {\n                    res += compute(d, j);\n                }\n            }\n        }\n        \n        return res;\n    }\n    \n    \n    int[][][] dp;\n    private int compute(int d, int j) {\n        \n        if (d == 0) return 1;\n        if (d == j+1) {\n            return 1;\n        }\n        \n        int t = d+j;\n        \n        dp = new int[t+1][d+1][2]; // total, d needed, and can this be d, 0 cannot 1 can\n        for (int total = 0; total < t+1; total += 1) {\n            for (int down = 0; down < d+1; down += 1) {\n                for (int canDown = 0; canDown < 2; canDown += 1) {\n                    dp[total][down][canDown] = -1;\n                }\n            }\n        }\n        \n        return c2(d+j, d, 1);\n        \n    }\n    \n    private int c2(int total, int down, int canDown) {\n        \n        if (total < 0 || down < 0) return 0;\n        \n        if (dp[total][down][canDown] != -1) {\n            return dp[total][down][canDown];\n        }\n        \n        int res = 0;\n        \n        if (total == 0) return 0;\n        \n        if (total == 1) {\n            if (down == 0) {\n                return 1;\n            } else if (down == 1) {\n                if (canDown == 0) {\n                    return 0;\n                } else {\n                    return 1;\n                }\n            }\n        }\n        \n        if (canDown == 0) {\n            res = c2(total-1, down, 1);\n        } else {\n            res = c2(total-1, down, 1) + c2(total-1, down-1, 0);\n        }\n        \n        dp[total][down][canDown] = res;\n        return res;\n        \n    }\n}\n\n/*\njava.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2\n  at line 58, Solution.c2\n  at line 81, Solution.c2\n  at line 79, Solution.c2\n  at line 81, Solution.c2\n  at line 52, Solution.compute\n  at line 24, Solution.waysToReachStair\n  at line 56, __DriverSolution__.__helper__\n  at line 86, __Driver__.main\n  */",
    "submit_ts": "1716088557",
    "subm_id": "1261817461"
}