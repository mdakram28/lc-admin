{
    "username": "PrithviNadagouda",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& array, int k) {\n        int n = array.size();\n        int maxUnequal=k;\n        std::vector<std::vector<int>> dp(n, std::vector<int>(maxUnequal + 1, 1));\n        int result = 1;\n        std::vector<int> maxLenForUnequal(maxUnequal + 1, -1);\n        std::vector<std::map<int, int>> maxLenForValue(maxUnequal + 1);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= maxUnequal; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = std::max(dp[i][j], 1 + maxLenForUnequal[l]);\n                }\n                if (maxLenForValue[j].find(array[i]) != maxLenForValue[j].end()) {\n                    dp[i][j] = std::max(dp[i][j], 1 + maxLenForValue[j][array[i]]);\n                }\n                result = std::max(result, dp[i][j]);\n            }\n            for (int j = 0; j <= maxUnequal; j++) {\n                maxLenForUnequal[j] = std::max(maxLenForUnequal[j], dp[i][j]);\n                maxLenForValue[j][array[i]] = std::max(maxLenForValue[j][array[i]], dp[i][j]);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": "1717861855",
    "subm_id": "1281804234"
}