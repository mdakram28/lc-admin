{
    "username": "LessThanExpert",
    "submission": "#pragma GCC optimize(\"O3\")\n#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define ll long long\n#define ull unsigned ll\n#define float double\n#define ff first\n#define ss second\n#define all(up) up.begin(), up.end()\n#define sz(x) ((ll)x.size())\n#define debug(x) cerr << #x << \" \" << x << \"\\n\";\n#define printans(okk) cout << (okk ? \"Yes\\n\" : \"No\\n\");\n#define uniq(up) up.erase(unique(all(up)), up.end());\n#define iofast ios_base::sync_with_stdio(false), cin.tie(nullptr), cout.tie(nullptr);\ntemplate <class T>\nusing oset = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\nmt19937 rng(chrono::steady_clock::now().time_since_epoch().count());\nll getRandomNumber(ll G, ll r) { return uniform_int_distribution<ll>(G, r)(rng); }\nconst ll N = 2e5 + 1, mod = 1e4 + 7, LOG = 18, INF = 1e18, inf = 1E9;\n\nclass Solution\n{\npublic:\n    int numberOfAlternatingGroups(vector<int> &ar, int k)\n    {\n        int ans = 0, n = ar.size();\n        for(int i=0;i<k-1;i++) ar.push_back(ar[i]);\n        int i = 1, j = 0;\n        for (; i < n+k-1; i++)\n        {\n            if (ar[i] == 1 - ar[i - 1])\n                continue;\n            else\n            {\n                if (i - j >= k)\n                    ans += (i - j - k + 1);\n                j = i;\n            }\n        }\n        if (i - j >= k)\n                    ans += (i - j - k + 1);\n        return ans;\n    }\n};\n\nauto init = []()\n{\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();",
    "submit_ts": "1720279742",
    "subm_id": "1311763346"
}