{
    "username": "zzack_zack",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        m,n=len(grid),len(grid[0])\n        M  = (m-1)//2\n        @cache\n        def f(i,j,MOD):\n            if i>j:\n                return 0 if MOD==0 else inf\n            if i==j:\n                a=grid[M][i]\n                if a==MOD:\n                    return 0\n                if 1-a==MOD:\n                    return 1\n                return inf\n            a,b=grid[M][i],grid[M][j]\n            to_1 = 2-a-b\n            to_0 = a+b\n            return min(to_0+f(i+1,j-1,MOD),to_1+f(i+1,j-1,(MOD-2)%4))\n        @cache\n        def dfs(i,j,MOD):\n            if i>j:\n                return 0 if MOD==0 else inf\n            if i==j:\n                return f(0,n-1,MOD)\n            changes=0\n            mid = (n-1)//2\n            for u in range(mid+1):\n                a,b,c,d=grid[i][u],grid[i][n-1-u],grid[j][u],grid[j][n-1-u]\n                re = dfs(i+1,j-1,MOD)\n                if 2*u<n-1:\n                    changes+=min(a+b+c+d,4-a-b-c-d)\n                elif 2*u==n-1:\n                    a,b = grid[i][u],grid[j][u]\n                    to_1 = 2-a-b\n                    to_0 = a+b\n                    re = min(to_0+dfs(i+1,j-1,MOD),to_1+dfs(i+1,j-1,(MOD-2)%4))\n            return changes+re\n        \n        return dfs(0,m-1,0)\n                \n\n        ",
    "submit_ts": "1722699570",
    "subm_id": "1343215713"
}