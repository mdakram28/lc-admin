{
    "username": "gaoyf1235",
    "submission": "class Solution {\n    template <typename T>\n    struct SparseTable {\n      inline static constexpr T INF = numeric_limits<T>::max() / 2;\n      int N;\n      vector<vector<T>> table;\n      T f(T a, T b) { return a & b; }\n      SparseTable() {}\n      SparseTable(const vector<T> &v) : N(v.size()) {\n        int b = 1;\n        while ((1 << b) <= N) ++b;\n        table.push_back(v);\n        for (int i = 1; i < b; i++) {\n          table.push_back(vector<T>(N, INF));\n          for (int j = 0; j + (1 << i) <= N; j++) {\n            table[i][j] = f(table[i - 1][j], table[i - 1][j + (1 << (i - 1))]);\n          }\n        }\n      }\n      // [l, r)\n      T query(int l, int r) {\n        assert(0 <= l and l <= r and r <= N);\n        if (l == r) return INF;\n        int b = 31 - __builtin_clz(r - l);\n        return f(table[b][l], table[b][r - (1 << b)]);\n      }\n    };\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        int res = INT_MAX;\n        SparseTable st(nums);\n        for(int i = 0; i < n; i++){\n            int low = i;\n            int high = n - 1;\n            while(low <= high){\n                int mid = (low + high) / 2;\n                auto x = st.query(i, mid + 1);\n                res = min(res, abs(k -x));\n                if(x >= k){\n                    if(mid - 1 >= i){\n                        res = min(res, abs(k - st.query(i, mid)));\n                    }\n                    low = mid + 1;\n                }\n                else{\n                    high = mid - 1;\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299022.0
}