{
    "username": "sohamslc5",
    "submission": "class Solution {\npublic:\n    pair<int, int> dfs(vector<vector<int>>& g, int node, int parent, int& maxD) {\n        int m1 = 0, m2 = 0;\n        for (int child : g[node]) {\n            if (child != parent) {\n                auto [d, n] = dfs(g, child, node, maxD);\n                if (d > m1) {\n                    m2 = m1;\n                    m1 = d;\n                } else if (d > m2) {\n                    m2 = d;\n                }\n            }\n        }\n        maxD = max(maxD, m1 + m2);\n        return {m1 + 1, node};\n    }\n\n    pair<int, int> getDiameterAndNode(vector<vector<int>>& g) {\n        int maxD = 0;\n        auto [_, node] = dfs(g, 0, -1, maxD);\n        int diameter = 0;\n        auto [h, farthestNode] = dfs(g, node, -1, diameter);\n        return {diameter, farthestNode};\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1, m = e2.size() + 1;\n        vector<vector<int>> g1(n), g2(m);\n        \n        for (auto& e : e1) {\n            g1[e[0]].push_back(e[1]);\n            g1[e[1]].push_back(e[0]);\n        }\n        for (auto& e : e2) {\n            g2[e[0]].push_back(e[1]);\n            g2[e[1]].push_back(e[0]);\n        }\n\n        auto [d1, n1] = getDiameterAndNode(g1);\n        auto [d2, n2] = getDiameterAndNode(g2);\n\n        int h1 = 0, h2 = 0;\n        dfs(g1, n1, -1, h1);\n        dfs(g2, n2, -1, h2);\n\n        return max(max(d1, d2), (h1 + 1) / 2 + (h2 + 1) / 2 + 1);\n    }\n};",
    "submit_ts": "1719717589",
    "subm_id": "1304395615"
}