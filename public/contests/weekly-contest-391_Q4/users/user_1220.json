{
    "username": "swrp15",
    "submission": "class Solution {\npublic:\n    \n    int findMaxDiff(vector<pair<int, int> >& arr, int skipIdx)\n    {\n        int mi = INT_MAX, ma = INT_MIN;\n        for (int i=0;i<arr.size();i++)\n        {\n            if (arr[i].second != skipIdx)\n            {\n                mi = min(mi, arr[i].first);\n                ma = max(ma, arr[i].first);\n            }\n        }\n        \n        return (ma - mi);\n    }\n    \n    // O(n)\n    bool isPossible(int n, int maxDistance, vector<pair<int, int>>& sum, vector<pair<int, int>>& diff)\n    {\n        int dis = INT_MAX;\n        int skipIdx = -1;\n        \n        // Case 1\n        skipIdx = sum[0].second;\n        dis = max(sum[n-1].first - sum[1].first, findMaxDiff(diff, skipIdx));\n        if (dis <= maxDistance) return true;\n                      \n        // Case 2\n        skipIdx = sum[n-1].second;\n        dis = max(sum[n-2].first - sum[0].first, findMaxDiff(diff, skipIdx));\n        if (dis <= maxDistance) return true;\n                      \n        // Case 3\n        skipIdx = diff[0].second;\n        dis = max(diff[n-1].first - diff[1].first, findMaxDiff(sum, skipIdx));\n        if (dis <= maxDistance) return true;\n        \n        // Case 1\n        skipIdx = diff[n-1].second;\n        dis = max(diff[n-2].first - diff[0].first, findMaxDiff(sum, skipIdx));\n        if (dis <= maxDistance) return true;\n                      \n        return false;\n    }\n    \n    \n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int, int> > sum(n);\n        vector<pair<int, int> > diff(n);\n        \n        for (int i=0;i<n;i++)\n        {\n            sum[i] = {points[i][0] + points[i][1], i};\n            diff[i] = {points[i][0] - points[i][1], i};\n        }\n        \n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        \n        int l = 0, r = max(sum[n-1].first - sum[0].first, diff[n-1].first - diff[0].first);\n        while (l < r)\n        {\n            int mid = l + (r - l) / 2;\n            if (isPossible(n, mid, sum, diff)) r = mid;\n            else l = mid + 1;\n        }\n        \n        return l;\n        \n    }\n};"
}