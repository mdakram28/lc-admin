{
    "username": "harshita_2106",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cost arrays in descending order\n    sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    int h = 1, v = 1; // Number of pieces created horizontally and vertically\n    int i = 0, j = 0;\n    long long totalCost = 0;\n\n    // Apply a greedy algorithm to choose the maximum cost cut first\n    while (i < horizontalCut.size() && j < verticalCut.size()) {\n        if (horizontalCut[i] >= verticalCut[j]) {\n            totalCost += horizontalCut[i] * v;\n            h++;\n            i++;\n        } else {\n            totalCost += verticalCut[j] * h;\n            v++;\n            j++;\n        }\n    }\n\n    // If there are remaining horizontal cuts\n    while (i < horizontalCut.size()) {\n        totalCost += horizontalCut[i] * v;\n        i++;\n    }\n\n    // If there are remaining vertical cuts\n    while (j < verticalCut.size()) {\n        totalCost += verticalCut[j] * h;\n        j++;\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720926672",
    "subm_id": "1320293066"
}