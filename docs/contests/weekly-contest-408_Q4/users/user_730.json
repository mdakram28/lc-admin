{
    "username": "CompileErrorAutomaton",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        p = [i for i in range(n+2)]\n        size = [1]*(n+2)\n        \n        def find(x):\n            if p[x]!=x:\n                p[x] = find(p[x])\n            return p[x]\n        \n        def union(x, y):\n            px, py = find(x), find(y)\n            if px == py:\n                return False\n            if size[px] < size[py]:\n                px, py = py, px\n            size[px] += size[py]\n            p[py] = px\n            return\n        \n        def intersect(x1, y1, x2, y2, r1, r2):\n            d = math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2))\n            if d > r1 + r2:\n                return False\n            return True\n\n        for i in range(n):\n            x, y, r = circles[i]\n            if x - r <= 0 or y + r >= Y:\n                union(i, n)\n            if x + r >= X or y - r <= 0:\n                union(i, n+1)\n            for j in range(i+1, n):\n                x1,y1,r1 = circles[j]\n                if intersect(x, y, x1,y1, r, r1):\n                    union(i, j)\n        if find(n+1)==find(n):\n            return False\n        return True\n                ",
    "submit_ts": "1722138150",
    "subm_id": "1335783430"
}