{
    "username": "Abel",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        p = 3 * (m + n) - 9\n        locs = [(i, j) for j in range(n) for i in range(m)]\n        locs = sorted(locs, key= lambda x:-board[x[0]][x[1]])[:p]\n        @cache\n        def dfs(i, ban_r, ban_c):\n            if i >= p:\n                return -inf\n            x, y = locs[i]\n            if ((1 << x) & ban_r) or ((1 << y) & ban_c):\n                return dfs(i + 1, ban_r, ban_c)\n            if ban_r.bit_count() == 2:\n                return board[x][y]\n            r1 = board[x][y] + dfs(i + 1, ban_r | (1 << x), ban_c | (1 << y))\n            r2 = dfs(i + 1, ban_r, ban_c)\n            return max(r1, r2)\n        return dfs(0, 0, 0)\n            \n",
    "submit_ts": "1723908906",
    "subm_id": "556333501"
}