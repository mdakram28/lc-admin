{
    "username": "NITESH SAXENA",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        std::vector<std::vector<long long>> bestValues(m, std::vector<long long>(3, LLONG_MIN));\n        std::vector<std::vector<int>> bestColumns(m, std::vector<int>(3, -1));\n\n        calculateBestValuesAndColumns(board, m, n, bestValues, bestColumns);\n        return findMaxSum(m, bestValues, bestColumns);\n    }\n\nprivate:\n    void calculateBestValuesAndColumns(const std::vector<std::vector<int>>& board, int m, int n, \n                                       std::vector<std::vector<long long>>& bestValues, \n                                       std::vector<std::vector<int>>& bestColumns) {\n        for (int i = 0; i < m; ++i) {\n            std::vector<std::pair<long long, int>> colValues;\n            for (int j = 0; j < n; ++j) {\n                colValues.emplace_back(board[i][j], j);\n            }\n            std::sort(colValues.rbegin(), colValues.rend());\n\n            for (int k = 0; k < 3 && k < n; ++k) {\n                bestValues[i][k] = colValues[k].first;\n                bestColumns[i][k] = colValues[k].second;\n            }\n        }\n    }\n\n    long long findMaxSum(int m, const std::vector<std::vector<long long>>& bestValues, \n                         const std::vector<std::vector<int>>& bestColumns) {\n        long long maxSum = LLONG_MIN;\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    maxSum = std::max(maxSum, calculateCurrentSum(r1, r2, r3, bestValues, bestColumns));\n                }\n            }\n        }\n        return maxSum;\n    }\n\n    long long calculateCurrentSum(int r1, int r2, int r3, \n                                  const std::vector<std::vector<long long>>& bestValues, \n                                  const std::vector<std::vector<int>>& bestColumns) {\n        long long maxSum = LLONG_MIN;\n        for (int i = 0; i < 3; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                if (bestColumns[r2][j] == bestColumns[r1][i]) continue;\n                for (int k = 0; k < 3; ++k) {\n                    if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue;\n                    long long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                    maxSum = std::max(maxSum, currentSum);\n                }\n            }\n        }\n        return maxSum;\n    }\n};",
    "submit_ts": "1723910019",
    "subm_id": "1359214287"
}