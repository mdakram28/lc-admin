{
    "username": "kartikeyy",
    "submission": "\n#define INF INT32_MAX\n\n\n// SegmentTree(vector<int>& arr)\n//     {\n//         n = arr.size();\n//         tree.resize(4 * n);\n//         // tree.assign(4*n)\n//         build(arr, 0, 0, n - 1);\n//     }\n//     // int query(int l, int r)\n//     // {\n//     //     return query(0, 0, n - 1, l, r);\n//     // }\n//     void build(vector<int>& arr, int node, int start,int end)\n//     {\n//         if (start == end) {\n//             tree[node] = arr[start];\n//         }\n//         else {\n//             int mid = (start + end) / 2;\n//             build(arr, 2 * node + 1, start, mid);\n//             build(arr, 2 * node + 2, mid + 1, end);\n//             tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n//         }\n//     }\n\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        // tree.assign(4*n)\n        build(arr, 0, 0, n - 1);\n    }\n    // int query(int l, int r)\n    // {\n    //     return query(0, 0, n - 1, l, r);\n    // }\n    void build(vector<int>& arr, int node, int start,int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int build2(vector<int>& arr, int node, int start,int end){\n        ////\n        return 0;\n    }\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int aa = query(2 * node + 1, start, mid, l, r);\n        int bb = query(2 * node + 2, mid + 1, end, l, r);\n        return aa & bb;\n    }\n    int query22(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return 1000000009;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& arr, int k) {\n        int n = arr.size();\n        SegmentTree st(arr);\n        int ans = INF;\n        for (int i = 0; i < n; i++) {\n            int low = i - 1;\n            int high= n - 1;\n\n            while ((high - low )> 1) {\n                int mid = (low + high) / 2;\n                int val = st.query(i, mid);\n                if (val >= k){\n                    low = mid;\n                }\n                else{\n                    high = mid;\n                }\n            }\n            if (low != i - 1){\n                 ans = min(ans, abs(st.query(i, low) - k));\n            } \n            ans = min(ans, abs(k - st.query(i, high)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298714.0
}