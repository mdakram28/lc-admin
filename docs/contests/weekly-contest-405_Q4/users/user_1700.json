{
    "username": "PUSSYNIQQA",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> costs;\n    vector<int> lengths;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        TrieNode* root = buildTrie(words, costs);\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* current = root;\n            for (int j = i; j < n; ++j) {\n                if (current->children.find(target[j]) == current->children.end()) break;\n                current = current->children[target[j]];\n                for (int k = 0; k < current->costs.size(); ++k) {\n                    int len = current->lengths[k];\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + current->costs[k]);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    TrieNode* buildTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* current = root;\n            for (char c : words[i]) {\n                if (current->children.find(c) == current->children.end()) {\n                    current->children[c] = new TrieNode();\n                }\n                current = current->children[c];\n            }\n            current->costs.push_back(costs[i]);\n            current->lengths.push_back(words[i].length());\n        }\n        return root;\n    }\n};\n",
    "submit_ts": "1720324229",
    "subm_id": "1312394580"
}