{
    "username": "parnniti",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<int> wordIndices;\n    };\n\n    void insertWord(TrieNode* root, const string& word, int index) {\n        TrieNode* current = root;\n        for (char c : word) {\n            if (!current->children.count(c)) {\n                current->children[c] = new TrieNode();\n            }\n            current = current->children[c];\n        }\n        current->wordIndices.push_back(index);\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int dp[n + 1];\n        fill(dp, dp + n + 1, INT_MAX);\n        dp[0] = 0; // No cost to form an empty string\n\n        // Build Trie from words\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], i);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip if the current state is unreachable\n            \n            TrieNode* current = root;\n            for (int j = i; j < n; ++j) {\n                if (!current->children.count(target[j])) break;\n                current = current->children[target[j]];\n                for (int wordIndex : current->wordIndices) {\n                    int len = words[wordIndex].size();\n                    if (j + 1 - i == len) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + costs[wordIndex]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320657",
    "subm_id": "1312300869"
}