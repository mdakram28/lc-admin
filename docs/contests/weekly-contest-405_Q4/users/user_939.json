{
    "username": "atheshwarank21cs",
    "submission": "class Solution {\n   \n    public int minimumCost(String target, String[] arr, int[]brr) {\n        TrieNode root = new TrieNode();\n       \n        for (int i=0;i<arr.length;i++)\n            root.insert(root,arr[i],brr[i]);\n        \n        int n=target.length();\n        int[]dp=new int[n+1];\n        Arrays.fill(dp,Integer.MAX_VALUE);\n        dp[0]=0;\n        \n         for (int i=1;i<=n;i++)\n         {\n            TrieNode node=root;\n            for (int j=i-1;j>=0;j--)\n            {\n                char c=target.charAt(j);\n                if (node.child[c-'a']==null) \n                    break;\n                node=node.child[c-'a'];\n                if (node!=null && node.w!=Integer.MAX_VALUE && dp[j]!=Integer.MAX_VALUE) \n                    dp[i]=Math.min(dp[i],dp[j]+node.w);\n            }\n        }\n        \n        if(dp[target.length()]==Integer.MAX_VALUE)\n                return -1;\n        return dp[n];\n    }\n}\n\n\n\npublic class Trie {\n\n    \n    static class Node {\n        Node[] links = new Node[26];\n       \n        boolean flag = false;\n        boolean containsKey(char ch) {\n            return links[ch - 'a'] != null;\n        }\n\n        \n        void put(char ch, Node node) {\n            links[ch - 'a'] = node;\n        }\n\n     \n        Node get(char ch) {\n            return links[ch - 'a'];\n        }\n\n        void setEnd() {\n            flag = true;\n        }\n\n        boolean isEnd() {\n            return flag;\n        }\n    }\n\n    private Node root;\n\n    public Trie() {\n        root = new Node();\n    }\n\n    \n    public void insert(String word) {\n        Node node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node.containsKey(word.charAt(i))) {\n            \n                node.put(word.charAt(i), new Node());\n            }\n            node = node.get(word.charAt(i));\n        }\n        node.setEnd();\n    }\n\n    public boolean search(String word) {\n        Node node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node.containsKey(word.charAt(i))) {\n               \n                return false;\n            }\n            \n            node = node.get(word.charAt(i));\n        }\n        return node.isEnd();\n    }\n\n    public boolean startsWith(String prefix) {\n        Node node = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            if (!node.containsKey(prefix.charAt(i))) {\n                return false;\n            }\n            node = node.get(prefix.charAt(i));\n        }\n        return true;\n    }\n\n    \n}\n class TrieNode {\n        TrieNode[] child;\n        int w;\n\n        TrieNode() {\n            child = new TrieNode[26];\n            w = Integer.MAX_VALUE;\n        }\n\n     void insert(TrieNode root, String word, int w) {\n        TrieNode node = root;\n        for (int i=word.length()-1;i>=0;i--) {\n            int idx = word.charAt(i)-'a';\n            if (node.child[idx] == null) \n                node.child[idx] = new TrieNode();\n        \n            node = node.child[idx];\n        }\n        node.w = Math.min(node.w,w);\n    }\n\n}\n\n",
    "submit_ts": "1720322823",
    "subm_id": "1312360033"
}