{
    "username": "nikhrasuryansh",
    "submission": "class Solution {\npublic:\n map <int ,int > l;\n   int best;\n   int node;\n   int dfs(int v, bool* visited, vector <int> graph[], int c = 0){\n      visited[v] = true;\n      int ans = 0;\n      for(int i = 0; i < graph[v].size(); i++){\n         if(!visited[graph[v][i]])ans = max(ans,dfs(graph[v][i], visited, graph, c+1));\n      }\n      if(c > best){\n         best = c;\n         node = v ;\n      }\n      visited[v] = false;\n      return max(c,ans);\n   }\n   \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<int> adj[edges1.size()+1];\n        for(int i=0;i<edges1.size();i++){\n            adj[edges1[i][0]].push_back(edges1[i][1]);\n            adj[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        bool* visited = new bool[edges1.size()+1]();\n      best = 0;\n      node = 0;\n      dfs(0, visited, adj);\n      bool* visited2 = new bool[edges1.size()+1]();\n      int d1=dfs(node, visited2, adj);\n      l.clear();\n      vector<int> adj1[edges2.size()+1];\n        for(int i=0;i<edges2.size();i++){\n            adj1[edges2[i][0]].push_back(edges2[i][1]);\n            adj1[edges2[i][1]].push_back(edges2[i][0]);\n        }\n    bool* visited1 = new bool[edges2.size()+1]();\n      best = 0;\n      node = 0;\n      dfs(0, visited1, adj1);\n      bool* visited4 = new bool[edges2.size()+1]();\n      int d2=dfs(node, visited4, adj1);\n\n      int ans=max(1+((d1+1)/2)+((1+d2)/2),max(d1,d2));\n      return ans;\n    }\n};",
    "submit_ts": "1719718750",
    "subm_id": "1304425164"
}