{
    "username": "Wake",
    "submission": "class Solution {\npublic:\n    using Point = tuple<int, int, int>;\n    using LL = long long;\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        vector<Point> vec;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                vec.push_back({board[i][j], i, j});\n            }\n        }\n        sort(vec.begin(), vec.end(), greater<>());\n\n        long long maxPoint = -1e9 * 3;\n        LL currPoint = 0;\n        vector<int> selectIdxs;\n        GetMaxPoint(vec, 0, 3, currPoint, maxPoint, selectIdxs);\n\n        return maxPoint;\n    }\n    void GetMaxPoint(const vector<Point>& vec, int idx, int remain, LL& currPoint, LL& maxPoint, vector<int>& selectIdxs) {\n        // cout << idx << \", \" << remain << endl;\n        if (remain == 0) {\n            if (currPoint > maxPoint) {\n                maxPoint = currPoint;\n            }\n            return;\n        }\n\n        for (int i = idx; i < vec.size(); ++i) {\n            const auto& [p, x, y] = vec[i];\n            // cout << \"XD\";\n            if (1LL * remain * p + currPoint <= maxPoint)\n                break;\n            // cout << \"WW\";\n            if (Invalid(vec, i, selectIdxs))\n                continue;\n            // cout << \"GG\";\n            currPoint += p;\n            selectIdxs.push_back(i);\n            GetMaxPoint(vec, i + 1, remain - 1, currPoint, maxPoint, selectIdxs);\n            selectIdxs.pop_back();\n            currPoint -= p;\n        }\n    }\n    bool Invalid(const vector<Point>& vec, int idx, const vector<int>& selectIdxs) {\n        const auto& [_, x, y] = vec[idx];\n        for (const auto& preIdx: selectIdxs) {\n            const auto& [_pre, xPre, yPre] = vec[preIdx];\n            if (xPre == x || yPre == y)\n                return true;\n        }\n        return false;\n    }\n};",
    "submit_ts": "1723907613",
    "subm_id": "1359116123"
}