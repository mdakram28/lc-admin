{
    "username": "profchi",
    "submission": "class Solution {\n    public int maxTotalReward(int[] rewardValues) {\n        Arrays.sort(rewardValues);\n        \n        BitSet current = new BitSet();\n        \n        current.set(0);\n        \n        BitSet clone, shifted;\n        \n        int max = 0;\n        \n        for (int num : rewardValues)\n            max = Math.max(max, num);\n        \n        for (int num : rewardValues) {\n            clone = (BitSet)current.clone();\n            int size = clone.size();\n            \n            if (size > num)\n                clone.clear(num, size);\n            \n            shifted = shiftLeft(clone, num, 2 * max);\n            current.or(shifted);\n        }\n        \n        \n        // System.out.println(current);\n        return current.previousSetBit(100_000);\n    }\n    \n    private BitSet shiftLeft(BitSet bits, int n, int max) {\n\t\tif (n == 0)\n\t\t\treturn (BitSet) bits.clone();\n\t\t\n\t\tmax = Math.min(max, bits.size() + n);\n\t\t\n\t\tint length = 1 + (max / 64);\n\n\t\tlong [] res = new long [length];\n\t\tint cIdx = n / 64;\n\t\tn %= 64;\n\t    long[] raw = bits.toLongArray();\n\t    long carry = 0;\n\t    \n\t    for (int uIdx = cIdx, i = 0; uIdx < res.length; ++uIdx, ++i) {\n\t    \tlong val = i >= raw.length ? 0 : raw[i];\n\t    \t\n\t    \tif (n != 0) {\n\t    \t\tlong newcarry = val >>> (64 - n);\n\t\t\t\t\n\t    \t\tres[uIdx] = (val << n) | carry;\n\t    \t\tcarry = newcarry;\n\t    \t} else {\n\t    \t\tres[uIdx] = val;\n\t    \t}\n\t    \t\n\t    \tif (carry == 0 && i >= raw.length)\n\t    \t\tbreak;\n\t    }\n\t    \n\t    return BitSet.valueOf(res);\n\t}\n}",
    "submit_ts": 1717902022.0
}