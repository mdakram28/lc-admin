{
    "username": "sarthakkumar311003",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return solve(X, Y, circles);\n    }\n\nprivate:\n    bool solve(int X, int Y, vector<vector<int>>& c) {\n        int nc = c.size();\n        vector<vector<int>> g(nc + 4); // Graph with additional nodes for the boundaries\n\n        for (int i = 0; i < nc; i++) {\n            if (c[i][0] <= c[i][2]) {\n                g[nc].push_back(i);\n                g[i].push_back(nc);\n            }\n            if (X - c[i][0] <= c[i][2]) {\n                g[nc + 2].push_back(i);\n                g[i].push_back(nc + 2);\n            }\n            if (c[i][1] <= c[i][2]) {\n                g[nc + 1].push_back(i);\n                g[i].push_back(nc + 1);\n            }\n            if (Y - c[i][1] <= c[i][2]) {\n                g[nc + 3].push_back(i);\n                g[i].push_back(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double dist = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n                int radSum = c[i][2] + c[j][2];\n                if (radSum >= dist) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        // Check if there's a blocking path between the left and right, or top and bottom\n        int isBlocked = max(bfs(g, nc, nc + 1, nc + 2, nc + 4), bfs(g, nc + 3, nc + 2, nc + 1, nc + 4));\n\n        return isBlocked == 0; // Return true if no blocking path is found\n    }\n\n    int bfs(vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n\n        q.push(s);\n        vis[s] = true;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n\n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n\n        return (vis[t1] || vis[t2]) ? 1 : 0;\n    }\n};\n",
    "submit_ts": "1722138081",
    "subm_id": "1335781625"
}