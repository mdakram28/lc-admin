{
    "username": "tarptaeya",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        parent = [i for i in range(n)]\n        rank = [1 for _ in range(n)]\n        def find(x):\n            if parent[x] == x:\n                return x\n            parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            x = find(x)\n            y = find(y)\n            if x == y:\n                return\n            if rank[x] > rank[y]:\n                parent[y] = x\n            elif rank[x] < rank[y]:\n                parent[x] = y\n            else:\n                parent[x] = y\n                rank[y] += 1\n\n        for i in range(n):\n            for j in range(n):\n                if i == j:\n                    continue\n                x1, y1, r1 = circles[i]\n                x2, y2, r2 = circles[j]\n                if (x1 - x2) ** 2 + (y1 - y2) ** 2 <= (r1 + r2) ** 2:\n                    union(i, j)\n        \n        A = set()\n        B = set()\n        C = set()\n        D = set()\n        for i in range(n):\n            x, y, r = circles[i]\n            if abs(x) <= r:\n                A.add(find(i))\n            if abs(x - X) <= r:\n                C.add(find(i))\n            if abs(y) <= r:\n                D.add(find(i))\n            if abs(y - Y) <= r:\n                B.add(find(i))\n\n        if A & D or B & C or A & C or B & D:\n            return False\n        return True",
    "submit_ts": "1722138334",
    "subm_id": "1335788075"
}