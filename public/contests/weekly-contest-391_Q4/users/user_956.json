{
    "username": "UrbanTurban",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        \n        int n=points.length;\n        List<Pair> ls = new ArrayList<>();\n        for(int i=0;i<n;++i)\n        {\n            ls.add(new Pair(points[i][0], points[i][1]));\n        }\n        \n        long[] sum = new long[n];\n        long[] diff = new long[n];\n        for (int i = 0; i < n; i++) \n        {\n            sum[i] = ls.get(i).x + ls.get(i).y;\n            diff[i] = ls.get(i).x - ls.get(i).y;\n        }\n    \n        // Arrays.sort(sum);\n        // Arrays.sort(diff);\n        \n//         debugLong(sum);\n//         debugLong(diff);\n        \n        MultiSet<Long> set1 = new MultiSet<>();\n        MultiSet<Long> set2 = new MultiSet<>();\n        \n        for(int i=0;i<n;++i)\n        {\n            set1.add(sum[i]);\n            set2.add(diff[i]);\n        }\n        \n        int ans=Integer.MAX_VALUE;\n        for(int i=0;i<n;++i)\n        {\n            long Sum = sum[i];\n            long Diff = diff[i];\n            \n            set1.remove(Sum);\n            set2.remove(Diff);\n            \n            long poss = Math.max(set1.last() - set1.first(), set2.last() - set2.first());\n            ans = Math.min(ans, (int) poss);\n            \n            set1.add(Sum);\n            set2.add(Diff);\n            \n        }\n        \n        return ans;\n        \n    }\n    public void debugLong(long[] arr)\n    {\n        for(int i=0;i<arr.length;++i)\n            System.out.print(arr[i]+\" \");\n        System.out.println();\n    }\n}\nclass Pair\n{\n    int x;\n    int y;\n    Pair(int X, int Y)\n    {\n        x = X;\n        y = Y;\n    }\n    public String toString()\n    {\n        return x+\",\"+y;\n    }\n}\nclass MultiSet<T> \n{\n    private int size;\n    TreeMap<T, Integer> map;\n\n    public MultiSet(){\n            size = 0;\n            map = new TreeMap<>();\n        }\n        public int size(){return size;}\n        public int dsize(){return map.size();}\n        public boolean isEmpty(){return size==0;}\n        public void add(T t){\n            size++;\n            map.put(t, map.getOrDefault(t, 0)+1);\n        }\n        public boolean remove(T t){ // single removal of occurence of element\n            if(!map.containsKey(t))return false;\n            size--;\n            int c = map.get(t);\n            if(c==1)map.remove(t);\n            else map.put(t, c-1);\n            return true;\n        }\n        public int freq(T t){return map.getOrDefault(t, 0);}\n        public boolean contains(T t){return map.getOrDefault(t,0)>0;}\n        public T ceiling(T t){return map.ceilingKey(t);}\n        public T floor(T t){return map.floorKey(t);}\n        public T first(){return map.firstKey();}\n        public T last(){return map.lastKey();}\n        \n        public ArrayList<T> keySet()\n        {\n            ArrayList<T> list=new ArrayList<>();\n\n            for(T key: map.keySet())\n            {\n                int cnt=map.get(key);\n                while(cnt-->0)\n                {\n                    list.add(key);\n                }\n            }\n            return list;\n        }\n\n        public String toString()\n        {\n            StringBuilder sb=new StringBuilder();\n            for(T key: map.keySet())\n            {\n                int cnt=map.get(key);\n                while(cnt-->0)\n                {\n                    sb.append(key+\" \");\n                }\n            }\n            return sb.toString();\n        }\n}"
}