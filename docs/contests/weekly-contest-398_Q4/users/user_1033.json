{
    "username": "arsread",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        int res = 0;\n        int j = 1;\n        Map<Integer, Integer> cnt = new HashMap<>();\n        cnt.put(1, 1);\n        res += cnt.getOrDefault(k, 0);\n        while (true) {\n            Map<Integer, Integer> nxt = new HashMap<>();\n            int curMin = Integer.MAX_VALUE;\n            for (int i: cnt.keySet()) {\n                if (i - 1 == k) {\n                    res += cnt.get(i);\n                }\n                nxt.put(i - 1 + j, nxt.getOrDefault(i-1 + j, 0) + cnt.get(i));\n                curMin = Math.min(curMin, i - 1 + j);\n                nxt.put(i + j, nxt.getOrDefault(i+j, 0) + cnt.get(i));\n                curMin = Math.min(curMin, i + j);\n            }\n            res += nxt.getOrDefault(k, 0);\n            cnt = nxt;\n            j *= 2;\n            if (curMin - 1 > k) break;\n        }\n        return res;\n    }\n}",
    "submit_ts": 1716090108.0
}