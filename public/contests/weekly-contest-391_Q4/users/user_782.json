{
    "username": "tzeng12",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        p = points.copy()\n        for i in range(len(p)):\n            a = p[i][0] + p[i][1]\n            b = p[i][0] - p[i][1]\n            p[i] = [a, b]\n            \n        p1 = p.copy()\n        p2 = p.copy()\n        p1.sort(key = lambda x:(x[0], x[1]))\n        p2.sort(key = lambda x:(x[1], x[0]))\n        \n        #print(p1, p2)\n        \n        xdiff = p1[-1][0] - p1[0][0]\n        ydiff = p2[-1][1] - p2[0][1]\n        \n        #print(xdiff, ydiff)\n        \n        extremes = [p1[0], p1[-1], p2[0], p2[-1]]\n        \n        best = 10**10\n        \n        for point in extremes:\n            p3 = p1.copy()\n            p4 = p2.copy()\n            p3.remove(point)\n            p4.remove(point)\n            #print(\"p3p4\", p3, p4)\n            best = min(best, max(p3[-1][0] - p3[0][0], p4[-1][1] - p4[0][1]))\n            #print(best)\n        \n        return best\n        \n        \n        \"\"\"if ydiff > xdiff:\n            return min(max(xdiff, p2[-1][1] - p2[1][1]), max(xdiff, p2[-2][1] - p2[0][1]))\n        else:\n            return min(max(ydiff, p1[-1][0] - p1[1][0]), max(ydiff, p1[-2][0] - p1[0][0]))\"\"\""
}