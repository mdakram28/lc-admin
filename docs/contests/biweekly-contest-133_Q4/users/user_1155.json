{
    "username": "A_S_",
    "submission": "class Solution {\npublic:\n    const int MOD = 1000000007;\n\n    // Function to compute nCr % MOD\n    int nCr(int n, int r, vector<vector<int>>& dp) {\n        if (r > n) return 0;\n        if (r == 0 || r == n) return 1;\n        if (dp[n][r] != -1) return dp[n][r];\n        return dp[n][r] = (nCr(n - 1, r - 1, dp) + nCr(n - 1, r, dp)) % MOD;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MAX_INV_COUNT = 400;\n        \n        unordered_map<int, int> mp;\n        for(auto x : requirements) {\n            mp[x[0]+1] = x[1];\n        }\n        \n        vector<vector<long long>> dp(n + 1, vector<long long>(401, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= 400; ++inv) {\n                for (int k = 0; k < length; ++k) {\n                    if (inv >= k) {\n                        dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n            if(mp.count(length)) {\n                int vL = mp[length];\n                for(int k = 0 ; k <= 400 ; k++) {\n                    if(vL!=k) {\n                        dp[length][k] = 0;\n                    }\n                }\n            }\n        }\n\n        vector<vector<int>> comb(n + 1, vector<int>(n + 1, -1));\n        vector<int> inv_count(n + 1, -1);\n        for (const auto& req : requirements) {\n            inv_count[req[0] + 1] = req[1];\n        }\n\n        int result = 0;\n        for(auto x : dp[n]) {\n            result = (result+x) %MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1719071960.0
}