{
    "username": "fsyun",
    "submission": "class Solution {\n    int min(int a, int b) {\n        if (a == -1)\n            return b;\n        if (b == -1)\n            return a;\n        return Math.min(a, b);\n    }\n    int max(int a, int b) {\n        if (a == -1)\n            return b;\n        if (b == -1)\n            return a;\n        return Math.max(a, b);\n    }\n    int cal(int minR, int maxR, int minC, int maxC) {\n        return minR == -1 ? 1 : (maxR - minR + 1) * (maxC - minC + 1);\n    }\n    public int minimumSum(int[][] g) {\n        int row = g.length, col = g[0].length;\n        \n        int[][] minR1 = new int[row][col], minC1 = new int[row][col], maxR1 = new int[row][col], maxC1 = new int[row][col];\n        for (int r = 0; r < row; r++)\n            for (int c = 0; c < col; c++) {\n                minR1[r][c] = -1;\n                minC1[r][c] = -1;\n                maxR1[r][c] = -1;\n                maxC1[r][c] = -1;\n            }\n        for (int r = 0; r < row; r++)\n            for (int c = 0; c < col; c++) {\n                minR1[r][c] = min(r > 0 ? minR1[r - 1][c] : -1, c > 0 ? minR1[r][c - 1] : -1);\n                minC1[r][c] = min(r > 0 ? minC1[r - 1][c] : -1, c > 0 ? minC1[r][c - 1] : -1);\n                maxR1[r][c] = max(r > 0 ? maxR1[r - 1][c] : -1, c > 0 ? maxR1[r][c - 1] : -1);\n                maxC1[r][c] = max(r > 0 ? maxC1[r - 1][c] : -1, c > 0 ? maxC1[r][c - 1] : -1);\n                if (g[r][c] == 1) {\n                    if (minR1[r][c] == -1 || r < minR1[r][c])\n                        minR1[r][c] = r;\n                    if (minC1[r][c] == -1 || c < minC1[r][c])\n                        minC1[r][c] = c;\n                    if (maxR1[r][c] == -1 || r > maxR1[r][c])\n                        maxR1[r][c] = r;\n                    if (maxC1[r][c] == -1 || c > maxC1[r][c])\n                        maxC1[r][c] = c;\n                }\n            }\n        \n        int[][] minR2 = new int[row][col], minC2 = new int[row][col], maxR2 = new int[row][col], maxC2 = new int[row][col];\n        for (int r = 0; r < row; r++)\n            for (int c = 0; c < col; c++) {\n                minR2[r][c] = -1;\n                minC2[r][c] = -1;\n                maxR2[r][c] = -1;\n                maxC2[r][c] = -1;\n            }\n        for (int r = 0; r < row; r++)\n            for (int c = col - 1; c >= 0; c--) {\n                minR2[r][c] = min(r > 0 ? minR2[r - 1][c] : -1, c < col - 1 ? minR2[r][c + 1] : -1);\n                minC2[r][c] = min(r > 0 ? minC2[r - 1][c] : -1, c < col - 1 ? minC2[r][c + 1] : -1);\n                maxR2[r][c] = max(r > 0 ? maxR2[r - 1][c] : -1, c < col - 1 ? maxR2[r][c + 1] : -1);\n                maxC2[r][c] = max(r > 0 ? maxC2[r - 1][c] : -1, c < col - 1 ? maxC2[r][c + 1] : -1);\n                if (g[r][c] == 1) {\n                    if (minR2[r][c] == -1 || r < minR2[r][c])\n                        minR2[r][c] = r;\n                    if (minC2[r][c] == -1 || c < minC2[r][c])\n                        minC2[r][c] = c;\n                    if (maxR2[r][c] == -1 || r > maxR2[r][c])\n                        maxR2[r][c] = r;\n                    if (maxC2[r][c] == -1 || c > maxC2[r][c])\n                        maxC2[r][c] = c;\n                }\n            }\n        \n        int[][] minR3 = new int[row][col], minC3 = new int[row][col], maxR3 = new int[row][col], maxC3 = new int[row][col];\n        for (int r = 0; r < row; r++)\n            for (int c = 0; c < col; c++) {\n                minR3[r][c] = -1;\n                minC3[r][c] = -1;\n                maxR3[r][c] = -1;\n                maxC3[r][c] = -1;\n            }\n        for (int r = row - 1; r >= 0; r--)\n            for (int c = 0; c < col; c++) {\n                minR3[r][c] = min(r < row - 1 ? minR3[r + 1][c] : -1, c > 0 ? minR3[r][c - 1] : -1);\n                minC3[r][c] = min(r < row - 1 ? minC3[r + 1][c] : -1, c > 0 ? minC3[r][c - 1] : -1);\n                maxR3[r][c] = max(r < row - 1 ? maxR3[r + 1][c] : -1, c > 0 ? maxR3[r][c - 1] : -1);\n                maxC3[r][c] = max(r < row - 1 ? maxC3[r + 1][c] : -1, c > 0 ? maxC3[r][c - 1] : -1);\n                if (g[r][c] == 1) {\n                    if (minR3[r][c] == -1 || r < minR3[r][c])\n                        minR3[r][c] = r;\n                    if (minC3[r][c] == -1 || c < minC3[r][c])\n                        minC3[r][c] = c;\n                    if (maxR3[r][c] == -1 || r > maxR3[r][c])\n                        maxR3[r][c] = r;\n                    if (maxC3[r][c] == -1 || c > maxC3[r][c])\n                        maxC3[r][c] = c;\n                }\n            }\n        \n        int[][] minR4 = new int[row][col], minC4 = new int[row][col], maxR4 = new int[row][col], maxC4 = new int[row][col];\n        for (int r = 0; r < row; r++)\n            for (int c = 0; c < col; c++) {\n                minR4[r][c] = -1;\n                minC4[r][c] = -1;\n                maxR4[r][c] = -1;\n                maxC4[r][c] = -1;\n            }\n        for (int r = row - 1; r >= 0; r--)\n            for (int c = col - 1; c >= 0; c--) {\n                minR4[r][c] = min(r < row - 1 ? minR4[r + 1][c] : -1, c < col - 1 ? minR4[r][c + 1] : -1);\n                minC4[r][c] = min(r < row - 1 ? minC4[r + 1][c] : -1, c < col - 1 ? minC4[r][c + 1] : -1);\n                maxR4[r][c] = max(r < row - 1 ? maxR4[r + 1][c] : -1, c < col - 1 ? maxR4[r][c + 1] : -1);\n                maxC4[r][c] = max(r < row - 1 ? maxC4[r + 1][c] : -1, c < col - 1 ? maxC4[r][c + 1] : -1);\n                if (g[r][c] == 1) {\n                    if (minR4[r][c] == -1 || r < minR4[r][c])\n                        minR4[r][c] = r;\n                    if (minC4[r][c] == -1 || c < minC4[r][c])\n                        minC4[r][c] = c;\n                    if (maxR4[r][c] == -1 || r > maxR4[r][c])\n                        maxR4[r][c] = r;\n                    if (maxC4[r][c] == -1 || c > maxC4[r][c])\n                        maxC4[r][c] = c;\n                }\n            }\n        /*\n        for (int r = 0; r < row; r++) {\n            for (int c = 0; c < col; c++)\n                System.out.printf(\" %d\", minR4[r][c]);\n            System.out.println();\n        }\n        */\n        int ans = 7777;\n        //case 1\n        for (int r = 0; r < row - 1; r++)\n            for (int c = 0; c < col - 1; c++) {\n                int tmp = cal(minR1[r][col - 1], maxR1[r][col - 1], minC1[r][col - 1], maxC1[r][col - 1])\n                    + cal(minR3[r + 1][c], maxR3[r + 1][c], minC3[r + 1][c], maxC3[r + 1][c])\n                    + cal(minR4[r + 1][c + 1], maxR4[r + 1][c + 1], minC4[r + 1][c + 1], maxC4[r + 1][c + 1]);\n                ans = Math.min(ans, tmp);\n            }\n        //case 2\n        for (int r = 1; r < row; r++)\n            for (int c = 0; c < col - 1; c++) {\n                int tmp = cal(minR3[r][col - 1], maxR3[r][col - 1], minC3[r][col - 1], maxC3[r][col - 1])\n                    + cal(minR1[r - 1][c], maxR1[r - 1][c], minC1[r - 1][c], maxC1[r - 1][c])\n                    + cal(minR2[r - 1][c + 1], maxR2[r - 1][c + 1], minC2[r - 1][c + 1], maxC2[r - 1][c + 1]);\n                ans = Math.min(ans, tmp);\n            }\n        //case 3\n        for (int r1 = 0; r1 < row - 2; r1++)\n            for (int r2 = r1 + 1; r2 < row - 1; r2++) {\n                int minr = -1, maxr = -1, minc = -1, maxc = -1;\n                for (int r = r1 + 1; r <= r2; r++)\n                    for (int c = 0; c < col; c++)\n                        if (g[r][c] == 1) {\n                            if (minr == -1 || r < minr)\n                                minr = r;\n                            if (minc == -1 || c < minc)\n                                minc = c;\n                            if (maxr == -1 || r > maxr)\n                                maxr = r;\n                            if (maxc == -1 || c > maxc)\n                                maxc = c;\n                        }\n                int tmp = cal(minR1[r1][col - 1], maxR1[r1][col - 1], minC1[r1][col - 1], maxC1[r1][col - 1])\n                    + cal(minr, maxr, minc, maxc)\n                    + cal(minR3[r2 + 1][col - 1], maxR3[r2 + 1][col - 1], minC3[r2 + 1][col - 1], maxC3[r2 + 1][col - 1]);\n                ans = Math.min(ans, tmp);\n            }\n        //case 4\n        for (int r = 0; r < row - 1; r++)\n            for (int c = 0; c < col - 1; c++) {\n                int tmp = cal(minR1[row - 1][c], maxR1[row - 1][c], minC1[row - 1][c], maxC1[row - 1][c])\n                    + cal(minR2[r][c + 1], maxR2[r][c + 1], minC2[r][c + 1], maxC2[r][c + 1])\n                    + cal(minR4[r + 1][c + 1], maxR4[r + 1][c + 1], minC4[r + 1][c + 1], maxC4[r + 1][c + 1]);\n                ans = Math.min(ans, tmp);\n            }\n        //case 5\n        for (int r = 0; r < row - 1; r++)\n            for (int c = 1; c < col; c++) {\n                int tmp = cal(minR2[row - 1][c], maxR2[row - 1][c], minC2[row - 1][c], maxC2[row - 1][c])\n                    + cal(minR1[r][c - 1], maxR1[r][c - 1], minC1[r][c - 1], maxC1[r][c - 1])\n                    + cal(minR3[r + 1][c - 1], maxR3[r + 1][c - 1], minC3[r + 1][c - 1], maxC3[r + 1][c - 1]);\n                ans = Math.min(ans, tmp);\n            }\n        //case 6\n        for (int c1 = 0; c1 < col - 2; c1++)\n            for (int c2 = c1 + 1; c2 < col - 1; c2++) {\n                int minr = -1, maxr = -1, minc = -1, maxc = -1;\n                for (int r = 0; r < row; r++)\n                    for (int c = c1 + 1; c <= c2; c++)\n                        if (g[r][c] == 1) {\n                            if (minr == -1 || r < minr)\n                                minr = r;\n                            if (minc == -1 || c < minc)\n                                minc = c;\n                            if (maxr == -1 || r > maxr)\n                                maxr = r;\n                            if (maxc == -1 || c > maxc)\n                                maxc = c;\n                        }\n                int tmp = cal(minR1[row - 1][c1], maxR1[row - 1][c1], minC1[row - 1][c1], maxC1[row - 1][c1])\n                    + cal(minr, maxr, minc, maxc)\n                    + cal(minR2[row - 1][c2 + 1], maxR2[row - 1][c2 + 1], minC2[row - 1][c2 + 1], maxC2[row - 1][c2 + 1]);\n                ans = Math.min(ans, tmp);\n            }\n        return ans;\n    }\n}",
    "submit_ts": 1719114919.0
}