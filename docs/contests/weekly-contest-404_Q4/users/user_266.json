{
    "username": "InTiMiDaToR",
    "submission": "class Solution {\n    \n    // Here 10000 is maximum number of nodes in\n// given tree.\nvector<int> diameter;\n \n// The Function to do bfs traversal.\n// It uses iterative approach to do bfs\n// bfsUtil()\nint bfs(int init, vector<int> arr[], int n)\n{\n    // Initializing queue\n    queue<int> q;\n    q.push(init);\n \n    int visited[n + 1];\n    for (int i = 0; i <= n; i++) {\n        visited[i] = 0;\n        diameter[i] = 0;\n    }\n \n    // Pushing each node in queue\n    q.push(init);\n \n    // Mark the traversed node visited\n    visited[init] = 1;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int i = 0; i < arr[u].size(); i++) {\n            if (visited[arr[u][i]] == 0) {\n                visited[arr[u][i]] = 1;\n \n                // Considering weight of edges equal to 1\n                diameter[arr[u][i]] += diameter[u] + 1;\n                q.push(arr[u][i]);\n            }\n        }\n    }\n \n    // return index of max value in diameter\n    return int(max_element(diameter.begin(),\n                           diameter.end())\n               - diameter.begin());\n}\n \nint findDiameter(vector<int> arr[], int n)\n{\n    int init = bfs(1, arr, n);\n    int val = bfs(init, arr, n);\n    return diameter[val];\n}\n \n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1;\n        int m=edges2.size()+1;\n         vector<int> adj1[n + 1];\n         vector<int> adj2[m + 1];\n        \n        for(int i=0;i<edges1.size();i++)\n        {\n            int u=edges1[i][0];\n            int v=edges1[i][1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        \n         for(int i=0;i<edges2.size();i++)\n        {\n            int u=edges2[i][0];\n            int v=edges2[i][1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        diameter = vector<int> (n+10);\n        int di1= findDiameter(adj1,n);\n         diameter = vector<int> (m+10);\n        int di2= findDiameter(adj2,m);\n        \n        int a= di1/2;\n        int b= di1/2+di1%2;\n        int c= di2/2;\n        int d= di2/2+di2%2;\n        \n        int ans=max(di1,di2);\n        \n        ans=max(ans,max(a+c+1,a+d+1));\n        ans=max(ans,max(b+c+1,b+d+1));\n        \n        return ans;\n        \n        \n    }\n};",
    "submit_ts": "1719717589",
    "subm_id": "1304395602"
}