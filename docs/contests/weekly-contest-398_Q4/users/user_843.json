{
    "username": "Erik_K",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        #r = current stair\n        #c = jump exponent\n        #j = can we go down or no\n        @lru_cache\n        def dfs(r,c,j):\n            print(r,c,j)\n            if r > k+1 or (r==k+1 and j==0): #if we are above k, and c > 1 \n                print(\"base case!\")\n                return 0 #then we will never make it back down\n            ans = 1 if r == k else 0\n            # if (r==k and c > 1)\n            if j == 1:\n                ans += dfs(r-1, c, 0)\n            ans += dfs(r + (1 << c), c+1, 1)\n            return ans\n        return dfs(1,0,1)\n        #dp[r][c] = what is the lowest stair we can reach, if we are on stair r, and jump is c?\n        # maybe add third dimension [j], can we go down or not? 0 if we can, 1 if we cannot \n        #k = 100000000\n        #1->0->1->0->2->1->5->4->12->11->27->26->58->57->125->124->...\n        #2?\n        #1->2\n        #1->0->1->0->2\n        #1->2->1->3->2\n        #1->0->1->3->2\n        #3?\n        #1->2->4->3\n        #1->0->1->3\n        #1->2->1->3\n        #1->",
    "submit_ts": 1716090013.0
}