{
    "username": "Knarf",
    "submission": "class Solution {\n    void update(int pos,int v,long[] arr) {\n        int n = arr.length;\n        while(pos<n) {\n            arr[pos] += v;\n            pos += lowbit(pos);\n        }\n    }\n\n    long query(int pos,long[] arr) {\n        long res = 0;\n        while(pos>0) {\n            res += arr[pos];\n            pos -= lowbit(pos);\n        }\n        return res;\n    }\n\n    int lowbit(int x) {\n        return x & (-x);\n    }\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        char[] ch = s.toCharArray();\n        int n = ch.length;\n        int m = queries.length;\n        int[] pre = new int[n+1];\n        for(int i=0;i<n;i++) pre[i+1] = pre[i]+((ch[i]=='0')?1:0);\n        // System.out.println(Arrays.toString(pre));\n        int[] last = new int[n];\n        int[] pos = new int[n];\n        long[] clast = new long[n+1];\n        long[] cpos = new long[n+1];\n        PriorityQueue<Integer> plast = new PriorityQueue<>((o1,o2)->Integer.compare(last[o2],last[o1]));\n        for(int i=0;i<n;i++) {\n            if((pre[n]-pre[i])<=k || (n-i-pre[n]+pre[i])<=k) continue;\n            int l = i+1,r = n-1;\n            while(l<r) {\n                int mid = l+(r-l)/2;\n                if(pre[mid+1]-pre[i]>k && (mid+1-i-pre[mid+1]+pre[i])>k) {\n                    r = mid;\n                } else {\n                    l = mid+1;\n                }\n            }   \n            last[i] = l;\n            update(i+1,n-l,clast);     \n            pos[i] = 1;\n            update(i+1,1,cpos);  \n            plast.add(i); \n        }\n        // System.out.println(Arrays.toString(last));\n        Integer[] p = new Integer[m];\n        long[] res = new long[m];\n        for(int i=0;i<m;i++) p[i] = i;\n        Arrays.sort(p,(o1,o2)->Integer.compare(queries[o2][1],queries[o1][1]));\n        for(int i=0;i<m;i++) {\n            int[] q = queries[p[i]];\n            while(plast.size()>0 && last[plast.peek()]>q[1]) {\n                int t = plast.poll();\n                update(t+1,-1,cpos);\n                pos[t] -=1;\n                update(t+1,last[t]-n,clast);\n            }\n            long t = query(q[1]+1,clast)-query(q[0],clast)-(long)(n-q[1]-1)*(query(q[1]+1,cpos)-query(q[0],cpos));\n            res[p[i]] = (long)(q[1]-q[0]+1)*(q[1]-q[0]+2)/2-t;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1723952558",
    "subm_id": "556412285"
}