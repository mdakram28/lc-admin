{
    "username": "hanzhoutang",
    "submission": "class Solution {\npublic:\n    int last_bit(int x) {\n        return x & (-x); \n    }\n    \n    int query(vector<int>& a, int i) {\n        int ret = 0; \n        for(;i;i-=last_bit(i)) {\n            ret += a[i]; \n        }\n        return ret; \n    }\n    \n    void update(vector<int>& a, int i, int delta) {\n        for(;i<a.size();i+=last_bit(i)) {\n            a[i] += delta; \n        }\n    }\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> a(nums.size() + 1); \n        vector<int> m(nums.size() + 1); \n        for(int i = 1;i + 1<nums.size();i++) {\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                m[i+1] = 1;\n                update(a, i + 1, 1); \n            }\n        }\n        vector<int> ret; \n        int cnt = 0; \n        for(auto& q : queries) {\n            //cout<<cnt++<<endl;\n            int t = q[0]; \n            if(t == 1) {\n                int l = q[1]; \n                int r = q[2]; \n                int ans = query(a, r + 1) - query(a, l + 1);\n                if (r > l) {\n                    ans -= m[r+1]; \n                }\n                ret.push_back(ans); \n            } else {\n                int i = q[1]; \n                int v = q[2]; \n                nums[i] = v; \n                int j = q[1]; \n                if(j > 0 && j + 1 < nums.size()) {\n                    if (nums[j] > nums[j-1] && nums[j] > nums[j+1]){\n                        int delta = 1 - m[j + 1]; \n                        update(a, j + 1, delta); \n                        m[j + 1] = 1;  \n                } else {\n                        int delta = 0 - m[j+1]; \n                        update(a, j + 1, delta); \n                        m[j + 1] = 0; \n                    }\n                \n                }\n                j = q[1] - 1; \n                if(j > 0 && j + 1 < nums.size()) {\n                    if (nums[j] > nums[j-1] && nums[j] > nums[j+1]){\n                        int delta = 1 - m[j + 1]; \n                        update(a, j + 1, delta); \n                        m[j + 1] = 1;  \n                } else {\n                        int delta = 0 - m[j+1]; \n                        update(a, j + 1, delta); \n                        m[j + 1] = 0; \n                    }\n                \n                }\n                                \n                j = q[1] + 1; \n                if(j > 0 && j + 1 < nums.size()) {\n                    if (nums[j] > nums[j-1] && nums[j] > nums[j+1]){\n                        int delta = 1 - m[j + 1]; \n                        update(a, j + 1, delta); \n                        m[j + 1] = 1;  \n                } else {\n                        int delta = 0 - m[j+1]; \n                        update(a, j + 1, delta); \n                        m[j + 1] = 0; \n                    }\n                \n                }\n            }\n        }\n        //cout<<\"bele\"<<endl;\n        \n        // for(int i = 1;i<=nums.size();i++) {\n        //     cout<<m[i]<<\" \";\n        // }\n        // cout<<endl;\n        \n        \n        return ret; \n        \n    }\n};",
    "submit_ts": "1718507690",
    "subm_id": "1289659491"
}