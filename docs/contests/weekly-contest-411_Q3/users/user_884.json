{
    "username": "Dyuthi_Vivek",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1:\n            return \"9\" * n\n        if k == 2:\n            if n == 1:\n                return \"8\"\n            return \"8\" + \"9\" * (n - 2) + \"8\"\n        elif k == 3:\n            return \"9\" * n\n        elif k == 4:\n            if n < 5:\n                return \"8\" * n\n            return \"88\" + \"9\" * (n - 4) + \"88\"\n        elif k == 5:\n            if n == 1:\n                return \"5\"\n            return \"5\" + \"9\" * (n - 2) + \"5\"\n        elif k == 6:\n            if n < 3:\n                return \"6\" * n\n            if n % 2:\n                return \"8\" + \"9\"*(n//2 - 1)  + \"8\" + \"9\"*(n//2 - 1) + \"8\"\n            else:\n                return \"8\" + \"9\"*(n//2 - 2) + \"77\" + \"9\"*(n//2 - 2) + \"8\"\n        elif k == 8:\n            if n < 7:\n                return \"8\" * n\n            return \"888\" + \"9\" * (n - 6) + \"888\"\n        elif k == 9:\n            return \"9\" * n\n        \n        def create_palindrome_str(half: str, odd_length: bool) -> str:\n            if odd_length:\n                return half + half[:-1][::-1]  # Mirror except the middle digit\n            else:\n                return half + half[::-1]       # Mirror fully\n\n        def is_divisible_by_k(num_str: str, k: int) -> bool:\n            num = 0\n            for digit in num_str:\n                num = (num * 10 + int(digit)) % k  # Perform modulo at each step\n            return num == 0 \n\n        def decrement_string(num_str: str) -> str:\n            num_list = list(num_str)\n            i = len(num_list) - 1\n            while i >= 0:\n                if num_list[i] == '0':\n                    num_list[i] = '9'\n                else:\n                    num_list[i] = chr(ord(num_list[i]) - 1)\n                    break\n                i -= 1\n            return ''.join(num_list).lstrip('0') or '0'\n        \n        half_length = (n + 1) // 2\n        largest_half = '9' * half_length  # The largest possible half, all 9's\n\n        while largest_half:\n            half_str = largest_half\n            palindrome_str = create_palindrome_str(half_str, n % 2 != 0)\n            if is_divisible_by_k(palindrome_str, 7):\n                return palindrome_str\n            largest_half = decrement_string(largest_half)\n        \n        return \"-1\"\n",
    "submit_ts": "1723952851",
    "subm_id": "1359806215"
}