{
    "username": "DrunkTemplar",
    "submission": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        from sortedcontainers import SortedList\n        \n        class SEG:\n            def __init__(self, n):\n                self.n = n\n                self.tree = [0] * 2 * self.n\n\n            def query(self, l, r): ## interval [l,r)\n                l += self.n\n                r += self.n\n                ans = 0\n                while l < r:\n                    if l & 1:\n                        ans = max(ans, self.tree[l])\n                        l += 1\n                    if r & 1:\n                        r -= 1\n                        ans = max(ans, self.tree[r])\n                    l >>= 1\n                    r >>= 1\n                return ans\n\n            def update(self, i, val):\n                i += self.n\n                self.tree[i] = val\n                while i > 1:\n                    i >>= 1\n                    self.tree[i] = max(self.tree[i * 2], self.tree[i * 2 + 1])\n                    \n        max_value = max([x[1] for x in queries])\n        \n        seg_tree = SEG(max_value + 1)\n        \n        \n        \n        sorted_list = SortedList()\n        sorted_list.add(0)\n        \n        seg_tree.update(0,math.inf)\n        \n        def insert_val(x):\n            sorted_list.add(x)\n            index = sorted_list.bisect_left(x)\n            if index-1 >= 0:\n                curr = sorted_list[index-1]\n                seg_tree.update(curr,x-curr)\n            if index+1 < len(sorted_list):\n                next_val = sorted_list[index+1]\n                seg_tree.update(x,next_val-x)\n            else:\n                seg_tree.update(x,math.inf)\n            #sorted_list.add(x)\n        \n        ans = []\n        \n        for zeb in queries:\n            if zeb[0] == 1:\n                insert_val(zeb[1])\n            else:\n                x = zeb[1]\n                size = zeb[2]\n                if size > x:\n                    ans.append(False)\n                    continue\n                #print(0,x-size+1,seg_tree.query(0,x-size+1))\n                max_value = seg_tree.query(0,x-size+1)\n                if max_value >= size:\n                    ans.append(True)\n                else:\n                    ans.append(False)\n        # for x in range(10):\n        #     print(x,seg_tree.query(x,x+1))\n        # print(seg_tree.query(0,1))\n        # print(seg_tree.query(1,2))\n        # print(seg_tree.query(0,2))\n        return ans\n        \n\n",
    "submit_ts": "1716648968",
    "subm_id": "1267573705"
}