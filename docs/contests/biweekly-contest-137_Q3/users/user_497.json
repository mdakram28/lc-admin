{
    "username": "vinayakgupta2703",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Step 1: Collect the top 3 values from each row\n        vector<tuple<long long, int, int>> candidates; // Stores (value, row, col)\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < n; ++j) {\n                rowValues.emplace_back(board[i][j], j);\n            }\n            sort(rowValues.rbegin(), rowValues.rend()); // Sort in descending order\n            for (int k = 0; k < 3 && k < n; ++k) {\n                candidates.emplace_back(rowValues[k].first, i, rowValues[k].second);\n            }\n        }\n\n        // Step 2: Find the maximum sum of three numbers with different rows and columns\n        long long maxSum = LLONG_MIN;\n        int size = candidates.size();\n        for (int i = 0; i < size; ++i) {\n            for (int j = i + 1; j < size; ++j) {\n                for (int k = j + 1; k < size; ++k) {\n                    int r1 = get<1>(candidates[i]), c1 = get<2>(candidates[i]);\n                    int r2 = get<1>(candidates[j]), c2 = get<2>(candidates[j]);\n                    int r3 = get<1>(candidates[k]), c3 = get<2>(candidates[k]);\n                    \n                    // Ensure all rows and columns are different\n                    if (r1 != r2 && r1 != r3 && r2 != r3 && c1 != c2 && c1 != c3 && c2 != c3) {\n                        long long currentSum = get<0>(candidates[i]) + get<0>(candidates[j]) + get<0>(candidates[k]);\n                        maxSum = max(maxSum, currentSum);\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723907788",
    "subm_id": "1359124270"
}