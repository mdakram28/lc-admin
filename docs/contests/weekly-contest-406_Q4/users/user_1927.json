{
    "username": "saiharshith_17",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Sort cuts in descending order\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        long long totalCost = 0;\n        int hCuts = 1; // number of horizontal pieces\n        int vCuts = 1; // number of vertical pieces\n\n        int i = 0, j = 0;\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += static_cast<long long>(horizontalCut[i]) * vCuts;\n                hCuts++;\n                i++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[j]) * hCuts;\n                vCuts++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[i]) * vCuts;\n            hCuts++;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[j]) * hCuts;\n            vCuts++;\n            j++;\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720926238",
    "subm_id": "1320280109"
}