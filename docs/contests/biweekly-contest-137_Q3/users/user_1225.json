{
    "username": "Kumar Nikhil",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<int>> grid;\n        int m = board.size();\n        int n = board[0].size();\n        for(int i = 0; i < m; i++) {\n            vector<vector<int>> temp;\n            for(int j = 0; j < n; j++) {\n                temp.push_back({board[i][j], i, j});\n            }\n            sort(temp.begin(), temp.end());\n            int k = temp.size();\n            grid.push_back(temp[k - 1]);\n            grid.push_back(temp[k - 2]);\n            grid.push_back(temp[k - 3]);\n        }\n        long long ans = -1e16;\n        for(int i = 0; i < grid.size(); i++) {\n            int x1 = grid[i][1];\n            int y1 = grid[i][2];\n            for(int j = 0; j < grid.size(); j++) {\n                int x2 = grid[j][1];\n                int y2 = grid[j][2];\n                for(int k = 0; k < grid.size(); k++) {\n                    int x3 = grid[k][1];\n                    int y3 = grid[k][2];\n                    if(x1 != x2 && x1 != x3 && x2 != x3 && y2 != y3 && y1 != y2 && y1 != y3) {\n                        ans = max(ans, (ll)grid[i][0] + (ll)grid[j][0] + (ll)grid[k][0]);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723910008",
    "subm_id": "1359213892"
}