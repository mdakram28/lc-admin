{
    "username": "changeme",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        var used = new boolean[circles.length];\n        for (int i = 0; i < circles.length; i++) {\n            if (!used[i]) {\n                var res = dfs(X, Y, circles, i, used);\n                if (\n                        (res[0] && res[1]) ||\n                        (res[0] && res[3]) ||\n                        (res[1] && res[2]) ||\n                        (res[2] && res[3])\n                        ) {\n                    return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n\n    private boolean[] dfs(int x, int y, int[][] circles, int cur, boolean[] used) {\n        used[cur] = true;\n        // { up, down, left, right }\n        var res = new boolean[] {\n            circles[cur][1] + circles[cur][2] >= y,\n            circles[cur][1] - circles[cur][2] <= 0,\n            circles[cur][0] - circles[cur][2] <= 0,\n            circles[cur][0] + circles[cur][2] >= x\n        };\n        \n        for (int i = 0; i < circles.length; i++) {\n            if (!used[i] && circlesTouch(cur, i, circles)) {\n                var sub = dfs(x, y, circles, i, used);\n                res[0] |= sub[0]; \n                res[1] |= sub[1]; \n                res[2] |= sub[2]; \n                res[3] |= sub[3]; \n            }\n        }\n        \n        return res;\n    }\n\n    private boolean circlesTouch(int u, int v, int[][] circles) {\n        var c1 = circles[u];\n        var c2 = circles[v];\n        long d = \n                (long)(c1[0] - c2[0]) * (long)(c1[0] - c2[0])\n                + (long)(c1[1] - c2[1]) * (long)(c1[1] - c2[1]);\n        return d <= (long) (c1[2] + c2[2]) * (long) (c1[2] + c2[2]);\n    }\n}",
    "submit_ts": "1722136405",
    "subm_id": "1335733450"
}