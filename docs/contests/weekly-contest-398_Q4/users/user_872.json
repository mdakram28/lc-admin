{
    "username": "OneMore14",
    "submission": "use std::collections::{BTreeSet, HashMap};\n\n#[derive(Hash, Eq, PartialEq, Copy, Clone)]\nstruct Node {\n    pos: i64,\n    jump: i64,\n}\n\nimpl Solution {\n\n    fn dfs(now: Node, k: i64, map: &mut HashMap<Node, i32>) -> i32 {\n        if map.contains_key(&now) {\n            return map.get(&now).copied().unwrap();\n        }\n        let mut ans = 0;\n        if now.pos == k || now.pos == (k + 1) {\n            ans += 1;\n        }\n        if now.pos <= k {\n            let node1 = Node {\n                pos: now.pos + (1 << now.jump),\n                jump: now.jump + 1,\n            };\n            let node2 = Node {\n                pos: now.pos - 1 + (1 << now.jump),\n                jump: now.jump + 1,\n            };\n            ans += Solution::dfs(node1, k, map);\n            ans += Solution::dfs(node2, k, map);\n        }\n        map.insert(now, ans);\n        ans\n    }\n\n    pub fn ways_to_reach_stair(k: i32) -> i32 {\n        let k = k as i64;\n        if k == 0 {\n            return 2;\n        } else if k == 1 {\n            return 4;\n        }\n        let mut map = HashMap::new();\n        let first = Node { pos: 1, jump: 0 };\n        Solution::dfs(first, k, &mut map)\n    }\n}\n",
    "submit_ts": 1716089469.0
}