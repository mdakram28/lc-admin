{
    "username": "Konsept",
    "submission": "use std::collections::HashMap;\n\nstruct TrieNode {\n    children: HashMap<char, Box<TrieNode>>,\n    cost: i32,\n}\n\nimpl TrieNode {\n    fn new() -> Self {\n        TrieNode {\n            children: HashMap::new(),\n            cost: i32::MAX,\n        }\n    }\n}\n\nstruct Trie {\n    root: Box<TrieNode>,\n}\n\nimpl Trie {\n    fn new() -> Self {\n        Trie {\n            root: Box::new(TrieNode::new()),\n        }\n    }\n\n    fn insert(&mut self, word: &str, cost: i32) {\n        let mut node = &mut self.root;\n        for c in word.chars() {\n            node = node.children.entry(c).or_insert_with(|| Box::new(TrieNode::new()));\n        }\n        node.cost = i32::min(node.cost, cost);\n    }\n}\n\nimpl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n        let mut trie = Trie::new();\n        for (word, cost) in words.iter().zip(costs.iter()) {\n            trie.insert(word, *cost);\n        }\n\n        let n = target.len();\n        let mut dp = vec![i32::MAX; n + 1];\n        dp[0] = 0;\n\n        let target_chars: Vec<char> = target.chars().collect();\n        for i in 0..n {\n            if dp[i] == i32::MAX {\n                continue;\n            }\n            let mut node = &trie.root;\n            for j in i..n {\n                if let Some(next_node) = node.children.get(&target_chars[j]) {\n                    node = next_node;\n                    if node.cost != i32::MAX {\n                        dp[j + 1] = i32::min(dp[j + 1], dp[i] + node.cost);\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n\n        if dp[n] == i32::MAX { -1 } else { dp[n] }\n    }\n}",
    "submit_ts": "1720322883",
    "subm_id": "1312361598"
}