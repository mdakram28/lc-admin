{
    "username": "sujalranaop",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <utility>\n\nclass Solution {\npublic:\n    int bfs(std::vector<std::vector<int>> &adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        std::queue<int> nodesQueue;\n        std::vector<int> visited(totalNodes + 4, 0);\n        nodesQueue.push(startNode);\n        visited[startNode] = 1;\n        \n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodesQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n    \n    bool canReachCorner(int width, int height, std::vector<std::vector<int>>& circlesData) {\n        std::vector<std::pair<std::pair<int, int>, int>> circles(circlesData.size());\n        std::vector<std::vector<int>> adjacencyList(circlesData.size() + 4);\n        int numberOfCircles = circlesData.size();\n        \n        for (int i = 0; i < numberOfCircles; ++i) {\n            circles[i].first.first = circlesData[i][0];\n            circles[i].first.second = circlesData[i][1];\n            circles[i].second = circlesData[i][2];\n        }\n        \n        for (int i = 0; i < numberOfCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjacencyList[numberOfCircles].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles);\n            }\n            if (width - circles[i].first.first <= circles[i].second) {\n                adjacencyList[numberOfCircles + 2].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjacencyList[numberOfCircles + 1].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 1);\n            }\n            if (height - circles[i].first.second <= circles[i].second) {\n                adjacencyList[numberOfCircles + 3].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 3);\n            }\n            for (int j = i + 1; j < numberOfCircles; ++j) {\n                double distanceBetweenCenters = std::sqrt(std::pow(circles[i].first.first - circles[j].first.first, 2) +\n                                                          std::pow(circles[i].first.second - circles[j].first.second, 2));\n                int sumOfRadii = circles[i].second + circles[j].second;\n                if (sumOfRadii >= distanceBetweenCenters) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n        \n        int isPathBlocked = 0;\n        isPathBlocked = std::max(isPathBlocked, bfs(adjacencyList, numberOfCircles, numberOfCircles + 1, numberOfCircles + 2, numberOfCircles + 4)); // Check for bottom-left corner\n        isPathBlocked = std::max(isPathBlocked, bfs(adjacencyList, numberOfCircles + 3, numberOfCircles + 2, numberOfCircles + 1, numberOfCircles + 4)); // Check for top-right corner\n        \n        if (isPathBlocked) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722136700",
    "subm_id": "1335742407"
}