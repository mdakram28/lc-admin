{
    "username": "lvrcek",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horcuts, vercuts = 0, 0\n        horizontal = [(-c, i) for i, c in enumerate(horizontalCut)]\n        vertical = [(-c, i) for i, c in enumerate(verticalCut)]\n        heapify(horizontal)\n        heapify(vertical)\n        cost = 0\n\n        if len(horizontal) > 0:\n            horc, horp = heappop(horizontal)\n            horc = -horc\n        else:\n            horc = -1\n        if len(vertical) > 0:\n            verc, verp = heappop(vertical)\n            verc = -verc\n        else:\n            verc = -1\n\n        while True:\n            if horc == -1 and verc == -1:\n                break\n            if horc > verc:\n                cost += horc * (vercuts + 1)\n                horcuts += 1\n                if len(horizontal) > 0:\n                    horc, horp = heappop(horizontal)\n                    horc = -horc\n                else:\n                    horc = -1\n            else:\n                cost += verc * (horcuts + 1)\n                vercuts += 1\n                if len(vertical) > 0:\n                    verc, verp = heappop(vertical)\n                    verc = -verc\n                else:\n                    verc = -1\n        return cost\n\n\n\n        ",
    "submit_ts": "1720925503",
    "subm_id": "1320256903"
}