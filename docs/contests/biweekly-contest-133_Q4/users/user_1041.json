{
    "username": "Navdeep1609",
    "submission": "class Solution {\npublic:\n    static const int POS_INV = 401;\n    const int MOD = 1e9 + 7;\n    // void printDP(long long dp[][POS_INV + 1], int n) {\n    //     cout << \"DP Table:\" << endl;\n    //     for (int i = 0; i <= n; ++i) {\n    //         for (int j = 0; j <= POS_INV; ++j) {\n    //             cout << dp[i][j] << \" \";\n    //         }\n    //         cout << endl;\n    //     }\n    //     cout << endl;\n    // }\n    void getRequirements(map<int, int>& requirementMap, const vector<vector<int>>& requirements) {\n        for (const auto& req : requirements) {\n            requirementMap[req[0] + 1] = req[1];\n        }\n    }\n\n    void updateDpTable(long long dp[][POS_INV + 1], int len) {\n        for (int inv = 0; inv <= POS_INV; ++inv) {\n            for (int pos = 0; pos < len; ++pos) {\n                int prevInv = inv - pos;\n                if (prevInv >= 0) {\n                    dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                }\n            }\n        }\n    }\n\n    void enforceRequirements(long long dp[][POS_INV + 1], int len, const map<int, int>& requirementMap) {\n        if (requirementMap.find(len) != requirementMap.end()) {\n            int requiredInv = requirementMap.at(len);\n            for (int inv = 0; inv <= POS_INV; ++inv) {\n                if (inv != requiredInv) {\n                    dp[len][inv] = 0;\n                }\n            }\n        }\n    }\n\n    long long calculateResult(long long dp[][POS_INV + 1], int n) {\n        long long result = 0;\n        for (int inv = 0; inv <= POS_INV; ++inv) {\n            result = (result + dp[n][inv]) % MOD;\n        }\n        return result;\n    }\n\n  \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        map<int, int> requirementMap;\n        getRequirements(requirementMap, requirements);\n\n        long long dp[n + 1][POS_INV + 1];\n        memset(dp, 0, sizeof(dp));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            updateDpTable(dp, len);\n            // printDP(dp, n);\n            enforceRequirements(dp, len, requirementMap);\n        }\n\n        return (int)(calculateResult(dp, n));\n    }\n};",
    "submit_ts": "1719071575",
    "subm_id": "1296849687"
}