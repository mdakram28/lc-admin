{
    "username": "raj_singh35",
    "submission": "class Solution {\npublic:\n    void build(int ind, int low, int high, vector<int> &arr , vector<int> &seg) {\n\t\tif (low == high) {\n            if(low == 0 || high + 1 == arr.size()){\n                seg[ind] = 0;\n                return ;\n            }\n\t\t\tseg[ind] = ((arr[low] > arr[low - 1]) && (arr[low] > arr[low + 1]));\n\t\t\treturn;\n\t\t}\n\n\t\tint mid = (low + high) / 2;\n\t\tbuild(2 * ind + 1, low, mid, arr , seg);\n\t\tbuild(2 * ind + 2, mid + 1, high, arr , seg);\n\t\tseg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n\t}\n\n\tint query(int ind, int low, int high, int l, int r , vector<int> &seg) {\n\t\tif (r < low || high < l) return 0;\n\t\tif (low >= l && high <= r) return seg[ind];\n\n\t\tint mid = (low + high) >> 1;\n\t\tint left = query(2 * ind + 1, low, mid, l, r , seg);\n\t\tint right = query(2 * ind + 2, mid + 1, high, l, r , seg);\n\t\treturn left + right;\n\t}\n\tvoid update(int ind, int low, int high, int i , vector<int> &arr , vector<int> &seg) {\n\t\tif (low == high) {\n\t\t\tif(low == 0 || low + 1 == arr.size()){\n                seg[ind] = 0;\n                return ;\n            }\n\t\t\tseg[ind] = ((arr[low] > arr[low - 1]) && (arr[low] > arr[low + 1]));\n            //cout << seg[ind] << \"\\n\";\n\t\t\treturn;\n\t\t}\n\t\tint mid = (low + high) >> 1;\n\t\tif (i <= mid) update(2 * ind + 1, low, mid, i, arr , seg);\n\t\telse update(2 * ind + 2, mid + 1, high, i , arr , seg);\n\t\tseg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n\t}\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n         int n = nums.size();\n         vector<int> seg(4 * n + 5);\n         build(0 , 0 , nums.size() - 1 , nums , seg);\n        vector<int> ans;\n        for(auto p : queries){\n            if(p[0] == 2){\n                nums[p[1]] = p[2];\n                update(0 , 0 , n - 1 , p[1] , nums , seg);\n                if(p[1] + 1 < n) update(0 , 0 , n - 1 , p[1] + 1 , nums , seg);\n                if(p[1] - 1 >= 0) update(0 , 0 , n - 1 , p[1] - 1  , nums , seg);\n            }\n            else{\n                int cal = query(0 , 0 , n - 1 , p[1] , p[2] , seg);\n                if(p[1] - 1 >= 0 && p[1] + 1 < n){\n                    if(nums[p[1]] > nums[p[1] - 1] && nums[p[1]] > nums[p[1] + 1]) cal--;\n                }\n                if(p[1] != p[2] && p[2] - 1 >= 0 && p[2] + 1 < n){\n                    if(nums[p[2]] > nums[p[2] - 1] && nums[p[2]] > nums[p[2] + 1]) cal--;\n                }\n                ans.push_back(cal);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507818.0
}