{
    "username": "AtulKeshari",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> graph1, graph2;\n\n    pair<int, int> bfs(const vector<vector<int>>& graph, int start) {\n        int n = graph.size();\n        vector<int> distance(n, -1);\n        queue<int> q;\n        q.push(start);\n        distance[start] = 0;\n        int farthestNode = start;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : graph[node]) {\n                if (distance[neighbor] == -1) {\n                    distance[neighbor] = distance[node] + 1;\n                    q.push(neighbor);\n                    if (distance[neighbor] > distance[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return make_pair(distance[farthestNode], farthestNode);\n    }\n\n    int calculateDiameter(const vector<vector<int>>& graph) {\n        auto lambdaBfs = [&](const vector<vector<int>>& g, int start) {\n            return bfs(g, start);\n        };\n\n        pair<int, int> firstBfsResult = lambdaBfs(graph, 0);\n        pair<int, int> secondBfsResult = lambdaBfs(graph, firstBfsResult.second);\n        return secondBfsResult.first;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        graph1.resize(n);\n        graph2.resize(m);\n\n        auto buildGraph = [&](const vector<vector<int>>& edges, vector<vector<int>>& graph) {\n            for (const auto& edge : edges) {\n                graph[edge[0]].push_back(edge[1]);\n                graph[edge[1]].push_back(edge[0]);\n            }\n        };\n\n        buildGraph(edges1, graph1);\n        buildGraph(edges2, graph2);\n\n        int diameter1 = calculateDiameter(graph1), diameter2 = calculateDiameter(graph2);\n\n        auto calculateMergeDiameter = [](int d1, int d2) {\n            return max(d1, max(d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1));\n        };\n\n        return calculateMergeDiameter(diameter1, diameter2);\n    }\n};",
    "submit_ts": 1719717441.0
}