{
    "username": "ajaychovatiya307",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int target) {\n        int n = nums.size();\n        long long result = 0;\n        long long currentPrefix = (1LL << 32) - 1; // Initialize with all bits set to 1\n        vector<long long> prefixCount(32, 0); // To count occurrences of each bit position\n        \n        for (int i = 0; i < n; ++i) {\n            currentPrefix &= nums[i]; // Update current prefix with AND operation\n            bool valid = true;\n            long long subarrayCount = i + 1; // Number of subarrays ending at index i\n            long long maxPrefixCount = 0; // Maximum count of a bit position in current subarray\n            \n            for (int j = 0; j < 32; ++j) {\n                // Update prefix count for each bit position\n                if (nums[i] & (1 << j)) {\n                    prefixCount[j]++;\n                } else {\n                    prefixCount[j] = 0;\n                }\n                \n                // Check conditions based on bit positions\n                bool isDesiredBitSet = target & (1 << j);\n                bool isCurrentBitSet = currentPrefix & (1 << j);\n                \n                if (!isDesiredBitSet && isCurrentBitSet) {\n                    valid = false;\n                } else if (isDesiredBitSet && !isCurrentBitSet) {\n                    subarrayCount = min(subarrayCount, prefixCount[j]);\n                } else if (!isDesiredBitSet && !isCurrentBitSet) {\n                    maxPrefixCount = max(maxPrefixCount, prefixCount[j]);\n                }\n            }\n            \n            // If all conditions are satisfied, count valid subarrays\n            if (valid) {\n                if (maxPrefixCount < subarrayCount) {\n                    result += (subarrayCount - maxPrefixCount);\n                }\n            }\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": "1720280597",
    "subm_id": "1311795276"
}