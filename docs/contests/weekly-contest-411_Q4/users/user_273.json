{
    "username": "Jiahao",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        \n        pre0 = [0] * n\n        pre1 = [0] * n\n        pre0[0] = int(s[0] == '0')\n        pre1[0] = int(s[0] == '1')\n        for i in range(1, n):\n            pre0[i] = pre0[i - 1] + int(s[i] == '0')\n            pre1[i] = pre1[i - 1] + int(s[i] == '1')\n        \n        # print(\"pre0: {}\\npre1: {}\".format(pre0, pre1))\n\n        sub = []\n        for i in range(n):\n            p0 = bisect.bisect_right(pre0, k + (0 if i == 0 else pre0[i - 1]), i)\n            p1 = bisect.bisect_right(pre1, k + (0 if i == 0 else pre1[i - 1]), i)\n            sub.append((max(p0 - i, p1 - i), i))\n        \n        pre = [0] * n\n        pre[0] = sub[0][0]\n        for i in range(1, n):\n            pre[i] = sub[i][0] + pre[i - 1]\n        \n        # print(\"sub: {}\\npre: {}\".format(sub, pre))\n\n        m = len(queries)\n        res = [0] * m\n        for i, (left, right) in enumerate(queries):\n            p = bisect.bisect(sub, 0, left, right + 1, key=lambda s: s[0] - (right + 1 - s[1]))\n            x = 0 if p <= left else pre[p - 1] - (0 if left == 0 else pre[left - 1])\n            y = (right + 1 - p) * (right + 2 - p) // 2\n            res[i] = x + y\n            # print(\"query: [{}, {}] p: {} x: {} y: {} res: {}\".format(left, right, p, x, y, res[i]))\n\n        return res\n        \n",
    "submit_ts": "1723952692",
    "subm_id": "1359802311"
}