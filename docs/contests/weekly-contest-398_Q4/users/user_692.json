{
    "username": "hemant46",
    "submission": "class Solution {\n    private Map<Integer, int[][]> dp;\n    public int waysToReachStair(int k) {\n        dp = new HashMap<>();\n        return waysToReachMemoization(k, 1, 0, true);\n    }\n    \n    private int waysToReachMemoization(int k, int i, int jump, boolean isPossible) {\n        if (i > k + 5) {\n            return 0;\n        }\n\n        if (jump > 31) {\n            return 0;\n        }\n        \n        // we are chechking if ans is already calculated then we will simply return from here\n        if (dp.containsKey(i) && dp.get(i)[jump][isPossible ? 1 : 0] != -1) {\n            return dp.get(i)[jump][isPossible ? 1 : 0];\n        }\n\n        int ans = (i == k) ? 1 : 0;\n        if (isPossible) {\n            ans += waysToReachMemoization(k, i - 1, jump, false);\n        }\n        if (i + (1 << jump) <= k + 1) {\n            ans += waysToReachMemoization(k, i + (1 << jump), jump + 1, true);\n        }\n\n        dp.computeIfAbsent(i, key -> {\n            int[][] arr = new int[32][2];\n            for (int[] row : arr) {\n                Arrays.fill(row, -1);\n            }\n            return arr;\n        });\n\n        dp.get(i)[jump][isPossible ? 1 : 0] = ans;\n        return ans;\n    }\n}",
    "submit_ts": "1716089612",
    "subm_id": "1261846859"
}