{
    "username": "vibrant-mendeldcf",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n=len(edges)+1\n        g=[[] for _ in range(n)]\n        for a,b in edges:\n            g[a].append(b)\n            g[b].append(a)\n        down1 = [0] * n  # \u5411\u4e0b\u6700\u5927\u6df1\u5ea6\n        down2 = [0] * n  # \u5411\u4e0b\u6b21\u5927\u6df1\u5ea6\n        up = [0] * n  # \u5411\u4e0a\u6700\u5927\u6df1\u5ea6\n        need1 = [0] * n  # \u5411\u4e0b\u6700\u5927\u6df1\u5ea6\u7684\u513f\u5b50\u8282\u70b9\n        need2 = [0] * n  # \u5411\u4e0b\u6b21\u5927\u6df1\u5ea6\u7684\u513f\u5b50\u8282\u70b9\n        # x\u5411\u4e0b\u6700\u5927\u6df1\u5ea6 = y\u5411\u4e0b\u6700\u5927\u6df1\u5ea6 + dis  \u7531\u5b50\u8282\u70b9\u51b3\u5b9a \u7531y\u66f4\u65b0x \u5373y->x\n        def dfs1(x, fa):  # \u8fd4\u56de\u4ee50\u4e3a\u6839 x\u7684\u6700\u5927\u6df1\u5ea6\n            for y in g[x]:\n                dis=1+int(y%2==0)\n                if y != fa:\n                    sub = dfs1(y, x)\n                    if sub + dis > down1[x]:\n                        down1[x], down2[x] = sub + dis, down1[x]\n                        need1[x], need2[x]= y ,need1[x]\n                    elif sub + dis > down2[x]:\n                        down2[x] = sub + dis\n                        need2[x] = y\n            return down1[x]\n        # y\u5411\u4e0a\uff08\u53cd\u5411\uff09\u7684\u6700\u5927\u6df1\u5ea6 = x\u5411\u4e0a\u6700\u5927\u6df1\u5ea6 + dis , x\u5411\u4e0b\u6b21\u5927\u6df1\u5ea6 + dis\uff08y\u662fx\u6700\u5927\u6df1\u5ea6\u5fc5\u7ecf\u70b9\uff09 , x\u5411\u4e0b\u6700\u5927\u6df1\u5ea6 + 1\uff08y\u4e0d\u662fx\u6700\u5927\u6df1\u5ea6\u5fc5\u7ecf\u70b9\uff09\n        # \u7531\u7236\u8282\u70b9\u51b3\u5b9a \u7531x\u66f4\u65b0y \u5373x->y\n        def dfs2(x, fa):\n            for y in g[x]:\n                dis=1+int(x%2==0)\n                if y != fa:\n                    up[y] = up[x] + dis\n                    if need1[x] != y:\n                        up[y] = max(up[y], down1[x] + dis)\n                    if need2[x] != y:\n                        up[y] = max(up[y], down2[x] + dis)\n                    dfs2(y, x)\n            return up[x]\n        dfs1(0,-1)\n        dfs2(0,-1)\n        # print(down1)\n        # print(down2)\n        # print(up)\n        time=[max(u,d) for u,d in zip(down1,up)]\n        return time\n",
    "submit_ts": "1722699910",
    "subm_id": "552277657"
}