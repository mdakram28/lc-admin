{
    "username": "anithaguntreddi07",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        const int MOD = 1e9 + 7;\n        // Initialize the dp table with -1 (indicating uncomputed states)\n        dp = vector<vector<vector<int>>>(n, vector<vector<int>>(51, vector<int>(51, -1)));\n\n        int result = 0;\n\n        // Start the recursion from the first index with no previous values (-1, -1)\n        for (int a1 = 0; a1 <= nums[0]; ++a1) {\n            int b1 = nums[0] - a1;\n            result = (result + countValidSequences(nums, 1, a1, b1, n, MOD)) % MOD;\n        }\n\n        return result;\n    }\n\nprivate:\n    vector<vector<vector<int>>> dp;\n\n    int countValidSequences(const vector<int>& nums, int index, int prev_a, int prev_b, int n, int MOD) {\n        if (index == n) return 1;\n\n        if (dp[index][prev_a][prev_b] != -1) {\n            return dp[index][prev_a][prev_b];\n        }\n\n        int count = 0;\n\n        // Try all possible values for arr1[index]\n        for (int ai = prev_a; ai <= nums[index]; ++ai) {\n            int bi = nums[index] - ai;\n\n            if (bi <= prev_b) {\n                count = (count + countValidSequences(nums, index + 1, ai, bi, n, MOD)) % MOD;\n            }\n        }\n\n        // Memoize the result for the current state\n        dp[index][prev_a][prev_b] = count;\n        return count;\n    }\n};",
    "submit_ts": "1723344490",
    "subm_id": "1351535648"
}