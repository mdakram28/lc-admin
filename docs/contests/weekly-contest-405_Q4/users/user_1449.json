{
    "username": "fahadrashid507",
    "submission": "class Solution {\npublic:\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices; // pair of (word index, cost)\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back({index, cost});\n    }\n};\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i, costs[i]);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        \n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) break;\n            node = node->children[target[j]];\n            for (auto& [index, cost] : node->wordIndices) {\n                int wordLen = words[index].size();\n                dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323923",
    "subm_id": "1312387353"
}