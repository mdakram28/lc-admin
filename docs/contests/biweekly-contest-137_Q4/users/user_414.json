{
    "username": "Kivinsae Fang",
    "submission": "#include <stdlib.h>\n#include <stdbool.h>\n#include <string.h>\n\ntypedef struct {\n    long long value;\n    int row;\n    int col;\n} Cell;\n\nint compare(const void* a, const void* b) {\n    long long diff = ((Cell*)b)->value - ((Cell*)a)->value;\n    if (diff > 0) return 1;\n    if (diff < 0) return -1;\n    return 0;\n}\n\nlong long maximumValueSum(int** board, int boardSize, int* boardColSize) {\n    int m = boardSize;\n    int n = boardColSize[0];\n    \n    Cell* cells = (Cell*)malloc(m * n * sizeof(Cell));\n    int cellCount = 0;\n    \n    for (int i = 0; i < m; i++) {\n        for (int j = 0; j < n; j++) {\n            cells[cellCount].value = board[i][j];\n            cells[cellCount].row = i;\n            cells[cellCount].col = j;\n            cellCount++;\n        }\n    }\n    \n    qsort(cells, cellCount, sizeof(Cell), compare);\n    \n    long long max_sum = -3000000000LL;  // -3 * 10^9\n    \n    bool* used_rows = (bool*)calloc(m, sizeof(bool));\n    bool* used_cols = (bool*)calloc(n, sizeof(bool));\n    \n    // \u5c1d\u8bd5\u4ece\u4e0d\u540c\u7684\u8d77\u59cb\u4f4d\u7f6e\u5f00\u59cb\n    for (int start = 0; start < 9 && start < cellCount; start++) {\n        // \u5c1d\u8bd5\u4e0d\u540c\u7684\u7b2c\u4e8c\u4e2a\u5143\u7d20\u4f4d\u7f6e\n        for (int second = start + 1; second < start + 10 && second < cellCount; second++) {\n            memset(used_rows, 0, m * sizeof(bool));\n            memset(used_cols, 0, n * sizeof(bool));\n            long long current_sum = 0;\n            int count = 0;\n            \n            // \u68c0\u67e5\u5e76\u6dfb\u52a0\u7b2c\u4e00\u4e2a\u5143\u7d20\n            int row = cells[start].row;\n            int col = cells[start].col;\n            current_sum += cells[start].value;\n            used_rows[row] = true;\n            used_cols[col] = true;\n            count++;\n            \n            // \u68c0\u67e5\u5e76\u6dfb\u52a0\u7b2c\u4e8c\u4e2a\u5143\u7d20\n            row = cells[second].row;\n            col = cells[second].col;\n            if (!used_rows[row] && !used_cols[col]) {\n                current_sum += cells[second].value;\n                used_rows[row] = true;\n                used_cols[col] = true;\n                count++;\n            }\n            \n            // \u5bfb\u627e\u7b2c\u4e09\u4e2a\u5143\u7d20\n            for (int i = second + 1; i < cellCount && count < 3; i++) {\n                row = cells[i].row;\n                col = cells[i].col;\n                \n                if (!used_rows[row] && !used_cols[col]) {\n                    current_sum += cells[i].value;\n                    count++;\n                    break;\n                }\n            }\n            \n            if (count == 3 && current_sum > max_sum) {\n                max_sum = current_sum;\n            }\n        }\n    }\n    \n    free(cells);\n    free(used_rows);\n    free(used_cols);\n    return max_sum;\n}",
    "submit_ts": "1723907803",
    "subm_id": "1359124950"
}