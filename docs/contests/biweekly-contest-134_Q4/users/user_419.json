{
    "username": "manii15",
    "submission": "using ll = long long;\nclass Solution {\npublic:\n    long long countSubarrays_helper(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> bits(n+1,vector<int>(32,0));\n        vector<vector<int>> bits0(n+1,vector<int>(32,0));\n        ll ans = 0LL;\n        int left = 0, cur_and = INT_MAX;\n        for(int i=0;i<n;i++){\n            cur_and &= nums[i];\n            for(int j=0;j<32;j++){\n                bits[i+1][j] = bits[i][j] + ((nums[i]>>j)&1); \n                bits0[i+1][j] = bits0[i][j] + (((nums[i]>>j)&1) > 0 ? 0 : 1);            \n            } \n            \n            while(cur_and < k and left < i){\n                for(int j=0;j<32;j++){\n                    if((cur_and>>j)&1){\n                        if( bits[left+1][j] == bits[i+1][j] ) cur_and &= (~(1<<j));\n                    }else{\n                        if( bits0[left+1][j] == bits0[i+1][j] ) cur_and |= (1<<j);\n                    }\n                }\n                left++;\n            }\n            \n            if(cur_and >=k ){\n                ans += i-left+1;\n            }\n        }\n        // cout << ans << endl;\n        return ans;\n    }\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        return countSubarrays_helper(nums,k) - countSubarrays_helper(nums,k+1);\n    }\n};",
    "submit_ts": "1720279766",
    "subm_id": "1311764238"
}