{
    "username": "resotto",
    "submission": "class Solution {\n    private int mod = (int) 1e9 + 7, n;\n    private Integer[][][] memo;\n    public int countOfPairs(int[] nums) {\n        n = nums.length;\n        memo = new Integer[n][52][52];\n        return dfs(nums, 0, 0, 51);\n    }\n    private int dfs(int[] nums, int i, int a, int b) {\n        if (i == n) {\n            return 1;\n        } else if (memo[i][a][b] == null) {\n            int ans = 0;\n            for (int j = 0; j <= 50; j++) {\n                if (a <= j && 0 <= nums[i] - j && nums[i]- j <= b) {\n                    ans = (ans + dfs(nums, i+1, j, nums[i] - j)) % mod;\n                }\n            }\n            // for (int j = a; 0 <= nums[i] - j && nums[i] - j <= b; j++) {\n            //     ans = (ans + dfs(nums, i+1, j, nums[i] - j)) % mod;\n            // }\n            // System.out.println(i + \",\" + a + \",\" + b + \",\" + ans);\n            memo[i][a][b] = ans;\n        }\n        return memo[i][a][b];\n    }\n}\n\n/*\n    1 <= N <= 2000\n    1 <= nums[i] <= 50\n\n    4 * 10^6 * 50 = 2 * 10^8\n*/",
    "submit_ts": "1723344992",
    "subm_id": "1351546349"
}