{
    "username": "RYUGA2112",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n       int mod = 1000000007;\n\n        sort(requirements.begin(), requirements.end());\n\n        int m = n * (n - 1) / 2;\n        \n        vector<vector<int>> dp(n + 1, vector<int>(m + 1, 0));\n        dp[0][0] = 1; \n\n        auto countInversions = [&](vector<int>& prefix) {\n            int cnt = 0;\n            int len = prefix.size();\n            for (int i = 0; i < len; ++i) {\n                for (int j = i + 1; j < len; ++j) {\n                    if (prefix[i] > prefix[j]) {\n                        cnt++;\n                    }\n                }\n            }\n            return cnt;\n        };\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j <= m; ++j) {\n                dp[i][j] = dp[i-1][j]; \n                if (j > 0) {\n                    dp[i][j] = (dp[i][j] + dp[i][j-1]) % mod; \n                }\n                if (j >= i) {\n                    dp[i][j] = (dp[i][j] - dp[i-1][j-i] + mod) % mod; \n                }\n            }\n            for (auto& req : requirements) {\n                int endi = req[0];\n                int cnti = req[1];\n                if (endi == i - 1) {\n                    for (int j = 0; j <= m; ++j) {\n                        if (j != cnti) {\n                            dp[i][j] = 0;\n                        }\n                    }\n                    break;\n                }\n            }\n        }\n        int result = 0;\n        for (int j = 0; j <= m; ++j) {\n            result = (result + dp[n][j]) % mod;\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": "1719070309",
    "subm_id": "1296819808"
}