{
    "username": "Pham Trung Dung",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(const vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        vector<pair<int, int>> cells;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                cells.emplace_back(i, j);\n            }\n        }\n        \n        sort(cells.begin(), cells.end(), [&](const auto& a, const auto& b) {\n            return board[a.first][a.second] > board[b.first][b.second];\n        });\n        \n        long long maxSum = LLONG_MIN;\n        vector<bool> usedRow(m), usedCol(n);\n        \n        function<void(int, int, long long)> dfs = [&](int index, int count, long long currSum) {\n            if (count == 3) {\n                maxSum = max(maxSum, currSum);\n                return;\n            }\n            \n            if (cells.size() - index < 3 - count) return;\n            \n            long long mx = currSum;\n            for (int i = 0; i < 3 - count && index + i < cells.size(); ++i) {\n                mx += board[cells[index+i].first][cells[index+i].second];\n            }\n            if (mx <= maxSum) return;\n            \n            for (int k = index; k < cells.size(); ++k) {\n                int i = cells[k].first;\n                int j = cells[k].second;\n                if (!usedRow[i] && !usedCol[j]) {\n                    usedRow[i] = usedCol[j] = true;\n                    dfs(k + 1, count + 1, currSum + board[i][j]);\n                    usedRow[i] = usedCol[j] = false;\n                }\n            }\n        };\n        \n        dfs(0, 0, 0);\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723908415",
    "subm_id": "1359151627"
}