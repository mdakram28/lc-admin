{
    "username": "megaspazz",
    "submission": "class Solution {\n    public int numberOfSubstrings(String s) {\n        // ArrayList<Record> lst = new ArrayList<>();\n        // int prev = -1;\n        // int consec = 0;\n        // for (char c : s.toCharArray()) {\n        //     if (c != prev) {\n        //         if (consec > 0) {\n        //             lst.add(new Group(prev, consec));\n        //             consec = 0;\n        //         }\n        //         prev = c;\n        //         consec = 1;\n        //     } else {\n        //         ++consec;\n        //     }\n        // }\n        // lst.add(new Group(prev, consec));\n//         for (int i = 0; i < lst.size(); ++i) {\n//             long zeros = 0;\n//             long ones = 0;\n//             for (int j = i; j < lst.size(); ++j) {\n                \n//             }\n//         }\n        \n        final int N = s.length();\n        final int[] next = new int[N];\n        next[N - 1] = N;\n        for (int i = N - 2; i >= 0; --i) {\n            if (s.charAt(i) != s.charAt(i + 1)) {\n                next[i] = i + 1;\n            } else {\n                next[i] = next[i + 1];\n            }\n        }\n        \n        \n        long ans = 0;\n        for (int i = 0; i < N; ++i) {\n            long zeros = 0;\n            long ones = 0;\n            int j = i;\n            while (zeros * zeros <= N && j < N) {\n                int nj = next[j];\n                int sz = nj - j;\n                if (s.charAt(j) == '0') {\n                    long tolerate = floorSqrt(ones) - zeros;\n                    if (tolerate > 0) {\n                        long add = Math.min(tolerate, sz);\n                        // System.out.format(\"[0] i = %d, j = %d, add = %d%n\", i, j, add);\n                        ans += add;\n                    }\n                    zeros += sz;\n                } else {\n                    long buffer = Math.max(0, zeros * zeros - ones - 1);\n                    long add = Math.max(0, sz - buffer);\n                    ans += add;\n                    // System.out.format(\"[1] i = %d, j = %d, add = %d%n\", i, j, add);\n                    ones += sz;\n                }\n                j = nj;\n            }\n        }\n        return (int) ans;\n    }\n    \n    record Group(int what, int count) {}\n\n\t/**\n\t * Returns floor(sqrt(x)).\n\t */\n\tpublic static long floorSqrt(long x) {\n\t\tlong s = (long) Math.sqrt(x);\n\t\tif (s * s > x) {\n\t\t\t--s;\n\t\t}\n\t\treturn s;\n\t}\n}",
    "submit_ts": "1722136044",
    "subm_id": "1335721962"
}