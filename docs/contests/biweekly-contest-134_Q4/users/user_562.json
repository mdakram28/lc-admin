{
    "username": "Vatsal_04V",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        int[][] fre = new int[n][32];\n        for(int i=0;i<n;i++){\n            if(i>0) for(int j=0;j<32;j++){\n                fre[i][j] += fre[i-1][j];\n            }\n            for(int j=0;j<32;j++){\n                if((nums[i]&(1<<j))!=0){\n                    fre[i][j]++;\n                }\n            }\n        }\n        long ans = 0;\n\n        for(int i=0;i<n;i++){\n            int l = 0, h = i;\n            int id = -1;\n            while (l <= h) {\n                int mid =  l+(h-l)/2;\n                boolean ok = solve(fre, mid, i) >= k;\n                if (ok) {\n                    id = mid;\n                    h = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n\n            l = 0;\n            h = i;\n            int id2 = -1;\n\n            while (l <= h) {\n                int mid = l+(h-l)/2;\n                boolean ok = solve(fre, mid, i) <= k;\n                if (ok) {\n                    id2 = mid;\n                    l = mid + 1;\n                } else {\n                    h = mid - 1;\n                }\n            }\n\n            if (id != -1) {\n                ans += (id2 - id + 1);\n            }\n        }\n        return ans;\n    }\n    \nstatic void merge(int arr[], int l, int m, int r) {\n    int n1 = m - l + 1;\n    int n2 = r - m;\n    int L[] = new int[n1];\n    int R[] = new int[n2];\n    for (int i = 0; i < n1; ++i)\n        L[i] = arr[l + i];\n    for (int j = 0; j < n2; ++j)\n        R[j] = arr[m + 1 + j];\n    int i = 0, j = 0;\n    int k = l;\n    while (i < n1 && j < n2) {\n        if (L[i] <= R[j]) {\n            arr[k] = L[i];\n            i++;\n        } else {\n            arr[k] = R[j];\n            j++;\n        }\n        k++;\n    }\n    while (i < n1) {\n        arr[k] = L[i];\n        i++;\n        k++;\n    }\n    while (j < n2) {\n        arr[k] = R[j];\n        j++;\n        k++;\n    }\n}\n\nstatic void sort(int arr[], int l, int r) {\n    if (l < r) {\n        int m = l + (r - l) / 2;\n        sort(arr, l, m);\n        sort(arr, m + 1, r);\n        merge(arr, l, m, r);\n    }\n}\n    public long solve(int[][] fre, int l, int r) {\n        if (r<l) return -1;\n        long ans = 0;\n        for (int i = 0; i < 30; i++) {\n            long cnt = fre[r][i];\n            if (l>0) {\n                cnt -= fre[l-1][i];\n            }\n            if (cnt==r-l+1) {\n                ans ^= (1L << i);\n            }\n            \n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1720278905",
    "subm_id": "1311729248"
}