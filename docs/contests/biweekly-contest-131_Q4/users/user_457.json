{
    "username": "harpreet1237",
    "submission": "\nstruct segtree {\n    int s;\n    vector<int> t;\n\n    // Function to initialize the segment tree with size n\n    void build(int n) {\n        s = n;\n        t = vector<int>(4 * n, 0);\n    }\n\n    // Function to perform point updates in the segment tree\n    void update(int v, int tl, int tr, int pos, int new_val) {\n        if (tl == tr) {\n            t[v] = new_val;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm) {\n                update(v * 2, tl, tm, pos, new_val);\n            } else {\n                update(v * 2 + 1, tm + 1, tr, pos, new_val);\n            }\n            t[v] = max(t[v * 2], t[v * 2 + 1]);\n        }\n    }\n\n    // Function to query the maximum value in the range [l, r]\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) return 0;\n        if (l == tl && tr == r) {\n            return t[v];\n        }\n        int tm = (tl + tr) / 2;\n        int left_query = query(v * 2, tl, tm, l, min(r, tm));\n        int right_query = query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);\n        return max(left_query, right_query);\n    }\n\n    // Public function to update a single position\n    void upd(int pos, int new_val) {\n        update(1, 0, s - 1, pos, new_val);\n    }\n\n    // Public function to query the maximum value in the range [l, r]\n    int qry(int l, int r) {\n        return query(1, 0, s - 1, l, r);\n    }\n};\nclass Solution {\n    \n\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n         \n        int m = min(5*10000,3*n); \n        segtree seg;\n        seg.build(3*m+1);\n        \n        vector<bool>ans;\n        set<int>blocks;\n        blocks.insert(0);\n      \n        for(int i=0;i<n;i++){\n            if(queries[i][0] == 1){\n                int x = queries[i][1];\n                auto lbb_i = blocks.lower_bound(x);\n                lbb_i--;\n                int lbb = *lbb_i;\n                \n                lbb_i++;\n                int ubb = -1;\n                if(lbb_i != blocks.end()){\n                    ubb = *lbb_i;\n                }\n                int alr = 0;\n                blocks.insert(x);\n                \n                seg.upd(x,(x-lbb)); \n                if(ubb != -1)seg.upd(ubb,(ubb-x));\n                \n                \n            }else{\n                int x = queries[i][1];\n                int sz = queries[i][2];\n                int av =seg.qry(0,x);\n                \n                if(blocks.find(x) != blocks.end()){\n                    \n                }else{\n                    auto lbb_i = blocks.lower_bound(x);\n                    lbb_i--;\n                    int lbb = *lbb_i;\n                    av = max(av,x-lbb);\n                }\n                ans.push_back((av >= sz));\n                \n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1716652575",
    "subm_id": "1267666675"
}