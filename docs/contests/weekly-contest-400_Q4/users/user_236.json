{
    "username": "aryangarg0729",
    "submission": "class Solution {\npublic:\n    class SegmentTree{\n    vector<long long>seg,lazy;\n    public:\n    SegmentTree(int n,int val){\n        seg.resize(4*n,val);\n        lazy.resize(4*n,val);\n    }\n    void build(vector<int>&nums,int ind,int low, int high){\n        if(low==high){\n            seg[ind] = nums[low];\n            return;\n        }\n        int mid = (low+high)/2;\n        build(nums,2*ind+1,low,mid);\n        build(nums,2*ind+2,mid+1,high);\n        seg[ind] =( seg[2*ind+1]&seg[2*ind+2]);\n    }\n    long long query(int ind,int low,int high,int l,int r){\n        // no overlap\n        if(l>high || r<low)return -1;\n\n        // complete overlap\n        if(low>=l && high<=r) return seg[ind];\n\n        // partial overlap\n        int mid = (low+high)/2;\n        long long left = query(2*ind+1,low,mid,l,r);\n        long long right = query(2*ind+2,mid+1,high,l,r);\n        return (left&right);\n    }\n};\n    int minimumDifference(vector<int>& nums, int k) {\n        SegmentTree seg(nums.size(),-1);\n        seg.build(nums,0,0,nums.size()-1);\n        \n        int s = 0,e = 0;\n        int ans = 1e9+1;\n        \n        while(e<nums.size()){\n            int nd = seg.query(0,0,nums.size()-1,s,e);\n            ans = min(abs(k-nd),ans);\n            if(nd<k){\n                s++;\n                if(s>e)e=s;\n            }else{\n                e++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297629",
    "subm_id": "1274749936"
}