{
    "username": "Jimmy",
    "submission": "class Solution {\npublic:\n    long long traverse(vector<vector<int>> &board, vector<vector<int>> &top3, int i, int k, vector<bool> &visited, long long cur) {\n        if (k == 0) {\n            return cur;\n        }\n        if (i >= top3.size()) {\n            return LLONG_MIN;\n        }\n        long long res = traverse(board, top3, i + 1, k, visited, cur);\n        for (int j=0; j<3; j++) {\n            if (visited[top3[i][j]]) continue;\n            visited[top3[i][j]] = true;\n            cur += board[i][top3[i][j]];\n            res = max(res, traverse(board, top3, i + 1, k - 1, visited, cur));\n            cur -= board[i][top3[i][j]];\n            visited[top3[i][j]] = false;\n        }\n        return res;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<vector<int>> top3(m);\n        for (int i=0; i<m; i++) {\n            for (int j=0; j<n; j++) {\n                top3[i].push_back(j);\n                if (top3[i].size() > 3) {\n                    sort(top3[i].begin(), top3[i].end(), [&](int a, int b) { return board[i][a] > board[i][b]; });\n                    top3[i].pop_back();\n                }\n            }\n        }\n        \n        vector<bool> visited(n, false);\n        return traverse(board, top3, 0, 3, visited, 0LL);\n    }\n};",
    "submit_ts": "1723908358",
    "subm_id": "1359149212"
}