{
    "username": "ttn628826",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(begin(horizontalCut), end(horizontalCut));\n        sort(begin(verticalCut), end(verticalCut));\n        long long hCnt = 1;\n        long long vCnt = 1;\n        long long ans = 0;\n        \n        while (size(horizontalCut) && size(verticalCut))\n        {\n            if (horizontalCut.back() > verticalCut.back())\n            {\n                //cout << \"h cut \" << horizontalCut.back() << \"\\n\";\n                \n                ans += vCnt * horizontalCut.back();\n                ++ hCnt;\n                horizontalCut.pop_back();\n            }\n            else\n            {\n                //cout << \"v cut \" << verticalCut.back() << \"\\n\";\n                ans += hCnt * verticalCut.back();\n                ++ vCnt;\n                verticalCut.pop_back();\n            }\n        }\n        \n        while (size(horizontalCut))\n        {\n            //cout << \"h cut  \" << horizontalCut.back() << \"\\n\";\n            ans += vCnt * horizontalCut.back();\n            ++ hCnt;\n            horizontalCut.pop_back();\n        }\n        \n        while (size(verticalCut))\n        {\n            //cout << \"v cut  \" << verticalCut.back() << \"\\n\";\n            ans += hCnt * verticalCut.back();\n            ++ vCnt;\n            verticalCut.pop_back();\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720925273",
    "subm_id": "1320249061"
}