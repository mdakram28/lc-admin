{
    "username": "gradesking",
    "submission": "typedef long long ll;\n\nll A[100000];\nll L[400100], R[400100], S[400100];\n\nvoid build_tree(ll p, ll l, ll r) {\n    L[p] = l;\n    R[p] = r;\n    if(l==r) {\n        S[p] = A[l];\n        return;\n    }\n    ll mid = (l + r) / 2;\n    build_tree(2*p, l, mid);\n    build_tree(2*p+1, mid+1, r);\n    S[p] = S[2*p] & S[2*p+1];\n}\n\nll get(ll p, ll l, ll r) {\n    if(L[p]==l && R[p]==r) return S[p];\n    ll mid = (L[p] + R[p]) / 2;\n    if(r<=mid) return get(2*p, l, r);\n    if(l>mid) return get(2*p+1, l, r);\n    return get(2*p, l, mid) & get(2*p+1, mid+1, r);\n}\n\nll Left[100000], Right[100000];\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        ll n = nums.size();\n        for(int i=0;i<n;++i) A[i] = nums[i];\n\n        build_tree(1, 0, n-1);\n\n        ll r = 0;\n        for(ll l=0;l<n;++l) {\n            r = max(l, r);\n            while(r<n && get(1, l, r) > k) r++;\n            Left[l] = r;\n        }\n\n        r = 0;\n        for(ll l=0;l<n;++l) {\n            r = max(l, r);\n            while(r<n && get(1,l,r) >= k) r++;\n            Right[l] = r;\n        }\n\n        ll ans = 0;\n        for(ll i=0;i<n;++i) ans += Right[i] - Left[i];\n\n        // for(int i=0;i<n;++i) {\n        //     cout<<Left[i]<<\" \"<<Right[i]<<endl;\n        // }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720277763",
    "subm_id": "544558621"
}