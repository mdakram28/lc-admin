{
    "username": "virinci",
    "submission": "static const int _ = []() {\n\tstd::ios::sync_with_stdio(false);\n\tstd::cin.tie(nullptr);\n\treturn 0;\n}();\n\nstruct FenwickTree {\n    vector<int> bit;  // binary indexed tree\n    int n;\n\n    FenwickTree(int n) {\n        this->n = n;\n        bit.assign(n, 0);\n    }\n\n\tFenwickTree(vector<int> const &a) : FenwickTree(a.size()){\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tbit[i] += a[i];\n\t\t\tint r = i | (i + 1);\n\t\t\tif (r < n) bit[r] += bit[i];\n\t\t}\n\t}\n\n    int sum(int r) {\n        int ret = 0;\n        for (; r >= 0; r = (r & (r + 1)) - 1)\n            ret += bit[r];\n        return ret;\n    }\n\n    int sum(int l, int r) {\n\t\tif (l > r) return 0;\n\t\tif (l <= 0) return sum(r);\n        return sum(r) - sum(l - 1);\n    }\n\n    void add(int idx, int delta) {\n        for (; idx < n; idx = idx | (idx + 1))\n            bit[idx] += delta;\n    }\n\n    int get(int idx) {\n\t\treturn sum(idx, idx);\n\t}\n\tvoid set(int idx, int value) {\n\t\tint delta = value - get(idx);\n\t\tadd(idx, delta);\n\t}\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n\t\tint n = ssize(nums);\n\t\tvector<int> a(n, 0);\n\t\tfor (int i = 1; i + 1 < n; ++i) {\n\t\t\tif (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n\t\t\t\ta[i] = 1;\n\t\t\t}\n\t\t}\n\n\t\tFenwickTree f(a);\n\t\tvector<int> ans;\n\n\t\tauto set = [&](int i) {\n\t\t\tif (i <= 0 || i >= n - 1) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tf.set(i, int(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]));\n\t\t};\n\n\t\tfor (int i = 0; i < ssize(queries); ++i) {\n\t\t\tif (queries[i][0] == 1) {\n\t\t\t\tans.emplace_back(f.sum(queries[i][1] + 1, queries[i][2] - 1));\n\t\t\t} else {\n\t\t\t\tauto idx = queries[i][1];\n\t\t\t\tauto value = queries[i][2];\n\t\t\t\tnums[idx] = value;\n\n\t\t\t\tset(idx - 1);\n\t\t\t\tset(idx);\n\t\t\t\tset(idx + 1);\n\t\t\t}\n\t\t}\n\t\treturn ans;\n    }\n};\n",
    "submit_ts": 1718507794.0
}