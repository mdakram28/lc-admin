{
    "username": "amsraman",
    "submission": "template <class B>\nstruct SparseTable : public B {\n    using T = typename B::T;\n    int n; vector<vector<T>> st;\n    SparseTable(vector<T> & a): n((int) a.size()), st(__lg(n) + 1, vector<T>(n, B::e)) {\n        for(int i = 0; i < n; i++) {\n            st[0][i] = a[i];\n        }\n        int lev = __lg(n);\n        for(int i = 1; i <= lev; i++) {\n            for(int j = 0; j < n; j++) {\n                st[i][j] = B::comb(st[i - 1][j], st[i - 1][min(n - 1, j + (1 << (i - 1)))]);\n            }\n        }\n    }\n    T qry(int l, int r) {\n        int lev = __lg(r - l + 1);\n        return B::comb(st[lev][l], st[lev][r - (1 << lev) + 1]);\n    }\n};\n\nstruct And {\n    using T = int;\n    const T e = INT_MAX;\n    T comb(T a, T b) {\n        return a & b;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = (int) nums.size();\n        SparseTable<And> st(nums);\n        vector<int> p1(n, -1), p2(n, -1); long long res = 0;\n        for(int i = 0; i < n; i++) {\n            if(i > 0) {\n                p1[i] = p1[i - 1], p2[i] = p2[i - 1];\n            }\n            while(p1[i] < i && st.qry(p1[i] + 1, i) < k) ++p1[i];\n            while(p2[i] < i && st.qry(p2[i] + 1, i) <= k) ++p2[i];\n            res += p2[i] - p1[i];\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720277103",
    "subm_id": "1311647846"
}