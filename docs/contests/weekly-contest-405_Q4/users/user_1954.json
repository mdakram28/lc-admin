{
    "username": "SauradipGhosh",
    "submission": "class Solution {\npublic:\n    \n    // Trie Node Definition\n    struct TrieNode {\n        TrieNode* children[26];\n        int minCost;\n        bool isEnd;\n\n        TrieNode() {\n            for (int i = 0; i < 26; ++i) {\n                children[i] = nullptr;\n            }\n            minCost = INT_MAX;\n            isEnd = false;\n        }\n    };\n\n    // Trie Class Definition\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        // Insert word with associated cost into Trie\n        void insert(string& word, int cost) {\n            TrieNode* curr = root;\n            for (char ch : word) {\n                int idx = ch - 'a';\n                if (!curr->children[idx]) {\n                    curr->children[idx] = new TrieNode();\n                }\n                curr = curr->children[idx];\n            }\n            curr->isEnd = true;\n            curr->minCost = min(curr->minCost, cost);\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); // dp[i] will store the minimum cost to construct target[0:i-1]\n        dp[0] = 0; // Base case: cost to construct an empty string is 0\n\n        Trie trie;\n        // Insert all words and their costs into Trie\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // Process each position in target\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue; // If it's not possible to construct target[0:i-1], skip\n            }\n\n            TrieNode* curr = trie.root;\n            for (int j = i; j < n; ++j) {\n                int idx = target[j] - 'a';\n                if (!curr->children[idx]) {\n                    break; // No match found in Trie\n                }\n                curr = curr->children[idx];\n                if (curr->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323994",
    "subm_id": "1312389073"
}