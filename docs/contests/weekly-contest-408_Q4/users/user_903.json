{
    "username": "Kushal1605",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int bfs(int[][] graph, int start, int dest1, int dest2, int nodes) {\n        Queue<Integer> bfs = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        bfs.offer(start);\n        visited[start] = true;\n\n        while (!bfs.isEmpty()) {\n            int u = bfs.poll();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    bfs.offer(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        \n        return (visited[dest1] || visited[dest2]) ? 1 : 0;\n    }\n\n    public boolean canReachCorner(int x, int y, int[][] circles) {\n        int n = circles.length;\n        int[][] graph = new int[n + 4][];\n        List<List<Integer>> list = IntStream.range(0, n + 4)\n                .mapToObj(i -> new ArrayList<Integer>())\n                .collect(Collectors.toList());\n\n\n        for (int i = 0; i < n; ++i) {\n            if (circles[i][0] <= circles[i][2]) {\n                list.get(n).add(i);\n                list.get(i).add(n);\n            }\n            if (x - circles[i][0] <= circles[i][2]) {\n                list.get(n + 2).add(i);\n                list.get(i).add(n + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                list.get(n + 1).add(i);\n                list.get(i).add(n + 1);\n            }\n            if (y - circles[i][1] <= circles[i][2]) {\n                list.get(n + 3).add(i);\n                list.get(i).add(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double dist = Math.sqrt(Math.pow(circles[i][0] - circles[j][0], 2) +\n                                            Math.pow(circles[i][1] - circles[j][1], 2));\n                int rad = circles[i][2] + circles[j][2];\n                if (rad >= dist) {\n                    list.get(i).add(j);\n                    list.get(j).add(i);\n                }\n            }\n        }\n\n        for (int i = 0; i < list.size(); i++) {\n            graph[i] = list.get(i).stream().mapToInt(Integer::intValue).toArray();\n        }\n\n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, n, n + 1, n + 2, n + 4));\n        isBlocked = Math.max(isBlocked, bfs(graph, n + 3, n + 2, n + 1, n + 4));\n\n        return isBlocked == 0;\n    }\n\n}\n",
    "submit_ts": "1722138914",
    "subm_id": "1335802975"
}