{
    "username": "neilchetty",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        List<Pair<Integer, Integer>> diff = new ArrayList<>();\n        List<Pair<Integer, Integer>> sum = new ArrayList<>();\n        int n = points.length;\n        for(int i = 0; i < n; i++) {\n            sum.add(new Pair<Integer, Integer>(points[i][0] + points[i][1], i));\n            diff.add(new Pair<Integer, Integer>(points[i][0] - points[i][1], i));\n        }\n        Collections.sort(sum, Comparator.comparingInt(a->a.getKey()));\n        Collections.sort(diff, Comparator.comparingInt(a->a.getKey()));\n        int min = Integer.MAX_VALUE;\n        for(int i = 0; i < n; i++) {\n            int l1 = 0, l2 = 0, r1 = n-1, r2 = n-1;\n            if(sum.get(0).getValue()==i) l1++;\n            if(diff.get(0).getValue()==i) l2++;\n            if(sum.get(n-1).getValue()==i) r1--;\n            if(diff.get(n-1).getValue()==i) r2--;\n            min = Math.min(min, Math.max(sum.get(r1).getKey() - sum.get(l1).getKey(), diff.get(r2).getKey() - diff.get(l2).getKey()));\n        }\n        return min;\n    }\n}"
}