{
    "username": "felixhuang07",
    "submission": "\ntemplate<class S, S (*e)(), S (*op)(S, S)>\nstruct segtree {\npublic:\n    segtree() {}\n    explicit segtree(int _n) : segtree(std::vector<S>(_n, e())) {}\n    explicit segtree(const std::vector<S>& a): n(a.size()) {\n        log = std::__lg(2 * n - 1);\n        size = 1 << log;\n        d.resize(size * 2, e());\n        for(int i = 0; i < n; ++i) {\n            d[size + i] = a[i];\n        }\n        for(int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n    \n    void set(int p, S val) {\n        assert(0 <= p && p < n);\n        p += size;\n        d[p] = val;\n        for(int i = 1; i <= log; ++i) {\n            update(p >> i);\n        }\n    }\n\n    S get(int p) const {\n        assert(0 <= p && p < n);\n        return d[p + size];\n    }\n\n    S operator[](int p) const { return get(p); }\n    \n    S prod(int l, int r) const {\n        assert(0 <= l && l <= r && r <= n);\n        S sml = e(), smr = e();\n        for(l += size, r += size; l < r; l >>= 1, r >>= 1) {\n            if(l & 1) {\n                sml = op(sml, d[l++]);\n            }\n            if(r & 1) {\n                smr = op(d[--r], smr);\n            }\n        }\n        return op(sml, smr);\n    }\n\n    S all_prod() const { return d[1]; }\n\n    template<bool (*f)(S)> int max_right(int l) {\n        return max_right(l, [](S x) { return f(x); });\n    }\n\n    template<class F> int max_right(int l, F f) {\n        assert(0 <= l && l <= n);\n        assert(f(e()));\n        if(l == n) {\n            return n;\n        }\n        l += size;\n        S sm = e();\n        do {\n            while(~l & 1) {\n                l >>= 1;\n            }\n            if(!f(op(sm, d[l]))) {\n                while(l < size) {\n                    push(l);\n                    l <<= 1;\n                    if(f(op(sm, d[l]))) {\n                        sm = op(sm, d[l++]);\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l++]);\n        } while((l & -l) != l);\n        return n;\n    }\n\n    template<bool (*f)(S)> int min_left(int r) {\n        return min_left(r, [](S x) { return f(x); });\n    }\n\n    template<class F> int min_left(int r, F f) {\n        assert(0 <= r && r <= n);\n        assert(f(e()));\n        if(r == 0) {\n            return 0;\n        }\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while(r > 1 && (r & 1)) {\n                r >>= 1;\n            }\n            if(!f(op(d[r], sm))) {\n                while(r < size) {\n                    push(r);\n                    r = 2 * r + 1;\n                    if(f(op(d[r], sm))) {\n                        sm = op(d[r--], sm);\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while((r & -r) != r);\n        return 0;\n    }\n    \nprotected:\n    int n, size, log;\n    std::vector<S> d;\n\n    void update(int v) {\n        d[v] = op(d[2 * v], d[2 * v + 1]);\n    }\n\n    virtual void push(int p) {}\n};\n\nstruct S {\n    int lft, lft2;\n    int rgt, rgt2;\n    // [lft2, lft, rgt, rgt2]\n    int sz = 0;\n    int cnt = 0;\n    \n    S() {}\n    \n    S(int x) : lft(x), rgt(x), sz(1) {\n        lft2 = -1;\n        rgt2 = -1;\n    }\n};\n\nS e() {\n    S res(-1);\n    res.sz = 0;\n    return res;\n}\n\nS op(S a, S b) {\n    if(a.sz == 0) return b;\n    if(b.sz == 0) return a;\n    \n    S res;\n    if(a.sz == 1 && b.sz == 1) {\n        res.lft2 = a.lft;\n        res.lft = b.lft;\n        res.rgt = a.lft;\n        res.rgt2 = b.lft;\n    } else if(a.sz != 1 && b.sz != 1) {\n        res.lft2 = a.lft2;\n        res.lft = a.lft;\n        res.rgt = b.rgt;\n        res.rgt2 = b.rgt2;\n    } else if(a.sz == 1) {\n        res.lft2 = a.lft;\n        res.lft = b.lft2;\n        res.rgt = b.rgt;\n        res.rgt2 = b.rgt2;\n    } else {\n        // b.sz == 1\n        res.lft2 = a.lft2;\n        res.lft = a.lft;\n        res.rgt = a.rgt2;\n        res.rgt2 = b.lft;\n    }\n    \n    res.cnt = a.cnt + b.cnt;\n    res.sz = a.sz + b.sz;\n    \n    int blft = (b.lft2 == -1 ? b.lft : b.lft2);\n    int argt = (a.rgt2 == -1 ? a.rgt : a.rgt2);\n    \n    if(a.sz > 1 && a.rgt < a.rgt2 && a.rgt2 > blft) {\n        res.cnt++;\n    }\n    if(b.sz > 1 && argt < b.lft2 && b.lft2 > b.lft) {\n        res.cnt++;\n    }\n    \n    return res;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        // S a(4), b(1), c(4), d(2), e(1);\n        // S res = op(op(a, b), op(c, op(d, e)));\n        // printf(\"%d %d %d %d %d %d\\n\", res.lft2, res.lft, res.rgt, res.rgt2, res.cnt, res.sz);\n        // return {};\n        vector<S> init;\n        for(auto x : nums) {\n            init.push_back(S(x));\n        }\n        segtree<S, e, op> seg(init);\n        vector<int> ans;\n        for(auto query : queries) {\n            int type = query[0];\n            int x = query[1];\n            int y = query[2];\n            if(type == 1) {\n                ans.push_back(seg.prod(x, y + 1).cnt);\n            } else {\n                seg.set(x, S(y));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507306.0
}