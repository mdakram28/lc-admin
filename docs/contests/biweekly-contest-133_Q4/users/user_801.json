{
    "username": "211220058",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    static const int MODULO = 1'000'000'007;\n    static const int MAX_INV = 400;\n\npublic:\n    int numberOfPermutations(int lengthOfArray, vector<vector<int>>& conditions) {\n        unordered_map<int, int> endIdxToInvCnt;\n        populateEndIdxToInvCnt(conditions, endIdxToInvCnt);\n\n        vector<vector<long long>> dp(lengthOfArray + 1, vector<long long>(MAX_INV + 1, 0));\n        computeDP(lengthOfArray, dp, endIdxToInvCnt);\n\n        return computeResult(dp, lengthOfArray);\n    }\n\nprivate:\n    void populateEndIdxToInvCnt(vector<vector<int>>& conditions, unordered_map<int, int>& endIdxToInvCnt) {\n        for (auto& req : conditions) {\n            endIdxToInvCnt[req[0] + 1] = req[1];\n        }\n    }\n\n    void computeDP(int lengthOfArray, vector<vector<long long>>& dp, unordered_map<int, int>& endIdxToInvCnt) {\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= lengthOfArray; ++length) {\n            for (int currentInv = 0; currentInv <= MAX_INV; ++currentInv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = currentInv - newPos;\n                    if (prevInv >= 0) {\n                        dp[length][currentInv] = (dp[length][currentInv] + dp[length - 1][prevInv]) % MODULO;\n                    }\n                }\n            }\n\n            if (endIdxToInvCnt.count(length) > 0) {\n                int reqInv = endIdxToInvCnt[length];\n                for (int currentInv = 0; currentInv <= MAX_INV; ++currentInv) {\n                    if (currentInv != reqInv) {\n                        dp[length][currentInv] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    int computeResult(vector<vector<long long>>& dp, int lengthOfArray) {\n        long long result = 0;\n        for (int currentInv = 0; currentInv <= MAX_INV; ++currentInv) {\n            result = (result + dp[lengthOfArray][currentInv]) % MODULO;\n        }\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070962.0
}