{
    "username": "tc543cornell",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        Map<Integer, Integer> zeros = new HashMap<>();\n        Map<Integer, Integer> twos = new HashMap<>();\n        for (int i = 0; i < nums.length / 2; i++){\n            zeros.put(Math.abs(nums[i] - nums[n-i-1]), zeros.getOrDefault(Math.abs(nums[i] - nums[n-i-1]), 0) + 1);\n            int two = 0;\n            if (nums[n-i-1] > nums[i]){\n                int v = Math.max(nums[n-i-1] - 0, k - nums[i]);\n                two = Math.max(two, v);\n            } else {\n                int v = Math.max(nums[i] - 0, k- nums[n-i-1]);\n                two = Math.max(two, v);\n            }\n            twos.put(two, twos.getOrDefault(two, 0) + 1);\n        }\n        // List<Integer> sorted = new ArrayList<>(twos.keySet());\n        // Collections.sort(sorted);\n        int ans = nums.length/2;\n        int twoInterval = 0;\n        for (int i = 0; i <= k; i++){\n            if (twos.containsKey(i-1)){\n                twoInterval += twos.get(i-1);\n            }\n            int total = nums.length/2;\n            if (zeros.containsKey(i)){\n                total -= zeros.get(i);\n            }\n            total += twoInterval;\n            ans = Math.min(ans, total);\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1721488704",
    "subm_id": "1327430657"
}