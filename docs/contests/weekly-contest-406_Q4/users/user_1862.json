{
    "username": "X7D309777",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort the cuts in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        h_idx = 0\n        v_idx = 0\n        total_cost = 0\n        \n        # Initial pieces of cake (one whole cake initially)\n        horizontal_pieces = 1\n        vertical_pieces = 1\n        \n        while h_idx < len(horizontalCut) and v_idx < len(verticalCut):\n            if horizontalCut[h_idx] > verticalCut[v_idx]:\n                # Make a horizontal cut\n                total_cost += horizontalCut[h_idx] * vertical_pieces\n                horizontal_pieces += 1\n                h_idx += 1\n            else:\n                # Make a vertical cut\n                total_cost += verticalCut[v_idx] * horizontal_pieces\n                vertical_pieces += 1\n                v_idx += 1\n                \n        # If there are remaining horizontal cuts\n        while h_idx < len(horizontalCut):\n            total_cost += horizontalCut[h_idx] * vertical_pieces\n            h_idx += 1\n            \n        # If there are remaining vertical cuts\n        while v_idx < len(verticalCut):\n            total_cost += verticalCut[v_idx] * horizontal_pieces\n            v_idx += 1\n        \n        return total_cost",
    "submit_ts": "1720926194",
    "subm_id": "1320278737"
}