{
    "username": "soumyajitchakraborty23",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.end_word_indices = []\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = TrieNode()\n        for idx, word in enumerate(words):\n            node = root\n            for ch in word:\n                if ch not in node.children:\n                    node.children[ch] = TrieNode()\n                node = node.children[ch]\n            node.end_word_indices.append(idx)  \n        \n       \n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  \n        heap = [(0, 0)]  \n\n        while heap:\n            curr_cost, start = heapq.heappop(heap)\n            \n            if dp[start] < curr_cost:\n                continue  \n            \n           \n            node = root\n            for end in range(start, n):\n                if target[end] in node.children:\n                    node = node.children[target[end]]\n                    for idx in node.end_word_indices:\n                        word_cost = curr_cost + costs[idx]\n                        if word_cost < dp[end + 1]:\n                            dp[end + 1] = word_cost\n                            heapq.heappush(heap, (word_cost, end + 1))\n                else:\n                    break  \n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720320840",
    "subm_id": "1312306053"
}