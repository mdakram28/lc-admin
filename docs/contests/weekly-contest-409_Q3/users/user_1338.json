{
    "username": "odinson776",
    "submission": "use std::collections::BTreeSet;\n\nimpl Solution {\n    pub fn shortest_distance_after_queries(total_nodes: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut distances = vec![0; total_nodes as usize];\n        let mut current_index = 1;\n        while current_index < total_nodes as usize {\n            distances[current_index] = distances[current_index - 1] + 1;\n            current_index += 1;\n        }\n\n        let mut available_nodes: BTreeSet<usize> = (0..total_nodes as usize).collect();\n        let mut results = Vec::new();\n\n        let mut query_index = 0;\n        while query_index < queries.len() {\n            let left_bound = queries[query_index][0] as usize;\n            let right_bound = queries[query_index][1] as usize;\n\n            let lower_bound = available_nodes.range(left_bound + 1..).next().cloned().unwrap_or(total_nodes as usize);\n            let upper_bound = available_nodes.range(right_bound..).next().cloned().unwrap_or(total_nodes as usize);\n\n            let mut nodes_to_remove = Vec::new();\n            let mut iter = available_nodes.range(left_bound + 1..right_bound);\n            while let Some(&node) = iter.next() {\n                nodes_to_remove.push(node);\n            }\n            let mut removal_index = 0;\n            while removal_index < nodes_to_remove.len() {\n                available_nodes.remove(&nodes_to_remove[removal_index]);\n                removal_index += 1;\n            }\n\n            results.push((available_nodes.len() as i32) - 1);\n            query_index += 1;\n        }\n\n        results\n    }\n}",
    "submit_ts": "1722743979",
    "subm_id": "1343804234"
}