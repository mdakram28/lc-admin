{
    "username": "Ethan Gu",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<multiset<pair<long long, int>>> row_maxes(m);\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                row_maxes[i].insert({board[i][j], j});\n            }\n        }\n        long long res = -1e10;\n        for (int i = 0; i < m; i++) {\n            pair<long long, int> cur_1 = *row_maxes[i].rbegin();\n            for (int j = 0; j < m; j++) {\n                if (i == j) {\n                    continue;\n                }\n                auto it = row_maxes[j].rbegin();\n                while ((*it).second == cur_1.second) {\n                    it++;\n                }\n                pair<long long, int> cur_2 = *it;\n                for (int k = 0; k < m; k++) {\n                    if (k == i || k == j) {\n                        continue;\n                    }\n                    it = row_maxes[k].rbegin();\n                    while ((*it).second == cur_1.second || (*it).second == cur_2.second) {\n                        it++;\n                    }\n                    pair<long long, int> cur_3 = *it;\n                    res = max(res, cur_1.first+cur_2.first+cur_3.first);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723907338",
    "subm_id": "1359102623"
}