{
    "username": "\u518d\u5237\u4e00\u9898",
    "submission": "impl Solution {\n    \n    pub fn maximum_value_sum(board: Vec<Vec<i32>>) -> i64 {\n        let mut pos = vec![];\n        let n = board[0].len();\n        for i in 0..board.len() {\n            let mut x: Vec<_> = (0..n).map(|j| (-board[i][j], j)).collect();\n            x.sort_unstable();\n            pos.push(x[..3].to_vec());\n        }\n        fn f(pos: &Vec<Vec<(i32, usize)>>, i: usize, v: &mut Vec<usize>, mut s: i64, ans: &mut i64) {\n            if i >= pos.len() {\n                return;\n            }\n            for j in 0..3 {\n                if !v.contains(&pos[i][j].1) {\n                    v.push(pos[i][j].1);\n                    s -= pos[i][j].0 as i64;\n                    if v.len() == 3 {\n                        *ans = s.max(*ans);\n                    } else {\n                        f(pos, i + 1, v, s, ans);\n                    }\n                    s += pos[i][j].0 as i64;\n                    v.pop();\n                }\n            }\n            f(pos, i+1, v, s, ans);\n        }\n        // println!(\"{:?}\", pos);\n        let mut ans = i64::MIN;\n        f(&pos, 0, &mut vec![], 0, &mut ans);\n        ans\n    }\n\n}",
    "submit_ts": "1723907689",
    "subm_id": "556326937"
}