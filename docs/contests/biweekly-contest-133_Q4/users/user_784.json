{
    "username": "parnniti",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        ios::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n        int k = n * (n - 1) / 2 + 1;\n        int dp[n + 1][k], prefixSums[k];\n        memset(dp, 0, sizeof(dp));\n        dp[0][0] = 1;\n\n        sort(requirements.begin(), requirements.end());\n        int m = requirements.size();\n        int reqIndex = 0;\n\n        for (int i = 1; i <= n; ++i) {\n            memset(prefixSums, 0, sizeof(prefixSums));\n            \n            for (int j = 0; j < k; ++j) {\n                prefixSums[j] = dp[i - 1][j];\n                if (j > 0) {\n                    prefixSums[j] = (prefixSums[j] + prefixSums[j - 1]) % MOD;\n                }\n            }\n            \n            for (int j = 0; j < k; ++j) {\n                if (j >= i) {\n                    dp[i][j] = (prefixSums[j] - prefixSums[j - i] + MOD) % MOD;\n                } else {\n                    dp[i][j] = prefixSums[j];\n                }\n            }\n\n            if (reqIndex < m && requirements[reqIndex][0] == i - 1) {\n                int requiredInversions = requirements[reqIndex][1];\n                for (int j = 0; j <= n * (n - 1) / 2; ++j) {\n                    if (j != requiredInversions) dp[i][j] = 0;\n                }\n                ++reqIndex;\n            }\n        }\n        \n        int result = 0;\n        for (int j = 0; j < k; ++j) result = (result + dp[n][j]) % MOD;\n\n        return result;\n    }\n};",
    "submit_ts": "1719070028",
    "subm_id": "1296812687"
}