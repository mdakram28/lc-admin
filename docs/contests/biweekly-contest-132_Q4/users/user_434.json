{
    "username": "40547011S",
    "submission": "class Solution {\npublic:\n    unordered_map<int, vector<int>> unmap;\n    unordered_map<int, int> starts;\n    int rec(vector<int>& nums, int ind, int k, vector<vector<int>>& dp) {\n        if (ind == nums.size()) {\n            return 0;\n        }\n        if (dp[k][ind] != -1) {\n            return dp[k][ind];\n        }\n        int start = starts[ind];\n\n        int res = 0;\n        if (k == 0) {\n            res = unmap[nums[ind]].size() - start;\n            res = max(res, rec(nums, ind + 1, k, dp));\n            return dp[k][ind] = res;\n        }\n        res = max(res, rec(nums, ind + 1, k, dp));\n        for (int i = start; i < unmap[nums[ind]].size(); i += 1) {\n            res = max(rec(nums, unmap[nums[ind]][i] + 1, k - 1, dp) + i - start + 1, res);\n        }\n        return dp[k][ind] = res;\n    }\n    \n    int maximumLength(vector<int>& nums, int k) {\n        for (int i = 0; i < nums.size(); i += 1) {\n            unmap[nums[i]].push_back(i);\n            starts[i] = unmap[nums[i]].size() - 1;\n        }\n        vector<vector<int>> dp(k + 1, vector<int>(nums.size(), -1));\n        vector<vector<int>> dp2(2, vector<int>(nums.size()));\n        for (int i = nums.size() - 1; i >= 0; i -= 1) {\n            dp2[0][i] = unmap[nums[i]].size() - starts[i];\n        }\n        for (int i = 1; i <= k; i += 1) {\n            int max_val = 0;\n            for (int j = nums.size() - 1; j >= 0; j -= 1) {\n                dp2[1][j] = max(dp2[0][j], 1 + max_val);\n                if (starts[j] != unmap[nums[j]].size() - 1) {\n                    dp2[1][j] = max(dp2[1][j], 1 + dp2[1][unmap[nums[j]][starts[j]+1]]);\n                }\n                max_val = max(max_val, dp2[0][j]);\n            }\n            dp2[0] = dp2[1];\n        }\n        int ans = 0;\n        for (int i = 0; i < nums.size(); i += 1) {\n            ans = max(ans, dp2[0][i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717861023",
    "subm_id": "1281777138"
}