{
    "username": "wayNoway21",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int target) {\n    int n = nums.size();\n    long long totalSubarrays = 0;\n    unordered_map<long long, long long> previous;\n    \n    for (int i = 0; i < n; ++i) {\n        std::unordered_map<long long, long long> current;\n        \n        // If the current element matches the target, increment totalSubarrays\n        if (nums[i] == target) {\n            ++totalSubarrays;\n        }\n        \n        // Initialize the current element in currentResults\n        current[nums[i]] = 1;\n        \n        // Iterate over previous results to compute new results\n        for (auto& pair : previous) {\n            long long previousValue = pair.first;\n            long long frequency = pair.second;\n            long long newAndResult = previousValue & nums[i];\n            \n            // If new AND result equals target, add the frequency to totalSubarrays\n            if (newAndResult == target) {\n                totalSubarrays += frequency;\n            }\n            \n            // Update currentResults with the new AND result\n            current[newAndResult] += frequency;\n        }\n        \n        // Move current results to previous results for the next iteration\n        previous = current;\n    }\n    \n    return totalSubarrays;\n      }\n    \n    \n};",
    "submit_ts": "1720279380",
    "subm_id": "1311748919"
}