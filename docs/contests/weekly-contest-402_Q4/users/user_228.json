{
    "username": "Sandeep_P",
    "submission": "class SegmentTree:\n    def __init__(self, data, default=0, func=lambda x,y:x+y):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        if isinstance(data, int):\n            self._len = data\n            self._size = _size = 1 << (self._len - 1).bit_length()\n            self.data = [default] * (2 * _size)\n        else:\n            self._len = len(data)\n            self._size = _size = 1 << (self._len - 1).bit_length()\n            self.data = [default] * (2 * _size)\n            self.data[_size:_size + self._len] = data\n            for i in reversed(range(_size)):\n                self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __getitem__(self, idx):\n        if isinstance(idx, slice): return self.query(idx.start,idx.stop)\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n=len(nums)\n        tr=SegmentTree([0]*n)\n        for i in range(1,n-1):\n            if nums[i]>nums[i-1] and nums[i]>nums[i+1]:\n                tr[i]=1\n        ans=[]\n        for t,a,b in queries:\n            if t==1:\n                cur=tr[a+1:b]\n                ans.append(cur)\n            elif t==2:\n                nums[a]=b\n                for i in range(max(1,a-1),min(n-1,a+2)):\n                    if nums[i]>nums[i-1] and nums[i]>nums[i+1]:\n                        tr[i]=1\n                    else:\n                        tr[i]=0\n        return ans\n",
    "submit_ts": 1718506270.0
}