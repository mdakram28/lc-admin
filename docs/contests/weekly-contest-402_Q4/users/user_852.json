{
    "username": "adhithya_l",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (2 * n)\n\n    def update(self, index, value):\n        index += self.n\n        self.tree[index] = value\n        while index > 1:\n            index //= 2\n            self.tree[index] = self.tree[2 * index] + self.tree[2 * index + 1]\n\n    def range_query(self, left, right):\n        left += self.n\n        right += self.n\n        total = 0\n        while left < right:\n            if left % 2:\n                total += self.tree[left]\n                left += 1\n            if right % 2:\n                right -= 1\n                total += self.tree[right]\n            left //= 2\n            right //= 2\n        return total\n\ndef count_peaks(nums):\n    n = len(nums)\n    peaks = set()\n    for i in range(1, n - 1):\n        if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n            peaks.add(i)\n    return peaks\n\ndef is_peak(nums, index):\n    n = len(nums)\n    if 1 <= index <= n - 2:\n        return nums[index] > nums[index - 1] and nums[index] > nums[index + 1]\n    return False\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        peaks = count_peaks(nums)\n        \n        # Initialize segment tree with peak information\n        seg_tree = SegmentTree(n)\n        for i in range(1, n - 1):\n            if i in peaks:\n                seg_tree.update(i, 1)\n\n        result = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                # Use segment tree to count peaks in range (li+1, ri)\n                count = seg_tree.range_query(li + 1, ri)\n                result.append(count)\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                # Update peak status for indexi and its neighbors\n                if indexi > 0:\n                    if is_peak(nums, indexi - 1):\n                        seg_tree.update(indexi - 1, 1)\n                    else:\n                        seg_tree.update(indexi - 1, 0)\n                if is_peak(nums, indexi):\n                    seg_tree.update(indexi, 1)\n                else:\n                    seg_tree.update(indexi, 0)\n                if indexi < n - 1:\n                    if is_peak(nums, indexi + 1):\n                        seg_tree.update(indexi + 1, 1)\n                    else:\n                        seg_tree.update(indexi + 1, 0)\n\n        return result",
    "submit_ts": 1718508024.0
}