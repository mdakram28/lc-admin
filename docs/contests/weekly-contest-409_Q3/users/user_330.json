{
    "username": "skqliiiao",
    "submission": "class Solution {\npublic:\n    struct Sgt {\n        vector<int> tree, lazy;\n        Sgt(int n) : tree(n * 4), lazy(n * 4) {}\n\n        void build(int i, int l, int r, vector<int> &value) {\n            if (l == r) {\n                tree[i] = value[l];\n                return;\n            }\n\n            int m = (l + r) / 2;\n            build(i * 2, l, m, value);\n            build(i * 2 + 1, m + 1, r, value);\n            tree[i] = min(tree[i * 2], tree[i * 2 + 1]);\n        }\n\n        void push(int i, int l, int r) {\n            if (lazy[i] == 0)\n                return;\n\n            tree[i] += lazy[i];\n\n            if (l < r) {\n                lazy[i * 2] += lazy[i];\n                lazy[i * 2 + 1] += lazy[i];\n            }\n\n            lazy[i] = 0;\n        }\n\n        void update(int i, int l, int r, int ql, int qr, int v) {\n            push(i, l, r);\n\n            if (l > qr || r < ql)\n                return;\n\n            if (l >= ql && r <= qr) {\n                lazy[i] += v;\n                push(i, l, r);\n                return;\n            }\n\n            int m = (l + r) / 2;\n            update(i * 2, l, m, ql, qr, v);\n            update(i * 2 + 1, m + 1, r, ql, qr, v);\n            tree[i] = min(tree[i * 2], tree[i * 2 + 1]);\n        }\n\n        int query(int i, int l, int r, int qp) {\n            push(i, l, r);\n\n            if (l == r)\n                return tree[i];\n\n            int m = (l + r) / 2;\n\n            if (qp <= m)\n                return query(i * 2, l, m, qp);\n            else\n                return query(i * 2 + 1, m + 1, r, qp);\n        }\n    };\n    struct Sgt2 {\n        vector<int> tree, lazy; // update range [l, r] with v : a[i] = min(a[i], v)\n        Sgt2(int n) : tree(n * 4, n), lazy(n * 4, INT_MAX) {}\n        void pushDown(int rt) {\n            if (lazy[rt] == INT_MAX)\n                return;\n\n            tree[rt * 2] = min(tree[rt * 2], lazy[rt]);\n            lazy[rt * 2] = min(lazy[rt * 2], lazy[rt]);\n            tree[rt * 2 + 1] = min(tree[rt * 2 + 1], lazy[rt]);\n            lazy[rt * 2 + 1] = min(lazy[rt * 2 + 1], lazy[rt]);\n            lazy[rt] = INT_MAX;\n        }\n        void update(int rt, int l, int r, int a, int b, int v) {\n            if (l > b || r < a)\n                return;\n\n            if (l >= a && r <= b) {\n                tree[rt] = min(tree[rt], v);\n                lazy[rt] = min(lazy[rt], v);\n                return;\n            }\n\n            pushDown(rt);\n\n            int m = (l + r) / 2;\n            update(rt * 2, l, m, a, b, v);\n            update(rt * 2 + 1, m + 1, r, a, b, v);\n        }\n        int query(int rt, int l, int r, int p) {\n            if (l == r)\n                return tree[rt];\n\n            int m = (l + r) / 2;\n            pushDown(rt);\n\n            if (p <= m)\n                return query(rt * 2, l, m, p);\n            else\n                return query(rt * 2 + 1, m + 1, r, p);\n        }\n    };\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>> &queries) {\n        vector<int> res, dis(n), r(n);\n\n        for (int i = 1; i < n; ++i) {\n            dis[i] = i;\n            r[i] = n - 1;\n        }\n\n        Sgt t(n - 1);\n        Sgt2 t2(n - 1);\n        t.build(1, 1, n - 1, dis);\n\n        for (auto &q : queries) {\n            auto a = q[0], b = q[1];\n            int new_dis = (!a ? 0 : t.query(1, 1, n - 1, a)) + 1, old_dis = t.query(1, 1, n - 1, b);\n            //cout << \"new_dis: \" << new_dis << \" old_dis: \" << old_dis << endl;\n\n            if (new_dis < old_dis) {\n                //cout << \"update range \" << b << \" \" << t2.query(1, 1, n - 1, b) << endl;\n                t.update(1, 1, n - 1, b, t2.query(1, 1, n - 1, b), new_dis - old_dis);\n                t2.update(1, 1, n - 1, a + 1, b - 1, b - 1);\n                //cout << \"udpate R \" << a + 1 << \" \" << b - 1 << \" to \" << b - 1 << endl;\n            }\n\n            res.push_back(t.query(1, 1, n - 1, n - 1));\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1722741291",
    "subm_id": "552337275"
}