{
    "username": "404_not_found__",
    "submission": "\nint seg[400005];\n\nvoid build(int node, int st, int end, vector<int> &a)\n{\n    if (st == end)\n    {\n        seg[node] = a[st];\n        return;\n    }\n    int mid = st + (end - st) / 2;\n    build(2 * node + 1, st, mid, a);\n    build(2 * node + 2, mid + 1, end, a);\n\n    seg[node] = (seg[2 * node + 1] & seg[2 * node + 2]);\n}\nint query(int node, int st, int end, int l, int r, vector<int> &a)\n{\n    if (l <= st && r >= end)\n    {\n        return seg[node];\n    }\n    if (r < st || l > end)\n    {\n        return (1<<30)-1;\n    }\n    int mid = st + (end - st) / 2;\n\n    int ans1 = query(2 * node + 1, st, mid, l, r, a);\n    int ans2 = query(2 * node + 2, mid + 1, end, l, r, a);\n    return (ans1&ans2);\n}\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        build(0,0,nums.size()-1,nums);\n        \n        int currans=INT_MAX;\n        int n=nums.size();\n        for(int i=0;i<n;i++){\n            \n            int st=i;\n            int end=n-1;\n            //int currans=INT_MAX;\n            while(st<=end){\n                int mid=st+(end-st)/2;\n                int check=query(0,0,n-1,i,mid,nums);\n                \n                if(check >= k){\n                    currans=min(currans,abs(k-check));\n                    st=mid+1;\n                }\n                else{\n                    currans=min(currans,abs(k-check));\n                    end=mid-1;\n                }\n                \n            }\n            \n            \n            \n        }\n        return currans;\n        \n    }\n};",
    "submit_ts": 1717297875.0
}