{
    "username": "Ruvxei",
    "submission": "class SegTree:\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n        self.val = 0\n        if self.l != self.r:\n            self.left = SegTree(self.l, (self.l + self.r) // 2)\n            self.right = SegTree((self.l + self.r) // 2 + 1, self. r)\n            \n    def update(self, ix, val):\n        if self.l == self.r:\n            self.val = val\n            return\n        elif ix <= (self.l + self.r) // 2:\n            self.left.update(ix, val)\n        else:\n            self.right.update(ix, val)\n        self.val = self.left.val + self.right.val\n    \n    def getRange(self, leftBound, rightBound):\n        if self.r < leftBound or self.l > rightBound:\n            return 0\n        elif self.l >= leftBound and self.r <= rightBound:\n            return self.val\n        else:\n            return self.left.getRange(leftBound, rightBound) + self.right.getRange(leftBound, rightBound)\n        \n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = SegTree(0, n - 1)\n        isPeak = [0 for _ in range(n)]\n        for i in range(n):\n            if (not ((i - 1 >= 0 and nums[i - 1] >= nums[i]) or (i + 1 < n and nums[i + 1] >= nums[i]))) and (1 <= i < n - 1):\n                tree.update(i, 1)\n                isPeak[i] = 1\n        \n        ret = []\n        for t, a, b in queries:\n            if t == 1:\n                ret.append(tree.getRange(a, b))\n                if isPeak[a]:\n                    ret[-1] -= 1\n                if a != b and isPeak[b]:\n                    ret[-1] -= 1\n                \n            else:\n                nums[a] = b\n                if (a - 1 >= 0 and nums[a - 1] >= b) or (a + 1 < n and nums[a + 1] >= b) or a == 0 or a == n - 1:\n                    tree.update(a, 0)\n                    isPeak[a] = 0\n                elif 1 <= a < n - 1:\n                    tree.update(a, 1)\n                    isPeak[a] = 1\n                if a - 1 >= 0 and nums[a - 1] > b and (a - 2 < 0 or nums[a - 1] > nums[a - 2]) and 1 <= a - 1 < n - 1:\n                    tree.update(a - 1, 1)\n                    isPeak[a - 1] = 1\n                else:\n                    tree.update(a - 1, 0)\n                    isPeak[a - 1] = 0\n                if a + 1 < n and nums[a + 1] > b and (a + 2 >= n or nums[a + 1] > nums[a + 2]) and 1 <= a + 1 < n - 1:\n                    tree.update(a + 1, 1)\n                    isPeak[a + 1] = 1\n                else:\n                    tree.update(a + 1, 0)\n                    if a + 1 < n:\n                        isPeak[a + 1] = 0\n        return ret",
    "submit_ts": 1718508131.0
}