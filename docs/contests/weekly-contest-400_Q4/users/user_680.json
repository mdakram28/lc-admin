{
    "username": "Abhimanyu_185724",
    "submission": "class SEGTree{\n    vector<int> seg;\npublic:\n    SEGTree(int n){\n        seg.resize(4*n+1);\n    }\n\n    void build(int ind, int low, int high, vector<int>&arr){\n        if(low == high){\n            seg[ind] = arr[low];\n            return;\n        }\n\n        int mid = low+(high-low)/2;\n        build(2*ind+1, low, mid, arr);\n        build(2*ind+2, mid+1, high, arr);\n        \n        seg[ind] = seg[2*ind+1]&seg[2*ind+2];\n    }\n        \n    int query(int ind, int low, int high, int l, int r){\n        if(r<low || high<l)    return ((1<<30)-1);\n    \n        if(low>=l && r>=high)    return seg[ind];\n    \n        else{\n            int mid = low + (high-low)/2;\n            int left = query(2*ind+1, low, mid, l, r);\n            int right = query(2*ind+2, mid+1, high, l, r);\n            return left&right;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int ans=INT_MAX;\n        int n = nums.size();\n        SEGTree sg(n);\n        sg.build(0,0,n-1,nums);\n        for(int i=0;i<n;i++){\n            int l = i-1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (sg.query(0,0,n-1,i,mid)>= k) l = mid;\n                else r = mid;\n            }\n             if (l != i - 1)    ans = min(ans, abs(sg.query(0,0,n-1,i, l) - k));\n             ans = min(ans, abs(k - sg.query(0,0,n-1,i, r)));        \n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717299292.0
}