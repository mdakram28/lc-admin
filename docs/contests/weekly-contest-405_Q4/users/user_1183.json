{
    "username": "comicfans44",
    "submission": "#include <algorithm>\n#include <cassert>\n#include <map>\n#include <set>\n#include <string>\n#include <vector>\n\nusing namespace std;\n\n#ifdef LEETCODE\n#include \"../parse.h\"\n#endif\n\n// jj\nclass Solution {\npublic:\n  int minimumCost(string target, vector<string> &words, vector<int> &costs) {\n\n    set<char> tt(target.begin(), target.end());\n    set<char> ss;\n\n    map<string, int> word_score;\n    for (int i = 0; i < words.size(); ++i) {\n      auto pos = word_score.find(words[i]);\n      if (pos == word_score.end()) {\n        word_score[words[i]] = costs[i];\n      } else {\n        pos->second = min(pos->second, costs[i]);\n      }\n      for (auto c : words[i]) {\n        ss.insert(c);\n      }\n    }\n\n    for (auto c : tt) {\n      if (ss.count(c) == 0) {\n        return -1;\n      }\n    }\n\n    vector<int> cache(target.size(), INT_MAX);\n    return rec(target, 0, word_score, cache);\n  }\n\n  int rec(const string &target, const int pos,\n          const map<string, int> &word_score, vector<int> &cache) {\n\n    if (pos == target.size()) {\n      return 0;\n    }\n\n    if (cache[pos] != INT_MAX) {\n      return cache[pos];\n    }\n\n    int best = INT_MAX;\n    for (const auto &[word, score] : word_score) {\n\n      if (!equal(target.begin() + pos,\n                 target.begin() + pos + min(target.size() - pos, word.size()),\n                 word.begin(), word.end())) {\n        continue;\n      }\n\n      int this_score = score;\n      int sub_score = rec(target, pos + word.size(), word_score, cache);\n      if (sub_score == -1) {\n        continue;\n      }\n      this_score += sub_score;\n      best = min(best, this_score);\n    }\n\n    const int ret = (best == INT_MAX ? -1 : best);\n    cache[pos] = ret;\n    return ret;\n  }\n};\n\n#ifdef LEETCODE\nint main() {\n  Solution s;\n  {\n    string target = \"abcdef\";\n    vector<string> words = {\"abdef\", \"abc\", \"d\", \"def\", \"ef\"};\n    vector<int> costs = {100, 1, 1, 10, 5};\n    auto res = s.minimumCost(target, words, costs);\n    assert(res == 7);\n  }\n  {\n    string target = \"aaaa\";\n    vector<string> words = {\"z\", \"zz\", \"zzz\"};\n    vector<int> costs = {1, 10, 100};\n    auto res = s.minimumCost(target, words, costs);\n    assert(res == -1);\n  }\n  {\n    string target =\n        \"xmjpkowhuefntanqvygzukqlxrrpsbuscjesdxilsjodkjjzhfrzymiaeedjsfpquiu\";\n    vector<string> words = {\n        \"u\",\n        \"m\",\n        \"i\",\n        \"d\",\n        \"busc\",\n        \"z\",\n        \"j\",\n        \"s\",\n        \"huefntanqvygzuk\",\n        \"d\",\n        \"qlxrrpsbuscjesdxilsjodkjj\",\n        \"nqvygzukqlxrrpsbuscjesdxilsjodkjjzhfrzymiaee\",\n        \"h\",\n        \"c\",\n        \"o\",\n        \"s\",\n        \"l\",\n        \"sjodkjjzhfrzymi\",\n        \"aeedjsfpqu\",\n        \"i\",\n        \"u\",\n        \"kowhue\",\n        \"pkowhuefntanqvygzukqlxrrpsbus\",\n        \"x\",\n        \"j\",\n        \"djsfpquiu\",\n        \"dxilsjodkjjzhfrzymiaeedjsfpqu\",\n        \"j\",\n        \"jodkjjzhfrzymia\",\n        \"xrrpsbuscjesdxilsj\",\n        \"r\",\n        \"f\",\n        \"iu\",\n        \"k\",\n        \"frzymiaeedjsf\",\n        \"zymiaee\",\n        \"djsf\",\n        \"j\",\n        \"mjpkowh\",\n        \"d\",\n        \"j\",\n        \"x\",\n        \"i\",\n        \"miaeed\",\n        \"fntanqvygzukqlxrrpsbuscjesdxilsjodkjjzhfrzymiaeedjsfpq\",\n        \"lxrrpsbuscjesdxilsjod\",\n        \"jsfpqu\",\n        \"e\"};\n    vector<int> costs = {41, 2,  23, 44, 1,  2,  31, 12, 4,  43, 17, 16,\n                         19, 34, 36, 36, 16, 17, 30, 19, 34, 5,  43, 28,\n                         43, 31, 1,  21, 26, 2,  23, 10, 48, 24, 7,  44,\n                         1,  46, 26, 25, 24, 31, 23, 13, 7,  13, 24, 41};\n    auto res = s.minimumCost(target, words, costs);\n  }\n}\n#endif",
    "submit_ts": "1720322736",
    "subm_id": "1312357790"
}