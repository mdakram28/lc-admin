{
    "username": "the_GOAT13",
    "submission": "\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int bfs(const vector<vector<int>>& graph, int start, int target1, int target2) {\n        queue<int> q;\n        vector<int> visited(graph.size(), 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : graph[node]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    \n    double distance(const pair<int, int>& center1, const pair<int, int>& center2) {\n        return sqrt(pow(center1.first - center2.first, 2) +\n                    pow(center1.second - center2.second, 2));\n    }\n    \n    bool inContact(const pair<int, int>& center1, int radius1, \n                   const pair<int, int>& center2, int radius2) {\n        double dist = distance(center1, center2);\n        int radiusSum = radius1 + radius2;\n        return radiusSum >= dist;\n    }\n    \n    void createGraph(int X, int Y, const vector<vector<int>>& circles, vector<vector<int>>& graph) {\n        int numCircles = circles.size();\n        for (int i = 0; i < numCircles; ++i) {\n            int cx = circles[i][0];\n            int cy = circles[i][1];\n            int r = circles[i][2];\n            \n            if (cx <= r) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - cx <= r) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (cy <= r) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - cy <= r) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            \n            for (int j = i + 1; j < numCircles; ++j) {\n                int cx2 = circles[j][0];\n                int cy2 = circles[j][1];\n                int r2 = circles[j][2];\n                \n                if (inContact({cx, cy}, r, {cx2, cy2}, r2)) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<vector<int>> graph(circles.size() + 4);\n        \n        createGraph(X, Y, circles, graph);\n        \n        bool isBlocked = bfs(graph, circles.size(), circles.size() + 1, circles.size() + 2) ||\n                         bfs(graph, circles.size() + 3, circles.size() + 2, circles.size() + 1);\n                         \n        return !isBlocked;\n    }\n};\n",
    "submit_ts": "1722136971",
    "subm_id": "1335750355"
}