{
    "username": "the_oreo",
    "submission": "using ll = long long;\n\nclass Solution {\npublic:\n    vector<vector<ll>> sgt; // 1 = left omitted, 2 = right omitted, 3 = both omitted\n\n    vector<int> merge2(vector<int> &a, vector<int> &b) {\n        vector<int> res(4);\n        res[0] = max(a[0] + b[1], a[2] + b[0]);\n        res[1] = max(a[1] + b[1], a[3] + b[0]);\n        res[2] = max(a[0] + b[3], a[2] + b[2]);\n        res[3] = max(a[1] + b[3], a[3] + b[2]);\n        return res;\n    }\n    \n    void merge(int i, int tl, int tr) {\n        if (tl != tr) {\n            sgt[i][0] = max(sgt[i * 2 + 1][0] + sgt[i * 2 + 2][1], sgt[i * 2 + 1][2] + sgt[i * 2 + 2][0]);\n            sgt[i][1] = max(sgt[i * 2 + 1][1] + sgt[i * 2 + 2][1], sgt[i * 2 + 1][3] + sgt[i * 2 + 2][0]);\n            sgt[i][2] = max(sgt[i * 2 + 1][0] + sgt[i * 2 + 2][3], sgt[i * 2 + 1][2] + sgt[i * 2 + 2][2]);\n            sgt[i][3] = max(sgt[i * 2 + 1][1] + sgt[i * 2 + 2][3], sgt[i * 2 + 1][3] + sgt[i * 2 + 2][2]);\n        }\n    }\n\n    void upd(int tl, int tr, int u, int i, int val) {\n        if (tl == tr) {\n            sgt[i][0] = max(val, 0);\n            sgt[i][1] = sgt[i][2] = sgt[i][3] = 0;\n        } else {\n            int tm = tl + (tr - tl) / 2;\n            if (u <= tm) {\n                upd(tl, tm, u, i * 2 + 1, val);\n            } else {\n                upd(tm + 1, tr, u, i * 2 + 2, val);\n            }\n            merge(i, tl, tr);\n        }\n    }\n\n    void upd(int u, int val) {\n        int n = (int) sgt.size() / 4;\n        upd(0, n - 1, u, 0, val);\n    }\n\n//     vector<int> query(int tl, int tr, int ql, int qr, int i) {\n//         if (ql > qr) {\n//             return {0, 0, 0, 0};\n//         } else if (tl == ql && tr == qr) {\n//             return sgt[i];\n//         } else {\n//             int tm = tl + (tr - tl) / 2;\n//             return merge2(\n//                 query(tl, tm, ql, min(qr, tm), i * 2 + 1),\n//                 query(tm + 1, tr, max(ql, tm + 1), qr, i * 2 + 2)\n//             );\n//         }\n//     }\n\n//     vector<int> query(int ql, int qr) {\n//         int n = (int) sgt.size() / 4;\n//         return query(0, n - 1, ql, qr, 0);\n//     }\n    \n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        sgt.resize(n * 4, vector<ll> (4));\n        for (int i = 0; i < n; i++) {\n            upd(i, nums[i]);\n        }\n        int ans = 0, M = 1e9 + 7;\n        for (auto &q : queries) {\n            int pos = q[0], x = q[1];\n            upd(pos, x);\n            ans = (ans + sgt[0][0]) % M;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716694558",
    "subm_id": "1268119009"
}