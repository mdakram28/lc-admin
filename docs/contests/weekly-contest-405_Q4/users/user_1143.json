{
    "username": "matthegi",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = dict()\n        self.end = False\n        self.cost = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        root = self.root\n        for i in range(len(word)):\n            letter = word[i]\n            if letter not in root.children:\n                root.children[letter] = TrieNode()\n            root = root.children[letter]\n        if root.end:\n            root.cost = min(root.cost, cost)\n        else:\n            root.end = True\n            root.cost = cost\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        trie = Trie()\n        for i, word in enumerate(words):\n            trie.insert(word, costs[i])\n\n\n        # wordStarts = dict()\n        # for i, word in enumerate(words):\n        #     if word[0] not in wordStarts:\n        #         wordStarts[word[0]] = set()\n        #     wordStarts[word[0]].add((word, i))\n\n        @cache\n        def dfs(curr, index, root):\n            if index >= len(target):\n                return 0\n\n            if target[index] not in root.children:\n                return float(\"inf\")\n\n            bestCost = float(\"inf\")\n            while index < len(target) and target[index] in root.children:\n                root = root.children[target[index]]\n                index += 1\n                if root.end:\n                    res = root.cost + dfs(curr, index, trie.root)\n                    bestCost = min(bestCost, res)\n            return bestCost\n            \n\n            # startLetter = target[index]\n            # if startLetter not in wordStarts:\n            #     return float(\"inf\")\n\n            # bestCost = float(\"inf\")\n            # for word, ind in wordStarts[startLetter]:\n            #     if len(word) > (len(target) - index):\n            #         continue\n            #     if target[index:index + len(word)] == word:\n            #         res = costs[ind] + dfs(curr + word, index + len(word))\n            #         bestCost = min(bestCost, res)\n            # return bestCost\n                \n        res = dfs(\"\", 0, trie.root)\n        return res if res != float(\"inf\") else -1\n\n            ",
    "submit_ts": "1720321752",
    "subm_id": "1312331334"
}