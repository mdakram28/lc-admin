{
    "username": "unknown_fella",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> ends;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const string& word, int idx, int cost) {\n            TrieNode* node = root;\n            for (char ch : word) {\n                if (!node->children.count(ch)) {\n                    node->children[ch] = new TrieNode();\n                }\n                node = node->children[ch];\n            }\n            node->ends.push_back({idx, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) \n        {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        vector<int> dp(n+1,INT_MAX/2);\n        dp[0]=0;\n\n        // map<string, int> mp;\n        // for (int i = 0; i < m; i++) {\n        //     if (mp.find(words[i]) == mp.end()) {\n        //         mp[words[i]] = costs[i];\n        //     } else {\n        //         mp[words[i]] = min(mp[words[i]], costs[i]);\n        //     }\n        // }\n\n        \n        for (int i=0;i<n;i++) \n        {\n            if (dp[i]!=INT_MAX/2) \n            {\n                TrieNode* node = trie.root;\n                for (int j=i;j<n;j++) \n                {\n                    if (!node->children.count(target[j])) break;\n                    node=node->children[target[j]];\n                    for (auto it : node->ends) \n                    {\n                        int sz = words[it.first].size();\n                        if (i<=n-sz) \n                        {\n                            dp[i+sz]=min(dp[i+sz],dp[i]+it.second);\n                        }\n                    }\n                }\n            }\n            \n        }\n        // for (int i = 1; i <= n; i++) {\n        //     for (auto it:mp) {\n        //         string word = it.first;\n        //         int sz = word.size();\n        //         if (i >= sz && target.substr(i - sz, sz) == word) {\n        //             dp[i] = min(dp[i], dp[i - sz] + it.second);\n        //         }\n        //     }\n        // }\n        if(dp[n]==INT_MAX/2) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324538",
    "subm_id": "1312401946"
}