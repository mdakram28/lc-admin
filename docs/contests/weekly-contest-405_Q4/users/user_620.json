{
    "username": "anshulagarwal3131",
    "submission": "class Solution {\npublic:\n \nint bin_exp(int x,int p,int m){\n    if(!p)\n        return 1;\n    int u = bin_exp(x,p/2,m);\n    u = (u*u)%m;\n    if(p%2)\n        u = (u*x)%m;\n    return u;\n}\nint sum(int i,vector<int> &f){\n    int x = 0;\n    while(i>0){\n        x+=f[i];\n        int rightMostBit = (i & (-i));\n        i-=rightMostBit;\n    }\n    return x;\n}\nvoid add(int i,int x,vector<int> &f){\n    while(i<f.size()){\n        f[i]+=x;\n        int rightMostBit = (i & (-i));\n        i+=rightMostBit;\n    }\n}\nint rsum(int l,int r,vector<int> &f){\n    return sum(r,f)-sum(l-1,f);\n}\n\nclass TrieNode {\npublic:\n    array<int, 26> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {\n        children.fill(-1);\n    }\n};\n\nclass Trie {\npublic:\n    vector<TrieNode> nodes;\n\n    Trie() {\n        nodes.push_back(TrieNode());\n    }\n\n    void insert(const string& word, int cost) {\n        int nodeIndex = 0;\n        for (char c : word) {\n            int index = c - 'a';\n            if (nodes[nodeIndex].children[index] == -1) {\n                nodes[nodeIndex].children[index] = nodes.size();\n                nodes.push_back(TrieNode());\n            }\n            nodeIndex = nodes[nodeIndex].children[index];\n        }\n        nodes[nodeIndex].cost = min(nodes[nodeIndex].cost, cost);\n    }\n\n    vector<pair<int, int>> search_suffix(const string& s, int end_index) {\n        vector<pair<int, int>> results;\n        int nodeIndex = 0;\n        for (int i = end_index; i >= 0; --i) {\n            int index = s[i] - 'a';\n            if (nodes[nodeIndex].children[index] == -1) {\n                break;\n            }\n            nodeIndex = nodes[nodeIndex].children[index];\n            if (nodes[nodeIndex].cost != INT_MAX) {\n                results.push_back({i, nodes[nodeIndex].cost});\n            }\n        }\n        return results;\n    }\n};\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    \n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        reverse(words[i].begin(), words[i].end());\n        trie.insert(words[i], costs[i]);\n    }\n    int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n    for (int i = 1; i <= n; ++i) {\n        vector<pair<int, int>> suffix_matches = trie.search_suffix(target, i - 1);\n        for (auto j : suffix_matches) {\n            if (dp[j.first] != INT_MAX) {\n                dp[i] = min(dp[i], dp[j.first] + j.second);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322259",
    "subm_id": "1312345019"
}