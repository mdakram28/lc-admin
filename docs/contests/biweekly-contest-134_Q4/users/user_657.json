{
    "username": "ykings12",
    "submission": "class Solution {\nprivate:\n    using ll=long long;\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        ll count = 0;\n        unordered_map<int, int> dp;\n\n        for (int i = 0; i < n; ++i) {\n            count += f(nums, i, k, dp);\n            update(dp, nums[i]);\n        }\n\n        return count;\n    }\n\nprivate:\n    ll f(const vector<int>& nums, int endIndex, int k, const unordered_map<int, int>& dp) {\n        ll count = 0;\n        if (nums[endIndex] == k) {\n            count++;\n        }\n        for (auto& [val, freq] : dp) {\n            int new_and = val & nums[endIndex];\n            if (new_and == k) {\n                count += freq;\n            }\n        }\n        return count;\n    }\n\n    void update(unordered_map<int, int>& dp, int num) {\n        unordered_map<int, int> new_dp;\n        for (auto& [val, freq] : dp) {\n            int new_and = val & num;\n            new_dp[new_and] += freq;\n        }\n        new_dp[num]++;\n        dp = new_dp;\n    }\n};\n",
    "submit_ts": "1720279966",
    "subm_id": "1311772039"
}