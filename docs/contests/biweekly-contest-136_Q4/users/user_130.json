{
    "username": "john0312acc223",
    "submission": "\nclass Node{\npublic:\n    Node(int idx) : idx_(idx), pidx_(-1), idx_at_p_(-1), maxh_(-1) {}\n\n    int idx_;\n    vector<int> neigh_;\n    vector<int> ush_;\n    vector<int> dsh_;\n    int pidx_;\n    int idx_at_p_;\n    int maxh_;\n\n    void add_edge(int e) {\n        neigh_.push_back(e);\n        ush_.push_back(-1);\n        dsh_.push_back(-1);\n        assert(neigh_.size() == ush_.size());\n        assert(neigh_.size() == dsh_.size());\n    }\n\n    void first_pass(vector<Node*>& g, int pnode_id) {\n        int p_ush = 0;\n        for (int i = 0; i < neigh_.size(); i++) {\n            if (neigh_[i] == pnode_id) {\n                pidx_ = i;\n                continue;\n            }\n            int cn = neigh_[i];\n            Node* child = g[cn];\n            child->idx_at_p_ = i;\n            child->first_pass(g, idx_);\n            dsh_[i] = child->ush_[child->pidx_] + (2 - child->idx_%2);\n            p_ush = max(dsh_[i], p_ush);\n        }\n        if (pidx_ != -1) ush_[pidx_] = p_ush;\n    }\n\n    void second_pass(vector<Node*>& g, bool root) {\n        if (!root) {\n            // stuffs.\n            assert(pidx_ != -1);\n            Node* pn = g[neigh_[pidx_]];\n            dsh_[pidx_] = pn->ush_[idx_at_p_] + (2 - pn->idx_%2);\n        } else {\n            assert(pidx_ == -1);\n        }\n\n        std::set<long long> dsh_set;\n        for (int i = 0; i < neigh_.size(); i++) {\n            dsh_set.insert(static_cast<long long>(dsh_[i])<<32 | i);\n            assert(dsh_[i] >= 0);\n        }\n\n        auto get_dsh_max = [&dsh_set] () {\n            if (dsh_set.size() == 0) {\n                return 0LL;\n            }\n            auto itr = dsh_set.end();\n            itr--;\n            return (*itr)>>32;\n        };\n        maxh_ = get_dsh_max();\n\n        for (int i = 0; i < neigh_.size(); i++) {\n            int o_ush = ush_[i];\n            dsh_set.erase(static_cast<long long>(dsh_[i])<<32 | i);\n            ush_[i] = get_dsh_max();\n            dsh_set.insert(static_cast<long long>(dsh_[i])<<32 | i);\n            if (i == pidx_) assert(o_ush == ush_[i]);\n        }\n\n        for (int i = 0; i < neigh_.size(); i++) {\n            if (i == pidx_) continue;\n            g[neigh_[i]]->second_pass(g, false);\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size()+1;\n        vector<Node*> g;\n        for (int i = 0; i < n; i++) {\n            g.push_back(new Node(i));\n        }\n\n        for (const auto& e : edges) {\n            int n1, n2;\n            assert(e.size() == 2);\n            n1 = e[0];\n            n2 = e[1];\n            g[n1]->add_edge(n2);\n            g[n2]->add_edge(n1);\n        }\n\n        g[0]->first_pass(g, -1);\n        g[0]->second_pass(g, true);\n\n        vector<int> res(n, -1);\n        for (int i = 0; i < n; i++) {\n            res[i] = g[i]->maxh_;\n            assert(res[i] >= 0);\n            delete g[i];\n            g[i] = nullptr;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722698976",
    "subm_id": "1343197723"
}