{
    "username": "Jeffrey Hui",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        const int m = board.size();\n        const int n = board[0].size();\n        vector<vector<int>> cnt(m, vector<int>(n));\n        for (int i = 0; i < m; ++i) {\n            priority_queue<pair<int, int>,vector<pair<int, int>>, greater<pair<int, int>>> pq;\n            for (int j = 0; j < n; ++j) {\n                pq.push({board[i][j], j});\n                if (pq.size() > 3) {\n                    pq.pop();\n                }\n            }\n            while (!pq.empty()) {\n                auto [_, j] = pq.top();\n                pq.pop();\n                ++cnt[i][j];\n            }\n        }\n        for (int j = 0; j < n; ++j) {\n            priority_queue<pair<int, int>,vector<pair<int, int>>, greater<pair<int, int>>> pq;\n            for (int i = 0; i < m; ++i) {\n                pq.push({board[i][j], i});\n                if (pq.size() > 3) {\n                    pq.pop();\n                }\n            }\n            while (!pq.empty()) {\n                auto [_, i] = pq.top();\n                pq.pop();\n                ++cnt[i][j];\n            }\n        }\n        vector<pair<int, int>> candidates;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (cnt[i][j] >= 2) {\n                    candidates.push_back({i, j});\n                }\n            }\n        }\n        const int k = candidates.size();\n        long long ans = LLONG_MIN;\n        for (int i = 0; i < k; ++i) {\n            for (int j = i + 1; j < k; ++j) {\n                if (candidates[i].first == candidates[j].first || candidates[i].second == candidates[j].second) continue;\n                for (int l = j + 1; l < k; ++l) {\n                    if (candidates[i].first == candidates[l].first || candidates[i].second == candidates[l].second) continue;\n                    if (candidates[j].first == candidates[l].first || candidates[j].second == candidates[l].second) continue;\n                    ans = max(ans, (long long) board[candidates[i].first][candidates[i].second]\n                                 + board[candidates[j].first][candidates[j].second]\n                                 + board[candidates[l].first][candidates[l].second]);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723906221",
    "subm_id": "1359041535"
}