{
    "username": "s_saurabh",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        zero_count = [0] * n\n        one_count = [0] * n\n        \n        \n        for i in range(n):\n            if s[i] == '0':\n                zero_count[i] += 1\n            else:\n                one_count[i] += 1\n            if i + 1 < n:\n                zero_count[i + 1] = zero_count[i]\n                one_count[i + 1] = one_count[i]\n        \n        \n        prefix_sums = [0] * (n + 1)\n        for i in range(1, n + 1):\n            prefix_sums[i] = prefix_sums[i - 1] + i\n        \n        \n        def find_right_bound(index):\n            left, right = index, n - 1\n            result = index\n            while left <= right:\n                mid = (left + right) // 2\n                zeros = zero_count[mid] - (zero_count[index - 1] if index > 0 else 0)\n                ones = one_count[mid] - (one_count[index - 1] if index > 0 else 0)\n                if zeros <= k or ones <= k:\n                    result = mid\n                    left = mid + 1\n                else:\n                    right = mid - 1\n            return result\n        \n        \n        def find_left_bound(index):\n            left, right = 0, index\n            result = index\n            while left <= right:\n                mid = (left + right) // 2\n                zeros = zero_count[index] - (zero_count[mid - 1] if mid > 0 else 0)\n                ones = one_count[index] - (one_count[mid - 1] if mid > 0 else 0)\n                if zeros <= k or ones <= k:\n                    result = mid\n                    right = mid - 1\n                else:\n                    left = mid + 1\n            return result\n        \n       \n        valid_lengths = [0] * n\n        for i in range(n):\n            right = find_right_bound(i)\n            valid_lengths[i] += (right - i + 1)\n            if i + 1 < n:\n                valid_lengths[i + 1] = valid_lengths[i]\n        \n        \n        results = []\n        for l, r in queries:\n            left = find_left_bound(r)\n            if left <= l:\n                left = l\n            valid_range = r - left + 1\n            total = 0\n            if left > l:\n                total += valid_lengths[left - 1] - (valid_lengths[l - 1] if l > 0 else 0)\n            total += prefix_sums[valid_range]\n            results.append(total)\n        \n        return results\n",
    "submit_ts": "1723953433",
    "subm_id": "1359821121"
}