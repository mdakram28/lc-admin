{
    "username": "kirpichev",
    "submission": "\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        g1 = [[] for _ in range(n)]\n        # print(g1)\n        for u,v in edges1:\n            g1[u].append(v)\n            g1[v].append(u)\n        g2 = [[] for _ in range(m)]\n        for u,v in edges2:\n            g2[u].append(v)\n            g2[v].append(u)\n\n        mDepth = 0\n        edge = -1\n        visited = set()\n        def dfs(g, u, depth):\n            nonlocal mDepth\n            nonlocal edge\n            if depth > mDepth:\n                mDepth = depth\n                edge = u\n            for v in g[u]:\n                if v not in visited:\n                    visited.add(v)\n                    dfs(g, v, depth + 1)\n        dfs(g1, 0, 0)\n        mDepth = 0\n        far_edge1 = edge\n        edge = -1\n        visited = set()  \n        dfs(g1, far_edge1, 0)\n        r1 = (mDepth + 1) // 2\n        d1 = mDepth\n\n        mDepth = 0\n        edge = -1\n        visited = set()\n        dfs(g2, 0, 0)\n        mDepth = 0\n        far_edge2 = edge\n        edge = -1\n        visited = set()  \n        dfs(g2, far_edge2, 0)\n        r2 = (mDepth + 1) // 2\n        d2 = mDepth\n\n        return max(r1 + r2 + 1, d1, d2)",
    "submit_ts": "1719719265",
    "subm_id": "1304437730"
}