{
    "username": "b03201008",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        a = []\n        xma = yma = xma2 = yma2 = -10 ** 9\n        xmi = ymi = xmi2 = ymi2 = 10 ** 9\n        xma_idx = yma_idx = xma2_idx = yma2_idx = xmi_idx = ymi_idx = xmi2_idx = ymi2_idx = -1\n        for i, (x, y) in enumerate(points):\n            a.append((x - y, x + y))\n            if x - y > xma:\n                xma2 = xma\n                xma2_idx = xma_idx\n                xma = x - y\n                xma_idx = i\n            elif x - y > xma2:\n                xma2 = x - y\n                xma2_idx = i\n            if x - y < xmi:\n                xmi2 = xmi\n                xmi2_idx = xmi_idx\n                xmi = x - y\n                xmi_idx = i\n            elif x - y < xmi2:\n                xmi2 = x - y\n                xmi2_idx = i\n            if x + y > yma:\n                yma2 = yma\n                yma2_idx = yma_idx\n                yma = x + y\n                yma_idx = i\n            elif x + y > yma2:\n                yma2 = x + y\n                yma2_idx = i\n            if x + y < ymi:\n                ymi2 = ymi\n                ymi2_idx = ymi_idx\n                ymi = x + y\n                ymi_idx = i\n            elif x + y < ymi2:\n                ymi2 = x + y\n                ymi2_idx = i\n        ans = 10 ** 9\n        h = []\n        for i, (x, y) in enumerate(a):\n            heappush(h, (-abs(x - xma), i, xma_idx))\n            heappush(h, (-abs(x - xma2), i, xma2_idx))\n            heappush(h, (-abs(x - xmi), i, xmi_idx))\n            heappush(h, (-abs(x - xmi2), i, xmi2_idx))\n            heappush(h, (-abs(y - yma), i, yma_idx))\n            heappush(h, (-abs(y - yma2), i, yma2_idx))\n            heappush(h, (-abs(y - ymi), i, ymi_idx))\n            heappush(h, (-abs(y - ymi2), i, ymi2_idx))\n        _, i, j = heappop(h)\n        g = h[:]\n        while g[0][1] == i or g[0][2] == i:\n            heappop(g)\n        ans = min(ans, -g[0][0])\n        while h[0][1] == j or h[0][2] == j:\n            heappop(h)\n        ans = min(ans, -h[0][0])\n        return ans"
}