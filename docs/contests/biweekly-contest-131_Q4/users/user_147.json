{
    "username": "ustadji",
    "submission": "#include<bits/stdc++.h>\n\nusing namespace std;\n#define fastio() ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double lld;\ntypedef pair<ll, ll> pii;\n#define rep(i, a) for (ll i = 0; i < a; i++)\n#define repe(i, a, b) for (ll i = a; i < b; i++)\n#define bac(i, a) for (ll i = a; i >= 0; i--)\n#define bace(i, a, b) for (ll i = a; i >= b; i--)\n#define pb push_back\n#define in insert\n#define ff first\n#define ss second\n#define setbit(x) __builtin_popcountll(x)\n#define all(c) c.begin(), c.end()\n#define sz(c) (ll) c.size()\n#define lb lower_bound\n#define ub upper_bound\n#define maxe *max_element\n#define mine *min_element\n#define rev reverse\nconst ll inf = 1e18;\nconst ll mod = 1e9 + 7;\nconst ll MOD = 998244353;\nconst double EPS = 1e-8;\nconst double PI = acos(-1.0);\nusing vb = vector<bool>;\nusing vi = vector<ll>;\nusing vpi = vector<pii>;\nusing vvi = vector<vi>;\nusing vs = vector<string>;\n\n// typedef tree<pair<int, int>, null_type, less<pair<int, int>>, rb_tree_tag, tree_order_statistics_node_update > pbds; // find_by_order, order_of_key\n\n#ifndef ONLINE_JUDGE\n#define debug(x) cerr << #x <<\" \"; _print(x); cerr << endl;\n#else\n#define debug(x)\n#endif\n\nvoid _print(ll t) {cerr << t;}\nvoid _print(int t) {cerr << t;}\nvoid _print(string t) {cerr << t;}\nvoid _print(char t) {cerr << t;}\nvoid _print(lld t) {cerr << t;}\nvoid _print(double t) {cerr << t;}\nvoid _print(ull t) {cerr << t;}\ntemplate <class T, class V> void _print(pair <T, V> p);\ntemplate <class T> void _print(vector <T> v);\ntemplate <class T> void _print(set <T> v);\ntemplate <class T, class V> void _print(map <T, V> v);\ntemplate <class T> void _print(multiset <T> v);\ntemplate <class T> void _print(array <T, 2> v);\ntemplate <class T, class V> void _print(pair <T, V> p) {cerr << \"{\"; _print(p.ff); cerr << \",\"; _print(p.ss); cerr << \"}\";}\ntemplate <class T, class V> void _print(array <T, 2> p) {cerr << \"{\"; _print(p[0]); cerr << \",\"; _print(p[1]); cerr << \"}\";}\ntemplate <class T> void _print(vector <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(set <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T> void _print(multiset <T> v) {cerr << \"[ \"; for (T i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate <class T, class V> void _print(map <T, V> v) {cerr << \"[ \"; for (auto i : v) {_print(i); cerr << \" \";} cerr << \"]\";}\ntemplate<class T> bool ckmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\ntemplate<class T> using pq_max = priority_queue<T, vector<T>, less<T>>;\ntemplate<class T> using pq_min = priority_queue<T, vector<T>, greater<T>>;\n\ninline ll add(ll u, ll v) {\n    u += v;\n    if (u >= mod) u -= mod;\n    return u;\n}\n\ninline ll sub(ll u, ll v) {\n    u -= v;\n    if (u < 0) u += mod;\n    return u;\n}\n\ninline ll mul(ll u, ll v) {\n    return (long long)u * v % mod;\n}\n//(a & -a) returns the lowest bit of a (even number)\n//a / (a & -a) gives the smallest odd number that can divide a\ntemplate<class T> struct Seg { // comb(ID,b) = b\n    const T ID = 0; T comb(T a, T b) { return max(a, b); }\n    int n; vector<T> seg;\n    void init(int _n) { n = _n; seg.assign(2 * n, ID); }\n    void pull(int p) { seg[p] = comb(seg[2 * p], seg[2 * p + 1]); }\n    void upd(int p, T val) { // set val at position p\n        seg[p += n] = val; for (p /= 2; p; p /= 2) pull(p);\n    }\n    T query(int l, int r) { // min on interval [l, r]\n        T ra = ID, rb = ID;\n        for (l += n, r += n + 1; l < r; l /= 2, r /= 2) {\n            if (l & 1) ra = comb(ra, seg[l++]);\n            if (r & 1) rb = comb(seg[--r], rb);\n        }\n        return comb(ra, rb);\n    }\n};\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = (int)queries.size();\n        const int N = 1e5 + 5;\n        vector<int> pos(N);\n        set<int> st;\n        st.insert(0);\n        Seg<int> seg;\n        seg.init(N);\n        vector<bool> ans;\n        for (auto cur : queries) {\n            int t = cur[0];\n            if (t == 1) {\n                int x = cur[1];\n                auto it = st.lower_bound(x);\n                int right = it == st.end() ? x : *it;\n                int left = 0;\n                    it--;\n                    left = *it;\n                \n                // cout<<\"right: \"<<right<<\" \"<<\"left: \"<<left<<\" x: \"<<x<<\"\\n\";\n                pos[x] = x - left;\n                seg.upd(x, x - left);\n                if (right != x) {\n                    pos[right] = right - x;\n                    seg.upd(right, right - x);\n                }\n                st.insert(x);\n            }\n            else {\n                int u = cur[1], v = cur[2];\n\n                auto it = st.lower_bound(u);\n                \n                int left=0;\n         \n                    it--; \n                    left=*it;\n                \n                // cout<<\"u: \"<<u<<\" \"<<\"v: \"<<v<<\" \"<<\"left: \"<<left<<\"\\n\";\n\n                int here = u - left;\n                ckmax(here, seg.query(0, left));\n                ans.push_back((here>=v));\n                // cout<<\"here: \"<<here<<endl;\n\n            }\n            \n        }\n        return ans;\n    }\n\n};\n\n\n\n",
    "submit_ts": 1716650455.0
}