{
    "username": "CatMachina",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int mod = 1e9 + 7;\n        vector<int> reqs (n, -1);\n        for(int i = 0; i < requirements.size(); ++i) {\n            reqs[requirements[i][0]] = requirements[i][1];\n        }\n        vector<int> prev(401, 0);\n        prev[0] = 1;\n        if(reqs[0] != -1 && reqs[0] != 0) return 0;\n        vector<int> dp(401, 0);\n        for(int i = 1; i < n; ++i) {\n            for(int j = 0; j < i+1; ++j) { // amount of added inversions\n                int start = j, end = 400;\n                if(reqs[i] != -1 && j > reqs[i]) break;\n                if(reqs[i] != -1) start = end = reqs[i];\n                for(int k = start; k <= end; ++k) { // new inversion count\n                    dp[k] = (dp[k] + prev[k-j]) % mod;\n                }\n            }\n            // for(int j = 0; j <= 10; ++j) cout << prev[j] << \" \";\n            // cout << \"\\n\";\n            prev = dp;\n            dp = vector<int>(401, 0);\n        }\n        // for(int j = 0; j <= 10; ++j) cout << prev[j] << \" \";\n        // cout << \"\\n\\n\";\n        int ans = 0;\n        for(int i : prev) ans = (ans + i) % mod;\n        return ans;\n    }\n};",
    "submit_ts": "1719068271",
    "subm_id": "1296759308"
}