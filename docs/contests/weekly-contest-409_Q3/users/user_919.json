{
    "username": "equinox-cz",
    "submission": "template <class Info, class Tag>\nstruct LazySegmentTree {\n    const int n;\n    std::vector<Info> info;\n    std::vector<Tag> tag;\n    LazySegmentTree(int _n) : n(_n), info(2 << (32 - __builtin_clz(n))), tag(2 << (32 - __builtin_clz(n))){}\n    \n    void pull(int p) {\n        info[p] = info[p << 1] + info[p << 1 | 1];\n    }\n\n    void apply(int p, const Tag &t) {\n        info[p].apply(t);\n        tag[p].apply(t);\n    }\n\n    void push(int p) {\n        apply(p << 1, tag[p]);\n        apply(p << 1 | 1, tag[p]);\n        tag[p] = Tag();\n    }\n\n    template<class T>\n    LazySegmentTree(std::vector<T>& _init): LazySegmentTree(_init.size()) {\n        auto build = [&](auto&& self, int p, int l, int r) {\n            if (l == r) {\n                info[p] = { _init[l] };\n                return;\n            }\n            int mid = l + r >> 1;\n            self(self, p << 1, l, mid), self(self, p << 1 | 1, mid + 1, r);\n            pull(p);\n        };\n        build(build, 1, 0, n - 1);\n    }\n\n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l > y || r < x) return Info();\n        if (x <= l && r <= y) \n            return info[p];\n        push(p);\n        int mid = l + r >> 1;\n        return rangeQuery(p << 1, l, mid, x, y) + rangeQuery(p << 1 | 1, mid + 1, r, x, y);\n    }\n\n    Info rangeQuery(int l, int r) {\n        return rangeQuery(1, 0, n - 1, l, r);\n    }\n\n    void rangeApply(int p, int l, int r, int x, int y, const Tag &v){\n        if (l > y || r < x) return;\n        if (x <= l && r <= y) { \n            apply(p, v);\n            return;\n        }\n\n        int mid = l + r >> 1;\n        push(p);\n        rangeApply(p << 1, l, mid, x, y, v);\n        rangeApply(p << 1 | 1, mid + 1, r, x, y, v);\n        pull(p);\n    }\n\n    void rangeApply(int l, int r, const Tag &v) {\n        if (l > r) return;\n        return rangeApply(1, 0, n - 1, l, r, v);\n    }\n};\n\nstruct Tag {\n    bool add = 0;\n\n    void apply(const Tag& t) {\n        add = add || t.add;\n    }\n};\n\nstruct Info {\n    int sum = 0;\n    void apply(const Tag &t) {\n        if (t.add)\n            sum = 0;\n    }\n};\n\nInfo operator + (const Info &x, const Info &y) {\n    return { x.sum + y.sum };\n}\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        std::vector<int> a(n, 1);\n        a[0] = 0;\n        LazySegmentTree<Info, Tag> sgt(a);\n        std::vector<int> res;\n        for (auto& q : queries) {\n            int a = q[0], b = q[1];\n            sgt.rangeApply(a + 1, b - 1, Tag{true});\n            res.push_back(sgt.rangeQuery(0, n - 1).sum);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722742815",
    "subm_id": "552347049"
}