{
    "username": "Ray_1502",
    "submission": "class Solution {\npublic:\n//     void merge(vector<int>& nums, vector<int>& target, int const left, int const mid,\n//            int const right)\n// {\n//     int const subArrayOne = mid - left + 1;\n//     int const subArrayTwo = right - mid;\n\n//     // Create temp arrays\n//     auto *leftArray = new int[subArrayOne],\n//          *rightArray = new int[subArrayTwo];\n\n//     // Copy data to temp arrays leftArray[] and rightArray[]\n//     for (auto i = 0; i < subArrayOne; i++)\n//         leftArray[i] = array[left + i];\n//     for (auto j = 0; j < subArrayTwo; j++)\n//         rightArray[j] = array[mid + 1 + j];\n\n//     auto indexOfSubArrayOne = 0, indexOfSubArrayTwo = 0;\n//     int indexOfMergedArray = left;\n\n//     // Merge the temp arrays back into array[left..right]\n//     while (indexOfSubArrayOne < subArrayOne\n//            && indexOfSubArrayTwo < subArrayTwo) {\n//         if (leftArray[indexOfSubArrayOne]\n//             <= rightArray[indexOfSubArrayTwo]) {\n//             array[indexOfMergedArray]\n//                 = leftArray[indexOfSubArrayOne];\n//             indexOfSubArrayOne++;\n//         }\n//         else {\n//             array[indexOfMergedArray]\n//                 = rightArray[indexOfSubArrayTwo];\n//             indexOfSubArrayTwo++;\n//         }\n//         indexOfMergedArray++;\n//     }\n\n//     // Copy the remaining elements of\n//     // left[], if there are any\n//     while (indexOfSubArrayOne < subArrayOne) {\n//         array[indexOfMergedArray]\n//             = leftArray[indexOfSubArrayOne];\n//         indexOfSubArrayOne++;\n//         indexOfMergedArray++;\n//     }\n\n//     // Copy the remaining elements of\n//     // right[], if there are any\n//     while (indexOfSubArrayTwo < subArrayTwo) {\n//         array[indexOfMergedArray]\n//             = rightArray[indexOfSubArrayTwo];\n//         indexOfSubArrayTwo++;\n//         indexOfMergedArray++;\n//     }\n//     delete[] leftArray;\n//     delete[] rightArray;\n// }\n\n// begin is for left index and end is right index\n// of the sub-array of arr to be sorted\n// void mergeSort(vector<int>& nums, vector<int>& target, int begin, int end)\n// {\n//     if (begin >= end)\n//         return;\n\n//     int mid = begin + (end - begin) / 2;\n//     mergeSort(nums, target, begin, mid);\n//     mergeSort(nums, target, mid + 1, end);\n//     merge(nums, target, begin, end);\n// }\n\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        long long ans = 0;\n        long long pref[n], d[n];\n        long long diff = 0;\n        pref[0] = 0;\n        \n        for(int i = 1; i < n; i++)\n            pref[i] = pref[i - 1] + target[i];\n        \n        for(int i = 0; i < n; i++){\n           // ans += abs(nums[i] - target[i]);\n            d[i] = (target[i] - nums[i]);\n        }\n        for(int i = 0; i < n; i++){\n            if(i == 0){\n               \n                    \n                    long long val = abs(d[i]) - abs(diff);\n                    if(val > 0)\n                        ans += val;\n                \n                 diff = d[i]; \n            \n            }\n            else if((d[i - 1] > 0 && d[i] > 0) || (d[i] < 0 && d[i - 1] < 0)){\n                     int val = abs(d[i]) - abs(diff);\n                    if(val > 0)\n                        ans += val;\n                \n                 diff = d[i];\n            } \n            else{\n                ans += abs(d[i]);\n                diff = d[i];\n            }\n            \n        }      \n       // mergeSort(nums, target, 0, n - 1);\n        return ans;\n    }\n};",
    "submit_ts": "1721533347",
    "subm_id": "1328006941"
}