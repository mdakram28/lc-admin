{
    "username": "inversionpeter",
    "submission": "struct TrieNode {\n    int cost;\n    char nowLetter;\n    unordered_map <char, TrieNode*> nexts;\n    \n    TrieNode() {}\n    \n    TrieNode(char letter, int cost):nowLetter(letter), cost(cost) {}\n} *root, *nowAt;\n\nint DP[50005];\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new TrieNode('$', -1);\n        for (int i = 0; i != words.size(); ++i) {\n            nowAt = root;\n            for (char c : words[i]) {\n                if (!nowAt->nexts.count(c)) {\n                    nowAt->nexts[c] = new TrieNode(c, -1);\n                }\n                nowAt = nowAt->nexts[c];\n            }\n            if (nowAt->cost != -1) {\n                nowAt->cost = min(nowAt->cost, costs[i]);\n            }\n            else {\n                nowAt->cost = costs[i];\n            }\n        }\n        fill(DP + 1, DP + target.size() + 1, 2000000000);\n        for (int i = 0; i != target.size(); ++i) {\n            nowAt = root;\n            for (int j = i; j != target.size(); ++j) {\n                if (!nowAt->nexts.count(target[j])) {\n                    break;\n                }\n                nowAt = nowAt->nexts[target[j]];\n                if (nowAt->cost != -1) {\n                    DP[j + 1] = min(DP[j + 1], DP[i] + nowAt->cost);\n                    //cout << i << ' ' << j << '\\n';\n                }\n            }\n        }\n        return (DP[target.size()] == 2000000000 ? -1 : DP[target.size()]);\n    }\n};",
    "submit_ts": "1720320968",
    "subm_id": "1312309736"
}