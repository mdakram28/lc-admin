{
    "username": "night_732",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        multiset<int> p[4];\n        for(int i = 0; i < n; i++) {\n            int x = points[i][0], y = points[i][1];\n            p[0].insert(x + y);\n  \t\t    p[1].insert(-x + y);\n  \t\t    p[2].insert(x - y);\n  \t\t    p[3].insert(-x - y);\n        }\n        // for(int i = 0; i < 4; i++) sort(p[i].begin(), p[i].end());\n        // int mx[4] = {0, 0, 0, 0};\n        int mi = 1e9;\n        for(int i = 0; i < n; i++) {\n            int x = points[i][0], y = points[i][1];\n            int t[4] = {\n                x + y,\n                -x + y,\n                x - y,\n                -x - y\n            };\n            int mx = 0;\n            for(int j = 0; j < 4; j++) {\n                p[j].erase(p[j].find(t[j]));\n                mx = max(mx, *(--p[j].end()) - *p[j].begin());\n                p[j].insert(t[j]);\n            }\n            mi = min(mi, mx);\n        }\n        return mi;\n    }\n};"
}