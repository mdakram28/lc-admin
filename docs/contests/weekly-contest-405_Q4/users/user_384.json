{
    "username": "Swathi_2102",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        m = len(words)\n\n        word_cost_map = {}\n        for idx, word in enumerate(words):\n            word_cost_map[word] = min(word_cost_map.get(word, float('inf')), costs[idx])\n\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            for w in word_cost_map:\n                if i >= len(w) and target[i - len(w):i] == w:\n                    dp[i] = min(dp[i], dp[i - len(w)] + word_cost_map[w])\n\n        return dp[n] if dp[n] != float('inf') else -1\n\n        ",
    "submit_ts": "1720322002",
    "subm_id": "1312338058"
}