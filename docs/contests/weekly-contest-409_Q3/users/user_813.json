{
    "username": "Lak-Boy",
    "submission": "class Solution {\n    private static final int INF = (int)1e9;\n\n    // Define a Node class for the linked list\n    static class Node {\n        int value;\n        Node next;\n        Node(int val) {\n            value = val;\n            next = null;\n        }\n    }\n\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        // Array to keep track of the node pointers\n        Node[] nodePointers = new Node[n];\n        \n        int remainingNodes = n; // Count of nodes in the list\n        Node headNode = new Node(0);\n        nodePointers[0] = headNode;\n        \n        Node currentNode = headNode;\n        for (int i = 1; i < n; i++) {\n            currentNode.next = new Node(i);\n            currentNode = currentNode.next;\n            nodePointers[i] = currentNode;\n        }\n\n        int[] shortestPaths = new int[queries.length];\n        for (int i = 0; i < queries.length; i++) {\n            int startIndex = queries[i][0];\n            int endIndex = queries[i][1];\n            \n            Node startNode = nodePointers[startIndex];\n            Node endNode = nodePointers[endIndex];\n\n            if (startNode != null && endNode != null && startIndex != endIndex) {\n                Node tempNode = startNode.next;\n                while (tempNode != null && tempNode != endNode) {\n                    remainingNodes--;\n                    Node nextNode = tempNode.next;\n                    nodePointers[tempNode.value] = null; // Mark the node as removed in the nodePointers array\n                    tempNode.next = null;\n                    tempNode = nextNode;\n                }\n                // Link startNode directly to endNode\n                startNode.next = endNode;\n            }\n\n            shortestPaths[i] = remainingNodes - 1;\n        }\n\n        return shortestPaths;\n    }\n\n    public static void main(String[] args) {\n        Solution sol = new Solution();\n        int n = 5;\n        int[][] queries = {{2, 4}, {0, 2}, {0, 4}};\n        \n        int[] result = sol.shortestDistanceAfterQueries(n, queries);\n        for (int length : result) {\n            System.out.print(length + \" \");\n        }\n    }\n}\n",
    "submit_ts": "1722742889",
    "subm_id": "1343779412"
}