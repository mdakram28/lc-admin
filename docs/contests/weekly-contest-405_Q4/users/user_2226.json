{
    "username": "sparklingness",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.chd = {}\n        self.c = inf\n\ndef build_trie(words, costs):\n    root = TrieNode()\n    for w, cost in zip(words, costs):\n        n = root\n        for c in w[::-1]:\n            if c not in n.chd:\n                n.chd[c] = TrieNode()\n            n = n.chd[c]\n        n.c = min(n.c, cost)\n    return root\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        dp = [inf] * (len(target)+1)\n        dp[0] = 0\n        root = build_trie(words, costs)\n        \n        for i in range(1, len(target)+1):\n            n = root\n            for j in range(i-1, -1, -1):\n                if target[j] in n.chd:\n                    n = n.chd[target[j]]\n                    if n.c < inf:\n                        dp[i] = min(dp[i], dp[j] + n.c)\n                else:\n                    break\n        return dp[-1] if dp[-1] != inf else -1\n        ",
    "submit_ts": "1720324777",
    "subm_id": "1312407990"
}