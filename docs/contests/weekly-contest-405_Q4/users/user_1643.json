{
    "username": "pNitesh9",
    "submission": "// class Solution {\n// private:\n//     int dp[50001];\n\n//     int f(int ind, string s, unordered_set<string> &wordSet, unordered_map<string, int> &mp) {\n//         if (ind == s.length()) return 0;\n\n//         if (dp[ind] != -1) return dp[ind];\n\n//         int minCost = INT_MAX;\n//         string temp = \"\";\n\n//         for (int i = ind; i < s.length(); i++) {\n//             temp += s[i];\n\n//             if (wordSet.find(temp) != wordSet.end()) {\n//                 int currentCost = f(i + 1, s, wordSet, mp);\n//                 if (currentCost != INT_MAX) {\n//                     minCost = min(minCost, mp[temp] + currentCost);\n//                 }\n//             }\n//         }\n\n//         return dp[ind] = minCost;\n//     }\n\n// public:\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         unordered_set<string> wordSet(words.begin(), words.end());\n//         int n = target.length();\n\n//         unordered_map<string, int> mp;\n//         for (int i = 0; i < words.size(); i++) {\n//             if(mp.find(words[i]) != mp.end()){\n//                 mp[words[i]] = min(mp[words[i]], costs[i]);\n//             }\n//             else mp[words[i]] = costs[i];\n//         }\n\n//         memset(dp, -1, sizeof(dp));\n//         int result = f(0, target, wordSet, mp);\n\n//         return result == INT_MAX ? -1 : result;\n//     }\n// };\n\n#include <bits/stdc++.h>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    bool isWord;\n    TrieNode() : cost(INT_MAX), isWord(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children[ch]) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->isWord = true;\n        node->cost = min(node->cost, cost);  // Store the minimum cost for the word\n    }\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;  // Base case: no cost to make an empty string\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;  // Skip if this position is unreachable\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                if (!node->children[target[j]]) break;\n                node = node->children[target[j]];\n                if (node->isWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322128",
    "subm_id": "1312341461"
}