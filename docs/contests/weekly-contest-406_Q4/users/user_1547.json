{
    "username": "770rajmehta",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n       vector<pair<int, bool>> cuts;\n\n        // Add all horizontal cuts with an indicator that they are horizontal\n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            cuts.push_back({horizontalCut[i], true});\n        }\n\n        // Add all vertical cuts with an indicator that they are vertical\n        for (int i = 0; i < verticalCut.size(); ++i) {\n            cuts.push_back({verticalCut[i], false});\n        }\n\n        // Sort all cuts based on the cost in descending order\n        sort(cuts.begin(), cuts.end(), greater<pair<int, bool>>());\n\n        long long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        // Iterate through the sorted cuts\n        for (auto& cut : cuts) {\n            if (cut.second) { // horizontal cut\n                totalCost += static_cast<long long>(cut.first) * verticalPieces;\n                ++horizontalPieces;\n            } else { // vertical cut\n                totalCost += static_cast<long long>(cut.first) * horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n\n        return totalCost; \n    }\n};",
    "submit_ts": "1720926321",
    "subm_id": "1320282720"
}