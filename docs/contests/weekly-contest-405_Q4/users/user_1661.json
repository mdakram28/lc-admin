{
    "username": "faizanhussain2310",
    "submission": "#include<bits/stdc++.h>\n#define ll long long\n\nstruct Node {\n    Node* links[26];\n    vector<pair<ll,ll>> ending;\n\n    bool containsKey(char ch) {\n        return (links[ch - 'a'] != NULL); \n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a']; \n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    void pushEnding(pair<ll,ll> ele) {\n        ending.push_back(ele);\n    }\n    \n};\n\n// Define a class for the\n// trie data structure\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node(); \n    }\n\n    void insert(string word,ll idx,ll c) {\n        Node* node = root; \n        for (int i = 0; i < word.size(); i++) { \n            if (!node->containsKey(word[i])) {\n                node->put(word[i], new Node()); \n            }\n            node = node->get(word[i]);\n        }\n        node->pushEnding({idx,c});\n    }\n};\n \nclass Solution {\npublic:\n    ll dp[50005];\n\n    ll helper(ll idx,string &target,Trie &trie,vector<string> &words) {\n        if(idx>=(ll)target.length()) {\n            return 0;\n        }\n\n        if(dp[idx]!=-1) {\n            return dp[idx];\n        }\n\n        ll ans=1e10;\n        \n        // cout<<\"idx = \"<<idx<<\"\\n\";\n        Node *root=trie.root;\n        for(int i=idx; i<(ll)target.length(); i++) {\n            if(!root->containsKey(target[i])) break;\n            root=root->get(target[i]);\n\n            for(auto x : root->ending) {\n                ll cost=x.second;\n                ll index=x.first;\n                ll len=words[index].length();\n\n                if(idx+len-1<(ll)target.length()) {\n                    // cout<<\"idx = \"<<idx<<\" \"\n                    ans=min(ans,cost+helper(idx+len,target,trie,words));\n                }\n            }   \n        }\n\n        return dp[idx]=ans;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for(int i=0; i<words.size(); i++) {\n            trie.insert(words[i],i,costs[i]);\n        }\n\n        for(int i=0; i<=target.length(); i++) {\n            dp[i]=-1;\n        }\n\n        ll ans=helper(0,target,trie,words);\n\n        if(ans>=1e10) ans=-1;\n\n        return ans;\n    }\n};",
    "submit_ts": "1720324439",
    "subm_id": "1312399491"
}