{
    "username": "a0518",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n    \n    void build(int node, int l, int r, const vector<int>& arr) {\n        if (l == r) {\n            tree[node] = arr[l];\n        } else {\n            int mid = (l + r) / 2;\n            build(node * 2 + 1, l, mid, arr);\n            build(node * 2 + 2, mid + 1, r, arr);\n            tree[node] = tree[node * 2 + 1] & tree[node * 2 + 2];\n        }\n    }\n\n    int query(int node, int left_range, int right_range, int l, int r) {\n        if (l > right_range || r < left_range) return -1;\n        if (l >= left_range && r <= right_range) return tree[node];\n        int mid = (l + r) / 2;\n        int a = query(node * 2 + 1, left_range, right_range, l, mid);\n        int b = query(node * 2 + 2, left_range, right_range, mid + 1, r);\n        if (a != -1 && b != -1) return a & b;\n        if (a == -1) return b;\n        return a;\n    }\n\npublic:\n    SegmentTree(int n, const vector<int>& arr) : n(n) {\n        tree.resize(n * 4);\n        build(0, 0, n - 1, arr);\n    }\n\n    int query(int left_range, int right_range, int l, int r) {\n        return query(0, left_range, right_range, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        int best = INT_MAX;\n        SegmentTree st(n, nums);\n        for (int i = 0; i < n; ++i) {\n            int l = 0, r = i;\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                int v = st.query(mid, i, 0, n - 1);\n                best = min(best, abs(k - v));\n                if (v - k >= 0) r = mid - 1;\n                else l = mid + 1;\n            }\n        }\n        return best;\n    }\n};\n",
    "submit_ts": 1717297908.0
}