{
    "username": "Nikhil4615",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& array, int target) {\n        int size = array.size();\n        long long total = 0;\n        unordered_map<long long, long long> prefixSums;\n\n        for (int index = 0; index < size; ++index) {\n            unordered_map<long long, long long> currentSums;\n\n            // Check if the current element itself equals target\n            if (array[index] == target) {\n                ++total;\n            }\n\n            // Update the currentSums with the current element\n            currentSums[array[index]]++;\n\n            // Merge currentSums with prefixSums from previous iteration\n            for (auto& [value, frequency] : prefixSums) {\n                long long newAndResult = value & array[index];\n                if (newAndResult == target) {\n                    total += frequency;\n                }\n                currentSums[newAndResult] += frequency;\n            }\n\n            // Update prefixSums to be used in the next iteration\n            swap(prefixSums, currentSums);\n        }\n\n        return total;\n    }\n};",
    "submit_ts": "1720280853",
    "subm_id": "1311804380"
}