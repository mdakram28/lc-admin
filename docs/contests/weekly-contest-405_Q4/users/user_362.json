{
    "username": "ankitjha2603",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = inf\n\nclass Solution:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\n    def get_cost(self, start):\n        if start == self.len:\n            return 0\n        if self.dp[start] != -1:\n            return self.dp[start]\n        \n        node = self.root\n        res = inf\n        for i in range(start, self.len):\n            if self.target[i] not in node.children:\n                break\n            node = node.children[self.target[i]]\n            if node.cost != inf:\n                res = min(res, node.cost + self.get_cost(i + 1))\n        \n        self.dp[start] = res\n        return res\n    \n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        self.target = target\n        self.len = len(target)\n        self.dp = [-1] * self.len\n        \n        for word, cost in zip(words, costs):\n            self.insert(word, cost)\n        \n        result = self.get_cost(0)\n        return -1 if result == inf else result\n",
    "submit_ts": "1720321630",
    "subm_id": "1312328035"
}