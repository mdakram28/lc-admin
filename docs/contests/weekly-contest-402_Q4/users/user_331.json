{
    "username": "tttyyy49",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        \n        int[] arr = new int[n];\n        for (int i = 1; i < n - 1; ++i) {\n            if (isPeak(nums, i)) {\n                arr[i] = 1;\n            }\n        }\n        \n        SegmentTree tree = new SegmentTree(arr);\n        List<Integer> res = new ArrayList<>();\n        \n        for (int[] q : queries) {\n            if (q[0] == 2) {\n                int i = q[1], val = q[2];\n                nums[i] = val;\n                \n                tree.update(i - 1, isPeak(nums, i - 1) ? 1 : 0);\n                tree.update(i, isPeak(nums, i) ? 1 : 0);\n                tree.update(i + 1, isPeak(nums, i + 1) ? 1 : 0);\n            } else {\n                res.add(tree.query(q[1] + 1, q[2] - 1));\n            }\n        }\n        \n        return res;\n    }\n    \n    boolean isPeak(int[] nums, int i) {\n        int n = nums.length;\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n}\n\nclass SegmentTree {\n\n    static int init = 0;\n    static int func(int op1, int op2) {\n        return op1 + op2;\n    }\n\n    int[] t;\n    int n;\n\n    public SegmentTree(int[] a) {\n        n = a.length;\n        t = new int[n * 4];\n        build(a, 1, 0, n - 1);\n    }\n\n    private void build(int[] a, int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = a[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(a, v * 2, tl, tm);\n            build(a, v * 2 + 1, tm + 1, tr);\n            t[v] = func(t[v * 2], t[v * 2 + 1]);\n        }\n    }\n\n    // l and r are both inclusive\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n\n    private int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) return init;\n        if (l == tl && r == tr) return t[v];\n        int tm = (tl + tr) / 2;\n        int op1 = query(v * 2, tl, tm, l, Math.min(r, tm));\n        int op2 = query(v * 2 + 1, tm + 1, tr, Math.max(l, tm + 1), r);\n        return func(op1, op2);\n    }\n\n    void update(int pos, int newVal) {\n        update(1, 0, n - 1, pos, newVal);\n    }\n\n    private void update(int v, int tl, int tr, int pos, int newVal) {\n        if (tl == tr) {\n            t[v] = newVal;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm) {\n                update(v * 2, tl, tm, pos, newVal);\n            } else {\n                update(v * 2 + 1, tm + 1, tr, pos, newVal);\n            }\n            t[v] = func(t[v * 2], t[v * 2 + 1]);\n        }\n    }\n}",
    "submit_ts": "1718507226",
    "subm_id": "1289645097"
}