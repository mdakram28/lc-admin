{
    "username": "ananya_dixit",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& xCut, vector<int>& yCut) {\n        priority_queue<vector<int>>pq;\n\n        for(int i=0;i<xCut.size();i++){\n            pq.push({xCut[i], i, 1});\n        }\n\n        for(int i=0;i<yCut.size();i++){\n            pq.push({yCut[i], i, 0});\n        }\n\n        long long int xDone = 0, yDone = 0;\n        long long int ans = 0;\n\n        while(pq.size()){\n\n            vector<int>curr = pq.top();\n            pq.pop();\n\n            // cout<<curr[0]<<endl;\n\n            if(curr[2] == 1){\n                // find number of vertical cuts already done\n                ans += 1ll*(yDone+1)*curr[0];\n                xDone++;\n            }\n            else{\n                ans += 1ll*(xDone+1)*curr[0];\n                yDone++;\n            }\n\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720925582",
    "subm_id": "1320259511"
}