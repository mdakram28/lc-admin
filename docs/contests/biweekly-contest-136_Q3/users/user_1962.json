{
    "username": "Akash_si",
    "submission": "class Solution {\npublic:\n\nbool customCompare(const std::pair<int, int>* a, const std::pair<int, int>* b) {\n    // If the first elements are equal, compare by the second elements\n    if (a->first == b->first) {\n        return a->second < b->second;\n    }\n    return a->first < b->first;\n}\n\nvoid recur(vector<int>& nums, vector<vector<int>>& ans, int i, int n) {\n    if (i >= n) {\n        ans.push_back(nums);\n    }\n    for (int k = i; k < n; k++) {\n        if (i != k && nums[i] == nums[k]) continue;\n        swap(nums[i], nums[k]);\n        recur(nums, ans, i + 1, n);\n        swap(nums[i], nums[k]);\n    }\n}\n\nvoid helper(vector<vector<int>>& res, vector<int>& nums, int pos) {\n    if (pos == nums.size()) {\n        res.push_back(nums);\n    } else {\n        for (int i = pos; i < nums.size(); ++i) {\n            if (i > pos && nums[i] == nums[pos]) continue;\n            swap(nums[pos], nums[i]);\n            helper(res, nums, pos + 1);\n            swap(nums[pos], nums[i]); // Restore state immediately after recursion\n        }\n    }\n}\n    int func(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = 0;\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                vector<int> elements = {grid[i][j], grid[n - i - 1][j],\n                                        grid[i][m - j - 1],\n                                        grid[n - i - 1][m - j - 1]};\n\n                int ones = count(elements.begin(), elements.end(), 1);\n\n                ans += min(ones, 4 - ones);\n            }\n        }\n        return ans;\n    }\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = func(grid);\n\n        int possible = 0;\n        int count = 0;\n        if (n % 2 != 0) {\n            int midRow = n / 2;\n            for (int j = 0; j < m / 2; ++j) {\n                if (grid[midRow][j] != grid[midRow][m - j - 1]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[midRow][j] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n\n        if (m % 2 != 0) {\n            int midCol = m / 2;\n            for (int i = 0; i < n / 2; ++i) {\n                if (grid[i][midCol] != grid[n - i - 1][midCol]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[i][midCol] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            ans += 1;\n        }\n\n        if (possible == 0 && count % 2 != 0) {\n            ans += 2;\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722700098",
    "subm_id": "1343231641"
}