{
    "username": "Harsh_kunwar",
    "submission": "class SegmentTree\n{\npublic:\n    SegmentTree(const std::vector<int> &data)\n    {\n        n = data.size();\n        tree.resize(4 * n); // Allocate enough space for the segment tree\n        build(data, 0, 0, n - 1);\n    }\n\n    // Function to get the bitwise AND of a range [left, right)\n    int rangeAnd(int left, int right)\n    {\n        return rangeAndUtil(0, 0, n - 1, left, right);\n    }\n\nprivate:\n    std::vector<int> tree;\n    int n;\n\n    // Recursive function to build the segment tree\n    void build(const std::vector<int> &data, int node, int start, int end)\n    {\n        if (start == end)\n        {\n            tree[node] = data[start];\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            build(data, 2 * node + 1, start, mid);\n            build(data, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Recursive function to get the bitwise AND of a range [left, right)\n    int rangeAndUtil(int node, int start, int end, int left, int right)\n    {\n        if (right < start || end < left)\n        {\n            return INT_MAX; // Out of range\n        }\n        if (left <= start && end <= right)\n        {\n            return tree[node]; // Completely within range\n        }\n        int mid = (start + end) / 2;\n        int leftAnd = rangeAndUtil(2 * node + 1, start, mid, left, right);\n        int rightAnd = rangeAndUtil(2 * node + 2, mid + 1, end, left, right);\n        return leftAnd & rightAnd;\n    }\n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        SegmentTree st(nums);\n    int n = nums.size();\n    long long res = 0;\n    for (int i = 0; i < n; i++)\n    {\n        int l = i;\n        int r = n - 1;\n        int ans = -1;\n        while (l <= r)\n        {\n            int mid = (l + r) / 2;\n            int p = st.rangeAnd(i, mid);\n            if (p < k)\n            {\n                r = mid - 1;\n            }\n            else\n            {\n                ans = mid;\n                l = mid + 1;\n            }\n        }\n        int ans2 = -1;\n        l = i;\n        r = n - 1;\n        while (l <= r)\n        {\n            int mid = (l + r) / 2;\n            int p = st.rangeAnd(i, mid);\n            if (p <= k)\n            {\n                ans2 = mid;\n\n                r = mid - 1;\n            }\n            else\n            {\n\n                l = mid + 1;\n            }\n        }\n        if (ans2 == -1 or ans == -1)\n        {\n            continue;\n        }\n        res += (ans - ans2 + 1);\n    }\n    return res;\n    }\n};",
    "submit_ts": "1720278494",
    "subm_id": "1311711600"
}