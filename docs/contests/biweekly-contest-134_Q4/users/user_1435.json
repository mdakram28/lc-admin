{
    "username": "tom7em",
    "submission": "class BitCounter:\n    max_bits = 30\n\n    def __init__(self):\n        self.num_count = 0\n        self.bit_count = [0] * self.max_bits\n    \n    def add(self, value):\n        self.num_count += 1\n        for i in range(self.max_bits):\n            self.bit_count[i] += bool(value & 1 << i)\n\n    def remove(self, value):\n        self.num_count -= 1\n        for i in range(self.max_bits):\n            self.bit_count[i] -= bool(value & 1 << i)\n\n    def get_and_value(self):\n        value = 0\n        for i in range(self.max_bits):\n            if self.bit_count[i] == self.num_count:\n                value |= 1 << i\n        return value\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        \n        def lte(value):\n            return value | k == k\n\n        def lt(value):\n            return value | k == k and value < k \n        \n        res = 0\n        x, y = -1, -1\n        for i in range(n):\n            if x < i:\n                x = i\n                x_bc = BitCounter()\n                x_bc.add(nums[i])\n            if y < i:\n                y = i\n                y_bc = BitCounter()\n                y_bc.add(nums[i])\n            while x < n and not lte(x_bc.get_and_value()):\n                x += 1\n                if x < n:\n                    x_bc.add(nums[x])\n            while y < n and not lt(y_bc.get_and_value()):\n                y += 1\n                if y < n:\n                    y_bc.add(nums[y])\n            res += y - x\n            x_bc.remove(nums[i])\n            y_bc.remove(nums[i])\n        return res",
    "submit_ts": "1720281553",
    "subm_id": "1311829521"
}