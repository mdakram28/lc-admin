{
    "username": "sethles",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        SegmentTree root = new SegmentTree(0, nums.length - 1, nums);\n        int minDif = Integer.MAX_VALUE;\n        for (int l = 0; l < nums.length; l++) {\n            if (nums[l] <= k) {\n                if (nums[l] == k) return 0;\n                int dif = k - nums[l];\n                if (dif < minDif) minDif = dif;\n                continue;\n            }\n            if (nums[l] > k) {\n                int dif = nums[l] - k;\n                if (dif < minDif) minDif = dif;\n            }\n            int lr = l, rr = nums.length - 1;\n            while (lr < rr) {\n                int mid = (lr + rr + 1) / 2;\n                int and = root.and(l, mid);\n                if (and == k) return 0;\n                if (and < k) {\n                    if (k - and < minDif) minDif = k - and;\n                    rr = mid - 1;\n                } else {\n                    if (and - k < minDif) minDif = and - k;\n                    lr = mid;\n                }\n            }\n            if (root.and(l, nums.length - 1) > k) continue;\n            lr = l; rr = nums.length - 1;\n            while (lr < rr) {\n                int mid = (lr + rr) / 2;\n                int and = root.and(l, mid);\n                if (and == k) return 0;\n                if (and >= k) {\n                    if (and - k < minDif) minDif = and - k;\n                    lr = mid + 1;\n                } else {\n                    if (k - and < minDif) minDif = k - and;\n                    rr = mid;\n                }\n            }\n        }\n        return minDif;\n    }\n}\nclass SegmentTree {\n    int l, r;\n    int mid, and;\n    SegmentTree left, right;\n    public SegmentTree(int l, int r, int[] ar) {\n        this.l = l; this.r = r;\n        mid = (l + r) / 2;\n        if (l == r) {\n            and = ar[l];\n            return;\n        }\n        left = new SegmentTree(l, mid, ar);\n        right = new SegmentTree(mid + 1, r, ar);\n        and = left.and & right.and;\n    }\n    public int and(int rl, int rr) {\n        if (rl > r || rr < l) {\n            System.out.println(\"!\");\n            return (-1) ^ (1 << 31);\n        }\n        if (rl <= l && rr >= r) return and;\n        if (rl <= mid) {\n            if (rr > mid) return left.and(rl, rr) & right.and(rl, rr);\n            return left.and(rl, rr);\n        }\n        return right.and(rl, rr);\n    }\n}",
    "submit_ts": 1717296498.0
}