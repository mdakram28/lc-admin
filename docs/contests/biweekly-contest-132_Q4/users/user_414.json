{
    "username": "counter98",
    "submission": "/******** Debug Code *******/\n#include <bits/stdc++.h>\n#define cerr cout\nusing namespace std;\nvoid __print(int x) { cerr << x; }\nvoid __print(long x) { cerr << x; }\nvoid __print(long long x) { cerr << x; }\nvoid __print(unsigned x) { cerr << x; }\nvoid __print(unsigned long x) { cerr << x; }\nvoid __print(unsigned long long x) { cerr << x; }\nvoid __print(float x) { cerr << x; }\nvoid __print(double x) { cerr << x; }\nvoid __print(long double x) { cerr << x; }\nvoid __print(char x) { cerr << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cerr << (x ? \"true\" : \"false\"); }\ntemplate <typename A>void __print(const A &x);\ntemplate <typename A, typename B>void __print(const pair<A, B> &p);\ntemplate <typename... A>void __print(const tuple<A...> &t);\ntemplate <typename T>void __print(stack<T> s);\ntemplate <typename T>void __print(queue<T> q);\ntemplate <typename T, typename... U>void __print(priority_queue<T, U...> q);\ntemplate <typename A>void __print(const A &x) {bool first = true;cerr << '{';for (const auto &i : x) {    cerr << (first ? \"\" : \",\"), __print(i);    first = false;}cerr << '}';}\ntemplate <typename A, typename B>void __print(const pair<A, B> &p) {cerr << '(';__print(p.first);cerr << ',';__print(p.second);cerr << ')';}\ntemplate <typename... A>void __print(const tuple<A...> &t) {bool first = true;cerr << '(';apply([&first](const auto &...args) { ((cerr << (first ? \"\" : \",\"), __print(args), first = false), ...); }, t);cerr << ')';}\ntemplate <typename T>void __print(stack<T> s) {vector<T> debugVector;while (!s.empty()) {    T t = s.top();    debugVector.push_back(t);    s.pop();}reverse(debugVector.begin(), debugVector.end());__print(debugVector);}\ntemplate <typename T>void __print(queue<T> q) {vector<T> debugVector;while (!q.empty()) {    T t = q.front();    debugVector.push_back(t);    q.pop();}__print(debugVector);}\ntemplate <typename T, typename... U>void __print(priority_queue<T, U...> q) {vector<T> debugVector;while (!q.empty()) {    T t = q.top();    debugVector.push_back(t);    q.pop();}__print(debugVector);}void _print() { cerr << \"]\\n\"; }\ntemplate <typename Head, typename... Tail>void _print(const Head &H, const Tail &...T) {__print(H);if (sizeof...(T))    cerr << \", \";_print(T...);}\n#define debug(x...) cerr << \"[\" << #x << \"] = [\"; _print(x)\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k+1, -1));\n        dp[0][0] = 1;\n        int ans = 1;\n        map<int, int> m;\n        m[nums[0]] = 0;\n        vector<int> d(k+1, -1);\n        d[0] = 1;\n        for (int i = 1; i < n; i++) {\n            dp[i][0] = 1;\n            for (int j = k; j >= 1; j--) {\n                if (d[j-1] == -1) continue;\n                dp[i][j] = max(dp[i][j], d[j-1]+1);\n                d[j] = max(d[j], dp[i][j]);\n            }\n            if (m.find(nums[i]) == m.end()) {\n                m[nums[i]] = i;\n                continue;\n            }\n            int idx = m[nums[i]];\n            for (int j = 0; j <= k; j++) {\n                if (dp[idx][j] != -1) {\n                    dp[i][j] = max(dp[i][j], dp[idx][j]+1);\n                    d[j] = max(d[j], dp[i][j]);\n                }\n            }\n            m[nums[i]] = i;\n        }\n        ans = *max_element(d.begin(), d.end());\n        return ans;\n    }\n};",
    "submit_ts": 1717861551.0
}