{
    "username": "kHb9Q9dLoRkkQFkIWDj0zu7PtJ",
    "submission": "class Solution {\nprivate:\n    int getMaxDistNode(vector<int> &depths) {\n        int n = depths.size(), best = -1, node = -1;\n        for(int i=0;i<n;i++) {\n            if(depths[i] > best)    {\n                best = depths[i];\n                node = i;\n            }\n        }\n        return node;\n    }\n    \n    void dfs(vector<vector<int>> &adj, vector<int> &depths, int root, int par, int d) {\n        depths[root] = d;\n        for(auto child: adj[root]) {\n            if(child == par)    continue;\n            dfs(adj, depths, child, root, d+1);\n        }\n    }\n    \n    vector<int> getDepths(vector<vector<int>> &adj, int root) {\n        int n = adj.size();\n        vector<int> depths(n, 0);\n        dfs(adj, depths, root, -1, 0);\n        return depths;\n    }\n    \n    int findDiameter(vector<vector<int>>& edges) {\n        int n = (int)edges.size() + 1;\n        vector<vector<int> > adj(n, vector<int> ());\n        for(auto e: edges) {\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        \n        vector<int> depths = getDepths(adj, 0);\n        int node = getMaxDistNode(depths);\n        \n        depths = getDepths(adj, node);\n        node = getMaxDistNode(depths);\n        return depths[node];\n    }\n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = findDiameter(edges1);\n        int d2 = findDiameter(edges2);\n        return max({d1, d2, (((d1 + 1) / 2) + ((d2 + 1) / 2) + 1)});\n    }\n};",
    "submit_ts": 1719717892.0
}