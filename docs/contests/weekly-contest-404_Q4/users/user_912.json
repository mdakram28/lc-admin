{
    "username": "ywjameslin",
    "submission": "class Solution {\n\n    /**\n     * @param Integer[][] $edges1\n     * @param Integer[][] $edges2\n     * @return Integer\n     */\n    function minimumDiameterAfterMerge($edges1, $edges2) {\n        $ans = 1;\n        $maxL = 0;\n        foreach ([$edges1, $edges2] as $edges) {\n            $pq = new \\SplPriorityQueue();\n            $graph = [];\n            $dCount = [];\n            foreach ($edges as $edge) {\n                $graph[$edge[0]][$edge[1]] = true;\n                $graph[$edge[1]][$edge[0]] = true;\n                ++ $dCount[$edge[0]];\n                ++ $dCount[$edge[1]];\n            }\n\n            foreach ($dCount as $d => $cnt) {\n                if ($cnt == 1) {\n                    $pq->insert($d, $d);\n                }\n            }\n            $length = 0;\n            while (!$pq->isEmpty()) {\n                $map = [];\n                while (!$pq->isEmpty()) {\n                    $n = $pq->extract();\n                    foreach ($graph[$n] as $next => $val) {\n                        -- $dCount[$next];\n                        $map[$next] = true;\n                    }\n                }\n                $nG = [];\n                foreach ($map as $next => $val) {\n                    if ($dCount[$next] == 1) {\n                        $nG[] = $next;\n                    }\n                }\n                if (count($nG) == 2 && $graph[$nG[0]][$nG[1]]) {\n                    $length += 2;\n                    $maxL = max($maxL, $length * 2 - 1);\n                    break;\n                }\n                foreach ($map as $next => $val) {\n                    if ($dCount[$next] == 1) {\n                        $pq->insert($next, $next);\n                    }\n                }\n                ++ $length;\n                $maxL = max($maxL, $length * 2);\n            }\n            $ans += $length;\n        }\n\n        return max($ans, $maxL);\n    }\n}",
    "submit_ts": 1719719895.0
}