{
    "username": "jfkjfk",
    "submission": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define fastio()        ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD             1000000007\n#define MOD1            998244353\n#define INF             1e18\n#define endl            \"\\n\"\n#define pb              push_back\n#define eb              emplace_back\n#define mp              make_pair\n#define gcd(a, b)       __gcd(a,b)\n#define ff              first\n#define ss              second\n#define PI              3.141592653589793238462\n#define set_bits(x)     __builtin_popcountll(x)\n#define all(x)          (x).begin(), (x).end()\n\ntypedef long long ll;\ntypedef long double lld;\n\n/*---------------------------------------------------------------------------------------------------------------------------*/\nll power(ll a, ll n){\n    ll res = 1;\n    while(n){\n        if(n & 1){\n            res = (res * a) % MOD;\n        }\n        a = (a * a) % MOD;\n        n >>= 1;\n    }\n    return res;\n}\n/*---------------------------------------------------------------------------------------------------------------------------*/\n\nclass Solution {\npublic:\n    \n    struct Trie{\n        unordered_map<char,Trie*> mp;\n        vector<pair<int,int>> vp;\n    };\n    \n    struct TrieCmp{\n        Trie* node;\n        TrieCmp(){\n            node = new Trie();\n        }\n        \n        void helper(string &word, int idx, int cost){\n            Trie* node1 = node;\n            for(auto &it : word){\n                if(node1->mp.count(it)==0){\n                    node1->mp[it] = new Trie();\n                }\n                node1 = node1->mp[it];\n            }\n            node1->vp.pb({idx, cost});\n        }\n    };\n\n    bool isPalindrome(string s){\n        int n = s.size();\n        for(int i=0; i<n/2; i++){\n            if(s[i] != s[n-i-1]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    bool isPrime(int n){\n        for(int i=2; i*i<=n; i++){\n            if(n % i == 0){\n                return false;\n            }\n        }\n        return true;\n    } \n    \n    int helper(string target, vector<string> &words, vector<int> &costs){\n        int n = target.size();\n        int arr[n+1];\n        for(int i=0; i<=n; i++){\n            arr[i] = 1e9;\n        }\n        arr[0] = 0;\n        TrieCmp trie;\n        int sz = words.size();\n        for(int i=0; i<sz; i++){\n            trie.helper(words[i],i,costs[i]);\n        }\n        for(int i=0; i<n; i++){\n            if(arr[i]==1e9){\n                continue;\n            }else{\n                Trie* node = trie.node;\n                for(int j=i; j<n; j++){\n                    if(node->mp.count(target[j])==0){\n                        break;\n                    }else{\n                        node = node->mp[target[j]];\n                        for(auto &it : node->vp){\n                            int wIdx = it.ff, wCost = it.ss;\n                            int length = words[wIdx].size();\n                            if(i + length <= n){\n                                arr[i + length] = min(arr[i + length], arr[i] + wCost);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if(arr[n]==1e9){\n            return -1;\n        }\n        return arr[n];\n    }\n    \n    int getAns(string target, vector<string>& words, vector<int>& costs){\n        int finalRes = helper(target, words, costs);\n        return finalRes;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int ans = getAns(target, words, costs);\n        return ans;\n    }\n};\n\n// void solve(ll tc){\n// }\n\n// int main(){\n//     fastio();\n\n//     ll t=1;\n//     cin >> t;\n\n//     for(ll i=1; i<=t; i++){\n//         // cout << \"Case #\" << i << \": \";\n//         solve(i);\n//     }\n\n//     return 0;\n// }",
    "submit_ts": "1720322854",
    "subm_id": "1312360835"
}