{
    "username": "WJTung",
    "submission": "class Solution {\n public:\n  int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n    sort(requirements.begin(), requirements.end());\n    for (int i = requirements.size() - 1; i >= 1; --i) {\n      requirements[i][1] -= requirements[i - 1][1];\n    }\n    vector<int> R(n, -1);\n    for (const vector<int>& requirement : requirements) {\n      if (requirement[1] < 0) {\n        return 0;\n      }\n      R[requirement[0]] = requirement[1];\n    }\n    if (R[0] > 0) {\n      return 0;\n    }\n    vector<int> next_requirement(n, -1);\n    for (int i = n - 1; i >= 0; --i) {\n      if (R[i] != -1) {\n        next_requirement[i] = R[i];\n      } else {\n        next_requirement[i] = next_requirement[i + 1];\n      }\n    }\n    \n    const long long MOD = 1E9 + 7;\n    long long ans = 1;\n    vector<long long> count(401, 0);\n    count[0] = 1;\n    for (int i = 1; i < n; ++i) {\n      vector<long long> new_count(401, 0);\n      for (int j = 0; j <= next_requirement[i]; ++j) {\n        // introduces k new inversions\n        for (int k = 0; k <= i && j + k <= next_requirement[i]; ++k) {\n          new_count[j + k] = (new_count[j + k] + count[j]) % MOD;\n        }\n      }\n      count = move(new_count);\n      if (R[i] != -1) {\n        ans = ans * count[R[i]] % MOD;\n        count[0] = 1;\n        for (int j = 1; j <= 400; ++j) {\n          count[j] = 0;\n        }\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": 1719068917.0
}