{
    "username": "sidak_09",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n \n \nvoid hello(){\n    \n}\n\nclass Solution {\nprivate:\n    static const int MOD = 1000000007;\n    static const int MAX_INVERSIONS = 400;\n    unordered_map<int, int> reqMap;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    bool cond1=prevInv >= 0;\n                    if (cond1) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    bool cond2=inv != targetInv;\n                    if (cond2) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        hello();\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": "1719071241",
    "subm_id": "1296842278"
}