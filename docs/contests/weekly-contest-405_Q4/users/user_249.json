{
    "username": "spravinkumar9952",
    "submission": "\nclass Trie{\n    public : \n    vector<Trie*> child; // next pointer array\n    bool isEnd ; // Indicates the word end\n    int ctr; // Number of words have that prefix\n    int cost = 0;\n\n    Trie(){\n        child.resize(26, NULL);\n        isEnd = false;\n        ctr = 0;\n        cost = 0;\n    }\n\n    void add(Trie *root, const string &s, int cost){\n        for(char c : s){\n            int pos = c-'a';\n            if(!root->child[pos]){\n                root->child[pos] = new Trie();\n            }\n            root = root->child[pos];\n        }\n        root->isEnd = true;\n        root->cost = root->cost == 0 ? cost : min(cost, root->cost);\n    }\n\n    bool search(Trie *root, const string &s){\n        for(char c : s){\n            int pos = c-'a';\n            if(!root->child[pos]) \n                return false;\n            root = root->child[pos];\n        }\n        return root->cost;\n    }\n\n    // Find the prefix matches length\n    int prefixSearch(Trie *root, const string &s){\n        int len = 0; // Length of the prefix\n        for(char c : s){\n            int pos = c-'a';\n            if(!root->child[pos]) \n                break;\n            root = root->child[pos];\n            len++;\n        }\n        return len;\n    }\n};\n\nclass Solution {\npublic:\n    Trie *trie = new Trie();\n    \n    int dp[(int)1e5];\n    \n    int g(int ind, string &target, vector<string> &words){\n        if(ind >= target.size()){\n            return 0;\n        }\n        if(dp[ind] != -1){\n            return dp[ind];\n        }\n        \n        int cost = INT_MAX;\n        \n        Trie *root = trie;\n        for(int j = ind; j<target.size(); j++){\n            if(!root) break;\n            \n            int pos = target[j]-'a';\n            if(!root->child[pos]) \n                break;\n            root = root->child[pos];\n            \n            if(root->isEnd){\n                int ret = g(j+1, target, words);\n                if(ret != INT_MAX)\n                    cost = min(cost, root->cost + ret);\n            }\n        }\n        return dp[ind] = cost;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        \n        for(int i = 0; i < words.size(); i++){\n            trie->add(trie, words[i], costs[i]);\n        }\n        \n        memset(dp, -1, sizeof(dp));\n        int ret = g(0, target, words);\n        \n        return ret == INT_MAX ? -1 : ret;\n        \n    }\n};",
    "submit_ts": "1720321597",
    "subm_id": "1312327178"
}