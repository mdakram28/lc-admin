{
    "username": "tsreaper",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int K) {\n        int n = nums.size();\n        const int MAXP = 30;\n        int last[n][MAXP];\n        for (int j = 0; j < MAXP; j++) {\n            if (nums[0] >> j & 1) last[0][j] = -1;\n            else last[0][j] = 0;\n        }\n        for (int i = 1; i < n; i++) for (int j = 0; j < MAXP; j++) {\n            last[i][j] = last[i - 1][j];\n            if (nums[i] >> j & 1 ^ 1) last[i][j] = i;\n        }\n\n        long long ans = 0;\n        for (int i = 0; i < n; i++) {\n            vector<int> pos;\n            for (int j = 0; j < MAXP; j++) if (last[i][j] >= 0) pos.push_back(last[i][j]);\n            sort(pos.begin(), pos.end());\n            pos.resize(unique(pos.begin(), pos.end()) - pos.begin());\n            reverse(pos.begin(), pos.end());\n            int v = nums[i];\n            for (int j = 0; j < pos.size(); j++) {\n                v &= nums[pos[j]];\n                if (v < K) break;\n                if (v == K) {\n                    if (j + 1 == pos.size()) ans += pos[j] + 1;\n                    else ans += pos[j] - pos[j + 1];\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277362",
    "subm_id": "544556184"
}