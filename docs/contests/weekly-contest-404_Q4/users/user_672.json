{
    "username": "dilkhush04",
    "submission": "import java.util.*;\n\nclass Solution {\n    private int find(List<List<Integer>> graph, int n) {\n        int[] dist = new int[n];\n        Arrays.fill(dist, -1);\n        Queue<Integer> queue = new LinkedList<>();\n        queue.offer(0);\n        dist[0] = 0;\n        int farthest = 0;\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : graph.get(node)) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.offer(neighbor);\n                    if (dist[neighbor] > dist[farthest]) {\n                        farthest = neighbor;\n                    }\n                }\n            }\n        }\n        Arrays.fill(dist, -1);\n        queue.offer(farthest);\n        dist[farthest] = 0;\n        int dia = 0;\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : graph.get(node)) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.offer(neighbor);\n                    dia = Math.max(dia, dist[neighbor]);\n                }\n            }\n        }\n        return dia;\n    }\n\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n        List<List<Integer>> graph1 = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            graph1.add(new ArrayList<>());\n        }\n        for (int[] edge : edges1) {\n            graph1.get(edge[0]).add(edge[1]);\n            graph1.get(edge[1]).add(edge[0]);\n        }\n        List<List<Integer>> graph2 = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            graph2.add(new ArrayList<>());\n        }\n        for (int[] edge : edges2) {\n            graph2.get(edge[0]).add(edge[1]);\n            graph2.get(edge[1]).add(edge[0]);\n        }\n        int d1 = find(graph1, n);\n        int d2 = find(graph2, m);\n        return Math.max(d1, Math.max(d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1));\n    }\n}\n",
    "submit_ts": 1719719294.0
}