{
    "username": "wangdh15",
    "submission": "\n\nclass Solution {\npublic:\n    \n    int dp[100005][2];\n    vector<int> g[100005];\n    \n    int ans = 0;\n    void dfs(int cur, int fa) {\n        for (auto x : g[cur]) {\n            if (x == fa) continue;\n            dfs(x, cur);\n            if (dp[x][0] + 1 >= dp[cur][0]) {\n                dp[cur][1] = dp[cur][0];\n                dp[cur][0] = dp[x][0] + 1;\n            } else if (dp[x][0] + 1 > dp[cur][1]) {\n                dp[cur][1] = dp[x][0] + 1;\n            }\n        }\n        ans = max(ans, dp[cur][0] + dp[cur][1]);\n    }\n    \n    int GetDia(vector<vector<int>>& edge) {\n        const int n = edge.size();\n        for (auto& e : edge) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        dfs(0, -1);\n        return ans;\n    }\n    \n    void clear() {\n        ans = 0;\n        for (int i = 0; i < 100005; ++i) {\n            dp[i][0] = dp[i][1] = 0;\n            g[i].clear();\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int dia1 = GetDia(edges1);\n        clear();\n        int dia2 = GetDia(edges2);\n        int ans = max(dia1, dia2);\n        ans = max(ans, (dia1 + 1) / 2 + (dia2 + 1) / 2 + 1);\n        return ans;\n    }\n};",
    "submit_ts": 1719717725.0
}