{
    "username": "impiry",
    "submission": "public class Solution {\n    public long MaximumValueSum(int[][] board)\n    {\n        var cols = new (int, int)[board.Length][];\n\n        for (int i = 0; i < board.Length; i++)\n        {\n            cols[i] = new (int, int)[board[0].Length];\n\n            for (int j = 0; j < board[0].Length; j++)\n            {\n                cols[i][j] = (j, board[i][j]);\n            }\n        }\n\n        for (int i = 0; i < board.Length; i++)\n        {\n            Array.Sort(cols[i], (x, y) => y.Item2.CompareTo(x.Item2));\n        }\n\n        var dp = new Dictionary<(int, int, int), long>();\n\n        return Solve(0, -1, -1);\n\n        long Solve(int row, int biggerCol, int smallerCol)\n        {\n            if (row == board.Length)\n            {\n                return long.MinValue;\n            }\n\n            if (dp.ContainsKey((row, biggerCol, smallerCol)))\n            {\n                return dp[(row, biggerCol, smallerCol)];\n            }\n\n            var result = Solve(row + 1, biggerCol, smallerCol);\n\n            if (biggerCol != -1)\n            {\n                if (smallerCol != -1)\n                {\n                    for (int t = 0; t < board[0].Length; t++)\n                    {\n                        var j = cols[row][t].Item1;\n\n                        if (j != biggerCol && j != smallerCol)\n                        {\n                            //result = Math.Max(result, board[row][t]);\n                            result = Math.Max(result, cols[row][t].Item2);\n                            break;\n                        }\n                    }\n                }\n                else\n                {\n                    for (int j = 0; j < board[0].Length; j++)\n                    {\n                        if (j != biggerCol)\n                        {\n                            var solution = Solve(row + 1, Math.Max(biggerCol, j), Math.Min(biggerCol, j));\n\n                            if (solution != long.MinValue)\n                            {\n                                solution += board[row][j];\n                            }\n\n                            result = Math.Max(result, solution);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                for (int j = 0; j < board[0].Length; j++)\n                {\n                    var solution = Solve(row + 1, j, -1);\n\n                    if (solution != long.MinValue)\n                    {\n                        solution += board[row][j];\n                    }\n\n                    result = Math.Max(result, solution);\n                }\n            }\n\n            dp[(row, biggerCol, smallerCol)] = result;\n            return result;\n        }\n    }\n}",
    "submit_ts": "1723910273",
    "subm_id": "1359223843"
}