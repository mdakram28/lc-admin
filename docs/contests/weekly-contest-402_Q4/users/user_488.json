{
    "username": "CompileErrorAutomaton",
    "submission": "class BIT:\n    def __init__(self, nums: List[int]):\n        self.xs = [0] * len(nums)\n        self.bit = [0] * (len(nums) + 1)\n        for i, x in enumerate(nums):\n            self.update(i, x)\n\n    def update(self, index: int, val: int) -> None:\n        i, d = index + 1, val - self.xs[index]\n        self.xs[index] = val\n        while i < len(self.bit):\n            self.bit[i] += d\n            i += (i & -i)\n        return\n\n    def prefix(self, i):\n        res = 0\n        while i > 0:\n            res += self.bit[i]\n            i -= (i & -i)\n        return res\n\n    def query(self, left: int, right: int) -> int:\n        if left > right:\n            return 0\n        return self.prefix(right + 1) - self.prefix(left)\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(idx):\n            return 0 < idx and idx < len(nums)-1 and nums[idx]>nums[idx-1] and nums[idx]>nums[idx+1]\n\n        n = len(nums)\n        xs = [int(is_peak(i)) for i in range(n)]\n        bit = BIT(xs)\n        res = []\n        for q_type, a, b in queries:\n            if q_type == 1:\n                v = bit.query(a+1, b-1)\n                res.append(v)\n                continue\n            nums[a] = b\n            for j in range(max(1, a-1), min(n-1,a+2)):\n                v = int(is_peak(j))\n                if xs[j] != v:\n                    xs[j] = v\n                    bit.update(j, v)\n        return res",
    "submit_ts": "1718507369",
    "subm_id": "1289649417"
}