{
    "username": "kesshb",
    "submission": "class Solution {\n\n  long mod = 1000000007;\n\n  public static void main(String... args) {\n    Solution solution = new Solution();\n    int[][] board = new int[][] {{83, -5, -11}, {-4, -82, 51}, {-37, -36, -84}};\n    System.out.println(solution.maximumValueSum(board));\n  }\n\n  int m;\n  int n;\n  long[][] dp;\n  long[][] help;\n\n  public long maximumValueSum(int[][] board) {\n    m = board.length;\n    n = board[0].length;\n    int[][] points = new int[m * 3][2];\n    help = new long[m * 3][3];\n    for (int i = 0; i < m; i++) {\n      int max1 = Integer.MIN_VALUE;\n      int max2 = Integer.MIN_VALUE;\n      int max3 = Integer.MIN_VALUE;\n      int[] max1Ind = new int[2];\n      int[] max2Ind = new int[2];\n      int[] max3Ind = new int[2];\n      for (int j = 0; j < n; j++) {\n        if (board[i][j] > max1) {\n          max3 = max2;\n          max3Ind = max2Ind;\n          max2 = max1;\n          max2Ind = max1Ind;\n          max1 = board[i][j];\n          max1Ind = new int[] {i, j};\n        } else if (board[i][j] > max2) {\n          max3 = max2;\n          max3Ind = max2Ind;\n          max2 = board[i][j];\n          max2Ind = new int[] {i, j};\n        } else if (board[i][j] > max3) {\n          max3 = board[i][j];\n          max3Ind = new int[] {i, j};\n        }\n      }\n      points[3 * i] = max1Ind;\n      points[3 * i + 1] = max2Ind;\n      points[3 * i + 2] = max3Ind;\n      help[3 * i] = new long[] {max1, max1Ind[0], max1Ind[1]};\n      help[3 * i + 1] = new long[] {max2, max2Ind[0], max2Ind[1]};\n      help[3 * i + 2] = new long[] {max3, max3Ind[0], max3Ind[1]};\n    }\n    Arrays.sort(help, (a, b) -> Long.compare(b[0], a[0]));\n    dp = new long[m * 3 + 1][m * 3 + 1];\n    for (int i = 0; i <= m * 3; i++) {\n        Arrays.fill(dp[i], -1L);\n    }\n    return dp(board, points, 0, 3 * m, 3 * m);\n  }\n\n  private long dp(int[][] board, int[][] indexes, int curr, int i1, int i2) {\n    if (curr == m * 3) {\n      return i1 != 3 * m && i2 != 3 * m ? 0 : -3222222222L;\n    }\n    if (dp[i1][curr] != -1) {\n      return dp[i1][curr];\n    }\n    long res = -3222222222L;\n    boolean canPut = true;\n    if (i1 != 3 * m) {\n      canPut &= indexes[i1][0] != indexes[curr][0] && indexes[i1][1] != indexes[curr][1];\n    }\n    if (i2 != 3 * m) {\n      for (int j = 0; j < 3 * m; j++) {\n        if (help[j][1] == indexes[i1][0] || help[j][1] == indexes[i2][0] || help[j][2] == indexes[i1][1] || help[j][2] == indexes[i2][1]) {\n          continue;\n        }\n        return help[j][0];\n      }\n    }\n    int[] currCoord = indexes[curr];\n    if (canPut) {\n      if (i1 == 3 * m) {\n        res = Math.max(res, board[currCoord[0]][currCoord[1]] + dp(board, indexes, curr + 1, curr, i2));\n      } else {\n        res = Math.max(res, (long) board[currCoord[0]][currCoord[1]] + (long) dp(board, indexes, curr + 1, i1, curr));\n      }\n    }\n    if (curr < m * 3 - 1 - (i1 == 3 * m ? 1 : 0) - (i2 == 3 * m ? 1 : 0)) {\n      res = Math.max(res, dp(board, indexes, curr + 1, i1, i2));\n    }\n    return dp[i1][curr] = res;\n  }\n}",
    "submit_ts": "1723909333",
    "subm_id": "1359188569"
}