{
    "username": "i_m__prince",
    "submission": "from typing import List\nimport bisect\n\nclass SegmentTree:\n    def __init__(self, size):\n        self.size = size\n        self.segT = [0] * (4 * size)\n    \n    def build(self, s, e, i, a):\n        if s == e:\n            self.segT[i] = a[s]\n            return\n        mid = s + (e - s) // 2\n        self.build(s, mid, 2 * i + 1, a)\n        self.build(mid + 1, e, 2 * i + 2, a)\n        self.segT[i] = max(self.segT[2 * i + 1], self.segT[2 * i + 2])\n    \n    def update(self, s, e, i, q, v):\n        if s == e:\n            self.segT[i] = v\n            return\n        mid = s + (e - s) // 2\n        if q <= mid:\n            self.update(s, mid, 2 * i + 1, q, v)\n        else:\n            self.update(mid + 1, e, 2 * i + 2, q, v)\n        self.segT[i] = max(self.segT[2 * i + 1], self.segT[2 * i + 2])\n    \n    def range_query(self, s, e, i, qs, qe):\n        if qs <= s and qe >= e:\n            return self.segT[i]\n        if qs > e or qe < s:\n            return float('-inf')\n        mid = s + (e - s) // 2\n        l = self.range_query(s, mid, 2 * i + 1, qs, qe)\n        r = self.range_query(mid + 1, e, 2 * i + 2, qs, qe)\n        return max(l, r)\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        arr = []\n        set_points = [0, 100000]\n        map_points = {0: 0, 100000: 100000}\n        seg_tree = SegmentTree(100000)\n        \n        for q in queries:\n            if q[0] == 1:\n                pos = bisect.bisect_left(set_points, q[1])\n                if pos < len(set_points) and set_points[pos] == q[1]:\n                    continue\n                bisect.insort_left(set_points, q[1])\n                prev = set_points[pos - 1]\n                next = set_points[pos + 1] if pos + 1 < len(set_points) else 100000\n                map_points[next] = next - q[1]\n                map_points[q[1]] = q[1] - prev\n                seg_tree.update(0, 100000, 0, q[1], map_points[q[1]])\n                seg_tree.update(0, 100000, 0, next, map_points[next])\n            else:\n                pos = bisect.bisect_left(set_points, q[1])\n                prev = set_points[pos - 1] if pos > 0 else 0\n                if q[1] - prev >= q[2]:\n                    arr.append(True)\n                elif seg_tree.range_query(0, 100000, 0, 0, q[1]) >= q[2]:\n                    arr.append(True)\n                else:\n                    arr.append(False)\n        \n        return arr\n",
    "submit_ts": 1716652305.0
}