{
    "username": "fsj-o",
    "submission": "struct info {\n    int mx = INT_MIN;\n    int i = -1;\n    int secMx = INT_MIN;\n    int j = -1;\n};\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        auto update = [&] (info& item, int val, int pos) -> void {\n            if (item.mx < val) {\n                item.secMx = item.mx;\n                item.j = item.i;\n                item.mx = val;\n                item.i = pos;\n            } else if (item.secMx < val) {\n                item.secMx = val;\n                item.j = pos;\n            }\n        };\n        auto join = [&] (info a, info b) -> info {\n            info c;\n            if (a.mx > b.mx) {\n                c.mx = a.mx;\n                c.i = a.i;\n                c.secMx = (a.secMx > b.mx ? a.secMx : b.mx);\n                c.j = (a.secMx > b.mx ? a.j : b.i);\n            } else {\n                c.mx = b.mx;\n                c.i = b.i;\n                c.secMx = (b.secMx > a.mx ? b.secMx : a.mx);\n                c.j = (b.secMx > a.mx ? b.j : a.i);\n            }\n            return c;\n        };\n        std::vector<std::vector<info>> leftUp(n, std::vector<info>(m));\n        std::vector<int> colsMx(m, INT_MIN);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                colsMx[j] = std::max(colsMx[j], board[i][j]);\n                if (j-1 >= 0) leftUp[i][j] =leftUp[i][j-1];\n                update(leftUp[i][j], colsMx[j], j);\n            }\n        }\n        std::vector<std::vector<info>> rightUp(n, std::vector<info>(m));\n        std::fill(colsMx.begin(), colsMx.end(), INT_MIN);\n        for (int i = 0; i < n; i++) {\n            for (int j = m-1; j >= 0; j--) {\n                colsMx[j] = std::max(colsMx[j], board[i][j]);\n                if (j+1 < m) rightUp[i][j] = rightUp[i][j+1];\n                update(rightUp[i][j], colsMx[j], j);\n            }\n        }\n        std::vector<std::vector<info>> leftDown(n, std::vector<info>(m));\n        std::fill(colsMx.begin(), colsMx.end(), INT_MIN);\n        for (int i = n-1; i >= 0; i--) {\n            for (int j = 0; j < m; j++) {\n                colsMx[j] = std::max(colsMx[j], board[i][j]);\n                if (j-1 >= 0) leftDown[i][j] = leftDown[i][j-1];\n                update(leftDown[i][j], colsMx[j], j);\n            }\n        }\n        std::vector<std::vector<info>> rightDown(n, std::vector<info>(m));\n        std::fill(colsMx.begin(), colsMx.end(), INT_MIN);\n        for (int i = n-1; i >= 0; i--) {\n            for (int j = m-1; j >= 0; j--) {\n                colsMx[j] = std::max(colsMx[j], board[i][j]);\n                if (j+1 < m) rightDown[i][j] = rightDown[i][j+1];\n                update(rightDown[i][j], colsMx[j], j);\n            }\n        }\n        long long ans = LLONG_MIN;\n        for (int i = 1; i < n-1; i++) {\n            for (int j = 0; j < m; j++) {\n                // std::cout << \"i = \" << i << \", j = \" << j << \": \";\n                info up;\n                if (j-1 >= 0 && j+1 < m) {\n                    up = join(leftUp[i-1][j-1], rightUp[i-1][j+1]);\n                } else if (j-1 >= 0) {\n                    up = leftUp[i-1][j-1];\n                } else if (j+1 < m) {\n                    up = rightUp[i-1][j+1];\n                } else {\n                    assert(false);\n                }\n                info dw;\n                if (j-1 >= 0 && j+1 < m) {\n                     dw = join(leftDown[i+1][j-1], rightDown[i+1][j+1]);\n                } else if (j-1 >= 0) {\n                     dw = leftDown[i+1][j-1];\n                } else if (j+1 < m) {\n                     dw = rightDown[i+1][j+1];\n                } else {\n                    assert(false);\n                }\n                long long cur;\n                if (up.i != dw.i) {\n                    // std::cout << \" (on) \";\n                    cur = 1LL*up.mx+dw.mx+board[i][j];\n                } else {\n                    // std::cout << \" (off) \";\n                    cur = std::max(1LL*up.mx+dw.secMx, 1LL*up.secMx+dw.mx)+board[i][j];\n                }\n                // std::cout << \"cur = \" << cur << '\\n';\n                // std::cout << \"up = (mx = \" << up.mx << \", i = \" << up.i << \", secMx = \" << up.secMx << \", j = \" << up.j << \")\" << '\\n';\n                // std::cout << \"dw = (mx = \" << dw.mx << \", i = \" << dw.i << \", secMx = \" << dw.secMx << \", j = \" << dw.j << \")\" << '\\n';\n                ans = std::max(ans, cur);\n            }\n        }\n        // std::cout << \"CASE FINISH\" << \"\\n\";\n        return ans;\n    }\n};\n// [[-3,1,1,1],\n//  [-3,1,-3,1],\n//  [-3,2,1,1]]",
    "submit_ts": "1723907405",
    "subm_id": "556325361"
}