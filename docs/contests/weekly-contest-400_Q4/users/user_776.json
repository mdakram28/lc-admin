{
    "username": "kenchen",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        if k in nums: return 0\n        l = len(nums)\n        ret = inf\n        s, e = 0, 0\n        cur = [0] * 32\n        def c1(n):\n            ret = [0] * 32\n            i = 31\n            while n:\n                ret[i] = n % 2\n                i -= 1\n                n //= 2\n            return ret\n        def c2(n1, n2, op):\n            ret = []\n            for a, b in zip(n1, n2):\n                if op==\"add\":\n                    ret.append(a+b)\n                else:\n                    ret.append(a-b)\n            return ret\n        def c3(n, a, b):\n            n = [ 1 if x==b-a+1 else 0 for x in n ]\n            n = n[::-1]\n            ret = 0\n            for i, x in enumerate(n):\n                ret = ret + (2**i if x==1 else 0)\n            return ret\n        while s<=e and e<l:\n            cur = c2(cur, c1(nums[e]),\"add\")\n            cur_v = c3(cur, s, e)\n            ret = min(ret, abs(k-cur_v))\n            #print(cur, cur_v, ret, s, e)\n            while cur_v<=k and s<e:\n                cur = c2(cur, c1(nums[s]),\"minus\")\n                s+=1\n                cur_v = c3(cur, s, e)\n                ret = min(ret, abs(k-cur_v))\n                #print(cur, cur_v, ret, s, e)\n            e += 1\n        return ret\n            \n            \n            \n            \n            ",
    "submit_ts": 1717299923.0
}