{
    "username": "DRJ2002",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n      map<int, vector<int>> diffMap;\n       \n\n        int n = nums.size();\n         vector<int> allX;\n        for (int i = 0; i < n / 2; ++i) {\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int c = abs(a - b);\n            int d = max({a, b, k - a, k - b});\n\n            diffMap[c].push_back(d);\n            allX.push_back(d);\n        }\n\n        sort(allX.begin(), allX.end());\n\n        int minChanges = n;\n        for (auto& entry : diffMap) {\n            int c = entry.first;\n            int changes = calculateChanges(allX, c, entry.second);\n            minChanges = min(minChanges, changes);\n        }\n\n        return minChanges;\n    }\n\nprivate:\n    int calculateChanges(const vector<int>& allX, int c, const vector<int>& diffValues) {\n        int pos = lower_bound(allX.begin(), allX.end(), c) - allX.begin();\n        int changes = pos * 2 + (allX.size() - pos);\n\n        for (int x : diffValues) {\n            if (x < c) {\n                changes -= 2;\n            } else {\n                changes -= 1;\n            }\n        }\n\n        return changes;\n    }\n};",
    "submit_ts": "1721489215",
    "subm_id": "1327446513"
}