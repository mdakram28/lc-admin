{
    "username": "ekalavya_pc",
    "submission": "\nclass Solution {\npublic:\n    int process(vector<vector<int>>& matrix, vector<vector<int>>& visited, int row, int col, int rows, int cols, int& flag, int& subFlag) {\n        set<pair<int, int>> positions;\n        positions.insert({row, col});\n        positions.insert({row, cols - col});\n        positions.insert({rows - row, col});\n        positions.insert({rows - row, cols - col});\n        \n        int ones = 0, zeros = 0;\n        for(auto pos : positions) {\n            if(matrix[pos.first][pos.second] == 0) zeros++;\n            else ones++;\n            visited[pos.first][pos.second] = 1;\n        }\n        \n        if(ones == 2 && zeros == 0) {\n            flag = !flag;\n        }\n        if(positions.size() == 2 && ones == 1) subFlag = 1;\n        if(positions.size() == 1 && ones == 1) return 1;\n        \n        return min(ones, zeros);\n    }\n\n    int minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size() - 1;\n        int cols = matrix[0].size() - 1;\n        int result = 0;\n        int flag = 0;\n        int subFlag = 0;\n        \n        vector<vector<int>> visited(rows + 1, vector<int>(cols + 1, 0));\n        \n        for(int i = 0; i <= rows; i++) {\n            for(int j = 0; j <= cols; j++) {\n                if(!visited[i][j]) result += process(matrix, visited, i, j, rows, cols, flag, subFlag);\n            }\n        }\n        \n        cout << flag << endl;\n        return result + 2 * (flag && !subFlag);\n    }\n};\n",
    "submit_ts": "1722699652",
    "subm_id": "1343218150"
}