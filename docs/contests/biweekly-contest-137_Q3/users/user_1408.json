{
    "username": "sud",
    "submission": "typedef long long LL;\n#define MP make_pair\n#define PB push_back\n#define F first\n#define S second\n#define LB lower_bound\n#define SORT(x) sort(x.begin(), x.end())\n#define RSORT(x) sort(x.rbegin(), x.rend())\n#define UB upper_bound\n#define SZ(x) ((int)x.size())\n#define ALL(x) begin(x), end(x)\n#define ASS assign\n#define REV(x) reverse(x.begin(), x.end());\n#define trav(a, x) for (auto& a : x)\ntypedef pair<LL, LL> PL;\n#define SUM(x) accumulate(x.begin(), x.end(), 0LL)\ntypedef vector<LL> VL;\ntypedef vector<PL> VPL;\ntypedef vector<VL> VVL;\ntypedef vector<VVL> VVVL;\ntypedef vector<VVVL> VVVVL;\ntypedef vector<string> VS;\ntypedef pair<int, int> PI;\ntypedef vector<int> VI;\ntypedef vector<PI> VPI;\ntypedef vector<vector<int>> VVI;\ntypedef vector<vector<PI>> VVPI;\n#define LEN(x) ((int)x.length())\n#define MAX(x) *max_element(ALL(x))\n#define MIN(x) *min_element(ALL(x))\n#define FOR(i, n) for (int i = 0; i < n; i++) \n#define FOR1(i, n) for (int i = 1; i <= n; i++) \n#define RSZ resize\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        \n        // Store the top 3 max values and their indices for each row\n        vector<vector<tuple<int, int>>> rowMax(m);\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowElems;\n            for (int j = 0; j < n; ++j) {\n                rowElems.push_back({board[i][j], j});\n            }\n            sort(rowElems.rbegin(), rowElems.rend());\n            for (int k = 0; k < min(3, n); ++k) {\n                rowMax[i].push_back({rowElems[k].first, rowElems[k].second});\n            }\n        }\n        \n        // Store the top 3 max values and their indices for each column\n        vector<vector<tuple<int, int>>> colMax(n);\n        for (int j = 0; j < n; ++j) {\n            vector<pair<int, int>> colElems;\n            for (int i = 0; i < m; ++i) {\n                colElems.push_back({board[i][j], i});\n            }\n            sort(colElems.rbegin(), colElems.rend());\n            for (int k = 0; k < min(3, m); ++k) {\n                colMax[j].push_back({colElems[k].first, colElems[k].second});\n            }\n        }\n        \n        long long maxSum = LLONG_MIN;\n        \n        // Brute-force the best configuration\n        for (int i = 0; i < m; ++i) {\n            for (auto [val1, c1] : rowMax[i]) {\n                for (int j = i + 1; j < m; ++j) {\n                    for (auto [val2, c2] : rowMax[j]) {\n                        if (c1 == c2) continue; // Skip if columns are the same\n                        for (int k = j + 1; k < m; ++k) {\n                            for (auto [val3, c3] : rowMax[k]) {\n                                if (c1 == c3 || c2 == c3) continue; // Skip if columns overlap\n                                maxSum = max(maxSum, 1LL * val1 + val2 + val3);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723909879",
    "subm_id": "1359209154"
}