{
    "username": "adwmos",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str, cost: int):\n        node = self.root\n        for char in word:\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def search(self, s: str, start: int):\n        node = self.root\n        matches = []\n        for i in range(start, len(s)):\n            if s[i] not in node.children:\n                break\n            node = node.children[s[i]]\n            if node.cost != float('inf'):\n                matches.append((i + 1, node.cost))\n        return matches\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # The cost to construct an empty string is 0\n        \n        # Build the Trie with words and their respective costs\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # Update the dp array using the Trie\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            matches = trie.search(target, i)\n            for end, cost in matches:\n                dp[end] = min(dp[end], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322384",
    "subm_id": "1312348461"
}