{
    "username": "Saakshat Jain",
    "submission": "class Solution {\npublic:\n    long long int helper(vector<vector<vector<long long int>>>&dp , vector<vector<int>>&board , int take , int col1 , int col2 , int i ,vector<vector<pair<int,int>>>&maxi) {\n        if (take==3) {\n            return 0;\n        }\n        if (i==board.size()) {\n            return -1e13;\n        }\n        if (dp[col1+1][col2+1][i]!=-1) {\n            return dp[col1+1][col2+1][i];\n        }\n       // long long int ans=0;\n        long long int ans=helper(dp,board,take,col1,col2,i+1,maxi);\n        for (int j=0;j<maxi[i].size() && j<5;j++) {\n           // cout<<board[i][maxi[i][j].second]<<\" \";\n            int temp1=col1;\n            int temp2=col2;\n            if (maxi[i][j].second!=col1 && maxi[i][j].second!=col2) {\n                if (temp1==-1) {\n                    temp1=maxi[i][j].second;\n                }\n                else if (temp2==-1) {\n                    temp2=maxi[i][j].second;\n                }\n\n                long long int curr=board[i][maxi[i][j].second]+helper(dp,board,take+1,temp1,temp2,i+1,maxi);\n                ans=max(ans,curr);\n            }\n        }\n        return dp[col1+1][col2+1][i]=ans;\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n       vector<vector<vector<long long int>>>dp(board[0].size()+1,vector<vector<long long int>>(board[0].size()+1,vector<long long int>(board.size(),-1)));\n          \n          vector<vector<pair<int,int>>>board2(board.size(),vector<pair<int,int>>(board[0].size()));\n          for (int i=0;i<board.size();i++) {\n            for (int j=0;j<board[0].size();j++) {\n                board2[i][j]={board[i][j],j};\n            }\n          }\n        \n          for (int i=0;i<board.size();i++) {\n            sort(board2[i].rbegin(),board2[i].rend());\n          }\n          return helper(dp,board,0,-1,-1,0,board2);\n    }\n};",
    "submit_ts": "1723908368",
    "subm_id": "1359149637"
}