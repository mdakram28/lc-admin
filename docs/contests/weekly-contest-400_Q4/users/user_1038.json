{
    "username": "autimatic",
    "submission": "class SGTree{\n    vector<int> v;\npublic:\n    SGTree(int n){\n        v.resize(4*n + 1);\n    }\n    \n    void build(int index, int low, int high, vector<int> &arr){\n        if(low == high){\n            v[index] = arr[low];\n            return;\n        }\n        \n        int mid = (low + high) / 2;\n        build(2*index + 1, low, mid, arr);\n        build(2*index + 2, mid+1, high, arr);\n        \n        v[index] = v[2*index + 1] & v[2*index + 2];\n        return;\n    }\n    \n    int query(int index, int low, int high, int l, int r) {\n        // No overlap\n        if(low > r || high < l) return INT_MAX;\n        // Complete overlap\n        if(low >= l && high <= r) return v[index];\n        \n        int mid = (low + high) / 2;\n        return query(2*index + 1, low, mid, l, r) & query(2*index + 2, mid+1, high, l, r);\n    }\n    \n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        SGTree *sgTree = new SGTree(n);\n        sgTree->build(0, 0, n-1, nums);\n        \n        int minDiff = INT_MAX;\n\n        \n        for(int i=0; i<n; i++){\n            int low = i-1, high = n-1;\n            \n            while(high - low > 1) {\n                int mid = (low + high)/2;\n                \n                if(sgTree->query(0, 0, n-1, i, mid) >= k) {\n                    low = mid;\n                } else {\n                    high = mid;\n                }\n            }\n            if(low != i-1) {\n                minDiff = min(minDiff, abs(k - sgTree->query(0, 0, n-1, i, low)));\n            }\n            minDiff = min(minDiff, abs(k - sgTree->query(0, 0, n-1, i, high)));\n        }\n        \n        return minDiff;\n    }\n};",
    "submit_ts": "1717300368",
    "subm_id": "1274841954"
}