{
    "username": "MKLOL",
    "submission": "typedef long long ll;\ntypedef vector<int> vi;\ntypedef pair<int,int> pii;\ntypedef pair<double, double> pdd;\n#define pb push_back\n#define mp make_pair\n#define fs first\n#define sc second\n#define rep(i, from, to) for (int i = from; i < (to); ++i)\n#define all(x) x.begin(), x.end()\n#define sz(x) (int)(x).size()\n#define FOR(i, to) for (int i = 0; i < (to); ++i)\ntypedef vector<vector<int> > vvi;\ntypedef vector<ll> vll;\ntypedef vector<vll> vvll;\ntypedef vector<pair<int, int> > vpi;\ntypedef pair<ll,ll> pll;\ntypedef vector<string> vs;\n\nclass SparseTable {\nprivate:\n    vector<vector<int>> rmq;\n    vector<int> v, lg;\n    int N, log;\n\n    // Custom function to calculate the logarithm base 2 of an integer\n    int log2(int x) {\n        int res = 0;\n        while (x >>= 1) res++;\n        return res;\n    }\n\n    // Function to generate the RMQ table\n    void genRmq() {\n        for (int i = 2; i <= N; ++i) {\n            lg[i] = lg[i / 2] + 1;\n        }\n        for (int i = 1; i <= N; ++i) {\n            rmq[0][i] = v[i];\n        }\n        for (int i = 1; (1 << i) <= N; ++i) {\n            for (int j = 1; j + (1 << i) - 1 <= N; ++j) {\n                rmq[i][j] = rmq[i - 1][j] & rmq[i - 1][j + (1 << (i - 1))];\n            }\n        }\n    }\n\npublic:\n    // Constructor to initialize the table with given size and values\n    SparseTable(const vector<int>& values) : v(values) {\n        N = v.size() - 1; // Assuming 1-based indexing\n        log = log2(N) + 1;\n        rmq.assign(log + 1, vector<int>(N + 1));\n        lg.assign(N + 1, 0);\n        genRmq();\n    }\n\n    // Function to query the minimum value in the range [x, y]\n    int query(int x, int y) {\n        int l = lg[y - x + 1], sh = y - x + 1 - (1 << l);\n        return rmq[l][x] & rmq[l][x + sh];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& vx, int k) {\n        vi v;\n        v.pb(0);\n        for(auto x : vx) v.pb(x);\n        SparseTable s(v);\n        int rf = abs(v[1] - k);\n        FOR(i, sz(v)) {\n            if (i == 0) continue;\n            int st = i;\n            int dr = sz(v)-1;\n            int ret = i;\n            while(st <= dr) {\n                int mid = (st + dr) / 2;\n                if (s.query(i, mid) >= k) {\n                    ret = mid;\n                    st = mid + 1;\n                } else {\n                    dr = mid - 1;\n                }\n            }\n            rf = min(rf, abs(s.query(i, ret)-k));\n            st = i;\n            dr = sz(v)-1;\n            ret = i;\n            while(st <= dr) {\n                int mid = (st + dr) / 2;\n                if (s.query(i, mid) <= k) {\n                    ret = mid;\n                    dr = mid - 1;\n                } else {\n                    st = mid + 1;\n                }\n            }\n            rf = min(rf, abs(s.query(i, ret)-k));\n        }\n        return rf;\n    }\n};",
    "submit_ts": "1717296473",
    "subm_id": "1274705274"
}