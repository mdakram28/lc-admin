{
    "username": "shonu_monu",
    "submission": "class Solution {\n    const int MOD = 1e9+7;\n    long long dp[301][401];\n    \n    void f(int n, const unordered_map<int, int>& mpp) {\n        memset(dp,0,sizeof(dp));\n        \n        dp[0][0] = 1;\n        \n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j <= 400; ++j) {\n                for (int k = 0; k < i; ++k) {\n                    int inv = j - k;\n                    if (inv >= 0) {\n                        dp[i][j] = (dp[i][j] + dp[i - 1][inv]) % MOD;\n                    }\n                }\n            }\n\n            if (mpp.count(i)) {\n                for (int j = 0; j <= 400; ++j) {\n                    if (j != mpp.at(i)) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n    }\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mpp;\n        for (auto x : requirements) mpp[x[0] + 1] = x[1];\n        \n        f(n,mpp);\n\n        long long ans = 0;\n        for (auto x : dp[n]) {\n            ans = (ans + x) % MOD;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1719071123.0
}