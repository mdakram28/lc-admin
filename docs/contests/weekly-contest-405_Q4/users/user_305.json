{
    "username": "soupboy",
    "submission": "class Solution {\npublic:\n\n    class TrieNode {\n    public:\n        vector<TrieNode*> children;\n        long long cost;\n\n        TrieNode() : children(26, nullptr), cost(INT_MAX) {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const string& word, long long cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                int index = c - 'a';\n                if (node->children[index] == nullptr) {\n                    node->children[index] = new TrieNode();\n                }\n                node = node->children[index];\n            }\n            node->cost = min(node->cost, cost);\n        }\n    };\n\n    long long search(string& word, int pos, Trie& trie, vector<long long>& dp) {\n        if (pos == word.size()) {\n            return 0; // reached the end of the word\n        }\n        if (dp[pos] != -1) {\n            return dp[pos];\n        }\n\n        TrieNode* node = trie.root;\n        long long ret = INT_MAX;\n        for (int i = pos; i < word.size(); i++) {\n            char c = word[i];\n            int index = c - 'a';\n            if (node->children[index] == nullptr) {\n                break;\n            }\n            node = node->children[index];\n            if (node->cost != INT_MAX) {\n                // can split here\n                ret = min(ret, node->cost + search(word, i + 1, trie, dp));\n            }\n        }\n        return dp[pos] = ret;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        // cout<<trie.root->children[0]->children[1]->children[3]->children[4]->children[5]->cost<<\"\\n\";\n        // cout<<trie.root->children[0]->children[1]->children[2]->cost<<\"\\n\";\n        // cout<<trie.root->children[3]->cost<<\"\\n\";\n        // cout<<trie.root->children[3]->children[4]->children[5]->cost<<\"\\n\";\n        // cout<<trie.root->children[4]->children[5]->cost<<\"\\n\";\n        int n = target.size();\n        vector<long long> dp(n, -1);\n        long long ret = search(target, 0, trie, dp);\n        if (ret >= INT_MAX) {\n            return -1;\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1720322069",
    "subm_id": "1312339858"
}