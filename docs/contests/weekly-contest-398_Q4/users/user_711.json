{
    "username": "rastsislau",
    "submission": "class Solution {\npublic:\n    \n    \n    \n    int solve(int minus, int mult)\n    {\n        //cout << minus << \" \" << mult << endl;\n        int dp[100][50][50][2];\n        int sum = minus+mult;\n        for (int i=0;i<=sum;i++)\n        {\n            for (int j=0;j<=minus;j++)\n            {\n                for (int j1=0;j1<=mult;j1++)\n                {\n                    for (int f = 0; f<2;f++)\n                    {\n                        dp[i][j][j1][f] =0;\n                    }\n                }\n            }\n        }\n        dp[1][1][0][1] = 1;\n        dp[1][0][1][0] = 1;\n        \n        for (int i=2;i<=sum;i++)\n        {\n            for (int j=0;j<=minus;j++)\n            {\n                for (int j1=0;j1<=mult;j1++)\n                {\n                    /*\n                        \n                        \n                    */\n                    // f = 0 = last is mult\n                    // dp[i][j][j1][0] = dp[i-1][j][j1-1][0] + dp[i-1][j][j1-1][1]\n                    if (j1>0)\n                    {\n                        dp[i][j][j1][0] = dp[i-1][j][j1-1][0] + dp[i-1][j][j1-1][1];\n                    }\n                    \n                    // f = 1 = last is minus\n                    // dp[i][j][j1][1] = dp[i-1][j-1][j1][0]\n                    if (j>0)\n                    {\n                        dp[i][j][j1][1] = dp[i-1][j-1][j1][0];\n                    }\n                }\n            }\n        }\n        return dp[sum][minus][mult][0] + dp[sum][minus][mult][1];\n             \n    }\n    \n    \n    int waysToReachStair(int k) {\n        if (k==0)\n        {\n            return 2;\n        }\n        if (k==1)\n        {\n            return 4;\n        }\n        if (k==2)\n        {\n            return 4;\n        }\n        if (k==3)\n        {\n            return 3;\n        }\n        if (k==4)\n        {\n            return 2;\n        }\n        \n        long long need = k;\n        \n        long long jump = 1;\n        long long cur = 1;\n        long long max_del = 1;\n        while (true)\n        {\n            cur += jump;\n            max_del++;\n            jump*=2;\n            if (cur >= need)\n            {\n                int del = cur - need;\n                if (del > max_del)\n                {\n                    return 0;\n                }\n                else\n                {\n                    return solve(del, max_del-1);\n                }\n            }\n        }\n        /*\n            1 - 0 - 1 - 3 - 2\n            1 - 2 - 1 - 3 - 2\n            1 - 2\n            1 - 2 - 1 - 3 \n            1 2 4 8\n        \n        */ \n        // 1 - 2 - 4 - 8 \n    }\n};",
    "submit_ts": 1716089052.0
}