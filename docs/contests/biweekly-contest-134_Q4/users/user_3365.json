{
    "username": "hardikadvani1910",
    "submission": "class Solution {\n\nlong long countSubarraysWithBitwiseAndEqualToK(vector<int>& nums, int k) {\n    int n = nums.size();\n    unordered_map<int, long long> freq;  // To store frequency of AND results\n    long long count = 0;\n\n    for (int i = 0; i < n; ++i) {\n        unordered_map<int, long long> newFreq;  // To store frequency for the current index\n        // Starting a new subarray at index i\n        if (nums[i] == k) {\n            count++;\n        }\n        newFreq[nums[i]] = 1;\n\n        // Update frequencies for subarrays ending at index i\n        for (auto& [key, value] : freq) {\n            int newKey = key & nums[i];\n            if (newKey == k) {\n                count += value;\n            }\n            newFreq[newKey] += value;\n        }\n\n        // Update the frequency map\n        freq = newFreq;\n    }\n\n    return count;\n}\n\n\n\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        return countSubarraysWithBitwiseAndEqualToK(nums, k);\n    }\n};",
    "submit_ts": "1720280113",
    "subm_id": "1311777388"
}