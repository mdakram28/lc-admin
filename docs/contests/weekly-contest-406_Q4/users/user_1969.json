{
    "username": "GothamVigilante",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        long long totalCost = 0;\n        int i = 0, j = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n\n        while (i < horizontalCut.size() || j < verticalCut.size()) {\n            if (i < horizontalCut.size() &&\n                (j >= verticalCut.size() ||\n                 horizontalCut[i] > verticalCut[j])) {\n                // Perform a horizontal cut\n                totalCost += (long long)horizontalCut[i] * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                // Perform a vertical cut\n                totalCost += (long long)verticalCut[j] * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926259",
    "subm_id": "1320280772"
}