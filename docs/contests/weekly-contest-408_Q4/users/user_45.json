{
    "username": "harttle",
    "submission": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner = function(X, Y, circles) {\n    const N = circles.length\n    const dsu = new DSU(N)\n    for (let i = 0; i < N; i++) {\n        for (let j = i + 1; j < N; j++) {\n            if (intersectCircle(circles[i], circles[j])) {\n                dsu.union(i, j)\n            }\n        }\n    }\n    const groups = new Map()\n    for (let i = 0; i < N; i++) {\n        const g = dsu.find(i)\n        if (!groups.has(g)) {\n            groups.set(g, { t: -Infinity, l: Infinity, b: Infinity, r: -Infinity })\n        }\n        const bounds = groups.get(g)\n        const [l, r, b, t] = getBounds(circles[i])\n        bounds.l = Math.min(bounds.l, l)\n        bounds.r = Math.max(bounds.r, r)\n        bounds.b = Math.min(bounds.b, b)\n        bounds.t = Math.max(bounds.t, t)\n    }\n    for (const bounds of groups.values()) {\n        const {l, r, b, t} = bounds\n        const lt = l <= 0 || t >= Y\n        const rb = r >= X || b <= 0\n        // console.log(bounds, lt, rb)\n        if (lt && rb) return false\n    }\n    return true\n};\nfunction getBounds([x, y, r]) {\n    return [x - r, x + r, y - r, y + r]\n}\nfunction intersectCircle([x0, y0, r0], [x1, y1, r1]) {\n    const dist2 = (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1)\n    const rs2 = (r0 + r1) * (r0 + r1)\n    return dist2 <= rs2\n}\n\n/*\n * Template from contest.js\n * Github: https://github.com/harttle/contest.js\n * Website: https://harttle.land/contest.js/\n */\n// src/dsu.ts\nvar DSU = class {\n  constructor(N) {\n    this.parent = Array(N).fill(0).map((x, i) => i);\n    this.rank = Array(N).fill(0);\n  }\n  find(x) {\n    if (this.parent[x] === x)\n      return x;\n    this.parent[x] = this.find(this.parent[x]);\n    return this.parent[x];\n  }\n  union(x, y) {\n    x = this.find(x);\n    y = this.find(y);\n    if (x === y)\n      return;\n    if (this.rank[x] < this.rank[y]) {\n      this.parent[x] = y;\n    } else if (this.rank[x] > this.rank[y]) {\n      this.parent[y] = x;\n    } else {\n      this.parent[x] = y;\n      this.rank[y]++;\n    }\n  }\n};",
    "submit_ts": "1722137444",
    "subm_id": "1335763972"
}