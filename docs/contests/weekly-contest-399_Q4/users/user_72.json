{
    "username": "Rohan_2172002",
    "submission": "class Solution {\npublic:\n    \n    struct node{\n    int sum1;\n    int sum2;\n    int sum3;\n    int sum4;\n    //base node\n    node(){\n        sum1 = 0;\n        sum2 = 0;\n        sum3 = 0;\n        sum4 = 0;\n    }\n}; \n\n//merging two nodes \nnode merge(node a, node b){\n    node ans;\n    ans.sum1 = max(a.sum2+b.sum1,a.sum1+b.sum3);\n    ans.sum2 = max(a.sum2+b.sum2,a.sum1+b.sum4);\n    ans.sum3 = max(a.sum3+b.sum3,a.sum4+b.sum1);\n    ans.sum4 = max({a.sum3+b.sum4,a.sum4+b.sum2,a.sum4+b.sum4});\n    return ans;\n}\n\n//node array, size = 4*N\nnode t[4*200005];\n\n//initializing the segment tree with values 0\nvoid build(int id, int l, int r){\n    if(l==r){\n        // leaf node\n        t[id].sum1 = 0;\n        t[id].sum2 = 0;\n        t[id].sum3 = 0;\n        t[id].sum4 = 0;\n        return;\n    }\n    int mid = (l+r)/2;\n    build(2*id,l,mid);\n    build(2*id+1,mid+1,r);\n    t[id] = merge(t[2*id],t[2*id+1]);\n}\n\nvoid update(int id, int l, int r, int pos, int val){\n    if(pos<l || pos>r){\n        return;\n    }\n    if(l==r){\n        // if we need to add use +=\n        // if we need to change use =\n        t[id].sum1 = val;\n        t[id].sum2 = 0;\n        t[id].sum3 = 0;\n        t[id].sum4 = 0;\n        return;\n    }\n    int mid = (l+r)/2;\n    update(2*id,l,mid,pos,val);\n    update(2*id+1,mid+1,r,pos,val);\n    t[id] = merge(t[2*id],t[2*id+1]);\n}\n\n    node query(int id, int l, int r, int lq, int rq){\n        if(rq<l || lq>r){\n            return node();\n        }\n        if(lq<=l && r<=rq){\n            return t[id];\n        }\n        int mid = (l+r)/2;\n        return merge(query(2*id,l,mid,lq,rq),query(2*id+1,mid+1,r,lq,rq));\n    }\n    \n    \n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        build(1,0,n-1);\n        for(int i=0; i<n; i++){\n            update(1,0,n-1,i,nums[i]);\n        }\n        int Q = queries.size();\n        long long ans = 0;\n        long long M = 1e9+7;\n        for(int i=0; i<Q; i++){\n            update(1,0,n-1,queries[i][0],queries[i][1]);\n            auto res = query(1,0,n-1,0,n-1);\n            ans += max({res.sum1,res.sum2,res.sum3,res.sum4});\n            ans %= M;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716693790",
    "subm_id": "1268097135"
}