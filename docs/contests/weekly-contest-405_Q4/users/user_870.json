{
    "username": "user0707pg",
    "submission": "class Solution {\nprivate:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<int> wordIndices;\n    };\n    \n    TrieNode* root;\n    vector<long long> memo;\n    \n    void buildTrie(const vector<string>& words) {\n        root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->wordIndices.push_back(i);\n        }\n    }\n    \n    long long dfs(const string& target, int index, const vector<int>& costs) {\n        if (index == target.length()) return 0;\n        if (memo[index] != -1) return memo[index];\n        \n        TrieNode* node = root;\n        long long minCost = LLONG_MAX;\n        \n        for (int i = index; i < target.length(); i++) {\n            if (!node->children.count(target[i])) break;\n            node = node->children[target[i]];\n            \n            for (int wordIndex : node->wordIndices) {\n                long long nextCost = dfs(target, i + 1, costs);\n                if (nextCost != LLONG_MAX) {\n                    minCost = min(minCost, nextCost + costs[wordIndex]);\n                }\n            }\n        }\n        \n        return memo[index] = minCost;\n    }\n    \npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        buildTrie(words);\n        memo.assign(target.length(), -1);\n        \n        long long result = dfs(target, 0, costs);\n        return result == LLONG_MAX ? -1 : static_cast<int>(result);\n    }\n};",
    "submit_ts": "1720322401",
    "subm_id": "1312348920"
}