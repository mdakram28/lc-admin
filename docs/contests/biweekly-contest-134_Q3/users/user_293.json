{
    "username": "kyuukyuusha",
    "submission": "/*\n0 1 2 3 4|0 1 2 3 4\n0 1 0 1 0|0 1 0 1 0\n[   ]     X\n  [   ]   X\n    [   ] X\n\n0 1 2 3 0 1 2 3\n0 1 0 0 0 1 0 0\n      X X     X\n[   ] |\n  [   ]\n    [   ]\n      [   ]\n0 1 2 3 0 1 2 3\n1 1 1 0 1 1 1 0\n  X X     X X\n    [   ]\n      ? ? <- check these points\n      L   U <- lower&upper queries\n   [l     r)\n\n*/\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        const int n = colors.size();\n        std::vector<int> a(2*n);\n        for (int i = 0; i < 2*n; ++i) a[i] = colors[i % n];\n        std::set<int> bad;\n        for (int i = 1; i < 2*n; ++i) {\n            if (a[i] == a[i-1]) bad.insert(i);\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            int l = i, r = i + k; // the bounds you are checking\n            if (bad.lower_bound(l+1) == bad.upper_bound(r-1)) {\n                ++ans;\n                // std::cout << l << \"-\" << r << \"\\n\";\n            }\n        }\n        // std::cout << std::endl;\n        return ans;\n    }\n};",
    "submit_ts": "1720276911",
    "subm_id": "1311638732"
}