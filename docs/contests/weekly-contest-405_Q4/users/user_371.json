{
    "username": "Anshika_Tripathi_12",
    "submission": "class Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children;\n        int cost;\n\n        TrieNode() {\n            children=new HashMap<>();\n            cost=Integer.MAX_VALUE;\n        }\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n=target.length();\n        int[] dp=new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // building this  trie with words and their costs\n        TrieNode root = new TrieNode();\n        for (int i=0;i<words.length;i++) {\n            insert(root,words[i],costs[i]);\n        }\n        for (int i=0;i<n;i++) {\n            if(dp[i] == Integer.MAX_VALUE) \n                continue;\n\n            // Use this built trie to find matching words starting from index i\n            TrieNode node=root;\n            for (int j=i; j<n; j++) {\n                char c=target.charAt(j);\n                if(!node.children.containsKey(c))\n                    break;\n                node=node.children.get(c);\n                if(node.cost!=Integer.MAX_VALUE){\n                    dp[j+1]=Math.min(dp[j+1],dp[i]+node.cost);\n                }\n            }\n        }\n\n        return dp[n]==Integer.MAX_VALUE?-1:dp[n];\n    }\n    public void insert(TrieNode root, String word, int cost) {\n        TrieNode node=root;\n        for(char c:word.toCharArray()){\n            node.children.putIfAbsent(c,new TrieNode());\n            node=node.children.get(c);\n        }\n        node.cost=Math.min(node.cost, cost);\n    }\n}",
    "submit_ts": "1720322090",
    "subm_id": "1312340409"
}