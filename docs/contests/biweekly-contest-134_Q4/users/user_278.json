{
    "username": "veronica_sanyal",
    "submission": "\n#define INF INT32_MAX\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegmentTree(vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n       int n = nums.size();\n        SegmentTree st(nums);\n        long long int ans= 0;\n\n        for (int i = 0; i < n; i++) {\n            int left = i, right = n - 1;\n            int li=-1,ri=-1;\n            \n            while (left <= right) {\n                int mid = left + (right - left) / 2;\n                int gg = st.query(i, mid);\n                if(gg>k)\n                {\n                    left=mid+1;\n                }\n                else if(gg<k)\n                {\n                    right=mid-1;\n                }\n                else if(gg==k)\n                {\n                    li=mid;\n                    right=mid-1;\n                }\n              \n            }\n            left=i,right=n-1;\n               while (left <= right) {\n                int mid = left + (right - left) / 2;\n                int gg= st.query(i, mid);\n                if(gg>k)\n                {\n                    left=mid+1;\n                }\n                else if(gg<k)\n                {\n                    right=mid-1;\n                }\n                else if(gg==k)\n                {\n                    ri=mid;\n                    left=mid+1;\n                }\n              \n            }\n            if(li!=-1)\n            ans+=(ri-li+1);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720278968",
    "subm_id": "1311731868"
}