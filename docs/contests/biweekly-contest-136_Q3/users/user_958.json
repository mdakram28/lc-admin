{
    "username": "MakarenkoStepan",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        dp = [float('inf')] * 4\n        n = len(grid)\n        m = len(grid[0])\n        num_ones = sum([sum(row) for row in grid])\n        dp[num_ones % 4] = 0\n\n        top = n // 2\n        bottom = top\n        if n % 2 == 0:\n            top -= 1\n        \n        while top > -1:\n            if top == bottom:\n                l = m // 2\n                r = l\n                if m % 2 == 0:\n                    l -= 1\n                \n                while l > -1:\n                    new_dp = [float('inf')] * 4\n                    if l == r:\n                        for i, v in enumerate(dp):\n                            if v != float('inf'):\n                                if grid[top][l] == 0:\n                                    new_dp[(i + 1) % 4] = min(new_dp[(i + 1) % 4], v + 1)\n                                else:\n                                    new_dp[(i - 1) % 4] = min(new_dp[(i - 1) % 4], v + 1)\n                                # dont change\n                                new_dp[i] = min(new_dp[i], v)\n                    else:\n                        curr_ones = grid[top][l] + grid[top][r]\n                        for i, v in enumerate(dp):\n                            if v != float('inf'):\n                                #all to ones\n                                new_dp[(i + (2 - curr_ones)) % 4] = min(new_dp[(i + (2 - curr_ones)) % 4], v + (2 - curr_ones))\n                                #all to zeros\n                                new_dp[(i - curr_ones) % 4] = min(new_dp[(i - curr_ones) % 4], v + curr_ones)\n                                # # dont change\n                                # new_dp[i] = min(new_dp[i], v)\n                    l -= 1\n                    r += 1\n                    dp = new_dp\n            else:\n                l = m // 2\n                r = l\n                if m % 2 == 0:\n                    l -= 1\n                \n                while l > -1:\n                    new_dp = [float('inf')] * 4\n                    if l == r:\n                        curr_ones = grid[top][l] + grid[bottom][r]\n                        for i, v in enumerate(dp):\n                            if v != float('inf'):\n                                #all to ones\n                                new_dp[(i + (2 - curr_ones)) % 4] = min(new_dp[(i + (2 - curr_ones)) % 4], v + (2 - curr_ones))\n                                #all to zeros\n                                new_dp[(i - curr_ones) % 4] = min(new_dp[(i - curr_ones) % 4], v + curr_ones)\n                    else:\n                        curr_ones = grid[top][l] + grid[bottom][r] + grid[top][r] + grid[bottom][l]\n                        for i, v in enumerate(dp):\n                            if v != float('inf'):\n                                #all to ones\n                                new_dp[(i + (4 - curr_ones)) % 4] = min(new_dp[(i + (4 - curr_ones)) % 4], v + (4 - curr_ones))\n                                #all to zeros\n                                new_dp[(i - curr_ones) % 4] = min(new_dp[(i - curr_ones) % 4], v + curr_ones)\n                    l -= 1\n                    r += 1\n                    dp = new_dp\n            top -= 1\n            bottom += 1\n            # print(top, bottom, dp, new_dp)\n            # dp = new_dp\n        \n        return dp[0]\n\n\n                \n        ",
    "submit_ts": "1722698468",
    "subm_id": "1343181560"
}