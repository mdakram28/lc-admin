{
    "username": "ykWGnWjHlw",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, char>> pq;\n        for(int i=0; i<horizontalCut.size(); i++)\n        {\n            pq.push({horizontalCut[i], 'r'});\n        }\n\n        for(int j=0; j<verticalCut.size(); j++)\n        {\n            pq.push({verticalCut[j], 'c'});\n        }\n\n        int rowSegments = 1, colSegments = 1;\n        long long min_cost = 0LL;\n        while(!pq.empty())\n        {\n            auto curr = pq.top();\n            pq.pop();\n\n            if(curr.second == 'r')\n            {\n                min_cost += (1LL*rowSegments*curr.first);\n                colSegments++;\n            }\n\n            else\n            {\n                min_cost += (1LL*colSegments*curr.first);\n                rowSegments++;\n            }\n        }\n        return min_cost;\n    }\n};",
    "submit_ts": "1720925244",
    "subm_id": "1320248032"
}