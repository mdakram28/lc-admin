{
    "username": "chrehall68",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        # for the non-decreasing arr1 to be non-decreasing\n        # it's last element must be at most nums[-1]\n        # so all it's elements <= nums[-1]\n\n        # the constraint is nums[i] <= 50\n        max_el = max(nums)\n        n = len(nums)\n\n        # n_ways[i][num] = number of ways to make a monotonic pair\n        # where the non-decreasing array ends with num\n        n_ways = [[0 for _ in range(max_el+1)] for _ in range(n)]\n        \n        # populate initial\n        for num in range(nums[0]+1):\n            n_ways[0][num] = 1\n        # dp with O(n*max^2) <= 2000 * 1000 * 1000 operations\n        # not going to pass\n        # so we need to optimize that inner step\n        for i in range(1, n):\n            # use sorta like two pointers to iterate over past nums\n            # for an arbitrary num, non_decreasing = nums[i] - num\n            # so since we need the previous non_decreasing to be >= non_decreasing\n            # we consider all past_num for which nums[i-1] - past_num >= non_decreasing\n            # which means all past_num <= nums[i-1] - non_decreasing\n            # which means all past_num <= nums[i-1] - (nums[i] - num)\n            # which means all past_num <= nums[i-1] - nums[i] + num\n            # in other words\n            # each time num increases by one\n            # we consider one extra item\n            # and all those past_num are valid\n            sums = [el for el in n_ways[i-1]]\n            for j in range(1, len(sums)):\n                sums[j] += sums[j-1]  # cumulative sums\n\n            for num in range(0, nums[i]+1):\n                non_increasing = nums[i] - num\n                next_end = nums[i-1] - nums[i] + num\n                if next_end < 0:\n                    continue\n                \n                # since this must be non_decreasing (>=), we need a num >= next_end\n                # print('considering', next_end, 'vs', num, 'on', i)\n                next_end= min(next_end, num)\n                n_ways[i][num] = sums[next_end]\n\n        return sum(n_ways[-1]) % int(1e9 + 7)\n                    ",
    "submit_ts": "1723347967",
    "subm_id": "1351609041"
}