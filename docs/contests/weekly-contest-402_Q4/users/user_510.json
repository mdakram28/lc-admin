{
    "username": "lit-11",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    private:\n    std::vector<int> nums;\n    std::vector<int> tree;\n    int n;\n\n    bool isPeak(int i) {\n        return i > 0 && i < n - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    int build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            tree[node] = build(2 * node + 1, start, mid) + build(2 * node + 2, mid + 1, end);\n        }\n        return tree[node];\n    }\n\n    int update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n        return tree[node];\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftSum = query(2 * node + 1, start, mid, l, r);\n        int rightSum = query(2 * node + 2, mid + 1, end, l, r);\n        return leftSum + rightSum;\n    }\n\n    public:\n    SegmentTree(const std::vector<int>& nums) : nums(nums), n(nums.size()) {\n        tree.resize(4 * n, 0);\n        build(0, 0, n - 1);\n    }\n\n    void update(int index, int value) {\n        nums[index] = value;\n        if (index > 0) update(0, 0, n - 1, index - 1);\n        update(0, 0, n - 1, index);\n        if (index < n - 1) update(0, 0, n - 1, index + 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n};\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        std::vector<int> result;\n        SegmentTree segTree(nums);\n\n        for (const auto& query : queries) {\n            int type = query[0];\n            if (type == 1) {\n                int li = query[1], ri = query[2];\n                if (li + 1 > ri - 1) {\n                    result.push_back(0);\n                } else {\n                    result.push_back(segTree.query(li + 1, ri - 1));\n                }\n            } else if (type == 2) {\n                int indexi = query[1], vali = query[2];\n                segTree.update(indexi, vali);\n            }\n        }\n        \n        return result;\n\n    }\n};",
    "submit_ts": "1718507132",
    "subm_id": "539779465"
}