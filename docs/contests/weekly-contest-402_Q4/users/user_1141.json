{
    "username": "hope_ma",
    "submission": "class Solution:\n  class FenwickTree:\n    def __init__(self, n):\n      self.tree = [0 for _ in range(n)]\n    \n    def read(self, i):\n      ret = 0\n      index = i\n      while index > 0:\n        ret += self.tree[index - 1]\n        index -= index & -index\n      return ret\n\n    def update(self, i, d):\n      n = len(self.tree)\n      index = i\n      while index <= n:\n        self.tree[index - 1] += d\n        index += index & -index\n  \n  def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n    n = len(nums)\n    fenwick_tree = Solution.FenwickTree(n)\n    for i in range(1, n - 1):\n      if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n        #print(i)\n        fenwick_tree.update(i + 1, 1)\n        \n    def handle(i, j, v):\n      ov = nums[j]\n      original_peak = i > 0 and i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n      nums[j] = v\n      current_peak = i > 0 and i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n      nums[j] = ov\n      if original_peak and not current_peak:\n        fenwick_tree.update(i + 1, -1)\n      elif not original_peak and current_peak:\n        fenwick_tree.update(i + 1, 1)     \n    \n    ret = []\n    for t, v1, v2 in queries:\n      if t == 1:\n        ret.append(max(0, fenwick_tree.read(v2) - fenwick_tree.read(v1 + 1)))\n      else:\n        handle(v1 - 1, v1, v2)\n        handle(v1, v1, v2)\n        handle(v1 + 1, v1, v2)\n        nums[v1] = v2\n    return ret",
    "submit_ts": 1718508750.0
}