{
    "username": "EUqr2c2cjD8nuX5K",
    "submission": "auto BuildSparseTableFunc = [](const vector<int>& arr, auto binary_op) {\n    const int n = arr.size();\n    \n    vector<vector<int>> dp(n);\n    for (int i = n - 1; i >= 0; --i) {\n        dp[i].push_back(arr[i]);\n        while (i + (1 << dp[i].size()) <= n) {\n            int k = dp[i].size();\n            dp[i].push_back(binary_op(dp[i][k - 1], dp[i + (1 << (k - 1))][k - 1]));\n        }\n    }\n    \n    return [dp = std::move(dp), binary_op](int from, int to) {\n        assert(from <= to);\n        int len = log2(to - from + 1);\n        return binary_op(dp[from][len], dp[to - (1 << len) + 1][len]);\n    };\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        /*\n        int n = nums.size();\n        vector<int> t(n * 2, INT_MAX);\n        auto update = [&](int index, int val) {\n            index += n;\n            t[index] = val;\n            index >>= 1;\n            while (index) {\n                t[index] = t[index * 2] & t[index * 2 + 1];\n                index >>= 1;\n            }\n        };\n        auto query = [&](int a, int b) {\n            int min_val = INT_MAX;\n            a += n, b += n;\n            while (a <= b) {\n                if (a & 1) {\n                    min_val &= t[a];\n                    ++a;\n                }\n                if (!(b & 1)) {\n                    min_val &= t[b];\n                    --b;\n                }\n                a >>= 1, b >>= 1;\n                cout << a << \" \" << b << \" \" << min_val << endl;\n            }\n            return min_val;\n        };\n        \n        for (int i = 0; i < nums.size(); ++i)\n            update(i, nums[i]);\n            */\n        \n        auto f = BuildSparseTableFunc(nums, bit_and<>());\n        \n        int min_diff = INT_MAX;\n        for (int i = 0; i < nums.size(); ++i) {\n            // [0, ..., i]\n            int low = 0, high = i, at = i + 1;\n            while (low <= high) {\n                int mid = midpoint(low, high);\n                if (f(mid, i) >= k) {\n                    at = mid;\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n            \n            // at points to the first start index with AND([start, i]) >= k\n            if (at <= i) \n                min_diff = min(min_diff, f(at, i) - k);\n            if (at > 0)\n                min_diff = min(min_diff, k - f(at - 1, i));\n        }\n        return min_diff;\n    }\n};",
    "submit_ts": 1717297578.0
}