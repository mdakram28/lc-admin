{
    "username": "Vraj_Naik",
    "submission": "class Solution {\npublic:\n    class PrefixTree {\n    public:\n        class TrieTreeNode {\n        public:\n            unordered_map<char, TrieTreeNode*> child;\n            vector<pair<int, int>> wordCost;\n        };\n\n        TrieTreeNode* root;\n        PrefixTree() {\n            root = new TrieTreeNode();\n        }\n\n        void addWord(const string& word, int index, int cost) {\n            TrieTreeNode* node = root;\n            for (char ch : word) {\n                if (!node->child.count(ch))\n                    node->child[ch] = new TrieTreeNode();\n                node = node->child[ch];\n            }\n            node->wordCost.emplace_back(index, cost);\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       int n = target.size();\n        vector<int> minCosts(n + 1, INT_MAX);\n        minCosts[0] = 0;\n\n        PrefixTree prefixTree;\n        for (int i = 0; i < words.size(); ++i) {\n            prefixTree.addWord(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (minCosts[i] == INT_MAX) continue;\n\n            PrefixTree::TrieTreeNode* node = prefixTree.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) break;\n                node = node->child[target[j]];\n                for (const auto& wordCostPair : node->wordCost) {\n                    int index = wordCostPair.first;\n                    int cost = wordCostPair.second;\n                    int length = words[index].size();\n                    if (i + length <= n) {\n                        minCosts[i + length] = min(minCosts[i + length], minCosts[i] + cost);\n                    }\n                }\n            }\n        }\n        return minCosts[n] == INT_MAX ? -1 : minCosts[n];\n    }  \n};",
    "submit_ts": "1720324470",
    "subm_id": "1312400285"
}