{
    "username": "Dee_jay22",
    "submission": "class Solution {\npublic:\n    \n    std::string convertToBinary(int num) {\n    if (num == 0) {\n        return \"0\";\n    }\n\n    std::string binary;\n    while (num > 0) {\n        binary += (num % 2 == 0 ? \"0\" : \"1\");\n        num /= 2;\n    }\n\n   \n    std::reverse(binary.begin(), binary.end());\n    \n    return binary;\n}\n    \n    int minimmDifference(vector<int>& nums, int k) {\n        \n        int val = nums[0];\n        vector<int>v(32, 0);\n        \n        int ans = INT_MAX, diff = INT_MAX;\n        auto compute = [&](int x, bool re = false, int length = 1) {\n          \n            int answer = 0;\n            vector<int>temp(32, 0);\n            \n            for(int i = 0; i < 32; i++) {\n                 if(((x >> i) & 1) == 1) {\n                     if(length == 1) {\n                         temp[i] = 1;\n                          if(re)v[i]--;\n                          else v[i]++;\n                                   \n                          continue;\n                     }\n                     else if(v[i] > 0){\n                     temp[i] = 1;\n                     if(re)v[i]--;\n                     else v[i]++;\n                     }\n                 }\n            }\n            \n            for(int i = 0; i < 32; i++) {\n                 if(temp[i] > 0) {\n                     answer += (1 << i);\n                 }\n            }\n            return answer;\n        };\n        \n//         int y = compute(4, false);\n//         //cout << y << endl;\n//         y  = compute(5, false,2);\n//         cout << y << endl;\n        \n       cout <<convertToBinary(90) << endl;\n        for(int i = 0, low = 0; i < nums.size(); i++) {\n             val = compute(nums[i], false, i-low+1);\n            cout << val << endl;\n            \n             ans = min(ans, abs(val-k));\n             //cout << val  << \"  \"<< i-low + 1 << endl;\n             while(low < i and val < k) {\n                  //cout << val << \" \" << nums[low] <<endl;\n                  val = compute(nums[low], true, i-low+1);\n                \n                 low++;\n                  ans = min(ans, abs(val-k));\n             }\n        }\n        \n        return ans;\n    }\n    \n    class SegmentTree {\npublic:\n    vector<int> segmentTree;\n    int length;\n\n    SegmentTree(vector<int>& array) {\n        length = array.size();\n        segmentTree.resize(4 * length);\n        build(array, 0, 0, length - 1);\n    }\n\n    void build(vector<int>& array, int node, int start, int end, bool check = false) {\n        if (start == end) {\n            segmentTree[node] = array[start];\n        } \n        \n        else {\n            int mid = (start + end) / 2;\n            build(array, 2 * node + 1, start, mid);\n            build(array, 2 * node + 2, mid + 1, end);\n            segmentTree[node] = segmentTree[2 * node + 1] & segmentTree[2 * node + 2];\n        }\n        \n    }\n\n    int query(int left, int right) {\n        return query(0, 0, length - 1, left, right);\n    }\n\n    int query(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return INT_MAX;\n        }\n        if (left <= start && end <= right) {\n            return segmentTree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = query(2 * node + 1, start, mid, left, right);\n        int rightResult = query(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n};\n    \n\nint minimumDifference(vector<int>& nums, int k) {\n    \n    int size = nums.size();\n    \n    SegmentTree segmentTree(nums);\n    int answer = INT_MAX;\n\n    for (int i = 0; i < size; i++) {\n        int left = i - 1, right = size - 1, mid;\n\n        while (right - left > 1) {\n            mid = (left + right) / 2;\n            if (segmentTree.query(i, mid) >= k)\n                left = mid;\n            else\n                right = mid;\n        }\n\n        if (left != i - 1)\n            answer = min(answer, abs(segmentTree.query(i, left) - k));\n        answer = min(answer, abs(k - segmentTree.query(i, right)));\n    }\n\n    return answer;\n}\n\n};",
    "submit_ts": 1717300007.0
}