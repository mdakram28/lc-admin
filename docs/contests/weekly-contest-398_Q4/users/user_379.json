{
    "username": "TheZwischenzug",
    "submission": "class Solution {\n    int k;\n    Map<String, Integer> dpMap;\n    private int count(long stair, int jump, int prevOp){\n        String hash = String.format(\"%s, %s, %s\", stair, jump, prevOp);\n        if (dpMap.containsKey(hash)) return dpMap.get(hash);\n        if (stair-k > 2) return 0;\n  \n        \n        int cnt = 0;\n         if (stair == k) cnt++;\n        \n        if (prevOp != 1 && stair != 0) cnt += count(stair-1, jump, 1);\n        \n        cnt += count(stair+(1<<jump), jump+1, 2);\n       \n        \n        \n        dpMap.put(hash, cnt);\n        return cnt;\n    }\n    public int waysToReachStair(int k) {\n        this.k = k;\n        dpMap = new HashMap<>();\n        return count(1, 0, -1);\n    }\n}",
    "submit_ts": "1716087214",
    "subm_id": "1261776548"
}