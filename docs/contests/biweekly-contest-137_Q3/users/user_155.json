{
    "username": "wanghy012",
    "submission": "\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m = len(board)\n        n = len(board[0])\n        a = board[0][0]\n        ai = 0\n        aj = 0\n        for i in range(m):\n            for j in range(n):\n                if board[i][j] > a:\n                    a = board[i][j]\n                    ai = i\n                    aj = j\n        # maximum overall grid inside optimal solution\n        b = -1000000001\n        for i in range(m):\n            if i != ai:\n                for j in range(n):\n                    if j != aj:\n                        if board[i][j] > b:\n                            b = board[i][j]\n                            bi = i\n                            bj = j\n        c = -1000000001\n        for i in range(m):\n            if i != ai and i != bi:\n                for j in range(n):\n                    if j != aj and j != bj:\n                        if board[i][j] > c:\n                            c = board[i][j]\n                            ci = i\n                            cj = j\n        # a,b,c\n        res1 = a + b + c\n        # a in, b not\n        res5 = self.search1(board, ai, aj, bi, bj)\n        # maximum overall grid not one of optimal solution \n        ## b is in\n        t1 = [board[ai][j] for j in range(n) if j != aj and j!= bj]\n        t2 = [board[i][aj] for i in range(m) if i != ai and i!= bi]\n        res2 = b + max(t1) + max(t2)\n        ## b not in\n        ### (ai, bj) in\n        d, di, dj = self.searchBoard(board, ai, bj)\n        e, ei, ej = self.searchBoard2(board, ai, bj, di, dj)\n        res3 = board[ai][bj] + d + e\n        res6 = self.search1(board, ai, bj, di, dj)\n        ### (bi,aj) in\n        d, di, dj = self.searchBoard(board, bi, aj)\n        e, ei, ej = self.searchBoard2(board, bi, aj, di, dj)\n        res4 = board[bi][aj] + d + e\n        res7 = self.search1(board, bi, aj, di, dj)\n        print([res1, res2, res3, res4, res5, res6 ,res7])\n        return max([res1, res2, res3, res4, res5, res6 ,res7])\n\n    def searchBoard(self, board, ai, aj):\n        b = -1000000001\n        m = len(board)\n        n = len(board[0])\n        bi, bj = 0,0\n        for i in range(m):\n            if i != ai:\n                for j in range(n):\n                    if j != aj:\n                        if board[i][j] > b:\n                            b = board[i][j]\n                            bi = i\n                            bj = j\n        return b, bi, bj\n    \n    def searchBoard2(self, board, ai, aj, bi, bj):\n        c = -1000000001\n        m = len(board)\n        n = len(board[0])\n        ci, cj = 0,0\n        for i in range(m):\n            if i != ai and i != bi:\n                for j in range(n):\n                    if j != aj and j != bj:\n                        if board[i][j] > c:\n                            c = board[i][j]\n                            ci = i\n                            cj = j\n        return c, ci, cj\n    \n    def search1(self, board, ai, aj, bi, bj):\n        m = len(board)\n        n = len(board[0])\n        t1 = [board[i][bj] for i in range(m) if i != ai and i != bi]\n        t2 = [board[bi][j] for j in range(n) if j != aj and j != bj]\n        return board[ai][aj] + max(t1) + max(t2)",
    "submit_ts": "1723908256",
    "subm_id": "1359144903"
}