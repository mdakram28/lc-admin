{
    "username": "Akash_S29",
    "submission": "\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int diameter1 = calculateDiameter(edges1);\n        int diameter2 = calculateDiameter(edges2);\n\n        return max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n    }\n\nprivate:\n    int calculateDiameter(const vector<vector<int>>& edges) {\n        int numberOfNodes = edges.size() + 1;\n        vector<vector<int>> adjacencyList = buildAdjacencyList(edges, numberOfNodes);\n\n        int farthestNodeFromStart = findFarthestNode(adjacencyList, 0).first;\n        int diameter = findFarthestNode(adjacencyList, farthestNodeFromStart).second;\n        return diameter;\n    }\n\n    vector<vector<int>> buildAdjacencyList(const vector<vector<int>>& edges, int numberOfNodes) {\n        vector<vector<int>> adjacencyList(numberOfNodes);\n        for (const auto& edge : edges) {\n            adjacencyList[edge[0]].push_back(edge[1]);\n            adjacencyList[edge[1]].push_back(edge[0]);\n        }\n        return adjacencyList;\n    }\n\n    pair<int, int> findFarthestNode(const vector<vector<int>>& adjacencyList, int startNode) {\n        int numberOfNodes = adjacencyList.size();\n        vector<int> distances(numberOfNodes, -1);\n        queue<int> nodesQueue;\n        nodesQueue.push(startNode);\n        distances[startNode] = 0;\n        int farthestNode = startNode;\n\n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (distances[neighbor] == -1) {\n                    distances[neighbor] = distances[currentNode] + 1;\n                    nodesQueue.push(neighbor);\n                    if (distances[neighbor] > distances[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return make_pair(farthestNode, distances[farthestNode]);\n    }\n};\n",
    "submit_ts": "1719719055",
    "subm_id": "1304432658"
}