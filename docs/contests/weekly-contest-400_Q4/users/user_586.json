{
    "username": "Megatron_07",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    public:\n        vector<int> tree;\n        int n;\n        SegmentTree(vector<int>& arr) {\n            n = arr.size();\n            tree.resize(4 * n);\n            build(arr, 0, 0, n - 1);\n        }\n        void build(vector<int>& arr, int node, int start, int end) {\n            if (start == end) tree[node] = arr[start];\n            else {\n                int mid = (start + end) / 2;\n                build(arr, 2 * node + 1, start, mid);\n                build(arr, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n            }\n        }\n\n        int query(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n\n        int query(int node, int start, int end, int l, int r) {\n            if (r < start || end < l)  return INT_MAX;\n            if (l <= start && end <= r) return tree[node];\n            int mid = (start + end) / 2;\n            int p1 = query(2 * node + 1, start, mid, l, r);\n            int p2 = query(2 * node + 2, mid + 1, end, l, r);\n            return p1 & p2;\n        }\n    };\n    int minimumDifference(vector<int>& nums, int k) {\n        ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);\n        int n = nums.size(), res = INT_MAX;\n        SegmentTree st(nums);\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (st.query(i, mid) >= k) l = mid;\n                else r = mid;\n            } if (l != i - 1) res = min(res, abs(st.query(i, l) - k));\n            res = min(res, abs(k - st.query(i, r)));\n        } return res;\n    }\n};",
    "submit_ts": 1717299231.0
}