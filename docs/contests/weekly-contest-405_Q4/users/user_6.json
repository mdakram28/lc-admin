{
    "username": "ernestlu",
    "submission": "#define all(x) x.begin(), x.end()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\nconstexpr int K = 26;\nstruct Vertex {\n  array<int, K> next;\n  bool terminal = false;\n  int terminal_idx = -1;\n  int p = -1;\n  char pch;\n  int depth = 0;\n  int link = 0;\n  int next_terminal = 0;\n  array<int, K> go;\n\n  Vertex(int p, char ch, int depth) : p(p), pch(ch), depth(depth) {\n    fill(next.begin(), next.end(), 0);\n    fill(go.begin(), go.end(), 0);\n  }\n};\n\nclass AhoCorasick {\npublic:\n  AhoCorasick() : t(1, {-1, '$', 0}) {}\n\n  int add_string(string const &s, int idx) {\n    // returns idx of final node\n    int v = 0;\n    for (char ch : s) {\n      int c = ch - 'a';\n      if (!t[v].next[c]) {\n        t[v].next[c] = t.size();\n        t.emplace_back(v, ch, t[v].depth + 1);\n      }\n      v = t[v].next[c];\n    }\n    t[v].terminal = true;\n    t[v].terminal_idx = idx;\n    return v;\n  }\n\n  void push_links() {\n    queue<int> q;\n    q.push(0);\n    while (!q.empty()) {\n      int v = q.front();\n      auto &cur = t[v];\n      auto &link = t[cur.link];\n      q.pop();\n      cur.next_terminal = link.terminal ? cur.link : link.next_terminal;\n\n      for (int c = 0; c < K; c++) {\n        if (cur.next[c]) {\n          t[cur.next[c]].link = v ? link.next[c] : 0;\n          q.push(cur.next[c]);\n        } else {\n          cur.next[c] = link.next[c];\n        }\n      }\n    }\n  }\n\n  int transition(int idx, char c) { return t[idx].next[c - 'a']; }\n\n  Vertex const &getInfo(int idx) { return t[idx]; }\n\nprivate:\n  vector<Vertex> t;\n};\n\nclass Solution {\npublic:\n  int minimumCost(string target, vector<string> &words, vector<int> &costs) {\n    int n = (int)target.size();\n    int m = (int)words.size();\n\n    vector<string> x = words;\n    sort(x.begin(), x.end());\n    x.erase(unique(all(x)), x.end());\n    int c = (int)x.size();\n    const int INF = 1e9;\n    vector<int> min_cost(c, INF);\n    for (int i = 0; i < m; i++) {\n      int id = lower_bound(all(x), words[i]) - x.begin();\n      min_cost[id] = min(min_cost[id], costs[i]);\n    }\n    AhoCorasick ac;\n    for (int i = 0; i < c; i++) {\n      ac.add_string(x[i], i);\n    }\n    ac.push_links();\n    vector<int> dp(n, INF);\n    int node_id = 0;\n    for (int i = 0; i < n; i++) {\n      const char u = target[i];\n      node_id = ac.transition(node_id, u);\n\n      int cur = node_id;\n      while (cur != 0) {\n        if (ac.getInfo(cur).terminal) {\n          int id = ac.getInfo(cur).terminal_idx;\n          int sz = (int)x[id].size();\n          int cost = min_cost[id];\n          int pdp = (sz == i + 1 ? 0 : dp[i - sz]);\n          dp[i] = min(dp[i], pdp + cost);\n        }\n        cur = ac.getInfo(cur).next_terminal;\n      }\n    }\n    return dp.back() >= INF ? -1 : dp.back();\n  }\n};",
    "submit_ts": "1720320176",
    "subm_id": "1312285733"
}