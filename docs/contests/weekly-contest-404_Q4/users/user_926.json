{
    "username": "psshrivathsa784",
    "submission": "#define N 100001\n#define forz(i,a,b) for(int i = a;i<b;i++)\n\nvector<int> tree1[N];\nvector<int> tree2[N];\n\nvoid dfs1(int ver,int par,vector<int> &dist){\n    for (int child:tree1[ver]){\n        if (child!=par){\n            dist[child] = dist[ver]+1;\n            dfs1(child,ver,dist);\n        }\n    }\n}\n\nvoid dfs2(int ver,int par,vector<int> &dist){\n    for (int child:tree2[ver]){\n        if (child!=par){\n            dist[child] = dist[ver]+1;\n            dfs2(child,ver,dist);\n        }\n    }\n}\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int n = edges1.size()+1;\n        int m = edges2.size()+1;\n\n        forz(i,0,max(n,m)){\n            tree1[i].clear();\n            tree2[i].clear();\n        }\n\n        for(auto p: edges1){\n            int a = p[0];\n            int b = p[1];\n            tree1[a].push_back(b);\n            tree1[b].push_back(a);\n        }\n\n        for(auto p: edges2){\n            int a = p[0];\n            int b = p[1];\n            tree2[a].push_back(b);\n            tree2[b].push_back(a);\n        }\n\n        vector<int> dist(max(n,m),0);\n        \n        int d1 = 0;\n\n        if (edges1.size()){\n            dfs1(0, -1, dist);\n            int mx = 0;\n            int node = 0;\n            forz(i,0,n){\n                if (dist[i]>mx){\n                    mx = dist[i];\n                    node = i;\n                }\n                dist[i] = 0;\n            }\n            cout<<node<<'\\n';\n            dfs1(node, -1, dist);\n            \n            forz(i,0,n){\n                d1 = max(d1,dist[i]);\n                dist[i] = 0;\n            }\n        }\n\n        \n\n        int d2 = 0;\n\n        if (edges2.size()){\n            dfs2(0, -1, dist);\n            int mx = 0;\n            int node = 0;\n            forz(i,0,m){\n                if (dist[i]>mx){\n                    mx = dist[i];\n                    node = i;\n                }\n                dist[i] = 0;\n            }\n            dfs2(node, -1, dist);\n            \n            forz(i,0,m){\n                d2 = max(d2,dist[i]);\n            }\n        }\n\n        cout<<d1<<' '<<d2<<'\\n';\n\n        return (max(max(d1/2+d1%2+d2/2+d2%2+1,d1),d2));\n\n    }\n};",
    "submit_ts": 1719719153.0
}