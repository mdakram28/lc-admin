{
    "username": "reverent-vaughanykq",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        TreeArray ta = new TreeArray(n);\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) ta.add(i, 1);\n        }\n        List<Integer> list = new ArrayList<>();\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                int l = q[1];\n                int r = q[2];\n                if (r <= l - 1) list.add(0);\n                else list.add(Math.max(ta.query(r-1)-ta.query(l),0));\n            } else {\n                int idx = q[1];\n                int v = q[2];\n                //\u5f53\u524d\u503c\n                if (idx > 0 && idx < n - 1) {\n                    int now = v > nums[idx - 1] && v > nums[idx + 1] ? 1 : 0;\n                    int pre = nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1] ? 1 : 0;\n                    if (now != pre) ta.add(idx, now - pre);\n                }\n                if (idx - 1 > 0 && idx - 1 < n - 1) {\n                    int now = nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > v ? 1 : 0;\n                    int pre = nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > nums[idx] ? 1 : 0;\n                    if (now != pre) ta.add(idx - 1, now - pre);\n                }\n                if (idx + 1 > 0 && idx + 1 < n - 1) {\n                    int now = nums[idx + 1] > v && nums[idx + 1] > nums[idx + 2] ? 1 : 0;\n                    int pre = nums[idx + 1] > nums[idx] && nums[idx + 1] > nums[idx + 2] ? 1 : 0;\n                    if (now != pre) ta.add(idx + 1, now - pre);\n                }\n                nums[idx] = v;\n\n            }\n        }\n        return list;\n    }\n\n    class TreeArray {\n        int[] nums;\n        int n;\n\n        public TreeArray(int n) {\n            this.n = n;\n            nums = new int[n];\n        }\n\n        public int lowBit(int x) {\n            return x & -x;\n        }\n\n        public void add(int x, int diff) {\n            while (x < n) {\n                nums[x] += diff;\n                x += lowBit(x);\n            }\n        }\n\n        public int query(int l) {\n            int sum = 0;\n            while (l > 0) {\n                sum += nums[l];\n                l -= lowBit(l);\n            }\n            return sum;\n        }\n\n    }\n}",
    "submit_ts": "1718508103",
    "subm_id": "539785364"
}