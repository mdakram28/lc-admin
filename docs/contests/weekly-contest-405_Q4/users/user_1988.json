{
    "username": "BestZee",
    "submission": "class Solution {\n\n    class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        Integer minCost = null;  // Store the minimum cost of the word ending here\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = new TrieNode();\n        buildTrie(root, words, costs);\n\n        int[] dp = new int[target.length() + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < target.length(); i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;  // Skip if no valid solution up to i\n            TrieNode node = root;\n            for (int j = i; j < target.length(); j++) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;  // No more matches possible\n                node = node.children.get(c);\n                if (node.minCost != null) {  // Check if a word ends here\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.minCost);\n                }\n            }\n        }\n        return dp[target.length()] == Integer.MAX_VALUE ? -1 : dp[target.length()];\n    }\n\n    private void buildTrie(TrieNode root, String[] words, int[] costs) {\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node = node.children.computeIfAbsent(c, k -> new TrieNode());\n            }\n            if (node.minCost == null || node.minCost > cost) {\n                node.minCost = cost;  // Update to keep the minimum cost\n            }\n        }\n    }\n}",
    "submit_ts": "1720323705",
    "subm_id": "1312382049"
}