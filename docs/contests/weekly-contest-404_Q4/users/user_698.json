{
    "username": "swapnilrai80",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        \n        a1 = [[] for _ in range(n)]\n        a2 = [[] for _ in range(m)]\n        \n        for i in edges1:\n            a1[i[0]].append(i[1])\n            a1[i[1]].append(i[0])\n        \n        for i in edges2:\n            a2[i[0]].append(i[1])\n            a2[i[1]].append(i[0])\n        \n        def swapnil_dfs(a, start):\n            di = [-1] * len(a)\n            fNq = start\n            stack = [(start, 0)]\n            while stack:\n                lore, d = stack.pop()\n                if di[lore] == -1:\n                    di[lore] = d\n                    if d > di[fNq]:\n                        fNq = lore\n                    for horse in a[lore]:\n                        if di[horse] == -1:\n                            stack.append((horse, d + 1))\n            return fNq, di[fNq]\n        \n        n1, _ = swapnil_dfs(a1, 0)\n        n1, d1 = swapnil_dfs(a1, n1)\n        \n        n2, _ = swapnil_dfs(a2, 0)\n        n2, d2 = swapnil_dfs(a2, n2)\n        \n        mD = max(d1, d2)\n        folk = (d1 + 1) // 2\n        ever = (d2 + 1) // 2\n        mD = max(mD, folk + ever + 1)\n        \n        return mD\n",
    "submit_ts": "1719718109",
    "subm_id": "1304409000"
}