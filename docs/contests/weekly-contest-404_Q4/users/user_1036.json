{
    "username": "LiuWeibo",
    "submission": "class Solution {\n    using vi = vector<int>;\n    using vvi = vector<vi>;\n    int get_dist(const vvi& g) {\n        vi dist(g.size(), INT_MAX / 2);\n        cout << \"dist.size(): \" << dist.size() << endl;\n        auto dfs = [&](auto&& self, int u, int fa) -> void {\n            for (auto v: g[u]) {\n                if (v == fa) continue;\n                dist[v] = dist[u] + 1;\n                self(self, v, u);\n            }\n        };\n        dist[0] = 1;\n        dfs(dfs, 0, -1);\n        int v = max_element(dist.begin(), dist.end()) - dist.begin();\n        cout << \"v: \" << v << endl;\n        dist = vi(g.size(), INT_MAX / 2);\n        dist[v] = 0;\n        dfs(dfs, v, -1);\n        return *max_element(dist.begin(), dist.end());\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& es1, vector<vector<int>>& es2) {\n        int n = es1.size() + 1, m = es2.size() + 1;\n        vvi g1(n), g2(m);\n        for (const auto& e: es1) {\n            int u = e[0], v = e[1];\n            g1[u].push_back(v), g1[v].push_back(u);\n        }\n        for (const auto& e: es2) {\n            int u = e[0], v = e[1];\n            g2[u].push_back(v), g2[v].push_back(u);\n        }\n        \n        int d1 = get_dist(g1), d2 = get_dist(g2);\n        cout << \"d1: \" << d1 << \" d2: \" << d2 << endl;\n        return max({(d1 + 1) / 2 + (d2 + 1) / 2 + 1, d1, d2});\n    }\n};",
    "submit_ts": 1719719045.0
}