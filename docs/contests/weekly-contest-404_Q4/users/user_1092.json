{
    "username": "gehlotbhopesh007",
    "submission": "\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n         auto d = [](const vector<vector<int>>& e) {\n            int n = e.size() + 1;\n            vector<vector<int>> ad(n);\n            for (const auto& edge : e) {\n                ad[edge[0]].push_back(edge[1]);\n                ad[edge[1]].push_back(edge[0]);\n            }\n            auto solve = [&](int s) {\n                vector<int> d(n, -1);\n                queue<int> q;\n                q.push(s);\n                d[s] = 0;\n                int firsts = s;\n                while (!q.empty()) {\n                    int node = q.front();\n                    q.pop();\n                    for (int near : ad[node]) {\n                        if (d[near] == -1) {\n                            d[near] = d[node] + 1;\n                            q.push(near);\n                            if (d[near] > d[firsts]) {\n                                firsts = near;\n                            }\n                        }\n                    }\n                }\n                return make_pair(firsts, d[firsts]);\n            };\n            int u = solve(0).first;\n            int dia = solve(u).second;\n            return dia;\n        };\n\n        int d1 = d(edges1);\n        int d2 = d(edges2);\n\n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": "1719719904",
    "subm_id": "1304453572"
}