{
    "username": "farzanhlhvr",
    "submission": "int binarySearch(int arr[], int low, int high, int x)\n{\n    while (low <= high) {\n        int mid = low + (high - low) / 2;\n\n        // Check if x is present at mid\n        if (arr[mid] == x)\n            return mid;\n\n        // If x greater, ignore left half\n        if (arr[mid] < x)\n            low = mid + 1;\n\n        // If x is smaller, ignore right half\n        else\n            high = mid - 1;\n    }\n\n    // If we reach here, then element was not present\n    return -1;\n}\n\n// // Driver code\n// int main(void)\n// {\n//     int arr[] = { 2, 3, 4, 10, 40 };\n//     int x = 10;\n//     int n = sizeof(arr) / sizeof(arr[0]);\n//     int result = binarySearch(arr, 0, n - 1, x);\n//     (result == -1)\n//         ? cout << \"Element is not present in array\"\n//         : cout << \"Element is present at index \" << result;\n//     return 0;\n// }\nclass Solution {\npublic:\n    static const int MOD = 1'000'000'007;\n    static const int Inv = 400;\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n\n        unordered_map<int, int> mp;\n        for (const auto& req : req) {\n            mp[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> permCnt(n + 1, vector<long>(Inv + 1, 0));\n        permCnt[0][0] = 1;\n\n\n        for (int i = 1; i <= n; ++i) {\n            for (int inv = 0; inv <= Inv; ++inv) {\n                for (int newPos = 0; newPos < i; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCnt[i][inv] = (permCnt[i][inv] + permCnt[i - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n\n            if (mp.find(i) != mp.end()) {\n                int targetInv = mp[i];\n                for (int inv = 0; inv <= Inv; ++inv) {\n                    if (inv != targetInv) {\n                        permCnt[i][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : permCnt[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": "1719071125",
    "subm_id": "1296839650"
}