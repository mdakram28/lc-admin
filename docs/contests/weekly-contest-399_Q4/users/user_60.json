{
    "username": "SR3mix",
    "submission": "typedef long long ll;\nll M = 1e9 + 7;\nclass SegmentTree {     \npublic:\n    long long seg[800080][4];\n    long long trueVector[200020];\n    long long segBase;\n    long long n = 0;\n    SegmentTree(long long newSegBase) {\n        segBase = newSegBase;\n    }\n    void reset(long long newN) {\n        n = newN;\n        for (int i= 0; i<(n+2); i++) {\n            trueVector[i]=segBase;\n            for (int j = 0; j < 4; j++) {\n                for (int k = 0; k < 4; k++) {\n                    seg[4 * i + j][k] = segBase;\n                }\n            }\n        }\n    }\n    void update(int pos, long long x) {doUpdate(1,1,n,pos,x);}\n    void doUpdate(int v, int tl, int tr, int pos, long long x) {\n        trueVector[pos] = x;\n        if (tl == tr) {seg[v][0] = x; seg[v][1] = 0; seg[v][2] = 0; seg[v][3] = 0;}\n        else {\n            int tm = (tl+tr) >> 1;\n            if (pos <= tm) doUpdate(v<<1, tl, tm, pos, x);\n            else doUpdate(v<<1|1, tm+1, tr, pos, x);\n            if (tl + 1 == tr) {\n                seg[v][0] = max(seg[v<<1][0], seg[v<<1|1][1]);\n                seg[v][1] = seg[v<<1|1][0];\n                seg[v][2] = seg[v<<1][0];\n                seg[v][3] = 0;\n            }\n            \n            seg[v][0] = max(seg[v<<1][2] + seg[v<<1|1][1], max(seg[v<<1][0] + seg[v<<1|1][1], seg[v<<1][2] + seg[v<<1|1][0]));\n            seg[v][1] = max(seg[v<<1][3] + seg[v<<1|1][1], max(seg[v<<1][1] + seg[v<<1|1][1], seg[v<<1][3] + seg[v<<1|1][0]));\n            seg[v][2] = max(seg[v<<1][2] + seg[v<<1|1][3], max(seg[v<<1][0] + seg[v<<1|1][3], seg[v<<1][2] + seg[v<<1|1][2]));\n            seg[v][3] = max(seg[v<<1][3] + seg[v<<1|1][3], max(seg[v<<1][1] + seg[v<<1|1][3], seg[v<<1][3] + seg[v<<1|1][2]));\n        }\n    }\n    long long trueValue(long long index) {return trueVector[index];}\n    long long update_operation(long long originalVal, long long newVal) {return newVal;}\n};\n// CREDIT TO numb3r5 FOR THIS TEMPLATE -> https://leetcode.com/numb3r5/\nSegmentTree seg = SegmentTree(0);\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        seg.reset(n);\n        for (int i = 1; i <= n; i++) seg.update(i,max(nums[i-1],0));\n        ll ans = 0;\n        for (auto &q : queries) {\n            int i = q[0] + 1;\n            int x = q[1];\n            seg.update(i,max(x,0));\n            ll res = max(max(seg.seg[1][0], seg.seg[1][1]), max(seg.seg[1][2], seg.seg[1][3]));\n            ans += res;\n            \n        }\n        //cout << \"\\n\";\n        return ans%M;\n    }\n};",
    "submit_ts": "1716693038",
    "subm_id": "1268073215"
}