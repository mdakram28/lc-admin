{
    "username": "divs8287",
    "submission": "class Solution {\npublic:\n    int ans=0;\n    void computeLPSArray(string &pat, int M, vector<int> &lps)\n    {\n        // length of the previous longest prefix suffix\n        int len = 0;\n    \n        lps[0] = 0; // lps[0] is always 0\n    \n        // the loop calculates lps[i] for i = 1 to M-1\n        int i = 1;\n        while (i < M) {\n            if (pat[i] == pat[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            }\n            else // (pat[i] != pat[len])\n            {\n                // This is tricky. Consider the example.\n                // AAACAAAA and i = 7. The idea is similar\n                // to search step.\n                if (len != 0) {\n                    len = lps[len - 1];\n    \n                    // Also, note that we do not increment\n                    // i here\n                }\n                else // if (len == 0)\n                {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n    void KMPSearch(string &pat, string &txt)\n    {\n        int M = pat.size();\n        int N = txt.size();\n        vector<int> lps(M);\n        computeLPSArray(pat, M, lps);\n    \n        int i = 0; // index for txt[]\n        int j = 0; // index for pat[]\n        while ((N - i) >= (M - j)) {\n            if (pat[j] == txt[i]) {\n                j++;\n                i++;\n            }\n    \n            if (j == M) {\n                ans++;\n                j = lps[j - 1];\n            }\n    \n            // mismatch after j matches\n            else if (i < N && pat[j] != txt[i]) {\n                // Do not match lps[0..lps[j-1]] characters,\n                // they will match anyway\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i = i + 1;\n            }\n        }\n    }\n    int numberOfAlternatingGroups(vector<int>& col, int k) {\n        //kmp algo\n        if(k>col.size()){\n            return 0;\n        }\n        string s1=\"\";\n        for(int i=0;i<col.size();i++){\n            s1+=to_string(col[i]);\n        }\n        string s2=s1.substr(0, k-1);\n        s1+=s2;\n        string pat1=\"\", pat2=\"\";\n        for(int i=0;i<k;i++){\n            if((i%2)==0){\n                pat1+='1';\n                pat2+='0';\n                cout<<\"1 \"<<pat1[i]<<\" \"<<pat2[i]<<endl;\n            }\n            else{\n                pat1+='0';\n                pat2+='1';\n                cout<<\"1 \"<<pat1[i]<<\" \"<<pat2[i]<<endl;\n            }\n        }\n        // cout<<\"hehe\"<<pat1<<\" \"<<pat2<<endl;\n        // cout<<\"s1\"<<s1<<endl;\n        KMPSearch(pat1, s1);\n        KMPSearch(pat2, s1);\n        return ans;\n    }\n};",
    "submit_ts": "1720279033",
    "subm_id": "1311734485"
}