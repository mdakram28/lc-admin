{
    "username": "Ivan Vasilenko",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n\n        values = sorted(((board[i][j], i, j) for i in range(m) for j in range(n)), reverse=True)\n\n        def bfs():\n            total_result_count = 0\n            max_result = -math.inf\n\n            queue = deque([(0, set())])\n\n            while queue:\n                index, used_cells = queue.popleft()\n                _, i, j = values[index]\n                can_use = True\n\n                for ui, uj in used_cells:\n                    if ui == i or uj == j:\n                        can_use = False\n                        break\n\n                if can_use:\n                    next_used_cells = set(used_cells)\n                    next_used_cells.add((i, j))\n                    if len(next_used_cells) == 3:\n                        result = sum(board[ui][uj] for (ui, uj) in next_used_cells)\n                        max_result = max(max_result, result)\n                        total_result_count += 1\n                        if total_result_count == 100:\n                            return max_result\n                    elif index + 1 != len(values):\n                        queue.append((index + 1, next_used_cells))\n\n                if index + 1 != len(values):\n                    queue.append((index + 1, used_cells))\n\n            return max_result\n\n        return bfs()",
    "submit_ts": "1723907717",
    "subm_id": "1359121100"
}