{
    "username": "user3013OR",
    "submission": "class Trie:\n    def __init__(self):\n        self.child = {}\n        self.isWord = False\n        self.cost = int(5e8)\n    \n    def insert(self,s,val):\n        node = self\n        for c in s:\n            if c not in node.child:\n                node.child[c] = Trie()\n            node = node.child[c]\n        node.isWord = True\n        node.cost = min(node.cost,val)\n\n    def dfs(self,s,ind,n,dp):\n        node = self\n        for i in range(ind,n):\n            #print (ind,i)\n            c = s[i]\n            if c not in node.child:\n                return\n            node = node.child[c]\n            if node.isWord:\n                if dp[i+1]==-1:\n                    dp[i+1]=dp[ind]+node.cost\n                else:\n                    dp[i+1]=min(dp[i+1],dp[ind]+node.cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Trie()\n        n = len(words)\n        for i in range(n):\n            root.insert(words[i],costs[i])\n        \n        n = len(target)\n        dp = [-1 for i in range(n+1)]\n        dp[0] = 0\n        for i in range(n):\n            if dp[i]==-1:\n                continue\n            root.dfs(target,i,n,dp)\n        return dp[n]\n            \n        ",
    "submit_ts": "1720321513",
    "subm_id": "1312324876"
}