{
    "username": "Aniket Saini",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        int n = s.length();\n        int nextIndex[] = new int[n];\n        \n        int arr[][] = new int[n][2];\n        \n        for(int i = 0; i < n; i++) {\n            arr[i][0] = i - 1 >= 0 ? arr[i - 1][0] : 0;\n            arr[i][1] = i - 1 >= 0 ? arr[i - 1][1] : 0;\n            \n            if(s.charAt(i) == '0')\n                arr[i][0]++;\n            else\n                arr[i][1]++;\n        }\n        \n        for(int i = 0; i < n; i++) {\n            int zero = i - 1 >= 0 ? arr[i - 1][0] : 0;\n            int one = i - 1 >= 0 ? arr[i - 1][1] : 0;\n            nextIndex[i] = binarySearch(i, arr, k, zero, one);\n        }\n        \n//         for(int i = 0; i < n; i++) {\n//             System.out.print(nextIndex[i] + \" \");\n//         }\n        \n//         System.out.println();\n        \n        long prefixSum[] = new long[n];\n        prefixSum[0] = nextIndex[0];\n        \n        for(int i = 1; i < n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + nextIndex[i];\n        }\n        \n        long ans[] = new long[queries.length];\n        \n        for(int i = 0; i < queries.length; i++) {\n            int l = queries[i][0];\n            int r = queries[i][1];\n            int len = r - l + 1;\n            \n            long total = 1l * len * (len + 1);\n            total = total / 2;\n            \n            int idx = binarySearchLower(l, r, nextIndex);\n            \n            // System.out.println(i + \" \" + idx);\n            \n            if(idx < l) {\n                ans[i] = total;\n            } else {\n                long diff = prefixSum[idx];\n                if(l - 1 >= 0)\n                    diff -= prefixSum[l - 1];\n                \n                int diffLen = idx - l + 1;\n                \n                ans[i] = total - ((1l * diffLen * r) - diff + diffLen);\n            }\n        }\n        \n        return ans;\n    }\n    \n    private int binarySearchLower(int l, int r, int arr[]) {\n        int low = l;\n        int high = r;\n        \n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            \n            if(arr[mid] <= r) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n        \n        return high;\n    }\n    \n    private int binarySearch(int low, int arr[][], int k, int zero, int one) {\n        int high = arr.length - 1;\n        \n        while(low <= high) {\n            int mid = low + (high - low) / 2;\n            \n            if(arr[mid][0] - zero > k && arr[mid][1] - one > k) {\n                high = mid - 1;\n            } else {\n                low = mid + 1;\n            }\n        }\n        \n        return low;\n    }\n}",
    "submit_ts": "1723952722",
    "subm_id": "1359803063"
}