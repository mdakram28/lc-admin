{
    "username": "Khushboo_Kumari_123",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    long long totalCost = 0;\n    long long hIndex = 0, vIndex = 0;\n    long long hPieces = 1, vPieces = 1;\n\n    // Use a greedy algorithm to choose the largest cuts first\n    while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n        if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n            totalCost += horizontalCut[hIndex] * vPieces;\n            hIndex++;\n            hPieces++;\n        } else {\n            totalCost += verticalCut[vIndex] * hPieces;\n            vIndex++;\n            vPieces++;\n        }\n    }\n\n    // Add the remaining horizontal cuts\n    while (hIndex < horizontalCut.size()) {\n        totalCost += (1ll*horizontalCut[hIndex] * vPieces);\n        hIndex++;\n        hPieces++;\n    }\n\n    // Add the remaining vertical cuts\n    while (vIndex < verticalCut.size()) {\n        totalCost += (1ll*verticalCut[vIndex] * hPieces);\n        vIndex++;\n        vPieces++;\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720926123",
    "subm_id": "1320276681"
}