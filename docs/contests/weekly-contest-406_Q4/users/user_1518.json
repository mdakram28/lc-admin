{
    "username": "suckmabol",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    long long int totalCost = 0;\n    long long int horizontalSegments = 1LL;\n    long long int verticalSegments = 1LL;\n    int i = 0, j = 0;\n\n    // While there are cuts to be made\n    while (i < horizontalCut.size() || j < verticalCut.size()) {\n        if (j >= verticalCut.size() || (i < horizontalCut.size() && horizontalCut[i] >= verticalCut[j])) {\n            totalCost += horizontalCut[i] * verticalSegments;\n            horizontalSegments++;\n            i++;\n        } else {\n            totalCost += verticalCut[j] * horizontalSegments;\n            verticalSegments++;\n            j++;\n        }\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925413",
    "subm_id": "1320253910"
}