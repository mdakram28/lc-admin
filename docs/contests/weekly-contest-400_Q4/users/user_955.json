{
    "username": "abhin109",
    "submission": "#include <iostream>\n#include <vector>\n#include <climits>\n\nusing namespace std;\n\nclass CustomSegmentTree {\n    int treeSize;\n    vector<int> segmentTree;\n\npublic:\n    // Constructor to initialize the segment tree with an array\n    CustomSegmentTree(vector<int>& inputArray) {\n        treeSize = inputArray.size();\n        segmentTree.resize(4 * treeSize);\n        buildSegmentTree(inputArray, 0, 0, treeSize - 1);\n    }\n\n    // Helper function to build the segment tree\n    void buildSegmentTree(vector<int>& inputArray, int node, int start, int end) {\n        if (start == end) {\n            segmentTree[node] = inputArray[start];\n        } else {\n            int middle = (start + end) / 2;\n            buildSegmentTree(inputArray, 2 * node + 1, start, middle);\n            buildSegmentTree(inputArray, 2 * node + 2, middle + 1, end);\n            // Merge operation: '&' operator is used for AND operation in this segment tree\n            segmentTree[node] = segmentTree[2 * node + 1] & segmentTree[2 * node + 2];\n        }\n    }\n\n    // Function to query the segment tree\n    int queryRange(int leftIndex, int rightIndex) {\n        return rangeAndQuery(0, 0, treeSize - 1, leftIndex, rightIndex);\n    }\n\n    // Helper function to perform range query on the segment tree\n    int rangeAndQuery(int node, int start, int end, int leftIndex, int rightIndex) {\n        if (rightIndex < start || end < leftIndex) {\n            return INT_MAX;\n        }\n        if (leftIndex <= start && end <= rightIndex) {\n            return segmentTree[node];\n        }\n        int middle = (start + end) / 2;\n        int leftResult = rangeAndQuery(2 * node + 1, start, middle, leftIndex, rightIndex);\n        int rightResult = rangeAndQuery(2 * node + 2, middle + 1, end, leftIndex, rightIndex);\n        return leftResult & rightResult;\n    }\n};\n\nclass Solution {\nprivate:\n    // Helper function to find the minimum difference\n    int findMinDifference(vector<int>& inputArray, int targetValue, CustomSegmentTree& segmentTree) {\n        int arraySize = inputArray.size();\n        int minDifference = INT_MAX;\n\n        for (int i = 0; i < arraySize; i++) {\n            int leftIndex = i - 1;\n            int rightIndex = arraySize - 1;\n            while (rightIndex - leftIndex > 1) {\n                int middleIndex = (leftIndex + rightIndex) / 2;\n                if (segmentTree.queryRange(i, middleIndex) >= targetValue) {\n                    leftIndex = middleIndex;\n                } else {\n                    rightIndex = middleIndex;\n                }\n            }\n            if (leftIndex != i - 1) {\n                minDifference = min(minDifference, abs(segmentTree.queryRange(i, leftIndex) - targetValue));\n            }\n            minDifference = min(minDifference, abs(targetValue - segmentTree.queryRange(i, rightIndex)));\n        }\n\n        return minDifference;\n    }\n\npublic:\n    // Main function to calculate the minimum difference\n    int minimumDifference(vector<int>& inputArray, int targetValue) {\n        // Construct the segment tree\n        bool flaag=false;\n        for(int i=0;i<targetValue;i++) flaag=true;\n        CustomSegmentTree segmentTree(inputArray);\n        // Find the minimum difference\n        return findMinDifference(inputArray, targetValue, segmentTree);\n    }\n};\n",
    "submit_ts": 1717300716.0
}