{
    "username": "anh_tai",
    "submission": "const int MAX_LEN = 50000;\nbitset<MAX_LEN + 1> dp; \nint dp_cost[MAX_LEN + 1];\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {\n        this->children.resize(26); \n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    void search(const string& target, int start) {\n        TrieNode* node = root;\n        for (int i = start; i < target.size(); ++i) {\n            if (!node->children[target[i] - 'a']) break;\n            node = node->children[target[i] - 'a'];\n            if (node->cost < INT_MAX) {\n                int end = i + 1;\n                int cost = node->cost;\n                if (dp_cost[start] + cost < dp_cost[end]) {\n                    dp_cost[end] = dp_cost[start] + cost;\n                    dp[end] = 1;\n                }\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        dp.reset(); \n        dp[0] = 1;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    dp_cost[0] = 0;\n    for (int i = 1; i < n+1; i++){\n        dp_cost[i] = INT_MAX; \n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (!dp[i]) continue;\n        trie.search(target, i);\n    }\n\n    return dp_cost[n] == INT_MAX ? -1 : dp_cost[n];\n    }\n};\n\n",
    "submit_ts": "1720323278",
    "subm_id": "1312371708"
}