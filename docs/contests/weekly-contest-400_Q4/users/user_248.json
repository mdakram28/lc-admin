{
    "username": "Namakian",
    "submission": "class Solution {\npublic:\n    \n    typedef long long LL;\n    static const int N = 2 * 1e5 + 10;\n\n    struct node {\n      LL val;\n      node() {}\n      node(int val) : val(val) {}\n    };\n\n    node seg[4 * N];\n\n    node merge(const node &l, const node &r) {\n      node p;\n      p.val = l.val & r.val;\n      return p;\n    }\n\n    void build(int ind, int L, int R, vector<int>& arr) {\n      if (L == R) {\n        seg[ind] = node(arr[L]);\n        return;\n      }\n\n      int mid = (L + R) / 2;\n\n      build(2 * ind, L, mid,arr);\n      build(2 * ind + 1, mid + 1, R,arr);\n\n      seg[ind] = merge(seg[2 * ind], seg[2 * ind + 1]);\n    }\n\n    node query(int ind, int L, int R, int qx, int qy) {\n      if (qx > R || qy < L) {\n        return node(INT_MAX);\n      }\n\n      if (qx <= L && R <= qy) {\n        return seg[ind];\n      }\n\n      int mid = (L + R) / 2;\n      node l = query(2 * ind, L, mid, qx, qy);\n      node r = query(2 * ind + 1, mid + 1, R, qx, qy);\n      return merge(l, r);\n    }\n    \n    \n    int query(int L,int R, int n) {\n        return query(1,0, n-1, L, R).val;\n    }\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        build(1, 0, n-1, nums);\n        \n        int ans = INT_MAX;\n        \n        for(int i=0;i<n;i++) {\n            int L = i, R = n-1;\n            \n            while(L<=R) {\n                int mid = (L+R)/2;\n                \n                int tmp = query(i, mid, n);\n                \n                // cout << i << \" \" << tmp << \" \" << mid << \" \" << abs(k-tmp) << endl;\n                \n                ans = min(ans, abs(k-tmp));\n                \n                if(k>tmp) {\n                    R = mid-1;\n                } else {\n                    L = mid+1;\n                }\n            }\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": 1717298018.0
}