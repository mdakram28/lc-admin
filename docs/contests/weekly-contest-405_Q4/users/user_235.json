{
    "username": "a-dimitri",
    "submission": "class TrieNodeLC {\npublic:\n    vector<TrieNodeLC*> children;\n    int cost = 0;\n    TrieNodeLC() { children.resize(26, nullptr); }\n};\n\nclass TrieLC {\npublic:\n    TrieNodeLC* root;\n    TrieLC () { root = new TrieNodeLC(); };\n    void insert(string word, int cost) {\n        TrieNodeLC* curr = root;\n        for ( char c :  word ) {\n            if ( curr->children[c-'a'] == nullptr ) curr->children[c-'a'] = new TrieNodeLC();\n            curr = curr->children[c-'a'];\n        }\n        if ( curr->cost > 0 ) curr->cost = min(curr->cost, cost);\n        else curr->cost = cost;\n    }\n    int search(string word) {\n        TrieNodeLC* curr = root;\n        for ( char c : word ) {\n            if ( curr->children[c-'a'] == nullptr ) return false;\n            curr = curr->children[c-'a'];\n        }\n        return curr->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // Create Trie for the dictionary, with cost stored in each terminal node\n        TrieLC T = TrieLC();\n        for ( int i = 0; i < words.size(); ++i ) {\n            reverse(words[i].begin(), words[i].end());\n            T.insert(words[i], costs[i]);\n        }\n\n        // DP[i] == min cost to form first i characters\n        int n = target.size();\n        vector<int> dp(n+1, -1);\n        dp[0] = 0;\n        for ( int i = 1; i <= n; ++i ) {\n            TrieNodeLC* curr = T.root;\n            for ( int j = i-1; j >= 0; --j ) {\n                if ( curr->children[target[j]-'a'] == nullptr ) break;\n                curr = curr->children[target[j]-'a'];\n                if ( curr->cost != 0 && dp[j] != -1 ) {\n                    if ( dp[i] == -1 ) dp[i] = dp[j] + curr->cost;\n                    else dp[i] = min(dp[i], dp[j] + curr->cost);\n                }\n            }\n        }\n        return dp[n];\n    }\n};",
    "submit_ts": "1720321550",
    "subm_id": "1312325862"
}