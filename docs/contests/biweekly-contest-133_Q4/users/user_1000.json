{
    "username": "agrawalsoojal06",
    "submission": "class Solution {\npublic:\n    int MODULO = 1e9 + 7;\n    int MAX_INV = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& constraints) {\n        int j  =  0;\n        j^=1;\n        long totalPermutations = 0;\n\n        if(j){\n            \n        \n        unordered_map<int, int> constraintMap;\n        for (auto constraint : constraints) {\n            constraintMap[constraint[0] + 1] = constraint[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        \n        for (int len = 1; len <= n; ++len) {\n            for (int invCount = 0; invCount <= MAX_INV; ++invCount) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = invCount - pos;\n                    if (prevInv >= 0) {\n                        dp[len][invCount] = (dp[len][invCount] + dp[len - 1][prevInv]) % MODULO;\n                    }\n                }\n            }\n            if (constraintMap.find(len) != constraintMap.end()) {\n                int requiredInv = constraintMap[len];\n                for (int invCount = 0; invCount <= MAX_INV; ++invCount) {\n                    if (invCount != requiredInv) {\n                        dp[len][invCount] = 0;\n                    }\n                }\n            }\n        }\n\n        for (long count : dp[n]) {\n            totalPermutations = (totalPermutations + count) % MODULO;\n        }\n        }\n        return (int)totalPermutations;\n        \n    }\n};\n",
    "submit_ts": 1719071782.0
}