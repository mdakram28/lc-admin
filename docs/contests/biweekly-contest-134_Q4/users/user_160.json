{
    "username": "harshit044",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int> &arr, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, start, mid, 2 * node + 1);\n            build(arr, mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int start, int end, int l, int r, int node) {\n        if (r < start || end < l) { // no overlap\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) { // total overlap\n            return tree[node];\n        }\n        // partial overlap\n        int mid = (start + end) / 2;\n        int left_query = query(start, mid, l, r, 2 * node + 1);\n        int right_query = query(mid + 1, end, l, r, 2 * node + 2);\n        return left_query & right_query;\n    }\n\n    void update(int start, int end, int idx, int value, int node) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(start, mid, idx, value, 2 * node + 1);\n            } else {\n                update(mid + 1, end, idx, value, 2 * node + 2);\n            }\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int> &arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, n - 1, 0);\n    }\n\n    int query(int l, int r) {\n        return query(0, n - 1, l, r, 0);\n    }\n\n    void update(int idx, int value) {\n        update(0, n - 1, idx, value, 0);\n    }\n};\n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        \n        SegmentTree st(nums);\n        \n        long long ans =0 ;\n        \n        int n  = nums.size();\n        for(int i = 0 ; i < n; i++){\n            \n            int lefty = -1, righty = -1;\n            int l = i;\n            int r = n-1;\n            \n            \n            while(l<=r){\n                int mid = (l+r)/2;\n                \n                if(st.query(i,mid)==k){\n                    lefty = mid;\n                    r = mid -1;\n                }\n                else if(st.query(i,mid)>k){\n                    \n                    l = mid + 1;\n                    \n                }\n                else{\n                    \n                    r = mid - 1;\n                }\n            }\n            \n            \n            \n            l = i;\n            \n            r= n - 1;\n            \n            while(l<=r){\n                int mid = (l+r)/2;\n                \n                if(st.query(i,mid)==k){\n                    righty = mid;\n                    l = mid + 1;\n                }\n                else if(st.query(i,mid)>k){\n                    \n                    l = mid + 1;\n                    \n                }\n                else{\n                    \n                    r = mid - 1;\n                }\n            }\n            \n            \n            if(lefty==-1)continue;\n            \n            ans += (righty - lefty + 1);\n            \n            \n            \n        }\n        \n        return ans;\n        \n        \n    }\n};",
    "submit_ts": "1720278701",
    "subm_id": "1311720542"
}