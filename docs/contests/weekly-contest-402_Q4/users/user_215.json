{
    "username": "LCalGaib",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n#pragma region\ntemplate <typename T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define ll long long\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define ins insert\n\nvoid __print(int x) { cout << x; }\nvoid __print(long x) { cout << x; }\nvoid __print(long long x) { cout << x; }\nvoid __print(unsigned x) { cout << x; }\nvoid __print(unsigned long x) { cout << x; }\nvoid __print(unsigned long long x) { cout << x; }\nvoid __print(float x) { cout << x; }\nvoid __print(double x) { cout << x; }\nvoid __print(long double x) { cout << x; }\nvoid __print(char x) { cout << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cout << (x ? \"true\" : \"false\"); }\ntemplate <size_t N>\nvoid __print(const bitset<N>& x) { cout << x; };\n\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x);\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v);\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x) {\n    cout << '{';\n    __print(x.first);\n    cout << \", \";\n    __print(x.second);\n    cout << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x) {\n    int f = 0;\n    cout << '{';\n    for (auto &i : x) cout << (f++ ? \", \" : \"\"), __print(i);\n    cout << \"}\";\n}\nvoid _print() { cout << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {\n    __print(t);\n    if (sizeof...(v)) cout << \", \";\n    _print(v...);\n}\n\ntemplate<class T> bool ckmin(T&a, const T& b) { bool B = a > b; a = min(a,b); return B; }\ntemplate<class T> bool ckmax(T&a, const T& b) { bool B = a < b; a = max(a,b); return B; }\n#pragma endregion\n\n#define dbg(x...)                                                            \\\n    cout << \"[\" << __func__ << \":\" << __LINE__ - 9 << \" [\" << #x << \"] = [\"; \\\n    _print(x);                                                               \\\n    cout << endl;\n// #define dbg(x...)\n\ntemplate <class T = int> struct fenwick { // 0 or 1-indexed, doesn't matter\n    vector<T> bit, val;\n    int n;\n\n    fenwick() {};\n\n    fenwick(int N) { // Maximum position allowed in fenwick tree\n        n = N+1; // we will offset all positions by 1 to handle 0-indexed\n        bit.resize(n+1);\n        val.resize(n+1);\n    }\n\n    void add(int pos, T delta) {\n        val[pos] += delta;\n        for (pos++; pos <= n; pos += pos&-pos) bit[pos] += delta;\n    }\n\n    void set(int pos, T v) {\n        add(pos, v - val[pos]);\n    }\n\n    T query(int pos) { // return sum of positions <= x\n        T res = 0;\n        for (pos++; pos; pos -= pos&-pos) res += bit[pos];\n        return res;\n    }\n\n    T query(int l, int r) { // return sum between [l, r]\n        return query(r) - query(l-1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& A, vector<vector<int>>& queries) {\n        int N = A.size();\n        auto fw = fenwick(N);\n        \n        for (int i = 1; i < N - 1; ++i) {\n            fw.set(i, A[i] > A[i - 1] && A[i] > A[i + 1]);\n        }\n        vector<int> res;\n        for (const auto& q : queries) {\n            auto t = q[0], i = q[1], b = q[2];\n            if (t == 1) {\n                auto x = fw.query(i, b) - (fw.query(i) - fw.query(i - 1)) - (b != i ? (fw.query(b) - fw.query(b - 1)) : 0);\n                res.push_back(x);\n            } else {\n                A[i] = b;\n                for (int j = max(1, i - 1); j <= min(i + 1, N - 2); ++j)\n                    fw.set(j, A[j] > A[j - 1] && A[j] > A[j + 1]);\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1718507082.0
}