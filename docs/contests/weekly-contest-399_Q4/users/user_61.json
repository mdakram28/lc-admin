{
    "username": "66brother",
    "submission": "using namespace std;  \nusing ll = long long;\n#define FOR(i, a, b) for (int i = a; i < b; ++i)\n#define ve vector\n\nconst int MOD = 1e9 + 7;\n\nconst int MAX = 50000 + 100;\n\nstruct Node {\n  int l, r;\n  ll v0, v1, v2, v3;\n} tr[MAX * 4];\n\nvoid build(int id) {\n  int l = tr[id].l, r = tr[id].r;\n  if(l == r) {\n    return;\n  }\n  int mid = l + (r - l) / 2;\n  tr[id * 2 + 1] = {l, mid, 0, 0, 0, 0};\n  tr[id * 2 + 2] = {mid + 1, r, 0, 0, 0, 0};\n  build(id * 2 + 1);\n  build(id * 2 + 2);\n}\n\n//no\n//left\n//right\n//both\nvoid update(int id, int index, int val) { \n    int l = tr[id].l, r = tr[id].r;\n    if(l == r) {\n        tr[id].v0 = tr[id].v1 = tr[id].v2 = 0;\n        tr[id].v3 = max(0, val);\n        return;\n    }\n\n    int mid = l + (r - l) / 2;\n    int left = id * 2 + 1, right = id * 2 + 2;\n    if(index <= mid) {\n        update(left, index, val);\n    } else {\n        update(right, index, val);\n    }\n    \n    tr[id].v0 = max(tr[left].v0 + tr[right].v0, tr[left].v2 + tr[right].v0);\n    tr[id].v0 = max(tr[id].v0, tr[left].v0 + tr[right].v1);\n    \n    tr[id].v1 = max(tr[left].v1 + tr[right].v0, tr[left].v1 + tr[right].v1);\n    tr[id].v1 = max(tr[id].v1, tr[left].v3 + tr[right].v0);\n    \n    tr[id].v2 = max(tr[right].v2 + tr[left].v0, tr[right].v2 + tr[left].v2);\n    tr[id].v2 = max(tr[id].v2, tr[right].v3 + tr[left].v0);\n    \n    tr[id].v3 = tr[left].v1 + tr[right].v2;\n    tr[id].v3 = max(tr[id].v3, tr[right].v3 + tr[left].v1);\n    tr[id].v3 = max(tr[id].v3, tr[right].v2 + tr[left].v3);\n    \n    //cout << l << \" \" << r << endl;\n   // cout << tr[left].v3 << \" \" << tr[right].v3 << endl;\n   // cout << tr[id].v0 << \" \" << tr[id].v1 << \" \" << tr[id].v2 << \" \" << tr[id].v3 << endl <<  endl;\n \n}\n\n/*\nclass Solution {\npublic:\n    int rob(vector<int>& nums) {\n        const int n = nums.size();\n        vector<int> f(n, 0);\n        f[0] = nums[0];\n        f[1] = max(nums[0], nums[1]);\n        for (int i = 2; i < n; ++i)\n            f[i] = max(f[i-2] + nums[i], f[i-1]);\n        return f[n-1];\n    }\n};\n*/\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& a, vector<vector<int>>& q) {\n        ll ans = 0;\n        int n = a.size(), m = q.size();\n        \n        tr[0] = {0, n - 1, 0, 0, 0, 0};\n        build(0);\n        \n        for(int i = 0; i < n; i++) {\n            update(0, i, a[i]);\n            //cout << \"________\" << endl;\n        }\n        \n        \n        \n        for(int i = 0; i < m; i++) {\n            int pos = q[i][0], x = q[i][1];\n            update(0, pos, x);\n            ll v = max(tr[0].v1, tr[0].v2);\n            v = max(v, tr[0].v3);\n            v = max(v, tr[0].v0);\n            v = max(v, 0ll);\n            \n            //cout << \"gg \" << v << endl;\n            ans += v;\n            ans %= MOD;\n        }\n        \n        \n        return (int)(ans % MOD);\n    }\n};\n",
    "submit_ts": 1716693718.0
}