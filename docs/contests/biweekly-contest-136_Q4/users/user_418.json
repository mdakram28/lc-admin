{
    "username": "wo-a-6",
    "submission": "const(\n    MAX = 20000\n)\n\nfunc getNodeMap(edges [][]int) map[int]map[int]int {\n    nodeMap := map[int]map[int]int{}\n    for _, tmp := range edges {\n        x, y := tmp[0], tmp[1]\n        if nodeMap[x] == nil { nodeMap[x] = map[int]int{} }\n        if nodeMap[y] == nil { nodeMap[y] = map[int]int{} }\n        nodeMap[x][y] = MAX\n        nodeMap[y][x] = MAX\n    }\n    return nodeMap    \n}\n\nfunc dfs1(nodeMap map[int]map[int]int, visited map[int]bool, start int) int {\n    h := 0\n    for key, _ := range nodeMap[start] {\n        if !visited[key] {\n            visited[key] = true\n            val := 1\n            if key % 2 == 0 { val = 2 }\n            tmp := dfs1(nodeMap, visited, key) + val\n            nodeMap[start][key] = tmp\n            h = max(h, tmp)\n        }\n    }\n    return h \n}\n\nfunc dfs2(nodeMap map[int]map[int]int, visited map[int]bool, start, parent int) {\n    son := [][]int{}\n    for key, val := range nodeMap[start] {\n        if !visited[key] {\n            visited[key] = true    \n            son = append(son, []int{key, val})\n        } \n    }\n    sort.Slice(son, func(i, j int)bool{ return son[i][1] < son[j][1] })\n    m := len(son)\n    for i := 0; i < m; i++ {\n        other := 0\n        if i + 1 < m { other = son[m-1][1] \n        } else if i - 1 >= 0  { other = son[i-1][1] }\n        h := max(parent, other) + 1\n        if start % 2 == 0 { h += 1 }\n        nodeMap[son[i][0]][start] = h\n        dfs2(nodeMap, visited, son[i][0], h)\n    }\n}\n\nfunc getH(nodeMap map[int]map[int]int, n int) []int {\n    h := make([]int, n)\n    for key, sonList := range nodeMap {\n        for _, sonH := range sonList { h[key] = max(h[key], sonH) }\n    }\n    return h    \n}\n\nfunc timeTaken(edges [][]int) []int {\n    n := len(edges) + 1\n    if n == 1 { return []int{0} }\n    nodeMap := getNodeMap(edges)\n    dfs1(nodeMap, map[int]bool{0:true}, 0)\n    // fmt.Println(nodeMap)\n    dfs2(nodeMap, map[int]bool{0:true}, 0, 0)\n    // fmt.Println(nodeMap)\n    return getH(nodeMap, n)\n}\n\n",
    "submit_ts": "1722697645",
    "subm_id": "552267129"
}