{
    "username": "Mohith_N_R",
    "submission": "class Solution {\n    private static final int MOD = 1_000_000_007;\n    public int numberOfPermutations(int n, int[][] requirements) {\n        Arrays.sort(requirements, Comparator.comparingInt(a -> a[0]));\n        int[][] dp = new int[n + 1][401];\n        dp[0][0] = 1;  \n        Set<Integer>[] validInversions = new Set[n + 1];\n        for (int i = 0; i <= n; i++) {\n            validInversions[i] = new HashSet<>();\n        }\n        for (int[] req : requirements) {\n            validInversions[req[0] + 1].add(req[1]);\n        }\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                dp[len][inv] = 0;\n                for (int pos = 0; pos < len; pos++) {\n                    if (inv >= pos) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - pos]) % MOD;\n                    }\n                }\n            }\n            if (!validInversions[len].isEmpty()) {\n                for (int i = 0; i <= 400; i++) {\n                    if (!validInversions[len].contains(i)) {\n                        dp[len][i] = 0;\n                    }\n                }\n            }\n        }\n        int result = 0;\n        for (int inv = 0; inv <= 400; inv++) {\n            result = (result + dp[n][inv]) % MOD;\n        }\n\n        return result;\n    }\n}\n",
    "submit_ts": 1719067965.0
}