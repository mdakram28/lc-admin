{
    "username": "Deep_023",
    "submission": "class Solution {\npublic:\n    bool bfs(vector<vector<int>>& g, int n, int s, int t1, int t2) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        q.push(s);\n        vis[s] = true;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        if(vis[t1]) return vis[t1];\n        return vis[t2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& cir) {\n        int n = cir.size();\n        vector<vector<int>> grph(n+4);\n\n        for(int i=0;i<n;i++){\n\n            for (int j = i + 1; j < n; ++j) {\n                int temp1 = cir[i][0] - cir[j][0];\n                int temp2 = cir[i][1] - cir[j][1];\n\n                double dist = sqrt(temp1*1ll*temp1  +  temp2*1ll*temp2);\n                \n                if (cir[i][2] + cir[j][2] >= dist) {\n                    grph[i].push_back(j);\n                    grph[j].push_back(i);\n                }\n            }\n\n            if (cir[i][0] <= cir[i][2]) {\n                grph[n].push_back(i);\n                grph[i].push_back(n);\n            }\n            if (Y - cir[i][1] <= cir[i][2]) {\n                grph[n + 3].push_back(i);\n                grph[i].push_back(n + 3);\n            }\n            if (cir[i][1] <= cir[i][2]) {\n                grph[n + 1].push_back(i);\n                grph[i].push_back(n + 1);\n            }\n            if (X - cir[i][0] <= cir[i][2]) {\n                grph[n + 2].push_back(i);\n                grph[i].push_back(n + 2);\n            }\n        }\n\n        bool ans = bfs(grph,n+4,n,n+1,n+2);\n        bool ans2 = bfs(grph,n+4,n+3,n+1,n+2);\n\n        return !(ans || ans2);\n    }   \n};",
    "submit_ts": "1722138711",
    "subm_id": "1335797706"
}