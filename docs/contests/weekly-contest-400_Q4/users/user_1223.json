{
    "username": "P_2003_W",
    "submission": "class Solution {\npublic:\n    #define ll long long int\n    // const int N=1e5+4;\nvector<ll> seg;\nvoid build(ll ind,ll low,ll high,vector<int> &v){\nif(low==high){\n    seg[ind]=v[low];\n    return;\n}\nll mid=(low+high)/2;\nbuild((2*ind)+1,low,mid,v);\nbuild((2*ind)+2,mid+1,high,v);\nseg[ind]=(seg[(2*ind)+1]&seg[(2*ind)+2]);\n}\n\nll query(ll ind,ll low,ll high,ll l,ll r){\n   // no overlap \nif(r<low || l>high){\n    ll last=(1LL<<31);\n    last--;\nreturn last;\n}\n// complete overlap\nif(low>=l && high<=r){\nreturn seg[ind];\n}\n// partial overlap go to both left node and right node\nll mid=(low+high)/2;\nll left=query((2*ind)+1,low,mid,l,r);\nll right=query((2*ind)+2,mid+1,high,l,r);\n return (left&right);\n}\n\n// void update(ll ind,ll low,ll high,ll pos,ll value){\n// if(low==high){\n//     seg[ind]=value;\n//     return ;\n// }\n// ll mid=(low+high)/2;\n// if(pos<=mid){\n// update((2*ind)+1,low,mid,pos,value);\n// }\n// else{\n// update((2*ind)+2,mid+1,high,pos,value);\n// }\n// seg[ind]=(seg[(2*ind)+1]&seg[(2*ind)+2]);\n// }\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        \n        ll n=nums.size();\n        seg.resize(4*n,-1);\n        build(0,0,n-1,nums);\n        \n        ll ans=abs(query(0,0,n-1,0,n-1)-k);\n        \n//         for(ll i=0;i<n;i++){\n//             ll cur=nums[i];\n//             for(ll j=i;j<n;j++){\n                \n//                 cur&=nums[j];\n//                 cout<<cur<<\" \";\n//             }\n            \n//             cout<<endl;\n//         }\n        \n        \n        for(ll i=0;i<n;i++){\n            \n            \n            ll low=i;\n          ll high=n-1;\n            \n            ll temp1=nums[i];\n            while(low<=high){\n                \n                ll mid=low+(high-low)/2;\n                ll ele=query(0,0,n-1,i,mid);\n                if(ele<=k){\n                    temp1=ele;\n                     high=mid-1;\n                }\n                else{\n                   low=mid+1;\n                }\n                \n            }\n            low=i;\n            high=n-1;\n            ll temp2=nums[i];\n                 while(low<=high){\n                \n                ll mid=low+(high-low)/2;\n                ll ele=query(0,0,n-1,i,mid);\n                if(ele>=k){\n                    temp2=ele;\n                    low=mid+1;\n                }\n                else{\n                    high=mid-1;\n                }\n                \n            }\n            \n            // cout<<i<<\" \"<<temp1<<\" \"<<temp2<<endl;\n            ll tp1=abs(k-temp1);\n            ll tp2=abs(k-temp2);\n            ll res=min(tp1,tp2);\n            ans=min(ans,res);\n        }\n        \n        \n        \n        return ans;\n    }\n};",
    "submit_ts": 1717297788.0
}