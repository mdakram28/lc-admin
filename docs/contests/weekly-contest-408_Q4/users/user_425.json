{
    "username": "nikhilreddy_18",
    "submission": "\nclass Solution {\npublic:\n    bool isConnected(vector<vector<int>> &adjacencyList, int start, int goal1, int goal2, int totalNodes) {\n        queue<int> nodesQueue;\n        vector<bool> visited(totalNodes + 4, false);\n        nodesQueue.push(start);\n        visited[start] = true;\n\n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodesQueue.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        return visited[goal1] || visited[goal2];\n    }\n    \n    bool canReachCorner(int targetX, int targetY, vector<vector<int>>& circleData) {\n        int circleCount = circleData.size();\n        vector<pair<pair<int, int>, int>> circles(circleCount);\n        vector<vector<int>> adjacencyList(circleCount + 4);\n        for (int i = 0; i < circleCount; ++i) {\n            circles[i].first.first = circleData[i][0];\n            circles[i].first.second = circleData[i][1];\n            circles[i].second = circleData[i][2];\n        }\n        \n        for (int i = 0; i < circleCount; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjacencyList[circleCount].push_back(i);\n                adjacencyList[i].push_back(circleCount);\n            }\n            if (targetX - circles[i].first.first <= circles[i].second) {\n                adjacencyList[circleCount + 2].push_back(i);\n                adjacencyList[i].push_back(circleCount + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjacencyList[circleCount + 1].push_back(i);\n                adjacencyList[i].push_back(circleCount + 1);\n            }\n            if (targetY - circles[i].first.second <= circles[i].second) {\n                adjacencyList[circleCount + 3].push_back(i);\n                adjacencyList[i].push_back(circleCount + 3);\n            }\n            for (int j = i + 1; j < circleCount; ++j) {\n                double dist = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                   pow(circles[i].first.second - circles[j].first.second, 2));\n                int combinedRadius = circles[i].second + circles[j].second;\n                if (combinedRadius >= dist) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        bool reachable = isConnected(adjacencyList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4) ||\n                         isConnected(adjacencyList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4);\n        \n        return !reachable;\n    }\n};\n",
    "submit_ts": "1722137389",
    "subm_id": "1335762398"
}