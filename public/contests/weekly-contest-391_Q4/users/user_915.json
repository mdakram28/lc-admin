{
    "username": "thedude7181",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        _, a = max((x + y, i) for i, (x, y) in enumerate(points))\n        _, b = max((-x + y, i) for i, (x, y) in enumerate(points))\n        _, c = max((x - y, i) for i, (x, y) in enumerate(points))\n        _, d = max((-x - y, i) for i, (x, y) in enumerate(points))\n        al = points[:a] + points[a + 1:]\n        bl = points[:b] + points[b + 1:]\n        cl = points[:c] + points[c + 1:]\n        dl = points[:d] + points[d + 1:]\n        return min(maxDis(al), maxDis(bl), maxDis(cl), maxDis(dl))\n        \n    \ndef maxDis(points):\n    _, a = max((x + y, i) for i, (x, y) in enumerate(points))\n    _, b = max((-x + y, i) for i, (x, y) in enumerate(points))\n    _, c = max((x - y, i) for i, (x, y) in enumerate(points))\n    _, d = max((-x - y, i) for i, (x, y) in enumerate(points))\n    ends = [a, b, c, d]\n    res = 0\n    for i in range(4):\n        for j in range(1, 4):\n            res = max(res, abs(points[ends[i]][0] - points[ends[j]][0]) + abs(points[ends[i]][1] - points[ends[j]][1]))\n    return res\n        \n  "
}