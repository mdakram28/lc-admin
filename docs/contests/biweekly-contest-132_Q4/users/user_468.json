{
    "username": "Pranay__01",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length, dp[][] = new int[k + 1][n], res = 0;\n        for(int i = 0; i <= k; i++){\n            Map<Integer, Integer> m = new HashMap<>();\n            int prevMax = 0;\n            for(int j = 0; j < n; j++){\n                dp[i][j] = 1;\n                if(m.containsKey(nums[j]))  dp[i][j] = Math.max(dp[i][j], m.get(nums[j]) + 1);\n                if(i > 0){\n                    dp[i][j] = Math.max(dp[i][j], Math.max(prevMax, dp[i - 1][j]));\n                    prevMax = Math.max(prevMax, dp[i - 1][j] + 1);\n                }\n                m.put(nums[j], dp[i][j]);\n                if(i == k)  res = Math.max(res, dp[i][j]);\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1717861142",
    "subm_id": "1281781116"
}