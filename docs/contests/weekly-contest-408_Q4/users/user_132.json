{
    "username": "dream_boy",
    "submission": "struct DSU {\n    vector<int> p, v;\n    DSU(vector<int>& val) {\n        int n = val.size();\n        p.resize(n);\n        v = val;\n        iota(p.begin(), p.end(), 0);\n    }\n    int find(int x) { return p[x] = p[x] == x ? x : find(p[x]); }\n    void unite(int x, int y) {\n        x = find(x);\n        y = find(y);\n        if (x != y) {\n            p[x] = y;\n            v[y] |= v[x];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<int> touch;\n        touch.reserve(n);\n        for (auto circle : circles) {\n            int x = circle[0], y = circle[1], r = circle[2];\n            if (x - r > X || y - r > Y) continue;\n\n            int t = 0;\n            if (x - r <= 0) t |= 1;\n            if (y - r <= 0) t |= 2;\n            if (x + r >= X) t |= 4;\n            if (y + r >= Y) t |= 8;\n            touch.push_back(t);\n        }\n\n        DSU dsu(touch);\n\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                int x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n                int x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                if ((x1 - x2) * 1LL * (x1 - x2) + (y1 - y2) * 1LL * (y1 - y2) <= (r1 + r2) * 1LL * (r1 + r2)) {\n                    dsu.unite(i, j);\n                }\n            }\n        }\n\n        vector<int> match = { 3, 5, 10, 12 };\n        for (int i = 0; i < n; i++) {\n            for (auto m : match)\n                if ((dsu.v[dsu.find(i)] & m) == m) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722135147",
    "subm_id": "1335691440"
}