{
    "username": "adityavkrm",
    "submission": "class Solution {\n    void dfs1(\n        int root, int parent,\n        const vector<vector<int>>& graph,\n        vector<pair<int, int>>& subtreeTimes\n    ) {\n        int maxD = 0, secondMaxD = 0;\n        for (auto child: graph[root]) {\n            if (child != parent) {\n                dfs1(child, root, graph, subtreeTimes);\n                const int time = subtreeTimes[child].first + 2 - (child % 2);\n                if (time > maxD) {\n                    secondMaxD = maxD;\n                    maxD = time;\n                } else if (time > secondMaxD) {\n                    secondMaxD = time;\n                }\n            }\n        }\n        subtreeTimes[root].first = maxD;\n        subtreeTimes[root].second = secondMaxD;\n    }\n\n    void dfs2(\n        int root, int parent, int parentMax,\n        const vector<vector<int>>& graph,\n        const vector<pair<int, int>>& subtreeTimes,\n        vector<int>& ans\n    ) {\n        ans[root] = max(parentMax, subtreeTimes[root].first);\n        const int rootAdd = 2 - (root % 2);\n        parentMax += rootAdd;\n        \n        for (auto child: graph[root]) {\n            if (child != parent) {\n                bool isMaxChild = (\n                    subtreeTimes[child].first + 2 - (child % 2) == subtreeTimes[root].first\n                );\n                dfs2(\n                    child, root,\n                    max(parentMax, rootAdd + (\n                        isMaxChild\n                        ? subtreeTimes[root].second\n                        : subtreeTimes[root].first\n                    )),\n                    graph, subtreeTimes, ans\n                );\n            }\n        }\n    }\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        const int n = edges.size() + 1;\n        vector<vector<int>> graph(n);\n        for (auto& e: edges) {\n            graph[e[0]].push_back(e[1]);\n            graph[e[1]].push_back(e[0]);\n        }\n\n        vector<pair<int, int>> subtreeTimes(n);\n        dfs1(0, -1, graph, subtreeTimes);\n\n        vector<int> ans(n, INT_MAX);\n        dfs2(0, -1, 0, graph, subtreeTimes, ans);\n        return ans;\n    }\n};",
    "submit_ts": "1722699205",
    "subm_id": "1343204637"
}