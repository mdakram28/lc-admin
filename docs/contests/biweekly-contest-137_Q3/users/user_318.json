{
    "username": "Vishwajeet Singh Solanki",
    "submission": "class Solution {\n    public:\n    \n    \n    struct Cell {\n    int value;\n    int colIndex;\n};\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n    int n = board[0].size();\n    \n    // Step 1: Precompute the maximum 3 elements for each row\n    vector<vector<Cell>> max3InRows(m, vector<Cell>(3, {INT_MIN, -1}));\n    \n    for (int i = 0; i < m; ++i) {\n        vector<Cell> temp;\n        for (int j = 0; j < n; ++j) {\n            temp.push_back({board[i][j], j});\n        }\n        // Sort the row elements by value in descending order\n        sort(temp.begin(), temp.end(), [](const Cell& a, const Cell& b) {\n            return a.value > b.value;\n        });\n        // Keep only the top 3 elements\n        for (int k = 0; k < 3 && k < temp.size(); ++k) {\n            max3InRows[i][k] = temp[k];\n        }\n    }\n    \n    long long maxSum = INT64_MIN;\n    \n    // Step 2: Iterate over all combinations of 3 rows\n    for (int r1 = 0; r1 < m; ++r1) {\n        for (int r2 = r1 + 1; r2 < m; ++r2) {\n            for (int r3 = r2 + 1; r3 < m; ++r3) {\n                // Step 3: Iterate over all combinations of the precomputed top 3 elements\n                for (const Cell& c1 : max3InRows[r1]) {\n                    for (const Cell& c2 : max3InRows[r2]) {\n                        for (const Cell& c3 : max3InRows[r3]) {\n                            // Check if columns are distinct\n                            if (c1.colIndex != c2.colIndex && c1.colIndex != c3.colIndex && c2.colIndex != c3.colIndex) {\n                                long long currentSum = (long long)c1.value + c2.value + c3.value;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    \n    return maxSum;\n        \n    }\n};\n\n",
    "submit_ts": "1723907548",
    "subm_id": "1359112941"
}