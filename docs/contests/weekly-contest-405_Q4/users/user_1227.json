{
    "username": "shinko0716",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        vector<pair<int, int>> ww;\n        unordered_map<char, TrieNode *> cc;\n    };\n\n    class Trie {\n    public:\n        TrieNode *root;\n        Trie() {root=new TrieNode();}\n\n        void insert(string &word, int index, int cost) {\n            TrieNode *nn = root;\n            for (char c : word) {\n                if(!nn->cc.count(c))\n                    nn->cc[c]=new TrieNode();\n                nn = nn->cc[c];\n            }\n            nn->ww.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string> &words, vector<int> &costs) {\n        int n = target.size();\n        vector<int> memo(n + 1, 1e9);\n        memo[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (memo[i] == 1e9)\n                continue;\n\n            TrieNode *nn = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!nn->cc.count(target[j]))\n                    break;\n                nn = nn->cc[target[j]];\n                for (auto &p : nn->ww) {\n                    int ind = p.first;\n                    int cost = p.second;\n                    int l = words[ind].size();\n                    if (i + l <= n) {\n                        memo[i + l] = min(memo[i+l], memo[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return memo[n] == 1e9 ? -1 : memo[n];\n    }\n};\n",
    "submit_ts": "1720323735",
    "subm_id": "1312382773"
}