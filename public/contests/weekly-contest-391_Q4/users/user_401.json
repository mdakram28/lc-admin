{
    "username": "nqvr",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def helper(points):\n            S = set()\n            L = [[x + y, i] for i, (x, y) in enumerate(points)]\n            L.sort()\n            S.add(L[0][1])\n            S.add(L[-1][1])\n\n            L = [[x - y, i] for i, (x, y) in enumerate(points)]\n            L.sort()\n            S.add(L[0][1])\n            S.add(L[-1][1])\n        \n            L = list(S)\n\n            ans = -1\n            for i in range(len(L)):\n                for j in range(i + 1, len(L)):\n                    ans = max(ans, abs(points[L[i]][0] - points[L[j]][0]) + abs(points[L[i]][1] - points[L[j]][1]))\n\n            return ans\n\n\n        S = set()\n        L = [[x + y, i] for i, (x, y) in enumerate(points)]\n        L.sort()\n        S.add(L[0][1])\n        S.add(L[-1][1])\n\n        L = [[x - y, i] for i, (x, y) in enumerate(points)]\n        L.sort()\n        S.add(L[0][1])\n        S.add(L[-1][1])\n    \n        ans = 10 ** 9\n        for i in S:\n            p2 = points[:]\n            p2.pop(i)\n\n\n            ans = min(ans, helper(p2))\n        \n        return ans\n    \n    "
}