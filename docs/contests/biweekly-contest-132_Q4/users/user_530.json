{
    "username": "iN_siDious",
    "submission": "class Solution {\npublic:\n    int memo[5005][55][2]; \n    int dp(int idx, int k, vector<int>& gg, int n,int taken) {\n        if (idx == n) return 0;\n        if (memo[idx][k][taken] != -1) return memo[idx][k][taken];\n        int ans = 1;\n        // consider and jump to same num\n        if (gg[idx] != -1) {\n            ans = max(ans, dp(gg[idx], k, gg, n,1) + 1);\n        }\n        // consider and jump to different num\n        if (k > 0) {\n            ans = max(ans, dp(idx + 1, k - 1, gg, n,0) + 1);\n        }\n        // don't consider\n        if (!taken) ans = max(ans, dp(idx + 1, k, gg, n,0));\n        else if (k>0) ans=max(ans,dp(idx+1,k-1,gg,n,0));\n        return memo[idx][k][taken]=ans;\n    }\n    int maximumLength(vector<int>& nums, int kk) {\n        map<int, vector<int>> indices;\n        int n = nums.size();\n        vector<int> gg(n, -1);\n        for (int i = 0; i < n; ++i) {\n            if (indices[nums[i]].empty()) {\n                indices[nums[i]].push_back(i);\n                continue;\n            }\n            int m = indices[nums[i]].size();\n            gg[indices[nums[i]][m-1]] = i;\n            indices[nums[i]].push_back(i);\n        }\n        \n        memset(memo, -1, sizeof(memo));\n        \n        return dp(0, kk, gg, n,0);\n    }\n    \n    \n\n};",
    "submit_ts": 1717861658.0
}