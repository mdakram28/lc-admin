{
    "username": "priyanshur_754",
    "submission": "class Solution\n{\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>> &edges1, vector<vector<int>> &edges2)\n    {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        for(int i=0;i<n;i++){\n            for(int j=0;j<m;j++);\n        }\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto &edge : edges1)\n        {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto &edge : edges2)\n        {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        auto dfs = [](const vector<vector<int>> &adj, int st, int &X)\n        {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int d)\n            {\n                dist[node] = d;\n                if (d > dist[X])\n                {\n                    X = node;\n                }\n                for (int neighbor : adj[node])\n                {\n                    if (dist[neighbor] == -1)\n                    {\n                        dfsVisit(neighbor, d + 1);\n                    }\n                }\n            };\n            X = st;\n            dfsVisit(st, 0);\n            return dist[X];\n        };\n\n        int X1 = 0;\n        dfs(adj1, 0, X1);\n        int D1 = dfs(adj1, X1, X1);\n\n        int X2 = 0;\n        dfs(adj2, 0, X2);\n        int D2 = dfs(adj2, X2, X2);\n\n        int mnD = max(D1, D2);\n        int half1 = (D1 + 1) / 2;\n        int half2 = (D2 + 1) / 2;\n        mnD = max(mnD, half1 + half2 + 1);\n\n        return mnD;\n    }\n};\n",
    "submit_ts": "1719716370",
    "subm_id": "1304362569"
}