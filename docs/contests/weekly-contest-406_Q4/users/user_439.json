{
    "username": "singh123sarthak456",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n    \n    long long h = 0, v = 0; // indices for horizontal and vertical cuts\n    long long hCount = 1, vCount = 1; // counts for horizontal and vertical pieces\n    long long totalCost = 0;\n\n    // Iterate until all cuts are used\n    while (h < horizontalCut.size() && v < verticalCut.size()) {\n        if (horizontalCut[h] > verticalCut[v]) {\n            totalCost += horizontalCut[h] * vCount;\n            h++;\n            hCount++;\n        } else {\n            totalCost += verticalCut[v] * hCount;\n            v++;\n            vCount++;\n        }\n    }\n\n    // If there are remaining horizontal cuts\n    while (h < horizontalCut.size()) {\n        totalCost += horizontalCut[h] * vCount;\n        h++;\n    }\n\n    // If there are remaining vertical cuts\n    while (v < verticalCut.size()) {\n        totalCost += verticalCut[v] * hCount;\n        v++;\n    }\n\n    return totalCost;    \n    }\n};",
    "submit_ts": "1720925224",
    "subm_id": "1320247345"
}