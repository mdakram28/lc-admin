{
    "username": "Siddh_Bamb",
    "submission": "from sortedcontainers import SortedDict\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        points1 = [(sum(p), i) for i, p in enumerate(points)]\n        points2 = [(p[0]-p[1], i) for i, p in enumerate(points)]\n        p1 = SortedDict()\n        p2 = SortedDict()\n        for i in range(len(points)):\n            if points1[i][0] not in p1:\n                p1[points1[i][0]] = 0\n            if points2[i][0] not in p2:\n                p2[points2[i][0]] = 0\n            # print(points1[i][0], points2[i][0])\n                \n            p1[points1[i][0]] += 1\n            p2[points2[i][0]] += 1\n        # print(p1, p2)\n        \n        res = float(\"inf\")\n        # print(\"start\")\n        for i in range(len(points)):\n            s = points1[i][0]\n            d = points2[i][0]\n            \n            # print(p1, p2)\n            \n            p1[s] -= 1\n            p2[d] -= 1\n            if p1[s] == 0:\n                del p1[s]\n            if p2[d] == 0:\n                del p2[d]\n            \n            p1k = p1.keys()\n            p2k = p2.keys()\n            res = min(res, max(p1k[-1] - p1k[0], p2k[-1] - p2k[0]))\n            \n            if s not in p1:\n                p1[s] = 0\n            if d not in p2:\n                p2[d] = 0\n            p1[s] += 1\n            p2[d] += 1\n            \n                \n    \n        return res\n        \n        \n#         res = float(\"inf\")\n        \n#         mins = mind = minsold = mindold = float(\"inf\")\n#         maxs = maxd = maxsold = maxdold = float(\"-inf\")\n#         for j, p in enumerate(points):\n#             s = p[0] + p[1]\n#             d = p[0] - p[1]\n#             if s < mins:\n#                 mins = s\n#             if s > maxs:\n#                 maxs = s\n#             if d < mind:\n#                 mind = d\n#             if d > maxd:\n#                 maxd = d\n                \n                \n#         for j, p in enumerate(points):\n#             s = p[0] + p[1]\n#             d = p[0] - p[1]\n#             if mins < s < minsold:\n#                 minsold = s\n#             if maxsold < s < maxs:\n#                 maxsold = s\n#             if mind < d < mindold:\n#                 mindold = d\n#             if maxdold < d < maxd:\n#                 maxdold = d\n#         print([maxd-mind, maxs-mins, maxs-minsold, maxsold-mins, maxd-mindold, maxdold-mind])\n#         maxm = max(min([maxd-mind, maxs-mins, maxs-minsold, maxsold-mins, maxd-mindold, maxdold-mind]), 0)\n#         return maxm"
}