{
    "username": "Deepanshu_Jindal",
    "submission": "import java.util.*;\n\nclass Solution {\n    \n    // Method to perform BFS and check connectivity\n    private boolean bfs(List<List<Integer>> monopoly, int chess, int scrabble, int checkers, int games) {\n        Queue<Integer> snake = new LinkedList<>();\n        boolean[] visited = new boolean[games + 4];\n        snake.offer(chess);\n        visited[chess] = true;\n        \n        while (!snake.isEmpty()) {\n            int ludo = snake.poll();\n            for (int domino : monopoly.get(ludo)) {\n                if (!visited[domino]) {\n                    snake.offer(domino);\n                    visited[domino] = true;\n                }\n            }\n        }\n        return visited[scrabble] || visited[checkers];\n    }\n    \n    // Method to build the graph\n    private List<List<Integer>> buildGraph(int clue, int risk, List<int[]> battleship, int numPuzzles) {\n        List<List<Integer>> monopoly = new ArrayList<>();\n        for (int i = 0; i < numPuzzles + 4; i++) {\n            monopoly.add(new ArrayList<>());\n        }\n\n        for (int catan = 0; catan < numPuzzles; catan++) {\n            int x = battleship.get(catan)[0];\n            int y = battleship.get(catan)[1];\n            int z = battleship.get(catan)[2];\n\n            switch (0) {\n                case 0:\n                    if (x <= z) {\n                        monopoly.get(numPuzzles).add(catan);\n                        monopoly.get(catan).add(numPuzzles);\n                    }\n                case 1:\n                    if (clue - x <= z) {\n                        monopoly.get(numPuzzles + 2).add(catan);\n                        monopoly.get(catan).add(numPuzzles + 2);\n                    }\n                case 2:\n                    if (y <= z) {\n                        monopoly.get(numPuzzles + 1).add(catan);\n                        monopoly.get(catan).add(numPuzzles + 1);\n                    }\n                case 3:\n                    if (risk - y <= z) {\n                        monopoly.get(numPuzzles + 3).add(catan);\n                        monopoly.get(catan).add(numPuzzles + 3);\n                    }\n            }\n\n            for (int settlers = catan + 1; settlers < numPuzzles; settlers++) {\n                int x2 = battleship.get(settlers)[0];\n                int y2 = battleship.get(settlers)[1];\n                int z2 = battleship.get(settlers)[2];\n                double distance = Math.sqrt(Math.pow(x - x2, 2) + Math.pow(y - y2, 2));\n                int radiusSum = z + z2;\n                if (radiusSum >= distance) {\n                    monopoly.get(catan).add(settlers);\n                    monopoly.get(settlers).add(catan);\n                }\n            }\n        }\n\n        return monopoly;\n    }\n\n    // Main method to check if a path exists\n    public boolean canReachCorner(int clue, int risk, int[][] puzzles) {\n        List<int[]> battleship = new ArrayList<>();\n        for (int[] puzzle : puzzles) {\n            battleship.add(new int[]{puzzle[0], puzzle[1], puzzle[2]});\n        }\n        \n        int numPuzzles = puzzles.length;\n        List<List<Integer>> monopoly = buildGraph(clue, risk, battleship, numPuzzles);\n\n        boolean isBlocked = bfs(monopoly, numPuzzles, numPuzzles + 1, numPuzzles + 2, numPuzzles + 4) ||\n                            bfs(monopoly, numPuzzles + 3, numPuzzles + 2, numPuzzles + 1, numPuzzles + 4);\n        \n        return !isBlocked;\n    }\n}\n\n",
    "submit_ts": "1722136415",
    "subm_id": "1335733769"
}