{
    "username": "satyabratojha04",
    "submission": "class SegmentTree\n{\n    vector<int> seg;\n\npublic:\n    SegmentTree(int n)\n    {\n        seg.resize(4 * n);\n    }\n\n    void build(int ind, int low, int high, vector<int> &a)\n    {\n        if (low == high)\n        {\n            seg[ind] = a[low];\n            return;\n        }\n        int mid = (low + high) >> 1;\n        build(2 * ind + 1, low, mid, a);\n        build(2 * ind + 2, mid + 1, high, a);\n        \n        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n    }\n\n    void update(int ind, int low, int high, int l, int r, int val)\n    {\n        if (r < low || high < l)\n            return;\n        if (l <= low && high <= r)\n        {\n            seg[ind] = val;\n            return;\n        }\n        int mid = (low + high) >> 1;\n        update(2 * ind + 1, low, mid, l, r, val);\n        update(2 * ind + 2, mid + 1, high, l, r, val);\n\n        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n    }\n\n    int query(int ind, int low, int high, int l, int r)\n    {\n        if (r < low || high < l)\n            return 0;\n\n        if (l <= low && high <= r)\n            return seg[ind];\n\n        int mid = (low + high) >> 1;\n        int left = query(2 * ind + 1, low, mid, l, r);\n        int right = query(2 * ind + 2, mid + 1, high, l, r);\n\n        return left + right;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peak(n), ans;\n        for(int i=1;i<n-1;i++) {\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]) peak[i] = 1;\n        }\n\n        SegmentTree st(n);\n        st.build(0, 0, n-1, peak);\n        \n        for(auto q: queries) {\n            if(q[0] == 1) {\n                int l = q[1], r = q[2];\n                ans.push_back(st.query(0, 0, n-1, l+1, r-1));\n                // for(auto x: nums) cout<<x<<\" \"; cout<<endl;\n            }\n            else {\n                int i = q[1], v = q[2];\n                nums[i] = v;\n\n                if(checkPeak(nums, i)) st.update(0, 0, n-1, i, i, 1);\n                else st.update(0, 0, n-1, i, i, 0);\n\n                if(i>0 && checkPeak(nums, i-1)) st.update(0, 0, n-1, i-1, i-1, 1);\n                else st.update(0, 0, n-1, i-1, i-1, 0);\n\n                if(i<n-1 && checkPeak(nums, i+1)) st.update(0, 0, n-1, i+1, i+1, 1);\n                else st.update(0, 0, n-1, i+1, i+1, 0);\n            }\n        }\n\n        return ans;\n    }\n\n    bool checkPeak(vector<int>& nums, int i) {\n        if(i>0 && i<nums.size()-1 && nums[i]>nums[i-1] && nums[i]>nums[i+1]) return true;\n        return false;\n    }\n};",
    "submit_ts": 1718508034.0
}