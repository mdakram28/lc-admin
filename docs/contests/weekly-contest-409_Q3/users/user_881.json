{
    "username": "inversionpeter",
    "submission": "int gotos[100000];\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int shortest = n - 1;\n        vector <int> answers(queries.size()), toDelete;\n        set <int> leftPoints;\n        for (int i = 1; i < n; ++i) {\n            gotos[i - 1] = i;\n            leftPoints.insert(i - 1);\n        }\n        for (int q = 0; q != queries.size(); ++q) {\n            auto left = leftPoints.lower_bound(queries[q][0]);\n            /*if (left == leftPoints.end()) {\n                cout << \"yeah\\n\";\n                cout << *prev(left) << '\\n';\n            }*/\n            if (left != leftPoints.end() && *left == queries[q][0] && gotos[*left] >= queries[q][1]) {\n                answers[q] = shortest;\n                continue;\n            }\n            if (left != leftPoints.begin() && gotos[*prev(left)] >= queries[q][1]) {\n                answers[q] = shortest;\n                continue;\n            }\n            auto right = leftPoints.lower_bound(queries[q][1]);\n            /*if (right == leftPoints.end()) {\n                cout << \"yeah2\\n\";\n            }*/\n            //cout << *left << ' ' << *right << '\\n';\n            toDelete.clear();\n            while (left != right) {\n                toDelete.push_back(*left);\n                ++left;\n            }\n            for (int i : toDelete) {\n                leftPoints.erase(i);\n                //cout << i << ' ';\n                shortest += (gotos[i] - i - 1);\n            }\n            //cout << '\\n';\n            leftPoints.insert(queries[q][0]);\n            shortest -= (queries[q][1] - queries[q][0] - 1);\n            gotos[queries[q][0]] = queries[q][1];\n            answers[q] = shortest;\n        }\n        return answers;\n    }\n};",
    "submit_ts": "1722742819",
    "subm_id": "1343777866"
}