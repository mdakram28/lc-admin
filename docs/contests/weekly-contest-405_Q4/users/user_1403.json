{
    "username": "_mohitchoudhary",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n    \n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n      \n        node->minCost = min(node->minCost, cost);\n    }\n    \n    int search(string prefix) {\n        TrieNode* node = root;\n        for (char c : prefix) {\n            if (!node->children.count(c)) {\n                return INT_MAX;\n            }\n            node = node->children[c];\n        }\n        return node->minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        \n     \n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n   \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; \n       \n        for (int i = 0; i < n; ++i) {\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.count(c)) {\n                    node = node->children[c];\n                    if (node->minCost != INT_MAX &&dp[i]!=INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                    }\n                } else {\n                    break;\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323504",
    "subm_id": "1312377191"
}