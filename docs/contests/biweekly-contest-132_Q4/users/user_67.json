{
    "username": "fpeterfalvi",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int maximumLength(int[] nums, int k) {\n        Set<Integer> numbers = new HashSet<>();\n        for (int num : nums) {\n            numbers.add(num);\n        }\n        List<Integer> list = new ArrayList<>(numbers);\n        Map<Integer, Integer> toIndex = new HashMap<>();\n        for (int i = 0; i < list.size(); i++) {\n            toIndex.put(list.get(i), i);\n        }\n        int[] ns = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            ns[i] = toIndex.get(nums[i]);\n        }\n        nums = ns;\n        int n = list.size();\n        int[][] longest = new int[k + 1][n];\n        int[] longestK = new int[k + 1];\n        for (int num : nums) {\n            for (int i = k; i >= 0; i--) {\n                longest[i][num] = Math.max(longest[i][num] + 1, i > 0 ? longestK[i - 1] + 1 : 0);\n                longestK[i] = Math.max(longestK[i], longest[i][num]);\n            }\n        }\n        int longestTotal = 0;\n        for (int i = 0; i <= k; i++) {\n            longestTotal = Math.max(longestTotal, longestK[i]);\n        }\n        return longestTotal;\n    }\n}",
    "submit_ts": 1717857933.0
}