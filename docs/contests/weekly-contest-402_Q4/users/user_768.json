{
    "username": "OmAmar",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        class SegmentTree:\n            def __init__(self, nums):\n                self.n = len(nums)\n                self.tree = [0] * (4 * self.n)\n                self.nums = nums\n                self.build(0, 0, self.n - 1)\n            def build(self, node, start, end):\n                if start == end:\n                    self.tree[node] = self.nums[start]\n                else:\n                    mid = (start + end) // 2\n                    self.build(2 * node + 1, start, mid)\n                    self.build(2 * node + 2, mid + 1, end)\n                    self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n            def update(self, idx, value, node, start, end):\n                if start == end:\n                    self.nums[idx] = value\n                    self.tree[node] = value\n                else:\n                    mid = (start + end) // 2\n                    if start <= idx <= mid:\n                        self.update(idx, value, 2 * node + 1, start, mid)\n                    else:\n                        self.update(idx, value, 2 * node + 2, mid + 1, end)\n                    self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n            def query(self, L, R, node, start, end):\n                if R < start or end < L:\n                    return 0\n                if L <= start and end <= R:\n                    return self.tree[node]\n                mid = (start + end) // 2\n                left_query = self.query(L, R, 2 * node + 1, start, mid)\n                right_query = self.query(L, R, 2 * node + 2, mid + 1, end)\n                return left_query + right_query\n\n\n        pre = [0]\n        for i in range(1,len(nums)-1):\n            if nums[i]>nums[i-1] and nums[i]>nums[i+1]:\n                pre.append(1)\n            else:\n                pre.append(0)\n        pre.append(0)\n        ans = []\n        seg = SegmentTree(pre)\n        for i in range(len(queries)):\n            if queries[i][0]==2:\n                st = queries[i][1]\n                val = queries[i][2]\n                nums[st] = val\n\n                if st<=0 or st>=len(pre)-1:\n                    pass\n                else:\n                    if nums[st]>nums[st-1] and nums[st]>nums[st+1]:\n                        seg.update(st,1,0,0,seg.n-1)\n                    else:\n                        seg.update(st,0,0,0,seg.n-1)\n                st -= 1\n                if st<=0 or st>=len(pre)-1:\n                    pass\n                else:\n                    if nums[st]>nums[st-1] and nums[st]>nums[st+1]:\n                        seg.update(st,1,0,0,seg.n-1)\n                    else:\n                        seg.update(st,0,0,0,seg.n-1)\n                st += 2\n                if st<=0 or st>=len(pre)-1:\n                    pass\n                else:\n                    if nums[st]>nums[st-1] and nums[st]>nums[st+1]:\n                        seg.update(st,1,0,0,seg.n-1)\n                    else:\n                        seg.update(st,0,0,0,seg.n-1)\n            else:\n                st = queries[i][1]+1\n                ed = queries[i][2]-1\n                ans.append(seg.query(st,ed,0,0,seg.n-1))\n        return ans",
    "submit_ts": 1718508126.0
}