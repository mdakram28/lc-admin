{
    "username": "priority_queue_07",
    "submission": "class Solution {\npublic:\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nTrie buildTrie(const vector<string>& arr, const vector<int>& c) {\n    Trie trie;\n    for (size_t i = 0; i < arr.size(); ++i) {\n        trie.insert(arr[i], c[i]);\n    }\n    return trie;\n}\n\nint minimumCost(string x, vector<string>& arr, vector<int>& c) {\n    int n = x.length();\n    vector<int> dp(n + 1, 1e9);\n    dp[0] = 0; \n    \n    Trie trie = buildTrie(arr, c);\n    \n    for (int i = 0; i < n; i++) {\n        if (dp[i] == 1e9) continue;\n        \n        TrieNode* root = trie.root;\n        for (int j = i; j < n; j++) {\n            char ch = x[j];\n            if (root->children.find(ch) == root->children.end()) break;\n            root = root->children[ch];\n            if (root->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + root->cost);\n            }\n        }\n    }\n    \n    return dp[n] == 1e9 ? -1 : dp[n];\n}\n\n};",
    "submit_ts": "1720323392",
    "subm_id": "1312374424"
}