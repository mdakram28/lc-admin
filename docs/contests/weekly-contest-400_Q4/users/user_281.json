{
    "username": "alan8585",
    "submission": "class Solution {\n    int tree[400100];\n    void fix(int l, int r, int c, int x, int k) {\n        if (l == r) {\n            tree[c] = k;\n            return;\n        }\n        int m = (l + r) >> 1;\n        if (x <=m) fix(l, m, c << 1, x, k);\n        else fix(m + 1, r, c << 1 | 1, x, k);\n        tree[c] = (tree[c << 1] & tree[c << 1 | 1]);\n    }\n    int search(int l, int r, int tl, int tr, int c) {\n        if (l <= tl && tr <= r) return tree[c];\n        int tm = (tl + tr) >> 1;\n        if (l <= tm && tm + 1 <= r) return search(l, r, tl, tm, c << 1) & search(l, r, tm + 1, tr, c << 1 | 1);\n        else if (l <= tm) return search(l, r, tl, tm, c << 1);\n        return search(l, r, tm + 1, tr, c << 1 | 1);\n    }\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        vector<int> v;\n        for (int i = 0; i < n; i++) {\n            if (i + 1 < n && nums[i] == nums[i + 1]) continue;\n            v.push_back(nums[i]);\n        }\n        n = v.size();\n        for (int i = 0; i < n; i++)\n            fix(0, n - 1, 1, i, v[i]);\n        \n        int ans = 2000000000;\n        int curx = 0, curi = 0;\n        for (int i = 0; i < n; i++) {\n            if (curx < i) curx = i;\n            if (curi < i) curi = i;\n            while (curx + 1 < n && search(i, curx + 1, 0, n - 1, 1) >= k) {\n                curx++;\n            }\n            ans = min(ans, abs(search(i, curx, 0, n - 1, 1) - k));\n            while (curi < n && search(i, curi, 0, n - 1, 1) > k) {\n                curi++;\n            }\n            ans = min(ans, abs(search(i, curi, 0, n - 1, 1) - k));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297553",
    "subm_id": "1274746959"
}