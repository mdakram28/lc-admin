{
    "username": "James_Barrett",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        #we want the absolute difference to be the same for all of them\n        #we can simply find the most common absolute difference (this is X)\n        #then we return len(nums)//2 - freq of most common\n        \n        #if we encounter any pair that are both below Y,\n        #then any X greater than Y needs to make 2 mods to fix them\n        \n        cnts = defaultdict(lambda: 0)\n        debuffs = defaultdict(lambda: 0)\n        for i in range(len(nums) // 2):\n            X = abs(nums[i] - nums[len(nums) - i - 1])\n            #they can be moved min() down and k - max() up. For all X > the max of these vals, two moves are required\n            debuffs[X + max(min(nums[i],nums[len(nums) - i - 1]), k - max(nums[i],nums[len(nums) - i - 1]))] += 1\n            cnts[X] += 1\n        numChanges = {}\n        for cntKey in cnts:\n            numChanges[cntKey] = len(nums) // 2 - cnts[cntKey]\n        print(numChanges)\n        print(debuffs)\n        sortedXs = sorted(numChanges.keys())\n        sortedDebuffKeys = sorted(debuffs.keys())\n        buff = 0\n        xPtr, dPtr = 0,0\n        while xPtr < len(sortedXs):\n            x = sortedXs[xPtr]\n            while x > sortedDebuffKeys[dPtr]:\n                buff += debuffs[sortedDebuffKeys[dPtr]]\n                dPtr += 1\n            numChanges[x] += buff\n            xPtr += 1\n        print(numChanges)\n        minNumChanges = min(numChanges.values())\n        return minNumChanges",
    "submit_ts": "1721489381",
    "subm_id": "1327451579"
}