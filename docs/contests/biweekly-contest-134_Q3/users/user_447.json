{
    "username": "qian-mo-dan-shang-k",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& num, int k) {\n        int n = num.size();\n        int a[2 * n + 1];\n        for (int i = 1; i <= n; i ++) {\n            a[i] = num[i - 1];\n            a[i + n] = num[i - 1];\n        }\n        \n        int res = 0;\n        int s[2 * n + 1];\n        memset(s, 0, sizeof s);\n        for (int i = 2; i <= 2 * n; i ++)\n        {\n            if (a[i] != a[i - 1])   s[i] = 1;\n        }\n        \n        // for (int i = 1; i <= 2 * n; i ++)   cout << s[i] << ' ';\n        \n        for (int i = 1; i <= 2 * n; i ++)   s[i] += s[i - 1];\n        \n        for (int i = 1; i <= n; i ++) {\n            if (s[i + k - 1] - s[i] == k - 1)    res ++;\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1720277017",
    "subm_id": "544553878"
}