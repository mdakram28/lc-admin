{
    "username": "Harkness",
    "submission": "class SegTree:\n    def __init__(self, nums):\n        n = len(nums)\n        self.nums = nums\n        # [peaks, l, r]\n        self.ar = [None] * (4*n+1)\n        self.build(0, 0, n-1, nums)\n    \n    def combine_seg(self, p1, l1, r1, p2, l2, r2):\n        p = p1 + p2\n        if r1 > l1 and self.nums[r1] > self.nums[r1-1] and self.nums[r1] > self.nums[r1+1]:\n            p += 1\n        if r2 > l2 and self.nums[l2] > self.nums[l2+1] and self.nums[l2] > self.nums[l2-1]:\n            p += 1\n        return p\n    \n    def combine(self, idx):\n        p1, l1, r1 = self.ar[2*idx+1]\n        p2, l2, r2 = self.ar[2*idx+2]\n        p = self.combine_seg(p1, l1, r1, p2, l2, r2)\n        self.ar[idx] = [p, l1, r2]\n        \n    def build(self, idx, l, r, nums):\n        if l == r:\n            self.ar[idx] = [0, l, r]\n            return\n        m = (l+r)//2\n        self.build(2*idx+1, l, m, nums)\n        self.build(2*idx+2, m+1, r, nums)\n        self.combine(idx)\n        \n    def update(self, idx, l, r, i, v):\n        if l == r:\n            self.nums[i] = v\n            return\n        m = (l+r) // 2\n        if i <= m:\n            self.update(2*idx+1, l, m, i, v)\n        else:\n            self.update(2*idx+2, m+1, r, i, v)\n        self.combine(idx)\n    \n    def query(self, idx, l, r, ql, qr):\n        if l == ql and r == qr:\n            return self.ar[idx]\n        m = (l+r) // 2\n        if qr <= m:\n            return self.query(2*idx+1, l, m, ql, qr)\n        if ql > m:\n            return self.query(2*idx+2, m+1, r, ql, qr)\n        p1, l1, r1 = self.query(2*idx+1, l, m, ql, m)\n        p2, l2, r2 = self.query(2*idx+2, m+1, r, m+1, qr)\n        p = self.combine_seg(p1, l1, r1, p2, l2, r2)\n        return p, l1, r2\n            \n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        st = SegTree(nums)\n        n = len(nums)\n        res = []\n        for t, q1, q2 in queries:\n            if t == 1:\n                res.append(st.query(0, 0, n-1, q1, q2)[0])\n            else:\n                st.update(0, 0, n-1, q1, q2)\n        return res\n        \n        \n        ",
    "submit_ts": "1718507587",
    "subm_id": "1289656260"
}