{
    "username": "ddiibboo",
    "submission": "class Solution {\n    \n    class Node {\n        int l, r;\n        int cnt;\n        Node lc, rc;\n        \n        Node(int l, int r) {\n            this.l = l;\n            this.r = r;\n            cnt = 0;\n            lc = null;\n            rc = null;\n        }\n    }\n    \n    Node root;\n    int[] vals;\n    \n    private void build(Node node) {\n        if (node.l == node.r) return;\n        int mid = (node.l + node.r) >> 1;\n        node.lc = new Node(node.l, mid);\n        node.rc = new Node(mid + 1, node.r);\n        build(node.lc);\n        build(node.rc);\n        up(node);\n        // System.out.println(String.format(\"[%d -> %d]: %d\", node.l, node.r, node.cnt));\n    }\n    \n    private void up(Node node) {\n        node.cnt = node.lc.cnt + node.rc.cnt;\n        int ll = node.lc.r;\n        int rr = node.rc.l;\n        if (ll - 1 >= node.l && vals[ll - 1] < vals[ll] && vals[ll] > vals[rr]) ++node.cnt;\n        if (rr + 1 <= node.r && vals[ll] < vals[rr] && vals[rr] > vals[rr + 1]) ++node.cnt;\n    }\n    \n    private int get(Node node, int l, int r) {\n        if (node.l >= l && node.r <= r) {\n            return node.cnt;\n        }\n        \n        int mid = (node.l + node.r) >> 1;\n        int ans = 0;\n        if (l <= mid) ans += get(node.lc, l, r);\n        if (r > mid) ans += get(node.rc, l, r);\n        if (mid - 1 >= l && mid - 1 >= node.l && mid + 1 <= r && mid + 1 <= node.r && vals[mid] > vals[mid - 1] && vals[mid] > vals[mid + 1]) ++ans;\n        if (mid >= l && mid >= node.l && mid + 2 <= node.r && mid + 2 <= r && vals[mid + 1] > vals[mid] && vals[mid + 1] > vals[mid + 2]) ++ans;\n        return ans;\n    }\n    \n    private void update(Node node, int pos, int val) {\n        if (node.l == node.r) {\n            vals[pos] = val;\n            return;\n        }\n        \n        int mid = (node.l + node.r) >> 1;\n        if (pos <= mid) update(node.lc, pos, val);\n        else update(node.rc, pos, val);\n        up(node);\n        // System.out.println(String.format(\"[%d -> %d]: %d\", node.l, node.r, node.cnt));\n    }\n    \n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        root = new Node(0, nums.length - 1);\n        vals = nums;\n        build(root);\n        \n        List<Integer> ans = new ArrayList<>();\n        for (int[] q : queries) {\n            if (q[0] == 1) ans.add(get(root, q[1], q[2]));\n            else {\n                update(root, q[1], q[2]);\n            }\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1718507754",
    "subm_id": "1289661428"
}