{
    "username": "vassu118",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int> (k + 1, 1));\n        map<int, vector<int>> mp;\n        \n        vector<int> ndp(k + 1, 1);\n        mp[nums[0]] = vector<int> (k + 1, 1);\n        for(int i=1;i<n;i++) {\n            for(int j=0;j<k;j++) {\n                dp[i][j + 1] = max(dp[i][j + 1], ndp[j] + 1);\n            }\n            \n            if(mp.find(nums[i]) != mp.end()){\n                for(int j=0;j<=k;j++) {\n                    dp[i][j] = max(dp[i][j], mp[nums[i]][j] + 1);\n                }\n            }\n            else mp[nums[i]] = dp[i];\n            for(int j=0;j<=k;j++) ndp[j] = max(ndp[j], dp[i][j]);\n            for(int j=0;j<=k;j++) {\n                mp[nums[i]][j] = max(mp[nums[i]][j], dp[i][j]);\n            }\n        }\n        int ans = 0;\n        for(int i=0;i<n;i++) ans = max(ans, dp[i][k]);\n        return ans;\n    }\n};",
    "submit_ts": 1717858425.0
}