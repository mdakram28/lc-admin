{
    "username": "humbl_pi",
    "submission": "class Solution:\n    def __init__(self):\n        self.ways = collections.defaultdict(int)\n        \n    def waysToReachStair(self, k: int) -> int:\n        # if not k in self.ways:\n        \n        @lru_cache(None)\n        def srch(i, jmp, canlow):\n            if (i > k+1): return 0\n            ans = 1 if i == k else 0 \n            if canlow:\n                ans += srch(i-1, jmp, False)\n            ## True\n            ans += srch(i+2**jmp, jmp+1, True)\n            \n            return ans\n        \n        return srch(1,0,True)\n        \n\"\"\"        \nYou are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0.\n\nAlice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can:\n\nGo down to stair i - 1. This operation cannot be used consecutively or on stair 0.\nGo up to stair i + 2jump. And then, jump becomes jump + 1.\n\nif above stair k and \n\"\"\"",
    "submit_ts": "1716088230",
    "subm_id": "1261807884"
}