{
    "username": "202101184",
    "submission": "\n#define ll long long\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define vi vector<int>\n#define vll vector<long long>\n#define mii map<int, int>\n#define si set<int>\n#define sc set<char>\n\n#define f(i,s,e) for(long long int i=s;i<e;i++)\n#define cf(i,s,e) for(long long int i=s;i<=e;i++)\n#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)\n#define pb push_back\n#define eb emplace_back\n\ntemplate <class T>\nvoid print_v(vector<T> &v) { cout << \"{\"; for (auto x : v) cout << x << \",\"; cout << \"\\b}\"; }\n\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define read(type) readInt<type>()\nll min(ll a,int b) { if (a<b) return a; return b; }\nll min(int a,ll b) { if (a<b) return a; return b; }\nll max(ll a,int b) { if (a>b) return a; return b; }\nll max(int a,ll b) { if (a>b) return a; return b; }\nll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }\nll lcm(ll a,ll b) { return a/gcd(a,b)*b; }\nstring to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }\nstring to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }\nbool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }\nvoid yes() { cout<<\"YES\\n\"; }\nvoid no() { cout<<\"NO\\n\"; } \n\n#define MAXIM 400\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n        \n        \n        vector<vector<int>> dp(n + 1,vector<int>(MAXIM + 1, 0));\n        dp[0][0] = 1;\n\n        // Process requirements\n        vector<int> arr(n, -1);\n        for (const auto& req : requirements) {\n            arr[req[0]] = req[1];\n        }\n\n        // Fill DP table\n        f(len,1,n+1) {\n            for (int inv = 0; inv <= MAXIM; ++inv) {\n                for (int k = 0; k < len; ++k) {\n                    if (inv >= k) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n\n            if (arr[len - 1] != -1) {\n                int needf = arr[len - 1];\n                for (int inv = 0; inv <= MAXIM; ++inv) {\n                    if (inv != needf) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n          \n        }\n        return dp[n][arr[n - 1]];\n    }\n};",
    "submit_ts": 1719069580.0
}