{
    "username": "WKelvinson",
    "submission": "class MyTree {\n    private int size;\n    private int[] tree;\n\n    public MyTree(int size) {\n        this.size = size;\n        this.tree = new int[size + 1];\n    }\n\n    public void update(int index, int delta) {\n        while (index <= size) {\n            tree[index] += delta;\n            index += index & -index;\n        }\n    }\n\n    public int query(int index) {\n        int total = 0;\n        while (index > 0) {\n            total += tree[index];\n            index -= index & -index;\n        }\n        return total;\n    }\n\n    public int rangeQuery(int left, int right) {\n        return query(right) - query(left - 1);\n    }\n}\n\npublic class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        MyTree myTree = new MyTree(n);\n        int[] peakStatus = new int[n];\n        List<Integer> result = new ArrayList<>();\n\n        for (int i = 1; i < n - 1; i++) {\n            if (isPeak(nums, i)) {\n                peakStatus[i] = 1;\n                myTree.update(i + 1, 1);\n            }\n        }\n\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int left = query[1];\n                int right = query[2];\n                if (left + 1 < right) {\n                    int count = myTree.rangeQuery(left + 2, right);\n                    result.add(count);\n                } else {\n                    result.add(0);\n                }\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                nums[index] = value;\n                for (int i = Math.max(1, index - 1); i <= Math.min(n - 2, index + 1); i++) {\n                    boolean wasPeak = peakStatus[i] == 1;\n                    boolean curr = isPeak(nums, i);\n                    if (wasPeak != curr) {\n                        myTree.update(i + 1, curr ? 1 : -1);\n                        peakStatus[i] = curr ? 1 : 0;\n                    }\n                }\n            }\n        }\n\n        return result;\n    }\n\n    private boolean isPeak(int[] arr, int i) {\n        return 0 < i && i < arr.length - 1 && arr[i - 1] < arr[i] && arr[i] > arr[i + 1];\n    }\n}",
    "submit_ts": "1718508124",
    "subm_id": "1289672340"
}