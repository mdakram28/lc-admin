{
    "username": "lokeshrajput5473",
    "submission": "class Solution {\npublic:\n\n    int dfs1(int node, vector<int> adj[], vector<pair<int, int>> &timeTakenDown, int par) {\n        for(int child: adj[node]) {\n            if(child == par)continue;\n            int value = dfs1(child, adj, timeTakenDown, node);\n            if(value >= timeTakenDown[node].first) {\n                timeTakenDown[node].second = timeTakenDown[node].first;\n                timeTakenDown[node].first = value;\n            } else if(value > timeTakenDown[node].second) {\n                timeTakenDown[node].second = value;\n            }\n        }\n        return 2 - node%2 + timeTakenDown[node].first;\n    }\n\n    void dfs2(int node, vector<int> adj[], vector<pair<int, int>> &timeTakenDown, int par, vector<int>&ans, int FromTop) {\n        // cout << \"node is \" << node << \" \" << FromTop << \" \" << timeTakenDown[node].first << \" \" << timeTakenDown[node].second << endl;;\n        ans[node] = max(FromTop, timeTakenDown[node].first);\n        int valueToBeSentDown = 0;\n        for(auto child:adj[node]) {\n            if(child == par) continue;\n            // valueToBeSentDown = 2 - node%2;\n            valueToBeSentDown = 0;\n            // cout << \"se \"<<  timeTakenDown[child].first << \" \" << timeTakenDown[child].second << \" \";\n            if(timeTakenDown[child].first + (2 - child%2) == timeTakenDown[node].first) {\n                valueToBeSentDown += timeTakenDown[node].second;\n            }else valueToBeSentDown += timeTakenDown[node].first;\n\n            if(FromTop > valueToBeSentDown) valueToBeSentDown = FromTop;\n            valueToBeSentDown += (2 - node%2);\n            // cout << valueToBeSentDown << endl;\n            dfs2(child, adj, timeTakenDown, node, ans, valueToBeSentDown);\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size()+1;\n        vector<int> adj[n];\n\n        for(auto vec:edges) {\n            adj[vec[0]].push_back(vec[1]);\n            adj[vec[1]].push_back(vec[0]);\n        }\n        vector<pair<int, int>> timeTakenDown(n, {0, 0});\n        vector<int>ans(n, 0);\n        dfs1(0, adj, timeTakenDown, -1);\n        // for(auto i:timeTakenDown) {\n        //     cout << i.first << \" \" << i.second << endl;\n        // }\n        dfs2(0, adj, timeTakenDown, -1, ans, 0);\n        return ans;\n    }\n};",
    "submit_ts": "1722699953",
    "subm_id": "1343227254"
}