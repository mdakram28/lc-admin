{
    "username": "bharatkhanna1995",
    "submission": "class Solution {\npublic:\n    \n    int findTopLeft(vector<vector<int>>& points) {\n        int ans = 0;\n        for (int i = 1; i < points.size(); i++) {\n            if (points[i][0] + points[i][1] > points[ans][0] + points[ans][1]) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n    \n    int findTopRight(vector<vector<int>>& points) {\n        int ans = 0;\n        for (int i = 1; i < points.size(); i++) {\n            if (points[i][0] - points[i][1] > points[ans][0] - points[ans][1]) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n    \n    int findBotLeft(vector<vector<int>>& points) {\n        int ans = 0;\n        for (int i = 1; i < points.size(); i++) {\n            if (-1 * points[i][0] - points[i][1] > -1 * points[ans][0] - points[ans][1]) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n    \n    int findBotRight(vector<vector<int>>& points) {\n        int ans = 0;\n        for (int i = 1; i < points.size(); i++) {\n            if (-1 * points[i][0] + points[i][1] > -1 * points[ans][0] + points[ans][1]) {\n                ans = i;\n            }\n        }\n        return ans;\n    }\n    \n    vector<int> findFarthestPoints(vector<vector<int>>& points) {\n        vector<int> indices;\n        indices.push_back(findTopLeft(points));\n        indices.push_back(findTopRight(points));\n        indices.push_back(findBotLeft(points));\n        indices.push_back(findBotRight(points));\n        return indices;\n    }\n    \n    int findMaxDistance(vector<vector<int>>& points, int idx) {\n        int ans = 0;\n        for (auto it: points) {\n            ans = max(ans, abs(it[0] - points[idx][0]) + abs(it[1] - points[idx][1]));\n        }\n        return ans;\n    }\n    \n    int findDistance(vector<vector<int>>& points, int removed) {\n        vector<vector<int>> takenPts;\n        for (int i = 0; i < points.size(); i++) {\n            if (i == removed) continue;\n            takenPts.push_back(points[i]);\n        }\n        \n        int distance = 0;\n        vector<int> farthestPts = findFarthestPoints(takenPts);\n        for (auto it: farthestPts) {\n            distance = max(distance, findMaxDistance(takenPts, it));\n        }\n        return distance;\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        vector<int> pts = findFarthestPoints(points);\n        vector<int> distances;\n        for (auto it: pts) {\n            // it is removed point\n            distances.push_back(findDistance(points, it));\n        }\n        sort(distances.begin(), distances.end());\n        return distances[0];\n    }\n};"
}