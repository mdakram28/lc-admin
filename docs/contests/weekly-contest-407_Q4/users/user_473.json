{
    "username": "alexlin87",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long minimumOperations(int[] a, int[] t) {\n        int n = a.length;\n        int[] d = new int[n];\n        for(int i = 0; i < n; i++) {\n            d[i] = a[i] - t[i];\n        }\n        long ans = 0;\n        List<Integer> l = new ArrayList<>();\n        for(int i = 0; i < n; i++) {\n            if(d[i] > 0) {\n                if(i == 0 || d[i - 1] > 0) {\n                    l.add(d[i]);\n                }\n                else {\n                    ans += helper(l);\n                    l.clear();\n                    l.add(d[i]);\n                }\n            }\n            else {\n                if(i == 0 || d[i - 1] < 0) {\n                    l.add(-d[i]);\n                }\n                else {\n                    ans += helper(l);\n                    l.clear();\n                    l.add(-d[i]);\n                }\n            }\n        }\n        ans += helper(l);\n        return ans;\n    }\n    private long helper(List<Integer> l) {\n        if(l.size() == 0) {\n            return 0;\n        }\n        long ops = l.get(0);\n        for(int i = 1; i < l.size(); i++) {\n            int diff = l.get(i) - l.get(i - 1);\n            ops += Math.max(0, diff);\n        }\n        return ops;\n    }\n}",
    "submit_ts": "1721531547",
    "subm_id": "1327963696"
}