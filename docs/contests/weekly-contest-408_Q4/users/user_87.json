{
    "username": "Dan13llljws",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> adj(n + 4);\n        using ll = long long;\n        auto dist2 = [&](vector<int> &a, vector<int> &b) -> ll {\n            return 1LL * (a[0] - b[0]) * (a[0] - b[0]) + 1LL * (a[1] - b[1]) * (a[1] - b[1]);\n        };\n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (dist2(circles[i], circles[j]) <= 1LL * (circles[i][2] + circles[j][2]) * (circles[i][2] + circles[j][2])){\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            auto v = circles[i];\n            if (v[0] - v[2] <= 0) {\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if (v[1] - v[2] <= 0) {\n                adj[n + 1].push_back(i);\n                adj[i].push_back(n + 1);\n            }\n            if (v[0] + v[2] >= X) {\n                adj[n + 2].push_back(i);\n                adj[i].push_back(n + 2);\n            }\n            if (v[1] + v[2] >= Y) {\n                adj[n + 3].push_back(i);\n                adj[i].push_back(n + 3);\n            }\n        }\n        auto check = [&](int src, int dst) {\n            queue<int> q;\n            q.push(src);\n            vector<int> vis(n + 4);\n            while(q.size()) {\n                int u = q.front(); q.pop();\n                for (int v : adj[u]) {\n                    if (!vis[v]) {\n                        vis[v] = 1, q.push(v);\n                    }\n                }\n            }\n            return vis[dst];\n        };\n        return !check(n, n + 1) && !check(n, n + 2) && !check(n + 3, n + 1) && !check(n + 3, n + 2);\n    }\n};",
    "submit_ts": "1722136885",
    "subm_id": "1335747821"
}