{
    "username": "carlostagosaku",
    "submission": "class DisjointSparseTable:\n    \"\"\"Disjoint Sparse Table\n\n    \u30ea\u30b9\u30c8\u306b\u5bfe\u3057\u3066\u3001\u4e8b\u524d\u69cb\u7bc9O(NlogN)\u3001\u533a\u9593\u6f14\u7b97O(1)\u3067\u3067\u304d\u307e\u3059\u3002\n    \u6f14\u7b97func\u306f\u3001\u7d50\u5408\u5247\u3092\u6e80\u305f\u3059\u3082\u306e\u3060\u3051\u3067\u3059\u3002\n        \u7d50\u5408\u5247\uff1a func(a, b) == func(b, a)  (\u9806\u756a\u306f\u95a2\u4fc2\u306a\u3057)\n\n    Attributes:\n        lst (list): \u5bfe\u8c61\u306e\u30ea\u30b9\u30c8\n        func (Callable[[int,int],int]): \u6f14\u7b97 (xor, gcd, min, max, ...)\n\n    Examples:\n        >>> dst = DisjointSparseTable([9, 1, 6, 10, 2], min)\n        >>> dst.prod(0, 4)\n        1\n        >>> dst.prod(2, 4)\n        2\n\n        >>> def xor(i, j): return i ^ j\n        >>> dst = DisjointSparseTable([9, 1, 6, 10, 2], xor)\n        >>> dst.prod(0, 4)  # 9^1^6^10^2=6\n        6\n        >>> dst.prod(0, 2)  # 9^1^6=14\n        14\n    \"\"\"\n\n    def __init__(self, lst: list, func: \"function\") -> None:\n        length = 1 << (len(lst) - 1).bit_length()\n        self.my_lst = lst + [0] * (length - len(lst))\n        self.__func = func\n\n        # \u30c6\u30fc\u30d6\u30eb\u306e\u4f5c\u6210\n        self.tables = []\n        dist = length >> 1\n        gc = 2  # \u30b0\u30eb\u30fc\u30d7\u306e\u6570\n        while dist:\n            now_table = [None] * length\n            left_start = 0\n            left, right = 0, dist - 1\n            for _ in range(gc):\n                if left_start:\n                    val = self.my_lst[left]\n                    for i in range(left, right + 1):\n                        if i != left:\n                            val = func(val, self.my_lst[i])\n                        now_table[i] = val\n                else:\n                    # right_start\n                    val = self.my_lst[right]\n                    for i in range(right, left - 1, -1):\n                        if i != right:\n                            val = func(val, self.my_lst[i])\n                        now_table[i] = val\n                left += dist\n                right += dist\n                left_start ^= 1\n            self.tables.append(now_table)\n            dist >>= 1\n            gc <<= 1\n\n        # self.bit_length\u30ea\u30b9\u30c8\u306e\u4f5c\u6210\n        self.bit_length = [0]\n        for i in range(1, (len(lst) - 1).bit_length() + 1):\n            for s in range(1 << (i - 1)):\n                self.bit_length.append(i)\n\n    def prod(self, left: int, right: int) -> int:\n        \"\"\"\u533a\u9593\u6f14\u7b97\n\n        \u9589\u533a\u9593 [left, right] \u3067\u6f14\u7b97 func \u3092\u884c\u3063\u305f\u7d50\u679c\u3092\u8fd4\u3057\u307e\u3059\u3002\n\n        Args:\n            left (int): \u533a\u9593\u306e\u5de6\u7aef\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n            right (int): \u533a\u9593\u306e\u53f3\u7aef\u306e\u30a4\u30f3\u30c7\u30c3\u30af\u30b9\n\n        Returns:\n            int: \u9589\u533a\u9593 [left, right] \u3067\u6f14\u7b97 func \u3092\u884c\u3063\u305f\u7d50\u679c\n\n        Note:\n            \u9589\u533a\u9593 [left, right] \u306a\u306e\u306b\u6ce8\u610f\u3057\u3066\u306d\u3002\n\n        \"\"\"\n        right -= 1\n        if left == right:\n            return self.my_lst[left]\n\n        # table_idx = len(self.tables) - (left ^ right).bit_length()\n        table_idx = len(self.tables) - self.bit_length[left ^ right]\n        left_el = self.tables[table_idx][left]\n        right_el = self.tables[table_idx][right]\n        return self.__func(left_el, right_el)\n \n    def query(self, l, r):\n        \"\"\" min value of [l, r) \"\"\"\n        d = r - l\n        if d == 1:\n            return self.table[l, 0]\n \n        k = (d - 1).bit_length() - 1\n        k2 = 1 << k\n        return min(self.table[l, k], self.table[r - k2, k])\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        X = nums[:]\n        I = (1<<30) - 1\n        T = DisjointSparseTable(X,lambda x,y:x&y)\n        ans = 0\n        N = len(X)\n        for i in range(N):\n            r = N\n            if X[i]<k:\n                continue\n            if T.prod(i,r)<k:\n                x = i\n                while r-x>1:\n                    mid = (r+x)//2\n                    if T.prod(i,mid)>=k:\n                        x = mid\n                    else:\n                        r = mid\n                r -= 1\n                if T.prod(i,r)!=k:\n                    continue\n            elif T.prod(i,r)>k:\n                continue\n            l = i\n            y = N\n            while y-l>1:\n                mid = (y+l)//2\n                if T.prod(i,mid)<=k:\n                    y = mid\n                else:\n                    l = mid\n            # print(i,l,r)\n            ans += r-l\n        return ans\n\n\n",
    "submit_ts": "1720278988",
    "subm_id": "1311732638"
}