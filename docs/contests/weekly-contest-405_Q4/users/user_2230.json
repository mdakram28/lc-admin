{
    "username": "sudhabalu",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n#         n=len(target)\n        \n#         d=defaultdict(list)\n        \n#         for i in range(len(words)):\n#             d[words[i]].append(costs[i])\n            \n#         def backtrack(n,i,s,ans,amount):\n#             nonlocal min_cost\n#             if i>=n:\n#                 if ans==target:\n#                     min_cost=min(min_cost,amount)\n#                 return \n#             while i<n:\n#                 s+=target[i]\n#                 if s in d:\n#                     backtrack(n,i+1,\"\",ans+s,amount+min(d[s]))\n#                 i+=1\n#             return\n                \n#         min_cost=float(\"inf\")\n#         backtrack(n,0,\"\",\"\",0)\n#         return min_cost if min_cost!=float(\"inf\") else -1\n        \n        \n        n=len(target)\n        d=defaultdict(list)\n        \n        for i in range(len(words)):\n            d[words[i]].append(costs[i])\n        dp=[float(\"inf\")]*(n+1)\n        dp[0]=0\n        \n        \n        for i in range(n):\n            if dp[i]==float(\"inf\"):\n                continue\n            \n            \n            for w in d:\n                len_word=len(w)\n                if target[i:i+len_word]==w:\n                    dp[i+len_word]=min(dp[i + len_word], dp[i] + min(d[w]))\n        return dp[n] if dp[n] != float('inf') else -1\n\n\n\n        ",
    "submit_ts": "1720324649",
    "subm_id": "1312404689"
}