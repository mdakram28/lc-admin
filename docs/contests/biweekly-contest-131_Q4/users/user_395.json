{
    "username": "niu-niu-ch",
    "submission": "const int MAXN = 50005;\nclass Solution {\npublic:\nint tree[4 * MAXN];\nint arr[MAXN + 1];\nvoid build(int v, int tl, int tr, int arr[]) {  \n    if (tl == tr) {  \n        tree[v] = arr[tl];  \n    } else {  \n        int tm = (tl + tr) / 2;   \n        build(2 * v, tl, tm, arr);  \n        build(2 * v + 1, tm + 1, tr, arr);    \n        tree[v] = max(tree[2 * v], tree[2 * v + 1]);  \n    }  \n}  \n   \nvoid update(int v, int tl, int tr, int idx, int new_val, int arr[]) {  \n    if (tl == tr) {  \n        arr[idx] = new_val;  \n        tree[v] = new_val;  \n    } else {  \n        int tm = (tl + tr) / 2;  \n        if (idx <= tm) {  \n            update(2 * v, tl, tm, idx, new_val, arr);  \n        } else {  \n            update(2 * v + 1, tm + 1, tr, idx, new_val, arr);  \n        }  \n        tree[v] = max(tree[2 * v], tree[2 * v + 1]);  \n    }  \n}  \n    \nint query(int v, int tl, int tr, int k) {  \n    if (k <= tl) {  \n        return INT_MIN;\n    } else if (k >= tr) {  \n        return tree[v];\n    } else {  \n        int tm = (tl + tr) / 2;  \n        if (k <= tm) {  \n            return query(2 * v, tl, tm, k);\n        } else {  \n            return max(tree[2 * v], query(2 * v + 1, tm + 1, tr, k));\n        }  \n    }  \n}  \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        for (int i = 0; i <= MAXN; i++) {  \n            arr[i] = 0; \n        }  \n        arr[MAXN] = MAXN;\n        build(1, 0, MAXN, arr);\n        set<int> st; vector<bool> ret;\n        st.insert(0); st.insert(MAXN);\n        for(auto q: queries) {\n            if(q[0] == 1) {\n                int x = q[1];\n                auto it = st.lower_bound(x);\n                int l = *prev(it), r = *it;\n                update(1,0,MAXN,r,r == MAXN ? MAXN : r-x,arr);\n                update(1,0,MAXN,x,x-l,arr);\n                st.insert(x);\n            } else {\n                int x = q[1], y = q[2];\n                int max_val = query(1, 0, MAXN, x);\n                auto it = st.lower_bound(x);\n                int l = *prev(it);\n                ret.push_back(max_val >= y || (x - l) >= y);\n            }\n        }\n        \n        return ret;\n    }\n};",
    "submit_ts": "1716652652",
    "subm_id": "534779703"
}