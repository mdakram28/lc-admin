{
    "username": "saikat93ify",
    "submission": "class Solution {\npublic:\n    \n    struct Point\n    {\n        int x, y; \n        \n        Point(){}\n        \n        Point(int X, int Y)\n        {\n            x = X; \n            y = Y;\n        }\n        \n        Point(vector <int> &P)\n        {\n            x = P[0]; \n            y = P[1];\n        }\n        \n        int operator<(Point &P)\n        {\n            int sum = x + y; \n            int P_sum = P.x + P.y; \n            \n            return (sum < P_sum);\n        }\n    };\n    \n    static int sort_by_sum(Point &P, Point &Q)\n    {\n        int P_sum = P.x + P.y; \n        int Q_sum = Q.x + Q.y;\n            \n        return (P_sum < Q_sum);\n    }\n    \n    static int sort_by_diff(Point &P, Point &Q)\n    {\n        int P_diff = P.x - P.y; \n        int Q_diff = Q.x - Q.y;\n            \n        return (P_diff < Q_diff);\n    }\n    \n    int get_distance(Point &P, Point &Q)\n    {\n        return abs(P.x - Q.x) + abs(P.y - Q.y);\n    }\n    \n    int get_sum(vector <int> &X)\n    {\n        return X[0] + X[1];\n    }\n    \n    int get_diff(vector <int> &X)\n    {\n        return X[0] - X[1];\n    }\n    \n    int min_4(int a, int b, int c, int d)\n    {\n        return min(min(a, b), min(c, d));\n    }\n    \n    int get_max_distance_without(vector <vector <int> > &points, int excluded_point)\n    {\n        vector <Point> P1, P2;\n        for(int i = 0; i < points.size(); i++)\n        {\n            if(i == excluded_point)\n            {\n                continue;\n            }\n            \n            P1.push_back(Point(points[i]));\n            P2.push_back(Point(points[i]));\n        }\n        \n        sort(P1.begin(), P1.end(), sort_by_sum); \n        sort(P2.begin(), P2.end(), sort_by_diff);\n        \n        int max_distance = max(get_distance(P1[0], P1.back()), get_distance(P2[0], P2.back()));\n        return max_distance;\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) \n    {   \n        int max_sum = 0, min_sum = 0, max_diff = 0, min_diff = 0;\n        for(int i = 0; i < points.size(); i++)\n        {\n            int sum = points[i][0] + points[i][1];\n            int diff = points[i][0] - points[i][1];\n            \n            if(get_sum(points[i]) > get_sum(points[max_sum]))\n            {\n                max_sum = i;\n            }\n            else if(get_sum(points[i]) < get_sum(points[min_sum]))\n            {\n                min_sum = i;\n            }\n            \n            if(get_diff(points[i]) > get_diff(points[max_diff]))\n            {\n                max_diff = i;\n            }\n            else if(get_diff(points[i]) < get_diff(points[min_diff]))\n            {\n                min_diff = i;\n            }\n        }\n        \n        int distance_without_max_sum = get_max_distance_without(points, max_sum);\n        int distance_without_min_sum = get_max_distance_without(points, min_sum);\n        int distance_without_max_diff = get_max_distance_without(points, max_diff);\n        int distance_without_min_diff = get_max_distance_without(points, min_diff);\n        \n        int minimum_distance_after_deletion = min_4(distance_without_max_sum, \n                                                   distance_without_min_sum,\n                                                   distance_without_max_diff,\n                                                   distance_without_min_diff);\n        \n        return minimum_distance_after_deletion;\n    }\n};"
}