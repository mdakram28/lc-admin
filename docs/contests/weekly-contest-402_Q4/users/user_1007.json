{
    "username": "dgzhn",
    "submission": "import heapq\nimport math\nimport random\nfrom decimal import Decimal\nfrom bisect import bisect_right, bisect_left\nfrom collections import Counter, deque, defaultdict\nfrom functools import reduce, cache\nfrom heapq import heappop, heappush, heapify\nfrom itertools import product, accumulate, permutations\nfrom typing import List, Optional\n\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.n = n\n        self.bit = [0] * n\n\n    def sum(self, r):\n        res = 0\n        while r >= 0:\n            res += self.bit[r]\n            r = (r & (r + 1)) - 1\n        return res\n\n    def rsum(self, l, r):\n        return self.sum(r) - self.sum(l - 1)\n\n    def add(self, idx, delta):\n        while idx < self.n:\n            self.bit[idx] += delta\n            idx = idx | (idx + 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = FenwickTree(n + 5)\n        for i in range(1,n - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                tree.add(i + 1,1)\n        ans = []\n        for f,x,y in queries:\n            if f == 1:\n                if y - x + 1 < 3:\n                    ans.append(0)\n                else:\n                    ans.append(tree.rsum(x + 2,y))\n            else:\n                nums[x] = y\n                for i in range(x - 1,x + 2):\n                    pre = tree.rsum(i + 1,i + 1)\n                    if 0 < i < n - 1:\n                        if nums[i - 1] < nums[i] > nums[i + 1]:\n                            now = 1\n                        else:\n                            now = 0\n                        tree.add(i + 1,now - pre)\n        return ans\n\n\n",
    "submit_ts": 1718508095.0
}