{
    "username": "VILLANOVA_ECON",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = {}\n        #words = list(set(words))\n        new_arr = [(x,y) for x,y in zip(words,costs)]\n        new_arr.sort(key=lambda x:x[1])\n        seen = set()\n        for word,cost in new_arr:\n            if word in seen:\n                continue\n            seen.add(word)\n            t = trie\n            for char in word:\n                if char not in t:\n                    t[char] = {}\n                t = t[char]\n            if \"$\" not in t:\n                t[\"$\"] = []\n            t[\"$\"].append([word,cost])\n            \n        @lru_cache(None)\n        def recur_fn(i):\n            if i == len(target):\n                return 0\n            res = math.inf\n            t = trie\n            for j in range(i,len(target)):\n                char = target[j]\n                if char in t:\n                    t = t[char]\n                    if \"$\" in t:\n                        for word,cost in t[\"$\"]:\n                            res = min(res,cost + recur_fn(j+1))\n                else:\n                    break\n            return res\n            \n            \n             \n            \n        result = recur_fn(0)\n        recur_fn.cache_clear()\n        if result == math.inf:\n            return -1\n        return result\n            ",
    "submit_ts": "1720320521",
    "subm_id": "1312296747"
}