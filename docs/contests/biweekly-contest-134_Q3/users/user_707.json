{
    "username": "mehul2315",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        if (k > n) return 0;\n\n        int count = 0;\n        int alternatingCount = 0;\n\n        // Initialize the count of alternating pairs for the first window\n        for (int i = 0; i < k - 1; ++i) {\n            if (colors[i] != colors[i + 1]) {\n                alternatingCount++;\n            }\n        }\n\n        // Check if the first window is alternating\n        if (alternatingCount == k - 1) {\n            count++;\n        }\n\n        // Slide the window\n        for (int i = 1; i < n; ++i) {\n            // Remove the influence of the element that is sliding out\n            if (colors[(i - 1) % n] != colors[(i - 1 + 1) % n]) {\n                alternatingCount--;\n            }\n\n            // Add the influence of the new element\n            if (colors[(i + k - 2) % n] != colors[(i + k - 1) % n]) {\n                alternatingCount++;\n            }\n\n            // Check if the current window is alternating\n            if (alternatingCount == k - 1) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n};\n\n\n",
    "submit_ts": "1720279020",
    "subm_id": "1311733922"
}