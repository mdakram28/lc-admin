{
    "username": "hariom_coder",
    "submission": "class Solution {\n    \nconst int MOD = 1000000007;\nconst int MAX = 400;\n\nint solve(int n, const vector<vector<int>>& requirements) {\n    long dp[n + 1][MAX + 1];\n    memset(dp, 0, sizeof(dp));\n    dp[0][0] = 1;\n\n    int request[n];\n    fill(request, request + n, -1);\n\n    for (const auto& req : requirements) {\n        request[req[0]] = req[1];\n    }\n\n    for (int i = 0; i < n; ++i) {\n        for (int k = 0; k <= MAX; ++k) {\n            if (dp[i][k] == 0) continue;\n            for (int l = 0; l <= i; ++l) {\n                int ninver = k + l;\n                if (ninver > MAX) break;\n                dp[i + 1][ninver] = (dp[i + 1][ninver] + dp[i][k]) % MOD;\n            }\n        }\n        if (request[i] != -1) {\n            for (int k = 0; k <= MAX; ++k) {\n                if (k != request[i]) {\n                    dp[i + 1][k] = 0;\n                }\n            }\n        }\n    }\n\n    long result = 0;\n    for (int k = 0; k <= MAX; ++k) {\n        result = (result + dp[n][k]) % MOD;\n    }\n\n    return static_cast<int>(result);\n}\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        return solve(n,requirements);\n    }\n};",
    "submit_ts": 1719069735.0
}