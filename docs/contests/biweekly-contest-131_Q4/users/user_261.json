{
    "username": "CAEL0",
    "submission": "#include <bits/stdc++.h>\n#define sz size()\n#define bk back()\n#define fi first\n#define se second\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nconst int MAX = 202020;\nint tree[MAX], lazy[MAX];\n\nint init(int idx, int s, int e) {\n    if (s == e)\n        return tree[idx] = s;\n\n    int m = (s + e) >> 1;\n    return tree[idx] = max(init(2 * idx, s, m), init(2 * idx + 1, m + 1, e));\n}\n\nvoid propagate(int idx, int s, int e) {\n    if (lazy[idx]) {\n        if (s != e) {\n            lazy[2 * idx] += lazy[idx];\n            lazy[2 * idx + 1] += lazy[idx];\n        }\n\n        tree[idx] += lazy[idx];\n        lazy[idx] = 0;\n    }\n}\n\nint maximum(int idx, int s, int e, int l, int r) {\n    propagate(idx, s, e);\n    if (r < s || e < l)\n        return 0;\n\n    if (l <= s && e <= r)\n        return tree[idx];\n\n    int m = (s + e) >> 1;\n    return max(maximum(2 * idx, s, m, l, r), maximum(2 * idx + 1, m + 1, e, l, r));\n}\n\nvoid update(int idx, int s, int e, int l, int r, int v) {\n    propagate(idx, s, e);\n    if (r < s || e < l)\n        return;\n\n    if (l <= s && e <= r) {\n        lazy[idx] = v;\n        propagate(idx, s, e);\n        return;\n    }\n\n    int m = (s + e) >> 1;\n    update(2 * idx, s, m, l, r, v);\n    update(2 * idx + 1, m + 1, e, l, r, v);\n    tree[idx] = max(tree[2 * idx], tree[2 * idx + 1]);\n}\n\nclass Solution {\n  public:\n    vector<bool> getResults(vector<vector<int>> &queries) {\n        int n = 50005;\n        init(1, 1, n);\n        memset(lazy, 0, sizeof(lazy));\n\n        set<int> s;\n        vector<bool> ret;\n\n        for (int i = 0; i < queries.sz; i++) {\n            if (queries[i][0] == 1) {\n                int x = queries[i][1];\n                s.insert(x);\n                auto it = s.upper_bound(x);\n                int y = maximum(1, 1, n, x + 1, x + 1);\n\n                if (it == s.end())\n                    update(1, 1, n, x + 1, n, 1 - y);\n                else\n                    update(1, 1, n, x + 1, *it, 1 - y);\n            } else {\n                int x = queries[i][1];\n                int k = queries[i][2];\n\n                ret.push_back(maximum(1, 1, n, 1, x) >= k);\n            }\n        }\n\n        return ret;\n    }\n};",
    "submit_ts": "1716651023",
    "subm_id": "1267630190"
}