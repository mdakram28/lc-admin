{
    "username": "hiteshgup09",
    "submission": "import java.util.*;\n\nimport java.util.*;\n\nclass Solution {\n    private static final int MOD = 1000000007;\n    private int[][][] memo;\n    private int n;\n    private int[][] requirements;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        this.n = n;\n        this.requirements = requirements;\n        this.memo = new int[n + 1][401][requirements.length + 1];\n\n        for (int[][] twoD : memo) {\n            for (int[] oneD : twoD) {\n                Arrays.fill(oneD, -1);\n            }\n        }\n\n        Arrays.sort(requirements, Comparator.comparingInt(a -> a[0]));\n\n        return countPermutations(0, 0, 0);\n    }\n\n    private int countPermutations(int len, int currentInversions, int reqIndex) {\n        if (len == n) {\n            return reqIndex == requirements.length ? 1 : 0;\n        }\n\n        if (reqIndex < requirements.length) {\n            int reqEnd = requirements[reqIndex][0];\n            int reqCnt = requirements[reqIndex][1];\n\n            if (len > reqEnd && currentInversions != reqCnt) {\n                return 0;\n            }\n        }\n\n        if (memo[len][currentInversions][reqIndex] != -1) {\n            return memo[len][currentInversions][reqIndex];\n        }\n\n        int result = 0;\n        for (int i = 0; i <= len; i++) {\n            if (currentInversions + i <= 400) {\n                int newReqIndex = reqIndex;\n                if (reqIndex < requirements.length && len == requirements[reqIndex][0] && currentInversions + i == requirements[reqIndex][1]) {\n                    newReqIndex++;\n                }\n                result = (result + countPermutations(len + 1, currentInversions + i, newReqIndex)) % MOD;\n            }\n        }\n\n        memo[len][currentInversions][reqIndex] = result;\n        return result;\n    }\n\n}\n\n",
    "submit_ts": "1719068816",
    "subm_id": "1296777683"
}