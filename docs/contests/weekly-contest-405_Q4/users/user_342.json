{
    "username": "r32626",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = None\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        if node.cost is None:\n            node.cost = cost\n        else:\n            node.cost = min(node.cost, cost)\n    \n    def search(self, s, end):\n        node = self.root\n        costs = []\n        for i in range(end, -1, -1):\n            char = s[i]\n            if char not in node.children:\n                break\n            node = node.children[char]\n            if node.cost is not None:\n                costs.append((end - i + 1, node.cost))\n        return costs\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = Trie()\n\n        # Insert all words into the trie with their respective costs\n        for i in range(len(words)):\n            trie.insert(words[i][::-1], costs[i])  # Reverse the word for easier search\n\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Fill the dp array using the Trie\n        for j in range(1, n + 1):\n            matches = trie.search(target, j - 1)\n            for length, cost in matches:\n                if j >= length:\n                    dp[j] = min(dp[j], dp[j - length] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720321558",
    "subm_id": "1312326101"
}