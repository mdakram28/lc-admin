{
    "username": "Harsh_Agria",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> childNodes;\n    int cost;\n    bool isEnd;\n\n    TrieNode() : childNodes(26, nullptr), cost(INT_MAX), isEnd(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insertWord(const string& word, int cost) {\n        TrieNode* currentNode = root;\n        for (char ch : word) {\n            if (!currentNode->childNodes[ch - 'a']) {\n                currentNode->childNodes[ch - 'a'] = new TrieNode();\n            }\n            currentNode = currentNode->childNodes[ch - 'a'];\n        }\n        currentNode->cost = min(cost, currentNode->cost);\n        currentNode->isEnd = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& dictionary, vector<int>& costs) {\n        Trie trie;\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n\n        for (int i = 0; i < dictionary.size(); ++i) {\n            trie.insertWord(dictionary[i], costs[i]);\n        }\n\n        minCost[0] = 0;\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.getRoot();\n            for (int j = i; j < targetLength; ++j) {\n                char ch = target[j];\n                if (!currentNode->childNodes[ch - 'a']) break;\n                currentNode = currentNode->childNodes[ch - 'a'];\n                if (currentNode->isEnd) {\n                    minCost[j + 1] = min(minCost[j + 1], minCost[i] + currentNode->cost);\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n};\n",
    "submit_ts": "1720322464",
    "subm_id": "1312350608"
}