{
    "username": "vishalsharma05052002",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> word_costs; // (word length, cost)\n};\n\nclass Solution {\nprivate:\n    TrieNode* buildTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->word_costs.emplace_back(words[i].length(), costs[i]);\n        }\n        return root;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = buildTrie(words, costs);\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == LLONG_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n && node->children.count(target[j]); j++) {\n                node = node->children[target[j]];\n                for (auto& [len, cost] : node->word_costs) {\n                    if (j - i + 1 == len) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320890",
    "subm_id": "1312307482"
}