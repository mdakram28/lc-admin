{
    "username": "siraj_786",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Sort cuts in descending order to use the largest cuts first\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n        \n        # Initialize indices for horizontal and vertical cuts\n        h_idx, v_idx = 0, 0\n        # Initialize the number of horizontal and vertical segments\n        h_segments, v_segments = 1, 1\n        # Initialize the total cost\n        total_expense = 0\n        \n        # Process the cuts using a greedy strategy\n        while h_idx < len(horizontalCut) and v_idx < len(verticalCut):\n            if horizontalCut[h_idx] >= verticalCut[v_idx]:\n                total_expense += horizontalCut[h_idx] * v_segments\n                h_segments += 1\n                h_idx += 1\n            else:\n                total_expense += verticalCut[v_idx] * h_segments\n                v_segments += 1\n                v_idx += 1\n        \n        # Add the remaining horizontal cuts\n        while h_idx < len(horizontalCut):\n            total_expense += horizontalCut[h_idx] * v_segments\n            h_idx += 1\n        \n        # Add the remaining vertical cuts\n        while v_idx < len(verticalCut):\n            total_expense += verticalCut[v_idx] * h_segments\n            v_idx += 1\n        \n        return total_expense\n",
    "submit_ts": "1720926108",
    "subm_id": "1320276247"
}