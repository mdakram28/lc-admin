{
    "username": "nguyen_tu",
    "submission": "from sortedcontainers import SortedSet\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n\n        cur_peaks = SortedSet()\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                cur_peaks.add(i)\n        # print('cur_peaks ::', cur_peaks, nums)\n\n        res = []\n        for query in queries:\n            if query[0] == 2:\n                t, idx, val = query\n#                 if nums[idx] > val: # check if reduced in value\n#                     if idx in cur_peaks and not nums[idx - 1] < nums[idx] > nums[idx + 1]:\n#                         print('removing')\n#                         cur_peaks.remove(idx)\n                        \n#                     if idx > 1 and nums[idx - 2] < nums[idx - 1] > nums[idx]:\n#                         cur_peaks.add(idx - 1)\n#                     if idx < n - 2 and nums[idx] < nums[idx + 1] > nums[idx + 2]:\n#                         cur_peaks.add(idx + 1)\n\n                nums[idx] = val\n\n                if 0 < idx < n - 1 and nums[idx - 1] < nums[idx] > nums[idx + 1]: cur_peaks.add(idx)\n                else: cur_peaks.discard(idx)\n\n                if idx > 1 and nums[idx - 2] < nums[idx - 1] > nums[idx]: cur_peaks.add(idx - 1)\n                else: cur_peaks.discard(idx - 1)\n\n                if idx < n - 2 and nums[idx] < nums[idx + 1] > nums[idx + 2]: cur_peaks.add(idx + 1)\n                else: cur_peaks.discard(idx + 1)\n                # print('cur_peaks ::', cur_peaks, nums)\n            elif query[0] == 1:\n                t, l, r = query\n                # print('searching...', l, r, cur_peaks)\n                index_l = cur_peaks.bisect_right(l)\n                index_r = cur_peaks.bisect_left(r)\n                cnt = index_r - index_l\n                res.append(cnt if cnt > 0 else 0)\n        return res\n",
    "submit_ts": 1718509199.0
}