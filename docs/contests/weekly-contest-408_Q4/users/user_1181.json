{
    "username": "birds3345",
    "submission": "class Solution {\npublic:\n    void solve(int i, unordered_map<int, pair<vector<int>, vector<int>>>& collisions, unordered_set<int>& v, unordered_set<int>& walls)\n    {\n        v.insert(i);\n        for (int wall: collisions[i].second)\n            walls.insert(wall);\n        for (int j: collisions[i].first)\n            if (!v.contains(j))\n                solve(j, collisions, v, walls);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        unordered_map<int, pair<vector<int>, vector<int>>> collisions;\n        for (int i = 0; i < circles.size(); i++)\n        {\n            for (int j = i + 1; j < circles.size(); j++)\n            {\n                long long dx = circles[i][0] - circles[j][0];\n                long long dy = circles[i][1] - circles[j][1];\n                long long distance = dx * dx + dy * dy;\n                long long threshold = circles[i][2] + circles[j][2];\n                \n                if (distance <= threshold * threshold)\n                {\n                    collisions[i].first.push_back(j);\n                    collisions[j].first.push_back(i);\n                }\n            }\n            \n            if ((long long)circles[i][0] - circles[i][2] <= 0)\n                collisions[i].second.push_back(3);\n            if ((long long)circles[i][0] + circles[i][2] >= X)\n                collisions[i].second.push_back(1);\n            if ((long long)circles[i][1] - circles[i][2] <= 0)\n                collisions[i].second.push_back(4);\n            if ((long long)circles[i][1] + circles[i][2] >= Y)\n                collisions[i].second.push_back(2);\n        }\n        \n        unordered_set<int> visited;\n        for (int i = 0; i < circles.size(); i++)\n        {\n            if (visited.contains(i))\n                continue;\n            unordered_set<int> walls;\n            visited.insert(i);\n            solve(i, collisions, visited, walls);\n            \n            if (walls.contains(1) && walls.contains(3))\n                return false;\n            if (walls.contains(2) && walls.contains(4))\n                return false;\n            if (walls.contains(1) && walls.contains(2))\n                return false;\n            if (walls.contains(3) && walls.contains(4))\n                return false;\n        }\n        \n        return true;\n    }\n};",
    "submit_ts": "1722138207",
    "subm_id": "1335784914"
}