{
    "username": "BaoziiO_o",
    "submission": "type SparseTable struct {\n\tfunc_ func(int, int) int\n\tst    [][]int\n}\n\n// NewSparseTable initializes and returns a new SparseTable\nfunc NewSparseTable(nums []int, function func(int, int) int) *SparseTable {\n\tst := [][]int{nums}\n\tn := len(nums)\n\ti := 1\n\tfor (i << 1) <= n {\n\t\tpre := st[len(st)-1]\n\t\tnext := make([]int, n-(i<<1)+1)\n\t\tfor j := 0; j < len(next); j++ {\n\t\t\tnext[j] = function(pre[j], pre[j+i])\n\t\t}\n\t\tst = append(st, next)\n\t\ti <<= 1\n\t}\n\treturn &SparseTable{func_: function, st: st}\n}\n\n// Query performs a range query on the sparse table\nfunc (st *SparseTable) Query(begin, end int) int {\n\tlg := int(math.Log2(float64(end-begin+1)))\n\treturn st.func_(st.st[lg][begin], st.st[lg][end-(1<<lg)+1])\n}\n\n\nfunc countSubarrays(nums []int, k int) int64 {\n\tfuncAnd := func(a, b int) int { return a & b }\n\tst := NewSparseTable(nums, funcAnd)\n\tn := len(nums)\n\tans := 0\n\n\tfor i := 0; i < n; i++ {\n\t\tleft, right := i, n-1\n\t\tfor left <= right {\n\t\t\tmid := (left + right) / 2\n\t\t\tif st.Query(i, mid) <= k {\n\t\t\t\tright = mid - 1\n\t\t\t} else {\n\t\t\t\tleft = mid + 1\n\t\t\t}\n\t\t}\n\t\tl := left\n\n\t\tleft, right = i, n-1\n\t\tfor left <= right {\n\t\t\tmid := (left + right) / 2\n\t\t\tif st.Query(i, mid) <= k-1 {\n\t\t\t\tright = mid - 1\n\t\t\t} else {\n\t\t\t\tleft = mid + 1\n\t\t\t}\n\t\t}\n\t\tr := right\n\n\t\tans += r - l + 1\n\t}\n\n\treturn int64(ans)\n}\n",
    "submit_ts": "1720278729",
    "subm_id": "1311721721"
}