{
    "username": "sgn00",
    "submission": "class Solution {\npublic:\n    \n    int HORIZONTAL = 1;\n    int VERTICAL = -1;\n    \n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int,int>> cuts;\n        for (int h : horizontalCut) {\n            cuts.push_back({h, HORIZONTAL});\n        }\n        for (int v : verticalCut) {\n            cuts.push_back({v, VERTICAL});\n        }\n        \n        sort(cuts.begin(), cuts.end(), greater<pair<int,int>>());\n        // most expensive cuts first\n        int num_pieces = 0;\n        long long cost = 0;\n        // if cut vertical, hor_pieces + 1\n        // if cut horizontal, ver_pieces + 1\n        int ver_pieces = 1;\n        int hor_pieces = 1;\n        for (auto& p : cuts) {\n            if (p.second == HORIZONTAL) {\n                cost += p.first * hor_pieces;\n                ver_pieces++;\n            } else {\n                cost += p.first * ver_pieces;\n                hor_pieces++;\n            }\n        }\n        return cost;\n    }\n};",
    "submit_ts": "1720925531",
    "subm_id": "1320257785"
}