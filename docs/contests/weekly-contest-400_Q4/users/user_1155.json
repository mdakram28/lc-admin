{
    "username": "wxy9018",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        #binn = [bin(n) for n in nums]\n        #print(binn)\n        \n        cnt = [0] * 32\n        \n        res = 1 << 32\n        \n        p = 0\n        n = (1 << 32) - 1\n        for q in range(len(nums)):\n            n = n & nums[q]\n            for i in range(32):\n                if (1 << i) & nums[q]: # this bit has 1\n                    cnt[i] += 1\n            \n            res = min(res, abs(k-n))\n            #print(q, n, bin(n), cnt)\n            \n            while p < q and n <= k:\n                for i in range(32):\n                    if (1 << i) & nums[p]: # this bit has 1\n                        cnt[i] -= 1\n                    elif cnt[i] == (q-p):\n                        n = n + (1 << i)\n                \n                res = min(res, abs(k - n))\n                p += 1\n            \n                #print(p, q, n, bin(n), res, cnt)\n                \n            res = min(res, abs(k-n))\n                \n        res = min(res, abs(k-n))\n        \n        return res\n                \n            \n        \"\"\"\n        \n        minn = 0\n\n        n = 0\n        for i in range(11):\n            if cnt[i] > 0:\n                n = n | (1 << i)\n        minn = max(minn, n)\n\n        for q in range(lenn, len(nums)):\n            # remove nums[q-lenn], add nums[q]\n            p = q - lenn\n            for i in range(11):\n                if (1 << i) & nums[p]:\n                    cnt[i] -= 1\n                if (1 << i) & nums[q]:\n                    cnt[i] += 1\n            n = 0\n            for i in range(11):\n                if cnt[i] > 0:\n                    n = n | (1 << i)\n            minn = max(minn, n)\n            \n            return minn\n                    \n            \n        # search for the shortest subarray that after AND is still smaller than k\n        low, high = 1, len(nums)\n        while low < high:\n            mid = (low + high) // 2\n            if arr_and(mid) < k:\n                high = mid\n            else:\n                low = mid + 1\n        \n        print(low)\n        \n        buff1 = arr_and(low)\n        buff2 = arr_and(low-1) if low > 0 else buff1\n        \n        print(buff1, buff2)\n        \n        print(arr_and(1), arr_and(2), arr_and(3), arr_and(4))\n        \n        return min(abs(k - buff1), abs(k-buff2))\n        \"\"\"",
    "submit_ts": "1717299799",
    "subm_id": "1274824253"
}