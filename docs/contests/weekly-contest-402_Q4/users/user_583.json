{
    "username": "GaoYusong",
    "submission": "#ifdef ONLINE_JUDGE\n#include \"cp/debug.h\"\n#else\n#define debug(...)\n#define debugArr(...)\n#endif\n\ntemplate<typename T>\nclass SegmentTree {\npublic:\n    SegmentTree(const std::vector<T>& data, std::function<T(const T&, const T&)> combine) : combine_(combine) {\n        n_ = data.size();\n        tree_.resize(4 * n_);\n        build(data, 1, 0, n_ - 1);\n    }\n\n    void update(int pos, const T& val, int v = 1, int tl = 0, int tr = -1) {\n        if (tr == -1) {\n            tr = n_ - 1;\n        }\n\n        if (tl == tr) {\n            tree_[v] = val;\n        } else {\n            int tm = tl + (tr - tl) / 2;\n            if (pos <= tm) {\n                update(pos, val, v * 2, tl, tm);\n            } else {\n                update(pos, val, v * 2 + 1, tm + 1, tr);\n            }\n            tree_[v] = combine_(tree_[v * 2], tree_[v * 2 + 1]);\n        }\n    }\n\n    T query(int l, int r, int v = 1, int tl = 0, int tr = -1) {\n        if (tr == -1) {\n            tr = n_ - 1;\n        }\n\n        if (l <= tl && tr <= r) {\n            return tree_[v];\n        } else {\n            int tm = tl + (tr - tl) / 2;\n            if (r <= tm) {\n                return query(l, r, v * 2, tl, tm);\n            } else if (l > tm) {\n                return query(l, r, v * 2 + 1, tm + 1, tr);\n            } else {\n                return combine_(query(l, r, v * 2, tl, tm), query(l, r, v * 2 + 1, tm + 1, tr));\n            }\n\n        }\n    }\n        \n\n\n    int n_;\n    std::vector<T> tree_;\n    std::function<T(const T&, const T&)> combine_;\n\n    void build(const std::vector<T>& data, int v, int tl, int tr) {\n        if (tl == tr) {\n            tree_[v] = data[tl];                      \n        } else {\n            int tm = tl + (tr - tl) / 2;\n            build(data, v * 2, tl, tm);\n            build(data, v * 2 + 1, tm + 1, tr);\n            tree_[v] = combine_(tree_[v * 2], tree_[v * 2 + 1]);\n        }\n    }\n};\n\n\nclass Solution {\npublic:\n    typedef array<int, 5> T;\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<T> data(n);\n        \n        for (int i = 0; i < n; i++) {\n            data[i] = {0, nums[i], INT_MAX, INT_MAX, nums[i]};\n        }\n        \n        SegmentTree<T> st(data, [](const T &a, const T &b) -> T { \n                T res;\n                res[0] = a[0] + b[0];\n                \n                if (a[4] != INT_MAX && a[4] > a[3] && a[4] > b[1]) {\n                    res[0]++;\n                }\n                if (b[1] != INT_MAX && b[1] > b[2] && b[1] > a[4]) {\n                    res[0]++;\n                }\n                \n                res[1] = a[1];\n                if (a[2] != INT_MAX) {\n                    res[2] = a[2];\n                } else {\n                    res[2] = b[1];\n                }\n                if (b[3] != INT_MAX) {\n                    res[3] = b[3];\n                } else {\n                    res[3] = a[4];\n                }\n                res[4] = b[4];\n                return res;\n        });\n        \n        debug(st.tree_);\n        \n        vector<int> ans;\n        \n        for (auto q : queries) {\n            if (q[0] == 2) {\n                st.update(q[1], {0, q[2], INT_MAX, INT_MAX, q[2]});\n                debug(st.tree_);\n            } else {\n                ans.push_back(st.query(q[1], q[2])[0]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508268.0
}