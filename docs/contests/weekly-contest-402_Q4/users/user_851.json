{
    "username": "DARKcryptic",
    "submission": "class Solution {\npublic:\n    class Tester {\n    public:\n        Tester(int n) : plant(n + 1, 0) {}\n\n        void luci1(int i, int flag) {\n            for (++i; i < plant.size(); i += i & -i)\n                plant[i] += flag;\n        }\n\n        int query(int i) const {\n            int sum = 0;\n            for (++i; i > 0; i -= i & -i)\n                sum += plant[i];\n            return sum;\n        }\n\n        int rangeQuery(int l, int r) const {\n            return query(r) - query(l - 1);\n        }\n\n    private:\n        vector<int> plant;\n    };\n\n    vector<int> nums;\n    vector<int> kohli;\n    int n;\n    \n    bool isPeak(int idx) {\n        if (idx == 0 || idx == n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n    \n    void luci1(int check2, int start, int end, int it) {\n        if (start == end) {\n            kohli[check2] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (it <= mid) {\n                luci1(2 * check2 + 1, start, mid, it);\n            } else {\n                luci1(2 * check2 + 2, mid + 1, end, it);\n            }\n            kohli[check2] = kohli[2 * check2 + 1] + kohli[2 * check2 + 2];\n        }\n    }\n\n    void luci2(int check2, int start, int end) {\n        if (start == end) {\n            kohli[check2] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            luci2(2 * check2 + 1, start, mid);\n            luci2(2 * check2 + 2, mid + 1, end);\n            kohli[check2] = kohli[2 * check2 + 1] + kohli[2 * check2 + 2];\n        }\n    }\n\n    int luci2(int check2, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return kohli[check2];\n        }\n        int mid = (start + end) / 2;\n        int lS = luci2(2 * check2 + 1, start, mid, l, r);\n        int rS = luci2(2 * check2 + 2, mid + 1, end, l, r);\n        return lS + rS;\n    }\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& checks) {\n        int n = nums.size();\n        Tester tester(n);\n        vector<int> output;\n        vector<bool> isPeak(n, false);\n\n        auto fixer = [&](int i) {\n            bool wasPeak = isPeak[i];\n            isPeak[i] = (i > 0 && i < n - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n            if (isPeak[i] != wasPeak) {\n                tester.luci1(i, isPeak[i] ? 1 : -1);\n            }\n        };\n\n        for (int i = 1; i < n - 1; ++i) {\n            fixer(i);\n        }\n\n        for (const auto& check1 : checks) {\n            if (check1[0] == 1) {\n                int l = check1[1], r = check1[2];\n                if (l == r || l + 1 == r) {\n                    output.push_back(0);\n                } else {\n                    output.push_back(tester.rangeQuery(l + 1, r - 1));\n                }\n            } else if (check1[0] == 2) {\n                int it = check1[1], val = check1[2];\n                nums[it] = val;\n                for (int i = max(1, it - 1); i <= min(n - 2, it + 1); ++i) {\n                    fixer(i);\n                }\n            }\n        }\n\n        return output;\n    }\n};\n",
    "submit_ts": 1718508778.0
}