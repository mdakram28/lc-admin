{
    "username": "adarshn000",
    "submission": "\nclass Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\npublic:\n    int function(int num)\n    {\n        return num;\n    }\n    \n    string func2(string text)\n    {\n        return text;\n    }\n    void timepass()\n    {\n        cout<<\"hey\"   ;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        \n        unordered_map<int, int> reqMap;\n        for (vector<int>& req : reqs) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n        cout<<func2(\"hello\");\n        \n        long long result = 0;\n        \n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n\n        int answer = static_cast<int>(result);\n        cout<<endl;\n        timepass();\n        return function(answer);\n    }\n};",
    "submit_ts": 1719070859.0
}