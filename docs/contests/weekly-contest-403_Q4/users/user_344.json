{
    "username": "kzllwg",
    "submission": "import numpy as np\nclass Solution:\n    area = None\n    def minimumArea_one(self, row_sta, row_end, col_sta, col_end) -> int:\n        grid = self.area\n        max_col, max_row = -1, -1\n        min_col, min_row = 1e9, 1e9\n        for i in range(row_sta, row_end):\n            for j in range(col_sta, col_end):\n                if grid[i][j] == 1:\n                    max_col = max(max_col, j)\n                    max_row = max(max_row, i)\n                    min_col = min(min_col, j)\n                    min_row = min(min_row, i)\n        col_ans = max_col - min_col + 1\n        row_ans = max_row - min_row + 1\n        if max_col == -1: return 0\n        return col_ans * row_ans\n    \n    def minimumArea_two(self, row_sta, row_end, col_sta, col_end):\n        ans = 1e9\n        for i in range(row_sta, row_end):\n            tmp_ans1 = self.minimumArea_one(row_sta, i+1,col_sta, col_end)\n            tmp_ans2 = self.minimumArea_one(i+1, row_end,col_sta, col_end)\n            # print(i, tmp_ans1, tmp_ans2)\n            ans = min(ans, tmp_ans1 + tmp_ans2)\n        for j in range(col_sta, col_end):\n            tmp_ans1 = self.minimumArea_one(row_sta, row_end, col_sta, j+1)\n            tmp_ans2 = self.minimumArea_one(row_sta, row_end, j+1, col_end)\n            # print(j, tmp_ans1, tmp_ans2)\n            ans = min(ans, tmp_ans1 + tmp_ans2)\n        return ans\n\n    def get_sum(self, row_sta, row_end, col_sta, col_end):\n        grid = self.area\n        ans = 0\n        for i in range(row_sta, row_end):\n            for j in range(col_sta, col_end):\n                ans += grid[i][j]\n        return ans\n\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        row_num = len(grid)\n        col_num = len(grid[0])\n        self.area = grid\n        one_ans = 1e9\n        for i in range(row_num):\n            for j in range(col_num):\n                if True:\n                    tmp_ans1 = self.minimumArea_one(0,i+1,0,j+1)\n                    if self.get_sum(i+1, row_num, 0, j+1) == 0:\n                        remain_ans = self.minimumArea_two(0, row_num, j+1, col_num)\n                        # print('one: ', remain_ans)\n                    elif self.get_sum(0, i+1, j+1, col_num) == 0:\n                        remain_ans = self.minimumArea_two(i+1, row_num, 0, col_num)\n                        # print('two: ', remain_ans)\n                    else:\n                        tmp_ans2 = self.minimumArea_one(0,i+1,j+1,col_num)\n                        tmp_ans3 = self.minimumArea_one(i+1, row_num,0,col_num)\n\n                        tmp_ans4 = self.minimumArea_one(i+1, row_num, 0, j+1)\n                        tmp_ans5 = self.minimumArea_one(0, row_num, j+1, col_num)\n                        # print('tmp_ans: ', tmp_ans2, tmp_ans3, tmp_ans4, tmp_ans5)\n                        remain_ans = min(tmp_ans2+tmp_ans3, tmp_ans4 +tmp_ans5)\n                    one_ans = min(one_ans, tmp_ans1 + remain_ans)\n                    # print(i, j, tmp_ans1, remain_ans)\n        return one_ans\n                         \n",
    "submit_ts": "1719114195",
    "subm_id": "541400825"
}