{
    "username": "hao-shou-bu-juan",
    "submission": "\n# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\n\n# \u66fc\u54c8\u987f\u8f6c\u8f66\u6bd4\u96ea\u592b\ndef M2H(arr: List):\n    return [(x+y, x-y) for x, y in arr]\n\n\nINF = 10**12\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        arr = M2H(points)\n\n\n        def solve(A: List):\n            mn_x, mn_y = INF, INF\n            mx_x, mx_y = -INF, -INF\n            for x, y in A:\n                mn_x = min(mn_x, x)\n                mx_x = max(mx_x, x)\n                mn_y = min(mn_y, y)\n                mx_y = max(mx_y, y)\n\n            return max( mx_x-mn_x, mx_y-mn_y )\n\n\n        ans = INF\n        n = len(arr)\n\n        arr.sort(key=lambda x : x[0])\n        ans = min(ans, solve(arr[1:]))\n        ans = min(ans, solve(arr[0:n-1]))\n\n\n        arr.sort(key=lambda  x : x[1])\n        ans = min(ans, solve(arr[1:]))\n        ans = min(ans, solve(arr[0:n - 1]))\n\n        return ans"
}