{
    "username": "sahilgupta66",
    "submission": "class Solution {\npublic:\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> m;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* i = root;\n        for (char c : word) {\n            if (i->m.find(c) != i->m.end()) {\n                i =i->m[c];\n            }\n            else{\n                i->m[c] = new TrieNode();\n                i =i->m[c];\n            }\n        }\n        i->cost = min(i->cost, cost);\n    }\n};\n\n    int minimumCost(string s, vector<string>& v, vector<int>& co) {\n        int n = s.size();\n        Trie trie;\n        for (int i = 0; i < v.size(); ++i) {\n            trie.insert(v[i], co[i]);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* y = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (y->m.find(s[j]) == y->m.end()) break;\n                y = y->m[s[j]];\n                if (y->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + y->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322477",
    "subm_id": "1312350961"
}