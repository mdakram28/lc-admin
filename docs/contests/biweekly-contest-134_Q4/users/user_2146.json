{
    "username": "ritesh_rg",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n    //     int count = 0;\n    //     int n = nums.size();\n\n    //     for (int i = 0; i < n; ++i) \n    //     {\n    //         int currentAnd = nums[i];\n        \n    //         if (currentAnd == k) \n    //         {\n    //             ++count;\n    //         }\n        \n    //         for (int j = i + 1; j < n; ++j) \n    //         {\n    //             currentAnd &= nums[j];\n    //             if (currentAnd == k) \n    //             {\n    //                 ++count;\n    //             }\n    //             if (currentAnd < k) \n    //             {\n    //                 break;\n    //             }\n    //         }\n    //     }\n    // return count;\n    // }\n    long long count = 0;\n    std::unordered_map<int, int> currentAnds;\n    \n    for (int num : nums) \n    {\n        std::unordered_map<int, int> newAnds;\n        \n        if (num == k) {\n            ++count;\n        }\n        newAnds[num]++;\n        \n        for (auto& [value, freq] : currentAnds) {\n            int newAnd = value & num;\n            if (newAnd == k) {\n                count += freq;\n            }\n            newAnds[newAnd] += freq;\n        }\n        \n        currentAnds = std::move(newAnds);\n    }\n\n    return count;\n    }\n};",
    "submit_ts": "1720279017",
    "subm_id": "1311733793"
}