{
    "username": "code_1616",
    "submission": "// class Solution {\n// public:\n//     int Palindrome(vector<vector<int>>& grid, int rows) {\n//         int m = grid.size();\n//         int n = grid[0].size();\n//         int flips = 0;\n\n//         if (rows) {\n//             for (int i = 0; i < m; ++i) {\n//                 int start = 0, end = n - 1;\n//                 while (start < end) {\n//                     if (grid[i][start] != grid[i][end]) {\n//                         flips++;\n//                     }\n//                     start++;\n//                     end--;\n//                 }\n//             }\n//         } else {\n//             for (int i = 0; i < n; ++i) {\n//                 int start = 0, end = m - 1;\n//                 while (start < end) {\n//                     if (grid[start][i] != grid[end][i]) {\n//                         flips++;\n//                     }\n//                     start++;\n//                     end--;\n//                 }\n//             }\n//         }\n\n//         return flips;\n//     }\n\n//     int countOnes(vector<vector<int>>& grid) {\n//         int count = 0;\n//         for (const auto& row : grid) {\n//             for (int cell : row) {\n//                 if (cell == 1) {\n//                     count++;\n//                 }\n//             }\n//         }\n//         return count;\n//     }\n\n//     int minFlips(vector<vector<int>>& grid) {\n//         int rowFlips = Palindrome(grid, 1);\n//         int colFlips = Palindrome(grid, 0);\n//         int flips = min(rowFlips, colFlips);\n\n//         int onesCount = countOnes(grid);\n//         int remainder = onesCount % 4;\n\n//         if (remainder != 0) {\n//             flips += (4 - remainder);\n//         }\n\n//         return flips;\n//     }\n// };\n\n#include <algorithm>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int rowCount = matrix.size();\n        int colCount = matrix[0].size();\n        int minFlips = 0;\n        if (rowCount % 2 == 1 && colCount % 2 == 1) {\n            minFlips += adjustCenter(matrix, rowCount, colCount);\n        }\n        minFlips += calculateRowColumnFlips(matrix, rowCount, colCount);\n        minFlips += calculateSubgridFlips(matrix, rowCount, colCount);\n        return minFlips;\n    }\n\nprivate:\n    int adjustCenter(vector<vector<int>>& matrix, int rowCount, int colCount) {\n        int flips = 0;\n        if (matrix[rowCount / 2][colCount / 2] == 1) {\n            flips += 1;\n        }\n        return flips;\n    }\n    int calculateRowColumnFlips(vector<vector<int>>& matrix, int rowCount,\n                                int colCount) {\n        vector<int> count(3, 0);\n        int flips = 0;\n        if (rowCount % 2 == 1) {\n            flips += processMiddleRow(matrix, rowCount, colCount, count);\n        }\n        if (colCount % 2 == 1) {\n            flips += processMiddleColumn(matrix, rowCount, colCount, count);\n        }\n        if (count[2] % 2 == 1) {\n            if (count[1] > 0) {\n                flips += count[1];\n            } else {\n                flips += 2;\n            }\n        } else {\n            flips += count[1];\n        }\n\n        return flips;\n    }\n    int processMiddleRow(vector<vector<int>>& matrix, int rowCount,\n                         int colCount, vector<int>& count) {\n        int flips = 0;\n        int left = 0, right = colCount - 1;\n        while (left < right) {\n            int sum = matrix[rowCount / 2][left] + matrix[rowCount / 2][right];\n            count[sum] += 1;\n            left++;\n            right--;\n        }\n        return flips;\n    }\n    int processMiddleColumn(vector<vector<int>>& matrix, int rowCount,\n                            int colCount, vector<int>& count) {\n        int flips = 0;\n        int top = 0, bottom = rowCount - 1;\n        while (top < bottom) {\n            int sum = matrix[top][colCount / 2] + matrix[bottom][colCount / 2];\n            count[sum] += 1;\n            top++;\n            bottom--;\n        }\n        return flips;\n    }\n\n    int calculateSubgridFlips(vector<vector<int>>& matrix, int rowCount,\n                              int colCount) {\n        int flips = 0;\n        for (int i = 0; i < rowCount / 2; ++i) {\n            for (int j = 0; j < colCount / 2; ++j) {\n                int topLeft = matrix[i][j];\n                int bottomLeft = matrix[rowCount - 1 - i][j];\n                int topRight = matrix[i][colCount - 1 - j];\n                int bottomRight = matrix[rowCount - 1 - i][colCount - 1 - j];\n                int sum = topLeft + bottomLeft + topRight + bottomRight;\n                if (sum != 0 && sum != 4) {\n                    flips += min(sum, 4 - sum);\n                }\n            }\n        }\n        return flips;\n    }\n};\n",
    "submit_ts": "1722700390",
    "subm_id": "1343240421"
}