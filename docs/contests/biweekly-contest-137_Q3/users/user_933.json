{
    "username": "AndyLead",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector<vector<long long>> maxUp(n, vector<long long>(m));\n        for(int col = 0; col < m; col++) maxUp[0][col] = board[0][col];\n        for(int row = 1; row < n; row++)\n            for(int col = 0; col < m; col++)\n                maxUp[row][col] = max((long long)board[row][col], maxUp[row - 1][col]);\n\n        vector<vector<pair<long long, int>>> twoRooks(n, vector<pair<long long, int>>(m));\n        for(int row = 1; row < n; row++) {\n            int prevMax = 0;\n            for(int i = 1; i < m; i++) if(maxUp[row-1][i] > maxUp[row-1][prevMax]) prevMax = i;\n            int secondMax = (prevMax + 1) % m;\n            for(int i = 0; i < m; i++) if(i != prevMax) if(maxUp[row-1][i] > maxUp[row-1][secondMax]) secondMax = i;\n\n            for(int col = 0; col < m; col++) {\n                if(col != prevMax) twoRooks[row][col] = {board[row][col] + maxUp[row-1][prevMax], prevMax};\n                else twoRooks[row][col] = {board[row][col] + maxUp[row-1][secondMax], secondMax};\n                if(row > 1) twoRooks[row][col] = max(twoRooks[row-1][col], twoRooks[row][col]);\n            }\n        }\n\n        vector<vector<vector<long long>>> notUsed(m, vector<vector<long long>>(n, vector<long long>(m)));\n        for(int unused = 0; unused < m; unused++)\n            for(int row = 1; row < n; row++) {\n                int prevMax = (unused + 1) % m;\n                for(int i = 0; i < m; i++) if(i != unused) if(maxUp[row-1][i] > maxUp[row-1][prevMax]) prevMax = i;\n                int secondMax = (prevMax + 1) % m;\n                if(secondMax == unused) secondMax = (secondMax + 1) % m;\n                for(int i = 0; i < m; i++) if(i != unused) if(i != prevMax) if(maxUp[row-1][i] > maxUp[row-1][secondMax]) secondMax = i;\n\n                for(int col = 0; col < m; col++) if(col != unused) {\n                    if(col != prevMax) notUsed[unused][row][col] = board[row][col] + maxUp[row-1][prevMax];\n                    else notUsed[unused][row][col] = board[row][col] + maxUp[row-1][secondMax];\n                    if(row > 1) notUsed[unused][row][col] = max(notUsed[unused][row - 1][col], notUsed[unused][row][col]);\n                }\n                \n                long long best = LLONG_MIN;\n                for(int col = 0; col < m; col++) if(col != unused) best = max(best, notUsed[unused][row][col]);\n                notUsed[unused][row][unused] = best;\n            }\n\n        vector<vector<long long>> threeRooks(n, vector<long long>(m));\n        for(int row = 2; row < n; row++) {\n            int prevMax = 0;\n            for(int i = 1; i < m; i++) if(twoRooks[row-1][i].first > twoRooks[row-1][prevMax].first) prevMax = i;\n            int otherMax = twoRooks[row-1][prevMax].second;\n\n            for(int col = 0; col < m; col++) {\n                threeRooks[row][col] = board[row][col];\n                if(col != prevMax and col != otherMax) {\n                    threeRooks[row][col] += twoRooks[row-1][prevMax].first;\n                } else {\n                    threeRooks[row][col] += notUsed[col][row-1][col];\n                }\n                if(row > 2) threeRooks[row][col] = max(threeRooks[row-1][col], threeRooks[row][col]);\n            }\n        }\n\n        long long result = LLONG_MIN;\n        for(int row = 2; row < n; row++)\n            for(int col = 0; col < m; col++) result = max(result, threeRooks[row][col]);\n        return result;\n    }\n};",
    "submit_ts": "1723910119",
    "subm_id": "1359218109"
}