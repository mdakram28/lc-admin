{
    "username": "waster",
    "submission": "class Trie {\npublic:\n    Trie* next[26] = {nullptr};\n    vector<pair<int, int>> is_word;\n    Trie() {}\n};\nclass Solution {\npublic:\n    void add(Trie* curr, string &word, int i, int cost) {\n        for (char &c : word) {\n            if (!curr->next[c-'a']) {\n                curr->next[c-'a'] = new Trie();\n            }\n            curr = curr->next[c-'a'];\n        }\n        curr->is_word.push_back({i, cost});\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie *trie = new Trie();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for(int i = 0; i < words.size(); i++){\n            add(trie, words[i], i, costs[i]);\n        }\n        for(int i = 0; i < n; i++){\n            if(dp[i] != INT_MAX){\n                Trie *curr = trie;\n                for(int j = i; j < n; j++){\n                    if(!curr->next[target[j]-'a'])\n                        break;\n                    curr = curr->next[target[j]-'a'];\n                    for(auto &[k, v]: curr->is_word){\n                        int sz = words[k].size();\n                        if (i + sz <= n) {\n                            dp[i + sz] = min(dp[i + sz], dp[i] + v);\n                        }\n                    }\n                }\n            }\n            //cout << dp[i] << endl;\n        }\n        return dp[n] != INT_MAX? dp[n]: -1;\n    }\n};",
    "submit_ts": "1720324749",
    "subm_id": "1312407165"
}