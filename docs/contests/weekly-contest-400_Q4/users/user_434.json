{
    "username": "dharavivek",
    "submission": "class Solution {\n    public class ST{\n        int arr[];\n        int size;\n        public ST(int ar[], int n){\n            this.arr = new int[4*n];\n            this.size = n;\n            build(ar, 0, 0, n-1);\n        }\n        public void build(int ar[], int curr, int st, int en){\n            if(st == en){\n                this.arr[curr] = ar[st];\n            }else{\n                int mid = st + (en-st)/2;\n                build(ar, 2*curr+1, st, mid);\n                build(ar, 2*curr+2, mid+1, en);\n                this.arr[curr] = this.arr[2*curr+1] & this.arr[2*curr+2];\n            }\n        }\n        public int solve(int curr, int st, int en, int low, int high){\n            if(high < st || en < low) return Integer.MAX_VALUE;\n            if(low <= st && en <= high) return this.arr[curr];\n            int mid = st + (en - st)/2;\n            return (solve(2*curr+2, mid+1, en, low, high) & solve(2*curr+1, st, mid, low, high));\n        }\n        public int solve(int low, int high){\n            return solve(0, 0, this.size-1, low, high);\n        }\n    }\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        int ans = Integer.MAX_VALUE;\n        ST tree = new ST(nums, n);\n        for(int i = 0; i < n; i++){\n            int low = i-1;\n            int high = n-1;\n            while(high > low + 1){\n                int mid = low + (high-low)/2;\n                if(tree.solve(i, mid) >= k){\n                    low = mid;\n                }else{\n                    high = mid;\n                }\n            }\n            if(low != i-1){\n                ans = Math.min(ans, Math.abs(tree.solve(i, low) - k));\n                ans = Math.min(ans, Math.abs(k-tree.solve(i, high)));\n            }else{\n                ans = Math.min(ans, Math.abs(k-tree.solve(i, high)));\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1717299051",
    "subm_id": "1274800165"
}