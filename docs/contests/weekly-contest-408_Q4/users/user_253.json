{
    "username": "blue_beaver_259",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def intersect(circle1, circle2):\n            x1, y1, r1 = circle1\n            x2, y2, r2 = circle2\n            dist2 = (x2 - x1) ** 2 + (y2 - y1) ** 2\n            r_sum2 = (r1 + r2) ** 2\n            r_diff2 = (r1 - r2) ** 2\n            return r_diff2 <= dist2 <= r_sum2\n        \n        '''def intersecty(circle, x2):\n            x, y, r = circle\n            if not x - r <= x2 <= x + r:\n                return False\n            vert = (r ** 2 - (x - x2) ** 2)\n            print(vert)\n            return (y - Y) ** 2 <= vert <= y ** 2 or y ** 2 <= vert <= (Y - y) ** 2\n        '''\n        def intersectX(circle, y2):\n            x, y, r = circle\n            if not (y - r <= y2 <= y + r):\n                return False\n            dy2 = (y - y2) ** 2\n            if dy2 > r ** 2:\n                return False\n            dx = sqrt(r ** 2 - dy2)\n            x_min, x_max = x - dx, x + dx\n            return x_min <= X and x_max >= 0\n\n        def intersecty(circle, x2):\n            x, y, r = circle\n            if not (x - r <= x2 <= x + r):\n                return False\n            dx2 = (x - x2) ** 2\n            if dx2 > r ** 2:\n                return False\n            dy = sqrt(r ** 2 - dx2)\n            y_min, y_max = y - dy, y + dy\n            return y_min <= Y and y_max >= 0\n\n        n = len(circles)\n\n        g = defaultdict(list)\n        q = deque()\n        for i in range(n):\n            for j in range(i):\n                if intersect(circles[i], circles[j]):\n                    g[i].append(j)\n                    g[j].append(i)\n            if intersecty(circles[i], 0) or intersectX(circles[i], Y):\n                q.append(i)\n\n        visited = set()\n        while q:\n            cur = q.popleft()\n            if cur in visited:\n                continue\n            if intersecty(circles[cur], X) or intersectX(circles[cur], 0):\n                return False\n            visited.add(cur)\n            for j in g[cur]:\n                q.append(j)\n        return True",
    "submit_ts": "1722136887",
    "subm_id": "1335747904"
}