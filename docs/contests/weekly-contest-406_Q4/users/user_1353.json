{
    "username": "swas07",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n                         if (m < 1 || n < 1) {\n            return 0;\n        }\n\n        // Sort cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        // Initialize variables\n        long long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        int hIndex = 0;\n        int vIndex = 0;\n\n        // Greedily select the minimum cost cut at each step\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] <= verticalCut[vIndex]) {\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            } else {\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            }\n        }\n\n        // Process remaining horizontal cuts, if any\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            horizontalPieces++;\n            hIndex++;\n        }\n\n        // Process remaining vertical cuts, if any\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            verticalPieces++;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924911",
    "subm_id": "1320235720"
}