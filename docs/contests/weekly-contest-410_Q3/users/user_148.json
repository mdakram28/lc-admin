{
    "username": "Albert_Zhang",
    "submission": "\"\"\" === Method 1. DP\n(1) When we determine array1, then array2 is also determined.\n(2) We can create an auxiliary array dp of size n * 51,\n    where dp[i][j] represents the number of ways until i, and the final\n    value of array1[i] is j.\n(3) recurrence relation:\n    dp[i][j] = SIGMA[k = 0..50] dp[i - 1][k], where j <= nums[i] and j >= k and nums[i] - j <= nums[i - 1] - k.\nO(n * 50^2) time | O(n * 50) space - where n is the length of nums\n\"\"\"\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n        ways = [[0 for _ in range(51)] for _ in range(n)]\n        # initialization\n        for j in range(nums[0] + 1):\n            ways[0][j] = 1\n        for i in range(1, n):\n            for j in range(51):\n                if j > nums[i]:\n                    break\n                for k in range(j + 1):\n                    if nums[i] - j > nums[i - 1] - k:\n                        continue\n                    ways[i][j] = (ways[i][j] + ways[i - 1][k]) % MOD\n        return sum(ways[-1]) % MOD\n\n\nMOD = 1000000007\n        ",
    "submit_ts": "1723344962",
    "subm_id": "1351545728"
}