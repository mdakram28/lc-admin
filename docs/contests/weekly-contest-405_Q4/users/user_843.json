{
    "username": "mayank_450718",
    "submission": "\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> childNodes;\n    int minCost;\n    \n    TrieNode() : minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* rootNode;\n    \n    Trie() {\n        rootNode = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* currentNode = rootNode;\n        for (char ch : word) {\n            if (!currentNode->childNodes.count(ch)) {\n                currentNode->childNodes[ch] = new TrieNode();\n            }\n            currentNode = currentNode->childNodes[ch];\n        }\n        currentNode->minCost = min(currentNode->minCost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string targetString, vector<string>& wordList, vector<int>& costList) {\n        int targetLength = targetString.size();\n        Trie trie;\n        for (int i = 0; i < wordList.size(); ++i) {\n            trie.insert(wordList[i], costList[i]);\n        }\n        \n        vector<int> minCosts(targetLength + 1, INT_MAX);\n        minCosts[0] = 0;\n        \n        for (int i = 0; i < targetLength; ++i) {\n            if (minCosts[i] == INT_MAX) continue;\n            TrieNode* currentNode = trie.rootNode;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->childNodes.count(targetString[j])) break;\n                currentNode = currentNode->childNodes[targetString[j]];\n                if (currentNode->minCost != INT_MAX) {\n                    minCosts[j + 1] = min(minCosts[j + 1], minCosts[i] + currentNode->minCost);\n                }\n            }\n        }\n        \n        return minCosts[targetLength] == INT_MAX ? -1 : minCosts[targetLength];\n    }\n};\n",
    "submit_ts": "1720322487",
    "subm_id": "1312351232"
}