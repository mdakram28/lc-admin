{
    "username": "fa45b216",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<int, int>> row(n - 1), col(m - 1);\n        for (int i = 0; i < n - 1; i ++) row[i] = {verticalCut[i], i};\n        for (int i = 0; i < m - 1; i ++) col[i] = {horizontalCut[i], i};\n\n        sort(row.begin(), row.end(), greater<pair<int, int>>());\n        sort(col.begin(), col.end(), greater<pair<int, int>>());\n\n        int c = 0, r = 0; \n\n        int i = 0, j = 0;\n        long long ans = 0;\n        for (;i < n - 1 && j < m - 1;)\n        {\n            int vi = row[i].first, vj = col[j].first;\n\n            if (vi <= vj)\n            {\n                ans += 1LL * vj * (i + 1);\n                j ++;\n            }\n            else\n            {\n                ans += 1LL * vi * (j + 1);\n                i ++;\n            }\n        }\n\n\n            while(j < m - 1)\n            {\n                ans += 1LL * col[j].first * (i + 1);\n                j ++;\n            }\n            while(i < n - 1)\n            {\n                ans += 1LL * row[i].first * (j + 1);\n                i ++;\n            }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720926227",
    "subm_id": "546444883"
}