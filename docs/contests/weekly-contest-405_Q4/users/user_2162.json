{
    "username": "Manish969",
    "submission": "class Solution {\npublic:\n    int mini=1e9;\n    int func(int ind, vector<string>&words, string &target, vector<int>&costs, string temp, long totcost)\n    {\n        \n        //base cases\n        if(temp.size()>=target.size())\n        {\n            if(temp==target)\n            {\n                if(mini > totcost)\n                    mini=totcost;\n                return 0;\n            }\n            else\n                return 1e9;\n        }\n        if(ind >= words.size())\n            return 1e9;\n        \n        int pick1 = func(ind+1, words, target, costs, temp+words[ind], totcost+costs[ind]);\n        int pick2 = func(ind+1, words, target, costs, words[ind]+temp, totcost+costs[ind]);\n        int notpick = func(ind+1, words, target, costs, temp, totcost);\n        \n        return min({pick1, pick2, notpick});\n    }\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        // func(0, words, target, costs, \"\", 0);\n        // if(mini==1e9)   return -1;\n        // return mini;\n        \n         int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j]]) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n",
    "submit_ts": "1720323258",
    "subm_id": "1312371215"
}