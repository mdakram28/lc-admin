{
    "username": "vominhtriet02",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int rows = grid.size(), columns = grid[0].size();\n        for(int i = 0; i < 30; ++i)\n            for(int j = 0; j < 30; ++j)\n                for(int x = 0; x < 30; ++x)\n                    for(int y = 0; y < 30; ++y)\n                        for(int cnt = 0; cnt < 4; ++cnt)\n                            dp[i][j][x][y][cnt] = -1;\n        \n        return dfs(grid, 0, rows-1, 0, columns-1, 3);\n    }\n    \n    int dfs(const vector<vector<int>>& grid, int up, int down, int left, int right, int count) {\n        if(dp[up][down][left][right][count] != -1) return dp[up][down][left][right][count];\n        \n        if(count == 1) return dp[up][down][left][right][count] = minimumArea(grid, up, down, left, right);\n                                                                  \n        int min_area = 1e9;\n        for(int i = up; i < down; ++i) {\n            if(count == 2) {\n                min_area = min(min_area, dfs(grid, up, i, left, right, 1) + \n                                         dfs(grid, i+1, down, left, right, 1));\n            } else {\n                min_area = min(min_area, dfs(grid, up, i, left, right, 1) + \n                                         dfs(grid, i+1, down, left, right, 2));\n                min_area = min(min_area, dfs(grid, up, i, left, right, 2) + \n                                         dfs(grid, i+1, down, left, right, 1));\n            }\n        }\n        \n        for(int j = left; j < right; ++j) {\n            if(count == 2) {\n                min_area = min(min_area, dfs(grid, up, down, left, j, 1) + \n                                         dfs(grid, up, down, j+1, right, 1));\n            } else {\n                min_area = min(min_area, dfs(grid, up, down, left, j, 1) + \n                                         dfs(grid, up, down, j+1, right, 2));\n                min_area = min(min_area, dfs(grid, up, down, left, j, 2) + \n                                         dfs(grid, up, down, j+1, right, 1));\n            }\n        }\n        \n        return dp[up][down][left][right][count] = min_area;\n    }\n    \n    int minimumArea(const vector<vector<int>>& grid, int up, int down, int left, int right) {\n        int min_x = 31, max_x = 0, min_y = 31, max_y = 0;\n        \n        for(int i = up; i <= down; ++i) {\n            for(int j = left; j <= right; ++j) {\n                if(grid[i][j] == 1) {\n                    min_x = min(min_x, j),\n                    max_x = max(max_x, j),\n                    min_y = min(min_y, i),\n                    max_y = max(max_y, i);\n                }\n            }\n        }\n        \n        return max(0, (max_x - min_x + 1) * (max_y - min_y + 1));\n    }\n\nprivate:\n    int dp[30][30][30][30][4];\n};",
    "submit_ts": 1719114243.0
}