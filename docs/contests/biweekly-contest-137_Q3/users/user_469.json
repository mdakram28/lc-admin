{
    "username": "GlowReverse",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        // transfer all the number into Cell\n        int m = board.length;\n        int n = board[0].length;\n        Cell[] array = new Cell[m * n];\n        for (int i = 0; i < board.length; i++) {\n            for (int j = 0; j < board[0].length; j++) {\n                array[i * n + j] = new Cell(board[i][j], i, j);\n            }\n        }\n\n        Arrays.sort(array, Collections.reverseOrder());\n        for (int i = 0; i < array.length; i++) {\n            array[i].setIndex(i);\n        }\n        PriorityQueue<Sum> maxHeap = new PriorityQueue<>(16, Collections.reverseOrder());\n        // initialize\n        maxHeap.offer(new Sum(array[0], array[1], array[2]));\n\n        while (!maxHeap.isEmpty()) {\n            Sum cur = maxHeap.poll();\n            if (isGood(cur.c1, cur.c2, cur.c3)) {\n                return cur.sum;\n            } else {\n                // generate\n                int index1 = cur.c1.index;\n                int index2 = cur.c2.index;\n                int index3 = cur.c3.index;\n                if (index3 + 1 < array.length) {\n                    maxHeap.offer(new Sum(array[index1], array[index2], array[index3 + 1]));\n                }\n                if (index2 + 1 != index3) {\n                    maxHeap.offer(new Sum(array[index1], array[index2 + 1], array[index3]));\n                }\n                if (index1 + 1 != index2) {\n                    maxHeap.offer(new Sum(array[index1 + 1], array[index2], array[index3]));\n                }\n            }\n        }\n\n        return (long)0;\n    }\n\n    class Cell implements Comparable<Cell> {\n        private int val;\n        private int row;\n        private int col;\n        private int index;\n\n        public Cell(int val, int row, int col) {\n            this.val = val;\n            this.row = row;\n            this.col = col;\n        }\n\n        public void setIndex(int index) {\n            this.index = index;\n        }\n\n        @Override\n        public int compareTo(Cell other) {\n            return Integer.compare(this.val, other.val);\n        }\n    }\n\n    class Sum implements Comparable<Sum> {\n        private long sum;\n        private Cell c1;\n        private Cell c2;\n        private Cell c3;\n\n        public Sum(Cell c1, Cell c2, Cell c3) {\n            this.c1 = c1;\n            this.c2 = c2;\n            this.c3 = c3;\n            sum = (long)c1.val + (long)c2.val + (long)c3.val;\n        }\n\n        @Override\n        public int compareTo(Sum other) {\n            return Long.compare(this.sum, other.sum);\n        }\n    }\n\n    private boolean isGood(Cell c1, Cell c2, Cell c3) {\n        if (c1.row == c2.row || c1. row == c3.row || c2.row == c3.row || \n        c1.col == c2.col || c1.col == c3.col || c2.col == c3.col) {\n            return false;\n        }\n        return true;\n    }\n}",
    "submit_ts": "1723909760",
    "subm_id": "1359204771"
}