{
    "username": "Vishnu_kumawat",
    "submission": "class Solution {\npublic:\n vector<int> shortestDistanceAfterQueries(int numCities, vector<vector<int>>& queries) {\n        vector<int> distances(numCities, 0);\n        for (int i = 1; i < numCities; ++i) {\n            distances[i] = distances[i - 1] + 1;\n        }\n\n        set<int> activeCities;\n        for (int i = 0; i < numCities; ++i) {\n            activeCities.insert(i);\n        }\n\n        vector<int> results;\n\n        for (const auto& query : queries) {\n            int start = query[0];\n            int end = query[1];\n\n            auto lowerBound = activeCities.lower_bound(start + 1);\n            auto upperBound = activeCities.lower_bound(end);\n\n            activeCities.erase(lowerBound, upperBound);\n\n            results.push_back(activeCities.size() - 1);\n        }\n\n        return results;\n    }\n\nprivate:\n    int bfs(int n, unordered_map<int, vector<int>>& mp) {\n        vector<int> d(n, INT_MAX);\n        queue<int> q;\n        q.push(0);\n        d[0] = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int x : mp[node]) {\n                if (d[x] > d[node] + 1) {\n                    d[x] = d[node] + 1;\n                    q.push(x);\n                }\n            }\n        }\n\n        return d[n - 1];\n    }\n};",
    "submit_ts": "1722743914",
    "subm_id": "1343802575"
}