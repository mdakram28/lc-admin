{
    "username": "valak_",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n        build(nums);\n    }\n\n    void build(const vector<int>& nums) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = nums[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n\n    int rangeAND(int left, int right) {\n        int result = INT_MAX;\n        left += n;\n        right += n + 1;\n        while (left < right) {\n            if (left & 1) result &= tree[left++];\n            if (right & 1) result &= tree[--right];\n            left >>= 1;\n            right >>= 1;\n        }\n        return result;\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n    int n = nums.size();\n    int ans = INT_MAX;\n    int bl = 0, br = 0;\n\n    SegmentTree segTree(nums);\n\n    for (int l = 0; l < n; ++l) {\n        int low = l, high = n - 1;\n        while (low <= high) {\n            int mid = low + (high - low) / 2;\n            int currAND = segTree.rangeAND(l, mid);\n            int currDiff = abs(k - currAND);\n\n            if (currDiff < ans) {\n                ans = currDiff;\n                bl = l;\n                br = mid;\n            }\n\n            if (currAND == k) {\n                return 0;\n            } else if (currAND > k) {\n                low = mid + 1;\n            } else {\n                high = mid - 1;\n            }\n        }\n    }\n\n    return ans;\n    }\n};",
    "submit_ts": 1717299070.0
}