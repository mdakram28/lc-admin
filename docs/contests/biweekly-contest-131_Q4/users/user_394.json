{
    "username": "Saksham_chaudhary_2002",
    "submission": "from typing import List, Tuple\nfrom bisect import bisect_left, bisect_right\nfrom sortedcontainers import SortedSet\n\nclass Solution:\n    def __init__(self):\n        self.segT = [0] * (5 * int(1e5))\n        \n    def build(self, s: int, e: int, i: int, a: List[int]):\n        if s == e:\n            self.segT[i] = a[s]\n            return\n        mid = s + (e - s) // 2\n        self.build(s, mid, 2 * i + 1, a)\n        self.build(mid + 1, e, 2 * i + 2, a)\n        self.segT[i] = max(self.segT[2 * i + 1], self.segT[2 * i + 2])\n    \n    def update(self, s: int, e: int, i: int, q: int, v: int):\n        if s == e:\n            self.segT[i] = v\n            return\n        mid = s + (e - s) // 2\n        if q <= mid:\n            self.update(s, mid, 2 * i + 1, q, v)\n        else:\n            self.update(mid + 1, e, 2 * i + 2, q, v)\n        self.segT[i] = max(self.segT[2 * i + 1], self.segT[2 * i + 2])\n    \n    def range_query(self, s: int, e: int, i: int, qs: int, qe: int) -> int:\n        if qs <= s and qe >= e:\n            return self.segT[i]\n        if qs > e or qe < s:\n            return float('-inf')\n        mid = s + (e - s) // 2\n        l = self.range_query(s, mid, 2 * i + 1, qs, qe)\n        r = self.range_query(mid + 1, e, 2 * i + 2, qs, qe)\n        return max(l, r)\n    \n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        arr = []\n        set_ = SortedSet()\n        set_.add(0)\n        set_.add(100000)\n        map_ = {0: 0, 100000: 100000}\n        \n        for i in queries:\n            if i[0] == 1:\n                set_.add(i[1])\n                prev = set_[set_.bisect_left(i[1]) - 1]\n                next = set_[set_.bisect_right(i[1])]\n                map_[next] = next - i[1]\n                map_[i[1]] = i[1] - prev\n                self.update(0, 100000, 0, i[1], map_[i[1]])\n                self.update(0, 100000, 0, next, map_[next])\n            else:\n                prev = set_[set_.bisect_left(i[1]) - 1]\n                if i[1] - prev >= i[2]:\n                    arr.append(True)\n                    continue\n                elif self.range_query(0, 100000, 0, 0, i[1]) >= i[2]:\n                    arr.append(True)\n                    continue\n                arr.append(False)\n        \n        return arr\n",
    "submit_ts": 1716652649.0
}