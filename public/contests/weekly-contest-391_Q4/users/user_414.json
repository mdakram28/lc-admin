{
    "username": "yukimaki",
    "submission": "#include <vector>\n#include <algorithm>\n#include <limits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    pair<int, tuple<int, int, int, int>> computeMaxDistance(const vector<vector<int>>& pts) {\n        int lower_bound = numeric_limits<int>::max(), upper_bound = numeric_limits<int>::min();\n        int lower_diff = numeric_limits<int>::max(), upper_diff = numeric_limits<int>::min();\n\n        for (const auto& point : pts) {\n            int coord_x = point[0], coord_y = point[1];\n            int sum_coords = coord_x + coord_y, diff_coords = coord_x - coord_y;\n            lower_bound = min(lower_bound, sum_coords);\n            upper_bound = max(upper_bound, sum_coords);\n            lower_diff = min(lower_diff, diff_coords);\n            upper_diff = max(upper_diff, diff_coords);\n        }\n\n        return {max(upper_bound - lower_bound, upper_diff - lower_diff),\n                {lower_bound, upper_bound, lower_diff, upper_diff}};\n    }\n\n    int minimumDistance(vector<vector<int>> pts) {\n        auto [max_dist, bounds] = computeMaxDistance(pts);\n        auto [low_sum, high_sum, low_diff, high_diff] = bounds;\n        vector<int> critical_indices;\n\n        for (int idx = 0; idx < pts.size(); ++idx) {\n            int coord_x = pts[idx][0], coord_y = pts[idx][1];\n            if (coord_x + coord_y == high_sum || coord_x + coord_y == low_sum ||\n                coord_x - coord_y == high_diff || coord_x - coord_y == low_diff) {\n                critical_indices.push_back(idx);\n            }\n        }\n\n        int least_max_distance = max_dist;\n        for (int idx : critical_indices) {\n            vector<vector<int>> altered_pts = pts;\n            altered_pts.erase(altered_pts.begin() + idx);\n            int new_max_dist = computeMaxDistance(altered_pts).first;\n            least_max_distance = min(least_max_distance, new_max_dist);\n        }\n\n        return least_max_distance;\n    }\n};\n"
}