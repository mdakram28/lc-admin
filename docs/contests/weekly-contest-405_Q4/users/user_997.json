{
    "username": "hccyril",
    "submission": "class StreamChecker:\n    def __init__(self, n: int, words: List[str], costs: List[int]):\n        self.dp = [-1] * n\n        self.root = TrieNode()\n        for cost, word in zip(costs, words):\n            cur = self.root\n            for char in word:\n                idx = ord(char) - ord('a')\n                if not cur.children[idx]:\n                    cur.children[idx] = TrieNode()\n                cur = cur.children[idx]\n            cur.isEnd = True\n            cur.ca.append((len(word), cost))\n        \n        self.root.fail = self.root\n        q = deque()\n        for i in range(26):\n            if self.root.children[i]:\n                self.root.children[i].fail = self.root\n                q.append(self.root.children[i])\n            else:\n                self.root.children[i] = self.root\n        while q:\n            node = q.popleft()\n            node.isEnd = node.isEnd or node.fail.isEnd\n            if node.fail.isEnd:\n                node.ca += node.fail.ca\n            for i in range(26):\n                if node.children[i]:\n                    node.children[i].fail = node.fail.children[i]\n                    q.append(node.children[i])\n                else:\n                    node.children[i] = node.fail.children[i]\n        self.temp = self.root\n            \n    def query(self, i: int, letter: str) -> bool:\n        self.temp = self.temp.children[ord(letter) - ord('a')]\n        if self.temp.isEnd:\n            for le, co in self.temp.ca:\n                #print('le co = ', le, co)\n                if i - le == -1:\n                    if self.dp[i] == -1:\n                        self.dp[i] = co\n                    else:\n                        self.dp[i] = min(self.dp[i], co)\n                elif self.dp[i - le] > 0:\n                    if self.dp[i] == -1:\n                        self.dp[i] = self.dp[i - le] + co\n                    else:\n                        self.dp[i] = min(self.dp[i], self.dp[i - le] + co)\n        #print('query i dp = ', i, self.dp[i])\n        return self.temp.isEnd\n\nclass TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.isEnd = False\n        self.fail = None\n        self.ca = []\n\nclass Solution: #D:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        di = {}\n        for w, c in zip(words, costs):\n            if not w in di:\n                di[w] = c\n            else:\n                di[w] = min(di[w], c)\n        words = []\n        costs = []\n        for w, c in di.items():\n            words.append(w)\n            costs.append(c)\n        sc = StreamChecker(len(target), words, costs)\n        for i, x in enumerate(target):\n            sc.query(i, x)\n        return sc.dp[-1]",
    "submit_ts": "1720323225",
    "subm_id": "1312370404"
}