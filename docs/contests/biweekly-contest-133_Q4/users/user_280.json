{
    "username": "anshsaxena1703",
    "submission": "class Solution {\npublic:\n    static constexpr int MOD = 1000000007;\n    static constexpr int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> inversionRequirements;\n        for (const auto& req : requirements) {\n            inversionRequirements[req[0] + 1] = req[1];\n        }\n\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1; \n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int previousInv = inv - newPos;\n                    if (previousInv >= 0) {\n                        dp[length][inv] = (dp[length][inv] + dp[length - 1][previousInv]) % MOD;\n                    }\n                }\n            }\n\n\n            if (inversionRequirements.find(length) != inversionRequirements.end()) {\n                int requiredInversions = inversionRequirements[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != requiredInversions) {\n                        dp[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (const auto& count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719070034.0
}