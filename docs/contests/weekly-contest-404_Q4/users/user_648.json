{
    "username": "Nitish_kumar_3015",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    typedef vector<int> vi;\n    typedef vector<vector<int>> vvi;\n    \n    pair<int, int> bfs(int start, const vvi &adj) {\n        int n = adj.size();\n        vi dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        \n        int farthest_node = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthest_node]) {\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return {farthest_node, dist[farthest_node]};\n    }\n    \n    int findDiameter(const vvi &edges, int n) {\n        vvi adj(n);\n        for (const vi &edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n      \n        pair<int, int> first_bfs = bfs(0, adj);\n        \n        // Second BFS to find the diameter of the tree\n        pair<int, int> second_bfs = bfs(first_bfs.first, adj);\n        \n        return second_bfs.second;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1; \n        int m = edges2.size() + 1; \n        \n       \n        int diameter1 = findDiameter(edges1, n);\n        int diameter2 = findDiameter(edges2, m);\n        \n      \n        int min_diameter = max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n        \n        return min_diameter;\n    }\n};\n",
    "submit_ts": 1719719718.0
}