{
    "username": "ifte104",
    "submission": "from collections import defaultdict\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word_index = -1\n        \nclass Solution(object):\n    def minimumCost(self, target, words, costs):\n        \"\"\"\n        :type target: str\n        :type words: List[str]\n        :type costs: List[int]\n        :rtype: int\n        \"\"\"\n        words_dict = defaultdict(lambda: float('inf'))\n        for i, word in enumerate(words):\n            words_dict[word] = min(words_dict[word], costs[i])\n            \n        words = list(words_dict.keys())\n        costs = [words_dict[word] for word in words]\n        \n        root = TrieNode()\n        for i, word in enumerate(words):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.word_index = i\n\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            \n            node = root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.word_index != -1:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[node.word_index])\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720323469",
    "subm_id": "1312376337"
}