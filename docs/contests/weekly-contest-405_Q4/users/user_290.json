{
    "username": "st019",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> m;\n    int cost = -1;\n};\nclass Trie {\n    public:\n        void insert(const string& word, int cost) {\n            TrieNode* curr = head;\n            for(char c : word) {\n                if(!curr -> m.count(c)) {\n                    curr -> m[c] = new TrieNode;\n                }\n                curr = curr ->m[c];\n            }\n            if(curr -> cost == -1) {\n                curr -> cost = cost;\n            } else {\n                curr -> cost = min(curr -> cost, cost);\n            }\n        }\n        TrieNode* head = new TrieNode();\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t;\n        for(int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], costs[i]);\n        }\n        int N = target.size();\n        vector<int> dp(N + 1, -1);\n        dp[N] = 0;\n        for(int i = N-1; i >= 0; --i) {\n            TrieNode* curr = t.head;\n            for(int j = i; j < N; ++j) {\n                char c = target[j];\n                if(!curr -> m.count(c)) {\n                    break;\n                }\n                curr = curr -> m[c];\n                if(curr -> cost != -1) {\n                    if(dp[j+1] != -1) {\n                        int newCost = curr -> cost + dp[j+1];\n                        if(dp[i] == -1) {\n                            dp[i] = newCost;\n                        } else {\n                            dp[i] = min(newCost, dp[i]);\n                        }\n                    }\n                }\n            }\n        }\n        // for(int i = 0; i <= N; ++i) cout << dp[i] << \" \";\n        return dp[0];\n    }\n};",
    "submit_ts": "1720322035",
    "subm_id": "1312338942"
}