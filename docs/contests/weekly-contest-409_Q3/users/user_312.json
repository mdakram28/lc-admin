{
    "username": "amit_shinde",
    "submission": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <numeric> \nusing namespace std;\n\nclass SegmentTree {\n    class Pune {\n    public:\n        int lazy;\n        int sum;\n        Pune() : lazy(-1), sum(0) {}  \n    };\n\n    vector<Pune> t;\n    int n;\n\n    void navi(const vector<int>& arr, int id, int l, int r) {\n        if (l == r) {\n            t[id].sum = arr[l];\n            return;\n        }\n        int mid = (l + r) / 2;\n        navi(arr, id * 2, l, mid);\n        navi(arr, id * 2 + 1, mid + 1, r);\n        t[id] = latu(t[id * 2], t[id * 2 + 1]);\n    }\n\n    Pune latu(Pune a, Pune b) {\n        Pune ans;\n        ans.sum = a.sum + b.sum;\n        return ans;\n    }\n\n    void sang(int id, int l, int r) {\n        if (t[id].lazy != -1) {\n            t[id].sum = (r - l + 1) * t[id].lazy;  \n            if (l != r) {\n                t[id * 2].lazy = t[id].lazy;\n                t[id * 2 + 1].lazy = t[id].lazy;\n            }\n            t[id].lazy = -1;\n        }\n    }\n\n    void osma(int id, int l, int r, int ul, int ur, int val) {\n        sang(id, l, r);\n        if (ul > r || ur < l)\n            return;\n        if (ul <= l && ur >= r) {\n            t[id].lazy = val;\n            sang(id, l, r);\n            return;\n        }\n        int mid = (l + r) / 2;\n        osma(id * 2, l, mid, ul, ur, val);\n        osma(id * 2 + 1, mid + 1, r, ul, ur, val);\n        t[id] = latu(t[id * 2], t[id * 2 + 1]);\n    }\n\n    int akol(int id, int l, int r, int ql, int qr) {\n        sang(id, l, r);\n        if (ql > r || qr < l)\n            return 0;\n        if (ql <= l && qr >= r)\n            return t[id].sum;\n        int mid = (l + r) / 2;\n        int left_sum = akol(id * 2, l, mid, ql, qr);\n        int right_sum = akol(id * 2 + 1, mid + 1, r, ql, qr);\n        return left_sum + right_sum;\n    }\n\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        t.resize(4 * n);\n        navi(arr, 1, 0, n - 1);\n    }\n\n    void osma(int ul, int ur, int val) {\n        osma(1, 0, n - 1, ul, ur, val);\n    }\n\n    int akol(int ql, int qr) {\n        return akol(1, 0, n - 1, ql, qr);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> arr(n, 1);\n        SegmentTree sg(arr);\n        vector<int> ans;\n        for (int i = 0; i < queries.size(); i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            sg.osma(a + 1, b - 1, 0); \n            int c = sg.akol(0, n - 1);\n            // cout << c << endl;\n            ans.push_back(c - 1);  \n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1722740932",
    "subm_id": "1343732367"
}