{
    "username": "vishrutgoti",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Convert arrays to Integer arrays for sorting in reverse order\n        Integer[] horizontal = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vertical = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        // Sort both arrays in descending order\n        Arrays.sort(horizontal, Collections.reverseOrder());\n        Arrays.sort(vertical, Collections.reverseOrder());\n        \n        // Initialize counters for horizontal and vertical cuts\n        int h = 0;\n        int v = 0;\n        \n        // Initialize the total cost\n        long totalCost = 0;\n        \n        // Initialize the number of horizontal and vertical pieces\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        // Process the cuts in a greedy manner\n        while (h < horizontal.length && v < vertical.length) {\n            if (horizontal[h] >= vertical[v]) {\n                // If the next horizontal cut is more expensive, make that cut\n                totalCost += horizontal[h] * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                // If the next vertical cut is more expensive, make that cut\n                totalCost += vertical[v] * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (h < horizontal.length) {\n            totalCost += horizontal[h] * verticalPieces;\n            h++;\n        }\n        \n        // Process remaining vertical cuts\n        while (v < vertical.length) {\n            totalCost += vertical[v] * horizontalPieces;\n            v++;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720924929",
    "subm_id": "1320236420"
}