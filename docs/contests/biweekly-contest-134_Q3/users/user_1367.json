{
    "username": "ansh_iet_22",
    "submission": "#define ff first\n#define ss second\n#define all(x) (x).begin(), (x).end()\ntypedef long long ll;\ntypedef unsigned long long ull;\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& vec, int k) {\n        vector<int> me;\n        int n = vec.size() , cnt = 0;\n        for(int i = 0 ; i < n ; i++){\n            if(i+1 < vec.size() && vec[i] == vec[i+1]){\n                me.push_back(i);\n            }\n        }\n        for(int i = 0 ; i <= n - k ;i++){\n            auto it = lower_bound(all(me),i);\n            if(it == me.end()){\n                cnt++;\n                continue;\n            }\n            if(*it >= i+k-1){\n                cnt++;\n            }\n        }\n        // cout << cnt << \"\\n\";\n        if(vec[n-1] == vec[0]){\n            me.push_back(n-1);\n        }\n        for(int i = n-k+1  ; i < n;i++){\n            auto it = lower_bound(all(me),i);\n            if(me.size() == 0){\n                cnt++;\n                continue;\n            }\n            if(it != me.end()){\n                continue;\n            }\n            int hi = n-i;\n            int le = k - hi - 1;\n            int x = me.size();\n            if(me[0] < le){\n                // cout << i << \" \";\n                continue;\n            }\n            else{\n                cnt++;\n            }\n        }\n        return cnt;\n    }\n};",
    "submit_ts": "1720280136",
    "subm_id": "1311778243"
}