{
    "username": "Jy_Tan",
    "submission": "class DSU:\n    def __init__(self, m):\n        self.d = [i for i in range(m)]\n        \n    def find(self, e):\n        if self.d[e] != e:\n            self.d[e] = self.find(self.d[e])\n        return self.d[e]\n    \n    def union(self, e1, e2):\n        s1 = self.find(e1)\n        s2 = self.find(e2)\n        self.d[s1] = s2\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        N = len(circles)        \n        for x, y, r in circles:\n            if x**2 + y**2 <= r**2:\n                return False\n            if (X - x)**2 + (Y - y)**2 <= r *2:\n                return False\n            \n        dsu = DSU(N + 4)\n        e0, e1, e2, e3 = N, N + 1, N + 2, N + 3\n        for i in range(N):\n            xi, yi, ri = circles[i]\n            for j in range(i + 1, N):\n                xj, yj, rj = circles[j]\n                if (xi - xj)**2 + (yi - yj)**2 <= (ri + rj) ** 2:\n                    dsu.union(i, j)\n            if abs(xi) <= ri:\n                dsu.union(i, e3)\n            if abs(X - xi) <= ri:\n                dsu.union(i, e1)\n            if abs(yi) <= ri:\n                dsu.union(i, e2)\n            if abs(Y - yi) <= ri:\n                dsu.union(i, e0)\n                \n        pairs = [(e0, e2), (e0, e1), (e1, e3), (e2, e3)]\n        \n        for t1, t2 in pairs:\n            if dsu.find(t1) == dsu.find(t2):\n                return False\n        return True        \n        \n        \n        \n        \n        \n        \n        \n        \n        ",
    "submit_ts": "1722138124",
    "subm_id": "1335782730"
}