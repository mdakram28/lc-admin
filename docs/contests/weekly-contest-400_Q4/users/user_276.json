{
    "username": "loxa_",
    "submission": "class Solution {\npublic:\n    template<typename T>\n    class ST{\n    public:\n        int n, n_;\n        T null_element;\n        vector<T> st;\n        ST(int n, T null_element):n_(n), null_element(null_element){\n            while((n&(n-1))!=0) n++;\n            this->n = n;\n            // INITIALIZE NULL ELEMENTS PROPERLY(initialize -INF for max, INF for min, 0 for sum)\n            st = vector<T>(2*n-1, null_element);\n        }\n        T operation(T a, T b){\n            // CHANGE OPERATION ACCORDING TO REQUIREMENT\n            return (a&b); // creating segment tree which maintains sum over ranges\n        }\n        void build(vector<T>& a){\n            _build(0, 0, n-1, a);\n        }\n        // x is the node index in segment tree array which will have 2*n-1 nodes\n        // lx, rx is the range node x corresponds to in the original array \n        void _build(int x, int lx, int rx, vector<T>& a){\n            if(lx==rx){\n                if(lx<n_) st[x] = a[lx];\n                return;\n            }\n            int mid = (lx+rx)/2;\n            _build(2*x+1, lx, mid, a);\n            _build(2*x+2, mid+1, rx, a);\n            st[x] = operation(st[2*x+1], st[2*x+2]);\n        }\n        T query(int l, int r){\n            return _query(0, l, r, 0, n-1);\n        }\n        // l, r is the range in the original array on which the query is made\n        // query is in range [l:r+1], indices from l to r(including r)\n        T _query(int x, int l, int r, int lx, int rx){\n            if(lx>r || rx<l) return null_element; // SET NULL ELEMENTS PROPERLY(set -INF for max, INF for min, 0 for sum)\n            else if(lx>=l && rx<=r) return st[x];\n            int mid = (lx+rx)/2;\n            T ql = _query(2*x+1, l, r, lx, mid);\n            T qr = _query(2*x+2, l, r, mid+1, rx);\n            T res = operation(ql, qr);\n            return res;\n        }\n    };\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size(), res = INT_MAX;\n        ST<int> st = ST(n, INT_MAX);\n        st.build(nums);\n        for(int i=0; i<n; i++){\n            int l = 0, r = i;\n            while(l<=r){\n                int mid = (l+r)/2, q = st.query(mid, i);\n                if(q>=k) r = mid-1;\n                else l = mid+1;\n            }\n            if(l+1>=0 && l+1<=i){\n                int q = st.query(l+1, i);\n                res = min(res, abs(k-q));\n            }\n            if(l>=0 && l<=i){\n                int q = st.query(l, i);\n                res = min(res, abs(k-q));\n            }\n            if(l-1>=0 && l-1<=i){\n                int q = st.query(l-1, i);\n                res = min(res, abs(k-q));\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717298142.0
}