{
    "username": "349775270",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        int[][] dp = new int[n + 1][k + 1];\n        for (int i = 1; i <= n; i++) {\n            dp[i][0] = 1;\n        }\n        Map<Integer, PriorityQueue<Integer>>[] mp = new Map[k + 1];\n        for (int i = 0; i <= k; i++) {\n            mp[i] = new HashMap<>();\n        }\n        int[] mx = new int[k + 1];\n        for (int i = 1; i <= n; i++) {\n            for (int l = 0; l <= Math.min(i - 1, k); l++) {\n                if (mp[l].containsKey(nums[i - 1]) && !mp[l].get(nums[i - 1]).isEmpty()) {\n                    dp[i][l] = Math.max(dp[i][l], mp[l].get(nums[i - 1]).peek() + 1);\n                }\n                if (l > 0) {\n                    dp[i][l] = Math.max(dp[i][l], mx[l - 1] + 1);\n                }\n            }\n            for (int l = 0; l <= k; l++) {\n                mp[l].putIfAbsent(nums[i - 1], new PriorityQueue<>(Collections.reverseOrder()));\n                mp[l].get(nums[i - 1]).add(dp[i][l]);\n                mx[l] = Math.max(mx[l], dp[i][l]);\n            }\n        }\n        return Arrays.stream(mx).max().getAsInt();\n    }\n}",
    "submit_ts": "1717858940",
    "subm_id": "1281705444"
}