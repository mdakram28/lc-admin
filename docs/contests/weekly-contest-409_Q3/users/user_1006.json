{
    "username": "zinchse",
    "submission": "class LazySegmentTree:\n    def __init__(self, arr):\n        self.size = len(arr)\n        self.tree = [0] * (4 * self.size)\n        self.lazy = [None] * (4 * self.size)\n        self.build(arr, 0, 0, self.size - 1)\n\n    def build(self, arr, node, start, end):\n        if start == end:\n            self.tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            self.build(arr, 2 * node + 1, start, mid)\n            self.build(arr, 2 * node + 2, mid + 1, end)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def _apply_lazy(self, node, start, end):\n        if self.lazy[node] is not None:\n            self.tree[node] = (end - start + 1) * self.lazy[node]\n            if start != end:  # not a leaf node\n                self.lazy[2 * node + 1] = self.lazy[node]\n                self.lazy[2 * node + 2] = self.lazy[node]\n            self.lazy[node] = None\n\n    def _update_range(self, node, start, end, l, r, value):\n        self._apply_lazy(node, start, end)\n        \n        if start > end or start > r or end < l:\n            return\n\n        if start >= l and end <= r:\n            self.tree[node] = (end - start + 1) * value\n            if start != end:\n                self.lazy[2 * node + 1] = value\n                self.lazy[2 * node + 2] = value\n            return\n\n        mid = (start + end) // 2\n        self._update_range(2 * node + 1, start, mid, l, r, value)\n        self._update_range(2 * node + 2, mid + 1, end, l, r, value)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update_range(self, l, r, value):\n        self._update_range(0, 0, self.size - 1, l, r, value)\n\n    def _query_range(self, node, start, end, l, r):\n        self._apply_lazy(node, start, end)\n        \n        if start > end or start > r or end < l:\n            return 0\n\n        if start >= l and end <= r:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_query = self._query_range(2 * node + 1, start, mid, l, r)\n        right_query = self._query_range(2 * node + 2, mid + 1, end, l, r)\n        return left_query + right_query\n\n    def query_range(self, l, r):\n        return self._query_range(0, 0, self.size - 1, l, r)\n\n    \nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        tree = LazySegmentTree([1 for _ in range(n-1)] + [0])\n      \n        res = []\n        cur_sum = n - 1\n        for left, right in queries:\n            cur_sum -= tree.query_range(left+1, right-1)\n            tree.update_range(left+1, right-1, 0)\n            res.append(cur_sum)\n            \n        return res\n        ",
    "submit_ts": "1722742591",
    "subm_id": "1343772459"
}