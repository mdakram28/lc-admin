{
    "username": "KyQxVeAr4m",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nconst int ALPHABET_SIZE = 26;\n\n// Trie Node definition\nstruct TrieNode {\n    TrieNode* children[ALPHABET_SIZE];\n    int cost; // To store the minimum cost associated with the word ending at this node\n\n    TrieNode() : cost(INT_MAX) {\n        for (int i = 0; i < ALPHABET_SIZE; ++i) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    // Insert word with its cost into the Trie\n    void insert(string& word, int cost) {\n        TrieNode* current = root;\n        for (char ch : word) {\n            int index = ch - 'a';\n            if (!current->children[index]) {\n                current->children[index] = new TrieNode();\n            }\n            current = current->children[index];\n        }\n        // Store the minimum cost associated with this word\n        current->cost = min(current->cost, cost);\n    }\n\n    // Search for a word in the Trie and return its cost\n    int search(string& word) {\n        TrieNode* current = root;\n        for (char ch : word) {\n            int index = ch - 'a';\n            if (!current->children[index]) {\n                return INT_MAX; // Word not found in Trie\n            }\n            current = current->children[index];\n        }\n        return current->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        Trie trie;\n\n        // Insert words and their costs into the Trie\n        for (int i = 0; i < words.size(); ++i) {\n            string& word = words[i];\n            int cost = costs[i];\n            trie.insert(word, cost);\n        }\n\n        // Dynamic programming to compute minimum cost\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n                TrieNode* current = trie.root;\n                for (int j = i; j < n; ++j) {\n                    int index = target[j] - 'a';\n                    if (!current->children[index]) {\n                        break; // No further matching prefix in Trie\n                    }\n                    current = current->children[index];\n                    if (current->cost != INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + current->cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322490",
    "subm_id": "1312351301"
}