{
    "username": "spadreams",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        int[][] c1 = new int[n][m], c2 = new int[n][m];\n        for (int j = 0; j < n; j++) {\n            for (int i = 0; i < m; i++) {\n                if (i == 0) c1[j][i] = board[i][j];\n                else c1[j][i] = Math.max(c1[j][i - 1], board[i][j]);\n            }\n            for (int i = m - 1; i >= 0; i--) {\n                if (i == m - 1) c2[j][i] = board[i][j];\n                else c2[j][i] = Math.max(c2[j][i + 1], board[i][j]);\n            }\n        }\n        \n        long res = Long.MIN_VALUE;\n        for (int i = 1; i < m - 1; i++) {\n            for (int j = 0; j < n; j++) {\n                int x = board[i][j];\n                List<int[]> q1 = new ArrayList<>();\n                List<int[]> q2 = new ArrayList<>();\n                for (int k = 0; k < n; k++) {\n                    if (k == j) continue;\n                    int y = c1[k][i - 1], z = c2[k][i + 1];\n                    q1.add(new int[]{y, k});\n                    q2.add(new int[]{z, k});\n                }\n                Collections.sort(q1, (o1, o2) -> o2[0] - o1[0]);\n                Collections.sort(q2, (o1, o2) -> o2[0] - o1[0]);\n                if (q1.get(0)[1] != q2.get(0)[1]) res = Math.max(res, (long)x + q1.get(0)[0] + q2.get(0)[0]);\n                else {\n                    long t1 = (long)q1.get(0)[0] + q2.get(1)[0];\n                    long t2 = (long)q1.get(1)[0] + q2.get(0)[0];\n                    res = Math.max(res, x + Math.max(t1, t2));\n                    // System.out.println(i + \" \" + j + \" \" + t1 + \" \" + t2);\n                }\n                // System.out.println(i + \" \" + j + \" \" + q1.get(0)[1] + \" \" + q2.get(0)[1] + \" \" + q1.get(01)[1] + \" \" + q2.get(1)[1]);\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1723907758",
    "subm_id": "1359122944"
}