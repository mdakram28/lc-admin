{
    "username": "vijender_8601",
    "submission": "class Solution {\n    Set<Integer> vis;\n    int maxi[], me[];\n    int result[];\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        \n        List<List<Integer>> graph = new ArrayList<>();\n        maxi = new int[n];\n        me = new int[n];\n        \n        List<Queue<Integer>> q = new ArrayList<>();\n        \n        for(int i=0; i<n; i++) {graph.add(new ArrayList<>()); q.add(new PriorityQueue<>((o1, o2)->o2-o1));}\n        vis = new HashSet<>();\n        for(int i[] : edges)\n        {\n            graph.get(i[0]).add(i[1]);\n            graph.get(i[1]).add(i[0]);\n        }\n        \n        dfs(0, 0, graph, q);\n        \n        // System.out.println(q);\n        \n        result = new int[n];\n        result[0] = maxi[0];\n        vis.clear();\n        dfs2(0, graph, q);\n        \n        return result;\n    }\n    \n    private void dfs2(int i, List<List<Integer>> graph, List<Queue<Integer>> q)\n    {\n        vis.add(i);\n        \n        for(int j : graph.get(i))\n        {\n            if(vis.contains(j)) continue;\n            \n            result[j] = maxi[j] - me[j];\n            int val = (i%2==0?2:1);\n            if(result[i]==maxi[j]+(j%2==0?2:1))\n            {\n                // System.out.println(i+\" \"+q.get(i).poll());\n                int x1 = q.get(i).poll();\n                \n                if(!q.get(i).isEmpty())\n                {\n                    int x2 = q.get(i).poll();\n                    // System.out.println(j+\" \"+i+\" \"+x2+\" \"+maxi[j]);\n                    result[j] = Math.max(result[j], val + x2);\n                    q.get(i).add(x2);\n                    q.get(j).add(val+x2);\n                }\n                 q.get(i).add(x1);\n            } else {\n                result[j] = Math.max(result[j], val + result[i]);\n                q.get(j).add(val + result[i]);\n                // System.out.println(j+\" \"+i+\" ...\"+maxi[j]);\n            }\n            \n            // System.out.println(j+\" \"+q);\n            \n            result[j] = Math.max(result[j], val);\n            q.get(j).add(val);\n            \n            dfs2(j, graph, q);\n        }\n    }\n    \n    private int dfs(int i, int t, List<List<Integer>> graph, List<Queue<Integer>> q)\n    {\n        vis.add(i);\n        int max = 0;\n        me[i] = t;\n        for(int j : graph.get(i))\n        {\n            if(vis.contains(j)) continue;\n            \n            if(j%2==1)\n            {\n                int val = (j%2==0?2:1) + dfs(j, t, graph, q);\n                q.get(i).add(val);\n                max = Math.max(max, val);\n            } else {\n                int val = (j%2==0?2:1) + dfs(j, t, graph, q);\n                q.get(i).add(val);\n                max = Math.max(max, val);\n            }\n            \n            // if(j%2==1) max = dfs(j, t+1, graph, q));\n            // else q.get(i).add(dfs(j, t+2, graph, q));\n        }\n        \n        maxi[i] = max;\n        \n        return max;\n    }\n}",
    "submit_ts": "1722700469",
    "subm_id": "1343242836"
}