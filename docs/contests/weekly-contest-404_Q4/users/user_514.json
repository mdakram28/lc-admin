{
    "username": "jcarr",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        #print('start')\n        # find leaves, retract and get min depths, join by 1\n        G = dict()\n        for e in edges1:\n            if e[0] not in G:\n                G[e[0]] = set()\n            G[e[0]].add(e[1])\n            if e[1] not in G:\n                G[e[1]] = set()\n            G[e[1]].add(e[0])\n        if not G:\n            G[0] = set()\n            \n        # check own diameter\n        dists = {k:-1 for k in G.keys()}\n        dists[0] = 0\n        stack = [0]\n        while stack:\n            curr = stack.pop()\n            for child in G[curr]:\n                if dists[child] == -1:\n                    dists[child] = dists[curr] + 1\n                    stack.append(child)\n        maxi = 0\n        maxd = 0\n        for i,d in dists.items():\n            if d > maxd:\n                maxd = d\n                maxi = i\n        dists = {k:-1 for k in G.keys()}\n        dists[maxi] = 0\n        stack = [maxi]\n        while stack:\n            curr = stack.pop()\n            for child in G[curr]:\n                if dists[child] == -1:\n                    dists[child] = dists[curr] + 1\n                    stack.append(child)\n        diameter1 = max(dists.values())\n        #print('diameter1', diameter1)\n        \n        # search\n        depth1 = 0\n        leaves = set([k for k in G if len(G[k]) == 1])\n        while leaves:\n            #print('leaves1', leaves)\n            depth1 += 1\n            if len(G) <= 2:\n                break\n            new_leaves = set()\n            for leaf in leaves:\n                #print('leaf', leaf)\n                parent = G[leaf].pop()\n                del G[leaf]\n                G[parent].remove(leaf)\n                if len(G[parent]) == 0:\n                    new_leaves = set()\n                    break\n                if len(G[parent]) == 1:\n                    new_leaves.add(parent)\n            leaves = new_leaves\n        #print('depth1', depth1)\n\n        \n        # find leaves, retract and get min depths, join by 1\n        G = dict()\n        for e in edges2:\n            if e[0] not in G:\n                G[e[0]] = set()\n            G[e[0]].add(e[1])\n            if e[1] not in G:\n                G[e[1]] = set()\n            G[e[1]].add(e[0])\n        if not G:\n            G[0] = set()\n        \n        # check own diameter\n        dists = {k:-1 for k in G.keys()}\n        dists[0] = 0\n        stack = [0]\n        while stack:\n            curr = stack.pop()\n            for child in G[curr]:\n                if dists[child] == -1:\n                    dists[child] = dists[curr] + 1\n                    stack.append(child)\n        maxi = 0\n        maxd = 0\n        for i,d in dists.items():\n            if d > maxd:\n                maxd = d\n                maxi = i\n        dists = {k:-1 for k in G.keys()}\n        dists[maxi] = 0\n        stack = [maxi]\n        while stack:\n            curr = stack.pop()\n            for child in G[curr]:\n                if dists[child] == -1:\n                    dists[child] = dists[curr] + 1\n                    stack.append(child)\n        diameter2 = max(dists.values())\n        #print('diameter2', diameter2)\n        \n        # search\n        depth2 = 0\n        leaves = set([k for k in G if len(G[k]) == 1])\n        while leaves:\n            #print('leaves2', leaves)\n            depth2 += 1\n            if len(G) <= 2:\n                break\n            new_leaves = set()\n            for leaf in leaves:\n                #print('leaf', leaf)\n                parent = G[leaf].pop()\n                del G[leaf]\n                G[parent].remove(leaf)\n                if len(G[parent]) == 0:\n                    new_leaves = set()\n                    break\n                if len(G[parent]) == 1:\n                    new_leaves.add(parent)\n            leaves = new_leaves\n        #print('depth2', depth2)\n        \n        return max(depth1 + depth2 + 1, diameter1, diameter2)\n            ",
    "submit_ts": "1719718637",
    "subm_id": "1304422290"
}