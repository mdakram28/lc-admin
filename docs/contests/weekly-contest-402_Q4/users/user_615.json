{
    "username": "AyushYadav56",
    "submission": "import java.util.*;\n\nclass Solution {\n    class SegmentTree {\n        int[] tree;\n        int n;\n\n        public SegmentTree(int n) {\n            this.n = n;\n            this.tree = new int[4 * n];\n        }\n\n        private boolean isPeak(int[] nums, int i) {\n            return i > 0 && i < nums.length - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        }\n\n        public void build(int[] nums, int start, int end, int node) {\n            if (start == end) {\n                tree[node] = isPeak(nums, start) ? 1 : 0;\n                return;\n            }\n            int mid = (start + end) / 2;\n            build(nums, start, mid, 2 * node + 1);\n            build(nums, mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n\n        public int query(int start, int end, int l, int r, int node) {\n            if (r < start || l > end) return 0;\n            if (l <= start && r >= end) return tree[node];\n            int mid = (start + end) / 2;\n            int leftQuery = query(start, mid, l, r, 2 * node + 1);\n            int rightQuery = query(mid + 1, end, l, r, 2 * node + 2);\n            return leftQuery + rightQuery;\n        }\n\n        public void update(int[] nums, int start, int end, int idx, int node) {\n            if (start == end) {\n                tree[node] = isPeak(nums, start) ? 1 : 0;\n                return;\n            }\n            int mid = (start + end) / 2;\n            if (idx <= mid) update(nums, start, mid, idx, 2 * node + 1);\n            else update(nums, mid + 1, end, idx, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        SegmentTree segmentTree = new SegmentTree(n);\n        segmentTree.build(nums, 0, n - 1, 0);\n        List<Integer> result = new ArrayList<>();\n\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                if (l == r) {\n                    result.add(0);\n                    continue;\n                }\n                int peaksCount = segmentTree.query(0, n - 1, l + 1, r - 1, 0);\n                result.add(peaksCount);\n            } else if (query[0] == 2) {\n                int idx = query[1];\n                int val = query[2];\n                nums[idx] = val;\n                for (int i = Math.max(0, idx - 2); i <= Math.min(n - 1, idx + 2); i++) {\n                    segmentTree.update(nums, 0, n - 1, i, 0);\n                }\n            }\n        }\n\n        return result;\n    }\n}\n",
    "submit_ts": 1718506966.0
}