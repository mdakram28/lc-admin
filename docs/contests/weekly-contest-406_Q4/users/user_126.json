{
    "username": "Prasanna-8446",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a list of all cuts with their types\n        vector<pair<int, char>> cuts;\n        for (int cost : horizontalCut) {\n            cuts.push_back({cost, 'H'});\n        }\n        for (int cost : verticalCut) {\n            cuts.push_back({cost, 'V'});\n        }\n\n        // Sort cuts in descending order of cost\n        sort(cuts.rbegin(), cuts.rend());\n\n        // Number of pieces initially\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        long long totalCost = 0;\n\n        // Process each cut\n        for (auto& cut : cuts) {\n            int cost = cut.first;\n            char type = cut.second;\n\n            if (type == 'H') {\n                // Horizontal cut\n                totalCost += static_cast<long long>(cost) * verticalPieces;\n                horizontalPieces++;\n            } else {\n                // Vertical cut\n                totalCost += static_cast<long long>(cost) * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924766",
    "subm_id": "1320230050"
}