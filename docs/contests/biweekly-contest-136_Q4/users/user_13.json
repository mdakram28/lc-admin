{
    "username": "paigulong",
    "submission": "const int N = 100000 + 10;\nvector<int> g[N];\nint up[N], down[N];\nvoid dfs1(int u, int p) {\n    for (auto v: g[u]) {\n        if (v == p) continue;\n        dfs1(v, u);\n        down[u] = max(down[u], down[v] + (v % 2 == 0 ? 2 : 1));\n    }\n}\nvoid dfs2(int u, int p) {\n    multiset<int> st;\n    for (auto v: g[u]) {\n        if (v == p) continue;\n        st.insert(down[v] + (v % 2 == 0 ? 2 : 1));\n    }\n    \n    for (auto v: g[u]) {\n        if (v == p) continue;\n        int tmp = down[v] + (v % 2 == 0 ? 2 : 1);\n        st.erase(st.find(tmp));\n        up[v] = max(up[v], up[u] + (u % 2 == 0 ? 2 : 1));\n        if (st.size()) {\n            up[v] = max(up[v], (*st.rbegin()) + (u % 2 == 0 ? 2 : 1));\n        }\n        st.insert(tmp);\n        dfs2(v, u);\n       \n    }\n}\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        for (int i = 0; i < n; i ++) {\n            g[i].clear();\n            up[i] = down[i] = 0;\n        }\n        for (auto e: edges) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        dfs1(0, 0);\n        dfs2(0, 0);\n        vector<int> ans(n);\n        for (int i = 0; i < n; i ++) {\n            ans[i] = max(up[i], down[i]);\n            //cout << up[i] << \" \" << down[i] << \"\\n\";\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722695967",
    "subm_id": "552258037"
}