{
    "username": "tyao-t",
    "submission": "class Solution {\npublic:\n    class SegTree {\n        private: int sz;\n        vector < int > arr;\n        public: void init(int n) {\n            sz = 1;\n            while (sz < n) sz *= 2;\n            arr.clear();\n            arr.resize(2 * sz + 1, 0);\n        }\n        \n        void update_single(int idx, int num) {\n            idx += sz - 1;\n            while (idx > 0) {\n                arr[idx] = num;\n                if (idx < sz) arr[idx] = max(arr[idx*2], arr[idx*2+1]);\n                idx /= 2;\n            }\n        }\n     \n        int query(int l, int r) {\n            return query_helper(l, r, 1, sz, 1);\n        }\n        \n        int query_helper(int l, int r, int ll, int rr, int idx) {\n            if (l == ll && r == rr) {\n                return arr[idx]; \n            }\n            int mid = (ll + rr) / 2;\n            int ans = 0;\n            if (r <= mid) {\n                ans = query_helper(l, r, ll, mid, idx * 2);\n            } else if (l > mid) {\n                ans = query_helper(l, r, mid + 1, rr, idx * 2 + 1);\n            } else {\n                ans = max(query_helper(l, mid, ll, mid, idx * 2), query_helper(mid + 1, r, mid + 1, rr, idx * 2 + 1));\n            }\n            return ans;\n        }\n    };\n\n    map<int, int> m;\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        m[1] = 131072; \n        SegTree st;\n        st.init(131072);\n        vector<bool> ret;\n        st.update_single(1, 131072-1);\n        // cout << st.query(1, 1) << endl;\n        // st.update_single(1, 0);\n        // st.update_single(1, 2);\n        // st.update_single(3, 1048575-3);\n        // cout << st.query(1, 1) << endl;\n        for (auto &q : queries) {\n            int x = q[1];\n            x+=1;\n            if (q[0] == 1) {\n                auto it = m.lower_bound(x);\n                it--; \n                int cur_l = it->first, cur_r = it->second; \n                m[cur_l] = x;\n                m[x] = cur_r;\n                // cout << cur_l << \" \" << x << \" \" << cur_r << endl;\n                // st.update_single(cur_l, 0);\n                st.update_single(cur_l, x-cur_l);\n                st.update_single(x, cur_r-x); \n            } else {\n                int sz = q[2];\n                if (x-1 < sz) {\n                    ret.push_back(false);\n                    continue;\n                }\n                // cout << st.query(1, x-sz) << \" \" << sz << endl;\n                ret.push_back(st.query(1, x-sz) >= sz);\n                // cout << x-sz << endl;\n            }\n        }\n        \n        return ret;\n    }\n};",
    "submit_ts": 1716651294.0
}