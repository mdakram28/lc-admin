{
    "username": "yogeshrathee",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffMap;\n        vector<int> maxValues;\n        \n        // Process the first half of nums\n        for (int i = 0; i < nums.size() / 2; i++) {\n            int front = nums[i];\n            int back = nums[nums.size() - i - 1];\n            int diff = abs(front - back);\n            int maxValue = max({front, back, k - front, k - back});\n            \n            diffMap[diff].push_back(maxValue);\n            maxValues.push_back(maxValue);\n        }\n        \n        int minChangesRequired = nums.size();\n        \n        // Sort the vector of maximum values\n        sort(maxValues.begin(), maxValues.end());\n        \n        // Process each difference in the map\n        for (auto& entry : diffMap) {\n            int diff = entry.first;\n            int changeCount = lower_bound(maxValues.begin(), maxValues.end(), diff) - maxValues.begin();\n            changeCount = changeCount * 2 + (nums.size() / 2 - changeCount);\n            \n            for (auto& value : entry.second) {\n                if (value < diff) {\n                    changeCount -= 2;\n                } else {\n                    changeCount -= 1;\n                }\n            }\n            \n            minChangesRequired = min(minChangesRequired, changeCount);\n        }\n        \n        return minChangesRequired;\n    }\n};\n",
    "submit_ts": "1721490591",
    "subm_id": "1327487076"
}