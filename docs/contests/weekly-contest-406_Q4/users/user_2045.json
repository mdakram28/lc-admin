{
    "username": "ggomo",
    "submission": "class Solution {\npublic:\n //   typedef node = pair<int, pair<int, int>>;\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        long long ans = 0;\n\n        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<pair<int, pair<int, int>>>> pq;\n        for(int i = 0; i < horizontalCut.size(); i++) pq.push({horizontalCut[i], {i,0}});\n        for(int i = 0; i < verticalCut.size(); i++) pq.push({verticalCut[i], {i,1}});\n        int hs = m;\n        int vs = n;\n        while(pq.size()) {\n            pair<int, pair<int, int>> top = pq.top(); pq.pop();\n            int cost = top.first;\n            int isH = top.second.second == 0;\n            if (isH) {\n                ans += cost * vs;\n                hs--;\n            } else {\n                ans += cost * hs;\n                vs--;\n            }\n            \n        }\n        return ans;\n    \n    }\n};\n\n",
    "submit_ts": "1720926308",
    "subm_id": "1320282328"
}