{
    "username": "wenboz",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int m = words.length;\n        root = new TrieNode();\n        for(int i = 0; i < m; i++){\n            String w = words[i];\n            var cur = root;\n            int depth = 0;\n            for(char c : w.toCharArray()){\n                if(cur.next[c - 'a'] == null)\n                    cur.next[c - 'a'] = new TrieNode();\n                cur = cur.next[c - 'a'];\n                depth++;\n            }\n            cur.isWord = true;\n            cur.depth = depth;\n            cur.cost = Math.min(cur.cost, costs[i]);\n        }\n\n        var dq = new ArrayDeque<TrieNode>();\n        dq.add(root);\n        while(!dq.isEmpty()){\n            var cur = dq.poll();\n            for(int i = 0; i < 26; i++){\n                if(cur.next[i] != null){\n                    var fail = cur.fail;\n                    while(fail != null){\n                        if(fail.next[i] != null){\n                            cur.next[i].fail = fail.next[i];\n                            break;\n                        }\n                        fail = fail.fail;\n                    }\n                    if(cur.next[i].fail == null)\n                        cur.next[i].fail = root;\n                    if(cur.next[i].fail.isWord)\n                        cur.next[i].out = cur.next[i].fail;\n                    else\n                        cur.next[i].out = cur.next[i].fail.out;\n                    dq.add(cur.next[i]);\n                }\n            }\n        }\n        curNode = root;\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        for(int i = 1; i <= n; i++){\n            if(query(target.charAt(i - 1))){\n                TrieNode temp = curNode;\n                while(temp != null){\n                    if(temp.isWord){\n                        if(dp[i - temp.depth] != -1){\n                            if(dp[i] == -1){\n                                dp[i] = dp[i - temp.depth] + temp.cost;\n                            }\n                            else{\n                                dp[i] = Math.min(dp[i - temp.depth] + temp.cost, dp[i]);\n                            }\n                        }\n                    }\n                    temp = temp.out;\n                }\n            }\n        }\n        return dp[n];\n    }\n    \n    public boolean query(char letter) {\n        while(curNode != null){\n            if(curNode.next[letter - 'a'] != null){\n                curNode = curNode.next[letter - 'a'];\n                return curNode.isWord || curNode.out != null;\n            }\n            curNode = curNode.fail;\n        }\n        curNode = root;\n        return false;\n    }\n    \n    class TrieNode{\n        boolean isWord;\n        int depth;\n        int cost = Integer.MAX_VALUE;\n        TrieNode[] next = new TrieNode[26];\n        TrieNode fail;\n        TrieNode out;\n    }\n\n    TrieNode root;\n    TrieNode curNode;\n}",
    "submit_ts": "1720323002",
    "subm_id": "1312364815"
}