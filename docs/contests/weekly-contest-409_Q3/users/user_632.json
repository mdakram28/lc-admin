{
    "username": "kind-agnesipe9",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int[] arr=new int[n];\n        Arrays.fill(arr,1);\n        SegmentTree2_query sT=new SegmentTree2_query(arr);\n        int[] ans=new int[queries.length];\n        int length=n-1;\n        for (int i = 0; i < queries.length ; i++) {\n            sT.add(1,n-1,1,queries[i][0]+1,queries[i][1]-1,0);\n            ans[i]= sT.query(1,n-1,1,1,n-1);\n        }\n        return ans;\n    }\n\n    class SegmentTree2_query {\n\n        //\u6784\u5efa\u4ece\u4e0b\u68071\u5f00\u59cb\u7684\u65b0\u6570\u7ec4\uff0c\u4e3a\u4e86\u4f7f\u7528\u4e8c\u53c9\u6811\u7684\u6027\u8d28\n        int[] arr;\n        //\u6c47\u603b\u533a\u95f4\u503c\n        int[] sum;\n        //\u61d2\u66f4\u65b0\u6570\u7ec4\n        int[] lazy;\n\n        public SegmentTree2_query(int[] origin)\n        {\n            int size = origin.length;\n            arr = new int[size+1];\n            Arrays.fill(arr,1);\n            sum = new int[size*4];\n            lazy = new int[size*4];\n\n            build(1,size-1,1);\n        }\n\n        //\u6839\u636e\u4e1a\u52a1\u9700\u6c42\uff0c\u9700\u8981\u6784\u5efa\u7ebf\u6bb5\u6811\u8303\u56f4\u503c\uff08\u53ef\u4ee5\u662f\u7d2f\u52a0\u548c\u3001\u4e5f\u53ef\u4ee5\u662fmax\uff0c\u89c6\u4e1a\u52a1\u800c\u5b9a\uff09\n        public void build (int left, int right, int curIndex)\n        {\n            //\u53ea\u52691\u4e2a\u6570\n            if (left == right) {\n                sum[curIndex] = arr[left];\n                return;\n            }\n\n            int mid = (left + right)/2;\n            //\u5de6\u5b50\u6811\uff0c curIndex\u4ee3\u8868\u5f53\u524d\u8282\u70b9\u7684\u4e0b\u6807\u3002 curIndex*2\u4ee3\u8868\u5f53\u524d\u8282\u70b9curIndex\u7684\u5de6\u5b69\u5b50\n            build(left, mid, curIndex*2);\n            //\u53f3\u5b50\u6811, curIndex*2 + 1\u4ee3\u8868\u5f53\u524d\u8282\u70b9curIndex\u7684\u53f3\u5b69\u5b50\n            build(mid + 1, right, curIndex*2+1);\n\n            //\u6c47\u603b\n            collect(curIndex);\n        }\n\n        //\u6c47\u603b\u5de6\u3001\u53f3\u5b69\u5b50\u7684\u7d2f\u52a0\u548c\n        public void collect(int curIndex) {\n            sum[curIndex] =  sum[curIndex * 2] + sum[curIndex * 2 + 1];\n        }\n\n        /**\n         * @param left       \u4ee3\u8868\u6570\u7ec4\u8303\u56f4\u533a\u95f4\u7684\u5f00\u59cb\u4f4d\u7f6e\n         * @param right      \u4ee3\u8868\u6570\u7ec4\u8303\u56f4\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\n         * @param start      \u4efb\u52a1\u5f00\u59cb\u4f4d\u7f6e\n         * @param end        \u4efb\u52a1\u7ed3\u675f\u4f4d\u7f6e\n         * @param value      \u4ecestart\u5230end\u8303\u56f4\u4e4b\u95f4\uff0c\u6bcf\u4e2a\u6570\u52a0value\n         *\n         * \u533a\u95f4\u8303\u56f4\u65b0\u589e\u3001\u5220\u9664 value\n         */\n        public void add (int left, int right, int curIndex, int start, int end, int value)\n        {\n            //\u4ee3\u8868\u4efb\u52a1\u9700\u8981\u66f4\u65b0 start \u5230 end\u533a\u95f4\n            //\u800c left \u5230 right \u5b8c\u5168\u88ab\u4efb\u52a1\u7684start\u5230end\u5305\u542b\u3002\n            // \u76f4\u63a5\u66f4\u65b0\u6c47\u603b\u6570\u636e, \u5177\u4f53\u7684\u5b50\u6570\u7ec4\u6682\u4e0d\u66f4\u65b0\n            if (start <= left && right <= end) {\n                //\u7edf\u8ba1left\u5230right\u4e4b\u95f4\u6570\u5b57\u4e2a\u6570\uff0c\u6bcf\u4e2a\u6570\u90fd\u589e\u52a0 value\n                //\u533a\u95f4\u66f4\u65b0\uff0c\u9700\u8981\u539f\u6709\u7684sum[curIndex] \u52a0\u4e0a \u65b0\u589e\u7684\u6570\u503c\n                sum[curIndex] = (right - left + 1) * value;\n\n                //\u6b64\u65f6\uff0c\u53ea\u662f\u66f4\u65b0\u4e86\u533a\u95f4\u6c47\u603b\u6570\u636e; \u63d0\u5347\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\uff1b\u4f46\u662f\uff0c\n                //\u533a\u95f4\u5185\u7684\u5b9e\u9645\u6570\u5b57\u5e76\u6ca1\u6709\u5b9e\u9645\u66f4\u65b0\u3002\u56e0\u6b64\u9700\u8981\u8bb0\u5f55\u4e0b\u8fd9\u4e00\u6b21\u64cd\u4f5c\n                lazy[curIndex] = 1;\n\n                return;\n            }\n\n            //\u5047\u8bbe\u6570\u7ec4\u957f\u5ea6\u4e3a10\uff0c\u5f53\u524d\u533a\u95f4\u4e3a1-5\uff0c\u6211\u4eec\u9700\u8981\u66f4\u65b02-6\uff0c\u4e5f\u5c31\u662f\u8bf4\u4e0a\u65b9\u903b\u8f91\u5305\n            //\u5305\u4e0d\u4f4f\uff1b\u6b64\u65f6\uff0c\u539f\u6709\u7684\u61d2\u66f4\u65b0\u7684\u6570\u7ec4\u8bb0\u5f55\u7684\u6570\u636e\u9700\u8981\u4e0b\u653e\u7684\u5b50\u533a\u95f4\n            int mid = (left + right)/2;\n            //\u4e0b\u653e\u4e4b\u524dlazy\u8bb0\u5f55\u7684\u6570\u636e, \u6709\u53ef\u80fdlazy\u6ca1\u6709\u6570\u636e\n            pushDown(curIndex, mid - left + 1, right - mid);\n\n            //\u66f4\u65b0\u5de6\u5b69\u5b50\u533a\u95f4\n            if (start <= mid) {\n                add(left, mid, curIndex*2, start, end, value);\n            }\n            //\u66f4\u65b0\u53f3\u5b69\u5b50\u533a\u95f4\n            if (end > mid) {\n                add(mid + 1, right, curIndex*2 + 1, start, end, value);\n            }\n\n            //\u5de6\u3001\u53f3\u5b69\u5b50\u533a\u95f4\u90fd\u66f4\u65b0\u8fc7\u4e86\uff0c\u9700\u8981\u6c47\u603b\u5f53\u524dcurIndex\u5bf9\u5e94\u7684\u533a\u95f4\u6c47\u603b\u6570\u636e\u4e86\n            collect(curIndex);\n        }\n\n        public void pushDown(int curIndex, int leftChildren, int righChildren)\n        {\n            //\u5982\u679c\u4e4b\u524d\u6709\u61d2\u66f4\u65b0, \u90a3\u4e48\u628a\u61d2\u66f4\u65b0\u6570\u7ec4\u5230\u4e0b\u4e00\u5c42\u533a\u95f4\u53bb\u66f4\u65b0\n            if (lazy[curIndex] ==1) {\n                //\u5de6\u5b69\u5b50\u533a\u95f4\u503c\u66f4\u65b0\n                sum[curIndex * 2] = 0;\n                //\u5de6\u5b69\u5b50\u5e76\u6ca1\u6709\u5168\u90e8\u66f4\u65b0\uff0c\u9700\u8981\u8bb0\u5f55\u61d2\u66f4\u65b0\u4fe1\u606f\n                lazy[curIndex*2] =1;\n\n                //\u53f3\u5b69\u5b50\u533a\u95f4\u503c\u66f4\u65b0\n                sum[curIndex * 2 + 1] =0;\n                lazy[curIndex*2+1] =1;\n\n                //\u539f\u6709\u7236\u533a\u95f4\u91cd\u7f6e\n                lazy[curIndex] = 0;\n            }\n        }\n\n\n\n        //\u65b0\u589e\u67e5\u8be2\u529f\u80fd\n        /**\n         * @param left       \u4ee3\u8868\u6570\u7ec4\u8303\u56f4\u533a\u95f4\u7684\u5f00\u59cb\u4f4d\u7f6e\n         * @param right      \u4ee3\u8868\u6570\u7ec4\u8303\u56f4\u533a\u95f4\u7684\u7ed3\u675f\u4f4d\u7f6e\n         * @param start      \u4efb\u52a1\u5f00\u59cb\u4f4d\u7f6e\n         * @param end        \u4efb\u52a1\u7ed3\u675f\u4f4d\u7f6e\n         *\n         * \u5728 left \u5230 right\u4e4b\u95f4\uff0c\u67e5\u8be2 start\u5230end \u533a\u95f4\u6570\u636e\u548c\n         */\n        public int query(int left, int right, int curIndex, int start, int end)\n        {\n            if (start <= left && end >= right) {\n                return sum[curIndex];\n            }\n\n            int ans = 0;\n            int mid = (left + right)/2;\n            //\u9632\u6b62\u90e8\u5206\u533a\u95f4\u61d2\u66f4\u65b0\u3002 \u6bd4\u59821-5\u8303\u56f4\u61d2\u66f4\u65b0\u8bb0\u5f55\u4e86\u6570\u636e\uff0c\u4f46\u662f\u67e5\u8be21-4\u8303\u56f4\u3002\u6b64\u65f6\u6570\u636e\u4e0d\u6b63\u786e\n            pushDown(curIndex, mid - left + 1, right - mid);\n            if (left < mid) {\n                ans += query(left, mid, curIndex * 2, start, end);\n            }\n\n            if (right > mid) {\n                ans += query(mid + 1, right, curIndex * 2 + 1, start, end);\n            }\n\n            return ans;\n        }\n    }\n}",
    "submit_ts": "1722742516",
    "subm_id": "552345141"
}