{
    "username": "sen-xm",
    "submission": "class SegmentTree {\nprivate:\n    std::vector<int> tree;\n    int n;\n\n    void build(int node, int start, int end, const std::vector<int>& data) {\n        if (start == end) {\n            tree[node] = data[start];\n        } else {\n            int mid = (start + end) / 2;\n            int left_child = 2 * node + 1;\n            int right_child = 2 * node + 2;\n            build(left_child, start, mid, data);\n            build(right_child, mid + 1, end, data);\n            tree[node] = std::max(tree[left_child], tree[right_child]);\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            int left_child = 2 * node + 1;\n            int right_child = 2 * node + 2;\n            if (idx <= mid) {\n                update(left_child, start, mid, idx, value);\n            } else {\n                update(right_child, mid + 1, end, idx, value);\n            }\n            tree[node] = std::max(tree[left_child], tree[right_child]);\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return INT_MIN;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_child = 2 * node + 1;\n        int right_child = 2 * node + 2;\n        int left_max = query(left_child, start, mid, L, R);\n        int right_max = query(right_child, mid + 1, end, L, R);\n        return std::max(left_max, right_max);\n    }\n\npublic:\n    SegmentTree(int size) {\n        n = size;\n        tree.resize(4 * n, INT_MIN);\n    }\n\n    void build(const std::vector<int>& data) {\n        build(0, 0, n - 1, data);\n    }\n\n    void update(int idx, int value) {\n        update(0, 0, n - 1, idx, value);\n    }\n\n    int query(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n};\n\nclass Solution {\nprivate:\n    std::map<int, int> main_tree;\n    SegmentTree segment_tree = SegmentTree(50010);\n\n\npublic:\n    int MAX_VAL = 0x3f3f3f3f;\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        std::vector<bool> ans;\n        insert(0, MAX_VAL);\n        for(auto q : queries){\n            int type = q[0];\n            if(q[0] == 1){\n                int x = q[1];\n                auto t = find_max_less_than(x);\n                split(t.first, t.first, x - t.first, x, t.second - x + t.first);\n            } else {\n                int x = q[1];\n                int sz = q[2];\n                auto item = find_max_less_than(x);\n                int tt = x - item.first;\n                if(item.first != 0){\n                    int t = find_max_length_less_than(item.first - 1);\n                    if(t > tt){\n                        tt = t;\n                    }\n                }\n                if(tt < sz){\n                    ans.push_back(false);\n                } else {\n                    ans.push_back(true);\n                }\n            }\n        }\n        \n        return ans;\n    }\n    \n    \n    void insert(int idx, int length) {\n        main_tree[idx] = length;\n        segment_tree.update(idx, length);\n    }\n\n    void remove(int idx) {\n        segment_tree.update(idx, INT_MIN);\n        main_tree.erase(idx);\n    }\n\n    std::pair<int, int> find_max_less_than(int x) {\n        auto it = main_tree.lower_bound(x);\n        if (it == main_tree.begin()) {\n            return { -1, -1 };\n        }\n        --it;\n        return *it;\n    }\n\n    void split(int idx, int new_idx1, int new_length1, int new_idx2, int new_length2) {\n        remove(idx);\n        insert(new_idx1, new_length1);\n        insert(new_idx2, new_length2);\n    }\n\n    int find_max_length_less_than(int y) {\n        \n        int ret = segment_tree.query(0, y);\n        return ret;\n    }\n};\n\n",
    "submit_ts": "1716652060",
    "subm_id": "534777451"
}