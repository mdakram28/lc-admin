{
    "username": "Mohit",
    "submission": "class Solution {\n    HashMap<Integer, int[]> map;\n    int[][] com;\n\n    public long maximumValueSum(int[][] board) {\n      int n = board.length;\n      int m = board[0].length;\n      map = new HashMap<>();\n      com = new int[][] { { 0, 1, 2 }, { 0, 2, 1 }, { 1, 0, 2 }, { 1, 2, 0 }, { 2, 0, 1 }, { 2, 1, 0 } };\n\n      // build 3 max per row\n      for (int i = 0; i < n; i++) {\n        Integer[] sort = new Integer[m];\n        int[] cu = board[i];\n        Arrays.setAll(sort, j -> j);\n        Arrays.sort(sort, (x, y) -> cu[y] - cu[x]);\n        map.put(i, new int[] { sort[0], sort[1], sort[2] });\n      }\n\n      // try all combinations of rows\n      long max = Long.MIN_VALUE;\n\n      for (int i = 0; i < n; i++) {\n        for (int j = i + 1; j < n; j++) {\n          for (int k = j + 1; k < n; k++) {\n            long curr = maxall(i, j, k, board);\n            max = Math.max(max, curr);\n          }\n        }\n      }\n\n      return max;\n    }\n\n    long maxall(int a, int b, int c, int[][] board) {\n      long max = Long.MIN_VALUE;\n      max = Math.max(max, maxcol(a, b, c, board));\n      max = Math.max(max, maxcol(a, c, b, board));\n      max = Math.max(max, maxcol(b, a, c, board));\n      max = Math.max(max, maxcol(b, c, a, board));\n      max = Math.max(max, maxcol(c, a, b, board));\n      max = Math.max(max, maxcol(c, b, a, board));\n      return max;\n    }\n\n    long maxcol(int a, int b, int c, int[][] board) {\n      long curr = 0;\n\n      int[] a1 = map.get(a);\n      int[] b1 = map.get(b);\n      int[] c1 = map.get(c);\n      Set<Integer> taken = new HashSet<>();\n\n      curr += 1L * (board[a][a1[0]]);\n      taken.add(a1[0]);\n\n      if (!taken.contains(b1[0])) {\n        curr += 1L * (board[b][b1[0]]);\n        taken.add(b1[0]);\n      } else {\n        curr += 1L * (board[b][b1[1]]);\n        taken.add(b1[1]);\n      }\n\n      if (!taken.contains(c1[0])) {\n\n        curr += 1L * (board[c][c1[0]]);\n        taken.add(c1[0]);\n      } else if (!taken.contains(c1[1])) {\n        curr += 1L * (board[c][c1[1]]);\n        taken.add(c1[1]);\n      } else {\n        curr += 1L * (board[c][c1[2]]);\n      }\n\n      return curr;\n    }\n  }",
    "submit_ts": "1723907795",
    "subm_id": "1359124588"
}