{
    "username": "korokseeds",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG\n#include \"debug.h\"\n#else\n#define debug(...) 114514\n#endif\n#ifdef RUN\n#include \"LC_IO.h\"\n#endif\n\n#define fi first\n#define se second\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ai3 = array<int, 3>;\nusing al3 = array<ll, 3>;\nmt19937 rng(random_device{}());\nint rnd(int mod) { return rng() % mod; }\n\ntemplate<class T>\nstruct ST {\n    int n, mxb;\n    vector<vector<T>> st;\n\npublic:\n    ST() {}\n    ST(const vector<T> &a) : n(a.size()), mxb(__lg(a.size())) {\n        st.assign(mxb + 1, vector<T>(n, T{}));\n\n        for (int i = 0; i < n; i++) {\n            st[0][i] = a[i];\n        }\n        for (int k = 1; k <= mxb; k++) {\n            for (int L = 0; L + (1 << k) - 1 < n; L++) {\n                st[k][L] = st[k - 1][L] + st[k - 1][L + (1 << (k - 1))];\n            }\n        }\n    }\n\n    T qr(int L, int R) {\n        if (R - L + 1 <= 0) return T{};\n        assert(L <= R && L >= 0 && R < n && \"ST=>qr()\");\n        int k = __lg(R - L + 1);\n        return st[k][L] + st[k][R - (1 << k) + 1];\n    }\n};\n\nstruct And {\n    int x;\n\n    And() : x{0} {}\n    And(int x) : x{x} {}\n\n    friend And operator+(const And &l, const And &r) {\n        return l.x & r.x;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& a, int k) {\n        int n = a.size();\n        a.insert(a.begin(), 0);\n\n        vector<And> sta(n + 1);\n        for (int i = 1; i <= n; i++) {\n            sta[i] = a[i];\n        }\n        ST<And> st(sta);\n        ll ans = 0;\n        for (int i = 1; i <= n; i++) {\n            int lb = -1, rb = -1;\n            {\n                int left = 1, right = i + 1;\n                while (left < right) {\n                    int mid = left + right >> 1;\n                    if (st.qr(mid, i).x >= k) right = mid;\n                    else left = mid + 1;\n                }\n                lb = left;\n            }\n            {\n                int left = 1, right = i + 1;\n                while (left < right) {\n                    int mid = left + right >> 1;\n                    if (st.qr(mid, i).x > k) right = mid;\n                    else left = mid + 1;\n                }\n                rb = left;\n            }\n\n            debug(i, lb, rb);\n            ans += rb - lb;\n        }\n        return ans;\n    }\n};\n\n#ifdef RUN\nint main() {\n    ios_base::sync_with_stdio(false);\n    stringstream out_stream;\n\n    vector<int> nums;\n    LeetCodeIO::scan(cin, nums);\n    int k;\n    LeetCodeIO::scan(cin, k);\n\n    Solution *obj = new Solution();\n    auto res = obj->countSubarrays(nums, k);\n    LeetCodeIO::print(out_stream, res);\n    cout << \"\\noutput: \" << out_stream.rdbuf() << endl;\n\n    delete obj;\n    return 0;\n}\n#endif\n",
    "submit_ts": "1720279391",
    "subm_id": "544567263"
}