{
    "username": "Omkar_K",
    "submission": "class Solution {\npublic:\n long long goodarrays(vector<int>& E, int curr) {\n        sort(E.begin(), E.end());\n\n        long long pts = 0;\n        int l = 0, r = E.size()-1;\n        int n = E.size();\n        while(r>=0){\n            if(l <= r && curr >= E[l]){\n                pts += (curr/E[l]);\n                curr = curr % E[l];\n            }\n            else if(pts >= 1){\n                curr += E[r];\n                r--;\n            }\n            else break;\n        }\n\n        return pts;\n    }\n   long long countSubarrays(vector<int>& vec, int K) {\n        int n = vec.size();\n        long long count = 0;\n        \n        unordered_map<long long, long long> prev;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> curr; \n\n            if (vec[i] == K) {\n                ++count;\n            }\n            curr[vec[i]] = 1;\n\n            for (auto& [val, freq] : prev) {\n                long long newAndResult = val & vec[i];\n                if (newAndResult == K) {\n                    count += freq;\n                }\n                curr[newAndResult] += freq;\n            }\n            \n            prev = curr;\n        }\n        \n        return count;\n    }\n};",
    "submit_ts": "1720281501",
    "subm_id": "1311827454"
}