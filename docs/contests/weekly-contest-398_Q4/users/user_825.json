{
    "username": "avishekh159",
    "submission": "class Solution {\n    Map<Pair,Long>dp;\n    int target;\n    public int waysToReachStair(int k) {\n        \n        dp=new HashMap<>();\n        this.target=k;\n        return (int)solve(1,0,false);\n    }\n    long solve(long step, int jump, boolean prevOp)\n    {\n        if(step>target)\n        {\n           if(prevOp) return 0L;\n           if(step-target>1)return 0L; \n        }\n        Pair p = new Pair(step,jump,prevOp);\n        if (dp.containsKey(p))return dp.get(p);\n        long ans=0L;\n        if (step == target)\n            ans=1L;\n        ans+=solve(step+(long)Math.pow(2,jump),jump+1,false);\n        if(!prevOp && step-1>=0)\n        ans+=solve(step-1,jump,true);\n        dp.put(p,ans);\n        return ans;\n    }\n}\npublic class Pair {\n    private long value;\n    private boolean flag;\n    private int count;\n\n    public Pair(long value, int count, boolean flag) {\n        this.value = value;\n        this.flag = flag;\n        this.count = count;\n    }\n\n    public long getValue() {\n        return value;\n    }\n\n    public void setValue(long value) {\n        this.value = value;\n    }\n\n    public boolean isFlag() {\n        return flag;\n    }\n\n    public void setFlag(boolean flag) {\n        this.flag = flag;\n    }\n\n    public int getCount() {\n        return count;\n    }\n\n    public void setCount(int count) {\n        this.count = count;\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o) return true;\n        if (o == null || getClass() != o.getClass()) return false;\n        Pair pair = (Pair) o;\n        return value == pair.value && flag == pair.flag && count == pair.count;\n    }\n\n    @Override\n    public int hashCode() {\n        int result = Long.hashCode(value);\n        result = 31 * result + Boolean.hashCode(flag);\n        result = 31 * result + Integer.hashCode(count);\n        return result;\n    }\n\n    \n}\n\n",
    "submit_ts": 1716089364.0
}