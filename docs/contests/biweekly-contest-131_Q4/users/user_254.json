{
    "username": "jackieckc",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& data) {\n        n = data.size();\n        tree.resize(4 * n);\n        build(data, 0, 0, n - 1);\n    }\n\n    // Function to update the value at a single index\n    void Update(int idx, int value) {\n        update(0, 0, n - 1, idx, value);\n    }\n\n    // Function to get the maximum value in a given range\n    int QueryMax(int left, int right) {\n        return rangeMaxQuery(0, 0, n - 1, left, right);\n    }\n\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& data, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = data[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(data, 2 * node + 1, start, mid);\n            build(data, 2 * node + 2, mid + 1, end);\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, value);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, value);\n            }\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    int rangeMaxQuery(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return INT_MIN;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int maxLeft = rangeMaxQuery(2 * node + 1, start, mid, left, right);\n        int maxRight = rangeMaxQuery(2 * node + 2, mid + 1, end, left, right);\n        return max(maxLeft, maxRight);\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        set<int> se;\n        se.insert(0);\n        se.insert(5e4 + 1);\n        constexpr int n = 5e4 + 1;\n        vector<int> arr(5e4 + 1);\n        unordered_map<int, int> mp;\n        SegmentTree st(arr);\n        st.Update(0, 5e4 + 1);\n        mp[0] = 5e4 + 1;\n        \n        auto Add = [&](int x) {\n            auto itr = se.lower_bound(x);\n            int x1 = *prev(itr), x2 = *itr;\n            // cout << \"insert \" << x << endl;\n            // cout << x1 << \" -- \" << x2 << endl;\n            se.insert(x);\n            st.Update(x1, x - x1);\n            st.Update(x, x2 - x);\n            mp[x1] = x - x1;\n            mp[x] = x2 - x;\n            // cout << \"v at \" << x1 << \" = \" << x - x1 << endl;\n            // cout << \"v at \" << x << \" = \" << x2 - x << endl;\n        };\n        \n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int x = q[1];\n                Add(x);\n            } else {\n                int x = q[1], sz = q[2];\n                // cout << \"query \" << x << \" \" << sz << endl;\n                auto itr = se.lower_bound(x);\n                int x1 = *prev(itr), x2 = *itr;\n                // cout << x1 << \" -- \" << x2 << endl;\n                \n                // cout << \"max v at \" << x << \" = \" << st.QueryMax(0, x) << endl;\n                st.Update(x1, x - x1);\n                // cout << \"v at \" << x1 << \" = \" << x - x1 << endl;\n                // cout << \"max v at \" << x << \" = \" << st.QueryMax(0, x) << endl;\n                st.Update(x, 0);\n                \n                auto max_val = st.QueryMax(0, x);\n                // cout << \"max v <= \" << x << \" is \" << max_val << endl;\n                res.push_back(max_val >= sz);\n                \n                if (mp[x1] != 0) {\n                    st.Update(x1, mp[x1]);\n                }\n                if (mp[x] != 0) {\n                    st.Update(x, mp[x]);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1716651504.0
}