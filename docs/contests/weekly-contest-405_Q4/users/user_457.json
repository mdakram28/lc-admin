{
    "username": "ianwong1999",
    "submission": "class Solution {\npublic:\n    // https://www.luogu.com.cn/problem/P5357\n    // Code by rickyxrc | https://www.luogu.com.cn/record/115806238\n    static constexpr int maxn = 100055;\n    char s[maxn];\n\n    int n, cnt, vis[maxn] = {}, ans, m;\n\n    struct trie_node {\n      int son[26];\n      int fail, flag, depth, cost;\n        int len;\n      unsigned stat;\n\n      void init() {\n        memset(son, 0, sizeof(son));\n        fail = flag = depth = cost = len = 0;\n      }\n    } trie[maxn];\n    \n    bool used[maxn];\n\n    std::queue<int> q;\n\n    void init() {\n      for (int i = 0; i <= cnt; i++) trie[i].init();\n      for (int i = 1; i <= n; i++) vis[i] = 0;\n      cnt = 1;\n      ans = 0;\n    }\n\n    void insert(const char *s, int num, int cost, int on9) {\n      int u = 1, len = strlen(s);\n      for (int i = 0; i < len; i++) {\n        // trie[u].depth = i + 1;\n        int v = s[i] - 'a';\n        if (!trie[u].son[v]) trie[u].son[v] = ++cnt;\n        u = trie[u].son[v];\n      }\n      trie[u].flag = num;\n      if (trie[u].cost == 0) trie[u].cost = cost;\n        trie[u].cost = min(trie[u].cost, cost);\n        trie[u].len = on9;\n      // trie[u].stat = 1;\n      // printf(\"set %d stat %d\\n\", u-1, 1);\n      return;\n    }\n\n    void getfail(void) {\n      for (int i = 0; i < 26; i++) trie[0].son[i] = 1;\n      q.push(1);\n      trie[1].fail = 0;\n      while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        int Fail = trie[u].fail;\n        for (int i = 0; i < 26; i++) {\n          int v = trie[u].son[i];\n        \n          if (!v)\n            trie[u].son[i] = trie[Fail].son[i];\n          else if (!vis[v]) {\n            trie[v].depth = trie[u].depth + 1;\n            trie[v].fail = trie[Fail].son[i];\n             vis[v] = true;\n            q.push(v);\n          }\n        }\n      }\n    }\n    \n    int query(const char *s) {\n      int u = 1, len = strlen(s), l = 0;\n        vector<int> dp(len + 1, (int)1e9);\n      for (int i = 0; i < len; i++) {\n        int v = s[i] - 'a';\n        int k = trie[u].son[v];\n        while (k > 1) {\n          if (trie[k].flag) {\n            dp[i] = min(dp[i], (i - trie[k].len <= -1 ? 0 : dp[i - trie[k].len]) + trie[k].cost);\n          }\n          k = trie[k].fail;\n        }\n        u = trie[u].son[v];\n      }\n        return dp[len - 1] == (int)1e9 ? -1 : dp[len - 1];\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int m = words.size();\n        init();\n        for (int i = 0; i < m; i++) {\n            const auto& s = words[i];\n            insert(s.c_str(), i + 1, costs[i], s.size());\n        }\n        getfail();\n        \n        return query(target.c_str());\n    }\n};",
    "submit_ts": "1720321912",
    "subm_id": "1312335629"
}