{
    "username": "Ometek",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool: \n            n = len(circles)\n            graph = [[] for _ in range(n + 2)]\n            \n            for i in range(n):\n                for j in range(i + 1, n):\n                    x1, y1, r1 = circles[i]\n                    x2, y2, r2 = circles[j]\n                    distance = ((x2 - x1) ** 2 + (y2 - y1) ** 2)\n                    if distance <= (r1 + r2) ** 2:\n                        graph[i].append(j)\n                        graph[j].append(i)\n\n            # left top\n            for i in range(n):\n                x, y, r = circles[i]\n                htop = y + r\n                hleft = x - r\n                if (hleft <= 0 or htop >= Y):\n                    graph[i].append(n)\n                    graph[n].append(i)\n\n            # right bot\n            for i in range(n):\n                x, y, r = circles[i]\n                hbot = y - r\n                hright = x + r\n                if (hbot <= 0 or hright >= X):\n                    graph[i].append(n + 1)\n                    graph[n + 1].append(1) \n\n            visited = [False] * (n + 2)\n            visited[n] = True\n            stack = [n]\n\n            while (stack):\n                tp = stack.pop()\n\n                for v in graph[tp]:\n                    if (not visited[v]):\n                        visited[v] = True\n                        stack.append(v)\n\n            return not visited[n + 1]",
    "submit_ts": "1722138090",
    "subm_id": "1335781855"
}