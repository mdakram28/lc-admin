{
    "username": "metaphysica1412",
    "submission": "class Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        n = len(nums)\n        MAXN = 10 ** 9 + 7\n        P = 1\n        while (1 << P) < n:\n            P += 1\n        while (n < (1 << P)):\n            nums.append(0)\n            n += 1\n        # 00, 01, 10, 11, left, right\n        segtree =[[0, 0, 0, 0, 0, 0] for _ in range((1 << (P + 1)) + 1)]\n\n        def init():\n            for i in range(P, -1, -1):\n                for j in range(1 << i):\n                    t = (1 << i) + j\n                    segtree[t][4] = j * (1 << (P - i))\n                    segtree[t][5] = (j + 1) * (1 << (P - i)) - 1\n                    if i == P:\n                        segtree[t][0] = 0\n                        segtree[t][1] = 0\n                        segtree[t][2] = 0\n                        segtree[t][3] = nums[j]\n                    else:\n                        lt = t << 1\n                        rt = (t << 1) + 1\n                        segtree[t][0] = max(segtree[lt][0] + segtree[rt][0], segtree[lt][0] + segtree[rt][2], segtree[lt][1] + segtree[rt][0])\n                        segtree[t][1] = max(segtree[lt][0] + segtree[rt][1], segtree[lt][0] + segtree[rt][3], segtree[lt][1] + segtree[rt][1])\n                        segtree[t][2] = max(segtree[lt][2] + segtree[rt][0], segtree[lt][2] + segtree[rt][2], segtree[lt][3] + segtree[rt][0])\n                        segtree[t][3] = max(segtree[lt][2] + segtree[rt][1], segtree[lt][2] + segtree[rt][3], segtree[lt][3] + segtree[rt][1])\n\n        def _update_(root: int, pos: int, x: int):\n            if (segtree[root][4] == segtree[root][5]):\n                # leaf\n                segtree[root][3] = x\n                return\n            mid = (segtree[root][4] + segtree[root][5]) // 2\n            if pos <= mid:\n                _update_(root << 1, pos, x)\n            else:\n                _update_((root << 1) + 1, pos, x)\n            t = root\n            lt = t << 1\n            rt = (t << 1) + 1\n            segtree[t][0] = max(segtree[lt][0] + segtree[rt][0], segtree[lt][0] + segtree[rt][2], segtree[lt][1] + segtree[rt][0])\n            segtree[t][1] = max(segtree[lt][0] + segtree[rt][1], segtree[lt][0] + segtree[rt][3], segtree[lt][1] + segtree[rt][1])\n            segtree[t][2] = max(segtree[lt][2] + segtree[rt][0], segtree[lt][2] + segtree[rt][2], segtree[lt][3] + segtree[rt][0])\n            segtree[t][3] = max(segtree[lt][2] + segtree[rt][1], segtree[lt][2] + segtree[rt][3], segtree[lt][3] + segtree[rt][1])\n            return\n\n        def update(pos: int, x: int) -> int:\n            _update_(1, pos, x)\n            return max([segtree[1][i] for i in range(4)])\n\n        init()\n        res = []\n        for pos, x in queries:\n            res.append(update(pos, x))\n        return sum(res) % MAXN",
    "submit_ts": "1716693035",
    "subm_id": "1268073092"
}