{
    "username": "Sachin5115",
    "submission": "class Solution {\npublic:    \n     int findFarthestNode(vector<vector<int>>& adj, int start, int& farthestNode) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        \n        farthestNode = start;\n        dfsVisit(adj, start, 0, dist, farthestNode);\n        \n        return dist[farthestNode];\n    }\n    \n    void dfsVisit(const vector<vector<int>>& adj, int node, int d, vector<int>& dist, int& farthestNode) {\n        dist[node] = d;\n        if (d > dist[farthestNode]) {\n            farthestNode = node;\n        }\n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dfsVisit(adj, neighbor, d + 1, dist, farthestNode);\n            }\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& firstEdges, vector<vector<int>>& secondEdges) {\n        int n = firstEdges.size() + 1;\n        int m = secondEdges.size() + 1;\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& edge : firstEdges) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : secondEdges) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int f1 = 0;\n        findFarthestNode(adj1, 0, f1);\n        int d1 = findFarthestNode(adj1, f1, f1);\n\n        int f2 = 0;\n        findFarthestNode(adj2, 0, f2);\n        int d2 = findFarthestNode(adj2, f2, f2);\n        \n        return max(max(d1, d2), max((d1 + 1) / 2 + (d2 + 1) / 2 + 1, max(d1, d2)));\n    }\n};\n",
    "submit_ts": 1719719740.0
}