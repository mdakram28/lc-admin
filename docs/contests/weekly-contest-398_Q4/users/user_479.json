{
    "username": "megaspazz",
    "submission": "import java.math.*;\n\nclass Solution {\n    public int waysToReachStair(int k) {\n        long ans = 0;\n        for (int jumps = 0; jumps < 30; ++jumps) {\n            long totalUp = (1L << jumps) - 1;\n            long needDown = 1 + totalUp - k;\n            if (needDown < 0) {\n                continue;\n            }\n            // System.out.format(\"jumps = %d, totalUp = %d, needDown = %d%n\", jumps, totalUp, needDown);\n            long bars = needDown;\n            long stars = jumps - (needDown - 1);\n            if (stars < 0) {\n                continue;\n            }\n            long urns = bars + 1;\n            // System.out.format(\"    jumps = %d, totalUp = %d, needDown = %d, stars = %d, urns = %d%n\", jumps, totalUp, needDown, stars, urns);\n            ans += choose(stars + urns - 1, stars);\n        }\n        return (int) ans;\n    }\n\n    private static long choose(long n, long k) {\n        k = Math.min(k, n - k);\n\n        BigInteger b = BigInteger.ONE;\n        for (long i = 0; i < k; ++i) {\n            b = b.multiply(BigInteger.valueOf(n - i));\n        }\n        for (long i = 2; i <= k; ++i) {\n            b = b.divide(BigInteger.valueOf(i));\n        }\n        // System.out.format(\"%d choose %d = %s%n\", n, k, b);\n        return b.longValue();\n\n        // BigInteger num = BigInteger.ONE;\n        // for (int i = 2; i <= n; ++i) {\n        //     num = num.multiply(BigInteger.valueOf(i));\n        // }\n\n        // BigInteger den = BigInteger.ONE;\n        // for (int i = 2; i <= k; ++i) {\n        //     den = den.multiply(BigInteger.valueOf(i));\n        // }\n        // for (int i = 2; i <= n - k; ++i) {\n        //     den = den.multiply(BigInteger.valueOf(i));\n        // }\n\n        // return num.divide(den).longValue();\n    }\n}",
    "submit_ts": 1716088083.0
}