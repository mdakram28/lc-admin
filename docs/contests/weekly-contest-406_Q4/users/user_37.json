{
    "username": "pratyushpatra638",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort horizontal and vertical cuts in descending order\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        // Priority queues to process the cuts\n        std::priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n        std::priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n        \n        // Number of pieces created by the cuts\n        int hPieces = 1;\n        int vPieces = 1;\n        \n        long long totalCost = 0;\n        \n        // Process the cuts\n        while (!hCuts.empty() && !vCuts.empty()) {\n            if (hCuts.top() >= vCuts.top()) {\n                totalCost += static_cast<long long>(hCuts.top()) * vPieces;\n                hCuts.pop();\n                hPieces++;\n            } else {\n                totalCost += static_cast<long long>(vCuts.top()) * hPieces;\n                vCuts.pop();\n                vPieces++;\n            }\n        }\n        \n        // Process the remaining horizontal cuts\n        while (!hCuts.empty()) {\n            totalCost += static_cast<long long>(hCuts.top()) * vPieces;\n            hCuts.pop();\n            hPieces++;\n        }\n        \n        // Process the remaining vertical cuts\n        while (!vCuts.empty()) {\n            totalCost += static_cast<long long>(vCuts.top()) * hPieces;\n            vCuts.pop();\n            vPieces++;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720924797",
    "subm_id": "1320231306"
}