{
    "username": "kantnaveen",
    "submission": "class TrieNode {\n    HashMap<Character, TrieNode> children = new HashMap<>();\n    int cost = Integer.MAX_VALUE;  // Store the minimum cost for words ending at this node\n}\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n//         HashMap<String,Integer>map=new HashMap<>();\n//         int dp[]=new int[target.length()];\n//         Arrays.fill(dp,-1);\n//         for(int i=0;i<words.length;i++){\n//             int min=cost[i];\n//             if(map.containsKey(words[i])){\n//                  min =Math.min(cost[i],map.get(words[i]));\n//             }\n//             map.put(words[i],min);\n            \n//         }\n//         int h=help(target,0,map,dp);\n//         if(h>=1000000)return -1;\n//         return h;\n\n        // Map to store the minimum cost for each word\n       \n        TrieNode root = new TrieNode();\n\n        // Build the Trie\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (char c : words[i].toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.cost = Math.min(node.cost, costs[i]); // Store the minimum cost\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Fill DP array\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    \n    \n            \n    }\n    public int help(String s,int i,HashMap<String,Integer>map,int dp[]){\n        if(i==s.length()){\n            return 0;\n        }\n        if(dp[i]!=-1)return dp[i];\n        int min=1000000;\n        for(int st=i;st<s.length();st++){\n            String sub=s.substring(i,st+1);\n            if(map.containsKey(sub)){\n                min=Math.min(min,map.get(sub)+help(s,st+1,map,dp));\n                dp[i]=min;\n            }\n        }\n        return dp[i]=min;\n    }\n}\n//         int n = target.length();\n//         int[] dp = new int[n + 1];\n//         Arrays.fill(dp, Integer.MAX_VALUE);\n//         dp[0] = 0;\n\n//         for (int i = 0; i < n; i++) {\n//             if (dp[i] == Integer.MAX_VALUE) continue; // If i is unreachable, skip\n//             for (int j = 0; j < words.length; j++) {\n//                 String word = words[j];\n//                 int cost = costs[j];\n//                 if (i + word.length() <= n && target.substring(i, i + word.length()).equals(word)) {\n//                     dp[i + word.length()] = Math.min(dp[i + word.length()], dp[i] + cost);\n//                 }\n//             }\n//         }\n\n//         return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];",
    "submit_ts": "1720323038",
    "subm_id": "1312365753"
}