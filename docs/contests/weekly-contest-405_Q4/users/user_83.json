{
    "username": "Abhion_abhi",
    "submission": "class Solution {\npublic:\nclass Trie {\npublic:\n    Trie* children[26] = {nullptr};\n    vector<int> wordIndices;\n};\n\nvoid insert(Trie* root, const string& word, int index) {\n    Trie* node = root;\n    for (char c : word) {\n        if (!node->children[c - 'a']) {\n            node->children[c - 'a'] = new Trie();\n        }\n        node = node->children[c - 'a'];\n    }\n    node->wordIndices.push_back(index);\n}\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n    Trie* root = new Trie();\n    for (int i = 0; i < words.size(); ++i) {\n        insert(root, words[i], i);\n    }\n\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n\n        Trie* node = root;\n        for (int j = i; j < n; ++j) {\n            if (!node->children[target[j] - 'a']) break;\n            node = node->children[target[j] - 'a'];\n            for (int index : node->wordIndices) {\n                int len = words[index].length();\n                if (i + len <= n) {\n                    dp[i + len] = min(dp[i + len], dp[i] + costs[index]);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720319994",
    "subm_id": "1312279346"
}