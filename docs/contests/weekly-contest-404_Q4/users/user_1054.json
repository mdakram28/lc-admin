{
    "username": "amileleft",
    "submission": "/*/-----------------------valak_70-1-----------------------/*/\n/*/ \u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2864\u2824\u2836\u2836\u2812\u2812\u2812\u2812\u2822\u2824\u2884\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2834\u280a\u28a1\u28e0\u28c6\u2875\u2826\u2824\u2804\u2810\u283e\u2834\u28e6\u28f0\u28c8\u2851\u2822\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2834\u2813\u2802\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2813\u283a\u28b6\u2844\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28c0\u2834\u280a\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28c0\u28c0\u28e4\u2876\u280b\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2833\u28a4\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2860\u280e\u2840\u2800\u2802\u2800\u2800\u2800\u2800\u2800\u2880\u28e4\u28f6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ed\u28e4\u28c0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2822\u28c4\u2800\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2814\u2889\u2805\u2862\u2868\u2840\u28a0\u2860\u2800\u2880\u28f4\u28fe\u28ff\u281f\u28ff\u2801\u2838\u28ff\u28ff\u28ef\u28bb\u28ff\u28ff\u28f7\u28e6\u28c0\u2890\u2802\u2800\u2880\u2800\u2800\u2800\u2820\u2818\u28a6\u2840\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u28a0\u280a\u2800\u2803\u282a\u2860\u286a\u28dc\u2806\u28e8\u28fe\u28ff\u28ff\u287f\u2801\u2800\u28bb\u2800\u2800\u2839\u28ff\u28ff\u2844\u2819\u28ff\u28ff\u28ff\u28ff\u28f7\u28f4\u28c8\u2886\u2884\u2894\u2879\u2862\u2811\u2800\u2833\u2844\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u28a0\u2803\u2800\u2800\u2800\u2800\u2844\u2850\u2801\u28fc\u28ff\u28ff\u28bf\u285f\u2801\u2800\u2800\u2818\u2800\u2800\u2800\u2808\u28bb\u28c7\u2800\u2808\u28bf\u285f\u28ff\u28ff\u28ff\u287f\u2857\u280b\u280a\u2800\u2800\u2800\u2800\u2800\u2839\u2844\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2880\u280a\u2804\u2800\u2800\u2800\u2800\u2800\u2808\u28f8\u28ff\u28ff\u280f\u285e\u2812\u2812\u2802\u2824\u2800\u2800\u2800\u2800\u2800\u2800\u2819\u2802\u2809\u2808\u28bb\u2838\u28ff\u28ff\u28e7\u285a\u280c\u2834\u2860\u28e0\u2880\u2800\u2800\u2800\u28b9\u2840\u2800\u2800\n\u2800\u2800\u2800\u2800\u284e\u28b8\u2858\u284c\u28e6\u2850\u28e6\u2832\u2870\u28ff\u28ff\u285f\u2800\u2801\u2800\u28c0\u2840\u2800\u2800\u2800\u2880\u2800\u2800\u2800\u2800\u2880\u28e0\u28e4\u28c0\u2801\u28bb\u28ff\u28ff\u28ff\u2877\u285e\u28f1\u2883\u281e\u2804\u2820\u2800\u2808\u2847\u2800\u2800\n\u2800\u2800\u2800\u28b0\u28a3\u28b0\u2818\u284c\u28e6\u2880\u2866\u281c\u2800\u2800\u28ff\u2803\u2800\u28f0\u281f\u2809\u281b\u2826\u2800\u2800\u28b8\u2846\u2800\u2800\u2800\u281f\u2809\u2809\u2819\u2806\u2808\u28ff\u2877\u2805\u2800\u2819\u2847\u28fe\u28f6\u2800\u2846\u28a0\u2800\u2847\u2800\u2800\n\u2800\u2800\u2800\u28b8\u2838\u2858\u28a0\u2843\u288b\u28b9\u2800\u2800\u2800\u2800\u28bb\u2800\u2840\u284b\u2840\u2800\u2800\u2800\u2800\u2800\u2818\u2810\u2800\u2800\u2800\u2810\u2812\u2806\u2830\u2806\u2866\u28a0\u2807\u2800\u2800\u2800\u28b8\u285d\u284b\u2800\u2837\u2848\u2880\u2807\u2800\u2800\n\u2800\u2800\u2800\u2818\u2846\u2847\u285c\u28c3\u281c\u28b9\u2800\u2800\u2800\u2800\u281a\u287e\u281b\u2889\u28c4\u2864\u2800\u2812\u2812\u2808\u2809\u2809\u2809\u2809\u2809\u2809\u2801\u2810\u2896\u28a4\u2840\u28b8\u2804\u2800\u2800\u2800\u2870\u2820\u2859\u28cc\u28a7\u2858\u285c\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u28a3\u281e\u2844\u2875\u2840\u281a\u2800\u2800\u2800\u2800\u2800\u28a5\u2800\u28ff\u2800\u2801\u2880\u28e0\u28f4\u28f6\u28fe\u28ff\u28ff\u28ff\u28f7\u28f6\u28f6\u28c4\u2840\u28b8\u2801\u287e\u2851\u2821\u2804\u2800\u2825\u2850\u281e\u2854\u2815\u2870\u2801\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2838\u28cc\u2808\u284a\u2804\u2800\u2840\u2800\u2800\u2800\u2804\u2899\u2806\u2818\u28b6\u28fe\u28ff\u283f\u281b\u2809\u2809\u2809\u2809\u2809\u2809\u2819\u283f\u28ff\u287f\u2801\u2830\u2816\u281a\u280a\u2800\u2819\u28c6\u2808\u285e\u2881\u2814\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2808\u28a6\u2848\u2800\u2800\u2871\u2846\u2880\u2825\u2820\u2828\u28da\u2844\u2800\u283b\u28a4\u2854\u2812\u2800\u2800\u2809\u2809\u2809\u2809\u2810\u2862\u280d\u2854\u2802\u28ad\u2860\u2800\u2800\u2800\u28a0\u2859\u2860\u28ad\u2885\u2800\u2800\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2813\u28b5\u284a\u2869\u282e\u284c\u28c4\u28ad\u285b\u28f8\u2866\u28c4\u2840\u2808\u2813\u2812\u2812\u2810\u2812\u2812\u2802\u2801\u2820\u2890\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u289c\u28aa\u2847\u281a\u2844\u2827\u2840\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2889\u2821\u2836\u282c\u282d\u28bd\u283f\u28bf\u281d\u28c9\u285f\u283f\u28f6\u28a6\u28e4\u28e4\u28e4\u28e4\u28f6\u28fe\u28ff\u28c7\u2823\u2804\u2824\u2814\u2809\u2809\u2811\u2802\u2841\u2828\u28c0\u2837\u2800\u28b0\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u28d4\u286a\u28e5\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2819\u2887\u2800\u2808\u283a\u28ff\u28ff\u28bf\u28ff\u28ff\u281f\u2878\u281a\u2809\u2801\u2801\u2800\u2800\u2800\u2880\u2820\u2891\u2822\u28a5\u2805\u2892\u2841\u2800\u2800\u2800\u2800\n\u2800\u2800\u2800\u2800\u2800\u2800\u281c\u2801\u2800\u2808\u2800\u2809\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2832\u2884\u2808\u2809\u28b9\u283b\u282f\u2803\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2808\u2809\u2818\u2846\u2800\u2800\u2800\n\u2800\u2800\u2800\u2880\u2814\u2809\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2880\u2800\u2800\u2840\u2800\u2860\u2815\u2812\u2809\u2800\u2800\u2800\u28e0\u281e\u2814\u2800\u2800\u2800\u2800\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2811\u2800\u2800\u2800\n\u2800\u2800\u2800\u28b8\u2800\u2800\u2840\u2840\u28e0\u28c1\u28e0\u28e5\u28f6\u28f6\u28fe\u28f7\u28f6\u28e4\u28e2\u28c6\u2865\u28e1\u283c\u2800\u2800\u28e0\u2860\u2810\u2800\u283b\u280b\u28c0\u2800\u2840\u28c4\u28ee\u28ac\u285a\u2894\u2886\u28c0\u28e0\u2801\u2880\u2848\u2890\u28a8\u2800\u2800\u2800\n\u2800\u2800\u2800\u28b8\u28a8\u28e0\u28f5\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u280a\u2800\u2800\u2800\u281b\u284b\u2840\u2880\u28f4\u28fc\u28fe\u28fe\u28ff\u28ff\u28ff\u28ff\u28f7\u28fe\u28ff\u28f7\u28f6\u28ff\u28ec\u28e7\u28f2\u28fc\u2800\u2800\u2800\n\u2800\u2800\u2800\u28a8\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u283f\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28f4\u28f1\u2844\u28c6\u28e6\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u2800\u2800\n\u2800\u2800\u2880\u28fe\u28ff\u28ff\u28ff\u28ff\u280d\u2800\u2880\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2809\u2809\u281b\u283b\u28ff\u281f\u281b\u281b\u281b\u28bf\u281b\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2809\u2819\u285b\u2809\u28f9\u28ff\u28ff\u28ff\u28ff\u28ff\u28c6\u2800\n\u2800\u2800\u28fc\u28ff\u287f\u281f\u281b\u281b\u28a3\u2800\u28b8\u2800\u2840\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2847\u2800\u2800\u2800\u2800\u28b8\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u28b0\u2801\u2850\u2809\u2809\u2809\u2809\u2809\u281b\u283b\u2844\n\u2800\u2858\u280b\u2809\u2800\u2800\u2800\u2800\u2800\u28a1\u2838\u2800\u2803\u2800\u2880\u28c0\u28c0\u28e4\u28e4\u28e4\u28e4\u28e4\u28f8\u28e0\u28e4\u28e4\u28e4\u28f8\u28c0\u28e4\u28e4\u28e4\u28e4\u28e4\u28e4\u28c4\u28c0\u28c0\u2840\u2878\u28b0\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2800\u2830\n\u28b0\u2881\u28c0\u28e4\u28e4\u28e4\u28e4\u28c4\u2800\u2800\u28f4\u28fe\u28f6\u28ff\u28ff\u283f\u283f\u283f\u283f\u283f\u283f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f6\u28f6\u28e4\u28e4\u2840\u28c0\u28c0\u28c0\u28c0\u28c0\n\u28fe\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28f7\u28c4\u28bb\u28ff\u28ff\u280f\u2800\u2800\u2800\u2800\u2800\u2880\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u287f\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28fe\u28ff\u287f\u2800\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2809\u2819\u283b\u28bf\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28b0\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28ff\u28ef\u28ff\u28fb\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\n\u283f\u281b\u2809\u2809\u2809\u2800\u28c8\u28ed\u28ff\u28ff\u28ff\u28ff\u28e7\u2800\u2800\u2800\u2800\u2800\u28fc\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u2847\u2800\u2800\u2800\u2800\u2800\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u28ff\u282b\u2809\u2809\u2812\u2822\u2884\u2808\u2819\u283b  /*/\n\n#include <bits/stdc++.h>\nusing namespace std;\nconst int M = 1e9 + 7;\n#define endl \"\\n\"\n#define yes cout << \"YES\" << endl\n#define no cout << \"NO\" << endl\n#define all(a) (a).begin(), (a).end()\n#define im_Fast_af_Boii               \\\n    ios_base::sync_with_stdio(false); \\\n    cin.tie(0);\n// #define ll long long int\n#define mii map<int, int>\n#define watch(x) cout << (#x) << \"=\" << (x) << '\\n'\n#define mset(d, val) memset(d, val, sizeof(d))\n#define cbug   \\\n    if (DEBUG) \\\n    cout\n#define setp(x) cout << fixed << setprecision(x)\n#define sz(x) (int)(x).size()\n// #define all(x) begin(x), end(x)\n#define forn(i, a, b) for (int i = (a); i < (b); i++)\n#define fore(i, a, b) for (int i = (a); i <= (b); i++)\n#define print(arr) forn(i, 0, arr.size()) cout << arr[i] << \" \"\n#define scan(arr) forn(i, 0, arr.size()) cin >> arr[i]\n#define pb push_back\n#define F first\n#define S second\n#define fbo find_by_order\n#define ook order_of_key\ntypedef long long int ll;\ntypedef long double ld;\ntypedef pair<ll, ll> ii;\ntypedef vector<ll> vi;\ntypedef vector<ii> vii;\nvoid __print(int x) { cerr << x; }\nvoid __print(long x) { cerr << x; }\nvoid __print(long long x) { cerr << x; }\nvoid __print(unsigned x) { cerr << x; }\nvoid __print(unsigned long x) { cerr << x; }\nvoid __print(unsigned long long x) { cerr << x; }\nvoid __print(float x) { cerr << x; }\nvoid __print(double x) { cerr << x; }\nvoid __print(long double x) { cerr << x; }\nvoid __print(char x) { cerr << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cerr << (x ? \"true\" : \"false\"); }\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x)\n{\n    cerr << '{';\n    __print(x.first);\n    cerr << ',';\n    __print(x.second);\n    cerr << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x)\n{\n    int f = 0;\n    cerr << '{';\n    for (auto &i : x)\n        cerr << (f++ ? \",\" : \"\"), __print(i);\n    cerr << \"}\";\n}\nvoid _print() { cerr << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v)\n{\n    __print(t);\n    if (sizeof...(v))\n        cerr << \", \";\n    _print(v...);\n}\n#ifndef ONLINE_JUDGE\n#define debug(x...)               \\\n    cerr << \"[\" << #x << \"] = [\"; \\\n    _print(x)\n#else\n#define debug(x...)\n#endif\nclass Solution {\npublic:\npair<int, int> bfs(const vector<vector<int>>& tree, int start) {\n    int n = tree.size();\n    vector<int> dist(n, -1);\n    queue<int> q;\n    q.push(start);\n    dist[start] = 0;\n    int furthest_node = start;\n    int max_dist = 0;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (int neighbor : tree[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                if (dist[neighbor] > max_dist) {\n                    max_dist = dist[neighbor];\n                    furthest_node = neighbor;\n                }\n            }\n        }\n    }\n\n    return {furthest_node, max_dist};\n}\n\n// Function to calculate the diameter of a tree\nint calculate_diameter(const vector<vector<int>>& tree) {\n    if (tree.empty()) return 0;\n    pair<int, int> first_bfs = bfs(tree, 0);\n    pair<int, int> second_bfs = bfs(tree, first_bfs.first);\n    return second_bfs.second;\n}\n\n// Function to find the minimum possible diameter of the resulting tree after connecting the two trees\nint minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n    // Calculate the number of nodes in both trees\n    unordered_set<int> nodes1, nodes2;\n    for (const auto& edge : edges1) {\n        nodes1.insert(edge[0]);\n        nodes1.insert(edge[1]);\n    }\n    for (const auto& edge : edges2) {\n        nodes2.insert(edge[0]);\n        nodes2.insert(edge[1]);\n    }\n    int n = nodes1.size();\n    int m = nodes2.size();\n\n    vector<vector<int>> tree1(n), tree2(m);\n\n    // Build the adjacency list for both trees\n    for (const auto& edge : edges1) {\n        tree1[edge[0]].push_back(edge[1]);\n        tree1[edge[1]].push_back(edge[0]);\n    }\n\n    for (const auto& edge : edges2) {\n        tree2[edge[0]].push_back(edge[1]);\n        tree2[edge[1]].push_back(edge[0]);\n    }\n\n    // Calculate the diameters of the two trees\n    int diameter1 = calculate_diameter(tree1);\n    int diameter2 = calculate_diameter(tree2);\n\n    // The minimum possible diameter after connecting the two trees\n    int min_diameter = max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n\n    return min_diameter;\n}\n};",
    "submit_ts": 1719719462.0
}