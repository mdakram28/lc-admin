{
    "username": "chintawar",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    int search(const string& word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                return INT_MAX;\n            }\n            node = node->children[ch];\n        }\n        return node->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = words.size();\n        for (int i = 0; i < n; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        int m = target.size();\n        vector<int> dp(m + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < m; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < m; j++) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[m] == INT_MAX ? -1 : dp[m];\n    }\n};",
    "submit_ts": "1720322728",
    "subm_id": "1312357566"
}