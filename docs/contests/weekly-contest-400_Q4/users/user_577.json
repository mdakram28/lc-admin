{
    "username": "goldenland",
    "submission": "class Solution {\npublic:\n    \n    static const long long lg = 20;\n    static const long long N = 1e5 + 7;\n    int sp[lg][N];\n    \n    Solution() {\n        memset(sp, -1, sizeof sp); \n    }  \n    \n    int get(int l, int r) {\n        if (l > r) return 0;\n        int k = log2(r - l + 1);\n        return sp[k][l] & sp[k][r - (1 << k) + 1];\n    }\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        for (int i = 1; i <= n; i ++)\n                sp[0][i] = nums[i - 1];\n    \n        for (int i = 1; i < lg; i ++)\n            for (int j = 1; j + (1 << i) - 1 <= n; j ++) {\n                sp[i][j] = sp[i - 1][j] & sp[i - 1][j + (1 << (i - 1))];\n            }\n        \n        int l = 1;\n        int ans = 2e9;\n        for (int r = 1; r <= n; r ++) {\n            int cur = nums[r - 1];\n            ans = min(ans, abs(k - nums[r - 1]));\n            \n            while (l <= r && get(l, r) <= k) {\n                ans = min(ans, abs(k - get(l, r)));\n                l ++;\n            }\n            \n            ans = min(ans, abs(k - get(l, r)));\n            // cout << l << ' ' << r << ' ' << get(l, r) << '\\n';\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717299203.0
}