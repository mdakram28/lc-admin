{
    "username": "oyvindhg",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        diffs = {}\n        n = len(nums)\n        for i in range(n // 2):\n            diff = abs(nums[i] - nums[n - i - 1])\n            diffs[diff] = diffs.get(diff, 0) + 1\n        sorted_diffs = sorted(list(diffs.items()), key=lambda x: x[1])\n        \n        print(sorted_diffs)\n\n        least_changes = n\n        changed_pair = False\n        for goal_diff, count in reversed(sorted_diffs):\n            if changed_pair and current_changes < n // 2 - count:\n                return current_changes\n            changed_pair = False\n            current_changes = 0\n            for i in range(n // 2):\n                diff = abs(nums[i] - nums[n - i - 1])\n                print(diff)\n                if diff == goal_diff:\n                    continue\n                if k - nums[i] >= goal_diff or nums[i] >= goal_diff or nums[n - i - 1] >= goal_diff or k - nums[n - i - 1] >= goal_diff:\n                    current_changes += 1\n                else:\n                    current_changes += 2\n                    changed_pair = True\n            if not changed_pair:\n                return current_changes\n            least_changes = min(current_changes, least_changes)\n        return least_changes\n\n",
    "submit_ts": "1721488931",
    "subm_id": "1327437570"
}