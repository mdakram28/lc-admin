{
    "username": "xzzzz",
    "submission": "class Solution {\npublic:\n    class Trie {\n    public:\n        struct TrieNode {\n            unordered_map<char, TrieNode*> children;\n            vector<int> wordIndices;\n        };\n\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const string& word, int index) {\n            TrieNode* node = root;\n            for (char ch : word) {\n                if (node->children.find(ch) == node->children.end()) {\n                    node->children[ch] = new TrieNode();\n                }\n                node = node->children[ch];\n            }\n            node->wordIndices.push_back(index);\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n\n        // Build the Trie with the given words\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Trie::TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                for (int index : node->wordIndices) {\n                    int len = words[index].size();\n                    if (j - i + 1 == len) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n    \n    // memoization :\n//     int minCostHelper(string& target, vector<string>& words, vector<int>& costs, int pos, unordered_map<int, int>& memo) {\n//         if (pos == target.size()) return 0;\n//         if (memo.find(pos) != memo.end()) return memo[pos];\n\n//         int minCost = INT_MAX;\n//         for (int i = 0; i < words.size(); ++i) {\n//             int len = words[i].size();\n//             if (pos + len <= target.size() && target.substr(pos, len) == words[i]) {\n//                 int cost = minCostHelper(target, words, costs, pos + len, memo);\n//                 if (cost != INT_MAX) {\n//                     minCost = min(minCost, cost + costs[i]);\n//                 }\n//             }\n//         }\n\n//         memo[pos] = minCost;\n//         return minCost;\n//     }\n\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         unordered_map<int, int> memo;\n//         int result = minCostHelper(target, words, costs, 0, memo);\n//         return result == INT_MAX ? -1 : result;\n//     }\n    \n    \n    // naive:\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         int n = target.size();\n//         vector<int> dp(n + 1, INT_MAX);\n//         dp[0] = 0;\n\n//         for (int i = 1; i <= n; ++i) {\n//             for (int j = 0; j < words.size(); ++j) {\n//                 int len = words[j].size();\n//                 if (i >= len && target.substr(i - len, len) == words[j]) {\n//                     if (dp[i - len] != INT_MAX) {\n//                         dp[i] = min(dp[i], dp[i - len] + costs[j]);\n//                     }\n//                 }\n//             }\n//         }\n\n//         return dp[n] == INT_MAX ? -1 : dp[n];\n//     }\n};",
    "submit_ts": "1720321590",
    "subm_id": "1312326958"
}