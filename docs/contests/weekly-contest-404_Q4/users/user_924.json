{
    "username": "xiao_ming_",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n\n#         def dia(tree):\n\n#             t = {}\n            \n#             for a, b in tree:\n#                 if a not in t:\n#                     t[a] = [b]\n#                 else:\n#                     t[a].append(b)\n#                 if b not in t:\n#                     t[b] = [a]\n#                 else:\n#                     t[b].append(a)\n#             vis = [0] * 10100\n#             d = 0\n#             s = 0\n#             tmax = 0\n#             des = 0\n#             def dfs(pre, cur):\n#                 nonlocal d, s, tmax, des\n#                 vis[cur] = 1\n#                 if pre != -1:\n#                     s += 1\n#                     if tmax < s:\n#                         tmax=  s\n#                         des = cur\n#                 if cur in t:\n#                     for i in t[cur]:\n#                         if vis[i] != 1:\n#                             dfs(cur, i)\n#                 vis[cur] = 0\n#                 s -= 1\n            \n#             dfs(-1, 0)\n#             dfs(-1, des)\n#             return tmax\n        def dfs(node, graph, visited, distance):\n            visited[node] = True\n            max_distance = distance\n            farthest_node = node\n\n            for neighbor in graph[node]:\n                if not visited[neighbor]:\n                    current_distance, current_farthest_node = dfs(neighbor, graph, visited, distance + 1)\n                    if current_distance > max_distance:\n                        max_distance = current_distance\n                        farthest_node = current_farthest_node\n\n            return max_distance, farthest_node\n\n\n        def dia(edges):\n            if not edges:\n                return 0\n\n            graph = defaultdict(list)\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n\n            visited = [False] * (len(graph) + 1)\n            _, farthest_node_from_start = dfs(0, graph, visited, 0)\n\n            visited = [False] * (len(graph) + 1)\n            max_distance, _ = dfs(farthest_node_from_start, graph, visited, 0)\n\n            return max_distance\n        if len(edges1) == 0:\n            d1 = 0\n        else:\n            d1 = dia(edges1)\n        if len(edges2) == 0:\n            d2 = 0\n        else:\n            d2 = dia(edges2)\n        # if d1 == 0:\n        #     return d2\n        # if d2 == 0:\n        #     return d1\n        # print(d1, d2)\n        ans = max(d1, d2)\n        if d1 % 2 == 1:\n            d1 += 1\n        if d2 % 2 == 1:\n            d2 += 1\n        ans = max(ans, d1 // 2 + d2 // 2 + 1)\n        return ans",
    "submit_ts": 1719719713.0
}