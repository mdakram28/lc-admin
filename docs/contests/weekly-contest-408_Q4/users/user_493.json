{
    "username": "explorer23",
    "submission": "\nclass Solution {\npublic:\n    int funcu(vector<vector<int>> &vecto, int low, int found, int found__, int val) {\n    queue<int> que;\n    vector<int> check(val + 4, 0);\n    que.push(low);\n    check[low] = 1;\n    \n    while (!que.empty()) {\n        int u = que.front();\n        que.pop();\n        for (int v : vecto[u]) {\n            if (!check[v]) {\n                que.push(v);\n                check[v] = 1;\n            }\n        }\n    }\n    return check[found] || check[found__];\n}\n    \n    bool canReachCorner(int x_axis, int y_axis, vector<vector<int>>& round) {\n         vector<pair<pair<int, int>, int>> rect_circle(round.size());\n         vector<vector<int>> vecto(round.size() + 4);\n        int num_rect_circle=round.size();\n        \n        for (int i = 0; i < num_rect_circle; ++i) {\n            rect_circle[i].first.first=round[i][0];\n            rect_circle[i].first.second=round[i][1];\n            rect_circle[i].second=round[i][2];\n        }\n        \n         for (int i = 0; i < num_rect_circle; ++i) {\n             \n            if (rect_circle[i].first.first <= rect_circle[i].second) {\n                vecto[num_rect_circle].push_back(i);\n                vecto[i].push_back(num_rect_circle);\n            }\n            if (x_axis - rect_circle[i].first.first <= rect_circle[i].second) {\n                vecto[num_rect_circle + 2].push_back(i);\n                vecto[i].push_back(num_rect_circle + 2);\n            }\n            if (rect_circle[i].first.second <= rect_circle[i].second) {\n                vecto[num_rect_circle + 1].push_back(i);\n                vecto[i].push_back(num_rect_circle + 1);\n            }\n            if (y_axis - rect_circle[i].first.second <= rect_circle[i].second) {\n                vecto[num_rect_circle + 3].push_back(i);\n                vecto[i].push_back(num_rect_circle + 3);\n            }\n            for (int j = i + 1; j < num_rect_circle; ++j) {\n                double distance = sqrt(pow(rect_circle[i].first.first - rect_circle[j].first.first, 2) +\n                                       pow(rect_circle[i].first.second - rect_circle[j].first.second, 2));\n                int radius_sum = rect_circle[i].second + rect_circle[j].second;\n                if (radius_sum >= distance) {\n                    vecto[i].push_back(j);\n                    vecto[j].push_back(i);\n                }\n            }\n        }\n        \n        int ans = 0;\n      \n        ans = max(ans, funcu(vecto, num_rect_circle, num_rect_circle + 1, num_rect_circle + 2, num_rect_circle + 4)); \n       ans = max(ans, funcu(vecto, num_rect_circle + 3, num_rect_circle + 2, num_rect_circle + 1, num_rect_circle + 4)); \n        if (ans){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722137903",
    "subm_id": "1335776859"
}