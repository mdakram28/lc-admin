{
    "username": "lets_go_boys",
    "submission": "class Solution {\npublic:\n    \nclass SparseTable\n{\nprivate:\n    int n, maxLog;\n    vector<int> a;\n    vector<vector<int>> rangeOr, rangeAnd;\n\npublic:\n    SparseTable(const vector<int> &v)\n    {\n        n = (int)v.size();\n        a = v;\n        maxLog = 31 - __builtin_clz(n) + 1;\n        rangeOr.resize(maxLog);\n        rangeAnd.resize(maxLog);\n    }\n\n    void buildAndTable()\n    {\n        rangeAnd[0] = a;\n        for (int j = 1; j < maxLog; j++)\n        {\n            rangeAnd[j].resize(n - (1 << j) + 1);\n            for (int i = 0; i <= n - (1 << j); i++)\n            {\n                rangeAnd[j][i] = (rangeAnd[j - 1][i] & rangeAnd[j - 1][i + (1 << (j - 1))]);\n            }\n        }\n    }\n\n    void buildOrTable()\n    {\n        rangeOr[0] = a;\n        for (int j = 1; j < maxLog; j++)\n        {\n            rangeOr[j].resize(n - (1 << j) + 1);\n            for (int i = 0; i <= n - (1 << j); i++)\n            {\n                rangeOr[j][i] = (rangeOr[j - 1][i] | rangeOr[j - 1][i + (1 << (j - 1))]);\n            }\n        }\n    }\n\n    int getRangeAnd(int from, int to)\n    {\n        int lg = 31 - __builtin_clz(to - from + 1);\n        return (rangeAnd[lg][from] & rangeAnd[lg][to - (1 << lg) + 1]);\n    }\n\n    int getRangeOr(int from, int to)\n    {\n        int lg = 31 - __builtin_clz(to - from + 1);\n        return (rangeOr[lg][from] | rangeOr[lg][to - (1 << lg) + 1]);\n    }\n};\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        \n        \n        SparseTable sp(nums);\n        \n        sp.buildAndTable();  \n        \n        int n=nums.size();\n        long long ans=0;\n        \n        for(int i=0;i<n;i++)\n        {\n            int l=i,r=i-1;\n            \n            int lo=i,hi=n-1;\n            \n            while(lo<=hi)\n            {\n                int mid=(lo+hi)/2;\n                \n                int an=sp.getRangeAnd(i,mid);\n                \n                if(an>k)\n                {\n                    lo=mid+1;\n                }\n                else\n                {\n                    if(an==k)\n                        l=mid;\n                    \n                    hi=mid-1;\n                }\n            }\n            \n            \n            lo=i,hi=n-1;\n            \n            while(lo<=hi)\n            {\n                int mid=(lo+hi)/2;\n                \n                int an=sp.getRangeAnd(i,mid);\n                \n                if(an<k){\n                    hi=mid-1;\n                }\n                else{\n                    \n                     if(an==k)\n                        r=mid;\n                     lo=mid+1;        \n                }\n            }\n            \n            ans+=r-l+1;\n            \n        }\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": "1720279018",
    "subm_id": "1311733837"
}