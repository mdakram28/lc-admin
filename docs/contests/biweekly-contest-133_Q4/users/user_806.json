{
    "username": "nikesh1124",
    "submission": "class Solution {\npublic:\n        int mod = 1e9+7;\n        int mnv = 400;\n       map<int, int> mp;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n        vector<vector<long long>> dp(n + 1,vector<long long>(mnv + 1, 0));\n        dp[0][0] = 1;\n               for (auto req : requirements) {\n                    mp[req[0] + 1] = req[1];\n                }\n                    for (int length = 1; length <= n; ++length) {\n                        for (int inv = 0; inv <= mnv; ++inv) {\n                            for (int newPos = 0; newPos < length; ++newPos) {\n                                int prevInv = inv - newPos;\n                                if (prevInv >= 0) {\n                                    dp[length][inv] = (dp[length][inv] + dp[length - 1][prevInv]) % mod;\n                                }\n                            }\n                        }\n\n                    if (mp.find(length) != mp.end()) {\n                        int targetInv = mp[length];\n                        for (int inv = 0; inv <= mnv; ++inv) {\n                            if (inv != targetInv) {\n                                dp[length][inv] = 0;\n                            }\n                        }\n                    }\n            }\n         long long ans = 0;\n        for (long long count : dp[n]) {\n            ans = (ans + count) % mod;\n        }\n\n        return ans;\n    }\n       \n};",
    "submit_ts": 1719071275.0
}