{
    "username": "jai9119y",
    "submission": "from collections import deque\nfrom typing import List\nimport math\nclass Solution:\n    def solve(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        nc = len(circles)\n        g = [[] for _ in range(nc + 4)]\n        \n        for i in range(nc):\n            if circles[i][0] <= circles[i][2]:\n                g[nc].append(i)\n                g[i].append(nc)\n            if X - circles[i][0] <= circles[i][2]:\n                g[nc + 2].append(i)\n                g[i].append(nc + 2)\n            if circles[i][1] <= circles[i][2]:\n                g[nc + 1].append(i)\n                g[i].append(nc + 1)\n            if Y - circles[i][1] <= circles[i][2]:\n                g[nc + 3].append(i)\n                g[i].append(nc + 3)\n            for j in range(i + 1, nc):\n                dist = math.sqrt((circles[i][0] - circles[j][0]) ** 2 + (circles[i][1] - circles[j][1]) ** 2)\n                rad_sum = circles[i][2] + circles[j][2]\n                if rad_sum >= dist:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        is_blocked = 0\n        is_blocked = max(is_blocked, self.bfs(g, nc, nc + 1, nc + 2, nc + 4))\n        is_blocked = max(is_blocked, self.bfs(g, nc + 3, nc + 2, nc + 1, nc + 4))\n        \n        return is_blocked == 0\n    \n    def bfs(self, g: List[List[int]], s: int, t1: int, t2: int, n: int) -> int:\n        q = deque([s])\n        vis = [False] * (n + 4)\n        vis[s] = True\n        \n        while q:\n            u = q.popleft()\n            for v in g[u]:\n                if not vis[v]:\n                    q.append(v)\n                    vis[v] = True\n        \n        return 1 if vis[t1] or vis[t2] else 0\n    \n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        return self.solve(X, Y, circles)",
    "submit_ts": "1722138183",
    "subm_id": "1335784293"
}