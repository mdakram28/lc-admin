{
    "username": "Aruj Bansal",
    "submission": "class Solution {\npublic:    \n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = (int) s.size();\n        int q = (int) queries.size();\n        \n        vector<int> earliest_left_index(n);\n        vector<long long> count_sum_prefix(n, 0);\n        array<int, 2> count = {0, 0};\n\n        for (int i = 0, j = 0; i < n; i++) {\n            count[s[i] - '0']++;\n\n            while (j < i && !is_valid(count, k)) {\n                count[s[j] - '0']--;\n                j++;\n            }\n\n            earliest_left_index[i] = j;\n\n            int segment_length = i - j + 1;\n            count_sum_prefix[i] = segment_length + (i > 0 ? count_sum_prefix[i - 1] : 0);\n            // cout << i << \" \" << j << \" \" << n_choose_2(segment_length) << \"\\n\";\n        }\n\n        vector<long long> ans;\n        for (const auto &vec : queries) {\n            int l = vec[0], r = vec[1];\n\n            int index = find_splitting_point(earliest_left_index, l, r);\n\n            long long n_choose_2_sum = (index >= l ? n_choose_2(index - l + 1) : 0);\n            long long partial_sum = get_sum(index + 1, r, count_sum_prefix);\n\n            // cout << index + 1 << \" \" << r << \"\\n\";\n\n            ans.push_back(n_choose_2_sum + partial_sum);\n        }\n\n        // for (int i = 0; i < n; i++) {\n        //     cout << earliest_left_index[i] << \" \";\n        // }\n\n        return ans;\n    }\n\n    int find_splitting_point(const vector<int> &earliest_left_index, int l, int r) {\n        int low = l, high = r, index = l - 1;\n\n        while (low <= high) {\n            int mid = (low + high) / 2;\n            if (earliest_left_index[mid] <= l) {\n                low = mid + 1;\n                index = mid;\n                // cout << mid << \" \" << earliest_left_index[mid] << \"\\n\";\n            } else high = mid - 1;\n        }\n\n        // cout << l << \" \" << r << \" \" << index << \"\\n\";\n\n        return index;\n    }\n\n    bool is_valid(const array<int, 2> &count, int k) {\n        return count[0] <= k || count[1] <= k;\n    }\n\n    long long n_choose_2(int n) {\n        long long n_ll = (long long) n;\n        return (n_ll * (n_ll + 1)) / 2;\n    }\n\n    long long get_sum(int l, int r, const vector<long long> &pref_sum) {\n        return pref_sum[r] - (l > 0 ? pref_sum[l - 1] : 0);\n    }\n};",
    "submit_ts": "1723951489",
    "subm_id": "1359772772"
}