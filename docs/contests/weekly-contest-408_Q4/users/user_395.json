{
    "username": "Acquiesce",
    "submission": "class Solution\n{\npublic:\n    bool canReachCorner(int x, int y, vector<vector<int>> &c, int ans = 0)\n    {\n        int n = size(c);\n        vector<vector<int>> adj(n + 4);\n        \n        auto f = [&](int src, int k1, int k2)\n        {\n            queue<int> q; vector<int> vis(n + 4); q.push(src);\n            vis[src] = 1;\n\n            while (size(q))\n            {\n                int curNode = q.front(); q.pop();\n                for (int node : adj[curNode]) if (!vis[node]) q.push(node),vis[node] = 1;\n            }\n\n            return vis[k1] or vis[k2];\n        };\n        \n        for (int i = 0; i < n; i++)\n        {\n            if (c[i][0] <= c[i][2])         adj[n].push_back(i),    adj[i].push_back(n);\n            if (c[i][1] <= c[i][2])         adj[n + 1].push_back(i),adj[i].push_back(n + 1);\n            if (x - c[i][0] <= c[i][2])     adj[n + 2].push_back(i),adj[i].push_back(n + 2);\n            if (y - c[i][1] <= c[i][2])     adj[n + 3].push_back(i),adj[i].push_back(n + 3);\n\n            for (int j = i + 1; j < n; j++)\n            {\n                float d = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n                if (d <= c[i][2] + c[j][2])  adj[i].push_back(j),adj[j].push_back(i);\n            }\n        }\n\n        ans = max(f(n, n + 1, n + 2), f(n + 3, n + 2, n + 1));\n        return ans == 0;\n    }\n};\n",
    "submit_ts": "1722137575",
    "subm_id": "1335767756"
}