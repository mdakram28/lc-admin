{
    "username": "Harshkriplani",
    "submission": "class Solution {\npublic:\n  \n    vector<vector<int>> g;\n#define ll long long\nvector<int>in,out;\n\n// compute in[] array\n//       for indp always use tail recursion........\n//        for outdp always use head recursion.........\n//indp..node..\n//out ..child..\n    void dfs1(ll node, ll par) {\n\tin[node] = 0LL;\n\tfor (auto child : g[node]) {\n\t\tif (child == par)continue;\n\t\tdfs1(child, node);\n\t\tin[node] = max(in[node], 1 + in[child]);\n\t}\n}\n\n// compute out[] array\nvoid dfs2(ll node, ll par) {\n\tll mx1 = -1;\n\tll mx2 = -1;\n\n\tfor (auto child : g[node]) {\n\t\tif (child == par) continue;\n\t\tif (in[child] >= mx1) mx2 = mx1, mx1 = in[child];\n\t\telse if (in[child] > mx2) mx2 = in[child];\n\t}\n\n\tfor (auto child : g[node]) {\n\t\tif (child == par) continue;\n\t\tll use = mx1;\n\t\tif (mx1 == in[child]) use = mx2;\n\t\tout[child] = max(1LL + out[node], 2LL + use);\n\t\tdfs2(child, node);\n\t}\n}\n \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        g.clear();\n        g.resize(edges1.size()+2);\n         for(auto i:edges1)\n        {\n            g[i[0]+1].push_back(i[1]+1);\n            g[i[1]+1].push_back(i[0]+1);\n        }\n        \n        in=vector<int>(edges1.size()+2,0);\n         out=vector<int>(edges1.size()+2,0);\n        dfs1(1, 0);\n\tdfs2(1, 0);\n        int ans1=(int)1e9;\n        int n=edges1.size()+1;\n          int d1=0;\n        for(int i=1;i<=n;i++)\n        {\n            d1=max(d1,in[i]+out[i]);\n        }\n        for (ll i = 1; i <= n; i++) ans1= min(ans1,max(in[i], out[i]));\n        g.clear();\n        g.resize(edges2.size()+2);\n          for(auto i:edges2)\n        {\n            g[i[0]+1].push_back(i[1]+1);\n            g[i[1]+1].push_back(i[0]+1);\n        }\n        in=vector<int>(edges2.size()+2,0);\n         out=vector<int>(edges2.size()+2,0);\n        dfs1(1, 0);\n\tdfs2(1, 0);\n        int ans2=(int)1e9;\n        n=edges2.size()+1;\n         for (ll i = 1; i <= n; i++) ans2= min(ans2,max(in[i], out[i]));\n         int d2=0;\n        for(int i=1;i<=n;i++)\n        {\n            d2=max(d2,in[i]+out[i]);\n        }\n        cout<<d1<<\" \"<<d2<<endl;\n        cout<<ans1<<\" \"<<ans2<<endl;\n      \n       \n        \n        \n       return  max({d1,d2,ans1+ans2+1});\n        \n    }\n};",
    "submit_ts": "1719719044",
    "subm_id": "1304432399"
}