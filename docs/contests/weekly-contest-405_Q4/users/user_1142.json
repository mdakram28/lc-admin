{
    "username": "ayush0106",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        Trie trie = new Trie();\n        // Insert words into Trie with minimum costs\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            trie.insert(word, i, cost);\n        }\n\n        // Dynamic programming to find minimum cost to form the target\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            TrieNode node = trie.root;\n            for (int j = i; j < n; j++) {\n                int idx = target.charAt(j) - 'a';\n                if (node.children[idx] == null) break; // No valid continuation in Trie\n                node = node.children[idx];\n\n                if (node.wordIndex != -1) {\n                    int wordCost = costs[node.wordIndex];\n                    int end = j + 1;\n                    dp[end] = Math.min(dp[end], dp[i] + wordCost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    int wordIndex;\n    int minCost; // Minimum cost for the word ending at this node\n    \n    TrieNode() {\n        children = new TrieNode[26]; // For lowercase English letters\n        wordIndex = -1; // Index of the word in the words array, -1 means no word ends here\n        minCost = Integer.MAX_VALUE; // Initialize with a large value\n    }\n}\n\nclass Trie {\n    TrieNode root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    public void insert(String word, int index, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int idx = c - 'a';\n            if (node.children[idx] == null) {\n                node.children[idx] = new TrieNode();\n            }\n            node = node.children[idx];\n        }\n        \n        // Update minimum cost only if this is the first occurrence or a cheaper cost\n        if (node.wordIndex == -1 || cost < node.minCost) {\n            node.wordIndex = index;\n            node.minCost = cost;\n        }\n    }\n    \n    public int getMinCost(String word) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            int idx = c - 'a';\n            if (node.children[idx] == null) {\n                return -1; // Word not found in Trie\n            }\n            node = node.children[idx];\n        }\n        return node.minCost;\n    }\n}",
    "submit_ts": "1720322044",
    "subm_id": "1312339164"
}