{
    "username": "pku_erutan",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        heap = []\n        for i in range(m) :\n            for j in range(n) :\n                heapq.heappush(heap, [board[i][j], i, j])\n                if len(heap) > 2 * (m+n) :\n                    heapq.heappop(heap)\n        min_bar = heap[0][0]\n        # \u8981\u4e48 max_heap \u88ab\u53d6\uff0c\u8981\u4e48max_heap\u540c\u884c & \u540c\u5217\u5404\u53d6\u4e00\u4e2a\u3002\n        max_heap = max(heap)\n        heap = [[v, i, j] for v, i, j in heap if not any([i==max_heap[1], j==max_heap[2]])]\n        \n        # \u5982\u679c max_heap \u88ab\u53d6\uff1a\n        to_ret = -1e99\n        for ia in range(len(heap)) :\n            for ib in range(ia+1, len(heap)) :\n                if heap[ia][1] == heap[ib][1] :\n                    continue\n                if heap[ia][2] == heap[ib][2] :\n                    continue\n                to_ret = max(to_ret, max_heap[0]+heap[ia][0]+heap[ib][0])\n        \n        # \u4e2d\u95f4\u505a\u4e9b\u9884\u5904\u7406\n        while len(heap) > m+n :\n            heapq.heappop(heap)\n        heap = sorted(heap, reverse=True)\n        \n        # \u5982\u679cmax_heap \u6ca1\u88ab\u53d6\uff1a\n        values_i = [(1<<len(heap))-1] * m\n        values_j = [(1<<len(heap))-1] * n\n        for ih, (v, i, j) in enumerate(heap) :\n            values_i[i] -=  1 << (len(heap)-1-ih)\n            values_j[j] -=  1 << (len(heap)-1-ih)\n        # print(to_ret)\n        # print(heap)\n        # print([bin(t) for t in values_i])\n        # print([bin(t) for t in values_j])\n            \n        for i in range(m) :\n            if board[i][max_heap[2]] < min_bar or i == max_heap[1]:\n                continue\n            \n            for j in range(n) :\n                if board[max_heap[1]][j] < min_bar or j == max_heap[2]:\n                    continue\n                # \u53d6 board[i][max_heap[2]]\n                # \u53d6 board[max_heap[1]][j]\n                valuet = values_i[i] & values_j[j]\n                # print(i, j, bin(valuet))\n                pos = len(bin(valuet)) - 2\n                to_ret_new = board[i][max_heap[2]]+board[max_heap[1]][j]+heap[-pos][0]\n                if to_ret_new > to_ret :\n                    # print((to_ret_new, (i, max_heap[2]),(max_heap[1],j),heap[-pos]))\n                    to_ret = to_ret_new\n        return to_ret",
    "submit_ts": "1723907826",
    "subm_id": "556327721"
}