{
    "username": "grothendieck_505",
    "submission": "\n\nclass Solution {\npublic:\n    struct Node {\n        unordered_map<char, Node*> children;\n        vector<pair<int, int>> data; \n    };\n\n    class Trie {\n    public:\n        Node* root;\n        \n        Trie() { \n            root = new Node(); \n        }\n        \n        void insert(string& word, int index, int cost) {\n            Node* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new Node();\n                node = node->children[c];\n            }\n            node->data.push_back({index, cost});\n        }\n    };\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> minCost(n + 1, INT_MAX);\n        minCost[0] = 0; \n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n            \n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto& p : node->data) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (i + len <= n) {\n                        minCost[i + len] = min(minCost[i + len], minCost[i] + wordCost);\n                    }\n                }\n            }\n        }\n        \n        return minCost[n] == INT_MAX ? -1 : minCost[n];\n    }\n};\n",
    "submit_ts": "1720322398",
    "subm_id": "1312348816"
}