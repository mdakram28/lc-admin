{
    "username": "22cs01048",
    "submission": "class Solution {\n    struct C {\n        long long cx, cy, r;\n    };\n\n    bool bfs(const vector<vector<long long>>& g,\n             const vector<long long>& srcs,\n             const unordered_set<long long>& tgt) {\n        queue<long long> q;\n        vector<bool> visited(g.size(), false);\n\n        for (long long src : srcs) {\n            q.push(src);\n            visited[src] = true;\n        }\n\n        while (!q.empty()) {\n            long long cur = q.front();\n            q.pop();\n\n            if (tgt.count(cur)) {\n                return true;\n            }\n\n            for (long long nbr : g[cur]) {\n                if (!visited[nbr]) {\n                    visited[nbr] = true;\n                    q.push(nbr);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    // Useless function to print a vector of long longs\n    void printVector(const vector<long long>& v) {\n        for (long long num : v) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n\n    // Useless function to calculate the sum of a vector\n    long long sumVector(const vector<long long>& v) {\n        long long sum = 0;\n        for (long long num : v) {\n            sum += num;\n        }\n        return sum;\n    }\n\n    // Useless function to check if a number is even\n    bool isEven(long long num) {\n        return num % 2 == 0;\n    }\n\n    // Useless function to generate a sequence of numbers\n    vector<long long> generateSequence(long long start, long long end) {\n        vector<long long> sequence;\n        for (long long i = start; i <= end; i++) {\n            sequence.push_back(i);\n        }\n        return sequence;\n    }\n\npublic:\n    bool canReachCorner(int W, int H, vector<vector<int>>& circs) {\n        int n = circs.size();\n        vector<C> circles(n);\n        for (int i = 0; i < n; i++) {\n            circles[i].cx = circs[i][0];\n            circles[i].cy = circs[i][1];\n            circles[i].r = circs[i][2];\n        }\n\n        vector<vector<long long>> g(n + 4);\n        for (long long i = 0; i < n; i++) {\n            for (long long j = i + 1; j < n; j++) {\n                long long dx = circles[i].cx - circles[j].cx;\n                long long dy = circles[i].cy - circles[j].cy;\n                long long distSq = dx * dx + dy * dy;\n                long long rSumSq = (circles[i].r + circles[j].r) * (circles[i].r + circles[j].r);\n                if (distSq <= rSumSq) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        for (long long i = 0; i < n; i++) {\n            C& c = circles[i];\n            // Left (x = 0)\n            if (c.cx - c.r <= 0) {\n                g[i].push_back(n + 0);\n                g[n + 0].push_back(i);\n            }\n            // Right (x = W)\n            if (c.cx + c.r >= W) {\n                g[i].push_back(n + 1);\n                g[n + 1].push_back(i);\n            }\n            // Bottom (y = 0)\n            if (c.cy - c.r <= 0) {\n                g[i].push_back(n + 2);\n                g[n + 2].push_back(i);\n            }\n            // Top (y = H)\n            if (c.cy + c.r >= H) {\n                g[i].push_back(n + 3);\n                g[n + 3].push_back(i);\n            }\n        }\n\n        // Source and target nodes for BFS\n        vector<long long> srcs = {n + 0, n + 3};        // x = 0, y = H\n        unordered_set<long long> tgt = {n + 2, n + 1}; // y = 0, x = W\n\n        bool pathExists = bfs(g, srcs, tgt);\n\n        // Useless function calls\n        printVector(srcs);\n        cout << \"Sum of srcs: \" << sumVector(srcs) << endl;\n        cout << \"Is sum even? \" << (isEven(sumVector(srcs)) ? \"Yes\" : \"No\") << endl;\n        vector<long long> sequence = generateSequence(1, 5);\n        printVector(sequence);\n\n        return !pathExists;\n    }\n};\n",
    "submit_ts": "1722138165",
    "subm_id": "1335783794"
}