{
    "username": "LiuWeibo",
    "submission": "using ll = long long;\nusing vi = vector<int>;\n\nclass Solution {\n    using a26i = array<int, 26>;\n    vector<a26i> trie;\n    vi price;\n    int trie_cnt = 0;\n    \n    void insert(const string& s, int cost) {\n        int u = 0;\n        for (auto c: s) {\n            int offset = c - 'a';\n            if (trie[u][offset] == 0) {\n                trie[u][offset] = ++trie_cnt;\n            }\n            u = trie[u][offset];\n        }\n        if (price[u] == -1)\n            price[u] = cost;\n        else\n            price[u] = min(price[u], cost);\n    }\n    \n    using a2i = array<int, 2>;\n    map<a2i, int> cache;\n    \n    \n    \n    int find(const string& tg, int sid, int tid) {\n        // cout << \"sid: \" << sid << \" tid: \" << tid << endl;\n        if (cache.count({sid, tid}))\n            return cache[{sid, tid}];\n        \n        if (sid == tg.size()) return tid == 0 ? 0 : INT_MAX / 2;\n        \n        int opt = INT_MAX / 2;        \n        int u = tid;\n        \n        for (int i = sid; i < tg.size(); ++i) {\n            int offset = tg[i] - 'a';\n            if (trie[u][offset] == 0) {\n                break;\n            } else {\n                u = trie[u][offset];\n                if (price[u] != -1) {\n                    // cout << \"u: \" << u << \" p[u]: \" << price[u] << \" sid: \" << i << endl;\n                    opt = min(opt, price[u] + find(tg, i + 1, 0));\n                }\n            }            \n        }\n        return cache[{sid, tid}] = opt;\n    }\n    \n    map<int, int> ca;\n    int find2(const string& tg, int sid) {\n        if (ca.count(sid))\n            return ca[sid];\n        \n        if (sid == tg.size()) return 0;\n        \n        int opt = INT_MAX / 2;        \n        int u = 0;\n        \n        for (int i = sid; i < tg.size(); ++i) {\n            int offset = tg[i] - 'a';\n            if (trie[u][offset] == 0) {\n                break;\n            } else {\n                u = trie[u][offset];\n                if (price[u] != -1) {\n                    opt = min(opt, price[u] + find2(tg, i + 1));\n                }\n            }            \n        }\n        return ca[sid] = opt;\n    }\n    \n    vi vc;\n    int find3(const string& tg, int sid) {\n        if (vc[sid] < INT_MAX / 2) {\n            return vc[sid];\n        }\n        \n        int opt = INT_MAX / 2;        \n        int u = 0;\n        \n        for (int i = sid; i > 0; --i) {\n            int offset = tg[i - 1] - 'a';\n            if (trie[u][offset] == 0) {\n                break;\n            } else {\n                u = trie[u][offset];\n                if (price[u] != -1) {\n                    opt = min(opt, price[u] + find3(tg, i - 1));\n                }\n            }            \n        }\n        return vc[sid] = opt;\n    }\n\n        \n    int find_in_trie(const string& tg) {\n        // int ret = find2(tg, 0); // TLE\n        int ret = find3(tg, tg.size());\n        return ret < INT_MAX / 2 ? ret : -1;\n    }\n    \npublic:\n    int minimumCost(string tg, vector<string>& ws, vector<int>& cs) {\n        int n = ws.size();\n        vc = vi(tg.size() + 1, INT_MAX / 2);\n        vc[0] = 0;\n        int dsize = 0;\n        for (const auto& s: ws) dsize += s.size() + 1;\n        trie = vector<a26i>(dsize);\n        price = vi(dsize, -1);\n        for(int i = 0; i < n; ++i) {\n            reverse(ws[i].begin(), ws[i].end());\n            insert(ws[i], cs[i]);\n        }\n            \n        // reverse(tg.begin(), tg.end());\n        return find_in_trie(tg);\n    }\n};",
    "submit_ts": "1720324310",
    "subm_id": "1312396439"
}