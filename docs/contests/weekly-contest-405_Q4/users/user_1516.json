{
    "username": "dhairyaseth",
    "submission": "class Solution {\n    public class TrieNode {\n        Map<Character, TrieNode> map;\n        boolean isWord;\n        int cost;\n        public TrieNode() {\n            map = new HashMap<>();\n            isWord=false;\n            cost=Integer.MAX_VALUE;\n        }\n        boolean contains(char ch) {\n            return map.containsKey(ch);\n        }\n        TrieNode get(char ch) {\n            return map.get(ch);\n        }\n        TrieNode add(char ch) {\n            if(!contains(ch)) {\n                map.put(ch, new TrieNode());\n            }\n            return map.get(ch);\n        }\n    }\n    public class Trie {\n        TrieNode root;\n        public Trie() {\n            root= new TrieNode();\n        }\n        void addWord(String word, int cost) {\n            TrieNode temp = root;\n            for(char ch : word.toCharArray()) {\n                if(temp.contains(ch)) {\n                    temp = temp.get(ch);\n                } else {\n                    temp = temp.add(ch);\n                }\n            }\n            temp.isWord=true;\n            temp.cost=Math.min(temp.cost,cost);\n        }\n    }\n    Trie t;\n    int[] costs;\n    String target;\n    int [] dp;\n    public int minimumCost(String target, String[] words, int[] costs) {\n        t = new Trie();\n        for(int i=0;i<words.length;i++) {\n            String word = words[i];\n            t.addWord(word, costs[i]);\n        }\n        this.target=target;\n        this.costs = costs;\n        dp=new int[target.length()];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        int res = solve(0);\n        return res==Integer.MAX_VALUE?-1:res;\n    }\n    int solve(int index) {\n        if(index>target.length()) {\n            return Integer.MAX_VALUE;\n        }\n        if(index == target.length()) {\n            return 0;\n        }\n        if(dp[index]==Integer.MAX_VALUE) {\n            int result = Integer.MAX_VALUE;\n            TrieNode temp = t.root;\n            for(int i=index;i<target.length();i++) {\n                char ch = target.charAt(i);\n                if(!temp.contains(ch)) {\n                    break;\n                } else {\n                    temp=temp.get(ch);\n                    if(temp.isWord) {\n                        int s = solve(i+1);\n                        //System.out.println(s);\n                        if(s==Integer.MAX_VALUE) continue;\n                        result = Math.min(result, s+temp.cost);\n                    }\n                }\n            }\n            dp[index]=result;\n        }\n        return dp[index];\n    }\n}",
    "submit_ts": "1720324093",
    "subm_id": "1312391425"
}