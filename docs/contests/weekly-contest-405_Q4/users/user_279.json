{
    "username": "kudovidit",
    "submission": "class Solution {\n    #define ll long long\n    class TrieNode {\n        public:\n            unordered_map<char, TrieNode*> children;\n            ll cost;\n            TrieNode() : cost(INT_MAX) {}\n        };\n    \n    TrieNode* buildTrie(const vector<string>& words, const vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (auto it = words[i].rbegin(); it != words[i].rend(); ++it) {\n                char c = *it;\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = min(node->cost, 1ll*costs[i]);\n        }\n        return root;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* trie = buildTrie(words, costs);\n        vector<ll> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 1; i <= target.size(); ++i) {\n            TrieNode* node = trie;\n            for (int j = i - 1; j >= 0; --j) {\n                if (node->children.find(target[j]) == node->children.end())\n                    break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX)\n                    dp[i] = min(dp[i], dp[j] + node->cost);\n            }\n        }\n        return dp[target.length()] != INT_MAX ? dp[target.size()] : -1;\n    }\n};",
    "submit_ts": "1720321696",
    "subm_id": "1312329874"
}