{
    "username": "precisepangolin",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        n = len(target)\n        dp = [float(\"inf\") for _ in range(n+1)]\n        dp[0] = 0\n        \n        words_and_costs = list(zip(words, costs))\n        filtered_words_and_costs = {}\n        for word, cost in words_and_costs:\n            if len(word) > n:\n                continue\n            if word in filtered_words_and_costs:\n                filtered_words_and_costs[word] = min(filtered_words_and_costs[word], cost)\n            else:\n                filtered_words_and_costs[word] = cost\n            \n        costs = list(filtered_words_and_costs.values())\n        words = list(filtered_words_and_costs.keys())\n        \n        trie = {}\n        \n        for word_index, word in enumerate(words):\n            root = trie\n            for char in word:\n                if char not in root:\n                    root[char] = {}\n                root = root[char]\n            root[\"index\"] = word_index\n        \n        \n        # {'a': {'b': {'d': {'e': {'f': {'index': 0}}}, 'c': {'index': 1}}}, 'd': {'index': 2, 'e': {'f': {'index': 3}}}, 'e': {'f': {'index': 4}}}\n        # print(trie)\n                    \n                \n        \n        for char_index in range(0, n+1):\n            root = trie\n            for start_index in range(char_index, n):\n                start_index_char = target[start_index]\n                if start_index_char not in root:\n                    break\n                root = root[start_index_char]\n                if \"index\" in root:\n                    # found a match\n                    word_index = root[\"index\"]\n                    # print(f\"{word_index=}\")\n                    dp[start_index+1] = min(dp[start_index+1], dp[char_index] + costs[word_index])\n                    \n                \n            \n            # for word_index, word in enumerate(words):\n            #     if char_index >= len(word) and target[char_index - len(word): char_index] == word:\n            #         dp[char_index] = min(dp[char_index], dp[char_index - len(word)] + costs[word_index])\n        \n        if dp[-1] == float(\"inf\"):\n            return -1\n        return int(dp[-1])\n        ",
    "submit_ts": "1720324736",
    "subm_id": "1312406802"
}