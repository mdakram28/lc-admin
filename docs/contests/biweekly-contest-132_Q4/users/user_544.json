{
    "username": "priyanshubhardwaj241",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n   int n = nums.size();\n    vector<vector<int>> lengthDP(n, vector<int>(k + 1, 1));\n    int maxLength = 1;\n    vector<int> tempMax(k + 1, -1);\n    vector<map<int, int>> numPosition(k + 1);\n\n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j <= k; ++j) {\n            for (int l = 0; l < j; ++l) {\n                lengthDP[i][j] = max(lengthDP[i][j], 1 + tempMax[l]);\n            }\n            if (numPosition[j].find(nums[i]) != numPosition[j].end()) {\n                lengthDP[i][j] = max(lengthDP[i][j], 1 + numPosition[j][nums[i]]);\n            }\n            maxLength = max(maxLength, lengthDP[i][j]);\n        }\n        for (int j = 0; j <= k; ++j) {\n            tempMax[j] = max(tempMax[j], lengthDP[i][j]);\n            numPosition[j][nums[i]] = max(numPosition[j][nums[i]], lengthDP[i][j]);\n        }\n    }\n\n    return maxLength;\n    }\n};",
    "submit_ts": 1717862360.0
}