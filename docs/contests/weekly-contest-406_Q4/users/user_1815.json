{
    "username": "coffeebarista",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<long long int,int>> pq;\n        \n        for(int i = 0; i < horizontalCut.size(); i++) {\n            pq.push({horizontalCut[i], 1});\n        }\n        \n        for(int i = 0; i < verticalCut.size(); i++) {\n            pq.push({verticalCut[i], -1});\n        }\n        \n        long long int vert = 0, hori = 0;\n        long long int sum = 0;\n        \n        while(!pq.empty()) {\n            long long int cost = pq.top().first;\n            int dir = pq.top().second;\n            pq.pop();\n            \n            if(dir == -1) {\n                vert++;\n                sum += (long long)cost*(hori+1);\n            }\n            else if(dir == 1) {\n                hori++;\n                sum += (long long)cost*(vert+1);\n            }\n        }\n        \n        return sum;\n        \n    }\n};",
    "submit_ts": "1720926471",
    "subm_id": "1320287260"
}