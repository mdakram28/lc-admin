{
    "username": "ForgottenSemicolon",
    "submission": "class Solution {\n    \n    int size;\n\tint [] tree;\n    \n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        size = 1;\n        while(size<2*n) size*=2;\n        tree = new int[size];\n        build(1, 0, n-1, nums, n);\n        List<Integer> ans = new ArrayList<>();\n        for(int [] q : queries){\n            if(q[0]==1){\n                ans.add(find(1, 0, n-1, q[1]+1, q[2]-1));\n            }\n            else{\n                nums[q[1]] = q[2];\n                update(1, 0, n-1, q[1], nums, n);\n                if(q[1]-1>=0) update(1, 0, n-1, q[1]-1, nums, n);\n                if(q[1]+1<n) update(1, 0, n-1, q[1]+1, nums, n);\n            }\n        }\n        return ans;\n    }\n    \n    public void build(int index, int start, int end, int [] nums, int n){\n\t    if (start == end) {\n            if(start>0 && start<n-1 && nums[start]>nums[start-1] && nums[start]>nums[start+1])    tree[index] = 1;\n            else tree[index] = 0;\n            return;\n        } \n        int mid = (start+end)/2;\n        build(2*index, start, mid, nums, n);\n        build(2*index+1, mid+1, end, nums, n);\n        tree[index] = tree[2*index]+tree[2*index+1];\n\t}\n    \n    public void update(int index, int start, int end, int idx, int [] nums, int n) {\n        if (end<idx || start>idx)    return;\n        if (start==end && idx==start) {\n            if(start>0 && start<n-1 && nums[start]>nums[start-1] && nums[start]>nums[start+1])    tree[index] = 1;\n            else tree[index] = 0;\n            return;\n        }\n        int mid = (start+end)/2;\n        update(index*2, start, mid, idx, nums, n); \n        update(index*2+1, mid+1, end, idx, nums, n); \n        tree[index] = tree[index*2] + tree[index*2+1];\n\t}\n    \n    public int find(int index, int start, int end, int l, int r){\n\t    if (start>end || start>r || end<l)  return 0;\n        if(start>=l && end<=r) return tree[index]; \n        int mid = (start+end)/2;\n        return find(index*2, start, mid, l, r)+find(index*2+1, mid+1, end, l, r);\n\t}\n}\n",
    "submit_ts": "1718509033",
    "subm_id": "1289697613"
}