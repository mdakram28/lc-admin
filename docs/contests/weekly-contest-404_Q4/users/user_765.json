{
    "username": "psb0623",
    "submission": "class Solution {\n    vector<int> v1[100010], v2[100010];\n    int dep[100010];\npublic:\n    void dfs(int cur, int prv, vector<int> v[]) {\n        for(auto nxt:v[cur]) if(nxt != prv) {\n            dep[nxt] = dep[cur] + 1;\n            dfs(nxt, cur, v);\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        //vector<vector<int>> v1(n, vector<int>());\n        //vector<vector<int>> v2(m, vector<int>());\n        for(auto t:edges1) v1[t[0]].push_back(t[1]), v1[t[1]].push_back(t[0]);\n        for(auto t:edges2) v2[t[0]].push_back(t[1]), v2[t[1]].push_back(t[0]);\n        // if(edges1.empty() && edges2.empty()) return 1;\n        \n        vector<int> ans;\n        for(auto& v:{v1, v2}) {\n            //int n = m = v.size();\n            if(v == v1 && n == 1) {\n                ans.push_back(0);\n                continue;\n            }\n            if(v == v2 && m == 1) {\n                ans.push_back(0);\n                continue;\n            }\n            int nn = v == v1 ? n : m;\n            // dep[0] = 0;\n            for(int i=0;i<nn;i++) dep[i] = 0;\n            dfs(0, -1, v);\n            int mx = 0, idx = -1;\n            for(int i=0;i<nn;i++) {\n                if(mx < dep[i]) {\n                    mx = dep[i];\n                    idx = i;\n                }\n            }\n            for(int i=0;i<nn;i++) dep[i] = 0;\n            dfs(idx, -1, v);\n            int d = 0;\n            for(int i=0;i<nn;i++) d = max(d, dep[i]);\n            ans.push_back(d);\n        }\n        return max(max(ans[0], ans[1]), (ans[0]+1) / 2 + (ans[1] + 1) / 2 + 1);\n    }\n};",
    "submit_ts": "1719718061",
    "subm_id": "1304407774"
}