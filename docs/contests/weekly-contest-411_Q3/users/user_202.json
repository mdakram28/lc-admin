{
    "username": "Hexadecimal",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        ret = ['9'] * n\n        if k in [1, 3, 9]:\n            pass\n        elif k == 2:\n            ret[0] = '8'\n            ret[-1] = '8'\n        elif k == 4:\n            if n <= 4:\n                return '8' * n\n            ret[0] = ret[1] = '8'\n            ret[-1] = ret[-2] = '8'\n        elif k == 5:\n            ret[0] = '5'\n            ret[-1] = '5'\n        elif k == 6:\n            if n == 1:\n                return '6'\n            elif n == 2:\n                return '66'\n            elif n % 2:\n                ret[0] = ret[-1] = ret[n // 2] = '8'\n            else:\n                ret[0] = ret[-1] = '8'\n                ret[n // 2 - 1] = ret[n // 2] = '7'\n        elif k == 7:\n            r = (pow(10, n, 7) - 1) % 7\n            d = 0\n            while r:\n                d += 1\n                if n % 2:\n                    r = (r - pow(10, n // 2, 7)) % 7\n                else:\n                    r = (r - pow(10, n // 2, 7) - pow(10, n // 2 - 1, 7)) % 7\n                if d == 9:\n                    break\n            ret[n // 2] = str(int(ret[n // 2]) - d)\n            if n % 2 == 0:\n                ret[n // 2 - 1] = str(int(ret[n // 2 - 1]) - d)\n        elif k == 8:\n            for i in range(min(3, n)):\n                ret[i] = '8'\n            for i in range(n - 1, max(-1, n - 4), -1):\n                ret[i] = '8'\n        return ''.join(ret)",
    "submit_ts": "1723950230",
    "subm_id": "1359740579"
}