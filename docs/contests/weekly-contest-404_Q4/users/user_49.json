{
    "username": "newird",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int diameter1 = findDiameter(edges1);\n        int diameter2 = findDiameter(edges2);\n        \n        // The minimum possible diameter after merging the two trees\n        return max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n    }\n    \nprivate:\n    int findDiameter(const vector<vector<int>>& edges) {\n        if (edges.empty()) return 0;\n        \n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        \n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        auto [farthestNode, _] = bfs(0, adj);\n        auto [__, diameter] = bfs(farthestNode, adj);\n        \n        return diameter;\n    }\n    \n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        \n        q.push(start);\n        dist[start] = 0;\n        \n        int farthestNode = start;\n        int maxDist = 0;\n        \n        while (!q.empty()) {\n            int node = q.front(); q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    \n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return {farthestNode, maxDist};\n    }\n};\n",
    "submit_ts": "1719716728",
    "subm_id": "1304372431"
}