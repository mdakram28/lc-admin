{
    "username": "VISHAL_REDDY_K",
    "submission": "#include <bits/stdc++.h>  \nusing namespace std;\ntypedef long long ll;\ntypedef long double ld;\ntypedef pair<int,int> p32;\ntypedef pair<ll,ll> p64;\ntypedef pair<double,double> pdd;\ntypedef vector<ll> v64;\ntypedef vector<int> v32;\ntypedef vector<vector<int> > vv32;\ntypedef vector<vector<ll> > vv64;\ntypedef vector<vector<p64> > vvp64;\ntypedef vector<p64> vp64;\ntypedef vector<p32> vp32;\nll MOD = 998244353;\ndouble eps = 1e-12;\n#define forn(i,e) for(ll i = 0; i < e; i++)\n#define forsn(i,s,e) for(ll i = s; i < e; i++)\n#define rforn(i,s) for(ll i = s; i >= 0; i--)\n#define rforsn(i,s,e) for(ll i = s; i >= e; i--)\n#define ln \"\\n\"\n#define dbg(x) cout<<#x<<\" = \"<<x<<ln\n#define mp make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define INF 2e18\n#define fast_cin() ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL)\n#define all(x) (x).begin(), (x).end()\n#define sz(x) ((ll)(x).size())\nclass Solution {\npublic:\n    \n \nint sz = 1e5;\nvector<int> tree;\nvoid build(int s, int e, int ind){\n    if(s==e){\n        tree[ind] =0;\n        return;\n    }\n    int mid =s+(e-s)/2;\n    build(s,mid,2*ind+1);\n    build(mid+1,e,2*ind+2);\n    tree[ind] = tree[2*ind+1] + tree[2*ind+2] +1;\n}\n\nint query(int s, int e , int l , int r , int ind){\n    if(s>r || e<l) return 0;\n    if(s>=l && e<=r) return tree[ind];\n    int mid = s+(e-s)/2;\n    int lv = query(s,mid,l,r,2*ind+1);\n    int rv = query(mid+1,e,l,r,2*ind+2);\n    return lv + rv;\n}\n\nvoid update(int s, int e, int ind, int up, int val){\n    if(up==s && up==e){\n        tree[ind] = val;\n        return;\n    }\n    if(s>up || e<up) return;\n    int mid = s+(e-s)/2;\n    update(s,mid,2*ind+1,up,val);\n    update(mid+1,e,2*ind+2,up,val);\n    tree[ind] = tree[2*ind+1]+tree[2*ind+2];\n}\n\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& q) {\n        vector<int> dist(n,0); vector<int> ans; set<int> st; \n        //calculate initial distances\n        for(int i=1;i<n;i++) dist[i] = i;\n        // insert nodes ino set\n        for(int i=0;i<n;i++) st.insert(i);\n        //access queries\n        for(int i=0;i<q.size();i++){\n            int u = q[i][0];\n            int v = q[i][1];\n            // remove nodes in which bond is formed\n            st.erase(st.lower_bound(u+1),st.lower_bound(v));\n            ans.push_back(st.size()-1);\n            //push the ans\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1722743552",
    "subm_id": "1343794516"
}