{
    "username": "cpd_007",
    "submission": "class Solution {\npublic:\n    struct TrieN {\n        unordered_map<char, TrieN*> ch;\n        vector<pair<int,int>> end;\n    };\n    class Trie {\n    public:\n        TrieN* root;\n        Trie() {\n            root = new TrieN();\n        }    \n        void insert(int i, int c, string& w) {\n            TrieN* temp = root;\n            for(char a:w) {\n                if(temp->ch.count(a) == 0) {\n                    temp->ch[a] = new TrieN();\n                }\n                temp = temp->ch[a];\n            }\n            temp->end.push_back({i, c});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // string s = \"\";\n        // ans = 0;\n        int n = target.size();\n        Trie start;\n        // vector<vector<pair<int,int>>> cont(n);\n\n        // unordered_map<long long, long long> mp;\n        for(int i = 0; i<words.size(); i++) {\n            int s = words[i].size();\n            start.insert(i, costs[i], words[i]);\n        }\n\n        vector<long long> dp(n+1, INT_MAX);\n        dp[0] = 0;\n\n        for(int i = 0; i<n; i++) {\n            if(dp[i] == INT_MAX) continue;\n            TrieN* temp = start.root;\n            for(int j = i; j<n; j++) {\n                if(temp->ch.count(target[j]) == 0) break;\n                temp = temp->ch[target[j]];\n                for(auto& k:temp->end) {\n                    int c = k.second;\n                    int ind = k.first;\n                    int s = words[ind].size();\n                    if(i + s <= n) {\n                        dp[i + s] = min(dp[i] + c, dp[i + s]);\n                    }\n                }\n            }\n        }\n        if(dp[n] == INT_MAX) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324625",
    "subm_id": "1312404083"
}