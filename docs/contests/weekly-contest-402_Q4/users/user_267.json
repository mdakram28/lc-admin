{
    "username": "xy-li",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (4 * self.n)\n        self.build(data, 0, 0, self.n - 1)\n\n    def build(self, data, node, start, end):\n        if start == end:\n            self.tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(data, left_child, start, mid)\n            self.build(data, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def update_point(self, idx, val, node=0, start=0, end=None):\n        if end is None:\n            end = self.n - 1\n\n        if start == end:\n            self.tree[node] = val\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update_point(idx, val, left_child, start, mid)\n            else:\n                self.update_point(idx, val, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query_range(self, l, r, node=0, start=0, end=None):\n        if end is None:\n            end = self.n - 1\n\n        if start > end or start > r or end < l:\n            return 0\n\n        if start >= l and end <= r:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_sum = self.query_range(l, r, left_child, start, mid)\n        right_sum = self.query_range(l, r, right_child, mid + 1, end)\n        return left_sum + right_sum\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = [0] + [int(nums[i] > nums[i - 1] and nums[i] > nums[i + 1]) for i in range(1, len(nums) - 1)] + [0]\n        st = SegmentTree(peaks)\n        res = []\n        # print(st.query_range(0, len(peaks) - 1), peaks, st.query_range(2,2))\n        for query in queries:\n            if query[0] == 1:\n                _, l, r = query\n                if l == r:\n                    s = 0\n                else:\n                    s = st.query_range(query[1], query[2])\n                    s -= peaks[query[1]] + peaks[query[2]]\n                res.append(s)\n            else:\n                _, idx, x = query\n                nums[idx] = x\n                for i in range(max(0, idx - 1), min(idx + 2, len(nums))):\n                    if i!=0 and i!=len(nums)-1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                        peaks[i] = 1\n                    else:\n                        peaks[i] = 0\n                    st.update_point(i, peaks[i])\n        return res\n        \n        ",
    "submit_ts": "1718506695",
    "subm_id": "1289627893"
}