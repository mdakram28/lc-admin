{
    "username": "ragshiv",
    "submission": "\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int MOD = 1e9+7;\n\n        // dp[len][inv] = number of ways to create a permutation of length len with exactly inv inversions\n        vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n        dp[0][0] = 0;  // Base case: 0 ways to have 0 inversions with a 0-length permutation\n\n        // Iterate over lengths of the permutation\n        for (int len = 1; len <= n; ++len) {\n            // Iterate over all possible inversions\n            for (int inv = 0; inv <= 400; ++inv) {\n                // If there are no ways to form permutations with inv inversions and len-1 length, continue\n                if (dp[len - 1][inv] == 0) continue;\n                \n                // Insert the new number at each possible position and update inversions\n                for (int pos = 0; pos < len; ++pos) {\n                    int newInv = inv + (len - 1 - pos);\n                    if (newInv <= 400) {\n                        dp[len][newInv] = (dp[len][newInv] + dp[len - 1][inv]) % MOD;\n                    }\n                }\n            }\n        }\n\n        vector<int> validInversions(n, -1);\n        for (auto& req : requirements) {\n            validInversions[req[0]] = req[1];\n        }\n\n        vector<vector<int>> new_dp(n + 1, vector<int>(401, 0));\n        new_dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= 400; ++inv) {\n                if (new_dp[len - 1][inv] == 0) continue;\n\n                for (int pos = 0; pos < len; ++pos) {\n                    int newInv = inv + (len - 1 - pos);\n                    if (newInv <= 400) {\n                        new_dp[len][newInv] = (new_dp[len][newInv] + new_dp[len - 1][inv]) % MOD;\n                    }\n                }\n            }\n\n            if (validInversions[len - 1] != -1) {\n                for (int inv = 0; inv <= 400; ++inv) {\n                    if (inv != validInversions[len - 1]) {\n                        new_dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        return new_dp[n][validInversions[n - 1]];\n    }\n};\n",
    "submit_ts": "1719069503",
    "subm_id": "1296798467"
}