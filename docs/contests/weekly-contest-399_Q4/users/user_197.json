{
    "username": "hritikagarwal96",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    int mod = 1e9+7 ;\n\n    void build(int i,int low,int high,vector<int>&arr,vector<long long> seg[]){\n        if(high==low+1){\n            seg[i] = {0,arr[low],0,arr[high]} ;\n            return ;\n        }\n        if(low==high){\n            seg[i] = {arr[low],0,0,0} ;\n            return  ;\n        }\n        int mid = (low+high)/2 ;\n        build(2*i+1,low,mid,arr,seg) ;\n        build(2*i+2,mid+1,high,arr,seg) ;\n        ll a1 = seg[2*i+1][0] ;\n        ll a2 = seg[2*i+1][1] ;\n        ll a3 = seg[2*i+1][2] ;\n        ll a4 = seg[2*i+1][3] ;\n        ll b1 = seg[2*i+2][0] ;\n        ll b2 = seg[2*i+2][1] ;\n        ll b3 = seg[2*i+2][2] ;\n        ll b4 = seg[2*i+2][3] ;\n        ll ans1 = (max(a1+b4,a2+max(b1,b4))) ;\n        ll ans2 = max(a1+b3,a2+max(b2,b3)) ;\n        ll ans3 = max(a4+b3,a3+max(b2,b3)) ;\n        ll ans4 = max(a4+b4,a3+max(b1,b4)) ;\n        seg[i] = {ans1,ans2,ans3,ans4} ;\n    }\n\n    // vector<int> query(int i,int low,int high,int l,int r,vector<int> seg[]){\n    //     if(r<low || l>high){\n    //         return {-1e,-1e6,-1e6,-1e6} ;\n    //     }\n    //     else if(low>=l && high<=r){\n    //         return seg[i] ;\n    //     }\n    //     else{\n    //         int mid = (low+high)/2 ;\n    //         vector<int> a  = query(2*i+1,low,mid,l,r,seg) ;\n    //         vector<int> b = query(2*i+2,mid+1,high,l,r,seg) ;\n    //         int a1 = a[0] ;\n    //         int a2 = a[1] ;\n    //         int a3 = a[2] ;\n    //         int a4 = a[3] ;\n    //         int b1 = b[0] ;\n    //         int b2 = b[1] ;\n    //         int b3 = b[2] ;\n    //         int b4 = b[3] ;\n    //         int ans1 = max(a1+b4,a2+max(b1,b4)) ;\n    //         int ans2 = max(a1+b3,a2+max(b2,b3)) ;\n    //         int ans3 = max(a4+b3,a3+max(b2,b3)) ;\n    //         int ans4 = max(a4+b4,a3+max(b1,b4)) ;\n    //         return {ans1,ans2,ans3,ans4} ;\n    //     }\n    // }\n\n    void update(int i,int low,int high,int ind,int val,vector<ll> seg[]){\n        if(high==low+1){\n            if(ind==low) seg[i][1] = val;\n            else seg[i][3] =  val ;\n            return ;\n        }\n        if(low==high){\n            seg[i][0] = val ;\n            return  ;\n        }\n        int mid=(low+high)/2 ;\n        if(ind<=mid) update(2*i+1,low,mid,ind,val,seg) ;\n        else update(2*i+2,mid+1,high,ind,val,seg) ;\n        ll a1 = seg[2*i+1][0] ;\n        ll a2 = seg[2*i+1][1] ;\n        ll a3 = seg[2*i+1][2] ;\n        ll a4 = seg[2*i+1][3] ;\n        ll b1 = seg[2*i+2][0] ;\n        ll b2 = seg[2*i+2][1] ;\n        ll b3 = seg[2*i+2][2] ;\n        ll b4 = seg[2*i+2][3] ;\n        ll ans1 = max(a1+b4,a2+max(b1,b4)) ;\n        ll ans2 = max(a1+b3,a2+max(b2,b3))  ;\n        ll ans3 = max(a4+b3,a3+max(b2,b3))  ;\n        ll ans4 = max(a4+b4,a3+max(b1,b4))  ;\n        seg[i] = {ans1,ans2,ans3,ans4} ;\n    }    \n\n\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n =nums.size() ;\n        vector<ll> seg[4*n+1] ;\n        build(0,0,n-1,nums,seg) ;\n        ll ans=0 ;\n        for(auto i:queries){\n            update(0,0,n-1,i[0],i[1],seg) ;\n            ans = ans+max(seg[0][0],max(seg[0][1],max(seg[0][2],seg[0][3]))) ;\n            ans%=mod ;\n        }\n        return ans ;\n    }\n};",
    "submit_ts": 1716695047.0
}