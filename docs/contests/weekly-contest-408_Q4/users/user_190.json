{
    "username": "RuchitJagodara",
    "submission": "class DisjointSetUnion {\nprivate:\n    std::vector<int> parent;\n    std::vector<int> rank;\n\npublic:\n    DisjointSetUnion(int n) {\n        parent.resize(n);\n        rank.resize(n, 0);\n        for (int i = 0; i < n; ++i) {\n            parent[i] = i;\n        }\n    }\n\n    int find(int u) {\n        if (parent[u] != u) {\n            parent[u] = find(parent[u]); // Path compression\n        }\n        return parent[u];\n    }\n\n    void unionSets(int u, int v) {\n        int rootU = find(u);\n        int rootV = find(v);\n        if (rootU != rootV) {\n            if (rank[rootU] > rank[rootV]) {\n                parent[rootV] = rootU;\n            } else if (rank[rootU] < rank[rootV]) {\n                parent[rootU] = rootV;\n            } else {\n                parent[rootV] = rootU;\n                rank[rootU]++;\n            }\n        }\n    }\n};\nlong double calculateDistance(vector<int> &a, vector<int> &b) {\n    long double dx = a[0] - b[0];\n    long double dy = a[1] - b[1];\n    return std::sqrt(dx * dx + dy * dy);\n}\n\nbool dist(vector<int> &a, vector<int> &b){\n    long long dis = a[2]+b[2];\n    long double an = calculateDistance(a, b);\n    if (an > dis) return false;\n    return true;\n}\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        long long n = circles.size();\n        DisjointSetUnion dsu(n);\n        for(int i=0; i<n; i++){\n            for(int j=i+1; j<n; j++){\n                if (dist(circles[i], circles[j])){\n                    dsu.unionSets(i, j);\n                }\n            }\n        }\n        map<long long, vector<long long>> mp;\n        for(int i=0; i<n; i++){\n            mp[dsu.find(i)].push_back(i);\n        }\n\n        for(auto i:mp){\n            bool lef=false, rig=false, bot=false, top=false;\n            for(auto j:i.second){\n                if (circles[j][0]<=circles[j][2]){\n                    lef = true;\n                }\n                if (circles[j][1]<=circles[j][2]){\n                    bot = true;\n                }\n                if(X-circles[j][0]<=circles[j][2]){\n                    rig = true;\n                }\n                if (Y-circles[j][1]<=circles[j][2]){\n                    top = true;\n                }\n            }\n            if ((lef&&bot)) return false;\n            if ((lef&&rig)) return false;\n            if (bot&&top) return false;\n            if (rig&&top) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136092",
    "subm_id": "1335723552"
}