{
    "username": "DestyFog",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int d1 = treeDiameter(edges1);\n        \n        int d2 = treeDiameter(edges2);\n        \n        int d1Half1 = d1 % 2 == 0 ? d1 / 2 : d1 / 2 + 1;\n        int d1Half2 = d1 - d1Half1;\n        int d2Half1 = d2 % 2 == 0 ? d2 / 2 : d2 / 2 + 1;\n        int d2Half2 = d2 - d2Half1;\n        // System.out.println(\"d1: \" + d1 + \" d2: \" + d2);\n        // System.out.println(\"d1Half1: \" + d1Half1 + \" d1Half2: \" + d1Half2);\n        // System.out.println(\"d2Half1: \" + d2Half1 + \" d2Half2: \" + d2Half2);\n        \n        if (d1Half2 > d2Half1) {\n            return d1;\n        } else if (d2Half2 > d1Half1) {\n            return d2;\n        } else {\n            return d1Half1 + d2Half1 + 1;\n        }\n    }\n    \n    public int treeDiameter(int[][] edges) {\n        if (edges.length == 0) {\n            return 0;\n        }\n        Map<Integer, List<Integer>> graph = new HashMap<>();\n        for (int[] edge : edges) {\n            graph.putIfAbsent(edge[0], new ArrayList<>());\n            graph.putIfAbsent(edge[1], new ArrayList<>());\n            \n            graph.get(edge[0]).add(edge[1]);\n            graph.get(edge[1]).add(edge[0]);\n        }\n        \n        int[] result = new int[1];\n        helper(graph, result, 0, -1);\n        \n        return result[0];\n    }\n    \n    int helper(Map<Integer, List<Integer>> graph, int[] result, int cur, int parent) {\n        int max = 0;\n        int secondMax = 0;\n        for (int neighbor : graph.get(cur)) {\n            if (neighbor == parent) {\n                continue;\n            }\n            int neighborLongestBranch = helper(graph, result, neighbor, cur);\n            if (neighborLongestBranch > max) {\n                secondMax = max;\n                max = neighborLongestBranch;\n            } else if (neighborLongestBranch > secondMax) {\n                secondMax = neighborLongestBranch;\n            }\n            \n            result[0] = Math.max(result[0], max + secondMax);\n        }\n        \n        return max + 1;\n    }\n}",
    "submit_ts": "1719719084",
    "subm_id": "1304433376"
}