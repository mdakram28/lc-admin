{
    "username": "fxfxxxfxx",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        vector<int> V(n, 1);\n        for (int i = 1; i < n; i++)\n            V[i] = (V[i-1] * 10) % k;\n\n        vector<int> W;\n        for (int i = 0; n-1-i>=i; i++) {\n            int j = n-1-i;\n            int v = (i == j) ? V[i] : ((V[i] + V[j]) % k);\n            W.push_back(v);\n        }\n\n        int m = W.size();\n        reverse(W.begin(), W.end());\n        vector DP(m+1, vector<char>(k, '\\0'));\n        DP[0][0] = '^';\n        for (int i = 1; i <= m; i++) {\n            for (int d = 0; d <= 9; d++) {\n                int u = (d * W[i-1]) % k;\n                for (int r = 0; r < k; r++) {\n                    if (DP[i-1][r] == '\\0') continue;\n                    DP[i][(r+u)%k] = '0' + d;\n                }\n            }\n        }\n        assert(DP[m][0] != '0');\n        string L;\n        L.push_back(DP[m][0]);\n        int r = (10 * k - (DP[m][0] - '0') * W[m-1]) % k;\n        for (int i = m-1; i > 0; i--) {\n            L.push_back(DP[i][r]);\n            r = (10 * k + r - (DP[i][r] - '0') * W[i-1]) % k;\n        }\n        string R = L;\n        if (n & 1) R.pop_back();\n        reverse(R.begin(), R.end());\n        return L + R;\n    }\n};",
    "submit_ts": "1723950435",
    "subm_id": "1359745918"
}