{
    "username": "lemelearn",
    "submission": "class Solution {\npublic:\n    pair<pair<long long, long long>, pair<long long, long long>> findTopTwo(const vector<long long>& vec) {\n        long long firstMax = INT_MIN, secondMax = INT_MIN;\n        long long firstIdx = -1, secondIdx = -1;\n\n        for (long long i = 0; i < vec.size(); ++i) {\n            if (vec[i] > firstMax) {\n                secondMax = firstMax;\n                secondIdx = firstIdx;\n                firstMax = vec[i];\n                firstIdx = i;\n            } else if (vec[i] > secondMax) {\n                secondMax = vec[i];\n                secondIdx = i;\n            }\n        }\n        return {{firstMax, firstIdx}, {secondMax, secondIdx}};\n    }\n\n    long long get(long long r1, long long c2, const pair<long long, long long>& p1, const pair<long long, long long>& p2) {\n        auto [mx1, c1] = p1;\n        auto [mx2, r2] = p2;\n        if (c1 == c2 || r1 == r2) {\n            return LLONG_MIN;\n        }\n        return mx1 + mx2;\n    }\n\n    long long helper(vector<vector<long long>>& board) {\n        long long n = board.size(), m = board[0].size();\n        vector<pair<long long, long long>> rowTop1(n), rowTop2(n);\n        for (long long i = 0; i < n; ++i) {\n            tie(rowTop1[i], rowTop2[i]) = findTopTwo(board[i]);\n        }\n        \n        vector<pair<long long, long long>> colTop1(m), colTop2(m); \n        for (long long j = 0; j < m; ++j) {\n            vector<long long> column(n);\n            for (long long i = 0; i < n; ++i) {\n                column[i] = board[i][j];\n            }\n            tie(colTop1[j], colTop2[j]) = findTopTwo(column);\n        }\n\n        long long ans = LLONG_MIN;\n        pair<long long, long long> bestRowRook, bestColRook;\n\n        for (long long r1 = 0; r1 < n; ++r1) {\n            for (long long c2 = 0; c2 < m; ++c2) {\n                ans = max(ans, get(r1, c2, rowTop1[r1], colTop1[c2]));\n                ans = max(ans, get(r1, c2, rowTop1[r1], colTop2[c2]));\n                ans = max(ans, get(r1, c2, rowTop2[r1], colTop1[c2]));\n                ans = max(ans, get(r1, c2, rowTop2[r1], colTop2[c2]));\n            }\n        }\n\n        return ans;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        long long n = board.size(), m = board[0].size();\n        long long ans = LLONG_MIN;\n        // store top three for each row in form (max, idx)\n        vector<vector<pair<long long, long long>>> precompute(n);\n        for (int r = 0; r < n; ++r) {\n            vector<pair<long long, long long>> topThree(3);\n            for (int c = 0; c < m; ++c) {\n                topThree.push_back({board[r][c], c});\n            }\n            sort(topThree.rbegin(), topThree.rend());\n            topThree.resize(3);\n            precompute[r] = topThree;\n        }\n        for (long long r3 = 0; r3 < n; ++r3) {\n            for (long long i = 0; i < 3; ++i) {\n                long long c3 = precompute[r3][i].second;\n                vector<vector<long long>> tempBoard(n, vector<long long>(m, LLONG_MIN));\n                for (long long i = 0; i < n; ++i) {\n                    for (long long j = 0; j < m; ++j) {\n                        if (i != r3 && j != c3) {\n                            tempBoard[i][j] = board[i][j];\n                        }\n                    }\n                }\n                ans = max(ans, board[r3][c3] + helper(tempBoard));\n            }\n        }\n        return ans;\n    }\n\n};",
    "submit_ts": "1723910261",
    "subm_id": "1359223406"
}