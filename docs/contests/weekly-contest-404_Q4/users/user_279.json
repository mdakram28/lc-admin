{
    "username": "billygyde001",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int a = edges1.size()+1;\n        int b = edges2.size()+1;\n        \n        struct node\n        {\n            vector<int>paths;\n            int vsted=0;\n        };\n        node nodea[a], nodeb[b];\n        using pii = pair<int,int>;\n        \n        for(auto i:edges1)\n            nodea[i[0]].paths.push_back(i[1]),\n            nodea[i[1]].paths.push_back(i[0]);\n        for(auto i:edges2)\n            nodeb[i[0]].paths.push_back(i[1]),\n            nodeb[i[1]].paths.push_back(i[0]);\n        \n        function<pii(int,node*)>dfs;\n        dfs = [&](int node, struct node*nodes) -> pii\n        {\n            nodes[node].vsted = 1;\n            pii mx = {0,node};\n            for(int i:nodes[node].paths)\n            {\n                if(!nodes[i].vsted)\n                {\n                    pii res = dfs(i,nodes);\n                    res.first++;\n                    mx = max(mx, res);\n                }\n            }\n            return mx;\n        };\n        \n        int sta = dfs(0,nodea).second;\n        int stb = dfs(0,nodeb).second;\n        \n        cout <<sta <<' ' <<stb <<endl;\n        \n        for(int i=0; i<a; i++)\n            nodea[i].vsted = 0;\n        for(int i=0; i<b; i++)\n            nodeb[i].vsted = 0;\n        \n        int ba = dfs(sta,nodea).first;\n        int bb = dfs(stb,nodeb).first;\n        \n        cout <<ba<<' ' <<bb <<endl;\n        \n        return max((1+ba)/2 + (bb+1)/2 + 1, max(ba,bb));\n    }\n};",
    "submit_ts": "1719717664",
    "subm_id": "1304397606"
}