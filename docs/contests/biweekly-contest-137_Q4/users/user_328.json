{
    "username": "fsociety00",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n\n        long long maxi1[n][m], maxi2[n][m], maxi3[n][m], maxi4[n][m];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                maxi1[i][j] = board[i][j];\n                if (i) maxi1[i][j] = max(maxi1[i][j], maxi1[i - 1][j]);\n                if (j) maxi1[i][j] = max(maxi1[i][j], maxi1[i][j - 1]);\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = m - 1; j >= 0; j--) {\n                maxi2[i][j] = board[i][j];\n                if (i) maxi2[i][j] = max(maxi2[i][j], maxi2[i - 1][j]);\n                if (j + 1 < m) maxi2[i][j] = max(maxi2[i][j], maxi2[i][j + 1]);\n            }\n        }\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < m; j++) {\n                maxi3[i][j] = board[i][j];\n                if (i + 1 < n) maxi3[i][j] = max(maxi3[i][j], maxi3[i + 1][j]);\n                if (j) maxi3[i][j] = max(maxi3[i][j], maxi3[i][j - 1]);\n            }\n        }\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                maxi4[i][j] = board[i][j];\n                if (i + 1 < n) maxi4[i][j] = max(maxi4[i][j], maxi4[i + 1][j]);\n                if (j + 1 < m) maxi4[i][j] = max(maxi4[i][j], maxi4[i][j + 1]);\n            }\n        }\n\n        int left[n][m], right[n][m];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                left[i][j] = board[i][j];\n                if (j) left[i][j] = max(left[i][j], left[i][j - 1]);\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = m - 1; j >= 0; j--) {\n                right[i][j] = board[i][j];\n                if (j + 1 < m) right[i][j] = max(right[i][j], right[i][j + 1]);\n            }\n        }\n\n        pair<int,int> downL[n][m], downR[n][m], upL[n][m], upR[n][m];\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                downL[i][j] = {-1, -1};\n                downR[i][j] = {-1, -1};\n                upL[i][j] = {-1, -1};\n                upR[i][j] = {-1, -1};\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                vector<pair<int,int>> temp;\n                if (i) {\n                    auto it = downL[i - 1][j];\n                    if (it.first != -1) temp.push_back({left[it.first][j], it.first});\n                    if (it.second != -1) temp.push_back({left[it.second][j], it.second});\n                }\n                temp.push_back({left[i][j], i});\n                sort(temp.begin(), temp.end());\n                reverse(temp.begin(), temp.end());\n\n                int l = (int)temp.size();\n                if (l > 0) downL[i][j].first = temp[0].second;\n                if (l > 1) downL[i][j].second = temp[1].second;\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = m - 1; j >= 0; j--) {\n                vector<pair<int,int>> temp;\n                if (i) {\n                    auto it = downR[i - 1][j];\n                    if (it.first != -1) temp.push_back({right[it.first][j], it.first});\n                    if (it.second != -1) temp.push_back({right[it.second][j], it.second});\n                }\n                temp.push_back({right[i][j], i});\n                sort(temp.begin(), temp.end());\n                reverse(temp.begin(), temp.end());\n\n                int l = (int)temp.size();\n                if (l > 0) downR[i][j].first = temp[0].second;\n                if (l > 1) downR[i][j].second = temp[1].second;\n            }\n        }\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = 0; j < m; j++) {\n                vector<pair<int,int>> temp;\n                if (i + 1 < n) {\n                    auto it = upL[i + 1][j];\n                    if (it.first != -1) temp.push_back({left[it.first][j], it.first});\n                    if (it.second != -1) temp.push_back({left[it.second][j], it.second});\n                }\n                temp.push_back({left[i][j], i});\n                sort(temp.begin(), temp.end());\n                reverse(temp.begin(), temp.end());\n\n                int l = (int)temp.size();\n                if (l > 0) upL[i][j].first = temp[0].second;\n                if (l > 1) upL[i][j].second = temp[1].second;\n            }\n        }\n\n        for (int i = n - 1; i >= 0; i--) {\n            for (int j = m - 1; j >= 0; j--) {\n                vector<pair<int,int>> temp;\n                if (i + 1 < n) {\n                    auto it = upR[i + 1][j];\n                    if (it.first != -1) temp.push_back({right[it.first][j], it.first});\n                    if (it.second != -1) temp.push_back({right[it.second][j], it.second});\n                }\n                temp.push_back({right[i][j], i});\n                sort(temp.begin(), temp.end());\n                reverse(temp.begin(), temp.end());\n\n                int l = (int)temp.size();\n                if (l > 0) upR[i][j].first = temp[0].second;\n                if (l > 1) upR[i][j].second = temp[1].second;\n            }\n        }\n\n        long long int ans = -4e9;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (i && j && i + 1 < n && j + 1 < m) {\n                    ans = max(ans, maxi1[i - 1][j - 1] + maxi4[i + 1][j + 1] + board[i][j]);\n                }\n                if (i && j + 1 < m && i + 1 < n && j) {\n                    ans = max(ans, maxi2[i - 1][j + 1] + maxi3[i + 1][j - 1] + board[i][j]);\n                }\n\n                if (i && j && j + 1 < m) {\n                    vector<pair<int,int>> temp1;\n                    auto it = downL[i - 1][j - 1];\n                    temp1.push_back({left[it.first][j - 1], it.first});\n                    if (it.second != -1) {\n                        temp1.push_back({left[it.second][j - 1], it.second});\n                    }\n                     vector<pair<int,int>> temp2;\n                    auto it1 = downR[i - 1][j + 1];\n                    temp2.push_back({right[it1.first][j + 1], it1.first});\n                    if (it1.second != -1) {\n                        temp2.push_back({right[it1.second][j + 1], it1.second});\n                    }\n\n                    for (int k = 0; k < (int)temp1.size(); k++) {\n                        for (int p = 0; p < (int)temp2.size(); p++) {\n                            if (temp1[k].second != temp2[p].second) {\n                                long long tempMaxi = temp1[k].first;\n                                tempMaxi += temp2[p].first;\n                                ans = max(ans, tempMaxi + board[i][j]);\n                            }\n                        }\n                    }\n                    // if (ans == 152) {\n                    //     cout << i << \" \" << j << endl;\n                    //     cout << it.first << \" \" << it.second << endl;\n                    //     cout << it1.first << \" \" << it1.second << endl;\n                    // }\n                }\n\n                if (i + 1 < n && j && j + 1 < m) {\n                    vector<pair<int,int>> temp1;\n                    auto it = upL[i + 1][j - 1];\n                    temp1.push_back({left[it.first][j - 1], it.first});\n                    if (it.second != -1) {\n                        temp1.push_back({left[it.second][j - 1], it.second});\n                    }\n                    vector<pair<int,int>> temp2;\n                    auto it1 = upR[i + 1][j + 1];\n                    temp2.push_back({right[it1.first][j + 1], it1.first});\n                    if (it1.second != -1) {\n                        temp2.push_back({right[it1.second][j + 1], it1.second});\n                    }\n\n                    for (int k = 0; k < (int)temp1.size(); k++) {\n                        for (int p = 0; p < (int)temp2.size(); p++) {\n                            if (temp1[k].second != temp2[p].second) {\n                                long long tempMaxi = temp1[k].first;\n                                tempMaxi += temp2[p].first;\n                                ans = max(ans, tempMaxi + board[i][j]);\n                            }\n                        }\n                    }\n\n                    // if (ans == 152) {\n                    //     cout << i << \" \" << j << endl;\n                    //     cout << it.first << \" \" << it.second << endl;\n                    //     cout << it1.first << \" \" << it1.second << endl;\n                    // }\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723909380",
    "subm_id": "1359190336"
}