{
    "username": "DylanSmith",
    "submission": "typedef long long ll;\n \n#define pb push_back\n#define sz(x) (int)x.size()\n#define all(x) begin(x),end(x)\n#define lb(x,y) lower_bound(all(x),y)-begin(x)\nclass Solution {\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        int N = sz(grid);\n        vector<vector<ll>> p(N + 1, vector<ll>(N, 0));\n        for (int j = 0; j < N; j++) {\n            for (int i = 0; i < N; i++) {\n                p[i + 1][j] = grid[i][j] + p[i][j];\n            }\n        }\n        vector<vector<ll>> dp(N + 1, vector<ll>(N + 1, -1)), nxt(N + 1, vector<ll>(N + 1, 0));\n        dp[0][0] = 0;\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j <= N; j++) {\n                fill(all(nxt[j]), -1);\n            }\n            vector<ll> mx(N + 1, -1);\n            for (int j = 0; j <= N; j++) {\n                for (int k = 0; k <= N; k++) {\n                    mx[max(j, k)] = max(mx[max(j, k)], dp[j][k]);\n                }\n            }\n            vector<ll> m(N + 1, -1);\n            for (int j = 0; j <= N; j++) {\n                if (mx[j] == -1) continue;\n                for (int k = 0; k <= N; k++) {\n                    if (j <= k) {\n                        m[k] = max(m[k], mx[j] + (i == 0 ? 0 : p[k][i - 1] - p[j][i - 1]));\n                    }\n                }\n            }\n            for (int j = 0; j <= N; j++) {\n                for (int k = j; k <= N; k++) {\n                    if (m[k] == -1) continue;\n                    nxt[j][k] = max(nxt[j][k], m[k]);\n                }\n            }\n            fill(all(mx), -1);\n            for (int j = 0; j <= N; j++) {\n                for (int k = 0; k <= N; k++) {\n                    mx[k] = max(mx[k], dp[j][k]);\n                }\n            }\n            for (int j = 0; j <= N; j++) {\n                if (mx[j] == -1) continue;\n                for (int k = 0; k <= j; k++) {\n                    if (j >= k) {\n                        nxt[j][k] = max(nxt[j][k], mx[j]);\n                    }\n                }\n            }\n            for (int j = 0; j <= N; j++) {\n                for (int k = 0; k <= N; k++) {\n                    if (j > k && nxt[j][k] >= 0) {\n                        nxt[j][k] += p[j][i] - p[k][i];\n                    }\n                }\n            }\n            swap(dp, nxt);\n        }\n        ll res = 0;\n        for (int i = 0; i <= N; i++) {\n            for (int j = 0; j <= N; j++) {\n                res = max(res, dp[i][j]);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1721490201",
    "subm_id": "1327475950"
}