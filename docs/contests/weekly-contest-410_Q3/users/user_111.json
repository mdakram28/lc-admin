{
    "username": "mathcruncher",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        // Let dp(i, k) -> then arr2[i] has nums[i] - k and arr2[i-1] >= nums[i] - k\n        // Means arr1[i-1] <= min(nums[i-1] - nums[i] + k, k)\n        // We have dp(i, k) = prefix sum up to dp(i-1, min(nums[i-1] - nums[i] + k, k)). Do everything mod. \n        int largest = *max_element(nums.begin(), nums.end());\n        vector<int> dp(largest + 1);\n        vector<int> prefix(largest + 1);\n        bool first = true;\n        int prev_num = -1;\n        for (int num : nums) {\n            vector<int> new_dp(largest + 1);\n            vector<int> new_prefix(largest + 1);\n            for (int i = 0; i <= num; ++i) {\n                if (first) {\n                    new_dp[i] = 1;\n                } else {\n                    int diff = min(prev_num - num + i, i);\n                    if (diff >= 0) {\n                        new_dp[i] = prefix[diff];\n                    }\n                }\n            }\n            for (int i = 0; i <= largest; ++i) {\n                new_prefix[i] = new_dp[i];\n                if (i > 0) {\n                    new_prefix[i] = (new_prefix[i] + new_prefix[i-1]) % 1'000'000'007;\n                }\n            }\n            dp = move(new_dp);\n            prefix = move(new_prefix);\n            first = false;\n            prev_num = num;\n        }\n        return prefix.back();\n    }\n};\n",
    "submit_ts": "1723345587",
    "subm_id": "1351558978"
}