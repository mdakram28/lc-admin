{
    "username": "contest111",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    int rangeAnd(int l, int r) {\n        return rangeAnd(0, 0, n - 1, l, r);\n    }\n\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            int left_child = 2 * node + 1;\n            int right_child = 2 * node + 2;\n            build(nums, left_child, start, mid);\n            build(nums, right_child, mid + 1, end);\n            tree[node] = tree[left_child] & tree[right_child];\n        }\n    }\n\n    int rangeAnd(int node, int start, int end, int l, int r) {\n        if (r < start || l > end) {\n            return INT_MAX;  // Identity for AND\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_child = 2 * node + 1;\n        int right_child = 2 * node + 2;\n        int left_result = rangeAnd(left_child, start, mid, l, r);\n        int right_result = rangeAnd(right_child, mid + 1, end, l, r);\n        return left_result & right_result;\n    }\n};\nclass Solution {\npublic:\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long n = nums.size(), cnt =0;\n        unordered_map<long long, long long>ans;\n        for(int i=0;i<n;i++){\n            unordered_map<long long, long long>prevans;\n            if(nums[i]==k)++cnt;\n            prevans[nums[i]]=1;\n            for(auto x : ans){\n                long long z = x.first & nums[i];\n                if(z==k)cnt+=x.second;\n                prevans[z]+=x.second;\n            }\n            ans = prevans;\n        }\n        return cnt;\n    }\n};",
    "submit_ts": "1720281409",
    "subm_id": "1311824072"
}