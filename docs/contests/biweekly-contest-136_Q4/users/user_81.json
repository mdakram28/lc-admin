{
    "username": "socrates1232",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        ans = [0] * n\n        adj = [[] for i in range(n)]\n        for e in edges:\n            adj[e[0]].append([e[1], 2 if e[1] % 2 == 0 else 1])\n            adj[e[1]].append([e[0], 2 if e[0] % 2 == 0 else 1])\n        def dfs(cur, pre):\n            for nxt in adj[cur]:\n                if nxt[0] == pre:\n                    continue\n                ret = dfs(nxt[0], cur)\n                nxt.append(ret + nxt[1])\n                ans[cur] = max(ans[cur], ret + nxt[1])\n            return ans[cur]\n\n\n        def dfs2(cur, pre, upmax):\n            ans[cur] = max(ans[cur], upmax)\n            max0 = upmax\n            max1 = -1\n            for nxt in adj[cur]:\n                if nxt[0] == pre:\n                    continue\n                if nxt[2] > max0:\n                    max1 = max0\n                    max0 = nxt[2]\n                elif nxt[2] > max1:\n                    max1 = nxt[2]\n            if cur % 2 == 1:\n                base = 1\n            else:\n                base = 2\n            for nxt in adj[cur]:\n                if nxt[0] == pre:\n                    continue\n                if nxt[2] == max0:\n                    dfs2(nxt[0], cur, base + max1)\n                else:\n                    dfs2(nxt[0], cur, base + max0)\n                \n        dfs(0, -1)\n        dfs2(0, -1, 0)\n        return ans",
    "submit_ts": "1722698357",
    "subm_id": "552270498"
}