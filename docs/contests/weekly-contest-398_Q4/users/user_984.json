{
    "username": "yoasobi",
    "submission": "class Solution {\npublic:\n    unordered_map<long long, unordered_map<int, unordered_map<bool, int>>>cnt;\n    int dfs(long long cur, bool down, int k, int jump){\n        if(cnt.find(cur)!=cnt.end()&&cnt[cur].find(jump)!=cnt[cur].end()&&cnt[cur][jump].find(down)!=cnt[cur][jump].end()){\n            return cnt[cur][jump][down];\n        }\n        int ret=0;\n        if(cur==k) ret++;\n        // cnt[cur]++;\n        \n        if(!down&&cur>0){\n            ret+=dfs(cur-1, true, k, jump);\n        }\n        long long up=cur+(1ll<<jump);\n        if(up-1<=k){\n            ret+=dfs(up, false, k, jump+1);\n        }\n        return cnt[cur][jump][down]=ret;\n        \n    }\n    int waysToReachStair(int k) {\n        cnt.clear();\n        // int ans=0;\n        return dfs(1, false, k, 0);\n        // return cnt[k];\n        // return ans;\n    }\n};",
    "submit_ts": 1716089106.0
}