{
    "username": "aaaaaaaaaaa1",
    "submission": "class Solution {\npublic:\n    int getMid(int s, int e) { return s + (e - s) / 2; } \n\n    int getSumUtil(int *st, int ss, int se, int qs, int qe, int si) {\n        if (qs <= ss && qe >= se) \n            return st[si]; \n\n        if (se < qs || ss > qe) \n            return 0; \n\n        int mid = getMid(ss, se); \n        return getSumUtil(st, ss, mid, qs, qe, 2*si + 1) + \n               getSumUtil(st, mid + 1, se, qs, qe, 2*si + 2); \n    } \n\n    void updateValueUtil(int *st, int ss, int se, int i, int diff, int si) {\n        if (i < ss || i > se) \n            return; \n\n        st[si] = st[si] + diff; \n        if (se != ss) {\n            int mid = getMid(ss, se); \n            updateValueUtil(st, ss, mid, i, diff, 2*si + 1); \n            updateValueUtil(st, mid + 1, se, i, diff, 2*si + 2); \n        } \n    } \n\n    void updateValue(int arr[], int *st, int n, int i, int new_val) {\n        if (i < 0 || i > n - 1) { \n            cout << \"Invalid Input\"; \n            return; \n        } \n\n        int diff = new_val - arr[i]; \n\n        arr[i] = new_val; \n\n        updateValueUtil(st, 0, n - 1, i, diff, 0); \n    } \n\n    int getSum(int *st, int n, int qs, int qe) {\n        if (qs < 0 || qe > n - 1 || qs > qe) { \n            cout << \"Invalid Input\"; \n            return -1; \n        } \n\n        return getSumUtil(st, 0, n - 1, qs, qe, 0); \n    } \n\n    int constructSTUtil(int arr[], int ss, int se, int *st, int si) {\n        if (ss == se) {\n            st[si] = arr[ss]; \n            return arr[ss]; \n        } \n\n        int mid = getMid(ss, se); \n        st[si] = constructSTUtil(arr, ss, mid, st, si * 2 + 1) + \n                 constructSTUtil(arr, mid + 1, se, st, si * 2 + 2); \n        return st[si]; \n    } \n\n    int *constructST(int arr[], int n) {\n        int x = (int)(ceil(log2(n))); \n        int max_size = 2 * (int)pow(2, x) - 1; \n        int *st = new int[max_size]; \n        constructSTUtil(arr, 0, n - 1, st, 0); \n        return st; \n    } \n \n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        ios_base::sync_with_stdio(0);\n        cin.tie(0); cout.tie(0);\n                \n        int N = nums.size();\n        int* arr = new int[N];\n            \n        vector<int>A = {0};\n        \n        for (int i = 1; i<N-1; i++){\n            if (nums[i]>nums[i-1] and nums[i]>nums[i+1]){\n                A.push_back(1);\n            }else{\n                A.push_back(0);\n            }\n        }\n        A.push_back(0);\n        \n        for (int i = 0; i<N; i++){\n            arr[i] = A[i];\n            cout<<A[i]<<\" \";\n        }\n        \n        cout<<endl;\n        \n        int *st = constructST(arr, N);\n        vector<int>ans;\n        \n        for (auto i:queries){\n            if (i[0]==1){\n                int num = getSum(st, N, i[1], i[2]);\n                if (A[i[1]]==1){\n                    num--;\n                }\n                if (A[i[2]]==1){\n                    num--;\n                }\n                \n                ans.push_back(max(0,num));\n            }else{\n                nums[i[1]] = i[2];\n                \n                if (i[1]-1>=0){\n                    if (i[1]-2>=0 and i[1]<N and nums[i[1]-1]>nums[i[1]-2] and nums[i[1]-1]>nums[i[1]]){\n                        A[i[1]-1] = 1; \n                        updateValue(arr, st, N, i[1]-1, 1); \n                    }else{\n                        A[i[1]-1] = 0; \n                        updateValue(arr, st, N, i[1]-1, 0); \n                    }\n                }\n                \n                if (i[1]+1<N){\n                    if (i[1]>=0 and i[1]+2<N and nums[i[1]+1]>nums[i[1]] and nums[i[1]+1]>nums[i[1]+2]){\n                        A[i[1]+1] = 1; \n                        updateValue(arr, st, N, i[1]+1, 1); \n                    }else{\n                        A[i[1]+1] = 0; \n                        updateValue(arr, st, N, i[1]+1, 0); \n                    }\n                }\n                \n                \n                if (i[1]-1>=0 and i[1]+1<N and nums[i[1]]>nums[i[1]-1] and nums[i[1]]>nums[i[1]+1]){\n                    A[i[1]] = 1; \n                    updateValue(arr, st, N, i[1], 1); \n                }else{\n                    A[i[1]] = 0; \n                    updateValue(arr, st, N, i[1], 0); \n                }\n                \n            }\n        }\n        \n        return ans;\n        \n        \n\n    }\n};",
    "submit_ts": 1718507218.0
}