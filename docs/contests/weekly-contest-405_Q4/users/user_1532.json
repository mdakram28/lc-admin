{
    "username": "vyhv",
    "submission": "#define ll long long\nclass Node {\npublic:\n    bool isEnd = false;\n    int cost = INT_MAX;\n    vector<Node*> children;\n\n    Node() {\n        children.resize(26, nullptr);\n    }\n};\n\nclass Trie {\nprivate:\n    Node* root;\npublic:\n    Trie() {\n        root = new Node();\n    }\n    \n    void build(string& word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            int i = c - 'a';\n            if (node->children[i] == nullptr) {\n                node->children[i] = new Node();\n            }\n            node = node->children[i];\n        }\n        node->isEnd = true;\n        node->cost = min(node->cost, cost);\n    }\n\n    Node* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.build(words[i], costs[i]);\n        }\n\n        int n = target.length();\n        vector<ll> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                int idx = target[j] - 'a';\n                if (node->children[idx] == nullptr) break;\n                node = node->children[idx];\n\n                if (node->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323827",
    "subm_id": "1312384982"
}