{
    "username": "bhavesh884",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n    public:\n        unordered_map<char, TrieNode*> inherited;\n        vector<pair<int, int>> myWIdx;\n    };\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() { root = new TrieNode(); }\n\n        void insert(string currWord, int idx, int cost) {\n            TrieNode* currItem = root;\n            for (char ch : currWord) {\n                if (!currItem->inherited.count(ch)) {\n                    currItem->inherited[ch] = new TrieNode();\n                }\n                currItem = currItem->inherited[ch];\n            }\n            currItem->myWIdx.push_back({idx, cost});\n        }\n    };\n    int minimumCost(string tarstr, vector<string>& words, vector<int>& costs) {\n        int n = tarstr.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* currItem = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!currItem->inherited.count(tarstr[j])) {\n                    break;\n                }\n                currItem = currItem->inherited[tarstr[j]];\n                for (auto& p : currItem->myWIdx) {\n                    int currlen = words[p.first].size();\n                    if (i + currlen <= n) {\n                        dp[i + currlen] =\n                            min(dp[i + currlen], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    };\n};",
    "submit_ts": "1720323008",
    "subm_id": "1312364951"
}