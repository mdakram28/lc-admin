{
    "username": "divingPelican",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, bool>> pq;\n        for(int i=0;i<horizontalCut.size();i++)\n            pq.push(make_pair(horizontalCut[i], false));\n        for(int i=0;i<verticalCut.size();i++)\n            pq.push(make_pair(verticalCut[i], true));\n        long long cost = 0;int h = 1;int v = 1;\n        while(!pq.empty()){\n            if(pq.top().second){\n                cost += (h*pq.top().first);\n                v += 1;\n            }else{\n                cost += (v*pq.top().first);\n                h += 1;\n            }\n            pq.pop();\n        }\n        \n        return cost;\n    }\n};",
    "submit_ts": "1720926086",
    "subm_id": "1320275528"
}