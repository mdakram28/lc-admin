{
    "username": "BhavyRamani",
    "submission": "class Solution {\npublic:\n    int mx, nd;\n    void dfs(int ver, int par, int c, vector<vector<int>> &g, vector<vector<int>> &dep){\n        for(auto &ch:g[ver]){\n            if(ch == par)\n                continue;\n            dep[c][ch] = dep[c][ver] + 1;\n            if(dep[c][ch] > mx){\n                mx = dep[c][ch];\n                nd = ch;\n            }\n            dfs(ch, ver, c, g, dep);\n        }\n    }\n    int fun(vector<vector<int>> &g){\n        int n = g.size();\n        if(n == 1)\n            return 0;\n        vector<vector<int>> dep(2, vector<int>(n));\n        mx = 0;\n        dfs(0, -1, 0, g, dep);\n        mx = 0;\n        dep[0][nd] = 0;\n        dfs(nd, -1, 0, g, dep);\n        mx = 0;\n        dep[1][nd] = 0;\n        dfs(nd, -1, 1, g, dep);\n        int ans = n-1;\n        mx = 0;\n        for(int i = 0; i < n; i++){\n            ans = min(ans, max(dep[0][i], dep[1][i]));\n            mx = max(mx, max(dep[0][i], dep[1][i]));\n        }\n        return ans;\n        \n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m = edges2.size()+1;\n        vector<vector<int>> g1(n), g2(m);\n        for(auto &val:edges1){\n            int u = val[0], v = val[1];\n            g1[u].push_back(v);\n            g1[v].push_back(u);\n        }\n        for(auto &val:edges2){\n            int u = val[0], v = val[1];\n            g2[u].push_back(v);\n            g2[v].push_back(u);\n        }\n        int ans = 0;\n        int a1 = fun(g1);\n        ans = max(ans, mx);\n        int a2 = fun(g2);\n        ans = max(ans, mx);\n        ans = max(ans, a1 + a2 + 1);\n        return ans;\n    }\n};",
    "submit_ts": 1719718646.0
}