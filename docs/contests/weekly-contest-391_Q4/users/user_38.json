{
    "username": "Turkhuu",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& a) {\n        multiset<int> s[4];\n        int n = a.size();\n        vector v(n, vector<int>(4));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 4; j++) {\n                for (int k = 0; k < 2; k++) {\n                    if (j >> k & 1) v[i][j] += a[i][k];\n                    else v[i][j] -= a[i][k];\n                }\n                s[j].insert(v[i][j]);\n            }\n        }\n        vector<int> b;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (*prev(s[j].end()) == v[i][j]) {\n                    b.push_back(i);\n                    break;\n                }\n            }\n        }\n        int ans = 2e9;\n        for (int i : b) {\n            for (int j = 0; j < 4; j++) {\n                s[j].erase(s[j].find(v[i][j]));\n            }\n            int mx = 0;\n            for (int j = 0; j < 4; j++) {\n                mx = max(mx, *prev(s[j].end()) - *s[j].begin());\n            }\n            ans = min(ans, mx);\n            for (int j = 0; j < 4; j++) {\n                s[j].insert(v[i][j]);\n            }\n        }\n        return ans;\n    }\n};"
}