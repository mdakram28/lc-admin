{
    "username": "Sayan_0099111",
    "submission": "#include <vector>\n#include <set>\n#include <utility>\n#include <climits>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pair<int,int>> coordinates;\n        multiset<int> sumDistances;\n        multiset<int> diffDistances;\n        initializeDistances(points, sumDistances, diffDistances);\n\n        int minDistance = INT_MAX;\n        int n = points.size();\n        for(int i = 0; i < n; i++) {\n            int currentSum = points[i][0] + points[i][1];\n            int currentDiff = points[i][0] - points[i][1];\n            updateDistances(sumDistances, diffDistances, currentSum, currentDiff);\n            int currentDistance = computeMinimumDistance(sumDistances, diffDistances);\n            minDistance = min(minDistance, currentDistance);\n            restoreDistances(sumDistances, diffDistances, currentSum, currentDiff);\n        }\n        return minDistance;\n    }\n\nprivate:\n    void initializeDistances(const vector<vector<int>>& points, multiset<int>& sumDistances, multiset<int>& diffDistances) {\n        for(auto it : points) {\n            sumDistances.insert(it[0] + it[1]);\n            diffDistances.insert(it[0] - it[1]);\n        }\n    }\n\n    void updateDistances(multiset<int>& sumDistances, multiset<int>& diffDistances, int currentSum, int currentDiff) {\n        sumDistances.erase(sumDistances.find(currentSum));\n        diffDistances.erase(diffDistances.find(currentDiff));\n    }\n\n    void restoreDistances(multiset<int>& sumDistances, multiset<int>& diffDistances, int currentSum, int currentDiff) {\n        sumDistances.insert(currentSum);\n        diffDistances.insert(currentDiff);\n    }\n\n    int computeMinimumDistance(const multiset<int>& sumDistances, const multiset<int>& diffDistances) {\n        int maxSumDistance = *(sumDistances.rbegin()) - *(sumDistances.begin());\n        int maxDiffDistance = *(diffDistances.rbegin()) - *(diffDistances.begin());\n        return max(maxSumDistance, maxDiffDistance);\n    }\n}; \n\n"
}