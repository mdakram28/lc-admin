{
    "username": "ramchandra-mulik",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        Map<Integer, Integer>[] dp = new Map[k + 1];\n        for (int i = 0; i <= k; i++) {\n            dp[i] = new HashMap<>();\n        }\n        int[] max = new int[k + 2];\n        for (int num : nums) {\n            for (int j = k; j >= 0; --j) {\n                if (j < k) {\n                    dp[j + 1].put(num, Math.max(dp[j + 1].getOrDefault(num, 0), max[j] + 1));\n                }\n                dp[j].put(num, Math.max(dp[j].getOrDefault(num, 0), dp[j].getOrDefault(num, 0) + 1));\n            }\n            max[0] = Math.max(max[0], dp[0].getOrDefault(num, 0));\n            for (int j = 1; j <= k + 1; ++j) {\n                max[j] = Math.max(max[j], dp[Math.min(j, k)].getOrDefault(num, 0));\n            }\n        }\n        return max[k + 1];\n    }\n}",
    "submit_ts": 1717860292.0
}