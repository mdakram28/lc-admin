{
    "username": "dip_is_trend",
    "submission": "\n//int fast_pow (int b , int p)\n//{\n//    if(p==0)\n//        return 1;\n//    return p%2 ?  (b*(fast_pow((b*b)%mod,p/2)%mod))%mod : fast_pow((b*b)%mod,p/2)%mod ;\n//}\n\n/*\n\nstruct segmentTree\n{\n    vector<int> st;\n    int n;\n    void init(int size)\n    {\n        this->n=size;\n        st.resize(4*n,0);\n\n    }\n    void build(int start,int end,int node ,vector<int> &v)\n    {\n        if(start==end)\n        {\n            st[node]=v[start];\n            return ;\n\n        }\n\n        int mid=(start+end)/2;\n        build(start,mid,2*node+1,v);\n        build(mid+1,end,2*node+2,v);\n        st[node]=st[2*node+1]+st[2*node+2];\n\n\n    }\n    void build(vector<int> &v)\n    {\n        build(0,v.size()-1,0,v);\n\n    }\n    int query(int start,int end,int l,int r,int node)\n    {\n        if(start>r || end<l)//non overlapping case\n        return 0;\n        if(start>=l && end<=r)//completey overlapping region\n        return st[node];\n//partial case\n        int mid=(start+end)/2;\n        int q1=query(start,mid,l,r,2*node+1);\n        int  q2=query(mid+1,end,l,r,2*node+2);\n        return q1+q2;\n\n\n    }\n    int query(int l,int r)\n    {\n        return query(0,n-1,l,r,0);//first four parameters are for checking overlapping,no-overlapping and partially overlapping conditions\n\n    }\n    void update(int start,int end ,int node,int index ,int value)\n    {\n        if(start==end)\n        {\n            st[node]=value;\n            return ;\n\n        }\n        int mid=(start+end)/2;\n        if(index<=mid)\n        {\n            update(start,mid,2*node+1,index,value);\n        }\n        else\n        {\n            update(mid+1,end,2*node+2,index,value);\n\n        }\n        st[node]=st[2*node +1]+st[2*node+2];\n        return ;\n\n    }\n    void update(int x,int y )//at index 'x ' update the value to 'y'\n    {\n        update(0,n-1,0,x,y);//start from the root node\n\n    }\n\n\n};\n */\nconst int mod = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n\n\n//        ios_base::sync_with_stdio(false);\n//        cin.tie(NULL);\n//#ifndef ONLINE_JUDGE\n//        freopen(\"input.txt\",\"r\",stdin);\n//        freopen(\"output.txt\",\"w\",stdout);\n//        freopen(\"error.txt\",\"w\",stderr);\n//\n//#endif\n        map<int,int> mp;\n        for(auto val:req){\n            mp[val[0]+1]=val[1];\n        }\n        int ans[n+1][405];\n        memset(ans,0,sizeof ans);\n        ans[0][0]=1;\n        for(int idx=1;idx<=n;idx++){\n            for(int j=0;j<=400;j++){\n                for(int x=0;x<idx;x++){\n                    int hell=j-x;\n                    if(hell>=0){\n                        ans[idx][j]+=ans[idx-1][hell];\n                        ans[idx][j]%=mod;\n                    }\n                }\n            }\n\n            if(mp.find(idx)!=mp.end()){\n                int p=mp[idx];\n                for(int ok=0;ok<=400;ok++){\n                    if(ok!=p){\n                        ans[idx][ok]=0;\n                    }\n                }\n            }\n        }\n\n        long long res=0;\n        for(auto  val:ans[n]){\n            res=(res+val)%mod;\n        }\n\n        return res;\n    }\n};\n\n",
    "submit_ts": "1719071182",
    "subm_id": "1296840957"
}