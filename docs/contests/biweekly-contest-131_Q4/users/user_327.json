{
    "username": "GaoYusong",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const std::vector<int>& data) {\n        n = data.size();\n        tree.resize(2 * n);\n        build(data);\n    }\n\n    void update(int index, int value) {\n        // Update the value at index and rebuild the tree\n        int pos = index + n;\n        tree[pos] = value;\n        while (pos > 1) {\n            pos /= 2;\n            tree[pos] = std::max(tree[2 * pos], tree[2 * pos + 1]);\n        }\n    }\n\n    int query(int left, int right) {\n        // Query the maximum value in range [left, right)\n        int res = INT_MIN;\n        left += n;\n        right += n;\n        while (left < right) {\n            if (left % 2 == 1) {\n                res = std::max(res, tree[left]);\n                left++;\n            }\n            if (right % 2 == 1) {\n                right--;\n                res = std::max(res, tree[right]);\n            }\n            left /= 2;\n            right /= 2;\n        }\n        return res;\n    }\n\nprivate:\n    int n;\n    std::vector<int> tree;\n\n    void build(const std::vector<int>& data) {\n        // Build the tree\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = data[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = std::max(tree[i * 2], tree[i * 2 + 1]);\n        }\n    }\n};\n\n\n\nclass Solution {\npublic:\n\n\n\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        map<int, int> obs;\n\n\n        int inf = 1e5;\n\n        obs[0] = 0;\n        obs[inf] = inf;\n        SegmentTree st(vector<int>(inf + 1, 0));\n\n        vector<bool> ans;\n\n        for (auto &q : queries) {\n            if (q[0] == 1) {\n                auto it = obs.upper_bound(q[1]);\n                auto r = it;\n                it--;\n                auto l = it;\n\n                st.update(r->first, r->first - q[1]);                \n                st.update(q[1], q[1] - l->first);\n\n                obs[q[1]] = max(l->second, q[1] - l->first);\n                //debug(obs);\n            } else if (q[0] == 2) {\n                auto it = obs.upper_bound(q[1]);\n                it--;\n                int maxv = max(st.query(0, it->first + 1), q[1] - it->first);\n\n                ans.push_back(maxv >= q[2]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716652163.0
}