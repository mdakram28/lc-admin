{
    "username": "yi-ni-ecstasy",
    "submission": "class Seg:\n    def __init__(self, n, A=None):\n        self.n = n                     \n        self.t = defaultdict(int)      # \u6811\u8282\u70b9\uff0c\u7ef4\u62a4\u533a\u95f4\u4fe1\u606f\n        self.f = defaultdict(int)      # \u61d2\u6807\u8bb0\uff0c\u6ce8\u610f\u8ba9\u521d\u59cb\u503c\u4ee3\u8868\u65e0\u6807\u8bb0\n        if A:                          \n            self.A = A\n            self.build()\n\n    def up(self,a,b):                  # \u533a\u95f4\u5f52\u5e76\u51fd\u6570\n        return a+b\n\n    def build(self,o=1,l=0,r=None):\n        r = self.n-1 if r is None else r\n        if l==r:\n            t1 = self.A[l] > self.A[l-1] if l > 0 else False\n            t2 = self.A[l] > self.A[l+1] if l+1 < self.n else False\n            self.t[o] = int(t1 and t2)\n            return\n        m = (l+r)//2\n        self.build(o*2,l,m)\n        self.build(o*2+1,m+1,r)\n        self.t[o] = self.up(self.t[o*2],self.t[o*2+1])\n\n    def update(self,a,b,x,o=1,l=0,r=None):\n        r = self.n-1 if r is None else r\n        if a<=l and r<=b:\n            # \u53ea\u66f4\u65b0\u5355\u70b9\n            self.t[o] = x[2]\n            return\n        m = (l+r)//2\n        if a<=m:\n            self.update(a,b,x,o*2,l,m)\n        if m<b:\n            self.update(a,b,x,o*2+1,m+1,r)\n        self.t[o] = self.up(self.t[o*2],self.t[o*2+1])\n\n    def query(self,a,b,o=1,l=0,r=None):\n        r = self.n-1 if r is None else r\n        if a<=l and r<=b:\n            return self.t[o]\n        m = (l+r)//2\n        res = 0                      # \u67e5\u8be2\u65f6\u7684\u521d\u503c\uff0c\u53ef\u80fd\u8981\u4fee\u6539 \n        if a<=m:\n            res = self.up(res,self.query(a,b,o*2,l,m))\n        if m<b:\n            res = self.up(res,self.query(a,b,o*2+1,m+1,r))\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        seg = Seg(n, nums)\n        ans = []\n        for i,j,k in queries:\n            if i == 1:\n                t = seg.query(j+1, k-1)\n                ans.append(t)\n            else:\n                nums[j] = k\n                if j > 0 and j+1 < n:\n                    # \u4e2d\u95f4\n                    t1 = nums[j-1] > nums[j-2] if j-1 > 0 else False\n                    t2 = nums[j-1] > nums[j]\n                    x = [t1, t2, int(t1 and t2)]\n                    # print(x)\n                    seg.update(j-1, j-1, x)\n                    \n                    t1 = nums[j] > nums[j-1]\n                    t2 = nums[j] > nums[j+1]\n                    x = [t1, t2, int(t1 and t2)]\n                    # print(x)\n                    seg.update(j, j, x)\n                    \n                    t1 = nums[j+1] > nums[j]\n                    t2 = nums[j+1] > nums[j+2] if j+2 < n else False\n                    x = [t1, t2, int(t1 and t2)]\n                    # print(x)\n                    seg.update(j+1, j+1, x)\n                elif j == 0:\n                    # \u5f00\u5934\n                    t1 = False\n                    t2 = nums[j] > nums[j+1]\n                    x = [t1, t2, int(t1 and t2)]\n                    seg.update(j, j, x)\n                    \n                    t1 = nums[j+1] > nums[j]\n                    t2 = nums[j+1] > nums[j+2] if j+2 < n else False\n                    x = [t1, t2, int(t1 and t2)]\n                    seg.update(j+1, j+1, x)\n                else:\n                    # jiewei\n                    t1 = nums[j-1] > nums[j-2] if j-1 > 0 else False\n                    t2 = nums[j-1] > nums[j]\n                    x = [t1, t2, int(t1 and t2)]\n                    seg.update(j-1, j-1, x)\n                    \n                    t1 = nums[j] > nums[j-1]\n                    t2 = False\n                    x = [t1, t2, int(t1 and t2)]\n                    seg.update(j, j, x)\n        return ans\n                ",
    "submit_ts": 1718508993.0
}