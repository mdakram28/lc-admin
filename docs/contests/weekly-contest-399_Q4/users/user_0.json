{
    "username": "jeffreyhu8",
    "submission": "const long long inf = 1e18;\n\nstruct Node {\n  Node *l = nullptr, *r = nullptr;\n  int lo, hi;\n  long long selected[2][2];\n\n  Node(const vector<int>& a, int lo, int hi) : lo(lo), hi(hi) {\n    //   cout << lo << \" \" << hi << endl;\n      if (lo < hi) {\n          int mid = (lo + hi) / 2;\n          l = new Node(a, lo, mid);\n          r = new Node(a, mid + 1, hi);\n\n          build();\n      } else {\n          selected[0][0] = 0;\n          selected[0][1] = -inf;\n          selected[1][0] = -inf;\n          selected[1][1] = a[lo];\n      }\n  }\n\n  void build() {\n      selected[0][0] = max(l->selected[0][0] + r->selected[0][0], max(l->selected[0][1] + r->selected[0][0], l->selected[0][0] + r->selected[1][0]));\n      selected[0][1] = max(l->selected[0][0] + r->selected[0][1], max(l->selected[0][1] + r->selected[0][1], l->selected[0][0] + r->selected[1][1]));\n      selected[1][0] = max(l->selected[1][0] + r->selected[0][0], max(l->selected[1][1] + r->selected[0][0], l->selected[1][0] + r->selected[1][0]));\n      selected[1][1] = max(l->selected[1][0] + r->selected[0][1], max(l->selected[1][1] + r->selected[0][1], l->selected[1][0] + r->selected[1][1]));\n  }\n\n//   int query(int L, int R) {\n//       if (R < lo || hi < L) {\n//           return 0;\n//       }\n\n//       if (L <= lo && hi <= R) {\n//           return minMaxOddEven[_max][even];\n//       }\n\n//       if (_max == 0) {\n//           if (even == 0) {\n//               return min(l->query(L, R, 0, 0) - r->query(L, R, 1, 1), l->query(L, R, 0, 1) + r->query(L, R, 0, 0));\n//           } else {\n//               return min(l->query(L, R, 0, 1) + r->query(L, R, 0, 1), l->query(L, R, 0, 0) - r->query(L, R, 1, 0));\n//           }\n//       } else {\n//           if (even == 0) {\n//               return max(l->query(L, R, 1, 0) - r->query(L, R, 0, 1), l->query(L, R, 1, 1) + r->query(L, R, 1, 0));\n//           } else {\n//               return max(l->query(L, R, 1, 1) + r->query(L, R, 1, 1), l->query(L, R, 1, 0) - r->query(L, R, 0, 0));\n//           }\n//       }\n//   }\n\n  void update(int i, long long x) {\n      if (i < lo || hi < i) {\n          return;\n      }\n\n      if (lo == hi) {\n          selected[0][0] = 0;\n          selected[1][1] = x;\n          return;\n      }\n\n      l->update(i, x);\n      r->update(i, x);\n\n      build();\n  }\n};\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        Node st(nums, 0, nums.size() - 1);\n\n        long long res = 0;\n        for (auto& query : queries) {\n            st.update(query[0], query[1]);\n            res += max(st.selected[0][0], max(st.selected[0][1], max(st.selected[1][0], st.selected[1][1])));\n            res %= static_cast<long long>(1e9 + 7);\n        }\n        // cout << res << endl;\n        return res;\n    }\n};",
    "submit_ts": 1716691678.0
}