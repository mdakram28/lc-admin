{
    "username": "alex321",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        len_q = len(queries)\n        \n        ans = [-1] * len_q\n        \n        active = [True] * n\n        \n        prev_min = n - 1\n        \n        nodes = [Node(i) for i in range(n)]\n        for i in range(n - 1):\n            nodes[i].next = nodes[i + 1]\n        \n        for i in range(len_q):\n            # print(active)\n            u, v = queries[i]\n            \n            if not active[u] or not active[v]:\n                ans[i] = prev_min\n                # print(i, \"not active\")\n                continue\n                \n            active_count = 0\n            cur = nodes[u]\n            while cur and cur.index != v:\n                active_count += 1\n                active[cur.index] = False\n                cur = cur.next\n                \n            active[u] = True\n            active_count -= 1\n            \n            # print(i, active_count)\n                \n            new_min = prev_min - active_count\n                \n            nodes[u].next = nodes[v]\n                \n            ans[i] = new_min\n            prev_min = new_min\n        \n        # print(\"---\")\n        \n        return ans\n        \nclass Node:\n    def __init__(self, index: int) -> None:\n        self.index = index\n        self.next = None",
    "submit_ts": "1722742992",
    "subm_id": "1343781824"
}