{
    "username": "gsiddhant_2906",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &g, int start, int target1, int target2, int nodes) {\n    queue<int> q;\n    vector<int> visited(nodes + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : g[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[target1] || visited[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         vector<pair<pair<int, int>, int>> shapes(circles2.size());\n         vector<vector<int>> g(circles2.size() + 4);\n        int num =circles2.size();\n        \n        for (int i = 0; i < num ; ++i) {\n            shapes[i].first.first=circles2[i][0];\n            shapes[i].first.second=circles2[i][1];\n            shapes[i].second=circles2[i][2];\n           \n        }\n        \n        \n        \n         for (int i = 0; i < num ; ++i) {\n             \n            if (shapes[i].first.first <= shapes[i].second) {\n                g[num ].push_back(i);\n                g[i].push_back(num );\n            }\n            if (X - shapes[i].first.first <= shapes[i].second) {\n                g[num  + 2].push_back(i);\n                g[i].push_back(num  + 2);\n            }\n            if (shapes[i].first.second <= shapes[i].second) {\n                g[num  + 1].push_back(i);\n                g[i].push_back(num  + 1);\n            }\n            if (Y - shapes[i].first.second <= shapes[i].second) {\n                g[num  + 3].push_back(i);\n                g[i].push_back(num  + 3);\n            }\n            for (int j = i + 1; j < num ; ++j) {\n                double dis = sqrt(pow(shapes[i].first.first - shapes[j].first.first, 2) +\n                                       pow(shapes[i].first.second - shapes[j].first.second, 2));\n                int sum = shapes[i].second + shapes[j].second;\n                if (sum >= dis) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        int blocking = 0;\n        \nblocking = max(blocking, bfs(g, num , num  + 1, num  + 2, num  + 4)); // Check for bottom-left corner\n    blocking = max(blocking, bfs(g, num  + 3, num  + 2, num  + 1, num  + 4)); // Check for top-right corner\n        \n        if (blocking){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722138939",
    "subm_id": "1335803659"
}