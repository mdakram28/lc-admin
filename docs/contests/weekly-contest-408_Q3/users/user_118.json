{
    "username": "yinqiaozhang",
    "submission": "string to_string(string s) { return '\"' + s + '\"'; }\nstring to_string(const char *s) { return to_string((string) s); }\nstring to_string(bool b) { return (b ? \"true\" : \"false\"); }\ntemplate<typename A, typename B>\nstring to_string(pair<A, B> p) { return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\"; }\ntemplate<typename A>\nstring to_string(A v) { bool first = true; string res = \"{\"; for(const auto &x : v) { if(!first) { res += \", \"; } first = false; res += to_string(x);} res += \"}\"; return res; }\nvoid debug_out() { cout << endl; }\ntemplate<typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << \" \" << to_string(H); debug_out(T...);}\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n\nclass Solution {\npublic:\n    const double eps = 1e-8;\n    int numberOfSubstrings(string s) {\n        int n = s.size(), len = (int)(sqrt(n) + eps);\n        vector<int> pos;\n\n        for (int i = 0; i < n; i ++) {\n            if (s[i] == '0') pos.push_back(i);\n        }\n        int m = pos.size(), res = 0;\n        for (int i = 0; i < n; i ++) {\n            // \u5f00\u59cb\u679a\u4e3e0\n            int idx = lower_bound(pos.begin(), pos.end(), i) - pos.begin();\n            // \u6ca1\u6709zero\n            res += ((idx == m ? n : pos[idx]) - i);\n            for (int j = idx; j < m and j <= idx + len + 1; j ++) {\n                int zero = j - idx + 1;\n                int lo = pos[j] - i + 1 - zero, hi = (j + 1 < m ? pos[j + 1] : n) - i - zero;\n                // dbg(zero, lo, hi);\n                if (hi < zero * zero) continue;\n                res += hi - max(zero * zero, lo) + 1;\n                // dbg(hi - max(zero * zero, lo) + 1);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722137507",
    "subm_id": "1335765749"
}