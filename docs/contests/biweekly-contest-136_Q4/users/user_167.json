{
    "username": "tanakat01",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        g = [[] for _ in range(n)]\n        children = [[] for _ in range(n)]\n        for f, t in edges:\n            g[f].append(t)\n            g[t].append(f)\n        dist = [0] * n\n        def dfs(i, p):\n            for j in g[i]:\n                if j != p:\n                    dfs(j, i)\n                    v = dist[j] + 1 + (j + 1) % 2\n                    dist[i] = max(dist[i], v)\n                    children[i].append((v, j))\n            children[i].sort()\n        dfs(0, -1)      \n        #print(f'dist={dist}, children={children}')              \n        ans = [0] * n\n        def dfs1(i, p, d1):\n            if len(children[i]) == 0:\n                ans[i] = d1\n                return\n            ans[i] = max(children[i][-1][0], d1)\n            if len(children[i]) == 1:\n                _, j = children[i][0]\n                dfs1(j, i, d1 + 1 + (i + 1) % 2)\n                return\n            d2 = max(d1, children[i][-1][0])\n            for _, j in children[i][:-1]:\n                dfs1(j, i, d2 + 1 + (i + 1) % 2)\n            d2 = max(d1, children[i][-2][0])\n            _, j = children[i][-1]\n            dfs1(j, i, d2 + 1 + (i + 1) % 2)\n        dfs1(0, -1, 0)\n        return ans\n\n",
    "submit_ts": "1722699165",
    "subm_id": "1343203407"
}