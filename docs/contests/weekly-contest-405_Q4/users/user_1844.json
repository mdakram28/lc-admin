{
    "username": "Bug_Finderr",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        n = len(target)\n        \n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        dp = [float('inf')] * (n + 1)       # min cost to form target up to each pos\n        dp[0] = 0  # Cost to form an empty string\n        \n        for i in range(n):\n            if dp[i] == float('inf') : continue\n            \n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.is_end_of_word:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n        node.cost = min(node.cost, cost)",
    "submit_ts": "1720324736",
    "subm_id": "1312406798"
}