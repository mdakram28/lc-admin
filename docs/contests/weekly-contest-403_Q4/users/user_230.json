{
    "username": "rastsislau",
    "submission": "class Solution {\npublic:\n    \n    string createKey(int l, int r, int u, int d) {\n        return to_string(l) + \",\" + to_string(r) + \",\" + to_string(u) + \",\" + to_string(d);\n    }\n    \n    \n    void precompute(vector<vector<int>>& grid, vector<vector<int>>& left, vector<vector<int>>& right, vector<vector<int>>& up, vector<vector<int>>& down)\n    {\n        int m = grid.size(), n = grid[0].size();\n        \n    }\n    \n    int minimumArea(vector<vector<int>>& grid, int l, int r, int u, int d, unordered_map<string, int>& cache,unordered_map<string, int>& coord_cache ) {\n        string key = createKey(l, r, u, d);\n        if (cache.find(key) != cache.end()) {\n            return cache[key];\n        }\n\n        int left_most = INT_MAX;\n        int right_most = -1;\n        int up_most = INT_MAX;\n        int down_most = -1;\n        \n        \n        // 0 - i - u - d - left\n        // 1 - i - u - d - right\n        // 2 - j - l - r - up\n        // 3 - j - l - r - down\n        for (int i = l; i <= r; i++) {\n            int local_left_most = INT_MAX;\n            int local_right_most = -1;\n            string sub_key_left = createKey(0, i, u, d);\n            string sub_key_right = createKey(1, i, u, d);\n\n            if (coord_cache.find(sub_key_left) != coord_cache.end()) {\n                local_left_most = coord_cache[sub_key_left];\n                local_right_most = coord_cache[sub_key_right];\n            } else {\n                for (int j = u; j <= d; j++) {\n                    if (grid[i][j] == 1) {\n                        local_left_most = min(local_left_most, j);\n                        local_right_most = max(local_right_most, j);\n                    }\n                }\n                coord_cache[sub_key_left] = local_left_most;\n                coord_cache[sub_key_right] = local_right_most;\n            }\n            left_most = min(left_most, local_left_most);\n            right_most = max(right_most, local_right_most);\n        }\n\n        for (int j = u; j <= d; j++) {\n            int local_up_most = INT_MAX;\n            int local_down_most = -1;\n            string sub_key_up = createKey(2, j, l, r);\n            string sub_key_down = createKey(3, j, l, r);\n\n            if (coord_cache.find(sub_key_up) != coord_cache.end()) {\n                local_up_most = coord_cache[sub_key_up];\n                local_down_most = coord_cache[sub_key_down];\n            } else {\n                for (int i = l; i <= r; i++) {\n                    if (grid[i][j] == 1) {\n                        local_up_most = min(local_up_most, i);\n                        local_down_most = max(local_down_most, i);\n                    }\n                }\n                coord_cache[sub_key_up] = local_up_most;\n                coord_cache[sub_key_down] = local_down_most;\n            }\n            up_most = min(up_most, local_up_most);\n            down_most = max(down_most, local_down_most);\n        }\n        \n        int area = (right_most > -1 && down_most > -1) ? (down_most - up_most + 1) * (right_most - left_most + 1) : 1;\n        cache[key] = area;\n        //cout << \"Area1 \" << l << \":\" << r << \" \" << u << \":\" << d << \" \" << area << endl; \n        return area;\n    }\n    \n    int calculateTwoRectanglesArea(vector<vector<int>>& grid, int l, int r, int u, int d, unordered_map<string, int>& cache, unordered_map<string, int>& cache_coord) {\n        int minArea = INT_MAX;\n        for (int mid = l; mid < r; ++mid)\n        {\n                int area1 = minimumArea(grid, l, mid, u, d, cache, cache_coord);\n                int area2 = minimumArea(grid, mid + 1, r, u, d, cache, cache_coord);\n                minArea = min(minArea, area1 + area2);\n        }\n        \n        for (int mid = u; mid < d; ++mid)\n        {\n                int area1 = minimumArea(grid, l, r, u, mid, cache, cache_coord);\n                int area2 = minimumArea(grid, l, r, mid + 1, d, cache, cache_coord);\n                minArea = min(minArea, area1 + area2);\n        }\n        \n        //cout << \"Area2 \" << l << \":\" << r << \" \" << u << \":\" << d << \" \" << minArea << endl;\n        return minArea;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        unordered_map<string, int> cache;\n        unordered_map<string, int> cache_coord;\n        int minTotalArea = INT_MAX;\n\n        // Horizontal division\n        for (int mid = 0; mid < m - 1; ++mid) {\n            int area1 = minimumArea(grid, 0, mid, 0, n - 1, cache, cache_coord);\n            int area2 = calculateTwoRectanglesArea(grid, mid + 1, m - 1, 0, n - 1, cache, cache_coord);\n            minTotalArea = min(minTotalArea, area1 + area2);\n            area1 = minimumArea(grid, mid + 1, m - 1, 0, n - 1, cache, cache_coord);\n            area2= calculateTwoRectanglesArea(grid, 0, mid, 0, n - 1, cache, cache_coord);\n            minTotalArea = min(minTotalArea, area1 + area2);\n        }\n        // Vertical division\n        for (int mid = 0; mid < n - 1; ++mid) {\n            int area1 = minimumArea(grid, 0, m - 1, 0, mid, cache, cache_coord);\n            int area2 = calculateTwoRectanglesArea(grid, 0, m - 1, mid + 1, n - 1, cache, cache_coord);\n            minTotalArea = min(minTotalArea, area1 + area2);\n            area1 = minimumArea(grid, 0, m - 1, mid + 1, n - 1, cache, cache_coord);\n            area2 = calculateTwoRectanglesArea(grid, 0, m - 1, 0, mid, cache, cache_coord);\n            minTotalArea = min(minTotalArea, area1 + area2);\n        }\n        return minTotalArea;\n    }\n};",
    "submit_ts": 1719113438.0
}