{
    "username": "krishnash1355",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 2;\n        int m = edges2.size() + 2;\n        vector<vector<int>> v(edges1.size() + 2);\n        vector<vector<int>> second(edges2.size() + 2);\n        for (auto i : edges1) {\n            v[i[0] + 1].push_back(i[1] + 1);\n            v[i[1] + 1].push_back(i[0] + 1);\n        }\n        for (auto i : edges2) {\n            second[i[0] + 1].push_back(i[1] + 1);\n            second[i[1] + 1].push_back(i[0] + 1);\n        }\n        int val = 0;\n        queue<int> q;\n        vector<int> vis(max(n, m) + 2, 0);\n        if (!edges1.empty())\n            q.push(1);\n        vis[1] = 1;\n        while (!q.empty()) {\n            int a = q.front();\n            q.pop();\n            for (auto i : v[a]) {\n                if (vis[i]) continue;\n                val = i;\n                vis[i] = 1;\n                q.push(i);\n            }\n        }\n        int ans = 0;\n        vector<int> store(max(n, m) + 2, 0);\n        if (!edges1.empty())\n            q.push(val);\n        for (auto &i : vis) i = 0;\n        vis[val] = 1;\n        while (!q.empty()) {\n            int a = q.front();\n            q.pop();\n            bool check = false;\n            for (auto i : v[a]) {\n                if (vis[i]) continue;\n                q.push(i);\n                vis[i] = 1;\n                store[i] = store[a] + 1;\n            }\n        }\n        int ek = *max_element(store.begin(), store.end());\n        val = 0;\n        for (auto &i : vis) i = 0;\n        if (!edges2.empty())\n            q.push(1);\n        vis[1] = 1;\n        while (!q.empty()) {\n            int a = q.front();\n            q.pop();\n            for (auto i : second[a]) {\n                if (vis[i]) continue;\n                val = i;\n                vis[i] = 1;\n                q.push(i);\n            }\n        }\n        for (auto &i : store) i = 0;\n        if (!edges2.empty())\n            q.push(val);\n        for (auto &i : vis) i = 0;\n        vis[val] = 1;\n        while (!q.empty()) {\n            int a = q.front();\n            q.pop();\n            bool check = false;\n            for (auto i : second[a]) {\n                if (vis[i]) continue;\n                q.push(i);\n                vis[i] = 1;\n                store[i] = store[a] + 1;\n            }\n        }\n        int dusra = *max_element(store.begin(), store.end());\n            cout<<ek<<\" \"<<dusra<<endl;\n        return max({ek,dusra,1 + (ek + 1) / 2 + (dusra + 1) / 2});\n    }\n};",
    "submit_ts": 1719718566.0
}