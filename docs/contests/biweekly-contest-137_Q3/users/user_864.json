{
    "username": "Sonian",
    "submission": "from copy import deepcopy\nclass Solution:\n    MINIMUM = -float(\"inf\")\n    PRINT = True\n    def print(self, *args):\n        if self.PRINT:\n            print(*args)\n\n    def setMinimum(self, board, r=None, c=None):\n        row = len(board)\n        col = len(board[0])\n        if r is not None:\n            for j in range(col):\n                board[r][j] = self.MINIMUM\n        if c is not None:\n            for i in range(row):\n                board[i][c] = self.MINIMUM\n        return board\n            \n    def maximumForOne(self, board):\n        row = len(board)\n        col = len(board[0])\n        ans = self.MINIMUM\n        for i in range(row):\n            for j in range(col):\n                if board[i][j] > ans:\n                    ans = board[i][j]\n                    ans_i = i\n                    ans_j = j\n        return ans, ans_i, ans_j\n\n    def maximumForTwo(self, board):\n        row = len(board)\n        col = len(board[0])\n        # \u7b2c\u4e00\u4e0b\u627e\u6700\u5927\n        num0, i0, j0 = self.maximumForOne(board)\n        board0 = deepcopy(board)\n        board0 = self.setMinimum(board0, r=i0, c=j0)\n\n        num1, i1, j1 = self.maximumForOne(board0)\n        ans = num0 + num1\n\n        # \u7b2c\u4e00\u4e0b\u627e\u7684\u6700\u5927\u4e0d\u6b63\u786e\n        board[i0][j0] = self.MINIMUM\n        ans_ = max(board[i0]) + max([board[i][j0] for i in range(row)])\n        return max(ans_, ans)\n\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        row = len(board)\n        col = len(board[0])\n        # \u7b2c\u4e00\u4e0b\u627e\u6700\u5927\n        num0, i0, j0 = self.maximumForOne(board)\n        board0 = deepcopy(board)\n        board0 = self.setMinimum(board0, r=i0, c=j0)\n        \n        sum1 = self.maximumForTwo(board0)\n        ans0 = num0 + sum1\n\n        # \u7b2c\u4e00\u4e0b\u627e\u6700\u5927\u4e0d\u6b63\u786e\n        ans1 = self.MINIMUM\n        for j in range(col):\n            board0 = deepcopy(board)\n            tmp = board[i0][j]\n            board0 = self.setMinimum(board0, r=i0, c=j)\n            tmp += self.maximumForTwo(board0)\n            ans1 = max(ans1, tmp)\n\n        self.print((ans0, ans1))\n        return max(ans0, ans1)\n\n        # deprecated\n        # # \u7b2c\u4e00\u4e0b\u627e\u6700\u5927\u4e0d\u6b63\u786e\n        # board0 = deepcopy(board)\n        # board0[i0][j0] = self.MINIMUM\n        # self.print(board)\n        # board_i0_max = max(board0[i0])\n        # board_j0_max = max([board0[i][j0] for i in range(row)])\n        # sum0 = board_i0_max + board_j0_max\n\n        # # board[i0] max deal\n        # j01s = []\n        # for j, n in enumerate(board0[i0]):\n        #     if n == board_i0_max:\n        #         j01s.append(j)\n        \n        # # board[j0] max deal\n        # i02s = []\n        # for i, n in enumerate([board0[i][j0] for i in range(row)]):\n        #     if n == board_j0_max:\n        #         i02s.append(i)\n\n        # # process board0\n        # if len(j01s) == 1:\n        #     board0 = self.setMinimum(board0, r=i0, c=j01s[0])\n        # self.print(board0)\n        # if len(i02s) == 1:\n        #     board0 = self.setMinimum(board0, r=i02s[0], c=j0)\n        # self.print(board0)\n        # num2, _, _ = self.maximumForOne(board0)\n        # ans1 = sum0 + num2\n        # self.print(ans0, ans1)\n\n        # # \u53e6\u4e00\u79cd\u60c5\u51b5\n        # board0 = deepcopy(board)\n        # board0 = self.setMinimum(board0, r=i0, c=j0)\n        # num2, i2, j2 = self.maximumForOne(board0)\n        # self.print(board0)\n        # board1 = deepcopy(board)\n        # board1 = self.setMinimum(board1, r=i2, c=j2)\n        # sum01 = self.maximumForTwo(board1)\n        # self.print(board1)\n        # ans2 = sum01 + num2\n\n        # print((ans0, ans1, ans2))\n        # return max(ans0, ans1, ans2)\n\n\n        ",
    "submit_ts": "1723908373",
    "subm_id": "556330641"
}