{
    "username": "nikhil_120",
    "submission": "class Solution {\n    private:\n    int bimasking(vector<int>& arr, int target) {\n        int left = 0;\n        int right = arr.size() - 1;\n        \n        while (left <= right) {\n            int mid = left + (right - left) / 2;\n            \n            if (arr[mid] == target) {\n                return mid;\n            }\n            if (arr[mid] < target) {\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        \n        return -1; \n    }\npublic:\n    long long countSubarrays(vector<int>& arr, int target) {\n        int arrSize = arr.size();\n        long long subarrayCount = 0;\n        unordered_map<long long, long long> prevResults;\n        int a, b;\n        int startIndex = 0;\n        while (startIndex < arrSize) {\n            unordered_map<long long, long long> currResults;\n            long long andTarget = target;\n            int temp = a;\n            a = b;\n            b = temp;\n            if (arr[startIndex] == andTarget) {\n                ++subarrayCount;\n            }\n            \n             temp = a;\n                a = b;\n                b = temp;\n            currResults[arr[startIndex]] = 1;\n            \n            for (auto& [andValue, freq] : prevResults) {\n                long long newAndValue = andValue & arr[startIndex];\n                if (newAndValue == andTarget) {\n                    subarrayCount += freq;\n                }\n                currResults[newAndValue] += freq;\n            }\n            \n            prevResults = currResults;\n            ++startIndex;\n        }\n         int temp = a;\n        a = b;\n        b = temp;\n        \n        return subarrayCount;\n    }\n\n    private:\n    void sweept(int& a, int& b) {\n        int temp = a;\n        a = b;\n        b = temp;\n    }\n};\n",
    "submit_ts": "1720280893",
    "subm_id": "1311805823"
}