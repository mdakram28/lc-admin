{
    "username": "stuart_little25",
    "submission": "class Solution {\n\n    \n     \n\n\npublic:\n    \n     const int MOD = 1000000007;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n          vector<vector<int>> permCounts(n + 1, vector<int>( 401, 0));\n        permCounts[0][0] = 1;\n\n        unordered_map<int, int> reqMap;\n        for ( auto req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n      \n\n        int result = 0;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int nPos = 0; nPos < length; nPos++) {\n                    int prevInv = inv - nPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n           \n\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= 400; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n       \n        for (int count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n\n      \n\n        return result;\n    }\n};\n\n",
    "submit_ts": 1719070823.0
}