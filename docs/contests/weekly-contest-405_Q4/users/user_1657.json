{
    "username": "kartiku1601",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nvoid insert(TrieNode* root, const string& word, int cost) {\n    TrieNode* node = root;\n    for (char ch : word) {\n        if (node->children.find(ch) == node->children.end()) {\n            node->children[ch] = new TrieNode();\n        }\n        node = node->children[ch];\n    }\n    node->cost = min(node->cost, cost);\n}\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    TrieNode* root = new TrieNode();\n    int n = words.size();\n    for (int i = 0; i < n; i++) {\n        insert(root, words[i], costs[i]);\n    }\n\n    int targetLen = target.size();\n    vector<int> dp(targetLen + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 0; i < targetLen; i++) {\n        if (dp[i] == INT_MAX) continue;\n        TrieNode* node = root;\n        for (int j = i; j < targetLen; j++) {\n            if (node->children.find(target[j]) == node->children.end()) break;\n            node = node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n\n    return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n}\n};",
    "submit_ts": "1720324721",
    "subm_id": "1312406369"
}