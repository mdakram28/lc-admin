{
    "username": "Adoring Bhabha",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        lst = []\n        m = len(board)\n        n = len(board[0])\n        for i in range(m):\n            for j in range(n):\n                lst.append((board[i][j], (i, j)))\n\n        lst.sort()\n        lst.reverse()\n\n        # print(lst)\n\n        cur_best = -inf\n        def dfs(i, selected, curval):\n            # print(i, selected, curval)\n            nonlocal cur_best\n            if len(selected) == 3:\n                cur_best = max(cur_best, curval)\n                return\n            if len(lst) - i + len(selected) < 3:\n                return\n            val = lst[i][0]\n            if len(selected) == 2 and curval + val <= cur_best:\n                return\n            if len(selected) == 1 and curval + val + lst[i + 1][0] <= cur_best:\n                return\n            if len(selected) == 0 and val + lst[i + 1][0] + lst[i + 1][0] <= cur_best:\n                return\n            x, y = lst[i][1]\n            for idx in selected:\n                x2, y2 = lst[idx][1]\n                if x == x2 or y == y2:\n                    dfs(i + 1, selected, curval)\n                    return\n            dfs(i + 1, selected + [i], curval + val)\n            dfs(i + 1, selected, curval)\n\n        # print(cur_best)\n        dfs(0, [], 0)\n        return cur_best",
    "submit_ts": "1723907209",
    "subm_id": "556324180"
}