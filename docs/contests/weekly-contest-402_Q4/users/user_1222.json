{
    "username": "ll931110",
    "submission": "class Solution {\npublic:\n    vector<int> tx;\n    vector<int> _nums;\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        for (int i = 0; i < n; i++) {\n            _nums.push_back(nums[i]);\n        }\n        tx.resize(4 * n + 5);\n        build(1, 0, n - 1);\n               \n        vector<int> ans;\n        for (auto q : queries) {\n            if (q[0] == 2) {\n                update(1, 0, n - 1, q[1], q[2]);\n                if (q[1] > 0) {\n                    update(1, 0, n - 1, q[1] - 1, _nums[q[1] - 1]);\n                }\n                if (q[1] + 1 < n) {\n                    update(1, 0, n - 1, q[1] + 1, _nums[q[1] + 1]);\n                }\n            } else {\n                int val = get(1, 0, n - 1, q[1], q[2]);\n                if (q[1] > 0 && q[1] < n - 1 && _nums[q[1]] > _nums[q[1] - 1] && _nums[q[1]] > _nums[q[1] + 1]) {\n                    val--;\n                }\n                if (q[2] != q[1] && q[2] > 0 && q[2] < n - 1 && _nums[q[2]] > _nums[q[2] - 1] && _nums[q[2]] > _nums[q[2] + 1]) {\n                    val--;\n                }\n                ans.push_back(val);\n            }\n        }\n\n        return ans;\n    }\n\n    void set_val(int i, int low) {\n        bool ok = true;\n        if (low == 0 || low == _nums.size() - 1) {\n            ok = false;\n        }\n        else if (_nums[low] <= _nums[low - 1]) {\n            ok = false;\n        }\n        else if (_nums[low] <= _nums[low + 1]) {\n            ok = false;\n        }\n        tx[i] = ok;\n    }\n\n    void build(int i, int low, int high) {\n        if (low == high) {\n            set_val(i, low);\n            return;\n        }\n\n        int mid = (low + high) / 2;\n        build(2 * i, low, mid);\n        build(2 * i + 1, mid + 1, high);\n        tx[i] = tx[2 * i] + tx[2 * i + 1];\n    }\n\n    void update(int i, int low, int high, int pos, int val) {\n        if (low == high) {\n            _nums[pos] = val;\n            set_val(i, pos);\n            return;\n        }\n\n        int mid = (low + high) / 2;\n        if (pos <= mid) {\n            update(2 * i, low, mid, pos, val);\n        } else {\n            update(2 * i + 1, mid + 1, high, pos, val);\n        }\n        tx[i] = tx[2 * i] + tx[2 * i + 1];\n    }\n\n    int get(int i, int low, int high, int u, int v) {\n        if (v < low || high < u) {\n            return 0;\n        }\n        if (u <= low && high <= v) {\n            return tx[i];\n        }\n        int mid = (low + high) / 2;\n        return get(2 * i, low, mid, u, v) + get(2 * i + 1, mid + 1, high, u, v);\n    }\n};",
    "submit_ts": 1718508932.0
}