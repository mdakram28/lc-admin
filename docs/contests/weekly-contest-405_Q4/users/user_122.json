{
    "username": "HOBBIT__",
    "submission": "class node {\npublic:\n    unordered_map<char, node*> child;\n    vector<int> index;\n};\n\nclass TrieClass {\npublic:\n    TrieClass() : root(new node()) {\n        \n    }\n\n    void add(const string& word, int index) {\n        node* curr = root;\n        for (char c : word) {\n            if (!curr->child.count(c)) {\n                curr->child[c] = new node();\n            }\n            curr = curr->child[c];\n        }\n        curr->index.push_back(index);\n    }\n\n    node* getRoot() {\n        return root;\n    }\n    \n    node* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieClass trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.add(words[i], i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX){\n                continue;\n            }\n            node* curr = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                if (!curr->child.count(target[j])){\n                     break;\n                }\n                curr = curr->child[target[j]];\n                for (int ind : curr->index) {\n                    int cost = costs[ind];\n                    int len = words[ind].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720321417",
    "subm_id": "1312322334"
}