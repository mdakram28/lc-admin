{
    "username": "rajkaustuk",
    "submission": "class Solution {\npublic:\n    char palindromeDP[100001][7];\n    char nonZeroPalindromeDP[100001][7];\n    int nextMod[100001][7];\n    int nonZeroNextMod[100001][7];\n\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        \n        if (k == 2) {\n            if (n == 1) {\n                return \"8\"; \n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            return result;\n        }\n        \n        if (k == 5) {\n            if (n == 1) {\n                return \"5\"; \n            }\n            string result(n, '9');\n            result[0] = '5';\n            result[n - 1] = '5';\n            return result;\n        }\n        \n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            return result;\n        }\n        \n        if (k == 8) {\n            if (n <= 5) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            result[2] = '8';\n            result[n - 3] = '8';\n            return result;\n        }\n        \n        if (k == 6) {\n            if (n == 1) return \"6\";\n            if (n == 2) return \"66\";\n            if (n == 3) return \"888\";\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            if (n % 2 == 1) {\n                result[n / 2] = '8';\n            } else {\n                result[n / 2] = '7';\n                result[(n / 2) - 1] = '7';\n            }\n            return result;\n        }\n        \n        if (k == 7) {\n            if (n == 1) return \"7\";\n            \n            std::fill(&palindromeDP[0][0], &palindromeDP[0][0] + sizeof(palindromeDP), 0);\n            std::fill(&nonZeroPalindromeDP[0][0], &nonZeroPalindromeDP[0][0] + sizeof(nonZeroPalindromeDP), 0);\n\n            for (int digit = 1; digit < 10; ++digit) {\n                palindromeDP[1][digit % 7] = '0' + digit;\n                if (digit != 0) {\n                    nonZeroPalindromeDP[1][digit % 7] = '0' + digit;\n                }\n            }\n\n            int baseMod = 10 % 7;\n            for (int len = 0; len <= 100000 - 2; ++len) {\n                for (int mod = 0; mod < 7; ++mod) {\n                    if ((len == 0 && mod != 0) || (len > 0 && palindromeDP[len][mod] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int newMod = (baseMod * digit + digit + mod * 10) % 7;\n                        if (palindromeDP[len + 2][newMod] == 0 || palindromeDP[len + 2][newMod] < '0' + digit) {\n                            palindromeDP[len + 2][newMod] = '0' + digit;\n                            nextMod[len + 2][newMod] = mod;\n                        }\n                        if (digit == 0) continue;\n                        if (nonZeroPalindromeDP[len + 2][newMod] == 0 || nonZeroPalindromeDP[len + 2][newMod] < '0' + digit) {\n                            nonZeroPalindromeDP[len + 2][newMod] = '0' + digit;\n                            nonZeroNextMod[len + 2][newMod] = mod;\n                        }\n                    }\n                }\n                baseMod = (baseMod * 10) % 7;\n            }\n            \n            int q = n;\n            string leftPart(1, nonZeroPalindromeDP[q][0]);\n            string rightPart(1, nonZeroPalindromeDP[q][0]);\n            int mod = nonZeroNextMod[q][0];\n            q -= 2;\n            while (q > 0) {\n                leftPart += palindromeDP[q][mod];\n                if (q > 1) rightPart += palindromeDP[q][mod];\n                else break;\n                mod = nextMod[q][mod];\n                q -= 2;\n            }\n            std::reverse(rightPart.begin(), rightPart.end());\n            return leftPart + rightPart;\n        }\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723951772",
    "subm_id": "1359779692"
}