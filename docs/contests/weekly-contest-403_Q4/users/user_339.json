{
    "username": "lze",
    "submission": "class Solution {\n    \n    int result;\n    \n    public int minimumSum(int[][] grid) {\n        // \u6309\u7b2c\u4e8c\u9898\u7684\u601d\u8def\uff0c\u4e00\u5b9a\u80fd\u627e\u51fa\u4e00\u6574\u4e2a\u5927\u7684\u957f\u65b9\u5f62\uff0c\u5148\u628a\u6240\u67091\u90fd\u5305\u4f4f\n        // \u5305\u4f4f\u4e4b\u540e\u5982\u4f55\u5207\u5272\u6210\u4e09\u4e2a\u957f\u65b9\u5f62\uff1f\n        int up, down, left, right;\n        up = Integer.MAX_VALUE;\n        down = -1;\n        left = Integer.MAX_VALUE;\n        right = -1;\n        \n        int count = 0;\n        for(int i=0; i<grid.length; i++){\n            for(int j=0; j<grid[0].length; j++){\n                if(grid[i][j] == 1){\n                    count ++;\n                    up = Math.min(up, i);\n                    down = Math.max(down, i);\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                }\n            }\n        }\n        // \u7279\u6b8a\u60c5\u51b5\n        if(count <= 3){\n            return 3;\n        }\n        // \u5df2\u7ecf\u627e\u5230\u4e0a\u4e0b\u5de6\u53f3\u8fb9\u754c\uff0c\u641c\u7d22\uff0c\u6700\u591a3\u4e2a\u77e9\u5f62\uff0c\u7b2c\u4e09\u4e2a\u77e9\u5f62\u5fc5\u987b\u56ca\u62ec\u6240\u6709\u5269\u4e0b\u7684\u70b9\n        result = (down-up+1)*(right-left+1);\n        \n        int n = grid.length;\n        int m = grid[0].length;\n        \n        // \u4e0a\u4e0b\u52061\u90e8\u5206\uff0c\u4e5f\u5c31\u662f\u5168\u90e8\u6a2a\u7740\u653e\n        for(int i=left; i<right-1; i++){\n            for(int j=i+1; j<=right-1; j++){\n                // [left,i],[i+1, j],[j+1, right]\n                result = Math.min(result, area(grid, up, down, left , i)\n                    + area(grid, up, down, i+1, j)\n                    + area(grid, up, down, j+1, right));\n            }\n        }\n        \n        // \u5de6\u53f3\u5206\u4e24\u90e8\u5206\uff0c\u5de6\u53f3\u4e0a\u4e0b\u62c6\n        for(int i=left; i<right; i++){\n            // [left, i] [i+1, right]\n            for(int j=up; j+1<=down; j++){\n                // [up, j] [j+1, down]\n                result = Math.min(result, area(grid, up, down, left, i)\n                                 + area(grid, up, j, i+1, right)\n                                 + area(grid, j+1, down, i+1, right));\n                result = Math.min(result, area(grid, up, j, left, i)\n                                 + area(grid, j+1, down, left, i)\n                                 + area(grid, up, down, i+1, right));\n            }\n            \n        }\n        \n        // \u4e0a\u4e0b\u52062\u90e8\u5206\uff0c\u4e0a\u90e8\u5206\u62c6\u6216\u8005\u4e0b\u90e8\u5206\u62c6\n        for(int i=up; i+1<=down; i++){\n            // [up, i], [i+1, down]\n            \n            // [left, j], [j+1, right]\n            for(int j=left; j+1<=right; j++){\n                result = Math.min(result, \n                                  area(grid, up, i, left, j)\n                                  + area(grid, up, i, j+1, right)\n                                 + area(grid, i+1, down, left, right));\n                result = Math.min(result,\n                                 area(grid, up, i, left, right)\n                                 + area(grid, i+1, down, left, j)\n                                 + area(grid, i+1, down, j+1, right));\n            }\n            \n        }\n        // \u4e0a\u4e0b\u5206\u4e09\u90e8\u5206\uff0c\u90fd\u4e0d\u62c6\n        for(int i=up; i<=down; i++){\n            for(int j=i+1; j+1<=down; j++){\n                // [up, i] [i+1,j] [j+1,down]\n                result = Math.min(result, area(grid, up, i, left, right)\n                                 + area(grid, i+1, j, left, right)\n                                  + area(grid, j+1, down, left, right));\n            }\n        }\n        return result;\n    }\n    \n    private int area(int[][] grid, int up, int down, int left, int right){\n        int newUP, newDown, newLeft, newRight;\n        newUP = Integer.MAX_VALUE;\n        newDown = -1;\n        newLeft = Integer.MAX_VALUE;\n        newRight = -1;\n        for(int i=up; i<=down; i++){\n            for(int j=left; j<=right; j++){\n                if(grid[i][j] == 1){\n                    newUP = Math.min(newUP, i);\n                    newDown = Math.max(newDown, i);\n                    newLeft = Math.min(newLeft, j);\n                    newRight = Math.max(newRight, j);\n                }\n            }\n        }\n        return (newDown - newUP + 1) * (newRight - newLeft + 1);\n    }\n    \n    \n    \n}",
    "submit_ts": "1719113890",
    "subm_id": "1297335331"
}