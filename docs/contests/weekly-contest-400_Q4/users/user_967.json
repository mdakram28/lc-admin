{
    "username": "lm105013",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        tmp = max(nums)\n        if tmp <= k:\n            return k - tmp\n        \n        \n        def find(n):\n            rec = [0 for _ in range(32)]\n            i = 0\n            while n:\n                if n & 1:\n                    rec[i] = 1\n                n >>= 1\n                i += 1\n            return rec\n        \n        \n        def get_and_total(arr, target):\n            ans = 0\n            for i in range(32):\n                if arr[i] == target:\n                    ans |= 1 << i\n            return ans\n        \n        def sum_arr(a1, a2, ad=True):\n            if ad:\n                return [n1+n2 for n1, n2 in zip(a1, a2)]\n            else:\n                return [n1-n2 for n1, n2 in zip(a1, a2)]\n        \n        res = inf\n        cur = [0 for _ in range(32)]\n        \n        for n in nums:\n            res = min(res, abs(k - n))\n        \n        l, r = 0, 0\n        while r < len(nums):\n            cur = sum_arr(cur, find(nums[r]))\n            tmp = get_and_total(cur, r - l + 1)\n            res = min(res, abs(tmp - k))\n            while l < r and tmp < k:\n                cur = sum_arr(cur, find(nums[l]), False)\n                l += 1\n                tmp = get_and_total(cur, r - l + 1)\n                res = min(res, abs(tmp - k))\n            r += 1\n        \n        return res\n        \n",
    "submit_ts": 1717299841.0
}