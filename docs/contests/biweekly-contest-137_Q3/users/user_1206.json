{
    "username": "lam022",
    "submission": "class Solution {\n    int m,n;\n    public long maximumValueSum(int[][] board) {\n        m = board.length;\n        n = board[0].length;\n        long maxVal = -1000000001;\n        boolean[] excludeRow = new boolean[m];\n        boolean[] excludeCol = new boolean[n];\n        int maxRow = 0, maxCol = 0;\n        for (int i=0; i < m; i++) {\n            for (int j=0; j <n; j++) {\n                if (maxVal < board[i][j]) {\n                    maxVal = board[i][j];\n                    maxRow = i;\n                    maxCol = j;\n                }\n            }\n        }\n        excludeRow[maxRow] = true;\n        excludeCol[maxCol] = true;\n        long ans = maxVal + findMaxTwoRook(board, excludeRow, excludeCol);\n        // System.out.println(ans);\n\n\n        for (int i=0; i < m; i++) {\n            if (i == maxRow) continue;\n            for (int j=0; j < n; j++) {\n                if (j == maxCol) continue;\n                excludeRow[i] = true;\n                excludeCol[j] = true;\n                ans = Math.max(ans, board[i][maxCol]+board[maxRow][j]+findMaxOneRook(board, excludeRow, excludeCol));\n                excludeRow[i] = false;\n                excludeCol[j] = false;\n            }\n        }\n        return ans;\n    }\n\n    public long findMaxTwoRook(int[][] board, boolean[] excludeRow, boolean[] excludeCol) {\n        long maxVal = -1000000001;\n        int maxRow = -1;\n        int maxCol = -1;\n        for (int i=0; i < m; i++) {\n            if (excludeRow[i]) continue;\n            for (int j=0; j < n; j++) {\n                if (excludeCol[j]) continue;\n                if (maxVal < board[i][j]) {\n                    maxVal = board[i][j];\n                    maxRow = i;\n                    maxCol = j;\n                }\n            }\n        }\n        excludeRow[maxRow] = true;\n        excludeCol[maxCol] = true;\n        long ans = maxVal + findMaxOneRook(board, excludeRow, excludeCol);\n        // System.out.println(ans);\n        excludeRow[maxRow] = false;\n        excludeCol[maxCol] = false;\n        ans = Math.max(ans, findMaxTwoWithin(board, excludeRow, excludeCol, maxRow, maxCol));\n        \n        return ans;\n    }\n\n    public long findMaxTwoWithin(int[][] board, boolean[] excludeRow, boolean[] excludeCol, int row, int col) {\n        long maxValRow = -1000000001;\n        long maxValCol = -1000000001;\n        for (int i=0; i < m; i++) {\n            if (excludeRow[i] || i == row) continue;\n            maxValCol = Math.max(maxValCol, board[i][col]);\n        }\n\n        for (int i=0; i < n; i++) {\n            if (excludeCol[i] || i == col) continue;\n            maxValRow = Math.max(maxValRow, board[row][i]);\n        }\n        // System.out.println(maxValRow+maxValCol);\n        return maxValRow+maxValCol;\n    }\n\n    public long findMaxOneRook(int[][] board, boolean[] excludeRow, boolean[] excludeCol) {\n        long maxVal = -1000000000;\n        for (int i=0; i < m; i++) {\n            if (excludeRow[i]) continue;\n            for (int j=0; j < n; j++) {\n                if (excludeCol[j]) continue;\n                if (maxVal < board[i][j]) {\n                    maxVal = board[i][j];\n                }\n            }\n        }\n        return maxVal;\n    }\n}",
    "submit_ts": "1723910189",
    "subm_id": "1359220653"
}