{
    "username": "meet-mahna",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        List<Integer>[] graph = new List[n];\n        for(int i = 0; i < n; i++) {\n            graph[i] = new ArrayList<>();\n            if(i < n - 1) graph[i].add(i + 1);\n        }\n        int[] ans = new int[queries.length];\n        int dis = n - 1;\n        for(int i = 0; i < queries.length; i++) {\n            int[] q = queries[i];\n            int from = q[0], to = q[1];\n            int count = removeEdges(graph, from, to);\n            // System.out.println(\"Removed : \" + count);\n            if(count > 0) {\n                graph[from].add(to);\n                dis -= count - 1;\n            }\n            ans[i] = dis;\n        }\n        return ans;\n    }\n\n    // delete and return count of edges deleted\n    int removeEdges(List<Integer>[] graph, int src, int dest) {\n        int count = 0, node = src;\n        while(node != dest) {\n            // System.out.println(node + \" \" + count);\n            if(graph[node].size() == 0) return 0;\n            if(graph[node].get(0) <= dest) {\n                node = graph[node].remove(0);\n                count++;\n            }\n            else return 0;\n        }\n        return count;\n    }\n}\n// queries[i][0] < queries[j][0] < queries[i][1] < queries[j][1] : no intersection \n\n",
    "submit_ts": "1722742872",
    "subm_id": "1343779042"
}