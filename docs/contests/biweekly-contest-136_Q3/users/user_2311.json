{
    "username": "sg_69",
    "submission": "class Solution {\npublic:\n    int n, m;\n\n    int solve(int i, int j, int rem, vector<vector<vector<int>>>& dp, vector<vector<int>>& grid) {\n        if (i == (n + 1) / 2) {\n            if (rem == 0) return 0;\n            return 1e6; \n        }\n        if (dp[i][j][rem] != -1) return dp[i][j][rem];\n\n        int cnt = 0, len = 1;\n        cnt = (grid[i][j] != 1);\n        if (i != n - 1 - i) cnt += (grid[n - 1 - i][j] != 1), len++;\n        if (j != m - 1 - j) cnt += (grid[i][m - 1 - j] != 1), len++;\n        if (i != n-1-i && j != m-1-j) cnt += (grid[n - 1 - i][m - 1 - j] != 1), len++;\n        int o = cnt, z = len - cnt, ni = i, nj = j+1;\n\n        if (j + 1 >= (m + 1) / 2) ni = i+1, nj = 0;\n        o += solve(ni, nj, (rem + o) % 4, dp, grid);\n        z += solve(ni, nj, (rem - z + 4) % 4 , dp, grid);\n        return dp[i][j][rem] = min(o, z);\n    }\n\n    int minFlips(vector<vector<int>>& grid) {\n        n = grid.size();\n        m = grid[0].size();\n        vector<vector<vector<int>>> dp((n + 1) / 2, vector<vector<int>>(m / 2 + 1, vector<int>(4, -1)));\n\n        int cnt = 0;\n        for (const auto& row : grid) {\n            for (int cell : row) {\n                if (cell == 1) cnt++;\n            }\n        }\n\n        return solve(0, 0, cnt % 4, dp, grid);\n    }\n};",
    "submit_ts": "1722700419",
    "subm_id": "1343241331"
}