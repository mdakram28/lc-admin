{
    "username": "ws1255",
    "submission": "class Solution {\n    int[][] sums;\n    public int minimumSum(int[][] grid) {\n        int[] boundary = getBoundary(grid);\n        int upper = boundary[0], bottom = boundary[1], left = boundary[2], right = boundary[3];\n        // System.out.println(\"upper: \" + upper + \", bottom: \" + bottom + \", left: \" + left + \", right: \" + right);\n        buildSums(grid);\n        \n        int res = Integer.MAX_VALUE;\n        // senario 1\n        for(int row = upper; row <= bottom; row++) {\n            for(int col = left; col <= right; col++) {\n                int a = helper(upper, left, row, col);\n                int b = helper(row + 1, left, bottom, col);\n                int c = helper(upper, col + 1, bottom, right);\n                if(a == 0 || b == 0 || c == 0) continue;\n                res = Math.min(res, a + b + c);\n            }\n        }\n        \n        // senario 2\n        for(int row1 = upper; row1 <= bottom; row1++) {\n            for(int row2 = row1; row2 <= bottom; row2++) {\n                int a = helper(upper, left, row1, right);\n                int b = helper(row1 + 1, left, row2, right);\n                int c = helper(row2 + 1, left, bottom, right);\n                if(a == 0 || b == 0 || c == 0) continue;\n                res = Math.min(res, a + b + c);\n            }\n        }\n        \n        // senario 3\n        for(int col1 = left; col1 <= right; col1++) {\n            for(int col2 = col1; col2 <= right; col2++) {\n                int a = helper(upper, left, bottom, col1);\n                int b = helper(upper, col1 + 1, bottom, col2);\n                int c = helper(upper, col2 + 1, bottom, right);\n                // System.out.println(\"------\");\n                // System.out.println(\"col1: \" + col1 + \", col2: \" + col2);\n                // System.out.println(\"a: \" + a + \", b: \" + b + \", c: \" + c);\n                if(a == 0 || b == 0 || c == 0) continue;\n                res = Math.min(res, a + b + c);\n                // System.out.println(\"col1 : \" + col1 + \", col2: \" + col2 + \", res: \" + res);\n            }\n        }\n        \n        // senario 4\n        for(int col = left; col <= right; col++) {\n            for(int row = upper; row <= bottom; row++) {\n                int a = helper(upper, left, bottom, col);\n                int b = helper(upper, col + 1, row, right);\n                int c = helper(row + 1, col + 1, bottom, right);\n                if(a == 0 || b == 0 || c == 0) continue;\n                res = Math.min(res, a + b + c);\n            }\n        }\n        \n        // senario 5\n        \n        for(int row = upper; row <= bottom; row++) {\n            for(int col = left; col <= right; col++) {\n                int a = helper(upper, left, row, right);\n                int b = helper(row + 1, left, bottom, col);\n                int c = helper(row + 1, col + 1, bottom, right);\n                if(a == 0 || b == 0 || c == 0) continue;\n                res = Math.min(res, a + b + c);\n            }\n        }\n        \n        // senario 6\n        for(int row = upper; row <= bottom; row++) {\n            for(int col = left; col <= right; col++) {\n                int a = helper(upper, left, row, col);\n                int b = helper(upper, col + 1, row, right);\n                int c = helper(row + 1, left, bottom, right);\n                if(a == 0 || b == 0 || c == 0) continue;\n                res = Math.min(res, a + b + c);\n            }\n        }\n        \n        return res;\n    }\n    \n    int helper(int row1, int col1, int row2, int col2) {\n        if(row2 < row1 || col2 < col1) return 0;\n        // System.out.println(\"--------\");\n        // System.out.println(\"row1: \" + row1 + \", col1: \" + col1 + \", row2: \" + row2 + \", col2: \" + col2);\n        while(col1 <= col2 && getSum(row1, col1, row2, col1) == 0) col1++;\n        while(row1 <= row2 && getSum(row1, col1, row1, col2) == 0) row1++;\n        while(row1 <= row2 && getSum(row2, col1, row2, col2) == 0) row2--;\n        while(col1 <= col2 && getSum(row1, col2, row2, col2) == 0) col2--;\n        if(row2 < row1 || col2 < col1) return 0;\n        \n        return (row2 - row1 + 1) * (col2 - col1 + 1);\n    }\n    \n    void buildSums(int[][] matrix) {\n        int m = matrix.length, n = matrix[0].length;\n        sums = new int[m + 1][n + 1];\n        for(int i = 1; i <= m; i++) {\n            for(int j = 1; j <= n; j++) {\n                sums[i][j] = matrix[i - 1][j - 1] + sums[i - 1][j] + sums[i][j - 1] - sums[i - 1][j - 1];\n            }\n        }\n    }\n    \n    int getSum(int row1, int col1, int row2, int col2) {\n        // System.out.println(\"getSum row1: \" + row1 + \", col1: \" + col1 + \", row2: \" + row2 + \", col2: \" + col2);\n        return sums[row2 + 1][col2 + 1] - sums[row1][col2 + 1] - sums[row2 + 1][col1] + sums[row1][col1];\n    }\n    \n    int[] getBoundary(int[][] grid) {\n        int upper = Integer.MAX_VALUE, bottom = Integer.MIN_VALUE;\n        int left = Integer.MAX_VALUE, right = Integer.MIN_VALUE;\n        int m = grid.length, n = grid[0].length;\n        \n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                if(grid[i][j] != 1) continue;\n                upper = Math.min(upper, i);\n                left = Math.min(left, j);\n                bottom = Math.max(bottom, i);\n                right = Math.max(right, j);\n            }\n        }\n        \n        return new int[]{upper, bottom, left, right};\n    }\n}",
    "submit_ts": 1719114776.0
}