{
    "username": "lympanda",
    "submission": "\ntemplate <typename T>\nstruct binary_indexed_tree{\n  int N;\n  vector<T> BIT;\n  binary_indexed_tree(int N): N(N), BIT(N + 1, 0){\n  }\n  void add(int i, T x){\n    while (i <= N){\n      BIT[i] += x;\n      i += i & -i;\n    }\n  }\n  T get(int i){\n    T ans = 0;\n    while (i > 0){\n      ans += BIT[i];\n      i -= i & -i;\n    }\n    return ans;\n  }\n  T get(int L, int R){\n    return get(R) - get(L-1);\n  }\n};\n\nvoid add1(set<int>& st,binary_indexed_tree<int>& bit,binary_indexed_tree<int>& cnt,int v,int n)\n{\n    int tmp;\n    if (st.size()==0)\n    {\n        st.insert(v);\n        bit.add(n,n);\n        cnt.add(n,1);\n        return;\n    }\n    set<int>::iterator it2=st.lower_bound(v);\n    set<int>::iterator it1=it2;\n    if (it1==st.begin())\n    {\n        it1=st.end();\n        it1--;\n    }\n    else it1--;\n    if (it2==st.end())\n    {\n        it2=st.begin();\n    }\n    //cout<<\"add:\"<<*it1<<\" \"<<v<<\" \"<<*it2<<endl;\n    tmp=(*it2+n-1-*it1)%n+1;\n    //cout<<\"add,tmp:\"<<tmp<<endl;\n    bit.add(tmp,-tmp);\n    cnt.add(tmp,-1);\n\n    tmp=(v+n-1-*it1)%n+1;\n    bit.add(tmp,tmp);\n    cnt.add(tmp,1);\n\n    tmp=(*it2+n-1-v)%n+1;\n    bit.add(tmp,tmp);\n    cnt.add(tmp,1);\n    st.insert(v);\n}\n\nvoid remove1(set<int>& st,binary_indexed_tree<int>& bit,binary_indexed_tree<int>& cnt,int v,int n)\n{\n    int tmp;\n    if (st.size()==1)\n    {\n        st.erase(v);\n        bit.add(n,-n);\n        cnt.add(n,-1);\n        return;\n    }\n    st.erase(v);\n    set<int>::iterator it2=st.lower_bound(v);\n    set<int>::iterator it1=it2;\n    if (it1==st.begin())\n    {\n        it1=st.end();\n        it1--;\n    }\n    else it1--;\n    if (it2==st.end())\n    {\n        it2=st.begin();\n    }\n    \n    //cout<<\"rem:\"<<*it1<<\" \"<<v<<\" \"<<*it2<<endl;\n    tmp=(*it2+n-1-*it1)%n+1;\n    //cout<<\"rem,tmp:\"<<tmp<<endl;\n    bit.add(tmp,tmp);\n    cnt.add(tmp,1);\n\n    tmp=(v+n-1-*it1)%n+1;\n    bit.add(tmp,-tmp);\n    cnt.add(tmp,-1);\n\n    tmp=(*it2+n-1-v)%n+1;\n    bit.add(tmp,-tmp);\n    cnt.add(tmp,-1);\n}\n\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& a, vector<vector<int>>& queries) {\n        int i,j,k,o,n,x,y,ty,tmp,sz,prev1,next1;\n        vector<int> ans;\n        n=a.size();\n        binary_indexed_tree<int> bit(n+10);\n        binary_indexed_tree<int> cnt(n+10);\n        set<int> st;\n        prev1=-1;\n        for (i=0;i<n;i++)\n        {\n            x=a[i];\n            y=a[(i+1)%n];\n            if (x==y)\n            {\n                st.insert(i);\n                if (prev1!=-1)\n                {\n                    //cout<<\"v:\"<<i-prev1<<endl;\n                    bit.add(i-prev1,i-prev1);\n                    cnt.add(i-prev1,1);\n                }\n                prev1=i;\n            }\n        }\n        if (st.size()!=0)\n        {\n            x=*st.begin();\n            //cout<<\"v:\"<<x+n-prev1<<endl;\n            bit.add(x+n-prev1,x+n-prev1);\n            cnt.add(x+n-prev1,1);\n        }\n        \n        ans.clear();\n        for (o=0;o<queries.size();o++)\n        {\n            ty=queries[o][0];\n            if (ty==1)\n            {\n                sz=queries[o][1];\n                if (st.size()==0)\n                {\n                    tmp=n;\n                }\n                else\n                {\n                    //cout<<\"sz,bit,cnt:\"<<sz<<\" \"<<bit.get(sz,n)<<\" \"<<cnt.get(sz,n)<<endl;\n                    tmp=bit.get(sz,n)-cnt.get(sz,n)*(sz-1);\n                }\n                ans.push_back(tmp);                \n            }\n            else\n            {\n                x=queries[o][1];\n                y=queries[o][2];\n                prev1=(x+n-1)%n;\n                next1=(x+1)%n;\n                if (a[prev1]==a[x])\n                {\n                    remove1(st,bit,cnt,prev1,n);\n                }\n                if (a[x]==a[next1])\n                {\n                    remove1(st,bit,cnt,x,n);\n                }\n                a[x]=y;\n                if (a[prev1]==a[x])\n                {\n                    add1(st,bit,cnt,prev1,n);\n                }\n                if (a[x]==a[next1])\n                {\n                    add1(st,bit,cnt,x,n);\n                }\n            }\n            //cout<<\"st.sz:\"<<st.size()<<endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741457",
    "subm_id": "1343745471"
}