{
    "username": "dibendu07",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#define ll                  long long\n#define endl                '\\n'\n#define ff                  first\n#define ss                  second\n#define pb                  push_back\n#define mp                  make_pair\n// fats i/p , o/p\n#define FAST_IO             (ios_base:: sync_with_stdio(false),cin.tie(NULL));\n#define yes cout<<\"YES\\n\"\n#define no cout<<\"NO\\n\"\nconst ll MOD = 998244353;\n// Maths\nll fact(ll n)          { if(n==0) return 1; ll res = 1; for (ll i = 2; i <= n; i++) (res = res%MOD * i%MOD)%MOD; return res; }\nll nPr(ll n, ll r)     { return fact(n) / fact(n - r); }\nll nCr(ll n, ll r)     { return fact(n) / (fact(r) * fact(n - r)); }\nll gcd(ll a, ll b)     { if (b == 0) return a; return gcd(b, a % b); }\nll lcm(ll a, ll b)     { return (a * b) / gcd(a, b);}\nll mypow(ll a, ll b)   { ll ans = 1; while(b){ if (b&1) ans = (ans*a) ; b /= 2; a = (a*a); } return ans; }\nbool isPrime(ll n)     { if(n <= 1) return false; for(ll i = 2; i <= sqrt(n); i++) if(n % i == 0) return false; return true; }\nbool is_bound(int x,int y, int n, int m) {return x >= 0 && x < n && y >= 0 && y < m;}\n\nclass TrieNode{\npublic:\n    vector<pair<int, int>> w;\n    unordered_map<char, TrieNode*> mp;\n};\nclass Trie{\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void take(string w, int i, int c) {\n        TrieNode* k = root;\n        for(auto &x : w){\n            if(!k->mp.count(x)) k->mp[x] = new TrieNode();\n            k = k->mp[x];\n        }\n        k->w.push_back({i, c});\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t;\n        int n=target.size();\n        int inf=INT_MAX;\n        vector<int> dp(n+1, inf);\n        dp[0] = 0;\n        int ws=words.size();\n        for(int i=0; i<ws; ++i) t.take(words[i], i, costs[i]);\n        for(int i=0; i<n; ++i) {\n            if(dp[i]==inf) continue; \n            TrieNode* k = t.root;\n            for(int j=i; j<n; ++j) {\n                if(!k->mp.count(target[j])) break;\n                k = k->mp[target[j]];\n                for(auto& x : k->w) {\n                    int m = words[x.first].size();\n                    int xx = i+m;\n                    int yy = dp[i] + x.second;\n                    if(xx <= n) dp[xx]=min(dp[xx], yy);\n                }\n            }\n        }\n        if(dp[n] == inf) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720323196",
    "subm_id": "1312369697"
}