{
    "username": "Me_explorer",
    "submission": "class Solution {\n    const int MOD = 1e9 + 7;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& r) {\n        const int max_inversions = 400;\n        sort(r.begin(),r.end());\n        // for(auto x:r)cout << x[0] << \" \";\n        vector<vector<int>> dp(2, vector<int>(max_inversions + 1, 0));\n        dp[0][0] = 1;\n        int l =0;\n        if(r[0][0]==0){ \n            if(r[0][1]>0)return 0;\n            else l++;\n        }\n        for (int i = 1; i < n; ++i) {\n            int current = i & 1 ;\n            int previous = 1 - current;\n            \n            // Reset current row in dp array\n            fill(dp[current].begin(), dp[current].end(), 0);\n\n            // Calculate prefix sums\n            vector<int> prefix_sums(max_inversions + 2, 0);\n            for (int j = 0; j <= max_inversions; ++j) {\n                prefix_sums[j + 1] = (prefix_sums[j] + dp[previous][j]) % MOD;\n            }\n\n            // Update dp array using prefix sums\n            for (int j = 0; j <= max_inversions; ++j) {\n                if (j <= i) {\n                    dp[current][j] = prefix_sums[j + 1];\n                } else {\n                    dp[current][j] = ((prefix_sums[j + 1] - prefix_sums[j - i])%MOD + MOD) % MOD;\n                }\n            }\n            if(r[l][0]==i){\n                for(int j=0; j<401; j++){\n                    if(j!=r[l][1])dp[current][j] =0;\n                }\n                l++;\n            }\n        }\n    \n//         // Ensure all required inversion counts are available\n//         vector<int> cnt_req(max_inversions + 1, 0);\n//         for (const auto& req : r) {\n//             int endi = req[0];\n//             int cnti = req[1];\n//             if (cnti > max_inversions) {\n//                 return 0;\n//             }\n//             cnt_req[cnti]++;\n//         }\n\n\n//         for (int i = 0; i <= max_inversions; ++i) {\n//             if (cnt_req[i] > 0 && dp[(n - 1) & 1][i] == 0) {\n//                 return 0;\n//             }\n//         }\n    \n        return dp[(n - 1) & 1][r.back()[1]];\n    }\n};",
    "submit_ts": "1719071478",
    "subm_id": "1296847641"
}