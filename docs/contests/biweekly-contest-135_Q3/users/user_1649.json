{
    "username": "kvt_one",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> differences;\n        vector<int> values;\n        \n        int n = nums.size();\n        for (int i = 0; i < n / 2; ++i) {\n            int left = nums[i];\n            int right = nums[n - i - 1];\n            int diff = abs(left - right);\n            int maxValue = max({left, right, k - left, k - right});\n            \n            differences[diff].push_back(maxValue);\n            values.push_back(maxValue);\n        }\n        \n        int minChanges = n;\n        sort(values.begin(), values.end());\n        \n        for (const auto& entry : differences) {\n            int diff = entry.first;\n            int position = lower_bound(values.begin(), values.end(), diff) - values.begin();\n            position = position * 2 + (n / 2 - position);\n            \n            for (const auto& maxValue : entry.second) {\n                if (maxValue < diff) {\n                    position -= 2;\n                } else {\n                    position -= 1;\n                }\n            }\n            minChanges = min(minChanges, position);\n        }\n        return minChanges;\n    }\n};",
    "submit_ts": "1721489999",
    "subm_id": "1327470074"
}