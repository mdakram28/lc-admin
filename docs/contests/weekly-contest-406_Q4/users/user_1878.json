{
    "username": "jeevanleo",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        int h = 0, v = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0; // Use long long to avoid overflow\n\n        // While there are cuts to process\n        while (h < horizontalCut.size() || v < verticalCut.size()) {\n            if (v == verticalCut.size() || (h < horizontalCut.size() && horizontalCut[h] >= verticalCut[v])) {\n                // Make a horizontal cut\n                totalCost += (long long)horizontalCut[h] * verticalPieces;\n                h++;\n                horizontalPieces++;\n            } else {\n                // Make a vertical cut\n                totalCost += (long long)verticalCut[v] * horizontalPieces;\n                v++;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925909",
    "subm_id": "1320270072"
}