{
    "username": "twitch_tv_qiqi_impact",
    "submission": "root = {}\nKEY = '-'\n        \ndef ins(node, w, cost):\n    cur = root\n    for i in range(len(w)):\n        c = w[i]\n        if c not in cur:\n            cur[c] = {}\n        cur = cur[c]\n        if i == len(w)-1:\n            cur[KEY] = min(cur.get(KEY, inf), cost)\n            \n# def fin(node, w):\n#     cur = root\n#     for i in range(len(w)):\n#         c = w[i]\n#         if c not in cur:\n#             # not found\n#             return 0\n#         cur = cur[c]\n#     return cur.get(KEY, 0)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = {}\n        KEY = '-'\n\n        def ins(node, w, cost):\n            cur = root\n            for i in range(len(w)):\n                c = w[i]\n                if c not in cur:\n                    cur[c] = {}\n                cur = cur[c]\n                if i == len(w)-1:\n                    cur[KEY] = min(cur.get(KEY, inf), cost)\n        for i in range(len(words)):\n            ins(root, words[i], costs[i])\n        # print(root)\n        \n        @cache\n        def dp(idx):\n            # print(idx)\n            if idx == len(target):\n                return 0\n            cur = root\n            ret = inf\n            # s = ''\n            for i in range(idx, len(target)):\n                # s += target[i]\n                if target[i] not in cur:\n                    # print(i, cur, target[i], idx)\n                    break\n                cur = cur[target[i]]\n                if '-' in cur:\n                    ret = min(ret, dp(i+1) + cur['-'])\n            return ret\n        q = dp(0)\n        return q if q != inf else -1     \n                    \n        \n        ",
    "submit_ts": "1720320516",
    "subm_id": "1312296605"
}