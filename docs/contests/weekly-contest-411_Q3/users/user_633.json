{
    "username": "Kowonsept",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    char zeus[100001][7];\n    char hera[100001][7];\n    int poseidon[100001][7];\n    int athena[100001][7];\n\n    string largestPalindrome(int length, int divisor) {\n        if (divisor == 1 || divisor == 3 || divisor == 9) {\n            return string(length, '9');\n        }\n\n        if (divisor == 2) {\n            if (length == 1) {\n                return \"8\";\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            return result;\n        }\n\n        if (divisor == 5) {\n            if (length == 1) {\n                return \"5\";\n            }\n            string result(length, '9');\n            result[0] = '5';\n            result[length - 1] = '5';\n            return result;\n        }\n\n        if (divisor == 4) {\n            if (length <= 3) {\n                return string(length, '8');\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            result[1] = '8';\n            result[length - 2] = '8';\n            return result;\n        }\n\n        if (divisor == 8) {\n            if (length <= 5) {\n                return string(length, '8');\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            result[1] = '8';\n            result[length - 2] = '8';\n            result[2] = '8';\n            result[length - 3] = '8';\n            return result;\n        }\n\n        if (divisor == 6) {\n            if (length == 1) {\n                return \"6\";\n            }\n            if (length == 2) {\n                return \"66\";\n            }\n            if (length == 3) {\n                return \"888\";\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            if (length % 2 == 1) {\n                result[length / 2] = '8';\n            } else {\n                result[length / 2] = '7';\n                result[(length / 2) - 1] = '7';\n            }\n            return result;\n        }\n\n        if (divisor == 7) {\n            if (length == 1) {\n                return \"7\";\n            }\n\n            fill(&zeus[0][0], &zeus[0][0] + sizeof(zeus), 0);\n            fill(&hera[0][0], &hera[0][0] + sizeof(hera), 0);\n\n            for (int i = 1; i < 10; ++i) {\n                zeus[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    hera[1][i % 7] = '0' + i;\n                }\n            }\n\n            int baseMod = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && zeus[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int newMod = (baseMod * digit + digit + j * 10) % 7;\n                        if (zeus[i + 2][newMod] == 0 || zeus[i + 2][newMod] < '0' + digit) {\n                            zeus[i + 2][newMod] = '0' + digit;\n                            poseidon[i + 2][newMod] = j;\n                        }\n                        if (digit == 0) continue;\n                        if (hera[i + 2][newMod] == 0 || hera[i + 2][newMod] < '0' + digit) {\n                            hera[i + 2][newMod] = '0' + digit;\n                            athena[i + 2][newMod] = j;\n                        }\n                    }\n                }\n                baseMod = (baseMod * 10) % 7;\n            }\n\n            int remainingLength = length;\n            string front(1, hera[remainingLength][0]);\n            string back(1, hera[remainingLength][0]);\n            int mod = athena[remainingLength][0];\n            remainingLength -= 2;\n            while (remainingLength) {\n                front += zeus[remainingLength][mod];\n                if (remainingLength > 1) back += zeus[remainingLength][mod];\n                else break;\n                mod = poseidon[remainingLength][mod];\n                remainingLength -= 2;\n            }\n\n            reverse(back.begin(), back.end());\n            return front + back;\n        }\n\n        return \"\";\n    }\n};",
    "submit_ts": "1723953560",
    "subm_id": "1359824661"
}