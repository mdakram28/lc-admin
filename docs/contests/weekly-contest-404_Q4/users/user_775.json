{
    "username": "SoumaSingh",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& treeEdges1, vector<vector<int>>& treeEdges2) {\n        int treeSize1 = treeEdges1.size() + 1;\n        int treeSize2 = treeEdges2.size() + 1;\n\n        vector<vector<int>> adjList1(treeSize1);\n        vector<vector<int>> adjList2(treeSize2);\n\n        int idx = 0;\n        while (idx < treeEdges1.size()) {\n            adjList1[treeEdges1[idx][0]].push_back(treeEdges1[idx][1]);\n            adjList1[treeEdges1[idx][1]].push_back(treeEdges1[idx][0]);\n            idx++;\n        }\n\n        idx = 0;\n        while (idx < treeEdges2.size()) {\n            adjList2[treeEdges2[idx][0]].push_back(treeEdges2[idx][1]);\n            adjList2[treeEdges2[idx][1]].push_back(treeEdges2[idx][0]);\n            idx++;\n        }\n\n        auto dfs = [](const vector<vector<int>>& adjList, int startNode, int& farthestNode) {\n            int totalNodes = adjList.size();\n            vector<int> distances(totalNodes, -1);\n            function<void(int, int)> dfsVisit = [&](int currentNode, int currentDistance) {\n                distances[currentNode] = currentDistance;\n                if (currentDistance > distances[farthestNode]) {\n                    farthestNode = currentNode;\n                }\n                for (int neighbor : adjList[currentNode]) {\n                    if (distances[neighbor] == -1) {\n                        dfsVisit(neighbor, currentDistance + 1);\n                    }\n                }\n            };\n            farthestNode = startNode;\n            dfsVisit(startNode, 0);\n            return distances[farthestNode];\n        };\n\n        int farthestNode1 = 0;\n        dfs(adjList1, 0, farthestNode1);\n        int diameter1 = dfs(adjList1, farthestNode1, farthestNode1);\n\n        int farthestNode2 = 0;\n        dfs(adjList2, 0, farthestNode2);\n        int diameter2 = dfs(adjList2, farthestNode2, farthestNode2);\n\n        int minDiameter = max(diameter1, diameter2);\n        int halfDiameter1 = (diameter1 + 1) / 2;\n        int halfDiameter2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, halfDiameter1 + halfDiameter2 + 1);\n\n        return minDiameter;\n    }\n};\n",
    "submit_ts": 1719719650.0
}