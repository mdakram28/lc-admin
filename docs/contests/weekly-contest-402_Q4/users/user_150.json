{
    "username": "yi-zhi-bao-zi-h",
    "submission": "class Fenwick:\n    def __init__(self, initializer: List[int] | int):\n        self.n = 0\n        if isinstance(initializer, int):\n            self.n = initializer\n        else:\n            self.n = len(initializer)\n        self.nums = [0] * self.n\n        self.tree = [0] * (self.n + 1)\n        if isinstance(initializer, list):\n            for i, x in enumerate(initializer):\n                self.update(i, x)\n\n    def update(self, index: int, val: int) -> None:\n        self.nums[index] += val\n        i = index + 1\n        while i < len(self.tree):\n            self.tree[i] += val\n            i += i & -i\n\n    def prefix_query(self, index: int) -> int:\n        i = index + 1\n        s = 0\n        while i:\n            s += self.tree[i]\n            i &= i - 1\n        return s\n\n    def range_query(self, left: int, right: int) -> int:\n        return self.prefix_query(right) - self.prefix_query(left - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        ft = Fenwick(n)\n        ans = list()\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                ft.update(i, 1)\n        for q in queries:\n            if q[0] == 1:\n                if q[2] - q[1] >= 2:\n                    ans.append(ft.prefix_query(q[2] - 1) - ft.prefix_query(q[1]))\n                else:\n                    ans.append(0)\n            else:\n                index, val = q[1], q[2]\n                if ft.range_query(index, index) == 1:\n                    ft.update(index, -1)\n                if index > 0 and ft.range_query(index - 1, index - 1) == 1:\n                    ft.update(index - 1, -1)\n                if index < n -1 and ft.range_query(index + 1, index + 1) == 1:\n                    ft.update(index + 1, -1)\n                nums[index] = val\n                if 0 < index < n - 1 and nums[index] > nums[index - 1] and nums[index] > nums[index + 1]:\n                    ft.update(index, 1)\n                if 0 < index - 1 < n - 1 and nums[index - 1] > nums[index - 2] and nums[index - 1] > nums[index]:\n                    ft.update(index - 1, 1)\n                if 0 < index + 1 < n - 1 and nums[index + 1] > nums[index] and nums[index + 1] > nums[index + 2]:\n                    ft.update(index + 1, 1)\n        return ans\n                ",
    "submit_ts": 1718505964.0
}