{
    "username": "SamChen856",
    "submission": "class SegmentTree {\nprivate:\n    int _default;\n    function<int(int, int)> _func;\n    int _len;\n    int _size;\n    vector<int> data;\n\npublic:\n    SegmentTree(const vector<int>& arr, int default_val = 0, function<int(int, int)> func = [](int a, int b) { return max(a, b); })\n        : _default(default_val), _func(func) {\n        _len = arr.size();\n        _size = 1 << (int)ceil(log2(_len));\n        data.resize(2 * _size, _default);\n        copy(arr.begin(), arr.end(), data.begin() + _size);\n        for (int i = _size - 1; i > 0; --i) {\n            data[i] = _func(data[2 * i], data[2 * i + 1]);\n        }\n    }\n\n    int query(int start, int stop) {\n        start += _size;\n        stop += _size;\n\n        int res_left = _default, res_right = _default;\n        while (start < stop) {\n            if (start & 1) {\n                res_left = _func(res_left, data[start]);\n                start++;\n            }\n            if (stop & 1) {\n                stop--;\n                res_right = _func(data[stop], res_right);\n            }\n            start >>= 1;\n            stop >>= 1;\n        }\n\n        return _func(res_left, res_right);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& A, int k) {\n        int n = A.size();\n        SegmentTree st(A, -1, [](int a, int b) { return a & b; });\n        int res = INT_MAX;\n\n        for (int i = 0; i < n; ++i) {\n            int l = i, r = n - 1;\n            while (l < r) {\n                int mid = (l + r) / 2;\n                if (st.query(i, mid + 1) >= k) {\n                    l = mid + 1;\n                } else {\n                    r = mid;\n                }\n            }\n            res = min(res, abs(st.query(i, l + 1) - k));\n            if (l > i) {\n                res = min(res, abs(st.query(i, l) - k));\n            }\n        }\n\n        return res;\n    }\n};\n",
    "submit_ts": 1717298498.0
}