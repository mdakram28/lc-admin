{
    "username": "kasinathansj",
    "submission": "class Solution {\n    int mod = (int)1e9+7;\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        segmentM st = new segmentM(nums.length);\n        int sum = 0;\n        for(int i = 0 ; i < nums.length ; i++){\n            st.set(i,nums[i]);\n            // break;\n        }\n        for(int i = 0 ; i < queries.length ; i++){\n            st.set(queries[i][0],queries[i][1]);\n            sum += (int)(Arrays.stream(st.val(0,nums.length)).max().getAsLong()%mod);\n            System.out.println(Arrays.toString(st.val(0,nums.length)));\n            sum%=mod;\n        }\n        return sum;\n    }\n}\n\nclass segmentM{\n    long seg[][];\n    int n;\n    int lo;\n    int hi ;\n    segmentM(int n){\n        this.n=n;\n        this.seg=new long[4*n][4];\n        this.lo = 0;\n        this.hi = n;\n        // construct(0,0,n-1);\n    }\n    \n    public void set(int ind, int ele){\n        add(0,lo,hi,ind,ele);\n    }\n    \n    public long[] val(int l , int r ){\n        return val(0,lo,hi,l,r);\n    }\n    \n    // private void construct(int ind , int lo , int hi){\n    //     if(lo==hi){\n    //         seg[ind]=0;\n    //         return ;\n    //     }\n    //     int mid = (lo+hi)/2;\n    //     construct(2*ind+1,lo,mid);\n    //     construct(2*ind+2,mid+1,hi);\n    //     seg[ind]=Math.max(seg[2*ind+1],seg[2*ind+2]);\n    // }\n\n\n    public void add(int ind , int lo , int hi , int in , int val){\n        int mid = (lo+hi)/2;\n        if(lo==hi){\n            seg[ind][0] = 0;\n            seg[ind][1] = 0;\n            seg[ind][2] = 0;\n            seg[ind][3] = val;\n            return;\n        }\n        if(in>=lo&&in<=mid)\n        add(2*ind+1,lo,mid,in,val);\n        else\n        add(2*ind+2,mid+1,hi,in,val);\n        long left[] = seg[2*ind+1];\n        long right[] = seg[2*ind+2];\n        for(int i = 0 ; i < 4 ; i++){\n            seg[ind][i] = -(int)1e16;\n            int f = i&1;\n            int s = i&2;\n            for(int j = 0 ; j < 4 ; j++){\n                int f1 = j&1;\n                int s1 = j&2;\n                if(f==0&&f1==1)continue;\n                for(int k = 0 ; k < 4 ; k++){\n                    int f2 = k&1;\n                    int s2 = k&2;\n                    if(s==0&&s2==2)continue;\n                    if(s1==2&&f2==1)continue;\n                    seg[ind][i] = Math.max(seg[ind][i] , left[j]+right[k]);\n                }\n            }\n        }\n    }\n\n\n    public long[] val(int ind , int lo , int hi , int l , int r){\n        int mid = (lo+hi)/2;\n        if(lo>=l&&hi<=r)return seg[ind];\n        else if(lo>r||hi<l)\n        return new long[]{0,0,0,0};\n        long left[] = val(2*ind+1,lo,mid,l,r);\n        long right[] = val(2*ind+2,mid+1,hi,l,r);\n        long value[] = new long[]{0,0,0,0};\n        for(int i = 0 ; i < 4 ; i++){\n            value[i] = -(int)1e9;\n            int f = i&1;\n            int s = i&2;\n            for(int j = 0 ; j < 4 ; j++){\n                int f1 = j&1;\n                int s1 = j&2;\n                if(f==0&&f1==1)continue;\n                for(int k = 0 ; k < 4 ; k++){\n                    int f2 = k&1;\n                    int s2 = k&2;\n                    if(s==0&&s2==2)continue;\n                    if(s1==2&&f2==1)continue;\n                    seg[ind][i] = Math.max(seg[ind][i] , left[j]+right[k]);\n                }\n            }\n        }\n        return value;\n    }\n}\n\n// [3,5,9]\n// [[1,-2],[0,-3]]\n// [0,-1]\n// [[0,-5]]\n// [0,3,3,3,1,-2]\n// [[4,0],[1,0]]",
    "submit_ts": 1716694660.0
}