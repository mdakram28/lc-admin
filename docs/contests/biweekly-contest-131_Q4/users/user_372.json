{
    "username": "Qlyer",
    "submission": "class SegmentTree:\n    def __init__(self, data, default = 0, func = max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\n\nimport sortedcontainers\n\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        mx = max(q[1] for q in queries) + 10\n        s = SegmentTree([0] * (mx + 1))\n        s[mx - 1] = mx\n        ans = []\n        arr = sortedcontainers.SortedList([0, mx])\n        for i, q in enumerate(queries):\n            t = q[0]\n            if t == 1:\n                x = q[1]\n                r = arr.bisect_left(x + 1)\n                l = arr.bisect_left(x) - 1\n                s[arr[r]] = arr[r] - x\n                s[x] = x - arr[l]\n                arr.add(x)\n            else:\n                x = q[1]\n                sz = q[2]\n                if s.query(0, x + 1) >= sz:\n                    ans.append(True)\n                    continue\n                if x - (arr[arr.bisect_left(x) - 1]) >= sz:\n                    ans.append(True)\n                    continue\n                ans.append(False)\n        return ans",
    "submit_ts": "1716650661",
    "subm_id": "534771912"
}