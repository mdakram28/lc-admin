{
    "username": "user8114002",
    "submission": "#define ll long long\n#define all(x) x.begin(),x.end()\n#define rep(i,a,b) for(int i=a;i<=b;i++)\n#define rep_r(i,a,b) for(int i=a;i>=b;i--)\n#define each(a,x) for (auto& x : a)\nusing pi = pair<int,int>;\nusing pl = pair<ll,ll>;\nusing vi = vector<int>;\nusing vl = vector<ll>;\n#define sz(x) int(x.size())\n#define so(x) sort(all(x))\n#define so_r(x) sort(all(x),greater<int>())\n#define lb lower_bound\n#define ub upper_bound\nconst char nl = '\\n';\nint dx[4] = {1,-1,0,0};\nint dy[4] = {0,0,1,-1};\nint bit_cnt(int x){\n    return __builtin_popcount(x);\n}\nll bex(ll a, ll b, ll mod = 1e9 + 7){ll res = 1LL; while(b){ if (b&1) res = res * a % mod; a = a * a % mod; b >>= 1;} return res;}\ntemplate<class t,class u> bool chmax(t&a,u b){if(a<b){a=b;return true;}else return false;}\ntemplate<class t,class u> bool chmin(t&a,u b){if(b<a){a=b;return true;}else return false;}\nvi g[100005];\n \nint depth[100005];\nvoid dfs(int u, int fa) {\n    depth[u] = depth[fa] + 1;\n    each(g[u],v) {\n        if (v == fa) continue;\n        dfs(v,u);\n    }\n}\n\nint find_diameter(int n){\n    depth[0] = -1;\n    dfs(0,0);\n    int max_depth = 0, j = 0;\n    rep(u,0,n-1){\n        if (max_depth<depth[u]){\n            max_depth=depth[u]; \n            j = u;\n        }\n    }\n    max_depth = 0;\n    depth[j] = -1;\n    dfs(j,j);\n    rep(u,0,n-1) chmax(max_depth,depth[u]);\n    return max_depth;\n}\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        for (int i = 0; i <= edges1.size() + 1; i++) g[i].clear(); \n        for (auto edge : edges1) {\n            int a = edge[0], b = edge[1];\n            g[a].push_back(b); \n            g[b].push_back(a);\n        }\n        \n        int dia1 = find_diameter(edges1.size() + 1);\n        \n        for (int i = 0; i <= edges2.size() + 1; i++) g[i].clear(); \n        for (auto edge : edges2) {\n            int a = edge[0], b = edge[1];\n            g[a].push_back(b); \n            g[b].push_back(a);\n        }\n        \n        int dia2 = find_diameter(edges2.size() + 1);\n        \n        int ans = 1 + (dia1 + 1) / 2 + (dia2 + 1) / 2;\n        chmax(ans, max(dia1,dia2));\n        return ans;\n    }\n};",
    "submit_ts": "1719719484",
    "subm_id": "1304443059"
}