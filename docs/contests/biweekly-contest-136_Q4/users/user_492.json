{
    "username": "yi-nian-ue",
    "submission": "class Solution {\n    private List<List<Integer>> graph;\n    private int[] times;\n    private int[][] dp;\n    private int n;\n\n    public int[] timeTaken(int[][] edges) {\n        n = edges.length + 1;\n        times = new int[n];\n        graph = new ArrayList<>(n);\n        dp = new int[n][2]; // dp[i][0]: \u4ecei\u5411\u4e0b\u7684\u6700\u5927\u65f6\u95f4, dp[i][1]: \u4ecei\u5411\u4e0a\u7684\u6700\u5927\u65f6\u95f4\n\n        for (int i = 0; i < n; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        // \u6784\u5efa\u65e0\u5411\u56fe\n        for (int[] edge : edges) {\n            int u = edge[0], v = edge[1];\n            graph.get(u).add(v);\n            graph.get(v).add(u);\n        }\n\n        dfs1(0, -1); // \u7b2c\u4e00\u6b21 DFS\uff0c\u8ba1\u7b97\u5411\u4e0b\u7684\u6700\u5927\u65f6\u95f4\n        dfs2(0, -1, 0); // \u7b2c\u4e8c\u6b21 DFS\uff0c\u8ba1\u7b97\u5411\u4e0a\u7684\u6700\u5927\u65f6\u95f4\u5e76\u586b\u5145\u7ed3\u679c\n\n        return times;\n    }\n\n    private void dfs1(int node, int parent) {\n        for (int child : graph.get(node)) {\n            if (child != parent) {\n                dfs1(child, node);\n                dp[node][0] = Math.max(dp[node][0], dp[child][0] + (child % 2 == 0 ? 2 : 1));\n            }\n        }\n    }\n\n    private void dfs2(int node, int parent, int parentMax) {\n        int max1 = 0, max2 = 0;\n        for (int child : graph.get(node)) {\n            if (child != parent) {\n                int childTime = dp[child][0] + (child % 2 == 0 ? 2 : 1);\n                if (childTime > max1) {\n                    max2 = max1;\n                    max1 = childTime;\n                } else if (childTime > max2) {\n                    max2 = childTime;\n                }\n            }\n        }\n\n        times[node] = Math.max(max1, parentMax);\n\n        for (int child : graph.get(node)) {\n            if (child != parent) {\n                int childMax = dp[child][0] + (child % 2 == 0 ? 2 : 1);\n                int newParentMax = Math.max(parentMax, childMax == max1 ? max2 : max1);\n                dfs2(child, node, newParentMax + (node % 2 == 0 ? 2 : 1));\n            }\n        }\n    }\n}",
    "submit_ts": "1722700538",
    "subm_id": "552280240"
}