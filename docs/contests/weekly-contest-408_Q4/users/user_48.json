{
    "username": "CAEL0",
    "submission": "#include <bits/stdc++.h>\n#define sz size()\n#define bk back()\n#define fi first\n#define se second\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nstruct DisjointSet {\n    int n;\n    vector<int> dsu;\n\n    DisjointSet(int _n) {\n        n = _n;\n        dsu.resize(n + 1);\n    }\n\n    void init() {\n        for (int i = 1; i <= n; i++)\n            dsu[i] = i;\n    }\n\n    int find(int z) {\n        if (z != dsu[z])\n            dsu[z] = find(dsu[z]);\n        return dsu[z];\n    }\n\n    void merge(int x, int y) { dsu[find(y)] = find(x); }\n\n    bool is_same(int x, int y) { return find(x) == find(y); }\n};\n\nclass Solution {\n  public:\n    bool canReachCorner(int x, int y, vector<vector<int>> &v) {\n        int n = v.sz;\n        DisjointSet ds(n + 4);\n        ds.init();\n\n        for (int i = 0; i < v.sz; i++) {\n            ll a = v[i][0];\n            ll b = v[i][1];\n            ll r = v[i][2];\n\n            if (a * a + b * b <= r * r || (a - x) * (a - x) + (b - y) * (b - y) <= r * r)\n                return false;\n\n            if (a - r <= 0 && a + r > 0)\n                ds.merge(i + 1, n + 1);\n\n            if (a - r < x && a + r >= x)\n                ds.merge(i + 1, n + 2);\n\n            if (b - r <= 0 && b + r > 0)\n                ds.merge(i + 1, n + 3);\n\n            if (b - r < y && b + r >= y)\n                ds.merge(i + 1, n + 4);\n\n            for (int j = 0; j < i; j++) {\n                ll c = v[j][0];\n                ll d = v[j][1];\n                ll s = v[j][2];\n\n                if ((a - c) * (a - c) + (b - d) * (b - d) <= (r + s) * (r + s))\n                    ds.merge(i + 1, j + 1);\n            }\n        }\n\n        return !ds.is_same(n + 1, n + 2) && !ds.is_same(n + 3, n + 4) && !ds.is_same(n + 1, n + 3) && !ds.is_same(n + 2, n + 4);\n    }\n};",
    "submit_ts": "1722136910",
    "subm_id": "1335748569"
}