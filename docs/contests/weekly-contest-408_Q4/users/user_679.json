{
    "username": "szp14",
    "submission": "const int maxn = 1e3 + 5;\nint p[maxn], v[maxn];\n\nclass Solution {\npublic:\n    int getP(int x) {return p[x] == x ? x : (p[x] = getP(p[x]));}\nvoid lnk(int x, int y)\n{\n    int px = getP(x), py = getP(y);\n    v[px] |= v[py];\n    p[py] = px;\n}\n\ntypedef long long LL;\nbool isInter(vector<int>& o1, vector<int>& o2)\n{\n    LL d1 = o1[0] - o2[0], d2 = o1[1] - o2[1], r = o1[2] + o2[2];\n    return d1 * d1 + d2 * d2 <= r * r;\n}\nint isNotInsideBox(vector<int>& o, int& X, int& Y)\n{\n    if(o[0] - o[2] >= X || o[1] - o[2] >= Y) return true;\n    LL d1 = o[0] - X, d2 = o[1] - Y, r = o[2];\n    return d1 > 0 && d2 > 0 && r * r < d1 * d1 + d2 * d2;\n}\nint get4bitTouch(vector<int>& o, int& X, int& Y)\n{\n    int v = 0;\n    if(isNotInsideBox(o, X, Y)) return v;\n    //left\n    if(o[0] <= o[2])\n    {\n        v |= 1;\n    }\n    //right\n    if(abs(o[0] - X) <= o[2])\n    {\n        v |= 2;\n    }\n    //down\n    if(o[1] <= o[2])\n    {\n        v |= 4;\n    }\n    //up\n    if(abs(o[1] - Y) <= o[2])\n    {\n        v |= 8;\n    }\n    return v;\n}\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = (int)circles.size();\n    for(int i = 0; i < n; i++)\n    {\n        p[i] = i;\n        v[i] = get4bitTouch(circles[i], X, Y);\n    }\n    for(int i = 0; i < n; i++) if(!isNotInsideBox(circles[i], X, Y))\n        for(int j = i + 1; j < n; j++) if(!isNotInsideBox(circles[j], X, Y))\n            if(isInter(circles[i], circles[j])) lnk(i, j);\n    for(int i = 0; i < n; i++) if(getP(i) == i)\n    {\n        if((v[i] & 0b0011) == 0b0011 ||\n           (v[i] & 0b1100) == 0b1100 ||\n           (v[i] & 0b1010) == 0b1010 ||\n           (v[i] & 0b0101) == 0b0101) return false;\n    }\n    return true;\n    }\n};",
    "submit_ts": "1722138295",
    "subm_id": "1335787060"
}