{
    "username": "dakshmv14",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, vector<vector<int>>& graph,int n) {\n            vector<int>dist(n+1,-1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthest_node = start;\n            int max_distance = 0;\n\n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n\n                for (int neighbor : graph[node]) {\n                    if (dist[neighbor]== -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > max_distance) {\n                            max_distance = dist[neighbor];\n                            farthest_node = neighbor;\n                        }\n                    }\n                }\n            }\n\n            return make_pair(farthest_node, max_distance);\n        }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1,m=edges2.size()+1;\n        vector<vector<int>>t1(n),t2(m);\n        for (auto& edge : edges1) {\n            t1[edge[0]].push_back(edge[1]);\n            t1[edge[1]].push_back(edge[0]);\n        }\n        for (auto& edge : edges2) {\n            t2[edge[0]].push_back(edge[1]);\n            t2[edge[1]].push_back(edge[0]);\n        }\n        pair<int, int> fb1 = bfs(0, t1,n);\n        pair<int, int> sb1 = bfs(fb1.first, t1,n);\n        pair<int, int> fb2 = bfs(0, t2,m);\n        pair<int, int> sb2 = bfs(fb2.first, t2,m);\n        int dia1=sb1.second,dia2=sb2.second;\n        int ans=max(dia1,dia2);\n        // cout<<dia1<<\" \"<<dia2<<endl;\n        dia1=(dia1+1)/2,dia2=(dia2+1)/2;\n        ans=max(ans,dia1+dia2+1);\n        return ans;\n    }\n};",
    "submit_ts": 1719718977.0
}