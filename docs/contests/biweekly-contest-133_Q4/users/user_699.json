{
    "username": "Yash_YJ",
    "submission": "class Solution {\npublic:\n      int mod = 1e9+7;\n      int mx = 400;\n\n    int numberOfPermutations(int n, const vector<vector<int>>& requirements) {\n        map<int, int> mp;\n        for (auto& it : requirements) {\n            mp[it[0]] = it[1];\n        }\n        vector<int> temp;\n        for(int i=0;i<1000;i++){\n                temp.push_back(i+100);\n            }\n        vector<vector<long long>> count(n + 1, vector<long long>(mx + 1, 0));\n        count[0][0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            for (int j = 0; j <= mx; ++j) {\n                for (int k = 0; k < i; ++k) {\n                    int pre = j - k;\n                    if (pre >= 0) {\n                        count[i][j] = (count[i][j] + count[i - 1][pre]) % mod;\n                    }\n                }\n            }\n            if (mp.find(i-1) != mp.end()) {\n                int targetInv = mp[i-1];\n                for (int j = 0; j <= mx; ++j) {\n                    if (j != targetInv) {\n                        count[i][j] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (long long count1 : count[n]) {\n            result = (result + count1) % mod;\n        }\n\n        return (int)(result);\n    }\n};",
    "submit_ts": "1719071019",
    "subm_id": "1296837223"
}