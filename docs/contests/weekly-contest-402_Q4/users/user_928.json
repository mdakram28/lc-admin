{
    "username": "00_Sagar_Kumar",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(vector<int>& nums, vector<int>& peaks, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = peaks[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, peaks, 2 * node + 1, start, mid);\n            build(nums, peaks, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int val) {\n        if (start == end) {\n            tree[node] = val;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, val);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, val);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = query(2 * node + 1, start, mid, l, r);\n        int rightQuery = query(2 * node + 2, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums, vector<int>& peaks) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, peaks, 0, 0, n - 1);\n    }\n\n    void update(int idx, int val) {\n        update(0, 0, n - 1, idx, val);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peaks(n, 0);\n        \n        auto isPeak = [&](int i) {\n            if (i > 0 && i < n - 1) {\n                return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n            }\n            return false;\n        };\n        \n        for (int i = 1; i < n - 1; ++i) {\n            if (isPeak(i)) {\n                peaks[i] = 1;\n            }\n        }\n        \n        SegmentTree segTree(nums, peaks);\n        vector<int> result;\n        \n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                result.push_back(segTree.query(l + 1, r - 1));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int val = query[2];\n                nums[index] = val;\n                \n                if (index > 0) {\n                    segTree.update(index - 1, isPeak(index - 1) ? 1 : 0);\n                }\n                segTree.update(index, isPeak(index) ? 1 : 0);\n                if (index < n - 1) {\n                    segTree.update(index + 1, isPeak(index + 1) ? 1 : 0);\n                }\n            }\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": 1718507219.0
}