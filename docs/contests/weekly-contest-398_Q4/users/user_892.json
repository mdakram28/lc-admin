{
    "username": "1000voices",
    "submission": "class Solution {\n    data class Data(val currStair: Int, val jump: Int, val prevJump: Boolean)\n    var k = 0\n    var jsdklfsl = HashMap<Data, Int>()\n    fun waysToReachStair(k: Int): Int {\n        this.k = k\n        return recursion(1, 0, false)\n    }\n    \n    fun recursion(currStair: Int, jump: Int, prevJump: Boolean): Int {\n        var result = 0\n        if (currStair == k) result++\n        if (currStair > k + 1) return 0\n        var data = Data(currStair, jump, prevJump)\n        if (jsdklfsl.containsKey(data)) return jsdklfsl[data]!!\n        \n        if (!prevJump) {\n            result += recursion(currStair - 1, jump, true)\n        }\n        result += recursion(currStair + (1 shl jump), jump + 1, false)\n        jsdklfsl[data] = result\n        return result\n    }\n}",
    "submit_ts": "1716090117",
    "subm_id": "1261859528"
}