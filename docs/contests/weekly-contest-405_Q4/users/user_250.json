{
    "username": "Sundae2608",
    "submission": "class TrieNode:\n    def __init__(self, c):\n        self.c = c\n        self.children = {}\n        self.is_word = False\n        self.cost = None\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode(None)\n\n    def insert(self, word, cost):\n        curr = self.root\n        for char in word:\n            if char not in curr.children:\n                curr.children[char] = TrieNode(char)\n            curr = curr.children[char]\n        curr.is_word = True\n        if curr.cost is None:\n            curr.cost = cost\n        else:\n            curr.cost = min(curr.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        # Construct a trie with reverse words\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        #\n        memo = [None] * (len(target) + 1)\n        memo[0] = 0\n        \n        #\n        n = len(target)\n        for i in range(n + 1):\n            if memo[i] is None:\n                continue\n\n            curr = trie.root\n            for j in range(i, n):\n                c = target[j]\n\n                # Traverse the trie\n                if c in curr.children:\n                    curr = curr.children[c]\n                else:\n                    break\n\n                # Check if it is a word\n                if curr.is_word:\n                    if memo[j + 1] is None:\n                        memo[j + 1] = memo[i] + curr.cost\n                    else:\n                        memo[j + 1] = min(memo[j + 1], memo[i] + curr.cost)\n\n        if memo[n]:\n            return memo[n]\n        return -1",
    "submit_ts": "1720321593",
    "subm_id": "1312327069"
}