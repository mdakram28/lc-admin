{
    "username": "ywjameslin",
    "submission": "class Solution {\n\n    /**\n     * @param String $target\n     * @param String[] $words\n     * @param Integer[] $costs\n     * @return Integer\n     */\n    function minimumCost($target, $words, $costs) {\n        $root = new TrieNode('');\n        foreach ($words as $wIndex => $word) {\n            $now = $root;\n            $length = strlen($word);\n            for ($index = 0; $index < $length; ++ $index) {\n                if ($now->next[$word[$index]] === null) {\n                    $now->next[$word[$index]] = new TrieNode($word[$index]);\n                }\n                $now = $now->next[$word[$index]];\n            }\n            if ($now->cost == -1) {\n                $now->cost = $costs[$wIndex];\n            } else {\n                $now->cost = min($now->cost, $costs[$wIndex]);\n            }\n        }\n        $length = strlen($target);\n\n        $mem = [];\n        for ($index = $length - 1; $index > -1; -- $index) {\n            $now = $root;\n            $val = PHP_INT_MAX;\n            for ($subIndex = $index; $subIndex < $length; ++ $subIndex) {\n                if ($now->next[$target[$subIndex]] === null) {\n                    break;\n                }\n                $now = $now->next[$target[$subIndex]];\n                if ($now->cost != -1) {\n                    $val = min($val, $now->cost + $mem[$subIndex + 1]);\n                }\n            }\n            $mem[$index] = $val;\n        }\n\n        return $mem[0] == PHP_INT_MAX ? -1 : $mem[0];\n    }\n}\n\nclass TrieNode {\n    public $char;\n    public $next = [];\n    public $cost = -1;\n\n    public function __construct($char) {\n        $this->char = $char;\n    }\n}",
    "submit_ts": "1720322082",
    "subm_id": "1312340194"
}