{
    "username": "BeastIncarnate",
    "submission": "class Solution {\npublic:\n    int call(int n, int k,vector<vector<int>>&dp){\n        if (dp[n][k] != -1) return dp[n][k];\n        if (k == 0) return dp[n][k] = 1;\n        if (n == 0) return dp[n][k] = 0;\n        int j = 0, val = 0;\n        for (j = 0; j < n && k-j >= 0; j++)\n            val += call(n-1, k-j,dp);\n        return dp[n][k] = val;\n    }\n    int calAns(int n,vector<vector<int>>&reqs){\n        unordered_map<int, int> reqMap;\n        for (auto& req : reqs) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        int k=(n*(n-1))/2;\n        vector<vector<long long>>dp(n + 1, vector<long long>(k + 1, 0));\n        dp[0][0] = 1;\n        int mod=1e9+7;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= min(k,400); inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        dp[length][inv] = (dp[length][inv] + dp[length - 1][prevInv]) % mod;\n                    }\n                }\n            }\n\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= min(k,400); inv++) {\n                    if (inv != targetInv) {\n                        dp[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long res = 0;\n        for (long long count : dp[n]) {\n            res = (res + count) % mod;\n        }\n        return res;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n        // int k=(n*(n-1))/2;\n        // vector<vector<int>>dp(n+5,vector<int>(k+5,-1));\n        // sort(req.begin(),req.end());\n        // reverse(req.begin(),req.end());\n        return calAns(n,req);\n    }\n};",
    "submit_ts": "1719070796",
    "subm_id": "1296831969"
}