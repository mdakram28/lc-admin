{
    "username": "Justin",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        # m = len(board)\n        # n = len(board[0])\n\n        # rows = []\n        # for i in range(m):\n        #     clist = [(-val, j) for j, val in enumerate(board[i])]\n        #     heapq.heapify(clist)\n        #     rows.append(clist)\n\n        # fres = float(\"-inf\")\n        # for i in range(m):\n        #     rows_i = rows[i][:5]\n        #     for j in range(i+1,m):\n        #         rows_j = rows[j][:5]\n        #         for k in range(j+1,m):\n        #             rows_k = rows[k][:5]\n        #             cset = set()\n        #             res = 0\n        #             for i2 in rows_i:\n        #                 cset.add(i2[1])\n        #                 res -= i2[0]\n        #                 for j2 in rows_j:\n        #                     if j2[1] not in cset:\n        #                         cset.add(j2[1])\n        #                         res -= j2[0]\n        #                         for k2 in rows_k:\n        #                             if k2[1] not in cset:\n        #                                 res -= k2[0]\n        #                                 if res > fres:\n        #                                     print(i2[0], j2[0], k2[0])\n        #                                 fres = max(res, fres)\n        #                                 res += k2[0]\n        #                         res += j2[0]\n        #                         cset.remove(j2[1])\n        #                 res += i2[0]\n        #                 cset.remove(i2[1])\n\n        # return fres\n\n        m = len(board)\n        n = len(board[0])\n\n        all_vals = []\n        for i in range(m):\n            for j in range(n):\n                all_vals.append((board[i][j], i, j))\n\n        all_vals.sort(reverse=True)\n\n        fres = float(\"-inf\")\n        for i in range(min(len(all_vals), m+n+5)):\n            first_val = all_vals[i]\n            for j in range(i+1, min(len(all_vals), i+m+n+5)):\n                if all_vals[j][1] == first_val[1] or all_vals[j][2] == first_val[2]:\n                    continue\n                else:\n                    second_val = all_vals[j]\n                    cpred = False\n                    for k in range(j+1, min(len(all_vals), j+m+n+2)):\n                        if all_vals[k][1] in (first_val[1], second_val[1]) or all_vals[k][2] in (first_val[2], second_val[2]):\n                            continue\n                        else:\n                            third_val = all_vals[k]\n                            cpred = True\n                            break\n\n                    if cpred:\n                        fres = max(fres, first_val[0] + second_val[0] + third_val[0])\n\n        return fres\n",
    "submit_ts": "1723910329",
    "subm_id": "1359226097"
}