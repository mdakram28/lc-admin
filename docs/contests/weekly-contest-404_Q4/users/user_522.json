{
    "username": "khalil192",
    "submission": "\n#define lli int\n#define vi vector<lli>\n\n\nclass Solution {\npublic:\n    \n    \n    void dfs1(lli node, lli par, vi g[],vi &depth){\n            depth[node] = 0;\n            for(lli to : g[node]){\n                if(to != par){\n                    dfs1(to,node, g, depth);\n                    depth[node] = max(depth[node], 1 + depth[to]);\n                }\n            }\n    }\n \n \n    void dfs2(lli node, lli par,lli parValue, vi g[],vi &depth, vi &rootedDepth){\n\n            rootedDepth[node] = max(parValue, depth[node]);\n\n            // cout<<\"At \"<<node+1<<\" pv = \"<<parValue<<\"\\n\";\n            vi max2(3,0);\n\n            for(lli to :g[node]){\n                if(to != par){\n                    max2[2] = 1+depth[to];\n                    sort(max2.begin(),max2.end(),greater<lli>());\n                    // cout<<\"max2 \"<<node+1<<\" = \";\n                    // fo(i,3){\n                    //     cout<<max2[i]<<\" \";\n                    // }cout<<\"\\n\";\n                }\n            }\n \n    \n            for(lli to : g[node]){\n                if(to != par){\n                    // find par value to propogate\n\n                    lli notInvolvedDepth = max2[0];\n                    if(notInvolvedDepth-1 == depth[to]){\n                        notInvolvedDepth = max2[1];\n                    }\n                    // cout<<\"At \"<<to+1<<\" parvalie = \"<<notInvolvedDepth<<\" , \"<<parValue<<\"\\n\";\n                    lli toParValue = max(parValue + 1,  1+ notInvolvedDepth);\n                    dfs2(to,node, toParValue, g, depth, rootedDepth);\n                }\n            }\n        }\n    \n \n    int dfs(int node,int par,vi g[],int &ans){\n    \n        int m1 = 0, m2 = 0;\n        for(int to : g[node]){\n            if(to == par){continue;}\n            int m3 = dfs(to,node,g,ans);\n            if(m3>m1){m2 = m1;m1 = m3;}\n            else if(m3>m2){m2 = m3;}\n        }\n        ans= max(ans , 1+m1+m2);\n        return 1+ max(m1,m2);\n    }\n\n     \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int n = edges1.size() +1;\n        int m = edges2.size() + 1;\n        \n        vector<int> tree1[n];\n        vector<int> tree2[m];\n        \n        for(vector<int> &e : edges1){\n            tree1[e[0]].push_back(e[1]);\n            tree1[e[1]].push_back(e[0]);\n        }\n        \n        \n        for(vector<int> &e : edges2){\n            tree2[e[0]].push_back(e[1]);\n            tree2[e[1]].push_back(e[0]);\n        }\n        \n        int dia1 = 0;\n        int dia2 = 0;\n        dfs(0,-1, tree1, dia1);\n        dfs(0,-1, tree2, dia2);\n        dia1--;\n        dia2--;\n        \n        // cout<<\"diams = \"<<dia1<<\" \"<<dia2<<\"\\n\";\n        \n        int ans = max(dia1, dia2);\n        // cout<<n<<\" \"<<m<<\"\\n\";  \n        // cout<<dia1<<\" \"<<dia2<<\"\\n\";\n        \n        // for(int i =0;i<m;i++){\n        //     for(int x : tree2[i]){\n        //         cout<<x<<\" , \";\n        //     }cout<<\"\\n\";\n        // }\n//         if(n == 1){\n//             return dia2;\n//         }\n//         if(m == 1){\n//             return dia1;\n//         }\n        \n        \n        vi depth1(n,0);  \n        dfs1(0,-1,tree1,depth1);\n \n        vi rootedDepth1(n);\n        dfs2(0,-1,0,tree1,depth1,rootedDepth1);\n\n        \n        vi depth2(m,0);  \n        dfs1(0,-1,tree2,depth2);\n \n        vi rootedDepth2(m);\n        dfs2(0,-1,0,tree2,depth2,rootedDepth2);\n\n        int mini1 = rootedDepth1[0];\n        // cout<<\"rooted 1 = \";\n        for(int x: rootedDepth1){\n            mini1 = min(mini1, x);\n            // cout<<x<<\",\";\n        }\n        // cout<<\"\\n\";\n        \n        int merge = 1 + mini1 + rootedDepth2[0];\n        \n        // cout<<\"rooted 1 = \";\n        for(int x : rootedDepth2){\n            merge = min(merge, 1 + mini1 + x);\n            // cout<<x<<\" , \";\n        }\n        // cout<<\"\\n\";\n        \n        ans = max(ans, merge);\n        \n        return ans;\n    }\n};",
    "submit_ts": "1719719274",
    "subm_id": "1304437948"
}