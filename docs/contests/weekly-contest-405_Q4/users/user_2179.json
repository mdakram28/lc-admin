{
    "username": "SauravRaj_95",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); // Initialize dp array with large values\n        dp[0] = 0; // Base case: cost to match an empty prefix is 0\n        \n        unordered_map<string, int> wordCostMap;\n        for (int i = 0; i < words.size(); ++i) {\n            if (wordCostMap.find(words[i]) == wordCostMap.end() || wordCostMap[words[i]] > costs[i]) {\n                wordCostMap[words[i]] = costs[i];\n            }\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip if the current prefix cannot be formed\n            \n            // Try to match each word starting from position i\n            for (auto& [word, cost] : wordCostMap) {\n                int len = word.size();\n                if (i + len <= n && target.compare(i, len, word) == 0) {\n                    dp[i + len] = min(dp[i + len], dp[i] + cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322273",
    "subm_id": "1312345400"
}