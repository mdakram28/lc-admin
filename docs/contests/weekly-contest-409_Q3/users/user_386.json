{
    "username": "wddd",
    "submission": "class Solution {\n    class BIT {\n        private int[] tree;\n\n        public BIT(int size) {\n            tree = new int[size + 1];\n        }\n\n        public void update(int ind, int value) {\n            while (ind > 0) {\n                tree[ind] += value;\n                // Extracting the portion up to the first significant one of the binary representation of 'ind'\n                // and incrementing ind by that number\n                ind -= lsb(ind);\n            }\n        }\n\n        public int rsq(int ind) {\n            int sum = 0;\n            while (ind < tree.length) {\n                sum += tree[ind];\n                // Extracting the portion up to the first significant one of the binary representation of 'ind'\n                // and decrementing ind by that number\n                ind += lsb(ind);\n            }\n\n            return sum;\n        }\n\n        /*\n        Range Sum Query from a to b.\n        Search for the sum from array index from a to b\n        a and b are 1-indexed\n         */\n        public int rsq(int a, int b) {\n            assert b >= a && a > 0 && b > 0;\n\n            return rsq(b) - rsq(a - 1);\n        }\n\n        private int lsb(int n) {\n            return n & (-n);\n        }\n    }\n\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        BIT bit = new BIT(n + 1);\n\n        int[] dp = new int[n];\n        for (int i = n - 1; i >= 0; i--) {\n            dp[i] = n - 1 - i;\n        }\n\n        TreeMap<Integer, Integer> qs = new TreeMap<>();\n\n        int[] result = new int[queries.length];\n\n        for (int i = 0; i < queries.length; i++) {\n            Integer prev = qs.floorKey(queries[i][0]);\n            if (prev != null && qs.get(prev) >= queries[i][1]) {\n                result[i] = result[i - 1];\n                continue;\n            }\n            qs.put(queries[i][0], queries[i][1]);\n            int dist1 = n - 1 - queries[i][0] - bit.rsq(queries[i][0] + 1);\n            int dist2 = n - 1 - queries[i][1] - bit.rsq(queries[i][1] + 1);\n            if (dist1 > dist2 + 1) {\n                bit.update(queries[i][0] + 1, dist1 - dist2 - 1);\n            }\n            result[i] = n - 1 - bit.rsq(1);\n        }\n\n        return result;\n    }\n}",
    "submit_ts": "1722740928",
    "subm_id": "1343732281"
}