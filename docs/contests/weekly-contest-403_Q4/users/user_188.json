{
    "username": "milesian-c",
    "submission": "int f[32][32][32][32][3];\nint region[32][32][32][32][4];\n\nclass Solution {\npublic:\n    void update(int &x,int y){\n        if(x > y) x = y;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        for(int i=0;i<n;++i)for(int j=0;j<m;++j){\n            if(grid[i][j] == 1){\n                region[i][j][i][j][0] = region[i][j][i][j][2] = i;\n                region[i][j][i][j][1] = region[i][j][i][j][3] = j;\n                f[i][j][i][j][0] = 1;\n            }else{\n                region[i][j][i][j][0] = n;\n                region[i][j][i][j][1] = m;\n                region[i][j][i][j][2] = 0;\n                region[i][j][i][j][3] = 0;       \n                f[i][j][i][j][0] = 0;\n            }\n        }\n        \n        for(int i=0;i<n;++i)for(int j=0;j<m;++j){\n            for(int lx=0;lx+i<n;++lx)for(int ly=0;ly+j<m;++ly){\n                int rx = lx + i;\n                int ry = ly + j;\n                \n                if(lx == rx){\n                    if(ly == ry) continue;\n                    region[lx][ly][rx][ry][0] = min(region[lx][ly][rx][ry-1][0], region[lx][ly+1][rx][ry][0]);\n                    region[lx][ly][rx][ry][1] = min(region[lx][ly][rx][ry-1][1], region[lx][ly+1][rx][ry][1]);\n                    region[lx][ly][rx][ry][2] = max(region[lx][ly][rx][ry-1][2], region[lx][ly+1][rx][ry][2]);\n                    region[lx][ly][rx][ry][3] = max(region[lx][ly][rx][ry-1][3], region[lx][ly+1][rx][ry][3]);\n                }else{\n                    region[lx][ly][rx][ry][0] = min(region[lx][ly][rx-1][ry][0], region[lx+1][ly][rx][ry][0]);\n                    region[lx][ly][rx][ry][1] = min(region[lx][ly][rx-1][ry][1], region[lx+1][ly][rx][ry][1]);\n                    region[lx][ly][rx][ry][2] = max(region[lx][ly][rx-1][ry][2], region[lx+1][ly][rx][ry][2]);\n                    region[lx][ly][rx][ry][3] = max(region[lx][ly][rx-1][ry][3], region[lx+1][ly][rx][ry][3]);                   \n                }\n                \n                \n                int LX = region[lx][ly][rx][ry][0];\n                int LY = region[lx][ly][rx][ry][1];\n                int RX = region[lx][ly][rx][ry][2];\n                int RY = region[lx][ly][rx][ry][3];\n                \n                if(RX >= LX && RY >= LY) {\n                    f[lx][ly][lx+i][ly+j][0] = (RX - LX + 1) * (RY - LY + 1);\n                //    printf(\"%d %d %d %d %d\\n\",lx,ly,rx,ry, f[lx][ly][rx][ry][0]);\n                }\n                else f[lx][ly][lx+i][ly+j][0] = 0;\n            }\n        }\n        \n        int ans = n*m;\n        for(int i=1;i<n;++i) for(int j=i+1;j<n;++j){\n            update(ans, f[0][0][i-1][m-1][0] + f[i][0][j-1][m-1][0] + f[j][0][n-1][m-1][0]);\n        }\n        for(int i=1;i<m;++i) for(int j=i+1;j<m;++j){\n            update(ans, f[0][0][n-1][i-1][0] + f[0][i][n-1][j-1][0] + f[0][j][n-1][m-1][0]);\n        }\n        for(int i=1;i<n;++i) for(int j=1;j<m;++j){\n            //[0, i-1] + [0,j-1] + [j][m-1]\n            \n            update(ans, f[0][0][i-1][m-1][0] + f[i][0][n-1][j-1][0] + f[i][j][n-1][m-1][0]);\n            update(ans, f[0][0][i-1][j-1][0] + f[0][j][i-1][m-1][0] + f[i][0][n-1][m-1][0]);\n            \n            \n            update(ans, f[0][0][n-1][j-1][0] + f[0][j][i-1][m-1][0] + f[i][j][n-1][m-1][0]);\n            update(ans, f[0][0][i-1][j-1][0] + f[i][0][n-1][j-1][0] + f[0][j][n-1][m-1][0]);\n        }        \n       // printf(\"test: %d %d %d\\n\", f[0][0][3][2][0], f[0][3][3][4][0], f[4][0][4][4][0]);\n        return ans;\n        \n    }\n};",
    "submit_ts": 1719113117.0
}