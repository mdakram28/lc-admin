{
    "username": "Yun-Hsuan",
    "submission": "class Solution {\npublic:\n    pair<pair<int, int>, pair<int, int>> findFarthestPoints(const vector<vector<int>>& points) {\n        if (points.size() < 2) {\n            // Not enough points to determine a pair\n            return {{0, 0}, {0, 0}}; // Return a default or invalid pair\n        }\n        // Initializing to first point for comparison\n        int maxPlus = points[0][0] + points[0][1], minPlus = maxPlus;\n        int maxMinus = points[0][0] - points[0][1], minMinus = maxMinus;\n        pair<int, int> maxPlusPoint = {points[0][0], points[0][1]}, minPlusPoint = {points[0][0], points[0][1]};\n        pair<int, int> maxMinusPoint = {points[0][0], points[0][1]}, minMinusPoint = {points[0][0], points[0][1]};\n\n        // Iterate through all points to find the farthest pair\n        for (const auto& point : points) {\n            int plus = point[0] + point[1];\n            int minus = point[0] - point[1];\n\n            if (plus > maxPlus) {\n                maxPlus = plus;\n                maxPlusPoint = {point[0], point[1]};\n            }\n            if (plus < minPlus) {\n                minPlus = plus;\n                minPlusPoint = {point[0], point[1]};\n            }\n            if (minus > maxMinus) {\n                maxMinus = minus;\n                maxMinusPoint = {point[0], point[1]};\n            }\n            if (minus < minMinus) {\n                minMinus = minus;\n                minMinusPoint = {point[0], point[1]};\n            }\n        }\n        \n        // Determine the farthest pair based on the maximum Manhattan distance\n        if (maxPlus - minPlus > maxMinus - minMinus) {\n            return {maxPlusPoint, minPlusPoint};\n        } else {\n            return {maxMinusPoint, minMinusPoint};\n        }\n    }\n    \n    int longestManhattanDistance(const vector<vector<int>>& points) {\n        if (points.empty()) return 0; // Handle empty input\n\n        // Initialize variables to track the maximum and minimum of x+y and x-y\n        int maxPlus = points[0][0] + points[0][1];\n        int minPlus = points[0][0] + points[0][1];\n        int maxMinus = points[0][0] - points[0][1];\n        int minMinus = points[0][0] - points[0][1];\n\n        // Iterate through all points to update the max and min values\n        for (const auto& p : points) {\n            int plus = p[0] + p[1];\n            int minus = p[0] - p[1];\n            maxPlus = max(maxPlus, plus);\n            minPlus = min(minPlus, plus);\n            maxMinus = max(maxMinus, minus);\n            minMinus = min(minMinus, minus);\n        }\n        // The longest Manhattan distance is the maximum difference found\n        return max(maxPlus - minPlus, maxMinus - minMinus);\n    } \n    int minimumDistance(vector<vector<int>>& points) {\n        pair<pair<int, int>, pair<int, int>> p12 = findFarthestPoints(points);\n        pair<int, int> p1 = p12.first, p2 = p12.second;\n        int res1 = longestManhattanDistance(points);\n        int n = points.size(), r1 = -1, r2 = -1;\n        for(int i = 0; i < n; i++){\n            if(points[i][0]==p1.first && points[i][1]==p1.second)\n                r1 = i;\n            if(points[i][0]==p2.first && points[i][1]==p2.second)\n                r2 = i;\n        }\n        vector<vector<int>> tmp = points;\n        tmp.erase(tmp.begin()+r1);\n        int res2 = longestManhattanDistance(tmp);\n        tmp = points;\n        tmp.erase(tmp.begin()+r2);\n        int res3 = longestManhattanDistance(tmp);\n        //cout << \"res1: \" << res1 << endl;\n        //cout << \"res1: \" << res2 << endl;\n        //cout << \"res1: \" << res3 << endl;\n        //cout << \"-----------------\" << endl;\n        return min({res1, res2, res3});\n    }\n};"
}