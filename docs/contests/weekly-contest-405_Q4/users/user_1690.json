{
    "username": "Frederic-Chopin",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n            # max_word_length = max(max_word_length, len(word))\n\n        L = len(target)\n        dp = [float('inf')] * (L + 1) # d[i]: min_cost ending at i\n        dp[0] = 0\n        \n        # max_word_length = 0\n        \n\n        for i in range(L):\n            if dp[i] == float('inf'):\n                continue\n            node = trie.root\n            for j in range(i, L):\n                c = target[j]\n                if c not in node.children:\n                    break\n                node = node.children[c]\n                if node.is_word:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n                    \n        if dp[-1] == float('inf'):\n            return -1\n        return dp[-1]\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.is_word = False\n    \nclass Trie: \n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.cost = min(node.cost, cost)\n        node.is_word = True\n",
    "submit_ts": "1720323892",
    "subm_id": "1312386568"
}