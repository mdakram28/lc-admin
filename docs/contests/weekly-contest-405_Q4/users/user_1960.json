{
    "username": "ivanc-e",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.minCost = float('inf')\n\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.minCost = min(node.minCost, cost)\n\n    def find_prefixes(self, s, start):\n        result = []\n        node = self.root\n        for i in range(start, len(s)):\n            if s[i] not in node.children:\n                break\n            node = node.children[s[i]]\n            if node.minCost != float('inf'):\n                result.append((i + 1, node.minCost))  # (end index, cost)\n        return result\n\n\nclass Solution:\n    def minimumCost(self, target, words, costs):\n        n = len(target)\n        trie = Trie()\n\n        # Build the Trie with the given words and their minimum costs.\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n\n        # Initialize the DP array with a large value (representing infinity).\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # Base case: cost to form an empty string is 0.\n\n        # Iterate over each character in the target string.\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # Skip if this position is unreachable.\n\n            # Find all valid words that can be appended starting from position i.\n            prefixes = trie.find_prefixes(target, i)\n            for endIndex, cost in prefixes:\n                dp[endIndex] = min(dp[endIndex], dp[i] + cost)\n\n        # Return the minimum cost to form the entire target string, or -1 if it's not possible.\n        return -1 if dp[n] == float('inf') else dp[n]\n",
    "submit_ts": "1720323562",
    "subm_id": "1312378587"
}