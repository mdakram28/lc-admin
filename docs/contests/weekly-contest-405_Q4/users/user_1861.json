{
    "username": "sarvasva_309",
    "submission": "class Node{\n    Node* nodes[26];\n    bool flag;\n    int cost;\n\n    public:\n    Node(){\n        for(int i=0;i<26;i++)\n        nodes[i]=NULL;\n        flag=false;\n        cost=INT_MAX;\n    }\n\n    bool containsKey(char c){\n        return !(nodes[c-'a']==NULL);\n    }\n\n    void putLetter(char c, Node* temp){\n        nodes[c-'a']=temp;\n    }\n\n    Node* getNext(char c){\n        return nodes[c-'a'];\n    }\n\n    void setEnd(int cost){\n        flag=true;\n        this->cost=min(this->cost,cost);\n    }\n\n    bool isEnd(){\n        return flag;\n    }\n    int nodeCost(){\n        return cost;\n    }\n};\n\nclass Trie {\n    Node* root;\n    vector<int> dp;\npublic:\n    Trie(int n) {\n        root=new Node();\n        dp.assign(n,-1);\n    }\n    \n    void insert(string word, int cost) {\n        Node* curr = root;\n        for(auto &itr : word){\n            if(!(curr->containsKey(itr))){\n                curr->putLetter(itr, new Node());\n            }\n            curr=curr->getNext(itr);\n        }\n        curr->setEnd(cost);\n    }\n\n    int minimumCostConstruction(string &target, int position){\n        if(position==target.size())\n            return 0;\n        \n        if(dp[position]!=-1)\n            return dp[position];\n        \n        Node* curr=root;\n        int answer=INT_MAX;\n        int i;\n        for(i=position;i<target.size();i++){\n            char currentCharacter=target[i];\n\n            if(curr->isEnd()){\n                int temp=minimumCostConstruction(target,i);\n                if(temp!=INT_MAX)\n                    answer=min(answer,curr->nodeCost()+temp);\n            }\n            if(!(curr->containsKey(currentCharacter)))\n                break;\n            curr=curr->getNext(currentCharacter);\n        }\n        if(curr->isEnd()){\n                int temp=minimumCostConstruction(target,i);\n                if(temp!=INT_MAX)\n                    answer=min(answer,curr->nodeCost()+temp);\n        }\n        return dp[position]=answer;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t(target.size());\n        for(int i=0;i<words.size();i++)\n            t.insert(words[i],costs[i]);\n        int x=t.minimumCostConstruction(target,0);\n        if(x==INT_MAX) return -1;\n        return x;\n    }\n};",
    "submit_ts": "1720324787",
    "subm_id": "1312408321"
}