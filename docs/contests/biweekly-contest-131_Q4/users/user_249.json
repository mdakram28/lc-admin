{
    "username": "qiye-5",
    "submission": "int __FAST_IO__ = []() { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); return 0; }();\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> set = {0};\n        for (auto q : queries) {\n            if (q[0] == 1) set.insert(q[1]);\n        }\n        int last = 0;\n        map<int, int> map;\n        for (int p : set) {\n            int len = p - last;\n            if (map.empty() || map.rbegin()->first < len) map[len] = p;\n            last = p;\n        }\n\n        // for (auto& [k, v] : map) cout << k << \":\" << v << \" \"; cout << endl;\n\n        auto Erase = [&](int len, int back) {\n            auto iter = map.find(len);\n            if (iter != map.end() && iter->second == back) map.erase(len);\n        };\n\n\n        reverse(queries.begin(), queries.end());\n        vector<bool> res;\n        for (auto q : queries) {\n            if (q[0] == 1) {\n                set.erase(q[1]);\n                const int ls = *prev(set.lower_bound(q[1]));\n                Erase(q[1] - ls, q[1]);\n\n                auto nx = set.lower_bound(q[1]);\n                if (nx != set.end()) {\n                    const int np = *nx;\n                    Erase(np - q[1], np);\n\n                    int len = np - ls;\n                    auto iter = map.lower_bound(len);\n                    if (iter != map.end()) {\n                        if (iter->second <= np) continue;\n                    }\n\n                    map[len] = np;\n                    iter = map.find(len);\n                    while (iter != map.begin()) {\n                        auto ptr = prev(iter);\n                        if (ptr->second >= np) map.erase(ptr);\n                        else break;\n                    }\n                }\n\n                // for (auto& [k, v] : map) cout << k << \":\" << v << \" \"; cout << endl;\n            }\n            else {\n                int lg = *prev(set.upper_bound(q[1]));\n                if (q[1] - lg >= q[2]) res.push_back(true);\n                else {\n                    auto iter = map.lower_bound(q[2]);\n                    if (iter != map.end()) res.push_back(iter->second <= q[1]);\n                    else res.push_back(false);\n                }\n            }\n        }\n\n        reverse(res.begin(), res.end());\n        return res;\n    }\n};",
    "submit_ts": 1716651191.0
}