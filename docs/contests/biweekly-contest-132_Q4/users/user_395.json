{
    "username": "Avuvos",
    "submission": "class Solution {\npublic:\n    const int inf = 1e9 + 2;\n    int dp[5001][51];\n    \n    struct SegmentTree {\n        int n;\n        vector<int> tree;\n        \n        SegmentTree(int size) : n(size), tree(2 * size, 0) {}\n        \n        void build() {\n            for (int i = n - 1; i > 0; --i) {\n                tree[i] = max(tree[i << 1], tree[i << 1 | 1]);\n            }\n        }\n        \n        void modify(int p, int value) {\n            for (tree[p += n] = value; p > 1; p >>= 1) {\n                tree[p >> 1] = max(tree[p], tree[p ^ 1]);\n            }\n        }\n        \n        int max_query(int l, int r) {\n            int res = 0;\n            for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\n                if (l & 1) res = max(res, tree[l++]);\n                if (r & 1) res = max(res, tree[--r]);\n            }\n            return res;\n        }\n    };\n    \n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        memset(dp, 0, sizeof(dp));\n\n        vector<SegmentTree> segTrees(k + 1, SegmentTree(n));\n\n        map<int, int> bestDpWithoutPenalty;\n\n        int ans = 1;\n\n        for (int j = 0; j <= k; ++j) {\n            bestDpWithoutPenalty.clear();  // Clear the map for each penalty level\n            for (int i = 0; i < n; ++i) {\n                dp[i][j] = 1; // only nums[i] is included\n\n                // Not increasing penalty case\n                if (bestDpWithoutPenalty.count(nums[i])) {\n                    dp[i][j] = max(dp[i][j], 1 + bestDpWithoutPenalty[nums[i]]);\n                }\n\n                // Increasing penalty case\n                if (j > 0) {\n                    int max_val = segTrees[j - 1].max_query(0, i);\n                    dp[i][j] = max(dp[i][j], 1 + max_val);\n                }\n\n                // Update the map for not increasing penalty\n                bestDpWithoutPenalty[nums[i]] = max(bestDpWithoutPenalty[nums[i]], dp[i][j]);\n\n                // Update the segment tree\n                segTrees[j].modify(i, dp[i][j]);\n\n                // Update the global answer\n                ans = max(ans, dp[i][j]);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1717861767.0
}