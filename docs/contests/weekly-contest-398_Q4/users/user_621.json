{
    "username": "power1011",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        // 1. i + 2^jump\n        // 2. i - 1, next must be i + 2^jump, overall  i + (2^jump-1)\n        // jump==10 how many possible positions 2^10\n        // jump=0\n        // [1, 2]: [1,1]\n        // jump=1\n        // [2, 4]: [1,2,1]\n        \n        // [i + (2^1-1), i + 2^1]: [1,2,1]\n        // jump=2\n        // [i + (2^1-1) + (2^2-1), i + 2^1 + 2^2]: \n        // [i + 2^1 + 2^2 - 2, i + 2^1 + 2^2]: [1,2,1] = [C(3,0), C(3,1), C(3,2), C(3,3)]\n        // jump=10\n        // [i + (2^1-1) + (2^2-1) + ... + (2^10-1), i + 2^1 + 2^2 + ... + 2^10]\n        // [i + 2^1 + 2^2 + ... + 2^10 - 10, i + 2^1 + 2^2 + ... + 2^10]: C(11,i)\n        // O(log_2(k)^2)\n        using i64 = std::int64_t;\n        i64 lb = 1;\n        i64 ub = 1;\n        i64 ans = 0;\n        constexpr int max_layer = 60;\n        std::vector<std::vector<int>> C(max_layer, std::vector<int>(max_layer));\n        C.at(0).at(0) = 1;\n        {\n            const int m = 0;\n            if(lb-1<=k && k<=ub-1)\n            {\n                ans += C[m][k - (lb-1)];\n            }\n            if(lb<=k && k<=ub)\n            {\n\n                ans += C[m][k - lb];\n            }\n        }\n\n        for(int jump=0;;++jump)\n        {\n            lb += (i64(1) << jump) - 1;\n            ub += (i64(1) << jump);\n            const int m = jump+1;\n            {\n                C[m][0] = C[m - 1][0];\n                for(int i=1;i<=m;++i)\n                {\n                    C[m][i] = C[m - 1][i - 1] + C[m - 1][i];\n                }\n            }\n            if(lb-1<=k && k<=ub-1)\n            {\n                ans += C[m][k - (lb-1)];\n            }\n            if(lb<=k && k<=ub)\n            {\n\n                ans += C[m][k - lb];\n            }\n            if(k < lb - 1){\n                break;\n            }\n        }\n        return ans;\n    } \n};",
    "submit_ts": 1716089411.0
}