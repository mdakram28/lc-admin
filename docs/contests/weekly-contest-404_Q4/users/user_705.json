{
    "username": "Skd-195",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int size1 = edges1.size() + 1;\n        int size2 = edges2.size() + 1;\n        vector<vector<int>> adj1(size1);\n        vector<vector<int>> adj2(size2);\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        int farthestNode1 = 0;\n        int d1 = findDiameter(adj1, farthestNode1);\n        int farthestNode2 = 0;\n        int d2 = findDiameter(adj2, farthestNode2);\n        int minDiameter = max(d1, d2);\n        int halfd1 = (d1 + 1) / 2;\n        int halfd2 = (d2 + 1) / 2;\n        minDiameter = max(minDiameter, halfd1 + halfd2 + 1);\n        return minDiameter;\n    }\nprivate:\n    int findDiameter(const vector<vector<int>>& graph, int& furthestNode) {\n        int n = graph.size();\n        vector<int> distance(n, -1);\n        function<void(int, int)> dfsVisit = [&](int node, int dist) {\n            distance[node] = dist;\n            if (dist > distance[furthestNode]) {\n                furthestNode = node;\n            }\n            for (int neighbor : graph[node]) {\n                if (distance[neighbor] == -1) {\n                    dfsVisit(neighbor, dist + 1);\n                }\n            }\n        };\n        furthestNode = 0;\n        dfsVisit(0, 0);\n        int end1 = furthestNode;\n        fill(distance.begin(), distance.end(), -1);\n        dfsVisit(end1, 0);\n        return distance[furthestNode];\n    }\n};\n",
    "submit_ts": 1719719300.0
}