{
    "username": "darrenhp",
    "submission": "class Solution {\npublic:\n  int get(vector<int> A, int x) {\n    int s = 0;\n    for (int i = 0; i < 30; i++) if (A[i]==x) s|=1<<i;\n    return s;\n  }\n  long long gao(vector<int> A, int k) {\n    int n = A.size();\n    vector<int> cnt(32);\n    long long ans = 0;\n    for (int i = 0, j = 0; i < n; i++) {\n      j = max(i, j);\n      while (j < n && get(cnt, j-i) >= k) {\n        for (int d = 0; d < 32; d++) if (A[j]>>d&1) cnt[d]++;\n        j++;\n      }\n      if (get(cnt, j-i)<k) ans += n-j+1;\n      // cout << k << \" \" << i << \" \" << j << \" \" << ans << endl;\n      for (int d = 0; d < 32; d++) if (A[i]>>d&1) cnt[d]--;\n    }\n    return ans;\n  }\n  long long countSubarrays(vector<int>& A, int k) {\n    return gao(A, k+1)-gao(A, k);\n  }\n};",
    "submit_ts": "1720277613",
    "subm_id": "544557754"
}