{
    "username": "fpeterfalvi",
    "submission": "import java.util.ArrayList;\nimport java.util.Collections;\nimport java.util.Comparator;\nimport java.util.List;\n\nclass Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length;\n        List<int[]> sum = new ArrayList<>();\n        List<int[]> diff = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            sum.add(new int[]{points[i][0] + points[i][1], i});\n            diff.add(new int[]{points[i][0] - points[i][1], i});\n        }\n        sum.sort(Comparator.comparingInt(arr -> arr[0]));\n        diff.sort(Comparator.comparingInt(arr -> arr[0]));\n        List<Integer> toRemove = new ArrayList<>();\n        if (sum.get(n - 1)[0] - sum.get(0)[0] >= diff.get(n - 1)[0] - diff.get(0)[0]) {\n            toRemove.add(sum.get(n - 1)[1]);\n            toRemove.add(sum.get(0)[1]);\n        } else {\n            toRemove.add(diff.get(n - 1)[1]);\n            toRemove.add(diff.get(0)[1]);\n        }\n        int result = Integer.MAX_VALUE;\n        for (int k : toRemove) {\n            List<Integer> s = new ArrayList<>();\n            List<Integer> d = new ArrayList<>();\n            for (int i = 0; i < n; i++) {\n                if (i != k) {\n                    s.add(points[i][0] + points[i][1]);\n                    d.add(points[i][0] - points[i][1]);\n                }\n            }\n            Collections.sort(s);\n            Collections.sort(d);\n            result = Math.min(result, Math.max(s.get(n - 2) - s.get(0), d.get(n - 2) - d.get(0)));\n        }\n        return result;\n    }\n}"
}