{
    "username": "flndrsql",
    "submission": "class Solution {\npublic:\n  int correct(int a, int b, int c, int d) {\n    int zeros = (a==0) + (b==0) + (c==0) + (d==0);\n    int ones = (a==1) + (b==1) + (c==1) + (d==1);\n    // dbg(zeros);\n    // dbg(ones);\n    int tmp1 = 4 - zeros;\n    int tmp2 = 4 - ones;\n    // dbg(tmp1);\n    // dbg(tmp2);\n    int res = std::min(tmp1, tmp2);\n    // dbg(res);\n    return res;\n  }\n  \n  int minFlips(vector<vector<int>>& grid) {\n    \n    int m = grid.size();\n    int n = grid[0].size();\n\n    int res = 0;\n    \n    for ( int i = 0; i < m/2; ++i ) {\n      for ( int j = 0; j < n/2; ++j ) {\n        // dbg(\"===========\");\n        // dbg(i);\n        // dbg(j);\n        int one = grid[i][j];\n        int two = grid[m-1-i][j];\n        int three = grid[i][n-1-j];\n        int four = grid[m-1-i][n-1-j];\n        // dbg(one);\n        // dbg(two);\n        // dbg(three);\n        // dbg(four);\n        int tmp = correct(one, two, three, four);\n        // dbg(tmp);\n        res += tmp;\n      }\n    }\n\n    // dbg(res);\n    \n    // handle the odd edge cases\n    int one_one_pairs = 0;\n    int one_zero_pairs = 0;\n    if ( m % 2 == 1 ) {\n      for ( int j = 0; j < n/2; ++j ) {\n        int d1 = grid[m/2][j];\n        int d2 = grid[m/2][n-1-j];\n        if ( d1 == 1 && d2 == 1 ) {\n          ++one_one_pairs;\n        }\n        else if ( d1 != d2 ) {\n          ++one_zero_pairs;\n        }\n      }\n    }\n    if ( n % 2 == 1 ) {\n      for ( int i = 0; i < m/2; ++i ) {\n        int d1 = grid[i][n/2];\n        int d2 = grid[m-1-i][n/2];\n        if ( d1 == 1 && d2 == 1 ) {\n          ++one_one_pairs;\n        }\n        else if ( d1 != d2 ) {\n          ++one_zero_pairs;\n        }\n      }\n    }\n\n    // dbg(one_one_pairs);\n    // dbg(one_zero_pairs);\n    \n    if ( one_one_pairs % 2 == 0 ) {\n      // set them all to zero\n      res += one_zero_pairs;\n    }\n    else if ( one_zero_pairs >= 1 ) {\n      // set one (0,1) to (1,1)\n      // set the remaiing (0,1) to (0,0)\n      res += one_zero_pairs;\n    }\n    else {\n      // happens with {1,1,1,1,1,1} cases\n      // remove one one_one_pair\n      res += 2;\n      // set the remaining(0,1) to (0,0)\n      res += one_zero_pairs;\n    }\n    \n    if ( (m % 2 == 1) && (n % 2 == 1) ) {\n      // if this is ever 1, set it to 0\n      res += grid[m/2][n/2] == 1;\n    }\n    \n    return res;\n  }\n\n\n};",
    "submit_ts": "1722699745",
    "subm_id": "1343221016"
}