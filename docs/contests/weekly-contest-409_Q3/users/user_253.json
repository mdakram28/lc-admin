{
    "username": "stormsunshine",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int queriesCount = queries.length;\n        int[] shortestDistances = new int[queriesCount];\n        int currDistance = n - 1;\n        TreeSet<Interval> intervals = new TreeSet<Interval>((a, b) -> {\n            if (a.start != b.start) {\n                return a.start - b.start;\n            } else {\n                return b.end - a.end;\n            }\n        });\n        for (int i = 0; i < queriesCount; i++) {\n            Interval interval = new Interval(queries[i][0], queries[i][1]);\n            Interval prev = intervals.floor(interval);\n            if (prev == null) {\n                currDistance -= interval.end - interval.start - 1;\n                intervals.add(interval);\n            } else {\n                if (prev.end >= interval.end) {\n                    // do nothing\n                } else {\n                    currDistance -= interval.end - interval.start - 1;\n                    intervals.add(interval);\n                }\n            }\n            while (intervals.higher(interval) != null) {\n                Interval next = intervals.higher(interval);\n                if (next.end <= interval.end) {\n                    currDistance += next.end - next.start - 1;\n                    intervals.remove(next);\n                } else {\n                    break;\n                }\n            }\n            shortestDistances[i] = currDistance;\n        }\n        return shortestDistances;\n    }\n}\n\nclass Interval {\n    int start;\n    int end;\n\n    public Interval(int start, int end) {\n        this.start = start;\n        this.end = end;\n    }\n}",
    "submit_ts": "1722740984",
    "subm_id": "552335095"
}