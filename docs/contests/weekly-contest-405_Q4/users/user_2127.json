{
    "username": "Agb1999",
    "submission": "class TrieNode:\n        # Initialize your data structure here.\n        def __init__(self):\n            self.word=False\n            self.cost = 0\n            self.children={}\n    \nclass Trie:\n    \n        def __init__(self):\n            self.root = TrieNode()\n    \n        # @param {string} word\n        # @return {void}\n        # Inserts a word into the trie.\n        def insert(self, word, cost):\n            node=self.root\n            for i in word:\n                if i not in node.children:\n                    node.children[i]=TrieNode()\n                node=node.children[i]\n            node.word=True\n            node.cost = cost\n    \n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n\n        \n        @cache\n        def recur(n):\n            if n == len(target):\n                return 0\n            \n            \n            ans = float(\"inf\")\n            i = n\n            root = trie.root\n            while i < len(target):\n                if target[i] in root.children:\n                    root = root.children[target[i]]\n                    if root.word:\n                         ans = min(ans, root.cost + recur(i+1))\n                    i += 1\n                else:\n                    break\n            \n            return ans\n               \n\n\n            # for i in range(n+1, len(target)+1):\n            #     if target[n:i] in costMap:\n            #         ans = min(ans, costMap[target[n:i]] + recur(i))\n            # return ans\n\n        costMap = {}\n        for i in range(len(words)):\n            if words[i] in costMap and costs[i] > costMap[words[i]]:\n                continue\n            costMap[words[i]] = costs[i]\n\n    \n        trie = Trie()\n        for word in costMap:\n            trie.insert(word,costMap[word])\n        ans =  recur(0)\n        if ans == float(\"inf\"):\n            return -1\n        return ans\n        ",
    "submit_ts": "1720322487",
    "subm_id": "1312351223"
}