{
    "username": "Taraksriram",
    "submission": "class TrieNode {\npublic:\n    map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    vector<pair<int, int>> search(const string& s, int start) {\n        TrieNode* node = root;\n        vector<pair<int, int>> result;\n        for (int i = start; i < s.size(); ++i) {\n            if (node->children.find(s[i]) == node->children.end()) {\n                break;\n            }\n            node = node->children[s[i]];\n            if (node->cost != INT_MAX) {\n                result.push_back({i + 1, node->cost});\n            }\n        }\n        return result;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            vector<pair<int, int>> matches = trie.search(target, i);\n            for (auto& match : matches) {\n                dp[match.first] = min(dp[match.first], dp[i] + match.second);\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323840",
    "subm_id": "1312385284"
}