{
    "username": "thtuan108",
    "submission": "class Solution:\n    def and_bit(self, val: int, num: int, bit_count: List[int]) -> int:\n        val &= num\n        count = 0\n        while num:\n            if num % 2 != 0:\n                bit_count[count] += 1\n            num >>= 1\n            count += 1\n        return val\n\n    def un_and_bit(self, num: int, bit_count: List[int], num_count: int) -> int:\n        res = 0\n        for i in range(32):\n            if num % 2 != 0:\n                bit_count[i] -= 1\n            num >>= 1\n            if bit_count[i] == num_count:\n                res += 2 ** i\n        return res\n\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        left = 0\n        bit_count: List[int] = [0] * 32\n        and_res = nums[0]\n        min_res = abs(k - and_res)\n        for right in range(len(nums)):\n            and_res = self.and_bit(and_res, nums[right], bit_count)\n            min_res = min(min_res, abs(k - and_res))\n            while left < right and and_res < k:\n                and_res = self.un_and_bit(nums[left], bit_count, right - left)\n                min_res = min(min_res, abs(k - and_res))\n                left += 1\n        return min_res\n",
    "submit_ts": 1717299920.0
}