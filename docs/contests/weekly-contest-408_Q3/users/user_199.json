{
    "username": "tommy787576",
    "submission": "// A string has dominant ones if the number of ones in the string is greater than or equal to the square of the number of zeros in the string.\n    \n// # ones  # zeros\n// 1        [0, 1]\n// 2        [0, 1]\n// 3        [0, 1]\n// 4        [0, 1, 2]\n// ...\n// 9        [0, 1, 2, 3]\n// ...\n// 16       [0, 1, 2, 3, 4]\n// ...\n    \n// can we calculate 1~3, 4~8, 9~15, 16~24 together using sliding window?\n\nclass Solution {\n    int _count(string& s, int max0Cnt, int max1Cnt) {\n        int tol = 0, cnt0 = 0, cnt1 = 0;\n        for (int l = 0, r = 0; r < s.length(); r++) {\n            cnt0 += (s[r] == '0');\n            cnt1 += (s[r] == '1');\n            while (cnt0 > max0Cnt || cnt1 > max1Cnt) {\n                cnt0 -= (s[l] == '0');\n                cnt1 -= (s[l] == '1');\n                l++;\n            }\n            // cout << l << ' ' << r << '\\n';\n            tol += (r - l + 1);\n        }\n        return tol;\n    }\n    int count(string& s, int min1Cnt, int max1Cnt) {\n        // cout << min1Cnt << ' ' << max1Cnt << '\\n';\n        // cout << \"check\\n\";\n        int tol1 = _count(s, sqrt(max1Cnt), max1Cnt), tol2 = _count(s, sqrt(max1Cnt), min1Cnt - 1);\n        // cout << tol1 << ' ' << tol2 << '\\n';\n        int tol = tol1 - tol2;\n        // cout << tol << '\\n';\n        return tol;\n    }\npublic:\n    int numberOfSubstrings(string s) {\n        int tol = 0, i;\n        for (i = 2; i * i <= s.length(); i++) {\n            tol += count(s, (i - 1) * (i - 1), i * i - 1);\n        }\n        tol += count(s, (i - 1) * (i - 1), s.length());\n        return tol;\n    }\n};",
    "submit_ts": "1722137021",
    "subm_id": "1335751855"
}