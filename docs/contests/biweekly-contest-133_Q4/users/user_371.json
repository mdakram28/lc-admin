{
    "username": "bludyfang",
    "submission": "class Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> indexToRequiredInversions;\n        for (auto& req : requirements) {\n            indexToRequiredInversions[req[0] + 1] = req[1]; \n        }\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        int ll = 1;\n        while (ll <= n) {\n            int inversions = 0;\n            while (inversions <= MAX_INVERSIONS) {\n                int pos = 0;\n                while (pos < ll) {\n                    int previousInversions = inversions - pos;\n                    if (previousInversions >= 0) {\n                        dp[ll][inversions] = (dp[ll][inversions] + dp[ll - 1][previousInversions]) % MOD;\n                    }\n                    ++pos;\n                }\n                ++inversions;\n            }\n\n            if (indexToRequiredInversions.count(ll) > 0) {\n                int requiredInversions = indexToRequiredInversions[ll];\n                int inversions = 0;\n                while (inversions <= MAX_INVERSIONS) {\n                    if (inversions != requiredInversions) {\n                        dp[ll][inversions] = 0;\n                    }\n                    ++inversions;\n                }\n            }\n\n            ++ll;\n        }\n\n        long long totalPermutations = 0;\n        int inversions = 0;\n        while (inversions <= MAX_INVERSIONS) {\n            totalPermutations = (totalPermutations + dp[n][inversions]) % MOD;\n            ++inversions;\n        }\n\n        return static_cast<int>(totalPermutations);\n    }\n};\n",
    "submit_ts": "1719070350",
    "subm_id": "1296820858"
}