{
    "username": "jon-snow23",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> adj1 = buildAdjacencyList(n, edges1);\n        vector<vector<int>> adj2 = buildAdjacencyList(m, edges2);\n\n        int diameter1 = calculateDiameter(adj1);\n        int diameter2 = calculateDiameter(adj2);\n\n        return calculateMinDiameter(diameter1, diameter2);\n    }\n\nprivate:\n    vector<vector<int>> buildAdjacencyList(int n, const vector<vector<int>>& edges) {\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            addEdge(adj, edge[0], edge[1]);\n        }\n        return adj;\n    }\n\n    void addEdge(vector<vector<int>>& adj, int u, int v) {\n        adj[u].push_back(v);\n        adj[v].push_back(u);\n    }\n\n    int dfs(const vector<vector<int>>& adj, int start, int& farthestNode) {\n        vector<int> dist = initializeDistance(adj.size());\n        performDFS(adj, start, dist, farthestNode);\n        return dist[farthestNode];\n    }\n\n    vector<int> initializeDistance(int size) {\n        return vector<int>(size, -1);\n    }\n\n    void performDFS(const vector<vector<int>>& adj, int start, vector<int>& dist, int& farthestNode) {\n        function<void(int, int)> dfsVisit = [&](int node, int d) {\n            visitNode(node, d, dist, farthestNode);\n            for (int neighbor : adj[node]) {\n                if (isUnvisited(neighbor, dist)) {\n                    dfsVisit(neighbor, d + 1);\n                }\n            }\n        };\n        farthestNode = start;\n        dfsVisit(start, 0);\n    }\n\n    void visitNode(int node, int d, vector<int>& dist, int& farthestNode) {\n        dist[node] = d;\n        updateFarthestNode(node, d, dist, farthestNode);\n    }\n\n    bool isUnvisited(int node, const vector<int>& dist) {\n        return dist[node] == -1;\n    }\n\n    void updateFarthestNode(int node, int d, const vector<int>& dist, int& farthestNode) {\n        if (d > dist[farthestNode]) {\n            farthestNode = node;\n        }\n    }\n\n    int findFarthestNode(const vector<vector<int>>& adj, int start) {\n        int farthestNode = 0;\n        dfs(adj, start, farthestNode);\n        return farthestNode;\n    }\n\n    int calculateDiameter(const vector<vector<int>>& adj) {\n        int farthestNode = findFarthestNode(adj, 0);\n        return dfs(adj, farthestNode, farthestNode);\n    }\n\n    int calculateMinDiameter(int diameter1, int diameter2) {\n        int maxDiameter = max(diameter1, diameter2);\n        int combinedHalfDiameter = calculateCombinedHalfDiameter(diameter1, diameter2);\n        return max(maxDiameter, combinedHalfDiameter);\n    }\n\n    int calculateCombinedHalfDiameter(int diameter1, int diameter2) {\n        int half1 = calculateHalfDiameter(diameter1);\n        int half2 = calculateHalfDiameter(diameter2);\n        return half1 + half2 + 1;\n    }\n\n    int calculateHalfDiameter(int diameter) {\n        return (diameter + 1) / 2;\n    }\n};\n",
    "submit_ts": "1719715977",
    "subm_id": "1304351583"
}