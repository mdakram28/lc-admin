{
    "username": "mikeac",
    "submission": "from sortedcontainers import SortedSet\n\nclass SegmentTree():\n    def __init__(self, init, unitX, f):\n        self.f = f  # (X, X) -> X\n        self.unitX = unitX\n        self.f = f\n        if type(init) == int:\n            self.n = init\n            self.n = 1 << (self.n - 1).bit_length()\n            self.X = [unitX] * (self.n * 2)\n        else:\n            self.n = len(init)\n            self.n = 1 << (self.n - 1).bit_length()\n            # len(init)\u304c2\u306e\u7d2f\u4e57\u3067\u306f\u306a\u3044\u6642UnitX\u3067\u57cb\u3081\u308b\n            self.X = [unitX] * self.n + init + [unitX] * (self.n - len(init))\n            # \u914d\u5217\u306eindex1\u307e\u3067\u57cb\u3081\u308b\n            for i in range(self.n - 1, 0, -1):\n                self.X[i] = self.f(self.X[i * 2], self.X[i * 2 | 1])\n\n    def update(self, i, x):\n        \"\"\"0-indexed\u306ei\u756a\u76ee\u306e\u5024\u3092x\u3067\u7f6e\u63db\"\"\"\n        # \u6700\u4e0b\u6bb5\u306b\u79fb\u52d5\n        i += self.n\n        self.X[i] = x\n        # \u4e0a\u5411\u306b\u66f4\u65b0\n        i >>= 1\n        while i:\n            self.X[i] = self.f(self.X[i * 2], self.X[i * 2 | 1])\n            i >>= 1\n\n    def getvalue(self, i):\n        \"\"\"\u5143\u306e\u914d\u5217\u306eindex\u306e\u5024\u3092\u898b\u308b\"\"\"\n        return self.X[i + self.n]\n\n    def getrange(self, l, r):\n        \"\"\"\u533a\u9593[l, r)\u3067\u306ef\u3092\u884c\u3063\u305f\u5024\"\"\"\n        l += self.n\n        r += self.n\n        al = self.unitX\n        ar = self.unitX\n        while l < r:\n            # \u5de6\u7aef\u304c\u53f3\u5b50\u30ce\u30fc\u30c9\u3067\u3042\u308c\u3070\n            if l & 1:\n                al = self.f(al, self.X[l])\n                l += 1\n            # \u53f3\u7aef\u304c\u53f3\u5b50\u30ce\u30fc\u30c9\u3067\u3042\u308c\u3070\n            if r & 1:\n                r -= 1\n                ar = self.f(self.X[r], ar)\n            l >>= 1\n            r >>= 1\n        return self.f(al, ar)\n    \nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        mx = 10 ** 5\n        st = SegmentTree(mx, 0, max)\n        hinder = SortedSet()\n        hinder.add(0)\n        ans = []\n        for i in range(len(queries)):\n            x = queries[i][1]\n            if queries[i][0] == 1:\n                j = hinder.bisect_right(x)\n                l = hinder[j - 1]\n                r = mx if j == len(hinder) else hinder[j]\n                st.update(l, x - l)\n                st.update(x, r - x)\n                hinder.add(x)\n            else:\n                sz = queries[i][2]\n                j = hinder.bisect_right(x)\n                l = hinder[j - 1]\n                if x - l >= sz:\n                    ans.append(True)\n                    continue\n                v = st.getrange(0, l)\n                ans.append(True if v >= sz else False)\n        return ans",
    "submit_ts": 1716651327.0
}