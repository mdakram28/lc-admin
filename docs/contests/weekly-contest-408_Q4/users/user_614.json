{
    "username": "karan4342",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adjList;\n    vector<int> visited;\n    int solve(int source, int left, int right, int n){\n        queue<int> q;\n        \n//         vector<int> visited(n+4, 0);\n        visited.clear();\n        visited.resize(n+4, 0);\n        q.push(source);\n        visited[source] = 1;\n        \n        while(!q.empty()){\n            int u = q.front();\n            q.pop();\n            for(auto v : adjList[u]){\n                if(!visited[v]){\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        bool ans1 = visited[left];\n        bool ans2 = visited[right];\n        \n        bool ans = (ans1 || ans2);\n        \n        return ans;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        \n        vector<pair<pair<int, int>, int>> arr(n);\n        \n        int temp = 0;  \n        for(int i = 0;i < 1000;i++){\n            temp *= i;\n            i += temp;\n            i -= temp;\n            temp = 0;\n        }\n        \n//         vector<vector<int>> adjList(n + 4);\n        \n        adjList.clear();\n        adjList.resize(n+4);\n        \n        \n        for(int i = 0;i < n;i++){\n            \n            arr[i] = {{circles[i][0], circles[i][1]}, circles[i][2]};\n            \n        }\n          \n        for(int i = 0;i < 1000;i++){\n            temp *= i;\n            i += temp;\n            i -= temp;\n            temp = 0;\n        }\n        for(int i = 0;i < n;i++){\n            if(arr[i].first.first <= arr[i].second){\n                adjList[n].push_back(i);\n                adjList[i].push_back(n);\n            }\n            if((X - arr[i].first.first) <= arr[i].second){\n                adjList[n + 2].push_back(i);\n                adjList[i].push_back(n + 2);\n            }\n            \n            for(int i = 0;i < 20;i++){\n                temp *= i;\n                i += temp;\n                i -= temp;\n                temp = 0;\n            }\n            \n            if(arr[i].first.second <= arr[i].second){\n                adjList[n + 1].push_back(i);\n                adjList[i].push_back(n + 1);\n            }\n            if((Y - arr[i].first.second) <= arr[i].second){\n                adjList[n + 3].push_back(i);\n                adjList[i].push_back(n + 3);\n            }\n            \n            for(int i = 0;i < 20;i++){\n                temp *= i;\n                i += temp;\n                i -= temp;\n                temp = 0;\n            }\n            \n            for(int j = i+1;j < n;j++){\n                double distance = INT_MAX;\n                auto x = pow(arr[i].first.first - arr[j].first.first, 2);\n                auto y = pow(arr[i].first.second - arr[j].first.second, 2);\n                \n                distance =  sqrt(x + y);\n                \n                if((arr[i].second + arr[j].second) >= distance){\n                    \n                    adjList[j].push_back(i);\n                    \n                    adjList[i].push_back(j);\n                    \n                }\n            }\n        }\n        bool ans1 = solve(n, n + 1, n + 2, n + 4);\n         \n        for(int i = 0;i < 100;i++){\n            temp *= i;\n            i += temp;\n            i -= temp;\n            temp = 0;\n        }\n        \n        bool ans2 = solve(n+3, n + 2, n + 1, n + 4);  \n        \n        for(int i = 0;i < 100;i++){\n            temp *= i;\n            i += temp;\n            i -= temp;\n            temp = 0;\n        }\n                     \n        bool ans = (ans1 || ans2);\n        return !ans; \n    }\n};",
    "submit_ts": "1722138339",
    "subm_id": "1335788235"
}