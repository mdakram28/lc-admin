{
    "username": "Farhan_Sakib",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> requirementMap;\n        for (auto& requirement : requirements)  requirementMap[requirement[0] + 1] = requirement[1];\n        \n        int mod = 1000000007;\n        vector<vector<long long>> permutationCounts(n + 1, vector<long long>(401, 0));\n        permutationCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= 400; inversions++) {\n                for (int newPosition = 0; newPosition < length; newPosition++) {\n                    int previousInversions = inversions - newPosition;\n                    if (inversions >= newPosition)permutationCounts[length][inversions] = (permutationCounts[length][inversions] + permutationCounts[length - 1][previousInversions]) % mod;\n                    \n                }\n            }\n\n            if (requirementMap.find(length) != requirementMap.end()) {\n                int targetInversions = requirementMap[length];\n                for (int inversions = 0; inversions <= 400; inversions++) {\n                    if (inversions != targetInversions) {\n                        permutationCounts[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n\n        long long totalPermutations = 0;\n        for (auto& count : permutationCounts[n]) {\n            totalPermutations = (totalPermutations + count) % mod;\n        }\n\n        return static_cast<int>(totalPermutations);\n    }\n};\n",
    "submit_ts": 1719070618.0
}