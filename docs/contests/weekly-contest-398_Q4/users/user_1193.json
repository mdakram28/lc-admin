{
    "username": "a_surana",
    "submission": "class Solution {\npublic:\n    \n    int getAllPossibleAnswer(unordered_map<int, unordered_map<int, unordered_map<int, int>>>& dp, int startIdx, int target, int jump, bool backStep) {\n        int result = 0;\n        if(dp.find(startIdx) != dp.end() &&\n         dp[startIdx].find(jump) != dp[startIdx].end() &&\n         dp[startIdx][jump].find(backStep) != dp[startIdx][jump].end()\n        ) {\n            return dp[startIdx][jump][backStep];\n        }\n        if(startIdx == target) {\n            result++;\n        }\n\n        // jump or back step\n        if(!backStep && startIdx != 0) {\n            result += getAllPossibleAnswer(dp, startIdx - 1, target, jump, true);\n        }\n\n        // jump if possible\n        if(startIdx <= target) {\n            result += getAllPossibleAnswer(dp, startIdx + pow(2, jump), target, jump + 1, false);\n        }\n        \n        return dp[startIdx][jump][backStep] = result;\n    }\n\n    int waysToReachStair(int k) {\n        unordered_map<int, unordered_map<int, unordered_map<int, int>>> dp;\n        return getAllPossibleAnswer(dp, 1, k, 0, false);\n    }\n};",
    "submit_ts": 1716089863.0
}