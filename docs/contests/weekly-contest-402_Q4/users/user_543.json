{
    "username": "snowfoxy",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        bit = [0] * (n + 1)\n        def lsb(x):\n            return x & -x\n        def update(x, value):\n            while x <= n:\n                bit[x] += value\n                x += lsb(x)\n        def range_sum(x):\n            s = 0\n            while x > 0:\n                s += bit[x]\n                x -= lsb(x)\n            return s\n        def is_peak(x):\n            if x == 0 or x == n - 1:\n                return False\n            return nums[x] > nums[x - 1] and nums[x] > nums[x + 1]\n        \n        \n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                update(i + 1, 1)\n                \n        #print(nums)\n        #print(bit)\n        #for i in range(n):\n        #    print(0, i, range_sum(i + 1))\n        \n        answer = []\n        for t, a, b in queries:\n            if t == 1:\n                answer.append((range_sum(b) - range_sum(a + 1)) if b >= (a + 1) else 0)\n            else:\n                for i in range(max(0, a - 1), min(a + 2, n)):\n                    if not is_peak(i):\n                        continue\n                    update(i + 1, -1)\n                nums[a] = b    \n                for i in range(max(0, a - 1), min(a + 2, n)):\n                    if not is_peak(i):\n                        continue\n                    update(i + 1, 1)\n        return answer\n            \n        ",
    "submit_ts": 1718507857.0
}