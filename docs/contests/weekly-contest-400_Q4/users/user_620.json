{
    "username": "wayjiang",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        vector<int> bit(31);\n        // int ans = max((int)1e9 - k, k);\n        int ans = max(*max_element(nums.begin(), nums.end()) - k, k);\n        for (int i = 0, j = 0; j < nums.size(); ++j) {\n            int v1 = nums[j], cur = 0;\n            for (int b = 0; b < 31; ++b) {\n                if (v1 & (1 << b)) {\n                    ++bit[b];\n                }\n            }\n            \n            for (int b = 0; b < 31; ++b) {\n                if (bit[b] == j - i + 1)\n                    cur |= 1 << b;\n            }\n            // cout<<j<<\" \"<<cur<<endl;\n            ans = min(ans, abs(cur - k));\n            while (i < j && cur < k) {\n                int v2 = nums[i];\n                for (int b = 0; b < 31; ++b) {\n                    if (v2 & (1 << b)) {\n                        --bit[b];\n                    }\n                }\n                for (int b = 0; b < 31; ++b) {\n                    if (bit[b] == j - i)\n                        cur |= 1 << b;\n                }\n                ans = min(ans, abs(cur - k));\n                i++;\n            }\n            \n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717299629.0
}