{
    "username": "MeetBrahmbhatt",
    "submission": "const int N = 5e4 + 2;\n\ntemplate <size_t Nb>\nstruct Bitset : bitset<Nb> {\n  template <typename... Args>\n  Bitset(Args... args) : bitset<Nb>(args...) {}\n\n  static constexpr int N = Nb;\n  static constexpr int array_size = (Nb + 63) / 64;\n\n  union raw_cast {\n    array<uint64_t, array_size> a;\n    Bitset b;\n  };\n\n  int _Find_prev(size_t i) const {\n    if (i == 0) return -1;\n    if ((*this)[--i] == true) return i;\n    size_t M = i / 64;\n    const auto& a = ((raw_cast*)(this))->a;\n    uint64_t buf = a[M] & ((1ull << (i & 63)) - 1);\n    if (buf != 0) return M * 64 + 63 - __builtin_clzll(buf);\n    while (M--) {\n      if (a[M] != 0) return M * 64 + 63 - __builtin_clzll(a[M]);\n    }\n    return -1;\n  }\n\n  inline int _Find_last() const { return _Find_prev(N); }\n};\n\nclass Solution {\npublic:\n    int maxTotalReward(vector<int>& v) {\n        int n = (int) v.size();\n        sort(begin(v), end(v));\n        \n        int MAX = v.back();\n        Bitset<N> dp;\n        dp[0] = 1;\n        int ans = 0;\n        \n        for (int i = 0; i < n; i++) {\n            auto ndp = dp;\n            ndp <<= (N - v[i]);\n            ndp >>= (N - v[i]);\n            ans = max(ans, v[i] + ndp._Find_last());\n            ndp |= (ndp << v[i]);\n            dp |= ndp;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717903038",
    "subm_id": "1282322672"
}