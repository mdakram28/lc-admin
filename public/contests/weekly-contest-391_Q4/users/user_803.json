{
    "username": "mygreatcoder",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        def get_manhattan_dist(points):\n            sums = [(p[0] + p[1], i) for i, p in enumerate(points)]\n            diffs = [(p[0] - p[1], i) for i, p in enumerate(points)]\n            sums.sort()\n            diffs.sort()\n            return max(sums[-1][0] - sums[0][0], diffs[-1][0] - diffs[0][0])\n        \n        sums = [(p[0] + p[1], i) for i, p in enumerate(points)]\n        diffs = [(p[0] - p[1], i) for i, p in enumerate(points)]\n        sums.sort()\n        diffs.sort()\n                \n        key_points = [sums[0][1], sums[-1][1], diffs[0][1], diffs[-1][1]]\n\n        ans = float('inf')\n        for kpi in key_points:\n            ans = min(ans, get_manhattan_dist([p for i, p in enumerate(points) if i != kpi]))\n        \n        return ans"
}