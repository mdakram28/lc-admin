{
    "username": "b03704074",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        hCount, vCount = 1, 1\n        hHeap, vHeap = [-1 * h for h in horizontalCut], [-1 * v for v in verticalCut]\n        heapq.heapify(hHeap)\n        heapq.heapify(vHeap)\n        cost = 0\n        while hHeap and vHeap:\n            h, v = hHeap[0], vHeap[0]\n            if h <= v:\n                heapq.heappop(hHeap)\n                cost += (-1) * h * hCount\n                vCount += 1\n            elif h > v:\n                heapq.heappop(vHeap)\n                cost += (-1) * v * vCount\n                hCount += 1\n        while hHeap:\n            h = heapq.heappop(hHeap)\n            cost += (-1) * h * hCount\n        while vHeap:\n            v = heapq.heappop(vHeap)\n            cost += (-1) * v * vCount\n        return cost\n",
    "submit_ts": "1720926202",
    "subm_id": "1320278983"
}