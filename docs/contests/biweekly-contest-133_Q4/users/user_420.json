{
    "username": "sachin_7284",
    "submission": "class Solution {\npublic:\nconst int mod = 1e9+7;\nconst int MAX_INVERSIONS = 400;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n                unordered_map<int, int> mp;\n        for (auto& x : requirements) {\n            mp[x[0] + 1] = x[1];\n        }\n        long long result = 0;\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int pos = 0; pos < length; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[length][inv] = (dp[length][inv] + dp[length - 1][prevInv]) % mod;\n                    }\n                }\n            }\n\n            if (mp.find(length)!=mp.end()) {\n        \n                for (int i = 0; i <= MAX_INVERSIONS; ++i) {\n                    if (i != mp[length]) {\n                        dp[length][i] = 0;\n                    }\n                }\n            }\n        }\n\n        for (long long count : dp[n]) {\n            result = (result + count) % mod;\n        }\n\n        return (int) result;\n    }\n    \n};",
    "submit_ts": "1719070444",
    "subm_id": "1296823175"
}