{
    "username": "unnat_7779",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> dp(51, vector<int>(51, 0));\n\n        // Initialize the dp table for the first element in nums\n        for (int i = 0; i <= nums[0]; ++i) {\n            dp[i][nums[0] - i] = 1;\n        }\n\n        // Fill the dp table for the remaining elements in nums\n        for (int k = 1; k < n; ++k) {\n            vector<vector<int>> new_dp(51, vector<int>(51, 0));\n            for (int i = 0; i <= 50; ++i) {\n                for (int j = 0; j <= 50; ++j) {\n                    if (dp[i][j] == 0)\n                        continue;\n                    for (int x = i; x <= nums[k]; ++x) {\n                        int y = nums[k] - x;\n                        if (y <= j) {\n                            new_dp[x][y] = (new_dp[x][y] + dp[i][j]) % MOD;\n                        }\n                    }\n                }\n            }\n            dp = new_dp;\n        }\n\n        // Calculate the result by summing up all valid (x, y) pairs for the\n        // last index\n        int result = 0;\n        for (int i = 0; i <= 50; ++i) {\n            for (int j = 0; j <= 50; j++) {\n                result = (result + dp[i][j]) % MOD;\n            }\n        }\n        // cout<<result;\n        return result;\n    }\n};",
    "submit_ts": "1723345341",
    "subm_id": "1351553661"
}