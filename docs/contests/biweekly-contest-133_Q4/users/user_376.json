{
    "username": "priyansh_iitd26",
    "submission": "#define ll long long\nclass Solution {\n    const int maxiInversions = 400;\n    const int MOD = 1000000007;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mpp;\n\n        for(auto& it: requirements){\n            mpp[it[0] + 1] = it[1];\n        }\n\n        vector<vector<ll>> dp(n + 1, vector<ll>(maxiInversions + 1, 0));\n        dp[0][0] = 1;\n\n        for(int i = 1; i <= n; i++){\n            for(int j = 0; j <= maxiInversions; j++){\n                for(int newPos = 0; newPos < i; newPos++){\n                    int prevj = j - newPos;\n                    if(prevj >= 0) dp[i][j] = (dp[i - 1][prevj] + dp[i][j]) % MOD;\n                }\n            }\n\n            if(mpp.find(i) != mpp.end()){\n                int target = mpp[i];\n                for(int j = 0; j <= maxiInversions; j++){\n                    if(j != target) dp[i][j] = 0;\n                }\n            }\n        }\n\n        ll ans = 0;\n        for(auto& cnt: dp[n]){\n            ans += (cnt % MOD);\n        }\n\n        return static_cast<int>(ans);\n    }\n};\n",
    "submit_ts": 1719070373.0
}