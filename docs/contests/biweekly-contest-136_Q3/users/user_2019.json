{
    "username": "shaswatgusain1",
    "submission": "class Solution {\nprivate:\n    int calculateFlipsForSubGrid(const vector<vector<int>>& grid, int row, int col) {\n        vector<int> subGridElements = {\n            grid[row][col],\n            grid[grid.size() - row - 1][col],\n            grid[row][grid[0].size() - col - 1],\n            grid[grid.size() - row - 1][grid[0].size() - col - 1]\n        };\n        int onesCount = 0;\n        for (int elem : subGridElements) {\n            onesCount += elem;\n        }\n        return min(onesCount, 4 - onesCount);\n    }\n    \n    void processMiddleRow(const vector<vector<int>>& grid, int& totalFlips, int& unmatchedPairs, int& onesInMiddleRow) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        if (numRows % 2 != 0) {\n            int middleRowIndex = numRows / 2;\n            for (int col = 0; col < numCols / 2; ++col) {\n                updateRowAndColumnStats(grid[middleRowIndex][col], grid[middleRowIndex][numCols - col - 1], totalFlips, unmatchedPairs, onesInMiddleRow);\n            }\n        }\n    }\n    \n    void processMiddleColumn(const vector<vector<int>>& grid, int& totalFlips, int& unmatchedPairs, int& onesInMiddleColumn) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        if (numCols % 2 != 0) {\n            int middleColIndex = numCols / 2;\n            for (int row = 0; row < numRows / 2; ++row) {\n                updateRowAndColumnStats(grid[row][middleColIndex], grid[numRows - row - 1][middleColIndex], totalFlips, unmatchedPairs, onesInMiddleColumn);\n            }\n        }\n    }\n    \n    void processCentralElement(const vector<vector<int>>& grid, int& totalFlips) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        if (numRows % 2 != 0 && numCols % 2 != 0 && grid[numRows / 2][numCols / 2] == 1) {\n            totalFlips += 1;\n        }\n    }\n\n    void updateRowAndColumnStats(int firstElement, int secondElement, int& totalFlips, int& unmatchedPairs, int& onesCount) {\n        if (firstElement != secondElement) {\n            totalFlips += 1;\n            unmatchedPairs += 1;\n        } else {\n            if (firstElement == 1) {\n                onesCount += 1;\n            }\n        }\n    }\n\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        int totalFlips = 0;\n        int unmatchedPairs = 0;\n        int onesInMiddleRow = 0;\n        int onesInMiddleColumn = 0;\n        \n        for (int row = 0; row < numRows / 2; ++row) {\n            for (int col = 0; col < numCols / 2; ++col) {\n                totalFlips += calculateFlipsForSubGrid(grid, row, col);\n            }\n        }\n        \n        processMiddleRow(grid, totalFlips, unmatchedPairs, onesInMiddleRow);\n        processMiddleColumn(grid, totalFlips, unmatchedPairs, onesInMiddleColumn);\n        processCentralElement(grid, totalFlips);\n        \n        if (unmatchedPairs == 0 && (onesInMiddleRow + onesInMiddleColumn) % 2 != 0) {\n            totalFlips += 2;\n        }\n        \n        return totalFlips;\n    }\n};",
    "submit_ts": "1722700143",
    "subm_id": "1343232954"
}