{
    "username": "AnujPanchal2001",
    "submission": "class Solution {\n        private int[] segmentTree;\n\n        public int minimumDifference(int[] nums, int k) {\n            segmentTree = new int[4 * nums.length];\n            return solve(nums, nums.length, k);\n        }\n\n        private int solve(int[] nums, int n, int k) {\n            build(0, n - 1, 0, nums);\n\n            int left = 0;\n            int right = n - 1;\n            int pos = 0;\n            int min = Integer.MAX_VALUE;\n\n            while(pos < n) {\n                //int mid = left + (right - left)/ 2;\n\n                //ans = Math.min(ans, solve(nums, n, k, left));\n\n                right = n - 1;\n                left = pos - 1;\n\n                while(left + 1 < right) {\n                    int mid = left + (right - left)/ 2;\n\n                    int temp = query(pos, mid, 0, n - 1, 0);\n                    if(temp == k) {\n                        left = mid;\n                    }else if(temp > k) {\n                        left = mid;\n                    }else {\n                        right = mid;\n                    }\n                }\n                    min = Math.min(min, Math.abs(query(pos, right, 0, n - 1, 0) - k));\n                if(left != pos - 1) {\n                    min = Math.min(min, Math.abs(query(pos, left, 0, n - 1, 0) - k));\n                }\n                pos++;\n            }\n\n            return min;\n        }\n\n        private int solve(int[] nums, int n, int k, int mid) {\n            int left = 0;\n            int right = mid - 1;\n            int min = Integer.MAX_VALUE;\n\n            while(right < n) {\n                min = Math.min(min, query(right - mid + 1, right, 0, n - 1, 0));\n                right++;\n            }\n            return min;\n        }\n\n        private void build(int ss, int se, int si, int[] arr) {\n            if(ss > se)\n                return;\n            if(ss == se) {\n                segmentTree[si] = arr[ss];\n                return;\n            }\n            int mid = ss + (se - ss)/ 2;\n\n            build(ss, mid, 2 * si + 1, arr);\n            build(mid + 1, se, 2 * si + 2, arr);\n\n            segmentTree[si] = segmentTree[2 * si + 1]\n                    & segmentTree[2 * si + 2];\n        }\n\n        private int query(int qs, int qe, int ss, int se, int si) {\n            if(qs > se || qe < ss)\n                return Integer.MAX_VALUE;\n            if(qs <= ss && qe >= se)\n                return segmentTree[si];\n            int mid = ss + (se - ss)/ 2;\n            return query(qs, qe, ss, mid, 2 * si + 1)\n                    & query(qs, qe, mid + 1, se, 2 * si + 2);\n        }\n    }",
    "submit_ts": 1717300537.0
}