{
    "username": "pranshujain0111",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int handleMiddleElement(vector<vector<int>>& grid, int rows, int cols) {\n        int middleFlips = 0;\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (grid[rows / 2][cols / 2] == 1) {\n                middleFlips += 1;\n            }\n        }\n        return middleFlips;\n    }\n\n    vector<int> calculateEdgeFlips(vector<vector<int>>& grid, int rows, int cols) {\n        vector<int> flipCounts(3, 0);\n\n        if (rows % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int sum = grid[rows / 2][left] + grid[rows / 2][right];\n                flipCounts[sum] += 1;\n                left++;\n                right--;\n            }\n        }\n\n        if (cols % 2 == 1) {\n            int top = 0, bottom = rows - 1;\n            while (top < bottom) {\n                int sum = grid[top][cols / 2] + grid[bottom][cols / 2];\n                flipCounts[sum] += 1;\n                top++;\n                bottom--;\n            }\n        }\n\n        return flipCounts;\n    }\n\n    int determineEdgeFlips(vector<int>& flipCounts) {\n        int edgeFlips = 0;\n        if (flipCounts[2] % 2 == 1) {\n            if (flipCounts[1] > 0) {\n                edgeFlips += flipCounts[1];\n            } else {\n                edgeFlips += 2;\n            }\n        } else {\n            edgeFlips += flipCounts[1];\n        }\n        return edgeFlips;\n    }\n\n    int calculateQuadrantFlips(vector<vector<int>>& grid, int rows, int cols) {\n        int quadrantFlips = 0;\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int topLeft = grid[i][j];\n                int bottomLeft = grid[rows - 1 - i][j];\n                int topRight = grid[i][cols - 1 - j];\n                int bottomRight = grid[rows - 1 - i][cols - 1 - j];\n\n                int sum = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (sum != 0 && sum != 4) {\n                    quadrantFlips += min(sum, 4 - sum);\n                }\n            }\n        }\n        return quadrantFlips;\n    }\n\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int totalFlips = 0;\n\n        totalFlips += handleMiddleElement(grid, rows, cols);\n\n        vector<int> edgeFlipCounts = calculateEdgeFlips(grid, rows, cols);\n        totalFlips += determineEdgeFlips(edgeFlipCounts);\n\n        totalFlips += calculateQuadrantFlips(grid, rows, cols);\n\n        return totalFlips;\n    }\n};\n",
    "submit_ts": "1722699422",
    "subm_id": "1343211149"
}