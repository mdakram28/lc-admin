{
    "username": "devygonzalez",
    "submission": "class Node:\n    def __init__(self):\n        self.end = False\n        self.cost = 0\n        self.children = {}\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        root = Node()\n        def add_word(word, c):\n            curr = root\n            for char in word:\n                if char not in curr.children:\n                    curr.children[char] = Node()\n                curr = curr.children[char]\n            curr.end = True\n            curr.cost = c\n        \n        d = defaultdict(lambda: inf)\n        for i, word in enumerate(words):\n            d[word] = min(d[word], costs[i])\n        for word, c in d.items():\n            add_word(word, c)\n        \n\n\n        @lru_cache(None)\n        def dfs(i):\n            if i == len(target):\n                return 0\n            \n            curr = root\n            minim = inf\n            while i < len(target):\n                if target[i] not in curr.children:\n                    break\n                curr = curr.children[target[i]]\n                if curr.end:\n                    minim = min(minim, curr.cost + dfs(i + 1))\n                i += 1\n            \n            return minim\n        \n        res = dfs(0)\n        if res == inf:\n            return -1\n        return res\n\n\n\n\n",
    "submit_ts": "1720321468",
    "subm_id": "1312323670"
}