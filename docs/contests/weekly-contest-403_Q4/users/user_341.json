{
    "username": "chintsai",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nconst int INF = 100;\n\nclass Solution {\n    int area(vector <vector<int>> &g, int start_row, int end_row, int start_col, int end_col) {\n        int min_row = INF, max_row = 0, min_col = INF, max_col = 0;\n        for (int i = start_row; i <= end_row; i++) {\n            for (int j = start_col; j <= end_col; j++) {\n                if (g[i][j]) {\n                    min_row = min(min_row, i);\n                    min_col = min(min_col, j);\n                    max_row = max(max_row, i);\n                    max_col = max(max_col, j);\n                }\n            }\n        }\n        if (min_row == INF) {\n            return 0;\n        }\n        return (max_row - min_row + 1) * (max_col - min_col + 1);\n    }\n\npublic:\n    int minimumSum(vector <vector<int>> &grid) {\n        int n = grid.size(), m = grid[0].size();\n        int res = n * m;\n        for (int i = 0; i < n - 1; i++) {\n            int top = area(grid, 0, i, 0, m - 1);\n            if (top == 0) continue;\n            for (int j = 0; j < m - 1; j++) {\n                int bottom_left = area(grid, i + 1, n - 1, 0, j);\n                if (bottom_left == 0) continue;\n                int bottom_right = area(grid, i + 1, n - 1, j + 1, m - 1);\n                if (bottom_right == 0) continue;\n                res = min(res, top + bottom_left + bottom_right);\n            }\n        }\n        for (int i = n - 1; i >= 1; i--) {\n            int bottom = area(grid, i, n - 1, 0, m - 1);\n            if (bottom == 0) continue;\n            for (int j = 0; j < m - 1; j++) {\n                int top_left = area(grid, 0, i - 1, 0, j);\n                if (top_left == 0) continue;\n                int top_right = area(grid, 0, i - 1, j + 1, m - 1);\n                if (top_right == 0) continue;\n                res = min(res, bottom + top_left + top_right);\n            }\n        }\n        for (int j = 0; j < m - 1; j++) {\n            int left = area(grid, 0, n - 1, 0, j);\n            if (left == 0) continue;\n            for (int i = 0; i < n - 1; i++) {\n                int top_right = area(grid, 0, i, j + 1, m - 1);\n                if (top_right == 0) continue;\n                int bottom_right = area(grid, i + 1, n - 1, j + 1, m - 1);\n                if (bottom_right == 0) continue;\n                res = min(res, left + top_right + bottom_right);\n            }\n        }\n        for (int j = m - 1; j >= 1; j--) {\n            int right = area(grid, 0, n - 1, j, m - 1);\n            if (right == 0) continue;\n            for (int i = 0; i < n - 1; i++) {\n                int top_left = area(grid, 0, i, 0, j - 1);\n                if (top_left == 0) continue;\n                int bottom_left = area(grid, i + 1, n - 1, 0, j - 1);\n                if (bottom_left == 0) continue;\n                res = min(res, right + top_left + bottom_left);\n            }\n        }\n        for (int i = 0; i < n - 2; i++) {\n            int top = area(grid, 0, i, 0, m - 1);\n            if (top == 0) continue;\n            for (int j = i + 1; j < n - 1; j++) {\n                int middle = area(grid, i + 1, j, 0, m - 1);\n                if (middle == 0) continue;\n                int bottom = area(grid, j + 1, n - 1, 0, m - 1);\n                if (bottom == 0) continue;\n                res = min(res, top + middle + bottom);\n            }\n        }\n        for (int i = 0; i < m - 2; i++) {\n            int left = area(grid, 0, n - 1, 0, i);\n            if (left == 0) continue;\n            for (int j = i + 1; j < m - 1; j++) {\n                int middle = area(grid, 0, n - 1, i + 1, j);\n                if (middle == 0) continue;\n                int right = area(grid, 0, n - 1, j + 1, m - 1);\n                if (right == 0) continue;\n                res = min(res, left + middle + right);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1719113881",
    "subm_id": "541399451"
}