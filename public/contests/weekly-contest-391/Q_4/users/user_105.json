{
    "username": "binary_looper",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        int n = points.size();\n        vector<int> sum(n), diff(n);\n        for (int i = 0; i < n; ++i) {\n            sum[i] = points[i][0] + points[i][1];\n            diff[i] = points[i][0] - points[i][1];\n        }\n        vector<int> prefixMaxSum(n), suffixMaxSum(n), prefixMinSum(n), suffixMinSum(n);\n        vector<int> prefixMaxDiff(n), suffixMaxDiff(n), prefixMinDiff(n), suffixMinDiff(n);\n        partial_sum(sum.begin(), sum.end(), prefixMaxSum.begin(), [](int a, int b){return max(a, b);});\n        partial_sum(diff.begin(), diff.end(), prefixMaxDiff.begin(), [](int a, int b){return max(a, b);});\n        partial_sum(sum.rbegin(), sum.rend(), suffixMaxSum.rbegin(), [](int a, int b){return max(a, b);});\n        partial_sum(diff.rbegin(), diff.rend(), suffixMaxDiff.rbegin(), [](int a, int b){return max(a, b);});\n        partial_sum(sum.begin(), sum.end(), prefixMinSum.begin(), [](int a, int b){return min(a, b);});\n        partial_sum(diff.begin(), diff.end(), prefixMinDiff.begin(), [](int a, int b){return min(a, b);});\n        partial_sum(sum.rbegin(), sum.rend(), suffixMinSum.rbegin(), [](int a, int b){return min(a, b);});\n        partial_sum(diff.rbegin(), diff.rend(), suffixMinDiff.rbegin(), [](int a, int b){return min(a, b);});\n        int minMaxDist = INT_MAX;\n        for (int i = 0; i < n; ++i) {\n            int maxSum = INT_MIN, minSum = INT_MAX, maxDiff = INT_MIN, minDiff = INT_MAX;\n            if (i > 0) {\n                maxSum = max(maxSum, prefixMaxSum[i-1]);\n                maxDiff = max(maxDiff, prefixMaxDiff[i-1]);\n                minSum = min(minSum, prefixMinSum[i-1]);\n                minDiff = min(minDiff, prefixMinDiff[i-1]);\n            }\n            if (i < n - 1) {\n                maxSum = max(maxSum, suffixMaxSum[i+1]);\n                maxDiff = max(maxDiff, suffixMaxDiff[i+1]);\n                minSum = min(minSum, suffixMinSum[i+1]);\n                minDiff = min(minDiff, suffixMinDiff[i+1]);\n            }\n            int potentialMax = max(maxSum - minSum, maxDiff - minDiff);\n            minMaxDist = min(minMaxDist, potentialMax);\n        }\n        return minMaxDist;\n    }\n};"
}