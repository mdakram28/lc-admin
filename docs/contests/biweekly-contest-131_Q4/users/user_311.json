{
    "username": "chetan_saini21",
    "submission": "class Solution {\npublic:\n    \nstruct treeNode\n{\n    int left, right, mx, tot;\n};\n// Segment heelo - Point Update and Range Query\ntreeNode heelo[200100];\nint mxx = 50010;\ntreeNode maxOfTwo(treeNode p1, treeNode p2)\n{\n    treeNode temp;\n    temp.left = p1.left;\n    if(p1.tot == p1.left && p1.right) temp.left += p2.left;\n    temp.right = p2.right;\n    if(p2.tot == p2.right && p2.left) temp.right += p1.right;\n    temp.mx = max({p1.mx, p2.mx, p1.right + p2.left});\n    temp.tot = p1.tot + p2.tot;\n    return temp;\n}\n\ntreeNode freeNode(int val)\n{\n    treeNode temp;\n    temp.left = val;\n    temp.right = val;\n    temp.mx = val;\n    temp.tot = val;\n    return temp;\n}\ntreeNode fuckedNode()\n{\n    treeNode temp;\n    temp.left = 1;\n    temp.right = 0;\n    temp.mx = 1;\n    temp.tot = 1;\n    return temp;\n}\n\nvoid build(int node, int start, int end)\n{\n    if (start == end)\n    {\n        heelo[node] = freeNode(1);\n    }\n    else\n    {\n        int mid = (start + end) / 2;\n        build(2 * node, start, mid);\n        build(2 * node + 1, mid + 1, end);\n        heelo[node] = maxOfTwo(heelo[2 * node], heelo[2 * node + 1]);\n    }\n}\nvoid update(int node, int start, int end, int idx)\n{\n    if (start == end)\n    {\n        heelo[node] = fuckedNode();\n    }\n    else\n    {\n        int mid = (start + end) / 2;\n        if (start <= idx and idx <= mid)\n        {\n            update(2 * node, start, mid, idx);\n        }\n        else\n        {\n            update(2 * node + 1, mid + 1, end, idx);\n        }\n        heelo[node] = maxOfTwo(heelo[2 * node], heelo[2 * node + 1]);\n    }\n}\ntreeNode query(int node, int start, int end, int l, int r)\n{\n    if (r < start or end < l)\n    {\n        return freeNode(0);\n    }\n    if (l <= start and end <= r)\n    {\n        return heelo[node];\n    }\n    int mid = (start + end) / 2;\n    treeNode p1 = query(2 * node, start, mid, l, r);\n    treeNode p2 = query(2 * node + 1, mid + 1, end, l, r);\n    return maxOfTwo(p1, p2);\n}\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        build(1, 1, mxx);\n        for(auto x : queries)\n        {\n            int type, pos, sz;\n            type = x[0], pos = x[1];\n            if(type == 1)\n            {\n                update(1, 1, mxx, pos);\n                // for(int i = 1; i <= 6; i++)\n                // {\n                //     cout << i << \" -> \" << endl;\n                //     cout << heelo[i].left << endl;\n                //     cout << heelo[i].right << endl;\n                //     cout << heelo[i].mx << endl;\n                //     cout << heelo[i].tot << endl;\n                // }\n            }\n            else \n            {\n                sz = x[2];\n                treeNode cur = query(1, 1, mxx, 1, pos);\n                // cout << cur.left << endl;\n                //     cout << cur.right << endl;\n                //     cout << cur.mx << endl;\n                //     cout << cur.tot << endl;\n                ans.push_back(cur.mx >= sz);\n            }\n        }\n        // cout << endl;\n        return ans;\n    }\n};",
    "submit_ts": "1716651983",
    "subm_id": "1267653195"
}