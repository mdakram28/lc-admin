{
    "username": "pikapika123",
    "submission": "from typing import List\n\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n1, n2 = len(edges1) + 1, len(edges2) + 1\n        g1, g2 = {i: [] for i in range(n1)}, {i: [] for i in range(n2)}\n        for max1, max2 in edges1:\n            g1[max1].append(max2)\n            g1[max2].append(max1)\n        for max1, max2 in edges2:\n            g2[max1].append(max2)\n            g2[max2].append(max1)\n\n        def solve(g, n):\n            def bfs(start):\n                q = [start]\n                visited = [False] * n\n                visited[start] = True\n                farthest = start\n                h = 0\n                while q:\n                    newQ = []\n                    for u in q:\n                        for v in g[u]:\n                            if not visited[v]:\n                                newQ.append(v)\n                                visited[v] = True\n                                farthest = v\n                    q = newQ\n                    h += 1\n                return farthest, h\n\n            def bfs2(start):\n                d = [0] * n\n                q = [start]\n                visited = [False] * n\n                visited[start] = True\n                h = 1\n                d[start] = h\n                while q:\n                    newQ = []\n                    for u in q:\n                        for v in g[u]:\n                            if not visited[v]:\n                                newQ.append(v)\n                                visited[v] = True\n                                d[v] = h + 1\n                    q = newQ\n                    h += 1\n                return d\n\n            v1, h = bfs(0)\n            v2, h = bfs(v1)\n            d1, d2 = bfs2(v1), bfs2(v2)\n            d = [max(d1[i], d2[i]) for i in range(n)]\n            return h, d\n\n        max1, d1 = solve(g1, n1)\n        max2, d2 = solve(g2, n2)\n        return max(min(d1) + min(d2), max1, max2) - 1",
    "submit_ts": 1719719928.0
}