{
    "username": "Paarth",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n     int m = board.size();\n        int n = board[0].size();\n\n        vector<vector<int>> bestCols(m, vector<int>(3, INT_MIN));\n        vector<vector<int>> bestColIdx(m, vector<int>(3, -1));\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> colVals;\n            for (int j = 0; j < n; ++j) {\n                colVals.push_back({board[i][j], j});\n            }\n            sort(colVals.rbegin(), colVals.rend());\n            for (int k = 0; k < min(3, n); ++k) {\n                bestCols[i][k] = colVals[k].first;\n                bestColIdx[i][k] = colVals[k].second;\n            }\n        }\n\n        long long maxSum = LLONG_MIN;\n        for (int i = 0; i < m; ++i) {\n            for (int j = i + 1; j < m; ++j) {\n                for (int k = j + 1; k < m; ++k) {\n                    for (int c1 = 0; c1 < 3; ++c1) {\n                        for (int c2 = 0; c2 < 3; ++c2) {\n                            if (bestColIdx[i][c1] == bestColIdx[j][c2]) continue;\n                            for (int c3 = 0; c3 < 3; ++c3) {\n        if (bestColIdx[i][c1] == bestColIdx[k][c3] || bestColIdx[j][c2] == bestColIdx[k][c3]) continue;\n        long long sum = static_cast<long long>(bestCols[i][c1]) + bestCols[j][c2] + bestCols[k][c3];\n                                maxSum = max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723906201",
    "subm_id": "1359040505"
}