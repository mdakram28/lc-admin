{
    "username": "leo8591",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.min_cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.min_cost = min(node.min_cost, cost)\n\nclass Solution:\n    def minimumCost(self, target, words, costs):\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Build the trie with words and their costs\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        # Update dp array using the trie\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # If we can't reach this position, skip it\n\n            # Use trie to find all substrings starting from position i\n            node = trie.root\n            for j in range(i, n):\n                char = target[j]\n                if char not in node.children:\n                    break\n                node = node.children[char]\n                if node.min_cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.min_cost)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322217",
    "subm_id": "1312343882"
}