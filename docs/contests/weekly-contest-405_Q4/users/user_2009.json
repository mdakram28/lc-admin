{
    "username": "Samuel3Shin",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.minCost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for c in word:\n            index = ord(c) - ord('a')\n            if not node.children[index]:\n                node.children[index] = TrieNode()\n            node = node.children[index]\n        node.minCost = min(node.minCost, cost)\n\n    def getCandidates(self, target, startPos):\n        candidates = []\n        node = self.root\n        for i in range(startPos, len(target)):\n            index = ord(target[i]) - ord('a')\n            if not node.children[index]:\n                break\n            node = node.children[index]\n            if node.minCost != float('inf'):\n                candidates.append((i + 1, node.minCost))\n        return candidates\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        N = len(target)\n        dp = [float('inf')] * (N + 1)\n        dp[0] = 0\n\n        trie = Trie()\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n\n        for i in range(N):\n            if dp[i] == float('inf'):\n                continue\n            candidates = trie.getCandidates(target, i)\n            for newPos, cost in candidates:\n                if dp[newPos] > dp[i] + cost:\n                    dp[newPos] = dp[i] + cost\n\n        return -1 if dp[N] == float('inf') else dp[N]\n",
    "submit_ts": "1720324399",
    "subm_id": "1312398558"
}