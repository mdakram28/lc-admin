{
    "username": "Swashbuckler12",
    "submission": "class SegTree { \npublic: \n    vector<int> Tree; \n    int n; \n    \n    SegTree(vector<int>& nums) \n    { \n        n = nums.size(); \n        Tree.resize(4 * n); \n        buildTree(0, nums, 0, n - 1); \n    } \n\n    void buildTree(int node,vector<int>& nums, int rangeStart, int rangeEnd) \n    { \n        if (rangeStart == rangeEnd) { \n            Tree[node] = nums[rangeStart]; \n        } \n        else { \n            int midRange = (rangeStart + rangeEnd) / 2; \n            buildTree(2 * node + 1,nums, rangeStart, midRange); \n            buildTree(2 * node + 2,nums, midRange + 1, rangeEnd); \n            Tree[node] = Tree[2 * node + 1] & Tree[2 * node + 2]; \n        } \n    } \n\n    int getQuery(int l, int r) \n    { \n        return solveQuery(0, 0, n - 1, l, r); \n    } \n\n    int solveQuery(int node, int rangeStart, int rangeEnd, int l, int r) \n    { \n        if (l <= rangeStart && rangeEnd <= r) { \n            return Tree[node]; \n        } \n        else if (r < rangeStart || rangeEnd < l) { \n            return INT_MAX; \n        } \n        int midRange = (rangeStart + rangeEnd) / 2; \n        int x= solveQuery(2 * node + 1, rangeStart, midRange, l, r); \n        int y = solveQuery(2 * node + 2, midRange + 1, rangeEnd, l, r); \n        int finalVal=x&y;\n        return finalVal; \n    } \n}; \n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        SegTree s(nums); \n        int mini = INT_MAX; \n        for (int i = 0; i < n; i++) { \n            int lo = i - 1, hi = n - 1; \n            while (hi - lo > 1) { \n                int midVal = (lo + hi) / 2; \n                if (s.getQuery(i, midVal) < k){\n                    hi=midVal;\n                } \n                else{\n                    lo=midVal;\n                } \n            } \n            if (lo == i - 1){ \n                mini = min(mini, abs(k - s.getQuery(i, hi))); \n            }\n            else{\n                mini = min(mini, abs(s.getQuery(i, lo) - k));\n                mini = min(mini, abs(k - s.getQuery(i, hi)));\n            }\n        } \n        set<int> st;\n        map<int,int> m;\n        for(int i=0;i<n;i++){\n            st.insert(nums[i]);\n            m[nums[i]]++;\n        }\n        while(!st.empty()){\n            st.erase(st.begin());\n        }\n        return mini; \n    }\n};",
    "submit_ts": 1717300390.0
}