{
    "username": "yh157612",
    "submission": "\n\n#[derive(Default)]\nstruct Node {\n    l: usize,\n    r: usize,\n    val: i64,\n    val_l: i64,\n    val_r: i64,\n    val_lr: i64,\n    left: Option<Box<Node>>,\n    right: Option<Box<Node>>,\n}\n\nfn build(nums: &[i32], l: usize, r: usize) -> Node {\n    if r == l + 1 {\n        return Node {\n            l: l,\n            r: r,\n            val: (nums[l] as i64).max(0),\n            val_l: 0,\n            val_r: 0,\n            val_lr: 0,\n            left: None,\n            right: None,\n        };\n    }\n    let mid = (l + r) / 2;\n    let left = build(nums, l, mid);\n    let right = build(nums, mid, r);\n    Node {\n        l: l,\n        r: r,\n        val: (left.val + right.val_l).max(left.val_r + right.val),\n        val_l: (left.val_l + right.val_l).max(left.val_lr + right.val),\n        val_r: (left.val + right.val_lr).max(left.val_r + right.val_r),\n        val_lr: (left.val_l + right.val_lr).max(left.val_lr + right.val_r),\n        left: Some(Box::new(left)),\n        right: Some(Box::new(right)),\n    }\n}\n\nfn update(node: &mut Node, pos: usize, x: i64) {\n    if node.r == node.l + 1 {\n        node.val = x.max(0);\n        return;\n    }\n    let left = node.left.as_deref_mut().unwrap();\n    if pos >= left.l && pos < left.r {\n        update(left, pos, x);\n    }\n    let right = node.right.as_deref_mut().unwrap();\n    if pos >= right.l && pos < right.r {\n        update(right, pos, x);\n    }\n    node.val = (left.val + right.val_l).max(left.val_r + right.val);\n    node.val_l = (left.val_l + right.val_l).max(left.val_lr + right.val);\n    node.val_r = (left.val + right.val_lr).max(left.val_r + right.val_r);\n    node.val_lr = (left.val_l + right.val_lr).max(left.val_lr + right.val_r);\n}\n\nimpl Solution {\n    pub fn maximum_sum_subsequence(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> i32 {\n        let mut root = build(&nums, 0, nums.len());\n        let mut result = 0;\n        for q in &queries {\n            let pos = q[0];\n            let x = q[1];\n            update(&mut root, pos as usize, x as i64);\n            result = (result + root.val) % 1000000007;\n        }\n        result as i32\n    }\n}",
    "submit_ts": 1716693455.0
}