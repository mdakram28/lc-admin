{
    "username": "raincoat911",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        root.resize(circles.size());\n        iota(root.begin(), root.end(), 0);\n        this->X = X;\n        this->Y = Y;\n        for (int i = 0; i < circles.size(); i++) {\n            if (g(circles[i])) return false;\n            for (int j = 0; j < i; j++) {\n                if (f(circles[i], circles[j])) uf(i, j);\n            }\n        }\n        vector<array<bool, 4>> arr(circles.size());\n        for (int i = 0; i < circles.size(); i++) {\n            auto& c = circles[i];\n            bool x0 = gx0(c), x1 = gx1(c), y0 = gy0(c), y1 = gy1(c);\n            // cout << x0 << \" \" << x1 << \" \" << y0 << \" \" << y1 << endl; \n            int r = find(i);\n            // cout << r << endl;\n            arr[r][0] = arr[r][0] || x0;\n            arr[r][1] = arr[r][1] || x1;\n            arr[r][2] = arr[r][2] || y0;\n            arr[r][3] = arr[r][3] || y1;\n            if (arr[r][0] && arr[r][1] || arr[r][2] && arr[r][3] || arr[r][0] && arr[r][2] || arr[r][1] && arr[r][3]) return false;\n        }\n        return true;\n    }\n\nprivate:\n    vector<int> root;\n    int X, Y;\n\n    int find(int p) {\n        while (p != root[p]) p = root[p] = root[root[p]];\n        return p;\n    }\n\n    void uf(int p, int q) {\n        int rp = find(p), rq = find(q);\n        if (rp == rq) return;\n        root[rp] = rq;\n    }\n\n    bool f(vector<int>& a, vector<int>& b) {\n        return ((long)a[0] - b[0]) * (a[0] - b[0]) + ((long)a[1] - b[1]) * (a[1] - b[1]) <= ((long)a[2] + b[2]) * ((long)a[2] + b[2]);\n    }\n\n    bool g(vector<int>& a) {\n        long x = a[0], y = a[1], r = a[2];\n        return (x * x) + (y * y) <= r * r || (x - X) * (x - X) + (y - Y) * (y - Y) <= r * r;\n    }\n\n    bool gx0(vector<int>& a) {\n        long x = a[0], y = a[1], r = a[2];\n        if (r < y) return false;\n        long t2 = r * r - y * y;\n        // double t = sqrt(r * r - y * y);\n        double t = sqrt(t2);\n        return x - t >= -1e-10 && x - t <= X + 1e-10 || x + t <= X + 1e-10;\n        // 0 <= x - t <= X, x + t <= X\n        // return t2 >= (x - X) * (x - X) && t2 <= x * x || t2 <= (X - x) * (X - x);\n    }\n\n    bool gx1(vector<int>& a) {\n        long x = a[0], y = a[1], r = a[2];\n        if (r < abs(y - Y)) return false;\n        long t2 = r * r - (y - Y) * (y - Y);\n        // double t = sqrt(r * r - (r - Y) * (r - Y));\n        double t = sqrt(t2);\n        // x - t, x + t\n        // cout << t2 << endl\n        // cout << t << \" \" << x - t << \" \" << x + t << endl;\n\n        return x - t >= -1e-10 && x - t <= X + 1e-10 || x + t <= X + 1e-10;\n        // return t2 >= (x - X) * (x - X) && t2 <= x * x || t2 <= (X - x) * (X - x);\n    }\n\n    bool gy0(vector<int>& a) {\n        long x = a[0], y = a[1], r = a[2];\n        if (r < x) return false;\n        long t2 = r * r - x * x;\n        double t = sqrt(t2);\n        // 0 <= y - t, y + t <= Y\n        // cout << t << \" \" << y - t << \" \" << y + t << \" \"<< (y - t >= -1e-10 && y - t <= Y + 1e-10 || y + t <= Y + 1e-10) << endl;\n        return y - t >= -1e-10 && y - t <= Y + 1e-10 || y + t <= Y + 1e-10;\n        // return t2 >= (y - Y) * (y - Y) && t2 <= y * y || t2 <= (Y - y) * (Y - y);\n    }\n\n    bool gy1(vector<int>& a) {\n        long x = a[0], y = a[1], r = a[2];\n        // cout << r << \" \" << abs(x - X) << endl;\n        if (r < abs(x - X)) return false;\n        long t2 = r * r - (x - X) * (x - X);\n        double t = sqrt(t2);\n        // cout << t2 << endl;\n        // 0 <= y - t, y + t <= Y\n        // cout << y - t << \" \" << y + t << \" \" << (y - t >= -1e-10 && y - t <= Y + 1e-10) << endl;\n        return y - t >= -1e-10 && y - t <= Y + 1e-10 || y + t <= Y + 1e-10;\n        // return t2 >= (y - Y) * (y - Y) && t2 <= y * y || t2 <= (Y - y) * (Y - y);\n    }\n\n\n};",
    "submit_ts": "1722137768",
    "subm_id": "1335773166"
}