{
    "username": "satya_2804",
    "submission": "import math\nimport sys\nimport collections\nimport random\n\nstrl   =lambda: list(input().strip())\nmul    =lambda: map(int,input().strip().split())\nmulf   =lambda: map(float,input().strip().split())\nseq    =lambda: list(map(int,input().strip().split()))\n\n\nceil   =lambda x: int(x) if(x==int(x)) else int(x)+1\nceildiv=lambda x,d: x//d if(x%d==0) else x//d+1\n\ndef max_subarray_sum(arr):\n    max_sum = -sys.maxsize\n    current_sum = 0\n\n    for num in arr:\n        current_sum = max(num, current_sum + num)\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n    \nmod=1000000007\n\ndef count_frequency(arr):\n    frequency_counter = collections.Counter(arr)\n    return frequency_counter\n    \ndef suffix_array(s):\n    n = len(s)\n    ascii_values = list(map(ord, s))\n    max_value = max(ascii_values) + 3\n\n    # Initialize buckets and populate them\n    buckets = [0] * max_value\n    for x in ascii_values:\n        buckets[x + 1] += 1\n\n    # Accumulate bucket values\n    for i in range(1, max_value):\n        buckets[i] += buckets[i - 1]\n\n    # Initialize colors and LMS flags\n    colors = [1] * n\n    lms_indices = []\n    is_lms = [False] * (n + 1)\n    is_lms[-1] = True\n\n    # Determine colors and LMS indices\n    for i in range(n - 2, -1, -1):\n        if ascii_values[i] < ascii_values[i + 1]:\n            colors[i] = 0\n        elif ascii_values[i] == ascii_values[i + 1]:\n            colors[i] = colors[i + 1]\n        if colors[i] and not colors[i + 1]:\n            lms_indices.append(i + 1)\n            is_lms[i + 1] = True\n\n    lms_indices = lms_indices[::-1]\n    return {\n        'n': n,\n        'ascii_values': ascii_values,\n        'max_value': max_value,\n        'buckets': buckets,\n        'colors': colors,\n        'lms_indices': lms_indices,\n        'is_lms': is_lms\n    }\ndef sn(sk, bablu):\n    apple = bablu * (bablu + 1) // 2\n    reql = apple + (bablu - 1)\n    \n    return sk >= reql\n\n\n\nclass Solution:\n    def minFlips(self, bablu: List[List[int]]) -> int:\n\n        satya, ba = len(bablu), len(bablu[0])\n        sn = 0\n\n        if satya % 2 == 1 and ba % 2 == 1:\n            sn += bablu[satya // 2][ba // 2]\n\n        ap = [0] * 3\n        if ba % 2 == 1:\n            ra, sriram = 0, satya - 1\n            while ra < sriram:\n                sk = bablu[ra][ba // 2] + bablu[sriram][ba // 2]\n                sriram -= 1\n                ra += 1\n                ap[sk] += 1\n        if satya % 2 == 1:\n            ra, sriram = 0, ba - 1\n            while ra < sriram:\n                sk = bablu[satya // 2][ra] + bablu[satya // 2][sriram]\n                sriram -= 1\n                ra += 1\n                ap[sk] += 1\n\n        if ap[2] % 2 == 1:\n            sn += ap[1] if ap[1] > 0 else 2\n        elif ap[2] % 2 != 1:\n            sn += ap[1]\n\n        for ra in range(satya // 2):\n            for sriram in range(ba // 2):\n                sk, vikram, likith, rakesh = bablu[ra][sriram], bablu[satya - 1 - ra][sriram], bablu[ra][ba - 1 - sriram], bablu[satya - 1 - ra][ba - 1 - sriram]\n                sm = sk + vikram + likith + rakesh\n                if sm != 0 and sm != 4:\n                    sn += min(4-sm, sm)\n\n        return sn % 10000000000017",
    "submit_ts": "1722700101",
    "subm_id": "1343231715"
}