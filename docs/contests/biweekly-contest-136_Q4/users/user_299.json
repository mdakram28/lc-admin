{
    "username": "kaname_asuka",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        tree = [[] for _ in range(n)]\n        for u, v in edges:\n            tree[u].append(v)\n            tree[v].append(u)\n        dist = [0] * n\n        def dfs(u, p):\n            for v in tree[u]:\n                if v == p:\n                    continue\n                if v % 2 == 1:\n                    val = 1\n                else:\n                    val = 2\n                dist[u] = max(dist[u], val + dfs(v, u))\n            return dist[u]\n        dfs(0, -1)\n        times = [0] * n\n        for i in range(n):\n            times[i] = dist[i]\n        others = [0] * n\n        def dfs2(u, p):\n            max_val, sec_max = 0, 0\n            for v in tree[u]:\n                if v == p:\n                    continue\n                if v % 2 == 1:\n                    val = 1\n                else:\n                    val = 2\n                if val + dist[v] >= max_val:\n                    sec_max = max_val\n                    max_val = val + dist[v]\n                elif val + dist[v] > sec_max:\n                    sec_max = dist[v] + val\n            for v in tree[u]:\n                if v == p:\n                    continue\n                if v % 2 == 1:\n                    par_val_v = 1\n                else:\n                    par_val_v = 2\n                if dist[v] + par_val_v  == max_val:\n                    val = sec_max\n                else:\n                    val = max_val\n                if u % 2 == 1:\n                    par_val_u = 1\n                else:\n                    par_val_u = 2\n                others[v] = par_val_u + max(others[u], val)\n                times[v] = max(times[v], others[v])\n                dfs2(v, u)\n        dfs2(0, -1)\n        return times",
    "submit_ts": "1722700614",
    "subm_id": "1343247269"
}