{
    "username": "Adaaaaa12345",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n    \n        trie = Trie()\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n        \n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  \n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue \n            node = trie.root\n            for j in range(i, n):\n                char = target[j]\n                if char not in node.children:\n                    break \n                node = node.children[char]\n                if node.is_end_of_word:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322205",
    "subm_id": "1312343573"
}