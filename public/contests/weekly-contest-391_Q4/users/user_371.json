{
    "username": "fugally787",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        sums = []\n        diffs = []\n        for i,pair in enumerate(points):\n            sums.append([sum(pair),i])\n            diffs.append([pair[0]-pair[1],i])\n        sums.sort()\n        diffs.sort()\n        \n        ans = float('inf')\n        \n        def MaxDist(A):\n            N=len(A)\n            V = [0 for i in range(N)]\n            V1 = [0 for i in range(N)]\n\n            for i in range(N):\n                V[i] = A[i][0] + A[i][1]\n                V1[i] = A[i][0] - A[i][1]\n\n            V.sort()\n            V1.sort()\n\n            maximum = max(V[-1] - V[0],\n                          V1[-1] - V1[0])\n            return maximum\n        \n        def getnewarr(i,arr):\n            return arr[:i] + arr[i+1:]\n        \n        for item in sums[0],sums[-1],diffs[0],diffs[-1]:\n            ans =  min(ans, MaxDist(getnewarr(item[1],points)))\n        return ans\n            \n        \n        '''\n        Ok now how does that change if we remove a point\n        \n        it has to be one of the points on the ends\n        \n        So additionally store their indices\n        \n        And just retry without that index\n        \n        Take the best result\n        \n        \n        \n        \n        \n        need to def remove one point involved in some occurence of a current longest max distance\n        \n        sort by x add in y bisect?\n        \n        THAT'S ONE approach\n        \n        also bin on answer\n        \n        if we sort by x\n        \n        and add the y in bisecting \n        \n        \n        \n        approach 2 is\n        try removing each point\n        \n        see what happens\n        \n        how to know max after removal\n        \n        or from each point, can we find point that is furthest from it in better than oN\n        \n        maybe if we add them in two directions\n        \n        first inc x and inc y\n        \n        second inc x and dec y\n        \n        \n        then we always can for the new one we add\n        \n        we know new \n        '''"
}