{
    "username": "muraliflash24",
    "submission": "\n#include <vector>\n#include <unordered_map>\n#include <utility>\n#include <string>\n#include <limits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> end_positions;\n\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insertWord(string word, int index, int cost) {\n        TrieNode* current = root;\n        for (char ch : word) {\n            if (!current->children.count(ch)) {\n                current->children[ch] = new TrieNode();\n            }\n            current = current->children[ch];\n        }\n        current->end_positions.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> min_cost(n + 1, numeric_limits<int>::max());\n        min_cost[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (min_cost[i] == numeric_limits<int>::max()) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) {\n                    break;\n                }\n                node = node->children[target[j]];\n                for (auto& p : node->end_positions) {\n                    int word_length = words[p.first].size();\n                    if (i + word_length <= n) {\n                        min_cost[i + word_length] = min(min_cost[i + word_length], min_cost[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return min_cost[n] == numeric_limits<int>::max() ? -1 : min_cost[n];\n    }\n};\n",
    "submit_ts": "1720323996",
    "subm_id": "1312389105"
}