{
    "username": "nihar_25",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> vCut(verticalCut.begin(), verticalCut.end());\n        priority_queue<int> hCut(horizontalCut.begin(), horizontalCut.end());\n        \n        long long timesVertical = 1, timesHorizontal = 1, ans = 0;\n        while (!vCut.empty() && !hCut.empty()) {\n            int v = vCut.top(), h = hCut.top();\n            if (v > h) {\n                vCut.pop();\n                ans += v * timesVertical;\n                timesHorizontal++;\n                \n            } else {\n                hCut.pop();\n                ans += h * timesHorizontal;\n                timesVertical++;\n            }\n        }\n        while (!vCut.empty()) {\n            int v = vCut.top();\n            vCut.pop();\n            ans += v * timesVertical;\n        }\n        while (!hCut.empty()) {\n            int h = hCut.top();\n            hCut.pop();\n            ans += h * timesHorizontal;\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1720925580",
    "subm_id": "1320259435"
}