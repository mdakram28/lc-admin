{
    "username": "vibrant-6angulyta3",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int ans = n * m;\n        \n        auto rotate = [&](vector<vector<int>> grid) -> vector<vector<int>> {\n            int n = grid.size(), m = grid[0].size();\n            vector<vector<int>> ans(m, vector<int>(n));\n            for(int j = 0, ii = 0;j < m;j++, ii++) {\n                for(int i = n - 1, jj = 0;i >= 0;i--, jj++) {\n                    ans[ii][jj] = grid[i][j];\n                }\n            }\n            return ans;\n        };\n        \n        auto solve_two = [&](vector<vector<int>> grid) -> int {\n            int n = grid.size(), m = grid[0].size();\n            int ans = n * m;\n            int l = m + 1, r = 0, t = n + 1, b = 0, c = 0;\n            for(int i = 0;i < n - 1;i++) {\n                for(int j = 0;j < m;j++) {\n                    if(grid[i][j]) {\n                        c++;\n                        l = min(l, j);\n                        r = max(r, j);\n                        t = min(t, i);\n                        b = max(b, i);\n                    }\n                }\n                int L = m + 1, R = 0, T = n + 1, B = 0, C = 0;\n                for(int k = i + 1;k < n;k++) {\n                    for(int j = 0;j < m;j++) {\n                        if(grid[k][j]) {\n                            C++;\n                            L = min(L, j);\n                            R = max(R, j);\n                            T = min(T, k);\n                            B = max(B, k);\n                        }\n                    }\n                }\n                if(c > 0 && C > 0) {\n                    ans = min(ans, (r - l + 1) * (b - t + 1) + (R - L + 1) * (B - T + 1));\n                }\n            }\n            \n            return ans;\n        };\n        \n        auto solve_three = [&](vector<vector<int>> grid) -> int {\n            int n = grid.size(), m = grid[0].size();\n            int l = m + 1 , r = 0, t = n + 1, b = 0, c = 0;\n            int ans = n * m;\n            for(int i = 0;i < n - 1;i++) {\n                for(int j = 0;j < m;j++) {\n                    if(grid[i][j] == 1) {\n                        c++;\n                        l = min(l, j);\n                        r = max(r, j);\n                        t = min(t, i);\n                        b = max(b, i);\n                    }\n                }\n                vector<vector<int>> two(n - i - 1, vector<int>(m));\n                for(int k = i + 1;k < n;k++) {\n                    for(int j = 0;j < m;j++) {\n                        two[k - i - 1][j] = grid[k][j];\n                    }\n                }\n                if(c > 0) {\n                    ans = min(ans, solve_two(two) + (r - l + 1) * (b - t + 1));\n                    two = rotate(two);\n                    ans = min(ans, solve_two(two) + (r - l + 1) * (b - t + 1));\n                }\n            }\n            \n            return ans;\n        };\n        \n        // auto print = [&](vector<vector<int>> g) -> void {\n        //     int n = g.size(), m = g[0].size();\n        //     for(int i = 0;i < n;i++) {\n        //         for(int j = 0;j < m;j++) {\n        //             cout << g[i][j] << \" \";\n        //         }\n        //         cout << \"\\n\";\n        //     }\n        // };\n        \n        \n        // print(grid);\n        ans = min(ans, solve_three(grid));\n        // cout << ans << \"\\n\";\n        grid = rotate(grid);\n        // print(grid);\n        ans = min(ans, solve_three(grid));\n        // cout << ans << \"\\n\";\n        grid = rotate(grid);\n        // print(grid);\n        ans = min(ans, solve_three(grid));\n        // cout << ans << \"\\n\";\n        grid = rotate(grid);\n        // print(grid);\n        ans = min(ans, solve_three(grid));\n        // cout << ans << \"\\n\";\n        \n        return ans;\n    }\n};",
    "submit_ts": "1719112310",
    "subm_id": "541391795"
}