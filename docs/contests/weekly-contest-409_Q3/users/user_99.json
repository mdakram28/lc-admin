{
    "username": "SaveVMK",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        TreeMap<Integer, Integer> ivs = new TreeMap<>();\n        int ql = queries.length;\n        int[] ans = new int[ql];\n        int curr = n-1;\n        for (int i = 0; i < ql; ++i) {\n            int u = queries[i][0];\n            int v = queries[i][1];\n            if (ivs.floorEntry(u) != null && ivs.floorEntry(u).getValue() >= v) {\n                ans[i] = curr;\n                continue;\n            }\n            curr -= v-u-1;\n            while (ivs.ceilingEntry(u)!=null&&ivs.ceilingEntry(u).getValue()<=v) {\n                curr += ivs.ceilingEntry(u).getValue()-ivs.ceilingKey(u)-1;\n                ivs.remove(ivs.ceilingKey(u));\n            }\n            ivs.put(u,v);\n            ans[i] = curr;\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1722739727",
    "subm_id": "1343701662"
}