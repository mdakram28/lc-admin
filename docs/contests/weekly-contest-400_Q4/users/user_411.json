{
    "username": "cynic_8122",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        \n        temparr = [[0 for i in range(32)] for i in range(len(nums))]\n        \n        n = len(nums)\n        \n        for i in range(n):\n            val = nums[i]\n            \n            for j in range(32):\n                mask = 1<<j\n                \n                if mask&val:\n                    temparr[i][j] += 1\n                    \n                \n                if i-1 >= 0:\n                    temparr[i][j] += temparr[i-1][j]\n                    \n        \n        i = 0\n        ans = float('inf')\n        tempand = (1<<32)-1\n        for j in range(n):\n            tempand = tempand&nums[j]\n            \n            while tempand < k and i < j:\n                ans = min(ans, abs(k - tempand))\n                i += 1\n                tempand = self.getAnd(i, j, temparr)\n                \n            ans = min(ans, abs(k - tempand))\n            \n        return ans\n    \n    def getAnd(self, i, j, temparr):\n        count = j - i + 1\n        \n        ans = 0\n        \n        for t in range(32):\n            tempcount = temparr[j][t]\n            if i-1 >= 0:\n                tempcount -= temparr[i-1][t]\n                \n            if tempcount == count:\n                ans = ans|(1<<t)\n                \n        return ans\n                \n            \n                \n            \n            \n                    ",
    "submit_ts": "1717298369",
    "subm_id": "1274776593"
}