{
    "username": "mfk443838746",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> idx;\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->idx.push_back(index);\n    }\n\n    void search(const string& target, int i, vector<int>& dp, const vector<int>& costs) {\n        TrieNode* node = root;\n        for (int j = i; j < target.size(); ++j) {\n            if (node->children.find(target[j]) == node->children.end()) {\n                return;\n            }\n            node = node->children[target[j]];\n            for (int wordIdx : node->idx) {\n                int len = j - i + 1;\n                if (dp[i] != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[wordIdx]);\n                }\n            }\n        }\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            t.search(target, i, dp, costs);\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321115",
    "subm_id": "1312313925"
}