{
    "username": "minhnghia2208",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def helper(A):\n            n = len(A)\n            max_sum_p, min_sum_p = 0, 0\n            max_diff_p, min_diff_p = 0, 0\n            minsum = maxsum = A[0][0] + A[0][1]\n            mindiff = maxdiff = A[0][0] - A[0][1]\n            for i in range(1, n):\n                sum = A[i][0] + A[i][1]\n                diff = A[i][0] - A[i][1]\n                if (sum < minsum):\n                    minsum = sum\n                    min_sum_p = i\n                elif (sum > maxsum):\n                    maxsum = sum\n                    max_sum_p = i\n                if (diff < mindiff):\n                    mindiff = diff\n                    min_diff_p = i\n                elif (diff > maxdiff):\n                    maxdiff = diff\n                    max_diff_p = i\n            diff = max(maxsum - minsum, maxdiff - mindiff)\n            if maxsum-minsum > maxdiff-mindiff:\n                return min_sum_p, max_sum_p, diff\n            return min_diff_p, max_diff_p, diff\n        p1, p2, diff = helper(points)\n        temp_1 = points[:p1]+points[p1+1:]\n        temp_2 = points[:p2]+points[p2+1:]\n        p1, p2, diff1 = helper(temp_1)\n        p1, p2, diff2 = helper(temp_2)\n        return min(diff1, diff2)"
}