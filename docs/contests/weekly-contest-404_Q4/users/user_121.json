{
    "username": "bayarkhuu",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        ma1 = self.dep(edges1)\n        ma2 = self.dep(edges2)\n\n        ans = max(ma1 - 1, ma2 - 1)\n\n        print(ma1, ma2)\n\n        if ma1 > 0 and ma2 > 0:\n            ans = max(ans, (ma1 // 2+ ma2 // 2 + 1))\n\n        return ans\n    \n    def dep(self, edges):\n        n = len(edges) + 1\n        conn = defaultdict(list)\n        for x, y in edges:\n            conn[x].append(y)\n            conn[y].append(x)\n\n        def visit(k, v, depth, conn):\n            v[k] = depth \n            for node in conn[k]:\n                if v[node] == 0:\n                    visit(node, v, depth + 1, conn)\n                    \n        v = [0] * n\n        visit(0, v, 1, conn)\n\n        ma = 0\n        inde = 0\n        for i in range(n):\n            if v[i] > ma:\n                ma = v[i]\n                inde = i\n        \n        v = [0] * n\n        visit(inde, v, 1, conn)\n        \n        ma = 0\n        inde = 0\n        for i in range(n):\n            if v[i] > ma:\n                ma = v[i]\n        \n        return ma",
    "submit_ts": 1719716617.0
}