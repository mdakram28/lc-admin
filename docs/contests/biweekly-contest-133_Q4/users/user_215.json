{
    "username": "qb_2008",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        sort(requirements.begin(), requirements.end());\n        int max_count = requirements.back()[1];\n        vector<vector<int>> dp(n, vector<int>(max_count + 1, 0));\n        dp[0][0] = 1;\n        int req_i = 0;\n        int MOD = 1000000007;\n        if (requirements[0][0] == 0) {\n            if (requirements[0][1] != 0) {\n                return 0;\n            }\n            req_i++;\n        }\n        // dp[0][0] = 1  // 2 2\n        // dp[1][0] = 1 dp[1][1] = 1 dp[1][2] = 1.  (max add i, a window of i)\n        // dp[2][0] = 1 dp[2][1] = 2 dp[2][2] = 2\n        for (int i = 1; i < n; i++) {\n            int64_t sum = 0;\n            int max_j = requirements[req_i][1];\n            int window = i + 1;\n            bool update_all = (i < requirements[req_i][0]);\n            for (int j = 0; j <= max_j; j++) {\n                sum += dp[i-1][j];\n                if (j >= window) {\n                    sum -= dp[i-1][j - window];  // j, j -1, j - window\n                }\n                if (update_all) {\n                    dp[i][j] = sum % MOD;\n                }\n            }\n            if (!update_all) {\n                dp[i][max_j] = sum % MOD;\n                req_i++;\n            }\n        }\n        return dp[n - 1][max_count];\n    }\n};",
    "submit_ts": "1719069645",
    "subm_id": "1296802449"
}