{
    "username": "huanli01008",
    "submission": "class Solution {\n    Trie dict = new Trie();\n    int[] memo;\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = words.length;\n        for(int i = 0; i < n; i++){\n            dict.add(words[i], costs[i]);\n        }\n        memo = new int[target.length()];\n        Arrays.fill(memo, -1);\n        int ans = fill(target, 0);\n        return ans == Integer.MAX_VALUE ? -1 : ans;\n    }\n    public int fill(String tar, int i){\n        int n = tar.length();\n        if(i == n) return 0;\n        if(memo[i] != -1) return memo[i];\n        int res = Integer.MAX_VALUE;\n        Node t = dict.root;\n        for(int j = i; j < n; j++){\n            // String cur = tar.substring(i, j);\n            // if(!dict.isPrefix(cur)) break;\n            // int curCost = dict.isWord(cur);\n            if(t.children[tar.charAt(j) - 'a'] == null) break;\n            t = t.children[tar.charAt(j) - 'a'];\n            if(t.isWord){\n                int tmp = fill(tar, j + 1);\n                if(tmp != Integer.MAX_VALUE){\n                    res = Math.min(t.cost + tmp, res);\n                }\n            }\n            \n        }\n        memo[i] = res;\n        return res;\n    }\n}\nclass Node{\n    Node[] children = new Node[26];\n    boolean isWord = false;\n    int cost = -1;\n}\nclass Trie{\n    Node root;\n    public Trie(){\n        this.root = new Node();\n    }\n    public void add(String s, int cost){\n        Node t = root;\n        for(char c : s.toCharArray()){\n            if(t.children[c - 'a'] == null){\n                t.children[c - 'a'] = new Node();\n            }\n            t = t.children[c - 'a'];\n        }\n        if(t.isWord){\n            t.cost = Math.min(t.cost, cost);\n        }else{\n            t.isWord = true;\n            t.cost = cost;\n        }\n        \n    }\n    // public boolean isPrefix(String s){\n    //     Node t = root;\n    //     for(char c : s.toCharArray()){\n    //         if(t.children[c - 'a'] == null) return false;            \n    //         t = t.children[c - 'a'];\n    //     }\n    //     return true;\n    // }\n    // public int isWord(String s){\n    //     Node t = root;\n    //     for(char c : s.toCharArray()){\n    //         if(t.children[c - 'a'] == null) return -1;            \n    //         t = t.children[c - 'a'];\n    //     }\n        \n    //     return t.isWord ? t.cost : -1;\n    // }\n}",
    "submit_ts": "1720324307",
    "subm_id": "1312396375"
}