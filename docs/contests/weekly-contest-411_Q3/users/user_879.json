{
    "username": "Albert_Zhang",
    "submission": "\"\"\" === Method 1. case by case\n1. Since 1 <= k <= 9, we only need to consider a few cases.\n2-1. If k = 1 or 3 or 9, then the largest palindrome is \"999...999\" (a total of n 9s).\n2-2. If k = 5, then the largest palindrome is \"599999999...99995\". Consider edge case 5, 55.\n2-3. If k = 2, then it is \"89999...9998\". Consider edge case for 8, 88.\n2-4. If k = 4, then it is \"88999.9988\". Consider edge case for 8, 88, 888, 8888.\n2-5. If k = 8, then it is \"888999.99888\". Consider edge case for 8, 88, 888, 8888.\n2-6. If k = 6, then it is either \"8999..989..9998\" (n is odd), or \"8999..997799..9998\" (n is even).\n    Consider edge case for 6, 66, 888, 8778.\n2-7. If k = 7, .... Consider edge case for 7, 77, 959.\n\"\"\"\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k in (1, 3, 9):\n            return \"9\" * n\n        if k == 5:\n            return self.get5(n)\n        if k == 2:\n            return self.get2(n)\n        if k == 4:\n            return self.get4(n)\n        if k == 8:\n            return self.get8(n)\n        if k == 6:\n            return self.get6(n)\n        if k == 7:\n            return self.get7(n)\n\n    def get2(self, n):\n        if n <= 2:\n            return \"8\" * n\n        return \"8\" + \"9\" * (n - 2) + \"8\"\n\n    def get4(self, n):\n        if n <= 4:\n            return \"8\" * n\n        return \"88\" + \"9\" * (n - 4) + \"88\"\n\n    def get5(self, n):\n        if n <= 2:\n            return \"5\" * n\n        return \"5\" + \"9\" * (n - 2) + \"5\"\n\n    def get6(self, n):\n        if n <= 2:\n            return \"6\" * n\n        if n == 3:\n            return \"888\"\n        if n == 4:\n            return \"8778\"\n        if n % 2 == 1:\n            return \"8\" + \"9\" * ((n - 3) // 2) + \"8\" + \"9\" * ((n - 3) // 2) + \"8\"\n        return \"8\" + \"9\" * ((n - 6) // 2) + \"9779\" + \"9\" * ((n - 6) // 2) + \"8\"\n\n    def get7(self, n):\n        if n <= 2:\n            return \"7\" * n\n        if n == 3:\n            return \"959\"\n        # odd\n        if n % 2 == 1:\n            return self.get7ForOdd(n)\n        return self.get7ForEven(n)\n\n    def get7ForOdd(self, n):\n        # otherValue = int(\"9\" * ((n - 1) // 2) + \"0\" + \"9\" * ((n - 1) // 2))\n        for value in reversed(range(10)):\n            remainder = 0\n            for i in range(n):\n                if i != n // 2:\n                    remainder = (remainder * 10 + 9) % 7\n                else:\n                    remainder = (remainder * 10 + value) % 7\n            # if (otherValue + value * 10 ** ((n - 1) // 2)) % 7 == 0:\n            if remainder == 0:\n                return \"9\" * ((n - 1) // 2) + str(value) + \"9\" * ((n - 1) // 2)\n\n    def get7ForEven(self, n):\n        # otherValue = int(\"9\" * ((n - 2) // 2) + \"00\" + \"9\" * ((n - 2) // 2))\n        for value in reversed(range(10)):\n            # if (otherValue + value * 11 * 10 ** ((n - 2) // 2)) % 7 == 0:\n            remainder = 0\n            for i in range(n):\n                if i not in (n // 2, n // 2 - 1):\n                    remainder = (remainder * 10 + 9) % 7\n                else:\n                    remainder = (remainder * 10 + value) % 7\n            # if (otherValue + value * 10 ** ((n - 1) // 2)) % 7 == 0:\n            if remainder == 0:\n                return \"9\" * ((n - 2) // 2) + str(value) + str(value) + \"9\" * ((n - 2) // 2)\n\n    def get8(self, n):\n        if n <= 6:\n            return \"8\" * n\n        return \"888\" + \"9\" * (n - 6) + \"888\"\n\n\n\n    \n        ",
    "submit_ts": "1723953353",
    "subm_id": "1359819005"
}