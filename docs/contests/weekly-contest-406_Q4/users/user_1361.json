{
    "username": "_Hrmn03",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional> // For std::greater\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        // Combine the horizontal and vertical cuts with their respective types\n        std::vector<std::pair<int, char>> cuts;\n        for (int cost : horizontalCut) {\n            cuts.emplace_back(cost, 'H');\n        }\n        for (int cost : verticalCut) {\n            cuts.emplace_back(cost, 'V');\n        }\n\n        // Sort the cuts in descending order of cost\n        std::sort(cuts.begin(), cuts.end(), std::greater<std::pair<int, char>>());\n\n        long long hPieces = 1; // Initial number of horizontal pieces\n        long long vPieces = 1; // Initial number of vertical pieces\n        long long totalCost = 0;\n\n        // Perform the cuts in the order of their costs\n        for (const auto& cut : cuts) {\n            if (cut.second == 'H') {\n                // Horizontal cut\n                totalCost += cut.first * vPieces;\n                hPieces++;\n            } else {\n                // Vertical cut\n                totalCost += cut.first * hPieces;\n                vPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925608",
    "subm_id": "1320260353"
}