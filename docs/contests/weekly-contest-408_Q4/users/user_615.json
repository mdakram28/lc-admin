{
    "username": "adarsh1662",
    "submission": "class Solution {\npublic:\n    int solve_bfs(vector<vector<int>> &grid, int st, int tar1, int tar2, int temp) {\n        queue<int> q;\n        vector<int> vis(temp + 4, 0);\n        q.push(st);\n        vis[st] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : grid[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[tar1] || vis[tar2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<pair<pair<int, int>, int>> v(circles.size());\n         vector<vector<int>> grid(circles.size() + 4);\n        int size=circles.size();\n        for (int i = 0; i < size; ++i) {\n            v[i].first.first=circles[i][0];\n            v[i].first.second=circles[i][1];\n            v[i].second=circles[i][2];\n        }\n        for (int i = 0; i < size; ++i) {\n            if (v[i].first.first <= v[i].second) {\n                grid[size].push_back(i);\n                grid[i].push_back(size);\n            }\n            if (X - v[i].first.first <= v[i].second) {\n                grid[size + 2].push_back(i);\n                grid[i].push_back(size + 2);\n            }\n            if (v[i].first.second <= v[i].second) {\n                grid[size + 1].push_back(i);\n                grid[i].push_back(size + 1);\n            }\n            if (Y - v[i].first.second <= v[i].second) {\n                grid[size + 3].push_back(i);\n                grid[i].push_back(size + 3);\n            }\n            for (int j = i + 1; j < size; ++j) {\n                int f = v[i].first.first - v[j].first.first;\n                int s = v[i].first.second - v[j].first.second;\n                double temp = pow(f, 2) + pow(s, 2);\n                double distance = sqrt(temp);\n                int radius_sum = v[i].second + v[j].second;\n                if (radius_sum >= distance) {\n                    grid[i].push_back(j);\n                    grid[j].push_back(i);\n                }\n            }\n        }\n        \n        int maxi = 0;\n\n        maxi = max(maxi, solve_bfs(grid, size, size + 1, size + 2, size + 4)); \n        maxi = max(maxi, solve_bfs(grid, size + 3, size + 2, size + 1, size + 4));\n\n            if (maxi)return false;\n            return true;\n\n    }\n};",
    "submit_ts": "1722138039",
    "subm_id": "1335780541"
}