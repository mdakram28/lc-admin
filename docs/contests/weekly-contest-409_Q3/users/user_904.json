{
    "username": "harsh111289",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n            // Step 1: Initialize the distance vector with default distances\n        vector<int> distance(n, 0);\n        for (int i = 1; i < n; ++i) {\n            distance[i] = i;\n        }\n\n        // Step 2: Initialize a set to track active positions\n        set<int> active_positions;\n        for (int i = 0; i < n; ++i) {\n            active_positions.insert(i);\n        }\n\n        // Step 3: Result vector to store the results of type 1 queries\n        vector<int> result;\n\n        // Step 4: Process each query\n        for (const auto& query : queries) {\n            int left = query[0];\n            int right = query[1];\n\n            // Find iterators to the range of elements to be removed\n            auto start = active_positions.lower_bound(left + 1);\n            auto end = active_positions.lower_bound(right);\n\n            // Remove the range [left + 1, right - 1] from the set\n            active_positions.erase(start, end);\n\n            // Record the number of active positions remaining (size of the set minus 1)\n            result.push_back(active_positions.size() - 1);\n        }\n\n        return result;\n    }\n\n};",
    "submit_ts": "1722742891",
    "subm_id": "1343779461"
}