{
    "username": "shakibahmed01999",
    "submission": "const int M = 1e9 + 7;\n\nclass SegmentTree{\n    vector<vector<long>> tree;\n    int n;\n    \n    \n    vector<long> getCurrNode(vector<long> &left, vector<long> &right){  \n        long leftMaxSum = left[0], leftMaxSumSkipFirst = left[1], leftMaxSumSkipLast = left[2], leftMaxSumSkipBoth = left[3];\n        long rightMaxSum = right[0], rightMaxSumSkipFirst = right[1], rightMaxSumSkipLast = right[2], rightMaxSumSkipBoth = right[3];\n        \n        long maxSum = max(leftMaxSum + max(rightMaxSumSkipFirst, 0L), rightMaxSum + max(leftMaxSumSkipLast, 0L)) % M,\n             maxSumSkipFirst = max(max(leftMaxSumSkipFirst, 0L) + rightMaxSumSkipFirst, leftMaxSumSkipBoth + rightMaxSum) % M,\n             maxSumSkipLast = max(max(rightMaxSumSkipLast, 0L) + leftMaxSumSkipLast, rightMaxSumSkipBoth + leftMaxSum)% M,\n             maxSumSkipBoth = max(leftMaxSumSkipBoth + rightMaxSumSkipLast, leftMaxSumSkipFirst + rightMaxSumSkipBoth) % M;\n        \n        return {maxSum, maxSumSkipFirst, maxSumSkipLast, maxSumSkipBoth};\n    }\n    \n    void buildTree(vector<int> &nums, int start, int end, int treeNode){\n        if(start == end){\n            tree[treeNode] = {max(nums[start], 0), 0, 0, 0};\n            return;\n        }\n        \n        int mid = (start + end) / 2;\n        buildTree(nums, start, mid, 2 * treeNode);\n        buildTree(nums, mid + 1, end, 2 * treeNode + 1);\n        \n        tree[treeNode] = getCurrNode(tree[2 * treeNode], tree[2 * treeNode + 1]);\n    }\n    \n    void update(int start, int end, int treeNode, int pos, int val){\n        if(start == end){\n            tree[treeNode] = {max(val, 0), 0, 0, 0};\n            return;\n        }\n        \n        int mid = (start + end) / 2;\n        \n        if(pos <= mid)\n            update(start, mid, 2 * treeNode, pos, val);\n        else\n            update(mid + 1, end, 2 * treeNode + 1, pos, val);\n        \n        tree[treeNode] = getCurrNode(tree[2 * treeNode], tree[2 * treeNode + 1]);\n    }\n    \npublic:\n    SegmentTree(vector<int> &nums){\n        int n = nums.size();\n        this->n = n;\n        tree.resize(4*n);\n        \n        buildTree(nums, 0, n - 1, 1);\n    }\n    \n    void update(int pos, int val){\n        update(0, n - 1, 1, pos, val);\n    }\n    \n    long query(){\n        return tree[1][0];\n    }\n    \n};\n\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        \n        SegmentTree st(nums);\n        \n        long long res = 0;\n        for(int i = 0; i < queries.size(); i++){\n            int pos = queries[i][0], val = queries[i][1];\n            st.update(pos, val);\n            res = (res + st.query()) % M;\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1716694590",
    "subm_id": "1268119827"
}