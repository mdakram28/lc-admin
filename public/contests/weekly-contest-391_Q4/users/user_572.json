{
    "username": "kartikpapney",
    "submission": "class Solution {\n    \n    // Pair class\n    public static class Pair {\n        int x;\n        int y;\n \n        Pair(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n \n    // Function to calculate the maximum\n    // Manhattan distance\n    static int MaxDist(ArrayList<Pair> A, int N)\n    {\n        int ans = Integer.MAX_VALUE;\n \n        // ArrayLists to store maximum and\n        // minimum of all the four forms\n        TreeMap<Integer, Integer> V = new TreeMap<>();\n        TreeMap<Integer, Integer> V1 = new TreeMap<>();\n        int[][] cpp = new int[A.size()][2];\n        \n        for (int i = 0; i < N; i++) {\n            int aa = A.get(i).x + A.get(i).y;\n            int bb = A.get(i).x - A.get(i).y;\n            \n            V.put(aa, V.getOrDefault(aa, 0) + 1);\n            V1.put(bb, V1.getOrDefault(bb, 0) + 1);\n            \n            cpp[i][0] = aa;\n            cpp[i][1] = bb;\n        }\n\n        for(int i=0; i<cpp.length; i++) {\n            int aa = cpp[i][0];\n            int bb = cpp[i][1];\n            V.put(aa, V.get(aa)-1);\n            V1.put(bb, V1.get(bb)-1);\n            if(V.get(aa) == 0) V.remove(aa);\n            if(V1.get(bb) == 0) V1.remove(bb);\n            ans = Math.min(ans, Math.max(V.lastKey()-V.firstKey(), V1.lastKey()-V1.firstKey()));\n            V.put(aa, V.getOrDefault(aa, 0) + 1);\n            V1.put(bb, V1.getOrDefault(bb, 0) + 1);\n        }\n        return ans;\n    }\n    public int minimumDistance(int[][] points) {\n        ArrayList<Pair> al = new ArrayList<>();\n        for(int i=0; i<points.length; i++) {\n            Pair p1 = new Pair(points[i][0], points[i][1]);\n            al.add(p1);\n        }\n\n        return MaxDist(al, al.size());\n    }\n}"
}