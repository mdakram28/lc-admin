{
    "username": "BlueCyclops-18",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        if(n == 1 && m == 1)\n            return 1;\n        vector<vector<int>> graph1(n), graph2(m);\n\n        for (auto& edge : edges1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n\n        for (auto& edge : edges2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n\n        int p1 = (n == 1 ? 0 : findFarthestPoints(graph1));\n        int p2 = (m == 1 ? 0 : findFarthestPoints(graph2));\n\n        int ans = p1 / 2 + ((p1 & 1) ? 1 : 0);\n        ans += p2 / 2 + ((p2 & 1) ? 1 : 0);\n        return max({ans+1, p1, p2});\n    }\n\nprivate:\n    int findFarthestPoints(vector<vector<int>>& graph) {\n        int n = graph.size();\n        vector<int> dist(n, -1);\n        int u, max_dist = 0;\n        findFarthest(graph, 0, dist, 0);\n        for (int i = 0; i < n; i++)\n            if (max_dist < dist[i])\n                u = i, max_dist = dist[i];\n\n        dist.assign(n, -1);\n        findFarthest(graph, u, dist, 0);\n\n        max_dist = 0;\n        for (int i = 0; i < n; i++)\n            if (max_dist < dist[i])\n                max_dist = dist[i];\n\n        return max_dist;\n    }\n    void findFarthest(vector<vector<int>>& graph, int node, vector<int>& dist, int d) {\n        dist[node] = d;\n\n        for (auto& neg : graph[node]) {\n            if (dist[neg] == -1)\n                findFarthest(graph, neg, dist, d + 1);\n        }\n    }\n};",
    "submit_ts": 1719718326.0
}