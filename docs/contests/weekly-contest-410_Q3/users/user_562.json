{
    "username": "tomarint",
    "submission": "const MOD: i64 = 1_000_000_007; // 10**9 + 7\n\n#[derive(Copy, Clone, PartialEq, Eq, Hash, PartialOrd, Ord)]\npub struct Mint {\n    val: i64,\n}\n\nimpl Mint {\n    pub fn new(n: i64) -> Self {\n        let mut new_val = n % MOD + MOD;\n        if new_val >= MOD {\n            new_val -= MOD;\n        }\n        Self { val: new_val }\n    }\n\n    pub fn pow(&self, n: i64) -> Self {\n        if n == 0 {\n            Self { val: 1 }\n        } else {\n            let mut ret = self.pow(n >> 1);\n            ret *= ret;\n            if (n & 1) != 0 {\n                ret *= *self;\n            }\n            ret\n        }\n    }\n\n    pub fn inv(&self) -> Self {\n        self.pow(MOD - 2)\n    }\n}\n\nimpl std::fmt::Display for Mint {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", self.val)\n    }\n}\n\nimpl std::fmt::Debug for Mint {\n    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {\n        write!(f, \"{}\", self.val)\n    }\n}\n\nimpl std::ops::Add for Mint {\n    type Output = Self;\n    fn add(self, other: Self) -> Self::Output {\n        let mut new_val = self.val + other.val;\n        if new_val >= MOD {\n            new_val -= MOD;\n        }\n        Self { val: new_val }\n    }\n}\n\nimpl std::ops::Sub for Mint {\n    type Output = Self;\n    fn sub(self, other: Self) -> Self::Output {\n        let mut new_val = self.val + MOD - other.val;\n        if new_val >= MOD {\n            new_val -= MOD;\n        }\n        Self { val: new_val }\n    }\n}\n\nimpl std::ops::Mul for Mint {\n    type Output = Self;\n    fn mul(self, other: Self) -> Self::Output {\n        Self {\n            val: (self.val * other.val) % MOD,\n        }\n    }\n}\n\nimpl std::ops::Div for Mint {\n    type Output = Self;\n    fn div(self, other: Self) -> Self::Output {\n        if other.val == 0 {\n            panic!(\"0 division occured.\");\n        }\n        self * other.inv()\n    }\n}\n\nimpl std::ops::AddAssign for Mint {\n    fn add_assign(&mut self, other: Self) {\n        *self = *self + other;\n    }\n}\n\nimpl std::ops::SubAssign for Mint {\n    fn sub_assign(&mut self, other: Self) {\n        *self = *self - other;\n    }\n}\n\nimpl std::ops::MulAssign for Mint {\n    fn mul_assign(&mut self, other: Self) {\n        *self = *self * other;\n    }\n}\n\nimpl std::ops::DivAssign for Mint {\n    fn div_assign(&mut self, other: Self) {\n        *self = *self / other;\n    }\n}\n\nimpl Solution {\n    pub fn count_of_pairs(nums: Vec<i32>) -> i32 {\n        let n = nums.len();\n        let nums = nums.iter().map(|&x| x as usize).collect::<Vec<_>>();\n        let mut dp = vec![vec![Mint::new(0); 51]; n];\n        // [0]\n        for a in 0..=nums[0] {\n            dp[0][a] = Mint::new(1);\n        }\n        for i in 1..n {\n            for a in 0..=nums[i] {\n                if nums[i-1] >= nums[i] {\n                    for x in 0..=a {\n                        dp[i][a] = dp[i][a] + dp[i-1][x];\n                    }\n                } else {\n                    let d = nums[i] - nums[i-1];\n                    for x in d..=a {\n                        dp[i][a] = dp[i][a] + dp[i-1][x-d];\n                    }\n                }\n            }\n        }\n        let mut ans = Mint::new(0);\n        for a in 0..=50 {\n            ans += dp[n - 1][a];\n        }\n        ans.val as i32\n    }\n}",
    "submit_ts": "1723346214",
    "subm_id": "1351572718"
}