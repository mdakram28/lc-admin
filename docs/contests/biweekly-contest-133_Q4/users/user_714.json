{
    "username": "dhruvpersonal1",
    "submission": "class Solution {\npublic:\n    static const int MOD = 1e9+7;\n    static const int INV = 400;\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> maxHeap;\n        int a = 0;\n        vector<vector<long long>> pq(n + 1, vector<long long>(INV + 1, 0));\n        bool check = true;\n        int ans = 0;\n        pq[0][0] = 1;\n        \n        for (const auto& r : requirements) \n        {\n            maxHeap[r[0] + 1] = r[1];\n        }\n\n        for (int i = 1; i <= n; i++) \n        {\n            for (int j = 0; j <= INV; j++) \n            {\n                for (int k = 0; k < i; k++) \n                {\n                    int t = j - k;\n                    if (t >= 0) \n                    {\n                        a+=1;\n                        pq[i][j] = (pq[i][j] + pq[i - 1][t]) % MOD;\n                        check = false;\n                    }\n                }\n            }\n\n            if (maxHeap.count(i))\n            {\n                int p = maxHeap[i];\n                for (int l = 0; l <= INV; l++) \n                {\n                    if (l != p) \n                    {\n                        check = false;\n                        pq[i][l] = 0;\n                        a+=1;\n                    }\n                }\n            }\n        }\n        for (long long i : pq[n]) \n        {\n            a+=1;\n            ans = (ans + i) % MOD;\n        }\n        if(check)\n        {\n            a+=1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1719071054",
    "subm_id": "1296838043"
}