{
    "username": "swagat_k04",
    "submission": "class Solution {\nprivate:\n    int bfs(const vector<vector<int>>& adj, int start) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest = start;\n\n        while(!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for(int neighborNode : adj[node]) {\n                if(dist[neighborNode] == -1) {\n                    dist[neighborNode] = dist[node] + 1;\n                    q.push(neighborNode);\n                    if(dist[neighborNode] > dist[farthest]) {\n                        farthest = neighborNode;\n                    }\n                }\n            }\n        }\n        return farthest;\n    }\n\n    int getDiameter(const vector<vector<int>>& adj) {\n        int start = bfs(adj, 0); \n        int end = bfs(adj, start); \n        int diameter = bfsDistance(adj, start, end);\n        return diameter;\n    }\n    \n    int bfsDistance(const vector<vector<int>>& adj, int start, int end) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        while(!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for(int neighbor : adj[node]) {\n                if(dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                }\n            }\n        }\n        return dist[end];\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = 1e5;\n        int m = 1e5;\n        vector<vector<int>> adj1(n);\n        for(auto edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        vector<vector<int>> adj2(m);\n        for(auto edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int diameter1 = getDiameter(adj1);\n        int diameter2 = getDiameter(adj2);\n\n        int radius1 = (diameter1 + 1) / 2;\n        int radius2 = (diameter2 + 1) / 2;\n\n        int newDiameter = max({diameter1, diameter2, radius1 + radius2 + 1});\n        return newDiameter;\n    }\n};",
    "submit_ts": 1719719762.0
}