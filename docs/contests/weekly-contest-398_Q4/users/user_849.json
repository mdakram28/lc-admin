{
    "username": "clean",
    "submission": "class Solution {\npublic:\n    int recurse(int k, int now, int used, int jump, unordered_map<int, unordered_map<int, unordered_map<int, int>>> &dp) {\n        if (dp.find(now) != dp.end() && dp[now].find(used) != dp[now].end() && dp[now][used].find(jump) != dp[now][used].end()) {\n            return dp[now][used][jump];\n        }\n        int ret = 0;\n        if (now == k) ret++;\n        if (used == 1 && now + jump > k + 1) {\n        }\n        else if (used == 0 && now > k + 1) {\n        }\n        else {\n            if (used == 0) {\n                ret += recurse(k, now-1, 1, jump, dp);\n            }\n            ret += recurse(k, now + jump, 0, jump*2, dp);\n        }\n        \n        dp[now][used][jump] = ret;\n        //cout<<now<<' '<<used<<' '<<jump<<' '<<ret<<endl;\n        return ret;\n    }\n    int waysToReachStair(int k) {\n        unordered_map<int, unordered_map<int, unordered_map<int, int>>> dp;\n        cout<<\"-------------\"<<endl;\n        return recurse(k, 1, 0, 1, dp);\n    }\n};",
    "submit_ts": "1716089734",
    "subm_id": "1261849939"
}