{
    "username": "Manan_Chhajed",
    "submission": "using ll = long long;\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) \n    {\n        ll n = nums.size();\n        ll ans = 0;\n        \n        vector<vector<ll>> v(n);\n        vector<ll> res(31, n);\n        for(ll i = n - 1; i >= 0; i--)\n        {\n            for(ll bit = 0; bit <= 30; bit++)\n            {\n                if((nums[i] >> bit) & 1) continue;\n                else res[bit] = i;\n            } \n            v[i] = res;\n        }\n        \n        for(ll i = 0; i < n; i++)\n        {\n            if((nums[i] | k) == nums[i])\n            {\n                vector<ll> t1, t2;\n                for(ll j = 0; j <= 30; j++)\n                {\n                    if(((nums[i] >> j) & 1) && !((k >> j) & 1))\n                    {\n                        t1.push_back(j);\n                    }\n                    else if((nums[i] >> j) & 1)\n                    {\n                        t2.push_back(j);\n                    }\n                }\n                \n                ll till1 = i;\n                for(auto it : t1) till1 = max(till1, v[i][it]);\n                \n                ll till2 = n;\n                for(auto it : t2) till2 = min(till2, v[i][it]);\n                \n                // becomes k at till1, loses at till2\n                if(till2 > till1)\n                {\n                    ans += till2 - till1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278111",
    "subm_id": "1311694777"
}