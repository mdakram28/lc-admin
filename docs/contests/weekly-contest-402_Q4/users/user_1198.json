{
    "username": "Rishita_maheshwari",
    "submission": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    int buildTree(int node, int start, int end) {\n        if (start == end) {\n            return tree[node] = isPeak(start) ? 1 : 0;\n        }\n        int mid = (start + end) / 2;\n        int leftCount = buildTree(2 * node + 1, start, mid);\n        int rightCount = buildTree(2 * node + 2, mid + 1, end);\n        return tree[node] = leftCount + rightCount;\n    }\n\n    int queryTree(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftCount = queryTree(2 * node + 1, start, mid, l, r);\n        int rightCount = queryTree(2 * node + 2, mid + 1, end, l, r);\n        return leftCount + rightCount;\n    }\n\n    void updateTree(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n            return;\n        }\n        int mid = (start + end) / 2;\n        if (start <= idx && idx <= mid) {\n            updateTree(2 * node + 1, start, mid, idx);\n        } else {\n            updateTree(2 * node + 2, mid + 1, end, idx);\n        }\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    bool isPeak(int idx) {\n        if (idx <= 0 || idx >= n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        buildTree(0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        if (l >= r) return 0; // In case l and r are the same, there's no valid peak.\n        int ans = queryTree(0, 0, n - 1, l, r);\n        // Since endpoints nums[l] and nums[r] cannot be peaks\n        if (l > 0 && isPeak(l)) ans--;\n        if (r < n - 1 && isPeak(r)) ans--;\n        return ans;\n    }\n\n    void update(int idx, int val) {\n        nums[idx] = val;\n        if (idx > 0) updateTree(0, 0, n - 1, idx - 1);\n        updateTree(0, 0, n - 1, idx);\n        if (idx < n - 1) updateTree(0, 0, n - 1, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                result.push_back(segTree.query(li, ri));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int val = query[2];\n                segTree.update(index, val);\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1718508874.0
}