{
    "username": "jlyfish",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& query) {\n        int n = s.length(), m = query.size();\n        vector<int> sum(n + 1);\n        for (int i = 0; i < n; i++) {\n            sum[i + 1] = sum[i] + s[i] - '0';\n        }\n\n        auto valid = [&](int l, int r) {\n            int len = r - l + 1;\n            int one = sum[r + 1] - sum[l];\n            return one <= k || len - one <= k; \n        };\n\n        vector<int> low(n);\n        for (int i = 0, j = 0; i < n; i++) {\n            while (j < n && valid(i, j)) {\n                j++;\n            }\n            low[i] = j - 1;\n        }\n\n        vector<long long> cnt(n + 1);\n        for (int i = 0; i < n; i++) {\n            cnt[i + 1] = cnt[i] + low[i] - i + 1;\n        }\n        vector<long long> ans;\n        ans.reserve(m);\n        for (const auto tc : query) {\n            int L = tc[0], R = tc[1];\n            int l = L - 1, r = R + 1;\n            while (l + 1 < r) {\n                int mid = (l + r) / 2;\n                if (low[mid] <= R) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            long long res = cnt[l + 1] - cnt[L];\n            if (r <= R) {\n                res += 1ll * (R - r + 2) * (R - r + 1) / 2;\n            }\n            ans.push_back(res);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723948941",
    "subm_id": "556389450"
}