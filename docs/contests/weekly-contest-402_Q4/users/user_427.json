{
    "username": "chuan-chih",
    "submission": "class BIT:\n    def __init__(self, n):\n        self.n = n\n        self.l = [0] * (n + 1)\n    def add(self, i, x):\n        i += 1\n        while i <= self.n:\n            self.l[i] += x\n            i += i & -i\n    def query(self, i):\n        i += 1\n        ans = 0\n        while i:\n            ans += self.l[i]\n            i -= i & -i\n        return ans\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        bit = BIT(n)\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                bit.add(i, 1)\n        ans = []\n        for q in queries:\n            if q[0] == 1:\n                _, l, r = q\n                l += 1\n                r -= 1\n                if l <= r:\n                    ans.append(bit.query(r) - bit.query(l - 1))\n                else:\n                    ans.append(0)\n            else:\n                _, i, val = q\n                l, r = max(1, i - 1), min(n - 2, i + 1)\n                before = [nums[j - 1] < nums[j] > nums[j + 1] for j in range(l, r + 1)]\n                nums[i] = val\n                after = [nums[j - 1] < nums[j] > nums[j + 1] for j in range(l, r + 1)]\n                for j, b, a in zip(range(l, r + 1), before, after):\n                    bit.add(j, a - b)\n        return ans\n                \n        \n        ",
    "submit_ts": 1718507538.0
}