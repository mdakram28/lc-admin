{
    "username": "issylu1101",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& arr, int v, int tl, int tr) {\n        if (tl == tr) {\n            tree[v] = arr[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(arr, v * 2, tl, tm);\n            build(arr, v * 2 + 1, tm + 1, tr);\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) return 0; // Out of bounds\n        if (l == tl && r == tr) return tree[v];\n        int tm = (tl + tr) / 2;\n        return query(v * 2, tl, tm, l, min(r, tm)) + query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);\n    }\n\n    void update(int v, int tl, int tr, int pos, int newVal) {\n        if (tl == tr) {\n            tree[v] = newVal;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                update(v * 2, tl, tm, pos, newVal);\n            else\n                update(v * 2 + 1, tm + 1, tr, pos, newVal);\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n); // Adjust this factor as needed\n        build(arr, 1, 0, n - 1);\n    }\n\n    int queryMax(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n\n    void updateValue(int pos, int newVal) {\n        update(1, 0, n - 1, pos, newVal);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> array(nums.size(), 0);\n        for (int i = 1; i < nums.size() - 1; i++) {\n            if (nums[i-1] < nums[i] && nums[i+1] < nums[i])\n                array[i] = 1;\n        }\n        SegmentTree tree(array);\n        vector<int> ans;\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                ans.push_back(tree.queryMax(query[1] + 1, query[2] - 1));\n            } else {\n                int idx = query[1];\n                int val = query[2];\n                nums[idx] = val;\n                \n                for (int i = max(0, idx - 2); i <= min((int)nums.size() - 1, idx + 2); i++) {\n                    if(i-1 < 0 || i+1 > nums.size() - 1) continue;\n                    if (nums[i-1] < nums[i] && nums[i+1] < nums[i]) {\n                        tree.updateValue(i, 1);\n                    } else {\n                        tree.updateValue(i, 0);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n\n\n",
    "submit_ts": 1718508809.0
}