{
    "username": "andriybuday",
    "submission": "class Solution {\n    class SegmentTree {\n        int[] tree;\n        int n;\n\n        public SegmentTree(int[] arr) {\n            n = arr.length;\n            tree = new int[4 * n];\n            build(arr, 0, 0, n - 1);\n        }\n\n        public void build(int[] arr, int nd, int start, int end) {\n            if (start == end) {\n                tree[nd] = arr[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(arr, 2 * nd + 1, start, mid);\n                build(arr, 2 * nd + 2, mid + 1, end);\n                tree[nd] = tree[2 * nd + 1] & tree[2 * nd + 2];\n            }\n        }\n\n        public int find(int l, int r) {\n            return find(0, 0, n - 1, l, r);\n        }\n\n        public int find(int nd, int start, int end, int l, int r) {\n            if (r < start || end < l) {\n                return Integer.MAX_VALUE; \n            }\n            if (l <= start && end <= r) {\n                return tree[nd]; \n            }\n            int mid = (start + end) / 2;\n            int p1 = find(2 * nd + 1, start, mid, l, r);\n            int p2 = find(2 * nd + 2, mid + 1, end, l, r);\n            return p1 & p2; \n        }\n    }\n    public int minimumDifference(int[] nums, int k) {\n        var min = Integer.MAX_VALUE;\n        var n = nums.length;\n        var st = new SegmentTree(nums);\n        for(int i = 0; i < n; ++i) {\n            int l = i - 1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (st.find(i, mid) >= k) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            if (l != i - 1) {\n                min = Math.min(min, Math.abs(st.find(i, l) - k));\n            }\n            min = Math.min(min, Math.abs(k - st.find(i, r)));\n        }\n        return min;\n    }\n}",
    "submit_ts": "1717299255",
    "subm_id": "1274806540"
}