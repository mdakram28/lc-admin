{
    "username": "phungthienphuoc",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def topo(edge):\n            n=len(edge)+1\n            if n==1:\n                return 0,0\n            if n==2:\n                return 1,1\n            if n==3:\n                return 1,2\n            d=defaultdict(set)\n            for a,b in edge:\n                d[a].add(b)\n                d[b].add(a)\n            queue=deque()\n            for i in range(n):\n                if len(d[i])==1:\n                    queue.append(i)\n            rad=0\n            while queue:\n                if len(queue)==1:\n                    node=queue.pop()\n                    break\n                rad+=1\n                for _ in range(len(queue)):\n                    node=queue.popleft()\n                    if not d[node]:\n                        continue\n                    nextnode=d[node].pop()\n                    d[nextnode].remove(node)\n                    if len(d[nextnode])==1:\n                        queue.append(nextnode)\n            root=node\n            d=defaultdict(set)\n            for a,b in edge:\n                d[a].add(b)\n                d[b].add(a)\n            length=[]\n            for x in d[root]:\n                d[x].remove(root)\n                queue=deque([x])\n                cur=0\n                while queue:\n                    cur+=1\n                    for _ in range(len(queue)):\n                        node=queue.popleft()\n                        for v in d[node]:\n                            queue.append(v)\n                            d[v].remove(node)\n                length.append(cur)\n            length.sort(reverse=True)\n            return rad,length[0]+length[1]\n        p1,d1=topo(edges1)\n        p2,d2=topo(edges2)\n        return max(p1+p2+1,d1,d2)",
    "submit_ts": 1719718220.0
}