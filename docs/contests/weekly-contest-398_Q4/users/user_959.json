{
    "username": "nemokwy",
    "submission": "@lru_cache(None)\ndef dp(t, j):\n    # print(t,j)\n    if j == -1:\n        if t == 1 or t == 0:\n            # print(1)\n            return 1\n        else:\n            # print(0)\n            return 0\n    c = 0\n    v = 1 << j\n    if t > v * 2 + 1:\n        return 0\n    if t - v >= 0:\n        c += dp(t - v, j-1)\n    if t + 1 - v >= 0:\n        c += dp(t+1-v, j-1)\n    # print(c)\n    return c\n        \nclass Solution:\n    def waysToReachStair(self, k: int) -> int:\n#         self.ret = 0\n        \n#         def dfs(v, st, jp):\n#             if v == k:\n#                 self.ret += 1\n#             if st != 1 and v > 0:\n#                 dfs(v-1, 1, jp)\n#             if v + pow(2, jp) <= k+1:\n#                 dfs(v + pow(2, jp), 0, jp+1)\n#         dfs(1, 0, 0)\n#         print(self.ret)\n        \n\n        \n        r = dp(k, -1)\n        # print(r)\n        # print()\n        for i in range(32):\n            r += dp(k, i)\n        return r\n            \n                ",
    "submit_ts": 1716089954.0
}