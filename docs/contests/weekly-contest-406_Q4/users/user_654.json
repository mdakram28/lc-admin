{
    "username": "ataturhan",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCuts: List[int], verticalCuts: List[int]) -> int:\n        # Sort the cuts in descending order\n        horizontalCuts.sort(reverse=True)\n        verticalCuts.sort(reverse=True)\n\n        # Initialize the number of horizontal and vertical pieces\n        horizontal_pieces = 1\n        vertical_pieces = 1\n\n        total_cost = 0\n        i, j = 0, 0\n\n        # Use a greedy approach to pick the most expensive cut at each step\n        while i < len(horizontalCuts) and j < len(verticalCuts):\n            if horizontalCuts[i] >= verticalCuts[j]:\n                total_cost += horizontalCuts[i] * vertical_pieces\n                horizontal_pieces += 1\n                i += 1\n            else:\n                total_cost += verticalCuts[j] * horizontal_pieces\n                vertical_pieces += 1\n                j += 1\n\n            total_cost \n\n        # If there are remaining horizontal cuts\n        while i < len(horizontalCuts):\n            total_cost += horizontalCuts[i] * vertical_pieces\n            total_cost\n            i += 1\n\n        # If there are remaining vertical cuts\n        while j < len(verticalCuts):\n            total_cost += verticalCuts[j] * horizontal_pieces\n            total_cost\n            j += 1\n\n        return total_cost\n",
    "submit_ts": "1720925424",
    "subm_id": "1320254273"
}