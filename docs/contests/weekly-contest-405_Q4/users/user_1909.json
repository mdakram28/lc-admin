{
    "username": "smallfatcute",
    "submission": "class Solution {\npublic:\n    struct Trie {\n        unordered_map<char, shared_ptr<Trie>> children;\n        bool is_end = false;\n        int cost = 0;\n    };\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        auto root = make_shared<Trie>();\n\n        for (int i = 0; i < words.size(); ++i) {\n            auto ptr = root;\n            \n            for (char ch : words[i]) {\n                if (ptr->children.count(ch) == 0) ptr->children[ch] = make_shared<Trie>();\n                ptr = ptr->children[ch];\n            }\n            \n            if (ptr->is_end) ptr->cost = min(ptr->cost, costs[i]);\n            else ptr->cost = costs[i];\n            ptr->is_end = true;\n        }\n        \n        vector<int> min_cost(target.size() + 1, INT_MAX);\n        min_cost[0] = 0;\n\n        for (int i = 0; i < target.size(); ++i) {\n            if (min_cost[i] == INT_MAX) continue;\n            \n            auto trie = root;\n\n            for (int idx = i; idx < target.size(); ++idx) {\n                char ch = target[idx];\n                if (trie->children.count(ch) == 0) break;\n\n                trie = trie->children[ch];\n\n                if (trie->is_end) {\n                    min_cost[idx + 1] = min(min_cost[idx + 1], trie->cost + min_cost[i]);\n                }\n            }\n        }\n        \n        return min_cost.back() == INT_MAX ? -1 : min_cost.back();\n    }\n};",
    "submit_ts": "1720324446",
    "subm_id": "1312399671"
}