{
    "username": "curiosity-10",
    "submission": "#include <vector>\nusing namespace std;\n\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) : n(nums.size()), data(nums), tree(4 * n, 0) {\n        build(1, 0, n - 1);\n    }\n\n    int query(int L, int R) {\n        return query(1, 0, n - 1, L, R);\n    }\n\n    void update(int idx, int val) {\n        data[idx] = val;\n        update(1, 0, n - 1, idx);\n    }\n\nprivate:\n    int n;\n    vector<int> data;\n    vector<int> tree;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        return query(2 * node, start, mid, L, R) + query(2 * node + 1, mid + 1, end, L, R);\n    }\n\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node, start, mid, idx);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return data[i] > data[i - 1] && data[i] > data[i + 1];\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segmentTree(nums);\n        vector<int> result;\n        \n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1], ri = query[2];\n                result.push_back(segmentTree.query(li + 1, ri - 1));\n            } else if (query[0] == 2) {\n                int index = query[1], val = query[2];\n                nums[index] = val;\n                segmentTree.update(index, val);\n                if (index > 0) segmentTree.update(index - 1, nums[index - 1]);\n                if (index < nums.size() - 1) segmentTree.update(index + 1, nums[index + 1]);\n            }\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": 1718506209.0
}