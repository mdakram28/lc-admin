{
    "username": "jszqlew",
    "submission": "\ndef bfs(s, adj):\n    q = [(s, s, 0)]\n    for u, par, d in q:\n        for v in adj[u]:\n            if v != par:\n                q.append((v, u, d + 1))\n    return q[-1]\n\ndef find_diam(edges):\n    n = len(edges) + 1\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    a, _, _ = bfs(0, adj)\n    t, _, d = bfs(a, adj)\n    return d\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        a, b = find_diam(edges1), find_diam(edges2)\n        return max([a, b, (a + 1) // 2 + (b + 1) // 2 + 1])\n        ",
    "submit_ts": 1719716280.0
}