{
    "username": "asdfanuiu",
    "submission": "/**\n * @param {number[]} nums\n * @return {number}\n */\nconst m = 10 ** 9 + 7;\nclass SegmentNode {\n    constructor(a, b) {\n        this.start = a;\n        this.end = b;\n        this.info = 0;\n        this.left = null;\n        this.right = null;\n    }\n}\n\nclass SegmentTree {\n    constructor(root) {\n        this.root = root;\n    }\n\n    constructTree(node, a, b) {\n        let nums = this.nums;\n        if (a === b) {\n            return;\n        }\n        let mid = a + Math.floor((b - a) / 2);  \n        node.left = new SegmentNode(a, mid);\n        node.right = new SegmentNode(mid + 1, b);\n        this.constructTree(node.left, a, mid);\n        this.constructTree(node.right, mid + 1, b);\n        node.info = (node.left.info + node.right.info) % m;\n    }\n\n    update(node, index, val) {\n\t\t\t\tif (!node) return;\n        if (node.start > index || node.end < index) return;\n        if (node.start === index && node.end === index) {\n            node.info = val;\n            return;\n        }\n        this.update(node.left, index, val);\n        this.update(node.right, index, val);\n        node.info = (node.left.info + node.right.info) % m;\n    }\n\n    query(node, a, b) {\n\t\tif (!node) return 0;\n        if (a > node.end || b < node.start) {\n            return 0;\n        }\n        if (a <= node.start && b >= node.end) {\n            return node.info;\n        }\n        return (this.query(node.left, a, b) + this.query(node.right, a, b)) % m;\n    }\n}\n\nvar countOfPairs = function(nums) {\n    let n = nums.length;\n    let max = Math.max(...nums);\n    let dpHelper = Array.from({length: n + 1}).map(_ => new Array(max + 1).fill(0));\n    dpHelper[0][0] = 1;\n    \n    for (let i = 0; i < n; i++) {\n        if (i >= 0) {\n            for (let j = 1; j <= max; j++) {\n                dpHelper[i][j] += dpHelper[i][j - 1];\n                dpHelper[i][j] %= m;\n            }\n        }\n        for (let j = 0; j <= nums[i]; j++) {\n            let y = Math.min(i > 0 ? nums[i - 1] - nums[i] + j : 2000, j);\n            let sum = y < 0 ? 0: dpHelper[i][y];\n            let cur = dpHelper[i + 1][j];\n            // console.log(i, y, sum, cur);\n            let newVal = (cur + sum) % m;\n            dpHelper[i + 1][j] = newVal;\n        }\n    }\n    // console.log(dpHelper);\n    let r = 0;\n    for (let j = 0; j <= max; j++) {\n        r += dpHelper[n][j];\n        r %= m;\n    }\n    return r;\n};",
    "submit_ts": "1723345608",
    "subm_id": "1351559430"
}