{
    "username": "perry304",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def diameter(tree):\n            def visit(node, height):\n                visited.add(node)\n                h[node] = height\n                for nxt in tree[node]:\n                    if nxt in visited:\n                        continue\n                    visit(nxt, height + 1)\n            visited = set()\n            h = [0] * len(tree)\n            visit(0, 1)\n            start = 0\n            for i in range(len(tree)):\n                if h[i] > h[start]:\n                    start = i\n            visited = set()\n            h = [0] * len(tree)\n            visit(start, 1)\n            return max(h) - 1\n        \n        n, m = len(edges1) + 1, len(edges2) + 1\n        tree1, tree2 = [set() for i in range(n)], [set() for i in range(m)]\n        for a, b in edges1:\n            tree1[a].add(b)\n            tree1[b].add(a)\n        for a, b in edges2:\n            tree2[a].add(b)\n            tree2[b].add(a)\n        d1, d2 = diameter(tree1), diameter(tree2)\n        return max(d1, d2, ((d1 + 1) // 2) + ((d2 + 1) // 2) + 1)",
    "submit_ts": 1719718644.0
}