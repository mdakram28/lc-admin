{
    "username": "wutwere",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> adj1(n + 1), adj2(m + 1);\n        for (auto x : edges1) {\n            int a = x[0], b = x[1];\n            adj1[a].push_back(b);\n            adj1[b].push_back(a);\n        }\n        for (auto x : edges2) {\n            int a = x[0], b = x[1];\n            adj2[a].push_back(b);\n            adj2[b].push_back(a);\n        }\n        auto dfs = [&](auto &&self, int cur, int par, int dep, vector<int>& dist, vector<vector<int>>& adj) -> void {\n            dist[cur] = dep;\n            for (auto nbr : adj[cur]) {\n                if (nbr != par) {\n                    self(self, nbr, cur, dep + 1, dist, adj);\n                }\n            }\n        };\n        int d = -1;\n        auto getfar = [&](int cur, vector<vector<int>>& adj) -> int {\n            vector<int> dist(adj.size());\n            dfs(dfs, cur, -1, 0, dist, adj);\n            int farthest = -1;\n            for (int i = 0; i < adj.size(); i++) {\n                if (dist[i] > d) {\n                    d = dist[i];\n                    farthest = i;\n                }\n            }\n            return farthest;\n        };\n        int a = getfar(0, adj1);\n        d = -1;\n        int b = getfar(a, adj1);\n        int d1 = d;\n        d = -1;\n        int c = getfar(0, adj2);\n        d = -1;\n        getfar(c, adj2);\n        cout << d1 << ' ' << d << '\\n';\n        return max({d1, d, (d1 + 1) / 2 + (d + 1) / 2 + 1});\n    }\n};",
    "submit_ts": 1719716959.0
}