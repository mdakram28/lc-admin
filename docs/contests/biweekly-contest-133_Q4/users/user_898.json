{
    "username": "Divyanshu_Vaibhav",
    "submission": "class Solution {\n  int numberOfPermutations(int n, List<List<int>> requirements) {\n     const int MOD = 1000000007;\n    const int MAX_INV = 400;\n\n    Map<int, int> conMap = {};\n    for (var con in requirements) {\n      conMap[con[0] + 1] = con[1];\n    }\n\n    List<List<int>> permCounts = List.generate(\n      n + 1, \n      (_) => List<int>.filled(MAX_INV + 1, 0)\n    );\n    permCounts[0][0] = 1;\n\n    for (int len = 1; len <= n; ++len) {\n      for (int inv = 0; inv <= MAX_INV; ++inv) {\n        for (int pos = 0; pos < len; ++pos) {\n          int prevInv = inv - pos;\n          if (prevInv >= 0) {\n            permCounts[len][inv] = (permCounts[len][inv] + permCounts[len - 1][prevInv]) % MOD;\n          }\n        }\n      }\n\n      if (conMap.containsKey(len)) {\n        int targetInv = conMap[len]!;\n        for (int inv = 0; inv <= MAX_INV; ++inv) {\n          if (inv != targetInv) {\n            permCounts[len][inv] = 0;\n          }\n        }\n      }\n    }\n\n    int result = 0;\n    for (int count in permCounts[n]) {\n      result = (result + count) % MOD;\n    }\n\n    return result;\n  }\n}",
    "submit_ts": 1719071498.0
}