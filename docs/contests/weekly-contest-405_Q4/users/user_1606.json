{
    "username": "souravsaxena",
    "submission": "class Solution {\npublic:\n    struct Node{\n        unordered_map<char,Node*>child;\n        vector<pair<int,int>> last;\n    };\n    class Trie{\n        public:\n        Node *start;\n        Trie()\n        {\n            start=new Node();\n        }\n        void add(string & str,int i,int cost){\n            Node * temp=start;\n            for(char c:str){\n                if(!temp->child.count(c))\n                    temp->child[c]=new Node();\n                temp=temp->child[c];\n            }\n            temp->last.push_back({i,cost});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for(int i=0;i<words.size();i++)\n            trie.add(words[i],i,costs[i]);\n        int n=target.length();\n        vector<int> dp(n+1,INT_MAX);\n        dp[0]=0;\n        for(int i=0;i<n;i++)\n        {\n            if(dp[i]!=INT_MAX)\n            {\n                Node * tmp = trie.start;\n                for(int j=i;j<n;j++)\n                {\n                    if(!tmp->child.count(target[j]))\n                        break;\n                    tmp=tmp->child[target[j]];\n                    for(auto & ele: tmp->last){\n                        int ind=ele.first;\n                        int cost=ele.second;\n                        if(i+words[ind].length()<=n){\n                            dp[i+words[ind].length()]=min(dp[i+words[ind].length()],dp[i]+cost);\n                        }\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX)\n            return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324268",
    "subm_id": "1312395470"
}