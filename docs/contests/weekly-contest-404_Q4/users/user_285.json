{
    "username": "gunjan192002",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n       \n        \n        vector<vector<int>> adj1(n1);\n         int n2 = edges2.size() + 1;\n        vector<vector<int>> adj2(n2);\n        for (const auto& e : edges2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n        for (const auto& e : edges1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        \n\n        auto dfs = [](const vector<vector<int>>& adj, int start, int& farthest) {\n            int size = adj.size();\n            vector<int> dist(size, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int d) {\n                dist[node] = d;\n                if (d > dist[farthest]) {\n                    farthest = node;\n                }\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dfsVisit(neighbor, d + 1);\n                    }\n                }\n            };\n            farthest = start;\n            dfsVisit(start, 0);\n            return dist[farthest];\n        };\n\n        int farthest1 = 0;\n        dfs(adj1, 0, farthest1);\n        int diameter1 = dfs(adj1, farthest1, farthest1);\n\n        int farthest2 = 0;\n        dfs(adj2, 0, farthest2);\n        int diameter2 = dfs(adj2, farthest2, farthest2);\n        \n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n        \n        return minDiameter;\n    }\n};\n",
    "submit_ts": "1719717994",
    "subm_id": "1304406088"
}