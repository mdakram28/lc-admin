{
    "username": "nsk_91",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n        \n        List<List<Integer>> arr1 = func1(n, edges1);\n        List<List<Integer>> arr2 = func1(m, edges2);\n\n        int d1 = func2(arr1);\n        int d2 = func2(arr2);\n        \n        int min_dia = Math.max(d1, d2);\n        int half1 = (d1 + 1) / 2;\n        int half2 = (d2 + 1) / 2;\n        min_dia = Math.max(min_dia, half1 + half2 + 1);\n        \n        return min_dia;\n    }\n\n    private List<List<Integer>> func1(int size, int[][] edges) {\n        List<List<Integer>> adjList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            adjList.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adjList.get(edge[0]).add(edge[1]);\n            adjList.get(edge[1]).add(edge[0]);\n        }\n        return adjList;\n    }\n\n    private int func2(List<List<Integer>> adj) {\n        int[] far_node = new int[1];\n        int ini_dia = func3(adj, 0, far_node);\n        return func3(adj, far_node[0], far_node);\n    }\n\n    private int func3(List<List<Integer>> adj, int start, int[] far_node) {\n        int size = adj.size();\n        int[] dist = new int[size];\n        Arrays.fill(dist, -1);\n        far_node[0] = start;\n\n        func4(adj, start, 0, dist, far_node);\n\n        return dist[far_node[0]];\n    }\n\n    private void func4(List<List<Integer>> adj, int node, int distance, int[] dist, int[] far_node) {\n        dist[node] = distance;\n        if (distance > dist[far_node[0]]) {\n            far_node[0] = node;\n        }\n        for (int neighbor : adj.get(node)) {\n            if (dist[neighbor] == -1) {\n                func4(adj, neighbor, distance + 1, dist, far_node);\n            }\n        }\n    }\n}\n",
    "submit_ts": 1719716904.0
}