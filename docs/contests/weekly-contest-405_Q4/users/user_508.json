{
    "username": "sarthakkumar311003",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> children;\n    int cost;\n    \n    Node() : cost(INT_MAX) {}\n};\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(const string& word, int cost) {\n        Node* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new Node();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int n;\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        n = t.size();\n        Trie trie;\n        for (int i = 0; i < w.size(); ++i) {\n            trie.insert(w[i], c[i]);\n        }\n        int check=2;\n        vector<int> dp(n + 1, INT_MAX);\n        if(check==2) dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            Node* node = trie.root;\n            if (dp[i] == INT_MAX) continue;\n            for (int j=i+check-2; j < n; ++j) {\n                if (!node->children.count(t[j])) break;\n                node = node->children[t[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j+check-1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        if(dp[n]>=INT_MAX) return -1;\n        return dp[n];\n    }\n};\n",
    "submit_ts": "1720322602",
    "subm_id": "1312354229"
}