{
    "username": "mkliac",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        // if prev <= cur && nums[i-1]-prev >= nums[i]-cur\n        // nums[i-1]-nums[i] >= prev-cur <= 0\n        // nums[i-1]-nums[i] >= prev <= cur\n        // nums[i-1]-nums[i]+cur >= prev\n        // prevBegin..prevEnd is continuous -> prefix sum\n        int n = nums.size(), maxV = *max_element(nums.begin(), nums.end()), mod = 1e9+7;\n        vector<vector<int>> dp(n, vector<int>(maxV+1, 0));\n        vector<int> prevSum(maxV+2, 0);\n        for (int i = 0; i <= nums[0]; i++) {\n            dp[0][i] = 1;\n        }\n        for (int i = 1; i <= maxV+1; i++) {\n            prevSum[i] = prevSum[i-1] + dp[0][i-1];\n        }\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j <= nums[i]; j++) {\n                int prev = min(j, nums[i-1]-nums[i]+j);\n                // cout << prev << endl;\n                if (prev < 0)\n                    continue;\n                dp[i][j] = (dp[i][j] + prevSum[prev+1]-prevSum[0])%mod;\n            }\n            for (int j = 1; j <= maxV+1; j++) {\n                prevSum[j] = (prevSum[j-1] + dp[i][j-1])%mod;\n            }\n        }\n        // cout << 2 << endl;\n        int res = 0;\n        for (int i = 0; i <= maxV; i++) {\n            res = (dp[n-1][i] + res)%mod;\n        }\n        return res;      \n    }\n};",
    "submit_ts": "1723348351",
    "subm_id": "1351616502"
}