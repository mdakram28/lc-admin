{
    "username": "heshan1234",
    "submission": "class Solution {\n    \n    public int maximumLength(int[] nums, int k) {\n        List<M> dp = new ArrayList<>(k+1);\n        for(int i = 0; i <= k; ++i) {\n            dp.add(new M());\n        }\n        int n = nums.length;\n        for(int i = 0; i < n; ++i) {\n            // if nums[i] is not used, nothing will change; if nums[i] is used:\n            for(int j = k; j > 0; --j) {\n                int len = Integer.MIN_VALUE;\n                // 1. extend the length of the same ending value, diff is not changed.\n                Integer prev = dp.get(j).get(nums[i]);\n                if (prev != null) {\n                    len = Math.max(len, prev + 1);\n                }\n                // 2. start a new section with diff + 1; pick the max length with a different ending.\n                int prev2 = dp.get(j-1).pick(nums[i]);\n                if (prev2 > Integer.MIN_VALUE) {\n                    len = Math.max(len, prev2 + 1);\n                }\n                // update.\n                if (len > Integer.MIN_VALUE) {\n                    dp.get(j).put(nums[i], len);\n                }\n            }\n            // j = 0; can start a new subsequence.\n            int len = dp.get(0).getOrDefault(nums[i], 0) + 1;\n            dp.get(0).put(nums[i], len);\n        }\n        int result = Integer.MIN_VALUE;\n        for(var m : dp) {\n            result = Math.max(result, m.maxLength);\n        }\n        return result;\n    }\n    \n    static class M extends HashMap<Integer, Integer> {\n        \n        int maxLength = Integer.MIN_VALUE;\n        int maxValue = -1;\n        int max2Length = Integer.MIN_VALUE;\n        \n        @Override\n        public Integer put(Integer key, Integer value) { // value, length.\n            if (value >= maxLength) {\n                max2Length = maxLength;\n                maxLength = value;\n                maxValue = key;\n            } else if (value > max2Length) {\n                max2Length = value;\n            }\n            return super.put(key, value);\n        }\n        \n        int pick(int current) { // max length with a different ending than current.\n            return maxValue == current ? max2Length : maxLength;\n        }\n    }\n}",
    "submit_ts": "1717861096",
    "subm_id": "1281779522"
}