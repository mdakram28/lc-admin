{
    "username": "jeff-o81",
    "submission": "class Solution:\n    def get_answer(self, data: List[int], four_req = False) -> int:\n        ret = 0\n        length = len(data)\n        one_count = 0\n        for i in range(length // 2):\n            if data[i] != data[-i - 1]:\n                ret += 1\n            else:\n                if data[i] == 1:\n                    one_count += 2\n        if four_req:\n            if one_count % 4 == 0 or ret > 0:\n                pass\n            else:\n                ret += 2\n            if length % 2 == 1 and data[length // 2] == 1:\n                ret += 1\n        print(data, four_req, one_count, ret)\n        return ret\n\n    def get_count_for_pos(self, grid, row_id, col_id):\n        row_num = len(grid)\n        col_num = len(grid[0])\n        right_col = -col_id - 1\n        bottom_row = -row_id - 1\n\n        one_count = 0\n        if grid[row_id][col_id] == 1:\n            one_count += 1\n        if grid[row_id][right_col] == 1:\n            one_count += 1\n        if grid[bottom_row][col_id] == 1:\n            one_count += 1\n        if grid[bottom_row][right_col] == 1:\n            one_count += 1\n        return min(one_count, 4 - one_count)\n\n    def get_cross_answer(self, line1, line2):\n        len_1 = len(line1)\n        len_2 = len(line2)\n        changed_count = 0\n        one_count = 0\n        for i in range(len_1 // 2):\n            if line1[i] != line1[-i - 1]:\n                changed_count += 1\n            if line1[i] == 1:\n                one_count += 1\n            if line1[-i - 1] == 1:\n                one_count += 1\n        for i in range(len_2 // 2):\n            if line2[i] != line2[-i - 1]:\n                changed_count += 1\n            if line2[i] == 1:\n                one_count += 1\n            if line2[-i - 1] == 1:\n                one_count += 1\n        \n        one_count = one_count % 4\n        one_count = min(one_count, 4 - one_count)\n        ret = changed_count\n        if one_count > changed_count:\n            ret += one_count - changed_count\n        if line1[len_1 // 2] == 1:\n            ret += 1\n        return ret\n        \n\n    def minFlips(self, grid: List[List[int]]) -> int:\n        row_num = len(grid)\n        col_num = len(grid[0])\n        ans = 0\n        for row_id in range(row_num // 2):\n            for col_id in range(col_num // 2):\n                ans += self.get_count_for_pos(grid, row_id, col_id)\n                print(row_id, col_id, ans)\n    \n        if row_num % 2 == 1 and col_num % 2 == 0:\n            # only row, four req\n            print(1)\n            ans += self.get_answer(grid[row_num // 2], True)\n        elif col_num % 2 == 1 and row_num % 2 == 0:\n            print(2)\n            ans += self.get_answer([item[col_num // 2] for item in grid], True)\n        elif row_num == 1 and col_num % 2 == 1:\n            print(3)\n            ans += self.get_answer(grid[row_num // 2], True)\n        elif col_num == 1 and row_num % 2 == 1:\n            print(4)\n            ans += self.get_answer([item[col_num // 2] for item in grid], True)\n        elif col_num % 2 == 1 and row_num % 2 == 1:\n            print(5)\n            ans += self.get_cross_answer(grid[row_num // 2], [item[col_num // 2] for item in grid])\n\n        return ans",
    "submit_ts": "1722698860",
    "subm_id": "552272884"
}