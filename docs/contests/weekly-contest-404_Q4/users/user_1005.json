{
    "username": "alwayssmile99",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def getCenter(edges):\n            n = len(edges) + 1\n            if n == 1:\n                return [0]\n            adj = defaultdict(set)\n            for u, v in edges:\n                adj[u].add(v)\n                adj[v].add(u)\n\n            q = deque([u for u, neiList in adj.items() if len(neiList) == 1])\n            remainVertices = n\n            while q and remainVertices > 2:\n                for _ in range(len(q)):\n                    cur = q.popleft()\n                    remainVertices -= 1\n                    for nei in adj[cur]:\n                        adj[nei].remove(cur)\n                        if len(adj[nei]) == 1:\n                            q.append(nei)\n            return q\n\n        n = len(edges1) + 1\n\n        center1, center2 = getCenter(edges1)[0], getCenter(edges2)[0]\n        for edge in edges2:\n            edge[0] += n\n            edge[1] += n\n        center2 += n\n        adj = defaultdict(list)\n        for u, v in edges1:\n            adj[u].append(v)\n            adj[v].append(u)\n        for u, v in edges2:\n            adj[u].append(v)\n            adj[v].append(u)\n        adj[center1].append(center2)\n        adj[center2].append(center1)\n\n        return self.findDiameter(adj)\n\n    def findDiameter(self, adj):\n        def dfs(src, d, seen):\n            if src in seen:\n                return 0, src\n            seen.add(src)\n            maxD = d\n            ans = src\n            for nei in adj[src]:\n                candD, candAns = dfs(nei, d + 1, seen)\n                if candD > maxD:\n                    maxD, ans = candD, candAns\n            return maxD, ans\n\n        _, first = dfs(0, 0, set())\n        d, second = dfs(first, 0, set())\n        return d\n",
    "submit_ts": "1719718277",
    "subm_id": "1304413215"
}