{
    "username": "heerkshah434",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        long long cost = 0;\n        sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n\n        int hori = 1, verti = 1;\n        int i = 0, j = 0;\n\n        while (i < horizontalCut.size() || j < verticalCut.size()) {\n            if (j == verticalCut.size() || (i < horizontalCut.size() && horizontalCut[i] >= verticalCut[j])) {\n                cost = (cost + (long long)horizontalCut[i] * verti);\n                hori++;\n                i++;\n            } else {\n                // Choose vertical cut\n                cost = (cost + (long long)verticalCut[j] * hori);\n                verti++;\n                j++;\n            }\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720925323",
    "subm_id": "1320250751"
}