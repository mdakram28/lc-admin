{
    "username": "Grind_Like_GM",
    "submission": "use std::collections::BTreeSet;\n\nimpl Solution {\n    pub fn shortest_distance_after_queries(n: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut distances = vec![0; n as usize];\n        for i in 1..n as usize {\n            distances[i] = distances[i - 1] + 1;\n        }\n\n        let mut city_set = BTreeSet::new();\n        for i in 0..n {\n            city_set.insert(i);\n        }\n\n        let mut result = Vec::new();\n\n        for query in queries {\n            let left_city = query[0];\n            let right_city = query[1];\n\n            let lower_bound = city_set.range(left_city + 1..).next();\n            let upper_bound = city_set.range(right_city..).next();\n\n            if let Some(&lower_bound_city) = lower_bound {\n                if let Some(&upper_bound_city) = upper_bound {\n                    let mut cities_to_remove = Vec::new();\n                    for city in city_set.range(lower_bound_city..upper_bound_city) {\n                        cities_to_remove.push(*city);\n                    }\n                    for city in cities_to_remove {\n                        city_set.remove(&city);\n                    }\n                }\n            }\n\n            result.push((city_set.len() - 1) as i32);\n        }\n\n        result\n    }\n}\n\n",
    "submit_ts": "1722743825",
    "subm_id": "1343800538"
}