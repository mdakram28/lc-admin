{
    "username": "qb_2008",
    "submission": "class Solution {\npublic:\n    struct Node {\n        int64_t max_no_edge = 0;\n        int64_t max_with_left_edge = 0;\n        int64_t max_with_right_edge = 0;\n        int64_t max_with_both_edge = 0;\n    };\n    \n    vector<Node> s;\n    int n;\n    \n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        createSegTree(nums);\n        int64_t res = 0;\n        for (auto& q : queries) {\n            int pos = q[0];\n            int x = q[1];\n            updateSegTree(0, 0, n - 1, pos, x);\n            res += s[0].max_with_both_edge;\n            res %= 1000000007;\n        }\n        return res;\n    }\n    \n    void createSegTree(vector<int>& nums) {\n        n = 1;\n        while (n < nums.size()) {\n            n <<= 1;\n        }\n        s.clear();\n        s = vector<Node>(n * 2 + 1);\n        initSegTree(0, 0, n - 1, nums);\n    }\n    \n    void initSegTree(int curr, int low, int high, vector<int>& nums) {\n        if (low == high) {\n            if (low < nums.size()) {\n                s[curr].max_with_both_edge = max(0, nums[low]);\n            }\n            return;\n        }\n        int mid = (low + high) / 2;\n        int left = curr * 2 + 1;\n        int right = curr * 2 + 2;\n        initSegTree(left, low, mid, nums);\n        initSegTree(right, mid + 1, high, nums);\n        sumSegTreeNode(curr, left, right);\n    }\n    \n    void updateSegTree(int curr, int low, int high, int pos, int x) {\n        if (low == high) {\n            s[curr].max_with_both_edge = max(0, x);\n            return;\n        }\n        int mid = (low + high) / 2;\n        int left = curr * 2 + 1;\n        int right = curr * 2 + 2;\n        if (pos <= mid) {\n            updateSegTree(left, low, mid, pos, x);\n        } else {\n            updateSegTree(right, mid + 1, high, pos, x);\n        }\n        sumSegTreeNode(curr, left, right);\n    }\n    \n    void sumSegTreeNode(int curr, int left, int right) {\n        s[curr].max_no_edge = max(s[left].max_with_right_edge + s[right].max_no_edge, s[left].max_no_edge + s[right].max_with_left_edge);\n        s[curr].max_with_left_edge = max(s[left].max_with_both_edge + s[right].max_no_edge, s[left].max_with_left_edge + s[right].max_with_left_edge);\n        s[curr].max_with_right_edge = max(s[left].max_with_right_edge + s[right].max_with_right_edge, s[left].max_no_edge + s[right].max_with_both_edge);\n        s[curr].max_with_both_edge = max(s[left].max_with_both_edge + s[right].max_with_right_edge, s[left].max_with_left_edge + s[right].max_with_both_edge);\n    }\n    \n    \n};",
    "submit_ts": 1716692580.0
}