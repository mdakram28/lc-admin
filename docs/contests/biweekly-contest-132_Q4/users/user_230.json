{
    "username": "Nandy_Tragic",
    "submission": "class Solution {\npublic:\n    \n//     int maximumLength(vector<int>& nums, int k) {\n        \n//         int n = nums.size();\n        \n//         vector<vector<int>>dp(n+1, vector<int>(k+1, 0));\n        \n//         for(int i=n-1;i>=0;i--){\n//             for(int p=i+1;p<n;p++){\n//                 for(int j=k;j>=0;j--){\n//                     int diff = (nums[i] != nums[p] ? 1 : 0);\n//                     if(diff <= j){\n//                         dp[i][j] = max(dp[i][j], 1 + dp[p][j - diff]);\n//                     }\n//                 }\n//             }    \n//         }\n        \n//         int maxLen = 0;\n//         for(int i=0;i<n;i++){\n//             for(int j=0;j<=k;j++){\n//                 maxLen = max(maxLen, 1 + dp[i][j]);\n//             }\n//         }\n//         return maxLen;\n//     }\n    \n     int maximumLength(vector<int>& nums, int k) {\n        // Initialize dp with tuples containing (int, set, unordered_map)\n        vector<tuple<int, unordered_set<int>, unordered_map<int, int>>> dp(k + 1, {0, {}, {}});\n\n        for (int i : nums) {\n            int prev = 0;\n            for (int j = 0; j <= k; ++j) {\n                auto& [max_len, num_set, counter] = dp[j];\n\n                int cur = max({prev + 1, (max_len + 1) * (num_set.find(i) != num_set.end()), counter[i] + 1});\n\n                prev = max_len;\n                counter[i] = cur;\n\n                if (max_len < cur) {\n                    max_len = cur;\n                    num_set = {i};\n                } else if (max_len == cur) {\n                    num_set.insert(i);\n                }\n            }\n        }\n        return get<0>(dp[k]);\n    }\n};",
    "submit_ts": 1717861093.0
}