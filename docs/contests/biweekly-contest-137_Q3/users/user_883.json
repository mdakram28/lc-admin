{
    "username": "Sathi Rupa Sri Harindra Reddy",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        List<int[]> candidates = collectTopCandidates(board);\n        return findMaximumSum(candidates);\n    }\n    \n    private List<int[]> collectTopCandidates(int[][] board) {\n        List<int[]> candidates = new ArrayList<>();\n        for (int[] row : board) {\n            PriorityQueue<int[]> rowMaxHeap = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n            for (int col = 0; col < row.length; col++) {\n                rowMaxHeap.add(new int[]{row[col], Arrays.asList(board).indexOf(row), col});\n            }\n            addTopElements(candidates, rowMaxHeap);\n        }\n        return candidates;\n    }\n    \n    private void addTopElements(List<int[]> candidates, PriorityQueue<int[]> rowMaxHeap) {\n        for (int i = 0; i < 3 && !rowMaxHeap.isEmpty(); i++) {\n            candidates.add(rowMaxHeap.poll());\n        }\n    }\n    \n    private long findMaximumSum(List<int[]> candidates) {\n        long totalMaxSum = Long.MIN_VALUE;\n        int numCandidates = candidates.size();\n\n        for (int i = 0; i < numCandidates - 2; i++) {\n            for (int j = i + 1; j < numCandidates - 1; j++) {\n                for (int k = j + 1; k < numCandidates; k++) {\n                    int[] a = candidates.get(i);\n                    int[] b = candidates.get(j);\n                    int[] c = candidates.get(k);\n\n                    if (areDistinct(a, b, c)) {\n                        long currentSum = (long) a[0] + b[0] + c[0];\n                        totalMaxSum = Math.max(totalMaxSum, currentSum);\n                    }\n                }\n            }\n        }\n\n        return totalMaxSum;\n    }\n    \n    private boolean areDistinct(int[] a, int[] b, int[] c) {\n        return a[1] != b[1] && a[1] != c[1] && b[1] != c[1] && a[2] != b[2] && a[2] != c[2] && b[2] != c[2];\n    }\n}",
    "submit_ts": "1723909105",
    "subm_id": "1359179733"
}