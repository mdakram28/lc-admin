{
    "username": "RopoC",
    "submission": "class Solution {\npublic:\n    vector<pair<int, int>> getMax3(vector<int>& row) {\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        for (int i = 0 ;i < row.size(); i++) {\n            pq.push({row[i], i});\n            if (pq.size() > 3)\n                pq.pop();\n        }\n\n        vector<pair<int, int>> res;\n        while (pq.size() > 0) {\n            res.push_back(pq.top());\n            pq.pop();\n        }\n\n        return res;\n    }\n\n    long long gMaxSum(int left, long long curr, vector<pair<int, int>> used, const multimap<int, pair<int, int>>& maxMap) {\n        if (left == 0)\n            return curr;\n        \n        long long cM = LLONG_MIN;\n        int toVis = left + 1;\n        for (auto it = maxMap.rbegin(); it != maxMap.rend(); it++) {\n            if (toVis <= 0) break;\n\n            const auto& loc = it->second;\n            bool works = true;\n            for (auto [r, c] : used) {\n                if (loc.first == r || loc.second == c) {\n                    works = false;\n                    break;\n                }\n            }\n\n            if (!works)\n                continue;\n\n            used.push_back(loc);\n            cM = max(cM, gMaxSum(left - 1, curr + it->first, used, maxMap));\n            used.pop_back();\n            toVis--;\n        }\n\n        return cM;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        multimap<int, pair<int, int>> maxMap;\n        for (int i = 0; i< board.size(); i++) {\n            auto m3 = getMax3(board[i]);\n            for (auto [v, col] : m3) {\n                maxMap.insert({v, {i, col}});\n            }\n        }\n\n        return gMaxSum(3, 0, {}, maxMap);\n    }\n};",
    "submit_ts": "1723908398",
    "subm_id": "1359150898"
}