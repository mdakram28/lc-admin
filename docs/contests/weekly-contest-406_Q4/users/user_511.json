{
    "username": "launda01",
    "submission": "\n\n#include <vector>\n#include <queue>\n\nclass Solution {\npublic:\n    struct Cut {\n        long long cost;\n        long long type; // 0 for horizontal, 1 for vertical\n        Cut(int c, int t) : cost(c), type(t) {}\n    };\n\n    struct Compare {\n        bool operator()(const Cut &a, const Cut &b) {\n            return a.cost < b.cost; // Max-heap based on cost\n        }\n    };\n\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        std::priority_queue<Cut, std::vector<Cut>, Compare> pq;\n\n        // Push all cuts into the priority queue\n        for (int cost : horizontalCut) {\n            pq.push(Cut(cost, 0));\n        }\n        for (int cost : verticalCut) {\n            pq.push(Cut(cost, 1));\n        }\n\n        long long horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n\n        while (!pq.empty()) {\n            Cut current = pq.top();\n            pq.pop();\n\n            if (current.type == 0) { // Horizontal cut\n                totalCost += current.cost * verticalPieces;\n                horizontalPieces++;\n            } else { // Vertical cut\n                totalCost += current.cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925612",
    "subm_id": "1320260481"
}