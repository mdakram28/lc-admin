{
    "username": "altaf3",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n\n        int minimumChanges = n, maxPair, maxDiff;\n\n        vector<int> possibleValues;\n        unordered_map<int, vector<int>> differenceMap;\n\n        for (int i = 0; i < n / 2; i++) {\n            int difference = abs(nums[i] - nums[n - i - 1]);\n            int possibleMaxValue = max({nums[i], nums[n - i - 1], abs(k - nums[i]), abs(k - nums[n - i - 1])});\n            \n            differenceMap[difference].push_back(possibleMaxValue);\n            possibleValues.push_back(possibleMaxValue);\n        }\n\n        sort(possibleValues.begin(), possibleValues.end());\n\n        for (const auto& pair : differenceMap) {\n            int difference = pair.first;\n            int position = lower_bound(possibleValues.begin(), possibleValues.end(), difference) - possibleValues.begin();\n\n            int totalChanges = position * 2 + ((n / 2) - position);\n\n            for (const auto& value : pair.second) {\n                if (value < difference) {\n                    totalChanges -= 2;\n                } else {\n                    totalChanges -= 1;\n                }\n            }\n\n            minimumChanges = min(minimumChanges, totalChanges);\n        }\n\n        return minimumChanges;\n    }\n};\n",
    "submit_ts": "1721490016",
    "subm_id": "1327470603"
}