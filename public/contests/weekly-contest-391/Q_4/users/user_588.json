{
    "username": "aadiitya",
    "submission": "using ll=long long int;\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& nums) {\n        int n=nums.size();\n        multiset<ll>sum,diff;\n        for(int i=0;i<n;i++)\n        {\n            sum.insert(nums[i][0]+nums[i][1]);\n            diff.insert(nums[i][0]-nums[i][1]);\n        }\n        ll ans=1e9;\n        for(int i=0;i<n;i++)\n        {\n            ll s=nums[i][0]+nums[i][1];\n            ll d=nums[i][0]-nums[i][1];\n            auto it=sum.find(s);\n            auto it2=diff.find(d);\n            sum.erase(it);\n            diff.erase(it2);\n            auto i1=sum.begin();\n            auto i2=sum.end();\n            i2--;\n            auto i3=diff.begin();\n            auto i4=diff.end();\n            i4--;\n            ll summx=max(((*i2)-(*i1)),((*i4)-(*i3)));\n            sum.insert(s);\n            diff.insert(d);\n            ans=min(ans,summx);\n            // cout<<summx<<\" \";\n        }\n        return ans;\n    }\n};"
}