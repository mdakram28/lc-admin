{
    "username": "NatapongS",
    "submission": "#define x first\n#define y second\nconst int N = 1005;\nclass Solution {\npublic:\n    int dsu[N];\n    int find(int x) {\n        if (dsu[x] ==x)return x;\n        return dsu[x] = find(dsu[x]);\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        auto dist = [](pair<int,int> p1, pair<int, int> p2) -> long long {\n            int dx = p1.x - p2.x;\n            int dy = p1.y - p2.y;\n            return 1ll * dx * dx + 1ll * dy * dy;\n        };\n        auto check_cover = [&](pair<int,int> p1, pair<int, int> p2, int r) -> bool {\n            auto d = dist(p1, p2);\n            return 1ll * r * r >= d; \n        } ;\n        auto intersect = [&](pair<int, int> p, int r, int val, bool is_x) -> bool {\n            long long d = p.y - val;\n            if (is_x) {\n                d = p.x - val;\n            }\n            d *= d;\n            int u = p.x;\n            if (is_x) u = p.y;\n            int lim = X;\n            if (is_x) lim = Y;\n            long long diff = 1ll * r * r - d;\n            if (diff < 0) return false;\n            long long v = 1ll * u * u;\n            return (v >= diff && (u <= lim || 1ll * (u - lim) * (u - lim) <= diff)) || (u <= lim && 1ll * (u - lim) * (u - lim) >= diff);\n        };\n        int n = circles.size();\n        vector<vector<int>> gr(n);\n        int id = 0;\n        vector<int> prop(n);\n        for (auto &v: circles) {\n            int x = v[0], y = v[1], r = v[2];\n            if (check_cover(make_pair(x, y), make_pair(0, 0), r) || check_cover(make_pair(x, y), make_pair(X, Y), r)) {\n                return false;\n            }\n            auto p = make_pair(x, y);\n            if (intersect(p, r, 0, true)) {\n                prop[id] |= 1;\n            }\n            if (intersect(p, r, Y, false)) prop[id] |= 2;\n            if (intersect(p, r, X, true)) prop[id] |= 4;\n            if (intersect(p, r, 0, false)) prop[id] |= 8;\n            ++id;\n        }\n        // vector<int> dsu(n);\n        for (int i = 0; i < n; ++i) dsu[i] = i;\n        auto uni = [&](int x, int y) {\n            x = find(x), y = find(y);\n            if (x == y) return;\n            dsu[x] = y;\n            prop[y] |= prop[x];\n        } ;\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                auto p1 = make_pair(circles[i][0], circles[i][1]);\n                auto p2 = make_pair(circles[j][0], circles[j][1]);\n                if (check_cover(p1, p2, circles[i][2] + circles[j][2])) {\n                    uni(i, j);\n                }\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            int par = find(i);\n            if ((prop[par] & 3) && (prop[par] & 12)) return false;\n        }\n        return true;\n\n    }\n};",
    "submit_ts": "1722138571",
    "subm_id": "1335794157"
}