{
    "username": "cpmayank01",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        int vcut = 0, hcut = 0;\n        vector<pair<int, int>> hvalindex(m-1), vvalindex(n-1);\n        \n        int itrh = 0, itrv = 0;\n        \n        for(int i=0; i<n-1; i++){\n            vvalindex[i] = make_pair(verticalCut[i], i);\n        }\n        for(int i=0; i<m-1; i++){\n            hvalindex[i] = make_pair(horizontalCut[i], i);\n        }\n        \n        long long ans = 0;\n        \n        sort(hvalindex.rbegin(), hvalindex.rend());\n        sort(vvalindex.rbegin(), vvalindex.rend());\n        \n        while(vcut < n-1 || hcut < m-1){\n            int hval = INT_MIN, vval = INT_MIN;\n            int hindex = -1, vindex = -1;\n            if(itrh < hvalindex.size()){\n                hval = hvalindex[itrh].first;\n                hindex = hvalindex[itrh].second;\n            }\n            if(itrv < vvalindex.size()){\n                vval = vvalindex[itrv].first;\n                vindex = vvalindex[itrv].second;\n            }\n            if(hval < vval){\n                // vertical cut\n                ans += vval*(hcut+1);\n                vcut ++;\n                itrv ++;\n            }\n            else{\n                // horizontal cut\n                ans += hval*(vcut+1);\n                hcut ++;\n                itrh++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720925821",
    "subm_id": "1320267260"
}