{
    "username": "raaj6395",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = min(node->cost, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        deleteTrie(root);\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    void deleteTrie(TrieNode* node) {\n        for (auto& pair : node->children) {\n            deleteTrie(pair.second);\n        }\n        delete node;\n    }\n};\n",
    "submit_ts": "1720324776",
    "subm_id": "1312407980"
}