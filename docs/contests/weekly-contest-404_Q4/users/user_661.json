{
    "username": "ja235711",
    "submission": "class Solution {\n    int diameter(vector<vector<int>>& edges) {\n        const int n = edges.size() + 1;\n        vector<vector<int>> g(n);\n        vector<int> deg(n);\n        for(auto &e: edges) {\n            g[e[0]].emplace_back(e[1]);\n            g[e[1]].emplace_back(e[0]);\n            deg[e[0]]++;\n            deg[e[1]]++;\n        }\n        queue<int> q;\n        vector<int> pushed(n);\n        int remaining = n;\n        for(int i = 0; i < n; i++) {\n            if (deg[i] <= 1) {\n                q.emplace(i);\n                pushed[i] = 1;\n            }\n        }\n        int res = 0;\n        while(remaining > 2 && q.size() > 0) {\n            int sz = q.size();\n            for(int t = 0; t < sz; t++) {\n                auto u = q.front();\n                q.pop();\n                remaining--;\n                for(auto v: g[u]) {\n                    if (!pushed[v]) {\n                        deg[v]--;\n                        if (deg[v] == 1) {\n                            q.emplace(v);\n                            pushed[v] = 1;\n                        }\n                        break; //deg[u] is 1\n                    }\n                }\n                deg[u] = 0;\n            }\n            res += 2;\n        }\n        \n        if (q.size() == 2) {\n            res += 1;\n        }\n        return res;\n        \n    }\n    int radius(int d) {\n        if (d % 2 == 0) {\n            return d / 2;\n        }\n        return (d + 1) / 2;\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = diameter(edges1);\n        int d2 = diameter(edges2);\n        int r1 = radius(d1);\n        int r2 = radius(d2);\n        //printf(\"d1 = %d, d2 = %d, r1 = %d, r2 = %d\\n\", d1, d2, r1, r2);\n        return max({d1, d2, r1 + 1 + r2});\n    }\n};",
    "submit_ts": 1719718250.0
}