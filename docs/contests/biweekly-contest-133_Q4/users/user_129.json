{
    "username": "lucifer2663",
    "submission": "class Solution {\npublic:\n    const int MOD=1e9+7;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<vector<long long>> dp(n+1, vector<long long>(n*(n-1)/2+1, 0));\n        vector<int> v(n, -1);\n        for(const auto& i:requirements) {\n            v[i[0]]=i[1];\n        }\n        dp[0][0]=1;\n        vector<long long> prSum(n*(n-1)/2+2, 0);\n        \n        for(int i=1; i<=n; i++) {\n            int curr=i&1;\n            int prev=1-curr;\n            fill(dp[curr].begin(), dp[curr].end(), 0);\n            prSum[0]=0;\n            for(int j=0; j<=min(i*(i-1)/2, v[n-1]); j++) {\n                prSum[j+1]=(prSum[j]+dp[prev][j])%MOD;\n                dp[curr][j]=(prSum[j+1]-prSum[max(0, j-i+1)]+MOD)%MOD;\n            }\n            \n            if(v[i-1]!=-1) {\n                if(v[i-1]>i*(i-1)/2) {\n                    return 0;\n                }\n                for(int j=0; j<=i*(i-1)/2; j++) {\n                    if(j!=v[i-1]) {\n                        dp[curr][j]=0;\n                    }\n                }\n            }\n        }\n        \n        return dp[n&1][v[n-1]];\n    }\n};",
    "submit_ts": 1719068344.0
}