{
    "username": "shankhdhar2k19",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        buildTrie(root, words, costs);\n\n        int n = target.size();\n        vector<long long int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            TrieNode* curr = root;\n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                if (curr->children.find(ch) == curr->children.end()) {\n                    break; // No valid word in Trie\n                }\n                curr = curr->children[ch];\n                if (curr->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr->cost);\n                }\n            }\n        }\n\n        long long int result = dp[n];\n        deleteTrie(root);\n        return result == INT_MAX ? -1 : result;\n    }\n\nprivate:\n    // Build Trie from words and costs\n    void buildTrie(TrieNode* root, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* curr = root;\n            for (char ch : words[i]) {\n                if (curr->children.find(ch) == curr->children.end()) {\n                    curr->children[ch] = new TrieNode();\n                }\n                curr = curr->children[ch];\n            }\n            curr->cost = min(curr->cost, costs[i]);\n        }\n    }\n\n    // Delete Trie nodes\n    void deleteTrie(TrieNode* root) {\n        if (!root) return;\n        for (auto& pair : root->children) {\n            deleteTrie(pair.second);\n        }\n        delete root;\n    }\n};",
    "submit_ts": "1720324317",
    "subm_id": "1312396606"
}