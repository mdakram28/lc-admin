{
    "username": "swayam_wish",
    "submission": "class Solution {\npublic:\n    #define Pair pair<int,int>\n    \n    bool insert(int l, int r, set<Pair>& pairs, int& dis) {\n        Pair newPair = {l, r};\n        auto it = pairs.lower_bound({l, INT_MIN});\n        if (it != pairs.begin()) {\n            --it;\n           \n        }\n         if (it->first <= l && r <= it->second) {\n                return false;\n            }\n       \n        dis -= (r - l - 1);\n        pairs.insert(newPair);\n        return true;\n    }\n\n    void findAndRemove(int l, int r, set<Pair>& pairs, int& dis) {\n        auto it = pairs.lower_bound({l, INT_MIN});\n        while (it != pairs.end() && it->first >= l && it->second <= r) {\n            dis += (it->second - it->first - 1);\n            it = pairs.erase(it);\n        }\n    }\n\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        set<Pair> st;\n        int dis = n - 1;\n        \n        for(int i=0; i<n-1; i++){\n            st.insert({i,i+1});\n        }\n        \n        vector<int> ans;\n        for (const auto& query : queries) {\n            int s = query[0], e = query[1];\n            findAndRemove(s, e, st, dis);\n            bool ok = insert(s, e, st, dis);\n           \n          \n        \n            ans.push_back(dis);\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1722742845",
    "subm_id": "1343778442"
}