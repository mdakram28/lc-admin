{
    "username": "dynamo_04",
    "submission": "#include <vector>\n#include <algorithm>\n#include <iostream>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n      \n        vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n        dp[0][0] = 1;  \n     \n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                dp[len][inv] = 0;\n                for (int k = 0; k < len; k++) {\n                    if (inv - k >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n        }\n\n\n        vector<int> requiredInversions(n, -1);\n        for (const auto& req : requirements) {\n            requiredInversions[req[0]] = req[1];\n        }\n        \n     \n        vector<vector<int>> dp2(n + 1, vector<int>(401, 0));\n        dp2[0][0] = 1; \n        \n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                dp2[len][inv] = 0;\n                for (int k = 0; k < len; k++) {\n                    if (inv - k >= 0) {\n                        dp2[len][inv] = (dp2[len][inv] + dp2[len - 1][inv - k]) % MOD;\n                    }\n                }\n                if (requiredInversions[len - 1] != -1 && inv != requiredInversions[len - 1]) {\n                    dp2[len][inv] = 0;\n                }\n            }\n        }\n        \n        int result = 0;\n        for (int inv = 0; inv <= 400; inv++) {\n            result = (result + dp2[n][inv]) % MOD;\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": "1719068323",
    "subm_id": "1296761251"
}