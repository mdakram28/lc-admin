{
    "username": "ravikumar50",
    "submission": "import java.util.*;\n\nclass Solution {\n    \n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length;\n        int m = edges2.length;\n        List<List<Integer>> arr1 = new ArrayList<>(n + 1);\n        List<List<Integer>> arr2 = new ArrayList<>(m + 1);\n        \n        \n        for (int i = 0; i <= n; i++) {\n            arr1.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i <= m; i++) {\n            arr2.add(new ArrayList<>());\n        }\n\n        for (int[] edge : edges1) {\n            arr1.get(edge[0]).add(edge[1]);\n            arr1.get(edge[1]).add(edge[0]);\n        }\n\n        for (int[] edge : edges2) {\n            arr2.get(edge[0]).add(edge[1]);\n            arr2.get(edge[1]).add(edge[0]);\n        }\n        \n        int x[] = new int[1000];\n        Arrays.fill(x,10);\n\n        int diameter1 = findDiameter(arr1);\n        int diameter2 = findDiameter(arr2);\n\n        int minDiameter = Math.max(Math.max(diameter1, diameter2), (diameter1 + 1) / 2 + 1 + (diameter2 + 1) / 2);\n\n        return minDiameter;\n    }\n\n    private Pair<Integer, Integer> bfs(int start, List<List<Integer>> adj) {\n        int n = adj.size();\n        int[] dist = new int[n];\n        Arrays.fill(dist, -1);\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(start);\n        dist[start] = 0;\n\n        int farthestNode = start;\n        int maxDistance = 0;\n\n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n\n            for (int neighbor : adj.get(node)) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    queue.add(neighbor);\n\n                    if (dist[neighbor] > maxDistance) {\n                        maxDistance = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return new Pair<>(farthestNode, maxDistance);\n    }\n\n    private int findDiameter(List<List<Integer>> adj) {\n        Pair<Integer, Integer> p1 = bfs(0, adj);\n        Pair<Integer, Integer> p2 = bfs(p1.getKey(), adj);\n        return p2.getValue();\n    }\n\n    static class Pair<K, V> {\n        private K key;\n        private V value;\n\n        public Pair(K key, V value) {\n            this.key = key;\n            this.value = value;\n        }\n\n        public K getKey() {\n            return key;\n        }\n\n        public V getValue() {\n            return value;\n        }\n    }\n\n    \n}\n",
    "submit_ts": 1719717522.0
}