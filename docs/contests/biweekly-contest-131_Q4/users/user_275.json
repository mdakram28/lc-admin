{
    "username": "dhakad_239",
    "submission": "class Solution {\npublic:\n    \n    #define ll long long\ntemplate<class T, class U>\n// T -> node, U->update.\nstruct Lsegtree{\n    vector<T>st;\n    vector<U>lazy;\n    ll n;\n    T identity_element;\n    U identity_update;\n    Lsegtree(ll n, T identity_element, U identity_update)\n    {\n        this->n = n;\n        this->identity_element = identity_element;\n        this->identity_update = identity_update;\n        st.assign(4*n,identity_element);\n        lazy.assign(4*n, identity_update);\n    }\n    T combine(T l, T r)\n    {\n        // change this function as required.\n        // for sum of range\n        //T ans = (l + r);\n        // for max\n         T ans= max(l,r);\n        // T ans=gcd(l,r);\n        return ans;\n    }\n    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)\n    {\n        if(tl == tr)\n        {\n            st[v] = a[tl];\n            return;\n        }\n        ll tm = (tl + tr)>>1;\n        buildUtil(2*v + 1, tl, tm,a);\n        buildUtil(2*v + 2,tm+1,tr,a);\n        st[v] = combine(st[2*v + 1], st[2*v + 2]);\n    }\n    // change the following 2 functions, and you're more or less done.\n    T apply(T curr, U upd, ll tl, ll tr)\n    {\n      // assign a value to a range\n\n       // T ans = (tr-tl+1)*upd;\n        // increment by value\n        // T ans=curr+(tr-tl+1)*upd;\n        // for taking max;\n        T ans=upd;\n        return ans;\n    }\n    U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)\n    {\n      // for assigning a value\n        U ans = old_upd;\n        ans=new_upd;\n        // adding a value;\n        // ans=old-upd+new-upd;\n        // for maximum \n       // ans=max(old_upd,new_upd);\n        return ans;\n    }  \n    void push_down(ll v, ll tl, ll tr)\n    {\n        if(lazy[v] == identity_update)return;\n        st[v] = apply(st[v], lazy[v], tl, tr);\n        if(2*v + 2 < 4*n)\n        {\n            ll tm = (tl + tr)>>1;\n            lazy[2*v + 1] = combineUpdate(lazy[2*v+1], lazy[v], tl, tm);\n            lazy[2*v + 2] = combineUpdate(lazy[2*v+2], lazy[v], tm+1,tr);            \n        }\n        lazy[v] = identity_update;\n    }\n    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)\n    {\n        push_down(v,tl,tr);\n        if(l > r)return identity_element;\n        if(tr < l or tl > r)\n        {\n            return identity_element;\n        }\n        if(l <= tl and r >= tr)\n        {\n            return st[v];\n        }\n        ll tm = (tl + tr)>>1;\n        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));\n    }\n \n    void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)\n    {\n        push_down(v,tl,tr); \n        if(tr < l or tl > r)return;\n        if(tl >=l and tr <=r)\n        {\n            lazy[v] = combineUpdate(lazy[v],upd,tl,tr);\n            push_down(v,tl,tr);\n        }\n        else\n        {\n            ll tm = (tl + tr)>>1;\n            updateUtil(2*v+1,tl,tm,l,r,upd);\n            updateUtil(2*v+2,tm+1,tr,l,r,upd);\n            st[v] = combine(st[2*v + 1], st[2*v+2]);\n        }\n    }\n\n\n\n    void build(vector<T>a)\n    {\n        assert(a.size() == n);\n        buildUtil(0,0,n-1,a);\n    }\n    T query(ll l, ll r)\n    {\n        return queryUtil(0,0,n-1,l,r);\n    }\n    void update(ll l,ll r, U upd)\n    {\n        updateUtil(0,0,n-1,l,r,upd);\n    }\n};\n    \n    vector<bool> getResults(vector<vector<int>>& q) {\n        ll ma=0;\n        for(auto it:q){\n            if(it.size()==3){\n                ll x=it[1];\n                ma=max(ma,x);\n}\n        }\n        vector<bool>ans;\n            vector<ll>v(ma+1,0);\n            v[0]=ma;\n            Lsegtree<ll,ll>st(ma+1,LLONG_MIN,0);\n\t        st.build(v);\n            set<ll>s;\n           s.insert(0);\n        for(auto it:q){\n            if(it.size()==2){\n                ll x=it[1];\n                if(ma>=x){\n                auto it1=s.upper_bound(x);\n                if(it1==s.end()){\n                    st.update(x,x,ma-x);\n                    it1--;\n                    st.update(*it1,*it1,x-*it1);\n                }\n                else{\n                    st.update(x,x,*it1-x);\n                    it1--;\n                    st.update(*it1,*it1,x-*it1);\n                }\n                s.insert(x);\n                      }\n            }\n            else{\n                ll x=it[1];\n                ll y=it[2];\n                x-=y;\n                if(x>=0){\n                ll m=st.query(0,x);\n                    if(m>=y){\n                        ans.push_back(1);\n                    }\n                    else{\n                        ans.push_back(0);\n                    }\n                }\n                else{\n                    ans.push_back(0);\n                }\n            }\n        }\n        return ans;\n        }\n\n};",
    "submit_ts": 1716651779.0
}