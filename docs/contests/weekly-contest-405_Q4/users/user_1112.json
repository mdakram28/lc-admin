{
    "username": "sparklehsr",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        int n = words.size();\n        for(int i = 0; i < n; i++) insert(root, words[i], costs[i]);\n        vector<int> memo(target.size(), -1);\n        int result = dfs(root, target, 0, 0, memo);\n        return result == INT_MAX ? -1 : result;\n    }\n\nprivate:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost = INT_MAX;\n    };\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for(char c : word) {\n            if(!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    int dfs(TrieNode* root, const string& target, int currCost, int index, vector<int>& memo) {\n        if(index == target.size()) return 0;\n        if(memo[index] != -1) return memo[index];\n\n        TrieNode* node = root;\n        int ans = INT_MAX;\n\n        for(int i = index; i < target.size(); i++) {\n            if(!node->children.count(target[i])) break;\n            node = node->children[target[i]];\n            if(node->cost != INT_MAX) {\n                int cost = dfs(root, target, currCost + node->cost, i + 1, memo);\n                if (cost != INT_MAX) {\n                    ans = min(ans, cost + node->cost);\n                }\n            }\n        }\n        memo[index] = ans;\n        return ans;\n    }\n};\n",
    "submit_ts": "1720323167",
    "subm_id": "1312368952"
}