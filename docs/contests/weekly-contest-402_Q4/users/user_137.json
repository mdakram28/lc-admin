{
    "username": "tiger2005",
    "submission": "class Solution {\npublic:\n  vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n    vector<int> tmp = nums;\n    int n = nums.size();\n    vector<int> BIT(n + 1);\n    auto add = [&] (int a, int x) {\n      while (a <= n) {\n        BIT[a] += x;\n        a += a & (-a);\n      }\n    };\n    auto que = [&] (int a) {\n      int res = 0;\n      while (a) {\n        res += BIT[a];\n        a -= a & (-a);\n      }\n      return res;\n    };\n\n    vector<bool> vb(n);\n    auto calc = [&] (int idx) {\n      if (idx <= 0 || idx >= n - 1)\n        return;\n      int y = -1 * vb[idx];\n      y += vb[idx] = (tmp[idx] > tmp[idx - 1] && tmp[idx] > tmp[idx + 1]);\n      if (y)\n        add(idx + 1, y);\n    };\n\n    vector<int> ans;\n    for (int i = 1; i < n - 1; i ++)\n      calc(i);\n\n    for (auto e: queries) {\n      int op = e[0];\n      int l = e[1], r = e[2];\n      if (op == 1)\n        ans.push_back(r > l + 1 ? que(r) - que(l + 1) : 0);\n      else {\n        tmp[l] = r;\n        calc(l - 1);\n        calc(l);\n        calc(l + 1);\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": 1718505770.0
}