{
    "username": "AndyLead",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        vector<int> prev(nums.size(), -1);\n        map<int, int> last;\n        for(int i = 0; i < nums.size(); i++) {\n            if(last.contains(nums[i])) prev[i] = last[nums[i]];\n            last[nums[i]] = i;\n        }\n\n        vector<int> dp(nums.size());\n        for(int i = 0; i < dp.size(); i++) {\n            dp[i] = 1;\n            if(prev[i] != -1) dp[i] += dp[prev[i]];\n        }\n\n        for(int c = 1; c <= k; c++) {\n            vector<int> next = dp;\n            int maximum = 1;\n\n            for(int i = 1; i < next.size(); i++) {\n                if(prev[i] != -1) next[i] = max(next[i], 1 + next[prev[i]]);\n                next[i] = max(next[i], 1 + maximum);\n                maximum = max(maximum, dp[i]);\n            }\n\n            swap(dp, next);\n        }\n        return *ranges::max_element(dp);\n    }\n};",
    "submit_ts": 1717860463.0
}