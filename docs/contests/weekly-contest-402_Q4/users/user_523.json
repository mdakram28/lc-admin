{
    "username": "apometta",
    "submission": "class Node:\n    def __init__(self, lo, hi):\n        self.lo = lo\n        self.hi = hi\n        self.peaks = 0\n        \n        if lo < hi:\n            self.mid = (lo + hi) // 2 #mid < hi\n            self.left = Node(lo, self.mid)\n            self.right = Node(self.mid + 1, hi)\n        else:\n            self.mid = lo\n            self.left = self.right = None\n    \n    def increment(self, index):\n        self.peaks += 1\n        if self.lo == self.hi: return\n        elif index <= self.mid: self.left.increment(index)\n        else: self.right.increment(index)\n    \n    def decrement(self, index):\n        self.peaks -= 1\n        if self.lo == self.hi: return\n        elif index <= self.mid: self.left.decrement(index)\n        else: self.right.decrement(index)\n            \n    def get_peaks(self, lower_bound, upper_bound):\n        if lower_bound == self.lo and upper_bound == self.hi: return self.peaks\n        elif upper_bound <= self.mid: return self.left.get_peaks(lower_bound, upper_bound)\n        elif lower_bound > self.mid: return self.right.get_peaks(lower_bound, upper_bound)\n        else: return self.left.get_peaks(lower_bound, self.mid) + self.right.get_peaks(self.mid + 1, upper_bound)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(i):\n            nonlocal nums\n            if i <= 0 or i >= len(nums) - 1: return False\n            else: return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n        \n        head = Node(0, len(nums))\n        answers = []\n        \n        for i in range(1, len(nums) - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                head.increment(i)\n        \n        for query, l, r in queries:\n            if query == 1:\n                if r - l <= 1:\n                    answers.append(0)\n                else:\n                    count = head.get_peaks(l, r)\n                    if is_peak(l): count -= 1\n                    if is_peak(r): count -= 1\n                    answers.append(count)\n                continue\n                \n            i, val = l, r\n            \n            left_was, was, right_was = is_peak(i - 1), is_peak(i), is_peak(i + 1)\n            nums[i] = val\n            left_now, now, right_now = is_peak(i - 1), is_peak(i), is_peak(i + 1)\n            \n            if left_now and not left_was:\n                head.increment(i - 1)\n            elif not left_now and left_was:\n                head.decrement(i - 1)\n            if now and not was:\n                head.increment(i)\n            elif not now and was:\n                head.decrement(i)\n            if right_now and not right_was:\n                head.increment(i + 1)\n            elif not right_now and right_was:\n                head.decrement(i + 1)\n        \n        return answers\n            \n        ",
    "submit_ts": 1718507793.0
}