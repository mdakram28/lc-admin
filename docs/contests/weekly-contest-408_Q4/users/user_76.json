{
    "username": "DedsecKnight",
    "submission": "class Solution {\nprivate:\n    struct DSU {\n        vector<int> dsu;\n        explicit DSU(int n) : dsu(n, -1) {}\n        int find(int u) {\n            if (dsu[u] < 0) return u;\n            return dsu[u] = find(dsu[u]);\n        }\n        void merge(int u, int v) {\n            u = find(u), v = find(v);\n            if (u == v) return;\n            if (dsu[u] > dsu[v]) swap(u, v);\n            dsu[u] += dsu[v];\n            dsu[v] = u;\n        } \n    };\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = int(circles.size());\n        for (int i = 0; i<n; i++) {\n            double d = (circles[i][0] - X) * 1.0 * (circles[i][0] - X) + (circles[i][1] - Y) * 1.0 * (circles[i][1] - Y);\n            if (d <= circles[i][2] * 1.0 * circles[i][2]) return false;\n            d = circles[i][0] * 1.0 * circles[i][0] + circles[i][1] * 1.0 * circles[i][1];\n            if (d <= circles[i][2] * 1.0 * circles[i][2]) return false;\n        }\n        vector<bool> touches_left(n, false), touches_right(n, false);\n        vector<bool> touches_top(n, false), touches_bottom(n, false);\n        DSU dsu{n};\n        auto check_collision_vertical = [&](const vector<int>& circle, int coord) {\n            double theta = circle[2] * 1.0 * circle[2] - (circle[0] - coord) * 1.0 * (circle[0] - coord);\n            if (theta < 0) return false;\n            theta = sqrt(theta);\n            if (circle[1] + theta >= 0 && circle[1] + theta <= Y) return true;\n            if (circle[1] - theta >= 0 && circle[1] - theta <= Y) return true; \n            return false;\n        };\n        auto check_collision_horizontal = [&](const vector<int>& circle, int coord) {\n            double theta = circle[2] * 1.0 * circle[2] - (circle[1] - coord) * 1.0 * (circle[1] - coord);\n            if (theta < 0) return false;\n            theta = sqrt(theta);\n            if (circle[0] + theta >= 0 && circle[0] + theta <= X) return true;\n            if (circle[0] - theta >= 0 && circle[0] - theta <= X) return true; \n            return false;\n        };\n        auto check_circle_intersect = [&](const vector<int>& c1, const vector<int>& c2) -> bool {\n            double d = sqrt(\n                (c1[0] - c2[0]) * 1.0 * (c1[0] - c2[0]) + \n                (c1[1] - c2[1]) * 1.0 * (c1[1] - c2[1])\n            );\n            if (d <= c1[2] - c2[2] || d <= c2[2] - c1[2]) return true;\n            if (d <= c1[2] + c2[2]) return true;\n            return false;\n        };\n        for (int i = 0; i<n; i++) {\n            touches_left[i] = check_collision_vertical(circles[i], 0);\n            touches_right[i] = check_collision_vertical(circles[i], X);\n            touches_top[i] = check_collision_horizontal(circles[i], Y);\n            touches_bottom[i] = check_collision_horizontal(circles[i], 0);\n        }\n        for (int i = 0; i<n; i++) {\n            for (int j = i+1; j<n; j++) {\n                if (check_circle_intersect(circles[i], circles[j])) {\n                    int rep_i = dsu.find(i), rep_j = dsu.find(j);\n                    dsu.merge(i, j);\n                    int rep = dsu.find(i);\n                    touches_left[rep] = touches_left[rep] || touches_left[rep_i] || touches_left[rep_j];\n                    touches_right[rep] = touches_right[rep] || touches_right[rep_i] || touches_right[rep_j];\n                    touches_top[rep] = touches_top[rep] || touches_top[rep_i] || touches_top[rep_j];\n                    touches_bottom[rep] = touches_bottom[rep] || touches_bottom[rep_i] || touches_bottom[rep_j];\n                }\n            }\n        }\n        for (int i = 0; i<n; i++) {\n            if (dsu.dsu[i] < 0) {\n                if (touches_top[i] && touches_bottom[i]) return false;\n                if (touches_left[i] && touches_right[i]) return false;\n                if (touches_top[i] && touches_right[i]) return false;\n                if (touches_left[i] && touches_bottom[i]) return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136466",
    "subm_id": "1335735323"
}