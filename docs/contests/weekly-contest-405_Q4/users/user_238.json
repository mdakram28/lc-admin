{
    "username": "crusifixx",
    "submission": "class Solution {\n    static class TrieNode {\n        TrieNode[] children;\n        List<Pair<Integer, Integer>> wordEnds;\n\n        TrieNode() {\n            children = new TrieNode[26];\n            wordEnds = new ArrayList<>();\n        }\n    }\n\n    static class Trie {\n        TrieNode root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(String word, int index, int cost) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                int idx = c - 'a';\n                if (node.children[idx] == null) {\n                    node.children[idx] = new TrieNode();\n                }\n                node = node.children[idx];\n            }\n            node.wordEnds.add(new Pair<>(index, cost));\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        int[] wordLengths = new int[words.length];\n        for (int i = 0; i < words.length; i++) {\n            wordLengths[i] = words[i].length();\n        }\n\n        TrieNode node = trie.root;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode curr = node;\n            for (int j = i; j < n; ++j) {\n                int idx = target.charAt(j) - 'a';\n                if (curr.children[idx] == null) break;\n                curr = curr.children[idx];\n                for (Pair<Integer, Integer> p : curr.wordEnds) {\n                    int wordIndex = p.getKey();\n                    int wordCost = p.getValue();\n                    int len = wordLengths[wordIndex];\n                    if (i + len <= n) {\n                        dp[i + len] = Math.min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720321556",
    "subm_id": "1312326042"
}