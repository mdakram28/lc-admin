{
    "username": "Sahaj_Gupta",
    "submission": "import bisect\nimport random\nimport re\nimport sys\nimport unittest\nfrom typing import List, Callable\nfrom typing import List\nimport heapq\nimport math\nfrom collections import defaultdict, Counter, deque\nfrom functools import lru_cache, cmp_to_key\nfrom itertools import combinations, accumulate, chain, count\nfrom functools import reduce\nfrom heapq import heappush, heappop, heappushpop, heapify\nfrom operator import xor, mul, add, or_\nfrom functools import lru_cache\nfrom math import inf\nimport random\nfrom itertools import permutations, combinations\n\nfrom decimal import Decimal\n\nimport heapq\nimport copy\n\nfrom sortedcontainers import SortedList\n\ndef max(a, b):\n    return a if a > b else b\n\n\ndef min(a, b):\n    return a if a < b else b\n\n\nMOD = 1_000_000_007\nMAX_INVERSIONS = 400\n\nclass Solution:\n    def numberOfPermutations(self, n, requirements):\n        req_map = {req[0] + 1: req[1] for req in requirements}\n\n        perm_counts = [[0] * (MAX_INVERSIONS + 1) for _ in range(n + 1)]\n        perm_counts[0][0] = 1\n\n        for length in range(1, n + 1):\n            for inv in range(MAX_INVERSIONS + 1):\n                for new_pos in range(length):\n                    prev_inv = inv - new_pos\n                    if prev_inv >= 0:\n                        perm_counts[length][inv] = (perm_counts[length][inv] + perm_counts[length - 1][prev_inv]) % MOD\n\n            if length in req_map:\n                target_inv = req_map[length]\n                for inv in range(MAX_INVERSIONS + 1):\n                    if inv != target_inv:\n                        perm_counts[length][inv] = 0\n\n        result = sum(perm_counts[n]) % MOD\n        return result\n",
    "submit_ts": "1719070243",
    "subm_id": "1296818188"
}