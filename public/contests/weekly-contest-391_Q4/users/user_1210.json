{
    "username": "yuchen1005",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<int> v1 = Cal(points, -1);\n        vector<vector<int>> p1 = points;\n        p1.erase(p1.begin() + v1[1]);\n        vector<int> v2 = Cal(p1, v1[1]);\n        vector<vector<int>> p2 = points;\n        p2.erase(p2.begin() + v1[2]);\n        vector<int> v3 = Cal(p2, v1[2]);\n        // cout << v1[0] << \" \" << v1[1] << \" \" << v1[2] << endl;\n        // cout << v2[0] << endl;\n        // cout << v3[0] << endl;\n        return min(v2[0], v3[0]);\n    }\n    \n    vector<int> Cal(vector<vector<int>>& points, int ignore) {\n        int n = points.size();\n        vector<vector<pair<int, int>>> p(4, vector<pair<int, int>>(n));\n        for(int i = 0; i < n; i++) {\n            p[0][i] = {points[i][0] + points[i][1], i};\n            p[1][i] = {points[i][0] - points[i][1], i};\n            p[2][i] = {-points[i][0] + points[i][1], i};\n            p[3][i] = {-points[i][0] - points[i][1], i};\n        }\n        for(int i = 0; i < 4; i++) { sort(p[i].begin(), p[i].end());}\n        int idx = -1, ma = INT_MIN;\n        for(int i = 0; i < 4; i++) if(p[i][n - 1].first - p[i][0].first > ma) {\n            ma = p[i].back().first - p[i][0].first;\n            idx = i;\n        }\n        return { ma, p[idx].back().second, p[idx][0].second};\n    }\n};"
}