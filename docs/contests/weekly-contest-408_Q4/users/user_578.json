{
    "username": "anjalii_",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        return solve(X, Y, circles);\n    }\n    \n    private boolean solve(int X, int Y, int[][] circles) {\n        int numCircles = circles.length;\n        List<List<Integer>> graph = new ArrayList<>(numCircles + 4);\n        \n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < numCircles; i++) {\n            int[] circle = circles[i];\n            int cx = circle[0], cy = circle[1], r = circle[2];\n            \n            if (cx <= r) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - cx <= r) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (cy <= r) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - cy <= r) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; j++) {\n                int[] otherCircle = circles[j];\n                double dist = Math.sqrt(Math.pow(cx - otherCircle[0], 2) + Math.pow(cy - otherCircle[1], 2));\n                int radSum = r + otherCircle[2];\n                if (radSum >= dist) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n        \n        return isBlocked == 0;\n    }\n    \n    private int bfs(List<List<Integer>> graph, int start, int target1, int target2, int n) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[n];\n        \n        queue.add(start);\n        visited[start] = true;\n        \n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.add(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        \n        return (visited[target1] || visited[target2]) ? 1 : 0;\n    \n\n    }\n}",
    "submit_ts": "1722138244",
    "subm_id": "1335785863"
}