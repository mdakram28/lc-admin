{
    "username": "alexey_wish",
    "submission": "class WordDictionary:\n    def __init__(self):\n        self.t = defaultdict(WordDictionary)\n        self.iw = False\n        self.cost = inf\n\n    def addWord(self, word: str, c:int) -> None:\n        curr = self\n        for l in word: curr = curr.t[l]\n        curr.iw = True\n        curr.cost = c\n        \n    def search(self, word: str, i = 0, curr = None) -> bool:\n        # check if we at the end\n        if i == len(word): return curr.iw\n        # check if we started\n        if not curr: return self.search(word, i, self)\n        # .\n        if word[i] == '.': return any(self.search(word,i+1, curr.t[l]) for l in curr.t)\n        return self.search(word,i+1, curr.t[word[i]]) if word[i] in curr.t else False\n\nclass Solution:\n    def minimumCost(self, S: str, words: List[str], costs: List[int]) -> int:\n        t = WordDictionary()\n\n        c = defaultdict(lambda: inf)\n        \n        for x,cc in zip(words, costs):\n            c[x] = min(c[x], cc)\n        \n        for x in c:\n            t.addWord(x,c[x])\n        \n        N = len(S)\n        @cache\n        def walk(i):\n            if i == N: return 0\n            ans = inf\n            curr = t\n            for j in range(i, N):\n                if S[j] in curr.t:\n                    curr = curr.t[S[j]]\n                    if curr.iw:\n                        ans = min(ans, curr.cost + walk(j+1))\n                else:\n                    break\n            return ans\n        \n        ans = walk(0)\n        return -1 if ans == inf else ans",
    "submit_ts": "1720323917",
    "subm_id": "1312387188"
}