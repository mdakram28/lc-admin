{
    "username": "mot882000",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n\n        Trie trie = new Trie();\n        int maxlen[] = new int[26];\n        int len[][] = new int[26][target.length()+1];\n        for(int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n            int idx = (int)(words[i].charAt(0)-'a');\n            maxlen[idx] = Math.max(maxlen[idx], words[i].length());\n            len[idx][words[i].length()] = 1;\n        }\n        \n//         for(int i = 0; i < 26; i++) System.out.print(maxlen[i] + \" \"); System.out.println();\n//         System.out.println(target.length());\n        \n        int dp[] = new int[target.length()];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        \n        \n        for(int i = 0; i < target.length(); i++) {\n            trie.search(target, i, target.length(), dp);\n        }\n        \n        \n        return dp[dp.length-1]==Integer.MAX_VALUE?-1:dp[dp.length-1];\n\n    }\n}\n\n\n\n    class Trie{\n        Node rootNode = new Node();\n\n        public Trie(){\n\n        }\n\n        public void insert(String s, int cost) {\n            Node node = rootNode;\n            Node childNode = null;\n\n            for(int i = 0; i < s.length(); i++) {\n                char c = s.charAt(i);\n                childNode = node.childNode.getOrDefault(c, null);\n                if ( childNode == null ) {\n                    node.childNode.put(c, new Node());\n                    childNode = node.childNode.get(c);\n                }\n                \n                node = childNode;\n            }\n            node.cost = Math.min(node.cost, cost);\n        }\n\n        public int search(String s, int start, int end, int dp[]) {\n            \n            Node node = rootNode;\n            Node childNode = null;\n            \n            for(int i = start; i < end; i++) {\n                char c = s.charAt(i);\n                childNode = node.childNode.getOrDefault(c, null);\n                if ( childNode == null ) {\n                    return -1;\n                }\n                node = childNode;\n                if ( node.cost != Integer.MAX_VALUE) {\n                    if ( start-1 >= 0 ) {\n                        if ( dp[start-1] != Integer.MAX_VALUE) {\n                            dp[i] = Math.min(dp[i], dp[start-1] +node.cost);    \n                        }\n                        \n                    } else{\n                        dp[i] = Math.min(dp[i], node.cost);\n                    }\n                }\n            }\n\n            return node.cost;\n        }\n\n    }\n\n     class Node{\n        Map<Character, Node> childNode = new HashMap<Character, Node>();\n        int cost = Integer.MAX_VALUE;\n    }\n",
    "submit_ts": "1720324783",
    "subm_id": "1312408191"
}