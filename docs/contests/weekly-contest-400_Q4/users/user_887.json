{
    "username": "hgwalani81",
    "submission": "#define MAX 33\n\nclass Solution {\npublic:\n    \n    long long getAnd(vector<vector<int> > &dp, int l, int r) {\n        int n = dp.size();\n        long long ans = 0;\n        for(int i = 0; i<MAX; i++) {\n            if(dp[r+1][i] - dp[l][i] == (r-l+1))\n                ans = (ans | (1LL << i));\n        }\n        return ans;\n    }\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int> > dp(n+1, vector<int>(MAX, 0));\n        // memset(dp, 0, sizeof(dp));\n        for(int i = 0; i<n; i++) {\n            for(int j = 0; j<MAX; j++) {\n                dp[i+1][j] = dp[i][j] + (((1LL<<j) & nums[i]) != 0);\n            }\n        }\n        \n        int start = 0, end = 0;\n        long long ans = LLONG_MAX, prev = nums[0];\n        while(end < n) {\n            long long currentAnd = getAnd(dp, start, end);\n            // cout<<start<<\" \"<<end<<\" \"<<prev<<\" \"<<currentAnd<<\" \"<<ans<<endl;\n            ans = min(ans, abs(k - currentAnd));\n            while(start < end and (currentAnd < k)) {\n                prev = currentAnd;\n                start++;\n                currentAnd = getAnd(dp, start, end);\n                ans = min(ans, abs(k - currentAnd));\n                // cout<<\"TWO: \"<<start<<\" \"<<end<<\" \"<<prev<<\" \"<<currentAnd<<\" \"<<ans<<endl;\n            }\n            prev = currentAnd;\n            end++;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717299331",
    "subm_id": "1274809191"
}