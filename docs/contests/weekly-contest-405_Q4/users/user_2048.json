{
    "username": "priyadarshanipriyamvada",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Optimize the word and cost mapping\n        unordered_map<string, int> wordCostMap;\n        for (int i = 0; i < words.size(); ++i) {\n            if (wordCostMap.find(words[i]) == wordCostMap.end() || wordCostMap[words[i]] > costs[i]) {\n                wordCostMap[words[i]] = costs[i];\n            }\n        }\n\n        // Process the target string and update dp array\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;  // Skip if current position is unreachable\n            for (const auto& entry : wordCostMap) {\n                const string& word = entry.first;\n                int len = word.length();\n                if (i + len <= n && target.compare(i, len, word) == 0) {\n                    dp[i + len] = min(dp[i + len], dp[i] + entry.second);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720320149",
    "subm_id": "1312284788"
}