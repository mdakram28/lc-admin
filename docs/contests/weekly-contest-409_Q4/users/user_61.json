{
    "username": "timetoai",
    "submission": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        from sortedcontainers import SortedList, SortedDict\n        sl = SortedList()\n        beg = 0\n        n = len(colors)\n        for i in range(1, len(colors)):\n            if colors[i] == colors[i - 1]:\n                sl.add((beg, i - 1))\n                beg = i\n        sl.add((beg, n - 1))\n        \n        d = SortedDict()\n        for beg, end in sl:\n            d[end - beg + 1] = d.get(end - beg + 1, 0) + 1\n        \n        ret = []\n        for q in queries:\n            if q[0] == 1:\n                s = q[1]\n                ret.append(0)\n                for si in d.irange(s, n):\n                    ret[- 1] += (si - s + 1) * d[si]\n                # edge case\n                if colors[n - 1] != colors[0]:\n                    l, r = sl[len(sl) - 1][1] - sl[len(sl) - 1][0] + 1, sl[0][1] - sl[0][0] + 1\n                    # print(sl, s, l, r)\n                    ret[- 1] += max(0, min(l, s - 1) - max(1, s - r) + 1)\n            else:\n                i, c = q[1:]\n                if colors[i] != c:\n                    colors[i] = c\n                    ind = sl.bisect_left((i, i))\n                    if ind == len(sl) or sl[ind][0] > i:\n                        ind -= 1\n                    # print(\"before split\", sl)\n                    # split prev\n                    if not sl[ind][0] == sl[ind][1] == i:\n                        beg, end = sl[ind]\n                        sl.pop(ind)\n                        d[end - beg + 1] -= 1\n                        if d[end - beg + 1] == 0:\n                            del d[end - beg + 1]\n                        \n                        if beg <= i - 1:\n                            sl.add((beg, i - 1))\n                            d[i - beg] = d.get(i - beg, 0) + 1\n                            \n                        sl.add((i, i))\n                        d[1] = d.get(1, 0) + 1\n                        \n                        if i + 1 <= end:\n                            sl.add((i + 1, end))\n                            d[end - i] = d.get(end - i, 0) + 1\n                            \n                        ind = sl.bisect_left((i, i))\n                    # print(\"split\", i, sl)\n                        \n                    # merge with new\n                    # left\n                    if ind > 0 and colors[sl[ind - 1][1]] != colors[sl[ind][0]]:\n                        beg, end = sl[ind - 1][0], sl[ind][1]\n                        for l in (sl[ind - 1][1] - sl[ind - 1][0] + 1, sl[ind][1] - sl[ind][0] + 1):\n                            d[l] -= 1\n                            if d[l] == 0:\n                                del d[l]\n                        sl.pop(ind)\n                        sl.pop(ind - 1)\n                        sl.add((beg, end))\n                        d[end - beg + 1] = d.get(end - beg + 1, 0) + 1\n                        ind -= 1\n                    # right\n                    if ind + 1 < len(sl) and colors[sl[ind][1]] != colors[sl[ind + 1][0]]:\n                        beg, end = sl[ind][0], sl[ind + 1][1]\n                        for l in (sl[ind + 1][1] - sl[ind + 1][0] + 1, sl[ind][1] - sl[ind][0] + 1):\n                            d[l] -= 1\n                            if d[l] == 0:\n                                del d[l]\n                        sl.pop(ind + 1)\n                        sl.pop(ind)\n                        sl.add((beg, end))\n                        d[end - beg + 1] = d.get(end - beg + 1, 0) + 1\n                    # print(\"merge\", i, sl)\n        \n        return ret\n        ",
    "submit_ts": "1722742577",
    "subm_id": "1343772165"
}