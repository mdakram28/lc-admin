{
    "username": "Now_say_my_name",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> tree1, tree2;\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int size1 = edges1.size() + 1;\n        int size2 = edges2.size() + 1;\n        tree1.resize(size1);\n        tree2.resize(size2);\n\n        for (const auto& edge : edges1) {\n            tree1[edge[0]].push_back(edge[1]);\n            tree1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            tree2[edge[0]].push_back(edge[1]);\n            tree2[edge[1]].push_back(edge[0]);\n        }\n\n        auto depthFirstSearch = [&](auto&& self, const vector<vector<int>>& graph, int vertex, vector<int>& distances) -> pair<int, int> {\n            int maxDistVertex = vertex;\n            for (int neighbor : graph[vertex]) {\n                if (distances[neighbor] == -1) {\n                    distances[neighbor] = distances[vertex] + 1;\n                    auto [farVertex, farDist] = self(self, graph, neighbor, distances);\n                    if (farDist > distances[maxDistVertex]) {\n                        maxDistVertex = farVertex;\n                    }\n                }\n            }\n            return {maxDistVertex, distances[maxDistVertex]};\n        };\n\n        auto findFarthestVertex = [&](const vector<vector<int>>& graph, int start) {\n            int graphSize = graph.size();\n            vector<int> distances(graphSize, -1);\n            distances[start] = 0;\n            return depthFirstSearch(depthFirstSearch, graph, start, distances);\n        };\n\n        auto calculateDiameter = [&](const vector<vector<int>>& graph) {\n            auto [startVertex, _] = findFarthestVertex(graph, 0);\n            auto [endVertex, diameter] = findFarthestVertex(graph, startVertex);\n            return diameter;\n        };\n\n        int diameter1 = calculateDiameter(tree1);\n        int diameter2 = calculateDiameter(tree2);\n\n        // Minimum possible diameter of the resulting tree\n        return max(diameter1, max(diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1));\n    }\n};\n",
    "submit_ts": "1719717506",
    "subm_id": "1304393347"
}