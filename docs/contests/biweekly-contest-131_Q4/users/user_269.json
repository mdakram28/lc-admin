{
    "username": "opalXDnaja123",
    "submission": "typedef long long ll;\n\nclass Solution {\npublic:\n    \n    int block[50005], parent[50005], cost[50005];\n    \n    vector<ll> min_seg, max_seg;\n\n    void upd(ll node, ll l, ll r, ll idx, ll val) {\n        if (idx < l || idx > r) {\n            return;\n        }\n        if (l >= r) {\n            if (l == idx) {\n                min_seg[node] = val;\n                max_seg[node] = val;\n            }\n            return;\n        }\n        ll mid = l + (r - l) / 2;\n        ll l_node = 2 * node + 1;\n        ll r_node = 2 * node + 2;\n        upd(l_node, l, mid, idx, val), upd(r_node, mid + 1, r, idx, val);\n        min_seg[node] = min(min_seg[l_node], min_seg[r_node]);\n        max_seg[node] = max(max_seg[l_node], max_seg[r_node]);\n    }\n\n    ll query(ll node, ll l, ll r, ll l_query, ll r_query) {\n        if (l_query <= l && r_query >= r) {\n            return max_seg[node];\n        }\n        if (l_query > r || r_query < l) {\n            return -1000000000000;\n        }\n        ll mid = l + (r - l) / 2;\n        ll l_node = 2 * node + 1;\n        ll r_node = 2 * node + 2;\n        return max(query(l_node, l, mid, l_query, r_query), query(r_node, mid + 1, r, l_query, r_query));\n    }\n    \n    int root(int p) {\n        return (p == parent[p] ? p : parent[p] = root(parent[p]));\n    }\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = 50001;\n        max_seg.resize(4 * n, 0);\n        min_seg.resize(4 * n, 0);\n        for (auto e : queries) {\n            if (e[0] == 1) {\n                int x = e[1];\n                block[x] = 1;\n            }\n        }\n        block[50000] = 1;\n        int par = 0, sz = 0;\n        for (int i = 1; i <= 50000; i++) {\n            parent[i] = par;\n            sz++;\n            if (block[i]) {\n                upd(0, 0, n - 1, par, sz);\n                cost[par] = sz;\n                sz = 0;\n                par = i + 1;\n            }\n        }\n        reverse(queries.begin(), queries.end());\n        vector<bool> ans;\n        for (auto e : queries) {\n            if (e[0] == 1) {\n                int x = e[1];\n                int u = root(x), v = root(x + 1);\n                if (u == v) {\n                    continue;\n                }\n                parent[v] = u;\n                cost[u] += cost[v];\n                upd(0, 0, n - 1, u, cost[u]);\n            }\n            else {\n                int r = e[1], x = e[2];\n                int v = root(r);\n                int temp = cost[v];\n                upd(0, 0, n - 1, v, r - max(0, v - 1));\n                int val = query(0, 0, n - 1, 0, v);\n                upd(0, 0, n - 1, v, temp);\n                ans.push_back(val >= x);\n            }\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": 1716651107.0
}