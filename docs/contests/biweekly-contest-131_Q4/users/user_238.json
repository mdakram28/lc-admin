{
    "username": "jszqlew",
    "submission": "\n\nconst int mod = 1e9+7;\n\nconst int mxn = 1e5+1;\ntemplate <typename T, int N>\nclass SegmentTree\n{\npublic:\n  array<T, 4 * N> st;\n  array<T, 4 * N> dst;\n  T identity;\n  function<T(const T &, const T &)> merge;\n  function<T(int, int, int, const T &, const T &)> update_merge = [&](int l, int r, int id, const T &org, const T &val)\n  {\n    return merge(org, val);\n  };\n  function<T(int, int, int, const T &, const T &)> delta_merge = update_merge;\n  function<void(int, int, int)> push = [&](int l, int r, int id)\n  {\n    int mid = (l + r) >> 1;\n    int lid = id << 1, rid = id << 1 | 1;\n    st[lid] = dst[id] == -1 ? st[lid] : dst[id];\n    st[rid] = dst[id] == -1 ? st[rid] : dst[id];\n    dst[lid] = dst[rid] = dst[id];\n    dst[id] = -1;\n  };\n  SegmentTree(T identity, function<T(const T &, const T &)> merge) : identity(identity),\n                                                                     merge(merge)\n  {\n    for (int i = 0; i < 4 * N; ++i) st[i] = identity;\n    for (int i=0; i<4*N; ++i) dst[i] = -1;\n  }\n\n  int query(int lo, int hi, int l = 0, int r = N, int id = 1)\n  {\n    if (r <= lo || hi <= l)\n      return identity;\n    if (lo <= l && r <= hi)\n      return st[id];\n    push(l, r, id);\n    int lid = id << 1, rid = id << 1 | 1, mid = (l + r) >> 1;\n    T left = query(lo, hi, l, mid, lid);\n    T right = query(lo, hi, mid, r, rid);\n    return merge(left, right);\n  }\n\n  void update(int lo, int hi, T val, int l = 0, int r = N, int id = 1)\n  {\n    if (r <= lo || hi <= l)\n      return;\n    if (lo <= l && r <= hi)\n    {\n      st[id] = val;\n      dst[id] = val;\n      return;\n    }\n    push(l, r, id);\n    int lid = id << 1, rid = id << 1 | 1, mid = (l + r) >> 1;\n    update(lo, hi, val, l, mid, lid);\n    update(lo, hi, val, mid, r, rid);\n    st[id] = merge(st[lid], st[rid]);\n  }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n  SegmentTree<int, mxn> st(INT_MIN, [&](int a, int b) {\n    return max(a, b);\n  });\n  st.delta_merge = [&](int l, int r, int id, int other, int curr) { return curr; };\n  st.update_merge = [&](int l, int r, int id, int other, int curr) { return curr; };\n  set<int> fences;\n  fences.insert(0ll);\n  st.update(0, 50001, INT_MAX);\n    vector<bool> output;\n  for (int i=0; i<queries.size(); ++i) {\n    int t, x, sz;\n    t = queries[i][0];\n    x = queries[i][1];\n    if (t == 1) {\n      fences.insert(x);\n      auto below = fences.lower_bound(x);\n      --below;\n      // cout << \"set \" << (*below) << ' ' << x << ' ' << ( x- *below) << endl;\n      st.update(*below, x, x - (*below));\n      auto above = fences.upper_bound(x);\n      if (above != fences.end()) {\n      // cout << \"set \" << x << ' ' << (*above) << ' ' << ((*above) - x) << endl;\n        st.update(x, *above, (*above) - x);\n      }\n    } else {\n      sz = queries[i][2];\n      auto at = fences.upper_bound(x);\n      --at;\n      int rest = x - (*at);\n      int ans = *at == 0 ? 0 : st.query(0, *at);\n      ans = max(ans, rest);\n      output.push_back(sz <= ans);\n    }\n  }\n        return output;\n    }\n};",
    "submit_ts": "1716651020",
    "subm_id": "1267630125"
}