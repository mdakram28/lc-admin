{
    "username": "sahithjbuis",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        min_sum = max_sum = points[0][0] + points[0][1]\n        min_diff = max_diff = points[0][0] - points[0][1]\n        \n        all_sums = []\n        all_diffs = []\n        \n        for x, y in points:\n            sum_ = x + y\n            diff = x - y\n            all_sums.append(sum_)\n            all_diffs.append(diff)\n            min_sum = min(min_sum, sum_)\n            max_sum = max(max_sum, sum_)\n            min_diff = min(min_diff, diff)\n            max_diff = max(max_diff, diff)\n        \n        def new_extrema(index, all_values, current_min, current_max):\n            if all_values[index] == current_min or all_values[index] == current_max:\n                return (min(all_values[:index] + all_values[index+1:]), \n                        max(all_values[:index] + all_values[index+1:]))\n            else:\n                return (current_min, current_max)\n        \n        res = max(max_sum - min_sum, max_diff - min_diff)\n        \n        for i in range(len(points)):\n            new_min_sum, new_max_sum = new_extrema(i, all_sums, min_sum, max_sum)\n            new_min_diff, new_max_diff = new_extrema(i, all_diffs, min_diff, max_diff)\n            res = min(res, max(new_max_sum - new_min_sum, new_max_diff - new_min_diff))\n        \n        return res\n"
}