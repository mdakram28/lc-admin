{
    "username": "luka_wish",
    "submission": "\nclass Node():\n    def __init__(self, val, start, end, left=None, right=None):\n        self.val = val\n        self.start = start\n        self.end = end\n        self.left = left\n        self.right = right\n\n\nclass LineTree(object):\n    def __init__(self, nums):\n        def maketree(i, j):\n            if i > j:\n                return None\n            root = Node(None, i, j)\n            if i == j:\n                return root\n            mid = (i + j) // 2\n            root.left = maketree(i, mid)\n            root.right = maketree(mid + 1, j)\n            return root\n\n        def setval(root):\n            if root:\n                if root.start == root.end:\n                    root.val = nums[root.start]\n                else:\n                    setval(root.left)\n                    setval(root.right)\n                    root.val = root.right.val + root.left.val\n\n        i, j = 0, len(nums) - 1\n        self.root = maketree(i, j)\n        setval(self.root)\n        self.nums = nums\n        return \n\n    def update(self, i, val):\n        change = val - self.nums[i]\n        def revise(root):\n            if root:\n                if root.start <= i <= root.end:\n                    root.val += change\n                    revise(root.left)\n                    revise(root.right)\n\n        revise(self.root)\n        self.nums[i] = val\n        return \n    def sumRange(self, i, j):\n        def readtree(root, i, j):\n            if not root:\n                return 0\n            if i > j:\n                return 0\n            if root.start == i and root.end == j: #\u521a\u597d\u7b49\u4e8e\u6839\u533a\u95f4\n                return root.val\n\n            if root.left and j <= root.left.end:     #\u5168\u5728\u5de6\u6811\n                return readtree(root.left, i, j)\n            elif root.right and i >= root.right.start:          #\u5168\u5728\u53f3\u6811\n                return readtree(root.right, i, j)\n            else:                                       #\u6a2a\u8de8\u5de6\u53f3\u6811\n                # print(i, j, root.left, root.right)\n                a = readtree(root.left, i, root.left.end)\n                b = readtree(root.right, root.right.start, j)\n                return a + b\n            \n        return readtree(self.root, i, j)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        pk = [0,] * n\n        for i in range(1, n - 1):\n            pk[i] = 1 if nums[i - 1] < nums[i] and nums[i + 1] < nums[i] else 0\n        re = []\n        root = LineTree(pk)\n        for q in queries:\n            op, i, j = q\n            op, i, val = q\n            if op == 1:\n                cur = root.sumRange(i+1, j-1)\n                re.append(cur)\n            else:\n                nums[i] = val\n                for j in [i-1, i, i+1]:\n                    if j <= 0 or j >= n - 1:\n                        continue\n                    npj = 1 if nums[j - 1] < nums[j] and nums[j + 1] < nums[j] else 0\n                    if npj != pk[j]:\n                        root.update(j, npj)\n                        pk[j] = npj\n        return re",
    "submit_ts": "1718509371",
    "subm_id": "539792548"
}