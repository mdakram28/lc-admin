{
    "username": "k_i_r_a_n_16",
    "submission": "class Solution {\n     public long countSubarrays(int[] nums, int k) {\n        int arrayLength = nums.length;\n        long totalSubarrays = 0;\n        Map<Long, Long> previousResults = new HashMap<>();\n\n        for (int currentIndex = 0; currentIndex < arrayLength; ++currentIndex) {\n            Map<Long, Long> currentResults = new HashMap<>();\n            totalSubarrays += updateCurrentResults(nums[currentIndex], k, previousResults, currentResults);\n            previousResults = currentResults;\n        }\n\n        return totalSubarrays;\n    }\n\n    private long updateCurrentResults(int currentValue, int target, Map<Long, Long> previousResults, Map<Long, Long> currentResults) {\n        long subarrayCount = 0;\n\n        if (currentValue == target) {\n            subarrayCount++;\n        }\n\n        currentResults.put((long) currentValue, 1L);\n\n        for (Map.Entry<Long, Long> entry : previousResults.entrySet()) {\n            long previousValue = entry.getKey();\n            long frequency = entry.getValue();\n            long newAndResult = previousValue & currentValue;\n\n            if (newAndResult == target) {\n                subarrayCount += frequency;\n            }\n\n            currentResults.put(newAndResult, currentResults.getOrDefault(newAndResult, 0L) + frequency);\n        }\n\n        return subarrayCount;\n    }\n}",
    "submit_ts": "1720279189",
    "subm_id": "1311741190"
}