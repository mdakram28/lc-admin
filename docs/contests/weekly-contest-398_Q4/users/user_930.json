{
    "username": "qu1ck",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        low = [2, 4, 4, 3, 2, 4, 6, 4, 1]\n        if k < len(low):\n            return low[k]\n        high = [1, 5, 10, 10, 5, 1]\n        hk = 11\n        c = 4\n        while k - hk >= len(high):\n            nh = [1]\n            hk = hk + hk + c\n            c += 1\n            for i in range(1, len(high)):\n                nh.append(high[i-1] + high[i])\n            nh.append(1)\n            high = nh\n            # print(hk, high)\n        if hk > k:\n            return 0\n#         dp = [0] * 1000\n        \n#         def dfs(s, j, d):\n#             dp[s] += 1\n#             if d and s > 0:\n#                 dfs(s-1, j, False)\n#             if s + (1<<j) < 1000:\n#                 dfs(s+(1<<j), j+1, True)\n        \n#         dfs(1, 0, True)\n#         print(high[k-hk], dp[k])\n        return high[k-hk]",
    "submit_ts": 1716090189.0
}