{
    "username": "daili",
    "submission": "class Solution {\npublic:\n    int MOD = 1e9 + 7;\n    int solve(vector<vector<int>> &dp, int curr, int k, int reqidx, vector<pair<int,int>> &reqs) {\n        // cout << \"[DEBUG] \" << curr << \" \" << k << endl;\n        if (reqidx >= 0 && reqs[reqidx].first == curr && reqs[reqidx].second != k) return dp[curr][k] = 0;\n        if ((curr * (curr + 1)) < 2 * k) return 0;\n        if (curr == 0) return (k == 0 ? 1 : 0);\n        if (dp[curr][k] != -1) return dp[curr][k];\n\n        int newreqidx = (reqidx >= 0 ? (reqs[reqidx].first == curr ? reqidx - 1 : reqidx) : -1);\n        int currans = 0;\n        for (int addinv = 0; addinv <= curr; addinv++) {\n            int ksub = k - addinv;\n            if (ksub >= 0) {\n                currans += solve(dp, curr - 1, ksub, newreqidx, reqs);\n                if (currans >= MOD) currans -= MOD;\n            }\n        }\n       // cout << \"[DEBUG] \" << curr << \" \" << k << \": \" << currans << endl;\n        return dp[curr][k] = currans;\n    }\n    \n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<pair<int,int>> reqs;\n        for (auto i : requirements) {\n            reqs.push_back({i[0], i[1]});\n        }\n        \n        sort(reqs.begin(), reqs.end());\n\n        // dp[i][k] is number of permutations of [0..i] satisfying the first x requirements with k inversions\n        vector<vector<int>> dp(n + 1, vector<int>(405, -1));\n        return solve(dp, n - 1, reqs.back().second, reqs.size() - 1, reqs);\n    }\n};",
    "submit_ts": "1719069896",
    "subm_id": "1296809204"
}