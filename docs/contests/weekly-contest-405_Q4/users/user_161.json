{
    "username": "Ashutosh9993",
    "submission": "#pragma GCC optimize(\"O3\", \"unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\nauto __untie_cin = cin.tie(nullptr);\nauto __unsync_ios_stdio = ios_base::sync_with_stdio(false);\n#define MOD 1000000007\n#define INF 1e18\n#define endl \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define ff first\n#define ss second\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> child;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\nclass Solution {\n    private:\n    TrieNode* root;\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->child.count(ch)) {\n                node->child[ch] = new TrieNode();\n            }\n            node = node->child[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    void trav(const string& target, vector<int>& dp, int index, int n) {\n        TrieNode* node = root;\n        for (int j = index; j < n; ++j) {\n            char ch = target[j];\n            if (!node->child.count(ch)) {\n                break;\n            }\n            node = node->child[ch];\n            if (node->cost != INT_MAX && dp[index] != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[index] + node->cost);\n            }\n        }\n    }\npublic:\n    int minimumCost(string target, vector<string>& w, vector<int>& costs) {\n        int n = sz(target);\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        root = new TrieNode();\n        for (int i = 0; i < w.size(); ++i) {\n            insert(w[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            trav(target, dp, i, n);\n        }\n        if(dp[n] == INT_MAX)return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720321581",
    "subm_id": "1312326729"
}