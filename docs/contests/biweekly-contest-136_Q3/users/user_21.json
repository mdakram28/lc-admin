{
    "username": "gooday-3",
    "submission": "const int MAXN = 1000'000;\n\nstatic pair<int,int> que[MAXN];\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = (int) grid.size();\n        int m = (int) grid[0].size();\n        \n        int N = n * m;\n        vector<char> visited(N, false);\n        \n        const int MOD = 4;\n        const int INF = MAXN;\n        vector<int> dp(MOD, INF);\n        dp[0] = 0;\n        auto ndp = dp;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                int idx = i * m + j;\n                if (visited[idx]) {\n                    continue;\n                }\n                int sz = 0;\n                que[sz++] = {i, j};\n                visited[idx] = true;\n                int cnt0 = 0;\n                for (int k = 0; k < sz; ++k) {\n                    auto [x, y] = que[k];\n                    if (grid[x][y] == 0) {\n                        ++cnt0;\n                    }\n                    {\n                        int nx = n - 1 - x;\n                        int ny = y;\n                        int nidx = nx * m + ny;\n                        if (!visited[nidx]) {\n                            visited[nidx] = true;\n                            que[sz++] = {nx, ny};\n                        }\n                    }\n                    \n                    {\n                        int nx = x;\n                        int ny = m - 1 - y;\n                        int nidx = nx * m + ny;\n                        if (!visited[nidx]) {\n                            visited[nidx] = true;\n                            que[sz++] = {nx, ny};\n                        }                        \n                    }\n                }\n                \n                \n                // cout << i << \",\" << j << \" \" << sz << \" \" << cnt0 << endl;\n                fill(ndp.begin(), ndp.end(), INF);\n                for (int k = 0; k < MOD; ++k) {\n                    ndp[k] = min(ndp[k], dp[k] + sz - cnt0);\n                    int nk = (k + sz) % MOD;\n                    ndp[nk] = min(ndp[nk], dp[k] + cnt0);\n                }\n                \n                swap(ndp, dp);\n            }\n        }\n        \n        int res = dp[0];\n        return res;\n    }\n};",
    "submit_ts": "1722696477",
    "subm_id": "552261154"
}