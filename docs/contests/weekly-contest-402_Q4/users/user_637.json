{
    "username": "beta-blue",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> seg;\n    vector<int> root;\n    \npublic:\n    SegmentTree(vector<int>& nums) {\n        int n = nums.size();\n        root = nums;\n        seg.resize(4*n);\n        \n        build( 1, 1, n);\n    }\n    \n    void build(int id, int l, int r) {\n        if (l == r) {\n            if (l > 1 && l < root.size() && root[l-2] < root[l-1] && root[l-1] > root[l])\n                seg[id] = 1;\n            else seg[id] = 0;\n            \n            return;\n        }\n        \n        int mid = (l + r) / 2;\n        build(id*2, l, mid);\n        build(id*2+1, mid+1, r);\n        \n        seg[id] = seg[id*2] + seg[id*2+1];\n    }\n    \n    int get(int id, int l, int r, int u, int v) {\n        if (r < u || v < l)\n            return 0;\n        \n        if (u <= l && r <= v)\n            return seg[id];\n        \n        int mid = (l+r) / 2;\n        return get(id*2, l, mid, u, v) + get(id*2+1, mid+1, r, u, v);\n    }\n    \n    void update(int id, int l, int r, int pos, int val) {\n        if (pos < l || r < pos)\n            return;\n        \n        if (l == r)\n        {\n            root[pos-1] = val; \n            if (l > 1 && l < root.size() && root[l-2] < root[l-1] && root[l-1] > root[l])\n                seg[id] = 1;\n            else seg[id] = 0;\n            \n            return;\n        }\n        \n        int mid = (l+r) / 2;\n        update(id*2, l, mid, pos, val);\n        update(id*2+1, mid+1, r, pos, val);\n        \n        seg[id] = seg[id*2] + seg[id*2+1];\n    }\n    \n    int getVal(int pos) {\n        return root[pos-1];\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree tree(nums);\n        vector<int> res;\n        \n        for (auto& q: queries) {\n            int t = q[0];\n            \n            if (t == 1) {\n                int l = q[1] + 1;\n                int r = q[2] + 1;\n                \n                if (l == r)\n                    res.push_back(0);\n                else res.push_back(tree.get(1, 1, nums.size(), l+1, r-1));\n            } else {\n                int pos = q[1] + 1;\n                int val = q[2];\n                \n                tree.update(1, 1, nums.size(), pos, val);\n                if (pos > 1)\n                    tree.update(1, 1, nums.size(), pos-1, tree.getVal(pos-1));\n                if (pos < nums.size())\n                    tree.update(1, 1, nums.size(), pos+1, tree.getVal(pos+1));\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1718507435",
    "subm_id": "1289651525"
}