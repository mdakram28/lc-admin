{
    "username": "chao24",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& w, vector<int>& c) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Simplify words and costs\n        unordered_map<string, int> minCosts = findMinimalCosts(w, c);        \n        \n        for (int j = 0; j <= n; ++j) {\n            if (dp[j] == INT_MAX) continue;\n            \n            for(const auto& pair : minCosts) {\n                //string word = pair.first;\n                int cost = pair.second;\n                int m = pair.first.size();\n                \n                if (j + m <= n && target.compare(j, m, pair.first) == 0) {\n                    dp[j + m] = min(dp[j + m], dp[j] + cost);\n                }\n                /*\n                if (j + m <= n) {\n                    bool match = true;\n                    for (int k = 0; k < m; ++k) {\n                        if (target[j + k] != word[k]) {\n                            match = false;\n                            break;\n                        }\n                    }\n                    if (match) {\n                        dp[j + m] = min(dp[j + m], dp[j] + cost);\n                    }\n                }*/\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n    \n    unordered_map<string, int> findMinimalCosts(const vector<string>& words, const vector<int>& costs) {\n        unordered_map<string, int> minCostMap;\n\n        for (int i = 0; i < words.size(); ++i) {\n            //const string& word = words[i];\n            int cost = costs[i];\n\n            if (minCostMap.find(words[i]) == minCostMap.end()) {\n                minCostMap[words[i]] = cost;\n            } else {\n                minCostMap[words[i]] = min(minCostMap[words[i]], cost);\n            }\n        }\n\n        return minCostMap;\n    }\n};",
    "submit_ts": "1720324695",
    "subm_id": "1312405733"
}