{
    "username": "nganha1897",
    "submission": "class Solution {\n    public int countOfPairs(int[] nums) {\n        int mod = (int)1e9 + 7, n = nums.length;\n        long[] dp = new long[1001];\n        long[] prefixSum = new long[1001];\n        for (int i=0; i<=nums[0]; i++) {\n            dp[i] = 1;\n        }\n        prefixSum[0] = 1;\n        for (int i=1; i<dp.length; i++) {\n            prefixSum[i] = prefixSum[i-1] + dp[i];\n        }\n\n        for (int i=1; i<n; i++) {\n            long[] newDp = new long[1001];\n            \n            for (int ci=0; ci<=nums[i]; ci++) {\n                int cd = nums[i] - ci;\n                int lo = 0, hi = Math.min(ci, nums[i-1]);\n                while (lo < hi) {\n                    int mid = (lo + hi + 1)/2;\n                    if(nums[i-1] - mid >= cd) {\n                        lo = mid;\n                    } else {\n                        hi = mid - 1;\n                    }\n                }\n\n                if (nums[i-1] - lo >= cd) {\n                    newDp[ci] = prefixSum[lo];\n                }\n            }\n            \n            dp = newDp;\n            prefixSum[0] = dp[0];\n            for (int j=1; j<dp.length; j++) {\n                prefixSum[j] = (prefixSum[j-1] + dp[j]) % mod;\n            }\n        }\n        long ans = 0;\n\n        for (int i=0; i<dp.length; i++) {\n            ans = (ans + dp[i]) % mod;\n        }\n        return (int)ans;\n    }\n}",
    "submit_ts": "1723347710",
    "subm_id": "1351604087"
}