{
    "username": "Gyan_kushwaha",
    "submission": "class Solution {\n    private:\n    int processCenterCell(const vector<vector<int>>& grid, int n, int m) {\n        return grid[n / 2][m / 2] == 1 ? 1 : 0;\n    }\n\n    void processRow(const vector<vector<int>>& grid, int n, int m, vector<int>& shift) {\n        int left = 0, right = m - 1;\n        while (left < right) {\n            int sum = grid[n / 2][left] + grid[n / 2][right];\n            shift[sum] += 1;\n            left += 1;\n            right -= 1;\n        }\n    }\n\n    void processColumn(const vector<vector<int>>& grid, int n, int m, vector<int>& shift) {\n        int top = 0, bottom = n - 1;\n        while (top < bottom) {\n            int sum = grid[top][m / 2] + grid[bottom][m / 2];\n            shift[sum] += 1;\n            top += 1;\n            bottom -= 1;\n        }\n    }\n\n    int calculateFlipsForShifts(const vector<int>& shift) {\n        int flips = 0;\n        if (shift[2] % 2 == 1) {\n            flips += shift[1] > 0 ? shift[1] : 2;\n        } else {\n            flips += shift[1];\n        }\n        return flips;\n    }\n\n    int processSubgrids(const vector<vector<int>>& grid, int n, int m) {\n        int flips = 0;\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int a = grid[i][j];\n                int b = grid[n - 1 - i][j];\n                int c = grid[i][m - 1 - j];\n                int d = grid[n - 1 - i][m - 1 - j];\n\n                int sum = a + b + c + d;\n\n                if (sum != 0 && sum != 4) {\n                    flips += min(sum, 4 - sum);\n                }\n            }\n        }\n        return flips;\n    }\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = 0;\n        \n        if (n % 2 == 1 && m % 2 == 1) {\n            ans += processCenterCell(grid, n, m);\n        }\n\n        vector<int> shift(3, 0);\n\n        if (n % 2 == 1) {\n            processRow(grid, n, m, shift);\n        }\n\n        if (m % 2 == 1) {\n            processColumn(grid, n, m, shift);\n        }\n\n        ans += calculateFlipsForShifts(shift);\n\n        ans += processSubgrids(grid, n, m);\n\n        return ans;\n    }\n};",
    "submit_ts": "1722699795",
    "subm_id": "1343222568"
}