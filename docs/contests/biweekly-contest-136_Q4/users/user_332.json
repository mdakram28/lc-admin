{
    "username": "competent-faradaympr",
    "submission": "import java.util.HashMap;\n\nclass Solution {\n\tclass Node {\n\t\tint val;\n\t\tHashMap<Integer, Integer> connected;\n\t\t\n\t\tpublic Node(int val) {\n\t\t\tthis.val = val;\n\t\t\tthis.connected = new HashMap<>();\n\t\t}\n\t}\n\t\n\tNode[] graph;\n\tint[] res;\n\tpublic int[] timeTaken(int[][] edges) {\n\t\tint n = edges.length + 1;\n\t\tgraph = new Node[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tgraph[i] = new Node(i);\n\t\t}\n\t\tfor (int[] edge : edges) {\n\t\t\tint i = edge[0], j = edge[1];\n\t\t\tgraph[i].connected.put(j, null);\n\t\t\tgraph[j].connected.put(i, null);\n\t\t}\n\t\tres = new int[n];\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tres[i] = findTime(i, -1);\n\t\t}\n\t\treturn res;\n\t}\n\t\n\tint findTime(int idx, int from) {\n\t\tif (graph[idx].connected.size() == 1 && from >= 0) {\n\t\t\treturn idx % 2 == 0 ? 2 : 1;\n\t\t}\n\t\tint time = 0;\n\t\tfor (Integer i : graph[idx].connected.keySet()) {\n\t\t\tInteger t = graph[idx].connected.get(i);\n\t\t\tif (i != from) {\n\t\t\t\tif (t == null) {\n\t\t\t\t\tt = findTime(i, idx);\n\t\t\t\t\tgraph[idx].connected.put(i, t);\n\t\t\t\t}\n\t\t\t\ttime = Math.max(time, t);\n\t\t\t\tif (res[idx] != 0 && time == res[idx]) {\n\t\t\t\t\tif (from >= 0) {\n\t\t\t\t\t\ttime += idx % 2 == 0 ? 2 : 1;\n\t\t\t\t\t}\n\t\t\t\t\treturn time;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (from >= 0) {\n\t\t\ttime += idx % 2 == 0 ? 2 : 1;\n\t\t}\n\t\treturn time;\n\t}\n}",
    "submit_ts": "1722700267",
    "subm_id": "552279096"
}