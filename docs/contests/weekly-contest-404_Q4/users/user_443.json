{
    "username": "Pisces311",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        tree1 = defaultdict(list)\n        for u, v in edges1:\n            tree1[u].append(v)\n            tree1[v].append(u)\n        tree2 = defaultdict(list)\n        for u, v in edges2:\n            tree2[u].append(v)\n            tree2[v].append(u)\n\n        ans1 = 0\n        ans2 = 0\n\n        def solve1(tree, u, fa):\n            nonlocal ans1\n            mx1, mx2 = 0, 0\n            for v in tree[u]:\n                if v == fa:\n                    continue\n                ret = solve1(tree1, v, u)\n                if ret > mx1:\n                    mx2 = mx1\n                    mx1 = ret\n                elif ret > mx2:\n                    mx2 = ret\n            ans1 = max(ans1, mx1 + mx2)\n            return mx1 + 1\n        def solve2(tree, u, fa):\n            nonlocal ans2\n            mx1, mx2 = 0, 0\n            for v in tree[u]:\n                if v == fa:\n                    continue\n                ret = solve2(tree2, v, u)\n                if ret > mx1:\n                    mx2 = mx1\n                    mx1 = ret\n                elif ret > mx2:\n                    mx2 = ret\n            ans2 = max(ans2, mx1 + mx2)\n            return mx1 + 1\n        if edges1:\n            solve1(tree1, 0, -1)\n        if edges2:\n            solve2(tree2, 0, -1)\n        # print(ans1, ans2)\n        return max((ans1 + 1) // 2 + (ans2 + 1) // 2 + 1, ans1, ans2)\n",
    "submit_ts": "1719718048",
    "subm_id": "1304407439"
}