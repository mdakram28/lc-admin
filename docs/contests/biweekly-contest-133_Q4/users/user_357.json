{
    "username": "saipranaydeep",
    "submission": "class Solution {\n    int mod = 1e9+7;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> lengthToInversionsMap;\n        for (const auto& requirement : requirements) lengthToInversionsMap[requirement[0] + 1] = requirement[1];\n\n        vector<vector<long long>> dpTable(n + 1, vector<long long>(400 + 1, 0));\n        dpTable[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inversions = 0; inversions <= 400; ++inversions) {\n                for (int newPosition = 0; newPosition < length; ++newPosition) {\n                    int previousInversions = inversions - newPosition;\n                    if (previousInversions >= 0) dpTable[length][inversions] = (dpTable[length][inversions] + dpTable[length - 1][previousInversions]) % mod;\n                }\n            }\n\n            if (lengthToInversionsMap.find(length) != lengthToInversionsMap.end()) {\n                int requiredInversions = lengthToInversionsMap[length];\n                for (int inversions = 0; inversions <= 400; ++inversions) {\n                    if (inversions != requiredInversions) dpTable[length][inversions] = 0;\n                }\n            }\n        }\n\n        long long result = 0;\n        for (const auto& count : dpTable[n]) result = (result + count) % mod;\n\n        return result;\n    }\n};",
    "submit_ts": "1719070323",
    "subm_id": "1296820177"
}