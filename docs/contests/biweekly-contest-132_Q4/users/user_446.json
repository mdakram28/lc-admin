{
    "username": "Binit_kumar_jha",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n          int n = nums.length;\n        int[][] dp = new int[n][k + 1];\n        int ans = 1;\n        int[] vk = new int[k + 1];\n        Map<Integer, Integer>[] vkm = new HashMap[k + 1];\n\n        for (int i = 0; i <= k; i++) {\n            vkm[i] = new HashMap<>();\n        }\n\n        for (int i = 0; i < n; i++) {\n            Arrays.fill(dp[i], 1);\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + vk[l]);\n                }\n                if (vkm[j].containsKey(nums[i])) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + vkm[j].get(nums[i]));\n                }\n                ans = Math.max(ans, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                vk[j] = Math.max(vk[j], dp[i][j]);\n                vkm[j].put(nums[i], Math.max(vkm[j].getOrDefault(nums[i], 0), dp[i][j]));\n            }\n        }\n        return ans;\n        \n    }\n}",
    "submit_ts": 1717861366.0
}