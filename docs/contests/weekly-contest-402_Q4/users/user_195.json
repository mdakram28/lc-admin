{
    "username": "Astatine08",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        n = len(nums)\n        self.n = n\n        # Initialize the segment tree with 4 * n size\n        self.tree = [0] * (4 * n)\n        self.nums = nums\n        # Build the segment tree\n        self.build(1, 0, n - 1)\n\n    def is_peak(self, index):\n        if index <= 0 or index >= self.n - 1:\n            return False\n        return self.nums[index] > self.nums[index - 1] and self.nums[index] > self.nums[index + 1]\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node\n            right_child = 2 * node + 1\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def update(self, node, start, end, index):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node\n            right_child = 2 * node + 1\n            if index <= mid:\n                self.update(left_child, start, mid, index)\n            else:\n                self.update(right_child, mid + 1, end, index)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, node, start, end, l, r):\n        if r < start or l > end:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node\n        right_child = 2 * node + 1\n        left_result = self.query(left_child, start, mid, l, r)\n        right_result = self.query(right_child, mid + 1, end, l, r)\n        return left_result + right_result\n\n    def update_value(self, index, value):\n        self.nums[index] = value\n        self.update(1, 0, self.n - 1, index)\n        if index - 1 >= 0:\n            self.update(1, 0, self.n - 1, index - 1)\n        if index + 1 < self.n:\n            self.update(1, 0, self.n - 1, index + 1)\n\n    def query_range(self, l, r):\n        return self.query(1, 0, self.n - 1, l, r)\n\n\nclass Solution:\n    def countOfPeaks(self, nums, queries):\n        seg_tree = SegmentTree(nums)\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                if r - l < 2:\n                    results.append(0)\n                else:\n                    results.append(seg_tree.query_range(l + 1, r - 1))\n            elif query[0] == 2:\n                index, value = query[1], query[2]\n                seg_tree.update_value(index, value)\n\n        return results",
    "submit_ts": "1718505840",
    "subm_id": "1289597057"
}