{
    "username": "Ani_S",
    "submission": "class DisjointSet {\n    int n;\n    int parent[];\n    int rank[];\n    \n    int leftMost[];\n    int rightMost[];\n    int topMost[];\n    int bottomMost[];\n    \n    public DisjointSet(int n) {\n        this.n = n;\n        this.parent = new int[n];\n        this.rank = new int[n];\n        \n        this.leftMost = new int[n];\n        this.rightMost = new int[n];\n        this.topMost = new int[n];\n        this.bottomMost = new int[n];\n        \n        for(int i = 0; i < n; i++)\n            parent[i] = i;\n    }\n    \n    public void buildSet(int circles[][]) {\n        for(int i = 0; i < n; i++) {\n            int r = circles[i][2];\n            leftMost[i] = circles[i][0] - r;\n            rightMost[i] = circles[i][0] + r;\n            topMost[i] = circles[i][1] + r;\n            bottomMost[i] = circles[i][1] - r;\n        }\n    }\n    \n    public void union(int x, int y) {\n        x = find(x);\n        y = find(y);\n        \n        if(x == y)\n            return;\n        else {\n            int idx = 0;\n            if(rank[x] == rank[y]) {\n                parent[y] = x;\n                rank[x]++;\n                idx = x;\n                \n            } else if(rank[x] > rank[y]) {\n                parent[y] = x;\n                idx = x;\n            } else {\n                parent[x] = y;\n                idx = y;\n            }\n            \n            leftMost[idx] = Math.min(leftMost[x], leftMost[y]);\n            rightMost[idx] = Math.max(rightMost[x], rightMost[y]);\n            topMost[idx] = Math.max(topMost[x], topMost[y]);\n            bottomMost[idx] = Math.min(bottomMost[x], bottomMost[y]);\n        }\n    }\n    \n    public int find(int x) {\n        if(parent[x] == x)\n            return x;\n        \n        return parent[x] = find(parent[x]);\n    }\n}\nclass Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        DisjointSet ds = new DisjointSet(circles.length);\n        ds.buildSet(circles);\n        \n        for(int i = 0; i < circles.length; i++) {\n            for(int j = i + 1; j < circles.length; j++) {\n                if(isConnected(circles[i][0], circles[i][1], circles[i][2], circles[j][0], circles[j][1], circles[j][2]))\n                    ds.union(i, j);\n            }\n            \n            int x = ds.find(i);\n            \n            if(ds.leftMost[x] <= 0 && ds.rightMost[x] >= X)\n                return false;\n            if(ds.topMost[x] >= Y && ds.bottomMost[x] <= 0)\n                return false;\n            \n            if(ds.topMost[x] >= Y && ds.rightMost[x] >= X)\n                return false;\n            \n            if(ds.bottomMost[x] <= 0 && ds.leftMost[x] <= 0)\n                return false;\n        }\n        \n        return true;\n        \n    }\n    \n    private boolean isConnected(int x1, int y1, int r1, int x2, int y2, int r2) {\n        double d = Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n        \n        if(d <= r1 - r2 || d <= r2 - r1 || d <= r1 + r2)\n            return true;\n        else\n            return false;\n    }\n}",
    "submit_ts": "1722138766",
    "subm_id": "1335799083"
}