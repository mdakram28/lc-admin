{
    "username": "qwertyish",
    "submission": "\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int tgt = nums[0];  \n        int best_diff = abs(tgt - k);  \n        unordered_map<int, int> weight;  \n        int n = nums[0];  \n        for (int j = 0; j < 32; j++) {  \n            if (n & (1 << j)) {  \n                weight[j]++;  \n            }  \n        }  \n        int l = 0, r = 0;  \n        while (r < nums.size()) {  \n            if (tgt > k || l > r) {  \n                r++;  \n                if (r >= nums.size()) {  \n                    break;  \n                }  \n                int n = nums[r];  \n                for (int j = 0; j < 32; j++) {  \n                    if (n & (1 << j)) {  \n                        weight[j]++;  \n                    }  \n                }  \n            } else {     \n                int n = nums[l];  \n                for (int j = 0; j < 32; j++) {  \n                    if (n & (1 << j)) {  \n                        weight[j]--;  \n                    }  \n                }  \n                l++;  \n            }  \n            tgt = 0;  \n            for (auto it = weight.begin(); it != weight.end(); it++) {     \n                if (it->second == r - l + 1) {  \n                    tgt += (1 << it->first);  \n                }  \n            }  \n            if (l <= r) {  \n                best_diff = min(best_diff, abs(tgt - k));  \n            }  \n        }  \n        return best_diff;  \n    }\n\n\n\n};",
    "submit_ts": 1717298266.0
}