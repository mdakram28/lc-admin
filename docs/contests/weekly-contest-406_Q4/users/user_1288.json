{
    "username": "mit_roh",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int hIndex = 0, vIndex = 0;\n        int hPieces = 1, vPieces = 1; // Initial pieces are the whole cake\n        long long totalCost = 0;\n\n        // Process the cuts\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] > verticalCut[vIndex]) {\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * vPieces;\n                hPieces++;\n                hIndex++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * hPieces;\n                vPieces++;\n                vIndex++;\n            }\n        }\n\n        // Process remaining horizontal cuts if any\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * vPieces;\n            hPieces++;\n            hIndex++;\n        }\n\n        // Process remaining vertical cuts if any\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * hPieces;\n            vPieces++;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925866",
    "subm_id": "1320268762"
}