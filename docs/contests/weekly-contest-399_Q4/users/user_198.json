{
    "username": "mdakram28",
    "submission": "\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n    \n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = {\n                (False, False): max(nums[start], 0),\n                (False, True): 0,\n                (True, False): 0,\n                (True, True): 0\n            }  # (exc, exc): \n        else:\n            mid = (start + end) // 2\n            left_node = 2 * node + 1\n            right_node = 2 * node + 2\n            self.build(nums, left_node, start, mid)\n            self.build(nums, right_node, mid + 1, end)\n            self.tree[node] = self.combine(self.tree[left_node], self.tree[right_node])\n    \n    def combine(self, left, right):\n        # include = max(left[1] + right[0], left[0] + right[1])\n        # exclude = max(left[0], left[1]) + max(right[0], right[1])\n        # return (include, exclude)\n        ret = {}\n        for l, r in (False, False), (False, True), (True, False), (True, True):\n            ret[(l, r)] = max(\n                left[(l, False)] + right[(True, r)],\n                left[(l, True)] + right[(False, r)],\n            )\n        return ret\n    \n    def update(self, idx, value, node, start, end):\n        if start == end:\n            self.tree[node] = {\n                (False, False): max(value, 0),\n                (False, True): 0,\n                (True, False): 0,\n                (True, True): 0\n            }  # (exc, exc): \n        else:\n            mid = (start + end) // 2\n            left_node = 2 * node + 1\n            right_node = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(idx, value, left_node, start, mid)\n            else:\n                self.update(idx, value, right_node, mid + 1, end)\n            self.tree[node] = self.combine(self.tree[left_node], self.tree[right_node])\n    \n    def update_value(self, idx, value):\n        self.update(idx, value, 0, 0, self.n - 1)\n    \n    def query(self):\n        return max(self.tree[0].values())\n\nMOD = 10**9 + 7\n    \nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        seg_tree = SegmentTree(nums)\n        result = 0\n\n        for posi, xi in queries:\n            seg_tree.update_value(posi, xi)\n            current_max_sum = seg_tree.query()\n            result = (result + current_max_sum) % MOD\n\n        return result",
    "submit_ts": "1716694596",
    "subm_id": "1268119987"
}