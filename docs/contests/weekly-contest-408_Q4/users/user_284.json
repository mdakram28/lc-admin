{
    "username": "hvitserk_",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& gph, int start, int target1, int target2,\n            int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : gph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> cc(circles2.size());\n        vector<vector<int>> gph(circles2.size() + 4);\n        int num_circles = circles2.size();\n\n        for (int i = 0; i < num_circles; ++i) {\n            cc[i].first.first = circles2[i][0];\n            cc[i].first.second = circles2[i][1];\n            cc[i].second = circles2[i][2];\n        }\n\n        for (int i = 0; i < num_circles; ++i) {\n\n            if (cc[i].first.first <= cc[i].second) {\n                gph[num_circles].push_back(i);\n                gph[i].push_back(num_circles);\n            }\n            if (X - cc[i].first.first <= cc[i].second) {\n                gph[num_circles + 2].push_back(i);\n                gph[i].push_back(num_circles + 2);\n            }\n            if (cc[i].first.second <= cc[i].second) {\n                gph[num_circles + 1].push_back(i);\n                gph[i].push_back(num_circles + 1);\n            }\n            if (Y - cc[i].first.second <= cc[i].second) {\n                gph[num_circles + 3].push_back(i);\n                gph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance =\n                    sqrt(pow(cc[i].first.first - cc[j].first.first, 2) +\n                         pow(cc[i].first.second - cc[j].first.second, 2));\n                int radius_sum = cc[i].second + cc[j].second;\n                if (radius_sum >= distance) {\n                    gph[i].push_back(j);\n                    gph[j].push_back(i);\n                }\n            }\n        }\n\n        int is_blocked = 0;\n        is_blocked = max(is_blocked,\n                         bfs(gph, num_circles, num_circles + 1, num_circles + 2,\n                             num_circles + 4)); \n        is_blocked =\n            max(is_blocked,\n                bfs(gph, num_circles + 3, num_circles + 2, num_circles + 1,\n                    num_circles + 4));\n\n        if (is_blocked) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136751",
    "subm_id": "1335743905"
}