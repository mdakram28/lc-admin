{
    "username": "Acube679",
    "submission": "class SegmentTree {\nprivate:\n    std::vector<int> tree;\n    int n;\n\n    void buildTree(const std::vector<int>& nums, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = start + (end - start) / 2;\n            buildTree(nums, start, mid, 2 * node + 1);\n            buildTree(nums, mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int start, int end, int L, int R, int node) {\n        if (start > R || end < L) {\n            return -1;\n        }\n        if (start >= L && end <= R) {\n            return tree[node];\n        }\n        int mid = start + (end - start) / 2;\n        int left = query(start, mid, L, R, 2 * node + 1);\n        int right = query(mid + 1, end, L, R, 2 * node + 2);\n        if (left == -1) return right;\n        if (right == -1) return left;\n        return left & right;\n    }\n\npublic:\n    SegmentTree(const std::vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        buildTree(nums, 0, n - 1, 0);\n    }\n\n    int rangeAnd(int L, int R) {\n        return query(0, n - 1, L, R, 0);\n    }\n};\n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n          int n = nums.size();\n        SegmentTree segTree(nums);\n        long long count = 0;\n\n        for (int i = 0; i < n; ++i) {\n            int left = -1, right = i+1;\n            while(left+1<right)\n            {\n                int mid = (left + right)/2 ;\n                int x = segTree.rangeAnd(mid,i);\n                if(x>=k)\n                {\n                    right = mid ;\n                }\n                else\n                {\n                    left = mid ;\n                }\n            }\n\n            int store1 = right ;\n            if(right == i+1)\n            {\n                continue ;\n            }\n\n            left = -1;\n            right = i+1 ;\n            while(left+1<right)\n            {\n                int mid = (left + right)/2 ;\n                int x = segTree.rangeAnd(mid,i);\n                if(x>=k+1)\n                {\n                    right = mid ;\n                }\n                else\n                {\n                    left = mid ;\n                }\n            }\n            count += left-store1 + 1 ;\n        }\n        return count;\n    }\n};",
    "submit_ts": "1720277819",
    "subm_id": "1311681509"
}