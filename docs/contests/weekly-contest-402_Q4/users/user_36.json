{
    "username": "prajwal_733",
    "submission": "#include <ext/pb_ds/assoc_container.hpp> \n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n \ntemplate<class T> using ordered_set = tree<int, null_type,less<int>, rb_tree_tag,tree_order_statistics_node_update>;\n/*\n*p.find_by_order(3)\np.order_of_key(6)P\n*/\n\nclass Solution {\npublic:\n    int peak(vector<int>& nums, int i)\n    {\n        if((nums[i]>nums[i-1]) and (nums[i]>nums[i+1]))\n            return true;\n        \n        return false;\n    }\n    \n    void checkAndUpdate(vector<int>& nums, int index, ordered_set<int>& s)\n    {\n        if((index<=0) or (index>=(nums.size()-1)))\n            return;\n        \n        //cout<<index<<\" \"<<peak(nums, index)<<endl;\n        \n        if(peak(nums,index))\n            s.insert(index);\n        else\n            s.erase(index);\n        \n        \n      //  cout<<s.size()<<endl;\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) \n    {\n        ordered_set<int> s;\n        int n = nums.size();\n        \n        for(int i=1;i<(n-1);i++)\n        {\n            if(peak(nums,i))\n            {\n               // cout<<\"value \"<<i<<endl;\n                s.insert(i);\n            }\n               // s.insert(i);\n            \n           // cout<<s.size()<<endl;\n        }\n        \n        vector<int> ans;\n        \n        for(int i=0;i<queries.size();i++)\n        {\n            if(queries[i][0]==1)\n            {\n                int l = queries[i][1], r = queries[i][2];\n                if(l==r)\n                    ans.push_back(0);\n                else\n                {\n                    int i1 = s.order_of_key(l+1);\n                    int i2 = s.order_of_key(r);\n                    \n                   // cout<<i1<<\" \"<<i2<<\" \"<<s.size()<<endl;\n                    \n                    ans.push_back(i2-i1);\n                }\n            }\n            else\n            {\n                int index  = queries[i][1], value = queries[i][2];\n                \n                nums[index] = value;\n                \n                checkAndUpdate(nums, index, s);\n                checkAndUpdate(nums, index+1, s);\n                checkAndUpdate(nums, index-1, s);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718506185.0
}