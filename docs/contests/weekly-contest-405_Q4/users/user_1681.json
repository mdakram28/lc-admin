{
    "username": "hydrange",
    "submission": "class Node:\n    def __init__(self):\n        self.isWord = False\n        self.cost = None\n        self.children = {}\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        N = len(target)\n        \n        root = Node()\n        for i, word in enumerate(words):\n            cur = root\n            for c in word:\n                if c not in cur.children:\n                    cur.children[c] = Node()\n                cur = cur.children[c]\n            cur.isWord = True\n            if cur.cost is not None:\n                cur.cost = min(cur.cost, costs[i])\n            else:\n                cur.cost = costs[i]\n            \n        def find(word):\n            cur = root\n            for c in word:\n                if c not in cur.children:\n                    return None\n                cur = cur.children[c]\n            return cur\n            \n        @cache\n        def f(start):\n            if start >= N:\n                return 0\n            cost = 1e9\n            cur = root\n            for i in range(start, N):\n                c = target[i]\n                if c not in cur.children:\n                    break\n                cur = cur.children[c]\n                if cur.isWord:\n                    cost = min(cost, cur.cost + f(i + 1))\n            return cost\n        \n        minCost = f(0)\n        if minCost == 1e9:\n            return -1\n        return minCost",
    "submit_ts": "1720323279",
    "subm_id": "1312371736"
}