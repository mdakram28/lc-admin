{
    "username": "tttyyy49",
    "submission": "class Solution {    \n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        \n        BIT dp = new BIT(1001);\n        \n        for (int cur = 0; cur <= nums[0]; ++cur) {\n            dp.update(cur + 1, 1);\n        }\n        \n        for (int i = 1; i < n; ++i) {\n            BIT dp1 = new BIT(1001);\n            \n            for (int cur = 0; cur <= nums[i]; ++cur) {\n                // nums[i - 1] - prev >= nums[i] - cur\n                // prev <= nums[i - 1] - nums[i] + cur\n                // prev >= 0\n                \n                int r = Math.min(nums[i - 1] - nums[i] + cur, cur);\n                dp1.update(cur + 1, dp.query(r + 1));\n            }\n            \n            dp = dp1;\n        }\n        \n        return (int) dp.query(1001);\n        \n    }\n}\n\nclass BIT {\n    static final long MOD = (long) 1e9 + 7;\n    \n    long[] tree;\n\n    BIT(int n) {\n        tree = new long[n + 1];\n    }\n\n    void update(int i, long diff) {\n        while (i < tree.length) {\n            tree[i] = (tree[i] + diff) % MOD;\n            i += (-i) & i;\n        }\n    }\n\n    long query(int i) {\n        long sum = 0;\n        while (i > 0) {\n            sum = (sum + tree[i]) % MOD;\n            i -= (-i) & i;\n        }\n        return sum;\n    }\n}",
    "submit_ts": "1723346841",
    "subm_id": "1351586307"
}