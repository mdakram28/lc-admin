{
    "username": "97ssps30212",
    "submission": "impl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        use std::cmp::Reverse;\n        use std::collections::{BTreeMap, HashMap};\n        let mut count_table = HashMap::new();\n        let n = nums.len();\n        let mut list = vec![0; n];\n        for i in 0..(n / 2) {\n            let (left, right) = (nums[i], nums[n - i - 1]);\n            let abs = (right - left).abs();\n            count_table.entry(abs).and_modify(|c| *c += 1).or_insert(1);\n            (list[i], list[n - i - 1]) = (abs, abs);\n        }\n\n        let map = count_table\n            .into_iter()\n            .fold(BTreeMap::new(), |mut acc, (x, count)| {\n                match acc.get(&Reverse(count)) {\n                    Some(x2) if *x2 < x => {}\n                    _ => {\n                        acc.insert(Reverse(count), x);\n                    }\n                }\n                acc\n            });\n        let mut result = i32::MAX;\n        for &x in map.values() {\n            let mut temp = 0;\n            for i in 0..(n / 2) {\n                if list[i] == x {\n                    continue;\n                }\n\n                let (a, b) = (nums[i], nums[n - i - 1]);\n                if a < x && b < x && (k - a.min(b)) < x {\n                    temp += 2;\n                } else {\n                    temp += 1;\n                }\n            }\n            if temp < result {\n                result = temp;\n            } else {\n                break;\n            }\n        }\n\n        result\n    }\n}\n",
    "submit_ts": "1721489359",
    "subm_id": "1327450957"
}