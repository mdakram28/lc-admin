{
    "username": "diwakarsehgal",
    "submission": "class Solution {\npublic:\n    static const int MOD = 1000000007;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int pos = 0; pos < length; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                int requiredInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != requiredInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long total = 0;\n        for (long long count : permCounts[n]) {\n            total = (total + count) % MOD;\n        }\n\n        return static_cast<int>(total);\n    }\n};",
    "submit_ts": "1719070669",
    "subm_id": "1296828822"
}