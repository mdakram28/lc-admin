{
    "username": "jaysujae",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        unordered_map<string, int> wordCosts;\n        \n        // Preprocess words and costs\n        for (int i = 0; i < words.size(); ++i) {\n            wordCosts[words[i]] = min(wordCosts.count(words[i]) ? wordCosts[words[i]] : INT_MAX, costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 1; i <= n; ++i) {\n            for (const auto& pair : wordCosts) {\n                const string& word = pair.first;\n                int cost = pair.second;\n                \n                if (i >= word.length() && target.compare(i - word.length(), word.length(), word) == 0) {\n                    int prevCost = dp[i - word.length()];\n                    if (prevCost != INT_MAX) {\n                        dp[i] = min(dp[i], prevCost + cost);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n\n    }\n};",
    "submit_ts": "1720320743",
    "subm_id": "1312303322"
}