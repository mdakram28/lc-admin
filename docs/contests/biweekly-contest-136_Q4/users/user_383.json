{
    "username": "MunirKP",
    "submission": "import sys\nsys.setrecursionlimit(1000000)\n\ndef calc_sub_times(root, adj, sub_times, vis):\n    vis[root] = 1\n    for c in adj[root]:\n        if vis[c]: continue\n        sub_times[root].append(calc_sub_times(c, adj, sub_times, vis) + [2,1][c%2])\n    return max(sub_times[root]) if sub_times[root] else 0\n\ndef calc_par_times(root, abv, adj, par_times, sub_times, vis):\n    vis[root] = 1\n    par_times[root] = abv\n    if not sub_times: return\n\n    i = j = m_i = m_j = 0\n    k = 0\n    for c in adj[root]:\n        if vis[c]: continue\n        v = sub_times[root][k]\n        if v >= m_i:\n            j, m_j = i, m_i\n            i, m_i = c, v\n        elif v >= m_j:\n            j, m_j = c, v\n        k += 1\n\n    for c in adj[root]:\n        if vis[c]: continue\n        calc_par_times(c, max(abv,[m_i,m_j][i==c])+[2,1][root%2], adj, par_times, sub_times, vis)\n\nclass Solution:\n    def timeTaken(self, edges):\n        n = len(edges)+1\n\n        adj = [[] for i in range(n)]\n        for u, v in edges:\n            adj[u].append(v)\n            adj[v].append(u)\n\n        sub_times = [[] for i in range(n)]\n        vis = [0 for i in range(n)]\n        calc_sub_times(0, adj, sub_times, vis)\n\n        par_times = [0 for i in range(n)]\n        vis = [0 for i in range(n)]\n        calc_par_times(0, 0, adj, par_times, sub_times, vis)\n\n        print(sub_times)\n        print(par_times)\n\n        return [max([par_times[i]]+sub_times[i]) for i in range(n)]",
    "submit_ts": "1722700587",
    "subm_id": "1343246478"
}