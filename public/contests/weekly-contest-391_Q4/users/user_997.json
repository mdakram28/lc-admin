{
    "username": "tlh65",
    "submission": "class Solution:\n    def maxManhattanDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        \n        # a = x + y\n        # b = x - y\n        \n        max_a = -math.inf\n        min_a = math.inf\n        \n        max_b = -math.inf\n        min_b = math.inf\n        \n        for i in range (n):\n            a = points[i][0] + points[i][1]\n            \n            if (a > max_a):\n                max_a = a\n                \n            if (a < min_a):\n                min_a = a\n                \n            b = points[i][0] - points[i][1]\n            \n            if (b > max_b):\n                max_b = b\n                \n            if (b < min_b):\n                min_b = b\n        \n        print(max_b, min_b)\n        return max(max_a - min_a, max_b - min_b)\n        \n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        \n        # a = x + y\n        # b = x - y\n        \n        max_a = -math.inf\n        max_a_pos = -1\n        min_a = math.inf\n        min_a_pos = -1\n        \n        max_b = -math.inf\n        max_b_pos = -1\n        min_b = math.inf\n        min_b_pos = -1\n        \n        for i in range (n):\n            a = points[i][0] + points[i][1]\n            \n            if (a > max_a):\n                max_a = a\n                max_a_pos = i\n            elif (a == max_a):\n                max_a_pos = -1\n                \n            if (a < min_a):\n                min_a = a\n                min_a_pos = i\n            elif (a == min_a):\n                min_a_pos = -1\n                \n            b = points[i][0] - points[i][1]\n            \n            if (b > max_b):\n                max_b = b\n                max_b_pos = i\n            elif (b == max_b):\n                max_b_pos = -1\n                \n            if (b < min_b):\n                min_b = b\n                min_b_pos = i\n            elif (b == min_b):\n                min_b_pos = -1\n            \n        distance = 0\n        pos_to_remove = []\n        if (max_a - min_a > max_b - min_b):\n            distance = max_a - min_a\n            if (max_a_pos != -1):\n                pos_to_remove.append(max_a_pos)\n            if (min_a_pos != -1):\n                pos_to_remove.append(min_a_pos)\n        elif (max_a - min_a < max_b - min_b):\n            distance = max_b - min_b\n            if (max_b_pos != -1):\n                pos_to_remove.append(max_b_pos)\n            if (min_b_pos != -1):\n                pos_to_remove.append(min_b_pos)\n        else:\n            distance = max_a - min_a\n            if (max_a_pos != -1 and (max_a_pos == max_b_pos or max_a_pos == min_b_pos)):\n                pos_to_remove.append(max_a_pos)\n            if (min_a_pos != -1 and (min_a_pos == max_b_pos or min_a_pos == min_b_pos)):\n                pos_to_remove.append(min_a_pos)\n            \n\n        if len(pos_to_remove) == 0:\n            return distance\n        else:\n            def remove_element(array, index):\n                new_array = array.copy()\n                del new_array[index]\n                return new_array\n            \n            for pos in pos_to_remove:\n                new_points = remove_element(points,pos)\n                temp = self.maxManhattanDistance(new_points)\n                if (temp < distance):\n                    distance = temp\n                    \n        return distance"
}