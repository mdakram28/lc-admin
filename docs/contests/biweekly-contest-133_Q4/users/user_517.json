{
    "username": "likheetshetty",
    "submission": "from typing import List\n\nclass Solution:\n    MODULO = 1_000_000_007\n    MAX_INV = 400\n    \n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        inv_requirements = {req[0] + 1: req[1] for req in requirements}\n        dp = [[0] * (self.MAX_INV + 1) for _ in range(n + 1)]\n        dp[0][0] = 1  # base case\n        for i in range(1, n + 1):\n            for inv in range(self.MAX_INV + 1):\n                for j in range(i):\n                    prev_inv = inv - j\n                    if prev_inv >= 0:\n                        dp[i][inv] = (dp[i][inv] + dp[i - 1][prev_inv]) % self.MODULO\n            if i in inv_requirements:\n                req_inv = inv_requirements[i]\n                for inv in range(self.MAX_INV + 1):\n                    if inv != req_inv:\n                        dp[i][inv] = 0\n        result = sum(dp[n]) % self.MODULO\n        return result",
    "submit_ts": "1719070299",
    "subm_id": "1296819562"
}