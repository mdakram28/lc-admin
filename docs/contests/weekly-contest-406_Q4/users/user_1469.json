{
    "username": "Qode_breaker",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        long totalCost = 0;\n\n        // Convert int[] to Integer[] for sorting in reverse order\n        Integer[] horizontalCosts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] verticalCosts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n\n        // Sort the horizontal and vertical costs in reverse order\n        Arrays.sort(horizontalCosts, Collections.reverseOrder());\n        Arrays.sort(verticalCosts, Collections.reverseOrder());\n\n        // Initialize current number of horizontal and vertical segments as 1\n        int horizontalSegments = 1, verticalSegments = 1;\n\n        // Indices for horizontal and vertical cuts\n        int hIndex = 0, vIndex = 0;\n\n        // Loop until one or both cost arrays are fully processed\n        while (hIndex < m - 1 && vIndex < n - 1) {\n            if (horizontalCosts[hIndex] > verticalCosts[vIndex]) {\n                totalCost += (long) horizontalCosts[hIndex] * verticalSegments;\n                horizontalSegments++;\n                hIndex++;\n            } else {\n                totalCost += (long) verticalCosts[vIndex] * horizontalSegments;\n                verticalSegments++;\n                vIndex++;\n            }\n        }\n\n        // Add the remaining horizontal cuts\n        while (hIndex < m - 1) {\n            totalCost += (long) horizontalCosts[hIndex] * verticalSegments;\n            hIndex++;\n        }\n\n        // Add the remaining vertical cuts\n        while (vIndex < n - 1) {\n            totalCost += (long) verticalCosts[vIndex] * horizontalSegments;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n}\n\n// Example usage:\n// public class Main {\n//     public static void main(String[] args) {\n//         Solution sol = new Solution();\n//         int[] horizontalCut = {2, 3, 2, 3, 1};\n//         int[] verticalCut = {1, 2};\n//         int m = 6;\n//         int n = 3;\n//         long result = sol.minimumCost(m, n, horizontalCut, verticalCut);\n//         System.out.println(\"Result: \" + result);  // Output should be 28\n//     }\n// }\n",
    "submit_ts": "1720925978",
    "subm_id": "1320272187"
}