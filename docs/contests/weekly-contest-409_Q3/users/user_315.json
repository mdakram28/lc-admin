{
    "username": "KLatitude",
    "submission": "struct Node {\n    int x;\n    struct Node *nx;\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        map<int, struct Node*> mp;\n        struct Node *root = nullptr, *q = nullptr;\n        for (int i = 0; i < n; i ++ ) {\n            struct Node *p = new Node();\n            p->x = i;\n            p->nx = nullptr;\n            mp[i] = p;\n\n            if (root == nullptr) {\n                root = p;\n            } else\n                q->nx = p;\n            q = p;\n        }\n\n        vector<int> res;\n        int count = n - 1;\n        for (int i = 0; i < queries.size(); i ++ ) {\n            int u = queries[i][0], v = queries[i][1];\n            if (mp.count(u) == 0 || mp.count(v) == 0) {\n                res.push_back(count);\n                continue;\n            }\n\n            struct Node *pu = mp[u], *pv = mp[v];\n            struct Node *p = pu->nx;\n            while (p != pv) {\n                mp.erase(p->x);\n                struct Node *q = p->nx;\n                delete p;\n                p = q;\n                count -- ;\n            }\n            pu->nx = pv;\n\n            res.push_back(count);\n        }\n\n        while (root != nullptr) {\n            struct Node *q = root->nx;\n            delete root;\n            root = q;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722740952",
    "subm_id": "552334861"
}