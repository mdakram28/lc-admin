{
    "username": "nikhil63977",
    "submission": "// import java.util.*;\n\n// class Solution {\n//     public boolean canReachCorner(int width, int height, int[][] circles) {\n//         int[][] directions = {\n//             {1, 0}, {-1, 0}, {0, 1}, {0, -1}, {1, 1}, {1, -1}, {-1, 1}, {-1, -1}\n//         };\n//         Queue<int[]> queue = new LinkedList<>();\n//         Set<String> visited = new HashSet<>();\n\n//         queue.offer(new int[]{0, 0});\n//         visited.add(\"0,0\");\n\n//         while (!queue.isEmpty()) {\n//             int[] current = queue.poll();\n//             int curX = current[0];\n//             int curY = current[1];\n\n//             if (curX == width && curY == height) {\n//                 return true;\n//             }\n\n//             for (int[] direction : directions) {\n//                 int newX = curX + direction[0];\n//                 int newY = curY + direction[1];\n\n//                 if (newX >= 0 && newX <= width && newY >= 0 && newY <= height &&\n//                     !isInAnyCircle(newX, newY, circles) && !visited.contains(newX + \",\" + newY)) {\n//                     queue.offer(new int[]{newX, newY});\n//                     visited.add(newX + \",\" + newY);\n//                 }\n//             }\n//         }\n\n//         return false;\n//     }\n\n//     private boolean isInAnyCircle(int x, int y, int[][] circles) {\n//         for (int[] circle : circles) {\n//             int centerX = circle[0];\n//             int centerY = circle[1];\n//             int radius = circle[2];\n//             if ((x - centerX) * (x - centerX) + (y - centerY) * (y - centerY) <= radius * radius) {\n//                 return true;\n//             }\n//         }\n//         return false;\n//     }\n\n    \n// }\n\nimport java.util.*;\n\nclass Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        int numCircles = circles2.length;\n        List<int[]> circles = new ArrayList<>();\n        List<List<Integer>> graph = new ArrayList<>();\n        \n        for (int i = 0; i < numCircles + 4; ++i) {\n            graph.add(new ArrayList<>());\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            int x = circles2[i][0];\n            int y = circles2[i][1];\n            int r = circles2[i][2];\n            circles.add(new int[]{x, y, r});\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            int[] circle = circles.get(i);\n            int x = circle[0], y = circle[1], r = circle[2];\n            \n            if (x <= r) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - x <= r) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (y <= r) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - y <= r) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n            \n            for (int j = i + 1; j < numCircles; ++j) {\n                int[] otherCircle = circles.get(j);\n                int otherX = otherCircle[0], otherY = otherCircle[1], otherR = otherCircle[2];\n                double distance = Math.sqrt(Math.pow(x - otherX, 2) + Math.pow(y - otherY, 2));\n                int radiusSum = r + otherR;\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n        \n        return isBlocked == 0;\n    }\n\n    private int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        queue.offer(start);\n        visited[start] = true;\n        \n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.offer(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        \n        return (visited[target1] || visited[target2]) ? 1 : 0;\n    }\n\n//     public static void main(String[] args) {\n//         Solution sol = new Solution();\n//         System.out.println(sol.canReachCorner(13, 5, new int[][]{{3, 1, 1}, {8, 3, 1}, {12, 2, 1}, {6, 4, 1}, {6, 4, 1}, {4, 3, 1}, {5, 4, 1}})); // Output: true\n//     }\n// }\n}\n\n",
    "submit_ts": "1722136369",
    "subm_id": "1335732271"
}