{
    "username": "scotchtape",
    "submission": "\nusing ll = long long;\nclass HashedString {\nprivate:\n    // change M and B if you want\n    static const ll M = (1LL << 61) - 1;\n    static const ll B = 174009870203695392;\n\n    // pow[i] contains B^i % M\n    inline static vector<ll> pow = {1};\n\n    // p_hash[i] is the hash of the first i characters of the given string\n    vector<ll> p_hash;\n\n    __int128 mul(ll a, ll b) { return (__int128)a * b; }\n    ll mod_mul(ll a, ll b) { return mul(a, b) % M; }\n\npublic:\n    HashedString(const string &s) : p_hash(s.size() + 1) {\n        while (pow.size() <= s.size()) { pow.push_back(mod_mul(pow.back(), B)); }\n        p_hash[0] = 0;\n        for (int i = 0; i < s.size(); i++) {\n            p_hash[i + 1] = (mul(p_hash[i], B) + s[i]) % M;\n        }\n    }\n\n    ll get_hash(int start, int end) {\n        ll raw_val =\n                p_hash[end + 1] - mod_mul(p_hash[start], pow[end - start + 1]);\n        return (raw_val + M) % M;\n    }\n};\n#include<bits/extc++.h>\nstruct splitmix64_hash {\n    static uint64_t splitmix64(uint64_t x) {\n        // http://xorshift.di.unimi.it/splitmix64.c\n        x += 0x9e3779b97f4a7c15;\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n        return x ^ (x >> 31);\n    }\n\n    size_t operator()(uint64_t x) const {\n        static const uint64_t FIXED_RANDOM = std::chrono::steady_clock::now().time_since_epoch().count();\n        return splitmix64(x + FIXED_RANDOM);\n    }\n};\n\ntemplate <typename K, typename V, typename Hash = splitmix64_hash>\nusing hash_map = __gnu_pbds::gp_hash_table<K, V, Hash>;\n\n\nclass Solution {\npublic:\n    int minimumCost(string S, vector<string>& w, vector<int>& c) {\n        int n = w.size();\n        int m = S.size();\n\n        set<int> lens_set; for (string &s : w) lens_set.insert(s.size());\n        vector<int> lens; for (int i : lens_set) lens.push_back(i);\n        sort(lens.begin(), lens.end()); int MAX_LEN = lens.back();\n\n        vector<hash_map<ll, int>> a(MAX_LEN+1);\n\n        for (int i = 0; i < n; ++i) {\n            int len = w[i].size();\n            HashedString hs(w[i]);\n\n            for (int i = 0; i < len; ++i) {\n                int &x = a[i+1][hs.get_hash(0, i)];\n                if (x == 0) x = -1; // should continue\n            }\n\n            int &x = a[len][hs.get_hash(0, len-1)];\n            if (x <= 0) x = c[i];\n            x = min(x, c[i]);\n        }\n\n        vector<int> ans(m+1, 1e9); ans[m] = 0;\n        HashedString h(S);\n        for (int i = m-1; i >= 0; --i) {\n            for (int len : lens) {\n                if (i+len > m) break;\n                ll hash = h.get_hash(i, i+len-1);\n                int C = a[len][hash];\n                if (C > 0) {\n                    ans[i] = min(ans[i], C + ans[i+len]);\n                } else if (C != -1) {\n                    break;\n                }\n            }\n        }\n\n        int ANS = ans[0];\n        if (ANS == 1e9) return -1;\n        return ANS;\n    }\n};",
    "submit_ts": "1720322409",
    "subm_id": "1312349111"
}