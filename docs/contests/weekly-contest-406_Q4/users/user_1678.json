{
    "username": "ftr_45",
    "submission": "\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        long long total_cost = 0;\n        int h_segments = 1, v_segments = 1;\n        int h_index = 0, v_index = 0;\n\n        // Process the cuts\n        while (h_index < horizontalCut.size() && v_index < verticalCut.size()) {\n            if (horizontalCut[h_index] >= verticalCut[v_index]) {\n                total_cost += (long long)horizontalCut[h_index] * v_segments;\n                h_segments++;\n                h_index++;\n            } else {\n                total_cost += (long long)verticalCut[v_index] * h_segments;\n                v_segments++;\n                v_index++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (h_index < horizontalCut.size()) {\n            total_cost += (long long)horizontalCut[h_index] * v_segments;\n            h_segments++;\n            h_index++;\n        }\n\n        // If there are remaining vertical cuts\n        while (v_index < verticalCut.size()) {\n            total_cost += (long long)verticalCut[v_index] * h_segments;\n            v_segments++;\n            v_index++;\n        }\n\n        return total_cost;\n    }\n};",
    "submit_ts": "1720926393",
    "subm_id": "1320284901"
}