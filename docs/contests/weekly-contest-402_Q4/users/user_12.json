{
    "username": "rba123",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n\n    def is_peak(self, i):\n        if i <= 0 or i >= self.n - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n\n    def build(self, node, start, end):\n        if start == end:\n            if self.is_peak(start):\n                self.tree[node] = 1\n            else:\n                self.tree[node] = 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def update(self, node, start, end, idx):\n        if start == end:\n            if self.is_peak(start):\n                self.tree[node] = 1\n            else:\n                self.tree[node] = 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(left_child, start, mid, idx)\n            else:\n                self.update(right_child, mid + 1, end, idx)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, node, start, end, L, R):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_sum = self.query(left_child, start, mid, L, R)\n        right_sum = self.query(right_child, mid + 1, end, L, R)\n        return left_sum + right_sum\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        st = SegmentTree(nums)\n        result = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                result.append(st.query(0, 0, st.n - 1, li + 1, ri - 1))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n                st.update(0, 0, st.n - 1, indexi)\n                if indexi > 0:\n                    st.update(0, 0, st.n - 1, indexi - 1)\n                if indexi < st.n - 1:\n                    st.update(0, 0, st.n - 1, indexi + 1)\n\n        return result\n\n        ",
    "submit_ts": 1718505871.0
}