{
    "username": "eulusoy",
    "submission": "class Solution {\npublic:\n    struct TrieNode{\n        TrieNode* childNode[26];\n        bool wordEnd;\n        int cost;\n        TrieNode(){\n            wordEnd = false;\n            cost = INT_MAX;\n            for (int i = 0; i < 26; i++) {\n                childNode[i] = NULL;\n            }\n        }\n    };\n\n    void insert_key(TrieNode* root, string& key, int cost){\n        TrieNode* currentNode = root;\n        for (auto c : key) {\n            if (currentNode->childNode[c - 'a'] == NULL) {\n                TrieNode* newNode = new TrieNode();\n                currentNode->childNode[c - 'a'] = newNode;\n            }\n            currentNode = currentNode->childNode[c - 'a'];\n        }\n        currentNode->wordEnd = true;\n        currentNode->cost = min(cost, currentNode->cost);\n    }\n\n    void search_key(TrieNode* root, string& key, int start, vector<int> &helper){\n        TrieNode* currentNode = root;\n        for (int i=start; i<key.size(); ++i){\n            // cout << i << \" \";\n            if (currentNode->childNode[key[i] - 'a'] == NULL) {\n                // cout << endl;\n                return;\n            }\n            else{\n                currentNode = currentNode->childNode[key[i]-'a'];\n                // cout << \"else\" << \" \";\n                if (currentNode->wordEnd == true){\n                    helper[i+1] = min(helper[i+1], helper[start]+currentNode->cost);\n                }\n            }\n        }\n        // cout << endl;\n    }\n\n    void traverse(TrieNode* myTrie){\n        if(myTrie->wordEnd==true){\n            cout << myTrie->cost << endl;\n        }\n        for (int i=0; i<26; ++i){\n            if(myTrie->childNode[i]!=NULL){\n                traverse(myTrie->childNode[i]);\n            }\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* myTrie = new TrieNode();\n        int n = words.size();\n        for(int i=0; i<n; ++i){\n            insert_key(myTrie,words[i],costs[i]);\n        }\n        int t = target.size();\n        vector<int> helper(t+1,INT_MAX);\n        helper[0] = 0;\n        // traverse(myTrie);\n        for(int i=0; i<t; ++i){\n            if(helper[i]!=INT_MAX){\n                search_key(myTrie, target, i, helper);\n            }\n            // for(int j=0; j<=t; ++j){\n            //     cout << helper[j] << \" \";\n            // }\n            // cout << endl;\n        }\n        \n        if(helper.back()==INT_MAX){\n            return -1;\n        }\n        \n        return helper.back();\n    }\n};",
    "submit_ts": "1720323692",
    "subm_id": "1312381729"
}