{
    "username": "ubhowns",
    "submission": "impl Solution {\n    pub fn minimum_distance(points: Vec<Vec<i32>>) -> i32 {\n        let mut sums: Vec<(i32, usize)> = points\n            .iter()\n            .enumerate()\n            .map(|(i, v)| (v[0] + v[1], i))\n            .collect();\n        sums.sort_unstable();\n\n        let mut diffs: Vec<(i32, usize)> = points\n            .iter()\n            .enumerate()\n            .map(|(i, v)| (v[0] - v[1], i))\n            .collect();\n        diffs.sort_unstable();\n\n        let n = points.len();\n\n        let (a, b) = if sums[n - 1].0 - sums[0].0 > diffs[n - 1].0 - diffs[0].0 {\n            (sums[n - 1].1, sums[0].1)\n        } else {\n            (diffs[n - 1].1, diffs[0].1)\n        };\n\n        let sum_first = if sums[0].1 == a { sums[1].0 } else { sums[0].0 } as i32;\n        let sum_last = if sums[n - 1].1 == a {\n            sums[n - 2].0\n        } else {\n            sums[n - 1].0\n        } as i32;\n\n        let diff_first = if diffs[0].1 == a {\n            diffs[1].0\n        } else {\n            diffs[0].0\n        } as i32;\n        let diff_last = if diffs[n - 1].1 == a {\n            diffs[n - 2].0\n        } else {\n            diffs[n - 1].0\n        } as i32;\n\n        let a_less = (sum_last - sum_first).max(diff_last - diff_first);\n\n        let sum_first = if sums[0].1 == b { sums[1].0 } else { sums[0].0 } as i32;\n        let sum_last = if sums[n - 1].1 == b {\n            sums[n - 2].0\n        } else {\n            sums[n - 1].0\n        } as i32;\n\n        let diff_first = if diffs[0].1 == b {\n            diffs[1].0\n        } else {\n            diffs[0].0\n        } as i32;\n        let diff_last = if diffs[n - 1].1 == b {\n            diffs[n - 2].0\n        } else {\n            diffs[n - 1].0\n        } as i32;\n\n        let b_less = (sum_last - sum_first).max(diff_last - diff_first);\n\n        // println!(\"{:?}\", sums);\n        // println!(\"{:?}\", diffs);\n\n        a_less.min(b_less) as i32\n    }\n}"
}