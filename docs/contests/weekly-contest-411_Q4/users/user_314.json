{
    "username": "Anish Majumdar",
    "submission": "/**\n * @param {string} s\n * @param {number} k\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countKConstraintSubstrings = function(s, k, queries) {\n    const n = s.length;\n    const zeroesCount = new Array(n).fill(0);\n    const onesCount = new Array(n).fill(0);\n\n    for (let i = 0; i < n; i++) {\n        zeroesCount[i] = (s[i] === '0' ? 1 : 0) + (i > 0 ? zeroesCount[i - 1] : 0);\n        onesCount[i] = (s[i] === '1' ? 1 : 0) + (i > 0 ? onesCount[i - 1] : 0);\n    }\n\n    const calculatePrefixSum = () => {\n        const prefixSum = new Array(n + 1).fill(0);\n        for (let i = 1; i <= n; i++) {\n            prefixSum[i] = prefixSum[i - 1] + i;\n        }\n        return prefixSum;\n    };\n\n    const findRightBoundary = (startIdx) => {\n        let left = startIdx, right = n - 1;\n        let bestIdx = startIdx;\n        while (left <= right) {\n            const mid = Math.floor((left + right) / 2);\n            const zerosInRange = zeroesCount[mid] - (startIdx > 0 ? zeroesCount[startIdx - 1] : 0);\n            const onesInRange = onesCount[mid] - (startIdx > 0 ? onesCount[startIdx - 1] : 0);\n            if (zerosInRange <= k || onesInRange <= k) {\n                bestIdx = mid;\n                left = mid + 1;\n            } else {\n                right = mid - 1;\n            }\n        }\n        return bestIdx;\n    };\n\n    const findLeftBoundary = (endIdx) => {\n        let left = 0, right = endIdx;\n        let bestIdx = endIdx;\n        while (left <= right) {\n            const mid = Math.floor((left + right) / 2);\n            const zerosInRange = zeroesCount[endIdx] - (mid > 0 ? zeroesCount[mid - 1] : 0);\n            const onesInRange = onesCount[endIdx] - (mid > 0 ? onesCount[mid - 1] : 0);\n            if (zerosInRange <= k || onesInRange <= k) {\n                bestIdx = mid;\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return bestIdx;\n    };\n\n    const calculateSubstringCount = () => {\n        const substringCount = new Array(n).fill(0);\n        for (let i = 0; i < n; i++) {\n            const rightBoundary = findRightBoundary(i);\n            substringCount[i] = (rightBoundary - i + 1) + (i > 0 ? substringCount[i - 1] : 0);\n        }\n        return substringCount;\n    };\n\n    const prefixSum = calculatePrefixSum();\n    const substringCount = calculateSubstringCount();\n    const result = [];\n\n    for (const [leftQuery, rightQuery] of queries) {\n        let leftBoundary = findLeftBoundary(rightQuery);\n        if (leftBoundary < leftQuery) leftBoundary = leftQuery;\n        const substrLength = rightQuery - leftBoundary + 1;\n        let currSum = 0;\n        if (leftBoundary > leftQuery) {\n            currSum += substringCount[leftBoundary - 1] - (leftQuery > 0 ? substringCount[leftQuery - 1] : 0);\n        }\n        currSum += prefixSum[substrLength];\n        result.push(currSum);\n    }\n\n    return result;\n};\n",
    "submit_ts": "1723953569",
    "subm_id": "1359824956"
}