{
    "username": "Satyam1942",
    "submission": "class Solution {\n    long mod = (long)(1e9+7);\n    \n    long rec(int index,int inversionCount, int n,HashMap<Integer,Integer> map, Long cache[][] ){\n       \n        if(inversionCount>400)\n            return 0;\n        if(cache[index][inversionCount]!=null)\n                return cache[index][inversionCount];\n        \n        if(map.containsKey(index) && map.get(index)!=inversionCount)\n                return cache[index][inversionCount] = 0l;\n        \n         if(index==n-1)\n            return cache[index][inversionCount] = 1l;\n        \n   \n        // if(map.containsKey(index)){\n        //     long nonInvert = (rec(index+1,inversionCount,n,map,cache))%mod;\n        //     long invert = (rec(index+1,inversionCount+1,n,map,cache))%mod;\n        //     return cache[index][inversionCount] = (nonInvert%mod+invert%mod)%mod;\n        // }else{\n            long total = 0;\n            for(int i=0;i<=index+1;i++){\n                total = (total+rec(index+1,inversionCount+i,n,map,cache))%mod;\n            }\n             return cache[index][inversionCount] = (total)%mod;\n        // }\n        \n      \n    }\n    \n    public int numberOfPermutations(int n, int[][] requirements) {\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i=0;i<requirements.length;i++)\n            map.put(requirements[i][0],requirements[i][1]);\n        Long cache[][] = new Long[n+1][400+1];\n        return (int)(rec(0,0,n,map,cache)%mod);   \n    }\n}",
    "submit_ts": 1719071500.0
}