{
    "username": "inversionpeter",
    "submission": "int differences[100001], pairs[100002];\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int minimum = 2147483647, counts = 0, half = nums.size() >> 1, threshold = (k >> 1), smallers = 0, greaters = 0, lower, upper, middle, breaking;\n        memset(differences, 0, sizeof(differences));\n        memset(pairs, 0, sizeof(pairs));\n        for (int i = 0; i < half; ++i) {\n            ++differences[abs(nums[i] - nums[nums.size() - i - 1])];\n            lower = threshold + 1;\n            upper = k;\n            breaking = lower - 1;\n            while (lower <= upper) {\n                middle = (lower + upper) >> 1;\n                if (nums[i] - middle < 0 && nums[i] + middle > k && nums[nums.size() - i - 1] - middle < 0 && nums[nums.size() - i - 1] + middle > k) {\n                    upper = middle - 1;\n                }\n                else {\n                    breaking = middle;\n                    lower = middle + 1;\n                }\n            }\n            ++pairs[breaking];\n        }\n        for (int i = k; i >= threshold; --i) {\n            pairs[i] += pairs[i + 1];\n            //cout << i << \" : \" << pairs[i] << '\\n';\n        }\n        for (int i = 0; i <= k; ++i) {\n            counts = 0;\n            if (i <= threshold) {\n                counts += half - differences[i];\n            }\n            else {\n                counts += nums.size() - pairs[i] - differences[i];\n            }\n            minimum = min(minimum, counts);\n        }\n        return minimum;\n    }\n};",
    "submit_ts": "1721488313",
    "subm_id": "1327418362"
}