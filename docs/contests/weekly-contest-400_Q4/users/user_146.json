{
    "username": "dipakbaghel47",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n   \n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        int n = nums.size();\n        SegmentTree seg(nums);\n        \n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1;\n            int r = n - 1;\n           \n\n            while (r - l > 1) \n            {\n                \n                int mid = (l + r) / 2;\n                if (seg.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            \n            \n            if (l != i - 1)\n                ans = min(ans, abs(seg.query(i, l) - k));\n            ans = min(ans, abs(k - seg.query(i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297809.0
}