{
    "username": "Dr_Philosopher",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &matrix, int start, int target1, int target2, int nodes) {\n    queue<int> q;\n    vector<int> visited(nodes + 4, 0);\n    q.push(start);\n    visited[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : matrix[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[target1] || visited[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& in_put) {\n         vector<pair<pair<int, int>, int>> range(in_put.size());\n         vector<vector<int>> matrix(in_put.size() + 4);\n        int index=in_put.size();\n        \n        for (int i = 0; i < index; ++i) {\n            range[i].first.first=in_put[i][0];\n            range[i].first.second=in_put[i][1];\n            range[i].second=in_put[i][2];\n            \n        }\n        \n        \n        \n         for (int i = 0; i < index; ++i) {\n             \n            if (range[i].first.first <= range[i].second) {\n                matrix[index].push_back(i);\n                matrix[i].push_back(index);\n            }\n            if (X - range[i].first.first <= range[i].second) {\n                matrix[index + 2].push_back(i);\n                matrix[i].push_back(index + 2);\n            }\n            if (range[i].first.second <= range[i].second) {\n                matrix[index + 1].push_back(i);\n                matrix[i].push_back(index + 1);\n            }\n            if (Y - range[i].first.second <= range[i].second) {\n                matrix[index + 3].push_back(i);\n                matrix[i].push_back(index + 3);\n            }\n            for (int j = i + 1; j < index; ++j) {\n                double distt = sqrt(pow(range[i].first.first - range[j].first.first, 2) +\n                                       pow(range[i].first.second - range[j].first.second, 2));\n                int rad_range = range[i].second + range[j].second;\n                if (rad_range >= distt) {\n                    matrix[i].push_back(j);\n                    matrix[j].push_back(i);\n                }\n            }\n        }\n        \n        int valid = 0;\n        \nvalid = max(valid, bfs(matrix, index, index + 1, index + 2, index + 4)); \n    valid = max(valid, bfs(matrix, index + 3, index + 2, index + 1, index + 4)); \n        if (valid){return false;}\n        return true;\n       \n        \n    }\n};",
    "submit_ts": "1722137461",
    "subm_id": "1335764482"
}