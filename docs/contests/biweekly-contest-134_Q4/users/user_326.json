{
    "username": "wkingyu",
    "submission": "class SparseTable:\n    def __init__(self, data, merge_method):\n        self.note = [0] * (len(data) + 1)\n        self.merge_method = merge_method\n        l, r, v = 1, 2, 0\n        while True:\n            for i in range(l, r):\n                if i >= len(self.note):\n                    break\n                self.note[i] = v\n            else:\n                l *= 2\n                r *= 2\n                v += 1\n                continue\n            break\n        self.ST = [[0] * len(data) for _ in range(self.note[-1]+1)]\n        self.ST[0] = data\n        for i in range(1, len(self.ST)):\n            for j in range(len(data) - (1 << i) + 1):\n                self.ST[i][j] = merge_method(self.ST[i-1][j], self.ST[i-1][j + (1 << (i-1))])\n\n    def query(self, l, r):\n        pos = self.note[r-l+1]\n        return self.merge_method(self.ST[pos][l], self.ST[pos][r - (1 << pos) + 1])\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        st = SparseTable(nums, lambda x, y : x & y)\n        n = len(nums)\n        ans = 0\n        for i in range(n):\n            l, r = i, n - 1\n            while l < r:\n                mid = l + r >> 1\n                if st.query(i, mid) <= k:\n                    r = mid\n                else:\n                    l = mid + 1\n            L = l\n            l, r = i, n - 1\n            while l < r:\n                mid = l + r + 1 >> 1\n                if st.query(i, mid) >= k:\n                    l = mid\n                else:\n                    r = mid - 1\n            R = l\n            if R >= L and st.query(i, L) == k:\n                ans += R - L + 1\n        return ans",
    "submit_ts": "1720278153",
    "subm_id": "544560983"
}