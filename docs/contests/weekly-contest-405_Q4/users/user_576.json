{
    "username": "Semi__colon",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;  \n\n        unordered_map<string, int> wordCostMap;\n        for (size_t i = 0; i < words.size(); ++i) {\n            // if (wordCostMap.find(words[i]) == wordCostMap.end()) {\n            //     wordCostMap[words[i]] = costs[i];\n            // } else {\n                wordCostMap[words[i]] = costs[i];\n            // }\n        }\n\n\n        unordered_map<unsigned long long, int> wordHashCostMap;\n        int base = 31;\n        int mod = 1e9 + 7;\n        for (size_t i = 0; i < words.size(); ++i)  {\n            unsigned long long wordHash = computeHash(words[i], base, mod);\n            if (wordHashCostMap.find(wordHash) == wordHashCostMap.end()) {\n                wordHashCostMap[wordHash] = costs[i];\n            } else {\n                wordHashCostMap[wordHash] = min(costs[i],wordHashCostMap[wordHash]);\n            }\n        }\n\n        vector<unsigned long long> targetHashes(n + 1, 0);\n        vector<unsigned long long> powers(n + 1, 1);\n        for (int i = 0; i < n; ++i) {\n            targetHashes[i + 1] = (targetHashes[i] * base + target[i]) % mod;\n            powers[i + 1] = (powers[i] * base) % mod;\n        }\n\n        for (int i = 0; i <= n; ++i) {\n            if (dp[i] == INT_MAX) continue;  \n\n            for (const auto& wordPair : wordCostMap) {\n                int wordLen = wordPair.first.size();\n                if (i + wordLen <= n) {\n                    unsigned long long subHash = (targetHashes[i + wordLen] - targetHashes[i] * powers[wordLen] % mod + mod) % mod;\n                    if (wordHashCostMap.find(subHash) != wordHashCostMap.end()) {\n                        dp[i + wordLen] = min(dp[i + wordLen], dp[i] + wordHashCostMap[subHash]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n        \n        \n    }\n\n\n\n    unsigned long long computeHash(const string &s, int base = 31, int mod = 1e9+7) {\n        unsigned long long hash = 0;\n        for (char c : s) {\n            hash = (hash * base + c) % mod;\n        }\n        return hash;\n    }\n\n       \n};",
    "submit_ts": "1720322760",
    "subm_id": "1312358424"
}