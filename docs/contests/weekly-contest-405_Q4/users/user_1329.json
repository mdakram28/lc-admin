{
    "username": "reobb",
    "submission": "from sys import maxsize\nfrom functools import cache\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        self.trie = {}\n        #self.costmap = {}\n        for i in range(len(words)):\n            self.addToTrie(words[i], costs[i])\n            #if words[i] in self.costmap:\n            #    self.costmap[words[i]] = min(self.costmap[words[i]], costs[i])\n            #else:\n            #    self.costmap[words[i]] = costs[i]\n        \n        @cache\n        def findMinCost(i):\n            if i >= len(target):\n                return 0\n            \n            cost = maxsize\n            #for j in range(i+1, len(target)+1):\n            #    if target[i:j] in self.costmap:\n            #        #print(target[i:j], self.costmap[target[i:j]])\n            #        cost = min(cost, self.costmap[target[i:j]] + findMinCost(j))\n            trie = self.trie\n            while i<len(target) and target[i] in trie:\n                trie = trie[target[i]]\n                i += 1\n                if \"cost\" in trie:\n                    cost = min(cost, trie[\"cost\"] + findMinCost(i))\n                \n            return cost\n        \n        mincost = findMinCost(0)\n        if mincost == maxsize:\n            return -1\n        return mincost\n    \n    \n    def addToTrie(self, word, cost):\n        curr_trie = self.trie\n        for c in word:\n            if c not in curr_trie:\n                curr_trie[c] = {}\n            curr_trie = curr_trie[c]\n        \n        if \"cost\" not in curr_trie:\n            curr_trie[\"cost\"] = maxsize\n        curr_trie[\"cost\"] = min(cost, curr_trie[\"cost\"])\n",
    "submit_ts": "1720323945",
    "subm_id": "1312387883"
}