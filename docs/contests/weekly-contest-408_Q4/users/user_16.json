{
    "username": "scanhex",
    "submission": "class Solution {\npublic:\n  bool canReachCorner(int X, int Y, vector<vector<int>> &circles) {\n    int n = circles.size() + 4;\n    vector<vector<bool>> matr(n, vector<bool>(n, false));\n    int left = n - 1, right = n - 2, top = n - 3, bottom = n - 4;\n    for (int i = 0; i < n - 4; ++i) {\n      for (int j = i + 1; j < n; ++j) {\n        bool edge = false;\n        if (j == left) {\n          edge = circles[i][0] <= circles[i][2];\n        } else if (j == right) {\n          edge = circles[i][0] + circles[i][2] >= X;\n        } else if (j == top) {\n          edge = circles[i][1] + circles[i][2] >= Y;\n        } else if (j == bottom) {\n          edge = circles[i][1] <= circles[i][2];\n        } else {\n          if (1LL * (circles[i][0] - circles[j][0]) *\n                      (circles[i][0] - circles[j][0]) +\n                  1LL * (circles[i][1] - circles[j][1]) *\n                      (circles[i][1] - circles[j][1]) <=\n              1LL * (circles[i][2] + circles[j][2]) *\n                  (circles[i][2] + circles[j][2])) {\n            edge = true;\n          }\n        }\n        matr[i][j] = matr[j][i] = edge;\n      }\n    }\n    auto bfs = [&](int start) {\n      vector<bool> visited(n, false);\n      queue<int> q;\n      q.push(start);\n      visited[start] = true;\n      while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v = 0; v < n; ++v) {\n          if (matr[u][v] && !visited[v]) {\n            visited[v] = true;\n            q.push(v);\n          }\n        }\n      }\n      return visited;\n    };\n    auto bleft = bfs(left);\n    auto bright = bfs(right);\n    auto btop = bfs(top);\n    if (bleft[bottom] || bleft[right] || bright[top] || btop[bottom]) {\n      return false;\n    }\n    return true;\n  }\n};\n",
    "submit_ts": "1722134562",
    "subm_id": "1335670307"
}