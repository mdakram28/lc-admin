{
    "username": "Utkarsh Singh",
    "submission": "class Solution {\nprivate:\n    long long dpTable[100005][10];\n    string largestPalindromeString = \"0\";\n\n    long long calculateModularExponentiation(long long base, long long exponent, long long modulo) {\n        base %= modulo;\n        long long result = 1;\n        while (exponent) {\n            if (exponent % 2) {\n                result = result * base % modulo;\n                --exponent;\n            } else {\n                base = base * base % modulo;\n                exponent /= 2;\n            }\n        }\n        return result;\n    }\n\n    bool findLargestPalindrome(int currentIndex, int currentRemainder, long long divisor, long long totalLength, string &currentPalindrome) {\n        long long mirrorIndex = (totalLength - 1) - currentIndex;\n        if (mirrorIndex < currentIndex) {\n            if (currentRemainder != 0) return false;\n            if (currentPalindrome > largestPalindromeString) {\n                largestPalindromeString = currentPalindrome;\n            }\n            return true;\n        }\n\n        if (dpTable[currentIndex][currentRemainder] != -1) return dpTable[currentIndex][currentRemainder];\n\n        int startingDigit = (currentIndex == 0) ? 1 : 0;\n        for (int digit = 9; digit >= startingDigit; --digit) {\n            long long powerAtCurrentIndex = calculateModularExponentiation(10, currentIndex, divisor);\n            long long powerAtMirrorIndex = calculateModularExponentiation(10, mirrorIndex, divisor);\n            powerAtCurrentIndex = (powerAtCurrentIndex * digit) % divisor;\n            powerAtMirrorIndex = (powerAtMirrorIndex * digit) % divisor;\n\n            currentPalindrome[currentIndex] = currentPalindrome[mirrorIndex] = char(digit + '0');\n            if (currentIndex != mirrorIndex) powerAtCurrentIndex = (powerAtCurrentIndex + powerAtMirrorIndex) % divisor;\n\n            if (findLargestPalindrome(currentIndex + 1, (currentRemainder + powerAtCurrentIndex) % divisor, divisor, totalLength, currentPalindrome)) {\n                return dpTable[currentIndex][currentRemainder] = true;\n            }\n        }\n\n        return dpTable[currentIndex][currentRemainder] = false;\n    }\n\npublic:\n    string largestPalindrome(int numberOfDigits, int divisor) {\n        memset(dpTable, -1, sizeof(dpTable));\n        string palindrome(numberOfDigits, '0');\n        findLargestPalindrome(0, 0, divisor, numberOfDigits, palindrome);\n        return largestPalindromeString;\n    }\n};",
    "submit_ts": "1723953550",
    "subm_id": "1359824318"
}