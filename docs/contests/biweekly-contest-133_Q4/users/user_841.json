{
    "username": "DevlinShivam",
    "submission": "#define MOD 1000000007\n#define MAX_INVERSIONS 400\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        // Store requirements in a map for quick lookup\n        std::unordered_map<int, int> inversionReqs;\n        for (const auto& req : reqs) {\n            inversionReqs[req[0] + 1] = req[1];\n        }\n\n        // DP table to store the count of permutations with a given number of inversions\n        std::vector<std::vector<long long>> dp(n + 1, std::vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1; // Base case: 1 way to have 0 elements with 0 inversions\n\n        // Fill the DP table\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                dp[len][inv] = 0; // Initialize current cell\n                for (int pos = 0; pos < len; ++pos) {\n                    if (inv >= pos) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - pos]) % MOD;\n                    }\n                }\n            }\n\n            // Enforce the requirement for the current length if it exists\n            if (inversionReqs.count(len)) {\n                int requiredInversions = inversionReqs[len];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != requiredInversions) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up all valid permutations with any number of inversions for full length n\n        long long totalPermutations = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            totalPermutations = (totalPermutations + dp[n][inv]) % MOD;\n        }\n\n        return totalPermutations;   \n    }\n};\n\n",
    "submit_ts": 1719071360.0
}