{
    "username": "abhishekrana25112002",
    "submission": "// class Solution {\n// public:\n//     int waysToReachStair(int k) {\n//         return solve(k, 1, 2, 0);\n//     }\n//     int solve(int k, int stair, int op, int jump) {\n//         if(stair > k + 1 || (stair == k + 1 && op == 1))            return 0;\n        \n//         int x = 0, y = 0;\n//         if(stair == k)          x++;\n        \n//         x += solve(k, stair + pow(2, jump), 2, jump + 1);\n//         if(op != 1 && stair != 0)         y = solve(k, stair - 1, 1, jump);\n//         return x + y;\n//     }\n// };\n#include <unordered_map>\n#include <tuple>\n#include <cmath>\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        std::unordered_map<std::tuple<int, int, int>, int, hash_tuple> memo;\n        return solve(k, 1, 2, 0, memo);\n    }\n\nprivate:\n    struct hash_tuple {\n        template <class T1, class T2, class T3>\n        std::size_t operator()(const std::tuple<T1, T2, T3>& t) const {\n            return std::hash<T1>()(std::get<0>(t)) ^ std::hash<T2>()(std::get<1>(t)) ^ std::hash<T3>()(std::get<2>(t));\n        }\n    };\n\n    int solve(int k, int stair, int op, int jump, std::unordered_map<std::tuple<int, int, int>, int, hash_tuple>& memo) {\n        if (stair > k + 1 || (stair == k + 1 && op == 1)) {\n            return 0;\n        }\n\n        if (memo.find({stair, op, jump}) != memo.end()) {\n            return memo[{stair, op, jump}];\n        }\n\n        int x = 0, y = 0;\n        if (stair == k) {\n            x++;\n        }\n\n        x += solve(k, stair + pow(2, jump), 2, jump + 1, memo);\n        if (op != 1 && stair != 0) {\n            y = solve(k, stair - 1, 1, jump, memo);\n        }\n\n        return memo[{stair, op, jump}] = x + y;\n    }\n};\n",
    "submit_ts": 1716089122.0
}