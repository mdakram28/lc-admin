{
    "username": "MakarenkoStepan",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        col2maxVal = defaultdict(lambda : [(-float('inf'), 0)] * 3)\n        row2maxVal = defaultdict(lambda : [(-float('inf'), 0)] * 3)\n        \n        n = len(board)\n        m = len(board[0])\n\n        def packValue(i, j, d, v):\n            if d[i][0][0] < v:\n                d[i][2], d[i][1] = d[i][1] , d[i][0]\n                d[i][0] = (v, j)\n            elif d[i][1][0] < v:\n                d[i][2] = d[i][1]\n                d[i][1] = (v, j)\n            elif d[i][2][0] < v:\n                d[i][2] = (v, j)\n\n        for i in range(n):\n            for j in range(m):\n                packValue(i, j, row2maxVal, board[i][j])\n                packValue(j, i, col2maxVal, board[i][j])\n        \n        # print(row2maxVal)\n        # print(col2maxVal)\n        ans = -float('inf')\n\n        def backtrack(curr_sum, d, visited_r, visited_c):\n            nonlocal ans\n            if d == 3:\n                ans = max(ans, curr_sum)\n                return\n\n            for row in range(n):\n                if row not in visited_r:\n                    visited_r.add(row)\n                    col = None\n                    _add = 0\n                    for cand in range(3):\n                        if row2maxVal[row][cand][1] not in visited_c:\n                            col = row2maxVal[row][cand][1]\n                            _add = row2maxVal[row][cand][0]\n                            break\n                    visited_c.add(col)\n                    backtrack(curr_sum + _add, d + 1, visited_r, visited_c)\n                    visited_c.remove(col)\n                    visited_r.remove(row)\n        \n        v_r = set()\n        v_c = set()\n        backtrack(0, 0, v_r, v_c)\n        return ans\n                    \n\n\n\n        ",
    "submit_ts": "1723907831",
    "subm_id": "1359126219"
}