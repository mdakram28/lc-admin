{
    "username": "Satyam Kanoujia",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        vector<vector<pair<int, int>>> bestColumns(m);\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowWithIndices;\n            for (int j = 0; j < n; ++j) {\n                rowWithIndices.push_back({board[i][j], j});\n            }\n            sort(rowWithIndices.rbegin(), rowWithIndices.rend()); \n            for (int k = 0; k < std::min(3, n); ++k) {\n                bestColumns[i].push_back(rowWithIndices[k]);\n            }\n        }\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (auto& c1 : bestColumns[r1]) {\n                        for (auto& c2 : bestColumns[r2]) {\n                            if (c2.second == c1.second) continue; \n                            for (auto& c3 : bestColumns[r3]) {\n                                if (c3.second == c1.second || c3.second == c2.second) continue;\n                                long long sum = static_cast<long long>(c1.first) +\n                                                static_cast<long long>(c2.first) +\n                                                static_cast<long long>(c3.first);\n                                maxSum = max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723909377",
    "subm_id": "1359190230"
}