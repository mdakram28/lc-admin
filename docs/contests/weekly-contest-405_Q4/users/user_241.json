{
    "username": "nqvr",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        class Node:\n            def __init__(self):\n                self.children = {}\n                self.ok = False\n                self.word_index = -1\n        \n        root = Node()\n        for i, word in enumerate(words):\n            node = root\n            for c in word:\n                if c not in node.children:\n                    node.children[c] = Node()\n                node = node.children[c]\n            \n            node.length = len(word)\n            if not node.ok or costs[i] < costs[node.word_index]:\n                node.ok = True\n                node.word_index = i\n\n        MAX_V = max(costs) * len(target) + 100\n\n        @cache\n        def helper(i):\n            if i == len(target):\n                return 0\n            \n            node = root\n            ans = MAX_V\n            while i < len(target):\n                c = target[i]\n                if c not in node.children:\n                    return ans\n                \n                node = node.children[c] \n                if node.ok:\n                    ans = min(ans, costs[node.word_index] + helper(i + 1))\n\n                i += 1\n            return ans\n        \n        N = len(target)\n        for i in range(N - 1, -1, -1):\n            helper(i)\n\n        ans = helper(0)\n        return -1 if ans == MAX_V else ans\n    \n    \n    ",
    "submit_ts": "1720321860",
    "subm_id": "1312334238"
}