{
    "username": "EUqr2c2cjD8nuX5K",
    "submission": "struct Node {\n    array<Node*, 26> children{};\n    bool is_word = false;\n    int cost = INT_MAX;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        const int n = target.size();\n        \n        auto root = new Node;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            // Add words[i] with costs[i]\n            auto p = root;\n            for (auto ch : words[i]) {\n                int index = ch - 'a';\n                if (p->children[index] == nullptr)\n                    p->children[index] = new Node;\n                p = p->children[index];\n            }\n            p->is_word = true;\n            p->cost = min(p->cost, costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[n] = 0;\n        \n        for (int i = n - 1; i >= 0; --i) {\n            // Compute dp[i], the min cost to make target[i...] out of the given words\n            \n            dp[i] = INT_MAX;\n            \n            auto p = root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (p->children[index] == nullptr) break;\n                p = p->children[index];\n                if (p->is_word && dp[j + 1] < INT_MAX)\n                    dp[i] = min(dp[i], p->cost + dp[j + 1]);\n            }\n        }\n        return dp[0] == INT_MAX ? -1 : dp[0];\n    }\n};",
    "submit_ts": "1720320857",
    "subm_id": "1312306559"
}