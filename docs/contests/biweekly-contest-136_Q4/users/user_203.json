{
    "username": "saikrishna17394",
    "submission": "class Solution {\n    void dfs(int u, int par, vector<int>& dp, vector<vector<int>>& g) {\n\n        for (int v : g[u]) {\n            if (v == par) {\n                continue;\n            }\n\n            dfs(v, u, dp, g);\n\n            if (v & 1) {\n                dp[u] = max(dp[u], dp[v] + 1);\n            }\n            else {\n                dp[u] = max(dp[u], dp[v] + 2);\n            }\n        }\n    }\n\n    void new_dfs(int u, int par, int tim, vector<int>& dp, vector<int>& ans, vector<vector<int>>& g) {\n        \n        ans[u] = max(dp[u], tim);\n        multiset<int> s;\n\n        for (int v : g[u]) {\n            if (v == par) {\n                continue;\n            }\n\n            if (v & 1) {\n                s.insert(dp[v] + 1);\n            }\n            else {\n                s.insert(dp[v] + 2);\n            }\n        }\n\n        int up_tim = 0;\n\n        if (u & 1) {\n            up_tim = 1;\n        }\n        else {\n            up_tim = 2;\n        }\n\n        for (int v : g[u]) {\n            if (v == par) {\n                continue;\n            }\n\n            if (v & 1) {\n                s.erase(s.find(dp[v] + 1));\n\n                if (!s.empty()) {\n                    new_dfs(v, u, up_tim + max(tim, *s.rbegin()), dp, ans, g);\n                }\n                else {\n                    new_dfs(v, u, up_tim + tim, dp, ans, g);\n                }\n                s.insert(dp[v] + 1);\n            }\n            else {\n                s.erase(s.find(dp[v] + 2));\n\n                if (!s.empty()) {\n                    new_dfs(v, u, up_tim + max(tim, *s.rbegin()), dp, ans, g);\n                }\n                else {\n                    new_dfs(v, u, up_tim + tim, dp, ans, g);\n                }\n\n                s.insert(dp[v] + 2);\n            }\n        }\n\n    }\n\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        \n        vector<vector<int>> g(n);\n\n        for (const auto& edge : edges) {\n            g[edge[0]].push_back(edge[1]);\n            g[edge[1]].push_back(edge[0]);\n        }\n\n        vector<int> ans(n, 0);\n        vector<int> dp(n, 0);\n\n        dfs(0, -1, dp, g);\n\n        new_dfs(0, -1, 0, dp, ans, g);\n\n        return ans;\n    }\n};",
    "submit_ts": "1722699734",
    "subm_id": "1343220668"
}