{
    "username": "augustojr",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        INF = n*m + 1\n        ones = []\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j]:\n                    ones.append( (i, j) )\n\n        @cache\n        def dp(L0, R0, T0, B0, N):\n            if N == 0:\n                return INF\n            if N < 0:\n                return INF\n\n            L = inf\n            R = -inf\n            T = inf\n            B = -inf\n            empty = True\n            for i in range(T0, B0 + 1):\n                for j in range(L0, R0 + 1):\n                    if grid[i][j] == 1:\n                        L = min(L, j)\n                        R = max(R, j)\n                        T = min(T, i)\n                        B = max(B, i)\n                        empty = False\n            if empty:\n                print(empty, L, R, T, B)\n                return INF\n            if N == 1:\n                # print(' ', L, R, T, B)\n                return (R - L + 1)*(B - T + 1)\n\n            mi = INF\n            if N == 2:\n                # print('', L, R, T, B)\n                for i in range(T, B):\n                    mi = min(mi, dp(L, R, T, i, N - 1) + dp(L, R, i + 1, B, N - 1))\n                for j in range(L, R):\n                    mi = min(mi, dp(L, j, T, B, N - 1) + dp(j + 1, R, T, B, N - 1))\n                return mi\n            \n            # print(L, R, T, B)\n            for i in range(T, B):\n                mi = min(mi, dp(L, R, T, i, N - 1) + dp(L, R, i + 1, B, N - 2))\n                mi = min(mi, dp(L, R, T, i, N - 2) + dp(L, R, i + 1, B, N - 1))\n            for j in range(L, R):\n                mi = min(mi, dp(L, j, T, B, N - 1) + dp(j + 1, R, T, B, N - 2))\n                mi = min(mi, dp(L, j, T, B, N - 2) + dp(j + 1, R, T, B, N - 1))\n            return mi\n\n        return dp(0, m - 1, 0, n - 1, 3)",
    "submit_ts": 1719114676.0
}