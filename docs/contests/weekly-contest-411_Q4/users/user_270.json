{
    "username": "huffycoding",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        l, r = 0, 1\n        N = len(s)\n        res = []\n        cnt = {'0':0, '1':0}\n        cnt[s[0]] += 1\n        sc = []\n        lp = []\n        while r < N:\n            while r<N and (cnt['0'] <= k or cnt['1'] <= k):\n                sc.append(r-l)\n                # res += sc[-1]\n                lp.append(l)\n                # print(l, r, res)\n                cnt[s[r]] += 1\n                r += 1\n            # res += r-l\n            while l<N and cnt['0'] > k and cnt['1'] > k:\n                cnt[s[l]] -= 1\n                l += 1\n        sc.append(r-l)\n        lp.append(l)\n        \n        pre = 0\n        ps = []\n        for v in sc:\n            ps.append(pre+v)\n            pre = ps[-1]\n        # print(sc, lp, ps)\n        \n        def binary(l, r): # index before which the left pointer of the current right pointer range is out of l, i.e., <=l\n            p = l\n            r += 1\n            while l < r:\n                mid = (l+r)//2\n                mp = lp[mid]\n                if mp <= p:\n                    l = mid+1\n                else:\n                    r = mid\n            return l\n        \n        for l, r in queries:\n            piv = binary(l, r)\n            # print(l,r,piv,ps)\n            res.append(ps[r]-ps[piv-1] + (piv-l+1)*(piv-l)//2)\n        return res\n        \n        \n                \n        ",
    "submit_ts": "1723952504",
    "subm_id": "1359797815"
}