{
    "username": "de_sync",
    "submission": "using ll = long long;\nclass seg_Tree\n{\nprivate:\n    int sz;\n    vector<ll> seg_t;\n\npublic:\n    seg_Tree(int n)\n    {\n        sz = n;\n        seg_t.resize(4 * n, INT_MIN);\n    }\n\n    void build(vector<ll> &a, int s, int e, int i)\n    {\n        if (s == e)\n        {\n            seg_t[i] = a[s];\n            return;\n        }\n        int m = s + (e - s) / 2;\n        build(a, s, m, 2 * i + 1);\n        build(a, m + 1, e, 2 * i + 2);\n        seg_t[i] = max(seg_t[2 * i + 1], seg_t[2 * i + 2]);\n    }\n\n    void update(int s, int e, int i, int q, ll v)\n    {\n        if (s == e)\n        {\n            seg_t[i] = v;\n            return;\n        }\n        int m = s + (e - s) / 2;\n        if (q <= m)\n        {\n            update(s, m, 2 * i + 1, q, v);\n        }\n        else\n        {\n            update(m + 1, e, 2 * i + 2, q, v);\n        }\n        seg_t[i] = max(seg_t[2 * i + 1], seg_t[2 * i + 2]);\n    }\n\n    ll query(int s, int e, int i, int qs, int qe)\n    {\n        if (qs <= s and qe >= e)\n            return seg_t[i];\n        if (qs > e or qe < s)\n            return INT_MIN;\n        int m = s + (e - s) / 2;\n        ll l = query(s, m, 2 * i + 1, qs, qe);\n        ll r = query(m + 1, e, 2 * i + 2, qs, qe);\n        return max(l, r);\n    }\n};\n\nclass Solution\n{\npublic:\n    vector<bool> getResults(vector<vector<int>> &queries)\n    {\n        vector<bool> ans;\n        map<int, int> mp;   set<int> st;\n        st.insert(0);  st.insert(100001);\n        mp[0] = 0, mp[100001] = 100001;\n\n        seg_Tree segTree(100001);\n        for (auto &q : queries)\n        {\n            if (q[0] != 1)\n            {\n                auto it = st.lower_bound(q[1]);\n                int pr = *prev(it);\n\n                if (q[1] - pr >= q[2])\n                    ans.push_back(true);\n                else if (segTree.query(0, 100001, 0, 0, q[1]) >= q[2])\n                    ans.push_back(true);\n                else\n                    ans.push_back(false);\n            }\n            else\n            {\n                st.insert(q[1]);\n\n                auto it = st.lower_bound(q[1]);\n                int pr = *prev(it), ne = *next(it);\n\n                mp[ne] = ne - q[1];\n                mp[q[1]] = q[1] - pr;\n\n                segTree.update(0, 100001, 0, q[1], mp[q[1]]);\n                segTree.update(0, 100001, 0, ne, mp[ne]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716652772.0
}