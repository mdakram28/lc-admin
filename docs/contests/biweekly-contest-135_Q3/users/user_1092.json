{
    "username": "Sabarna_tensei",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n//         unordered_map<int, int> mp;\n//         int n = nums.size();\n//         vector<pair<int, int>> v;\n        \n//         for (int i = 0; i < n / 2; ++i) {\n//             mp[abs(nums[i] - nums[n - i - 1])]++;\n//         }\n        \n//         for (auto it : mp) {\n//             v.push_back({it.second, it.first});\n//         }\n        \n//         sort(v.rbegin(), v.rend());\n//         int max_freq = v[0].first;\n//         int x = v[0].second;\n//         int cnt = 0;\n        \n//         for (int i = 0; i < n/2 ; ++i) {\n//             if (abs(nums[i] - nums[n - i - 1]) != x) {\n//                 int z = min(nums[i], nums[n - i - 1]);\n//                 int p=  max(nums[i], nums[n - i - 1]);\n//                 // if (abs(k - z) < x) {\n//                 //     cnt++;\n//                 // } else {\n//                 //     cnt += 2;\n//                 // }\n//                 if(z>k){\n//                     cnt+=2;\n//                 }\n//                 else if(p<x){\n//                     cnt+=2;\n//                 }\n//                 else {\n//                     cnt++;\n//                 }\n//             }\n//         }\n        \n//         return cnt;\n                std::map<int, std::vector<int>> m;\n        std::vector<int> v;\n\n        for (int i = 0; i < nums.size() / 2; ++i) {\n            int a = nums[i];\n            int b = nums[nums.size() - i - 1];\n            int diff = std::abs(a - b);\n\n             int X = std::max({a, b, k - a, k - b});\n\n             m[diff].push_back(X);\n            v.push_back(X);\n        }\n\n        int ans = nums.size();  \n        std::sort(v.begin(), v.end());\n\n        for (const auto& [diff, values] : m) {\n            int T = std::lower_bound(v.begin(), v.end(), diff) - v.begin();\n            T = T * 2 + (nums.size() / 2 - T);\n\n            for (const auto& X : values) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n\n            ans = std::min(ans, T);\n        }\n\n        return ans;\n    }\n};\n// Problem Analysis:\n// The goal is to find the minimum number of changes needed to make all pairs\n// (nums[i], nums[n-i-1]) have the same absolute difference X, where X can be any value.\n\n// Issues with the current implementation:\n// 1. The code only considers X values from 0 to k, but X could be larger.\n// 2. It doesn't handle odd-length arrays (though the problem states n is even).\n// 3. The logic for calculating changes is incorrect in some cases.\n// 4. It doesn't consider that changing both elements in a pair might be optimal.\n\n// Correct approach:\n// 1. For each possible X (0 to max possible difference), calculate the cost to achieve that X.\n// 2. For each pair, find the minimum cost to make their difference X:\n//    - Change left element\n//    - Change right element\n//    - Change both elements\n// 3. Sum the minimum costs for all pairs for each X.\n// 4. Return the overall minimum cost across all X values.\n\n// class Solution {\n// public:\n//     int minChanges(vector<int>& nums, int k) {\n//         int n = nums.size();\n//         int maxDiff = *max_element(nums.begin(), nums.end()) * 2; // Maximum possible difference\n//         int minChanges = n; // Initialize to maximum possible changes\n\n//         for (int X = 0; X <= maxDiff; ++X) {\n//             int currentChanges = 0;\n//             for (int i = 0; i < n / 2; ++i) {\n//                 int left = nums[i];\n//                 int right = nums[n - i - 1];\n//                 int diff = abs(left - right);\n                \n//                 if (diff == X) {\n//                     continue; // No change needed\n//                 }\n                \n//                 int cost1 = (X > diff) ? (X - diff) : 1; // Cost to change left\n//                 int cost2 = (X > diff) ? (X - diff) : 1; // Cost to change right\n//                 int cost3 = 2; // Cost to change both\n\n//                 currentChanges += min({cost1, cost2, cost3});\n//             }\n//             minChanges = min(minChanges, currentChanges);\n//         }\n\n//         return minChanges;\n//     }\n// };",
    "submit_ts": "1721489154",
    "subm_id": "1327444569"
}