{
    "username": "manojc_raavi",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.childNode = [None] * 26\n        self.wordEnd = False\n        self.cost=float(\"inf\")\n\nclass Trie:\n    def __init__(self, n, key):\n        self.root = TrieNode()\n        self.n=n\n        self.key=key\n        self.dp=[-1 for i in range(n+1)]\n\n    def insert(self, key,val):\n        currentNode = self.root\n        for char in key:\n            index = ord(char) - ord('a')\n            if not currentNode.childNode[index]:\n                currentNode.childNode[index] = TrieNode()\n            currentNode = currentNode.childNode[index]\n        currentNode.wordEnd = True\n        currentNode.cost=min(currentNode.cost,val)\n\n        \n    def search(self, ind):\n        if ind==self.n:\n            return 0\n        if self.dp[ind]!=-1:\n            return self.dp[ind]\n        result=float(\"inf\")\n        currentNode = self.root\n        for i in range(ind, self.n):\n            index = ord(self.key[i]) - ord('a')\n            if currentNode.childNode[index] and currentNode.childNode[index].wordEnd:\n                result=min(result,self.search(i+1)+currentNode.childNode[index].cost)\n            if not currentNode.childNode[index]:\n                break\n            currentNode = currentNode.childNode[index]\n        self.dp[ind]=result\n        return result\n    \n    \n    \n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        le=len(target)\n        obj=Trie(le, target)\n        \n        n=len(words)\n        for i in range(n):    \n            obj.insert(words[i],costs[i])\n        \n        val=obj.search(0)\n        \n        return -1 if val==float(\"inf\") else val\n\n        \n        \n            \n            \n            \n            \n            ",
    "submit_ts": "1720323409",
    "subm_id": "1312374862"
}