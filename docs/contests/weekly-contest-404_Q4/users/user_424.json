{
    "username": "lucifer357",
    "submission": "class Solution {\npublic:\n    int bfs(int start, const vector<vector<int>>& graph, vector<int>& dist) {\n    queue<int> q;\n    q.push(start);\n    dist[start] = 0;\n    int farthestNode = start;\n    int maxDist = 0;\n    \n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (int neighbor : graph[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                if (dist[neighbor] > maxDist) {\n                    maxDist = dist[neighbor];\n                    farthestNode = neighbor;\n                }\n            }\n        }\n    }\n    return farthestNode;\n}\n\nint treeDiameter(const vector<vector<int>>& graph, int n) {\n    vector<int> dist(n, -1);\n    int farthestNode = bfs(0, graph, dist);\n    \n    fill(dist.begin(), dist.end(), -1);\n    farthestNode = bfs(farthestNode, graph, dist);\n    \n    return *max_element(dist.begin(), dist.end());\n}\n\npair<int, int> treeHeight(const vector<vector<int>>& graph, int n) {\n    vector<int> dist(n, -1);\n    int farthestNode = bfs(0, graph, dist);\n    \n    fill(dist.begin(), dist.end(), -1);\n    farthestNode = bfs(farthestNode, graph, dist);\n    \n    int diameter = *max_element(dist.begin(), dist.end());\n    int height = (diameter + 1) / 2;\n    return {diameter, height};\n}\n\nint minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n    int n = edges1.size() + 1;\n    int m = edges2.size() + 1;\n    vector<vector<int>> tree1(n);\n    vector<vector<int>> tree2(m);\n    \n    for (const auto& edge : edges1) {\n        tree1[edge[0]].push_back(edge[1]);\n        tree1[edge[1]].push_back(edge[0]);\n    }\n    \n    for (const auto& edge : edges2) {\n        tree2[edge[0]].push_back(edge[1]);\n        tree2[edge[1]].push_back(edge[0]);\n    }\n    \n    auto [diameter1, height1] = treeHeight(tree1, n);\n    auto [diameter2, height2] = treeHeight(tree2, m);\n    \n    return max({diameter1, diameter2, height1 + height2 + 1});\n}\n\n    // int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n    // }\n};",
    "submit_ts": 1719717366.0
}