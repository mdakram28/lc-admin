{
    "username": "uwuenvy",
    "submission": "class Solution {\npublic:\n    struct segtree{\n        using item = pair<long long, long long>;\n        item merge(item a, item b){\n            return {a.first + b.first, a.second + b.second};\n        }\n        item NEUTRAL = {0, 0};\n        int n;\n        vector<item> seg;\n        segtree(int n){\n            this->n = n;\n            seg.resize(2 * n, NEUTRAL);\n        }\n        void update(int idx, item x){\n            idx += n;\n            seg[idx] = {seg[idx].first + x.first, seg[idx].second + x.second};\n            while(idx /= 2){\n                seg[idx] = merge(seg[2 * idx], seg[2 * idx + 1]);\n            }\n        }\n        item query(int l, int r){\n            if(l > r) return NEUTRAL;\n            item L = NEUTRAL, R = NEUTRAL;\n            for(l += n, r += n + 1; l < r; l /= 2, r /= 2){\n                if(l % 2 == 1){\n                    L = merge(L, seg[l++]);\n                }\n                if(r % 2 == 1){\n                    R = merge(seg[--r], R);\n                }\n            }\n            return merge(L, R);\n        }\n    };\n\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& qv) {\n        int n = s.size();\n        vector<int> one, zero;\n        for(int i = 0; i < n; i++){\n            if(s[i] == '0'){\n                zero.push_back(i);\n            }\n            else{\n                one.push_back(i);\n            }\n        }\n        #define all(x) x.begin(), x.end()\n        vector<int> right_bad(n);\n        for(int i = 0; i < n; i++){\n            auto it = lower_bound(all(zero), i);\n            if(it != zero.end()){\n                int idx = it - zero.begin();\n                if(idx + k < zero.size()){\n                    right_bad[i] = zero[idx + k];\n                }\n                else{\n                    right_bad[i] = max(right_bad[i], n);\n                }\n            }\n            else{\n                right_bad[i] = max(right_bad[i], n);\n            }\n            auto it2 = lower_bound(all(one), i);\n            if(it2 != one.end()){\n                int idx = it2 - one.begin();\n                if(idx + k < one.size()){\n                    right_bad[i] = max(right_bad[i], one[idx + k]);\n                }\n                else{\n                    right_bad[i] = max(right_bad[i], n);\n                }\n            }\n            else{\n                right_bad[i] = max(right_bad[i], n);\n            }\n        }\n        // for(int i = 0; i < n; i++){\n        //     cout << right_bad[i] << \" \";\n        // }\n        // cout << endl;\n        vector<vector<int>> update_l(n+2);\n        for(int i = 0; i < n; i++){\n            update_l[right_bad[i]+1].push_back(i+1);\n        }\n        #define ll long long\n        int q = qv.size();\n        vector<ll> out(q);\n        vector<vector<pair<int, int>>> by_r(n+2);\n        for(int i = 0; i < qv.size(); i++){\n            auto que = qv[i];\n            by_r[que[1]+1].push_back({que[0]+1, i});\n        }\n        // find sum of l such that [l, r] >= cur_r\n        // separately, update only length in range\n        segtree st(n+2), st2(n+2);\n        for(int i = 1; i <= n; i++){\n            st.update(i, {i, 1});\n            for(int l: update_l[i]){\n                st.update(l, {-l, -1});\n                // cout << \"update: \" << l << \" \" << i << endl;\n                st2.update(l, {i - l, 0});\n            }\n            for(auto que: by_r[i]){\n                int l = que.first, idx = que.second;\n                // cout << \"query: \" << l << \" \" << i << endl;\n                auto p = st.query(l, i);\n                // cout << p.first << \" \" << p.second << endl;\n                ll cur_ans = i * p.second + p.second;\n               // cout << \"cur_ans: \" << cur_ans << endl;\n                cur_ans -= p.first;\n                ll cont = st2.query(l, i).first;\n                // cout << cont << endl;\n                cur_ans += cont;\n                out[idx] = cur_ans;\n            }\n        }\n        return out;\n    }\n};",
    "submit_ts": "1723951301",
    "subm_id": "1359768210"
}