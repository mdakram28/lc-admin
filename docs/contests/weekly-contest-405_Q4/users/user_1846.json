{
    "username": "hey_Stone",
    "submission": "class Node:\n    def __init__(self):\n        self.end = False\n        self.next = {}\n        self.cost = inf\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Node()\n\n        def addWord(w, cost):\n            cur = root\n            for char in w:\n                if char not in cur.next:\n                    cur.next[char] = Node()\n                cur = cur.next[char]\n            cur.end = True\n            cur.cost = min(cur.cost, cost)\n\n        for w, cost in zip(words, costs):\n            addWord(w, cost)\n\n        self.res = inf\n        dp = [inf] * (len(target) + 1)\n        dp[0] = 0\n\n        for i in range(len(target)):\n            if dp[i] == inf:\n                continue\n            cur = root\n            for j in range(i, len(target)):\n                if target[j] in cur.next:\n                    cur = cur.next[target[j]]\n                    if cur.end:\n                        dp[j + 1] = min(dp[j + 1], dp[i] + cur.cost)\n                else:\n                    break\n\n        return dp[-1] if dp[-1] != inf else -1\n",
    "submit_ts": "1720324741",
    "subm_id": "1312406932"
}