{
    "username": "bugmonk1001",
    "submission": "import java.util.*;\n\nclass Solution {\n   \n    static class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        int cost = Integer.MAX_VALUE;\n    }\n    \n    private void insert(TrieNode root, String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node = node.children.computeIfAbsent(c, k -> new TrieNode());\n        }\n        node.cost = Math.min(node.cost, cost); \n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; \n        \n        // Build Trie\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            insert(root, words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; \n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                node = node.children.get(target.charAt(j));\n                if (node == null) break; \n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n  \n}\n",
    "submit_ts": "1720321635",
    "subm_id": "1312328177"
}