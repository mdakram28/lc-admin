{
    "username": "mhwg",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\n/*\nYou are given a non-negative integer k. There exists a staircase with an infinite number of stairs, with the lowest stair numbered 0.\n\nAlice has an integer jump, with an initial value of 0. She starts on stair 1 and wants to reach stair k using any number of operations. If she is on stair i, in one operation she can:\n\n    Go down to stair i - 1. This operation cannot be used consecutively or on stair 0.\n    Go up to stair i + 2jump. And then, jump becomes jump + 1.\n\nReturn the total number of ways Alice can reach stair k.\n\nNote that it is possible that Alice reaches the stair k, and performs some operations to reach the stair k again.\n*/\n\nint K, w;\n\nmap<tuple<int, int, bool>, int> dp;\n\nint f(int i, int j, bool d) {\n    if (i-5 > K) return 0;\n    if (dp.count({i, j, d})) {\n        return dp[{i, j, d}];\n    }\n    int ways = 0;\n    if (i == K) {\n        ways = 1;\n    }\n\n    // cout << i << \" \" << j << \" \" << d << endl;\n    ways += f(i+(1<<j), j+1, false);\n    if (i > 0 && !d) {\n        ways += f(i-1, j, true);\n    }\n    return dp[{i, j, d}] = ways;\n}\n\nvoid f2(int i, int j, bool d) {\n    if (i-5 > K) return;\n    if (i == K)\n        ++w;\n    // cout << i << \" \" << j << \" \" << d << endl;\n    f2(i+(1<<j), j+1, false);\n    if (i > 0 && !d) {\n        f2(i-1, j, true);\n    }\n}\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        dp.clear();\n        K = k;\n        // f(1, 0, 0);\n        // cout << dp.size() << endl;\n        // w = 0;\n        // f2(1, 0, 0);\n        // cout << \"a \" <<  w << endl;\n        return f(1, 0, 0);\n    }\n};\n",
    "submit_ts": 1716087476.0
}