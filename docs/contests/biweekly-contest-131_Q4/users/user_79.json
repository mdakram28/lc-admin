{
    "username": "awice",
    "submission": "#include \"bits/stdc++.h\"\nusing namespace std;\nconst int NN = 50123;\ntemplate<int N, typename T = int>\nstruct segtree {\n\n    constexpr static T max_T = numeric_limits<T>::max();\n    constexpr static T min_T = numeric_limits<T>::min();\n    constexpr static int H = 16, _N = 1<<H;\n\n    struct node { T s, l, r; } t[2*_N];\n    node merge(node x, node y) {\n        return {x.s+y.s, std::min(x.l, y.l), std::max(x.r, y.r)};\n    }\n\n    T u[2*_N]; bool f[2*_N]; int a[2*_N], b[2*_N];\n    segtree() {\n        fill(t, t+2*_N, node({0, 0, 0}));\n        fill(f, f+2*_N, 0), fill(u, u+2*_N, 0);\n        iota(a+_N, a+2*_N, 0), iota(b+_N, b+2*_N, 0);\n        for (int i = _N-1; i > 0; i--)\n            a[i] = a[2*i], b[i] = b[2*i+1];\n    }\n\n    void apply(int i, T x, bool ins) {\n        if (ins) u[i] = x, f[i] = 1;\n        else u[i] += x;\n    }\n\n    void push(int i) {\n        if (!f[i] && !u[i]) return;\n        if (f[i]) t[i] = {0, 0, 0};\n        t[i].s += u[i]*(b[i]-a[i]+1), t[i].l += u[i], t[i].r += u[i];\n        if (i < _N) apply(2*i, u[i], f[i]), apply(2*i+1, u[i], f[i]);\n        u[i] = f[i] = 0;\n    }\n\n    void _upd(int l, int r, T x, bool ins, int i = 1) {\n        if (l <= a[i] && r >= b[i]) apply(i, x, ins);\n        push(i);\n        if (l > b[i] || r < a[i] || (l <= a[i] && r >= b[i])) return;\n        _upd(l, r, x, ins, 2*i), _upd(l, r, x, ins, 2*i+1);\n        t[i] = merge(t[2*i], t[2*i+1]);\n    }\n\n    node _qry(int l, int r, int i = 1) {\n        push(i);\n        if (l <= a[i] && r >= b[i]) return t[i];\n        if (l > b[i] || r < a[i]) return {0, max_T, min_T};\n        return merge(_qry(l, r, 2*i), _qry(l, r, 2*i+1));\n    }\n\n    T get(int i) {\n        for (int x = H; x >= 0; x--) push((_N+i)>>x);\n        return t[_N+i].s;\n    }\n\n    void set(int l, int r, T x) { _upd(l, r, x, 1); }\n    void add(int l, int r, T x) { _upd(l, r, x, 0); }\n    void set(int i, T x) { set(i, i, x); }\n    void add(int i, T x) { add(i, i, x); }\n    T sum(int l, int r) { return _qry(l, r).s; }\n    T min(int l, int r) { return _qry(l, r).l; }\n    T max(int l, int r) { return _qry(l, r).r; }\n};\nusing ll = long long;\n\n#define FOR(i, a, b) for (int i=(a); i<(int)(b); i++)\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n\n        set<int> locs;\n        locs.insert(0);\n        \n        segtree<NN, int> st;\n        int Q = queries.size();\n        FOR(qi, 0, Q) {\n            if (queries[qi][0] == 1) {\n                int x = queries[qi][1];\n                auto it = locs.lower_bound(x);\n                if (it != locs.end()) {\n                    int y = *it;\n                    int w = *prev(it);\n                    // prior y-w, x-w and y-x\n                    st.set(y, y-x);\n                    st.set(x, x-w);\n                } else {\n                    int w = *prev(it);\n                    st.set(x, x-w);\n                }\n                locs.insert(x);\n\n            } else {\n                int x = queries[qi][1];\n                int sz = queries[qi][2];\n                int m = st.max(0, x);\n                auto it = locs.lower_bound(x);\n                int w = *prev(it);\n                m = max(m, x - w);\n                if (m >= sz) {\n                    ans.push_back(true);\n                } else {\n                    ans.push_back(false);\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1716650062",
    "subm_id": "1267605280"
}