{
    "username": "sujalgupta09",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // Function to perform BFS on the graph\n    bool bfs(vector<vector<int>> &graph, int start, int tgt1, int tgt2, int nodes, bool flag) {\n        queue<int> q; // Queue for BFS\n        vector<int> vis(nodes + 4, 0); // Visited array\n        q.push(start);\n        vis[start] = 1; // Mark the start node as visited\n\n        // While there are nodes to process\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            // Explore neighbors\n            for (int v : graph[u]) {\n                if (!vis[v]) { // If not visited\n                    q.push(v);\n                    vis[v] = 1; // Mark as visited\n                }\n            }\n        }\n        // Check if either of the target nodes is reached\n        return vis[tgt1] || vis[tgt2];\n    }\n\n    // Function to check if we can reach any corner without hitting any circle\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size(); // Number of circles\n        vector<pair<pair<int, int>, int>> circ(n);\n        vector<vector<int>> graph(n + 4); // Graph representation\n\n        // Convert input to circles representation\n        for (int i = 0; i < n; ++i) {\n            circ[i] = {{circles[i][0], circles[i][1]}, circles[i][2]};\n        }\n\n        // Create graph edges based on circle overlaps and connections to corners\n        for (int i = 0; i < n; ++i) {\n            if (circ[i].first.first <= circ[i].second) {\n                graph[n].push_back(i); // Left boundary connection\n                graph[i].push_back(n);\n            }\n            if (X - circ[i].first.first <= circ[i].second) {\n                graph[n + 2].push_back(i); // Right boundary connection\n                graph[i].push_back(n + 2);\n            }\n            if (circ[i].first.second <= circ[i].second) {\n                graph[n + 1].push_back(i); // Bottom boundary connection\n                graph[i].push_back(n + 1);\n            }\n            if (Y - circ[i].first.second <= circ[i].second) {\n                graph[n + 3].push_back(i); // Top boundary connection\n                graph[i].push_back(n + 3);\n            }\n            // Check for overlaps between circles\n            for (int j = i + 1; j < n; ++j) {\n                double dist = sqrt(pow(circ[i].first.first - circ[j].first.first, 2) +\n                                   pow(circ[i].first.second - circ[j].first.second, 2));\n                int rad_sum = circ[i].second + circ[j].second;\n                if (rad_sum >= dist) {\n                    graph[i].push_back(j); // Overlap connection\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        // Check if paths to both corners are blocked\n        bool blocked = false;\n        bool flag = true; // Example flag\n        blocked = blocked || bfs(graph, n, n + 1, n + 2, n + 4, flag); // Check for bottom-left corner\n        blocked = blocked || bfs(graph, n + 3, n + 2, n + 1, n + 4, flag); // Check for top-right corner\n\n        return !blocked; // If not blocked, return true\n    }\n};\n",
    "submit_ts": "1722137980",
    "subm_id": "1335778910"
}