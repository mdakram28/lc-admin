{
    "username": "JJZin",
    "submission": "import time\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        \n        start_time = time.time()\n        \n        words = [i[::-1] for i in words]\n        target = target[::-1]\n        s = defaultdict(lambda : 10**20)\n        \n        delbacc = set()\n        \n        sayson = set()\n        basis = list(zip(costs, words))\n        basis.sort(key = lambda x: x[0])\n        for idx, ea in enumerate(basis):\n            ea = ea[1]\n            if ea not in target and ea != target:\n                delbacc.add(idx)\n            if ea in sayson:\n                delbacc.add(idx)\n            sayson.add(ea)\n        basis = [i for idx, i in enumerate(basis) if idx not in delbacc]\n        \n        basis.sort(key = lambda x: x[0]/len(x[1]))\n        \n        if len(basis) == 0:\n            return -1\n        \n        if basis[0][1] == target:\n            return basis[0][0]\n        if len(basis) > 100:\n            basis = basis[:350]\n        \n        s[0] = 0\n        \n        \n        basils = defaultdict(list)\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        # for ea in basis:\n        #     basils[ea[1][0]].append(ea)\n            \n        \n        for ea in range(len(target)):\n            for jh in basis:\n                if jh[1] == target[ea: ea + len(jh[1])]:\n                    basils[ea].append(jh)\n            \n        \n        \n        \n        \n        for jh in range(len(target)):\n            sayson = set()\n            for (nth, ea) in basils[jh][:10]:\n                if len(ea) in sayson or s[jh] + nth >= s[jh + len(ea)]:\n                    continue\n                if len(ea) < len(target) - jh + 1:\n                    hit = True\n                    for ix in range(len(ea)):\n                        if ea[ix] != target[jh + ix]:\n                            hit = False\n                            break\n                    if hit:\n                        s[jh + len(ea)] = s[jh + len(ea)] if s[jh + len(ea)] < s[jh] + nth else s[jh] + nth\n                        sayson.add(len(ea))\n            if time.time() - start_time > 10:\n                break\n            \n                        \n                    \n        \n        \n       \n        return s[len(target)] if s[len(target)] < 10**19 else -1\n            \n        ",
    "submit_ts": "1720323425",
    "subm_id": "1312375231"
}