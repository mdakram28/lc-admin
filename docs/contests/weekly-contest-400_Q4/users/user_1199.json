{
    "username": "ameynaik09",
    "submission": "#define INF INT32_MAX \nclass SegmentTree {\npublic:\n    vector<int> seg_tree;\n    int size;\n    SegmentTree(vector<int>& array) {\n        size = array.size();\n        seg_tree.resize(4 * size);\n        buildTree(array, 0, 0, size - 1);\n    }\n\n    void buildTree(vector<int>& array, int node, int start, int end) {\n        if (start == end) {\n            seg_tree[node] = array[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            buildTree(array, 2 * node + 1, start, mid);\n            buildTree(array, 2 * node + 2, mid + 1, end);\n            seg_tree[node] = seg_tree[2 * node + 1] & seg_tree[2 * node + 2];\n        }\n    }\n\n    int query(int left, int right) {\n        return rangeQuery(0, 0, size - 1, left, right);\n    }\n\n    int rangeQuery(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return INF;\n        }\n        if (left <= start && end <= right) {\n            return seg_tree[node];\n        }\n        int mid = (start + end) >> 1;\n        return rangeQuery(2 * node + 1, start, mid, left, right) & rangeQuery(2 * node + 2, mid + 1, end, left, right);\n    }\n};\n\nint closestANDValue(vector<int> array, int k) {\n    int arraySize = array.size();\n    SegmentTree segTree(array);\n    int answer = INF;\n    for (int i = 0; i < arraySize; i++) {\n        int left = i - 1, right = arraySize - 1, mid;\n        while (right - left > 1) {\n            mid = (left + right) / 2;\n            if (segTree.query(i, mid) >= k)\n                left = mid;\n            else\n                right = mid;\n        }\n        if (left != i - 1)\n            answer = min(answer, abs(segTree.query(i, left) - k));\n        answer = min(answer, abs(k - segTree.query(i, right)));\n    }\n    return answer;\n}\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        return closestANDValue(nums, k); \n    }\n};",
    "submit_ts": 1717299802.0
}