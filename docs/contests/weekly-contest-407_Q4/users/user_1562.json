{
    "username": "apometta",
    "submission": "class ListNode:\n    def __init__(self, prev = None):\n        self.prev = prev\n        self.next = None\n\nclass TreeCounter:\n    #both inclusive\n    def __init__(self, count):\n        self.trees = 1\n        sent = ListNode()\n\n        self.nodes = []\n        prev = sent\n        for i in range(count):\n            curr = ListNode(prev)\n            prev.next = curr\n            prev = curr\n            self.nodes.append(curr)\n        self.nodes[0].prev = None\n\n    def remove(self, i):\n        n = self.nodes[i]\n        if n.prev == None and n.next == None:\n            self.trees -= 1\n        elif n.prev != None and n.next != None:\n            self.trees += 1\n        \n        if n.prev != None:\n            self.nodes[i - 1].next = None\n            n.prev = None\n        if n.next != None:\n            self.nodes[i + 1].prev = None\n            n.next = None\n\nclass Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        n = len(nums)\n        i = 0\n        ops = 0\n\n        while i < n:\n            if nums[i] == target[i]:\n                i += 1\n                continue\n            greater = nums[i] > target[i]\n            size = 0\n            diffs = []\n\n            while i < n and ((greater and nums[i] > target[i]) or ((not greater) and nums[i] < target[i])):\n                diffs.append((abs(nums[i] - target[i]), size))\n                i += 1\n                size += 1\n\n            trees = TreeCounter(size)\n            heapify(diffs)\n            diffed = 0\n\n            while len(diffs) > 0:\n                diff, ind = heappop(diffs)\n                ops += trees.trees * (diff - diffed)\n                diffed += (diff - diffed)\n                trees.remove(ind)\n        \n        return ops",
    "submit_ts": "1721533322",
    "subm_id": "1328006376"
}