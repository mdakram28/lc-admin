{
    "username": "Tutul_dhar",
    "submission": "class Solution {\npublic:\n    struct Node {\n        Node *links[26];\n        bool flag = false;\n        int cntEndWith = 0;\n        int cntPrefix = 0;\n        int val = 0;\n\n        bool containKey(char ch) {\n            return (links[ch - 'a'] != NULL);\n        }\n\n        void put(char ch, Node *node) {\n            links[ch - 'a'] = node;\n        }\n\n        Node *get(char ch) {\n            return links[ch - 'a'];\n        }\n\n        void setEnd() {\n            flag = true;\n        }\n\n        bool isEnd() {\n            return flag;\n        }\n\n        void increaseEnd() {\n            cntEndWith++;\n        }\n\n        void increasePrefix() {\n            cntPrefix++;\n        }\n\n        void deleteEnd() {\n            cntEndWith--;\n        }\n\n        void reducePrefix() {\n            cntPrefix--;\n        }\n\n        int getEnd() {\n            return cntEndWith;\n        }\n\n        int getPrefix() {\n            return cntPrefix;\n        }\n    };\n\n    class Trie {\n    public:\n        Node* root;\n\n        Trie() {\n            root = new Node();\n        }\n\n        void insert(string word, int v) {\n            Node *node = root;\n            for (int i = 0; i < word.size(); i++) {\n                if (!node->containKey(word[i])) {\n                    node->put(word[i], new Node());\n                }\n                node = node->get(word[i]);\n            }\n            if (node->val == 0) node->val = v;\n            else node->val = min(node->val, v);\n            node->setEnd();\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < costs.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        int n = target.size();\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n        target = '0' + target;\n\n        for (int i = 1; i <= n; i++) {\n            Node *node = trie.root;\n            for (int j = i; j <= n && node != nullptr; j++) {\n                if (!node->containKey(target[j])) break;\n                node = node->get(target[j]);\n                if (node->isEnd()) {\n                    dp[j] = min(dp[j], dp[i - 1] + node->val);\n                }\n            }\n        }\n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323505",
    "subm_id": "1312377243"
}