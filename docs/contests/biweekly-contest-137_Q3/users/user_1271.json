{
    "username": "Mark",
    "submission": "package main\n\nimport (\n\t\"math\"\n\t\"sort\"\n)\n\nfunc maximumValueSum(board [][]int) int64 {\n\trows := len(board)\n\tcols := len(board[0])\n\tmaxSum := int64(math.MinInt64)\n\ttopValues := make([][]int64, rows)\n\ttopColumnIndices := make([][]int, rows)\n\n\tfor i := range topValues {\n\t\ttopValues[i] = make([]int64, 3)\n\t\ttopColumnIndices[i] = make([]int, 3)\n\t\tfor j := range topValues[i] {\n\t\t\ttopValues[i][j] = int64(math.MinInt64)\n\t\t\ttopColumnIndices[i][j] = -1\n\t\t}\n\t}\n\n\tfor i := 0; i < rows; i++ {\n\t\tcolumnValues := make([]struct {\n\t\t\tvalue int64\n\t\t\tindex int\n\t\t}, cols)\n\t\tfor j := 0; j < cols; j++ {\n\t\t\tcolumnValues[j] = struct {\n\t\t\t\tvalue int64\n\t\t\t\tindex int\n\t\t\t}{int64(board[i][j]), j}\n\t\t}\n\t\tsort.Slice(columnValues, func(a, b int) bool {\n\t\t\treturn columnValues[a].value > columnValues[b].value\n\t\t})\n\n\t\tfor k := 0; k < 3 && k < cols; k++ {\n\t\t\ttopValues[i][k] = columnValues[k].value\n\t\t\ttopColumnIndices[i][k] = columnValues[k].index\n\t\t}\n\t}\n\n\tfor row1 := 0; row1 < rows; row1++ {\n\t\tfor row2 := row1 + 1; row2 < rows; row2++ {\n\t\t\tfor row3 := row2 + 1; row3 < rows; row3++ {\n\t\t\t\tfor col1 := 0; col1 < 3; col1++ {\n\t\t\t\t\tfor col2 := 0; col2 < 3; col2++ {\n\t\t\t\t\t\tif topColumnIndices[row2][col2] == topColumnIndices[row1][col1] {\n\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t}\n\t\t\t\t\t\tfor col3 := 0; col3 < 3; col3++ {\n\t\t\t\t\t\t\tif topColumnIndices[row3][col3] == topColumnIndices[row1][col1] || topColumnIndices[row3][col3] == topColumnIndices[row2][col2] {\n\t\t\t\t\t\t\t\tcontinue\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tcurrentSum := topValues[row1][col1] + topValues[row2][col2] + topValues[row3][col3]\n\t\t\t\t\t\t\tif currentSum > maxSum {\n\t\t\t\t\t\t\t\tmaxSum = currentSum\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn maxSum\n}\n",
    "submit_ts": "1723910224",
    "subm_id": "1359221974"
}