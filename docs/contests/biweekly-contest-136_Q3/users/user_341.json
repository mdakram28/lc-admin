{
    "username": "Sanath_Kulla",
    "submission": "\n class Disjoint_Set_Union\n {\n public:\n     vector<int> size, rank, parent, edges , one;\n \n     Disjoint_Set_Union(int n)\n     {\n         size.resize(n + 1), rank.resize(n + 1), parent.resize(n + 1), edges.resize(n + 1) , one.resize(n+1);\n         for (int i = 0; i <= n; i++)\n             size[i] = 1, rank[i] = 0, parent[i] = i, edges[i] = 0 , one[i] = 0;\n     }\n \n     int find(int u)\n     {\n \n         if (parent[u] == u)\n             return u;\n \n         return parent[u] = find(parent[u]);\n     }\n \n     bool merge(int u, int v )\n     {\n         int pu = find(u);\n         int pv = find(v);\n \n         ++edges[pu];\n \n         if (pu == pv)\n             return false;\n \n             size[pv] += size[pu],  parent[pu] = pv , one[pv] += one[pu];\n         return true;\n        \n     }\n };\n\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size() , m = grid[0].size();\n        int t = n*m;\n        \n        Disjoint_Set_Union dsu(t);\n        for(int i = 0 ; i < n ; i++){\n            for(int j = 0 ; j < m ;j++){\n                if(grid[i][j])dsu.one[i*m + (j % m)] = 1;\n            }\n        }\n        for(int i = 0 ; i < n ;i++){\n            for(int j = 0 ; j < m  ; j++){\n                int x = i  * m + (j % m);\n                int I = n - i - 1 , J = m - j - 1;\n                int a = I * m + (j % m);\n                int b = i  * m + (J % m);\n                // cout<<i<<\" \"<<j<<\" \"<<x<<\" \"<<a<<\" \"<<b<<endl;\n                // cout<<I<<\" \"<<J<<endl/;\n                dsu.merge(x , a);\n                dsu.merge(x , b);\n            }\n        }\n        vector<pair<int,int>> v;\n        for(int i = 0 ; i < n*m ; i++)if(dsu.find(i) == i)v.push_back({dsu.one[i] , dsu.size[i] - dsu.one[i]});\n         n = v.size();\n        vector<vector<int>> dp(n , vector<int> (4 , 1e9));\n        dp[0][0] = v[0].first;\n        dp[0][(v[0].first + v[0].second) % 4] = min(dp[0][(v[0].first + v[0].second) % 4] , v[0].second);\n        for(int i = 1;i<n;i++){\n            int x = v[i].first , y = v[i].second;\n            for(int j = 0 ; j < 4 ; j++)dp[i][j] = min(dp[i][j] , dp[i-1][j] + x);\n            for(int j = 0 ; j < 4 ; j++)dp[i][(j + ((x+y)%4))%4] = min(dp[i][(j + ((x+y)%4))%4] , dp[i-1][j] + y);\n        }\n        // for(auto it:v)cout<<it.first<<\" \"<<it.second<<endl;\n        return dp[n-1][0];\n    }\n};",
    "submit_ts": "1722697008",
    "subm_id": "1343130685"
}