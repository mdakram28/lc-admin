{
    "username": "CoderAbhi27",
    "submission": "int n;\nvector<int> bit;\n\n// a should have 1-based indexing. (n+1) size\nvoid create(vector<int> &a)\n{\n    bit.assign(n+1,0);\n    for(int i=1 ; i<=n ; i++){\n        bit[i]+= a[i];\n        int p = i + (i&(-i));\n        if(p<=n) bit[p]+=bit[i];\n    }\n}\n\n// +val at index k\nvoid update(int k,int val)\n{\n    int N = bit.size()-1;\n    while(k<=N){\n        bit[k]+=val;\n        k+=(k&(-k));\n    }\n}\n\n// prefix-sum upto index k\nint prsum(int k)\n{\n    int N = bit.size()-1;\n    if(k>N) k=N;\n    int res=0;\n    while(k>0){\n        res+=bit[k];\n        k-=(k&(-k));\n    }\n    return res;\n}\n\nclass Solution {\npublic:\n    \n    void check(int i, vector<int> &nums, vector<int> &a){\n        if(i<=0 || i>=n-1) return;\n        if(a[i+1]==1){\n            if(nums[i]<=nums[i-1] || nums[i]<=nums[i+1]){\n                a[i+1]=0;\n                update(i+1,-1);\n            }\n        }\n        else{\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]){\n                a[i+1]=1;\n                update(i+1,1);\n            }\n        }\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n=nums.size();\n        vector<int> a(n+1,0);\n        for(int i=1;i<n-1;i++){\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]){\n                a[i+1]++;\n            }\n        }\n        create(a);\n        vector<int> ans;\n        for(auto q:queries){\n            if(q[0]==1){\n                int l=q[1]+2;\n                int r=q[2];\n                int val=prsum(r)-prsum(l-1);\n                // cout<<prsum(r)<<' '<<prsum(l-1)<<'\\n';\n                ans.push_back(max(val,0));\n            }\n            else{\n                int i=q[1];\n                int val=q[2];\n                nums[i]=val;\n                check(i,nums,a);\n                check(i+1,nums,a);\n                check(i-1,nums,a);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507110.0
}