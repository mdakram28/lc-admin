{
    "username": "Utsav_K19",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n    const int MOD = 1'000'000'007;\n    const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, std::vector<std::vector<int>>& requirements) {\n        std::unordered_map<int, int> requirementMap;\n        for (const auto& req : requirements) {\n            requirementMap[req[0] + 1] = req[1];\n        }\n\n        std::vector<std::vector<long>> dp(n + 1, std::vector<long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inversions = 0; inversions <= MAX_INVERSIONS; ++inversions) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInversions = inversions - newPos;\n                    if (prevInversions >= 0) {\n                        dp[length][inversions] = (dp[length][inversions] + dp[length - 1][prevInversions]) % MOD;\n                    }\n                }\n            }\n\n            if (requirementMap.find(length) != requirementMap.end()) {\n                int requiredInversions = requirementMap[length];\n                for (int inversions = 0; inversions <= MAX_INVERSIONS; ++inversions) {\n                    if (inversions != requiredInversions) {\n                        dp[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (const auto& count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return (int) result;\n    }\n};\n",
    "submit_ts": "1719069968",
    "subm_id": "1296811147"
}