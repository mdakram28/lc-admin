{
    "username": "maxuanquang",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \"\"\"\n        find the min value of maximum distance between 2 points after removing one point\n        \n        brute force:\n            O(n**3)\n            \n        points = [[3,10],[5,15],[10,2],[4,4]]\n        \n        3  4  5  10\n        10 4  15 2\n        \n        \n        Expected\n            O(n) or O(nlogn)\n        \"\"\"\n        n = len(points)\n        sums = [(x + y, i) for i, (x, y) in enumerate(points)]\n        diff = [(x - y, i) for i, (x, y) in enumerate(points)]\n        sums.sort()\n        diff.sort()\n        \n        answer = inf\n        for i in range(len(points)):\n            for j in range(len(points)):\n                if sums[j][1] != i:\n                    small_sum = sums[j][0]\n                    break\n            for j in range(len(points) - 1, -1, -1):\n                if sums[j][1] != i:\n                    big_sum = sums[j][0]\n                    break\n                    \n            for j in range(len(points)):\n                if diff[j][1] != i:\n                    small_diff = diff[j][0]\n                    break\n            for j in range(len(points) - 1, -1, -1):\n                if diff[j][1] != i:\n                    big_diff = diff[j][0]\n                    break\n                    \n            answer = min(\n                answer,\n                max(\n                    big_sum - small_sum,\n                    big_diff - small_diff\n                )\n            )\n            \n        return answer\n        \n        "
}