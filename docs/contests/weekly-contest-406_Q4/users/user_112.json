{
    "username": "hemanth00405",
    "submission": "from heapq import heappop, heappush\nfrom typing import List\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Create max-heaps for horizontal and vertical cuts by negating the costs\n        horizontal_pq = []\n        vertical_pq = []\n        \n        # Push all costs into their respective heaps\n        for cost in horizontalCut:\n            heappush(horizontal_pq, -cost)\n        for cost in verticalCut:\n            heappush(vertical_pq, -cost)\n        \n        total_cost = 0\n        horizontal_segments = 1  # Initially one horizontal segment\n        vertical_segments = 1    # Initially one vertical segment\n        \n        # Process cuts until we have no more cuts to process\n        while horizontal_pq or vertical_pq:\n            if not vertical_pq or (horizontal_pq and -horizontal_pq[0] >= -vertical_pq[0]):\n                # Make a horizontal cut\n                cost = -heappop(horizontal_pq)\n                total_cost += cost * vertical_segments\n                horizontal_segments += 1\n            else:\n                # Make a vertical cut\n                cost = -heappop(vertical_pq)\n                total_cost += cost * horizontal_segments\n                vertical_segments += 1\n        \n        return total_cost",
    "submit_ts": "1720924842",
    "subm_id": "1320233092"
}