{
    "username": "ampish",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n    \n    void buildTree(vector<int>& data, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = data[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(data, start, mid, 2 * node + 1);\n            buildTree(data, mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n    \n    int sumRange(int start, int end, int l, int r, int node) {\n        if (r < start || l > end) {\n            return 0;\n        }\n        if (l <= start && r >= end) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        return sumRange(start, mid, l, r, 2 * node + 1) + sumRange(mid + 1, end, l, r, 2 * node + 2);\n    }\n    \n    void update(int start, int end, int idx, int val, int node) {\n        if (start == end) {\n            tree[node] = val;\n        } else {\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                update(start, mid, idx, val, 2 * node + 1);\n            } else {\n                update(mid + 1, end, idx, val, 2 * node + 2);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n    \npublic:\n    SegmentTree(vector<int>& data) {\n        n = data.size();\n        tree.resize(4 * n);\n        buildTree(data, 0, n - 1, 0);\n    }\n    \n    int sumRange(int l, int r) {\n        return sumRange(0, n - 1, l, r, 0);\n    }\n    \n    void update(int idx, int val) {\n        update(0, n - 1, idx, val, 0);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> peaks(n, 0);\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                peaks[i] = 1;\n            }\n        }\n        \n            // cout<<\"Org Peaks\"<<endl;\n            // for(auto x:peaks) cout<<x<<\" \";\n            // cout<<endl;\n        \n        SegmentTree seg(peaks);\n        vector<int> ans;\n        \n        for (auto& x : queries) {\n            int type = x[0];\n            if (type == 1) {\n                int l = x[1];\n                int r = x[2];\n                if (r - l <= 1) {\n                    ans.push_back(0);\n                } else {\n                    l++;\n                    r--; \n                    int val = seg.sumRange(l, r);\n                    ans.push_back(val);\n                }\n            } else {\n                int ind = x[1];\n                int val = x[2];\n                nums[ind] = val;\n            \n                if (ind > 0 && ind < n - 1) {\n                    peaks[ind] = (nums[ind] > nums[ind - 1] && nums[ind] > nums[ind + 1]) ? 1 : 0;\n                    seg.update(ind, peaks[ind]);\n                }\n                if (ind > 1) {\n                    peaks[ind - 1] = (nums[ind - 1] > nums[ind - 2] && nums[ind - 1] > nums[ind]) ? 1 : 0;\n                    seg.update(ind - 1, peaks[ind - 1]);\n                }\n                if (ind < n - 2) {\n                    peaks[ind + 1] = (nums[ind + 1] > nums[ind] && nums[ind + 1] > nums[ind + 2]) ? 1 : 0;\n                    seg.update(ind + 1, peaks[ind + 1]);\n                }\n            }\n            \n//             cout<<\"Peaks\"<<endl;\n//             for(auto x:peaks) cout<<x<<\" \";\n//             cout<<endl;\n            \n//             for(auto x:nums) cout<<x<<\" \";\n//             cout<<endl;\n            \n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": "1718507519",
    "subm_id": "1289654154"
}