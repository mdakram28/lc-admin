{
    "username": "Anonymous_235940",
    "submission": "template <typename T, typename ACC> class segtree {\n    struct segtree_node {\n        T ans;\n        int start;\n        int len;\n        segtree_node* l{nullptr};\n        segtree_node* r{nullptr};\n    };\n\n    T segtree_q(segtree_node* q, int min, int max) {\n        if (q == nullptr || q->start > max || q->start + q->len - 1 < min)\n            return default_value;\n        if (min <= q->start && max >= q->start + q->len - 1)\n            return q->ans;\n        return acc(segtree_q(q->l, min, max), segtree_q(q->r, min, max));\n    }\n\n    void segtree_set(segtree_node* q, int i, const T &v) {\n        if (q == nullptr || q->start > i || q->start + q->len - 1 < i)\n            return;\n        if (q->start == i && q->len == 1) {\n            q->ans = v;\n            return;\n        }\n        segtree_set(q->l, i, v);\n        segtree_set(q->r, i, v);\n        q->ans = acc(q->l->ans, q->r->ans);\n    }\n\n    segtree_node* segtree_init(int sz, int i) {\n        auto ans = new segtree_node{default_value, i, sz, nullptr, nullptr};\n        if (sz > 1) {\n            ans->l = segtree_init(sz / 2, i);\n            ans->r = segtree_init(sz / 2 + sz % 2, i + sz / 2);\n        }\n        return ans;\n    }\n    segtree_node* _root{nullptr};\n    ACC acc;\n    T default_value;\n\n        public : segtree(int sz, const T& default_value,\n                         ACC acc) :acc{acc}, default_value{default_value} {\n        _root = segtree_init(sz, 0);\n    }\n    T query(int min, int max) { return segtree_q(_root, min, max); }\n    void set(int i, const T v) { segtree_set(_root, i, v); }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        segtree st{(int)nums.size(), (int)-1, [](int l, int r){return l & r;}};\n        for(int i = 0; i < nums.size(); ++i)\n        {\n            st.set(i, nums[i]);\n        }\n        //std::cout << st.query(nums.size() - 1, nums.size() - 1) << \"\\n\";\n        int ans = numeric_limits<int>::max();\n        for(int i = 0; i < nums.size(); ++i)\n        {\n            if(nums[i] <= k)\n            {\n                ans = min(ans, k - nums[i]);\n            }\n            else\n            {\n                int a = i;\n                int b = nums.size() - 1;\n                while(a != b)\n                {\n                    int mid = (a + b + 1) / 2;\n                    if(st.query(i, mid) > k)\n                    {\n                        a = mid;\n                    }\n                    else\n                    {\n                        b = mid - 1;\n                    }\n                }\n                ans = min(ans, abs(st.query(i, a) - k));\n                if(a < nums.size() - 1)\n                    ans = min(ans, abs(k - st.query(i, a + 1)));\n                \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298582.0
}