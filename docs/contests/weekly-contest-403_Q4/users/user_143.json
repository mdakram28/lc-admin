{
    "username": "rezero456",
    "submission": "class Solution {\n    private int [][][][]cache;\n    public int minimumSum(int[][] grid) {\n        int row = grid.length, col = grid[0].length;\n        cache = new int[row][row][col][col];\n        for(int[][][]sub:cache)for(int[][]sub1:sub)for(int[]sub2:sub1)Arrays.fill(sub2,-2);\n        return divide(grid,0,grid.length-1,0,grid[0].length-1,2);\n    }\n\n    private int divide(int[][] grid, int startRow, int endRow, int startCol, int endCol, int leftDivide) {\n        int res=Integer.MAX_VALUE;\n        if (leftDivide == 0) {\n            return help(grid, startRow, endRow, startCol, endCol);\n        }\n        //\u6a2a\u5207\n        for (int i = startRow; i < endRow; i++) {\n            for (int j = 0; j < leftDivide; j++) {\n                int left = divide(grid, startRow, i, startCol, endCol, j);\n                int right = divide(grid, i + 1, endRow, startCol, endCol, leftDivide - 1 - j);\n                if (left != -1 && right != -1) {\n                    res = Math.min(res, left + right);\n                }\n            }\n        }\n        //\u7ad6\u5207\n        for (int i = startCol; i < endCol; i++) {\n            for (int j = 0; j < leftDivide; j++) {\n                int left = divide(grid, startRow, endRow, startCol, i, j);\n                int right = divide(grid, startRow, endRow, i + 1, endCol, leftDivide - 1 - j);\n                if (left != -1 && right != -1) {\n                    res = Math.min(res, left + right);\n                }\n            }\n        }\n        return res==Integer.MAX_VALUE?-1:res;\n    }\n\n    //n^2\n    private int help(int[][] grid, int startRow, int endRow, int startCol, int endCol) {\n        if (startRow > endRow || startCol > endCol || startRow < 0 || startRow >= grid.length || startCol < 0 || endCol >= grid[0].length) {\n            return -1;\n        }\n        if (cache[startRow][endRow][startCol][endCol] == -2) {\n            int minRow = -1, maxRow = -1, minCol = -1, maxCol = -1;\n            for (int i = startRow; i <= endRow; i++) {\n                for (int j = startCol; j <= endCol; j++) {\n                    if (grid[i][j] == 1) {\n                        if (minCol == -1) {\n                            minCol = j;\n                            maxCol = j;\n                            minRow = i;\n                            maxRow = i;\n                        } else {\n                            minCol = Math.min(minCol, j);\n                            maxCol = Math.max(maxCol, j);\n                            minRow = Math.min(minRow, i);\n                            maxRow = Math.max(maxRow, i);\n                        }\n                    }\n                }\n            }\n            cache[startRow][endRow][startCol][endCol] = (maxRow - minRow + 1) * (maxCol - minCol + 1);\n        }\n        return cache[startRow][endRow][startCol][endCol];\n    }\n\n}",
    "submit_ts": "1719112959",
    "subm_id": "541395134"
}