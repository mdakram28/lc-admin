{
    "username": "sakura-xwb",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> q1 = new PriorityQueue<>((a, b)->b - a);\n        PriorityQueue<Integer> q2 = new PriorityQueue<>((a, b)->b - a);\n        for(int i : horizontalCut) q1.offer(i);\n        for(int i : verticalCut) q2.offer(i);\n        int n1 = 1;\n        int n2 = 1;\n        long ans = 0;\n        while(!q1.isEmpty() || !q2.isEmpty()) {\n            if(!q1.isEmpty() && (q2.isEmpty() || q1.peek() > q2.peek() )) {\n                ans += (long)q1.poll() * n1;\n                ++n2;\n            }\n            else {\n                ans += (long)q2.poll() * n2;\n                ++n1;\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720925775",
    "subm_id": "546441873"
}