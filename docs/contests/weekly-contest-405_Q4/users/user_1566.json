{
    "username": "adityavkrm",
    "submission": "struct TrieNode {\n    int minCost;\n    map<char, TrieNode*> children;\n\n    TrieNode(): minCost(INT_MAX) {}\n\n    TrieNode* child(char c, bool create = false) {\n        auto it = children.find(c);\n        if (!create) {\n            return it != children.end() ? it->second : nullptr;\n        }\n        it = children.insert({ c, new TrieNode() }).first;\n        return it->second;\n    }\n\n    ~TrieNode() {\n        for (auto& [_, child]: children) {\n            delete child;\n            child = nullptr;\n        }\n    }\n};\n\nclass Trie {\n    TrieNode* root;\npublic:\n    Trie(): root(new TrieNode()) {}\n\n    void addWord(string_view word, int cost) {\n        TrieNode* temp = root;\n        for (char c: word) {\n            temp = temp->child(c, true);\n        }\n        temp->minCost = min(temp->minCost, cost);\n    }\n\n    vector<pair<int, int>> getMatches(const string& s, int start) const {\n        TrieNode* temp = root;\n        vector<pair<int, int>> matches;\n        const int n = s.size();\n        for (int i = start; i < n; ++i) {\n            temp = temp->child(s[i]);\n            if (!temp) {\n                break;\n            }\n            if (temp->minCost != INT_MAX) {\n                matches.emplace_back(i + 1, temp->minCost);\n            }\n        }\n        return matches;\n    }\n\n    ~Trie() {\n        delete root;\n        root = nullptr;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        const int n = words.size();\n        for (int i = 0; i < n; ++i) {\n            trie.addWord(words[i], costs[i]);\n        }\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp.back() = 0;\n        for (int i = target.size() - 1; i >= 0; --i) {\n            const auto matches = trie.getMatches(target, i);\n            if (matches.empty()) {\n                continue;\n            }\n            \n            // cout << \"Starting at index \"<<i<<endl;\n            for (const auto &[nextI, nextCost]: matches) {\n                // cout << nextI << \": \"<<nextCost<<endl;\n                if (dp[nextI] != INT_MAX) {\n                    dp[i] = min(dp[i], dp[nextI] + nextCost);\n                }\n            }\n        }\n        return dp[0] != INT_MAX ? dp[0] : -1;\n    }\n};",
    "submit_ts": "1720323582",
    "subm_id": "1312379072"
}