{
    "username": "dineshchandran311",
    "submission": "class Node {\n    String word;\n    int cost;\n    Node(String word, int cost) {\n        this.word = word;\n        this.cost = cost;\n    }\n}\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = words.length;\n        Node[] changes = new Node[n];\n        for (int i = 0; i < n; i++) {\n            changes[i] = new Node(words[i], costs[i]);\n        }\n\n        Arrays.sort(changes, Comparator.comparing(a -> a.word.charAt(0)));\n\n        int[] start = new int[26];\n        int[] end = new int[26];\n        Arrays.fill(start, -1);\n        Arrays.fill(end, -1);\n\n        for (int i = 0; i < n; i++) {\n            int idx = changes[i].word.charAt(0) - 'a';\n            if (start[idx] == -1) start[idx] = i;\n            end[idx] = i;\n        }\n\n        long[] dp = new long[target.length() + 1];\n        Arrays.fill(dp, -1);\n        long result = bt(0, target, changes, start, end, dp);\n\n        return result >= 1_000_000_000 ? -1 : (int) result;\n    }\n\n    private long bt(int idx, String target, Node[] changes, int[] start, int[] end, long[] dp) {\n        if (idx >= target.length()) {\n            return 0;\n        }\n        if (dp[idx] != -1) {\n            return dp[idx];\n        }\n\n        long res = 1_000_000_000;\n        int charIdx = target.charAt(idx) - 'a';\n        int startIdx = start[charIdx];\n        int endIdx = end[charIdx];\n\n        if (startIdx != -1) {\n            for (int j = startIdx; j <= endIdx; j++) {\n                String word = changes[j].word;\n                if (target.startsWith(word, idx)) {\n                    res = Math.min(res, changes[j].cost + bt(idx + word.length(), target, changes, start, end, dp));\n                }\n            }\n        }\n\n        return dp[idx] = res;\n    }\n}\n",
    "submit_ts": "1720323537",
    "subm_id": "1312377974"
}