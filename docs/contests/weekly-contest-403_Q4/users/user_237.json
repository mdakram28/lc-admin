{
    "username": "ddmike",
    "submission": "class Solution {\nprivate:\n    void doit(int sx, int ex, int sy, int ey, vector<int>& arr, vector<vector<int>>& grid)\n    {\n        for (int i = sx; i <= ex; ++i)\n        {\n            for (int j = sy; j <= ey; ++j)\n            {\n                if (grid[i][j] == 1)\n                {\n                    arr[0] = min(arr[0], i);\n                    arr[1] = max(arr[1], i);\n                    arr[2] = min(arr[2], j);\n                    arr[3] = max(arr[3], j);\n                }\n            }\n        }\n    }\n    vector<int> merge(vector<int>& a1, vector<int>& a2) {\n        vector<int> tmp(4, 0);\n        tmp[0] = min(a1[0], a2[0]);\n        tmp[1] = max(a1[1], a2[1]);\n        tmp[2] = min(a1[2], a2[2]);\n        tmp[3] = max(a1[3], a2[3]);\n        return tmp;\n    }\n\n    bool pd(vector<int>& a)\n    {\n        if (a[0] <= a[1] && a[2] <= a[3]) return true;\n        return false;\n    }\n\n    int js(vector<int>& a) \n    {\n        return (a[1] - a[0] + 1) * (a[3] - a[2] + 1);\n    }\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int ans = m * n; \n        for (int x = 0; x < m - 1; ++x)\n        {\n            for (int y = 0; y < n - 1; ++y)\n            {\n                vector<vector<int>> arr(4, {m - 1, 0,  n - 1, 0});\n                doit(0, x, 0, y, arr[0], grid);\n                doit(0, x, y + 1, n - 1, arr[1], grid);\n                doit(x + 1, m - 1, y + 1, n - 1, arr[2], grid);\n                doit(x + 1, m - 1, 0, y, arr[3], grid);\n                for (int i = 0; i < 4; ++i)\n                {\n                    vector<int> a1 = arr[(i + 3) % 4],\n                                a2 = arr[(i + 2) % 4],\n                                a3 = merge(arr[i], arr[(i + 1) % 4]);\n                    // for (int j = 0; j < 4; ++j)\n                    // {\n                    //     cout << a1[j] << ' ';\n                    // }\n                    // cout << endl;\n                    //  for (int j = 0; j < 4; ++j)\n                    // {\n                    //     cout << a2[j] << ' ';\n                    // }\n                    // cout << endl;\n                    //  for (int j = 0; j < 4; ++j)\n                    // {\n                    //     cout << a3[j] << ' ';\n                    // }\n                    // cout << endl;\n                    // cout << \"-------------\" << endl;\n                    if (pd(a1) && pd(a2) && pd(a3))\n                    {\n                        ans = min(ans, js(a1) + js(a2) + js(a3));\n                    }\n                }\n                \n                \n            }\n        }\n\n        for (int x1 = 0; x1 < m - 1; ++x1)\n        {\n            for (int x2 = x1 + 1; x2 < m - 1; ++x2)\n            {\n                vector<vector<int>> arr(3, {m - 1, 0,  n - 1, 0});\n                doit(0, x1, 0, n - 1, arr[0], grid);\n                doit(x1 + 1, x2, 0, n - 1, arr[1], grid);\n                doit(x2 + 1, m - 1, 0, n - 1, arr[2], grid);\n                if (pd(arr[0]) && pd(arr[1]) && pd(arr[2]))\n                {\n                    ans = min(ans, js(arr[0]) + js(arr[1]) + js(arr[2]));\n                }\n            }\n        }\n\n        for (int y1 = 0; y1 < n - 1; ++y1)\n        {\n            for (int y2 = y1 + 1; y2 < n - 1; ++y2)\n            {\n                vector<vector<int>> arr(3, {m - 1, 0,  n - 1, 0});\n                doit(0, m - 1, 0, y1, arr[0], grid);\n                doit(0, m - 1, y1 + 1, y2, arr[1], grid);\n                doit(0, m - 1, y2 + 1, n - 1, arr[2], grid);\n                if (pd(arr[0]) && pd(arr[1]) && pd(arr[2]))\n                {\n                    ans = min(ans, js(arr[0]) + js(arr[1]) + js(arr[2]));\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719113192.0
}