{
    "username": "JuneChain",
    "submission": "class Solution {\n#define min(a, b) (a) < (b) ? (a) : (b);\nprivate:\n    struct TrieNode {\n        TrieNode * child[26];\n\n        int cost;\n\n        TrieNode() {\n            cost = -1;\n            for (int i = 0; i < 26; i ++) {\n                child[i] = nullptr;\n            }\n        }\n    };\n    int minHelper(string & target, TrieNode & tH, vector<int> & mem, int n, int idx) {\n        if (idx == n) {\n            return 0;\n        }\n        if (mem[idx] != -1) {\n            return mem[idx];\n        }\n        TrieNode * p = &tH;\n        int i = idx;\n        int minCost(-1);\n        while (i < n && p->child[target[i]-'a'] != nullptr) {\n            p = p->child[target[i]-'a'];\n            i ++;\n            if (p->cost != -1) {\n                // try terminate here and compute cost\n                int cost = minHelper(target, tH, mem, n, i);\n                if (cost != -1) {\n                    cost += p->cost;\n                    minCost = minCost == -1 ? cost : min(minCost, cost);\n                }\n            }\n        }\n        mem[idx] = minCost;\n        return minCost;\n    }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode tH;\n        for (int i = 0; i < words.size(); i ++) {\n            TrieNode * p = &tH;\n            string & s = words[i];\n            for (char & c : s) {\n                if (p->child[c-'a'] == nullptr) {\n                    p->child[c-'a'] = new TrieNode();\n                }\n                p = p->child[c-'a'];\n            }\n            if (p->cost == -1) {\n                p->cost = costs[i];\n            } else {\n                p->cost = min(p->cost, costs[i])\n            }\n        }\n        vector<int> mem(target.length(), -1);\n\n        return minHelper(target, tH, mem, target.length(), 0);\n    }\n};",
    "submit_ts": "1720324098",
    "subm_id": "1312391531"
}