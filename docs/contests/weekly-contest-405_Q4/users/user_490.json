{
    "username": "HaoyuWang417",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.end_indices = []\n\ndef insert_word(root, word, index):\n    node = root\n    for char in word:\n        node = node.children[char]\n    node.end_indices.append(index)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = TrieNode()\n        for i, word in enumerate(words):\n            insert_word(root, word, i)\n\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        pq = [(0, 0)]\n\n        while pq:\n            current_cost, position = heapq.heappop(pq)\n            if dp[position] < current_cost:\n                continue\n            node = root\n            for i in range(position, n):\n                if target[i] not in node.children:\n                    break\n                node = node.children[target[i]]\n                for index in node.end_indices:\n                    next_position = i + 1\n                    new_cost = dp[position] + costs[index]\n                    if new_cost < dp[next_position]:\n                        dp[next_position] = new_cost\n                        heapq.heappush(pq, (new_cost, next_position))\n\n        result = dp[n]\n        return result if result != float('inf') else -1",
    "submit_ts": "1720321368",
    "subm_id": "1312321010"
}