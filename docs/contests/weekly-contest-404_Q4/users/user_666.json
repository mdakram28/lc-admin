{
    "username": "jason_wong1",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int[] dists1 = getDists(edges1);\n        int[] dists2 = getDists(edges2);\n        Arrays.sort(dists1);\n        Arrays.sort(dists2);\n        \n        return Math.max(dists1[0] + dists2[0] + 1, Math.max(dists1[dists1.length - 1], dists2[dists2.length - 1]));\n    }\n    \n    private int[] getDists(int[][] edges) {\n        int n = edges.length + 1;\n        List<List<Integer>> graph = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            graph.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            int src = edge[0], dst = edge[1];\n            graph.get(src).add(dst);\n            graph.get(dst).add(src);\n        }\n        \n        int[] heights = new int[n];\n        calculateHeights(graph, heights, -1, 0);\n        \n        int[] dists = new int[n];\n        calculateDists(graph, heights, dists, -1, -1, 0);\n        \n        return dists;\n    }\n    \n    private void calculateHeights(List<List<Integer>> graph, int[] heights, int parent, int current) {\n        for (int child: graph.get(current)) {\n            if (child != parent) {\n                calculateHeights(graph, heights, current, child);\n                heights[current] = Math.max(heights[current], heights[child] + 1);\n            }\n        }\n    }\n    \n    private void calculateDists(List<List<Integer>> graph, int[] heights, int[] dists, int parent, int parentPartialDist, int current) {\n        List<Integer> prefixMax = new ArrayList<>();\n        List<Integer> suffixMax = new ArrayList<>();\n        for (int child : graph.get(current)) {\n            if (child != parent) {\n                prefixMax.add(heights[child]);\n                suffixMax.add(heights[child]);\n            }\n        }\n        \n        for (int i = 1; i < prefixMax.size(); i++) {\n            prefixMax.set(i, Math.max(prefixMax.get(i - 1), prefixMax.get(i)));\n        }\n        for (int i = suffixMax.size() - 2; i >= 0; i--) {\n            suffixMax.set(i, Math.max(suffixMax.get(i + 1), suffixMax.get(i)));\n        }\n        \n        int childCnt = 0;\n        for (int child : graph.get(current)) {\n            if (child != parent) {\n                int sub1 = childCnt == 0 ? Integer.MIN_VALUE : prefixMax.get(childCnt - 1);\n                int sub2 = childCnt == suffixMax.size() - 1 ? Integer.MIN_VALUE : suffixMax.get(childCnt + 1);\n                int res = 1 + Math.max(parentPartialDist, Math.max(sub1, sub2));\n                \n                calculateDists(graph, heights, dists, current, res, child);\n                childCnt++;\n            }\n        }\n        \n        dists[current] = 1 + Math.max(parentPartialDist, prefixMax.isEmpty() ? -1 : prefixMax.get(prefixMax.size() - 1));\n    }\n}",
    "submit_ts": "1719719785",
    "subm_id": "1304450524"
}