{
    "username": "amsraman",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = (int) edges.size() + 1;\n        vector<vector<int>> g(n);\n        for(auto edge: edges) {\n            g[edge[0]].push_back(edge[1]); g[edge[1]].push_back(edge[0]);\n        }\n        vector<int> dwn(n, 0), ans(n, 0);\n        auto dfs = [&](auto rec, int u, int p) -> void {\n            for(int v: g[u]) {\n                if(v == p) continue;\n                rec(rec, v, u);\n                dwn[u] = max(dwn[u], dwn[v] + 1 + (v & 1 ^ 1));\n            }\n        };\n        dfs(dfs, 0, 0);\n        auto dfs2 = [&](auto rec, int u, int p, int dw) -> void {\n            ans[u] = max(dw, dwn[u]);\n            int m1 = 0, m2 = -1e9;\n            for(int v: g[u]) {\n                if(v == p) continue;\n                int this_val = dwn[v] + 1 + (v & 1 ^ 1);\n                m2 = max(m2, this_val);\n                if(m2 > m1) swap(m1, m2);\n            }\n            for(int v: g[u]) {\n                if(v == p) continue;\n                int this_val = dwn[v] + 1 + (v & 1 ^ 1);\n                int new_dwn = max(dw, this_val == m1 ? m2 : m1) + 1 + (u & 1 ^ 1);\n                rec(rec, v, u, new_dwn);\n            }\n        };\n        dfs2(dfs2, 0, 0, 0);\n        return ans;\n    }\n};",
    "submit_ts": "1722696895",
    "subm_id": "1343126348"
}