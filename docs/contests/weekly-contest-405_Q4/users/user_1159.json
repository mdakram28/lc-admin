{
    "username": "code_OR",
    "submission": "\nclass TrieNode{\n    public:\n    char c;\n    int cost;\n    vector<TrieNode*> child;\n    \n    TrieNode(){\n        cost=-1;\n        child = vector<TrieNode*> (26, NULL);\n    }\n};\n\nclass Solution {\n    TrieNode* trieHead;\n    vector<int> dp;\n    void fillTrie(string &s, int cost, TrieNode* head){\n        for(int i=0;i<s.size();i++){\n            int c = (int)(s[i] - 'a');\n            if(head->child[c] == NULL){\n                head->child[c] = new TrieNode();\n            }\n            \n            head = head->child[c];\n        }\n        if(head->cost !=-1)\n            cost = min(cost, head->cost);\n            \n            head->cost = cost;\n    }\n    \n    int check(string& t, int pos){\n        if(pos == t.size())return 0;\n        \n        if(dp[pos] !=-1)return dp[pos];\n        \n        TrieNode* temp = trieHead;\n        int ans = 1000000000;\n        for(int i=pos;i<t.size();i++){\n            int c = (int)(t[i]-'a');\n            if(temp->child[c] != NULL){\n                temp = temp->child[c];\n                if(temp->cost != -1){\n                    ans = min(ans, temp->cost + check(t,i+1));\n                }\n            }\n            else break;\n        }\n        return dp[pos] = ans;\n    }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=words.size();\n        dp=vector<int> (target.size() , -1);\n        TrieNode* head = new TrieNode();\n        trieHead = head;\n        for(int i=0;i<n;i++){\n            fillTrie(words[i], costs[i], head);\n        }\n        \n        int ans= check(target, 0);\n        \n        if(ans>=1000000000)ans=-1;\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720322984",
    "subm_id": "1312364350"
}