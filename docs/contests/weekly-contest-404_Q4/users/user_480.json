{
    "username": "guddusingh123",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto cal = [&](vector<vector<int>> edges){\n            int n = edges.size() + 1;\n            vector<vector<int>> g(n);\n            for(auto & v : edges){\n                g[v[0]].push_back(v[1]);\n                g[v[1]].push_back(v[0]);\n            }\n            \n            int node = 0, c = 0, mx = 0;\n            function<void(int, int)> dfs = [&](int v, int p){\n                if(mx < c){\n                    mx = c;\n                    node = v;\n                }\n                c++;\n                for(auto u : g[v]){\n                    if(u == p) continue;\n                    dfs(u, v);\n                }\n                c--;\n            };\n            dfs(0, -1);\n            c = 0, mx = 0;\n            // cout << node << '\\n';\n            dfs(node, -1);\n            // cout << node << ' ' << mx << '\\n';\n            \n            return mx;\n        };\n        auto x = cal(edges1);\n        auto y = cal(edges2);\n        // cout << x << ' ' << y << '\\n';\n        return max({(x + 1) / 2 + (y + 1) / 2 + 1, x, y});\n    }\n};",
    "submit_ts": 1719718466.0
}