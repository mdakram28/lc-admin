{
    "username": "prahlad_007",
    "submission": "import 'dart:math';\nimport 'dart:collection';\n\nclass Solution {\n  int bfs(List<List<int>> g, int s, int t1, int t2, int n) {\n    Queue<int> q = Queue<int>();\n    List<int> vis = List<int>.filled(n, 0);\n    q.add(s);\n    vis[s] = 1;\n\n    while (q.isNotEmpty) {\n      int u = q.removeFirst();\n      for (int v in g[u]) {\n        if (vis[v] == 0) {\n          q.add(v);\n          vis[v] = 1;\n        }\n      }\n    }\n    return vis[t1] | vis[t2];\n  }\n\n  bool canReachCorner(int X, int Y, List<List<int>> c2) {\n    int nc = c2.length;\n    List<List<int>> g = List<List<int>>.generate(nc + 4, (_) => []);\n\n    for (int i = 0; i < nc; ++i) {\n      int cx = c2[i][0];\n      int cy = c2[i][1];\n      int r = c2[i][2];\n\n      if (cx <= r) {\n        g[nc].add(i);\n        g[i].add(nc);\n      }\n      if (X - cx <= r) {\n        g[nc + 2].add(i);\n        g[i].add(nc + 2);\n      }\n      if (cy <= r) {\n        g[nc + 1].add(i);\n        g[i].add(nc + 1);\n      }\n      if (Y - cy <= r) {\n        g[nc + 3].add(i);\n        g[i].add(nc + 3);\n      }\n      for (int j = i + 1; j < nc; ++j) {\n        int cx2 = c2[j][0];\n        int cy2 = c2[j][1];\n        int r2 = c2[j][2];\n        double d = sqrt(pow(cx - cx2, 2) + pow(cy - cy2, 2));\n        int rsum = r + r2;\n        if (rsum >= d) {\n          g[i].add(j);\n          g[j].add(i);\n        }\n      }\n    }\n\n    int blocked = 0;\n    blocked = max(blocked, bfs(g, nc, nc + 1, nc + 2, nc + 4)); \n    blocked = max(blocked, bfs(g, nc + 3, nc + 2, nc + 1, nc + 4)); \n\n    return blocked == 0;\n  }\n}\n",
    "submit_ts": "1722136683",
    "subm_id": "1335741930"
}