{
    "username": "rkyrahulkumar",
    "submission": "import heapq\nfrom collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n        \n    def insert(self, word, cost):\n        node = self.root\n        for ch in word:\n            if ch not in node.children:\n                node.children[ch] = TrieNode()\n            node = node.children[ch]\n        node.cost = min(node.cost, cost)\n    \n    def get_words_starting_at(self, target, start_index):\n        node = self.root\n        results = []\n        current_cost = 0\n        \n        for i in range(start_index, len(target)):\n            if target[i] not in node.children:\n                break\n            node = node.children[target[i]]\n            current_cost = node.cost\n            if current_cost != float('inf'):\n                results.append((i + 1, current_cost))\n        \n        return results\n\ndef min_cost_to_form_target(target, words, costs):\n    n = len(target)\n    \n    # Build Trie\n    trie = Trie()\n    for i in range(len(words)):\n        trie.insert(words[i], costs[i])\n    \n    # Min-heap to keep track of the minimum cost to reach each position\n    min_heap = [(0, 0)]  # (current_cost, index)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    \n    while min_heap:\n        current_cost, i = heapq.heappop(min_heap)\n        \n        if current_cost > dp[i]:\n            continue\n        \n        words_at_pos = trie.get_words_starting_at(target, i)\n        for end_index, word_cost in words_at_pos:\n            new_cost = current_cost + word_cost\n            if new_cost < dp[end_index]:\n                dp[end_index] = new_cost\n                heapq.heappush(min_heap, (new_cost, end_index))\n    \n    return dp[n] if dp[n] != float('inf') else -1\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        return min_cost_to_form_target(target, words, costs)\n",
    "submit_ts": "1720323171",
    "subm_id": "1312369074"
}