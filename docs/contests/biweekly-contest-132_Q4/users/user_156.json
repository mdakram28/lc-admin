{
    "username": "ResentfulPhantom",
    "submission": "class Solution {\n   public:\n    int maximumLength(vector<int> &nums, int k) {\n        int n = nums.size();\n        int answer = 1;\n\n        vector<pair<int, int>> ccp;\n        for (int i = 0; i < n; i++) {\n            ccp.push_back({nums[i], i});\n        }\n\n        sort(ccp.begin(), ccp.end());\n        for (int i = 0, val = 0; i < n; i++) {\n            if (i and ccp[i].first != ccp[i - 1].first) val++;\n            nums[ccp[i].second] = val;\n        }\n\n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        vector<vector<int>> value_best(n, vector<int>(k + 1, 0));\n        vector<multiset<int, greater<>>> k_best(k + 1);\n\n        for (int i = 0; i < n; i++) {\n            int val = nums[i];\n            for (int j = 0; j <= k; j++) {\n                dp[i][j] = max(dp[i][j], value_best[val][j] + 1);\n\n                if (j and !k_best[j - 1].empty()) {\n                    int prev_best = value_best[val][j - 1];\n                    auto it = k_best[j - 1].lower_bound(prev_best);\n                    if (it != k_best[j - 1].end()) {\n                        k_best[j - 1].erase(it);\n                        if (!k_best[j - 1].empty()) {\n                            int option = *k_best[j - 1].begin();\n                            dp[i][j] = max(dp[i][j], option + 1);\n                        }\n                        k_best[j - 1].insert(prev_best);\n                    }\n                }\n\n                answer = max(answer, dp[i][j]);\n                value_best[val][j] = max(value_best[val][j], dp[i][j]);\n                k_best[j].insert(dp[i][j]);\n            }\n        }\n\n        return answer;\n    }\n};",
    "submit_ts": 1717860243.0
}