{
    "username": "Anuj Kumar",
    "submission": "class Solution {\npublic:\n    char dp[100001][7];\n    char dp_non_zero[100001][7];\n    int nxt_mod[100001][7];\n    int non_zero_nxt_mod[100001][7];\n    \n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        \n        if (k == 2) {\n            if (n == 1) {\n                return \"8\";\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            return result;\n        }\n        \n        if (k == 5) {\n            if (n == 1) {\n                return \"5\";\n            }\n            string result(n, '9');\n            result[0] = '5';\n            result[n - 1] = '5';\n            return result;\n        }\n\n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            return result;\n        }\n        \n        if (k == 8) {\n            if (n <= 5) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            result[2] = '8';\n            result[n - 3] = '8';\n            return result;\n        }\n        \n        if (k == 6) {\n            if (n == 1) {\n                return \"6\";\n            }\n            if (n == 2) {\n                return \"66\";\n            }\n            if (n == 3) {\n                return \"888\";\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            if (n % 2 == 1) {\n                result[n / 2] = '8';\n            } else {\n                result[n / 2] = '7';\n                result[(n / 2) - 1] = '7';\n            }\n            return result;\n        }\n\n        if (k == 7) {\n            if (n == 1) {\n                return \"7\";\n            }\n            \n            fill(&dp[0][0], &dp[0][0] + sizeof(dp), 0);\n            fill(&dp_non_zero[0][0], &dp_non_zero[0][0] + sizeof(dp_non_zero), 0);\n\n            for (int i = 1; i < 10; ++i) {\n                dp[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    dp_non_zero[1][i % 7] = '0' + i;\n                }\n            }\n\n            int base_mod = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && dp[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int new_mod = (base_mod * digit + digit + j * 10) % 7;\n                        if (dp[i + 2][new_mod] == 0 || dp[i + 2][new_mod] < '0' + digit) {\n                            dp[i + 2][new_mod] = '0' + digit;\n                            nxt_mod[i + 2][new_mod] = j;\n                        }\n                        if (digit == 0) continue;\n                        if (dp_non_zero[i + 2][new_mod] == 0 || dp_non_zero[i + 2][new_mod] < '0' + digit) {\n                            dp_non_zero[i + 2][new_mod] = '0' + digit;\n                            non_zero_nxt_mod[i + 2][new_mod] = j;\n                        }\n                    }\n                }\n                base_mod = (base_mod * 10) % 7;\n            }\n\n            int len = n;\n            string front(1, dp_non_zero[len][0]);\n            string back(1, dp_non_zero[len][0]);\n            int mod = non_zero_nxt_mod[len][0];\n            len -= 2;\n            while (len > 0) {\n                front += dp[len][mod];\n                if (len > 1) back += dp[len][mod];\n                mod = nxt_mod[len][mod];\n                len -= 2;\n            }\n            reverse(back.begin(), back.end());\n            return front + back;\n        }\n\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723953335",
    "subm_id": "1359818529"
}