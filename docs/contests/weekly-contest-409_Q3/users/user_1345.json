{
    "username": "Boddy123",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        \n        intervals = SortedList()\n        intervals_first = SortedList()\n        intervals.add(queries[0])\n        intervals_first.add(queries[0][0])\n        res = [n-1-queries[0][1]+queries[0][0]+1]\n        short_sum = queries[0][1]-queries[0][0]-1\n        \n        for interval in queries[1:]:\n            index = bisect.bisect_left(intervals_first, interval[0])\n            # print(\"interval\", interval)\n            # print(\"intervals\", intervals)\n            # print(\"intervals_first\", intervals_first)\n            # print(\"index\", index)\n            \n            if index > 0 and intervals[index-1][1] >= interval[1]:\n                res.append(n-1-short_sum)\n                continue\n            \n            if index< len(intervals) and interval[0] == intervals[index][0]:\n                if interval[1] > intervals[index][1]:\n                    short_sum += interval[1] - intervals[index][1]\n                    curr = index+1\n                    while curr < len(intervals) and intervals[curr][1] <= interval[1]:\n                        short_sum -= intervals[curr][1]-intervals[curr][0]-1\n                        intervals_first.remove(intervals[curr][0])\n                        intervals.remove(intervals[curr])\n                        \n                intervals[index][1] = max(interval[1], intervals[index][1])\n            else:\n                intervals.add(interval)\n                intervals_first.add(interval[0])\n                short_sum += interval[1]-interval[0]-1\n                \n                curr = index+1\n                while curr < len(intervals) and intervals[curr][1] <= interval[1]:\n                    short_sum -= intervals[curr][1]-intervals[curr][0]-1\n                    intervals_first.remove(intervals[curr][0])\n                    intervals.remove(intervals[curr])\n                    \n                 # print(\"short_sum\", short_sum)\n            \n            res.append(n-1-short_sum)\n            \n            \n            # prev = 0\n            # for curr_interval in intervals:\n            #     if curr_interval[1] <= prev:\n            #         continue\n            #     short_sum += (curr_interval[1]-curr_interval[0]-1)\n            #     prev = curr_interval[1]\n            # # print(\"curr_intervals\", intervals)\n            # res.append(n-1-short_sum)\n            \n        return res\n                ",
    "submit_ts": "1722743452",
    "subm_id": "1343792237"
}