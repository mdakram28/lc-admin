{
    "username": "prafulchalakh224",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n\nstruct TrieNode {\n    TrieNode* children[26];\n    bool isEndOfWord;\n    int minCost; // Store the minimum cost of the word ending at this node\n\n    TrieNode() : isEndOfWord(false), minCost(INT_MAX) {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    // Function to insert a word into the trie\n    void insert(TrieNode* root, const std::string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->isEndOfWord = true;\n        // Update the minimum cost for the word ending at this node\n        node->minCost = std::min(node->minCost, cost);\n    }\n\n    // Function to find the minimum cost using DP and Trie\n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], costs[i]);\n        }\n\n        std::vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < target.size(); ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < target.size(); ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (node->isEndOfWord) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        // Free the allocated memory for the trie\n        deleteTrie(root);\n        return dp[target.size()] == INT_MAX ? -1 : dp[target.size()];\n    }\n\nprivate:\n    // Helper function to delete the trie\n    void deleteTrie(TrieNode* node) {\n        for (int i = 0; i < 26; ++i) {\n            if (node->children[i]) {\n                deleteTrie(node->children[i]);\n            }\n        }\n        delete node;\n    }\n};\n",
    "submit_ts": "1720322407",
    "subm_id": "1312349082"
}