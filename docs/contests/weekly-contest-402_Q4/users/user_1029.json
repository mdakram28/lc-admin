{
    "username": "bai-du-ren-a",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.nums = nums\n        self.build(0, 0, self.n - 1)\n    \n    def is_peak(self, nums, index):\n        if index == 0 or index == len(nums) - 1:\n            return 0\n        return int(nums[index] > nums[index - 1] and nums[index] > nums[index + 1])\n    \n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = self.is_peak(self.nums, start)\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def update(self, idx, val, node, start, end):\n        if start == end:\n            self.nums[idx] = val\n            self.tree[node] = self.is_peak(self.nums, idx)\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(idx, val, left_child, start, mid)\n            else:\n                self.update(idx, val, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n    \n    def query(self, L, R, node, start, end):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query(L, R, left_child, start, mid)\n        right_query = self.query(L, R, right_child, mid + 1, end)\n        return left_query + right_query\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        seg_tree = SegmentTree(nums)\n        results = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if li == ri:\n                    results.append(0)\n                else:\n                    results.append(seg_tree.query(li + 1, ri - 1, 0, 0, seg_tree.n - 1))\n            elif query[0] == 2:\n                index, val = query[1], query[2]\n                seg_tree.update(index, val, 0, 0, seg_tree.n - 1)\n                # \u66f4\u65b0\u76f8\u90bb\u4f4d\u7f6e\u7684\u5cf0\u503c\u4fe1\u606f\n                if index > 0:\n                    seg_tree.update(index - 1, seg_tree.nums[index - 1], 0, 0, seg_tree.n - 1)\n                if index < seg_tree.n - 1:\n                    seg_tree.update(index + 1, seg_tree.nums[index + 1], 0, 0, seg_tree.n - 1)\n        return results\n",
    "submit_ts": 1718508451.0
}