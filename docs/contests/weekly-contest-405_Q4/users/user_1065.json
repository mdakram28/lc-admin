{
    "username": "khatri7404668317",
    "submission": "import java.util.*;\n\nclass Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        int cost = Integer.MAX_VALUE;\n    }\n\n    TrieNode root;\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        root = new TrieNode();\n        \n        // Build Trie\n        for (int i = 0; i < words.length; i++) {\n            TrieNode node = root;\n            for (char c : words[i].toCharArray()) {\n                node = node.children.computeIfAbsent(c, k -> new TrieNode());\n            }\n            node.cost = Math.min(node.cost, costs[i]);\n        }\n\n        int n = target.length();\n        long[] dp = new long[n + 1];\n        Arrays.fill(dp, Long.MAX_VALUE);\n        dp[0] = 0;\n\n        // Dynamic Programming\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Long.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                if (node == null || !node.children.containsKey(target.charAt(j))) break;\n                node = node.children.get(target.charAt(j));\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Long.MAX_VALUE ? -1 : (int) dp[n];\n    }\n}\n\n",
    "submit_ts": "1720322473",
    "subm_id": "1312350870"
}