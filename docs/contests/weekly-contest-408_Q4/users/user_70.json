{
    "username": "gaoyf1235",
    "submission": "class UnionFindSet{\nprivate:\n    std::vector<size_t> parent_;\n    std::vector<size_t> rank_;\npublic:\n    UnionFindSet(size_t n) : parent_(n), rank_(n, 1){\n        std::iota(std::begin(parent_), std::end(parent_), 0);\n    }\n\n    size_t find(size_t i) {\n        if (i == parent_[i]) return i;\n        return parent_[i] = find(parent_[i]);\n    }\n\n    bool connect(size_t i, size_t j) {\n        size_t parent_i = find(i);\n        size_t parent_j = find(j);\n        if (parent_i == parent_j) return false;\n        if (rank_[parent_i] < rank_[parent_j]) parent_[parent_i] = parent_j;\n        else if (rank_[parent_i] > rank_[parent_j]) parent_[parent_j] = parent_i;\n        else {\n            parent_[parent_i] = parent_j;\n            rank_[parent_j]++;\n        }\n        return true;\n    }\n\n        \n    bool isConnected(size_t i, size_t j) {\n\t\treturn find(i) == find(j);\n\t}\n\n    std::unordered_map<size_t, std::vector<size_t>>  groups() {\n        std::unordered_map<size_t, std::vector<size_t>> groups;\n        for (size_t i = 0; i < parent_.size(); i++) {\n            size_t g = find(i);\n            groups[g].push_back(i);\n        }\n        return groups;\n    }      \n};\n\nclass Solution {\n    using ll = long long;\n    bool intersect(vector<int>& c0, vector<int>& c1){\n        ll x0 = c0[0];\n        ll y0 = c0[1];\n        ll r0 = c0[2];\n        ll x1 = c1[0];\n        ll y1 = c1[1];\n        ll r1 = c1[2];\n        return (x0 - x1) * (x0 - x1) + (y0 - y1) * (y0 - y1) <= (r0 + r1) * (r0 + r1);\n    }\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        UnionFindSet ufs(n);\n        for(int i = 0; i < n; i++){\n            for(int j = i + 1; j < n; j++){\n                if(intersect(circles[i], circles[j])){\n                    ufs.connect(i, j);\n                }\n            }\n        }\n        auto groups = ufs.groups();\n        for(auto& [leader, cid] : groups){\n            int xmin = INT_MAX;\n            int xmax = 0;\n            int ymin = INT_MAX;\n            int ymax = 0;\n            for(auto i : cid){\n                auto& c = circles[i];\n                xmin = min(xmin, c[0] - c[2]);\n                xmax = max(xmax, c[0] + c[2]);\n                ymin = min(ymin, c[1] - c[2]);\n                ymax = max(ymax, c[1] + c[2]);\n            }\n            if(xmin <= 0 and xmax >= X) return false;\n            if(ymin <= 0 and ymax >= Y) return false;\n            if(xmax >= X and ymax >= Y) return false;\n            if(xmin <= 0 and ymin <= 0) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137761",
    "subm_id": "1335772977"
}