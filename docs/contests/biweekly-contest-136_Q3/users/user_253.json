{
    "username": "trusting-vvunjn",
    "submission": "class Solution {\n  public:\n    int minFlips(vector<vector<int>> &grid) {\n        int m = static_cast<int>(grid.size());\n        int n = static_cast<int>(grid[0].size());\n        int flipCount = 0, c2 = 0, c1 = 0;\n\n        for (int i = 0; i < (m + 1) / 2; ++i) {\n            for (int j = 0; j < (n + 1) / 2; ++j) {\n                vector<pair<int, int>> positions = {{i, j},\n                                                    {i, n - j - 1},\n                                                    {m - i - 1, j},\n                                                    {m - i - 1, n - j - 1}};\n\n                sort(positions.begin(), positions.end());\n                positions.erase(unique(positions.begin(), positions.end()),\n                                positions.end());\n\n                int countOnes = 0;\n                for (auto &pos : positions) {\n                    if (grid[pos.first][pos.second] == 1) {\n                        countOnes++;\n                    }\n                }\n\n                int posSize = static_cast<int>(positions.size());\n                if (posSize == 4) {\n                    flipCount += min(countOnes, posSize - countOnes);\n                } else if (posSize == 2) {\n                    if (countOnes == 1) {\n                        ++c1;\n                        ++flipCount;\n                    } else if (countOnes == 2) {\n                        ++c2;\n                    }\n                } else if (posSize == 1) {\n                    if (countOnes == 1) {\n                        ++flipCount;\n                    }\n                }\n            }\n        }\n        if (c2 % 2 == 1 && c1 == 0) {\n            flipCount += 2;\n        }\n        return flipCount;\n    }\n};\n",
    "submit_ts": "1722697436",
    "subm_id": "552266120"
}