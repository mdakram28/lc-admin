{
    "username": "fight4battle",
    "submission": "class Solution {\npublic:\n\nint  MOD= 1000000007;\nint MAX_INVERSIONS =400;\nint ahahahah(int n, std::vector<std::vector<int>>& requirements){\n std::unordered_map<int, int> reqMap;\n    for (const auto& req : requirements) {\n        reqMap[req[0] + 1] = req[1];\n    }\n\n    std::vector<std::vector<long>> permCounts(n + 1, std::vector<long>(MAX_INVERSIONS + 1, 0));\n    permCounts[0][0] = 1;\n\n    for (int length = 1; length <= n; length++) {\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            for (int newPos = 0; newPos < length; newPos++) {\n                int prevInv = inv - newPos;\n                if (prevInv >= 0) {\n                    permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                }\n            }\n        }\n\n        if (reqMap.find(length) != reqMap.end()) {\n            int targetInv = reqMap[length];\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                if (inv != targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n    }\n\n    long result = 0;\n    for (long count : permCounts[n]) {\n        result = (result + count) % MOD;\n    }\n\n    return (int)result;\n}\n    int jhsj(int n,vector<vector<int>>& requirements){\n        return ahahahah(n,requirements);\n    }\nint numberOfPermutations(int n,vector<vector<int>>& requirements) {\n   return jhsj(n,requirements);\n}\n\n};",
    "submit_ts": 1719070253.0
}