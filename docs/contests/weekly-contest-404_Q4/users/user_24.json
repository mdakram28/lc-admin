{
    "username": "carlostagosaku",
    "submission": "from collections import deque\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def diameter(e):\n            n = len(e)\n            d0 = [-1]*n\n            d0[0]=0\n            v = deque()\n            v.append(0)\n            while v:\n                x = v.popleft()\n                for ix in e[x]:\n                    if d0[ix]!=-1:\n                        continue\n                    d0[ix] = d0[x] + 1\n                    v.append(ix)\n            D = [(d,i) for i,d in enumerate(d0)]\n            D.sort()\n            x0 = D[-1][1]\n            d0 = [-1]*n\n            d0[x0]=0\n            v = deque()\n            v.append(x0)\n            while v:\n                x = v.popleft()\n                for ix in e[x]:\n                    if d0[ix]!=-1:\n                        continue\n                    d0[ix] = d0[x] + 1\n                    v.append(ix)\n            M = max(d0)\n            return M\n        \n        n1 = len(edges1)+1\n        n2 = len(edges2)+1\n        e1 = [[] for _ in range(n1)]\n        e2 = [[] for _ in range(n2)]\n        for a,b in edges1:\n            e1[a].append(b)\n            e1[b].append(a)\n        for a,b in edges2:\n            e2[a].append(b)\n            e2[b].append(a)\n        \n        m1 = diameter(e1)\n        m2 = diameter(e2)\n        return max((m1+1)//2 + (m2+1)//2 + 1,m1,m2)\n                    ",
    "submit_ts": 1719715909.0
}