{
    "username": "scut_dell",
    "submission": "import java.util.TreeMap;\n\nclass Solution {\n\n    int count(int[][] grid, int left, int right, int top, int bottom) {\n        int a1 = Integer.MAX_VALUE, a2 = Integer.MIN_VALUE, b1 = Integer.MAX_VALUE, b2 = Integer.MIN_VALUE;\n\n        for (int i = top; i <= bottom; i++) {\n            for (int j = left;j <= right;j++) {\n                if (grid[i][j] == 1) {\n                    a1 = Math.min(a1, i);\n                    b1 = Math.min(b1, j);\n                    a2 = Math.max(a2, i);\n                    b2 = Math.max(b2, j);\n                }\n            }\n        }\n        int ret = (a2 - a1 + 1) * (b2 - b1 + 1);\n        if (ret == 0) {\n            return 1;\n        } else {\n            return ret;\n        }\n    }\n\n    int split1(int[][] grid, int left, int right, int top, int bottom) {\n        int ret = Integer.MAX_VALUE;\n        // \u6a2a\u5207\n        if (bottom - top >= 1) {\n            for (int i = top;i + 1 <= bottom;i++) {\n                ret = Math.min(ret, count(grid, left, right, top, i) + count(grid, left, right, i + 1, bottom));\n            }\n        }\n        // \u7ad6\u5207\n        if (right - left >= 1) {\n            for (int i = left;i + 1 <= right;i++) {\n                ret = Math.min(ret, count(grid, left, i, top, bottom) + count(grid, i + 1, right, top, bottom));\n            }\n        }\n        return ret;\n    }\n\n    int split2(int[][] grid, int left, int right, int top, int bottom) {\n        int ret = Integer.MAX_VALUE;\n        // \u6a2a\u5207\n        if (bottom - top >= 1) {\n            for (int i = top;i + 1 <= bottom;i++) {\n                int t = split1(grid, left, right, top, i);\n                if (t != Integer.MAX_VALUE) {\n                    ret = Math.min(ret, t + count(grid, left, right, i + 1, bottom));\n                }\n                t = split1(grid, left, right, i + 1, bottom);\n                if (t != Integer.MAX_VALUE) {\n                    ret = Math.min(ret, t + count(grid, left, right, top, i));\n                }\n            }\n        }\n        // \u7ad6\u5207\n        if (right - left >= 1) {\n            for (int i = left;i + 1 <= right;i++) {\n                int t = split1(grid, left, i, top, bottom);\n                if (t != Integer.MAX_VALUE) {\n                    ret = Math.min(ret, t + count(grid, i + 1, right, top, bottom));\n                }\n                t = split1(grid, i + 1, right, top, bottom);\n                if (t != Integer.MAX_VALUE) {\n                    ret = Math.min(ret, t + count(grid, left, i, top, bottom));\n                }\n            }\n        }\n        return ret;\n    }\n\n    public int minimumSum(int[][] grid) {\n        return split2(grid, 0, grid[0].length - 1, 0, grid.length - 1);\n    }\n}",
    "submit_ts": "1719114450",
    "subm_id": "541401925"
}