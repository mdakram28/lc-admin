{
    "username": "davidtonderski",
    "submission": "class Solution:\n    def movesForRegion(self, region: List[int]):\n        \n        # print(region)\n        # region is empty?\n        if not region:\n            return 0\n        \n        region_min = min(region)\n        # region max = min?\n        if max(region) == region_min:\n            return region[0]\n        \n        new_regions = []\n        cur_region = []\n        # first, subtract minimum and remove any 0s\n        for v in region:\n            new_v = v - region_min\n            if new_v == 0:\n                if cur_region:\n                    new_regions.append(cur_region)\n                    cur_region = []\n                continue\n            \n            cur_region.append(new_v)\n        \n        if cur_region:\n            new_regions.append(cur_region)\n        \n        res = sum(self.movesForRegion(new_region) for new_region in new_regions) + region_min  \n        # print(\"returning\", res)\n        return res\n    \n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        # split into positive / negative regions first!\n        regions = []\n        \n        cur_region = []\n        diffs = [t - n for n,t in zip(nums, target)]\n        \n        cur_sign = -1\n        \n        for i, diff in enumerate(diffs):\n            # same sign\n            if cur_sign*diff > 0:\n                cur_region.append(diff)\n                continue\n            \n            elif cur_sign*diff < 0:\n                if cur_region:\n                    regions.append(cur_region)\n                cur_region = [diff]\n                cur_sign = -1 if diff < 0 else 1\n                continue\n            \n            # 0!\n            if cur_region:\n                regions.append(cur_region)\n                cur_region = []\n        \n        if cur_region:\n            regions.append(cur_region)\n            \n        tot = 0\n        # print(regions)\n        for i, region in enumerate(regions):\n            tot += self.movesForRegion([abs(x) for x in region])\n            # print(tot)\n        # print(tot)\n        return tot\n\n# 4 1 3 2\n\n# -4 -2 -3 -> \n    \n# 1 2 -2 2 \n\n# -3 -2 2\n# 5\n\n# -2 -2 2 1 -> -1 -1 2 1 -> 0 0 2 1 -> 0 0 1 0 -> 0 0 0 0\n# 4\n",
    "submit_ts": "1721533635",
    "subm_id": "1328013310"
}