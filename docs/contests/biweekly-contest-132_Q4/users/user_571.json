{
    "username": "sharmamrityunjay110",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size(); \n        \n        vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        int mx = 1; \n        \n        vector<map<int, int>> mp(k + 1);\n        \n        vector<int> v(k + 1, -1); \n        \n        for (int i = 0; i < n; i++) { \n            for (int j = 0; j < k + 1; j++) { \n                for (int p = 0; p < j; p++) { \n                    dp[i][j] = max(dp[i][j], v[p] + 1); \n                } \n                \n                if (mp[j].find(nums[i]) != mp[j].end()) { \n                    dp[i][j] = max(dp[i][j], mp[j][nums[i]]+1); \n                } \n                \n                mx = max(mx, dp[i][j]); \n            } \n            \n            for (int j = 0; j < k + 1; j++) { \n                v[j] = max(v[j], dp[i][j]); \n                mp[j][nums[i]] = max(mp[j][nums[i]], dp[i][j]); \n            } \n        } \n        \n        return mx; \n        \n    }\n};",
    "submit_ts": 1717862193.0
}