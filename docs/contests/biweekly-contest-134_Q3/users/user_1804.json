{
    "username": "kapilchihla",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        vector<int> tempColors;\n    \n    // Append the first (k-1) elements to the end of the array to handle circular nature\n    for (int m = 0; m < k - 1; ++m) {\n        tempColors.push_back(colors[m]);\n    }\n    \n    // Extend the original colors array\n    for (auto color : tempColors) {\n        colors.push_back(color);\n    }\n    \n    int totalColors = colors.size();\n    int left = 0, right = 1;\n    int groupCount = 0;\n    \n    while (right < totalColors) {\n        // Check if the current and previous tiles are different\n        if (colors[right] != colors[right - 1]) {\n            // Check if we have a complete group of k tiles\n            if (right - left + 1 == k) {\n                left++;\n                groupCount++;\n            }\n        } else {\n            // If tiles are not alternating, reset the start of the window\n            left = right;\n        }\n        right++;\n    }\n    \n    return groupCount;\n\n    }\n};",
    "submit_ts": "1720277100",
    "subm_id": "1311647714"
}