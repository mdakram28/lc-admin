{
    "username": "Anand-Bharti",
    "submission": "\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        arr = nums;\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    void update(int index, int value) {\n        arr[index] = value;\n        updateTree(0, 0, n - 1, index);\n        // Update neighbors as their peak status might change\n        if (index > 0) updateTree(0, 0, n - 1, index - 1);\n        if (index < n - 1) updateTree(0, 0, n - 1, index + 1);\n    }\n\n    int query(int li, int ri) {\n        return queryTree(0, 0, n - 1, li, ri);\n    }\n\nprivate:\n    int n;\n    vector<int> arr;\n    vector<int> tree;\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return arr[i] > arr[i - 1] && arr[i] > arr[i + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void updateTree(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateTree(2 * node + 1, start, mid, idx);\n            } else {\n                updateTree(2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int queryTree(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = queryTree(2 * node + 1, start, mid, L, R);\n        int rightQuery = queryTree(2 * node + 2, mid + 1, end, L, R);\n        return leftQuery + rightQuery;\n    }\n};\n\nvector<int> processQueries(vector<int>& nums, vector<vector<int>>& queries) {\n    SegmentTree segTree(nums);\n    vector<int> result;\n\n    for (const auto& query : queries) {\n        if (query[0] == 1) {\n            int li = query[1];\n            int ri = query[2];\n            if (li < ri - 1) {\n                result.push_back(segTree.query(li + 1, ri - 1));\n            } else {\n                result.push_back(0);\n            }\n        } else if (query[0] == 2) {\n            int index = query[1];\n            int val = query[2];\n            segTree.update(index, val);\n        }\n    }\n\n    return result;\n}\n\n\nclass Solution {\npublic:\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        return processQueries(nums,queries);\n    }\n};",
    "submit_ts": "1718507931",
    "subm_id": "1289666757"
}