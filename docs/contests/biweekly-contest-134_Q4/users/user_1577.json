{
    "username": "Now_say_my_name",
    "submission": "\nclass SegmentTree {\nprivate:\n    std::vector<int> tree;\n    std::vector<int> arr;\n    int n;\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] & tree[2 * node + 1];\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int val) {\n        if (start == end) {\n            arr[idx] = val;\n            tree[node] = val;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node, start, mid, idx, val);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx, val);\n            }\n            tree[node] = tree[2 * node] & tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return INT_MAX; // Identity for AND operation\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node, start, mid, L, R);\n        int right_query = query(2 * node + 1, mid + 1, end, L, R);\n        return left_query & right_query;\n    }\n\npublic:\n    SegmentTree(const std::vector<int>& input) {\n        arr = input;\n        n = arr.size();\n        tree.resize(4 * n, 0);\n        build(1, 0, n - 1);\n    }\n\n    void update(int idx, int val) {\n        update(1, 0, n - 1, idx, val);\n    }\n\n    int query(int L, int R) {\n        return query(1, 0, n - 1, L, R);\n    }\n};\n// int main() {\n//     std::vector<int> arr = {1, 3, 5, 7, 9, 11};\n//     SegmentTree segTree(arr);\n\n//     std::cout << \"AND of range (1, 3): \" << segTree.query(1, 3) << std::endl; // Output: 1\n//     segTree.update(1, 6);\n//     std::cout << \"AND of range (1, 3) after update: \" << segTree.query(1, 3) << std::endl; // Output: 4\n\n//     return 0;\n// }\n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        \n        long long ans = 0;\n        \n        for(int i=0; i<n; i++){\n            \n            \n            // B.s to find first index\n            int l = i, r = n-1;\n            int firstInd = -1;\n            \n            while(l<=r){\n                int mid = (l+r)>>1;\n                int res = segTree.query(i, mid);\n\n                \n                if(res > k) l = mid + 1;\n                else if(res < k) r = mid - 1;\n                else {\n                    firstInd = mid;\n                    r = mid - 1;\n                }\n            }\n            \n//             if(firstInd == -1) continue;\n            \n            \n            // B.s to find last index\n            l = i, r = n-1;\n            int lastInd = -1;\n            \n            while(l<=r){\n                int mid = (l+r)>>1;\n                int res = segTree.query(i, mid);\n\n                \n                if(res > k) l = mid + 1;\n                else if(res < k) r = mid - 1;\n                else {\n                    lastInd = mid;\n                    l = mid + 1;\n                }\n            }\n            \n            // cout<<\"i, last, first: \"<< i<<\" \"<<lastInd<<' '<<firstInd<<endl;\n            if(firstInd != -1 && lastInd != -1) \n                ans += (lastInd - firstInd + 1);\n            else if(lastInd != -1) ans += lastInd - i + 1;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720280552",
    "subm_id": "1311793646"
}