{
    "username": "seedjyh",
    "submission": "\nclass OnePos {\npublic:\n    bool has; // \u6709 1\n    int minR;\n    int minC;\n    int maxR;\n    int maxC;\n    int calcArea() const {\n        if (!has) return 0;\n        return (maxC - minC + 1) * (maxR - minR + 1);\n    }\n};\n\nOnePos op[30][30][30][30];\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int R = grid.size();\n        int C = grid[0].size();\n        for (int r1 = R - 1; r1 >= 0; r1--) {\n            for (int c1 = C - 1; c1 >= 0; c1--) {\n                for (int r2 = r1; r2 < R; r2++) {\n                    for (int c2 = c1; c2 < C; c2++) {\n                        bool has = false;\n                        int minR = R;\n                        int minC = C;\n                        int maxR = -1;\n                        int maxC = -1;\n\n                        if (grid[r1][c1]) {\n                            has = true;\n                            minR = maxR = r1;\n                            minC = maxC = c1;\n                        }\n                        if (r2 > r1) { // \u5982\u679c\u6709\u4e0b\u9762\u7684\n                            auto &sideOp = op[r1 + 1][c1][r2][c2];\n                            if (sideOp.has) {\n                                has = true;\n                                minR = min(minR, sideOp.minR);\n                                minC = min(minC, sideOp.minC);\n                                maxR = max(maxR, sideOp.maxR);\n                                maxC = max(maxC, sideOp.maxC);\n                            }\n                        }\n                        if (c2 > c1) { // \u5982\u679c\u6709\u53f3\u8fb9\u7684\n                            auto &sideOp = op[r1][c1 + 1][r2][c2];\n                            if (sideOp.has) {\n                                has = true;\n                                minR = min(minR, sideOp.minR);\n                                minC = min(minC, sideOp.minC);\n                                maxR = max(maxR, sideOp.maxR);\n                                maxC = max(maxC, sideOp.maxC);\n                            }\n                        }\n\n                        op[r1][c1][r2][c2] = {has, minR, minC, maxR, maxC};\n                    }\n                }\n            }\n        }\n\n        auto calcOne = [&](int r1, int c1, int r2, int c2) -> int {\n            return op[r1][c1][r2][c2].calcArea();\n        };\n        auto calcTwo = [&](int r1, int c1, int r2, int c2) -> int {\n            int ret = calcOne(r1, c1, r2, c2);\n            // \u4e0a\u4e0b\u4e24\u6bb5\n            for (int h = r1; h < r2; h++) {\n                ret = min(ret, (calcOne(r1, c1, h, c2) + calcOne(h + 1, c1, r2, c2)));\n            }\n            // \u5de6\u53f3\u4e24\u6bb5\n            for (int w = c1; w < c2; w++) {\n                ret = min(ret, (calcOne(r1, c1, r2, w) + calcOne(r1, w + 1, r2, c2)));\n            }\n            return ret;\n        };\n        auto calcThree = [&](int r1, int c1, int r2, int c2) -> int {\n            int ret = calcOne(r1, c1, r2, c2);\n            // \u4e0a\u4e0b\u4e24\u6bb5\n            for (int h = r1; h < r2; h++) {\n                ret = min(ret, (calcOne(r1, c1, h, c2) + calcTwo(h + 1, c1, r2, c2)));\n                ret = min(ret, (calcTwo(r1, c1, h, c2) + calcOne(h + 1, c1, r2, c2)));\n            }\n            // \u5de6\u53f3\u4e24\u6bb5\n            for (int w = c1; w < c2; w++) {\n                ret = min(ret, (calcOne(r1, c1, r2, w) + calcTwo(r1, w + 1, r2, c2)));\n                ret = min(ret, (calcTwo(r1, c1, r2, w) + calcOne(r1, w + 1, r2, c2)));\n            }\n            return ret;\n        };\n\n        // dump\n//        for (int r1 = 0; r1 < R; r1++) {\n//            for (int c1 = 0; c1 < C; c1++) {\n//                for (int r2 = r1; r2 < R; r2++) {\n//                    for (int c2 = c1; c2 < C; c2++) {\n//                        cout << r1 << \" \" << c1 << \" \" << r2 << \" \" << c2 << \" \" << \" -> \" << calcOne(r1, c1, r2, c2) << endl;\n//                    }\n//                }\n//            }\n//        }\n\n        return calcThree(0, 0, R - 1, C - 1);\n    }\n};\n",
    "submit_ts": 1719114452.0
}