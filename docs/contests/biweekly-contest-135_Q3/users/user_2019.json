{
    "username": "Hemonesh_M",
    "submission": "#include <algorithm>\n#include <climits>\n#include <map>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffToMaxValues;\n        vector<int> allMaxValues;\n\n        int totalSize = nums.size();\n        int halfSize = totalSize / 2;\n\n        for (int i = 0; i < halfSize; ++i) {\n            int left = nums[i];\n            int right = nums[totalSize - i - 1];\n            int difference = abs(left - right);\n            int maxVal = max({left, right, k - left, k - right});\n            diffToMaxValues[difference].push_back(maxVal);\n            allMaxValues.push_back(maxVal);\n        }\n\n        sort(allMaxValues.begin(), allMaxValues.end());\n\n        int minimumChanges = totalSize;\n\n        for (const auto& entry : diffToMaxValues) {\n            int currentDiff = entry.first;\n            int countGreaterOrEqual = lower_bound(allMaxValues.begin(), allMaxValues.end(), currentDiff) - allMaxValues.begin();\n            int changesNeeded = countGreaterOrEqual * 2 + (halfSize - countGreaterOrEqual);\n\n            for (int maxVal : entry.second) {\n                changesNeeded -= (maxVal < currentDiff) ? 2 : 1;\n            }\n\n            minimumChanges = min(minimumChanges, changesNeeded);\n        }\n\n        return minimumChanges;\n    }\n};\n",
    "submit_ts": "1721490353",
    "subm_id": "1327480245"
}