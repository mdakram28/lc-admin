{
    "username": "sasaurabh11",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <chrono>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    #define ll long long\n\n    struct custom_hash {\n        static uint64_t splitmix64(uint64_t x) {\n            x += 0x9e3779b97f4a7c15;\n            x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n            x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n            return x ^ (x >> 31);\n        }\n        size_t operator()(uint64_t x) const {\n            static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n            return splitmix64(x + FIXED_RANDOM);\n        }\n    };\n\n    const int MOD = 1e9 + 7;\n\n    unordered_map<int, int, custom_hash> mp;\n    vector<vector<ll>> dp;\n\n    ll solve(int len, int secval) {\n        if (len == 0 && secval == 0) return 1;\n        if (len == 0) return 0;\n\n        if (dp[len][secval] != -1) \n            return dp[len][secval];\n\n        ll result = 0;\n        int pos = 0;\n        while (pos < len) {\n            int prevsecval = secval - pos;\n            if (prevsecval >= 0) {\n                result = (result + solve(len - 1, prevsecval)) % MOD;\n            }\n            pos++;\n        }\n\n\n        if (mp.count(len)) {\n            int check = mp[len];\n            if (secval != check) {\n                result = 0;\n            }\n        }\n\n        dp[len][secval] = result;\n        return result;\n    }\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        mp.clear();\n        for (auto req : requirements) {\n            int temmp = req[0] + 1;\n            mp[temmp] = req[1];\n        }\n\n        dp.clear();\n        dp.resize(n + 1, vector<ll>(401, -1));\n\n        ll ans = 0;\n        for (int secval = 0; secval <= 400; secval++) {\n            ans = (ans + solve(n, secval)) % MOD;\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": 1719071767.0
}