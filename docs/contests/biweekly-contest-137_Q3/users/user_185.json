{
    "username": "Russ741",
    "submission": "class Solution:\n    def findBest(self, i, rowsUsed, colsUsed, cur) -> int:\n        # print(f\"{i=} {rowsUsed=} {colsUsed=} {cur=} {self.best=}\")\n        need = 3 - len(rowsUsed)\n        if need == 0:\n            self.best = max(self.best, cur)\n            return\n    \n        if i == len(self.toConsider):\n            return\n    \n        nextN = 0\n        for n in self.toConsider[i:i+need]:\n            nextN += n[0]\n        \n        if cur + nextN <= self.best:\n            return\n        \n        val, r, c = self.toConsider[i]\n        \n        # Try with\n        if r not in rowsUsed and c not in colsUsed:\n            rowsUsed.add(r)\n            colsUsed.add(c)\n            self.findBest(i + 1, rowsUsed, colsUsed, cur + val)\n            rowsUsed.remove(r)\n            colsUsed.remove(c)\n        \n        # Try without\n        self.findBest(i + 1, rowsUsed, colsUsed, cur)\n    \n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        rows = len(board)\n        cols = len(board[0])\n        \n        biggestInRow = []\n        for r in range(rows):\n            threeBiggest = []\n            for c in range(cols):\n                threeBiggest.append((board[r][c], r, c))\n                threeBiggest.sort(reverse=True)\n                threeBiggest = threeBiggest[0:3]\n            biggestInRow.append(threeBiggest)\n        \n        biggestInCol = []\n        for c in range(cols):\n            threeBiggest = []\n            for r in range(rows):\n                threeBiggest.append((board[r][c], r, c))\n                threeBiggest.sort(reverse=True)\n                threeBiggest = threeBiggest[0:3]\n            biggestInCol.append(threeBiggest)\n        \n        toConsider = []\n        for r in range(rows):\n            biggest = biggestInRow[r]\n            for val, _, c in biggest:\n                if val >= biggestInCol[c][2][0]:\n                    toConsider.append((val, r, c))\n        toConsider.sort(reverse=True)\n        \n        self.toConsider = toConsider\n        # print(self.toConsider)\n        \n        self.best = - 10 ** 12\n        self.findBest(0, set(), set(), 0)\n        \n        return self.best\n        ",
    "submit_ts": "1723908527",
    "subm_id": "1359156388"
}