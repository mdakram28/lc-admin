{
    "username": "Guardian-or-nothing",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\nusing namespace std;\n\nclass Solution {\npublic:\n    int bfs(vector<vector<int>>& adjList, int s, int dst1, int dst2, int n) {\n        queue<int> q;\n        vector<bool> visited(n + 4, false); q.push(s); visited[s] = true;\n        while (q.size()>0) {\n            int f = q.front(); q.pop();\n            for (int neighbor : adjList[f]) {\n                if (visited[neighbor]==0) {\n                    q.push(neighbor); visited[neighbor] = true;\n                }\n            }\n        }\n        return (visited[dst1] || visited[dst2]);\n    }\n\n    bool canReachCorner(int width, int height, vector<vector<int>>& circles) {\n        int n = circles.size();  vector<vector<int>> adjList(n + 4);\n        for (int i = 0; i < n; ++i) {\n            int x = circles[i][0],y = circles[i][1],r = circles[i][2];\n            if (x <= r) {\n                adjList[n].push_back(i);\n                adjList[i].push_back(n);\n            }\n            if (width - x <= r) {\n                adjList[n + 2].push_back(i);\n                adjList[i].push_back(n + 2);\n            }\n            if (y <= r) {\n                adjList[n + 1].push_back(i);\n                adjList[i].push_back(n + 1);\n            }\n            if (height - y <= r) {\n                adjList[n + 3].push_back(i);\n                adjList[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                int x2 = circles[j][0],y2 = circles[j][1],ro = circles[j][2];\n                double distance = sqrt(pow(x - x2, 2) + pow(y - y2, 2));\n                int tr = r + ro;\n                if (tr >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n\n        int ans=0,ans1=bfs(adjList, n, n + 1, n + 2, n + 4),ans2=bfs(adjList, n + 3, n + 2, n + 1, n + 4);\n        ans=max(ans, ans1); ans=max(ans, ans2); \n        return ans == 0;\n    }\n};\n",
    "submit_ts": "1722139171",
    "subm_id": "1335809945"
}