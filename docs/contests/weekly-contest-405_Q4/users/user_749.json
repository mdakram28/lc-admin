{
    "username": "code_creep",
    "submission": "struct TrieNode\n{\n    unordered_map<char, TrieNode *> children;\n    int cost;\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie\n{\npublic:\n    TrieNode *root;\n    Trie()\n    {\n        root = new TrieNode();\n    }\n\n    void insert(string &word, int cost)\n    {\n        TrieNode *node = root;\n        for (auto c : word)\n        {\n            if (!node->children.count(c))\n            {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        if (node->cost != -1)\n            node->cost = min(node->cost, cost);\n        else\n            node->cost = cost;\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int n = target.size(), m = words.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie t;\n\n        for (int i = 0; i < m; ++i)\n        {\n            t.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i)\n        {\n            if (dp[i] == INT_MAX)\n                continue;\n\n            TrieNode *node = t.root;\n            for (int j = i; j < n; ++j)\n            {\n                if (node->children.find(target[j])==node->children.end())\n                    break;\n                node = node->children[target[j]];\n                if (node->cost != -1)\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n        if (dp[n] == INT_MAX)\n            return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720322807",
    "subm_id": "1312359608"
}