{
    "username": "vikrxnt",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& a, vector<vector<int>>& b) {\n        int c = a.size() + 1;\n        int d = b.size() + 1;\n\n        vector<vector<int>> e(c);\n        vector<vector<int>> f(d);\n\n        int gIndex = 0;\n        while (gIndex < a.size()) {\n            const auto& g = a[gIndex];\n            e[g[0]].push_back(g[1]);\n            e[g[1]].push_back(g[0]);\n            gIndex++;\n        }\n\n        int hIndex = 0;\n        while (hIndex < b.size()) {\n            const auto& h = b[hIndex];\n            f[h[0]].push_back(h[1]);\n            f[h[1]].push_back(h[0]);\n            hIndex++;\n        }\n\n        auto i = [](const vector<vector<int>>& j, int k, int& l) {\n            int m = j.size();\n            vector<int> n(m, -1);\n            function<void(int, int)> o = [&](int p, int q) {\n                n[p] = q;\n                if (q > n[l]) {\n                    l = p;\n                }\n                for (int r : j[p]) {\n                    if (n[r] == -1) {\n                        o(r, q + 1);\n                    }\n                }\n            };\n            l = k;\n            o(k, 0);\n            return n[l];\n        };\n\n        int s = 0;\n        i(e, 0, s);\n        int t = i(e, s, s);\n\n        int u = 0;\n        i(f, 0, u);\n        int v = i(f, u, u);\n\n        int w = max(t, v);\n        int x = (t + 1) / 2;\n        int y = (v + 1) / 2;\n        w = max(w, x + y + 1);\n\n        return w;\n    }\n};\n",
    "submit_ts": "1719719629",
    "subm_id": "1304446666"
}