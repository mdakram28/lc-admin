{
    "username": "monishasaha",
    "submission": "class TrieNode {\n    Map<Character, TrieNode> child;\n    int cost;\n    public TrieNode() {\n        child = new HashMap<>();\n        cost = Integer.MAX_VALUE;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n    public Trie() {\n        root = new TrieNode();\n    }\n    public void getinto(String word, int cost) {\n        TrieNode node = root;\n        for (char charac : word.toCharArray()) {\n            if (!node.child.containsKey(charac)) \n            node.child.put(charac, new TrieNode());\n            node = node.child.get(charac);\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n    public TrieNode getrootelement() {\n        return root;\n    }\n}\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = new Trie();\n        \n        for (int i = 0; i < words.length; ++i) {\n            trie.getinto(words[i], costs[i]);\n        }\n        \n        int[] arr = new int[n + 1];\n        Arrays.fill(arr, Integer.MAX_VALUE);\n        arr[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (arr[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = trie.getrootelement();\n            for (int j = i; j < n; ++j) {\n                char charac = target.charAt(j);\n                if (!node.child.containsKey(charac)) break;\n                node = node.child.get(charac);\n                if (node.cost != Integer.MAX_VALUE) {\n                    arr[j + 1] = Math.min(arr[j + 1], arr[i] + node.cost);\n                }\n            }\n        }\n        \n        return arr[n] == Integer.MAX_VALUE ? -1 : arr[n];\n    }\n}",
    "submit_ts": "1720322921",
    "subm_id": "1312362664"
}