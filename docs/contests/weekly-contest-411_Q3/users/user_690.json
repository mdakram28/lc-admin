{
    "username": "bbbddd",
    "submission": "class Solution {\npublic:\n    string deal_1(int n){\n        return string(n, '9');\n    }\n\n    string deal_2(int n){\n        string ret(n, '9');\n        ret.back() = ret[0] = '8';\n        return ret;\n    }\n\n    string deal_3(int n){\n        return string(n, '9');\n    }\n\n    string deal_4(int n){\n        if(n == 1){\n            return \"8\";\n        }else if(n == 2){\n            return \"88\";\n        }else if(n == 3){\n            return \"888\";\n        }else{\n            string ret(n, '9');\n            ret[0] = ret[1] = '8';\n            ret[n - 1] = ret[n - 2] = '8';\n            return ret;\n        }\n    }\n\n    string deal_5(int n){\n        if(n == 1){\n            return \"5\";\n        }else{\n            string ret(n, '9');\n            ret[0] = ret.back() = '5';\n            return ret;\n        }\n    }\n\n    string deal_6(int n){\n        if(n == 1){\n            return \"6\";\n        }else if(n == 2){\n            return \"66\";\n        }else if(n == 3){\n            return \"888\";\n        }else if(n == 4){\n            return \"8778\";\n        }else if(n == 5){\n            return \"89898\";\n        }else{\n            string ret(n, '9');\n            if(n & 1){\n                ret[0] = ret[n - 1] = '8';\n                ret[n / 2] = '8';\n            }else{\n                ret[0] = ret[n - 1] = '8';\n                int id = n / 2;\n                ret[id - 1] = ret[id] = '7';\n            }\n            return ret;\n        }\n    }\n\n    string deal_7(int n, int k){\n        return f(n, k);\n    }\n\n    string deal_8(int n){\n        if(n == 1){\n            return \"8\";\n        }else if(n == 2){\n            return \"88\";\n        }else if(n == 3){\n            return \"888\";\n        }else if(n == 4){\n            return \"8888\";\n        }else if(n == 5){\n            return \"88888\";\n        }else{\n            string ret(n, '9');\n            ret[0] = ret[1] = ret[2] = '8';\n            ret[n - 1] = ret[n - 2] = ret[n - 3] = '8';\n            return ret;\n        }\n    }\n\n    string deal_9(int n){\n        return string(n, '9');\n    }\n\n    std::string f(int n, int k) {\n        // Generate the largest n-digit palindrome\n        std::string half = std::string(n / 2, '9');\n        std::string palindrome;\n\n        if (n % 2 == 0) {\n            palindrome = half + std::string(half.rbegin(), half.rend());\n        } else {\n            palindrome = half + \"9\" + std::string(half.rbegin(), half.rend());\n        }\n\n        // Function to calculate the remainder of a large number (as a string) divided by k\n        auto mod_by_k = [](const std::string& num, int k) {\n            int remainder = 0;\n            for (char digit : num) {\n                remainder = (remainder * 10 + (digit - '0')) % k;\n            }\n            return remainder;\n        };\n\n        // Decrement the palindrome string until it is divisible by k\n        while (mod_by_k(palindrome, k) != 0) {\n            int len = palindrome.length();\n            int mid = len / 2;\n            bool decremented = false;\n\n            // Try to decrement the palindrome from the middle towards the outside\n            for (int i = mid; i >= 0; --i) {\n                if (palindrome[i] > '0') {\n                    palindrome[i]--;\n                    palindrome[len - i - 1] = palindrome[i];  // Reflect change on the other half\n                    decremented = true;\n                    break;\n                } else {\n                    palindrome[i] = '9';\n                    palindrome[len - i - 1] = '9';\n                }\n            }\n\n            // If no valid decrement was possible, return -1 (all digits became zero)\n            if (!decremented || palindrome[0] == '0') {\n                return \"-1\";\n            }\n        }\n\n        return palindrome;\n    }\n\n    string largestPalindrome(int n, int k) {\n        switch (k) {\n            case 1: return deal_1(n);\n            case 2: return deal_2(n);\n            case 3: return deal_3(n);\n            case 4: return deal_4(n);\n            case 5: return deal_5(n);\n            case 6: return deal_6(n);\n            case 7: return deal_7(n, 7);\n            case 8: return deal_8(n);\n            case 9: return deal_9(n);\n        }\n        return \"-1\";\n    }\n};",
    "submit_ts": "1723952904",
    "subm_id": "556414327"
}