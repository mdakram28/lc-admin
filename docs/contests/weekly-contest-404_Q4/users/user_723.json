{
    "username": "chetan_saini21",
    "submission": "class Solution {\npublic:\n\n    vector<int> bfs(int start, const vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : edges[u]) {\n                if (dist[v] == -1) {\n                    dist[v] = dist[u] + 1;\n                    q.push(v);\n                }\n            }\n        }\n        return dist;\n    }\n\n    pair<int,int> find_midpoint(int u, int v,const vector<vector<int>> &edges) {\n        int n = edges.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(u);\n        dist[u] = 0;\n        int cnt = 0;\n        int len = 0;\n        while (!q.empty()) {\n            int x = q.size();\n            while(x--)\n            {\n                u = q.front();\n                if(u == v) \n                {\n                    len = cnt;\n                }\n                q.pop();\n                for (int v : edges[u]) {\n                    if (dist[v] == -1) {\n                        dist[v] = dist[u] + 1;\n                        q.push(v);\n                    }\n                }\n            }\n            cnt++;\n        }\n        return {(len+1)/2, len};\n    }   \n\n    pair<int,int> solve(const vector<vector<int>>& edges) {\n        vector<int> dist_0 = bfs(0, edges);\n        int v = max_element(dist_0.begin(), dist_0.end()) - dist_0.begin();\n        vector<int> dist_v = bfs(v, edges);\n        int w = max_element(dist_v.begin(), dist_v.end()) - dist_v.begin();\n        vector<int> dist_w = bfs(w, edges);\n        pair<int,int> mid = find_midpoint(v, w, edges);\n        return mid;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size(), m = edges2.size();\n        vector<vector<int>> adj1(n+1);\n        vector<vector<int>> adj2(m+1);\n        for(auto &x : edges1)\n        {\n            adj1[x[0]].push_back(x[1]);\n            adj1[x[1]].push_back(x[0]);\n        }\n        for(auto &x : edges2)\n        {\n            adj2[x[0]].push_back(x[1]);\n            adj2[x[1]].push_back(x[0]);\n        }\n        pair<int,int> ans1 = solve(adj1);\n        pair<int,int> ans2 = solve(adj2);\n        return max({ans1.first + ans2.first + 1, ans1.second, ans2.second});\n    }\n};",
    "submit_ts": "1719719964",
    "subm_id": "1304455317"
}