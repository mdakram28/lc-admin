{
    "username": "Sagnik Biswas",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n    /*\n        Think of digits and powers mod k\n            \n        Say n = 5\n        [a, b, c, b, a]\n        a(10001) + b(1010) + c(100) = 0 mod k\n        \n        A number with all k's works\n        \n        if k = 1, then 999....\n        if k = 2, then 8999..8\n        if k = 3, then 999....\n        if k = 4, end with 88..999..88\n        if k = 5, end with 5...999...5\n        if k = 6, 8 ........ 8 inside is maximal number that is 2 mod 3 (just need another 8)\n            if n = 1, then \n        \n        if k = 7, \n        if k = 8, go 888...999...888\n        if k = 9, end with 99999999999\n    */   \n        \n        \n        \n        \n        char[] digits = new char[n];\n        \n        if (k == 1 || k == 3 || k == 9) {\n            for (int i = 0; i < n; i++) {\n                digits[i] = '9';\n            }\n        } else if (k == 2) {\n            digits[0] = '8';\n            digits[n-1] = '8';\n            for (int i = 1; i <= n-2; i++) {\n                digits[i] = '9';\n            }\n        } else if (k == 4) {\n            digits[0] = '8';\n            digits[n-1] = '8';\n            if (n > 2) {\n                digits[1] = '8';\n                digits[n-2] = '8';\n                \n                for (int i = 2; i <= n-3; i++) {\n                    digits[i] = '9';\n                }\n            }\n        } else if (k == 8) {\n            digits[0] = '8';\n            digits[n-1] = '8';\n            if (n > 2) {\n                digits[1] = '8';\n                digits[n-2] = '8';\n                \n                if (n > 4) {\n                    digits[2] = '8';\n                    digits[n-3] = '8';\n                    \n                    \n                    for (int i = 3; i <= n-4; i++) {\n                        digits[i] = '9';\n                    }\n                    \n                }\n            }\n        } else if (k == 5) {\n            digits[0] = '5';\n            digits[n-1] = '5';\n            for (int i = 1; i <= n-2; i++) {\n                digits[i] = '9';\n            }\n        } else if (k == 6) {\n            if (n == 1) {\n                digits[0] = '6';\n            } else if (n == 2) {\n                digits[0] = '6';\n                digits[1] = '6';\n            } else if (n == 3) {\n                digits[0] = '8';\n                digits[1] = '8';\n                digits[2] = '8';\n            } else if (n == 4) {\n                digits[0] = '8';\n                digits[1] = '7';\n                digits[2] = '7';\n                digits[3] = '8';\n            } else if (n == 5) {\n                digits[0] = '8';\n                digits[4] = '8';\n                digits[1] = '9';\n                digits[3] = '9';\n                digits[2] = '8';\n            } else if (n == 6) {\n                digits[0] = '8';\n                digits[1] = '9';\n                digits[2] = '7';\n                digits[3] = '7';\n                digits[4] = '9';\n                digits[5] = '8';\n            } else {\n                if (n % 2 == 0) {\n                    digits[0] = '8';\n                    for (int i = 1; i <= n/2 - 2; i++) {\n                        digits[i] = '9';\n                    }\n                    digits[n/2-1] = '7';\n                    \n                    for (int i = 0; i < n/2; i++) {\n                        digits[n-1-i] = digits[i];\n                    }\n                } else {\n                    digits[0] = '8';\n                    digits[(n-1)/2] = '8';\n                    for (int i = 1; i <= (n-3)/2; i++) {\n                        digits[i] = '9';\n                    }\n                    \n                    for (int i = 0; i <= (n-1)/2; i++) {\n                        digits[n-1-i] = digits[i];\n                    }\n                }\n            }     \n            \n            \n            \n        } else if (k == 7) {\n            \n            if (n == 1) {\n                return \"7\";\n            } else if (n == 2) {\n                return \"77\";\n            } else if (n == 3) {\n                return \"959\";\n            } else if (n == 4) {\n                return \"9779\";\n            }\n            \n            int[] powers = new int[n];\n            powers[0] = 1;\n            for (int i = 1; i < n; i++) {\n                powers[i] = 10*powers[i-1];\n                powers[i] %= k;\n            }\n            \n            if (n % 2 == 0) {\n                // the middle two digits\n                int mod = 0;\n                for (int i = 0; i <= n/2-2; i++) {\n                    digits[i] = '9';\n                    digits[n-1-i] = '9';\n                    mod += 9 * powers[i] + 9 * powers[(n-1)-i];\n                    mod %= k;\n                }\n                for (int d = 1; d < 10; d++) {\n                    if ((mod + d * powers[(n-1) - (n/2 - 1)] + d * powers[(n-1) - (n/2)]) % k == 0) {\n                        digits[n/2-1] = (\"\"+d).charAt(0);\n                        digits[n/2] = (\"\"+d).charAt(0);\n                    }\n                }\n            } else {\n                int mod = 0;\n                for (int i = 0; i <= (n-1)/2-1; i++) {\n                    digits[i] = '9';\n                    digits[n-1-i] = '9';\n                    mod += 9 * powers[i] + 9 * powers[(n-1)-i];\n                    mod %= k;\n                }\n                for (int d = 1; d < 10; d++) {\n                    if ((mod + d*powers[(n-1)/2]) % k == 0) {\n                        digits[(n-1)/2] = (\"\"+d).charAt(0);\n                    }\n                }\n            }\n            \n        }\n        \n        \n        StringBuilder answer = new StringBuilder(\"\");\n        \n        for (int i = 0; i < n; i++) {\n            answer.append(digits[i]);\n        }\n        \n        return answer.toString();\n    }\n}",
    "submit_ts": "1723951575",
    "subm_id": "1359774880"
}