{
    "username": "Sachin20012002",
    "submission": "# class Solution:\n#     def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n\n        \nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n\n    def build(self, nums, start, end, node):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(nums, start) else 0\n            return self.tree[node]\n        \n        mid = (start + end) // 2\n        left_child = self.build(nums, start, mid, 2 * node + 1)\n        right_child = self.build(nums, mid + 1, end, 2 * node + 2)\n        \n        self.tree[node] = left_child + right_child\n        return self.tree[node]\n\n    def update(self, nums, start, end, idx, node):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(nums, start) else 0\n            return self.tree[node]\n        \n        mid = (start + end) // 2\n        if idx <= mid:\n            self.update(nums, start, mid, idx, 2 * node + 1)\n        else:\n            self.update(nums, mid + 1, end, idx, 2 * node + 2)\n        \n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n        return self.tree[node]\n\n    def query(self, start, end, l, r, node):\n        if r < start or l > end:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        \n        mid = (start + end) // 2\n        left_child = self.query(start, mid, l, r, 2 * node + 1)\n        right_child = self.query(mid + 1, end, l, r, 2 * node + 2)\n        \n        return left_child + right_child\n\n    def is_peak(self, nums, i):\n        if i == 0 or i == len(nums) - 1:\n            return False\n        return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        seg_tree = SegmentTree(n)\n        seg_tree.build(nums, 0, n - 1, 0)\n        \n        res = []\n        for q in queries:\n            if q[0] == 1:\n                l, r = q[1], q[2]\n                if l == r or l == r - 1:\n                    res.append(0)\n                else:\n                    res.append(seg_tree.query(0, n - 1, l + 1, r - 1, 0))\n            elif q[0] == 2:\n                idx, val = q[1], q[2]\n                nums[idx] = val\n                for i in range(max(0, idx - 2), min(n, idx + 3)):\n                    seg_tree.update(nums, 0, n - 1, i, 0)\n        \n        return res",
    "submit_ts": 1718506459.0
}