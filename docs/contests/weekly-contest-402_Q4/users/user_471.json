{
    "username": "icherniukh",
    "submission": "class Solution:\n    n: int\n    tree: list\n    peaks: list\n\n    def update(self, index: int, diff: int) -> None:\n        self.peaks[index] += diff\n        while index < self.n:\n            self.tree[index] += diff\n            index = index | (index + 1)\n\n    def sum(self, right):\n        ans = 0\n        while right >= 0:\n            ans += self.tree[right]\n            right = (right & (right + 1)) - 1\n        return ans\n\n    def sumRange(self, left: int, right: int) -> int:\n        if left > right:\n            return 0\n        return self.sum(right) - self.sum(left - 1)\n    \n    def recheck(self, a, i):\n        if i <= 0 or i >= self.n - 1:\n            return\n        curpeak = 1 if (a[i] > a[i - 1] and a[i] > a[i + 1]) else 0\n        oldpeak = self.peaks[i]\n        diff = curpeak - oldpeak\n        if diff != 0:\n            self.update(i, diff)\n\n    def countOfPeaks(self, a: List[int], queries: List[List[int]]) -> List[int]:\n        self.n = len(a)\n        self.tree = [0] * self.n\n        self.peaks = [0] * self.n\n        \n        for i in range(1, self.n - 1):\n            if a[i] > a[i-1] and a[i] > a[i+1]:\n                self.update(i, 1)\n        \n        ans = []\n        for qtype, q1, q2 in queries:\n            if qtype == 1:\n                val = self.sumRange(q1 + 1, q2 - 1)\n                ans.append(val)\n            else:\n                i = q1\n                a[i] = q2\n                \n                self.recheck(a, i - 1)\n                self.recheck(a, i)\n                self.recheck(a, i + 1)\n        \n        return ans",
    "submit_ts": 1718507639.0
}