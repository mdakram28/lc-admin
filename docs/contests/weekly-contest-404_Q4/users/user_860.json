{
    "username": "kumud22",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& tree) {\n        int n = tree.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n\n        dist[start] = 0;\n        q.push(start);\n\n        int farthest = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int nei : tree[node]) {\n                if (dist[nei] == -1) {\n                    dist[nei] = dist[node] + 1;\n                    q.push(nei);\n\n                    if (dist[nei] > maxDist) {\n                        maxDist = dist[nei];\n                        farthest = nei;\n                    }\n                }\n            }\n        }\n\n        return {farthest, maxDist};\n    }\n\n    bool dfs(int cur, int end, vector<int>& path, vector<bool>& vis, const vector<vector<int>>& tree) {\n        vis[cur] = true;\n        path.push_back(cur);\n\n        if (cur == end) {\n            return true;\n        }\n\n        for (int nei : tree[cur]) {\n            if (!vis[nei]) {\n                if (dfs(nei, end, path, vis, tree)) {\n                    return true;\n                }\n            }\n        }\n\n        path.pop_back();\n        return false;\n    }\n\n    int findCenter(const vector<vector<int>>& tree) {\n        int n = tree.size();\n        pair<int, int> p1 = bfs(0, tree);\n        pair<int, int> p2 = bfs(p1.first, tree);\n\n        vector<int> path;\n        vector<bool> vis(n, false);\n        dfs(p1.first, p2.first, path, vis, tree);\n\n        int pathLen = path.size();\n        if (pathLen % 2 == 0) {\n            return path[pathLen / 2 - 1];\n        } else {\n            return path[pathLen / 2];\n        }\n    }\n\n    int diameter(const vector<vector<int>>& tree) {\n        pair<int, int> p1 = bfs(0, tree);\n        pair<int, int> p2 = bfs(p1.first, tree);\n        return p2.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n\n        vector<vector<int>> t1(n1);\n        vector<vector<int>> t2(n2);\n\n        for (const auto& e : edges1) {\n            t1[e[0]].push_back(e[1]);\n            t1[e[1]].push_back(e[0]);\n        }\n\n        for (const auto& e : edges2) {\n            t2[e[0]].push_back(e[1]);\n            t2[e[1]].push_back(e[0]);\n        }\n\n        int c1 = findCenter(t1);\n        int c2 = findCenter(t2);\n\n        vector<vector<int>> newTree(n1 + n2);\n        for (int i = 0; i < n1; ++i) {\n            newTree[i] = t1[i];\n        }\n        for (int i = 0; i < n2; ++i) {\n            for (int j : t2[i]) {\n                newTree[i + n1].push_back(j + n1);\n            }\n        }\n\n        newTree[c1].push_back(c2 + n1);\n        newTree[c2 + n1].push_back(c1);\n\n        return diameter(newTree);\n    }\n};\n",
    "submit_ts": 1719719874.0
}