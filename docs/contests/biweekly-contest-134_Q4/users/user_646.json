{
    "username": "SimpleSheep03",
    "submission": "class Solution {\npublic:\n    int combine(int a  , int b){\n    return (a & b);\n}\nint construct(vector<int> & segTree, vector<int> &v, int si, int left, int right){\n    if(left==right){\n        segTree[si]=v[left]; return segTree[si];\n    }\n    int mid=(left+right)/2;\n    segTree[si]=combine(construct(segTree,v,2*si+1,left, mid), construct(segTree,v,2*si+2,mid+1,right));\n    return segTree[si];\n}\nint query(vector<int> & segTree,int si, int ssi, int se, int qs, int qe){\n    if(qs<=ssi && qe>=se) return segTree[si];\n    if(qe<ssi || qs>se) return ((1ll << 32) - 1);\n    int mid=(ssi+se)/2;\n    return combine(query(segTree,2*si+1,ssi,mid,qs,qe) , query(segTree,2*si+2,mid+1,se,qs,qe));\n}\n    long long countSubarrays(vector<int>& v, int k) {\n        int n = v.size();\n        vector<int> segTree(4 * n);\n        long long ans = 0;\n        construct(segTree , v , 0 , 0 , n - 1);\n        for(int i = 0 ; i < n ; i ++){\n            int first , last;\n            {\n                int start = i , end = n - 1 , ans = -1 , mid;\n                while(start <= end){\n                    mid = end - (end - start) / 2;\n                    int num = query(segTree , 0 , 0 , n - 1 , i , mid);\n                    if(num <= k){\n                        if(num == k){\n                            ans = mid;\n                        }\n                        end = mid - 1;\n                    }\n                    else{\n                        start = mid + 1;\n                    }\n                }\n                if(ans == -1){\n                    continue;\n                }\n                first = ans;\n            }\n            {\n                int start = i , end = n - 1 , ans = -1 , mid;\n                while(start <= end){\n                    mid = end - (end - start) / 2;\n                    int num = query(segTree , 0 , 0 , n - 1 , i , mid);\n                    if(num >= k){\n                        if(num == k){\n                            ans = mid;\n                        }\n                        start = mid + 1;\n                    }\n                    else{\n                        end = mid - 1;\n                    }\n                }\n                last = ans;\n            }\n            ans += last - first + 1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279356",
    "subm_id": "1311747906"
}