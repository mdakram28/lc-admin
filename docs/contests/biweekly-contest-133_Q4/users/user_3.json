{
    "username": "youtube_aryanc403",
    "submission": "/*\n  Compete against Yourself.\n  Author - Aryan (@aryanc403)\n*/\n/*\n  Credits -\n  Atcoder library - https://atcoder.github.io/ac-library/production/document_en/ (namespace atcoder)\n  Github source code of library - https://github.com/atcoder/ac-library/tree/master/atcoder\n  https://codeforces.com/contest/4/submission/150120627\n*/\n\n#ifdef ARYANC403\n    #include <header.h>\n#else\n    #pragma GCC optimize (\"Ofast\")\n    #pragma GCC target (\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\n    #pragma GCC optimize (\"-ffloat-store\")\n    #include <bits/stdc++.h>\n    #include <ext/pb_ds/assoc_container.hpp>\n    #include <ext/pb_ds/tree_policy.hpp>\n    #define dbg(args...) 42;\n    #define endl \"\\n\"\n#endif\n\n// y_combinator from @neal template https://codeforces.com/contest/1553/submission/123849801\n// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html\ntemplate<class Fun> class y_combinator_result {\n    Fun fun_;\npublic:\n    template<class T> explicit y_combinator_result(T &&fun): fun_(std::forward<T>(fun)) {}\n    template<class ...Args> decltype(auto) operator()(Args &&...args) { return fun_(std::ref(*this), std::forward<Args>(args)...); }\n};\ntemplate<class Fun> decltype(auto) y_combinator(Fun &&fun) { return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun)); }\n\nusing namespace std;\n#define fo(i,n)   for(i=0;i<(n);++i)\n#define repA(i,j,n)   for(i=(j);i<=(n);++i)\n#define repD(i,j,n)   for(i=(j);i>=(n);--i)\n#define all(x) begin(x), end(x)\n#define sz(x) ((lli)(x).size())\n#define eb emplace_back\n#define X first\n#define Y second\n\nusing lli = long long int;\nusing mytype = long double;\nusing ii = pair<lli,lli>;\nusing vii = vector<ii>;\nusing vi = vector<lli>;\n\ntemplate <class T>\nusing ordered_set =  __gnu_pbds::tree<T,__gnu_pbds::null_type,less<T>,__gnu_pbds::rb_tree_tag,__gnu_pbds::tree_order_statistics_node_update>;\n// X.find_by_order(k) return kth element. 0 indexed.\n// X.order_of_key(k) returns count of elements strictly less than k.\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vi req(n+1,-1);\n        const lli mod = 1000000000LL+7;\n        for(const auto &v:requirements)\n            req[v[0]+1]=v[1];\n        const lli mx = req[n]+1;\n        vi dp(mx);\n        dp[0]=1;\n        for(lli i=1;i<=n;i++){\n            const lli fi = i-1;\n            vi cur(mx);\n            for(lli ci=0;ci<=fi;ci++)\n                for(lli pi=0;pi+ci<mx;pi++){\n                    cur[pi+ci]+=dp[pi];\n                    if(cur[pi+ci]>=mod)\n                        cur[pi+ci]-=mod;\n                }\n            dp=cur;\n            if(req[i]==-1)\n                continue;\n            for(lli j=0;j<mx;j++){\n                if(req[i]!=j)\n                    dp[j]=0;\n            }\n        }\n        return dp[mx-1];\n    }\n};\n\n#ifdef LOCAL\nint main()\n{\n    Solution s;\n    // cout<<\"Ans:\"<<s.runSoln(20)<<\":Fn\"<<endl;\n    // cout<<\"Ans:\"<<s.runSoln(100)<<\":Fn\"<<endl;\n    // cout<<\"Ans:\"<<s.runSoln(1000)<<\":Fn\"<<endl;\n    return 0;\n}\n#endif\n",
    "submit_ts": 1719067060.0
}