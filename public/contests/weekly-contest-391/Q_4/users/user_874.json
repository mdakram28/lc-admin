{
    "username": "virenkathiriya",
    "submission": "class Solution {\npublic:\n    long long f(vector<vector<int>>& points, int skip, int N) {\n        long long minsum, maxsum, mindiff, maxdiff;\n\n        if (skip != 0) {\n            minsum = maxsum = points[0][0] * 1LL + points[0][1];\n            mindiff = maxdiff = points[0][0] - points[0][1];\n        } else {\n            minsum = maxsum = points[1][0] * 1LL  + points[1][1];\n            mindiff = maxdiff = points[1][0] * 1LL  - points[1][1];\n        }\n        for (int i = (skip == 0 ? 2: 1); i < N; i++) {\n            if (i == skip) continue;\n            int sum = points[i][0] * 1LL  + points[i][1];\n            int diff = points[i][0] * 1LL - points[i][1];\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n        }\n\n        return max(maxsum - minsum, maxdiff - mindiff);\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        long long n = points.size();\n        vector<vector<long long>> diff(n), sum(n);\n        for (int i = 0; i < n; i++) {\n            sum[i] = {points[i][0] + points[i][1], i};\n            diff[i] = {points[i][0] - points[i][1], i};\n        }\n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        \n        int sumMax = sum[n - 1][0] - sum[0][0];\n        int diffMax = diff[n - 1][0] - diff[0][0];\n        \n        vector<long long> candidates;\n        if (sumMax > diffMax) {\n            candidates = {sum[n - 1][1], sum[0][1]};\n        } else {\n            candidates = {diff[n - 1][1], diff[0][1]};\n        }\n        long long ans = 1e15;\n        ans = min(f(points, candidates[0], n), ans);\n        ans = min(f(points, candidates[1], n), ans);\n        return ans;\n    }\n};"
}