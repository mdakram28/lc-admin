{
    "username": "robins_aryan",
    "submission": "class TrieNode {\npublic:\n    TrieNode* children[26] = {nullptr};\n    int minCost = INT_MAX;\n};\n\nint a = []()->int{\n    ios_base::sync_with_stdio(false);\n    cin.tie(NULL);\n    return 0;\n}();\n\nclass Solution {\npublic:\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int idx = c - 'a';\n            if (!node->children[idx]) {\n                node->children[idx] = new TrieNode();\n            }\n            node = node->children[idx];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n\n    // vector<pair<int,int>> search(TrieNode* root, const string& target, int start) {\n    //     TrieNode* node = root;\n    //     vector<pair<int,int>>rva;\n    //     for (int i = start; i < target.size(); ++i) {\n    //         int idx = target[i] - 'a';\n    //         if (!node->children[idx]) break;\n    //         node = node->children[idx];\n    //         if (node->minCost != INT_MAX) {\n    //             rva.push_back({i - start + 1, node->minCost});\n    //         }\n    //     }\n    //     return rva;\n    // }\n\n    int minimumCost(string&target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        TrieNode* root = new TrieNode();\n\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], costs[i]);\n        }\n        costs = {};\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int ii = i; ii < target.size(); ++ii) {\n                int idx = target[ii] - 'a';\n                if (!node->children[idx]) break;\n                node = node->children[idx];\n                if (node->minCost != INT_MAX) {\n                    // rva.push_back({ii - start + 1, node->minCost});\n                    dp[i + (ii - i + 1)] = min(dp[i + (ii - i + 1)], dp[i] + node->minCost);\n                }\n            } \n            // for (auto &[len, cost] : search(root, target, i)) {\n            //     dp[i + len] = min(dp[i + len], dp[i] + cost);\n            // }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323493",
    "subm_id": "1312376929"
}