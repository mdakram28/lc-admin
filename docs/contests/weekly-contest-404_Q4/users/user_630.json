{
    "username": "empty2593",
    "submission": "class Solution {\npublic:\n    \n    pair<int,int> bfs(vector<vector<int>>&adj, int s) {\n            int n = adj.size();\n            queue<int>q;\n            vector<int> dis(n,-1);\n            q.push(s);\n            dis[s]=0;\n            int res1=s;\n            int mx=0;\n            while(!q.empty()){\n                int nd=q.front();q.pop();\n                for (int nb:adj[nd]){\n                    if(dis[nb]==-1){\n                        q.push(nb);\n                        dis[nb]=dis[nd]+1;\n                        if(dis[nb]>mx){\n                            mx=dis[nb];res1=nb;\n                        }\n                    }\n                }\n            }\n            return {res1,mx};\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1;\n        int m=edges2.size()+1;\n        vector<vector<int>>adj1(n),adj2(m);\n        for (auto &edge:edges1){\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (auto &edge:edges2){\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        auto [a, b]= bfs(adj1, 0);\n        auto [e, f]= bfs(adj1, a);\n        auto [c, d]= bfs(adj2, 0);\n        auto [g, h]= bfs(adj2, c);\n        int p1 = (f+1)/2 + (h+1)/2 + 1;\n        //cout<<f<<\" \"<<h<<endl;\n        return max({f,h,p1});\n    }\n};",
    "submit_ts": 1719718754.0
}