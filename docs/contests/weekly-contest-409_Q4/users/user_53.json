{
    "username": "dirigibility",
    "submission": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], queries: List[List[int]]) -> List[int]:\n        blocks = []\n        block_sizes = Counter()\n        def add(k,i,j):\n            blocks.insert(k,(i,j))\n            block_sizes[j-i+1] += 1\n        def remove(k):\n            i,j = blocks.pop(k)\n            d = j-i+1\n            if block_sizes[d] == 1:\n                del block_sizes[d]\n            else:\n                block_sizes[d] -= 1\n        n = len(colors)\n        i = 0\n        for j in range(1,n):\n            if colors[j] == colors[j-1]:\n                add(len(blocks),i,j-1)\n                i = j\n        add(len(blocks),i,n-1)\n        result = []\n        for q in queries:\n            if q[0] == 1:\n                size = q[1]\n                count = 0\n                for s,c in block_sizes.items():\n                    if s >= size:\n                        count += c*(s-size+1)\n                if colors[0] != colors[-1]:\n                    if len(blocks) == 1:\n                        count += size-1\n                    else:\n                        a = blocks[0][1]-blocks[0][0]+1\n                        b = blocks[-1][1]-blocks[-1][0]+1\n                        if a+b >= size:\n                            count += min(a+b-size+1,a,b,size-1)\n                result.append(count)\n            else:\n                _,i,c = q\n                if c != colors[i]:\n                    colors[i] = c\n                    k = bisect_right(blocks,(i,n))-1\n                    if blocks[k][0] < i < blocks[k][1]:\n                        l,r = blocks[k]\n                        remove(k)\n                        add(k,i+1,r)\n                        add(k,i,i)\n                        add(k,l,i-1)\n                    elif blocks[k][0] == blocks[k][1]:\n                        if k+1 < len(blocks):\n                            r = blocks[k+1][1]\n                            remove(k+1)\n                        else:\n                            r = i\n                        remove(k)\n                        if k:\n                            l = blocks[k-1][0]\n                            remove(k-1)\n                            k -= 1\n                        else:\n                            l = i\n                        add(k,l,r)\n                    elif blocks[k][0] == i:\n                        r = blocks[k][1]\n                        remove(k)\n                        add(k,i+1,r)\n                        if k:\n                            l = blocks[k-1][0]\n                            remove(k-1)\n                            k -= 1\n                        else:\n                            l = i\n                        add(k,l,i)\n                    else:\n                        l = blocks[k][0]\n                        remove(k)\n                        add(k,l,i-1)\n                        if k+1 < len(blocks):\n                            r = blocks[k+1][1]\n                            remove(k+1)\n                        else:\n                            r = i\n                        add(k+1,i,r)\n        return result",
    "submit_ts": "1722743874",
    "subm_id": "1343801635"
}