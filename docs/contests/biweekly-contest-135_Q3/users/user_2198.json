{
    "username": "21R01A05F2",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n Map<Integer, List<Integer>> m = new HashMap<>();\n        List<Integer> v = new ArrayList<>();\n        \n        for (int i = 0; i < nums.length / 2; i++) {\n            int a = nums[i], b = nums[nums.length - i - 1];\n            int diff = Math.abs(a - b);\n            int X = Math.max(Math.max(a, b), Math.max(k - a, k - b));\n            m.computeIfAbsent(diff, key -> new ArrayList<>()).add(X);\n            v.add(X);\n        }\n        \n        int ans = nums.length;\n        Collections.sort(v);\n        \n        for (Map.Entry<Integer, List<Integer>> entry : m.entrySet()) {\n            int diff = entry.getKey();\n            int T = lowerBound(v, diff);\n            T = T * 2 + (nums.length / 2 - T);\n            \n            for (int X : entry.getValue()) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, T);\n        }\n        \n        return ans;\n    }\n    \n    private int lowerBound(List<Integer> v, int key) {\n        int low = 0, high = v.size();\n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (v.get(mid) < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        return low;\n    }\n}",
    "submit_ts": "1721490522",
    "subm_id": "1327485039"
}