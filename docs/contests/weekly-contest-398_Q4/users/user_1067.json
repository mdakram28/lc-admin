{
    "username": "dk619",
    "submission": "class Solution {\npublic:\n    \n    unordered_map <long long, unordered_map <long long, unordered_map <long long, int> > > mp; \n    \n    long long countSteps(long long n, long long prevStep, const long long int target, long long jumpCount)\n    {\n        if(n > target+1)\n            return 0;\n        \n        if(mp.find(n) != mp.end() && mp[n].find(prevStep) != mp[n].end() && mp[n][prevStep].find(jumpCount) != mp[n][prevStep].end())\n        {\n            return mp[n][prevStep][jumpCount];\n        }\n        \n        long long totalSteps = 0;\n        if(n == target)\n            totalSteps++;\n        \n        if(prevStep != -1 && n != 0)\n        {\n            totalSteps += (countSteps(n-1, -1, target, jumpCount));\n        }\n        \n        // cout << jumpCount << endl;\n        long long jumpValue = pow(2, jumpCount);\n        totalSteps += (countSteps(n + jumpValue, jumpValue, target, jumpCount+1));\n        mp[n][prevStep][jumpCount] = totalSteps;\n        return totalSteps;\n    }\n    \n    \n    int waysToReachStair(int k) {\n        long long int count = 0;\n        \n        long long int start = 1;\n        long long int target = k;\n        \n        return countSteps(start, 0, target, 0);\n    }\n};",
    "submit_ts": 1716089574.0
}