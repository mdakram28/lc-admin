{
    "username": "di-gui-de-jiong",
    "submission": "\ntype SegmentTree struct {\n\tsum  []int // \u4e0b\u6807\u4ece1\u5f00\u59cb\n\tnums []int // \u4e0b\u6807\u4ece0\u5f00\u59cb\n}\n\nfunc (s *SegmentTree) build(o, l, r int) {\n\tif l == r {\n\t\ts.sum[o] = s.nums[l-1]\n\t\treturn\n\t}\n\n\tmid := (l + r) >> 1\n\ts.build(o<<1, l, mid)\n\ts.build((o<<1)|1, mid+1, r)\n\ts.sum[o] = s.sum[o<<1] & s.sum[(o<<1)|1]\n}\n\nfunc (s *SegmentTree) update(o, l, r, idx, val int) {\n\tif l == r {\n\t\ts.sum[o] = val\n\t\treturn\n\t}\n\tmid := (l + r) >> 1\n\tif idx <= mid {\n\t\ts.update(o<<1, l, mid, idx, val)\n\t} else {\n\t\ts.update((o<<1)|1, mid+1, r, idx, val)\n\t}\n\ts.sum[o] = s.sum[o<<1] & s.sum[(o<<1)|1]\n}\n\nfunc (s *SegmentTree) query(o, l, r, L, R int) int {\n\tif L <= l && R >= r {\n\t\treturn s.sum[o]\n\t}\n\tmid := (l + r) >> 1\n\n\tif R <= mid {\n\t\treturn s.query(o<<1, l, mid, L, R)\n\t}\n\n\tif L > mid {\n\t\treturn s.query((o<<1)|1, mid+1, r, L, R)\n\t}\n\n\treturn s.query(o<<1, l, mid, L, R) & s.query((o<<1)|1, mid+1, r, L, R)\n}\n\nfunc bit_length(x int) int {\n\tsize := 0\n\tfor x > 0 {\n\t\tx >>= 1\n\t\tsize += 1\n\t}\n\treturn size\n}\nfunc Constructor(nums []int) SegmentTree {\n\ttree := SegmentTree{\n\t\tsum:  make([]int, 2<<bit_length(len(nums))),\n\t\tnums: nums,\n\t}\n\ttree.build(1, 1, len(nums))\n\treturn tree\n}\n\nfunc (s *SegmentTree) Update(index int, val int) {\n\ts.update(1, 1, len(s.nums), index+1, val)\n}\n\nfunc (s *SegmentTree) SumRange(left int, right int) int {\n\treturn s.query(1, 1, len(s.nums), left+1, right+1)\n}\nfunc countSubarrays(nums []int, k int) int64 {\n\t// \u53cc\u6307\u9488\n\ttarget := make([]int, 32)\n\tfor i := 0; i < 32; i++ {\n\t\tif k&(1<<i) != 0 {\n\t\t\ttarget[i] = 1\n\t\t}\n\t}\n\n\t// \u628a\u6240\u6709\u6ee1\u8db3\u6761\u4ef6\u7684\uff0c\u5168\u90e8\u5f04\u51fa\u6765\n\tarr := [][]int{}\n\n\tfor i, x := range nums {\n\t\tflag := true\n\t\tfor j := 0; j < 32; j++ {\n\t\t\tif x&(1<<j) == 0 && target[j] == 1 {\n\t\t\t\tflag = false\n\t\t\t}\n\t\t}\n\t\tif flag {\n\t\t\tif len(arr) > 0 && i-1 == arr[len(arr)-1][len(arr[len(arr)-1])-1] {\n\t\t\t\tarr[len(arr)-1] = append(arr[len(arr)-1], i)\n\t\t\t} else {\n\t\t\t\tarr = append(arr, []int{i})\n\t\t\t}\n\t\t}\n\t}\n\n\tn := len(nums)\n\ttree := Constructor(nums)\n\ttree.build(1, 1, n)\n\tres := 0\n\tfor _, a := range arr {\n\t\tfor i := range a {\n\t\t\tl, r := i, len(a)-1 \n\t\t\tfor l < r {\n\t\t\t\tmid := (l+r)>>1\n\t\t\t\tif tree.SumRange(a[i], a[mid]) == k {\n\t\t\t\t\tr = mid \n\t\t\t\t} else {\n\t\t\t\t\tl = mid + 1\n\t\t\t\t}\n\t\t\t}\n\t\t\tif tree.SumRange(a[i], a[l]) == k {\n\t\t\t\tres += len(a) - l \n\t\t\t}\n\t\t}\n\t}\n\n\treturn int64(res) \n\n}\n",
    "submit_ts": "1720280303",
    "subm_id": "544571392"
}