{
    "username": "JAS05",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int maxx = 400 , mod = 1e9 + 7;\n\n    unordered_map<int, int> m;\n        for (const auto& req : requirements) {\n            m[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> perms(n + 1, vector<long>(maxx+1, 0));\n        perms[0][0] = 1;\n\n        for (int l = 1; l <= n; ++l) {\n            for (int inv = 0; inv <= maxx; ++inv) {\n                for (int newPos = 0; newPos < l; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        perms[l][inv] = (perms[l][inv] + perms[l - 1][prevInv]) % mod;\n                    }\n                }\n            }\n\n            if (m.find(l) != m.end()) {\n                int targetInv = m[l];\n                for (int inv = 0; inv <= maxx; ++inv) {\n                    if (inv != targetInv) {\n                        perms[l][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long ans = 0;\n        for (auto x: perms[n]) {\n            ans = (ans + x) % mod;\n        }\n\n        return (int)ans;\n    }\n};",
    "submit_ts": 1719071557.0
}