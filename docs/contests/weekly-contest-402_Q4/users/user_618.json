{
    "username": "Divyanshu_Vaibhav",
    "submission": "class Solution {\n    struct SegmentTree {\n        vector<int> tree;\n        int n;\n\n        SegmentTree(int size) : n(size) {\n            tree.resize(4 * n, 0);\n        }\n\n        void build(vector<int>& nums, int start, int end, int node) {\n            if (start == end) {\n                tree[node] = (start > 0 && start < n - 1 && nums[start] > nums[start - 1] && nums[start] > nums[start + 1]) ? 1 : 0;\n                return;\n            }\n            int mid = (start + end) / 2;\n            build(nums, start, mid, 2 * node + 1);\n            build(nums, mid + 1, end, 2 * node + 2);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n\n        void update(vector<int>& nums, int start, int end, int idx, int node) {\n            if (start == end) {\n                tree[node] = (start > 0 && start < n - 1 && nums[start] > nums[start - 1] && nums[start] > nums[start + 1]) ? 1 : 0;\n                return;\n            }\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                update(nums, start, mid, idx, 2 * node + 1);\n            } else {\n                update(nums, mid + 1, end, idx, 2 * node + 2);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n\n        int query(int start, int end, int l, int r, int node) {\n            if (start > r || end < l) return 0;\n            if (start >= l && end <= r) return tree[node];\n            int mid = (start + end) / 2;\n            return query(start, mid, l, r, 2 * node + 1) + query(mid + 1, end, l, r, 2 * node + 2);\n        }\n    };\n\n    void updatePeaks(SegmentTree& segTree, vector<int>& nums, int idx) {\n        int n = nums.size();\n        segTree.update(nums, 0, n - 1, idx, 0);\n        if (idx > 0) segTree.update(nums, 0, n - 1, idx - 1, 0);\n        if (idx < n - 1) segTree.update(nums, 0, n - 1, idx + 1, 0);\n    }\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree segTree(n);\n        segTree.build(nums, 0, n - 1, 0);\n\n        vector<int> result;\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                int peaks = segTree.query(0, n - 1, l + 1, r - 1, 0); // Count peaks in the range [l+1, r-1]\n                result.push_back(peaks);\n            } else {\n                int idx = q[1], val = q[2];\n                if (nums[idx] != val) {\n                    nums[idx] = val;\n                    updatePeaks(segTree, nums, idx);\n                }\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": 1718507756.0
}