{
    "username": "arunshrivastava112",
    "submission": "class SegmentTree:\n    def __init__(self,arr) -> None:\n        n=len(arr)\n        self.n=n\n        self.t=[0]*(4*n)\n        self.lazy=[0]*(4*n)\n        self.nums=arr\n        self.build(0,0,n-1,arr)\n        \n        \n    def checkPeak(self,idx):\n        if idx==0 or idx==self.n-1:\n            return 0\n        if self.nums[idx]>self.nums[idx-1] and self.nums[idx]>self.nums[idx+1]:\n            return 1\n        return 0\n    \n    def build(self,idx,tl,tr,arr):\n        if tl==tr:\n            self.t[idx]=self.checkPeak(tl)\n            return\n        tm=(tl+tr)//2\n        self.build(idx*2+1,tl,tm,arr)\n        self.build(idx*2+2,tm+1,tr,arr)\n        self.t[idx]=self.t[idx*2+1]+self.t[idx*2+2]\n    \n    def _update(self,idx,tl,tr,l,r,val):\n        if l>r:\n            return 0\n        if tl==tr:\n            self.t[idx]=self.checkPeak(tl)\n            return\n        \n        if tl==l and tr==r:\n            self.t[idx]=(r-l+1)*val\n            return\n        \n        tm=(tl+tr)//2\n        self._update(idx*2+1,tl,tm,l,min(tm,r),val)\n        self._update(idx*2+2,tm+1,tr,max(l,tm+1),r,val)\n        self.t[idx]=self.t[idx*2+1]+self.t[idx*2+2]\n    \n    def _getSum(self,idx,tl,tr,l,r):\n        if l>r:\n            return 0\n\n        if tl==l and tr==r:\n            return self.t[idx]\n        tm=(tl+tr)//2\n        return self._getSum(idx*2+1,tl,tm,l,min(tm,r))+self._getSum(idx*2+2,tm+1,tr,max(l,tm+1),r)\n    \n    def sumRange(self, left: int, right: int) -> int:\n        return self._getSum(0,0,self.n-1,left,right)\n    \n    # add val to arr[l,r]\n    def update(self,l,r,val):\n        self._update(0,0,self.n-1,l,r,val)\n        #print(self.t,self.nums,self.lazy)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def checkPeak(idx):\n            if idx==0 or idx==n-1:\n                return 0\n            if nums[idx]>nums[idx-1] and nums[idx]>nums[idx+1]:\n                return 1\n            return 0\n            \n        n=len(nums)\n        st=SegmentTree(nums)\n        ans=[]\n        for q in queries:\n            if q[0]==1:\n                temp=st.sumRange(q[1],q[2])\n                if checkPeak(q[1])==1:\n                    temp-=1\n                if checkPeak(q[2])==1:\n                    temp-=1\n                ans.append( max(temp,0))\n            else:\n                nums[q[1]]=q[2]\n                st.update(q[1],q[1],checkPeak(q[1]))\n                if q[1]>0:\n                    st.update(q[1]-1,q[1]-1,checkPeak(q[1]-1))\n                if q[1]<n-1:\n                    st.update(q[1]+1,q[1]+1,checkPeak(q[1]+1))\n        return ans",
    "submit_ts": "1718507788",
    "subm_id": "1289662515"
}