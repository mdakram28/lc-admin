{
    "username": "user8557",
    "submission": "\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        m = grid.size();\n        n = grid.front().size();\n        bool hasRowMid = (m % 2 == 1);\n        bool hasColumnMid = (n % 2 == 1);\n        int res = 0;\n        {\n            for (int r = 0; r < m / 2; r++) {\n                for (int c = 0; c < n / 2; c++) {\n                    int cnt1 = grid[r][c] + grid[rJump(r)][c] + grid[r][cJump(c)] + grid[rJump(r)][cJump(c)];\n                    res += min(cnt1, 4 - cnt1);\n                }\n            }\n        }\n        {\n            if (hasRowMid && hasColumnMid) {\n                res += grid[m / 2][n / 2];\n            }\n        }\n        {\n            bool needFlip = false;\n            int cnt1 = 0;\n            if (hasRowMid) {\n                int midRow = m / 2;\n                for (int c1 = 0, c2 = n - 1; c1 < c2; c1++, c2--) {\n                    res += (grid[midRow][c1] != grid[midRow][c2]);\n                    cnt1 += grid[midRow][c1];\n                    cnt1 += grid[midRow][c2];\n                    needFlip |= (grid[midRow][c1] != grid[midRow][c2]);\n                }\n            }\n            if (hasColumnMid) {\n                int midColumn = n / 2;\n                for (int r1 = 0, r2 = m - 1; r1 < r2; r1++, r2--) {\n                    res += (grid[r1][midColumn] != grid[r2][midColumn]);\n                    cnt1 += grid[r1][midColumn];\n                    cnt1 += grid[r2][midColumn];\n                    needFlip |= (grid[r1][midColumn] != grid[r2][midColumn]);\n                }\n            }\n            if (!needFlip) {\n                if (cnt1 % 4 != 0) {\n                    res += 2;\n                }\n            }\n        }\n        return res;\n    }\n\nprivate:\n    int rJump(int r) {\n        return m - 1 - r;\n    }\n\n    int cJump(int c) {\n        return n - 1 - c;\n    }\n\nprivate:\n    int m;\n    int n;\n};\n",
    "submit_ts": "1722697177",
    "subm_id": "552264806"
}