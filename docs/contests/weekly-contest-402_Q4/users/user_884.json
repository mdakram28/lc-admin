{
    "username": "Heng_Xin",
    "submission": "#include <vector>\nusing namespace std;\n\nclass SegmentTree {\nprivate:\n    vector<int> tree; // \u8bb0\u5f55fz\u6570\n    int n;\n\n    void build(vector<int>& nums, int v, int tl, int tr) {\n        if (tl == tr) {\n            tree[v] = (isPeak(nums, tl) ? 1 : 0);\n        } else {\n            int tm = (tl + tr) / 2;\n            build(nums, v * 2, tl, tm);\n            build(nums, v * 2 + 1, tm + 1, tr);\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n\n    void update(vector<int>& nums, int v, int tl, int tr, int pos) {\n        if (tl == tr) {\n            tree[v] = (isPeak(nums, tl) ? 1 : 0);\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm) {\n                update(nums, v * 2, tl, tm, pos);\n            } else {\n                update(nums, v * 2 + 1, tm + 1, tr, pos);\n            }\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) \n            return 0;\n        if (l == tl && r == tr) {\n            return tree[v];\n        }\n        int tm = (tl + tr) / 2;\n        return query(v * 2, tl, tm, l, min(r, tm)) +\n               query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);\n    }\n\n    bool isPeak(vector<int>& nums, int i) {\n        int n = nums.size();\n        if (i <= 0 || i >= n - 1) \n            return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 1, 0, n - 1);\n    }\n\n    void update(vector<int>& nums, int pos) {\n        for (int i = pos - 1; i <= pos + 1; ++i) {\n            if (i > 0 && i < n - 1) {\n                update(nums, 1, 0, n - 1, i);\n            }\n        }\n    }\n\n    int query(int l, int r) {\n        if (l >= r - 1) \n            return 0;\n        return query(1, 0, n - 1, l + 1, r - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(\n        vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> answer;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                // \u67e5\u8be2 [li, ri]\n                int li = query[1], ri = query[2];\n                answer.push_back(segTree.query(li, ri));\n            } else if (query[0] == 2) {\n                // \u6539\n                int index = query[1], val = query[2];\n                nums[index] = val;\n                segTree.update(nums, index);\n            }\n        }\n\n        return answer;\n    }\n};\n",
    "submit_ts": 1718508710.0
}