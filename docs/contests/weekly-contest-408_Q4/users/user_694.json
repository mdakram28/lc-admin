{
    "username": "waster",
    "submission": "class Solution {\npublic:\n    int par[1001];\n    int reach[1001][4]; //u d l r\n    int find(int x){\n        if(par[x] == x)\n            return x;\n        return par[x] = find(par[x]);\n    }\n    void uni(int x,int y){\n        int px = find(x), py = find(y);\n        if(px == py) return;\n        par[px] = par[py];\n        for(int i = 0; i < 4; i++){\n            reach[py][i] |= reach[px][i];\n        }\n    }\n    bool isin(int x1, int y1, int r, int t1, int t2){\n        double x = abs(x1 - t1);\n        double y = abs(y1 - t2);\n        if(sqrt(x*x + y*y) <= r){\n            return true;\n        }\n        return false;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        for(int i = 0; i < n; i++){\n            par[i] = i;\n            if(isin(circles[i][0], circles[i][1], circles[i][2], X, Y))\n                return false;\n            if(isin(circles[i][0], circles[i][1], circles[i][2], 0, 0))\n                return false;\n            if(circles[i][0] + circles[i][2] >= X)\n                reach[i][0]++;\n            \n            if(circles[i][0] - circles[i][2] <= 0)\n                reach[i][1]++;\n            \n            if(circles[i][1] + circles[i][2] >= Y)\n                reach[i][2]++;\n            \n            if(circles[i][1] - circles[i][2] <= 0)\n                reach[i][3]++;\n        }\n        for(int i = 0; i < n; i++){\n            for(int j = i+1; j < n; j++){\n                double x = abs(circles[i][0] - circles[j][0]);\n                double y = abs(circles[i][1] - circles[j][1]);\n                if(sqrt(x*x + y*y) <= circles[i][2] + circles[j][2]){\n                    uni(i, j);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            int cur = find(i);\n            //cout << reach[cur][0] << reach[cur][1] << reach[cur][2] << reach[cur][3]  << endl;\n            if(reach[cur][0] + reach[cur][1] >= 2)\n                return false;\n            if(reach[cur][2] + reach[cur][3] >= 2)\n                return false;\n            if(reach[cur][1] + reach[cur][3] >= 2)\n                return false;\n            if(reach[cur][0] + reach[cur][2] >= 2)\n                return false;\n\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137451",
    "subm_id": "1335764192"
}