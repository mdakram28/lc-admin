{
    "username": "wswartworth",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n\n        rows, cols = len(grid), len(grid[0])\n\n        #first handle the corners\n        cornerRows = rows // 2\n        cornerCols = cols // 2\n\n        count = 0\n        for r in range(cornerRows):\n            for c in range(cornerCols):\n                sqCount = grid[r][c] + grid[r][cols-1-c] + \\\n                    grid[rows-1-r][c] + grid[rows-1-r][cols-1-c]\n                count += min(sqCount, 4 - sqCount)\n        \n        print(f\"count after corners: {count}\")\n        \n        midMismatches = 0\n        if rows % 2 == 1:\n            for c in range(0,cols):\n                if grid[rows//2][c] != grid[rows//2][cols - 1 - c]:\n                    midMismatches += 1\n        if cols % 2 == 1:\n            for r in range(0,rows):\n                if grid[r][cols//2] != grid[rows - 1 - r][cols//2]:\n                    midMismatches += 1\n        midMismatches = midMismatches // 2\n\n        print(f\"midMismatches: {midMismatches}\")\n\n\n        numOnes = 0\n        if rows % 2 == 1:\n            numOnes += sum([grid[rows//2][c] for c in range(cols)])\n        if cols % 2 == 1:\n            numOnes += sum(grid[r][cols//2] for r in range(rows))\n\n        if rows % 2 == 1 and cols % 2 == 1:\n            if grid[rows//2][cols//2] == 1:\n                count += 1\n                numOnes -= 2\n        \n        print(f\"numOnes:{numOnes}\")\n\n        count += midMismatches\n\n        if midMismatches == 0 and (numOnes%4) != 0:\n            count += 2\n\n        return count\n                \n        ",
    "submit_ts": "1722698247",
    "subm_id": "1343174485"
}