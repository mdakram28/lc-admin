{
    "username": "Monishka_17",
    "submission": "class TrieNode {\npublic:\n    std::unordered_map<char, TrieNode*> children;\n    std::vector<std::pair<int, int>> word_indices; // Pair of (word index, word length)\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const std::string& word, int index, int length) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_indices.emplace_back(index, length);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        std::vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, words[i].size());\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto& [index, length] : node->word_indices) {\n                    if (i + length <= n) {\n                        dp[i + length] = std::min(dp[i + length], dp[i] + costs[index]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n        \n    }\n};",
    "submit_ts": "1720322125",
    "subm_id": "1312341379"
}