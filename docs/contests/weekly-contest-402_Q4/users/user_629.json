{
    "username": "dps_sde",
    "submission": "class Fenwick_Tree():\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0]*(self.n+1)\n        self.create_tree(arr)\n\n    def add(self, index, x):\n        index = index + 1\n        while(index<=self.n):\n            self.tree[index]+=x\n            index = index + (index&(-index))\n        \n    def get_sum_from_1(self, end):\n        sm = 0\n        while(end):\n            sm+=self.tree[end]\n            end = end^(end&(-end))\n        return sm\n\n    def get_sum(self, start, end):\n        if start > end or start<0 or end >= self.n:\n            return 0\n        \n        #fenwiq tree is 1 based indexed\n        start+=1\n        end+=1\n        return self.get_sum_from_1(end) - self.get_sum_from_1(start-1)\n    \n    def create_tree(self, arr):\n        for index in range(self.n):\n            self.add(index, arr[index])\n\n\nclass Solution:\n    def countOfPeaks(self, a: List[int], q: List[List[int]]) -> List[int]:\n        n = len(a)\n        b = [0 for i in range(n)]\n        \n        for i in range(1, n-1):\n            if a[i]>a[i-1] and a[i]>a[i+1]:\n                b[i]=1\n                \n        ft = Fenwick_Tree(b)\n        ans = []\n        \n        \n        def update_b(l, r):\n            for i in range(l, r+1):\n                if i>0 and i<(n-1):\n                    if a[i]>a[i-1] and a[i]>a[i+1]:\n                        ft.add(i, 1 - b[i])\n                        b[i]=1\n                    else:\n                        ft.add(i, 0 - b[i])\n                        b[i]=0\n                        \n                \n        for t,x,y in q:\n            \n            if t==1:\n                ans.append(ft.get_sum(x+1,y-1))\n                continue\n            \n            #it self peak\n            a[x] = y\n            update_b(x-1, x+1)\n                \n                \n\n        return ans",
    "submit_ts": 1718508077.0
}