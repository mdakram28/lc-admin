{
    "username": "ddiibboo",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> m1 = new TreeMap<>();\n        TreeMap<Integer, Integer> m2 = new TreeMap<>();\n        for (int[] p : points) {\n            m1.compute(p[0] + p[1], (v, c) -> {\n                if (c == null) return 1;\n                return c + 1;\n            });\n            m2.compute(p[0] - p[1], (v, c) -> {\n                if (c == null) return 1;\n                return c + 1;\n            });\n        }\n        \n        int ans = Math.max(m1.lastKey() - m1.firstKey(), m2.lastKey() - m2.firstKey());\n        for (int[] p : points) {\n            m1.compute(p[0] + p[1], (v, c) -> {\n                if (c == 1) return null;\n                return c - 1;\n            });\n            m2.compute(p[0] - p[1], (v, c) -> {\n                if (c == 1) return null;\n                return c - 1;\n            });\n            ans = Math.min(ans, Math.max(m1.lastKey() - m1.firstKey(), m2.lastKey() - m2.firstKey()));\n            m1.compute(p[0] + p[1], (v, c) -> {\n                if (c == null) return 1;\n                return c + 1;\n            });\n            m2.compute(p[0] - p[1], (v, c) -> {\n                if (c == null) return 1;\n                return c + 1;\n            });\n        }\n        return ans;\n    }\n}"
}