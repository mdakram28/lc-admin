{
    "username": "brian880807",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        queue<int> pos;\n        for(int i = 0; i < nums.size(); i++){\n            int mask = k, curr = nums[i];\n            while(mask){\n                if(((mask & 1) == 1) && ((curr & 1) == 0)){\n                    pos.push(i);\n                    break;\n                }\n                mask >>= 1;\n                curr >>= 1;\n            }\n        }\n        pos.push(nums.size());\n\n        vector<int> bits(31, 0);\n        long long ans = 0;\n        int val = 0xffffffff, l = 0;\n        for(int r = 0; r < nums.size(); r++){\n            if(pos.front() == r){\n                bits = vector<int>(31, 0);\n                val = 0xffffffff;\n                l = r + 1;\n                pos.pop();\n            }\n            else{\n                val &= nums[r];\n                int curr = nums[r];\n                for(int i = 0; i < 31; i++){\n                    if(!(curr & 1)) bits[i]++;\n                    curr >>= 1;\n                }\n                while(val == k){\n                    ans += pos.front() - r;\n                    curr = nums[l++];\n                    for(int i = 0; i < 31; i++){\n                        if(!(curr & 1)){\n                            if(--bits[i] == 0)\n                                val |= (1 << i);\n                        }\n                        curr >>= 1;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280047",
    "subm_id": "1311774956"
}