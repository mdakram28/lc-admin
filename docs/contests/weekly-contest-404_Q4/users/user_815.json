{
    "username": "jacobj2",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        nodeMap1 = defaultdict(list)\n        for u,v in edges1:\n            nodeMap1[u].append(v)\n            nodeMap1[v].append(u)\n        nodeMap2 = defaultdict(list)\n        for u,v in edges2:\n            nodeMap2[u].append(v)\n            nodeMap2[v].append(u)\n        f = [0]*(len(edges1)+1)\n        def bfs1 (node):\n            q = deque([(node,-1,0)])\n            d=0\n            n=0\n            while q:\n                node, parent, distance = q.popleft()\n                f[node]=max(f[node],distance)\n                d=distance\n                n=node\n                for neighbor in nodeMap1[node]:\n                    if neighbor!=parent:\n                        q.append((neighbor,node,distance+1))\n            return d,n\n        def bfs2(node):\n            q = deque([(node,-1,0)])\n            d=0\n            n=0\n            while q:\n                node, parent, distance = q.popleft()\n                d=distance\n                n=node\n                for neighbor in nodeMap2[node]:\n                    if neighbor!=parent:\n                        q.append((neighbor,node,distance+1))\n            return d,n\n        def height1(node, parent,distance):\n            res = distance\n            for neighbor in nodeMap1[node]:\n                if neighbor!=parent:\n                    res=max(res,height1(neighbor,node,distance+1))\n            return res\n        def height2(node,parent,distance):\n            res=distance\n            for neighbor in nodeMap2[node]:\n                if neighbor!=parent:\n                    res=max(res,height2(neighbor,node,distance+1))\n            return res\n        '''if not edges1 and not edges2:\n            return 1\n        elif not edges1:\n            dist2,node2=bfs2(0)\n            dist4,node4=bfs2(node2)\n            return max(dist4,height2(0,0,0)+1)\n        elif not edges2:\n            dist2,node2=bfs1(0)\n            dist4,node4=bfs1(node2)\n            return max(dist4,height1(0,0,0)+1)'''\n        dist1,node1 = bfs1(0)\n        dist2,node2 = bfs1(node1)\n        dist10,node10 = bfs1(node2)\n        dist3,node3 = bfs2(0)\n        dist4,node4 = bfs2(node3)\n        res = inf\n        for i in range(len(f)):\n            res=min(res,max(1+f[i]+ceil(dist4/2),dist2,dist4))\n        return res",
    "submit_ts": "1719719266",
    "subm_id": "1304437740"
}