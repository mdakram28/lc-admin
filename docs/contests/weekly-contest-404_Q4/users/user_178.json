{
    "username": "sam_990",
    "submission": "#include<bits/stdc++.h>\n#define all(x) x.begin(),x.end()\n\n\nclass Solution {\npublic:\n    int diameter(int n, vector<int> adj[]) {\n        vector<int> dist(n, -1);\n        queue<int> q;\n        dist[0] = 0;\n        q.push(0);\n\n        while (!q.empty()) {\n            int t = q.front();\n            q.pop();\n\n            for (int i : adj[t]) {\n                if (dist[i] == -1) {\n                    dist[i] = dist[t] + 1;\n                    q.push(i);\n                }\n            }\n        }\n\n        int s2 = max_element(all(dist)) - dist.begin();\n\n        fill(all(dist), -1);\n        dist[s2] = 0;\n        while (!q.empty()) q.pop();\n\n        q.push(s2);\n        while (!q.empty()) {\n            int t = q.front();\n            q.pop();\n\n            for (int i : adj[t]) {\n                if (dist[i] == -1) {\n                    dist[i] = dist[t] + 1;\n                    q.push(i);\n                }\n            }\n        }\n\n        return *max_element(all(dist));\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = 0, m = 0;\n        \n        for (auto& e : edges1) n = max(n, max(e[0], e[1]));\n        for (auto& e : edges2) m = max(m, max(e[0], e[1]));\n        \n        n++;\n        m++;\n        \n        vector<int> adj1[n], adj2[m];\n        \n        for (auto& e : edges1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        \n        for (auto& e : edges2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n        \n        int d1 = diameter(n, adj1);\n        int d2 = diameter(m, adj2);\n        \n        return max(\n            {\n                d1,\n                d2,\n                1 + (d1 + 1) / 2 + (d2 + 1) / 2\n            }\n        );\n    }\n};",
    "submit_ts": "1719717658",
    "subm_id": "1304397447"
}