{
    "username": "jgorton",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n\n        i = j = 0 \n        bw = minDiff = 0xFFFFFFFF\n        c = defaultdict(int) \n\n        while j < len(nums) or i < len(nums): \n            if bw >= k and j < len(nums): # or i >= j: # or i > j: # or this later? impossible? \n                num = nums[j] \n                bw &= num\n                j += 1 \n                bit = 1 \n                while num:\n                    if num % 2: c[bit] += 1 \n                    num //= 2 # >>= 1 # //= 2 \n                    bit += 1 \n            else:\n                if i == j - 1:\n                    c.clear() \n                    bw = 0xFFFFFFFF\n                else:\n                    num = nums[i] \n                    mask = bit = 1 \n                    # bw = 0 \n                    while mask <= num:\n                        if mask & num: \n                            c[bit] -= 1 \n                            # if c[bit] == j - i - 1:\n                            #     bw += mask \n                        mask *= 2 \n                        bit += 1 \n                    bw = 0 \n                    for bit, count in c.items():\n                        if count == j - i - 1:\n                            bw += 2 ** (bit - 1) \n                i += 1 \n            minDiff = min(minDiff, abs(bw - k)) \n\n        # return min(minDiff, abs(bw - k)) \n        return minDiff \n",
    "submit_ts": 1717299833.0
}