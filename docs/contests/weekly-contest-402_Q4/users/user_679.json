{
    "username": "LouisCheng",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n\n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n\n        mid = (start + end) // 2\n        self.build(nums, 2 * node + 1, start, mid)\n        self.build(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update(self, index, val):\n        self.update_helper(0, 0, self.n - 1, index, val)\n\n    def update_helper(self, node, start, end, index, val):\n        if start == end:\n            self.tree[node] = val\n            return\n\n        mid = (start + end) // 2\n        if index <= mid:\n            self.update_helper(2 * node + 1, start, mid, index, val)\n        else:\n            self.update_helper(2 * node + 2, mid + 1, end, index, val)\n\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query(self, left, right):\n        return self.query_helper(0, 0, self.n - 1, left, right)\n\n    def query_helper(self, node, start, end, left, right):\n        if start > right or end < left:\n            return 0\n\n        if start >= left and end <= right:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_sum = self.query_helper(2 * node + 1, start, mid, left, right)\n        right_sum = self.query_helper(2 * node + 2, mid + 1, end, left, right)\n        return left_sum + right_sum\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = [0] * len(nums)\n        for i in range(1, len(nums) - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                peaks[i] += 1\n        \n        segment = SegmentTree(peaks)\n        # print(peaks)\n        res = []\n        # print(segment.tree)\n        for x in queries:\n            if x[0] == 1:\n                res.append(segment.query(x[1] + 1, x[2] - 1))\n            else:\n                nums[x[1]] = x[2]\n                if x[1] == 0 or x[1] == len(nums) - 1 or nums[x[1]] <= nums[x[1] + 1] or nums[x[1]] <= nums[x[1] - 1]:\n                    segment.update(x[1], 0)\n                if x[1] != 0 and x[1] != len(nums) - 1 and nums[x[1]] > nums[x[1] + 1] and nums[x[1]] > nums[x[1] - 1]:\n                    segment.update(x[1], 1)\n                if x[1] - 2 > -1 and nums[x[1] - 1] > nums[x[1] - 2] and nums[x[1] - 1] > nums[x[1]]:\n                    segment.update(x[1] - 1, 1)\n                if x[1] + 2 < len(nums) and nums[x[1] + 1] > nums[x[1] + 2]  and nums[x[1] + 1] > nums[x[1]]:\n                    segment.update(x[1] + 1, 1)\n                if x[1] - 1 > -1 and nums[x[1] - 1] <= nums[x[1]]:\n                    segment.update(x[1] - 1, 0)\n                if x[1] + 1 < len(nums) and nums[x[1] + 1] <= nums[x[1]]:\n                    segment.update(x[1] + 1, 0)\n                # print(segment.tree, nums)\n        return res\n        ",
    "submit_ts": 1718508221.0
}