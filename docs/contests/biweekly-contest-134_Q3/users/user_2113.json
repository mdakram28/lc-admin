{
    "username": "FSPINDLE",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& arr, int d) {\n                    \n                int n = arr.size() ;\n                int LOG = 20;\n\n                vector<vector<int>>nxt(n + 1 ,vector<int>(LOG , -1));\n\n                for(int i = 0 ; i < n ; i ++){\n                     if(arr[(i + 1) % n] != arr[i]) nxt[i][0] = (i + 1) % n ;\n                    //  else if(d == n){\n                    //       return 0 ;\n                    //  }\n                }\n\n                for(int i = 1 ; i < LOG ; i ++){\n                        \n                        for(int j = 0 ; j < n ; j ++){\n                             if(nxt[j][i - 1] != -1) nxt[j][i] = nxt[nxt[j][i - 1]][i - 1] ;\n                        }\n                }\n\n                \n        auto qry = [&](int x, int k){\n          \n           int res = x;\n           while (k > 0){\n                \n            int jump = k & (-k);\n            int bit = __builtin_ctz(jump);\n             res = nxt[res][bit];\n               if(res == -1) return res ;\n           k -= jump;\n          }\n           return res;\n        };\n\n          int ans = 0 ;\n\n          for(int i = 0 ; i < n ;i ++){\n              if(qry(i , d - 1) != -1) ans ++;\n          }\n          return ans;\n    }\n};",
    "submit_ts": "1720277340",
    "subm_id": "1311659121"
}