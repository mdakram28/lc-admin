{
    "username": "Ayu1_2",
    "submission": "class Solution {\n    int power(long long x, long long int y, int p=1e9+7){\n    int res = 1;\n    x = x % p; // Update x if it is more than or\n    // equal to p\n    if (x == 0) return 0; // In case x is divisible by p;\n    while (y > 0)\n    {\n    // If y is odd, multiply x with result\n    if (y & 1)\n    res = (res*x) % p;\n    // y must be even now\n    y = y>>1; // y = y/2\n    x = (x*x) % p;\n    }\n    return res;\n    }\n    map<vector<long long>, int> vis;\npublic:\n    int rec(int k, int st, long long jump, int f){\n        if(st > k && f==0) return 0;\n        if(vis.find({st, jump, f}) != vis.end()) return vis[{st, jump, f}];\n        int fir = 0, sec = 0;\n        if(f==1){\n            fir = rec(k, st-1, jump, 0);\n        }\n        \n        if(st<=k){\n          \n            sec = rec(k, st + power(2, jump), jump+1, 1);\n        }\n\n        return vis[{st, jump, f}] = (st==k) + fir + sec;\n    }\n    int waysToReachStair(int k) {\n        return rec(k, 1, 0, 1);\n    }\n};",
    "submit_ts": 1716090274.0
}