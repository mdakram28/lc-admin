{
    "username": "_neelytandel_",
    "submission": "class Solution {\npublic:\n    #define ll int\nstruct segment_tree{\n  vector<ll> st;\n    ll n;\n  void init(ll _n)\n  {\n      this->n=_n;\n      st.resize(4*n);\n  }\n  void build(ll start,ll end,ll node,vector<ll> &v)\n  {\n      if(start==end)\n      {\n          st[node]=v[start];\n          return;\n      }\n     ll mid=(start+end)/2;\n      build(start,mid,node*2+1,v);\n      build(mid+1,end,node*2+2,v);\n      st[node]=st[node*2+1]+st[node*2+2];\n  }\n  ll query(ll start,ll end,ll l,ll r,ll node)\n  {\n      if(start>r || l>end) return 0;\n      if(start>=l && end<=r)\n      {\n          return st[node];\n      }\n      ll mid=(start+end)/2;\n      ll q1=query(start,mid,l,r,node*2+1);\n      ll q2=query(mid+1,end,l,r,node*2+2);\n      return q1+q2;\n  }\n  void update(ll start,ll end,ll x,ll node,ll ind)\n  {\n      if(start==end)\n      {\n          st[node]=x;\n          return;\n      }\n      ll mid=(start+end)/2;\n      if(mid>=ind)\n      {\n        update(start,mid,x,node*2+1,ind);\n      }\n      else\n      {\n        update(mid+1,end,x,node*2+2,ind);\n      }\n      st[node]=st[node*2+1]+st[node*2+2];\n  }\n};\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        int m=queries.size();\n        vector<int> v;\n        v.push_back(0);\n        for(int i=1;i<n-1;i++)\n        {\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1])\n            {\n                v.push_back(1);\n            }\n            else\n            {\n                v.push_back(0);\n            }\n        }\n        v.push_back(0);\n        segment_tree seg;\n        seg.init (v.size());\n        seg.build(0,n-1,0,v);\n        vector<int> ans;\n        for(int i=0;i<m;i++)\n        {\n            int a,b,c;\n            a=queries[i][0];\n            b=queries[i][1];\n            c=queries[i][2];\n            if(a==1)\n            {\n                if((c-b)<=1) ans.push_back(0);\n                else ans.push_back(seg.query(0,n-1,b+1,c-1,0));\n            }\n            else\n            {\n                nums[b]=c;\n                if(b>=1 && b<n-1)\n                {\n                    if(nums[b-1]<nums[b] && nums[b]>nums[b+1])\n                    {\n                        seg.update(0,n-1,1,0,b);\n                        \n                    }\n                    else\n                        seg.update(0,n-1,0,0,b);\n                }\n                b--;\n                if(b>=1 && b<n-1)\n                {\n                    if(nums[b-1]<nums[b] && nums[b]>nums[b+1])\n                    {\n                        seg.update(0,n-1,1,0,b);\n                        \n                    }\n                    else\n                        seg.update(0,n-1,0,0,b);\n                }\n                b+=2;\n                if(b>=1 && b<n-1)\n                {\n                    if(nums[b-1]<nums[b] && nums[b]>nums[b+1])\n                    {\n                        seg.update(0,n-1,1,0,b);\n                        \n                    }\n                    else\n                        seg.update(0,n-1,0,0,b);\n                }\n            }\n        }\n       \n        cout<<endl;\n        return ans;\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n};",
    "submit_ts": 1718507709.0
}