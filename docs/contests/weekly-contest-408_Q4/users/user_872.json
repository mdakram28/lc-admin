{
    "username": "KrishnanKumar",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return solve(X, Y, circles);\n    }\n    \nprivate:\n    bool solve(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<vector<int>> g = buildGraph(X, Y, c, n);\n        \n        int res = 0;\n        res = max(res, bfs(g, n, n + 1, n + 2, n + 4));\n        res = max(res, bfs(g, n + 3, n + 2, n + 1, n + 4)); \n        \n        return res == 0;\n    }\n    \n    vector<vector<int>> buildGraph(int X, int Y, vector<vector<int>>& c, int n) {\n        vector<vector<int>> g(n + 4);\n        \n        for (int i = 0; i < n; i++) {\n            connectEdges(i, X, Y, c, n, g);\n            for (int j = i + 1; j < n; ++j) {\n                if (circlesConnected(c[i], c[j])) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        return g;\n    }\n    \n    void connectEdges(int i, int X, int Y, vector<vector<int>>& c, int n, vector<vector<int>>& g) {\n        if (c[i][0] <= c[i][2]) {\n            g[n].push_back(i);\n            g[i].push_back(n);\n        }\n        if (X - c[i][0] <= c[i][2]) {\n            g[n + 2].push_back(i);\n            g[i].push_back(n + 2);\n        }\n        if (c[i][1] <= c[i][2]) {\n            g[n + 1].push_back(i);\n            g[i].push_back(n + 1);\n        }\n        if (Y - c[i][1] <= c[i][2]) {\n            g[n + 3].push_back(i);\n            g[i].push_back(n + 3);\n        }\n    }\n    \n    bool circlesConnected(vector<int>& c1, vector<int>& c2) {\n        double d = sqrt(pow(c1[0] - c2[0], 2) + pow(c1[1] - c2[1], 2));\n        int r = c1[2] + c2[2];\n        return r >= d;\n    }\n\n    int bfs(vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        \n        q.push(s);\n        vis[s] = true;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            \n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        \n        return (vis[t1] || vis[t2] ? 1 : 0);\n    }\n};\n",
    "submit_ts": "1722139157",
    "subm_id": "1335809463"
}