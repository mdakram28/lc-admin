{
    "username": "something__something",
    "submission": "class Solution {\npublic: \n    long long dp[50001];\n    struct Node{\n        bool isWord; \n        Node* links[26]; \n        int cost;\n        \n        Node(){\n            isWord=false; \n            for(int i=0;i<26;++i){\n            links[i]=NULL;\n            } \n            cost = 1e9;\n        } \n        \n        bool contains(char ch){\n            return links[ch-'a']!=NULL;\n        } \n        \n        void put(char ch,Node* x){\n            links[ch-'a']=x; \n        } \n        \n        Node* get(char ch){\n            return links[ch-'a'];\n        } \n    };\n    \n    struct Trie{\n    \n        Node* root = new Node(); \n        \n        void insert(string &s,int cost){\n        \n            Node* temp=root; \n            // cout<<\"HELLO\\n\";\n        \n            for(int i=0;i<s.size();++i){\n                if(!temp->contains(s[i])){\n                    temp->put(s[i],new Node()); \n                } \n                temp=temp->get(s[i]);\n            }\n            temp->isWord=true; \n            temp->cost = min(temp->cost,cost);\n        } \n        \n        bool search(string&s){\n            Node* temp=root; \n        \n            for(int i=0;i<s.size();++i){\n            if(!temp->contains(s[i])){\n                return false;\n            } \n            temp=temp->get(s[i]);\n            } \n            return temp->isWord; \n        } \n    }; \n    Trie* t = new Trie();  \n    \n    long long solve(int idx, string &s){\n        if(idx>=s.size()){\n            return 0;\n        } \n        if(dp[idx]!=-1)return dp[idx];  \n\n        long long ans=1e14; \n        Node* x=t->root;\n        for(int i=idx;i<s.size();++i){\n            if(x->contains(s[i])){\n                x=x->get(s[i]); \n                if(x->isWord){\n                    ans=min(ans,solve(i+1,s)+(x->cost));\n                }\n            } \n            else{\n                break;\n            }\n        }  \n        return dp[idx]=ans;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for(int i=0;i<=target.size();++i)dp[i]=-1;\n        for(int i=0;i<words.size();++i){\n            t->insert(words[i],costs[i]);\n            // cerr<<i<<'\\n';\n        }\n        long long ans = solve(0,target);\n        if(ans>=1e14)return -1; \n        return ans;\n    }\n};",
    "submit_ts": "1720321447",
    "subm_id": "1312323137"
}