{
    "username": "Prakhar",
    "submission": "class Solution {\n    class seg {\n        public:\n        vector<int> tree;\n        \n        int build(int node, int l, int r, vector<int> &a) {\n            if (l == r) {\n                return tree[node] = a[l];\n            }\n            int m = l + r >> 1;\n            return tree[node] = max(build(node + 1, l, m, a), build(node + (r - l + 2) / 2 * 2, m + 1, r, a));\n        }\n\n        int query(int node, int l, int r, int lo, int hi) {\n            if (l > hi || lo > r) {\n                return INT_MIN;\n            }\n            if (l >= lo && r <= hi) {\n                return tree[node];\n            }\n            int m = l + r >> 1;\n            return max(query(node + 1, l, m, lo, hi), query(node + (r - l + 2) / 2 * 2, m + 1, r, lo, hi));\n        }\n    };\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector<vector<int> > idx(n, vector<int> (3, -1));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < 3; k++) {\n                    if (idx[i][k] == -1 || board[i][idx[i][k]] <= board[i][j]) {\n                        for (int l = 2; l > k; l--) {\n                            idx[i][l] = idx[i][l - 1];\n                        }\n                        idx[i][k] = j;\n                        break;\n                    }\n                }\n            }\n        }\n\n        // for (int i = 0; i < n; i++) {\n        //     for (int j = 0; j < 3; j++) {\n        //         cout << idx[i][j] << \" \\n\"[j == 2];\n        //     }\n        // }\n\n        vector<seg> SEG(n);\n        vector<int> mx(m, INT_MIN);\n        for (int i = n - 1; i > 0; i--) {\n            for (int j = 0; j < m; j++) {\n                mx[j] = max(board[i][j], mx[j]);\n            }\n            SEG[i].tree.resize(2 * m - 1);\n            SEG[i].build(0, 0, m - 1, mx);\n        }\n\n        long long ans = LLONG_MIN;\n        for (int i = 0; i < n - 2; i++) {\n            for (int k1 : idx[i]) {\n                for (int j = i + 1; j < n - 1; j++) {\n                    for (int k2 : idx[j]) {\n                        if (k2 != k1) {\n                            int l = k1, r = k2;\n                            if (l > r) {\n                                swap(l, r);\n                            }\n                            int plus = INT_MIN;\n                            if (l > 0) {\n                                plus = max(plus, SEG[j + 1].query(0, 0, m - 1, 0, l - 1));\n                            }\n                            if (r < m - 1) {\n                                plus = max(plus, SEG[j + 1].query(0, 0, m - 1, r + 1, m - 1));\n                            }\n                            if (l + 1 < r) {\n                                plus = max(plus, SEG[j + 1].query(0, 0, m - 1, l + 1, r - 1));\n                            }\n                            ans = max(ans, board[i][k1] + 0LL + board[j][k2] + plus);\n                        }\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723908765",
    "subm_id": "1359166236"
}