{
    "username": "inversionpeter",
    "submission": "#define MOD 1000000007\n\nint DP[301][401];\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        int nowAt = 0, maximumInversions = 0;\n        sort(requirements.begin(), requirements.end());\n        memset(DP, 0, sizeof(DP));\n        DP[0][0] = 1;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= maximumInversions; ++j) {\n                for (int k = 0; k <= i && j + k <= 400; ++k) {\n                    DP[i + 1][j + k] += DP[i][j];\n                    if (DP[i + 1][j + k] >= MOD) {\n                        DP[i + 1][j + k] -= MOD;\n                    }\n                }\n            }\n            maximumInversions = min(maximumInversions + i, 400);\n            if (i == requirements[nowAt][0]) {\n                for (int j = 0; j <= maximumInversions; ++j) {\n                    if (j != requirements[nowAt][1]) {\n                        DP[i + 1][j] = 0;\n                    }\n                }\n                ++nowAt;\n            }\n        }\n        return DP[n][requirements.back()[1]];\n    }\n};",
    "submit_ts": 1719068654.0
}