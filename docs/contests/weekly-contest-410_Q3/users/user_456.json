{
    "username": "chrehall68",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        # for the non-decreasing arr1 to be non-decreasing\n        # it's last element must be at most nums[-1]\n        # so all it's elements <= nums[-1]\n\n        # the constraint is nums[i] <= 50\n        max_el = max(nums)\n        n = len(nums)\n\n        # n_ways[i][num] = number of ways to make a monotonic pair\n        # where the non-decreasing array ends with num\n        n_ways = [[0 for _ in range(max_el+1)] for _ in range(n)]\n        \n        # populate initial\n        for num in range(nums[0]+1):\n            n_ways[0][num] = 1\n        # dp\n        for i in range(1, n):\n            for num in range(nums[i]+1):\n                total = 0\n                next_nonincreasing = nums[i] - num\n                # the non-decreasing can use any of the items <= num\n                for past_num in range(num+1):\n                    past_nonincreasing = nums[i-1] - past_num\n                    if next_nonincreasing > past_nonincreasing:\n                        continue\n                    else:\n                        # this is a valid continuation\n                        total += n_ways[i-1][past_num]\n                # store the total\n                n_ways[i][num] = total\n        return sum(n_ways[-1]) % int(1e9 + 7)\n                    ",
    "submit_ts": "1723345791",
    "subm_id": "1351563389"
}