{
    "username": "funjs234",
    "submission": "public class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        // Example DP Table:\n        // nums={1, 2, 3, 4}, k = 2\n\n        /*\n        i = 0\n        m: {1 -> 1}\n        t: 0\n\n        i = 1\n        m: {2 -> 1}\n        t: 1 (2)\n\n        i = 2\n        m: {3 -> 1, 2 -> 1}\n        t: 1\n\n        i = 3\n        m: {4 -> 1, 0 -> 1, 2 -> 1}\n        t: 2 (2, 2)        \n        */\n        int n = nums.length;\n        long t = 0;\n        Map<Long, Long> map = new HashMap<>();\n        int i = 0;\n        \n        while (i < n) {\n            Map<Long, Long> m = new HashMap<>();\n            if (nums[i] == k) {\n                t = t + 1;\n            }\n            m.put((long) nums[i], 1L);\n\n            Iterator<Map.Entry<Long, Long>> iterator = map.entrySet().iterator();\n            //Why is this so hard to reason?\n            while (iterator.hasNext()) {\n                Map.Entry<Long, Long> entry = iterator.next();\n                long v = entry.getKey();\n                long f = entry.getValue();\n                long r = v & nums[i];\n                if (r == k) {\n                    t = t + f;\n                }\n                m.put(r, m.getOrDefault(r, 0L) + f);\n            }\n            \n            map = m;\n            i++;\n        }\n        return t;\n    }\n}",
    "submit_ts": "1720281529",
    "subm_id": "1311828527"
}