{
    "username": "therealchainman",
    "submission": "class FenwickTree:\n    def __init__(self, N):\n        self.sums = [0 for _ in range(N+1)]\n\n    def update(self, i, delta):\n        while i < len(self.sums):\n            self.sums[i] += delta\n            i += i & (-i)\n\n    def query(self, i):\n        res = 0\n        while i > 0:\n            res += self.sums[i]\n            i -= i & (-i)\n        return res\n\n    def query_range(self, i, j):\n        return self.query(j) - self.query(i - 1) if j >= i else 0\n\n    def __repr__(self):\n        return f\"array: {self.sums}\"\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n, m = len(nums), len(queries)\n        peaks = [0] * n\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                peaks[i] = 1\n        ans = []\n        ft = FenwickTree(n)\n        for i in range(n):\n            if peaks[i]: ft.update(i + 1, 1)\n        for t, l, r in queries:\n            if t == 1:\n                res = ft.query_range(l + 2, r)\n                ans.append(res)\n            else:\n                nums[l] = r\n                # update index peak\n                if l > 0 and l + 1 < n:\n                    if nums[l] > nums[l - 1] and nums[l] > nums[l + 1]:\n                        if not peaks[l]:\n                            peaks[l] = 1\n                            ft.update(l + 1, 1)\n                    else:\n                        if peaks[l]:\n                            peaks[l] = 0\n                            ft.update(l + 1, -1)\n                # update index + 1 peak\n                if l + 2 < n:\n                    if nums[l + 1] > nums[l] and nums[l + 1] > nums[l + 2]:\n                        if not peaks[l + 1]:\n                            peaks[l + 1] = 1\n                            ft.update(l + 2, 1)\n                    else:\n                        if peaks[l + 1]:\n                            peaks[l + 1] = 0\n                            ft.update(l + 2, -1)\n                # update index - 1 peak\n                if l > 1:\n                    if nums[l - 1] > nums[l - 2] and nums[l - 1] > nums[l]:\n                        if not peaks[l - 1]:\n                            peaks[l - 1] = 1\n                            ft.update(l, 1)\n                    else:\n                        if peaks[l - 1]:\n                            peaks[l - 1] = 0\n                            ft.update(l, -1)\n        return ans",
    "submit_ts": 1718507453.0
}