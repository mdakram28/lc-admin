{
    "username": "happy-hert2yff",
    "submission": "class Solution {\n    /**\n    1 -2 2\n\n\n    1 1 1 2\n\n    -1 -2 1 2 3 3 1 -3\n    \n     */\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        int[] diff = new int[n];\n        for(int i = 0; i<n; i++){\n            diff[i] = target[i] - nums[i];\n        }\n        long res = 0L;\n        int[] nextSmaller = new int[n];\n        Arrays.fill(nextSmaller, n);\n        int[] prevSmallerOrEqual = new int[n];\n        Arrays.fill(prevSmallerOrEqual, -1);\n        preprocess(n, diff, nextSmaller, prevSmallerOrEqual);\n        // for(int num: nextSmaller){\n        //     System.out.println(num);\n        // }\n        // System.out.println(\"------\");\n        // for(int num: prevSmallerOrEqual){\n        //     System.out.println(num);\n        // }\n        res+=calculate(diff, prevSmallerOrEqual, nextSmaller);\n        for(int i = 0; i<n; i++){\n            diff[i] *= -1;\n        }\n        Arrays.fill(nextSmaller, n);\n        Arrays.fill(prevSmallerOrEqual, -1);\n        preprocess(n, diff, nextSmaller, prevSmallerOrEqual);\n        res+=calculate(diff, prevSmallerOrEqual, nextSmaller);\n        return res;\n    }\n\n    long calculate(int[] diff, int[] prevSmallerOrEqual, int[] nextSmaller){\n        int n = diff.length;\n        long res = 0;\n        for(int i = 0; i<n; i++){\n            if(diff[i] > 0){\n                int prev = prevSmallerOrEqual[i];\n                int next = nextSmaller[i];\n                int num = 0;\n                if(prev == -1 && next == n){\n                    num = 0;\n                }\n                else if(prev == -1 || next == n){\n                    if(prev == -1){\n                        num = Math.max(0, diff[next]);\n                    }\n                    else{\n                        num = Math.max(0, diff[prev]);\n                    }\n                }\n                else if(diff[prev] <=0 && diff[next]<=0){\n                    num = 0;\n                }\n                else{\n                    num = Math.max(diff[prev], diff[next]);\n                }\n                res+=diff[i] - num;\n            }\n        }\n        return res;\n    }\n\n    void preprocess(int n, int[] diff, int[] nextSmallerOrEqual, int[] prevSmallerOrEqual){\n        Stack<Integer> stack = new Stack<>();\n        for(int i = 0; i<n; i++){\n            if(diff[i] <=0){\n                while(!stack.isEmpty()){\n                    nextSmallerOrEqual[stack.pop()] = i;\n                }\n            }\n            else{\n                while(!stack.isEmpty() && diff[stack.peek()] > diff[i]){\n                    nextSmallerOrEqual[stack.pop()] = i;\n                }\n                stack.push(i);\n            }\n        }\n        stack.clear();\n        for(int i = n-1; i>=0; i--){\n            if(diff[i] <=0){\n                while(!stack.isEmpty()){\n                    prevSmallerOrEqual[stack.pop()] = i;\n                }\n            }\n            else{\n                while(!stack.isEmpty() && diff[stack.peek()] >= diff[i]){\n                    prevSmallerOrEqual[stack.pop()] = i;\n                }\n                stack.push(i);\n            }\n        }\n    }\n}",
    "submit_ts": "1721533476",
    "subm_id": "548397862"
}