{
    "username": "agoodloser",
    "submission": "class MaxSumTree {\npublic:\n    using ll = long long;\n    \n    MaxSumTree() {}\n\n    MaxSumTree(const vector<int> &nums) : n(nums.size()) {\n        tree.resize(n + n);\n        for (int i = 0; i < n; ++i) tree[i + n] = nums[i];\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[i << 1] + tree[(i << 1) + 1];\n        }\n    }\n\n    void update(int i, int val) {\n        tree[i += n] = val;\n        while (i > 0) {\n            tree[i >> 1] = tree[i] + tree[i ^ 1];\n            i >>= 1;\n        }\n    }\n\n    ll rangeOption(int i, int j) { // [i, j]\n        if (i > j) return 0;\n        \n        ll res = 0;\n        for (i += n, j += n; i <= j; i >>= 1, j >>= 1) {\n            if (i & 1) res += tree[i++];\n            if (!(j & 1)) res += tree[j--];\n        }\n        return res;\n    }\n    \n    ll operator[] (int i) {\n        return tree[i + n];\n    }\n    \nprivate:\n    std::vector<ll> tree;\n    size_t n;\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> res;\n        int n = nums.size();\n        vector<int> v(n);\n        \n        for (int i = 1; i < n-1; ++i) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                v[i]++;\n            }\n        }\n        \n        \n        \n        \n        MaxSumTree tree(v);\n        \n        for (auto q : queries) {\n            if (q[0] == 1) {\n                res.push_back(tree.rangeOption(q[1]+1, q[2]-1));\n            } else {\n                // a x b\n                int i = q[1], val = q[2], oldVal = nums[i];\n                \n                for (int ii = i-1; ii <= i+1; ii++) {\n                    if (ii != 0 && ii != n-1 && ii < n && ii >= 0) {\n                        int t = tree[ii];\n                        if (nums[ii] > nums[ii-1] && nums[ii] > nums[ii+1]) {\n                            --t;\n                        }\n                        nums[i] = val;\n                        \n                        if (nums[ii] > nums[ii-1] && nums[ii] > nums[ii+1]) {\n                            ++t;\n                        }\n                        \n                        nums[i] = oldVal;\n                        \n                        tree.update(ii, t);\n                    }\n                }\n                \n                \n                nums[i] = val;\n                \n                // for (int i = 0; i < n; ++i) cout << tree[i] << \" \";\n                // cout << \"\\n\";\n            }\n        }\n        \n        \n        \n        return res;\n    }\n};\n/*\n[3,1,4,2,5]\n[[2,3,4],[1,0,4]]\n[4,1,4,2,1,5]\n[[2,2,4],[1,0,2],[1,0,4]]\n[3,6,9]\n[[1,1,1],[1,2,2],[2,2,3]]\n[7,10,7]\n[[1,2,2],[2,0,6],[1,0,2]]\n*/",
    "submit_ts": 1718507603.0
}