{
    "username": "Zeus_28",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> c;\n    vector<pair<int, int>> indices_costs;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char character : word) {\n            if (!node->c.count(character)) {\n                node->c[character] = new TrieNode();\n            }\n            node = node->c[character];\n        }\n        node->indices_costs.push_back({index, cost}); \n    }\n};\n\nclass Solution {\nprivate:\n    Trie wordTrie; \n\n    void buildWordTrie(vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            wordTrie.insert(words[i], i, costs[i]);\n        }\n    }\n\n    int calculateMinimumCost(string& target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n        minCost[0] = 0;\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* currentNode = wordTrie.root;\n            for (int j = i; j < targetLength; ++j) {\n                char currentChar = target[j];\n                if (!currentNode->c.count(currentChar)) {\n                    break;\n                }\n                currentNode = currentNode->c[currentChar];\n                for (auto& pair : currentNode->indices_costs) {\n                    int wordLength = words[pair.first].size();\n                    if (i + wordLength <= targetLength) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + pair.second);\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        buildWordTrie(words, costs);\n        return calculateMinimumCost(target, words, costs);\n    }\n};\n\n",
    "submit_ts": "1720322913",
    "subm_id": "1312362455"
}