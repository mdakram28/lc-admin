{
    "username": "Tanguilol",
    "submission": "import java.math.BigInteger;\n\nclass Solution {\n    public int waysToReachStair(int k) {\n        int jump = 0;\n        long jumpHeight = 1;\n        long stair = 1;\n        \n        while (stair < k) {\n            stair += jumpHeight;\n            jump++;\n            jumpHeight *= 2;\n            \n            //System.out.println(stair + \" \" + k);\n        }\n        \n        int result = 0;\n        \n        long diff = stair - k;\n        \n        //System.out.println(stair + \" \" + k + \" \" + diff);\n        \n        result += choose(jump + 1, diff);\n        \n        stair += jumpHeight;\n        jump++;\n        \n        diff = stair - k;\n        \n        result += choose(jump + 1, diff);\n        \n        if (k == 1) {\n            result++;\n        }\n        \n        return result;\n    }\n    \n    private int choose(int n, long r) {\n        if (n < r) {\n            return 0;\n        }\n        \n        BigInteger nFactorial = factorial(n);\n        BigInteger rFactorial = factorial(r);\n        BigInteger nMinusRFactorial = factorial(n - r);\n        \n        //System.out.println(nFactorial.toString() + \" / (\" + rFactorial + \" * \" + nMinusRFactorial + \")\");\n        \n        return nFactorial.divide(rFactorial.multiply(nMinusRFactorial)).intValue();\n    }\n    \n    private BigInteger factorial(long v) {\n        BigInteger result = BigInteger.ONE;\n        \n        for (int i = 2; i <= v; i++) {\n            result = result.multiply(BigInteger.valueOf(i));\n        }\n        \n        return result;\n    }\n    \n}",
    "submit_ts": 1716088509.0
}