{
    "username": "mezhiktime",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, Integer> diff2Freq = new HashMap<>();\n        for (int i = 0; i < nums.length / 2; ++i)\n            diff2Freq.compute(Math.abs(nums[i] - nums[nums.length - i - 1]), (key, value) -> 1 + (value == null ? 0 : value));\n        Map<Integer, Integer> freq2Diff = new TreeMap<>();\n        diff2Freq.forEach((diff, freq) -> freq2Diff.compute(freq, (key, value) -> value == null ? diff : Math.min(diff, value)));\n        int subRes, res = Integer.MAX_VALUE;\n        \n        for (Map.Entry<Integer, Integer> entry : freq2Diff.entrySet()) {\n            if ((nums.length / 2 - entry.getKey()) > res) continue;\n            subRes = 0;\n            for (int i = 0; i < nums.length / 2; ++i) {\n                int a = nums[i];\n                int b = nums[nums.length - 1 - i];\n                if (Math.abs(a - b) != entry.getValue()) {\n                    if (Math.min(a, b) + entry.getValue() > k && Math.max(a, b) - entry.getValue() < 0) subRes += 2;\n                    else subRes++;\n                }\n            }\n            res = Math.min(res, subRes);\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721487946",
    "subm_id": "1327406412"
}