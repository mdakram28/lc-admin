{
    "username": "aryam2121",
    "submission": "\nclass Solution {\npublic:\n    bool bfs(vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visit(nodes, 0);\n        q.push(start);\n        visit[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visit[v]) {\n                    q.push(v);\n                    visit[v] = 1;\n                }\n            }\n        }\n        return visit[target1] || visit[target2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> circle(circles2.size());\n        vector<vector<int>> graph(circles2.size() + 4);\n        int num_circles = circles2.size();\n        \n        for (int i = 0; i < num_circles; ++i) {\n            circle[i].first.first = circles2[i][0];\n            circle[i].first.second = circles2[i][1];\n            circle[i].second = circles2[i][2];\n        }\n        \n        for (int i = 0; i < num_circles; ++i) {\n            if (circle[i].first.first <= circle[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circle[i].first.first <= circle[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circle[i].first.second <= circle[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circle[i].first.second <= circle[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circle[i].first.first - circle[j].first.first, 2) +\n                                       pow(circle[i].first.second - circle[j].first.second, 2));\n                int radius_sum = circle[i].second + circle[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        bool is_blocked = false;\n        is_blocked = is_blocked || bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4);\n        is_blocked = is_blocked || bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4); \n        if (is_blocked) return false;\n        return true;\n    }\n};\n",
    "submit_ts": "1722137185",
    "subm_id": "1335756581"
}