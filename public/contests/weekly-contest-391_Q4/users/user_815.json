{
    "username": "i3old-goldstineye4",
    "submission": "import os\nimport re\nfrom typing import *\nimport copy\nfrom functools import lru_cache\nfrom collections import Counter\nfrom queue import Queue\nimport heapq  # small first\nfrom sortedcontainers import SortedList\n\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        print(points)\n        max_s = max_d = -10**18\n        min_s = min_d = 10**18\n        p1, p2, p3, p4 = -1, -1, -1, -1\n        \n        i = 0\n        for x, y in points:\n            if x + y > max_s:\n                max_s = x + y \n                p1 = i\n            \n            if x + y < min_s:\n                min_s = x + y \n                p2 = i \n            \n            if x - y > max_d:\n                max_d = x - y \n                p3 = i \n            \n            if x - y < min_d:\n                min_d = x - y \n                p4 = i\n            # max_s = max(max_s, x + y)\n            # min_s = min(min_s, x + y)\n            # max_d = max(max_d, x - y)\n            # min_d = min(min_d, x - y)\n            \n            i += 1\n        res = 10 ** 18 \n        for idx in [p1,p2,p3,p4]:\n            p = points[::]\n            p.pop(idx)\n            res = min(res, self.helper(p))\n        return res\n        \n        \n        \n        \n        \n        \n\n    def helper(self, points: List[List[int]]):\n        max_s = max_d = -10 ** 18\n        min_s = min_d = 10 ** 18\n        for x, y in points:\n            max_s = max(max_s, x + y)\n            min_s = min(min_s, x + y)\n            max_d = max(max_d, x - y)\n            min_d = min(min_d, x - y)\n        return max(max_s - min_s, max_d - min_d)\n\n\n# \n# \n# p = [[3,10],[5,15],[10,2],[4,4]]\n# for i in range(4):\n#     pp = p[::]\n#     pp.pop(i)\n#     print(Solution().minimumDistance(pp))"
}