{
    "username": "dineshchandran311",
    "submission": "class SEG {\n    vector<int> tree;\npublic:\n    SEG(int n) {\n        tree.resize(4 * n + 1, 0);\n    }\n\n    void build(int node, int start, int end, vector<int>& A) {\n        if (start == end) {\n            tree[node] = A[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid, A);\n            build(2 * node + 2, mid + 1, end, A);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        int res = p1 & p2;\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long count = 0;\n        int n = nums.size();\n        SEG sgt(n);\n        sgt.build(0, 0, n - 1, nums);\n\n        for (int i = 0; i < n; i++) {\n            int start = i;\n            int end = n - 1;\n            int ans1 = -1;\n\n            while (start <= end) {\n                int mid = start + (end - start) / 2;\n                int val = sgt.query(0, 0, n - 1, i, mid);\n                if (val < k) {\n                    end = mid - 1;\n                } else if (val > k) {\n                    start = mid + 1;\n                } else {\n                    ans1 = mid;\n                    end = mid - 1;\n                }\n            }\n\n            start = i;\n            end = n - 1;\n            int ans2 = -1;\n\n            while (start <= end) {\n                int mid = start + (end - start) / 2;\n                int val = sgt.query(0, 0, n - 1, i, mid);\n                if (val > k) {\n                    start = mid + 1;\n                } else if (val < k) {\n                    end = mid - 1;\n                } else {\n                    ans2 = mid;\n                    start = mid + 1;\n                }\n            }\n\n            if (ans1 != -1 && ans2 != -1) {\n                count += 1LL * (ans2 - ans1 + 1);\n            }\n        }\n\n        return count;\n    }\n};\n",
    "submit_ts": "1720279910",
    "subm_id": "1311769880"
}