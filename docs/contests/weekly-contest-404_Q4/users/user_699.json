{
    "username": "Ayush253443",
    "submission": "class Solution {\npublic:\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n     int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        // Create adjacency lists for both trees\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& edge : edges1) {\n            adj1[edge[0]].emplace_back(edge[1]);\n            adj1[edge[1]].emplace_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].emplace_back(edge[1]);\n            adj2[edge[1]].emplace_back(edge[0]);\n        }\n\n        auto bfs = [](const vector<vector<int>>& adj, int start) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthestNode = start;\n            \n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > dist[farthestNode]) {\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            return make_pair(farthestNode, dist[farthestNode]);\n        };\n\n        auto getDiameter = [&bfs](const vector<vector<int>>& adj) {\n            auto result1 = bfs(adj, 0);\n            int farthestNode = result1.first;\n            auto result2 = bfs(adj, farthestNode);\n            int diameter = result2.second;\n            return diameter;\n        };\n\n        int diameter1 = getDiameter(adj1);\n        int diameter2 = getDiameter(adj2);\n        \n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n        \n        return minDiameter;\n    }\n};",
    "submit_ts": "1719717802",
    "subm_id": "1304401136"
}