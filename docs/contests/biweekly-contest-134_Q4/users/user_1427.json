{
    "username": "IM_Subhadeep",
    "submission": "#define INF INT32_MAX\n#define ll long long\n#define fr(i, a, b) for(int i = a; i < b; i++)\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    // Constructor\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    // query function to get bitwise AND of the range\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        // bitwise AND operation result\n        return p1 & p2;\n    }\n};\n\nstruct _hash {\n    static uint64_t splitmix64(uint64_t x) {\n        x += 0x9e3779b97f4a7c15;\n        x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;\n        x = (x ^ (x >> 27)) * 0x94d049bb133111eb;\n        return x ^ (x >> 31);\n    }\n\n    size_t operator()(uint64_t x) const {\n        static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();\n        return splitmix64(x + FIXED_RANDOM);\n    }\n};\n\n// class SegmentTree {\n// private:\n//     vector<int> tree;\n//     int n;\n\n// public:\n//     SegmentTree(const vector<int>& data) {\n//         n = data.size();\n//         tree.resize(2 * n);\n//         build(data);\n//     }\n\n//     void build(const vector<int>& data) {\n//         for (int i = 0; i < n; ++i) {\n//             tree[n + i] = data[i];\n//         }\n//         for (int i = n - 1; i > 0; --i) {\n//             tree[i] = tree[i * 2] & tree[i * 2 + 1];\n//         }\n//     }\n//     int query(int left, int right) {\n//         left += n;\n//         right += n;\n//         int res = INF;\n//         while (left < right) {\n//             if (left & 1) {\n//                 res &= tree[left++];\n//             }\n//             if (right & 1) {\n//                 res &= tree[--right];\n//             }\n//             left >>= 1;\n//             right >>= 1;\n//         }\n//         return res;\n//     }\n// };\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        unordered_map<ll,ll,_hash> mp;\n        ll ans = 0, n = nums.size();\n        fr(i,0,n){\n            unordered_map<ll,ll,_hash> mpp;\n            if(nums[i]==k) ++ans;\n            mpp[nums[i]] = 1;\n            for(auto j:mp){\n                ll x = (nums[i]&j.first);\n                if(x==k) ans+= j.second;\n                mpp[x]+= j.second;\n            }\n            mp = mpp;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280229",
    "subm_id": "1311781577"
}