{
    "username": "Harkness",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        \n        @cache\n        def solve(x1, y1, x2, y2, rem):\n            # print(x1, y1, x2, y2, rem)\n            if rem == 1:\n                l, r, t, b = n, -1, m, -1\n                for i in range(x1, x2+1):\n                    for j in range(y1, y2+1):\n                        if grid[i][j]:\n                            l = min(l, j)\n                            r = max(r, j)\n                            t = min(t, i)\n                            b = max(b, i)\n                area = (r-l+1) * (b-t+1)\n                return area if area > 0 else float('inf')\n            \n            res = float('inf')\n            if rem == 2:\n                for i in range(x1, x2):\n                    # cut horizontally at i vs i+1\n                    res = min(res, solve(x1, y1, i, y2, 1) + solve(i+1, y1, x2, y2, 1))\n                for j in range(y1, y2):\n                    res = min(res, solve(x1, y1, x2, j, 1) + solve(x1, j+1, x2, y2, 1))\n                return res\n            if rem == 3:\n                for i in range(x1, x2):\n                    # cut horizontally at i vs i+1\n                    res = min(res, \n                              solve(x1, y1, i, y2, 2) + solve(i+1, y1, x2, y2, 1),\n                              solve(x1, y1, i, y2, 1) + solve(i+1, y1, x2, y2, 2)\n                             )\n                for j in range(y1, y2):\n                    res = min(res, \n                              solve(x1, y1, x2, j, 2) + solve(x1, j+1, x2, y2, 1),\n                              solve(x1, y1, x2, j, 1) + solve(x1, j+1, x2, y2, 2)\n                             )\n                return res\n            \n            \n        return solve(0, 0, m-1, n-1, 3)\n        \n        \n        ",
    "submit_ts": 1719112662.0
}