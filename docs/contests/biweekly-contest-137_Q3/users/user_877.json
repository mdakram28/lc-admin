{
    "username": "Shruthik",
    "submission": "class Solution:\n    def maximumValueSum(self, grid: List[List[int]]) -> int:\n        rows, cols = len(grid), len(grid[0])\n        arr = []\n        for i in range(rows):\n            nums = grid[i]\n            inds = [i for i, j in sorted(enumerate(nums), key = lambda x: x[1])]\n            arr.append((inds[-1], inds[-2], inds[-3]))\n\n        # print(arr)\n        ans = float(\"-inf\")\n        for r1 in range(rows):\n            # print(r1)\n            c1 = arr[r1][0]\n            # if r1 == 1:\n            #     print(\"row1\")\n\n            for r2 in range(rows):\n                if r2 == r1:\n                    continue\n                c2 = arr[r2][0]\n                if c2 == c1:\n                    c2 = arr[r2][1]\n\n                for r3 in range(rows):\n                    if r3 in (r1, r2):\n                        continue\n                    c3 = arr[r3][0]\n                    if c3 in (c1, c2):\n                        c3 = arr[r3][1]\n                    if c3 in (c1, c2):\n                        c3 = arr[r3][2]\n                    # if r1 == 1:\n                    #     print(\"True\")\n                    ans = max(ans, grid[r1][c1] + grid[r2][c2] + grid[r3][c3])\n        return ans\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        # rows, cols = len(board), len(board[0])\n        # lst = [None for i in range(rows)]\n        # for i in range(rows):\n        #     mx = smx = None\n        #     arr = board[i]\n        #     for j in range(cols):\n        #         if mx == None:\n        #             mx = j\n        #         elif arr[j] >= arr[mx]:\n        #             smx = mx\n        #             mx = j\n        #         elif smx == None:\n        #             smx = j\n        #         elif arr[smx] < arr[j]:\n        #             smx = j\n        #     lst[i] = [mx, smx]\n        \n\n        # def func(row, col):\n        #     ret = 0\n        #     for r in range(rows):\n        #         if r == row:\n        #             continue\n        #         comp_col = lst[r][0]\n        #         best = 0\n        #         for j in range(rows):\n        #             if j != r and j != row:\n        #                 mx, smx = lst[j]\n        #                 if mx in (col, comp_col):\n        #                     best = max(best, board[j][mx])\n        #                 else:\n        #                     best = max(best, board[j][smx])\n        #         ret = max(ret, board[r][comp_col] + best)\n        #     return ret + board[row][col]\n\n        # ans = float(\"-inf\")\n        # for i in range(len(lst)):\n        #     ans = max(ans, func(i, lst[i][0]))\n        # return ans",
    "submit_ts": "1723908786",
    "subm_id": "1359167063"
}