{
    "username": "_sajid",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        ST st = new ST(0, n - 1);\n        st.updateVal(0, n - 2, 1);\n        int result[] = new int[queries.length];\n        for (int i = 0; i < result.length; i++) {\n            int q[] = queries[i];\n            int x = q[0], y = q[1];\n            st.updateVal(x + 1, y - 1, 0);\n            result[i] = st.getSum(0, n - 2);\n        }\n        return result;\n        \n        \n        // System.out.println(\"1 : \" + st.getSum(0, n - 2));\n        // st.updateVal(1,1, 0);\n        // System.out.println(\"2 : \" + st.getSum(0, n - 2));\n        // st.updateVal(3,3, 0);\n        // System.out.println(\"2 : \" + st.getSum(0, n - 2));\n        // st.updateVal(1,2,2);\n        // System.out.println(\"2 : \" + st.getSum(0, n - 2));\n        // return null;\n    }\n}\n\n\nclass ST {\n    ST leftnode, rightnode;\n    int myleft, myright;\n    int val;\n    Integer update;\n    ST (int left, int right) {\n        myleft = left; myright = right;\n        if (left == right)\n            return;\n        int mid = left + (right - left) / 2;\n        leftnode = new ST(left, mid);\n        rightnode = new ST(mid + 1, right);\n    }\n    public int getSum(int left, int right) {\n        if (left > right) return 0;\n        if (left > myright || right < myleft) return 0;\n        if (left <= myleft && right >= myright) return val;\n        return leftnode.getSum(left, right) + rightnode.getSum(left, right);\n    }\n    public void updateVal(int left, int right, int newval) {\n        if (left > right) return;\n        if (left > myright || right < myleft) return;\n        if (left <= myleft && right >= myright) {\n            val = newval * (myright - myleft + 1);\n            update = newval;\n            return;\n        }\n        if (update != null) {\n            leftnode.updateVal(myleft, myright, update);\n            rightnode.updateVal(myleft, myright, update);\n        }\n        leftnode.updateVal(left, right, newval);\n        rightnode.updateVal(left, right, newval);\n        val = leftnode.val + rightnode.val;\n        update = null;\n    }\n}",
    "submit_ts": "1722741835",
    "subm_id": "1343754631"
}