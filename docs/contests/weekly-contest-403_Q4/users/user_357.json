{
    "username": "qb_2008",
    "submission": "class Solution {\npublic:\n    \n    struct Rec {\n        int r1 = 0;\n        int r2 = 0;\n        int c1 = 0;\n        int c2 = 0;\n        Rec(int r1, int r2, int c1, int c2) : r1(r1), r2(r2), c1(c1), c2(c2) {}\n    };\n    \n    vector<pair<int, int>> dots;\n    int rows = 0;\n    int cols = 0;\n    \n    int minimumSum(vector<vector<int>>& grid) {        \n        // split the grid by a horizon or vertial line, one part of it must belong to a single rec.\n        // the left part is split by the left two rectangles.\n        rows = grid.size();\n        cols = grid[0].size();\n        dots.clear();\n        for (int r = 0; r < rows; r++) {\n            for (int c = 0; c < cols; c++) {\n                if (grid[r][c] == 1) {\n                    dots.emplace_back(r, c);\n                }\n            }\n        }\n        int min_sum = rows * cols;\n        \n        for (int r = 0; r < rows - 1; r++) {\n            Rec rec1(0, r, 0, cols - 1);\n            Rec rec2(r + 1, rows - 1, 0, cols - 1);\n            int sum = tryRec1(rec1, rec2);\n            min_sum = min(min_sum, sum);\n            sum = tryRec1(rec2, rec1);\n            min_sum = min(min_sum, sum);\n        }\n        for (int c = 0; c < cols - 1; c++) {\n            Rec rec1(0, rows - 1, 0, c);\n            Rec rec2(0, rows - 1, c + 1, cols - 1);\n            int sum = tryRec1(rec1, rec2);\n            min_sum = min(min_sum, sum);\n            sum = tryRec1(rec2, rec1);\n            min_sum = min(min_sum, sum);\n        }\n        return min_sum;\n    }\n    \n    int tryRec1(Rec rec1, Rec left) {\n        int min_sum = INT_MAX;\n        for (int r = left.r1; r < left.r2; r++) {\n            Rec rec2(left.r1, r, left.c1, left.c2);\n            Rec rec3(r + 1, left.r2, left.c1, left.c2);\n            int sum = calArea(rec1, rec2, rec3);\n            min_sum = min(min_sum, sum);\n        }\n        for (int c = left.c1; c < left.c2; c++) {\n            Rec rec2(left.r1, left.r2, left.c1, c);\n            Rec rec3(left.r1, left.r2, c + 1, left.c2);\n            int sum = calArea(rec1, rec2, rec3);\n            min_sum = min(min_sum, sum);\n        }\n        return min_sum;\n    }\n    \n    int calArea(Rec rec1, Rec rec2, Rec rec3) {\n        return shrunkRec(rec1) + shrunkRec(rec2) + shrunkRec(rec3);\n    }\n    \n    int shrunkRec(Rec rec) {\n        int min_r = INT_MAX;\n        int max_r = -1;\n        int min_c = INT_MAX;\n        int max_c = -1;\n        for (auto& p : dots) {\n            if (p.first >= rec.r1 && p.first <= rec.r2 && p.second >= rec.c1 && p.second <= rec.c2) {\n                min_r = min(min_r, p.first);\n                max_r = max(max_r, p.first);\n                min_c = min(min_c, p.second);\n                max_c = max(max_c, p.second);\n            }\n        }\n        if (max_r == -1) {\n            return 0;\n        }\n        return (max_r - min_r + 1) * (max_c - min_c + 1);\n    }\n};",
    "submit_ts": 1719114588.0
}