{
    "username": "hackxsaras",
    "submission": "class Solution {\npublic:\n    \n    \n    void buildLR(int i, int l, int r, vector<int>& nums, vector<int>& t){\n        if(l == r) { \n            if(l == 0 || l == nums.size()-1) t[i] = 0;\n            else t[i] = (nums[l] > nums[l-1] && nums[l] > nums[l+1] );\n            return;\n        }\n        int m = (l+r)/2;\n        \n        int left = 2*i+1;\n        int right = 2*i+2;\n        \n        buildLR(left, l, m, nums, t);\n        buildLR(right, m+1, r, nums, t);\n        \n        t[i] = t[left] + t[right];\n    }\n    void buildRL(int i, int l, int r, vector<int>& nums, vector<int>& t){\n        if(l == r) { \n            if(l == nums.size()-1) t[i] = 0;\n            else t[i] = (nums[l] > nums[l+1]);\n            return;\n        }\n        int m = (l+r)/2;\n        \n        int left = 2*i+1;\n        int right = 2*i+2;\n        \n        buildRL(left, l, m, nums, t);\n        buildRL(right, m+1, r, nums, t);\n        \n        t[i] = t[left] + t[right];\n    }\n    int query(int i, int l, int r, int ql, int qr, vector<int>& t){\n        if(qr < l || r < ql) return 0;\n        if(l >= ql && r <= qr) return t[i];\n        \n        int m = (l+r)/2;\n        \n        int left = 2*i+1;\n        int right = 2*i+2;\n        \n        return query(left, l, m, ql, qr, t) + query(right, m+1, r, ql, qr, t);\n    }\n    void updateLR(int i, int l, int r, int x, int v, vector<int>& nums, vector<int> &t){\n        if(x < l || x > r) {\n            return;\n        }\n        if(l == r && l == x) {\n            nums[l] = v; \n            if(l == 0 || l == nums.size()-1) t[i] = 0;\n            else t[i] = (nums[l] > nums[l-1] && nums[l] > nums[l+1] );\n            return;\n        }\n        \n        int m = (l+r)/2;\n        \n        int left = 2*i+1;\n        int right = 2*i+2;\n        \n        updateLR(left, l, m, x, v, nums, t);\n        updateLR(right, m+1, r, x, v, nums, t);\n        \n        t[i] = t[left] + t[right];\n    }\n    void updateRL(int i, int l, int r, int x, int v, vector<int>& nums, vector<int> &t){\n        if(x < l || x > r) {\n            return;\n        }\n        if(l == r && l == x) {\n            nums[l] = v; \n            if(l == nums.size()-1) t[i] = 0;\n            else t[i] = (nums[l] > nums[l+1]);\n            return;\n        }\n        \n        int m = (l+r)/2;\n        \n        int left = 2*i+1;\n        int right = 2*i+2;\n        \n        updateRL(left, l, m, x, v, nums, t);\n        updateRL(right, m+1, r, x, v, nums, t);\n        \n        t[i] = t[left] + t[right];\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> slr(4*n), srl(4*n);\n        \n        buildLR(0, 0, n-1, nums, slr);\n        buildRL(0, 0, n-1, nums, srl);\n        \n        vector<int> ans;\n        for(int i=0;i<queries.size();i++){\n            if(queries[i][0] == 1){\n                int ql = queries[i][1];\n                int qr = queries[i][2];\n                ans.push_back(query(0, 0, n-1, ql+1, qr-1, slr));\n            }\n            if(queries[i][0] == 2){\n                int j = queries[i][1];\n                int v = queries[i][2];\n                \n                updateLR(0, 0, n-1, j, v, nums, slr);\n                if(j != 0)\n                    updateLR(0, 0, n-1, j-1, nums[j-1], nums, slr);\n                if(j != nums.size()-1) \n                    updateLR(0, 0, n-1, j+1, nums[j+1], nums, slr);\n                \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508618.0
}