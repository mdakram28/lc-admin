{
    "username": "vibhanshushri",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size();       // Number of rows in the grid\n        int cols = matrix[0].size();    // Number of columns in the grid\n        int flipCount = 0;              // To keep track of the total flips needed\n        \n        // Handle the central cell if both dimensions are odd\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (matrix[rows / 2][cols / 2] == 1) {\n                flipCount += 1;\n            }\n        }\n\n        vector<int> counts(3, 0);       // To track the required flips for rows and columns\n        if (rows % 2 == 1) {\n            int leftIdx = 0, rightIdx = cols - 1;\n            while (leftIdx < rightIdx) {\n                int pairSum = matrix[rows / 2][leftIdx] + matrix[rows / 2][rightIdx];\n                counts[pairSum] += 1;\n                ++leftIdx;\n                --rightIdx;\n            }\n        }\n\n        if (cols % 2 == 1) {\n            int topIdx = 0, bottomIdx = rows - 1;\n            while (topIdx < bottomIdx) {\n                int pairSum = matrix[topIdx][cols / 2] + matrix[bottomIdx][cols / 2];\n                counts[pairSum] += 1;\n                ++topIdx;\n                --bottomIdx;\n            }\n        }\n\n        // Adjust flipCount based on the middle row/column counts\n        if (counts[2] % 2 == 1) {\n            if (counts[1] > 0) {\n                flipCount += counts[1];\n            } else {\n                flipCount += 2;\n            }\n        } else {\n            flipCount += counts[1];\n        }\n\n        // Check each quadrant to ensure palindromic structure\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int topLeft = matrix[i][j];\n                int bottomLeft = matrix[rows - 1 - i][j];\n                int topRight = matrix[i][cols - 1 - j];\n                int bottomRight = matrix[rows - 1 - i][cols - 1 - j];\n\n                int totalSum = topLeft + bottomLeft + topRight + bottomRight;\n\n                // Minimum flips to make the four cells palindromic\n                if (totalSum != 0 && totalSum != 4) {\n                    flipCount += min(totalSum, 4 - totalSum);\n                }\n            }\n        }\n\n        return flipCount;\n    }\n};\n",
    "submit_ts": "1722699930",
    "subm_id": "1343226580"
}