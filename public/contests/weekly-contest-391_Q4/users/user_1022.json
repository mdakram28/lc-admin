{
    "username": "1v9n418vn51",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def distance(x1, x2):\n            return abs(x1[0] - x2[0]) + abs(x1[1] - x2[1])\n        \n        def get_max_dis(arr):\n            res = 0\n            for i in range(len(arr)):\n                for j in range(i+1, len(arr)):\n                    res = max(res, distance(arr[i], arr[j]))\n            # print(arr)\n            # print(res)\n            return res\n        \n        \n        def helper(byX, byY):\n            ans = math.inf\n            if byX[0] == byY[0]:\n                ans = min(ans, get_max_dis([byX[1], byX[-1], byY[1], byY[-1]]))\n            elif byX[0] == byY[-1]:\n                ans = min(ans, get_max_dis([byX[1], byX[-1], byY[0], byY[-2]]))\n            else:\n                ans = min(ans, get_max_dis([byX[1], byX[-1], byY[0], byY[-1]]))\n\n            if byX[-1] == byY[0]:\n                ans = min(ans, get_max_dis([byX[0], byX[-2], byY[1], byY[-1]]))\n            elif byX[-1] == byY[-1]:\n                ans = min(ans, get_max_dis([byX[0], byX[-2], byY[0], byY[-2]]))\n            else:\n                ans = min(ans, get_max_dis([byX[0], byX[-2], byY[0], byY[-1]]))\n            return ans\n        \n        n = len(points)\n        arrx = sorted(points, key=lambda x: x[0] + x[1])\n        arry = sorted(points, key=lambda x: x[0] - x[1])\n        # print(arrx)\n        # print(arry)\n        \n        r1 = helper(arrx, arry)\n        r2 = helper(arry, arrx)\n        return min(r1, r2)\n        \n        "
}