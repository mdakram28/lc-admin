{
    "username": "Shubham Parekh",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        if(k==1||k==3||k==9) {\n            return \"9\".repeat(n);\n        }\n        if(k==2) {\n            if(n==1)return \"8\";\n            return \"8\" + \"9\".repeat(n-2) + \"8\";\n        }\n        if(k==5) {\n            if(n==1)return \"5\";\n            return \"5\" + \"9\".repeat(n-2) + \"5\";\n        }\n        if(k==4) {\n            if(n==1)return \"8\";\n            if(n==2) return \"88\";\n            if(n==3) return \"888\";\n            return \"88\" + \"9\".repeat(n-4) + \"88\";\n        }\n        if(k==8) {\n            if(n==1)return \"8\";\n            if(n==2) return \"88\";\n            if(n==3) return \"888\";\n            if(n==4) return \"8888\";\n            if(n==5) return \"88888\";\n            return \"888\" + \"9\".repeat(n-6) + \"888\";\n        }\n        if(k==6) {\n            if(n==1)return \"6\";\n            if(n==2)return \"66\";\n            if(n%2==0) return \"8\" + \"9\".repeat((n-4)/2) + \"77\" + \"9\".repeat((n-4)/2) + \"8\";\n            else return \"8\" + \"9\".repeat((n-3)/2) + \"8\" + \"9\".repeat((n-3)/2) + \"8\";\n        }\n        if(n==1)return \"7\";\n        if(n==2) return \"77\";\n        String answer = \"\";\n        for(int i = 0;i<=9;i++) {\n            if(n%2==0) {\n                String num = \"9\".repeat((n-2)/2) + i + i +\"9\".repeat((n-2)/2);\n                int rem = remainderWith7(num);\n                if(rem == 0) answer = num;\n            } else {\n                String num = \"9\".repeat((n-1)/2)+ i +\"9\".repeat((n-1)/2);\n                int rem = remainderWith7(num);\n                if(rem == 0) answer = num;\n            }\n        }\n        return answer;\n    }\n\n    static int remainderWith7(String num)\n    {\n        // This series is used to \n        // find remainder with 7\n        int series[] = {1, 3, 2, -1, -3, -2};\n     \n        // Index of next element in series\n        int series_index = 0;\n     \n        // Initialize result\n        int result = 0; \n     \n        // Traverse num from end\n        for (int i = num.length() - 1; i >= 0; i--)\n        {\n            /* Find current digit of nun */\n            int digit = num.charAt(i) - '0';\n     \n            // Add next term to result\n            result += digit * series[series_index];\n     \n            // Move to next term in series\n            series_index = (series_index + 1) % 6;\n     \n            // Make sure that result never goes beyond 7.\n            result %= 7;\n        }\n     \n        // Make sure that remainder is positive\n        if (result < 0)\n        result = (result + 7) % 7;\n     \n        return result;\n    }\n     \n}",
    "submit_ts": "1723952391",
    "subm_id": "1359795145"
}