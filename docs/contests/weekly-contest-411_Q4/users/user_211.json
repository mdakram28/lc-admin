{
    "username": "Kirill S",
    "submission": "class Solution {\npublic:\n    string s;\n    int k;\n    int n;\n    vector<int> ones, zeros, onek, zerok;\n    vector<int> t;\n    vector<long long> sumt;\n\n    long long get_reverseQuery(int l, int r)\n    {\n        assert(r <= n && l >= 1);\n        long long sum = 0;\n/*\n        for (int i = l; i <= r; i ++)\n        {\n            int rbound = t[i];\n            //cout << i << \" \" << t[i] << endl;\n            if (rbound > r) break;\n            sum += max(0, r - rbound + 1);\n        }\n*/\n        int indr = lower_bound(t.begin(), t.end(), r + 1) - t.begin();\n        indr --;\n        indr = min(indr, r);\n\n        if (indr >= l)\n        {\n            // sum t[i] from l to indr\n            sum = sumt[indr] - sumt[l - 1];\n            sum = -sum;\n            sum += (r + 1) * 1ll * (indr - l + 1);\n        }\n\n        return sum;\n    }\n\n    long long getQuery(int l, int r)\n    {\n        assert(r <= n && l >= 1);\n\n        int n1 = r - l + 1;\n        long long xx = get_reverseQuery(l, r);\n        //cout << xx << endl;\n        return n1 * 1ll * (n1 + 1) / 2 - xx;\n    }\n\n    vector<long long> countKConstraintSubstrings(string s0, int k0, vector<vector<int>>& queries) {\n        s = s0, k = k0;\n        n = s.length();\n        cout << n << endl;\n        s = \"$\" + s;\n        ones.assign(n + 1, 0);\n        zeros.assign(n + 1, 0);\n        onek.assign(n + 1, 0);\n        zerok.assign(n + 1, 0);\n\n        for (int i = 1; i <= n; i ++)\n        {\n            ones[i] = (s[i] == '1');\n            zeros[i] = (s[i] == '0');\n            if (i > 0)\n            {\n                ones[i] += ones[i - 1];\n                zeros[i] += zeros[i - 1];\n            }\n        }\n\n        t.assign(n + 2, 0);\n        sumt.assign(n + 2, 0);\n        for (int i = 1; i <= n; i ++)\n        {\n            int left = ones[i - 1];\n            onek[i] = lower_bound(ones.begin(), ones.end(), left + k + 1) - ones.begin();\n\n            left = zeros[i - 1];\n            zerok[i] =  lower_bound(zeros.begin(), zeros.end(), left + k + 1) - zeros.begin();\n\n            t[i] = max(onek[i], zerok[i]);\n            sumt[i] = sumt[i - 1] + t[i];\n        }\n\n        //for (int i = 1; i <= n; i ++) cout << onek[i] << \" \";\n        cout << endl;\n        //for (int i = 1; i <= n; i ++) cout << zerok[i] << \" \";\n        cout << endl;\n\n        vector<long long> ans;\n        for (vector<int> x : queries)\n        {\n            ans.push_back(getQuery(x[0] + 1, x[1] + 1));\n            //cout << get_reverseQuery(x[0] + 1, x[1] + 1) << \" \" ;\n        }\n        cout << endl;\n\n        return ans;\n    }\n};",
    "submit_ts": "1723950967",
    "subm_id": "1359759732"
}