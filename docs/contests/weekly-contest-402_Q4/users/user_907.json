{
    "username": "zwling",
    "submission": "template <class S, S (*op)(S, S), S (*e)()> struct segtree {\n  public:\n    segtree() : segtree(0) {}\n    explicit segtree(int n) : segtree(std::vector<S>(n, e())) {}\n    explicit segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = 0;\n        while ((1 << log) < _n) ++log;\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    S get(int p) const {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n    }\n\n    S prod(int l, int r) const {\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n\n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n        return op(sml, smr);\n    }\n\n    S all_prod() const { return d[1]; }\n\n    template <bool (*f)(S)> int max_right(int l) const {\n        return max_right(l, [](S x) { return f(x); });\n    }\n    template <class F> int max_right(int l, F f) const {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!f(op(sm, d[l]))) {\n                while (l < size) {\n                    l = (2 * l);\n                    if (f(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*f)(S)> int min_left(int r) const {\n        return min_left(r, [](S x) { return f(x); });\n    }\n    template <class F> int min_left(int r, F f) const {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!f(op(d[r], sm))) {\n                while (r < size) {\n                    r = (2 * r + 1);\n                    if (f(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n\n  private:\n    int _n, size, log;\n    std::vector<S> d;\n\n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n/*\nclass S, S (*op)(S, S), S (*e)()\n*/\n\nstruct S {\n    int l0, l1, r1, r0, v, len;\n};\n\nS op(S a, S b) {\n    S c = {a.l0, a.l1, b.r1, b.r0, a.v + b.v, a.len + b.len};\n    if (a.len == 1 && b.len == 1) {\n        c.l0 = a.l0;\n        c.l1 = b.l0;\n        c.r1 = a.l0;\n        c.r0 = b.l0;\n        return c;\n    }\n    // c.v = a.v + b.v;\n    // if (c.len <= 2) {\n    //     return c;\n    // }\n    if (a.r0 > a.r1 && a.r0 > b.l0) c.v++;\n    if (b.l0 > b.l1 && b.l0 > a.r0) c.v++;\n    return c;\n}\nint inf = 2e9;\nS e() {\n    return {inf, inf, inf, inf, 0, 0};\n}\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& qu) {\n        int n = a.size();\n        segtree<S, op, e> seg(n);\n        for (int i = 0; i < n; i++) {\n            seg.set(i, {a[i], a[i], a[i], a[i], 0, 1});\n        }\n        // for (int i = 0; i + 2 < n; i++) {\n        //     cout << seg.prod(i, i + 3).v << \" \";\n        // }\n        // cout << seg.prod(0, 5).v << endl;\n        vector<int> ans;\n        for (auto q : qu) {\n            int op = q[0], l = q[1], r = q[2];\n            if (op == 1) {\n                ans.push_back(seg.prod(l, r + 1).v);\n            } else {\n                seg.set(l, {r, r, r, r, 0, 1});\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508473.0
}