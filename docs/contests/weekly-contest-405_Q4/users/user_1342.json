{
    "username": "aps_872003",
    "submission": "#include <unordered_map>\n#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        unordered_map<string, int> mp;\n        for (int i = 0; i < words.size(); ++i) {\n            if (mp.find(words[i]) == mp.end()) {\n                mp[words[i]] = costs[i];\n            } else {\n                mp[words[i]] = min(mp[words[i]], costs[i]);\n            }\n        }\n\n        int n = target.size();\n        vector<int> dp(n + 1, 1000000000);\n        dp[n] = 0;\n\n        for (int i = n - 1; i >= 0; --i) {\n            for (const auto& [word, cost] : mp) {\n                int word_len = word.size();\n                if (i + word_len <= n && equal(target.begin() + i, target.begin() + i + word_len, word.begin())) {\n                    dp[i] = min(dp[i], cost + dp[i + word_len]);\n                }\n            }\n        }\n\n        return dp[0] == 1000000000 ? -1 : dp[0];\n    }\n};\n",
    "submit_ts": "1720322780",
    "subm_id": "1312358933"
}