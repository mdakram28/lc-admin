{
    "username": "MenheraCapoo",
    "submission": "// class SegmentTree:\n//     def __init__(self, arr):\n//         self.n = len(arr)\n//         self.tree = [0] * (4 * self.n)\n//         self.build(arr, 0, 0, self.n-1)\n\n//     def build(self, arr, node, start, end):\n//         if start == end:\n//             self.tree[node] = arr[start]\n//         else:\n//             mid = (start + end) // 2\n//             self.build(arr, 2 * node + 1, start, mid)\n//             self.build(arr, 2 * node + 2, mid + 1, end)\n//             self.tree[node] = self.tree[2 * node + 1] & self.tree[2 * node + 2]\n\n//     def query(self, l, r):\n//         return self._query(0, 0, self.n - 1, l, r)\n\n//     def _query(self, node, start, end, l, r):\n//         if r < start or end < l:\n//             return sys.maxsize\n//         if l <= start and end <= r:\n//             return self.tree[node]\n//         mid = (start + end) // 2\n//         p1 = self._query(2 * node + 1, start, mid, l, r)\n//         p2 = self._query(2 * node + 2, mid + 1, end, l, r)\n//         return p1 & p2\n\n// class Solution:\n//     def minimumDifference(self, nums: List[int], k: int) -> int:\n//         n = len(nums)\n//         st = SegmentTree(nums)\n//         res = inf\n//         for i in range(n):\n//             l, r = i - 1, n - 1\n//             while r - l > 1:\n//                 m = (l + r) >> 1\n//                 if st.query(i, m) < k:\n//                     r = m\n//                 else:\n//                     l = m\n//             if l != i - 1:\n//                 res = min(res, abs(st.query(i, l) - k))\n//             res = min(res, abs(k - st.query(i, r)))\n//         return res\n        \n\nclass SegmentTree {\npublic:\n    int n;\n    vector<int> tree;\n    \n    SegmentTree(vector<int>& arr) {\n        n = arr.size();\n        tree = vector<int>(4 * n, 0);\n        build(arr, 0, 0, n-1);\n        \n    }\n    \n    void build(vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    \n    int query(int l, int r) {\n        return _query(0, 0, n-1, l, r);\n    }\n    \n    int _query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = _query(2 * node + 1, start, mid, l, r);\n        int p2 = _query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int res = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1;\n            while (r - l > 1) {\n                int m = (l + r) >> 1;\n                if (st.query(i, m) < k) {\n                    r = m;\n                } else {\n                    l = m;\n                }\n            }\n            if (l != i - 1) {\n                res = min(res, abs(st.query(i, l) - k));\n            }\n            res = min(res, abs(k - st.query(i, r)));\n        }\n        return res;\n    }\n};",
    "submit_ts": "1717298581",
    "subm_id": "1274784039"
}