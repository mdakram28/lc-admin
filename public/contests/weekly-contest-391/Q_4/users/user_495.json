{
    "username": "FreeYourMind",
    "submission": "from string import *\nfrom re import *\nfrom datetime import *\nfrom collections import *\nfrom heapq import *\nfrom bisect import *\nfrom copy import *\nfrom math import *\nfrom random import *\nfrom statistics import *\nfrom itertools import *\nfrom functools import *\nfrom operator import *\nfrom io import *\nfrom sys import *\nfrom json import *\nfrom builtins import *\nfrom typing import *\n\n\"\"\"\nYou are given a 0-indexed array points representing integer coordinates of some points on a 2D\nplane, where points[i] = [xi, yi].\n\nThe distance between two points is defined as their Manhattan distance.\n\nReturn the minimum possible value for maximum distance between any two points by removing exactly\none point.\n\n\u00a0\n\nExample 1:\n\n\nInput: points = [[3,10],[5,15],[10,2],[4,4]]\nOutput: 12\nExplanation: The maximum distance after removing each point is the following:\n- After removing the 0th point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18.\n- After removing the 1st point the maximum distance is between points (3, 10) and (10, 2), which is |3 - 10| + |10 - 2| = 15.\n- After removing the 2nd point the maximum distance is between points (5, 15) and (4, 4), which is |5 - 4| + |15 - 4| = 12.\n- After removing the 3rd point the maximum distance is between points (5, 15) and (10, 2), which is |5 - 10| + |15 - 2| = 18.\nIt can be seen that 12 is the minimum possible maximum distance between any two points after removing exactly one point.\n\n\nExample 2:\n\n\nInput: points = [[1,1],[1,1],[1,1]]\nOutput: 0\nExplanation: It can be seen that removing any of the points results in the maximum distance between any two points of 0.\n\n\n\u00a0\n\nConstraints:\n\n * 3 <= points.length <= 105\n * points[i].length == 2\n * 1 <= points[i][0], points[i][1] <= 108\n\"\"\"\n\nMOD = 1000000007  # 998244353\n\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        xay, xsy = defaultdict(list), defaultdict(list)\n\n        for i, (x, y) in enumerate(points):\n            xay[x + y].append(i)\n            xsy[x - y].append(i)\n\n        ka = sorted(xay)\n        ks = sorted(xsy)\n        ahi, alo = ka[-1], ka[0]\n        shi, slo = ks[-1], ks[0]\n\n        res = max(ahi - alo, shi - slo)\n        if len(xay[ahi]) == 1:\n            i = xay[ahi][0]\n            tr = ka[-2] - alo\n            if len(xsy[shi]) == 1 and xsy[shi][0] == i:\n                tr = max(tr, ks[-2] - slo)\n            elif len(xsy[slo]) == 1 and xsy[slo][0] == i:\n                tr = max(tr, shi - ks[1])\n            else:\n                tr = max(tr, shi - slo)\n            res = min(res, tr)\n        if len(xay[alo]) == 1:\n            i = xay[alo][0]\n            tr = ahi - ka[1]\n            if len(xsy[shi]) == 1 and xsy[shi][0] == i:\n                tr = max(tr, ks[-2] - slo)\n            elif len(xsy[slo]) == 1 and xsy[slo][0] == i:\n                tr = max(tr, shi - ks[1])\n            else:\n                tr = max(tr, shi - slo)\n            res = min(res, tr)\n        if len(xsy[shi]) == 1:\n            i = xsy[shi][0]\n            tr = ks[-2] - slo\n            if len(xay[ahi]) == 1 and xay[ahi][0] == i:\n                tr = max(tr, ka[-2] - alo)\n            elif len(xay[alo]) == 1 and xay[alo][0] == i:\n                tr = max(tr, ahi - ka[1])\n            else:\n                tr = max(tr, ahi - alo)\n            res = min(res, tr)\n        if len(xsy[slo]) == 1:\n            i = xsy[slo][0]\n            tr = shi - ks[1]\n            if len(xay[ahi]) == 1 and xay[ahi][0] == i:\n                tr = max(tr, ka[-2] - alo)\n            elif len(xay[alo]) == 1 and xay[alo][0] == i:\n                tr = max(tr, ahi - ka[1])\n            else:\n                tr = max(tr, ahi - alo)\n            res = min(res, tr)\n        return res\n\n\ntestcases = [\n    # [[[9, 3], [5, 4], [6, 1], [10, 10]]],\n    # [],\n]\n\ns = Solution()\nfunc_name = dir(s)[-1]\nfunc = getattr(s, func_name)\n\nfor args in testcases:\n    print(func(*args))\n"
}