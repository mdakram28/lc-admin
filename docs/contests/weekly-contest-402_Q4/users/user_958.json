{
    "username": "user3593Z",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        \n        int n = nums.length;\n        BIT bit = new BIT(n + 1);\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                bit.update(1, i + 1);\n            }\n        }\n        List<Integer> result = new ArrayList<>();\n        \n        for (int i = 0; i < queries.length; i++) {\n            if (queries[i][0] == 1) {\n                if (queries[i][2] - queries[i][1] < 2) {\n                    result.add(0);\n                } else {\n                    result.add(bit.get(queries[i][2]) - bit.get(queries[i][1] + 1));\n                }\n            } else {\n                int ci = queries[i][1];\n                int target = queries[i][2];\n                Map<Integer, Integer> beforeMap = new HashMap<>();\n                for (int x = -1; x <= 1; x++) {\n                    int center = ci + x;\n                    if (center > 0 && center < n - 1) {\n                        int before = nums[center] > nums[center - 1] && nums[center] > nums[center + 1] ? 1 : 0;\n                        beforeMap.put(center, before);\n                    }\n                }\n                nums[ci] = target;\n                Map<Integer, Integer> afterMap = new HashMap<>();\n                for (int x = -1; x <= 1; x++) {\n                    int center = ci + x;\n                    if (center > 0 && center < n - 1) {\n                        int before = nums[center] > nums[center - 1] && nums[center] > nums[center + 1] ? 1 : 0;\n                        afterMap.put(center, before);\n                    }\n                }\n                \n                for (Map.Entry<Integer, Integer> entry : beforeMap.entrySet()) {\n                    int bf = entry.getValue();\n                    int af = afterMap.get(entry.getKey());\n                    bit.update(af - bf, entry.getKey() + 1);\n                }\n            }\n        }\n        \n        return result;\n        \n    }\n    \n    static class BIT {\n        final int size;\n        final int[] array; // 1 indexed\n\n        public BIT(int size) {\n            this.size = size;\n            array = new int[size + 1];\n        }\n\n        public void update(int value, int position) {\n            while (position <= size) {\n                array[position] += value;\n                position += (position & (-position));\n            }\n        }\n\n        public int get(int position) {\n            int result = 0;\n            while (position <= size && position > 0) {\n                result += array[position];\n                position -= (position & (-position));\n            }\n            return result;\n        }\n\n    }\n}",
    "submit_ts": 1718507995.0
}