{
    "username": "nafnil",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<int[]> heap = new PriorityQueue<>((a,b)->b[0]-a[0]);\n        for (int i = 0; i < horizontalCut.length; i++) {\n            heap.add(new int[]{horizontalCut[i], 0, i});\n        }\n        for (int i = 0; i < verticalCut.length; i++) {\n            heap.add(new int[]{verticalCut[i], 1, i});\n        }\n        long cnth = 1, cntv = 1, re = 0;\n        while (!heap.isEmpty()) {\n            int[] poll = heap.poll();\n            if (poll[1]==0) {\n                re += poll[0] * cntv;\n                cnth++;\n            } else {\n                re += poll[0] * cnth;\n                cntv++;\n            }\n        }\n        return re;\n    }\n}",
    "submit_ts": "1720925210",
    "subm_id": "1320246859"
}