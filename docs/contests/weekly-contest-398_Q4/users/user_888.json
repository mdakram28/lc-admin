{
    "username": "jason_wong1",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        if (k == 0) {\n            return 2;\n        }\n        long[][] nchoosek = new long[32][32];\n        Arrays.fill(nchoosek[0], 0);\n        nchoosek[0][0] = 1;\n        for (int n1 = 1; n1 <= 31; n1++) {\n            for (int k1 = 0; k1 < n1; k1++) {\n                nchoosek[n1][k1] = nchoosek[n1 - 1][k1];\n                if (k1 >= 1) {\n                    nchoosek[n1][k1] += nchoosek[n1 - 1][k1 - 1];\n                }\n            }\n            nchoosek[n1][n1] = 1;\n        }\n        \n        int res = 0;\n        \n        int x = 0;\n        while (true) {\n            // System.out.println(\"x\");\n            int yMin = Math.max(0, x - 1);\n            if (minK(yMin, x) > k) {\n                break;\n            }\n            \n            int y = getY(k, x);\n            if (y >= yMin) {\n                res += nchoosek[y + 1][x];\n            }\n            \n            x++;\n        }\n        \n        return res;\n    }\n    \n    private long minK(int y, int x) {\n        long res = 1;\n        for (int t = 0; t < y; t++) {\n            res <<= 1;\n        }\n        res -= x;\n        return res;\n    }\n    \n    private int getY(int k, int x) {\n        long target = k + x;\n        int y = 0;\n        long cur = 1;\n        while (cur < target) {\n            cur *= 2;\n            y++;\n        }\n        \n        if (cur == target) {\n            return y;\n        } else {\n            return -1;\n        }\n    }\n}",
    "submit_ts": 1716089815.0
}