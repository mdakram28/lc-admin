{
    "username": "freaq_3009",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n    priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n    // Initial pieces to consider\n    long long hPieces = 1; // Initial horizontal pieces\n    long long vPieces = 1; // Initial vertical pieces\n\n    long long totalCost = 0;\n\n    // While we have cuts to make\n    while (!hCuts.empty() || !vCuts.empty()) {\n        // Decide which cut to make\n        if (!hCuts.empty() && (vCuts.empty() || hCuts.top() >= vCuts.top())) {\n            totalCost += hCuts.top() * vPieces; // Make horizontal cut\n            hCuts.pop();\n            hPieces++; // Increase number of horizontal pieces\n        } else {\n            totalCost += vCuts.top() * hPieces; // Make vertical cut\n            vCuts.pop();\n            vPieces++; // Increase number of vertical pieces\n        }\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925741",
    "subm_id": "1320264714"
}