{
    "username": "032_Himanshu",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n    if (k > n) return 0; // No valid group possible if k is larger than the array size\n\n    // Step 1: Precompute whether each pair of consecutive elements alternates\n    vector<bool> alternates(n);\n    for (int i = 0; i < n; ++i) {\n        alternates[i] = (colors[i] != colors[(i + 1) % n]);\n    }\n\n    // Step 2: Use a sliding window to count valid k-sized groups\n    int count = 0;\n    int validPairs = 0;\n\n    // Count the initial window\n    for (int i = 0; i < k - 1; ++i) {\n        if (alternates[i]) {\n            validPairs++;\n        }\n    }\n    if (validPairs == k - 1) {\n        count++;\n    }\n\n    // Slide the window over the array\n    for (int i = 1; i < n; ++i) {\n        // Remove the influence of the element that is sliding out\n        if (alternates[(i - 1) % n]) {\n            validPairs--;\n        }\n        // Add the influence of the new element that is sliding in\n        if (alternates[(i + k - 2) % n]) {\n            validPairs++;\n        }\n        // Check if the current window is valid\n        if (validPairs == k - 1) {\n            count++;\n        }\n    }\n\n    return count;\n    }\n};",
    "submit_ts": "1720277533",
    "subm_id": "1311668167"
}