{
    "username": "spike02",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n\n        int steps = 0, countOne = 0, equal = 0;\n        for (int i=0; i<=m/2-(m%2==0); i++) {\n            for (int j=0; j<=n/2-(n%2==0); j++) {\n                int x1 = i, y1 = j;\n                int x2 = m-1-i, y2 = j;\n                int x3 = i, y3 = n-1-j;\n                int x4 = m-1-i, y4 = n-1-j;\n                int cz = 0, co = 0;\n\n\n                if (x1 == x2 && y1 == y3) {\n                    if (grid[x1][y1] == 1) steps++;\n                }\n                else if (x1 == x2) {\n                    if (grid[x1][y1] == 1) co++;\n                    else cz++;\n                    if (grid[x3][y3] == 1) co++;\n                    else cz++;\n                    int done = 2-co;\n                    int dzero = 2-cz;\n                    if (done == dzero) {\n                        countOne += 2;\n                        steps += done;\n                        equal += done;\n                    }\n                    else if (done < dzero) {\n                        countOne+=2;\n                        steps += done;\n                    }\n                    else {\n                        steps += dzero;\n                    }\n                }\n                else if (y1 == y3) {\n                    if (grid[x1][y1] == 1) co++;\n                    else cz++;\n                    if (grid[x2][y2] == 1) co++;\n                    else cz++;\n                    int done = 2-co;\n                    int dzero = 2-cz;\n                    if (done == dzero) {\n                        countOne += 2;\n                        steps += done;\n                        equal += done;\n                    }\n                    else if (done < dzero) {\n                        countOne+=2;\n                        steps += done;\n                    }\n                    else {\n                        steps += dzero;\n                    }\n                }\n                else {\n                    if (grid[x1][y1] == 1) co++;\n                    else cz++;\n                    if (grid[x2][y2] == 1) co++;\n                    else cz++;\n                    if (grid[x3][y3] == 1) co++;\n                    else cz++;\n                    if (grid[x4][y4] == 1) co++;\n                    else cz++;\n                    int done = 4-co;\n                    int dzero = 4-cz;\n                    if (done < dzero) {\n                        steps += done;\n                    }\n                    else {\n                        steps += dzero;\n                    }\n                }\n            }\n        }\n        int totalSize = m * n;\n        int countZero = totalSize - countOne;\n        \n        if (countOne % 4 == 0) return steps;\n        else {\n            assert(countOne % 4 == 2);\n            if (equal >= 1) return steps;\n            else return steps + 2;\n        }\n    }\n};",
    "submit_ts": "1722699771",
    "subm_id": "1343221841"
}