{
    "username": "YUFENGWANG",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        self.build(data)\n\n    def build(self, data):\n        for i in range(self.n):\n            self.tree[self.n + i] = data[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1]\n\n    def update(self, index, value):\n        pos = index + self.n\n        self.tree[pos] = value\n        while pos > 1:\n            pos >>= 1\n            self.tree[pos] = self.tree[pos << 1] + self.tree[pos << 1 | 1]\n\n    def query(self, l, r):\n        res = 0\n        l += self.n\n        r += self.n + 1\n        while l < r:\n            if l & 1:\n                res += self.tree[l]\n                l += 1\n            if r & 1:\n                r -= 1\n                res += self.tree[r]\n            l >>= 1\n            r >>= 1\n        return res\n\ndef is_peak(nums, i):\n    if 0 < i < len(nums) - 1:\n        return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n    return False\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        peaks = [1 if is_peak(nums, i) else 0 for i in range(n)]\n        seg_tree = SegmentTree(peaks)\n        result = []\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                if l == r or l == r - 1:\n                    result.append(0)\n                else:\n                    result.append(seg_tree.query(l + 1, r - 1))\n            elif query[0] == 2:\n                idx, value = query[1], query[2]\n                nums[idx] = value\n                for i in range(max(1, idx - 1), min(n - 1, idx + 2)):\n                    seg_tree.update(i, 1 if is_peak(nums, i) else 0)\n\n        return result",
    "submit_ts": 1718506259.0
}