{
    "username": "predator_11",
    "submission": "class Solution:\n    def __init__(self):\n        self.memo = {}\n    def waysToReachStair(self, target: int) -> int:\n        return self._calculate_ways(target, current_pos=1, current_jump=0, can_jump_back=True)\n    def _calculate_ways(self, target: int, current_pos: int, current_jump: int, can_jump_back: bool) -> int:\n        if self._is_position_out_of_bounds(current_pos, target) or self._is_jump_too_large(current_jump):\n            return 0\n        if self._is_memoized(current_pos, current_jump, can_jump_back):\n            return self.memo[(current_pos, current_jump, can_jump_back)]\n        ways = self._base_case(current_pos, target)\n        if can_jump_back:\n            ways += self._calculate_ways(target, current_pos - 1, current_jump, can_jump_back=False)\n        if current_pos + (1 << current_jump) <= target + 1:\n            ways += self._calculate_ways(target, current_pos + (1 << current_jump), current_jump + 1, can_jump_back=True)\n        self._memoize(current_pos, current_jump, can_jump_back, ways)\n        return ways\n    def _is_position_out_of_bounds(self, current_pos: int, target: int) -> bool:\n        return current_pos > target + 5\n    def _is_jump_too_large(self, current_jump: int) -> bool:\n        return current_jump > 31\n    def _is_memoized(self, current_pos: int, current_jump: int, can_jump_back: bool) -> bool:\n        return (current_pos, current_jump, can_jump_back) in self.memo and self.memo[(current_pos, current_jump, can_jump_back)] != -1\n    def _base_case(self, current_pos: int, target: int) -> int:\n        return 1 if current_pos == target else 0\n    def _memoize(self, current_pos: int, current_jump: int, can_jump_back: bool, ways: int):\n        self.memo[(current_pos, current_jump, can_jump_back)] = ways",
    "submit_ts": "1716089625",
    "subm_id": "1261847207"
}