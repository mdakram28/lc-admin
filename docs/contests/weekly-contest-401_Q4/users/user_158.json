{
    "username": "thesycat",
    "submission": "class Solution:\n    \n    def maxTotalReward(self, rewardValues: List[int]) -> int:\n        rewardValues = sorted(set(rewardValues))  \n        \n        rvset = set(rewardValues)\n        \n        # Get as close to max_left w/out going over.\n        @cache\n        def backwards(max_left):\n            if max_left == 0:\n                return 0\n            if max_left in rvset:\n                return max_left\n            #idx = bisect.bisect_left(rewardValues, max_left)\n            \n            out = 0\n            for i in range(len(rewardValues)):\n                v = rewardValues[i]\n                            \n                ml = min(max_left-v, v-1)\n                if ml < 0:\n                    break\n\n                vv = backwards(ml) + v\n                out = max(out, vv)\n                if out == max_left:\n                    break\n            return out\n            \n            \n        return backwards(rewardValues[-1]-1) + rewardValues[-1]\n        \n    def maxTotalReward0(self, rewardValues: List[int]) -> int:\n        rewardValues = sorted(set(rewardValues))\n        \n        @cache\n        def opt(reward_so_far):\n            idx = bisect.bisect_right(rewardValues, reward_so_far)\n            \n            out = reward_so_far\n            \n            if idx >= len(rewardValues):\n                return out\n            \n            for i in range(idx, len(rewardValues) - 1):\n                v = reward_so_far + rewardValues[i]\n                if v >= rewardValues[-1]:\n                    break\n                out = max(out, opt(v))\n            \n            out = max(out, opt(rewardValues[-1] + reward_so_far))\n            return out\n        return opt(0)\n                \n        \n        ",
    "submit_ts": 1717903854.0
}