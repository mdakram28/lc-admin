{
    "username": "1zfsKVMS2F",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int cost;\n    TrieNode() : children(26, nullptr), cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    long long computeHash(const string& s) {\n        long long hash = 0;\n        long long power = 1;\n        for (char c : s) {\n            hash += (c - 'a' + 1) * power;\n            power *= 26;\n        }\n        return hash;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         TrieNode* root = new TrieNode();\n        \n        // Build Trie\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children[c - 'a']) {\n                    node->children[c - 'a'] = new TrieNode();\n                }\n                node = node->children[c - 'a'];\n            }\n            node->cost = min(node->cost, costs[i]);\n        }\n        \n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX / 2);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX / 2) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (node->cost < INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX / 2 ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323331",
    "subm_id": "1312372974"
}