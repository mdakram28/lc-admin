{
    "username": "ernestlu",
    "submission": "class Solution {\npublic:\n    using ll = long long;\n    int waysToReachStair(int k) {\n        ll l = 1, r = 1;\n        ll ans = 0;\n        if (k == 1 or k == 0)\n            ans++;\n        \n        vector c(44, vector<ll>(44, 0));\n        for (int i = 0; i < 44; i++) {\n            for (int j = 0; j <= i; j++) {\n                if (i == 0) {\n                    c[i][j] = 1;\n                } else if (j == 0) {\n                    c[i][j] = 1;\n                } else {\n                    c[i][j] = c[i - 1][j] + c[i - 1][j - 1];\n                }\n            }\n        }\n      \n        auto C = [&](ll n, ll k) -> ll {\n            if (n < k or k < 0)\n                return 0;\n            return c[n][k];\n        };\n        \n        ll num_sub = 2;\n        for (ll base_val = 2, num_sub = 2; base_val < (1LL << 40); base_val *= 2, num_sub++) {\n            // add one power of 2\n            ll cnt_sub = base_val - k;\n            ll positions = C(num_sub, cnt_sub);\n            // cout << num_sub << \" \" << cnt_sub << '\\n';\n            ans += positions;\n        }\n       \n        return ans;\n    }\n};",
    "submit_ts": "1716087399",
    "subm_id": "1261782462"
}