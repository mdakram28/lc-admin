{
    "username": "vishnoichirag1",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        if (node->cost == -1) {\n            node->cost = cost;\n        } else {\n            node->cost = min(node->cost, cost);\n        }\n    }\n\n    int getCost(const string& word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                return -1;\n            }\n            node = node->children[c];\n        }\n        return node->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = costs.size();\n\n        for (int i = 0; i < n; ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int m = target.size();\n        vector<long long> dp(m + 1, 1e15);\n        dp[0] = 0;\n\n        for (int i = 0; i < m; ++i) {\n            if (dp[i] == 1e15) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < m; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[m] == 1e15 ? -1 : dp[m];\n    }\n};\n",
    "submit_ts": "1720322685",
    "subm_id": "1312356430"
}