{
    "username": "h_bugw7",
    "submission": "class UnionFind {\n    vector<int> root;\n    vector<int> count;\npublic:\n    UnionFind(int n): root(n, -1), count(n, 0) { }\n    int getRoot(int a) {\n        if(root[a] == -1 || root[a] == a) return a;\n        root[a] = getRoot(root[a]);\n        return root[a];\n    }\n    void add(int a, int b) {\n        int ra = getRoot(a);\n        int rb = getRoot(b);\n        if(count[ra] > count[rb]) {\n            root[rb] = ra;\n            count[ra] += count[rb];\n        } else {\n            root[ra] = rb;\n            count[rb] += count[ra];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool isTouched(vector<int>& c1, vector<int>& c2) {\n        double d = sqrt(pow(double(c1[0] - c2[0]), 2) + pow(double(c1[1] - c2[1]), 2));\n        return d <= c1[2] + c2[2];\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        UnionFind uf(circles.size());\n        for(int i = 0; i < circles.size(); i++) {\n            for(int j = i+1; j < circles.size(); j++) {\n                if(isTouched(circles[i], circles[j])) {\n                    uf.add(i, j);\n                }\n            }\n        }\n        unordered_map<int, int> mp;\n        for(int i = 0; i < circles.size(); i++) {\n            int root = uf.getRoot(i);\n            bool L = abs(circles[i][0]) <= circles[i][2];\n            bool D = abs(circles[i][1]) <= circles[i][2];\n            bool R = abs(circles[i][0] - X) <= circles[i][2];\n            bool U = abs(circles[i][1] - Y) <= circles[i][2];\n            int val = int(L || U) * 2 + int(R || D);\n            mp[root] |= val;\n        }\n        for(auto& p: mp) {\n            if(p.second == 3) return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137822",
    "subm_id": "1335774688"
}