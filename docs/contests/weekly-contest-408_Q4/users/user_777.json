{
    "username": "u_nikk",
    "submission": "class Solution {\n    vector<vector<int>> merge(vector<vector<int>>& inte) {\n        sort(inte.begin(),inte.end());\n        vector<vector<int>>ans;\n        int n=inte.size();\n        stack<vector<int>>s;\n        \n        for(int i=n-1; i>=0; i--)\n        {\n            s.push(inte[i]);\n        }\n        \n        while(s.size()>=2)\n        {\n            vector<int>p,q;\n            p=s.top();\n            s.pop();\n            q=s.top();\n            s.pop();\n            if(p[1]>=q[0])\n            {\n                p[1]=max(p[1],q[1]);\n                s.push(p);\n            }\n            else\n            {\n                ans.push_back(p);\n                s.push(q);\n            }\n        }\n        ans.push_back(s.top());\n        return ans;\n    }\n    \n    int bfs(const vector<vector<int>> &graph, int start, int target1, int target2, int nodes) \n    {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    \n    void changes(int circleCount, vector<vector<int>>&graph,vector<pair<pair<int, int>, int>>&circlePair,int Y, int X,vector<vector<int>>& inputCircles)\n    {\n        for (int i = 0; i < circleCount; ++i) {\n            circlePair[i] = {{inputCircles[i][0], inputCircles[i][1]}, inputCircles[i][2]};\n\n            if (circlePair[i].first.first <= circlePair[i].second) {\n                graph[circleCount].push_back(i);\n                graph[i].push_back(circleCount);\n            }\n            if (X - circlePair[i].first.first <= circlePair[i].second) {\n                graph[circleCount + 2].push_back(i);\n                graph[i].push_back(circleCount + 2);\n            }\n            if (circlePair[i].first.second <= circlePair[i].second) {\n                graph[circleCount + 1].push_back(i);\n                graph[i].push_back(circleCount + 1);\n            }\n            if (Y - circlePair[i].first.second <= circlePair[i].second) {\n                graph[circleCount + 3].push_back(i);\n                graph[i].push_back(circleCount + 3);\n            }\n        }\n        \n        for (int i = 0; i < circleCount; ++i) {\n            for (int j = i + 1; j < circleCount; ++j) {\n                double distance = sqrt(pow(circlePair[i].first.first - circlePair[j].first.first, 2) + pow(circlePair[i].first.second - circlePair[j].first.second, 2));\n                if (circlePair[i].second + circlePair[j].second >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n    public:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& inputCircles) {\n        \n        int circleCount = inputCircles.size();\n        vector<vector<int>> graph(inputCircles.size() + 4);\n        vector<pair<pair<int, int>, int>> circlePair(inputCircles.size());\n        \n        changes(circleCount,graph,circlePair,Y,X,inputCircles);\n        \n        \n        \n        int ans = 0;\n        ans = max(ans, bfs(graph, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4));\n        ans = max(ans, bfs(graph, circleCount, circleCount + 1, circleCount + 2, circleCount + 4)); \n        \n        \n        return !ans;\n        \n    }\n};",
    "submit_ts": "1722138891",
    "subm_id": "1335802347"
}