{
    "username": "0222_",
    "submission": "/*----------------------- \u5355\u70b9\u4fee\u6539, \u533a\u95f4\u67e5\u8be2\uff0c\u7ebf\u6bb5\u6811 begin -----------------------*/\ntemplate<typename Info>\nstruct SegmentTree {\n    int n;\n    vector<Info> info;  // \u7ebf\u6bb5\u6811\u8282\u70b9\u4e2d\u5b58\u50a8\u7684\u4fe1\u606f\n\n    void up(int k) {\n        info[k] = info[k << 1] + info[k << 1 | 1];\n    }\n\n    // \u521d\u59cb\u5316 4 \u88ab\u7a7a\u95f4\n    SegmentTree(int n_, vector<Info>& init_): n(n_) {\n        info.assign(n * 4, Info());\n        function<void(int, int, int)> build = [&](int k, int s, int t) {\n            // \u7ec8\u6b62\u6761\u4ef6: \u5230\u8fbe\u53f6\u5b50\u8282\u70b9\n            if (s == t) {\n                info[k] = init_[s];\n                return ;\n            }\n            // \u5206\u522b\u521d\u59cb\u5316\u5de6\u53f3\u513f\u5b50\n            int mid = (s + t) >> 1;\n            build(k << 1, s, mid);\n            build(k << 1 | 1, mid + 1, t);\n            \n            // \u521d\u59cb\u5316\u5de6\u53f3\u513f\u5b50\u7ed3\u675f\u540e, \u66f4\u65b0\u7236\u8282\u70b9\n            up(k);\n        };\n        build(1, 1, n);\n    }\n\n    // \u5355\u70b9\u66f4\u65b0: \u5c06 a[p] \u66f4\u65b0\u4e3a v\n    void update(int k, int s, int t, int p, Info v) {\n        // \u7ec8\u6b62\u6761\u4ef6: \u5230\u8fbe\u53f6\u5b50\u8282\u70b9\n        if (s == t) {\n            // \u6ce8\u610f: \u5355\u70b9\u66f4\u65b0\u7684\u65f6\u5019, \u8fd9\u91cc\u662f\u8d4b\u503c\u64cd\u4f5c\n            // \u5982\u679c\u9898\u76ee\u662f\u52a0\u6cd5\u64cd\u4f5c, \u9700\u8981\u4fee\u6539\u8fd9\u91cc\n            info[k] = v;\n            return ;\n        }\n        // \u5411\u5de6\u53f3\u513f\u5b50\u9012\u5f52\n        int mid = (s + t) >> 1;\n        if (p <= mid) update(k << 1, s, mid, p, v);\n        else update(k << 1 | 1, mid + 1, t, p, v);\n    \n        // \u7528\u66f4\u65b0\u5b8c\u540e\u7684\u513f\u5b50\u8282\u70b9, \u6765\u66f4\u65b0\u7236\u8282\u70b9\n        up(k);\n    }\n\n    // \u5355\u70b9\u66f4\u65b0: \u5c06 a[p] \u66f4\u65b0\u4e3a v\n    void update(int p, Info v) {\n        update(1, 1, n, p, v);\n    }\n\n    // \u533a\u95f4\u67e5\u8be2: \u67e5\u8be2 [l, r] \u7684\u503c\n    Info query(int k, int s, int t, int l, int r) {\n        // \u7ec8\u6b62\u6761\u4ef6: \u533a\u95f4\u4e0d\u76f8\u4ea4, \u8fd4\u56de\u9ed8\u8ba4\u503c\n        if (t < l || s > r) return Info();\n        // \u7ec8\u6b62\u6761\u4ef6: [s, t] \u5b8c\u5168\u5305\u542b\u5728 [l, r] \u4e2d\n        if (s >= l && t <= r) return info[k];\n\n        // \u5206\u522b\u67e5\u8be2\u5de6\u53f3\u513f\u5b50\n        int mid = (s + t) >> 1;\n        return query(k << 1, s, mid, l, r) + query(k << 1 | 1, mid + 1, t, l, r);\n    }\n\n    // \u533a\u95f4\u67e5\u8be2\n    Info query(int l, int r) {\n        return query(1, 1, n, l, r);\n    }\n\n    void print(int k, int s, int t, int d = 0) {\n        int mid = (s + t) / 2;\n        if (s != t) print(k << 1, s, mid, d + 1);\n        for (int i = 0; i < d; ++i) cout << '\\t';\n        cout << info[k].mini << \":\" << info[k].maxi <<  \":\" << info[k].sum << '\\n';  \n        if (s != t) print(k << 1 | 1, mid + 1, t, d + 1);      \n    }\n\n    // print(1); \u6253\u5370\u6574\u4e2a\u7ebf\u6bb5\u6811\n    void print(int k) {\n        print(1, 1, n, 0);\n    }\n};\n\n// \u7ebf\u6bb5\u6811\u8282\u70b9\u5b58\u50a8\u7684\u4fe1\u606f\nstruct Info {\n    int cnt = 0;\n};\n\n// \u5b9e\u73b0 2 \u4e2a Info \u7684\u5408\u5e76, \u7528\u5728 up() \u4e2d\nInfo operator+(Info a, Info b) {\n    return {a.cnt + b.cnt};\n}\n/*----------------------- \u5355\u70b9\u4fee\u6539, \u533a\u95f4\u67e5\u8be2\uff0c\u7ebf\u6bb5\u6811 end -------------------------*/\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& A, vector<vector<int>>& q) {\n        int n = A.size(), m = q.size();\n        vector<int> a(n + 1, 0);\n        vector<Info> b(n + 1, {0});\n        for (int i = 1; i <= n; i++) a[i] = A[i - 1];\n        for (int i = 2; i < n; i++) if (a[i - 1] < a[i] && a[i] > a[i + 1]) b[i].cnt = 1;\n        SegmentTree<Info> seg(n, b);\n        \n        // seg.print(1);\n        \n        vector<int> ans;\n        for (int i = 0; i < m; i++) {\n            int c = q[i][0];\n            // cout << \"i= \" << i << '\\n';\n            if (c == 1) {\n                int l = q[i][1] + 1, r = q[i][2] + 1;\n                int res = seg.query(l, r).cnt;\n                // cout << \"l= \" << l << \", r= \" << r << \", \" << b[l].cnt << \" \" << b[r].cnt << '\\n';\n                if (b[l].cnt) res--;\n                if (r > l && b[r].cnt) res--;\n                ans.push_back(res);\n            } else {\n                int p = q[i][1] + 1, v = q[i][2];\n                // if (p == 3) cout << \"p= \" << p << \", v= \" << v << \", \" << a[p - 2] << \" \" << a[p - 1] << '\\n';\n                if (p - 1 >= 1 && v > a[p - 1] && p + 1 <= n && v > a[p + 1]) seg.update(p, {1}), b[p] = {1};\n                else seg.update(p, {0}), b[p] = {0};\n                if (p - 1 >= 1) {\n                    if (p - 2 >= 1 && a[p - 1] > a[p - 2] && a[p - 1] > v) seg.update(p - 1, {1}), b[p - 1] = {1};\n                    else seg.update(p - 1, {0}), b[p - 1] = {0};\n                }\n                if (p + 1 <= n) {\n                    if (p + 2 <= n && a[p + 1] > a[p + 2] && a[p + 1] > v) seg.update(p + 1, {1}), b[p + 1] = {1};\n                    else seg.update(p + 1, {0}), b[p + 1] = {0};\n                }\n                a[p] = v;\n            }\n            // for (int j = 1; j <= n; j++) cout << a[j] << ' ';\n            // cout << '\\n';\n            // for (int j = 1; j <= n; j++) cout << b[j].cnt << ' ';\n            // cout << '\\n';\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507749.0
}