{
    "username": "dnuj4097",
    "submission": "import math\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        def minheight(edges):\n            n = len(edges) + 1\n            adj = defaultdict(list)\n            for a,b in edges:\n                adj[a].append(b)\n                adj[b].append(a)\n            height = [[0,0] for _ in range(n)]\n\n            # Construct a tree rooted at node 0 and denote it as\n            # the canonical tree.\n            # First pass: Find the height of each subtree of the\n            # canonical tree.\n            def helper1(node):\n                nonlocal adj, visited, height\n                visited.add(node)\n                for child in adj[node]:\n                    if child not in visited:\n                        h = helper1(child) + 1\n                        if h > height[node][0]:\n                            height[node] = [h, height[node][0]]\n                        elif h > height[node][1]:\n                            height[node][1] = h\n                return height[node][0]\n\n            visited = set()\n            helper1(0)\n\n            # Second pass: Find the height of the tree rooted at\n            # each node.\n            def helper2(node, h):\n                # h is the maximum # of edges on a path from node to\n                # any leaf on the canonical tree outside of the\n                # subtree rooted at node.\n                nonlocal adj, visited, height, min_h, max_h\n                visited.add(node)\n                # hn is the height of tree rooted at node.\n                hn = max(height[node][0], h)\n                min_h, max_h = min(hn, min_h), max(hn, max_h)\n                for child in adj[node]:\n                    if child not in visited:\n                        if height[child][0] + 1 == height[node][0]:\n                            hc = max(h + 1, height[node][1] + 1)\n                        else:\n                            hc = max(h + 1, height[node][0] + 1)\n                        helper2(child, hc)\n\n            visited = set()\n            min_h, max_h = math.inf, 0\n            helper2(0,0)\n            return min_h, max_h\n        \n        min1, max1 = minheight(edges1)\n        min2, max2 = minheight(edges2)\n        return max(max1, max2, min1 + min2 + 1)",
    "submit_ts": "1719717868",
    "subm_id": "1304402812"
}