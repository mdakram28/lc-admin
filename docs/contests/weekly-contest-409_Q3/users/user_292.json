{
    "username": "dpdpdpp",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        seg = SegmentTree(n)\n        seg.update(1, 0, n-1, n-1, n-1, 1)\n        ans = []\n        for x, y in queries:\n            if x + 1 <= y - 1:\n                seg.update(1, 0, n-1, x+1, y-1, 1)\n            ans.append(n - seg.tree[1])\n\n        return ans\n\n\nclass SegmentTree:\n\n    def __init__(self, n):\n        self.tree = [0]*(n*4)\n        self.lazy = [0]*(n*4)\n\n    def op(self, a, b):\n        \"\"\"\n        \u4efb\u610f\u7b26\u5408\u7d50\u5408\u5f8b\u7684\u904b\u7b97\n        \"\"\"\n        return a+b\n\n    def push_down(self, id, L, R, M):\n        \"\"\"\n        \u5c07\u5340\u9593\u61f6\u6a19\u52a0\u5230\u7b54\u6848\u4e2d\n        \u4e0b\u63a8\u61f6\u6a19\u8a18\u7d66\u5de6\u53f3\u5b50\u6a39\n        \"\"\"\n        if self.lazy[id]:\n            self.tree[id*2] = (M-L+1)\n            self.lazy[id*2] = 1\n            self.tree[id*2+1] = (R-M)\n            self.lazy[id*2+1] = 1\n            self.lazy[id] = 0\n\n    def push_up(self, id):\n        \"\"\"\n        \u4ee5\u5de6\u53f3\u7bc0\u9ede\u66f4\u65b0\u7576\u524d\u7bc0\u9ede\u503c\n        \"\"\"\n        self.tree[id] = self.op(self.tree[id*2], self.tree[id*2+1])\n\n    def update(self, id, L, R, i, j, val):\n        \"\"\"\n        \u5340\u9593\u66f4\u65b0\n        \u5c0d[i, j]\u6bcf\u500b\u7d22\u5f15\u90fd\u8b8a\u6210 1\n        \"\"\"\n        if i <= L and R <= j:  # \u7576\u524d\u5340\u9593\u76ee\u6a19\u7bc4\u570d\u5305\u542b\n            self.tree[id] = (R - L + 1)\n            self.lazy[id] = 1\n            return\n        M = (L+R)//2\n        self.push_down(id, L, R, M)\n        if i <= M:\n            self.update(id*2, L, M, i, j, val)\n        if M < j:\n            self.update(id*2+1, M+1, R, i, j, val)\n        self.push_up(id)\n",
    "submit_ts": "1722740839",
    "subm_id": "1343730028"
}