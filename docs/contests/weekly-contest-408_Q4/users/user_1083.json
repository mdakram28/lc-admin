{
    "username": "astepano",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.parent = dict()\n        self.weights = dict()\n\n        for i in range(n):\n            self.parent[i] = i\n            self.weights[i] = i\n    \n    def getRoot(self, node):\n        while self.parent[node] != node:\n            parent = self.parent[node]\n            self.parent[node] = self.parent[self.parent[node]]\n            node = parent\n        return node\n\n    def union(self, i, j):\n        root_i, root_j = self.getRoot(i), self.getRoot(j)\n        wi, wj = self.weights[i], self.weights[j]\n\n        if root_i == root_j:\n            return\n        \n        if wi > wj:\n            self.parent[root_j] = root_i\n            self.weights[root_i] = wi + wj\n        else:\n            self.parent[root_i] = root_j\n            self.weights[root_j] = wi + wj\n    \n    def find(self, i, j):\n        return self.getRoot(i) == self.getRoot(j)\n\n\n\nclass Solution:\n\n\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n\n        unionFind = UnionFind(len(circles) + 4)\n\n        N = len(circles)\n        B, T, L, R = N, N + 1, N + 2, N + 3\n\n        def isIntersect(xi, yi, ri, xj, yj, rj):\n            dist = sqrt((xj - xi)**2 +(yj - yi)**2)\n            if ri + rj >= dist:\n                return True\n            return False\n        \n        def isBottom(x, y, r):\n            return True if y - r <= 0 else False\n        \n        def isTop(x, y, r):\n            return True if y + r >= Y else False\n\n        def isLeft(x, y, r):\n            return True if x - r <= 0 else False\n        \n        def isRight(x, y, r):\n            return True if x + r >= X else False\n\n        for i in range(len(circles)):\n            xi, yi, ri = circles[i]\n            if isRight(xi, yi, ri):\n                unionFind.union(i, R)\n            if isLeft(xi, yi, ri):\n                unionFind.union(i, L)\n            if isTop(xi, yi, ri):\n                unionFind.union(i, T)\n            if isBottom(xi, yi, ri):\n                unionFind.union(i, B)\n            for j in range(len(circles)):\n                if i == j:\n                    continue\n                xj, yj, rj = circles[j]\n\n                if isIntersect(xi, yi, ri, xj, yj, rj):\n                    unionFind.union(i, j)\n        \n\n        topBottomBlocked = unionFind.find(T, B)\n        leftRightBlocked = unionFind.find(L, R)\n        leftBottomBlocked = unionFind.find(L, B)\n        rightTopBlocked = unionFind.find(R, T)\n\n        # print(topBottomBlocked, leftRightBlocked, leftBottomBlocked, rightTopBlocked)\n\n        if topBottomBlocked:\n            return False\n        if leftRightBlocked:\n            return False\n        if leftBottomBlocked:\n            return False\n        if rightTopBlocked:\n            return False\n\n        return True\n        \n\n                    \n\n\n\n\n        ",
    "submit_ts": "1722138874",
    "subm_id": "1335801911"
}