{
    "username": "dragonman164",
    "submission": "class Solution {\npublic:\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = cost;\n    }\n};\n\nint minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) {\n    int n = target.size();\n    Trie trie;\n\n    // Insert all words with their costs into the Trie\n    map<string,int> helper;\n    for(int i  = 0; i < words.size();i++ ){\n        if(helper.find(words[i]) == helper.end()){\n            helper[words[i]] = costs[i];\n        }\n        else{\n            helper[words[i]] = min(costs[i],helper[words[i]]);\n        }\n    }\n    for (auto &elem : helper) {\n        trie.insert(elem.first, elem.second);\n    }\n\n    // Initialize dp array\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // Cost to form an empty string is 0\n\n    // Dynamic Programming to calculate the minimum cost\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        \n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) break;\n            node = node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n\n};",
    "submit_ts": "1720324521",
    "subm_id": "1312401539"
}