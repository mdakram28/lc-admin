{
    "username": "rashi05",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int h = 0, v = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n\n        // Merge the cuts in a way to minimize the cost\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += (long long)horizontalCut[h] * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                totalCost += (long long)verticalCut[v] * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[h] * verticalPieces;\n            horizontalPieces++;\n            h++;\n        }\n\n        // Add remaining vertical cuts\n        while (v < verticalCut.size()) {\n            totalCost += (long long)verticalCut[v] * horizontalPieces;\n            verticalPieces++;\n            v++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924797",
    "subm_id": "1320231291"
}