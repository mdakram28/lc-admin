{
    "username": "Arc_bow",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        long maxSum = Long.MIN_VALUE;\n\n        List<long[]> cells = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                cells.add(new long[]{i, j, board[i][j]});\n            }\n        }\n\n        // \u6309\u7167\u4ef7\u503c\u964d\u5e8f\u6392\u5e8f\n        cells.sort((a, b) -> Long.compare(b[2], a[2]));\n\n        for (int i = 0; i < Math.min(cells.size(), 400); i++) {\n            long[] cell1 = cells.get(i);\n            for (int j = i + 1; j < Math.min(cells.size(), 400); j++) {\n                long[] cell2 = cells.get(j);\n                if (cell1[0] == cell2[0] || cell1[1] == cell2[1]) continue;  \n                for (int k = j + 1; k < Math.min(cells.size(), 400); k++) {\n                    long[] cell3 = cells.get(k);\n                    if (cell3[0] == cell1[0] || cell3[0] == cell2[0] || cell3[1] == cell1[1] || cell3[1] == cell2[1]) continue; \n                    long currentSum = cell1[2] + cell2[2] + cell3[2];\n                    maxSum = Math.max(maxSum, currentSum);\n                }\n            }\n        }\n\n        return maxSum;\n    }\n}\n",
    "submit_ts": "1723909524",
    "subm_id": "556336698"
}