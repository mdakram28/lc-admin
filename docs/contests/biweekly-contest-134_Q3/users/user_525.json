{
    "username": "tiny-snow",
    "submission": "//\n//\n\n#include <iostream>\n#include <iso646.h>\n#include <vector>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <functional>\n#include <string>\n#include <array>\n\nusing namespace std;\nusing LL = long long;\nconst int INF = 0x3f3f3f3f;\nconst LL LINF = 0x3f3f3f3f3f3f3f3f;\n\nclass Solution\n{\npublic:\n    int numberOfAlternatingGroups(vector<int> &colors, int k)\n    {\n        int n = colors.size();\n        // check that if all the circle are alternating\n        bool all_alternating = true;\n        int ba;\n        for (ba = 0; ba < n; ba++)\n            if (colors[ba] == colors[(ba + 1) % n])\n            {\n                all_alternating = false;\n                break;\n            }\n        if (all_alternating)\n            return n;\n        // not all the circle are alternating\n        vector<int> block;\n        int p = (ba + 1) % n, cnt = 0;\n        while (cnt < n)\n        {\n            int q = p + 1;\n            int d = 1;\n            while (cnt + d < n and colors[q % n] != colors[(q - 1) % n])\n                q++, d++;\n            block.push_back(q - p);\n            p = q;\n            cnt += d;\n        }\n        int ans = 0;\n        for (int b : block)\n            ans += max(0, b - k + 1);\n        return ans;\n    }\n};",
    "submit_ts": "1720279505",
    "subm_id": "544567781"
}