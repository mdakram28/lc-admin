{
    "username": "anhtuanhoang0921",
    "submission": "\ntype Tree struct {\n\tchildren map[byte]*Tree\n\tlast     []pair\n}\n\ntype pair struct {\n\tindex int\n\tcost  int\n}\n\nfunc newTree() *Tree {\n\treturn &Tree{\n\t\tchildren: make(map[byte]*Tree),\n\t\tlast:     []pair{},\n\t}\n}\n\ntype Trie struct {\n\troot *Tree\n}\n\nfunc initi() *Trie {\n\treturn &Trie{\n\t\troot: newTree(),\n\t}\n}\n\nfunc (t *Trie) add(word string, index int, cost int) {\n\tnode := t.root\n\tfor i := 0; i < len(word); i++ {\n\t\tchar := word[i]\n\t\tif node.children[char] == nil {\n\t\t\tnode.children[char] = newTree()\n\t\t}\n\t\tnode = node.children[char]\n\t}\n\tnode.last = append(node.last, pair{index, cost})\n}\n\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc minimumCost(target string, words []string, costs []int) int {\n\tn := len(target)\n\tdp := make([]int, n+1)\n\tfor i := range dp {\n\t\tdp[i] = math.MaxInt32\n\t}\n\tdp[0] = 0\n\ttrie := initi()\n\tfor i := 0; i < len(words); i++ {\n\t\ttrie.add(words[i], i, costs[i])\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tif dp[i] == math.MaxInt32 {\n\t\t\tcontinue\n\t\t}\n\t\tnode := trie.root\n\t\tfor j := i; j < n; j++ {\n\t\t\tchar := target[j]\n\t\t\tif nextNode, ok := node.children[char]; ok {\n\t\t\t\tnode = nextNode\n\t\t\t\tfor _, p := range node.last {\n\t\t\t\t\twordLen := len(words[p.index])\n\t\t\t\t\tif i+wordLen <= n {\n\t\t\t\t\t\tdp[i+wordLen] = min(dp[i+wordLen], dp[i]+p.cost)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t}\n\n\tif dp[n] == math.MaxInt32 {\n\t\treturn -1\n\t}\n\treturn dp[n]\n}",
    "submit_ts": "1720322947",
    "subm_id": "1312363374"
}