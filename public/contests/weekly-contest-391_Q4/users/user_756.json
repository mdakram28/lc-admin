{
    "username": "turing-sheep",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& po) {\n        \n        auto cal = [](vector<vector<int>>pp, int &p1, int &p2) {\n            int n = pp.size();\n            vector<vector<pair<int,int>>>p(4, vector<pair<int,int>>(n));\n            for(int i = 0; i < n; i ++){\n               p[0][i].first = + pp[i][0] + pp[i][1];\n               p[1][i].first = + pp[i][0] - pp[i][1];\n               p[2][i].first = - pp[i][0] + pp[i][1];\n               p[3][i].first = - pp[i][0] - pp[i][1];\n               p[0][i].second = i;\n               p[1][i].second = i;\n               p[2][i].second = i;\n               p[3][i].second = i;\n            }\n            for(int i = 0; i < 4; i ++)sort(p[i].begin(), p[i].end());\n            int maxv = 0;\n            for(int i = 0; i < 4; i ++) {\n                if(maxv < p[i].back().first - p[i].front().first)\n                {\n                    maxv = p[i].back().first - p[i].front().first;\n                    p1 = p[i].back().second, p2 = p[i].front().second;\n                }\n            }\n            return maxv;\n        };\n        int p1 = -1, p2 = -1;\n        cal(po,p1, p2);\n        \n        \n        vector<vector<int>> pos1;\n        for(int i = 0; i < po.size(); i ++){\n            if(i == p1) continue;\n            pos1.push_back(po[i]);\n        }\n        int p3, p4;\n        int ans1 = cal(pos1, p3, p4);\n        vector<vector<int>> pos2;\n        for(int i = 0; i < po.size(); i ++){\n            if(i == p2) continue;\n            pos2.push_back(po[i]);\n        }\n        int ans2 = cal(pos2, p3, p4);\n        return min(ans1, ans2);\n        return 0;\n    }\n};"
}