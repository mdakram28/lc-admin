{
    "username": "aadritoD",
    "submission": "class Solution {\n\n    void find_dist(int curr, int prev, int dist, vector<int>& dists, vector<vector<int>>& adj) {\n        dists[curr] = dist;\n        for (int next : adj[curr]) if (next != prev) {\n            find_dist(next, curr, dist + 1, dists, adj);\n        }\n    }\n\n    pair<int, int> find_furthest(int node, vector<vector<int>>& adj) {\n        vector<int> dists(adj.size());\n        find_dist(node, -1, 0, dists, adj);\n        int max_d = 0, max_node = node;\n        for (int i = 0; i < dists.size(); i++) {\n            if (dists[i] > max_d) {\n                max_d = dists[i];\n                max_node = i;\n            }\n        }\n        return make_pair(max_node, max_d);\n    }\n\n    pair<int, int> get_ans(int N, vector<vector<int>>& adj) {\n        auto [diam_a, _] = find_furthest(0, adj);\n        auto [diam_b, diam] = find_furthest(diam_a, adj);\n        vector<int> dist1(N), dist2(N);\n        find_dist(diam_a, -1, 0, dist1, adj);\n        find_dist(diam_b, -1, 0, dist2, adj);\n        int ans = max(dist1[0], dist2[0]);\n        for (int i = 0; i < N; i++) {\n            ans = min(ans, max(dist1[i], dist2[i]));\n        }\n        return make_pair(ans, diam);\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int N = edges1.size() + 1, M = edges2.size() + 1;\n        vector<vector<int>> adj1(N), adj2(M);\n\n        for (auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        auto [ans1, diam1] = get_ans(N, adj1);\n        auto [ans2, diam2] = get_ans(M, adj2);\n\n        return max({ans1 + ans2 + 1, diam1, diam2});\n\n    }\n};",
    "submit_ts": "1719716717",
    "subm_id": "1304372118"
}