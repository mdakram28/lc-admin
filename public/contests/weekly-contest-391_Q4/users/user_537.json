{
    "username": "cavetr",
    "submission": "type ANS = [[number, number, number], [number, number, number], number];\nfunction cla(points: [number, number][]): ANS {\n  const sortAPoint: [number, number, number] = points.reduce((ans, point, idx) => ans[0] + ans[1] < point[0] + point[1] ? ans : [...point, idx], [...points[0], 0]); // \u6700\u5de6\u4e0b\n  const sortBPoint: [number, number, number] = points.reduce((ans, point, idx) => ans[0] - ans[1] < point[0] - point[1] ? ans : [...point, idx], [...points[0], 0]); // \u6700\u5de6\u4e0a\n  let ans: ANS = [sortAPoint, sortBPoint, Math.abs(sortAPoint[0] - sortBPoint[0]) + Math.abs(sortAPoint[1] - sortAPoint[1])];\n  for (let i = 0; i < points.length; i++) {\n    const point = points[i];\n    if (Math.abs(sortAPoint[0] - point[0]) + Math.abs(sortAPoint[1] - point[1]) > ans[2]) {\n      ans = [sortAPoint, [...point, i], Math.abs(sortAPoint[0] - point[0]) + Math.abs(sortAPoint[1] - point[1])];\n    }\n    if (Math.abs(sortBPoint[0] - point[0]) + Math.abs(sortBPoint[1] - point[1]) > ans[2]) {\n      ans = [sortBPoint, [...point, i], Math.abs(sortBPoint[0] - point[0]) + Math.abs(sortBPoint[1] - point[1])];\n    }\n  }\n  return ans;\n}\nfunction minimumDistance(points: [number, number][]): number {\n  const [pointA, pointB] = cla(points);\n\n  return Math.min(cla(points.filter((_, idx) => idx !== pointA[2]))[2], cla(points.filter((_, idx) => idx !== pointB[2]))[2])\n};"
}