{
    "username": "Php_developer_lcby",
    "submission": "<?php\n\nclass Solution {\n    // Function to perform BFS\n    public function bfs($graph, $start, $target1, $target2, $nodes) {\n        $queue = new SplQueue();\n        $visited = array_fill(0, $nodes + 4, 0);\n        $queue->enqueue($start);\n        $visited[$start] = 1;\n\n        while (!$queue->isEmpty()) {\n            $u = $queue->dequeue();\n            foreach ($graph[$u] as $v) {\n                if (!$visited[$v]) {\n                    $queue->enqueue($v);\n                    $visited[$v] = 1;\n                }\n            }\n        }\n\n        return $visited[$target1] || $visited[$target2];\n    }\n\n    // Function to check if there is a reachable path\n    public function canReachCorner($X, $Y, $circles2) {\n        $num_circles = count($circles2);\n        $circles = [];\n        $graph = array_fill(0, $num_circles + 4, []);\n\n        for ($i = 0; $i < $num_circles; ++$i) {\n            $circles[$i] = [[$circles2[$i][0], $circles2[$i][1]], $circles2[$i][2]];\n        }\n\n        for ($i = 0; $i < $num_circles; ++$i) {\n            if ($circles[$i][0][0] <= $circles[$i][1]) {\n                $graph[$num_circles][] = $i;\n                $graph[$i][] = $num_circles;\n            }\n            if ($X - $circles[$i][0][0] <= $circles[$i][1]) {\n                $graph[$num_circles + 2][] = $i;\n                $graph[$i][] = $num_circles + 2;\n            }\n            if ($circles[$i][0][1] <= $circles[$i][1]) {\n                $graph[$num_circles + 1][] = $i;\n                $graph[$i][] = $num_circles + 1;\n            }\n            if ($Y - $circles[$i][0][1] <= $circles[$i][1]) {\n                $graph[$num_circles + 3][] = $i;\n                $graph[$i][] = $num_circles + 3;\n            }\n            for ($j = $i + 1; $j < $num_circles; ++$j) {\n                $distance = sqrt(pow($circles[$i][0][0] - $circles[$j][0][0], 2) +\n                                 pow($circles[$i][0][1] - $circles[$j][0][1], 2));\n                $radius_sum = $circles[$i][1] + $circles[$j][1];\n                if ($radius_sum >= $distance) {\n                    $graph[$i][] = $j;\n                    $graph[$j][] = $i;\n                }\n            }\n        }\n\n        $is_blocked = 0;\n        $is_blocked = max($is_blocked, $this->bfs($graph, $num_circles, $num_circles + 1, $num_circles + 2, $num_circles + 4)); // Check for bottom-left corner\n        $is_blocked = max($is_blocked, $this->bfs($graph, $num_circles + 3, $num_circles + 2, $num_circles + 1, $num_circles + 4)); // Check for top-right corner\n\n        if ($is_blocked) {\n            return false;\n        }\n        return true;\n    }\n}\n\n// Example usage\n$solution = new Solution();\n$X = 3;\n$Y = 4;\n$circles = [[2, 1, 1]];\necho $solution->canReachCorner($X, $Y, $circles) ? 'true' : 'false'; // Example output: true\n\n$X = 3;\n$Y = 3;\n$circles = [[1, 1, 2]];\necho $solution->canReachCorner($X, $Y, $circles) ? 'true' : 'false'; // Example output: false\n\n$X = 3;\n$Y = 3;\n$circles = [[2, 1, 1], [1, 2, 1]];\necho $solution->canReachCorner($X, $Y, $circles) ? 'true' : 'false'; // Example output: false\n\n?>\n\n",
    "submit_ts": "1722136137",
    "subm_id": "1335724933"
}