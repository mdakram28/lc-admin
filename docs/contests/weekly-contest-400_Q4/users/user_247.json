{
    "username": "Sarthak3204",
    "submission": "class Solution {\npublic:\n    class SparseTable {\n    public:\n        int n; vector<int> lg;\n        vector<vector<int>> table;\n\n        SparseTable(const vector<int> &a) : n(size(a)), lg(n + 1) {\n            for (int i = 2; i <= n; i++) lg[i] = lg[i >> 1] + 1;\n\n            table.resize(lg[n] + 1); table[0] = a;\n            for (int j = 1; j <= lg[n]; j++) {\n                table[j].resize(n - (1 << j) + 1);\n                for (int i = 0; i + (1 << j) - 1 < n; i++) {\n                    table[j][i] = (table[j - 1][i] & table[j - 1][i + (1 << (j - 1))]);\n                }\n            }\n        }\n\n        int query(int l, int r) const {\n            int j = lg[r - l + 1];\n            return (table[j][l] & table[j][r - (1 << j) + 1]);\n        }\n    };\n    int minimumDifference(vector<int>& a, int k) {\n        int n = size(a);\n        int ans = INT_MAX;\n        SparseTable st(a);\n        for (int i = 0; i < n; i++) {\n            int lo = 0, hi = i;\n            while (lo <= hi) {\n                int mid = (lo + hi) >> 1;\n                int val = st.query(mid, i);\n                ans = min(ans, abs(k - val));\n                if (val > k) hi = mid - 1;\n                else lo = mid + 1;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297710.0
}