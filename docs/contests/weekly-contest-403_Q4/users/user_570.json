{
    "username": "noobiiitian",
    "submission": "#include <vector>\n#include <cstring>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    #define INF 1e9\n    int dp[31][31][31][31][4];\n\n    int dfs(int startRow, int endRow, int startCol, int endCol, int rqrec, vector<vector<int>>& grid) {\n        if (startRow > endRow || startCol > endCol)\n            return INF;\n\n        if (rqrec == 0) {\n            for (int i = startRow; i <= endRow; i++) {\n                for (int j = startCol; j <= endCol; j++) {\n                    if (grid[i][j] == 1)\n                        return INF;\n                }\n            }\n            return 0;\n        }\n\n        if (dp[startRow][endRow][startCol][endCol][rqrec] != -1)\n            return dp[startRow][endRow][startCol][endCol][rqrec];\n\n        int ans = INF;\n\n        if (rqrec == 1) {\n            int minRow = endRow, maxRow = startRow - 1, minCol = endCol, maxCol = startCol - 1;\n            for (int i = startRow; i <= endRow; i++) {\n                for (int j = startCol; j <= endCol; j++) {\n                    if (grid[i][j] == 1) {\n                        minRow = min(minRow, i);\n                        maxRow = max(maxRow, i);\n                        minCol = min(minCol, j);\n                        maxCol = max(maxCol, j);\n                    }\n                }\n            }\n            if (minRow <= maxRow && minCol <= maxCol) {\n                int height = maxRow - minRow + 1;\n                int width = maxCol - minCol + 1;\n                ans = min(ans, height * width);\n            }\n        } else {\n            // Try all possible horizontal splits\n            for (int r = startRow; r < endRow; r++) {\n                ans = min(ans, dfs(startRow, r, startCol, endCol, rqrec - 1, grid) + dfs(r + 1, endRow, startCol, endCol, 1, grid));\n                ans = min(ans, dfs(startRow, r, startCol, endCol, 1, grid) + dfs(r + 1, endRow, startCol, endCol, rqrec - 1, grid));\n            }\n\n            // Try all possible vertical splits\n            for (int c = startCol; c < endCol; c++) {\n                ans = min(ans, dfs(startRow, endRow, startCol, c, rqrec - 1, grid) + dfs(startRow, endRow, c + 1, endCol, 1, grid));\n                ans = min(ans, dfs(startRow, endRow, startCol, c, 1, grid) + dfs(startRow, endRow, c + 1, endCol, rqrec - 1, grid));\n            }\n        }\n\n        return dp[startRow][endRow][startCol][endCol][rqrec] = ans;\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        memset(dp, -1, sizeof(dp));\n        return dfs(0, grid.size() - 1, 0, grid[0].size() - 1, 3, grid);\n    }\n};\n",
    "submit_ts": "1719114359",
    "subm_id": "1297345175"
}