{
    "username": "codelelouch0",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int MOD = 1e9 + 7;\n        int n = nums.size();\n        int maxNum = *max_element(nums.begin(), nums.end());\n\n        // dp[i][x] means the number of ways to fill arr1 up to index i, where\n        // arr1[i] = x\n        vector<vector<int>> dp(n + 1, vector<int>(maxNum + 1, 0));\n\n        // Initialize the dp for the first element\n        for (int x = 0; x <= nums[0]; ++x) {\n            dp[0][x] = 1;\n        }\n\n        // Fill the dp table\n        for (int i = 1; i < n; ++i) {\n            for (int x = 0; x <= nums[i]; ++x) {\n                int prefixSum = 0;\n                int y = nums[i] - x; // arr2[i] = nums[i] - arr1[i]\n                for (int j = 0; j <= nums[i-1]; j++) {\n                    if (y <= nums[i-1]-j && x >= j) prefixSum = (prefixSum + dp[i - 1][j]) % MOD;\n                }\n                dp[i][x] = prefixSum;\n            }\n        }\n        /*\n        for (int i = 0; i < dp.size(); i++) {\n            for (int j = 0; j < dp[0].size(); j++) {\n                cout << dp[i][j] << \"  \";\n            }\n            cout << endl;\n        }\n        */\n\n        // The final result is the sum of all dp[n-1][x] where x is the last\n        // element of arr1\n        int result = 0;\n        for (int x = 0; x <= nums[n - 1]; ++x) {\n            result = (result + dp[n - 1][x]) % MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1723346597",
    "subm_id": "1351581051"
}