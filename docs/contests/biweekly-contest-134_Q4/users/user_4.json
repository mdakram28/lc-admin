{
    "username": "FreeYourMind",
    "submission": "from string import *\nfrom re import *\nfrom datetime import *\nfrom collections import *\nfrom heapq import *\nfrom bisect import *\nfrom copy import *\nfrom math import *\nfrom random import *\nfrom statistics import *\nfrom itertools import *\nfrom functools import *\nfrom operator import *\nfrom io import *\nfrom sys import *\nfrom json import *\nfrom builtins import *\nfrom typing import *\n\n\"\"\"\n<p>Given an array of integers <code>nums</code> and an integer <code>k</code>, return the number of <span data-keyword=\"subarray-nonempty\">subarrays</span> of <code>nums</code> where the bitwise <code>AND</code> of the elements of the subarray equals <code>k</code>.</p>\n\n<p>&nbsp;</p>\n<p><strong class=\"example\">Example 1:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,1], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">6</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>All subarrays contain only 1&#39;s.</p>\n</div>\n\n<p><strong class=\"example\">Example 2:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,1,2], k = 1</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">3</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Subarrays having an <code>AND</code> value of 1 are: <code>[<u><strong>1</strong></u>,1,2]</code>, <code>[1,<u><strong>1</strong></u>,2]</code>, <code>[<u><strong>1,1</strong></u>,2]</code>.</p>\n</div>\n\n<p><strong class=\"example\">Example 3:</strong></p>\n\n<div class=\"example-block\">\n<p><strong>Input:</strong> <span class=\"example-io\">nums = [1,2,3], k = 2</span></p>\n\n<p><strong>Output:</strong> <span class=\"example-io\">2</span></p>\n\n<p><strong>Explanation:</strong></p>\n\n<p>Subarrays having an <code>AND</code> value of 2 are: <code>[1,<b><u>2</u></b>,3]</code>, <code>[1,<u><strong>2,3</strong></u>]</code>.</p>\n</div>\n\n<p>&nbsp;</p>\n<p><strong>Constraints:</strong></p>\n\n<ul>\n    <li><code>1 &lt;= nums.length &lt;= 10<sup>5</sup></code></li>\n    <li><code>0 &lt;= nums[i], k &lt;= 10<sup>9</sup></code></li>\n</ul>\n\n\"\"\"\n\ndef logTrick(nums: List[int], op):\n    res = defaultdict(int)\n    dp = []\n    for pos, cur in enumerate(nums):\n        for v in dp:\n            v[2] = op(v[2], cur)\n        dp.append([pos, pos + 1, cur])\n\n        ptr = 0\n        for v in dp[1:]:\n            if dp[ptr][2] != v[2]:\n                ptr += 1\n                dp[ptr] = v\n            else:\n                dp[ptr][1] = v[1]\n        dp = dp[: ptr + 1]\n\n        for v in dp:\n            res[v[2]] += v[1] - v[0]\n\n    return res\n\nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        res = logTrick(nums, and_)\n        # print(res)\n        return res[k]\n        \n\n# testcases = [\n#     [],\n#     # [],\n# ]\n\n# s = Solution()\n# func_name = dir(s)[-1]\n# func = getattr(s, func_name)\n\n# for args in testcases:\n#     print(func(*args))",
    "submit_ts": "1720277076",
    "subm_id": "544554320"
}