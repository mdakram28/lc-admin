{
    "username": "plhijk",
    "submission": "class Solution:\n    def minFlips(self, grid) -> int:\n        nrows = len(grid)\n        ncols= len(grid[0])\n        flips = 0\n        for r in range(nrows//2):\n            for c in range(ncols//2):\n                ones = grid[r][c] + grid[-1-r][c] + grid[r][-1-c] + grid[-1-r][-1-c]\n                flips += min(ones, 4-ones)\n                # all 0 or all 1\n        \n        def count_flips_even(arr):\n            i = 0\n            j = len(arr) - 1\n            flip = 0\n            one_pairs = 0\n            while i < j:\n                if arr[i] == 1 and arr[j] == 1:\n                    one_pairs += 1\n                if arr[i] != arr[j]:\n                    flip += 1\n                i += 1\n                j -= 1\n            return flip, one_pairs\n\n        midflips = 0\n        onepairs = 0\n        # middle\n        if nrows % 2 == 1:\n            rmid = nrows // 2\n            _midflips, _onepairs = count_flips_even(grid[rmid])\n            midflips += _midflips\n            onepairs += _onepairs\n        if ncols % 2 == 1:\n            cmid = ncols // 2\n            _midflips, _onepairs = count_flips_even([grid[r][cmid] for r in range(nrows)])\n            midflips += _midflips\n            onepairs += _onepairs\n        if nrows % 2 == 1 and ncols % 2 == 1:\n            rmid = nrows // 2\n            cmid = ncols // 2\n            # center must be 0\n            flips += grid[rmid][cmid]\n            # over count\n        if onepairs % 2 == 0:\n                # already divisible by 4, set other 1 to 0\n            flips += midflips\n        elif midflips > 0:\n                # remainder = 2, use one flip to make another pair of 1\n            flips += midflips\n        else:\n                # remainder = 2, already palindrome\n                # flip both to zero\n            flips += 2\n        return flips\n    ",
    "submit_ts": "1722698536",
    "subm_id": "1343183799"
}