{
    "username": "atharva_ask",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n            const int MOD = 1e9+ 7;\n            const int m = 400;\n\n            unordered_map<int, int> mp;\n            for (auto& req : reqs) {\n                mp[req[0] + 1] = req[1];\n            }\n\n\n\n            vector<vector<long>> dp(n + 1, vector<long>(m + 1, 0));\n            dp[0][0] = 1;\n\n            for (int len = 1; len <= n; len++) {\n                for (int inv = 0; inv <= m; inv++) {\n                    for (int pos = 0; pos < len; pos++) {\n                        int prevInv = inv - pos;\n                        if (prevInv >= 0) {\n                            dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                        }\n                    }\n                }\n\n                if (mp.count(len)) {\n                    int targetInv = mp[len];\n                    for (int inv = 0; inv <= m; inv++) {\n                        if (inv != targetInv) {\n                            dp[len][inv] = 0;\n                        }\n                    }\n                }\n            }\n\n            long res = 0;\n            for (long count : dp[n]) {\n                res = (res + count) % MOD;\n            }\n\n            return res;\n        }\n};",
    "submit_ts": 1719070624.0
}