{
    "username": "Aryan041",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) \n    {\n        map<int, vector<int>> a; // diffGroups\n        vector<int> b; // potentialValues\n        int n = nums.size();\n        int half_n = n / 2;\n\n        // Gather differences and corresponding potential values\n        for (int i = 0; i < half_n; ++i) {\n            int c = nums[i]; // a\n            int d = nums[n - i - 1]; // b\n            int diff = abs(c - d);\n            int maxVal = max({c, d, k - c, k - d});\n            a[diff].push_back(maxVal);\n            b.push_back(maxVal);\n        }\n\n        // Sort the potential values to facilitate efficient lookup\n        sort(b.begin(), b.end());\n\n        int minChanges = n;\n\n        // Evaluate each difference group\n        for (const auto& entry : a) {\n            int diff = entry.first;\n            int totalChanges = 0;\n\n            // Count how many potential values are less than the current difference\n            int lessThanDiffCount = lower_bound(b.begin(), b.end(), diff) - b.begin();\n            totalChanges += lessThanDiffCount * 2; // These values need two changes each\n\n            // The remaining values need only one change each\n            totalChanges += (half_n - lessThanDiffCount);\n\n            // Adjust the total changes based on the actual values in the current group\n            for (int value : entry.second) {\n                if (value < diff) {\n                    totalChanges -= 2; // Already counted as two changes\n                } else {\n                    totalChanges -= 1; // Only one change needed\n                }\n            }\n\n            // Track the minimum number of changes needed\n            minChanges = min(minChanges, totalChanges);\n        }\n\n        return minChanges;\n    }\n// };\n\n    //     int n=nums.size();\n    //     vector<pair<int,int> > diff;\n    //     int l=0,r=n-1;\n\n    //     while(l<r)\n    //     {\n    //         int d = abs(nums[l]-nums[r]);\n    //         l++;\n    //         r--;\n    //         diff.push_back({d,l});\n    //     }\n\n    //     vector<int> p=diff;\n    //     sort(p.begin(),p.end());\n        \n    //     int mid = p[p.size()/2];\n    //     p.clear();\n\n    //     int i=0;\n    //     while(i<diff.size())\n    //     {\n    //         if(diff[i].first==mid)\n    //         {\n    //             i++;\n    //         }\n    //         else\n    //         {\n    //             int val1 = nums[diff[i].second];\n    //             int val2 = nums[n-diff[i].second-1];\n    //             int mn = min(val1,val2);\n    //             int mx = max(val1,val2);\n    //             if(mx>=mid || (k-mn)>=mid)\n    //             {\n    //                 ans++;\n    //             }\n    //             else\n    //             {\n\n    //             }\n    //         }\n    //     }\n\n    // }\n};",
    "submit_ts": "1721490368",
    "subm_id": "1327480682"
}