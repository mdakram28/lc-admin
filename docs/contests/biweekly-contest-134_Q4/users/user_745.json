{
    "username": "naman_dwivedi",
    "submission": "#define ll long long int\n\nstruct segmenttree{\n    vector<ll>v;\n    vector<ll>tree;\n    ll n;\n    segmenttree(ll nn,vector<ll>vec)\n    {\n        v=vec;\n        n=nn;\n        tree.resize(4*n);\n        build(1,0,n-1);\n    }\n \n    ll combine(ll a,ll b)\n    {\n        ll c;\n        c=(a&b);\n        return c;\n    }\n\n    void build(ll node,ll start,ll end)\n    {\n        if(start==end)\n        {\n            tree[node]=v[start];\n            return;\n        }\n        ll mid=(start+end) >> 1;\n        build(2*node,start,mid);\n        build(2*node+1,mid+1,end);\n        tree[node]=combine(tree[2*node],tree[2*node+1]);\n    }\n\n    void update(ll node,ll start,ll end,ll ind,ll val)\n    {\n        if(start==end)\n        {\n            v[start]=val;\n            tree[node]=v[start];\n            return;\n        }\n        ll mid=(start+end) >> 1;\n        if(ind<=mid) update(2*node,start,mid,ind,val);\n        else update(2*node+1,mid+1,end,ind,val);\n        tree[node]=combine(tree[2*node],tree[2*node+1]);\n    }\n\n    void update(ll ind,ll val)\n    {\n        update(1,0,n-1,ind,val);\n    }\n \n    ll query(ll node,ll start,ll end,ll l,ll r)\n    {\n        if(start>r || end<l)\n        {\n            ll val=1ll<<40;\n            val--;\n            return val;\n        }\n        else if(start>=l && end<=r) return tree[node];\n        ll mid=(start+end) >> 1;\n        ll left=query(2*node,start,mid,l,r);\n        ll right=query(2*node+1,mid+1,end,l,r);\n        return combine(left,right);\n    }\n\n    ll query(ll l,ll r)\n    {\n        return query(1,0,n-1,l,r);\n    }\n};\n    \nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n=nums.size();\n        vector<long long>vec;\n        for(auto& it:nums) vec.emplace_back(it);\n        segmenttree seg(n,vec);\n        long long ans=0;\n        for(int i=0;i<n;i++)\n        {\n            int low=i,high=n-1;\n            int l=-1,r=-1;\n            while(low<=high)\n            {\n                int mid=(low+high) >> 1;\n                int val=seg.query(i,mid);\n                if(val<k) high=mid-1;\n                else if(val==k)\n                {\n                    l=mid;\n                    high=mid-1;\n                }\n                else low=mid+1;\n            }\n            \n            low=i,high=n-1;\n            while(low<=high)\n            {\n                int mid=(low+high) >> 1;\n                int val=seg.query(i,mid);\n                if(val<k) high=mid-1;\n                else if(val==k)\n                {\n                    r=mid;\n                    low=mid+1;\n                }\n                else low=mid+1;\n            }\n            if(l!=-1) ans+=r-l+1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280149",
    "subm_id": "1311778691"
}