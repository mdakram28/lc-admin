{
    "username": "animeshnath",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        int MAX = (int)1e9;\n        Arrays.fill(dp, MAX);\n        dp[n] = 0;\n        Trie root = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            String w = words[i];\n            int cost = costs[i];\n            Trie curr = root;\n            for (char c : w.toCharArray()) {\n                curr = curr.children.computeIfAbsent(c, x -> new Trie());\n            }\n            curr.cost = (curr.cost > 0) ? Math.min(curr.cost, cost) : cost;\n        }\n        for (int i = n - 1; i >= 0; i--) {\n            Trie curr = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (!curr.children.containsKey(c)) {\n                    break;\n                }\n                curr = curr.children.get(c);\n                if (curr.cost > 0 && dp[j + 1] < MAX) {\n                    dp[i] = Math.min(dp[i], curr.cost + dp[j + 1]);\n                }\n            }\n        }\n        return dp[0] < MAX ? dp[0] : -1;\n    }\n    \n    static class Trie {\n        Map<Character, Trie> children = new HashMap<>();\n        int cost;\n    }\n}",
    "submit_ts": "1720322816",
    "subm_id": "1312359827"
}