{
    "username": "ashish_sprinklr",
    "submission": "class Solution {\n    vector<int>pt;\n    vector<int>sz;\npublic:\n    bool connecting1(vector<int>&circle, int Y) {\n        int x=circle[0],y=circle[1],r=circle[2];\n        if(x-r<=0)return 1;\n        if(y+r>=Y)return 1;\n        return 0;\n    }\n\n    bool connecting2(vector<int>&circle, int X) {\n        int x=circle[0],y=circle[1],r=circle[2];\n        if(y-r<=0)return 1;\n        if(x+r>=X)return 1;\n        return 0;\n    }\n\n    bool isConnect(vector<int>&v1,vector<int>&v2) {\n        long long x1=v1[0],y1=v1[1],r1=v1[2];\n        long long x2=v2[0],y2=v2[1],r2=v2[2];\n    double d = sqrt((x1 - x2) * (x1 - x2)\n                         + (y1 - y2) * (y1 - y2));\n    if (d <= r1 - r2) {\n        return 1;\n    }\n    else if (d <= r2 - r1) {\n        return 1;\n    }\n    else if (d < r1 + r2) {\n        return 1;\n    }\n    else if (d == r1 + r2) {\n        return 1;\n    }\n    else {\n        return 0;\n    }\n}\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        // 0,0 to 0,Y\n        // 0,Y to X,Y\n\n        // 0,0 to X,0\n        // X,0 to X,Y\n        int n=circles.size();\n        pt=vector<int>(n,0);\n        sz=vector<int>(n,1);\n        queue<int>q;\n        for(int i=0;i<n;i++) {\n            int cnt=0;\n            if(connecting1(circles[i],Y)) {\n                cnt++;\n                pt[i]=1;\n                q.push(i);\n            }\n            if(connecting2(circles[i],X)) {\n                cnt++;\n                pt[i]=2;\n                q.push(i);\n            }\n            if(cnt==2) {\n                return false;\n            }\n        }\n\n        int visited[n];\n        memset(visited,0,sizeof(visited));\n        while(q.size()) {\n            int id = q.front();\n            q.pop();\n            vector<int>&v = circles[id];\n            visited[id]=1;\n\n            for(int i=0;i<n;i++)\n            {\n                if(pt[i]!=pt[id] and isConnect(circles[i],v)) {\n                    if(pt[i]==0) {\n                        pt[i]=pt[id];\n                        visited[i]=1;\n                        q.push(i);\n                    }\n                    else return false;\n                } else if(pt[i]==pt[id] and !visited[i]) {\n                    q.push(i);\n                    visited[i]=1;\n                }\n            }\n        }\n        return 1;\n        \n\n    }\n};",
    "submit_ts": "1722137048",
    "subm_id": "1335752627"
}