{
    "username": "Ani_S",
    "submission": "class SegmentTree {\n    int tree[];\n    int n;\n    \n    public SegmentTree(int n) {\n        this.tree = new int[(4 * n) + 1];\n        this.n = n;\n    }\n    \n    public void buildTree(int arr[]) {\n        buildTree(0, n - 1, arr, 0);\n    }\n    \n    private void buildTree(int low, int high, int arr[], int x) {\n        if(low == high && low <= arr.length) {\n            tree[x] = arr[low];\n            return;\n        }\n        \n        int mid = low + (high - low) / 2;\n        \n        buildTree(low, mid, arr, (2 * x) + 1);\n        buildTree(mid + 1, high, arr, (2 * x) + 2);\n    }\n    \n    public void update(int l, int r, int val) {\n        if(l > r)\n            return;\n        \n        update(0, n - 1, l, r, val, 0);\n    } \n    \n    private void update(int low, int high, int l, int r, int val, int x) {\n        if(high < l || low > r)\n            return;\n        \n        if(l <= low && high <= r) {\n            tree[x] -= val;\n            return;\n        }\n        \n        int mid = low + (high - low) / 2;\n        \n        update(low, mid, l, r, val, (2 * x) + 1);\n        update(mid + 1, high, l, r, val, (2 * x) + 2);\n    }\n    \n    public int query(int idx) {\n        return query(0, n - 1, idx, 0);\n    }\n    \n    private int query(int low, int high, int idx, int x) {\n        if(low == high && low == idx) {\n            return tree[x];\n        }\n        \n        int mid = low + (high - low) / 2;\n        \n        if(idx <= mid) {\n            return query(low, mid, idx, (2 * x) + 1) + tree[x];\n        } else {\n            return query(mid + 1, high, idx, (2 * x) + 2) + tree[x];\n        }\n    }\n}\nclass Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int dist[] = new int[n];\n        int prev[] = new int[n];\n        \n        for(int i = 0; i < n - 1; i++) {\n            dist[i] = n - i - 1;\n            prev[i + 1] = i;\n        }\n        \n        SegmentTree st = new SegmentTree(n);\n        st.buildTree(dist);\n        \n        int ans[] = new int[queries.length];\n        \n        for(int i = 0; i < queries.length; i++) {\n            int l = st.query(queries[i][0]);\n            int r = st.query(queries[i][1]);\n            \n            if(l >= 0 && r >= 0 && r + 1 < l) {\n                st.update(0, queries[i][0], l - r - 1);\n                st.update(queries[i][0] + 1, queries[i][1] - 1, 1000000);\n            }\n            \n            ans[i] = st.query(0);\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1722742274",
    "subm_id": "1343765141"
}