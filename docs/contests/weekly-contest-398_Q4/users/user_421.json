{
    "username": "akashgoyal7",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        if k == 0:\n            return 2 \n\n        qu = deque([(1, 0, False)])\n        ways = defaultdict(int)\n        ways[(1, 0, False)] = 1\n\n        while qu:\n            i, jump, came_from_down = qu.popleft()\n            current_ways = ways[(i, jump, came_from_down)]\n            \n            # 1: Go down i-1\n            if i > 0 and not came_from_down:\n                next_state = (i - 1, jump, True)\n                if next_state not in ways:\n                    qu.append(next_state)\n                ways[next_state] += current_ways\n            \n            # 2: Go up  (i+2^jump) and jump+=1\n            up_stair = i + (1 << jump)\n            if up_stair <= k + 2**jump:  # to avoid large numbers\n                next_state = (up_stair, jump + 1, False)\n                if next_state not in ways:\n                    qu.append(next_state)\n                ways[next_state] += current_ways\n\n        # add all ways\n        res = sum(ways[(k, jump, state)] for jump in range(32) for state in [True, False])\n        return res\n",
    "submit_ts": 1716087851.0
}