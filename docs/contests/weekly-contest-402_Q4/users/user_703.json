{
    "username": "hoanghonghieu",
    "submission": "class Segment\n{\npublic:\n    int mMin;\n    int mMax;\n    int count;\n    Segment* mLeftHalf;\n    Segment* mRightHalf;\n    \n    Segment(int min_, int max_) : mMin(min_), mMax(max_), count(0), mLeftHalf(nullptr), mRightHalf(nullptr)\n    {\n        // Do nothing\n    }\n    \n    void insert(int value)\n    {\n        count++;\n        if (mMin != mMax)\n        {\n            // Add value to sub-segments\n            int leftMiddle = (mMin + mMax) / 2;\n            if (value <= leftMiddle)\n            {\n                if (mLeftHalf == nullptr) mLeftHalf = new Segment(mMin, leftMiddle);\n                mLeftHalf->insert(value);\n            }\n            else\n            {\n                if (mRightHalf == nullptr) mRightHalf = new Segment(leftMiddle + 1, mMax);\n                mRightHalf->insert(value);\n            }\n        }\n    }\n    \n    void remove(int value)\n    {\n        count--;\n        if (mMin != mMax)\n        {\n            // Add value to sub-segments\n            int leftMiddle = (mMin + mMax) / 2;\n            if (value <= leftMiddle)\n            {\n                mLeftHalf->remove(value);\n            }\n            else\n            {\n                mRightHalf->remove(value);\n            }\n        }\n    }\n    \n    int smallerCount(int value)\n    {\n        // Leaf segment\n        if (mMin == mMax) return int(mMax < value);\n\n        int leftMiddle = (mMin + mMax) / 2;\n        int ans = 0;\n        // Right half\n        if (value > mMax)\n            ans += mRightHalf != nullptr ? mRightHalf->count : 0;\n        else if (value > leftMiddle)\n            ans += mRightHalf != nullptr ? mRightHalf->smallerCount(value) : 0;\n        // Left half\n        if (value > leftMiddle)\n            ans += mLeftHalf != nullptr ? mLeftHalf->count : 0;\n        else\n            ans += mLeftHalf != nullptr ? mLeftHalf->smallerCount(value) : 0;\n        return ans;\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> ans;\n        Segment tree(0, 100001);\n        for (int i = 1; i + 1 < nums.size(); i++) {\n            if (nums[i - 1] < nums[i] && nums[i] > nums[i + 1]) {\n                tree.insert(i);\n                // cout << \"ori peak: \" << i << endl;\n            }\n        }\n        \n        for (auto query : queries) {\n            if (query[0] == 1) {\n                if (query[2] - query[1] < 2) {\n                    ans.push_back(0);\n                } else {\n                    // queries[i] = [1, li, ri], determine the count of peak elements in the subarray nums[li..ri].\n                    int rcount = tree.smallerCount(query[2]);\n                    int lcount = tree.smallerCount(query[1] + 1);\n                    // cout << \"query[2] + 1 \" << query[2] + 1 << \" = \" << rcount << \" query[1] \" << query[1] << \" = \" << lcount  << endl;\n                    ans.push_back(rcount - lcount);\n                }\n            } else {\n                // queries[i] = [2, indexi, vali], change nums[indexi] to vali.\n                int idx = query[1];\n                int new_value = query[2];\n                \n                // Remove all old peaks related to this number\n                for (int offset = -1; offset <= 1; offset++) {\n                    int i = idx + offset;\n                    if (0 <= i - 1 && i + 1 < nums.size() && nums[i - 1] < nums[i] && nums[i] > nums[i + 1]) {\n                        tree.remove(i);\n                    }\n                }\n                // Update value\n                nums[idx] = new_value;\n                // Check new peak\n                for (int offset = -1; offset <= 1; offset++) {\n                    int i = idx + offset;\n                    if (0 <= i - 1 && i + 1 < nums.size() && nums[i - 1] < nums[i] && nums[i] > nums[i + 1]) {\n                        tree.insert(i);\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1718507985",
    "subm_id": "1289668414"
}