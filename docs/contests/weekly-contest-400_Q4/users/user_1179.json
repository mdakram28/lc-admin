{
    "username": "naveenarorakrnl",
    "submission": "class Solution {\n\n#define MAX_INT INT32_MAX\n\nclass SegmentTree {\npublic:\n    vector<int> segTree;\n    int size;\n\n    SegmentTree(vector<int>& inputArray)\n    {\n        size = inputArray.size();\n        segTree.resize(4 * size);\n        buildTree(inputArray, 0, 0, size - 1);\n    }\n\n    void buildTree(vector<int>& inputArray, int node, int start, int end)\n    {\n        if (start == end) {\n            segTree[node] = inputArray[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            buildTree(inputArray, 2 * node + 1, start, mid);\n            buildTree(inputArray, 2 * node + 2, mid + 1, end);\n\n            segTree[node] = segTree[2 * node + 1] & segTree[2 * node + 2];\n        }\n    }\n\n    int rangeQuery(int left, int right)\n    {\n        return rangeQuery(0, 0, size - 1, left, right);\n    }\n\n    int rangeQuery(int node, int start, int end, int left, int right)\n    {\n        if (right < start || end < left) {\n            return MAX_INT;\n        }\n        if (left <= start && end <= right) {\n            return segTree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = rangeQuery(2 * node + 1, start, mid, left, right);\n        int rightQuery = rangeQuery(2 * node + 2, mid + 1, end, left, right);\n\n        return leftQuery & rightQuery;\n    }\n};\n\n\npublic:\n    int minimumDifference(vector<int>& nums, int target) {\n        int arraySize = nums.size();\n    SegmentTree segmentTree(nums);\n    int minimumDifference = MAX_INT;\n\n    for (int i = 0; i < arraySize; i++) {\n        int left = i - 1;\n        int right = arraySize - 1;\n        int middle;\n\n        while (right - left > 1) {\n            middle = (left + right) / 2;\n            if (segmentTree.rangeQuery(i, middle) >= target)\n                left = middle;\n            else\n                right = middle;\n        }\n        if (left != i - 1) {\n            int queryResult = segmentTree.rangeQuery(i, left);\n            minimumDifference = min(minimumDifference, abs(queryResult - target));\n        }\n        int queryResult = segmentTree.rangeQuery(i, right);\n        minimumDifference = min(minimumDifference, abs(target - queryResult));\n    }\n    return minimumDifference;\n    }\n};",
    "submit_ts": 1717300492.0
}