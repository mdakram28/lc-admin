{
    "username": "CompetitiveAjay",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size();\n        int cols = grid[0].size();\n        int flipsRequired = 0;\n        \n        // Check the center element for odd dimension cases\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (grid[rows / 2][cols / 2] == 1) {\n                flipsRequired += 1;\n            }\n        }\n\n        // Array to track the counts of different configurations\n        vector<int> flipCounts(3, 0);\n\n        // Process the middle row if the number of rows is odd\n        if (rows % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int sum = grid[rows / 2][left] + grid[rows / 2][right];\n                flipCounts[sum] += 1;\n                left++;\n                right--;\n            }\n        }\n\n        // Process the middle column if the number of columns is odd\n        if (cols % 2 == 1) {\n            int top = 0, bottom = rows - 1;\n            while (top < bottom) {\n                int sum = grid[top][cols / 2] + grid[bottom][cols / 2];\n                flipCounts[sum] += 1;\n                top++;\n                bottom--;\n            }\n        }\n\n        // Adjust the total flips based on the counts\n        if (flipCounts[2] % 2 == 1) {\n            if (flipCounts[1] > 0) {\n                flipsRequired += flipCounts[1];\n            } else {\n                flipsRequired += 2;\n            }\n        } else {\n            flipsRequired += flipCounts[1];\n        }\n\n        // Calculate flips required for each 2x2 sub-grid\n        for (int r = 0; r < rows / 2; ++r) {\n            for (int c = 0; c < cols / 2; ++c) {\n                int topLeft = grid[r][c];\n                int bottomLeft = grid[rows - 1 - r][c];\n                int topRight = grid[r][cols - 1 - c];\n                int bottomRight = grid[rows - 1 - r][cols - 1 - c];\n\n                int totalSum = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (totalSum != 0 && totalSum != 4) {\n                    flipsRequired += min(totalSum, 4 - totalSum);\n                }\n            }\n        }\n\n        return flipsRequired;\n    }\n};\n",
    "submit_ts": "1722699512",
    "subm_id": "1343213937"
}