{
    "username": "Hogwartsss",
    "submission": "class Solution {\npublic:\n    int arr[400005] = {0};\n    void init(vector<int>& nums, int cur, int l, int r) {\n        if(l == r) {\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        init(nums, cur*2, l, mid);\n        init(nums, cur*2+1, mid + 1, r);\n        arr[cur] = arr[cur*2] + arr[cur*2+1];\n        if(mid > l) {\n            if(nums[mid-1] < nums[mid] && nums[mid] > nums[mid+1]) {\n                arr[cur] += 1;\n            }\n        }\n        if(mid + 1 < r) {\n            if(nums[mid+1] > nums[mid] && nums[mid+1] > nums[mid+2]) {\n                arr[cur] += 1;\n            }\n        }\n    }\n    void update(vector<int>& nums, int cur, int l, int r, int idx, int val) {\n        if(l == r) {\n            nums[idx] = val;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        if(idx <= mid) update(nums, cur*2, l, mid, idx, val);\n        else update(nums, cur*2+1, mid + 1, r, idx, val);\n        arr[cur] = arr[cur*2] + arr[cur*2+1];\n        if(mid > l) {\n            if(nums[mid-1] < nums[mid] && nums[mid] > nums[mid+1]) {\n                arr[cur] += 1;\n            }\n        }\n        if(mid + 1 < r) {\n            if(nums[mid+1] > nums[mid] && nums[mid+1] > nums[mid+2]) {\n                arr[cur] += 1;\n            }\n        }\n    }\n    int query(vector<int>& nums, int cur, int l, int r, int left, int right) {\n        if(l >= left && r <= right) {\n            return arr[cur];\n        }\n        int mid = l + (r - l) / 2;\n        int res = 0;\n        if(left <= mid) res += query(nums, cur*2, l, mid, left, right);\n        if(right > mid) res += query(nums, cur*2+1, mid + 1, r, left, right);\n        if(left <= mid && right > mid) {\n            if(mid > max(l, left)) {\n                if(nums[mid-1] < nums[mid] && nums[mid] > nums[mid+1]) {\n                    res += 1;\n                }\n            }\n            if(mid + 1 < min(r, right)) {\n                if(nums[mid+1] > nums[mid] && nums[mid+1] > nums[mid+2]) {\n                    res += 1;\n                }\n            }\n        }\n        return res;\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        init(nums, 1, 0, n-1);\n        vector<int> ans;\n        for(auto& q: queries) {\n            if(q[0] == 2) {\n                update(nums, 1, 0, n-1, q[1], q[2]);\n            } else {\n                ans.push_back(query(nums, 1, 0, n-1, q[1], q[2]));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718507764",
    "subm_id": "1289661723"
}