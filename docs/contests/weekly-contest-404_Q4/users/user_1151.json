{
    "username": "RkRoy",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int>> adj1(100007); // Assuming maximum size based on (int)(1e5 + 6)\n        vector<vector<int>> adj2(100007);\n\n        for (auto& edge : edges1) {\n            int u = edge[0], v = edge[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n\n        for (auto& edge : edges2) {\n            int u = edge[0], v = edge[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n\n        if (edges1.empty() && edges2.empty()) return 1;\n        if (edges1.empty()) {\n            int d2 = findDiameter(adj2, edges2.size() + 1);\n            if (edges2.size() == 1) return d2 + 1;\n            else return d2;\n        }\n        if (edges2.empty()) {\n            int d1 = findDiameter(adj1, edges1.size() + 1);\n            if (edges1.size() == 1) return d1 + 1;\n            else return d1;\n        }\n\n        int d1 = findDiameter(adj1, edges1.size() + 1);\n        int d2 = findDiameter(adj2, edges2.size() + 1);\n\n        int res = (d1 / 2) + (d2 / 2) + 1;\n        if (d1 % 2 == 1) res++;\n        if (d2 % 2 == 1) res++;\n        res = max(res, d1);\n        res = max(res, d2);\n\n        return res;\n    }\n\n    int findDiameter(vector<vector<int>>& adj, int len) {\n        int n = len;\n        vector<int> depth(n + 1, 0);\n\n        dfs(0, -1, adj, depth);\n\n        int maxi = 0, node = -1;\n        for (int i = 0; i <= n; ++i) {\n            if (depth[i] > maxi) {\n                maxi = depth[i];\n                node = i;\n            }\n        }\n\n        fill(depth.begin(), depth.end(), 0);\n        dfs(node, -1, adj, depth);\n\n        maxi = 0;\n        node = -1;\n        for (int i = 0; i <= n; ++i) {\n            if (depth[i] > maxi) {\n                maxi = depth[i];\n                node = i;\n            }\n        }\n\n        return maxi;\n    }\n\n    void dfs(int u, int par, vector<vector<int>>& adj, vector<int>& depth) {\n        for (int v : adj[u]) {\n            if (v != par) {\n                depth[v] = 1 + depth[u];\n                dfs(v, u, adj, depth);\n            }\n        }\n    }\n};\n",
    "submit_ts": "1719718254",
    "subm_id": "1304412642"
}