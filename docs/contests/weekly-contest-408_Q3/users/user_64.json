{
    "username": "wddd",
    "submission": "class Solution {\n    public int numberOfSubstrings(String s) {\n        int[][] prefix = new int[s.length()][2];\n        prefix[0][0] = s.charAt(0) == '0' ? 1 : 0;\n        prefix[0][1] = s.charAt(0) == '1' ? 1 : 0;\n\n        List<Integer> zeros = new ArrayList<>();\n        if (s.charAt(0) == '0') {\n            zeros.add(0);\n        }\n\n        for (int i = 1; i < s.length(); i++) {\n            if (s.charAt(i) == '0') {\n                prefix[i][0]++;\n                zeros.add(i);\n            } else {\n                prefix[i][1]++;\n            }\n            prefix[i][0] += prefix[i - 1][0];\n            prefix[i][1] += prefix[i - 1][1];\n        }\n\n        int count = 0;\n        for (int i = 0; i < zeros.size(); i++) {\n            for (int j = i; j < zeros.size(); j++) {\n                if ((j - i + 1) * (j - i + 1) + j - i + 1 > s.length()) {\n                    break;\n                }\n\n                int n0 = j - i + 1;\n                int n1 = prefix[zeros.get(j)][1] - (zeros.get(i) == 0 ? 0 : prefix[zeros.get(i) - 1][1]);\n\n                int min = Math.max(0, n0 * n0 - n1);\n                int left = i == 0 ? zeros.get(i) : zeros.get(i) - zeros.get(i - 1) - 1;\n                int right = j == zeros.size() - 1 ? s.length() - 1 - zeros.get(j) : zeros.get(j + 1) - zeros.get(j) - 1;\n\n                for (int k = 0; k <= left; k++) {\n                    if (min - k <= right) {\n                        count += right + 1 - Math.max(0, min - k);\n                    }\n                }\n            }\n        }\n\n        int prev = -1;\n        for (int i = 0; i < s.length(); i++) {\n            if (prev == -1) {\n                if (s.charAt(i) == '0') {\n                    continue;\n                } else {\n                    prev = i;\n                }\n            } else {\n                if (s.charAt(i) == '1') {\n                    continue;\n                } else {\n                    int n = i - prev;\n                    count += (1 + n) * n / 2;\n                    prev = -1;\n                }\n            }\n        }\n\n        if (prev != -1) {\n            int n = s.length() - prev;\n            count += (1 + n) * n / 2;\n        }\n\n        return count;\n    }\n}",
    "submit_ts": "1722136619",
    "subm_id": "1335740048"
}