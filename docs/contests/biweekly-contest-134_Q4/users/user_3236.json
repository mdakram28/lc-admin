{
    "username": "unobiased",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        \n        long long count = 0;\n        unordered_map<long long, long long> mp;\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> curMap;\n            \n            // checking if current element itself is k \n            if (nums[i] == k)\n                count++;\n            curMap[nums[i]] = 1;\n            \n            // merging curmap and mp for next iteration\n            for (auto& [it , f] : mp) {\n                long long currentAND  = it & nums[i];\n                if (currentAND == k) {\n                    count = count + f;\n                }\n                curMap[currentAND] += f;\n            }\n            \n            mp = curMap;\n        }\n\n        return count;\n    }\n};",
    "submit_ts": "1720280165",
    "subm_id": "1311779239"
}