{
    "username": "vermachakshu",
    "submission": "typedef long long ll;\n\nstruct seg_tree{\n    pair<int, ll> NEUTRAL_ELEMENT;\n    int NEUTRAL_UPDATE;\n    ll size;\n    int N;\n    vector<int> lazy;\n    vector<pair<int, ll>> st;\n    vector<int> mp;\n\n    void init(int n){\n        size = 1;\n        N = n;\n        while(size < n) size <<= 1;\n\n        NEUTRAL_UPDATE = -1;\n        NEUTRAL_ELEMENT = {0, 0};\n        lazy.assign(2 * size, NEUTRAL_UPDATE);\n        st.assign(2 * size, {0, 0});\n        mp.resize(2 * size);\n        build();\n    }\n\n    pair<int, ll> combine(pair<int, ll> x, pair<int, ll> y){\n        pair<int, ll> res = {max(x.first, y.first), x.second + y.second};\n        return res;\n    }\n\n    pair<int, ll> apply(int node, pair<int, ll> curr, int upd, int lx, int rx){\n        if(upd == NEUTRAL_UPDATE)   return curr;\n        pair<int, ll> res = {upd, upd ? (upd - node - 1) : 0}; \n        return res;\n    }\n\n    int combineUpdate(int new_upd, int old_upd){\n        return (new_upd == NEUTRAL_UPDATE)?old_upd:new_upd;\n        // return new_upd;\n    }\n\n    void build(int node, int lx, int rx){\n        if(rx - lx == 1){\n            if(lx < N){\n                mp[node] = lx;\n                st[node] = {0, 0};\n            }\n            return;\n        }\n        int tm = (lx + rx) >> 1;\n        build(2*node + 1, lx, tm);\n        build(2*node + 2, tm, rx);\n        st[node] = combine(st[2*node + 1], st[2*node + 2]);\n    }\n\n    void propagate(ll node, ll lx, ll rx){\n        if(rx - lx > 1){\n            // Non leaf node\n            int tm = (lx + rx) >> 1;\n            lazy[2*node + 1] = combineUpdate(lazy[node], lazy[2*node + 1]);\n            lazy[2*node + 2] = combineUpdate(lazy[node], lazy[2*node + 2]);\n            st[2*node + 1] = apply(mp[2*node + 1], st[2*node + 1], lazy[node], lx, tm);\n            st[2*node + 2] = apply(mp[2*node + 2], st[2*node + 2], lazy[node], tm, rx);\n            lazy[node] = NEUTRAL_UPDATE;\n        }\n    }\n\n    void update(int l, int r, int node, int val, int lx, int rx){\n        if(lx >= r || rx <= l){\n            return;\n        }\n        if(lx >= l && rx <= r){\n            lazy[node] = combineUpdate(val, lazy[node]);\n            st[node] = apply(mp[node], st[node], val, lx, rx);\n            return;\n        }\n\n        propagate(node, lx, rx);\n        int m = (lx + rx) >> 1;\n        update(l, r, 2 * node + 1, val, lx, m);\n        update(l, r, 2 * node + 2, val, m, rx);\n        st[node] = combine(st[2 * node + 1], st[2 * node + 2]);\n    }\n\n    void update(int l, int r, int val){\n        update(l, r, 0, val, 0, size);\n    }\n    \n    pair<int, ll> query(int l, int r, int node, int lx, int rx){\n        if(rx <= l || lx >= r)  return NEUTRAL_ELEMENT;\n        if(lx >= l && rx <= r){\n            return st[node];\n        }\n        propagate(node, lx, rx);\n        int m = (lx + rx) >> 1;\n        pair<int, ll> res = combine(query(l, r, 2 * node + 1, lx, m), query(l, r, 2 * node + 2, m, rx));\n        st[node] = combine(st[2 * node + 1], st[2 * node + 2]);\n        return res;\n    }\n    pair<int, ll> query(int l, int r){\n        return query(l, r, 0, 0, size);\n    }\n    void build(){\n        build(0, 0, size);\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& quer) {\n        vector<int> ans;\n        seg_tree st;\n        st.init(n);\n        for(int i=0; i<n-1; i++)    st.update(i, i + 1, i + 1);\n        // cout << st.query(0, 1).first << \" \" << st.query(0, 1).second << \"\\n\";\n        // set<int> st;\n        for(auto q:quer){\n            int x = st.query(q[0], q[0] + 1).first;\n            int mx = st.query(0, q[0]).first;\n            if(x < q[1] && q[1] > mx)    st.update(q[0], q[0] + 1, q[1]);\n            st.update(q[0] + 1, q[1], 0);\n            int sub = st.query(0, n).second;\n            // cout << \"--\\n\";\n            // for(int i=0; i<n; i++){\n            //     cout << st.query(i, i + 1).second << \" \";\n            // }\n            // cout<<\"--\\n\";\n            // cout << x << \" \" << mx << \" \" << sub << \"\\n\";\n            ans.push_back(n - 1 - sub);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722743525",
    "subm_id": "1343793911"
}