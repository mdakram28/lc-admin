{
    "username": "happy-hypatiaj5e",
    "submission": "func getResults(queries [][]int) []bool {\n\tres := []bool{}\n\tMXN := min(3*len(queries), int(5e4))\n\tt := newSegmentTree(MXN)\n\tfor _, q := range queries {\n\t\tif q[0] == 1 {\n\t\t\tt.update(1, q[1], q[1])\n\t\t\tt.update(1, q[1]-1, q[1])\n\t\t} else {\n\t\t\tv := t.query(1, 0, q[1]-1).val\n\t\t\tres = append(res, v >= q[2])\n\t\t}\n\t}\n\treturn res\n}\n\ntype node struct {\n\tl, r        int\n\tval, vl, vr int\n\tb           bool\n}\n\ntype seg []node\n\n// \u5355\u70b9\u66f4\u65b0\uff1abuild \u548c update \u901a\u7528\nfunc (t seg) set(o, val int) {\n\tif t[o].l == val-1 {\n\t\tt[o].vr = 0\n\t\tt[o].b = true\n\t} else if t[o].r == val {\n\t\tt[o].vl = 0\n\t\tt[o].b = true\n\t}\n}\n\nfunc merge(n1, n2 node) node {\n\tn := node{}\n\tn.val = max(n1.vr+n2.vl, max(n1.val, n2.val))\n\tn.vl = n1.vl\n\tif !n1.b {\n\t\tn.vl += n2.vl\n\t}\n\tn.vr = n2.vr\n\tif !n2.b {\n\t\tn.vr += n1.vr\n\t}\n\tn.b = n1.b || n2.b\n\tn.l, n.r = n1.l, n2.r\n\treturn n\n}\n\nfunc (t seg) build(o, l, r int) {\n\tt[o].l, t[o].r = l, r\n\tif l == r {\n\t\tt[o].val, t[o].vl, t[o].vr = 1, 1, 1\n\t\treturn\n\t}\n\tm := (l + r) >> 1\n\tt.build(o<<1, l, m)\n\tt.build(o<<1|1, m+1, r)\n\tt[o] = merge(t[o<<1], t[o<<1|1])\n}\n\n// o=1  1<=i<=n\nfunc (t seg) update(o, i, val int) {\n\tif t[o].l == t[o].r {\n\t\tt.set(o, val)\n\t\treturn\n\t}\n\tm := (t[o].l + t[o].r) >> 1\n\tif i <= m {\n\t\tt.update(o<<1, i, val)\n\t} else {\n\t\tt.update(o<<1|1, i, val)\n\t}\n\tt[o] = merge(t[o<<1], t[o<<1|1])\n}\n\n// o=1  [l,r] 1<=l<=r<=n\nfunc (t seg) query(o, l, r int) node {\n\tif l <= t[o].l && t[o].r <= r {\n\t\treturn t[o]\n\t}\n\tm := (t[o].l + t[o].r) >> 1\n\tif r <= m {\n\t\treturn t.query(o<<1, l, r)\n\t}\n\tif m < l {\n\t\treturn t.query(o<<1|1, l, r)\n\t}\n\treturn merge(t.query(o<<1, l, m), t.query(o<<1|1, m+1, r))\n}\n\n// a \u4e0d\u80fd\u4e3a\u7a7a\nfunc newSegmentTree(n int) seg {\n\tt := make(seg, 4*n)\n\tt.build(1, 0, n)\n\treturn t\n}",
    "submit_ts": 1716651604.0
}