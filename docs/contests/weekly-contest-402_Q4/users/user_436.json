{
    "username": "drash99",
    "submission": "class SegTree():\n    def __init__(self, nums, start, end):\n        self.start = start\n        self.end = end\n        if start == end:\n            self.isleaf = True\n            self.sum = 0\n        else:\n            self.isleaf = False\n            self.left = SegTree(nums,start, (start+end)//2)\n            self.right = SegTree(nums,(start+end)//2+1, end)\n            self.sum = self.left.sum+self.right.sum\n            lr = (start+end)//2\n            rl = (start+end)//2 + 1\n            if start < lr < end and nums[lr-1] < nums[lr] and nums[lr+1] < nums[lr]:\n                self.sum += 1\n            if start < rl < end and nums[rl-1] < nums[rl] and nums[rl+1] < nums[rl]:\n                self.sum += 1\n\n    def findsum(self, nums, start, end):\n        if start == self.start and end == self.end:\n            return self.sum\n\n        half = (self.start+self.end)//2+1\n        if start < half:\n            if end < half:\n                return self.left.findsum(nums, start,end)\n            else:\n                ans = self.left.findsum(nums, start,half-1)+self.right.findsum(nums, half,end)\n                lr = half-1\n                rl = half\n                if start < lr < end and nums[lr-1] < nums[lr] and nums[lr+1] < nums[lr]:\n                    ans += 1\n                if start < rl < end and nums[rl-1] < nums[rl] and nums[rl+1] < nums[rl]:\n                    ans += 1\n                return ans\n        else:\n            return self.right.findsum(nums, start,end)\n    def updatesum(self, nums, start):\n        if self.isleaf and start == self.start:\n            self.sum = 0\n        else:\n            half = (self.start+self.end)//2+1\n            if start < half:\n                self.left.updatesum(nums, start)\n            else:\n                self.right.updatesum(nums, start)\n            self.sum = self.left.sum+self.right.sum\n            lr = (self.start+self.end)//2\n            rl = (self.start+self.end)//2 + 1\n            if self.start < lr < self.end and nums[lr-1] < nums[lr] and nums[lr+1] < nums[lr]:\n                self.sum += 1\n            if self.start < rl < self.end and nums[rl-1] < nums[rl] and nums[rl+1] < nums[rl]:\n                self.sum += 1\n\n    def __str__(self) -> str:\n        tmp = f\"start: {self.start} end:{self.end} sum:{self.sum}\"\n        if not self.isleaf:\n            tmp+='\\n'\n            tmp += str(self.left)\n            tmp+='\\n'\n            tmp += str(self.right )\n        return tmp\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        t = SegTree(nums, 0, len(nums)-1)\n        ans = []\n        for a,b,c in queries:\n            if a == 1:\n                #print(t)\n                ans.append(t.findsum(nums, b,c))\n            else:\n                nums[b] = c\n                t.updatesum(nums, b)\n        return ans",
    "submit_ts": 1718507259.0
}