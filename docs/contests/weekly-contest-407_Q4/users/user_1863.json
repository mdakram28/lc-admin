{
    "username": "devils_advocate",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        std::vector<long long> diff(n);\n        \n        // Calculate the difference between target and nums\n        for (int i = 0; i < n; ++i) {\n            diff[i] = static_cast<long long>(target[i]) - nums[i];\n        }\n        \n        long long total_op = 0;\n        long long current_segment_diff = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (i == 0 || (diff[i - 1] > 0 && diff[i] > 0) || (diff[i - 1] < 0 && diff[i] < 0)) {\n                long long additional_op = std::abs(diff[i]) - std::abs(current_segment_diff);\n                if (additional_op > 0) {\n                    total_op += additional_op;\n                    // Check for overflow before adding\n                    if (total_op > std::numeric_limits<long long>::max() - additional_op) {\n                        return -1; // Overflow detected\n                    }\n                }\n                current_segment_diff = diff[i];\n            } else {\n                total_op += std::abs(diff[i]);\n                // Check for overflow before adding\n                if (total_op > std::numeric_limits<long long>::max() - std::abs(diff[i])) {\n                    return -1; // Overflow detected\n                }\n                current_segment_diff = diff[i];\n            }\n        }\n\n        return total_op;\n    }\n};",
    "submit_ts": "1721533106",
    "subm_id": "1328001414"
}