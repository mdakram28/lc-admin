{
    "username": "nevergiveup",
    "submission": "class Solution {\n\n    private int[] update = new int[100010];\n\n    private void updateRange(int l , int r , int val) {\n        if (l <= r) {\n            update[l] +=  val;\n            update[r + 1] -= val;\n        }\n    }\n\n    private void updateImp(int val1 , int val2 , int k) {\n        int diff = Math.abs(val1 - val2);\n        int boundary = Math.max(Math.max(val1 , k - val1) , Math.max(val2 , k - val2));\n        int cost1Left = 0 , cost1Right = boundary;\n        int cost2Left = boundary + 1 , cost2Right = k;\n        if (diff <= cost1Right) {\n            updateRange(cost1Left , diff - 1 , 1);\n            updateRange(diff + 1 , cost1Right , 1);\n            updateRange(cost2Left , cost2Right , 2);\n        } else {\n            updateRange(cost1Left , cost1Right , 1);\n            updateRange(cost2Left , diff - 1 , 2);\n            updateRange(diff + 1 , cost2Right , 2);\n        }\n    }\n\n    public int minChanges(int[] nums, int k) {\n        int l = 0 , r = nums.length - 1 , acc = 0 , ans = Integer.MAX_VALUE;\n        while (l < r) {\n            updateImp(nums[l] , nums[r] , k);\n            l ++;\n            r --;\n        }\n        for (int i = 0;i <= k;i ++) {\n            acc += update[i];\n            ans = Math.min(ans , acc);\n        }\n        return ans;\n    }\n\n}",
    "submit_ts": "1721486948",
    "subm_id": "1327370433"
}