{
    "username": "Zzyzx38",
    "submission": "class Solution {\npublic:\n    vector<int> fir, sec, ans;\n    \n    void dfs1(vector<vector<int>> & graph, int node = 0, int parent = 0) {\n        for (int i : graph[node])\n            if (i != parent) {\n                dfs1(graph, i, node);\n                if (fir[i] + 1 > fir[node]) {\n                    sec[node] = fir[node];\n                    fir[node] = fir[i] + 1;\n                } else if (fir[i] + 1 > sec[node]) {\n                    sec[node] = fir[i] + 1;\n                }\n            }\n    }\n\n    void dfs2(vector<vector<int>> & graph, int node = 0, int parent = 0, int to_p = 0) {\n        ans[node] = max(to_p, fir[node]);\n        for (int i : graph[node])\n            if (i != parent) {\n                if (fir[i] + 1 == fir[node])\n                    dfs2(graph,i, node, max(to_p, sec[node]) + 1);\n                else dfs2(graph, i, node, ans[node] + 1);\n            }\n    }\n    vector<vector<int>> graph, graph2;\n    vector<int> calc(vector<vector<int>> & graph, int n)\n    {\n        fir.assign(n,0);//first highest ht\n        sec.assign(n,0);//second highest\n        ans.assign(n,0);\n        dfs1(graph,0,0);\n        dfs2(graph,0,0,0);\n        return ans;\n    }        \n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1;\n        int m=edges2.size()+1;\n        graph.assign(n,{});\n        graph2.assign(m,{});\n        for(auto x:edges1)\n        {\n            int a=x[0];\n            int b=x[1];\n            graph[a].push_back(b);\n            graph[b].push_back(a);\n        }\n        for(auto x:edges2)\n        {\n            int a=x[0];\n            int b=x[1];\n            graph2[a].push_back(b);\n            graph2[b].push_back(a);\n        }\n        vector<int> f=calc(graph,n);\n        vector<int> f2=calc(graph2,m);\n        sort(f.begin(),f.end());\n        sort(f2.begin(),f2.end());\n        if(edges1.size()==0) return f2[0]+1;\n        else if(edges2.size()==0) return f[0]+1;\n        return max({f[0]+f2[0]+1, f[f.size()-1], f2[f2.size()-1]});\n    }\n};",
    "submit_ts": 1719719126.0
}