{
    "username": "shubham7447",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int maxWidth, int maxHeight, vector<vector<int>>& circleObstacles) {\n        return pathExists(maxWidth, maxHeight, circleObstacles);\n    }\n\nprivate:\n    bool pathExists(int maxWidth, int maxHeight, vector<vector<int>>& circleObstacles) {\n        int totalObstacles = circleObstacles.size();\n        vector<vector<int>> adjacencyList(totalObstacles + 4);\n\n        for (int i = 0; i < totalObstacles; i++) {\n            if (circleObstacles[i][0] <= circleObstacles[i][2]) {\n                adjacencyList[totalObstacles].push_back(i);\n                adjacencyList[i].push_back(totalObstacles);\n            }\n            if (maxWidth - circleObstacles[i][0] <= circleObstacles[i][2]) {\n                adjacencyList[totalObstacles + 2].push_back(i);\n                adjacencyList[i].push_back(totalObstacles + 2);\n            }\n            if (circleObstacles[i][1] <= circleObstacles[i][2]) {\n                adjacencyList[totalObstacles + 1].push_back(i);\n                adjacencyList[i].push_back(totalObstacles + 1);\n            }\n            if (maxHeight - circleObstacles[i][1] <= circleObstacles[i][2]) {\n                adjacencyList[totalObstacles + 3].push_back(i);\n                adjacencyList[i].push_back(totalObstacles + 3);\n            }\n            for (int j = i + 1; j < totalObstacles; ++j) {\n                double distBetweenCenters = sqrt(pow(circleObstacles[i][0] - circleObstacles[j][0], 2) + pow(circleObstacles[i][1] - circleObstacles[j][1], 2));\n                int sumOfRadii = circleObstacles[i][2] + circleObstacles[j][2];\n                if (sumOfRadii >= distBetweenCenters) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        int pathBlocked = 0;\n        pathBlocked = max(pathBlocked, bfs(adjacencyList, totalObstacles, totalObstacles + 1, totalObstacles + 2, totalObstacles + 4));\n        pathBlocked = max(pathBlocked, bfs(adjacencyList, totalObstacles + 3, totalObstacles + 2, totalObstacles + 1, totalObstacles + 4));\n\n        return pathBlocked == 0;\n    }\n\n    int bfs(vector<vector<int>>& adjacencyList, int source, int target1, int target2, int nodeCount) {\n        queue<int> q;\n        vector<bool> visited(nodeCount + 4, false);\n\n        q.push(source);\n        visited[source] = true;\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return (visited[target1] || visited[target2] ? 1 : 0);\n    }\n};",
    "submit_ts": "1722138367",
    "subm_id": "1335788964"
}