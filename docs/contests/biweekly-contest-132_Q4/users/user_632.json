{
    "username": "Kaustubh00_1",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dy(n, vector<int>(k + 1, 1));\n        int cnt = 1;\n        vector<int> dz(k + 1, -1);\n        vector<unordered_map<int, int>> mpp(k + 1);\n        \n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                for (int it = 0; it < j; ++it) {\n                    dy[i][j] = max(dy[i][j], 1 + dz[it]);\n                }\n                \n                if (mpp[j].count(nums[i]) > 0) {\n                    dy[i][j] = max(dy[i][j], 1 + mpp[j][nums[i]]);\n                }\n                \n                cnt = max(cnt, dy[i][j]);\n            }\n            \n            for (int j = 0; j <= k; ++j) {\n                dz[j] = max(dz[j], dy[i][j]);\n                mpp[j][nums[i]] = max(mpp[j][nums[i]], dy[i][j]);\n            }\n        }\n        \n        return cnt;\n    }\n};",
    "submit_ts": 1717862162.0
}