{
    "username": "mochamapleaf",
    "submission": "struct MySt{\n    nums: Vec<i32>,\n    diff: Vec<usize>\n}\n\nimpl MySt{\n    fn new(nums: Vec<i32>)-> Self{\n        let mut diff = vec![0_usize; nums.len()];\n        for i in 1..nums.len()-1{\n            if (nums[i] > nums[i-1]) && (nums[i] > nums[i+1]){\n                diff[i] = 1;\n            }\n        }\n        MySt{\n            nums: nums,\n            diff: diff\n        }\n    }\n    fn query(&self, l: usize, r: usize) -> usize{\n        if l+1 >= r {return 0; }\n        self.diff[l+1..r].iter().sum()\n    }\n    fn modify(&mut self, idx: usize, val: i32){\n        if val == self.nums[idx]{ return; }\n        //check left remove peak\n        if idx >= 1{\n            if val >= self.nums[idx-1]{\n                self.diff[idx-1] = 0;\n            }\n        }\n\n        //check left add peak\n\n        if idx >= 2{\n            if val < self.nums[idx-1] && self.nums[idx-1] > self.nums[idx-2]{\n                self.diff[idx-1] = 1;\n            }\n        }\n\n        //check right remove peak\n        if idx < self.nums.len()-1{\n            if val >= self.nums[idx+1]{\n                self.diff[idx+1] = 0;\n            }\n        }\n\n        //check right add peak\n        if idx < self.nums.len()-2{\n            if val < self.nums[idx+1] && self.nums[idx+1] > self.nums[idx+2]{\n                self.diff[idx+1] = 1;\n            }\n        }\n\n        //check self\n        self.diff[idx] = if val > *self.nums.get(idx+1).unwrap_or(&i32::MAX) && val > *self.nums.get(idx-1).unwrap_or(&i32::MAX) {1} else {0};\n        self.nums[idx] = val;\n    }\n}\n\n\nimpl Solution {\n    pub fn count_of_peaks(nums: Vec<i32>, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let mut inst = MySt::new(nums);\n        let mut ret = Vec::new();\n        for query in queries.iter(){\n            match query[0]{\n                1 => {\n                    let ans = inst.query(query[1] as usize, query[2] as usize);\n                    ret.push(ans as i32);\n                },\n                2 => {\n                    inst.modify(query[1] as usize, query[2] as i32);\n                },\n                _ => {println!(\"invalid input\");}\n            }\n        }\n        ret\n    }\n}",
    "submit_ts": "1718508736",
    "subm_id": "539789037"
}