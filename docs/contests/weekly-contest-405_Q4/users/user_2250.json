{
    "username": "Kingragnorr",
    "submission": "class TrieNode {\n\npublic:\n\n    unordered_map<char, TrieNode*> children;\n\n    vector<pair<int, int>> word_ends;\n\n};\n\nclass Trie {\n\npublic:\n\n    TrieNode* root;\n\n    Trie() {\n\n        root = new TrieNode();\n\n    }\n\n    void insert(string word, int index, int cost) {\n\n        TrieNode* node = root;\n\n        for (char c : word) {\n\n            if (!node->children.count(c)) {\n\n                node->children[c] = new TrieNode();\n\n            }\n\n            node = node->children[c];\n\n        }\n\n        node->word_ends.push_back({index, cost});\n\n    }\n\n};\n\nclass Solution {\n\npublic:\n\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int n = target.size();\n\n        vector<int> dp(n + 1, INT_MAX);\n\n        dp[0] = 0;\n\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n\n            trie.insert(words[i], i, costs[i]);\n\n        }\n\n        for (int i = 0; i < n; ++i) {\n\n            if (dp[i] == INT_MAX) {\n\n                continue;\n\n            }\n\n            TrieNode* node = trie.root;\n\n            for (int j = i; j < n; ++j) {\n\n                if (!node->children.count(target[j])) {\n\n                    break;\n\n                }\n\n                node = node->children[target[j]];\n\n                for (auto& p : node->word_ends) {\n\n                    int word_len = words[p.first].size();\n\n                    if (i + word_len <= n) {\n\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n\n                    }\n\n                }\n\n            }\n\n        }\n\n        return dp[n] == INT_MAX? -1 : dp[n];\n\n    }\n\n};\n\n\n        \n\n",
    "submit_ts": "1720324711",
    "subm_id": "1312406129"
}