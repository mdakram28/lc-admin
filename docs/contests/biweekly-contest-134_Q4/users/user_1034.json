{
    "username": "void_8t",
    "submission": "class Solution {\npublic:\n    \n    \n    class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            int leftChild = 2 * node + 1;\n            int rightChild = 2 * node + 2;\n            buildTree(nums, leftChild, start, mid);\n            buildTree(nums, rightChild, mid + 1, end);\n            tree[node] = tree[leftChild] & tree[rightChild];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return -1;  // Return all bits set (since AND with all bits set is neutral)\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftChild = 2 * node + 1;\n        int rightChild = 2 * node + 2;\n        int leftResult = query(leftChild, start, mid, L, R);\n        int rightResult = query(rightChild, mid + 1, end, L, R);\n        if (leftResult == -1) return rightResult;\n        if (rightResult == -1) return leftResult;\n        return leftResult & rightResult;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        buildTree(nums, 0, 0, n - 1);\n    }\n\n    int query(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n};\n\n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        \n        \n        int n=nums.size();\n        SegmentTree st(nums);\n        \n        \n        long long ans=0;\n        for(int i=0;i<n;i++){\n\n        \n            \n            int rightend=-1;\n            int leftend=-1;\n            \n            int low=0,high=i;\n            while(low<=high){\n\n            int mid=(low+high)/2;\n                \n                int q=st.query(mid,i);\n                \n                if(q==k){\nrightend=mid;\n                    low=mid+1;\n                }\n                else if(q>k){\n                    high=mid-1;\n                }\n                else{\nlow=mid+1;\n                }\n                \n                \n            \n            }\n            \n            \n            \n                        low=0;\n            high=i;\n            while(low<=high){\n\n            int mid=(low+high)/2;\n                \n                int q=st.query(mid,i);\n                \n                if(q==k){\nleftend=mid;\n                    high=mid-1;\n                }\n                else if(q>k){\n                    high=mid-1;\n                }\n                else{\nlow=mid+1;\n                }\n                \n                \n            \n            }\n        \n        if(leftend!=-1&&rightend!=-1){\n            ans+=(rightend-leftend+1);\n        }\n        \n        \n        }\n        return ans;\n        \n    }\n};\n\n\n",
    "submit_ts": "1720279753",
    "subm_id": "1311763772"
}