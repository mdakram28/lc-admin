{
    "username": "vidy7014",
    "submission": "class Solution {\n\npublic:\n            queue<int> nodesQueue;\n    // Perform BFS to check if there is a path from the start node to any of the target nodes\n    bool bfs(const vector<vector<int>>& graph, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n\n        vector<int> visited(totalNodes, 0);\n        nodesQueue.push(startNode);\n        visited[startNode] = 1;\n\n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodesQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n\n    // Add edges to the graph based on circle positions and rectangle boundaries\n    void addEdges(vector<vector<int>>& graph, const vector<pair<pair<int, int>, int>>& circles, int width, int height, int numCircles) {\n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (width - circles[i].first.first <= circles[i].second) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (height - circles[i].first.second <= circles[i].second) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    // Initialize circles data structure from input\n    vector<pair<pair<int, int>, int>> initializeCircles(const vector<vector<int>>& circlesData) {\n        int numCircles = circlesData.size();\n        vector<pair<pair<int, int>, int>> circles(numCircles);\n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circlesData[i][0];\n            circles[i].first.second = circlesData[i][1];\n            circles[i].second = circlesData[i][2];\n        }\n        return circles;\n    }\n\n    // Main function to determine if a valid path exists from bottom-left to top-right corner\n    bool canReachCorner(int width, int height, vector<vector<int>>& circlesData) {\n        int numCircles = circlesData.size();\n        vector<pair<pair<int, int>, int>> circles = initializeCircles(circlesData);\n        vector<vector<int>> graph(numCircles + 4);\n\n        addEdges(graph, circles, width, height, numCircles);\n\n        bool isBlocked = false;\n        isBlocked = isBlocked || bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4); // Check from bottom-left corner\n        isBlocked = isBlocked || bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4); // Check from top-right corner\n\n        return !isBlocked;\n    }\n};\n",
    "submit_ts": "1722136856",
    "subm_id": "1335746986"
}