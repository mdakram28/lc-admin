{
    "username": "brandonmpark",
    "submission": "from collections import deque\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float(\"inf\")\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str, cost: int):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\n    def search(self, word: str, start: int):\n        node = self.root\n        results = []\n        for i in range(start, len(word)):\n            if word[i] not in node.children:\n                break\n            node = node.children[word[i]]\n            if node.cost != float(\"inf\"):\n                results.append((i + 1, node.cost))\n        return results\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for i, word in enumerate(words):\n            trie.insert(word, costs[i])\n        dp = [float(\"inf\")] * (len(target) + 1)\n        n = len(target)\n        dp[0] = 0\n        min_heap = [(0, 0)]\n        while min_heap:\n            current_cost, current_index = heapq.heappop(min_heap)\n            if current_cost > dp[current_index]:\n                continue\n            for next_index, cost in trie.search(target, current_index):\n                new_cost = current_cost + cost\n                if new_cost < dp[next_index]:\n                    dp[next_index] = new_cost\n                    heapq.heappush(min_heap, (new_cost, next_index))\n        return dp[n] if dp[n] != float(\"inf\") else -1",
    "submit_ts": "1720324414",
    "subm_id": "1312398888"
}