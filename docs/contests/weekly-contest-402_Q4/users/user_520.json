{
    "username": "being_sukham",
    "submission": "class Solution {\nprivate:\n    vector<int> nums;\n    vector<int> segTree;\n    int n;\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            segTree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            segTree[node] = segTree[2 * node + 1] + segTree[2 * node + 2];\n        }\n    }\n\n    void updateUtil(int node, int start, int end, int idx) {\n        if (start == end) {\n            segTree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateUtil(2 * node + 1, start, mid, idx);\n            } else {\n                updateUtil(2 * node + 2, mid + 1, end, idx);\n            }\n            segTree[node] = segTree[2 * node + 1] + segTree[2 * node + 2];\n        }\n    }\n\n    int queryUtil(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) return 0;\n        if (l <= start && end <= r) return segTree[node];\n        int mid = (start + end) / 2;\n        int leftQuery = queryUtil(2 * node + 1, start, mid, l, r);\n        int rightQuery = queryUtil(2 * node + 2, mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\n    void update(int idx, int val) {\n        nums[idx] = val;\n        updateUtil(0, 0, n - 1, idx);\n        if (idx > 0) updateUtil(0, 0, n - 1, idx - 1);\n        if (idx < n - 1) updateUtil(0, 0, n - 1, idx + 1);\n    }\n\n    int query(int l, int r) {\n        return queryUtil(0, 0, n - 1, l, r);\n    }\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        this->nums = nums;\n        n = nums.size();\n        segTree.resize(4 * n, 0);\n        build(0, 0, n - 1);\n\n        vector<int> result;\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                if (l < r - 1) {\n                    result.push_back(query(l + 1, r - 1));\n                } else {\n                    result.push_back(0);\n                }\n            } else if (q[0] == 2) {\n                int index = q[1], value = q[2];\n                update(index, value);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": 1718507778.0
}