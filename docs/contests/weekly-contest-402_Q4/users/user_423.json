{
    "username": "user1428I",
    "submission": "class RangeQuery:\n    def __init__(self, data: List, f: callable) -> None:\n        # \u6570\u636e\u7684\u603b\u957f\u5ea6\n        n = len(data)\n        # \u539f\u59cb\u6570\u636e \u9632\u6b62\u88ab\u4fee\u6539 \u6240\u4ee5\u590d\u5236\u4e00\u4efd\n        d = [data.copy()]\n        # \u4e00\u5c42\u5c42\u5efa\u7acb\n        u = d[0]\n\n        self.d = d\n        self.f = f\n        self.n = n\n\n        # \u9010\u5c42\u5efa\u7acb \u5f53\u4e0b\u5c42\u7684\u6570\u91cf\u4e3a 0 \u65f6\u505c\u6b62\n        while n >> 1:\n            nd = [f(u[i * 2], u[i * 2 + 1]) for i in range(n >> 1)]\n\n            # \u5982\u679c\u4e0a\u5c42\u6700\u540e\u6709\u5b64\u7acb\u7684\u8282\u70b9\n            if n & 1:\n                nd.append(u[-1])\n\n            # \u5f53\u524d\u5c42\u7684\u8282\u70b9\u6570\u91cf\n            n = (n >> 1) + (n & 1)\n            u = nd\n            d.append(nd)\n\n    def _query(self, l, r, k, i):\n        a = i * (1 << k)\n\n        if a == l and r == min(a + (1 << k), self.n):\n            return self.d[k][i]\n\n        mid = a + (1 << (k - 1))\n\n        if mid >= r:\n            return self._query(l, r, k - 1, i * 2)\n        elif mid <= l:\n            return self._query(l, r, k - 1, i * 2 + 1)\n        else:\n            return self.f(\n                self._query(l, mid, k - 1, i * 2),\n                self._query(mid, r, k - 1, i * 2 + 1),\n            )\n\n    def query(self, l, r):\n        \"\"\"\u67e5\u8be2 [l, r) \u533a\u95f4\"\"\"\n        if l < 0:\n            l = 0\n\n        if r > self.n:\n            r = self.n\n\n        if l >= r:\n            raise ValueError(\n                f\"[RangeQuery]: query r({r}) should be greater than l({l})\"\n            )\n\n        return self._query(l, r, len(self.d) - 1, 0)\n\n    def update(self, i, v):\n        \"\"\"\u66f4\u65b0\u7d22\u5f15 i \u4f4d\u7f6e\u7684\u6570\u636e\u4e3a v\"\"\"\n        if i < 0 or i >= self.n:\n            return\n\n        f = self.f\n\n        for u in self.d:\n            u[i] = v\n\n            if i & 1:\n                v = f(u[i], u[i - 1])\n            elif i + 1 < len(u):\n                v = f(u[i], u[i + 1])\n\n            i >>= 1\n\n    def updateRange(self, i, values):\n        \"\"\"\u4ece i \u5f00\u59cb\u66f4\u65b0 values \u957f\u5ea6\u7684\u6570\u636e\"\"\"\n        f = self.f\n        j = min(self.n - 1, i + len(values) - 1)\n        last = self.d[0]\n\n        for k, u in enumerate(self.d):\n            if k == 0:\n                for ii, v in enumerate(values):\n                    u[i + ii] = v\n            else:\n                ii = i\n\n                while ii < j:\n                    u[ii] = f(last[ii * 2], last[ii * 2 + 1])\n                    ii += 1\n\n                if j * 2 + 1 < len(last):\n                    u[j] = f(last[j * 2], last[j * 2 + 1])\n                else:\n                    u[j] = last[j * 2]\n\n            last = u\n            i >>= 1\n            j >>= 1\n\nclass Solution:\n    def countOfPeaks(self, u: List[int], q: List[List[int]]) -> List[int]:\n        n = len(u)\n        f = [0] * n\n\n        for i in range(1, n - 1):\n            if u[i] > u[i - 1] and u[i] > u[i + 1]:\n                f[i] = 1\n\n        p = RangeQuery(f, lambda a, b: a + b)\n\n        r = []\n\n        # print(p.d)\n\n        for a, b, c in q:\n            if a == 1:\n                if b + 1 <= c - 1:\n                    r.append(p.query(b + 1, c))\n                else:\n                    r.append(0)\n            else:\n                u[b] = c\n                if b > 0 and b < n - 1:\n                    p.update(b, 1 if (u[b] > u[b - 1] and u[b] > u[b + 1]) else 0)\n\n                b -= 1\n\n                if b > 0 and b < n - 1:\n                    p.update(b, 1 if (u[b] > u[b - 1] and u[b] > u[b + 1]) else 0)\n\n                b += 2\n\n                if b > 0 and b < n - 1:\n                    p.update(b, 1 if (u[b] > u[b - 1] and u[b] > u[b + 1]) else 0)\n\n        return r",
    "submit_ts": "1718507525",
    "subm_id": "539781911"
}