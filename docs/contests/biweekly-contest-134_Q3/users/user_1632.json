{
    "username": "daksh_02",
    "submission": "class Solution {\n    int n;\n    public int numberOfAlternatingGroups(int[] color, int k) {\n        n = color.length;\n        int res = 0;\n        TreeSet<Integer> set = new TreeSet<Integer>();\n        \n        for(int i = 0; i<n; i++){\n            if(color[i] == color[(i-1+n)%n])set.add(i);\n        }\n        for(int i = 0; i<=n-k; i++){\n            Integer big = set.ceiling(i+1);\n            if(big != null && big < i+k)continue;\n            res++;\n        }\n        \n        \n        for(int i= n-k+1; i<n; i++){\n            Integer big = set.size() == 0 ? null :set.last();\n            if(big != null && big > i)continue; \n            big = set.size() == 0 ? null :set.first(); \n            if(big != null && big<k-(n-i))continue;\n            res++;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1720277727",
    "subm_id": "1311677209"
}