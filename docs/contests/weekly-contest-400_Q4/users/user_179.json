{
    "username": "brycelo",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& nums, int node, int left, int right) {\n        if (left == right) {\n            tree[node] = nums[left];\n            return;\n        }\n\n        int mid = (left + right) / 2;\n        build(nums, 2 * node + 1, left, mid);\n        build(nums, 2 * node + 2, mid + 1, right);\n\n        tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int left, int right, int l, int r) {\n        if (r < left || right < l)\n            return INT_MAX;\n\n        if (l <= left && right <= r)\n            return tree[node];\n\n        int mid = (left + right) / 2;\n        int p1 = query(2 * node + 1, left, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, right, l, r);\n\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        const int n = nums.size();\n        int ans = INT_MAX;\n        \n        SegmentTree st(nums);\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n\n            while (r - l > 1) {\n                mid = l + (r - l) / 2;\n                if (st.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = min(ans, abs(st.query(i, l) - k));\n            ans = min(ans, abs(k - st.query(i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297696",
    "subm_id": "1274752429"
}