{
    "username": "Ruiko",
    "submission": "template<typename K>\nclass SegmentTree {\n    vector<K> nodes;\n    int n;\npublic:\n    SegmentTree(int n) : n(n), nodes(n * 2) {}\n\n    template<typename Gen>\n    void build(Gen gen) {\n        function<void(int, int, int)> _build = [&](int L, int R, int p) {\n            if (L == R) {\n                nodes[p] = gen(L);\n                return;\n            }\n            int mid = (L + R) / 2, lp = p + 1, rp = p + (mid - L + 1) * 2;\n            _build(L, mid, lp), _build(mid + 1, R, rp);\n            nodes[p] = nodes[lp] + nodes[rp];\n        };\n        _build(0, n - 1, 1);\n    }\n\n    void modify(int id, K v, bool is_add = false) {\n        function<void(int, int, int)> _modify = [&](int L, int R, int p) {\n            if (L == R) {\n                if (is_add) nodes[p] += v;\n                else nodes[p] = v;\n                return;\n            }\n            int mid = (L + R) / 2, lp = p + 1, rp = p + (mid - L + 1) * 2;\n            if (id <= mid) _modify(L, mid, lp);\n            else _modify(mid + 1, R, rp);\n            nodes[p] = nodes[lp] + nodes[rp];\n        };\n        _modify(0, n - 1, 1);\n    }\n\n    K query(int l, int r) {\n        function<K(int, int, int)> _query = [&](int L, int R, int p) -> K {\n            if (l <= L && R <= r) {\n                return nodes[p];\n            }\n            int mid = (L + R) / 2, lp = p + 1, rp = p + (mid - L + 1) * 2;\n            if (mid >= l && mid < r)\n                return _query(L, mid, lp) + _query(mid + 1, R, rp);\n            else if (mid >= l)\n                return _query(L, mid, lp);\n            else\n                return _query(mid + 1, R, rp);\n        };\n        return _query(0, n - 1, 1);\n    }\n\n    template<typename V, typename Fn, typename Fn2>\n    V query(int l, int r, V init_value, Fn merge, Fn2 parse) {\n        function<V(int, int, int)> _query = [&](int L, int R, int p) -> V {\n            if (l <= L && R <= r) {\n                V ret = parse(nodes[p]);\n                return ret;\n            }\n            int mid = (L + R) / 2, lp = p + 1, rp = p + (mid - L + 1) * 2;\n            V ret = init_value;\n            if (mid >= l) ret = merge(ret, _query(L, mid, lp));\n            if (mid < r) ret = merge(ret, _query(mid + 1, R, rp));\n            return ret;\n        };\n        return _query(0, n - 1, 1);\n    }\n};\n\nstruct maxv {\n    int v;\n\n    maxv(int v = -1e9) : v(v) {};\n\n    maxv &operator+=(const maxv &rhs) {\n        this->v = max(this->v, rhs.v);\n        return *this;\n    };\n};\n\nmaxv operator+(const maxv &lhs, const maxv &rhs) {\n    maxv ret = lhs;\n    ret += rhs;\n    return ret;\n}\n\nconstexpr int N = 5e4;\nSegmentTree<maxv> seg(N + 1);\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<int> S;\n        S.insert(0), S.insert(N);\n        seg.modify(0, N);\n        auto Add = [&](int x) -> int {\n            if (S.contains(x)) return 0;\n            auto it = S.upper_bound(x);\n            int l = *prev(it), r = *it;\n            int v1 = x - l, v2 = r - x;\n            seg.modify(l, v1), seg.modify(x, v2);\n            S.insert(x);\n            return 1;\n        };\n\n        auto Del = [&](int x) -> int {\n            assert(S.contains(x));\n            auto it = S.lower_bound(x);\n            int l = *prev(it), r = *next(it);\n            seg.modify(l, r - l), seg.modify(x, 0);\n            S.extract(x);\n            return 1;\n        };\n\n        vector<bool> ans;\n        for (auto &it: queries) {\n            if (it[0] == 1) {\n                Add(it[1]);\n            } else {\n                int x = it[1], sz = it[2];\n                int has = S.contains(x);\n                if (!has) Add(x);\n                ans.emplace_back(seg.query(0, x - 1).v >= sz);\n                if (!has) Del(x);\n            }\n        }\n        for (auto &it: queries) {\n            if (it[0] == 1) {\n                seg.modify(it[1], 0);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716650246.0
}