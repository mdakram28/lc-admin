{
    "username": "Mohd_Aftab11",
    "submission": "\n\nclass TrieNode {\n    #define ump\t\t\t\tunordered_map\n    #define vvi             vector<vector<int>>\n    #define vpii            vector<pair<int, int>>\npublic:\n    ump<char, TrieNode*> offspring;\n    vpii wrd_finish;\n};\n\nclass Trie {\n     #define pb \t\t\t\tpush_back\n        #define fi \t\t\t\tfirst\n        #define vpii            vector<pair<int, int>>\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void Trie_insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->offspring.count(c)) {\n                node->offspring[c] = new TrieNode();\n            }\n            node = node->offspring[c];\n        }\n        node->wrd_finish.pb({index, cost});\n    }\n};\n\n\n\nclass Solution {\n    #define ll              long long int\n    #define mod             1000000007\n    #define vi              vector<int>\n    #define vvi             vector<vector<int>>\n    #define vl              vector<long long>\n    #define vvl             vector<vector<long long>>\n    #define pb \t\t\t\tpush_back\n    #define pii             pair<int,int>\n    #define pll             pair<ll,ll>\n    #define ump\t\t\t\tunordered_map\n    #define pq_max          priority_queue<ll>\n    #define pq_min          priority_queue<ll,vl,greater<ll> >\n    #define all(n) \t\t\tn.begin(),n.end()\n    #define fi \t\t\t\tfirst\n    #define se\t\t\t\tsecond\n    #define mid(l,r)        (l+(r-l)/2)\n    #define inp(t)          int t; cin>>t; while(t--)\n    #define ref(i,n) \t\tfor(int i=0;i<(n);i++)\n    #define loop(i,a,b) \tfor(int i=(a);i<=(b);i++)\n    #define loopr(i,a,b) \tfor(int i=(a);i>=(b);i--)\n    #define vpii            vector<pair<int, int>>\n    \n    void fio(){\n        ios::sync_with_stdio(false); // Speeds up input/output\n        cin.tie(nullptr); // Unties cin from cout for faster input\n    }\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        fio();\n        \n        int n = target.size();\n        vi DP(n + 1, INT_MAX);\n        DP[0] = 0;\n\n        Trie trie;\n        ref(i, words.size()) {\n            trie.Trie_insert(words[i], i, costs[i]);\n        }\n\n        ref(i, n) {\n            if (DP[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->offspring.count(target[j])) {\n                    break;\n                }\n                node = node->offspring[target[j]];\n                for (auto& p : node->wrd_finish) {\n                    int word_len = words[p.fi].size();\n                    if (i + word_len <= n) {\n                        DP[i + word_len] = min(DP[i + word_len], DP[i] + p.se);\n                    }\n                }\n            }\n        }\n\n        return DP[n] == INT_MAX? -1 : DP[n];\n    }\n};\n",
    "submit_ts": "1720322921",
    "subm_id": "1312362666"
}