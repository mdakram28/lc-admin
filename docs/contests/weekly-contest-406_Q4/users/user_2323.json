{
    "username": "yueclipse",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        auto comp = [&horizontalCut, &verticalCut](const pair<bool, int>& a, const pair<bool, int>& b) {\n            int costA = a.first ? horizontalCut[a.second] : verticalCut[a.second];\n            int costB = b.first ? horizontalCut[b.second] : verticalCut[b.second];\n            return costA < costB;\n        };\n        priority_queue<pair<bool,int>, vector<pair<bool,int>>, decltype(comp)> pq(comp);\n        for(int i = 0; i < horizontalCut.size(); i++)\n            pq.push({true, i});\n        for(int i = 0; i < verticalCut.size(); i++)\n            pq.push({false, i});\n        int cutsHori = 0;\n        int cutsVert = 0;\n        long long result = 0;\n        while(!pq.empty()) {\n            bool isHorizontal = pq.top().first;\n            int cost = isHorizontal ? horizontalCut[pq.top().second] : verticalCut[pq.top().second];\n            pq.pop();\n            if(isHorizontal) {\n                result += cost * (cutsVert + 1);\n                cutsHori++;\n            } else {\n                result += cost * (cutsHori + 1);\n                cutsVert++;\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": "1720926758",
    "subm_id": "1320295563"
}