{
    "username": "agrawalji",
    "submission": "import java.util.HashMap;\nimport java.util.Map;\nimport java.util.Objects;\n\nclass Solution {\n    public int waysToReachStair(int k) {\n        \n        Map<Node, Long> dp = new HashMap<>();\n        return (int)solve(1L, 1L*k, 0L, 0, dp);\n    }\n    \n    private long solve(long i, long k, long jump, int prev, Map<Node, Long> dp){\n        if(i > k+1) return 0;\n        long ans = 0;\n        Node key = new Node(i, jump, prev);\n        \n        if(dp.containsKey(key)){\n        \n            return dp.get(key);\n        }\n        if(i==k) ans = 1;\n        if(prev != 1){\n            ans = ans + solve(i-1, k, jump, 1,dp);\n        }\n        ans = ans + solve(i + (1<<jump), k, jump+1, 2, dp);\n        dp.put(key, ans);\n        return ans;\n        \n    }\n    \n    class Node{\n        long i;\n        long jump;\n        int prev;\n        \n        public Node(long i, long jump, int prev){\n            this.i = i;\n            this.jump = jump;\n            this.prev = prev;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            Node node = (Node) o;\n            return i == node.i && jump == node.jump && prev == node.prev;\n        }\n\n        @Override\n        public int hashCode() {\n            return Objects.hash(i, jump, prev);\n        }\n    }\n}",
    "submit_ts": "1716087713",
    "subm_id": "1261792138"
}