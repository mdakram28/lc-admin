{
    "username": "the_coder_8297",
    "submission": "class Solution {\npublic:\n    pair<int,int> end_node(int node, vector<int> adj[], int n) {\n        queue<int> que;\n        que.push(node);\n        vector<bool> vis(n , 0);\n        vis[node] = true;\n        int last = -1;\n        \n        int steps = 0;\n        while(que.empty() == false) {\n            int size = que.size();\n            for(int i = 0; i < size ; i++) {\n                int ele = que.front(); que.pop();\n                last = ele;\n                for(auto &nei : adj[ele]) {\n                    if(vis[nei] == true) continue;\n                    que.push(nei);\n                    vis[nei] = 1;\n                }\n            }\n            steps++;\n        }\n        return {last, steps};\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<int> adj1[n], adj2[m];\n        \n        for(int i = 0; i < n-1 ; i++) {\n            int u = edges1[i][0], v = edges1[i][1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        \n        for(int i = 0; i < m-1; i++) {\n            int u = edges2[i][0], v = edges2[i][1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        \n        int end1 = end_node(0, adj1, n).first;\n        int dia1 = end_node(end1, adj1, n).second;\n        \n        int end2 = end_node(0, adj2, m).first;\n        int dia2 = end_node(end2, adj2, m).second;\n        // cout<<dia1<<\" \"<<dia2<<\"\\n\";\n        int ans = dia1/2 + dia2/2 + 1;\n        ans = max(ans, max(dia1-1, dia2-1));\n        return ans;\n    }\n};",
    "submit_ts": "1719719762",
    "subm_id": "1304449931"
}