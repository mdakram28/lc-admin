{
    "username": "NAVNEETkharb",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<int> indices;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() { root = new TrieNode(); }\n\n        void insert(const string& word, int index) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children[c]) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->indices.push_back(index);\n        }\n\n        TrieNode* getRoot() { return root; }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX)\n                continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j]])\n                    break;\n                node = node->children[target[j]];\n                for (int index : node->indices) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320840",
    "subm_id": "1312306030"
}