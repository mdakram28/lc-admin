{
    "username": "KartikDotDev",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> horizontalCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> verticalCuts(verticalCut.begin(), verticalCut.end());\n\n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n\n        while (!horizontalCuts.empty() && !verticalCuts.empty()) {\n            if (horizontalCuts.top() > verticalCuts.top()) {\n                totalCost += static_cast<long long>(horizontalCuts.top()) * verticalPieces;\n                horizontalCuts.pop();\n                horizontalPieces++;\n            } else {\n                totalCost += static_cast<long long>(verticalCuts.top()) * horizontalPieces;\n                verticalCuts.pop();\n                verticalPieces++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (!horizontalCuts.empty()) {\n            totalCost += static_cast<long long>(horizontalCuts.top()) * verticalPieces;\n            horizontalCuts.pop();\n            horizontalPieces++;\n        }\n\n        // If there are remaining vertical cuts\n        while (!verticalCuts.empty()) {\n            totalCost += static_cast<long long>(verticalCuts.top()) * horizontalPieces;\n            verticalCuts.pop();\n            verticalPieces++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925742",
    "subm_id": "1320264740"
}