{
    "username": "GoldenTutHeir",
    "submission": "#define ll long long\nclass Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        vector<ll>v;\n        for (int i = 0; i < n; ++i) {\n            v.push_back(target[i] - nums[i]);\n            cout << target[i] - nums[i] << \" \";\n        }\n        cout << endl;\n        ll count = 0;\n        int i = 0;\n        while(i < n) {\n            vector<int>g;\n            cout << i << \"->\";\n            if(i < n && v[i]>0) {\n                \n                while(i < n && v[i]>0) {\n                    g.push_back(v[i]);\n                    i++;\n                }\n                \n                count += hh(g);\n                cout << i << \": \" << hh(g) <<  endl;\n            } else if(i < n && v[i]<0) {\n                \n                while(i < n && v[i]<0) {\n                    g.push_back(-1*v[i]);\n                    i++;\n                }\n                \n                count += hh(g);\n                cout << i << \": \" << hh(g) <<  endl;\n            } else {\n                i++;\n            }\n        }\n        return count;\n    }\n    ll hh(vector<int>& target)\n    {\n        if(target.size() == 1){\n            return target[0];\n        }\n        ll count = target[0];\n        for (int i = 1; i < target.size(); i++)\n            count += max(target[i] - target[i - 1], 0);\n        return count;\n    }\n};",
    "submit_ts": "1721533129",
    "subm_id": "1328001965"
}