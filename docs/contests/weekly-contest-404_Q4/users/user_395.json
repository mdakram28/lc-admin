{
    "username": "luyangg",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def dijkstra(graph, src):\n            heap, visited, dist = [(0, src)], set(), {src:0} # with both visited and dist\n            while heap:\n                d, node = heappop(heap)\n                if node not in visited:\n                    visited.add(node)\n                    for v, w in graph[node]:\n                        if v not in dist or d+w < dist[v]:\n                            dist[v] = d+w\n                            heappush(heap, (d + w, v))\n            return dist  # dist = {vertex: distance, ...,}\n        g1 = defaultdict(list)\n        g2 = defaultdict(list)\n        ans = 0\n        for u, v in edges1:\n            g1[u].append((v, 1))\n            g1[v].append((u, 1))\n        for u, v in edges2:\n            g2[u].append((v, 1))\n            g2[v].append((u, 1))            \n        dist1 = dijkstra(g1, 0)\n        best = (0, 0)\n        for nei, d in dist1.items():\n            if d > best[1]:\n                best = (nei, d)\n        dist1 = dijkstra(g1, best[0])\n        x1 = 0\n        for nei, d in dist1.items():\n            x1 = max(x1, d)\n        ans = x1\n        x1 = (x1+1)//2\n        dist1 = dijkstra(g2, 0)\n        best = (0, 0)\n        for nei, d in dist1.items():\n            if d > best[1]:\n                best = (nei, d)\n        dist1 = dijkstra(g2, best[0])\n        x2 = 0\n        for nei, d in dist1.items():\n            x2 = max(x2, d)\n        ans = max(ans, x2)\n        x2 = (x2+1)//2\n        return max(ans, x1+x2+1)",
    "submit_ts": "1719718163",
    "subm_id": "1304410323"
}