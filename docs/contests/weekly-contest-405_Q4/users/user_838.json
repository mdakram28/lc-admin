{
    "username": "dry4",
    "submission": "class Solution {\n    class TrieNode {\n    Map<Character, TrieNode> cmap;\n    int cost;\n\n    public TrieNode() {\n        this.cmap = new HashMap<>();\n        this.cost = Integer.MAX_VALUE;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        this.root = new TrieNode();\n    }\n\n    public void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            if (!node.cmap.containsKey(c)) {\n                node.cmap.put(c, new TrieNode());\n            }\n            node = node.cmap.get(c);\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n}\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = new Trie();\n\n        for (int i = 0; i < words.length; ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char c = target.charAt(j);\n                if (!node.cmap.containsKey(c)) break;\n                node = node.cmap.get(c);\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    public int minimumCost1(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            for (int j = 0; j < words.length; j++) {\n                String word = words[j];\n                int cost = costs[j];\n                if (i + word.length() <= n && target.substring(i, i + word.length()).equals(word)) {\n                    dp[i + word.length()] = Math.min(dp[i + word.length()], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720322651",
    "subm_id": "1312355576"
}