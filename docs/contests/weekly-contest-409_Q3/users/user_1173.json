{
    "username": "illum1nadi",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int ans = n - 1;\n        set<pair<int, int>> q;\n        vector<int> result;\n\n        for (auto &query : queries) {\n            int start = query[0];\n            int end = query[1];\n\n            // Check for full overlap\n            bool fullOverlap = false;\n            auto it = q.lower_bound({start, 0});\n            if (it != q.begin()) {\n                auto prev = it;\n                --prev;\n                if (prev->first <= start && prev->second >= end) {\n                    fullOverlap = true;\n                }\n            }\n            if (it != q.end() && it->first <= start && it->second >= end) {\n                fullOverlap = true;\n            }\n\n            if (fullOverlap) {\n                result.push_back(ans);\n                continue;\n            }\n\n            // Find the range of intervals to be removed\n            auto it1 = q.lower_bound({start, 0});\n            auto it2 = q.lower_bound({end, 0});\n\n            // Calculate the contribution of the intervals to be removed\n            for (auto it = it1; it != it2; ++it) {\n                ans += (it->second - it->first - 1);\n            }\n\n            // Erase the range of intervals\n            q.erase(it1, it2);\n\n            // Insert the new interval and adjust ans\n            q.insert({start, end});\n            ans -= (end - start - 1);\n\n            result.push_back(ans);\n        }\n        return result;\n    }\n};",
    "submit_ts": "1722743930",
    "subm_id": "1343802948"
}