{
    "username": "Scooter1946",
    "submission": "class Solution {\npublic:\n    \n    int fd = 0, ind = 0;\n    \n    void diam(int curr, int parent, vector<vector<int>>& cons, int depth){\n        if(depth > fd){\n            fd = depth;\n            ind = curr;\n        }\n        for(int i : cons[curr]){\n            if(i == parent) continue;\n            diam(i, curr, cons, depth + 1);\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = (int)edges1.size() + 1;\n        vector<vector<int>> cons = vector<vector<int>>(n+1);\n        for(int i = 0; i < (int)edges1.size(); i++){\n            cons[edges1[i][0]].push_back(edges1[i][1]);\n            cons[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        fd = 0, ind = 0;\n        diam(0, -1, cons, 0);\n        fd = 0;\n        diam(ind, -1, cons, 0);\n        \n        int d1 = fd;\n        \n        n = (int)edges2.size() + 1;\n        //im gonna assume this like stops it or wtv\n        cons = vector<vector<int>>(n+1);\n        for(int i = 0; i < (int)edges2.size(); i++){\n            cons[edges2[i][0]].push_back(edges2[i][1]);\n            cons[edges2[i][1]].push_back(edges2[i][0]);\n        }\n        fd = 0, ind = 0;\n        diam(0, -1, cons, 0);\n        fd = 0;\n        diam(ind, -1, cons, 0);\n        \n        int d2 = fd;\n        cout << d1 << \" \" << d2 << \"\\n\";\n        return max(max(d1, d2), min((d1 / 2 + 1) + (d2/2), (d1/2) + (d2/2 + 1)) + (d1 % 2) + (d2 % 2));\n        \n    }\n};",
    "submit_ts": "1719717693",
    "subm_id": "1304398291"
}