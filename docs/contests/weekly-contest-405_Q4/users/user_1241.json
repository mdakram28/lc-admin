{
    "username": "the_oreo",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size(), m = words.size();\n        unordered_set<int> lens;\n        for (string &s : words) {\n            lens.insert(s.size());\n        }\n        vector<int> dp(n, 1e9);\n        const long long M = 1e9 + 7;\n        vector<long long> ps(n), pows(n + 2);\n        long long cur = 0;\n        pows[0] = 1;\n        for (int i = 1; i <= n + 1; i++) {\n            pows[i] = pows[i - 1] * 26 % M;\n        }\n        for (int i = 0; i < n; i++) {\n            cur = cur * 26 + target[i] - 97;\n            cur %= M;\n            ps[i] = cur;\n        }\n        vector<unordered_map<long long, int>> stuff(n);\n        for (int i = 0; i < m; i++) {\n            long long mask = 0;\n            for (char c : words[i]) {\n                mask = mask * 26 + c - 97;\n                mask %= M;\n            }\n            int sz = words[i].size();\n            auto &r = stuff[sz - 1];\n            if (r.count(mask)) r[mask] = min(r[mask], costs[i]);\n            else r[mask] = costs[i];\n        }\n        for (int i = 0; i < n; i++) {\n            for (int l : lens) {\n                if (i + l - 1 >= n) continue;\n                long long x = ps[i + l - 1] - (i == 0 ? 0 : ps[i - 1]) * pows[l] % M;\n                x = (x % M + M) % M;\n                if (stuff[l - 1].count(x)) {\n                    dp[i + l - 1] = min(dp[i + l - 1], (i == 0 ? 0 : dp[i - 1]) + stuff[l - 1][x]);\n                }\n            }\n        }\n        return dp[n - 1] >= 1e9 ? -1 : dp[n - 1];\n    }\n};",
    "submit_ts": "1720323159",
    "subm_id": "1312368763"
}