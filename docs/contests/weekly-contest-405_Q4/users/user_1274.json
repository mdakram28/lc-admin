{
    "username": "flyinglemonjx",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        def sol1():\n            n = len(target)\n            dp = [float('inf')] * (n + 1)\n            dp[0] = 0 \n\n            for i in range(1, n + 1):\n                for word, cost in zip(words, costs):\n                    l = len(word)\n                    if i >= l and target[i - l:i] == word:\n                        dp[i] = min(dp[i], dp[i - l] + cost)\n\n            return dp[n] if dp[n] != float('inf') else -1\n\n        #return sol1()  # O(n^2), TLE\n        def sol1_2():\n            word_cost_map = {}\n            for word, cost in zip(words, costs):\n                if word in word_cost_map:\n                    word_cost_map[word] = min(word_cost_map[word], cost)\n                else:\n                    word_cost_map[word] = cost\n\n            n = len(target)\n            dp = [float('inf')] * (n + 1)\n            dp[0] = 0 \n\n            for i in range(1, n + 1):\n                for word, cost in word_cost_map.items():\n                    l = len(word)\n                    if i >= l and target[i - l:i] == word:\n                        dp[i] = min(dp[i], dp[i - l] + cost)\n\n            return dp[n] if dp[n] != float('inf') else -1\n\n        return sol1_2()\n",
    "submit_ts": "1720323513",
    "subm_id": "1312377426"
}