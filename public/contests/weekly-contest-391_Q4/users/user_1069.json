{
    "username": "lin-yong-liang",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        def max_distance(n, points):\n            p = [[0]*n for _ in range(4)]\n            for i in range(n):\n                x, y = points[i]\n                p[0][i] = (x + y, (x, y), i)\n                p[1][i] = (-x + y, (x, y), i)\n                p[2][i] = (x - y, (x, y), i)\n                p[3][i] = (-x - y, (x, y), i)\n            for i in range(4):\n                p[i].sort()\n            mx = 0\n            max_points = (points[0], points[1])\n            max_indices = (0, 1)\n            for i in range(4):\n                diff = p[i][-1][0] - p[i][0][0]\n                if diff > mx:\n                    mx = diff\n                    max_points = (p[i][0][1], p[i][-1][1])\n                    max_indices = (p[i][0][2], p[i][-1][2])\n            # print(f\"Max distance: {mx}, Points: {max_points}, Indices: {max_indices}\")\n            return max_indices, mx\n        \n        max_indices, _ = max_distance(n, points)\n        _, res1 = max_distance(n-1, points[:max_indices[0]] + points[max_indices[0] + 1:])\n        _, res2 = max_distance(n-1, points[:max_indices[1]] + points[max_indices[1] + 1:])\n\n        return min(res1, res2)"
}