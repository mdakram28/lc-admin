{
    "username": "abhishekrana25112002",
    "submission": "\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        int blockSize = sqrt(n) + 1;\n        int numBlocks = (n + blockSize - 1) / blockSize;\n        \n        vector<int> blockPeakCount(numBlocks, 0);\n\n        auto isPeak = [&](int i) -> bool {\n            if (i <= 0 || i >= n - 1) return false;\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        };\n\n        auto updateBlockPeakCount = [&](int blockIdx) {\n            int start = blockIdx * blockSize;\n            int end = min(n, (blockIdx + 1) * blockSize);\n            int count = 0;\n            for (int i = start; i < end; ++i) {\n                if (isPeak(i)) count++;\n            }\n            blockPeakCount[blockIdx] = count;\n        };\n\n        \n        for (int i = 0; i < numBlocks; ++i) {\n            updateBlockPeakCount(i);\n        }\n\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) { \n                int l = query[1], r = query[2];\n                if (l == r || l == r - 1) {\n                    result.push_back(0);\n                    continue;\n                }\n                int leftBlock = l / blockSize;\n                int rightBlock = r / blockSize;\n                int peaks = 0;\n                if (leftBlock == rightBlock) {\n                    for (int i = l + 1; i < r; ++i) {\n                        if (isPeak(i)) peaks++;\n                    }\n                } else {\n                    for (int i = l + 1; i < (leftBlock + 1) * blockSize; ++i) {\n                        if (isPeak(i)) peaks++;\n                    }\n                    for (int i = rightBlock * blockSize; i < r; ++i) {\n                        if (isPeak(i)) peaks++;\n                    }\n                    for (int i = leftBlock + 1; i < rightBlock; ++i) {\n                        peaks += blockPeakCount[i];\n                    }\n                }\n                result.push_back(peaks);\n            } else if (query[0] == 2) { \n                int idx = query[1], val = query[2];\n                nums[idx] = val;\n                int blockIdx = idx / blockSize;\n                if (idx > 0) updateBlockPeakCount((idx - 1) / blockSize);\n                updateBlockPeakCount(blockIdx);\n                if (idx < n - 1) updateBlockPeakCount((idx + 1) / blockSize);\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1718507130.0
}