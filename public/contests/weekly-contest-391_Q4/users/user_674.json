{
    "username": "yi-jiu-f6",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int idx = -1 , idx2 = -1;\n        maxManhattanDistance(points, idx, idx2);\n        vector<vector<int>> points1 = points, points2 = points;\n        points1.erase(points1.begin() + idx);\n        points2.erase(points2.begin() + idx2);\n        int res = min(maxManhattanDistance(points1, idx, idx2), maxManhattanDistance(points2, idx, idx2));\n        return res;\n    }\n    \n    int maxManhattanDistance(vector<vector<int>>& points, int &index1, int & index2) {\n        vector<vector<int>> x_prime, y_prime;\n\n        // \u8f6c\u6362\u5750\u6807\u7cfb\u5e76\u586b\u5145\u65b0\u7684\u5750\u6807\u6570\u7ec4\n        int idx = 0;\n        for (const auto& point : points) {\n            x_prime.push_back({point[0] + point[1], idx});\n            y_prime.push_back({point[0] - point[1], idx});\n            idx++;\n        }\n\n        // \u5bf9\u65b0\u5750\u6807\u8fdb\u884c\u6392\u5e8f\n        sort(x_prime.begin(), x_prime.end());\n        sort(y_prime.begin(), y_prime.end());\n\n        // \u8ba1\u7b97\u6700\u5927\u7684 x' \u548c y' \u5750\u6807\u5dee\n        int max_x_prime_diff = x_prime.back()[0] - x_prime.front()[0];\n        int max_y_prime_diff = y_prime.back()[0] - y_prime.front()[0];\n        if (max_x_prime_diff > max_y_prime_diff) index1 = x_prime.back()[1], index2 =   x_prime.front()[1];\n        else  index1 = y_prime.back()[1], index2 =  y_prime.front()[1];\n        // \u8fd4\u56de\u6700\u5927\u7684\u5dee\u503c\uff0c\u8fd9\u662f\u539f\u5750\u6807\u7cfb\u4e2d\u66fc\u54c8\u987f\u8ddd\u79bb\u6700\u5927\u7684\u4e24\u4e2a\u70b9\u7684\u8ddd\u79bb\n        return max(max_x_prime_diff, max_y_prime_diff);\n    }\n};"
}