{
    "username": "Matt Akin",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        // pick a starting number based on k\n        // iterate over the middle\n        // use long division to check if it's divisible by k\n        string num;\n        num.resize(n);\n        for (int i = 0; i < n; i++)\n            num[i] = '9';\n\n        if (k == 5) {\n            num[0] = '5';\n            num[n - 1] = '5';\n        }\n        if (k % 2 == 0) {\n            num[0] = '8';\n            num[n - 1] = '8';\n        }\n        if (k == 4 && n > 2) {\n            num[1] = '8';\n            num[n - 2] = '8';\n        }\n        if (k == 8 && n > 5) {\n            num[1] = '8';\n            num[2] = '8';\n            num[n - 2] = '8';\n            num[n - 3] = '8';\n        }\n\n        if (isDivisible(num, k))\n            return num;\n\n        int mid = n / 2;\n        while (num[0] != '0') {\n            int pos = mid;\n            while (num[pos] == '0')\n                pos--;\n            int current = num[pos] - '0';\n            num[pos] = (char) (current - 1 + '0');\n            num[n - 1 - pos] = (char) (current - 1 + '0');\n            while (pos < mid) {\n                pos++;\n                num[pos] = '9';\n                num[n - 1 - pos] = '9';\n            }\n            if (isDivisible(num, k))\n                return num;\n        }\n\n        return num;\n    }\n\n    bool isDivisible(const string& digits, int k) {\n        int carry = 0;\n        for (int i = 0; i < digits.size(); i++) {\n            carry *= 10;\n            carry += digits[i] - '0';\n            carry %= k;\n        }\n        return carry == 0;\n    }\n};",
    "submit_ts": "1723950462",
    "subm_id": "1359746562"
}