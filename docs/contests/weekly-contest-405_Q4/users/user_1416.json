{
    "username": "shradhajha06",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordEnds; // stores (index of word, cost)\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordEnds.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n    \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            \n            TrieNode* no = trie.root;\n           \n            for (int j = i; j < n; ++j) {\n                if (!no->children.count(target[j])) break;\n                no = no->children[target[j]];\n                \n                // Check all word ends at the curr\n                for (auto& p : no->wordEnds) {\n                    int index = p.first;\n                    int cost = p.second;\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322337",
    "subm_id": "1312347205"
}