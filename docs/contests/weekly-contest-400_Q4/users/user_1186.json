{
    "username": "odinson776",
    "submission": "#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <climits>\n\nclass Solution {\npublic:\n    int minimumDifference(std::vector<int>& values, int target) {\n        std::vector<int> zeros(32, 0);\n\n        auto minus = [&](int x) {\n            for (int i = 0; i < 32; ++i) {\n                if (((x >> i) & 1) == 0) {\n                    zeros[i] -= 1;\n                }\n            }\n        };\n\n        auto plus = [&](int x) {\n            for (int i = 0; i < 32; ++i) {\n                if (((x >> i) & 1) == 0) {\n                    zeros[i] += 1;\n                }\n            }\n        };\n\n        auto evaluate = [&]() {\n            int result = 0;\n            for (int i = 0; i < 32; ++i) {\n                if (zeros[i] == 0) {\n                    result ^= (1 << i);\n                }\n            }\n            return result;\n        };\n\n        int start = 0;\n        int end = 0; \n        int size = values.size();\n        int answer = INT_MAX;\n\n        while (end < size) { \n            plus(values[end]);\n            int current_x = evaluate();\n            answer = std::min(answer, std::abs(current_x - target));\n            while (start < end && current_x < target) {\n                minus(values[start]);\n                ++start;\n                current_x = evaluate();\n                answer = std::min(answer, std::abs(current_x - target));\n            }\n            ++end; \n        }\n\n        return answer;\n    }\n};\n",
    "submit_ts": 1717299946.0
}