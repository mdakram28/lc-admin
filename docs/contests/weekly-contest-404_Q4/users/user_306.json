{
    "username": "Lambert360",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        // Construct adjacency list for both trees\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        // Function to find the farthest node and its distance from the start node using BFS\n        auto bfs = [](const vector<vector<int>>& adj, int start) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthestNode = start;\n            \n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n                \n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > dist[farthestNode]) {\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            \n            return make_pair(farthestNode, dist[farthestNode]);\n        };\n        \n        // Find the diameter of the first tree\n        auto [farthestNode1, _] = bfs(adj1, 0);\n        auto [otherEnd1, diameter1] = bfs(adj1, farthestNode1);\n        \n        // Find the diameter of the second tree\n        auto [farthestNode2, __] = bfs(adj2, 0);\n        auto [otherEnd2, diameter2] = bfs(adj2, farthestNode2);\n        \n        // Calculate the minimum diameter after merging the trees\n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n        \n        return minDiameter;\n    }\n};\n",
    "submit_ts": "1719714852",
    "subm_id": "1304323159"
}