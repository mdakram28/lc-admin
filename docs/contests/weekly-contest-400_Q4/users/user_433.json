{
    "username": "ja235711",
    "submission": "template <typename T>\nclass SparseTable {\n  using VT = std::vector<T>;\n  using VVT = std::vector<VT>;\n  using func_type = std::function<T(const T &, const T &)>;\n\n  VVT ST;\n  std::vector<int> lg;\n\n  static T default_func(const T &t1, const T &t2) { return std::max(t1, t2); }\n\n  func_type op;\n\n public:\n  SparseTable(const std::vector<T> &v, func_type _func = default_func) {\n    op = _func;\n    int len = v.size(), l1 = std::ceil(std::log2(len)) + 1;\n    lg.assign(len + 5, 0);\n    for(int i = 2; i < lg.size(); i++) {\n        lg[i] = lg[i/2] + 1;\n    }\n    ST.assign(len, VT(l1, 0));\n    for (int i = 0; i < len; ++i) {\n      ST[i][0] = v[i];\n    }\n    for (int j = 1; j < l1; ++j) {\n      int pj = (1 << (j - 1));\n      for (int i = 0; i + pj < len; ++i) {\n        ST[i][j] = op(ST[i][j - 1], ST[i + (1 << (j - 1))][j - 1]);\n      }\n    }\n  }\n\n  T query(int l, int r) {\n    int lt = r - l + 1;\n    int q = std::floor(lg[lt]);\n    return op(ST[l][q], ST[r - (1 << q) + 1][q]);\n  }\n};\n\nint combine(int x, int y) {\n    return x & y;\n}\n\nclass Solution {\n    \npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SparseTable<int> st(nums, combine);\n        const int n = nums.size();\n        int lessThanK = -1, atLeastK = -1;\n        for(int i = 0; i < n; i++) {\n            //printf(\"i = %d, query(i, i) = %d\\n\", i, st.query(i, i));\n            if (int t = st.query(i, i); t < k) {\n                if (lessThanK == -1) {\n                    lessThanK = t;\n                } else {\n                    lessThanK = max(lessThanK, t);\n                }\n                \n            } else {\n                int x = i;\n                //printf(\"x = %d, query(i, x) = %d\\n\", x, st.query(i, x));\n                for(int step = n / 2; step > 0; step /= 2) {\n                    while(x + step < n && st.query(i, x+step) >= k) {\n                        x += step;\n                    }\n                }\n                //x is the last elem where query >= k\n                if (atLeastK == -1) {\n                    atLeastK = st.query(i, x);\n                } else {\n                    atLeastK = min(atLeastK, st.query(i, x));\n                }\n                \n                if (x + 1 < n) {\n                    if (lessThanK == -1) {\n                        lessThanK = st.query(i, x+1);\n                    } else {\n                        lessThanK = max(lessThanK, st.query(i, x+1));\n                    }\n                }\n            }\n        }\n        int res1 = lessThanK != -1 ? k - lessThanK : INT_MAX;\n        int res2 = atLeastK != -1 ? atLeastK - k : INT_MAX;\n        //printf(\"%d %d\\n\", res1, res2);\n        return min(res1, res2);\n    }\n};",
    "submit_ts": 1717298733.0
}