{
    "username": "alexlin87",
    "submission": "import java.util.*;\n\nclass Solution {\n    private List<Integer>[] g;\n    private int[] time, fm, sm, ans;\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        g = new List[n];\n        for(int i = 0; i < n; i++) {\n            g[i] = new ArrayList<>();\n        }\n        for(int[] e : edges) {\n            g[e[0]].add(e[1]);\n            g[e[1]].add(e[0]);\n        }\n        time = new int[n];\n        fm = new int[n];\n        sm = new int[n];\n        ans = new int[n];\n        dfs1(0, -1, 0);\n        dfs2(0, -1);\n        ans[0] = fm[0];\n        for(int next : g[0]) {\n            int e = next % 2 != 0 ? 1 : 2;\n            if(fm[next] + e == fm[0]) {\n                dfs3(next, 0, sm[0]);\n            }\n            else {\n                dfs3(next, 0, fm[0]);\n            }\n        }\n        return ans;\n    }\n    private void dfs3(int curr, int par, int prev) {\n        ans[curr] = fm[curr];\n        int outside = prev + (par % 2 != 0 ? 1 : 2);\n        ans[curr] = Math.max(ans[curr], outside);\n        for(int next : g[curr]) {\n            if(next != par) {\n                int e = next % 2 != 0 ? 1 : 2;\n                if(fm[next] + e == fm[curr]) {\n                    dfs3(next, curr, Math.max(outside, sm[curr]));\n                }\n                else {\n                    dfs3(next, curr, Math.max(outside, fm[curr]));\n                }\n            }\n        }\n    }\n    private int dfs2(int curr, int par) {\n        int f = 0, s = 0;\n        for(int next : g[curr]) {\n            if(next != par) {\n                int d = dfs2(next, curr);\n                int e = next % 2 != 0 ? 1 : 2;\n                if(d + e >= f) {\n                    s = f;\n                    f = d + e;\n                }\n                else if(d + e > s) {\n                    s = d + e;\n                }\n            }\n        }\n        fm[curr] = f;\n        sm[curr] = s;\n        return f;\n    }\n    private void dfs1(int curr, int par, int t) {\n        time[curr] = t;\n        for(int next : g[curr]) {\n            if(next != par) {\n                if(next % 2 != 0) {\n                    dfs1(next, curr, t + 1);\n                }\n                else {\n                    dfs1(next, curr, t + 2);\n                }\n            }\n        }\n    }\n}",
    "submit_ts": "1722700799",
    "subm_id": "1343253750"
}