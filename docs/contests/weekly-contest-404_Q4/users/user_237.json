{
    "username": "terranw",
    "submission": "class Solution {\n    ArrayList<ArrayList<Integer>> gr;\n    boolean[] avai;\n    int dep;\n    \n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int maxi = Math.max(edges1.length, edges2.length) + 1;\n        avai = new boolean[maxi];\n        int d1 = getDia(edges1);\n        int d2 = getDia(edges2);\n        \n        int ans = Math.max(d1, d2);\n        d1 = (d1 + 1) >> 1;\n        d2 = (d2 + 1) >> 1;\n        return Math.max(ans, d1 + d2 + 1);\n    }\n    \n    int getDia(int[][] egs) {\n        gr = new ArrayList<ArrayList<Integer>>();\n        int n = egs.length + 1;\n        for (int i = 0; i < n; ++i) {\n            gr.add(new ArrayList<Integer>());\n        }\n        for (int[] eg : egs) {\n            int v1 = eg[0];\n            int v2 = eg[1];\n            gr.get(v1).add(v2);\n            gr.get(v2).add(v1);\n        }\n        \n        dep = 0;\n        int rt = traverse(0);    \n        rt = traverse(rt);\n        return dep;\n    }\n    \n    int traverse(int rt) {\n        Arrays.fill(avai, true);\n        LinkedList<Integer> q = new LinkedList<Integer>();\n        q.add(rt);\n        avai[rt] = false;\n        int d = -1;\n        int newRt = rt;\n        while (!q.isEmpty()) {\n            ++d;\n            int end = q.getLast();\n            newRt = end;\n            int now = 0;\n            do {\n                now = q.removeFirst();\n                for (Integer nei : gr.get(now)) {\n                    if (avai[nei]) {\n                        avai[nei] = false;\n                        q.add(nei);\n                    }\n                }\n            } while (now != end);\n        }\n        dep = d;\n        return newRt;\n    }\n}",
    "submit_ts": "1719717956",
    "subm_id": "1304405060"
}