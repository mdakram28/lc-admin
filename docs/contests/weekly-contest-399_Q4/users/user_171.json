{
    "username": "hychen11",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n, {0, 0, 0, 0});\n        build(nums, 0, 0, n - 1);\n    }\n\n    void update(int idx, int val) {\n        update(0, 0, n - 1, idx, val);\n    }\n\n    array<int, 4> query() {\n        return tree[0];\n    }\n\nprivate:\n    int n;\n    vector<array<int, 4>> tree; // {A, B, C, D}\n\n    void build(vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            // int val = max(0, nums[start]);\n            int val = nums[start];\n            tree[node] = {0, 0, 0, val};\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    void update(int node, int start, int end, int idx, int val) {\n        if (start == end) {\n            val = max(0, val);\n            tree[node] = {0, 0, 0, val};\n        } else {\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                update(2 * node + 1, start, mid, idx, val);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, val);\n            }\n            tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    array<int, 4> merge(array<int, 4> left, array<int, 4> right) {\n        int A = max(left[0] + right[2], left[1] + right[0]);\n        int B = max(left[0] + right[3], left[1] + right[1]);\n        int C = max(left[3] + right[0], left[2] + right[2]);\n        int D = max(left[3] + right[1], left[2] + right[3]);\n        return {A, B, C, D};\n    }\n};\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        const int MOD = 1e9 + 7;\n        SegmentTree segTree(nums);\n        long long sum = 0;\n        for (auto& query : queries) {\n            int pos = query[0];\n            int val = query[1];\n            segTree.update(pos, val);\n            sum = (sum + segTree.query()[3]) % MOD;\n        }\n        return sum;\n    }\n};\n",
    "submit_ts": 1716694564.0
}