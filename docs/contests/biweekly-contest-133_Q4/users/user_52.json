{
    "username": "Hamza_the_codar_786",
    "submission": "MOD = 10**9 + 7\n\nclass Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"\n        requirements = sorted(requirements)\n        \n        def comb(n, k, MOD):\n            if k < 0 or k > n:\n                return 0\n            if k == 0 or k == n:\n                return 1\n            num = 1\n            den = 1\n            for i in range(k):\n                num = num * (n - i) % MOD\n                den = den * (i + 1) % MOD\n            return num * pow(den, MOD - 2, MOD) % MOD\n        \n        dp = [[0] * 401 for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, n + 1):\n            prefix_sum = [0] * 401\n            prefix_sum[0] = dp[i-1][0]\n            for k in range(1, 401):\n                prefix_sum[k] = (prefix_sum[k-1] + dp[i-1][k]) % MOD\n            \n            for k in range(401):\n                dp[i][k] = 0\n                for x in range(i):\n                    new_k = k - (i - 1 - x)\n                    if new_k >= 0:\n                        dp[i][k] = (dp[i][k] + dp[i-1][new_k]) % MOD\n            \n            if requirements and requirements[0][0] == i - 1:\n                req_k = requirements.pop(0)[1]\n                for k in range(401):\n                    if k != req_k:\n                        dp[i][k] = 0\n        \n        return sum(dp[n]) % MOD",
    "submit_ts": 1719067541.0
}