{
    "username": "jasonshieh_new",
    "submission": "class TrieNode {\npublic:\n    TrieNode* children[26];\n    int weight;\n    int depth;\n    \n    TrieNode() : weight(-1), depth(0) {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int weight) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children[c - 'a'] == nullptr) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        if (node->weight < 0) {\n            node->weight = weight;\n        } else {\n            node->weight = min(node->weight, weight);\n        }\n        node->depth = word.length();\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int INF = INT_MAX / 2;\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        int n = target.length();\n        vector<int> dp(n + 1, INF);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INF) continue;\n            \n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children[target[j] - 'a'] == nullptr) break;\n                node = node->children[target[j] - 'a'];\n                if (node->weight >= 0) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->weight);\n                }\n            }\n        }\n        \n        return dp[n] == INF ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322008",
    "subm_id": "1312338245"
}