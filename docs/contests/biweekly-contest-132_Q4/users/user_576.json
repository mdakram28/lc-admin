{
    "username": "prakharjain256",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int val) {\n        vector<vector<int>>dp(nums.size(),vector<int>(val+1,1)); \n        int ans=1; \n        vector<int>arr1(val+1,-1); \n        vector<map<int,int>>arr2(val+1); \n        for(int i=0;i<nums.size();i++){ \n            for(int j=0;j<=val;j++){ \n                for(int l=0;l<j;l++){ \n                    dp[i][j]=max(dp[i][j],1+arr1[l]); \n                    // cout<<dp[i][j];\n                } \n                if(arr2[j].find(nums[i])!=arr2[j].end()){ \n                    dp[i][j]=max(dp[i][j],1+arr2[j][nums[i]]); \n                    // cout<<dp[i][j];\n                } \n                ans=max(ans,dp[i][j]); \n                 // Update the overall maximum subsequence length (`ans`) with the current possibility\n            } \n            for(int j=0;j<=val;j++){ \n                arr1[j]=max(arr1[j],dp[i][j]); \n                arr2[j][nums[i]]=max(arr2[j][nums[i]],dp[i][j]); \n            } \n        } \n        return ans; \n    }\n};",
    "submit_ts": 1717862246.0
}