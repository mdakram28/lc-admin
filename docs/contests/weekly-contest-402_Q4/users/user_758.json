{
    "username": "sanmai_reddy377",
    "submission": "#pragma GCC optimize(\"unroll-loops,O3,Ofast\") //even 10^8+ also works with this\n#pragma GCC target(\"avx2,avx,fma,bmi,bmi2,lzcnt,popcnt\")\ntypedef long long ll;\n \n#define pb push_back\n#define ppb pop_back\n#define ff first\n#define ss second\n#define rt return;\n#define set_bits(a) __builtin_popcountll(a)\n#define mine(a)    (*min_element((a).begin(), (a).end()))\n#define maxe(a)    (*max_element((a).begin(), (a).end()))\n#define mini(a)    ( min_element((a).begin(), (a).end()) - (a).begin())\n#define maxi(a)    ( max_element((a).begin(), (a).end()) - (a).begin())\n#define lowb(a, x) ( lower_bound((a).begin(), (a).end(), (x)) - (a).begin())\n#define uppb(a, x) ( upper_bound((a).begin(), (a).end(), (x)) - (a).begin())\n#define disp(a) {for(int i=0;i<a.size();i++) cout<<a[i]<<\" \"; cout<<endl;}\n#define all(v) (v).begin(),(v).end()\n#define inp(a) {for(int i=0;i<(a).size();i++) cin>>(a)[i];}\n// #define fill(a,b) memset(a, b, sizeof(a))\n#define prt(a) cout<<(a)<<endl;\n#define endl \"\\n\"\n#define NO cout<<\"NO\"<<endl;\n#define YES cout<<\"YES\"<<endl;\n#define vll vector<ll>\n#define vvll vector<vector<ll>>\n#define double double\n#define de(a) cout<<\"(\"<<a<<\")\"<<endl;\n#define de2(a) cout<<\"*\"<<a<<\"*\"<<endl;\n#define ft front()\n#define bk back()\n#define minpq priority_queue<ll, vector<ll>, greater<ll> >\n#define maxpq priority_queue<ll>\n#define nl cout<<endl;\n#define IOS ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n#define cont continue;\n#define vpll vector<pair<ll,ll>>\n#define vvii vector<vector<int>>\n#define vi vector<int>\n#define vvpll vector<vector<pair<ll,ll>>>\n#define pll pair<ll,ll>\n\n//const ll M=998244353;\nconst ll M=1e9+7;\nconst ll N=1e5;  \nconst ll inf=1e15; //keeping inf may not give soln every time,try 1e9, 1e15\n\nll bit(ll n,ll i){return (n&(1LL<<i)) ? 1 : 0;}\n\n//pbds- updated set\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> pbds; // find_by_order, order_of_key-> returns iterator\n//here pbds is a set like data type in the abv if greater is written it will show descending set if less_eqaul multset\n//mthds 1 .insert(x) 2 .find_by_order(y)->K-th element in a set (counting from zero) 3 .order_of_key(x)->returns num of eles that are less than x(even if u wrote less_equal) 4 .lower_bound,.upper_bound(),.erase()\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n        ll n=v.size();\n        pbds st;\n        vi ans;\n        for(int i=1;i<n-1;i++){\n           if(v[i]>v[i-1] && v[i]>v[i+1]){\n             st.insert(i);\n           }\n        }\n        for(auto &k: q){\n          ll ch=k[0];\n          if(ch==1){\n            ll l=k[1],r=k[2];\n            if(l==r){\n              ans.pb(0);\n              continue;\n            }\n            ll a=st.order_of_key(r),b=st.order_of_key(l+1);\n            ans.pb(a-b);\n          }\n          else{\n            ll idx=k[1],val=k[2]; \n            for(int i=idx-1;i<=idx+1;i++){\n              if(i>0 && i<n-1 && v[i-1]<v[i] && v[i]>v[i+1]){\n                st.erase(i);\n              }\n            }\n            v[idx]=val;\n            for(int i=idx-1;i<=idx+1;i++){\n              if(i>0 && i<n-1 && v[i-1]<v[i] && v[i]>v[i+1]){\n                st.insert(i);\n              }\n            }\n          }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718507500",
    "subm_id": "1289653549"
}