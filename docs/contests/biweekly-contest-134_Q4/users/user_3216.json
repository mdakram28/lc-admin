{
    "username": "manish_rohila0507",
    "submission": "#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    long long countSubarrays(std::vector<int>& nums, int target) {\n        int length = nums.size();\n        long long subarrayCount = 0;\n        \n        // Map to store previous results of AND operations\n        std::unordered_map<long long, long long> previousResults;\n\n        for (int i = 0; i < length; ++i) {\n            // Map to store current results of AND operations\n            std::unordered_map<long long, long long> currentResults; \n\n            // If the current element equals the target, increment subarrayCount\n            if (nums[i] == target) {\n                ++subarrayCount;\n            }\n            currentResults[nums[i]] = 1;\n\n            // Iterate over previous results\n            for (auto& [value, frequency] : previousResults) {\n                long long newAndResult = value & nums[i]; // AND operation with current element\n                \n                // If the result equals the target, add the frequency to subarrayCount\n                if (newAndResult == target) {\n                    subarrayCount += frequency;\n                }\n                currentResults[newAndResult] += frequency;\n            }\n            \n            // Update previous results with current results\n            previousResults = currentResults;\n        }\n        \n        return subarrayCount;\n    }\n};\n",
    "submit_ts": "1720281318",
    "subm_id": "1311820776"
}