{
    "username": "faizanhussain2310",
    "submission": "#define ll long long\n\nclass SGTree\n{\n    vector<ll> seg;\n\npublic:\n    SGTree(ll n)\n    {\n        seg.resize(4 * n + 1);\n    }\n\n    void build(ll ind, ll low, ll high, vector<ll> &arr)\n    {\n        if (low == high)\n        {\n            seg[ind] = arr[low];\n            return;\n        }\n\n        ll mid = (low + high) / 2;\n        build(2 * ind + 1, low, mid, arr);\n        build(2 * ind + 2, mid + 1, high, arr);\n        seg[ind] = (seg[2 * ind + 1] + seg[2 * ind + 2]);\n    }\n\n    ll query(ll ind, ll low, ll high, ll l, ll r)\n    {\n        // no overlap\n        // l r low high or low high l r\n        if (r < low || high < l)\n            return 0;\n\n        // complete overlap\n        // [l low high r]\n        if (low >= l && high <= r)\n            return seg[ind];\n\n        ll mid = (low + high) >> 1;\n        ll left = query(2 * ind + 1, low, mid, l, r);\n        ll right = query(2 * ind + 2, mid + 1, high, l, r);\n        return (left + right);\n    }\n    void update(ll ind, ll low, ll high, ll i, ll val)\n    {\n        if (low == high)\n        {\n            seg[ind] = val;\n            return;\n        }\n\n        ll mid = (low + high) >> 1;\n        if (i <= mid)\n            update(2 * ind + 1, low, mid, i, val);\n        else\n            update(2 * ind + 2, mid + 1, high, i, val);\n        seg[ind] = (seg[2 * ind + 1] + seg[2 * ind + 2]);\n    }\n};\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n=colors.size();\n        vector<ll> v;\n        for(int i=0; i<n; i++) {\n            v.push_back(colors[i]);\n        }\n\n        for(int i=0; i<n; i++) {\n            v.push_back(colors[i]);\n        }\n\n        ll cnt=0;\n        SGTree odd(2*n+5),even(2*n+5);\n        for(int i=0; i<2*n; i++) {\n            if(i%2==0) {\n                even.update(0,0,2*n,i,v[i]);\n            }\n            else {\n                odd.update(0,0,2*n,i,v[i]);\n            }\n        }\n\n        for(int i=0; i<n; i++) {\n            ll start=i,last=i+k-1;\n            ll odd_sum=odd.query(0,0,2*n,start,last);\n            ll even_sum=even.query(0,0,2*n,start,last);\n            // cout<<\"i = \"<<i<<\" odd = \"<<odd_sum<<\" even = \"<<even_sum<<\"\\n\";\n\n            ll req1=(k+1)/2;\n            ll req2=k-req1;\n\n            if(i%2==0) {\n                if((even_sum==req1 && odd_sum==0) || (odd_sum==req2 && even_sum==0)) cnt++;\n            }\n            else {\n                if((odd_sum==req1 && even_sum==0) || (even_sum==req2 && odd_sum==0)) cnt++;\n            }\n        }\n\n        return cnt;\n    }\n};",
    "submit_ts": "1720278716",
    "subm_id": "1311721209"
}