{
    "username": "ceetcode",
    "submission": "# class Solution:\n#     def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n#         n = len(nums)\n#         Q = len(queries)\n        \n#         num_peaks = 0\n#         for i in range(1, n-1):\n#             if nums[i-1] < nums[i] > nums[i+1]:\n#                 num_peaks += 1\n        \n#         def is_peak(i):\n#             if i <= 0 or i >= n-1: return False\n#             return nums[i-1] < nums[i] > nums[i+1]\n        \n#         res = []\n        \n#         for q,l,r in queries:\n#             if q == 1:\n#                 res.append(num_peaks)\n                \n#             else:\n#                 i,v = l,r\n                \n#                 # is index i already a peak?\n#                 # BEFORE THE UPDATE!!!\n#                 prev_adj_peaks = is_peak(i-1) + is_peak(i) + is_peak(i+1)\n\n#                 nums[i] = v\n                \n#                 curr_adj_peaks = is_peak(i-1) + is_peak(i) + is_peak(i+1)\n                \n#                 #print(prev_adj_peaks, curr_adj_peaks)\n                \n#                 num_peaks += curr_adj_peaks - prev_adj_peaks # net change in peaks\n        \n#         return res\n                    \nclass Node:\n    def __init__(self, nums: List[int], lo: int, hi: int):\n        self.l = None\n        self.r = None\n        self.lo = lo\n        self.hi = hi\n        self.sum = nums[lo]\n\n        if lo < hi:\n            mid = (lo + hi) // 2\n            self.l = Node(nums, lo, mid)\n            self.r = Node(nums, mid + 1, hi)\n            self.combine()\n\n    def combine(self):\n        self.sum = self.l.sum + self.r.sum\n\n    def update(self, i: int, x: int):\n        if i < self.lo or self.hi < i:\n            return\n        \n        if self.lo == self.hi:\n            self.sum = x\n            return\n\n        self.l.update(i, x)\n        self.r.update(i, x)\n        self.combine()\n\n    def query(self, l:int,r:int):\n        # 3 cases: 1. segment is fully contained in range [l,r]\n        if l <= self.lo <= self.hi <= r:\n            return self.sum\n        # 2. segment has no overlap with [l,r]\n        if self.hi < l or r < self.lo:\n            return 0\n        # 3. there is partial overlap. keep recursing.\n    \n        return self.l.query(l,r) + self.r.query(l,r)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        # peaks = [0] * n\n        # for i in range(1, n - 1):\n        #     if nums[i-1] < nums[i] > nums[i+1]:\n        #         peaks[i] = 1\n\n        def is_peak(i):\n            if i <= 0 or i >= n-1: return 0\n            return int(nums[i-1] < nums[i] > nums[i+1])\n        \n        seg_tree = Node([is_peak(i) for i in range(n)], 0, n-1)\n\n        res = []\n        \n        for q,l,r in queries:\n            if q == 1:\n                # be careful of the edges around index l,r!!!\n                cnt = seg_tree.query(l,r)\n                print(cnt)\n                if is_peak(l):\n                    cnt -= 1\n                if r != l and is_peak(r):\n                    cnt -= 1\n                res.append(cnt)\n            else:\n                i,v = l,r\n                \n                # is index i already a peak?\n                # BEFORE THE UPDATE!!!\n                #prev_adj_peaks = is_peak(i-1) + is_peak(i) + is_peak(i+1)\n\n                nums[i] = v\n                \n                #curr_adj_peaks = is_peak(i-1) + is_peak(i) + is_peak(i+1)\n                \n                seg_tree.update(i-1, is_peak(i-1))\n                seg_tree.update(i, is_peak(i))\n                seg_tree.update(i+1, is_peak(i+1))\n                \n                \n                # num_peaks += curr_adj_peaks - prev_adj_peaks # net change in peaks\n        \n        return res\n\n# Input:\n# [5,4,8,6]\n# [[1,2,2],[1,1,2],[2,1,6]]\n# Output:\n# [-1,0]\n# Expected:\n# [0,0]\n# Stdout:\n# 1\n# 1     \n                \n                \n                \n            \n        ",
    "submit_ts": 1718507399.0
}