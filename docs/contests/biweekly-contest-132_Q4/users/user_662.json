{
    "username": "denzel777",
    "submission": "func maximumLength(A []int, k int) int {\n    n := len(A)\n    if n == 0 {\n        return 0\n    }\n\tdp := make([][]int, n)\n\tfor i := range dp {\n\t\tdp[i] = make([]int, k+1)\n\t\tfor j := range dp[i] {\n\t\t\tdp[i][j] = 1\n\t\t}\n\t}\n\tres := 1\n\tdp2 := make([]map[int]int, k + 1)\n\tdp_k := make([]int, k + 1)\n\tfor i := range dp2 {\n\t\tdp2[i] = make(map[int]int)\n\t}\n\tfor i := 0; i < n; i++ {\n\t\tfor j := 0; j < k+1; j++ {\n            // check all possible previous transition counts\n\t\t\tfor jj := 0; jj < j; jj++ {\n                // update dp by considering previous transition counts\n\t\t\t\tdp[i][j] = max(dp[i][j], dp_k[jj] + 1)\n\t\t\t}\n            // check if the current number has been seen before at this transition count\n\t\t\tif idx, ok := dp2[j][A[i]]; ok {\n\t\t\t\tdp[i][j] = max(dp[i][j], idx + 1)\n\t\t\t}\n\t\t\tres = max(res, dp[i][j])\n\t\t}\n\t\tfor j := 0; j < k + 1; j++ {\n\t\t\tdp2[j][A[i]] = max(dp2[j][A[i]], dp[i][j])\n            dp_k[j] = max(dp_k[j], dp[i][j])\n\t\t}\n\t}\n\treturn res\n}",
    "submit_ts": "1717862374",
    "subm_id": "1281821513"
}