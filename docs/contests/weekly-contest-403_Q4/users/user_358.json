{
    "username": "chuan-chih",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        m, n = len(grid), len(grid[0])\n        ans = math.inf\n        \n        def subdivide(r0, m, c0, n):\n            ans = math.inf\n            # H. split:\n            top = [0] * (m - r0)\n            rmin, rmax = math.inf, -math.inf\n            cmin, cmax = math.inf, -math.inf\n            for r in range(r0, m):\n                for c in range(c0, n):\n                    if grid[r][c]:\n                        rmin = min(rmin, r)\n                        rmax = max(rmax, r)\n                        cmin = min(cmin, c)\n                        cmax = max(cmax, c)\n                if rmin < math.inf:\n                    top[r - r0] = (rmax - rmin + 1) * (cmax - cmin + 1)\n            \n            bottom = [0] * (m - r0)\n            rmin, rmax = math.inf, -math.inf\n            cmin, cmax = math.inf, -math.inf\n            for r in reversed(range(r0, m)):\n                for c in range(c0, n):\n                    if grid[r][c]:\n                        rmin = min(rmin, r)\n                        rmax = max(rmax, r)\n                        cmin = min(cmin, c)\n                        cmax = max(cmax, c)\n                if rmin < math.inf:\n                    bottom[r - r0] = (rmax - rmin + 1) * (cmax - cmin + 1)\n            \n            ans = min(ans, min((top[r - r0] + bottom[r + 1 - r0] for r in range(r0, m - 1)), default=math.inf))\n            \n            # V. split:\n            top = [0] * (n - c0)\n            rmin, rmax = math.inf, -math.inf\n            cmin, cmax = math.inf, -math.inf\n            for c in range(c0, n):\n                for r in range(r0, m):\n                    if grid[r][c]:\n                        rmin = min(rmin, r)\n                        rmax = max(rmax, r)\n                        cmin = min(cmin, c)\n                        cmax = max(cmax, c)\n                if rmin < math.inf:\n                    top[c - c0] = (rmax - rmin + 1) * (cmax - cmin + 1)\n            \n            bottom = [0] * (n - c0)\n            rmin, rmax = math.inf, -math.inf\n            cmin, cmax = math.inf, -math.inf\n            for c in reversed(range(c0, n)):\n                for r in range(r0, m):\n                    if grid[r][c]:\n                        rmin = min(rmin, r)\n                        rmax = max(rmax, r)\n                        cmin = min(cmin, c)\n                        cmax = max(cmax, c)\n                if rmin < math.inf:\n                    bottom[c - c0] = (rmax - rmin + 1) * (cmax - cmin + 1)\n            \n            ans = min(ans, min((top[c - c0] + bottom[c + 1 - c0] for c in range(c0, n - 1)), default=math.inf))           \n            return ans\n        \n        # H. split:\n        rmin, rmax = math.inf, -math.inf\n        cmin, cmax = math.inf, -math.inf\n        for r in range(m - 1):\n            for c, x in enumerate(grid[r]):\n                if x:\n                    rmin = min(rmin, r)\n                    rmax = max(rmax, r)\n                    cmin = min(cmin, c)\n                    cmax = max(cmax, c)\n            if rmin < math.inf:\n                ans = min(ans, (rmax - rmin + 1) * (cmax - cmin + 1) + subdivide(r + 1, m, 0, n))\n        \n        rmin, rmax = math.inf, -math.inf\n        cmin, cmax = math.inf, -math.inf\n        for r in reversed(range(1, m)):\n            for c, x in enumerate(grid[r]):\n                if x:\n                    rmin = min(rmin, r)\n                    rmax = max(rmax, r)\n                    cmin = min(cmin, c)\n                    cmax = max(cmax, c)\n            if rmin < math.inf:\n                ans = min(ans, (rmax - rmin + 1) * (cmax - cmin + 1) + subdivide(0, r, 0, n))\n        \n        # V. split:\n        rmin, rmax = math.inf, -math.inf\n        cmin, cmax = math.inf, -math.inf\n        for c in range(n - 1):\n            for r in range(m):\n                if grid[r][c]:\n                    rmin = min(rmin, r)\n                    rmax = max(rmax, r)\n                    cmin = min(cmin, c)\n                    cmax = max(cmax, c)\n            if rmin < math.inf:\n                ans = min(ans, (rmax - rmin + 1) * (cmax - cmin + 1) + subdivide(0, m, c + 1, n))\n        \n        rmin, rmax = math.inf, -math.inf\n        cmin, cmax = math.inf, -math.inf\n        for c in reversed(range(1, n)):\n            for r in range(m):\n                if grid[r][c]:\n                    rmin = min(rmin, r)\n                    rmax = max(rmax, r)\n                    cmin = min(cmin, c)\n                    cmax = max(cmax, c)\n            if rmin < math.inf:\n                ans = min(ans, (rmax - rmin + 1) * (cmax - cmin + 1) + subdivide(0, m, 0, c))\n        return ans\n                \n\n            \n                \n            \n        \n        # for row in grid:\n        #     row[:] = accumulate(row)\n        #     row.append(0)\n        # grid.append([0] * (n + 1))\n        # for i in range(m - 1):\n        #     for j in range(n):\n        #         grid[i + 1][j] += grid[i][j]\n        # total = grid[m - 1][n - 1]\n        ",
    "submit_ts": "1719114018",
    "subm_id": "1297338043"
}