{
    "username": "DhruvMalik07",
    "submission": "#define push_karde push_back\n#define ll long long\nconst int siz = 1e5 + 5;\nclass Solution\n{\npublic:\n    pair<long long, long long> v[siz];\n    pair<long long, long long> tree[4 * siz];\n    void build(int idx, int lo, int hi)\n    {\n\n        if (lo == hi)\n        {\n            tree[idx] = v[hi];\n            return;\n        }\n\n        int mid = (lo + hi) / 2;\n\n        build(2 * idx + 1, lo, mid);\n        build(2 * idx + 2, mid + 1, hi);\n\n        tree[idx] = min(tree[2 * idx + 1], tree[2 * idx + 2]);\n    }\n\n    void updateTree(int tidx, int lo, int hi, int idx, pair<long long, long long> val)\n    {\n\n        if (lo == hi)\n        {\n            tree[tidx] = val;\n            return;\n        }\n\n        int mid = (lo + hi) / 2;\n\n        if (idx <= mid)\n            updateTree(2 * tidx + 1, lo, mid, idx, val);\n        else\n            updateTree(2 * tidx + 2, mid + 1, hi, idx, val);\n\n        tree[tidx] = min(tree[2 * tidx + 1], tree[2 * tidx + 2]);\n    }\n\n    pair<long long, long long> query(int idx, int lo, int hi, int L, int R)\n    {\n\n        if (R < lo || L > hi)\n            return {INT_MAX, INT_MAX};\n\n        if (lo >= L && hi <= R)\n            return tree[idx];\n\n        int mid = (lo + hi) / 2;\n        pair<long long, long long> lans = query(2 * idx + 1, lo, mid, L, R);\n        pair<long long, long long> rans = query(2 * idx + 2, mid + 1, hi, L, R);\n\n        return min(lans, rans);\n    }\n\n    long long recsolve(vector<long long> &arr, int s, int e, int op, int n)\n    {\n        if (s > e)\n        {\n            return 0;\n        }\n        long long answer = 0;\n        pair<long long, long long> mypair = query(0, 0, n - 1, s, e);\n        long long dif = mypair.first;\n        int ind = mypair.second;\n        if (dif == op)\n        {\n            answer += recsolve(arr, s, ind - 1, op, n) + recsolve(arr, ind + 1, e, op, n);\n        }\n        else\n        {\n            answer += (dif - op) + recsolve(arr, s, ind - 1, op + (dif - op), n) + recsolve(arr, ind + 1, e, op + (dif - op), n);\n        }\n        return answer;\n    }\n\n    long long solvefunction(vector<long long> &arr)\n    {\n\n        int n = arr.size();\n        for (int i = 0; i < n; i++)\n        {\n            v[i] = {arr[i], i};\n        }\n        build(0, 0, n - 1);\n        // dfghjkl\n        return recsolve(arr, 0, n - 1, 0, n);\n    }\n    // asdfghjk\n    long long minimumOperations(vector<int> &arr, vector<int> &tar)\n    {\n\n        vector<int> fuck;\n        for (int i = 0; i < 100; i++)\n            fuck.push_back(i);\n        queue<int> q;\n        int zxc = 10;\n        while (zxc--)\n            q.push(9);\n\n        int n = arr.size();\n        vector<vector<long long>> increase;\n        for (int i = 0; i < n; i++)\n        {\n            vector<long long> temp;\n            if (arr[i] > tar[i])\n            {\n                continue;\n            }\n            int j = i;\n            for (j = i; j < n; j++)\n            {\n                if (arr[j] <= tar[j])\n                {\n                    temp.push_karde(tar[j] - arr[j]);\n                }\n                else\n                {\n                    break;\n                }\n            }\n            i = j;\n            increase.push_karde(temp);\n        }\n\n        long long ans = 0;\n        for(int i=0;i<increase.size();i++){\n            ans+=solvefunction(increase[i]);\n        }\n\n        vector<vector<long long>> decrement;\n\n        for (int i = 0; i < n; i++)\n        {\n            vector<long long> temp;\n            if (arr[i] <= tar[i])\n                continue;\n\n            int j = i;\n            for (j = i; j < n; j++)\n            {\n                if (arr[j] > tar[j])\n                    temp.push_karde(-1 * tar[j] + arr[j]);\n\n                else\n                    break;\n            }\n            i = j;\n            decrement.push_karde(temp);\n        }\n\n       for(int i=0;i<decrement.size();i++){\n        ans+=solvefunction(decrement[i]);\n       }\n\n        return ans;\n    }\n};",
    "submit_ts": "1721533113",
    "subm_id": "1328001584"
}