{
    "username": "07dishwasherbob8",
    "submission": "typedef long long ll;\ntypedef long double ld;\nconst ll MOD = 1e9 + 7;\n\nconst int N = 50;\nll factorials[N+1];\n\n//finds all factorials 0-N iteratively\nvoid factorial(int n = N, ll MOD = 1e9 + 7) {\n    factorials[0] = 1;\n    for(int i = 1; i <= n; i++) {\n        factorials[i] = factorials[i-1] * i % MOD;\n    }\n}\n\nll gcdExtended(ll a, ll b, ll *x, ll *y);\n \nll modInverse(ll b, ll m) {\n    ll x, y;\n    ll g = gcdExtended(b, m, &x, &y);\n \n    if (g != 1) return -1;\n \n    return (x % m + m) % m;\n}\n  // Function to compute a/b under modulo m\nll modDivide(ll a, ll b) {\n    a = a % MOD;\n    int inv = modInverse(b, MOD);\n    return (inv * a) % MOD;\n}\n \nll gcdExtended(ll a, ll b, ll *x, ll *y) {\n    if (a == 0) {\n        *x = 0, *y = 1;\n        return b;\n    }\n \n    ll x1, y1;\n    ll gcd = gcdExtended(b % a, a, &x1, &y1);\n \n    *x = y1 - (b / a) * x1;\n    *y = x1;\n \n    return gcd;\n}\n\nll binexp(ll base, ll power) {\n    ll ans = 1;\n    while(power != 0) {\n        if(power & 1) {\n            ans = ans*base%MOD;\n        }\n        base = base*base%MOD;\n        power >>= 1;\n    }\n    return ans;\n}\n\nll choose(ll n, ll k) {\n    if(k > n) return 0;\n    return modDivide(factorials[n],factorials[n-k] * factorials[k] % MOD);\n}\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        factorial();\n        ll res = 0;\n        for(ll jumps = 0; jumps < 32; jumps++) {\n            ll total_jump = (1LL << jumps) - 1;\n            ll i_jumps = jumps + 1;\n            if(k >= 1 + total_jump - i_jumps && k <= total_jump + 1) {\n                ll i_used = total_jump + 1 - k;\n                cout << \"adding jumps : \" << jumps << \" i_used : \" << i_used << \" add val : \" << choose(jumps + 1, i_used) << '\\n';\n                res += choose(jumps + 1, i_used);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1716087628",
    "subm_id": "1261789537"
}