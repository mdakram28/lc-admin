{
    "username": "yh157612",
    "submission": "fn and_sum(count: &[i32; 32]) -> i32 {\n    let mut result = 0;\n    for i in 0..32 {\n        if count[i] == 0 {\n            result |= 1 << i;\n        }\n    }\n    result\n}\n\nimpl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {\n        let mut result = 0;\n        let mut l1 = 0;\n        let mut l2 = 0;\n        let mut count1 = [0; 32];\n        let mut count2 = [0; 32];\n        for r in 0..nums.len() {\n            for i in 0..32 {\n                if (nums[r] >> i) & 1 == 0 {\n                    count1[i] += 1;\n                    count2[i] += 1;\n                }\n            }\n            // println!(\"{:?}\", &count1);\n            while l1 <= r && and_sum(&count1) < k {\n                for i in 0..32 {\n                    if (nums[l1] >> i) & 1 == 0 {\n                        count1[i] -= 1;\n                    }\n                }\n                l1 += 1;\n            }\n            while l2 <= r && and_sum(&count2) <= k {\n                for i in 0..32 {\n                    if (nums[l2] >> i) & 1 == 0 {\n                        count2[i] -= 1;\n                    }\n                }\n                l2 += 1;\n            }\n            // println!(\"{} {} {}\", r, l1, l2);\n            result += (l2 - l1) as i64;\n        }\n        result\n    }\n}",
    "submit_ts": "1720278756",
    "subm_id": "1311722880"
}