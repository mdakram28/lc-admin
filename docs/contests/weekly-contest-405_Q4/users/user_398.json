{
    "username": "Signior",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices; // pair of (word index, cost index)\n};\n\nvoid insert(TrieNode* root, const string& word, int wordIndex, int costIndex) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (node->children.find(c) == node->children.end()) {\n            node->children[c] = new TrieNode();\n        }\n        node = node->children[c];\n    }\n    node->wordIndices.emplace_back(wordIndex, costIndex);\n}\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.length();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    // Build the trie\n    TrieNode* root = new TrieNode();\n    for (int i = 0; i < words.size(); ++i) {\n        insert(root, words[i], i, costs[i]);\n    }\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        TrieNode* node = root;\n        for (int j = i; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) break;\n            node = node->children[target[j]];\n            for (auto& wordIndexCost : node->wordIndices) {\n                int wordIndex = wordIndexCost.first;\n                int cost = wordIndexCost.second;\n                int newPos = i + words[wordIndex].size();\n                if (newPos <= n) {\n                    dp[newPos] = min(dp[newPos], dp[i] + cost);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720321432",
    "subm_id": "1312322734"
}