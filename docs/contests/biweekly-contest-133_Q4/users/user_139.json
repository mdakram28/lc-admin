{
    "username": "Godeepak12",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& r) {\n        int m=r.size();\n        int nc=r[0].size();\n        int ans = 0;\n        \n        int maxInv=n*(n-1)/2;\n\n        \n        vector<int>dp(maxInv + 1, 0),prev(maxInv + 1, 0);\n        prev[0] = 1;\n        const int MOD = 1000000007;\n\n        for (int len = 1; len <= n;len++) {\n            fill(dp.begin(),dp.end(),0);\n\n            vector<int> cumSum(maxInv + 1, 0);\n            cumSum[0] = prev[0];\n            for (int inv = 1; inv <= maxInv; ++inv) {\n                cumSum[inv]=(cumSum[inv -1] +prev[inv])% MOD;\n            }\n\n            for (int i = 0; i<=maxInv; i++) {\n                if (i >= len) {\n                    dp[i] = (cumSum[i] - cumSum[i - len] + MOD) % MOD;\n                } else {\n                    dp[i] = cumSum[i];\n                }\n            }\n            swap(dp,prev);\n        }\n\n       \n        vector<int> invCount(n+1, -1);\n        for (const auto& req :r) {\n            int a = req[0];\n            int b = req[1];\n            invCount[a+1] =b;\n        }\n\n        fill(dp.begin(),dp.end(), 0);\n        prev[0] = 1;\n        for (int i=1; i<=maxInv; i++) {\n            prev[i] = 0;\n        }\n\n        for (int len = 1; len <= n; ++len) {\n            fill(dp.begin(), dp.end(), 0);\n\n            vector<int> cumSum(maxInv + 1, 0);\n            cumSum[0] = prev[0];\n            for (int inv = 1; inv<= maxInv; ++inv) {\n                cumSum[inv] =(cumSum[inv - 1] + prev[inv]) % MOD;\n            }\n\n            for (int i = 0; i <= maxInv; i++) {\n                if (i >= len) {\n                    dp[i] = (cumSum[i] - cumSum[i-len]+MOD) % MOD;\n                } else {\n                    dp[i]=cumSum[i];\n                }\n            }\n\n            swap(dp, prev);\n\n            if (invCount[len] != -1) {\n                for (int inv = 0; inv <= maxInv; ++inv) {\n                    if (inv != invCount[len]) {\n                        prev[inv] = 0;\n                    }\n                }\n            }\n        }\n\n        \n        for (int i=0;i<= maxInv; i++) {\n            ans=(ans+prev[i])% MOD;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1719069020",
    "subm_id": "1296784194"
}