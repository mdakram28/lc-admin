{
    "username": "Ayanerru",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    #define p1d(x) cout << (#x) << \": [\"; for(auto& zz: x) cout << zz << \" \"; cout << \"]\\n\"\n    class Segtree { // Sum\npublic:\n        Segtree(vector<ll>& arr) {\n            int n = arr.size();\n            size = 1;\n            while(size < n)\n                size *= 2;\n            acc = vector<ll>(size*2, 0LL); // init value modify me\n            build(arr, 0, 0, size);\n        }\n        void build(vector<ll>& arr, int nd_id, int lb, int rb) {\n            if (rb - lb == 1) { // top-down assignment\n                if (lb < (int)(arr.size())) {\n                    acc[nd_id] = arr[lb];\n                }\n                return;\n            }\n            int mid = lb + (rb-lb) / 2;\n            build(arr, nd_id*2+1, lb, mid);\n            build(arr, nd_id*2+2, mid, rb);\n            acc[nd_id] = acc[nd_id*2+1] + acc[nd_id*2+2]; // op: modify me\n        }\n\n        // notice: range [lb, rb)\n        void update(int i, int val, int nd_id, int lb, int rb) {\n            if (rb-lb == 1) {\n                acc[nd_id] = val;\n                return;\n            }\n            int mid = lb + (rb-lb) / 2;\n            if (i < mid) {\n                update(i, val, nd_id*2+1, lb, mid);\n            } else {\n                update(i, val, nd_id*2+2, mid, rb);\n            }\n            acc[nd_id] = acc[nd_id*2+1] + acc[nd_id*2+2]; // op: modify me\n        }\n        void update(int i, int val) {\n            update(i, val, 0, 0, size);\n        }\n        ll get_sum(int l, int r, int nd_id, int lb, int rb) {\n            if (lb >= r || l >= rb) // total outer\n                return 0;\n            if (lb >= l && rb <= r) // total inner\n                return acc[nd_id];\n            int mid = lb + (rb-lb) / 2;\n            ll sum_l = get_sum(l, r, nd_id*2+1, lb, mid);\n            ll sum_r = get_sum(l, r, nd_id*2+2, mid, rb);\n            return sum_l + sum_r; // op: modify me\n        }\n        ll get_sum(int l, int r) {\n            return get_sum(l, r, 0, 0, size);\n        }\n    private:\n        int size;\n        vector<ll> acc;\n    };\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<ll> peak(n, 0);\n        for(int i = 1; i < n-1; i++) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                peak[i] = 1;\n            }\n        }\n        // p1d(peak);\n        Segtree* st = new Segtree(peak);\n        vector<int> ans;\n        for(auto q: queries) {\n            if (q[0] == 1) {\n                if (q[1]+1 <= q[2]-1) {\n                    ans.push_back(st->get_sum(q[1]+1, q[2]));\n                } else {\n                    ans.push_back(0);\n                }\n            } else { // update\n                int idx = q[1];\n                nums[idx] = q[2];\n                for(int i2 = idx-1; i2 <= idx+1; i2++) {\n                    if (i2-1 >= 0 && i2+1 < n) {\n                        if (nums[i2] > nums[i2-1] && nums[i2] > nums[i2+1]) {\n                            peak[i2] = 1;\n                        } else {\n                            peak[i2] = 0;\n                        }\n                        st->update(i2, peak[i2]);\n                    }   \n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507953.0
}