{
    "username": "Assassin003",
    "submission": "class Solution {\npublic:\n    struct TrieNode { unordered_map<char, TrieNode*> C; vector<pair<int, int>> W;};\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie(){ \n            root = new TrieNode(); \n        }\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (auto it : word) {\n                if(!node->C.count(it)){\n                    node->C[it] = new TrieNode();\n                }\n                node = node->C[it];\n            }\n            node->W.push_back({index, cost});\n        }\n    };\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie T;\n        for (int i = 0; i < words.size(); i++) {\n            T.insert(words[i], i, costs[i]);\n        }\n        vector<int> dp(target.size()+1, 1e9);\n        dp[0] = 0;\n        for (int i = 0; i < target.size(); i++){\n            if(dp[i] != 1e9){\n                TrieNode* node = T.root;\n                for(int j = i; j<target.size(); j++) {\n                    if(node->C.count(target[j])){\n                        node = node->C[target[j]];\n                        for (auto it : node->W) {\n                            if (i+words[it.first].size() <= target.size()) {\n                                dp[i+words[it.first].size()] = min(dp[i]+it.second, dp[i+words[it.first].size()]);\n                            }\n                        }\n                        continue;\n                    }\n                    break;  \n                }\n            }\n        }\n        if(dp[target.size()] == 1e9){\n            return -1;\n        }\n        return dp[dp.size()-1];\n    }\n};",
    "submit_ts": "1720324628",
    "subm_id": "1312404160"
}