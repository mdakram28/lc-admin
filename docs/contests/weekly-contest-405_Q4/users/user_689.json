{
    "username": "user8629ED",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int value=1e9;\n    bool isLeaf=false;\n    TrieNode(): children(26,NULL){\n        \n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void create(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->value = min(cost, node->value);\n        node->isLeaf = true;\n    }\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = target.size();\n        vector<int> T(n + 1, 1e9);\n        for (int i = 0; i < words.size(); ++i) trie.create(words[i], costs[i]);\n        T[0] = 0;\n        for (int i=0;i<n;++i) {\n            if(T[i]!=1e9){\n            TrieNode* node = trie.getRoot();\n            for (int j =i;j<n;++j) {\n                if (!node->children[target[j]-'a']) break;\n                node=node->children[target[j]-'a'];\n                if (node->isLeaf) T[j+1]=min({T[j+1],T[i]+node->value});\n            }\n            }\n        }\n        if(T[n]==1e9) return -1;\n        return T[n];\n    }\n};",
    "submit_ts": "1720322988",
    "subm_id": "1312364443"
}