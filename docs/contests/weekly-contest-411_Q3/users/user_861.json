{
    "username": "devil_coder_48",
    "submission": "class Solution {\npublic:\n// Function to check if a string representation of a number is divisible by 7\nbool isDivisibleBy7(const string &s) {\n    int remainder = 0;\n    for (char c : s) {\n        remainder = (remainder * 10 + (c - '0')) % 7;\n    }\n    return remainder == 0;\n}\n\n// Function to decrement a palindrome string manually\nstring decrementString(string s) {\n    int length = s.length();\n    int half_len = (length + 1) / 2;\n\n    // Decrement the first half\n    for (int i = half_len - 1; i >= 0; --i) {\n        if (s[i] != '0') {\n            s[i] = s[i] - 1; // Decrement the character\n            break;\n        }\n        s[i] = '9'; // If it was '0', change it to '9'\n    }\n\n    // Mirror the first half to create a palindrome\n    for (int i = half_len; i < length; ++i) {\n        s[i] = s[length - i - 1];\n    }\n\n    return s;\n}\n\n// Function to find the largest n-digit palindrome divisible by 7\nstring findLargestPalindromeDivisibleBy7(int n) {\n    // Start with the largest palindrome string of n digits (all '9's)\n    string largest_palindrome(n, '9');\n\n    // Loop until we find a palindrome divisible by 7\n    while (true) {\n        if (isDivisibleBy7(largest_palindrome)) {\n            return largest_palindrome;\n        }\n        largest_palindrome = decrementString(largest_palindrome);\n    }\n}\n\n    string largestPalindrome(int n, int k) {\n        \n\n        if(n==1)\n        {\n            if(k==2|| k==4)\n            return \"8\";\n\n            if(k>=5)\n            return to_string(k);\n\n            return \"9\";\n        }\n\n        string s(n,'9');\n        //cout << res << endl;\n        int sum = 0;\n        for(int i=0;i<n;i++)\n        sum += s[i] -'0';\n\n        if(k==2)\n        {\n            s[n-1] = '8';\n            s[0] = '8';\n        }\n\n        if(k==4)\n        {\n            if(n==2)\n            return \"88\";\n            if(n==3)\n            return \"888\";\n\n            s[n-1] = '8';\n            s[n-2] = '8';\n            s[0] = '8';\n            s[1] = '8';\n        }\n\n        if(k==5)\n        {\n            s[0] = '5';\n            s[n-1] = '5';\n        }\n\n        if(k==6)\n        {\n            if(n==2)\n            return \"66\";\n            s[0] ='8';\n            s[n-1] = '8';\n            if(n%2==1 )\n            s[n/2] = '8';\n            else\n            {\n                s[n/2] ='7';\n                s[n/2 -1] = '7';\n            }\n        }\n\n        if(k==8)\n        {\n            if(n==2)\n            return \"88\";\n            if(n==3)\n            return \"888\";\n            if(n==4)\n            return \"8888\";\n            if(n==5)\n            return \"88888\";\n\n\n            s[n-1] = '8';\n            s[n-2] = '8';\n            s[n-3] = '8';\n            s[0] = '8';\n            s[1] = '8';\n            s[2] = '8';\n        }\n\n        if(k == 7) return findLargestPalindromeDivisibleBy7(n);\n        \n\n        return s;\n    }\n};",
    "submit_ts": "1723953540",
    "subm_id": "1359824044"
}