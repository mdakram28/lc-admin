{
    "username": "Ashutosh Sahu",
    "submission": "#pragma GCC optimize(\"O3\", \"unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\nauto __untie_cin = cin.tie(nullptr);\nauto __unsync_ios_stdio = ios_base::sync_with_stdio(false);\n#define MOD 1000000007\n#define INF 1e18\n#define endl \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define ff first\n#define ss second\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<vector<pair<int, int>>> rowBest(m, vector<pair<int, int>>(3, {INT_MIN, -1}));\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                if (board[i][j] > rowBest[i][0].first) {\n                    rowBest[i][2] = rowBest[i][1];\n                    rowBest[i][1] = rowBest[i][0];\n                    rowBest[i][0] = {board[i][j], j};\n                } else if (board[i][j] > rowBest[i][1].first) {\n                    rowBest[i][2] = rowBest[i][1];\n                    rowBest[i][1] = {board[i][j], j};\n                } else if (board[i][j] > rowBest[i][2].first) {\n                    rowBest[i][2] = {board[i][j], j};\n                }\n            }\n        }   \n        long long maxSum = -INF;\n        for (int i = 0; i < m - 2; i++) {\n            for (int j = i + 1; j < m - 1; j++) {\n                for (int k = j + 1; k < m; k++) {\n                    for (int x = 0; x < 3; x++) {\n                        for (int y = 0; y < 3; y++) {\n                            for (int z = 0; z < 3; z++) {\n                                if (rowBest[i][x].ss != rowBest[j][y].ss && \n                                    rowBest[i][x].ss != rowBest[k][z].ss && \n                                    rowBest[j][y].ss != rowBest[k][z].ss) {\n                                    long long sum = (long long)rowBest[i][x].ff + rowBest[j][y].ff + rowBest[k][z].ff;\n                                    maxSum = max(maxSum, sum);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        \n        return maxSum;\n    }\n};",
    "submit_ts": "1723907837",
    "subm_id": "1359126499"
}