{
    "username": "876pol",
    "submission": "using ll = long long;\nusing pll = pair<ll, ll>;\ntemplate <class T>\nusing vec = vector<T>;\n\n#define FOR(i, s, e) for (ll i = (ll)s; i < (ll)e; i++)\n#define CFOR(i, s, e) for (ll i = (ll)s; i <= (ll)e; i++)\n#define TRAV(a, c) for (const auto &a : c)\n#define dbg(x) cerr << \"ln\" << __LINE__ << \": \" << #x << \" = \" << x << endl\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int ans = 0, n = grid.size(), m = grid[0].size();\n        FOR(i, 0, n) {\n            FOR(j, 0, m) {\n                if (i >= n - 1 - i || j >= m - 1 - j) break;\n                ll num = grid[i][j] + grid[n - 1 - i][j] + \n                    grid[i][m - 1 - j] + grid[n - 1 - i][m - 1 - j];\n                ans += min(num, 4 - num);\n            }\n        }\n        bool flag = false;\n        ll sum = 0;\n        if (n % 2 == 1) {\n            FOR(j, 0, m) {\n                if (j >= m - 1 - j) break;\n                ll num = grid[n / 2][j] + grid[n / 2][m - 1 - j];\n                sum += grid[n / 2][j];\n                ans += min(num, 2 - num);\n                if (min(num, 2 - num)) {\n                    flag = true;\n                }\n            }\n        }\n        if (m % 2 == 1) {\n            FOR(i, 0, n) {\n                if (i >= n - 1 - i) break;\n                ll num = grid[i][m / 2] + grid[n - 1 - i][m / 2];\n                sum += grid[i][m / 2];\n                ans += min(num, 2 - num);\n                if (min(num, 2 - num)) {\n                    flag = true;\n                }\n            }\n        }\n        if (n % 2 && m % 2) {\n            if (grid[n / 2][m / 2]) ans++;\n        }\n        if (!flag && sum % 2 == 1) {\n            ans += 2;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722696664",
    "subm_id": "1343117170"
}