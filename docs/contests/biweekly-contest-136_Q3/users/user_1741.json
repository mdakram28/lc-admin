{
    "username": "suraj_0491",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int alpha = grid.size(), beta = grid[0].size();\n        int gamma = 0;\n        \n       \n        if (alpha % 2 == 1 && beta % 2 == 1) {\n            if (grid[alpha / 2][beta / 2] == 1) {\n                gamma += 1;\n            }\n        }\n\n        vector<int> shift(3, 0);\n        \n       \n        if (alpha % 2 == 1) {\n            int delta = 0, epsilon = beta - 1;\n            while (delta < epsilon) {\n                int zeta = grid[alpha / 2][delta] + grid[alpha / 2][epsilon];\n                shift[zeta] += 1;\n                delta += 1;\n                epsilon -= 1;\n            }\n        }\n\n      \n        if (beta % 2 == 1) {\n            int delta = 0, epsilon = alpha - 1;\n            while (delta < epsilon) {\n                int zeta = grid[delta][beta / 2] + grid[epsilon][beta / 2];\n                shift[zeta] += 1;\n                delta += 1;\n                epsilon -= 1;\n            }\n        }\n\n        \n        if (shift[2] % 2 == 1) {\n            gamma += (shift[1] > 0) ? shift[1] : 2;\n        } else {\n            gamma += shift[1];\n        }\n\n        // Calculate flips for 2x2 subgrids\n        for (int delta = 0; delta < alpha / 2; ++delta) {\n            for (int epsilon = 0; epsilon < beta / 2; ++epsilon) {\n                int zeta = grid[delta][epsilon];\n                int eta = grid[alpha - 1 - delta][epsilon];\n                int theta = grid[delta][beta - 1 - epsilon];\n                int iota = grid[alpha - 1 - delta][beta - 1 - epsilon];\n\n                int kappa = zeta + eta + theta + iota;\n\n                if (kappa != 0 && kappa != 4) {\n                    gamma += min(kappa, 4 - kappa);\n                }\n            }\n        }\n\n        return gamma;\n    }\n};\n",
    "submit_ts": "1722699907",
    "subm_id": "1343225895"
}