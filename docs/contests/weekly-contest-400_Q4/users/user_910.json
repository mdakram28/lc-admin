{
    "username": "maxwell142857",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        n  =len(nums)\n        bits = [[0]*32 for _ in range(n)]\n        for i in range(n):\n            val = nums[i]\n            p = 0\n            while val > 0:\n                bits[i][p] = val%2\n                p += 1\n                val //= 2\n        \n        # preSum\n        for i in range(1,n):\n            for j in range(32):\n                bits[i][j] += bits[i-1][j]\n\n        # sliding windows\n        def state2val(start,end):\n            arr2 = bits[end]\n            if start == 0:\n                arr1 = [0]*32\n            else:\n                arr1 = bits[start-1]\n            \n            val = 0\n            for i in range(32):\n                if arr2[i]-arr1[i] == end-start+1:\n                    val += 2**i\n            return val\n        \n        left = 0\n        state = [0]*32\n        ans = float('inf')\n        for right in range(n):\n            \n            val = state2val(left,right)\n            ans = min(ans,abs(val-k))\n            while left<right and val < k:\n                left += 1\n                val = state2val(left,right)\n                ans = min(ans,abs(val-k))\n                \n        return ans\n            \n            ",
    "submit_ts": 1717300591.0
}