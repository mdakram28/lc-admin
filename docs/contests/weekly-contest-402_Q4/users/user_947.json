{
    "username": "nqvr",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        N = len(nums)\n\n        def peak(i):\n            return i > 0 and i < N - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        L = [i for i in range(N) if peak(i)]\n        \n\n        def update(index, val):\n            if nums[index] == val:\n                return\n\n            before = [i for i in range(index - 1, index + 2) if peak(i)]\n            nums[index] = val\n            after = [i for i in range(index - 1, index + 2) if peak(i)]\n\n\n            for e in before:\n                if e not in after:\n                    # assert e in L\n                    remove(e)\n            for e in after:\n                if e not in before:\n                    # assert e not in L\n                    add(e)\n            \n\n        def remove(e):\n            lo = 0\n            hi = len(L)\n            while lo <= hi:\n                mid = (lo + hi) // 2\n                if L[mid] == e:\n                    L.pop(mid)\n                    return\n                elif L[mid] > e:\n                    hi = mid - 1\n                else:\n                    lo = mid + 1\n\n        def add(e):\n            lo = 0\n            hi = len(L)\n            while lo < hi:\n                mid = (lo + hi) // 2\n                if L[mid] < e:\n                    lo = mid + 1\n                else:\n                    hi = mid\n            L.insert(lo, e)\n\n        def query(l, r):\n            if r - l <= 1:\n                return 0\n            l += 1\n            r -= 1\n            lo = 0\n            hi = len(L)\n            while lo < hi:\n                mid = (lo + hi) // 2\n                if L[mid] < l:\n                    lo = mid + 1\n                else:\n                    hi = mid\n            \n            start = lo\n\n            lo = 0\n            hi = len(L)\n            while lo < hi:\n                mid = (lo + hi) // 2\n                if L[mid] <= r:\n                    lo = mid + 1\n                else:\n                    hi = mid\n\n            return lo - start\n\n\n        ans = []\n        for e in queries:\n            if e[0] == 1:\n                ans.append(query(e[1], e[2]))\n            else:\n                update(e[1], e[2])\n        return ans\n    \n    ",
    "submit_ts": 1718507961.0
}