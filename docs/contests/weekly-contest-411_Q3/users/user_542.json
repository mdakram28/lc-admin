{
    "username": "\u80e1\u9a6c\u7aa5\u6c5f",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1 or k == 3 or k == 9:\n            return '9' * n\n        if k == 4:\n            if n <= 4:\n                return '8' * n\n            else:\n                return \"88\" + (n - 4) * '9' + \"88\"\n        if k == 8:\n            if n <= 6:\n                return '8' * n\n            else:\n                return \"888\" + (n - 6) * '9' + \"888\"\n        if k == 2:\n            if n <= 2:\n                return '8' * n\n            else:\n                return '8' + (n - 2) * '9' + '8'\n        if k == 5:\n            if n <= 2:\n                return \"5\" * n\n            else:\n                return '5' + (n - 2) * '9' + '5'\n        if k == 6:\n            if n == 1:\n                return '6'\n            elif n == 2:\n                return '66'\n            elif n == 3:\n                return \"888\"\n            elif n % 2 == 1:\n                return \"8\" + (n - 3) // 2 * '9' + \"8\" + (n - 3)// 2 * '9' + \"8\"\n            else:\n                return \"8\" + (n - 4) // 2 * '9' + \"77\" + (n - 4) // 2 * '9' + \"8\"\n        if k == 7:\n            cores = [\"\", \"7\", \"77\", \"5\", \"77\", \"7\", \"\", \"4\", \"44\", \"6\", \"44\", \"4\"]\n            core = cores[n % 12]\n            if len(core) < n:\n                return \"9\" * ((n - len(core)) // 2) + core + \"9\" * ((n - len(core))//2)\n            else:\n                return core\n\n\n\n\n\n\n\n\n\n",
    "submit_ts": "1723951708",
    "subm_id": "556407171"
}