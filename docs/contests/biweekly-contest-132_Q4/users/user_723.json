{
    "username": "samyak_1010",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& numbers, int allowed_changes) {\n       int length = numbers.size(); \n        vector<vector<int>> dynamic_programming(length, vector<int>(allowed_changes+1, 1)); \n        int max_length = 1; \n        vector<int> max_changes(allowed_changes+1, -1); \n        vector<map<int,int>> max_changes_map(allowed_changes+1); \n        for(int i=0; i<length; i++){ \n            for(int j=0; j<=allowed_changes; j++){ \n                for(int k=0; k<j; k++){ \n                    dynamic_programming[i][j] = max(dynamic_programming[i][j], 1 + max_changes[k]); \n                } \n                if(max_changes_map[j].find(numbers[i]) != max_changes_map[j].end()){ \n                    dynamic_programming[i][j] = max(dynamic_programming[i][j], 1 + max_changes_map[j][numbers[i]]); \n                } \n                max_length = max(max_length, dynamic_programming[i][j]); \n            } \n            for(int j=0; j<=allowed_changes; j++){ \n                max_changes[j] = max(max_changes[j], dynamic_programming[i][j]); \n                max_changes_map[j][numbers[i]] = max(max_changes_map[j][numbers[i]], dynamic_programming[i][j]); \n            } \n        } \n        return max_length; \n       \n    }\n};\n",
    "submit_ts": 1717862363.0
}