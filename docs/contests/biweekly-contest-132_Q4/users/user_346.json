{
    "username": "plevande",
    "submission": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        good = {-1: {0: 0}}\n        #at most 51 things in the sequence\n        #7 7 7 7 2 2 2 1 1 1 5 5 5 5 5 3 \n        #longest that  = x, != x \n        import heapq\n        H = [[] for i in range(k+1)]\n        heapq.heappush(H[0], [0, -1])\n        good = {-1: {0: 0}}\n        for i in range(n):\n            if nums[i] not in good:\n                good[nums[i]] = {0: 0}\n            for j in range(k, -1, -1):\n                if nums[i] in good and j in good[nums[i]]:\n                    c = good[nums[i]][j]\n                    heapq.heappush(H[j], [-1*(c+1), nums[i]])\n                    good[nums[i]][j] = c+1\n                ops=  []\n                while len(H[j]) > 0:\n                    c,x = H[j][0]\n                    if good[x][j]!=-1*c:\n                        heapq.heappop(H[j])\n                    else:\n                        break\n                if len(H[j]) > 0:\n                    c, x = heapq.heappop(H[j])\n                    ops.append([-1*c, x])\n                while len(H[j]) > 0:\n                    c,x = H[j][0]\n                    if good[x][j]!=-1*c:\n                        heapq.heappop(H[j])\n                    else:\n                        break\n                if len(H[j]) > 0:\n                    c, x = heapq.heappop(H[j])\n                    ops.append([-1*c, x])\n                for c, x in ops:\n                    if x!=nums[i]:\n                        #we have a j+1 of length c+1 ending in nums[i]\n                        if j+1 <= k:\n                            if nums[i] not in good:\n                                good[nums[i]] = {}\n                            if j+1 not in good[nums[i]]:\n                                good[nums[i]][j+1] = 0\n                            if c+1 > good[nums[i]][j+1]:\n                                heapq.heappush(H[j+1], [-1*(c+1), nums[i]])\n                                good[nums[i]][j+1] = c+1\n                for c, x in ops:\n                    if good[x][j]==c:\n                        heapq.heappush(H[j], [-1*c, x])\n         #   print(H)\n                            \n        answer = 0\n        for x in good:\n            for j in good[x]:\n                answer= max(answer, good[x][j])\n        return answer\n        \n        ",
    "submit_ts": 1717860707.0
}