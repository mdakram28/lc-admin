{
    "username": "2210040023",
    "submission": "#include <vector>\n#include <set>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // Initialize the distance array where each city initially connects to the next city\n        vector<int> d(n, 0);\n        for (int i = 1; i < n; ++i) {\n            d[i] = d[i - 1] + 1;\n        }\n\n        // Set to maintain the cities, initially contains all cities\n        set<int> p;\n        for (int i = 0; i < n; ++i) {\n            p.insert(i);\n        }\n\n        // Result vector to store the shortest path length after each query\n        vector<int> sk;\n\n        // Process each query\n        for (const auto& query : queries) {\n            int srk = query[0];\n            int dhoni = query[1];\n\n            // Find the range of cities to remove from the set\n            auto lb = p.lower_bound(srk + 1);\n            auto ub = p.lower_bound(dhoni);\n\n            // Remove the cities in the range (srk+1, dhoni)\n            p.erase(lb, ub);\n\n            // The shortest path length is the size of the set minus 1\n            sk.push_back(p.size() - 1);\n        }\n\n        return sk;\n    }\n};\n\n// Example usage:\n// Solution sol;\n// int n = 5;\n// vector<vector<int>> queries = {{2, 4}, {0, 2}, {0, 4}};\n// vector<int> sk = sol.shortestDistanceAfterQueries(n, queries);\n// for (int dist : sk) {\n//     cout << dist << \" \";\n// }\n// Expected output: 3 2 1\n",
    "submit_ts": "1722743545",
    "subm_id": "1343794374"
}