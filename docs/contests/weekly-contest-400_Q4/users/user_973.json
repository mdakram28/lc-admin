{
    "username": "azz147",
    "submission": "import functools\nimport collections\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        \n        @functools.lru_cache(None)\n        def convert(num):\n            b_num = bin(num)[2:][::-1]\n            # print(num, b_num)\n            result = list(range(29, len(b_num)-1, -1))\n            for i in enumerate(b_num):\n                if i[1]=='0':\n                    result.append(i[0])\n            return result\n\n        left_pt = 0\n        right_pt = 0\n        count_zero = collections.defaultdict(lambda :0)\n        min_diff = (1<<30)\n        total = ((1<<30)-1)\n        # print(bin(total))\n        while right_pt<len(nums):\n            total &= nums[right_pt]\n            for i in convert(nums[right_pt]):\n                count_zero[i]+=1\n            # print(total)\n            # print(total, dict(count_zero))\n            min_diff = min(min_diff, abs(total-k))\n            while total<k:\n                # print(convert(nums[left_pt]))\n                for i in convert(nums[left_pt]):\n                    count_zero[i]-=1\n                    if count_zero[i]==0:\n                        total+= (1<<i)\n                min_diff = min(min_diff, abs(total-k))\n                left_pt+=1\n            right_pt+=1\n            # print(left_pt, right_pt, bin(total), min_diff)\n        return min_diff\n      ",
    "submit_ts": 1717300176.0
}