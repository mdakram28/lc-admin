{
    "username": "Keshaw_1729",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int minFlips(std::vector<std::vector<int>>& grid) {\n        int rows = grid.size(), cols = grid[0].size();\n        int totalFlips = 0;\n\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (grid[rows / 2][cols / 2] == 1) {\n                totalFlips += 1;\n            }\n        }\n\n        std::vector<int> counts(3, 0);\n        if (rows % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int sum = grid[rows / 2][left] + grid[rows / 2][right];\n                counts[sum] += 1;\n                left += 1;\n                right -= 1;\n            }\n        }\n\n        if (cols % 2 == 1) {\n            int top = 0, bottom = rows - 1;\n            while (top < bottom) {\n                int sum = grid[top][cols / 2] + grid[bottom][cols / 2];\n                counts[sum] += 1;\n                top += 1;\n                bottom -= 1;\n            }\n        }\n\n        if (counts[2] % 2 == 1) {\n            if (counts[1] > 0) {\n                totalFlips += counts[1];\n            } else {\n                totalFlips += 2;\n            }\n        } else {\n            totalFlips += counts[1];\n        }\n\n        for (int row = 0; row < rows / 2; ++row) {\n            for (int col = 0; col < cols / 2; ++col) {\n                int topLeft = grid[row][col];\n                int bottomLeft = grid[rows - 1 - row][col];\n                int topRight = grid[row][cols - 1 - col];\n                int bottomRight = grid[rows - 1 - row][cols - 1 - col];\n\n                int sumCorners = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (sumCorners != 0 && sumCorners != 4) {\n                    totalFlips += std::min(sumCorners, 4 - sumCorners);\n                }\n            }\n        }\n\n        return totalFlips;\n    }\n};\n",
    "submit_ts": "1722699830",
    "subm_id": "1343223690"
}