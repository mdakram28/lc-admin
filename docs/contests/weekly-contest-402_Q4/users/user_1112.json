{
    "username": "braindroid",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\nprivate:\n    std::vector<int> nums;\n    std::vector<int> tree;\n    int n;\n\n    bool is_peak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            // Leaf node\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            // Leaf node\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node + 1, start, mid, L, R);\n        int right_query = query(2 * node + 2, mid + 1, end, L, R);\n        return left_query + right_query;\n    }\n\npublic:\n    SegmentTree(std::vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n, 0);\n        build(0, 0, n - 1);\n    }\n\n    int count_peaks(int L, int R) {\n        if (L == R) return 0; // No peaks possible in a single element\n        return query(0, 0, n - 1, L + 1, R - 1);\n    }\n\n    void update(int idx, int value) {\n        nums[idx] = value;\n        // Update the peak status for the affected index and its neighbors\n        for (int i = idx - 1; i <= idx + 1; ++i) {\n            if (i >= 0 && i < n) {\n                update(0, 0, n - 1, i);\n            }\n        }\n    }\n};\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        std::vector<int> results;\n    SegmentTree segmentTree(nums);\n\n    for (const auto& query : queries) {\n        if (query[0] == 1) {\n            int li = query[1], ri = query[2];\n            results.push_back(segmentTree.count_peaks(li, ri));\n        } else if (query[0] == 2) {\n            int index = query[1], value = query[2];\n            segmentTree.update(index, value);\n        }\n    }\n\n    return results;\n    }\n};",
    "submit_ts": 1718507173.0
}