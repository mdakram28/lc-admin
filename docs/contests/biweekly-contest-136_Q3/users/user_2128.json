{
    "username": "anshukumarsingh",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid)\n    {\n        int r = grid.size(), c = grid[0].size();\n\n        int m = ((r >> 1) - (not (r & 1)));\n        int n = ((c >> 1) - (not (c & 1)));\n\n        int flips = 0, ones = 0, extra = 0;\n\n        for (int x = 0; x <= m; x ++)\n        {\n            for (int y = 0; y <= n; y ++)\n            {\n                if (x != (r - 1 - x) and y != (c - 1 - y))\n                {\n                    int count = (grid[x][y] + grid[x][c-1-y] + grid[r-1-x][y] + grid[r-1-x][c-1-y]);\n\n                    flips += min(count, 4 - count);\n                }\n                else if (x == (r - 1 - x) and y == (c - 1 - y)) ones += grid[x][y];\n                else\n                {\n                    if (x == (r - 1 - x))\n                    {\n                        if (grid[x][y] == grid[x][c-1-y]) ones += (grid[x][y] + grid[x][c-1-y]);\n                        else extra ++;\n                    }\n                    else\n                    {\n                        if (grid[x][y] == grid[r-1-x][y]) ones += (grid[x][y] + grid[r-1-x][y]);\n                        else extra ++;\n                    }\n                }\n            }\n        }\n\n        ones %= 4;\n        ones -= (min((ones >> 1), extra) << 1);\n\n        return (flips + extra + ones);\n    }\n};",
    "submit_ts": "1722699959",
    "subm_id": "1343227408"
}