{
    "username": "flamboyant-i2aman7jl",
    "submission": "class BIT(object):\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (n + 1)\n\n    def lowbit(self, x):\n        return x & (-x)\n\n    def update(self, index, val):\n        while index <= self.n:\n            self.tree[index] += val\n            index += self.lowbit(index)\n\n    def query(self, index):\n        ans = 0\n        while index:\n            ans += self.tree[index]\n            index -= self.lowbit(index)\n        return ans\n\nclass Solution(object):\n    def countOfPeaks(self, nums, queries):\n        \"\"\"\n        :type nums: List[int]\n        :type queries: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        inf = float('inf')\n        n = len(nums)\n        vals = [0] * (n+10)\n        bit = BIT(n+10)\n        for i in xrange(2, n+2):\n            vals[i] = nums[i-2]\n        vals[1] = inf\n        vals[n+2] = inf\n        \n        for i in xrange(2, n+2):\n            if vals[i] > vals[i-1] and vals[i] > vals[i+1]:\n                bit.update(i, 1)\n        \n        ans = []\n        for tag, v1, v2 in queries:\n            if tag == 1:\n                l, r = v1, v2\n                l += 2\n                r += 2\n                if l == r:\n                    ans.append(0)\n                else:\n                    ans.append(bit.query(r-1)-bit.query(l+1-1))\n            else:\n                index, val = v1, v2\n                index += 2\n                prev = [vals[i] > vals[i-1] and vals[i] > vals[i+1] for i in xrange(index-1, index+2)]\n                vals[index] = val\n                curr = [vals[i] > vals[i-1] and vals[i] > vals[i+1] for i in xrange(index-1, index+2)]\n                # print prev, curr\n                for i in xrange(3):\n                    if curr[i] != prev[i]:\n                        bit.update(index-1+i, curr[i]-prev[i])\n        return ans\n                \n        \n        ",
    "submit_ts": 1718507158.0
}