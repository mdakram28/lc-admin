{
    "username": "amsraman",
    "submission": "const int base = 10000, mod = 998244853;\nint mul(int x, int y) {\n    return (1LL * x * y) % mod;\n}\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = (int) target.length();\n        vector<int> pw(n + 1, 1);\n        for(int i = 1; i <= n; i++) pw[i] = mul(pw[i - 1], base);\n        vector<int> dp(n + 1, 1e9); dp[0] = 0;\n        vector<int> lens; unordered_map<int, int> cst;\n        for(int i = 0; i < (int) words.size(); i++) {\n            string w = words[i];\n            if((int) w.length() > n) continue;\n            lens.push_back((int) w.length()); int cur = 0;\n            for(char c: w) cur = (mul(cur, base) + (c - '0' + 61)) % mod;\n            if(!cst.count(cur)) {\n                cst[cur] = costs[i];\n            } else {\n                cst[cur] = min(cst[cur], costs[i]);\n            }\n        }\n        sort(lens.begin(), lens.end()); lens.erase(unique(lens.begin(), lens.end()), lens.end());\n        vector<int> my_hsh(1, 0);\n        for(char c: target) my_hsh.push_back((mul(my_hsh.back(), base) + (c - '0' + 61)) % mod);\n        for(int i = 0; i < n; i++) {\n            for(int len: lens) {\n                if(len > i + 1) continue;\n                int fst = my_hsh[i + 1], bck = mul(my_hsh[i - len + 1], pw[len]);\n                int cur = (fst - bck + mod) % mod;\n                if(cst.count(cur)) {\n                    dp[i + 1] = min(dp[i + 1], dp[i + 1 - len] + cst[cur]);\n                }\n            }\n        }\n        if(dp[n] == 1e9) dp[n] = -1;\n        return dp[n];\n    }\n};\n/*\nthere's only sqrt(n) possible lengths\n*/",
    "submit_ts": "1720321253",
    "subm_id": "1312317775"
}