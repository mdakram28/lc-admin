{
    "username": "jeevantbihari",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        unordered_map<int, int> diffCount;\n        int maxCount = 0;\n        int n = nums.size();\n        int left = 0;\n        int right = n - 1;\n        while(left < right) {\n            int diff = abs(nums[left] - nums[right]);\n            diffCount[diff]++;\n            if(diffCount[diff] > maxCount) {\n                maxCount = diffCount[diff];\n            }\n            left++;\n            right--;\n        }\n        vector<int> maxDiffNumbers;\n        for(auto it = diffCount.begin(); it != diffCount.end(); it++) {\n            if(it->second == maxCount || it->second == maxCount - 1) {\n                maxDiffNumbers.push_back(it->first);\n            }\n        }\n        int res = INT_MAX;\n        for(int i = 0; i < maxDiffNumbers.size(); i++) {\n            left = 0;\n            right = n - 1;\n            int ans = 0;\n            int difference = maxDiffNumbers[i];\n            while(left < right) {\n                int diff = abs(nums[left] - nums[right]);\n                if(diff != difference) {\n                    if(min(nums[left], nums[right]) + difference <= k || max(nums[left], nums[right]) - difference >= 0) {\n                        ans++;\n                    } else {\n                        ans += 2;\n                    }\n                }\n                left++;\n                right--;\n            }\n            res = min(res, ans);\n        }\n        \n        return res;\n    }\n};\n \n",
    "submit_ts": "1721488930",
    "subm_id": "1327437550"
}