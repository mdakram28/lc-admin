{
    "username": "sdhakad011",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int minimumDifference(vector<int> &nums, int target)\n    {\n        auto getSetBits = [](int x)\n        {\n            vector<int> setBits;\n            int index = 0;\n            while (x > 0)\n            {\n                if (x & 1)\n                {\n                    setBits.push_back(index);\n                }\n                x >>= 1;\n                ++index;\n            }\n            return setBits;\n        };\n\n        auto countsToBitwiseAnd = [](int windowLength, unordered_map<int, int> &bitCounts)\n        {\n            int result = 0;\n            for (const auto &[bit, count] : bitCounts)\n            {\n                if (count == windowLength)\n                {\n                    result |= (1 << bit);\n                }\n            }\n            return result;\n        };\n\n        int n = nums.size();\n        if (n == 0)\n            return abs(target);\n\n        int currentAndValue = nums[0];\n        int bestDiff = abs(currentAndValue - target);\n        unordered_map<int, int> windowBitCounts;\n\n        for (int bit : getSetBits(nums[0]))\n        {\n            windowBitCounts[bit]++;\n        }\n\n        int leftIdx = 0, rightIdx = 0;\n\n        while (rightIdx < n)\n        {\n            // Expand the window to decrease & value\n            if (currentAndValue > target || leftIdx > rightIdx)\n            {\n                rightIdx++;\n                if (rightIdx >= n)\n                    break;\n                for (int bit : getSetBits(nums[rightIdx]))\n                {\n                    windowBitCounts[bit]++;\n                }\n            }\n            // Shrink the window to increase & value\n            else\n            {\n                for (int bit : getSetBits(nums[leftIdx]))\n                {\n                    windowBitCounts[bit]--;\n                    if (windowBitCounts[bit] == 0)\n                    {\n                        windowBitCounts.erase(bit);\n                    }\n                }\n                leftIdx++;\n            }\n\n            if (rightIdx >= leftIdx)\n            {\n                currentAndValue = countsToBitwiseAnd(rightIdx - leftIdx + 1, windowBitCounts);\n                bestDiff = min(bestDiff, abs(currentAndValue - target));\n            }\n        }\n\n        return bestDiff;\n    }\n};\n",
    "submit_ts": 1717299956.0
}