{
    "username": "qthon",
    "submission": "class SegmentTree {\n    struct Node {\n        int val, add;\n        Node *left, *right;\n        Node(): val(0), add(0), left(nullptr), right(nullptr) {}\n    };\npublic:\n    SegmentTree(int n) {\n        this->n = n;\n        root = new Node();\n    }\n    \n    void update(int l, int r, int x) {\n        update(l, r, root, x, 0, n-1);\n    }\n    \n    int sum(int l, int r) {\n        return query(l, r, root, 0, n-1);\n    }\n    \nprivate:\n    void pushup(Node *node) {\n        node->val = node->left->val + node->right->val;\n    }\n    \n    void pushdown(Node *node ,int s, int e) {\n        if(node->left == nullptr) node->left = new Node();\n        if(node->right == nullptr) node->right = new Node();\n        if(node->add == 1) {\n            node->left->val = 0;\n            node->left->add = 1;\n            node->right->val = 0;\n            node->right->add = 1;\n            node->add = 0;\n        }\n    }\n    \n    void update(int l, int r, Node *node, int x, int s, int e) {\n        if(l <= s && e <= r) {\n            if(x == 1) {\n                node->val += e-s+1;\n            } else {\n                node->val = 0;\n                node->add = 1;\n            }\n            return ;\n        }\n        pushdown(node, s, e);\n        int mid = (s+e)/2;\n        if(l <= mid) update(l, r, node->left, x, s, mid);\n        if(r > mid) update(l, r, node->right, x, mid+1, e);\n        pushup(node);\n    }\n    \n    int query(int l, int r, Node *node, int s, int e) {\n        if(l <= s && e <= r) return node->val;\n        pushdown(node, s, e);\n        int mid = (s+e)/2;\n        int ret = 0;\n        if(l <= mid) ret += query(l, r, node->left, s, mid);\n        if(r > mid) ret += query(l, r, node->right, mid+1, e);\n        return ret;\n    }\n    Node *root;\n    int n;\n};\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        SegmentTree s(n);\n        for(int i = 1; i < n; i++) {\n            s.update(i, i, 1);\n        }\n        vector<int> ans;\n        for(auto &q: queries) {\n            int l = q[0]+1, r = q[1]-1;\n            s.update(l, r, 0);\n            ans.push_back(s.sum(0, n-1));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742653",
    "subm_id": "552346047"
}