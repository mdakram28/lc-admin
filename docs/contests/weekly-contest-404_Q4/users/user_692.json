{
    "username": "DenisGubar",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> connectivity;\n    vector<int> height, dist;\n    void calcHeight(int V, int P)\n    {\n        for (int U : connectivity[V])\n            if (U != P)\n            {\n                calcHeight(U, V);\n                height[V] = max(height[V], height[U]);\n            }\n        ++height[V];\n    }\n    void calcDist(int V, int P)\n    {\n        int max1 = 0, max2 = 0;\n        for (int U : connectivity[V])\n            if (U != P)\n            {\n                if (height[U] >= max1)\n                {\n                    max2 = max1;\n                    max1 = height[U];\n                }\n                else if (height[U] > max2)\n                    max2 = height[U];\n            }\n        int x = 0;\n        for (int U : connectivity[V])\n            if (U != P)\n            {\n                x = (max1 == height[U]) ? max2 : max1;\n                dist[U] = 1 + max(1 + x, dist[V]);\n                calcDist(U, V);\n            }\n    }\n    pair<int, int> calc(vector<vector<int>> const& edges)\n    {\n        int N = edges.size() + 1;\n        if (N == 1)\n            return pair<int, int>{ 0, 0 };\n        connectivity = vector<vector<int>>(N);\n        height = vector<int>(N);\n        dist = vector<int>(N);\n        for (int i = 0; i < N - 1; ++i)\n        {\n            int const& V = edges[i][0];\n            int const& U = edges[i][1];\n            connectivity[V].push_back(U);\n            connectivity[U].push_back(V);\n        }\n        pair<int, int> result{ N, 0 };\n        calcHeight(0, -1);\n        calcDist(0, -1);\n        for (int V = 0; V < N; ++V)\n        {\n            result.first = min(result.first, max(dist[V], height[V]) - 1);\n            result.second = max(result.second, max(dist[V], height[V]) - 1);\n        }\n        return result;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        pair<int, int> x = calc(edges1);\n        pair<int, int> y = calc(edges2);\n        return max({x.second, x.first + 1 + y.first, y.second});\n    }\n};\n",
    "submit_ts": 1719719262.0
}