{
    "username": "sisyphus3",
    "submission": "class Solution {\npublic:\n    #define sz(x) int(x.size())\n#define all(x) x.begin(), x.end()\n#define db double\n#define ll long long\n#define ar array\ntemplate<typename T> bool ckmin(T& a, const T& b) { return a > b ? a = b, 1 : 0; }\ntemplate<typename T> bool ckmax(T& a, const T& b) { return a < b ? a = b, 1 : 0; }\n\n    template<typename it, typename bin_op>\nstruct sparse_table {\n    using T = typename remove_reference<decltype(*declval<it>())>::type;\n    vector<vector<T>> t; bin_op F;\n \n    sparse_table(it first, it last, bin_op op) : t(1), F(op) {\n        int n = distance(first, last);\n        t.assign(32-__builtin_clz(n), vector<T>(n));\n        t[0].assign(first, last);\n        for (int i = 1; i < sz(t); i++)\n            for (int j = 0; j < n-(1<<i)+1; j++)\n                t[i][j] = F(t[i-1][j], t[i-1][j+(1<<(i-1))]);\n    }\n \n    T query(int l, int r) {\n        int h = 31 - __builtin_clz(r-l+1);\n        return F(t[h][l], t[h][r-(1<<h)+1]);\n    }\n};\n\n    long long countSubarrays(vector<int>& a, int k) {\n        sparse_table st(all(a), [&](int x, int y) { return x & y; });\n        ll ans = 0;\n        int n = sz(a);\n        for (int i = 0; i < n; i++) {\n            if (a[i] < k) continue;\n            int l = i, r = n-1, L = i, R = n-1;\n            while (L <= R) {\n                int mid = (L+R)/2;\n                if (st.query(i, mid) >= k) l = mid, L = mid+1;\n                else R = mid-1;\n            }\n            L = i, R = l;\n            r = l;\n            if (st.query(i, l) > k) continue;\n            while (L <= R) {\n                int mid = (L+R)/2;\n                if (st.query(i, mid) == k) r = mid, R = mid-1;\n                else L = mid+1;\n            }\n            ans += l-r+1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277164",
    "subm_id": "1311650674"
}