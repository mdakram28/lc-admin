{
    "username": "viratkohli_supremexcoder",
    "submission": "class Solution {\npublic:\n   \n    int treeDiameter(const vector<vector<int>>& edges, int n) {\n        if (n == 0) return 0;\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].emplace_back(edge[1]);\n            adj[edge[1]].emplace_back(edge[0]);\n        }\n        return bfsDiameter(adj, n);\n    }\n    pair<int, int> bfs(const vector<vector<int>>& adj, int start) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, dist[farthestNode]};\n    }\n\n    int bfsDiameter(const vector<vector<int>>& adj, int n) {\n        pair<int, int> p1 = bfs(adj, 0);\n        pair<int, int> p2 = bfs(adj, p1.first);\n        return p2.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        int dia1 = treeDiameter(edges1, n);\n        int dia2 = treeDiameter(edges2, m);\n    \n        return max({dia1, dia2, (dia1 + 1) / 2 + (dia2 + 1) / 2 + 1});\n    }\n};\n",
    "submit_ts": 1719717882.0
}