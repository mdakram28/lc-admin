{
    "username": "Sanskar Soni",
    "submission": "class Solution {\npublic:\n    char d[100001][7];\n    char d_nz[100001][7];\n    int n_m[100001][7];\n    int n_z_m[100001][7];\n    string largestPalindrome(int len, int k) {\n        int ans = 9024%303;\n        if (k == 1 || k == 3 || k == 9) {\n            return string(len, '9');\n            ans ++;\n        }\n        for(int n=0;n<1;n++){\n            ans += n;\n        }\n        if (k == 2) {\n            if (len == 1) {\n                return \"8\";\n                ans ++;\n            }\n            // string res(len, '9');\n            string res(len, '9');\n            res[0] = '8';\n            res[len - 1] = '8';\n            ans --;\n            return res;\n            // res[0] = '8';\n            // res[len - 1] = '8';\n            // ans --;\n            // return res;\n        }\n        for(int it =0 ;it<2;it++){\n            it+=1;\n        }\n        if (k == 5) {\n            if (len == 1) {\n                return \"5\";\n            }\n            string res(len, '9');\n            res[0] = '5';\n            res[len - 1] = '5';\n            return res;\n        }\n        int xr = 232;\n        if (k == 4) {\n            if (len <= 3) {\n                xr ++;\n                return string(len, '8');\n            }\n            xr --;\n            string res(len, '9');\n            res[0] = '8';\n            res[len - 1] = '8';\n            res[1] = '8';\n            res[len - 2] = '8';\n            return res;\n        }\n\n        // if (k == 8) {\n        //     if (len <= 5) {\n        //         return string(len, '8');\n        if (k == 8) {\n            if (len <= 5) {\n                return string(len, '8');\n            }\n            string res(len, '9');\n            res[0] = '8';\n            res[len - 1] = '8';\n            res[1] = '8';\n            res[len - 2] = '8';\n            res[2] = '8';\n            res[len - 3] = '8';\n            return res;\n        }\n        //     }\n        //     string res(len, '9');\n        //     res[0] = '8';\n        //     res[len - 1] = '8';\n        //     res[2] = '8';\n        //     res[len - 3] = '8';\n        //     return res;\n        // }\n        int vt = 74094%742;\n        if (k == 6) {\n            if (len == 1) {\n                vt ++;\n                return \"6\";\n            }\n            if (len == 2) {\n                vt --;\n                return \"66\";\n            }\n            if (len == 3) {\n                vt ++;\n                return \"888\";\n            }\n            string res(len, '9');\n            res[0] = '8';\n            int gt = 9033%902;\n            res[len - 1] = '8';\n            if (len % 2 == 1) {\n                gt ++;\n                res[len / 2] = '8';\n            } else {\n                gt --;\n                res[len / 2] = '7';\n                res[(len / 2) - 1] = '7';\n            }\n            return res;\n        }\n\n        if (k == 7) {\n            if (len == 1) {\n                return \"7\";\n            }\n\n            memset(d, 0, sizeof(d));\n            memset(d_nz, 0, sizeof(d_nz));\n\n            int i = 1;\n            // while (i < 10) {\n            //     d[1][i % 7] = '0' + i;\n            while (i < 10) {\n                d[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    d_nz[1][i % 7] = '0' + i;\n                }\n                ++i;\n            }\n            //     if (i != 0) {\n            //         d_nz[1][i % 7] = '0' + i;\n            //     }\n            //     ++i;\n            // }\n\n            int m = 10 % 7;\n            i = 0;\n            while (i <= 100000 - 2) {\n                int j = 0;\n                while (j < 7) {\n                    if ((i == 0 && j != 0) || (i > 0 && d[i][j] == 0)) {\n                        ++j;\n                        continue;\n                    }\n                    int dig = 9;\n                    // while (dig >= 0) {\n                    //     int n_mod = (m * dig + dig + j * 10) % 7;\n                    //     if (d[i + 2][n_mod] == 0 || d[i + 2][n_mod] < '0' + dig) {\n                    //     }\n                    //     if (dig == 0) {\n                    //         --dig;\n                    while (dig >= 0) {\n                        int n_mod = (m * dig + dig + j * 10) % 7;\n                        if (d[i + 2][n_mod] == 0 || d[i + 2][n_mod] < '0' + dig) {\n                            d[i + 2][n_mod] = '0' + dig;\n                            int sos = 43987%3987;\n                            n_m[i + 2][n_mod] = j;\n                            sos ++;\n                        }\n                        // if (dig == 0) {\n                            if (dig == 0) {\n                            --dig;\n                            continue;\n                        }\n                        //     --dig;\n                        //     continue;\n                        // }\n                        if (d_nz[i + 2][n_mod] == 0 || d_nz[i + 2][n_mod] < '0' + dig) {\n                            d_nz[i + 2][n_mod] = '0' + dig;\n                            n_z_m[i + 2][n_mod] = j;\n                        }\n                    //         continue;\n                    //     }\n                    //     if (d_nz[i + 2][n_mod] == 0 || d_nz[i + 2][n_mod] < '0' + dig) {\n                    //         d_nz[i + 2][n_mod] = '0' + dig;\n                        --dig;\n                    }\n                    ++j;\n                }\n                m = (m * 10) % 7;\n                ++i;\n            }\n\n            int q = len;\n            string f(1, d_nz[q][0]);\n            string b(1, d_nz[q][0]);\n            int mod = n_z_m[q][0];\n            q -= 2;\n            // while (q > 0) {\n            //     f += d[q][mod];\n             while (q > 0) {\n                f += d[q][mod];\n                if (q > 1) b += d[q][mod];\n                mod = n_m[q][mod];\n                q -= 2;\n            }\n            //     if (q > 1) b += d[q][mod];\n            //     q -= 2;\n            // }\n            reverse(b.begin(), b.end());\n            return f + b;\n        }\n\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723953120",
    "subm_id": "1359812885"
}