{
    "username": "hkmaxi",
    "submission": "class Solution {\npublic:\n    void dfs(int v,int p,vector<vector<int> >&adj,vector<int> &max_time,vector<int> &first_time,int curr_time){\n        max_time[v]=max(max_time[v],curr_time);\n        first_time[v]=curr_time;\n        \n        for(auto to:adj[v]){\n            if(to==p){\n                continue;\n            }\n            \n            if(to%2){\n                dfs(to,v,adj,max_time,first_time,curr_time+1);\n            }else{\n                dfs(to,v,adj,max_time,first_time,curr_time+2);\n            }\n            \n            \n            max_time[v]=max(max_time[v],max_time[to]);\n        }\n        \n\n        \n    }\n    \n    void dfs2(int v,int p,vector<vector<int> >&adj,vector<int> &max_time,vector<int> &first_time,vector<int> &sol,int offset){\n        //cout<<v<<\" \"<<offset<<endl;\n        sol[v]=max(offset,max_time[v]-first_time[v]);\n        \n        vector<int> pref,suff;\n        for(auto to:adj[v]){\n            if(to==p){\n                continue;\n            }\n            pref.push_back(max_time[to]-first_time[v]);\n            suff.push_back(max_time[to]-first_time[v]);\n        }\n        \n        int sz=pref.size();\n        for(int i=1;i<sz;i++){\n            pref[i]=max(pref[i],pref[i-1]);\n        }\n        \n        for(int i=sz-2;i>=0;i--){\n            suff[i]=max(suff[i],suff[i+1]);\n        }\n        \n        \n        int c=0;\n        \n        for(auto to:adj[v]){\n            if(to==p){\n                continue;\n            }\n            \n            int nx_offset=offset;\n            \n            if(c-1>=0){\n                nx_offset=max(nx_offset,pref[c-1]);\n            }\n            \n            if(c+1<sz){\n                nx_offset=max(nx_offset,suff[c+1]);\n            }\n            \n            if(v%2){\n                nx_offset=nx_offset+1;\n            }else{\n                nx_offset=nx_offset+2;\n            }\n            \n            dfs2(to,v,adj,max_time,first_time,sol,nx_offset);\n            c++;\n            \n            \n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        \n        vector<vector<int> > adj(n);\n        for(auto e:edges){\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        \n        vector<int> max_time(n+1,0);\n        vector<int> first_time(n+1,0);\n        \n        dfs(0,-1,adj,max_time,first_time,0);\n        \n        vector<int> sol(n);\n        \n        dfs2(0,-1,adj,max_time,first_time,sol,0);\n        \n        \n        return sol;\n    }\n};",
    "submit_ts": "1722698173",
    "subm_id": "1343172082"
}