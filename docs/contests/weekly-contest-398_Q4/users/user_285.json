{
    "username": "Fabian0",
    "submission": "class Solution {\n\n    Map<String, Integer> cache = new HashMap<>();\n\n    public int waysToReachStair(int k) { //2=4\n        //0 1 2 3 4 5 6 7 8 9 \n\n        //stair = 1, jump = 0\n            //stair = 0, jump = 0\n                //stair = 1, jump = 1\n\n\n            //stair = 1, jump = 1\n                //stair = 3, jump = 2\n                    //stair = 2, jump = 2\n\n                //stair = 0, jump = 1\n                    //stair = 2, jump = 2\n\n\n        //the max value we are intersted in is k+1\n        int res = recurse(1, 0, 0, k);\n        System.out.println(cache);\n        return res;\n    }\n\n    private int recurse(long stair, int jump, int didBackPrev, int k){\n        if(stair > k+1)return 0;\n        assert stair >= 0;\n\n        String str = stair + \" \" + jump +\" \"+ didBackPrev;\n        if(cache.containsKey(str))return cache.get(str);\n\n        int total = 0;\n        if(stair == k)total++;\n\n        if(didBackPrev != 1){\n            total += recurse(stair-1, jump, 1, k);  //-1\n        }\n\n        // if(stair == 1 && jump == 1 && didBackPrev == 0){\n        //     System.out.println(\"HELLO \" + recurse(stair + (1<<jump), jump+1, 0, k));\n        // }\n\n        total += recurse(stair + (1<<jump), jump+1, 0, k);\n\n        cache.put(str, total);\n\n        return total;\n    }\n}",
    "submit_ts": "1716087965",
    "subm_id": "1261799848"
}