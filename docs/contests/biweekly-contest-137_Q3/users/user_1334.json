{
    "username": "ShashGod",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n#include <utility>\nusing namespace std;\n\nclass Solution {\nprivate:\n\n    void extractTop3Values(const vector<int>& row, vector<pair<long long, int>>& sortedValues) {\n        sortedValues.clear();\n        for (int col = 0; col < row.size(); ++col) {\n            sortedValues.emplace_back(row[col], col);\n        }\n        sort(sortedValues.rbegin(), sortedValues.rend()); \n    }\n\n\n    long long calculateMaxForThreeColumns(const vector<int>& row, const vector<int>& cols) {\n        return row[cols[0]] + row[cols[1]] + row[cols[2]];\n    }\n\n\n    void populateBestData(const vector<vector<int>>& board,\n                          vector<vector<long long>>& bestValues,\n                          vector<vector<int>>& bestColumns) {\n        int numRows = board.size();\n        int numCols = board[0].size();\n\n        for (int row = 0; row < numRows; ++row) {\n            vector<pair<long long, int>> columnValues;\n            extractTop3Values(board[row], columnValues);\n\n            for (int i = 0; i < 3 && i < columnValues.size(); ++i) {\n                bestValues[row][i] = columnValues[i].first;\n                bestColumns[row][i] = columnValues[i].second;\n            }\n        }\n    }\n\n    long long computeMaximumRookSum(const vector<vector<long long>>& bestValues,\n                                    const vector<vector<int>>& bestColumns) {\n        int numRows = bestValues.size();\n        long long maxSum = LLONG_MIN;\n        \n        for (int row1 = 0; row1 < numRows; ++row1) {\n            for (int row2 = row1 + 1; row2 < numRows; ++row2) {\n                for (int row3 = row2 + 1; row3 < numRows; ++row3) {\n                    for (int col1 = 0; col1 < 3; ++col1) {\n                        for (int col2 = 0; col2 < 3; ++col2) {\n                            if (bestColumns[row2][col2] == bestColumns[row1][col1]) continue;\n                            for (int col3 = 0; col3 < 3; ++col3) {\n                                if (bestColumns[row3][col3] == bestColumns[row1][col1] ||\n                                    bestColumns[row3][col3] == bestColumns[row2][col2]) continue;\n\n                                long long currentSum = bestValues[row1][col1] +\n                                                       bestValues[row2][col2] +\n                                                       bestValues[row3][col3];\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int numRows = board.size();\n        int numCols = board[0].size();\n\n        vector<vector<long long>> bestValues(numRows, vector<long long>(3, LLONG_MIN));\n        vector<vector<int>> bestColumns(numRows, vector<int>(3, -1));\n\n        populateBestData(board, bestValues, bestColumns);\n\n        return computeMaximumRookSum(bestValues, bestColumns);\n    }\n};\n",
    "submit_ts": "1723910289",
    "subm_id": "1359224529"
}