{
    "username": "Proak",
    "submission": "class Solution:\n    def minFlips(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        n = len(grid)\n        m = len(grid[0])\n        ans1 = 0\n        \n        # Calculate the number of flips needed for each 2x2 subgrid\n        for i in range(n // 2):\n            for j in range(m // 2):\n                val = (grid[i][j] + grid[i][m - 1 - j] +\n                       grid[n - 1 - i][j] + grid[n - 1 - i][m - 1 - j])\n                ans1 += min(val, 4 - val)\n        \n        # Handle the middle row if the number of rows is odd\n        change = 0\n        one = 0\n        if n % 2:\n            idx = n // 2\n            for i in range(m // 2):\n                if grid[idx][i] != grid[idx][m - 1 - i]:\n                    change += 1\n                elif grid[idx][i] == 1:\n                    one += 2\n        \n        # Handle the middle column if the number of columns is odd\n        if m % 2:\n            idx = m // 2\n            for i in range(n // 2):\n                if grid[i][idx] != grid[n - 1 - i][idx]:\n                    change += 1\n                elif grid[i][idx] == 1:\n                    one += 2\n        \n        # Adjust the answer based on the number of ones\n        if one % 4 != 0:\n            if change == 0:\n                ans1 += 2\n        \n        # Handle the center cell if both dimensions are odd\n        if n % 2 and m % 2:\n            ans1 += grid[n // 2][m // 2]\n\n        return ans1 + change\n",
    "submit_ts": "1722698560",
    "subm_id": "1343184590"
}