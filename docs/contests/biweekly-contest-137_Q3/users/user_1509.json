{
    "username": "Shenyu Tao",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n\n        // Step 1: Priority Queue for each row to store top 3 (value, column) pairs\n        List<long[]>[] rowCandidates = new ArrayList[m];\n        for (int i = 0; i < m; i++) {\n            rowCandidates[i] = new ArrayList<>();\n            PriorityQueue<long[]> pq = new PriorityQueue<>(Comparator.comparingLong(a -> -a[0]));\n            for (int j = 0; j < n; j++) {\n                pq.offer(new long[]{board[i][j], j});\n            }\n            // Store top 3 candidates for each row\n            for (int k = 0; k < 3 && !pq.isEmpty(); k++) {\n                rowCandidates[i].add(pq.poll());\n            }\n        }\n\n        long maxSum = Long.MIN_VALUE;\n\n        // Step 2: Generate all combinations of placing rooks in 3 rows\n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; j < m; j++) {\n                for (int k = j + 1; k < m; k++) {\n                    // Explore all permutations of columns selected from the 3 rows\n                    maxSum = Math.max(maxSum, getMaxSumForThreeRows(rowCandidates[i], rowCandidates[j], rowCandidates[k]));\n                }\n            }\n        }\n\n        return maxSum;\n    }\n\n    private long getMaxSumForThreeRows(List<long[]> row1, List<long[]> row2, List<long[]> row3) {\n        long maxSum = Long.MIN_VALUE;\n\n        // Try all permutations of the top 3 candidates in each row\n        for (long[] c1 : row1) {\n            for (long[] c2 : row2) {\n                if (c2[1] == c1[1]) continue; // skip if same column as c1\n                for (long[] c3 : row3) {\n                    if (c3[1] == c1[1] || c3[1] == c2[1]) continue; // skip if same column as c1 or c2\n                    long sum = c1[0] + c2[0] + c3[0];\n                    maxSum = Math.max(maxSum, sum);\n                }\n            }\n        }\n\n        return maxSum;\n    }\n}\n",
    "submit_ts": "1723909503",
    "subm_id": "1359194987"
}