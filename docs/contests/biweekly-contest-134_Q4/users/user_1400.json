{
    "username": "sleepy-neumannc4b",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n//        \u4f7f\u7528temp\u5728\u6570\u636e\u91cf\u8f83\u5927\u7684\u65f6\u5019\u4f1a\u8d85\u65f6 \u6211\u4eec\u53ef\u4ee5\u7528map\u5b58\u50a8\u6240\u6709\u7684\u6570\u636e\u548c\u5f53\u524d\u6570\u636e\u7684\u4e2a\u6570\n        HashMap<Integer, Integer> map = new HashMap<>();\n        long ans = 0;\n        for (int i = 0; i < n; i++) {\n            if(nums[i] < k) {\n                map = new HashMap<>();\n                continue;\n            }\n            // \u5faa\u73afmap\u7684keys \u56e0\u4e3a\u4f1a\u64cd\u4f5cmap \u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u5907\u4efd\n            HashSet<Integer> set = new HashSet<>(map.keySet());\n            HashMap<Integer, Integer> tempMap = new HashMap<>();\n            for(Integer key: set) {\n                Integer count = map.get(key);\n                map.remove(key);\n                key &= nums[i];\n                if(key == k) {\n                    ans += count;\n                }\n                if(key >= k) {\n                    tempMap.merge(key, count, Integer::sum);\n                }\n            }\n            // map\u5b58\u50a8\u4e00\u4e2a\u5f53\u524d\u6570\u636e\n            tempMap.merge(nums[i], 1, Integer::sum);\n            if(nums[i] == k) ans++;\n            map = tempMap;\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720280486",
    "subm_id": "544572142"
}