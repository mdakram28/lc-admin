{
    "username": "Superultra",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nstruct reroot{\n    int n, opt;\n    vector<int> dpIn, dpOut;\n    vector<vector<int>> adj;\n    int ans = 0, rt;\n    \n    void dfsIn(int cur, int p){\n        for (int to : adj[cur]){\n            if (to == p)\n                continue;\n            dfsIn(to, cur);\n            dpIn[cur] = max(dpIn[cur], dpIn[to] + 1);\n        }\n    }\n    void dfsOut(int cur, int p){\n        int mx = -1e9, smx = -1e9;\n\n        for (int to : adj[cur]){\n            if (to == p)\n                continue;\n            \n            int v = dpIn[to];\n\n            if (v > mx)\n                swap(v, mx);\n            if (v > smx)\n                swap(v, smx);\n        }\n        for (int to : adj[cur]){\n            if (to == p)\n                continue;\n            \n            // cout << n <<\": \" << dpIn[to] << \" \" << mx << \" \" << smx << endl;\n            \n            dpOut[to] = max({(dpOut[cur] + 1), (dpIn[to] == mx ? smx : mx) + 2});\n            dfsOut(to, cur);\n        }\n    }\n    \n    int dfs(int cur, int p = -1, int dep = 0){\n        int x = dep, y = dep;\n        for (int nxt : adj[cur]) if (nxt != p){\n            int tmp = dfs(nxt, cur, dep + 1);\n            if (tmp > x) swap(x, tmp);\n            if (tmp > y) swap(y, tmp);\n        }\n        ans = max(ans, x + y - dep * 2);\n        return x;\n    }\n    \n    void init(vector<vector<int>> E){\n        n = E.size() + 1;\n        dpIn.assign(n, 0);\n        dpOut.assign(n, 0);\n        opt = 1e9;\n        \n        adj.resize(n);\n        \n        for (auto V : E){\n            int a = V[0];\n            int b = V[1];\n            adj[a].push_back(b);\n            adj[b].push_back(a);\n        }\n        dfsIn(0, -1);\n        dfsOut(0, -1);\n\n        for (int i = 0; i < n; i++)\n            opt = min(opt, max(dpIn[i], dpOut[i]));\n        \n        ans = 0;\n        dfs(0);\n    }\n};\n\nclass Solution {\npublic:\n    int n, m;\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& E1, vector<vector<int>>& E2) {\n        n = E1.size() + 1;\n        m = E2.size() + 1;\n        reroot t1, t2;\n        t1.init(E1);\n        t2.init(E2);\n        \n        int ans = 1e9;\n        \n        // Connect to node i        \n        for (int i = 0; i < n; i++){\n            // cout << i << \": \" << \n\n            ans = min(ans, t2.opt + 1 + max(t1.dpIn[i], t1.dpOut[i]));\n        }\n        ans = max(ans, t2.ans);\n        ans = max(ans, t1.ans);\n        \n        return ans;\n    }\n};",
    "submit_ts": "1719716308",
    "subm_id": "1304360799"
}