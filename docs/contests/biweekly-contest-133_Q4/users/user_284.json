{
    "username": "4gTseg8aJs",
    "submission": "class Solution {\nprivate:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> inversionRequirements;\n\n        // Map requirements to a more descriptive map\n        for (auto& req : requirements) {\n            int endIndex = req[0] + 1;  // Convert to 1-based index\n            int inversionCount = req[1];\n            inversionRequirements[endIndex] = inversionCount;\n        }\n\n        // Initialize a 2D array to store permutation counts with specific inversion counts\n        vector<vector<long long>> permutationCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permutationCounts[0][0] = 1;\n\n        // Dynamic programming to fill permutationCounts array\n        for (int length = 1; length <= n; length++) {\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                for (int newElementPosition = 0; newElementPosition < length; newElementPosition++) {\n                    int previousInversions = currentInversions - newElementPosition;\n                    if (previousInversions >= 0) {\n                        permutationCounts[length][currentInversions] = (permutationCounts[length][currentInversions] + permutationCounts[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n            // Apply specific inversion requirement if exists\n            if (inversionRequirements.count(length)) {\n                int requiredInversions = inversionRequirements[length];\n                for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                    if (currentInversions != requiredInversions) {\n                        permutationCounts[length][currentInversions] = 0;\n                    }\n                }\n            }\n        }\n\n        // Calculate the result based on permutationCounts[n]\n        long long totalPermutationsWithRequiredInversions = 0;\n        for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n            totalPermutationsWithRequiredInversions = (totalPermutationsWithRequiredInversions + permutationCounts[n][currentInversions]) % MOD;\n        }\n          string hellokitty=\"abcd\";\n        int bablu=1;\n        return static_cast<int>(totalPermutationsWithRequiredInversions);\n    }\n};",
    "submit_ts": "1719070050",
    "subm_id": "1296813208"
}