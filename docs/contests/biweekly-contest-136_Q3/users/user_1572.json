{
    "username": "aniket_d",
    "submission": "class Solution {\npublic:\n    // count flips required for the center cell if grid dimensions are odd\n    int countCenterFlips(const vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int flips = 0;\n        \n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (matrix[rows / 2][cols / 2] == 1) {\n                flips += 1;\n            }\n        }\n        return flips;\n    }\n\n    // calculate the number of flips required for odd rows or columns\n    vector<int> countEdgeFlips(const vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        vector<int> flipCount(3, 0);\n\n        if (rows % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int sum = matrix[rows / 2][left] + matrix[rows / 2][right];\n                flipCount[sum] += 1;\n                left += 1;\n                right -= 1;\n            }\n        }\n\n        if (cols % 2 == 1) {\n            int top = 0, bottom = rows - 1;\n            while (top < bottom) {\n                int sum = matrix[top][cols / 2] + matrix[bottom][cols / 2];\n                flipCount[sum] += 1;\n                top += 1;\n                bottom -= 1;\n            }\n        }\n\n        return flipCount;\n    }\n\n    // determine additional flips needed for all 2x2 submatrices\n    int calculateSubmatrixFlips(const vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int flips = 0;\n\n        for (int r = 0; r < rows / 2; ++r) {\n            for (int c = 0; c < cols / 2; ++c) {\n                int topLeft = matrix[r][c];\n                int topRight = matrix[r][cols - 1 - c];\n                int bottomLeft = matrix[rows - 1 - r][c];\n                int bottomRight = matrix[rows - 1 - r][cols - 1 - c];\n\n                int sum = topLeft + topRight + bottomLeft + bottomRight;\n\n                if (sum != 0 && sum != 4) {\n                    flips += min(sum, 4 - sum);\n                }\n            }\n        }\n\n        return flips;\n    }\n\n    // hoga ki nahi\n    //compute the minimum number of flips\n    int minFlips(vector<vector<int>>& matrix) {\n        int totalFlips = 0;\n\n        totalFlips += countCenterFlips(matrix);\n\n        vector<int> edgeFlips = countEdgeFlips(matrix);\n\n        if (edgeFlips[2] % 2 == 1) {\n            if (edgeFlips[1] > 0) {\n                totalFlips += edgeFlips[1];\n            } else {\n                totalFlips += 2;\n            }\n        } else {\n            totalFlips += edgeFlips[1];\n        }\n        // thus will compute the final answer\n        totalFlips += calculateSubmatrixFlips(matrix);\n        // does this will be give me correct asnwer\n        return totalFlips;\n    }\n};\n// ganpati bappa morya \n\n// if (edgeFlips[2] % 2 == 1) {\n//             if (edgeFlips[1] > 0) {\n//                 totalFlips += edgeFlips[1];\n//             } else {\n//                 totalFlips += 2;\n//             }\n//         } else {\n//             totalFlips += edgeFlips[1];\n//         }\n\n//         totalFlips += calculateSubmatrixFlips(matrix);\n\n//         return totalFlips;",
    "submit_ts": "1722699455",
    "subm_id": "1343212198"
}