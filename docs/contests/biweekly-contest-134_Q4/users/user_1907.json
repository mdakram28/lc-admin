{
    "username": "prithwirajmitra15",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start, int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    \n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n    \n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int getLeftBound(SegmentTree &segTree, int start, int k, int n)\n    {\n        int ans = -1;\n        int L = start, R = n - 1;\n        while (L <= R)\n        {\n            int mid = L + (R - L) / 2;\n            int value = segTree.query(start, mid);\n            if (value == k)\n            {\n                ans = mid;\n                R = mid - 1;\n            }\n            else if (value < k)\n                R = mid - 1;\n            else if (value > k)\n                L = mid + 1;\n            \n            // cout << L << \"\\t\" << mid << \"\\t\" << R << \"\\t->\" << value << endl;\n        }\n        \n        return ans;\n    }\n    \n    int getRightBound(SegmentTree &segTree, int start, int k, int n)\n    {\n        int ans = -1;\n        int L = start, R = n - 1;\n        while (L <= R)\n        {\n            int mid = L + (R - L) / 2;\n            int value = segTree.query(start, mid);\n            if (value == k)\n            {\n                ans = mid;\n                L = mid + 1;\n            }\n            else if (value < k)\n                R = mid - 1;\n            else if (value > k)\n                L = mid + 1;\n            \n            // cout << L << \"\\t\" << mid << \"\\t\" << R << \"\\t->\" << value << endl;\n        }\n        \n        return ans;\n    }\n    \n    long long countSubarrays(vector<int> &arr, int k)\n    {\n        long long ans = 0;\n        SegmentTree segTree(arr);\n        for (int i = 0; i < arr.size(); i++)\n        {\n            int left = getLeftBound(segTree, i, k, arr.size());\n            int right = getRightBound(segTree, i, k, arr.size());\n            \n            if (left == -1 || right == -1)\n                continue;\n            \n            ans += right - left + 1;\n            \n            // cout << left << \"\\t\" << right << endl;\n            \n            // break;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720281105",
    "subm_id": "1311813310"
}