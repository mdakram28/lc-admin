{
    "username": "Jonson0128",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.is_end = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end = True\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    @staticmethod\n    def minimumCost(target, words, costs):\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = trie.root\n            j = i\n            while j < n and target[j] in node.children:\n                node = node.children[target[j]]\n                j += 1\n                if node.is_end:\n                    dp[j] = min(dp[j], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720323718",
    "subm_id": "1312382353"
}