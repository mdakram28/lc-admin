{
    "username": "leoyu0813",
    "submission": "class Solution {\npublic:    \n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size ();\n        // 1. left button -> right top;\n        // 2. left top -> right button;\n        map <int, vector <int>> lb2rt;\n        map <int, vector <int>> lt2rb;\n        for (int i = 0; i < n; ++i)\n        {\n            const vector <int>& p = points [i];\n            lb2rt [p[0]+p[1]].push_back (i);\n            lt2rb [p[1]-p[0]].push_back (i);\n        }\n        auto lb = lb2rt.begin ();       // x + y\n        auto rt = lb2rt.rbegin ();      // x + y\n        auto lt = lt2rb.begin ();       // y - x\n        auto rb = lt2rb.rbegin ();      // y - x\n        auto initPoint = [&]()\n        {\n            lb = lb2rt.begin ();       // x + y\n            rt = lb2rt.rbegin ();      // x + y\n            lt = lt2rb.begin ();       // y - x\n            rb = lt2rb.rbegin ();      // y - x   \n        };\n        \n        auto getDiff = [&]()->int\n        {\n            return max (abs(rt->first - lb->first), abs(rb->first - lt->first)) ;\n        };\n        int ans = getDiff ();\n        auto removeIndex = [&] (int i)\n        {\n            int sub = points [i][1] - points [i][0];\n            int add = points [i][1] + points [i][0];\n            if (lt->first == sub && lt->second.size () == 1){\n                lt++;\n            }\n            if (rb->first == sub && rb->second.size () == 1){\n                rb++;\n            }\n            if (lb->first == add && lb->second.size () == 1){\n                lb++;\n            }\n            if (rt->first == add && rt->second.size () == 1){\n                rt++;\n            }\n            ans = min (ans, getDiff ());\n            initPoint ();\n        };\n        \n        if (lb->second.size () == 1)    // maybe remove;\n        {\n            int i = lb->second [0];\n            removeIndex (i);\n        }\n        \n        if (rt->second.size () == 1)    // maybe remove;\n        {\n            int i = rt->second [0];\n            removeIndex (i);\n        }\n        \n        if (lt->second.size () == 1)    // maybe remove;\n        {\n            int i = lt->second [0];\n            removeIndex (i);\n        }\n        if (rb->second.size () == 1)    // maybe remove;\n        {\n            int i = rb->second [0];\n            removeIndex (i);\n        }\n        return ans;\n    }\n};"
}