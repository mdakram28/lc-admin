{
    "username": "BattlerRein",
    "submission": "class Node {\n    int index;\n    List<Node> n;\n\n    public Node(int i) {\n        index = i;\n        n = new ArrayList<>();\n    }\n}\n\nclass Info {\n    int depth = 0;\n    int diameter = 0;\n}\n\n\nclass Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        Node tree1Node0 = buildTree(edges1);\n        Node tree2Node0 = buildTree(edges2);\n        int diameter1 = getInfo(tree1Node0, null).diameter;\n        int diameter2 = getInfo(tree2Node0, null).diameter;\n        // System.out.println(diameter1);\n        // System.out.println(diameter2);\n        return Math.max(Math.max(diameter1, diameter2), ((diameter1 + 1) / 2) + ((diameter2 + 1) / 2) + 1);\n    }\n\n\n    private Node buildTree(int[][] edges) {\n        Map<Integer, Node> nodes = new HashMap<>();\n        for (int i = 0; i <= edges.length; i++) {\n            nodes.put(i, new Node(i));\n        }\n\n        for (int[] edge : edges) {\n            int i1 = edge[0];\n            int i2 = edge[1];\n\n            nodes.get(i1).n.add(nodes.get(i2));\n            nodes.get(i2).n.add(nodes.get(i1));\n        }\n\n        return nodes.get(0);\n    }\n\n    private Info getInfo(Node currNode, Node fromNode) {\n        Info info = new Info();\n        int maxNextDepth = 0;\n        for (Node nextNode : currNode.n) {\n            if (null != fromNode && nextNode.index == fromNode.index) {\n                continue;\n            }\n            Info nextInfo = getInfo(nextNode, currNode);\n            info.diameter = Math.max(info.diameter, info.depth + nextInfo.depth + 1);\n            info.depth = Math.max(info.depth, nextInfo.depth + 1);\n            info.diameter = Math.max(info.diameter, nextInfo.diameter);\n        }\n        return info;\n    }\n}",
    "submit_ts": 1719717755.0
}