{
    "username": "cybsbbbb",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        tree = [[] for i in range(n)]\n        ins = [0] * n\n        for xi, yi in edges:\n            tree[xi].append(yi)\n            tree[yi].append(xi)\n        dist_children = [float('inf')] * n\n        dist_children = [[] for i in range(n)]\n        \n        def helper1(root, par):\n            ans = 0\n            for child in tree[root]:\n                if child == par:\n                    continue\n                child_ans = helper1(child, root) + 1 + int(child % 2 == 0)\n                heapq.heappush(dist_children[root], (-child_ans, child))\n                ans = max(ans, child_ans)\n            return ans\n        helper1(0, -1)\n        ans = [float('inf')] * n\n\n        def helper2(root, par, pre_dist):\n            if len(dist_children[root]) == 0:\n                ans[root] = pre_dist\n            elif len(dist_children[root]) == 1:\n                child_ans, child = dist_children[root][0]\n                child_ans = -child_ans\n                ans[root] = max(pre_dist, child_ans)\n                pre_dist += (1 + int(root % 2 == 0))\n                helper2(child, root, pre_dist)\n            else:\n                child_ans_first, child_first = heapq.heappop(dist_children[root])\n                child_ans_second, child_second = dist_children[root][0]\n                # print(-child_ans_first, child_first)\n                # print(-child_ans_second, child_second)\n                heapq.heappush(dist_children[root], (child_ans_first, child_first))\n                child_ans_first = -child_ans_first\n                child_ans_second = -child_ans_second\n                ans[root] = max(pre_dist, child_ans_first)\n                for child in tree[root]:\n                    if child == par:\n                        continue\n                    if child != child_first:\n                        child_ans_tmp = child_ans_first\n                        helper2(child, root, max(pre_dist, child_ans_tmp) + 1 + int(root % 2 == 0))\n                    else:\n                        child_ans_tmp = child_ans_second\n                        helper2(child, root, max(pre_dist, child_ans_second) + 1 + int(root % 2 == 0))\n        helper2(0, -1, 0)\n        return ans\n",
    "submit_ts": "1722698858",
    "subm_id": "1343194042"
}