{
    "username": "qq1239426256",
    "submission": "class Solution {\npublic:\n    using ll = long long;\n    int waysToReachStair(int k) {\n        int ans = 0;\n        map<tuple<ll, int, bool>, int> dp;\n        function<int(int, int, bool)> dfs = [&](ll pos, int jump, bool down) -> int {\n            if (pos > k + 1) return 0;\n            if (dp.count({pos, jump, down})) return dp[{pos, jump, down}];\n            int ans = 0;\n            if (pos == k) {\n                ans++;\n            }\n            ans += dfs(pos + pow(2ll, jump), jump + 1, false);\n            if (!down && pos != 0)\n                ans += dfs(pos - 1, jump, true);\n            return dp[{pos, jump, down}] = ans;\n        };\n        return dfs(1, 0, false);\n    }\n};",
    "submit_ts": "1716087956",
    "subm_id": "1261799580"
}