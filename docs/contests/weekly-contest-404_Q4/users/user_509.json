{
    "username": "nakanolab",
    "submission": "from collections import defaultdict\n\nclass Solution:\n  def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n    INF = 10**12\n    adj1 = defaultdict(list)\n    adj2 = defaultdict(list)\n    m = n = 0\n    for u, v in edges1:\n      m = max(m, u, v)\n      adj1[u].append(v)\n      adj1[v].append(u)\n    for u, v in edges2:\n      n = max(n, u, v)\n      adj2[u].append(v)\n      adj2[v].append(u)\n    \n    def dfs(adj):\n      n = len(adj)\n      dist = [INF] * n\n      dist[0] = 0\n      stack = [0]\n      while stack:\n        u = stack.pop()\n        for v in adj[u]:\n          if dist[v] < INF:\n            continue\n          dist[v] = dist[u] + 1\n          stack.append(v)\n      m = max(dist)\n      for s in range(n):\n        if dist[s] == m:\n          break\n      dist = [INF] * n\n      dist[s] = 0\n      stack = [s]\n      while stack:\n        u = stack.pop()\n        for v in adj[u]:\n          if dist[v] < INF:\n            continue\n          dist[v] = dist[u] + 1\n          stack.append(v)\n      return dist\n    \n    def center(dist):\n      n = len(dist)\n      m = max(dist)\n      if m % 2 == 0:\n        ds = [m // 2]\n      else:\n        ds = [m // 2, m // 2 + 1]\n      return m, [u for u in range(n) if dist[u] in ds]\n    \n    if m == 0 and n == 0:\n      return 1\n    elif m == 0:\n      dist2 = dfs(adj2)\n      m2, cs2 = center(dist2)\n      ans = m2\n      for c2 in cs2:\n        ans = max(ans, dist2[c2] + 1, m2 - dist2[c2] + 1)\n      return ans\n    elif n == 0:\n      dist1 = dfs(adj1)\n      m1, cs1 = center(dist1)\n      ans = m1\n      for c1 in cs1:\n        ans = max(ans, dist1[c1] + 1, m1 - dist1[c1] + 1)\n      return ans\n    \n    dist1 = dfs(adj1)\n    dist2 = dfs(adj2)\n    \n    m1, cs1 = center(dist1)\n    m2, cs2 = center(dist2)\n    # print(m1, cs1, dist1)\n    # print(m2, cs2, dist2)\n    ans = INF\n    for c1 in cs1:\n      for c2 in cs2:\n        ans = min(ans, max(m1, m2, dist1[c1] + 1 + dist2[c2],\n                                   dist1[c1] + 1 + m2 - dist2[c2],\n                                   m1 - dist1[c1] + 1 + dist2[c2],\n                                   m1 - dist1[c1] + 1 + m2 - dist2[c2]))\n    return ans",
    "submit_ts": 1719717477.0
}