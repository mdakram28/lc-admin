{
    "username": "_otto",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word_end = False\n        self.cost = float('inf')\n\ndef build(words, costs):\n    root = TrieNode()\n    for word, cost in zip(words, costs):\n        node = root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.word_end = True\n        node.cost = min(node.cost, cost)\n    return root\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = build(words, costs)\n        n = len(target)\n\n        dis = defaultdict(lambda: float('inf'))\n        dis[0] = 0\n        hp = [(0, 0)]\n\n        while hp:\n            current_cost, pos = heappop(hp)\n            if pos == n:\n                return current_cost\n            if current_cost > dis[pos]:\n                continue\n            node = trie\n            for i in range(pos, n):\n                if target[i] not in node.children:\n                    break\n                node = node.children[target[i]]\n                if node.word_end:\n                    new_cost = current_cost + node.cost\n                    if new_cost < dis[i + 1]:\n                        dis[i + 1] = new_cost\n                        heappush(hp, (new_cost, i + 1))\n\n        return -1",
    "submit_ts": "1720321057",
    "subm_id": "1312312263"
}