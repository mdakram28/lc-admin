{
    "username": "d_ananta_",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        vector<int> cnt(2, 0);\n        vector<long long> v(n, 0), pref(n, 0);\n        vector<long long> ans;\n        int l, r, mid, tmp;\n        for(r = 0, l = 0; r < n; r++) {\n            cnt[s[r] - '0']++;\n            while(cnt[0] > k && cnt[1] > k) {\n                cnt[s[l++] - '0']--;\n            }\n            v[r] = l;\n            pref[r] = (r-1 >= 0 ? pref[r-1] : 0) + (r-l+1);\n        }\n        for(const auto &i: queries) {\n            l = i[0], r = i[1], tmp = i[1] + 1;\n            while(l <= r) {\n                mid = (l+r)/2;\n                if(i[0] <= v[mid]) {\n                    tmp = mid;\n                    r = mid - 1;\n                } else l = mid + 1;\n            }\n            ans.push_back(pref[i[1]] - (tmp-1 >= 0 ? pref[tmp-1] : 0));\n            tmp = tmp - i[0];\n            ans.back() += (long long)tmp * (tmp+1) / 2;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723949739",
    "subm_id": "1359727618"
}