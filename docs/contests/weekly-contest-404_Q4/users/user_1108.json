{
    "username": "VIVEK_887",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length;\n        int m = edges2.length;\n        ArrayList<Integer>[] g1 = new ArrayList[n+1];\n        for(int i=0;i<=n;i++) g1[i] = new ArrayList<>();\n        for(int[] e : edges1) {\n            g1[e[0]].add(e[1]);\n            g1[e[1]].add(e[0]);\n        }\n        \n        \n        ArrayList<Integer>[] g2 = new ArrayList[m+1];\n        for(int i=0;i<=m;i++) g2[i] = new ArrayList<>();\n        for(int[] e : edges2) {\n            g2[e[0]].add(e[1]);\n            g2[e[1]].add(e[0]);\n        }\n        \n        int l1 = bfs(g1,n),l2=bfs(g2,m);\n        \n        \n        \n        int f1 = dfs(g1,l1,-1);\n        int f2 = dfs(g2,l2,-1);\n        int ans=(f1/2)+(f2/2)+1;\n//         if(f1==0 || f2==0) {\n            \n//         } else {\n//             ans++;\n//         }\n        System.out.println(f1+\" \"+f2);\n        return Math.max(Math.max(f1-1,f2-1),ans);\n        \n        \n        \n    }\n    \n    public int dfs(ArrayList<Integer>[] g,int s,int p) {\n        if(s==-1) return 0;\n        int ans=1;\n        for(int nbr : g[s]) {\n            if(p!=nbr) {\n                ans=Math.max(ans,dfs(g,nbr,s)+1);\n            }\n        }\n        return ans;\n    }\n    \n    public int bfs(ArrayList<Integer>[] g,int s) {\n        if(s==0) return -1;\n        byte[] visit = new byte[g.length];\n        ArrayDeque<Integer> dq = new ArrayDeque<>();\n        dq.add(0);\n        int ans=-1;\n        while(dq.size()>0) {\n            int n = dq.pop();\n            visit[n]=1;\n            ans=n;\n            for(int nbr : g[n]) {\n                if(visit[nbr]==0) {\n                    dq.add(nbr);\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1719719256",
    "subm_id": "1304437523"
}