{
    "username": "2hQXFH1gD5",
    "submission": "class Solution {\n    class TrieNode {\n        TrieNode[] children;\n        int index;\n\n        TrieNode() {\n            children = new TrieNode[26];\n            index = -1;\n        }\n    }\n\n    class Trie {\n        TrieNode root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(String word, int index) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                int idx = c - 'a';\n                if (node.children[idx] == null) {\n                    node.children[idx] = new TrieNode();\n                }\n                node = node.children[idx];\n            }\n            node.index = index;\n        }\n\n        List<Integer> search(String target, int start) {\n            TrieNode node = root;\n            List<Integer> result = new ArrayList<>();\n            for (int i = start; i < target.length(); ++i) {\n                int idx = target.charAt(i) - 'a';\n                if (node.children[idx] == null) break;\n                node = node.children[idx];\n                if (node.index != -1) {\n                    result.add(node.index);\n                }\n            }\n            return result;\n        }\n    }\n\n    public int minCostToFormTarget(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; ++i) {\n            trie.insert(words[i], i);\n        }\n\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            List<Integer> indices = trie.search(target, i);\n            for (int index : indices) {\n                int len = words[index].length();\n                if (i + len <= n) {\n                    dp[i + len] = Math.min(dp[i + len], dp[i] + costs[index]);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Map<String, Integer> mp = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            mp.put(words[i], Math.min(mp.getOrDefault(words[i], Integer.MAX_VALUE), costs[i]));\n        }\n\n        List<String> uniqueWords = new ArrayList<>(mp.keySet());\n        List<Integer> uniqueCosts = new ArrayList<>();\n        for (String word : uniqueWords) {\n            uniqueCosts.add(mp.get(word));\n        }\n\n        String[] uniqueWordsArray = uniqueWords.toArray(new String[0]);\n        int[] uniqueCostsArray = uniqueCosts.stream().mapToInt(i -> i).toArray();\n\n        return minCostToFormTarget(target, uniqueWordsArray, uniqueCostsArray);\n    }\n\n    public static void main(String[] args) {\n        Solution solution = new Solution();\n        String target = \"example\";\n        String[] words = {\"ex\", \"am\", \"ple\", \"exam\", \"ple\"};\n        int[] costs = {1, 2, 3, 4, 5};\n\n        int result = solution.minimumCost(target, words, costs);\n        System.out.println(result);  // Output the result\n    }\n}",
    "submit_ts": "1720322373",
    "subm_id": "1312348150"
}