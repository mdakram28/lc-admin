{
    "username": "sobols",
    "submission": "constexpr int INF = 1000000;\n\nclass TTree {\npublic:\n    TTree(int n)\n        : T_(n * 4)\n        , N_{n}\n    {\n    }\n\n    int GetMax(int l, int r) const {\n        return GetMax(1, 0, N_-1, l, r);\n    }\n    int Get(int idx) const {\n        return Get(1, 0, N_-1, idx);\n    }\n    void Set(int idx, int newVal) {\n        Update(1, 0, N_-1, idx, newVal);\n    }\nprivate:\n    int GetMax(int v, int tl, int tr, int l, int r) const {\n        if (l > r) {\n            return 0;\n        }\n        if (l == tl && r == tr) {\n            return T_[v];\n        }\n        int tm = (tl + tr) / 2;\n        return max(\n            GetMax(v*2, tl, tm, l, min(r, tm)),\n            GetMax(v*2+1, tm+1, tr, max(l, tm+1), r)\n        );\n    }\n    \n    int Get(int v, int tl, int tr, int idx) const {\n        if (idx == tl && idx == tr) {\n            return T_[v];\n        }\n        int tm = (tl + tr) / 2;\n        if (idx <= tm) {\n            return Get(v*2, tl, tm, idx);\n        } else {\n            return Get(v*2+1, tm+1, tr, idx);\n        }\n    }\n    \n    void Update(int v, int tl, int tr, int pos, int newVal) {\n        if (tl == tr) {\n            T_[v] = newVal;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                Update(v*2, tl, tm, pos, newVal);\n            else\n                Update(v*2+1, tm+1, tr, pos, newVal);\n            T_[v] = max(T_[v*2], T_[v*2+1]);\n        }\n    }\n\nprivate:\n    vector<int> T_;\n    int N_;\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int maxX = 0;\n        for (const auto& q : queries) {\n            int x = q[1];\n            maxX = max(maxX, x);\n        }\n        \n        set<int> obst = {0};\n        TTree t{maxX + 1};\n        t.Set(0, INF);\n\n        vector<bool> ans;\n        \n        for (const auto& q : queries) {\n            int type = q[0];\n            int x = q[1];\n            \n            auto it = prev(obst.lower_bound(x));\n            int lastObst = *it;\n            \n            if (type == 1) {\n                assert(lastObst != x);\n                int prv = t.Get(lastObst);\n                t.Set(lastObst, x - lastObst);\n                t.Set(x, prv - (x - lastObst));\n                obst.insert(x);\n                \n            } else if (type == 2) {\n                int sz = q[2];\n                int best = x - lastObst;\n                if (lastObst > 0) {\n                    best = max(best, t.GetMax(0, lastObst - 1));\n                }\n                ans.push_back(best >= sz);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716650069.0
}