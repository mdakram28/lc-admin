{
    "username": "sshang",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        \n        graph1 = defaultdict(set)\n        for u, v in edges1:\n            graph1[u].add(v)\n            graph1[v].add(u)\n            \n        graph2 = defaultdict(set)\n        for u, v in edges2:\n            graph2[u].add(v)\n            graph2[v].add(u)\n            \n        def dfs(u, parent, graph):\n            \n            hs, ds = [], []\n            for v in graph[u]:\n                if v != parent:\n                    h, d = dfs(v, u, graph)\n                    bisect.insort(hs, h)\n                    bisect.insort(ds, d)\n                    \n            if len(hs) == 0:\n                return 1, 1\n            if len(hs) == 1:\n                return hs[-1] + 1, max(ds[-1], hs[-1] + 1)\n            else:\n                return hs[-1] + 1, max(ds[-1], hs[-1] + hs[-2] + 1)\n            \n        _, d1 = dfs(0, -1, graph1)\n        _, d2 = dfs(0, -1, graph2)\n        \n        d1 -= 1\n        d2 -= 1\n        # print(d1, d2)\n        \n        return max(math.ceil(d1 / 2) + math.ceil(d2 / 2) + 1, d1, d2)",
    "submit_ts": "1719719123",
    "subm_id": "1304434285"
}