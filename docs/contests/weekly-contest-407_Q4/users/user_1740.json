{
    "username": "DKPROCKS",
    "submission": "class Solution {\npublic:\nint gcd(int a, int b) {\n        int c;\n        while (a != 0) {\n            c = a; \n            a = b % a; \n            b = c;\n        }\n        return b;\n    }\n    long long minimumOperations(vector<int>& nums, vector<int>& tar) {\n        int n = nums.size();\n        vector<int> diff(n, 0);\n        computeDiffs(nums, tar, diff);\n        return calcOps(diff);\n    }\n\nprivate:\n    void computeDiffs(const vector<int>& nums, const vector<int>& tar, vector<int>& diff) {\n        // Compute the differences between tar and nums\n        for (int i = 0; i < nums.size(); i++) {\n            diff[i] = tar[i] - nums[i];\n        }\n    }\n\n    long long calcOps(const vector<int>& diff) {\n        // Calculate the minimum number of operations\n        int n = diff.size();\n        int pos = 0;\n        long long maxDiff = 0, totalOps = 0;\n        totalOps = abs(diff[0]);\n        maxDiff = totalOps;\n\n        if (diff[0] >= 0)\n            pos = 1;\n        for (int i = 1; i < n; i++) {\n            if (diff[i] < 0 && pos == 1) {\n                totalOps += abs(diff[i]);\n                maxDiff = abs(diff[i]);\n                pos = 0;\n                continue;\n            }\n            if (diff[i] >= 0 && pos == 0) {\n                totalOps += abs(diff[i]);\n                maxDiff = abs(diff[i]);\n                pos = 1;\n                continue;\n            }\n            if (maxDiff >= abs(diff[i])) {\n                maxDiff = abs(diff[i]);\n                continue;\n            } else {\n                totalOps += abs(diff[i]) - maxDiff;\n                maxDiff = abs(diff[i]);\n            }\n        }\n        return totalOps;\n    }\n};\n",
    "submit_ts": "1721532949",
    "subm_id": "1327997844"
}