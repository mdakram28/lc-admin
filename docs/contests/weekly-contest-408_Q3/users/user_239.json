{
    "username": "drexdelta",
    "submission": "class Solution {\npublic:\n    int getCount(int zeroes, int l , int m , int r) {\n        long long req = zeroes * zeroes;\n        if(req > 1e5) return 0;\n        int ret = 0;\n        for(int i = 0 ; i <= l ; i++) {\n            // assume, we are taking i 1's from the left\n            int need = max(0LL,req - m - i);\n            ret += max(0LL,r-need+1LL);\n        }\n        // cout << \" zeroes \" << zeroes << \" ones on left \" << l << \" oens on right \" << r << \" ones in middle \" << m << \" returning ret \" << ret << endl;\n        return ret;\n    }\n    int numberOfSubstrings(string s) {\n        vector<int> z,o;\n        int n = s.size();\n        for(int i = 0 ; i < s.size() ; i++) {\n            if(s[i] == '1')o.push_back(i);\n            else z.push_back(i);\n        }\n        // cout << \" z.size() \" << z.size() << \" o.size \" << o.size() << endl;\n        if(z.size() == 0) {\n            return (((long long)n) * (n+1LL)) / 2;\n        }\n        long long ans = 0 ;\n        for(int i = 0 ; i < z.size() ; i++) {\n            if(i==0) {\n                ans += (z[i] * (z[i]+1)) / 2;\n                if(i == (int)z.size() - 1) {\n                    int diff = n - z[i] - 1;\n                    ans += (diff * (diff+1)) / 2;\n                }\n                continue;\n            }\n            int diff = z[i] - z[i-1] - 1;\n            ans += (diff * (diff+1)) / 2;\n            if(i == (int)z.size() - 1) {\n                int diff = n - z[i] - 1;\n                ans += (diff * (diff+1)) / 2;\n            }\n        }\n        // cout << \" first for loop done \" << endl;\n        // cout << \" ans after first loop \" << ans << endl;\n        for(int i = 0 ; i < z.size() ; i++) {\n            int OnesOnLeft, OnesInBetween, OnesOnRight;\n            \n            if(i == 0) OnesOnLeft = z[i];\n            else OnesOnLeft = z[i] - z[i-1] - 1;\n            \n            for(int j = 1 ; j+i-1 < z.size() ; j++) {\n                if(j*j > n-j) break;\n                if(j==1)OnesInBetween = 0;\n                else {\n                    OnesInBetween = (z[i+j-1] - z[i] + 1) - j;\n                }\n                if(i+j-1 == (int)z.size()-1) {\n                    OnesOnRight = n - z[i+j-1] - 1;\n                } else {\n                    OnesOnRight = z[i+j] - z[i+j-1] - 1;\n                }\n                ans += getCount(j,OnesOnLeft, OnesInBetween, OnesOnRight);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722137647",
    "subm_id": "1335769756"
}