{
    "username": "himanshu_138",
    "submission": "#include <algorithm>\n#include <iostream>\n#include <vector>\n#include <map>\n#include <set>\n#include <unordered_map>\n#include <unordered_set>\n#include <queue>\n#include <stack>\n#include <deque>\n#include <cmath>\n#include <cstring>\n#include <climits>\n#include <cassert>\n#include <numeric>\n#include <bitset>\n#include <iomanip>\n#include <iterator>\n#include <functional>\n#include <utility>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long\n#define pii pair<int, int>\n#define vi vector<int>\n#define vll vector<long long>\n#define vpii vector<pair<int, int>>\n#define pqmin priority_queue<int, vector<int>, greater<int>>\n#define pqmax priority_queue<int>\nconst int INF = 1e9;\nconst long long LINF = 1e18;\nconst double EPS = 1e-9;\nconst int MOD = 1e9 + 7;\n#define rep(i, a, b) for (int i = a; i < b; ++i)\n#define per(i, a, b) for (int i = a; i > b; --i)\n#define repk(i, a, b, k) for (int i = a; i < b; i += k)\n#define perk(i, a, b, k) for (int i = a; i > b; i -= k)\n#define repl(i, a, b) for (ll i = a; i < b; ++i)\n#define perl(i, a, b) for (ll i = a; i > b; --i)\n#define repkl(i, a, b, k) for (ll i = a; i < b; i += k)\n#define perkl(i, a, b, k) for (ll i = a; i > b; i -= k)\n#define all(v) (v).begin(), (v).end()\n#define rall(v) (v).rbegin(), (v).rend()\n#define rvi(v) rep(i, 0, v.size()) cin >> v[i]\n#define rvl(v) repl(i, 0, v.size()) cin >> v[i]\n#define debug(x) cout << x << '\\n'\n#define debug_vec(v) do { for(auto x : v) cout << x << ' '; cout << '\\n'; } while(0)\n#define debug_pair(p) cout << p.F << \" \" << p.S << \"\\n\"\n#define pb push_back\n#define mp make_pair\n#define F first\n#define S second\n#define lcm(a, b) ((a) / __gcd(a, b) * (b))\n#define sq(x) ((x) * (x))\n#define mini(a, b) ((a) < (b) ? (a) : (b))\n#define maxi(a, b) ((a) > (b) ? (a) : (b))\n#define max3(a, b, c) max(max(a, b), c)\n#define min3(a, b, c) min(min(a, b), c)\n#define bitcount(x) __builtin_popcount(x)\n#define bitcountll(x) __builtin_popcountll(x)\n#define bitscan(x) __builtin_ctz(x)\n#define bitscanll(x) __builtin_ctzll(x)\n#define bitscanrev(x) __builtin_clz(x)\n#define bitscanrevll(x) __builtin_clzll(x)\n#define sum(v) accumulate(all(v), 0LL)\n#define average(v) (sum(v) / v.size())\n#define range(i, n) iota(i.begin(), i.end(), n)\n#define FIB(i) static_cast<int>((pow(1 + sqrt(5), (i)) - pow(1 - sqrt(5), (i))) / (pow(2, (i)) * sqrt(5)))\nvoid setup(){\n    ios::sync_with_stdio(0); cin.tie(0); cout.tie(0);\n    #ifndef ONLINE_JUDGE \n    freopen(\"input.txt\", \"r\", stdin);freopen(\"output.txt\", \"w\", stdout);\n    #endif\n}\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = 0, possible = 0, count = 0;\n\n        auto calculate_ones = [](const vi& elems) {\n            return accumulate(all(elems), 0);\n        };\n\n        auto process_subgrid = [&](int i, int j) {\n            vi elements = {grid[i][j],grid[n - i - 1][j],grid[i][m - j - 1],grid[n - i - 1][m - j - 1]};\n            int ones = calculate_ones(elements);\n            ans += mini(ones, 4 - ones);\n        };\n\n        auto handle_middle_row = [&]() {\n            if (n % 2 == 0) return;\n            rep(j, 0, m / 2) {\n                if (grid[n / 2][j] != grid[n / 2][m - j - 1]) {\n                    ++ans;\n                    ++possible;\n                } else if (grid[n / 2][j] == 1) {\n                    ++count;\n                }\n            }\n        };\n\n        auto handle_middle_column = [&]() {\n            if (m % 2 == 0) return;\n            rep(i, 0, n / 2) {\n                if (grid[i][m / 2] != grid[n - i - 1][m / 2]) {\n                    ++ans;\n                    ++possible;\n                } else if (grid[i][m / 2] == 1) {\n                    ++count;\n                }\n            }\n        };\n\n        auto handle_central_element = [&]() {\n            if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n                ++ans;\n            }\n        };\n\n        auto check_possible_conditions = [&]() {\n            if (possible == 0 && count % 2 != 0) {\n                ans += 2;\n            }\n        };\n\n        auto process_grid = [&]() {\n            rep(i, 0, n / 2) {\n                rep(j, 0, m / 2) {\n                    process_subgrid(i, j);\n                }\n            }\n        };\n\n        process_grid();\n        handle_middle_row();\n        handle_middle_column();\n        handle_central_element();\n        check_possible_conditions();\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722700321",
    "subm_id": "1343238323"
}