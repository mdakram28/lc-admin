{
    "username": "asommajoli",
    "submission": "class Solution {\npublic:\n    pair<pair<int,int>, pair<int,int>> find_cord(vector<pair<int, int> >& A, int N)\n    {\n        // Vectors to store maximum and\n        // minimum of all the four forms\n        vector<pair<int,int>> V(N), V1(N);\n\n        for (int i = 0; i < N; i++) {\n            V[i] = make_pair(A[i].first + A[i].second, i);\n            V1[i] = make_pair(A[i].first - A[i].second, i);\n        }\n\n        // Sorting both the vectors\n        sort(V.begin(), V.end());\n        sort(V1.begin(), V1.end());\n        \n        return make_pair(make_pair(V[N-1].second, V[0].second), make_pair(V1[N-1].second, V1[0].second));\n        \n    }\n    \n    int MaxDist(vector<pair<int, int> >& A, int N, int ind)\n    {\n        // Vectors to store maximum and\n        // minimum of all the four forms\n        vector<int> V, V1;\n\n        for (int i = 0; i < N; i++) {\n            if(i==ind){continue;}\n            V.push_back(A[i].first + A[i].second);\n            V1.push_back(A[i].first - A[i].second);\n        }\n\n        // Sorting both the vectors\n        sort(V.begin(), V.end());\n        sort(V1.begin(), V1.end());\n\n        int maximum\n            = max(V.back() - V.front(), V1.back() - V1.front());\n\n        return maximum;\n    }\n    \n    \n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pair<int,int>>cp(points.size());\n        for(int i=0; i<points.size(); i++){\n            cp[i].first = points[i][0];\n            cp[i].second = points[i][1];\n        }\n        \n        pair<pair<int,int>, pair<int,int>>pans = find_cord(cp, cp.size());\n        int ans = INT_MAX;\n        ans = min(ans, MaxDist(cp, cp.size(), pans.first.first));\n        ans = min(ans, MaxDist(cp, cp.size(), pans.first.second));\n        ans = min(ans, MaxDist(cp, cp.size(), pans.second.first));\n        ans = min(ans, MaxDist(cp, cp.size(), pans.second.second));\n        return ans;\n        \n    }\n};"
}