{
    "username": "fpeterfalvi",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        List<int[]> elements = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                elements.add(new int[]{board[i][j], i, j});\n            }\n        }\n        elements.sort(Comparator.comparingInt((int[] arr) -> arr[0]).reversed());\n        List<int[]> potentials = new ArrayList<>();\n        for (int i = 0; i < m; i++) {\n            List<int[]> colAndIndex = new ArrayList<>();\n            for (int j = 0; j < n; j++) {\n                colAndIndex.add(new int[]{board[i][j], j});\n            }\n            colAndIndex.sort(Comparator.comparingInt(arr -> arr[0]));\n            for (int k = 0; k < 3; k++) {\n                potentials.add(new int[]{i, colAndIndex.get(n - 1 - k)[1]});\n            }\n        }\n        for (int j = 0; j < n; j++) {\n            List<int[]> rowAndIndex = new ArrayList<>();\n            for (int i = 0; i < m; i++) {\n                rowAndIndex.add(new int[]{board[i][j], i});\n            }\n            rowAndIndex.sort(Comparator.comparingInt(arr -> arr[0]));\n            for (int k = 0; k < 3; k++) {\n                potentials.add(new int[]{rowAndIndex.get(m - 1 - k)[1], j});\n            }\n        }\n        //potentials.forEach(p -> System.out.println(Arrays.toString(p)));\n        long result = Long.MIN_VALUE;\n        for (int[] potential1 : potentials) {\n            for (int[] potential2 : potentials) {\n                if (potential2[0] != potential1[0] && potential2[1] != potential1[1]) {\n                    int k = 0;\n                    while (elements.get(k)[1] == potential1[0] || elements.get(k)[1] == potential2[0]\n                    || elements.get(k)[2] == potential1[1] || elements.get(k)[2] == potential2[1]) {\n                        k++;\n                    }\n                    long sum = elements.get(k)[0];\n                    sum += board[potential1[0]][potential1[1]];\n                    sum += board[potential2[0]][potential2[1]];\n                    result = Math.max(result, sum);\n                }\n            }\n        }\n        return result;\n    }\n}",
    "submit_ts": "1723908930",
    "subm_id": "1359172853"
}