{
    "username": "young_sean",
    "submission": "from sortedcontainers import SortedList\nmi = lambda x, y: x if x < y else y\nma = lambda x, y: x if x > y else y\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.n = n\n        self.bit = [0] * n\n\n    def sum(self, r):\n        res = 0\n        while r >= 0:\n            res += self.bit[r]\n            r = (r & (r + 1)) - 1\n        return res\n\n    def rsum(self, l, r):\n        return self.sum(r) - self.sum(l - 1)\n\n    def add(self, idx, delta):\n        while idx < self.n:\n            self.bit[idx] += delta\n            idx = idx | (idx + 1)\n\nclass Solution:\n    def numberOfAlternatingGroups(self, color: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(color)\n        tmp = [color[i % n] ^ color[(i + 1) % n] for i in range(n - 1)]\n        stl = SortedList()\n        \n        fen_cnt = FenwickTree(n)\n        fen_sum = FenwickTree(n)\n        \n        l = -1\n        for i in range(n - 1):\n            if tmp[i]:\n                if l == -1:\n                    l = i\n            else:\n                if l != -1:\n                    stl.add((l, i - 1))\n                    x = i - l\n                    fen_cnt.add(x, 1)\n                    fen_sum.add(x, x)\n                l = -1\n        if l != -1:\n            stl.add((l, n - 2))\n            x = n - 1 - l\n            fen_cnt.add(x, 1)\n            fen_sum.add(x, x)\n        \n        def op(idx):\n            tmp[idx] ^= 1\n            if tmp[idx] == 0:\n                p = stl.bisect_left((idx, n)) - 1\n                x, y = stl.pop(p)\n                v = y - x + 1\n                fen_cnt.add(v, -1)\n                fen_sum.add(v, -v)\n                if idx - 1 >= x:\n                    l, r = x, idx - 1\n                    v = r - l + 1\n                    fen_cnt.add(v, 1)\n                    fen_sum.add(v, v)\n                    stl.add((l, r))\n                if idx + 1 <= y:\n                    l, r = idx + 1, y\n                    v = r - l + 1\n                    fen_cnt.add(v, 1)\n                    fen_sum.add(v, v)\n                    stl.add((l, r))\n            else:\n                x, y = idx, idx\n                p = stl.bisect_left((idx, idx))\n                if idx + 1 < len(tmp) and tmp[idx+1]:\n                    a, b = stl.pop(p)\n                    v = b - a + 1\n                    fen_cnt.add(v, -1)\n                    fen_sum.add(v, -v)\n                    y = b\n                if idx and tmp[idx-1]:\n                    a, b = stl.pop(p-1)\n                    v = b - a + 1\n                    fen_cnt.add(v, -1)\n                    fen_sum.add(v, -v)\n                    x = a\n                v = y - x + 1\n                fen_cnt.add(v, 1)\n                fen_sum.add(v, v)\n                stl.add((x, y))\n        \n        outs = []\n        for q in queries:\n            if q[0] == 1:\n                sz = q[1] - 1\n                ans = fen_sum.rsum(sz, n - 1) - fen_cnt.rsum(sz, n - 1) * (sz - 1)\n                if color[-1] != color[0]:\n                    x = y = 0\n                    if len(stl):\n                        a = stl[-1]\n                        if a[1] == n - 2: x = mi(sz - 1, a[1] - a[0] + 1)\n                        a = stl[0]\n                        if a[0] == 0: y = mi(sz - 1, a[1] - a[0] + 1)\n                    ans += ma(0, x - (sz - 1 - y) + 1)\n                outs.append(ans)\n            else:\n                idx = q[1]\n                c = q[2]\n                if color[idx] == c: continue\n                color[idx] = c\n                if idx:\n                    op(idx-1)\n                if idx < n - 1:\n                    op(idx)\n        return outs",
    "submit_ts": "1722742334",
    "subm_id": "552343981"
}