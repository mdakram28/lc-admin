{
    "username": "fengzetao",
    "submission": "#include \"bits/stdc++.h\"\nusing namespace std;\n\n#ifdef LOCAL\n#include \"algo/debug.h\"\n#else\n#define debug(...) 42\n#endif\n\nstruct Info {\n\tint x;\n\tInfo(int _x = 0) : x(_x) {}\n};\n\nstruct Tag {\n\tbool clean;\n\tTag(bool _clean = false) : clean(_clean) {}\n};\n\nInfo operator+(const Info& a, const Info& b) {\n    return Info(a.x + b.x);\n}\n\nvoid apply(Info &a, const Tag &b, int x, int y) {\n\tif (b.clean) {\n\t\ta.x = 0;\n\t}\n}\n\nvoid apply(Tag &a, const Tag &b) {\n\ta.clean = b.clean;\n}\n\ntemplate<class Info, class Tag,\n    class Merge = std::plus<Info>>\nstruct LazySegmentTree {\n    const int n;\n    const Merge merge;\n    std::vector<Info> info;\n    std::vector<Tag> tag;\n    LazySegmentTree(int n) : n(n), merge(Merge()), info(4 << (32 - __builtin_clz(n))), tag(4 << (32 - __builtin_clz(n))) {}\n    LazySegmentTree(std::vector<Info>& init) : LazySegmentTree(static_cast<int>(init.size())) {\n        std::function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r - l == 1) {\n                info[p] = init[l];\n                return;\n            }\n            int m = (l + r) / 2;\n            build(2 * p, l, m);\n            build(2 * p + 1, m, r);\n            pull(p);\n        };\n        build(1, 0, n);\n    }\n    void pull(int p) {\n        info[p] = merge(info[2 * p], info[2 * p + 1]);\n    }\n    void apply(int p, const Tag &v, int x, int y) {\n        ::apply(info[p], v, x, y);\n        ::apply(tag[p], v);\n    }\n    void apply(int p, const Tag& v) {\n        ::apply(info[p], v);\n        ::apply(tag[p], v);\n    }\n    void push(int p, int x, int y) {\n        if (!tag[p].clean) return ; \n        int m = (x + y) / 2;\n        apply(2 * p, tag[p], x, m);\n        apply(2 * p + 1, tag[p], m, y);\n        // apply(2 * p, tag[p]);\n        // apply(2 * p + 1, tag[p]);\n        tag[p] = Tag();\n    }\n\n    void rangeApply(int p, int l, int r, int x, int y, const Tag &v) {\n        if (l >= y || r <= x) {\n            return;\n        }\n        if (l >= x && r <= y) {\n            apply(p, v, l, r);\n            return;\n        }\n        int m = (l + r) / 2;\n        push(p, l, r);\n        rangeApply(2 * p, l, m, x, y, v);\n        rangeApply(2 * p + 1, m, r, x, y, v);\n        pull(p);\n    }\n    void rangeApply(int l, int r, const Tag &v) {\n        return rangeApply(1, 0, n, l, r, v);\n    }\n    \n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l >= y || r <= x) {\n            return Info();\n        }\n        if (l >= x && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        push(p, l, r);\n        return merge(rangeQuery(2 * p, l, m, x, y), rangeQuery(2 * p + 1, m, r, x, y));\n    }\n    Info rangeQuery(int l, int r) {\n        return rangeQuery(1, 0, n, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n    \tstd::vector<Info> info(n, Info(1));\n        LazySegmentTree<Info, Tag> segtree(info);\n        std::vector<int> ans;\n        for (const auto& q : queries) {\n        \tint l = q[0], r = q[1];\n        \tsegtree.rangeApply(l + 1, r, Tag(true));\n        \tans.emplace_back(segtree.rangeQuery(0, n).x - 1);\n        }\n\n        return ans;\n    }\n};\n\n#ifdef LOCAL\nint main() {\n    std::ios::sync_with_stdio(false);\n    std::cin.tie(nullptr);\n\n    Solution sol;\n    int n = 5;\n    std::vector<std::vector<int>> queries {{2, 4}, {0, 2}, {0, 4}};\n    auto ans = sol.shortestDistanceAfterQueries(n, queries);\n    debug(ans);\n    \n\n    return 0;\n}\n#endif",
    "submit_ts": "1722740505",
    "subm_id": "552331907"
}