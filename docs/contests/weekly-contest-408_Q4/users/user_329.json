{
    "username": "koshmar_",
    "submission": "class Solution {\npublic:\n\nclass UnionFind {\n  public:\n\n    UnionFind(int n) : root(n), rank(n,1), count(n) {\n      for(int i=0; i<n; ++i)\n        root[i]=i;\n    }\n\n    int find(int x) {\n      if (root[x]==x)\n        return x;\n      return root[x] = find(root[x]);\n    }\n\n    void unite(int x, int y) {\n      int rX = find(x);\n      int rY = find(y);\n      if (rX != rY) {\n        if (rank[rX] > rank[rY])\n          root[rY] = rX;\n        else if (rank[rX] < rank[rY])\n          root[rX] = rY;\n        else {\n          root[rY]  = rX;\n          rank[rX] += 1;\n        }\n        --count;\n      }\n    }\n\n    bool connected(int x, int y) {\n      return find(x)==find(y);\n    }\n\n    int count_sets() {\n      return count;\n    }\n\n  private:\n    vector<int> root;\n    vector<int> rank;\n    int count;\n};\n\n\n\nbool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n\n    UnionFind uf(circles.size()+2);\n\n    int top_side = circles.size(); \n    int bot_side = circles.size()+1; \n\n    for(int i=0; i<circles.size(); ++i) {\n\n        long long xc = circles[i][0];\n        long long yc = circles[i][1];\n        long long rc = circles[i][2];\n\n        if (Y<=yc+rc) uf.unite(i,top_side);\n        if (xc-rc<=0) uf.unite(i,top_side);\n\n        if (X<=xc+rc) uf.unite(i,bot_side);\n        if (yc-rc<=0) uf.unite(i,bot_side);\n\n        for(int j=i+1; j<circles.size(); ++j) {\n\n            long long x2 = circles[j][0];\n            long long y2 = circles[j][1];\n            long long r2 = circles[j][2];\n\n            if ( ((xc-x2)*(xc-x2) + (yc-y2)*(yc-y2)) <= ((rc+r2)*(rc+r2))) uf.unite(i,j);\n\n        }\n    }\n\n   return !uf.connected(top_side,bot_side); \n}    \n};",
    "submit_ts": "1722136714",
    "subm_id": "1335742800"
}