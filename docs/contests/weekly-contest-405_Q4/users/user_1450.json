{
    "username": "hgwalani81",
    "submission": "class Solution {\npublic:\n    \n    class TrieNode {\n    public:\n        unordered_map<char, TrieNode*> children;\n        int cost;\n\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(string& word, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = min(cost, node->cost);\n            // cout<<\"Adding cost for word \"<<word<<\" \"<<cost<<endl;\n        }\n\n        void calculate(string& target, int index, vector<int>& dp) {\n            TrieNode* node = root;\n            int min_cost = INT_MAX;\n            int len = 0;\n            for (int i = index; i >= 0; --i) {\n                char c = target[i];\n                // cout<<\"Target cahar \"<<c<<endl;\n                if (node->children.find(c) != node->children.end()) {\n                    node = node->children[c];\n                    len++;\n                    if (node->cost != INT_MAX and dp[index+1-len] != INT_MAX) {\n                        dp[index+1] = min(dp[index+1], dp[index + 1 - len] + node->cost);\n                        // min_cost = min(min_cost, node->cost);\n                    }\n                } else {\n                    break;\n                }\n            }\n            // return min_cost;\n        }\n    };\n\n    int minimumCost(string target, vector<string> words, vector<int> costs) {\n        int n = target.size();\n        int m = words.size();\n\n        Trie trie;\n        for (int i = 0; i < m; ++i) {\n            string reversed_word = words[i];\n            reverse(reversed_word.begin(), reversed_word.end());\n            trie.insert(reversed_word, costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int j = 1; j <= n; ++j) {\n            // cout<<\"Calculating for j \"<<j<<\" \";\n            trie.calculate(target, j-1, dp);\n            // cout<<dp[j]<<endl;\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n        // return 1;\n    }\n};",
    "submit_ts": "1720323925",
    "subm_id": "1312387412"
}