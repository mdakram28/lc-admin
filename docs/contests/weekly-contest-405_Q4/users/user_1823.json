{
    "username": "the_one_and_only",
    "submission": "from typing import List\nfrom collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\n    def find_matches(self, target, start):\n        node = self.root\n        matches = []\n        for i in range(start, len(target)):\n            if target[i] not in node.children:\n                break\n            node = node.children[target[i]]\n            if node.cost != float('inf'):\n                matches.append((i + 1, node.cost))\n        return matches\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Build the Trie\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # DP with Trie lookups\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            matches = trie.find_matches(target, i)\n            for end, cost in matches:\n                dp[end] = min(dp[end], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n\n\n",
    "submit_ts": "1720324614",
    "subm_id": "1312403840"
}