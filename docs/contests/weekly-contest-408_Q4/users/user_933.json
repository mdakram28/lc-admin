{
    "username": "jetrocket",
    "submission": "class Solution(object):\n    def canReachCorner(self, X, Y, circles):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :type circles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        # check if it contains the start/end\n        # check if it contains an edge, if it connects two opposing aka top/left and bot/right then its gg\n        # check if it contains any other circles. if it does, connect the two and see if it contains the two edges\n        for circle in circles:\n            x = circle[0]\n            y = circle[1]\n            r2 = circle[2] * circle[2]\n            if x*x + y*y < r2:\n                return False\n            if (x-X)*(x-X) + (y-Y) * (y-Y) < r2:\n                return False\n        \n        lefttop = set()\n        rightbot = set()\n        for circle in circles:\n            x = circle[0]\n            y = circle[1]\n            r = circle[2]\n            lt = False\n            if x - r <= 0 or y + r >= Y:\n                lt = True\n                lefttop.add(tuple(circle))\n            if x+r >= X or y - r <= 0:\n                if lt:\n                    return False\n                rightbot.add(tuple(circle))\n        # try to connect the two by doing a dfs\n        def dfs(circle):\n            if circle in rightbot:\n                return True\n            neighbors = set()\n            for poss in circles[:]:\n                xdiff = poss[0] - circle[0]\n                ydiff = poss[1] - circle[1]\n                comr = poss[2] + circle[2]\n                if xdiff * xdiff + ydiff * ydiff <= comr * comr:\n                    neighbors.add(tuple(poss))\n                    circles.remove(poss)\n            for n in neighbors:\n                res = dfs(n)\n                if res:\n                    return True\n            return False\n        for lt in lefttop:\n            if(dfs(lt)):\n                return False\n\n\n        \n        return True",
    "submit_ts": "1722137199",
    "subm_id": "1335756973"
}