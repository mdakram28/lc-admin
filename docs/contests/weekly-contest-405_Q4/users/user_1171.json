{
    "username": "dekatuna",
    "submission": "class Solution {\npublic:\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> chil;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->chil.count(c)) {\n                node->chil[c] = new TrieNode();\n            }\n            node = node->chil[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (!node->chil.count(target[j])) break;\n                node = node->chil[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        if (dp[n] == INT_MAX) return -1;\n        else return dp[n];\n    }\n};",
    "submit_ts": "1720323305",
    "subm_id": "1312372358"
}