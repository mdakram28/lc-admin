{
    "username": "lyj617",
    "submission": "class Solution {\n public:\n  long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                        vector<int>& verticalCut) {\n    vector<pair<int, int>> cut;\n    for (int i = 0; i < m - 1; i++) {\n      cut.emplace_back(horizontalCut[i], 0);\n    }\n    for (int i = 0; i < n - 1; i++) {\n      cut.emplace_back(verticalCut[i], 1);\n    }\n    sort(cut.begin(), cut.end(), greater());\n    long long ans = 0;\n    for (int i = 0, hor = 0, ver = 0; i < m + n - 2; i++) {\n      if (cut[i].second == 0) {\n        ans += (ver + 1) * cut[i].first;\n        hor++;\n      } else {\n        ans += (hor + 1) * cut[i].first;\n        ver++;\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": "1720926495",
    "subm_id": "546446601"
}