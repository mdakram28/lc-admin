{
    "username": "Daniel",
    "submission": "class Solution {\npublic:\n    struct node {\n        int v;\n        int row; \n        int col;\n        bool operator<(const node &c) const {\n            return v > c.v;\n        } \n    };\n\n    void Search(vector<node>& cc, int idx, vector<int> ready, long long score, long long &maxscore)\n    {\n        if (ready.size() == 3) {\n            if (score > maxscore) {\n                maxscore = score;\n            }\n            return; \n        }\n        if (idx == cc.size()) return;\n        if (idx <= cc.size() - 3 + ready.size()) {\n            long long tpscore = score;\n            for (int j = idx; j < idx + 3 - ready.size(); j++) {\n                tpscore += cc[j].v;\n            }\n            if (tpscore < maxscore) {//\u6700\u5927\u53ef\u80fd\u5f97\u5206\u5c0f\u4e8e\u5df2\u53d6\u5f97\u7684\u6700\u9ad8\u5f97\u5206\u53d6\u6d88\u641c\u7d22\n                return;\n            }\n        }\n        bool canchoose = true;\n        if (!ready.empty()) {\n            for (auto r : ready) {\n                if (cc[r].row == cc[idx].row || cc[r].col == cc[idx].col) {\n                    //printf(\"%d check failed\\n\", cc[idx].v);\n                    canchoose = false;\n                    break;\n                }\n            }\n        }\n        if (canchoose) {\n            ready.push_back(idx);\n            //printf(\"try to ready %d curr %d\\n\", cc[idx].v, ready.size());\n            Search(cc, idx + 1, ready, score + cc[idx].v, maxscore);\n            ready.pop_back();\n        }\n        Search(cc, idx + 1, ready, score, maxscore);\n    }\n\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<node> cc;\n        int m = board.size();\n        int n = board[0].size();\n        for (int i=0; i < m ;i++) {\n            for (int j=0; j < n ;j++) {\n                cc.push_back(node {board[i][j], i, j});\n            }\n        }\n        sort(cc.begin(), cc.end());\n        vector<bool> mark(m*n, false);\n        vector<int> ready;\n        long long maxscore {INT64_MIN};\n        Search(cc, 0, ready, 0, maxscore);\n        return maxscore;\n\n\n\n\n    }\n};",
    "submit_ts": "1723908917",
    "subm_id": "556333559"
}