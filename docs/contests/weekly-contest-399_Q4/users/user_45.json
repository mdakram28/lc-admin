{
    "username": "nguyenquocthao00",
    "submission": "MOD = 10**9 + 7\nclass Node:\n    def __init__(self,lo,hi,left,right,v):\n        self.lo,self.hi,self.left,self.right=lo,hi,left,right\n        self.a, self.b, self.c,self.d = v, 0, 0, 0\n    def fix(self):\n        if self.hi-self.lo==1:\n            self.a=-math.inf\n        else:\n            self.a = max(self.left.a + self.right.c, self.left.b + self.right.a, self.left.b + self.right.c)\n        self.b = max(self.left.a + self.right.d, self.left.b+self.right.b, self.left.b + self.right.d)\n        self.c = max(self.left.c + self.right.c, self.left.d + self.right.a, self.left.d + self.right.c)\n        self.d = max(self.left.c + self.right.d,self.left.d + self.right.b, self.left.d + self.right.d)\n    def update(self, i, v):\n        if self.hi==self.lo:\n            self.a = v\n            return\n        if i<=self.left.hi:self.left.update(i,v)\n        else: self.right.update(i,v)\n        self.fix()\ndef createNode(nums):\n    def create(lo,hi):\n        if lo==hi:\n            return Node(lo,hi,None,None,nums[lo])\n        mid=(lo+hi)//2\n        w=hi-lo\n        res = Node(lo,hi,create(lo,mid),create(mid+1,hi),0)\n        res.fix()\n        return res\n    return create(0,len(nums)-1)\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        res=0\n        node = createNode(nums)\n        for i,v in queries:\n            node.update(i,v)\n            res += max(node.a, node.b, node.c, node.d)\n        return res%MOD",
    "submit_ts": 1716692828.0
}