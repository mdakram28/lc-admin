{
    "username": "SomuDEb",
    "submission": "class TrieNode {\npublic:\n    vector<unique_ptr<TrieNode>> children;\n    int cost;\n    bool isEndOfWord;\n\n    TrieNode() : children(26), cost(INT_MAX), isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    unique_ptr<TrieNode> root;\n\n    Trie() {\n        root = make_unique<TrieNode>();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* currentNode = root.get();\n        for (char c : word) {\n            if (!currentNode->children[c - 'a']) {\n                currentNode->children[c - 'a'] = make_unique<TrieNode>();\n            }\n            currentNode = currentNode->children[c - 'a'].get();\n        }\n        currentNode->cost = min(cost, currentNode->cost);\n        currentNode->isEndOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root.get();\n    }\n};\n\nclass Solution {\npublic:\n    void updateDpForPrefix(const string& target, int startIndex, vector<int>& dp, Trie& trie) {\n    TrieNode* currentNode = trie.getRoot();\n    for (int j = startIndex; j < target.size(); ++j) {\n        char c = target[j];\n        if (!currentNode->children[c - 'a']) break;\n        currentNode = currentNode->children[c - 'a'].get();\n        if (currentNode->isEndOfWord) {\n            dp[j + 1] = min(dp[j + 1], dp[startIndex] + currentNode->cost);\n        }\n    }\n}\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    Trie trie;\n    int targetLength = target.size();\n    vector<int> dp(targetLength + 1, INT_MAX);\n\n    auto costIter = costs.begin();\n    for (const auto& word : words) {\n        trie.insert(word, *costIter);\n        ++costIter;\n    }\n\n    dp[0] = 0;\n\n    for (int i = 0; i < targetLength; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        updateDpForPrefix(target, i, dp, trie);\n    }\n\n    if (dp[targetLength] == INT_MAX) {\n        return -1;\n    } else {\n        return dp[targetLength];\n    }\n}\n\n};\n",
    "submit_ts": "1720323215",
    "subm_id": "1312370142"
}