{
    "username": "jithendrabanoth",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    vector<vector<long long>> dp;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int> inv_count = initializeInvCount(n, requirements);\n        dp = vector<vector<long long>>(n + 1, vector<long long>(401, 0));\n        computeDp(n, inv_count);\n        return dp[n][inv_count[n-1]];\n    }\n\nprivate:\n    vector<int> initializeInvCount(int n, vector<vector<int>>& requirements) {\n        vector<int> inv_count(n, -1);\n        for (const auto& req : requirements) {\n            inv_count[req[0]] = req[1];\n        }\n        return inv_count;\n    }\n\n    void computeDp(int n, vector<int>& inv_count) {\n        dp[0][0] = 1;\n        vector<long long> sum(401, 0);\n\n        for (int i = 1; i <= n; i++) {\n            computePrefixSum(i - 1, sum);\n            for (int j = 0; j <= 400; j++) {\n                int left = max(0, j - (i - 1));\n                dp[i][j] = (sum[j] - (left > 0 ? sum[left - 1] : 0) + MOD) % MOD;\n            }\n            if (inv_count[i - 1] != -1) {\n                long long temp = dp[i][inv_count[i - 1]];\n                dp[i].assign(401, 0);\n                dp[i][inv_count[i - 1]] = temp;\n            }\n        }\n    }\n\n    void computePrefixSum(int i, vector<long long>& sum) {\n        sum[0] = dp[i][0];\n        for (int j = 1; j <= 400; j++) {\n            sum[j] = (sum[j - 1] + dp[i][j]) % MOD;\n        }\n    }\n};\n\n\n// 3\n// [[2,2],[0,0]]\n// 3\n// [[2,2],[1,1],[0,0]]\n// 2\n// [[0,0],[1,0]]\n\n// 2\n// 1\n// 1",
    "submit_ts": 1719068839.0
}