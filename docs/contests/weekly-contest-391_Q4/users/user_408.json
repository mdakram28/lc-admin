{
    "username": "VIVEK_887",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        TreeMap<Integer,Integer> map1 = new TreeMap<>();\n        TreeMap<Integer,Integer> map2 = new TreeMap<>();\n        \n        for(int[] p : points) {\n            int d1 = p[0]+p[1];\n            int d2 = p[0]-p[1];\n            map1.put(d1,map1.getOrDefault(d1,0)+1);\n            map2.put(d2,map2.getOrDefault(d2,0)+1);\n        }\n        \n        int ans=Integer.MAX_VALUE;\n        \n        for(int[] p : points) {\n            int d1 = p[0]+p[1];\n            int d2 = p[0]-p[1];\n            // System.out.println(map1+\" \"+map2);\n            if(map1.get(d1)==1) {\n                map1.remove(d1);\n            } else {\n                map1.put(d1,map1.get(d1)-1);\n            }\n            \n            if(map2.get(d2)==1) {\n                map2.remove(d2);\n            } else {\n                map2.put(d2,map2.get(d2)-1);\n            }\n            \n            int m0 = map1.firstKey();\n            int m1 = map1.lastKey();\n            // System.out.println(map1+\" \"+m0+\" \"+m1);\n            int n0 = map2.firstKey();\n            int n1 = map2.lastKey();\n            // System.out.println(map2+\" \"+n0+\" \"+n1);\n            // answer\n            int max = Math.max((m1- m0),(n1 - n0));\n            // System.out.println(max);\n            ans=Math.min(ans,max);\n                \n            \n            \n            \n            map1.put(d1,map1.getOrDefault(d1,0)+1);\n            map2.put(d2,map2.getOrDefault(d2,0)+1);\n        }\n        \n        return ans;\n    }\n}"
}