{
    "username": "Skythrill",
    "submission": "\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.TreeSet;\n\nclass Solution {\n    public int minimumDistance(int[][] points) {\n        int x = points.length;\n\n        MultiSet a = new MultiSet(), b = new MultiSet();\n\n        for (int i = 0; i < x; i++) {\n            a.insert(points[i][0] + points[i][1]);\n            b.insert(points[i][0] - points[i][1]);\n        }\n\n        int maximum = Integer.MAX_VALUE;\n\n        for (int i = 0; i < x; i++) {\n            a.remove(points[i][0] + points[i][1]);\n            b.remove(points[i][0] - points[i][1]);\n            maximum = Math.min(maximum, Math.max(a.evaluate(), b.evaluate()));\n            a.insert(points[i][0] + points[i][1]);\n            b.insert(points[i][0] - points[i][1]);\n        }\n\n        return maximum;\n    }\n\n    private static class MultiSet {\n        private Map<Integer, Integer> frequency;\n        private TreeSet<Integer> present;\n\n        public MultiSet() {\n            this.frequency = new HashMap<>();\n            this.present = new TreeSet<>();\n        }\n\n        public void insert(int x) {\n            present.add(x);\n            frequency.put(x, frequency.getOrDefault(x, 0) + 1);\n        }\n\n        public void remove(int x) {\n            frequency.put(x, frequency.get(x) - 1);\n            if (frequency.get(x) == 0) {\n                present.remove(x);\n            }\n        }\n\n        public int evaluate() {\n            return present.last() - present.first();\n        }\n    }\n}"
}