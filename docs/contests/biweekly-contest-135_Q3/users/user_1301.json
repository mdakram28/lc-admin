{
    "username": "Amritansh98",
    "submission": "import java.util.*;\nclass Solution {\n\n        private int binarySearch(List<Integer> v, int diff) {\n        int left = 0;\n        int right = v.size();\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (v.get(mid) < diff) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        List<Integer> v = new ArrayList<>();\n        \n        int n = nums.length;\n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int diff = Math.abs(a - b);\n            int X = Math.max(Math.max(a, b), Math.max(k - a, k - b));\n            \n            map.putIfAbsent(diff, new ArrayList<>());\n            map.get(diff).add(X);\n            v.add(X);\n        }\n        \n        Collections.sort(v);\n        int ans = n;\n        \n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int diff = entry.getKey();\n            List<Integer> XList = entry.getValue();\n            \n            int T = binarySearch(v, diff) * 2 + (n / 2 - binarySearch(v, diff));\n            \n            for (int X : XList) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, T);\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1721489070",
    "subm_id": "1327441919"
}