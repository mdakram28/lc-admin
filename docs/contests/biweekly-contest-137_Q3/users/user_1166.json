{
    "username": "NDwWeFa8I0",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\n\nvoid getTop3PerRow(const vector<vector<int>>& board, vector<vector<long long>>& topValues, vector<vector<int>>& topColumns) {\n    int rows = board.size();\n    int cols = board[0].size();\n\n    for (int i = 0; i < rows; ++i) {\n        vector<pair<long long, int>> values;\n        for (int j = 0; j < cols; ++j) {\n            values.emplace_back(board[i][j], j);\n        }\n        sort(values.rbegin(), values.rend());  // Sort in descending order\n\n        for (int k = 0; k < 3 && k < cols; ++k) {\n            topValues[i][k] = values[k].first;\n            topColumns[i][k] = values[k].second;\n        }\n    }\n}\n\nlong long findMaxSum(const vector<vector<long long>>& topValues, const vector<vector<int>>& topColumns) {\n    int rows = topValues.size();\n    long long maxSum = LLONG_MIN;\n\n    for (int r1 = 0; r1 < rows; ++r1) {\n        for (int r2 = r1 + 1; r2 < rows; ++r2) {\n            for (int r3 = r2 + 1; r3 < rows; ++r3) {\n                for (int i = 0; i < 3; ++i) {\n                    for (int j = 0; j < 3; ++j) {\n                        if (topColumns[r2][j] == topColumns[r1][i]) continue;\n                        for (int k = 0; k < 3; ++k) {\n                            if (topColumns[r3][k] == topColumns[r1][i] || topColumns[r3][k] == topColumns[r2][j]) continue;\n\n                            long long currentSum = topValues[r1][i] + topValues[r2][j] + topValues[r3][k];\n                            maxSum = max(maxSum, currentSum);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return maxSum;\n}\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rows = board.size();\n        vector<vector<long long>> topValues(rows, vector<long long>(3, LLONG_MIN));\n        vector<vector<int>> topColumns(rows, vector<int>(3, -1));\n\n        getTop3PerRow(board, topValues, topColumns);\n        return findMaxSum(topValues, topColumns);\n    }\n};\n",
    "submit_ts": "1723910317",
    "subm_id": "1359225614"
}