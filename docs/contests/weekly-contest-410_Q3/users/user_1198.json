{
    "username": "Ahamed30",
    "submission": "class Solution {\n    int mod = 1000000007;\n    private int getPairs(int index, int left, int right, int[] nums, int n, int[][][] dp) {\n        if(index >= n) return 1;\n        \n        if(left > 50 || right < 0) return 0;\n        \n        if(dp[index][left][right] != -1) return dp[index][left][right];\n        \n        int currLeft = left, currRight = right; \n    \n        int count = 0;\n        while(currLeft <= nums[index] && currRight >= 0) {\n            int sum = currLeft + currRight;\n            if(sum == nums[index]) {\n                count = (count + getPairs(index + 1, currLeft, currRight, nums, n, dp) % mod) % mod;\n                currLeft++;\n                currRight--;\n            }else if(sum < nums[index]) {\n                currLeft++;\n            }else {\n                currRight--;\n            }\n        }\n\n        return dp[index][left][right] = count;\n    }\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        int[][][] dp = new int[n][51][51];\n        for(int[][] arr: dp) {\n            for(int[] row: arr) Arrays.fill(row, -1);\n        }\n        return getPairs(0, 0, nums[0], nums, n, dp);\n    }\n}",
    "submit_ts": "1723345675",
    "subm_id": "1351560906"
}