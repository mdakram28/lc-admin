{
    "username": "sky_walker-x",
    "submission": "# \u6811\u72b6\u6570\u7ec4\uff0c\u57fa\u7840\u7248\u672c\n# \u6811\u72b6\u6570\u7ec4\u7684\u6838\u5fc3\u601d\u60f3\u662f\u5206\u6cbb\nclass BIT:\n    def __init__(self,n):\n        # \u6709\u6548\u7d22\u5f15\u4e3a 1\uff5en \u95ed\u533a\u95f4\n        # self.f \u638c\u7ba1\u7684\u662f\u5b83\u6240\u6cbb\u7684\u8303\u56f4\u7684\u548c\n        self.f = [0 for i in range(n+1)] \n        self.n = n\n    \n    def lowbit(self,x):\n        return x&(-x)\n    \n    def update(self,i,k):\n        # \u5bf9\u7d22\u5f15\u6570\u7ec4\u7d22\u5f15i\uff0c\u7ed9\u4e88\u589e\u91cfk\uff0c \u5173\u952e\uff1a\u90a3\u4e48\u6240\u6709\u7236\u8282\u70b9\u90fd\u9700\u8981\u589e\u52a0\n        while i <= self.n:\n            self.f[i] += k \n            i += self.lowbit(i)\n    \n    def query(self,i): \n        # \u5904\u74061\uff5ei\u7684\u533a\u95f4\u548c\n        ans = 0\n        while i > 0:\n            ans += self.f[i]\n            i -= self.lowbit(i)\n        return ans \n    \n    def queryRange(self,start,end):\n        # \u5904\u7406 start\uff5eend\u7684\u533a\u95f4\u548c\uff0c \u8fd9\u91cc\u7528\u5230\u4e86\u524d\u7f00\u548c\u7684\u601d\u60f3\n        if end < start:\n            return 0\n        return self.query(end) - self.query(start-1)\n\n# \u4f5c\u8005\uff1a\u83dc\u72d7\u963f\u7b28-\u6682\u544a\u4e00\u6bb5\u843d\n# \u94fe\u63a5\uff1ahttps://leetcode.cn/circle/discuss/6Xl95r/\n# \u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n# \u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        bit = BIT(n)\n        for i, num in enumerate(nums):\n            if 0 < i < n - 1 and nums[i - 1] < num and nums[i + 1] < num:\n                bit.update(i, 1)\n\n        def getDiff(idx, new_val, new_val_idx):\n            old_val = nums[new_val_idx]\n            old = nums[idx - 1] < nums[idx] and nums[idx + 1] < nums[idx]\n            nums[new_val_idx] = new_val\n            new = nums[idx - 1] < nums[idx] and nums[idx + 1] < nums[idx]\n            nums[new_val_idx] = old_val\n            if old and not new:\n                return -1\n            elif not old and new:\n                return 1\n            return 0\n        \n        ans = []\n        for op, arg1, arg2 in queries:\n            if op == 1:\n                ans.append(bit.queryRange(arg1 + 1, arg2 - 1))\n            else:\n                i = arg1\n                if i > 1:\n                    bit.update(i - 1, getDiff(i - 1, arg2, i))\n                if 0 < i < n - 1:\n                    bit.update(i, getDiff(i, arg2, i))\n                if i < n - 2:\n                    bit.update(i + 1, getDiff(i + 1, arg2, i))\n                nums[i] = arg2\n        return ans\n\n\n",
    "submit_ts": 1718507304.0
}