{
    "username": "PusY1024",
    "submission": "class Solution {\n    public static long maximumValueSum(int[][] board) {\n        int m = board.length, n = board[0].length;\n        if (m < 3 || n < 3) return 0;\n        List<List<int[]>> lists = new ArrayList<>();\n\n        for (int i = 0; i < m; i++) {\n            PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n            for (int j = 0; j < n; j++) {\n                pq.offer(new int[]{board[i][j], j});\n            }\n            List<int[]> rowTop = new ArrayList<>();\n            for (int k = 0; k < 3 && !pq.isEmpty(); k++) {\n                rowTop.add(pq.poll());\n            }\n            lists.add(rowTop);\n        }\n\n        return backtrack(lists, 0, new boolean[n], 0, 0);\n    }\n\n    private static long backtrack(List<List<int[]>> lists, int row, boolean[] visited, long sum, int count) {\n        if (count == 3) {\n            return sum;\n        }\n        if (row == lists.size()) {\n            return Long.MIN_VALUE;\n        }\n\n        long maxSum = backtrack(lists, row + 1, visited, sum, count);\n\n        for (int[] valueCol : lists.get(row)) {\n            if (!visited[valueCol[1]]) {\n                visited[valueCol[1]] = true;\n                maxSum = Math.max(maxSum, backtrack(lists, row + 1, visited, sum + valueCol[0], count + 1));\n                visited[valueCol[1]] = false;\n            }\n        }\n\n        return maxSum;\n    }\n}",
    "submit_ts": "1723906561",
    "subm_id": "556320443"
}