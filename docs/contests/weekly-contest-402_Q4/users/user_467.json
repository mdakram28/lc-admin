{
    "username": "neilchetty",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        int[] arr = new int[n];\n        List<Integer> list = new ArrayList<>();\n        SegmentTree tree = new SegmentTree(arr, n);\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                arr[i] = 1;\n            }\n        }\n        // System.out.println(Arrays.toString(arr));\n        tree.build(arr, n);\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                list.add(tree.getSum(n, q[1]+1, q[2]-1));\n            } else {\n                int ind = q[1], val = q[2];\n                nums[ind] = val;\n                if (ind != 0 && ind != n - 1) {\n                    if (nums[ind] <= nums[ind - 1] || nums[ind] <= nums[ind + 1]) {\n                        tree.updateValue(arr, n, ind, 0);\n                        // System.out.println(\"ok1\");\n                        arr[ind] = 0;\n                    } else {\n                        tree.updateValue(arr, n, ind, 1);\n                        // System.out.println(\"ok2\");\n                        arr[ind] = 1;\n                    }\n                }\n                if (ind > 1) {\n                    if (nums[ind - 1] <= nums[ind - 2] || nums[ind - 1] <= nums[ind]) {\n                        tree.updateValue(arr, n, ind - 1, 0);\n                        // System.out.println(\"ok3\");\n                        arr[ind-1] = 0;\n                    } else {\n                        tree.updateValue(arr, n, ind - 1, 1);\n                        // System.out.println(\"ok4\");\n                        arr[ind-1] = 1;\n                    }\n                }\n                if (ind < n - 2) {\n                    if (nums[ind + 1] <= nums[ind] || nums[ind + 1] <= nums[ind + 2]) {\n                        tree.updateValue(arr, n, ind + 1, 0);\n                        // System.out.println(\"ok5\");\n                        arr[ind+1] = 0;\n                    } else {\n                        tree.updateValue(arr, n, ind + 1, 1);\n                        arr[ind+1] = 1;\n                        // System.out.println(\"ok6\");\n                    }\n                }\n            }\n            // System.out.println(Arrays.toString(arr));\n        }\n        return list;\n    }\n}\n\nclass SegmentTree {\n    int[] st;\n\n    public SegmentTree(int[] arr, int n) {\n        int x = (int) (Math.ceil(Math.log(n) / Math.log(2)));\n        int max_size = 2 * (int) Math.pow(2, x) - 1;\n        st = new int[max_size];\n    }\n\n    public void build(int[] arr, int n) {\n        constructSTUtil(arr, 0, n - 1, 0);\n    }\n\n    private int getMid(int s, int e) {\n        return s + (e - s) / 2;\n    }\n\n    private int getSumUtil(int ss, int se, int qs, int qe, int si) {\n        if (qs <= ss && qe >= se) {\n            return st[si];\n        }\n        if (se < qs || ss > qe) {\n            return 0;\n        }\n        int mid = getMid(ss, se);\n        return getSumUtil(ss, mid, qs, qe, 2 * si + 1) + getSumUtil(mid + 1, se, qs, qe, 2 * si + 2);\n    }\n\n    private void updateValueUtil(int ss, int se, int i, int diff, int si) {\n        if (i < ss || i > se) {\n            return;\n        }\n        st[si] = st[si] + diff;\n        if (se != ss) {\n            int mid = getMid(ss, se);\n            updateValueUtil(ss, mid, i, diff, 2 * si + 1);\n            updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);\n        }\n    }\n\n    public void updateValue(int[] arr, int n, int i, int new_val) {\n        if (i < 0 || i > n - 1) {\n            return;\n        }\n        int diff = new_val - arr[i];\n        arr[i] = new_val;\n        updateValueUtil(0, n - 1, i, diff, 0);\n    }\n\n    public int getSum(int n, int qs, int qe) {\n        if (qs < 0 || qe > n - 1 || qs > qe) {\n            return 0;\n        }\n        return getSumUtil(0, n - 1, qs, qe, 0);\n    }\n\n    private int constructSTUtil(int[] arr, int ss, int se, int si) {\n        if (ss == se) {\n            return st[si] = arr[ss];\n        }\n        int mid = getMid(ss, se);\n        st[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) + constructSTUtil(arr, mid + 1, se, si * 2 + 2);\n        return st[si];\n    }\n}\n",
    "submit_ts": 1718507486.0
}