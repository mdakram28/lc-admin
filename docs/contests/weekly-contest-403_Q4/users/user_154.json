{
    "username": "kaq",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int numRows = grid.size();\n        int numCols = grid[0].size();\n        int best = INT_MAX;\n        int a, b, c;\n        for (int rowSplit = 0; rowSplit + 1 < numRows; rowSplit++) {\n            for (int colSplit = 0; colSplit + 1 < numCols; colSplit++) {\n                a = minArea(grid, 0, rowSplit, 0, numCols - 1);\n                b = minArea(grid, rowSplit + 1, numRows - 1, 0, colSplit);\n                c = minArea(grid, rowSplit + 1, numRows - 1, colSplit + 1, numCols - 1);\n                if (a != 0 && b != 0 && c != 0) {\n                    best = min(best, a + b + c);\n                }\n                \n                a = minArea(grid, 0, rowSplit, 0, colSplit);\n                b = minArea(grid, 0, rowSplit, colSplit + 1, numCols - 1);\n                c = minArea(grid, rowSplit + 1, numRows - 1, 0, numCols - 1);\n                if (a != 0 && b != 0 && c != 0) {\n                    best = min(best, a + b + c);\n                }\n                \n                a = minArea(grid, 0, rowSplit, 0, colSplit);\n                b = minArea(grid, rowSplit + 1, numRows - 1, 0, colSplit);\n                c = minArea(grid, 0, numRows - 1, colSplit + 1, numCols - 1);\n                if (a != 0 && b != 0 && c != 0) {\n                    best = min(best, a + b + c);\n                }\n                \n                a = minArea(grid, 0, numRows - 1, 0, colSplit);\n                b = minArea(grid, 0, rowSplit, colSplit + 1, numCols - 1);\n                c = minArea(grid, rowSplit + 1, numRows - 1, colSplit + 1, numCols - 1);\n                if (a != 0 && b != 0 && c != 0) {\n                    best = min(best, a + b + c);\n                }\n            }\n        }\n        \n        for (int rowSplit1 = 0; rowSplit1 + 2 < numRows; rowSplit1++) {\n            for (int rowSplit2 = rowSplit1 + 1; rowSplit2 + 1 < numRows; rowSplit2++) {\n                a = minArea(grid, 0, rowSplit1, 0, numCols - 1);\n                b = minArea(grid, rowSplit1 + 1, rowSplit2, 0, numCols - 1);\n                c = minArea(grid, rowSplit2 + 1, numRows - 1, 0, numCols - 1);\n                if (a != 0 && b != 0 && c != 0) {\n                    best = min(best, a + b + c);\n                }\n            }\n        }\n        \n        for (int colSplit1 = 0; colSplit1 + 2 < numCols; colSplit1++) {\n            for (int colSplit2 = colSplit1 + 1; colSplit2 + 1 < numCols; colSplit2++) {\n                a = minArea(grid, 0, numRows - 1, 0, colSplit1);\n                b = minArea(grid, 0, numRows - 1, colSplit1 + 1, colSplit2);\n                c = minArea(grid, 0, numRows - 1, colSplit2 + 1, numCols - 1);\n                if (a != 0 && b != 0 && c != 0) {\n                    best = min(best, a + b + c);\n                }\n            }\n        }\n        \n        return best;\n    }\n    \nprivate:\n    int minArea(const vector<vector<int>>& grid, int startRow, int endRow, int startCol, int endCol) {\n        int minRow = INT_MAX;\n        int maxRow = INT_MIN;\n        int minCol = INT_MAX;\n        int maxCol = INT_MIN;\n        for (int row = startRow; row <= endRow; row++) {\n            for (int col = startCol; col <= endCol; col++) {\n                if (grid[row][col]) {\n                    minRow = min(minRow, row);\n                    maxRow = max(maxRow, row);\n                    minCol = min(minCol, col);\n                    maxCol = max(maxCol, col);\n                }\n            }\n        }\n        if (minRow == INT_MAX) {\n            return 0;\n        }\n        return (maxRow - minRow + 1) * (maxCol - minCol + 1);\n    }\n};",
    "submit_ts": "1719113130",
    "subm_id": "1297317694"
}