{
    "username": "WKelvinson",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n                // Sort the cuts in descending order\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hCuts, (a, b) -> b - a);\n        Arrays.sort(vCuts, (a, b) -> b - a);\n        \n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        int i = 0, j = 0;\n        \n        while (i < hCuts.length && j < vCuts.length) {\n            if (hCuts[i] >= vCuts[j]) {\n                totalCost += (long) hCuts[i] * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += (long) vCuts[j] * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (i < hCuts.length) {\n            totalCost += (long) hCuts[i] * verticalPieces;\n            i++;\n        }\n        \n        // Process remaining vertical cuts\n        while (j < vCuts.length) {\n            totalCost += (long) vCuts[j] * horizontalPieces;\n            j++;\n        }\n        \n        return  totalCost;\n    }\n}",
    "submit_ts": "1720925270",
    "subm_id": "1320248959"
}