{
    "username": "Anonymous2610",
    "submission": "class Solution {\npublic:\n    //source https://www.geeksforgeeks.org/maximum-manhattan-distance-between-a-distinct-pair-from-n-coordinates/\n    int fun(vector<vector<int>>&A){\n        int N = A.size();\n        int minsum, maxsum, mindiff, maxdiff;\n        minsum = maxsum = A[0][0] + A[0][1];\n        mindiff = maxdiff = A[0][0] - A[0][1];\n        for (int i = 1; i < N; i++) {\n            int sum = A[i][0] + A[i][1];\n            int diff = A[i][0] - A[i][1];\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n        }\n\n        return max(maxsum - minsum, maxdiff - mindiff);\n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int,int>>sum,dif;\n        for(int i=0;i<n;i++){\n            sum.push_back({points[i][0]+points[i][1],i});\n            dif.push_back({points[i][0]-points[i][1],i});\n        }\n        sort(sum.begin(),sum.end());\n        sort(dif.begin(),dif.end());\n        int sumM = abs(sum[n-1].first-sum[0].first);\n        int difM = abs(dif[n-1].first-dif[0].first);\n        int ind1 = -1,ind2 = -1;\n        if(sumM>difM){\n            ind1 = sum[0].second;\n            ind2 = sum[n-1].second;\n        }\n        else{\n            ind1 = dif[0].second;\n            ind2 = dif[n-1].second;\n        }\n        vector<vector<int>>take1,take2;\n        for(int i=0;i<n;i++){\n            if(i!=ind1){\n                take1.push_back(points[i]);\n            }\n            if(i!=ind2){\n                take2.push_back(points[i]);\n            }\n        }\n        int ans = min(fun(take1),fun(take2));\n        return ans;\n    }\n};"
}