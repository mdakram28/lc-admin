{
    "username": "justinleung0204",
    "submission": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        \"\"\"\n        valid if #1>=(#0)^2\n        \n        no sliding window not monotonic\n        \n        fix number of 0s, count substring which have #1s>=(#0)^2\n        \n        worst case all 0s\n        \n        l    k\n        0000011111\n        \n        5+8\n        \n        101101\n        \n        0    1 11 1  3\n        \n        1   10 101 01 1011 011 110 10 1101 101 01 10\n        \"\"\"\n        n=len(s)\n        cnt0=s.count(\"0\")\n        cnt1=n-cnt0\n        #print(\"---\")\n        #print(f\"{cnt0=}\")\n        #print(f\"{cnt1=}\")\n        \n        def count(k):#count substring which have exactly k 0s and #1s>=k**2\n            target=k**2\n            #print(target)\n            l=0\n            r=0\n            cur0=0\n            #cur1=0\n            index1=deque()  #fixed size of k**2\n            index0=deque()\n            \n            res=0\n            for r in range(n):\n                #cur1+= 1 if s[r]==\"1\" else 0\n                cur0+= 1 if s[r]==\"0\" else 0\n                if s[r]==\"1\":\n                    index1.append(r)\n                else:\n                    index0.append(r)\n                \n                #shrink until have k 0s\n                while l<=r and cur0>k:\n                    #cur1-= 1 if s[l]==\"1\" else 0\n                    cur0-= 1 if s[l]==\"0\" else 0\n                    if s[l]==\"1\":\n                        if index1[0]<=l:\n                            index1.popleft()\n                    else:\n                        index0.popleft()\n                    l+=1\n                #prune if have > k**2 1s\n                while len(index1)>target:\n                    index1.popleft()\n                \n                # if index0 and index1:\n                    #print(f\"{r=},{l=}, {index1=}, {index0=}, {min(index0[0],index1[0])-l+1}\")\n                if cur0==k:#get the index of next \"1\"\n                    if len(index1)>=target:\n                        res+= min(index0[0],index1[0])-l+1\n                        #print(f\"{r=},{l=}, {index1=}, {index0=}, {min(index0[0],index1[0])-l+1}\")\n                        \n            return res\n        \n        def count2():#count substr with no 0s\n            streak=0\n            res=0\n            for r in range(n):\n                if s[r]==\"1\":\n                    streak+=1\n                else:\n                    res+=streak*(streak+1)//2\n                    streak=0\n            res+=streak*(streak+1)//2\n            return res\n                    \n            \n                \n                \n        ans=count2()    #base: fix 0 0s, all subarray valid\n        #print(0, ans)\n        for j in range(1,cnt0+1): #iterate fix 0\n            if cnt1<j*j:\n                break\n            \n            this=count(j)\n            #print(j, this)\n            ans+=this\n            \n        return ans\n            \n        # 1   10 | 101 01 | 1011 011 | 110 10 | 1101 101 01    10",
    "submit_ts": "1722139094",
    "subm_id": "1335807685"
}