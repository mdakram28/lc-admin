{
    "username": "ARNOLD66",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    template<class T, class U>\n// T -> node, U->update.\nstruct Lsegtree{\n    vector<T>st;\n    vector<U>lazy;\n    ll n;\n    T identity_element;\n    U identity_update;\n    Lsegtree(ll n, T identity_element, U identity_update)\n    {\n        this->n = n;\n        this->identity_element = identity_element;\n        this->identity_update = identity_update;\n        st.assign(4*n,identity_element);\n        lazy.assign(4*n, identity_update);\n    }\n    T combine(T l, T r)\n    {\n        // change this function as required.\n        T ans = (l + r);\n        return ans;\n    }\n    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)\n    {\n        if(tl == tr)\n        {\n            st[v] = a[tl];\n            return;\n        }\n        ll tm = (tl + tr)>>1;\n        buildUtil(2*v + 1, tl, tm,a);\n        buildUtil(2*v + 2,tm+1,tr,a);\n        st[v] = combine(st[2*v + 1], st[2*v + 2]);\n    }\n    // change the following 2 functions, and you're more or less done.\n    T apply(T curr, U upd, ll tl, ll tr)\n    {\n        T ans = (tr-tl+1)*upd;\n        return ans;\n    }\n    U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)\n    {\n        U ans = old_upd;\n        ans=new_upd;\n        return ans;\n    }  \n    void push_down(ll v, ll tl, ll tr)\n    {\n        if(lazy[v] == identity_update)return;\n        st[v] = apply(st[v], lazy[v], tl, tr);\n        if(2*v + 2 < 4*n)\n        {\n            ll tm = (tl + tr)>>1;\n            lazy[2*v + 1] = combineUpdate(lazy[2*v+1], lazy[v], tl, tm);\n            lazy[2*v + 2] = combineUpdate(lazy[2*v+2], lazy[v], tm+1,tr);            \n        }\n        lazy[v] = identity_update;\n    }\n    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)\n    {\n        push_down(v,tl,tr);\n        if(l > r)return identity_element;\n        if(tr < l or tl > r)\n        {\n            return identity_element;\n        }\n        if(l <= tl and r >= tr)\n        {\n            return st[v];\n        }\n        ll tm = (tl + tr)>>1;\n        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));\n    }\n \n    void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)\n    {\n        push_down(v,tl,tr); \n        if(tr < l or tl > r)return;\n        if(tl >=l and tr <=r)\n        {\n            lazy[v] = combineUpdate(lazy[v],upd,tl,tr);\n            push_down(v,tl,tr);\n        }\n        else\n        {\n            ll tm = (tl + tr)>>1;\n            updateUtil(2*v+1,tl,tm,l,r,upd);\n            updateUtil(2*v+2,tm+1,tr,l,r,upd);\n            st[v] = combine(st[2*v + 1], st[2*v+2]);\n        }\n    }\n\n\n\n    void build(vector<T>a)\n    {\n        assert(a.size() == n);\n        buildUtil(0,0,n-1,a);\n    }\n    T query(ll l, ll r)\n    {\n        return queryUtil(0,0,n-1,l,r);\n    }\n    void update(ll l,ll r, U upd)\n    {\n        updateUtil(0,0,n-1,l,r,upd);\n    }\n};\n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n        vector<int>ans;\n        ll n=v.size();\n        vector<ll>dp(n,0LL);\n        for(ll i=1;i<n-1;i++){\n               if(v[i]>v[i-1]&&v[i]>v[i+1]){\n\n                 dp[i]=1;\n               }\n        }\n        Lsegtree<ll,ll>st(n,0,-1);\n        st.build(dp);\n     \n        for(auto c:q){\n               if(c[0]==1){\n                   ll x=c[1];\n                   ll y=c[2];\n                   x++;\n                   y--;\n                   if(x<=y){\n                        ans.push_back(st.query(x,y));\n                   }\n                   else{\n                           ans.push_back(0);\n                   }\n               }\n            else{\n                  ll x=c[1];\n                ll y=c[2];\n                v[x]=y;\n                if(x>0&&x<n-1&&v[x]>v[x-1]&&v[x]>v[x+1]){\n                       st.update(x,x,1LL);\n                }\n                else{\n                        st.update(x,x,0LL);\n                }\n                if(x>=2&&v[x-1]>v[x-2]&&v[x-1]>v[x]){\n                 st.update(x-1,x-1,1LL);\n                }\n                else{\n                    st.update(x-1,x-1,0LL);\n\n                }\n                if(x<n-2&&v[x+1]>v[x+2]&&v[x+1]>v[x]){\n                     st.update(x+1,x+1,1LL);\n                }\n                else{\n                       st.update(x+1,x+1,0LL);\n                }\n            \n            }\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": 1718506741.0
}