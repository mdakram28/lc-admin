{
    "username": "Bawa_547",
    "submission": "class Solution {\n    int nberOfSubmatrices(vector<vector<char>>& grid) {\n        int r = grid.size();\n        int c = grid[0].size();\n        vector<vector<int>> pX(r + 1, vector<int>(c + 1, 0));\n        vector<vector<int>> pY(r + 1, vector<int>(c + 1, 0));\n        for (int i = 1; i <= r; ++i) {\n            for (int j = 1; j <= c; ++j) {\n                pX[i][j] = pX[i-1][j] + pX[i][j-1] - pX[i-1][j-1] + (grid[i-1][j-1] == 'X' ? 1 : 0);\n                pY[i][j] = pY[i-1][j] + pY[i][j-1] - pY[i-1][j-1] + (grid[i-1][j-1] == 'Y' ? 1 : 0);\n            }\n        }\n        int cnt = 0;\n        for (int i = 1; i <= r; ++i) {\n            for (int j = 1; j <= c; ++j) {\n                int nX=pX[i][j];\n                int nY=pY[i][j];\n\n                if (nX>0&&nX==nY) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;\n    }\n    struct trinode { \n        unordered_map<char, trinode*> child; \n        vector<pair<int, int>> last_word;  \n    }; \n    class tries { \n    public: \n        trinode* root; \n        tries() { root = new trinode(); } \n \n        void insert(string &word, int ind, int val) { \n            trinode* node = root; \n            for (char c : word) { \n                if (!node->child.count(c)) \n                    node->child[c] = new trinode(); \n                node = node->child[c]; \n            } \n            node->last_word.push_back({ind, val}); \n        } \n    }; \n public:\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& vals) { \n        int n = target.size(); \n        vector<int> vec(n + 1, INT_MAX); \n        vec[0] = 0; \n \n        tries TRI; \n        for (int i = 0; i < words.size(); ++i) { \n            TRI.insert(words[i], i, vals[i]); \n        } \n        for (int i = 0; i < n; ++i) { \n            if (vec[i] != INT_MAX) {\n                trinode* node = TRI.root; \n                for (int j = i; j < n; ++j) { \n                    if (!node->child.count(target[j])) break; \n                    node = node->child[target[j]]; \n                    for (auto ele : node->last_word) { \n                        int indd = ele.first; \n                        int costt = ele.second; \n                        int len = words[indd].size(); \n                        if (i + len <= n) { \n                            vec[i + len] = min(vec[i + len], vec[i] + costt); \n                        } \n                    } \n                } \n            }\n \n        } \n        return vec[n] == INT_MAX ? -1 : vec[n]; \n    } \n};\n/*int nberOfSubmatrices(vector<vector<char>>& grid) {\n        int r = grid.size();\n        int c = grid[0].size();\n        vector<vector<int>> pX(r + 1, vector<int>(c + 1, 0));\n        vector<vector<int>> pY(r + 1, vector<int>(c + 1, 0));\n        for (int i = 1; i <= r; ++i) {\n            for (int j = 1; j <= c; ++j) {\n                pX[i][j] = pX[i-1][j] + pX[i][j-1] - pX[i-1][j-1] + (grid[i-1][j-1] == 'X' ? 1 : 0);\n                pY[i][j] = pY[i-1][j] + pY[i][j-1] - pY[i-1][j-1] + (grid[i-1][j-1] == 'Y' ? 1 : 0);\n            }\n        }\n        int cnt = 0;\n        for (int i = 1; i <= r; ++i) {\n            for (int j = 1; j <= c; ++j) {\n                int nX=pX[i][j];\n                int nY=pY[i][j];\n\n                if (nX>0&&nX==nY) {\n                    cnt++;\n                }\n            }\n        }\n        return cnt;\n    } */",
    "submit_ts": "1720323639",
    "subm_id": "1312380426"
}