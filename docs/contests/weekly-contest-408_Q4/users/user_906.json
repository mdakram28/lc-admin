{
    "username": "opalXDnaja123",
    "submission": "typedef long long ll;\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        bool visited[n];\n        fill(visited, visited + n, 0);\n        set<int> st;\n        for (int i = 0; i < n; i++) {\n            st.insert(i);\n        }\n        for (int i = 0; i < n; i++) {\n            if (visited[i]) {\n                continue;\n            }\n            bool l, r, u, d;\n            l = r = u = d = false;\n            queue<int> qu;\n            qu.push(i);\n            while (!qu.empty()) {\n                int x = qu.front();\n                qu.pop();\n                if (visited[x]) {\n                    continue;\n                }\n                visited[x] = 1;\n                l |= (circles[x][0] - circles[x][2] <= 0);\n                r |= (circles[x][0] + circles[x][2] >= X);\n                u |= (circles[x][1] + circles[x][2] >= Y);\n                d |= (circles[x][1] - circles[x][2] <= 0);\n                if ((l && r) || (u && d) || (l && d) || (r && u)) {\n                    return false;\n                }\n                st.erase(*st.find(x));\n                for (auto e : st) {\n                    if (e == x || visited[e]) {\n                        continue;\n                    }\n                    ll abx = (circles[x][0] - circles[e][0]);\n                    abx *= abx;\n                    ll aby = (circles[x][1] - circles[e][1]);\n                    aby *= aby;\n                    ll a = circles[x][2], b = circles[e][2];\n                    ll dist = (a * a + 2 * a * b + b * b);\n                    if (abx + aby <= dist && !visited[e]) {\n                        qu.push(e);\n                    }\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136527",
    "subm_id": "1335737227"
}