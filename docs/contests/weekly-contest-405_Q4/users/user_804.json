{
    "username": "Egor000",
    "submission": "class Solution {\n    \n    class Node {\n        Map<Character, Node> children = new HashMap<>();\n        \n        boolean isFinal; \n        int minCost = Integer.MAX_VALUE;\n        int len;\n        \n        public void add(String word, int cost, int pos) {\n            if (pos == word.length()) {\n                isFinal = true;\n                minCost = Math.min(cost, minCost);\n                len = word.length();\n                return;\n            }\n            char pc = word.charAt(pos);\n            \n            if (!children.containsKey(pc)) {\n                children.put(pc, new Node());\n            }\n            Node pcNode = children.get(pc);\n            pcNode.add(word, cost, pos + 1);\n        }\n        \n        public int findMinCost(String target, int pos, Integer[] dp) {\n            int intc = -1;\n            if (isFinal) {\n                if (dp[pos] != null) {\n                    intc = minCost + dp[pos];\n                    if (dp[pos - len] != null) {\n                        dp[pos - len] = Math.min(intc, dp[pos - len]);\n                    } else {\n                        dp[pos - len] = intc;\n                    }\n                }\n            }\n            if (target.length() == pos) {\n                return intc;\n            }\n            char tc = target.charAt(pos);\n            if (children.containsKey(tc)) {\n                Node node = children.get(tc);\n                int pmin = node.findMinCost(target, pos + 1, dp);\n                if (intc != -1 && pmin != -1) {\n                    return Math.min(pmin, intc);\n                } else if (pmin != -1) {\n                    return pmin;\n                } else {\n                    return intc;\n                }\n            }\n            return -1;\n            \n        }\n        \n    }\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        Node root = new Node();\n        for (int i = 0; i < words.length; i++) {\n            root.add(words[i], costs[i], 0);\n        }\n        Integer[] dp = new Integer[target.length() + 1];\n        dp[target.length()] = 0;\n        for (int i = target.length() - 1; i >= 0; i--) {\n            root.findMinCost(target, i, dp);\n        }\n        return dp[0] != null?dp[0]:-1;\n    }\n}",
    "submit_ts": "1720322606",
    "subm_id": "1312354363"
}