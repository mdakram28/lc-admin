{
    "username": "ycx02",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        //[1,0,1,2,4,3]\n        //[2,4,1]\n\n        //[0,1,2,3,3,6,5,4] max_abs = 6\n        //[4,4,4,0]\n\n        int n = nums.size();\n        // vector<int> abs_(n/2);\n        vector<int> counts(k + 1, 0);\n        vector<int> mid_num;\n        for(int i = 0; i < n / 2; ++i){\n            int num = abs(nums[i] - nums[n - i - 1]);\n            counts[num]++;\n            mid_num.push_back(num);\n        }\n        set<int> chart;\n        int max_c = 0;\n        for(int i = 0; i <= k; ++i){\n            int cur = counts[i];\n            if(max_c < cur){\n                max_c = cur;\n                chart.clear();\n                chart.insert(i);\n            }else if(max_c == cur){\n                chart.insert(i);\n            }\n        }\n        vector<int> vc(chart.begin(), chart.end());\n        sort(mid_num.begin(), mid_num.end());\n        int change;\n        if(vc.size() == 1){\n            change = change_count(nums, vc[0], k);\n        }else {\n            // find the mid one\n            if(vc.size() % 2){\n                change = change_count(nums, vc[vc.size() / 2], k);\n            }else{\n                int res1 = change_count(nums, vc[vc.size() / 2], k);\n                int res2 = change_count(nums, vc[vc.size() / 2 - 1], k);\n                change = min(res1, res2);\n            }\n        }\n        if(mid_num.size() % 2){\n            int mid = mid_num[mid_num.size() / 2];\n            change = min(change, change_count(nums, mid, k));\n        }else{\n            int mid1 = mid_num[mid_num.size() / 2];\n            int mid2 = mid_num[mid_num.size() / 2 - 1];\n            change = min(change, min(change_count(nums, mid1, k), change_count(nums, mid2, k)));\n        }\n        return change;\n    }\n\n    int change_count(vector<int>& nums, int abs_, int k){\n        int n = nums.size();\n        int res = 0;\n        for(int i = 0; i < n / 2; ++i){\n            int num = abs(nums[i] - nums[n - i - 1]);\n            if(num == abs_) continue;\n            int n1 = max(nums[i], nums[n - i - 1]);\n            int n2 = min(nums[i], nums[n - i - 1]);\n            if((n2 + abs_ > k) && (n1 - abs_ < 0)){\n                res += 2;\n            }else{\n                res += 1;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1721488467",
    "subm_id": "1327423172"
}