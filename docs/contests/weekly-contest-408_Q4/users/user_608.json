{
    "username": "VaibhavDev99",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& adj, int start, int num1, int num2, int nodes) {\n        queue<int> q;\n        vector<int> vis(nodes + 4, 0);\n        q.push(start);\n        vis[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : adj[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[num1] || vis[num2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<pair<pair<int, int>, int>> circles(circles2.size());\n        vector<vector<int>> adj(circles2.size() + 4);\n        int num = circles2.size();\n        for (int i = 0; i < num; ++i) {\n            circles[i].first.first = circles2[i][0];\n            circles[i].first.second = circles2[i][1];\n            circles[i].second = circles2[i][2];\n        }\n        for (int i = 0; i < num; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adj[num].push_back(i);\n                adj[i].push_back(num);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                adj[num + 2].push_back(i);\n                adj[i].push_back(num + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adj[num + 1].push_back(i);\n                adj[i].push_back(num + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                adj[num + 3].push_back(i);\n                adj[i].push_back(num + 3);\n            }\n            for (int j = i + 1; j < num; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        int count = 0;\n        count = max(count, bfs(adj, num, num + 1, num + 2, num + 4));\n        count = max(count, bfs(adj, num + 3, num + 2, num + 1, num + 4));\n        \n        return !count;\n    }\n};",
    "submit_ts": "1722137721",
    "subm_id": "1335771804"
}