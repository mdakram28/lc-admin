{
    "username": "intelliCode",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, S: str, K: int, Q: List[List[int]]) -> List[int]:\n        S = list(int(c) for c in S)\n        lS = len(S); lQ = len(Q)\n        j = 0\n        cntr = [0, 0]\n        cntr[S[0]] += 1\n        # retV = 0\n        listJ = [0] * lS\n        for i,b in enumerate(S):\n            while j+1<lS and (min(cntr[S[j+1]]+1, cntr[1-S[j+1]])<=K):\n                j += 1\n                cntr[S[j]] += 1\n            # retV += j-i-(min(cntr['0'], cntr['1'])>K)\n            cntr[S[i]] -= 1\n            listJ[i] = j\n        # return retV\n        \n        accJ = list(accumulate(listJ, initial=0))\n        \n        # print (listJ)\n        \n        retL = [0] * lQ\n        for i,(l,r) in enumerate(Q):\n            ind = bisect_right(listJ, r)\n            # print (i, ind)\n            if ind>r:\n                # l-1 + l + l+1 + .. + r-1 (r-l+1)\n                retL[i] = (accJ[r+1]-accJ[l]) - ((l+r-2)*(r-l+1)>>1)\n            elif ind<=l:\n                retL[i] = (r-l+1)*r - ((l+r-2)*(r-l+1)>>1)\n            else:\n                # l-1 + l + l+1 + .. + ind-2 (ind-l)\n                retL[i] = (r-ind+1)*r + (accJ[ind]-accJ[l]) - ((l+r-2)*(r-l+1)>>1)\n                \n            \n        return retL\n        ",
    "submit_ts": "1723952727",
    "subm_id": "1359803186"
}