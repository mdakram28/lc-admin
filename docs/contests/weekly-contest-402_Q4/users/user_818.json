{
    "username": "yumichael",
    "submission": "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n\n    def update(self, index, value):\n        \"\"\"Add value to index\"\"\"\n        index += 1  # Convert 0-based index to 1-based index\n        while index <= self.size:\n            self.tree[index] += value\n            index += index & -index\n\n    def query(self, index):\n        \"\"\"Return the sum of values from 0 to index\"\"\"\n        index += 1  # Convert 0-based index to 1-based index\n        sum_ = 0\n        while index > 0:\n            sum_ += self.tree[index]\n            index -= index & -index\n        return sum_\n\n    def range_query(self, left, right):\n        \"\"\"Return the sum of values from left to right\"\"\"\n        return self.query(right) - self.query(left - 1)\n\n# Example usage\nft = FenwickTree(10)\nft.update(0, 5)\nft.update(1, 3)\nft.update(4, 7)\n\n#print(ft.query(4))  # Output: 15 (5 + 3 + 7)\n#print(ft.range_query(1, 4))  # Output: 10 (3 + 7)\n\n    \n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = FenwickTree(n)\n        answer = []\n        def is_peak(index):\n            return 0 < index < n - 1 and nums[index - 1] < nums[index] and nums[index] > nums[index + 1]\n        for i in range(n):\n            tree.update(i, is_peak(i))\n        for query in queries:\n            if query[0] == 1:\n                left, right = query[1:]\n                left += 1\n                right -= 1\n                if left > right:\n                    answer.append(0)\n                else:\n                    answer.append(tree.range_query(left, right))\n            else:\n                index, value = query[1:]\n                \n                if index > 0:\n                    left_status0 = is_peak(index - 1)\n                middle_status0 = is_peak(index)\n                if index < n - 1:\n                    right_status0 = is_peak(index + 1)\n                    \n                nums[index] = value\n                \n                if index > 0:\n                    left_status1 = is_peak(index - 1)\n                    tree.update(index - 1, left_status1 - left_status0)\n                middle_status1 = is_peak(index)\n                tree.update(index, middle_status1 - middle_status0)\n                if index < n - 1:\n                    right_status1 = is_peak(index + 1)\n                    tree.update(index + 1, right_status1 - right_status0)\n            #print(query, [tree.range_query(i, i) for i in range(n)])\n        return answer\n                \n                \n        ",
    "submit_ts": 1718508838.0
}