{
    "username": "mayank5102002",
    "submission": "class Node {\n    public:\n        char val;\n        int cost;\n        bool isEnd;\n        vector<Node*> ptrs;\n\n        Node(char v){\n            this->val = v;\n            ptrs.resize(26);\n            isEnd = false;\n            cost = INT_MAX;\n        }\n};\n\nclass Solution {\npublic:\n    Node* root;\n\n    void insert(string& word, int index, Node* r, int cost){\n        if(index >= word.length()){\n            r->isEnd = true;\n            r->cost = min(r->cost, cost);\n            return;\n        }\n\n        int cc = word[index]-'a';\n        if(r->ptrs[cc] == NULL){\n            Node* nnn = new Node(word[index]);\n            \n            r->ptrs[cc] = nnn;\n        }\n        \n        insert(word, index+1, r->ptrs[cc], cost);\n    }\n    \n    void dfs(string& target, Node* r, int idx, int& i, vector<long long>& dp){\n        if(r->isEnd){\n            dp[i+1] = min(dp[i+1], r->cost + dp[idx+1]);\n        }\n        \n        if(idx < 0){\n            return;\n        }\n\n        int index = target[idx]-'a';\n        \n        if(r->ptrs[index] != NULL){\n            \n            dfs(target, r->ptrs[index], idx-1, i, dp);\n        } else {\n            return;\n        }\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new Node('0');\n        int n = words.size();\n        int len = target.length();\n        \n        for(int i = 0; i<n; i++){\n            reverse(words[i].begin(), words[i].end());\n            insert(words[i], 0, root, costs[i]);\n        }\n        \n        vector<long long> dpp(len+10, INT_MAX);\n        \n        dpp[0] = 0;\n        \n        long long ans = INT_MAX;\n        for(int i = 0; i<len; i++){\n            dfs(target, root, i, i, dpp);\n        }\n        if(dpp[len] == INT_MAX){\n            return -1;\n        }\n        return dpp[len];\n    }\n};",
    "submit_ts": "1720323285",
    "subm_id": "1312371868"
}