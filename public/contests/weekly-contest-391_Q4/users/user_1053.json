{
    "username": "JordanByrd238",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        \n        #trick is to consider manhattan distance as max(x1 + y1 - x2 - y2, ....)\n        \n        l1 = []\n        l2 = []\n\n        \n        for x, y in points:\n            \n            l1.append(x + y)\n            l2.append(-x + y)\n        \n        \n        m1, m2, m3, m4 = max(l1), min(l1), max(l2), min(l2)\n        \n        minim = max(m1 - m2, m3 - m4)\n        \n        i1, i2, i3, i4 = l1.index(m1), l1.index(m2), l2.index(m3), l2.index(m4)\n        \n        \n        minim = min(minim, max(max(l1[:i1] + l1[i1 + 1:]) - min(l1[:i1] + l1[i1 + 1:]), max(l2[:i1] + l2[i1 + 1:]) - min(l2[:i1] + l2[i1 + 1:])    ))\n        minim = min(minim, max(max(l1[:i2] + l1[i2 + 1:]) - min(l1[:i2] + l1[i2 + 1:]), max(l2[:i2] + l2[i2 + 1:]) - min(l2[:i2] + l2[i2 + 1:])    ))\n        minim = min(minim, max(max(l1[:i3] + l1[i3 + 1:]) - min(l1[:i3] + l1[i3 + 1:]), max(l2[:i3] + l2[i3 + 1:]) - min(l2[:i3] + l2[i3 + 1:])    ))\n        minim = min(minim, max(max(l1[:i4] + l1[i4 + 1:]) - min(l1[:i4] + l1[i4 + 1:]), max(l2[:i4] + l2[i4 + 1:]) - min(l2[:i4] + l2[i4 + 1:])    ))\n                    \n                    \n        return minim\n        \n            "
}