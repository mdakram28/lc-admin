{
    "username": "chetan_saini21",
    "submission": "#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\nprivate:\n    int MOD = 1e9+7;\n    int MAXI = 400;\n\n    void radhe(vector<vector<long long>>& totCnt, int length) {\n        for (int inv = 0; inv <= MAXI; inv++) {\n            for (int newPos = 0; newPos < length; newPos++) {\n                int prevInv = inv - newPos;\n                if (prevInv >= 0) {\n                    totCnt[length][inv] = (totCnt[length][inv] + totCnt[length - 1][prevInv]) % MOD;\n                }\n            }\n        }\n    }\n\n    void radhe2(vector<vector<long long>>& totCnt, unordered_map<int, int> &prfx, int length) {\n        if (prfx.find(length) != prfx.end()) {\n            int current = prfx.at(length);\n            for (int inv = 0; inv <= MAXI; inv++) {\n                if (inv != current) {\n                    totCnt[length][inv] = 0;\n                }\n            }\n        }\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> prfx;\n        for (auto &x : requirements) {\n            prfx[x[0] + 1] = x[1];\n        }\n\n        vector<vector<long long>> totCnt(n + 1, vector<long long>(MAXI + 1, 0));\n        totCnt[0][0] = 1;\n\n        for (int l = 1; l <= n; l++) {\n            radhe(totCnt, l);\n            radhe2(totCnt, prfx, l);\n        }\n\n        long long result = 0;\n        for (auto &x : totCnt[n]) {\n            result = (result + x) % MOD;\n        }\n\n        int sol = result;\n        return sol;\n    }\n};\n",
    "submit_ts": 1719070831.0
}