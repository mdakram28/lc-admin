{
    "username": "MaCTaN",
    "submission": "class Node{\n    Node* child[26];\n    bool isEnd;\n    int cost;\n    public:\n    Node(){\n        for(int i=0;i<26;i++){\n            child[i] = NULL;\n        }\n        isEnd = false;\n        cost = INT_MAX;\n    }\n    void insert(string& w,int cost){\n        Node* r = this;\n        for(int i=0;i<w.length();i++){\n            if(r->child[w[i]-'a']==NULL){\n                r->child[w[i]-'a'] = new Node();\n            }\n            r = r->child[w[i]-'a'];\n        }\n        r->isEnd = true;\n        r->cost = min(r->cost,cost);\n    }\n    int miniCost(string& t,int curr,vector<int>& memo){\n        if(curr==t.length()) return 0;\n        if(memo[curr]!=-1) return memo[curr];\n        Node* r = this;\n        int minCost = -1;\n        // cout << curr << endl;\n        for(int i=curr;i<t.length();i++){\n            if(r->child[t[i]-'a']==NULL){\n                break;\n            }\n            r = r->child[t[i]-'a'];\n            if(r->isEnd){\n                int temp = miniCost(t,i+1,memo);\n                if(temp==-1) continue;\n                if(minCost==-1 || r->cost+temp<minCost){\n                    minCost = r->cost+temp;\n                }\n            }\n        }\n        return memo[curr]=minCost;\n    }\n};\nclass Solution {\n    Node* root;\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       root = new Node();\n        int n = words.size();\n        for(int i=0;i<n;i++){\n            root->insert(words[i],costs[i]);\n        }\n        vector<int> memo(target.length(),-1);\n        return root->miniCost(target,0,memo);\n    }\n};",
    "submit_ts": "1720323552",
    "subm_id": "1312378326"
}