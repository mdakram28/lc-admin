{
    "username": "jonathanlaw",
    "submission": "class Trie:\n    def __init__(self):\n        self.trie = {}\n\n    def addWord(self, word, cost):\n        itr = self.trie\n        for ch in word:\n            if ch not in itr:\n                itr[ch] = {}\n            itr = itr[ch]\n        if 'cost' in itr:\n            itr['cost'] = min(cost, itr['cost'])\n        else:\n            itr['cost'] = cost\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n\n        tree = Trie()\n        for i in range(len(words)):\n            tree.addWord(words[i], costs[i])\n\n        @cache\n        def dfs(i):\n            nonlocal tree\n            if target[i] not in tree.trie:\n                return float('inf')\n\n            min_cost = float('inf')\n            itr = tree.trie\n\n            while i < len(target) and target[i] in itr:\n                if 'cost' in itr:\n                    min_cost = min(min_cost, itr['cost'] + dfs(i))\n                itr = itr[target[i]]\n                i += 1\n            if i == len(target) and 'cost' in itr:\n                min_cost = min(min_cost, itr['cost'])\n            elif 'cost' in itr:\n                min_cost = min(min_cost, itr['cost'] + dfs(i))\n\n            return min_cost\n\n        res = dfs(0)\n        if res == float('inf'):\n            return -1\n        return res",
    "submit_ts": "1720321904",
    "subm_id": "1312335402"
}