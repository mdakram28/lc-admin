{
    "username": "sdckivenchen",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        # smallest gaps\n        # nums within range\n        cnt = Counter(abs(a - b) for a, b in zip(nums, nums[::-1]))\n        cands = sorted(cnt)\n        target = max(cands, key=lambda x: cnt[x]) # the diff\n        target2 = max([0]+[i for i in cands if i != target], key=lambda x: cnt[x])\n        # target = cnt[stays]\n\n        # if [3, 3]\n        # let's say the number \n        \n        # some numbers are too large that the stretch is costly\n        s = 0\n        n = len(nums)\n        # print(\"target\", target)\n        for a, b in zip(nums[:len(nums)//2], nums[::-1]):\n            if abs(a-b) == target: continue\n            if abs(a-b) > target:\n                s += 1\n                continue\n            a, b = sorted((a, b))\n            if k - a < target and b < target:\n                s += 2\n            else:\n                s += 1\n        cands = [s]\n        target = target2\n        s = 0\n        for a, b in zip(nums[:len(nums)//2], nums[::-1]):\n            if abs(a-b) == target: continue\n            if abs(a-b) > target:\n                s += 1\n                continue\n            if k - a < target and b < target:\n                s += 2\n            else:\n                s += 1\n        cands.append(s)\n            \n        return min(cands)\n",
    "submit_ts": "1721488439",
    "subm_id": "548314453"
}