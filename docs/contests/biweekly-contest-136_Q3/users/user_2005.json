{
    "username": "aryansanghi008",
    "submission": "\nclass Solution\n{\npublic:    \n    const int INF = INT_MAX;\n\n    int minFlips(vector<vector<int>> &grid)\n    {\n        int n = grid.size(), m = grid[0].size(), ans = 0;\n        \n        // make 2*2 squares\n        for (int i = 0; i < n / 2; i++)\n        {\n            for (int j = 0; j < m / 2; j++)\n            {\n                vector<int> boundaryElements =\n                    {\n                        grid[i][j],\n                        grid[n - i - 1][j],\n                        grid[i][m - j - 1],\n                        grid[n - i - 1][m - j - 1]\n                    };\n\n                int c1 = count(boundaryElements.begin(), boundaryElements.end(), 1);\n                ans += min(c1, 4 - c1);\n            }\n        }\n\n        int poss = 0, cnt = 0;\n        if (m & 1)\n        {\n            for (int i = 0; i < n / 2; i++)\n            {\n                if (grid[i][m / 2] == grid[n - i - 1][m / 2])\n                {\n                    cnt += (grid[i][m / 2] == 1);\n                }\n                else\n                {\n                    ans++, poss++;\n                }\n            }\n        }\n        \n        if (n & 1)\n        {\n            for (int j = 0; j < m / 2; j++)\n            {\n                if (grid[n / 2][j] == grid[n / 2][m - j - 1])\n                {\n                    cnt += (grid[n / 2][j] == 1);\n                }\n                else\n                {\n                    ans += 1, poss++;\n                }\n            }\n        }\n\n        ans += ((n & 1) && (m & 1) && grid[n / 2][m / 2] == 1);\n        ans += 2 * ((cnt & 1) && !poss);\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722699531",
    "subm_id": "1343214524"
}