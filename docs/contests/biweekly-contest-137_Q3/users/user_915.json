{
    "username": "fast_turtle",
    "submission": "class Solution {\npublic:\n    long long dp[105][105][105];\n    long long solve(vector<vector<int>>& board, int col, int first = -1,int second = -1) {\n        if (col == board[0].size()) {\n            return LLONG_MIN;\n        }\n        if (dp[col][first + 1][second + 1] != -1) return dp[col][first + 1][second + 1];\n\n        if (first == -1) {\n            long long ans = solve(board, col + 1, first, second);\n            for (int i = 0;i < board.size();i ++) {\n                long long cur = solve(board, col + 1, i, second);\n\n                if (cur != LLONG_MIN)\n                    ans = max(ans, board[i][col] + cur);\n            }\n            return dp[col][first + 1][second + 1] = ans;\n        }\n        if (second == -1) {\n            long long ans = solve(board, col + 1, first, second);\n            for (int i = 0;i < board.size();i ++) {\n                if (i != first) {\n                    long long cur = solve(board, col + 1, first, i);\n                    if (cur != LLONG_MIN)\n                        ans = max(ans, board[i][col] + cur);\n                }\n            }\n            return dp[col][first + 1][second + 1] = ans;\n        }\n        long long maxi = INT_MIN;\n        for (int i = 0;i < board.size();i ++) {\n            if (i != first && i != second) maxi = max(maxi, 1LL*board[i][col]);\n        }\n        return dp[col][first + 1][second + 1] = max(solve(board, col + 1, first, second), maxi);\n\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        memset(dp, -1, sizeof(dp));\n        return solve(board, 0);\n    }\n};",
    "submit_ts": "1723908097",
    "subm_id": "1359138030"
}