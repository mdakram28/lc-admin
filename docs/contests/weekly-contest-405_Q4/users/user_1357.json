{
    "username": "siddhantsoam",
    "submission": "class Node{\npublic:\n    bool isEnd;\n    int cost;\n    Node* child[26];\n\n    Node(){\n        isEnd = false;\n        cost = 0;\n        for(int i=0;i<26;i++)   \n            child[i] = NULL;\n    }\n};\n\nclass Solution {\npublic:\n    Node* root = new Node();\n    \n    void insert(string s, int cost){\n        Node* p = root;\n        for(char c : s){\n            if(p->child[c-'a']==NULL)\n                p->child[c-'a'] = new Node();\n            p = p->child[c-'a'];\n        }\n        p->isEnd = true;\n        if(p->cost==0)\n            p->cost = cost;\n        else\n            p->cost = min(p->cost, cost);\n    }\n    \n    int res, len;\n    void dfs(string& target, int idx, int cost, Node* p){\n        if(idx == len){\n            // cout<<\"ss\"<<endl;\n            res = min(res, cost);\n            return;\n        }\n        \n        for(int i = idx; i<len;i++){\n            if(p->child[target[i]-'a']==NULL)\n                return;\n            p = p->child[target[i]-'a'];\n            if(p->isEnd){\n                // cout<<i<<endl;\n                dfs(target, i+1, cost+p->cost, root);\n            }\n        }\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        for (int i = 0; i < n; i++) {\n            insert(words[i], costs[i]);\n        }\n\n        int len = target.size();\n        vector<int> dp(len + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < len; i++) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* p = root;\n            for (int j = i; j < len; j++) {\n                if (p->child[target[j] - 'a'] == NULL) break;\n                p = p->child[target[j] - 'a'];\n                if (p->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + p->cost);\n                }\n            }\n        }\n\n        return dp[len] == INT_MAX ? -1 : dp[len];\n    }\n    \n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         int n = words.size();\n//         for(int i=0;i<n;i++){\n//             insert(words[i], costs[i]);\n//         }\n//         Node* p = root;\n//         res = INT_MAX;\n//         len = target.size();\n//         dfs(target, 0, 0, p);\n        \n//         return res==INT_MAX ? -1 : res;\n//     }\n};",
    "submit_ts": "1720322812",
    "subm_id": "1312359734"
}