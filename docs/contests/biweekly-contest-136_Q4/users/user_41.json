{
    "username": "hxu10",
    "submission": "class Solution(object):\n    def timeTaken(self, edges):\n        \"\"\"\n        :type edges: List[List[int]]\n        :rtype: List[int]\n        \"\"\"\n        n = len(edges) + 1\n        \n        neigh = [[] for _ in range(n)]\n        for (u,v) in edges:\n            neigh[u].append(v)\n            neigh[v].append(u)\n \n        queue = deque()\n        children = [[] for _ in range(n)]\n \n        parent = [-2]*n\n        parent[0] = -1\n        queue.append(0)\n \n \n        seq = []\n \n        while queue:\n            index = queue.popleft()\n            seq.append(index)\n            for nextindex in neigh[index]:\n                if parent[nextindex] > -2: continue \n                parent[nextindex] = index \n                children[index].append(nextindex)\n                queue.append(nextindex)\n                \n        \n                \n        \n\n        \n        \n        maxdepth = [[] for _ in range(n)]\n        maxparent = [0]*n\n \n \n        for index in seq[::-1]:\n            if len(children[index])==0:  \n                heapq.heappush(maxdepth[index],0)\n                continue \n            for nextindex in children[index]:\n                heapq.heappush(maxdepth[index], maxdepth[nextindex][-1] + 2 - nextindex%2)\n                if len(maxdepth[index]) > 2:  heapq.heappop(maxdepth[index])\n \n\n        #print(maxdepth)\n    \n    \n \n \n        ans = [0]*n\n        ans[0] = maxdepth[0][-1]\n        maxparent = [0]*n\n \n \n        for index in seq[1:]:\n            p = parent[index]\n            maxparent[index] = maxparent[p] + 2 - p % 2\n            if len(children[p])==1:\n                ans[index] = max(maxparent[index], maxdepth[index][-1])\n                continue \n                \n                \n \n\n            if maxdepth[index][-1] == maxdepth[p][-1] - (2 - index % 2):\n                maxparent[index] = max(maxparent[index], maxdepth[p][0] + 2 - p % 2)\n            else:\n                maxparent[index] = max(maxparent[index], maxdepth[p][-1] + 2 - p % 2)\n                \n            ans[index] = max(maxparent[index], maxdepth[index][-1] )\n        \n       # print(ans)\n       # print(maxparent)\n\n        \n        \n        return ans\n \n\n                \n            \n                \n                \n                \n        \n        \n        \n        \n        \n        \n",
    "submit_ts": "1722697805",
    "subm_id": "1343159551"
}