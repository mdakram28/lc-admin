{
    "username": "cfwong8",
    "submission": "class TrieNode {\npublic:\n    int end;\n    TrieNode* T[26];\n    TrieNode() {\n        for (int i=0; i<26; i++)\n            T[i] = NULL;\n        end = -1;\n    }\n};\n\nclass Trie {    \npublic:\n    /** Initialize your data structure here. */\n    TrieNode* trieRoot;\n    Trie() {\n        trieRoot = new TrieNode();\n    }\n    \n    /** Inserts a word into the trie. */\n    void insert(string word, int x, vector<int>& costs) {\n        TrieNode* cur = trieRoot;\n        for (int i=0; i<word.size(); i++) {\n            int j = word[i] - 'a';\n            if (cur->T[j] == NULL)\n                cur->T[j] = new TrieNode();\n            cur = cur->T[j];\n        }\n        cur->end = cur->end<0? x: costs[cur->end] < costs[x]? cur->end: x;        \n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie T;\n        int m = words.size();\n        for (int i=0; i<m; i++)\n            T.insert(words[i], i, costs);\n            \n        int n = target.size();\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0;\n        for (int i=0; i<n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* cur = T.trieRoot;\n            for (int j=i; j<n; j++) {\n                int k = target[j] - 'a';\n                if (cur->T[k] == NULL)\n                    break;\n                cur = cur->T[k];\n                if (cur->end >= 0)\n                    dp[j+1] = min(dp[j+1], dp[i]+costs[cur->end]);\n            }\n        }\n        return dp[n]==INT_MAX? -1: dp[n];\n    }\n};",
    "submit_ts": "1720324176",
    "subm_id": "1312393333"
}