{
    "username": "BRM",
    "submission": "class Solution {\npublic:\n    unordered_map<long, unordered_map<int, unordered_map<bool, int> > > showed; // {stair, jump, is_down, ways}\n    int find(long stair, int jump, bool is_down, int k) {\n        if (stair == k) {\n            if (showed.count(stair) && showed[stair].count(jump) && showed[stair][jump].count(is_down))\n                return 1+showed[stair][jump][is_down];\n\n            int start_from_k_ways = find(stair+pow(2, jump), jump+1, false, k);\n            if (!is_down && stair > 0) {\n                start_from_k_ways += find(stair-1, jump, true, k);\n            }\n            showed[stair][jump][is_down] = start_from_k_ways;\n            \n            return 1+start_from_k_ways;\n        }\n            \n        if (stair > k+1)\n            return 0;\n        if (showed.count(stair) && showed[stair].count(jump) && showed[stair][jump].count(is_down))\n            return showed[stair][jump][is_down];\n        \n        int ways = find(stair+pow(2, jump), jump+1, false, k);\n        if (!is_down && stair > 0) {\n            ways += find(stair-1, jump, true, k);\n        }\n        showed[stair][jump][is_down] = ways;\n        return ways;\n    }\n    \n    int waysToReachStair(int k) {\n        return find(1, 0, false, k);\n    }\n};\n\n// stair=1, jump=0",
    "submit_ts": 1716089832.0
}