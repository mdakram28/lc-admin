{
    "username": "abhinavsharma2k19",
    "submission": " \n\nclass Solution {\npublic:\n    bool canReachCorner(int width, int height, vector<vector<int>>& obstacles) {\n        return isPathClear(width, height, obstacles);\n    }\n\nprivate:\n    bool isPathClear(int width, int height, vector<vector<int>>& obstacles) {\n        int numObstacles = obstacles.size();\n        vector<vector<int>> adjacencyList(numObstacles + 4);\n\n        for (int i = 0; i < numObstacles; ++i) {\n            if (obstacles[i][0] <= obstacles[i][2]) {\n                addEdge(adjacencyList, numObstacles, i);\n            }\n            if (width - obstacles[i][0] <= obstacles[i][2]) {\n                addEdge(adjacencyList, numObstacles + 2, i);\n            }\n            if (obstacles[i][1] <= obstacles[i][2]) {\n                addEdge(adjacencyList, numObstacles + 1, i);\n            }\n            if (height - obstacles[i][1] <= obstacles[i][2]) {\n                addEdge(adjacencyList, numObstacles + 3, i);\n            }\n            for (int j = i + 1; j < numObstacles; ++j) {\n                if (areIntersecting(obstacles, i, j)) {\n                    addEdge(adjacencyList, i, j);\n                }\n            }\n        }\n\n        bool blocked = isCornerBlocked(adjacencyList, numObstacles, numObstacles + 1, numObstacles + 2, numObstacles + 4);\n        blocked = blocked || isCornerBlocked(adjacencyList, numObstacles + 3, numObstacles + 2, numObstacles + 1, numObstacles + 4);\n        \n        return !blocked;\n    }\n\n    bool areIntersecting(vector<vector<int>>& obstacles, int i, int j) {\n        double distance = sqrt(pow(obstacles[i][0] - obstacles[j][0], 2) + pow(obstacles[i][1] - obstacles[j][1], 2));\n        int radiusSum = obstacles[i][2] + obstacles[j][2];\n        return radiusSum >= distance;\n    }\n\n    void addEdge(vector<vector<int>>& adjacencyList, int u, int v) {\n        adjacencyList[u].push_back(v);\n        adjacencyList[v].push_back(u);\n    }\n\n    bool isCornerBlocked(vector<vector<int>>& graph, int start, int target1, int target2, int nodeCount) {\n        queue<int> q;\n        vector<bool> visited(nodeCount + 4, false);\n        q.push(start);\n        visited[start] = true;\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n};\n",
    "submit_ts": "1722138000",
    "subm_id": "1335779433"
}