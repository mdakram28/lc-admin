{
    "username": "BROCODES2024",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> child;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->child.count(c)) {\n                node->child[c] = new TrieNode();\n            }\n            node = node->child[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> memo(n + 1, INT_MAX);\n        memo[0] = 0;\n        Trie triee;\n        for (int i = 0; i < words.size(); ++i) {\n            triee.insert(words[i], costs[i]);\n        }\n        for (int i = 0; i < n; ++i) {\n            if (memo[i] == INT_MAX) {\n                continue;\n            }\n            TrieNode* node = triee.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) {\n                    break;\n                }\n                node = node->child[target[j]];\n                if (node->cost != INT_MAX) {\n                    memo[j + 1] = min(memo[i] + node->cost,memo[j + 1]);\n                }\n            }\n        }\n        if (memo[n] == INT_MAX) {\n            return -1;\n        } else {\n            return memo[n];\n        }\n    }\n};",
    "submit_ts": "1720323841",
    "subm_id": "1312385327"
}