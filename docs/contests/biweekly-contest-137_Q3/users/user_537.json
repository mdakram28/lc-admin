{
    "username": "Lokesh Rajput",
    "submission": "\nclass Coord {\npublic:\n    long long maxm, secondMaxm;\n    int col1, col2;\n    Coord() : maxm(-1e12), secondMaxm(-1e12), col1(-1), col2(-1) {}\n};\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n\n        vector<vector<Coord>> dpUp(n, vector<Coord>(m));\n        \n        for (int row = 1; row < n; ++row) {\n            for (int col = 0; col < m; ++col) {\n                dpUp[row][col] = dpUp[row-1][col];\n                for (int j = 0; j < m; ++j) {\n                    if (j == col) continue;\n                    if (board[row-1][j] > dpUp[row][col].maxm) {\n                        if (dpUp[row][col].col1 != j) {\n                            dpUp[row][col].secondMaxm = dpUp[row][col].maxm;\n                            dpUp[row][col].col2 = dpUp[row][col].col1;\n                        }\n                        dpUp[row][col].maxm = board[row-1][j];\n                        dpUp[row][col].col1 = j;\n                    } else if (board[row-1][j] > dpUp[row][col].secondMaxm && dpUp[row][col].col1 != j) {\n                        dpUp[row][col].secondMaxm = board[row-1][j];\n                        dpUp[row][col].col2 = j;\n                    }\n                }\n            }\n        }\n\n        vector<vector<Coord>> dpDown(n, vector<Coord>(m));\n        \n        for (int row = n-2; row >= 0; --row) {\n            for (int col = 0; col < m; ++col) {\n                dpDown[row][col] = dpDown[row+1][col];\n                for (int j = 0; j < m; ++j) {\n                    if (j == col) continue;\n                    if (board[row+1][j] > dpDown[row][col].maxm) {\n                        if (dpDown[row][col].col1 != j) {\n                            dpDown[row][col].secondMaxm = dpDown[row][col].maxm;\n                            dpDown[row][col].col2 = dpDown[row][col].col1;\n                        }\n                        dpDown[row][col].maxm = board[row+1][j];\n                        dpDown[row][col].col1 = j;\n                    } else if (board[row+1][j] > dpDown[row][col].secondMaxm && dpDown[row][col].col1 != j) {\n                        dpDown[row][col].secondMaxm = board[row+1][j];\n                        dpDown[row][col].col2 = j;\n                    }\n                }\n            }\n        }\n\n        long long ans = -1e12;\n        for (int row = 1; row < n-1; ++row) {\n            for (int col = 0; col < m; ++col) {\n                long long sum = board[row][col];\n                Coord up = dpUp[row][col];\n                Coord down = dpDown[row][col];\n\n                if (up.col1 != down.col1) {\n                    sum += up.maxm + down.maxm;\n                } else {\n                    sum += max(up.maxm + down.secondMaxm, up.secondMaxm + down.maxm);\n                }\n                ans = max(ans, sum);\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1723909818",
    "subm_id": "1359206901"
}