{
    "username": "uwu",
    "submission": "#[cfg(debug_assertions)]\nuse crate::*;\n\nimpl Solution {\n    pub fn can_reach_corner(x: i32, y: i32, circles: Vec<Vec<i32>>) -> bool {\n        let n = circles.len();\n        let mut dsu = DSU::new(n + 4);\n        let left = n;\n        let right = n + 1;\n        let bottom = n + 2;\n        let top = n + 3;\n        for i in 0..n {\n            for j in 0..n {\n                let a = &circles[i];\n                let b = &circles[j];\n                let d = (a[0] as i64 - b[0] as i64).pow(2) + (a[1] as i64 - b[1] as i64).pow(2);\n                if d <= (a[2] as i64 + b[2] as i64).pow(2) {\n                    dsu.merge(i, j);\n                }\n            }\n        }\n        for i in 0..n {\n            let cx = circles[i][0];\n            let cy = circles[i][1];\n            let r = circles[i][2];\n            if cx <= r {\n                dsu.merge(i, left);\n            }\n            if cx.abs_diff(x) <= r as u32 {\n                dsu.merge(i, right);\n            }\n            if cy <= r {\n                dsu.merge(i, bottom);\n            }\n            if cy.abs_diff(y) <= r as u32 {\n                dsu.merge(i, top);\n            }\n        }\n        if dsu.get(left) == dsu.get(right) {\n            return false;\n        }\n        if dsu.get(bottom) == dsu.get(top) {\n            return false;\n        }\n        if dsu.get(bottom) == dsu.get(left) {\n            return false;\n        }\n        if dsu.get(top) == dsu.get(right) {\n            return false;\n        }\n        true\n    }\n}\n\npub struct DSU {\n    p: Vec<isize>,\n}\n\nimpl DSU {\n    pub fn new(n: usize) -> Self {\n        DSU { p: vec![-1; n] }\n    }\n\n    pub fn get(&mut self, a: usize) -> usize {\n        if self.p[a] < 0 {\n            return a;\n        }\n        self.p[a] = self.get(self.p[a] as usize) as isize;\n        self.p[a] as usize\n    }\n\n    pub fn merge(&mut self, a: usize, b: usize) {\n        let (mut a, mut b) = (self.get(a), self.get(b));\n        if a != b {\n            if -self.p[a] < -self.p[b] {\n                std::mem::swap(&mut a, &mut b);\n            }\n            self.p[a] += self.p[b];\n            self.p[b] = a as isize;\n        }\n    }\n\n    pub fn size(&mut self, a: usize) -> usize {\n        let a = self.get(a);\n        -self.p[a] as usize\n    }\n}\n",
    "submit_ts": "1722136210",
    "subm_id": "1335727148"
}