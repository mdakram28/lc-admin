{
    "username": "sahilanand",
    "submission": "class Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> results;\n        SegmentTree segTree(nums);\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1], ri = query[2];\n                if (li < ri - 1) {\n                    results.push_back(segTree.query(li + 1, ri - 1));\n                } else {\n                    results.push_back(0);\n                }\n            } else if (query[0] == 2) {\n                int indexi = query[1], vali = query[2];\n                segTree.update(indexi, vali, nums);\n            }\n        }\n\n        return results;\n    }\n\nprivate:\n    class SegmentTree {\n    public:\n        SegmentTree(const vector<int>& nums) {\n            n = nums.size();\n            tree.resize(4 * n, 0);\n            build(nums, 0, 0, n - 1);\n        }\n\n        void update(int index, int val, vector<int>& nums) {\n            nums[index] = val;\n            update(0, 0, n - 1, index, nums);\n            if (index > 0) update(0, 0, n - 1, index - 1, nums);\n            if (index < n - 1) update(0, 0, n - 1, index + 1, nums);\n        }\n\n        int query(int left, int right) {\n            return query(0, 0, n - 1, left, right);\n        }\n\n    private:\n        int n;\n        vector<int> tree;\n\n        void build(const vector<int>& nums, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = isPeak(nums, start);\n            } else {\n                int mid = (start + end) / 2;\n                build(nums, 2 * node + 1, start, mid);\n                build(nums, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        void update(int node, int start, int end, int index, const vector<int>& nums) {\n            if (start == end) {\n                tree[node] = isPeak(nums, start);\n            } else {\n                int mid = (start + end) / 2;\n                if (index <= mid) {\n                    update(2 * node + 1, start, mid, index, nums);\n                } else {\n                    update(2 * node + 2, mid + 1, end, index, nums);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int query(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return 0;\n            }\n            if (left <= start && end <= right) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int left_sum = query(2 * node + 1, start, mid, left, right);\n            int right_sum = query(2 * node + 2, mid + 1, end, left, right);\n            return left_sum + right_sum;\n        }\n\n        int isPeak(const vector<int>& nums, int index) {\n            if (index <= 0 || index >= nums.size() - 1) return 0;\n            return nums[index] > nums[index - 1] && nums[index] > nums[index + 1] ? 1 : 0;\n        }\n    };\n};\n",
    "submit_ts": "1718507006",
    "subm_id": "1289638090"
}