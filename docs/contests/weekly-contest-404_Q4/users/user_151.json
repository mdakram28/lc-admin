{
    "username": "zh_jerry_yu",
    "submission": "using vi = vector<int>;\n\nclass Solution {\npublic:\n\n    void find_maxd_c(int r, int p, vi& maxd_c, vector<vi>& adj){\n        // fill maxd_c, max distance from each node to any of its children\n        for (int c: adj[r]){\n            if (c == p) { continue; }\n            find_maxd_c(c, r, maxd_c, adj);\n            maxd_c[r] = max(maxd_c[r], maxd_c[c] + 1);\n        }\n    }\n\n\n    void find_maxd(int r, int p, int maxd_p, vi& maxd_c, vi& maxd, vector<vi>& adj){\n        // find maxd for each node, which is max of max(maxd_c[c]) and maxd_p. O(n).\n        // alternatively, see https://codeforces.com/blog/entry/114644 D for simpler sol.\n        int fmaxd_c = 0;  // first max dist, i.e. max dist. should be equal to maxd_c[r].\n        int smaxd_c = 0;  // second max dist\n        for (int c: adj[r]){\n            if (c == p) { continue; }\n            if (maxd_c[c] + 1 >= fmaxd_c){\n                smaxd_c = fmaxd_c; fmaxd_c = maxd_c[c] + 1;\n            } else if (maxd_c[c] + 1 >= smaxd_c){\n                smaxd_c = maxd_c[c] + 1;\n            }\n        }\n        maxd[r] = max(maxd_p, fmaxd_c);\n        for (int c: adj[r]){\n            if (c == p) { continue; }\n            find_maxd(c, r, max(maxd_p, (maxd_c[c] + 1 == fmaxd_c ? smaxd_c : fmaxd_c)) + 1, maxd_c, maxd, adj);\n        }\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = (int)edges1.size() + 1;\n        int m = (int)edges2.size() + 1;\n\n        vector<vi> adj1(n);\n        for (vi& e: edges1){\n            int u = e[0];\n            int v = e[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n\n        vector<vi> adj2(m);\n        for (vi& e: edges2){\n            int u = e[0];\n            int v = e[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n\n        vi maxd_c1(n);\n        find_maxd_c(0, -1, maxd_c1, adj1);\n        vi maxd1(n);\n        find_maxd(0, -1, 0, maxd_c1, maxd1, adj1);\n\n        vi maxd_c2(m);\n        find_maxd_c(0, -1, maxd_c2, adj2);\n        vi maxd2(m);\n        find_maxd(0, -1, 0, maxd_c2, maxd2, adj2);\n\n        int r1 = *min_element(maxd1.begin(), maxd1.end());\n        int r2 = *min_element(maxd2.begin(), maxd2.end());\n        // cout << r1 << \" \" << r2 << \"\\n\";\n        int res = r1 + r2 + 1;\n        int s1 = *max_element(maxd1.begin(), maxd1.end());\n        int s2 = *max_element(maxd2.begin(), maxd2.end());\n        res = max(res, s1);\n        res = max(res, s2);\n        return res;\n    }\n};",
    "submit_ts": 1719716605.0
}