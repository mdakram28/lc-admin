{
    "username": "uwi",
    "submission": "\tclass Solution {\n\t\tpublic int minimumDistance(int[][] points) {\n\t\t\tint n = points.length;\n\t\t\tint[][] co = new int[n][];\n\t\t\tfor(int i = 0;i < n;i++){\n\t\t\t\tco[i] = new int[]{points[i][0]+points[i][1], points[i][0]-points[i][1], i};\n\t\t\t}\n\t\t\tList<int[]> all = new ArrayList<>();\n\t\t\tArrays.sort(co, (x, y) -> {\n\t\t\t\tif (x[0] != y[0]) return x[0] - y[0];\n\t\t\t\treturn (x[1] - y[1]);\n\t\t\t});\n\t\t\tall.add(co[0]);\n\t\t\tall.add(co[1]);\n\t\t\tall.add(co[2]);\n\t\t\tall.add(co[n-1]);\n\t\t\tall.add(co[n-2]);\n\t\t\tall.add(co[n-3]);\n\t\t\tArrays.sort(co, (x, y) -> {\n\t\t\t\tif (x[1] != y[1]) return x[1] - y[1];\n\t\t\t\treturn (x[0] - y[0]);\n\t\t\t});\n\t\t\tall.add(co[0]);\n\t\t\tall.add(co[1]);\n\t\t\tall.add(co[2]);\n\t\t\tall.add(co[n-1]);\n\t\t\tall.add(co[n-2]);\n\t\t\tall.add(co[n-3]);\n\n\t\t\tlong ans = Long.MAX_VALUE;\n\t\t\tfor(int i = 0;i < all.size();i++){\n\t\t\t\tint id = all.get(i)[2];\n\t\t\t\tlong max = Long.MIN_VALUE;\n\t\t\t\tfor(int j = 0;j < all.size();j++){\n\t\t\t\t\tfor(int k = j+1;k < all.size();k++){\n\t\t\t\t\t\tint[] a = all.get(j);\n\t\t\t\t\t\tint[] b = all.get(k);\n\t\t\t\t\t\tif(a[2] == id || b[2] == id)continue;\n\t\t\t\t\t\tlong d = Math.max(Math.abs(a[0]-b[0]), Math.abs(a[1]-b[1]));\n\t\t\t\t\t\tmax = Math.max(max, d);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tans = Math.min(ans, max);\n\t\t\t}\n\t\t\treturn (int)ans;\n\t\t}\n\t}\n"
}