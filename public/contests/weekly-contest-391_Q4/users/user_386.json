{
    "username": "harsh_bang7",
    "submission": "class Solution\n{\npublic:\n    pair<int, int> MaxDist(vector<pair<int, int>> &A, int N)\n    {\n        int minsum, maxsum, mindiff, maxdiff;\n        int ind1 = 0, ind2 = 0, ind3 = 0, ind4 = 0;\n        minsum = maxsum = A[0].first + A[0].second;\n        mindiff = maxdiff = A[0].first - A[0].second;\n        for (int i = 1; i < N; i++)\n        {\n            int sum = A[i].first + A[i].second;\n            int diff = A[i].first - A[i].second;\n            if (sum < minsum)\n                minsum = sum, ind1 = i;\n            else if (sum > maxsum)\n                maxsum = sum, ind2 = i;\n            if (diff < mindiff)\n                mindiff = diff, ind3 = i;\n            else if (diff > maxdiff)\n                maxdiff = diff, ind4 = i;\n        }\n\n        int maximum = max(maxsum - minsum, maxdiff - mindiff);\n        if ((maxsum - minsum) > (maxdiff - mindiff))\n        {\n            return {ind1, ind2};\n        }\n        return {ind3, ind4};\n    }\n    int minimumDistance(vector<vector<int>> &points)\n    {\n        vector<pair<int, int>> v;\n        int ans = 1e9;\n        for (auto it : points)\n        {\n            v.push_back({it[0], it[1]});\n        }\n        pair<int, int> p = MaxDist(v, v.size());\n        pair<int, int> temp = p;\n        v.clear();\n        // cout<<temp.first<<\" \"<<temp.second<<'\\n';\n        for (int i = 0; i < points.size(); i++)\n        {\n            if (i != temp.first)\n            {\n                v.push_back({points[i][0], points[i][1]});\n            }\n        }\n        p = MaxDist(v, v.size());\n        ans = min(ans, abs(v[p.first].first - v[p.second].first) + abs(v[p.second].second - v[p.first].second));\n        // cout << v[p.first].first << \" \" << v[p.second].first << '\\n';\n        v.clear();\n        for (int i = 0; i < points.size(); i++)\n        {\n            if (i != temp.second)\n            {\n                v.push_back({points[i][0], points[i][1]});\n            }\n        }\n        p = MaxDist(v, v.size());\n        // cout << v[p.first].first << \" \" << v[p.second].first << '\\n';\n        ans = min(ans, abs(v[p.first].first - v[p.second].first) + abs(v[p.second].second - v[p.first].second));\n        return ans;\n    }\n};"
}