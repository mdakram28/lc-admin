{
    "username": "JasonL14",
    "submission": "from sortedcontainers import SortedList\nimport bisect\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        beginnings = SortedList()\n        ends = SortedList()\n\n        currentDistance = n-1\n\n        res = []\n\n        for query in queries:\n            begin, end = query\n\n            begin_index = beginnings.bisect_left(begin)\n            end_index = ends.bisect_left(end)\n\n            begin_exists = begin_index < len(beginnings) and beginnings[begin_index] == begin\n            end_exists = end_index < len(ends) and ends[end_index] == end\n\n            if len(beginnings) == 0:\n                beginnings.add(begin)\n                ends.add(end)\n                currentDistance -= (end - begin - 1)\n\n            elif begin_exists and ends[begin_index] >= end:\n                pass\n            elif end_exists and beginnings[end_index] <= begin:\n                pass\n            elif end_index < begin_index:\n                pass\n            # elif end_index == begin_index:\n            #     beginnings.add(begin)\n            #     ends.add(end)\n            #     currentDistance -= (end - begin - 1)\n            else:\n                i = begin_index\n                while i < len(beginnings):\n                    if ends[i] <= end:\n                        old_begin = beginnings.pop(i)\n                        old_end = ends.pop(i)\n\n                        currentDistance += (old_end - old_begin - 1)\n                        did_add = True\n                    else:\n                        break\n\n                beginnings.add(begin)\n                ends.add(end)\n                currentDistance -= (end - begin - 1)\n            \n            res.append(currentDistance)\n\n        return res\n\n",
    "submit_ts": "1722742227",
    "subm_id": "1343764036"
}