{
    "username": "vanshcodes583",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int f(int ind,string &target,Trie &trie,vector<int>&dp){\n        if(ind>=target.size()) return 0;\n        if(dp[ind]!=-1) return dp[ind];\n        int ans=1e9;\n        TrieNode* node = trie.root;\n        for(int j=ind;j<target.size();j++){\n            // string temp=target.substr(ind,j-ind+1);\n            // if(st.find(temp)!=st.end()){\n            //     ans=min(ans,st[temp]+f(j+1,target,st,dp));\n            // }\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            if(node->cost!=INT_MAX){\n                ans=min(ans,node->cost+f(j+1,target,trie,dp));\n            }\n        }\n        return dp[ind]=ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        vector<int>dp(n+1,-1);\n        map<string,int>st;\n        Trie trie;\n        \n        for(int i=0;i<words.size();i++){\n            trie.insert(words[i],costs[i]);\n        }\n        \n        int ans=f(0,target,trie,dp);\n        return ans>=1e9?-1:ans;\n    }\n};",
    "submit_ts": "1720323522",
    "subm_id": "1312377621"
}