{
    "username": "justinleung0204",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        \"\"\"\n        n is even\n        0 1 2 ... -3 -2 -1\n        want all symmetric pair with same abs\n        \n        0 1 2 3\n        \n        bad assumption: can always set one element to make the pair to have ANY abs value\n        \n        k=6\n        0 0 0 1 \n        6 6 6 5 <= cannot set to abs==6\n        \n        get the max abs that every pair can achieve first\n        \n        some set need 2 ops, some need 1\n        if both same freq, choose smaller value\n        \"\"\"\n        n=len(nums)\n        a0=nums[:n//2]\n        a1=nums[n//2:][::-1]\n        n=len(a0)\n        # print(a0)\n        # print(a1)\n        \n        m=Counter([abs(a-b) for a,b in zip(a0,a1)])\n        # print(m)\n        minKey=None\n        maxFreq=0\n        for key,val in m.items():\n            if val>maxFreq:\n                maxFreq=val\n                minKey=key\n            elif val==maxFreq and k<minKey:\n                minKey=key\n        #print(f\"{minKey=} {maxFreq=}\")\n        \"\"\"\n        naive: try to achieve the minKey\n        \"\"\"\n        \n        def go(x):\n            res = 0\n            for i in range(n):\n                if x != abs(a0[i] - a1[i]):\n                    a, b = min(a0[i], a1[i]), max(a0[i], a1[i])\n                    if k - a >= x or b - 0 >= x:\n                        res += 1\n                    else:\n                        res += 2 # need to move both\n\n            return res\n\n\n        INF=10**20\n        ans=INF\n        ans=min(ans, go(minKey))\n        prev=minKey\n        \n        minKey=None\n        maxFreq=0\n        for key,val in m.items():\n            if key>=prev:\n                continue\n                \n            if val>maxFreq:\n                maxFreq=val\n                minKey=key\n            elif val==maxFreq and k<minKey:\n                minKey=key\n        #print(f\"{minKey=} {maxFreq=}\")\n        if minKey is not None:\n            ans=min(ans, go(minKey))\n        \n        return ans\n    \"\"\"\n    0 0 0 4 4 4\n    9 9 9 6 6 5\n    k=9\n    \n    also try most freq that abs<=k//2?\n    \n    [1,1,1,1,0,0,0,5,4,3,19,17,16,15,15,15,19,19,19,19]\n    20\n    expect 7\n    \"\"\"\n        ",
    "submit_ts": "1721489065",
    "subm_id": "1327441763"
}