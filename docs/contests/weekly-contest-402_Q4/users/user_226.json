{
    "username": "M-Manas-s",
    "submission": "class Solution {\n    \nstruct ST\n{\n    vector<int> t;\n    int N,ignore_val;\n\n    void build(int v, int tl, int tr, vector<int> &arr)\n    {\n        if (tl == tr)\n        {\n            t[v] = arr[tl];\n            return;\n        }\n\n        int mid = (tl + tr) / 2;\n        build(2 * v, tl, mid, arr);\n        build(2 * v + 1, mid + 1, tr, arr);\n        t[v] = t[2 * v] + t[2 * v + 1];\n    }\n\n    ST(vector<int> &A) \n    {\n        N = A.size();\n        t.assign(4 * N + 5, 0);\n        ignore_val = 0;\n        build(1,0,N-1,A);\n    }\n\n    void update( int v, int tl, int tr, int pos, int x ) \n    {\n        if ( tl > pos || tr < pos ) return;\n\n        if (tl == tr) {\n            t[v] = x;\n            return;\n        }\n\n        int mid = (tl + tr) / 2;\n        update(2 * v, tl, mid, pos, x);\n        update(2* v + 1, mid+1, tr, pos, x);\n        t[v] = t[2 * v] + t[2 * v + 1];\n    }\n\n    int query( int v,int tl, int tr, int ql, int qr) \n    {\n        if (tr < ql || qr < tl )\n            return 0;\n        if ( ql <= tl && tr <= qr)\n            return t[v];\n\n        int mid = (tl + tr) / 2;\n        return query(2 * v, tl, mid, ql, qr) +\n               query(2 * v + 1, mid + 1, tr, ql, qr);\n    }\n    \n    void update(int pos,int x)\n    {\n        update(1,0,N-1,pos,x);\n    }\n\n    int query(int ql,int qr)\n    {   \n        return query(1,0,N-1,ql,qr);\n    }\n};\n    \npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        \n        int n = a.size();\n        vector<int> k(n),ans;\n        \n        for ( int i = 1; i < n - 1; i++ ) {\n            if ( a[i] > a[i-1] && a[i] > a[i+1] )\n                k[i] = 1;\n        }\n        \n        ST st(k);\n        \n        for ( int i = 0; i < q.size(); i++ ) {\n            \n            int ch = q[i][0];\n            \n            if ( ch == 1 ) {\n                int l,r;\n                l = q[i][1], r = q[i][2];\n                if ( r - l + 1 == 2 )\n                    ans.push_back(0);\n                else\n                    ans.push_back(st.query(l+1,r-1));\n            } else {\n                int pos = q[i][1], x = q[i][2];\n                \n                a[pos] = x;\n                \n                // check left\n                \n                if ( pos > 1 ) {\n                    int nk = a[pos-1] > a[pos] && a[pos-1] > a[pos-2];\n                    st.update(pos-1,nk);\n                }\n                \n                // check right\n                \n                if ( pos < n - 2 ) {\n                    int nk = a[pos+1] > a[pos] && a[pos+1] > a[pos+2];\n                    st.update(pos+1,nk);\n                }\n                \n                // check self\n                \n                if ( pos != 0 && pos != n-1 ) {\n                    int nk = a[pos] > a[pos+1] && a[pos] > a[pos-1];\n                    st.update(pos,nk);\n                }\n                \n            }\n            \n        }\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": 1718506839.0
}