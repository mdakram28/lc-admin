{
    "username": "VINEET KUMAR VERMA",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<pair<int, int>>> topValues(board.size());\n        for (int row = 0; row < board.size(); ++row) {\n            vector<pair<int, int>> candidates;\n            for (int col = 0; col < board[0].size(); ++col) {\n                candidates.push_back({board[row][col], col});\n            }\n            sort(candidates.rbegin(), candidates.rend());\n            for (int i = 0; i < min(3, (int)candidates.size()); ++i) {\n                topValues[row].push_back(candidates[i]);\n            }\n        }\n        long long maxSum = LLONG_MIN;\n        for (int row1 = 0; row1 < board.size(); ++row1) {\n            for (int row2 = row1 + 1; row2 < board.size(); ++row2) {\n                for (int row3 = row2 + 1; row3 < board.size(); ++row3) {\n                    for (auto &val1 : topValues[row1]) {\n                        for (auto &val2 : topValues[row2]) {\n                            if (val2.second == val1.second) continue;\n                            for (auto &val3 : topValues[row3]) {\n                                if (val3.second == val1.second || val3.second == val2.second) continue;\n                                long long currentSum = static_cast<long long>(val1.first) + val2.first + val3.first;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxSum;\n    }\n};",
    "submit_ts": "1723908318",
    "subm_id": "1359147579"
}