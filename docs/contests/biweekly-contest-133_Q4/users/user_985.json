{
    "username": "adis176",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int numElements, vector<vector<int>>& inversionConstraints) {\n        unordered_map<int, int> m;\n        for (int i=0; i<inversionConstraints.size(); i++) {\n            m[inversionConstraints[i][0]+1] = inversionConstraints[i][1];\n        }\n        \n        int modu = 1000000007;\n        int cnt = 400;\n        int n = numElements;\n\n        vector<vector<long long>> vis(n+2, vector<long long>(cnt+1, 0));\n        vis[0][0] = 1;\n        \n        for (int pos=1; pos<n+1; pos++) {\n            for (int j=0; j<cnt+1; j++) {\n                for (int k=0; k<pos; k++) {\n                    if ((k-j) <= 0) {\n                        vis[pos][j] = (vis[pos][j] + vis[pos-1][j-k]) % modu;\n                    }\n                }\n            }\n\n            if (m.count(pos)) {\n                int sum=m[pos];\n                for (int j=0; j<=cnt; j++) {\n                    if (j!=  sum) {\n                        vis[pos][j] = 0;\n                    }\n                }\n            }\n        }\n\n        long long ans = 0;\n        for (int i=0; i<vis[n].size(); i++) {\n            ans = ans + vis[n][i];\n            ans %=modu;\n        }\n        ans%=modu;\n        return ans;\n    }\n};\n",
    "submit_ts": 1719071738.0
}