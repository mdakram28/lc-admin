{
    "username": "devygonzalez",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        #if no circles intersect, we are guaranteed a path. \n        #idea: union intersecting circles together to get regions.\n        #say we have unioned all circles together such that we get \n        #a collection of disjoint regions. Is it true that if no region\n        #spans the vertical length of the rectangle, then we have a path?\n\n        #counterexample - circle in bottom left corner that traps us in bottom left corner\n\n        #we also need to consider circle-rectangle collisions. These seem to be important.\n\n        #if a disjoint region intersects a horizontal and vertical part of the rectangle,\n        #it is impossible.\n        #Thus - we fail if a disjoint region has vertical-vertical intersection or \n        #horizontal - vertical intersection on (bottom + left, top + right),\n        #or horizontal-horizontal intersection.\n\n        #this seems kind of like union find. Assume that we have a graph of circles with \n        #all pairswise edges. Then we can run union find on this graph to find the\n        #number of disjoint regions, and store necessary collision information about them.\n\n\n        par = [i for i in range(len(circles))]\n        rank = [1 for i in range(len(circles))]\n        vals = [[False for j in range(4)] for i in range(len(circles))]\n\n        def find(node):\n            while node != par[node]:\n                node = par[node]\n            return node\n\n        def union(node1, node2):\n            p1, p2 = find(node1), find(node2)\n\n            if p1 == p2:\n                return True\n\n            if rank[p1] > rank[p2]:\n                rank[p1] += rank[p2]\n                for i in range(4):\n                    vals[p1][i] |= vals[p2][i]\n                par[p2] = p1\n            else:\n                rank[p2] += rank[p1]\n                for i in range(4):\n                    vals[p2][i] |= vals[p1][i]\n                par[p1] = p2\n\n            return False\n\n\n        def circles_intersect(x1, y1, r1, x2, y2, r2):\n            distance = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            \n            return distance <= r1 + r2 and distance >= abs(r1 - r2)\n        \n        for i in range(len(circles)):\n\n            x, y, r = circles[i]\n            if x - r <= 0 and x + r >= 0:\n                vals[i][0] = True\n            if x - r <= X and x + r >= X:\n                vals[i][1] = True\n            if y - r <= 0 and y + r >= 0:\n                vals[i][2] = True\n            if y - r <= Y and y + r >= Y:\n                vals[i][3] = True\n\n            for j in range(i):\n                if circles_intersect(*circles[i], *circles[j]):\n                    union(i, j)\n            \n\n        for x1, x2, y1, y2 in vals:\n            if x1 and x2:\n                return False\n            if y1 and y2:\n                return False\n            if x1 and y1:\n                return False\n            \n            if x2 and y2:\n                return False\n            \n\n        return True",
    "submit_ts": "1722135699",
    "subm_id": "1335710673"
}