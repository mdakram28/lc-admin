{
    "username": "ypl891218",
    "submission": "class Solution {\npublic:\n    int maxStep;\n    int furthest;\n    \n    void dfs(vector<vector<int>>& edges, int cur, int prev, int steps) {\n        for (auto next: edges[cur]) {\n            if (next == prev) {\n                continue;\n            }\n            dfs(edges, next, cur, steps+1);\n        }\n        if (maxStep < steps) {\n            maxStep = steps;\n            furthest = cur;\n        }\n    }\n    \n    int getDiameter(vector<vector<int>>& edges) {\n        maxStep = furthest = 0;\n        dfs(edges, 0, -1, 1);\n        maxStep = 0;\n        // cout << \"furthest1: \" << furthest << endl;\n        dfs(edges, furthest, -1, 1);\n        // cout << \"furthest2: \" << furthest << endl;\n        return maxStep;\n    }\n    \n    void getGraph(vector<vector<int>>& edges, vector<vector<int>>& graph) {\n        for (auto& edge: edges) {\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int>> graph1(edges1.size()+1);\n        vector<vector<int>> graph2(edges2.size()+1);\n        getGraph(edges1, graph1);\n        getGraph(edges2, graph2);\n        \n        int dia1 = getDiameter(graph1);\n        int dia2 = getDiameter(graph2);\n        \n        if (dia1 < dia2) {\n            int tmp = dia1;\n            dia1 = dia2;\n            dia2 = tmp;\n        }\n\n        return max(dia1 / 2 + dia2 / 2 + 1, dia1 - 1);\n    }\n};",
    "submit_ts": "1719718532",
    "subm_id": "1304419572"
}