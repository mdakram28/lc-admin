{
    "username": "jacobj2",
    "submission": "#define ll long long\nstruct SparseTable{\n    vector<vector<int>> table;\n    SparseTable(vector<int> nums){\n        table.resize(nums.size(),vector<int> (20));\n        for (int i = 0; i < nums.size(); i++){\n            table[i][0]=nums[i];\n        }\n        for (int j = 1; j < 20; j++){\n            for (int i = 0; i+(1<<j)<=nums.size();i++){\n                table[i][j]=table[i][j-1]&table[i+(1<<(j-1))][j-1];\n            }\n        }\n    }\n    int query(int left, int right){\n        int length = right-left+1;\n        int bit = 31-__builtin_clz(length);\n        return table[left][bit]&table[right-(1<<bit)+1][bit];\n    }\n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        ll res = 0;\n        SparseTable st (nums);\n        for (int i = 0; i < nums.size(); i++){\n            int lp = i;\n            int rp = nums.size() - 1;\n            while (lp<=rp){\n                int mid = (lp+rp)>>1;\n                int ad = st.query(i,mid);\n                if (ad>k){\n                    lp=mid+1;\n                }\n                else{\n                    rp = mid-1;\n                }\n            }\n            if (st.query(i,lp)!=k){\n                continue;\n            }\n            int first = lp;\n            rp = nums.size()-1;\n            while (lp<=rp){\n                int mid = (lp+rp)>>1;\n                int ad = st.query(i,mid);\n                if (ad>=k){\n                    lp=mid+1;\n                }\n                else{\n                    rp=mid-1;\n                }\n            }\n            if (st.query(i,rp)==k){\n                res+=rp-first+1;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720277300",
    "subm_id": "1311657281"
}