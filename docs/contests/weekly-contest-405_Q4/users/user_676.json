{
    "username": "wddd",
    "submission": "class Solution {\n    private static class Node {\n        private int cost = Integer.MAX_VALUE;\n        private final Node[] next = new Node[26];\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Node root = new Node();\n        for (int i = 0; i < words.length; i++) {\n            put(root, words[i], costs[i]);\n        }\n\n        long[] dp = new long[target.length() + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n\n        for (int i = 0; i < words.length; i++) {\n            search(root, target, 0, dp, 0);\n\n//            if (target.startsWith(words[i])) {\n//                dp[words[i].length()] = Math.min(dp[words[i].length()], costs[i]);\n//            }\n        }\n\n        for (int i = 1; i < dp.length - 1; i++) {\n            if (dp[i] != Integer.MAX_VALUE) {\n                search(root, target, i, dp, dp[i]);\n//                 for (int j = 0; j < words.length; j++) {\n//                     search(root, target, i, dp, dp[i]);\n\n// //                    if (target.startsWith(words[j], i)) {\n// //                        dp[i + words[j].length()] = Math.min(dp[i + words[j].length()], dp[i] + costs[j]);\n// //                    }\n//                 }\n            }\n        }\n\n        return dp[dp.length - 1] == Integer.MAX_VALUE ? -1 : (int) dp[dp.length - 1];\n    }\n\n    private void search(Node root, String target, int start, long[] dp, long base) {\n        Node node = root;\n\n        for (int i = start; i < target.length(); i++) {\n            node = node.next[target.charAt(i) - 'a'];\n            if (node == null) {\n                return;\n            }\n            if (node.cost != Integer.MAX_VALUE) {\n                dp[i + 1] = Math.min(dp[i + 1], base + node.cost);\n            }\n        }\n    }\n\n    private void put(Node root, String word, int cost) {\n        Node node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (node.next[word.charAt(i) - 'a'] == null) {\n                node.next[word.charAt(i) - 'a'] = new Node();\n            }\n            node = node.next[word.charAt(i) - 'a'];\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n}",
    "submit_ts": "1720322369",
    "subm_id": "1312348056"
}