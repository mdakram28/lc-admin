{
    "username": "LarryNY",
    "submission": "INF = 10 ** 20\nclass Container:\n    def __init__(self):\n        self.min_x = INF\n        self.max_x = -INF\n        self.min_y = INF\n        self.max_y = -INF\n    \n    def add(self, x, y):\n        if x < self.min_x:\n            self.min_x = x\n        if x > self.max_x:\n            self.max_x = x\n        if y < self.min_y:\n            self.min_y = y\n        if y > self.max_y:\n            self.max_y = y\n            \n    def get_area(self):\n        return (self.max_x - self.min_x + 1) * (self.max_y - self.min_y + 1)\n\nclass Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        best = INF\n        \n        def brute_h(grid):\n            R = len(grid)\n            C = len(grid[0])\n\n            best = R * C\n            # 0 to i inclusive\n            for i in range(R):\n                # i + 1 to j inclusive\n                for j in range(i + 1, R):\n                    c = [Container() for _ in range(3)]\n                    \n                    for x in range(R):\n                        for y in range(C):\n                            if grid[x][y] == 1:\n                                if 0 <= x <= i:\n                                    c[0].add(x, y)\n                                elif i + 1 <= x <= j:\n                                    c[1].add(x, y)\n                                else:\n                                    c[2].add(x, y)\n                    \n                    best = min(best, c[0].get_area() + c[1].get_area() + c[2].get_area())\n                    #print(i, j, c[0].get_area(), c[1].get_area(), c[2].get_area())\n            return best\n        \n        def brute_d(grid):\n            R = len(grid)\n            C = len(grid[0])\n\n            best = R * C\n\n            # 0 to i inclusive is first part\n            for i in range(R):\n                # i + 1 to R inclusive -> subdivide to 0 to j inclusive\n                for j in range(C):\n                    c = [Container() for _ in range(3)]\n                    \n                    for x in range(R):\n                        for y in range(C):\n                            if grid[x][y] == 1:\n                                if 0 <= x <= i:\n                                    c[0].add(x, y)\n                                elif 0 <= y <= j:\n                                    c[1].add(x, y)\n                                else:\n                                    c[2].add(x, y)\n                    best = min(best, c[0].get_area() + c[1].get_area() + c[2].get_area())\n                    #print(i, j, c[0].get_area(), c[1].get_area(), c[2].get_area())\n            return best\n                    \n        # two horizontal lines\n        best = min(best, brute_h(grid))\n        rot1 = list(zip(*reversed(grid)))\n        best = min(best, brute_h(rot1))\n        \n        best = min(best, brute_d(grid))\n        best = min(best, brute_d(rot1))\n        rot2 = list(zip(*reversed(rot1)))\n        best = min(best, brute_d(rot2))\n        rot3 = list(zip(*reversed(rot2)))\n        best = min(best, brute_d(rot3))\n        \n        return best\n        \n                ",
    "submit_ts": 1719112118.0
}