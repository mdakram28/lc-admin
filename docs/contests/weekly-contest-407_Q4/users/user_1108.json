{
    "username": "papaChong",
    "submission": "class Solution {\npublic:\n/*\n\n    // 1 2 3 => 0\n    // 0 1 2\n    // 0 0 1\n    // 0 0 0 => 3\n\n    // 1 -2 3\n    // 3 0 5\n    // 0 0 2\n    // 0 0 0\n\n    // -1 -1 -1 -2\n    // -1 2 -2\n\n    // 0 -3 1 9 -3 -1 -5 -3 -4 -2\n    // \n*/\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        using ll = long long;\n        int n = nums.size();\n\n        std::vector<int> diff(n);\n        for (int i = 0; i < n; i++) {\n            diff[i] = nums[i] - target[i];\n        }\n\n        ll ans = 0, sum = 0;\n        for (int i = 0; i < n;) {\n            std::priority_queue<int, std::vector<int>, std::greater<int>> pq;\n            bool isPos = diff[i] > 0;\n            bool needReset = true;\n\n            if (diff[i] == 0) {\n                i++;\n                continue;\n            }\n\n            while (i < n && !((diff[i] > 0) ^ isPos) && diff[i]) {\n                pq.push(std::abs(diff[i]));\n                i++;\n\n                if (i < n && !((diff[i] > 0) ^ isPos)) {\n                    int curr = std::abs(diff[i - 1]);\n                    int next = std::abs(diff[i]);\n                    if (curr < next) {\n                        needReset = false;\n                        break;\n                    }\n                }\n            }\n\n            int deliver = pq.top();\n            \n            while (!pq.empty()) {\n                int need = std::abs(pq.top());\n                pq.pop();\n\n                if (sum < need) {\n                    ans += need - sum;\n                    sum = need;\n                }\n            }\n\n            if (needReset) {\n                sum = 0;\n            }\n            else {\n                sum = deliver;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721532098",
    "subm_id": "1327977582"
}