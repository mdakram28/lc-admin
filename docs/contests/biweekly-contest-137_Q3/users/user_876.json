{
    "username": "Akhilesh Bhandari",
    "submission": "import java.util.*;\n\nclass Solution {\n\n    private int[][] getTopThreeMaxValuesPerRow(int[] row, int n) {\n        List<int[]> colValues = new ArrayList<>();\n        int j = 0;\n        while (j < n) {\n            colValues.add(new int[]{row[j], j});\n            j++;\n        }\n        colValues.sort((a, b) -> b[0] - a[0]);\n\n        int[][] topThree = new int[Math.min(3, n)][2];\n        int k = 0;\n        while (k < Math.min(3, n)) {\n            topThree[k] = colValues.get(k);\n            k++;\n        }\n\n        return topThree;\n    }\n\n    private long calculateMaxSum(int[][][] rowMax, int m) {\n        long maxSum = Long.MIN_VALUE;\n\n        int r1 = 0;\n        while (r1 < m) {\n            int r2 = r1 + 1;\n            while (r2 < m) {\n                int r3 = r2 + 1;\n                while (r3 < m) {\n                    int i1 = 0;\n                    while (i1 < 3 && rowMax[r1][i1][1] != -1) {  // Ensure valid index\n                        int i2 = 0;\n                        while (i2 < 3 && rowMax[r2][i2][1] != -1) {  // Ensure valid index\n                            if (rowMax[r1][i1][1] == rowMax[r2][i2][1]) {\n                                i2++;\n                                continue;\n                            }\n                            int i3 = 0;\n                            while (i3 < 3 && rowMax[r3][i3][1] != -1) {  // Ensure valid index\n                                if (rowMax[r1][i1][1] == rowMax[r3][i3][1] || rowMax[r2][i2][1] == rowMax[r3][i3][1]) {\n                                    i3++;\n                                    continue;\n                                }\n\n                                long sum = (long) rowMax[r1][i1][0] + rowMax[r2][i2][0] + rowMax[r3][i3][0];\n                                maxSum = Math.max(maxSum, sum);\n                                i3++;\n                            }\n                            i2++;\n                        }\n                        i1++;\n                    }\n                    r3++;\n                }\n                r2++;\n            }\n            r1++;\n        }\n\n        return maxSum;\n    }\n\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n\n        int[][][] rowMax = new int[m][3][2];\n        for (int[][] row : rowMax) {\n            for (int[] pair : row) {\n                pair[1] = -1; // Initialize column index to -1 to handle empty spots\n            }\n        }\n\n        int i = 0;\n        while (i < m) {\n            rowMax[i] = getTopThreeMaxValuesPerRow(board[i], n);\n            i++;\n        }\n\n        return calculateMaxSum(rowMax, m);\n    }\n}\n",
    "submit_ts": "1723909070",
    "subm_id": "1359178395"
}