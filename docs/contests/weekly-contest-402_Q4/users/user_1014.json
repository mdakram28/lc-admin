{
    "username": "wind2412",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        # \u589e\u91cf\u5904\u7406?\n        n = len(nums)\n        bit = self.BIT(n)\n        res = [False] * n\n        for i in range(1, n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                res[i] = True\n                bit.add(i, 1)\n        \n        def check(idx: int) -> bool:\n            if idx <= 0 or idx >= n - 1:\n                return False\n            return nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1]\n        \n        def check_update(idx: int):\n            if idx <= 0 or idx >= n - 1:\n                # res[idx] \u7edd\u5bf9\u662f False. \u4f46\u662f\u539f\u5148\u7684\u503c\u4e5f\u7edd\u5bf9\u662f False.\n                return\n            if nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1]:  # res[idx] \u8981\u53d8\u6210 True.\n                if res[idx] == False:\n                    res[idx] = True\n                    bit.add(idx, 1)  # \u66f4\u65b0\u6210 True.\n            else:  # res[idx] \u8981\u53d8\u6210 False.\n                if res[idx] == True:\n                    res[idx] = False\n                    bit.add(idx, -1)  # \u66f4\u65b0\u6210 False.\n            return\n            \n        \n        # \u8981\u589e\u91cf\u66f4\u65b0\u524d\u7f00\u548c... \u6811\u72b6\u6570\u7ec4???\n        ans = []\n        for _, (type, a, b) in enumerate(queries):\n            if type == 1:\n                result = bit.sum(a, b)\n                if check(a):  # \u8fb9\u754c\u4e00\u5b9a\u8981\u662f False. \u5982\u679c\u8fd9\u91cc check() \u8fd4\u56de True: \u90a3\u4e48\u8981\u66f4\u65b0\u6210 False.\n                    result -= 1\n                if a != b and check(b):\n                    result -= 1\n                ans.append(result)\n            else:\n                idx, val = a, b\n                # \u66f4\u65b0\u4e0d\u592a\u597d\u5904\u7406.\n                if nums[idx] == val:\n                    continue\n                nums[idx] = val\n                check_update(idx)\n                check_update(idx-1)\n                check_update(idx+1)\n        return ans\n        \n    \n    # https://leetcode.cn/circle/discuss/qGREiN/\n    class BIT:\n        def __init__(self, n):\n            self.n = n\n            self.tree = [0] * (self.n + 1)\n        \n        def add(self, k, x):\n            i = k + 1\n            while i <= self.n:\n                self.tree[i] += x\n                i += self.lowbit(i)\n        \n        def sum(self, l, r):\n            return self.preSum(r) - self.preSum(l - 1)\n        \n        def preSum(self, k):\n            ans = 0\n            i = k + 1\n            while i > 0:\n                ans += self.tree[i]\n                i -= self.lowbit(i)\n            return ans\n        \n        @staticmethod\n        def lowbit(i):\n            return i & -i",
    "submit_ts": 1718508716.0
}