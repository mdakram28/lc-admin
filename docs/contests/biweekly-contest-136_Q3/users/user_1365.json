{
    "username": "daksh17kochhar",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n=grid.size(), m=grid[0].size();\n        int moves = 0;\n        // cout << \"n: \" << n << \" m: \" << m << \"\\n\";\n        for(int i=0; i<n/2; i+=1){\n            for(int j=0; j<m/2; j+=1){\n                int e1 = grid[i][j], e2 = grid[i][m-j-1];\n                int e3 = grid[n-i-1][j], e4 = grid[n-i-1][m-j-1];\n                int cnt1s = (e1==1) + (e2==1) + (e3==1) + (e4==1);\n                if(cnt1s==0){\n                    continue; \n                    // no flip required\n                }\n                if(cnt1s==1){\n                    moves += 1; //set this to 0\n                }else{\n                    moves += (4-cnt1s); //set all 0s to 1s\n                }\n                // cout << \"i: \" << i << \" j: \" << j << \" moves: \" << moves << \"\\n\";\n            }\n        }\n        if(n%2==1 and m%2==1){\n            moves += (grid[n/2][m/2]==1);\n            // cout << \"center cell: moves = \" << moves << \"\\n\";\n        }\n        // this will maintain count of 1s multiple of 4\n        // now handling the mid rows and columns\n        int matching_ones=0, mismatch_ones=0;\n        if(n%2==1){\n            //handle mid row\n            // cout << \"MID ROW\\n\";\n            int l=0, r=m-1;\n            while(l<r){\n                // cout << \"l: \" << l << \" r: \" << r << \"\\n\";\n                bool match_ones = (grid[n/2][l]==1 and grid[n/2][r]==1);\n                matching_ones += match_ones;\n                if(!match_ones)\n                    mismatch_ones += (grid[n/2][l]==1 or grid[n/2][r]==1);\n                l += 1;\n                r -= 1;\n                // cout << matching_ones << \" \" << mismatch_ones << \"\\n\";\n            }\n        }\n        if(m%2==1){\n            //handle mid column\n            // cout << \"MID COL\\n\";\n            int l=0, r=n-1;\n            while(l<r){\n                // cout << \"l: \" << l << \" r: \" << r << \"\\n\";\n                bool match_ones = (grid[l][m/2]==1 and grid[r][m/2]==1);\n                matching_ones += match_ones;\n                if(!match_ones)\n                    mismatch_ones += (grid[l][m/2]==1 or grid[r][m/2]==1);\n                l += 1;\n                r -= 1;\n                // cout << matching_ones << \" \" << mismatch_ones << \"\\n\";\n            }\n        }\n        matching_ones*=2;\n        matching_ones%=4;\n        if(matching_ones==0){\n            moves += mismatch_ones;\n        }else if(matching_ones==2){\n            if(mismatch_ones==0){\n                moves+=2;\n            }else moves+=mismatch_ones;\n        }\n        \n        return moves;\n    }\n};",
    "submit_ts": "1722699533",
    "subm_id": "1343214570"
}