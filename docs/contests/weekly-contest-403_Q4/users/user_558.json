{
    "username": "jaysukh_409",
    "submission": "class Solution {\npublic:\n    int area(int si, int sj, int ei, int ej, vector<vector<int>>& grid)\n    {\n        int mh = INT_MAX, Mh = INT_MIN;\n        int mw = INT_MAX, Mw = INT_MIN;\n        for (int i = si; i <= ei; i++)\n        {\n            for (int j = sj; j <= ej; j++)\n            {\n                if (grid[i][j])\n                {\n                    mh = min(mh, i);\n                    mw = min(mw, j);\n                    Mh = max(Mh, i);\n                    Mw = max(Mw, j);\n                }\n            }\n        } \n        if (mh == INT_MAX) return -1;\n        return ((Mh - mh + 1) * (Mw - mw + 1));\n    }\n    int f1(int x, int y, vector<vector<int>>& grid)\n    {\n        int n = grid.size();\n        int m = grid[0].size();\n        int part1 = area(0, 0, x - 1, m - 1, grid);\n        int part2 = area(x, 0, n - 1, y - 1, grid);\n        int part3 = area(x, y, n - 1, m - 1, grid);\n        if (part1 == -1 || part2 == -1 || part3 == -1) return INT_MAX;\n        return (part1 + part2 + part3);\n    }\n    int f2(int x, int y, vector<vector<int>>& grid)\n    {\n        int n = grid.size();\n        int m = grid[0].size();\n        int part1 = area(0, 0, n - 1, y - 1, grid);\n        int part2 = area(0, y, x - 1, m - 1, grid);\n        int part3 = area(x, y, n - 1, m - 1, grid);\n        if (part1 == -1 || part2 == -1 || part3 == -1) return INT_MAX;\n        return (part1 + part2 + part3);\n    }\n    int f3(int x, int y, vector<vector<int>>& grid)\n    {\n        int n = grid.size();\n        int m = grid[0].size();\n        int part1 = area(0, 0, x - 1, y - 1, grid);\n        int part2 = area(x, 0, n - 1, m - 1, grid);\n        int part3 = area(0, y, x - 1, m - 1, grid);\n        if (part1 == -1 || part2 == -1 || part3 == -1) return INT_MAX;\n        return (part1 + part2 + part3);\n    }\n    int f4(int x, int y, vector<vector<int>>& grid)\n    {\n        int n = grid.size();\n        int m = grid[0].size();\n        int part1 = area(0, 0, x - 1, y - 1, grid);\n        int part2 = area(0, y, n - 1, m - 1, grid);\n        int part3 = area(x, 0, n - 1, y - 1, grid);\n        if (part1 == -1 || part2 == -1 || part3 == -1) return INT_MAX;\n        return (part1 + part2 + part3);\n    }\n    int noOne(int n, int m, vector<vector<int>>& grid)\n    {\n        int ans = 0;\n        for (int i = 0; i < n; i++)\n        {\n            for (int j = 0; j < m; j++)\n            {\n                if (grid[i][j]) ans++;\n            }\n        }\n        return ans;\n    }\n    int minimumSum(vector<vector<int>>& grid) \n    {\n        int ans = INT_MAX;\n        int n = grid.size();\n        int m = grid[0].size();\n        for (int x = 1; x < n; x++)\n        {\n            for (int y = 1; y < m; y++)\n            {\n                ans = min(ans, f1(x, y, grid));\n                ans = min(ans, f2(x, y, grid));\n                ans = min(ans, f3(x, y, grid));\n                ans = min(ans, f4(x, y, grid));\n            }\n        } \n        for (int x = 1; x < n - 1; x++)\n        {\n            for (int y = x; y < n - 1; y++)\n            {\n                int part1 = area(0, 0, x - 1, m - 1, grid);\n                int part2 = area(x, 0, y, m - 1, grid);\n                int part3 = area(y + 1, 0, n - 1, m - 1, grid);\n                if (part1 != -1 && part2 != -1 && part3 != -1) ans = min(ans, part1 + part2 + part3);\n            }\n        }\n        for (int x = 1; x < m - 1; x++)\n        {\n            for (int y = x; y < m - 1; y++)\n            {\n                int part1 = area(0, 0, n - 1, x - 1, grid);\n                int part2 = area(0, x, n - 1, y, grid);\n                int part3 = area(0, y + 1, n - 1, m - 1, grid);\n                if (part1 != -1 && part2 != -1 && part3 != -1) ans = min(ans, part1 + part2 + part3);\n            }\n        }\n        return ans;   \n    }\n};",
    "submit_ts": 1719114748.0
}