{
    "username": "hazzler",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n\n        auto work = [&](vector <vector <int>> e) -> pair <int, int>{\n            int n = e.size() + 1;\n            vector <vector <int>> g(n);\n            for (int i = 0; i < e.size(); ++i){\n                g[e[i][0]].push_back(e[i][1]);\n                g[e[i][1]].push_back(e[i][0]);\n            }\n            auto dfs = [&](auto &&dfs, int u, int p) -> pair <int, int> {\n                pair <int, int> res = {-1, u};\n                for (auto &v: g[u]) if (v != p){\n                    res = max(res, dfs(dfs, v, u));\n                }\n                return {res.first + 1, res.second};\n            };\n            auto [du, u1] = dfs(dfs, 0, 0);\n            auto [dv, u2] = dfs(dfs, u1, u1);\n            vector <int> d(n);\n            auto col = [&](auto &&col, int u, int p, int dd) -> void{\n                d[u] = max(d[u], dd);\n                for (auto &v: g[u]) if (v != p){\n                    col(col, v, u, dd + 1);\n                }\n            };\n            col(col, u1, u1, 0);\n            col(col, u2, u2, 0);\n            return {*min_element(d.begin(), d.end()), *max_element(d.begin(), d.end())};\n        };\n        auto [mn1, mx1] = work(edges1);\n        auto [mn2, mx2] = work(edges2);\n        return max({mn1 + mn2 + 1, mx1, mx2});\n    }\n};",
    "submit_ts": 1719715998.0
}