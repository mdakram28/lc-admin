{
    "username": "prasoon054",
    "submission": "struct TrieNode {\n    map<char, TrieNode*> children;\n    vector<pair<int, int>> words;\n};\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->words.emplace_back(index, cost);\n    }\n    vector<pair<int, int>> search(const string& prefix) {\n        TrieNode* node = root;\n        for (char c : prefix) {\n            if (!node->children[c]) {\n                return {};\n            }\n            node = node->children[c];\n        }\n        return node->words;\n    }\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLen = target.length();\n        vector<int> dp(targetLen + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        for (int i = 0; i < targetLen; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < targetLen; ++j) {\n                char c = target[j];\n                if (!node->children[c]) break;\n                node = node->children[c];\n                for (auto& [index, cost] : node->words) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n        return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n    }\n};",
    "submit_ts": "1720324440",
    "subm_id": "1312399512"
}