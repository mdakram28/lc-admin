{
    "username": "mmqqq",
    "submission": "from sortedcontainers import SortedList\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:    \n\n\n\n        n = len(nums)\n        peaks = SortedList()\n        # Helper function to decide if nums[i] is a peak\n        def is_peak(i):\n            if i == 0 or i == n - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        # Initialize the peaks list\n        for i in range(1, n - 1):\n            if is_peak(i):\n                peaks.add(i)\n\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                # Type 1 query: count peaks in the range [l, r]\n                l, r = query[1], query[2]\n                if l == r:  # No peak possible if subarray length < 3\n                    results.append(0)\n                else:\n                    # Get number of peaks in the range\n                    # Using bisect_left and bisect_right to find bounds\n                    left_idx = peaks.bisect_left(l + 1)\n                    right_idx = peaks.bisect_right(r - 1) - 1\n                    count = right_idx - left_idx + 1 if left_idx <= right_idx else 0\n                    results.append(count)\n\n            elif query[0] == 2:\n                # Type 2 query: update nums[index] to val\n                index, val = query[1], query[2]\n                if nums[index] == val:\n                    continue  # No change if the value is the same\n\n                # Consider the neighbors and the current index\n                affected_indices = [index - 1, index, index + 1]\n\n                # First remove the affected peaks if they are peaks\n                for i in affected_indices:\n                    if 0 < i < n - 1 and is_peak(i):\n                        peaks.remove(i)\n\n                # Update the value\n                nums[index] = val\n\n                # Recheck the affected indices and add them if they are peaks now\n                for i in affected_indices:\n                    if 0 < i < n - 1 and is_peak(i):\n                        peaks.add(i)\n\n        return results\n\n\n",
    "submit_ts": "1718507340",
    "subm_id": "539780764"
}