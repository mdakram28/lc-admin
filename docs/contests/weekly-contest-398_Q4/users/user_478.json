{
    "username": "ram0629",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        \n        Map<List<Integer>,Integer> dp = new HashMap<>();\n        return recur(1, k, 0,0,dp);\n    }\n\n    private int recur(int pos, int k, int jump, int prevJump,Map<List<Integer>,Integer>dp){\n        \n        List<Integer> state = List.of(pos,jump, prevJump);\n        int ans = 0;\n        if(dp.containsKey(state)){\n            return dp.get(state);\n        }\n        if(pos>k+2){\n            return 0;\n        }\n        if(pos==k){\n            ans+=1;\n        }\n\n        \n        if(prevJump==0 && pos!=0){\n            ans+=recur(pos-1, k, jump, 1,dp);\n        }\n        ans+=recur(pos+(1<<jump), k, jump+1, 0,dp);\n        dp.put(state, ans);\n        return ans;\n    }\n}",
    "submit_ts": "1716088689",
    "subm_id": "1261821189"
}