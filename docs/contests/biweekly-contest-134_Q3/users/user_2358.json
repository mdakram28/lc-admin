{
    "username": "_ddms_",
    "submission": "class Solution {\nprivate:\n    vector<int> extendColumn(vector<int>& colors, int groupSize) {\n        int n = colors.size();\n        vector<int> extendedColumn(n + groupSize - 1);\n\n        for (int i = 0; i < n; ++i) {\n            extendedColumn[i] = colors[i];\n        }\n        for (int i = 0; i < groupSize - 1; ++i) {\n            extendedColumn[n + i] = colors[i];\n        }\n        return extendedColumn;\n    }\n    int countGroups(vector<int>& extendedColumn, int groupSize) {\n        int result = 0;\n        int currentGroupLength = 1;\n        for (int i = 1; i < extendedColumn.size(); ++i) {\n            if (extendedColumn[i] != extendedColumn[i - 1]) {\n                ++currentGroupLength;\n            } else {\n                currentGroupLength = 1;\n            }\n\n            if (currentGroupLength >= groupSize) {\n                ++result;\n            }\n        }\n        return result;\n    }\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int groupSize) {\n        int n = colors.size();\n        vector<int> extendedColors = extendColumn(colors, groupSize);\n        return countGroups(extendedColors, groupSize);\n    }\n};",
    "submit_ts": "1720281416",
    "subm_id": "1311824354"
}