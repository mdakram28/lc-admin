{
    "username": "Storm",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        if (n == 1) {\n            return largestOneDigit(k);\n        }\n        char[] arr = new char[n];\n        Arrays.fill(arr, '9');\n        if (k == 2) {\n            arr[0] = '8';\n            arr[n - 1] = '8';\n        } else if (k == 4) {\n            arr[0] = '8';\n            arr[1] = '8';\n            arr[n - 2] = '8';\n            arr[n - 1] = '8';\n        } else if (k == 5) {\n            arr[0] = '5';\n            arr[n - 1] = '5';\n        } else if (k == 6) {\n            if (n == 2) {\n                return \"66\";\n            }\n            if (n == 3) {\n                return \"888\";\n            }\n            if (n == 4) {\n                return \"8778\";\n            }\n            arr[0] = '8';\n            arr[n - 1] = '8';\n            if (n % 2 != 0) {\n                arr[n / 2] = '8';\n            } else {\n                arr[n / 2 - 1] = '7';\n                arr[n / 2] = '7';\n            }\n        } else if (k == 7) {\n            if (n == 2) {\n                return \"77\";\n            }\n            if (n == 3) {\n                return \"959\";\n            }\n            if (n % 2 != 0) {\n                int midIndex = n / 2;\n                int originalRemainder = 0;\n                for (int i = 0; i < n; i++) {\n                    originalRemainder = (originalRemainder * 10 + 9) % 7;\n                }\n                if (originalRemainder == 0) {\n                    return new String(arr);\n                }\n                int midRemainder = 1;\n                for (int i = n / 2; i > 0; i--) {\n                    midRemainder = midRemainder * 10 % 7;\n                }\n                for (int digit = 8; digit >= 0; digit--) {\n                    originalRemainder = (originalRemainder - midRemainder) % 7;\n                    if (originalRemainder < 0) {\n                        originalRemainder += 7;\n                    }\n                    if (originalRemainder == 0) {\n                        arr[midIndex] = (char) ('0' + digit);\n                        break;\n                    }\n                }\n            } else {\n                int midIndex1 = n / 2 - 1, midIndex2 = n / 2;\n                int originalRemainder = 0;\n                for (int i = 0; i < n; i++) {\n                    originalRemainder = (originalRemainder * 10 + 9) % 7;\n                }\n                if (originalRemainder == 0) {\n                    return new String(arr);\n                }\n                int midRemainder = 11;\n                for (int i = n / 2 - 1; i > 0; i--) {\n                    midRemainder = midRemainder * 10 % 7;\n                }\n                for (int digit = 8; digit >= 0; digit--) {\n                    originalRemainder = (originalRemainder - midRemainder) % 7;\n                    if (originalRemainder < 0) {\n                        originalRemainder += 7;\n                    }\n                    if (originalRemainder == 0) {\n                        arr[midIndex1] = (char) ('0' + digit);\n                        arr[midIndex2] = (char) ('0' + digit);\n                        break;\n                    }\n                }\n            }\n        } else if (k == 8) {\n            if (n <= 2) {\n                Arrays.fill(arr, '8');\n            } else {\n                arr[0] = '8';\n                arr[1] = '8';\n                arr[2] = '8';\n                arr[n - 3] = '8';\n                arr[n - 2] = '8';\n                arr[n - 1] = '8';\n            }\n        }\n        return new String(arr);\n    }\n\n    public String largestOneDigit(int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return \"9\";\n        }\n        if (k == 2 || k == 4 || k == 8) {\n            return \"8\";\n        }\n        return String.valueOf(k);\n    }\n}",
    "submit_ts": "1723949845",
    "subm_id": "556395305"
}