{
    "username": "zyx-37",
    "submission": "int renew_prq(vector<vector<int>> & p,int i,int j,int dem)\n{\n    int sum = 0;\n    for (int k = 0; k < dem; k++) {      //dem\u7ef4\u5ea6\uff0c\u8003\u5bdf\u6bcf\u4e2a\u70b9\u3001\u6bcf\u4e2a\u7ef4\u5ea6\u4e0b\u7684\u7b26\u53f7\u72b6\u6001\n        int t = i & (1 << k);      //i\u4e0e2^k\u8fdb\u884c\u4e0e\u8fd0\u7b97\uff0c  \n        //\u4f8b\u5982i=110 \u5219k=0,\u8fd0\u7b97\u7ed3\u679c\u662f0; k=1ork=2 \u8fd0\u7b97\u7ed3\u679c\u662f1 \n        //\u6548\u679c\u662f\u5224\u65adi\u7684\u7b2ck\u4e3a\u662f\u5426\u4e3a1\n        if (t) sum += p[j][k];     //\u5982\u679c\u4e3a1\uff0c\u5219\u7d2f\u52a0\u5165sum \u53cd\u4e4b\uff0c\u5219\u51cf\u53bb\n        else sum -= p[j][k];\n    }\n    return sum;\n}\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        int data_now;\n        int instruction;\n        int ddem=1 << 2;\n        int *result = new int[n];\n        multiset<int> *min_ms = new multiset<int>[ddem];\n        for (int i = 0; i < n; i++) {\n             for (int j = 0; j < ddem; j++) {\n                 int sum = renew_prq(points, j, i, 2);\n                 min_ms[j].insert(sum);\n             }\n        }\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < ddem; j++) {\n                int sum = renew_prq(points, j, i, 2);\n                min_ms[j].erase(min_ms[j].find(sum));\n            }\n            int res = 0;\n            for (int k = 0; k < ddem; k++) {\n                int cur = (*min_ms[k].rbegin()) - (*min_ms[k].begin());\n                res = max(res, cur);\n            }\n            ans = min(ans, res);\n            for (int j = 0; j < ddem; j++) {\n                int sum = renew_prq(points, j, i, 2);\n                min_ms[j].insert(sum);\n            }\n        }\n        return ans;\n    }\n};\n"
}