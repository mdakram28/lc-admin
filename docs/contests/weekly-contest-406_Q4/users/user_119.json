{
    "username": "Saik77",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        List<Cut> cuts = new ArrayList<>();\n        for (int i = 0; i < horizontalCut.length; i++) {\n            cuts.add(new Cut(horizontalCut[i], 'H'));\n        }\n        for (int i = 0; i < verticalCut.length; i++) {\n            cuts.add(new Cut(verticalCut[i], 'V'));\n        }\n        \n        // Sort cuts by cost in descending order\n        cuts.sort((a, b) -> b.cost - a.cost);\n        \n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long totalCost = 0;\n        \n        // Process each cut\n        for (Cut cut : cuts) {\n            if (cut.type == 'H') {\n                totalCost += cut.cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                totalCost += cut.cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n    \n    // Helper class to represent a cut\n    static class Cut {\n        int cost;\n        char type;  // 'H' for horizontal, 'V' for vertical\n        \n        Cut(int cost, char type) {\n            this.cost = cost;\n            this.type = type;\n        }\n    }\n}",
    "submit_ts": "1720925046",
    "subm_id": "1320240819"
}