{
    "username": "crypto_op",
    "submission": "class Solution {\npublic:\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices; // pair<word length, cost>\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int length, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.emplace_back(length, cost);\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], words[i].size(), costs[i]);\n    }\n\n    for (int j = 0; j < n; ++j) {\n        if (dp[j] == INT_MAX) continue;\n        TrieNode* node = trie.getRoot();\n        for (int i = j; i < n; ++i) {\n            if (!node->children.count(target[i])) break;\n            node = node->children[target[i]];\n            for (auto& pair : node->wordIndices) {\n                int length = pair.first;\n                int cost = pair.second;\n                if (j + length <= n) {\n                    dp[j + length] = min(dp[j + length], dp[j] + cost);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320995",
    "subm_id": "1312310506"
}