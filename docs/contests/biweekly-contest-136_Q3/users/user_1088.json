{
    "username": "tanishkgpt",
    "submission": "class DisjointSet\n{\n\nprivate:\n\n    vector<int> ultimateParent,rank,size;\n\npublic:\n\n    DisjointSet(int n)\n    {\n        ultimateParent.resize(n+1);\n        rank.resize(n+1,0);\n        size.resize(n+1,1);\n        for(int i=0;i<=n;++i)\n        {\n            ultimateParent[i]=i;\n        }\n    }\n\n    int findUltimateParent(int node)\n    {\n        if(ultimateParent[node]==node)\n        {\n            return node;\n        }\n        return ultimateParent[node]=findUltimateParent(ultimateParent[node]);\n    }\n\n    int getSize(int node)\n    {\n        return size[node];\n    }\n\n    int getRank(int node)\n    {\n        return rank[node];\n    }\n\n    void unionByRank(int u,int v)\n    {\n        int ultimateParentOfU=findUltimateParent(u),ultimateParentOfV=findUltimateParent(v);\n        if(ultimateParentOfU==ultimateParentOfV)\n        {\n            return ;\n        }\n        if(rank[ultimateParentOfU]<rank[ultimateParentOfV])\n        {\n            ultimateParent[ultimateParentOfU]=ultimateParentOfV;\n        }\n        else if(rank[ultimateParentOfU]>rank[ultimateParentOfV])\n        {\n            ultimateParent[ultimateParentOfV]=ultimateParentOfU;\n        }\n        else\n        {\n            ultimateParent[ultimateParentOfV]=ultimateParentOfU;\n            rank[ultimateParentOfU]++;\n        }\n    }\n\n    void unionBySize(int u,int v)\n    {\n        int ultimateParentOfU=findUltimateParent(u),ultimateParentOfV=findUltimateParent(v);\n        if(ultimateParentOfU==ultimateParentOfV)\n        {\n            return ;\n        }\n        if(size[ultimateParentOfU]<size[ultimateParentOfV])\n        {\n            ultimateParent[ultimateParentOfU]=ultimateParentOfV;\n            size[ultimateParentOfV]+=size[ultimateParentOfU];\n        }\n        else\n        {\n            ultimateParent[ultimateParentOfV]=ultimateParentOfU;\n            size[ultimateParentOfU]+=size[ultimateParentOfV];\n        }\n    }\n\n};\n\nclass Solution {\npublic:\nint minFlips(vector<vector<int>> &a)        // i*m+j\n{\n    int n=a.size(),m=a[0].size(),ans=0;\n    DisjointSet ds(n*m);\n    map<int,vector<int>> mp;\n    vector<vector<int>> tmp;\n    for(int i=0;i<n;++i)\n    {\n        for(int j=0;j<m;++j)\n        {\n            ds.unionBySize(i*m+j,i*m+(m-1-j));\n            ds.unionBySize(i*m+j,(n-1-i)*m+j);\n        }\n    }\n    for(int i=0;i<n;++i)\n    {\n        for(int j=0;j<m;++j)\n        {\n            mp[ds.findUltimateParent(i*m+j)].push_back(a[i][j]);\n        }\n    }\n    for(auto &v:mp)\n    {\n        vector<int> vec=v.second;\n        if(vec.size()==4)\n        {\n            int one=0,zero=0;\n            for(auto &v1:vec)\n            {\n                if(v1)\n                {\n                    one++;\n                }\n                else\n                {\n                    zero++;\n                }\n            }\n            ans+=min(one,zero);\n        }\n        else if(vec.size()==2)\n        {\n            tmp.push_back(vec);\n        }\n        else\n        {\n            ans+=vec[0];\n        }\n    }\n    if(tmp.size())\n    {\n        int zero=0,one=0,two=0;\n        for(auto &vec:tmp)\n        {\n            int sum=0;\n            for(auto &v:vec)\n            {\n                sum+=v;\n            }\n            if(sum==0)\n            {\n                zero++;\n            }\n            else if(sum==1)\n            {\n                one++;\n            }\n            else\n            {\n                two++;\n            }\n        }\n        ans+=one;\n        if(two&1)\n        {\n            if(one==0)\n            {\n                ans+=2;\n            }\n        }\n    }\n    return ans;\n}\n};",
    "submit_ts": "1722698253",
    "subm_id": "1343174675"
}