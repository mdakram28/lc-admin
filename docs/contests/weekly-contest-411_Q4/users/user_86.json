{
    "username": "Nebulous Mirage",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        vector<long long> ans;\n        \n        int start = 0;\n        int c0 = 0;\n        int c1 = 0;\n        vector<int> offset;\n        vector<long long> sum;\n        sum.push_back(0);\n        long long ss = 0;\n        for (int i = 0; i < s.size(); ++i) {\n            if (s[i] == '0') {\n                c0 += 1;\n            } else {\n                c1 += 1;\n            }\n            while (c0 > k && c1 > k) {\n                if (s[start] == '0') {\n                    c0 -= 1;\n                } else {\n                    c1 -= 1;\n                }\n                start += 1;\n            }\n            offset.push_back(start);\n            ss += offset[i];\n            sum.push_back(ss);\n            // cout << offset[i] << \", \";\n        }\n        // cout << endl;\n        for (auto &q: queries) {\n            auto bound = upper_bound(offset.begin(), offset.end(), q[0]);\n            int d = distance(offset.begin(), bound);\n            // cout << \"start d: \"  << d << endl;\n            long long res = 0;\n            res += ((long long)(1) + (long long)(q[1] - q[0] + 1)) * ((long long)(q[1]) - (long long)(q[0]) + 1) / 2;\n            // res -= (long long)(min(q[1], d) - q[0]) * (long long)(q[0]);\n            if (d <= q[1]) {\n                res += (long long)(q[1] - d + 1) * q[0];\n                res -= sum[q[1] + 1] - sum[d];\n            }\n            // cout << \"res: \" << res << endl;\n            ans.push_back(res);\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1723952283",
    "subm_id": "1359792549"
}