{
    "username": "rsrajshe024khawat",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        \n\n\n        // int m=grid.size(),n=grid[0].size();\n        // int totalOnes=0;\n        // int ans=0;\n\n        // for(int i=0;i<=m/2;i++){\n        //     int ones=0,zeros=0;\n        //     for(int j=0;j<=n/2;j++){\n\n        //         if(grid[i][j]==0)zeros++;\n        //         else ones++;\n\n        //         if(grid[i][n-j-1]==0)zeros++;\n        //         else ones++;\n\n        //         if(grid[m-i-1][j]==0)zeros++;\n        //         else ones++;\n\n        //         if(grid[m-i-1][n-j-1]==0)zeros++;\n        //         else ones++;\n\n        //     }\n\n        //     if(ones>=zeros){\n        //         totalOnes+=(ones+zeros);\n        //         if((ones+zeros)<4){\n        //             ans+=zeros;\n        //         }\n        //         else  ans+=(4-ones);\n        //     }\n        //     else if(zeros>ones){\n        //         totalOnes-=ones;\n        //         if((ones+zeros)<4){\n        //             ans+=ones;\n        //         }\n        //         else ans+=(4-zeros);\n        //     }\n           \n        // }\n        // if(totalOnes%4!=0){\n        //     int rem=totalOnes%4;\n        //     int rem2=totalOnes-((totalOnes/4)+1)*4;\n        //     int take=min(rem,rem2);\n        //     ans+=take;\n        // }\n        // return ans;\n\n\n\nint n = grid.size(), m = grid[0].size();\nint flipCount = 0;\n\n// Check the central element if both n and m are odd\nif (n % 2 == 1 && m % 2 == 1) {\n    if (grid[n / 2][m / 2] == 1) {\n        flipCount += 1;\n    }\n}\n\nvector<int> mismatches(3, 0);\n\n// Process the central row if n is odd\nif (n % 2 == 1) {\n    int left = 0, right = m - 1;\n    while (left < right) {\n        int sum = grid[n / 2][left] + grid[n / 2][right];\n        mismatches[sum] += 1;\n        left += 1;\n        right -= 1;\n    }\n}\n\n// Process the central column if m is odd\nif (m % 2 == 1) {\n    int top = 0, bottom = n - 1;\n    while (top < bottom) {\n        int sum = grid[top][m / 2] + grid[bottom][m / 2];\n        mismatches[sum] += 1;\n        top += 1;\n        bottom -= 1;\n    }\n}\n\n// Adjust flip count based on mismatches\nif (mismatches[2] % 2 == 1) {\n    if (mismatches[1] > 0) {\n        flipCount += mismatches[1];\n    } else {\n        flipCount += 2;\n    }\n} else {\n    flipCount += mismatches[1];\n}\n\n\nfor (int i = 0; i < n / 2; ++i) {\n    for (int j = 0; j < m / 2; ++j) {\n        int topLeft = grid[i][j];\n        int bottomLeft = grid[n - 1 - i][j];\n        int topRight = grid[i][m - 1 - j];\n        int bottomRight = grid[n - 1 - i][m - 1 - j];\n\n        int sum = topLeft + bottomLeft + topRight + bottomRight;\n\n        if (sum != 0 && sum != 4) {\n            flipCount += min(sum, 4 - sum);\n        }\n    }\n}\n\nreturn flipCount;\n\n\n\n\n\n\n        // int n = grid.size(), m = grid[0].size();\n        // int ans = 0;\n        \n        // if (n % 2 == 1 && m % 2 == 1) {\n        //     if (grid[n / 2][m / 2] == 1) {\n        //         ans += 1;\n        //     }\n        // }\n\n        // vector<int> shift(3, 0);\n        // if (n % 2 == 1) {\n        //     int a = 0, b = m - 1;\n        //     while (a < b) {\n        //         int sm = grid[n / 2][a] + grid[n / 2][b];\n        //         shift[sm] += 1;\n        //         a += 1;\n        //         b -= 1;\n        //     }\n        // }\n\n        // if (m % 2 == 1) {\n        //     int a = 0, b = n - 1;\n        //     while (a < b) {\n        //         int sm = grid[a][m / 2] + grid[b][m / 2];\n        //         shift[sm] += 1;\n        //         a += 1;\n        //         b -= 1;\n        //     }\n        // }\n\n        // if (shift[2] % 2 == 1) {\n        //     if (shift[1] > 0) {\n        //         ans += shift[1];\n        //     } else {\n        //         ans += 2;\n        //     }\n        // } else {\n        //     ans += shift[1];\n        // }\n\n        // for (int i = 0; i < n / 2; ++i) {\n        //     for (int j = 0; j < m / 2; ++j) {\n        //         int a = grid[i][j];\n        //         int b = grid[n - 1 - i][j];\n        //         int c = grid[i][m - 1 - j];\n        //         int d = grid[n - 1 - i][m - 1 - j];\n\n        //         int sm = a + b + c + d;\n\n        //         if (sm != 0 && sm != 4) {\n        //             ans += min(sm, 4 - sm);\n        //         }\n        //     }\n        // }\n\n        // return ans;\n\n\n       \n\n        \n    }\n};",
    "submit_ts": "1722700027",
    "subm_id": "1343229481"
}