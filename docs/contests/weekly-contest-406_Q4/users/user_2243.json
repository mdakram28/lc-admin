{
    "username": "user4925i",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        long totalCost = 0;\n        Integer[] horizontalCosts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] verticalCosts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(horizontalCosts, Collections.reverseOrder());\n        Arrays.sort(verticalCosts, Collections.reverseOrder());\n        int horizontalSections = 1, verticalSections = 1;\n        int i = 0, j = 0;\n        while (i < m - 1 && j < n - 1) {\n            if (horizontalCosts[i] > verticalCosts[j]) {\n                totalCost += (long) horizontalCosts[i] * verticalSections;\n                horizontalSections++;\n                i++;\n            } else {\n                totalCost += (long) verticalCosts[j] * horizontalSections;\n                verticalSections++;\n                j++;\n            }\n        }\n        while (i < m - 1) {\n            totalCost += (long) horizontalCosts[i++] * verticalSections;\n        }\n        while (j < n - 1) {\n            totalCost += (long) verticalCosts[j++] * horizontalSections;\n        }\n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720926118",
    "subm_id": "1320276527"
}