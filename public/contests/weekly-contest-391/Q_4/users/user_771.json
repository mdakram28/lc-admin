{
    "username": "sigma_03",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& nums) {\n        multiset<int> xsum, ysum, xdiff, ydiff;\n\n    for (const auto& point : nums) {\n        xsum.insert(point[0] + point[1]);\n        ysum.insert(point[0] - point[1]);\n        xdiff.insert(point[0] - point[1]);\n        ydiff.insert(point[1] - point[0]);\n    }\n\n    auto it = xsum.begin();\n    int minsum = *it, maxsum = *xsum.rbegin();\n    it = xdiff.begin();\n    int mindiff = *it, maxdiff = *xdiff.rbegin();\n\n    int maximum = max(maxsum - minsum, maxdiff - mindiff);\n\n    for (const auto& point : nums) {\n        int curx = point[0], cury = point[1];\n        xsum.erase(xsum.find(curx + cury));\n        ysum.erase(ysum.find(curx - cury));\n        xdiff.erase(xdiff.find(curx - cury));\n        ydiff.erase(ydiff.find(cury - curx));\n\n        if (!xsum.empty()) {\n            minsum = *xsum.begin();\n            maxsum = *xsum.rbegin();\n        }\n        if (!xdiff.empty()) {\n            mindiff = *xdiff.begin();\n            maxdiff = *xdiff.rbegin();\n        }\n\n        maximum = min(maximum, max(maxsum - minsum, maxdiff - mindiff));\n\n        xsum.insert(curx + cury);\n        ysum.insert(curx - cury);\n        xdiff.insert(curx - cury);\n        ydiff.insert(cury - curx);\n    }\n\n    return maximum;\n    }\n};"
}