{
    "username": "donaldduckwithpants",
    "submission": "class Solution {\npublic:\n    \nconst static int N = 131072;\nint arr[N];\nint seg[N * 2];\nint m;\n\n\n\nvoid build(int n) {\n    for (int i = 0; i < n; i++) {\n        seg[i + n] = arr[i];\n    }\n    for (int i = n - 1; i > 0; i--) {\n        // seg[i][0] = (seg[2 * i][0] + seg[2 * i + 1][0]);\n        seg[i] = seg[2 * i] & seg[2 * i + 1];\n    }\n}\n\nint find(int a, int b, int n) {\n    if (a > b) return 0;\n    a += n; b += n;\n    long long s = (1ll << 35 )- 1;\n    while (a <= b) {\n        if (a % 2 == 1) {\n            // s = (s + seg[a][0]);\n            s &= seg[a];\n            // s = mul(s, seg[a]);\n            a++;\n        }\n        if (b % 2 == 0) {\n            // s = (s + seg[b][0]);\n            s &= seg[b];\n            // s2 = mul(seg[b], s2);\n            b--;\n        }\n        a /= 2; b /= 2;\n    }\n    return s;\n}\n    \nlong long nearestPowerOf2(long long N)\n{\n    long long a = log2(N);\n    if (pow(2, a) == N)\n        return N;\n    return pow(2, a + 1);\n}\n\n    \n    long long foo(vector<int> &nums, int k){\n        int n = nums.size();\n        int j = 0; long long ans = 0;\n        for (int i = 0; i < n; i++){\n            while(j < n && find(i, j, m) >= k){\n                j++;\n            }\n            // cout << i << \" \" << j << \" \" <<  find(i, j, m) << endl;\n            ans += max(0, j - i);\n            j = max(i + 1, j);\n        }\n        return ans;\n    }\n    \n    \n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        int curr = 0;\n        for (int i = 0; i < n; i++) arr[i] = nums[i];\n        n = nearestPowerOf2(n);\n        m = n;\n        build(n);\n        return foo(nums, k) - foo(nums, k + 1);\n    }\n};",
    "submit_ts": "1720281291",
    "subm_id": "1311819792"
}