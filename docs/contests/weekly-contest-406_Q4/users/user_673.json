{
    "username": "kartikkk1212",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<tuple<long long, bool>> pq;\n        \n        for (int i = 0; i < horizontalCut.size(); ++i) {\n            pq.push(make_tuple(horizontalCut[i], true));\n        }\n        \n        for (int i = 0; i < verticalCut.size(); ++i) {\n            pq.push(make_tuple(verticalCut[i], false));\n        }\n        \n        long long totalCost = 0;\n        long long horizontalPieces = 1;\n        long long verticalPieces = 1;\n        \n        while (!pq.empty()) {\n            auto [cost, isHorizontal] = pq.top();\n            pq.pop();\n            \n            if (isHorizontal) {\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n};\n\n",
    "submit_ts": "1720925746",
    "subm_id": "1320264846"
}