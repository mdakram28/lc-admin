{
    "username": "nishant101",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEndIndicesAndCosts;\n    };\n\n    class Trie {\n    public:\n        TrieNode* rootNode;\n        Trie() { rootNode = new TrieNode(); }\n\n        void insertWord(const string& word, int wordIndex, int wordCost) {\n            TrieNode* currentNode = rootNode;\n            for (char character : word) {\n                if (currentNode->children.find(character) == currentNode->children.end()) {\n                    currentNode->children[character] = new TrieNode();\n                }\n                currentNode = currentNode->children[character];\n            }\n            currentNode->wordEndIndicesAndCosts.emplace_back(wordIndex, wordCost);\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n        minCost[0] = 0;\n\n        Trie wordTrie;\n        for (int wordIdx = 0; wordIdx < words.size(); ++wordIdx) {\n            wordTrie.insertWord(words[wordIdx], wordIdx, costs[wordIdx]);\n        }\n\n        for (int targetIdx = 0; targetIdx < targetLength; ++targetIdx) {\n            if (minCost[targetIdx] == INT_MAX) continue;\n\n            TrieNode* currentNode = wordTrie.rootNode;\n            for (int subTargetIdx = targetIdx; subTargetIdx < targetLength; ++subTargetIdx) {\n                if (currentNode->children.find(target[subTargetIdx]) == currentNode->children.end()) break;\n                currentNode = currentNode->children[target[subTargetIdx]];\n                for (const auto& [wordIndex, wordCost] : currentNode->wordEndIndicesAndCosts) {\n                    int wordLength = words[wordIndex].size();\n                    if (targetIdx + wordLength <= targetLength) {\n                        minCost[targetIdx + wordLength] = min(minCost[targetIdx + wordLength], minCost[targetIdx] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n};\n",
    "submit_ts": "1720322995",
    "subm_id": "1312364610"
}