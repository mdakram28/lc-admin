{
    "username": "cchao",
    "submission": "class Solution {\npublic:\n    array<int, 3> f(vector<vector<int>>& points, int skip) {\n        const int n = points.size();\n        vector<array<int, 2>> b[4];\n        int idx = 0;\n        for (int i = 0; i < n; ++i) if (i != skip) {\n            auto& p = points[i];\n            b[0].push_back({p[0] + p[1], i});\n            b[1].push_back({p[0] - p[1], i});\n            b[2].push_back({-p[0] + p[1], i});\n            b[3].push_back({-p[0] - p[1], i});\n        }\n        array<int, 3> ans = {0, 0, -1};\n        for (int i = 0; i < 4; ++i) {\n            auto& a = b[i];\n            sort(a.begin(), a.end());\n            int d = a.back()[0] - a.front()[0];\n            if (d > ans[2]) {\n                ans = {a.front()[1], a.back()[1], d};\n            }\n        }\n        // cout << skip << \": \" << ans[0] << ' ' << ans[1] << ' ' << ans[2] << endl;\n        return ans;\n    }\n    int minimumDistance(vector<vector<int>>& points) {\n        auto t = f(points, -1);\n        auto t1 = f(points, t[0]);\n        auto t2 = f(points, t[1]);\n        return min(t1[2], t2[2]);\n    }\n};"
}