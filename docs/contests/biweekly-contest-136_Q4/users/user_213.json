{
    "username": "cheben",
    "submission": "#ifdef __LOCAL_DEBUG__\n#include <bits/stdc++.h>\nusing namespace std;\n#endif\n\ntypedef vector<int32_t> vi;\ntypedef vector<uint32_t> vu;\ntypedef vector<int64_t> vll;\ntypedef vector<uint64_t> vull;\ntypedef vector<double> vd;\ntypedef vector<vi> vvi;\ntypedef vector<vu> vvu;\ntypedef vector<vvi> vvvi;\ntypedef vector<vvu> vvvu;\ntypedef vector<vll> vvll;\ntypedef vector<vull> vvull;\ntypedef vector<vvll> vvvll;\ntypedef vector<vvull> vvvull;\n\n#define FOR(i, ed) for (int i = 0; i < (ed); ++i)\n#define FOR1(i, st, ed) for (int i = (st); i < (ed); ++i)\n#define FORR(i, ed) for (int i = (ed); i >= 0; --i)\n#define FORR1(i, ed, st) for (int i = (ed); i >= (st); --i)\n#define REP(i, st, ed, ad) for (int i = (st); i != (ed); i += (ad))\n\n#define PRINT1\n\n#ifdef PRINT1\n#define LOG_INFO(fmt, args...)                                \\\n    do {                                                      \\\n        printf(\"line:%d, func:%s, \", __LINE__, __FUNCTION__); \\\n        printf(fmt, ##args);                                  \\\n        printf(\"\\n\");                                         \\\n    } while (false)\n\n#else\n#define LOG_INFO(fmt, ...)\n#endif\n\n// \u8fd9\u91cc\u5199\u9898\n\n#define ADD_DEEP(x) ((uint64_t(x) & 1) ? 1 : 2)\n\nclass Solution {\npublic:\n    vector<vector<int>> m_edgeArr;\n\n    vector<bool> m_used;\n\n    vector<map<int, int>> m_nodeSet;\n    vector<map<int, int>> m_nodeCnt;\n\n    vector<int> m_resArr;\n\n    void DfsInit(int x) {\n        for (auto to : m_edgeArr[x]) {\n            DfsInit(to);\n            AddNode(x, to);\n        }\n    }\n\n    void Clear() {\n        m_edgeArr.clear();\n        m_used.clear();\n        m_nodeSet.clear();\n        m_nodeCnt.clear();\n        m_resArr.clear();\n    }\n\n    vector<int> timeTaken(vector<vector<int>> &edges) {\n        int n = edges.size() + 1;\n        Clear();\n        m_used.resize(n, false);\n        m_edgeArr.resize(n);\n        for (auto &edge : edges) {\n            int x = min(edge[0], edge[1]);\n            int y = max(edge[0], edge[1]);\n            m_edgeArr[x].emplace_back(y);\n        }\n        m_nodeSet.resize(n);\n        m_nodeCnt.resize(n);\n        m_resArr.resize(n, 0);\n        DfsInit(0);\n        m_used[0] = true;\n        DfsRes(0);\n        return m_resArr;\n    }\n\n    void AddNode(int x, int to) {\n        auto toDeep = 0;\n        if (!m_nodeCnt[to].empty()) { toDeep = m_nodeCnt[to].rbegin()->first; }\n        m_nodeSet[x].emplace(to, toDeep + ADD_DEEP(to));\n        m_nodeCnt[x][toDeep + ADD_DEEP(to)]++;\n    }\n\n    void DelNode(int x, int to) {\n        auto toNode = m_nodeSet[x].find(to);\n        auto toCntNode = m_nodeCnt[x].find(toNode->second);\n        // \u53bb\u6389to\u7ed3\u70b9\n        if (toCntNode->second == 1) {\n            m_nodeCnt[x].erase(toCntNode);\n        } else {\n            toCntNode->second--;\n        }\n        m_nodeSet[x].erase(toNode);\n    }\n\n    void DfsRes(int x) {\n        m_resArr[x] = m_nodeCnt[x].rbegin()->first;\n        for (auto to : m_edgeArr[x]) {\n            DelNode(x, to);\n            AddNode(to, x);\n\n            DfsRes(to);\n\n            DelNode(to, x);\n            AddNode(x, to);\n        }\n    }\n};\n// \u5199\u9898\u7ed3\u675f\n\n#ifdef __LOCAL_DEBUG__\n\nint main() {\n    Solution sol;\n    vector<int> arr;\n    vector<vector<int>> arr2 = {{0, 1}, {0, 2}};\n    sol.timeTaken(arr2);\n    return 0;\n}\n\n#endif",
    "submit_ts": "1722699851",
    "subm_id": "552277408"
}