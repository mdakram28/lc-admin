{
    "username": "dibas1",
    "submission": "class Solution {\npublic:\n    \n    int maximalRectangle(vector<vector<char>>& g) {\n        int n=g.size(),m=(n>0)?g[0].size():0;\n        if(n==0||m==0) return 0;\n        vector<int> a(m,0);\n        int ans=0;\n        for(int i=0;i<n;++i){\n            for(int j=0;j<m;++j) if(g[i][j]=='1') a[j]++; else a[j]=0;\n            ans=max(ans,largestRectangleArea(a));\n        }\n        return ans;\n    }\n    int largestRectangleArea(vector<int>& a) {\n        stack<int> s;\n        int ans=0,n=a.size();\n        for(int i=0;i<n;++i){\n            //ans=max(ans,a[i]);\n            while(!s.empty()&&a[s.top()]>=a[i]){\n                \n                if(s.size()>1) {\n                    int last=s.top();s.pop();\n                    ans=max(ans,(i-s.top()-1)*a[last]);\n                }\n                else {\n                ans=max(ans,i*a[s.top()]);\n                s.pop();\n                }\n            }\n            s.push(i);\n        }\n        while(!s.empty()){\n                if(s.size()>1) {\n                    \n                    int last=s.top();s.pop();\n                    ans=max(ans,(n-s.top()-1)*a[last]);}\n                else {\n                    ans=max(ans,n*a[s.top()]);\n                s.pop();\n                     }\n        }\n        return ans;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        int n=grid.size(),m=grid[0].size();\n        int l1,l2,h1,h2;\n        for(int i=0;i<n;++i) for(int j=0;j<m;++j) {\n            if(grid[i][j]) l2=i;\n        }\n        for(int i=n-1;i>=0;--i) for(int j=0;j<m;++j) {\n            if(grid[i][j]) l1=i;\n        }\n         for(int j=m-1;j>=0;--j) for(int i=0;i<n;++i) {\n            if(grid[i][j]) h1=j;\n        }\n        for(int j=0;j<m;++j) for(int i=0;i<n;++i) {\n            if(grid[i][j]) h2=j;\n        }\n        \n        // cout << l1 <<\" \"<< l2 <<\" \"<< h1 <<\" \"<< h2 <<'\\n';\n        // vector<vector<char>> a(l2-l1+1,vector<char> (h2-h1+1,'1'));\n        vector<vector<int>> d(l2-l1+1,vector<int> (h2-h1+1,0));\n        for(int i=l1;i<=l2;++i) for(int j=h1;j<=h2;++j) if(grid[i][j]) {\n            // a[i-l1][j-h1]='0';\n            d[i-l1][j-h1]=1;   \n        }\n        \n        // return 1ll*(l2-l1+1)*(h2-h1+1)-maximalRectangle(a);\n        \n       // int dp[][31][31][31][31] = new int[4][31][31][31][31];\n        return solve(3,0,d.size()-1,0,d[0].size()-1,d);\n        \n    }\n    \n    int solve(int k,int l1,int l2,int r1,int r2, vector<vector<int>> &d\n                // , int[][31][31][31][31] dp\n               ){\n        if(k==1) {\n            int p=-1,q=-1,r=-1,s=-1;\n            bool ch =0;\n            for(int i=l1;i<=l2;++i) {\n                for(int j=r1;j<=r2;++j) {\n                if(d[i][j]) {ch=1;break;}\n                }\n                if(ch) break;\n            }\n            if(!ch) return 0;\n            for(int i=l1;i<=l2;++i) {\n                for(int j=r1;j<=r2;++j) {\n                if(d[i][j]) {p=i;break;}\n                }\n                if(p!=-1) break;\n            }\n            for(int i=l2;i>=l1;--i) {\n                for(int j=r1;j<=r2;++j) {\n                if(d[i][j]) {q=i;break;}\n                }\n                if(q!=-1) break;\n            }\n             for(int j=r2;j>=r1;--j) {\n                 for(int i=l1;i<=l2;++i) {\n                if(d[i][j]) {s=j;break;}\n                 }\n                if(s!=-1) break;\n            }\n            for(int j=r1;j<=r2;++j) {\n                for(int i=l1;i<=l2;++i) {\n                if(d[i][j]) {r=j;break;}\n                }\n                if(r!=-1) break;\n            }\n            // cout << (q-p+1)*(s-r+1) << endl;\n            return (q-p+1)*(s-r+1);\n        }\n        \n        int ans = (r2-r1+1)*(l2-l1+1);\n        // horizontal split\n        if(l2>l1) {\n            for(int z=l1+1;z<=l2;++z) {\n                ans = min(ans, solve(k-1,l1,z-1,r1,r2,d)+solve(1,z,l2,r1,r2,d)+0);\n                ans = min(ans, solve(1,l1,z-1,r1,r2,d)+solve(k-1,z,l2,r1,r2,d)+0);\n                // cout << ans << endl;\n            }\n        }\n        // vertical split\n        if(r2>r1) {\n            for(int z=r1+1;z<=r2;++z) {\n                ans = min(ans, solve(k-1,l1,l2,r1,z-1,d)+solve(1,l1,l2,z,r2,d)+0);\n                ans = min(ans, solve(1,l1,l2,r1,z-1,d)+solve(k-1,l1,l2,z,r2,d)+0);\n                // cout << ans << endl;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719114570.0
}