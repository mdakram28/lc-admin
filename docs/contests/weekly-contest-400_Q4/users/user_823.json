{
    "username": "apometta",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        def get_bit_indices(n):\n            indices = []\n            i = 0\n            while n > 0:\n                if (n & 1) == 1: indices.append(i)\n                n >>= 1\n                i += 1\n            return indices\n        \n        min_diff = abs(nums[0] - k)\n        curr = nums[0]\n        l, r = 0, 1\n        bit_indices = [deque() for i in range(31)]\n        \n        while r < len(nums):\n            curr &= nums[r]\n            for i in get_bit_indices(nums[r]):\n                bit_indices[i].append(r)\n            r += 1\n            min_diff = min(min_diff, abs(curr - k))\n            \n            while curr < k and l < r - 1:\n                newlen = r - l - 1\n                for i in range(31):\n                    if len(bit_indices[i]) > 0 and bit_indices[i][0] == l:\n                        bit_indices[i].popleft()\n                    elif len(bit_indices[i]) == newlen:\n                        curr |= 1 << i\n                l += 1\n                min_diff = min(min_diff, abs(curr - k))\n                \n        \n        return min_diff",
    "submit_ts": "1717299752",
    "subm_id": "1274822714"
}