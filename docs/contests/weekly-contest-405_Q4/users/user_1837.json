{
    "username": "Andwerp",
    "submission": "typedef long long ll;\n\nll mod = 1e9 + 7;\n\nclass Solution {\npublic:\n    void FastIO() {\n        ios_base::sync_with_stdio(0);\n        cin.tie(0); cout.tie(0);\n    }\n\n    ll prime = 31;\n    ll calc_hash(string& s){\n        ll hash = 0;\n        for(int i = 0; i < s.size(); i++){\n            hash = (hash * prime) % mod;\n            hash += s[i] - 'a' + 1;\n        }\n        hash %= mod;\n        return hash;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL); cout.tie(NULL);\n        set<int> s;\n        unordered_map<int, int> hm;\n        for(int i = 0; i < words.size(); i++){\n            string w = words[i];\n            int len = w.size();\n            int hash = calc_hash(w);\n            // cout << \"HASH : \" << hash << \" \" << w << \"\\n\";\n            if(!s.count(len)) {\n                s.insert(len);\n            }\n            if(!hm.count(hash)) {\n                hm[hash] = 1e9;\n            }\n            hm[hash] = min(hm[hash], costs[i]);\n        }\n        vector<int> lens(0);\n        for(auto i = s.begin(); i != s.end(); i++){\n            lens.push_back(*i);\n        }\n        int n = target.size();\n        vector<ll> pfx(n + 1);\n        pfx[0] = 0;\n        for(int i = 1; i <= n; i++){\n            pfx[i] = pfx[i - 1] * prime + (target[i - 1] - 'a' + 1);\n            pfx[i] %= mod;\n        }\n        vector<ll> ppow(n + 1, 0);\n        ppow[0] = 1;\n        for(int i = 1; i <= n; i++){\n            ppow[i] = (ppow[i - 1] * prime) % mod;\n        }\n        // cout << \"\\n\";\n        vector<ll> dp(n + 1, 1e18);\n        dp[0] = 0;\n        for(int i = 0; i < n; i++){\n            if(dp[i] == 1e18){\n                continue;\n            }\n            // cout << \"I : \" << i << \"\\n\";\n            for(int j = 0; j < lens.size(); j++){\n                int len = lens[j];\n                if(len + i > n) {\n                    break;\n                }\n                // cout << \"LEN : \" << len << \"\\n\";\n                int l = i;\n                int r = i + len;\n                // cout << (pfx[r] - pfx[l]) << \"\\n\";\n                ll sub_hash = (pfx[r] + mod - (pfx[l] * ppow[r - l]) % mod);\n                if(sub_hash >= mod){\n                    sub_hash -= mod;\n                }\n                // cout << \"SUB HASH : \" << sub_hash << \"\\n\";\n                if(hm.count(sub_hash)) {\n                    // cout << \"FOUND HASH\" << \"\\n\";\n                    int cost = hm[sub_hash];\n                    dp[i + len] = min(dp[i + len], dp[i] + cost);\n                }\n            }\n        }\n        if(dp[n] == 1e18) {\n            return -1;\n        }\n        return dp[n];\n    }\n};",
    "submit_ts": "1720322926",
    "subm_id": "1312362813"
}