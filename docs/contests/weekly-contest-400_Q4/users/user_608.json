{
    "username": "I_have_learn",
    "submission": "class Solution {\npublic:\n    #define all(a) (a).begin(),(a).end()\n    #define ll long long \n    \n   class SegTree {\n        public:\n        int n;\n        vector<int> st;\n\n        SegTree(int _n, vector<int>& arr) {\n            n = _n;\n            st.resize(4 * n + 5);\n            Build(0, 0, n-1, arr);\n        }\n\n        void Build(int index, int l, int r, vector<int>& arr) {\n            if (l == r) {\n                st[index] = arr[l];\n                return;\n            }\n            int mid = (l + r) / 2;\n            Build(index * 2 + 1, l, mid, arr);\n            Build(index * 2 + 2, mid + 1, r, arr);\n            st[index] = st[index * 2 + 1] & st[index * 2 + 2];\n        }\n\n        ll Query(int index, int l, int r, int i, int j) {\n            if (j < l || i > r) {\n                return INT_MAX;\n            }\n            if (i <= l && r <= j) {\n                return st[index];\n            }\n            int mid = (l + r) / 2;\n            int left = Query(index * 2 + 1, l, mid, i, j);\n            int right = Query(index * 2 + 2, mid + 1, r, i, j);\n            return left & right;\n        }\n\n        ll query(int l, int r){\n            return Query(0, 0, n-1, l, r);\n        }\n    };\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        ll n = nums.size();\n        SegTree t(n,nums);\n        ll ans = INT_MAX;\n        \n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (t.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = min(ans, abs(t.query(i, l) - k));\n                 ans = min(ans, abs(k - t.query(i, r)));\n        }\n        \n        return (int)ans;\n    }\n};",
    "submit_ts": 1717299600.0
}