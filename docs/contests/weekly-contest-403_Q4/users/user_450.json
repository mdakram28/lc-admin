{
    "username": "sen-xm",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n        int m = grid.length;\n        int n = grid[0].length;\n        int[][][][] f = new int[m][n][m][n];\n        int[][][][] fr = new int[m][n][m][n];\n        int[][][][] fb = new int[m][n][m][n];\n        int[][][][] fl = new int[m][n][m][n];\n        int[][][][] fu = new int[m][n][m][n];\n    \n        int res = Integer.MAX_VALUE;\n        \n        for(int i1 = 0; i1 < m; i1++){\n            for(int j1 = 0; j1 < n; j1++){\n                for(int i2 = i1; i2 < m; i2++){\n                    int minL = n, maxR = -1, hasOne = 0;\n                    for(int j2 = j1; j2 < n; j2++){\n                        fu[i1][j1][i2][j2] = (i2 > i1) ? fu[i1][j1][i2 - 1][j2] : m;\n                        if(grid[i2][j2] == 1){\n                            if(minL == n){\n                                minL = j2;\n                            }\n                            // if(fu[i1][j1][i2][j2] == m){\n                            //     fu[i1][j1][i2][j2] = i2;\n                            // }\n                            maxR = Math.max(maxR, j2);\n                            hasOne++;\n                        }\n                        fr[i1][j1][i2][j2] = i2 > i1 ? Math.max(fr[i1][j1][i2 - 1][j2], maxR) : maxR;\n                        fl[i1][j1][i2][j2] = i2 > i1 ? Math.min(fl[i1][j1][i2 - 1][j2], minL) : minL;\n                        if(hasOne > 0){\n                            fb[i1][j1][i2][j2] = i2;\n                        } else {\n                            fb[i1][j1][i2][j2] = i2 > i1 ? fb[i1][j1][i2 - 1][j2] : 0;\n                        }\n                        if(hasOne > 0 && fu[i1][j1][i2][j2] == m) fu[i1][j1][i2][j2] = i2;\n                        if(fu[i1][j1][i2][j2] != m){\n                            f[i1][j1][i2][j2] = (fb[i1][j1][i2][j2] - fu[i1][j1][i2][j2] + 1) * (fr[i1][j1][i2][j2] - fl[i1][j1][i2][j2] + 1);\n                        } else {\n                            f[i1][j1][i2][j2] = 0;\n                        }\n                        // System.out.println(i1 + \" \" + j1 + \" \" + i2 + \" \" + j2 + \" \" + f[i1][j1][i2][j2]);\n                        // System.out.println(fu[i1][j1][i2][j2] + \" \" + fb[i1][j1][i2][j2] + \" \" + fl[i1][j1][i2][j2] + \" \" + fr[i1][j1][i2][j2]);\n                        // System.out.println(((i2 > i1) ? fl[i1][j1][i2 - 1][j2] : \" \") + \" \" + minL);\n                    }\n                }\n            }\n        }\n        \n        for(int i = 0; i < m; i++){\n            for(int j = 0; j < n; j++){\n                if(i == m - 1 && j == n - 1) continue;\n                \n                if(i == m - 1){\n                    for(int ii = 0; ii < m - 1; ii++){\n                        res = Math.min(res, f[0][0][m - 1][j] + f[0][j + 1][ii][n - 1] + f[ii + 1][j + 1][m - 1][n - 1]);\n                    }\n                    for(int jj = j + 1; jj < n - 1; jj++){\n                        res = Math.min(res, f[0][0][m - 1][j] + f[0][j + 1][m - 1][jj] + f[0][jj + 1][m - 1][n - 1]);\n                    }\n                } else if(j == n - 1){\n                    for(int jj = 0; jj < n - 1; jj++){\n                        res = Math.min(res, f[0][0][i][n - 1] + f[i + 1][0][m - 1][jj] + f[i + 1][jj + 1][m - 1][n - 1]);\n                    }\n                    for(int ii = i + 1; ii < m - 1; ii++){\n                        res = Math.min(res, f[0][0][i][n - 1] + f[i + 1][0][ii][n - 1] + f[ii + 1][0][m - 1][n - 1]);\n                    }\n                } else {\n                    res = Math.min(res, f[0][0][i][j] + f[i + 1][0][m - 1][j] + f[0][j + 1][m - 1][n - 1]);\n                    res = Math.min(res, f[0][0][i][j] + f[i + 1][0][m - 1][n - 1] + f[0][j + 1][i][n - 1]);\n                }\n            }\n        }\n        \n        return res;\n//         for(int u = 0; u < m; u++){\n//             for(int l = 0; l < n; l++){\n//                 int up = m - 1;\n//                 int left = n - 1;\n//                 int bot = u;\n//                 boolean hasOne = false;\n//                 for(int b = u + 1; b < m; b++){\n//                     int right = l;\n//                     for(int r = l + 1; r < n; r++){\n//                         if(grid[b][r] == 1){\n//                             up = Math.min(up, i);\n//                             bot = Math.max(bot, i);\n//                             left = Math.min(left, j);\n//                             right = Math.max(right, j);\n//                             hasOne = true;\n//                         }\n//                         if(hasOne){\n                            \n//                         }\n//                     }\n//                 }\n//             }\n//         }\n    }\n}",
    "submit_ts": "1719114839",
    "subm_id": "541403534"
}