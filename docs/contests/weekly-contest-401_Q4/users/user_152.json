{
    "username": "flyfy1",
    "submission": "class Solution:\n    def maxTotalReward(self, rewardValues: List[int]) -> int:\n        if len(rewardValues) == 1:\n            return rewardValues[0]\n        \n        rewardValues = sorted(set(rewardValues))\n        \n        mem = {}\n        \n        def dp(idx, m):\n            tv = rewardValues[idx]\n            if tv > m:\n                return 0\n            \n            k = (idx, m)\n            if k in mem:\n                return mem[k]\n            \n            rm = min(m - tv, tv-1)\n            res = 0\n            for i in range(idx):\n                nv = dp(i, rm)\n                # result\n                if nv == rm:\n                    res = rm\n                    break\n                if nv == 0:\n                    # already larger than rm we're looking for\n                    break\n                res = max(nv, res)   \n            res += tv   \n            mem[k] = res\n            return res\n        \n        lv = rewardValues[-1]\n        m = lv-1\n        result = 0\n        for i in range(len(rewardValues)-2, -1, -1):\n            result = max(dp(i, m), result)\n            if result == m:\n                break\n\n        return lv + result",
    "submit_ts": 1717904630.0
}