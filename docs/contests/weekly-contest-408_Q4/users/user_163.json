{
    "username": "ankan2526",
    "submission": "import math\n    \n# # Example usage:\n# x_center = 0\n# y_center = 0\n# radius = 5\n# a = 1\n# b = 1\n# c = 0\n\n# print(find_intersection(x_center, y_center, radius, a, b, c))\n\n# # Example for vertical line\n# a = 1\n# b = 0\n# c = -3\n# print(find_intersection(x_center, y_center, radius, a, b, c))\n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def find_intersection(x_center, y_center, radius, a, b, c):\n            if a != 0 and b == 0:\n                # Vertical line: ax + c = 0\n                x = -c / a\n                dx = x - x_center\n                if abs(dx) > radius:\n                    return []  # No real intersection points\n\n                dy = math.sqrt(radius**2 - dx**2)\n                y1 = y_center + dy\n                y2 = y_center - dy\n\n\n\n                if dy == 0:\n                    return [(x, y1)]  # One intersection point (tangent)\n\n                return [(x, y1), (x, y2)]  # Two intersection points\n\n            elif a == 0 and b != 0:\n                # Horizontal line: by + c = 0\n                y = -c / b\n                dy = y - y_center\n                if abs(dy) > radius:\n                    return []  # No real intersection points\n\n                dx = math.sqrt(radius**2 - dy**2)\n                x1 = x_center + dx\n                x2 = x_center - dx\n\n                if dx == 0:\n                    return [(x1, y)]  # One intersection point (tangent)\n\n                return [(x1, y), (x2, y)]  # Two intersection points\n        \n        def isInside(x, y, r, x1, y1):\n            return (x-x1)**2 + (y-y1)**2 <= r*r\n        \n        def is_intersecting(x2,y2,r2, x1,y1,r1):\n            distance_squared = (x2 - x1)**2 + (y2 - y1)**2\n            return (r1+r2) ** 2 >= distance_squared\n        \n        \n        \n        for x1, y1 in [[X, Y], [0, 0]]:\n            for x,y,r in circles:\n                if isInside(x, y, r, x1, y1):\n                    return False\n        \n        top_left_lines = [[1, 0, 0], [0, 1, Y]]\n        bottom_right_lines = [[0, 1, 0], [1, 0, X]]\n        \n        top_left = set()\n        bottom_right = set()\n        n = len(circles)\n        visited = [0] * n\n        for i in range(n):\n            x, y, r = circles[i]\n            pts = find_intersection(x, y, r, 1, 0, 0)\n            for x1, y1 in pts:\n                if 0 <= y1 <= Y:\n                    visited[i] = 1\n                    top_left.add(i)\n                    break\n            \n            pts = find_intersection(x, y, r, 0, 1, -Y)\n            for x1, y1 in pts:\n                if 0 <= x1 <= X:\n                    visited[i] = 1\n                    top_left.add(i)\n                    break\n            \n            pts = find_intersection(x, y, r, 1, 0, -X)\n            for x1, y1 in pts:\n                if 0 <= y1 <= Y:\n                    bottom_right.add(i)\n                    break\n            \n            pts = find_intersection(x, y, r, 0, 1, 0)\n            for x1, y1 in pts:\n                if 0 <= x1 <= X:\n                    bottom_right.add(i)\n                    break\n        \n        graph = [[] for i in range(n)]\n        \n        for i in range(n):\n            x,y,r = circles[i]\n            for j in range(i+1, n):\n                x1,y1,r1 = circles[j]\n                if is_intersecting(x,y,r, x1,y1,r1):\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        queue = top_left\n        \n        \n        while queue:\n            q = []\n            for i in queue:\n                for j in graph[i]:\n                    if visited[j] == 0:\n                        visited[j] = 1\n                        q.append(j)\n            queue = q\n        for i in bottom_right:\n            if visited[i]:\n                return False\n        return True",
    "submit_ts": "1722139052",
    "subm_id": "1335806529"
}