{
    "username": "ayman444",
    "submission": "class Solution {\n    \n    const int Mod = 1e9+7;\n    unordered_map<int, int> mp;\n    vector<vector<long long>> dp;\n    long long solve(int length, int inversions) {\n        if (inversions < 0) return 0;\n        if (length == 0) return inversions == 0 ? 1 : 0;\n\n        if (dp[length][inversions] != -1) return dp[length][inversions];\n\n        long long result = 0;\n        for (int i = 0; i < length; ++i) {\n            result = (result + solve(length - 1, inversions - i)) % Mod;\n        }\n\n        dp[length][inversions] = result;\n        return result;\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        mp.clear();\n        for (auto& constraint : requirements) {\n            mp[constraint[0] + 1] = constraint[1];\n        }\n\n        dp = vector<vector<long long>>(n + 1, vector<long long>(401, -1));\n\n        for (int length = 1; length <= n; ++length) {\n            if (mp.count(length) > 0) {\n                int requiredInversions = mp[length];\n                for (int k = 0; k <= 400; ++k) {\n                    if (k != requiredInversions) {\n                        dp[length][k] = 0;\n                    }\n                }\n            }\n        }\n\n        return solve(n, mp[n]);\n    }\n};",
    "submit_ts": "1719071787",
    "subm_id": "1296854163"
}