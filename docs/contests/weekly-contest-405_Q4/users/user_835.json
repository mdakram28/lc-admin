{
    "username": "_4o4_",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    struct Node {\n        unordered_map<char, Node*> children;\n        vector<pair<int, int>> ends; \n    };\n\n    class Trie {\n    public:\n        Node* root;\n        Trie() { root = new Node(); }\n\n        void insert(const string& w, int idx, int cost) {\n            Node* node = root;\n            for (char c : w) {\n                if (!node->children.count(c))\n                    node->children[c] = new Node();\n                node = node->children[c];\n            }\n            node->ends.push_back({idx, cost});\n        }\n    };\n\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        int n = t.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < w.size(); ++i) {\n            trie.insert(w[i], i, c[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char ch = t[j];\n                if (!node->children.count(ch)) break;\n                \n                node = node->children[ch];\n                for (auto& p : node->ends) {\n                    int idx = p.first;\n                    int cost = p.second;\n                    int len = w[idx].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322050",
    "subm_id": "1312339334"
}