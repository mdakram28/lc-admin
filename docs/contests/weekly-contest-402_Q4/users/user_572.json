{
    "username": "U_N_K_N_O_W_N_0",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> st;\n    int n;\n\n    void build(vector<int>& nums, int l, int r, int pos) {\n        if (l == r) {\n            st[pos] = peak(nums, l) ? 1 : 0;\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        build(nums, l, mid, 2 * pos + 1);\n        build(nums, mid + 1, r, 2 * pos + 2);\n\n        st[pos] = st[2 * pos + 1] + st[2 * pos + 2];\n    }\n\n    void update(int index, int l, int r, int pos, vector<int>& nums) {\n        if (l == r) {\n            st[pos] = peak(nums, index) ? 1 : 0;\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        if (index <= mid) {\n            update(index, l, mid, 2 * pos + 1, nums);\n        } else {\n            update(index, mid + 1, r, 2 * pos + 2, nums);\n        }\n\n        st[pos] = st[2 * pos + 1] + st[2 * pos + 2];\n    }\n\n    int query(int ql, int qr, int l, int r, int pos) {\n        if (ql > r || qr < l) return 0;\n        if (ql <= l && qr >= r) return st[pos];\n\n        int mid = (l + r) / 2;\n        return query(ql, qr, l, mid, 2 * pos + 1) + query(ql, qr, mid + 1, r, 2 * pos + 2);\n    }\n\n    bool peak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        st.resize(4 * n, 0);\n        build(nums, 0, n - 1, 0);\n    }\n\n    void update(int index, vector<int>& nums) {\n        update(index, 0, n - 1, 0, nums);\n        if (index > 0) update(index - 1, 0, n - 1, 0, nums);\n        if (index < n - 1) update(index + 1, 0, n - 1, 0, nums);\n    }\n\n    int query(int ql, int qr) {\n        if (ql >= qr - 1) return 0; \n        return query(ql + 1, qr - 1, 0, n - 1, 0);\n    }\n};\n\nclass Solution \n{\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& q) \n    {\n        SegmentTree tree(nums);\n        vector<int> res;\n        \n        for(int i=0;i<q.size();i++)\n        {\n            if(q[i][0]==1)\n            {\n                res.push_back(tree.query(q[i][1], q[i][2]));\n            }\n            else\n            {\n                nums[q[i][1]] = q[i][2];\n                tree.update(q[i][1], nums);\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1718507637.0
}