{
    "username": "Hunter_TheCodeKiller",
    "submission": "#define ll long long int\n#define INF INT32_MAX\n\n// Segment Tree class to perform task optimally\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n    int n = nums.size();\n    SegmentTree st(nums);\n    int ans = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n\n        // binary search implementation\n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (st.query(i, mid) >= k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1)\n            ans = min(ans, abs(st.query(i, l) - k));\n        ans = min(ans, abs(k - st.query(i, r)));\n    }\n    return ans;\n    }\n};\n",
    "submit_ts": "1717300333",
    "subm_id": "1274840938"
}