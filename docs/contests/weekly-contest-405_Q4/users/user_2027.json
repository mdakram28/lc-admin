{
    "username": "archana_06",
    "submission": "\nclass TrieNode {\npublic:\n    TrieNode* children[26];\n    int cost;\n\n    TrieNode() : cost(-1) {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int idx = c - 'a';\n            if (!node->children[idx]) {\n                node->children[idx] = new TrieNode();\n            }\n            node = node->children[idx];\n        }\n        if (node->cost == -1 || cost < node->cost) {\n            node->cost = cost;\n        }\n    }\n\n    int search(const string& target, int start) {\n        TrieNode* node = root;\n        int minCost = 0;\n        for (int i = start; i < target.size(); ++i) {\n            int idx = target[i] - 'a';\n            if (!node->children[idx]) {\n                return -1; // No match found\n            }\n            node = node->children[idx];\n            if (node->cost != -1) {\n                minCost += node->cost;\n            } else {\n                return -1; // No valid cost found\n            }\n        }\n        return minCost;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                int idx = target[j] - 'a';\n                if (!node->children[idx]) break;\n                node = node->children[idx];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322292",
    "subm_id": "1312345949"
}