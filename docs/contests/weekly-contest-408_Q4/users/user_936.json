{
    "username": "potatoesYUM",
    "submission": "class UnionFind {\npublic:\n\tint components;\n\tvector<int> parent;\n\tvector<int> rank;\n\tUnionFind(int n) {\n\t\trank.resize(n, 1);\n\t\tcomponents = n;\n\t\tparent.resize(n);\n\t\tfor (int i = 0; i < n; i++) parent[i] = i;\n\t}\n\n\tint getParent(int i) {\n\t\tif (parent[i] != i) return parent[i] = getParent(parent[i]);\n\t\treturn i;\n\t}\n\n\tbool connect(int i, int j) {\n\t\tint iParent = getParent(i);\n\t\tint jParent = getParent(j);\n\t\tif (iParent == jParent) return false;\n\t\tcomponents--;\n\t\tif (rank[iParent] >= rank[jParent]) {\n\t\t\trank[iParent] += rank[jParent];\n\t\t\tparent[jParent] = iParent;\n\t\t}\n\t\telse {\n\t\t\trank[jParent] += rank[iParent];\n\t\t\tparent[iParent] = jParent;\n\t\t}\n\t\treturn true;\n\t}\n\n\tbool isConnected(int i, int j) {\n\t\treturn getParent(i) == getParent(j);\n\t}\n\n\tint getSize(int i) {\n\t\treturn rank[getParent(i)];\n\t}\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        UnionFind uf(n + 1);\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < i; j++) {\n                int x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n                int x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                if (1ll * (x1 - x2) * (x1 - x2) + 1ll * (y1 - y2) * (y1 - y2) <= 1ll * (r1 + r2) * (r1 + r2)) uf.connect(i, j);\n            }\n        }\n\n        bool res = true;\n        set<int> xStart;\n        // check for x axis\n        for (int i = 0; i < n; i++) {\n            if (circles[i][0] - circles[i][2] <= 0) xStart.insert(uf.getParent(i));\n        }\n\n        set<int> xEnd;\n        // check for x end\n        for (int i = 0; i < n; i++) {\n            if (circles[i][0] + circles[i][2] >= X) {\n                int parent = uf.getParent(i);\n                if (xStart.find(parent) != xStart.end()) {\n                    res = false;\n                    break;\n                }\n                xEnd.insert(parent);\n            }\n        }\n\n        if (!res) return false;\n\n        set<int> yStart;\n        // check for y axis\n        for (int i = 0; i < n; i++) {\n            if (circles[i][1] - circles[i][2] <= 0) {\n                int p = uf.getParent(i);\n                yStart.insert(p);\n                if (xStart.find(p) != xStart.end()) {\n                    res = false;\n                    break;\n                }\n            }\n        }\n\n        if (!res) return false;\n\n        // check for y end\n        for (int i = 0; i < n; i++) {\n            if (circles[i][1] + circles[i][2] >= Y) {\n                int parent = uf.getParent(i);\n                if (yStart.find(parent) != yStart.end()) {\n                    res = false;\n                    break;\n                }\n                if (xEnd.find(parent) != xEnd.end()) {\n                    res = false;\n                    break;\n                }\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1722138105",
    "subm_id": "1335782237"
}