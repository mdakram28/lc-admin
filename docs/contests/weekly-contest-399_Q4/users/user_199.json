{
    "username": "LGM70",
    "submission": "class Solution {\n    private static final int mod = 1000000007;\n\n    public int maximumSumSubsequence(int[] nums, int[][] queries) {\n        SegmentTree tree = new SegmentTree(nums, 0, nums.length);\n        int sum = 0;\n        for (int[] query : queries) {\n            tree.update(query[0], query[1]);\n            sum += tree.maxSum;\n            sum %= mod;\n        }\n        return sum;\n    }\n\n    class SegmentTree {\n        int lt;\n        int rt;\n        int maxSum;\n        int maxSumWithoutLeft;\n        int maxSumWithoutRight;\n        int maxSumWithoutBothEnds;\n        SegmentTree left;\n        SegmentTree right;\n\n        SegmentTree(int[] nums, int lt, int rt) {\n            this.lt = lt;\n            this.rt = rt;\n            if (lt == rt - 1) {\n                maxSum = Math.max(nums[lt], 0);\n                maxSumWithoutLeft = 0;\n                maxSumWithoutRight = 0;\n                maxSumWithoutBothEnds = 0;\n                return;\n            }\n            int mid = (lt + rt) / 2;\n            left = new SegmentTree(nums, lt, mid);\n            right = new SegmentTree(nums, mid, rt);\n            calSum();\n        }\n\n        void calSum() {\n            maxSum = Math.max(left.maxSumWithoutRight + right.maxSum,\n                    left.maxSum + right.maxSumWithoutLeft);\n            maxSumWithoutLeft = Math.max(left.maxSumWithoutBothEnds + right.maxSum,\n                    left.maxSumWithoutLeft + right.maxSumWithoutLeft);\n            maxSumWithoutRight = Math.max(left.maxSumWithoutRight + right.maxSumWithoutRight,\n                    left.maxSum + right.maxSumWithoutBothEnds);\n            maxSumWithoutBothEnds = Math.max(left.maxSumWithoutBothEnds + right.maxSumWithoutRight,\n                    left.maxSumWithoutLeft + right.maxSumWithoutBothEnds);\n        }\n\n        void update(int idx, int val) {\n            if (lt == rt - 1) {\n                maxSum = Math.max(val, 0);\n                return;\n            }\n            int mid = (lt + rt) / 2;\n            if (idx < mid) {\n                left.update(idx, val);\n            }\n            else {\n                right.update(idx, val);\n            }\n            calSum();\n        }\n    }\n}",
    "submit_ts": "1716692837",
    "subm_id": "1268066219"
}