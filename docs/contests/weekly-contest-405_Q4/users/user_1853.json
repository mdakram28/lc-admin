{
    "username": "vaibhav_134",
    "submission": "const int MOD = 1e9 + 7;\nconst int BASE = 31;\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<int> costs;\n    TrieNode() : children(26, nullptr) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int idx = c - 'a';\n            if (!node->children[idx]) {\n                node->children[idx] = new TrieNode();\n            }\n            node = node->children[idx];\n        }\n        node->costs.push_back(cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                int idx = target[j] - 'a';\n                if (!node->children[idx]) break;\n                node = node->children[idx];\n                if (!node->costs.empty()) {\n                    for (int cost : node->costs) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324769",
    "subm_id": "1312407770"
}