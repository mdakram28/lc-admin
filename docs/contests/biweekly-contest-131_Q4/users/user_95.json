{
    "username": "Sarthak3204",
    "submission": "class Solution {\npublic:\n    class SegTree {\n    public:\n        vector<array<int, 3>> tree; //maxpref, maxsuf, maxseg\n        int s = 1;\n        array<int, 3> IDENTITY_ELEMENT = {0, 0, 0};\n\n        SegTree(int n) {\n            while (s < n) s <<= 1;\n            tree.resize(s << 1, IDENTITY_ELEMENT);\n        }\n\n        array<int, 3> query(int l, int r, int node, int lo, int hi) {\n            if (l <= lo and hi <= r) return tree[node];\n            else if (lo > r or hi < l) return IDENTITY_ELEMENT;\n\n            int mid = (lo + hi) >> 1;\n            auto lhs = query(l, r, node << 1, lo , mid);\n            auto rhs = query(l, r, node << 1 | 1, mid + 1, hi);\n\n            return merge(lhs, rhs, lo, hi);\n        }\n\n        void update(int l, int r, int val, int node, int lo, int hi) {\n            if (l <= lo and hi <= r) {\n                tree[node] = {val, val, val};\n                return;\n            }\n            if (lo > r or hi < l) return;\n\n            int mid = (lo + hi) >> 1;\n            update(l, r, val, node << 1, lo, mid);\n            update(l, r, val, node << 1 | 1, mid + 1, hi);\n\n            tree[node] = merge(tree[node << 1], tree[node << 1 | 1], lo, hi);\n        }\n\n        void update(int l, int r, int val) {\n            update(l, r, val, 1, 0, s - 1);\n        }\n\n        int query(int l, int r) {\n            return query(l, r, 1, 0, s - 1)[2];\n        }\n\n        array<int, 3> merge(array<int, 3> &lhs, array<int, 3> &rhs, int lo, int hi) {\n            int mid = (lo + hi) >> 1;\n            array<int, 3> ans;\n            ans[0] = lhs[0];\n            ans[1] = rhs[1];\n\n            if (lhs[0] == lhs[1] and lhs[0] == mid - lo + 1) ans[0] = max(ans[0], mid - lo + 1 + rhs[0]);\n            if (rhs[0] == rhs[1] and rhs[0] == hi - mid) ans[1] = max(ans[1], hi - mid + lhs[1]);\n\n            ans[2] = max({lhs[2], rhs[2], lhs[1] + rhs[0]});\n            return ans;\n        }\n    };\n    vector<bool> getResults(vector<vector<int>>& query) {\n        int q = size(query);\n        int n = min((int)5e4 + 1, 3 * q + 1);\n        SegTree st(n);\n        for (int i = 1; i < n; i++)\n            st.update(i, i, 1);\n\n        vector<bool> ans;\n        for (auto &_ : query) {\n            int op = _[0], x = _[1];\n            if (op == 1) {\n                st.update(x, x, 0);\n            }\n            else {\n                int s = _[2];\n                int mx = st.query(0, x - 1) + 1;\n                ans.push_back(s <= mx);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716649954",
    "subm_id": "1267602365"
}