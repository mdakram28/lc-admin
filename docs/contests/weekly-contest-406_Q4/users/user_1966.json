{
    "username": "TheoGermal",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ntemplate <class T>\nusing pbds =\n    tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n// #define cerr if(false)cerr\n\n#define pb push_back\n#define F first\n#define S second\n#define yes cout << \"Yes\\n\"\n#define no cout << \"No\\n\"\n#define yn(x) x ? yes : no\n#define f(i, s, e) for (int i = s; i < e; i++)\n#define vi vector<int>\n#define vb vector<bool>\n#define pii pair<int, int>\n#define vpi vector<pii>\n#define all(x) x.begin(), x.end()\n#define minele(x) *min_element(all(x))\n#define maxele(x) *max_element(all(x))\n#define endl '\\n'\n\nconst int N = 2e5;\nconst int MOD = 998244353;\n\n#ifndef ONLINE_JUDGE\n#define debug(x)            \\\n    cerr << (#x) << \" is \"; \\\n    _print(x)\n#define dbg(x...)           \\\n    cerr << (#x) << \" is \"; \\\n    _print(x)\n#else\n#define debug(x)\n#define dbg(x)\n#define dbg(x...)\n#endif\n\ntemplate <typename T>\nvoid _print(T a)\n{\n    cerr << a;\n}\ntemplate <typename T1, typename... T2>\nvoid _print(T1 t1, T2... t2)\n{\n    cerr << t1 << \", \";\n    _print(t2...);\n    cerr << endl;\n}\ntemplate <typename T>\nvoid print(T a)\n{\n    cout << a << ' ';\n}\ntemplate <typename T>\nvoid println(T a)\n{\n    cout << a << endl;\n}\ntemplate <class T>\nistream &operator>>(istream &is, vector<T> &a)\n{\n    for (auto &x : a)\n        is >> x;\n    return is;\n}\ntemplate <class T>\nostream &operator<<(ostream &os, const vector<T> &a)\n{\n    for (const auto &x : a)\n        os << x << ' ';\n    return os;\n}\n\ntemplate <class T, class V>\nvoid _print(pair<T, V> p);\ntemplate <class T>\nvoid _print(vector<T> v);\ntemplate <class T>\nvoid _print(set<T> v);\ntemplate <class T, class V>\nvoid _print(map<T, V> v);\ntemplate <class T>\nvoid _print(multiset<T> v);\ntemplate <class T, class V>\nvoid _print(pair<T, V> p)\n{\n    cerr << \"{\";\n    _print(p.F);\n    cerr << \",\";\n    _print(p.S);\n    cerr << \"} \";\n}\ntemplate <class T>\nvoid _print(vector<T> v)\n{\n    cerr << \"[ \";\n    for (T i : v)\n    {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n    cerr << endl;\n}\ntemplate <class T>\nvoid _print(set<T> v)\n{\n    cerr << \"[ \";\n    for (T i : v)\n    {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n    cerr << endl;\n}\ntemplate <class T>\nvoid _print(multiset<T> v)\n{\n    cerr << \"[ \";\n    for (T i : v)\n    {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n    cerr << endl;\n}\ntemplate <class T, class V>\nvoid _print(map<T, V> v)\n{\n    cerr << \"[ \";\n    for (auto i : v)\n    {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n    cerr << endl;\n}\ntemplate <class T, class V>\nvoid _print(unordered_map<T, V> v)\n{\n    cerr << \"[ \";\n    for (auto i : v)\n    {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n    cerr << endl;\n}\n\n#define int long long\nlong long minimumCostOfBreaking(vi hz, vi vt, int m, int n)\n{\n    m--;\n    n--;\n    int ans = 0;\n    sort(all(hz));\n    reverse(all(hz));\n    sort(all(vt));\n    reverse(all(vt));\n\n    int hcut = 1, vcut = 1;\n    int i = 0, j = 0;\n    while ((i < m) && (j < n))\n    {\n        if (hz[i] > vt[j])\n        {\n            ans += hz[i] * vcut;        \n            hcut++;\n            i++;\n        }\n        else\n        {\n            ans += vt[j] * hcut;          \n            vcut++;\n            j++;\n        }\n    }\n\n    int curr = 0;\n    for(int k = i; k < m; k++) {\n        curr += hz[k];\n    }\n    ans += curr * vcut;\n    curr = 0;\n    for(int k = j; k < n; k++) {\n        curr += vt[k];\n    }\n    ans += curr * hcut;\n    return ans;\n}\n#undef int\nclass Solution\n{\npublic:\n    long long minimumCost(int m, int n, vector<int> &horizontalCut, vector<int> &verticalCut)\n    {\n        vector<long long> hz, vt;\n        for(auto i : horizontalCut) hz.pb(i);\n        for(auto i : verticalCut) vt.pb(i);\n        long long M = m;\n        long long N = n;\n        return minimumCostOfBreaking(hz, vt, M, N);\n    }\n};\n",
    "submit_ts": "1720926557",
    "subm_id": "1320289752"
}