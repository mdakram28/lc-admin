{
    "username": "AndriyLu",
    "submission": "class Solution:\n    \n    def findMaxManhDist(self, pts, ignore):\n        \n        # indecies\n        maxsi = -1\n        maxdi = -1\n        minsi = -1\n        maxsi = -1\n        \n        #values\n        maxs = float(\"-inf\")\n        maxd = float(\"-inf\")\n        mins = float(\"inf\")\n        mind = float(\"inf\")\n        \n        for i in range(len(pts)):\n            if i == ignore:\n                continue\n            \n            s = pts[i][0] + pts[i][1]\n            d = pts[i][0] - pts[i][1]\n            \n            if s > maxs:\n                maxs = s\n                maxsi = i\n            if s < mins:\n                mins = s\n                minsi = i\n                \n            if d > maxd:\n                maxd = d\n                maxdi = i\n                \n            if d < mind:\n                mind = d\n                mindi = i\n        \n        # what if equal? perhaps need to have 4 indecies to consider?\n        # need to also return the indecies of what points we want to try to ignore\n        if maxs - mins > maxd - mind:\n            return (maxs - mins, maxsi, minsi)\n        if maxs - mins < maxd - mind:\n            return (maxd - mind, maxdi, mindi)\n        \n        # equal\n        return (maxd - mind, maxsi, minsi, maxdi, mindi)\n        \n                \n        \n    def minimumDistance(self, points: List[List[int]]) -> int:\n        # manhatan so just find lowest/highest x + y n x-y n get max \n        # first is maxdist, rest is points to try ignoring\n        allRes = self.findMaxManhDist(points, -1)\n        res = float(\"inf\")\n        \n        for i in range(1, len(allRes)):\n            # call func n get first val aka dist, ignore potential ignore point\n            ignore = allRes[i]\n            val = self.findMaxManhDist(points, ignore)[0]\n            res = min(res, val)\n        \n        return res\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    "
}