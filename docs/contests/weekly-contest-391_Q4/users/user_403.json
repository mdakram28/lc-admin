{
    "username": "lu-chen-chen",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int min = Integer.MAX_VALUE / 2;\n        int n = points.length;\n        int[][] arr = new int[n][4];\n        int[] max = new int[4];\n        Arrays.fill(max, Integer.MIN_VALUE / 2);\n        for (int i = 0; i < n; i++) {\n            int[] point = points[i];\n            arr[i][0] = point[0] + point[1];\n            arr[i][1] = point[0] - point[1];\n            arr[i][2] = -point[0] - point[1];\n            arr[i][3] = -point[0] + point[1];\n            for (int j = 0; j < 4; j++) {\n                max[j] = Math.max(max[j], arr[i][j]);\n            }\n        }\n        int[] cnt = new int[4];\n        int[] index = new int[4];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 4; j++) {\n                if (arr[i][j] == max[j]) {\n                    cnt[j]++;\n                    index[j] = i;\n                }\n            }\n        }\n        min = getMax(points, -1);\n        for (int i = 0; i < 4; i++) {\n            if (cnt[i] == 1) {\n                min = Math.min(min, getMax(points, index[i]));\n            }\n        }\n        return min;\n    }\n\n    private int getMax(int[][] points, int v) {\n        int[] p;\n        if (v == 0) {\n            p = points[1];\n        } else {\n            p = points[0];\n        }\n        int a = p[0] + p[1];\n        int b = p[0] - p[1];\n        int c = -p[0] - p[1];\n        int d = -p[0] + p[1];\n        for (int i = 0; i < points.length; i++) {\n            if (i == v) {\n                continue;\n            }\n            int[] point = points[i];\n            a = Math.max(a, point[0] + point[1]);\n            b = Math.max(b, point[0] - point[1]);\n            c = Math.max(c, -point[0] - point[1]);\n            d = Math.max(d, -point[0] + point[1]);\n        }\n        return Math.max(a + c, b + d);\n    }\n}"
}