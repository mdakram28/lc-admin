{
    "username": "xin-140",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (4 * self.n)\n        self.lazy = [None] * (4 * self.n)\n        self.build(data, 0, 0, self.n - 1)\n\n    def build(self, data, node, start, end):\n        if start == end:\n            self.tree[node] = data[start]\n        else:\n            mid = (start + end) // 2\n            self.build(data, 2 * node + 1, start, mid)\n            self.build(data, 2 * node + 2, mid + 1, end)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update_range(self, l, r, value, node, start, end):\n        if self.lazy[node] is not None:\n\n            self.tree[node] = (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] = self.lazy[node]\n                selflazy[2 * node + 2] = self.lazy[node]\n            self.lazy[node] = None\n\n        if start > r or end < l:\n            return\n\n        if start >= l and end <= r:\n            self.tree[node] = (end - start + 1) * value\n            if start != end:\n                self.lazy[2 * node + 1] = value\n                self.lazy[2 * node + 2] = value\n            return\n\n        mid = (start + end) // 2\n        self.update_range(l, r, value, 2 * node + 1, start, mid)\n        self.update_range(l, r, value, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def query(self, l, r, node, start, end):\n        if start > r or end < l:\n            return 0\n\n        if self.lazy[node] is not None:\n            self.tree[node] = (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] = self.lazy[node]\n                self.lazy[2 * node + 2] = self.lazy[node]\n            self.lazy[node] = None\n\n        if start >= l and end <= r:\n            return self.tree[node]\n\n        mid = (start + end) // 2\n        left_query = self.query(l, r, 2 * node + 1, start, mid)\n        right_query = self.query(l, r, 2 * node + 2, mid + 1, end)\n        return left_query + right_query\n\ndef is_peak(nums, i):\n    return i > 0 and i < len(nums) - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = [0] * len(nums)\n        for i in range(1, len(nums) - 1):\n            if is_peak(nums, i):\n                peaks[i] = 1\n\n        seg_tree = SegmentTree(peaks)\n        results = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                result = seg_tree.query(max(li + 1, 1), min(ri - 1, len(nums) - 2), 0, 0, len(nums) - 1)\n                results.append(result)\n            elif query[0] == 2:\n                index, value = query[1], query[2]\n                old_value = nums[index]\n                nums[index] = value\n                for i in range(max(index - 1, 1), min(index + 2, len(nums) - 1)):\n                    new_peak_status = 1 if is_peak(nums, i) else 0\n                    if peaks[i] != new_peak_status:\n                        seg_tree.update_range(i, i, new_peak_status, 0, 0, len(nums) - 1)\n                        peaks[i] = new_peak_status\n\n        return results",
    "submit_ts": 1718508624.0
}