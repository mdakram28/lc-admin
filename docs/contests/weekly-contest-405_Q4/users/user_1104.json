{
    "username": "happypotato1207",
    "submission": "#include <bits/stdc++.h>\n#define ll long long\n#define ld long double\n#define pii pair<int, int>\n#define pll pair<ll int, ll int>\n#define ff first\n#define ss second\n#define pb push_back\n#pragma GCC optimize(\"O3,unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\nusing namespace std;\nconst int SIZE = 26;\nstruct Node {\n\tvector<int> nxt;\n\tint par, link, olink, c;\n\tint ends;\n\tNode(int pp = -1, int last = -1): par(pp), link(-1), olink(-1), c(last) {\n\t\tnxt.resize(SIZE, -1); ends = -1;\n\t};\n};\nclass AhoCorasick {\npublic:\n\tvector<Node> trie;\n\n\tvoid insert(string s, int idx) {\n\t\tint ptr = 0;\n\t\tfor (char c : s) {\n\t\t\tint to = c - 'a';\n\t\t\tif (trie[ptr].nxt[to] == -1) {\n\t\t\t\ttrie.pb(Node(ptr, to));\n\t\t\t\ttrie[ptr].nxt[to] = (int)(trie.size()) - 1;\n\t\t\t}\n\t\t\tptr = trie[ptr].nxt[to];\n\t\t}\n\t\ttrie[ptr].ends = idx;\n\t}\n\t\n\tAhoCorasick(vector<string> v) {\n\t\ttrie.pb(Node());\n\t\tfor (int i = 0; i < (int)(v.size()); i++) insert(v[i], i);\n\n\t\tqueue<int> q; q.push(0);\n\t\twhile (!q.empty()) {\n\t\t\tint ptr = q.front(); q.pop();\n\t\t\tfor (int i = 0; i < SIZE; i++) {\n\t\t\t\tif (trie[ptr].nxt[i] != -1) q.push(trie[ptr].nxt[i]);\n\t\t\t}\n\t\t\tif (ptr == 0) {\n\t\t\t\ttrie[0].link = 0;\n\t\t\t\tfor (int i = 0; i < SIZE; i++) {\n\t\t\t\t\tif (trie[0].nxt[i] == -1) trie[0].nxt[i] = 0;\n\t\t\t\t}\n                trie[0].olink = 0;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (trie[ptr].par == 0) {\n\t\t\t\ttrie[ptr].link = 0;\n\t\t\t} else {\n\t\t\t\tint prev = trie[trie[ptr].par].link;\n\t\t\t\ttrie[ptr].link = trie[prev].nxt[trie[ptr].c];\n\t\t\t}\n\t\t\tfor (int i = 0; i < SIZE; i++) {\n\t\t\t\tif (trie[ptr].nxt[i] != -1) continue;\n\t\t\t\ttrie[ptr].nxt[i] = trie[trie[ptr].link].nxt[i];\n\t\t\t}\n\n            if (trie[trie[ptr].link].ends != -1) trie[ptr].olink = trie[ptr].link;\n            else trie[ptr].olink = trie[trie[ptr].link].olink;\n\t\t}\n\n        // for (int i = 0; i < (int)(trie.size()); i++) {\n        //     cout << i << ' ' << trie[i].par << ' ' << trie[i].ends << ' ' << trie[i].link << ' ' << trie[i].olink << endl;\n        // }\n\t}\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        map<string, int> mp;\n        for (int i = 0; i < n; i++) {\n            if (mp.find(words[i]) == mp.end()) mp[words[i]] = costs[i];\n            else mp[words[i]] = min(mp[words[i]], costs[i]);\n        }\n        vector<string> v;\n        vector<int> cost;\n        for (auto it = mp.begin(); it != mp.end(); ++it) {\n            v.pb(it->ff); cost.pb(it->ss);\n        }\n        n = v.size();\n        // for (int i = 0; i < n; i++) {\n        //     cout << v[i] << \" <-> \" << cost[i] << endl;\n        // }\n        AhoCorasick AC(v);\n        int m = target.length();\n        int dp[m + 1]; const int MAX = 1e9;\n        dp[0] = 0;\n        int ptr = 0;\n        for (int i = 1; i <= m; i++) {\n\t\t\tptr = AC.trie[ptr].nxt[target[i - 1] - 'a'];\n            // cout << i << \": \" << ptr << endl;\n            dp[i] = MAX;\n            int cur = ptr;\n            while (cur != 0) {\n                if (AC.trie[cur].ends != -1) {\n                    int pos = AC.trie[cur].ends;\n                    int len = v[pos].length();\n                    // cout << cur << ' ' << pos << ' ' << len << endl;\n                    dp[i] = min(dp[i], dp[i - len] + cost[pos]);\n                }\n                cur = AC.trie[cur].olink;\n            }\n            // cout << i << \" -> \" << dp[i] << endl;\n        }\n        return (dp[m] == MAX ? -1 : dp[m]);\n    }\n};",
    "submit_ts": "1720322543",
    "subm_id": "1312352745"
}