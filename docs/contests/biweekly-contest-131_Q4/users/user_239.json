{
    "username": "xi-jun-xiao-zi",
    "submission": "from typing import List\n\nfrom sortedcontainers import SortedList\n\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        inf = 9999999999\n        sl = SortedList()\n        ready = SortedList()\n        sl.add((0, inf))\n        ans = []\n        for query in queries:\n            if query[0] == 1:\n                idx = sl.bisect_left((query[1], 0)) - 1\n                start, end = sl[idx][0], sl[idx][0] + sl[idx][1]\n                if query[1] >= end:\n                    idx = ready.bisect_left((query[1], 0)) - 1\n                    start, long = ready.pop(idx)\n                    ready.add((start, query[1] - start))\n                    ready.add((query[1], start + long - query[1]))\n                else:\n                    sl.pop(idx)\n                    if idx == 0 or sl[idx - 1][1] < query[1] - start:\n                        sl.add((start, query[1] - start))\n                    else:\n                        ready.add((start, query[1] - start))\n                        idx -= 1\n                    if end - start == inf:\n                        sl.add((query[1], inf))\n                        idx += 1\n                    elif sl[idx][1] < end - query[1]:\n                        sl.add((query[1], end - query[1]))\n                        idx += 1\n                    else:\n                        ready.add((query[1], end - query[1]))\n                    if idx + 1 < len(sl):\n                        finish = sl[idx + 1][0]\n                        find = ready.bisect_left((sl[idx][0] + sl[idx][1], 0))\n                        pre = sl[idx][1]\n                        while find < len(ready) and ready[find][0] < finish:\n                            if ready[find][1] > pre:\n                                pre = ready[find][1]\n                                sl.add(ready.pop(find))\n                            else:\n                                find += 1\n                # print(query[1], sl, ready)\n            else:\n                _, end, long = query\n                idx = sl.bisect_left((end, inf + 1)) - 1\n                cap = min(sl[idx][1], end - sl[idx][0])\n                if idx > 0:\n                    cap = max(cap, sl[idx - 1][1])\n                ans.append(cap >= long)\n        return ans\n",
    "submit_ts": "1716651086",
    "subm_id": "534773639"
}