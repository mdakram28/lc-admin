{
    "username": "sathwikpolineni",
    "submission": "from typing import List\nimport heapq\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Convert cuts to max-heaps by negating the values\n        horizontalCut = [-cost for cost in horizontalCut]\n        verticalCut = [-cost for cost in verticalCut]\n        \n        heapq.heapify(horizontalCut)\n        heapq.heapify(verticalCut)\n        \n        total_cost = 0\n        horizontal_pieces = 1\n        vertical_pieces = 1\n        \n        while horizontalCut and verticalCut:\n            if -horizontalCut[0] > -verticalCut[0]:\n                total_cost += -heapq.heappop(horizontalCut) * vertical_pieces\n                horizontal_pieces += 1\n            else:\n                total_cost += -heapq.heappop(verticalCut) * horizontal_pieces\n                vertical_pieces += 1\n        \n        while horizontalCut:\n            total_cost += -heapq.heappop(horizontalCut) * vertical_pieces\n        \n        while verticalCut:\n            total_cost += -heapq.heappop(verticalCut) * horizontal_pieces\n        \n        return total_cost",
    "submit_ts": "1720925694",
    "subm_id": "1320263168"
}