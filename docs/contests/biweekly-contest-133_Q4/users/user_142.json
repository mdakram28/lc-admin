{
    "username": "bhargavchiru1522",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n            MOD = 10**9 + 7\n    \n            # Sort requirements based on the end index\n            requirements.sort()\n\n            # Initialize DP table\n            max_inversions = 400  # Maximum inversions as given in the constraints\n            dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n            dp[0][0] = 1  # Base case: one way to have zero elements and zero inversions\n\n            # Process DP transitions for each prefix length\n            for i in range(1, n + 1):\n                for k in range(max_inversions + 1):\n                    if dp[i - 1][k] > 0:\n                        for j in range(i):\n                            new_k = k + (i - 1 - j)\n                            if new_k <= max_inversions:\n                                dp[i][new_k] = (dp[i][new_k] + dp[i - 1][k]) % MOD\n\n                # Apply the requirements after processing prefix of length i\n                for end, cnt in requirements:\n                    if end == i - 1:\n                        for k in range(max_inversions + 1):\n                            if k != cnt:\n                                dp[i][k] = 0\n\n            # The result is the sum of valid permutations for the full length array (n elements)\n            return sum(dp[n]) % MOD",
    "submit_ts": 1719068156.0
}