{
    "username": "shuhu",
    "submission": "class Solution {\n    private static class TrieNode {\n        private TrieNode[] children;\n        private boolean isWord;\n        private int cost;\n        private final char c;\n        private TrieNode (char c) {\n            this.c = c;\n            children = new TrieNode[26];\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        TrieNode root = buildTrie(words, costs);\n        int[] minCost = new int[target.length() + 1];\n        Arrays.fill(minCost, -1);\n        minCost[0] = 0;\n        for (int i = 0; i < target.length(); i++) {\n            TrieNode current = root;\n            for (int j = i; j >= 0 && current != null; j--) {\n                current = current.children[target.charAt(j) - 'a'];\n                if (current != null && current.isWord && minCost[j] >= 0) {\n                    if (minCost[i + 1] < 0 || minCost[i + 1] > minCost[j] + current.cost) {\n                        minCost[i + 1] = minCost[j] + current.cost;\n                    }\n                }\n            }\n        }\n        // System.out.println(Arrays.toString(minCost));\n        return minCost[target.length()];\n    }\n\n    private TrieNode buildTrie(String[] words, int [] costs) {\n        TrieNode root = new TrieNode('\\0');\n        for (int i = 0; i < words.length; i++) {\n            TrieNode current = root;\n            for (int j = words[i].length() - 1; j >= 0; j--) {\n                char c = words[i].charAt(j);\n                if (current.children[c - 'a'] == null) {\n                    current.children[c - 'a'] = new TrieNode(c);\n                }\n                current = current.children[c - 'a'];\n            }\n            current.isWord = true;\n            current.cost = current.cost == 0 ? costs[i] : Math.min(current.cost, costs[i]);\n        }\n        return root;\n    }\n}",
    "submit_ts": "1720320912",
    "subm_id": "1312308121"
}