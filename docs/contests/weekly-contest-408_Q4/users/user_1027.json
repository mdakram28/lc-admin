{
    "username": "rnema19",
    "submission": "class Solution {\npublic:\n    // bool solve(int X, int Y, vector<vector<int>>& c) {\n\n        \n    // }\n\n    int bfs(vector<vector<int>>& adj, int s, int n1, int n2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, 0);\n\n        q.push(s);\n\n        vis[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n\n            for (auto nbr : adj[u]) {\n                if (!vis[nbr]) {\n                    q.push(nbr);\n                    vis[nbr] = 1;\n                }\n            }\n        }\n\n        return (vis[n1] || vis[n2] ? 1 : 0);\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        // return solve(X, Y, circles);\n        int n = circles.size();\n        vector<vector<int>> adj(n + 4);\n\n        for (int i = 0; i < n; i++) {\n\n            if (circles[i][0] <= circles[i][2]) {\n\n                adj[n].push_back(i);\n\n                adj[i].push_back(n);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n\n                adj[n + 2].push_back(i);\n\n                adj[i].push_back(n + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n\n                adj[n + 1].push_back(i);\n\n                adj[i].push_back(n + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n\n                adj[n + 3].push_back(i);\n\n                adj[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n\n                double dist =\n                    sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n\n                int rad = circles[i][2] + circles[j][2];\n\n                if (rad >= dist) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n\n        isBlocked = max(isBlocked, bfs(adj, n, n + 1, n + 2, n + 4));\n\n        isBlocked = max(isBlocked, bfs(adj, n + 3, n + 2, n + 1, n + 4));\n\n        return isBlocked == 0;\n    }\n};",
    "submit_ts": "1722139094",
    "subm_id": "1335807699"
}