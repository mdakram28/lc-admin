{
    "username": "saikat93ify",
    "submission": "class Solution {\npublic:\n    int is_bit_set(int n, int bit)\n    {\n        return ( (n&(1 << bit)) != 0 );\n    }\n    \n    int minimumDifference(vector<int>& nums, int k) \n    {\n        const int NO_OF_BITS = 30;\n        vector <int> last_off(NO_OF_BITS, -1);\n        int difference = abs(k - nums[0]);\n        for(int i = 0; i < nums.size(); i++)\n        {\n            vector <pair <int, int> > segment_endings;\n            for(int bit = NO_OF_BITS - 1; bit >= 0; bit--)\n            {\n                if(!is_bit_set(nums[i], bit))\n                {\n                    last_off[bit] = i;\n                }\n                \n                segment_endings.push_back(make_pair(last_off[bit], bit));\n            }\n            \n            sort(segment_endings.begin(), segment_endings.end());\n            reverse(segment_endings.begin(), segment_endings.end());\n            \n            int current_AND = (1 << NO_OF_BITS) - 1;\n            for(int j = 0; j < segment_endings.size(); j++)\n            {\n                int current_segment_beginning = segment_endings[j].first;\n                int current_bit = segment_endings[j].second; \n                current_AND ^= (1 << current_bit);\n                //cout << \"At \" << nums[i] << \" Switching off \" << current_bit << \" Value = \" << current_AND << \"\\n\";\n                \n                if(current_segment_beginning == -1)\n                {\n                    break;\n                }\n                \n                if(j + 1 == segment_endings.size() || segment_endings[j].first != segment_endings[j + 1].first)\n                {\n                    difference = min(difference, abs(k - current_AND));\n                    //cout << \"At \" << nums[i] << \" current AND = \" << current_AND << \"\\n\";\n                }\n            }\n        }\n        \n        return difference;\n    }\n};",
    "submit_ts": 1717297795.0
}