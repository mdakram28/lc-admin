{
    "username": "prateekchourasia9876",
    "submission": "/*class Solution {\npublic:\n    long long maximumPoints(vector<int>& enemyPowers, int initialHealth) {\n        int numEnemies = enemyPowers.size();\n        long long totalScore = 0;\n        sort(enemyPowers.begin(), enemyPowers.end());\n        int left = 0, right = numEnemies - 1;\n        while (left <= right) {\n            if (enemyPowers[left] > initialHealth) {\n                if (totalScore == 0) {\n                    return 0;\n                }\n                while (initialHealth < enemyPowers[left]) {\n                    initialHealth += enemyPowers[right];\n                    right--;\n                }\n            } else {\n                int pointsGained = initialHealth\n        return totalScore;\n    }\n};\nclass Solution {\npublic:\n    long long maximumPoints(vector<int>& enemyPowers, int initialHealth) {\n        int numEnemies = enemyPowers.size();\n        long long totalScore = 0;\n        sort(enemyPowers.begin(), enemyPowers.end());\n        int left = 0, right = numEnemies - 1;\n        while (left <= right) {\n            if (enemyPowers[left] > initialHealth) {\n                if (totalScore == 0) {\n                    return 0;\n                }\n                while (initialHealth < enemyPowers[left]) {\n                    initialHealth += enemyPowers[right];\n                    right--;\n                }\n            } else {\n                int pointsGained = initialHealth / enemyPowers[left];\n                initialHealth %= enemyPowers[left];\n                totalScore += p\n        return totalScore;\n    }\n};\n\n\nclass Solution {\npublic:\n    int countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        int count = 0;\n        int current_and = 0;\n        int left = 0;\n        \n        for (int right = 0; right < n; ++right) {\n            current_and &= nums[right];\n            \n            // Adjust left pointer to maintain the condition\n            while (current_and > k) {\n                current_and &= ~nums[left++];\n            }\n            \n            // If current_and equals k, count subarrays\n            if (current_and == k) {\n                int subarrays = right - left + 1;\n                count += subarrays;\n            }\n        }\n        \n        return count;\n    }\n};\n\nint main() {\n    Solution solution;\n    \n    // Example 1\n    vector<int> nums1 = {1, 1, 1};\n    int k1 = 1;\n    cout << \"Output for Example 1: \" << solution.countSubarrays(nums1, k1) << endl;  // Output: 6\n    \n    // Example 2\n    vector<int> nums2 = {1, 1, 2};\n    int k2 = 1;\n    cout << \"Output for Example 2: \" << solution.countSubarrays(nums2, k2) << endl;  // Output: 3\n    \n    // Example 3\n    vector<int> nums3 = {1, 2, 3};\n    int k3 = 2;\n    cout << \"Output for Example 3: \" << solution.countSubarrays(nums3, k3) << endl;  // Output: 2\n    \n    return 0;\n}\n\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        int count = 0;\n        int current_and = 0;\n        int left = 0;\n        \n        for (int right = 0; right < n; ++right) {\n            current_and &= nums[right];\n            \n            // Adjust left pointer to maintain the condition\n            while (current_and > k) {\n                current_and &= ~nums[left++];\n            }\n            \n            // If current_and equals k, count subarrays\n            if (current_and == k) {\n                int subarrays = right - left + 1;\n                count += subarrays;\n            }\n        }\n        \n        return count;\n    }\n};\n#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Solution {\npublic:\n    int countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        int count = 0;\n        vector<int> dp(n, 0);\n        \n        for (int i = 0; i < n; ++i) {\n            dp[i] = nums[i];\n            if (dp[i] == k) ++count;\n        }\n        \n        for (int len = 2; len <= n; ++len) {\n            for (int i = 0; i <= n - len; ++i) {\n                dp[i] &= nums[i + len - 1];\n                if (dp[i] == k) ++count;\n            }\n        }\n        \n        return count;\n    }\n};\n\n*/\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& array, int target) {\n        int sZZe = array.size();\n        long long TtL = 0;\n        unordered_map<long long, long long> PrS;\n        for (int index = 0; index < sZZe; ++index) {\n            unordered_map<long long, long long> CrS; \n            if (array[index] == target) {\n                ++TtL;\n            }\n            CrS[array[index]] = 1;\n            for (auto& [value, frequency] : PrS) {\n                long long newAndResult = value & array[index];\n                if (newAndResult == target) {\n                    TtL += frequency;\n                }\n                CrS[newAndResult] += frequency;\n            }\n            \n            PrS = CrS;\n        }\n        return TtL;\n    }\n};",
    "submit_ts": "1720280345",
    "subm_id": "1311785907"
}