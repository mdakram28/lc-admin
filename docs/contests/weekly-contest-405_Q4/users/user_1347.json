{
    "username": "new_born2023",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <limits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        processTarget(target, dp, trie);\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\nprivate:\n    void processTarget(const string& target, vector<int>& dp, Trie& trie) {\n        int n = target.size();\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            updateDpForTarget(i, target, dp, trie);\n        }\n    }\n\n    void updateDpForTarget(int start, const string& target, vector<int>& dp, Trie& trie) {\n        int n = target.size();\n        TrieNode* node = trie.root;\n        for (int j = start; j < n; ++j) {\n            char c = target[j];\n            if (!node->children.count(c)) {\n                break;\n            }\n            node = node->children[c];\n            if (node->cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[start] + node->cost);\n            }\n        }\n    }\n};\n",
    "submit_ts": "1720323391",
    "subm_id": "1312374394"
}