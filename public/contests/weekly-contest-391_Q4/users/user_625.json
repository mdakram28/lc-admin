{
    "username": "Tyrande",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<vector<pair<int,int>>> c(4, vector<pair<int, int>>());\n        for (int i = 0; i < n; ++i) {\n            vector<int> p = points[i];\n            c[0].push_back({p[0] + p[1], i});\n            c[1].push_back({p[0] - p[1], i});\n            c[2].push_back({-p[0] + p[1], i});\n            c[3].push_back({-p[0] - p[1], i});\n        }\n        set<int> remove;\n        for (int i = 0; i < 4; ++i) {\n            sort(c[i].begin(), c[i].end());\n            remove.insert(c[i][0].second);\n            remove.insert(c[i][n-1].second);\n        }\n        int res = INT_MAX;\n        for (auto r : remove) {\n            //cout << r << endl;\n            res = min(res, helper(c, r));\n        }\n        return res;\n    }\n    int helper(vector<vector<pair<int,int>>>& c, int remove) {\n        int len = 0;\n        for (int i = 0; i < 4; ++i) {\n            int l, lp, r, rp;\n            for (int j = 0; j < c[i].size(); ++j) {\n                if (c[i][j].second == remove) continue;\n                else {\n                    l = c[i][j].first;\n                    lp = c[i][j].second;\n                    break;\n                }\n            }\n            for (int j = c[i].size() - 1; j >= 0; --j) {\n                if (c[i][j].second == remove) continue;\n                else {\n                    r = c[i][j].first;\n                    rp = c[i][j].second;\n                    break;\n                }\n            }\n            len = max(len, r - l);\n        }\n        return len;\n    }\n};"
}