{
    "username": "mrunankmistry52",
    "submission": "// https://github.com/fork52/CP-ALGOS-DS/blob/main/Advanced-Data-Structures/Sparse-Table/sparse_table.cpp\ntemplate <typename T>\nclass SparseTable\n{\n    T **sparseTable;\n    int *lg, MAXN, LOGN;\n    std::function<int(const T &a, const T &b)> f;\n\npublic:\n    /**\n     * Constructs a Sparse Table for querying the given array\n     * @param arr vector to be queried.\n     * @param func Is a idempotent function. Ex: min, max, gcd\n     * @note TC: O(nlogn) SC: O(nlogn)\n     */\n    SparseTable(std::vector<T> &arr, std::function<int(const int &a, const int &b)> func)\n        : f(func)\n    {\n\n        this->MAXN = arr.size();\n\n        // Precompute logs\n        lg = new int[MAXN + 1];\n        lg[1] = 0;\n        for (int i = 2; i <= MAXN; i++)\n        {\n            lg[i] = lg[i >> 1] + 1;\n        }\n\n        this->LOGN = lg[MAXN];\n\n        sparseTable = new T *[MAXN];\n        for (int i = 0; i < MAXN; i++)\n        {\n            sparseTable[i] = new T[LOGN + 1];\n            sparseTable[i][0] = arr[i];\n        }\n\n        for (int j = 1; j <= LOGN; j++)\n        {\n            for (int i = 0; i + (1 << j) - 1 < MAXN; i++)\n            {\n                sparseTable[i][j] = f(sparseTable[i][j - 1], sparseTable[i + (1 << (j - 1))][j - 1]);\n            }\n        }\n    }\n\n    /**\n     * Answers query in the range `[L ,R]` inclusive.\n     * @param L left boundary\n     * @param R right boundary\n     * @note Time Complexity : O(1)\n     */\n    T query(int L, int R)\n    {\n        int k = lg[R - L + 1];\n        return f(sparseTable[L][k], sparseTable[R - (1 << k) + 1][k]);\n    }\n\n    ~SparseTable()\n    {\n        delete[] lg;\n        for (int i = 0; i < MAXN; i++)\n        {\n            delete[] sparseTable[i];\n            sparseTable[i] = nullptr;\n        }\n        delete[] sparseTable;\n        sparseTable = (T **)nullptr;\n        lg = nullptr;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        nums.push_back(536870911);\n        \n        SparseTable sparseTable(nums, [](int a, int b){\n            return a & b;\n        });\n        \n        int ans = 2e9 + 100;\n        for(int i = 0; i < n; i++){\n             int l = i;\n             int r = i;\n            \n             while(r < n){\n                 int cur = sparseTable.query(l, r);\n                 \n                 int lo = r, hi = n - 1, mi, best = r;\n                 while(lo <= hi){\n                     mi = (lo + hi) >> 1;\n                     if(sparseTable.query(l, mi) == cur){\n                         best = mi;\n                         lo = mi + 1;\n                     }\n                     else{\n                         hi = mi - 1;\n                     }\n                 }\n                 \n                 ans = min(ans, abs(cur - k));\n                 r = best + 1;\n             }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717298893",
    "subm_id": "1274794837"
}