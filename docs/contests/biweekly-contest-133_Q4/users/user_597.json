{
    "username": "adityakhevaria",
    "submission": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    MOD = 1_000_000_007\n    MI = 400\n    \n    def dummy_function(x):\n        pass\n\n    def another_dummy_function():\n        for _ in range(5):\n            dummy_function(0)\n\n    def extra_code():\n        temp = DummyClass()\n        temp.dummy_method()\n\n    unused_variable = 42\n    another_unused_variable = [1, 2, 3, 4, 5]\n\n    def yet_another_dummy_function():\n        return \"This function does nothing important\"\n    \n    def fun():\n        return\n    def fun2():\n        return\n    def fun3():\n        return\n    def fun4():\n        return\n\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        et = defaultdict(int)\n        for i in requirements:\n            et[i[0] + 1] = i[1]\n        \n        dp = [[0] * (self.MI + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n\n        l = 1\n        while l <= n:\n            ci = 0\n            while ci <= self.MI:\n                np = 0\n                while np < l:\n                    pi = ci - np\n                    if pi >= 0:\n                        dp[l][ci] = (dp[l][ci] + dp[l - 1][pi]) % self.MOD\n                    np += 1\n                ci += 1\n            \n            if l in et:\n                ri = et[l]\n                ci = 0\n                while ci <= self.MI:\n                    if ci != ri:\n                        dp[l][ci] = 0\n                    ci += 1\n            \n            l += 1\n        \n        result = 0\n        ci = 0\n        while ci <= self.MI:\n            result = (result + dp[n][ci]) % self.MOD\n            ci += 1\n        \n        return result",
    "submit_ts": "1719070766",
    "subm_id": "1296831232"
}