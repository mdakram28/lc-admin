{
    "username": "MohoGup",
    "submission": "class Solution \n{\npublic:\n    int bfs(vector<vector<int>>& g, int start, int t1, int t2, int n) \n    {\n        queue<int> q;\n        vector<int> vis(n + 4, 0);\n        q.push(start);\n        vis[start] = 1;\n        \n        while (!q.empty()) \n        {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) \n            {\n                if (!vis[v]) \n                {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& c2) \n    {\n        int numCircles = c2.size();\n        vector<pair<pair<int, int>, int>> c(numCircles);\n        vector<vector<int>> g(numCircles + 4);\n        \n        for (int i = 0; i < numCircles; ++i) \n        {\n            c[i].first.first = c2[i][0];\n            c[i].first.second = c2[i][1];\n            c[i].second = c2[i][2];\n        }\n        \n        for (int i = 0; i < numCircles; ++i) \n        {\n            if (c[i].first.first <= c[i].second) \n            {\n                g[numCircles].push_back(i);\n                g[i].push_back(numCircles);\n            }\n            if (X - c[i].first.first <= c[i].second) \n            {\n                g[numCircles + 2].push_back(i);\n                g[i].push_back(numCircles + 2);\n            }\n            if (c[i].first.second <= c[i].second) \n            {\n                g[numCircles + 1].push_back(i);\n                g[i].push_back(numCircles + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) \n            {\n                g[numCircles + 3].push_back(i);\n                g[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) \n            {\n                double dist = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                   pow(c[i].first.second - c[j].first.second, 2));\n                int radiusSum = c[i].second + c[j].second;\n                if (radiusSum >= dist) \n                {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        bool blocked = false;\n        blocked |= bfs(g, numCircles, numCircles + 1, numCircles + 2, numCircles + 4);\n        blocked |= bfs(g, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n\n        return !blocked;\n    }\n};\n",
    "submit_ts": "1722137581",
    "subm_id": "1335767901"
}