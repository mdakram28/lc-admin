{
    "username": "Pras28",
    "submission": "from sortedcontainers import SortedList\nfrom bisect import bisect_left\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        sq = SortedList()\n        dist = n - 1\n        res = []\n        for i, (u, v) in enumerate(queries):\n\n            \n            if (u, v) in sq:\n                res.append(res[-1])\n                continue\n            \n            if len(sq) == 0:\n                dist -= v - u - 1\n                sq.add((u, v))\n                res.append(dist)\n                continue\n            \n            pos = bisect_left(sq, (u, v))\n            \n            if pos > 0:\n                if sq[pos - 1][1] >= v:\n                    res.append(dist)\n                    continue\n            else:\n                if len(sq) > 0 and sq[pos][1] > v and sq[pos][0] <= u:\n                    res.append(dist)\n                    continue\n            pos = max(pos - 2, 0)\n            \n            rem = []\n            while pos < len(sq):\n                if sq[pos][0] < u:\n                    pos += 1\n                    continue\n                if sq[pos][1] <= v:\n                    rem.append(sq[pos])\n                    pos += 1\n                else:\n                    break\n            \n            for i, j in rem:\n                dist += (j - i - 1)\n                sq.remove((i, j))\n            \n            sq.add((u, v))\n            dist -= (v - u - 1)\n            \n            res.append(dist)\n        \n        return res",
    "submit_ts": "1722740460",
    "subm_id": "1343720342"
}