{
    "username": "JustinZhengBC",
    "submission": "class Solution {\npublic:\n    int mod = 1e9 + 7;\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = 1;\n        while (n < nums.size()) {\n            n <<= 1;\n        }\n        array<long long, 4> tree[2*n];\n        memset(tree, 0, sizeof(tree));\n        for (int i = 0; i < nums.size(); ++i) {\n            tree[n+i][0] = max(nums[i], 0);\n        }\n        for (int i = nums.size(); i < n; ++i) {\n            tree[n+i][0] = LONG_LONG_MIN;\n        }\n        \n        for (int i = n - 1; i > 0; --i) {\n            merge(tree[i], tree[2*i], tree[2*i+1]);\n        }\n        long long res = 0;\n        // cout << \"TREE\" << endl;\n        // for (auto &x : tree) {\n        //     cout << x[0] << \" \" << x[1] << \" \" << x[2] << \" \" << x[3] << endl;\n        // }\n        for (auto &q : queries) {\n            int i = q[0];\n            i += n;\n            tree[i][0] = max(q[1], 0);\n            while (i > 1) {\n                i = i >> 1;\n                merge(tree[i], tree[2*i], tree[2*i+1]);\n            }\n            // cout << \"ANSWER\" << endl;\n            // cout << tree[1][0] << endl;\n            // cout << \"TREE\" << endl;\n            // for (auto &x : tree) {\n            //     cout << x[0] << \" \" << x[1] << \" \" << x[2] << \" \" << x[3] << endl;\n            // }\n            res += tree[1][0];\n            res %= mod;\n        }\n        return res;\n    }\n    // ...., 0..., ...0, 0..0 \n    void merge(array<long long, 4> &dest, array<long long, 4> &a, array<long long, 4> &b) {\n        if (b[0] == LONG_LONG_MIN) {\n            dest = a;\n            return;\n        }\n        dest[0] = max(a[2] + b[0], a[0] + b[1]);\n        dest[1] = max(a[3] + b[0], a[1] + b[1]);\n        dest[2] = max(a[0] + b[3], a[2] + b[2]);\n        dest[3] = max(a[3] + b[2], a[1] + b[3]);\n    }\n};",
    "submit_ts": "1716692992",
    "subm_id": "1268071626"
}