{
    "username": "nevergiveup",
    "submission": "class Solution {\n\n    private boolean checkDist(long x1 , long y1 , long x2 , long y2 , long dist) {\n        long x = Math.abs(x1 - x2) , y = Math.abs(y1 - y2);\n        return x * x + y * y <= dist * dist;\n    }\n\n    private void checkFourSides(long x , long y , long r , int idx , long X , long Y) {\n        // LEFT\n        if (x - r <= 0 && (y <= Y || checkDist(0 , Y , x , y , r) || checkDist(0 , 0 , x , y , r))) {\n            unionSet(LEFT , idx);\n//            System.out.println(idx + \" LEFT\");\n        }\n        // TOP\n        if (y - r <= Y && y + r >= Y && (x <= X || checkDist(X , Y , x , y , r) || checkDist(0 , Y,  x , y , r))) {\n            unionSet(TOP , idx);\n//            System.out.println(idx + \" TOP\");\n        }\n        // RIGHT\n        if (x - r <= X && x + r >= X && (y <= Y || (checkDist(X , Y , x , y , r) || checkDist(X , 0 , x , y , r)))) {\n            unionSet(RIGHT , idx);\n//            System.out.println(idx + \" RIGHT\");\n        }\n        // BOTTOM\n        if (y - r <= 0 && (x <= X || checkDist(0, 0, x, y, r) || checkDist(X, 0, x, y, r))) {\n            unionSet(BOTTOM , idx);\n//            System.out.println(idx + \" BOTTOM\");\n        }\n    }\n\n    private boolean isIntersect(int[] circle1 , int[] circle2) {\n        long xDist = circle1[0] - circle2[0];\n        long yDist = circle1[1] - circle2[1];\n        long rDist = circle1[2] + circle2[2];\n        return xDist * xDist + yDist * yDist <= rDist * rDist;\n    }\n\n    private int findSet(int x) {\n        if (x == set[x]) {\n            return x;\n        } else {\n            return set[x] = findSet(set[x]);\n        }\n    }\n\n    private void unionSet(int x , int y) {\n        int f1 = findSet(x) , f2 = findSet(y);\n        if (f1 != f2) {\n            set[f1] = f2;\n        }\n    }\n\n    private boolean sameSet(int x , int y) {\n        int f1 = findSet(x) , f2 = findSet(y);\n        return f1 == f2;\n    }\n\n    private int LEFT = 0 , TOP = 1 , RIGHT = 2 , BOTTOM = 3;\n    private int[] set;\n\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        set = new int[n + 4];\n        Arrays.setAll(set , index -> index);\n        LEFT = n;\n        TOP = n + 1;\n        RIGHT = n + 2;\n        BOTTOM = n + 3;\n        for (int i = 0;i < n;i ++) {\n            // check four sides\n            checkFourSides(circles[i][0] , circles[i][1] , circles[i][2] , i , X , Y);\n            // check others\n            for (int j = 0;j < n;j ++) {\n                if (i != j && isIntersect(circles[i] , circles[j])) {\n                    unionSet(i , j);\n//                    System.out.println(\"UNION \" + i + \", \" + j);\n                }\n            }\n        }\n        if (sameSet(LEFT , RIGHT) || sameSet(TOP , RIGHT) || sameSet(TOP , BOTTOM) || sameSet(LEFT , BOTTOM)) {\n            return false;\n        }\n        return true;\n    }\n}",
    "submit_ts": "1722138562",
    "subm_id": "1335793929"
}