{
    "username": "sumit1906",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int cost;\n    bool endOfWord;\n\n    TrieNode() : children(26, nullptr), cost(INT_MAX), endOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* currentNode = root;\n        for (char c : word) {\n            if (!currentNode->children[c - 'a']) {\n                currentNode->children[c - 'a'] = new TrieNode();\n            }\n            currentNode = currentNode->children[c - 'a'];\n        }\n        currentNode->cost = min(cost, currentNode->cost);\n        currentNode->endOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int targetLength = target.size();\n        vector<int> dp(targetLength + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        dp[0] = 0;\n\n        int index = 0;\n        while (index < targetLength) {\n            if (dp[index] == INT_MAX) {\n                ++index;\n                continue;\n            }\n\n            TrieNode* currentNode = trie.getRoot();\n            int j = index;\n            while (j < targetLength) {\n                char c = target[j];\n                if (!currentNode->children[c - 'a']) break;\n                currentNode = currentNode->children[c - 'a'];\n                if (currentNode->endOfWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[index] + currentNode->cost);\n                }\n                ++j;\n            }\n            ++index;\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n\n// int main() {\n//     Solution sol;\n//     string target = \"exampletarget\";\n//     vector<string> words = {\"exam\", \"ple\", \"target\"};\n//     vector<int> costs = {2, 3, 5};\n\n//     int result = sol.minimumCost(target, words, costs);\n//     cout << \"Minimum cost: \" << result << endl;\n\n//     return 0;\n// }\n",
    "submit_ts": "1720322292",
    "subm_id": "1312345948"
}