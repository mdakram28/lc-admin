{
    "username": "Ayush_goyal_nitkkr",
    "submission": "class SegmentTreeNode {\npublic:\n    int start, end, peakCount;\n    SegmentTreeNode *left, *right;\n    \n    SegmentTreeNode(int s, int e) : start(s), end(e), peakCount(0), left(nullptr), right(nullptr) {}\n};\n\nclass SegmentTree {\nprivate:\n    SegmentTreeNode* root;\n    vector<int>& nums;\n\n    SegmentTreeNode* buildTree(int start, int end) {\n        if (start > end) return nullptr;\n        SegmentTreeNode* node = new SegmentTreeNode(start, end);\n        if (start == end) {\n            node->peakCount = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            node->left = buildTree(start, mid);\n            node->right = buildTree(mid + 1, end);\n            node->peakCount = getPeakCount(node->left) + getPeakCount(node->right);\n        }\n        return node;\n    }\n\n    int queryRange(SegmentTreeNode* node, int l, int r) {\n        if (!node || r < node->start || l > node->end) return 0;\n        if (l <= node->start && r >= node->end) return node->peakCount;\n        return queryRange(node->left, l, r) + queryRange(node->right, l, r);\n    }\n\n    void updateTree(SegmentTreeNode* node, int idx) {\n        if (!node || idx < node->start || idx > node->end) return;\n        if (node->start == node->end) {\n            node->peakCount = isPeak(idx) ? 1 : 0;\n        } else {\n            updateTree(node->left, idx);\n            updateTree(node->right, idx);\n            node->peakCount = getPeakCount(node->left) + getPeakCount(node->right);\n        }\n    }\n\n    bool isPeak(int idx) {\n        if (idx <= 0 || idx >= nums.size() - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n\n    int getPeakCount(SegmentTreeNode* node) {\n        return node ? node->peakCount : 0;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        root = buildTree(0, nums.size() - 1);\n    }\n\n    int rangeQuery(int l, int r) {\n        return queryRange(root, l, r);\n    }\n\n    void pointUpdate(int idx, int val) {\n        nums[idx] = val;\n        if (idx > 0) updateTree(root, idx - 1);\n        updateTree(root, idx);\n        if (idx < nums.size() - 1) updateTree(root, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n\n        for (const auto& q : queries) {\n            processQuery(q, st, result);\n        }\n\n        return result;\n    }\n\nprivate:\n    void processQuery(const vector<int>& query, SegmentTree& st, vector<int>& result) {\n        if (query[0] == 1) {\n            handleRangeQuery(query, st, result);\n        } else if (query[0] == 2) {\n            handlePointUpdate(query, st);\n        }\n    }\n\n    void handleRangeQuery(const vector<int>& query, SegmentTree& st, vector<int>& result) {\n        int l = query[1], r = query[2];\n        result.push_back(st.rangeQuery(l + 1, r - 1));\n    }\n\n    void handlePointUpdate(const vector<int>& query, SegmentTree& st) {\n        int idx = query[1], val = query[2];\n        st.pointUpdate(idx, val);\n    }\n};\n",
    "submit_ts": "1718506319",
    "subm_id": "1289614903"
}