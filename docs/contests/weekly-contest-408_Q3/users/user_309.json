{
    "username": "a0r04j7",
    "submission": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        n = len(s)\n\n        # Step 1: Calculate prefix sums for '0's and '1's\n        prefix_zeros = [0] * (n + 1)\n        prefix_ones = [0] * (n + 1)\n        next_zero = [n]*n\n\n        for i in range(n):\n            prefix_zeros[i + 1] = prefix_zeros[i] + (s[i] == '0')\n            prefix_ones[i + 1] = prefix_ones[i] + (s[i] == '1')\n            if s[i] == '0':\n                j = i-1\n                while j >=0 and next_zero[j]==n:\n                    next_zero[j] = i\n                    j -= 1\n\n        # Step 2: Use a sliding window and hash map to find dominant substrings\n        dominant_count = 0\n        \n        start = 0\n        while start < n:\n            end = start\n            while end < n:\n                num_zeros = prefix_zeros[end + 1] - prefix_zeros[start]\n                num_ones = prefix_ones[end + 1] - prefix_ones[start]\n\n                # Check the dominance condition\n                if num_ones >= num_zeros * num_zeros:\n                    dominant_count += next_zero[end]-end\n                    end = next_zero[end]\n                else:\n                    needed_ones = num_zeros * num_zeros - num_ones\n                    end += needed_ones\n            start += 1\n\n        return dominant_count\n",
    "submit_ts": "1722138118",
    "subm_id": "1335782581"
}