{
    "username": "monkeymonkeybrain",
    "submission": "from collections import defaultdict\nfrom heapq import heappop, heappush\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.costs = []\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.costs.append(cost)\n    \n    def search(self, target, start):\n        node = self.root\n        results = []\n        for i in range(start, len(target)):\n            char = target[i]\n            if char in node.children:\n                node = node.children[char]\n                if node.costs:\n                    results.append((i + 1, node.costs))\n            else:\n                break\n        return results\nclass Solution:\n    def minimumCost(self, target, words, costs):\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # Cost to form an empty string is 0\n        \n        # Construct the Trie and insert all words with their costs\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # Min-heap to process positions with the current minimum cost first\n        heap = [(0, 0)]  # (current cost, position)\n        \n        while heap:\n            current_cost, i = heappop(heap)\n            \n            # If we've already found a cheaper way to reach this position, skip it\n            if current_cost > dp[i]:\n                continue\n            \n            # Use the Trie to find all words starting at target[i:]\n            matches = trie.search(target, i)\n            for end, cost_list in matches:\n                for cost in cost_list:\n                    new_cost = current_cost + cost\n                    if new_cost < dp[end]:\n                        dp[end] = new_cost\n                        heappush(heap, (new_cost, end))\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720322316",
    "subm_id": "1312346592"
}