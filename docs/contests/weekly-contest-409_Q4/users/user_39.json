{
    "username": "Turkhuu",
    "submission": "template <class B> struct BIT {\n    int n;vector<B> s; BIT(int n):n(n),s(n+1){}\n    void add(int i,const B&v){for(i++;i<=n;i+=i&-i)s[i]+=v;}\n    B sum(int i){B ans{};for(;i;i-=i&-i)ans+=s[i];return ans;}\n    B sum(int l,int r){return sum(r)-sum(l);}\n};\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& a, vector<vector<int>>& qry) {\n        int n = a.size();\n        vector<int> x(n);\n        for (int i = 0; i < n; i++) {\n            x[i] = a[i] ^ a[(i + 1) % n];\n        }\n        set<array<int, 2>> s;\n        vector<int> L(n, -1), R(n, -1);\n        BIT<int> cnt(n), sum(n), bit(n);\n        auto len = [&](int i, int j) {\n            if (i <= j) return j - i + 1;\n            return j - i + 1 + n;\n        };\n        for (int i = 0; i < n; i++) {\n            bit.add(i, x[i]);\n            if (x[i] && !x[i == 0 ? n - 1 : i - 1]) {\n                int j = i;\n                while (x[(j + 1) % n]) j = (j + 1) % n;\n                R[i] = j;\n                L[j] = i;\n                cnt.add(len(i, j), 1);\n                sum.add(len(i, j), len(i, j));\n            }\n        }\n        auto flip = [&](int i) {\n            int urt;\n            int l = i == 0 ? n - 1 : i - 1;\n            int r = i == n - 1 ? 0 : i + 1;\n            if (x[i] == 0) {\n                if (x[l] && x[r] && L[l] == r) {\n                    assert(R[r] == l);\n                    cnt.add(n - 1, -1);\n                    sum.add(n - 1, 1 - n);\n                } else {\n                    int LL = i, RR = i;\n                    if (x[l]) {\n                        LL = L[l];\n                        urt = len(LL, l);\n                        cnt.add(urt, -1);\n                        sum.add(urt, -urt);\n                    }\n                    if (x[r]) {\n                        RR = R[r];\n                        urt = len(r, RR);\n                        cnt.add(urt, -1);\n                        sum.add(urt, -urt);\n                    }\n                    R[LL] = RR;\n                    L[RR] = LL;\n                    urt = len(LL, RR);\n                    cnt.add(urt, 1);\n                    sum.add(urt, urt);\n                }\n            } else {\n                if (cnt.sum(0, n) == 0) {\n                    assert(x[l] && x[r]);\n                    cnt.add(n - 1, 1);\n                    sum.add(n - 1, n - 1);\n                    L[l] = r;\n                    R[r] = l;\n                } else {\n                    int LL, RR;\n                    if (bit.sum(0, i) == i) {\n                        assert(bit.sum(i, n) < n - i);\n                        int lo = i + 1, hi = n - 1;\n                        while (lo < hi) {\n                            int mi = (lo + hi) / 2;\n                            bit.sum(i, mi + 1) == mi + 1 - i ? lo = mi + 1 : hi = mi;\n                        }\n                        RR = lo - 1;\n                        LL = L[RR];\n                    } else {\n                        int lo = 0, hi = i - 1;\n                        while (lo < hi) {\n                            int mi = (lo + hi + 1) / 2;\n                            bit.sum(mi, i) == i - mi ? hi = mi - 1 : lo = mi;\n                        }\n                        LL = lo + 1;\n                        RR = R[LL];\n                    }\n                    \n                    urt = len(LL, RR);\n                    cnt.add(urt, -1);\n                    sum.add(urt, -urt);\n                    if (x[l]) {\n                        R[LL] = l;\n                        L[l] = LL;\n                        urt = len(LL, l);\n                        cnt.add(urt, 1);\n                        sum.add(urt, urt);\n                    }\n                    if (x[r]) {\n                        L[RR] = r;\n                        R[r] = RR;\n                        urt = len(r, RR);\n                        cnt.add(urt, 1);\n                        sum.add(urt, urt);\n                    }\n                }\n            }\n            bit.add(i, -x[i]);\n            x[i] ^= 1;\n            bit.add(i, x[i]);\n        };\n        vector<int> ans;\n        for (int i = 0; i < qry.size(); i++) {\n            if (qry[i][0] == 2) {\n                int j = qry[i][1], c = qry[i][2];\n                if (a[j] == c) continue;\n                flip(j == 0 ? n - 1 : j - 1);\n                flip(j);\n                a[j] ^= 1;\n            } else {\n                int k = qry[i][1]; k--;\n                if (cnt.sum(0, n) == 0) ans.push_back(x[0] == 0 ? 0 : n);\n                else {\n                    int cc = cnt.sum(k, n);\n                    int ss = sum.sum(k, n);\n                    ans.push_back(ss - k * cc + cc);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743270",
    "subm_id": "1343788219"
}