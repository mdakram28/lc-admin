{
    "username": "arujbansal",
    "submission": "template<typename T>\nstruct segment_tree {\n    int n;\n    vector<T> tree;\n    T identity_element;\n    function<T(const T&, const T&)> merge;\n\n    segment_tree(int _n, T _identity_element, const function<T(const T&, const T&)> &_merge) { \n        init(_n, _identity_element, _merge); \n    }\n\n    void init(int _n, T _identity_element, const function<T(const T&, const T&)> &_merge) {\n        n = _n;\n        identity_element = _identity_element;\n        merge = _merge;\n        tree.assign(2 * n, identity_element);\n    }\n\n    void build(const vector<T> &a) {\n        for (int i = 0; i < n; i++)\n            tree[i + n] = a[i];\n\n        for (int i = n - 1; i > 0; i--)\n            tree[i] = merge(tree[2 * i], tree[2 * i + 1]);\n    }\n\n    void identity_modify(int pos, T val) {\n        pos += n;\n\n        for (tree[pos] = merge(tree[pos], val); pos >>= 1; )\n            tree[pos] = merge(tree[2 * pos], tree[2 * pos + 1]);\n    }\n\n    void increment(int pos, T val) {\n        pos += n;\n\n        for (tree[pos] += val; pos >>= 1; )\n            tree[pos] = merge(tree[2 * pos], tree[2 * pos + 1]);\n    }\n\n    void set(int pos, T val) {\n        pos += n;\n\n        for (tree[pos] = val; pos >>= 1; )\n            tree[pos] = merge(tree[2 * pos], tree[2 * pos + 1]);\n    }\n\n    T query(int l, int r) {\n        T res = identity_element;\n\n        for (l += n, r += n; l <= r; l >>= 1, r >>= 1) {\n            if (l & 1) res = merge(res, tree[l++]);\n            if (!(r & 1)) res = merge(res, tree[r--]);\n        }\n\n        return res;\n    }\n\n    T query(int pos) { return query(pos, pos); }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = (int) nums.size();\n        \n        segment_tree<int> st(n + 5, 0, [&](const int x, const int y) { return x + y; });\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                st.set(i, 1);\n            }\n        }\n        \n        vector<int> ans;\n        \n        for (const auto &query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                \n                ans.push_back(st.query(l, r) - st.query(l, l) - (l == r ? 0 : st.query(r, r)));\n            } else {\n                int idx = query[1];\n                int val = query[2];\n                \n                nums[idx] = val;\n                \n                if (idx <= n - 3)\n                    st.set(idx + 1, nums[idx + 1] > nums[idx] && nums[idx + 1] > nums[idx + 2]);\n                \n                if (idx >= 2)\n                    st.set(idx - 1, nums[idx - 1] > nums[idx] && nums[idx - 1] > nums[idx - 2]);\n                \n                if (idx != 0 && idx != n - 1) {\n                    st.set(idx, nums[idx] > nums[idx + 1] && nums[idx] > nums[idx - 1]);\n                }                \n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1718507317",
    "subm_id": "1289647789"
}