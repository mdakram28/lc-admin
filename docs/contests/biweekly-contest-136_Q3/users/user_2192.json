{
    "username": "confident-pascal5x2",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int ans1 = 0;\n        int ans = 0;\n        // int num = 0;\n\n        if (m % 2 == 0 && n % 2 == 0) {\n            for (int i = 0; i < m / 2; i++) {\n                int l, r;\n                l = n / 2 - 1;\n                r = n / 2;\n                int bot = m - i - 1;\n                while (l >= 0 && r < n) {\n                    int num0 = (grid[i][l] == 0) + (grid[i][r] == 0) +\n                               (grid[bot][l] == 0) + (grid[bot][r] == 0);\n                    ans = ans + min(num0, 4 - num0);\n                    l--;\n                    r++;\n                }\n            }\n            return ans;\n        }\n\n        else if (m % 2 == 0 && n % 2 != 0) {\n            for (int i = 0; i < m / 2; i++) {\n                int l, r;\n                l = n / 2 - 1;\n                r = n / 2 + 1;\n                int bot = m - i - 1;\n                while (l >= 0 && r < n) {\n                    int num0 = (grid[i][l] == 0) + (grid[i][r] == 0) +\n                               (grid[bot][l] == 0) + (grid[bot][r] == 0);\n                    ans =ans+ min(num0, 4 - num0);\n                    l--;\n                    r++;\n                }\n            }\n            int j = n / 2;\n            int l, r;\n            l = m / 2 - 1;\n            r = m / 2;\n            int num = 0;\n            while (l >= 0 && r < m) {\n                if (grid[l][j] != grid[r][j]) {\n                    ans1++;\n                }\n                if (grid[l][j] == grid[r][j] && grid[r][j] == 1) {\n                    num++;\n                }\n                l--;\n                r++;\n            }\n            if (num % 2 != 0) {\n                // \u539f\u67091\u4e3a2\u500d\u6570\n                if (ans1 == 0) {\n                    ans1 = 2;\n                }\n            }\n            return ans + ans1;\n\n        }\n\n        else if (m % 2 != 0 && n % 2 == 0) {\n            for (int i = 0; i < m / 2; i++) {\n                int l, r;\n                l = n / 2 - 1;\n                r = n / 2;\n                int bot = m - i - 1;\n                while (l >= 0 && r < n) {\n                    int num0 = (grid[i][l] == 0) + (grid[i][r] == 0) +\n                               (grid[bot][l] == 0) + (grid[bot][r] == 0);\n                    ans = ans+min(num0, 4 - num0);\n                    l--;\n                    r++;\n                }\n            }\n            int i = m / 2;\n            int l, r;\n            l = n / 2 - 1;\n            r = n / 2;\n            int num = 0;\n            while (l >= 0 && r < n) {\n                if (grid[i][l] != grid[i][r]) {\n                    ans1++;\n                }\n                if (grid[i][l] == grid[i][r] && grid[i][l] == 1) {\n                    num++;\n                }\n                l--;\n                r++;\n            }\n            if (num % 2 != 0) {\n                // \u539f\u67091\u4e3a2\u500d\u6570\n                if (ans1 == 0) {\n                    ans1 = 2;\n                }\n            }\n            return ans + ans1;\n        }\n\n        else {\n            for (int i = 0; i < m / 2; i++) {\n                int l, r;\n                l = n / 2 - 1;\n                r = n / 2 + 1;\n                int bot = m - i - 1;\n                while (l >= 0 && r < n) {\n                    int num0 = (grid[i][l] == 0) + (grid[i][r] == 0) +\n                               (grid[bot][l] == 0) + (grid[bot][r] == 0);\n                    ans = ans+min(num0, 4 - num0);\n                    l--;\n                    r++;\n                }\n            }\n\n            int j = n / 2;\n            int l, r;\n            l = m / 2 - 1;\n            r = m / 2 + 1;\n            int num = 0;\n            while (l >= 0 && r < m) {\n                if (grid[l][j] != grid[r][j]) {\n                    ans1++;\n                }\n                if (grid[l][j] == grid[r][j] && grid[r][j] == 1) {\n                    num++;\n                }\n                l--;\n                r++;\n            }\n            int i = m / 2;\n\n            l = n / 2 - 1;\n            r = n / 2 + 1;\n\n            while (l >= 0 && r < n) {\n                if (grid[i][l] != grid[i][r]) {\n                    ans1++;\n                }\n                if (grid[i][l] == grid[i][r] && grid[i][l] == 1) {\n                    num++;\n                }\n                l--;\n                r++;\n            }\n            if (num % 2 != 0) {\n                // \u539f\u67091\u4e3a2\u500d\u6570\n                if (ans1 == 0) {\n                    ans1 = 2;\n                }\n            }\n            if (grid[i][j] == 1) {\n                ans++;\n            }\n            return ans + ans1;\n        }\n\n        return -1;\n    }\n};",
    "submit_ts": "1722699707",
    "subm_id": "552276818"
}