{
    "username": "tliu21",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        long long result = numeric_limits<long long>::lowest();\n        vector<vector<long long>> one = vector(n, vector(m, numeric_limits<long long>::lowest()));\n        for (int i = 0; i < n; ++i){\n            for (int j = 0; j < m; ++j){\n                one[i][j] = board[i][j];\n                if (i > 0){\n                    one[i][j] = max(one[i][j], one[i - 1][j]);\n                }\n            }\n        }\n        vector<vector<vector<long long>>> two = vector(n, vector(m, vector(m, numeric_limits<long long>::lowest())));\n        for (int i = 1; i < n; ++i){\n            for (int j = 0; j < m; ++j){\n                for (int k = 0; k < m; ++k){\n                    if (j == k){\n                        continue;\n                    }\n                    two[i][j][k] = two[i - 1][j][k];\n                    two[i][j][k] = max(two[i][j][k], one[i- 1][j] + board[i][k]);\n                }\n            }\n        }\n        vector<vector<vector<long long>>> col_max = vector(n, vector(m, vector(m, numeric_limits<long long>::lowest())));\n        for (int i = 0; i < n; ++i){\n            vector<pair<int, int>> sort_nums(m);\n            for (int j = 0; j < m; ++j){\n                sort_nums[j] = make_pair(board[i][j], j);\n            }\n            sort(sort_nums.begin(), sort_nums.end());\n            for (int j = 0; j < m; ++j){\n                for (int k = 0; k < m; ++k){\n                    if (j == k){\n                        continue;\n                    }\n                    for (int x = m - 1; x >= 0; --x){\n                        if (sort_nums[x].second != j && sort_nums[x].second != k){\n                            col_max[i][j][k] = sort_nums[x].first;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        vector<vector<vector<long long>>> three = vector(n, vector(m, vector(m, numeric_limits<long long>::lowest())));\n        for (int i = 2; i < n; ++i){\n            for (int j = 0; j < m; ++j){\n                for (int k = 0; k < m; ++k){\n                    if (j == k){\n                        continue;\n                    }\n                    three[i][j][k] = two[i - 1][j][k] + col_max[i][j][k];\n                    three[i][j][k] = max(three[i][j][k], three[i - 1][j][k]);\n                    // cout << i << \", \" << j << \", \" << k << \", \" << three[i][j][k] << \"\\n\";\n                    result = max(result, three[i][j][k]);\n                }\n            }\n        }\n        return result;\n    }\n};\n\n//   ",
    "submit_ts": "1723909676",
    "subm_id": "1359201565"
}