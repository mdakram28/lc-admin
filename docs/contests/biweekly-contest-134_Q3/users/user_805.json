{
    "username": "whynot4",
    "submission": "class Solution {\n    public int numberOfAlternatingGroups(int[] c, int k) {\n        int n = c.length;\n        var list = new boolean[n+k-1];\n        for (int i=0; i+1<n+k-1; i++) {\n            if (c[i%n] == c[(i+1)%n]) {\n                list[i] = true;\n                list[i+1] = true;\n            }\n        }\n\n        var prefix = new int[list.length]; // prefix sums\n        prefix[0] = (list[0] ? 1 : 0);\n        for (int i=1; i<prefix.length; i++) {\n            prefix[i] = prefix[i-1] + (list[i] ? 1 : 0);\n        }\n        int ct = 0;\n        for (int i=0; i+k-1<list.length; i++) {\n            int sum = prefix[i+k-1];\n            if (i > 0) {\n                sum -= prefix[i-1];\n            }\n            if (sum == 0 || sum == 1) {\n                ct++;\n            } else if (sum == 2) {\n                if (list[i+k-1] && list[i]) {\n                    ct++;\n                }\n            }\n        }\n        \n        return ct;\n    }\n}\n\n/*\n[0,0,1]\nk = 3\nexpected = 1\n*/",
    "submit_ts": "1720278643",
    "subm_id": "1311718070"
}