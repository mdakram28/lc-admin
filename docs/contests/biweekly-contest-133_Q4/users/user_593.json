{
    "username": "chauhan_ayush",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    const int MOD = 1000000007;\n    vector<vector<long long>> memo;\n\n    long long solve(int length, int inv, unordered_map<int, int>& mp) {\n        if (inv < 0) return 0;\n        if (length == 0) return inv == 0 ? 1 : 0;\n\n        if (memo[length][inv] != -1) return memo[length][inv];\n\n        long long result = 0;\n        for (int i = 0; i < length; i++) {\n            int pre = inv - i;\n            if (pre >= 0) {\n                result = (result + solve(length - 1, pre, mp)) % MOD;\n            }\n        }\n\n        if (mp.find(length) != mp.end()) {\n            int t = mp[length];\n            if (inv != t) {\n                result = 0;\n            }\n        }\n\n        return memo[length][inv] = result;\n    }\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mp;\n        for (auto& req : requirements) {\n            mp[req[0] + 1] = req[1];\n        }\n\n        memo = vector<vector<long long>>(n + 1, vector<long long>(400 + 1, -1));\n\n        long long result = 0;\n        for (int inv = 0; inv <= 400; inv++) {\n            result = (result + solve(n, inv, mp)) % MOD;\n        }\n\n        return (int) result;\n    }\n};\n",
    "submit_ts": 1719070745.0
}