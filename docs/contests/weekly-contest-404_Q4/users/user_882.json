{
    "username": "Sanyasi",
    "submission": "\nclass Solution {\npublic:\n    \n    \n\nvoid dfs4(int u,int par,vector<int>adj[],vector<int>&dp1,vector<int>&dep,vector<int>&hit)\n{\n    int mx1=0,mx2=0;\n    \n    for(auto it:adj[u])\n    {\n        if(it!=par)\n        {\n            \n            dfs4(it,u,adj,dp1,dep,hit);\n            hit[u]=max(hit[it]+1,hit[u]);\n            dp1[u]=max(dp1[u],dp1[it]);\n \n            if(hit[it]+1>mx1)\n            {\n                mx2=mx1;\n                mx1=hit[it]+1;\n            }\n            else if(hit[it]+1>mx2)\n            {\n                mx2=hit[it]+1;\n            }\n            \n        }\n    }\n    dp1[u]=max(dp1[u],mx1+mx2);\n}\n\n    \n    \n    \nvector<int>dp;\nvector<int>ht;\nvoid dfs1(int u,int par,vector<int>adj[])\n{\n    for(auto it:adj[u])\n    {\n        if(it!=par)\n        {           \n            dfs1(it,u,adj);\n            ht[u]=max(ht[it]+1,ht[u]);\n        }\n    }\n}\n \nvoid dfs2(int u,int par,int par_val,vector<int>adj[]){\n    int mx1=-1,mx2=-1;\n    for(auto it:adj[u]){\n        if(it!=par){\n            if(ht[it]>mx1){\n                mx2=mx1;\n                mx1=ht[it];\n            }\n            else if(ht[it]>mx2){\n                mx2=ht[it];\n            }\n        }\n    }\n \n    for(auto it:adj[u])\n    {\n        if(it!=par)\n        {\n            int new_par_val=par_val;\n            if(ht[it]==mx1)new_par_val=max(new_par_val,mx2);\n            else new_par_val=max(new_par_val,mx1);\n \n            dfs2(it,u,new_par_val+1,adj);\n \n            dp[u]=max(dp[u],ht[it]+1);\n        }\n    }\n    dp[u]=max(dp[u],par_val+1);\n}\nint extra=0;\n \nint solve(vector<vector<int>>edges1)\n{  \n    if((int)(edges1.size())==0)return 0;\n    int n=edges1.size()+1;\n    dp.resize(n+1,0);\n    \n    ht.resize(n+1,0);\n    for(int i=0;i<=n;i++){\n        dp[i]=0;\n        ht[i]=0;\n    }\n    vector<int>adj[n+1];\n \n    for (int i = 0; i < n-1; ++i)\n    {\n        int a=edges1[i][0],b=edges1[i][1];\n        \n        adj[a].push_back(b);\n        adj[b].push_back(a);\n    }\n \n    dfs1(0,-1,adj);\n    dfs2(0,-1,-1,adj);\n    int res=n;\n    \n    for (int i = 0; i < n; ++i)\n    {\n        if(dp[i]!=0)\n       res=min(res,dp[i]);\n    }\n    vector<int>dp1(n,0);\n    vector<int>hit(n,0);\n    vector<int>dep(n,0);\n    dfs4(0,-1,adj,dp1,dep,hit);\n    for(int i=0;i<n;i++){\n        extra=max(extra,dp1[i]);\n    }\n    \n    // cout<<res<<\" \";\n    return res;\n \n}\n    \n    \n    \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int res=0;\n        res=max({res,solve(edges1)+solve(edges2)+1,extra});\n        return res;\n    }\n};",
    "submit_ts": "1719719825",
    "subm_id": "1304451485"
}