{
    "username": "Tirtha77",
    "submission": "struct TrieNode {\n    TrieNode* children[26];\n    int minCost = 1e9;\n    bool isEndOfWord = false;\n    \n    bool containsKey(char ch) {\n        return (children[ch - 'a'] != nullptr);\n    }\n    \n    void put(char ch, TrieNode* node) {\n        children[ch - 'a'] = node;\n    }\n    \n    TrieNode* get(char ch) {\n        return children[ch - 'a'];\n    }\n    \n    int getMinCost() {\n        return minCost;\n    }\n    \n    void setMinCost(int val) {\n        minCost = min(minCost, val);\n    }\n    \n    void setEndOfWord() {\n        isEndOfWord = true;\n    }\n    \n    bool endsWord() {\n        return isEndOfWord;\n    }\n};\n\nclass Trie {\n    TrieNode* root;\n    \npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insertWord(string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->containsKey(ch)) {\n                node->put(ch, new TrieNode());\n            }\n            node = node->get(ch);\n        }\n        node->setEndOfWord();\n        node->setMinCost(cost);\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            trie->insertWord(words[i], costs[i]);\n        }\n        \n        int a = target.size(); // renaming n to a\n        vector<int> dp(a + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int l = 0; l < a; ++l) {\n            if (dp[l] == INT_MAX) continue;\n            \n            TrieNode* node = trie->getRoot();\n            for (int j = l; j < a; ++j) {\n                if (!node->containsKey(target[j])) break;\n                \n                node = node->get(target[j]);\n                if (node->endsWord()) {\n                    dp[j + 1] = min(dp[j + 1], dp[l] + node->getMinCost());\n                }\n            }\n        }\n        \n        return dp[a] == INT_MAX ? -1 : dp[a];\n    }\n};\n",
    "submit_ts": "1720324147",
    "subm_id": "1312392678"
}