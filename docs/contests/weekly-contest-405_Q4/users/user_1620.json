{
    "username": "shaileshk11",
    "submission": "class TrieNode {\n    Map<Character, TrieNode> children;\n    int minCost;\n\n    public TrieNode() {\n        this.children = new HashMap<>();\n        this.minCost = Integer.MAX_VALUE;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        this.root = new TrieNode();\n    }\n\n    public void insertWord(String word, int cost) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            if (!node.children.containsKey(ch)) {\n                node.children.put(ch, new TrieNode());\n            }\n            node = node.children.get(ch);\n        }\n        node.minCost = Math.min(node.minCost, cost);\n    }\n}\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = buildTrie(words, costs);\n\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n\n            TrieNode currentNode = trie.root;\n            for (int j = i; j < n; j++) {\n                char currentChar = target.charAt(j);\n\n                if (!currentNode.children.containsKey(currentChar)) {\n                    break;\n                }\n\n                currentNode = currentNode.children.get(currentChar);\n\n                if (currentNode.minCost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + currentNode.minCost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n\n    private Trie buildTrie(String[] words, int[] costs) {\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insertWord(words[i], costs[i]);\n        }\n        return trie;\n    }\n}\n",
    "submit_ts": "1720323705",
    "subm_id": "1312382043"
}