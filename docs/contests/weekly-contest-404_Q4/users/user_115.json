{
    "username": "sgdfbahjbhbaisdufg",
    "submission": "class Solution {\n    vector<vector<int>> getadj(const vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (auto &e : edges) {\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        return adj;\n    }\n    \n    auto getdp(const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<unordered_map<int, int>> dp(n);\n        function<int(int, int)> solve;\n        solve = [&](int u, int v) -> int {\n            if (dp[u].count(v)) {\n                return dp[u][v];\n            }\n            \n            int ans = 0;\n            for (int w : adj[v]) {\n                if (w != u) {\n                    int curr = solve(v, w);\n                    ans = max(ans, curr);\n                }\n            }\n            ++ans;\n            dp[u][v] = ans;\n            return ans;\n        };\n        \n        int d = 0, minmax = INT_MAX;\n        for (int u = 0; u < n; ++u) {\n            priority_queue<int> pq;\n            for (int v : adj[u]) {\n                int curr = solve(u, v);\n                pq.push(-curr);\n                if (pq.size() > 2) {\n                    pq.pop();\n                }\n            }\n            \n            int currd = 0, maxl = 0;\n            while (!pq.empty()) {\n                currd -= pq.top();\n                maxl = max(maxl, -pq.top());\n                pq.pop();\n            }\n            d = max(d, currd);\n            \n            minmax = min(minmax, maxl);\n        }\n        return make_tuple(dp, d, minmax);\n    }\n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto adj1 = getadj(edges1), adj2 = getadj(edges2);\n        auto [dp1, d1, minmax1] = getdp(adj1);\n        auto [dp2, d2, minmax2] = getdp(adj2);\n        int dmerge = minmax1 + minmax2 + 1;\n        return max({ d1, d2, dmerge });\n    }\n};",
    "submit_ts": "1719717205",
    "subm_id": "1304385316"
}