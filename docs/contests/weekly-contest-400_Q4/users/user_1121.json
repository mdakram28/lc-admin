{
    "username": "dhameliyayagnik28",
    "submission": "class segment_tree{\n    public:\n\n    vector<int> st;\n    int n, MX = (1 << 30) - 1;\n    segment_tree(int size, vector<int> &a)\n    {\n        n = size;\n        st.resize(4 * n, MX);\n        build(0, 0, n - 1, a);\n    }\n    \n    int merge(int a, int b)\n    {\n    \treturn (a & b);\n    }\n\n    void build(int node, int start, int end, vector<int> &a)\n    {\n        if(start == end)\n        {\n            st[node] = a[start];\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        build(2 * node + 1, start, mid, a);\n        build(2 * node + 2, mid + 1, end, a);\n        st[node] = merge(st[2 * node + 1], st[2 * node + 2]);\n    }\n\n    int query(int node, int start, int end, int l, int r)\n    {\n        if(l > end || r < start) return MX;\n        if(l <= start && end <= r) return st[node];\n        int mid = (start + end) / 2;\n        int left = query(2 * node + 1, start, mid, l, r);\n        int right = query(2 * node + 2, mid + 1, end, l, r);\n        return merge(left, right);\n    }\n\n    void query1(int node, int start, int end, int l, int r, int &ans, int k)\n    {\n        if(start == end) \n        {\n        \tif(st[node] < MX) ans = min(ans, abs(k - st[node]));\n        \treturn;\n        }\n        int mid = (start + end) / 2;\n        query1(2 * node + 1, start, mid, l, r, ans, k);\n        query1(2 * node + 2, mid + 1, end, l, r, ans, k);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        segment_tree seg(n, nums);\n        int ans = 1e9;\n        for(int i = 0; i < n; i++)\n        {\n            int l = i - 1, r = n - 1;\n            while(r - l > 1)\n            {\n                int m = (l + r) >> 1;\n                if(seg.query(0, 0, n - 1, i, m) >= k) l = m;\n                else r = m;\n            }\n            if(l != i - 1) ans = min(ans, abs(k - seg.query(0, 0, n - 1, i, l)));\n            ans = min(ans, abs(k - seg.query(0, 0, n - 1, i, r)));\n        }\n        // int ans = 1e9;\n        // seg.query1(0, 0, n - 1, 0, n - 1, ans, k);\n        return ans;\n    }\n};",
    "submit_ts": 1717300305.0
}