{
    "username": "john801205",
    "submission": "class Solution {\n    void dfs1(int idx, int par, const vector<vector<int>>& graph, vector<int>& levels)\n    {\n        for (const auto& child: graph[idx])\n        {\n            if (child != par)\n            {\n                dfs1(child, idx, graph, levels);\n                levels[idx] = max(levels[idx], levels[child]+1);\n            }\n        }\n    }\n    \n    int dfs2(int idx, int par, int dist, const vector<vector<int>>& graph, const vector<int>& levels, vector<int>& distances)\n    {\n        int mmax = dist, secondmax = 0;\n        for (const auto& child: graph[idx])\n        {\n            if (child != par)\n            {\n                int d = levels[child]+1;\n                if (d > mmax)\n                {\n                    secondmax = mmax;\n                    mmax = d;\n                }\n                else if (d > secondmax)\n                {\n                    secondmax = d;\n                }\n            }\n        }\n        \n        distances[idx] = mmax;\n        int res = mmax + secondmax;\n        \n        for (const auto& child: graph[idx])\n        {\n            if (child != par)\n            {\n                int d = levels[child]+1;\n                if (d != mmax)\n                    d = mmax+1;\n                else\n                    d = secondmax+1;\n                \n                res = max(res, dfs2(child, idx, d, graph, levels, distances));\n            }\n        }\n        \n        return res;\n    }   \n    \n    pair<int, int> distance(const vector<vector<int>>& edges)\n    {\n        int n = edges.size()+1;\n        vector<vector<int>> graph(n);\n        for (const auto& edge: edges)\n        {\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n        }\n        \n        vector<int> levels(n, 0);\n        vector<int> distances(n, 0);\n        dfs1(0, -1, graph, levels);\n        int mmax = dfs2(0, -1, 0, graph, levels, distances);\n        \n        int mmin = INT_MAX;\n        for (const auto& d: distances)\n            mmin = min(mmin, d);\n        \n        return {mmin, mmax};\n    }\n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        const auto [d1, maxd1] = distance(edges1);\n        const auto [d2, maxd2] = distance(edges2);\n        return max(d1+d2+1, max(maxd1, maxd2));\n    }\n};",
    "submit_ts": "1719719112",
    "subm_id": "1304434021"
}