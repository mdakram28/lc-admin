{
    "username": "Chirayu Garg",
    "submission": "class Solution {\n\n    public static class Node {\n        int val;\n        int row;\n        int col;\n\n        public Node (int val, int row, int col) {\n            this.val = val;\n            this.row = row;\n            this.col = col;\n        }\n    }\n\n    private boolean check (Node a, Node b) {\n        return a.row == b.row || a.col == b.col;\n    }\n\n    public long maximumValueSum(int[][] board) {\n        long maxsum = Long.MIN_VALUE;\n        int n = board.length;\n        int m = board[0].length;\n\n        List<Node> nodes = new ArrayList<>();\n\n        for (int r=0; r<n; r++) {\n            for (int c=0; c<m; c++) {\n                nodes.add(new Node(board[r][c], r, c));\n            }\n        }\n\n        Collections.sort(nodes, (n1, n2) -> Integer.compare(n2.val, n1.val));\n\n        for (int i=0; i<n; i++) {\n            for (int j=0; j<m; j++) {\n                long sum = board[i][j];\n\n                int l = 0;\n                while (nodes.get(l).row == i || nodes.get(l).col == j) {\n                    l++;\n                }\n                int r = l;\n\n                while (nodes.get(r).row == i || nodes.get(r).col == j || check(nodes.get(l), nodes.get(r))) {\n                    r++;\n                }\n\n                while (l < r) {\n                    maxsum = Math.max(maxsum, sum + nodes.get(l).val + nodes.get(r).val);\n                    l++;\n                    while (nodes.get(l).row == i || nodes.get(l).col == j) {\n                        l++;\n                    }\n                    while (r > l && (nodes.get(r).row == i || nodes.get(r).col == j || check(nodes.get(l), nodes.get(r)))) {\n                        r--;\n                    }\n                }\n            }\n        }\n        return maxsum;\n    }\n}",
    "submit_ts": "1723910045",
    "subm_id": "1359215253"
}