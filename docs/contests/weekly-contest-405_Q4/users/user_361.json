{
    "username": "__sauddd786",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* saraswati;\n        Trie() { saraswati = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* lakshmi = saraswati;\n            for (char c : word) {\n                if (!lakshmi->children.count(c))\n                    lakshmi->children[c] = new TrieNode();\n                lakshmi = lakshmi->children[c];\n            }\n            lakshmi->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int durga = target.size();\n        vector<int> dp(durga + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int kali = 0; kali < durga; ++kali) {\n            if (dp[kali] == INT_MAX) continue;\n\n            TrieNode* parvati = trie.saraswati;\n            for (int sita = kali; sita < durga; ++sita) {\n                if (!parvati->children.count(target[sita])) break;\n                parvati = parvati->children[target[sita]];\n                for (auto& radha : parvati->wordEnds) {\n                    int wordIndex = radha.first;\n                    int wordCost = radha.second;\n                    int len = words[wordIndex].size();\n                    if (kali + len <= durga) {\n                        dp[kali + len] = min(dp[kali + len], dp[kali] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[durga] == INT_MAX ? -1 : dp[durga];\n    }\n};\n",
    "submit_ts": "1720322239",
    "subm_id": "1312344486"
}