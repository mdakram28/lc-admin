{
    "username": "wa-shao",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n         int[] arr = new int[nums.length / 2];\n        Map<Integer,Integer> map = new HashMap<>();\n        for (int i = 0; i < nums.length / 2 ;i++){\n            map.merge(Math.abs(nums[i] - nums[nums.length - i - 1]), 1, Integer::sum);\n            int a = nums[i];\n            int b = nums[nums.length - i - 1];\n            int d1 = Math.max(Math.abs(a - k),a);\n            int d2 = Math.max(Math.abs(b - k),b);\n            int dis = Math.max(d1,d2);\n            arr[i] = dis;\n        }\n        Arrays.sort(arr);\n        int ans = Integer.MAX_VALUE;\n        for (int kk : map.keySet()){\n            int cnt = 0;\n            int val = map.get(kk);\n            int sum = binaSea(arr,kk);\n            cnt += (sum + 1) * 2 ;\n            cnt += (nums.length / 2 - (sum + 1) - val);\n            ans = Math.min(ans,cnt);\n        }\n        return ans;\n\n    }\n    \n     private int binaSea(int[] arr, int kk) {\n        int l = 0;\n        int r = arr.length - 1;\n        while (l <= r){\n            int mid = (l + r) / 2;\n            if (arr[mid] < kk){\n                l = mid + 1;\n            }else {\n                r = mid - 1;\n            }\n        }\n        return l - 1;\n    }\n}",
    "submit_ts": "1721488049",
    "subm_id": "548312677"
}