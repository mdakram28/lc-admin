{
    "username": "cloudy_8",
    "submission": "class Word:\n    def __init__(self, ch=None):\n        self.ch = ch\n        self.children = {}\n        self.cost = 0\n        self.is_end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = Word()\n    \n    def insert(self, word, cost):\n        p = self.root\n        for ch in word:\n            if ch not in p.children:\n                p.children[ch] = Word(ch)\n            p = p.children[ch]\n        if p.is_end_of_word:\n            p.cost = min(p.cost, cost)  # Only update cost if it's lower than the existing one\n        else:\n            p.cost = cost\n            p.is_end_of_word = True\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(words)\n        trie = Trie()\n        for i in range(n):\n            trie.insert(words[i], costs[i])\n        \n        m = len(target)\n        dp = [float('inf')] * (m + 1)\n        dp[0] = 0  # No cost to form an empty string\n\n        for i in range(m):\n            if dp[i] == float('inf'):\n                continue  # Skip if this prefix cannot be formed\n            p = trie.root\n            for j in range(i, m):\n                if target[j] not in p.children:\n                    break\n                p = p.children[target[j]]\n                if p.is_end_of_word:  # Only update cost if at the end of a word\n                    dp[j + 1] = min(dp[j + 1], dp[i] + p.cost)\n\n        return dp[m] if dp[m] != float('inf') else -1\n",
    "submit_ts": "1720322157",
    "subm_id": "1312342221"
}