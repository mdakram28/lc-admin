{
    "username": "Jack_knight",
    "submission": "\nclass SegmentTree {\n    vector<int> st;\n    int n;\n    \n    void build(vector<int>& nums, int start, int end, int node) {\n        if (start == end) {\n            st[node] = isPeak(nums, start) ? 1 : 0;\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(nums, start, mid, 2 * node + 1);\n        build(nums, mid + 1, end, 2 * node + 2);\n        st[node] = st[2 * node + 1] + st[2 * node + 2];\n    }\n    \n    int queryRange(int start, int end, int l, int r, int node) {\n        if (r < start || end < l) return 0;\n        if (l <= start && end <= r) return st[node];\n        int mid = (start + end) / 2;\n        int left = queryRange(start, mid, l, r, 2 * node + 1);\n        int right = queryRange(mid + 1, end, l, r, 2 * node + 2);\n        return left + right;\n    }\n    \n    void update(vector<int>& nums, int start, int end, int idx, int node) {\n        if (start == end) {\n            st[node] = isPeak(nums, start) ? 1 : 0;\n            return;\n        }\n        int mid = (start + end) / 2;\n        if (start <= idx && idx <= mid) {\n            update(nums, start, mid, idx, 2 * node + 1);\n        } else {\n            update(nums, mid + 1, end, idx, 2 * node + 2);\n        }\n        st[node] = st[2 * node + 1] + st[2 * node + 2];\n    }\n    \n    bool isPeak(vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n    \npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        st.resize(4 * n, 0);\n        build(nums, 0, n - 1, 0);\n    }\n    \n    int query(int l, int r) {\n        return queryRange(0, n - 1, l, r, 0);\n    }\n    \n    void update(vector<int>& nums, int idx) {\n        update(nums, 0, n - 1, idx, 0);\n        if (idx > 0) update(nums, 0, n - 1, idx - 1, 0);\n        if (idx < n - 1) update(nums, 0, n - 1, idx + 1, 0);\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n        \n        for (const auto& query : queries) {\n            if (query[0] == 1) { // count peaks in subarray\n                int li = query[1], ri = query[2];\n                result.push_back(segTree.query(li + 1, ri - 1));\n            } else if (query[0] == 2) { // update value in array\n                int index = query[1], val = query[2];\n                nums[index] = val;\n                segTree.update(nums, index);\n            }\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": 1718507949.0
}