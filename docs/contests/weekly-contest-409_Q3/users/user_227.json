{
    "username": "user4607v",
    "submission": "class Solution {\n    class Node{\n        Node lNode;\n        Node rNode;\n        int left, right;\n        int mid;\n        int sum =0;\n        Node(int left, int right){\n            this.left = left;\n            this.right = right;\n            this.mid = left + (right-left)/2;\n        }\n        void add(int l, int r){\n            if(l == left && r == right){\n                sum = right-left+1;\n                return;\n            }\n            if(l <= mid){\n                if(lNode == null){\n                    lNode = new Node(left,mid);\n                }\n                lNode.add(l, Math.min(mid,r));\n            }\n            if(r > mid){\n                if(rNode == null){\n                    rNode = new Node(mid+1, right);\n                }\n                rNode.add(Math.max(mid+1, l), r);\n            }\n            int tmp = 0; \n            if(lNode != null){\n                tmp += lNode.sum;\n            }\n            if(rNode != null){\n                tmp += rNode.sum;\n            }\n            sum = Math.max(tmp, sum);\n        }\n    } \n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        int m = queries.length;\n        int[] ans = new int[m];\n        Node root = new Node(0, n-1);\n        for(int i =0; i < m; i++){\n            if(queries[i][0] +1 < queries[i][1]){\n            root.add(queries[i][0]+1, queries[i][1]-1);\n            }\n            ans[i] = n-1 - root.sum;\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1722740211",
    "subm_id": "1343714055"
}