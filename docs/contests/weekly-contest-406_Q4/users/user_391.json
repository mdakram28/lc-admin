{
    "username": "atharvapatle001",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the cost arrays in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        int horizontalIndex = horizontalCut.length - 1;\n        int verticalIndex = verticalCut.length - 1;\n        \n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        long totalCost = 0;\n\n        // While there are still cuts to be made\n        while (horizontalIndex >= 0 && verticalIndex >= 0) {\n            if (horizontalCut[horizontalIndex] > verticalCut[verticalIndex]) {\n                totalCost += (long) horizontalCut[horizontalIndex] * verticalPieces;\n                horizontalPieces++;\n                horizontalIndex--;\n            } else {\n                totalCost += (long) verticalCut[verticalIndex] * horizontalPieces;\n                verticalPieces++;\n                verticalIndex--;\n            }\n        }\n\n        // If there are still horizontal cuts left\n        while (horizontalIndex >= 0) {\n            totalCost += (long) horizontalCut[horizontalIndex] * verticalPieces;\n            horizontalPieces++;\n            horizontalIndex--;\n        }\n\n        // If there are still vertical cuts left\n        while (verticalIndex >= 0) {\n            totalCost += (long) verticalCut[verticalIndex] * horizontalPieces;\n            verticalPieces++;\n            verticalIndex--;\n        }\n\n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720925474",
    "subm_id": "1320255921"
}