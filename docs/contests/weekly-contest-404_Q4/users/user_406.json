{
    "username": "somanaik",
    "submission": "#include <bits/stdc++.h>\n\n#define all(v) v.begin(), v.end()\n#define gcd(a, b) __gcd(a, b)\n#define sz(x) (int)(x.size())\n\nusing namespace std;\n\ntypedef long long int ll;\ntypedef pair<int,int> pii;\ntypedef pair<ll, ll> pll;\ntypedef vector<int> vint;\ntypedef vector<vint> vvint;\ntypedef vector<ll> vlong;\ntypedef vector<vlong> vvlong;\ntypedef vector<pii> vpii;\ntypedef vector<pll> vpll;\n\nclass Solution {\n    int get_diameter(vvint &es) {\n        int n = es.size() + 1;\n        vvint g(n);\n        for(auto &e: es) {\n            int u = e.front(), v = e.back();\n            g[u].push_back(v);\n            g[v].push_back(u);\n        }\n\n        vint d(n, -1);\n        function<void(int)> bfs = [&](int r) {\n            d[r] = 1;\n            queue<int> q;\n            q.push(r);\n            while(!q.empty()) {\n                auto u = q.front();\n                q.pop();\n                for(auto &v : g[u]) {\n                    if(d[v] != -1) continue;\n                    d[v] = d[u] + 1;\n                    q.push(v); \n                }\n            }\n        };\n        bfs(0);\n        int r = max_element(d.begin(), d.end()) - d.begin();\n        d = vint(n, -1);\n        bfs(r);\n        return *max_element(d.begin(), d.end());\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n       int d1 = get_diameter(edges1), d2 = get_diameter(edges2);\n       return max({d1 / 2 + d2 / 2 + 1, d1 - 1, d2 - 1}); \n    }\n};",
    "submit_ts": 1719716783.0
}