{
    "username": "whoawhoawhoa",
    "submission": "class Solution {\n    static int mod = 1_000_000_007;\n    static Integer[][] dp;\n    \n    public int numberOfPermutations(int n, int[][] requirements) {\n        dp = new Integer[n + 1][n * (n - 1) / 2 + 1];\n        Arrays.sort(requirements, (a, b) -> a[0] - b[0]);\n        for (int[] r : requirements) {\n            if (count(r[0], r[1]) == 0) {\n                return 0;\n            }\n            // fill remaining line\n            for (int i = 0; i < dp[r[0]].length; i++) {\n                if (i != r[1]) {\n                    dp[r[0]][i] = 0;\n                }\n            }\n        }\n        int[] last = requirements[requirements.length - 1];\n        return dp[last[0]][last[1]];\n    }\n    \n    static int count(int pos, int inv) {\n        if (inv < 0) {\n            return 0;\n        }\n        if (pos == 0) {\n            return inv == 0 ? 1 : 0;\n        }\n        if (dp[pos][inv] != null) {\n            return dp[pos][inv];\n        }\n        int res = 0;\n        for (int i = 0; i <= pos; i++) {\n            res = (res + count(pos - 1, inv - i)) % mod;\n        }\n        return dp[pos][inv] = res;\n    }\n}",
    "submit_ts": "1719070408",
    "subm_id": "1296822293"
}