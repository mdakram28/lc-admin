{
    "username": "EricTsengTy",
    "submission": "class STree {\n    public:\n    STree(int n, vector<int> &nums):t(4 * n, 0) {\n        build(1, 0, n - 1, nums);\n    }\n\n    void build(int v, int l, int r, vector<int> &nums) {\n        if (l == r) {\n            t[v] = nums[l];\n            return;\n        }\n\n        int m = (l + r) / 2;\n        build(v << 1, l, m, nums);\n        build((v << 1) | 1, m + 1, r, nums);\n        t[v] = t[v << 1] & t[(v << 1) | 1];\n    }\n\n    int query(int v, int l, int r, int ql, int qr) {\n        if (r < ql || qr < l) {\n            return -1;\n        }\n        if (ql <= l && r <= qr) {\n            return t[v];\n        }\n\n        int m = (l + r) / 2;\n\n        return query(v << 1, l, m, ql, qr) & query((v << 1) | 1, m + 1, r, ql, qr);\n    }\n\n    vector<int> t;\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long res = 0;\n        int n = nums.size();\n        STree stree(n, nums);\n\n        for (int i = 0; i != n; ++i) {\n            int l = i, r = n - 1;\n            while (l <= r) {\n                int m = (l + r) / 2;\n                int andRes = stree.query(1, 0, n - 1, i, m);\n                if (andRes > k) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n\n            long long kl = l;\n            l = i, r = n - 1;\n            while (l <= r) {\n                int m = (l + r) / 2;\n                int andRes = stree.query(1, 0, n - 1, i, m);\n                if (andRes >= k) {\n                    l = m + 1;\n                } else {\n                    r = m - 1;\n                }\n            }\n            long long kr = l;\n            res += kr - kl;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1720278905",
    "subm_id": "1311729249"
}