{
    "username": "srijanshrivastava998",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n    public:\n        std::map<char, TrieNode*> children;\n        int cost;\n\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const std::string& word, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = std::min(node->cost, cost); // Store the minimum cost\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       int n = target.length();\n        std::vector<int> dp(n + 1, INT_MAX); // dp[i] will be the min cost to build target[0:i]\n        dp[0] = 0;\n\n        // Build the trie\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // Dynamic programming to find the minimum cost\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // If current prefix can't be built, skip it\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320463",
    "subm_id": "1312294931"
}