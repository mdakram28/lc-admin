{
    "username": "Kavneet Singh",
    "submission": "class Solution {\n    class cell implements Comparable<cell>{\n        int val;\n        int x;\n        int y;\n\n        cell(int v, int x, int y){\n            this.val= v;\n            this.x= x;\n            this.y= y;\n        }\n\n        public int compareTo(cell c2){\n            return c2.val- this.val;\n        }\n    }\n\n    public long ans(ArrayList<cell> cells, HashSet<Integer> x, HashSet<Integer> y, long sum, int i){\n        if(x.size()==3){\n            // System.out.println(sum);\n            return sum;\n        }\n        if(i>=cells.size()) return Long.MIN_VALUE;\n\n        long max= Long.MIN_VALUE;\n\n        for(int j=i;j<cells.size();j++){\n            // if(max>Integer.MIN_VALUE) return max;\n            cell a= cells.get(j);\n            if(x.contains(a.x) || y.contains(a.y)) continue;\n            x.add(a.x);\n            y.add(a.y);\n            max= Math.max(max, ans(cells, x, y, sum+ a.val, j+1));\n            x.remove(a.x);\n            y.remove(a.y);\n        }\n\n        return max;\n    }\n\n    public long maximumValueSum(int[][] board) {\n        PriorityQueue<cell> pq= new PriorityQueue();\n\n        for(int i=0;i<board.length;i++){\n            for(int j=0;j<board[0].length;j++){\n                pq.add(new cell(board[i][j], i, j));\n            }\n        }\n\n        ArrayList<cell> cells= new ArrayList();\n\n        HashMap<Integer, Integer> row= new HashMap();\n        HashMap<Integer, Integer> col= new HashMap();\n        HashSet<Integer> fullR= new HashSet();\n        HashSet<Integer> fullC= new HashSet();\n\n        while(fullR.size()<3 && fullC.size()<3 && pq.size()>0){\n            cell rem= pq.remove();\n            if(fullR.contains(rem.y) || fullC.contains(rem.x)){\n                // System.out.println(rem.val + \"  \"+ row + \"   \" + col);\n                continue;\n            }\n            cells.add(rem);\n            row.put(rem.y, row.getOrDefault(rem.y, 0) +1);\n            col.put(rem.x, col.getOrDefault(rem.x, 0) +1);\n            if(row.get(rem.y)==3) fullR.add(rem.y);\n            if(col.get(rem.x)==3) fullC.add(rem.x);\n        }\n        // for(int i=0;i<cells.size();i++){\n        //     System.out.print(cells.get(i).val + \"   \" );\n        // }\n\n        return ans(cells, new HashSet(), new HashSet(), 0, 0);\n\n        \n    }\n}",
    "submit_ts": "1723910076",
    "subm_id": "1359216460"
}