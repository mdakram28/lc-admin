{
    "username": "SkookumChoocher",
    "submission": "from sortedcontainers import SortedList\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (2 * n)\n\n    def update(self, pos, value):\n        pos += self.n\n        self.tree[pos] = value\n        while pos > 1:\n            pos //= 2\n            self.tree[pos] = max(self.tree[2 * pos], self.tree[2 * pos + 1])\n\n    def query(self, l, r):\n        res = 0\n        l += self.n\n        r += self.n\n        while l < r:\n            if l % 2:\n                res = max(res, self.tree[l])\n                l += 1\n            if r % 2:\n                r -= 1\n                res = max(res, self.tree[r])\n            l //= 2\n            r //= 2\n        return res\n\nclass Solution:\n    def getResults(self, queries):\n        max_x = 50001\n        obstacles = SortedList([0])\n        results = []\n        seg_tree = SegmentTree(max_x + 1)\n        \n        for query in queries:\n            match query:\n                case [1, x]:\n                    idx = obstacles.bisect_left(x)\n                    if idx < len(obstacles):\n                        right_obstacle = obstacles[idx]\n                        seg_tree.update(right_obstacle, right_obstacle - x)\n                    left_obstacle = obstacles[idx - 1]\n                    seg_tree.update(x, x - left_obstacle)\n                    obstacles.add(x)\n                case [2, x, sz]:\n                    idx = obstacles.bisect_left(x)\n                    left_obstacle = obstacles[idx - 1]\n                    max_gap = max(seg_tree.query(0, x), x - left_obstacle)\n                    results.append(max_gap >= sz)\n        \n        return results",
    "submit_ts": 1716651581.0
}