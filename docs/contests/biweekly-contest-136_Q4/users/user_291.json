{
    "username": "maybe_lelouch",
    "submission": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        graph = defaultdict(list)\n        for u, v in edges:\n            graph[u].append(v)\n            graph[v].append(u)\n\n        dp1 = [0] * n\n        dp2 = [0] * n\n\n        def dfs1(node, parent):\n            max_child = 0\n            for child in graph[node]:\n                if child != parent:\n                    dfs1(child, node)\n                    max_child = max(max_child, dp1[child] + (2 if child % 2 == 0 else 1))\n            dp1[node] = max_child\n\n        def dfs2(node, parent):\n            max1, max2 = 0, 0\n            for child in graph[node]:\n                if child != parent:\n                    if dp1[child] + (2 if child % 2 == 0 else 1) >= max1:\n                        max2 = max1\n                        max1 = dp1[child] + (2 if child % 2 == 0 else 1)\n                    elif dp1[child] + (2 if child % 2 == 0 else 1) > max2:\n                        max2 = dp1[child] + (2 if child % 2 == 0 else 1)\n\n            for child in graph[node]:\n                if child != parent:\n                    outside = max(dp2[node], max2 if dp1[child] + (2 if child % 2 == 0 else 1) == max1 else max1)\n                    dp2[child] = max(outside + (2 if node % 2 == 0 else 1), dp2[node])\n                    dfs2(child, node)\n\n        dfs1(0, -1)\n        dfs2(0, -1)\n\n        return [max(dp1[i], dp2[i]) for i in range(n)]",
    "submit_ts": "1722697716",
    "subm_id": "1343156314"
}