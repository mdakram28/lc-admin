{
    "username": "sonner",
    "submission": "from typing import List\n\n\nclass Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        result = 0\n\n        top_row = 0\n        bottom_row = len(grid) - 1\n\n        while top_row < bottom_row:\n            left_col = 0\n            right_col = len(grid[0]) - 1\n\n            while left_col < right_col:\n                nBits = sum([\n                    grid[top_row][left_col],\n                    grid[bottom_row][right_col],\n                    grid[top_row][right_col],\n                    grid[bottom_row][left_col],\n                ])\n\n                result += min(nBits, 4 - nBits)\n\n                left_col += 1\n                right_col -= 1\n\n            top_row += 1\n            bottom_row -= 1\n\n        mid_row = len(grid) // 2 if len(grid) % 2 == 1 else None\n        mid_col = len(grid[0]) // 2 if len(grid[0]) % 2 == 1 else None\n\n        # other_bits_counts = [0, 0]\n        # if mid_row is not None:\n        #     for col_index in range(len(grid[0])):\n        #         other_bits_counts[grid[mid_row][col_index]] += 1\n        # if mid_col is not None:\n        #     for row_index in range(len(grid)):\n        #         other_bits_counts[grid[row_index][mid_col]] += 1\n        #\n        # if mid_row is not None and mid_col is not None:\n        #     other_bits_counts[grid[mid_row][mid_col]] -= 1\n        #\n        # min_other_bits = other_bits_counts[1] % 4\n        # if other_bits_counts[0] >= 4 - other_bits_counts[1] % 4:\n        #     min_other_bits = min(min_other_bits, 4 - other_bits_counts[1] % 4)\n\n        def count_good_and_bad_pairs(line: list[int]):\n            i = 0\n            j = len(line) - 1\n            good_odd = 0\n            good_even = 0\n            bad = 0\n            while i < j:\n                if line[i] == 1 and line[j] == 1:\n                    good_odd += 1\n                elif line[i] == 0 and line[j] == 0:\n                    good_even += 1\n                else:\n                    bad += 1\n\n                i += 1\n                j -= 1\n            return good_odd, good_even, bad\n\n        total_good_odd = 0\n        total_bad = 0\n        if mid_row is not None:\n            row_good_odd, _, row_bad = count_good_and_bad_pairs(grid[mid_row])\n            total_good_odd += row_good_odd\n            total_bad += row_bad\n        \n        if mid_col is not None:\n            line = [grid[r][mid_col] for r in range(len(grid))]\n            col_good_odd, _, col_bad = count_good_and_bad_pairs(line)\n            total_good_odd += col_good_odd\n            total_bad += col_bad\n        \n        result += total_bad\n        if total_good_odd % 2 == 1:\n            if total_bad == 0:\n                result += 2\n\n        if mid_row is not None and mid_col is not None:\n            result += grid[mid_row][mid_col]\n\n        return result",
    "submit_ts": "1722698167",
    "subm_id": "1343171917"
}