{
    "username": "mayank-0407",
    "submission": "class Solution {\n    private:\n    struct TrieNode {\n        TrieNode* children[26] = {nullptr};\n        int minCostIndex = -1;\n    };\n\n    void insert(TrieNode* root, const string& word, int index, int cost, const vector<int>& costs) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        if (node->minCostIndex == -1 || cost < costs[node->minCostIndex]) {\n            node->minCostIndex = index;\n        }\n    }\n\n    void search(TrieNode* root, const string& s, int start, vector<int>& dp, const vector<string>& words, const vector<int>& costs) {\n        TrieNode* node = root;\n        for (int i = start; i < s.size(); ++i) {\n            if (!node->children[s[i] - 'a']) break;\n            node = node->children[s[i] - 'a'];\n            if (node->minCostIndex != -1) {\n                int len = words[node->minCostIndex].size();\n                if (start + len <= s.size()) {\n                    dp[start + len] = min(dp[start + len], dp[start] + costs[node->minCostIndex]);\n                }\n            }\n        }\n    }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], i, costs[i], costs);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            search(root, target, i, dp, words, costs);\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322656",
    "subm_id": "1312355680"
}