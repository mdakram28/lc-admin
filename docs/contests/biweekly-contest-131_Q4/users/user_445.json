{
    "username": "fu-bo-luo-mu",
    "submission": "const int N = 5e4 + 10;\nstruct Node{\n    int l,r;\n    int mx,llen,rlen;\n}tr[N << 2];\nclass Solution {\npublic:\n    void build(int u,int l,int r){\n        tr[u].l = l,tr[u].r = r;\n        if(l == r){\n            tr[u].mx = tr[u].llen = tr[u].rlen = 1;\n            return;\n        }\n        int mid = l + r >> 1;\n        build(u << 1,l,mid);\n        build(u << 1 | 1,mid + 1,r);\n        pushup(u);\n    }\n    void pushup(int u){\n        tr[u].mx = max(tr[u << 1].mx,tr[u << 1 | 1].mx);\n        tr[u].mx = max(tr[u].mx,tr[u << 1].rlen + tr[u << 1 | 1].llen);\n        tr[u].llen = tr[u << 1].llen;\n        if(tr[u << 1].llen == tr[u << 1].r - tr[u << 1].l + 1) tr[u].llen += tr[u << 1 | 1].llen;\n        tr[u].rlen = tr[u << 1 | 1].rlen;\n        if(tr[u << 1 | 1].rlen == tr[u << 1 | 1].r - tr[u << 1 | 1].l + 1) tr[u].rlen += tr[u << 1].rlen;\n    }\n    void modify(int u,int x,int v){\n        if(tr[u].l == tr[u].r){\n            tr[u].mx = tr[u].llen = tr[u].rlen = v;\n            return ;\n        }\n        if(tr[u << 1].r >= x) modify(u << 1,x,v);\n        else modify(u << 1 | 1,x,v);\n        pushup(u);\n    }\n    int query(int u, int l, int r) {\n        // cout << tr[u].l << ' ' << tr[u].r << ' '<< tr[u].mx << '\\n';\n        if (tr[u].l >= l && tr[u].r <= r) return tr[u].mx;\n        int mid = (tr[u].l + tr[u].r) >> 1;\n        int mx = 0;\n        //cout << l << ' ' << r << ' ' <<tr[u].l << ' ' << tr[u].r << ' '<< tr[u].mx << '\\n';\n        int tmp = 0;\n        if (l <= mid) \n        {\n            mx = max(query(u << 1, l, r),mx);\n            // tmp += min(tr[u << 1].rlen,min(mid,r) - max(l,tr[u].l) + 1);\n        }\n        if (r > mid) \n        {\n            mx = max(query(u << 1 | 1, l, r),mx);\n            //tmp += min(min(r,tr[u << 1 | 1].r) - max(mid + 1,l) + 1,tr[u << 1 | 1].llen);\n        }\n        if(l <= mid && r > mid){\n            mx = max(mx,min(tr[u << 1].rlen,mid - l + 1) + min(tr[u << 1 | 1].llen,r - mid));\n        }\n        // cout << l << ' ' << r << ' ' <<tr[u].l << ' ' << tr[u].r << ' '<< mx << '\\n';\n        return mx;\n    }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        vector<bool> res;\n        build(1,1,N - 1);\n        modify(1,1,0);\n        unordered_set<int> st;\n        for(auto &q : queries){\n            if(q[0] == 1){\n                modify(1,q[1] + 1,0);\n                st.insert(q[1] + 1);\n            }else{\n                 if(!st.count(q[1] + 1))  modify(1,q[1] + 1,0);\n                int mx = query(1,1,q[1] + 1);\n                 //cout << mx << '\\n';\n                res.push_back(min(q[1],mx + 1) >= q[2]);\n                if(!st.count(q[1] + 1)) modify(1,q[1] + 1,1);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1716652247.0
}