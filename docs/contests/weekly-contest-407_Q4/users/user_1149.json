{
    "username": "drulza-a",
    "submission": "class Solution {\npublic:\n    int find_pos(vector<int>& nums, int p)\n    {\n        while (p < nums.size()&&nums[p] <= 0)++p;\n        return p;\n    }\n    int find_neg(vector<int>& nums, int p)\n    {\n        while (p < nums.size()&&nums[p] >= 0)\n            ++p;\n        return p;\n    }\n\n    void print_num(vector<int>& nums)\n    {\n        for (auto i : nums)\n        {\n            cout << i << \" \";\n        }\n        cout << endl;\n    }\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        vector<int>chafen(n);\n        long long res = 0;\n        for (int i = 0; i < n; ++i)\n        {\n            nums[i] -= target[i];\n        }\n        chafen[0] = nums[0];\n        for (int i = 1; i < n; ++i)\n        {\n            chafen[i] =nums[i]- nums[i-1];\n        }\n        int pos = find_pos(chafen, 0);\n        int neg = find_neg(chafen, 0);\n        for (int i = 0; i < n; ++i)\n        {\n            int prev = chafen[i];\n            pos = find_pos(chafen, pos);\n                neg = find_neg(chafen, neg);\n            if (chafen[i] > 0)\n            {\n                res += abs(chafen[i]);\n                while (1)\n                {\n                    if (neg == n)\n                    {\n                        break;\n                    }\n                    prev = chafen[i];\n                    chafen[i] += chafen[neg];\n                    if (chafen[i] <= 0)\n                        break;\n                    chafen[neg] = 0;\n                    neg = find_neg(chafen, neg);\n                }\n                if(neg<n)\n                    chafen[neg] += prev;\n                chafen[i] = 0;\n            }\n            else if (chafen[i] < 0)\n            {\n                res += abs(chafen[i]);\n                while (1)\n                {\n                    if (pos == n)\n                    {\n                        break;\n                    }\n                    prev = chafen[i];\n                    chafen[i] += chafen[pos];\n                    if (chafen[i] >= 0)\n                        break;\n                    chafen[pos] = 0;\n                    pos = find_pos(chafen, pos);\n                }\n                if (pos < n)\n                    chafen[pos] += prev;\n                chafen[i] = 0;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1721531856",
    "subm_id": "548388958"
}