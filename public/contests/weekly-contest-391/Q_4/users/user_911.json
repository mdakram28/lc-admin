{
    "username": "pg_2",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        sorted_sum = []\n        sorted_diff = []\n        cnt = 0\n        for i, j in points:\n            sorted_sum.append((i + j, cnt))\n            sorted_diff.append((i - j, cnt))\n            cnt += 1\n        sorted_sum.sort()\n        sorted_diff.sort()\n        ans = sys.maxsize\n        n = len(points)\n        for i in range(n):\n            start = 0\n            end = n - 1\n            while start < n and sorted_sum[start][1] == i:\n                start += 1\n            first = sorted_sum[start][0]\n            while end >= 0 and sorted_sum[end][1] == i:\n                end -= 1\n            second = sorted_sum[end][0]\n            start = 0\n            end = n - 1\n            while start < n and sorted_diff[start][1] == i:\n                start += 1\n            third = sorted_diff[start][0]\n            while end >= 0 and sorted_diff[end][1] == i:\n                end -= 1\n            fourth = sorted_diff[end][0]\n            ans = min(ans, max(fourth - third, second - first))\n        return ans\n"
}