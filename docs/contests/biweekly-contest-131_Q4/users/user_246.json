{
    "username": "zhang-yuan-long",
    "submission": "\nconstexpr int maxn = 50010;\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        int n = min(50000, 3 * (int)queries.size()) + 10;\n        Init(1, 0, n);\n        for (auto& it : queries) {\n            if (it[0] == 1) {\n                s.insert(it[1]);\n                Set(1, 0, n, it[1]);\n            }\n            else {\n                ans.push_back(Qry(1, 0, n, 0, it[1], it[2]));\n            }\n        }\n        return ans;\n    }\n\n    bool Qry(int idx, int ll, int rr, int begin, int end, int sz) {\n        if (seg[idx] < sz) return false;\n        if (ll == begin && end == rr) return seg[idx] >= sz;\n\n        int mid = (ll + rr + 1) / 2;\n        if (end <= mid) return Qry(idx * 2, ll, mid, begin, end, sz);\n        if (begin >= mid) return Qry(idx * 2 + 1, mid, rr, begin, end, sz);\n\n\n        auto it = s.lower_bound(mid);\n\n        int l = it == s.begin() ? ll : * prev(it);\n        int r = it == s.end() ? rr : *it;\n\n        l = max(l, begin);\n        r = min(r, end);\n        if (r - l >= sz) return true;\n\n        return (Qry(idx * 2, ll, mid, begin, mid, sz) || Qry(idx * 2 + 1, mid, rr, mid, end, sz));\n    }\n\n    void Init(int idx, int ll, int rr) {\n        if (rr == ll + 1) {\n            seg[idx] = 1;\n            return;\n        }\n        int mid = (ll + rr + 1) / 2;\n        Init(idx * 2, ll, mid);\n        Init(idx * 2 + 1, mid, rr);\n        seg[idx] = rr - ll;\n    }\n\n    void Set(int idx, int ll, int rr, int pos) {\n        if (rr == ll + 1) {\n            return ;\n        }\n        int mid = (ll + rr + 1) / 2;\n        if (pos < mid) {\n            Set(idx * 2, ll, mid, pos);\n        }\n        else {\n            Set(idx * 2 + 1, mid, rr, pos);\n        }\n\n        auto it = s.lower_bound(mid);\n\n        int l = it == s.begin() ? ll : *prev(it);\n        int r = it == s.end() ? rr : *it;\n        l = max(l, ll);\n        r = min(r, rr);\n        seg[idx] = max(r - l, seg[idx * 2]);\n        seg[idx] = max(seg[idx], seg[idx * 2 + 1]);\n    }\n\n    set <int> s;\n\n    int seg[maxn * 4];\n\n};",
    "submit_ts": 1716651115.0
}