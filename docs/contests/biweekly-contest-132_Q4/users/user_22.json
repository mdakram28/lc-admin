{
    "username": "profchi",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n        \n        int [] max = new int [k + 1];\n        int [][] dp = new int [nums.length][k + 1];\n        \n        int [] def = new int [k + 1];\n        \n        Map<Integer, Integer> map = new HashMap<>();\n        \n        int idx, mx;\n        int [] cArr;\n        \n        int result = 0;\n        \n        for (int i = 0; i < nums.length; ++i) {\n            dp[i][k] = 1;\n            \n            for (int j = k - 1; j >= 0; --j) {\n                dp[i][j] = max[j + 1] + 1;\n            }\n            \n            idx = map.getOrDefault(nums[i], -1);\n            cArr = idx == -1 ? def : dp[idx];\n            \n            mx = 0;\n            \n            for (int j = k; j >= 0; --j) {\n                mx = Math.max(cArr[j] + 1, mx);\n                mx = Math.max(dp[i][j], mx);\n                \n                dp[i][j] = mx;\n                \n                max[j] = Math.max(max[j], mx);\n            }\n            \n            result = Math.max(mx, result);\n            \n            map.put(nums[i], i);\n        }\n        \n        \n        // System.out.println(Arrays.deepToString(dp));\n        \n        \n        return result;\n    }\n}",
    "submit_ts": "1717858779",
    "subm_id": "1281699749"
}