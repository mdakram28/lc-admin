{
    "username": "_kevinyang",
    "submission": "class Solution {\npublic:\n    struct Node{\n        long long v00,v01,v10,v11;\n    };\n    static Node merge(Node a, Node b){\n        long long v00 = max(a.v00+b.v10,a.v01+b.v00);\n        long long v01 = max({a.v01+b.v01,a.v00+b.v11,v00});\n        long long v10 = max({a.v10+b.v10,a.v11+b.v00,v00});\n        long long v11 = max({a.v11+b.v01,a.v10+b.v11,v00,v01,v10});\n        return Node{v00,v01,v10,v11};\n    }\n    struct SegTree{\n\tint size;\n\tvector<Node>arr;\n\tvoid init(int n){\n\t\tsize = 1;\n\t\twhile(size<n)size*=2;\n        arr.resize(size*2);\n\t\tfor(int i = 0; i<size*2; i++){\n            arr[i] = {0,0,0,0};\n        }\n\t}\n    \n\tvoid set(int i, int v, int x, int lx, int rx){\n\t\tif(rx-lx==1){\n\t\t\tarr[x] = {0,0,0,max(v,0)};\n\t\t\treturn;\n\t\t}\n\t\tint m = (lx+rx)/2;\n\t\tif(i<m){\n\t\t\tset(i,v,2*x+1,lx,m);\n\t\t}\n\t\telse{\n\t\t\tset(i,v,2*x+2,m,rx);\n\t\t}\n        arr[x] = merge(arr[2*x+1],arr[2*x+2]);\n\t}\n\tvoid set(int i,int v){\n\t\tset(i,v,0,0,size);\n\t}\n\tNode query(int l,int r, int x, int lx, int rx){\n\t\tif(lx>=r||l>=rx)return {0,0,0,0};\n\t\tif(lx>=l&&rx<=r)return arr[x];\n\t\tint m = (lx+rx)/2;\n\t\tNode s1 = query(l,r,2*x+1,lx,m);\n\t\tNode s2 = query(l,r,2*x+2,m,rx);\n\t\treturn merge(s1,s2);\n\t}\n\tNode query(int l, int r){\n\t\treturn query(l,r,0,0,size);\n\t}\n};\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        SegTree segtree;\n        int n = nums.size();\n        segtree.init(n+1);\n        for(int i = 0; i<n; i++){\n            segtree.set(i,nums[i]);\n        }\n        long long ans = 0;\n        const int mod = (int)1e9+7;\n        for(auto vec: queries){\n            int i = vec[0]; int v = vec[1];\n            segtree.set(i,v);\n            auto res = segtree.query(0,n);\n            ans+=res.v11;\n            ans%=mod;\n        }\n        return (int)ans;\n    }\n};",
    "submit_ts": 1716691912.0
}