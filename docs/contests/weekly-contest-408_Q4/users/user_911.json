{
    "username": "bronzekiller2017",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        adj = [[] for _ in range(len(circles)+4)]\n        #l, r, t, b = 0,1, 2, 3\n        \n        for i, c in enumerate(circles):\n            ind = i + 4\n            x, y, r = c\n            if x - r <= 0:\n                adj[0].append(ind)\n                adj[ind].append(0)\n            if x + r >= X:\n                adj[1].append(ind)\n                adj[ind].append(1)\n            if y - r <= 0:\n                adj[3].append(ind)\n                adj[ind].append(3)\n            if y + r >= Y:\n                adj[2].append(ind)\n                adj[ind].append(2)\n        \n        for i in range(len(circles)):\n            for j in range(i+1, len(circles)):\n                aind, bind = i+4, j+4\n                x1, y1, r1 = circles[i]\n                x2, y2, r2 = circles[j]\n                dist = (x1-x2)**2 + (y1-y2)**2\n                span = (r1+r2)**2\n                if span >= dist:\n                    adj[aind].append(bind)\n                    adj[bind].append(aind)\n\n        def dfs(start, end):\n            stack = [start]\n            visited = [False] * (len(circles) + 4)\n\n            while stack:\n                curr = stack.pop()\n                if curr == end:\n                    return True\n                if not visited[curr]:\n                    visited[curr] = True\n                    for neighbor in adj[curr]:\n                        if not visited[neighbor]:\n                            stack.append(neighbor)\n            return False\n\n        \n        for start, end in [(0, 1), (0, 3), (2, 3), (2, 1)]:\n            if dfs(start, end):\n                return False\n        \n        return True\n\n        \n        \n                \n                \n            \n                \n\n                \n        ",
    "submit_ts": "1722137444",
    "subm_id": "1335763985"
}