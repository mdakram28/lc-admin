{
    "username": "akshat_2k48",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> branches;\n    vector<pair<int, int>> end_positions;\n};\n\nclass PrefixTree {\npublic:\n    Node* base;\n\n    PrefixTree() {\n        base = new Node();\n    }\n\n    void addWord(const string& term, int idx, int value) {\n        Node* currentNode = base;\n        for (char ch : term) {\n            if (!currentNode->branches.count(ch)) {\n                currentNode->branches[ch] = new Node();\n            }\n            currentNode = currentNode->branches[ch];\n        }\n        currentNode->end_positions.push_back({idx, value});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> minCost(targetLength + 1, INT_MAX);\n        minCost[0] = 0;\n\n        PrefixTree prefixTree;\n        for (int i = 0; i < words.size(); ++i) {\n            prefixTree.addWord(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (minCost[i] == INT_MAX) {\n                continue;\n            }\n\n            Node* currentNode = prefixTree.base;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->branches.count(target[j])) {\n                    break;\n                }\n                currentNode = currentNode->branches[target[j]];\n                for (auto& pair : currentNode->end_positions) {\n                    int wordLength = words[pair.first].size();\n                    if (i + wordLength <= targetLength) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + pair.second);\n                    }\n                }\n            }\n        }\n\n        return minCost[targetLength] == INT_MAX ? -1 : minCost[targetLength];\n    }\n};\n\n",
    "submit_ts": "1720324034",
    "subm_id": "1312390032"
}