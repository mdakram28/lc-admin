{
    "username": "shrea231",
    "submission": "\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n            priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n    priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n    int hPieces = 1; // Initially, we have 1 horizontal piece\n    int vPieces = 1; // Initially, we have 1 vertical piece\n    long long totalCost = 0;\n\n    while (!hCuts.empty() || !vCuts.empty()) {\n        if (vCuts.empty() || (!hCuts.empty() && hCuts.top() > vCuts.top())) {\n            totalCost += hCuts.top() * vPieces;\n            hCuts.pop();\n            hPieces++;\n        } else {\n            totalCost += vCuts.top() * hPieces;\n            vCuts.pop();\n            vPieces++;\n        }\n    }\n\n    return totalCost;\n\n        \n    }\n};",
    "submit_ts": "1720925464",
    "subm_id": "1320255598"
}