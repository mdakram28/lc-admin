{
    "username": "a1pharooster",
    "submission": "class Solution {\npublic:\n    bool solve(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<vector<int>> temp(n + 4);\n        for (int i = 0; i < n; i++) {\n            if (c[i][0] <= c[i][2]) {\n                temp[n].push_back(i);\n                temp[i].push_back(n);\n            }\n            if (X - c[i][0] <= c[i][2]) {\n                temp[n + 2].push_back(i);\n                temp[i].push_back(n + 2);\n            }\n            if (c[i][1] <= c[i][2]) {\n                temp[n + 1].push_back(i);\n                temp[i].push_back(n + 1);\n            }\n            if (Y - c[i][1] <= c[i][2]) {\n                temp[n + 3].push_back(i);\n                temp[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double dist = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n                int radSum = c[i][2] + c[j][2];\n                if (radSum >= dist) {\n                    temp[i].push_back(j);\n                    temp[j].push_back(i);\n                }\n            }\n        }\n        int flag = 0;\n        return (max(max(flag, bfs(temp, n, n + 1, n + 2, n + 4)), bfs(temp, n + 3, n + 2, n + 1, n + 4))  == 0);\n    }\n\n    int bfs(vector<vector<int>>& adj, int start, int t1, int t2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        q.push(start);\n        vis[start] = true;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n\n            for (int v : adj[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return (vis[t1] || vis[t2] ? 1 : 0);\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return solve(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138495",
    "subm_id": "1335792242"
}