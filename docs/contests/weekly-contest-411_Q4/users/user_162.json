{
    "username": "H.Chen",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n\n        dp = [0] * n    # the leftest index ends here\n        l = cnt0 = cnt1 = 0\n        for r in range(n):\n            if s[r] == \"1\":\n                cnt1 += 1\n            else:\n                cnt0 += 1\n            while cnt1 > k and cnt0 > k:\n                if s[l] == \"1\":\n                    cnt1 -= 1\n                else:\n                    cnt0 -= 1\n                l += 1\n            dp[r] = l \n\n        sdp = [dp[0]]\n        for i in range(1, n):\n            sdp.append(sdp[-1] + dp[i])\n\n        def bs(l, r):\n            # binary search k: dp[k] >= l\n            a = l \n            b = r \n            while a <= b:\n                m = (a + b) // 2\n                if dp[m] < l:\n                    a = m + 1\n                else:\n                    b = m - 1\n            return a \n        \n        ans = []\n        for l, r in queries:\n            if l == r:\n                ans.append(1)\n                continue\n            k = bs(l, r)\n            x = (2 + l + r) * (1 + r - l) // 2\n            x -= (k - l) * l \n            if k <= r:\n                if k > 0:\n                    x -= sdp[r] - sdp[k-1]\n                else:\n                    x -= sdp[r]\n            ans.append(x)\n        return ans ",
    "submit_ts": "1723951418",
    "subm_id": "556405305"
}