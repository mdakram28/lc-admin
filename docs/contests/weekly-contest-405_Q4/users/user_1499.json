{
    "username": "Ayush_Singh021",
    "submission": "class Solution {\n   static class Node {\n        Node[] children = new Node[26];\n        boolean eow = false;  // end of word\n        List<int[]> words = new ArrayList<>();\n        int freq;\n\n        public Node() {\n            freq = 1;\n        }\n    }\n\n    public static Node root = new Node();\n\n    public void insertTrie(Node root, String word, int index, int cost) {\n        Node curr = root;\n        for (int level = 0; level < word.length(); level++) {\n            int idx = word.charAt(level) - 'a';\n            if (curr.children[idx] == null) {\n                curr.children[idx] = new Node();\n            } else {\n                curr.children[idx].freq++;\n            }\n            curr = curr.children[idx];\n        }\n        curr.eow = true;\n        curr.words.add(new int[]{index, cost});\n    }\n\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        Node root = new Node();\n        //insert\n        for (int i = 0; i < words.length; i++) {\n            insertTrie(root, words[i], i, costs[i]);\n        }\n\n        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));\n        pq.offer(new int[]{0, 0});\n        while (!pq.isEmpty()) {\n            int[] current = pq.poll();\n            int pos = current[0], cost = current[1];\n\n            if (cost > dp[pos]) continue;\n\n            Node node = root;\n            for (int i = pos; i < n; i++) {\n                int idx = target.charAt(i) - 'a';\n                if (node.children[idx] == null) break;\n                node = node.children[idx];\n\n                for (int[] wordData : node.words) {\n                    int nextPos = i + 1;\n                    int newCost = cost + wordData[1];\n                    if (newCost < dp[nextPos]) {\n                        dp[nextPos] = newCost;\n                        pq.offer(new int[]{nextPos, newCost});\n                    }\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720324331",
    "subm_id": "1312396941"
}