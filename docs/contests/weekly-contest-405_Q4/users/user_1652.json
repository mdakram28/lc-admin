{
    "username": "mekashish",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int min_cost;\n    \n    TrieNode() : min_cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->min_cost = min(node->min_cost, cost);\n    }\n    \n    int getMinCost(string& target) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                if (!node->children.count(ch)) {\n                    break; \n                }\n                node = node->children[ch];\n                \n\n                if (dp[i] != INT_MAX && node->min_cost != INT_MAX) {\n                    if (dp[i] > INT_MAX - node->min_cost) {\n                        dp[j + 1] = INT_MAX; \n                    } else {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + node->min_cost);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        \n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n\n        return trie.getMinCost(target);\n    }\n};",
    "submit_ts": "1720323217",
    "subm_id": "1312370212"
}