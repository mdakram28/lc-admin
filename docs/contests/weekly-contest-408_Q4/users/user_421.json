{
    "username": "ShikiNatsume",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[Tuple[int, int, int]]) -> bool:\n        def bfs(g, st, t1, t2, nodes):\n            q = deque([st])\n            vis = [False] * (nodes + 4)\n            vis[st] = True\n\n            while q:\n                u = q.popleft()\n                for v in g[u]:\n                    if not vis[v]:\n                        q.append(v)\n                        vis[v] = True\n\n            return vis[t1] or vis[t2]\n\n        n = len(circles)\n        g = [[] for _ in range(n + 4)]\n        for i in range(n):\n            cx, cy, r = circles[i]\n            if cx <= r:\n                g[n].append(i)\n                g[i].append(n)\n            if X - cx <= r:\n                g[n + 2].append(i)\n                g[i].append(n + 2)\n            if cy <= r:\n                g[n + 1].append(i)\n                g[i].append(n + 1)\n            if Y - cy <= r:\n                g[n + 3].append(i)\n                g[i].append(n + 3)\n            for j in range(i + 1, n):\n                cx2, cy2, r2 = circles[j]\n                distance = sqrt((cx - cx2) ** 2 + (cy - cy2) ** 2)\n                rsum = r + r2\n                if rsum >= distance:\n                    g[i].append(j)\n                    g[j].append(i)\n        res = bfs(g, n, n + 1, n + 2, n + 4) or bfs(g, n + 3, n + 1, n + 2, n + 4)\n        return not res\n",
    "submit_ts": "1722137074",
    "subm_id": "1335753386"
}