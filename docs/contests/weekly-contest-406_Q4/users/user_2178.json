{
    "username": "yuvisai123",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        long yans = 0,total = 0;\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n        int hzntl = 1, vert = 1,i = 0, j = 0;\n        while (i < hCuts.length && j < vCuts.length) {\n            if (hCuts[i] > vCuts[j]) {\n                yans += (long) hCuts[i] * vert;\n                hzntl++;\n                i++;\n            } else {\n                yans += (long) vCuts[j] * hzntl;\n                vert++;\n                j++;\n            }\n        }\n        while (i < hCuts.length) {\n            total += hCuts[i];\n            i++;\n        }\n        yans += total * vert;\n        total = 0;\n        while (j < vCuts.length) {\n            total += vCuts[j];\n            j++;\n        }\n        yans += total * hzntl;\n        return yans;\n    }\n}\n",
    "submit_ts": "1720926377",
    "subm_id": "1320284410"
}