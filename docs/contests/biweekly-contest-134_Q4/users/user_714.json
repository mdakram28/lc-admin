{
    "username": "spaded06543",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        ans = 0\n        def getBit(val) -> int:\n            for _ in range(32):\n                yield val & 1\n                val >>= 1\n        def getVal(bitArr, size) -> int:\n            if size == 0:\n                return 0\n            ret = 0\n            for bitCount in reversed(bitArr):\n                ret <<= 1\n                if bitCount == size:\n                    ret += 1\n            return ret\n        def getCount(arr) -> int:\n            bitArr = [0] * 32\n            count = 0\n            left = 0\n            for right in range(len(arr)):\n                for idx, bit in enumerate(getBit(arr[right])):\n                    bitArr[idx] += bit\n                while left <= right and getVal(bitArr, right - left + 1) == k:\n                    count += len(arr) - right\n                    for idx, bit in enumerate(getBit(arr[left])):\n                        bitArr[idx] -= bit\n                    left += 1\n                \n            return count\n        \n        candidateArr = []\n        for val in nums:\n            if (val & k) == k:\n                candidateArr.append(val)\n            else:\n                if candidateArr:\n                    ans += getCount(candidateArr)\n                    candidateArr.clear()\n        if candidateArr:\n            ans += getCount(candidateArr)\n            candidateArr.clear()\n        return ans",
    "submit_ts": "1720280392",
    "subm_id": "1311787689"
}