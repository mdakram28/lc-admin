{
    "username": "gourabsingha2",
    "submission": "#define ll long long\nconst int M = 1e9 + 7;\nconst int MAX_N = 400;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mp;\n        for (int i = 0; i < requirements.size(); i++)\n        {\n            mp[requirements[i][0] + 1] = requirements[i][1]; \n        }\n        vector<vector<ll>> dp(n + 1, vector<ll>(MAX_N + 1, 0));\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; i++)\n        {\n            for (int j = 0; j <= MAX_N; j++)\n            {\n                for (int k = 0; k < i; k++)\n                {\n                    int previousInversions = j - k;\n                    if (previousInversions >= 0) {\n                        dp[i][j] = (dp[i][j] + dp[i - 1][previousInversions]) % M;\n                    }\n                }\n            }\n\n            if (mp.count(i) > 0) {\n                int requiredInversions = mp[i], cur = 0;\n                while (cur <= MAX_N) {\n                    if (cur != requiredInversions) {\n                        dp[i][cur] = 0;\n                    }\n                    cur++;\n                }\n            }\n        }\n\n        ll res = 0, cur = 0;\n        while (cur <= MAX_N) {\n            res = (res + dp[n][cur++]) % M;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1719071327",
    "subm_id": "1296844252"
}