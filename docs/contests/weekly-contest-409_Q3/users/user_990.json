{
    "username": "abeehimr",
    "submission": "class Node:\n    def __init__(self,v,n = None):\n        self.v = v\n        self.next = n\n        self.off = False\n\nclass LL:\n    def __init__(self,n):\n        self.h = {}\n        c = Node(0)\n        self.h[0] = c\n        for i in range(1,n):\n            c.next = Node(i)\n            c = c.next\n            self.h[i] = c\n        self.length = n-1\n\n    def rmv(self,x,y):\n        h = c = self.h[x]\n        cnt = 0\n        while c.next.v != y:\n            cnt += 1\n            c = c.next\n            c.off = True\n            if not c.next or c.next.off: return\n        h.next = c.next\n        c.next = None\n        self.length -= cnt\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        l = LL(n)\n        out = []\n        for u,v in queries:\n            l.rmv(u,v)\n            out.append(l.length)\n        return out",
    "submit_ts": "1722743155",
    "subm_id": "1343785620"
}