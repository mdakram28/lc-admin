{
    "username": "vijaykatta3094",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = sys.maxsize  # Initialize cost with a large number\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)  # Store the minimum cost at the end node\n    \n    def search(self, target, start, dp):\n        node = self.root\n        for i in range(start, len(target)):\n            if target[i] not in node.children:\n                return\n            node = node.children[target[i]]\n            if node.cost != sys.maxsize:\n                dp[i + 1] = min(dp[i + 1], dp[start] + node.cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        dp = [sys.maxsize] * (len(target) + 1)\n        dp[0] = 0\n        \n        for i in range(len(target)):\n            if dp[i] != sys.maxsize:\n                trie.search(target, i, dp)\n        \n        return dp[len(target)] if dp[len(target)] != sys.maxsize else -1",
    "submit_ts": "1720321066",
    "subm_id": "1312312497"
}