{
    "username": "Chandrachur",
    "submission": "struct Node {\n    int andVal;\n    Node() {\n        andVal = ~0;\n    }\n    Node(int val) {\n        andVal = val;\n    }\n};\n\nNode merge(Node a, Node b) {\n    Node res;\n    res.andVal = a.andVal & b.andVal;\n    return res;\n}\n\nclass SegmentTree {\npublic:\n    vector<Node> t;\n    int n;\n\n    void build(vector<int> &arr, int id, int l, int r) {\n        if(l == r) {\n            t[id] = Node(arr[l]);\n            return;\n        }\n        int mid = (l + r) / 2;\n        build(arr, id * 2, l, mid);\n        build(arr, id * 2 + 1, mid + 1, r);\n        t[id] = merge(t[2 * id], t[2 * id + 1]);\n    }\n    Node query(int id, int l, int r, int lq, int rq) {\n        if(l > rq || lq > r) {\n            return Node();\n        }\n        if(lq <= l && r <= rq) {\n            return t[id];\n        }\n        int mid = (l + r) / 2;\n        Node res = merge(query(2 * id, l, mid, lq, rq), query(2 * id + 1, mid + 1, r, lq, rq));\n        return res;\n    }\n    SegmentTree(vector<int> &arr) {\n        n = arr.size();\n        t.resize(4 * n);\n        build(arr, 1, 0, n - 1);\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long res = 0;\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        \n        for(int i = 0; i < n; i++) {\n            int l1 = -1, l2 = -1;\n            \n            int s = i;\n            int e = n - 1;\n            while(s <= e) {\n                int mid = (s + e) / 2;\n                Node node = segTree.query(1, 0, n - 1, i, mid);\n                int andVal = node.andVal;\n                if(andVal == k) {\n                    l1 = mid;\n                    e = mid - 1;\n                } else if(andVal > k) {\n                    s = mid + 1;\n                } else {\n                    e = mid - 1;\n                }\n            }\n            \n            s = i;\n            e = n - 1;\n            while(s <= e) {\n                int mid = (s + e) / 2;\n                Node node = segTree.query(1, 0, n - 1, i, mid);\n                int andVal = node.andVal;\n                if(andVal == k) {\n                    l2 = mid;\n                    s = mid + 1;\n                } else if(andVal > k) {\n                    s = mid + 1;\n                } else {\n                    e = mid - 1;\n                }\n            }\n            \n            if(l1 != -1) {\n                res += (l2 - l1 + 1);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720279512",
    "subm_id": "1311754190"
}