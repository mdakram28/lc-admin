{
    "username": "Anchal_2016",
    "submission": "class TNode {\npublic:\n    unordered_map<char, TNode*> children;\n    int cost;\n    \n    TNode() : cost(INT_MAX) {}\n};\n\nclass Node {\npublic:\n    TNode* root;\n    \n    Node() {\n        root = new TNode();\n    }\n    \n    void rec(const string& word, int cost) {\n        TNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Node trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.rec(words[i], costs[i]);\n        }\n        \n        vector<int> ans(n + 1, INT_MAX);\n        ans[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (ans[i] == INT_MAX) continue;\n            TNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    ans[j + 1] = min(ans[j + 1], ans[i] + node->cost);\n                }\n            }\n        }\n        \n        return ans[n] == INT_MAX ? -1 : ans[n];\n    }\n};",
    "submit_ts": "1720323276",
    "subm_id": "1312371655"
}