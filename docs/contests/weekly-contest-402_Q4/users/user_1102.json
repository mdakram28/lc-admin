{
    "username": "ks811489",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> l = new ArrayList<>();\n        SegmentTree d = new SegmentTree(nums,nums.length);\n        for(int i[] : queries){\n            if(i[0]==1){\n                l.add( d.getSumUtil(0,nums.length-1,i[1]+1,i[2]-1, 0) );\n            }else{\n                d.updateValue(nums.length,i[1],i[2]);\n                if(i[1]!=0){\n                    d.updateValue(nums.length,i[1]-1,d.brr[i[1]-1]);\n                }\n                if(i[1]!=nums.length-1){\n                    d.updateValue(nums.length,i[1]+1,d.brr[i[1]+1]);\n                }\n            }\n        }\n        return l;\n    }\n}\npublic class SegmentTree \n{\n\tint st[]; \n    int brr[] ;\n\tSegmentTree(int arr[], int n)\n\t{\n\t\tint x = (int) (Math.ceil(Math.log(n) / Math.log(2)));\n\t\tint max_size = 2 * (int) Math.pow(2, x) - 1;\n        brr = new int[n];\n        for(int i =0 ;i <n;i++){\n            brr[i] = arr[i];\n        }\n\t\tst = new int[max_size]; // Memory allocation\n\n\t\tconstructSTUtil(arr, 0, n - 1, 0);\n\t}\n\n\tint getMid(int s, int e) {\n\t\treturn s + (e - s) / 2;\n\t}\n\n\tint getSumUtil(int ss, int se, int qs, int qe, int si)\n\t{\n\t\tif (qs <= ss && qe >= se)\n\t\t\treturn st[si];\n\n\t\t// If segment of this node is outside the given range\n\t\tif (se < qs || ss > qe)\n\t\t\treturn 0;\n\n\t\t// If a part of this segment overlaps with the given range\n\t\tint mid = getMid(ss, se);\n\t\treturn getSumUtil(ss, mid, qs, qe, 2 * si + 1) +\n\t\t\t\tgetSumUtil(mid + 1, se, qs, qe, 2 * si + 2);\n\t}\n\n\tvoid updateValueUtil(int ss, int se, int i, int diff, int si)\n\t{\n\t\tif (i < ss || i > se)\n\t\t\treturn;\n        \n        if (ss == se) {\n            brr[i]= diff;\n            int ans =0;\n\t\t\tif(ss == 0 || ss==brr.length-1){\n                \n            }else{\n                if(brr[ss]>brr[ss-1] && brr[ss]>brr[ss+1]){\n                    ans++;\n                }\n            }\n\t\t\tst[si] = ans;\n            return;\n\t\t}\n        \n        int mid = getMid(ss, se);\n        updateValueUtil(ss, mid, i, diff, 2 * si + 1);\n        updateValueUtil(mid + 1, se, i, diff, 2 * si + 2);\n        \n\t\tst[si] = st[si*2+1]+st[si*2+2];\n            \n\t\t\n\t}\n\n\t// The function to update a value in input array and segment tree.\n// It uses updateValueUtil() to update the value in segment tree\n\tvoid updateValue( int n, int i, int new_val)\n\t{\n\t\t\n\n\t\tbrr[i] = new_val;\n\n\t\tupdateValueUtil(0, n - 1, i, new_val, 0);\n\t}\n\n\tint getSum(int n, int qs, int qe)\n\t{\n\t\t\n\t\treturn getSumUtil(0, n - 1, qs, qe, 0);\n\t}\n\tint constructSTUtil(int arr[], int ss, int se, int si)\n\t{\n\t\tif (ss == se) {\n            int ans =0;\n\t\t\tif(ss == 0 || ss==arr.length-1){\n                \n            }else{\n                if(arr[ss]>arr[ss-1] && arr[ss]>arr[ss+1]){\n                    ans++;\n                }\n            }\n\t\t\treturn st[si] = ans;\n\t\t}\n\n\t\tint mid = getMid(ss, se);\n\t\tst[si] = constructSTUtil(arr, ss, mid, si * 2 + 1) +\n\t\t\t\tconstructSTUtil(arr, mid + 1, se, si * 2 + 2);\n\t\treturn st[si];\n\t}\n\n}\n",
    "submit_ts": "1718509240",
    "subm_id": "1289703156"
}