{
    "username": "antpro0424",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def MaxDist(A):\n            N = len(A)\n            # Initialize vectors to store the transformed coordinates\n            V = [0 for i in range(N)]\n            V1 = [0 for i in range(N)]\n\n            # Populate the vectors with transformed coordinates\n            for i in range(N):\n                V[i] = (A[i][0] + A[i][1], i)  # Store the value and the original index\n                V1[i] = (A[i][0] - A[i][1], i)  # Store the value and the original index\n\n            # Sort the vectors based on the transformed coordinates\n            V.sort()\n            V1.sort()\n\n            # Find the maximum distance and the indices of the corresponding points\n            max_diff_V = V[-1][0] - V[0][0]\n            max_diff_V1 = V1[-1][0] - V1[0][0]\n\n            # Determine the maximum distance and the indices of the points that produce it\n            if max_diff_V > max_diff_V1:\n                maximum = max_diff_V\n                indices = (V[0][1], V[-1][1])\n            else:\n                maximum = max_diff_V1\n                indices = (V1[0][1], V1[-1][1])\n\n            # Return the maximum distance and the indices of the points\n            return maximum, indices\n        \n        mx, idxs = MaxDist(points)\n        return min(MaxDist(points[:idxs[0]] + points[idxs[0] + 1:])[0], MaxDist(points[:idxs[1]] + points[idxs[1] + 1:])[0])"
}