{
    "username": "Mari0",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        SegmentTree tree = new SegmentTree(nums);\n        int res = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (tree.query(0, 0, n - 1, i, mid) >= k) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            if (l != i - 1) {\n                res = Math.min(res, Math.abs(tree.query(0, 0, n - 1, i, l) - k));\n            }\n            res = Math.min(res, Math.abs(tree.query(0, 0, n - 1, i, r) - k));\n        }\n\n        return res;\n\n    }\n}\n\nclass SegmentTree {\n    int[] tree;\n    int n;\n\n    SegmentTree(int[] arr) {\n        n = arr.length;\n        tree = new int[4 * n];\n        build(arr, 0, 0, n - 1);\n    }\n\n    public void build(int[] arr, int node, int s, int e) {\n        if (s == e) {\n            tree[node] = arr[s];\n        } else {\n            int m = (e - s) / 2 + s;\n            build(arr, 2 * node + 1, s, m);\n            build(arr, 2 * node + 2, m + 1, e);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    public int query(int node, int s, int e, int l, int r) {\n        if (r < s || e < l) {\n            return Integer.MAX_VALUE;\n        }\n        if (l <= s && e <= r) {\n            return tree[node];\n        }\n\n        int m = (e - s) / 2 + s;\n        int q0 = query(2 * node + 1, s, m, l, r);\n        int q1 = query(2 * node + 2, m + 1, e, l, r);\n        return q0 & q1;\n    }\n\n}",
    "submit_ts": 1717300724.0
}