{
    "username": "Wasi_Ur",
    "submission": "class Solution {\npublic:\n\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(),horizontalCut.end());\n      reverse(horizontalCut.begin(),horizontalCut.end());\n      sort(verticalCut.begin(),verticalCut.end());\n      reverse(verticalCut.begin(),verticalCut.end());\n\n      int i = 0,j = 0;\n      long long ans = 0,p = 1,q = 1;\n      while (i < horizontalCut.size() and j < verticalCut.size()) {\n        if (verticalCut[j] > horizontalCut[i]) {\n          ans += (1LL * verticalCut[j++] * p);\n          q++;\n        } else {\n          ans += (1LL * horizontalCut[i++] * q);\n          p++;\n        }\n      }\n      while (i < horizontalCut.size()) {\n        ans += (1LL * horizontalCut[i++] * q);\n      }\n      while (j < verticalCut.size()) {\n        ans += (1LL * verticalCut[j++] * p);\n      }\n      return ans;\n    }\n};",
    "submit_ts": "1720925949",
    "subm_id": "1320271324"
}