{
    "username": "wixton",
    "submission": "class Solution {\npublic:\n    #define ll long long int\n    int BITSIZE = 33;\n    int getAND(vector<vector<ll>> &ar, int l, int r) {\n        int num = 0;\n        for(int i = 0; i < BITSIZE; i++) {\n            if(ar[r][i] - ar[l-1][i] == (r - l + 1)) {\n                num += (1ll << i);\n            }\n        }\n        return num;\n        \n    }\n    int minimumDifference(vector<int>& ar, int k) {\n        int res = INT_MAX;\n        for(int i : ar) {\n            res = min(res, abs(k - i));\n        }\n        int n = ar.size();\n        vector<vector<ll>> dp(n+1, vector<ll> (BITSIZE));\n        for(int i = 1; i <= n; i++) {\n            int d = ar[i-1];\n            for(int j = 0; j < BITSIZE; j++) {\n                if(d & (1ll << j)) {\n                    dp[i][j] += dp[i-1][j] + 1;\n                }\n                else dp[i][j] = dp[i-1][j];\n            }\n        }\n        int l = 1, r = 1, num;\n        while(r <= n) {\n            num = getAND(dp, l, r);\n            // cout << num << \" \" << l << \" \" << r << endl;\n            res = min(res, abs(k - num));\n            while(num < k && l < r) {\n                l++;\n                num = getAND(dp, l, r);\n                res = min(res, abs(k - num));\n            }\n            // cout << num << \" \" << l << \" \" << r << endl;\n            res = min(res, abs(k - num));\n            r++;\n        }\n        r = n;\n        while(l <= n) {\n            num = getAND(dp, l, r);\n            res = min(res, abs(k - num));\n            l++;\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299687.0
}