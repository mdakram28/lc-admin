{
    "username": "Rising_star6",
    "submission": "class SegmentTree {\npublic:\n    std::vector<int> tree;\n    int n;\n\n    SegmentTree(std::vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(std::vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& arr, int k) {\n        int n = arr.size();\n    SegmentTree st(arr);\n    int ans = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        int left = i - 1, right = n - 1, mid;\n        while (right - left > 1) {\n            mid = (left + right) / 2;\n            if (st.query(i, mid) >= k)\n                left = mid;\n            else\n                right = mid;\n        }\n        if (left != i - 1)\n            ans = std::min(ans, std::abs(st.query(i, left) - k));\n        ans = std::min(ans, std::abs(k - st.query(i, right)));\n    }\n    return ans;\n    }\n};",
    "submit_ts": 1717298287.0
}