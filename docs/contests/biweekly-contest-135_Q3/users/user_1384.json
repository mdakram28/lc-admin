{
    "username": "crusifixx",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> diffToMaxValueMap = new HashMap<>();\n        List<Integer> maxValueList = new ArrayList<>();\n        int n = nums.length;\n        \n        for (int i = 0; i < n / 2; i++) {\n            int leftValue = nums[i];\n            int rightValue = nums[n - i - 1];\n            int difference = Math.abs(leftValue - rightValue);\n            int maxValueInRange = Math.max(Math.max(leftValue, rightValue), Math.max(k - leftValue, k - rightValue));\n            diffToMaxValueMap.computeIfAbsent(difference, d -> new ArrayList<>()).add(maxValueInRange);\n            maxValueList.add(maxValueInRange);\n        }\n        \n        int minChanges = n;\n        Collections.sort(maxValueList);\n        \n        for (Map.Entry<Integer, List<Integer>> entry : diffToMaxValueMap.entrySet()) {\n            int difference = entry.getKey();\n            int changesForDifference = lowerBound(maxValueList, difference);\n            changesForDifference = changesForDifference * 2 + (n / 2 - changesForDifference);\n            \n            for (int maxValue : entry.getValue()) {\n                changesForDifference -= (maxValue < difference) ? 2 : 1;\n            }\n            \n            minChanges = Math.min(minChanges, changesForDifference);\n        }\n        \n        return minChanges;\n    }\n    \n    private int lowerBound(List<Integer> list, int target) {\n        int left = 0;\n        int right = list.size();\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (list.get(mid) < target) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n}\n",
    "submit_ts": "1721489430",
    "subm_id": "1327453024"
}