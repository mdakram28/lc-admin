{
    "username": "Buek",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        int m = sizeof(int) * 8;\n\n        vector<vector<long long>> dp;\n        for (int i = 0; i < n; ++i) {\n            dp.emplace_back();\n            dp[i].assign(m, 0);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                bool hasJBit = (nums[i] & (1 << j)) != 0;\n                if (hasJBit) {\n                    dp[i][j] = (i > 0) ? dp[i - 1][j] + 1 : 1;\n                }\n            }\n        }\n\n        long long result = 0;\n        for (int i = 0; i < n; ++i) {\n            long long hasKBitsMin = i + 1;\n            long long hasUnneededBitsMax = 0;\n            for (int j = 0; j < m; ++j) {\n                bool kHasJBit = (k & (1 << j)) != 0;\n                if (kHasJBit) {\n                    hasKBitsMin = min(hasKBitsMin, dp[i][j]);\n                } else {\n                    hasUnneededBitsMax = max(hasUnneededBitsMax, dp[i][j]);\n                }\n            }\n            if (hasKBitsMin > hasUnneededBitsMax) {\n                result += (hasKBitsMin - hasUnneededBitsMax);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": "1720281004",
    "subm_id": "1311809727"
}