{
    "username": "sarthak10092003",
    "submission": "class Solution {\npublic:\n    vector<int> seg;\n    vector<int> a;\n    int n = 0;\n\n    void build(int ind, int low, int high) {\n        if (low == high) {\n            seg[ind] = isPeak(low) ? 1 : 0;\n            return;\n        }\n        int mid = (low + high) / 2;\n        build(2 * ind + 1, low, mid);\n        build(2 * ind + 2, mid + 1, high);\n        seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n    }\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return a[i] > a[i - 1] && a[i] > a[i + 1];\n    }\n\n    int query(int ind, int low, int high, int l, int r) {\n        if (low >= l && high <= r) {\n            return seg[ind];\n        }\n        if (high < l || low > r) {\n            return 0;\n        }\n        int mid = (low + high) / 2;\n        int left = query(2 * ind + 1, low, mid, l, r);\n        int right = query(2 * ind + 2, mid + 1, high, l, r);\n        return left + right;\n    }\n\n    void update(int ind, int low, int high, int node) {\n        if (low == high) {\n            seg[ind] = isPeak(node) ? 1 : 0;\n        } else {\n            int mid = (low + high) / 2;\n            if (node <= mid) {\n                update(2 * ind + 1, low, mid, node);\n            } else {\n                update(2 * ind + 2, mid + 1, high, node);\n            }\n            seg[ind] = seg[2 * ind + 1] + seg[2 * ind + 2];\n        }\n    }\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> ans;\n        a = nums;\n        n = nums.size();\n        seg.resize(4 * n + 1, 0);\n        build(0, 0, n - 1);\n        \n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                if (l == r || l > r) {\n                    ans.push_back(0);\n                } else {\n                    ans.push_back(query(0, 0, n - 1, l + 1, r - 1));\n                }\n            } else if (q[0] == 2) {\n                int index = q[1], val = q[2];\n                a[index] = val;\n                if (index > 0) update(0, 0, n - 1, index - 1);\n                update(0, 0, n - 1, index);\n                if (index < n - 1) update(0, 0, n - 1, index + 1);\n            }\n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": 1718508317.0
}