{
    "username": "Hina25",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n           Map<Integer, List<Integer>> map = new HashMap<>();\n        List<Integer> list = new ArrayList<>();\n        int n = nums.length;\n        \n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int diff = Math.abs(a - b);\n            int X = Math.max(Math.max(a, b), Math.max(k - a, k - b));\n            map.computeIfAbsent(diff, x -> new ArrayList<>()).add(X);\n            list.add(X);\n        }\n        \n        int ans = n;\n        Collections.sort(list);\n\n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int diff = entry.getKey();\n            int T = lowerBound(list, diff) * 2 + (n / 2 - lowerBound(list, diff));\n\n            for (int X : entry.getValue()) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, T);\n        }\n        \n        return ans;\n    }\n    \n    private int lowerBound(List<Integer> v, int key) {\n        int lo = 0, hi = v.size();\n        while (lo < hi) {\n            int mid = (lo + hi) / 2;\n            if (v.get(mid) < key) {\n                lo = mid + 1;\n            } else {\n                hi = mid;\n            }\n        }\n        return lo;\n    \n    }\n}",
    "submit_ts": "1721489520",
    "subm_id": "1327455769"
}