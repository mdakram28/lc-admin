{
    "username": "asmitpapney",
    "submission": "class Solution {\npublic:\n    \n    unordered_map<int,unordered_map<int,unordered_map<bool,int>>> M ;\n    \n    int Solve(int k, int curr, int jump, bool lastMinus){\n        int Ans = 0 ;\n        if(curr==k){\n            Ans++; \n        }\n        \n        if(M[curr][jump].count(lastMinus)){\n            return M[curr][jump][lastMinus] ;\n        }\n\n        if(lastMinus==false && curr!=0){\n            Ans = Ans + Solve(k, curr-1, jump, true);\n        }\n        \n        if(curr+pow(2,jump) <= k+5){\n            Ans = Ans + Solve(k, curr+pow(2,jump), jump+1, false) ;\n        }\n        \n        return M[curr][jump][lastMinus] = Ans; \n    }\n    \n    int waysToReachStair(int k) {\n//         queue<pair<long,pair<int,bool>> >Q ; // current, jump, last -1?\n        \n//         int Ans = 0 ;\n//         Q.push({1,{0,false}}) ;\n        \n//         while(!Q.empty()){\n            \n//             long current = Q.front().first;\n//             int jump = Q.front().second.first; \n//             bool lastDown = Q.front().second.second ;\n//             Q.pop();\n            \n//             if(current==k){\n//                 Ans++;\n//             }\n            \n//             if(lastDown==false && current!=0) {\n//                 Q.push({current-1,{jump,true}}) ;\n//             }\n            \n//             long nextCurrent = current + pow(2,jump) ;\n//             if(nextCurrent <= k){\n//                 Q.push({nextCurrent,{jump+1,false}}) ;\n//             }\n//         }\n        \n//         cout<<\"k = \"<<k<<\" Ans = \"<<Ans<<endl; \n//         return Ans; \n        return Solve(k,1,0,false) ;\n    }\n    \n};",
    "submit_ts": 1716089128.0
}