{
    "username": "relaxed-archimedesfr8",
    "submission": "class Solution {\n        public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n            int shukuai=1,hengkuai=1;\n            long res=0;\n            Queue<Integer> queueH=new PriorityQueue<>((x, y)->(y-x)),queueV=new PriorityQueue<>((x, y)->(y-x));\n            for(int h:horizontalCut){\n                queueH.offer(h);\n            }\n            for(int v:verticalCut){\n                queueV.offer(v);\n            }\n            while(queueH.isEmpty()==false||queueV.isEmpty()==false){\n                int x=queueH.isEmpty()?0:queueH.peek(),y=queueV.isEmpty()?0:queueV.peek();\n                if(x>y){\n                    ++hengkuai;\n                    queueH.poll();\n                    res+=x*shukuai;\n                }else{\n                    ++shukuai;\n                    queueV.poll();\n                    res+=y*hengkuai;\n                }\n            }\n            return res;\n        }\n}",
    "submit_ts": "1720925921",
    "subm_id": "546442856"
}