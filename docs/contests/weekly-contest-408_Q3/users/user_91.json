{
    "username": "lwm7708",
    "submission": "#include <algorithm>\n#include <numeric>\n#include <string>\n#include <vector>\n\nclass Solution {\n\npublic:\n\n    auto numberOfSubstrings(std::string s) {\n\n        auto lens = std::vector<int>(1);\n        auto num_strs = 0;\n        const auto s_sz = static_cast<int>(std::size(s));\n\n        lens.reserve(s_sz);\n\n        for (auto x : s) {\n            if (x == '0') {\n                lens.emplace_back();\n            } else {\n                ++lens.back();\n            }\n        }\n\n        for (auto x : lens) {\n            num_strs += (x + 1) * x / 2;\n        }\n\n        const auto lens_sz = static_cast<int>(std::size(lens));\n        auto pfxs = lens;\n\n        std::partial_sum(std::begin(pfxs), std::end(pfxs), std::begin(pfxs));\n\n        for (auto i = 1; i * i <= s_sz; ++i) {\n            for (auto j = 1; j <= lens_sz - i; ++j) {\n                const auto amt = lens[j - 1] + lens[j + i - 1];\n                const auto need = std::max(i * i - (pfxs[j + i - 2] - pfxs[j - 1]), 0);\n                if (amt >= need) {\n                    const auto getSum = [](long long bnd) {\n                        return (bnd + 1) * bnd / 2;\n                    };\n                    num_strs -= getSum(std::max(lens[j - 1] - need, 0));\n                    num_strs -= getSum(std::max(lens[j + i - 1] - need, 0));\n                    num_strs += getSum(amt - need + 1);\n                }\n            }\n        }\n\n        return num_strs;\n\n    }\n\n};\n",
    "submit_ts": "1722137161",
    "subm_id": "1335755902"
}