{
    "username": "kunal0612",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumDifference(vector<int> &nums, int k)\n    {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int answer = INT_MAX;\n        for (int i = 0; i < n; i++)\n        {\n            int left = i - 1, right = n - 1, mid;\n            while (left<=right)\n            {\n                mid = (left + right) / 2;\n                if (st.query(i, mid) >= k)\n                    left = mid+1;\n                else\n                    right = mid-1;\n            }\n            if (left != i - 1) answer = min(answer, abs(st.query(i, left) - k));\n            answer = min(answer, abs(k - st.query(i, right)));\n        }\n        return answer;\n    }\n};",
    "submit_ts": 1717298887.0
}