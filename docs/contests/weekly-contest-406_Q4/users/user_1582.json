{
    "username": "sarthak189",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<pair<int, bool>> cuts;\n\n        for (int i = 0; i < m - 1; ++i) {\n            cuts.push({horizontalCut[i], true});\n        }\n\n        for (int j = 0; j < n - 1; ++j) {\n            cuts.push({verticalCut[j], false});\n        }\n\n        long long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        while (!cuts.empty()) {\n            auto [cost, isHorizontal] = cuts.top();\n            cuts.pop();\n\n            if (isHorizontal) {\n                totalCost += static_cast<long long>(cost) * verticalPieces;\n                ++horizontalPieces;\n            } else {\n                totalCost += static_cast<long long>(cost) * horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926340",
    "subm_id": "1320283284"
}