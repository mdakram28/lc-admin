{
    "username": "learncode8888",
    "submission": "class Tries:\n    def __init__(self):\n        self.children={}\n        self.cost = math.inf\n    \n    def insert(self,word: str, cost:int) -> None:\n        cur = self\n        for ch in word:\n            if ch in cur.children:\n                cur = cur.children[ch]\n            else:\n                tmp = Tries()\n                cur.children[ch] = tmp\n                cur = cur.children[ch]\n        cur.cost = min(cur.cost, cost)\n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Tries()\n        for w, c in zip(words, costs):\n            root.insert(w, c)\n        n = len(target)\n        # use dfs\n        @cache\n        def dfs(i:int) -> int: # cost from index i\n            if i==n:\n                return 0\n            ret = math.inf\n            # from i -> next\n            cur = root\n            for j in range(i, n):\n                if target[j] in cur.children:\n                    cur = cur.children[target[j]]\n                    if cur.cost != math.inf:\n                        ret = min(ret, cur.cost+dfs(j+1))\n                else:\n                    break\n            return ret\n        \n        ans = dfs(0)\n        dfs.cache_clear()\n        return -1 if ans==math.inf else ans\n\n        ",
    "submit_ts": "1720321918",
    "subm_id": "1312335775"
}