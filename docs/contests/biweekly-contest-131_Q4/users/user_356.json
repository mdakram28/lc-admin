{
    "username": "yuzining",
    "submission": "/**\n * @author yuzining\n * @date 2024/05/25 22:43\"\n */\n\n#ifdef local\n#include \"debug.hpp\"\nusing namespace std;\n#else\n#define DEBUG(...) do { } while(false)\n#endif\n\nconst int N = 1e5 + 10;\n\nint tree[(N << 2) + 5];\nint lazy[(N << 2) + 5];\n\n#define lson i << 1, l, mid\n#define rson i << 1 | 1, mid + 1, r\n#define mid ((l + r) >> 1)\n\nvoid build(int i, int l, int r) {\n  if (l == r) {\n    tree[i] = N - 1;\n    lazy[i] = -1;\n    return;\n  }\n  build(lson);\n  build(rson);\n  tree[i] = std::max(tree[i << 1], tree[i << 1 | 1]);\n}\n\nvoid pushdown(int i) {\n  if (lazy[i] == -1) {\n    return;\n  }\n  tree[i << 1] = lazy[i];\n  tree[i << 1 | 1] = lazy[i];\n  lazy[i] = -1;\n}\n\nint query(int i, int l, int r, int L, int R) {\n  // DEBUG(i, l, r, L, R);\n  if (l > R || L > r) {\n    return 0;\n  }\n  pushdown(i);\n  if (L <= l && r <= R) {\n    return tree[i];\n  }\n  return std::max(query(lson, L, R), query(rson, L, R));\n}\n\nvoid update(int i, int l, int r, int L, int R, int x) {\n  if (l > R || L > r) {\n    return;\n  }\n  pushdown(i);\n  if (L <= l && r <= R) {\n    \n    // DEBUG(l, r, x);\n    tree[i] = x;\n    lazy[i] = x;\n    return;\n  }\n  update(lson, L, R, x);\n  update(rson, L, R, x);\n  tree[i] = std::max(tree[i << 1], tree[i << 1 | 1]);\n}\n\nclass Solution {\npublic:\n  vector<bool> getResults(const vector<vector<int>>& queries) {\n    std::set<int> st;\n    build(1, 0, N);\n    std::vector<bool> r;\n    for (auto q : queries) {\n      int w = q[0];\n      if (w == 1) {\n        int x = q[1];\n        auto iter = st.lower_bound(x);\n        int end = N;\n        if (iter != st.end()) {\n          end = *iter;\n        }\n        int begin = 0;\n        if (iter != st.begin()) {\n          iter--;\n          begin = *iter;\n        }\n        // DEBUG('$', begin, x, x - begin);\n        if (begin == 0) {\n          update(1, 0, N, begin, x, x - begin);\n        } else {\n          update(1, 0, N, begin + 1, x, x - begin);\n        }\n        update(1, 0, N, x + 1, end, end - x);\n        st.insert(x);\n      } else {\n        int x = q[1];\n        int sz = q[2];\n        auto iter = st.upper_bound(x);\n        if (sz > x) {\n          r.push_back(false);\n          continue;\n        }\n        // DEBUG(iter == st.begin());\n        if (iter == st.begin()) {\n          r.push_back(true);\n          continue;\n        }\n        iter--;\n        int y = *iter;\n        // DEBUG('#', x, sz, y, query(1, 0, N, 1, 1));\n        // DEBUG(x, y, sz, query(1, 0, N, 0, y));\n        // DEBUG(query(1, 0, N, 0, 5));\n        if (x - y >= sz || query(1, 0, N, 0, y) >= sz) {\n          r.push_back(true);\n        } else {\n          r.push_back(false);\n        }\n        // DEBUG(1);\n      }\n    }\n    return r;\n  }\n};\n\n#ifdef local\nint main() {\n  Solution o;\n  // DEBUG(o.getResults(std::vector<std::vector<int>>({{1,2},{2,3,3},{2,3,1},{2,2,2}})));\n  // DEBUG(o.getResults(std::vector<std::vector<int>>({{1,7},{2,7,6},{1,2},{2,7,5},{2,7,6}})));\n  // DEBUG(o.getResults(std::vector<std::vector<int>>({{1,1},{1,5},{1,13},{1,14},{2,12,8}})));\n  DEBUG(o.getResults(std::vector<std::vector<int>>({{1, 40000}, {2, 50000, 40001}})));\n}\n#endif",
    "submit_ts": 1716652061.0
}