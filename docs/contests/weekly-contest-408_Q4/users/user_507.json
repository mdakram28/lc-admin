{
    "username": "sb_decoder",
    "submission": "#include <cmath>\n#include <queue>\n#include <unordered_set>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    bool bfs(const vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        vector<bool> vis(n, false);\n        queue<int> q;\n        q.push(s);\n        vis[s] = true;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            if (node == t1 || node == t2) {\n                return true;\n            }\n\n            for (int neighbor : g[node]) {\n                if (!vis[neighbor]) {\n                    vis[neighbor] = true;\n                    q.push(neighbor);\n                }\n            }\n        }\n\n        return false;\n    }\n\n    bool canReachCorner(int x, int y, vector<vector<int>>& c) {\n        int n = c.size();\n\n        vector<vector<int>> g(n + 4);\n        const int left = n;\n        const int bottom = n + 1;\n        const int right = n + 2;\n        const int top = n + 3;\n\n        auto intersects = [&](int x1, int y1, int r1, int x2, int y2, int r2) {\n            long long dx = x2 - x1;\n            long long dy = y2 - y1;\n            long long distsq = dx * dx + dy * dy;\n            long long rsum = r1 + r2;\n            return distsq <= rsum * rsum;\n        };\n\n        for (int i = 0; i < n; ++i) {\n            int xi = c[i][0], yi = c[i][1], ri = c[i][2];\n\n            if (xi - ri <= 0)\n                g[i].push_back(left), g[left].push_back(i);\n            if (xi + ri >= x)\n                g[i].push_back(right), g[right].push_back(i);\n            if (yi - ri <= 0)\n                g[i].push_back(bottom), g[bottom].push_back(i);\n            if (yi + ri >= y)\n                g[i].push_back(top), g[top].push_back(i);\n\n            for (int j = i + 1; j < n; ++j) {\n                int xj = c[j][0], yj = c[j][1], rj = c[j][2];\n                if (intersects(xi, yi, ri, xj, yj, rj)) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        if (bfs(g, left, bottom, right, n + 4))\n            return false;\n        if (bfs(g, top, bottom, right, n + 4))\n            return false;\n\n        return true;\n    }\n};\n",
    "submit_ts": "1722137081",
    "subm_id": "1335753582"
}