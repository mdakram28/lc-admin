{
    "username": "Dk95_letsgo",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        \n        \n        v = []\n        v2 = []\n        n = len(s)\n        \n        o = 0\n        z = 0\n        l = 0\n        for i in range(n):\n            if s[i] == '1':\n                o += 1\n            else:\n                z += 1\n            while (o > k and z > k):\n                v.append([l, i])\n                v2.append([i,l])\n                if s[l] == '1':\n                    o -= 1\n                else:\n                    z -= 1\n                l += 1\n        q = []\n        if v:\n            q = [v[0][1]]\n        for i in range(1,len(v)):\n            q.append(q[-1] + v[i][1])\n        \n        ans = []\n        # print(v,v2,q)\n        for a,b in queries:\n            L = b - a + 1\n            val = (L + 1) * L // 2\n            x = bisect_left(v,[a,0])\n            y = bisect_right(v2,[b,10**9])\n            # print(x,y)\n            if y > x:\n                if x == 0:\n                    val -= (b + 1) * (y - x) - q[y-1]\n                else:\n                    val -= (b + 1) * (y - x) - (q[y-1] - q[x-1])\n            # for i in range(x,len(v)):\n            #     if v[i][1] > b:\n            #         break\n            #     else:\n            #         val -= b - v[i][1] + 1\n            ans.append(val)\n        \n        return ans\n            ",
    "submit_ts": "1723951142",
    "subm_id": "1359764259"
}