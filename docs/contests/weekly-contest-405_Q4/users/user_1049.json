{
    "username": "lakkshyag",
    "submission": "class TrieNode\n{\n    public:\n    char val;\n    bool isWord;\n    int costIx;\n    TrieNode** children;\n\n    TrieNode(char val)\n    {\n        (*this).val = val;\n        isWord = false;\n        costIx = -1;\n        \n        children = new TrieNode*[26];\n        for (int i = 0; i <= 25; i++) children[i] = NULL;\n    }\n\n    ~TrieNode()\n    {\n        for (int i = 0; i <= 25; i++) delete children[i];\n        delete[] children;\n    }\n};\n\n\nclass Solution\n{\n    public:\n    \n    int numWords;\n    int stLen;\n    TrieNode* root;\n    vector<int> dp;\n    \n    \n    int recSolver(string &target, vector<string> &words, vector<int> &costs, int ix)\n    {\n        if (ix >= stLen) return 0;\n        else if (dp[ix] != -1) return dp[ix];\n        else\n        {\n            int ans = INT32_MAX;\n            int i = ix;\n            TrieNode* curr = root;\n            \n            while (i <= stLen-1 && (*curr).children[target[i] - 'a'])\n            {\n                curr = (*curr).children[target[i] - 'a'];\n                if ((*curr).isWord)\n                {\n                    int smallAns = recSolver(target, words, costs, i+1);\n                    if (smallAns < INT32_MAX) ans = min(ans, costs[(*curr).costIx] + smallAns);\n                }\n                \n                i++;\n            }\n            \n            return dp[ix] = ans;\n        }\n    }\n    \n    void insertWord(string const &word, int costIx, vector<int>& costs)\n    {\n        TrieNode* currNode = root;\n        int i = 0;\n        while ( word[i] )\n        {\n            if ( !(*currNode).children[word[i] - 'a'] ) (*currNode).children[word[i] - 'a'] = new TrieNode(word[i]);\n            currNode = (*currNode).children[word[i] - 'a'];\n\n            i++;   \n        }\n        (*currNode).isWord = true;\n        if ((*currNode).costIx == -1) (*currNode).costIx = costIx;\n        else if (costs[costIx] < costs[(*currNode).costIx]) (*currNode).costIx = costIx;\n\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs)\n    {\n        stLen = target.size();\n        numWords = words.size();\n        \n        root = new TrieNode('\\0');\n        for (int i = 0; i <= numWords-1; i++) insertWord(words[i], i, costs);\n        \n        dp = vector<int>(stLen, -1);\n\n        int ans = recSolver(target, words, costs, 0);\n        return ans == INT32_MAX ? -1 : ans;\n    }\n};",
    "submit_ts": "1720322728",
    "subm_id": "1312357560"
}