{
    "username": "zk299",
    "submission": "class SparseTable:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.k = int(math.log2(self.n)) + 1\n        self.st = [[0] * self.k for _ in range(self.n)]\n        self.build(nums)\n    \n    def build(self, nums):\n        for i in range(self.n):\n            self.st[i][0] = nums[i]\n        j = 1\n        while (1 << j) <= self.n:\n            i = 0\n            while (i + (1 << j) - 1) < self.n:\n                self.st[i][j] = self.st[i][j - 1] & self.st[i + (1 << (j - 1))][j - 1]\n                i += 1\n            j += 1\n    \n    def query(self, L, R):\n        j = int(math.log2(R - L + 1))\n        return self.st[L][j] & self.st[R - (1 << j) + 1][j]\n\nclass Solution:\n    def minimumDifference(self, arr: List[int], target: int) -> int:\n        ans = abs(arr[0] - target)\n        valid = {arr[0]}\n        for num in arr:\n            valid = {x & num for x in valid} | {num}\n            ans = min(ans, min(abs(x - target) for x in valid))\n        return ans\n\n        \n#         n = len(nums)\n#         min_diff = float('inf')\n\n#         left = 0\n#         current_and = nums[0]\n\n#         for right in range(n):\n#             if right > left:\n#                 current_and &= nums[right]\n\n#             while current_and < k and left < right:\n#                 min_diff = min(min_diff, abs(k - current_and))\n#                 current_and |= nums[left]\n#                 left += 1\n#                 current_and &= nums[right]\n\n#             min_diff = min(min_diff, abs(k - current_and))\n\n#             if min_diff == 0:\n#                 return 0\n\n#         return min_diff",
    "submit_ts": 1717299533.0
}