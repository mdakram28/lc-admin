{
    "username": "_sriharshitha",
    "submission": "from typing import List\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = Trie()\n        \n        # Insert all words into the trie with respective costs\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n        \n        # Initialize dp array with infinity\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Populate dp array\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            \n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                \n                node = node.children[target[j]]\n                if node.cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        # Return result based on dp array\n        return dp[n] if dp[n] != float('inf') else -1\n        ",
    "submit_ts": "1720322641",
    "subm_id": "1312355286"
}