{
    "username": "power1011",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        // 1,0,1,2,4,3\n        \n        //  1  0  1\n        //  3  4  2\n        // d1 d2 d3\n        // -k <= d_i <= k\n        \n        // 0 <= abs(d_i) <= k\n\n        // 0 <= X <= K\n        \n\n        \n        // find minimum modification for X\n        \n        // l <= r\n        // k-X >= l then we only need to change r to l + X cost is 1\n        // r >= X then we only need to change l to r - X cost is 1\n        // otherwise then we have to change both l & r to like 0, X\n        \n        // k == 4\n        // 1 0 0 0\n        // 3 4 4 4\n        \n        // k-X < l <= r < X\n        // k=X=4\n        // 0 < l <= r < 4\n        \n        // 0 1 2 3 4\n        // x       x\n        //   x   x\n        // 2 1 0 1 2\n        \n        // 4/ 2 - 0 = 2\n        // 4/ 2 - 1 = 1\n        // 4/ 2 - 2 = 0\n\n        // 0 1 2 3 4 5\n        // x         x\n        //   x     x\n        //     x x\n        // 2 1 0 0 1 2\n        \n        // 5 - 0 * 2 = 5\n        // 5 - 1 * 2 = 3\n        // 5 - 2 * 2 = 1\n        // l_i , r_i\n        // max(k/2 - l_i, r_i - k/2)\n        // max(4/2-1, 3 - 4/2) = 1\n        // X - (k+1)/2 > 1\n        // 5 - (5+1)/2 > 1\n        const int n = nums.size() / 2;\n        auto rnums = nums;\n        std::reverse(rnums.begin(), rnums.end());\n        nums.resize(n);\n        rnums.resize(n);\n        // k/2 < li<=ri\n        vector<int> counts(k+3);\n        vector<int> count_exact(k+3);\n        for(int i=0;i<n;++i)\n        {\n            auto &l_i = nums[i];\n            auto &r_i = rnums[i];\n            if(l_i>r_i)\n            {\n                swap(l_i, r_i);\n            }\n            count_exact.at(r_i - l_i)++;\n            auto key_function = (k+1)/2 + max((k - 2*l_i)/2, (2*r_i - k)/2) + 1;\n            counts.at(key_function)++;\n        }\n        std::partial_sum(counts.begin(), counts.end(), counts.begin());\n        int ans = 2*n;\n        // 0 1 2 3\n        // x     x\n        //   x x\n        // \n        \n        // k/2 = 1\n        \n        // 3,3,2,2,0,2,3,0,3,\n        // 0,1,1,0,0,3,3,3,0\n        \n        //   1 2 1 1 1 1 0 0\n        for(int X=0;X<=k;++X)\n        {\n            int num_of_cost_0 = count_exact.at(X);\n            int num_of_cost_2 = counts.at(X);\n            int num_of_cost_1 = n - num_of_cost_0 - num_of_cost_2;\n            int local_ans = num_of_cost_1 + 2 * num_of_cost_2;\n            // cout << \"X: \" << X << \" \" << local_ans << \"\\n\";\n            ans = min(ans, local_ans);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721488628",
    "subm_id": "1327428269"
}