{
    "username": "AryanJaiswal28",
    "submission": "\n#define ll long long\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(const vector<int>& arr, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(arr, start, mid, 2 * node + 1);\n            buildTree(arr, mid + 1, end, 2 * node + 2);\n            tree[node] = (tree[2 * node + 1]& tree[2 * node + 2]);\n        }\n    }\n\n    void updateTree(int start, int end, int index, int value, int node) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (index <= mid) {\n                updateTree(start, mid, index, value, 2 * node + 1);\n            } else {\n                updateTree(mid + 1, end, index, value, 2 * node + 2);\n            }\n            tree[node] = (tree[2 * node + 1]& tree[2 * node + 2]);\n        }\n    }\n\n    ll queryTree(int start, int end, int l, int r, int node) {\n        if (l <= start && r >= end) {\n            return (long long)tree[node];\n        }\n        if (end < l || start > r) {\n            return (long long)(1ll<<32)-1;\n        }\n        int mid = (start + end) / 2;\n        return (queryTree(start, mid, l, r, 2 * node + 1)&\n                   queryTree(mid + 1, end, l, r, 2 * node + 2));\n    }\n\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        buildTree(arr, 0, n - 1, 0);\n    }\n\n    void update(int index, int value) {\n        updateTree(0, n - 1, index, value, 0);\n    }\n\n    ll query(int l, int r) {\n        return queryTree(0, n - 1, l, r, 0);\n    }\n};\n\n\nclass Solution {\npublic:\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n=nums.size();\n        SegmentTree sgt(nums);\n        ll ans=0;\n        for(int i=0;i<n;i++){\n            ll l=i;\n            ll r=n-1;\n            ll max1=-1;\n            ll min1=1e9+1;\n            while(l<=r){\n              //  min1=1e9+1;\n                ll mid=(l+r)/2;\n                ll a=sgt.query(i,mid);\n                //cout<<a<<endl;\n                if(a<k){\n                    r=mid-1;\n                }\n                else if(a>k){\n                    l=mid+1;\n                }\n                else{\n                    min1=min(min1,mid);\n                    r=mid-1;\n                }\n            }\n            l=i;\n            r=n-1;\n            while(l<=r){\n                // max1=-1;\n                ll mid=(l+r)/2;\n                ll a=sgt.query(i,mid);\n                if(a<k){\n                    r=mid-1;\n                }\n                else if(a>k){\n                    l=mid+1;\n                }\n                else{\n                    max1=max(max1,mid);\n                    l=mid+1;\n                }\n            }\n            if(max1==-1){\n                continue;\n            }\n          //  cout<<max1<<\" \"<<min1<<endl;\n            ans+=(max1-min1+1);\n            \n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": "1720280495",
    "subm_id": "1311791492"
}