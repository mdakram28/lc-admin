{
    "username": "zk299",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        MOD = 10**9 + 7\n        \n        n = len(nums)\n        max_value = 1000\n        # dp[k][i][j]: the first k elements where x = i, y = j, the possibilities\n        dp = [0] * (max_value + 1)\n\n        for x in range(nums[0] + 1):\n            dp[x] = 1\n\n        for i in range(1, n):\n            new_dp = [0] * (max_value + 1)\n            \n            pre_sum = [0] * len(dp)\n            pre_sum[0] = dp[0]\n            for idx in range(1, len(dp)):\n                pre_sum[idx] = pre_sum[idx-1] + dp[idx]\n            \n            # print(len(pre_sum))\n            \n            for x in range(nums[i] + 1):\n                y = nums[i] - x\n                \n                f = nums[i-1] - nums[i] + x\n                x_p = min(x, f)\n                if x_p >= 0:\n                    total = pre_sum[x_p]\n                    new_dp[x] = (new_dp[x] + total) % MOD\n                \n                # pre_sum[x] = (pre_sum[x-1] if x-1>= 0 else 0) + new_dp[x]\n                \n                # for prev_x in range(x + 1):\n                #     prev_y = nums[i-1]-prev_x\n                #     if prev_y >= y:\n                #     # for prev_y in range(y, max_value + 1):\n                #         new_dp[x][y] = (new_dp[x][y] + dp[prev_x][prev_y]) % MOD\n            \n            # print(new_dp)\n            dp = new_dp\n\n        \n        # print(sum(dp))\n        return sum(dp) % MOD\n    \n    \n    \n# class Solution:\n#     def countOfPairs(self, nums: List[int]) -> int:\n#         MOD = 10**9 + 7\n        \n#         n = len(nums)\n#         max_value = 50\n#         # dp[k][i][j]: the first k elements where x = i, y = j, the possibilities\n#         dp = [[0] * (max_value + 1) for _ in range(max_value + 1)]\n\n#         for x in range(nums[0] + 1):\n#             y = nums[0] - x\n#             dp[x][y] = 1\n\n#         for i in range(1, n):\n#             new_dp = [[0] * (max_value + 1) for _ in range(max_value + 1)]\n\n#             for x in range(nums[i] + 1):\n#                 y = nums[i] - x\n#                 for prev_x in range(x + 1):\n#                     prev_y = nums[i-1]-prev_x\n#                     if prev_y >= y:\n#                     # for prev_y in range(y, max_value + 1):\n#                         new_dp[x][y] = (new_dp[x][y] + dp[prev_x][prev_y]) % MOD\n\n#             dp = new_dp\n\n#         return sum(sum(row) for row in dp) % MOD\n        ",
    "submit_ts": "1723348010",
    "subm_id": "1351609872"
}