{
    "username": "U_U",
    "submission": "\n\ntemplate <class T> class SparseTable { // 0-indexed\npublic:\n    T (*funcOp)(T, T); \n    int n;\n    vector<vector<T>> st;\n    \n    SparseTable() {}\n\n    SparseTable(vector<T> v, T (*inputOp)(T, T)) {\n        n = v.size();\n        st = vector<vector<T>>(__lg(n)+1, vector<T>(n));\n        st[0] = v;\n        this->funcOp = inputOp;\n        for (int i=1; i<st.size(); i++) {\n            for (int j=0; j+(1<<i)<=n; j++) st[i][j] = funcOp(st[i-1][j], st[i-1][j+(1<<(i-1))]);\n        }\n    } \n    \n    // Can't be used for sum operations. \n    T Query(int L, int R) { // inclusive range\n        int sz = __lg(R - L +1);\n        return funcOp(st[sz][L], st[sz][R-(1<<sz)+1]);\n    }\n\n    T QuerySum(int L, int R) {\n        long long sum = 0;\n        for (int i = st.size() - 1; i >= 0; i--) \n        {\n            if ((1 << i) <= R - L + 1) {\n                    sum += st[i][L];\n                    L += 1 << i;\n            }\n        }\n        return sum;\n    }\n};\n\nint64_t GCD(int64_t a, int64_t b) {\n            return __gcd(a, b);\n}\n\nint64_t Sum(int64_t a, int64_t b) {\n    return a + b;\n}\n\nint64_t AND(int64_t a, int64_t b) {\n            return (a & b);\n}\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n\n        vector<int64_t> temp;\n        for (auto& item : nums)  temp.push_back(item);\n        \n        auto stAND = SparseTable<int64_t>(temp, AND);   \n\n        int64_t res = 0;\n        for (int i = 0; i < n; ++i)\n        {\n            int lo = i;\n            int hi = n - 1;\n            while (lo < hi)\n            {\n                int mid = lo + (hi - lo) / 2;\n\n                int target = stAND.Query(i, mid);\n                if (target <= k) hi = mid;\n                else lo = mid + 1;\n            }\n\n            int start = lo;\n\n            lo = i;\n            hi = n - 1;\n            while (lo < hi)\n            {\n                int mid = lo + (hi - lo + 1) / 2;\n\n                int target = stAND.Query(i, mid);\n                if (target >= k) lo = mid;\n                else hi = mid - 1;\n            }\n            int end = lo;\n\n           // cout << i << \",\" << start << \",\" << end << \"|\" << stAND.Query(0, 2) << endl;\n            //cout << i << \",\" << start << \",\" << end << \"|\" << stAND.Query(i, start) << endl;\n\n            int target = stAND.Query(i, start);\n            if (target == k)\n            {\n                res += (end - start + 1);\n            }\n        }\n\n\n        return res;\n    }\n};",
    "submit_ts": "1720278061",
    "subm_id": "1311692538"
}