{
    "username": "iwnRwfzapZ",
    "submission": "class SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        N = len(nums)\n        Q = len(queries)\n\n        peaks = [0] * N\n\n        for i in range(1, N - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                peaks[i] = 1\n\n        st = SegmentTree(peaks, func=lambda a, b: a + b)\n\n        ans = []\n\n        for q in queries:\n            if q[0] == 1:\n                query_type, l, r = q\n                query_ans = st.query(l, r + 1)\n                if st[l] == 1: query_ans -= 1\n                if st[r] == 1 and l != r: query_ans -= 1\n                ans.append(query_ans)\n\n            else:\n                query_type, i, v = q\n                prev = nxt = 0\n\n                # for j in range(i - 1, i + 2):\n                #     if 1 <= j < N - 1 and st[j] == 1:\n                #         prev += 1\n\n                nums[i] = v\n\n                for j in range(i - 1, i + 2):\n                    if 1 <= j < N - 1:\n                        if nums[j - 1] < nums[j] > nums[j + 1]:\n                            st[j] = 1\n                        else:\n                            st[j] = 0\n\n\n\n        return ans",
    "submit_ts": 1718506397.0
}