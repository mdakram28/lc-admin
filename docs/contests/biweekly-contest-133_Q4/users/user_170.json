{
    "username": "shubham_247_991",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n             // Step 1: Initialize the helpermat table\n    vector<vector<int>> helpermat(n + 1, vector<int>(401, 0));\n    helpermat[0][0] = 1;\n\n    // Step 2: Fill the helpermat table\n    for (int i = 1; i <= n; ++i) {\n        for (int k = 0; k <= 400; ++k) {\n            helpermat[i][k] = 0;\n            for (int j = 0; j <= min(k, i - 1); ++j) {\n                helpermat[i][k] = (helpermat[i][k] + helpermat[i - 1][k - j]) % MOD;\n            }\n        }\n    }\n\n    // Step 3: Create a map for quick lookup of requirements\n    vector<int> required_inversions(n, -1);\n    for (const auto& req : requirements) {\n        int e = req[0];\n        int c = req[1];\n        required_inversions[e] = c;\n    }\n\n    // Step 4: Validate DP states with requirements\n    vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n    dp[0][0] = 1;\n\n    for (int i = 1; i <= n; ++i) {\n        for (int k = 0; k <= 400; ++k) {\n            dp[i][k] = 0;\n            for (int j = 0; j <= min(k, i - 1); ++j) {\n                dp[i][k] = (dp[i][k] + dp[i - 1][k - j]) % MOD;\n            }\n        }\n        if (required_inversions[i - 1] != -1) {\n            for (int k = 0; k <= 400; ++k) {\n                if (k != required_inversions[i - 1]) {\n                    dp[i][k] = 0;\n                }\n            }\n        }\n    }\n\n    // Step 5: Count all valid permutations for the full array\n    int total_valid_permutations = 0;\n    for (int k = 0; k <= 400; ++k) {\n        total_valid_permutations = (total_valid_permutations + dp[n][k]) % MOD;\n    }\n\n    return total_valid_permutations;\n\n    }\n};",
    "submit_ts": 1719069006.0
}