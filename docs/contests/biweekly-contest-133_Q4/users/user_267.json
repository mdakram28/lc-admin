{
    "username": "oshang",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int numElements, vector<vector<int>>& inversionConstraints) {\n        const int MODULO = 1'000'000'007;\n        const int MAX_INV_COUNT = 400;\n\n        unordered_map<int, int> constraintMap;\n        for (auto& constraint : inversionConstraints) {\n            constraintMap[constraint[0] + 1] = constraint[1];\n        }\n\n        vector<vector<long>> permutationCounts(numElements + 1, vector<long>(MAX_INV_COUNT + 1, 0));\n        permutationCounts[0][0] = 1;\n\n        for (int permutationLength = 1; permutationLength <= numElements; permutationLength++) {\n            for (int invCount = 0; invCount <= MAX_INV_COUNT; invCount++) {\n                for (int newPosition = 0; newPosition < permutationLength; newPosition++) {\n                    int prevInvCount = invCount - newPosition;\n                    if (prevInvCount >= 0) {\n                        permutationCounts[permutationLength][invCount] = (permutationCounts[permutationLength][invCount] + permutationCounts[permutationLength - 1][prevInvCount]) % MODULO;\n                    }\n                }\n            }\n\n            if (constraintMap.count(permutationLength)) {\n                int targetInvCount = constraintMap[permutationLength];\n                for (int invCount = 0; invCount <= MAX_INV_COUNT; invCount++) {\n                    if (invCount!= targetInvCount) {\n                        permutationCounts[permutationLength][invCount] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : permutationCounts[numElements]) {\n            result = (result + count) % MODULO;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1719069998",
    "subm_id": "1296811915"
}