{
    "username": "MohoGup",
    "submission": "class Solution {\npublic:\n    void find_max(vector<vector<int>>& adj, int node, int d, int& maxi, int& far, vector<int>& dist)\n    {\n        dist[node] = d;\n\n        if (d > maxi) \n        {\n            maxi = d;\n            far = node;\n        }\n\n        for (int child : adj[node]) \n            if (dist[child] == -1) \n                find_max(adj, child, d + 1, maxi, far, dist);\n    }\n\n    void dfs(vector<vector<int>>& adj, int start, int& far, int& maxi) \n    {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        dist[start] = 0;\n\n        find_max(adj, start, 0, maxi, far, dist);\n    }\n\n    int minimumDiameterAfterMerge(const vector<vector<int>>& edges1, const vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : edges1) \n        {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) \n        {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int far1 = 0, maxi1 = 0;\n        dfs(adj1, 0, far1, maxi1);\n        int newfar1 = 0, newmaxi1 = 0;\n        dfs(adj1, far1, newfar1, newmaxi1);\n        int diam1 = newmaxi1;\n\n        int far2 = 0, maxi2 = 0;\n        dfs(adj2, 0, far2, maxi2);\n        int newfar2 = 0, newmaxi2 = 0;\n        dfs(adj2, far2, newfar2, newmaxi2);\n        int diam2 = newmaxi2;\n\n        int mindiam = max(diam1, diam2);\n        int h1 = (diam1 + 1) / 2;\n        int h2 = (diam2 + 1) / 2;\n        mindiam = max(mindiam, h1 + h2 + 1);\n\n        return mindiam;\n    }\n};",
    "submit_ts": "1719718295",
    "subm_id": "1304413678"
}