{
    "username": "coderkb",
    "submission": "class Solution {\n    struct TrieNode {\n\n        TrieNode* childNode[26];\n\n        bool wordEnd;\n        int cost;\n\n        TrieNode()\n        {\n            wordEnd = false;\n            cost = -1;\n            for (int i = 0; i < 26; i++) {\n                childNode[i] = NULL;\n            }\n        }\n    };\n\n    void addWord(TrieNode* root, string word, int cost)\n    {\n        TrieNode* currentNode = root;\n\n        for (auto c: word) {\n            if (currentNode->childNode[c - 'a'] == NULL) {\n                TrieNode* newNode = new TrieNode();\n                currentNode->childNode[c - 'a'] = newNode;\n            }\n            currentNode = currentNode->childNode[c - 'a'];\n        }\n        currentNode->wordEnd = 1;\n        currentNode->cost = cost;\n    }\n\n    long searchWord(TrieNode* root, string& target, int ind, int n)\n    {\n        if(ind == n) {\n            return 0;\n        }\n\n        if(dp[ind] != -1) return dp[ind];\n\n        long mn = INT_MAX;\n        TrieNode* currentNode = root;\n        for(int i = ind; i < n; ++i) {\n            if(currentNode->childNode[target[i] - 'a'] == NULL) break;\n            currentNode = currentNode->childNode[target[i] - 'a'];\n            if(currentNode->wordEnd) {\n                mn = min(mn, currentNode->cost + searchWord(root, target, i + 1, n));\n            }\n        }\n\n        return dp[ind] = mn;\n    }\n    vector<int> dp;\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        int m = words.size();\n        map<string, int> mp;\n        for(int i = 0; i < m; ++i) {\n            if(mp.find(words[i]) == mp.end()) {\n                mp[words[i]] = costs[i];\n            } else {\n                mp[words[i]] = min(mp[words[i]], costs[i]);\n            }\n        }\n\n        for(auto [word, cost]: mp) {\n            addWord(root, word, cost);\n        }\n\n        int n = target.size();\n        dp = vector<int>(n + 1, -1);\n        long ans = searchWord(root, target, 0, n);\n        if(ans >= INT_MAX) {\n            ans = -1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720322454",
    "subm_id": "1312350361"
}