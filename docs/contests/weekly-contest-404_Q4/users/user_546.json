{
    "username": "crusifixx",
    "submission": "class Graph {\n    private int n;\n    private List<List<Integer>> adj;\n\n    public Graph(int[][] edges) {\n        this.n = edges.length + 1;\n        this.adj = new ArrayList<>(n);\n        for (int i = 0; i < n; i++) {\n            adj.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adj.get(edge[0]).add(edge[1]);\n            adj.get(edge[1]).add(edge[0]);\n        }\n    }\n\n    public int calculateDiameter() {\n        Pair farthestFromZero = dfs(0, -1);\n        Pair farthestFromFarthest = dfs(farthestFromZero.node, -1);\n        return farthestFromFarthest.distance;\n    }\n\n    private Pair dfs(int node, int parent) {\n        int maxDistance = 0;\n        int farthestNode = node;\n\n        for (int neighbor : adj.get(node)) {\n            if (neighbor != parent) {\n                Pair result = dfs(neighbor, node);\n                if (result.distance + 1 > maxDistance) {\n                    maxDistance = result.distance + 1;\n                    farthestNode = result.node;\n                }\n            }\n        }\n\n        return new Pair(farthestNode, maxDistance);\n    }\n\n    private static class Pair {\n        int node;\n        int distance;\n\n        Pair(int node, int distance) {\n            this.node = node;\n            this.distance = distance;\n        }\n    }\n}\nclass Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        Graph graph1 = new Graph(edges1);\n        Graph graph2 = new Graph(edges2);\n\n        int diameter1 = graph1.calculateDiameter();\n        int diameter2 = graph2.calculateDiameter();\n\n        return Math.max(diameter1, Math.max(diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1));\n    }\n}",
    "submit_ts": "1719719683",
    "subm_id": "1304447987"
}