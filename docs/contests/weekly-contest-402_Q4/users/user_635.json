{
    "username": "dineshhardasani2000",
    "submission": "class Solution {\npublic:\n    vector<int> tree;\n    \n    void builds(int node, int start, int end, vector<int> & A)\n    {\n        if(start == end)\n        {\n            tree[node] = A[start];\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            builds(2*node, start, mid, A);\n            builds(2*node+1, mid+1, end, A);\n            tree[node] = tree[2*node] + tree[2*node+1];\n        }\n    }\n    \n    void updates(int node, int start, int end, int idx, int val)\n    {\n        if(start == end)\n        {\n            tree[node] = val;\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            if(start <= idx and idx <= mid)\n            {\n                updates(2*node, start, mid, idx, val);\n            }\n            else\n            {\n                updates(2*node+1, mid+1, end, idx, val);\n            }\n            tree[node] = tree[2*node] + tree[2*node+1];\n        }\n    }\n    \n    int querys(int node, int start, int end, int l, int r)\n    {\n        if(r < start or end < l)\n        {\n            return 0;\n        }\n        if(l <= start and end <= r)\n        {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = querys(2*node, start, mid, l, r);\n        int p2 = querys(2*node+1, mid+1, end, l, r);\n        return (p1 + p2);\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        for(int i=0;i<4*nums.size();i++){\n            tree.push_back(0);\n        }\n        vector<int> peaks(nums.size());\n        for(int i=1;i<nums.size()-1;i++){\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]){\n                peaks[i]=1;\n            }\n        }\n        builds(1,0,peaks.size()-1,peaks);\n        vector<int> ans;\n        for(int i=0;i<queries.size();i++){\n            if(queries[i][0]==1){\n                ans.push_back(querys(1,0,peaks.size()-1,queries[i][1]+1,queries[i][2]-1));\n            }\n            else{\n                int idx = queries[i][1], val = queries[i][2];\n                nums[idx]=val;\n                if(idx>0 && idx<nums.size()-1 && nums[idx]>nums[idx-1] && nums[idx]>nums[idx+1]){\n                    peaks[idx]=1;\n                    if(idx>0) peaks[idx-1]=0;\n                    if(idx<nums.size()-1) peaks[idx+1]=0;\n                }\n                else{\n                    peaks[idx]=0;\n                    if(idx>0){\n                        if(idx-2>=0 && nums[idx-1]>nums[idx] && nums[idx-1]>nums[idx-2]){\n                            peaks[idx-1]=1;\n                        }\n                        else{\n                            peaks[idx-1]=0;\n                        }\n                    }\n                    if(idx<nums.size()-1){\n                        if(idx+2<nums.size() && nums[idx+1]>nums[idx] && nums[idx+1]>nums[idx+2]){\n                            peaks[idx+1]=1;\n                        }\n                        else{\n                            peaks[idx+1]=0;\n                        }\n                    }\n                }\n                updates(1,0,peaks.size()-1,idx,peaks[idx]);\n                if(idx>0) updates(1,0,peaks.size()-1,idx-1,peaks[idx-1]);\n                if(idx<nums.size()-1) updates(1,0,peaks.size()-1,idx+1,peaks[idx+1]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507809.0
}