{
    "username": "yge2",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int a = f(edges1);\n        int b = f(edges2);\n        return Math.max(Math.max(a, b), (a + 1) / 2 + (b + 1) / 2 + 1);\n    }\n\n    private int f(int[][] e) {\n        int n = e.length;\n        List<Integer>[] a = new List[n+1];\n        for (int i=0; i<n+1; i++)\n            a[i] = new ArrayList<>();\n        for (int i=0; i<n; i++) {\n            a[e[i][0]].add(e[i][1]);\n            a[e[i][1]].add(e[i][0]);\n        }\n        T t = new T(-1, 0, a);\n        t.calc();\n        return t.maxD();\n    }\n\n    class T {\n        List<T> c;\n        int d, v, p;\n        public T(int p0, int v0, List<Integer>[] a) {\n            v = v0;\n            p = p0;\n            c = new ArrayList<>();\n            for (int i : a[v]) {\n                if (i != p) {\n                    T cc = new T(v, i, a);\n                    c.add(cc);\n                }\n            }\n        }\n\n        public void calc() {\n            if (c.size() == 0) return;\n            for (T t : c) {\n                t.calc();\n                d = Math.max(d, t.d + 1);\n            }\n        }\n\n        public int maxD() {\n            if (c.size() == 0) return 0;\n            if (c.size() == 1) return Math.max(c.get(0).maxD(), c.get(0).d + 1);\n            int x = 0;\n            int y = 0;\n            int ans = 0;\n            for (T t : c) {\n                ans = Math.max(ans, t.maxD());\n                if (t.d > x) {\n                    y = x;\n                    x = t.d;\n                } else if (t.d > y) {\n                    y = t.d;\n                }\n            }\n            return Math.max(ans, x + y + 2);\n        }\n    }\n}",
    "submit_ts": 1719717290.0
}