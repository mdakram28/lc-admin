{
    "username": "SleepyJie",
    "submission": "/********************************************\n * author : Jie Chen (4th Year CS)\n * school : Rochester Institute of Technology\n * created: 06.29.2024 22:27:59\n*********************************************/\n\nusing i64 = long long;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1;\n        int m = e2.size() + 1;\n\n        vector<vector<int>> adj1(n), adj2(m);\n        for (const auto &e : e1) {\n            int u = e[0];\n            int v = e[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n        for (const auto &e : e2) {\n            int u = e[0];\n            int v = e[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n\n        int ans = 0;\n        auto work = [&](const auto &adj) -> int {\n            int n = adj.size();\n            vector<int> dis(n);\n            const auto dfs = [&](auto &&self, int x, int p) -> void {\n                for (int y : adj[x]) {\n                    if (y == p) {\n                        continue;\n                    }\n                    dis[y] = dis[x] + 1;\n                    self(self, y, x);\n                }\n            };\n            dfs(dfs, 0, 0);\n\n            int s = max_element(dis.begin(), dis.end()) - dis.begin();\n            dis[s] = 0;\n            dfs(dfs, s, s);\n            int d = *max_element(dis.begin(), dis.end());\n            ans = max(ans, d);\n            return (*max_element(dis.begin(), dis.end()) + 1) / 2;\n        };\n\n        ans = max(ans, work(adj1) + work(adj2) + 1);\n        return ans;\n    }\n};\n\n// ~ JustJie",
    "submit_ts": "1719716850",
    "subm_id": "1304375712"
}