{
    "username": "LQnVRuiNVr",
    "submission": "class SG:\n    def __init__(self, n):\n        self.seg = [0] * (4 * n)\n\n    \"\"\"\n    seg = SGTree(n)\n    seg.build(0, 0, n - 1, h)\n    seg.query(0, 0, n - 1, low, mid)\n    \"\"\"\n\n    def build(self, ind, low, high, arr):\n        if low == high:\n            self.seg[ind] = arr[low]\n            return\n        mid = (low + high) // 2\n        self.build(2 * ind + 1, low, mid, arr)\n        self.build(2 * ind + 2, mid + 1, high, arr)\n        self.seg[ind] = (self.seg[2 * ind + 1] & self.seg[2 * ind + 2])\n\n    def query(self, ind, low, high, l, r):\n        if r < low or l > high:\n            return sys.maxsize\n        if low >= l and r >= high:\n            return self.seg[ind]\n        mid = (low + high) // 2\n        left = self.query(2 * ind + 1, low, mid, l, r)\n        right = self.query(2 * ind + 2, mid + 1, high, l, r)\n        return (left & right)\n    \nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        # if k in nums:\n        #     return 0\n        curr = nums[0]\n        mn = sys.maxsize\n        n = len(nums)\n        seg = SG(n)\n        seg.build(0,0,n-1, nums)\n        \n        # prefix =[nums[0]]\n        # for i in nums:\n        #     mn = min(mn, abs(i-k))\n        #     prefix.append(prefix[-1] & i)\n        # for i in range(n):\n        #     ind = bisect_left(prefix[i-1:], k)\n        #     val1 = prefix[]\n        # return mn\n        \n        \n        j =0 \n        i =0\n        while j<n:\n            curr &=nums[j]\n            # print(curr,i,j)\n            mn = min(mn, abs(k-curr))\n            while i<=j and curr<=k:\n                i+=1\n                curr= seg.query(0,0,n-1, i,j)\n                mn = min(mn, abs(k-curr))\n                # print(curr, i,j)\n            j+=1\n        return mn\n            ",
    "submit_ts": 1717298875.0
}