{
    "username": "cslasher",
    "submission": "class TrieNode {\n  constructor() {\n    this.children = {};\n    this.cost = Infinity; // Initialize cost to Infinity\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n\n  insert(word, cost) {\n    let node = this.root;\n    for (const char of word) {\n      if (!node.children[char]) {\n        node.children[char] = new TrieNode();\n      }\n      node = node.children[char];\n    }\n    node.cost = Math.min(node.cost, cost); // Store the minimum cost for this word\n  }\n\n  getCost(word) {\n    let node = this.root;\n    for (const char of word) {\n      if (!node.children[char]) {\n        return Infinity;\n      }\n      node = node.children[char];\n    }\n    return node.cost;\n  }\n}\n\n/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost = function(target, words, costs) {\n  const n = target.length;\n  const m = words.length;\n\n  const dp = new Array(n + 1).fill(Infinity);\n  dp[0] = 0; // No cost to build the empty string\n\n  // Build the trie\n  const trie = new Trie();\n  for (let i = 0; i < m; i++) {\n    trie.insert(words[i], costs[i]);\n  }\n\n  // Update dp array using the trie\n  for (let i = 0; i < n; i++) {\n    if (dp[i] === Infinity) continue; // If current position can't be reached, skip\n\n    let node = trie.root;\n    for (let j = i; j < n; j++) {\n      if (!node.children[target[j]]) break;\n      node = node.children[target[j]];\n      dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n    }\n  }\n\n  return dp[n] === Infinity ? -1 : dp[n];\n};",
    "submit_ts": "1720322111",
    "subm_id": "1312340978"
}