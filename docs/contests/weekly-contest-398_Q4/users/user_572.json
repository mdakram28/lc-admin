{
    "username": "shuhu",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        return waysToReachStair(1, k, 0, true, new HashMap<>());\n    }\n    \n    private int waysToReachStair(int current, int k, int jump, boolean canGoDown, Map<String, Integer> cache) {\n        String key = current + \" \" + jump + \" \" + canGoDown;\n        if (cache.containsKey(key)) {\n            return cache.get(key);\n        }\n        int jumpDistance = current + (int)Math.pow(2, jump);\n        int ways = current == k ? 1 : 0;\n        if (jumpDistance <= k + 1) {\n            ways += waysToReachStair(jumpDistance, k, jump + 1, true, cache);\n        }\n        if (canGoDown) {\n            ways += waysToReachStair(current - 1, k, jump, false, cache);\n        }\n        cache.put(key, ways);\n        return ways;\n    }\n}",
    "submit_ts": "1716088070",
    "subm_id": "1261803010"
}