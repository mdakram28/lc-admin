{
    "username": "NitishBharat",
    "submission": "#include <vector>\n#include <functional>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> segTree(4 * n, 0);\n\n        // Helper function to count peaks in the nums array\n        auto countPeak = [&](int index) {\n            if (index > 0 && index < n - 1 && nums[index] > nums[index - 1] && nums[index] > nums[index + 1]) {\n                return 1;\n            }\n            return 0;\n        };\n\n        // Helper function to build the segment tree\n        function<void(int, int, int)> build = [&](int idx, int lo, int hi) {\n            if (lo == hi) {\n                segTree[idx] = countPeak(lo);\n                return;\n            }\n            int mid = (lo + hi) / 2;\n            build(2 * idx + 1, lo, mid);\n            build(2 * idx + 2, mid + 1, hi);\n            segTree[idx] = segTree[2 * idx + 1] + segTree[2 * idx + 2];\n        };\n\n        // Helper function to update the segment tree\n        function<void(int, int, int, int)> update = [&](int idx, int lo, int hi, int pos) {\n            if (lo == hi) {\n                segTree[idx] = countPeak(lo);\n                return;\n            }\n            int mid = (lo + hi) / 2;\n            if (pos <= mid) {\n                update(2 * idx + 1, lo, mid, pos);\n            } else {\n                update(2 * idx + 2, mid + 1, hi, pos);\n            }\n            segTree[idx] = segTree[2 * idx + 1] + segTree[2 * idx + 2];\n        };\n\n        // Helper function to query the segment tree\n        function<int(int, int, int, int, int)> query = [&](int idx, int lo, int hi, int ql, int qh) {\n            if (ql > hi || qh < lo) {\n                return 0;\n            }\n            if (ql <= lo && qh >= hi) {\n                return segTree[idx];\n            }\n            int mid = (lo + hi) / 2;\n            return query(2 * idx + 1, lo, mid, ql, qh) + query(2 * idx + 2, mid + 1, hi, ql, qh);\n        };\n\n        // Build the initial segment tree\n        build(0, 0, n - 1);\n\n        vector<int> result;\n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                int li = q[1];\n                int ri = q[2];\n                if(li==ri)result.push_back(0);\n                else\n                result.push_back(query(0, 0, n - 1, li+1, ri-1));\n            } else if (q[0] == 2) {\n                int index = q[1];\n                int value = q[2];\n                nums[index] = value;\n                update(0, 0, n - 1, index);\n                if (index > 0) update(0, 0, n - 1, index - 1);\n                if (index < n - 1) update(0, 0, n - 1, index + 1);\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1718507310.0
}