{
    "username": "szp14",
    "submission": "const int maxn = 5e4 + 5;\nint tid = 0;\nint Trie[maxn][26];\nint C[maxn];\nint dp[maxn];\n\nclass Solution {\npublic:\n    int newNode()\n{\n    memset(Trie[tid], 0, sizeof(Trie[tid]));\n    C[tid] = -1;\n    return tid++;\n}\nvoid Insert(string& x, int c)\n{\n    int n = (int)x.size(), cur = 0;\n    for(int i = 0; i < n; i++)\n    {\n        int idx = x[i] - 'a';\n        int& nxt = Trie[cur][idx];\n        if(nxt == 0) nxt = newNode();\n        cur = nxt;\n    }\n    if(C[cur] == -1 || c < C[cur]) C[cur] = c;\n}\n\nint getDP(int i, string& T)\n{\n    int n = (int)T.size();\n    if(i >= n) return 0;\n    int& ans = dp[i];\n    if(ans != 0) return ans;\n    ans = 1e9;\n    \n    int cur = 0;\n    for(int j = i; j < n; j++)\n    {\n        int idx = T[j] - 'a';\n        int nxt = Trie[cur][idx];\n        if(nxt == 0) break;\n        if(C[nxt] != -1) ans = min(ans, C[nxt] + getDP(j + 1, T));\n        cur = nxt;\n    }\n    return ans;\n}\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs)\n{\n    int n = (int)target.size(), L = (int)words.size();\n    tid = 0;\n    newNode();\n    for(int i = 0; i < L; i++) Insert(words[i], costs[i]);\n    memset(dp, 0, sizeof(dp));\n    int ans = getDP(0, target);\n    return ans == 1e9 ? -1 : ans;\n}\n};",
    "submit_ts": "1720320877",
    "subm_id": "1312307137"
}