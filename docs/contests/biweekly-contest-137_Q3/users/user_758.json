{
    "username": "Haifeng Jin",
    "submission": "\n#define LL long long\n\nclass Elem {\n public:\n  int x;\n  int y;\n  LL value;\n  Elem() {}\n  Elem(int x, int y, LL value) : x(x), y(y), value(value) {}\n  bool operator<(const Elem& other) const { return value < other.value; }\n};\n\nvoid process(auto& row, auto& tops, int index) {\n  priority_queue<Elem> pq = priority_queue<Elem>();\n  for (int i = 0; i < row.size(); i++) {\n    pq.push(Elem(index, i, row[i]));\n  }\n  for (int i = 0; i < 3; i++) {\n    tops.push_back(pq.top());\n    pq.pop();\n  }\n}\n\nbool conflict(auto& elem, auto& chosen) {\n  for (auto a : chosen) {\n    if (elem.x == a.x || elem.y == a.y) {\n      return true;\n    }\n  }\n  return false;\n}\n\nvoid search(auto& chosen, auto& tops, auto& max_sum, int index) {\n  for (int i = index; i < tops.size(); i++) {\n    if (!conflict(tops[i], chosen)) {\n      if (chosen.size() <= 1) {\n        chosen.push_back(tops[i]);\n        search(chosen, tops, max_sum, i + 1);\n        chosen.pop_back();\n      } else {\n        max_sum = max(max_sum, chosen[0].value + chosen[1].value + tops[i].value);\n      }\n    }\n  }\n}\n\nclass Solution {\n public:\n  long long maximumValueSum(vector<vector<int>>& board) {\n    vector<Elem> tops = vector<Elem>();\n    for (int i = 0; i < board.size(); i++) {\n      process(board[i], tops, i);\n    }\n    deque<Elem> chosen = deque<Elem>();\n    LL max_sum = numeric_limits<long long>::min();\n    search(chosen, tops, max_sum, 0);\n    return max_sum;\n  }\n};",
    "submit_ts": "1723909656",
    "subm_id": "1359200801"
}