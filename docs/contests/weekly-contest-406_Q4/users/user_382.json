{
    "username": "kumarianisha",
    "submission": "#include <vector>\n#include <queue>\n#include <functional>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Use a max-heap for both horizontal and vertical cuts\n        priority_queue<int, vector<int>, less<int>> horizontalCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int, vector<int>, less<int>> verticalCuts(verticalCut.begin(), verticalCut.end());\n\n        long long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        // While there are cuts to be made\n        while (!horizontalCuts.empty() || !verticalCuts.empty()) {\n            if (horizontalCuts.empty()) {\n                totalCost += (long long)verticalCuts.top() * horizontalPieces;\n                verticalCuts.pop();\n                verticalPieces++;\n            } else if (verticalCuts.empty()) {\n                totalCost += (long long)horizontalCuts.top() * verticalPieces;\n                horizontalCuts.pop();\n                horizontalPieces++;\n            } else if (horizontalCuts.top() >= verticalCuts.top()) {\n                totalCost += (long long)horizontalCuts.top() * verticalPieces;\n                horizontalCuts.pop();\n                horizontalPieces++;\n            } else {\n                totalCost += (long long)verticalCuts.top() * horizontalPieces;\n                verticalCuts.pop();\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925469",
    "subm_id": "1320255752"
}