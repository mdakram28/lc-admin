{
    "username": "vishesh014",
    "submission": "\n   struct Circle {\n    int x, y, r;\n    Circle(int _x, int _y, int _r) : x(_x), y(_y), r(_r) {}\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circlesData) {\n        vector<Circle> circles;\n        for (const auto& c : circlesData) {\n            circles.emplace_back(c[0], c[1], c[2]);\n        }\n\n        int num_circles = circles.size();\n        vector<vector<int>> graph(num_circles + 4);\n\n        for (int i = 0; i < num_circles; ++i) {\n            if (circles[i].x <= circles[i].r) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].x <= circles[i].r) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].y <= circles[i].r) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].y <= circles[i].r) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].x - circles[j].x, 2) +\n                                       pow(circles[i].y - circles[j].y, 2));\n                int radius_sum = circles[i].r + circles[j].r;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        return !bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4) &&\n               !bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4);\n    }\n\nprivate:\n    bool bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n\n\n};",
    "submit_ts": "1722138218",
    "subm_id": "1335785191"
}