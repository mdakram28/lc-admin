{
    "username": "alokp07",
    "submission": "class Solution {\npublic:\n    int MOD = 1000000007;\n    int MAX_INVERSIONS = 400;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n    unordered_map<int, int> reqMap;\n    for (const auto& req : requirements) {\n        reqMap[req[0] + 1] = req[1];\n    }\n\n    vector<vector<long>> permCounts(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n    permCounts[0][0] = 1;\n    \n    int length=1;\n    while(length<=n) {\n        int inv=0;\n        while(inv <= MAX_INVERSIONS) {\n            for (int newPos = 0; newPos < length; ++newPos) {\n                int prevInv = inv - newPos;\n                if (prevInv >= 0) {\n                    permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                }\n            }\n            inv++;\n        }\n\n        if (reqMap.find(length) != reqMap.end()) {\n            int targetInv = reqMap[length];\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                if (inv != targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n        \n        length++;\n    }\n\n    long result = 0;\n    for (long count : permCounts[n]) {\n        result = (result + count) % MOD;\n    }\n        \n    return (int)result;\n    }\n};",
    "submit_ts": 1719070716.0
}