{
    "username": "dogga",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        dp = [float('inf')] * (len(target) + 1)\n        dp[0] = 0\n\n        for i in range(len(target)):\n            if dp[i] == float('inf'):\n                continue\n            matches = trie.search(target, i)\n            for end_index, cost in matches:\n                dp[end_index] = min(dp[end_index], dp[i] + cost)\n        return dp[len(target)] if dp[len(target)] != float('inf') else -1\n \n\n    \nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def search(self, s, start):\n        node = self.root\n        results = []\n        for i in range(start, len(s)):\n            if s[i] not in node.children:\n                break\n            node = node.children[s[i]]\n            if node.cost != float('inf'):\n                results.append((i + 1, node.cost))  # (end index, cost)\n        return results\n",
    "submit_ts": "1720323284",
    "subm_id": "1312371865"
}