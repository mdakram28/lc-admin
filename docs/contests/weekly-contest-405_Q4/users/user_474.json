{
    "username": "unluckyNoob",
    "submission": "import java.util.*;\n\nclass trie {\n    Map<Character, trie> child;\n    int min;\n    \n    public trie() {\n        child = new HashMap<>();\n        min = Integer.MAX_VALUE;\n    }\n}\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        trie root = new trie();\n        \n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cc = costs[i];\n            trie node = root;\n            for (char c : word.toCharArray()) {\n                node.child.putIfAbsent(c, new trie());\n                node = node.child.get(c);\n            }\n            node.min = Math.min(node.min, cc);\n        }\n        \n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            trie node = root;\n            for (int j = i; j < n; j++) {\n                if (!node.child.containsKey(target.charAt(j))) break;\n                node = node.child.get(target.charAt(j));\n                if (node.min != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.min);\n                }\n            }\n        }\n        \n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720322540",
    "subm_id": "1312352658"
}