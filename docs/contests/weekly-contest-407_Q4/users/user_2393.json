{
    "username": "manmapi",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        def calculate_step_for_chunk(chunk, is_positive):\n            l_chunk = len(chunk)\n            if l_chunk <= 2:\n                return max(chunk) if is_positive else abs(min(chunk))\n            result = 0\n            \n            if is_positive:\n                min_value = min(chunk)\n                result = result + min_value\n                chunk = [c - min_value for c in chunk]\n                # divide into smaller chunk, take 0 as barrier\n                chunks = []\n                temp_chunk = []\n                for c in chunk:\n                    if c != 0:\n                        temp_chunk.append(c)\n                    else:\n                        if temp_chunk:\n                            chunks.append(temp_chunk)\n                            temp_chunk = []\n                if temp_chunk:\n                    chunks.append(temp_chunk)\n                for small_chunk in chunks:\n                    result += calculate_step_for_chunk(small_chunk, True)\n                return result\n            else:\n                max_value = max(chunk)\n                result = result + abs(max_value)\n                chunk = [c - max_value for c in chunk]\n                \n                # divide into smaller chunk, take 0 as barrier\n                chunks = []\n                temp_chunk = []\n                for c in chunk:\n                    if c != 0:\n                        temp_chunk.append(c)\n                    else:\n                        if temp_chunk:\n                            chunks.append(temp_chunk)\n                            temp_chunk = []\n                if temp_chunk:\n                    chunks.append(temp_chunk)\n                for small_chunk in chunks:\n                    result += calculate_step_for_chunk(small_chunk, False)\n                return result\n        l = len(nums)\n        diff = [0] * l\n        for i in range(l):\n            diff[i] = nums[i] - target[i]\n        diff_chunks = []\n        chunk = []\n        min_value = diff[0]\n        max_value = diff[0]\n        if diff[0] > 0:\n            flag = 1\n        elif diff[0] < 0:\n            flag = -1\n        else:\n            flag = 0\n        if flag != 0:\n            chunk.append(diff[0])\n        for d in diff[1:]:\n            if d == 0:\n                flag = 0\n                if chunk:\n                    diff_chunks.append(chunk)\n                    chunk = []\n            elif d > 0:\n                if flag != 1:\n                    if chunk:\n                        diff_chunks.append(chunk)\n                    chunk = [d]\n                else:\n                    chunk.append(d)\n                flag = 1\n            if d < 0:\n                if flag != -1:\n                    if chunk:\n                        diff_chunks.append(chunk)\n                    chunk = [d]\n                else:\n                    chunk.append(d)\n                flag = -1    \n        if chunk:\n            diff_chunks.append(chunk)\n        result = 0\n        for small_chunk in diff_chunks:\n            value = calculate_step_for_chunk(small_chunk, small_chunk[0] > 0)\n            result += value\n        return result",
    "submit_ts": "1721533716",
    "subm_id": "1328015117"
}