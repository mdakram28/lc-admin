{
    "username": "aryan_raaj",
    "submission": "\nclass AryanNode {\npublic:\n    unordered_map<char, AryanNode*> children;\n    int cost;\n    \n    AryanNode() : cost(INT_MAX) {}\n};\n\nclass AryanTrie {\npublic:\n    AryanNode* root;\n    \n    AryanTrie() {\n        root = new AryanNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        AryanNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new AryanNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string aryan, vector<string>& aryanwords, vector<int>& aryancosts) {\n        int n = aryan.size();\n        AryanTrie aryantrie;\n        for (int i = 0; i < aryanwords.size(); ++i) {\n            aryantrie.insert(aryanwords[i], aryancosts[i]);\n        }\n        \n        vector<int> store_dp(n + 1, INT_MAX);\n        store_dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (store_dp[i] == INT_MAX) continue;\n            AryanNode* node = aryantrie.root;\n            for (int col = i; col < n; ++col) {\n                if (!node->children.count(aryan[col])) break;\n                node = node->children[aryan[col]];\n                if (node->cost != INT_MAX) {\n                    store_dp[col + 1] = min(store_dp[col + 1], store_dp[i] + node->cost);\n                }\n            }\n        }\n        if(store_dp[n]==INT_MAX){\n            return -1;\n        }\n        return store_dp[n];\n        \n    }\n};\n",
    "submit_ts": "1720323140",
    "subm_id": "1312368296"
}