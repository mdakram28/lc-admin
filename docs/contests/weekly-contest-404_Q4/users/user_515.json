{
    "username": "messyhair",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        adj1 = {}\n        for edge in edges1:\n            if edge[0] not in adj1:\n                adj1[edge[0]] = set()\n            adj1[edge[0]].add(edge[1])\n            \n            if edge[1] not in adj1:\n                adj1[edge[1]] = set()\n            adj1[edge[1]].add(edge[0])\n            \n        adj2 = {}\n        for edge in edges2:\n            if edge[0] not in adj2:\n                adj2[edge[0]] = set()\n            adj2[edge[0]].add(edge[1])\n            \n            if edge[1] not in adj2:\n                adj2[edge[1]] = set()\n            adj2[edge[1]].add(edge[0])\n        \n        memo1 = {}\n        def height1(node: int, parent: int) -> int:\n            key = (node, parent)\n            if key in memo1:\n                return memo1[key]\n            \n            memo1[key] = 0\n            for adj in adj1[node]:\n                if adj == parent:\n                    continue\n                memo1[key] = max(memo1[key], 1 + height1(adj, node))\n            return memo1[key]\n        \n        memo2 = {}\n        def height2(node: int, parent: int) -> int:\n            key = (node, parent)\n            if key in memo2:\n                return memo2[key]\n            \n            memo2[key] = 0\n            for adj in adj2[node]:\n                if adj == parent:\n                    continue\n                memo2[key] = max(memo2[key], 1 + height2(adj, node))\n            return memo2[key]\n        \n        min_max_height = 2 ** 31 - 1\n        mm_node = None\n        for node in adj1:\n            max_height = height1(node, -1)\n            if max_height < min_max_height:\n                min_max_height = max_height\n                mm_node = node\n        if mm_node is None:\n            min_max_height = 0\n                \n        min_max_height2 = 2 ** 31 - 1\n        mm_node2 = None\n        for node in adj2:\n            max_height = height2(node, -1)\n            if max_height < min_max_height2:\n                min_max_height2 = max_height     \n                mm_node2 = node\n        if mm_node2 is None:\n            min_max_height2 = 0\n                \n        result = min_max_height + min_max_height2 + 1\n        \n        if mm_node is not None:\n            diam1 = 0\n            diam2 = 0\n            for adj in adj1[mm_node]:\n                ht = 1 + height1(adj, mm_node)\n                if ht >= diam1:\n                    diam2 = diam1\n                    diam1 = ht\n                elif ht > diam2:\n                    diam2 = ht\n\n                result = max(result, diam1 + diam2)\n    \n        if mm_node2 is not None:\n            diam1 = 0\n            diam2 = 0\n            for adj in adj2[mm_node2]:\n                ht = 1 + height2(adj, mm_node2)\n                if ht >= diam1:\n                    diam2 = diam1\n                    diam1 = ht\n                elif ht > diam2:\n                    diam2 = ht\n\n            result = max(result, diam1 + diam2)\n            \n        return result\n        \n        ",
    "submit_ts": "1719718944",
    "subm_id": "1304429922"
}