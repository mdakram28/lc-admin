{
    "username": "mgch",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int N = (int)points.size(), D = 2;\n        vector < map <int, int> > all(1 << D);\n        for (int i = 0; i < N; ++i) {\n            for (int d = 0; d < 1 << D; ++d) {\n                int cur = 0;\n                for (int j = 0; j < D; ++j) {\n                    cur += (((d >> j) & 1) ? 1 : -1) * points[i][j];\n                }\n                all[d][cur] += 1;\n            }\n        }\n        int ans = INT_MAX;\n        for (int i = 0; i < N; ++i) {\n            for (int d = 0; d < 1 << D; ++d) {\n                int cur = 0;\n                for (int j = 0; j < D; ++j) {\n                    cur += (((d >> j) & 1) ? 1 : -1) * points[i][j];\n                }\n                if ((all[d][cur] -= 1) == 0) all[d].erase(cur);\n            }\n            int what = INT_MIN;\n            for (int f = 0; f < 1 << D; ++f) {\n                what = max(what, all[f].rbegin()->first - all[f].begin()->first);\n            }\n            ans = min(ans, what);\n            for (int d = 0; d < 1 << D; ++d) {\n                int cur = 0;\n                for (int j = 0; j < D; ++j) {\n                    cur += (((d >> j) & 1) ? 1 : -1) * points[i][j];\n                }\n                all[d][cur] += 1;\n            }\n        }\n        return ans;\n    }\n};"
}