{
    "username": "_dipu",
    "submission": "class Solution {\nprivate:\n    int diaPar;\n    int dia;\n\n    void dfs(vector<vector<int>> &graph, int u, int p, int lvl) {\n        if (lvl > dia) {\n            diaPar = u;\n            dia = lvl;\n        }\n        for (int v : graph[u]) {\n            if (v == p) {\n                continue;\n            }\n            dfs(graph, v, u, lvl + 1);\n        }\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size();\n        vector<vector<int>> graph1(n + 1);\n        for (auto edge : edges1) {\n            int u = edge[0];\n            int v = edge[1];\n            graph1[u].push_back(v);\n            graph1[v].push_back(u);\n        }\n        int m = edges2.size();\n        vector<vector<int>> graph2(m + 1);\n        for (auto edge : edges2) {\n            int u = edge[0];\n            int v = edge[1];\n            graph2[u].push_back(v);\n            graph2[v].push_back(u);\n        }\n        int dia1 = 0;\n        {\n            diaPar = -1;\n            dia = -1;\n            dfs(graph1, 0, -1, 0);\n            dia = -1;\n            dfs(graph1, diaPar, -1, 0);\n            dia1 = dia;\n        }\n        int dia2 = 0;\n        {\n            diaPar = -1;\n            dia = -1;\n            dfs(graph2, 0, -1, 0);\n            dia = -1;\n            dfs(graph2, diaPar, -1, 0);\n            dia2 = dia;\n        }\n        int ans = (dia1 + 1) / 2 + (dia2 + 1) / 2 + 1;\n        ans = max(ans, dia1);\n        ans = max(ans, dia2);\n        return ans;\n    }\n};",
    "submit_ts": "1719716018",
    "subm_id": "1304352746"
}