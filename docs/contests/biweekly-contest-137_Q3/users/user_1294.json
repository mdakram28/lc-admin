{
    "username": "Samay_OP69",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    long long maximumValueSum(vector<vector<int>>& B) {\n         int m = B.size();\n        int n = B[0].size();\n        \n        // Top values in rows and columns\n        vector<vector<pair<ll, ll>>> tr(m);\n        vector<vector<pair<ll, ll>>> tc(n);\n\n        // Find top 3 values for each row\n        for (int r = 0; r < m; ++r) {\n            vector<pair<ll, ll>> rv;\n            for (int c = 0; c < n; ++c) {\n                rv.push_back({B[r][c], c});\n            }\n            sort(rv.rbegin(), rv.rend()); // Sort in descending order\n            tr[r] = vector<pair<ll, ll>>(rv.begin(), rv.begin() + min((ll)3, (ll)rv.size()));\n        }\n\n        // Find top 3 values for each column\n        for (int c = 0; c < n; ++c) {\n            vector<pair<ll, ll>> cv;\n            for (int r = 0; r < m; ++r) {\n                cv.push_back({B[r][c], r});\n            }\n            sort(cv.rbegin(), cv.rend()); // Sort in descending order\n            tc[c] = vector<pair<ll, ll>>(cv.begin(), cv.begin() + min((ll)3, (ll)cv.size()));\n        }\n\n        // Collect all top candidates\n        vector<pair<int, pair<ll, ll>>> candidates;\n        for (int r = 0; r < m; ++r) {\n            for (const auto& p : tr[r]) {\n                candidates.push_back({p.first, {r, p.second}});\n            }\n        }\n        for (int c = 0; c < n; ++c) {\n            for (const auto& p : tc[c]) {\n                candidates.push_back({p.first, {p.second, c}});\n            }\n        }\n\n        // Remove duplicates from candidates\n        sort(candidates.rbegin(), candidates.rend()); // Sort by value in descending order\n        candidates.erase(unique(candidates.begin(), candidates.end(), [](const pair<int, pair<int, int>>& a, const pair<int, pair<int, int>>& b) {\n            return a.second == b.second;\n        }), candidates.end());\n\n        long long maxSum = -1e15;\n        int k = 3;\n        int N = candidates.size();\n\n        // Brute force all combinations of 3 candidates\n        for (int i = 0; i < N; ++i) {\n            for (int j = i + 1; j < N; ++j) {\n                for (int l = j + 1; l < N; ++l) {\n                    auto [val1, pos1] = candidates[i];\n                    auto [val2, pos2] = candidates[j];\n                    auto [val3, pos3] = candidates[l];\n\n                    if (pos1.first != pos2.first && pos1.first != pos3.first && pos2.first != pos3.first &&\n                        pos1.second != pos2.second && pos1.second != pos3.second && pos2.second != pos3.second) {\n                        long long currentSum = (ll)val1 + (ll)val2 + (ll)val3;\n                        maxSum = max(maxSum, currentSum);\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723910337",
    "subm_id": "1359226432"
}