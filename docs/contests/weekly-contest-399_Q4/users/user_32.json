{
    "username": "IceKnight1093",
    "submission": "const long long inf = 1e18;\nstruct Node {\n    long long ans[4];\n    Node() {\n        for (int i = 0; i < 4; ++i) ans[i] = -inf;\n        ans[0] = 0;\n    }\n};\nNode unit;\n\nusing T = Node;\nstruct SegTree {\n\tT f(T a, T b) {\n        T c;\n        for (int i = 0; i < 4; ++i) for (int j = 0; j < 4; ++j) {\n            if ((i&2) and (j&1)) continue;\n            int k = (i&1) + (j&2);\n            c.ans[k] = max(c.ans[k], a.ans[i] + b.ans[j]);\n        }\n        return c;\n    }\n\tvector<T> s; int n;\n\tSegTree(int _n = 0) : s(2*_n), n(_n) {}\n\tvoid update(int pos, int val) {\n        pos += n;\n        s[pos].ans[0] = 0;\n        s[pos].ans[1] = -inf;\n        s[pos].ans[2] = -inf;\n        s[pos].ans[3] = val;\n        while (pos /= 2)\n\t\t\ts[pos] = f(s[pos * 2], s[pos * 2 + 1]);\n\t}\n\tT query(int b, int e) {\n\t\tT ra = unit, rb = unit;\n\t\tfor (b += n, e += n; b < e; b /= 2, e /= 2) {\n\t\t\tif (b % 2) ra = f(ra, s[b++]);\n\t\t\tif (e % 2) rb = f(s[--e], rb);\n\t\t}\n\t\treturn f(ra, rb);\n\t}\n};\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& a, vector<vector<int>>& queries) {\n        int n = a.size();\n        SegTree seg(n);\n        for (int i = 0; i < n; ++i) seg.update(i, a[i]);\n        \n        int q = queries.size();\n        const int mod = 1e9 + 7;\n        int ret = 0;\n        for (int i = 0; i < q; ++i) {\n            int pos = queries[i][0], val = queries[i][1];\n            seg.update(pos, val);\n            Node res = seg.query(0, n);\n            long long add = res.ans[0];\n            add = max(add, res.ans[1]);\n            add = max(add, res.ans[2]);\n            add = max(add, res.ans[3]);\n            ret = (ret + add) % mod;\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1716692041",
    "subm_id": "1268041122"
}