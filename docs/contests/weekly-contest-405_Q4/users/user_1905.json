{
    "username": "purvpatel2576",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # Function to calculate minimum costs for each word\n        def calculateMinimumCosts(words: List[str], costs: List[int]) -> dict:\n            word_costs = {}\n            for i in range(len(words)):\n                word = words[i]\n                cost = costs[i]\n                if word not in word_costs:\n                    word_costs[word] = cost\n                else:\n                    word_costs[word] = min(word_costs[word], cost)\n            return word_costs\n        \n        # Function to find minimum cost to form target string\n        def findMinimumCost(target: str, word_costs: dict) -> int:\n            target_length = len(target)\n            dp = [float('inf')] * (target_length + 1)\n            dp[0] = 0\n            \n            for i in range(1, target_length + 1):\n                for word, cost in word_costs.items():\n                    word_length = len(word)\n                    if i >= word_length and target[i - word_length:i] == word:\n                        dp[i] = min(dp[i], dp[i - word_length] + cost)\n            \n            return dp[target_length] if dp[target_length] != float('inf') else -1\n        \n        # Calculate minimum costs for words\n        word_costs = calculateMinimumCosts(words, costs)\n        \n        # Find minimum cost to form target string\n        return findMinimumCost(target, word_costs)\n\n",
    "submit_ts": "1720324735",
    "subm_id": "1312406773"
}