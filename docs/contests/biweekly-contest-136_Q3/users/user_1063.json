{
    "username": "janos_valuska",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        M,N = len(grid),len(grid[0])\n        row_pairs = zip(grid[:(M+1)//2],grid[(M+1)//2:][::-1])\n        flips = 0\n        for r1,r2 in row_pairs:\n            for i in range(N//2):\n                vals = [r1[i],r2[i],r1[N-1-i],r2[N-i-1]]\n                if vals.count(1) == 2:\n                    flips += 2\n                if vals.count(1) == 1 or vals.count(1) == 3:\n                    flips += 1\n        rem = 0\n        can_balance = False\n        if M%2 == 1:\n            mid_row = grid[M//2]\n            for i in range(N//2):\n                if mid_row[i] == mid_row[N-1-i]:\n                    rem += 2*mid_row[i]\n                else:\n                    flips += 1\n                    can_balance = True\n        if N%2 == 1:\n            mid_col = [grid[i][N//2] for i in range(M)]\n            for i in range(M//2):\n                if mid_col[i] == mid_col[M-1-i]:\n                    rem += 2*mid_col[i]\n                else:\n                    flips += 1\n                    can_balance = True\n        if N%2 == 1 and M%2 == 1:\n            flips += grid[M//2][N//2]\n        if not can_balance:\n            flips += rem%4\n        return flips\n\n\n        ",
    "submit_ts": "1722697800",
    "subm_id": "1343159346"
}