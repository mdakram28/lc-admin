{
    "username": "huytm",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:   \n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.cost = float('inf')\n\n        class Trie:\n            def __init__(self):\n                self.root = TrieNode()\n\n            def insert(self, word, cost):\n                node = self.root\n                for char in word:\n                    if char not in node.children:\n                        node.children[char] = TrieNode()\n                    node = node.children[char]\n                node.cost = min(node.cost, cost)\n\n            def find_costs(self, s, start):\n                node = self.root\n                costs = []\n                for i in range(start, len(s)):\n                    if s[i] not in node.children:\n                        break\n                    node = node.children[s[i]]\n                    if node.cost < float('inf'):\n                        costs.append((i + 1, node.cost))\n                return costs\n\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # Base case: zero cost to form an empty string\n\n        # Build the trie\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        # Update DP array using the trie\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # Skip unreachable positions\n            for end, cost in trie.find_costs(target, i):\n                dp[end] = min(dp[end], dp[i] + cost)\n\n        return -1 if dp[n] == float('inf') else dp[n]",
    "submit_ts": "1720324060",
    "subm_id": "1312390628"
}