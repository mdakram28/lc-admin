{
    "username": "zxc123benny14159",
    "submission": "class FenwickTree:\n    def __init__(self, size):\n        self.size = size\n        self.tree = [0] * (size + 1)\n    \n    def update(self, index, delta):\n        while index <= self.size:\n            self.tree[index] += delta\n            index += index & -index\n    \n    def query(self, index):\n        sum = 0\n        while index > 0:\n            sum += self.tree[index]\n            index -= index & -index\n        return sum\n    \n    def range_query(self, left, right):\n        return self.query(right) - self.query(left - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(i):\n            if i == 0 or i == len(nums) - 1:\n                return False\n            return nums[i] > nums[i-1] and nums[i] > nums[i+1]\n\n        n = len(nums)\n        peaks = [0] * n\n        bit = FenwickTree(n)\n\n        for i in range(1, n-1):\n            if is_peak(i):\n                peaks[i] = 1\n                bit.update(i+1, 1)\n\n        result = []\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                if r - l <= 1:\n                    result.append(0)\n                else:\n                    count = bit.range_query(l+2, r)\n                    result.append(count)\n            else:\n                idx, val = query[1], query[2]\n                old_val = nums[idx]\n                if old_val == val:\n                    continue\n                nums[idx] = val\n                for i in range(max(1, idx-1), min(n-1, idx+2)):\n                    was_peak = peaks[i]\n                    peaks[i] = 1 if is_peak(i) else 0\n                    if was_peak != peaks[i]:\n                        bit.update(i+1, peaks[i] - was_peak)\n\n        return result",
    "submit_ts": 1718508224.0
}