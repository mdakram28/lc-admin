{
    "username": "xish",
    "submission": "class Solution {\n\tclass Node {\n\t\tint rOrC;\n\t\tlong val;\n\t}\n\tpublic long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n\t\tList<Node> nodeList = new ArrayList<>();\n\n\t\tfor (int i = 0 ; i < horizontalCut.length ; i++) {\n\t\t\tNode newNode = new Node();\n\t\t\tnewNode.rOrC = 0;\n\t\t\tnewNode.val = horizontalCut[i];\n\t\t\tnodeList.add(newNode);\n\t\t}\n\n\t\tfor (int i = 0 ; i < verticalCut.length ; i++) {\n\t\t\tNode newNode = new Node();\n\t\t\tnewNode.rOrC = 1;\n\t\t\tnewNode.val = verticalCut[i];\n\t\t\tnodeList.add(newNode);\n\t\t}\n\n\t\tnodeList.sort((a, b) -> Long.compare(b.val, a.val));\n\n\t\tlong curR = 1;\n\t\tlong curC = 1;\n\t\tlong cuts = 0;\n\t\tfor (int i = 0 ; i < nodeList.size() ; i++) {\n\t\t\tNode curNode = nodeList.get(i);\n\t\t\tif (curNode.rOrC == 0) {\n\t\t\t\tcuts = cuts + curNode.val * curR;\n\t\t\t\tcurC++;\n\t\t\t} else {\n\t\t\t\tcuts = cuts + curNode.val * curC;\n\t\t\t\tcurR++;\n\t\t\t}\n\t\t}\n\n\t\treturn cuts;\n\t}\n}",
    "submit_ts": "1720926317",
    "subm_id": "546445477"
}