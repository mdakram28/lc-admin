{
    "username": "VVHack",
    "submission": "class Solution {\npublic:\n  long long minimumOperations(vector<int>& nums, vector<int>& target) {\n    long long tot = 0;\n    int n = nums.size();\n    vector<long long> diff(n);\n    for (int i = 0; i < n; ++i) {\n      diff[i] = target[i] - nums[i];\n    }\n    vector<pair<long long, long long>> spans(n, {-1, -1});\n    //set<pair<long long, int>> diffVals;\n    stack<pair<int, int>> posSt, negSt;\n    for (int i = 0; i < n; ++i) {\n      if (diff[i] <= 0) {\n        posSt = stack<pair<int, int>>();\n      }\n      if (diff[i] >= 0) {\n        negSt = stack<pair<int, int>>();\n      }\n      if (diff[i] > 0) {\n        while (!posSt.empty() && posSt.top().first >= diff[i]) {\n          posSt.pop();\n        }\n        if (!posSt.empty()) {\n          spans[i].first = posSt.top().second;\n        }\n        posSt.push({diff[i], i});\n      } else if (diff[i] < 0) {\n        while (!negSt.empty() && negSt.top().first <= diff[i]) {\n          negSt.pop();\n        }\n        if (!negSt.empty()) {\n          spans[i].first = negSt.top().second;\n        }\n        negSt.push({diff[i], i});\n      }\n    }\n    posSt = stack<pair<int, int>>();\n    negSt = stack<pair<int, int>>();\n    for (int i = n - 1; i >= 0; --i) {\n      if (diff[i] <= 0) {\n        posSt = stack<pair<int, int>>();\n      }\n      if (diff[i] >= 0) {\n        negSt = stack<pair<int, int>>();\n      }\n      if (diff[i] > 0) {\n        while (!posSt.empty() && posSt.top().first > diff[i]) {\n          posSt.pop();\n        }\n        if (!posSt.empty()) {\n          spans[i].second = posSt.top().second;\n        }\n        posSt.push({diff[i], i});\n      } else if (diff[i] < 0) {\n        while (!negSt.empty() && negSt.top().first < diff[i]) {\n          negSt.pop();\n        }\n        if (!negSt.empty()) {\n          spans[i].second = negSt.top().second;\n        }\n        negSt.push({diff[i], i});\n      }\n    }\n    map<long long, vector<int>> positiveDiffToIdcs;\n    for (int i = 0; i < n; ++i) {\n      if (diff[i] <= 0) continue;\n      positiveDiffToIdcs[diff[i]].push_back(i);\n    }\n    map<long long, vector<int>> negativeDiffToIdcs;\n    for (int i = 0; i < n; ++i) {\n      if (diff[i] >= 0) continue;\n      negativeDiffToIdcs[-diff[i]].push_back(i);\n    }\n    vector<long long> numOps(n, 0);\n    for (auto it = positiveDiffToIdcs.begin(); it != positiveDiffToIdcs.end(); ++it) {\n      for (int idx : it->second) {\n        long long signLeft = -1, signRight = -1;\n        int left = spans[idx].first;\n        int right = spans[idx].second;\n        //cout << \"Span for \" << nums[idx] << \" at idx \" << idx << \": {\" << left << \", \" << right << \"}\" << endl;\n        if (spans[idx].first != -1) {\n          signLeft = diff[spans[idx].first] * diff[idx];\n        }\n        if (spans[idx].second != -1) {\n          signRight = diff[spans[idx].second] * diff[idx];\n        }\n        if (signLeft > 0 && signRight > 0) {\n          numOps[idx] = min(abs(diff[idx] - diff[left]), abs(diff[idx] - diff[right]));\n        } else if (signLeft > 0) {\n          numOps[idx] = abs(diff[idx] - diff[left]);\n        } else if (signRight > 0) {\n          numOps[idx] = abs(diff[idx] - diff[right]);\n        } else {\n          numOps[idx] = diff[idx];\n        }\n        //cout << numOps[idx] << \" ops for \" << nums[idx] << \" at idx = \" << idx << \", with diff = \" << diff[idx] << endl;\n      }\n    }\n    for (auto it = negativeDiffToIdcs.begin(); it != negativeDiffToIdcs.end(); ++it) {\n      for (int idx : it->second) {\n        long long signLeft = -1, signRight = -1;\n        int left = spans[idx].first;\n        int right = spans[idx].second;\n        //cout << \"Span for \" << nums[idx] << \" at idx \" << idx << \": {\" << left << \", \" << right << \"}\" << endl;\n        if (spans[idx].first != -1) {\n          signLeft = diff[spans[idx].first] * diff[idx];\n        }\n        if (spans[idx].second != -1) {\n          signRight = diff[spans[idx].second] * diff[idx];\n        }\n        if (signLeft > 0 && signRight > 0) {\n          numOps[idx] = min(abs(diff[idx] - diff[left]), abs(diff[idx] - diff[right]));\n        } else if (signLeft > 0) {\n          numOps[idx] = abs(diff[idx] - diff[left]);\n        } else if (signRight > 0) {\n          numOps[idx] = abs(diff[idx] - diff[right]);\n        } else {\n          numOps[idx] = abs(diff[idx]);\n        }\n        //cout << numOps[idx] << \" ops for \" << nums[idx] << \" at idx = \" << idx << \", with diff = \" << diff[idx] << endl;\n      }\n    }\n    for (long long ops : numOps) {\n      tot += ops;\n    }\n    return tot;\n  }\n};",
    "submit_ts": "1721533243",
    "subm_id": "1328004600"
}