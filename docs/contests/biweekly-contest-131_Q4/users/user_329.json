{
    "username": "hello_motto",
    "submission": "const int N = 50005;\nstruct SegmentTree {\n\tvector <int> t;\n \n\tSegmentTree (int n) {t.assign(4 * n, 0); }\n \n\tvoid Update (int idx, int val, int v, int tl, int tr) {\n\t\tif (tl == tr) t[v] = val;\n\t\telse {\n\t\t\tint tm = (tl + tr) >> 1;\n\t\t\tif (idx <= tm) Update(idx, val, 2 * v + 1, tl, tm);\n\t\t\telse Update(idx, val, 2 * v + 2, tm + 1, tr);\n \n\t\t\tt[v] = max(t[2 * v + 1] ,  t[2 * v + 2]);\n\t\t}\n\t}\n \n\tint Max (int l, int r, int v, int tl, int tr) {\n\t\t//inside\n\t\tif (tl >= l and tr <= r) return t[v];\n\t\telse if (tr < l || tl > r) return 0;\n\t\tint mid = (tl + tr) / 2;\n\t\tint left = Max(l, r, 2 * v + 1, tl, mid);\n\t\tint right = Max(l, r, 2 * v + 2, mid + 1, tr);\n \n\t\treturn   max(left , right);\n\t}\n};\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = 50001;\n        SegmentTree sgmt(n);\n        set<int>st;\n        st.insert(0);\n        st.insert(n-1);\n        vector<bool>ans;\n        sgmt.Update(n-1,n-1,0,0,n-1);\n        for(auto x:queries){\n            if(x[0]==1){\n                auto it = st.lower_bound(x[1]);\n                int val = *it;\n                it--;\n                int prev = (*it);\n                st.insert(x[1]);\n                \n                \n                // cout<<1<<\" \"<<val<<\" \"<<val-x[1]<<\" \"<<x[1]<<\" \"<<x[1]-(prev)<<endl;\n                sgmt.Update(x[1],x[1]-prev,0,0,n-1);\n                sgmt.Update(val,val-x[1],0,0,n-1);\n                \n                \n            }\n            else{\n                int mx = sgmt.Max(0,x[1],0,0,n-1);\n                auto it  = st.lower_bound(x[1]);\n                it--;\n                \n                // cout<<x[1]<<\" \"<<x[2]<<\" \"<<mx<<endl;\n                int val = x[1]-(*it);\n                mx = max(mx,val);\n                // cout<<\"max \"<<val<<\" \"<<mx<<endl;\n                ans.push_back((mx>=x[2]));\n               \n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716651574.0
}