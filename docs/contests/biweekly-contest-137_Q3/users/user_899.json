{
    "username": "Divyansh Jain",
    "submission": "#define ll long long int\n#define pi pair<ll, ll>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    ll findMaxSum(vector<vector<int>>& board, vector<vector<pi>>& vec, int i, int j, int k) {\n        ll ans = -1e18;\n        for (ll x = 0; x < 3; x++) {\n            for (ll y = 0; y < 3; y++) {\n                for (ll z = 0; z < 3; z++) {\n                    if (vec[i][x].second == vec[j][y].second || \n                        vec[j][y].second == vec[k][z].second || \n                        vec[i][x].second == vec[k][z].second) {\n                        continue;\n                    }\n                    ans = max(ans, (ll)board[vec[i][x].first][vec[i][x].second] + \n                                   board[vec[j][y].first][vec[j][y].second] + \n                                   board[vec[k][z].first][vec[k][z].second]);\n                }\n            }\n        }\n        return ans;\n    }\n\n    ll maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<vector<pi>> vec(m);\n\n        for (int i = 0; i < m; i++) {\n            // Min-heap to store the top 3 maximum values\n            priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;\n            for (int j = 0; j < n; j++) {\n                if (pq.size() < 3) {\n                    pq.push({board[i][j], j});\n                } else if (board[i][j] > pq.top().first) {\n                    pq.pop();\n                    pq.push({board[i][j], j});\n                }\n            }\n            vector<pi> hs;\n            while (!pq.empty()) {\n                auto [value, col] = pq.top();\n                pq.pop();\n                hs.push_back({i, col});\n            }\n            vec[i] = hs;\n        }\n\n        ll ans = -1e18;\n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; j < m; j++) {\n                for (int k = j + 1; k < m; k++) {\n                    ans = max(ans, findMaxSum(board, vec, i, j, k));\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1723910014",
    "subm_id": "1359214093"
}