{
    "username": "ayushjaiz",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordEnd; // pairs of (cost, length)\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->wordEnd.push_back({cost, word.length()});\n    }\n};\n\nint minCostToFormTarget(const string& target, const vector<string>& words, const vector<int>& costs) {\n    int n = target.size();\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n    \n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // cost to form an empty prefix is 0\n    \n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        \n        TrieNode* node = trie.root;\n        int j = i;\n        \n        while (j < n && node->children.count(target[j])) {\n            node = node->children[target[j]];\n            for (auto& [cost, length] : node->wordEnd) {\n                if (j - i + 1 >= length) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n            ++j;\n        }\n    }\n    \n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n    \n    return minCostToFormTarget( target,  words,  costs);\n    }\n};",
    "submit_ts": "1720323859",
    "subm_id": "1312385768"
}