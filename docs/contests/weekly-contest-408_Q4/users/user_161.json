{
    "username": "jtcheng26",
    "submission": "class Solution {\npublic:\n    struct DSU {\n        DSU(int n) {\n            parent = vector<int>(n+1, -1);\n            size = vector<int>(n+1, 0);\n        }\n        void make_set(int v) {\n            parent[v] = v;\n            size[v] = 1;\n        }\n        int find_set(int v) {\n            if (v == parent[v])\n                return v;\n            return parent[v] = find_set(parent[v]);\n        }\n\n        void union_sets(int a, int b) {\n            a = find_set(a);\n            b = find_set(b);\n            if (a != b) {\n                if (size[a] < size[b])\n                    swap(a, b);\n                parent[b] = a;\n                size[a] += size[b];\n            }\n        }\n        vector<int> parent;\n        vector<int> size;\n    };\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        int m = n + 4;\n        DSU dsu(m);\n        for (int i=0;i<m;i++) dsu.make_set(i);\n        for (int i=0;i<n;i++) {\n            vector<int> c = circles[i];\n            if (abs(X - c[0]) <= c[2]) dsu.union_sets(i, n);\n            if (abs(Y - c[1]) <= c[2]) dsu.union_sets(i, n+1);\n            if (abs(c[0] - 0) <= c[2]) dsu.union_sets(i, n+2);\n            if (abs(c[1] - 0) <= c[2]) dsu.union_sets(i, n+3);\n        }\n        \n        for (int i=0;i<n;i++) {\n            if (circles[i][0] - X > circles[i][2] || circles[i][1] - Y > circles[i][2]) continue;\n            for (int j=i+1;j<n;j++) {\n                if (circles[j][0] - X > circles[j][2] || circles[j][1] - Y > circles[j][2]) continue;\n                long long dist = abs((long long)circles[i][0] - circles[j][0]) * abs(circles[i][0] - circles[j][0]) + abs((long long)circles[i][1] - circles[j][1]) * abs(circles[i][1] - circles[j][1]);\n                if (dist <= ((long long) circles[i][2] + circles[j][2]) * ((long long) circles[i][2] + circles[j][2])) dsu.union_sets(i, j);\n            }\n        }\n        \n        return (dsu.find_set(n) != dsu.find_set(n+1)) && (dsu.find_set(n+2) != dsu.find_set(n+3)) && (dsu.find_set(n) != dsu.find_set(n+2)) && (dsu.find_set(n+1) != dsu.find_set(n+3));\n    }\n};",
    "submit_ts": "1722135508",
    "subm_id": "1335704151"
}