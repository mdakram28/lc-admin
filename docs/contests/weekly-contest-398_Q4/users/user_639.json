{
    "username": "N_E_E_R_A_J",
    "submission": "const char fastio = [](){\n    ios_base::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();\n\ntypedef long long int ll;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\n#define ALL(iterable) (iterable).begin(), (iterable).end()\n#define RALL(iterable) (iterable).rbegin(), (iterable).rend()\n#define MIN(a, b) ((a) < (b) ? (a) : (b))\n#define MAX(a, b) ((a) > (b) ? (a) : (b))\n#define ROUND(x) (((x) >= 0) ? (ll)((x) + 0.5) : (ll)((x) - 0.5))\n#define DEBUG(...) cout << \"[DEBUG-\" << __LINE__ << \"]:\"; debug_cout(__VA_ARGS__);\n\nshort dx4[] = {-1, 0, 1, 0};\nshort dy4[] = {0, 1, 0, -1};\n\nshort dx8[] = {-1, -1, -1, 0, 1, 1, 1, 0};\nshort dy8[] = {-1, 0, 1, 1, 1, 0, -1, -1};\n\nshort kx[] = {2, 1, -1, -2, -2, -1, 1, 2};\nshort ky[] = {1, 2, 2, 1, -1, -2, -2, -1};\n\ntemplate<typename T>\nvoid debug_cout(const T& arg) {\n    cout << \" \" << arg;\n}\n\ntemplate<typename T, typename... Args>\nvoid debug_cout(const T& firstArg, const Args&... args) {\n    cout << \" \" << firstArg;\n    debug_cout(args...);\n}\n\ntemplate <typename T1, typename T2>\nostream &operator<<(ostream &out, pair<T1, T2> &p)\n{\n    out << \"(\" << p.first << \",\" << p.second << \")\";\n    return out;\n}\n\ntemplate <typename T>\nostream &operator<<(ostream &out, vector<T> &vec)\n{\n    out << \"[\";\n    for (auto it = vec.begin(); it != vec.end(); ++it)\n    {\n        if (it != vec.begin())\n            out << \",\";\n        out << *it;\n    }\n    out << \"]\";\n    return out;\n}\n\nll dp[35][35];\n\nclass Solution {\nprivate:\n    ll nCr(ll n, ll r) {\n        if (r == 0 || n == r)\n            return 1;\n        \n        if (dp[n][r] != -1)\n            return dp[n][r];\n        \n        return dp[n][r] = nCr(n - 1, r - 1) + nCr(n - 1, r);\n    }\n\npublic:\n    int waysToReachStair(int k) {\n        memset(dp, -1, sizeof(dp));\n        ll count = 0, number = 1;\n\n        // Use times of operation 2\n        for (int shift = 0; shift < 32; shift++)\n        {\n            ll temp = number;\n            // Use times of operation 1\n            for (int i = 0; i <= shift + 1; i++)\n            {\n                if (temp == k)\n                {\n                    ll n = shift + 1;\n                    count += nCr(n, i);\n                }\n                \n                --temp;\n            }\n            \n            number += 1 << shift;\n        }\n\n        return count;\n    }\n};",
    "submit_ts": 1716089159.0
}