{
    "username": "rohankarn035",
    "submission": "class CustomNode {\npublic:\n    unordered_map<char, CustomNode*> children;\n    vector<pair<int, int>> custom_ends;\n};\n\nclass CustomTrie {\npublic:\n    CustomNode* custom_root;\n\n    CustomTrie() {\n        custom_root = new CustomNode();\n    }\n\n    void custom_insert(string word, int index, int cost) {\n        CustomNode* node = custom_root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new CustomNode();\n            }\n            node = node->children[c];\n        }\n        node->custom_ends.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string tgt, vector<string>& wrds, vector<int>& csts) {\n        int n = tgt.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        CustomTrie custom_trie;\n        for (int i = 0; i < wrds.size(); ++i) {\n            custom_trie.custom_insert(wrds[i], i, csts[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            CustomNode* node = custom_trie.custom_root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(tgt[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[tgt[j]];\n                for (auto& p : node->custom_ends) {\n                    int len = wrds[p.first].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322938",
    "subm_id": "1312363134"
}