{
    "username": "_aryan_gavhale_",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& arr, int k) {\n         map<int, vector<int>> diffMap;\n        vector<int> diffValues;\n\n        int n = arr.size();\n        for (int i = 0; i < n / 2; i++) {\n            int left = arr[i];\n            int right = arr[n - i - 1];\n            int difference = abs(left - right);\n            int maxValue = max({left, right, k - left, k - right});\n            diffMap[difference].push_back(maxValue);\n            diffValues.push_back(maxValue);\n        }\n\n        int minOps = n;\n        sort(diffValues.begin(), diffValues.end());\n\n        for (const auto& entry : diffMap) {\n            int currentDiff = entry.first;\n            int index = lower_bound(diffValues.begin(), diffValues.end(), currentDiff) - diffValues.begin();\n            int operations = index * 2 + (n / 2 - index);\n\n            for (const auto& value : entry.second) {\n                if (value < currentDiff) {\n                    operations -= 2;\n                } else {\n                    operations -= 1;\n                }\n            }\n\n            minOps = min(minOps, operations);\n        }\n\n        return minOps;\n    }\n};",
    "submit_ts": "1721489497",
    "subm_id": "1327455057"
}