{
    "username": "Yash9890",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n         int n = nums.length;\n        int dp[][] = new int[k+1][n];\n        int max= 1;\n        HashMap<Integer,Integer> map = new HashMap<>();\n        for(int i = 0; i <= k; i++){\n            int curMax = 0;\n            int curVal = 0;\n            for(int j= 0; j < n; j++){\n                dp[i][j] = 1;\n//                for(int jj = 0; jj < j; jj++){\n//                    if(nums[jj] != nums[j] ){\n//                        if(i-1 >= 0){\n//                            dp[i][j] = Math.max(dp[i][j],dp[i-1][jj]+1);\n//\n//                        }\n//                    }else {\n//                        dp[i][j] = Math.max(dp[i][j],dp[i][jj]+1);\n//                    }\n//                }\n                \n                if(map.containsKey(nums[j])){\n                    dp[i][j] = Math.max(dp[i][j],map.get(nums[j])+1);\n                }\n                \n                if(curMax != 0){\n                    if(i-1 >= 0){\n                        dp[i][j] = Math.max(dp[i][j],curMax+1);\n                    }\n                }\n                \n                \n                if(i-1 >= 0 && dp[i-1][j] > curMax){\n                    curMax = dp[i-1][j];\n                    curVal = nums[j];\n                }\n                \n                map.put(nums[j],dp[i][j]);\n                max = Math.max(dp[i][j],max);\n            }\n            map = new HashMap<>();\n        }\n\n\n        return max;\n    }\n}",
    "submit_ts": 1717859934.0
}