{
    "username": "hhhyh",
    "submission": "class Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        set<int>l, r;\n        int n = colors.size();\n        l.insert(0), r.insert(n * 2 - 1);\n        vector<long long >c(n*2 + 1);\n        vector<int>c2(n*2 + 1);\n        long long sum = 0;\n        long long num = 0;\n        auto add = [&](int x, int d) {\n            for (int i = x; i<c.size(); i += i & -i)c[i] += x * d;\n            for (int i = x; i<c.size(); i += i & -i)c2[i] += d;\n            sum += x * d;\n            num += d;\n            cout << x << \" \" << d << endl;\n            };\n        auto asksum = [&](int x) {\n            long long res = 0;\n            for (int i = x - 1; i; i -= i & -i) {\n                res += c[i];\n            }\n            return sum - res;\n            };\n        auto asknum = [&](int x) {\n            long long res = 0;\n            for (int i = x - 1; i; i -= i & -i) {\n                res += c2[i];\n            }\n            return num - res;\n            };\n        colors.insert(colors.end(), colors.begin(), colors.end());\n        for (int i = 1; i < n * 2; i++) {\n            if (colors[i] == colors[i - 1]) {\n                l.insert(i), r.insert(i - 1);\n            }\n        }\n        set<pair<int, int>>v;\n        auto work = [&](int l, int r, int op) {\n            if (op == 1) {\n                if (v.count({ l,r }))return;\n                v.insert({ l,r });\n            }\n            else {\n                if (!v.count({ l,r }))return;\n                v.erase({ l,r });\n            }\n            if (r >= n && l >= n)return;\n            add(r - l + 1, op);\n            if (r >= n) {\n                int len = r - n + 1;\n                add(len, -op);\n            }\n        };\n        for (int i = 0; i < n; i++) {\n            auto fl = l.upper_bound(i);\n            fl--;\n            if (i == *fl) {\n                auto fr = r.lower_bound(i);\n                work(*fl, *fr, 1);\n            }\n        }\n        cout << \"over\\n\";\n        vector<int>ans;\n        for (auto q : queries) {\n            int op = q[0];\n            if (op == 1) {\n                int sz = q[1];\n                long long sum = asksum(sz);\n                long long num = asknum(sz);\n                ans.push_back(sum - num * sz + num);\n            }\n            else {\n                int i = q[1];\n                int c = q[2];\n                if (c == colors[i])continue;\n            \n                auto work1 = [&](int pos, int op) {\n                    if (pos && colors[pos] == colors[pos - 1]) {\n                        auto fr = pos - 1;\n                        auto fl = l.upper_bound(fr);\n                        fl--;\n                            work(*fl, fr, op);\n                    }\n                    if (pos + 1 < colors.size() && colors[pos] == colors[pos + 1]) {\n                        auto fl = pos + 1;\n                        auto fr = r.lower_bound(fl);\n                        work(fl, *fr, op);\n                    }\n                    {\n                        auto fl = l.upper_bound(pos);\n                        fl--;\n                  \n                        auto fr = r.lower_bound(*fl);\n                        work(*fl, *fr, op);\n                    }\n                    };\n                auto work2 = [&](int pos, bool flag) {\n                    if (pos && colors[pos] == colors[pos - 1]) {\n                        if (flag)l.erase(pos), r.erase(pos - 1);\n                        else l.insert(pos), r.insert(pos - 1);\n                    }\n                    if (pos + 1 < colors.size() && colors[pos] == colors[pos + 1]) {\n                        if (flag)l.erase(pos + 1), r.erase(pos);\n                        else l.insert(pos + 1), r.insert(pos);\n                    }\n                    };\n                work1(i, -1);\n                work1(i + n, -1);\n                work2(i, true);\n                work2(i+n, true);\n                colors[i] = c;\n                colors[i + n] = c;\n                work2(i, false);\n                work2(i+n, false);\n                work1(i, 1);\n                work1(i+n, 1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743897",
    "subm_id": "552353479"
}