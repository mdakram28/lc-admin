{
    "username": "Yao_Yin",
    "submission": "struct Point {\n    int idx;\n    int x;\n    int y;\n    Point(int a, int b, int c) {\n        idx = a;\n        x = b;\n        y = c;\n    }\n    void show() {\n        cout << idx << \" \" << x << \" \" << y << endl;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<Point> ps;\n        for (int i = 0; i < points.size(); i ++) {\n            ps.push_back(Point(i, points[i][0], points[i][1]));\n        }\n        auto ps2 = ps;\n        \n        sort(ps.begin(), ps.end(), [](const Point & a, const Point & b) {return a.x + a.y > b.x + b.y;});\n\n        sort(ps2.begin(), ps2.end(), [](const Point & a, const Point & b) {return a.x - a.y > b.x - b.y;});\n\n        int n = ps.size();\n        \n        \n        return min(min(getDist(ps, ps2, ps[0].idx), getDist(ps, ps2, ps[n-1].idx)), min(getDist(ps, ps2, ps2[0].idx), getDist(ps, ps2, ps2[n-1].idx)));\n        \n    }\n    \n    int getDist(vector<Point> & p1, vector<Point> & p2, int idx) {\n        int n = p1.size();\n        int ptr1 = 0, ptr2 = 0, ptr3 = n-1, ptr4 = n-1;\n        if (p1[ptr1].idx == idx) ptr1 ++;\n        if (p1[ptr3].idx == idx) ptr3 --;\n        if (p2[ptr2].idx == idx) ptr2 ++;\n        if (p2[ptr4].idx == idx) ptr4 --;\n        int res = max(get1(p1[ptr1], p1[ptr3]), get2(p2[ptr2], p2[ptr4]));\n        //cout << idx << \" \" << res << endl;\n        return res;\n    }\n    \n    int get1(Point & a, Point & b) {\n        return abs(a.x + a.y - b.x - b.y);\n    }\n    \n    int get2(Point & a, Point & b) {\n        return abs(a.x - a.y - b.x + b.y);\n    }\n};"
}