{
    "username": "kesihai",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    int n;\n    Node node;\n    int[] a;\n    public List<Integer> countOfPeaks(int[] a, int[][] queries) {\n        node = new Node();\n        this.a = a;\n        n = a.length;\n        node.build(0, n - 1, a);\n        List<Integer> ans = new ArrayList<>();\n        for (int[] q : queries) {\n            int op = q[0];\n            int le = q[1];\n            int ri = q[2];\n            if (op == 1) {\n                int tmp = node.query(le + 1, ri - 1);\n                ans.add(tmp);\n            } else {\n                a[le] = ri;\n                update(le - 1);\n                update(le);\n                update(le + 1);\n            }\n        }\n        return ans;\n    }\n\n    public void update(int pos) {\n        node.update(pos, check(pos, a) ? 1 : 0);\n    }\n\n    private boolean check(int pos, int[] a) {\n        if (pos <= 0 || pos >= a.length - 1) {\n            return false;\n        }\n        return a[pos] > a[pos - 1] && a[pos] > a[pos + 1];\n    }\n\n    private class Node {\n        int le, ri;\n        Node left, right;\n        int value;\n\n        void build(int le, int ri, int[] a) {\n            this.le = le;\n            this.ri = ri;\n            if (le == ri) {\n                value = check(le, a) ? 1 : 0;\n                return;\n            }\n            int mid = (le + ri) / 2;\n            left = new Node();\n            right = new Node();\n            left.build(le, mid, a);\n            right.build(mid + 1, ri, a);\n            pushUp();\n        }\n\n        private void pushUp() {\n            this.value = left.value + right.value;\n        }\n\n        void update(int pos, int v) {\n            if (pos < le || pos > ri) {\n                return;\n            }\n            if (le == ri) {\n                value = v;\n                return;\n            }\n            if (left.ri >= pos) {\n                left.update(pos, v);\n            } else {\n                right.update(pos, v);\n            }\n            pushUp();\n        }\n\n        int query(int le, int ri) {\n            if (le > ri) {\n                return 0;\n            }\n            if (le == this.le && ri == this.ri) {\n                return value;\n            }\n            if (left.ri >= ri) {\n                return left.query(le, ri);\n            } else if (right.le <= le) {\n                return right.query(le, ri);\n            } else {\n                return left.query(le, left.ri) + right.query(right.le, ri);\n            }\n        }\n    }\n}",
    "submit_ts": "1718507527",
    "subm_id": "539781919"
}