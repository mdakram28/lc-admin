{
    "username": "Ecstatic 6olickgQB",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& b) {\n        const int V = 10010;\n        const int E = 500100;\n        using T = long long;\n        struct MinCostGraph {\n            int s, t, vtot, etot, cur[V], head[V], pre[V];\n            T dis[V], flow, cost;\n            bool vis[V];\n\n            struct edge {\n                int v, nxt;\n                T f, c;\n            } e[E * 2];\n            void addedge(int u, int v, T f, T c, T f2 = 0) {\n                e[etot] = {v, head[u], f, c}; head[u] = etot ++;\n                e[etot] = {u, head[v], f2, -c}; head[v] = etot ++;\n            }\n            bool spfa() {\n                T inf = std::numeric_limits<T>::max() / 2;\n                for (int i = 1; i <= vtot; i ++) {\n                    dis[i] = inf;\n                    vis[i] = false;\n                    pre[i] = -1;\n                }\n                dis[s] = 0, vis[s] = true;\n                std::queue<int> q; q.push(s);\n                while (! q.empty()) {\n                    int u = q.front();\n                    for (int i = head[u]; ~i; i = e[i].nxt) {\n                        int v = e[i].v;\n                        if (e[i].f && dis[v] > dis[u] + e[i].c) {\n                            dis[v] = dis[u] + e[i].c;\n                            pre[v] = i;\n                            if (! vis[v]) {\n                                vis[v] = 1;\n                                q.push(v);\n                            }\n                        }\n                    }\n                    q.pop();\n                    vis[u] = false;\n                }\n                return dis[t] != inf;\n            }\n\n            void augment() {\n                int u = t;\n                T f = std::numeric_limits<T>::max();\n                while (~ pre[u]) {\n                    f = std::min(f, e[pre[u]].f);\n                    u = e[pre[u] ^ 1].v;\n                }\n                flow += f;\n                cost += f * dis[t];\n                u = t;\n                while (~ pre[u]) {\n                    e[pre[u]].f -= f;\n                    e[pre[u] ^ 1].f += f;\n                    u = e[pre[u] ^ 1].v;\n                }\n            }\n\n            std::array<T, 2> solve() {\n                flow = 0;\n                cost = 0;\n                while (spfa()) augment();\n                return {flow, cost};\n            }\n\n            void init(int _s, int _t, int _vtot) {\n                s = _s;\n                t = _t;\n                vtot = _vtot;\n                etot = 0;\n                for (int i = 1; i <= vtot; i ++) {\n                    head[i] = -1;\n                }\n            }\n        };\n        \n        MinCostGraph g;\n        int n = b.size(), m = b[0].size();\n        int e = n + m + 1, s = e + 1, t = e + 2;\n        g.init(s, t, t);\n        g.addedge(s, e, 3, 0);\n        for (int i = 1; i <= n; i ++) {\n            g.addedge(e, i, 1, 0);\n        }\n        for (int i = 1; i <= m; i ++) {\n            g.addedge(n + i, t, 1, 0);\n        }\n        for (int i = 1; i <= n; i ++) {\n            for (int j = 1; j <= m; j ++) {\n                long long cost = b[i - 1][j - 1];\n                g.addedge(i, n + j, 1, -cost);\n            }\n        }\n        auto it = g.solve();\n        \n        long long ans = -it[1];\n        return ans;\n    }\n};",
    "submit_ts": "1723906735",
    "subm_id": "556321430"
}