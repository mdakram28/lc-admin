{
    "username": "suhailkhan568",
    "submission": "class Solution {\nprivate:\n    long long solve(const vector<int>& nums, const vector<int>& target) {\n        int size = nums.size();\n        vector<int> differences(size, 0);\n\n        for (int i = 0; i < size; ++i) {\n            differences[i] = target[i] - nums[i];\n        }\n\n        int currentSign = 0;\n        long long currentMagnitude = 0, totalOperations = 0;\n\n        totalOperations = abs(differences[0]);\n        currentMagnitude = totalOperations;\n\n        if (differences[0] >= 0) {\n            currentSign = 1;\n        }\n\n        for (int i = 1; i < size; ++i) {\n            if (differences[i] < 0 && currentSign == 1) {\n                totalOperations += abs(differences[i]);\n                currentMagnitude = abs(differences[i]);\n                currentSign = 0;\n                continue;\n            }\n            if (differences[i] >= 0 && currentSign == 0) {\n                totalOperations += abs(differences[i]);\n                currentMagnitude = abs(differences[i]);\n                currentSign = 1;\n                continue;\n            }\n            if (currentMagnitude >= abs(differences[i])) {\n                currentMagnitude = abs(differences[i]);\n                continue;\n            } else {\n                totalOperations += abs(differences[i]) - currentMagnitude;\n                currentMagnitude = abs(differences[i]);\n            }\n        }\n\n        return totalOperations;\n    }\n\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        return solve(nums, target);\n    }\n};\n",
    "submit_ts": "1721532659",
    "subm_id": "1327991051"
}