{
    "username": "Bharat_133",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& h, vector<int>& v) {\n        \n        // Create a combined list of cuts with their respective types\n        vector<pair<int, char>> cuts;\n        for (int i = 0; i < h.size(); ++i) {\n            cuts.push_back({h[i], 'H'});\n        }\n        for (int j = 0; j < v.size(); ++j) {\n            cuts.push_back({v[j], 'V'});\n        }\n        \n        // Sort cuts in descending order based on cost\n        sort(cuts.rbegin(), cuts.rend());\n        \n        int horizontalPieces = 1; // Initial horizontal pieces\n        int verticalPieces = 1;   // Initial vertical pieces\n        long long  totalCost = 0;\n        \n        // Iterate through the sorted cuts\n        for (const auto& cut : cuts) {\n            int cost = cut.first;\n            char type = cut.second;\n            \n            // Choose the appropriate cost calculation based on cut type\n            if (type == 'H') {\n                totalCost += cost *1LL* verticalPieces;\n                ++horizontalPieces;\n            } else { // type == 'V'\n                totalCost += cost *1LL* horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925846",
    "subm_id": "1320268070"
}