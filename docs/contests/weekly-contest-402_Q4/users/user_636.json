{
    "username": "fervent-neumannhdm",
    "submission": "class Fenwick {\n    private:\n        int n;\n        vector<int> vc;\n\n        int lowbit(int x) {\n            return x & -x;\n        }\n\n        int prefix_sum(int index) {\n            int ans = 0;\n            while (index > 0) {\n                ans += vc[index];\n                index -= lowbit(index);\n            }\n            return ans;\n        }\n    \n    public:\n        Fenwick(int size) : n(size + 1), vc(n, 0) {}\n\n        void add(int val, int index) {\n            int var = index + 1;\n            while (var < n) {\n                vc[var] += val;\n                var += lowbit(var);\n            }\n        }\n\n        int query(int lb, int rb) {\n            return prefix_sum(rb + 1) - prefix_sum(lb);\n        }\n\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> ans;\n        int n = nums.size();\n        int cnt = 0;\n        Fenwick f(n);\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                f.add(1, i);\n            }\n        }\n        for (auto& vc : queries) {\n            if (vc[0] == 1) {\n                \n                if (vc[1] + 1 > vc[2] - 1) ans.push_back(0);\n                else {\n                    int q = f.query(vc[1] + 1, vc[2] - 1);\n                    ans.push_back(q);\n                }\n            } else {\n                int index = vc[1];\n                int val = vc[2];\n                // nums[index] = val;\n                if (index > 0 && index < n - 1) {\n                    int prev = (nums[index] > nums[index - 1] && nums[index] > nums[index + 1]);\n                    int cur = (val > nums[index - 1] && val > nums[index + 1]);\n                    f.add(cur - prev, index);\n                }\n                if (index - 1 > 0 && index - 1 < n - 1) {\n                    int prev = (nums[index - 1] > nums[index - 2] && nums[index - 1] > nums[index]);\n                    int cur = (nums[index - 1] > nums[index - 2] && nums[index - 1] > val);\n                    f.add(cur - prev, index - 1);\n                }\n                if (index + 1 > 0 && index + 1 < n - 1) {\n                    int prev = (nums[index + 1] > nums[index] && nums[index + 1] > nums[index + 2]);\n                    int cur = (nums[index + 1] > val && nums[index + 1] > nums[index + 2]);\n                    f.add(cur - prev, index + 1);\n                }\n                nums[index] = val;\n            }\n            \n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507804.0
}