{
    "username": "anujkamath2",
    "submission": "#include <vector>\n#include <unordered_map>\n    using namespace std;\n\nclass Solution {\n    int MOD = 1'000'000'007;\n    int MAX_INV = 400;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> reqMap;\n        for (auto& r : reqs) {\n            reqMap[r[0] + 1] = r[1];\n        }\n        \n        vector<std::vector<long>> dp(n + 1, vector<long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n        \n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                for (int pos = 0; pos < len; ++pos) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n            if (reqMap.count(len)) {\n                int targetInv = reqMap[len];\n                for (int inv = 0; inv <= MAX_INV; ++inv) {\n                    if (inv != targetInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n        \n        long res = 0;\n        for (long cnt : dp[n]) {\n            res = (res + cnt) % MOD;\n        }\n        return (int) res;\n    }\n};\n",
    "submit_ts": 1719070092.0
}