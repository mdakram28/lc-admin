{
    "username": "soliloquist",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    int search(const string& word) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) return INT_MAX;\n            node = node->children[c];\n        }\n        return node->cost;\n    }\n};\n\nclass Solution {\npublic:\n    int dp[100001];\n    \n    int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n        fill(dp, dp + 100001, INT_MAX);\n        int n = s.size();\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            string revWord = words[i];\n            reverse(revWord.begin(), revWord.end());\n            trie.insert(revWord, costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            TrieNode* node = trie.root;\n            for (int j = i; j >= 0; j--) {\n                if (!node->children.count(s[j])) break;\n                node = node->children[s[j]];\n                if (node->cost != INT_MAX && dp[j] != INT_MAX) {\n                    dp[i + 1] = min(dp[i + 1], dp[j] + node->cost);\n                }\n            }\n        }\n\n        return (dp[n] == INT_MAX) ? -1 : dp[n];\n    }\n};\n\n",
    "submit_ts": "1720322811",
    "subm_id": "1312359713"
}