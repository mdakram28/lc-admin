{
    "username": "w285714",
    "submission": "class Solution {\n    struct SegNode {\n        long long lo, hi;\n        long long M;\n        SegNode* lchild, *rchild;\n        SegNode(long long left, long long right): lo(left), hi(right), M(INT_MIN), lchild(nullptr), rchild(nullptr) {}\n    };\n    void insert(SegNode* root, long long val, long long v) {\n        root->M=max(root->M, v);\n        if (root->lo == root->hi) {\n            return;\n        }\n        long long mid = (root->lo + root->hi) >> 1;\n        if (val <= mid) {\n            if (!root->lchild) {\n                root->lchild = new SegNode(root->lo, mid);\n            }\n            insert(root->lchild, val, v);\n        }\n        else {\n            if (!root->rchild) {\n                root->rchild = new SegNode(mid + 1, root->hi);\n            }\n            insert(root->rchild, val, v);\n        }\n    }\n    void change(SegNode* root, long long val, long long v) {\n        if (root->lo == root->hi) {\n            root->M=v;\n            return;\n        }\n        long long mid = (root->lo + root->hi) >> 1;\n        if (val <= mid) {\n            change(root->lchild, val, v);\n            root->M=root->lchild->M;\n            if(root->rchild){\n                root->M=max(root->M,root->rchild->M);\n            }\n        }\n        else {\n            change(root->rchild, val, v);\n            root->M=root->rchild->M;\n            if(root->lchild){\n                root->M=max(root->M,root->lchild->M);\n            }\n        }\n        \n    }\n\n    long long count(SegNode* root, long long left, long long right) {\n        if (!root) {\n            return INT_MIN;\n        }\n        if (left > root->hi || right < root->lo) {\n            return INT_MIN;\n        }\n        if (left <= root->lo && root->hi <= right) {\n            return root->M;\n        }\n        return max(count(root->lchild, left, right), count(root->rchild, left, right));\n    }\n\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        set<int> s;\n        s.insert(0);\n        SegNode* a=new SegNode(0,500000);\n        // for(auto& q:queries){\n        //     if(q[0]==1){\n        //         insert(a,q[1],q[1]);\n        //     }\n        // }\n        for(auto& q:queries){\n            if(q[0]==1){\n                auto p=s.lower_bound(q[1]);\n                if(p!=s.end()){\n                    change(a,*p,*p-q[1]);\n                }\n                --p;\n                insert(a,q[1],q[1]-*p);\n                s.insert(q[1]);\n            }\n            else{\n                auto p=s.upper_bound(q[1]);\n                --p;\n                // cout<<\"q[1]=\"<<q[1]<<\" q[2]=\"<<q[2]<<endl;\n                // cout<<\"*p=\"<<(*p)<<endl;\n                // cout<<\"count=\"<<count(a,0,*p)<<endl;\n                if(q[1]-*p>=q[2]||count(a,0,*p)>=q[2]){\n                    res.push_back(1);\n                }\n                else{\n                    res.push_back(0);\n                }\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1716649771.0
}