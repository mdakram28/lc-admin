{
    "username": "sududu000",
    "submission": "class Solution {\npublic:\n    int s(vector<vector<int>> &graph, int start, int t1, int t2, int nodes) {\n    queue<int> que;\n    que.push(start);\n    vector<int> vi(nodes + 4, 0);\n    vi[start] = 1;\n    while (!que.empty()) {\n        int u = que.front();\n        que.pop();\n        for (int it : graph[u]) {\n            if (!vi[it]) {\n                que.push(it);\n                vi[it] = 1;\n            }\n        }\n    }\n    return vi[t1] || vi[t2];\n}\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        int nc=circles2.size();\n        vector<vector<int>> g(circles2.size() + 4);\n        vector<pair<pair<int, int>, int>> circles(circles2.size());\n        \n        for (int i = 0; i < nc; ++i) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].second=circles2[i][2];\n            circles[i].first.second=circles2[i][1];\n        }\n         for (int i = 0; i < nc; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                g[nc].push_back(i);\n                g[i].push_back(nc);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                g[nc + 2].push_back(i);\n                g[i].push_back(nc + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                g[nc + 1].push_back(i);\n                g[i].push_back(nc + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                g[nc + 3].push_back(i);\n                g[i].push_back(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2)+pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        int b = 0;\n        b = max(b, s(g, nc, nc + 1, nc + 2, nc + 4));\n        b = max(b, s(g, nc + 3, nc + 2, nc + 1, nc + 4));\n        if (b){return false;}\n        return true;\n    }\n};",
    "submit_ts": "1722137675",
    "subm_id": "1335770537"
}