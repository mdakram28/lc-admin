{
    "username": "aniketrastogi1444",
    "submission": "class Solution {\n    public static int minCostToConstruct(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Preprocess words and costs into a map\n        Map<String, Integer> wordCostMap = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            wordCostMap.put(word, Math.min(wordCostMap.getOrDefault(word, Integer.MAX_VALUE), cost));\n        }\n\n        // Iterate over each position in the target string\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            // Check all possible substrings starting at position i\n            for (Map.Entry<String, Integer> entry : wordCostMap.entrySet()) {\n                String word = entry.getKey();\n                int cost = entry.getValue();\n                int len = word.length();\n\n                if (i + len <= n && target.startsWith(word, i)) {\n                    dp[i + len] = Math.min(dp[i + len], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        return minCostToConstruct(target,words,costs);\n    }\n}",
    "submit_ts": "1720320987",
    "subm_id": "1312310270"
}