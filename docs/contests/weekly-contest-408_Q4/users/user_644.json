{
    "username": "srinadh_narne",
    "submission": "class Solution {\nprivate:\n    long long pow(int x, int y)\n    {\n        if (y == 0)\n            return 1;\n        else if (y % 2 == 0)\n            return pow(x, y / 2) * pow(x, y / 2);\n        else\n            return x * pow(x, y / 2) * pow(x, y / 2);\n    }\npublic:\n    int f(vector<vector<int>> &adj, int s, int t1, int t2, int n) {\n        vector<int> vis(n + 4, 0);\n        queue<int> q;\n        q.push(s);\n        vis[s] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : adj[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> adj(n + 4);\n        vector<pair<pair<int, int>, int>> temp_circle(n);\n        int circle_cnt = n;\n\n        for (int i = 0; i < circle_cnt; ++i) {\n            temp_circle[i].second = circles[i][2];\n            temp_circle[i].first.first = circles[i][0];\n            temp_circle[i].first.second = circles[i][1];\n        }\n\n        for (int i = 0; i < circle_cnt; ++i) {\n            if (temp_circle[i].first.first <= temp_circle[i].second) {\n                adj[circle_cnt].push_back(i);\n                adj[i].push_back(circle_cnt);\n            }\n            if (X - temp_circle[i].first.first <= temp_circle[i].second) {\n                adj[circle_cnt + 2].push_back(i);\n                adj[i].push_back(circle_cnt + 2);\n            }\n            if (temp_circle[i].first.second <= temp_circle[i].second) {\n                adj[circle_cnt + 1].push_back(i);\n                adj[i].push_back(circle_cnt + 1);\n            }\n            if (Y - temp_circle[i].first.second <= temp_circle[i].second) {\n                adj[circle_cnt + 3].push_back(i);\n                adj[i].push_back(circle_cnt + 3);\n            }\n            for (int j = i + 1; j < circle_cnt; ++j) {\n                double dist = sqrt(\n                    pow(temp_circle[i].first.first - temp_circle[j].first.first, 2) +\n                    pow(temp_circle[i].first.second - temp_circle[j].first.second, 2));\n                int radius_sum = temp_circle[i].second + temp_circle[j].second;\n                if (radius_sum >= dist) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        int can_move = 0;\n        can_move =\n                max(can_move,\n                f(adj, circle_cnt, circle_cnt + 1, circle_cnt + 2,\n                    circle_cnt + 4)); \n        can_move =\n            max(can_move,\n                f(adj, circle_cnt + 3, circle_cnt + 2, circle_cnt + 1,\n                    circle_cnt + 4));\n        if (can_move) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137856",
    "subm_id": "1335775625"
}