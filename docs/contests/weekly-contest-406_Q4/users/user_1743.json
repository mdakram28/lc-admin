{
    "username": "Pujitha1503",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        // Use priority queues (max-heaps) to fetch the maximum cost cut available\n        priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n        \n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        \n        // Process cuts until we have made all necessary cuts\n        while (!hCuts.empty() && !vCuts.empty()) {\n            if (hCuts.top() > vCuts.top()) {\n                totalCost += (long long)hCuts.top() * verticalPieces;\n                hCuts.pop();\n                ++horizontalPieces;\n            } else {\n                totalCost += (long long)vCuts.top() * horizontalPieces;\n                vCuts.pop();\n                ++verticalPieces;\n            }\n        }\n        \n        // Process remaining horizontal cuts, if any\n        while (!hCuts.empty()) {\n            totalCost += (long long)hCuts.top() * verticalPieces;\n            hCuts.pop();\n        }\n        \n        // Process remaining vertical cuts, if any\n        while (!vCuts.empty()) {\n            totalCost += (long long)vCuts.top() * horizontalPieces;\n            vCuts.pop();\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926438",
    "subm_id": "1320286262"
}