{
    "username": "seedjyh",
    "submission": "\ntypedef long long LL;\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int R = board.size();\n        int C = board[0].size();\n        vector<vector<int>> tmp(R, vector<int>(C));\n        LL ans = (LL)INT_MIN * 3;\n        leftUp(board, tmp);\n        ans = max(ans, calc(tmp));\n        leftDown(board, tmp);\n        ans = max(ans, calc(tmp));\n        rightUp(board, tmp);\n        ans = max(ans, calc(tmp));\n        rightDown(board, tmp);\n        ans = max(ans, calc(tmp));\n        return ans;\n    }\n    void leftUp(const vector<vector<int>> &in, vector<vector<int>> &out) {\n        int R = in.size();\n        int C = in[0].size();\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                out[i][j] = in[i][j];\n            }\n        }\n    }\n    void leftDown(const vector<vector<int>> &in, vector<vector<int>> &out) {\n        int R = in.size();\n        int C = in[0].size();\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                out[R - 1 - i][j] = in[i][j];\n            }\n        }\n    }\n    void rightUp(const vector<vector<int>> &in, vector<vector<int>> &out) {\n        int R = in.size();\n        int C = in[0].size();\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                out[i][C - 1 - j] = in[i][j];\n            }\n        }\n    }\n    void rightDown(const vector<vector<int>> &in, vector<vector<int>> &out) {\n        int R = in.size();\n        int C = in[0].size();\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                out[R - 1 - i][C - 1 - j] = in[i][j];\n            }\n        }\n    }\n    LL calc(const vector<vector<int>> &board) {\n        int R = board.size();\n        int C = board[0].size();\n        vector<vector<LL>> dp = calcLeftUpTwo(board);\n        LL ans = (LL)INT_MIN * 3;\n        for (int i = 2; i < R; i++) {\n            for (int j = 2; j < C; j++) {\n                ans = max(ans, (LL)board[i][j] + dp[i - 1][j - 1]);\n            }\n        }\n        return ans;\n    }\n    vector<vector<LL>> calcLeftUpTwo(const vector<vector<int>> &board) {\n        int R = board.size();\n        int C = board[0].size();\n\n        vector<vector<LL>> leftUpMax(R, vector<LL>(C));\n        for (int i = 0; i < R; i++) {\n            for (int j = 0; j < C; j++) {\n                leftUpMax[i][j] = board[i][j];\n                if (i - 1 >= 0) {\n                    leftUpMax[i][j] = max(leftUpMax[i][j], leftUpMax[i - 1][j]);\n                }\n                if (j - 1 >= 0) {\n                    leftUpMax[i][j] = max(leftUpMax[i][j], leftUpMax[i][j - 1]);\n                }\n            }\n        }\n\n        vector<LL> colMax(C, (LL)INT_MIN);\n        for (int j = 0; j < C; j++) {\n            colMax[j] = board[0][j];\n        }\n\n        vector<vector<LL>> ans(R, vector<LL>(C));\n        ans[1][1] = max(board[0][0] + board[1][1], board[0][1] + board[1][0]);\n        for (int i = 1; i < R; i++) {\n            LL rowMax = board[i][0];\n            for (int j = 1; j < C; j++) {\n                if (i > 1 || j > 1) {\n                    ans[i][j] = (LL)INT_MIN * 3;\n                    if (i >= 2) {\n                        ans[i][j] = max(ans[i][j], ans[i - 1][j]);\n                    }\n                    if (j >= 2) {\n                        ans[i][j] = max(ans[i][j], ans[i][j - 1]);\n                    }\n                    ans[i][j] = max(ans[i][j], board[i][j] + leftUpMax[i - 1][j - 1]);\n                    ans[i][j] = max(ans[i][j], rowMax + colMax[j]);\n                }\n                rowMax = max(rowMax, (LL)board[i][j]);\n                colMax[j] = max(colMax[j], (LL)board[i][j]);\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1723909789",
    "subm_id": "556337979"
}