{
    "username": "jeffreyhu8",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        # print(\"K\", k)\n        res = 0\n        for jumps in range(100):\n            net = 2 ** jumps\n            subs = net - k\n            \n            if subs < 0 or subs > jumps + 1:\n                continue\n            # print(jumps, subs)\n            res += comb(jumps + 1, subs)\n        return res\n        \n        # need to do log(k - 1) jumps and 2^(log(k - 1)) - 1 - k downs\n        \n        # print(\"K\", k)\n        \n#         q = [(1, 0, False, None, None, None)]\n#         ways = defaultdict(int)\n#         ways[None, None, None] = 1\n#         res = 0\n#         add = 0\n#         while q:\n#             p, jump, down, prevp, prevjump, prevdown = heappop(q)\n            \n#             # print(p, jump, down)\n            \n#             if p - 1 == k:\n#                 add += ways[prevp, prevjump, prevdown]\n#                 continue\n            \n#             if p - 1 > k:\n#                 continue\n            \n#             prev = ways[p, jump, down]\n#             ways[p, jump, down] += ways[prevp, prevjump, prevdown]\n#             if prev > 0:\n#                 continue\n            \n#             heappush(q, (p + 2 ** jump, jump + 1, False, p, jump, down))\n#             if p > 0 and not down:\n#                 heappush(q, (p + 2 ** jump - 1, jump + 1, False, p, jump, down))\n        \n#         res = 0\n#         for i in range(100):\n#             for j in [False, True]:\n#                 res += ways[k, i, j]\n#         return res + add",
    "submit_ts": "1716087406",
    "subm_id": "1261782690"
}