{
    "username": "psychological",
    "submission": "from sortedcontainers import SortedList\n\nclass SegmentTree:\n    def __init__(self, n):\n        self._base = 1\n        while self._base < n:\n            self._base *= 2\n        self._tree = [0] * (self._base * 2)\n\n    def set(self, i, x):\n        i += self._base\n        self._tree[i] = x\n        i //= 2\n        while i >= 1:\n            self._tree[i] = max(self._tree[i * 2], self._tree[i * 2 + 1])\n            i //= 2\n\n    def max(self, l, r):\n        l += self._base\n        r += self._base\n        res = 0\n        while l <= r:\n            if l % 2 == 1:\n                res = max(res, self._tree[l])\n                l += 1\n            if r % 2 == 0:\n                res = max(res, self._tree[r])\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n\nN = 2 ** 16\n\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        sl = SortedList([(0, N)])\n        st = SegmentTree(N)\n        st.set(0, N)\n        res = []\n        for q in queries:\n            x = q[1]\n            if q[0] == 1:\n                i = sl.bisect_right((x, inf)) - 1\n                y, n = sl[i]\n                sl.remove((y, n))\n                if y < x:\n                    sl.add((y, x - y))\n                    st.set(y, x - y)\n                if y + n > x:\n                    sl.add((x, n - (x - y)))\n                    st.set(x, n - (x - y))\n                #print(sl)\n            else:\n                sz = q[2]\n                res.append(st.max(0, x - sz) >= sz)\n        return res\n                ",
    "submit_ts": 1716649794.0
}