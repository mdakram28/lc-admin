{
    "username": "hoangls",
    "submission": "class Solution {\npublic:\n    static bool cmp( vector<int>& a, vector<int>& b ) {\n        if ( a[1] == b[1] ) {\n            if ( a[0] == b[0] ) {\n                return a[2] < b[2];\n            }\n            return a[0] < b[0];\n        }\n        return a[1] < b[1];\n    }\n    static bool cmp1( vector<int>& a, vector<int>& b ) {\n        if ( a[1] == b[1] ) {\n            if ( a[0] == b[0] ) {\n                return a[2] < b[2];\n            }\n            return a[0] < b[0];\n        }\n        return a[1] > b[1];\n    }\n    bool check_circles(long long x1, long long y1, long long r1, long long x2, long long y2, long long r2 ) {\n        double d = sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n        if ( d <= r1 - r2 || d <= r1 - r2 || d <= r1 + r2 ) return true;\n        return false;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        sort(circles.begin(),circles.end());\n        int n = circles.size();\n        vector<bool> dp(n,false);\n        for ( int i = 0 ; i < circles.size() ; ++i ) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if ( x - r <= 0 ) dp[i] = true;\n            else {\n                for ( int j = 0 ; j < i && !dp[i]; ++j ) {\n                    int x1 = circles[j][0];\n                    int y1 = circles[j][1];\n                    int r1 = circles[j][2];\n                    if ( check_circles(x,y,r,x1,y1,r1) && dp[j] ) {\n                        cout<<x<<\" \"<<y<<\" \"<<r<<'\\n';\n                        cout<<x1<<\" \"<<y1<<\" \"<<r1<<'\\n';\n                        dp[i] = true;\n                    }\n                }\n            }\n            if ( x + r >= X && dp[i]  ) {\n                return false;\n            }\n        }\n\n        //case2\n        cout<<\"check2\"<<'\\n';\n        sort(circles.begin(),circles.end(),cmp);\n\n\n        for ( int i = 0 ; i < n ; ++i ) \n            dp[i] = false;\n        for ( int i = 0 ; i < circles.size() ; ++i ) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if ( y - r <= 0 ) dp[i] = true;\n            else {\n                for ( int j = 0 ; j < i && !dp[i]; ++j ) {\n                    int x1 = circles[j][0];\n                    int y1 = circles[j][1];\n                    int r1 = circles[j][2];\n                    if ( check_circles(x,y,r,x1,y1,r1) && dp[j] ) {\n                        dp[i] = true;\n                    }\n                }\n            }\n            if ( y + r >= Y && dp[i]  ) {\n                return false;\n            }\n        }\n\n        //case3\n        cout<<\"check3\"<<'\\n';\n        sort(circles.begin(),circles.end(),cmp1);\n\n        for ( int i = 0 ; i < n ; ++i ) \n            dp[i] = false;\n        for ( int i = 0 ; i < circles.size() ; ++i ) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if ( y + r >= Y ) dp[i] = true;\n            else {\n                for ( int j = 0 ; j < i && !dp[i]; ++j ) {\n                    int x1 = circles[j][0];\n                    int y1 = circles[j][1];\n                    int r1 = circles[j][2];\n                    if ( check_circles(x,y,r,x1,y1,r1) && dp[j] ) {\n                        dp[i] = true;\n                    }\n                }\n            }\n            if ( x + r >= X && dp[i]  ) {\n                return false;\n            }\n        }\n\n        //case4\n        cout<<\"check4\"<<'\\n';\n        sort(circles.begin(),circles.end(),cmp1);\n\n        for ( int i = 0 ; i < n ; ++i ) \n            dp[i] = false;\n        for ( int i = 0 ; i < circles.size() ; ++i ) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            if ( x - r <= 0 ) dp[i] = true;\n            else {\n                for ( int j = 0 ; j < i && !dp[i]; ++j ) {\n                    int x1 = circles[j][0];\n                    int y1 = circles[j][1];\n                    int r1 = circles[j][2];\n                    if ( check_circles(x,y,r,x1,y1,r1) && dp[j] ) {\n                        dp[i] = true;\n                    }\n                }\n            }\n            if ( y - r <= 0 && dp[i]  ) {\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138498",
    "subm_id": "1335792293"
}