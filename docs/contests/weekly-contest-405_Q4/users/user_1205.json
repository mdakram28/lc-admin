{
    "username": "ayush001dahiya",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> a; // children\n    vector<pair<int, int>> b; // word_ends\n};\n\nclass Trie {\npublic:\n    TrieNode* c; // root\n\n    Trie() {\n        c = new TrieNode();\n    }\n\n    void d(string e, int f, int g) { // insert\n        TrieNode* h = c; // node\n        for (char i : e) { // c\n            if (!h->a.count(i)) {\n                h->a[i] = new TrieNode();\n            }\n            h = h->a[i];\n        }\n        h->b.push_back({f, g});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string j, vector<string>& k, vector<int>& l) { // target, words, costs\n        int m = j.size(); // n\n        vector<int> n(m + 1, INT_MAX); // dp\n        n[0] = 0;\n\n        Trie o; // trie\n        for (int p = 0; p < k.size(); ++p) { // i\n            o.d(k[p], p, l[p]);\n        }\n\n        for (int q = 0; q < m; ++q) { // i\n            if (n[q] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* r = o.c; // node\n            for (int s = q; s < m; ++s) { // j\n                if (!r->a.count(j[s])) {\n                    break;\n                }\n                r = r->a[j[s]];\n                for (auto& t : r->b) { // p\n                    int u = k[t.first].size(); // word_len\n                    if (q + u <= m) {\n                        n[q + u] = min(n[q + u], n[q] + t.second);\n                    }\n                }\n            }\n        }\n\n        return n[m] == INT_MAX ? -1 : n[m];\n    }\n};",
    "submit_ts": "1720323086",
    "subm_id": "1312366974"
}