{
    "username": "SCP5514_Dragonslayer",
    "submission": "#include <vector>\n#include <cmath>\n#include <iostream>\nusing namespace std;\n\nclass Solution {\npublic:\n    class SparseTable {\n    public:\n        vector<vector<int>> table;\n        int N;\n        int K;\n\n    public:\n        SparseTable(const vector<int>& arr) {\n            N = arr.size();\n            K = log2(N) + 1;\n            table.assign(N, vector<int>(K, 0));\n\n            for (int i = 0; i < N; ++i) {\n                table[i][0] = arr[i];\n            }\n\n            for (int j = 1; j < K; ++j) {\n                for (int i = 0; i + (1 << j) <= N; ++i) {\n                    table[i][j] = table[i][j - 1] & table[i + (1 << (j - 1))][j - 1];\n                }\n            }\n        }\n\n        int query(int L, int R) {\n            int result = table[L][0];\n            int width = R - L + 1;\n            int k = log2(width);\n\n            result &= table[L][k];  // Apply the first part of the range\n            result &= table[R - (1 << k) + 1][k];  // Apply the second part of the range\n\n            return result;\n        }\n    };\n\n    int minimumDifference(vector<int>& nums, int k) {\n        SparseTable st(nums);\n        int n = nums.size();\n        int ans = INT_MAX;\n        if(n==1){\n            return abs(nums[0] - k);\n        }\n        for(int i = 0; i < nums.size(); i++){\n            int lo = i-1;\n            int hi = n;\n            while(lo + 1 < hi){\n                int mid = (lo + hi)/2;\n                int val = st.query(i,mid);\n                if(val<k){\n                    hi = mid;\n                }\n                else{\n                    lo = mid;\n                }\n            }\n            int val1 = abs(k - st.query(i,max(i,lo)));\n            int val2 = abs(k - st.query(i,min(n-1,hi)));\n            ans = min(ans,min(val1,val2));\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": 1717298711.0
}