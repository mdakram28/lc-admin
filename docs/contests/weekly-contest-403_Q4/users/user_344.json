{
    "username": "Zellon",
    "submission": "class Solution {\npublic:\n    const int inf = 1<<20;\n    int ans = inf;\n    int cover_area(vector<vector<int>>& grid, int x0, int x1, int y0, int y1) {\n        int min_i = inf, max_i = 0, min_j = inf, max_j = 0;\n        bool exist = false;\n        for (int i = x0; i <= x1; ++i) {\n            for (int j = y0; j <= y1; ++j) {\n                if (grid[i][j]) {\n                    min_i = min(min_i, i);\n                    max_i = max(max_i, i);\n                    min_j = min(min_j, j);\n                    max_j = max(max_j, j);\n                    exist = true;\n                }\n            }\n        }\n        if (!exist) {\n            return inf;\n        }\n        int ret = (max_i - min_i + 1) * (max_j - min_j + 1);\n        // cout << x0 << \" \" << x1 << \" \" << y0 << \" \" << y1 << \" \" << ret << endl;\n        return ret;\n    }\n    \n    void check_horizontal(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int min_i = inf, max_i = 0, min_j = inf, max_j = 0;\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                if (grid[i][j]) {\n                    min_i = min(min_i, i);\n                    max_i = max(max_i, i);\n                    min_j = min(min_j, j);\n                    max_j = max(max_j, j);\n                }\n            }\n        }\n        // split horizontally at row x\n        for (int x = min_i; x < max_i; ++x) {\n            // split vertically at column y\n            // case I: on the bottom\n            int area1 = cover_area(grid, min_i, x, min_j, max_j);\n            int min_area = inf;\n            for (int y = min_j; y < max_j; ++y) {\n                int tmp = cover_area(grid, x + 1, max_i, min_j, y) + cover_area(grid, x + 1, max_i, y + 1, max_j);\n                min_area = min(tmp, min_area);\n            }\n            ans = min(ans, area1 + min_area);\n\n            // case II: on the top\n            int area2 = cover_area(grid, x + 1, max_i, min_j, max_j);\n            min_area = inf;\n            for (int y = min_j; y < max_j; ++y) {\n                int tmp = cover_area(grid, min_i, x, min_j, y) + cover_area(grid, min_i, x, y + 1, max_j);\n                min_area = min(tmp, min_area);\n            }\n            ans = min(ans, area2 + min_area);\n            \n            // case III: three horizontal parts\n            min_area = inf;\n            for (int x_next = x + 1; x_next < max_i; ++x_next) {\n                int tmp = cover_area(grid, x + 1, x_next, min_j, max_j) + cover_area(grid, x_next + 1, max_i, min_j, max_j);\n                min_area = min(tmp, min_area);\n            }\n            ans = min(ans, area1 + min_area);\n        }\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        check_horizontal(grid);\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> grid_transpose(n, vector<int>(m));\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                grid_transpose[j][i] = grid[i][j];\n            }\n        }\n        check_horizontal(grid_transpose);\n        return ans;\n    }\n};",
    "submit_ts": 1719114194.0
}