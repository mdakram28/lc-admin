{
    "username": "Priyanshu236",
    "submission": "class Solution {\npublic:\n    int N;\n    vector<int> v, Tree;\n\n    void buildTree(int tidx, int lo, int hi){\n\n        if(lo==hi){\n            // cout<<tidx<<\" \"<<lo<<\" \"<<hi<<endl;\n            Tree[tidx] = v[hi];\n            \n            return;\n        }\n\n        int mid = (lo+hi)/2;\n\n        buildTree(2*tidx+1, lo, mid);\n        buildTree(2*tidx+2, mid+1, hi);\n\n        Tree[tidx] = Tree[2*tidx+1] & Tree[2*tidx+2];\n\n    }\n\n    int query(int tidx, int lo, int hi, int L, int R){\n\n        // The Range which we are currently in : [lo, hi]\n        // The Range of which we have to compute the answer : [L, R]\n\n        // Outside Range\n        if( R<lo || L>hi )\n            return (1ll<<31) - 1;\n\n        // In Range\n        if( lo>=L && hi<=R )\n            return Tree[tidx];\n\n        // Partial Overlap\n        int mid = (lo+hi)/2;\n        int leftans = query(2*tidx+1, lo, mid, L, R);\n        int rightans = query(2*tidx+2, mid+1, hi, L, R);\n\n        return leftans & rightans;\n\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        N = nums.size();\n        v = nums;\n        int n = N;\n        Tree.assign(4*N + 10, (1ll<<31) - 1);\n        buildTree(0, 0, N-1);\n\n        long long ans =0;\n      \n        for(int i=0;i<n;i++)\n        {\n            int l = i, h = n - 1;\n            int st = n;\n            while(l <= h)\n            {\n                int md = (l+h)/2;\n                int qq = query(0,0,n-1,i,md);\n                if(qq > k)\n                {\n                    l = md + 1;\n                }\n                else if(qq==k)\n                {\n                    st = md;\n                    h=md-1;\n                }\n                else\n                {\n                    h=md-1;\n                }\n            }\n            \n            int en = 0;\n            l=i,h=n-1;\n            while(l <= h)\n            {\n                int md = (l+h)/2;\n                int qq = query(0,0,n-1,i,md);\n                if(qq > k)\n                {\n                    l = md + 1;\n                }\n                else if(qq==k)\n                {\n                    en = md;\n                    l=md+1;\n                }\n                else\n                {\n                    h=md-1;\n                }\n            }\n            \n            ans += max(0,en-st+1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279681",
    "subm_id": "1311760919"
}