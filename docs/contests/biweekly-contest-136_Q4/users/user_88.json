{
    "username": "nikatamliani1",
    "submission": "class Solution {\npublic:\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = (int)edges.size() + 1;\n        vector<vector<int>> g(n);\n        for (auto e : edges) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        \n        vector<int> ans(n), sub(n);\n        \n        \n        auto dfs = [&](auto self, int x, int p) -> void {\n            multiset<int> m = {0};\n            for (int child : g[x]) {\n                if (child != p) {\n                    self(self, child, x);\n                    int cv = sub[child] + 1 + (child % 2 == 0);\n                    sub[x] = max(sub[x], cv);\n                    m.insert(cv);\n                }\n            }\n            \n        };\n        \n        auto reroot = [&](auto self, int x, int p, int without_me = 0) -> void {\n            int parent_cost = without_me + 1 + (p % 2 == 0); \n            \n            multiset<int> m = {0};\n            for (int child : g[x]) {\n                if (child != p) {\n                    int cv = sub[child] + 1 + (child % 2 == 0);\n                    m.insert(cv);\n                } else {\n                    m.insert(parent_cost);\n                }\n            }\n            \n            ans[x] = *m.rbegin();\n            for (int child : g[x]) {\n                if (child != p) {\n                    int cv = sub[child] + 1 + (child % 2 == 0);\n                    m.erase(m.find(cv));\n                    self(self, child, x, *m.rbegin());\n                    m.insert(cv);\n                }\n            }\n            \n        };\n        \n        dfs(dfs, 0, -1);\n        reroot(reroot, 0, -1, -1);\n        \n        return ans;\n    }\n};",
    "submit_ts": "1722697955",
    "subm_id": "1343164840"
}