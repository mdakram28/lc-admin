{
    "username": "itzRaghav",
    "submission": "const int MX = (1LL << 31) - 1;\n\nstruct Node {\n    long long val;\n    Node(): val(MX) {}\n    Node(long long v): val(v) {}\n    friend Node merge(Node l, Node r) { return Node(l.val & r.val); }\n    void update(long long v) { val = v; }\n};\n\nstruct SegmentTree {\n    int n;\n    vector<Node> seg;\n    SegmentTree(int _n): n(_n), seg(2 * _n) {}\n    template <typename Type>\n    SegmentTree(vector<Type> a) {\n        n = int(a.size());\n        seg.resize(2 * n);\n        for (int i = 0; i < n; i++) seg[i + n] = Node(a[i]);\n        for (int i = n - 1; i > 0; i--) seg[i] = merge(seg[i << 1], seg[i << 1 | 1]);\n    }\n    void update(int i, long long v) {\n        for (seg[i += n].update(v); i >>= 1; ) seg[i] = merge(seg[i << 1], seg[i << 1 | 1]);\n    }\n    Node query(int l, int r) {\n        Node resl, resr;\n        for (l += n, r += n + 1; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) resl = merge(resl, seg[l++]);\n            if (r & 1) resr = merge(seg[--r], resr);\n        }\n        return merge(resl, resr);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& a, int k) {\n        int n = a.size();\n        long long ans = 1e9 + 5;\n        SegmentTree sg(a);\n        \n        auto find = [&] (int i) {\n            int s = i, e = n - 1, res = n;\n            while (s <= e) {\n                int m = (s + e) >> 1;\n                if (sg.query(i, m).val <= k) res = m, e = m - 1;\n                else s = m + 1;\n            }\n            return res;\n        };\n        \n        for (int i = 0; i < n; i++) {\n            int first = find(i);\n            if (first < n) ans = min(ans, abs(k - sg.query(i, first).val));\n            if (first > i) ans = min(ans, abs(k - sg.query(i, first - 1).val));\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717296813",
    "subm_id": "1274718870"
}