{
    "username": "jyyzlzy",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        # from sortedcontainers import SortedList\n        points.sort()\n        def find_max_dist(points_selected):\n            # # northwest - southeast\n            # explored = SortedList()\n            # for idx, (x, y) in enumerate(points_selected):\n            #     pass\n            res, n = 0, len(points_selected)\n            idx_small, idx_large = -1, -1\n            for p, q in [[1, 1], [1, -1], [-1, 1], [-1, -1]]:\n                smallest = p * points_selected[0][0] + q * points_selected[0][1]\n                idx1 = 0\n                for i in range(1, n):\n                    cur = p * points_selected[i][0] + q * points_selected[i][1]\n                    if cur - smallest > res:\n                        res = max(res, cur - smallest)\n                        idx_small, idx_large = idx1, i\n                    if cur < smallest:\n                        idx1 = i\n                        smallest = cur\n            return res, idx_small, idx_large # dist, idx1, idx2\n        \n        _, idx1, idx2 = find_max_dist(points)\n        d1, _, _ = find_max_dist(points[:idx1] + points[(idx1+1):])\n        d2, _, _ = find_max_dist(points[:idx2] + points[(idx2+1):])\n        return min(d1, d2)\n        "
}