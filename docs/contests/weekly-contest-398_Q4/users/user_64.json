{
    "username": "nevergiveup",
    "submission": "class Solution {\n\n    private static class Element {\n        public long position;\n        public int jump;\n        public int down;\n        public Element(long position , int jump , int down) {\n            this.position = position;\n            this.jump = jump;\n            this.down = down;\n        }\n        @Override\n        public int hashCode() {\n            long ans = 31;\n            ans = ans * 37 + position;\n            ans = ans * 37 + jump;\n            ans = ans * 37 + down;\n            return (int) (ans);\n        }\n        @Override\n        public boolean equals(Object object) {\n            Element e = (Element) object;\n            return this.position == e.position && this.jump == e.jump && this.down == e.down;\n        }\n    }\n\n    private Map<Element , Integer> dp = new HashMap<>();\n\n    public int waysToReachStair(int k) {\n        return solve(1 , 0 , 0 , k);\n    }\n\n    private long jumpStep(int jump) {\n        long ans = 1;\n        for (int i = 0;i < jump;i ++) {\n            ans *= 2;\n        }\n        return ans;\n    }\n\n    private int solve(long position , int jump , int down , int k) {\n        Element e = new Element(position , jump , down);\n        if (dp.containsKey(e)) {\n            return dp.get(e);\n        }\n        int ans = 0;\n        if (position == k) {\n            ans ++;\n        }\n        // try jump\n        if (position <= k) {\n            ans += solve(position + jumpStep(jump) , jump + 1, 0 , k);\n        }\n        if (down == 0 && position > 0) {\n            ans += solve(position - 1, jump, 1, k);\n        }\n        dp.put(e , ans);\n        return ans;\n    }\n\n\n}",
    "submit_ts": 1716087156.0
}