{
    "username": "singh_deopa",
    "submission": "struct STree {\n    vector<int> st;\n    \n    STree(int n) {\n        int sz = ceil(log2(1.0 * n));\n        sz = 1 << (sz + 1);\n        st.resize(sz);\n    }\n    \n    int mid(int& l, int& r) {\n        return l + ((r - l) >> 1);\n    }\n    \n    int lchild(int& i) {\n        return i << 1 | 1;\n    }\n    \n    void update(int tl, int tr, int i, int pos, int val) {\n        if (tl == tr) {\n            st[i] = val;\n            \n            return;\n        }\n        \n        int mi = mid(tl, tr);\n        int chl = lchild(i);\n        \n        if (pos <= mi) {\n            update(tl, mi, chl, pos, val);\n        }\n        else {\n            update(mi + 1, tr, chl + 1, pos, val);\n        }\n        \n        st[i] = max(st[chl], st[chl + 1]);\n    }\n    \n    int get(int tl, int tr, int i, int ql, int qr) {\n        // cout << ql << \" \" << qr << \" \" << tl << \" \" << tr << \"\\n\";\n        if (ql > qr) {\n            // cout << ql << \" \" << qr << \" \" << tl << \" \" << tr << \"\\n\";\n            return 0;\n        }\n        \n        if (ql <= tl && tr <= qr) {\n            return st[i];\n        }\n        \n        int mi = mid(tl, tr);\n        int chl = lchild(i);\n        \n        return max(\n            get(tl, mi, chl, ql, min(qr, mi)),\n            get(mi + 1, tr, chl + 1, max(ql, mi + 1), qr)\n        );\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> res;\n        set<int> st;\n        int N = 50001;\n        STree* stree = new STree(N);\n        \n        for (auto& query: queries) {\n            if (query[0] == 1) {\n                int x = query[1];\n                auto it = st.lower_bound(x);\n                \n                if (it != st.end()) {\n                    // cout << x << \" \" << (*it) << \"\\n\";\n                    stree->update(0, N - 1, 0, (*it), (*it) - x);\n                }\n                \n                int prev = 0;\n                \n                if (it != st.begin()) {\n                    it--;\n                    prev = (*it);\n                    // cout << x << \" \" << (*it) << \"\\n\";\n                }\n                \n                stree->update(0, N - 1, 0, x, x - prev);\n                st.insert(x);\n                \n                // cout << x << \" \" << stree->st[0] << \"\\n\";\n            }\n            else {\n                int x = query[1];\n                int sz = query[2];\n                \n                if (x < sz) {\n                    res.push_back(false);\n                }\n                else {\n                    auto it = st.lower_bound(x);\n                    int prev = 0;\n                    \n                    if (it != st.begin()) {\n                        it--;\n                        prev = (*it);\n                    }\n                    \n                    // cout << x << \" \" << prev << \" \" << sz << \"\\n\";\n                    // stree->get(0, N - 1, 0, 0, prev);\n                    res.push_back(x - prev >= sz || stree->get(0, N - 1, 0, 0, prev) >= sz);\n                    // break;\n                }\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1716650102.0
}