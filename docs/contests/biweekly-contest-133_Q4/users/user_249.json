{
    "username": "rajcoder21",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MOD = 1_000_000_007;\n    private static final int MAX_INVERSIONS = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        \n\n        Map<Integer, Integer> requirementsMap = new HashMap<>();\n        for (int[] req : requirements) {\n            requirementsMap.put(req[0] + 1, req[1]);\n        }\n\n        long[][] permutationCounts = new long[n + 1][MAX_INVERSIONS + 1];\n        permutationCounts[0][0] = 1;\n\n    \n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int previousInversions = inv - newPos;\n                    if (previousInversions >= 0) {\n                        permutationCounts[length][inv] = (permutationCounts[length][inv] + permutationCounts[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n       \n\n            if (requirementsMap.containsKey(length)) {\n                int targetInversions = requirementsMap.get(length);\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInversions) {\n                        permutationCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : permutationCounts[n]) {\n            result = (result + count) % MOD;\n        }\n\n        \n        return (int) result;\n    }\n\n   \n}\n",
    "submit_ts": "1719069903",
    "subm_id": "1296809377"
}