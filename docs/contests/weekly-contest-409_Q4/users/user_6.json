{
    "username": "PurpleCrayon",
    "submission": "typedef long long ll;\n#define sz(v) int(v.size())\ntemplate<class T>\nstruct FT {\n    vector<T> bit;\n    FT(int n) : bit(n) {}\n    FT(){}\n    void upd(int i, T x) {\n        for (; i < sz(bit); i |= i+1) bit[i] += x;\n    }\n    T qry(int r) {\n        T ans = T();\n        for (++r; r > 0; r &= r-1) ans += bit[r-1];\n        return ans;\n    }\n    T qry(int l, int r) {\n        return qry(r)-qry(l-1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        int n = colors.size();\n        set<int> locs; // (i, i + 1) is bad\n\n        auto dist = [&](int a, int b) {\n            if (a < b) return b - a;\n            return n - a + b;\n        };\n\n        auto nxt = [&](int i) {\n            auto it = locs.upper_bound(i);\n            if (it == locs.end()) return *locs.begin();\n            return *it;\n        };\n\n        auto prv = [&](int i) {\n            auto it = locs.lower_bound(i);\n            if (it == locs.begin()) return *prev(locs.end());\n            return *prev(it);\n        };\n\n        FT<ll> sum_sz(n + 1);\n        FT<ll> cnt_sz(n + 1);\n        auto ins = [&](int i) {\n            // cout << \"ins: \" << i << endl;\n            bool can = locs.insert(i).second;\n            // if (!can) cout << \"BAD!!\" << endl;\n            // assert(can);\n            int one = prv(i), two = nxt(i);\n            int pd = dist(one, i), nd = dist(i, two);\n            if (sz(locs) > 2) {\n                sum_sz.upd(pd + nd, -(pd + nd));\n                cnt_sz.upd(pd + nd, -1);\n            }\n\n            if (sz(locs) > 1) {\n                sum_sz.upd(pd, pd);\n                cnt_sz.upd(pd, 1);\n\n                sum_sz.upd(nd, nd);\n                cnt_sz.upd(nd, 1);\n            }\n        };\n\n        auto er = [&](int i) {\n            // cout << \"er: \" << i << endl;\n            auto it = locs.find(i);\n            assert(it != locs.end());\n            \n            if (sz(locs) <= 1) {\n                locs.erase(i);\n                return;\n            }\n\n            int one = prv(i), two = nxt(i);\n            int pd = dist(one, i), nd = dist(i, two);\n            sum_sz.upd(pd, -pd);\n            cnt_sz.upd(pd, -1);\n\n            sum_sz.upd(nd, -nd);\n            cnt_sz.upd(nd, -1);\n\n            sum_sz.upd(pd + nd, pd + nd);\n            cnt_sz.upd(pd + nd, +1);\n            locs.erase(i);\n        };\n\n        for (int i = 0; i < n; i++) {\n            if (colors[i] == colors[(i + 1) % n]) {\n                ins(i);\n            }\n        }\n\n        vector<int> ans;\n        for (auto v : queries) {\n            // cout << \"on query\" << endl;\n            if (v.size() == 2) {\n                int x = v[1];\n                if (locs.size() == 0) {\n                    ans.push_back(n);\n                } else if (locs.size() == 1) {\n                    ans.push_back(n - x + 1);\n                } else {\n                    ans.push_back(sum_sz.qry(x, n-1) - cnt_sz.qry(x, n-1) * (x - 1));\n                }\n            } else {\n                int i = v[1], col = v[2];\n                if (colors[i] != col) {\n                    colors[i] = col;\n                    if (colors[i] == colors[(i + 1) % n])\n                        ins(i);\n                    else\n                        er(i);\n\n                    if (colors[(i + n - 1) % n] == colors[i])\n                        ins((i + n - 1) % n);\n                    else\n                        er((i + n - 1) % n);\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722740907",
    "subm_id": "1343731752"
}