{
    "username": "Sanath_Kulla",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> adj1(n) , adj2(m);\n        for(auto it:edges1){\n            adj1[it[0]].push_back(it[1]);\n            adj1[it[1]].push_back(it[0]);\n        }\n        for(auto it:edges2){\n            adj2[it[0]].push_back(it[1]);\n            adj2[it[1]].push_back(it[0]);\n        }\n        int ans = 0;\n        auto find = [&](vector<vector<int>> &a){\n            int n = a.size();\n            vector<int> d(n , 0);\n            auto dfs = [&](auto self , int u , int p = -1)->void{\n                for(auto it:a[u]){\n                    if(it == p)continue;\n                    d[it] = d[u] + 1;\n                    self(self , it, u);\n                }\n            };\n            dfs(dfs , 0 , -1);\n            int u = 0;\n            for(int i = 0 ; i < n ;i++){\n                if(d[u] < d[i])u = i;\n            }\n            fill(d.begin() , d.end() , 0);\n            dfs(dfs , u , -1);\n            int dist = 0;\n            for(int i = 0 ; i < n ; i++){\n                dist = max(dist , d[i]);\n            }\n            ans = max(ans , dist);\n            int mn = (dist+1)/2;\n            return mn;\n        };\n        ans = max(ans ,find(adj1) + find(adj2) + 1);\n        return  ans;\n    }\n};",
    "submit_ts": 1719717187.0
}