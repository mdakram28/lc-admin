{
    "username": "raywu01",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        max_dist, p1, p2 = find_max_dist(points)\n        \n        points_1 = [p for p in points]\n        points_1.remove(p1)\n        max_dist_1, _, _ = find_max_dist(points_1)\n        \n        points_2 = [p for p in points]\n        points_2.remove(p2)\n        max_dist_2, _, _ = find_max_dist(points_2)\n        return min(max_dist_1, max_dist_2)\n        \n        \n\ndef find_max_dist(points):\n    p1, p2 = mmax(points, key=lambda x: x[0] - x[1]), mmin(points, key=lambda x: x[0] - x[1])\n    d1 = dist(p1, p2)\n\n    p3, p4 = mmax(points, key=lambda x: x[0] + x[1]), mmin(points, key=lambda x: x[0] + x[1])\n    d2 = dist(p3, p4)\n    \n    if d1 > d2:\n        return d1, p1, p2\n    \n    return d2, p3, p4\n        \n        \ndef mmax(points, key):\n    max_score = -float('inf')\n    ret = None\n    for p in points:\n        s = key(p)\n        if s > max_score:\n            ret = p\n            max_score = s\n    return ret\n        \ndef mmin(points, key):\n    min_score = float('inf')\n    ret = None\n    for p in points:\n        s = key(p)\n        if s < min_score:\n            ret = p\n            min_score = s\n    return ret  \n        \ndef dist(p1, p2):\n    x1, y1 = p1\n    x2, y2 = p2\n    return abs(x1 - x2) + abs(y1 - y2)"
}