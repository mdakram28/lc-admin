{
    "username": "Robertation",
    "submission": "class Trie:\n    def __init__(self):\n        self.next = dict()\n        self.cost = None\n    def exists(self):\n        return self.cost is not None\n\nclass Solution:\n\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n\n        trie = Trie()\n\n        for i in range(len(words)):\n            w = words[i]\n            cost = costs[i]\n            cur = trie\n            for c in w:\n                if not c in cur.next:\n                    cur.next[c] = Trie()\n                cur = cur.next[c]\n            cur.cost = cost if cur.cost is None else min(cur.cost, cost)\n\n        @cache\n        def dfs(i):\n            if i >= len(target):\n                return 0\n            cost = float('inf')\n            found = False\n            cur = trie\n            while i < len(target):\n                c = target[i]\n                if not c in cur.next:\n                    break\n                cur = cur.next[c]\n                if cur.exists():\n                    nex = dfs(i+1)\n                    if nex is not None:\n                        found = True\n                        cost = min(cost, cur.cost + nex)\n                i += 1\n            return cost if found else None\n        res = dfs(0)\n        return -1 if res is None else res\n            \n\n\n\n        \n        ",
    "submit_ts": "1720321491",
    "subm_id": "1312324280"
}