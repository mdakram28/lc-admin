{
    "username": "DCXiaoBing",
    "submission": "class Solution {\n  // x,y >= 0, no need to care about this\n  // Manhattan dist\n  \n  // have to remove one point, cannot skip\n  \n  // possible min of max\n  // find the max dist node and remove?\n  \n  \n  // for original arr\n  // we have max dist pair. If there are more than one max dist pair, then we cannot change the result\n  // there are 1e5 points, cannot brute force\n  \n  // abs(x1 - x2) + abs(y1 - y2)\n  // \n  \n  // compute max\n  // sort points by x\n  // only keep two value for each x, minY and maxY and their count\n  // two pointer\n  // \n  public int minimumDistance(int[][] points) {\n    int n = points.length;\n    \n    int[] tmp = maxDist(points, -1);\n    // System.out.println(Arrays.toString(tmp));\n    // if (tmp[1] > 1) return tmp[0]; // cannot decrease\n    \n    \n    \n    return Math.min(maxDist(points, tmp[2])[0], maxDist(points, tmp[3])[0]);\n  }\n  \n  // https://www.geeksforgeeks.org/maximum-manhattan-distance-between-a-distinct-pair-from-n-coordinates/\n  // 0 - maxDist, 1 - cnt, 2 - idx1, 3 - idx2\n  private int[] maxDist(int[][] points, int skip) {\n    int n = points.length;\n    \n    int minSum = Integer.MAX_VALUE, minSumCnt = 0, minSumIdx = -1;\n    int maxSum = Integer.MIN_VALUE, maxSumCnt = 0, maxSumIdx = -1;\n    int minDiff = Integer.MAX_VALUE, minDiffCnt = 0, minDiffIdx = -1;\n    int maxDiff = Integer.MIN_VALUE, maxDiffCnt = 0, maxDiffIdx = -1;\n    \n    for (int i = 0; i < n; i++) if (i != skip) {\n      int sum = points[i][0] + points[i][1];\n      int diff = points[i][0] - points[i][1];\n      \n      if (sum < minSum) {\n        minSum = sum;\n        minSumCnt = 0;\n        minSumIdx = i;\n      }\n      if (sum == minSum) minSumCnt++;\n      if (sum > maxSum) {\n        maxSum= sum;\n        maxSumCnt = 0;\n        maxSumIdx = i;\n      }\n      if (sum == maxSum) maxSumCnt++;\n      \n      if (diff < minDiff) {\n        minDiff = diff;\n        minDiffCnt = 0;\n        minDiffIdx = i;\n      }\n      if (diff == minDiff) minDiffCnt++;\n      if (diff > maxDiff) {\n        maxDiff= diff;\n        maxDiffCnt = 0;\n        maxDiffIdx = i;\n      }\n      if (diff == maxDiff) maxDiffCnt++;\n    }\n    \n    int dist = Math.max(maxSum - minSum, maxDiff - minDiff);\n    int cnt = 1, l, r;\n    if (dist == maxSum - minSum) {\n      cnt = maxSumCnt * minSumCnt;\n      l = minSumIdx;\n      r = maxSumIdx;\n    }\n    else {\n      cnt = maxDiffCnt * minDiffCnt;\n      l = minDiffIdx;\n      r = maxDiffIdx;\n    }\n    return new int[]{dist, cnt, l, r};\n  }\n}"
}