{
    "username": "pushuu",
    "submission": "using ll = long long;\ntemplate <class T, class U>\nstruct Lsegtree {\n    ll n; vector <T> st; vector <U> lazy; T e; U u;\n    void init (ll n, T e, U u) {\n        this -> n = n; this -> e = e; this -> u = u;\n        st.assign (4 * n, e); lazy.assign (4 * n, u);\n    }\n\n    T combine (T l, T r) {\n        T ans = max (l, r); return ans;\n    }\n\n    void buildUtil (ll v, ll tl, ll tr, vector <T> &a) {\n        if (tl == tr) {\n            st[v] = a[tl]; return;\n        }\n        ll tm = (tl + tr) >> 1;\n        buildUtil (2 * v + 1, tl, tm, a);\n        buildUtil (2 * v + 2, tm + 1, tr, a);\n        st[v] = combine (st[2 * v + 1], st[2 * v + 2]);\n    }\n\n    T apply (T cur, U upd, ll tl, ll tr) {\n        T ans = max (cur, upd); return ans;\n    }\n\n    U combineUpdate (U old_upd, U new_upd, ll tl, ll tr) {\n        U res = max (old_upd, new_upd); return res; \n    }\n\n    void push_down (ll v, ll tl, ll tr) {\n        if (lazy[v] == u) return;\n        st[v] = apply (st[v], lazy[v], tl, tr);\n        if (2 * v + 2 < 4 * n) {\n            ll tm = (tl + tr) >> 1;\n            lazy[2 * v + 1] = combineUpdate (lazy[2 * v + 1], lazy[v], tl, tm);\n            lazy[2 * v + 2] = combineUpdate (lazy[2 * v + 2], lazy[v], tm + 1, tr);\n        }\n        lazy[v] = u;\n    }\n\n    T queryUtil (ll v, ll tl, ll tr, ll l, ll r) {\n        push_down (v, tl, tr);\n        if (l > r) return e;\n        if (tr < l || tl > r) return e;\n        if (l <= tl && r >= tr) return st[v];\n        ll tm = (tl + tr) >> 1;\n        return combine (queryUtil (2 * v + 1, tl, tm, l, r), \n                        queryUtil (2 * v + 2, tm + 1, tr, l, r));\n    }\n\n    void updateUtil (ll v, ll tl, ll tr, ll l, ll r, U upd) {\n        push_down (v, tl, tr);\n        if (tr < l || tl > r) return;\n        if (tl >= l && tr <= r) {\n            lazy[v] = combineUpdate (lazy[v], upd, tl, tr); push_down (v, tl, tr);\n        }\n        else {\n            ll tm = (tl + tr) >> 1;\n            updateUtil (2 * v + 1, tl, tm, l, r, upd);\n            updateUtil (2 * v + 2, tm  + 1, tr, l, r, upd);\n            st[v] = combine (st[2 * v + 1], st[2 * v + 2]);\n        }\n    }\n\n    void build (vector <T> a) {\n        assert ((int) a.size() == n); buildUtil (0, 0, n - 1, a);\n    }\n\n    T query (ll l, ll r) {\n        return queryUtil (0, 0, n - 1, l, r);\n    }\n\n    void update (ll l, ll r, U upd) {\n        updateUtil (0, 0, n - 1, l, r, upd);\n    }\n};\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        using ll = long long;\n        ll n = nums.size();\n        map <ll, ll> cmp;\n        vector <int> a = nums;\n        sort (a.begin(), a.end());\n        int _ = 0;\n        for (int x : a) {\n            if (cmp.count (x) == 0) {\n                cmp[x] = _++;\n            }\n        }\n        for (int i = 0; i < n; i += 1) {\n            nums[i] = cmp[nums[i]];\n        }\n        \n        vector <vector <ll>> dp (_ + 5, vector <ll> (k + 1, -1));\n        \n        vector <Lsegtree <ll, ll>> tree (k + 1);\n        \n        for (ll i = 0; i <= k; i += 1) {\n            tree[i].init (_ + 5, -1, -1);\n        }\n        \n        for (int i = 0; i < n; i += 1) {\n            int x = nums[i];\n            for (int j = 0; j <= k; j += 1) {\n                if (dp[x][j] != -1) dp[x][j] = dp[x][j] + 1;\n                tree[j].update (x, x, dp[x][j]);\n                if (j == 0) continue;\n                ll q = -1;\n                if (x > 0) q = max (q, tree[j - 1].query (0, x - 1));\n                if (x + 1 < _) q = max (q, tree[j - 1].query (x + 1, _));\n                if (q != -1) dp[x][j] = max (dp[x][j], q + 1);\n                tree[j].update (x, x, dp[x][j]);\n            }\n            if (dp[x][0] == -1) {\n                dp[x][0] = 1;\n                tree[0].update (x, x, 1);\n            }\n        } \n        ll ans = 1;\n        \n        for (ll j = 0; j <= k; j += 1) {\n            ans = max (ans, tree[j].query (0, _));\n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": 1717860548.0
}