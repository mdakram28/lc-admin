{
    "username": "Vasanth Reddy",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        string now = \"\";\n        vector<vector<int>> dp(n, vector<int> (k, -1));\n        \n        if(n == 1) {\n            int ans = k;\n            while(ans + k < 10) ans += k;\n            return to_string(ans);\n        }\n        \n        vector<int> power(n + 1);\n        power[0] = 1 % k;\n        for(int i = 1; i < n; i++) {\n            power[i] = power[i - 1] * 10 % k;\n        }\n        \n        int extra = -1;\n        \n        function<int(int,int)> dfs = [&](int x, int y) {\n            if(dp[x][y] != -1) return 0;\n            dp[x][y] = 1;\n            if(n == 2 * x) {\n                return (y == 0 ? 1 : 0);\n            }\n            if(n == 2 * x + 1) {\n                for(int j = 9; j >= 0; j--) {\n                    if((y + power[x] * j % k) % k == 0) {\n                        extra = j;\n                        break;\n                    }\n                }\n                if(extra != -1) return 1;\n                return 0;\n            }\n            int start = 0;\n            if(x == 0) start = 1;\n            for(int i = 9; i >= start; i--) {\n                now += i + '0';\n                int ny = y + power[x] * i % k + power[n - 1 - x] * i % k;\n                ny %= k;\n                if(dfs(x + 1, ny)) return 1;\n                now.pop_back();\n            }\n            return 0;\n        };\n        \n        int mid = (n - 1) / 2;\n        if(n % 2 == 0) {\n            mid += 1;\n            dp[mid][0] = 1;\n        }\n        else {\n            for(int i = 9; i >= 0; i--) {\n                dp[mid][i * power[mid] % k] = 1;\n            }\n        }\n        \n        for(int i = mid - 1; i >= 0; i--) {\n            for(int j = 0; j < k; j++) if(dp[i + 1][j] == 1){\n                for(int p = 0; p < 10; p++) {\n                    int nj = j;\n                    nj += (power[i] * p);\n                    nj += (power[n - 1 - i] * p);\n                    nj %= k;\n                    dp[i][nj] = 1;\n                }\n            }\n        }\n        int curr = 0;\n        for(int i = 0; i < mid; i++) {\n            for(int j = 9; j >=0 ; j--) {\n                int req = (power[i] * j + power[n - i - 1] * j + curr) % k;\n                req = (k - req) % k;\n                if(dp[i + 1][req] == 1) {\n                    now += (j + '0');\n                    curr += power[i] * j + power[n - i - 1] * j;\n                    curr %= k;\n                    break;\n                }\n            }\n        }\n        string rev = now;\n        reverse(rev.begin(), rev.end());\n        if(n % 2 == 1) {\n            for(int j = 9; j >= 0; j--) {\n                int req = k - (curr + power[mid] * j) % k;\n                req %= k;\n                if(req == 0){\n                    now += (j + '0');\n                    break;\n                }\n            }\n        }\n        now += rev;\n        return now;\n    }\n};",
    "submit_ts": "1723951924",
    "subm_id": "1359783497"
}