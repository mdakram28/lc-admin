{
    "username": "pcwuu",
    "submission": "class Solution {\npublic:\n    \n    long long sol(int row, int col1, int col2, vector<vector<int>> &board, vector<vector<vector<long long>>> &dp) {\n        int m = board.size(), n = board[0].size();\n        long long ret = -3e10;\n        if(row == m)\n            return ret;\n        \n        if(dp[row][col1][col2] != -3e10)\n            return dp[row][col1][col2];\n        \n        if(col1 == n && col2 == n) {\n            for(int i = 0; i < n; i++)\n                ret = max(ret, board[row][i] + sol(row + 1, i, col2, board, dp));\n        }\n        else if(col2 == n) {\n            for(int i = 0; i < n; i++)\n                if(i != col1)\n                    ret = max(ret, board[row][i] + sol(row + 1, col1, i, board, dp));\n        }\n        else {\n            for(int i = 0; i < n; i++)\n                if(i != col1 && i != col2)\n                    ret = max(ret, (long long)board[row][i]);\n        } \n        ret = max(ret, sol(row + 1, col1, col2, board, dp));\n        return dp[row][col1][col2] = ret;\n            \n    }\n    \n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<vector<vector<long long>>> dp(m, vector<vector<long long>>(n + 1, vector<long long>(n + 1, -3e10)));\n        return sol(0, n, n, board, dp);\n        \n    }\n};\n/*\ndp[row][pick1][pick2]\n*/",
    "submit_ts": "1723908354",
    "subm_id": "1359149065"
}