{
    "username": "hanbro0112",
    "submission": "class Solution:\n    def numberOfAlternatingGroups(self, colors: List[int], k: int) -> int:\n        a = [i & 1 for i in range(k)]\n        b = [(i & 1) ^ 1 for i in range(k)]\n        \n        colors = colors + colors[:k - 1]\n        return self.kmp_search(colors, a) + self.kmp_search(colors, b)\n        \n    # KMP \u6a21\u677f\n    def calc_max_match(self, s: str) -> List[int]:\n        match = [0] * len(s)\n        c = 0\n        for i in range(1, len(s)):\n            v = s[i]\n            while c and s[c] != v:\n                c = match[c - 1]\n            if s[c] == v:\n                c += 1\n            match[i] = c\n            \n        return match\n    \n    # KMP \u6a21\u677f\n    # \u8fd4\u56de text \u4e2d\u51fa\u73b0\u4e86\u591a\u5c11\u6b21 pattern\uff08\u5141\u8bb8 pattern \u91cd\u53e0\uff09\n    def kmp_search(self, text: str, pattern: str) -> int:\n        match = self.calc_max_match(pattern)\n        match_cnt = c = 0\n        for i, v in enumerate(text):\n            while c and pattern[c] != v:\n                c = match[c - 1]\n            if pattern[c] == v:\n                c += 1\n            if c == len(pattern):\n                match_cnt += 1\n                c = match[c - 1]\n                \n        return match_cnt\n    ",
    "submit_ts": "1720277818",
    "subm_id": "1311681473"
}