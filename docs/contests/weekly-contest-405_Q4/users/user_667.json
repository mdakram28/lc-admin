{
    "username": "lowenhere",
    "submission": "import heapq\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        \n        \n        word_costs = {}\n        for w, c in zip(words, costs):\n            if w not in word_costs:\n                word_costs[w] = c\n                continue\n                \n            word_costs[w] = min(word_costs[w], c)\n            \n        \n        # dijkstras\n        pq = [(0, 0)] # (steps, node)\n        \n        seen = set()\n        d = { i: float('inf') for i in range(n+1) }\n        \n        \n        while len(pq) > 0:\n            total_cost, x = heapq.heappop(pq)\n            if x == n:\n                return total_cost\n            \n            if x in seen:\n                continue\n            \n            seen.add(x)\n            \n            for w, c in word_costs.items():\n                if len(w) > n - x:\n                    continue\n                    \n                if target[x:x+len(w)] != w:\n                    continue\n                    \n                if total_cost + c < d[x + len(w)]:\n                    d[x + len(w)] = total_cost + c\n                    heapq.heappush(pq, (total_cost + c, x + len(w)))\n            \n        \n        return -1\n        ",
    "submit_ts": "1720322351",
    "subm_id": "1312347566"
}