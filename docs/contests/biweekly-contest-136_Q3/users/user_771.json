{
    "username": "octaneal",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        not_full = set()\n        not_full_cnt = 0\n        res = 0\n        aboba = []\n        for i in range(n // 2 + 1):\n            for j in range(m // 2 + 1):\n                a = set()\n                a.add((i, j))\n                a.add((n - i - 1, j))\n                a.add((i, m - j -1))\n                a.add((n - i - 1, m - j -1))\n                # print(a)\n                if len(a) != 4:\n                    x = 0\n                    \n                    for x1, x2 in a:\n                        not_full.add((x1, x2))\n                        x += grid[x1][x2]\n                        \n                        grid[x1][x2] = 0\n                    not_full_cnt += x\n                    # print('add', (x, len(a) - x))\n                    # print('a =', a)\n                    # print('(',i,j,')')\n                    # print()\n                    aboba.append((x, len(a) - x))\n                    continue\n                a1 = grid[i][j]\n                a2 = grid[i][~j]\n                a3 = grid[~i][j]\n                a4 = grid[~i][~j]\n\n                x = a1 + a2 + a3 + a4\n\n                # print('(',i,j,')', x)\n\n                res += min(x, 4 - x)\n\n                grid[i][j] = 0\n                grid[i][~j] = 0\n                grid[~i][j] = 0\n                grid[~i][~j] = 0\n        # print('aboba', aboba)\n        # print('ones', not_full_cnt)\n\n        aboba = list(aboba)\n\n        @cache\n        def f(ind, ones):\n            if ind == len(aboba):\n                if ones == 0:\n                    return 0\n                return float('inf')\n            \n            p = float('inf')\n\n            z, o = aboba[ind]\n\n           \n\n            new_ones = (ones - z + 4) % 4\n\n            p = min(p, f(ind + 1, new_ones) + z)\n\n            z, o = aboba[ind]\n\n            new_ones = (ones + o + 4) % 4\n\n            p = min(p, f(ind + 1, new_ones) + o)\n\n\n            return p\n        \n        return res + f(0, not_full_cnt)\n\n        not_full_zeros = len(not_full) - not_full_cnt\n        not_full_ones = not_full_cnt\n\n        \n\n        y = not_full_ones + 4\n        y -= y % 4\n\n        cnt1 =float('inf')\n        if y <= len(not_full):\n            cnt1 = y - not_full_ones\n        \n        cnt2 = float('inf')\n\n        z = not_full_ones\n        z -= z % 4\n\n        if z >= 0:\n            cnt2 = not_full_ones - z\n        if cnt1 != float('inf') or cnt2 != float('inf'):\n            res += min(cnt1, cnt2)\n        return res",
    "submit_ts": "1722697473",
    "subm_id": "1343147807"
}