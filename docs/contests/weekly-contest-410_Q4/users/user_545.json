{
    "username": "sarvagya2545",
    "submission": "template <typename T>\nclass SegmentTree {\nprivate:\n    // need to only define these values to use this implementation\n    using F = function<T(T&, T&)>;\n    int n;\n    vector<T> seg_tree;\n    T zero_val;\n    F query_func;\n    F update_func;\n\n    void build(vector<T> &nums, int left, int right, int node = 0) {\n        if(left > right) {\n            return;\n        }\n\n        if(left == right) {\n            seg_tree[node] = nums[left];\n            return;\n        }\n\n        int mid = left + (right - left) / 2;\n\n        build(nums, left, mid, 2 * node + 1);\n        build(nums, mid + 1, right, 2 * node + 2);\n        \n        seg_tree[node] = query_func(seg_tree[2 * node + 1], seg_tree[2 * node + 2]);\n    }\n\n    T query(int q_left, int q_right, int st, int en, int node) {\n        if(st > en) {\n            return zero_val;\n        }\n\n        if(st >= q_left and en <= q_right) {\n            return seg_tree[node];\n        }\n\n        if(max(st, q_left) > min(en, q_right)) {\n            return zero_val;\n        }\n\n        int mid = st + (en - st) / 2;\n        T ans_l = query(q_left, q_right, st, mid, 2 * node + 1);\n        T ans_r = query(q_left, q_right, mid + 1, en, 2 * node + 2);\n        return query_func(ans_l, ans_r);\n    }\n\n    void update(int index, int left, int right, int node, T val) {\n        if(right == left) {\n            update_func(seg_tree[node], val);\n            return;\n        }\n\n        int mid = left + (right - left) / 2;\n        if(index <= mid) {\n            update(index, left, mid, 2 * node + 1, val);\n        } else {\n            update(index, mid + 1, right, 2 * node + 2, val);\n        }\n\n        seg_tree[node] = query_func(seg_tree[2 * node + 1], seg_tree[2 * node + 2]);\n    }\n\npublic:\n    SegmentTree(vector<T> nums, F query_func, F update_func, T zero_val): n(nums.size()), query_func(query_func), update_func(update_func), zero_val(zero_val) {\n        seg_tree.resize(4 * n, zero_val);\n        build(nums, 0, n - 1);\n    }\n\n    T query(int left, int right) {\n        return query(left, right, 0, n - 1, 0);\n    }\n\n    void update(int index, T val) {\n        update(index, 0, n - 1, 0, val);\n    }\n};\n\nconst int MOD = 1e9 + 7;\n\nint query_func(int &x, int &y) {\n    return (x % MOD + y % MOD) % MOD;\n}\n\nint update_func(int &x, int &y) {\n    return x = y;\n}\n\nclass Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> dp(n + 1, vector<int> (1001, 0));\n        dp[n] = vector<int>(1001, 1);\n        vector<int> pre(1002, 0);\n        \n        for(int j = 0; j <= 1000; j++) {\n            pre[j + 1] = pre[j] + dp[n][j];\n        }\n        \n        // int total = 0;\n        for(int i = n - 1; i >= 1; i--) {\n            // SegmentTree<int> st(dp[i + 1], query_func, update_func, 0);\n            // cout << i << \" \" << st.query(0,0) << \" \" << st.query(1, 2) << \"\\n\";\n            for(int j = nums[i - 1]; j >= 0; j--) {\n                int L, R;\n                if(i == 0) {\n                    L = 0;\n                    R = nums[i];\n                } else {\n                    L = 0;\n                    R = min(nums[i] - nums[i - 1] + j, j);\n                }\n                \n                if(L <= R) {\n                    // dp[i][j] = st.query(L, R);\n                    dp[i][j] = (pre[R + 1] - pre[L] + MOD) % MOD;\n                }\n            }\n            \n            pre[0] = 0;\n            for(int j = 0; j <= 1000; j++) {\n                pre[j + 1] = (dp[i][j] + pre[j]) % MOD;\n            }\n        }\n        \n        // for(int i = 0; i <= n; i++) {\n        //     for(int j = 0; j <= (i == 0 ? 0 : nums[i - 1]); j++) {\n        //         cout << dp[i][j] << \" \";\n        //     }\n        //     cout << \"END\\n\\n\";\n        // }\n        \n        // int total = 0;\n        // for(int j = 0; j <= nums[0]; j++) {\n        //     total = (total + dp[1][j]) % MOD;\n        // }\n        \n        int total = pre[nums[0] + 1];\n        \n        return total;\n    }\n};",
    "submit_ts": "1723347686",
    "subm_id": "1351603602"
}