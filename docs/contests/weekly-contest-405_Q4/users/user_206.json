{
    "username": "imSahil169",
    "submission": "\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    void insertWord(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLen = target.length();\n        int wordsCount = words.size();\n\n        vector<int> dp(targetLen + 1, INT_MAX);\n        dp[0] = 0; // cost to form empty string is 0\n\n        // Create a trie and insert all words with their costs\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < wordsCount; ++i) {\n            insertWord(root, words[i], costs[i]);\n        }\n\n        // Dynamic Programming to find minimum cost\n        for (int i = 0; i < targetLen; ++i) {\n            if (dp[i] == INT_MAX) continue; // skip if this state is not reachable\n\n            TrieNode* node = root;\n            for (int j = i; j < targetLen; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n    }\n};",
    "submit_ts": "1720321143",
    "subm_id": "1312314671"
}