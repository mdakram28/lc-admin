{
    "username": "BreadMuMu",
    "submission": "#include <vector>\n#include <climits>\n#include <algorithm>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    int minimumDifference(std::vector<int>& nums, int k) {\n        int n = nums.size();\n        int bound = INT_MAX;\n        for (int i = 0; i < n; ++i) {\n            bound = std::min(bound, abs(nums[i] - k));\n        }\n\n        int left = 0, right = bound;\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (isOK(mid, k, nums)) {\n                right = mid;\n            } else {\n                left = mid + 1;\n            }\n        }\n        return left;\n    }\n\nprivate:\n    bool isOK(int t, int k, const std::vector<int>& nums) {\n        auto value = [&]() {\n            int res = 0;\n            for (int i = 0; i < 32; ++i) {\n                if (bitCount[i] == size) {\n                    res += 1 << i;\n                }\n            }\n            return res;\n        };\n\n        auto update = [&](int num, char op) {\n            for (int i = 0; i < 32; ++i) {\n                if ((num & (1 << i)) == 0) continue;\n                if (op == '+') {\n                    bitCount[i]++;\n                } else {\n                    bitCount[i]--;\n                }\n            }\n        };\n\n        int n = nums.size();\n        int leftBound = t - k, rightBound = t + k;\n        int l = 0;\n        size = 0;\n        std::fill(bitCount.begin(), bitCount.end(), 0);\n        \n        for (int r = 0; r < n; ++r) {\n            update(nums[r], '+');\n            size++;\n            while (l < r && value() < k && k - value() > t) {\n                update(nums[l], '-');\n                l++;\n                size--;\n            }\n            if (abs(value() - k) <= t) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    std::vector<int> bitCount = std::vector<int>(32, 0);\n    int size = 0;\n};",
    "submit_ts": 1717299984.0
}