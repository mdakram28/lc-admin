{
    "username": "Howpig2003",
    "submission": "class Solution {\npublic:\n    int least_node=-1;\n    int l=-1;\n    void bfs(int node,vector<vector<int>> &edge,vector<bool> &viewed)\n    {\n        queue<int> q;\n        q.push(node);\n        while(!q.empty())\n        {\n            int n=q.front(); q.pop();\n            viewed[n]=true;\n            least_node=n;\n            for(auto i:edge[n])\n            {\n                if(viewed[i]==false) q.push(i);\n            }\n        }\n    }\n    void dfs(int node,vector<vector<int>> &edge,vector<bool> &viewed,int len)\n    {\n        viewed[node]=true;\n        l=max(l,len);\n        for(auto i:edge[node])\n        {\n            if(viewed[i]==false) dfs(i,edge,viewed,len+1);\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2)\n    {\n        vector<vector<int>> t1edge(edges1.size()+1);\n        vector<vector<int>> t2edge(edges2.size()+1);\n        for(auto i:edges1)\n        {\n            t1edge[i[0]].push_back(i[1]);\n            t1edge[i[1]].push_back(i[0]);\n        }\n        for(auto i:edges2)\n        {\n            t2edge[i[0]].push_back(i[1]);\n            t2edge[i[1]].push_back(i[0]);\n        }\n        l=-1;\n        vector<bool> viewed(edges1.size()+1,false);\n        bfs(0,t1edge,viewed);\n        viewed=vector<bool>(edges1.size()+1,false);\n        dfs(least_node,t1edge,viewed,0);\n        int t1l=(l+1)/2;\n        int ot1l=l;\n        l=-1;\n        vector<bool> viewed2(edges2.size()+1,false);\n        bfs(0,t2edge,viewed2);\n        viewed2=vector<bool>(edges2.size()+1,false);\n        l=-1;\n        dfs(least_node,t2edge,viewed2,0);\n        int t2l=(l+1)/2;\n        int ot2l=l;\n        return  max({t1l+t2l+1,ot1l,ot2l});\n    }\n};",
    "submit_ts": 1719719350.0
}