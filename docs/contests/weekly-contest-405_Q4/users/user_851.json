{
    "username": "ram0629",
    "submission": "class Solution {\n    class Node {\n        Map<Character, Node> children;\n        char c;\n        boolean isWord;\n        int cost;\n\n        public Node(char c, boolean isWord) {\n            this.children = new HashMap<>();\n            this.c = c;\n            this.isWord = isWord;\n            this.cost = Integer.MAX_VALUE;\n        }\n\n        @Override\n        public String toString() {\n            return c + \"\";\n        }\n    }\n\n   class Trie {\n    Node root;\n\n    public Trie() {\n        root = new Node('/', false);\n    }\n\n    public void insert(String word, int cost) {\n\n        Node cur = root;\n        for (int i = 0; i < word.length(); i++) {\n\n            cur.children.computeIfAbsent(word.charAt(i), c -> new Node(c, false));\n            cur = cur.children.get(word.charAt(i));\n        }\n        cur.isWord = true;\n        cur.cost = Math.min(cost, cur.cost);\n\n    }\n       \n    public long recur(String word, int pos, long[] dp){\n        \n        // System.out.println(pos);\n        if(pos==word.length()){\n            return 0;\n        }\n        if(dp[pos]!=-1){\n            return dp[pos];\n        }\n        \n        Node cur = root;\n        \n        long ans = Integer.MAX_VALUE;\n        for(int i = pos; i<word.length();i++){\n            \n            if (!cur.children.containsKey(word.charAt(i))) {\n                 break;\n            }\n            \n            cur = cur.children.get(word.charAt(i));\n            if(cur.isWord){\n                ans = Math.min(ans,cur.cost+recur(word, i+1,dp));\n            }\n        }\n        \n        // System.out.println(String.format(\"pos is %d ans is %d\", pos, ans));\n        dp[pos] = ans;\n        return ans;\n    }\n}\n    \n    public int minimumCost(String target, String[] words, int[] costs) {\n        \n        Trie tr = new Trie();\n        \n        for(int i = 0; i<words.length;i++){\n            tr.insert(words[i], costs[i]);\n        }\n        long[] dp = new long[target.length()];\n        Arrays.fill(dp,-1);\n        int ans = (int)tr.recur(target, 0, dp);\n        \n        return ans!=Integer.MAX_VALUE ? ans : -1;\n    }\n}",
    "submit_ts": "1720322985",
    "subm_id": "1312364367"
}