{
    "username": "hellotestabc",
    "submission": "class Solution {\npublic:\n    bool intersects(vector<int>& c1, vector<int> c2) {\n        //\n        long long dist = pow(c1[0] - c2[0], 2) + pow(c1[1] - c2[1], 2);\n\n        return sqrt(dist) <= c1[2] + c2[2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        queue<int> q;\n        vector<bool> target(circles.size(), false);\n        vector<bool> visited(circles.size(), false);\n\n        int pointer = 0;\n        for (auto& circle : circles) {\n            int top = circle[1] + circle[2];\n            int bottom = circle[1] - circle[2];\n\n            int left = circle[0] - circle[2];\n            int right = circle[0] + circle[2];\n\n            if (top >= Y || bottom <= 0 || left <= 0 || right >= X) {\n                if (top >= Y || left <= 0) {\n                    q.push(pointer);\n                    visited[pointer] = true;\n                }\n                if (bottom <= 0 || right >= X) {\n                    target[pointer] = true;\n\n                    if (visited[pointer]) {\n                        return false;\n                    }\n                }\n            }\n\n            pointer++;\n        }\n\n        while (!q.empty()) {\n            int circle = q.front();\n            q.pop();\n\n            if (target[circle]) {\n                return false;\n            }\n\n            for (int i = 0; i < circles.size(); i++) {\n                if (!visited[i]) {\n                    if (intersects(circles[i], circles[circle])) {\n                        visited[i] = true;\n                        q.push(i);\n                    }\n                }\n            }\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722137069",
    "subm_id": "1335753269"
}