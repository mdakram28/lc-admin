{
    "username": "lqybzx",
    "submission": "struct tree {\n    int l, r;\n    long long x;\n    long long tag;\n}tr[800001];\ninline void build(int p, int l, int r) {\n    tr[p].l = l;\n    tr[p].r = r;\n    tr[p].x = 0;\n    tr[p].tag = 0;\n    if (l != r) {\n        int mid = (l + r) / 2;\n        build(p*2, l, mid);\n        build(p*2+1, mid+1, r);\n    }\n}\ninline void push(int p) {\n    long long len1 = tr[p*2].r - tr[p*2].l + 1;\n    tr[p*2].x += len1 * tr[p].tag;\n    tr[p*2].tag += tr[p].tag;\n    \n    long long len2 = tr[p*2+1].r - tr[p*2+1].l + 1;\n    tr[p*2+1].x += len2 * tr[p].tag;\n    tr[p*2+1].tag += tr[p].tag;\n    \n    tr[p].tag = 0;\n}\ninline void up(int p) {\n    tr[p].x = tr[p*2].x + tr[p*2+1].x;\n}\ninline void add(int p, int l, int r, long long xx) {\n    if (l <= tr[p].l && tr[p].r <= r) {\n        long long len = tr[p].r - tr[p].l + 1;\n        tr[p].x += len * xx;\n        tr[p].tag += xx;\n    } else {\n        push(p);\n        int mid = (tr[p].l + tr[p].r) / 2;\n        if (l <= mid) add(p * 2, l, r, xx);\n        if (r > mid) add(p * 2 + 1, l, r, xx);\n        up(p);\n    }\n}\ninline long long ask(int p, int l, int r) {\n    if (l <= tr[p].l && tr[p].r <= r) {\n        return tr[p].x;\n    } else {\n        push(p);\n        int mid = (tr[p].l + tr[p].r) / 2;\n        long long ans = 0;\n        if (l <= mid) ans += ask(p * 2, l, r);\n        if (r > mid) ans += ask(p * 2 + 1, l, r);\n        up(p);\n        return ans;\n    }\n}\nstruct que {\n    int l, r;\n    int p;\n    bool operator <(que& y) const {\n        return r<y.r;\n    }\n}qu[100001];\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int q = queries.size();\n        int n = s.length();\n        int i;\n        for (i = 0; i < q; i++) {\n            qu[i].l = queries[i][0];\n            qu[i].r = queries[i][1];\n            qu[i].p = i;\n        }\n        sort(qu, qu+q);\n        int d = 0;\n        int s0 = 0, s1 = 0;\n        int la = 0;\n        vector<long long> ans;\n        ans.resize(q);\n        build(1, 1, n);\n        for (i = 0; i < n; i++) {\n            if (s[i] == '0') {\n                s0++;\n            } else {\n                s1++;\n            }\n            while (s0 > k && s1 > k) {\n                if (s[la] == '0') {\n                    s0--;\n                } else {\n                    s1--;\n                }\n                la++;\n            }\n            add(1, la+1, i+1, 1);\n            while (d < q && qu[d].r == i) {\n                ans[qu[d].p] = ask(1, qu[d].l+1, qu[d].r+1);\n                d++;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723952108",
    "subm_id": "556409639"
}