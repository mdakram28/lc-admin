{
    "username": "FightEveryDay",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] A, int[] B) {\n        Arrays.sort(A);\n        int len = A.length;\n        long res = 0;\n        int hIndex = 0, vIndex = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        int[] RA = new int[A.length];\n        for (int i = 0; i < len; i++) {\n            RA[i] = A[len - 1 - i];\n        }\n        Arrays.sort(B);\n        int[] RB = new int[B.length];\n        for (int i = 0; i < B.length; i++) {\n            RB[i] = B[B.length - 1 - i];\n        }\n        while (hIndex < RA.length && vIndex < RB.length) {\n            if (RA[hIndex] >= RB[vIndex]) {\n                res += (long)RA[hIndex] * (long)verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                res += (long)RB[vIndex] * (long)horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n        while (vIndex < RB.length) {\n            res += (long)RB[vIndex] * (long)horizontalPieces;\n            verticalPieces++;\n            vIndex++;\n        }\n        while (hIndex < RA.length) {\n            res += (long)RA[hIndex] * (long)verticalPieces;\n            horizontalPieces++;\n            hIndex++;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1720925417",
    "subm_id": "1320254038"
}