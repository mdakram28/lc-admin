{
    "username": "Arzoo_singh",
    "submission": "class Solution {\npublic:\n    int bfs(const vector<vector<int>> &graph, int s, int target1, int target2, int n) {\n        queue<int> q;\n        vector<int> visited(n, 0);\n        q.push(s);\n        visited[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<vector<int>> graph(n + 4); \n        vector<pair<pair<int, int>, int>> v(n);\n        for (int i = 0; i < n; ++i) {\n            v[i] = {{c[i][0], c[i][1]}, c[i][2]};\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (v[i].first.first <= v[i].second) { \n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            \n            if (v[i].first.second <= v[i].second) { \n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            \n            if (X - v[i].first.first <= v[i].second) { \n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            \n            if (Y - v[i].first.second <= v[i].second) { \n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                int x1 = v[i].first.first;\n                int x2 = v[j].first.first;\n                int y1 = v[i].first.second;\n                int y2 = v[j].first.second;\n                double d = sqrt(pow(x1 - x2, 2) + pow(y1 - y2, 2));\n                if (v[i].second + v[j].second >= d) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int ans = 0;\n        ans = max(ans, bfs(graph, n, n + 1, n + 2, n + 4)); \n        ans = max(ans, bfs(graph, n + 3, n + 2, n + 1, n + 4)); \n\n        return !ans;\n    }\n};",
    "submit_ts": "1722139179",
    "subm_id": "1335810209"
}