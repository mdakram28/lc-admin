{
    "username": "avishekh159",
    "submission": "class Solution {\n    Map<String,Integer>map;\n    int n;\n    // long dp[];\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Node trie = new Node();\n        int length = target.length();\n        int[] dp = new int[length + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n         int size=words.length;\n        for (int i = 0; i < size; ++i) {\n            trie.add(words[i], costs[i]);\n        }\n\n       \n        \n\n        for (int i = 0; i < length; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            Trie node = trie.root;\n            for (int j = i; j < length; ++j) {\n                char c = target.charAt(j);\n                if (node.children[c - 'a'] == null) break;\n                node = node.children[c - 'a'];\n                if (node.isEnd) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.value);\n                }\n            }\n        }\n\n        return dp[length] == Integer.MAX_VALUE ? -1 : dp[length];\n    }\n}\nclass Trie {\n    Trie[] children;\n     boolean isEnd;\n    int value;\n   \n\n    Trie() {\n        children = new Trie[26];\n        value = Integer.MAX_VALUE;\n        isEnd = false;\n    }\n}\n\nclass Node {\n    Trie root;\n\n    Node() {\n        root = new Trie();\n    }\n\n    void add(String word, int cost) {\n        Trie node = root;\n        for (char c : word.toCharArray()) {\n            if (node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new Trie();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.value = Math.min(cost, node.value);\n        node.isEnd = true;\n    }\n\n    \n}",
    "submit_ts": "1720323798",
    "subm_id": "1312384302"
}