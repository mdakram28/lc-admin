{
    "username": "JeffreyLC",
    "submission": "class Solution {\npublic:\n    int waysToReachStair(int k) {\n        if (k == 0) return 2;\n        int ans = 0;\n        vector<vector<int>> pas = PascalTriangle(32, INT_MAX);\n        for (int i = k; i <= k + 32; ++i) {\n            if (isPower2(i)) {\n                int num_jumps = 0;\n                int tmp = i - 1;\n                while (tmp > 0) {\n                    num_jumps += tmp % 2;\n                    tmp >>= 1;\n                }\n                int num_reverses = i - k;\n                if (num_jumps + 1 >= num_reverses) {\n                    ans += pas[num_jumps + 1][num_reverses];\n                }\n            }\n        }\n        return ans;\n    }\nprivate:\n    bool isPower2(int num) {\n        while (num % 2 == 0) {\n            num >>= 1;\n        }\n        return num == 1;\n    }\n\n    vector<vector<int>> PascalTriangle(int n, int mod) {\n        vector<vector<int>> pascal_triangle;\n        vector<int> row;\n        for (int i = 0; i <= n; ++i) {\n            row.push_back(1 % mod);\n            for (int j = i - 1; j > 0; --j) {\n                row[j] = (row[j - 1] + row[j]) % mod;\n            }\n            pascal_triangle.push_back(row);\n        }\n        return pascal_triangle;\n    }\n};",
    "submit_ts": 1716087236.0
}