{
    "username": "xuantho573",
    "submission": "class TreeNode:\n    def __init__(self, peakCount, leftChild, rightChild, startIndex, endIndex):\n        self.peakCount = peakCount\n        self.leftChild = leftChild\n        self.rightChild = rightChild\n        self.startIndex = startIndex\n        self.endIndex = endIndex\n    \n    def countPeaks(self, startIndex: int, endIndex: int) -> int:\n        if self.startIndex > endIndex or self.endIndex < startIndex:\n            return 0\n        if startIndex <= self.startIndex and self.endIndex <= endIndex:\n            return self.peakCount\n        return self.leftChild.countPeaks(startIndex, endIndex) + self.rightChild.countPeaks(startIndex, endIndex)\n    \n    def updatePeaks(self, idx: int, val: int):\n        if self.startIndex > idx or self.endIndex < idx:\n            return\n        self.peakCount += val\n        if self.leftChild:\n            self.leftChild.updatePeaks(idx, val)\n            self.rightChild.updatePeaks(idx, val)\n        \ndef initTreeNode(startIndex: int, endIndex: int) -> TreeNode:\n    res = TreeNode(0, None, None, startIndex, endIndex)\n    if startIndex != endIndex:\n        midIndex = (startIndex + endIndex) // 2\n        res.leftChild = initTreeNode(startIndex, midIndex)\n        res.rightChild = initTreeNode(midIndex + 1, endIndex)\n    return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        root = initTreeNode(0, n - 1)\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                root.updatePeaks(i, 1)\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                _, startIndex, endIndex = q\n                if startIndex + 1 >= endIndex:\n                    res.append(0)\n                else:\n                    res.append(root.countPeaks(startIndex + 1, endIndex - 1))\n            else:\n                _, index, value = q\n                preLeft = 1 * (index > 1 and nums[index - 1] > nums[index - 2] and nums[index - 1] > nums[index])\n                preRight = 1 * (index < n - 2 and nums[index + 1] > nums[index + 2] and nums[index + 1] > nums[index])\n                preMid = 1 * (0 < index < n - 1 and nums[index] > nums[index - 1] and nums[index] > nums[index + 1])\n                nums[index] = value\n                sufLeft = 1 * (index > 1 and nums[index - 1] > nums[index - 2] and nums[index - 1] > nums[index])\n                sufRight = 1 * (index < n - 2 and nums[index + 1] > nums[index + 2] and nums[index + 1] > nums[index])\n                sufMid = 1 * (0 < index < n - 1 and nums[index] > nums[index - 1] and nums[index] > nums[index + 1])\n                root.updatePeaks(index - 1, sufLeft - preLeft)\n                root.updatePeaks(index + 1, sufRight - preRight)\n                root.updatePeaks(index, sufMid - preMid)\n        return res",
    "submit_ts": 1718508456.0
}