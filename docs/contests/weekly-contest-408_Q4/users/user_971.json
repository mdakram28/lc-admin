{
    "username": "boom04995",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        class Graph {\n            List<List<Integer>> adjList;\n\n            Graph(int n) {\n                adjList = new ArrayList<>();\n                for (int i = 0; i < n; i++) {\n                    adjList.add(new ArrayList<>());\n                }\n            }\n\n            void addEdge(int u, int v) {\n                adjList.get(u).add(v);\n                adjList.get(v).add(u);\n            }\n\n            boolean bfs(int start, int target1, int target2) {\n                Queue<Integer> queue = new LinkedList<>();\n                boolean[] visited = new boolean[adjList.size()];\n                queue.add(start);\n                visited[start] = true;\n\n                while (!queue.isEmpty()) {\n                    int u = queue.poll();\n                    for (int v : adjList.get(u)) {\n                        if (!visited[v]) {\n                            queue.add(v);\n                            visited[v] = true;\n                        }\n                    }\n                }\n\n                return visited[target1] || visited[target2];\n            }\n        }\n\n        int nc = circles.length;\n        Graph graph = new Graph(nc + 4);\n\n        for (int i = 0; i < nc; i++) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n\n            if (x <= r) {\n                graph.addEdge(nc, i);\n            }\n            if (X - x <= r) {\n                graph.addEdge(nc + 2, i);\n            }\n            if (y <= r) {\n                graph.addEdge(nc + 1, i);\n            }\n            if (Y - y <= r) {\n                graph.addEdge(nc + 3, i);\n            }\n\n            for (int j = i + 1; j < nc; j++) {\n                int dx = x - circles[j][0];\n                int dy = y - circles[j][1];\n                double distance = Math.sqrt(dx * dx + dy * dy);\n                if (r + circles[j][2] >= distance) {\n                    graph.addEdge(i, j);\n                }\n            }\n        }\n\n        return !(graph.bfs(nc, nc + 1, nc + 2) || graph.bfs(nc + 3, nc + 2, nc + 1));\n    }\n\n}",
    "submit_ts": "1722138834",
    "subm_id": "1335800902"
}