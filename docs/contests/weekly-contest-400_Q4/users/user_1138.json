{
    "username": "sank555",
    "submission": "\nclass SegmentTree {\npublic:\n    SegmentTree(const std::vector<int>& data) {\n        n = data.size();\n        tree.resize(2 * n, 0);\n\n        for (int i = 0; i < n; i++) {\n            tree[n + i] = data[i];\n        }\n\n        for (int i = n - 1; i > 0; i--) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n\n    void update(int index, int value) {\n        int pos = n + index;\n        tree[pos] = value;\n\n        while (pos > 1) {\n            pos /= 2;\n            tree[pos] = tree[2 * pos] & tree[2 * pos + 1];\n        }\n    }\n\n    int rangeAnd(int left, int right) {\n        int result = -1;\n        left += n;\n        right += n + 1;\n\n        while (left < right) {\n            if (left % 2) {\n                result &= tree[left];\n                left++;\n            }\n            if (right % 2) {\n                right--;\n                result &= tree[right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n\n        return result;\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SegmentTree st(nums);\n        int ans = INT_MAX;\n        for (int i = 0; i < nums.size(); i++) {\n            int l = i, r = nums.size() - 1;\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                int y = st.rangeAnd(i, mid);\n                if (y >= k) {\n                    ans = min(ans, abs(y - k));\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                    ans = min(ans, abs(y - k));\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n",
    "submit_ts": 1717300050.0
}