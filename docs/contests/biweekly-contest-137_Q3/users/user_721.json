{
    "username": "1educatedtiger",
    "submission": "use std::cmp::{max, min};\n\nimpl Solution {\n    pub fn maximum_value_sum(board: Vec<Vec<i32>>) -> i64 {\n        let m = board.len();\n        let n = board[0].len();\n        \n        let mut row_max = vec![vec![(i32::MIN, -1); 3]; m];\n\n        for i in 0..m {\n            let mut col_values: Vec<(i32, i32)> = board[i].iter().enumerate()\n                .map(|(j, &val)| (val, j as i32))\n                .collect();\n            col_values.sort_unstable_by(|a, b| b.0.cmp(&a.0));\n            for k in 0..min(3, n) {\n                row_max[i][k] = col_values[k];\n            }\n        }\n\n        let mut max_sum = i64::MIN;\n        for r1 in 0..m {\n            for r2 in r1+1..m {\n                for r3 in r2+1..m {\n                    for i1 in 0..3 {\n                        for i2 in 0..3 {\n                            if row_max[r1][i1].1 == row_max[r2][i2].1 { continue; }\n                            for i3 in 0..3 {\n                                if row_max[r1][i1].1 == row_max[r3][i3].1 || \n                                   row_max[r2][i2].1 == row_max[r3][i3].1 { continue; }\n                                \n                                let sum = row_max[r1][i1].0 as i64 + \n                                          row_max[r2][i2].0 as i64 + \n                                          row_max[r3][i3].0 as i64;\n                                max_sum = max(max_sum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        max_sum\n    }\n}",
    "submit_ts": "1723908513",
    "subm_id": "1359155784"
}