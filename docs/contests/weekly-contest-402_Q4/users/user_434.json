{
    "username": "coderman2004",
    "submission": "import java.util.*;\n\nclass Solution {\n\n    static class SegmentTree {\n        int size;\n        int[] seg;\n        int[] nums;\n\n        public void init(int[] nums) {\n            this.size = nums.length;\n            this.nums = nums;\n            this.seg = new int[4 * size];\n            build(0, 0, size - 1);\n        }\n\n        private void build(int node, int start, int end) {\n            if (start == end) {\n                seg[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                seg[node] = seg[2 * node + 1] + seg[2 * node + 2];\n            }\n        }\n\n        private boolean isPeak(int i) {\n            if (i == 0 || i == size - 1) return false;\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        }\n\n        public void update(int index, int value) {\n            nums[index] = value;\n            update(0, 0, size - 1, index);\n            if (index > 0) update(0, 0, size - 1, index - 1);\n            if (index < size - 1) update(0, 0, size - 1, index + 1);\n        }\n\n        private void update(int node, int start, int end, int index) {\n            if (start == end) {\n                seg[node] = isPeak(index) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (index <= mid) {\n                    update(2 * node + 1, start, mid, index);\n                } else {\n                    update(2 * node + 2, mid + 1, end, index);\n                }\n                seg[node] = seg[2 * node + 1] + seg[2 * node + 2];\n            }\n        }\n\n        public int query(int left, int right) {\n            return query(0, 0, size - 1, left, right);\n        }\n\n        private int query(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return 0;\n            }\n            if (left <= start && end <= right) {\n                return seg[node];\n            }\n            int mid = (start + end) / 2;\n            int leftQuery = query(2 * node + 1, start, mid, left, right);\n            int rightQuery = query(2 * node + 2, mid + 1, end, left, right);\n            return leftQuery + rightQuery;\n        }\n    }\n\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        SegmentTree segmentTree = new SegmentTree();\n        segmentTree.init(nums);\n        \n        List<Integer> result = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int left = query[1];\n                int right = query[2];\n                int peaks = segmentTree.query(left + 1, right - 1); // Exclude boundaries\n                result.add(peaks);\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int value = query[2];\n                segmentTree.update(index, value);\n            }\n        }\n        \n        return result;\n    }\n    \n}",
    "submit_ts": "1718507249",
    "subm_id": "1289645764"
}