{
    "username": "cm_fast",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#define fast_io                       \\\n    ios_base::sync_with_stdio(false); \\\n    cin.tie(NULL)\n\nclass TrieNode\n{\npublic:\n    unordered_map<char, TrieNode *> child;\n    int ans;\n\n    TrieNode() : ans(INT_MAX) {}\n};\n\nclass Trie\n{\npublic:\n    TrieNode *root;\n\n    Trie()\n    {\n        root = new TrieNode();\n    }\n\n    void place(const string &word, int ans)\n    {\n        TrieNode *node = root;\n        for (int i = 0; i < word.size(); i++)\n        {\n\n            if (!node->child.count(word[i]))\n            {\n                node->child[word[i]] = new TrieNode();\n            }\n            node = node->child[word[i]];\n        }\n        node->ans = min(node->ans, ans);\n    }\n\n    int helper(string &target)\n    {\n        int n = target.size();\n        vector<long long> dp(n + 1, 1e9);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i)\n        {\n            TrieNode *node = root;\n            for (int j = i; j < n; ++j)\n            {\n                if (!node->child.count(target[j]))\n                {\n                    break;\n                }\n                node = node->child[target[j]];\n                if (node->ans != 1e9)\n                {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + (long long)node->ans);\n                }\n            }\n        }\n        if (dp[n] >= 1e9)\n        {\n            return -1;\n        }\n        return (int)dp[n];\n    }\n};\n\nclass Solution\n{\npublic:\n    void helper1(string text, string pattern, map<pair<int, int>, int> &present, int idx)\n    {\n        string concat = pattern + \"$\" + text;\n        int l = concat.length();\n        int Z[l];\n        helper2(concat, Z);\n        for (int i = 0; i < l; ++i)\n        {\n            if (Z[i] == pattern.length())\n            {\n                present[{idx, i - pattern.length() - 1}] = 5;\n            }\n        }\n    }\n    void helper2(string str, int Z[])\n    {\n        int n = str.length();\n        int L, R, k;\n        L = R = 0;\n        for (int i = 1; i < n; ++i)\n        {\n            if (i > R)\n            {\n                L = R = i;\n                while (R < n && str[R - L] == str[R])\n                {\n                    R++;\n                }\n                Z[i] = R - L;\n                R--;\n            }\n            else\n            {\n                k = i - L;\n                if (Z[k] < R - i + 1)\n                {\n                    Z[i] = Z[k];\n                }\n                else\n                {\n                    L = i;\n                    while (R < n && str[R - L] == str[R])\n                    {\n                        R++;\n                    }\n                    Z[i] = R - L;\n                    R--;\n                }\n            }\n        }\n        return;\n    }\n    int minimumCost(string target, vector<string> &w, vector<int> &c)\n    {\n        fast_io;\n        Trie trie;\n        for (int i = 0; i < w.size(); ++i)\n        {\n            trie.place(w[i], c[i]);\n        }\n        return trie.helper(target);\n    }\n};\n",
    "submit_ts": "1720323712",
    "subm_id": "1312382217"
}