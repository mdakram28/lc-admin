{
    "username": "user2271Y",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def bfs(start, n, adj):\n            dist = [-1] * n\n            q = deque([start])\n            dist[start] = 0\n            while q:\n                node = q.popleft()\n                for neighbor in adj[node]:\n                    if dist[neighbor] == -1:\n                        dist[neighbor] = dist[node] + 1\n                        q.append(neighbor)\n            return dist\n\n        def find_max_distances(edges):\n            n = len(edges) + 1\n            # Build adjacency list\n            adj = defaultdict(list)\n            for u, v in edges:\n                adj[u].append(v)\n                adj[v].append(u)\n\n            # Find the farthest node from an arbitrary node (node 0)\n            dist_from_start = bfs(0, n, adj)\n            farthest_node_a = dist_from_start.index(max(dist_from_start))\n\n            # Find the farthest node from node A and also get the diameter\n            dist_from_a = bfs(farthest_node_a, n, adj)\n            farthest_node_b = dist_from_a.index(max(dist_from_a))\n\n            # Find distances from node B\n            dist_from_b = bfs(farthest_node_b, n, adj)\n\n            # Calculate the maximum distance for each node\n            max_distances = [max(dist_from_a[i], dist_from_b[i]) for i in range(n)]\n\n            return min(max_distances), max(dist_from_a)\n        \n        a, b = find_max_distances(edges1)\n        c, d = find_max_distances(edges2)\n        return max(a + c + 1, b, d)\n        \n        ",
    "submit_ts": "1719716333",
    "subm_id": "1304361489"
}