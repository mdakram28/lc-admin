{
    "username": "hopeful-pasteurosg",
    "submission": "class Solution:\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        # Initial conditions\n        total_cost = 0\n        current_horizontal_pieces = 1  # Starts with one whole piece horizontally\n        current_vertical_pieces = 1    # Starts with one whole piece vertically\n\n        # Sort cuts by cost in descending order\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n\n        h_index = 0  # Index for horizontal cuts\n        v_index = 0  # Index for vertical cuts\n\n        # Alternate between horizontal and vertical cuts based on which is more costly\n        while h_index < len(horizontalCut) or v_index < len(verticalCut):\n            if v_index < len(verticalCut) and (h_index >= len(horizontalCut) or verticalCut[v_index] >= horizontalCut[h_index]):\n                # Choose vertical cut if it's more costly or no horizontal cuts are left\n                cost = verticalCut[v_index]\n                total_cost += cost * current_horizontal_pieces\n                current_vertical_pieces += 1  # Increase the count of vertical divisions\n                v_index += 1\n            else:\n                # Choose horizontal cut\n                cost = horizontalCut[h_index]\n                total_cost += cost * current_vertical_pieces\n                current_horizontal_pieces += 1  # Increase the count of horizontal divisions\n                h_index += 1\n\n        return total_cost\n\n# Example usage\nsol = Solution()\nprint(sol.minimumCost(3, 2, [1, 3], [5]))  # Output should be 13\nprint(sol.minimumCost(2, 2, [7], [4]))    # Output should be 15\n",
    "submit_ts": "1720925750",
    "subm_id": "546441696"
}