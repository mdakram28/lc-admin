{
    "username": "JeffreyLC",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        int dist = n - 1;\n        map<int, int> m;\n        vector<int> ans;\n        for (const vector<int>& q : queries) {\n            auto it = m.lower_bound(q[0]);\n            if (it != m.begin()) {\n                --it;\n                int x0 = it->first, y0 = it->second;\n                if (q[1] <= y0) {\n                    ans.push_back(dist);\n                    continue;\n                }\n                ++it;\n            }\n            if (it == m.end()) {\n                m[q[0]] = q[1];\n                dist -= q[1] - q[0] - 1;\n            } else {\n                int x1 = it->first, y1 = it->second;\n                if (q[1] <= x1) {\n                    m[q[0]] = q[1];\n                    dist -= q[1] - q[0] - 1;\n                } else if (q[1] >= y1) {\n                    auto it2 = it;\n                    for (; it2 != m.end(); ++it2) {\n                        int x = it2->first, y = it2->second;\n                        if (q[1] < y) break;\n                    }\n                    for (auto it3 = it; it3 != it2; ++it3) {\n                        dist += it3->second - it3->first - 1;\n                    }\n                    m.erase(it, it2);\n                    m[q[0]] = q[1];\n                    dist -= q[1] - q[0] - 1;\n                }\n            }\n            ans.push_back(dist);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741354",
    "subm_id": "1343742917"
}