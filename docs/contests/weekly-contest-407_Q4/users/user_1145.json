{
    "username": "iib2021043",
    "submission": "class SegTree {\n    int n;\n    vector <pair <int, int>> tree;\n    vector <int> nums;\npublic:\n    SegTree(vector <int> arr) {\n        this->n = arr.size();\n        this->tree.resize(4 * n);\n        this->nums = arr;\n        build();\n    }\n    pair <int, int> f(pair <int, int> x, pair <int, int> y) {\n        if(x.first == y.first) {\n            if(x.second < y.second) return x;\n            return y;\n        }\n        return (x.first < y.first) ? x : y;\n    }\n    void build(int i, int l, int r) {\n        if(l == r) {\n            tree[i] = {nums[l], l};\n            return;\n        }\n        int m = (l + r) / 2;\n        build(2 * i + 1, l, m);\n        build(2 * i + 2, m + 1, r);\n        tree[i] = f(tree[2 * i + 1], tree[2 * i + 2]);\n    }\n    void build() {\n        build(0, 0, n - 1);\n    }\n    pair <int, int> query(int i, int low, int high, int l, int r) {\n        if(r < low) return {INT_MAX, -1}; //left of the range [l, r] < [low, high]\n        if(l > high) return {INT_MAX, -1}; //right of the range [low, high] < [l, r]\n        if(low >= l && high <= r) return tree[i]; // [l....low...high....r]\n        int mid = (low + high) / 2;\n        pair <int, int> left = query(2 * i + 1, low, mid, l, r);\n        pair <int, int> right = query(2 * i + 2, mid + 1, high, l, r);\n        return f(left, right);\n    }\n    pair <int, int> query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n    int size(){\n        return n;\n    }\n};\nint solve(int l, int r, SegTree &segtree, int prev = 0) {\n    if(l > r || l < 0 || r >= segtree.size()) return 0;\n    pair <int, int> p = segtree.query(l, r);\n    int left = solve(l, p.second - 1, segtree, p.first);\n    int right = solve(p.second + 1, r, segtree, p.first);\n    return p.first - prev + left + right;\n}\nint minNumberOperations(vector<int>& nums) {\n    SegTree segtree(nums);\n    return solve(0, nums.size() - 1, segtree);\n}\nclass Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        vector <int> diff(n);\n        long long ans = 0;\n        for(int i = 0; i < n; i++) diff[i] = target[i] - nums[i];\n        vector <int> temp;\n        for(int i = 0; i < n; ) {\n            if(diff[i] == 0) {\n                i++;\n                continue;\n            }\n            if(diff[i] > 0) {\n                while(i < n and diff[i] > 0) {\n                    temp.push_back(diff[i]);\n                    i++;\n                }\n                ans += minNumberOperations(temp);\n                temp.clear();\n            }\n            else {\n                while(i < n and diff[i] < 0) {\n                    temp.push_back(-diff[i]);\n                    i++;\n                }\n                ans += minNumberOperations(temp);\n                temp.clear();\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721531761",
    "subm_id": "1327969194"
}