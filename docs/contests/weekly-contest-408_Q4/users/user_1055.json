{
    "username": "AdityaMalu",
    "submission": "\nclass Solution:\n    def canReachCorner(self, width: int, height: int, circles: List[List[int]]) -> bool:\n        num_circles = len(circles)\n        circle_info = [(circles[i][0], circles[i][1], circles[i][2]) for i in range(num_circles)]\n        adjacency_list = [[] for _ in range(num_circles + 4)]\n        \n        for i in range(num_circles):\n            x, y, radius = circle_info[i]\n\n            if x - radius <= 0:\n                adjacency_list[i].append(num_circles)\n                adjacency_list[num_circles].append(i)\n            if width - x <= radius:\n                adjacency_list[i].append(num_circles + 2)\n                adjacency_list[num_circles + 2].append(i)\n            if y - radius <= 0:\n                adjacency_list[i].append(num_circles + 1)\n                adjacency_list[num_circles + 1].append(i)\n            if height - y <= radius:\n                adjacency_list[i].append(num_circles + 3)\n                adjacency_list[num_circles + 3].append(i)\n\n            for j in range(i + 1, num_circles):\n                x2, y2, radius2 = circle_info[j]\n                dx = x - x2\n                dy = y - y2\n                distance_squared = dx * dx + dy * dy\n                radius_sum = radius + radius2\n\n                if distance_squared <= radius_sum * radius_sum:\n                    adjacency_list[i].append(j)\n                    adjacency_list[j].append(i)\n        \n        def bfs(start_node, target_node1, target_node2):\n            queue = deque([start_node])\n            visited = [0] * (num_circles + 4)\n            visited[start_node] = 1\n            while queue:\n                current_node = queue.popleft()\n                for neighbor in adjacency_list[current_node]:\n                    if not visited[neighbor]:\n                        visited[neighbor] = 1\n                        queue.append(neighbor)\n            return visited[target_node1] or visited[target_node2]\n        \n        return not (bfs(num_circles, num_circles + 1, num_circles + 2) or bfs(num_circles + 3, num_circles + 2, num_circles + 1))\n",
    "submit_ts": "1722138633",
    "subm_id": "1335795772"
}