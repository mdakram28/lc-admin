{
    "username": "Aniruddh Vaish",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n#include <set>\n\nclass Solution {\npublic:\n    long long maximumValueSum(std::vector<std::vector<int>>& b) {\n        int rows = b.size();\n        int cols = b[0].size();\n        \n        if (rows < 3 || cols < 3) return 0;\n\n        // Store top 3 values and their positions for each row and column\n        std::vector<std::vector<std::pair<long long, std::pair<int, int>>>> topRows(rows);\n        std::vector<std::vector<std::pair<long long, std::pair<int, int>>>> topCols(cols);\n\n        // Compute top 3 values for each row\n        for (int r = 0; r < rows; ++r) {\n            std::vector<std::pair<long long, int>> rowVals;\n            for (int c = 0; c < cols; ++c) {\n                rowVals.push_back({b[r][c], c});\n            }\n            std::sort(rowVals.rbegin(), rowVals.rend()); // Sort in descending order\n            topRows[r].push_back({rowVals[0].first, {r, rowVals[0].second}});\n            topRows[r].push_back({rowVals[1].first, {r, rowVals[1].second}});\n            topRows[r].push_back({rowVals[2].first, {r, rowVals[2].second}});\n        }\n\n        // Compute top 3 values for each column\n        for (int c = 0; c < cols; ++c) {\n            std::vector<std::pair<long long, int>> colVals;\n            for (int r = 0; r < rows; ++r) {\n                colVals.push_back({b[r][c], r});\n            }\n            std::sort(colVals.rbegin(), colVals.rend()); // Sort in descending order\n            topCols[c].push_back({colVals[0].first, {colVals[0].second, c}});\n            topCols[c].push_back({colVals[1].first, {colVals[1].second, c}});\n            topCols[c].push_back({colVals[2].first, {colVals[2].second, c}});\n        }\n\n        // Brute force over all possible top 3 rows and columns combinations\n        long long maxSum = LLONG_MIN;\n        for (int r1 = 0; r1 < rows; ++r1) {\n            for (int r2 = r1 + 1; r2 < rows; ++r2) {\n                for (int r3 = r2 + 1; r3 < rows; ++r3) {\n                    std::set<int> usedCols;\n                    for (int k = 0; k < 3; ++k) {\n                        usedCols.insert(topRows[r1][k].second.second);\n                        usedCols.insert(topRows[r2][k].second.second);\n                        usedCols.insert(topRows[r3][k].second.second);\n                    }\n                    if (usedCols.size() < 3) continue; // Skip if not all columns are unique\n\n                    for (const auto& [v1, pos1] : topRows[r1]) {\n                        for (const auto& [v2, pos2] : topRows[r2]) {\n                            if (pos1.second == pos2.second) continue; // Same column\n                            for (const auto& [v3, pos3] : topRows[r3]) {\n                                if (pos1.second == pos3.second || pos2.second == pos3.second) continue; // Same column\n                                long long currSum = v1 + v2 + v3;\n                                maxSum = std::max(maxSum, currSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723910263",
    "subm_id": "1359223475"
}