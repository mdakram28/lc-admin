{
    "username": "Nivetha_2002",
    "submission": "/**\n * @param {number[]} nums\n * @return {number}\n */\nvar countOfPairs = function(nums) {\n    const MOD = 1e9 + 7;\n    const n = nums.length;\n\n    // Map to store the count of sequences ending with a specific value of arr1\n    let dp = new Map();\n\n    // Initialize dp with possible values for the first element\n    for (let a1 = 0; a1 <= nums[0]; a1++) {\n        let a2 = nums[0] - a1;\n        dp.set(a1, 1); // There's one way to have arr1[0] = a1 and arr2[0] = a2\n    }\n\n    for (let i = 1; i < n; i++) {\n        let temp = new Map();\n        for (let [prev_a1, count] of dp.entries()) {\n            let min_a1 = prev_a1; // To ensure non-decreasing in arr1\n            let max_a1 = nums[i]; // arr1[i] can't be more than nums[i]\n            for (let a1 = min_a1; a1 <= max_a1; a1++) {\n                let a2 = nums[i] - a1;\n                if (a2 <= nums[i - 1] - prev_a1) { // Ensure arr2 is non-increasing\n                    let prevCount = temp.get(a1) || 0;\n                    temp.set(a1, (prevCount + count) % MOD);\n                }\n            }\n        }\n        dp = temp;\n    }\n\n    // Sum all possible sequences\n    let result = 0;\n    for (let count of dp.values()) {\n        result = (result + count) % MOD;\n    }\n\n    return result;\n\n};",
    "submit_ts": "1723346112",
    "subm_id": "1351570448"
}