{
    "username": "IsppQYrx3Q",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the horizontal and vertical cuts\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        // Use a priority queue to process the minimum cost cuts\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n        \n        // Add all horizontal cuts to the priority queue\n        for (int i = 0; i < horizontalCut.length; i++) {\n            pq.add(new int[]{horizontalCut[i], 0}); // 0 denotes horizontal cut\n        }\n        \n        // Add all vertical cuts to the priority queue\n        for (int j = 0; j < verticalCut.length; j++) {\n            pq.add(new int[]{verticalCut[j], 1}); // 1 denotes vertical cut\n        }\n        \n        long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        \n        // Process all cuts from the priority queue\n        while (!pq.isEmpty()) {\n            int[] cut = pq.poll();\n            int cost = cut[0];\n            int type = cut[1];\n            \n            if (type == 0) {\n                // Horizontal cut\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                // Vertical cut\n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720925579",
    "subm_id": "1320259432"
}