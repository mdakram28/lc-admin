{
    "username": "Maruzensky",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        num_set = list(set(nums))\n        m = len(num_set)\n        num_dict = {x: i for i, x in enumerate(num_set)}\n        \n        reg = [[None for _ in range(m)] for _ in range(k + 1)]\n        for i in range(m):\n            reg[0][i] = 0\n        \n        sl_list = [SortedList([(0, idx) for idx in range(m)])] + [SortedList() for _ in range(k)]\n        \n        for x in nums:\n            idx = num_dict[x]\n            for kk in range(k, -1, -1):\n                old_val = reg[kk][idx]\n                \n                if reg[kk][idx] is not None:\n                    new_val = old_val + 1\n                    reg[kk][idx] = new_val\n                    sl_list[kk].remove((old_val, idx))\n                    sl_list[kk].add((new_val, idx))\n                    \n                old_val = reg[kk][idx]\n                if kk > 0:\n                    if len(sl_list[kk - 1]) < 2 and all(i == idx for _, i in sl_list[kk - 1]):\n                        continue\n                    \n                    val, i = sl_list[kk - 1][-1]\n                    if i == idx:\n                        val, i = sl_list[kk - 1][-2]\n\n                    new_val = max(val + 1, old_val) if old_val is not None else val + 1\n\n                    if old_val is not None:\n                        # print(sl_list[kk], kk)\n                        sl_list[kk].remove((old_val, idx))\n                    sl_list[kk].add((new_val, idx))\n                    \n                    reg[kk][idx] = new_val\n                    \n            # print(x, sl_list)\n                    \n        segment_best = [sl[-1][0] if sl else -1 for sl in sl_list]\n        return max(segment_best)",
    "submit_ts": 1717859501.0
}