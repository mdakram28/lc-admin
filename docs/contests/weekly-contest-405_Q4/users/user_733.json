{
    "username": "Arucade",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie preRoot = new Trie(), sufRoot = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            preRoot.add(words[i], 0, costs[i], true);\n            sufRoot.add(words[i], words[i].length() - 1, costs[i], false);\n        }\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        for (int i = 1; i <= n; i++) {\n            dp[i] = -1;\n            Trie node = sufRoot;\n            int j = i - 1;\n            while (node != null && j >= 0) {\n                int c = target.charAt(j) - 'a';\n                node = node.children[c];\n                if (node != null && node.cost > 0 && dp[j] != -1) {\n                    dp[i] = dp[i] == -1 ? node.cost + dp[j] : Math.min(dp[i], node.cost + dp[j]);\n                }\n                j--;\n            }\n            // System.out.println(i + \",\" + dp[i]);\n        }\n        return dp[n];\n    }\n    \n    static class Trie {\n        Trie[] children;\n        int cost;\n        \n        Trie() {\n            children = new Trie[26];\n            cost = -1;\n        }\n        \n        void add(String s, int i, int c, boolean asc) {\n            if (i == s.length() || i < 0) {\n                cost = cost == -1 ? c : Math.min(cost, c);\n                return;\n            }\n            int j = s.charAt(i) - 'a';\n            if (children[j] == null) children[j] = new Trie();\n            children[j].add(s, asc ? (i + 1) : (i - 1), c, asc);\n        }\n    }\n}",
    "submit_ts": "1720322776",
    "subm_id": "1312358820"
}