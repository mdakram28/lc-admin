{
    "username": "inversionpeter",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size(), columns = grid[0].size(), halfRows = rows >> 1, halfColumns = columns >> 1, minimum = 0, ones, zeros, mismatch = 0;\n        //cout << rows << ' ' << columns << '\\n';\n        for (int i = 0; i < halfRows; ++i) {\n            for (int j = 0; j < halfColumns; ++j) {\n                ones = 0;\n                if (grid[i][j]) {\n                    ++ones;\n                }\n                if (grid[rows - i - 1][j]) {\n                    ++ones;\n                }\n                if (grid[i][columns - j - 1]) {\n                    ++ones;\n                }\n                if (grid[rows - i - 1][columns - j - 1]) {\n                    ++ones;\n                }\n                if (ones > 2) {\n                    minimum += (4 - ones);\n                }\n                else {\n                    minimum += ones;\n                }\n            }\n        }\n        if ((rows & 1) && (columns & 1)) {\n            if (grid[halfRows][halfColumns]) {\n                ++minimum;\n            }\n            ones = 0;\n            for (int j = 0; j < halfColumns; ++j) {\n                if (grid[halfRows][j] != grid[halfRows][columns - j - 1]) {\n                    ++mismatch;\n                }\n                else if (grid[halfRows][j]) {\n                    ones += 2;\n                }\n            }\n            for (int i = 0; i < halfRows; ++i) {\n                if (grid[i][halfColumns] != grid[rows - i - 1][halfColumns]) {\n                    ++mismatch;\n                }\n                else if (grid[i][halfColumns]) {\n                    ones += 2;\n                }\n            }\n            if ((ones & 3) == 2 && !mismatch) {\n                minimum += 2;\n            }\n            else {\n                minimum += mismatch;\n            }\n        }\n        else if (rows & 1) {\n            ones = 0;\n            for (int j = 0; j < halfColumns; ++j) {\n                if (grid[halfRows][j] != grid[halfRows][columns - j - 1]) {\n                    ++mismatch;\n                }\n                else if (grid[halfRows][j]) {\n                    ones += 2;\n                }\n            }\n            if ((ones & 3) == 2 && !mismatch) {\n                minimum += 2;\n            }\n            else {\n                minimum += mismatch;\n            }\n        }\n        else if (columns & 1) {\n            ones = 0;\n            for (int i = 0; i < halfRows; ++i) {\n                if (grid[i][halfColumns] != grid[rows - i - 1][halfColumns]) {\n                    ++mismatch;\n                }\n                else if (grid[i][halfColumns]) {\n                    ones += 2;\n                }\n            }\n            if ((ones & 3) == 2 && !mismatch) {\n                minimum += 2;\n            }\n            else {\n                minimum += mismatch;\n            }\n        }\n        //cout << way0 << ' ' << way1 << '\\n';\n        return minimum;\n    }\n};",
    "submit_ts": "1722698158",
    "subm_id": "1343171605"
}