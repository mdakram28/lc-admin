{
    "username": "CoderAbhi27",
    "submission": "class Solution {\npublic:\n    \n    vector<vector<int>> adj;\n    vector<int> par, dp, ans;\n    int dia=0;\n\n    int dfs(int i){\n        // if(dp[i]!=-1) return dp[i];\n        dp[i]=0;\n        int mx1=0, mx2=0;\n        for(auto j:adj[i]){\n            if(j==par[i]) continue;\n            par[j]=i;\n            int val = dfs(j)+1;\n            dp[i] = max(dp[i], val);\n            if(val>mx1){\n                mx2=mx1;\n                mx1=val;\n            }\n            else if(val>mx2){\n                mx2=val;\n            }\n        }\n        dia=max(dia, mx1+mx2);\n        return dp[i];\n    }\n\n    void dfs_rerooting(int i){\n        ans[i]=dp[i];\n        multiset<int> ms;\n        for(auto j:adj[i]){\n            ms.insert(dp[j]+1);\n        }\n\n        for(auto j:adj[i]){\n            if(j==par[i]) continue;\n            int v1=dp[i], v2=dp[j];\n            \n            ms.erase(ms.find(dp[j]+1));\n            dp[i]=0;\n            if(ms.size()) dp[i]=*ms.rbegin();\n\n            dp[j] = max(dp[j], dp[i]+1);\n\n            dfs_rerooting(j);\n            \n            dp[i]=v1;\n            dp[j]=v2;\n            ms.insert(dp[j]+1);\n        }\n    }\n    \n    \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1, m=edges2.size()+1;\n        adj.assign(n, vector<int>());\n        for(auto e:edges1){\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        par.assign(n, -1);\n        dp.assign(n, -1);\n        ans.assign(n, 1e9);\n        dia=0;\n        dfs(0);\n        dfs_rerooting(0);\n        int d1=dia;\n        int mn1=*min_element(ans.begin(), ans.end());\n        \n        adj.assign(m, vector<int>());\n        for(auto e:edges2){\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        par.assign(m, -1);\n        dp.assign(m, -1);\n        ans.assign(m, 1e9);\n        dia=0;\n        dfs(0);\n        dfs_rerooting(0);\n        int d2=dia;\n        int mn2=*min_element(ans.begin(), ans.end());\n        \n        // cout<<d1<<' '<<d2<<' '<<mn1<<' '<<mn2<<'\\n';\n        return max({d1, d2, mn1+mn2+1});\n    }\n};",
    "submit_ts": "1719718861",
    "subm_id": "1304427915"
}