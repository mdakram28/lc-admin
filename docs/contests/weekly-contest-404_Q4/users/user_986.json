{
    "username": "akasaudhan02",
    "submission": "class Solution {\npublic:\n    int bfs(int start, const vector<vector<int>>& graph) {\n        int n = graph.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int farthestNode = start;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : graph[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return farthestNode;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1, m = e2.size() + 1;\n        vector<vector<int>> g1(n), g2(m);\n        \n        for (auto& e : e1) {\n            g1[e[0]].push_back(e[1]);\n            g1[e[1]].push_back(e[0]);\n        }\n        for (auto& e : e2) {\n            g2[e[0]].push_back(e[1]);\n            g2[e[1]].push_back(e[0]);\n        }\n\n        auto bfs = [](int s, const vector<vector<int>>& g) {\n            int n = g.size();\n            vector<int> d(n, -1);\n            queue<int> q;\n            q.push(s);\n            d[s] = 0;\n            int fn = s;\n            \n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : g[u]) {\n                    if (d[v] == -1) {\n                        d[v] = d[u] + 1;\n                        q.push(v);\n                        if (d[v] > d[fn]) fn = v;\n                    }\n                }\n            }\n            return fn;\n        };\n\n        auto td = [&](const vector<vector<int>>& g) {\n            int fn1 = bfs(0, g);\n            int fn2 = bfs(fn1, g);\n            vector<int> d(g.size(), -1);\n            queue<int> q;\n            q.push(fn1);\n            d[fn1] = 0;\n            int md = 0;\n            \n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : g[u]) {\n                    if (d[v] == -1) {\n                        d[v] = d[u] + 1;\n                        q.push(v);\n                        md = max(md, d[v]);\n                    }\n                }\n            }\n            return md;\n        };\n\n        int d1 = td(g1);\n        int d2 = td(g2);\n\n        return max((d1 + 1) / 2 + (d2 + 1) / 2 + 1, max(d1, d2));\n    }\n};",
    "submit_ts": "1719716465",
    "subm_id": "1304365220"
}