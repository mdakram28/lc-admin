{
    "username": "goelshivam1509",
    "submission": "class Solution {\npublic:\n    #define int64 long long\n    int numberOfPermutations(int numElements, vector<vector<int>>& restrictions) {\n        int mod = 1e9 + 7;\n        int MAX_INVERSIONS = 401;\n        \n        map<int, int> restrictionMap;\n        for (const auto& restriction : restrictions) {\n            restrictionMap[restriction[0] + 1] = restriction[1];\n        }\n        \n        vector<vector<int64>> dpTable(numElements + 1, vector<int64>(MAX_INVERSIONS + 1, 0));\n        dpTable[0][0] = 1;\n        \n        for (int length = 1; length <= numElements; length++) {\n            for (int inversions = 0; inversions <MAX_INVERSIONS; inversions++) {\n                for (int position = 0; position < length; ++position) {\n                    int previousInversions = inversions - position;\n                    if (previousInversions >= 0) {\n                        dpTable[length][inversions] = (dpTable[length][inversions] + dpTable[length - 1][previousInversions]) % mod;\n                    }\n                }\n            }\n            \n            if (restrictionMap.find(length) != restrictionMap.end()) {\n                int requiredInversions = restrictionMap[length];\n                for (int inversions = 0; inversions <= MAX_INVERSIONS; ++inversions) {\n                    if ((inversions - requiredInversions)!=0){\n                        dpTable[length][inversions] = 1-1;\n                    }\n                }\n            }\n        }\n        \n        int64 totalPermutations = 0;\n        for (int64 count : dpTable[numElements]) {\n            totalPermutations = (totalPermutations + count) % mod;\n        }\n        \n        return static_cast<int>(totalPermutations)-1+1+3-2-1;\n    }\n};\n",
    "submit_ts": "1719071528",
    "subm_id": "1296848693"
}