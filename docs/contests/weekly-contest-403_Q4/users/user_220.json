{
    "username": "jachetheboss",
    "submission": "class Solution {\npublic:\n    void rotate90DegClockwise(vector<vector<int>>& grid){\n        // cout << \"hello\" << endl;\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> new_grid (n, vector<int> (m, 0));\n        for(int i = 0; i < m; ++i){\n            for(int j = 0; j < n; ++j){\n                new_grid[j][m - 1 - i] = grid[i][j];\n            }\n        }\n        grid = new_grid;\n        // cout << \"world!\" << endl;\n    }\n    int findMinRectangleArea(vector<vector<int>>& grid, int a, int b, int c, int d){ // [a][b] top left, [c][d] bottom right\n        int top = -1;\n        int bottom = -1;\n        int left = -1;\n        int right = -1;\n        for(int i = a; i <= c; ++i){\n            for(int j = b; j <= d; ++j){\n                if(grid[i][j] == 1){\n                    if(top == -1) top = i;\n                    bottom = i;\n                }\n            }\n        }\n        for(int j = b; j <= d; ++j){\n            for(int i = a; i <= c; ++i){\n                if(grid[i][j] == 1){\n                    if(left == -1) left = j;\n                    right = j;\n                }\n            }\n        }\n        return (bottom - top + 1) * (right - left + 1);\n    }\n    void tryParallelCuts(vector<vector<int>>& grid, int& ans){\n        int m = grid.size();\n        int n = grid[0].size();\n        for(int j = 1; j < n; ++j){\n            // j is the vertical cut\n            int rec1_area = findMinRectangleArea(grid, 0, 0, m - 1, j - 1);\n            // i is the horizontal cut\n            for(int i = 1; i < m; ++i){\n                int rec2_area = findMinRectangleArea(grid, 0, j, i - 1, n - 1);\n                int rec3_area = findMinRectangleArea(grid, i, j, m - 1, n - 1);\n                int total_area = rec1_area + rec2_area + rec3_area;\n                ans = min(ans, total_area);\n            }\n        }\n    }\n    void tryPerpendicularCuts(vector<vector<int>>& grid, int& ans){\n        int m = grid.size();\n        int n = grid[0].size();\n        for(int j1 = 1; j1 < n; ++j1){\n            // j1 is the left vertical cut\n            int rec1_area = findMinRectangleArea(grid, 0, 0, m - 1, j1 - 1);\n            // j2 is the right vertical cut\n            for(int j2 = j1 + 1; j2 < n; ++j2){\n                int rec2_area = findMinRectangleArea(grid, 0, j1, m - 1, j2 - 1);\n                int rec3_area = findMinRectangleArea(grid, 0, j2, m - 1, n - 1);\n                int total_area = rec1_area + rec2_area + rec3_area;\n                ans = min(ans, total_area);\n            }\n        }\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        // generate all rectanges, (up to 900 * 900 of them if largest input size grid is filled entirely with 1's)\n        // 2 possible configurations:\n        // \n        // ---------\n        // ---------\n        // 2 parallel \"cuts\" of the same direction\n        //\n        // OR\n        //  |\n        //  |------  2 perpendicular cuts.\n        //  |\n        // ROTATE THE GRID FOR ALL POSSIBLE 90 deg CONFIGS!\n        \n        int ans = grid.size() * grid[0].size();\n        tryParallelCuts(grid, ans);\n        tryPerpendicularCuts(grid, ans);\n        rotate90DegClockwise(grid);\n        \n        tryParallelCuts(grid, ans);\n        tryPerpendicularCuts(grid, ans);\n        rotate90DegClockwise(grid);\n        \n        tryParallelCuts(grid, ans);\n        tryPerpendicularCuts(grid, ans);\n        rotate90DegClockwise(grid);\n        \n        tryParallelCuts(grid, ans);\n        tryPerpendicularCuts(grid, ans);\n        \n        return ans;\n    }\n};",
    "submit_ts": 1719113354.0
}