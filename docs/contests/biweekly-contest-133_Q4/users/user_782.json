{
    "username": "saurav_itadori",
    "submission": "class Solution {\npublic:\n    int MOD = 1e9+7;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n                   int maxInversions = min(400,n * (n - 1) / 2);\n\n    // Initialize DP table\n    vector<vector<int>> dp(n + 1, vector<int>(maxInversions + 1, 0));\n    dp[0][0] = 1;\n        map <int,int> cun;\n        for(auto req :requirements){\n            cun[req[0]]=req[1];\n        }\n\n    // Fill DP table\n    for (int i = 1; i <= n; ++i) {\n        for (int k = 0; k <= maxInversions; ++k) {\n            for (int j = 0; j < i; ++j) {\n                \n                if (k >= j) {\n                    dp[i][k] = (dp[i][k] + dp[i - 1][k - j]) % MOD;\n                }\n            }\n        }\n        if(cun.find(i-1) != cun.end()){\n                   int x = cun[i-1];\n                   for(int ll = 0; ll <= maxInversions; ll+=1){\n                       if(x != ll){\n                           dp[i][ll] = 0;\n                       }\n                   }\n        }\n        \n    }\n        int x = cun[n-1];\n        return dp[n][x];\n\n//     // Initialize array to store valid counts\n//     vector<int> valid(maxInversions + 1, 0);\n//     valid[0] = 1;\n\n//     // Process each requirement\n//     for (auto& req : requirements) {\n//         int endi = req[0] + 1;\n//         int cnti = req[1];\n//         vector<int> newValid(maxInversions + 1, 0);\n        \n//         for (int k = cnti; k <= maxInversions; ++k) {\n//             newValid[k] = valid[k - cnti] * dp[endi][cnti] % MOD;\n//         }\n        \n//         valid = newValid;\n//     }\n\n//     // Sum up valid permutations that meet all requirements\n//     int result = 0;\n//     for (int k = 0; k <= maxInversions; ++k) {\n//         cout<<k<<\" \"<<valid[k]<<endl;\n//         result = (result + valid[k]) % MOD;\n//     }\n//         cout<<endl<<endl;\n\n//     return result;\n    }\n};",
    "submit_ts": "1719070909",
    "subm_id": "1296834656"
}