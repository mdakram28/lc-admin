{
    "username": "wanghy012",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        mytree = segTree(nums)\n        res = []\n        \n        for q, i, j in queries:\n            if q == 1:\n                res.append(mytree.query(i,j))\n            else:\n                mytree.update(i,j)\n        return res\n        \n\nclass segTree:\n    def __init__(self, nums):\n        self.nums = nums\n        self.tree = defaultdict(lambda : 0)\n        n = len(nums)\n        npeaks = [0]*(n+1)\n        for i in range(1,n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                npeaks[i+1] = npeaks[i] + 1\n            else:\n                npeaks[i+1] = npeaks[i]\n        l = 1\n        while l <= n:\n            for j in range(0,n//l):\n                self.tree[(l,j)] = npeaks[l*(j+1)] - npeaks[l*j]\n            l = l*2\n    \n    def update(self, i, val):\n        if i > 0 and i < len(self.nums)-1:\n            peak = int(self.nums[i] > self.nums[i-1] and self.nums[i] > self.nums[i+1])\n            newpeak = int(val > self.nums[i-1] and val > self.nums[i+1])\n            self.update_tree(i, newpeak-peak)\n        if i > 1:\n            peak = int(self.nums[i-1] > self.nums[i-2] and self.nums[i-1] > self.nums[i])\n            newpeak = int(self.nums[i-1] > self.nums[i-2] and self.nums[i-1] > val)\n            self.update_tree(i-1, newpeak-peak)\n        if i < len(self.nums) - 2:\n            peak = int(self.nums[i+1] > self.nums[i] and self.nums[i+1] > self.nums[i+2])\n            newpeak = int(self.nums[i+1] > val and self.nums[i+1] > self.nums[i+2])\n            self.update_tree(i+1, newpeak-peak)  \n        self.nums[i] = val\n            \n        \n    def update_tree(self, i, change):\n        if change == 0:\n            return\n        l = 1\n        n = len(self.nums)\n        while l <= n:\n            self.tree[(l,i//l)] += change\n            l = l*2\n            \n    def query(self, i, j):\n        if j <= i + 1:\n            return 0\n        return self.query_zero(j-1) - self.query_zero(i)\n        \n    def isPeak(self,i):\n        if i == 0:\n            return 0\n        if i == len(self.nums):\n            return 0\n        return int(nums[i] > nums[i-1] and nums[i] > nums[i+1])\n        \n    def query_zero(self, i):\n        l = 1\n        i = i+1\n        res = 0\n        while i > 0:\n            if i % (l*2) != 0:\n                res += self.tree[(l,i//l - 1)]\n                i -= l\n            l = l*2\n        return res\n        \n        \n        \n        \n        ",
    "submit_ts": "1718508587",
    "subm_id": "1289685548"
}