{
    "username": "suvidsahay",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(k + 1, vector<int>(n, 0));\n\n        for(int i = 0; i <= k; i++) {\n            dp[i][0] = 1;\n        }\n\n        map<int, int> count;\n\n        for(int i = 0; i < n; i++) {\n            if(count.find(nums[i]) != count.end()) {\n                dp[0][i] = count[nums[i]] + 1;\n            } else {\n                dp[0][i] = 1;\n            }\n            count[nums[i]]++;\n        }\n\n        for(int i = 1; i <= k; i++) {\n            int m = dp[i - 1][0];\n            map<int, int> count;\n            count[nums[0]] = dp[i - 1][0];\n\n            for(int j = 1; j < n; j++) {\n                if(count.find(nums[j]) != count.end()) {\n                    dp[i][j] = max(dp[i][j], count[nums[j]] + 1);\n                }\n                dp[i][j] = max(dp[i][j], max(dp[i - 1][j], m + 1));\n                m = max(m, dp[i - 1][j]);\n                count[nums[j]] = dp[i][j];\n            }\n        }\n\n        int res = 0;\n        for(int i = 0; i <= k; i++) {\n            for(int j = 0; j < n; j++) {\n                res = max(res, dp[i][j]);\n            }\n            // cout << endl;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1717861612.0
}