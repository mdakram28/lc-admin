{
    "username": "vbshubham",
    "submission": "from itertools import permutations\nfrom typing import List\n\n\nclass Solution:\n    def minimumArea(self, grid: List[List[int]]) -> int:\n        if not grid or not grid[0]:\n            return 0\n\n        m, n = len(grid), len(grid[0])\n\n        top, bottom = None, None\n        left, right = None, None\n\n        for i in range(m):\n            if any(grid[i]):\n                if top is None:\n                    top = i\n                bottom = i\n\n        for j in range(n):\n            if any(grid[i][j] for i in range(m)):\n                if left is None:\n                    left = j\n                right = j\n\n        if top is None or left is None:\n            return 0\n\n        row_count = bottom - top + 1\n        col_count = right - left + 1\n\n        return row_count * col_count\n\n    def divide(self, grid):\n        m = len(grid)\n        n = len(grid[0])\n        divisions = []\n\n        # Horizontal cuts\n        for row in range(1, m):\n            grid1 = grid[:row]\n            grid2 = grid[row:]\n            divisions.append((grid1, grid2))\n\n        # Vertical cuts\n        for col in range(1, n):\n            grid1 = [row[:col] for row in grid]\n            grid2 = [row[col:] for row in grid]\n            divisions.append((grid1, grid2))\n\n        return divisions\n\n    def f(self, grid, k):\n        # print(grid, k)\n        if k == 1:\n            return self.minimumArea(grid)\n        return min(self.f(div1, k - 1) + self.minimumArea(div2) for divisions in self.divide(grid) for div1,div2 in permutations(divisions))\n\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        return self.f(grid, 3)\n\n\n\n\n",
    "submit_ts": 1719113905.0
}