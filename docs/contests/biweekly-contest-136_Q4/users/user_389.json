{
    "username": "vigilant-gangulyjsl",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        e = [{} for _ in range(n)]\n        for u, v in edges:\n            e[u][v] = 0\n            e[v][u] = 0\n        queue = [(0,-1)]\n        i = 0 \n        while i<len(queue):\n            node, last = queue[i]\n            for next in e[node]:\n                if next != last:\n                    queue.append((next,node))\n            i += 1\n        distance = [0]*n\n        for i in range(n-1,-1,-1):\n            node,father = queue[i]\n\n            for next in e[node]:\n                if next != father:\n                    if next & 1:\n                        e[node][next] = distance[next] + 1\n                    else:\n                        e[node][next] = distance[next] + 2\n                    distance[node] = max(distance[node], e[node][next])\n\n        ans =[0]*n\n        cnt = []\n        for i in range(n):\n            check = []\n            for c in e[i]:\n                check.append((e[i][c],c))\n            check.sort(reverse = True)\n            cnt.append(check[:2])\n        print(cnt)\n        for node,father in queue:\n\n            if node == 0:\n                ans[node] = distance[node]\n            else:\n                tmp = 0\n                if len(cnt[father]) >= 2 and node == cnt[father][0][1]:\n                    tmp = cnt[father][1][0]\n                elif node != cnt[father][0][1]:\n\n                    tmp = cnt[father][0][0]\n                if not father&1:\n                    tmp += 2\n                else:\n                    tmp += 1\n                e[node][father] = tmp\n                cnt[node].append((tmp,father))\n                cnt[node].sort(reverse = True)\n                ans[node] = max(distance[node],tmp)\n        return ans",
    "submit_ts": "1722700430",
    "subm_id": "552279805"
}