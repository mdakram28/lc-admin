{
    "username": "fpeterfalvi",
    "submission": "import java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n        long MOD = (int)1e9 + 7;\n        Map<Integer, Integer> r = new HashMap<>();\n        for (int[] requirement : requirements) {\n            r.put(requirement[0], requirement[1]);\n        }\n        int maxCount = r.get(n - 1);\n        long[][] lenAndCount = new long[n + 1][maxCount + 1];\n        lenAndCount[n][maxCount] = 1;\n        for (int len = n - 1; len >= 0; len--) {\n            for (int prevCount = 0; prevCount <= maxCount; prevCount++) {\n                if (lenAndCount[len + 1][prevCount] != 0) {\n                    for (int thisStepInv = 0; thisStepInv <= Math.min(len, prevCount); thisStepInv++) {\n                        if (!r.containsKey(len - 1) || r.get(len - 1) == prevCount - thisStepInv) {\n                            lenAndCount[len][prevCount - thisStepInv] = (lenAndCount[len][prevCount - thisStepInv] + lenAndCount[len + 1][prevCount]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n        return (int)lenAndCount[0][0];\n    }\n}",
    "submit_ts": "1719069320",
    "subm_id": "1296793187"
}