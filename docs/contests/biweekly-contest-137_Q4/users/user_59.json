{
    "username": "Jonas",
    "submission": "class Solution {\n    List<int[]> l = new ArrayList<>();\n    public long maximumValueSum(int[][] board) {\n        // 500 499 10\n        // 0 10  498\n        // iterate through highest and see if it's taken \n\n        // the reason not to take highest is that it may block something on the same row / col which is of high value\n\n        // intuition says to try only next 3 highest which are unlocked \n        int rows = board.length, cols = board[0].length;\n        for (int i = 0; i < rows; i++) {\n            for (int j = 0; j < cols; j++) {\n                l.add(new int[]{board[i][j],i,j});\n            }\n        }\n        Collections.sort(l, (a,b) -> -Integer.compare(a[0],b[0]));\n        return solve(3, new boolean[rows], new boolean[cols]);\n    }\n\n    long solve(int rem, boolean[] blockedRows, boolean[] blockedCols) {\n        if (rem == 0) return 0;\n        int attempts = 0;\n        long res = Long.MIN_VALUE;\n        for (int[] value : l) {\n                if (attempts == 6) break;\n                int cost = value[0], row = value[1], col = value[2];\n                if (blockedRows[row] || blockedCols[col]) continue;\n                blockedRows[row] = true;\n                blockedCols[col] = true;\n                res = Math.max(res, cost + solve(rem-1, blockedRows, blockedCols));\n                blockedRows[row] = false;\n                blockedCols[col] = false;\n                attempts++;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1723907629",
    "subm_id": "1359116891"
}