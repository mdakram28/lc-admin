{
    "username": "faizanhussain2310",
    "submission": "#define ll long long\n\nclass Solution {\npublic:\n    bool Circle(ll x1,ll y1,ll r1,ll x2,ll y2,ll r2) {\n        long double dist=sqrtl((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n\n        ll dist_radius=r1+r2;\n\n        if(dist<=dist_radius) {\n            return true;\n        }\n\n        return false;\n    }\n\n    bool checkCollision(ll a, ll b, ll c, ll x, ll y, ll radius) {\n        // Finding the distance of line from center.\n        ll dist = (abs(a * x + b * y + c)) / sqrtl(a * a + b * b);\n    \n        // Checking if the distance is less than, \n        // greater than or equal to radius.\n\n        return radius>=dist;\n\n    }   \n\n\n    bool canReachCorner(int x, int y, vector<vector<int>>& v) {\n        int n=v.size();\n\n        int startx=0,starty=0;\n        int endx=x,endy=y;\n\n        int a1=1,b1=0,c1=0;\n        int a2=0,b2=1,c2=-y;\n        int a3=1,b3=0,c3=-x;\n        int a4=0,b4=1,c4=0;\n        bool checker=true;\n\n        vector<vector<int>> adj(n+5);\n        for(int i=0; i<n; i++) {\n            for(int j=i+1; j<n; j++) {\n                if(Circle(v[i][0],v[i][1],v[i][2],v[j][0],v[j][1],v[j][2])) {\n                    if(v[i]!=v[j]) {\n                        adj[i].push_back(j);\n                        adj[j].push_back(i);\n                    }\n                }\n            }\n        }\n\n        vector<int> vis(n+5);\n\n        for(int i=0; i<n; i++) {\n            if(vis[i]) continue;\n\n            queue<int> q;\n            q.push(i);\n            vis[i]=1;\n\n            vector<ll> check(5);\n\n            while(!q.empty()) {\n                vector<int> current=v[q.front()];\n                int node=q.front();\n                q.pop();\n\n                if(checkCollision(a1,b1,c1,current[0],current[1],current[2])) {\n                    check[1]++;\n                }\n                if(checkCollision(a2,b2,c2,current[0],current[1],current[2])) {\n                    check[2]++;\n                }\n                if(checkCollision(a3,b3,c3,current[0],current[1],current[2])) {\n                    check[3]++;\n                }\n                if(checkCollision(a4,b4,c4,current[0],current[1],current[2])) {\n                    check[4]++;\n                }\n\n                for(auto x : adj[node]) {\n                    if(!vis[x]) {\n                        q.push(x);\n                        vis[x]=1;\n                    }\n                }\n\n            }\n\n            if((check[1] && check[4]) || (check[2] && check[3]) || (check[2] && check[4]) || (check[1] && check[3])) {\n                return false;\n            }\n\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722136937",
    "subm_id": "1335749336"
}