{
    "username": "Georgius",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        final Map<Integer,Integer> counts = new HashMap<>();\n        final int length = nums.length;\n        for (int index = 0; index < length/2; ++index) {\n            counts.compute(Math.abs(nums[index] - nums[length - 1 - index]), (key, value) -> value == null ? 1 : 1 + value);\n        }\n\n        final TreeMap<Integer,Integer> map = new TreeMap<>(Comparator.reverseOrder());\n        \n        for (final Map.Entry<Integer,Integer> entry : counts.entrySet()) {\n            final int diff = entry.getKey();\n            map.compute(entry.getValue(), (key, value) -> value == null ? diff : Integer.min(value, diff));\n        }\n\n        int minOps = Integer.MAX_VALUE;\n        for (final Map.Entry<Integer,Integer> entry : map.entrySet()) {\n            final int diff = entry.getValue();\n            final int count = entry.getKey();\n            if (length/2 - count >= minOps) {\n                break;\n            }\n\n            int candidate = 0;\n            for (int index = 0; index < length/2; ++index) {\n                if (Math.abs(nums[index] - nums[length - 1 - index]) != diff) {\n                    if (k >= Integer.min(nums[index], nums[length - 1 - index]) + diff) {\n                        candidate += 1;\n                    } else if (Integer.max(nums[index], nums[length - 1 - index]) - diff >= 0) {\n                        candidate += 1;\n                    } else {\n                        candidate += 2;\n                    }\n                }\n            }\n\n            minOps = Integer.min(minOps, candidate);\n        }\n        return minOps;\n    }\n}",
    "submit_ts": "1721489451",
    "subm_id": "1327453659"
}