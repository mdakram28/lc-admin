{
    "username": "Sky_Lee",
    "submission": "type SegmentTree struct {\n    n    int\n    tree []int\n    lazy []bool\n}\n\nfunc NewSegmentTree(n int) *SegmentTree {\n    return &SegmentTree{\n        n:    n,\n        tree: make([]int, 4*n),\n        lazy: make([]bool, 4*n),\n    }\n}\n\nfunc (st *SegmentTree) update(start, end, l, r, node int) {\n    if st.lazy[node] {\n        st.tree[node] = (end - start + 1)\n        if start != end {\n            st.lazy[2*node+1] = true\n            st.lazy[2*node+2] = true\n        }\n        st.lazy[node] = false\n    }\n\n    if start > end || start > r || end < l {\n        return\n    }\n\n    if start >= l && end <= r {\n        st.tree[node] = (end - start + 1)\n        if start != end {\n            st.lazy[2*node+1] = true\n            st.lazy[2*node+2] = true\n        }\n        return\n    }\n\n    mid := (start + end) / 2\n    st.update(start, mid, l, r, 2*node+1)\n    st.update(mid+1, end, l, r, 2*node+2)\n    st.tree[node] = st.tree[2*node+1] + st.tree[2*node+2]\n}\n\nfunc (st *SegmentTree) sum(start, end, l, r, node int) int {\n    if start > end || start > r || end < l {\n        return 0\n    }\n\n    if st.lazy[node] {\n        st.tree[node] = (end - start + 1)\n        if start != end {\n            st.lazy[2*node+1] = true\n            st.lazy[2*node+2] = true\n        }\n        st.lazy[node] = false\n    }\n\n    if start >= l && end <= r {\n        return st.tree[node]\n    }\n\n    mid := (start + end) / 2\n    leftSum := st.sum(start, mid, l, r, 2*node+1)\n    rightSum := st.sum(mid+1, end, l, r, 2*node+2)\n    return leftSum + rightSum\n}\n\nfunc shortestDistanceAfterQueries(n int, queries [][]int) []int {\n    st := NewSegmentTree(n)\n    res := make([]int, 0, len(queries))\n\n    for _, query := range queries {\n        v0, v1 := query[0], query[1]\n        st.update(0, n-1, v0+1, v1-1, 0)\n        inactiveCount := st.sum(0, n-1, 0, n-1, 0)\n        res = append(res, n-inactiveCount-1)\n    }\n\n    return res\n}",
    "submit_ts": "1722742897",
    "subm_id": "552347569"
}