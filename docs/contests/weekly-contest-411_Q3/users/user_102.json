{
    "username": "lyongwolf",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        int m = (n + 1) / 2;\n        int[] A = new int[n];\n        A[0] = 1;\n        for (int i = 1; i < n; i++) {\n            A[i] = A[i - 1] * 10 % k;\n        }\n        boolean[][] dp = new boolean[m + 1][k];\n        dp[m][0] = true;\n        for (int i = m - 1; i >= 0; i--) {\n            int t = i == m - 1 && (n & 1) != 0 ? A[n - i - 1] : (A[n - i - 1] + A[i]) % k;\n            for (int j = 0; j < k; j++) {\n                for (int s = 0; s < 9; s++) {\n                    dp[i][j] |= dp[i + 1][(j + s * t) % k];\n                }\n            }\n        }\n        int[] ans = new int[n];\n        int i = 0, j = 0;\n        o: while (i < m) {\n            int t = i == m - 1 && (n & 1) != 0 ? A[n - i - 1] : (A[n - i - 1] + A[i]) % k;\n            for (int s = 9; s >= 0; s--) {\n                if (dp[i + 1][(j + s * t) % k]) {\n                    ans[i] = ans[n - i - 1] = s;\n                    i++;\n                    j = (j + s * t) % k;\n                    continue o;\n                }\n            }\n        }\n        StringBuilder sb = new StringBuilder();\n        for (int v : ans) {\n            sb.append(v);\n        } \n        return sb.toString();\n    }\n}",
    "submit_ts": "1723949865",
    "subm_id": "556395452"
}