{
    "username": "md_turin",
    "submission": "\nconst int mx = 5e4+1;\nstruct tvalue{\n    int l, r, v;\n    tvalue() {}\n    tvalue(int _l, int _r, int _v){\n        l = _l;\n        r = _r;\n        v = _v;\n    }\n};\n\ntvalue tree[mx<<2];\n\nclass Solution {\npublic:\n    \n    void build(int p, int l, int r){\n        tree[p] = {-1, -1, 0};\n        if(l == r) return;\n        \n        int mid = (l + r) / 2;\n        build(p<<1, l, mid);\n        build(p<<1|1, mid+1, r);\n    }\n    \n    tvalue update(tvalue left, tvalue right){\n        tvalue res = {-1, -1, 0};\n        if(left.r != -1 && right.l != -1){\n            res.l = left.r;\n            res.r = right.l;\n            res.v = max({left.v, right.v, right.l-left.r});\n        } else if(left.l != -1 && right.l != -1){\n            res.l = left.l;\n            res.r = right.l;\n            res.v = max({left.v, right.v, right.l-left.l});\n        } else if(left.r != -1 && right.r != -1){\n            res.l = left.r;\n            res.r = right.r;\n            res.v = max({left.v, right.v, right.r-left.r});\n        } else if(left.l != -1 && right.r != -1){\n            res.l = left.l;\n            res.r = right.r;\n            res.v = max({left.v, right.v, right.r-left.l});\n        } else if(left.l != -1 || left.r != -1) return left;\n        else return right;\n        \n        return res;\n    }\n    \n    void update(int p, int l, int r, int i, int v){\n        if(l == r){\n            tree[p] = (v == 1) ? tvalue(l, l, 0) : tvalue(-1, -1, 0);\n            return;\n        }\n        \n        int mid = (l + r) / 2;\n        if(i <= mid)\n            update(p<<1, l, mid, i, v);\n        else update(p<<1|1, mid+1, r, i, v);\n        \n        tree[p] = update(tree[p<<1], tree[p<<1|1]);\n    }\n    \n    tvalue query(int p, int l, int r, int i, int j){\n        if(l>r || l>j || r<i) return {-1, -1, 0};\n        if(l>=i && r<=j) return tree[p];\n        \n        int mid = (l + r) / 2;\n        tvalue v1 = query(p<<1, l, mid, i, j);\n        tvalue v2 = query(p<<1|1, mid+1, r, i, j);\n        return update(v1, v2);\n    }\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<int> pos(mx+5, 0);\n        pos[0] = pos[mx-1] = 1;\n        set<int> st = {0, mx-1};\n        \n        for(auto q: queries)\n            if(q[0] == 1) {\n                pos[q[1]] = 1;\n                st.insert(q[1]);\n            }\n        \n        map<int, set<pair<int,int>>> mp;\n        for(int i=1,j=0; i<mx; ++i){\n            if(pos[i] == 1){\n                mp[i-j].insert({j, i});\n                j = i;\n            }\n        }\n        \n        vector<bool> ans;\n        for(int i=queries.size()-1; i>=0; --i){\n            auto q = queries[i];\n            if(q[0] == 1){\n                if(q[1] == 0 || q[1] == mx-1) continue;\n                \n                st.erase(q[1]);\n                auto it = st.upper_bound(q[1]);\n                auto jt = prev(it);\n                \n                int len = *it - q[1]; \n                mp[len].erase({q[1], *it});\n                if(mp[len].size() == 0)\n                    mp.erase(len);\n                \n                len = q[1] - *jt; \n                mp[len].erase({*jt, q[1]});\n                if(mp[len].size() == 0)\n                    mp.erase(len);\n                \n                mp[*it - *jt].insert({*jt, *it});\n            } else {\n                bool found = false;\n                auto it = mp.lower_bound(q[2]);\n                while(it != mp.end()){\n                    auto jt = it->second.begin();\n                    if(jt->second<=q[1]){\n                        found = true;\n                        break;\n                    }else if(q[1] >= jt->first && q[1]-(jt->first)>=q[2]){\n                        found = true;\n                        break;\n                    }\n                    it++;\n                } \n                \n                \n                \n                \n                ans.push_back(found);\n            }\n        }\n        \n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": "1716652509",
    "subm_id": "1267665186"
}