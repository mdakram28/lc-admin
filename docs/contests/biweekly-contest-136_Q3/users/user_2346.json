{
    "username": "yashviagarwal21",
    "submission": "class Solution {\npublic:\n    int calculateMinFlips(vector<vector<int>>& grid) {\n    int numRows = grid.size();\n    int numCols = grid[0].size();\n    int totalFlips = 0;\n\n    // Handle the center cell for odd dimensions\n    if (numRows % 2 == 1 && numCols % 2 == 1) {\n        if (grid[numRows / 2][numCols / 2] == 1) {\n            totalFlips += 1;\n        }\n    }\n\n    vector<int> shiftCount(3, 0);\n\n    // Handle the central row for odd number of rows\n    if (numRows % 2 == 1) {\n        int left = 0, right = numCols - 1;\n        while (left < right) {\n            int sum = grid[numRows / 2][left] + grid[numRows / 2][right];\n            shiftCount[sum] += 1;\n            left += 1;\n            right -= 1;\n        }\n    }\n\n    // Handle the central column for odd number of columns\n    if (numCols % 2 == 1) {\n        int top = 0, bottom = numRows - 1;\n        while (top < bottom) {\n            int sum = grid[top][numCols / 2] + grid[bottom][numCols / 2];\n            shiftCount[sum] += 1;\n            top += 1;\n            bottom -= 1;\n        }\n    }\n\n    // Calculate flips required for central row and column\n    if (shiftCount[2] % 2 == 1) {\n        if (shiftCount[1] > 0) {\n            totalFlips += shiftCount[1];\n        } else {\n            totalFlips += 2;\n        }\n    } else {\n        totalFlips += shiftCount[1];\n    }\n\n    // Handle the rest of the grid\n    for (int i = 0; i < numRows / 2; ++i) {\n        for (int j = 0; j < numCols / 2; ++j) {\n            int topLeft = grid[i][j];\n            int bottomLeft = grid[numRows - 1 - i][j];\n            int topRight = grid[i][numCols - 1 - j];\n            int bottomRight = grid[numRows - 1 - i][numCols - 1 - j];\n\n            int sum = topLeft + bottomLeft + topRight + bottomRight;\n\n            if (sum != 0 && sum != 4) {\n                totalFlips += min(sum, 4 - sum);\n            }\n        }\n    }\n\n    return totalFlips;\n}\n\nint minFlips(vector<vector<int>>& grid) {\n    return calculateMinFlips(grid);\n    }\n};",
    "submit_ts": "1722700461",
    "subm_id": "1343242565"
}