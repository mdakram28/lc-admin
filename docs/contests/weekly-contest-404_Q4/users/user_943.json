{
    "username": "Givenchy",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        # key is longest path in a tree is - take an arbitrary node, find longest path from that node \n        # take that end pt, and find longest path - central node or (nodes) are centroid \n        import queue \n        def getDiameter(edgeList):\n            if not edgeList: return 1 \n            edges = defaultdict(list) \n            for a, b in edgeList: \n                edges[a].append(b)\n                edges[b].append(a)\n            # do a bfs \n            q = queue.Queue()\n            q.put(0)\n            \n            maxDist = 0\n            maxNode = 0 \n            dists = {0 : 0} # node to dist \n            while not q.empty():\n                current = q.get()\n                for neighbor in edges[current]: \n                    if neighbor not in dists: \n                        dists[neighbor] = 1 + dists[current] \n                        if dists[neighbor] > maxDist: \n                            maxDist = dists[neighbor]\n                            maxNode = neighbor \n                        q.put(neighbor) \n            # second BFS \n            q = queue.Queue()\n            q.put(maxNode)\n            \n            maxDist = 0\n            \n            dists = {maxNode : 0} # node to dist \n            while not q.empty():\n                current = q.get()\n                for neighbor in edges[current]: \n                    if neighbor not in dists: \n                        dists[neighbor] = 1 + dists[current] \n                        if dists[neighbor] > maxDist: \n                            maxDist = dists[neighbor]\n                            maxNode = neighbor \n                        q.put(neighbor) \n            return maxDist + 1 \n        diam1 = getDiameter(edges1)\n        diam2 = getDiameter(edges2)\n        print(f'Diams are {diam1} {diam2}')\n        if diam1 == 1 or diam2 == 1:\n            if diam1 == diam2: return 1 \n            \n            return 1 + (max(diam1, diam2) //2)\n        \n        return max([diam1-1, diam2-1, (diam1 // 2) + (diam2 // 2) + 1] )  \n            \n                ",
    "submit_ts": 1719719869.0
}