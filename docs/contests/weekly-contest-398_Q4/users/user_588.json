{
    "username": "ForJoinFAANG",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        @lru_cache(None)\n        def dfs(curr, jump, prev):\n            if curr == k:\n                if jump == 0:\n                    if prev == False:\n                        return 1 + dfs(curr - 1, jump, True) + dfs(curr + 1, jump + 1, False)\n                    else:\n                        return 2\n                \n                if jump == 1:\n                    if prev == False:\n                        return 2\n                    return 1\n                    \n                return 1\n                \n            if curr == k + 1:\n                if prev == False:\n                    if jump == 0:\n                        return 2\n                    return 1\n                return 0\n            if curr > k + 1:\n                return 0\n            \n            opt1 = 0\n            if curr - 1 >= 0 and prev == False:\n                opt1 = dfs(curr - 1, jump, True)\n            opt2 = dfs(curr + 2 ** jump, jump + 1, False)\n            \n            return opt1 + opt2\n\n        return dfs(1, 0, False)",
    "submit_ts": 1716088712.0
}