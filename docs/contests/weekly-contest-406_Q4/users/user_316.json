{
    "username": "r32626",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n\n        # Initialize pointers for horizontal and vertical cuts\n        i, j = 0, 0\n        # Initial number of pieces\n        horizontal_pieces = 1\n        vertical_pieces = 1\n\n        # Total cost to cut the cake\n        total_cost = 0\n\n        # Process all the cuts\n        while i < len(horizontalCut) and j < len(verticalCut):\n            if horizontalCut[i] > verticalCut[j]:\n                # Make a horizontal cut\n                total_cost += horizontalCut[i] * vertical_pieces\n                horizontal_pieces += 1\n                i += 1\n            else:\n                # Make a vertical cut\n                total_cost += verticalCut[j] * horizontal_pieces\n                vertical_pieces += 1\n                j += 1\n\n        # If there are remaining horizontal cuts\n        while i < len(horizontalCut):\n            total_cost += horizontalCut[i] * vertical_pieces\n            i += 1\n\n        # If there are remaining vertical cuts\n        while j < len(verticalCut):\n            total_cost += verticalCut[j] * horizontal_pieces\n            j += 1\n    \n        return total_cost\n        ",
    "submit_ts": "1720925081",
    "subm_id": "1320242108"
}