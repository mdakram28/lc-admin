{
    "username": "Xuloo",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (2 * n)\n\n    def build(self, arr):\n        # Initialize the segment tree with arr\n        for i in range(self.n):\n            self.tree[self.n + i] = arr[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[2 * i] + self.tree[2 * i + 1]\n\n    def update(self, index, value):\n        # Update the value at index\n        pos = index + self.n\n        self.tree[pos] = value\n        while pos > 1:\n            pos //= 2\n            self.tree[pos] = self.tree[2 * pos] + self.tree[2 * pos + 1]\n\n    def query(self, left, right):\n        # Query the sum in the range [left, right)\n        res = 0\n        l, r = left + self.n, right + self.n\n        while l < r:\n            if l % 2:\n                res += self.tree[l]\n                l += 1\n            if r % 2:\n                r -= 1\n                res += self.tree[r]\n            l //= 2\n            r //= 2\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def is_peak(i):\n            return 0 < i < len(nums) - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        n = len(nums)\n        is_peak_array = [0] * n\n        \n        # Initialize the is_peak_array\n        for i in range(1, n - 1):\n            is_peak_array[i] = 1 if is_peak(i) else 0\n\n        # Initialize the segment tree with is_peak_array\n        segment_tree = SegmentTree(n)\n        segment_tree.build(is_peak_array)\n\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if li == ri:\n                    results.append(0)\n                else:\n                    results.append(segment_tree.query(li + 1, ri))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                nums[indexi] = vali\n\n                # Update the is_peak_array and segment tree\n                for i in range(max(1, indexi - 1), min(n - 1, indexi + 1) + 1):\n                    is_peak_before = is_peak_array[i]\n                    is_peak_now = 1 if is_peak(i) else 0\n                    if is_peak_before != is_peak_now:\n                        segment_tree.update(i, is_peak_now)\n                        is_peak_array[i] = is_peak_now\n\n        return results",
    "submit_ts": 1718508445.0
}