{
    "username": "ShivamJVM",
    "submission": "import java.util.*;\n\nclass Solution {\n    \n    private boolean circlesTouch(int[][] circles, int i, int j) {\n        long x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n        long x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n        long dx = x1 - x2, dy = y1 - y2;\n        long distSq = dx * dx + dy * dy;\n        long radSumSq = (r1 + r2) * (r1 + r2);\n        return distSq <= radSumSq;\n    }\n\n    private boolean touchesBottomOrRightBorder(int[][] circles, int X, int i) {\n        int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n        return (y - r <= 0 || x + r >= X);\n    }\n\n    private boolean touchesLeftOrTopBorder(int[][] circles, int Y, int i) {\n        int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n        return (x - r <= 0 || y + r >= Y);\n    }\n\n    private boolean isConnected(List<List<Integer>> list, Set<Integer> start, Set<Integer> end, boolean[] visited) {\n        Queue<Integer> q = new LinkedList<>();\n        for (int s : start) {\n            q.offer(s);\n            visited[s] = true;\n        }\n\n        while (!q.isEmpty()) {\n            int node = q.poll();\n\n            if (end.contains(node)) return true;\n\n            for (int neighbor : list.get(node)) {\n                if (!visited[neighbor]) {\n                    visited[neighbor] = true;\n                    q.offer(neighbor);\n                }\n            }\n        }\n        return false;\n    }\n\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        List<List<Integer>> list = new ArrayList<>();\n\n        for (int i = 0; i < n; i++) {\n            list.add(new ArrayList<>());\n        }\n\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (circlesTouch(circles, i, j)) {\n                    list.get(i).add(j);\n                    list.get(j).add(i);\n                }\n            }\n        }\n\n        Set<Integer> bottomOrRightBorderTouch = new HashSet<>();\n        Set<Integer> leftOrTopBorderTouch = new HashSet<>();\n\n        for (int i = 0; i < n; ++i) {\n            if (touchesBottomOrRightBorder(circles, X, i)) {\n                bottomOrRightBorderTouch.add(i);\n            }\n            if (touchesLeftOrTopBorder(circles, Y, i)) {\n                leftOrTopBorderTouch.add(i);\n            }\n        }\n\n        boolean[] visited = new boolean[n];\n\n        if (!bottomOrRightBorderTouch.isEmpty() && !leftOrTopBorderTouch.isEmpty() && isConnected(list, bottomOrRightBorderTouch, leftOrTopBorderTouch, visited)) {\n            return false;\n        }\n\n        return true;\n    }\n}\n",
    "submit_ts": "1722137219",
    "subm_id": "1335757564"
}