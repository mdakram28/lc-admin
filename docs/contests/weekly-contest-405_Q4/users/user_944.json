{
    "username": "Zakaria-Arshad",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # string taget, array of string words, integer array costs\n        # dp with states (target_i)\n        best_cost = {}\n        for i in range(len(words)):\n            if words[i] not in best_cost:\n                best_cost[words[i]] = costs[i]\n            else:\n                best_cost[words[i]] = min(costs[i], best_cost[words[i]])\n        cache = [float(\"inf\") for _ in range(len(target) + 1)]\n        cache[0] = 0\n        for i in range(len(target)):\n            if cache[i] == float(\"inf\"):\n                continue\n            for key in best_cost:\n                if target[i: i + len(key)] == key:\n                    cache[i + len(key)] = min(cache[i + len(key)], cache[i] + best_cost[key])\n        \n        return cache[len(target)] if cache[len(target)] != float(\"inf\") else -1\n\n\n\n\n\n\n        def dp(i):\n            if i == len(target):\n                return 0\n            if cache[i] != None:\n                return cache[i]\n            ans = float(\"inf\")\n            for key in best_cost:\n                if target[i: i + len(key)] == key:\n                    ans = min(ans, dp(i + len(key)) + best_cost[key])\n            cache[i] = ans\n            return ans\n        return dp(0) if dp(0) != float(\"inf\") else -1\n        ",
    "submit_ts": "1720322227",
    "subm_id": "1312344175"
}