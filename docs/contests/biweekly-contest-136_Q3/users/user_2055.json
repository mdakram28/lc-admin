{
    "username": "rushilv_",
    "submission": "class Solution {\n    int countQuadrant(vector<vector<int>> &grid, int m, int n) {\n        int ans = 0;\n        for(int i = 0; i < m/2; i++) {\n            for(int j = 0; j < n/2; j++) {\n                if(m-1-i == i || n-1-j == j)\n                    return 0;\n\n                int cnt = (grid[i][j] == 1)? 1 : 0;\n                cnt += ((grid[m-1-i][j] == 1)? 1 : 0);\n                cnt += ((grid[i][n-1-j] == 1)? 1 : 0);\n                cnt += ((grid[m-1-i][n-1-j] == 1)? 1 : 0);\n\n                if(cnt > 2) cnt = 4-cnt;\n                ans += cnt;\n            }\n        }\n\n        return ans;\n    }\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n\n        int ans = countQuadrant(grid, m, n);\n\n        int ones = 0, flips_needed = 0;\n        if((m&1) == 1) {\n            for(int i = 0; i < n/2; i++) {\n                if(grid[m/2][i] != grid[m/2][n-1-i])\n                    flips_needed++;\n                \n                ones += ((grid[m/2][i] == 1)? 1 : 0);\n                ones += ((grid[m/2][n-1-i] == 1)? 1 : 0);\n            }\n        }\n        if((n&1) == 1) {\n            for(int i = 0; i < m/2; i++) {\n                if(grid[i][n/2] != grid[m-1-i][n/2])\n                    flips_needed++;\n                \n                ones += ((grid[i][n/2] == 1)? 1 : 0);\n                ones += ((grid[m-1-i][n/2] == 1)? 1 : 0);\n            }\n        }\n\n        if((m&1) == 1 && (n&1) == 1)\n            ans += ((grid[m/2][n/2] == 1)? 1 : 0);\n        \n\n        if(flips_needed >= ones%4 || flips_needed >= (4 - ones%4)) {\n            ans += flips_needed;\n        } else {\n            ans += flips_needed + 2;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722700174",
    "subm_id": "1343233876"
}