{
    "username": "Manan04",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n        adj1 = [[] for i in range(n)]\n        adj2 = [[] for i in range(m)]\n        for u, v in edges1:\n            adj1[u].append(v)\n            adj1[v].append(u)\n        for u, v in edges2:\n            adj2[u].append(v)\n            adj2[v].append(u)\n        def find_dia(adj):\n            q = deque()\n            q.append(0)\n            nn = len(adj)\n            vis = [False] * nn\n            vis[0] = True\n            end = 0\n            while q:\n                k = len(q)\n                for i in range(k):\n                    node = q.popleft()\n                    end = node\n                    for nbr in adj[node]:\n                        if(not vis[nbr]):\n                            vis[nbr] = True\n                            q.append(nbr)\n            diam = -1\n            q.append(end)\n            vis = [False] * nn\n            vis[end] = True\n            while q:\n                diam += 1\n                k = len(q)\n                for i in range(k):\n                    node = q.popleft()\n                    for nbr in adj[node]:\n                        if(not vis[nbr]):\n                            vis[nbr] = True\n                            q.append(nbr)\n            return diam\n        d1 = find_dia(adj1)\n        d2 = find_dia(adj2)\n        ans = (d1 + 1) // 2\n        ans += 1\n        ans += (d2 + 1) // 2\n        ans = max(ans, d1, d2)\n        return ans",
    "submit_ts": "1719715851",
    "subm_id": "1304348083"
}