{
    "username": "keshav1303",
    "submission": "class Solution {\npublic:\n    // MISTAKES -->\n    // 1. Use sgrtl() instead of sqrt() for long long\n    // 2. GCD of |x-y|?\n    // 3. Huffman Coding? Merging 2 smallest elements?\n    // 4. Coordinate Compression?\n    // 5. Min/Max Spanning Tree.\n    // 6. Topo sort ? if there is something related to relative ordering.\n    // 7. Try calculating it in reverse order?\n    // 8. To check if a number is a power of 2, check if n & (n-1) == 0\n    // 9. Use (num & (1LL << K)) instead of (num & (1 << K)).\n    // 10. Using \"LONG LONG INT\" instead of \"INT\" sometimes gives TLE.\n    #define all_(v)    v.begin(), v.end()\n    #define sort_(a)    sort(a.begin(), a.end());\n    #define sort_rev(a)    {  sort(a.begin(), a.end());    reverse(a.begin(), a.end());  }\n    #define printMatrix(v)  {  for(int i=0 ; i<v.size() ; i++){ for(int j=0 ; j<v[0].size() ; j++){ cout << v[i][j] << \" \"; }cout << endl; }}\n    #define debug(x) cout << #x <<\" = \"; _print(x); cout << endl;\n    void _print(int t) {cout << t;}\n    void _print(unsigned long long x) {cout << x;}\n    void _print(float x) {cout << x;}\n    void _print(double t) {cout << t;}\n    void _print(long double t) {cout << t;}\n    void _print(char x) {cout << '\\'' << x << '\\'';}\n    void _print(const char *x) {cout << '\\\"' << x << '\\\"';}\n    void _print(const string &x) {cout << '\\\"' << x << '\\\"';}\n    void _print(bool x) {cout << (x ? \"true\" : \"false\");}\n    template <class T, class V> void _print(pair <T, V> p) {cout << \"{\"; _print(p.first); cout << \",\"; _print(p.second); cout << \"}\";}\n    template <class T> void _print(vector <T> v) {cout << \"[ \"; for (T i : v) {_print(i); cout << \" \";} cout << \"]\";}\n    template <class T> void _print(deque <T> v) {cout << \"[ \"; for (T i : v) {_print(i); cout << \" \";} cout << \"]\";}\n    template <class T> void _print(set <T> v) {cout << \"[ \"; for (T i : v) {_print(i); cout << \" \";} cout << \"]\";}\n    template <class T> void _print(multiset <T> v) {cout << \"[ \"; for (T i : v) {_print(i); cout << \" \";} cout << \"]\";}\n    template <class T, class V> void _print(map <T, V> v) {cout << \"[ \"; for (auto i : v) {_print(i); cout << \" \";} cout << \"]\";}\n\n    long long minimumOperations(vector<int>& arr, vector<int>& brr) {\n        int n = arr.size();\n        vector<int> a;\n        for(int i=0 ; i<n ; i++){\n            a.push_back(brr[i] - arr[i]);\n        }\n        \n        long long ops = 0;\n        int curr = 0;\n        for(int i=0 ; i<n ; i++){\n            if(i == 0 || (a[i-1] > 0 && a[i] > 0) || (a[i-1] < 0 && a[i] < 0)){\n                int prev = abs(a[i]) - abs(curr);\n                if(prev > 0){\n                    ops += prev;\n                }\n                curr = a[i];\n            } \n            else {\n                ops += abs(a[i]);\n                curr = a[i];\n            }\n        }\n        return ops;\n    }\n};",
    "submit_ts": "1721532781",
    "subm_id": "1327993930"
}