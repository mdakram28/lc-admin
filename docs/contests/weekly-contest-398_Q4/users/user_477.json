{
    "username": "OTTFF",
    "submission": "class Solution {\npublic:\n    // i + 2^(jump + 1) - 1 >= i + 2^(jump)\n    // if finally jump k times\n    // for i-th\n    // k - i times (x2) after it\n    // so \n    //    -> 2 ^ jump -> 2 ^ (i - 1 + k - i)\n    //    -> 2 ^ jump - 1 -> (2 ^ (i - 1) - 1)) * (k - i)\n    \n    typedef long long LL;\n    bool isp2(LL x) {\n        return x != 0 && ((x & (x - 1)) == 0);\n    }\n    \n    int C(int n, int m) {\n        if (n - m < m) return C(n, n - m);\n        LL ans = 1;\n        for (int i = 1, j = n; i <= m; i++, j--) {\n            ans *= j;\n            ans /= i;\n        }\n        return ans;\n    }\n    \n    int waysToReachStair(int k) {\n        // if (k == 0) return 2;\n        // if (k == 1) return 4;\n        int ans = 0;\n        LL v = k - 1;\n        for (int i = 0; i <= 35; i++) { // num op1\n            if (isp2(v + i + 1)) {\n                // cout << \"here \" << i << ' ' << v + i + 1 << endl;\n                int cnt = __builtin_ctzll(v + i + 1);\n                \n                // cout << cnt << endl;\n                \n                if (cnt + 1 < i) continue;\n                \n                ans += C(cnt + 1, cnt + 1 - i);\n                \n                // cout << C(cnt + 1, cnt + 1 - i) << endl;\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1716088988.0
}