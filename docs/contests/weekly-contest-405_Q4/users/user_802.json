{
    "username": "snehaaa_16",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> c;\n    vector<pair<int, int>> e;\n};\nclass T {\npublic:\n    Node* r;\n\n    T() {\n        r = new Node();\n    }\n\n    void i(string w, int idx, int cost) {\n        Node* n = r;\n        for (char ch : w) {\n            if (!n->c.count(ch)) {\n                n->c[ch] = new Node();\n            }\n            n = n->c[ch];\n        }\n        n->e.push_back({idx, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int len = target.size();\n        vector<int> dp(len + 1, INT_MAX);\n        dp[0] = 0;\n\n        T t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.i(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < len; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* n = t.r;\n            for (int j = i; j < len; ++j) {\n                if (!n->c.count(target[j])) break;\n                n = n->c[target[j]];\n                for (auto& p : n->e) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= len) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[len] == INT_MAX ? -1 : dp[len];\n    }\n};\n",
    "submit_ts": "1720323193",
    "subm_id": "1312369594"
}