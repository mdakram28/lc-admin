{
    "username": "dmunjpata",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndices;\n};\n\nclass Trie {\npublic:\n    Trie() : root(new TrieNode()) {}\n\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->wordIndices.push_back(index);\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> minCost(n + 1, INT_MAX);\n        minCost[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (int index : node->wordIndices) {\n                    int cost = costs[index];\n                    int wordLength = words[index].size();\n                    if (i + wordLength <= n) {\n                        minCost[i + wordLength] = min(minCost[i + wordLength], minCost[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return minCost[n] == INT_MAX ? -1 : minCost[n];\n    }\n};\n",
    "submit_ts": "1720322759",
    "subm_id": "1312358386"
}