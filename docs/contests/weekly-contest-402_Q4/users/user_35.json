{
    "username": "LeetCoach",
    "submission": "class SegmentTree:\n    def __init__(self, n, default_val=0, combine=operator.add):\n        self._n = n\n        self._default_val = default_val\n        self._tree = [default_val] * (2 * n)\n        self._combine = combine\n\n    def set(self, i, x):\n        i += self._n\n        self._tree[i] = x\n        i //= 2\n        while i >= 1:\n            self._tree[i] = self._combine(self._tree[2 * i], self._tree[2 * i + 1])\n            i //= 2\n\n    def query(self, l, r):\n        l += self._n\n        r += self._n\n        res = self._default_val\n        while l <= r:\n            if l % 2 == 1:\n                res = self._combine(res, self._tree[l])\n                l += 1\n            if r % 2 == 0:\n                res = self._combine(res, self._tree[r])\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        st = SegmentTree(n)\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                st.set(i, 1)\n        res = []\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1:]\n                res.append(st.query(l + 1, r - 1))\n            else:\n                i, x = query[1:]\n                nums[i] = x\n                for j in range(max(1, i - 1), min(n - 1, i + 2)):\n                    st.set(j, int(nums[j - 1] < nums[j] > nums[j + 1]))\n        return res\n                \n        ",
    "submit_ts": 1718506134.0
}