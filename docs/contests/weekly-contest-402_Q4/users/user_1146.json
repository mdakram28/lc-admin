{
    "username": "krisWuCHYC",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.count = [0] * (4 * self.n)\n\n\n    def update(self, o, l, r, query_l, query_r, val):\n        # \u4fee\u6539\u533a\u95f4\u548c\u5f53\u524d\u533a\u95f4\u4e0d\u91cd\u53e0\n        if r < query_l or query_r < l:\n            return\n\n        # \u9700\u8981\u4fee\u6539\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5f53\u524d\u533a\u95f4\n        if query_l <= l and r <= query_r:\n\n            self.count[o] = val\n            return\n        \n        mid = l + (r - l) // 2\n\n\n        # \u4fee\u6539\u533a\u95f4\u9700\u8981\u5de6\u8fb9\u7684\u533a\u95f4\n        if query_l <= mid:\n            self.update(2 * o, l, mid, query_l, query_r, val)\n        \n        # \u4fee\u6539\u533a\u95f4\u9700\u8981\u53f3\u8fb9\u7684\u533a\u95f4\n        if mid + 1 <= query_r:\n            self.update(2 * o + 1, mid + 1, r, query_l, query_r, val)\n        \n        # \u66f4\u65b0\u5f53\u524d\u533a\u95f4\u503c\n        self.count[o] = self.count[2 * o] + self.count[2 * o + 1]\n        return\n    \n    def query(self, o, l, r, query_l, query_r):\n        # \u67e5\u8be2\u533a\u95f4\u548c\u5f53\u524d\u533a\u95f4\u4e0d\u91cd\u5408\n        if r < query_l or query_r < l:\n            return 0\n        \n        # \u67e5\u8be2\u7684\u533a\u95f4\u5b8c\u5168\u5305\u542b\u5f53\u524d\u533a\u95f4\n        if query_l <= l and r <= query_r:\n            return self.count[o]\n\n\n        mid = l + (r - l) // 2\n        result = 0\n\n        # \u67e5\u8be2\u7684\u533a\u95f4\u9700\u8981\u5de6\u8fb9\u7684\u533a\u95f4\n        if query_l <= mid:\n            result += self.query(2 * o, l, mid, query_l, query_r)\n        \n        # \u67e5\u8be2\u7684\u533a\u95f4\u9700\u8981\u53f3\u8fb9\u7684\u533a\u95f4\n        if mid + 1 <= query_r:\n            result += self.query(2 * o + 1, mid + 1, r, query_l, query_r)\n        \n        return result\n        \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = SegmentTree(n)\n        \n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                tree.update(1, 1, n, i + 1, i + 1, 1)\n        \n        result = []\n        for q in queries:\n            if q[0] == 1:\n                _, query_l, query_r = q\n                result.append(tree.query(1, 1, n, query_l + 2, query_r))\n            else:\n                _, i, val = q\n                nums[i] = val\n                \n                if 1 <= i <= n - 2:\n                    if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                        tree.update(1, 1, n, i + 1, i + 1, 1)\n                    else:\n                        tree.update(1, 1, n, i + 1, i + 1, 0)\n                \n                if i >= 2:\n                    left = i - 1\n                    if nums[left - 1] < nums[left] and nums[left] > nums[left + 1]:\n                        tree.update(1, 1, n, left + 1, left + 1, 1)\n                    else:\n                        tree.update(1, 1, n, left + 1, left + 1, 0)\n                \n                if i <= n - 3:\n                    right = i + 1\n                    if nums[right - 1] < nums[right] and nums[right] > nums[right + 1]:\n                        tree.update(1, 1, n, right + 1, right + 1, 1)\n                    else:\n                        tree.update(1, 1, n, right + 1, right + 1, 0)          \n                        \n        return result",
    "submit_ts": 1718507976.0
}