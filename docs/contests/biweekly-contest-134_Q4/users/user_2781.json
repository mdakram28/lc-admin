{
    "username": "YashByteCraft2910",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\n// #define int  long long int \n#define sortv(v) sort(v.begin(), v.end())\n#define sortrev(v) sort(v.begin(), v.end(), greater<int>())\n#define ub(v, idx, val) upper_bound(v.begin() + idx, v.end(), val)\n#define lb(v, idx, val) lower_bound(v.begin() + idx, v.end(), val)\n#define f first\n#define s second\n#define yes cout<<\"Yes\"<<endl\n#define no  cout<<\"No\"<<endl;\n#define min(a,b) (((a)<(b))?(a):(b))\n#define max(a,b) (((a)>(b))\n\nclass Solution {\npublic:\nvoid solve(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\nvoid solve2(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\nvoid solve4(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        if (n < k) return 0;\n\n        int cntrr = 0;\n        bool isAlternating = true;\n \n        for (int i = 0; i < k - 1; ++i) {\n            if (colors[i] == colors[i + 1]) {\n                isAlternating = false;\n                break;\n            }\n        }\n        if (isAlternating) cntrr++;\n \n        for (int i = 1; i < n; ++i) { \n            int outgoing = colors[(i - 1) % n];\n            int incoming = colors[(i + k - 1) % n];\n            int next = colors[(i + k) % n];\n            int prev = colors[(i - 2 + n) % n];\n\n            if (outgoing == prev) isAlternating = false;\n            if (incoming == next) isAlternating = false;\n            if (outgoing != prev && incoming != next) isAlternating = true;\n\n            if (isAlternating) cntrr++;\n        }\n\n        return cntrr;\n    }\n    void solve5(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\nvoid solve6(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\n    long long countSubarrays(vector<int>& nums, int k) {\n          int n = nums.size();\n        long long count = 0;\n        \n        unordered_map<long long, long long> prevResults;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currResults; \n\n            if (nums[i] == k) {\n                ++count;\n            }\n            currResults[nums[i]] = 1;\n\n            for (auto& [val, freq] : prevResults) {\n                long long newAndResult = val & nums[i];\n                if (newAndResult == k) {\n                    count += freq;\n                }\n                currResults[newAndResult] += freq;\n            }\n            \n            prevResults = currResults;\n        }\n        \n        return count;\n    }\n    void solve55(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\nvoid solve65(){\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    cout<<\"hello\";\n    \n}\n  \n};",
    "submit_ts": "1720278422",
    "subm_id": "1311708438"
}