{
    "username": "keerthivnair",
    "submission": "typedef long long ll;\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n        ll i = 0, j = 0;\n        ll hSegments = 1, vSegments = 1;\n        ll totalCost = 0;\n        \n        // Use a greedy approach to minimize the cost\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += horizontalCut[i] * vSegments;\n                hSegments++;\n                i++;\n            } else {\n                totalCost += verticalCut[j] * hSegments;\n                vSegments++;\n                j++;\n            }\n        }\n        \n        // Add the remaining cuts\n        while (i < horizontalCut.size()) {\n            totalCost += horizontalCut[i] * vSegments;\n            i++;\n        }\n        while (j < verticalCut.size()) {\n            totalCost += verticalCut[j] * hSegments;\n            j++;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926646",
    "subm_id": "1320292276"
}