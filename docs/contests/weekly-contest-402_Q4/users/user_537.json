{
    "username": "Fzldq",
    "submission": "\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        arr = []\n\n        def check(i):\n            return 0 < i < n - 1 and nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        for i in range(n):\n            arr.append(1 if check(i) else 0)\n\n        bit = BIT_SUM(arr=arr)\n        res = []\n        for q, x, y in queries:\n            if q == 1:\n                cur = bit.getSum(y + 1) - bit.getSum(x)\n                if x == y:\n                    cur -= arr[x]\n                else:\n                    cur -= arr[x] + arr[y]\n                res.append(cur)\n            else:\n                nums[x] = y\n\n                ok = int(check(x))\n                pre = arr[x]\n                if pre != ok:\n                    bit.add(x + 1, ok - pre)\n                    arr[x] = ok\n\n                if x > 0:\n                    ok = int(check(x - 1))\n                    pre = arr[x - 1]\n                    if pre != ok:\n                        bit.add(x, ok - pre)\n                        arr[x - 1] = ok\n\n                if x < n - 1:\n                    ok = int(check(x + 1))\n                    pre = arr[x + 1]\n                    if pre != ok:\n                        bit.add(x + 2, ok - pre)\n                        arr[x + 1] = ok\n        return res\n        \nclass BIT_SUM:\n\n    def __init__(self, n=None, arr=None):\n        if arr is None:\n            self.tr = [0] * (n + 1)\n        else:\n            self.init(arr)\n\n    def lowbit(self, x):\n        return x & -x\n\n    def init(self, arr):\n        n = len(arr)\n        tr = [0] * (n + 1)\n        for i in range(1, n + 1):\n            tr[i] += arr[i - 1]\n            x = i + self.lowbit(i)\n            if x <= n:\n                tr[x] += tr[i]\n        self.tr = tr\n\n    def add(self, x, k):\n        while x < len(self.tr):\n            self.tr[x] += k\n            x += self.lowbit(x)\n\n    def getSum(self, x):\n        res = 0\n        while x:\n            res += self.tr[x]\n            x -= self.lowbit(x)\n        return res\n",
    "submit_ts": 1718508143.0
}