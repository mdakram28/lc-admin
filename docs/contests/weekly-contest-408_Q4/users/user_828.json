{
    "username": "jJai_Shree_Ram",
    "submission": "\nclass Solution {\n    private:\n    int f(vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<bool> vis(nodes + 4, false);\n        vis[start] = true;\n        q.push(start);\n        \n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return vis[target1] || vis[target2] ? 1 : 0;\n    }\npublic:\n    \n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        vector<vector<int>> c(circles2.size(), vector<int>(3));\n        vector<vector<int>> g(circles2.size() + 4);\n\n        for (int i = 0; i < circles2.size(); ++i) {\n            c[i] = {circles2[i][0], circles2[i][1], circles2[i][2]};\n        }\n        int n = circles2.size();\n\n        for (int i = 0; i < n; ++i) {\n            if (c[i][1] <= c[i][2]) {\n                g[n + 1].push_back(i);\n                g[i].push_back(n + 1);\n            }\n            if (c[i][0] <= c[i][2]) {\n                g[i].push_back(n);\n                g[n].push_back(i);\n            }\n            if (Y - c[i][1] <= c[i][2]) {\n                g[i].push_back(n + 3);\n                g[n + 3].push_back(i);\n                \n            }\n            if (X - c[i][0] <= c[i][2]) {\n                g[n + 2].push_back(i);\n                g[i].push_back(n + 2);\n            }\n            \n            \n            for (int j = i + 1; j < n; ++j) {\n                double distance = sqrt(pow(c[i][0] - c[j][0], 2) +\n                                             pow(c[i][1] - c[j][1], 2));\n                int radiusSum = c[i][2] + c[j][2];\n                if (radiusSum >= distance) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        int ans = 0;\n        ans = max(ans, f(g, n, n + 1, n + 2, n + 4));\n        ans = max(ans, f(g, n + 3, n + 2, n + 1, n + 4)); \n\n        return ans == 0;\n    }\n};\n\n",
    "submit_ts": "1722138445",
    "subm_id": "1335790966"
}