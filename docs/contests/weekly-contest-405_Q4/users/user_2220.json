{
    "username": "BatraRahul",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(-1) {}\n};\n\nclass Solution {\nprivate:\n    TrieNode* root;\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        if (node->cost == -1 || cost < node->cost) {\n            node->cost = cost;\n        }\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX)\n                continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j]])\n                    break;\n                node = node->children[target[j]];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : (int)(dp[n]);\n    }\n};",
    "submit_ts": "1720323657",
    "subm_id": "1312380902"
}