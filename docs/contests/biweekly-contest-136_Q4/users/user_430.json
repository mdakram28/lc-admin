{
    "username": "RuchitJagodara",
    "submission": "#define ll long long\n\npair<ll, ll> dfs(vector<vector<ll>> &graph, vector<pair<ll, ll>> &val, ll parent, ll node){\n    pair<ll, ll> temp = {0, 0};\n    for(auto adj:graph[node]){\n        if (adj!=parent){\n            if (adj%2) {\n                ll kya = 1+dfs(graph, val, node, adj).first;\n                if (temp.first<=kya){\n                    temp.second = temp.first;\n                    temp.first = kya;\n                }\n                else if(temp.second<=kya){\n                    temp.second = kya;\n                }\n            }\n            else{\n                ll kya = 2+dfs(graph, val, node, adj).first;\n                if (temp.first<=kya){\n                    temp.second = temp.first;\n                    temp.first = kya;\n                }\n                else if(temp.second<=kya){\n                    temp.second = kya;\n                }\n            }\n        }\n    }\n    val[node] = temp;\n    return temp;\n}\n\nvoid ndfs(vector<vector<ll>> &graph, vector<int> &ans, vector<pair<ll, ll>> &val, ll parent, ll node, ll ext){\n    ll temp = val[node].first;\n    ll t2 = 0;\n    if (val[parent].first==temp+1+(node%2==0)){\n        temp = max(temp, val[parent].second + 1 + (parent%2==0));\n        t2 = max(t2, val[parent].second);\n    }\n    else{\n        temp = max(temp, val[parent].first+1+(parent%2==0));\n        t2 = max(t2, val[parent].first); \n    }\n    ext = max(ext, t2) + (1+(parent%2==0));\n    temp = max(temp, ext);\n    ans[node] = temp;\n    for(auto adj:graph[node]){\n        if (adj!=parent) ndfs(graph, ans, val, node, adj, ext);\n    }\n    return;\n}\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        vector<vector<ll>> graph(edges.size()+1);\n        for(auto edge:edges){\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n        }\n        vector<pair<ll, ll>> val(edges.size()+1);\n        dfs(graph, val, -1, 0);\n        vector<int> ans(edges.size()+1);\n        ans[0] = val[0].first;\n        for(auto adj:graph[0]) ndfs(graph, ans, val, 0, adj, 0);\n        // for(int i=0; i<edges.size()+1; i++){\n        //     cout<<val[i].first<<\" \"<<val[i].second<<endl;\n        // }\n        return ans;\n    }\n    \n};",
    "submit_ts": "1722698501",
    "subm_id": "1343182671"
}