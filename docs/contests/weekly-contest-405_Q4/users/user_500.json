{
    "username": "Celestial_Coder",
    "submission": "class Solution {\npublic:\n//      struct TrieNode {\n//                 unordered_map<char, TrieNode*> children;\n//                 vector<pair<int, int>> wordEnds; \n//      };\n\n//      class Trie {\n//      public:\n//                 TrieNode* root;\n//                 Trie() { root = new TrieNode(); }\n\n//                 void insert(string& word, int index, int cost) {\n//                TrieNode* node = root;\n//                for (char c : word) {\n//              if (!node->children.count(c))\n//                         node->children[c] = new TrieNode();\n//              node = node->children[c];\n//                }\n//                node->wordEnds.push_back({index, cost});\n//                 }\n//      };\n\nstruct TrieNode{\n    // TrieNode* arr[26];\n    // bool isend=false;\n    unordered_map<char,TrieNode*>chs;\n    vector<pair<int,int>>w;\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root=new TrieNode();\n    }\n    \n    void insert(string word,int id,int c) {\n        TrieNode* node = root;\n        for(char ch:word){\n            if(!node->chs.count(ch))\n                node->chs[ch]=new TrieNode();\n            node=node->chs[ch];\n        }\n        // node->isend=true;\n        node->w.push_back({id,c});\n    }\n    \n    // bool search(string word) {\n    //     TrieNode* node = root;\n    //     for(char ch:word){\n    //         if(node->arr[ch-'a']==NULL)return false;\n    //         node=node->arr[ch-'a'];\n    //     }\n    //     return node->isend;\n    // }\n    \n    // bool startsWith(string prefix) {\n    //     TrieNode* node = root;\n    //     for(char ch:prefix){\n    //         if(node->arr[ch-'a']==NULL)return false;\n    //         node=node->arr[ch-'a'];\n    //     }\n    //     return true;\n    // }\n};\n\n     int minimumCost(string t, vector<string>& w, vector<int>& c) {\n                Trie trie;\n                vector<int> dp(t.size()+1,INT_MAX);\n                dp[0] = 0;\n                for (int i = 0; i < w.size(); ++i) {\n               trie.insert(w[i], i, c[i]);\n                }\n\n                for (int i = 0; i < t.size(); ++i) {\n               if (dp[i]!=INT_MAX){\n               TrieNode* node = trie.root;\n               for (int j = i; j < t.size(); ++j) {\n             if (!node->chs.count(t[j])) break;\n             node = node->chs[t[j]];\n             for (auto& it : node->w) {\n                        if (i + w[it.first].size()<= t.size()) {\n                        dp[i +w[it.first].size()] = min(dp[i + w[it.first].size()], dp[i] + it.second);\n                        }\n             }\n               }\n               }\n                }\n                if(dp[t.size()]==INT_MAX)return -1;\n                return dp[t.size()];\n     }\n};",
    "submit_ts": "1720321992",
    "subm_id": "1312337793"
}