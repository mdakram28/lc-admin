{
    "username": "aUZYYiNOXf",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n\nclass Solution {\npublic:\n    int minChanges(std::vector<int>& nums, int k) {\n        std::map<int, std::vector<int>> differences;\n        std::vector<int> elements;\n        \n        // Traverse the first half of the array\n        int n = nums.size();\n        for (int i = 0; i < n / 2; ++i) {\n            int first = nums[i];\n            int second = nums[n - i - 1];\n            int diff = std::abs(first - second);\n            int maxValue = std::max({first, second, k - first, k - second});\n            differences[diff].push_back(maxValue);\n            elements.push_back(maxValue);\n        }\n\n        int minChanges = n;\n        std::sort(elements.begin(), elements.end());\n\n        for (const auto& entry : differences) {\n            int targetDiff = entry.first;\n            int position = std::lower_bound(elements.begin(), elements.end(), targetDiff) - elements.begin();\n            int changes = position * 2 + (n / 2 - position);\n\n            for (const int& value : entry.second) {\n                if (value < targetDiff) {\n                    changes -= 2;\n                } else {\n                    changes -= 1;\n                }\n            }\n\n            minChanges = std::min(minChanges, changes);\n        }\n\n        return minChanges;\n    }\n};\n",
    "submit_ts": "1721489809",
    "subm_id": "1327464456"
}