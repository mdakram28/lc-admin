{
    "username": "tokitsukaze",
    "submission": "#define mem(a,b) memset((a),(b),sizeof(a))\n#define MP make_pair\n#define pb push_back\n#define fi first\n#define se second\n#define sz(x) ((int)x.size())\n#define all(x) x.begin(),x.end()\n#define sqr(x) ((x)*(x))\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef pair<int,int> PII;\ntypedef pair<ll,ll> PLL;\ntypedef pair<int,ll> PIL;\ntypedef pair<ll,int> PLI;\ntypedef vector<int> VI;\ntypedef vector<ll> VL;\ntypedef vector<PII> VPII;\ntypedef vector<PLL> VPLL;\ntypedef vector<string> VS;\ntypedef vector<VI> VVI;\ntypedef vector<VL> VVL;\ntypedef vector<VS> VVS;\ntypedef vector<VPII> VVPII;\n/************* define end  *************/\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/hash_policy.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\nusing namespace __gnu_pbds;\n/********* gp_hash_table end  **********/\nvoid println(VI x){for(int i=0;i<sz(x);i++) printf(\"%d%c\",x[i],\" \\n\"[i==sz(x)-1]);}\nvoid println(VL x){for(int i=0;i<sz(x);i++) printf(\"%lld%c\",x[i],\" \\n\"[i==sz(x)-1]);}\nvoid println(int *x,int l,int r){for(int i=l;i<=r;i++) printf(\"%d%c\",x[i],\" \\n\"[i==r]);}\nvoid println(ll *x,int l,int r){for(int i=l;i<=r;i++) printf(\"%lld%c\",x[i],\" \\n\"[i==r]);}\n/*************** IO end  ***************/\nconst int INF=0x3f3f3f3f;\nconst ll LLINF=0x3f3f3f3f3f3f3f3fLL;\nconst double PI=acos(-1.0);\nconst double eps=1e-6;\nconst int MAX=2e5+10;\nconst ll mod=1e9+7;\n/*********************************  head  *********************************/\nstruct Segment_Tree\n{\n\t#define type int\n\tstatic const type inf=INF;\n\t#define ls (id<<1)\n\t#define rs (id<<1|1)\n\tint n,ql,qr,qop;\n\ttype a[MAX],tag[MAX<<2],qv;\n\tstruct node\n\t{\n\t\ttype ans,lf,rf,lv,rv,len;\n\t\tvoid init(){ans=len=lf=rf=0;}\n\t}t[MAX<<2],null_node;\n\tnode merge_node(node x,node y)\n\t{\n\t\tnode res;\n\t\tres.ans=x.ans+y.ans;\n\t\tif(x.rf&&x.rv>y.lv) res.ans++;\n\t\tif(y.lf&&y.lv>x.rv) res.ans++;\n\t\tres.lv=x.lv;\n\t\tres.rv=y.rv;\n\t\tres.lf=x.lf;\n\t\tres.rf=y.rf;\n\t\tif(x.len==1)\n\t\t{\n\t\t\tif(x.rv>y.lv) res.lf=1;\n\t\t}\n\t\tif(y.len==1)\n\t\t{\n\t\t\tif(y.lv>x.rv) res.rf=1;\n\t\t}\n\t\treturn res;\n\t}\n\tvoid pushup(int id){t[id]=merge_node(t[ls],t[rs]);}\n\tvoid pushdown(int l,int r,int id)\n\t{\n\t\tif(!tag[id]) return;\n\t\tint mid=(l+r)>>1;\n\t\t\n\t}\n\tvoid build(int l,int r,int id)\n\t{\n\t\ttag[id]=0;\n\t\tt[id].init();\n\t\tif(l==r)\n\t\t{\n\t\t\tt[id].len=1;\n\t\t\tt[id].ans=0;\n\t\t\tt[id].lv=t[id].rv=a[l];\n\t\t\tt[id].lf=t[id].rf=0;\n\t\t\treturn;\n\t\t}\n\t\tint mid=(l+r)>>1;\n\t\tbuild(l,mid,ls);\n\t\tbuild(mid+1,r,rs);\n\t\tpushup(id);\n\t}\n\tvoid update(int l,int r,int id)\n\t{\n\t\tif(l>=ql&&r<=qr)\n\t\t{\n\t\t\tt[id].ans=0;\n\t\t\tt[id].lv=t[id].rv=qv;\n\t\t\tt[id].lf=t[id].rf=0;\n\t\t\treturn;\n\t\t}\n\t\tpushdown(l,r,id);\n\t\tint mid=(l+r)>>1;\n\t\tif(ql<=mid) update(l,mid,ls);\n\t\tif(qr>mid) update(mid+1,r,rs);\n\t\tpushup(id);\n\t}\n\tnode query(int l,int r,int id)\n\t{\n\t\tif(l>=ql&&r<=qr) return t[id];\n\t\tpushdown(l,r,id);\n\t\tint mid=(l+r)>>1;\n\t\tif(qr<=mid) return query(l,mid,ls);\n\t\tif(ql>mid) return query(mid+1,r,rs);\n\t\treturn merge_node(query(l,mid,ls),query(mid+1,r,rs));\n\t}\n\tvoid build(int _n)\n\t{\n\t\tn=_n;\n\t\tbuild(1,n,1);\n\t\tnull_node.init();\n\t}\n\tvoid upd(int l,int r,type v)\n\t{\n\t\tif(l>r) return;\n\t\tql=l;\n\t\tqr=r;\n\t\tqv=v;\n\t\tupdate(1,n,1);\n\t}\n\ttype ask(int l,int r)\n\t{\n\t\tif(l>r) return null_node.ans;\n\t\tql=l;\n\t\tqr=r;\n\t\treturn query(1,n,1).ans;\n\t}\n\t#undef type\n\t#undef ls\n\t#undef rs\n}tr;\n/*\ntr.build(n);\ntr.upd(l,r,v);\ntr.ask(l,r);\nSegment_Tree::node res=tr.merge_node(nodex,nodey);\n*/\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n,i;\n        n=sz(nums);\n        for(i=1;i<=n;i++) tr.a[i]=nums[i-1];\n        tr.build(n);\n        vector<int> res;\n        for(auto &it:queries)\n        {\n        \tif(it[0]==1) res.push_back(tr.ask(it[1]+1,it[2]+1));\n        \telse tr.upd(it[1]+1,it[1]+1,it[2]);\n\t\t}\n\t\treturn res;\n    }\n};\n/*\n[5,4,6,8,7,8,9]\n[[1,0,6],[2,1,8],[2,0,4]]\n*/",
    "submit_ts": "1718506302",
    "subm_id": "539774117"
}