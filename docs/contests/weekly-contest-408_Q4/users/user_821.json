{
    "username": "khritish17",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def dist(x1, y1, x2, y2):\n            return sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n        def touches(c, line):\n            x, y, r = c\n            if line == 'l1':\n                return x - r <= 0\n            elif line == 'l2':\n                return y - r <= 0\n            elif line == 'l3':\n                return x + r >= X\n            elif line == 'l4':\n                return y + r >= Y\n            return False\n\n        def touching(line):\n            return [c for c in circles if touches(c, line)]\n\n        def intersects(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            return dist(x1, y1, x2, y2) <= r1 + r2\n\n        def check_path(start, end):\n            start_circles = touching(start)\n            end_circles = touching(end)\n            visited = set()\n\n            def dfs(c):\n                if tuple(c) in visited:\n                    return False\n                visited.add(tuple(c))\n                if c in end_circles:\n                    return True\n                for other in circles:\n                    if tuple(other) not in visited and intersects(c, other):\n                        if dfs(other):\n                            return True\n                return False\n\n            for c in start_circles:\n                if dfs(c):\n                    return False\n            return True\n        \n        for x, y, r in circles:\n            if dist(x, y, 0, 0) <= r or dist(x, y, X, Y) <= r:\n                return False\n\n        if not check_path('l1', 'l2'):\n            return False\n        if not check_path('l1', 'l3'):\n            return False\n        if not check_path('l3', 'l4'):\n            return False\n        if not check_path('l2', 'l4'):\n            return False\n        return True",
    "submit_ts": "1722138727",
    "subm_id": "1335798125"
}