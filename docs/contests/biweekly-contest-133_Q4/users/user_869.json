{
    "username": "abhijeeet1805",
    "submission": "import java.util.*;\n\nclass Solution {\n\n    public int increment(int i,int[]arr, int n){\n        for (int j = 0; j < arr.length; j++) {\n            System.out.println(arr[j]);\n        }\n        return -1;\n    }\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int MOD = 1_000_000_007;\n        int MAX_jERSIONS = 400;\n        Map<Integer, Integer> m = new HashMap<>();\n        int len;\n        int j;\n        int k;\n\n        for (int[] arr : requirements) {\n            m.put(arr[0] + 1, arr[1]);\n        }\n\n        long[][] ans = new long[n + 1][MAX_jERSIONS + 1];\n        ans[0][0] = 1;\n\n        for (len = 1; len <= n; len++) {\n            for (j = 0; j <= MAX_jERSIONS; j++) {\n                for (k = 0; k < len; k++) {\n                    int prevj = j - k;\n                    if (prevj >= 0) {\n                        ans[len][j] = (ans[len][j] + ans[len - 1][prevj]) % MOD;\n                    }\n                }\n            }\n            int t;\n            if (m.containsKey(len)) {\n                t = m.get(len);\n                for (j = 0; j <= MAX_jERSIONS; j++)  if (j != t) ans[len][j] = 0;   \n            }else{\n                continue;\n            }\n        }\n\n        long ans2 = 0;\n        for (long count : ans[n]) {\n            ans2 = (ans2 + count) % MOD;\n        }\n\n        return (int) ans2;\n    }\n}",
    "submit_ts": "1719071128",
    "subm_id": "1296839691"
}