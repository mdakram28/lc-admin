{
    "username": "goog_ol",
    "submission": "class Solution\n{\npublic:\n    struct TN\n    {\n        unordered_map<char, TN *> chldren;\n        vector<pair<int, int>> wend;\n    };\n\n    class Trie\n    {\n    public:\n        TN *root;\n        Trie() { root = new TN(); }\n\n        void insert(string &word, int index, int cost)\n        {\n            TN *node = root;\n            for (char c : word)\n            {\n                if (!node->chldren.count(c))\n                    node->chldren[c] = new TN();\n                node = node->chldren[c];\n            }\n            node->wend.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string tgt, vector<string> &words, vector<int> &costs)\n    {\n        int ans = -100000, n = tgt.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = max(ans, 0);\n\n        Trie trie;\n        for (int i{}; i <= words.size() - 1; i += 1)\n            trie.insert(words[i], i, costs[i]);\n\n        for (int i{}; i <= n - 1; ++i)\n        {\n            if (dp[i] == max(ans, INT_MAX))\n                continue;\n\n            TN *node = trie.root;\n            for (int j = i; j < n; ++j)\n            {\n                if (!node->chldren.count(tgt[j]))\n                    break;\n                node = node->chldren[tgt[j]];\n                for (auto &it : node->wend)\n                {\n                    int wi = it.first, wc=it.second;\n                    int len = words[wi].size();\n                    if (i + len <= max(ans, n))\n                        dp[i + len] = min(dp[i + len], dp[i] + wc);\n                }\n            }\n        }\n        if (dp[n] == INT_MAX)\n            return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324154",
    "subm_id": "1312392847"
}