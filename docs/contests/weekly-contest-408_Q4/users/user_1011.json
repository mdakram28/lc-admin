{
    "username": "shankarlalb",
    "submission": "class Solution {\npublic:\n    class UnionFind{\n        vector<int>par;\n        vector<int>rank;\n        int n;\n        public:\n            UnionFind(int n){\n                par.resize(n);\n                rank.resize(n);\n                for(int i = 0;i<n;i++){\n                    par[i] = i;\n                    rank[i] = 0;\n                }\n                this->n = n;\n            }\n            int find(int x){\n                if(par[x]==x){\n                    return x;\n                }\n                return par[x] = find(par[x]);\n            }\n            void merge(int x,int y){\n                x = find(x);\n                y = find(y);\n                if(x==y){\n                    return;\n                }\n                if(rank[x]<rank[y]){\n                    par[x] = y;\n                }else if(rank[x]>rank[y]){\n                    par[y] = x;\n                }else{\n                    par[y] = x;\n                    rank[x]++;\n                }\n            }\n            bool same(int x,int y){\n                return find(x)==find(y);\n            }\n            int size(int x){\n                return rank[find(x)];\n            }\n    };\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        // for(auto it : circles)cout<<it[0]<<\" \"<<it[1]<<\" \"<<it[2]<<endl;\n        auto sq = [&](int val)->long long{\n            return 1ll*val*val;\n        };\n        auto cut = [&](vector<int>&a,vector<int>&b)->bool{\n            return sq(a[0]-b[0])+sq(a[1]-b[1])<=1ll*(a[2]+b[2])*(a[2]+b[2]);\n            // cout<<val<<\" \"<<rr<<endl;\n        };\n        UnionFind uf(n);\n        for(int i = 0;i<n;i++){\n            for(int j = i+1;j<n;j++){\n                if(cut(circles[i],circles[j])){\n                    uf.merge(i,j);\n                }\n            }\n        }\n        if(n>1){\n            // cout<<\"printing\"<<\" \"<<cut(circles[0],circles[1])<<endl;\n        }\n        auto dy = [&](vector<int>&a)->bool{\n            return a[2]>=a[0];\n        };\n        auto dx = [&](vector<int>&a)->bool{\n            return a[2]>=a[1];\n        };\n        for(int i = 0;i<n;i++){\n            if(!(dy(circles[i])||(circles[i][1]+circles[i][2]>=Y)))continue;\n            for(int j = 0;j<n;j++){\n                if(!(dx(circles[j])||(circles[j][0]+circles[j][2]>=X)))continue;\n                // cout<<i<<\" \"<<j<<endl;\n                if(uf.same(i,j)){\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138131",
    "subm_id": "1335782933"
}