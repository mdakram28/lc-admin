{
    "username": "deepli",
    "submission": "class Solution {\n    \n    class SegmentTree {\n        int[] segmentTree;\n        int size;\n\n         \n        public SegmentTree(int[] array) {\n            size = array.length;\n            segmentTree = new int[4 * size];\n            buildSegmentTree(array, 0, 0, size - 1);\n        }\n\n         \n        public void buildSegmentTree(int[] array, int node, int start, int end) {\n            if (start == end) {\n                segmentTree[node] = array[start];\n            } else {\n                int mid = (start + end) / 2;\n                buildSegmentTree(array, 2 * node + 1, start, mid);\n                buildSegmentTree(array, 2 * node + 2, mid + 1, end);\n                segmentTree[node] = segmentTree[2 * node + 1] & segmentTree[2 * node + 2];\n            }\n        }\n\n         \n        public int query(int left, int right) {\n            return query(0, 0, size - 1, left, right);\n        }\n\n        \n        public int query(int node, int start, int end, int left, int right) {\n            if (right < start || end < left) {\n                return Integer.MAX_VALUE;  \n            }\n            if (left <= start && end <= right) {\n                return segmentTree[node];  \n            }\n            int mid = (start + end) / 2;\n            int leftChildResult = query(2 * node + 1, start, mid, left, right);\n            int rightChildResult = query(2 * node + 2, mid + 1, end, left, right);\n            return leftChildResult & rightChildResult;  \n        }\n    }\n\n    public int minimumDifference(int[] array, int k) {\n        int size = array.length;\n        SegmentTree segmentTree = new SegmentTree(array);\n        int minDifference = Integer.MAX_VALUE;\n\n        for (int i = 0; i < size; i++) {\n            int left = i - 1, right = size - 1, mid;\n             \n            while (right - left > 1) {\n                mid = (left + right) / 2;\n                if (segmentTree.query(i, mid) >= k)\n                    left = mid;\n                else\n                    right = mid;\n            }\n            if (left != i - 1)\n                minDifference = Math.min(minDifference, Math.abs(segmentTree.query(i, left) - k));\n            minDifference = Math.min(minDifference, Math.abs(k - segmentTree.query(i, right)));\n        }\n\n        return minDifference;\n    }\n}",
    "submit_ts": 1717297264.0
}