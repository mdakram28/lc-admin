{
    "username": "Typecaster99",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        long long ans = 0;\n        long long zero = 0;\n        vector<int> diff(n,0);\n        for(int i=0; i<n; i++){\n            diff[i] = target[i] - nums[i];\n            if(diff[i] == 0) zero++;\n        }\n        int currentZero = 0;\n        while(zero < n ){\n            while(currentZero<n && diff[currentZero] == 0 ) {\n                currentZero++;\n            }\n            if(diff[currentZero] > 0){\n                int i = currentZero;\n                int minVal = 1e9;\n                while(i<n && diff[i] > 0){\n                    minVal = min(minVal,diff[i]);\n                    i++;\n                }\n                for(int k = currentZero; k<i; k++){\n                    diff[k] -= minVal;\n                    if(diff[k] ==0) zero++;\n                }\n                if(minVal != 1e9)\n                    ans += minVal;\n            }\n            else{\n                int i = currentZero;\n                int maxVal = -1e9;\n                while(i<n && diff[i] < 0 ){\n                    maxVal = max(maxVal,diff[i]);\n                    i++;\n                }\n                // cout<<i<< \" \"<< maxVal<<endl;\n                for(int k = currentZero; k<i; k++){\n                    diff[k] += abs(maxVal);\n                    if(diff[k] == 0) zero++;\n                }\n                if(maxVal != -1e9)\n                    ans+= abs(maxVal);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721533232",
    "subm_id": "1328004355"
}