{
    "username": "Di Kang",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        ct0 = 0\n        ct1 = 0\n        l = 0\n        r = 0\n        thres = [-1 for _ in range(n)]\n        while l < n:\n            while ct0 <= k or ct1 <= k:\n                if r == n:\n                    thres[l] = r\n                    break\n                if s[r] == '0':\n                    ct0 += 1\n                else:\n                    ct1 += 1\n                r += 1\n            if r != n or (r==n and ct0 > k and ct1 > k):\n                thres[l] = r - 1\n            if s[l] == '0':\n                ct0 -= 1\n            else:\n                ct1 -= 1\n            l += 1\n        #print(thres)\n        pre = [0 for _ in range(n+1)]\n        for i in range(n):\n            pre[i+1] = pre[i] + thres[i]\n        #print(pre)\n        res = []\n        for a,b in queries:\n            total = (b-a+1)*(b-a+2)//2\n            if thres[a] > b:\n                res.append(total)\n                continue\n            ind = bisect.bisect_right(thres,b)\n            #print(ind)\n            tmp = (ind - a)*(b + 1) - (pre[ind] - pre[a])\n            #print(total, tmp)\n            res.append(total - tmp)\n\n        return res\n        ",
    "submit_ts": "1723952370",
    "subm_id": "1359794630"
}