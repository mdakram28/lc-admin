{
    "username": "devakarkesavan",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n        int maxDist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthestNode, maxDist};\n    }\n\n    int computeDiameter(const vector<vector<int>>& adj) {\n        auto [farthestNode1, dist1] = bfs(0, adj);\n        auto [farthestNode2, diameter] = bfs(farthestNode1, adj);\n        return diameter;\n    }\n\n    int findMinDiameterAfterMergingTrees(vector<vector<int>>& tree1Edges, vector<vector<int>>& tree2Edges) {\n        int n = tree1Edges.size() + 1;\n        int m = tree2Edges.size() + 1;\n\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : tree1Edges) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : tree2Edges) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int diameter1 = computeDiameter(adj1);\n        int diameter2 = computeDiameter(adj2);\n\n        return max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        return findMinDiameterAfterMergingTrees(edges1, edges2);\n    }\n};",
    "submit_ts": "1719719921",
    "subm_id": "1304454033"
}