{
    "username": "miguel_O_hara",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        if (n < k) return 0;\n\n        vector<int> pattern1(k), pattern2(k);\n        for (int i = 0; i < k; ++i) {\n            pattern1[i] = i % 2;\n            pattern2[i] = (i + 1) % 2;\n        }\n\n        auto KMPSearch = [](const vector<int>& pattern, const vector<int>& text) {\n            int m = pattern.size();\n            int n = text.size();\n            vector<int> lps(m, 0);\n            int j = 0;\n\n            for (int i = 1; i < m; ++i) {\n                while (j > 0 && pattern[i] != pattern[j]) {\n                    j = lps[j - 1];\n                }\n                if (pattern[i] == pattern[j]) {\n                    j++;\n                }\n                lps[i] = j;\n            }\n\n            int i = 0;\n            j = 0;\n            int count = 0;\n\n            while (i < n) {\n                if (pattern[j] == text[i]) {\n                    j++;\n                    i++;\n                }\n                if (j == m) {\n                    count++;\n                    j = lps[j - 1];\n                } else if (i < n && pattern[j] != text[i]) {\n                    if (j != 0) {\n                        j = lps[j - 1];\n                    } else {\n                        i++;\n                    }\n                }\n            }\n\n            return count;\n        };\n\n        vector<int> arr(colors.begin(), colors.end());\n        arr.insert(arr.end(), colors.begin(), colors.begin() + k - 1);\n\n        int count1 = KMPSearch(pattern1, arr);\n        int count2 = KMPSearch(pattern2, arr);\n\n        return count1 + count2;\n    }\n};\n",
    "submit_ts": "1720279633",
    "subm_id": "1311759033"
}