{
    "username": "xuanl-2",
    "submission": "def get_num(n: int):\n    return 2 - abs(n - 2)\n\nclass Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        if m == 0:\n            return 0\n        n = len(grid[0])\n        # print(f'm={m}, n={n}')\n        res = 0\n        for i in range(m // 2):\n            for j in range(n // 2):\n                # print('debug#', grid[i][j] + grid[i][-j] + grid[-i][j] + grid[-i][-j])\n                res += get_num(grid[i][j] + grid[i][-1-j] + grid[-1-i][j] + grid[-1-i][-1-j])\n        row_range = None\n        if m % 2 == 1:\n            i = m // 2\n            low = 0\n            high = 0\n            for j in range(n // 2):\n                if grid[i][j] != grid[i][-1-j]:\n                    high += 1\n                    res += 1\n                else:\n                    low += grid[i][j]\n                    high += grid[i][j]\n            row_range = (low, high)\n        col_range = None\n        if n % 2 == 1:\n            j = n // 2\n            low = 0\n            high = 0\n            for i in range(m // 2):\n                if grid[i][j] != grid[-1-i][j]:\n                    high += 1\n                    res += 1\n                else:\n                    low += grid[i][j]\n                    high += grid[i][j]\n            col_range = (low, high)\n        # print(col_range)\n        # print(row_range)\n        if row_range is None:\n            if col_range is not None:\n                if col_range[1] - col_range[0] == 0 and col_range[0] % 2 != 0:\n                    res += 2\n        else:\n            if col_range is None:\n                if row_range[1] - row_range[0] == 0 and row_range[0] % 2 != 0:\n                    res += 2\n            else:\n                # print(col_range[1] - col_range[0] == 0 and row_range[1] - row_range[0] == 0 and (col_range[0] + row_range[0]) % 2 == 1)\n                if col_range[1] - col_range[0] == 0 and row_range[1] - row_range[0] == 0 and (col_range[0] + row_range[0]) % 2 == 1:\n                    res += 2\n            \n        if m % 2 == n % 2 == 1 and grid[m//2][n//2] == 1:\n            res += 1\n        return res",
    "submit_ts": "1722698915",
    "subm_id": "552273141"
}