{
    "username": "tonghuikang",
    "submission": "def max_manhattan_distance(points):\n    \"\"\"\n    Finds the maximum Manhattan distance between any two distinct points and the corresponding pair of indices.\n    \n    Args:\n        points (list): List of points, where each point is represented as a tuple (x, y).\n    \n    Returns:\n        tuple: A tuple containing the maximum Manhattan distance and the pair of indices that achieve the maximum distance.\n    \"\"\"\n    n = len(points)\n    \n    # Arrays to store the sums and differences of coordinates\n    sum_coords = [(points[i][0] + points[i][1], i) for i in range(n)]\n    diff_coords = [(points[i][0] - points[i][1], i) for i in range(n)]\n    \n    # Sort the sum_coords and diff_coords arrays\n    sum_coords.sort()\n    diff_coords.sort()\n    \n    # Calculate the maximum Manhattan distance and the corresponding pair of indices\n    max_distance = max(sum_coords[-1][0] - sum_coords[0][0], diff_coords[-1][0] - diff_coords[0][0])\n    \n    if sum_coords[-1][0] - sum_coords[0][0] >= diff_coords[-1][0] - diff_coords[0][0]:\n        pair_indices = (sum_coords[0][1], sum_coords[-1][1])\n    else:\n        pair_indices = (diff_coords[0][1], diff_coords[-1][1])\n    \n    return max_distance, pair_indices\n\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        # find the furthest three times\n        # remove one of the two furthest\n        \n        max_distance, (a, b) = max_manhattan_distance(points)\n        \n        # print(points[a], points[b])\n        \n        arr = [x for i,x in enumerate(points) if i != a]\n        brr = [x for i,x in enumerate(points) if i != b]\n        \n        aa, _ = max_manhattan_distance(arr)\n        bb, _ = max_manhattan_distance(brr)\n        \n        return min(aa, bb)\n        \n        \n        \n\n        \n        \n                "
}