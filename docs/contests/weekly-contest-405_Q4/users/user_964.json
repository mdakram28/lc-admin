{
    "username": "karthik447",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.child = [None]*26\n        self.end = None\n\n    def add_child(self, c):\n        idx = ord(c) - ord('a')\n        if not self.child[idx]:\n            self.child[idx] = TrieNode()\n        return self.child[idx]\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        curr = self.root\n        for c in word:\n            curr = curr.add_child(c)\n        curr.end = cost if curr.end == None else min(cost, curr.end)\n        \n\nclass Solution:\n    def minimumCost(self, target: str, W: List[str], C: List[int]) -> int:\n        m = len(target)\n        n = len(W)\n        trie = Trie()\n\n        for idx, word in enumerate(W):\n            trie.insert(word, C[idx])\n        \n        @cache\n        def rec(i):\n            if i == m: return 0\n            res = inf\n            curr = trie.root\n            j = i\n            while j < m:\n                c = target[j]\n                idx = ord(c) - ord('a')\n                if curr.child[idx]:\n                    curr = curr.child[idx]\n                    j += 1\n                    if curr.end != None:\n                        res = min(res, curr.end + rec(j))\n                else: break\n            return res\n        \n        res = rec(0)\n        return -1 if res == inf else res",
    "submit_ts": "1720321867",
    "subm_id": "1312334419"
}