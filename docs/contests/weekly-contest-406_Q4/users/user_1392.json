{
    "username": "Ayush_Singh021",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] costHor, int[] costVer) {\n        \n        Integer[] costHorWrapper = Arrays.stream(costHor).boxed().toArray(Integer[]::new);\n        Integer[] costVerWrapper = Arrays.stream(costVer).boxed().toArray(Integer[]::new);\n        // MxN chocolate\n        //sort decending\n        Arrays.sort(costHorWrapper, Collections.reverseOrder());\n        Arrays.sort(costVerWrapper, Collections.reverseOrder());\n\n        for (int i = 0; i < costHor.length; i++) {\n            costHor[i] = costHorWrapper[i];\n        }\n        for (int i = 0; i < costVer.length; i++) {\n            costVer[i] = costVerWrapper[i];\n        }\n\n\n        int h = 0 , v = 0 ;\n        int hp = 1 , vp =1;\n        long cost = 0 ;\n\n        while(h<costHor.length && v<costVer.length){\n            if(costVer[v] <= costHor[h]){ //horizontal cut lagani hai\n                cost = (long)(cost + (long)(costHor[h] * vp));\n                hp++;\n                h++;\n            }else{ //vertical cut lagani hai\n                cost = (long)(cost + (long)(costVer[v] * hp));\n                vp++;\n                v++;\n\n            }\n        }\n        //leftovers in hori\n        while(h<costHor.length){\n            cost = (long)(cost + (long)(costHor[h] * vp));\n            hp++;\n            h++;\n        }\n        //leftovers in vertical\n        while(v<costVer.length){\n            cost = (long)(cost +  (long)(costVer[v] * hp));\n            vp++;\n            v++;\n        }\n        \n        return cost;\n    }\n}",
    "submit_ts": "1720926227",
    "subm_id": "1320279776"
}