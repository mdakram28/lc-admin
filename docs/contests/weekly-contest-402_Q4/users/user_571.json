{
    "username": "yuansun42",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        Node node = new Node();\n        int n = nums.length;\n        int[] arr = new int[n];\n        for (int i = 1; i < n - 1; i ++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                update(node, 0, n, i, 1);\n                arr[i] = 1;\n                i ++;\n            }\n        }\n        \n        int m = queries.length;\n        List<Integer> rst = new ArrayList<>(m);\n        \n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                if (q[1] + 1 > q[2] - 1) rst.add(0);\n                else rst.add(query(node, 0, n, q[1] + 1, q[2] - 1));\n            }\n            else {\n                int ori = nums[q[1]];\n                if (q[1] > 1) {\n                    if (arr[q[1] - 1] == 1 && q[2] >= nums[q[1] - 1]) {\n                        arr[q[1] - 1] = 0;\n                        update(node, 0, n, q[1] - 1, -1);\n                    }\n                    if (arr[q[1] - 1] == 0 && q[2] < nums[q[1] - 1] && nums[q[1] - 1] > nums[q[1] - 2]) {\n                        arr[q[1] - 1] = 1;\n                        update(node, 0, n, q[1] - 1, 1);\n                    }\n                } \n                \n                if (q[1] < n - 2) {\n                    if (arr[q[1] + 1] == 1 && q[2] >= nums[q[1] + 1]) {\n                        arr[q[1] + 1] = 0;\n                        update(node, 0, n, q[1] + 1, -1);\n                    }\n                    if (arr[q[1] + 1] == 0 && q[2] < nums[q[1] + 1] && nums[q[1] + 1] > nums[q[1] + 2]) {\n                        arr[q[1] + 1] = 1;\n                        update(node, 0, n, q[1] + 1, 1);\n                    }\n                }\n                if (q[1] > 0 && q[1] < n - 1) {\n                    if (arr[q[1]] == 1 && (q[2] <= nums[q[1] - 1] || q[2] <= nums[q[1] + 1])) {\n                        arr[q[1]] = 0;\n                        update(node, 0, n, q[1], -1);\n                    }\n                    \n                    if (arr[q[1]] == 0 && q[2] > nums[q[1] - 1] && q[2] > nums[q[1] + 1]) {\n                        arr[q[1]] = 1;\n                        update(node, 0, n, q[1], 1);\n                    }\n                }\n                \n                nums[q[1]] = q[2];\n            }\n        }\n        \n        return rst;\n    }\n    \n    private void update(Node node, int l, int r, int idx, int val) {\n        if (l == r) {\n            node.val += val;\n            return;\n        }\n        \n        create(node);\n        \n        int m = l + ((r - l) >> 1);\n        if (idx <= m) update(node.l, l, m, idx, val);\n        else update(node.r, m + 1, r, idx, val);\n        node.val = node.l.val + node.r.val;\n    }\n    \n    private int query(Node node, int l, int r, int s, int e) {\n        if (s <= l && r <= e) return node.val;\n        \n        create(node);\n        \n        int m = l + ((r - l) >> 1);\n        int rst = 0;\n        if (s <= m) rst += query(node.l, l, m, s, e);\n        if (e > m) rst += query(node.r, m + 1, r, s, e);\n        \n        return rst;\n    }\n    \n    private void create(Node node) {\n        if (node.l == null) node.l = new Node();\n        if (node.r == null) node.r = new Node();\n    }\n}\n\nclass Node {\n    Node l;\n    Node r;\n    int val;\n}",
    "submit_ts": 1718507683.0
}