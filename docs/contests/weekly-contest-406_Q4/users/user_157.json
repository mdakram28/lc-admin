{
    "username": "Shivam_1827",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        vector<pair<long long, bool>> cuts;\n    for (int cost : horizontalCut) {\n        cuts.push_back({cost, true});\n    }\n    for (int cost : verticalCut) {\n        cuts.push_back({cost, false});\n    }\n    \n    // Sort cuts by their cost in descending order\n    sort(cuts.rbegin(), cuts.rend());\n    \n    long long totalCost = 0;\n    long long horizontalPieces = 1; // Initial number of horizontal pieces\n    long long verticalPieces = 1;   // Initial number of vertical pieces\n    \n    for (const auto& cut : cuts) {\n        long long cost = cut.first;\n        bool isHorizontal = cut.second;\n        \n        if (isHorizontal) {\n            // Make a horizontal cut\n            totalCost += cost * verticalPieces;\n            horizontalPieces++;\n        } else {\n            // Make a vertical cut\n            totalCost += cost * horizontalPieces;\n            verticalPieces++;\n        }\n    }\n    \n    return totalCost;\n    }\n};",
    "submit_ts": "1720924858",
    "subm_id": "1320233734"
}