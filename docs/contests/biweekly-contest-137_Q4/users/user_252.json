{
    "username": "hum",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n\n\n    int n = board.length;\n    int m = board[0].length;\n    long inf = Long.MIN_VALUE;\n\n    int[][] pre_m = new int[n][m];\n    long[][] suf_m = new long[n][6];\n\n    for (int i = 0; i < n; i++) {\n      for (int j = 0; j < m; j++) {\n        if (i == 0) {\n          pre_m[i][j] = board[i][j];\n        } else {\n          pre_m[i][j] = Math.max(pre_m[i - 1][j], board[i][j]);\n        }\n      }\n    }\n\n    long[] cur = new long[m];\n    Arrays.fill(cur, inf);\n    for (int i = n - 1; i >= 0; i--) {\n      for (int j = 0; j < m; j++) {\n        cur[j] = Math.max(cur[j], board[i][j]);\n      }\n      int m1 = -1, m2 = -1, m3 = -1;\n      for (int j = 0; j < m; j++) {\n        if (m1 == -1 || cur[j] >= cur[m1]) {\n          m3 = m2;\n          m2 = m1;\n          m1 = j;\n        } else if (m2 == -1 || cur[j] >= cur[m2]) {\n          m3 = m2;\n          m2 = j;\n        } else if (m3 == -1 || cur[j] > cur[m3]) {\n          m3 = j;\n        }\n      }\n      suf_m[i] = new long[]{m1, m2, m3, cur[m1], cur[m2], cur[m3]};\n    }\n\n    long res = inf;\n    for (int i = 1; i < n - 1; i++) {\n      for (int j = 0; j < m; j++) {\n        for (int k = 0; k < m; k++) {\n          if (j == k) {\n            continue;\n          }\n          long[] nextRow = suf_m[i + 1];\n          if (nextRow[0] != j && nextRow[0] != k) {\n            res = Math.max(res, board[i][j] + pre_m[i - 1][k] + nextRow[3]);\n          } else if (nextRow[1] != j && nextRow[1] != k) {\n            res = Math.max(res, board[i][j] + pre_m[i - 1][k] + nextRow[4]);\n          } else {\n            res = Math.max(res, board[i][j] + pre_m[i - 1][k] + nextRow[5]);\n          }\n        }\n      }\n    }\n\n    return res;\n  }\n}",
    "submit_ts": "1723908751",
    "subm_id": "556332654"
}