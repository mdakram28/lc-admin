{
    "username": "1214367903",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)  # \u521d\u59cb\u5316\u7ebf\u6bb5\u6811\u6570\u7ec4\n        self._build_tree(nums, 0, 0, self.n - 1)\n\n    def _build_tree(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = nums[start]\n            return\n        mid = (start + end) // 2\n        self._build_tree(nums, 2 * node + 1, start, mid)\n        self._build_tree(nums, 2 * node + 2, mid + 1, end)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def _query(self, node, start, end, left, right):\n        if left > end or right < start:\n            return 0\n        if left <= start and end <= right:\n            return self.tree[node]\n        mid = (start + end) // 2\n        sum_left = self._query(2 * node + 1, start, mid, left, right)\n        sum_right = self._query(2 * node + 2, mid + 1, end, left, right)\n        return sum_left + sum_right\n\n    def query(self, left, right):\n        return self._query(0, 0, self.n - 1, left, right)\n\n    def _update(self, node, start, end, idx, val):\n        if start == end:\n            self.tree[node] = val\n            return\n        mid = (start + end) // 2\n        if idx <= mid:\n            self._update(2 * node + 1, start, mid, idx, val)\n        else:\n            self._update(2 * node + 2, mid + 1, end, idx, val)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update(self, idx, val):\n        self._update(0, 0, self.n - 1, idx, val)\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        tops = [0] * len(nums)\n        for i in range(1, len(nums) - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                tops[i] = 1\n        st = SegmentTree(tops)\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                res.append(st.query(q[1] + 1, q[2] - 1))\n            elif q[0] == 2:\n                idx, val = q[1], q[2]\n                nums[idx] = val\n                if idx > 0 and idx < len(nums) - 1:\n                    new_top = int(\n                        nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1]\n                    )\n                    if new_top != tops[idx]:\n                        tops[idx] = new_top\n                        st.update(idx, new_top)\n                if idx > 1:\n                    left_new_top = int(\n                        nums[idx - 1] > nums[idx - 2] and nums[idx - 1] > nums[idx]\n                    )\n                    if left_new_top != tops[idx - 1]:\n                        tops[idx - 1] = left_new_top\n                        st.update(idx - 1, left_new_top)\n                if idx < len(nums) - 2:\n                    right_new_top = int(\n                        nums[idx + 1] > nums[idx] and nums[idx + 1] > nums[idx + 2]\n                    )\n                    if right_new_top != tops[idx + 1]:\n                        tops[idx + 1] = right_new_top\n                        st.update(idx + 1, right_new_top)\n            else:\n                print(f'\u65e0\u6548\u67e5\u8be2: {q}')\n        return res",
    "submit_ts": 1718506886.0
}