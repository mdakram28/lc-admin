{
    "username": "lixiangfan97",
    "submission": "class Solution {\npublic:\n    int dfs(const vector<vector<int>>& neighs, int u, int p, int& ans) {\n        int ret = 0;\n        vector<int> sub_rets;\n        sub_rets.reserve(neighs[u].size());\n        for (int v: neighs[u]) {\n            if (v == p) {\n                continue;\n            }\n            int sub = dfs(neighs, v, u, ans);\n            sub_rets.push_back(sub); \n        }\n        int max1 = -1, max2 = -1;\n        for (int sub: sub_rets) {\n            ret = max(ret, sub + 1);\n            if (max1 < 0 || sub > max1) {\n                if (max1 >= 0) {\n                    max2 = max1;\n                }\n                max1 = sub;\n            } else if (max2 < 0 || sub > max2) {\n                max2 = sub;\n            }\n        }\n        ans = max(ans, ret);\n        if (max1 >= 0 && max2 >= 0) {\n            ans = max(ans, max1 + max2 +2);\n        }\n        return ret;\n    }\n    int max_dist(const vector<vector<int>>& edges) {\n        const int n = (int)edges.size();\n        vector<vector<int>> neighs = vector<vector<int>> (n+1);\n        for (const auto& e: edges) {\n            neighs[e[0]].push_back(e[1]);\n            neighs[e[1]].push_back(e[0]);\n        }\n        int ans = 0;\n        dfs(neighs, 0, -1, ans);\n        return ans;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int dist1 = max_dist(edges1);\n        int dist2 = max_dist(edges2);\n        // cout << \"dist1 = \" << dist1 << endl;\n        // cout << \"dist2 = \" << dist2 << endl;\n        return max(max(dist1, (dist1 + 1) / 2 + (dist2 + 1) / 2 + 1), dist2);\n    }\n};",
    "submit_ts": "1719716409",
    "subm_id": "1304363673"
}