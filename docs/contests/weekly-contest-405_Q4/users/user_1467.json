{
    "username": "sujal25",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\n#include <string>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct Fabric {\n        unordered_map<char, Fabric*> threads;\n        vector<pair<int, int>> patches; // Changed to pair<int, int>\n    };\n\n    class Apparel {\n    public:\n        Fabric* design;\n\n        Apparel() {\n            design = new Fabric();\n        }\n\n        void stitch(const string& pattern, int emblem, int price) {\n            Fabric* thread = design;\n            for (char c : pattern) {\n                if (thread->threads.find(c) == thread->threads.end()) {\n                    thread->threads[c] = new Fabric();\n                }\n                thread = thread->threads[c];\n            }\n            thread->patches.push_back({emblem, price});\n        }\n    };\n\n    int minimumCost(string emblem, vector<string>& styles, vector<int>& prices) {\n        int length = emblem.size();\n        vector<int> totalCost(length + 1, INT_MAX);\n        totalCost[0] = 0;\n\n        Apparel garment;\n        for (int weave = 0; weave < styles.size(); ++weave) {\n            garment.stitch(styles[weave], weave, prices[weave]);\n        }\n\n        for (int seam = 0; seam < length; ++seam) {\n            if (totalCost[seam] == INT_MAX) continue;\n\n            Fabric* thread = garment.design;\n            for (int fabric = seam; fabric < length; ++fabric) {\n                if (thread->threads.find(emblem[fabric]) == thread->threads.end()) break;\n                thread = thread->threads[emblem[fabric]];\n                for (auto& decor : thread->patches) {\n                    int emblemIndex = decor.first;\n                    int emblemCost = decor.second;\n                    int designSize = styles[emblemIndex].size();\n                    if (seam + designSize <= length) {\n                        totalCost[seam + designSize] = min(totalCost[seam + designSize], totalCost[seam] + emblemCost);\n                    }\n                }\n            }\n        }\n\n        return totalCost[length] == INT_MAX ? -1 : totalCost[length];\n    }\n};\n\n",
    "submit_ts": "1720324281",
    "subm_id": "1312395792"
}