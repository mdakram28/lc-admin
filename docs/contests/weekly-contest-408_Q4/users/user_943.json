{
    "username": "OSHANG_surtani",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n   int num_circles = circles.size();\n    vector<vector<int>> graph(num_circles + 4);\n\n    for (int i = 0; i < num_circles; i++) {\n        int x = circles[i][0];\n        int y = circles[i][1];\n        int r = circles[i][2];\n\n        if (x <= r) {\n            graph[num_circles].push_back(i);\n            graph[i].push_back(num_circles);\n        }\n        if (X - x <= r) {\n            graph[num_circles + 2].push_back(i);\n            graph[i].push_back(num_circles + 2);\n        }\n        if (y <= r) {\n            graph[num_circles + 1].push_back(i);\n            graph[i].push_back(num_circles + 1);\n        }\n        if (Y - y <= r) {\n            graph[num_circles + 3].push_back(i);\n            graph[i].push_back(num_circles + 3);\n        }\n\n        for (int j = i + 1; j < num_circles; j++) {\n            int xj = circles[j][0];\n            int yj = circles[j][1];\n            int rj = circles[j][2];\n\n            double distance = sqrt(pow(x - xj, 2) + pow(y - yj, 2));\n            double radius_sum = r + rj;\n\n            if (radius_sum >= distance) {\n                graph[i].push_back(j);\n                graph[j].push_back(i);\n            }\n        }\n    }\n\n    bool is_blocked = false;\n\n    queue<int> q;\n    vector<bool> visited(num_circles + 4, false);\n\n    // Check for bottom-left corner\n    q.push(num_circles);\n    visited[num_circles] = true;\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n\n        for (int v : graph[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = true;\n            }\n        }\n    }\n\n    is_blocked = visited[num_circles + 1] || visited[num_circles + 2];\n\n    // Check for top-right corner\n    q.push(num_circles + 3);\n    visited[num_circles + 3] = true;\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n\n        for (int v : graph[u]) {\n            if (!visited[v]) {\n                q.push(v);\n                visited[v] = true;\n            }\n        }\n    }\n\n    is_blocked = is_blocked || visited[num_circles + 2] || visited[num_circles + 1];\n\n    return !is_blocked;\n}\n};",
    "submit_ts": "1722139033",
    "subm_id": "1335806077"
}