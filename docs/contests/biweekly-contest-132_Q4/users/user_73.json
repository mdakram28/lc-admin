{
    "username": "Tudor67",
    "submission": "class SegmentTree{\nprivate:\n    const int N;\n    vector<int> tree;\n    \n    void update(int node, int l, int r, const int POS, const int VAL){\n        if(l == r){\n            tree[node] = VAL;\n        }else{\n            int mid = (l + r) / 2;\n            if(POS <= mid){\n                update(2 * node + 1, l, mid, POS, VAL);\n            }else{\n                update(2 * node + 2, mid + 1, r, POS, VAL);\n            }\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n    \n    int queryMax(int node, int l, int r, const int L, const int R){\n        if(r < L || R < l){\n            return 0;\n        }\n        if(L <= l && r <= R){\n            return tree[node];\n        }\n        int mid = (l + r) / 2;\n        return max(queryMax(2 * node + 1, l, mid, L, R),\n                   queryMax(2 * node + 2, mid + 1, r, L, R));\n    }\n    \npublic:\n    SegmentTree(const int N): N(N){\n        int minLeaves = 1;\n        while(minLeaves < N){\n            minLeaves *= 2;\n        }\n        tree.resize(2 * minLeaves);\n    }\n    \n    void update(int pos, int val){\n        update(0, 0, N - 1, pos, val);\n    }\n    \n    int queryMax(const int L, const int R){\n        if(L > R){\n            return 0;\n        }\n        return queryMax(0, 0, N - 1, L, R);\n    }\n    \n    void reset(){\n        fill(tree.begin(), tree.end(), 0);\n    }\n};\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        const int N = nums.size();\n        \n        vector<int> sortedNums = nums;\n        sort(sortedNums.begin(), sortedNums.end());\n        sortedNums.resize(unique(sortedNums.begin(), sortedNums.end()) - sortedNums.begin());\n        \n        vector<int> v(N);\n        for(int i = 0; i < N; ++i){\n            v[i] = lower_bound(sortedNums.begin(), sortedNums.end(), nums[i]) - sortedNums.begin();\n        }\n        \n        SegmentTree tree(N + 5);\n        vector<vector<int>> dp(k + 2, vector<int>(N));\n        \n        for(int i = 0; i < N; ++i){\n            dp[0][i] = 1 + tree.queryMax(v[i], v[i]);\n            tree.update(v[i], dp[0][i]);\n        }\n        \n        SegmentTree prevTree(N + 5);\n        for(int d = 1; d <= k; ++d){\n            prevTree.reset();\n            tree.reset();\n            for(int i = 0; i < N; ++i){\n                dp[d][i] = 1 + max({prevTree.queryMax(0, v[i] - 1), prevTree.queryMax(v[i] + 1, N), tree.queryMax(v[i], v[i])});\n                tree.update(v[i], dp[d][i]);\n                prevTree.update(v[i], dp[d - 1][i]);\n            }\n        }\n        \n        int res = 0;\n        for(int d = 0; d <= k; ++d){\n            for(int i = 0; i < N; ++i){\n                res = max(res, dp[d][i]);\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1717859864.0
}