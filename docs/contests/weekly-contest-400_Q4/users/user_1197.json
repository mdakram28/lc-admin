{
    "username": "pradeep247",
    "submission": "class Solution {\npublic:\n    class Sgtree {\nprivate:\n    vector<int> seg;\n    vector<int> arr;\n    int n;\n\n    void build(int idx, int low, int high) {\n        if (low == high) {\n            seg[idx] = arr[low];\n            return;\n        }\n        int mid = (low + high) / 2;\n        build(2 * idx + 1, low, mid);\n        build(2 * idx + 2, mid + 1, high);\n        seg[idx] = seg[2 * idx + 1] & seg[2 * idx + 2];\n    }\n\n    int query(int idx, int low, int high, int l, int r) {\n        if (r < low || high < l) return -1; \n        if (l <= low && high <= r) return seg[idx];\n        int mid = (low + high) / 2;\n        int left = query(2 * idx + 1, low, mid, l, r);\n        int right = query(2 * idx + 2, mid + 1, high, l, r);\n        if (left == -1) return right;\n        if (right == -1) return left;\n        return left & right;\n    }\n\npublic:\n    Sgtree(int n, vector<int>& dp) : n(n) {\n        arr = dp;\n        seg.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n};\n    int minimumDifference(std::vector<int>& nums, int k) {\n       int n = nums.size();\n        Sgtree sg(n,nums);\n        int ans =  INT_MAX;\n        for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (sg.query(i, mid) >= k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1)\n            ans = min(ans, abs(sg.query(i, l) - k));\n        ans = min(ans, abs(k - sg.query(i, r)));\n    }\n    return ans;\n    }\n};\n",
    "submit_ts": 1717300591.0
}