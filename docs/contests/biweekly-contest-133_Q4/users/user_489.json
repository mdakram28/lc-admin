{
    "username": "suryasps20",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        const int MODULO = 1'000'000'007;\n        const int MAX_INVERSIONS = 400;\n        unordered_map<int, int> requirements;\n        for (auto& requirement : reqs) {\n            requirements[requirement[0] + 1] = requirement[1];\n        }\n        vector<vector<long>> permutationCounts(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        permutationCounts[0][0] = 1;\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= MAX_INVERSIONS; inversions++) {\n                for (int position = 0; position < length; position++) {\n                    int previousInversions = inversions - position;\n                    if (previousInversions >= 0) {\n                        permutationCounts[length][inversions] = (permutationCounts[length][inversions] + permutationCounts[length - 1][previousInversions]) % MODULO;\n                    }\n                }\n            }\n            if (requirements.count(length)) {\n                int targetInversions = requirements[length];\n                for (int inversions = 0; inversions <= MAX_INVERSIONS; inversions++) {\n                    if (inversions != targetInversions) {\n                        permutationCounts[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n        long result = 0;\n        for (long count : permutationCounts[n]) {\n            result = (result + count) % MODULO;\n        }\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719070551.0
}