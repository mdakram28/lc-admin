{
    "username": "Oone",
    "submission": "import java.math.BigInteger;\nimport java.util.*;\nimport java.util.stream.Collectors;\n\n\npublic class Main {\n    public static void main(String[] args) {\n        int[][] meetings = {{1, 2, 6}, {1, 3, 4}, {2, 4, 6}, {2, 5, 3}, {3, 6, 6}, {3, 0, 8}, {7, 0, 2}};\n        int[][] edges = {{0,2},{3,2},{2,5}};\n        int[] nums = {-1,0,1,1};\n        int[] healths = {9,5,3,8,4,7,2,7,4,5,4,9,1,4,8,10,8,10,4,7};\n        String[] matrix = {\"@.a..\",\"###.#\",\"b.A.B\"};\n        String s = \"RLRL\";\n        String[] ans = {\"gfnt\", \"xn\", \"mdz\", \"yfmr\", \"fi\", \"wwncn\", \"hkdy\"};\n        Solution solution = new Solution();\n    }\n}\n\n\n\nclass Solution {\n    List<List<Integer>>e1=new ArrayList<>();\n    List<List<Integer>>e2=new ArrayList<>();\n    int[] son1,son2;\n    int[][] dp1,dp2;\n    void DFS1(int u,int fa,int[][] dp,List<List<Integer>>e,int[] son) {\n        for (int v : e.get(u)) {\n            if (v != fa) {\n                DFS1(v, u, dp, e,son);\n                if (dp[v][0] + 1 >= dp[u][0]) {\n                    son[u] = v;\n                    dp[u][1] = dp[u][0];\n                    dp[u][0] = dp[v][0] + 1;\n                } else if (dp[v][0] + 1 > dp[u][1])\n                    dp[u][1] = dp[v][0] + 1;\n            }\n        }\n    }\n    void DFS2(int u, int fa,int[][] dp,List<List<Integer>>e,int[] son) {\n        for (int v : e.get(u)) {\n            if (v != fa) {\n                if (son[u] == v)\n                    dp[v][2] = 1 + Math.max(dp[u][1], dp[u][2]);\n                else dp[v][2] = 1 + Math.max(dp[u][0], dp[u][2]);\n                DFS2(v, u, dp, e, son);\n            }\n        }\n    }\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n=edges1.length+1;\n        int m=edges2.length+1;\n        dp1=new int[n][3];\n        dp2=new int[m][3];\n        son1=new int[n];\n        son2=new int[m];\n        for(int i=0;i<n;++i)\n            e1.add(new ArrayList<>());\n        for(int i=0;i<m;++i)\n            e2.add(new ArrayList<>());\n        for(int[] i:edges1) {\n            e1.get(i[0]).add(i[1]);\n            e1.get(i[1]).add(i[0]);\n        }\n        for(int[] i:edges2){\n            e2.get(i[0]).add(i[1]);\n            e2.get(i[1]).add(i[0]);\n        }\n        DFS1(0,-1,dp1,e1,son1);\n        DFS2(0,-1,dp1,e1,son1);\n        DFS1(0,-1,dp2,e2,son2);\n        DFS2(0,-1,dp2,e2,son2);\n        int ans=0,mi1=Integer.MAX_VALUE,mi2=Integer.MAX_VALUE;\n        for(int i=0;i<n;++i){\n            ans=Math.max(ans,Math.max(dp1[i][0],dp1[i][2]));\n            mi1=Math.min(mi1,Math.max(dp1[i][0],dp1[i][2]));\n        }\n        for(int i=0;i<m;++i){\n            ans=Math.max(ans,Math.max(dp2[i][0],dp2[i][2]));\n            mi2=Math.min(mi2,Math.max(dp2[i][0],dp2[i][2]));\n        }\n        return Math.max(ans,mi1+mi2+1);\n    }\n}",
    "submit_ts": "1719717576",
    "subm_id": "1304395227"
}