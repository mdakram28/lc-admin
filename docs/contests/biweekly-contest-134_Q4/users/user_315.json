{
    "username": "pikapika123",
    "submission": "#include <vector>\n#include <algorithm>\n\nclass Solution {\npublic:\n    long long countSubarrays(std::vector<int>& a, int k) {\n        int n = a.size();\n        const int B = 31;\n        std::vector<std::vector<int>> pre(B, std::vector<int>(n + 1, 0));\n        for (int i = 0; i < B; i++) {\n            int mask = 1 << i;\n            for (int j = 0; j < n; j++) {\n                pre[i][j + 1] = pre[i][j];\n                if (mask & a[j]) {\n                    pre[i][j + 1]++;\n                }\n            }\n        }\n\n        auto bit_and = [&](int left, int right) {\n            int ans = 0;\n            int length = right - left + 1;\n            for (int i = 0; i < B; i++) {\n                int c = pre[i][right] - pre[i][left - 1];\n                if (c == length) {\n                    ans |= (1 << i);\n                }\n            }\n            return ans;\n        };\n\n        auto find_left = [&](int i) {\n            int l = 1, r = i;\n            while (l < r) {\n                int m = (l + r) / 2;\n                int v = bit_and(m, i);\n                if (v >= k) {\n                    r = m;\n                } else {\n                    l = m + 1;\n                }\n            }\n            return l;\n        };\n\n        auto find_right = [&](int i) {\n            int l = 1, r = i;\n            while (l < r) {\n                int m = (l + r + 1) / 2;\n                int v = bit_and(m, i);\n                if (v <= k) {\n                    l = m;\n                } else {\n                    r = m - 1;\n                }\n            }\n            return l;\n        };\n\n        long long ans = 0;  // Changed to long long\n        for (int idx = 1; idx <= n; idx++) {\n            if (a[idx - 1] < k || bit_and(1, idx) > k) {\n                continue;\n            }\n            int v1 = find_left(idx), v2 = find_right(idx);\n            ans += static_cast<long long>(v2 - v1 + 1);  // Cast to long long\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1720278507",
    "subm_id": "1311712178"
}