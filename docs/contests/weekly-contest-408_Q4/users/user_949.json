{
    "username": "lordoflegend2003",
    "submission": "class Solution {\npublic:\n    bool isValidPath(vector<vector<int>>& g, int s, int t1, int t2, int n) {\n    queue<int> q;\n    vector<bool> vis(n + 4, false);\n    q.push(s);\n    vis[s] = true;\n\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : g[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = true;\n            }\n        }\n    }\n\n    return (vis[t1] || vis[t2]);\n}\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& cir) {\n    int nc = cir.size();\n    vector<vector<int>> g(nc + 4);\n\n    for (int i = 0; i < nc; i++) {\n        if (cir[i][0] <= cir[i][2]) {\n            g[nc].push_back(i);\n            g[i].push_back(nc);\n        }\n        if (X - cir[i][0] <= cir[i][2]) {\n            g[nc + 2].push_back(i);\n            g[i].push_back(nc + 2);\n        }\n        if (cir[i][1] <= cir[i][2]) {\n            g[nc + 1].push_back(i);\n            g[i].push_back(nc + 1);\n        }\n        if (Y - cir[i][1] <= cir[i][2]) {\n            g[nc + 3].push_back(i);\n            g[i].push_back(nc + 3);\n        }\n        for (int j = i + 1; j < nc; ++j) {\n            double dist = sqrt(pow(cir[i][0] - cir[j][0], 2) + pow(cir[i][1] - cir[j][1], 2));\n            int radSum = cir[i][2] + cir[j][2];\n            if (radSum >= dist) {\n                g[i].push_back(j);\n                g[j].push_back(i);\n            }\n        }\n    }\n\n    return !(isValidPath(g, nc, nc + 1, nc + 2, nc + 4) || isValidPath(g, nc + 3, nc + 2, nc + 1, nc + 4));\n    }\n\n    void addCircle(vector<vector<int>>& cir, int x, int y, int r) {\n        cir.push_back({x, y, r});\n    }\n\n    void removeCircle(vector<vector<int>>& cir, int x, int y, int r) {\n        auto it = find(cir.begin(), cir.end(), vector<int>{x, y, r});\n        if (it != cir.end()) {\n            cir.erase(it);\n        }\n    }\n};",
    "submit_ts": "1722138773",
    "subm_id": "1335799293"
}