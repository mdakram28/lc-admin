{
    "username": "f20220118",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        sort(horizontalCuts.begin(), horizontalCuts.end(), greater<long long>());\n        sort(verticalCuts.begin(), verticalCuts.end(), greater<long long>());\n        \n        long long hIndex = 0, vIndex = 0;\n        long long hPieces = 1, vPieces = 1;\n        long long cost = 0;\n        \n        while (hIndex < horizontalCuts.size() && vIndex < verticalCuts.size()) {\n            if (horizontalCuts[hIndex] >= verticalCuts[vIndex]) {\n                cost += horizontalCuts[hIndex] * vPieces;\n                hPieces++;\n                hIndex++;\n            } else {\n                cost += verticalCuts[vIndex] * hPieces;\n                vPieces++;\n                vIndex++;\n            }\n        }\n        \n        while (hIndex < horizontalCuts.size()) {\n            cost += horizontalCuts[hIndex] * vPieces;\n            hPieces++;\n            hIndex++;\n        }\n        \n        while (vIndex < verticalCuts.size()) {\n            cost += verticalCuts[vIndex] * hPieces;\n            vPieces++;\n            vIndex++;\n        }\n        \n        return cost;\n    }\n};\n",
    "submit_ts": "1720925460",
    "subm_id": "1320255458"
}