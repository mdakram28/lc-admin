{
    "username": "rutvikjakasaniya",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        int rows = grid.length, cols = grid[0].length;\n        int flips = 0;\n\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            flips += grid[rows / 2][cols / 2];\n        }\n\n        int[] shiftCounts = new int[3];\n        if (rows % 2 == 1) {\n            int midRow = rows / 2;\n            IntStream.range(0, cols / 2).forEach(c -> {\n                int sum = grid[midRow][c] + grid[midRow][cols - 1 - c];\n                shiftCounts[sum]++;\n            });\n        }\n\n        if (cols % 2 == 1) {\n            int midCol = cols / 2;\n            IntStream.range(0, rows / 2).forEach(r -> {\n                int sum = grid[r][midCol] + grid[rows - 1 - r][midCol];\n                shiftCounts[sum]++;\n            });\n        }\n\n        if (shiftCounts[2] % 2 == 1) {\n            flips += (shiftCounts[1] > 0) ? shiftCounts[1] : 2;\n        } else {\n            flips += shiftCounts[1];\n        }\n\n        int halfRows = rows / 2, halfCols = cols / 2;\n        for (int r = 0; r < halfRows; r++) {\n            for (int c = 0; c < halfCols; c++) {\n                int topLeft = grid[r][c];\n                int topRight = grid[r][cols - 1 - c];\n                int bottomLeft = grid[rows - 1 - r][c];\n                int bottomRight = grid[rows - 1 - r][cols - 1 - c];\n\n                int total = topLeft + topRight + bottomLeft + bottomRight;\n\n                if (total != 0 && total != 4) {\n                    flips += Math.min(total, 4 - total);\n                }\n            }\n        }\n\n        return flips;\n    }\n}",
    "submit_ts": "1722699272",
    "subm_id": "1343206653"
}