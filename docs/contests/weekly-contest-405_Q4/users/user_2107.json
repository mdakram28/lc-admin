{
    "username": "aksh_patel1",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')  # Initialize cost with infinity\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        m = len(words)\n        \n        # Build the trie from the words and costs\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        # Initialize dp array with infinity, and dp[0] with 0\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Process each position of target using dynamic programming with trie\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # If current position is not reachable, skip it\n            \n            node = trie.root\n            for j in range(i, n):\n                char = target[j]\n                if char not in node.children:\n                    break\n                node = node.children[char]\n                if node.cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        # The result is dp[len(target)]\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322643",
    "subm_id": "1312355327"
}