{
    "username": "noojeff",
    "submission": "# Return set of index to circles\ndef find_circle(circles, func):\n    s = set()\n    for i in range(len(circles)):\n        if func(circles[i]):\n            s.add(i)\n    \n    return s\n\ndef intersect(circles, i, j):\n    # Two circle intersect if distance between center <= sum of radius\n    c1, c2 = circles[i], circles[j]\n    dist = abs(c1[0] - c2[0]) ** 2 + abs(c1[1] - c2[1]) ** 2\n    return dist <= ((c1[2] + c2[2]) ** 2)\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # 1. Find all circle that are intersecting with 2 lines\n        # Intersecting with top line\n        circles_1 = find_circle(circles, lambda circle: abs(Y - circle[1]) <= circle[2])\n        # Intersecting with left line\n        circles_2 = find_circle(circles, lambda circle: circle[0] <= circle[2])\n\n        # Union\n        starting_circles = circles_1.union(circles_2)\n\n        # Index to circles\n        queue = deque(starting_circles)\n        visited = set()\n        # print(queue)\n\n        # 2. Do a BFS and see if we can intersect with the rest 2 lines\n        while queue:\n            idx = queue.popleft()\n\n            if idx in visited:\n                continue\n            visited.add(idx)\n\n            circle = circles[idx]\n\n            # Can reach two line?\n            if circle[1] <= circle[2] or abs(X - circle[0]) <= circle[2]:\n                return False\n            \n            # If no, add the neighbor of this circle to queue\n            for i in range(len(circles)):\n                if i in visited:\n                    continue\n                # If two circle intersect\n                if intersect(circles, idx, i):\n                    # print(idx, \" intersect with \", i)\n                    queue.append(i)\n\n        return True",
    "submit_ts": "1722137698",
    "subm_id": "1335771155"
}