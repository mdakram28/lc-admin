{
    "username": "divyank_99",
    "submission": "class Solution {\npublic:\n//     int solve(int ind,vector<int>&a1,vector<int>&a2,vector<int>&a,int &n){\n//     if(ind ==n){\n//         bool flag=true;\n\n//         for(int i=0;i<a1.size()-1;i++){\n//             if(a1[i]>a1[i+1]){\n//                 flag=false;\n//                 break;\n//             }\n//         }\n//         if(flag==false){\n//             return 0;\n//         }\n//           for(int i=0;i<a2.size()-1;i++){\n//             if(a2[i]<a2[i+1]){\n//                 flag=false;\n//                 break;\n//             }\n//         }\n//         if(flag==false){\n//             return 0;\n//         }\n//         return 1;\n//         }\n\n\n\n//     int ans=0;\n\n//     for(int i=0;i<=a[ind];i++){\n//         a1[ind]=i;\n//         a2[ind]=a[ind]-i;\n//         ans+=solve(ind+1,a1,a2,a,n);\n//     }\n//     return ans;\n\n// }\n\n\n\n    const int MODULO = 1e9 + 7;\n    vector<vector<int>> memoization;  \n\nint recursiveSolver(int index, int previous, int size, const vector<int>& numbers)  {\n        if (index == size) return 1; \n\n        if (memoization[index][previous] != -1) return memoization[index][previous];  \n\n        int totalWays = 0;\n        int current = previous;\n        while (current <= numbers[index]) {\n            int remaining = numbers[index] - current;\n            if (index == 0 || remaining <= numbers[index - 1] - previous) {\n                totalWays = (totalWays + recursiveSolver(index + 1, current, size, numbers)) % MODULO;\n            }\n            ++current;\n        }\n\n        return memoization[index][previous] = totalWays;\n    }\n\n    int countOfPairs(vector<int>& numbers) {\n        int size = numbers.size();\n        memoization.assign(size, vector<int>(101, -1));\n      \n        return recursiveSolver(0, 0, size, numbers);\n    }\n};\n",
    "submit_ts": "1723346975",
    "subm_id": "1351589230"
}