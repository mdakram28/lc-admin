{
    "username": "vrangr",
    "submission": "auto _=[]{ios_base::sync_with_stdio(false),cin.tie(0);return 0;}();\ntemplate<typename type> inline void print(const type &var) {\n    cout << var;\n}\ntemplate<typename type> inline void print(const vector<type> &vec) {\n    for (auto &it : vec) {\n        print(it); cout << \" \";\n    }\n}\n#define debug(x) if(true){cout<<#x<<\": \";print(x);cout<<endl;}\nclass segtree {\npublic:\n    int n;\n    vector<int> tree;\n    segtree(){}\n\n    segtree(int gn) {\n        n = gn;\n        gn<<=1;\n        if (__builtin_popcount(gn) != 1)\n            gn = (1<<(32-__builtin_clz(gn)));\n        tree.assign(gn,0);\n    }\n\n    void build(int gn) {\n        n = gn;\n        gn<<=1;\n        if (__builtin_popcount(gn) != 1)\n            gn = (1<<(32-__builtin_clz(gn)));\n        tree.assign(gn,0);\n    }\n\n    void update(int ind, int x) {\n        ind+=n;\n        tree[ind] = max(tree[ind],x);\n        for(;ind>1;ind>>=1)\n            tree[ind>>1] = max(tree[ind],tree[ind^1]);\n    }\n\n    int query(int ind) {\n        return tree[ind+n];\n    }\n\n    int query(int l, int r) {\n        int res = 0;\n        for(l+=n,r+=n;l<r;l>>=1,r>>=1) {\n            if (l&1) res = max(tree[l++],res);\n            if (r&1) res = max(res,tree[--r]);\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    int maximumLength1(vector<int>& vals, int k) {\n        int n = vals.size();\n        vector<vector<int>> dp(n,vector<int>(k+1,0));\n        for(int i = 0; i < n; ++i) dp[i][0] = 1;\n        int sol = 1;\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j < i; ++j) {\n                for (int l = 0; l <= k; ++l) {\n                    if (vals[i] == vals[j]) {\n                        dp[i][l] = max(dp[i][l],dp[j][l]+1);\n                    }\n                    else if (l != k) {\n                        dp[i][l+1] = max(dp[i][l+1],dp[j][l]+1);\n                        sol = max(sol,dp[i][l+1]);\n                    }\n                    sol = max(sol,dp[i][l]);\n                }\n            }\n        }\n        debug(dp);\n        return sol;\n    }\n    \n    int maximumLength(vector<int>& vals, int k) {\n        int n = vals.size();\n        int ct = 0;\n        vector<int> a(n);\n        map<int,int> mp;\n        for (int i = 0; i < n; ++i) {\n            if (mp.find(vals[i]) != mp.end())\n                a[i] = mp[vals[i]];\n            else a[i] = mp[vals[i]] = ct++;\n        }\n        int sol = 0;\n        vector<segtree> sts(k+1);\n        for (auto &st : sts) st.build(ct);\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                int cur = sts[j].query(a[i]) + 1;\n                assert(cur >= 1);\n                if (j == 0) cur = max(cur,1);\n                else {\n                    cur = max({cur,sts[j-1].query(0,a[i])+1,sts[j-1].query(a[i]+1,ct)+1});\n                }\n                sts[j].update(a[i],cur);\n                sol = max(sol,cur);\n            }\n        }\n        return sol;\n    }\n};\n\n/*\n[1,2,1,1,3]\n2\n[1,2,3,4,5,1]\n0\n[29,30,30]\n0\n[2]\n0\n[39,39,38,38]\n0\n\n4\n2\n2\n1\n2\n\n*/",
    "submit_ts": 1717860232.0
}