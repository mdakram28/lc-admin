{
    "username": "Wibo",
    "submission": "class Solution {\nprivate:\n    long long max_weights(int N, int M, vector<int> X, vector<int> Y, vector<int> W) {\n        vector<vector<long long>> fishes(N+1);\n        vector<vector<int>> states(N+1, {0});\n        for (int i = 0; i < M; ++i) {\n            ++Y[i];\n            for (int j = max(X[i]-1, 0); j <= min(X[i]+1, N-1); ++j) {\n                states[j].push_back(Y[i]);\n            }\n        }\n        \n        for (int i = 0; i <= N; ++i) {\n            sort(states[i].begin(), states[i].end());\n            states[i].erase(unique(states[i].begin(), states[i].end()), states[i].end());\n            fishes[i].resize(states[i].size());\n        }\n        for (int i = 0; i < M; ++i) {\n            int x = X[i];\n            int y = lower_bound(states[x].begin(), states[x].end(), Y[i]) - states[x].begin();\n            fishes[x][y] += W[i];\n        }\n        vector<vector<long long>> dp_up(N+1), dp_down(N+1);\n        for (int i = 0; i <= N; ++i) {\n            int sz = states[i].size();\n            dp_up[i].assign(sz, 0);\n            dp_down[i].assign(sz, 0);\n            if (i > 1) {\n                long long best = max(dp_up[i-2][0], dp_down[i-2][0]), sum = 0;\n                for (int j = 0, lef = 0, mid = 0; j < sz; ++j) {\n                    while (lef+1 < (int)states[i-2].size() && states[i-2][lef+1] <= states[i][j]) {\n                        ++lef;\n                        while (mid+1 < (int)states[i-1].size() && states[i-1][mid+1] <= states[i-2][lef]) {\n                            ++mid;\n                            best += fishes[i-1][mid];\n                            sum += fishes[i-1][mid];\n                        }\n                        best = max(best, max(dp_up[i-2][lef], dp_down[i-2][lef]) + sum);\n                    }\n                    dp_up[i][j] = max(dp_up[i][j], best);\n                }\n                best = 0;\n                sum = accumulate(fishes[i-1].begin(), fishes[i-1].end(), 0LL);\n                for (int j = sz-1, lef = states[i-2].size(), mid = states[i-1].size(); j >= 0; --j) {\n                    while (lef > 0 && states[i-2][lef-1] >= states[i][j]) {\n                        --lef;\n                        while (mid > 0 && states[i-1][mid-1] > states[i-2][lef]) {\n                            --mid;\n                            sum -= fishes[i-1][mid];\n                        }\n                        best = max(best, max(dp_up[i-2][lef], dp_down[i-2][lef]) + sum);\n                    }\n                    dp_up[i][j] = max(dp_up[i][j], best);\n                }\n            }\n            if (i > 0) {\n                long long best = dp_up[i-1][0], sum = 0;\n                for (int j = 0, lef = 0; j < sz; ++j) {\n                    while (lef+1 < (int)states[i-1].size() && states[i-1][lef+1] <= states[i][j]) {\n                        ++lef;\n                        best += fishes[i-1][lef];\n                        best = max(best, dp_up[i-1][lef]);\n                    }\n                    dp_up[i][j] = max(dp_up[i][j], best);\n                }\n                best = 0;\n                sum = accumulate(fishes[i].begin(), fishes[i].end(), 0LL);\n                for (int j = sz-1, lef = states[i-1].size(); j >= 0; --j) {\n                    while (lef > 0 && states[i-1][lef-1] >= states[i][j]) {\n                        --lef;\n                        best = max(best, max(dp_down[i-1][lef], dp_up[i-1][lef]) + sum);\n                    }\n                    dp_down[i][j] = max(dp_down[i][j], best-sum);\n                    sum -= fishes[i][j];\n                }\n            }\n        }\n        return max(dp_up[N][0], dp_down[N][0]);\n    }\n\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<int> x, y, w;\n        for (int i=0; i<n; i++) {\n            for (int j=0; j<n; j++) {\n                x.push_back(j);\n                y.push_back(i);\n                w.push_back(grid[i][j]);\n            }\n        }\n        return max_weights(n, n*n, x, y, w);\n    }\n};",
    "submit_ts": "1721488850",
    "subm_id": "1327435172"
}