{
    "username": "hughstudy-n",
    "submission": "class Solution {\n    private class InternalData {\n        private int len;\n        private List<Integer>[] edges;\n        private int[] zero, res;\n\n        public InternalData(int[][] _edges) {\n            len = _edges.length + 1;\n            edges = new List[len];\n            for (int i = 0; i < len; ++i) {\n                edges[i] = new ArrayList<>();\n            }\n            for (int[] e : _edges) {\n                edges[e[0]].add(e[1]);\n                edges[e[1]].add(e[0]);\n            }\n\n            zero = new int[len];\n            dfsZero(0, -1);\n\n            res = new int[len];\n        }\n\n        private int dfsZero(int cur, int pre) {\n            int initial = cur == 0 ? 0 : add(cur);\n            int tmp = 0;\n            for (int n : edges[cur]) {\n                if (n != pre) {\n                    tmp = Math.max(dfsZero(n, cur), tmp);\n                }\n            }\n            zero[cur] = initial + tmp;\n            return zero[cur];\n        }\n\n        public void findRes() {\n            findRes(0, -1, 0);\n        }\n\n        private void findRes(int cur, int pre, int lastBest) {\n            int initial = add(cur);\n            if (cur == 0) {\n                res[0] = zero[0];\n            } else {\n                res[cur] = Math.max(lastBest, zero[cur] - initial);\n            }\n            int[][] max = new int[2][2];\n            swapMax(max, pre, lastBest);\n            for (int n : edges[cur]) {\n                if (n != pre) {\n                    swapMax(max, n, zero[n]);\n                }\n            }\n            for (int n : edges[cur]) {\n                if (n != pre) {\n                    if (n == max[0][0]) {\n                        findRes(n, cur, max[1][1] + initial);\n                    } else {\n                        findRes(n, cur, max[0][1] + initial);\n                    }\n                }\n            }\n        }\n\n        private int add(int num) {\n            int initial;\n            if (num % 2 == 0) {\n                initial = 2;\n            } else {\n                initial = 1;\n            }\n            return initial;\n        }\n\n        private void swapMax(int[][] max, int num, int length) {\n            if (length > max[0][1]) {\n                max[1][0] = max[0][0];\n                max[1][1] = max[0][1];\n                max[0][0] = num;\n                max[0][1] = length;\n            } else if (length > max[1][1]) {\n                max[1][0] = num;\n                max[1][1] = length;\n            }\n        }\n    }\n\n    public int[] timeTaken(int[][] _edges) {\n        InternalData data = new InternalData(_edges);\n        data.findRes();\n        return data.res;\n    }\n}",
    "submit_ts": "1722697222",
    "subm_id": "552265027"
}