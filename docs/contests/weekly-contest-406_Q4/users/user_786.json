{
    "username": "zhe-yang-f",
    "submission": "class Solution {\n    #define ll long long\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<ll>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<ll>());\n\n        ll totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        int i = 0, j = 0;\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += 1ll*horizontalCut[i] * 1ll*verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += 1ll*verticalCut[j] * 1ll*horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n\n        // \u5904\u7406\u5269\u4f59\u7684\u6c34\u5e73\u5207\u5272\n        while (i < horizontalCut.size()) {\n            totalCost += 1ll*horizontalCut[i] * 1ll*verticalPieces;\n            horizontalPieces++;\n            i++;\n        }\n\n        // \u5904\u7406\u5269\u4f59\u7684\u5782\u76f4\u5207\u5272\n        while (j < verticalCut.size()) {\n            totalCost += 1ll*verticalCut[j] * 1ll*horizontalPieces;\n            verticalPieces++;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925537",
    "subm_id": "546440153"
}