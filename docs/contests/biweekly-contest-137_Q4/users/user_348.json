{
    "username": "vvk20",
    "submission": "class Solution {\n    public long max = Long.MIN_VALUE;\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        List<List<Integer>> map = new ArrayList<>(m*n);\n        for(int i=0; i<m; ++i){\n            for(int j=0; j<n; ++j){\n                map.add(new ArrayList<Integer>(3));\n                List<Integer> mapList = map.get(map.size()-1);\n                mapList.add(board[i][j]);\n                mapList.add(i);\n                mapList.add(j);\n            }\n        }\n        Collections.sort(map, new Comparator<List<Integer>>(){\n            @Override\n            public int compare(List<Integer> a, List<Integer> b){\n                return b.get(0) - a.get(0);\n            }\n        });\n        Set<Integer> rows = new HashSet<>();\n        Set<Integer> cols = new HashSet<>();\n        /*long sum = 0;\n        long count = 0;\n        for(List<Integer> lst: map){\n            if(!rows.contains(lst.get(1)) && !cols.contains(lst.get(2))){\n                count++;\n                sum+=lst.get(0);\n                rows.add(lst.get(1));\n                cols.add(lst.get(2));\n                if(count >= 3){\n                    break;\n                }\n            }\n        }*/\n        dfs(0, 0, 0, map, rows, cols);\n\n        return max;\n    }\n    public void dfs(int idx, long cur, long total, List<List<Integer>> map, Set<Integer> rows, Set<Integer> cols){\n        if(total == 3){\n            if(cur > max){\n                max = cur;\n            }\n            return;\n        }\n        if(idx >= map.size()){\n            return;\n        }\n        long value = map.get(idx).get(0);\n\n        if(total == 2 && cur + value < max){\n            return;\n        }\n        if(total == 1 && cur + value * 2 < max){\n            return;\n        }\n        //Pick\n        int row = map.get(idx).get(1);\n        int col = map.get(idx).get(2);\n        if(!rows.contains(row) && !cols.contains(col)){\n            rows.add(row);\n            cols.add(col);\n            dfs(idx+1, cur+value, total+1, map, rows, cols);\n            rows.remove(row);\n            cols.remove(col);\n        }\n\n        //Dont pick\n        dfs(idx+1, cur, total, map, rows, cols);\n\n    }\n}",
    "submit_ts": "1723910203",
    "subm_id": "1359221227"
}