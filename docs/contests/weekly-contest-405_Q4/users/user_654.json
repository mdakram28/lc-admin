{
    "username": "_PushkaR",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int val;\n\n    TrieNode() : val(0) {}\n};\n\n\nTrieNode* root;\n\nvoid insert(const string& word, int val) {\n    TrieNode* node = root;\n    for (char c : word) {\n        if (node->children.find(c) == node->children.end()) {\n            node->children[c] = new TrieNode();\n        }\n        node = node->children[c];\n    }\n    if(node->val != 0){\n        node->val = min(node->val, val);\n    }\n    else {\n        node->val = val;\n    }\n}\n\nint dfs(TrieNode* node, const string& s, int idx, vector<int>& dp) {\n        if (idx == s.size()) return 0;\n        if (dp[idx] != -1) return dp[idx];\n\n        int min_cost = INT_MAX;\n        TrieNode* current = node;\n        for (int i = idx; i < s.size(); ++i) {\n            if (current->children.find(s[i]) == current->children.end()) {\n                break;\n            }\n            current = current->children[s[i]];\n            if (current->val != 0) {\n                int cost_to_end = dfs(root, s, i + 1, dp);\n                if (cost_to_end != INT_MAX) {\n                    min_cost = min(min_cost, current->val + cost_to_end);\n                }\n            }\n        }\n\n        dp[idx] = min_cost;\n        return dp[idx];\n    }\n\nclass Solution {\npublic:\n    int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n        root = new TrieNode();\n        int n = words.size();\n        int m = s.length();\n        for (int i=0;i<n;i++) {\n            insert(words[i], costs[i]);\n        }\n        \n        vector<int> dp(s.size(), -1);\n        int ans = dfs(root, s, 0, dp);\n        return ans == INT_MAX ? -1 : ans;\n    }\n};",
    "submit_ts": "1720322921",
    "subm_id": "1312362659"
}