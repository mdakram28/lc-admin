{
    "username": "wanderingCicada",
    "submission": "class Trie:\n    def __init__(self):\n        self.lookup = {}\n    \n    def add(self, word, cost):\n        curr = self.lookup\n        for index, w in enumerate(word):\n            if w not in curr:\n                curr[w] = {}\n            curr = curr[w]\n            if index == len(word) - 1:\n                curr[0] = min(curr.get(0, cost), cost)\n    \n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        #cost of target[0:End] = min(costs[0] + cost of target[len(words[0]:end)], costs[1] + cost of target[len(words[1]:end)], ...)\n        #memoize by going backwards\n        #use a trie to check if we can even match the letters (backwards?)\n        #for every range [End - 1: End], [End - 2: End] ... [1: End] .. [2: End] we'll try the above, so it'll O(t^2 + k) where t == len(target) and k == len(everything in words added up)\n        \n        trie = Trie()\n        for index, word in enumerate(words):\n            cost = costs[index]\n            trie.add(word, cost)\n        \n        memo = [-1] * len(target)\n        memo.append(0)\n        #print(trie.lookup)\n        for start in range(len(target) - 1, -1, -1):\n            bestCost = -1\n            trieMap = trie.lookup\n            for letterIndex in range(start, len(target)):\n                letter = target[letterIndex]\n                if letter not in trieMap:\n                    break\n                trieMap = trieMap.get(letter, {})\n                if 0 in trieMap:\n                    initialCost = trieMap[0]\n                    laterCost = memo[letterIndex + 1]\n                    if laterCost > -1:\n                        bestCost = min(bestCost, laterCost + initialCost)\n                        if bestCost < 0:\n                            bestCost = laterCost + initialCost\n            memo[start] = bestCost\n        #print(memo)\n        return memo[0]\n                \n                \n                \n                ",
    "submit_ts": "1720322099",
    "subm_id": "1312340627"
}