{
    "username": "yashsinghbhadauria05",
    "submission": "class SegmentTree {\n    class Node {\n    public:\n        int lazy;\n        int sum;\n        Node() : lazy(-1), sum(0) {}  \n    };\n\n    vector<Node> t;\n    int n;\n\n    void build(const vector<int>& arr, int id, int l, int r) {\n        if (l == r) {\n            t[id].sum = arr[l];\n            return;\n        }\n        int mid = (l + r) / 2;\n        build(arr, id * 2, l, mid);\n        build(arr, id * 2 + 1, mid + 1, r);\n        t[id] = merge(t[id * 2], t[id * 2 + 1]);\n    }\n\n    Node merge(Node a, Node b) {\n        Node ans;\n        ans.sum = a.sum + b.sum;\n        return ans;\n    }\n\n    void push(int id, int l, int r) {\n        if (t[id].lazy != -1) {\n            t[id].sum = (r - l + 1) * t[id].lazy;  \n            if (l != r) {\n                t[id * 2].lazy = t[id].lazy;\n                t[id * 2 + 1].lazy = t[id].lazy;\n            }\n            t[id].lazy = -1;\n        }\n    }\n\n    void update(int id, int l, int r, int ul, int ur, int val) {\n        push(id, l, r);\n        if (ul > r || ur < l)\n            return;\n        if (ul <= l && ur >= r) {\n            t[id].lazy = val;\n            push(id, l, r);\n            return;\n        }\n        int mid = (l + r) / 2;\n        update(id * 2, l, mid, ul, ur, val);\n        update(id * 2 + 1, mid + 1, r, ul, ur, val);\n        t[id] = merge(t[id * 2], t[id * 2 + 1]);\n    }\n\n    int query(int id, int l, int r, int ql, int qr) {\n        push(id, l, r);\n        if (ql > r || qr < l)\n            return 0;\n        if (ql <= l && qr >= r)\n            return t[id].sum;\n        int mid = (l + r) / 2;\n        int left_sum = query(id * 2, l, mid, ql, qr);\n        int right_sum = query(id * 2 + 1, mid + 1, r, ql, qr);\n        return left_sum + right_sum;\n    }\n\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        t.resize(4 * n);\n        build(arr, 1, 0, n - 1);\n    }\n\n    void update(int l, int r, int val) {\n        update(1, 0, n - 1, l, r, val);\n    }\n\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> l(n, 1);\n        SegmentTree seg(l);\n        vector<int> ans;\n        for (int i = 0; i < queries.size(); i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            seg.update(a + 1, b - 1, 0); \n            int c = seg.query(0, n - 1);\n            ans.push_back(c - 1);  \n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742366",
    "subm_id": "1343767281"
}