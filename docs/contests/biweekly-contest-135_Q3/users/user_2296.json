{
    "username": "jesse45",
    "submission": "class Solution {\n    private static final int INF = 0x3fffffff;\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        int half = n / 2;\n        Map<Integer, Integer> diffCounter = new HashMap<>();\n        for (int i = 0; i < half; i++) {\n            int diff = Math.abs(nums[i] - nums[n - i - 1]);\n            diffCounter.put(diff, diffCounter.getOrDefault(diff, 0) + 1);\n        }\n        int[] maxDiffs = new int[half];\n        for (int i = 0; i < half; i++) {\n            maxDiffs[i] = Math.max(Math.max(nums[i], Math.abs(k - nums[i])), Math.max(nums[n - 1 - i], Math.abs(k - nums[n - 1 - i])));\n        }\n        Arrays.sort(maxDiffs);\n        int all = half;\n        int ans = INF;\n        for (int x = 0; x <= k; x++) {\n            // \u5de6\u8fb9\u754c\n            int index = binarySearch(maxDiffs, x);\n            int matchCount = half - index;\n            if (index == -1) {\n                matchCount = 0;\n            }\n            int diffCount = diffCounter.getOrDefault(x, 0);\n            int res = matchCount - diffCount + (all - matchCount) * 2;\n            ans = Math.min(ans, res);\n        }\n        return ans;\n    }\n\n    private int binarySearch(int[] maxDiffs, int target) {\n        int l = 0;\n        int r = maxDiffs.length - 1;\n        if (maxDiffs[r] < target) return -1;\n        while (l < r) {\n            int mid = l + ((r - l) >> 1);\n            if (maxDiffs[mid] >= target) {\n                r = mid;\n            } else {\n                l = mid + 1;\n            }\n        }\n        return l;\n    }\n}",
    "submit_ts": "1721490611",
    "subm_id": "548323573"
}