{
    "username": "randytanpty",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        // start, maxEnd\n        TreeMap<Integer, Integer> tm = new TreeMap<>();\n        int[] ans = new int[queries.length];\n        n--;\n        for (int i = 0; i < queries.length; ++i) {\n            int u = queries[i][0];\n            int v = queries[i][1];\n            int offset = helper(tm, u, v);\n            // System.out.print(\"off\");System.out.println(offset);\n            n -= offset;\n            ans[i] = n;\n        }\n        return ans;\n    }\n\n    private int helper(TreeMap<Integer, Integer> tm, int u, int v) {\n        int ans = 0;\n        if (tm.containsKey(u)) {\n            int rsf = tm.get(u);\n            if (v <= rsf) return 0;\n\n            Integer next = tm.ceilingKey(u);\n            if (next != null && next < v) {\n                // System.out.println(next);\n                int orig = 0;   \n                while (next != null && next < v) {\n                    orig += tm.get(next) - next - 1;\n                    tm.remove(next);\n                    // System.out.println(tm);\n                    next = tm.ceilingKey(next);\n                    // System.out.println(next);\n                }\n                tm.put(u, v);\n                int cur = v - u;\n                // System.out.println(tm);\n                // System.out.println(cur);\n                // System.out.println(orig);\n                return cur - orig - 1;\n            }\n\n            return -1;\n\n\n            // ans = v - rsf;\n            // tm.put(u, v);\n            // return ans;\n        } else {\n            Integer prev = tm.floorKey(u);\n            if (prev != null && tm.get(prev) > u) return 0;\n            //\n            // Integer next = tm.ceilingKey(u);\n            // if (next != null && tm.get(next) < v) {\n            //     int orig = tm.get(next) - next;\n            //     int cur = v - u;\n            //     tm.remove(next);\n            //     tm.put(u, v);\n            //     return cur - orig;\n            // }\n\n            Integer next = tm.ceilingKey(u);\n            if (next != null && next < v) {\n                // System.out.println(next);\n                int orig = 0;   \n                while (next != null && next < v) {\n                    orig += tm.get(next) - next - 1;\n                    tm.remove(next);\n                    // System.out.println(tm);\n                    next = tm.ceilingKey(next);\n                    // System.out.println(next);\n                }\n                tm.put(u, v);\n                int cur = v - u;\n                // System.out.println(tm);\n                // System.out.println(cur);\n                // System.out.println(orig);\n                return cur - orig - 1;\n            }\n\n\n\n\n            //\n            tm.put(u, v);\n            // System.out.println(\"-------\");System.out.println(u);System.out.println(v);System.out.println(\"-------\");\n            return v - u - 1; \n        }\n    }\n}",
    "submit_ts": "1722743646",
    "subm_id": "1343796564"
}