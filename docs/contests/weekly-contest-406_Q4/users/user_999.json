{
    "username": "Kyouma007",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        long long rowFact = 1, colFact = 1; \n        priority_queue<pair<int, int>> pq; \n        for (auto elem: horizontalCut){\n            pq.push({elem, 0}); // 0 for horizontal cuts\n        }\n        for (auto elem: verticalCut){\n            pq.push({elem, 1}); // 1 for vertical cuts\n        }\n        \n        long long ans = 0; \n        while (!pq.empty()){\n            auto top = pq.top(); \n            pq.pop(); \n            long long val = top.first; \n            if (top.second == 0){\n                // perform horizontal cut\n                rowFact++; \n                ans += (colFact*val);\n            }else{\n                colFact++; \n                ans += (rowFact*val);\n            }\n        }\n        \n        return ans; \n        \n    }\n};",
    "submit_ts": "1720925985",
    "subm_id": "1320272394"
}