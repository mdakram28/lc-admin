{
    "username": "vvi2ardly-antonellictm",
    "submission": "class SegmentTree{\npublic:\n    vector<int> tree;\n    vector<int> lazy;\n    int n;\n    \n    SegmentTree(int size) {\n        n = size;\n        tree.resize(4 * n, 1);  // Initialize tree with 1\n        lazy.resize(4 * n, -1);  // Initialize lazy array with -1 indicating no pending updates\n        build(0, 0, n - 1);\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = 1;  // Initialize array with 1\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n       void applyLazy(int node, int start, int end) {\n        if (lazy[node] != -1) {\n            tree[node] = (end - start + 1) * lazy[node];\n            if (start != end) {\n                lazy[2 * node + 1] = lazy[node];\n                lazy[2 * node + 2] = lazy[node];\n            }\n            lazy[node] = -1;\n        }\n    }\n\n    void updateRange(int node, int start, int end, int L, int R) {\n        applyLazy(node, start, end);\n\n        if (start > end || start > R || end < L)\n            return;\n\n        if (start >= L && end <= R) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = 0;\n                lazy[2 * node + 2] = 0;\n            }\n            return;\n        }\n\n        int mid = (start + end) / 2;\n        updateRange(2 * node + 1, start, mid, L, R);\n        updateRange(2 * node + 2, mid + 1, end, L, R);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int queryRange(int node, int start, int end, int L, int R) {\n        applyLazy(node, start, end);\n\n        if (start > end || start > R || end < L)\n            return 0;\n\n        if (start >= L && end <= R)\n            return tree[node];\n\n        int mid = (start + end) / 2;\n        int sumLeft = queryRange(2 * node + 1, start, mid, L, R);\n        int sumRight = queryRange(2 * node + 2, mid + 1, end, L, R);\n        return sumLeft + sumRight;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        SegmentTree segTree(n);\n        \n        int m=queries.size();\n        vector<int> ans(m);\n        \n        for(int i=0;i<m;i++){\n            int start=queries[i][0];\n            int end=queries[i][1];\n            segTree.updateRange(0,0,n-1,start+1,end-1);\n            int res=segTree.queryRange(0,0,n-1,0,n-1)-1;\n            ans[i]=res;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1722743450",
    "subm_id": "552350867"
}