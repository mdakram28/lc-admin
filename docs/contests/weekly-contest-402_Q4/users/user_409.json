{
    "username": "Java_Programmer_Ketan",
    "submission": "class Solution{\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        long[] sa = new long[n];\n        for(int i=1;i<n-1;i++){\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1]) sa[i]++;\n        }\n        SumSegmentTreeClean sg = new SumSegmentTreeClean(sa);\n        List<Integer> res = new ArrayList<>();\n        for(int[] Q: queries){\n            if(Q[0] == 1){\n                if(Q[1] == Q[2]) res.add(0);\n                else{\n                    res.add((int) sg.getSum(Q[1]+1,Q[2]-1));\n                }\n            }\n            else{\n                int index = Q[1];\n                int prev = index-1;\n                int next = index+1;\n                int val = Q[2];\n                nums[index] = val;\n                if(index!=0 && index!=n-1 && nums[index]>nums[index+1] && nums[index]>nums[index-1]){\n                    sg.update(index,1);\n                }\n                else {\n                    sg.update(index,0);\n                }\n                if(prev>0 && prev<n-1 && nums[prev]>nums[prev+1] && nums[prev]>nums[prev-1]){\n                    sg.update(prev,1);\n                }\n                else {\n                    sg.update(prev,0);\n                }\n                if(next>0 && next<n-1 && nums[next]>nums[next+1] && nums[next]>nums[next-1]){\n                    sg.update(next,1);\n                }\n                else {\n                    sg.update(next,0);\n                }\n            }\n        }\n        return res;\n    }\n}\nclass SumSegmentTreeClean{\n    long[] sa;\n    int n;\n\n    public SumSegmentTreeClean(long[] arr){\n        this.n = arr.length;\n        int height = (int)Math.ceil(Math.log(n)/Math.log(2));\n        int size = 2*(1<<height)-1;\n        this.sa = new long[size];\n        constructor(0,n-1,0,arr);\n    }\n    private long constructor(int ss, int se, int si, long[] arr){\n        if(ss == se) return sa[si] = arr[ss];\n        int mid = (ss+se)/2;\n        return sa[si] = constructor(ss,mid,2*si+1,arr) + constructor(mid+1,se,2*si+2,arr);\n    }\n    public long getSum(int left, int right){\n        return sum(0,n-1,0,left,right);\n    }\n    private long sum(int ss, int se, int si, int qs, int qe){\n        if(qe<ss || se<qs) return 0L;\n        if(qs<=ss && se<=qe) return sa[si];\n        int mid = (ss+se)/2;\n        return sum(ss,mid,2*si+1,qs,qe)+sum(mid+1,se,2*si+2,qs,qe);\n    }\n    public void update(int index, long val){\n        updateSum(0,n-1,0,index,val);\n    }\n    private long updateSum(int ss, int se, int si, int index, long val){\n        if(index>se || index<ss) return sa[si];\n        if(index == se && index == ss) return sa[si] = val;\n        int mid = (ss+se)/2;\n        return sa[si] = updateSum(ss,mid,2*si+1,index,val)+updateSum(mid+1,se,2*si+2,index,val);\n    }\n}",
    "submit_ts": 1718507183.0
}