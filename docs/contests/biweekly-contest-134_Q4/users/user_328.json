{
    "username": "felixhuang07",
    "submission": "template<class S, S (*op)(S, S)>\nstruct sparse_table {\npublic:\n\tsparse_table() {}\n\texplicit sparse_table(const std::vector<S>& a) {\n\t\tn = (int) a.size();\n\t\tint max_log = std::__lg(n) + 1;\n\t\tmat.resize(max_log);\n\t\tmat[0] = a;\n\t\tfor(int j = 1; j < max_log; ++j) {\n\t\t\tmat[j].resize(n - (1 << j) + 1);\n\t\t\tfor(int i = 0; i <= n - (1 << j); ++i) {\n\t\t\t\tmat[j][i] = op(mat[j - 1][i], mat[j - 1][i + (1 << (j - 1))]);\n\t\t\t}\n\t\t}\n\t}\n\n\tS prod(int from, int to) const {\n\t\tassert(0 <= from && from <= to && to <= n - 1);\n\t\tint lg = std::__lg(to - from + 1);\n\t\treturn op(mat[lg][from], mat[lg][to - (1 << lg) + 1]);\n\t}\n\nprivate:\n\tint n;\n\tstd::vector<std::vector<S>> mat;\n};\n\nusing S = int;\n\nS op(S a, S b) { return a & b; }\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& a, int k) {\n        int n = a.size();\n        sparse_table<S, op> st(a);\n        long long ans = 0;\n        for(int i = 0; i < n; i++) {\n            if(a[i] < k) {\n                continue;\n            }\n            if(st.prod(i, n - 1) > k) {\n                continue;\n            }\n            int l = i, start = i;\n            if(a[i] > k) {\n                int ng = i, ok = n;\n                while(ok - ng > 1) {\n                    int mid = (ng + ok) / 2;\n                    if(st.prod(i, mid) > k) {\n                        ng = mid;\n                    } else {\n                        ok = mid;\n                    }\n                }\n                l = ng;\n                start = ok;\n            }\n            int r = n;\n            while(r - l > 1) {\n                int mid = (l + r) / 2;\n                if(st.prod(i, mid) >= k) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            ans += r - start;\n            // cout << i << \" \" << start << \" \" << r << endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278002",
    "subm_id": "1311689876"
}