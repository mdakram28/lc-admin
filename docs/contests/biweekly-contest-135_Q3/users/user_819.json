{
    "username": "tsaraf",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& a, int k) {\n        int n = a.size();\n        map<int, int > zeroOpFreq;\n        map<int, int > oneOpFreq;\n        \n        for (int i = 0; i < n / 2; ++i) {\n            int x = a[i];\n            int y = a[n - i - 1];\n            ++zeroOpFreq[abs(x - y)];\n            ++oneOpFreq[max({x, y, k - x, k - y})];\n        }\n        \n        // prefix sum \n        for (auto it = oneOpFreq.begin(); it != oneOpFreq.end(); ++it) {\n            if (it == oneOpFreq.begin()) { continue; }\n            auto jt = it;\n            --jt;\n            it->second = it->second + jt->second;\n            \n        }\n        \n        int ans = n;\n        for (auto [value, freq]: zeroOpFreq) {\n            // how many array positions are such that one op will be required to reach value\n            // all the positions where the max range is < value unme 2 ops lgenge and >= value me 1 ops\n            \n            int twoOpsFreq = 0;\n            auto it = oneOpFreq.lower_bound(value);\n            if (it != oneOpFreq.begin()) {\n                --it;\n                twoOpsFreq = it->second;\n            }\n            ans = min(ans, twoOpsFreq * 2 + (n / 2 - freq - twoOpsFreq));\n        }\n        \n        return ans;\n        \n    }\n};\n\n/*\nx, y -> [0, max(x, k - x)] U [0, max(y, k - y)] in 1 ops is possible\n|y - x| is possible in 0 ops\n2 ops for everything else\n*/",
    "submit_ts": "1721488500",
    "subm_id": "1327424294"
}