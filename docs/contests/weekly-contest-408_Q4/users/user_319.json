{
    "username": "leetcode_3604",
    "submission": "class Solution {\npublic:\n    int fa[10010];\n    typedef long long LL;\n    LL dis(LL x1, LL x2, LL y1, LL y2) {\n        return (x2-x1) * (x2-x1) + (y2-y1) * (y2-y1);\n    }\n    int find(int x){\n        return fa[x] = fa[x] == x? x: find(fa[x]);\n    }\n    void unionf(int a, int b) {\n        \n       // printf(\"union: %d %d\\n\", a, b);\n         a = find(a);\n         b = find(b);\n        fa[b] = a;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        for(int i = 0; i < n+4; ++i) fa[i] = i;\n        for(int i = 0; i < n; ++i) {\n            for(int j = i+1; j < n; ++j) {\n                LL a = dis(circles[i][0], circles[j][0], circles[i][1], circles[j][1]);\n                LL b = (1LL*circles[i][2] + circles[j][2]) * 1LL * (circles[i][2] + circles[j][2]);\n                if(a <= b) {\n                    unionf(i, j);\n                    // int fa = find(i);\n                    // int fb = find(j);\n                    // fa[fb] = fa;\n                }\n            }\n        }\n        for(int i = 0; i < n; ++i) {\n            LL r = circles[i][2];\n            if(circles[i][1] <= r) {\n                unionf(i, n);\n            }\n            if(circles[i][0] + r >= X) {\n                unionf(i, n+1);\n            }\n            if(circles[i][1] + r >= Y) {\n                unionf(i, n+2);\n            }\n            if(circles[i][0] - r <= 0) {\n                unionf(i, n+3);\n            }\n        }\n        if(find(n) == find(n+2) || find(n) == find(n+3) || find(n+1) == find(n+2) || find(n+1) == find(n+3)) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722135627",
    "subm_id": "1335708156"
}