{
    "username": "uJMQbJwlnP",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        int minChanges = INT_MAX;\n        map<int, int> differenceCount;\n        int right = n - 1;\n        int maxCount = 0;\n        int maxDifference = 0;\n\n        for (int i = 0; i < n / 2; i++) {\n            int diff = abs(nums[i] - nums[right]);\n            differenceCount[diff]++;\n            if (maxCount < differenceCount[diff]) {\n                maxCount = differenceCount[diff];\n                maxDifference = diff;\n            }\n            right--;\n        }\n\n        right = n - 1;\n        vector<int> possibleChanges(n / 2, 0);\n\n        for (int i = 0; i < n / 2; i++) {\n            int maxValue = max(nums[i], nums[right]);\n            possibleChanges[i] = max(maxValue, k - maxValue);\n            possibleChanges[i] = max({possibleChanges[i], nums[i], nums[right], k - nums[i], k - nums[right]});\n            right--;\n        }\n\n        sort(possibleChanges.begin(), possibleChanges.end());\n\n        for (auto it : differenceCount) {\n            int diffValue = it.first;\n            int count = it.second;\n            int lessThanCount = lower_bound(possibleChanges.begin(), possibleChanges.end(), diffValue) - possibleChanges.begin();\n            int changes = 2 * lessThanCount + (n / 2 - lessThanCount - count);\n            minChanges = min(minChanges, changes);\n        }\n\n        return minChanges;\n    }\n};\n",
    "submit_ts": "1721488512",
    "subm_id": "1327424637"
}