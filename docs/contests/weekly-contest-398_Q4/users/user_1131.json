{
    "username": "RX_coder",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    ll solve(ll curr,ll jump,int &k,int consecutive,vector<map<pair<ll,ll>,ll>>&store){\n        if(curr>k+1 || curr<0)return 0;\n        \n        if(store[jump].find(make_pair(curr,consecutive)) != store[jump].end()){\n            return store[jump][{curr,consecutive}];\n        }\n        if(curr==k){\n            ll temp = 1 + solve(curr+(ll)pow(2,jump),jump+1,k,0,store);\n            if(consecutive==0)temp += solve(curr-1,jump,k,1,store);\n            return temp;\n        }\n        ll ways = 0;\n        if(consecutive==1){\n        }\n        else{\n            ways += solve(curr-1,jump,k,1,store);\n        }\n        ways += solve(curr+(ll)pow(2,jump),jump+1,k,0,store);\n        return store[jump][make_pair(curr,consecutive)] = ways;\n    }\n    int waysToReachStair(int k) {\n        vector<map<pair<ll,ll>,ll>>store(30);\n        int ans = solve(1,0,k,0,store);\n        return ans;\n        return 0;\n    }\n};",
    "submit_ts": "1716090622",
    "subm_id": "1261871604"
}