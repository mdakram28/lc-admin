{
    "username": "ntarsis30",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long n = nums.size();\n        std::vector<long long> tree(2 * n, 0);\n\n        for (long long i = 0; i < n; ++i) {\n            tree[n + i] = nums[i];\n        }\n        for (long long i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n\n        auto query = [&](long long l, long long r) {\n            long long ans = (1 << 30) - 1;\n            l += n;\n            r += n;\n            while (l < r) {\n                if (l & 1) {\n                    ans &= tree[l];\n                    ++l;\n                }\n                if (r & 1) {\n                    --r;\n                    ans &= tree[r];\n                }\n                l /= 2;\n                r /= 2;\n            }\n            return ans;\n        };\n\n        long long ans = 0;\n        for (long long i = 0; i < n; ++i) {\n            int lo = i, hi = n - 1, found = -1;\n            while (lo <= hi) {\n                int mid = (lo + hi) / 2;\n                if (query(i, mid + 1) >= k) {\n                    found = mid;\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n            if (found == -1) continue;\n            \n            lo = i, hi = n - 1;\n            int found2 = -1;\n            while (lo <= hi) {\n                int mid = (lo + hi) / 2;\n                if (query(i, mid + 1) >= k + 1) {\n                    found2 = mid;\n                    lo = mid + 1;\n                } else {\n                    hi = mid - 1;\n                }\n            }\n            if (found2 == -1) {\n                ans += found - i + 1;\n            } else {\n                ans += found - found2;\n            }\n        }\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1720281333",
    "subm_id": "1311821280"
}