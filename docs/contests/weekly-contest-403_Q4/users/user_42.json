{
    "username": "Ayanerru",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        def find_mx(rl, rr, cl, cr):\n            r_mn = c_mn= 10 ** 9\n            r_mx = c_mx = 0\n            n, m = len(grid), len(grid[0])\n            has_one = False\n            for i in range(rl, rr+1):\n                for j in range(cl, cr+1):\n                    if grid[i][j] == 1:\n                        has_one = True\n                        r_mn = min(r_mn, i)\n                        r_mx = max(r_mx, i)\n                        c_mn = min(c_mn, j)\n                        c_mx = max(c_mx, j)\n            if not has_one:\n                return 0\n            return (r_mx - r_mn + 1) * (c_mx - c_mn + 1)\n        \n        @functools.lru_cache(None)\n        def dfs(r1, c1, r2, c2, remain):\n            if remain == 1:\n                return find_mx(r1, r2, c1, c2)\n            elif remain == 2:\n                # horizon split\n                res = (r2 - r1 + 1) * (c2 - c1 + 1)\n                for rr in range(r1+1, r2+1):\n                    res = min(res, dfs(r1, c1, rr-1, c2, 1) + dfs(rr, c1, r2, c2, 1))                    \n                # vert split\n                for cc in range(c1+1, c2+1):\n                    res = min(res, dfs(r1, c1, r2, cc-1, 1) + dfs(r1, cc, r2, c2, 1)) \n                return res\n                \n                \n            elif remain == 3:\n# horizon split\n                res = (r2 - r1 + 1) * (c2 - c1 + 1)\n                for rr in range(r1+1, r2+1):\n                    res = min(res, dfs(r1, c1, rr-1, c2, 2) + dfs(rr, c1, r2, c2, 1)) \n                    res = min(res, dfs(r1, c1, rr-1, c2, 1) + dfs(rr, c1, r2, c2, 2)) \n                # vert split\n                for cc in range(c1+1, c2+1):\n                    res = min(res, dfs(r1, c1, r2, cc-1, 2) + dfs(r1, cc, r2, c2, 1))\n                    res = min(res, dfs(r1, c1, r2, cc-1, 1) + dfs(r1, cc, r2, c2, 2))\n                return res\n        \n        return dfs(0, 0, n-1, m-1, 3)",
    "submit_ts": 1719111820.0
}