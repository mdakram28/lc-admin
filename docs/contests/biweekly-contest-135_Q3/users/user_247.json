{
    "username": "alexlin87",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int minChanges(int[] a, int k) {\n        FenwickTree fenwickTree = new FenwickTree(k + 5);\n        int[] cnt = new int[k + 5];\n        for(int i = 0, j = a.length - 1; i < j; i++, j--) {\n            int x = Math.abs(a[i] - a[j]) + 1;\n            cnt[x]++;\n            int y = x;\n            y = Math.max(y, Math.max(a[j], k - a[j]) + 1);\n            y = Math.max(y, Math.max(a[i], k - a[i]) + 1);\n            fenwickTree.adjust(y, 1);\n        }\n        int ans = Integer.MAX_VALUE;\n        for(int i = 0, j = a.length - 1; i < j; i++, j--) {\n            int x = Math.abs(a[i] - a[j]) + 1;\n            int s = 2 * fenwickTree.rangeSumQuery(1, x - 1);\n            s += fenwickTree.rangeSumQuery(x, k + 4);\n            s -= cnt[x];\n            ans = Math.min(ans, s);\n        }\n        return ans;\n    }\n}\nclass FenwickTree {\n    private int[] ft;\n\n    /*\n        n is the largest integer value among all the input integers\n     */\n    public FenwickTree(int n) {\n        ft = new int[n];\n    }\n\n    /*\n        query the sum in range [l, r]\n     */\n    public int rangeSumQuery(int l, int r) {\n        if(l > r) return 0;\n        return rangeSumQuery(r) - (l == 1 ? 0 : rangeSumQuery(l - 1));\n    }\n\n    /*\n        query the sum in range[1, r]\n     */\n    private int rangeSumQuery(int r) {\n        int sum = 0;\n        for(; r > 0; r -= leastSignificantOne(r)) {\n            sum += ft[r];\n        }\n        return sum;\n    }\n\n    /*\n        adjust the value of index k by diff\n     */\n    public void adjust(int k, int diff) {\n        for(; k < ft.length; k += leastSignificantOne(k)) {\n            ft[k] += diff;\n        }\n    }\n\n    private int leastSignificantOne(int i) {\n        return i & (-i);\n    }\n}\n",
    "submit_ts": "1721487516",
    "subm_id": "1327391672"
}