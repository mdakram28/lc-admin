{
    "username": "710814107",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<pair<int, int>> word_ends;\n\n    TrieNode() {\n        children = vector<TrieNode*>(26, nullptr);\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int char_idx = c - 'a';\n            if (!node->children[char_idx]) {\n                node->children[char_idx] = new TrieNode();\n            }\n            node = node->children[char_idx];\n        }\n        node->word_ends.push_back(make_pair(index, cost));\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        int inf = numeric_limits<int>::max();\n        vector<int> dp(n + 1, inf);\n        dp[0] = 0;\n\n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            trie->insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == inf) {\n                continue;\n            }\n\n            TrieNode* node = trie->root;\n            for (int j = i; j < n; ++j) {\n                int char_idx = target[j] - 'a';\n                if (!node->children[char_idx]) {\n                    break;\n                }\n                node = node->children[char_idx];\n                for (auto& pair : node->word_ends) {\n                    int idx = pair.first;\n                    int cost = pair.second;\n                    int word_len = words[idx].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + cost);\n                    }\n                }\n\n                bool has_children = false;\n                for (auto child : node->children) {\n                    if (child) {\n                        has_children = true;\n                        break;\n                    }\n                }\n\n                if (!has_children) {\n                    break;\n                }\n            }\n        }\n        int result = (dp[n] != inf) ? dp[n] : -1;\n        delete trie;\n        return result;\n    }\n};",
    "submit_ts": "1720324528",
    "subm_id": "1312401715"
}