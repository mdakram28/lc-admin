{
    "username": "gjp4_",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs){\n        struct TrieNode {\n            TrieNode* nxt[26]{};\n            int cst = -1;\n        };\n        auto build = [&](){\n            TrieNode* root = new TrieNode();\n            for(int i = 0; i < words.size(); i++){\n                TrieNode* cur = root;\n                for(auto c : words[i]){\n                    if(!cur->nxt[c - 'a'])cur->nxt[c - 'a'] = new TrieNode();\n                    cur = cur->nxt[c - 'a'];\n                }\n                if(cur->cst == -1)cur->cst = costs[i];\n                else cur->cst = min(cur->cst, costs[i]);\n            }\n            return root;\n        };\n        int n = target.length();\n        vector<long long> dp(n+1, 1e18);\n        dp[0] = 0;\n        TrieNode* root = build();\n        for(int i = 0; i < n; i++){\n            if(dp[i] == 1e18) continue;\n            TrieNode* cur = root;\n            for(int j = i; j < n; j++){\n                if(!cur->nxt[target[j] - 'a']) break;\n                cur = cur->nxt[target[j] - 'a'];\n                if(cur->cst != -1)dp[j + 1] = min(dp[j + 1], dp[i] + cur->cst);\n            }\n        }\n\n        return dp[n] == 1e18 ? -1: dp[n];\n    }\n};",
    "submit_ts": "1720322908",
    "subm_id": "1312362313"
}