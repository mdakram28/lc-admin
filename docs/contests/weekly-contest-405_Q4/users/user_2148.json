{
    "username": "somyanaiwal023",
    "submission": "class TrieNode {\n  Map<String, TrieNode> children = {};\n  List<int> costs = [];\n\n  void insert(String word, int cost) {\n    TrieNode node = this;\n    for (int i = 0; i < word.length; i++) {\n      String char = word[i];\n      if (!node.children.containsKey(char)) {\n        node.children[char] = TrieNode();\n      }\n      node = node.children[char]!;\n    }\n    node.costs.add(cost);\n  }\n}\n\nclass Solution {\n  int minimumCost(String target, List<String> words, List<int> costs) {\n    int n = target.length;\n    List<int> dp = List.filled(n + 1, double.maxFinite.toInt());\n    dp[0] = 0;\n\n    // Build the Trie\n    TrieNode trie = TrieNode();\n    for (int i = 0; i < words.length; i++) {\n      trie.insert(words[i], costs[i]);\n    }\n\n    // DP to find minimum cost\n    for (int i = 0; i < n; i++) {\n      if (dp[i] == double.maxFinite.toInt()) continue;\n\n      TrieNode node = trie;\n      for (int j = i; j < n; j++) {\n        String char = target[j];\n        if (!node.children.containsKey(char)) break;\n\n        node = node.children[char]!;\n        for (int cost in node.costs) {\n          dp[j + 1] = dp[j + 1] > dp[i] + cost ? dp[i] + cost : dp[j + 1];\n        }\n      }\n    }\n\n    return dp[n] == double.maxFinite.toInt() ? -1 : dp[n];\n  }\n}",
    "submit_ts": "1720322899",
    "subm_id": "1312362085"
}