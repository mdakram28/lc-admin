{
    "username": "naman_dwivedi",
    "submission": "#define ll long long\n\nstruct segmenttree{\n    vector<ll>v;\n    vector<pair<ll,ll>>tree;\n    ll n;\n    segmenttree(ll nn,vector<ll>vec)\n    {\n        v=vec;\n        n=nn;\n        tree.resize(4*n);\n        build(1,0,n-1);\n    }\n \n    pair<ll,ll> combine(pair<ll,ll> a,pair<ll,ll> b)\n    {\n        if(a.first<b.first) return a;\n        else return b;\n    }\n\n    void build(ll node,ll start,ll end)\n    {\n        if(start==end)\n        {\n            tree[node]={v[start],start};\n            return;\n        }\n        ll mid=(start+end) >> 1;\n        build(2*node,start,mid);\n        build(2*node+1,mid+1,end);\n        tree[node]=combine(tree[2*node],tree[2*node+1]);\n    }\n\n    void update(ll node,ll start,ll end,ll ind,ll val)\n    {\n        if(start==end)\n        {\n            v[start]=val;\n            tree[node]={v[start],start};\n            return;\n        }\n        ll mid=(start+end) >> 1;\n        if(ind<=mid) update(2*node,start,mid,ind,val);\n        else update(2*node+1,mid+1,end,ind,val);\n        tree[node]=combine(tree[2*node],tree[2*node+1]);\n    }\n\n    void update(ll ind,ll val)\n    {\n        update(1,0,n-1,ind,val);\n    }\n \n    pair<ll,ll> query(ll node,ll start,ll end,ll l,ll r)\n    {\n        if(start>r || end<l) return {1e12,-1};\n        else if(start>=l && end<=r) return tree[node];\n        ll mid=(start+end) >> 1;\n        pair<ll,ll> left=query(2*node,start,mid,l,r);\n        pair<ll,ll> right=query(2*node+1,mid+1,end,l,r);\n        return combine(left,right);\n    }\n\n    pair<ll,ll> query(ll l,ll r)\n    {\n        return query(1,0,n-1,l,r);\n    }\n};\n\nclass Solution {\n    \n    void findans(int l,int r,vector<long long>& diff,segmenttree& seg,ll& ans,ll curr)\n    {\n        // cout<<l<<\" \"<<r<<\" \"<<ans<<\" \"<<curr<<\"\\n\";\n        if(l<=r)\n        {\n            pair<ll,ll>p=seg.query(l,r);\n            int ind=p.second;\n            ans+=p.first-curr;\n            findans(l,ind-1,diff,seg,ans,p.first);\n            findans(ind+1,r,diff,seg,ans,p.first);\n        }\n    }\n    \npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n=nums.size();\n        vector<long long>vv;\n        for(int i=0;i<n;i++)\n        {\n            if(target[i]>nums[i]) vv.emplace_back(1);\n            else vv.emplace_back(0);\n        }\n        vector<long long>diff;\n        for(int i=0;i<n;i++)\n        {\n            if(target[i]>nums[i]) diff.emplace_back(target[i]-nums[i]);\n            else diff.emplace_back(nums[i]-target[i]);\n        }\n        // for(auto& it:diff) cout<<it<<\" \";\n        // cout<<\"\\n\";\n        segmenttree seg(n,diff);\n        long long ans=0;\n        int l=0,r=0;\n        for(int i=1;i<n;i++)\n        {\n            if(vv[i]==vv[i-1]) r++;\n            else\n            {\n                findans(l,r,diff,seg,ans,0);\n                // cout<<l<<\" \"<<r<<\"\\n\";\n                l=i;\n                r=i;\n            }\n        }\n        findans(l,n-1,diff,seg,ans,0);\n        // cout<<l<<\" \"<<n-1<<\"\\n\";\n        return ans;\n    }\n};\n\n// [9,2,6,10,4,8,3,4,2,3]\n// [9,5,5,1, 7,9,8,7,6,5]",
    "submit_ts": "1721531792",
    "subm_id": "1327969970"
}