{
    "username": "g_jha37",
    "submission": "#define ll long long\nclass Solution {\n    int k;\npublic:\n//     void dfs(int i, int j, bool prev_step, vector<unordered_map<int, ll>> &dp){\n//         if(i > k + 1)\n//             return;\n//         dp[j][i]++;\n        \n//         if(i * 1LL + 1LL << j <= k + 1){\n//             dfs(i + 1LL << j, j + 1, true, dp);    \n//         }\n//         if(prev_step){\n//             dfs(i - 1, j, false, dp);\n//         }\n//     }\n    \n    int memo(int i, int j, bool prev_step, vector<map<pair<int, bool>, ll>> &dp){\n        if(i < 0)\n            return 0;\n        if(auto it = dp[j].find({i, prev_step}); it != dp[j].end())\n            return it->second;\n        \n        int cnt = 0;\n        if((j > 0) && prev_step){\n            cnt = memo((1LL * i) - (1LL << (j - 1)), j - 1, true, dp);\n            cnt += memo((1LL * i) - (1LL << (j - 1)), j - 1, false, dp);\n        }\n        if(!prev_step){\n            cnt = memo(i + 1, j, true, dp);\n        }\n        \n        return dp[j][{i, prev_step}] = cnt;\n    }\n    \n    int waysToReachStair(int k) {\n        int i = 1, j = 0, jmax = log2(k + 1) + 2;\n        bool prev_step = true;\n        this->k = k;\n        // vector<unordered_map<int, ll>> dp(jmax + 1);\n        // dp[0][1] = 1;\n        // dfs(i, j, prev_step, dp);\n        \n        vector<map<pair<int, bool>, ll>> dp(jmax + 1);\n        dp[0][{1, true}] = 1;\n        int cnt = 0;\n        for(int j = 0; j <= jmax; j++){\n            // cnt += dp[j][k];\n            // cnt += dp[j][{k, true}] + dp[j][{k, false}];\n            cnt += memo(k, j, true, dp);\n            cnt += memo(k, j, false, dp);\n        }\n        \n        return cnt;\n    }\n};",
    "submit_ts": "1716089796",
    "subm_id": "1261851503"
}