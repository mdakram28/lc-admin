{
    "username": "rahul16875",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        std::map<int, std::vector<int>> differenceToValuesMap;\n        std::vector<int> valueCandidates;\n\n        int n = nums.size();\n\n        for (int i = 0; i < n / 2; ++i) {\n            int startValue = nums[i];\n            int endValue = nums[n - i - 1];\n            int difference = std::abs(startValue - endValue);\n\n            int maxCandidateValue = std::max({startValue, endValue, k - startValue, k - endValue});\n\n            differenceToValuesMap[difference].push_back(maxCandidateValue);\n            valueCandidates.push_back(maxCandidateValue);\n        }\n\n        int minChanges = n;\n        std::sort(valueCandidates.begin(), valueCandidates.end());\n\n        for (const auto& [difference, candidateValues] : differenceToValuesMap) {\n            int lowerBoundIndex = std::lower_bound(valueCandidates.begin(), valueCandidates.end(), difference) - valueCandidates.begin();\n            int totalChanges = lowerBoundIndex * 2 + (n / 2 - lowerBoundIndex);\n\n            for (const auto& candidateValue : candidateValues) {\n                if (candidateValue < difference) {\n                    totalChanges -= 2;\n                } else {\n                    totalChanges -= 1;\n                }\n            }\n\n            minChanges = std::min(minChanges, totalChanges);\n        }\n\n        return minChanges;\n    }\n};",
    "submit_ts": "1721489149",
    "subm_id": "1327444389"
}