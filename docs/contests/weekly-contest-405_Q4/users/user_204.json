{
    "username": "jay_22",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndexes; // (word index, cost)\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->wordIndexes.push_back({index, cost});\n    }\n};\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLen = target.length();\n    vector<int> dp(targetLen + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i, costs[i]);\n    }\n\n    for (int i = 0; i < targetLen; ++i) {\n        if (dp[i] == INT_MAX) continue;\n\n        TrieNode* node = trie.root;\n        for (int j = i; j < targetLen; ++j) {\n            char ch = target[j];\n            if (node->children.find(ch) == node->children.end()) break;\n            node = node->children[ch];\n\n            for (auto& [wordIndex, cost] : node->wordIndexes) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n            }\n        }\n    }\n\n    return dp[targetLen] == INT_MAX ? -1 : dp[targetLen];\n\n    }\n};",
    "submit_ts": "1720321433",
    "subm_id": "1312322759"
}