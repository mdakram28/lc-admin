{
    "username": "sobols",
    "submission": "constexpr int K = 26;\nconstexpr int INF = 1'000'000'000;\n\nstruct Vertex {\n    int next[K];\n    int output = -1;\n    int len = -1;\n    int cost = INF;\n\n    int p = -1;\n    char pch;\n    int link = -1;\n    int go[K];\n\n    Vertex(int p=-1, char ch='$') : p(p), pch(ch) {\n        fill(begin(next), end(next), -1);\n        fill(begin(go), end(go), -1);\n    }\n};\n\nclass AhoCorasick {\npublic:\n    AhoCorasick()\n        : t(1)\n        , curV(0)\n    {\n    }\n\n    vector<pair<int, int>> consume(char ch) {\n        curV = go(curV, ch);\n        vector<pair<int, int>> ans;\n        for (int v = curV; v != -1; v = get_out(v)) {\n            if (t[v].len != -1) {\n                ans.emplace_back(t[v].len, t[v].cost);\n            }\n        }\n        return ans;\n    }\n    \n    void add_string(string const& s, int cost) {\n        int v = 0;\n        for (char ch : s) {\n            int c = ch - 'a';\n            if (t[v].next[c] == -1) {\n                t[v].next[c] = t.size();\n                t.emplace_back(v, ch);\n            }\n            v = t[v].next[c];\n        }\n        t[v].len = s.size();\n        t[v].cost = min(t[v].cost, cost);\n    }\n\n    int get_link(int v) {\n        if (t[v].link == -1) {\n            if (v == 0 || t[v].p == 0)\n                t[v].link = 0;\n            else\n                t[v].link = go(get_link(t[v].p), t[v].pch);\n        }\n        return t[v].link;\n    }\n\n    int get_out(int v)\n    {\n        if (t[v].output == -1 && v != 0)\n        {\n            int lnk = get_link(v);\n            if (t[lnk].len != -1)\n                t[v].output = lnk;\n            else\n                t[v].output = get_out(lnk);\n        }\n        return t[v].output;\n    }\n    \n    int go(int v, char ch) {\n        int c = ch - 'a';\n        if (t[v].go[c] == -1) {\n            if (t[v].next[c] != -1)\n                t[v].go[c] = t[v].next[c];\n            else\n                t[v].go[c] = v == 0 ? 0 : go(get_link(v), ch);\n        }\n        return t[v].go[c];\n    }\n    \nprivate:\n    vector<Vertex> t;\n    int curV;\n};\n\n// end of copy-paste\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        \n        AhoCorasick ac;\n        for (int i = 0; i < words.size(); ++i) {\n            ac.add_string(words[i], costs[i]);\n        }\n        \n        vector<int> f(n + 1, INF);\n        f[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            for (auto [len, cost] : ac.consume(target[i])) {\n                f[i+1] = min(f[i+1], f[i+1 - len] + cost);\n            }\n        }\n        \n        return f[n] == INF ? -1 : f[n];\n    }\n};",
    "submit_ts": "1720322681",
    "subm_id": "1312356321"
}