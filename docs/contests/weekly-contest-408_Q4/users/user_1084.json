{
    "username": "huuthanhdlv",
    "submission": "func canReachCorner(X int, Y int, circles [][]int) bool {\n    xCircles := make(map[int] bool);\n    yCircles := make(map[int] bool);\n    \n    for i, c := range(circles) {        \n        dist := 0;\n        if c[1] > Y {\n            dist = c[1] - Y\n        } else {\n            dist = Y - c[1]\n        }\n        \n        if c[0] <= c[2] || dist <= c[2] {\n            xCircles[i] = true\n        }\n        \n\n        if c[0] > X {\n            dist = c[0] - X\n        } else {\n            dist = X - c[0]\n        }\n        \n        if c[1] <= c[2] || dist <=  c[2]{\n            yCircles[i] = true \n        }\n        \n        if xCircles[i] && yCircles[i] {\n            return false\n        }\n    }\n    \n    \n    // Now we need to find a path between any vertex within Xcircle to any vertext within y circle\n    // Breath first search, start with xCircle\n    \n    visited := make(map[int] bool);\n    queue := make([]Circle, 0)\n    var v Circle;\n    for k := range(xCircles) {\n        \n        if !visited[k] {\n            // Start DFS from k\n            queue = append(queue, Circle{k, circles[k][0], circles[k][1], circles[k][2]})\n            visited[k] = true\n            \n            for len(queue) > 0 {\n                // Dequeue\n                v , queue = queue[0], queue[1:]\n                if yCircles[v.Index] {\n                    return false\n                }\n                \n                // find neiboughr \n                for i, c := range(circles){\n                    if !visited[i] && (v.X-c[0])*(v.X-c[0]) + (v.Y - c[1])*(v.Y - c[1]) <= (v.R +c[2])*(v.R +c[2]) {\n                        // this mean two circle touch each other\n                        visited[i] = true\n                        queue = append(queue, Circle{i, c[0], c[1], c[2]})\n                    }\n                }\n                \n            }\n            \n        }\n        \n    }\n                                       \n    return true\n    \n}\n\ntype Circle struct {\n    Index int\n    X int\n    Y int\n    R int\n}",
    "submit_ts": "1722138850",
    "subm_id": "1335801297"
}