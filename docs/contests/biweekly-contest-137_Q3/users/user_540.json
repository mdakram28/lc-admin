{
    "username": "etian6795",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        int[][] rmax = new int[m][3];\n        for(int i = 0; i < m; i++) {\n            final int temp = i;\n            PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (board[temp][a] > board[temp][b]) ? 1 : -1);\n            for(int j = 0; j < n; j++) {\n                pq.add(j);\n                if(pq.size()>3) pq.remove();\n            }\n            rmax[i][2] = pq.remove();\n            rmax[i][1] = pq.remove();\n            rmax[i][0] = pq.remove();\n        }\n        long ans = Long.MIN_VALUE;\n        for(int i = 0; i < m; i++) {\n            for(int j = i+1; j < m; j++) {\n                for(int k = j+1; k < m; k++) {\n                    for(int a = 0; a < 3; a++) {\n                        for(int b = 0; b < 3; b++) {\n                            for(int c = 0; c < 3; c++) {\n                                if(rmax[i][a] != rmax[j][b] && rmax[i][a] != rmax[k][c] && rmax[j][b] != rmax[k][c]) {\n                                    ans = Math.max(ans, ((long)board[i][rmax[i][a]]) + ((long)board[j][rmax[j][b]]) + ((long)board[k][rmax[k][c]]));\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1723907449",
    "subm_id": "1359108143"
}