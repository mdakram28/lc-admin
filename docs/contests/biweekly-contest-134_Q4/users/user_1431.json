{
    "username": "tarunagarwal123789",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(vector<int>& nums, int treeIndex, int l, int r) {\n        if (l == r) {\n            tree[treeIndex] = nums[l];\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        buildTree(nums, 2 * treeIndex + 1, l, mid);\n        buildTree(nums, 2 * treeIndex + 2, mid + 1, r);\n        tree[treeIndex] = tree[2 * treeIndex + 1] & tree[2 * treeIndex + 2];\n    }\n\n    int query(int treeIndex, int start, int end, int l, int r) {\n        if (l > end || r < start) return -1; \n        if (l <= start && end <= r) return tree[treeIndex];\n        int mid = start + (end - start) / 2;\n        int leftQuery = query(2 * treeIndex + 1, start, mid, l, r);\n        int rightQuery = query(2 * treeIndex + 2, mid + 1, end, l, r);\n        return leftQuery & rightQuery;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.assign(4 * n, 0);\n        buildTree(nums, 0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        SegmentTree st(nums);\n        long long ans = 0LL;\n        int n = nums.size();\n        for(int i =0;i<n;i++){\n            int l = i;\n            int r = n-1;\n            \n            int cnt=0;\n            int a1=-1;\n            while(l<=r){\n                int mid = l+(r-l)/2;\n                // if(nums[i]==8) cout << i << \" \" << mid << endl;\n                int ans = st.query(i,mid);\n                if(ans>k){\n                     l=mid+1;\n                }\n                else if(ans<k){\n                   \n                    r=mid-1;\n                }\n                else{\n                    a1=mid;\n                    r=mid-1;\n                }\n            }\n            l=i;\n            r=n-1;\n            \n            cnt=0;\n            int a2 = -1;\n            while(l<=r){\n                int mid = l+(r-l)/2;\n                int ans = st.query(i,mid);\n                if(ans>k){\n                     l=mid+1;\n                }\n                else if(ans<k){\n                   \n                    r=mid-1;\n                }\n                else{\n                    a2=mid;\n                    l=mid+1;\n                }\n            }\n            // cout << a1 << \" \" << a2 << \" \" << nums[i] << endl;\n            if(a1!=-1 && a2!=-1)\n            ans += a2-a1+1LL;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279928",
    "subm_id": "1311770575"
}