{
    "username": "zilezhu",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def connected(i, j):\n            x, y, r = circles[i]\n            x2, y2, r2 = circles[j]\n            dist = (x2 - x) ** 2 + (y2 - y) ** 2\n            return (r2 + r) ** 2 >= dist\n        graph = [list() for _ in range(len(circles))]\n        for i in range(len(circles)):\n            for j in range(i + 1, len(circles)):\n                if connected(i, j):\n                    # print(\"here\")\n                    graph[i].append(j)\n                    graph[j].append(i)\n        # print(graph)\n        visited = [False] * len(circles)\n        for i in range(len(circles)):\n            stack = [i]\n            left, right, up, down = False, False, False, False\n            while stack:\n                # print(stack, visited)\n                cur = stack.pop()\n                if visited[cur]:\n                    continue\n                visited[cur] = True\n                x, y, r = circles[cur]\n                if x - r <= 0:\n                    left = True\n                if x + r >= X:\n                    right = True\n                if y - r <= 0:\n                    down = True\n                if y + r >= Y:\n                    up = True\n                for nextNode in graph[cur]:\n                    stack.append(nextNode)\n            if left and right:\n                return False\n            if up and down:\n                return False\n            if left and down:\n                return False\n            if up and right:\n                return False\n        return True\n                ",
    "submit_ts": "1722138831",
    "subm_id": "1335800817"
}