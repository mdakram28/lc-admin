{
    "username": "ychanc2104",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = {}\n        # add words\n        for i,word in enumerate(words):\n            dummy = trie\n            for c in word:\n                if c not in dummy:\n                    dummy[c] = {}\n                dummy = dummy[c]\n            dummy['cost'] = min(dummy.get('cost', float('inf')), costs[i])\n\n        # print(trie)\n        \n        # path = 0\n        # res = float('inf')\n        @lru_cache(None)\n        def helper(i):\n            # nonlocal path, res\n            if i == len(target): # finish\n                # res = min(res, path)\n                return 0\n            if i > len(target):\n                return float('inf')\n\n            res = float('inf')\n            dummy = trie\n            for j in range(i, len(target)):\n                if target[j] not in dummy:\n                    break\n                dummy = dummy[target[j]]\n                if 'cost' in dummy:\n                    # path += dummy['cost']\n                    # print(i, j, target[j], path)\n\n                    res = min(res, helper(j+1) + dummy['cost'])\n                    # path -= dummy['cost']\n            return res\n        \n        res = helper(0)\n        return res if res != float('inf') else -1",
    "submit_ts": "1720324010",
    "subm_id": "1312389463"
}