{
    "username": "tttyyy49",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        long res = 0;\n        \n        Stack<Integer> stack = new Stack<>();\n        for (int i = 0; i < n; ++i) {\n            // System.out.println(stack);\n            int d = target[i] - nums[i];\n            \n            if (d == 0 && !stack.isEmpty()) {\n                res += Math.abs(stack.peek());\n                stack.clear();\n                continue;\n            }\n            \n            if (!stack.isEmpty() && !sameSign(stack.peek(), d)) {\n                res += Math.abs(stack.peek());\n                stack.clear();\n            }\n            \n            if (stack.isEmpty()) {\n                stack.push(d);\n                continue;\n            }\n            \n            if (Math.abs(d) > Math.abs(stack.peek())) {\n                stack.push(d);\n            } else if (Math.abs(d) == Math.abs(stack.peek())) {\n                continue;\n            } else { // Math.abs(d) < Math.abs(stack.peek())\n                res += Math.abs(stack.peek()) - Math.abs(d);\n                while (!stack.isEmpty() && Math.abs(d) < Math.abs(stack.peek())) {\n                    stack.pop();\n                }\n                stack.push(d);\n            }\n        }\n        \n        // System.out.println(stack);\n        \n        if (!stack.isEmpty()) res += Math.abs(stack.peek());\n        \n        return res;\n    }\n    \n    boolean sameSign(int i, int j) {\n        if (i > 0 && j > 0) return true;\n        if (i < 0 && j < 0) return true;\n        return false;\n    }\n}\n\n/**\nInput:\n[9,2,6,10,4,8,3,4,2,3]\n[9,5,5,1,7,9,8,7,6,5]\n\n// d:\n[0, 3, -1, -9, 3, 1, 5, 3, 4, 2]\nOutput:\n18\nExpected:\n20\n**/",
    "submit_ts": "1721532986",
    "subm_id": "1327998680"
}