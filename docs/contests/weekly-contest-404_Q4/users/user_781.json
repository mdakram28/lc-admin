{
    "username": "yashkataria15",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\nprivate:\n    // Helper function to perform BFS and return the farthest node and its distance from the start node\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest_node = start;\n        int max_dist = 0;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    \n                    if (dist[neighbor] > max_dist) {\n                        max_dist = dist[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return {farthest_node, max_dist};\n    }\n    \n    // Function to calculate the diameter of a tree\n    int treeDiameter(const vector<vector<int>>& adj) {\n        pair<int, int> p1 = bfs(0, adj); // Find farthest node from node 0\n        pair<int, int> p2 = bfs(p1.first, adj); // Find farthest node from p1's farthest node\n        return p2.second;\n    }\n    \npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        \n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        int diameter1 = treeDiameter(adj1);\n        int diameter2 = treeDiameter(adj2);\n        \n        // The new diameter will be the max of:\n        // 1. The original diameters of the two trees\n        // 2. Half the sum of the two diameters plus 1 (adding an edge between two farthest nodes)\n        \n        int min_diameter = max(diameter1, diameter2);\n        int possible_diameter = (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1;\n        min_diameter = max(min_diameter, possible_diameter);\n        \n        return min_diameter;\n    }\n};\n",
    "submit_ts": 1719719364.0
}