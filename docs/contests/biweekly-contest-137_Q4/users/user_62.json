{
    "username": "TinySnow",
    "submission": "//\n//\n\n#include <iostream>\n#include <iso646.h>\n#include <vector>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n#include <queue>\n#include <algorithm>\n#include <numeric>\n#include <cmath>\n#include <functional>\n#include <string>\n#include <array>\n\nusing namespace std;\nusing LL = long long;\nconst int INF = 0x3f3f3f3f;\nconst LL LINF = 0x3f3f3f3f3f3f3f3f;\n\nclass Solution\n{\npublic:\n    long long maximumValueSum(vector<vector<int>> &board)\n    {\n        int m = board.size(), n = board[0].size();\n        // maintain the first 3 maximum values of each row\n        vector<vector<pair<LL, int>>> max3(m);\n        for (int i = 0; i < m; i++)\n        {\n            vector<pair<LL, int>> row;\n            for (int j = 0; j < n; j++)\n                row.push_back({board[i][j], j});\n            sort(row.begin(), row.end(), greater<pair<LL, int>>());\n            for (int j = 0; j < 3; j++)\n                max3[i].push_back(row[j]);\n        }\n        vector<pair<LL, pair<int, int>>> rows;\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < 3; j++)\n                rows.push_back({max3[i][j].first, {i, max3[i][j].second}});\n        sort(rows.begin(), rows.end(), greater<pair<LL, pair<int, int>>>());\n        LL ans = -LINF;\n        for (int i = 0; i < 4; i++)\n            for (int j = i + 1; j < 3 * m; j++)\n                for (int k = j + 1; k < 3 * m; k++)\n                {\n                    auto [r1, c1] = rows[i].second;\n                    auto [r2, c2] = rows[j].second;\n                    auto [r3, c3] = rows[k].second;\n                    if (r1 == r2 or r2 == r3 or r1 == r3)\n                        continue;\n                    if (c1 == c2 or c2 == c3 or c1 == c3)\n                        continue;\n                    ans = max(ans, rows[i].first + rows[j].first + rows[k].first);\n                }\n        return ans;\n    }\n};",
    "submit_ts": "1723907462",
    "subm_id": "556325664"
}