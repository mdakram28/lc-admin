{
    "username": "ianwong1999",
    "submission": "class Solution {\npublic:\n    \n    long long dp[2][155][155];\n    long long high[155];\n    long long sum[155];\n    \n    long long maximumScore(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        memset(dp, 0, sizeof(dp));\n        \n        for (int i = 0; i <= n; i++) for (int j = 0; j <= n; j++) {\n            dp[1][i][j] = -1;\n        }\n        \n        {\n            for (int i = 0; i <= n; i++) {\n                dp[1][0][i] = 0;\n            }\n        }\n        \n        for (int j = 1; j < m; j++) {\n            swap(dp[0], dp[1]);\n            \n            for (int i = 0; i <= n; i++) for (int k = 0; k <= n; k++) {\n                dp[1][i][k] = -1;\n            }\n            \n            for (int i = 0; i <= n; i++) high[i] = -1, sum[i] = 0;\n            \n            for (int i = 0; i < n; i++) {\n                sum[i + 1] = grid[i][j];\n            }\n            \n            for (int i = 1; i <= n; i++) {\n                sum[i] += sum[i - 1];\n            }\n            \n            for (int x = 0; x <= n; x++) {\n                for (int i = 0; i <= n; i++) {\n                    high[i] = max(high[i], dp[0][x][i]);\n                }\n            }\n            \n            auto get_sum = [&](int l, int r) -> long long {\n                if (l > r) return 0ll;\n                return sum[r] - sum[l - 1];\n            };\n            \n            for (int i = 0; i <= n; i++) {\n                if (high[i] == -1) continue;\n                \n                for (int k = 0; k <= i; k++) {\n                    // dp[1][i][k] <- if (i < k) dp[0][x][i] + prev_sum(max(x, i) + 1, k)\n                    // dp[1][i][k] <- if (i >= k) dp[0][x][i] + sum(k + 1, i);\n                    \n                    dp[1][i][k] = high[i] + get_sum(k + 1, i);\n                }\n            }\n            \n            for (int i = 0; i <= n; i++) high[i] = -(long long)1e16, sum[i] = 0;\n            \n            for (int i = 0; i < n; i++) {\n                sum[i + 1] = grid[i][j - 1];\n            }\n            \n            for (int i = 1; i <= n; i++) {\n                sum[i] += sum[i - 1];\n            }\n            \n            for (int x = 0; x <= n; x++) {\n                for (int i = 0; i <= n; i++) {\n                    high[i] = max(high[i], dp[0][x][i] - sum[max(x, i)]);\n                }\n            }\n            \n            for (int i = 0; i <= n; i++) {\n                if (high[i] == -1) continue;\n                \n                for (int k = i + 1; k <= n; k++) {\n                    // dp[1][i][k] <- if (i < k) dp[0][x][i] + prev_sum(max(x, i) + 1, k)\n                    // dp[1][i][k] <- if (i >= k) dp[0][x][i] + sum(k + 1, i);\n                    \n                    dp[1][i][k] = max(dp[1][i][k], high[i] + sum[k]);\n                }\n            }\n        }\n        \n        long long res = 0;\n        \n        for (int i = 0; i <= n; i++) for (int j = 0; j <= n; j++) res = max(res, dp[1][i][j]);\n        return res;\n    }\n};",
    "submit_ts": "1721487939",
    "subm_id": "1327406183"
}