{
    "username": "AbhishekP01",
    "submission": "public class Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        int[][] dp = new int[n][k + 1];\n        Arrays.stream(dp).forEach(row -> Arrays.fill(row, 1));\n        \n        int[] maxSubLen = new int[k + 1];\n        Arrays.fill(maxSubLen, -1);\n        \n        List<Map<Integer, Integer>> subsequenceMaps = new ArrayList<>();\n        for (int i = 0; i <= k; i++) {\n            subsequenceMaps.add(new HashMap<>());\n        }\n\n        int maxLength = 1;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + maxSubLen[l]);\n                }\n                if (subsequenceMaps.get(j).containsKey(nums[i])) {\n                    dp[i][j] = Math.max(dp[i][j], 1 + subsequenceMaps.get(j).get(nums[i]));\n                }\n                maxLength = Math.max(maxLength, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                maxSubLen[j] = Math.max(maxSubLen[j], dp[i][j]);\n                subsequenceMaps.get(j).put(nums[i], dp[i][j]);\n            }\n        }\n        \n        return maxLength;\n    }\n}\n",
    "submit_ts": "1717862187",
    "subm_id": "1281815064"
}