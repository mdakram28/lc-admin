{
    "username": "Himanshu_Singh11",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    bool is_peak(int i) {\n        if (i > 0 && i < n - 1) {\n            return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n        }\n        return false;\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_sum = query(2 * node + 1, start, mid, l, r);\n        int right_sum = query(2 * node + 2, mid + 1, end, l, r);\n        return left_sum + right_sum;\n    }\n\n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            nums[idx] = value;\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, value);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, value);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums), n(nums.size()) {\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    void update(int idx, int value) {\n        nums[idx] = value;\n        int start = max(0, idx - 1);\n        int end = min(n - 1, idx + 1);\n        for (int i = start; i <= end; ++i) {\n            update(0, 0, n - 1, i, nums[i]);\n        }\n    }\n};\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1]+1, ri = query[2]-1;\n                result.push_back(st.query(li, ri));\n            } else if (query[0] == 2) {\n                int indexi = query[1], vali = query[2];\n                st.update(indexi, vali);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": 1718509706.0
}