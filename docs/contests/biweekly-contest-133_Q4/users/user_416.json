{
    "username": "__janmesh",
    "submission": "import java.util.*;\n\nclass Solution {\n    static final int mod = (int)Math.pow(10,9)+7;\n    static final int maxInver = 400;\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        long[][] dp = new long[n + 1][maxInver + 1];\n        dp[0][0] = 1;\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int[] req : requirements) {\n            map.put(req[0] + 1, req[1]);\n        }\n    \n        for (int i = 1; i <= n; i++) {\n            for (int j = 0; j <= maxInver; j++) {\n                for (int npos = 0; npos < i; npos++) {\n                    int pInv = j - npos;\n                    if (pInv >= 0) {\n                        dp[i][j] = (dp[i][j] + dp[i - 1][pInv])%mod;\n                    }\n                }\n            }\n\n            if (map.containsKey(i)) {\n                int targetInverse = map.get(i);\n                for (int j = 0; j <= maxInver; j++) {\n                    if (j != targetInverse) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n\n        long res = 0;\n        for (long cnt : dp[n]) res = (res + cnt)%mod;\n\n        return (int)res;\n    }\n\n}",
    "submit_ts": "1719070434",
    "subm_id": "1296822964"
}