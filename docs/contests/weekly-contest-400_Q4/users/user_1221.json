{
    "username": "riju1",
    "submission": "const int N = 100000;  \nint n; \nint tree[2 * N]; \n\nvoid build(int arr[]) {  \n    for (int i = 0; i < n; i++)     \n        tree[n + i] = arr[i]; \n    for (int i = n - 1; i > 0; --i)      \n        tree[i] = tree[i << 1] & tree[i << 1 | 1];     \n} \n\nvoid update(int p, int value) {  \n    tree[p + n] = value; \n    p = p + n; \n    for (int i = p; i > 1; i >>= 1) \n        tree[i >> 1] = tree[i] & tree[i ^ 1]; \n} \n\nint query(int l, int r) {  \n    int res = INT_MAX; \n    for (l += n, r += n; l < r; l >>= 1, r >>= 1) { \n        if (l & 1)  \n            res &= tree[l++]; \n        if (r & 1)  \n            res &= tree[--r]; \n    } \n    return res; \n} \n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        n = nums.size(); \n        \n        build(nums.data()); \n        \n        int ans = INT_MAX; \n        \n        for (int i = 0; i < n; i++) { \n            \n            int low = i - 1, high = n - 1;\n            \n            while (high - low > 1) {\n                \n                int mid = (low + high) / 2; \n                \n                if (query(i, mid + 1) >= k) \n                    \n                    low = mid; \n                else \n                    high = mid; \n            }\n            ans = min(ans, min(abs(query(i, low + 1) - k), abs(k - query(i, high + 1))));\n        } \n        return ans;\n    }\n};",
    "submit_ts": 1717300442.0
}