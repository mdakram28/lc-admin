{
    "username": "dragonman164",
    "submission": "map<int,pair<int,int>> mapping;\nint dp[int(2e5 + 5)][4];\nint solve(vector<vector<int>> &grid, int &n, int ones, int index = 0){\n\n    if(index == n){\n        if(ones == 0) return 0;\n        return 1e9;\n    }\n    if(dp[index][ones] != -1) return dp[index][ones];\n    int n1 = grid.size(), m1 = grid[0].size();\n    auto [i, j] = mapping[index];\n    set<pair<int,int>> temp;\n    temp.insert({i, j});\n    temp.insert({i, m1 - 1 - j});\n    temp.insert({n1 - 1 - i, j});\n    temp.insert({n1 - 1 - i, m1 - 1 - j});\n    int z = 0, o = 0;\n    for(auto &elem : temp){\n        auto [i1, j1] = elem;\n        if(grid[i1][j1]) o ++ ;\n        else z ++ ;\n    }\n\n    \n    // case A : make all zero \n    int a1 = o + solve(grid, n, (ones - o + 4)%4, index + 1);\n    // case B : make all ones \n    int b1 = z + solve(grid, n, (ones + z)%4, index + 1);\n    return dp[index][ones] = min(a1, b1);\n}\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n\n\n        int cnt = 0;\n        mapping.clear();\n        int tile = 0;\n        int n = grid.size(), m = grid[0].size();\n        for(int i = 0; i < n; i++ ){\n            for(int j = 0; j < m; j++ ){\n                if(grid[i][j]) cnt++;\n            }\n        }\n        if(n%2 != 0) n ++ ;\n        if(m%2 != 0) m ++;\n        n/=2, m/=2;\n        int limit = n*m;\n        for(int i = 0; i < n ; i++ ){\n            for(int j = 0; j < m; j ++ ){\n                mapping[tile++] = {i, j};\n            }\n        }\n        for(int i = 0; i <= limit + 2; i++ ){\n            for(int j = 0; j < 4; j++ ){\n                dp[i][j] = -1;\n            }\n        }\n        return solve(grid, limit, cnt%4);\n    \n\n        \n\n        \n    }\n};",
    "submit_ts": "1722698086",
    "subm_id": "1343169180"
}