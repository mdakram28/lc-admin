{
    "username": "Crobbit",
    "submission": "class TrieNode {\npublic:\n    TrieNode* children[26];\n    int minCost;\n    \n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n        minCost = INT_MAX;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* prefixTrie = buildPrefixTrie(words, costs);\n        int n = target.size();\n        \n        // dp[i] will store the minimum cost to form target[0:i-1]\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // Cost to form an empty string is 0\n        \n        // Priority queue to process prefixes in increasing order of cost\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        pq.push({0, 0}); // {cost, ind}\n        \n        while (!pq.empty()) {\n            int cost = pq.top().first;\n            int ind = pq.top().second;\n            pq.pop();\n            \n            if (ind == n) {\n                return cost;\n            }\n            \n            TrieNode* node = prefixTrie;\n            for (int j = ind; j < n; ++j) {\n                int charIdx = target[j] - 'a';\n                if (node->children[charIdx] == nullptr) {\n                    break; // No further matching prefix in Trie\n                }\n                node = node->children[charIdx];\n                if (node->minCost != INT_MAX) {\n                    int newCost = cost + node->minCost;\n                    if (newCost < dp[j + 1]) {\n                        dp[j + 1] = newCost;\n                        pq.push({newCost, j + 1});\n                    }\n                }\n            }\n        }\n        \n        return -1; // If no valid formation found\n    }\n    \nprivate:\n    TrieNode* buildPrefixTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        int n = words.size();\n        \n        for (int i = 0; i < n; ++i) {\n            string& word = words[i];\n            int cost = costs[i];\n            TrieNode* node = root;\n            \n            for (char c : word) {\n                int charIdx = c - 'a';\n                if (node->children[charIdx] == nullptr) {\n                    node->children[charIdx] = new TrieNode();\n                }\n                node = node->children[charIdx];\n            }\n            \n            if (cost < node->minCost) {\n                node->minCost = cost;\n            }\n        }\n        \n        return root;\n    }\n};\n",
    "submit_ts": "1720322558",
    "subm_id": "1312353098"
}