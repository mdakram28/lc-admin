{
    "username": "deysandip301",
    "submission": "class Trie {\npublic:\n    bool isEnd;\n    int cost;\n    unordered_map<char, Trie*> trie;\n\n    Trie() {\n        this->isEnd = false;\n        this->cost = -1;\n    }\n\n    void insert(string& word, int cost) {\n        int n = word.size();\n        Trie* curr = this;\n        for (int i = 0; i < n; i++) {\n            char ch = word[i];\n            if (curr->trie.find(ch) == curr->trie.end())\n                curr->trie[ch] = new Trie();\n            curr = curr->trie[ch];\n        }\n        curr->isEnd = true;\n        if(curr->cost != -1) curr->cost = min(curr->cost,cost);\n        else curr->cost = cost;\n    }\n};\nclass Solution {\n    int dp[(int)5e4 + 5];\n\npublic:\n    int rec(Trie*& root, string& target, int ptr) {\n        if (target.size() == ptr)\n            return 0;\n        int& ans = dp[ptr];\n        if (ans != -1)\n            return ans;\n        Trie* temp = root;\n        ans = 1e9;\n        for (int i = ptr; i < target.size(); ++i) {\n            if (temp->trie.find(target[i]) != temp->trie.end()) {\n                temp = temp->trie[target[i]];\n                if (temp->isEnd) {\n                    ans = min(ans, rec(root, target, i + 1) + temp->cost);\n                }\n            } \n            else {\n                break;\n            }\n        }\n\n        return ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* root = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            root->insert(words[i], costs[i]);\n        }\n\n        memset(dp, -1, sizeof dp);\n        int ans = rec(root, target, 0);\n        return ans == 1e9 ? -1 : ans;\n    }\n};",
    "submit_ts": "1720322839",
    "subm_id": "1312360450"
}