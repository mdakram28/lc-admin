{
    "username": "Sarvagya Sharma",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<vector<int>> top3(m);\n        vector<pair<int,int>> v;\n        \n        for(int row = 0; row < m; row++) {\n            int min_idx = 0;\n            for(int i = 0; i < board[row].size(); i++) \n                if(board[row][min_idx] > board[row][i])\n                    min_idx = i;\n            top3[row] = vector<int>(3, min_idx);\n        }\n        \n        for(int row = 0; row < m; row++) {\n            for(int col = 0; col < n; col++) {\n                if(board[row][col] > board[row][top3[row][2]] or \n                   (board[row][col] == board[row][top3[row][2]] and col > top3[row][2])) {\n                    top3[row][2] = col;\n                }\n                \n                if(board[row][top3[row][2]] > board[row][top3[row][1]] or \n                   (board[row][top3[row][2]] == board[row][top3[row][1]] and top3[row][2] > top3[row][1])) {\n                    swap(top3[row][2], top3[row][1]);\n                }\n                \n                if(board[row][top3[row][1]] > board[row][top3[row][0]] or \n                   (board[row][top3[row][1]] == board[row][top3[row][0]] and top3[row][1] > top3[row][0])) {\n                    swap(top3[row][1], top3[row][0]);\n                }\n            }\n        }\n        \n        for(int row = 0; row < m; row++) {\n            for(int col: top3[row]) v.push_back({ row, col });\n        }\n        \n        sort(v.begin(), v.end(), [&](const pair<int,int> &a, const pair<int,int> &b) {\n            auto [ra, ca] = a;\n            auto [rb, cb] = b;\n            if(board[ra][ca] > board[rb][cb]) return true;\n            return false;\n        });\n        \n        auto getRes = [&](int r1, int r2, int r3) -> long long {\n            \n            long long mx = LLONG_MIN;\n            for(int x = 0; x < 3; x++) {\n                for(int y = 0; y < 3; y++) {\n                    for(int z = 0; z < 3; z++) {\n                        int A = top3[r1][x], B = top3[r2][y], C = top3[r3][z];\n                        if(A == B || B == C || C == A) continue;\n                        \n                        mx = max(mx, (long long)board[r1][A] + board[r2][B] + board[r3][C]);\n                    }\n                }\n            }\n            \n            return mx;\n        };\n        \n        long long maxVal = -1LL << 52;\n        for(int r1 = 0; r1 < m; r1++) {\n            for(int r2 = r1 + 1; r2 < m; r2++) {\n                // for(int r3 = r2 + 1; r3 < m; r3++) {\n                //     maxVal = max(maxVal, getRes(r1, r2, r3));\n                // }\n                \n                // get top 2 for r1 and r2,\n                // out of them => 3 cases\n                // for each case, we have 2 cols, store top 3 items other than r1 and r2, somewhere\n                // mp[r1][r2] => array<int, 3>\n                \n                if(top3[r1][0] != top3[r2][0]) {\n                    int c1 = top3[r1][0], c2 = top3[r2][0];\n                    \n                    // max 6 are skipped\n                    for(auto [r, c]: v) {\n                        if(c == c1 || c == c2 || r == r1 || r == r2) continue;\n                        maxVal = max(maxVal, (long long)board[r1][c1] + board[r2][c2] + board[r][c]);\n                        break;\n                    }\n                    \n                    continue;\n                }\n                \n                int c1 = top3[r1][1], c2 = top3[r2][0];\n                for(auto [r, c]: v) {\n                    if(c == c1 || c == c2 || r == r1 || r == r2) continue;\n                    maxVal = max(maxVal, (long long)board[r1][c1] + board[r2][c2] + board[r][c]);\n                    break;\n                }\n                \n                c1 = top3[r1][0], c2 = top3[r2][1];\n                for(auto [r, c]: v) {\n                    if(c == c1 || c == c2 || r == r1 || r == r2) continue;\n                    maxVal = max(maxVal, (long long)board[r1][c1] + board[r2][c2] + board[r][c]);\n                    break;\n                }\n            }\n        }\n        \n        return maxVal;\n    }\n};",
    "submit_ts": "1723910043",
    "subm_id": "1359215166"
}