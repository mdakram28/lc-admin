{
    "username": "fakeaccountforfakesubmission",
    "submission": "class Solution {\npublic:\n\n\n// Trie Node class\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int min_cost;\n\n    TrieNode() {\n        min_cost = INT_MAX;\n    }\n};\n\n// Trie class\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->min_cost = min(node->min_cost, cost);\n    }\n};\n\n// Function to find minimum cost to form target\nint minCostToFormTarget(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n\n    // Build the Trie\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    // Initialize dp array\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    // Fill dp array using the Trie\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) {\n            continue;\n        }\n        TrieNode* node = trie.root;\n        for (int j = i; j < n; ++j) {\n            if (node->children.find(target[j]) == node->children.end()) {\n                break;\n            }\n            node = node->children[target[j]];\n            if (node->min_cost != INT_MAX) {\n                dp[j + 1] = min(dp[j + 1], dp[i] + node->min_cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        return minCostToFormTarget(target,words,costs);\n    }\n};",
    "submit_ts": "1720321481",
    "subm_id": "1312324019"
}