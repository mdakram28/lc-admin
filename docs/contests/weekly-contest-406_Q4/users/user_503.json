{
    "username": "user1838wc",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, std::vector<int>& horizontalCut, std::vector<int>& verticalCut) {\n        using ll = long long;\n        // Sort both arrays in descending order\n        std::sort(horizontalCut.begin(), horizontalCut.end(), std::greater<int>());\n        std::sort(verticalCut.begin(), verticalCut.end(), std::greater<int>());\n        \n        // Initialize indices and pieces\n        ll hIndex = 0, vIndex = 0;\n        ll hPieces = 1, vPieces = 1;\n        ll totalCost = 0;\n        \n        // Perform the cuts, always choosing the least costly cut available\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] > verticalCut[vIndex]) {\n                totalCost += horizontalCut[hIndex] * vPieces;\n                hPieces++;\n                hIndex++;\n            } else {\n                totalCost += verticalCut[vIndex] * hPieces;\n                vPieces++;\n                vIndex++;\n            }\n        }\n        \n        // If there are remaining horizontal cuts\n        while (hIndex < horizontalCut.size()) {\n            totalCost += horizontalCut[hIndex] * vPieces;\n            hIndex++;\n        }\n        \n        // If there are remaining vertical cuts\n        while (vIndex < verticalCut.size()) {\n            totalCost += verticalCut[vIndex] * hPieces;\n            vIndex++;\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720924995",
    "subm_id": "1320238918"
}