{
    "username": "mangalji",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes + 4, 0);\n        q.push(startNode);\n        visited[startNode] = 1;\n        \n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circleParams) {\n        vector<pair<pair<int, int>, int>> circles(circleParams.size());\n        vector<vector<int>> graph(circleParams.size() + 4);\n        int numCircles = circleParams.size();\n        \n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = circleParams[i][0];\n            circles[i].first.second = circleParams[i][1];\n            circles[i].second = circleParams[i][2];\n        }\n        \n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int B = 0;\n        B = max(B, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); \n        B = max(B, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); \n        if (B) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722136977",
    "subm_id": "1335750565"
}