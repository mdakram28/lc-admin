{
    "username": "jPank1983",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& h, vector<int>& v) {\n        vector<pair<int, char>> nums;\n        unordered_map<char, int> map;\n        for(int i = 0; i < m-1; i++){\n            nums.push_back({h[i], 'H'});\n        }\n        for(int i = 0; i < n-1; i++){\n            nums.push_back({v[i], 'V'});\n        }\n        sort(nums.begin(), nums.end());\n        long long cost = 0;\n        map['H'] = 0;\n        map['V'] = 0;\n        for(int i = nums.size()-1; i >= 0; i--){\n            if(nums[i].second == 'H'){\n                cost += nums[i].first * (map['V'] + 1);\n                map['H'] += 1;\n            }\n            else{\n                cost += nums[i].first * (map['H'] + 1);\n                map['V'] += 1;\n            }\n        }\n\n        return cost;\n    }\n};",
    "submit_ts": "1720926141",
    "subm_id": "1320277213"
}