{
    "username": "srinivasan798",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        List<Integer>[] graph = new List[n];\n        for(int i=0; i<n; i++) {\n            graph[i] = new ArrayList<>();\n            if(i+1<n) graph[i].add(i+1);\n        }\n        int[] ans = new int[queries.length];\n        TreeSet<Integer> bst = new TreeSet<>();\n        for(int i=0; i<n; i++) {\n            bst.add(i);\n        }\n        for(int i=0; i<queries.length; i++) {\n            int a = queries[i][0];\n            int b = queries[i][1];\n            while(bst.lower(b)>a) {\n                int c = bst.lower(b);\n                bst.remove(c);\n            }\n            ans[i] = bst.size()-1;\n        }\n        return ans;\n    }\n\n    private int getPath(List<Integer>[] graph, int src, int dest) {\n        int[] dist = new int[dest+1];\n        Arrays.fill(dist, dest);\n        Queue<int[]> q = new ArrayDeque<>();\n        q.offer(new int[]{src, 0});\n        dist[src] = 0;\n        int min = dest;\n        while(!q.isEmpty()) {\n            int[] node = q.poll();\n            if(dist[node[0]]>node[1]) dist[node[0]] = node[1];\n            if(node[0]==dest) min = Math.min(min, node[1]);\n            for(int child : graph[node[0]]) {\n                if(dist[child]<=node[1]+1) continue;\n                dist[child] = node[1]+1;\n                q.offer(new int[]{child, node[1]+1});\n            }\n        }\n        return dist[dest];\n    }\n}",
    "submit_ts": "1722743925",
    "subm_id": "1343802817"
}