{
    "username": "Aditya_Prajapati",
    "submission": "class TriesNodeDS {\npublic:\n    //\n    unordered_map<char, TriesNodeDS*> children;\n    //\n    int cost;\n    \n    TriesNodeDS() : cost(INT_MAX) {}\n};\n\nclass TrieDS {\npublic:\n    TriesNodeDS* root;\n    //\n    TrieDS() {\n        root = new TriesNodeDS();\n    }\n    //\n    void insert(const string& word, int cost) {\n        TriesNodeDS* node = root;\n        for (char c : word) {\n            //\n            if (!node->children.count(c)) {\n                node->children[c] = new TriesNodeDS();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string targetVal, vector<string>& wordsVec, vector<int>& costsArr) {\n        int n = targetVal.size();\n\n        TrieDS trie;\n        //\n        for (int i = 0; i < wordsVec.size(); ++i) {\n            trie.insert(wordsVec[i], costsArr[i]);\n        }\n        \n        //\n        vector<int> memoTable(n + 1, INT_MAX);\n\n        //////\n        memoTable[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (memoTable[i] == INT_MAX) {\n                continue;\n            }\n            //\n            TriesNodeDS* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(targetVal[j])){\n                    break;\n                }   \n                ////\n                node = node->children[targetVal[j]];\n                ///\n                if (node->cost != INT_MAX) {\n                    memoTable[j + 1] = min(memoTable[j + 1], memoTable[i] + node->cost);\n                }\n            }\n        }\n        \n        return memoTable[n] == INT_MAX ? -1 : memoTable[n];\n    }\n};",
    "submit_ts": "1720322666",
    "subm_id": "1312355931"
}