{
    "username": "zokumyoin",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\n\nclass Solution {\n    public List<Integer> countOfPeaks(int[] arr, int[][] queries) {\n\n        List<Integer> ans = new ArrayList<>();\n        BIT bit = new BIT(arr.length + 1);\n        for (int i = 0; i < arr.length; i++) {\n            if (isPeak(arr, i)) {\n                bit.add(i + 1, 1);\n            }\n        }\n\n        for (int i = 0; i < queries.length; i++) {\n            int[] q = queries[i];\n            if (q[0] == 1) {\n                int cnt = bit.sum(q[2] + 1) - bit.sum(q[1]);\n                if (isPeak(arr, q[1])) {\n                    cnt--;\n                }\n                if (q[1] != q[2] && isPeak(arr, q[2])) {\n                    cnt--;\n                }\n                ans.add(cnt);\n            } else {\n                int idx = q[1];\n                int val = q[2];\n                if (isPeak(arr,idx)) {\n                    bit.add(idx + 1, -1);\n                }\n                if (isPeak(arr, idx - 1)) {\n                    bit.add(idx, -1);\n                }\n                if (isPeak(arr, idx + 1)) {\n                    bit.add(idx + 2, -1);\n                }\n                arr[idx] = val;\n                if (isPeak(arr,idx)) {\n                    bit.add(idx + 1, 1);\n                }\n                if (isPeak(arr, idx - 1)) {\n                    bit.add(idx, 1);\n                }\n                if (isPeak(arr, idx + 1)) {\n                    bit.add(idx + 2, 1);\n                }\n            }\n\n        }\n        return ans;\n    }\n\n    private boolean isPeak(int[] arr, int i) {\n        if (i <= 0 || i >= arr.length - 1) {\n            return false;\n        }\n        return arr[i] > arr[i - 1] && arr[i] > arr[i + 1];\n    }\n\n\n    private class BIT {\n        int[] arr;\n\n        private BIT(int cap) {\n            arr = new int[cap + 1];\n        }\n\n        private int lowBit(int x) {\n            return x & (-x);\n        }\n\n        private void add(int position, int val) {\n            while (position < arr.length) {\n                arr[position] += val;\n                position += lowBit(position);\n            }\n        }\n\n        private int sum(int position) {\n            position = Math.min(position, arr.length - 1);\n            int sum = 0;\n            while (position > 0) {\n                sum += arr[position];\n                position -= lowBit(position);\n            }\n            return sum;\n        }\n    }\n}",
    "submit_ts": 1718506380.0
}