{
    "username": "Prathamesh_Srivastava",
    "submission": "class Solution {\n    public long countSubarrays(int[] A, int K) {\n        int N = A.length;\n        long[][] prefix = new long[N][30];\n        \n        for (int i = 0; i < N; i++) {\n            for (int bit = 0; bit < 30; bit++) {\n                if ((A[i] & (1L << bit)) != 0) {\n                    prefix[i][bit]++;\n                }\n            }\n            if (i == 0) continue;\n            for (int bit = 0; bit < 30; bit++) {\n                prefix[i][bit] += prefix[i - 1][bit];\n            }\n        }\n\n        long totalSub = 0;\n        for (int i = 0; i < N; i++) {\n            long low = 0, high = i;\n            long startIdx = -1;\n            while (low <= high) {\n                long mid = (low + high) >> 1;\n                if (solve(prefix, mid, i) >= K) {\n                    startIdx = mid;\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n            }\n            low = 0;\n            high = i;\n            long endIdx = -1;\n            while (low <= high) {\n                long mid = (low + high) >> 1;\n                if (solve(prefix, mid, i) <= K) {\n                    endIdx = mid;\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            if (startIdx != -1) \n                totalSub += (endIdx - startIdx + 1);\n        }\n        return totalSub;\n    }\n    \n    public long solve(long[][] prefix, long l, long r) {\n        if (r < l) return -1;\n        long res = 0;\n        for (int bit = 0; bit < 30; ++bit) {\n            long count = prefix[(int)r][bit];\n            if (l > 0)\n                count -= prefix[(int)l - 1][bit];\n            if (count == r - l + 1) res ^= (1L << bit);\n        }\n        return res;\n    }\n}\n",
    "submit_ts": "1720280768",
    "subm_id": "1311801371"
}