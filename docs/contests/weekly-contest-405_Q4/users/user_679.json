{
    "username": "sam_03",
    "submission": "// class Solution {\n// public:\n//     string target;\n//     vector<string> words;\n//     vector<int> costs,dp;\n\n//     int solve(int i)\n//     {\n//         if(i == target.size()) return 0;\n//         if(dp[i] != -1) return dp[i];\n//         int ans = 1e9;\n//         for(int j = 0; j < words.size(); j++)\n//         {\n//             if(words[j].length() <= target.length()-i && target.substr(i, words[j].length()) == words[j]) ans = min(ans, costs[j]+solve(i+words[j].length()));\n//         }\n//         return dp[i] = ans;\n//     }\n\n//     int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//         this->target = target;\n//         this->words = words;\n//         this->costs = costs;\n//         dp.assign(target.length(),-1);\n//         int ans = solve(0);\n//         if(ans >= 1e9) return -1;\n//         return ans;\n//     }\n// };\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int val;\n    bool is_end;\n\n    TrieNode() : children(26, nullptr), val(INT_MAX), is_end(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void add(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->val = min(cost, node->val);\n        node->is_end = true;\n    }\n\n    TrieNode* get_root() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t;\n        int n = target.size();\n        vector<int> mini(n + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); i++) {\n            t.add(words[i], costs[i]);\n        }\n\n        mini[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (mini[i] == INT_MAX) continue;\n\n            TrieNode* node = t.get_root();\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (!node->children[c - 'a']) break;\n                node = node->children[c - 'a'];\n                if (node->is_end) {\n                    mini[j + 1] = min(mini[j + 1], mini[i] + node->val);\n                }\n            }\n        }\n\n        return mini[n] == INT_MAX ? -1 : mini[n];\n    }\n};",
    "submit_ts": "1720322678",
    "subm_id": "1312356239"
}