{
    "username": "luyangg",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = None\n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        def insert(trie, word, cost):\n            node = trie\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            if not node.cost:\n                node.cost = cost\n            else:\n                node.cost = min(node.cost, cost)\n        n = len(target)\n        m = len(words)\n        trie = TrieNode()\n        for  i in range(m):\n            insert(trie, words[i], costs[i])\n        dp = [inf] * (n + 1)\n        dp[0] = 0  \n        for i in range(n):\n            if dp[i] == inf:\n                continue\n            node = trie\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost is not None:\n                    dp[j+1] = min(dp[j+1], dp[i] + node.cost)\n        return dp[n] if dp[n] != inf else -1",
    "submit_ts": "1720322009",
    "subm_id": "1312338273"
}