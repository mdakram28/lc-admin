{
    "username": "justinleung0204",
    "submission": "#Segment Tree template\nclass SegT:#assume agg=Math.max\n    def __init__(self,a):#O(n)\n        self.n=len(a)\n        self.arr=[None for _ in range(self.n)]+a #total 2n, [0] reserved empty\n        for i in range(self.n-1,0,-1):\n            self.arr[i]=(\n                self.arr[2*i]+\n                self.arr[2*i+1]\n                )\n        #print(self.arr)\n    \n    def get(self,l,r):#[l,r)        #O(logn)\n        l,r=l+self.n,r+self.n\n        res=0\n        while l<r:\n            if l&1:#is right\n                res+=self.arr[l]\n                l+=1\n            if r&1:\n                r-=1\n                res+=self.arr[r]\n            l>>=1\n            r>>=1\n        return res\n\n    def update(self,i,newVal):      #O(logn)\n        #note: max only allows increasing an element\n        #no effect if newVal<=a[i]\n        i+=self.n\n        self.arr[i]=newVal\n        i>>=1\n        while i>0:\n            #update parent\n            self.arr[i]=self.arr[2*i]+self.arr[2*i+1]\n            i>>=1\n\n    def print(self):\n        print(self.arr)\n        \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \"\"\"\n        peak = i-1 < i > i+1\n        \n        idont think segtree is doable=> seg to store cnt?\n        \n        try logic\n            assumption: point chaNge can only change local(I-1,I,I+1)=>JUST EXHAUST \n        \"\"\"\n        n=len(nums)\n        isPeak=[0 for _ in range(n)]\n        for i in range(1,n-1):\n            if nums[i-1]<nums[i] and nums[i]>nums[i+1]:\n                isPeak[i]=1\n        #print(isPeak)\n        \n        t=SegT(isPeak)\n        #t.print()\n        ans=[]\n        for cur in queries:\n            if cur[0]==1:\n                l,r=cur[1],cur[2]\n                ans.append(t.get(l+1,r))  #[l,r)\n            else:\n                i,newVal=cur[1],cur[2]\n                #update i\n                oldIsPeak= i-1>=0 and i+1<n and (nums[i-1]<nums[i] and nums[i]>nums[i+1])\n                newIsPeak= i-1>=0 and i+1<n and (nums[i-1]<newVal and newVal>nums[i+1])\n                if oldIsPeak^newIsPeak:#have changed\n                    t.update(i,1 if newIsPeak else 0)\n                \n                #update l\n                if i-1>=0:\n                    oldIsPeak= i-2>=0 and (nums[i-2]<nums[i-1] and nums[i-1]>nums[i])\n                    newIsPeak= i-2>=0 and (nums[i-2]<nums[i-1] and nums[i-1]>newVal)\n                    if oldIsPeak^newIsPeak:#have changed\n                        t.update(i-1,1 if newIsPeak else 0)\n                #update r\n                if i+1<n:\n                    oldIsPeak= i+2<n and (nums[i]<nums[i+1] and nums[i+1]>nums[i+2])\n                    newIsPeak= i+2<n and (newVal<nums[i+1] and nums[i+1]>nums[i+2])\n                    if oldIsPeak^newIsPeak:#have changed\n                        t.update(i+1,1 if newIsPeak else 0)\n                nums[i]=newVal\n                #t.print()\n\n\n        return ans\n                \n        \"\"\"\n        [3,9,5,4]\n        [[1,0,3],[2,1,4],[2,0,6],[1,2,3]]\n        \n        [3,4,5,4]\n        [6,4,5,4]\n        \"\"\"",
    "submit_ts": "1718508699",
    "subm_id": "1289688708"
}