{
    "username": "powertrout",
    "submission": "class Solution {\n    struct Node {\n        Node *childs[26];\n        bool end;\n        int cost;\n        Node() {\n            end = false;\n            for (int i = 0; i < 26; i++)\n                childs[i] = nullptr;\n        }\n    };\n    void insert(Node *root, string &key, int cost) {\n        Node *curr = root;\n        for (auto &c: key) {\n            if (curr->childs[c - 'a'] == nullptr) \n                curr->childs[c - 'a'] = new Node();\n            curr = curr->childs[c - 'a'];\n        }\n        if (curr->end) curr->cost = min(cost, curr->cost);\n        else curr->cost = cost;\n        curr->end = true;\n        \n    }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Node *root = new Node();\n        for (int i = 0; i < words.size(); i++)\n            insert(root, words[i], costs[i]);\n\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 1; i <= n; i++) {\n            if (dp[i - 1] == INT_MAX) continue;\n            Node *curr = root;\n            for (int j = i; j <= n && curr->childs[target[j - 1] - 'a'] != nullptr; j++) {\n                curr = curr->childs[target[j - 1] - 'a'];\n                if (curr->end) \n                    dp[j] = min(dp[j], curr->cost + dp[i - 1]);\n            }\n        }\n        return dp[n] == INT_MAX? -1: dp[n];\n    }\n};",
    "submit_ts": "1720323731",
    "subm_id": "1312382666"
}