{
    "username": "MeetBrahmbhatt",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int N = (int) edges1.size() + 1;\n        vector<vector<int>> G1(N);\n        for (int i = 0; i < N - 1; i++) {\n            int u = edges1[i][0];\n            int v = edges1[i][1];\n            G1[u].push_back(v);\n            G1[v].push_back(u);\n        }\n        \n        int M = (int) edges2.size() + 1;\n        vector<vector<int>> G2(M);\n        for (int i = 0; i < M - 1; i++) {\n            int u = edges2[i][0];\n            int v = edges2[i][1];\n            G2[u].push_back(v);\n            G2[v].push_back(u);\n        }\n        \n        int ans = 0;\n        \n        auto get_min_dep = [&] (vector<vector<int>> &G) {\n            int n = (int) G.size();\n            \n            vector<int> in(n);\n            function<void(int, int)> dfs = [&] (int u, int p) {  \n                for (int to : G[u]) {\n                    if (to != p) {\n                        dfs(to, u);\n                        in[u] = max(in[u], in[to] + 1);\n                    }\n                }\n            };\n            dfs(0, -1);\n            \n            int res = n;\n            function<void(int, int, int)> dfs2 = [&] (int u, int p, int out) {\n                res = min(res, max(in[u], out));\n                int mx = -1e6;\n                int smx = -1e6;\n                for (int to : G[u]) {\n                    if (to != p) {\n                        if (in[to] > mx) {\n                            smx = mx;\n                            mx = in[to];\n                        } else if (in[to] > smx) {\n                            smx = in[to];\n                        }\n                    }\n                }\n                ans = max({ans, mx + 1, mx + smx + 2});\n                for (int to : G[u]) {\n                    if (to != p) {\n                        int cur = (in[to] == mx ? smx : mx) + 1;\n                        int nout = max(out, cur) + 1;\n                        dfs2(to, u, nout);\n                    }\n                }\n            };\n            dfs2(0, -1, 0);\n            \n            return res;\n        };\n        ans = max(ans, get_min_dep(G1) + get_min_dep(G2) + 1);\n        return ans;\n    }\n};",
    "submit_ts": "1719718439",
    "subm_id": "1304417243"
}