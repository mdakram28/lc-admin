{
    "username": "sahusthitaprajna",
    "submission": "class Solution {\nprivate:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    void insertWord(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], costs[i]);\n        }\n\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (i > 0 && dp[i] == LLONG_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    long long newCost = (i > 0 ? dp[i] : 0) + node->cost;\n                    dp[j + 1] = min(dp[j + 1], newCost);\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : (int)dp[n];\n    }\n};",
    "submit_ts": "1720323176",
    "subm_id": "1312369180"
}