{
    "username": "sethles",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        // System.out.println(Arrays.toString(nums)+\"\\n\");\n        SegmentTree st = new SegmentTree(0, nums.length - 1);\n        boolean[] isPeak = new boolean[nums.length];\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                st.inc(i); isPeak[i] = true;\n            }\n        }\n        List<Integer> lis = new ArrayList<>();\n        for (int[] q : queries) {\n                            // System.out.println(Arrays.toString(nums)+\", \"+Arrays.toString(isPeak)+\".\");\n\n            if (q[0] == 1) {\n                int amt = st.inRange(q[1], q[2]);\n                if (isPeak[q[1]]) if (q[1] != q[2]) amt--;\n                if (isPeak[q[2]]) amt--;\n                lis.add(amt);\n                continue;\n            }\n            int pos = q[1], newVal = q[2];\n            int oldVal = nums[pos];\n            nums[pos] = newVal;\n            if (pos == 0) {\n                if (isPeak[1] && newVal >= nums[1]) {\n                    isPeak[1] = false;\n                    st.dec(1);\n                    continue;\n                }\n                if (!isPeak[1] && newVal < nums[1] && nums[2] < nums[1]) {\n                    isPeak[1] = true;\n                    st.inc(1);\n                    continue;\n                }\n                continue;\n            }\n            if (pos == nums.length - 1) {\n                if (isPeak[nums.length - 2] && newVal >= nums[nums.length - 2]) {\n                    isPeak[nums.length - 2] = false;\n                    st.dec(nums.length - 2);\n                    continue;\n                }\n                if (!isPeak[nums.length - 2] && newVal < nums[nums.length - 2] && nums[nums.length - 3] < nums[nums.length - 2]) {\n                    isPeak[nums.length - 2] = true;\n                    st.inc(nums.length - 2);\n                    continue;\n                }\n                continue;\n            }\n            // middle position.\n            update(pos - 1, isPeak, nums, st);\n            update(pos + 1, isPeak, nums, st);\n            update(pos, isPeak, nums, st);\n        }\n                            // System.out.println(Arrays.toString(nums)+\", \"+Arrays.toString(isPeak)+\".\");\n\n        return lis;\n    }\n    private void update(int pos, boolean[] isPeak, int[] ar, SegmentTree st) {\n        if (pos == 0 || pos == isPeak.length - 1) return;\n        boolean shouldBe = ar[pos] > ar[pos - 1] && ar[pos] > ar[pos + 1];\n        // System.out.println(shouldBe);\n        if (shouldBe && isPeak[pos]) return;\n        if (!shouldBe && !isPeak[pos]) return;\n        if (shouldBe) {\n            st.inc(pos);\n            isPeak[pos] = true;\n        } else {\n            st.dec(pos);\n            isPeak[pos] = false;\n        }\n    }\n}\nclass SegmentTree {\n    int l, r;\n    int mid, amt;\n    SegmentTree left, right;\n    public SegmentTree(int l, int r) {\n        this.l = l; this.r = r;\n        mid = (l + r) / 2;\n    }\n    public void inc(int pos) {\n        amt++;\n        if (l == r) return;\n        if (pos <= mid) {\n            if (left == null) left = new SegmentTree(l, mid);\n            left.inc(pos);\n        } else {\n            if (right == null) right = new SegmentTree(mid + 1, r);\n            right.inc(pos);\n        }\n    }\n    public void dec(int pos) {\n        amt--;\n        if (l == r) return;\n        if (pos <= mid) {\n            if (left == null) left = new SegmentTree(l, mid);\n            left.dec(pos);\n        } else {\n            if (right == null) right = new SegmentTree(mid + 1, r);\n            right.dec(pos);\n        }\n    }\n    public int inRange(int lr, int rr) {\n        if (lr <= l && rr >= r) return amt;\n        if (rr < l || lr > r) return 0;\n        return (left == null ? 0 : left.inRange(lr, rr)) + (right == null ? 0 : right.inRange(lr, rr));\n    }\n}",
    "submit_ts": 1718506683.0
}