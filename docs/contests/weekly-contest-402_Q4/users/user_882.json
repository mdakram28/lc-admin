{
    "username": "sachanharshit",
    "submission": "class Solution {\npublic:\n    class SegTree {\npublic:\n    int len;\n    vector<int> t;\n    vector<int> nums;\n    \n    SegTree() {\n        \n    }\n    SegTree(int l) : len(l), t(4 * l, 0) {}\n    \n    bool isPeak(int index) {\n        if (index <= 0 || index >= nums.size() - 1) return false;\n        return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n    }\n    void build(vector<int>& a, int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = isPeak(tl) ? 1 : 0;\n            return;\n        }\n        int tm = (tl + tr) / 2;\n        build(a, 2 * v, tl, tm);\n        build(a, 2 * v + 1, tm + 1, tr);\n        t[v] = t[2 * v] + t[2 * v + 1];\n    }\n    \n    int query(int v, int tl, int tr, int l, int r) {\n        if (tl > r || tr < l) return 0; \n        if (l <= tl && tr <= r) return t[v]; \n        int tm = (tl + tr) / 2;\n        int leftAns = query(2 * v, tl, tm, l, r);\n        int rightAns = query(2 * v + 1, tm + 1, tr, l, r);\n        return leftAns + rightAns;\n    }\n    \n    void update(int v, int tl, int tr, int id, int val) {\n        if (tl == id && tr == id) {\n            nums[id] = val;\n            t[v] = isPeak(id) ? 1 : 0;\n            return;\n        }\n        if (id > tr || id < tl) return;\n        int tm = (tl + tr) / 2;\n        update(2 * v, tl, tm, id, val);\n        update(2 * v + 1, tm + 1, tr, id, val);\n        t[v] = t[2 * v] + t[2 * v + 1];\n    }\n    void build(vector<int>& a) {\n        nums = a;\n        build(a, 1, 0, len - 1);\n    }\n    int query(int l, int r) {\n        return query(1, 0, len - 1, l + 1, r - 1); \n    }\n    void update(int id, int val) {\n        nums[id] = val;\n        update(1, 0, len - 1, id, val);\n        if (id > 0) update(1, 0, len - 1, id - 1, nums[id - 1]);\n        if (id < len - 1) update(1, 0, len - 1, id + 1, nums[id + 1]);\n    }\n};\n    vector<int> countOfPeaks(vector<int>& B, vector<vector<int>>& A) {\n        int n = B.size();\n         SegTree segTree(n);\n         segTree.build(B);\n          vector<int> res;\n\n    for (auto it : A) {\n        if (it[0] == 1) {\n            res.push_back(segTree.query(it[1], it[2]));\n        } else if (it[0] == 2) {\n            segTree.update(it[1], it[2]);\n        }\n    }\n        return res;\n\n    }\n};",
    "submit_ts": 1718508712.0
}