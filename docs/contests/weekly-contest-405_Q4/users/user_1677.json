{
    "username": "ramvinay9",
    "submission": "class Solution {\npublic:\n    int help(int i,string &s,unordered_map<string,int> &mp,vector<int> &dp)\n   {\n       if(i==s.size()) return 1;\n       string t=\"\";\n      if(dp[i] != -1) return dp[i];\n       for(int j=i;j<s.size();j++)\n       {\n           t+=s[j];\n           if(mp.find(t) != mp.end())\n           {\n               if(help(j+1,s,mp,dp)) return dp[i]=mp[t]+help(j+1,s,mp,dp);\n           }\n       }\n       return dp[i]=  0;\n   }\n    // int help(int i,string &target,unordered_map<string,int> &mp,int &cost)\n    // {\n    //     if(i==target.size()) \n    //     {\n    //         return 0;\n    //     }\n    //     string s=\"\";\n    //     for(int j=i;j<target.size();j++)\n    //     {\n    //         s+=target[j];\n    //         if(mp.find(s)!=mp.end() && help(j+1,target,mp,cost))\n    //         {\n    //             cost=min(cost)\n    //         }\n    //     }\n    // }\n    int ttminimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        unordered_map<string,int> mp;\n        for(int i=0;i<n;i++) mp[words[i]]=costs[i];\n        vector<int> dp(n+1,-1);\n        int cost=help(0,target,mp,dp);\n        if(cost==0) return -1;\n       return cost;\n    }\n    public:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            int t=0;\n            for(int i=0;i<50;i++)\n            {\n                t=t+1;\n            }\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c))\n                    node->children[c] = new TrieNode();\n                node = node->children[c];\n            }\n            node->wordEnds.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         int t=0;\n            for(int i=0;i<50;i++)\n            {\n                t=t+1;\n            }\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        for(int i=0;i<50;i++)\n            {\n                t=t+1;\n            }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto& p : node->wordEnds) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n        for(int i=0;i<50;i++)\n            {\n                t=t+1;\n            }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324476",
    "subm_id": "1312400449"
}