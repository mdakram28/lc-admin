{
    "username": "asyncoder",
    "submission": "class Solution {\npublic:\n    class Trie {\n        class Node {\n            public:\n            vector<Node*> next;\n            bool endOfWord;\n            int cost;\n            Node() {\n                next.resize(26, nullptr);\n                endOfWord = false;\n                cost = INT_MAX;\n            }\n        };  \n        Node* root;\n        public:\n        Trie() {\n            root = new Node();\n        }\n        \n        void addWord(string s, int cost) {\n            Node* curr = root;\n            for(char &c : s) {\n                if(curr->next[c - 'a'] == nullptr) {\n                    curr->next[c - 'a'] = new Node();\n                }\n                curr = curr->next[c - 'a'];\n            }\n            curr->endOfWord = true;\n            curr->cost = min(curr->cost, cost);\n        }\n        vector<int> dp;\n        int f(int i, string &target, Node *curr) {\n            // cout  <<\"\\n\" << i <<\" -- start \\n\";\n            int cpy = i;\n            if(i >= target.size()) {\n                // cout <<\"returning\\n\";\n                return 0;\n            } else if(dp[i] != -1) {\n                // cout <<\"cached\\n\";\n                return dp[i];\n            } else {\n                int minCost = INT_MAX;\n                // string word = \"\";\n                while(i < target.size()) {\n                    \n                    // word += target[i];\n                    // cout << word <<\" \";\n                    int idx = target[i] - 'a';\n                    if(curr->next[idx] == nullptr) {\n                        break;\n                    }\n                    curr = curr->next[idx];\n                    if(curr->endOfWord) {\n                        int nc =f(i + 1, target, root);\n                        if(nc != INT_MAX)\n                            minCost = min(minCost, curr->cost + nc);\n                    }\n                    i++;\n                }\n                // cout << i << \" \" << minCost <<\"\\n\";\n                return dp[cpy] = minCost;\n            }\n        }\n        int findMinCost(string target) {\n            dp.resize(target.size(), -1);\n            int c =  f(0, target, root);\n            if(c == INT_MAX) return -1;\n            return c;\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for(int i = 0; i < words.size(); i++) {\n            trie.addWord(words[i], costs[i]);\n        }\n        return trie.findMinCost(target);\n        \n    }\n};",
    "submit_ts": "1720322694",
    "subm_id": "1312356653"
}