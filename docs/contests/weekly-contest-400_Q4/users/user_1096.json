{
    "username": "a6hishekpandey",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        SegmentTree segTree = new SegmentTree(nums);\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1;\n            int r = n - 1;\n            while (r - l > 1) {\n                int mid = (l + r) / 2;\n                if (segTree.bitwiseAND(i, mid) >= k) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            if (l != i - 1) {\n                ans = Math.min(ans, Math.abs(segTree.bitwiseAND(i, l) - k));\n            }\n            ans = Math.min(ans, Math.abs(k - segTree.bitwiseAND(i, r)));\n        }\n        return ans;\n    }\n    \n    class SegmentTree {\n        int n;\n        int[] segTree;\n\n        public SegmentTree(int[] arr) {\n            n = arr.length;\n            segTree = new int[4 * n];\n            buildTree(arr, 0, 0, n - 1);\n        }\n\n        public void buildTree(int[] arr, int node, int s, int e) {\n            if (s == e) {\n                segTree[node] = arr[s];\n            }\n            else {\n                int mid = (s + e) / 2;\n                buildTree(arr, 2 * node + 1, s, mid);\n                buildTree(arr, 2 * node + 2, mid + 1, e);\n                segTree[node] = segTree[2 * node + 1] & segTree[2 * node + 2];\n            }\n        }\n\n        public int bitwiseAND(int l, int r)\n        {\n            return bitwiseAND(0, 0, n - 1, l, r);\n        }\n\n        public int bitwiseAND(int node, int s, int e, int l, int r) {\n            if (r < s || e < l) {\n                return Integer.MAX_VALUE;\n            }\n            \n            if (l <= s && e <= r) {\n                return segTree[node];\n            }\n            \n            int mid = (s + e) / 2;\n            int op1 = bitwiseAND(2 * node + 1, s, mid, l, r);\n            int op2 = bitwiseAND(2 * node + 2, mid + 1, e, l, r);\n            return op1 & op2;\n        }\n    }\n}",
    "submit_ts": "1717299599",
    "subm_id": "1274817819"
}