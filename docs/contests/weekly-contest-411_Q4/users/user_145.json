{
    "username": "David Li",
    "submission": "class Solution {\n    \n    long long t[(int)4e5 + 5];\n    long long lazy[(int)4e5 + 5];\n    \n    void init() {\n        memset(t, 0, sizeof(t));\n        memset(lazy, 0, sizeof(lazy));\n    }\n\n    void push(int v, int tl, int tr) {\n        int tm = (tl + tr) / 2;\n        t[v*2] += lazy[v] * (tm - tl + 1);\n        lazy[v*2] += lazy[v];\n        t[v*2+1] += lazy[v] * (tr - tm);\n        lazy[v*2+1] += lazy[v];\n        lazy[v] = 0;\n    }\n\n    void update(int v, int tl, int tr, int l, int r, int addend) {\n        if (l > r) \n            return;\n        if (l == tl && tr == r) {\n            t[v] += addend * (tr - tl + 1);\n            lazy[v] += addend;\n        } else {\n            push(v, tl, tr);\n            int tm = (tl + tr) / 2;\n            update(v*2, tl, tm, l, min(r, tm), addend);\n            update(v*2+1, tm+1, tr, max(l, tm+1), r, addend);\n            t[v] = t[v*2] + t[v*2+1];\n        }\n    }\n\n    long long query(int v, int tl, int tr, int l, int r) {\n        if (l > r)\n            return 0;\n        if (l == tl && tr == r)\n            return t[v];\n        push(v, tl, tr);\n        int tm = (tl + tr) / 2;\n        return query(v*2, tl, tm, l, min(r, tm)) + \n                   query(v*2+1, tm+1, tr, max(l, tm+1), r);\n    }\n    \npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        init();\n        int N = s.size();\n        \n        map<int, vector<pair<int, int>>> q;\n        for(int i = 0; i < queries.size(); i++) {\n            q[queries[i][1]].push_back({queries[i][0], i});\n        }\n        \n        int a = (s[0] == '0');\n        int b = 1-a;\n        int r = 0;\n        vector<int> ends;\n        for(int l = 0; l < N; l++) {\n            while(r < N && (a <= k || b <= k)) {\n                r++;\n                if(s[r] == '0') {\n                    a++;\n                } else {\n                    b++;\n                }\n            }\n            update(1, 0, N, l, l, r - l);\n            ends.push_back(r - 1);\n            if(s[l] == '0')\n                a--;\n            else\n                b--;\n        }\n        \n        \n        vector<long long> ans(queries.size());\n        int ptr = N - 1;\n        for(int r = N - 1; r >= 0; r--) {\n            for(auto [l, i]: q[r]) {\n                ans[i] = query(1, 0, N, l, r);\n            }\n            while(ptr >= 0 && ends[ptr] >= r) {\n                ptr--;\n            }\n            update(1, 0, N, ptr + 1, r, -1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723952928",
    "subm_id": "1359808105"
}