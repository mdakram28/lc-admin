{
    "username": "pythonkiddo",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        // To store top 3 values and their positions for rows and columns\n        vector<tuple<long long, int>> rowTop3[m];\n        vector<tuple<long long, int>> colTop3[n];\n\n        // Find top 3 values for each row\n        for (int i = 0; i < m; ++i) {\n            vector<pair<long long, int>> values;\n            for (int j = 0; j < n; ++j) {\n                values.emplace_back(static_cast<long long>(board[i][j]), j);\n            }\n            sort(values.rbegin(), values.rend()); // Sort in descending order\n            rowTop3[i].assign(values.begin(), values.begin() + min(3, (int)values.size()));\n        }\n\n        // Find top 3 values for each column\n        for (int j = 0; j < n; ++j) {\n            vector<pair<long long, int>> values;\n            for (int i = 0; i < m; ++i) {\n                values.emplace_back(static_cast<long long>(board[i][j]), i);\n            }\n            sort(values.rbegin(), values.rend()); // Sort in descending order\n            colTop3[j].assign(values.begin(), values.begin() + min(3, (int)values.size()));\n        }\n\n        // Store all top values and positions\n        vector<tuple<long long, int, int>> candidates;\n        for (int i = 0; i < m; ++i) {\n            for (auto& [value, j] : rowTop3[i]) {\n                candidates.emplace_back(value, i, j);\n            }\n        }\n        for (int j = 0; j < n; ++j) {\n            for (auto& [value, i] : colTop3[j]) {\n                candidates.emplace_back(value, i, j);\n            }\n        }\n\n        long long maxSum = LLONG_MIN;\n\n        // Brute force over candidates\n        int len = candidates.size();\n        for (int i = 0; i < len; ++i) {\n            for (int j = i + 1; j < len; ++j) {\n                for (int k = j + 1; k < len; ++k) {\n                    auto [value1, r1, c1] = candidates[i];\n                    auto [value2, r2, c2] = candidates[j];\n                    auto [value3, r3, c3] = candidates[k];\n\n                    // Check if the rooks do not attack each other\n                    if (r1 != r2 && r1 != r3 && r2 != r3 && c1 != c2 && c1 != c3 && c2 != c3) {\n                        long long sum = value1 + value2 + value3;\n                        maxSum = max(maxSum, sum);\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723909793",
    "subm_id": "1359206006"
}