{
    "username": "mazinkarjikar",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        set<pair<int,int>> ranges;\n        vector<int> ans;\n        int best = n-1;\n        for(auto v: queries) {\n            int l = v[0], r = v[1];\n            // check if consumed\n            auto it = ranges.lower_bound({l,-1});\n            if ((it != ranges.end() and it->first == l and it->second >= r) or\n                (it != ranges.begin() and prev(it) != ranges.end() and prev(it)->first <= l and\n                prev(it)->second >= r)) {\n                ans.push_back(best);\n                continue;\n            }\n            // consume if possible\n            while (it != ranges.end()) {\n                auto it2 = ranges.end();\n                auto [L, R] = *it;\n                // cout << L << \" \" << R << endl;\n                if (L >= l and R <= r) {\n                    it2 = next(it);\n                    ranges.erase({L,R});\n                    // add back to best\n                    best += (R - L - 1);\n                }\n                it = it2;\n            }\n            // cnt is how much u consumed (gain in distance)\n            ranges.insert({l, r});\n            best -= r-l-1;\n            ans.push_back(best);\n            \n        }\n        return ans;\n\n    }\n};",
    "submit_ts": "1722743922",
    "subm_id": "1343802746"
}