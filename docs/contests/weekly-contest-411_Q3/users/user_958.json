{
    "username": "wisdompeak",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) \n    {\n        string ss;\n            for (int i=0; i<n; i++)\n                ss.push_back('9');\n        if (k==1) return ss;\n        if (k==2)\n        {\n            ss[0] = '8';\n            ss[n-1] = '8';\n            return ss;                \n        }\n        if (k==4 && n>=2)\n        {\n            ss[0] = '8';\n            ss[1] = '8';\n            ss[n-2] = '8';\n            ss[n-1] = '8';\n            return ss;                \n        }\n        if (k==8 && n>=3)\n        {\n            ss[0] = '8';\n            ss[1] = '8';\n            ss[2] = '8';\n            ss[n-3] = '8';\n            ss[n-2] = '8';\n            ss[n-1] = '8';\n            return ss;                \n        }\n        if (k==5)\n        {\n            ss[0] = '5';\n            ss[n-1] = '5';\n            return ss;                \n        }\n        \n        string s;\n        if (n%2==0)\n            for (int i=0; i<n/2; i++)\n                s.push_back('9');\n        else\n            for (int i=0; i<(n+1)/2; i++)\n                s.push_back('9');\n        \n        if (k%2==0)\n        {\n            s[0] = '8';\n        }\n        \n        while (1)\n        {\n            if (check(s, k, n%2))\n                return doubleLen(s, n%2);\n            s = subtractOne(s);\n        }        \n        return \"-1\";\n    }\n    \n    string doubleEven(string& s)\n    {\n        int n = s.size();\n        string t = s;\n        for (int i=n-1; i>=0; i--)\n            t.push_back(s[i]);\n        return t;\n    }\n    \n    string doubleOdd(string& s)\n    {\n        int n = s.size();\n        string t = s;\n        for (int i=n-2; i>=0; i--)\n            t.push_back(s[i]);\n        return t;\n    }\n    \n    string doubleLen(string&s, int flag)\n    {\n        if (flag==0)\n            return doubleEven(s);\n        else\n            return doubleOdd(s);\n    }\n    \n    std::string subtractOne(const std::string& num_str) \n    {\n        std::string result = num_str;\n        int n = result.size();\n\n        int i = n - 1;\n        while (i >= 0) {\n            if (result[i] > '0') {\n                result[i]--;\n                break;\n            } else {\n                result[i] = '9';\n                i--;\n            }\n        }\n\n        if (result[0] == '0') {\n            result.erase(0, result.find_first_not_of('0'));\n        }\n\n        if (result.empty()) {\n            return \"0\";\n        }\n\n        return result;\n    }\n    \n    bool isDivisibleBy(const std::string& num_str, int k) \n    {\n        int n = num_str.size();        \n        \n        int mod = 0;\n        for (char digit : num_str) {\n            mod = (mod * 10 + (digit - '0')) % k;\n        }\n        return mod == 0;\n    }\n    \n    bool check(string& s, int k, int flag)\n    {\n        int n = s.size();\n        if (k==1) return true;\n        if (k==2) return (s[0]-'0')%2==0;\n        if (k==4)\n        {\n            if (n==1) return (s[0]-'0')%4==0;\n            else return ((s[1]-'0')*10+(s[0]-'0'))%4==0;         \n        }\n        if (k==3)\n        {\n            int sum = 0;\n            for (auto ch:s)\n                sum += ch-'0';\n            sum *= 2;\n            if (flag==1) sum -= (s[n-1]-'0');\n            return sum %3==0;\n        }\n        if (k==6)\n        {\n            if (!check(s, 2, flag)) return false;\n            int sum = 0;\n            for (auto ch:s)\n                sum += ch-'0';\n            sum *= 2;\n            if (flag==1) sum -= (s[n-1]-'0');\n            return sum %3==0;\n        }\n        if (k==5) return (s[0]=='0' || s[0]=='5');\n        if (k==8)\n        {\n            if (n<=3) return isDivisibleBy(doubleLen(s, flag), 8);\n            else return ((s[2]-'0')*100+(s[1]-'0')*10+(s[0]-'0'))%8==0;         \n        }\n        \n        string t = doubleLen(s, flag);\n        return isDivisibleBy(t, k);\n    }\n};",
    "submit_ts": "1723953340",
    "subm_id": "1359818643"
}