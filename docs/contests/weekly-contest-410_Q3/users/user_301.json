{
    "username": "Fasdr",
    "submission": "class Solution {\n    public int countOfPairs(int[] nums) {\n        // O(n * m * m)\n        int m = 0;\n        for (int num : nums) {\n            m = Math.max(m, num);\n        }\n        int mod = 1_000_000_007;\n        int n = nums.length;\n        // taken numbers from the end, the size of the first number -> different options\n        int[][] dp = new int[n][m + 1];\n        for (int first = 0; first <= nums[n - 1]; first++) {\n            dp[n - 1][first] = 1;\n        }\n        for (int i = n - 2; i >= 0; i--) {\n            // choose how much goes to the first number\n            for (int first = 0; first <= nums[i]; first++) {\n                // how much is left to the second number\n                int second = nums[i] - first;\n                // choose how much goes to the next first number\n                for (int nextFirst = first; nextFirst <= nums[i + 1]; nextFirst++) {\n                    int nextSecond = nums[i + 1] - nextFirst;\n                    if (first <= nextFirst && second >= nextSecond) {\n                        dp[i][first] = (dp[i][first] + dp[i + 1][nextFirst]) % mod;\n                    }\n                }\n            }\n        }\n        \n        int res = 0;\n        for (int first = 0; first <= nums[0]; first++) {\n            res = (res + dp[0][first]) % mod;\n        }\n        return res;\n    }\n}",
    "submit_ts": "1723344747",
    "subm_id": "1351541161"
}