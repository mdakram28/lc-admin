{
    "username": "amsraman",
    "submission": "class Solution {\npublic:\n    int rect_area(vector<pair<int, int>> & pts) {\n        int x1 = 1e9, x2 = -1, y1 = 1e9, y2 = -1;\n        for(auto [x, y]: pts) {\n            x1 = min(x1, x); x2 = max(x2, x);\n            y1 = min(y1, y); y2 = max(y2, y);\n        }\n        return max(0, x2 - x1 + 1) * max(0, y2 - y1 + 1);\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = (int) grid.size(), m = (int) grid[0].size(), ans = 1e9;\n        for(int it = 0; it < 4; it++) { // there is either a vertical separator or a horizontal one\n            vector<int> suf(n); vector<pair<int, int>> acc1, acc2, acc3;\n            for(int i = n - 1; i >= 0; i--) {\n                for(int j = 0; j < m; j++) {\n                    if(grid[i][j] == 1) {\n                        acc1.emplace_back(i, j);\n                    }\n                }\n                suf[i] = rect_area(acc1);\n            }\n            acc1.clear();\n            vector<int> pf(n, 1e9);\n            for(int i = 0; i < n; i++) { // over turning point of the top half\n                for(int j = 0; j < m; j++) { // over split point\n                    for(int x = 0; x <= i; x++) {\n                        for(int y = 0; y < m; y++) {\n                            if(grid[x][y] != 1) continue;\n                            if(y <= j) {\n                                acc1.emplace_back(x, y);\n                            } else {\n                                acc2.emplace_back(x, y);\n                            }\n                        }\n                    }\n                    pf[i] = min(pf[i], rect_area(acc1) + rect_area(acc2));\n                    acc1.clear(); acc2.clear();\n                }\n            }\n            ans = min(ans, suf[0]); ans = min(ans, pf[n - 1]); // try one or two\n            for(int i = 0; i < n - 1; i++) { // try three\n                ans = min(ans, pf[i] + suf[i + 1]);\n            }\n            for(int i = 0; i < n - 1; i++) {\n                for(int j = i + 1; j < n - 1; j++) {\n                    for(int x = 0; x < n; x++) {\n                        for(int y = 0; y < m; y++) {\n                            if(grid[x][y] == 0) continue;\n                            if(x <= i) {\n                                acc1.emplace_back(x, y);\n                            } else if(x <= j) {\n                                acc2.emplace_back(x, y);\n                            } else {\n                                acc3.emplace_back(x, y);\n                            }\n                        }\n                    }\n                    ans = min(ans, rect_area(acc1) + rect_area(acc2) + rect_area(acc3));\n                    acc1.clear(); acc2.clear(); acc3.clear();\n                }\n            }\n            vector<vector<int>> tg(m, vector<int>(n));\n            for(int i = 0; i < n; i++) {\n                for(int j = 0; j < m; j++) {\n                    tg[j][n - i - 1] = grid[i][j];\n                }\n            }\n            grid = tg; swap(n, m);\n        }\n        return ans;\n    }\n};\n// (30 choose 4) * (30 choose 2) <= 30^6.",
    "submit_ts": 1719112312.0
}