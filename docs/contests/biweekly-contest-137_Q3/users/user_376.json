{
    "username": "Abhishek Gangwar",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        long long ans = LLONG_MIN; // Initialize the answer with the smallest possible value\n        \n        // Initialize and fill the bb vector with triplets (value, row, col)\n        vector<vector<pair<int, pair<int, int>>>> bb(n, vector<pair<int, pair<int, int>>>(m));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                bb[i][j] = {board[i][j], {i, j}};\n            }\n        }\n\n        // Sort each row of bb based on values in descending order\n        for (int i = 0; i < n; i++) {\n            sort(bb[i].begin(), bb[i].end(), greater<>());\n        }\n\n        // Triple nested loop to find maximum sum\n        for (int i = 0; i < n; i++) {\n            for (int x = 0; x < 3; x++) { // Consider top 3 values in the row\n                auto a = bb[i][x];\n                for (int j = 0; j < n; j++) {\n                    if (j == i) continue;\n                    for (int y = 0; y < 3; y++) {\n                        auto b = bb[j][y];\n                        // Ensure columns are different\n                        if (b.second.second == a.second.second) continue;\n                        for (int k = 0; k < n; k++) {\n                            if (k == i || k == j) continue;\n                            for (int z = 0; z < 3; z++) {\n                                auto c = bb[k][z];\n                                // Ensure all columns are different\n                                if (c.second.second == a.second.second || c.second.second == b.second.second) continue;\n                                ans = max(ans, 1LL * a.first + b.first + c.first);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1723909854",
    "subm_id": "1359208252"
}