{
    "username": "pka5667",
    "submission": "class Solution {\n    void dfs(map<int, vector<int>> &m, int src, int d, vector<bool> &visited, int &mxD, int &mxNode){\n        if(visited[src])\n            return;\n\n        if(d > mxD){\n            mxD = d;\n            mxNode = src;\n        }\n        \n        visited[src] = true;\n        for(int nbr:m[src]){\n            if(!visited[nbr]){\n                dfs(m, nbr, d+1, visited, mxD, mxNode);\n            }\n        }\n    }\n\n\n    int d(map<int, vector<int>> m){\n        if(m.size() == 0)\n            return 0;\n\n        vector<bool> visited(m.size(), false);\n        int mxD=-1, mxNode=-1;\n        dfs(m, 0, 0, visited, mxD, mxNode);\n\n        mxD = -1;\n        for(int i=0; i<visited.size(); i++)\n            visited[i]=false;\n        \n        dfs(m, mxNode, 0, visited, mxD, mxNode);\n        return mxD;\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        map<int, vector<int>> m1, m2;\n        for(auto e:edges1){\n            m1[e[0]].push_back(e[1]);\n            m1[e[1]].push_back(e[0]);\n        }\n\n        for(auto e:edges2){\n            m2[e[0]].push_back(e[1]);\n            m2[e[1]].push_back(e[0]);\n        }\n\n        // cout<<d(m1)<<\" \"<<d(m2)<<endl;\n\n        int a = d(m1);\n        int b = d(m2);\n\n        return max({a, b, a/2+a%2 + b/2+b%2 + 1});\n    }\n};",
    "submit_ts": 1719717353.0
}