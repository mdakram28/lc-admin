{
    "username": "ocavue",
    "submission": "from typing import List\n\n\ndef get_distance(d: List[tuple], i: int):\n    if d[0][1] == i:\n        return d[-1][0] - d[1][0]\n    if d[-1][1] == i:\n        return d[-2][0] - d[0][0]\n    return d[-1][0] - d[0][0]\n\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        d1 = sorted([(+x + y, i) for i, (x, y) in enumerate(points)])\n        d2 = sorted([(+x - y, i) for i, (x, y) in enumerate(points)])\n        d3 = sorted([(-x + y, i) for i, (x, y) in enumerate(points)])\n        d4 = sorted([(-x - y, i) for i, (x, y) in enumerate(points)])\n\n        best = 10**9\n\n        for i, (x, y) in enumerate(points):\n            best = min(\n                best,\n                max(\n                    get_distance(d1, i),\n                    get_distance(d2, i),\n                    get_distance(d3, i),\n                    get_distance(d4, i),\n                ),\n            )\n\n        return best\n "
}