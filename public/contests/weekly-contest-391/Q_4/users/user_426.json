{
    "username": "kesshb",
    "submission": "class Solution {\n\n  public static void main(String... args) {\n    Solution solution = new Solution();\n\n\n  }\n\n  public int minimumDistance(int[][] points) {\n    Arrays.sort(points, (a, b) -> compare(a, b));\n    int minX = Integer.MAX_VALUE;\n    int minY = Integer.MAX_VALUE;\n    int maxX = Integer.MIN_VALUE;\n    int maxY = Integer.MIN_VALUE;\n    for (int[] point : points) {\n      int x = point[0];\n      int y = point[1];\n      minX = Math.min(minX, x);\n      minY = Math.min(minY, y);\n      maxX = Math.max(maxX, x);\n      maxY = Math.max(maxY, y);\n    }\n\n    List<int[]> corners = new ArrayList<>();\n    corners.add(new int[] {minX, minY});\n    corners.add(new int[] {minX, maxY});\n    corners.add(new int[] {maxX, minY});\n    corners.add(new int[] {maxX, maxY});\n\n    List<Integer> dists = new ArrayList<>();\n    List<int[]> pointsIndexes = new ArrayList<>();\n    for (int[] corner : corners) {\n      int closest = closest(points, corner);\n      int farthest = farthest(points, corner);\n      int[] close = points[closest];\n      int[] far = points[farthest];\n      int d = distance(close, far);\n      dists.add(d);\n      pointsIndexes.add(new int[] {closest, farthest});\n    }\n    int maxIndex = -1;\n    int max = Integer.MIN_VALUE;\n    for (int i = 0; i < dists.size(); i++) {\n      int d = dists.get(i);\n      if (d > max) {\n        max = d;\n        maxIndex = i;\n      }\n    }\n    int[] indexes = pointsIndexes.get(maxIndex);\n    int a = indexes[0];\n    int b = indexes[1];\n    int[][] newPoints = new int[points.length - 1][2];\n    for (int i = 0, j = 0; i < points.length; i++) {\n      if (i == a) {\n        continue;\n      }\n      newPoints[j++] = points[i];\n    }\n    int result = result(newPoints);\n    newPoints = new int[points.length - 1][2];\n    for (int i = 0, j = 0; i < points.length; i++) {\n      if (i == b) {\n        continue;\n      }\n      newPoints[j++] = points[i];\n    }\n    return Math.min(result, result(newPoints));\n  }\n  \n  private int result(int[][] points) {\n    Arrays.sort(points, (a, b) -> compare(a, b));\n    int minX = Integer.MAX_VALUE;\n    int minY = Integer.MAX_VALUE;\n    int maxX = Integer.MIN_VALUE;\n    int maxY = Integer.MIN_VALUE;\n    for (int[] point : points) {\n      int x = point[0];\n      int y = point[1];\n      minX = Math.min(minX, x);\n      minY = Math.min(minY, y);\n      maxX = Math.max(maxX, x);\n      maxY = Math.max(maxY, y);\n    }\n\n    List<int[]> corners = new ArrayList<>();\n    corners.add(new int[] {minX, minY});\n    corners.add(new int[] {minX, maxY});\n    corners.add(new int[] {maxX, minY});\n    corners.add(new int[] {maxX, maxY});\n\n    List<Integer> dists = new ArrayList<>();\n    List<int[]> pointsIndexes = new ArrayList<>();\n    for (int[] corner : corners) {\n      int closest = closest(points, corner);\n      int farthest = farthest(points, corner);\n      int[] close = points[closest];\n      int[] far = points[farthest];\n      int d = distance(close, far);\n      dists.add(d);\n      pointsIndexes.add(new int[] {closest, farthest});\n    }\n    int max = Integer.MIN_VALUE;\n    for (int i = 0; i < dists.size(); i++) {\n      int d = dists.get(i);\n      if (d > max) {\n        max = d;\n      }\n    }\n    return max;\n  }\n\n  private int closest(int[][] points, int[] corner) {\n    int curr = -1;\n    int min = Integer.MAX_VALUE;\n    for (int i = 0; i < points.length; i++) {\n      int[] p = points[i];\n      int d = distance(p, corner);\n      if (d < min) {\n        min = d;\n        curr = i;\n      }\n    }\n    return curr;\n  }\n\n  private int farthest(int[][] points, int[] corner) {\n    int curr = -1;\n    int max = Integer.MIN_VALUE;\n    for (int i = 0; i < points.length; i++) {\n      int[] p = points[i];\n      int d = distance(p, corner);\n      if (d > max) {\n        max = d;\n        curr = i;\n      }\n    }\n    return curr;\n  }\n\n  private int distance(int[] a, int[] b) {\n    return Math.abs(a[0] - b[0]) + Math.abs(a[1] - b[1]);\n  }\n\n  private int compare(int[] a, int[] b) {\n    if (a[0] == b[0]) {\n      return a[1] - b[1];\n    }\n    return a[0] - b[0];\n  }\n}"
}