{
    "username": "YubiDesu",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        TARGET_LEN = len(target)\n        dp = [math.inf for _ in range(TARGET_LEN+1)]\n        dp[0] = 0\n        \n        \n        N = len(words)\n        wordMap = {}\n        for i in range(N):\n            currWord = words[i]\n            currCost = costs[i]\n            \n            prevCost = wordMap.get(currWord, math.inf)\n            wordMap[currWord] = min(currCost, prevCost)\n        \n        # N = len(words)\n        # for i in range(N):\n        #     #\n        \n        \n\n        for i in range(TARGET_LEN+1):\n            # currSubStr = target[0:i]\n            if dp[i] == math.inf:\n                continue\n            \n            # for idx,word in enumerate(words):\n            for word in wordMap.keys():\n                wordEndIdx = i+len(word)\n                if wordEndIdx > TARGET_LEN:\n                    continue\n                \n                # wordCost = costs[idx]\n                wordCost = wordMap[word]\n                \n                oldVal = dp[wordEndIdx]\n                potentialNewVal = dp[i]+wordCost\n                if potentialNewVal < oldVal:\n                    # see if it even matches up\n                    if target[i:i+len(word)] == word:\n                        dp[wordEndIdx] = potentialNewVal\n                # # currSubStr\n                # if target[i:i+len(word)] == word:\n                #     prevVal = dp[i]\n                    \n        \n        # print(dp)\n\n        if dp[TARGET_LEN] != math.inf:\n            return dp[TARGET_LEN]\n        return -1",
    "submit_ts": "1720321909",
    "subm_id": "1312335543"
}