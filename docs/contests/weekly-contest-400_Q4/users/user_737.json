{
    "username": "Jyotheeswar",
    "submission": "#define INF INT32_MAX\n\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int search(int l, int r)\n    {\n        return search(0, 0, n - 1, l, r);\n    }\n\n    int search(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = search(2 * node + 1, start, mid, l, r);\n        int p2 = search(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        SegmentTree st(nums);\n        int ans = INF;\n        int n = nums.size();\n        for (int i = n - 1; i > -1; i--) {\n            int  r = n - 1, l = i - 1, mid;\n\n            while (r > 1 + l) {\n                mid = (l + r) / 2;\n                if (st.search(i, mid) < k)\n                    r = mid;\n                else\n                    l = mid;\n            }\n            if (l + 1 != i)\n                ans = min(ans, abs(st.search(i, l) - k));\n            ans = min(ans, abs(k - st.search(i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717299476.0
}