{
    "username": "purinliang",
    "submission": "class Solution {\n\n    int a[100005];\n\n    struct SparseTable {\n\n        static const int N = 100000 + 10;\n        static const int MAXLOGN = 18;\n\n        int n;\n        int log2[N];\n        int my[N][MAXLOGN];\n\n        void Init(int *a, int _n) {\n            n = _n;\n            for (int i = 2; i <= n; ++i)\n                log2[i] = log2[i >> 1] + 1;\n            for (int i = 1; i <= n; ++i) {\n                my[i][0] = a[i];\n            }\n            for (int j = 1; j <= log2[n]; ++j) {\n                for (int i = 1; i + (1 << j) - 1 <= n; ++i) {\n                    my[i][j] = my[i][j - 1] & my[i + (1 << (j - 1))][j - 1];\n                }\n            }\n        }\n\n        int Min(int l, int r) {\n            l = max(l, 1);\n            r = min(r, n);\n            if (l > r)\n                return -1;\n            int s = log2[r - l + 1];\n            return (my[l][s] & my[r - (1 << s) + 1][s]);\n        }\n\n    } st;\n\npublic:\n    long long countSubarrays(vector<int>& arr, int k) {\n        // \u5bf9\u4e8ek\u6765\u8bf4\uff0c\u5982\u679c\u67d0\u4e00\u4f4d\u88ab\u5f04\u62100\uff0c\u5c31\u8981l = r\u91cd\u65b0\u5f00\u59cb\n        int n = arr.size();\n        for (int i = 1; i <= n; ++i) {\n            a[i] = arr[i - 1];\n        }\n        st.Init(a, n);\n        long long res = 0;\n        for (int i = 1; i <= n; ++i) {\n            int leftmost = i;\n            for (int j = 18; j >= 0; --j) {\n                int nextleft = leftmost - (1 << j);\n                if (nextleft < 1) {\n                    continue;\n                }\n                if (st.Min(nextleft, i) >= k) {\n                    leftmost = nextleft;\n                    continue;\n                }\n            }\n            int rightmost = leftmost;\n            for (int j = 18; j >= 0; --j) {\n                int nextleft = rightmost + (1 << j);\n                if (nextleft > i) {\n                    continue;\n                }\n                if (st.Min(nextleft, i) == k) {\n                    rightmost = nextleft;\n                    continue;\n                }\n            }\n            if (st.Min(leftmost, i) == k) {\n                int len = rightmost - leftmost + 1;\n                res += len;\n                //cout << \"i = \" << i <<\" len = \" <<len<<endl;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720277994",
    "subm_id": "544560059"
}