{
    "username": "astronom1cal",
    "submission": "#include <iostream>\n#include <cstdlib>\n#include <ctime>\n#include <climits>\n#include <numeric>\n#include <iomanip>\n#include <fstream>\n#include <string>\n#include <algorithm>\n#include <cmath>\n#include <bitset>\n#include <utility>\n#include <array>\n#include <vector>\n#include <deque>\n#include <forward_list>\n#include <list>\n#include <set>\n#include <unordered_set>\n#include <map>\n#include <unordered_map>\n#include <stack>\n#include <queue>\n#include <functional>\n#include <popcntintrin.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\n// LLONG_MAX is 9,223,372,036,854,775,807 (19 digits)\n// ULLONG_MAX is 18,446,744,073,709,551,615 (20 digits)\n\nusing namespace __gnu_pbds;\ntemplate <typename T>\nusing ordered_set = tree<T, null_type, std::less<T>, rb_tree_tag, tree_order_statistics_node_update>;\ntemplate <typename T>\nusing ordered_multiset = tree<std::pair<T, T>, null_type, std::less<std::pair<T, T>>, rb_tree_tag, tree_order_statistics_node_update>;\n\n// use a map to keep track of duplicates in ordered multiset, like 2-1, 2-2, 2-3, and so on\n\nusing ll = long long;\nusing ld = long double;\nusing namespace std;\n\nclass Solution\n{\npublic:\n    int numberOfAlternatingGroups(vector<int> &colors, int k)\n    {\n        ll n = (ll) colors.size();\n\n        deque<ll> dq;\n        ll need = 0;\n\n        for (ll i = 0; i < k; i++)\n        {\n            dq.push_back(colors[i]);\n            \n            if (i > 0 && colors[i] == colors[i - 1])\n            {\n                need = i;\n            }\n        }\n\n        ll ans = !need;\n\n        for (ll i = 1; i < n; i++)\n        {\n            dq.push_back(colors[(i + k - 1) % n]);\n            dq.pop_front();\n\n            if (need <= 1)\n            {\n                if (dq[k - 1] != dq[k - 2])\n                {\n                    ans++;\n                    need = 0;\n                }\n\n                else\n                {\n                    need = k - 1;\n                }\n            }\n            \n            else\n            {\n                if (dq[k - 1] != dq[k - 2])\n                {\n                    need--;\n                }\n\n                else\n                {\n                    need = k - 1;\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720278753",
    "subm_id": "1311722764"
}