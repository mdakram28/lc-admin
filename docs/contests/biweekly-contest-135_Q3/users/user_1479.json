{
    "username": "dumbunny8128",
    "submission": "class Solution:\n  '''notes\n  * n <= 1e5: O(N Log N)\n  * Replace any element with a number between 0 to k, k <= 1e5.\n  * final array: diff between element i and (n - i - 1) == k (same diffs?)\n  '''\n  def minChanges(self, nums: List[int], k: int) -> int:\n    n = len(nums)\n    n2 = n // 2\n\n    diffs = []\n    maxDiffs = []\n    for i in range(n2):\n      x, y = nums[i], nums[n - i - 1]\n      if x < y:\n        x, y = y, x\n      diffs.append(x - y)\n      maxDiffs.append(max(x, k - y))\n\n    dmds = sorted(zip(diffs, maxDiffs))\n    # print(f'dmds={dmds}')\n\n\n    diffCounts = defaultdict(int)\n    for diff in diffs:\n      diffCounts[diff] += 1\n\n    maxDiffCounts = defaultdict(int)\n    for maxDiff in maxDiffs:\n      maxDiffCounts[maxDiff] += 1\n    \n    mdcList = sorted(maxDiffCounts.items())\n    # Number of maxDiffs  <= diff.\n    pmaxDiffs = [0] * (k + 1)\n    psum = 0\n    iMdc = 0\n    for iMax in range(k + 1):\n      if iMdc < len(mdcList):\n        md, c = mdcList[iMdc]\n        if md == iMax:\n          psum += c\n          iMdc += 1\n      pmaxDiffs[iMax] = psum\n    # print(f'pmaxDiffs={pmaxDiffs}')\n\n    best = n\n    counts = sorted(diffCounts.values())\n    prevDiff = None\n\n    for i, (diff, maxDiff) in enumerate(dmds):\n      if diff == prevDiff:\n        continue\n      prevDiff = diff\n      # Check if this diff is the best.\n      count = diffCounts[diff]\n      # Find number of maxDiffs < diff\n      funnyDiffs = 0\n      for j in range(i, n2):\n        diff1, maxDiff1 = dmds[j]\n        if diff1 > diff:\n          break\n        if diff1 == diff and maxDiff1 < diff:\n          funnyDiffs += 1\n      allFunnyDiffs = pmaxDiffs[diff - 1] if diff > 0 else 0\n      # print(f'i={i}, diff={diff}, maxDiff={maxDiff} funnyDiffs={funnyDiffs}, allFunnyDiffs={allFunnyDiffs}')\n        \n\n      newBest = n2 - count + allFunnyDiffs - funnyDiffs # oh, no no.\n      best = min(best, newBest)\n\n\n    return best\n\n\n\n\n  '''\n  Find front-end diffs? order does not really matter then.\n\n  * best could be n // 2, if each num is random and large ...\n  * oh, k >= nums[i]. you have absolute freedom to replace each num with any other num.\n  * oops, have to replace num with a valid number in between 0 and k, or the cost is double.\n    that is where k is important. tricky.\n\n  The score for a target diff is the number of diffs with a different count\n   + number of diffs with a maxDiff < diff.\n\n  How best to sort the numbers for the final walk?\n    For each diffCount, can I store all pmaxDiffs? Not really, but I do want to\n    sort the whole list by (diff, maxDiff).\n\n  '''",
    "submit_ts": "1721489222",
    "subm_id": "1327446720"
}