{
    "username": "zsq007",
    "submission": "from sortedcontainers import SortedList\nclass SegTree:\n\n    def __init__(self, n: int):\n        self.n = 1<<n.bit_length()\n        self.tree = [0] * (self.n*2)\n\n    def update(self, ind: int, val: int):\n        ind += self.n\n        self.tree[ind] = val\n        while ind:\n            if ind&1:\n                self.tree[ind>>1] = max(self.tree[ind], self.tree[ind-1])\n            else:\n                self.tree[ind>>1] = max(self.tree[ind], self.tree[ind+1])\n            ind >>= 1\n    \n    def query(self, ind: int) -> int:\n        ind += self.n\n        res = self.tree[ind]\n        while ind > 1:\n            if ind&1 and res < self.tree[ind-1]:\n                res = self.tree[ind-1]\n            ind >>= 1\n        return res\n\n    def print(self):\n        print(self.tree)\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        axis, itvl, res = SortedList(), SegTree(max(q[1] for q in queries)+1), []\n        axis.add(0)\n        itvl.update(0,0)\n        for q in queries:\n            if q[0] == 1:\n                ind = axis.bisect(q[1])\n                if ind < len(axis):\n                    nxt = axis[ind]\n                    itvl.update(nxt, nxt-q[1])\n                itvl.update(q[1], q[1] - axis[ind-1])\n                axis.add(q[1])\n            else:\n                prev = axis[axis.bisect(q[1])-1]\n                mx = max(q[1]-prev, itvl.query(prev))\n                res.append(q[2] <= mx)\n        return res",
    "submit_ts": 1716649487.0
}