{
    "username": "Akshai",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.size();\n        vector<long long> dp(n, 0);\n        vector<long long> pre(n + 1, 0);\n        vector<long long> ans(queries.size(), 0);\n\n        int rightmost = -1;\n        int zeros = 0;\n        int ones = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (i != 0) {\n                if (s[i - 1] == '0')\n                    zeros--;\n                else\n                    ones--;\n            }\n            for (int j = rightmost + 1; j < n; j++) {\n                if (s[j] == '0')\n                    zeros++;\n                else\n                    ones++;\n                \n                if (zeros <= k || ones <= k)\n                    rightmost = j;\n                else\n                {\n                    if (s[j] == '0')\n                        zeros--;\n                    else\n                        ones--;\n\n                    break;\n                }\n            }\n\n            dp[i] = rightmost;\n        }\n\n        // for (int i = 0; i < n; i++)\n        //     cout << dp[i] << ' ';\n        // cout << endl;\n\n        for (int i = 1; i <= n; i++) {\n            pre[i] = pre[i - 1];\n            pre[i] += dp[i - 1] - i + 2;\n        }\n\n        // for (int i = 0; i < n; i++)\n        //     cout << pre[i] << ' ';\n        // cout << endl;\n\n\n\n\n        for (int i = 0; i < queries.size(); i++) {\n            auto &q = queries[i];\n            auto [l, r] = tie(q[0], q[1]);\n\n            auto funf = [&] (int x) {\n                return (dp[x] < r);\n            };\n\n            auto [a, b] = bsearch(l - 1, r + 1, funf);\n            // cout << i << ' ' << a << ' ' << b << endl;\n\n            if (a >= l) {\n                ans[i] += pre[a + 1] - pre[l];\n            }\n\n            if (b < r + 1) {\n                long long sz = r - b + 1;\n                ans[i] += (sz * (sz + 1))/2;\n            }\n        }\n\n        return ans;\n        \n    }\n\n\n    pair<int, int> bsearch(int l, int r, function<bool(int)> b) {\n\n\n        while (r - l > 1) {\n            int m = l + (r - l)/2;\n\n            if (b(m))\n                l = m;\n            else\n                r = m;\n        }\n\n        return {l, r};\n    }\n};",
    "submit_ts": "1723951717",
    "subm_id": "1359778390"
}