{
    "username": "shubham_rastogi",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        // int m = v.size();\n        // int n = v[0].size();\n        // int ones = 0;\n\n        // for(int i=0;i<m;i++){\n        //     for(int j=0;j<n;j++){\n        //         if(v[i][j] == 1) ones++;\n        //     }\n        // }\n        \n        // int temp = 0;\n        // unordered_map<int, unordered_map<int, int>> f;\n        // for(int i=0;i<m;i++){\n        //     int l = 0, h = n-1;\n        //     while(l < h){\n        //         if(v[i][l] != v[i][h]){\n        //             f[i][l]++;\n        //             f[i][h]++;\n        //             temp++;\n        //         }\n        //         l++;\n        //         h--;\n        //     }\n        // }\n        \n        // for(int i=0;i<n;i++){\n        //     int l = 0, h = m-1;\n        //     while(l < h){\n        //         if( (v[l][i] != v[h][i] ) && ( f[l][i] == 0 && f[h][i] == 0 )){\n        //             f[l][i]++;\n        //             f[h][i]++;\n        //             temp++;\n        //         }\n        //         else if(v[l][i] != v[h][i] ){\n        //             if(f[l][i] != 0 && f[h][i] != 0 ){\n        //                 f[l][i] = 0;\n        //                 if(v[l][i] == 1) ones--;\n        //             }\n        //             else if(f[l][i] != 0){\n        //                 f[l][i] = 0;\n        //                 if(v[l][i] == 1) ones--;\n        //             }\n        //             else if(f[h][i] != 0){\n        //                 f[h][i] = 0;\n        //                 if(v[h][i] == 1) ones--;\n        //             }\n        //         }\n        //         l++;\n        //         h--;\n        //     }\n        // }\n        // cout << ones << \" \" << temp << \"\\n\";  \n        // ones = ones%4;\n        // if(ones == 0 ){\n        //     return temp;\n        // }\n        // if(ones == 1){\n        //     return temp + 1;\n        // }\n        // if(ones == 2){\n        //     return temp + 2;\n        // }\n        // else{\n        //     return temp + 1;\n        // }\n\n        // return temp;\n        int n = grid.size();\n        int m = grid[0].size();\n        vector<vector<bool>> visited(n, vector<bool>(m, false));\n        int minNum = 0;\n        int num1 = 0;\n        bool hasSingleFlip = false;\n\n        for (int r = 0; r < n; ++r) {\n            for (int c = 0; c < m; ++c) {\n                int c0 = 0, c1 = 0;\n\n                if (!visited[r][c]) {\n                    visited[r][c] = true;\n                    if (grid[r][c] == 0) {\n                        ++c0;\n                    } else {\n                        ++c1;\n                    }\n                }\n                if (!visited[n - r - 1][c]) {\n                    visited[n - r - 1][c] = true;\n                    if (grid[n - r - 1][c] == 0) {\n                        ++c0;\n                    } else {\n                        ++c1;\n                    }\n                }\n                if (!visited[r][m - c - 1]) {\n                    visited[r][m - c - 1] = true;\n                    if (grid[r][m - c - 1] == 0) {\n                        ++c0;\n                    } else {\n                        ++c1;\n                    }\n                }\n                if (!visited[n - r - 1][m - c - 1]) {\n                    visited[n - r - 1][m - c - 1] = true;\n                    if (grid[n - r - 1][m - c - 1] == 0) {\n                        ++c0;\n                    } else {\n                        ++c1;\n                    }\n                }\n\n                int sum = c0 + c1;\n                if (sum == 0) {\n                    continue;\n                }\n                if (sum == 1) {\n                    if (c1 == 1) {\n                        ++minNum;\n                    }\n                }\n                if (sum == 2) {\n                    if (c1 == 1) {\n                        ++minNum;\n                        num1 += 2;\n                        hasSingleFlip = true;\n                    }\n                    if (c1 == 2) {\n                        num1 += 2;\n                    }\n                }\n                if (sum == 4) {\n                    minNum += min(c0, c1);\n                }\n            }\n        }\n\n        if (num1 % 4 == 0 || hasSingleFlip) {\n            return minNum;\n        }\n        minNum += 2;\n        return minNum;\n    }\n};",
    "submit_ts": "1722697470",
    "subm_id": "1343147693"
}