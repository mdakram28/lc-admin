{
    "username": "154775258",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n            auto diameter = [&](int n, const vector<vector<int>>& edges) -> int {  \n            map<int, vector<int>> g;  \n            for (const auto& edge : edges) {  \n                int u = edge[0], v = edge[1];  \n                g[u].push_back(v);  \n                g[v].push_back(u);  \n            }  \n            int diam = 0;  \n  \n            function<int(int, int)> dfs = [&](int u, int p) -> int {  \n                vector<int> h;  \n                for (int v : g[u]) {  \n                    if (v == p) continue;  \n                    h.push_back(dfs(v, u));  \n                }  \n                sort(h.rbegin(), h.rend()); // \u4f7f\u7528rbegin\u548crend\u8fdb\u884c\u964d\u5e8f\u6392\u5e8f  \n                if (h.empty()) return 1;  \n                if (h.size() == 1) {  \n                    diam = max(diam, h[0]);  \n                    return h[0] + 1;  \n                }  \n                diam = max(diam, h[0] + h[1]);  \n                return h[0] + 1;  \n            };  \n  \n            dfs(0, -1);  \n            return diam;  \n        };  \n  \n        int n1 = edges1.size() + 1;  \n        int n2 = edges2.size() + 1;  \n        int diam1 = diameter(n1, edges1);  \n        int diam2 = diameter(n2, edges2);  \n        int level1 = (diam1 + 1) / 2;  \n        int level2 = (diam2 + 1) / 2;  \n  \n        return max(level1 + level2 + 1, max(diam1, diam2));\n    }\n};",
    "submit_ts": "1719717772",
    "subm_id": "1304400368"
}