{
    "username": "SAURABH_PANDEY1008",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\n    const int mod = 1e9 + 7;\n    const int max_inversion = 400;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mp;\n        for (auto x : requirements) {\n            mp[x[0] + 1] = x[1];\n        }\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(max_inversion + 1, 0));\n        dp[0][0] = 1;\n        int len = 1;\n        \n        while (len <= n) {\n            for (int curr = 0; curr <= max_inversion; ++curr) {\n                for (int newpos = 0; newpos < len; ++newpos) {\n                    int prev = curr - newpos;\n                    if (prev >= 0) {\n                        dp[len][curr] = (dp[len][curr] + dp[len - 1][prev]) % mod;\n                    }\n                }\n            }\n\n            if (mp.count(len) > 0) {\n                int req = mp[len];\n                for (int curr = 0; curr <= max_inversion; ++curr) {\n                    if (curr != req) {\n                        dp[len][curr] = 0;\n                    }\n                }\n            }\n            len++;\n        }\n\n        long long res = 0;\n        for (int curr = 0; curr <= max_inversion; ++curr) {\n            res = (res + dp[n][curr]) % mod;\n        }\n        \n        return static_cast<int>(res);\n    }\n};\n\n",
    "submit_ts": "1719071255",
    "subm_id": "1296842610"
}