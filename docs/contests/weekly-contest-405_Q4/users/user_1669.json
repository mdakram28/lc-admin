{
    "username": "kusj",
    "submission": "class Solution \n{\npublic:\n  class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    bool isEnd;\n    int minCost;  // Store the minimum cost to reach this node\n\n    TrieNode() : isEnd(false), minCost(INT_MAX) {}\n\n    ~TrieNode() {\n        for (auto& kv : children) {\n            if (kv.second) delete kv.second;\n        }\n    }\n};\n\nvoid insertWord(TrieNode* root, const string& word, int cost) {\n    TrieNode* node = root;\n    for (char ch : word) {\n        if (!node->children.count(ch)) {\n            node->children[ch] = new TrieNode();\n        }\n        node = node->children[ch];\n    }\n    node->isEnd = true;\n    node->minCost = min(node->minCost, cost);\n}\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs)\n    {\n     TrieNode* root = new TrieNode();\n    int n = target.size();\n    vector<long long> dp(n + 1, LLONG_MAX);\n    dp[0] = 0; // Base case: no cost to form an empty string\n\n    // Build the Trie\n    for (int i = 0; i < words.size(); ++i) {\n        insertWord(root, words[i], costs[i]);\n    }\n\n    // Traverse through target\n    for (int i = 0; i < n; ++i) {\n        TrieNode* node = root;\n        for (int j = i; j < n; ++j) {\n            char ch = target[j];\n            if (!node->children.count(ch)) {\n                break; // No matching prefix in Trie\n            }\n            node = node->children[ch];\n            if (node->isEnd) {\n                if (dp[i] != LLONG_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n    }\n\n    long long result = dp[n];\n    delete root;\n    return result == LLONG_MAX ? -1 : result;\n    }\n};",
    "submit_ts": "1720322956",
    "subm_id": "1312363589"
}