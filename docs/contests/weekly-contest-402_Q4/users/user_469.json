{
    "username": "rudra_rps",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums, int v, int tl, int tr) {\n        if (tl == tr) {\n            tree[v] = (tl > 0 && tl < n - 1 && nums[tl] > nums[tl - 1] && nums[tl] > nums[tl + 1]) ? 1 : 0;\n        } else {\n            int tm = (tl + tr) / 2;\n            build(nums, v * 2, tl, tm);\n            build(nums, v * 2 + 1, tm + 1, tr);\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r) {\n            return 0;\n        }\n        if (l == tl && r == tr) {\n            return tree[v];\n        }\n        int tm = (tl + tr) / 2;\n        return query(v * 2, tl, tm, l, min(r, tm))\n             + query(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r);\n    }\n\n    void update(int v, int tl, int tr, int pos, const vector<int>& nums) {\n        if (tl == tr) {\n            tree[v] = (tl > 0 && tl < n - 1 && nums[tl] > nums[tl - 1] && nums[tl] > nums[tl + 1]) ? 1 : 0;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm) {\n                update(v * 2, tl, tm, pos, nums);\n            } else {\n                update(v * 2 + 1, tm + 1, tr, pos, nums);\n            }\n            tree[v] = tree[v * 2] + tree[v * 2 + 1];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 1, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n\n    void update(int pos, const vector<int>& nums) {\n        update(1, 0, n - 1, pos, nums);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n\n        vector<int> result;\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                result.push_back(segTree.query(li + 1, ri - 1));\n            } else if (query[0] == 2) {\n                int index = query[1];\n                int val = query[2];\n                nums[index] = val;\n                segTree.update(index, nums);\n                if (index > 0) segTree.update(index - 1, nums);\n                if (index < n - 1) segTree.update(index + 1, nums);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": 1718507635.0
}