{
    "username": "satyabratojha04",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size(), ans = INT_MAX;\n        vector<vector<int>> v(n, vector<int>(31, 0));\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < 31; j++) {\n                v[i][j] = (nums[i] >> j) & 1;\n                if (i > 0) {\n                    v[i][j] += v[i - 1][j];\n                }\n            }\n        }\n\n        for(int i=0;i<n;i++) {\n            int l = i, r = n-1;\n            while(l <= r) {\n                int mid = (l + r) / 2;\n                int rn = range(i, mid, v);\n                ans = min(ans, abs(rn - k));\n                \n                if(rn > k) {\n                    l = mid + 1;\n                }\n                else {\n                    r = mid - 1;\n                }\n            }\n        }\n\n        return ans;\n    }\n\n    int range(int l, int r, vector<vector<int>>& v) {\n        int res = 0;\n        for (int i = 0; i < 31; i++) {\n            int cnt = v[r][i] - (l > 0 ? v[l - 1][i] : 0);\n            if (cnt == r - l + 1) {\n                res |= (1 << i);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717298880.0
}