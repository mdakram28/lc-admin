{
    "username": "obe1",
    "submission": "class SegmentTree {\npublic:\n    vector<int> ans;\n    SegmentTree(int n) {\n        ans = vector<int>(4 * n + 5, 0);\n    }\n    \n    int update(int pos, int val, int L, int R, int index) {\n        if (L == R) {\n            ans[index] = val;\n            return val;\n        }\n        \n        int M = (L + R) / 2;\n        int l_idx = (index << 1) + 1;\n        int r_idx = (index << 1) + 2;\n        int v = 0;\n        if (M < pos) update(pos, val, M + 1, R, r_idx);\n        else update(pos, val, L, M, l_idx);\n        ans[index] = ans[l_idx] + ans[r_idx];\n        return ans[index];\n    }\n    \n    int query(int l, int r, int L, int R, int index) {\n        // cout << l << ' ' << r << ' ' << L << ' ' << R << ' ' << index << endl;\n        if (l == L && r == R) return ans[index];\n        int M = (L + R) / 2;\n        int l_idx = (index << 1) + 1;\n        int r_idx = (index << 1) + 2;\n        if (M >= r) return query(l, r, L, M, l_idx);\n        else if (M < l) return query(l, r, M + 1, R, r_idx);\n        return query(l, M, L, M, l_idx) + query(M + 1, r, M + 1, R, r_idx);\n    }\n};\n\nclass Solution {\npublic:\n    bool is_peak(vector<int> &nums, int idx) {\n        int n = nums.size();\n        if (idx == 0 || idx == n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree *st = new SegmentTree(n);\n        for (int i = 0; i < n; i++) {\n            if (is_peak(nums, i)) st -> update(i, 1, 0, n, 0);\n        }\n        \n        vector<int> res;\n        \n        for (auto query: queries) {\n            if (query[0] == 2) {\n                nums[query[1]] = query[2];\n                if (query[1] - 1 >= 0) {\n                    if (is_peak(nums, query[1] - 1)) st -> update(query[1] - 1, 1, 0, n, 0);\n                    else st -> update(query[1] - 1, 0, 0, n, 0);\n                }\n                if (query[1] + 1 < n) {\n                    if (is_peak(nums, query[1] + 1)) st -> update(query[1] + 1, 1, 0, n, 0);\n                    else st -> update(query[1] + 1, 0, 0, n, 0);\n                }\n                if (is_peak(nums, query[1])) st -> update(query[1], 1, 0, n, 0);\n                else st -> update(query[1], 0, 0, n, 0);\n            }\n            else {\n                int t = st -> query(query[1], query[2], 0, n, 0);\n                if (is_peak(nums, query[1])) t--;\n                if (is_peak(nums, query[2]) && query[1] != query[2]) t--;\n                res.push_back(t);\n            }\n        }\n        \n        return res;\n    }\n};",
    "submit_ts": 1718507616.0
}