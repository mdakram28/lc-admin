{
    "username": "naman21266",
    "submission": "struct Node{\n    Node* links[26];\n    int cnt;\n    bool containsKey(char ch){\n        return links[ch-'a']!=NULL;\n    }\n    void put(char ch, Node* t){\n        links[ch-'a'] = t;\n        links[ch-'a']->cnt = INT_MAX;\n    }\n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n    void inc(int cost){\n        cnt = min(cnt,cost);\n    }\n};\nclass Trie{\npublic:\n    Node* root;\n    Trie(){\n        root = new Node();\n    }\n    void insert(string& s, int cost){\n        Node* node = root;\n        for (int g=0; g<s.size(); g++){\n            if (node->containsKey(s[g])){\n                node = node->get(s[g]);\n            }\n            else{\n                node->put(s[g],new Node());\n                node = node->get(s[g]);\n            }\n        }\n        node->inc(cost);\n    }\n    \n};\nclass Solution {\npublic:\n    int dp[50002];\n    int func(int indx, string& target, Trie& trie){\n        if (indx == target.size()) return 0;\n        if (dp[indx]!=-1) return dp[indx];\n        int cost = 1e9;\n        Node* node = trie.root;\n        for (int h=indx; h<target.size(); h++){\n            if (node->containsKey(target[h])){\n                node = node->get(target[h]);\n                if (node->cnt!=INT_MAX){\n                    cost = min(cost,node->cnt + func(h+1,target,trie));\n                }\n            }\n            else break;\n        }\n        return dp[indx] = cost;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int g=0; g<words.size(); g++){\n            trie.insert(words[g],costs[g]);\n        }\n        memset(dp,-1,sizeof(dp));\n        int ans = func(0,target,trie);\n        return (ans == 1e9)  ? -1 : ans;\n    }\n};",
    "submit_ts": "1720321742",
    "subm_id": "1312331088"
}