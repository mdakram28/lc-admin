{
    "username": "light_44",
    "submission": "class Solution {\npublic:\n     class SegmentTreeAnd\n{\n    vector<int> arr, tree;\n    int n;\n    void segBuild(int node, int st, int en)\n    {\n        if (st > en)\n            return;\n        if (st == en)\n        {\n            tree[node] = arr[st];\n            return;\n        }\n        int md = st + (en - st) / 2;\n        segBuild(2 * node, st, md);\n        segBuild(2 * node + 1, md + 1, en);\n        tree[node] = tree[2 * node] & tree[2 * node + 1];\n    }\n    int segQuery(int node, int st, int en, int l, int r)\n    {\n        if (st > r || en < l)\n            return -1;\n        if (st >= l && en <= r)\n            return tree[node];\n        int md = st + (en - st) / 2;\n        int s1 = segQuery(2 * node, st, md, l, r);\n        int s2 = segQuery(2 * node + 1, md + 1, en, l, r);\n        return s1 & s2;\n    }\n \npublic:\n    SegmentTreeAnd(vector<int> &temp)\n    {\n        arr = temp;\n        n = arr.size();\n        tree.resize(4 * n, -1);\n        segBuild(1, 0, n - 1);\n    }\n    int query(int l, int r)\n    {\n        return segQuery(1, 0, n - 1, l, r);\n    }\n};\n\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        SegmentTreeAnd obj(nums);\n        long long ans = 0;\n        int n = nums.size();\n        for (int i = 0; i < n; ++i) {\n            int st = i, en = n - 1;\n            long long first = -1, last = -2;\n            while (st <= en) {\n                int md = st + (en - st) / 2;\n                int val = obj.query(i, md); \n                if(val == k)\n                {\n                    first = md; \n                    en = md-1; \n                }\n                else if(val > k)\n                    st = md+1; \n                else \n                    en = md-1; \n            }\n            st = i;\n            en = n - 1;\n            while (st <= en) {\n                int md = st + (en - st) / 2;\n                int val = obj.query(i, md); \n                if(val == k)\n                {\n                    last = md; \n                    st = md+1;  \n                }\n                else if(val > k)\n                    st = md+1; \n                else \n                    en = md-1; \n            }\n            // cout << first<<' '<<last<<endl; \n            if (first != -1 && last != -2) {\n                ans += (last - first + 1);\n            }\n        }\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1720279277",
    "subm_id": "1311744748"
}