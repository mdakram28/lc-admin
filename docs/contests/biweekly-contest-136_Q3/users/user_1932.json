{
    "username": "arnabm12345",
    "submission": "class Solution {\npublic:\n    int calculateShifts(vector<vector<int>>& grid, int midRow, int midCol, vector<int>& flips) {\n    int rows = grid.size();\n    int cols = grid[0].size();\n\n    if (rows % 2 == 1) {\n        int left = 0, right = cols - 1;\n        while (left < right) {\n            int sum = grid[midRow][left] + grid[midRow][right];\n            flips[sum]++;\n            left++;\n            right--;\n        }\n    }\n\n    if (cols % 2 == 1) {\n        int top = 0, bottom = rows - 1;\n        while (top < bottom) {\n            int sum = grid[top][midCol] + grid[bottom][midCol];\n            flips[sum]++;\n            top++;\n            bottom--;\n        }\n    }\n    \n    return (flips[2] % 2 == 1) ? (flips[1] > 0 ? flips[1] : 2) : flips[1];\n}\n\nint minFlips(vector<vector<int>>& grid) {\n    int numRows = grid.size();\n    int numCols = grid[0].size();\n    int totalFlips = 0;\n    int centerRow = numRows / 2;\n    int centerCol = numCols / 2;\n\n    // Check the central cell for odd dimensions\n    if (numRows % 2 == 1 && numCols % 2 == 1) {\n        if (grid[centerRow][centerCol] == 1) {\n            totalFlips++;\n        }\n    }\n\n    vector<int> flipsCount(3, 0);\n    totalFlips += calculateShifts(grid, centerRow, centerCol, flipsCount);\n\n    // Iterate over pairs of cells in four quadrants\n    for (int i = 0; i < centerRow; ++i) {\n        for (int j = 0; j < centerCol; ++j) {\n            int cell1 = grid[i][j];\n            int cell2 = grid[numRows - 1 - i][j];\n            int cell3 = grid[i][numCols - 1 - j];\n            int cell4 = grid[numRows - 1 - i][numCols - 1 - j];\n\n            int sum = cell1 + cell2 + cell3 + cell4;\n\n            if (sum != 0 && sum != 4) {\n                totalFlips += min(sum, 4 - sum);\n            }\n        }\n    }\n\n    return totalFlips;\n }\n};",
    "submit_ts": "1722699769",
    "subm_id": "1343221768"
}