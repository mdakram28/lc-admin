{
    "username": "guptashrey163",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n\n        int hCutsMade = 0;  \n        int vCutsMade = 0;  \n        long totalCost = 0;\n\n        int i = 0, j = 0;\n        while (i < hCuts.length && j < vCuts.length) {\n            if (hCuts[i] > vCuts[j]) {\n                totalCost += hCuts[i] * (vCutsMade + 1);\n                hCutsMade++;\n                i++;\n            } else {\n                totalCost += vCuts[j] * (hCutsMade + 1);\n                vCutsMade++;\n                j++;\n            }\n        }\n\n      \n        while (i < hCuts.length) {\n            totalCost += hCuts[i] * (vCutsMade + 1);\n            hCutsMade++;\n            i++;\n        }\n\n   \n        while (j < vCuts.length) {\n            totalCost += vCuts[j] * (hCutsMade + 1);\n            vCutsMade++;\n            j++;\n        }\n\n        return totalCost;\n\n    }\n}",
    "submit_ts": "1720926525",
    "subm_id": "1320288802"
}