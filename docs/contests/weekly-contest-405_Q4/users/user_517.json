{
    "username": "autumn_1eaf",
    "submission": "struct Node{\n    int cost;\n    bool wordComplete;\n    Node* children[26] = {0};\n    Node(): cost(1e9), wordComplete(false){};\n};\nclass Solution {\npublic:\n    vector<int> dp;\n    int helper(int index, Node* original, string& target,\n          Node* root){\n        Node* curr = original;\n        if(index == target.size()){\n            return curr -> wordComplete ? curr -> cost : 1e9;\n        }\n        \n        if(dp[index] != -1 && curr == root){\n            return dp[index];\n        }\n        char c = target[index];\n        int ci = c - 'a';\n        //notPick\n        int notPick = 1e9;\n        if(curr -> children[ci] != NULL){\n            notPick = helper(index+1, curr -> children[ci],target,  root);\n        }\n        \n        int pick = 1e9;\n        if(curr -> wordComplete){\n            pick = curr -> cost + helper(index, root, target, root);\n        }\n        int ans = min(pick, notPick);\n        if(original == root){\n            dp[index] = ans;\n        }\n        return ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        dp = vector<int>(target.size(), -1);\n        Node* root = new Node();\n        for(int i=0; i<words.size(); i++){\n            string& w = words[i];\n            Node* curr = root;\n            for(auto c: w){\n                if(curr -> children[c - 'a'] == NULL){\n                    curr -> children[c - 'a'] = new Node();\n                }\n                curr = curr -> children[c - 'a'];\n            }\n            curr -> wordComplete = true;\n            curr -> cost = min(curr -> cost, costs[i]);\n        }\n        Node* curr = root;\n        int res = helper(0, curr, target, root);\n        return res >= 1e9 ? -1 : res;\n    }\n};",
    "submit_ts": "1720322037",
    "subm_id": "1312338997"
}