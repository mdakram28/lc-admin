{
    "username": "aiyo_kingo",
    "submission": "class Solution {\npublic:\n    struct Node {\n        unordered_map<char, Node*> next;\n        vector<pair<int, int>> end; \n    };\n     void insert(string& word, int index, int cost) {\n            Node* node = trie;\n            for (char c : word) {\n                if (!node->next.count(c))\n                    node->next[c] = new Node();\n                node = node->next[c];\n            }\n            node->end.push_back({index, cost});\n    }\n    Node* trie;\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        trie=new Node;\n        for (int i = 0; i < words.size(); ++i)\n            insert(words[i], i, costs[i]);\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            Node* node = trie;\n            for (int j = i; j < n; ++j) {\n                if (!node->next.count(target[j])) break;\n                node = node->next[target[j]];\n                for (auto& q : node->end) {\n                    int in = q.first;\n                    int co = q.second;\n                    int len = words[in].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + co);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX) return -1;\n        return dp[n];\n}\n};",
    "submit_ts": "1720322961",
    "subm_id": "1312363714"
}