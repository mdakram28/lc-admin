{
    "username": "Qiye",
    "submission": "int __FAST_IO__ = []() { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); return 0; }();\n\nstd::pair<int, int> f[501][3];\nint up[501];\nint down[501][501], df[3][3], vis[501]{0};\nclass Solution {\n    void find_max3(int* ar, int* record, int len) {\n        // for (int i = 0; i < len; ++i) cout << ar[i] << \" \"; cout << endl;\n        for (int t = 0; t < 3; ++t) {\n            int x = 0, y = INT_MIN;\n            for (int j = 0; j < len; ++j) if (!vis[j] && ar[j] > y) y = ar[x = j];\n            vis[x] = true;\n            record[t] = x;\n        }\n        // for (int t = 0; t < 3; ++t) cout << ar[record[t]] << \" \"; cout << endl;\n        for (int t = 0; t < 3; ++t) vis[record[t]] = 0;\n    }\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        long long res = LLONG_MIN;\n\n        for (int j = 0; j < n; ++j) up[j] = board[0][j], down[m - 1][j] = INT_MIN / 2;\n        for (int i = m - 1; i > 0; --i) for (int j = 0; j < n; ++j) down[i - 1][j] = max(down[i][j], board[i][j]);\n        for (int i = 1; i + 1 < m; ++i) {\n            find_max3(up, df[0], n);\n            find_max3(down[i], df[1], n);\n            find_max3(&board[i][0], df[2], n);\n            for (int j = 0; j < 3; ++j) {\n                for (int k = 0; k < 3; ++k) {\n                    if (df[0][j] == df[1][k]) continue;\n                    for (int l = 0; l < 3; ++l) {\n                        if (df[0][j] != df[2][l] && df[1][k] != df[2][l]) {\n                            res = max(res, 0LL + up[df[0][j]] + down[i][df[1][k]] + board[i][df[2][l]]);\n                        }\n                    }\n                }\n            }\n\n            for (int j = 0; j < n; ++j) up[j] = max<int>(up[j], board[i][j]);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723907551",
    "subm_id": "556326195"
}