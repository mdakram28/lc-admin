{
    "username": "kellensun",
    "submission": "from collections import deque\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        visited1 = [0 for i in range(len(edges1)+1)]\n        tree1 = [[] for i in range(len(edges1)+1)]\n        for i in edges1:\n            tree1[i[0]].append(i[1])\n            tree1[i[1]].append(i[0])\n        queue1 = deque([0])\n        d1 = 0\n        while queue1:\n            cur = queue1.popleft()\n            visited1[cur] = 1\n            for i in tree1[cur]:\n                if visited1[i]==0:\n                    queue1.append(i)\n        queue1 = deque([(cur, 0)])\n        visited1 = [0 for i in range(len(edges1)+1)]\n        #print(cur)\n        while queue1:\n            cur,d = queue1.popleft()\n            \n            visited1[cur] = 1\n            for i in tree1[cur]:\n                if visited1[i]==0:\n                    queue1.append((i,d+1))\n        d1 = d\n        #print(d1, cur)\n        \n        \n        visited2 = [0 for i in range(len(edges2)+1)]\n        tree2 = [[] for i in range(len(edges2)+1)]\n        for i in edges2:\n            tree2[i[0]].append(i[1])\n            tree2[i[1]].append(i[0])\n        queue2 = deque([0])\n        d2 = 0\n        while queue2:\n            cur = queue2.popleft()\n            visited2[cur] = 1\n            for i in tree2[cur]:\n                if visited2[i]==0:\n                    queue2.append(i)\n        queue2 = deque([(cur, 0)])\n        #print(cur)\n        visited2 = [0 for i in range(len(edges2)+1)]\n        while queue2:\n            cur,d = queue2.popleft()\n            \n            visited2[cur] = 1\n            for i in tree2[cur]:\n                if visited2[i]==0:\n                    queue2.append((i,d+1))\n        d2 = d\n        #print(d2, cur)\n        return max(d2//2 + d2%2 + 1 + d1//2 + d1%2, d1, d2)\n        \n                    ",
    "submit_ts": 1719719784.0
}