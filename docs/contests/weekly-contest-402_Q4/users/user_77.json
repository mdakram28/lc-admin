{
    "username": "shawnxi",
    "submission": "def lowbit(x: int) -> int:\n    return x & (-x)\n\nclass BIT1:\n    # \u5355\u70b9add\uff0c\u533a\u95f4\u6c42\u548c\uff0c\u8303\u56f4[0, n - 1]\n    def __init__(self, n: int):\n        self.n = n\n        self.tree = [0] * (n + 2)\n\n    def _query(self, x: int) -> int:\n        ans = 0\n        while x > 0:\n            ans += self.tree[x]\n            x -= x & (-x)\n        return ans\n\n    def add(self, x: int, k: int):  # \u5355\u70b9add, \u8303\u56f4 [0, n-1]\n        x += 1\n        while x <= self.n:\n            self.tree[x] += k\n            x += x & (-x)\n\n    def sum(self, x: int, y: int) -> int:  # \u533a\u95f4\u6c42\u548c, \u8303\u56f4 [0, n-1]\n        x += 1\n        y += 1\n        return self._query(y) - self._query(x - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        n = len(nums)\n        \n        bit = BIT1(n)\n        \n        for i in range(1, n-1):\n            if nums[i]>nums[i-1] and nums[i]>nums[i+1]:\n                bit.add(i, 1)\n        res = []\n        \n        def cal(i):\n            if i-1>=0 and nums[i]>nums[i-1] and i+1<n and nums[i]>nums[i+1]:\n                return 1\n            return 0\n        \n        for k,i,j in queries:\n            if k==1:\n                tmp = bit.sum(i,j)-cal(i)\n                if j>i:\n                    tmp-=cal(j)\n                res.append(tmp)\n            else:\n                old = []\n                for idx in [i-1,i,i+1]:\n                    if 0<=idx<n:\n                        old.append((idx,cal(idx)))\n                nums[i]=j\n                new = []\n                for idx in [i-1,i,i+1]:\n                    if 0<=idx<n:\n                        new.append((idx,cal(idx)))\n                for t1,t2 in zip(old,new):\n                    if t1[1]!=t2[1]:\n                        bit.add(t1[0], t2[1]-t1[1])\n        \n        return res\n                ",
    "submit_ts": 1718506489.0
}