{
    "username": "maverik_coder",
    "submission": "#define ll long long\nclass DSU{\npublic:\n    int len;\n    vector<int> parent, siz;\n    DSU(int n = 1){\n        len = n;\n        siz.resize(n);\n        parent.resize(n);\n        reset();\n    }\n    void reset(){\n        for(int i = 0; i < len; i++) parent[i] = i, siz[i] = 1;\n    }\n    int find(int x){\n        if(parent[x] == x) return x;\n        return parent[x] = find(parent[x]);\n    }\n    void merge(int x, int y){\n        x = find(x), y = find(y);\n        if(x == y) return;\n        if(siz[x] > siz[y]) swap(x,y);\n        parent[x] = y;\n        siz[y] += x;\n    }\n};\nclass Solution {\npublic:\n    bool circle(ll x1, ll y1, ll x2, ll y2, ll r1, ll r2)\n    {\n        double d = sqrt((x1 - x2) * (x1 - x2)\n                             + (y1 - y2) * (y1 - y2));\n\n        bool flag = 0;\n        if (d <= r1 - r2) {\n            // cout << \"Circle B is inside A\";\n        }\n        else if (d <= r2 - r1) {\n            // cout << \"Circle A is inside B\";\n        }\n        else if (d < r1 + r2) {\n            // cout << \"Circle intersect to each other\";\n            flag = 1;\n        }\n        else if (d == r1 + r2) {\n            // cout << \"Circle touch to each other\";\n            flag = 1;\n        }\n        else {\n            // cout << \"Circle not touch to each other\";\n        }\n        return flag;\n    }\n    bool crossX(vector<int>& c, int xx){\n        int x = c[0], y = c[1], r = c[2];\n        int d = abs(x - xx);\n        return (d <= r);\n    }\n    bool crossY(vector<int>& c, int yy){\n        int x = c[0], y = c[1], r = c[2];\n        int d = abs(y - yy);\n        return (d <= r);\n    }\n    bool checkOverlap(ll R, int Xc, int Yc,\n                         int X1, int Y1,\n                         int X2, int Y2)\n    {\n\n        // Find the nearest point on the \n        // rectangle to the center of \n        // the circle\n        int Xn = max(X1, min(Xc, X2));\n        int Yn = max(Y1, min(Yc, Y2));\n\n        // Find the distance between the \n        // nearest point and the center \n        // of the circle\n        // Distance between 2 points, \n        // (x1, y1) & (x2, y2) in \n        // 2D Euclidean space is\n        // ((x1-x2)**2 + (y1-y2)**2)**0.5\n        ll Dx = Xn - Xc;\n        ll Dy = Yn - Yc;\n        return (Dx * Dx + Dy * Dy) <= R * R;\n    } \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DSU S(n);\n        for(int i = 0; i < n; i++){\n            if(!checkOverlap(circles[i][2], circles[i][0], circles[i][1], 0, 0, X, Y)) continue;\n            for(int j = i+1; j < n; j++){\n                if(!checkOverlap(circles[j][2], circles[j][0], circles[j][1], 0, 0, X, Y)) continue;\n                if(circle(circles[i][0], circles[i][1], circles[j][0], circles[j][1], circles[i][2], circles[j][2])){\n                    S.merge(i,j);\n                }\n            }\n        }\n        for(int i = 0; i < n; i++){\n            if(\n                (crossY(circles[i], 0) && crossX(circles[i],0)) || \n                (crossY(circles[i], 0) && crossY(circles[i],Y)) ||\n                (crossX(circles[i], X) && crossX(circles[i],0)) ||\n                (crossX(circles[i], X) && crossY(circles[i],Y))\n            ) {\n                return false;\n            }\n            for(int j = i+1; j < n; j++){\n                if(\n                    (crossY(circles[i], 0) && crossX(circles[j],0)) || \n                    (crossY(circles[i], 0) && crossY(circles[j],Y)) ||\n                    (crossX(circles[i], X) && crossX(circles[j],0)) ||\n                    (crossX(circles[i], X) && crossY(circles[j],Y)) ||\n                    \n                    (crossY(circles[j], 0) && crossX(circles[i],0)) || \n                    (crossY(circles[j], 0) && crossY(circles[i],Y)) ||\n                    (crossX(circles[j], X) && crossX(circles[i],0)) ||\n                    (crossX(circles[j], X) && crossY(circles[i],Y))\n                ) {\n                    if(S.find(i) == S.find(j)){\n                        return false;  \n                    }\n                }\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138989",
    "subm_id": "1335804924"
}