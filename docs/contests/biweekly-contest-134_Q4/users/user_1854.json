{
    "username": "snavneet561",
    "submission": "class Solution {\npublic:\n    typedef long long ll; \n    \nstruct item {\n    ll ac;\n};\n\nstruct sparseTable {\n    ll sze;\n    ll mxlog;\n    vector<ll> logval;\n    vector<vector<item>> table;\n\n    item merge(item a, item b) { // min, max, gcd\n        return {a.ac&b.ac};\n    }\n\n    item single(ll v) {\n        return {v};\n    }\n\n    void build(vector<ll> &a) {\n        sze = a.size();\n        mxlog = log2(sze);\n        table.resize(sze + 1);\n        logval.resize(sze + 1);\n\n        logval[1] = 0;\n        for (ll i = 2; i <= sze; ++i) {\n            logval[i] = logval[i / 2] + 1;\n        }\n\n        for (ll i = 0; i < sze; ++i) {\n            table[i].resize(mxlog + 1);\n            fill(table[i].begin(), table[i].end(), item());\n        }\n\n        for (ll i = 0; i < sze; i++) {\n            table[i][0] = single(a[i]);\n        }\n        for (ll i = 1; i <= mxlog; i++) {\n            for (ll j = 0; (j + (1 << i)) <= sze; j++) {\n                table[j][i] = merge(table[j][i - 1], table[j + (1 << (i - 1))][i - 1]);\n            }\n        }\n    }\n\n    item query(ll l, ll r) {\n        ll j = logval[r - l + 1];\n        item ans = item();\n        ans = merge(table[l][j], table[r - (1 << j) + 1][j]); // O(1)\n        return ans;\n    }\n};\n    \n    \n    \n    ll cnt(vector<int> &v, int k, int l, int r, sparseTable &st){\n\n        ll res=-1, idx=l;\n        while(l<=r){\n            ll mid=l+(r-l)/2;\n            ll val=st.query(idx, mid).ac;\n            // cout << l << \" \" << mid << \" \" << r << \" \" << val << endl;\n            if(val>=k){\n                res=max(res, mid);\n                l=mid+1;\n            }else r=mid-1;\n        }\n        // cout << res << endl;\n        if(res==-1)return 0;\n        return res-idx+1;\n    }\n    \n    \n    long long countSubarrays(vector<int>& nums, int k) {\n        vector<ll> v;\n        for(auto x: nums)v.push_back(x);\n        sparseTable st;\n        st.build(v);\n        ll res=0, n=nums.size();\n        for(int i=0; i<n; i++){\n            ll r = cnt(nums, k, i, n-1, st), l = cnt(nums, k+1, i, n-1, st);\n            // cout << l << \" \" << r << \" \" << i << endl;\n            ll cur=r-l;\n            res+=cur;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720280180",
    "subm_id": "1311779767"
}