{
    "username": "glump1",
    "submission": "#SEG TREE (Implicit No Prop)\n        \nclass SegmentTree:\n    def __init__(self, input_arr):\n        n = 1<<(len(input_arr).bit_length()-1)\n        if n < len(input_arr): n<<=1\n        self.n = n\n        self.arr = arr =[-inf]*n + input_arr + [-inf]*(n-len(input_arr))\n        for i in range(n-1,0,-1):\n            arr[i] = max(arr[i*2], arr[i*2+1])\n    \n    def __list__(self):\n        return self.arr\n    def __str__(self):\n        return str(self.__list__())\n    def update(self, i, val):\n        arr = self.arr\n        u, bit = 1, self.n>>1\n        st = [(u, bit, 1)]\n        while st:\n            u, bit, d = st.pop()\n            if not bit:\n                arr[u]+=val\n                continue\n            if not d:\n                arr[u] = max(arr[u*2], arr[u*2+1])\n                continue\n            st.append((u, bit, 0))\n            self.arr[u]+=val\n            u*=2\n            u+=bool(bit&i)\n            bit>>=1\n            st.append((u, bit, 1))\n            \n            \n    def query(self, l, r):\n        res = -inf\n        st = [(1, l, r, self.n)]\n        while st:\n            u, l, r, n = st.pop()\n            l = max(l, 0)\n            r = min(r, n)\n            if r-l==n:\n                res=max(res, self.arr[u])\n                continue\n            n//=2\n            if l<n:\n                st.append((u*2, l, r, n))\n            if r>n:\n                st.append((u*2+1, l-n, r-n, n))\n        return res\n    \n\nfrom sortedcontainers import SortedList\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        n = max([q[1] for q in queries])+1\n        sl = SortedList([0])\n        tree = SegmentTree([0]*n)\n        res = []\n        for q in queries:\n            x = q[1]\n            if q[0] == 1:\n                r = sl.bisect_right(q[1])\n                l = r-1\n                if r<len(sl):\n                    #Remove old interval\n                    dist = sl[r]-sl[l]\n                    tree.update(sl[l], -dist)\n                    #Add new interval up to r\n                    r_dist = sl[r]-x\n                    tree.update(x, r_dist)\n                #Add new interval from l to x\n                l_dist = x-sl[l]\n                tree.update(sl[l], l_dist)\n                #Add x to intervals\n                sl.add(x)\n                # print(tree)\n                # print()\n                continue\n            sz = q[2]\n            exists = x in sl\n            r = sl.bisect_right(q[1])\n            l = r-1\n            if x-sl[l]>=sz:\n                res.append(True)\n                continue\n            max_dist = tree.query(0, sl[l])\n            res.append(max_dist>=sz)\n            # if not exists:\n            #     r = sl.bisect_right(q[1])\n            #     l = r-1\n            #     if r<len(sl):\n            #         #Remove old interval\n            #         dist = sl[r]-sl[l]\n            #         tree.update(sl[l], -dist)\n            #         #Add new interval up to r\n            #         r_dist = sl[r]-x\n            #         tree.update(x, r_dist)\n            #     #Add new interval from l to x\n            #     l_dist = x-sl[l]\n            #     tree.update(sl[l], l_dist)\n            #     #Add x to intervals\n            #     sl.add(x)\n            # #Query maximum interval before x\n            # max_dist = tree.query(0, x)\n            # # print(q)\n            # # print(sl)\n            # # print(tree)\n            # # print(max_dist)\n            # # print()\n            # res.append(max_dist>=sz)\n            # if not exists:\n            #     #Remove x from sl/tree\n            #     sl.remove(x)\n            #     #Undo obstacle\n            #     r = sl.bisect_right(x)\n            #     l = r-1\n            #     #Remove interval l-x\n            #     l_dist = x-sl[l]\n            #     tree.update(sl[l], -l_dist)\n            #     if r<len(sl):\n            #         #Remove interval x-r\n            #         r_dist = sl[r]-x\n            #         tree.update(x, -r_dist)\n            #         #Add old interval\n            #         dist = sl[r]-sl[l]\n            #         tree.update(sl[l], dist)\n        return res",
    "submit_ts": 1716651550.0
}