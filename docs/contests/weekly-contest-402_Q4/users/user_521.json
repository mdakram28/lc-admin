{
    "username": "nikhilbabar",
    "submission": "class FenwickTree{\n    int n;\n    Map<Integer,Long> bit;\n    FenwickTree(int n){\n        this.n = n;\n        this.bit = new HashMap<>();\n    }\n    public String toString(){\n        return bit.toString();\n    }\n    int lsb(int num){\n        return (num & -num);\n    }\n    long prefixSum(int r){\n        long sum = 0;\n        while(r > 0){\n            sum += bit.getOrDefault(r, 0L);\n            r -= lsb(r);\n        }\n        return sum;\n    }\n    long sumRange(int l, int r){\n        return prefixSum(r)-prefixSum(l);\n    }\n    void update(int id, long val){\n        while(id <= n){\n            bit.put(id, bit.getOrDefault(id, 0L)+val);\n            id += lsb(id);\n        }\n    }   \n}\n\n\nclass Solution {\n    \n    public boolean isPeak(int[] nums, int i){\n        int n = nums.length;\n        \n        if(i == 0 || i == n-1 || i < 0 || i >= n){\n            return false;\n        }\n        \n        return (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n    }\n    \n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        \n        FenwickTree f = new FenwickTree((int)1e5+1);\n        \n        List<Integer> ans = new ArrayList<>();\n        \n        for(int i = 0 ; i < n ; i++){\n            if(isPeak(nums, i)){\n                f.update(i, 1);\n            }\n        }\n        \n        for(int[] query : queries){\n            if(query[0] == 1){\n                int l = query[1];\n                int r = query[2];\n                \n                if(l == r){\n                    ans.add(0);\n                } else {\n                    ans.add((int)f.sumRange(l, r-1));\n                }\n            }\n            \n            else {\n                int id = query[1];\n                int val = query[2];\n                \n                boolean[] vals = new boolean[]{isPeak(nums, id-1), isPeak(nums, id), isPeak(nums, id+1)};\n                \n                nums[id] = val;\n                \n                boolean[] nvals = new boolean[]{isPeak(nums, id-1), isPeak(nums, id), isPeak(nums, id+1)};\n                \n                for(int i = 0 ; i < 3 ; i++){\n                    if(vals[i] && !nvals[i]){\n                        f.update(id-1+i, -1);\n                    }\n                    \n                    else if(!vals[i] && nvals[i]){\n                        f.update(id-1+i, 1);\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1718507786",
    "subm_id": "1289662450"
}