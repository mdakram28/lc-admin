{
    "username": "iofu728",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def get_x(a, b, z):\n            r1, r2 = [], []\n            for idx, (x, y) in enumerate(points):\n                if z is not None and z == idx:\n                    continue\n                score = x * a + b * y\n                if len(r1) == 0:\n                    r1 = [x, y]\n                elif len(r2) == 0:\n                    r2 = [x, y]\n                    if r1[0] * a + r1[1] * b < score:\n                        r1, r2 = r2, r1\n                elif r1[0] * a + r1[1] * b < score:\n                    r2 = r1\n                    r1 = [x, y]\n                elif r2[0] * a + r2[1] * b < score:\n                    r2 = [x, y]\n            return r1, r2\n        \n        if len(points) <= 100:\n            res = float(\"inf\")\n            for idx, (x, y) in enumerate(points):\n                a1, a2 = get_x(-1, 1, idx)\n                b1, b2 = get_x(1, -1, idx)\n                c1, c2 = get_x(1, 1, idx)\n                d1, d2 = get_x(-1, -1, idx)\n                score = max(abs(a1[0] - b1[0]) + abs(a1[1] - b1[1]), abs(c1[0] - d1[0]) + abs(c1[1] - d1[1]))\n                res = min(res, score)\n            return res\n     \n        a1, a2 = get_x(-1, 1, None)\n        b1, b2 = get_x(1, -1, None)\n        c1, c2 = get_x(1, 1, None)\n        d1, d2 = get_x(-1, -1, None)\n        # print(a1, a2, b1, b2, c1, c2, d1, d2)\n        res = float(\"inf\")\n        for a, b, c, d in [(a1, b2, c1, d1), (a2, b1, c1, d1), (c1, d2, a1, b1), (c2, d1, a1, b1)]:\n            score = max(abs(a[0] - b[0]) + abs(a[1] - b[1]), abs(c[0] - d[0]) + abs(c[1] - d[1]))\n            res = min(res, score)\n        return res\n            "
}