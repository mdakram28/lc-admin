{
    "username": "abhiram542",
    "submission": "class Solution {\npublic:\n    \n    \n    pair<int, int> bfs(int start, vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n\n        dist[start] = 0;\n        q.push(start);\n\n        int farthestNode = start;\n        int maxDistance = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) { // if not visited\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n\n                    if (dist[neighbor] > maxDistance) {\n                        maxDistance = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthestNode, maxDistance};\n    }\n    \n    int treeHeight(int root, vector<vector<int>>& adj) {\n        return bfs(root, adj).second;\n    }\n    \n    int diameter(vector<vector<int>>& adj){\n        if (adj.empty()) return 0;\n        pair<int, int> p1 = bfs(0, adj);\n        return treeHeight(p1.first,adj);    \n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        // if n1,n2 are merging nodes , diameter = max(d1,d2,1+h(1,root n1 )+h(2,root n2));\n        // find nodes which willgive minimun height   ....find diameter \n        // min height = (d+1)/2\n        int n1 = edges1.size() + 1; // number of nodes in the first tree\n        int n2 = edges2.size() + 1; // number of nodes in the second tree\n\n        vector<vector<int>>adj1(n1),adj2(n2);\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        int d1 = diameter(adj1)  , d2 = diameter(adj2) ;\n        return max( {d1 ,d2 , 1+ (d1+1)/2 + (d2+1)/2 } );\n        \n    }\n};",
    "submit_ts": 1719719839.0
}