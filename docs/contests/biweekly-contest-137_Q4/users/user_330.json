{
    "username": "\u8349\u8393\u5976\u6614\ud83c\udf53",
    "submission": "package main\n\nimport (\n\t\"fmt\"\n\t\"math/bits\"\n)\n\n\n\nconst INF int = 1e18\n\nfunc maximumValueSum(board [][]int) int64 {\n\ttype E = struct {\n\t\tmax      int\n\t\trow, col int32\n\t}\n\te := func() E { return E{-INF, -1, -1} }\n\top := func(a, b E) E {\n\t\tif a.max > b.max {\n\t\t\treturn a\n\t\t}\n\t\treturn b\n\t}\n\tnewGrid := make([][]E, len(board))\n\tfor i := range newGrid {\n\t\tnewGrid[i] = make([]E, len(board[i]))\n\t\tfor j := range newGrid[i] {\n\t\t\tnewGrid[i][j] = E{board[i][j], int32(i), int32(j)}\n\t\t}\n\t}\n\tst := NewSparseTableOnSegTreeFrom[E](newGrid, e, op)\n\tres := -INF\n\tROW, COL := int32(len(board)), int32(len(board[0]))\n\tfor r := int32(0); r < ROW; r++ {\n\t\tfor c := int32(0); c < COL; c++ {\n\t\t\t// \u5206\u6210\u4e86\u56db\u4e2a\u90e8\u5206\n\t\t\tmax1 := st.Query(0, r, 0, c)\n\t\t\tmax2 := st.Query(0, r, c+1, COL)\n\t\t\tmax3 := st.Query(r+1, ROW, 0, c)\n\t\t\tmax4 := st.Query(r+1, ROW, c+1, COL)\n\t\t\tmax2Sum := -INF\n\t\t\tmax2Sum = max(max2Sum, max1.max+max4.max)\n\t\t\tmax2Sum = max(max2Sum, max2.max+max3.max)\n\n\t\t\t// 1\u548c2\uff0c\u4f46\u662f\u4e0d\u540c\u884c\n\t\t\t{\n\t\t\t\tif max1.row != max2.row {\n\t\t\t\t\tmax2Sum = max(max2Sum, max1.max+max2.max)\n\t\t\t\t} else {\n\t\t\t\t\t// max1\u548c2\u7684\u6b21\u5927\u503c\n\t\t\t\t\trow2 := max2.row\n\t\t\t\t\tif row2 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(0, row2, c+1, COL)\n\t\t\t\t\t\tcand2 := st.Query(row2+1, r, c+1, COL)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max1.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t\t// max2\u548c1\u7684\u6b21\u5927\u503c\n\t\t\t\t\trow1 := max1.row\n\t\t\t\t\tif row1 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(0, row1, 0, c)\n\t\t\t\t\t\tcand2 := st.Query(row1+1, r, 0, c)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max2.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 1\u548c3\uff0c\u4f46\u662f\u4e0d\u540c\u5217\n\t\t\t{\n\t\t\t\tif max1.col != max3.col {\n\t\t\t\t\tmax2Sum = max(max2Sum, max1.max+max3.max)\n\t\t\t\t} else {\n\t\t\t\t\t// max1\u548c3\u7684\u6b21\u5927\u503c\n\t\t\t\t\tcol2 := max3.col\n\t\t\t\t\tif col2 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(r+1, ROW, 0, col2)\n\t\t\t\t\t\tcand2 := st.Query(r+1, ROW, col2+1, c)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max1.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t\t// max3\u548c1\u7684\u6b21\u5927\u503c\n\t\t\t\t\tcol1 := max1.col\n\t\t\t\t\tif col1 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(0, r, 0, col1)\n\t\t\t\t\t\tcand2 := st.Query(0, r, col1+1, c)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max3.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 2\u548c4\uff0c\u4f46\u662f\u4e0d\u540c\u5217\n\t\t\t{\n\t\t\t\tif max2.col != max4.col {\n\t\t\t\t\tmax2Sum = max(max2Sum, max2.max+max4.max)\n\t\t\t\t} else {\n\t\t\t\t\t// max2\u548c4\u7684\u6b21\u5927\u503c\n\t\t\t\t\tcol4 := max4.col\n\t\t\t\t\tif col4 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(r+1, ROW, c+1, col4)\n\t\t\t\t\t\tcand2 := st.Query(r+1, ROW, col4+1, COL)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max2.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t\t// max4\u548c2\u7684\u6b21\u5927\u503c\n\t\t\t\t\tcol2 := max2.col\n\t\t\t\t\tif col2 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(0, r, c+1, col2)\n\t\t\t\t\t\tcand2 := st.Query(0, r, col2+1, COL)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max4.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// 3\u548c4\uff0c\u4f46\u662f\u4e0d\u540c\u884c\n\t\t\t{\n\t\t\t\tif max3.row != max4.row {\n\t\t\t\t\tmax2Sum = max(max2Sum, max3.max+max4.max)\n\t\t\t\t} else {\n\t\t\t\t\t// max3\u548c4\u7684\u6b21\u5927\u503c\n\t\t\t\t\trow4 := max4.row\n\t\t\t\t\tif row4 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(r+1, row4, c+1, COL)\n\t\t\t\t\t\tcand2 := st.Query(row4+1, ROW, c+1, COL)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max3.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t\t// max4\u548c3\u7684\u6b21\u5927\u503c\n\t\t\t\t\trow3 := max3.row\n\t\t\t\t\tif row3 != -1 {\n\t\t\t\t\t\tcand1 := st.Query(r+1, row3, 0, c)\n\t\t\t\t\t\tcand2 := st.Query(row3+1, ROW, 0, c)\n\t\t\t\t\t\tcandMax := max(cand1.max, cand2.max)\n\t\t\t\t\t\tmax2Sum = max(max2Sum, max4.max+candMax)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tres = max(res, board[r][c]+max2Sum)\n\t\t}\n\t}\n\treturn int64(res)\n}\n\nfunc max2Sum(a, b, c, d int) int {\n\ts1 := a + b\n\ts2 := a + c\n\ts3 := a + d\n\ts4 := b + c\n\ts5 := b + d\n\ts6 := c + d\n\treturn max(max(max(max(max(s1, s2), s3), s4), s5), s6)\n}\n\n// \u66f4\u5feb\u7684 SparseTable2DFast.\ntype SparseTableOnSegTree[E any] struct {\n\trow, col int32\n\te        func() E\n\top       func(E, E) E\n\tdata     []*SparseTable[E]\n}\n\nfunc NewSparseTableOnSegTreeFrom[E any](grid [][]E, e func() E, op func(E, E) E) *SparseTableOnSegTree[E] {\n\trow := int32(len(grid))\n\tcol := int32(0)\n\tif row > 0 {\n\t\tcol = int32(len(grid[0]))\n\t}\n\tdata := make([]*SparseTable[E], 2*row)\n\tfor i := int32(0); i < row; i++ {\n\t\tdata[row+i] = NewSparseTableFrom(grid[i], e, op)\n\t}\n\tfor i := row - 1; i > 0; i-- {\n\t\tdata[i] = NewSparseTable(\n\t\t\tcol,\n\t\t\tfunc(j int32) E {\n\t\t\t\tx := data[2*i].Query(j, j+1)\n\t\t\t\ty := data[2*i+1].Query(j, j+1)\n\t\t\t\treturn op(x, y)\n\t\t\t},\n\t\t\te, op,\n\t\t)\n\t}\n\treturn &SparseTableOnSegTree[E]{row: row, col: col, e: e, op: op, data: data}\n}\n\nfunc (st *SparseTableOnSegTree[E]) Query(rowStart, rowEnd, colStart, colEnd int32) E {\n\tif !(0 <= rowStart && rowStart <= rowEnd && rowEnd <= st.row) {\n\t\treturn st.e()\n\t}\n\tif !(0 <= colStart && colStart <= colEnd && colEnd <= st.col) {\n\t\treturn st.e()\n\t}\n\tres := st.e()\n\trowStart += st.row\n\trowEnd += st.row\n\tfor rowStart < rowEnd {\n\t\tif rowStart&1 != 0 {\n\t\t\tres = st.op(res, st.data[rowStart].Query(colStart, colEnd))\n\t\t\trowStart++\n\t\t}\n\t\tif rowEnd&1 != 0 {\n\t\t\trowEnd--\n\t\t\tres = st.op(res, st.data[rowEnd].Query(colStart, colEnd))\n\t\t}\n\t\trowStart >>= 1\n\t\trowEnd >>= 1\n\t}\n\treturn res\n}\n\ntype SparseTable[E any] struct {\n\tst [][]E\n\te  func() E\n\top func(E, E) E\n\tn  int32\n}\n\nfunc NewSparseTable[E any](n int32, f func(int32) E, e func() E, op func(E, E) E) *SparseTable[E] {\n\tres := &SparseTable[E]{}\n\n\tb := int32(bits.Len32(uint32(n)))\n\tst := make([][]E, b)\n\tfor i := range st {\n\t\tst[i] = make([]E, n)\n\t}\n\tfor i := int32(0); i < n; i++ {\n\t\tst[0][i] = f(i)\n\t}\n\tfor i := int32(1); i < b; i++ {\n\t\tfor j := int32(0); j+(1<<i) <= n; j++ {\n\t\t\tst[i][j] = op(st[i-1][j], st[i-1][j+(1<<(i-1))])\n\t\t}\n\t}\n\tres.st = st\n\tres.e = e\n\tres.op = op\n\tres.n = n\n\treturn res\n}\n\nfunc NewSparseTableFrom[E any](leaves []E, e func() E, op func(E, E) E) *SparseTable[E] {\n\treturn NewSparseTable(int32(len(leaves)), func(i int32) E { return leaves[i] }, e, op)\n}\n\n// \u67e5\u8be2\u533a\u95f4 [start, end) \u7684\u8d21\u732e\u503c.\nfunc (st *SparseTable[E]) Query(start, end int32) E {\n\tif start >= end {\n\t\treturn st.e()\n\t}\n\tb := int32(bits.Len32(uint32(end-start))) - 1\n\treturn st.op(st.st[b][start], st.st[b][end-(1<<b)])\n}\n\nfunc max32(a, b int32) int32 {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc min32(a, b int32) int32 {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc min(a, b int) int {\n\tif a < b {\n\t\treturn a\n\t}\n\treturn b\n}\n\nfunc max(a, b int) int {\n\tif a > b {\n\t\treturn a\n\t}\n\treturn b\n}\n",
    "submit_ts": "1723909413",
    "subm_id": "556336124"
}