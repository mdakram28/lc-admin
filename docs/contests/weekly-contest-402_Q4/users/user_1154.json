{
    "username": "testimony2014",
    "submission": "class SegTree {\npublic:\n    SegTree(int start, int end): left(nullptr), right(nullptr), l(start), r(end), val(0) {\n        if (start != end) {\n            int mid = start + (end - start) / 2;\n            left = new SegTree(start, mid);\n            right = new SegTree(mid + 1, end);\n        }\n    }\n    void update(int idx, int new_val) {\n        if (l == r) {\n            val = new_val;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        if (idx <= mid) {\n            left->update(idx, new_val);\n        } else {\n            right->update(idx, new_val);\n        }\n        val = left->val + right->val;\n    }\n    \n    int query(int start, int end) {\n        if (start > end) {\n            return 0;\n        }\n        if (start <= l && r <= end) {\n            return val;\n        }\n        int mid = l + (r - l) / 2;\n        if (end <= mid) {\n            return left->query(start, end);\n        } else if (start > mid) {\n            return right->query(start, end);\n        }\n        return left->query(start, end) + right->query(start, end);\n    } \nSegTree *left, *right;\nint l, r;\nint val;\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegTree segTree(1, n);\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                segTree.update(i + 1, 1);\n            }\n        }\n        vector<int> res;\n        for (auto query : queries) {\n            int type = query[0];\n            if (type == 1) {\n                int l = query[1];\n                int r = query[2];\n                res.push_back(segTree.query(l + 2, r));\n            } else {\n                int idx = query[1];\n                int new_val = query[2];\n                nums[idx] = new_val;\n                if (idx - 1 >= 0 && idx + 1 < n && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]) {\n                    segTree.update(idx + 1, 1);\n                } else {\n                    segTree.update(idx + 1, 0);\n                }\n                if (idx - 2 >= 0 && idx < n && nums[idx - 1] > nums[idx - 2] && nums[idx - 1] > nums[idx]) {\n                    segTree.update(idx, 1);\n                } else {\n                    segTree.update(idx, 0);\n                }\n                if (idx >= 0 && idx + 2 < n && nums[idx + 1] > nums[idx] && nums[idx + 1] > nums[idx + 2]) {\n                    segTree.update(idx + 2, 1);\n                } else {\n                    segTree.update(idx + 2, 0);    \n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718508482.0
}