{
    "username": "sravanbansal08081998",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        TrieNode* childNode[26];\n        bool wordEnd;\n        int cost;\n\n        TrieNode() {\n            wordEnd = false;\n            cost = -1;\n            for (int i = 0; i < 26; i++) {\n                childNode[i] = NULL;\n            }\n        }\n    };\n    void insert_key(TrieNode* root, string& key, int cost) {\n        TrieNode* currentNode = root;\n        for (auto c : key) {\n            if (currentNode->childNode[c - 'a'] == NULL) {\n                TrieNode* newNode = new TrieNode();\n                currentNode->childNode[c - 'a'] = newNode;\n            }\n            currentNode = currentNode->childNode[c - 'a'];\n        }\n        currentNode->wordEnd = 1;\n        if (currentNode->cost == -1 || currentNode->cost > cost) {\n            currentNode->cost = cost;\n        }\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            insert_key(root, words[i], costs[i]);\n        }\n        int n = target.size();\n        vector<int> dp(n + 1, -1);\n        dp[n] = 0;\n        for (int i = n - 1; i >= 0; i--) {\n            TrieNode* cur = root;\n            int val = 2e9;\n            for (int j = i; j < n; j++) {\n                cur = cur->childNode[target[j] - 'a'];\n                if (cur == NULL) {\n                    break;\n                }\n                if (cur->wordEnd && dp[j + 1] != -1) {\n                    val = min(val, dp[j + 1] + cur->cost);\n                }\n            }\n            if (val != 2e9) {\n                dp[i] = val;\n            }\n        }\n        return dp[0];\n    }\n};",
    "submit_ts": "1720322710",
    "subm_id": "1312357074"
}