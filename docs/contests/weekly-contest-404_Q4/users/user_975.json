{
    "username": "chetanyamahana",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto getDiameter = [](const vector<vector<int>>& edges) {\n            int n = edges.size() + 1;\n            vector<vector<int>> adj(n);\n            for (const auto& edge : edges) {\n                adj[edge[0]].push_back(edge[1]);\n                adj[edge[1]].push_back(edge[0]);\n            }\n            \n            auto bfs = [&](int start) {\n                vector<int> dist(n, -1);\n                queue<int> q;\n                q.push(start);\n                dist[start] = 0;\n                int farthest = start;\n                while (!q.empty()) {\n                    int node = q.front();\n                    q.pop();\n                    for (int neighbor : adj[node]) {\n                        if (dist[neighbor] == -1) {\n                            dist[neighbor] = dist[node] + 1;\n                            q.push(neighbor);\n                            if (dist[neighbor] > dist[farthest]) {\n                                farthest = neighbor;\n                            }\n                        }\n                    }\n                }\n                return make_pair(farthest, dist[farthest]);\n            };\n            \n            int start = bfs(0).first;\n            int diameter = bfs(start).second;\n            return diameter;\n        };\n        \n        int d1 = getDiameter(edges1);\n        int d2 = getDiameter(edges2);\n        \n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": 1719718647.0
}