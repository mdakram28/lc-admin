{
    "username": "hellotestabc",
    "submission": "class Solution {\npublic:\n    void update(vector<int>& seg, int pos, int val) {\n        for (seg[pos += seg.size() / 2] = val; (pos /= 2) > 0;) {\n            seg[pos] = seg[2 * pos] + seg[2 * pos + 1];\n        }\n    }\n    \n    int query(vector<int>& seg, int a, int b) {\n        int total = 0;\n        for (a += seg.size() / 2, b += seg.size() / 2; a < b; a /= 2, b /= 2) {\n            if (a % 2 == 1) {\n                total += seg[a++];\n            }\n            if (b % 2  == 1) {\n                total += seg[--b];\n            }\n        }\n        \n        return total;\n    }\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> seg(2 * nums.size());\n        \n        for (int i = 1; i < nums.size() - 1; i++) {\n            if (nums[i - 1] < nums[i] && nums[i] > nums[i + 1]) {\n                update(seg, i, 1);\n            }\n        }\n        \n        vector<int> out;\n        \n        for (const auto& q : queries) {\n            if (q[0] == 1) {\n                if (q[1] == q[2]) {\n                    out.push_back(0);\n                    continue;\n                }\n                \n                \n                out.push_back(query(seg, q[1] + 1, q[2]));\n            } else {\n                nums[q[1]] = q[2];\n                \n                for (int i = max(0, q[1] - 1); i <= min((int) nums.size() - 1, q[1] + 1); i++) {\n                    if (i > 0 && i < nums.size() - 1 && nums[i - 1] < nums[i] && nums[i] > nums[i + 1]) {\n                        update(seg, i, 1);\n                    } else {\n                        update(seg, i, 0);\n                    }\n                }\n            }\n        }\n        \n        return out;\n    }\n};",
    "submit_ts": "1718508156",
    "subm_id": "1289673282"
}