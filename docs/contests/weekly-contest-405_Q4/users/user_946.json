{
    "username": "ddiibboo",
    "submission": "class Solution {\n\n    class Node {\n        Node[] nxt;\n        Node fail;\n        Set<Integer> lens;\n\n        Node() {\n            nxt = new Node[26];\n            fail = null;\n            lens = new HashSet<>();\n        }\n    }\n\n    Node root;\n\n    private void add(String s, int idx) {\n        Node cur = root;\n        for (int i = 0; i < s.length(); ++i) {\n            int c = s.charAt(i) - 'a';\n            if (cur.nxt[c] == null) cur.nxt[c] = new Node();\n            cur = cur.nxt[c];\n        }\n        cur.lens.add(idx);\n    }\n\n    private void build() {\n        Queue<Node> q = new LinkedList<>();\n        // Queue<StringBuilder> qq = new LinkedList<>();\n        q.add(root);\n        // qq.add(new StringBuilder());\n        while (!q.isEmpty()) {\n            Node cur = q.poll();\n            // StringBuilder ss = qq.poll();\n            for (int i = 0; i < 26; ++i) {\n                if (cur.nxt[i] == null) continue;\n                q.add(cur.nxt[i]);\n                // StringBuilder nsb = new StringBuilder().append(ss.toString()).append((char) ('a' + i));\n                // qq.add(nsb);\n                Node p = cur.fail;\n                while (p != root && p.nxt[i] == null) p = p.fail;\n                if (p.nxt[i] != null && p != cur) {\n                    cur.nxt[i].fail = p.nxt[i];\n                    cur.nxt[i].lens.addAll(p.nxt[i].lens);\n                    // System.out.println(nsb.toString() + \":\" + cur.nxt[i].lens);\n                } else {\n                    cur.nxt[i].fail = root;\n                }\n            }\n        }\n    }\n\n    public int minimumCost(String target, String[] wordss, int[] costss) {\n        root = new Node();\n        root.fail = root;\n        Map<String, Integer> cc = new HashMap<>();\n        for (int i = 0; i < wordss.length; ++i) {\n            final int cost = costss[i];\n            cc.compute(wordss[i], (k, v) -> {\n                if (v == null) return cost;\n                return Math.min(v, cost);\n            });\n        }\n\n        String[] words = new String[cc.size()];\n        int[] costs = new int[cc.size()];\n        int idx = 0;\n        for (Map.Entry<String, Integer> e : cc.entrySet()) {\n            words[idx] = e.getKey();\n            costs[idx++] = e.getValue();\n        }\n\n        idx = 0;\n        for (String s : words) {\n            add(s, idx++);\n        }\n        build();\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, -1);\n        dp[0] = 0;\n        Node cur = root;\n        for (int i = 1; i <= target.length(); ++i) {\n            int c = target.charAt(i - 1) - 'a';\n            while (cur != root && cur.nxt[c] == null) cur = cur.fail;\n            if (cur.nxt[c] != null) {\n                cur = cur.nxt[c];\n            }\n            // System.out.println(String.format(\"i=%d, idxs=%s\", i, cur.lens));\n            for (int j : cur.lens) {\n                if (dp[i - words[j].length()] == -1) continue;\n                if (dp[i] == -1) dp[i] = dp[i - words[j].length()] + costs[j]; \n                else {\n                    dp[i] = Math.min(dp[i], dp[i - words[j].length()] + costs[j]);\n                }\n            }\n            // System.out.println(dp[i]);\n        }\n        return dp[n];\n    }\n}",
    "submit_ts": "1720323131",
    "subm_id": "1312368057"
}