{
    "username": "yushae3405",
    "submission": "class Tr {\npublic:\n   \n    vector<int> ind; \n     unordered_map<char, Tr*> ch;\n\n    Tr() {}\n};\n\nclass Trie {\npublic:\n   Tr* r;\n\n    Trie() {\n        r = new Tr();\n    }\n\n    void insert( string& word, int index) {\n        Tr* node = r;\n        for (char c : word) {\n            if (!node->ch.count(c)) {\n                node->ch[c] = new Tr();\n            }\n            node = node->ch[c];\n        }\n        node->ind.push_back(index); \n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie t;\n          vector<int> dp(n + 1, INT_MAX);\n \n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i);\n        }\n\n      \n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            Tr* nod = t.r;\n            for (int j = i; j < n; ++j) {\n                if (!nod->ch.count(target[j])) break;\n                nod = nod->ch[target[j]];\n                for (int index : nod->ind) {\n                    int cost = costs[index];\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324795",
    "subm_id": "1312408613"
}