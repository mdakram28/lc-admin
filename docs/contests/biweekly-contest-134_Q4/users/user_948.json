{
    "username": "rkyrahulkumar",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\n#define INF LLONG_MAX\n\n// Segment Tree class to perform task optimally\nclass SegmentTree {\npublic:\n    vector<long long> tree;\n    long long n;\n\n    // Constructor\n    SegmentTree(vector<long long>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void build(vector<long long>& arr, long long node, long long start, long long end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            long long mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            // bitwise AND of the children nodes\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    // Overloading query function to be used recursively\n    long long query(long long l, long long r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    // query function to get bitwise AND of the range\n    long long query(long long node, long long start, long long end, long long l, long long r) {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        long long mid = (start + end) / 2;\n        long long p1 = query(2 * node + 1, start, mid, l, r);\n        long long p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        // bitwise AND operation result\n        return p1 & p2;\n    }\n};\n\n\nclass Solution {\npublic:\n    long long closestAND(vector<long long> arr, long long k) {\n        long long n = arr.size();\n        SegmentTree st(arr);\n        long long ans = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            int l = 0, h = i;\n\n            while (l <= h) {\n                int m = (l + h) / 2;\n\n                if (st.query(m, i) < k) {\n                    l = m + 1;\n                } else {\n                    h = m - 1;\n                }\n            }\n\n            int L = h + 1;\n\n            l = 0;\n            h = i;\n\n            while (l <= h) {\n                int m = (l + h) / 2;\n\n                if (st.query(m, i) <= k) {\n                    l = m + 1;\n                } else {\n                    h = m - 1;\n                }\n            }\n\n            int R = l - 1;\n\n            ans += std::max(0, R - L + 1);\n        }\n\n        return ans;\n    }\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        vector<long long> a;\n        for(auto i : nums) a.push_back(i);\n        long long ans = closestAND(a, k);\n        return ans;\n    }\n};\n",
    "submit_ts": "1720279762",
    "subm_id": "1311764090"
}