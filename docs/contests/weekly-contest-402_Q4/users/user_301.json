{
    "username": "epic-6reideryof",
    "submission": "class SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n    \n    def build(self, node, start, end):\n        if start == end:\n            if self.is_peak(start):\n                self.tree[node] = 1\n            else:\n                self.tree[node] = 0\n        else:\n            mid = (start + end) // 2\n            left_node = 2 * node + 1\n            right_node = 2 * node + 2\n            self.build(left_node, start, mid)\n            self.build(right_node, mid + 1, end)\n            self.tree[node] = self.tree[left_node] + self.tree[right_node]\n    \n    def is_peak(self, i):\n        if i == 0 or i == self.n - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n    \n    def query(self, node, start, end, L, R):\n        if start > R or end < L:\n            return 0\n        if start >= L and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_node = 2 * node + 1\n        right_node = 2 * node + 2\n        left_query = self.query(left_node, start, mid, L, R)\n        right_query = self.query(right_node, mid + 1, end, L, R)\n        return left_query + right_query\n    \n    def update(self, node, start, end, idx):\n        if start == end:\n            if self.is_peak(idx):\n                self.tree[node] = 1\n            else:\n                self.tree[node] = 0\n        else:\n            mid = (start + end) // 2\n            left_node = 2 * node + 1\n            right_node = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(left_node, start, mid, idx)\n            else:\n                self.update(right_node, mid + 1, end, idx)\n            self.tree[node] = self.tree[left_node] + self.tree[right_node]\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        segment_tree = SegmentTree(nums)\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                if l < r - 1:\n                    count = segment_tree.query(0, 0, segment_tree.n - 1, l + 1, r - 1)\n                    results.append(count)\n                else:\n                    results.append(0)\n            elif query[0] == 2:\n                idx, val = query[1], query[2]\n                nums[idx] = val\n                if idx > 0:\n                    segment_tree.update(0, 0, segment_tree.n - 1, idx - 1)\n                segment_tree.update(0, 0, segment_tree.n - 1, idx)\n                if idx < segment_tree.n - 1:\n                    segment_tree.update(0, 0, segment_tree.n - 1, idx + 1)\n\n        return results",
    "submit_ts": "1718507106",
    "subm_id": "539779288"
}