{
    "username": "stupid_panda",
    "submission": "struct SegTree {\n    tree: Vec<i64>,\n    n: usize,\n}\n\nimpl SegTree {\n    fn new(arr: Vec<i64>) -> Self {\n        let n = arr.len();\n        let mut tree = vec![0; arr.len() * 2];\n        tree[n..].copy_from_slice(&arr);\n        for i in (1..n).rev() {\n            tree[i] = tree[i << 1] + tree[i << 1 | 1];\n        }\n        Self { n, tree }\n    }\n\n    // [l, r)\n    fn query(&self, mut l: usize, mut r: usize) -> i64 {\n        l += self.n;\n        r += self.n;\n        let mut ans = 0;\n        while l < r {\n            if l & 1 == 1 {\n                ans += self.tree[l];\n                l += 1;\n            }\n            if r & 1 == 1 {\n                r -= 1;\n                ans += self.tree[r];\n            }\n            l >>= 1;\n            r >>= 1;\n        }\n        ans\n    }\n}\n\nimpl Solution {\n    pub fn count_k_constraint_substrings(s: String, k: i32, queries: Vec<Vec<i32>>) -> Vec<i64> {\n        let s = s.as_bytes();\n        let mut each_r = vec![0_usize; s.len()];\n        let mut gaps = vec![0_i64; s.len()];\n\n        let mut r = 0;\n        let mut ones = 0;\n        let mut zeros = 0;\n        for l in 0..s.len() {\n            while r < s.len() {\n                let is_one = s[r] == b'1';\n                if ones + is_one as i32 <= k || zeros + !is_one as i32 <= k {\n                    r += 1;\n                    ones += is_one as i32;\n                    zeros += !is_one as i32;\n                } else {\n                    break;\n                }\n            }\n            each_r[l] = r;\n            gaps[l] = (r - l) as _;\n            if s[l] == b'1' {\n                ones -= 1;\n            } else {\n                zeros -= 1;\n            }\n        }\n\n        let mut ans = vec![];\n        let seg_tree = SegTree::new(gaps);\n        for q in &queries {\n            let q_l = q[0] as usize;\n            let q_r = q[1] as usize + 1;\n            let point = each_r.partition_point(|&x| x <= q_r).max(q_l);\n            let left_sum = seg_tree.query(q_l, point);\n            let right_sum = (q_r - point + 1) * (q_r - point) / 2;\n            ans.push(left_sum + right_sum as i64);\n        }\n        ans\n    }\n}\n",
    "submit_ts": "1723952791",
    "subm_id": "1359804705"
}