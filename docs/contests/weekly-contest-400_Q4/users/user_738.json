{
    "username": "letsseeshallwe",
    "submission": "class Solution {\npublic:\n\n    void build_segtree(int segtree[], int root, int left, int right, vector<int>& nums) {\n\n        if (left > right) return ;\n\n        if (left == right) {\n\n            segtree[root] = nums[left];\n            return ;\n        }\n\n        int mid = (left + right) >> 1;\n\n        build_segtree(segtree, root + root + 1, left, mid, nums);\n        build_segtree(segtree, root + root + 2, mid + 1, right, nums);\n\n        segtree[root] = segtree[root + root + 1] & segtree[root + root + 2];\n    }\n\n    int query_segtree(int segtree[], int root, int ql, int qr, int left, int right, int safe) {\n\n        if (left > right) return safe;\n\n        if ((ql == left) && (qr == right)) return segtree[root];\n\n        if ((ql > right) || (qr < left)) return safe;\n\n        int mid = (left + right) >> 1;\n\n        return ((query_segtree(segtree, root + root + 1, ql, min(qr, mid), left, mid, safe)) &\n                 (query_segtree(segtree, root + root + 2, max(mid + 1, ql), qr, mid + 1, right, safe)));\n    }\n\n    int minimumDifference(vector<int>& nums, int k) {\n        \n        int n = nums.size();\n        int segtree[4*n];\n        build_segtree(segtree, 0, 0, n - 1, nums);\n\n        int ans = INT_MAX;\n\n        for (int i = 0 ; i < n ; i ++) {\n\n            int low = i, high = n - 1, mid;\n\n            while (low <= high) {\n\n                mid = low + ((high - low) >> 1);\n                int temp = query_segtree(segtree, 0, i, mid, 0, n - 1, nums[i]);\n\n                ans = min(ans, abs(temp - k));\n\n                if (temp <= k) {\n\n                    high = mid - 1;\n                }\n                else {\n\n                    low = mid + 1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717299808",
    "subm_id": "1274824540"
}