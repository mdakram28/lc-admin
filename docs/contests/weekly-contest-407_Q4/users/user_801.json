{
    "username": "admiring-matsumotomgs",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing ll = long long;\nusing ld = long double;\nusing i128 = __int128_t;\n\n\n\ntemplate<class Info, class Tag>\nstruct LazySegmentTree {\n    int n;\n    vector<Info> info;\n    vector<Tag> tag;\n    LazySegmentTree() {\n\n    }\n\n    LazySegmentTree(int n) : n(n), info(4 * n), tag(4 * n) {}\n    template <typename T>\n    LazySegmentTree(vector<T> init) : LazySegmentTree(init.size()) {\n        auto build = [&](auto build, int id, int l, int r) -> void {\n            if (r == l) {\n                info[id] = init[l];\n                return;\n            }\n            int m = (l + r) >> 1;\n            build(build, id << 1, l, m);\n            build(build, id << 1 | 1, m + 1, r);\n            pull(id);\n        };\n        build(build, 1, 0, n - 1);\n    }\n    void pull(int id) {\n        info[id] = info[id << 1] + info[id << 1 | 1];\n    }\n    void apply(int id, const Tag &v) {\n        info[id] += v;\n        tag[id] += v;\n    }\n    void push(int id) {\n        apply(id << 1, tag[id]);\n        apply(id << 1 | 1, tag[id]);\n        tag[id] = Tag();\n    }\n    void modify(int id, int l, int r, int p, const Info &v) {\n        if (r == l) {\n            info[id] = v;\n            return;\n        }\n        int m = (l + r) >> 1;\n        push(id);\n        if (p <= m) {\n            modify(id << 1, l, m, p, v);\n        } else {\n            modify(id << 1 | 1, m + 1, r, p, v);\n        }\n        pull(id);\n    }\n    void modify(int p, const Info &v) {\n        modify(1, 0, n - 1, p, v);\n    }\n    Info rangeQuery(int id, int l, int r, int ql, int qr) {\n        if (qr < l || r < ql) {\n            return Info();\n        }\n        if (ql <= l && r <= qr) {\n            return info[id];\n        }\n        int m = (l + r) >> 1;\n        push(id);\n        return rangeQuery(id << 1, l, m, ql, qr) + rangeQuery(id << 1 | 1, m + 1, r, ql, qr);\n    }\n    Info rangeQuery(int ql, int qr) {\n        return rangeQuery(1, 0, n - 1, ql, qr);\n    }\n    void rangeApply(int id, int l, int r, int ql, int qr, const Tag &v) {\n        if (qr < l || r < ql) {\n            return;\n        }\n        if (ql <= l && r <= qr) {\n            apply(id, v);\n            return;\n        }\n        int m = (l + r) >> 1;\n        push(id);\n        rangeApply(id << 1, l, m, ql, qr, v);\n        rangeApply(id << 1 | 1, m + 1, r, ql, qr, v);\n        pull(id);\n    }\n    void rangeApply(int ql, int qr, const Tag &v) {\n        return rangeApply(1, 0, n - 1, ql, qr, v);\n    }\n};\n\n\nstruct Tag {\n    ll t = 0;\n    Tag() {\n\n    }\n    Tag(ll x) {\n        t = x;\n    }\n};\n\n//lazy\u6570\u636e\u7684\u66f4\u65b0\nTag& operator+=(Tag &a, Tag b) {\n    a.t += b.t;\n    return a;\n}\n\nstruct Info {\n    ll s = 0;\n    int cnt = 0;\n    Info() {\n\n    }\n    Info(ll x) {\n        s = x;\n        cnt = 1;\n    }\n};\n\nInfo operator+(Info a, Info b) {\n    Info ans(a.s + b.s);\n    ans.cnt = a.cnt + b.cnt;\n    return ans;\n}\n\nInfo& operator+=(Info &a, Tag b) {\n    a.s += b.t * a.cnt;\n    return a;\n}\nclass Solution {\npublic:\n    long long minimumOperations(vector<int>& a, vector<int>& b) {\n        int N = a.size();\n        vector<int> c(N);\n\n        for (int i = 0; i < N; i++) {\n            c[i] = a[i] - b[i];\n\n        }\n        LazySegmentTree<Info, Tag> seg(N);\n        for(int i=0;i<N;i++)\n            seg.modify(i,Info(0));\n        ll ans = 0;\n        for (int i = 0; i < N;) {\n            if (c[i] == 0) {\n                i++;\n                continue;\n            }\n            vector<ll> cur;\n            int j = i;\n            while (j < N && c[j] > 0 == c[i] > 0) {\n                cur.push_back(j);\n                j++;\n            }\n            // cout<<cur.size()<<endl;\n            sort(cur.begin(), cur.end(), [&](int x, int y)->bool{\n                return abs(c[x]) < abs(c[y]);\n            });\n            set<int> s;\n            s.insert(i-1);\n            s.insert(j);\n            ll res=0;\n            for (int k = 0; k < cur.size(); k++) {\n                ll sum = c[cur[k]] + seg.rangeQuery(cur[k], cur[k]).s;\n                // cout<< seg.rangeQuery(cur[k], cur[k]).s<<endl;\n                // cout<<c[cur[k]]<<endl;\n                auto it = s.lower_bound(cur[k]);\n                int right = *it - 1;\n                --it;\n                int left = *it + 1;\n                // cout<<left<<\" \"<<right<<\" \"<<c[cur[k]]<<endl;\n                seg.rangeApply(left, right, Tag(-sum));\n                ans += abs(sum);\n                res+=abs(sum);\n                s.insert(cur[k]);\n            }\n            // cout<<res<<endl;\n            i = j;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721531582",
    "subm_id": "548387180"
}