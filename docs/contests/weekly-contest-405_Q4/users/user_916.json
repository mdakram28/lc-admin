{
    "username": "sergey_chebotarev",
    "submission": "class Solution {\n    // 32:00\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] minCosts = new int[n + 1];\n        Arrays.fill(minCosts, -2);\n        minCosts[n] = 0;\n        Trie trie = buildTrie(words, costs);\n        minCostRec(target, 0, trie, minCosts);\n        return minCosts[0] == -2 ? -1 : minCosts[0];\n    }\n\n    private int minCostRec(String target, int from, Trie root, int[] minCosts) {\n        if (minCosts[from] != -2) {\n            return minCosts[from];\n        }\n        int min = -1;\n        Trie trie = root;\n        for (int i = from; i < target.length(); i++) {\n            trie = trie.get(target.charAt(i), false);\n            if (trie == null) {\n                break;\n            } else if (trie.word != null) {\n                int cost = minCostRec(target, i + 1, root, minCosts);\n                if (cost != -1) {\n                    cost += trie.cost;\n                    if (min == -1 || cost < min) {\n                        min = cost;\n                    }\n                }\n            }\n        }\n        return minCosts[from] = min;\n    }\n\n    private Trie buildTrie(String[] words, int[] costs) {\n        Trie root = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            root.add(words[i], costs[i]);\n        }\n        return root;\n    }\n\n    private static class Trie {\n        private Trie[] nodes = new Trie[26];\n        private String word;\n        private int cost = Integer.MAX_VALUE;\n\n        public void add(String word, int cost) {\n            Trie node = this;\n            for (int i = 0; i < word.length(); i++) {\n                node = node.get(word.charAt(i), true);\n            }\n            node.word = word;\n            node.cost = Math.min(cost, node.cost); // keeping the best word option\n        }\n\n        private Trie get(char ch, boolean create) {\n            int idx = ch - 'a';\n            if (nodes[idx] == null && create) {\n                nodes[idx] = new Trie();\n            }\n            return nodes[idx];\n        }\n    }\n}\n\n/*\nCost of creating a \nDP[len][i]\n*/",
    "submit_ts": "1720323378",
    "subm_id": "1312374075"
}