{
    "username": "Rutuja Madane",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        auto getBest = [&](const vector<int>& row) {\n            vector<pair<long long, int>> vals;\n            for (int j = 0; j < n; ++j) {\n                vals.emplace_back(row[j], j);\n            }\n            sort(vals.rbegin(), vals.rend());\n            vector<long long> bVals(3, LLONG_MIN);\n            vector<int> bCols(3, -1);\n            for (int k = 0; k < 3 && k < n; ++k) {\n                bVals[k] = vals[k].first;\n                bCols[k] = vals[k].second;\n            }\n            return make_pair(bVals, bCols);\n        };\n\n        vector<vector<long long>> bVals(m, vector<long long>(3, LLONG_MIN));\n        vector<vector<int>> bCols(m, vector<int>(3, -1));\n\n        for (int i = 0; i < m; ++i) {\n            auto [vals, cols] = getBest(board[i]);\n            bVals[i] = vals;\n            bCols[i] = cols;\n        }\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (int i = 0; i < 3; ++i) {\n                        for (int j = 0; j < 3; ++j) {\n                            if (bCols[r2][j] == bCols[r1][i]) continue;\n                            for (int k = 0; k < 3; ++k) {\n                                if (bCols[r3][k] == bCols[r1][i] || bCols[r3][k] == bCols[r2][j]) continue;\n                                long long curSum = bVals[r1][i] + bVals[r2][j] + bVals[r3][k];\n                                maxSum = max(maxSum, curSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n\n    }\n};",
    "submit_ts": "1723910252",
    "subm_id": "1359223052"
}