{
    "username": "ashishrajak88",
    "submission": "class Solution {\n      static class TrieNode {\n        TrieNode[] children = new TrieNode[26];\n        List<Integer> indices = new ArrayList<>();\n    }\n\n    private void insertTrie(TrieNode root, String word, int index) {\n        TrieNode node = root;\n        for (int i = word.length() - 1; i >= 0; i--) {\n            int idx = word.charAt(i) - 'a';\n            if (node.children[idx] == null) {\n                node.children[idx] = new TrieNode();\n            }\n            node = node.children[idx];\n        }\n        node.indices.add(index);  // Store the index of the word in the words array\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n         TrieNode root = new TrieNode();\n        for (int i = 0; i < words.length; i++) {\n            insertTrie(root, words[i], i);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int j = 1; j <= n; j++) {\n            TrieNode node = root;\n            for (int i = j - 1; i >= 0 && node != null; i--) {\n                node = node.children[target.charAt(i) - 'a'];\n                if (node != null) {\n                    for (int index : node.indices) {\n                        int start = i;\n                        int cost = costs[index];\n                        if (dp[start] != Integer.MAX_VALUE) {\n                            dp[j] = Math.min(dp[j], dp[start] + cost);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720321405",
    "subm_id": "1312322013"
}