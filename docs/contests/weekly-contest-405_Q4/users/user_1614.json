{
    "username": "harshit044",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nstruct Node {\n    // Array to store links to child nodes, each index represents a letter\n    Node* links[26];\n    // Vector to store pairs of word index and cost\n    vector<pair<int, int>> costSize;\n    bool flag = false;\n\n    // Check if the node contains a specific key (letter)\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n\n    // Insert a new node with a specific key (letter) into the Trie\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    // Get the node with a specific key (letter) from the Trie\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    // Set the current node as the end of a word\n    void setEnd() {\n        flag = true;\n    }\n\n    // Check if the current node marks the end of a word\n    bool isEnd() {\n        return flag;\n    }\n};\n\n// Trie class\nclass Trie {\nprivate:\n    Node* root;\n\npublic:\n    // Constructor to initialize the Trie with an empty root node\n    Trie() {\n        root = new Node();\n    }\n\n    // Inserts a word into the Trie\n    void insert(string word, int index, int price) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node->containsKey(word[i])) {\n                // Create a new node for the letter if not present\n                node->put(word[i], new Node());\n            }\n            // Move to the next node\n            node = node->get(word[i]);\n        }\n        // Mark the end of the word and add the cost and index\n        node->costSize.push_back({index, price});\n        node->setEnd();\n    }\n\n    int search(string word, vector<string>& words) {\n        int n = word.size();\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n\n        // Traverse the target word\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == 1e9)\n                continue;\n\n            Node* node = root;  // Reset node to root for each new starting position\n            for (int j = i; j < n; ++j) {\n                if (!node->containsKey(word[j]))\n                    break;\n                node = node->get(word[j]);\n                for (auto &p : node->costSize) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n\n    // Returns if there is any word in the trie that starts with the given prefix\n    bool startsWith(string prefix) {\n        Node* node = root;\n        for (int i = 0; i < prefix.length(); i++) {\n            if (!node->containsKey(prefix[i])) {\n                // If a letter is not found, there is no word with the given prefix\n                return false;\n            }\n            // Move to the next node\n            node = node->get(prefix[i]);\n        }\n        // The prefix is found in the Trie\n        return true;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = words.size();\n        for (int i = 0; i < n; i++) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        return trie.search(target, words);\n    }\n};\n",
    "submit_ts": "1720324293",
    "subm_id": "1312396066"
}