{
    "username": "HarshSantoshi",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\nclass Solution {\npublic:\n    int solve( int idx,vector<int>&nums  , int prev  , int k , vector<vector<vector<int>>>&dp){\n        if(idx == nums.size()){\n            return 0;\n        }\n        if(dp[idx][prev + 1][k]!=-1)return dp[idx][prev + 1][k];\n        int take = 0 , nottake = 0;\n        if(prev == -1 || nums[prev] == nums[idx]){\n            take =1 + solve(idx + 1 , nums , idx , k , dp);\n            nottake = solve(idx + 1 , nums , prev , k , dp);\n        }\n        else{\n            if(k){\n                take = 1 + solve(idx + 1 , nums , idx , k-1 , dp);\n            }\n            nottake = solve(idx + 1 , nums ,prev , k , dp);\n        }\n        return dp[idx][prev + 1][k] = max(take , nottake);\n    }\n    int maximumLength(vector<int>& nums, int k) { \n        int n=nums.size(); \n        vector<vector<int>>dp(n,vector<int>(k+1,1)); \n        int ans=1; \n        vector<int>numsk(k+1,-1); \n        vector<map<int,int>>numsMap(k+1); \n        for(int curr=0;curr<n;curr++){ \n            for(int currk=0;currk<k+1;currk++){ \n                for(int prev=0;prev<currk;prev++){ \n                    dp[curr][currk]=max(dp[curr][currk],1+numsk[prev]); \n                } \n                if(numsMap[currk].find(nums[curr])!=numsMap[currk].end()){ \n                    dp[curr][currk]=max(dp[curr][currk],1+numsMap[currk][nums[curr]]); \n                } \n                ans=max(ans,dp[curr][currk]); \n            } \n            int currk=0;\n            while(currk<k+1){ \n                numsk[currk]=max(numsk[currk],dp[curr][currk]); \n                numsMap[currk][nums[curr]]=max(numsMap[currk][nums[curr]],dp[curr][currk]); \n                currk++;\n            } \n        } \n        return ans; \n    }\n};",
    "submit_ts": "1717862384",
    "subm_id": "1281822002"
}