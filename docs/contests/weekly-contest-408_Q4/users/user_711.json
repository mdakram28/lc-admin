{
    "username": "abhishekpathak1711",
    "submission": "#define ll long long\n#define vi vector<int>\n#define vll vector<long long>\n#define pii pair<int, int>\n#define pll pair<long long, long long>\n#define pb push_back\n#define mp make_pair\n#define all(v) v.begin(), v.end()\n#define F first\n#define S second\n\n// Function to print vectors for debugging\ntemplate <typename T>\nvoid print_vector(const vector<T>& v) {\n    for (const auto& elem : v) {\n        cout << elem << \" \";\n    }\n    cout << \"\\n\";\n}\n\n// Function to find the minimum element in a vector\ntemplate <typename T>\nT find_min(const vector<T>& v) {\n    return *min_element(all(v));\n}\n\n// Function to find the maximum element in a vector\ntemplate <typename T>\nT find_max(const vector<T>& v) {\n    return *max_element(all(v));\n}\n\n// Function to compute the sum of elements in a vector\ntemplate <typename T>\nT compute_sum(const vector<T>& v) {\n    return accumulate(all(v), T(0));\n}\n\n// Function to compute the average of elements in a vector\ntemplate <typename T>\ndouble compute_average(const vector<T>& v) {\n    return static_cast<double>(compute_sum(v)) / v.size();\n}\n\n// Function to reverse a vector\ntemplate <typename T>\nvoid reverse_vector(vector<T>& v) {\n    reverse(all(v));\n}\n\n// Function to sort a vector\ntemplate <typename T>\nvoid sort_vector(vector<T>& v) {\n    sort(all(v));\n}\n\n// function to print a pair of integers\nvoid print_pair(const pii& p) {\n    cout << \"(\" << p.first << \", \" << p.second << \")\\n\";\n}\n\nclass Solution {\npublic:\n    // bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n    //     bool right = false, left = false, up = false, down = false;\n         \n    // }\n    bool canReachCorner(int width, int height, vector<vector<int>>& circles) {\n        return isPathClear(width, height, circles);\n    }\n\nprivate:\n    bool isPathClear(int width, int height, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4);\n\n        for (int i = 0; i < numCircles; ++i) {\n            if (circles[i][0] <= circles[i][2]) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (width - circles[i][0] <= circles[i][2]) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (height - circles[i][1] <= circles[i][2]) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radiusSum = circles[i][2] + circles[j][2];\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int blockage = 0;\n        blockage = max(blockage, performBFS(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        blockage = max(blockage, performBFS(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n\n        return blockage == 0;\n    }\n\n    int performBFS(vector<vector<int>>& graph, int start, int target1, int target2, int nodesCount) {\n        queue<int> q;\n        vector<bool> visited(nodesCount + 4, false);\n\n        q.push(start);\n        visited[start] = true;\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return (visited[target1] || visited[target2]) ? 1 : 0;\n    }\n};",
    "submit_ts": "1722138689",
    "subm_id": "1335797164"
}