{
    "username": "_volder_mort",
    "submission": "#include <vector>\nusing namespace std;\n\nclass PeakChecker {\npublic:\n    static bool isPeak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) return false;\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n};\n\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = PeakChecker::isPeak(nums, i) ? 1 : 0;\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[i << 1] + tree[i << 1 | 1];\n        }\n    }\n\n    void updateTree(const vector<int>& nums, int idx) {\n        idx += n;\n        tree[idx] = PeakChecker::isPeak(nums, idx - n) ? 1 : 0;\n        while (idx > 1) {\n            idx >>= 1;\n            tree[idx] = tree[idx << 1] + tree[idx << 1 | 1];\n        }\n    }\n\n    int queryTree(int l, int r) {\n        int res = 0;\n        l += n;\n        r += n + 1;\n        while (l < r) {\n            if (l & 1) res += tree[l++];\n            if (r & 1) res += tree[--r];\n            l >>= 1;\n            r >>= 1;\n        }\n        return res;\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(2 * n);\n        build(nums);\n    }\n\n    void update(const vector<int>& nums, int idx) {\n        updateTree(nums, idx);\n    }\n\n    int query(int l, int r) {\n        return queryTree(l, r);\n    }\n};\n\n\nclass Solution {\nprivate:\n    void handleRangeQuery(SegmentTree& segTree, const vector<int>& query, vector<int>& ans) {\n        ans.push_back(segTree.query(query[1] + 1, query[2] - 1));\n    }\n\n    void handleUpdateQuery(SegmentTree& segTree, vector<int>& nums, const vector<int>& query) {\n        nums[query[1]] = query[2];\n        int n = nums.size();\n        if (query[1] > 0) segTree.update(nums, query[1] - 1);\n        segTree.update(nums, query[1]);\n        if (query[1] < n - 1) segTree.update(nums, query[1] + 1);\n    }\n\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        vector<int> ans;\n        SegmentTree segTree(a);\n\n        for (auto& query : q) {\n            if (query[0] == 1) handleRangeQuery(segTree, query, ans);\n            else if (query[0] == 2) handleUpdateQuery(segTree, a, query);\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": 1718509252.0
}