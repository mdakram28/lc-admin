{
    "username": "daksh_02",
    "submission": "class TrieNode {\n    Map<Character, TrieNode> children = new HashMap<>();\n    int cost = Integer.MAX_VALUE; // Initialize with a large value\n}\n\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            node.children.putIfAbsent(ch, new TrieNode());\n            node = node.children.get(ch);\n        }\n        node.cost = Math.min(node.cost, cost); // Store the minimum cost for this word\n    }\n\n    public TrieNode getRoot() {\n        return root;\n    }\n}\n\nclass Solution {\n    long mod = 998244353;\n    Trie trie = new Trie();\n    char[] t;\n    int[] dp;\n    int n;\n\n    public int minimumCost(String target, String[] s, int[] cost) {\n        n = target.length();\n        t = target.toCharArray();\n        dp = new int[n];\n        Arrays.fill(dp, -1); // Use -1 to indicate uncomputed states\n\n        for (int i = 0; i < s.length; i++) {\n            trie.insert(s[i], cost[i]);\n        }\n\n        int res = fun(0);\n        return res == Integer.MAX_VALUE ? -1 : res;\n    }\n\n    public int fun(int idx) {\n        if (idx == n) return 0;\n        if (dp[idx] != -1) return dp[idx];\n\n        int res = Integer.MAX_VALUE;\n        TrieNode node = trie.getRoot();\n\n        for (int i = idx; i < n; i++) {\n            if (!node.children.containsKey(t[i])) break;\n            node = node.children.get(t[i]);\n            if (node.cost != Integer.MAX_VALUE) {\n                int nextCost = fun(i + 1);\n                if (nextCost != Integer.MAX_VALUE) {\n                    res = Math.min(res, node.cost + nextCost);\n                }\n            }\n        }\n\n        return dp[idx] = res;\n    }\n}",
    "submit_ts": "1720323827",
    "subm_id": "1312384988"
}