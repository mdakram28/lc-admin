{
    "username": "donpaul299",
    "submission": "#define ll long long\n\nll dp[50][50][2];\n\n\nll find(int pos, int stat, int jump, int back, vector<ll> &exp, int k)\n{\n    if(pos > k+1)\n    {\n        \n        return 0;\n    }\n    \n    if(dp[jump][back][stat] != -1)\n        return dp[jump][back][stat]; \n    \n    \n    ll ans = 0;\n    \n    if(pos == k)\n    {\n        ++ans;\n    }\n\n    \n    if(stat == 1)\n    {\n        ans += find(pos-1, 0, jump, back+1, exp, k);\n        ans += find(pos+exp[jump], 1, jump+1, back, exp, k);\n    }\n\n    if(stat == 0)\n    {\n        ans += find(pos+exp[jump], 1, jump+1, back, exp, k);\n    }\n    \n    return dp[jump][back][stat] = ans;\n}\n\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n            \n        memset(dp, -1, sizeof(dp));\n        vector<ll> exp(33,0);\n        \n        for(int i=0; i<33; ++i)\n            exp[i] = pow(2, i);\n        \n        \n        ll ans = find(1, 1, 0, 0, exp, k);  \n            \n        \n        return ans;\n        \n    }\n};",
    "submit_ts": 1716089047.0
}