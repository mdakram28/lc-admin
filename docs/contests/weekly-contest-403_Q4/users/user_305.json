{
    "username": "silentbluesky",
    "submission": "class Solution {\npublic:\n    int cut2(vector<vector<int>>& grid, int top, int bot, int left, int right) {\n        while (top <= bot) {\n            int cnt = 0;\n            for (int i = left; i <= right; ++i) {\n                if (grid[top][i] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                top++;\n            } else {\n                break;\n            }\n        }\n        while (top <= bot) {\n            int cnt = 0;\n            for (int i = left; i <= right; ++i) {\n                if (grid[bot][i] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                bot--;\n            } else {\n                break;\n            }\n        }\n        while (left <= right) {\n            int cnt = 0;\n            for (int i = top; i <= bot; ++i) {\n                if (grid[i][left] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                left++;\n            } else {\n                break;\n            }\n        }\n        while (left <= right) {\n            int cnt = 0;\n            for (int i = top; i <= bot; ++i) {\n                if (grid[i][right] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                right--;\n            } else {\n                break;\n            }\n        }\n        int ans = (bot - top + 1) * (right - left + 1);\n        return ans == 0 ? INT_MAX >> 1 : ans;\n    }\n\n    int cut1(vector<vector<int>>& grid, int& top, int& bot, int& left, int&right) {\n        while (top <= bot) {\n            int cnt = 0;\n            for (int i = left; i <= right; ++i) {\n                if (grid[top][i] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                top++;\n            } else {\n                break;\n            }\n        }\n        while (top <= bot) {\n            int cnt = 0;\n            for (int i = left; i <= right; ++i) {\n                if (grid[bot][i] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                bot--;\n            } else {\n                break;\n            }\n        }\n        while (left <= right) {\n            int cnt = 0;\n            for (int i = top; i <= bot; ++i) {\n                if (grid[i][left] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                left++;\n            } else {\n                break;\n            }\n        }\n        while (left <= right) {\n            int cnt = 0;\n            for (int i = top; i <= bot; ++i) {\n                if (grid[i][right] == 1) {\n                    cnt++;\n                    break;\n                }\n            }\n            if (cnt == 0) {\n                right--;\n            } else {\n                break;\n            }\n        }\n        return (bot - top + 1) * (right - left + 1);\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int top = 0, bot = m - 1, left = 0, right = n - 1;\n        cut1(grid, top, bot, left, right);\n        function<int(int, int, int ,int ,int)> dfs = [&](int t, int b, int l, int r, int flag) {\n            int ans = (b - t + 1) * (r - l + 1);\n            for (int i = t; i <= b; i++) {\n                // [t, t] + [t + 1, b]\n                if (flag == 0) {\n                    ans = min(ans, cut2(grid, t, i, l, r) + cut2(grid, i + 1, b, l, r));\n                } else {\n                    ans = min({ans, cut2(grid, t, i, l, r) + dfs(i + 1, b, l, r, 0), dfs(t, i, l, r, 0) + cut2(grid,i + 1, b, l, r)});\n                }\n            }\n\n            for (int i = l; i <= r; i++) {\n                if (flag == 0) {\n                    ans = min(ans, cut2(grid, t, b, l, i) + cut2(grid, t, b, i + 1, r));\n                } else {\n                    ans = min({ans, cut2(grid, t, b, l, i) + dfs(t, b, i + 1, r, 0), dfs(t, b, l, i, 0) + cut2(grid, t, b, i + 1, r)});\n                }\n            }\n            return ans;\n        };\n        return dfs(top, bot, left, right, 1);\n    }\n};",
    "submit_ts": 1719113679.0
}