{
    "username": "yuwen-yan",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        num_of_row = len(grid)\n        num_of_col = len(grid[0])\n        \n        def minimumArea2(a, b, c, d) -> int:\n            if a > b or c > d:\n                return 0\n            min_row, max_row = math.inf, -math.inf\n            min_col, max_col = math.inf, -math.inf\n\n            found_one = False\n            for i in range(a, b + 1):\n                for j in range(c, d + 1):\n                    if grid[i][j] == 1:\n                        found_one = True\n\n                        min_row = min(min_row, i)\n                        max_row = max(max_row, i)\n\n                        min_col = min(min_col, j)\n                        max_col = max(max_col, j)\n\n            if not found_one:\n                return 0\n            return (max_row - min_row + 1) * (max_col - min_col + 1)\n    \n        @cache\n        def dp(a, b, c, d, x):\n            if a > b or c > d:\n                return 0\n            \n            ans = minimumArea2(a, b, c, d)\n            if x == 1:\n                return ans\n            if a < b:\n                for i in range(a, b):\n                    ans = min(ans, minimumArea2(a,     i, c, d) + dp(i + 1, b, c, d, x - 1))\n                    ans = min(ans, minimumArea2(i + 1, b, c, d) + dp(a    , i, c, d, x - 1))\n            if c < b:\n                for j in range(c, d):\n                    ans = min(ans, minimumArea2(a, b, c,     j) + dp(a, b, j + 1, d, x - 1))\n                    ans = min(ans, minimumArea2(a, b, j + 1, d) + dp(a, b, c,     j, x - 1))\n            return ans\n            \n        return dp(0, num_of_row - 1, 0, num_of_col - 1, 3)\n\n        \n            \n        ",
    "submit_ts": "1719111502",
    "subm_id": "1297275014"
}