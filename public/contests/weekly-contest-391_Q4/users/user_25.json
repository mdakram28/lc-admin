{
    "username": "lydxlx",
    "submission": "import bisect\nfrom functools import cache\nfrom typing import *\nfrom collections import namedtuple\nfrom sortedcontainers import SortedList, SortedDict\nfrom collections import Counter\nfrom math import inf\nfrom math import gcd\nimport string\nimport random\nimport itertools\n\nprint(\"Start\")\n\n\nclass Solution:\n    def getDistance(self, p1, p2):\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1])\n\n    def helper(self, points, ignore):\n        plus = []\n        minus = []\n        n = len(points)\n        for i in range(n):\n            if i == ignore:\n                continue\n            plus.append((points[i][0] + points[i][1], i))\n            minus.append((points[i][0] - points[i][1], i))\n        plus.sort()\n        minus.sort()\n        plus_distance = self.getDistance(points[plus[0][1]], points[plus[-1][1]])\n        minus_distance = self.getDistance(points[minus[0][1]], points[minus[-1][1]])\n        if plus_distance > minus_distance:\n            return plus_distance, plus[0][1], plus[-1][1]\n        return minus_distance, minus[0][1], minus[-1][1]\n\n    def minimumDistance(self, points):\n        ignore, index1, index2 = self.helper(points, -1)\n        distance1, ignore1, ignore2 = self.helper(points, index1)\n        distance2, ignore1, ignore2 = self.helper(points, index2)\n        return min(distance1, distance2)\n\n\nsolution = Solution()\nprint(solution.minimumDistance([[3, 10], [5, 15], [10, 2], [4, 4]]))\nprint(solution.minimumDistance([[1, 1], [1, 1], [1, 1]]))\n"
}