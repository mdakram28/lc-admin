{
    "username": "Ankush_balse",
    "submission": "class Solution {\n    int memo(int idx,int pre,int n,vector<int> &count,vector<bool> &include,vector<vector<int>> &dp){\n        if(idx==n) return pre == count[n-1];\n        if(pre>count[idx]) return 0;\n        if(dp[idx][pre]!=-1) return dp[idx][pre];\n        int ans = 0;\n        if(include[idx]){\n            if(count[idx]-pre<=idx)\n                ans = (ans + memo(idx+1,count[idx],n,count,include,dp))%1000000007;\n        }\n        else{\n            int maxi = min(count[idx],pre+idx);\n            for(int i=pre;i<=maxi;++i)\n                ans = (ans + memo(idx+1,i,n,count,include,dp))%1000000007;\n        }\n        return dp[idx][pre] = ans;\n    }\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<bool> include(n,false);\n        vector<int> count(n,-1);\n        for(auto i:requirements){\n            count[i[0]] = i[1];\n            include[i[0]] = true;\n        }\n        for(int i=n-2;i>=0;--i)\n            if(count[i]==-1)\n                count[i]=min((i*(i+1))>>1,count[i+1]);\n        vector<vector<int>> dp(n,vector<int> (count[n-1]+1,-1));\n        int ans = memo(0,0,n,count,include,dp);\n        dp.clear();\n        return ans;\n    }\n};",
    "submit_ts": "1719071778",
    "subm_id": "1296853952"
}