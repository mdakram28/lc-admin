{
    "username": "Shivam Krishan Varshney",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n\n        List<List<int[]>> maxValueList = new ArrayList<>();\n\n        for (int i = 0; i < m; i++) {\n            PriorityQueue<int[]> pQueue = new PriorityQueue<>((a , b) -> a[0] - b[0]);\n            for (int j = 0; j < n; j++) {\n                pQueue.add(new int[] {board[i][j], j});\n                if (pQueue.size() > 3) {\n                    pQueue.poll();\n                }\n            }\n            maxValueList.add(new ArrayList<>(pQueue));\n        }\n\n        long maxSum = Long.MIN_VALUE;\n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; j < m; j++) {\n                for (int k = j + 1; k < m; k++) {\n                    long currentSum = getMaxSumForThreeRows(maxValueList.get(i), maxValueList.get(j), maxValueList.get(k));\n                    maxSum = Math.max(maxSum, currentSum);\n                }\n            }\n        }\n\n        return maxSum;\n    }\n    private long getMaxSumForThreeRows(List<int[]> row1, List<int[]> row2, List<int[]> row3) {\n        long bestSum = Long.MIN_VALUE;\n\n        for (int[] val1 : row1) {\n            for (int[] val2 : row2) {\n                if (val1[1] == val2[1]) continue; // Skip if columns are the same\n                for (int[] val3 : row3) {\n                    if (val1[1] != val3[1] && val2[1] != val3[1]) { // Ensure all columns are unique\n                        long currentSum = (long) val1[0] + val2[0] + val3[0];\n                        bestSum = Math.max(bestSum, currentSum);\n                    }\n                }\n            }\n        }\n\n        return bestSum;\n    }\n}\n",
    "submit_ts": "1723906636",
    "subm_id": "1359063992"
}