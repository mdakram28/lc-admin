{
    "username": "qing-shi-e",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        Map<Integer, Integer> freq = new HashMap<>();\n        int topFrequencyCount = 10; \n        for (int i = 0; i < n / 2; i++) {\n            int diff = Math.abs(nums[i] - nums[n - i - 1]);\n            freq.merge(diff, 1, Integer::sum);\n        }\n        PriorityQueue<Map.Entry<Integer, Integer>> pq = new PriorityQueue<>(\n            (a, b) -> Integer.compare(b.getValue(), a.getValue())\n        );\n        pq.addAll(freq.entrySet());\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < topFrequencyCount && !pq.isEmpty(); i++) {\n            Map.Entry<Integer, Integer> entry = pq.poll();\n            int X = entry.getKey();\n            int changes = 0;\n            for (int j = 0; j < n / 2; j++) {\n                int a = nums[j], b = nums[n - j - 1];\n                int c1 = 2, c2 = 2;\n                if (a - b == X) c1 = 0;\n                else if ((0 <= a - X && a - X <= k) || (0 <= b + X && b + X <= k)) c1 = 1;\n\n                if (b - a == X) c2 = 0;\n                else if ((0 <= b - X && b - X <= k) || (0 <= a + X && a + X <= k)) c2 = 1;\n                changes += Math.min(c1, c2);\n            }\n            ans = Math.min(ans, changes);\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1721488235",
    "subm_id": "548313462"
}