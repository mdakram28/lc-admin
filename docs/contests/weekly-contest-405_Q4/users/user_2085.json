{
    "username": "_anova_",
    "submission": "#include <vector>\n#include <string>\n#include <limits.h>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    TrieNode* children[26] = {};\n    bool isEnd = false;\n    int cost = INT_MAX;\n};\n\nclass Solution {\npublic:\n    TrieNode* root = new TrieNode();\n    \n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->isEnd = true;\n        node->cost = min(node->cost, cost); // Keep the minimum cost for duplicates\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Build the trie\n        for (int i = 0; i < words.size(); ++i) {\n            insert(words[i], costs[i]);\n        }\n        \n        // DP update using trie\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Can't form substring ending at i\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break; // No path forward\n                node = node->children[target[j] - 'a'];\n                if (node->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322148",
    "subm_id": "1312342001"
}