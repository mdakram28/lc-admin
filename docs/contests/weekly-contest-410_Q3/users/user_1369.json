{
    "username": "matthegi",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        # arr1 increasing, but elements can be equal\n        # arr2 decreasing, but can be equal\n\n        modulo = 10**9 + 7\n        goodPairs = 0\n        memo = dict()\n        def dfs(index, prev1, prev2):\n            nonlocal goodPairs\n            nonlocal modulo\n            if (index, prev1, prev2) in memo:\n                goodPairs += memo[(index, prev1, prev2)]\n                goodPairs = goodPairs % modulo\n                return memo[(index, prev1, prev2)]\n\n            if index == len(nums):\n                goodPairs += 1\n                goodPairs = goodPairs % modulo\n                memo[(index, prev1, prev2)] = 1\n                return 1\n\n            canBeDivided = nums[index]\n            firstArr = prev1\n            # if the minimum prev1 can be is greater, return, cant work\n            if firstArr > canBeDivided:\n                memo[(index, prev1, prev2)] = 0\n                return 0\n            \n            pairsPos = 0\n            for possible in range(firstArr, canBeDivided + 1):\n                secondArr = canBeDivided - possible\n                if secondArr > prev2:\n                    continue\n                pairsPos += dfs(index + 1, possible, secondArr)\n            memo[(index, prev1, prev2)] = pairsPos\n            return pairsPos\n\n        dfs(0, 0, float(\"inf\"))\n        return goodPairs",
    "submit_ts": "1723345336",
    "subm_id": "1351553572"
}