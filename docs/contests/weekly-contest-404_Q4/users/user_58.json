{
    "username": "datn2107",
    "submission": "class Solution {\npublic:\n    \n    void dfs(int p, int u, vector<vector<int>> &a, vector<int> &d) {\n        for (int v : a[u]) {\n            if (v == p) \n                continue;\n            d[v] = d[u] + 1;\n            dfs(u, v, a, d);\n        }\n        return;\n    };\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1; \n\n        vector<vector<int>> adj1(n),  adj2(m);\n        for (auto &e : edges1) {\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        for (auto &e : edges2) {\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n\n        \n        int u, v, d1, d2; \n        vector<int> dst1(n, 0), dst2(m, 0);   \n\n        dfs(-1, 0, adj1, dst1);\n        u = max_element(dst1.begin(), dst1.end()) - dst1.begin();\n\n        dfs(-1, 0, adj2, dst2);\n        v = max_element(dst2.begin(), dst2.end()) - dst2.begin();\n\n        dst1[u] = 0;\n        dfs(-1, u, adj1, dst1);\n        d1 = *max_element(dst1.begin(), dst1.end());\n        \n        dst2[v] = 0;\n        dfs(-1, v, adj2, dst2);\n        d2 = *max_element(dst2.begin(), dst2.end());\n\n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": 1719716586.0
}