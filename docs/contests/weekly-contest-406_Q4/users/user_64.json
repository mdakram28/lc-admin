{
    "username": "Arul_2005",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the horizontal and vertical cuts in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n\n        int i = horizontalCut.length - 1;\n        int j = verticalCut.length - 1;\n        long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n\n        // Use a greedy approach to pick the largest remaining cut first\n        while (i >= 0 && j >= 0) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += (long) horizontalCut[i] * verticalPieces;\n                horizontalPieces++;\n                i--;\n            } else {\n                totalCost += (long) verticalCut[j] * horizontalPieces;\n                verticalPieces++;\n                j--;\n            }\n        }\n\n        // Add the remaining cuts if any\n        while (i >= 0) {\n            totalCost += (long) horizontalCut[i] * verticalPieces;\n            horizontalPieces++;\n            i--;\n        }\n\n        while (j >= 0) {\n            totalCost += (long) verticalCut[j] * horizontalPieces;\n            verticalPieces++;\n            j--;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720924881",
    "subm_id": "1320234578"
}