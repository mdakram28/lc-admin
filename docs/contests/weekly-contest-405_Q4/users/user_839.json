{
    "username": "kml123",
    "submission": "struct TrieNode {\n        TrieNode* links[26];\n        vector<int> endLengths; \n        vector<int> endCosts;\n\n        \n};\n\nclass Trie {\n    public:\n        TrieNode* root;\n        Trie() {\n            root = new TrieNode(); \n        }\n\n        void insert(string& word, int length, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->links[c - 'a'])\n                    node->links[c - 'a'] = new TrieNode();\n                node = node->links[c - 'a'];\n            }\n            node->endLengths.push_back(length);\n            node->endCosts.push_back(cost);\n        }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], words[i].length(), costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->links[target[j] - 'a']) break;\n                node = node->links[target[j] - 'a'];\n                for (int k = 0; k < node->endLengths.size(); ++k) {\n                    int wordLength = node->endLengths[k];\n                    int wordCost = node->endCosts[k];\n                    if (i + wordLength <= n) {\n                        dp[i + wordLength] = min(dp[i + wordLength], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX) dp[n]=-1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720323251",
    "subm_id": "1312370994"
}