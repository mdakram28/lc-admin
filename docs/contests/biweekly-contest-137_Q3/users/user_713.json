{
    "username": "Chinedu",
    "submission": "class Solution {\n    long min = -1_000_000_000_000L;\n\n    Long [][][] memoR, memoB, memoOne;\n\n    public long maximumValueSum(int[][] board) {\n        long first, second, third;\n\n        long result = min;\n        long val;\n\n        memoR = new Long [board.length][board[0].length][board[0].length];\n        memoB = new Long [board.length][board[0].length][board[0].length];\n        memoOne = new Long [board.length][board[0].length][board[0].length];\n\n        for (int i = 0; i < board.length; ++i) {\n            for (int j = 0; j < board[0].length; ++j) {\n                first = solveR(board, i + 1, j + 1, board[0].length - 1);\n                second = solveR(board, i + 1, 0, j - 1);\n                third = solveB(board, i + 1, j - 1,  j + 1);\n\n                val = board[i][j];\n                val += Math.max(first, Math.max(second, third));\n\n               // System.out.println(board[i][j] + \" \" + val);\n\n                result = Math.max(val, result);\n            }\n        }\n\n        return result; \n    }\n\n    private long solveB(int [][] board, int r, int lc, int rc) {\n         if (r >= board.length || lc < 0 || rc >= board[0].length ) \n            return min;\n         else if (memoB[r][lc][rc] != null) \n            return memoB[r][lc][rc];\n\n        long result = solveB(board, r + 1, lc, rc);\n\n        result = Math.max(result, solveB(board, r, lc - 1, rc));\n        result = Math.max(result, solveB(board, r, lc, rc + 1));\n\n        long result1 = board[r][lc] + solveOne(board, r + 1, rc, board[0].length - 1);\n        long result2 = board[r][rc] + solveOne(board, r + 1, 0, lc);\n\n        long result3 = Math.max(result1, result2);\n\n        result = Math.max(result, result3);\n\n        memoB[r][lc][rc] = result; \n        return result;\n    }\n\n    private long solveR(int [][] board, int r, int lc, int rc) {\n       //  System.out.println(lc + \" \" + rc);\n        if (r >= board.length || lc >= rc) \n            return min;\n        else if (memoR[r][lc][rc] != null)    \n            return memoR[r][lc][rc];\n\n        long result = solveR(board, r + 1, lc, rc);\n\n        result = Math.max(result, solveR(board, r, lc + 1, rc));\n        result = Math.max(result, solveR(board, r, lc, rc - 1));\n\n        \n        long result1 = board[r][lc] + solveOne(board, r + 1, lc + 1, rc);\n        long result2 = board[r][rc] + solveOne(board, r + 1, lc, rc - 1);\n\n        long result3 = Math.max(result1, result2);\n\n        result = Math.max(result, result3);\n\n        memoR[r][lc][rc] = result;\n        return result;\n    }\n\n\n    private long solveOne(int [][] board, int r, int lc, int rc) {\n         if (r >= board.length || lc > rc) \n            return min;\n        else if (memoOne[r][lc][rc] != null)\n            return memoOne[r][lc][rc];\n\n        long result = solveOne(board, r + 1, lc, rc);\n\n        result = Math.max(result, solveOne(board, r, lc + 1, rc));\n        result = Math.max(result, solveOne(board, r, lc, rc - 1));\n\n        result = Math.max(result, board[r][lc]);\n        result = Math.max(result, board[r][rc]);\n\n        memoOne[r][lc][rc] = result;\n        return result;\n    }\n}",
    "submit_ts": "1723907376",
    "subm_id": "1359104496"
}