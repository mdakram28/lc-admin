{
    "username": "apstndpavsetrimkaapstndp",
    "submission": "// class segment{\n//     public:\n//     vector<int>tree;\n//     int n;\n//     segment(vector<int>&arr){\n//         n= arr.size();\n//         tree.resize(4*n);\n//         build(arr, 0,0, n-1);\n//     }\n//     void build(vector<int>&arr, int node, int s, int e){\n//         if(s==e) tree[node]=s;\n//         else{\n//             int mid=s+(e-s)/2;\n//             build(arr, 2*node+1, s, mid);            \n//             build(arr, 2*node+2, mid+1, e);\n//             tree[node]= tree[2*node+1]&tree[2*node+2];\n\n//         }\n//     }\n//     int query(int l, int r){\n//         return query(0, 0, n-1, l, r);\n//     }\n//     int query(int n, int s, int e, int l, int r){\n//         if(r<s || e<l) return INT_MAX;\n//         if(l<=s && e<=r) return tree[n];\n//         int m= s+(e-s)/2;\n//         int p1=query(2*n+1, s, m, l, r);\n//         int p2=query(2*n+2, m+1, e, l, r);\n//         return p1&p2;\n//     }\n// };\nclass SegmentTree {\npublic:\n    vector<int> st;\n    int size;\n\n    SegmentTree(vector<int>& arr) {\n        size = arr.size();\n        st.resize(4 * size);\n        buildTree(arr, 0, 0, size - 1);\n    }\n\n    void buildTree(vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            st[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(arr, 2 * node + 1, start, mid);\n            buildTree(arr, 2 * node + 2, mid + 1, end);\n            st[node] = st[2 * node + 1] & st[2 * node + 2];\n        }\n    }\n\n    int rangeQuery(int left, int right) {\n        return rangeQuery(0, 0, size - 1, left, right);\n    }\n\n    int rangeQuery(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return INT_MAX;\n        }\n        if (left <= start && end <= right) {\n            return st[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = rangeQuery(2 * node + 1, start, mid, left, right);\n        int rightResult = rangeQuery(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int> arr, int k) {\n    int n = arr.size();\n    SegmentTree st(arr);\n    int minDiff = INT_MAX;\n\n    for (int i = 0; i < n; i++) {\n        int left = i - 1, right = n - 1, mid;\n\n        while (right - left > 1) {\n            mid = (left + right) / 2;\n            if (st.rangeQuery(i, mid) >= k) {\n                left = mid;\n            } else {\n                right = mid;\n            }\n        }\n\n        if (left != i - 1) {\n            minDiff = min(minDiff, abs(st.rangeQuery(i, left) - k));\n        }\n        minDiff = min(minDiff, abs(k - st.rangeQuery(i, right)));\n    }\n\n    return minDiff;\n}\n\n    // int minimumDifference(vector<int>& nums, int k) {\n    //     segment st(nums);\n    //     int ans=INT_MAX;\n    //     for(int i=0; i<nums.size(); i++){\n    //         int l=i-1;\n    //         int r=nums.size()-1, mid;\n    //         while(r-l>1){\n    //             mid= l+(r-l)/2;\n    //             if(st.query(i, mid)>=k) l=mid;\n    //             else r=mid;\n    //         }\n    //             if(l!=i-1) ans=min(ans, abs(st.query(i, l)-k));\n    //             ans= min(ans, abs(k-st.query(i,r)));\n    //     }\n    //     return ans;\n    // }\n};",
    "submit_ts": 1717300307.0
}