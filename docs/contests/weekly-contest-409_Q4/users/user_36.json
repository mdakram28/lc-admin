{
    "username": "shhk",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\ntemplate <typename T>\nstruct BIT {\n    vector<T> a;\n    BIT(int n) : a(n + 1) {}\n    void add(int i, int x) {\n        if (i == 0) {\n            return;\n        }\n        while (i < (int)a.size()) {\n            a[i] += x;\n            i += i & -i;\n        }\n    }\n    T get(int i) {\n        T res = 0;\n        while (i > 0) {\n            res += a[i];\n            i -= i & -i;\n        }\n        return res;\n    }\n};\n\nclass Solution {\n   public:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        set<int> pos;\n        int n = colors.size();\n        auto judge = [&](int i) {\n            return colors[i] == colors[(i + 1) % n];\n        };\n        for (int i = 0; i < n; ++i) {\n            if (judge(i)) {\n                pos.insert(i);\n            }\n        }\n        BIT<int> num(n + 1);\n        BIT<long long> sum(n + 1);\n        auto add = [&](int d, int x) {\n            num.add(d, x);\n            sum.add(d, x * d);\n        };\n        auto get_right = [&](auto it) {\n            auto nxt = next(it);\n            int d = 0;\n            if (nxt == pos.end()) {\n                d += n - 1 - *it;\n                d += *pos.begin() + 1;\n            } else {\n                d += *nxt - *it;\n            }\n            return d;\n        };\n        auto get_left = [&](auto it) {\n            int d = 0;\n            if (it == pos.begin()) {\n                d += *it + 1;\n                d += n - 1 - *pos.rbegin();\n            } else {\n                d += *it - *prev(it);\n            }\n            return d;\n        };\n        for (auto it = pos.begin(); it != pos.end(); ++it) {\n            add(get_right(it), 1);\n        }\n        auto get = [&](int p) {\n            auto it = pos.lower_bound(p);\n            if (it != pos.end()) {\n                return get_left(it);\n            }\n            --it;\n            return get_right(it);\n        };\n        auto del = [&](int p) {\n            if ((int)pos.size() == 1) {\n                add(n, -1);\n                pos.erase(p);\n            } else {\n                auto it = pos.lower_bound(p);\n                add(get_right(it), -1);\n                add(get_left(it), -1);\n                pos.erase(p);\n                add(get(p), 1);\n            }\n        };\n        auto insert = [&](int p) {\n            if (pos.empty()) {\n                add(n, 1);\n                pos.insert(p);\n            } else {\n                add(get(p), -1);\n                pos.insert(p);\n                auto it = pos.lower_bound(p);\n                add(get_right(it), 1);\n                add(get_left(it), 1);\n            }\n        };\n        vector<int> res;\n        for (auto& q : queries) {\n            int op = q[0];\n            if (op == 1) {\n                int sz = q[1];\n                if (pos.empty()) {\n                    res.push_back(n);\n                    continue;\n                }\n                long long t = sum.get(n) - sum.get(sz - 1);\n                t -= (long long)(num.get(n) - num.get(sz - 1)) * (sz - 1);\n                res.push_back(t);\n            } else {\n                int i = q[1], c = q[2];\n                if (c == colors[i]) {\n                    continue;\n                }\n                for (int j = i - 1; j <= i; ++j) {\n                    int k = (j + n) % n;\n                    if (judge(k)) {\n                        del(k);\n                    }\n                }\n                colors[i] = c;\n                for (int j = i - 1; j <= i; ++j) {\n                    int k = (j + n) % n;\n                    if (judge(k)) {\n                        insert(k);\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722743495",
    "subm_id": "552351133"
}