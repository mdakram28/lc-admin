{
    "username": "mr_kamran",
    "submission": "class PeakSegmentTree {\nprivate:\n    vector<int> segmentTree;\n    int arraySize;\n    \n    int calculateMid(int start, int end) {\n        return start + (end - start) / 2;\n    }\n    \n    int buildSegmentTree(const vector<int>& arr, int start, int end, int index) {\n        if (start == end) {\n            segmentTree[index] = isPeak(start, arr) ? 1 : 0;\n            return segmentTree[index];\n        }\n        int mid = calculateMid(start, end);\n        segmentTree[index] = buildSegmentTree(arr, start, mid, index * 2 + 1) +\n                             buildSegmentTree(arr, mid + 1, end, index * 2 + 2);\n        return segmentTree[index];\n    }\n    \n    int querySum(int start, int end, int queryStart, int queryEnd, int index) {\n        if (queryStart <= start && queryEnd >= end) return segmentTree[index];\n        if (end < queryStart || start > queryEnd) return 0;\n        int mid = calculateMid(start, end);\n        return querySum(start, mid, queryStart, queryEnd, 2 * index + 1) +\n               querySum(mid + 1, end, queryStart, queryEnd, 2 * index + 2);\n    }\n    \n    void modifyValue(int start, int end, int pos, int newVal, int index, vector<int>& arr) {\n        if (pos < start || pos > end) return;\n        if (start == end) {\n            segmentTree[index] = isPeak(pos, arr) ? 1 : 0;\n            return;\n        }\n        int mid = calculateMid(start, end);\n        modifyValue(start, mid, pos, newVal, 2 * index + 1, arr);\n        modifyValue(mid + 1, end, pos, newVal, 2 * index + 2, arr);\n        segmentTree[index] = segmentTree[2 * index + 1] + segmentTree[2 * index + 2];\n    }\n    \npublic:\n    PeakSegmentTree(const vector<int>& arr, int size) {\n        this->arraySize = size;\n        int height = (int) (ceil(log2(size)));\n        int maxSize = 2 * (int) pow(2, height) - 1;\n        segmentTree.resize(maxSize);\n        buildSegmentTree(arr, 0, size - 1, 0);\n    }\n    \n    void updateValue(vector<int>& arr, int pos, int newVal) {\n        if (pos < 0 || pos >= arraySize) return;\n        arr[pos] = newVal;\n        modifyValue(0, arraySize - 1, pos, newVal, 0, arr);\n        if (pos > 0) modifyValue(0, arraySize - 1, pos - 1, arr[pos - 1], 0, arr);\n        if (pos < arraySize - 1) modifyValue(0, arraySize - 1, pos + 1, arr[pos + 1], 0, arr);\n    }\n    \n    int getSum(int queryStart, int queryEnd) {\n        if (queryStart < 0 || queryEnd >= arraySize || queryStart > queryEnd) return 0;\n        return querySum(0, arraySize - 1, queryStart, queryEnd, 0);\n    }\n    \n    bool isPeak(int index, const vector<int>& arr) {\n        if (index <= 0 || index >= arr.size() - 1) return false;\n        return arr[index] > arr[index - 1] && arr[index] > arr[index + 1];\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        PeakSegmentTree tree(nums, n);\n        vector<int> results;\n        \n        for (auto& query : queries) {\n            if (query[0] == 2) {\n                tree.updateValue(nums, query[1], query[2]);\n            } else if (query[0] == 1) {\n                results.push_back(tree.getSum(query[1] + 1, query[2] - 1));\n            }\n        }\n        \n        return results;\n    }\n};",
    "submit_ts": 1718509033.0
}