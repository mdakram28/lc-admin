{
    "username": "wenboz",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        var res = new ArrayList<Integer>();\n        int n = nums.length;\n        var seg = new SegmentTreeSum(n);\n        for(int i = 1; i < n - 1; i++){\n            if(nums[i] > nums[i -1] && nums[i] > nums[i + 1])\n                seg.update(i, 1);\n        }\n        for(int[] q : queries){\n            if(q[0] == 1){\n                res.add((int)seg.query(q[1] + 1, q[2] - 1));\n            }\n            else{\n                nums[q[1]] = q[2];\n                check(q[1], nums, seg);\n                if(q[1] > 0){\n                    check(q[1] - 1, nums, seg);\n                }\n                if(q[1] < n - 1){\n                    check(q[1] + 1, nums, seg);\n                }\n            }\n        }\n        return res;\n    }\n    \n    void check(int i, int[] nums, SegmentTreeSum seg){\n        int n = nums.length;\n        if(i > 0 && nums[i] > nums[i - 1] && i < n -1 && nums[i] > nums[i + 1]){\n            seg.update(i, 1);\n        }\n        else{\n            seg.update(i, 0);\n        }\n    }\n    \n    public class SegmentTreeSum {\n\n    int N;\n    long[] seg;\n\n    public SegmentTreeSum(int n){\n        N = Math.max(1, Integer.highestOneBit(n - 1) << 1);\n        seg = new long[2*N];\n    }\n\n    public SegmentTreeSum(int[] nums){\n        N = Math.max(1, Integer.highestOneBit(nums.length - 1) << 1);\n        seg = new long[2*N];\n        for(int i = 0; i < nums.length; i++){\n            seg[i + N] = nums[i];\n        }\n        for(int i = N - 1; i > 0; i--){\n            seg[i] = seg[2*i] + seg[2*i + 1];\n        }\n    }\n\n    long query(int ql, int qh){\n        if(ql > qh)\n            return 0;\n        return query(0, N - 1, 1, ql, qh);\n    }\n    long query(int l, int h, int i, int ql, int qh){\n        if(h < ql || l > qh)\n            return 0;\n        if(l >= ql && h <= qh){\n            return seg[i];\n        }\n        int m = l + (h - l)/2;\n        return query(l, m, 2*i, ql, qh) + query(m + 1, h, 2*i + 1, ql, qh);\n    }\n\n    void update(int i, long v){\n        i += N;\n        seg[i] = v;\n        while(i > 1){\n            i /= 2;\n            seg[i] = seg[2*i] + seg[2*i + 1];\n        }\n    }\n\n}\n}",
    "submit_ts": "1718507192",
    "subm_id": "1289644048"
}