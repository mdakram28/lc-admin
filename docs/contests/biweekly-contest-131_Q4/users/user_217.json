{
    "username": "plevande",
    "submission": "class LazySegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the lazy segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n        self._lazy = [0] * (2 * _size)\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __len__(self):\n        return self._len\n\n    def _push(self, idx):\n        \"\"\"push query on idx to its children\"\"\"\n        # Let the children know of the queries\n        q, self._lazy[idx] = self._lazy[idx], 0\n\n        self._lazy[2 * idx] += q\n        self._lazy[2 * idx + 1] += q\n        self.data[2 * idx] += q\n        self.data[2 * idx + 1] += q\n\n    def _update(self, idx):\n        \"\"\"updates the node idx to know of all queries applied to it via its ancestors\"\"\"\n        for i in reversed(range(1, idx.bit_length())):\n            self._push(idx >> i)\n\n    def _build(self, idx):\n        \"\"\"make the changes to idx be known to its ancestors\"\"\"\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1]) + self._lazy[idx]\n            idx >>= 1\n\n    def add(self, start, stop, value):\n        \"\"\"lazily add value to [start, stop)\"\"\"\n        start = start_copy = start + self._size\n        stop = stop_copy = stop + self._size\n        while start < stop:\n            if start & 1:\n                self._lazy[start] += value\n                self.data[start] += value\n                start += 1\n            if stop & 1:\n                stop -= 1\n                self._lazy[stop] += value\n                self.data[stop] += value\n            start >>= 1\n            stop >>= 1\n\n        # Tell all nodes above of the updated area of the updates\n        self._build(start_copy)\n        self._build(stop_copy - 1)\n\n    def query(self, start, stop, default=0):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        # Apply all the lazily stored queries\n        self._update(start)\n        self._update(stop - 1)\n\n        res = default\n        while start < stop:\n            if start & 1:\n                res = self._func(res, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res = self._func(res, self.data[stop])\n            start >>= 1\n            stop >>= 1\n        return res\n\n    def __repr__(self):\n        return \"LazySegmentTree({0})\".format(self.data)\n\nclass SegmentTree:\n    def __init__(self, data, default=0, func=max):\n        \"\"\"initialize the segment tree with data\"\"\"\n        self._default = default\n        self._func = func\n        self._len = len(data)\n        self._size = _size = 1 << (self._len - 1).bit_length()\n\n        self.data = [default] * (2 * _size)\n        self.data[_size:_size + self._len] = data\n        for i in reversed(range(_size)):\n            self.data[i] = func(self.data[i + i], self.data[i + i + 1])\n\n    def __delitem__(self, idx):\n        self[idx] = self._default\n\n    def __getitem__(self, idx):\n        return self.data[idx + self._size]\n\n    def __setitem__(self, idx, value):\n        idx += self._size\n        self.data[idx] = value\n        idx >>= 1\n        while idx:\n            self.data[idx] = self._func(self.data[2 * idx], self.data[2 * idx + 1])\n            idx >>= 1\n\n    def __len__(self):\n        return self._len\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        start += self._size\n        stop += self._size\n\n        res_left = res_right = self._default\n        while start < stop:\n            if start & 1:\n                res_left = self._func(res_left, self.data[start])\n                start += 1\n            if stop & 1:\n                stop -= 1\n                res_right = self._func(self.data[stop], res_right)\n            start >>= 1\n            stop >>= 1\n\n        return self._func(res_left, res_right)\n\n    def __repr__(self):\n        return \"SegmentTree({0})\".format(self.data)\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        n = min(15*10**4+5, 3*len(queries))\n        L = LazySegmentTree(data=[i for i in range(n+5)])\n        S = SegmentTree(data=[-1*float('inf') for i in range(n+5)], default=-1*float('inf'))\n        answer = []\n        for query in queries:\n            if query[0]==1:\n                x = query[1]\n                r = L.query(x+1, x+2)\n                s = S.query(x+1, n+5)\n                if s==-1*float('inf'):\n                    r1 =n+5\n                else:\n                    r1 = -1*s+1\n                L.add(x+1, r1, -1*(r-1))\n                S[x] = -1*x\n            else:\n              #  print([L.query(i, i+1) for i in range(9)])\n                x = query[1]\n                sz = query[2]\n                c = L.query(0, x+1)\n                answer.append(c >=sz)\n        return answer\n\n\n\n        ",
    "submit_ts": 1716649673.0
}