{
    "username": "VimT",
    "submission": "use std::collections::HashMap;\nimpl Solution {\n    pub fn min_changes(nums: Vec<i32>, k: i32) -> i32 {\n        let mut cnt: HashMap<u32, i32> = HashMap::new();\n        let len = nums.len();\n        for i in 0..len / 2 {\n            *cnt.entry(nums[i].abs_diff(nums[len - 1 - i])).or_default() += 1;\n        }\n        let mut cnt = cnt.into_iter().collect::<Vec<_>>();\n        cnt.sort_by_key(|x| -x.1);\n    \n        let mut result = len as i32;\n        // \u5dee\u503c\u4e3a x \u7684\u65f6\u5019\uff0c\u6709\u591a\u5c11\u4e2a\u662f\u53ef\u4ee5\u4e0d\u7528\u6539\u52a8\u7684\n        for (x, ok) in cnt {\n            if (len as i32 / 2 - ok) > result {\n                break;\n            }\n            let mut need = 0;\n            for i in 0..len / 2 {\n                if nums[i].abs_diff(nums[len - 1 - i]) != x {\n                    let x = x as i32;\n                    if (nums[i] - x < 0 && nums[i] + x > k) && (nums[len - i - 1] - x < 0 && nums[len - i - 1] + x > k) {\n                        need += 2;\n                    } else {\n                        need += 1;\n                    }\n                }\n            }\n            result = result.min(need);\n        }\n        result\n    }\n}",
    "submit_ts": "1721487793",
    "subm_id": "548311559"
}