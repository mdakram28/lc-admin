{
    "username": "Andycipation",
    "submission": "template <typename T, class F = function<T(const T&, const T&)>>\nclass SparseTable {\n public:\n  const int n;\n  vector<vector<T>> mat;\n  const F f;\n\n  SparseTable(const vector<T>& a, const F& f_) : n(a.size()), f(f_) {\n    assert(n > 0);\n    const int max_log = __lg(n) + 1;\n    mat.resize(max_log);\n    mat[0] = a;\n    for (int lg = 1; lg < max_log; lg++) {\n      mat[lg].resize(n - (1 << lg) + 1);\n      for (int i = 0; i <= n - (1 << lg); i++) {\n        mat[lg][i] = f(mat[lg - 1][i], mat[lg - 1][i + (1 << (lg - 1))]);\n      }\n    }\n  }\n\n  T get(int ll, int rr) const {\n    assert(0 <= ll && ll <= rr && rr < n);\n    const int lg = __lg(rr - ll + 1);\n    return f(mat[lg][ll], mat[lg][rr - (1 << lg) + 1]);\n  }\n};\n\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& a, int k) {\n        SparseTable st(a, [](int x, int y) { return x & y; });\n        int ret = 2e9;\n        int n = a.size();\n        for (int L = 0; L < n; L++) {\n            int low = L, high = n;\n            while (low < high) {\n                int mid = (low + high) / 2;\n                if (st.get(L, mid) >= k) {\n                    low = mid + 1;\n                } else {\n                    high = mid;\n                }\n            }\n            if (low < n) {\n                ret = min(ret, k - st.get(L, low));\n            }\n            if (low - 1 >= L) {\n                ret = min(ret, st.get(L, low - 1) - k);\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1717297395.0
}