{
    "username": "yujit_2003",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int, vector<int>> hCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int, vector<int>> vCuts(verticalCut.begin(), verticalCut.end());\n        \n        long long hSegments = 1;\n        long long vSegments = 1;\n        long long totalCost = 0;\n        \n        while (!hCuts.empty() || !vCuts.empty()) {\n            if (vCuts.empty() || (!hCuts.empty() && hCuts.top() >= vCuts.top())) {\n                totalCost += hCuts.top() * vSegments;\n                hCuts.pop();\n                hSegments++;\n            } else {\n                totalCost += vCuts.top() * hSegments;\n                vCuts.pop();\n                vSegments++;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720925823",
    "subm_id": "1320267340"
}