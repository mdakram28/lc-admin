{
    "username": "sahaj96",
    "submission": "class Solution {\n    public:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n\n        vector<vector<int>> g1(n1);\n        vector<vector<int>> g2(n2);\n\n        for (const auto& e : edges1) {\n            g1[e[0]].push_back(e[1]);\n            g1[e[1]].push_back(e[0]);\n        }\n        for (const auto& e : edges2) {\n            g2[e[0]].push_back(e[1]);\n            g2[e[1]].push_back(e[0]);\n        }\n\n        auto dfs = [](const vector<vector<int>>& g, int s, int& f) {\n            int n = g.size();\n            vector<int> d(n, -1);\n            function<void(int, int)> visit = [&](int u, int dist) {\n                d[u] = dist;\n                if (dist > d[f]) {\n                    f = u;\n                }\n                for (int v : g[u]) {\n                    if (d[v] == -1) {\n                        visit(v, dist + 1);\n                    }\n                }\n            };\n            f = s;\n            visit(s, 0);\n            return d[f];\n        };\n\n        int u1 = 0;\n        dfs(g1, 0, u1);\n        int d1 = dfs(g1, u1, u1);\n\n        int u2 = 0;\n        dfs(g2, 0, u2);\n        int d2 = dfs(g2, u2, u2);\n\n        int minD = max(d1, d2);\n        int h1 = (d1 + 1) / 2;\n        int h2 = (d2 + 1) / 2;\n        minD = max(minD, h1 + h2 + 1);\n\n        return minD;\n    }\n\n};",
    "submit_ts": 1719719974.0
}