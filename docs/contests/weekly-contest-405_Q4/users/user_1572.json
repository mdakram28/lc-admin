{
    "username": "shubham6762",
    "submission": "class Node\n{\npublic:\n    vector<Node *> child;\n    vector<pair<int, int>> ends;\n\n    Node() : child(26, nullptr) {}\n};\n\nclass Trie\n{\npublic:\n    Node *root;\n\n    Trie()\n    {\n        root = new Node();\n    }\n\n    void insert(int i, string &word, int c)\n    {\n        Node *node = root;\n        for (char ch : word)\n        {\n            if (!node->child[ch - 'a'])\n                node->child[ch - 'a'] = new Node();\n            node = node->child[ch - 'a'];\n        }\n        node->ends.emplace_back(i, c);\n    }\n};\n\nclass Solution\n{\nprivate:\n    void insertHandler(Trie &trie, vector<string> &words, vector<int> &costs)\n    {\n        for (int i = 0; i < words.size(); ++i)\n            trie.insert(i, words[i], costs[i]);\n    }\n\n    int solve(string &t, Trie &trie, vector<string> &words, vector<int> &dp)\n    {\n        int n = t.size();\n        for (int i = 0; i < n; ++i)\n        {\n            if (dp[i] == INT_MAX)\n                continue;\n\n            Node *node = trie.root;\n            for (int j = i; j < n; ++j)\n            {\n                if (!node->child[t[j] - 'a'])\n                    break;\n\n                node = node->child[t[j] - 'a'];\n                for (auto &[index, cost] : node->ends)\n                {\n                    int wordLength = words[index].size();\n                    if (i + wordLength <= n)\n                        dp[i + wordLength] = min(dp[i + wordLength], dp[i] + cost);\n                }\n            }\n        }\n        return dp[n];\n    }\n\npublic:\n    int minimumCost(string t, vector<string> &words, vector<int> &costs)\n    {\n        int n = t.size();\n        Trie trie;\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        insertHandler(trie, words, costs);\n\n        int result = solve(t, trie, words, dp);\n        return result == INT_MAX ? -1 : result;\n    }\n};",
    "submit_ts": "1720323293",
    "subm_id": "1312372068"
}