{
    "username": "h8QEyCwGrD",
    "submission": "#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    long long countSubarraysWithK(const std::vector<int>& nums, int k) {\n        int n = nums.size();\n        long long totalCount = 0;\n        std::unordered_map<long long, long long> previousResults;\n        \n        for (int i = 0; i < n; ++i) {\n            std::unordered_map<long long, long long> currentResults;\n            \n            if (nums[i] == k) {\n                ++totalCount;\n            }\n            \n            currentResults[nums[i]] = 1;\n            \n            for (const auto& [value, frequency] : previousResults) {\n                long long newAndResult = value & nums[i];\n                if (newAndResult == k) {\n                    totalCount += frequency;\n                }\n                currentResults[newAndResult] += frequency;\n            }\n            \n            previousResults = std::move(currentResults);\n        }\n        \n        return totalCount;\n    }\n\n    long long countSubarrays(std::vector<int>& nums, int k) {\n        return countSubarraysWithK(nums, k);\n    }\n};\n",
    "submit_ts": "1720278658",
    "subm_id": "1311718706"
}