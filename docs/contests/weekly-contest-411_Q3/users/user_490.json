{
    "username": "\u4e91\u513f\u4e71\u98d8",
    "submission": "class Solution {\npublic:\n    static const int N = 1e5 + 10;\n    int f[N][10], b[N], n, k, sz;\n    int qpow(int a, int b, const int p) {\n        a %= p;\n        int ans = 1 % p;\n        while (b) {\n            if (b & 1) ans = ans * a % p;\n            b >>= 1;\n            a = a * a % p;\n        }\n        return ans;\n    }\n\n    string largestPalindrome(int n, int k) {\n        this->n = n, this->k = k;\n        for (int i = 0; i < n / 2; i++) {\n            b[i] = qpow(10, i, k) + qpow(10, n - i - 1, k);\n            b[i] %= k;\n        }\n        if (n & 1) b[n / 2] = qpow(10, n / 2, k);\n\n\n        memset(f, -1, sizeof f);\n        sz = (n % 2 ? n / 2 : n / 2 - 1);\n        for (int i = 0; i < 10; i++) {\n            f[sz][i * b[sz] % k] = i;\n        }\n        \n        for (int i = sz - 1; i >= 0; i--) {\n            for (int j = 0; j < 10; j++) {\n                for (int l = 0; l < k; l++) {\n                    \n                    if (f[i + 1][l] != -1) {\n                        f[i][(j * b[i] + l) % k] = j;\n                    }\n                }\n            }\n        }\n\n        string ans = \"\";\n        int t = 0, m = 0;\n        while (1) {\n            ans += f[t][m] + '0';\n            if (t == sz) break;\n            m = (m - f[t][m] * b[t] % k) % k;\n            t++;\n            m += k;\n            m %= k;\n        }\n        int pos = ans.size() - 1;\n        if (n & 1) pos--;\n        while (pos >= 0) {\n            ans += ans[pos];\n            pos--;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723953008",
    "subm_id": "556414935"
}