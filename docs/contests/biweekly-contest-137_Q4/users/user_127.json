{
    "username": "Lyuben Georgiev",
    "submission": "func maximumValueSum(board [][]int) int64 {\n    cis := make([]int, len(board[0]))\n    for i := range cis {\n        cis[i] = i\n    }\n    ris := make([]int, len(board))\n    for i := range ris {\n        ris[i] = i\n    }\n\n    type Pair struct {\n        Row, Col int\n    }\n    els := []Pair{}\n    for i, row := range board {\n        slices.SortFunc(cis, func(a, b int) int {\n            return cmp.Compare(row[b], row[a])\n        })\n        els = append(els, Pair{i, cis[0]}, Pair{i, cis[1]}, Pair{i, cis[2]})\n    }\n    for coli := range board[0] {\n        slices.SortFunc(ris, func(a, b int) int {\n            return cmp.Compare(board[b][coli], board[a][coli])\n        })\n        els = append(els, Pair{ris[0], coli}, Pair{ris[1], coli}, Pair{ris[2], coli})\n    }\n\n    slices.SortFunc(els, func(a, b Pair) int {\n        if c := cmp.Compare(board[b.Row][b.Col], board[a.Row][a.Col]); c != 0 {\n            return c\n        }\n\n        if c := cmp.Compare(b.Row, a.Row); c != 0 {\n            return c\n        }\n\n        return cmp.Compare(b.Col, a.Col)\n    })\n    \n    // els = slices.CompactFunc(els, func(a, b Pair) bool {\n    //     return a == b\n    // })\n\n    ru := make([]bool, len(board))\n    cu := make([]bool, len(board[0]))\n\n    var result int64 = -10000000000\n    for i := range len(els)-2 {\n        first := els[i]\n\n        ru[first.Row] = true\n        cu[first.Col] = true\n\n        for j := i+1; j < len(els)-1; j++ {\n            second := els[j]\n\n            if ru[second.Row] || cu[second.Col] {\n                continue\n            }\n\n            ru[second.Row] = true\n            cu[second.Col] = true\n\n            for k := j+1; k < len(els); k++ {\n                third := els[k]\n\n                if ru[third.Row] || cu[third.Col] {\n                    continue\n                }\n\n                var curRes int64 = int64(board[first.Row][first.Col]) + int64(board[second.Row][second.Col]) + int64(board[third.Row][third.Col])\n                if curRes < result {\n                    break\n                }\n                result = curRes\n            }\n\n            ru[second.Row] = false\n            cu[second.Col] = false\n        }\n\n        ru[first.Row] = false\n        cu[first.Col] = false\n    }\n    // fmt.Println(els)\n\n    return result\n}",
    "submit_ts": "1723908377",
    "subm_id": "1359150005"
}