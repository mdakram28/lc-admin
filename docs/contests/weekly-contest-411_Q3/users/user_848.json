{
    "username": "ceetcode",
    "submission": "class Solution:\n    # https://flexbooks.ck12.org/cbook/ck-12-cbse-maths-class-6/section/3.5/primary/lesson/divisibility-rules/\n    # 1 is easy. 999999\n    # 2 is easy. 89999999998\n    # 3 is easy: 9999999\n    # 4 is easy: last 2 digits must be div by 4\n    # 889999999999988\n    # 5 is easy: 599999995\n    # 6: 8...8 -> (sum of digits must be div by 3) [need a core of 3 8's]\n    # 888, 8778, 89898, 897798, 8998998\n    # 7: tuff. If you double the last digit and subtract it from the rest of the number and the answer is: 0, or divisible by 7 then the number itself is divisible by 7.\n    # 7: manually tried to find pattern. see pattern in leetcode playground\n    # 8: last 3 digits div by 8: 888999999999999888\n    # 9: 99999999999\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 1 or k == 3 or k == 9:\n            return '9' * n\n        if k == 2:\n            if n == 1: return '8'\n            if n == 2: return '88'\n            return '8' + '9' * (n-2) + '8'\n        if k == 4:\n            if n <= 4: return '8' * n\n            return '88' + '9' * (n-4) + '88'\n        if k == 5:\n            if n == 1: return '5'\n            if n == 2: return '55'\n            return '5' + '9' * (n-2) + '5'\n        if k == 6:\n            if n == 1: return '6'\n            if n == 2: return '66'\n            #    # 888, 8778, 89898, 897798, 8998998\n            if n == 3: return '888'\n            if n == 4: return '8778'\n\n            if n % 2 == 1:\n                return '8' + '9' * (n//2 - 1) + '8' + '9' * (n//2 - 1) + '8'\n            else:\n                return '8' + '9' * (n//2 - 2) + '77' + '9' * (n//2 - 2) + '8'\n        if k == 8:\n                # 8: last 3 digits div by 8: 888999999999999888\n            if n <= 6: return '8' * n\n            return '888' + '9' * (n-6) + '888'\n        \n        #if k == 7:\n        if n == 1: return '7'\n        if n == 2: return '77'\n        #if n == 4: return '9779'\n        #if n == 6: return '999999'\n\n# Multiply each digit (from right to left) by the digit in the corresponding position in this pattern (from left to right): 1, 3, 2, \u22121, \u22123, \u22122 (repeating for digits beyond the hundred-thousands place). Adding the results gives a multiple of 7.\t483,595: (4 \u00d7 (\u22122)) + (8 \u00d7 (\u22123)) + (3 \u00d7 (\u22121)) + (5 \u00d7 2) + (9 \u00d7 3) + (5 \u00d7 1) = 7.\n\n#1, 3, 2, \u22121, \u22123, \u22122 \n        if n % 2 == 1:\n            prefix = '9' * (n // 2)\n            L = n//2\n            A = [1, 3, 2, -1, -3, -2]\n            PA = list(accumulate(A))\n            #extra_suffix = PA[idx]\n            #sum_ = PA[idx]\n            for x in range(9, -1, -1):\n                idx = (L % 6) - 1\n                sum_ = 9 * PA[idx]\n                idx = (idx + 1) % 6\n                sum_ += x * A[idx]\n\n                rem_moves = L % 6 \n                for i in range(1, rem_moves+1):\n                    sum_ += 9 * A[(idx + i) % 6]\n                \n                if sum_ % 7 == 0:\n                    return prefix + str(x) + prefix\n                \n        else:\n            prefix = '9' * (n // 2 - 1)\n            L = n//2 - 1\n            A = [1, 3, 2, -1, -3, -2]\n            PA = list(accumulate(A))\n            #extra_suffix = PA[idx]\n            #sum_ = PA[idx]\n            for x in [99, 88, 77, 66, 55, 44, 33, 22, 11, 00]:\n                idx = (L % 6) - 1\n                sum_ = 9 * PA[idx]\n\n                idx = (idx + 1) % 6\n                x = str(x)\n                sum_ += int(x[0]) * A[idx]\n                idx = (idx + 1) % 6\n                sum_ += int(x[1]) * A[idx]\n\n                rem_moves = L % 6 \n                for i in range(1, rem_moves+1):\n                    sum_ += 9 * A[(idx + i) % 6]\n                \n                if sum_ % 7 == 0:\n                    return prefix + x + prefix\n\n\n\n\n                \n\n",
    "submit_ts": "1723953437",
    "subm_id": "1359821210"
}