{
    "username": "ankita_jais",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n                // Initialize the total cost to 0\n        long long totalCost = 0;\n\n        // Sort the cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int horizontalPieces = 1, verticalPieces = 1;\n        int i = 0, j = 0;\n\n        // Iterate until all cuts are made\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += static_cast<long long>(horizontalCut[i]) * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[j]) * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts if any\n        while (i < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[i]) * verticalPieces;\n            i++;\n        }\n\n        // Add remaining vertical cuts if any\n        while (j < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[j]) * horizontalPieces;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926023",
    "subm_id": "1320273612"
}