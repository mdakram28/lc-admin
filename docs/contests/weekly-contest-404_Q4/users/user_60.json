{
    "username": "ianwong1999",
    "submission": "class Solution {\npublic:\n    \n    bool used[100055];\n    pair<int, int> dia(int v, int par, vector<vector<int>> &g, vector<int> &dp) {\n        int res = 0;\n        int high = 0;\n        int second = 0;\n        \n        for (auto u : g[v]) {\n            if (u == par) continue;\n            auto [len, ans] = dia(u, v, g, dp);\n            len++;\n            \n            if (len > high) {\n                second = high;\n                high = len;\n            } else if (len > second) {\n                second = len;\n            }\n            \n            res = max(res, ans);\n        }\n        \n        res = max(res, high + second);\n        \n        dp[v] = high;\n        \n        return {high, res};\n    }\n    void rdfs(int v, int par, int ans, vector<vector<int>> &g, vector<int> &dp) {\n        dp[v] = max(dp[v], ans);\n        \n        int high = ans;\n        int second = 0;\n        \n        for (auto u : g[v]) {\n            if (u == par) continue;\n        \n            if (dp[u] + 1 > high) {\n                second = high;\n                high = dp[u] + 1;\n            } else if (dp[u] + 1 > second) {\n                second = dp[u] + 1;\n            }\n        }\n        \n        for (auto u : g[v]) {\n            if (u == par) continue;\n            \n            if (dp[u] + 1 == high) {\n                rdfs(u, v, second + 1, g, dp);\n            } else {\n                rdfs(u, v, high + 1, g, dp);\n            }\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> g(n, vector<int>());   \n        vector<vector<int>> vg(m, vector<int>());\n        vector<int> dp1(n);\n        vector<int> dp2(m);\n        \n        for (const auto& vec : edges1) {\n            int x = vec[0];\n            int y = vec[1];\n            \n            g[x].push_back(y);\n            g[y].push_back(x);\n        }\n        \n        for (const auto& vec : edges2) {\n            int x = vec[0];\n            int y = vec[1];\n            \n            vg[x].push_back(y);\n            vg[y].push_back(x);\n        }\n        \n        int res = dia(0, -1, g, dp1).second;\n        res = max(res, dia(0, -1, vg, dp2).second);\n        \n        rdfs(0, -1, 0, g, dp1);\n        rdfs(0, -1, 0, vg, dp2);\n        res = max(res, *min_element(dp1.begin(), dp1.end()) + *min_element(dp2.begin(), dp2.end()) + 1);\n        \n        return res;\n    }\n};",
    "submit_ts": 1719716592.0
}