{
    "username": "iit2021161",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    ll power(ll a,ll b){\n        ll res=1;\n        while(b--){\n            if((b&1)){\n                res*=a;b--;\n            } else {\n                a*=a;b/=2;\n            }\n        }\n        \n        return res;\n    }\n    map<vector<int>,int> mp;\n    int f(int pos,int flag,int jump,int k){\n        if(pos>k+1) return 0;\n        \n        // if(pos==k){\n        //     cout<<pos<<\" \"<<flag<<\" \"<<jump<<endl;\n        // }\n        if(mp.find({pos,flag,jump})!=mp.end()) return mp[{pos,flag,jump}];\n        \n        int ans=(pos==k ? 1:0) + f(pos+pow(2,jump),0,jump+1,k);\n        if(!flag){\n            if(pos-1>=0) ans += f(pos-1,1,jump,k);\n        } \n        \n        return mp[{pos,flag,jump}]=ans;\n    }\n    int waysToReachStair(int k){\n        return f(1,0,0,k);\n    }\n};",
    "submit_ts": 1716089688.0
}