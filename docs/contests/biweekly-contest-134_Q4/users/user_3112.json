{
    "username": "iamarman",
    "submission": "class Solution {\npublic:\n\ntemplate <typename T>\nclass SparseTable\n{\n    public:\n    vector<vector<T> > st;\n\n    T op(T a,T b)\n    {\n        return (a&b);\n    }\n\n    SparseTable(int n,vector<T> &vec)\n    {\n        st.resize(n+2,vector<int> (__lg(n)+2));\n\n        for(int i=1;i<=n;i++)  \n        {\n            st[i][0]=vec[i];\n        }\n\n        int k=__lg(n)+1;\n\n        for(int j=1;j<=k;j++)\n        {\n            for(int i=1;i+(1<<j)<=n+1;i++) \n            {\n                st[i][j]=op(st[i][j-1],st[i+(1<<(j-1))][j-1]); \n            }\n        }\n\n    }\n\n    T query(int l,int r)\n    {\n        int j=__lg(r-l+1);\n        return op(st[l][j],st[r-(1<<j)+1][j]);\n    }\n\n    T query1(int l,int r) // query in logn for non idempotent function\n    {\n        int ans=0;\n        for(int j=__lg(r-l+1);j>=0;j--) \n        {\n            if((1<<j)<=(r-l+1))\n            {\n                ans=op(ans,st[l][j]);\n                l+=(1<<j);\n            }\n        }\n        return ans;\n    }\n\n    \n};\n\n    long long countSubarrays(vector<int>& nums, int k) {\n\n        int n=nums.size();\n        vector<int> vec(n+1);\n        for(int i=1;i<=n;i++)\n        {\n            vec[i]=nums[i-1];\n        }\n        SparseTable st(n,vec);\n        long long cnt=0;\n\n         for(int i=1;i<=n;i++)\n        {\n            if(vec[i]<k) continue;\n            int low=i-1,high=n+1;\n            while(high-low>1)\n            {\n                int mid=low+(high-low)/2;\n                if(st.query(i,mid)>=k) low=mid;\n                else high=mid;\n            }\n            if(st.query(i,low)!=k) continue;\n            int low2=i-1,high2=low+1;\n            while(high2-low2>1)\n            {\n                int mid=low2+(high2-low2)/2;\n                if(st.query(i,mid)==k) high2=mid;\n                else low2=mid;\n            }\n            int low1=high2,high1=n+1;\n            while(high1-low1>1)\n            {\n                int mid=low1+(high1-low1)/2;\n                if(st.query(i,mid)==k) low1=mid;\n                else high1=mid;\n            }\n            cnt+=(low1-high2+1);\n\n        }\n\n        return cnt;\n        \n    }\n};",
    "submit_ts": "1720280602",
    "subm_id": "1311795470"
}