{
    "username": "lozy219",
    "submission": "class Solution {\npublic:\n    int getsum(int sum[35][35], int r1, int r2, int c1, int c2) {\n        return sum[r2+1][c2+1]-sum[r1][c2+1]-sum[r2+1][c1]+sum[r1][c1];\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        int sum[35][35];\n        memset(sum, 0, sizeof(sum));\n        int n=grid.size(), m=grid[0].size();\n        for (int i=0; i<n; ++i) {\n            for (int j=0; j<m; ++j) {\n                sum[i+1][j+1]=sum[i+1][j]+sum[i][j+1]-sum[i][j];\n                if (grid[i][j]==1) {\n                    sum[i+1][j+1]++;\n                }\n            }\n        }\n        int minr[30][30][30][30];\n        int maxr[30][30][30][30];\n        int minc[30][30][30][30];\n        int maxc[30][30][30][30];\n        memset(maxr, -1, sizeof(maxr));\n        memset(maxc, -1, sizeof(maxc));\n        memset(minr, 35, sizeof(minr));\n        memset(minc, 35, sizeof(minc));\n        for (int r1=0; r1<n; ++r1) {\n            for (int r2=r1; r2<n; ++r2) {\n                for (int c1=0; c1<m; ++c1) {\n                    for (int c2=c1; c2<m; ++c2) {\n                        for (int rr=r1; rr<=r2; ++rr) {\n                            if (getsum(sum, r1, rr, c1, c2)>0) {\n                                minr[r1][r2][c1][c2]=rr;\n                                break;\n                            }\n                        }\n                        for (int rr=r2; rr>=r1; --rr) {\n                            if (getsum(sum, rr, r2, c1, c2)>0) {\n                                maxr[r1][r2][c1][c2]=rr;\n                                break;\n                            }\n                        }\n                        for (int cc=c1; cc<=c2; ++cc) {\n                            if (getsum(sum, r1, r2, c1, cc)>0) {\n                                minc[r1][r2][c1][c2]=cc;\n                                break;\n                            }\n                        }\n                        for (int cc=c2; cc>=c1; --cc) {\n                            if (getsum(sum, r1, r2, cc, c2)>0) {\n                                maxc[r1][r2][c1][c2]=cc;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        int dp[30][30][30][30][3];\n        memset(dp, 0x3f3f3f3f, sizeof(dp));\n        for (int r1=0; r1<n; ++r1) {\n            for (int r2=r1; r2<n; ++r2) {\n                for (int c1=0; c1<m; ++c1) {\n                    for (int c2=c1; c2<m; ++c2) {\n                        if (getsum(sum, r1, r2, c1, c2)>0) {\n                            dp[r1][r2][c1][c2][0]=(1+maxr[r1][r2][c1][c2]-minr[r1][r2][c1][c2])*(1+maxc[r1][r2][c1][c2]-minc[r1][r2][c1][c2]);\n                        } else {\n                            dp[r1][r2][c1][c2][0]=0;\n                        }\n                    }\n                }\n            }\n        }\n        for (int k=1; k<=2; ++k) {\n            for (int r1=0; r1<n; ++r1) {\n                for (int r2=r1; r2<n; ++r2) {\n                    for (int c1=0; c1<m; ++c1) {\n                        for (int c2=c1; c2<m; ++c2) {\n                            if (getsum(sum, r1, r2, c1, c2)>0) {\n                                dp[r1][r2][c1][c2][k]=(1+maxr[r1][r2][c1][c2]-minr[r1][r2][c1][c2])*(1+maxc[r1][r2][c1][c2]-minc[r1][r2][c1][c2]);\n                            } else {\n                                dp[r1][r2][c1][c2][k]=0;\n                            }\n                            // if (r1==0&&r2==1&&c1==0&&c2==3&&k==2) {\n                            //     cout << dp[r1][r2][c1][c2][k] << endl;\n                            // }\n                            // horizontal\n                            for (int rr=r1; rr<r2; ++rr) {\n                                dp[r1][r2][c1][c2][k]=min(min(dp[r1][r2][c1][c2][k], dp[r1][rr][c1][c2][k-1]+dp[rr+1][r2][c1][c2][0]), dp[r1][rr][c1][c2][0]+dp[rr+1][r2][c1][c2][k-1]);\n                                // if (r1==0&&r2==1&&c1==0&&c2==3&&k==2) {\n                                //     cout << rr << \":(r)\" << dp[r1][r2][c1][c2][k] << endl;\n                                // }\n                            }\n                            // vertical\n                            for (int cc=c1; cc<c2; ++cc) {\n                                dp[r1][r2][c1][c2][k]=min(min(dp[r1][r2][c1][c2][k], dp[r1][r2][cc+1][c2][0]+dp[r1][r2][c1][cc][k-1]), dp[r1][r2][cc+1][c2][k-1]+dp[r1][r2][c1][cc][0]);\n                                // if (r1==0&&r2==1&&c1==0&&c2==3&&k==2) {\n                                //     cout << cc << \":(c)\" << dp[r1][r2][c1][c2][k] << endl;\n                                // }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        // for (int r1=0; r1<n; ++r1) {\n        //     for (int r2=r1; r2<n; ++r2) {\n        //         for (int c1=0; c1<m; ++c1) {\n        //             for (int c2=c1; c2<m; ++c2) {\n        //                 cout << r1 << \" \" << r2 << \" \" << c1 << \" \" << c2 << \" \" << dp[r1][r2][c1][c2][2] << endl;\n        //             }\n        //         }\n        //     }\n        // }\n        return dp[0][n-1][0][m-1][2];\n    }\n};",
    "submit_ts": 1719113355.0
}