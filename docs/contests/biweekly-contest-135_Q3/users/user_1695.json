{
    "username": "Abhineet309",
    "submission": "from typing import List\nfrom bisect import bisect_left\nfrom collections import defaultdict, deque\nimport heapq\n\nclass Solution:\n    def minChanges(self, sequence: List[int], target: int) -> int:\n        def preprocess_sequence(seq: List[int]) -> (dict, list):\n            difference_to_maximum = defaultdict(list)\n            maximum_values = []\n            sequence_length = len(seq)\n            for index in range(sequence_length // 2):\n                left_element, right_element = seq[index], seq[sequence_length - index - 1]\n                element_difference = abs(left_element - right_element)\n                max_value = self.compute_max_value(left_element, right_element, target)\n                difference_to_maximum[element_difference].append(max_value)\n                maximum_values.append(max_value)\n            return difference_to_maximum, maximum_values\n\n        def find_minimum_changes(diff_to_max: dict, max_values: list) -> int:\n            minimum_changes = len(sequence)\n            max_values.sort()\n            for current_difference, associated_maximums in diff_to_max.items():\n                position = bisect_left(max_values, current_difference)\n                while position > 0 and max_values[position - 1] == current_difference:\n                    position -= 1\n                change_count = self.calculate_change_count(position, len(sequence))\n                for max_value in associated_maximums:\n                    change_count = self.update_change_count(change_count, max_value, current_difference)\n                minimum_changes = min(minimum_changes, change_count)\n            return minimum_changes\n\n        def additional_utility_function(numbers: List[int]) -> List[int]:\n            return sorted(numbers)\n\n        difference_to_maximum, maximum_values = preprocess_sequence(sequence)\n        result = find_minimum_changes(difference_to_maximum, maximum_values)\n        sorted_maximum_values = additional_utility_function(maximum_values)\n        print(f\"Sorted maximum values for debug: {sorted_maximum_values}\")\n        return result\n\n    def compute_max_value(self, left: int, right: int, target: int) -> int:\n        return max(left, right, target - left, target - right)\n\n    def calculate_change_count(self, position: int, seq_length: int) -> int:\n        return position * 2 + (seq_length // 2 - position)\n\n    def update_change_count(self, change_count: int, max_value: int, current_difference: int) -> int:\n        if max_value < current_difference:\n            change_count -= 2\n        else:\n            change_count -= 1\n        return change_count",
    "submit_ts": "1721490047",
    "subm_id": "1327471466"
}