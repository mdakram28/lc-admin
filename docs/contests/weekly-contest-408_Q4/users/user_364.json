{
    "username": "sahilsrivastava827",
    "submission": "class Solution {\n\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n    queue<int> qu;\n    vector<int> visited(nodes + 4, 0);\n    qu.push(start);\n    visited[start] = 1;\n    \n    while (!qu.empty()) {\n        int u = qu.front();\n        qu.pop();\n        for (int v : graph[u]) {\n            if (!visited[v]) {\n                qu.push(v);\n                visited[v] = 1;\n            }\n        }\n    }\n    return visited[target1] || visited[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         vector<pair<pair<int, int>, int>> circles(circles2.size());\n         vector<vector<int>> graph(circles2.size() + 4);\n         int no_circles=circles2.size();\n        \n        for (int i = 0; i < no_circles; ++i) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].first.second=circles2[i][1];\n            circles[i].second=circles2[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < no_circles; ++i) {\n             \n            if (circles[i].first.first <= circles[i].second) {\n                graph[no_circles].push_back(i);\n                graph[i].push_back(no_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[no_circles + 2].push_back(i);\n                graph[i].push_back(no_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[no_circles + 1].push_back(i);\n                graph[i].push_back(no_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[no_circles + 3].push_back(i);\n                graph[i].push_back(no_circles + 3);\n            }\n            for (int j = i + 1; j < no_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int blocked = 0;\n        blocked = max(blocked, bfs(graph, no_circles, no_circles + 1, no_circles + 2, no_circles + 4)); \n        blocked = max(blocked, bfs(graph, no_circles + 3, no_circles + 2, no_circles + 1, no_circles + 4));\n        if (blocked){return false;}\n        return true;\n       \n    }\n};",
    "submit_ts": "1722137187",
    "subm_id": "1335756644"
}