{
    "username": "brycelo",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    int left(int p) { return p << 1; }\n    int right(int p) { return (p << 1) + 1; }\n\n    void build(int p, int L, int R) {\n        if (L == R) {\n            tree[p] = isPeak(L) ? 1 : 0;\n        } else {\n            int mid = (L + R) / 2;\n            build(left(p), L, mid);\n            build(right(p), mid+1, R);\n            tree[p] = tree[left(p)] + tree[right(p)];\n        }\n    }\n\n    int rsq(int p, int L, int R, int i, int j) {\n        if (L > j || R < i) return 0;\n        if (i <= L && R <= j) return tree[p];\n\n        int mid = (L + R) / 2;\n        int leftResult = rsq(left(p), L, mid, i, j);\n        int rightResult = rsq(right(p), mid + 1, R, i, j);\n        return leftResult + rightResult;\n    }\n\n    void update(int p, int L, int R, int idx) {\n        if (L == R) {\n            tree[p] = isPeak(L) ? 1 : 0;\n        } else {\n            int mid = (L + R) / 2;\n            if (idx <= mid) update(left(p), L, mid, idx);\n            else update(right(p), mid + 1, R, idx);\n            tree[p] = tree[left(p)] + tree[right(p)];\n        }\n    }\n\n    bool isPeak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\npublic:\n    SegmentTree(const vector<int> &nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n, 0);\n        build(1, 0, n - 1);\n    }\n\n    int rsq(int i, int j) {\n        return rsq(1, 0, n - 1, i, j);\n    }\n\n    void update(int idx, int val) {\n        nums[idx] = val;\n        update(1, 0, n - 1, idx);\n        if (idx - 1 >= 0) update(1, 0, n - 1, idx - 1);\n        if (idx + 1 < n) update(1, 0, n - 1, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                if (l == r || l + 1 == r) {\n                    result.push_back(0);\n                } else {\n                    result.push_back(st.rsq(l + 1, r - 1));\n                }\n            } else if (query[0] == 2) {\n                int idx = query[1], val = query[2];\n                st.update(idx, val);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": "1718505768",
    "subm_id": "1289594137"
}