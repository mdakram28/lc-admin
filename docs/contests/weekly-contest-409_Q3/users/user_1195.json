{
    "username": "karthiksharma72003",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // vector<vector<int>> adj(n);\n        // for(int i=0; i<n-1; i++){\n        //     adj[i].push_back(i+1);\n        // }\n\n        // vector<int> ans;\n\n        // // priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n\n        // vector<int> dis(n);\n        // for(int i=0;i<n;i++){\n        //     dis[i]=i;\n        // }\n        // for(auto q: queries){\n        //     int u=q[0], v=q[1];\n        //     adj[u].push_back(v);\n        //     if(dis[u]+1<dis[v]){\n        //         dis[v]=dis[u]+1;\n        //     }\n        //     priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        //     pq.push({dis[v], v});\n        //     while (!pq.empty()) {\n        //         int curr = pq.top().second;\n        //         int dist=pq.top().first;\n        //         pq.pop();\n        //         for (auto i: adj[curr]) {\n        //             if (dist + 1 < dis[i]) {\n        //                 dis[i] = dist + 1;\n        //                 pq.push({dis[i], i});\n        //             } else {\n        //                 break;\n        //             }\n        //         }\n        //     }\n        //     ans.push_back(dis[n-1]);\n        // }\n        // return ans;\n    //         vector<vector<int>> adj(n);\n    // for (int i = 0; i < n - 1; ++i) {\n    //     adj[i].push_back(i + 1);\n    // }\n\n    // vector<int> dist(n);\n    // for (int i = 0; i < n; ++i) {\n    //     dist[i] = i;\n    // }\n\n    // vector<int> result;\n    \n    // for (const auto& query : queries) {\n    //     int u = query[0], v = query[1];\n    //     adj[u].push_back(v);\n        \n    //     if (dist[u] + 1 < dist[v]) {\n    //         dist[v] = dist[u] + 1;\n    //         queue<int> q;\n    //         q.push(v);\n    //         while (!q.empty()) {\n    //             int curr = q.front();\n    //             q.pop();\n    //             for (int next : adj[curr]) {\n    //                 if (dist[curr] + 1 < dist[next]) {\n    //                     dist[next] = dist[curr] + 1;\n    //                     q.push(next);\n    //                 }\n    //             }\n    //         }\n    //     }\n        \n    //     result.push_back(dist[n - 1]);\n    // }\n\n    // return result;\n       vector<int> d(n, 0);\n        for (int i = 1; i < n; ++i) {\n            d[i] = d[i - 1] + 1;\n        }\n\n        set<int> st;\n        for (int i = 0; i < n; ++i) {\n            st.insert(i);\n        }\n\n        vector<int> res;\n\n        for (auto q : queries) {\n            int l = q[0];\n            int rt = q[1];\n\n            auto lbs = st.lower_bound(l + 1);\n            auto ubs = st.lower_bound(rt);\n\n            st.erase(lbs, ubs);\n\n            res.push_back(st.size() - 1);\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1722743379",
    "subm_id": "1343790631"
}