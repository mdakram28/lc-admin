{
    "username": "theeeeeeekhai",
    "submission": "class SegmentTree{\npublic:\n    vector<long long> tree;\n    SegmentTree(int n){\n        tree.resize(4 * n);\n    }\n\n    void buildTree(int idx, int low, int high, vector<int>& arr){\n        if(low == high){\n            tree[idx] = arr[low];\n            return;\n        }\n        int mid = (low + high) >> 1;\n        buildTree(2 * idx + 1, low, mid, arr);\n        buildTree(2 * idx + 2, mid + 1, high, arr);\n        tree[idx] = tree[2 * idx + 1] & tree[2 * idx + 2];\n    }\n\n    long long query(int idx, int low, int high, int l, int r){\n        if(r < low || high < l) return -1;\n        if(low >= l && high <= r) return tree[idx];\n        int mid = (low + high) >> 1;\n        long long left = query(2 * idx + 1, low, mid, l, r);\n        long long right = query(2 * idx + 2, mid + 1, high, l, r);\n        return left & right;\n    }\n\n    void update(int idx, int low, int high, int i, int val){\n        if(high == low){\n            tree[idx] = val;\n            return;\n        }\n        int mid = (low + high) >> 1;\n        if(i <= mid) update(2 * idx + 1, low, mid, i, val);\n        else update(2 * idx + 2, mid + 1, high, i, val);\n        tree[idx] = tree[2 * idx + 1] & tree[2 * idx + 2];\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        long long ans = 0;\n        int n = nums.size();\n        SegmentTree sg(n);\n        sg.buildTree(0, 0, n - 1, nums);\n        for(int i = 0; i < n; i++) {\n            int l = 0, h = i, left = -1, right = -1;\n            while(l <= h) {\n                int mid = (l + h) >> 1;\n                int a = sg.query(0, 0, n - 1, mid, i);\n                if(a == k) {\n                    left = mid;\n                    h = mid - 1;\n                }\n                else if(a < k) {\n                    l = mid + 1;\n                }\n                else {\n                    h = mid - 1;\n                }\n            }\n            l = 0, h = i;\n            while(l <= h) {\n                int mid = (l + h) >> 1;\n                int a = sg.query(0, 0, n - 1, mid, i);\n                if(a == k) {\n                    right = mid;\n                    l = mid + 1;\n                }\n                else if(a < k) {\n                    l = mid + 1;\n                }\n                else {\n                    h = mid - 1;\n                }\n            }\n            if(left != -1) ans += right - left + 1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720280744",
    "subm_id": "1311800509"
}