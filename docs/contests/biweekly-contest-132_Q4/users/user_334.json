{
    "username": "HighJUMP",
    "submission": "class Solution {\n    public int maximumLength(int[] nums, int k) {\n      int n = nums.length;\n        int[][] dp = new int[n][k + 1];\n        for (int[] r : dp) Arrays.fill(r , 1);\n        int ans = 1;\n        int[] rm = new int[k + 1];\n        Arrays.fill(rm, -1);\n        List<Map<Integer, Integer>> ar = new ArrayList<>(k + 1);\n        for (int i = 0; i <= k; i++) ar.add(new HashMap<>());\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) dp[i][j] = Math.max(dp[i][j], 1 + rm[l]);\n                if (ar.get(j).containsKey(nums[i])) dp[i][j] = Math.max(dp[i][j], 1 + ar.get(j).get(nums[i]));\n                ans = Math.max(ans, dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                rm[j] = Math.max(rm[j], dp[i][j]);\n                ar.get(j).put(nums[i] , Math.max(ar.get(j).getOrDefault(nums[i] , 0), dp[i][j]));\n            }\n        }\n        return ans  ; \n    }\n}",
    "submit_ts": 1717862100.0
}