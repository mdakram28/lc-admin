{
    "username": "bcia",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def build_graph(edges):\n            graph = defaultdict(list)\n            for u, v in edges:\n                graph[u].append(v)\n                graph[v].append(u)\n            return graph\n\n        def dfs(node, parent, graph):\n            height = 0\n            max_height1 = max_height2 = 0\n            diameter = 0\n\n            for child in graph[node]:\n                if child != parent:\n                    child_height, child_diameter = dfs(child, node, graph)\n                    height = max(height, child_height + 1)\n                    diameter = max(diameter, child_diameter)\n\n                    if child_height + 1 > max_height1:\n                        max_height2 = max_height1\n                        max_height1 = child_height + 1\n                    elif child_height + 1 > max_height2:\n                        max_height2 = child_height + 1\n\n            diameter = max(diameter, max_height1 + max_height2)\n            return height, diameter\n\n        # Handle edge cases\n        if not edges1 and not edges2:\n            return 1  # Connecting two single nodes results in a diameter of 1\n        \n        if not edges1 or not edges2:\n            non_empty_edges = edges1 if edges1 else edges2\n            if len(non_empty_edges) == 1:\n                return 2  # One edge in the non-empty tree + one connecting edge\n            else:\n                graph = build_graph(non_empty_edges)\n                _, diameter = dfs(0, -1, graph)\n                return diameter  # Return the diameter of the non-empty tree\n\n        graph1 = build_graph(edges1)\n        graph2 = build_graph(edges2)\n\n        height1, diameter1 = dfs(0, -1, graph1)\n        height2, diameter2 = dfs(0, -1, graph2)\n\n        # Calculate the radius of each tree\n        radius1 = (diameter1 + 1) // 2\n        radius2 = (diameter2 + 1) // 2\n\n        # The minimum diameter after merging is the sum of the radii plus 1\n        return max(diameter1, diameter2, radius1 + radius2 + 1)",
    "submit_ts": "1719718042",
    "subm_id": "1304407280"
}