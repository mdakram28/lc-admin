{
    "username": "TheCodeRunner",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size();\n        int cols = matrix[0].size();\n        int changeCount = 0;\n\n        // Handle the center element for odd dimensions\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            if (matrix[rows / 2][cols / 2] == 1) {\n                changeCount += 1;\n            }\n        }\n\n        // Initialize shift counts\n        vector<int> shiftCounts(3, 0);\n\n        // Handle the middle row for odd row count\n        if (rows % 2 == 1) {\n            int left = 0, right = cols - 1;\n            while (left < right) {\n                int sum = matrix[rows / 2][left] + matrix[rows / 2][right];\n                shiftCounts[sum] += 1;\n                left += 1;\n                right -= 1;\n            }\n        }\n\n        // Handle the middle column for odd column count\n        if (cols % 2 == 1) {\n            int top = 0, bottom = rows - 1;\n            while (top < bottom) {\n                int sum = matrix[top][cols / 2] + matrix[bottom][cols / 2];\n                shiftCounts[sum] += 1;\n                top += 1;\n                bottom -= 1;\n            }\n        }\n\n        // Adjust the change count based on shifts\n        if (shiftCounts[2] % 2 == 1) {\n            if (shiftCounts[1] > 0) {\n                changeCount += shiftCounts[1];\n            } else {\n                changeCount += 2;\n            }\n        } else {\n            changeCount += shiftCounts[1];\n        }\n\n        for(int i = 0; i < 100; i++){\n            // unordered_map<int, unordered_map<int, int>> mpp;\n            // unordered_set<int> winner;\n            // int cnt = 0;\n            // for(int i = 0; i < pick.size(); i++){\n            //     int player = pick[i][0];\n            //     int ball = pick[i][1];\n                \n            //     mpp[player][ball]++;\n            //     if(mpp[player][ball] > player){\n            //         if(winner.find(player) == winner.end()){\n            //             cnt++;\n            //             winner.insert(player);\n            //         }\n            //     }\n            // }\n        }\n\n        // Handle the four corners for each quadrant\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int topLeft = matrix[i][j];\n                int bottomLeft = matrix[rows - 1 - i][j];\n                int topRight = matrix[i][cols - 1 - j];\n                int bottomRight = matrix[rows - 1 - i][cols - 1 - j];\n\n                int quadrantSum = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (quadrantSum != 0 && quadrantSum != 4) {\n                    changeCount += min(quadrantSum, 4 - quadrantSum);\n                }\n            }\n        }\n\n        for(int i = 0; i < 100; i++){\n            // unordered_map<int, unordered_map<int, int>> mpp;\n            // unordered_set<int> winner;\n            // int cnt = 0;\n            // for(int i = 0; i < pick.size(); i++){\n            //     int player = pick[i][0];\n            //     int ball = pick[i][1];\n                \n            //     mpp[player][ball]++;\n            //     if(mpp[player][ball] > player){\n            //         if(winner.find(player) == winner.end()){\n            //             cnt++;\n            //             winner.insert(player);\n            //         }\n            //     }\n            // }\n        }\n        \n        return changeCount;\n    }\n};",
    "submit_ts": "1722699667",
    "subm_id": "1343218645"
}