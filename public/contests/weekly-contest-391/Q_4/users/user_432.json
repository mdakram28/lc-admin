{
    "username": "frogfox",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        st1=[]\n        st2=[]\n        mn=[]\n        mx=[]\n        def f(x,y):\n            return -x+y,x-y,x+y\n        \n        \n        n=len(points)\n        for i in range(n):\n            x,y=points[i]\n            m1,m2,m3=f(x,y)\n            \n            heapq.heappush(mn,(m3,i))\n            heapq.heappush(mx,(-m3,i))\n            \n            heapq.heappush(st1,(-m1,i))\n            heapq.heappush(st2,(-m2,i))\n            \n        tmp=[]\n        ret=[]\n        for i in range(n):\n            cnt=2\n            mx1=0\n            # print('i',i)\n            while st1 and st1[0][1]==i:\n                cur=heapq.heappop(st1)\n                tmp.append(cur)\n            \n            mx1=-st1[0][0]\n            # print('mx1',mx1) \n            while tmp:\n                heapq.heappush(st1,tmp.pop())\n            \n            while st2 and st2[0][1]==i:\n                cur=heapq.heappop(st2)\n                tmp.append(cur)\n            \n            mx1+=-st2[0][0]\n            while tmp:\n                heapq.heappush(st2,tmp.pop())\n            \n            while mn and mn[0][1]==i:\n                cur=heapq.heappop(mn)\n                tmp.append(cur)\n            \n            mx2=-mn[0][0]\n            \n            while tmp:\n                heapq.heappush(mn,tmp.pop())\n            \n            while mx and mx[0][1]==i:\n                cur=heapq.heappop(mx)\n                tmp.append(cur)\n            \n            # print('mx2',-mx[0][0],mx2)\n            mx2+=-mx[0][0]\n            \n            while tmp:\n                heapq.heappush(mx,tmp.pop())\n            \n            ret.append(max(mx1,mx2))\n        # print(ret)\n        return min(ret)\n            \n                    \n            "
}