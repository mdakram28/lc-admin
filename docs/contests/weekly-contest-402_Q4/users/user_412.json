{
    "username": "delphih",
    "submission": "DBG = 0\n\nclass Node:\n    def __init__(self, l, r, data=None):\n        assert(l < r)\n        self.l, self.r, self.data, self.v = l, r, data, 0\n        m = self.m = (l + r) // 2\n        if r - l > 1:\n            self.c = Node(l, m, data), Node(m, r, data)\n            self.v = self.c[0].v + self.c[1].v + self.middle(l, r)\n    \n    def middle(self, l, r):\n        m, data = self.m, self.data\n        return ((l < m - 1 and data[m-2] < data[m-1] and data[m-1] > data[m]) +\n                (m < r - 1 and data[m-1] < data[m] and data[m] > data[m+1]))\n    \n    def set(self, idx, val):\n        assert(self.l <= idx < self.r)\n        if self.r - self.l <= 1:\n            self.data[idx] = val\n            return\n        m = (self.l + self.r) // 2\n        self.c[idx >= m].set(idx, val)\n        self.v = self.c[0].v + self.c[1].v + self.middle(self.l, self.r)\n    \n    def query(self, l, r):\n        if r <= self.l or l >= self.r: return 0\n        if l <= self.l and self.r <= r: return self.v\n        res = 0\n        m = (self.l + self.r) // 2\n        if l < m: res += self.c[0].query(l, r)\n        if DBG: print('q', l, r, self.l, self.r, self.v, res)\n        if m < r: res += self.c[1].query(l, r)\n        if DBG: print('q', l, r, self.l, self.r, self.v, res)\n        if l < m and m < r: res += self.middle(max(l, self.l), min(r, self.r))\n        if DBG: print('q', l, r, self.l, self.r, self.v, res)\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        seg = Node(0, len(nums), nums)\n        res = []\n        for t, t1, t2 in queries:\n            if t == 1:\n                res.append(seg.query(t1, t2 + 1))\n            else:\n                seg.set(t1, t2)\n        return res",
    "submit_ts": "1718507188",
    "subm_id": "1289643904"
}