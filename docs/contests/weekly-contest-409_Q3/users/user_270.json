{
    "username": "feibonaqixu",
    "submission": "class SegmentTree {\n    vector<int> tree, lazy;\n    int n;\npublic:\n    SegmentTree(int size) : n(size) {\n        tree.resize(4 * n, 0);\n        lazy.resize(4 * n, 1);\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = 1;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid);\n            build(2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void updateRange(int l, int r, int value, int node, int start, int end) {\n        if (lazy[node] == 0) { // Lazy propagation\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = lazy[node];\n                lazy[2 * node + 2] = lazy[node];\n            }\n            lazy[node] = 1;\n        }\n        if (start > end || start > r || end < l) {\n            return;\n        }\n        if (start >= l && end <= r) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = value;\n                lazy[2 * node + 2] = value;\n            }\n            return;\n        }\n        int mid = (start + end) / 2;\n        updateRange(l, r, value, 2 * node + 1, start, mid);\n        updateRange(l, r, value, 2 * node + 2, mid + 1, end);\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int query(int l, int r, int node, int start, int end) {\n        if (start > end || start > r || end < l) {\n            return 0;\n        }\n        if (lazy[node] == 0) {\n            tree[node] = 0;\n            if (start != end) {\n                lazy[2 * node + 1] = lazy[node];\n                lazy[2 * node + 2] = lazy[node];\n            }\n            lazy[node] = 1;\n        }\n        if (start >= l && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        return query(l, r, 2 * node + 1, start, mid) +\n               query(l, r, 2 * node + 2, mid + 1, end);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        SegmentTree st(n);\n        st.build(0, 0, n-2);  // Build the segment tree for path costs from 0 to n-2\n\n        vector<int> answer;\n        for (auto& q : queries) {\n            int u = q[0], v = q[1];\n            if (u + 1 < v) {  // Only update if there's a range to zero out\n                st.updateRange(u + 1, v - 1, 0, 0, 0, n-2);\n            }\n            answer.push_back(st.query(0, n-1, 0, 0, n-2));\n        }\n        return answer;\n    }\n};",
    "submit_ts": "1722741059",
    "subm_id": "1343735590"
}