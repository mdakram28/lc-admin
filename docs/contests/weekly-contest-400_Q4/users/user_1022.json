{
    "username": "hereToRock",
    "submission": "class ST {\npublic:\n    vector<int> tree;\n    int n;\n\n    ST(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n    \n    void build(vector<int>& nums, int idx, int start, int end) {\n        if (start == end) {\n            tree[idx] = nums[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * idx + 1, start, mid);\n            build(nums, 2 * idx + 2, mid + 1, end);\n            tree[idx] = tree[2 * idx + 1] & tree[2 * idx + 2];\n        }\n    }\n\n    int query(int node, int ls, int le , int l, int r) {\n        if (r < ls || le < l) {\n            return INT_MAX;\n        }\n        if (l <= ls && le <= r) {\n            return tree[node];\n        }\n        int mid = (le + ls) / 2;\n        return query(2 * node + 1, ls, mid, l, r) & query(2 * node + 2, mid + 1, le, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        ST st(nums);\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int lo = i - 1, hi = n - 1;\n            while (hi - 1 > lo) {\n                int mid = lo + (hi - lo) / 2;\n                if (st.query(0, 0, n - 1, i, mid) >= k)\n                    lo = mid;\n                else\n                    hi = mid;\n            }\n            if (lo != i - 1)\n                ans = min(ans, abs(st.query(0, 0, n - 1, i, lo) - k));\n            ans = min(ans, abs(k - st.query(0, 0, n - 1, i, hi)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297840.0
}