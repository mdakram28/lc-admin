{
    "username": "manojc_raavi",
    "submission": "class FenwickTree:\n    def __init__(self,arr):\n        n=len(arr)\n        self.n=n\n        self.arr=arr\n        self.tree=[0 for i in range(n+1)]\n        for i in range(n):\n            self.build(i,arr[i])\n                       \n    def build(self, ind, val):\n        ind+=1\n        while ind<=self.n:\n            self.tree[ind]+=val\n            ind+=ind&(-ind)\n    \n    def update(self, ind, val):\n        nval=val-self.arr[ind]\n        self.arr[ind]=val\n        self.build(ind, nval)\n\n    def summ(self, ind):\n        su=0\n        while ind>0:\n            su+=self.tree[ind]\n            ind-=ind&(-ind)\n        return su\n    \n    def query(self, l, r):\n        return self.summ(r+1)-self.summ(l)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        n=len(nums)\n        arr=[0]\n        for i in range(1,n-1):\n            if nums[i-1]<nums[i] and nums[i]>nums[i+1]:\n                arr.append(1)\n            else:\n                arr.append(0)\n        arr.append(0)\n        obj=FenwickTree(arr)\n        result=[]\n        \n        for u,v,w in queries:\n            if u==1:\n                if w-v+1<=2:\n                    result.append(0)\n                else:\n                    result.append(obj.query(v+1,w-1))\n            else:\n                nums[v]=w\n                for i in range(max(0,v-1),min(v+2,n)):\n                    res=0\n                    if i==0 or i==n-1: \n                        res=0\n                    else:\n                        if nums[i-1]<nums[i] and nums[i]>nums[i+1]:\n                            res=1\n                    if arr[i]!=res:\n                        obj.update(i,res)\n                        arr[i]=res\n                \n                \n        return result\n        ",
    "submit_ts": "1718509179",
    "subm_id": "1289701485"
}