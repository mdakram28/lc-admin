{
    "username": "saurabhsahu0412",
    "submission": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nclass Tree {\npublic:\n    Tree(int n) : n(n), tree(4 * n, 0) {}\n\n    void build(vector<int>& nums) {\n        build(0, 0, n - 1, nums);\n    }\n\n    int query(int left, int right) {\n        return query(0, 0, n - 1, left, right);\n    }\n\n    void update(int idx, int value, vector<int>& nums) {\n        int oldVal = nums[idx];\n        nums[idx] = value;\n        if (idx > 0) updatePeak(idx - 1, nums[idx - 1], nums);\n        updatePeak(idx, value, nums);\n        if (idx < n - 1) updatePeak(idx + 1, nums[idx + 1], nums);\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n\n    bool isPeak(vector<int>& nums, int idx) {\n        if (idx <= 0 || idx >= n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n\n    void build(int node, int start, int end, vector<int>& nums) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node + 1, start, mid, nums);\n            build(2 * node + 2, mid + 1, end, nums);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return 0;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = query(2 * node + 1, start, mid, left, right);\n        int rightResult = query(2 * node + 2, mid + 1, end, left, right);\n        return leftResult + rightResult;\n    }\n\n    void updatePeak(int idx, int value, vector<int>& nums) {\n        update(0, 0, n - 1, idx, value, nums);\n    }\n\n    void update(int node, int start, int end, int idx, int value, vector<int>& nums) {\n        if (start == end) {\n            tree[node] = isPeak(nums, idx) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx, value, nums);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx, value, nums);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        Tree segTree(n);\n        segTree.build(nums);\n\n        vector<int> results;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                results.push_back(segTree.query(l + 1, r - 1));\n            } else if (query[0] == 2) {\n                int index = query[1], val = query[2];\n                segTree.update(index, val, nums);\n            }\n        }\n\n        return results;\n    }\n};",
    "submit_ts": 1718507345.0
}