{
    "username": "Nguyen Duc Linh",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        ios::sync_with_stdio(false);\n\n        int n = board.size();\n        int m = board[0].size();\n\n        vector<vector< pair<long long,int> > > grid;\n        for (int i = 0; i < n; i++) {\n            vector<pair<long long, int> > x;\n            for (int j = 0; j < m; j++) {\n                x.push_back(make_pair(board[i][j], j));\n            }\n\n            sort(x.begin(), x.end(), greater<pair<int, int> >());\n\n            grid.push_back(x);\n        }\n\n        long long res = -1000000001LL * 3;\n        int nCol = min(4, m);\n        for (int row1 = 0; row1 < n - 2; row1++) {\n            for (int col1 = 0; col1 < nCol; col1++) {\n                for (int row2 = row1 + 1; row2 < n-1; row2++) {\n                    for (int col2 = 0; col2 < nCol; col2++) {\n                        for (int row3 = row2 + 1; row3 < n; row3++) {\n                            for (int col3 = 0; col3 < nCol; col3++) {\n                                auto p1 = grid[row1][col1];\n                                auto p2 = grid[row2][col2];\n                                auto p3 = grid[row3][col3];\n\n                                if (p1.second != p2.second && p1.second != p3.second && p2.second != p3.second) {\n                                    res = max(res, p1.first + p2.first + p3.first);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1723908455",
    "subm_id": "1359153410"
}