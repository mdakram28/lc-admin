{
    "username": "Rohit_Meena",
    "submission": "\nstruct DSU{\n    vector<int> par, rnk, size, left, right, up, down;\n    int c;\n    DSU(int _n, vector<vector<int>> &v) : par(_n + 1), rnk(_n + 1, 0), left(_n + 1, 0), right(_n + 1, 0), up(_n + 1, 0), down(_n + 1, 0), size(_n + 1, 1), c(_n) {for (int i = 0; i < _n; ++i){\n        par[i] = i;\n        left[i] = v[i][0] - v[i][2];\n        right[i] = v[i][0] + v[i][2];\n        up[i] = v[i][1] + v[i][2];\n        down[i] = v[i][1] - v[i][2];\n    } }\n    int find(int i){            //find parent of i\n        return (par[i] == i ? i : (par[i] = find(par[i])));}\n    bool same(int i, int j){    //check if i and j are in same component\n        return find(i) == find(j);}\n    int get_size(int i){        //size of component in which i is present\n        return size[find(i)];}\n    int count(){                //total components\n        return c;}\n    int merge(int i, int j){    //merge the components containing i and j and return the parent\n        if ((i = find(i)) == (j = find(j))) return -1;\n        else --c;\n        if (rnk[i] > rnk[j]) swap(i, j);\n        par[i] = j;\n        size[j] += size[i];\n        left[j] = min(left[j], left[i]);\n        right[j] = max(right[j], right[i]);\n        up[j] = max(up[j],up[i]);\n        down[j] = min(down[j], down[i]);\n        if (rnk[i] == rnk[j]) rnk[j]++;\n        return j;}\n};\nclass Solution {\npublic:\n    bool intersect(vector<int> &v1, vector<int> &v2){\n        int x1 = v1[0], y1 = v1[1], r1 = v1[2];\n        int x2 = v2[0], y2 = v2[1], r2 = v2[2];\n        double d = sqrtl(1LL*(x1 - x2) * (x1 - x2)\n                         + 1LL*(y1 - y2) * (y1 - y2));\n        if(d > r1 + r2) return false;\n        return true;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        DSU d(n, circles);\n        for(int i = 0;i<n;i++){\n            for(int j = i+1;j<n;j++){\n                if(intersect(circles[i], circles[j])) d.merge(i,j);\n            }\n        }\n\n        for(int i = 0;i<n;i++){\n            if(i != d.find(i)) continue;\n            int L = d.left[i], R = d.right[i], U = d.up[i], D = d.down[i];\n            // cout<<i<<endl;\n            // cout<<L<<\" \"<<R<<\" \"<<U<<\" \"<<D<<\" \"<<endl;\n            if(L<=0 && R>=X) return false;\n            if(D<=0 && U >= Y) return false;\n            if(L<=0 && D<=0) return false;\n            if(R>=X && U>=Y) return false;\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722138115",
    "subm_id": "1335782493"
}