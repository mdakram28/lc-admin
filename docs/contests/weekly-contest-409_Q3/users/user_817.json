{
    "username": "CodeDEVotion",
    "submission": "class Solution {\npublic:\n    class ST {\n    public:\n        vector<int> st, lazy;\n        int n;\n\n        ST(int n) {\n            this->n = n;\n            st.resize(4 * n, 0);\n            lazy.resize(4 * n, -1);\n            buildTree(0, 0, n - 1);\n        }\n\n        void update(int left, int right) {\n            update(0, 0, n - 1, left, right);\n        }\n\n        int query() {\n            return st[0];\n        }\n\n        void buildTree(int i, int lo, int hi) {\n            if (lo == hi) {\n                st[i] = 1;\n                if (lo == 0) st[i] = 0;\n                return;\n            }\n            int mid = lo + (hi - lo) / 2;\n            buildTree(2 * i + 1, lo, mid); \n            buildTree(2 * i + 2, mid + 1, hi);\n            st[i] = st[2 * i + 1] + st[2 * i + 2];\n        }\n\n        void propagate(int i, int lo, int hi) {\n            if (lazy[i] != -1) {\n                st[i] = (lazy[i] == 0 ? 0 : (hi - lo + 1) * lazy[i]);\n                if (lo != hi) {\n                    lazy[2 * i + 1] = lazy[i];\n                    lazy[2 * i + 2] = lazy[i];\n                }\n                lazy[i] = -1;\n            }\n        }\n\n        void update(int i, int lo, int hi, int left, int right) {\n            propagate(i, lo, hi);\n            if (lo > right or hi < left) return; \n            if (lo >= left and hi <= right) { \n                st[i] = 0;\n                if (lo != hi) {\n                    lazy[2 * i + 1] = 0;\n                    lazy[2 * i + 2] = 0;\n                }\n                return;\n            }\n            int mid = lo + (hi - lo) / 2;\n            update(2 * i + 1, lo, mid, left, right);\n            update(2 * i + 2, mid + 1, hi, left, right);\n            st[i] = st[2 * i + 1] + st[2 * i + 2];\n        }\n    };\n\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        ST seg(n);\n        vector<int> ans;\n        for (auto& q : queries) {\n            int u = q[0];\n            int v = q[1];\n            seg.update(u + 1, v - 1);\n            ans.push_back(seg.query());\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742598",
    "subm_id": "1343772675"
}