{
    "username": "YoumuChan",
    "submission": "impl Solution {\n    pub fn minimum_operations(mut nums: Vec<i32>, mut target: Vec<i32>) -> i64 {\n        nums.push(0);\n        target.push(0);\n        increment_count(&nums, &target) + increment_count(&target, &nums)\n    }\n}\n\nfn increment_count(nums: &[i32], target: &[i32]) -> i64 {\n    let mut events = vec![];\n    let mut current_run = vec![];\n    let mut in_run = false;\n    let mut prev = 0;\n\n    for i in 0..nums.len() - 1 {\n        let needed = nums[i] - target[i];\n        let next = nums[i + 1] - target[i + 1];\n        //println!(\"{i}: {in_run} {prev} {needed} {next}\");\n        match (in_run, needed > 0) {\n            (true, true) => {\n                if needed >= prev && needed > next {\n                    current_run.push((needed, -1));\n                }\n                else if needed < prev && next > 0 && needed < next {\n                    current_run.push((needed, 1));\n                }\n                if needed != next {\n                    prev = needed;\n                }\n            },\n            (true, false) => {\n                let mut new_vec = vec![];\n                std::mem::swap(&mut current_run, &mut new_vec);\n                events.push(new_vec);\n                in_run = false;\n            },\n            (false, true) => {\n                if needed > next {\n                    current_run.push((needed, -1));\n                    prev = needed;\n                }\n                else if needed == next {\n                    prev = 0;\n                }\n                else {\n                    prev = needed;\n                }\n                in_run = true;\n            },\n            (false, false) => (),\n        }\n    }\n    if in_run {\n        events.push(current_run);\n    }\n\n    //println!(\"{events:?}\");\n\n    events.into_iter().map(|mut v| {\n        v.sort_unstable();\n        let mut segments = 1;\n        let mut ans = 0;\n        let mut it = v.into_iter().peekable();\n        let mut prev_height = 0;\n        while let Some((height, ev)) = it.next() {\n            ans += segments * (height - prev_height) as i64;\n            prev_height = height;\n            segments += ev;\n            while let Some((_, e)) = it.next_if(|(h, _)| *h == height) {\n                segments += e;\n            }\n        }\n        ans\n    }).sum()\n}",
    "submit_ts": "1721532676",
    "subm_id": "1327991448"
}