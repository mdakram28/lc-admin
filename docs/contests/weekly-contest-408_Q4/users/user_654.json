{
    "username": "deepharsh057",
    "submission": "class Solution {\npublic:\n     bool solve(int X, int Y, vector<vector<int>>& c) {\n        \n        int m = c.size();\n        vector<vector<int>> g(m + 4);\n        \n        for (int i = 0; i < m; i++) {\n            \n            if (c[i][0] <= c[i][2]) {\n                \n                g[m].push_back(i);\n                \n                g[i].push_back(m);\n            }\n            if (X - c[i][0] <= c[i][2]) {\n                \n                g[m + 2].push_back(i);\n                \n                g[i].push_back(m + 2);\n            }\n            if (c[i][1] <= c[i][2]) {\n                \n                g[m + 1].push_back(i);\n                \n                g[i].push_back(m + 1);\n            }\n            if (Y - c[i][1] <= c[i][2]) {\n                \n                g[m + 3].push_back(i);\n                \n                g[i].push_back(m + 3);\n            }\n            for (int j = i + 1; j < m; ++j) {\n                \n                double dist = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n                \n                int radSum = c[i][2] + c[j][2];\n                \n                if (radSum >= dist) {\n                    \n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        \n        isBlocked = max(isBlocked, bfs(g, m, m + 1, m + 2, m + 4));\n        \n        isBlocked = max(isBlocked, bfs(g, m + 3, m + 2, m + 1, m + 4)); \n        \n        \n        return isBlocked == 0;\n    }\n    \n    int bfs(vector<vector<int>>& g, int s, int p1, int p2, int n) {\n        \n        queue<int> q;\n        \n        vector<bool> vis(n + 4, false);\n        \n        q.push(s);\n        \n        vis[s] = true;\n        \n        while (!q.empty()) {\n            \n            int u = q.front();\n            q.pop();\n            \n            for (int v : g[u]) {\n                \n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        \n        return (vis[p1] || vis[p2] ? 1 : 0);\n    }\n    \n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        \n        return solve(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138509",
    "subm_id": "1335792561"
}