{
    "username": "junruiw",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = sys.maxsize\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word: str, cost: int) -> None:\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def get_prefixes(self, prefix: str) -> List[tuple]:\n        node = self.root\n        result = []\n        for i, char in enumerate(prefix):\n            if char not in node.children:\n                break\n            node = node.children[char]\n            if node.cost != sys.maxsize:\n                result.append((i + 1, node.cost))\n        return result\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        n = len(target)\n        dp = [sys.maxsize] * (n + 1)\n        dp[0] = 0\n        \n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        for i in range(n):\n            if dp[i] == sys.maxsize:\n                continue\n            remaining_target = target[i:]\n            prefixes = trie.get_prefixes(remaining_target)\n            for length, cost in prefixes:\n                if i + length <= n:\n                    dp[i + length] = min(dp[i + length], dp[i] + cost)\n        \n        return dp[n] if dp[n] != sys.maxsize else -1",
    "submit_ts": "1720323336",
    "subm_id": "1312373076"
}