{
    "username": "nguyenducloc",
    "submission": "const long long mod = (long long)1e9 + 7;\n\nstruct Node {\n    long long max1;  // maximum [first, last]\n    long long max2;  // maximum [first + 1, last]\n    long long max3;  // maximum [first, last - 1]\n    long long max4;  // maximum [first + 1, last - 1]\n\n    Node() {}\n};\n\nvector<Node> tree;\n\nvoid build(int index, int L, int R, vector<int>& nums) {\n    if (L == R) {\n        tree[index].max1 = max(0LL, 1LL * nums[L]);\n        tree[index].max2 = 0LL;\n        tree[index].max3 = 0LL;\n        tree[index].max4 = 0LL;\n        return;\n    }\n    int mid = (L + R) / 2;\n    build(2 * index, L, mid, nums);\n    build(2 * index + 1, mid + 1, R, nums);\n    tree[index].max1 = max(tree[2 * index].max3 + tree[2 * index + 1].max1,\n                           tree[2 * index].max1 + tree[2 * index + 1].max2);\n    tree[index].max2 = max(tree[2 * index].max2 + tree[2 * index + 1].max2,\n                           tree[2 * index].max4 + tree[2 * index + 1].max1);\n    tree[index].max3 = max(tree[2 * index].max1 + tree[2 * index + 1].max4,\n                           tree[2 * index].max3 + tree[2 * index + 1].max3);\n    tree[index].max4 = max(tree[2 * index].max2 + tree[2 * index + 1].max4,\n                           tree[2 * index].max4 + tree[2 * index + 1].max3);\n}\n\nvoid update(int index, int L, int R, int pos, int val) {\n    if (L == R) {\n        tree[index].max1 = max(0LL, 1LL * val);\n        tree[index].max2 = 0LL;\n        tree[index].max3 = 0LL;\n        tree[index].max4 = 0LL;\n        return;\n    }\n    int mid = (L + R) / 2;\n    if (pos <= mid) {\n        update(2 * index, L, mid, pos, val);\n    } else {\n        update(2 * index + 1, mid + 1, R, pos, val);\n    }\n    tree[index].max1 = max(tree[2 * index].max3 + tree[2 * index + 1].max1,\n                           tree[2 * index].max1 + tree[2 * index + 1].max2);\n    tree[index].max2 = max(tree[2 * index].max2 + tree[2 * index + 1].max2,\n                           tree[2 * index].max4 + tree[2 * index + 1].max1);\n    tree[index].max3 = max(tree[2 * index].max1 + tree[2 * index + 1].max4,\n                           tree[2 * index].max3 + tree[2 * index + 1].max3);\n    tree[index].max4 = max(tree[2 * index].max2 + tree[2 * index + 1].max4,\n                           tree[2 * index].max4 + tree[2 * index + 1].max3);\n}\n\nclass Solution {\n   public:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = (int)nums.size();\n        tree.clear();\n        tree.resize(4 * n + 5);\n        build(1, 0, n - 1, nums);\n        long long ans = 0;\n\n        for (auto& e : queries) {\n            update(1, 0, n - 1, e[0], e[1]);\n            ans += tree[1].max1;\n            ans %= mod;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716694425.0
}