{
    "username": "yh157612",
    "submission": "#[derive(Default)]\nstruct TrieNode {\n    end: bool,\n    cost: i32,\n    next: [Option<Box<TrieNode>>; 26],\n}\n\nfn helper(dp: &mut [Option<i32>], target: &[u8], i: usize, root: &TrieNode) -> i32 {\n    if let Some(res) = dp[i] {\n        return res;\n    }\n    if i == target.len() {\n        return 0;\n    }\n    let mut result = 1000000000;\n    let mut node = root;\n    for j in i..target.len() {\n        match node.next[(target[j] - b'a') as usize].as_deref() {\n            Some(next) => {\n                node = next;\n                if node.end {\n                    result = result.min(node.cost + helper(dp, target, j + 1, root));\n                }\n            }\n            None => break,\n        }\n    }\n    dp[i] = Some(result);\n    result\n}\n\nimpl Solution {\n    pub fn minimum_cost(target: String, words: Vec<String>, costs: Vec<i32>) -> i32 {\n        let mut root = TrieNode::default();\n        for (w, &cost) in words.iter().zip(costs.iter()) {\n            let mut node = &mut root;\n            for c in w.bytes() {\n                node = node.next[(c - b'a') as usize].get_or_insert_with(Default::default);\n            }\n            if node.end {\n                node.cost = node.cost.min(cost);\n            } else {\n                node.end = true;\n                node.cost = cost;\n            }\n        }\n\n        let mut dp = vec![None; target.len() + 1];\n        let result = helper(&mut dp, target.as_bytes(), 0, &root);\n        if result >= 1000000000 {\n            -1\n        } else {\n            result\n        }\n    }\n}",
    "submit_ts": "1720322228",
    "subm_id": "1312344204"
}