{
    "username": "vuduyanhhoang33",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        vector<int> maxindex = vector<int>(s.size(), 0);\n        vector<long long> pref = vector<long long> (s.size(), 0);\n        cout << maxindex.size() << endl;\n        int j = 0;\n        int cnt[2];\n        cnt[0] = 0; \n        cnt[1] = 0; \n        int n = s.size();\n        for (int i = 0; i < n; i++) {\n            // cout << \"i = \" << i << endl;\n            if (i > 0) {\n                cnt[s[i - 1] - '0']--;\n            }\n            // cout << \"sj = \" <<  int(s[j]) << endl;\n            while (j < n && (cnt[s[j] - '0'] + 1 <= k || cnt[1 ^ (s[j]  - '0')] <= k)) {\n                cnt[s[j] - '0']++;\n                j++;\n            }\n            maxindex[i] = j - 1;\n            // cout << \"i = \" << i << \" j  = \" << j << \" c0 = \" << cnt[0] << \" c1 = \" << cnt[1] << endl;\n        }\n        // for (int i = 0; i < n; i++) {\n        //     cout << maxindex[i] << \" \";\n        // }\n        // cout << endl;\n        pref[0] = maxindex[0];\n        for (int i = 1; i < n; i++) {\n            pref[i] = pref[i - 1] + maxindex[i];\n        }\n\n        vector<long long> ans(queries.size(), 0);\n        for (int i = 0; i < queries.size(); i++) {\n            int ll = queries[i][0];\n            int rr = queries[i][1];\n            int lo = ll;\n            int hi = rr;\n            int res = -1;\n            while (lo <= hi) {\n                int mid = (lo + hi) / 2;\n                if (maxindex[mid] <= rr) {\n                    res = mid;\n                    lo = mid + 1; \n                } else {\n                    hi = mid - 1;\n                }\n            }\n            long long base = 1ll * (rr) * (rr + 1) / 2 - 1ll * ll * (ll - 1) / 2;\n            long long add = 0; \n            if (res != -1) {\n                if (ll == 0) {\n                    add += pref[res];\n                } else {\n                    add += pref[res] - pref[ll - 1];\n                }\n                add += 1ll * (rr - res) * (rr);\n            } else {\n                add += 1LL * rr * (rr - ll + 1);\n            }\n            // cout << \"ll = \" << ll << \" rr = \" << rr << endl;\n            // cout << \"add = \" << add << \" base = \" << base << endl;\n            ans[i] = add - base + (rr - ll + 1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723952637",
    "subm_id": "1359800987"
}