{
    "username": "AyuAnchor",
    "submission": "class SparseTable:\n    def __init__(self, a, default, func):\n        n = len(a)\n        self.sz = n+1\n        self.func = func\n        self.default = default\n\n        self.lg = [0]*self.sz\n        for i in range(2, self.sz):\n            self.lg[i] = self.lg[i>>1] + 1\n\n        self.st = [[self.default]*self.sz for _ in range(self.lg[n]+1)]\n        for i in range(n):\n            self.st[0][i+1] = a[i]\n        for i in range(1, self.lg[n]+1):\n            for j in range(1<<i, self.sz):\n                self.st[i][j] = self.func(self.st[i-1][j], self.st[i-1][j-(1<<i-1)])\n\n    def query(self, l, r):\n        i = self.lg[r-l+1]\n        return self.func(self.st[i][l-1+(1<<i)], self.st[i][r])\n\nclass Solution:\n    def countSubarrays(self, a: List[int], k: int) -> int:\n        MAX = (1<<32)-1\n        st = SparseTable(a, MAX, lambda x, y: x & y)\n        n = len(a)\n\n        ans = 0\n        for i in range(n):\n            l, r = i, n-1\n            res = -1\n            while l <= r:\n                mid = l + r >> 1\n                val = st.query(i+1, mid+1)\n                if val >= k:\n                    if val == k: res = mid\n                    l = mid + 1\n                else:\n                    r = mid - 1\n            \n            res2 = -1\n            l, r = i, n-1\n            while l <= r:\n                mid = l + r >> 1\n                val = st.query(i+1, mid+1)\n                if val <= k:\n                    r = mid - 1\n                    res2 = mid\n                else:\n                    l = mid + 1\n\n            if res != -1:\n                ans += res - res2 + 1\n            \n        return ans",
    "submit_ts": "1720279193",
    "subm_id": "1311741409"
}