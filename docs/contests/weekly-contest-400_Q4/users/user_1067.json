{
    "username": "cy171",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        bit = 35\n        def add(val, l, r):\n            nonlocal curr\n            count = r - l + 1\n            for i in range(bit):\n                if val & (1<<i):\n                    c[i] += 1\n            curr = 0\n            for i in range(bit):\n                if c[i] == count:\n                    curr += (1<<i)\n\n        def remove(val, l, r):\n            nonlocal curr\n            count = r - l - 1\n            for i in range(bit):\n                if val & (1<<i):\n                    c[i] -= 1\n            curr = 0\n            if l != r:\n                for i in range(bit):\n                    if c[i] == count:\n                        curr += (1<<i)\n\n        \n        r = 0\n        ans = float(\"inf\")\n        c = Counter()\n        curr = 0\n        for l, num in enumerate(nums):\n            if  l == r:\n                add(nums[l], l, r)\n                r += 1\n            # print(curr,k, l, r)\n            ans = min(ans, abs(curr -k))\n            while curr >= k and r < len(nums):\n                if curr == k:\n                    return 0\n                add(nums[r], l, r)\n                # print(curr,k, l, r)\n                r += 1\n                ans = min(ans, abs(curr -k))\n            remove(nums[l], l, r)\n            if r > l+1:\n                # print(curr,k)\n                ans = min(ans, abs(curr -k))\n        return ans\n\n",
    "submit_ts": "1717300435",
    "subm_id": "1274844067"
}