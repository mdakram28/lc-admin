{
    "username": "animeshnath",
    "submission": "class Solution {\n  public int minimumDifference(int[] nums, int k) {\n    SegmentTree tree = new SegmentTree(nums);\n    int ans = Integer.MAX_VALUE;\n    for (int i = 0; i < nums.length; i++) {\n      int l = i - 1;\n      int r = nums.length - 1;\n      while (r - l > 1) {\n        int mid = (l + r) / 2;\n        if (tree.query(i, mid) >= k) {\n          l = mid;\n        } else {\n          r = mid;\n        }\n      }\n      if (l != i - 1) {\n        ans = Math.min(ans, Math.abs(tree.query(i, l) - k));\n      }\n      ans = Math.min(ans, Math.abs(tree.query(i, r) - k));\n    }\n    \n    return ans;  \n  }\n  \n  private static class SegmentTree {\n    int[] tree;\n    int n;\n    \n    private SegmentTree(int[] arr) {\n      n = arr.length;\n      tree = new int[4 * n];\n      build(arr, 0, 0, n - 1);\n    }\n    \n    private void build(int[] arr, int node, int l, int r) {\n      if (l == r) {\n        tree[node] = arr[l];\n        return;\n      }\n      \n      int mid = (l + r) / 2;\n      build(arr, 2 * node + 1, l, mid);\n      build(arr, 2 * node + 2, mid + 1, r);\n      tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n    }\n    \n    private int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n    \n    private int query(int node, int start, int end, int l, int r) {\n      if (r < start || end < l) return Integer.MAX_VALUE;\n      if (l <= start && end <= r) return tree[node];\n      int mid = (start + end) / 2;\n      int p1 = query(2 * node + 1, start, mid, l, r);\n      int p2 = query(2 * node + 2, mid + 1, end, l, r);\n      return p1 & p2;\n    }\n  }\n}",
    "submit_ts": 1717299572.0
}