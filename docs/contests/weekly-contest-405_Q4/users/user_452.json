{
    "username": "saksham190804",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndices;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back(index);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // cost to form an empty string is 0\n\n        // Build the trie\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i);\n        }\n\n        // Fill the DP array\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // skip unreachable positions\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                for (int index : node->wordIndices) {\n                    int len = words[index].length();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + costs[index]);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321057",
    "subm_id": "1312312273"
}