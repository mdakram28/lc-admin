{
    "username": "ShashGod",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& array, int targetValue) {\n        int n = array.size();\n        long long count = 0;\n        unordered_map<long long, long long> previousMap;\n        \n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currentMap;\n            initializeAndCheck(array, i, targetValue, count, currentMap);\n            processPreviousResults(array, i, targetValue, previousMap, currentMap, count);\n            previousMap = currentMap;\n        }\n        \n        return count;\n    }\n\nprivate:\n    void initializeAndCheck(const vector<int>& array, int i, int targetValue, long long& count, unordered_map<long long, long long>& currentMap) {\n        if (array[i] == targetValue) {\n            ++count;\n        }\n        currentMap[array[i]] = 1;\n    }\n\n    void processPreviousResults(const vector<int>& array, int i, int targetValue, const unordered_map<long long, long long>& previousMap, unordered_map<long long, long long>& currentMap, long long& count) {\n        for (const auto& entry : previousMap) {\n            long long prevValue = entry.first;\n            long long prevFreq = entry.second;\n            long long currentAndResult = prevValue & array[i];\n            if (currentAndResult == targetValue) {\n                count += prevFreq;\n            }\n            currentMap[currentAndResult] += prevFreq;\n        }\n    }\n};\n",
    "submit_ts": "1720281292",
    "subm_id": "1311819842"
}