{
    "username": "shrea231",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n#include <algorithm>\n\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordEnds;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n\n    void insertWord(const string& word, int index, int cost) {\n        TrieNode* currentNode = root;\n        for (char c : word) {\n            if (!currentNode->children.count(c))\n                currentNode->children[c] = new TrieNode();\n            currentNode = currentNode->children[c];\n        }\n        currentNode->wordEnds.push_back({index, cost});\n    }\n};\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void buildTree(int node, int start, int end, const vector<int>& dp) {\n        if (start == end) {\n            tree[node] = dp[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(2 * node + 1, start, mid, dp);\n            buildTree(2 * node + 2, mid + 1, end, dp);\n            tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    void updateTree(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateTree(2 * node + 1, start, mid, idx, value);\n            } else {\n                updateTree(2 * node + 2, mid + 1, end, idx, value);\n            }\n            tree[node] = min(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n\n    int queryTree(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = queryTree(2 * node + 1, start, mid, l, r);\n        int rightQuery = queryTree(2 * node + 2, mid + 1, end, l, r);\n        return min(leftQuery, rightQuery);\n    }\n\npublic:\n    SegmentTree(int size) : n(size) {\n        tree.resize(4 * size, INT_MAX);\n    }\n\n    void build(const vector<int>& dp) {\n        buildTree(0, 0, n - 1, dp);\n    }\n\n    void update(int idx, int value) {\n        updateTree(0, 0, n - 1, idx, value);\n    }\n\n    int query(int l, int r) {\n        return queryTree(0, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insertWord(words[i], i, costs[i]);\n        }\n\n        SegmentTree segmentTree(targetLength + 1);\n        segmentTree.build(dp);\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* currentNode = trie.root;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->children.count(target[j])) break;\n                currentNode = currentNode->children[target[j]];\n\n                for (const auto& wordEnd : currentNode->wordEnds) {\n                    int wordIndex = wordEnd.first;\n                    int wordCost = wordEnd.second;\n                    int wordLength = words[wordIndex].size();\n                    if (i + wordLength <= targetLength) {\n                        int newCost = dp[i] + wordCost;\n                        if (newCost < dp[i + wordLength]) {\n                            dp[i + wordLength] = newCost;\n                            segmentTree.update(i + wordLength, newCost);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n",
    "submit_ts": "1720323529",
    "subm_id": "1312377799"
}