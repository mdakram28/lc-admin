{
    "username": "Parthiv_patel015",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        Seg st = new Seg(nums);\n        List<Integer>list= new ArrayList<>();\n        for(int[] q:queries){\n            if(q[0]==1){\n                list.add(st.query(q[1],q[2]));\n            }else{\n                st.update(q[1],q[2]);\n            }\n        }\n        return list;\n    }\n}\nclass Seg {\n    private int[] arr;\n    private int[] tree;\n    private int n;\n    public Seg(int[] arr) {\n        this.arr = arr;\n        this.n = arr.length;\n        this.tree = new int[4*n];\n        build(0, 0, n - 1);\n    }\n    private boolean isPeak(int i) {\n        if (i==0||i==arr.length-1){return false;}\n        return arr[i-1]<arr[i]&&arr[i]>arr[i+1];\n    }\n    private void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end)/2;\n            build(2*node+1,start,mid);\n            build(2*node+2,mid+1,end);\n            tree[node] = tree[2*node+1] + tree[2*node+2];\n        }\n    }\n    public void update(int idx, int val) {\n        update(0, 0, n - 1, idx, val);\n        if(idx>0){\n            update(0,0,n-1,idx-1,arr[idx-1]);\n        }\n        if(idx<n-1){\n            update(0,0,n-1,idx+1,arr[idx+1]);\n        }\n    }\n    private void update(int curr, int s, int e, int idx, int val) {\n        if (s==e) {\n            arr[idx] = val;\n            tree[curr] = isPeak(s) ? 1 : 0;\n        } else {\n            int mid = (s+e)/2;\n            if (s<=idx && idx<=mid) {\n                update(2*curr+1,s,mid,idx,val);\n            } else {\n                update(2*curr+2,mid+1,e,idx,val);\n            }\n            tree[curr] = tree[2*curr+1]+tree[2*curr+2];\n        }\n    }\n    public int query(int l, int r) {\n        int ans =  query(0, 0, n - 1, l, r);\n        if(isPeak(l) && ans>0){\n            ans--;\n        }\n        if(isPeak(r) && ans>0){\n            ans--;\n        }\n        return ans;\n    }\n    private int query(int node, int s, int e, int l, int r) {\n        if(r<s||e<l){\n            return 0;\n        }\n        if(l<=s && e<=r){\n            return tree[node];\n        }\n        int mid = (s+e)/2;\n        int left = query(2*node+1,s,mid,l,r);\n        int right = query(2*node+2,mid+1,e,l,r);\n        return left + right;\n    }\n}",
    "submit_ts": "1718508578",
    "subm_id": "1289685293"
}