{
    "username": "non_deterministic",
    "submission": "\n#define lld long long\n#define rep(i,a,n) for(lld i = (a); i <= (n); ++i)\n#define repI(i,a,n) for(int i = (a); i <= (n); ++i)\n#define repD(i,a,n) for(lld i = (a); i >= (n); --i)\n#define repDI(i,a,n) for(int i = (a); i >= (n); --i)\n#define all(c) (c).begin(), (c).end()\n#define sz(a) ((int)a.size())\n\n#define Error(x...) { cout << \"(\" << #x << \")\" << \" = ( \"; printIt(x); }\ntemplate <typename T1> void printIt(T1 t1) { cout << t1 << \" )\" << endl; }\ntemplate <typename T1, typename... T2>\nvoid printIt(T1 t1, T2... t2) { cout << t1 << \" , \"; printIt(t2...); }\n#define errorpair(a) cout<<#a<<\" = ( \"<<((a).first)<<\" , \"<<((a).second)<<\" )\\n\";\n\nint dp[5005][55];\nunordered_map<int, int> MxForThis[55];\nint MxVal[55];\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        repI(i, 0, k) {\n            MxVal[i] = 0;\n            MxForThis[i].clear();\n        }\n        int ans = 0;\n        repI(i, 0, n - 1) {\n            repDI(j, k, 0) {\n                dp[i][j] = 1;\n                int mx = 0;\n                if(MxForThis[j].find(nums[i]) != MxForThis[j].end()) {\n                    mx = MxForThis[j][nums[i]];\n                }\n                dp[i][j] = 1 + mx;\n\n                if(j > 0) {\n                    dp[i][j] = max(dp[i][j], 1 + MxVal[j - 1]);\n                }\n\n                MxVal[j] = max(MxVal[j], dp[i][j]);\n                MxForThis[j][nums[i]] = max(MxForThis[j][nums[i]], dp[i][j]);\n                ans = max(ans, dp[i][j]);\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": 1717859783.0
}