{
    "username": "jam930725",
    "submission": "class Solution {\n    int[] d;\n    int[] lazy;\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        d = new int[n << 2];\n        lazy = new int[n << 2];\n        build(0, n-1, 1);\n        int q = queries.length;\n        int[] ans = new int[q];\n        for(int i = 0; i < q; i++) {\n            update(queries[i][0]+1, queries[i][1]-1, 0, n-1, 1);\n            ans[i] = getsum(1, n-1, 0, n-1, 1);\n        }\n        return ans;\n    }\n\n    public void build(int s, int t, int p) {\n        if (s == t) {\n            d[p] = 1;\n            return;\n        }\n        int m = s + ((t - s) >> 1);\n        build(s, m, p * 2);\n        build(m + 1, t, p * 2 + 1);\n        d[p] = d[p * 2] + d[(p * 2) + 1];\n    }\n\n    public int getsum(int l, int r, int s, int t, int p) {\n        if (l <= s && t <= r)\n            return d[p];\n        int m = s + ((t - s) >> 1), sum = 0;\n        maintain(s, t, p);\n        if (l <= m) sum += getsum(l, r, s, m, p * 2);\n        if (r > m) sum += getsum(l, r, m + 1, t, p * 2 + 1);\n        return sum;\n    }\n\n    public void update(int l, int r, int cl, int cr, int p) {\n        if (l <= cl && cr <= r) {\n            lazy[p] = -1;\n            d[p] = 0;\n            return;\n        }\n        int m = cl + (cr - cl) / 2;\n        maintain(cl, cr, p);\n        if (l <= m) \n            update(l, r, cl, m, p * 2);\n        if (r > m) \n            update(l, r, m + 1, cr, p * 2 + 1);\n        d[p] = d[p * 2] + d[p * 2 + 1];\n    }\n    public void maintain(int cl, int cr, int p) {\n        int cm = cl + (cr - cl) / 2;\n        if (cl != cr && lazy[p] == -1) {\n            lazy[p * 2] = -1;\n            lazy[p * 2 + 1] = -1;\n            d[p * 2] = 0;\n            d[p * 2 + 1] = 0;\n            lazy[p] = 0;\n        }\n    }\n}",
    "submit_ts": "1722741710",
    "subm_id": "1343751600"
}