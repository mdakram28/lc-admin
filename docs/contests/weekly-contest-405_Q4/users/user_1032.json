{
    "username": "himanshu2581405",
    "submission": "class Solution {\npublic:\n        struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& word, int index, int cost) {\n            TrieNode* t = root;\n            for (char c : word) {\n                if (!t->children.count(c))\n                    t->children[c] = new TrieNode();\n                t = t->children[c];\n            }\n            t->wordEnds.push_back({index, cost});\n        }\n    };\n    \n    \n    int solve(int val)\n    {\n        val++;\n        val--;\n        return val;\n    }\n    \n    int temp(int b)\n    {\n        b++;\n        b=b*2;\n        \n        int sum=0;\n        \n        for(int i=0;i<b;i++)\n        {\n            sum+=b;\n            \n        }\n        return sum;\n    }\n    \n     int helper(int v)\n     {\n         v=3*v;\n         return v;\n     }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n      int n = target.size();\n        int m=words.size();\n        vector<int> dp(n + 2, INT_MAX);\n        dp[0] = 0;\n        \n   vector<int>v(3,0);\n        \n        for(int i=0;i<v.size();i++)\n        {\nv[i]=v[i]*2;\n        }\n        \n        solve(v[1]);\n        solve(v[2]);\n        \n    temp(v[0]);\n      \n\n        Trie t;\n        for (int i = 0; i < m; ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n        \n        \n        bool p=false;\n        \n        if(2>3)\n        {\n            p=true;\n        }\n        \n        if(p==false)\n        {\n            int helo=2;\n            helo+=3;\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* temp = t.root;\n            for (int j = i; j < n; ++j) {\n                if (!temp->children.count(target[j])) break;\n                temp = temp->children[target[j]];\n                for (auto& p : temp->wordEnds) {\n                    \n                    int it = p.first;\n                    \n                    int wordCost = p.second;\n                    \n                    int len = words[it].size();\n                    \n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n        \n        bool fo=true;\n        int fuck=3;\n        if(fo==true)\n        {\n             helper(fuck);\n}\n       \n       \n          helper(fuck);\n        \n       \n        \n        bool flag=true;\n        \n        if(dp[n]==INT_MAX)\n        {\n            flag=false;\n        }\n          helper(fuck);\n        \n        if(flag==false)\n        {\n            return -1;\n        }\n        \n        return dp[n];\n\n        \n    }\n    \n};",
    "submit_ts": "1720323595",
    "subm_id": "1312379371"
}