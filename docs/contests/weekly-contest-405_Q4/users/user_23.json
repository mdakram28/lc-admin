{
    "username": "aayushsoni424",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\nprivate:\n    TrieNode* root;\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new TrieNode();\n        int n = target.length();\n        \n        // Build trie\n        for (int i = 0; i < words.size(); i++) {\n            insert(words[i], costs[i]);\n        }\n        \n        // DP array to store minimum cost for each prefix\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Iterate through target string\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320505",
    "subm_id": "1312296266"
}