{
    "username": "DCXiaoBing",
    "submission": "class Solution {\n  // greedy?\n  // compute a diff array\n  \n  // lazy increase or decrease?\n  // \n  public long minimumOperations(int[] nums, int[] target) {\n    int n = nums.length;\n    \n    int[] diff = new int[n];\n    for (int i = 0; i < n; i++) diff[i] = nums[i] - target[i];\n    \n    long res = 0;\n    int pre = 0;\n    for (int i = 0; i < n; i++) {\n      // discard all previous subarry change\n      if (1L * pre * diff[i] < 0 || diff[i] == 0) pre = 0;\n      \n      if (diff[i] < 0) {\n        int ops = Math.max(0, pre - diff[i]);\n        pre = diff[i];\n        res += ops;\n        // System.out.println(i + \": \" + ops + \" \" + pre);\n      } else {\n        int ops = Math.max(0, diff[i] - pre);\n        pre = diff[i];\n        res += ops;\n      // System.out.println(i + \": \" + ops + \" \" + pre);\n      }\n    }\n    return res;\n  }\n}",
    "submit_ts": "1721530707",
    "subm_id": "1327941504"
}