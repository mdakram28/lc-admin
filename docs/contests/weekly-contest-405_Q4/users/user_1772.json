{
    "username": "arunikabhattacharya22",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, unique_ptr<TrieNode>> children;\n    int minCost = INT_MAX;\n\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode root;\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = &root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = make_unique<TrieNode>();\n            }\n            node = node->children[ch].get();\n        }\n        node->minCost = min(node->minCost, cost); // Update minimum cost at this node\n    }\n\n    int findMinimumCost(const string& target) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); // dp array to store minimum cost\n        dp[0] = 0; // Base case: no cost to form an empty string\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip if this position is not reachable\n            TrieNode* node = &root;\n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                if (!node->children.count(ch)) break;\n                node = node->children[ch].get();\n                if (node->minCost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        return trie.findMinimumCost(target);\n    }\n};",
    "submit_ts": "1720322643",
    "subm_id": "1312355329"
}