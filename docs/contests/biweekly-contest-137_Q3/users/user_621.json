{
    "username": "ADITYA RAUT",
    "submission": "class Solution {\n    vector<int> max1, max2, max3;\n    int find_max(vector<int> & nums){\n        int maxi = 0;\n        for(int i = 1 ; i < nums.size() ; i++){\n            if(nums[i] > nums[maxi])\n                maxi = i;\n        }\n        return maxi;\n    }\n    int find_max2(vector<int> & nums, int maxi){\n        int maxi2 = 0;\n        if(maxi == maxi2)maxi2++;\n        for(int i = 0 ; i < nums.size() ; i++){\n            if(i == maxi)continue;\n            if(nums[i] > nums[maxi2])\n                maxi2 = i;\n        }\n        return maxi2;\n    }\n    int find_max3(vector<int> & nums, int maxi1, int maxi2){\n        int maxi = 0;\n        if(maxi == maxi1 || maxi == maxi2)\n            maxi++;\n        if(maxi == maxi1 || maxi == maxi2)\n            maxi++;\n        for(int i = 0 ; i < nums.size() ; i++){\n            if(i == maxi1 || i == maxi2)continue;\n            if(nums[i] > nums[maxi])\n                maxi = i;\n        }\n        return maxi;\n    }\npublic:\n    long long solve(int i, vector<vector<int>>& board, int rooks, vector<int>& colVis){\n        if(rooks == 0)return 0;\n        if(i == board.size())return LLONG_MIN;\n\n        //include\n        long long include1 = LLONG_MIN, include2 = LLONG_MIN, include3= LLONG_MIN;\n        if(colVis[max1[i]] == false){\n            colVis[max1[i]] = true;\n            include1 = solve(i+1, board, rooks-1, colVis);\n            if(include1 != LLONG_MIN)include1 += board[i][max1[i]];\n            colVis[max1[i]] = false;\n        }\n        if(colVis[max2[i]] == false){\n            colVis[max2[i]] = true;\n            include2 = solve(i+1, board, rooks-1, colVis);\n            if(include2 != LLONG_MIN)include2 += board[i][max2[i]];\n            colVis[max2[i]] = false;\n        }\n        if(colVis[max3[i]] == false){\n            colVis[max3[i]] = true;\n            include3 = solve(i+1, board, rooks-1, colVis);\n            if(include3 != LLONG_MIN)include3 += board[i][max3[i]];\n            colVis[max3[i]] = false;\n        }\n        //exclude\n        long long exclude = solve(i+1, board, rooks, colVis);\n\n        return max(include1, max(include2, max(include3, exclude)));\n\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int rows = board.size();\n        int cols = board[0].size();\n        max1.resize(0);max1.resize(rows);\n        max2.resize(0);max2.resize(rows);\n        max3.resize(0);max3.resize(rows);\n        \n        for(int i = 0 ; i < rows ; i++){\n            max1[i] = find_max(board[i]);\n            max2[i] = find_max2(board[i], max1[i]);\n            max3[i] = find_max3(board[i], max1[i], max2[i]);\n            // cout<<max1[i]<<\" , \"<<max2[i]<<\" , \"<<max3[i]<<endl;\n        }\n        \n        // vector<int> rowVis(rows, false);\n        vector<int> colVis(cols, false);\n        return solve(0, board, 3, colVis);\n    }\n};",
    "submit_ts": "1723909294",
    "subm_id": "1359187094"
}