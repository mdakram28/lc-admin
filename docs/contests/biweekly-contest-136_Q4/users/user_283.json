{
    "username": "timetoai",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        g = defaultdict(list)\n        n = len(edges) + 1\n        for u, v in edges:\n            g[u].append(v)\n            g[v].append(u)\n            \n        \n        height = [0 for _ in range(n)]\n        dist = [0 for _ in range(n)]\n        \n        # Function to calculate height of\n        # each Node\n        def dfs1(cur, par):\n\n            # Iterate in the adjacency\n            # list of the current node\n            for u in g[cur]:\n                if (u != par):\n\n                    # Dfs for child node\n                    dfs1(u, cur)\n\n                    # Calculate height of nodes\n                    height[cur] = max(height[cur],\n                                      height[u])\n\n            # Increase height\n            height[cur] += 1 + int(cur % 2 == 0)\n\n        # Function to calculate the maximum\n        # distance of a node from its ancestor\n        def dfs2(cur, par):\n\n            max1 = 0\n            max2 = 0\n\n            # Iterate in the adjacency\n            # list of the current node\n            for u in g[cur]:\n                if (u != par):\n\n                    # Find two children\n                    # with maximum heights\n                    if (height[u] >= max1):\n                        max2 = max1\n                        max1 = height[u]\n\n                    elif (height[u] > max2):\n                        max2 = height[u]\n\n            for u in g[cur]:\n                if (u != par):\n\n                    # Calculate the maximum distance\n                    # with ancestor for every node\n\n                    if (max1 == height[u]):\n                        dist[u] = 1 + max(1 + max2, dist[cur]) + int(cur % 2 == 0)\n                    else:\n                        dist[u] = 1 + max(1 + max1, dist[cur]) + int(cur % 2 == 0)\n\n                    # Calculating for children\n                    dfs2(u, cur)\n                    \n        dfs1(0, None)\n        dfs2(0, None)\n        # print(dist[:n])\n        # print(height[:n])\n        return [max(dist[i], height[i] - int(i % 2 == 0)) - 1 for i in range(n)]\n",
    "submit_ts": "1722699919",
    "subm_id": "1343226252"
}