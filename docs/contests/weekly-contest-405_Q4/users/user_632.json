{
    "username": "2VFs6kcCfU",
    "submission": "\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*>ch;\n    vector<pair<int, int>>we;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void ins(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->ch.count(c)) {\n                node->ch[c] = new TrieNode();\n            }\n            node = node->ch[c];\n        }\n        node->we.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int>dp(n + 1,INT_MAX);\n        dp[0]=0;\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) \n            trie.ins(words[i], i, costs[i]);\n        for (int i = 0; i < n; ++i) {\n            if (dp[i]==INT_MAX) \n                continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->ch.count(target[j])) {\n                    break;\n                }\n                node = node->ch[target[j]];\n                for (auto& p : node->we) {\n                    int l = words[p.first].size();\n                    if (i + l <= n) \n                        dp[i + l] = min(dp[i + l],dp[i]+p.second);\n                }\n            }\n        }\n   if(dp[n]==INT_MAX)return -1;\n        return dp[n];\n        \n    }\n\n};",
    "submit_ts": "1720322878",
    "subm_id": "1312361463"
}