{
    "username": "silenceneoneo",
    "submission": "using ll = long long;\nconst int maxn = 100'005;\nconst ll inf = 0x3f3f3f3f3f3f3f3fLL;\nconst ll maxi = -inf;\nconst ll mini = inf;\nstruct bit {\n    #ifndef QUERY_SUM\n    #define QUERY_SUM\n    #endif\n//     #ifndef QUERY_MAX\n//     #define QUERY_MAX\n//     #endif\n//     #ifndef QUERY_MIN\n//     #define QUERY_MIN\n//     #endif\n    ll p[maxn], a[maxn];\n    int n;\n\n    void init(int n) {\n        this->n = n;\n        for (int i = 1; i <= n; ++i)\n            p[i] = a[i] = 0;\n    }\n\n    int lowbit(int x) {\n        return x & (-x);\n    }\n\n    void update(int x, ll val) {\n        a[x] += val;\n        #ifdef QUERY_SUM\n        while (x <= n) {\n            p[x] += val;\n            x += lowbit(x);\n        }\n        #endif\n        #ifdef QUERY_MAX\n        while (x <= n) {\n            // \u679a\u4e3e\u53d7\u5f71\u54cd\u7684\u533a\u95f4\n            p[x] = a[x];\n            for (int i = 1, lim = lowbit(x); i < lim; i <<= 1)\n                p[x] = max(p[x], p[x - i]);\n            x += lowbit(x);\n        }\n        #endif\n        #ifdef QUERY_MIN\n        while (x <= n) {\n            // \u679a\u4e3e\u53d7\u5f71\u54cd\u7684\u533a\u95f4\n            p[x] = a[x];\n            for (int i = 1, lim = lowbit(x); i < lim; i <<= 1)\n                p[x] = min(p[x], p[x - i]);\n            x += lowbit(x);\n        }\n        #endif\n    }\n\n    ll sum(int x) {\n        ll ans = 0;\n        while (x > 0) {\n            ans += p[x];\n            x -= lowbit(x);\n        }\n        return ans;\n    }\n\n    ll query(int l, int r) {\n        ll ans;\n        #ifdef QUERY_SUM\n        ans = sum(r) - sum(l - 1);\n        #endif\n        #ifdef QUERY_MAX\n        ans = maxi;\n        while (r >= l) {\n            ans = max(ans, a[r]);\n            --r;\n            while (r - lowbit(r) >= l) {\n                // \u6ce8\u610f\uff0c\u5faa\u73af\u6761\u4ef6\u4e0d\u8981\u5199\u6210 r - lowbit(r) + 1 >= l\n                // \u5426\u5219 l = 1 \u65f6\uff0cr \u8df3\u5230 0 \u4f1a\u6b7b\u5faa\u73af\n                ans = max(ans, p[r]);\n                r -= lowbit(r);\n            }\n        }\n        #endif\n        #ifdef QUERY_MIN\n        ans = mini;\n        while (r >= l) {\n            ans = min(ans, a[r]);\n            --r;\n            while (r - lowbit(r) >= l) {\n                // \u6ce8\u610f\uff0c\u5faa\u73af\u6761\u4ef6\u4e0d\u8981\u5199\u6210 r - lowbit(r) + 1 >= l\n                // \u5426\u5219 l = 1 \u65f6\uff0cr \u8df3\u5230 0 \u4f1a\u6b7b\u5faa\u73af\n                ans = min(ans, p[r]);\n                r -= lowbit(r);\n            }\n        }\n        #endif\n        return ans;\n    }\n} b;\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        b.init(n);\n        for (int i = 1; i < n - 1; ++i)\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1])\n                b.update(i + 1, 1);\n        vector<int> ans;\n        for (auto& q : queries) {\n            if (q[0] == 2) {\n                nums[q[1]] = q[2];\n                if (q[1] >= 1 && q[1] < n - 1) {\n                    int cur = b.query(q[1] + 1, q[1] + 1);\n                    b.update(q[1] + 1, -cur);\n                    if (nums[q[1]] > nums[q[1] - 1] && nums[q[1]] > nums[q[1] + 1])\n                        b.update(q[1] + 1, 1);\n                }\n                if (q[1] - 1 >= 1 && q[1] - 1 < n - 1) {\n                    int cur = b.query(q[1] - 1 + 1, q[1] - 1 + 1);\n                    b.update(q[1] - 1 + 1, -cur);\n                    if (nums[q[1] - 1] > nums[q[1] - 1 - 1] && nums[q[1] - 1] > nums[q[1] - 1 + 1])\n                        b.update(q[1] - 1 + 1, 1);\n                }\n                if (q[1] + 1 >= 1 && q[1] + 1 < n - 1) {\n                    int cur = b.query(q[1] + 1 + 1, q[1] + 1 + 1);\n                    b.update(q[1] + 1 + 1, -cur);\n                    if (nums[q[1] + 1] > nums[q[1] + 1 - 1] && nums[q[1] + 1] > nums[q[1] + 1 + 1])\n                        b.update(q[1] + 1 + 1, 1);\n                }\n            } else {\n                int sum;\n                if (q[2] - q[1] + 1 < 3)\n                    sum = 0;\n                else {\n                    sum = b.query(q[1] + 1, q[2] + 1);\n                    // cout << \"sum:\" << sum << '\\n';\n                    sum -= b.query(q[1] + 1, q[1] + 1);\n                    sum -= b.query(q[2] + 1, q[2] + 1);\n                }\n                ans.push_back(sum);\n            }\n        }\n        // cout << '\\n';\n        return ans;\n    }\n};",
    "submit_ts": "1718507957",
    "subm_id": "539784466"
}