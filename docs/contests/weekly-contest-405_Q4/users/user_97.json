{
    "username": "fightclub07",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<TrieNode*> children;\n        int wordCost = -1;\n\n        TrieNode() : children(26, nullptr) {}\n    };\n\n    void addWord(TrieNode* root, const string& word, int cost) {\n        TrieNode* current = root;\n        for (char ch : word) {\n            if (!current->children[ch - 'a']) {\n                current->children[ch - 'a'] = new TrieNode();\n            }\n            current = current->children[ch - 'a'];\n        }\n        if (current->wordCost == -1 || current->wordCost > cost) {\n            current->wordCost = cost;\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        int n = target.length();\n        int m = words.size();\n        \n        for (int i = 0; i < m; ++i) {\n            addWord(root, words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, numeric_limits<int>::max());\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == numeric_limits<int>::max()) continue;\n            TrieNode* current = root;\n            for (int j = i; j < n; ++j) {\n                char ch = target[j];\n                current = current->children[ch - 'a'];\n                if (!current) break; \n                if (current->wordCost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + current->wordCost);\n                }\n            }\n        }\n\n        return dp[n] == numeric_limits<int>::max() ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321324",
    "subm_id": "1312319789"
}