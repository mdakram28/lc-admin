{
    "username": "tanishag111",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        long maxSum = Long.MIN_VALUE;\n\n        // Precompute the top 3 values for each row and their corresponding columns\n        int[][] top3ColsForRows = new int[m][3];\n        long[][] top3ValuesForRows = new long[m][3];\n\n        for (int i = 0; i < m; i++) {\n            long[] maxValues = new long[]{Long.MIN_VALUE, Long.MIN_VALUE, Long.MIN_VALUE};\n            int[] bestCols = new int[]{-1, -1, -1};\n\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < 3; k++) {\n                    if (board[i][j] > maxValues[k]) {\n                        // Shift the previous values and indices down\n                        for (int l = 2; l > k; l--) {\n                            maxValues[l] = maxValues[l - 1];\n                            bestCols[l] = bestCols[l - 1];\n                        }\n                        maxValues[k] = board[i][j];\n                        bestCols[k] = j;\n                        break;\n                    }\n                }\n            }\n            top3ValuesForRows[i] = maxValues;\n            top3ColsForRows[i] = bestCols;\n        }\n\n        // Check all combinations of 3 different rows\n        for (int r1 = 0; r1 < m - 2; r1++) {\n            for (int r2 = r1 + 1; r2 < m - 1; r2++) {\n                for (int r3 = r2 + 1; r3 < m; r3++) {\n                    // Use the top 3 columns precomputed for each row\n                    for (int i = 0; i < 3; i++) {\n                        for (int j = 0; j < 3; j++) {\n                            for (int k = 0; k < 3; k++) {\n                                // Ensure columns are different\n                                if (top3ColsForRows[r1][i] != top3ColsForRows[r2][j] &&\n                                    top3ColsForRows[r1][i] != top3ColsForRows[r3][k] &&\n                                    top3ColsForRows[r2][j] != top3ColsForRows[r3][k]) {\n\n                                    long currentSum = top3ValuesForRows[r1][i] + top3ValuesForRows[r2][j] + top3ValuesForRows[r3][k];\n                                    maxSum = Math.max(maxSum, currentSum);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n        /*int m = board.length;\n        int n = board[0].length;\n        long maxSum = Long.MIN_VALUE;\n        for (int r1 = 0; r1 < m - 2; r1++) {\n            for (int r2 = r1 + 1; r2 < m - 1; r2++) {\n                for (int r3 = r2 + 1; r3 < m; r3++) {\n                    long[] maxCols = new long[n];\n                    Arrays.fill(maxCols, Long.MIN_VALUE);\n                    for (int c1 = 0; c1 < n; c1++) {\n                        for (int c2 = 0; c2 < n; c2++) {\n                            if (c1 == c2)\n                                continue;\n                            for (int c3 = 0; c3 < n; c3++) {\n                                if (c3 == c1 || c3 == c2)\n                                    continue;\n\n                                long currentSum = (long) board[r1][c1] + board[r2][c2] + board[r3][c3];\n                                maxCols[c1] = Math.max(maxCols[c1], currentSum);\n                            }\n                        }\n                    }\n                    for (int i = 0; i < n; i++) {\n                        maxSum = Math.max(maxSum, maxCols[i]);\n                    }\n                }\n            }\n        }\n\n        return maxSum;*/\n    }\n}",
    "submit_ts": "1723908831",
    "subm_id": "1359168934"
}