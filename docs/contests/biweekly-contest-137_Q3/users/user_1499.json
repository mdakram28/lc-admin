{
    "username": "\u6211\u4e0d\u60f3relocate\u53bb\u7231\u5c14\u5170",
    "submission": "import math\nfrom typing import List\nfrom functools import lru_cache\nfrom collections import deque, defaultdict, Counter\nfrom sortedcontainers import SortedList\nfrom bisect import bisect_left, bisect_right\nfrom itertools import combinations\n\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        \"\"\"\n\n        :param board:\n        :return:\n        \"\"\"\n        w = len(board[0])\n        h = len(board)\n        m1 = {}\n        global_big = SortedList(key=lambda x:-x[0])\n        for k,v in enumerate(board):\n            xx = []\n            for k2, v2 in enumerate(v):\n                xx.append((k2, v2))\n                if len(global_big) < 3 * max(w, h):\n                    global_big.add((v2, k, k2))\n                else:\n                    if v2 > global_big[-1][0]:\n                        global_big.add((v2, k, k2))\n                        global_big.pop()\n            xx.sort(key=lambda x: x[1], reverse=True)\n            m1[k] = xx[:3]\n\n        todo = [(i[1], i[2]) for i in global_big]\n        @lru_cache(None)\n        def get_max_score(idx, used_column:frozenset, used_row:frozenset):\n            if idx == len(todo):\n                if len(used_column) == 3:\n                    return 0\n                return -math.inf\n            if len(used_column) == 3:\n                return 0\n            if len(used_column) == 2:\n                for i in global_big:\n                    if i[1] in used_row:\n                        continue\n                    if i[2] in used_column:\n                        continue\n                    return i[0]\n\n\n            k, k2 = todo[idx]\n            if k in used_row or k2 in used_column:\n                return get_max_score(idx+1, used_column, used_row)\n            v1 = get_max_score(idx+1, used_column, used_row)\n            v2 = board[k][k2] + get_max_score(idx+1, used_column | {k2}, used_row | {k})\n            return max(v1, v2)\n\n        return get_max_score(0, frozenset(), frozenset())\n\n",
    "submit_ts": "1723910173",
    "subm_id": "556339933"
}