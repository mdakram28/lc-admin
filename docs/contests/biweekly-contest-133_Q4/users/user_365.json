{
    "username": "meetthehorizon",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n        int MOD = ((int)1e9) + 7;\n        vector<vector<int>> dp(n+1, vector<int> ((n * (n - 1)) / 2 + 1, -1));\n            \n        dp[0][0] = 1;\n        sort(req.begin(), req.end());\n        auto inv = [&](int n, int k, auto&& inv) {\n            if (dp[n][k] != -1) return dp[n][k];\n            \n            if (n == 0) return dp[n][k] = 0;\n            \n            auto itr = lower_bound(req.begin(), req.end(), (vector<int>) {n - 1, 0});\n            if ((itr != req.end()) && (*itr)[0] == (n - 1) && (*itr)[1] != k){\n                return dp[n][k] = 0;\n            }\n            \n            int j = 0, val = 0;\n            for (j = 0; j < n && k-j >= 0; j++)\n                val = (val + inv(n-1, k-j, inv)) % MOD; \n            return dp[n][k] = val;\n        };\n            \n        int ans = 0;\n        for (int i = 0; i < dp[0].size(); ++i) {\n            ans = (ans + inv(n, i, inv)) % MOD;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1719070037.0
}