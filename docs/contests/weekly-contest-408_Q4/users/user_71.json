{
    "username": "jwseph",
    "submission": "class DSU:\n    def __init__(self, n):\n        self.p = [-1]*n\n    def find(self, i):\n        if self.p[i] < 0: return i\n        self.p[i] = self.find(self.p[i])\n        return self.p[i]\n    def unite(self, i, j):\n        i, j = self.find(i), self.find(j)\n        if i == j: return False\n        if self.p[i] > self.p[j]: i, j = j, i\n        self.p[i] += self.p[j]\n        self.p[j] = i\n        return True\n    def size(self, i):\n        return -self.p[self.find(i)]\n    def sizes(self):\n        return [-s for s in self.p if s < 0]\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        # Either a circle touches both tl and br\n        # OR a chain can be formed from a circle that touches tl to br\n        dsu = DSU(len(circles))\n        def check_tl(c):  # x, y, r\n            x, y, r = c\n            return x-r <= 0 or y+r >= Y\n        def check_br(c):\n            x, y, r = c\n            return x+r >= X or y-r <= 0\n        def overlap(c, d):\n            dist = (c[0]-d[0])**2 + (c[1]-d[1])**2\n            return dist <= (c[2]+d[2])**2\n        n = len(circles)\n        tl = [False]*n\n        br = [False]*n\n        for i, c in enumerate(circles):\n            tl[i] = check_tl(c)\n            br[i] = check_br(c)\n            if tl[i] and br[i]: return False\n        for i, c in enumerate(circles):\n            for j, d in enumerate(circles):\n                if j <= i: continue\n                if not overlap(c, d): continue\n                i = dsu.find(i)\n                j = dsu.find(j)\n                tl[i] = tl[j] = tl[i] or tl[j]\n                br[i] = br[j] = br[i] or br[j]\n                dsu.unite(i, j)\n                if tl[i] and br[i]: return False\n        return True",
    "submit_ts": "1722137494",
    "subm_id": "1335765403"
}