{
    "username": "cogentcoder73",
    "submission": "class Solution {\npublic:\n    int diameter(vector<vector<int>>& edges, int n) {\n        vector<int> dists(n, -1);\n        \n        // for (int i = 0; i < n; i++) {\n        //     cout << dists[i] << \",\";\n        // }\n        // cout << \"\\n\";\n        \n        dists[0] = 0;\n        queue<int> q;\n        q.push(0);\n        int c;\n        while (!q.empty()) {\n            \n            c = q.front();\n            // cout << c << \" \";\n            q.pop();\n            for (int i : edges[c]) {\n                if (dists[i] == -1) {\n                    dists[i] = dists[c] + 1;\n                    q.push(i);\n                }\n            }\n            // for (int i = 0; i < n; i++) {\n            //     cout << dists[i] << \",\";\n            // }\n            // cout << \"\\n\";\n        }\n        // cout << \"\\n\";\n        int d = 0;\n        int maxD = 0;\n        for (int i = 0; i < n; i++) {\n            // cout << dists[i] << \",\";\n            if (dists[i] > maxD) {\n                maxD = dists[i];\n                d = i;\n            }\n        }\n        // cout << \"\\n\";\n        \n        q.push(d);\n        fill(dists.begin(), dists.end(), -1);\n        dists[d] = 0;\n        \n        while (!q.empty()) {\n            c = q.front();\n            q.pop();\n            for (int i : edges[c]) {\n                if (dists[i] == -1) {\n                    dists[i] = dists[c] + 1;\n                    q.push(i);\n                }\n            }\n        }\n        // for (int i = 0; i < n; i++) {\n        //     cout << dists[i] << \",\";\n        // }\n        // cout << \"\\n\";\n        return *max_element(dists.begin(), dists.end());\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> e1(n);\n        vector<vector<int>> e2(m);\n        for (int i = 0; i < n - 1; i++) {\n            e1[edges1[i][0]].push_back(edges1[i][1]);\n            e1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        for (int i = 0; i < m - 1; i++) {\n            e2[edges2[i][0]].push_back(edges2[i][1]);\n            e2[edges2[i][1]].push_back(edges2[i][0]);\n        }\n        int d1 = diameter(e1, n);\n        int d2 = diameter(e2, m);\n        cout << d1 << \" \" << d2 << \"\\n\";\n        return max(max(d1, d2), 1 + (d1 + 1)/2 + (d2 + 1)/2);\n    }\n};",
    "submit_ts": "1719719164",
    "subm_id": "1304435224"
}