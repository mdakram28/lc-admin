{
    "username": "user2994h",
    "submission": "class Solution {\n    \n    // grabbed from internet: \n    unsigned long long\n    choose(unsigned long long n, unsigned long long k) {\n    if (k > n) {\n        return 0;\n    }\n    unsigned long long r = 1;\n    for (unsigned long long d = 1; d <= k; ++d) {\n        r *= n--;\n        r /= d;\n    }\n    return r;\n}\npublic:\n    int waysToReachStair(int k) {\n        // consider making m jumps. \n        // then, as baseline, you get to 2^m - 1 as a *maximum*\n        // you have the option to get to 2^m-1 - (m + 1) as a *minimum*\n        // if \"k\" is between, then you put x slots in (m+1). this is a combinations problem:\n        // (m+1)!/(x!) (m+1-x)!\n        \n        // I did all of this assuming you start at stair 0, so here's my fix. \n        k--;\n        // ----\n        \n        int numWays = 0;\n        for (int nJumps = 0; nJumps <= 30; nJumps++) {\n            int maxVal = pow(2, nJumps) - 1;\n            int minVal = maxVal - (nJumps + 1);\n            if (minVal <= k && k <= maxVal) {\n                // it's possible, so let's continue!\n                int nSelect = maxVal - k;\n                int nSlots = nJumps + 1; \n                numWays += choose(nSlots, nSelect);\n            }\n        }\n        return numWays; \n    }\n};",
    "submit_ts": "1716088592",
    "subm_id": "1261818474"
}