{
    "username": "Crisp_",
    "submission": "#define x first\n#define y second\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\n\nconst int N = 35;\nint mp[N][N][N][N];\nclass Solution {\npublic:\n    int minimumArea(vector<vector<int>>& grid, int R0, int R1, int C0, int C1) {\n        int n = grid.size();\n        int m = grid[0].size();\n        if(mp[R0][R1][C0][C1] != -1) return mp[R0][R1][C0][C1];\n        int r0 = n, r1 = -1, c0 = m, c1 = -1;\n        for(int i = R0; i <= R1; i ++ ) {\n            for(int j = C0; j <= C1; j ++ ) {\n                if(grid[i][j] == 1) {\n                    r0 = min(r0, i);\n                    r1 = max(r1, i);\n                    c0 = min(c0, j);\n                    c1 = max(c1, j);\n                }\n            }\n        }\n        mp[R0][R1][C0][C1] = (r1 - r0 + 1)*(c1 - c0 + 1);\n        return (r1 - r0 + 1)*(c1 - c0 + 1);\n    }\n\n    int cnt(vector<vector<int>> &grid, int n, int m) {\n        int upS = 0;\n        int ans = n*m*3;\n        memset(mp, -1, sizeof mp);\n        for(int i = 0; i < n - 1; i ++ ) {\n            upS = minimumArea(grid, 0, i, 0, m - 1);\n            for(int j = 1; j <= m - 1; j ++ ) {\n                int downS = minimumArea(grid, i + 1, n - 1, 0, j - 1) +  minimumArea(grid, i + 1, n - 1, j, m - 1);\n                ans = min(ans, upS + downS);\n            }\n            for(int j = i + 1; j <= n - 1; j ++ ) {\n                int downS2 = minimumArea(grid, i + 1, j, 0, m - 1) + minimumArea(grid, j + 1, n - 1, 0, m - 1);\n                ans = min(ans, upS + downS2);\n            }\n        }\n        return ans;\n\n    }\n    vector<vector<int>> rot(vector<vector<int>> &grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        vector<vector<int>> ng;\n        ng.resize(m);\n        for(int i = 0; i < m; i ++ ) {\n            for(int j = n - 1; j >= 0; j -- ) {\n                ng[i].push_back(grid[j][i]);\n            }\n        }\n        return ng;\n    }\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = n*m*3;\n        ans = min(ans, cnt(grid, n, m));\n        grid = rot(grid);\n        swap(n, m);\n        ans = min(ans, cnt(grid, n, m));\n        grid = rot(grid);\n        swap(n, m);\n        ans = min(ans, cnt(grid, n, m));\n        grid = rot(grid);\n        swap(n, m);\n        ans = min(ans, cnt(grid, n, m));\n        // for(int i = 0; i < n; i ++ ) {\n        //     for(int j = 0; j < m; j ++ ) {\n        //         cout << grid[i][j] << ' ';\n        //     }\n        //     cout << endl;\n        // }\n        //ans = cnt(grid, n, m);\n        return ans;\n    }\n};",
    "submit_ts": "1719114378",
    "subm_id": "541401634"
}