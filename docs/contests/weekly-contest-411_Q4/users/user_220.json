{
    "username": "babinclaudiu",
    "submission": "# include <bits/stdc++.h>\n# define sz(x) (int)(x).size()\n# define mp make_pair\n# define pb push_back\n# define f first\n# define s second\n# define ll long long\n# define _ ios::sync_with_stdio(0);cin.tie(0);\n\nusing namespace std;\n\ntypedef pair<int, int> pint;\ntypedef vector<int> vint;\n\nclass SegmentTree {\n    private:\n        vector<long long> tree;\n        int n;\n\n        void build(vector<long long>& arr, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = arr[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(arr, 2 * node + 1, start, mid);\n                build(arr, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        long long query(int node, int start, int end, int left, int right) {\n            if (left > end || right < start) {\n                return 0;\n            }\n            if (left <= start && right >= end) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            long long sumLeft = query(2 * node + 1, start, mid, left, right);\n            long long sumRight = query(2 * node + 2, mid + 1, end, left, right);\n            return sumLeft + sumRight;\n        }\n\n        void update(int node, int start, int end, int idx, long long val) {\n            if (start == end) {\n                tree[node] = val;\n            } else {\n                int mid = (start + end) / 2;\n                if (idx <= mid) {\n                    update(2 * node + 1, start, mid, idx, val);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx, val);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n    public:\n        SegmentTree(vector<long long>& arr) {\n            n = arr.size();\n            tree.resize(4 * n);\n            build(arr, 0, 0, n - 1);\n        }\n\n        long long query(int left, int right) {\n            return query(0, 0, n - 1, left, right);\n        }\n\n        void update(int idx, long long val) {\n            update(0, 0, n - 1, idx, val);\n        }\n};\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int cnt0 = 0, cnt1 = 0, n = sz(s);\n        map<int, int> idx0, idx1;\n        vector<ll>f(n);\n        map<int, vector<int>> fToIdx;\n        for(int i = 0;i < n;i++) {\n            if(s[i] == '0') {\n                cnt0++;\n                idx0[cnt0] = i;\n            }\n            else {\n                cnt1++;\n                idx1[cnt1] = i;\n            }\n            int a = (cnt0 - k > 0 ? idx0[cnt0 - k] + 1 : 0);\n            int b = (cnt1 - k > 0 ? idx1[cnt1 - k] + 1 : 0);\n            f[i] = min(a,b);\n            // cout << f[i] << ' ';\n            if(!fToIdx.count(f[i])) {\n                fToIdx[f[i]] = vector<int>();\n            }\n            fToIdx[f[i]].pb(i);\n        }\n        \n        SegmentTree lValues(f);\n        vector<ll>sample(n, 0);\n        SegmentTree canceledValues(sample);\n        vector<vector<pair<int,int>>>queriesAt(n, vector<pair<int,int>>());\n\n\n        for(int i = 0;i < queries.size();i++) {\n            int l = queries[i][0], r = queries[i][1];\n            queriesAt[l].pb(mp(r, i));\n        }\n\n        vector<ll>ans(queries.size());\n        for(int i = 0;i < n;i++) {\n            for(auto idx : fToIdx[i]) {\n                lValues.update(idx, 0);\n                canceledValues.update(idx, 1);\n            }\n            \n            for(auto query : queriesAt[i]) {\n                int r = query.f, idx = query.s;\n                ll sumFromItoR = 1LL * (1LL * (r - i + 1) * (i + r)) / 2;\n                ans[idx] = sumFromItoR + r - i + 1 - lValues.query(i, r) - 1LL * i * canceledValues.query(i, r);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723951171",
    "subm_id": "1359765008"
}