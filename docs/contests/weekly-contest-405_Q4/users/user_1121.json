{
    "username": "nimeshnadar",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n    public:\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordIndices;\n        TrieNode() {}\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() {\n            root = new TrieNode();\n        }\n        void insert(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char ch : word) {\n                if (node->children.find(ch) == node->children.end()) {\n                    node->children[ch] = new TrieNode();\n                }\n                node = node->children[ch];\n            }\n            node->wordIndices.push_back({word.length(), cost});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0; \n        Trie trie;\n        for(int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        for(int i = 0; i < n; i++) {\n            if(dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for(int j = i; j < n; j++) {\n                if(node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                for(auto& [length, cost] : node->wordIndices) {\n                    dp[j+1] = min(dp[j+1], dp[i]+cost);\n                }\n            }\n        }\n        if(dp[n]==INT_MAX) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720323190",
    "subm_id": "1312369539"
}