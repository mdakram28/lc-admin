{
    "username": "MuzheZeng",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def dist_sq(xx, yy):\n            return (xx[0] - yy[0])**2 + (xx[1] - yy[1])**2\n        def radius_sq(xx, yy):\n            return (xx[2] + yy[2])**2\n        \n        class UF:\n            _id = []\n            _count = 0\n            \n            def __init__(self, N):\n                self._id = list(range(0, N))\n                self._count = N\n                \n            def find(self, p):\n                while (self._id[p] != p):\n                    p = self._id[p]\n                return p\n            \n            def union(self, p, q):\n                self.rootP = self.find(p)\n                self.rootQ = self.find(q)\n                if (self.rootP == self.rootQ):\n                    return None\n                \n                self._id[self.rootQ] = self.rootP\n                self._count -= 1\n                \n            def is_connected(self, p, q):\n                return self.find(p) == self.find(q)\n        \n        nc = len(circles)\n        uf = UF(nc)\n        \n        for i in range(nc):\n            for j in range(i, nc):\n                if dist_sq(circles[i], circles[j]) <= radius_sq(circles[i], circles[j]):\n                    uf.union(i, j)\n                    \n        # print(uf._count)\n        # print(uf._id)\n        # print()\n        \n        def is_blocking(x, y):\n            x1, y1, r1 = circles[x]\n            x2, y2, r2 = circles[y]\n            \n            if (\n                (x1 <= r1 and x2 + r2 >= X)\n                or (x2 <= r2 and x1 + r1 >= X)\n                or (y1 <= r1 and y2 + r2 >= Y)\n                or (y2 <= r2 and y1 + r1 >= Y)\n                or (x1 <= r1 and y2 <= r2)\n                or (x2 <= r2 and y1 <= r1)\n                or (x1 + r1 >= X and y2 + r2 >= Y)\n                or (x2 + r2 >= X and y1 + r1 >= Y)\n            ):\n                return True\n            return False\n        \n        \n        for i in range(nc):\n            for j in range(i, nc):\n                if uf.is_connected(i, j) and is_blocking(i, j):\n                    # print(i, j)\n                    return False\n        \n        return True",
    "submit_ts": "1722138838",
    "subm_id": "1335800987"
}