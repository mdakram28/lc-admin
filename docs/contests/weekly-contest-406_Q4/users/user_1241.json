{
    "username": "aspirers02",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n    // Sort the cuts in descending order\n    sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    // Initialize cost, current number of vertical and horizontal pieces\n    long long cost = 0;\n    int horizontalPieces = 1;\n    int verticalPieces = 1;\n\n    // Use two pointers to traverse the sorted cuts\n    int hIndex = 0;\n    int vIndex = 0;\n\n    // Continue until we process all cuts\n    while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n        if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n            cost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            horizontalPieces++;\n            hIndex++;\n        } else {\n            cost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            verticalPieces++;\n            vIndex++;\n        }\n    }\n\n    // Process remaining horizontal cuts\n    while (hIndex < horizontalCut.size()) {\n        cost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n        horizontalPieces++;\n        hIndex++;\n    }\n\n    // Process remaining vertical cuts\n    while (vIndex < verticalCut.size()) {\n        cost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n        verticalPieces++;\n        vIndex++;\n    }\n\n    return cost;\n}\n};",
    "submit_ts": "1720925424",
    "subm_id": "1320254271"
}