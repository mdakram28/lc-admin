{
    "username": "sanket_raut0",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> child;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass HelpNode {\npublic:\n    TrieNode* root;\n    \n    HelpNode() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->child.count(ch)) {\n                node->child[ch] = new TrieNode();\n            }\n            node = node->child[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        HelpNode helpNode;\n        \n        // Build the Trie with words and costs\n        for (int i = 0; i < words.size(); ++i) {\n            helpNode.insert(words[i], costs[i]);\n        }\n        \n        // Initialize dp array\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        // Compute minimum cost using dp\n        int i = 0;\n        while (i < n) {\n            if (dp[i] == INT_MAX) {\n                ++i;\n                continue;\n            }\n            TrieNode* node = helpNode.root;\n            int j = i;\n            while (j < n && node->child.count(target[j])) {\n                node = node->child[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n                ++j;\n            }\n            ++i;\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323228",
    "subm_id": "1312370459"
}