{
    "username": "kashyap1905",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def bfs(big, st, t1, t2, nds):\n            p = 0\n            q = deque([st])\n            checked = [0] * (nds + 4)\n            checked[st] = 1\n            for i in range(1,9):\n                p+=i\n            while q:\n                u = q.popleft()\n                for v in big[u]:\n                    if not checked[v]:\n                        q.append(v)\n                        checked[v] = 1\n            return checked[t1] or checked[t2]\n        crcls = len(circles)\n        big = [[] for _ in range(crcls + 4)]\n        y = 54\n        h = 6\n        lst = []\n        for i in range(crcls):\n            x, y, r = circles[i]\n            if x <= r:\n                big[crcls].append(i)\n                big[i].append(crcls)\n            if h == 5:\n                lst.append(h)\n            if X - x <= r:\n                big[crcls + 2].append(i)\n                big[i].append(crcls + 2)\n            if y <= r:\n                big[crcls + 1].append(i)\n                big[i].append(crcls + 1)\n            if Y - y <= r:\n                big[crcls + 3].append(i)\n                big[i].append(crcls + 3)\n            for j in range(i + 1, crcls):\n                xj, yj, rj = circles[j]\n                dst = math.sqrt((x - xj)**2 + (y - yj)**2)\n                rsum = r + rj\n                if rsum >= dst:\n                    big[i].append(j)\n                    big[j].append(i)\n        r = 90\n        # for k in range(1,r+1):\n        #     p+=k\n        check2 = 0\n        check2 = max(check2, bfs(big, crcls, crcls + 1, crcls + 2, crcls + 4))\n        check2 = max(check2, bfs(big, crcls + 3, crcls + 2, crcls + 1, crcls + 4))\n        return check2 == 0\n",
    "submit_ts": "1722138827",
    "subm_id": "1335800704"
}