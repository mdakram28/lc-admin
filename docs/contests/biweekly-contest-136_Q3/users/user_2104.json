{
    "username": "Glebegor-",
    "submission": "class Solution { \npublic: \n    int minFlips(vector<vector<int>>& grid) { \n        int n = grid.size();\n        int m = grid[0].size(); \n        vector<int> slicer(3); \n         \n        // Main\n        int res = 0; \n        if ((n % 2 != 0 && m % 2 != 0) && (grid[n/2][m/2] != 0)) { \n            res += 1; \n        } \n\n        if (n % 2 != 0) { \n            int l = 0;\n            int r = m-1; \n            while (l < r) { \n                int mid_sum = grid[n/2][l] + grid[n/2][r]; \n                slicer[mid_sum] += 1; \n                l += 1; \n                r -= 1; \n            } \n        } \n \n        if (m % 2 != 0) { \n            int l = 0;\n            int r = n-1; \n            while (l < r) { \n                int mid_sum = grid[l][m/2] + grid[r][m/2]; \n                slicer[mid_sum] += 1; \n                l += 1; \n                r -= 1; \n            } \n        } \n \n        if (slicer[2] % 2 != 0) { \n            if (slicer[1] > 0) {res += slicer[1];} \n            else {res += 2;} \n        } else { \n            res += slicer[1]; \n        } \n \n        for (int i = 0; i < n / 2; i++) { \n            for (int j = 0; j < m / 2; j++) {\n                if(i > n) {\n                    break;\n                } else if (j > m) {\n                    break;\n                }\n                int  nearest_sum = grid[i][j] + grid[n-1-i][j] + grid[i][m-1-j] + grid[n-1-i][m-1-j]; // sum of the sides\n                if (nearest_sum != 0 && nearest_sum != 4) { \n                    res += min(nearest_sum, 4 - nearest_sum); \n                } \n            } \n        } \n \n        return res; \n    } \n};\n",
    "submit_ts": "1722699921",
    "subm_id": "1343226338"
}