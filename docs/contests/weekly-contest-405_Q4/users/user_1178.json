{
    "username": "venkatasai24",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> child;\n    int val;\n    Node() : val(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Node* root;\n    \n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(const string& word, int val) {\n        Node* node = root;\n        for (char c : word) {\n            if (node->child.count(c)==0) {\n                node->child[c] = new Node();\n            }\n            node = node->child[c];\n        }\n        if(val<node->val) node->val=val;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0;; ++i) {\n            if(i==n) break;\n            if (dp[i] == INT_MAX) continue;\n            Node* node = trie.root;\n            for (int j = i;; ++j) {\n                if(j==n) break;\n                if (node->child.count(target[j])==0) break;\n                node = node->child[target[j]];\n                if (node->val != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->val);\n                }\n            }\n        }\n        if(dp[n]==INT_MAX) dp[n]=-1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720322724",
    "subm_id": "1312357446"
}