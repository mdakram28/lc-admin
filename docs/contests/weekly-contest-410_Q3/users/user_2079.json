{
    "username": "Krish_mavani",
    "submission": "class Solution {\n    public int countOfPairs(int[] vals) {\n        final int MOD = 1_000_000_007;\n        int len = vals.length;\n        int max = 50; // Maximum value for vals[i] based on constraints\n\n        // dp[a][b] represents the number of ways to have array1[i] = a and array2[i] = b\n        int[][] dp = new int[max + 1][max + 1];\n        int[][] ps = new int[max + 1][max + 1];\n        \n        // Initialize DP for the first element\n        for (int a = 0; a <= vals[0]; a++) {\n            int b = vals[0] - a;\n            if (b >= 0 && b <= max) {\n                dp[a][b] = 1;\n            }\n        }\n        \n        // Calculate prefix sums for the first element\n        for (int a = 0; a <= max; a++) {\n            for (int b = 0; b <= max; b++) {\n                ps[a][b] = dp[a][b];\n                if (a > 0) ps[a][b] = (ps[a][b] + ps[a - 1][b]) % MOD;\n                if (b > 0) ps[a][b] = (ps[a][b] + ps[a][b - 1]) % MOD;\n                if (a > 0 && b > 0) ps[a][b] = (ps[a][b] - ps[a - 1][b - 1] + MOD) % MOD;\n            }\n        }\n\n        // Fill DP array for subsequent elements\n        for (int i = 1; i < len; i++) {\n            int[][] newDp = new int[max + 1][max + 1];\n            int[][] newPs = new int[max + 1][max + 1];\n\n            for (int a = 0; a <= vals[i]; a++) {\n                int b = vals[i] - a;\n                if (b < 0 || b > max) continue;\n\n                // Calculate new DP values using prefix sums\n                int prevSum = ps[a][max];\n                if (b > 0) prevSum = (prevSum - ps[a][b - 1] + MOD) % MOD;\n                \n                newDp[a][b] = prevSum % MOD;\n            }\n\n            // Update prefix sums for the new DP array\n            for (int a = 0; a <= max; a++) {\n                for (int b = 0; b <= max; b++) {\n                    newPs[a][b] = newDp[a][b];\n                    if (a > 0) newPs[a][b] = (newPs[a][b] + newPs[a - 1][b]) % MOD;\n                    if (b > 0) newPs[a][b] = (newPs[a][b] + newPs[a][b - 1]) % MOD;\n                    if (a > 0 && b > 0) newPs[a][b] = (newPs[a][b] - newPs[a - 1][b - 1] + MOD) % MOD;\n                }\n            }\n            dp = newDp;\n            ps = newPs;\n        }\n\n        // Sum up all valid pairs\n        int total = 0;\n        for (int a = 0; a <= max; a++) {\n            for (int b = 0; b <= max; b++) {\n                total = (total + dp[a][b]) % MOD;\n            }\n        }\n\n        return total;\n    }\n}\n",
    "submit_ts": "1723346329",
    "subm_id": "1351575184"
}