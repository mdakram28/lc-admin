{
    "username": "inversionpeter",
    "submission": "vector <vector <int>> adjacencyList1, adjacencyList2;\nint distanceFromLeft[100000], distanceFromRight[100000];\n\nvoid DFS(int nowAt, int parent, int nowSum, int distance[], vector <vector <int>> &adjacencyList) {\n    distance[nowAt] = nowSum;\n    for (int neighbor : adjacencyList[nowAt]) {\n        if (neighbor != parent) {\n            DFS(neighbor, nowAt, nowSum + 1, distance, adjacencyList);\n        }\n    }\n}\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int amount1 = edges1.size() + 1, amount2 = edges2.size() + 1, rightEnd, diameter1, diameter2, minimum = 0, buffer1, buffer2, buffer3, buffer4;\n        adjacencyList1.clear();\n        adjacencyList1.resize(amount1);\n        adjacencyList2.clear();\n        adjacencyList2.resize(amount2);\n        for (vector <int> &edge : edges1) {\n            adjacencyList1[edge[0]].push_back(edge[1]);\n            adjacencyList1[edge[1]].push_back(edge[0]);\n        }\n        for (vector <int> &edge : edges2) {\n            adjacencyList2[edge[0]].push_back(edge[1]);\n            adjacencyList2[edge[1]].push_back(edge[0]);\n        }\n        \n        DFS(0, -1, 1, distanceFromLeft, adjacencyList1);\n        rightEnd = max_element(distanceFromLeft, distanceFromLeft + amount1) - distanceFromLeft;\n        DFS(rightEnd, -1, 1, distanceFromRight, adjacencyList1);\n        diameter1 = *max_element(distanceFromRight, distanceFromRight + amount1);\n        \n        DFS(0, -1, 1, distanceFromLeft, adjacencyList2);\n        rightEnd = max_element(distanceFromLeft, distanceFromLeft + amount2) - distanceFromLeft;\n        DFS(rightEnd, -1, 1, distanceFromRight, adjacencyList2);\n        diameter2 = *max_element(distanceFromRight, distanceFromRight + amount2);\n        \n        //cout << diameter1 << ' ' << diameter2 << '\\n';\n        minimum = (diameter1 >> 1) + (diameter2 >> 1) + 1;\n        return max({ minimum, diameter1 - 1, diameter2 - 1 });\n    }\n};\n\n/*\n[[0,1],[0,2],[0,3]]\n[[0,1]]\n\n[[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\n[[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\n\n[[0,1],[2,0],[3,2],[3,6],[8,7],[4,8],[5,4],[3,5],[3,9]]\n[[0,1],[0,2],[0,3]]\n*/",
    "submit_ts": "1719718245",
    "subm_id": "1304412370"
}