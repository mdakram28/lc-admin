{
    "username": "KRKanakad",
    "submission": "struct Node {\n    Node* links[26];\n    vector<pair<int, int>> end;\n    bool flag = false;\n\n    bool containskey(char ch) { return links[ch - 'a'] != NULL; }\n\n    void put(char ch, Node* node) { links[ch - 'a'] = node; }\n\n    Node* get(char ch) { return links[ch - 'a']; }\n\n    void setEnd() { flag = true; }\n\n    bool isEnd() { return flag; }\n};\n\nclass Trie {\npublic:\n    Node* root;\n    Trie() { root = new Node(); }\n\n    void insert(string word, int ind, int cost) {\n        Node* node = root;\n        for (int i = 0; i < word.size(); i++) {\n            if (!node->containskey(word[i])) {\n                node->put(word[i], new Node());\n            }\n            node = node->get(word[i]);\n        }\n        node->end.push_back({ind, cost});\n        node->setEnd();\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n\n        Trie tr;\n        for (int i = 0; i < words.size(); ++i)\n            tr.insert(words[i], i, costs[i]);\n\n        vector<int> dp(n + 1, 1e9);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            Node* node = tr.root;\n            for (int j = i; j < n; ++j) {\n                if (node->containskey(target[j])) {\n                    node = node->get(target[j]);\n                    for (auto it : node->end) {\n                        int s = words[it.first].size();\n                        if (i + s <= n)\n                            dp[i + s] = min(dp[i + s], dp[i] + it.second);\n                    }\n                } else\n                    break;\n            }\n        }\n\n        if(dp[n] == 1e9)\n        return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720323639",
    "subm_id": "1312380419"
}