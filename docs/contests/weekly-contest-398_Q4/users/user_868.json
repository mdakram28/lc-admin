{
    "username": "raghibh2004",
    "submission": "class Solution {\npublic:\n    int dp[100][100][2];\n    int ans(int forward,int backward,int last)\n    {\n        if(forward==0&&backward==0)\n            return 1;\n        if(dp[forward][backward][last]!=-1)\n            return dp[forward][backward][last];\n        int op1=0;\n        if(forward>0)\n            op1=ans(forward-1,backward,0);\n        int op2=0;\n        if(last==0)\n        {\n            if(backward>0)\n                op2+=ans(forward,backward-1,1);\n        }    \n        return dp[forward][backward][last]=op1+op2;\n            \n    }    \n    int waysToReachStair(int k) {\n        memset(dp,-1,sizeof(dp));\n        long long sum=1;\n        long long final=0;\n        if(k==0||k==1)\n            final=1;\n        for(int i=0;i<30;i++)\n        {\n            sum+=pow(2,i);\n            if(k>sum)\n                continue;\n            else if(sum-k<=i+2)\n            {\n                int left=sum-k;\n                final+=ans(i+1,left,0);\n            }\n            else\n                break;\n        }\n        return final;\n    }\n};",
    "submit_ts": 1716089773.0
}