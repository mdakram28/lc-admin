{
    "username": "ampish",
    "submission": "#define ll long long\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node, start, mid);\n            build(nums, 2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] & tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return -1;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node, start, mid, l, r);\n        int right_query = query(2 * node + 1, mid + 1, end, l, r);\n        if (left_query == -1) return right_query;\n        if (right_query == -1) return left_query;\n        return left_query & right_query;\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 1, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        ll ans = 0;\n        SegmentTree segTree(nums);\n        \n\n        for (int i = 0; i < n; i++) {\n            int low = i;\n            int high = n - 1;\n\n            int ind1 = -1;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                if (segTree.query(i, mid) > k) {\n                    low = mid + 1;\n                } else {\n                    ind1 = mid;\n                    high = mid - 1;\n                }\n            }\n\n            low = i;\n            high = n - 1;\n\n            int ind2 = -1;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                if (segTree.query(i, mid) >= k) {\n                    ind2 = mid;\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n\n            if (ind1 != -1 && ind2 != -1 && segTree.query(i,ind1) == k && segTree.query(i,ind2)== k) {\n                ans += ind2 - ind1 + 1;\n            }\n            \n            // cout<<i<<\" \"<<ind1<<\" \"<<ind2<<\" \"<<ans<<endl;\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1720280146",
    "subm_id": "1311778575"
}