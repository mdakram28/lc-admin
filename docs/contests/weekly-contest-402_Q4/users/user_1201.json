{
    "username": "9autham",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> st;  // Segment tree\n    int n;\n\n    // Helper function to check if an index is a peak\n    bool is_peak(const vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) {\n            return false;\n        }\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n\n    // Build the segment tree\n    void build(const vector<int>& nums, int l, int r, int pos) {\n        if (l == r) {\n            st[pos] = is_peak(nums, l) ? 1 : 0;\n        } else {\n            int mid = l + (r - l) / 2;\n            build(nums, l, mid, 2 * pos + 1);\n            build(nums, mid + 1, r, 2 * pos + 2);\n            st[pos] = st[2 * pos + 1] + st[2 * pos + 2];\n        }\n    }\n\n    // Query the segment tree\n    int query(int ql, int qr, int l, int r, int pos) {\n        if (ql <= l && qr >= r) {\n            return st[pos];\n        }\n        if (ql > r || qr < l) {\n            return 0;\n        }\n        int mid = l + (r - l) / 2;\n        return query(ql, qr, l, mid, 2 * pos + 1) + query(ql, qr, mid + 1, r, 2 * pos + 2);\n    }\n\n    // Update the segment tree\n    void update(int index, int l, int r, int pos, const vector<int>& nums) {\n        if (l == r) {\n            st[pos] = is_peak(nums, index) ? 1 : 0;\n        } else {\n            int mid = l + (r - l) / 2;\n            if (index <= mid) {\n                update(index, l, mid, 2 * pos + 1, nums);\n            } else {\n                update(index, mid + 1, r, 2 * pos + 2, nums);\n            }\n            st[pos] = st[2 * pos + 1] + st[2 * pos + 2];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        st.resize(4 * n);\n        build(nums, 0, n - 1, 0);\n    }\n\n    int query(int ql, int qr) {\n        return query(ql, qr, 0, n - 1, 0);\n    }\n\n    void update(int index, const vector<int>& nums) {\n        update(index, 0, n - 1, 0, nums);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> results;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                // Count peaks in the range [li, ri]\n                int li = query[1], ri = query[2];\n                if (li == ri) {\n                    results.push_back(0);\n                } else {\n                    results.push_back(segTree.query(li + 1, ri - 1));\n                }\n            } else if (query[0] == 2) {\n                // Update nums[indexi] to vali\n                int indexi = query[1], vali = query[2];\n                nums[indexi] = vali;\n                vector<int> affected_indices = {indexi - 1, indexi, indexi + 1};\n                for (int i : affected_indices) {\n                    if (i > 0 && i < nums.size() - 1) {\n                        segTree.update(i, nums);\n                    }\n                }\n            }\n        }\n\n        return results;\n    }\n};",
    "submit_ts": "1718509186",
    "subm_id": "1289701689"
}