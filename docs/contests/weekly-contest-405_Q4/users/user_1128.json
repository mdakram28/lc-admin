{
    "username": "bitnap",
    "submission": "class TrieNode:\n    def __init__(self,val=\"\"):\n        self.children = {}\n        self.isTerminal = False\n        self.val = val\n        self.cost = 0\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word: str,cost) -> None:\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                curr.children[c] = TrieNode()\n            curr = curr.children[c]\n            \n        curr.val = word\n        curr.isTerminal = True\n        curr.cost = cost\n\n    def search(self, word: str) -> bool:\n        curr = self.root\n        for c in word:\n            if c not in curr.children:\n                return False\n            curr = curr.children[c]\n        return curr.isTerminal\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        mp = {}\n        for i,word in enumerate(words):\n            if word in mp:\n                mp[word] = min(mp[word],costs[i])\n            else:\n                mp[word] = costs[i]\n        for word,cost in mp.items():\n            trie.insert(word,cost)\n\n        memo={}\n\n        def dfs(i):\n            if i == len(target): \n                return 0\n            if i in memo: return memo[i]\n            mc = float('inf')\n            curr = trie.root\n\n            for j in range(i,len(target)):\n                char = target[j]\n                if char not in curr.children: break\n                curr = curr.children[char]\n                if curr.isTerminal:\n                    cost = curr.cost + dfs(j+1)\n                    mc = min(mc,cost)\n\n            memo[i] = mc\n            return memo[i]\n\n        res = dfs(0)\n        return res if res != float('inf') else -1\n\n",
    "submit_ts": "1720322905",
    "subm_id": "1312362247"
}