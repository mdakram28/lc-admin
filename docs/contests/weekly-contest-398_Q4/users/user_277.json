{
    "username": "Nandy_Tragic",
    "submission": "class Solution {\npublic:\n    \n    typedef long long ll;\n    \n    void binomialCoefficient(ll n, ll k, vector<vector<ll>>&dp) {\n        for (ll i = 0; i <= n; ++i) {\n            dp[i][0] = 1LL; \n        }\n        for (ll i = 0; i <= k; ++i) {\n            dp[i][i] = 1LL; \n        }\n        for (ll i = 1; i <= n; ++i) {\n            for (ll j = 1; j <= k; ++j) {\n                if (j <= i) {\n                    dp[i][j] = dp[i - 1][j - 1] + dp[i - 1][j];\n                }\n            }\n        }\n    }\n    \n    int waysToReachStair(int k) {\n        ll N = 34;\n        ll K = 34;\n        vector<vector<ll>>dp(N+1, vector<ll>(K+1, 0LL));\n        binomialCoefficient(N, K, dp);\n        ll answer = ((k == 0 || k == 1) ? 1LL : 0LL);\n        ll sum = 1LL;\n        ll mul = 1LL;\n        for(ll jump=0; jump<=32; jump++){\n            ll total = sum;\n            total += mul;\n            sum = total;\n            mul *= 2LL;\n            if(total < k) continue;\n            ll place = jump + 2LL;\n            ll extra = total - k;\n            // cout<<place<<\" \"<<extra<<\"\\n\";\n            if(extra > place) continue;\n            answer += dp[place][extra];\n        }\n        return answer;\n    }\n};\n\n    \n\n//     start = 1\n//     jump = 0\n        \n//     1 + 2^0 + 2^1 \n    \n//   = 1 + 1 + 2 = 4\n        \n//     3C3 = 1 \n        \n//     1 + 1 = 2\n        \n//     2C1 = 2\n        \n//     1    \n        \n//         jump = 0\n        \n//         initial state = \n        \n//         1 + 1 = 2\n        \n//         2C1 = 2\n        \n//         1 + 1 + 2 = 4\n        \n//         3C3 = 1\n        \n        \n    ",
    "submit_ts": 1716088239.0
}