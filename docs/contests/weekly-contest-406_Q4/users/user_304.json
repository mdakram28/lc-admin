{
    "username": "Ani_S",
    "submission": "class Node {\n    int value;\n    int index;\n    int direction;\n    \n    public Node(int value, int index, int direction) {\n        this.value = value;\n        this.direction = direction;\n        this.index = index;\n    }\n}\n\nclass Solution {\n    \n    static final int HORIZONTAL = 0;\n    static final int VERTICAL = 1;\n    \n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Node> pq = new PriorityQueue<>((a, b) -> b.value - a.value);\n        \n        for(int i = 0; i < horizontalCut.length; i++) {\n            pq.add(new Node(horizontalCut[i], i, HORIZONTAL));\n        }\n        \n        for(int i = 0; i < verticalCut.length; i++) {\n            pq.add(new Node(verticalCut[i], i, VERTICAL));\n        }\n        \n        int vb = 1;\n        int hb = 1;\n        \n        long cost = 0;\n        \n        while(!pq.isEmpty()) {\n            Node node = pq.poll();\n            \n            if(node.direction == HORIZONTAL) {\n                \n                cost += 1l * vb * node.value;\n                hb++;\n                \n            } else {\n                \n                cost += 1l * hb * node.value;\n                vb++;\n                \n            }\n        }\n        \n        return cost;\n    }\n}",
    "submit_ts": "1720925390",
    "subm_id": "1320253123"
}