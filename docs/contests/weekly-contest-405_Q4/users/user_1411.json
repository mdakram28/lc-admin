{
    "username": "mercyknight",
    "submission": "class Solution {\npublic:\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> costs;  \n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (int i = word.length() - 1; i >= 0; --i) {\n            char ch = word[i];\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->costs.emplace_back(word.length(), cost);\n    }\n};\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.length();\n    Trie trie;\n\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 1; i <= n; ++i) {\n        TrieNode* node = trie.root;\n        for (int j = i - 1; j >= 0; --j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            for (auto& [l, c] : node->costs) {\n                if (j + l == i && dp[j] != INT_MAX) {\n                    dp[i] = min(dp[i], dp[j] + c);\n                }\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720320043",
    "subm_id": "1312281166"
}