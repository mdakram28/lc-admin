{
    "username": "beta-blue",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int res = INT_MAX;\n        int n = points.size();\n        \n        vector<pair<int, int>> sum, diff;\n        for (int i=0; i<n; ++i) {\n            auto& p = points[i];\n            sum.push_back({p[0] + p[1], i});\n            diff.push_back({p[0] - p[1], i});\n        }\n        \n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        \n        for (int i=0; i<n; ++i) {\n            auto [sumMax, iMax] = sum.back();\n            if (iMax == i)\n                sumMax = sum[n-2].first;\n            \n            auto [sumMin, iMin] = sum[0];\n            if (iMin == i)\n                sumMin = sum[1].first;\n            \n            auto [diffMax, iMax2] = diff.back();\n            if (iMax2 == i)\n                diffMax = diff[n-2].first;\n            \n            auto [diffMin, iMin2] = diff[0];\n            if (iMin2 == i)\n                diffMin = diff[1].first;\n            \n            // cout << sumMax << \" \" << sumMin << \" = \" << diffMax << \" \" << diffMin << endl;\n            int dist = max(sumMax-sumMin, diffMax-diffMin);\n            res = min(res, dist);\n        }\n        \n        return res;\n    }\n};"
}