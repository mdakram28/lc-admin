{
    "username": "Quar",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        L = 10**5\n        # L = 10\n        tot_cost = [0] * (L + 1)\n        MAX = L\n        n = len(nums)\n        half = n // 2\n        \n        def get_min_max(x):\n            if 0 <= x <= k:\n                return 0, max(k - x, x - 0)\n            if x > k:\n                return x - k, x - 0\n        \n        \n        for a, b in zip(nums[:half], nums[half:][::-1]):\n            dct = defaultdict(lambda: ([], []))\n            dct[abs(a - b)][0].append(0)\n            dct[abs(a - b) + 1][1].append(0)\n            x, y = get_min_max(b)\n            dct[x][0].append(1)\n            dct[y + 1][1].append(1)\n            x, y = get_min_max(a)\n            dct[x][0].append(1)\n            dct[y + 1][1].append(1)\n            dct[0][0].append(2)\n            dct[k + 1][1].append(2)\n            \n            \n            cost = [0, 0, 0]\n\n            def get_cost():\n                for i in range(3):\n                    if cost[i] > 0:\n                        return i\n                return 3*n\n\n            prev = None\n            for d in sorted(dct):\n                if prev is not None:\n                    c = get_cost()\n                    tot_cost[prev] += c\n                    tot_cost[d] -= c\n\n                for i in dct[d][0]:\n                    cost[i] += 1\n                for i in dct[d][1]:\n                    cost[i] -= 1\n                prev = d\n\n            # print((a, b), dict(dct))\n            c = get_cost()\n            tot_cost[d] += c            \n\n            # print((a, b), tot_cost)\n            # print((a, b), list(accumulate(tot_cost, lambda a, b: a + b)))\n            \n        \n        ret = inf\n        acc = 0\n        for x in tot_cost:\n            acc += x\n            ret = min(ret, acc)\n\n        return ret\n                    \n            \n            ",
    "submit_ts": "1721489792",
    "subm_id": "1327463931"
}