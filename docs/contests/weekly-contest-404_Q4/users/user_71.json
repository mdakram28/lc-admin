{
    "username": "deruikong",
    "submission": "class Solution {\npublic:\n    vector<int> adj[(int)1e5 + 5];\n    void bfs(int start, int n, vector<int>& dist){\n        vector<bool> vis(n + 1);\n        vis[start] = 1; dist[start] = 0;\n        queue<int> q; q.push(start);\n        while(!q.empty()){\n            int u = q.front(); q.pop();\n            for(int v : adj[u])\n                if(!vis[v]){\n                    vis[v] = 1;\n                    dist[v] = dist[u] + 1;\n                    q.push(v);\n                }\n        }\n    }\n    \n    void build_adj(vector<vector<int>>& edges){\n        int sz = edges.size() + 1;\n        for(int i = 0; i <= sz; i++){\n            adj[i].clear();\n        }\n        for(int i = 0; i < sz - 1; i++){\n            int u = edges[i][0], v = edges[i][1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n    }\n    \n    int get_diameter(int n){\n        vector<int> dis1(n + 1); bfs(0, n, dis1);\n        int node = max_element(dis1.begin(), dis1.end()) - dis1.begin();\n        vector<int> dis2(n + 1); bfs(node, n, dis2);\n        return *max_element(begin(dis2), end(dis2));\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        build_adj(edges1);\n        int d1=get_diameter(edges1.size() + 1);\n        build_adj(edges2);\n        int d2=get_diameter(edges2.size() + 1);\n        // cout << d1 << ' ' << d2 << '\\n';\n        return max((d1 + 1) / 2 + (d2 + 1) / 2 + 1, max(d1, d2));\n    }\n};",
    "submit_ts": 1719716702.0
}