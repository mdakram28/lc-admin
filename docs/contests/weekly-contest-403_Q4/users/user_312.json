{
    "username": "CongThanhNguyen",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        def minimumSubArea(x0, y0, x1, y1) -> int:\n            top, bottom, left, right = -1,-1,-1,-1\n            done = False\n            for i in range(x0, x1 + 1):\n                for j in range(y0, y1 + 1):\n                    if grid[i][j] == 1:\n                        #print(i, j, grid[i][j])\n                        top = i\n                        done = True\n                        break\n                if done:\n                    break\n            done = False\n            for i in range(x1, x0 - 1, -1):\n                for j in range(y0, y1 + 1):\n                    if grid[i][j] == 1:\n                        bottom = i\n                        done = True\n                        break\n                if done:\n                    break\n            done = False\n            for j in range(y0, y1 + 1):\n                for i in range(x0, x1 + 1):\n                    if grid[i][j] == 1:\n                        left = j\n                        done = True\n                        break\n                if done:\n                    break\n            done = False\n            for j in range(y1, y0 - 1, -1):\n                for i in range(x0, x1 +1):\n                    if grid[i][j] == 1:\n                        right = j\n                        done = True\n                        break\n                if done:\n                    break\n            #print(top, bottom, left, right)\n            if top < 0 or bottom < 0 or left < 0 or right < 0:\n                return 0\n            return (bottom - top + 1)*(right - left + 1)\n        \n        ret = inf\n        for x in range(len(grid)):\n            for y in range(len(grid[0])):\n                #case 1\n                tmp = minimumSubArea(0, 0, x, y) \\\n                        + minimumSubArea(x + 1, 0, len(grid) - 1, len(grid[0]) - 1) \\\n                        + minimumSubArea(0, y + 1, x, len(grid[0]) - 1)\n                ret = min(ret, tmp)\n                #case 2\n                tmp = minimumSubArea(0, 0, x, y) \\\n                        + minimumSubArea(x + 1, 0, len(grid) - 1, y) \\\n                        + minimumSubArea(0, y + 1, len(grid) - 1, len(grid[0]) - 1)\n                ret = min(ret, tmp)\n                #case 3\n                tmp = minimumSubArea(0, 0, len(grid) - 1, y) \\\n                        + minimumSubArea(x + 1, y + 1, len(grid) - 1, len(grid[0]) - 1) \\\n                        + minimumSubArea(0, y + 1, x, len(grid[0]) - 1)\n                ret = min(ret, tmp)\n                #case 4\n                tmp = minimumSubArea(0, 0, x, len(grid[0]) - 1) \\\n                        + minimumSubArea(x + 1, 0, len(grid) - 1, y) \\\n                        + minimumSubArea(x + 1, y + 1, len(grid) - 1, len(grid[0]) - 1)\n                ret = min(ret, tmp)\n        \n        for x1 in range(len(grid)):\n            for x2 in range(x1 + 1, len(grid)):\n                tmp = minimumSubArea(0, 0, x1, len(grid[0]) - 1) \\\n                        + minimumSubArea(x1 + 1, 0, x2, len(grid[0]) - 1) \\\n                        + minimumSubArea(x2 + 1, 0, len(grid) - 1, len(grid[0]) - 1)\n                ret = min(ret, tmp)\n        \n        for y1 in range(len(grid[0])):\n            for y2 in range(y1 + 1, len(grid[0])):\n                tmp = minimumSubArea(0, 0, len(grid) - 1, y1) \\\n                        + minimumSubArea(0, y1+1, len(grid) - 1, y2) \\\n                        + minimumSubArea(0, y2+1, len(grid) -1, len(grid[0]) - 1)\n                ret = min(ret, tmp)\n\n        return ret",
    "submit_ts": "1719113710",
    "subm_id": "1297331414"
}