{
    "username": "gauravsingh_",
    "submission": "class Trie {\n  vector<vector<int>> nxt;\n  vector<int> cost;\n  void createNode() {\n    nxt.emplace_back(26, -1);\n    cost.emplace_back(1e9);\n  }\npublic:\n  Trie() {\n    createNode();\n  }\n  void insert(string &s, int &k) {\n    int node = 0;\n    for (auto &ch: s) {\n      int id = ch - 'a';\n      if (nxt[node][id] == -1) {\n        nxt[node][id] = nxt.size();\n        createNode();\n      }\n      node = nxt[node][id];\n    }\n    cost[node] = min(cost[node], k);\n  }\n  int getNxt(int node, int id) {\n    return nxt[node][id];\n  }\n  int getCost(int node) {\n    return cost[node];\n  }\n};\nclass Solution {\npublic:\n  int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n    unordered_map<string, int> cost;\n    Trie trie;\n    for (int i = 0; i < words.size(); i++) {\n      trie.insert(words[i], costs[i]);\n    }\n    int n = s.size();\n    vector<int> dp(n + 1, 1e9);\n    dp[n] = 0;\n    for (int i = n - 1; i >= 0; i--) {\n      for (int node = 0, j = i; j < n; j++) {\n        int nxtNode = trie.getNxt(node, s[j] - 'a');\n        if (nxtNode == -1) break;\n        node = nxtNode;\n        int cost = trie.getCost(node);\n        if (cost != 1e9) dp[i] = min(dp[i], cost + dp[j + 1]);\n      }\n    }\n    return dp[0] == 1e9? -1: dp[0];\n  }\n};",
    "submit_ts": "1720323679",
    "subm_id": "1312381396"
}