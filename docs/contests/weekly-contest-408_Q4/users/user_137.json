{
    "username": "Satj",
    "submission": "class Solution {\npublic:\n    vector <int> f;\n    int n;\n    int find(int x) {\n        if (f[x] != x)\n            f[x] = find(f[x]);\n        return f[x];\n    }\n    void unify(int x, int y) {\n        x = find(x);\n        y = find(y);\n        f[x] = y;\n    }\n    int close(vector <int> &c1, vector <int> &c2) {\n        long d = (long)(c1[0] - c2[0]) * (long)(c1[0] - c2[0]) + \n                 (long)(c1[1] - c2[1]) * (long)(c1[1] - c2[1]);\n        long r = (long)(c1[2] + c2[2]) * (long)(c1[2] + c2[2]);\n        if (d <= r)\n            return true;\n        return false; \n    }\n    int intersecty0(vector <int> &c, long X, long Y) {\n        long x = c[0], y = c[1], r = c[2];\n        // cout << x << \" \" << y << \" \" << r << endl;\n        // 0 0 -> X, 0 \n        // y0 intersept ? \n        long h = abs(y); // \n        if (h > r) return false;\n        long dx2 = r * r - h * h;\n        double dx = sqrt((double)dx2);\n        double xl = X - dx;\n        double xr = X + dx;\n        // 0 -> X ... xl -> xr\n        // cout << xl << \" \" << xr << endl;\n        return max(0.0, xl) <= min((double)X, xr);\n    }\n    int intersectY0(vector <int> &c, long X, long Y) {\n        long x = c[0], y = c[1], r = c[2];\n        // 0 Y -> X, Y \n        // y0 intersept ? \n        long h = abs(Y - y); // \n        if (h > r) return false;\n        long dx2 = r * r - h * h;\n        double dx = sqrt((double)dx2);\n        double xl = X - dx;\n        double xr = X + dx;\n        // 0 -> X ... xl -> xr\n        return max(0.0, xl) <= min((double)X, xr);\n    }\n    int intersectX0(vector <int> &c, long X, long Y) {\n        long x = c[0], y = c[1], r = c[2];\n        long h = abs(X - x); // \n        if (h > r) return false;\n        long dy2 = r * r - h * h;\n        double dy = sqrt((double)dy2);\n        double yl = Y - dy;\n        double yr = Y + dy;\n        return max(0.0, yl) <= min((double)Y, yr);\n    }\n    int intersectx0(vector <int> &c, long X, long Y) {\n        long x = c[0], y = c[1], r = c[2];\n        long h = abs(x); // \n        if (h > r) return false;\n        long dy2 = r * r - h * h;\n        double dy = sqrt((double)dy2);\n        double yl = Y - dy;\n        double yr = Y + dy;\n        return max(0.0, yl) <= min((double)Y, yr);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& ee) {\n        n = ee.size();\n        f.resize(n + 2);\n        iota(f.begin(), f.end(), 0);\n        for (int i = 0; i < n; ++i) {\n            if (intersectY0(ee[i], X, Y))\n                unify(i, n);\n            if (intersectx0(ee[i], X, Y))\n                unify(i, n);\n\n            if (intersecty0(ee[i], X, Y))\n                unify(i, n + 1);\n            if (intersectX0(ee[i], X, Y))\n                unify(i, n + 1);\n\n            for (int j = i + 1; j < n; ++j) {\n                if (close(ee[i], ee[j])) {\n                    unify(i, j);\n                }\n            }\n            if (find(n) == find(n + 1))\n                return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722136332",
    "subm_id": "1335731129"
}