{
    "username": "OTTFF",
    "submission": "const int INF = 0x3f3f3f3f;\n\nstruct TN\n{\n\tint word;\n    int len, mc;\n\tTN *nxt,*p[26];\n\t//char c;\n\tTN():word(0),nxt(NULL)\n\t{\n\t\tfor(int i=0;i<26;i++)\n\t\t\tp[i]=NULL;\n\t}\n\tvoid clear()\n\t{\n\t\tword=0; \n        len = 0;\n        mc = INF;\n        nxt=NULL;\n\t\tfor(int i=0;i<26;i++)\n\t\t\tp[i]=NULL;\n\t}\n};\nconst int M=5e4+5;\nstruct Pool\n{\n\tTN a[M];\n\tint na;\n\tvoid clear()\n\t{\n\t\tna=0;\n\t}\n\tTN *NEW()\n\t{\n\t\ta[na].clear();\n\t\treturn &a[na++];\n\t}\n}pool;\n\nstruct Trie\n{\n\tTN *root;\n\tvoid clear()\n\t{\n\t\tpool.clear();\n\t\troot=pool.NEW();\n\t\t//root->c='*';\n\t}\n\tvoid insert(string s, int c)\n\t{\n        int n = s.length();\n\t\tTN *u=root;\n\t\tfor(int i=0,c;i < n;i++)\n\t\t{\n\t\t\tc=s[i]-'a';\n\t\t\tif(u->p[c]==NULL)\n\t\t\t\tu->p[c]=pool.NEW();\n\t\t\tu=u->p[c];\n\t\t\t//u->c=s[i];\n\t\t}\n\t\tu->word++;\n        u->len = n;\n        u->mc = min(u->mc, c);\n\t}\n\tvoid build()\n\t{\n\t\tqueue<TN*> qu;\n\t\tqu.push(root);\n\t\twhile(!qu.empty())\n\t\t{\n\t\t\tTN *u=qu.front(); qu.pop();\n\t\t\tfor(int i=0;i<26;i++)\n\t\t\t{\n\t\t\t\tif(u->p[i]==NULL) continue;\n\t\t\t\tif(u==root) u->p[i]->nxt=root;\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tTN *tmp=u->nxt;\n\t\t\t\t\twhile(tmp)\n\t\t\t\t\t{\n\t\t\t\t\t\tif(tmp->p[i])\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tu->p[i]->nxt=tmp->p[i];\n\t\t\t\t\t\t\tu->p[i]->word+=tmp->p[i]->word;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ttmp=tmp->nxt;\n\t\t\t\t\t}\n\t\t\t\t\tif(!tmp) u->p[i]->nxt=root;\n\t\t\t\t}\n\t\t\t\tqu.push(u->p[i]);\n\t\t\t}\n\t\t}\n\t}\n\tint query(char s[])\n\t{\n\t\tTN *u=root;\n\t\tint cnt=0;\n\t\tfor(int i=0,c;s[i];i++)\n\t\t{\n\t\t\t//cout<<\"s[i] \"<<s[i]<<\" c \"<<u->c<<endl;\n\t\t\tc=s[i]-'a';\n\t\t\twhile(!u->p[c]&&u!=root)\n\t\t\t\tu=u->nxt;\n\t\t\tu=u->p[c];\n\t\t\tif(!u) u=root;\n\t\t\t//if(u->word) cout<<\" \"<<i<<\" \"<<u->word<<endl;\n\t\t\tcnt+=u->word;\n\t\t}\n\t\treturn cnt;\n\t}\n}trie;\n\nclass Solution {\npublic:\n    int minimumCost(string t, vector<string>& words, vector<int>& costs) {\n        int n = t.length();\n        int m = words.size();\n        trie.clear();\n        for (int i = 0; i < m; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        trie.build();\n        \n        vector<int> dp(n + 1, INF);\n        dp[0] = 0;\n        \n        TN *u=trie.root;\n        for (int i = 0; i < n; i++) {\n            int c = t[i] - 'a';\n            while(!u->p[c]&&u!=trie.root)\n\t\t\t\tu=u->nxt;\n\t\t\tu=u->p[c];\n\t\t\tif(!u) u=trie.root;\n            \n            TN *v = u;\n            while (v != trie.root) {\n                if (v->len) {\n                    dp[i + 1] = min(dp[i + 1], dp[i + 1 - v->len] + v->mc);\n                }\n                v = v->nxt;\n            }\n        }\n        \n        int ans = dp[n];\n        if (ans == INF) {\n            ans = -1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720320910",
    "subm_id": "1312308051"
}