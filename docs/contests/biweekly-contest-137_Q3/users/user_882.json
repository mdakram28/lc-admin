{
    "username": "msinitcyn",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<vector<int>>> best_for_row(board.size(), vector<vector<int>>(3, vector<int>(2)));\n        for (int i = 0; i < board.size(); ++i) {\n            vector<int> row = board[i];\n            vector<int> v(row.size());\n            iota(v.begin(), v.end(), 0);\n            stable_sort(v.begin(), v.end(), [&row](int a, int b) { return row[a] > row[b]; });\n            best_for_row[i][0] = { row[v[0]], v[0] };\n            best_for_row[i][1] = { row[v[1]], v[1] };\n            best_for_row[i][2] = { row[v[2]], v[2] };\n            //cout << best_for_row[i][0][0] << \" (\" << best_for_row[i][0][1] << \") \" << best_for_row[i][1][0] << \" (\" << best_for_row[i][1][1] << \") \" << best_for_row[i][2][0] << \" (\" << best_for_row[i][2][1] << \") \" << endl;\n        }\n        \n        long long result = -3*(1e9);\n        \n        for (int i = 0; i < board.size()-2; ++i) {\n            long long cur = 0;\n            int row1 = -1;\n            for (int j = 0; j < 3; ++j) {\n                cur += best_for_row[i][j][0];\n                row1 = best_for_row[i][j][1];\n                \n                for (int l = i+1; l < board.size()-1; ++l) {\n                    int row2 = -1;\n                    for (int k = 0; k < 3; ++k) {\n                        if (best_for_row[l][k][1] != row1) {\n                            cur += best_for_row[l][k][0];\n                            row2 = best_for_row[l][k][1];\n                            \n                            for (int x = l+1; x < board.size(); ++x) {\n                                for (int y = 0; y < 3; ++y) {\n                                    if (best_for_row[x][y][1] != row1 && best_for_row[x][y][1] != row2) {\n                                        cur += best_for_row[x][y][0];\n                                        //cout << cur << \" \" << result << endl;\n                                        result = max(result, cur);\n                                        cur -= best_for_row[x][y][0];\n                                    }\n                                }\n                            }\n                            cur -= best_for_row[l][k][0];\n                        }\n                    }\n                }\n                cur -= best_for_row[i][j][0];\n            }\n        }\n        //cout << \"---\" << endl;\n        return result;\n        \n        \n    }\n};",
    "submit_ts": "1723908807",
    "subm_id": "1359167924"
}