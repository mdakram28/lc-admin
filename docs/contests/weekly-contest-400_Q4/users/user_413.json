{
    "username": "Shreyansh2311",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n    public:\n        vector<int> tree;\n        int arraySize; // Renamed from \"size\"\n\n        SegmentTree(const vector<int>& nums) {\n            arraySize = nums.size(); // Renamed from \"size\"\n            tree.resize(4 * arraySize);\n            build(nums, 0, 0, arraySize - 1);\n        }\n\n        void build(const vector<int>& nums, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = nums[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(nums, 2 * node + 1, start, mid);\n                build(nums, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n            }\n        }\n\n        int query(int leftIndex, int rightIndex, int node, int start, int end) { \n            if (rightIndex < start || leftIndex > end) {\n                return INT_MAX; // All bits set\n            }\n            if (leftIndex <= start && end <= rightIndex) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int left = query(leftIndex, rightIndex, 2 * node + 1, start, mid); \n            int right = query(leftIndex, rightIndex, 2 * node + 2, mid + 1, end);\n            return left & right;\n        }\n\n        int query(int leftIndex, int rightIndex) { // Renamed from \"l\" and \"r\"\n            return query(leftIndex, rightIndex, 0, 0, arraySize - 1);\n        }\n    };\n\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        int min_diff = INT_MAX;\n\n        for (int i = 0; i < n; ++i) {\n            int leftIndex = i, rightIndex = n - 1, best = -1; \n            while (leftIndex <= rightIndex) {\n                int mid = leftIndex + (rightIndex - leftIndex) / 2; \n                int and_val = segTree.query(i, mid);\n                if (abs(k - and_val) < min_diff) {\n                    min_diff = abs(k - and_val);\n                    best = mid;\n                }\n                if (and_val >= k) {\n                    leftIndex = mid + 1;\n                } else {\n                    rightIndex = mid - 1;\n                }\n            }\n        }\n\n        return min_diff;\n    }\n};\n",
    "submit_ts": "1717297327",
    "subm_id": "1274738417"
}