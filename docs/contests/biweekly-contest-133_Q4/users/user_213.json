{
    "username": "pushkarv_2003",
    "submission": "class Solution {\n    private:\n    const int MOD = 1e9 + 7;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        \n        int maxInversions = n * (n - 1) / 2;\n        vector<vector<int>> dp(n + 1, vector<int>(maxInversions + 1, 0));\n        dp[0][0] = 1;\n\n        vector<int> reqInversions(n, -1);\n        for (const auto& it: requirements) {\n            reqInversions[it[0]] = it[1];\n        }\n\n        for (int i = 1; i <= n; ++i) {\n            vector<int> prefixSum(maxInversions + 1, 0);\n            prefixSum[0] = dp[i-1][0];\n            for (int j = 1; j <= maxInversions; ++j) {\n                prefixSum[j] = (prefixSum[j-1] + dp[i-1][j]) % MOD;\n            }\n\n            for (int j = 0; j <= maxInversions; ++j) {\n                dp[i][j] = 0;\n                if (j < i) {\n                    dp[i][j] = prefixSum[j];\n                } else {\n                    dp[i][j] = (prefixSum[j] - prefixSum[j-i] + MOD) % MOD;\n                }\n            }\n\n            if (reqInversions[i-1] != -1) {\n                for (int j = 0; j <= maxInversions; ++j) {\n                    if (j != reqInversions[i-1]) {\n                        dp[i][j] = 0;\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int j = 0; j <= maxInversions; ++j) {\n            result = (result + dp[n][j]) % MOD;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1719069331",
    "subm_id": "1296793485"
}