{
    "username": "theyoprst",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        # imagine a matrix: columns are numbers, rows are binary digits\n        # iterate through subarray beginnings: left from 0 to n-1\n        # if nums[left] does not intersect with k, skip this beginning\n        # otherwise, we have some right binary digits (as in k's binary representation) and wrong digits\n        # and we only can have only wrong 1's (because a[left] intersects with k).\n        # For each wrong 1 we can find:\n        # - next 0 in that position, this will be first legible right position\n        # For each right 1 we can find:\n        # - next 0 in that position, this will be first ILLEGIBLE right position\n        # So for each number x position we need to store next 0 in that position\n        n_digits = 31\n        next_zero_idx = [[len(nums)] * len(nums) for _ in range(n_digits)]\n        last_zero_idx = [-1] * n_digits\n        for cur_i, num in enumerate(nums):\n            for pos in range(n_digits):\n                if num & (1 << pos) == 0:\n                    for prev_i in range(last_zero_idx[pos] + 1, cur_i+1):\n                        next_zero_idx[pos][prev_i] = cur_i\n                    last_zero_idx[pos] = cur_i\n        # print(next_zero_idx)\n\n        ans = 0\n        for left in range(len(nums)):\n            if nums[left] & k != k:\n                continue\n            first_idx = left\n            after_idx = len(nums)\n            for pos in range(n_digits):\n                if (1 << pos) & nums[left] != 0:\n                    if (1 << pos) & k == 0:\n                        first_idx = max(first_idx, next_zero_idx[pos][left])\n                    else:\n                        after_idx = min(after_idx, next_zero_idx[pos][left])\n            # print(left, first_idx, after_idx)\n            if after_idx > first_idx:\n                ans += after_idx - first_idx\n        \n        return ans\n                ",
    "submit_ts": "1720281222",
    "subm_id": "1311817386"
}