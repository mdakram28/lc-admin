{
    "username": "xi-jun-xiao-zi",
    "submission": "from typing import List\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        li = []\n        for i in range(n):\n            if i == 0 or i == n - 1:\n                li.append(0)\n            else:\n                li.append(1 if (nums[i] > max(nums[i - 1], nums[i + 1])) else 0)\n        ans = []\n        memo = [0] * n + li\n        for i in range(n - 1, 0, -1):\n            memo[i] = memo[2 * i] + memo[2 * i + 1]\n\n        def query(start, end):\n            if start > end:\n                return 0\n            res = 0\n            if start % 2 == 1:\n                res = memo[start]\n                start += 1\n            if end % 2 == 0:\n                res += memo[end]\n                end -= 1\n            return res + query(start // 2, end // 2)\n\n        def update(idx, value):\n            idx += n\n            diff = value - memo[idx]\n            while idx:\n                memo[idx] += diff\n                idx //= 2\n\n        for a, b, c in queries:\n            if a == 1:\n                ans.append(query(b + 1 + n, c - 1 + n))\n            else:\n                nums[b] = c\n                for i in range(b - 1, b + 2):\n                    if i == 0 or i == n - 1:\n                        update(i, 0)\n                    elif 0 < i < n - 1:\n                        update(i, 1 if (nums[i] > max(nums[i - 1], nums[i + 1])) else 0)\n            # print(nums, memo, ans)\n        \n        return ans",
    "submit_ts": 1718506958.0
}