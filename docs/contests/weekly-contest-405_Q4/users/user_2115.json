{
    "username": "forleet",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n    unordered_map<char, TrieNode*> child;\n        vector<pair<int, int>> words;\n    };\n\n    void insert(TrieNode* root, string& word, int idx) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->child.count(c) == 0) {\n                node->child[c] = new TrieNode();\n            }\n            node = node->child[c];\n        }\n        node->words.push_back({idx, word.size()});\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            insert(root, words[i], i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] != INT_MAX) {\n                TrieNode* node = root;\n                for (int j = i; j < n; j++) {\n                    if (node->child.count(target[j]) == 0) break;\n                    node = node->child[target[j]];\n                    for (auto& [idx, len] : node->words) {\n                        if (j + 1 - len + 1 <= i) continue;\n                        dp[j + 1] = min(dp[j + 1], dp[i] + costs[idx]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322769",
    "subm_id": "1312358646"
}