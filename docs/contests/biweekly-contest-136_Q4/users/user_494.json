{
    "username": "laughing-paredpy",
    "submission": "class Solution {\n    List<Integer>[] g;\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        g = new ArrayList[n];\n        Arrays.setAll(g, e -> new ArrayList<>());\n        for (int[] e : edges) {\n            g[e[0]].add(e[1]);\n            g[e[1]].add(e[0]);\n        }\n        int[][] time = new int[n][2];\n        for (int i = 0; i < n; i++) {\n            time[i][0] = time[i][1] = 0;\n        }\n        dfs(0, -1, time);\n        int[] res = new int[n];\n        re(0, time[0][0], time[0][1], -1, time, res);\n        return res;\n    }\n    public void re(int cur, int ma, int mi, int p, int[][] time, int[] res) {\n        res[cur] = ma;\n        for (int ch : g[cur]) {\n            if (ch != p) {\n                if (time[ch][0] + (ch % 2 == 1 ? 1 : 2) == ma) {\n                    re(ch, Math.max(Math.max(0, mi) + (cur % 2 == 1 ? 1 : 2), time[ch][0]), \n                    Math.max(time[ch][1], Math.min(Math.max(0, mi) + (cur % 2 == 1 ? 1 : 2), time[ch][0])), cur, time, res);\n                } else {\n                    re(ch, Math.max(ma + (cur % 2 == 1 ? 1 : 2), time[ch][0]), Math.max(time[ch][1], Math.min(ma + (cur % 2 == 1 ? 1 : 2), time[ch][0])), cur, time, res);\n                }\n            }\n        }\n    }\n    public int dfs(int cur, int p, int[][] time) {\n        int cnt = 0;\n        for (int ch : g[cur]) {\n            if (p != ch) {\n                cnt = dfs(ch, cur, time) + (ch % 2 == 1 ? 1 : 2);\n                if (time[cur][0] == -1) {\n                    time[cur][0] = cnt;\n                } else if (cnt > time[cur][0]) {\n                    time[cur][1] = time[cur][0];\n                    time[cur][0] = cnt;\n                } else {\n                    time[cur][1] = Math.max(time[cur][1], cnt);\n                }\n            }\n        }\n        return time[cur][0];\n    }\n}",
    "submit_ts": "1722700673",
    "subm_id": "552280807"
}