{
    "username": "zhang-yi-yang",
    "submission": "class BinaryIndexedTree:\n    def __init__(self, somelist):\n        self.val = [0] + somelist\n\n    def add(self, i):\n        while i < len(self.val):\n            self.val[i] += 1\n            i += i & -i\n    def delete(self, i):\n        while i < len(self.val):\n            self.val[i] -= 1\n            i += i & -i\n\n    def get(self, i):\n        res = 0\n        while i > 0:\n            res += self.val[i]\n            i &= i - 1\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def findpeaks(idx):\n            cond1, cond2 = True, True\n            if idx > 0:\n                cond1 = nums[idx] > nums[idx-1]\n            if idx < len(nums)-1:\n                cond2 = nums[idx] > nums[idx+1]\n            return cond1 and cond2\n\n        n = len(nums)\n        # peaks = [0]*n\n        peaksTree = BinaryIndexedTree([0]*n)\n        if nums[0]>nums[1]:\n            # peaks[0] = 1\n            peaksTree.add(1)\n\n        for i in range(1, len(nums)):\n            cond1, cond2 = True, True\n            cond1 = nums[i] > nums[i-1]\n            if i < n-1:\n                cond2 = nums[i] > nums[i+1]\n            \n            if cond1 and cond2:\n                # peaks[i] = peaks[i-1] + 1\n                peaksTree.add(i+1)\n            else:\n                # peaks[i] = peaks[i-1]\n                pass\n        \n        # peaksTree = BinaryIndexedTree(peaks)\n        ans = []\n        for q0, q1, q2 in queries:\n            # print(peaksTree.val)\n            # print(peaksTree.get(1), peaksTree.get(2), peaksTree.get(3), )\n            if q0 == 1:\n                # if q1 == 0:\n                #     ans.append(peaksTree.get(q2+1))\n                # else:\n                if q2 > q1+1:\n                    ans.append(peaksTree.get(q2) - peaksTree.get(q1+1))\n                    # print(peaksTree.get(q2-1), peaksTree.get(q1+1), q2-1, q1+1)\n                else:\n                    ans.append(0)\n            else:\n                q_list = []\n                if q1 > 0:\n                    q_list.append(q1-1)\n                q_list.append(q1)\n                if q1 < n-1:\n                    q_list.append(q1+1)\n                \n                before_list = [findpeaks(q) for q in q_list]\n\n                nums[q1] = q2\n\n                after_list = [findpeaks(q) for q in q_list]\n                # print(before_list, after_list)\n                for i in range(len(q_list)):\n                    before, after = before_list[i], after_list[i]\n                    q = q_list[i]\n                    if before == after:\n                        pass\n                    else:\n                        if before==True and after==False:\n                            peaksTree.delete(q+1)\n                        elif before==False and after==True:\n                            peaksTree.add(q+1)\n\n        return ans",
    "submit_ts": 1718508609.0
}