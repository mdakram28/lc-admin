{
    "username": "jason2714",
    "submission": "from collections import defaultdict, deque\nfrom typing import Tuple\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def build_adj_list(edges: List[List[int]]) -> Dict[int, Set[int]]:\n            adj_list: Dict[int, Set[int]] = defaultdict(set)\n            for node1, node2 in edges:\n                adj_list[node1].add(node2)\n                adj_list[node2].add(node1)\n            return adj_list\n        \n        def bfs(adj_list: Dict[int, Set[int]], start_node: int) -> Tuple[int, int]:\n            last_node = start_node\n            last_len = 0\n            q = deque([(start_node, 0)])\n            seen = set([start_node])\n            while q:\n                node, crt_len = q.popleft()\n                last_node = node\n                last_len = crt_len\n                for adj_node in adj_list[node]:\n                    if adj_node not in seen:\n                        seen.add(adj_node)\n                        q.append((adj_node, crt_len + 1))\n            return (last_node, last_len)\n                        \n                \n        def diameter(edges: List[List[int]]):\n            adj_list = build_adj_list(edges)\n            farthest_node, _ = bfs(adj_list, 0)\n            return bfs(adj_list, farthest_node)[1]\n        diameter1 = diameter(edges1)\n        diameter2 = diameter(edges2)\n        combined_diameter = (diameter1 + 1) // 2 + (diameter2 + 1) // 2 + 1\n        return max(diameter1, diameter2, combined_diameter)\n            ",
    "submit_ts": "1719719095",
    "subm_id": "1304433623"
}