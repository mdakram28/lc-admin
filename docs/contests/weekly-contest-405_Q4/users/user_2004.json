{
    "username": "test_th",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> stop;\n\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* cur = root;\n        for (char c : word) {\n            if (cur->children.find(c) == cur->children.end()) {\n                cur->children[c] = new TrieNode();\n            }\n            cur = cur->children[c];\n        }\n        cur->stop.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int INF = INT_MAX;\n        int n = target.size();\n        vector<int> dp(n + 1, INF);\n        dp[0] = 0;\n\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INF) {\n                continue;\n            }\n\n            TrieNode* cur = t.root;\n            for (int j = i; j < n; ++j) {\n                if (cur->children.find(target[j]) == cur->children.end()) {\n                    break;\n                }\n                cur = cur->children[target[j]];\n\n                for (auto& p : cur->stop) {\n                    int m = words[p.first].size();\n                    if (i + m <= n) {\n                        dp[i + m] = min(dp[i + m], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INF ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322836",
    "subm_id": "1312360375"
}