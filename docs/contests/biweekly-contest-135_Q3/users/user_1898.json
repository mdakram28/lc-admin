{
    "username": "PelArtur",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k)\n    {\n        unordered_map<int, int> diff;\n        int n = nums.size();\n        for(int i = 0; i < n / 2; ++i)\n            diff[abs(nums[i] - nums[n - i - 1])]++;\n\n        vector<pair<int, int>> diffe;\n        for(const auto &val : diff)\n            diffe.emplace_back(val);\n\n        sort(diffe.begin(), diffe.end(), [](pair<int,int> &val1, pair<int,int> &val2)\n        {\n            return val1.second > val2.second;\n        });\n\n        if( diffe[0].second == n / 2 )\n            return 0;\n\n        int currRes;\n        int currMin = 2 * n;\n        for(int i = 0; i < diffe.size() - 1; ++i)\n        {\n            currRes = 0;\n            for(int j = 0; j < n / 2; ++j)\n            {\n                if( abs(nums[j] - nums[n - j - 1]) == diffe[i].first )\n                    continue;\n                if( max(nums[j], nums[n - j - 1]) - diffe[i].first >= 0 || min(nums[j], nums[n - j - 1]) + diffe[i].first <= k )\n                    currRes++;\n                else\n                    currRes += 2;\n            }\n\n            currMin = min(currMin, currRes);\n            if( currMin <= n / 2 - diffe[i + 1].second )\n                break;\n        }\n\n        return currMin;\n    }\n};",
    "submit_ts": "1721487712",
    "subm_id": "1327398522"
}