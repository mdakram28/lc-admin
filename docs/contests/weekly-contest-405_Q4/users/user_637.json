{
    "username": "sweetykuma456",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n\nusing namespace std;\n\nclass TV {\npublic:\n    vector<TV*> ch;\n    int value;\n    bool st;\n\n    TV() : ch(26, nullptr), value(INT_MAX), st(false) {}\n};\n\nclass TTree {\npublic:\n    TV* root;\n\n    TTree() {\n        root = new TV();\n    }\n\n    void addWord(const string& word, int cost) {\n        TV* nd = root;\n        for (char c : word) {\n            if (!nd->ch[c - 'a']) {\n                nd->ch[c - 'a'] = new TV();\n            }\n            nd = nd->ch[c - 'a'];\n        }\n        nd->value = min(cost, nd->value);\n        nd->st = true;\n    }\n\n    TV* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TTree trie;\n        int lg = target.size();\n        vector<int> mnC(lg + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], costs[i]);\n        }\n\n        mnC[0] = 0;\n\n        for (int i = 0; i < lg; ++i) {\n            if (mnC[i] == INT_MAX) continue;\n\n            TV* nd = trie.getRoot();\n            for (int j = i; j < lg; ++j) {\n                char c = target[j];\n                if (!nd->ch[c - 'a']) break;\n                nd = nd->ch[c - 'a'];\n                if (nd->st) {\n                    int nb=mnC[i] + nd->value;\n                    mnC[j + 1] = min(mnC[j + 1],nb );\n                }\n            }\n        }\n\n         if(mnC[lg] == INT_MAX )\n             return -1 ;\n         return mnC[lg];\n    }\n};\n",
    "submit_ts": "1720322583",
    "subm_id": "1312353743"
}