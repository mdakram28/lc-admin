{
    "username": "ranting",
    "submission": "class Trie:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        n = len(words)\n        \n        for i in range(n):\n            curr = trie\n            word = words[i]\n            for c in word:\n                if c in curr.children:\n                    curr = curr.children[c]\n                else:\n                    curr.children[c] = Trie()\n                    curr = curr.children[c]\n                    \n            curr.cost = min(costs[i], curr.cost)\n            \n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        next_nodes = [[trie, 0]]\n        \n        for i in range(1, n + 1):\n            c = target[i - 1]\n            new_next_nodes = []\n            \n            for next_node, length in next_nodes:\n                if c in next_node.children:\n                    new_next_nodes.append([next_node.children[c], length + 1])\n                    \n            if not new_next_nodes:\n                return -1\n            \n            for new_next_node, length in new_next_nodes:\n                if new_next_node.cost != float('inf'):\n                    dp[i] = min(dp[i], dp[i - length] + new_next_node.cost)\n            \n            if dp[i] != float('inf'):\n                new_next_nodes.append([trie, 0])\n                \n            next_nodes = new_next_nodes\n                    \n        return dp[-1] if dp[-1] != float('inf') else -1\n        \n#         @cache\n#         def solve(i, node):\n#             if i >= len(target):\n#                 return -1\n#             if target[i] not in node.children:\n#                 return -1\n            \n#             next_node = node.children[target[i]]\n#             res = solve(i + 1, next_node)\n#             other_res = -1\n            \n#             if next_node.is_end:\n#                 if i == len(target) - 1:\n#                     other_res = next_node.cost\n#                 elif (new := solve(i + 1, trie)) != -1:\n#                     other_res = new + next_node.cost\n                \n#             if res == -1 or other_res == -1:\n#                 res = max(res, other_res)\n#             else:\n#                 res = min(res, other_res)\n                \n#             return res\n        \n        # return solve(0, trie)",
    "submit_ts": "1720322462",
    "subm_id": "1312350559"
}