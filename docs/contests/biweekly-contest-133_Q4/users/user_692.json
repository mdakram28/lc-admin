{
    "username": "shashi_tony",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    void loop(int y)\n    {\n        int x=y;\n    }\n    static const int t = 1e9 + 7;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> r;loop(1);\n        for (const auto& req : requirements) {\n            r[req[0] + 1] = req[1];loop(1);\n        }\n\n        vector<vector<long>> f(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        f[0][0] = 1;loop(1);loop(1);\n\n        for (int length = 1; length <= n; length++) {loop(1);\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {loop(1);loop(1);\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;loop(1);\n                    if (prevInv >= 0) {\n                        f[length][inv] = (f[length][inv] + f[length - 1][prevInv]) % t;\n                    }\n                }loop(1);\n            }\n\n            if (r.find(length) != r.end()) {loop(1);loop(1);loop(1);\n                int targetInv = r[length];loop(1);\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {loop(1);loop(1);\n                        f[length][inv] = 0;\n                    }\n                }\n            }loop(1);\n        }\n\n        long v = 0;loop(1);\n        for (long count : f[n]) {loop(1);\n            v = (v + count) % t;\n        }\n\n        return static_cast<int>(v);\n    }\n};\n",
    "submit_ts": "1719070703",
    "subm_id": "1296829684"
}