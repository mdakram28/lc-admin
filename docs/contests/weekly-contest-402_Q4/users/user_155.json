{
    "username": "lucifer1006",
    "submission": "// Fenwick Tree\nclass FenwickTree {\nprivate:\n  vector<int> sums_;\n\n  static inline int lowbit(int x) { return x & -x; }\n\npublic:\n  FenwickTree(int n) : sums_(n + 1, 0) {}\n\n  void update(int i, int delta) {\n    while (i < sums_.size()) {\n      sums_[i] += delta;\n      i += lowbit(i);\n    }\n  }\n\n  int query(int i) const {\n    int sum = 0;\n    while (i > 0) {\n      sum += sums_[i];\n      i -= lowbit(i);\n    }\n    return sum;\n  }\n};\n\nclass Solution {\npublic:\n  vector<int> countOfPeaks(vector<int> &nums, vector<vector<int>> &queries) {\n    int n = nums.size();\n    FenwickTree tree(n);\n    for (int i = 1; i < n - 1; ++i) {\n      if (nums[i] > max(nums[i - 1], nums[i + 1])) {\n        tree.update(i + 1, 1);\n      }\n    }\n\n    vector<int> ans;\n    for (auto &query : queries) {\n      int t = query[0];\n      if (t == 1) {\n        int l = query[1], r = query[2];\n        int val = tree.query(r + 1) - tree.query(l);\n        if (l > 0 && l < n - 1 && nums[l] > max(nums[l - 1], nums[l + 1])) {\n          --val;\n        }\n        if (l != r && r < n - 1 && nums[r] > max(nums[r - 1], nums[r + 1])) {\n          --val;\n        }\n        ans.push_back(val);\n      } else {\n        int idx = query[1], val = query[2];\n        for (int i = max(1, idx - 1); i <= min(n - 2, idx + 1); ++i) {\n          if (nums[i] > max(nums[i - 1], nums[i + 1])) {\n            tree.update(i + 1, -1);\n          }\n        }\n        nums[idx] = val;\n        for (int i = max(1, idx - 1); i <= min(n - 2, idx + 1); ++i) {\n          if (nums[i] > max(nums[i - 1], nums[i + 1])) {\n            tree.update(i + 1, 1);\n          }\n        }\n      }\n    }\n\n    return ans;\n  }\n};",
    "submit_ts": 1718506273.0
}