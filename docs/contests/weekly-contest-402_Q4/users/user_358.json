{
    "username": "tr1nity",
    "submission": "class SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (2 * self.n)\n        for i in range(self.n):\n            self.tree[self.n + i] = data[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i * 2] + self.tree[i * 2 + 1]\n    \n    def update(self, idx, vue):\n        idx += self.n\n        self.tree[idx] = vue\n        while idx > 1:\n            idx //= 2\n            self.tree[idx] = self.tree[2 * idx] + self.tree[2 * idx + 1]\n    \n    def query(self, l, r):\n        l += self.n\n        r += self.n\n        res = 0\n        while l < r:\n            if l & 1:\n                res += self.tree[l]\n                l += 1\n            if r & 1:\n                r -= 1\n                res += self.tree[r]\n            l //= 2\n            r //= 2\n        return res\n            \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        res = []\n        n = len(nums)\n\n        def isp(i):\n            if i == 0 or i == n - 1: return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\n        p = [0] * n\n        for i in range(1, n - 1):\n            if isp(i):\n                p[i] = 1\n\n        st = SegmentTree(p)\n        for q in queries:\n            if q[0] == 1:\n                l, r = q[1], q[2]\n                if l < r: res.append(st.query(l + 1, r))\n                else: res.append(0)\n            elif q[0] == 2:\n                idx, v = q[1], q[2]\n                if nums[idx] == v: continue\n                for i in range(max(1, idx - 1), min(n - 1, idx + 2)):\n                    prev, nums[idx] = p[i], v\n                    cur = isp(i)\n                    if prev != cur: \n                        p[i] = 1 if cur else 0\n                        st.update(i, p[i])\n                nums[idx] = v\n        return res",
    "submit_ts": 1718507013.0
}