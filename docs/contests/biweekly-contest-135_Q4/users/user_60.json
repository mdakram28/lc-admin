{
    "username": "alephinfinity1",
    "submission": "using ll = long long;\n\nint n;\nll rise[110][110], fall[110][110], cur[110];\nll rdp[110], fdp[110];\n\nclass Solution {\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        n = (int) size(grid);\n        if (n == 1) { return 0; }\n        if (n == 2) {\n            return max((ll) (grid[0][0] + grid[1][0]), (ll) (grid[0][1] + grid[1][1]));\n        }\n\n        for (int i = 0; i < n; i++) {\n            ll s = 0;\n            for (int j = 0; j < n; j++) {\n                cur[j] = grid[j][i];\n                s += cur[j];\n            }\n            rise[i][i] = s;\n\n            for (int j = i+1; j < n; j++) {\n                ll best = rise[i][j-1], c = rise[i][j-1];\n                int idx = n;\n                for (int k = n-1; k >= 0; k--) {\n                    c += grid[k][j] - cur[k];\n                    if (c > best) {\n                        best = c;\n                        idx = k;\n                    }\n                }\n\n                rise[i][j] = best;\n                for (int k = idx; k < n; k++) {\n                    cur[k] = grid[k][j];\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            ll s = 0;\n            for (int j = 0; j < n; j++) {\n                cur[j] = grid[j][i];\n                s += cur[j];\n            }\n            fall[i][i] = s;\n\n            for (int j = i+1; j < n; j++) {\n                ll best = fall[i][j-1], c = fall[i][j-1];\n                int idx = -1;\n                for (int k = 0; k < n; k++) {\n                    c += grid[k][j] - cur[k];\n                    if (c > best) {\n                        best = c;\n                        idx = k;\n                    }\n                }\n\n                fall[i][j] = best;\n                for (int k = 0; k <= idx; k++) {\n                    cur[k] = grid[k][j];\n                }\n            }\n        }\n\n        rdp[0] = rise[0][0];\n        rdp[1] = rise[0][1];\n        fdp[0] = 0;\n        fdp[1] = fall[1][1];\n        for (int i = 2; i < n-1; i++) {\n            rdp[i] = rise[0][i];\n            for (int j = 1; j <= i; j++) {\n                rdp[i] = max(rdp[i], fdp[j-1] + rise[j][i]);\n            }\n            fdp[i] = fall[1][i];\n            for (int j = 2; j <= i; j++) {\n                fdp[i] = max(fdp[i], max(fdp[j-2], rdp[j-2]) + fall[j][i]);\n            }\n        }\n        rdp[n-1] = rdp[n-2];\n        fdp[n-1] = fall[1][n-1];\n        for (int j = 2; j < n; j++) {\n            fdp[n-1] = max(fdp[n-1], max(fdp[j-2], rdp[j-2]) + fall[j][n-1]);\n        }\n\n        return max(fdp[n-1], rdp[n-1]);\n    }\n};",
    "submit_ts": "1721490893",
    "subm_id": "548324680"
}