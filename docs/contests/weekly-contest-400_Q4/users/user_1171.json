{
    "username": "smsh7",
    "submission": "class SegTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegTree(vector<int>& arr){\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start,int end){\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r){\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r){\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\n\nclass Solution{\npublic:\n\n    int minimumDifference(std::vector<int>& nums, int k) {\n        SegTree tree(nums);\n        int ans = INT_MAX;\n\n        for(int i = 0; i < nums.size(); i++) {\n            int lo = i - 1, hi = nums.size() - 1, mid;\n            while(hi - lo > 1) {\n                mid = (hi + lo)>>1;\n                if(tree.query(i, mid) >= k) lo = mid;\n                else hi = mid;\n            }\n            ans = min(ans, abs(k - tree.query(i, hi)));\n            if(lo != i - 1) \n                ans = min(ans, abs(k - tree.query(i, lo)));\n            \n        }\n        return ans;\n    }\n};\n",
    "submit_ts": 1717299573.0
}