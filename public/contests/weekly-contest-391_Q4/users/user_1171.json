{
    "username": "rishabhchaubey",
    "submission": "class Solution {\n\n        public  class Pair {\n        int x;\n        int y;\n \n        Pair(int x, int y)\n        {\n            this.x = x;\n            this.y = y;\n        }\n    }\n \n    // Function to calculate the maximum\n    // Manhattan distance\n    public int[] MaxDist(ArrayList<Pair> A, int N, int inx)\n    {\n \n        // ArrayLists to store maximum and\n        // minimum of all the four forms\n        int sz=N+(inx!=-1?-1:0);\n        int ar[][]=new int[sz][2];\n        int ar1[][]=new int[sz][2];\n        \n        int itr=0;\n        for (int i = 0; i < N; i++) {\n            if(inx!=-1 && inx==i) continue;\n            ar[itr][0]=(A.get(i).x + A.get(i).y);\n            ar1[itr][0]=(A.get(i).x - A.get(i).y);\n             ar[itr][1]=i;\n             ar1[itr][1]=i;\n            itr++;\n        }\n \n        // Sorting both the ArrayLists\n        Arrays.sort(ar,(a,b)-> a[0]-b[0]);\n        Arrays.sort(ar1,(a,b)-> a[0]-b[0]);\n        \n \n        int maximum\n            = Math.max((ar[sz-1][0] - ar[0][0]),\n                       (ar1[sz-1][0] - ar1[0][0]));\n        if(  (ar1[sz-1][0] - ar1[0][0])>(ar[sz-1][0] - ar[0][0])) return new int[]{maximum,ar1[sz-1][1],ar1[0][1]};\n        return new int[]{maximum,ar[sz-1][1],ar[0][1]};\n    }\n    \n    \n    public int minimumDistance(int[][] points) {\n         ArrayList<Pair> al = new ArrayList<>();\n        \n        for(int pnt[]:points){\n        Pair p = new Pair(pnt[0], pnt[1]);\n        al.add(p);\n            \n        }\n        int n=al.size();\n     int mx[]=    MaxDist(al, n,-1);\n       // System.out.println(mx[2]+\" \"+mx[1]);\n        \n        return Math.min(MaxDist(al, n,mx[1])[0], MaxDist(al, n,mx[2])[0]);\n    }\n}"
}