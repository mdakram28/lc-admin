{
    "username": "vmadhu99",
    "submission": "#define pb push_back\n\nclass Solution {\npublic:\n    vector<vector<int>> adj;\n    vector<bool> visited;\n    vector<int> dist;\n\n    void dfs(int u, int d){\n        visited[u] = 1;\n        dist[u] = d;\n        for(int v : adj[u]){\n            if(!visited[v]){\n                dfs(v, d + 1);\n            }\n        }\n    }\n    void dfs2(int u, int d){\n        visited[u] = 1;\n        dist[u] = max(dist[u], d);\n        for(int v : adj[u]){\n            if(!visited[v]){\n                dfs2(v, d + 1);\n            }\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> adj1(n), adj2(m);\n        for(int i = 0; i < n - 1; i++){\n            int u = edges1[i][0], v = edges1[i][1];\n            adj1[u].pb(v);\n            adj1[v].pb(u);\n        }\n        for(int i = 0; i < m - 1; i++){\n            int u = edges2[i][0], v = edges2[i][1];\n            adj2[u].pb(v);\n            adj2[v].pb(u);\n        }\n        int d1, d2;\n        {\n            adj = adj1;\n            visited.resize(n); dist.resize(n);\n            fill(visited.begin(), visited.end(), 0);\n            fill(dist.begin(), dist.end(), 0);\n            dfs(0, 0);\n            fill(visited.begin(), visited.end(), 0);\n            int mxNode = 0;\n            int best = 0;\n            for(int i = 0; i < n; i++){\n                if(dist[i] > best){\n                    best = dist[i];\n                    mxNode = i;\n                }\n            }\n            // cout << \"passed1\" << endl;\n            int e1, e2;\n            e1 = mxNode;\n            dfs(e1, 0);\n            mxNode = 0;\n            best = 0;\n            for(int i = 0; i < n; i++){\n                if(dist[i] > best){\n                    best = dist[i];\n                    mxNode = i;\n                }\n            }\n            d1 = best;\n        }\n        // cout << \"passed\" << endl;\n        {\n            adj = adj2;\n            visited.resize(m); dist.resize(m);\n            fill(visited.begin(), visited.end(), 0);\n            fill(dist.begin(), dist.end(), 0);\n            dfs(0, 0);\n            fill(visited.begin(), visited.end(), 0);\n            int mxNode = 0;\n            int best = 0;\n            for(int i = 0; i < m; i++){\n                if(dist[i] > best){\n                    best = dist[i];\n                    mxNode = i;\n                }\n            }\n            int e1, e2;\n            e1 = mxNode;\n            dfs(e1, 0);\n            mxNode = 0;\n            best = 0;\n            for(int i = 0; i < m; i++){\n                if(dist[i] > best){\n                    best = dist[i];\n                    mxNode = i;\n                }\n            }\n            d2 = best;\n        }\n        int dd1 = (d1 + 1) / 2;\n        int dd2 = (d2 + 1) / 2;\n        return max(d1, max(d2, dd1 + dd2 + 1));\n    }\n};",
    "submit_ts": "1719716637",
    "subm_id": "1304369934"
}