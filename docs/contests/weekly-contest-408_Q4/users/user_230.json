{
    "username": "Asmi_1143",
    "submission": "class Solution {\n    private int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        queue.offer(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int currentNode = queue.poll();\n            for (int neighbor : graph.get(currentNode)) {\n                if (!visited[neighbor]) {\n                    queue.offer(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2] ? 1 : 0;\n    }\n    public boolean canReachCorner(int X, int Y, int[][] circlesData) {\n        int numCircles = circlesData.length;\n        List<int[]> circles = new ArrayList<>(numCircles);\n        List<List<Integer>> graph = new ArrayList<>(numCircles + 4);\n\n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int[] circleData : circlesData) {\n            circles.add(new int[]{circleData[0], circleData[1], circleData[2]});\n        }\n\n        for (int i = 0; i < numCircles; i++) {\n            int x = circles.get(i)[0];\n            int y = circles.get(i)[1];\n            int radius = circles.get(i)[2];\n\n            if (x <= radius) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - x <= radius) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (y <= radius) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - y <= radius) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n\n            for (int j = i + 1; j < numCircles; j++) {\n                int x2 = circles.get(j)[0];\n                int y2 = circles.get(j)[1];\n                int radius2 = circles.get(j)[2];\n                double distance = Math.sqrt(Math.pow(x - x2, 2) + Math.pow(y - y2, 2));\n                int radiusSum = radius + radius2;\n\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));\n\n        return isBlocked == 0;\n    }\n}",
    "submit_ts": "1722136632",
    "subm_id": "1335740426"
}