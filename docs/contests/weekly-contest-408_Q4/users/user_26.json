{
    "username": "srikkanthr",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int N = circles.size();\n        int S = N, T = N + 1, V = T + 1;\n        // Is there a path from S to T?\n        vector<vector<int> > g(V);\n        auto add_edge = [&](int u, int v) {\n            g[u].push_back(v);\n            g[v].push_back(u);\n        };\n        for (int i=0;i<N;++i) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (x - r <= 0 || y + r >= Y) {\n                add_edge(i, S);\n            }\n            if (x + r >= X || y - r <= 0) {\n                add_edge(i, T);\n            }\n        }\n        auto dist = [&](int a, int b, int c, int d) {\n            return (a - c) * 1LL * (a - c) + (b - d) * 1LL * (b - d);\n        };\n        for (int i=0;i<N;++i) {\n            for (int j=i+1;j<N;++j) {\n                int x1 = circles[i][0], y1 = circles[i][1], r1 = circles[i][2];\n                int x2 = circles[j][0], y2 = circles[j][1], r2 = circles[j][2];\n                // Do the circles intersect?\n                // Is the distance between their centres smaller than sum of radii?\n                long long d1 = dist(x1, y1, x2, y2);\n                long long d2 = r1 + r2;\n                if (d1 <= d2 * d2) {\n                    add_edge(i, j);\n                }\n            }\n        }\n\n        queue<int> bfs;\n        bfs.push(S);\n        vector<int> visited(V, 0);\n        visited[S] = 1;\n        while (!bfs.empty()) {\n            auto u = bfs.front();\n            bfs.pop();\n            for (auto &v : g[u]) if (!visited[v]) {\n                visited[v] = 1;\n                bfs.push(v);\n            }\n        }\n        return !visited[T];\n    }\n};",
    "submit_ts": "1722136834",
    "subm_id": "1335746317"
}