{
    "username": "Coder_3104",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& req) {\n        unordered_map<int, int> mp;\n        int mod = 1e9 + 7;\n        for (const auto& reqi : req) {\n            mp[reqi[0] + 1] = reqi[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(400 + 1, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inversionCount = 0; inversionCount <= 400; ++inversionCount) {\n                for (int position = 0; position < length; ++position) {\n                    int previousInv = inversionCount - position;\n                    if (previousInv >= 0) {\n                        dp[length][inversionCount] = (dp[length][inversionCount] + dp[length - 1][previousInv]) % mod;\n                    }\n                }\n            }\n            if (mp.find(length) != mp.end()) {\n                int requiredInv = mp[length];\n                for (int inversionCount = 0; inversionCount <= 400; ++inversionCount) {\n                    if (inversionCount != requiredInv) {\n                        dp[length][inversionCount] = 0;\n                    }\n                }\n            }\n        }\n\n        long ans = 0;\n        for (long count : dp[n]) {\n            ans = (ans + count) % mod;\n        }\n\n        return (int)ans;\n\n    }\n};",
    "submit_ts": "1719070979",
    "subm_id": "1296836247"
}