{
    "username": "hao-yue-xing-chen-e",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def fun(arr):\n            n = len(arr)\n            p = [[0]*n for _ in range(4)]\n            for i, e in enumerate(arr):\n                x, y = e\n                p[0][i] = (x + y, i)\n                p[1][i] = (-x + y, i)\n                p[2][i] = (x - y, i)\n                p[3][i] = (-x - y, i)\n            for i in range(4):\n                p[i].sort()\n            mx = -1\n            mi, mj = -1, -1\n            for i in range(4):\n                d = p[i][n-1][0] - p[i][0][0]\n                if d > mx:\n                    mx = d\n                    mi = p[i][n-1][1]\n                    mj = p[i][0][1]\n            return mx, mi, mj\n        \n        x, i, j = fun(points)\n        a = deepcopy(points)\n        b = deepcopy(points)\n        a.pop(i)\n        b.pop(j)\n        return min(fun(a)[0], fun(b)[0])"
}