{
    "username": "shhk",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\n   public:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> g(n);\n        for (auto& e : edges) {\n            int u = e[0], v = e[1];\n            g[u].push_back(v);\n            g[v].push_back(u);\n        }\n        vector<int> ds(n);\n        auto count = [&](int v) {\n            return (v & 1) ? 1 : 2;\n        };\n        auto dfs = [&](auto&& self, int v, int p) -> void {\n            int& d = ds[v];\n            for (int u : g[v]) {\n                if (u != p) {\n                    self(self, u, v);\n                    d = max(d, ds[u] + count(u));\n                }\n            }\n        };\n        dfs(dfs, 0, -1);\n        vector<int> res(n);\n        auto get = [&](auto&& self, int v, int p, int d) -> void {\n            multiset<int> st{d};\n            for (int u : g[v]) {\n                if (u != p) {\n                    st.insert(ds[u] + count(u));\n                }\n            }\n            res[v] = *st.rbegin();\n            for (int u : g[v]) {\n                if (u != p) {\n                    int t = ds[u] + count(u);\n                    st.extract(t);\n                    self(self, u, v, *st.rbegin() + count(v));\n                    st.insert(t);\n                }\n            }\n        };\n        get(get, 0, -1, 0);\n        return res;\n    }\n};",
    "submit_ts": "1722697474",
    "subm_id": "552266307"
}