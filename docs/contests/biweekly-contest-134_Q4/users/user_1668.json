{
    "username": "jimi1105",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& arr, int tgt) {\n        int n = arr.size();\n    long long total = 0;\n    unordered_map<long long, long long> prevRes;\n\n    for (int i = 0; i < n; ++i) {\n        unordered_map<long long, long long> currRes;\n        \n        if (arr[i] == tgt) {\n            ++total;\n        }\n        \n//         void Graph::DFS(int v)\n// {\n//     // Mark the current node as visited and\n//     // print it\n//     visited[v] = true;\n//     cout << v << \" \";\n\n//     // Recur for all the vertices adjacent\n//     // to this vertex\n//     list<int>::iterator i;\n//     for (i = adj[v].begin(); i != adj[v].end(); ++i)\n//         if (!visited[*i])\n//             DFS(*i);\n// }\n        currRes[arr[i]] = 1;\n\n\n\n        for (auto& [val, freq] : prevRes) {\n            long long newAndRes = val & arr[i];\n            if (newAndRes == tgt) {\n                total += freq;\n            }\n//             void Graph::DFS(int v)\n// {\n//     // Mark the current node as visited and\n//     // print it\n//     visited[v] = true;\n//     cout << v << \" \";\n\n//     // Recur for all the vertices adjacent\n//     // to this vertex\n//     list<int>::iterator i;\n//     for (i = adj[v].begin(); i != adj[v].end(); ++i)\n//         if (!visited[*i])\n//             DFS(*i);\n// }\n            currRes[newAndRes] += freq;\n        }\n        \n        prevRes = currRes;\n    }\n\n//     struct Graph* createGraph(int vertices) {\n//     struct Graph* graph = (struct Graph*)malloc(sizeof(struct Graph));\n//     graph->vertices = vertices;\n//     graph->array = (struct List*)malloc(vertices * sizeof(struct List));\n \n//     for (int i = 0; i < vertices; i++) {\n//         graph->array[i].head = NULL;\n//     }\n \n//     return graph;\n// }\n \n\n    return total;\n    }\n};",
    "submit_ts": "1720278812",
    "subm_id": "1311725333"
}