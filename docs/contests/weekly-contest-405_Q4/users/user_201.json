{
    "username": "Time-limit-exceed",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\nclass Solution:\n    def minimumCost(self, target, words, costs):\n        n = len(target)\n        trie = Trie()\n\n        # Insert words into Trie with their corresponding costs\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        # Initialize DP array and priority queue\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        pq = [(0, 0)]  # (current cost, current index in target)\n\n        while pq:\n            current_cost, i = heappop(pq)\n\n            if current_cost > dp[i]:\n                continue\n\n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost != float('inf') and dp[j + 1] > current_cost + node.cost:\n                    dp[j + 1] = current_cost + node.cost\n                    heappush(pq, (dp[j + 1], j + 1))\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720321709",
    "subm_id": "1312330217"
}