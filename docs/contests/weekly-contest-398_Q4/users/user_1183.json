{
    "username": "wisesaint",
    "submission": "class Solution {\nprivate:\n    int help(int i, long long jump, int k, int op, vector<unordered_map<int,int>> &op0, vector<unordered_map<int,int>> &op1) {\n        if(i-k > 1) return 0;\n        if(i < 0) return 0;\n        if(op == 0) {\n            if(op0[jump].find(i) != op0[jump].end()) return op0[jump][i];\n        } else {\n            if(op1[jump].find(i) != op1[jump].end()) return op1[jump][i];\n        }\n        int ans = help(i+pow(2,jump),jump+1,k,1,op0,op1);\n        if(op != 0 and i != 0) {\n            ans += help(i-1,jump,k,0,op0,op1);\n        }\n        if(i == k) ans++;\n        if(op == 0) {\n            op0[jump][i] = ans;\n        } else {\n            op1[jump][i] = ans;\n        }\n        return ans;\n    }\npublic:\n    int waysToReachStair(int k) {\n        vector<unordered_map<int,int>> op0(40), op1(40);\n        return help(1,0,k,1,op0,op1);\n    }\n};",
    "submit_ts": "1716090751",
    "subm_id": "1261874635"
}