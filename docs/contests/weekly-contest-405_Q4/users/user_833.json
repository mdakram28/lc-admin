{
    "username": "boshmen",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        int cost = INT_MAX;\n        vector<TrieNode*> children = vector<TrieNode*>(26, nullptr);\n    };\n\n    void addWord(TrieNode* root, string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            reverse(words[i].begin(), words[i].end());\n            addWord(root, words[i], costs[i]);\n        }\n        for (int i = 1; i <= n; i++) {\n            TrieNode* node = root;\n            for (int j = i; j > 0; j--) {\n                if (!node->children[target[j - 1] - 'a']) break;\n                node = node->children[target[j - 1] - 'a'];\n                if (node->cost != INT_MAX && dp[i - (i - j + 1)] != INT_MAX) {\n                    dp[i] = min(dp[i], dp[i - (i - j + 1)] + node->cost);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320826",
    "subm_id": "1312305614"
}