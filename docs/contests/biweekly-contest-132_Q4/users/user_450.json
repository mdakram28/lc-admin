{
    "username": "prash_jk",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size(); \n        vector<vector<int>> dp(n, vector<int>(k + 1, 1)); \n        int res = 1; \n        vector<int> v2(k + 1, -1); \n        vector<map<int, int>> mp(k + 1); \n\n        for (int i = 0; i < n; i++) { \n            int j = k;\n            while (j >= 0) { \n                int l = 0;\n                while (l < j) { \n                    dp[i][j] = max(dp[i][j], 1 + v2[l]); \n                    l++;\n                } \n\n                if (mp[j].find(nums[i]) != mp[j].end()) { \n                    dp[i][j] = max(dp[i][j], 1 + mp[j][nums[i]]); \n                } \n\n                res = max(res, dp[i][j]); \n                j--;\n            } \n\n            j = k;\n            while (j >= 0) { \n                v2[j] = max(v2[j], dp[i][j]); \n                mp[j][nums[i]] = max(mp[j][nums[i]], dp[i][j]); \n                j--;\n            } \n        } \n\n        return res; \n    }\n};",
    "submit_ts": "1717861687",
    "subm_id": "1281799013"
}