{
    "username": "cole_smith",
    "submission": "class Solution {\npublic:\n    int find(vector<int>& parent, int u) {\n        if (parent[u] != u)\n            parent[u] = find(parent, parent[u]);\n        return parent[u];\n    }\n\n    void unite(vector<int>& parent, vector<int>& rank, int u, int v) {\n        int root_u = find(parent, u);\n        int root_v = find(parent, v);\n        if (root_u != root_v) {\n            if (rank[root_u] > rank[root_v])\n                parent[root_v] = root_u;\n            else if (rank[root_u] < rank[root_v])\n                parent[root_u] = root_v;\n            else {\n                parent[root_v] = root_u;\n                rank[root_u]++;\n            }\n        }\n    }\n\n    bool circlesOverlap(vector<int>& c1, vector<int>& c2) {\n        long long dx = c1[0] - c2[0];\n        long long dy = c1[1] - c2[1];\n        long long rSum = c1[2] + c2[2];\n        return dx * dx + dy * dy <= rSum * rSum;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<int> parent(n);\n        vector<int> rank(n, 0);\n\n        // Initialize union-find parent pointers\n        for (int i = 0; i < n; ++i)\n            parent[i] = i;\n\n        // Connect overlapping circles\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                if (circlesOverlap(circles[i], circles[j])) {\n                    unite(parent, rank, i, j);\n                }\n            }\n        }\n\n        // Vectors to track circles touching the walls and corners\n        vector<int> left, right, top, bottom;\n        bool startCovered = false, endCovered = false;\n        int topRight = -1;\n\n        for (int i = 0; i < n; ++i) {\n            if (circles[i][0] - circles[i][2] <= 0) left.push_back(i);\n            if (circles[i][0] + circles[i][2] >= X) right.push_back(i);\n            if (circles[i][1] - circles[i][2] <= 0) bottom.push_back(i);\n            if (circles[i][1] + circles[i][2] >= Y) top.push_back(i);\n\n            if ((circles[i][0] - circles[i][2] <= 0 && circles[i][1] - circles[i][2] <= 0) ||\n                (circles[i][0] + circles[i][2] >= X && circles[i][1] + circles[i][2] >= Y)) {\n                startCovered = true;\n            }\n            if (circles[i][0] + circles[i][2] >= X && circles[i][1] + circles[i][2] >= Y) {\n                topRight = i;\n            }\n        }\n\n        for (int l : left) {\n            for (int r : right) {\n                if (find(parent, l) == find(parent, r)) {\n                    return false;\n                }\n            }\n            for (int r : bottom) {\n                if (find(parent, l) == find(parent, r)) {\n                    return false;\n                }\n            }\n        }\n\n        for (int t : top) {\n            for (int b : bottom) {\n                if (find(parent, t) == find(parent, b)) {\n                    return false;\n                }\n            }\n            for (int r : right) {\n                if (find(parent, t) == find(parent, r)) {\n                    return false;\n                }\n            }\n        }\n\n        if (startCovered) {\n            return false;\n        }\n\n        if (topRight != -1 && find(parent, topRight) == find(parent, topRight)) {\n            return false;\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722138926",
    "subm_id": "1335803287"
}