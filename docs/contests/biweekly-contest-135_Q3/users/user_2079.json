{
    "username": "Shwet_Patel",
    "submission": "class Solution {\npublic:\n    void func()\n    {\n        int i = 0;\n        while(i < 5)\n        {\n            i++;\n        }\n    }\n\n    int minChanges(vector<int>& nums, int k) {\n        map<long long, vector<long long>> diffMap;\n        vector<long long> maxValues;\n        int arraySize = nums.size();\n\n        func();\n        for (int i = 0; i < arraySize / 2; ++i) \n        {\n            long long element2 = nums[arraySize - i - 1];\n            long long element1 = nums[i];\n            // difference between elements\n            long long difference = abs(element1 - element2);\n            // maximum value\n            long long maxValue = max({element1, element2, k - element1, k - element2});\n            // store in map\n            diffMap[difference].push_back(maxValue);\n            // pushing into vector \n            maxValues.push_back(maxValue);\n        }\n\n        long long minChanges = nums.size();\n        sort(maxValues.begin(), maxValues.end());\n\n        func();\n        for (const auto& [diff, elements] : diffMap) \n        {\n            long long index = lower_bound(maxValues.begin(), maxValues.end(), diff) - maxValues.begin();\n            // calculate changes\n            index = index * 2 + (arraySize / 2 - index);\n            // iterate over elements\n            for (const auto& value : elements) \n            {\n                if (value < diff)  \n                    index -= 2;\n                else  \n                    index -= 1;\n            }\n            minChanges = min(minChanges, index);\n        }\n\n        func();\n        return minChanges;\n    }\n};\n",
    "submit_ts": "1721490104",
    "subm_id": "1327473129"
}