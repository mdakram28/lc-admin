{
    "username": "heal",
    "submission": "const long long infLL = 0x3f3f3f3f3f3f3f3f;\n\nclass Solution {\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<vector<long long>> pre(n + 2, vector<long long>(n + 1));\n        for (int j = 1; j <= n; j++) {\n            for (int i = 1; i <= n; i++) pre[j][i] = pre[j][i-1] + grid[i-1][j-1];\n        }\n        vector<vector<vector<long long>>> dp(n + 1, vector<vector<long long>>(n + 1, vector<long long>(2, -infLL)));\n        for (int i = 1; i <= n; i++) dp[1][i][1] = 0;\n        for (int j = 2; j <= n; j++) {\n            for (int i = 1; i <= n; i++) {\n                dp[j][i][1] = pre[j-1][i];\n                for (int k = 1; k <= n; k++) {\n                    if (i >= k) {\n                        dp[j][i][1] = max(dp[j][i][1], dp[j-1][k][1] + (pre[j-1][i] - pre[j-1][k]));\n                    } else {\n                        dp[j][i][0] = max(dp[j][i][0], max(dp[j-1][k][0], dp[j-1][k][1]) + (pre[j][k] - pre[j][i]));\n                    }\n                    if (j - 2 >= 1) {\n                        dp[j][i][1] = max(dp[j][i][1], max(dp[j-2][k][0], dp[j-2][k][1]) + pre[j-1][max(k,i)]);\n                    }\n                    if (j - 3 >= 1) {\n                        dp[j][i][1] = max(dp[j][i][1], max(dp[j-3][k][0], dp[j-3][k][1]) + pre[j-2][k] + pre[j-1][i]);\n                    }\n                }\n            }\n        }\n        long long ret = 0;\n        for (int j = 1; j <= n; j++)\n            for (int i = 1; i <= n; i++) {\n                ret = max(ret, max(dp[j][i][0], dp[j][i][1]) + pre[j+1][i]);\n            }\n        return ret;\n    }\n};",
    "submit_ts": "1721488889",
    "subm_id": "548316422"
}