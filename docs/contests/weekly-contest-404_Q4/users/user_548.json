{
    "username": "wanghy012",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        D1 = self.diameterTree(edges1)\n        D2 = self.diameterTree(edges2)\n        print(D1,D2)\n        return max([D1,D2,(D1+1)//2 + (D2+1)//2 + 1])\n        \n    def diameterTree(self, edges):\n        if len(edges) == 0:\n            return 0\n        myedges = []\n        for u,v in edges:\n            n = max([u,v]) + 1\n            if n > len(myedges):\n                myedges.extend([[] for _ in range(n-len(myedges))])\n            myedges[u].append(v)\n            myedges[v].append(u)\n        root = treeNode(0,None)\n        #print('myedges')\n        #print(myedges)\n        self.addChild(root, myedges)\n        return root.diameter\n    \n    def addChild(self, root, edges):\n        for x in edges[root.i]:\n            if x != root.parent:\n                #print([root.i, x])\n                child = treeNode(x, root.i)\n                self.addChild(child, edges)\n                root.children.append(child)\n        if len(root.children) == 0:\n            root.depth = 0\n            root.diameter = 0\n        elif len(root.children) == 1:\n            root.depth = max([c.depth for c in root.children]) + 1\n            root.diameter = max(max([c.diameter for c in root.children]), root.depth)\n        else:\n            d = sorted([c.depth for c in root.children])\n            root.depth = d[-1] + 1\n            cd = d[-1] + d[-2] + 2\n            root.diameter = max(max([c.diameter for c in root.children]), cd)\n        #print('node '+ str(root.i) + ': ' + str(root.depth) +' ' +  str(root.diameter))\n        \n        \nclass treeNode:\n    def __init__(self, i, parent):\n        self.depth = 0\n        self.children = []\n        self.i = i\n        self.parent = parent\n        self.diameter = 0\n        ",
    "submit_ts": 1719718483.0
}