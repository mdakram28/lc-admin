{
    "username": "abhayjoshi1104",
    "submission": "class Solution {\nprivate:\n    \n    int MOD = 1e9 + 7;\n    int MAX_JUMP = 31;\n    int OFFSET = 5;\n    int dfs(int trgt, int start, int jump, bool down,unordered_map<int, vector<vector<int>>> & mp) {\n        if (start > trgt + OFFSET) return 0;\n        if (jump > MAX_JUMP) return 0;\n        if (mp.count(start) && mp[start][jump][down] != -1) return mp[start][jump][down];\n        int ways = (start == trgt);\n        if (down) ways += dfs(trgt, start - 1, jump, false,mp);\n        if (start + (1 << jump) <= trgt + 1) ways += dfs(trgt, start + (1 << jump), jump + 1, true,mp);\n        mp[start].resize(MAX_JUMP + 1, vector<int>(2, -1));\n        return mp[start][jump][down] = ways % MOD;\n    }\npublic:\n    int waysToReachStair(int k) {\n        unordered_map<int, vector<vector<int>>> mp;\n        int start = 1;\n        int jump = 0;\n        bool down = true;\n        return dfs(k, start, jump, down,mp);\n    }\n};\n",
    "submit_ts": "1716090772",
    "subm_id": "1261875145"
}