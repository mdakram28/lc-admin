{
    "username": "dj_khalid",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        bool isEndOfWord = false;\n        int cost = INT_MAX;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n\n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const string& word, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->isEndOfWord = true;\n            node->cost = min(node->cost, cost); // Store the minimum cost at the end of the word\n        }\n\n        // Get the minimum cost to match a prefix of target starting at index 'start'\n        void match(const string& target, int start, vector<int>& dp) {\n            TrieNode* node = root;\n            for (int i = start; i < target.size(); ++i) {\n                if (node->children.find(target[i]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[i]];\n                if (node->isEndOfWord && dp[start] != INT_MAX) {\n                    dp[i + 1] = min(dp[i + 1], dp[start] + node->cost);\n                }\n            }\n        }\n    };\n\n    int minCostToFormTarget(const string& target, const vector<string>& words, const vector<int>& costs) {\n        Trie trie;\n        int n = target.size();\n\n        // Insert words into the Trie\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // Dynamic programming array\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // No cost to form an empty string\n\n        // Update dp array\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != INT_MAX) {\n                trie.match(target, i, dp);\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int result = minCostToFormTarget(target, words, costs);\n        return result ;\n    }\n};",
    "submit_ts": "1720321874",
    "subm_id": "1312334606"
}