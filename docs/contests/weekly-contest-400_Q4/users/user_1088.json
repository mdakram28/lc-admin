{
    "username": "Ankush9140",
    "submission": "class Solution {\n    class segment {\n        int[] tree;\n        int size;\n    \n        public segment(int[] arightrange) {\n            this.size = arightrange.length;\n            this.tree = new int[4 * size];\n            build(arightrange, 0, 0, size - 1);\n        }\n    \n        public void build(int[] arightrange, int branch, int start, int end) {\n            if (start == end) {\n                tree[branch] = arightrange[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(arightrange, 2 * branch + 1, start, mid);\n                build(arightrange, 2 * branch + 2, mid + 1, end);\n                tree[branch] = tree[2 * branch + 1] & tree[2 * branch + 2];\n            }\n        }\n    \n        public int query(int low, int high) {\n            return Query(0, 0, size - 1, low, high);\n        }\n    \n        public int Query(int branch, int start, int end, int low, int high) {\n            if (high < start || end < low) {\n                return Integer.MAX_VALUE;\n            }\n            if (low <= start && end <= high) {\n                return tree[branch];\n            }\n            int mid = (start + end) / 2;\n            int leftrange = Query(2 * branch + 1, start, mid, low, high);\n            int rightrange = Query(2 * branch + 2, mid + 1, end, low, high);\n            return leftrange & rightrange;\n        }\n}\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        segment segment = new segment(nums);\n        int min = Integer.MAX_VALUE;\n\n        for (int i = 0; i < n; i++) {\n            int low = i - 1, high = n - 1;\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                if (segment.query(i, mid) >= k) {\n                    low = mid;\n                } else {\n                    high = mid;\n                }\n            }\n            if (low != i - 1) {\n                min = Math.min(min, Math.abs(segment.query(i, low) - k));\n            }\n            min = Math.min(min, Math.abs(k - segment.query(i, high)));\n        }\n\n        return min;\n    }\n}",
    "submit_ts": 1717300470.0
}