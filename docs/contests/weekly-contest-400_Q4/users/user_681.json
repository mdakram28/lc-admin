{
    "username": "shubh08am",
    "submission": "class Seg {\npublic:\n    vector<int> segTree;\n    int n;\n    Seg(vector<int>& arr){\n        n = arr.size();\n        segTree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n    void build(vector<int>& arr, int node, int start,int end){\n        if (start == end) segTree[node] = arr[start];\n        \n        else {\n            int mid = start+(end-start) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            segTree[node]= segTree[2 * node + 1] & segTree[2 * node + 2];\n        }\n    }\n    int query(int node, int start, int end, int l, int r){\n        if (r < start || end < l) return INT_MAX;\n        if (l <= start && end <= r) return segTree[node];\n        int mid = start+(end-start) / 2;\n        int ans1 = query(2 * node + 1, start, mid, l, r);\n        int ans2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return ans1 & ans2;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& arr, int k) {\n    int n = arr.size();\n    Seg s(arr);\n    int res = INT_MAX;\n    for (int i = 0; i < n; i++) {\n        int left = i - 1;\n        int right = n - 1;\n        int pos;\n\n        while (right - left > 1) {\n            pos = left+ (right-left) / 2;\n            if (s.query(0, 0, n - 1, i, pos) >= k) left = pos;\n            else right = pos;\n        }\n        if (left+1 != i)  res = min(res, abs(s.query(0, 0, n - 1, i, left) - k));\n        res = min(res, abs(k - s.query(0, 0, n - 1, i, right)));\n    }\n    return res;\n    }\n};",
    "submit_ts": 1717299840.0
}