{
    "username": "Tirthraj-Raval",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # No cost to form an empty string\n        \n        # Precompute the minimum cost for each word\n        min_costs = {}\n        for i, word in enumerate(words):\n            if word not in min_costs:\n                min_costs[word] = costs[i]\n            else:\n                min_costs[word] = min(min_costs[word], costs[i])\n        \n        word_costs = [(word, cost) for word, cost in min_costs.items()]\n        \n        # Process each index in the target string\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # Skip if no valid cost at dp[i]\n            \n            for word, cost in word_costs:\n                len_word = len(word)\n                if i + len_word <= n and target[i:i + len_word] == word:\n                    dp[i + len_word] = min(dp[i + len_word], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322489",
    "subm_id": "1312351293"
}