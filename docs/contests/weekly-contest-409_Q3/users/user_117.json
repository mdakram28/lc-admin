{
    "username": "tomarint",
    "submission": "#[derive(Clone, Debug)]\nstruct IntervalSet<T> {\n    st: std::collections::BTreeSet<(T, T)>,\n}\nimpl<T: Ord + Copy> IntervalSet<T> {\n    fn new() -> Self {\n        Self {\n            st: std::collections::BTreeSet::new(),\n        }\n    }\n    // Add [l, r)\n    fn add(&mut self, kukan: (T, T)) {\n        let mut kukan = kukan;\n        loop {\n            let mut rng = self.st.range(kukan..);\n            if let Some(it) = rng.next() {\n                if it.0 <= kukan.1 {\n                    kukan.1 = kukan.1.max(it.1);\n                    let it = it.clone();\n                    self.st.remove(&it);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        loop {\n            let mut rng = self.st.range(..kukan);\n            if let Some(it) = rng.next_back() {\n                if kukan.0 <= it.1 {\n                    kukan.0 = kukan.0.min(it.0);\n                    kukan.1 = kukan.1.max(it.1);\n                    let it = it.clone();\n                    self.st.remove(&it);\n                } else {\n                    break;\n                }\n            } else {\n                break;\n            }\n        }\n        self.st.insert(kukan);\n    }\n}\n\nimpl Solution {\n    pub fn shortest_distance_after_queries(n: i32, queries: Vec<Vec<i32>>) -> Vec<i32> {\n        let n = n as usize;\n        let mut iset = IntervalSet::new();\n        for i in 0..n-1 {\n            iset.add((i*2, i*2+1));\n        }\n        let mut ans = vec![];\n        for query in queries.iter() {\n            let u = query[0] as usize;\n            let v = query[1] as usize;\n            iset.add((u*2, v*2-1));\n            ans.push(iset.st.len() as i32);\n        }\n        ans\n    }\n}",
    "submit_ts": "1722740100",
    "subm_id": "1343711196"
}