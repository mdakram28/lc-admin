{
    "username": "striver1217010",
    "submission": "import java.util.*;\nclass Solution {\n    public int numberOfSubstrings(String s) {\n        int n = s.length(), zeros = 0;\n        int dp[] = new int[n];\n        List<Integer> hm[] = new List[n + 1];\n\n        for (int i = 0; i <= n; i++) {\n            hm[i] = new ArrayList<>();\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (s.charAt(i) == '0') {\n                zeros++;\n            }\n\n            dp[i] = zeros;\n\n           \n\n            hm[dp[i]].add(i);\n        }\n\n        //System.out.println(hm);\n\n        int maxZeros = ((int)(Math.sqrt((double)n))) + 1;\n        int result = 0;\n\n\n        for (int i = 0; i <= Math.min(zeros,maxZeros); i++) {\n            for (int j = 0; j - 1 + (i*i) + i < n; j++) {\n                int prevZeros = ((j - 1) >= 0) ? dp[j - 1] : 0;\n\n                if (prevZeros + i < hm.length) {\n                    List<Integer> al = hm[prevZeros + i];\n                    int first1 = binarySearch(al, j);\n                    int first2 = binarySearch(al, j - 1 + (i*i) + i);\n\n                    if (first1 == -1 || first2 == -1) {\n                        continue;\n                    }\n\n                    result = result + Math.max(al.get(al.size() - 1) - Math.max(first1, first2) + 1, 0);\n                } else {\n                    break;\n                }\n            }\n        }\n\n        return result;\n\n        \n        \n    }\n\n    public int binarySearch(List<Integer> al, int val) {\n        int left = 0, right = al.size() - 1, result = -1;\n\n        while (left <= right) {\n            int mid = left + ((right - left)/2);\n\n            if (al.get(mid) >= val) {\n                result = al.get(mid);\n                right = mid - 1;\n            } else {\n                left = mid + 1;\n            }\n        }\n\n        return result;\n    }\n}",
    "submit_ts": "1722138696",
    "subm_id": "1335797326"
}