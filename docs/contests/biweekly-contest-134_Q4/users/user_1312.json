{
    "username": "fishhhappy",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        left = 0\n        inner = 0\n        cur_and = 2147483647\n        zero_count = [0] * 31\n        count = 0\n\n        zero_bits = set()\n        for i in range(31):\n            if (1 << i) & k == 0:\n                zero_bits.add(i)\n\n        for right in range(len(nums)):\n            if nums[right] & k != k:\n                left = right + 1\n                inner = right + 1\n                cur_and = 2147483647\n                zero_count = [0] * 31\n                continue\n            \n            cur_and &= nums[right]\n            for i in range(31):\n                if (1 << i) & nums[right] == 0:\n                    zero_count[i] += 1\n            \n            if cur_and == k:\n                can_shrink = True\n                for i in zero_bits:\n                    if zero_count[i] == 0:\n                        can_shrink = False\n                \n                while inner <= right and can_shrink:\n                    for i in range(31):\n                        if (1 << i) & nums[inner] == 0:\n                            zero_count[i] -= 1\n                            if zero_count[i] == 0:\n                                can_shrink = False\n                    inner += 1\n                \n                count += inner - left\n        \n        return count",
    "submit_ts": "1720280491",
    "subm_id": "1311791361"
}