{
    "username": "randytanpty",
    "submission": "class Solution {\n    public int waysToReachStair(int k) {\n        if (k == 0) return 2;\n        if (k == 1) return 4;\n        if (k == 2) return 4;\n        // if (k == 3) return 3;\n        // if (k == 4) return 2;        \n        // if (k == 5) return 4;\n        \n        // nums, <nextpower, count>\n        Map<Integer, Map<Integer, Integer>> mapL = new HashMap<>();        \n        Map<Integer, Map<Integer, Integer>> mapR = new HashMap<>();\n        Map<Integer, Integer> me = new HashMap<>();\n        me.put(0,1);\n        mapL.put(1, me);\n\n        int ans = 0;\n        while (true) {\n            if (mapL.size() == 0 && mapR.size() == 0) break;\n            Map<Integer, Map<Integer, Integer>> mapL2 = new HashMap<>();        \n            Map<Integer, Map<Integer, Integer>> mapR2 = new HashMap<>();\n            // l -> l, r\n            for (int num : mapL.keySet()) {\n                Map<Integer, Integer> myMap = mapL.get(num);\n                for (int power : myMap.keySet()) {\n                    // minus\n                    if (num != 0) {\n                        if (num - 1 == k) {\n                            ans += myMap.get(power);\n                        }\n                        mapR2.putIfAbsent(num - 1, new HashMap<>());\n                        mapR2.get(num - 1).merge(power, myMap.get(power), Integer::sum);\n                    }\n                    \n                    // add\n                    double temp = Math.pow(2, power);\n                    if (num + temp <= k + 1) {\n                        int add = (int)temp;\n                        int nextNum = num + add;\n                        if (nextNum == k) {\n                            ans += myMap.get(power);\n                        }\n                        mapL2.putIfAbsent(nextNum, new HashMap<>());\n                        mapL2.get(nextNum).merge(power + 1, myMap.get(power), Integer::sum);\n                    }  \n                }\n            }\n            \n            // r -> l\n            for (int num : mapR.keySet()) {\n                Map<Integer, Integer> myMap = mapR.get(num);\n                \n                \n                for (int power : myMap.keySet()) {\n                    // add\n                    double temp = Math.pow(2, power);\n                    if (num + temp <= k + 1) {\n                        int add = (int)temp;\n                        int nextNum = num + add;\n                        if (nextNum == k) {\n                            ans += myMap.get(power);\n                        }\n                        mapL2.putIfAbsent(nextNum, new HashMap<>());\n                        mapL2.get(nextNum).merge(power + 1, myMap.get(power), Integer::sum);\n                    }  \n                }\n            }\n            \n            mapL = mapL2;\n            mapR = mapR2;\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1716089283",
    "subm_id": "1261838107"
}