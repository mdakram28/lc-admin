{
    "username": "dhruv_codes04",
    "submission": "class Solution {\n    static const int MOD = 1000000007;\n    static const int MAX_INV = 400;\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> permCounts(n + 1, vector<long>(MAX_INV + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= MAX_INV; inv++) {\n                for (int newPos = 0; newPos < len; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[len][inv] = (permCounts[len][inv] + permCounts[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(len) != reqMap.end()) {\n                int targetInv = reqMap[len];\n                for (int inv = 0; inv <= MAX_INV; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return (int) result;\n    }\n};",
    "submit_ts": 1719069979.0
}