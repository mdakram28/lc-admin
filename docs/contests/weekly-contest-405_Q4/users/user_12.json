{
    "username": "_rishu11",
    "submission": "class Solution {\n    static class TrieNode {\n        Map<Character, TrieNode> children = new HashMap<>();\n        int cost = Integer.MAX_VALUE;\n    }\n\n    static class Trie {\n        TrieNode root = new TrieNode();\n\n        void insert(String word, int cost) {\n            TrieNode node = root;\n            for (char c : word.toCharArray()) {\n                node.children.putIfAbsent(c, new TrieNode());\n                node = node.children.get(c);\n            }\n            node.cost = Math.min(node.cost, cost);\n        }\n\n        TrieNode getRoot() {\n            return root;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue; // If current position is not reachable, skip it\n\n            TrieNode node = trie.getRoot();\n            for (int j = i; j < n; j++) {\n                node = node.children.get(target.charAt(j));\n                if (node == null) break;\n\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }}",
    "submit_ts": "1720319965",
    "subm_id": "1312278316"
}