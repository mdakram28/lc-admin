{
    "username": "fpeterfalvi",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length + 1;\n        List<List<Integer>> adj = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            adj.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adj.get(edge[0]).add(edge[1]);\n            adj.get(edge[1]).add(edge[0]);\n        }\n        int[] d1 = new int[n];\n        parityBFS(adj, 0, d1);\n        int v1 = -1;\n        for (int i = 0; i < n; i++) {\n            if (v1 == -1 || d1[i] > d1[v1] || d1[i] == d1[v1] && i % 2 == 1) {\n                v1 = i;\n            }\n        }\n        int[] d2 = new int[n];\n        parityBFS(adj, v1, d2);\n        int v2 = -1;\n        for (int i = 0; i < n; i++) {\n            if (v2 == -1 || d2[i] > d2[v2] || d2[i] == d2[v2] && i % 2 == 1) {\n                v2 = i;\n            }\n        }\n        int[] d3 = new int[n];\n        parityBFS(adj, v2, d3);\n        int[] result = new int[n];\n        for (int i = 0; i < n; i++) {\n            int dist1 = d2[i] + (i % 2) - (v1 % 2);\n            int dist2 = d3[i] + (i % 2) - (v2 % 2);\n            result[i] = Math.max(dist1, dist2);\n        }\n        return result;\n    }\n\n    public static void parityBFS(List<List<Integer>> adj, int s, int[] d) {\n        int n = adj.size();\n        Queue<Integer> q = new ArrayDeque<>();\n        boolean[] used = new boolean[n];\n        q.offer(s);\n        used[s] = true;\n        while (!q.isEmpty()) {\n            int v = q.poll();\n            for (int u : adj.get(v)) {\n                if (!used[u]) {\n                    used[u] = true;\n                    q.offer(u);\n                    if (u % 2 == 1) {\n                        d[u] = d[v] + 1;\n                    } else {\n                        d[u] = d[v] + 2;\n                    }\n                }\n            }\n        }\n    }\n}",
    "submit_ts": "1722699457",
    "subm_id": "1343212260"
}