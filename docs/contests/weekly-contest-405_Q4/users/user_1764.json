{
    "username": "raman_111",
    "submission": "\n\n\n    \nclass Solution {\npublic:\n    struct TrieNode {\n        vector<pair<int, int>> word_ends;\n    map<char, TrieNode*> children;\n    \n    };\n\n    void insert(TrieNode* root,string word, int index, int cost) {\n        TrieNode* node = root;\n        for (int i=0;i<word.size();i++) {\n            char c=word[i];\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.push_back({index, cost});\n    }\n\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(50004, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root=new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root,words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) {\n                    break;\n                }\n                node = node->children[target[j]];\n                for (auto& p : node->word_ends) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX)\n        return -1;\n        else\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324428",
    "subm_id": "1312399223"
}