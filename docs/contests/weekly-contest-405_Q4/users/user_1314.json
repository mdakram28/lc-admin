{
    "username": "piscesayush",
    "submission": "class Solution {\n    struct TrieNode{\n        vector<TrieNode *> nodes;\n        int cost;\n        \n        TrieNode():nodes(26, nullptr), cost{-1}{}\n    };\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode *head = new TrieNode;\n        for(int i = 0; i < words.size(); i++){\n            auto temp = head;\n            for(auto &c:words[i]){\n                if(!temp->nodes[c-'a']){\n                    temp->nodes[c-'a'] = new TrieNode;\n                }\n                temp = temp->nodes[c-'a'];\n            }\n            if(temp->cost == -1){\n                temp->cost = costs[i];            \n            }else{\n                temp->cost = min(temp->cost, costs[i]);\n            }\n        }\n        vector<long long> dp(target.size(), -1);\n        auto ans = recurse(0, head, target, dp);\n        if(ans >= INT_MAX) return -1;\n        return ans;\n    }\n    \n    long long recurse(int index, TrieNode* &head, string &target, vector<long long> &dp){\n        if(index >= target.size()) return 0;\n        if(dp[index] != -1) return dp[index];\n        \n        auto temp = head;\n        long long ans = (long long)INT_MAX;\n        for(int i = index; i < target.size(); i++){\n            temp = temp->nodes[target[i]-'a'];\n            if(!temp) break;\n            if(temp->cost != -1){\n                ans = min(ans, temp->cost + recurse(i+1, head, target, dp));\n            }\n        }\n        //cout<<ans<<endl;\n        dp[index] = ans;\n        return ans;\n    }\n};",
    "submit_ts": "1720323921",
    "subm_id": "1312387309"
}