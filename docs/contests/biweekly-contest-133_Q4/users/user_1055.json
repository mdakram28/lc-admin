{
    "username": "shiva0102",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& constraints) {\n         const int MODULO = 1'000'000'007;  // Modulo value for results\n        const int MAX_INVERSIONS = 400;    // Maximum allowed inversions\n\n        // Map to store constraints: key is the length, value is the target inversions\n        unordered_map<int, int> constraintsMap;  \n\n        // Populate the constraints map from the input vector\n        for (const auto& constraint : constraints) {\n            constraintsMap[constraint[0] + 1] = constraint[1];\n        }\n\n        // DP table to store the number of permutations for given length and inversions\n        vector<vector<long>> permutationsCount(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        permutationsCount[0][0] = 1;  // Base case: one way to arrange 0 elements\n\n        // Fill the DP table using nested do-while loops\n        int length = 1;\n        do {\n            int inversions = 0;\n            do {\n                int position = 0;\n                do {\n                    int previousInversions = inversions - position;\n                    if (previousInversions >= 0) {\n                        permutationsCount[length][inversions] = \n                            (permutationsCount[length][inversions] + permutationsCount[length - 1][previousInversions]) % MODULO;\n                    }\n                    position++;\n                } while (position < length);\n                inversions++;\n            } while (inversions <= MAX_INVERSIONS);\n\n            // Apply constraints if present for the current length\n            if (constraintsMap.count(length)) {\n                int requiredInversions = constraintsMap[length];\n                int inversions = 0;\n                do {\n                    if (inversions != requiredInversions) {\n                        permutationsCount[length][inversions] = 0;\n                    }\n                    inversions++;\n                } while (inversions <= MAX_INVERSIONS);\n            }\n\n            length++;\n        } while (length <= n);\n\n        // Sum up all valid permutations for the full length\n        long result = 0;\n        int inversions = 0;\n        do {\n            result = (result + permutationsCount[n][inversions]) % MODULO;\n            inversions++;\n        } while (inversions <= MAX_INVERSIONS);\n\n        return static_cast<int>(result);  // Return the result as an integer\n    }\n};",
    "submit_ts": 1719071894.0
}