{
    "username": "kumud22",
    "submission": "struct TrieNode {\n    TrieNode* children[26];\n    int minCost;        \n    bool isEndOfWord;\n\n    TrieNode() : minCost(INT_MAX), isEndOfWord(false) {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string &word, int cost) {\n        TrieNode* node = root;\n        int len = word.size();\n        for (int i = 0; i < len; ++i) {\n            int index = word[i] - 'a';\n            if (!node->children[index]) {\n                node->children[index] = new TrieNode();\n            }\n            node = node->children[index];\n        }\n        node->minCost = min(node->minCost, cost);\n        node->isEndOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (!node->children[index]) break;\n                node = node->children[index];\n                if (node->isEndOfWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322782",
    "subm_id": "1312358987"
}