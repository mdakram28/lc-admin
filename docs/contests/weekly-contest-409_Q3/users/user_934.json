{
    "username": "abhishek_k11",
    "submission": "auto init = []() { \n    ios::sync_with_stdio(false); \n    cin.tie(nullptr); \n    cout.tie(nullptr); \n    return 'c'; \n}();\n\n#define VECTOR_INT vector<int>\n#define MATRIX_INT vector<vector<int>>\n#define SET_INT set<int>\n#define MAX_SIZE 100000\n\ntypedef int IndexType;\ntypedef VECTOR_INT DistanceVector;\ntypedef MATRIX_INT QueryMatrix;\ntypedef SET_INT IndexSet;\n\nclass Solution {\npublic:\n    using ComputeDistancesFunc = DistanceVector(*)(IndexType);\n    using InitializeSetFunc = IndexSet(*)(IndexType);\n\n    ComputeDistancesFunc computeDistances = [](IndexType total) -> DistanceVector {\n        DistanceVector distances(total, 0);\n        for (IndexType i = 1; i < total; ++i) {\n            distances[i] = distances[i - 1] + 1;\n        }\n        return distances;\n    };\n\n    InitializeSetFunc initializeSet = [](IndexType total) -> IndexSet {\n        IndexSet indices;\n        for (IndexType i = 0; i < total; ++i) {\n            indices.insert(i);\n        }\n        return indices;\n    };\n\n    DistanceVector shortestDistanceAfterQueries(IndexType total, QueryMatrix& queries) {\n        DistanceVector distances = computeDistances(total);\n        IndexSet indices = initializeSet(total);\n        DistanceVector results;\n\n        for (const auto& query : queries) {\n            IndexType left = query[0];\n            IndexType right = query[1];\n\n            auto lower = indices.lower_bound(left + 1);\n            auto upper = indices.lower_bound(right);\n\n            indices.erase(lower, upper);\n\n            results.push_back(indices.size() - 1);\n        }\n\n        return results;\n    }\n};",
    "submit_ts": "1722743579",
    "subm_id": "1343795131"
}