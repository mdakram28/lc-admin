{
    "username": "ZPLfSME6JC",
    "submission": "#include <stdio.h>\n#include <stdlib.h>\n#include <string.h>\n\n#define MOD 1000000007\n#define MAX_INV 400\n\nint calcResult(long long permCnts[][MAX_INV + 1], int n) {\n    long long res = 0;\n    for (int i = 0; i <= MAX_INV; i++) {\n        res = (res + permCnts[n][i]) % MOD;\n    }\n    return (int)res;\n}\n\n\nvoid computePermutations(int len, long long permCnts[][MAX_INV + 1], int* reqMap, int mapSize) {\n    for (int inv = 0; inv <= MAX_INV; inv++) {\n        for (int newPos = 0; newPos < len; newPos++) {\n            int prevInv = inv - newPos;\n            if (prevInv >= 0) {\n                permCnts[len][inv] = (permCnts[len][inv] + permCnts[len - 1][prevInv]) % MOD;\n            }\n        }\n    }\n    if (reqMap[len] != -1) {\n        int tgtInv = reqMap[len];\n        for (int inv = 0; inv <= MAX_INV; inv++) {\n            if (inv != tgtInv) {\n                permCnts[len][inv] = 0;\n            }\n        }\n    }\n}\n\n\nint numberOfPermutations(int n, int** requirements, int requirementsSize, int* requirementsColSize) {\n    \n    int* reqMap = (int*)malloc((n + 1) * sizeof(int));\n    memset(reqMap, -1, (n + 1) * sizeof(int));\n\n    \n    for (int i = 0; i < requirementsSize; i++) {\n        reqMap[requirements[i][0] + 1] = requirements[i][1];\n    }\n\n    \n    long long permCnts[n + 1][MAX_INV + 1];\n    memset(permCnts, 0, sizeof(permCnts));\n    permCnts[0][0] = 1;\n\n    \n    for (int len = 1; len <= n; len++) {\n        computePermutations(len, permCnts, reqMap, n + 1);\n    }\n\n    \n    int result = calcResult(permCnts, n);\n\n\n    free(reqMap);\n\n    return result;\n}",
    "submit_ts": 1719071896.0
}