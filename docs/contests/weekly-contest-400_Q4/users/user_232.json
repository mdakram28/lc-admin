{
    "username": "nicholasfoocl",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n    SegmentTree(vector<int>& arr){\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int>& arr, int node, int start,\n               int end){\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return (1<<30)-1;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\n\n\nclass Solution {\npublic:\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int ans = INT_MAX;\n        for(int i=0; i<n; i++){\n            int low = i, high = n-1;\n            while(low<high){\n                int mid = (low+high+1)/2;\n                // cout << low << ' ' << mid << ' ' << high << ' ' << st.query(i,mid) << endl;\n                if(st.query(i,mid)>k) low = mid;\n                else high = mid-1;\n            }\n            // cout << i << ' ' << low << endl;\n            ans = min({ans, abs(k-st.query(i,low)), abs(k-st.query(i,low+1))});\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297623.0
}