{
    "username": "leetcode_3604",
    "submission": "class Solution {\npublic:\n    vector<int> g[100010];\n    int ans;\n    int dfs(int x, int fa) {\n        int mx1 = 0;\n        int mx2 = 0;\n        for (int i = 0; i < g[x].size(); ++i) {\n            int v = g[x][i];\n            if (v == fa) continue;\n            int a = dfs(v, x) + 1;\n            if (mx1 < a) {\n                mx2 = mx1;\n                mx1 = a;\n            } else if(mx2 < a) {\n                mx2 = a;\n            }\n        }\n        if(ans < mx1 + mx2) {\n            ans = mx1 + mx2;\n        }\n        return mx1;\n    }\n    int getMaxDis(vector<vector<int>>& edge) {\n        for(int i = 0; i < 100010; ++i) g[i].clear();\n        for(int i = 0; i < edge.size(); ++i) {\n            int a = edge[i][0];\n            int b = edge[i][1];\n            g[a].push_back(b);\n            g[b].push_back(a);\n        }\n        ans = 0;\n        dfs(0, -1);\n        return ans;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int l1 = getMaxDis(edges1);\n        int l2 = getMaxDis(edges2);\n        int res = (l1+1)/2 + (l2+1)/2 + 1;\n        //printf(\"%d %d\\n\", l1, l2);\n        //if(l1 == 0 || l2 == 0) return l1+l2;\n        //else \n        int v = max(l1, l2);\n        return max(res, v);\n    }\n};",
    "submit_ts": 1719719681.0
}