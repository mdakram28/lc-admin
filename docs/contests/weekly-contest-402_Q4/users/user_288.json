{
    "username": "theonepieceisreal",
    "submission": "class LazySegmentTree:\n    def __init__(self, N):\n        self.n = N\n        self.tree = [0] * (4 * self.n)\n        self.lazy = [0] * (4 * self.n)\n    \n    def build(self, v, tl, tr, arr):\n        if tl > tr: return\n\n        if tl == tr:\n            self.tree[v] = arr[tl]\n        else:\n            tm = tl + (tr - tl) // 2\n            self.build(v * 2, tl, tm, arr)\n            self.build(v * 2 + 1, tm + 1, tr, arr)\n            self.tree[v] = self.tree[v * 2] + self.tree[v * 2 + 1]\n\n    def push(self, v):\n        self.tree[v*2] += self.lazy[v]\n        self.lazy[v*2] += self.lazy[v]\n        self.tree[v*2+1] += self.lazy[v]\n        self.lazy[v*2+1] += self.lazy[v]\n        self.lazy[v] = 0\n\n    def query(self, v, tl, tr, l, r):\n        if l > r: return 0\n\n        if tl >= l and tr <= r:\n            return self.tree[v]\n        \n        self.push(v)\n        tm = tl + (tr - tl) // 2\n\n        return self.query(2 * v, tl, tm, l, min(tm, r)) + self.query(2 * v + 1, tm + 1, tr, max(tm + 1, l), r)\n\n    def update(self, v, tl, tr, l, r, value):\n        if l > r: return\n\n        if tl >= l and tr <= r:\n            self.tree[v] += value\n            self.lazy[v] += value\n        else:\n            self.push(v)\n\n            tm = tl + (tr - tl) // 2\n\n            self.update(2 * v, tl, tm, l, min(tm, r), value)\n            self.update(2 * v + 1, tm + 1, tr, max(tm + 1, l), r, value)\n            self.tree[v] = self.tree[2 * v] + self.tree[2 * v + 1]\n            \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        N = len(nums)\n        isPeaked = [0] * N\n        res = []\n        \n        for i in range(1, N - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                isPeaked[i] = 1\n        \n        # print(isPeaked)\n        st = LazySegmentTree(N)\n        st.build(1, 0, N - 1, isPeaked)\n        \n        for query in queries:\n            if query[0] == 1:\n                # print(\"q\", isPeaked)\n                _, l, r = query\n                v = st.query(1, 0, N - 1, l + 1, r - 1)\n                res.append(v)\n            else:\n                _, index, val = query\n                nums[index] = val\n                \n                for j in [index - 1, index, index + 1]:\n                    count = int(0 < j < N - 1 and nums[j] > nums[j - 1] and nums[j] > nums[j + 1])\n                    if j < N and count != isPeaked[j]:\n                        # print('hi', j, count, isPeaked[j], count - isPeaked[j])\n                        st.update(1, 0, N - 1, j, j, count - isPeaked[j])\n                        isPeaked[j] = count\n                \n        \n        return res",
    "submit_ts": "1718507059",
    "subm_id": "1289639848"
}