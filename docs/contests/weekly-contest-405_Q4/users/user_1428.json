{
    "username": "Anirban_780",
    "submission": "// TrieNode definition\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> word_ends; // (index, cost) pairs for words ending at this node\n};\n\n// Trie class definition\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    // Insert word and its index with associated cost into Trie\n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->word_ends.emplace_back(index, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) \n    {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); // dp[i] will store the minimum cost to form target[0...i-1]\n        dp[0] = 0; // cost to form an empty string is 0\n\n        Trie trie;\n        \n        // Insert words into Trie with their indices and costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        // Traverse through each character of target\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue; // If no valid path to form target[0...i-1], skip\n            }\n\n            TrieNode* node = trie.root;\n\n            // Traverse Trie to find matches starting from current character i\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (!node->children.count(c)) {\n                    break; // No word in Trie matches prefix target[i...j]\n                }\n                node = node->children[c];\n\n                // Update dp array with costs of words ending at current Trie node\n                for (auto& p : node->word_ends) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323871",
    "subm_id": "1312386058"
}