{
    "username": "Michael_Zheng",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        # [1, 1, 1, 2]\n        # [1, -2, 2]\n        # find diff array, iterate through\n        # matchihg segments we can just add the diff between each num\n        # if segments change just add abs value of new segment\n\n        diff = [(x - y) for x, y in zip(nums, target)]\n        \n        l = 0\n        prev = None\n        ret = 0\n        # print(diff)\n        def calculate(l, r):\n            if l == r: return\n            subarr = [abs(x) for x in diff[l:r]]\n            n = len(subarr)\n            if n == 0:\n                return 0\n\n            operations = 0\n\n            for i in range(n):\n                if i == 0 or subarr[i] > subarr[i-1]:\n                    operations += subarr[i] - (subarr[i-1] if i > 0 else 0)\n            # print((subarr, operations))\n            nonlocal ret\n            ret += operations\n\n        for r in range(len(diff)):\n            if diff[r] > 0:\n                if prev == None or prev == False:\n                    calculate(l, r)\n                    prev = True\n                    l = r\n            elif diff[r] == 0:\n                prev = None\n                calculate(l, r)\n                l = r\n            else:\n                if prev == None or prev == True:\n                    calculate(l, r)\n                    prev = False\n                    l = r\n            # print((diff[r], prev))\n        calculate(l, len(diff))\n        return ret\n            ",
    "submit_ts": "1721532434",
    "subm_id": "1327985706"
}