{
    "username": "relaxed-yalowzt2",
    "submission": "\ntype segmentTree struct {\n\tsum  []int\n\tlazy []int\n\ttag  []bool\n\tn    int\n}\n\nfunc initsegmentTree(n int) segmentTree {\n\treturn segmentTree{\n\t\tsum:  make([]int, n*4),\n\t\tlazy: make([]int, n*4),\n\t\ttag:  make([]bool, n*4),\n\t\tn:    n,\n\t}\n}\n\n// \u7528\u5b50\u533a\u95f4\u7684\u503c\u66f4\u65b0\u5f53\u524d\u533a\u95f4\nfunc (t *segmentTree) maintain(o int) {\n\tt.sum[o] = t.sum[o*2] + t.sum[o*2+1]\n}\n\n// \u66f4\u65b0\u5355\u4e2a\u6ee1\u533a\u95f4\nfunc (t *segmentTree) flush(o, l, r, val int) {\n\tt.sum[o] = (r - l + 1) * val\n\tt.lazy[o] = val\n\tt.tag[o] = true\n}\n\n// \u533a\u95f4\u66f4\u65b0\nfunc (t *segmentTree) update(o, l, r, L, R, val int) {\n\t// \u5f85\u66f4\u65b0\u533a\u95f4\u5b8c\u5168\u5305\u542b\u4e86\u5f53\u524d\u533a\u95f4\uff0c\u53ef\u4ee5\u66f4\u65b0\u5f53\u524d\u533a\u95f4\u540e\u76f4\u63a5\u8fd4\u56de\n\tif L <= l && r <= R {\n\t\tt.flush(o, l, r, val)\n\t\t// t.sum[o] += (r - l + 1) * val\n\t\t// t.lazy[o] += val\n\t\t// t.tag[o] = true\n\t\treturn\n\t}\n\tmid := l + (r-l)>>1\n\t// \u5f53\u524d\u533a\u95f4\u5e73\u8861\u6027\u88ab\u7834\u574f\uff0c\u9700\u8981\u5237\u65b0\u4e00\u4e0blazy\u6570\u636e\u7ed9\u5b50\u533a\u95f4\n\t// if t.lazy[o] > 0 {\n\tif t.tag[o] {\n\t\tt.flush(o*2, l, mid, t.lazy[o])\n\t\tt.flush(o*2+1, mid+1, r, t.lazy[o])\n\t\tt.lazy[o] = 0\n\t\tt.tag[o] = false\n\t}\n\tif L <= mid { // \u66f4\u65b0\u5de6\u5b50\u533a\u95f4\n\t\tt.update(o*2, l, mid, L, R, val)\n\t}\n\tif R > mid { // \u66f4\u65b0\u53f3\u5b50\u533a\u95f4\n\t\tt.update(o*2+1, mid+1, r, L, R, val)\n\t}\n\tt.maintain(o)\n}\n\n// \u533a\u95f4\u67e5\u8be2\nfunc (t *segmentTree) query(o, l, r, L, R int) int {\n\tif L <= l && r <= R {\n\t\treturn t.sum[o]\n\t}\n\tmid := l + (r-l)>>1\n\t// \u5411\u5b50\u6811\u67e5\u8be2\uff0c\u9700\u8981\u66f4\u65b0\u5b50\u6811\u5b9e\u9645\u4fe1\u606f\u5e76\u4e0b\u4f20lazy\u6570\u636e\u7ed9\u5b50\u533a\u95f4\n\t// if t.lazy[o] > 0 {\n\tif t.tag[o] {\n\t\tt.flush(o*2, l, mid, t.lazy[o])\n\t\tt.flush(o*2+1, mid+1, r, t.lazy[o])\n\t\tt.lazy[o] = 0\n\t\tt.tag[o] = false\n\t}\n\tsum := 0\n\tif L <= mid {\n\t\tsum += t.query(o*2, l, mid, L, R)\n\t}\n\tif R > mid {\n\t\tsum += t.query(o*2+1, mid+1, r, L, R)\n\t}\n\treturn sum\n}\n\nfunc shortestDistanceAfterQueries(n int, queries [][]int) []int {\n\n\tt := initsegmentTree(n)\n\tt.update(1, 0, n-2, 0, n-2, 1)\n\n\t// fmt.Println(t.query(1, 0, n-2, 0, n-2))\n\n\tans := make([]int, 0, len(queries))\n\tfor _, q := range queries {\n\t\tfirst, second := q[0], q[1]\n\t\tif t.query(1, 0, n-2, first, second-1) > 1 {\n\t\t\tt.update(1, 0, n-2, first, second-2, 0)\n\t\t\tt.update(1, 0, n-2, second-1, second-1, 1)\n\t\t}\n\t\tans = append(ans, t.query(1, 0, n-2, 0, n-2))\n\t}\n\n\treturn ans\n\n}\n",
    "submit_ts": "1722741256",
    "subm_id": "552337038"
}