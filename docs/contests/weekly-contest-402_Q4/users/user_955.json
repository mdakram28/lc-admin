{
    "username": "pandrei66",
    "submission": "from typing import List\n\nT = int # alias\n\nDEFAULT_T: T = 0\n\nclass SegmentTree:\n    def __init__(self, data: List[T], default: T = DEFAULT_T) -> None:\n        self._len: int = len(data)\n        self._data: List[T] = [default for _ in range(self._len)] + data\n\n        self._default: T = default\n\n        for index in reversed(range(self._len)):\n            self._data[index] = self._data[2 * index] + self._data[2 * index + 1]\n        pass\n\n    def __len__(self) -> int:\n        return self._len\n\n    def __getitem__(self, index: int) -> T:\n        return self._data[index + self._len]\n\n    def __setitem__(self, index: int, value: T) -> None:\n        index += self._len\n        self._data[index] = value\n        index >>= 1\n        while index:\n            self._data[index] = self._data[2 * index] + self._data[2 * index + 1]\n            index >>= 1\n\n    def __delitem__(self, index: int) -> None:\n        self[index] = self._default\n\n    def get_value(self, begin: int, end: int) -> T:\n        \"\"\"\n        returns func(data[begin:end])\n        \"\"\"\n        begin += self._len\n        end += self._len\n\n        left_value: T = self._default\n        right_value: T = self._default\n        while begin < end:\n            if begin & 1:\n                left_value = left_value + self._data[begin]\n                begin += 1\n            if end & 1:\n                end -= 1\n                right_value = self._data[end] + right_value\n            begin >>= 1\n            end >>= 1\n\n        return left_value + right_value\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n: int = len(nums)\n\n        peaks: List[int] = [0] * n\n        for i in range(1, n-1):\n            if nums[i-1] < nums[i] > nums[i+1]:\n                peaks[i] = 1\n\n        st: SegmentTree = SegmentTree(peaks)\n\n        def update_st(pos: int):\n            if 0 < pos < n - 1:\n                if nums[pos-1] < nums[pos] > nums[pos+1]:\n                    st[pos] = 1\n                else:\n                    st[pos] = 0\n            \n        ans: List[int] = []\n        for q in queries:\n            if q[0] == 1:\n                if q[1] + 2 > q[2]:\n                    ans.append(0)\n                else:\n                    ans.append(st.get_value(q[1]+1, q[2]))\n            else:\n                pos: int = q[1]\n                val: int = q[2]\n                nums[pos] = val\n                update_st(pos - 1)\n                update_st(pos)\n                update_st(pos + 1)\n        return ans",
    "submit_ts": "1718509176",
    "subm_id": "1289701409"
}