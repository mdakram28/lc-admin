{
    "username": "deepcoder1",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], target: int) -> int:\n\n        def xyz(x):\n            return [i for i, x in enumerate(reversed(bin(x)[2:])) if x == '1']\n\n        def pqr(wl, bt):\n            return sum((1 << key) for key, count in bt.items() if count == wl)\n\n        cav = nums[0]\n        ans = abs(cav - target)\n\n        wbc = Counter(xyz(nums[0]))\n\n        left_idx = right_idx = 0\n        while right_idx < len(nums):\n            if cav > target or left_idx > right_idx:\n                right_idx += 1\n                if right_idx >= len(nums):\n                    break\n                wbc += Counter(xyz(nums[right_idx]))\n            else:\n                wbc -= Counter(xyz(nums[left_idx]))\n                left_idx += 1\n\n            cav = pqr(right_idx - left_idx + 1, wbc)\n\n            if left_idx <= right_idx:\n                ans = min(ans, abs(cav - target))\n\n        return ans\n",
    "submit_ts": "1717298676",
    "subm_id": "1274787393"
}