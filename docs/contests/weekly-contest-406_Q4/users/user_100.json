{
    "username": "sethles",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int nV = 0, nH = 0;\n        PriorityQueue<int[]> q = new PriorityQueue<>((a, b) -> Integer.compare(b[1], a[1]));\n        for (int hC : horizontalCut) q.offer(new int[]{0, hC});\n        for (int vC : verticalCut) q.offer(new int[]{1, vC});\n        long cost = 0;\n        while (!q.isEmpty()) {\n            int[] todo = q.poll();\n            long dir = todo[0], forCur = todo[1];\n            if (dir == 0l) {\n                cost += (nV + 1) * forCur;\n                nH++;\n                continue;\n            }\n            cost += (nH + 1) * forCur;\n            nV++;\n        }\n        return cost;\n    }\n}",
    "submit_ts": "1720924711",
    "subm_id": "1320227820"
}