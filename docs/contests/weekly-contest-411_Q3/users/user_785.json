{
    "username": "tea9296",
    "submission": "\n\ndef generate_next_pa(num_str):\n    n = len(num_str)\n    if n == 1:\n        return str(int(num_str) - 1)\n    sys.set_int_max_str_digits(100000)\n    half_len = (n + 1) // 2\n    left_half = num_str[:half_len]\n    if n % 2 == 0:\n        new_pa = left_half + left_half[::-1]\n    else:\n        new_pa = left_half + left_half[-2::-1]\n\n    if new_pa < num_str:\n        return new_pa\n\n    left_half = str(int(left_half) - 1)\n    if n % 2 == 0:\n        return left_half + left_half[::-1]\n    else:\n        return left_half + left_half[-2::-1]\n\n\ndef is_div_by_k(num_str, k):\n    if k == 1:\n        return True\n    elif k == 2:\n        return int(num_str[-1]) % 2 == 0\n    elif k == 3:\n        return sum(int(digit) for digit in num_str) % 3 == 0\n    elif k == 4:\n        return int(num_str[-2:]) % 4 == 0\n    elif k == 5:\n        return num_str[-1] in '05'\n    elif k == 6:\n        return int(num_str[-1]) % 2 == 0 and sum(\n            int(digit) for digit in num_str) % 3 == 0\n    elif k == 7:\n        sequence = [1, 3, 2, -1, -3, -2]\n        total = 0\n        for i, digit in enumerate(reversed(num_str)):\n            total += int(digit) * sequence[i % len(sequence)]\n        return total % 7 == 0\n    elif k == 8:\n        return int(num_str[-3:]) % 8 == 0\n    elif k == 9:\n        return sum(int(digit) for digit in num_str) % 9 == 0\n\ndef generate_largest_palindromic(n, k):\n    if k == 1:\n        return '9' * n\n    elif k == 2:\n        if n == 1:\n            return '8'\n        return '8' + '9' * (n - 2) + '8'\n    elif k == 3:\n        return '9' * n\n    elif k == 4:\n        if n <= 4:\n            return '8' * n\n        return '88' + '9' * (n - 4) + '88'\n    elif k == 5:\n        if n == 1:\n            return '5'\n        return '5' + '9' * (n - 2) + '5'\n    elif k == 6:\n        if n == 1:\n            return '6'\n        if n == 2:\n            return '66'\n        if n == 3:\n            return '888'\n        if n == 4:\n            return '8778'\n        if n >= 5:\n            if n % 2 == 0:\n                return '8' + '9' * ((n - 4) // 2) + '77' + '9' * (\n                    (n - 4) // 2) + '8'  # Example: 8999999977999998\n            else:\n                return '8' + '9' * ((n - 3) // 2) + '8' + '9' * (\n                    (n - 3) // 2) + '8'  # Example: 8999998999998\n    elif k == 7:\n        # No simple rule for 7, use direct division\n        max_num = '9' * n\n        while int(max_num) % 7 != 0:\n            max_num = str(int(max_num) - 1)\n        return max_num\n    elif k == 8:\n        if n <= 6:\n            return '8' * n\n        return '8' * 3 + '9' * (n - 6) + '8' * 3\n    elif k == 9:\n        return '9' * n\n\n\n\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k==7:\n\n            max_num = '9' * n\n\n            while True:\n                if is_div_by_k(max_num, k):\n                    return max_num\n                max_num = generate_next_pa(max_num)\n\n        else:\n            return generate_largest_palindromic(n,k)",
    "submit_ts": "1723953363",
    "subm_id": "1359819263"
}