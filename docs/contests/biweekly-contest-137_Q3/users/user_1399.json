{
    "username": "Soham Mahajan",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        long maxSum = Long.MIN_VALUE;\n\n        // Step 1: Precompute the top 3 values and their columns for each row\n        int[][][] topValues = new int[m][3][2]; // [row][top 3][0: value, 1: column index]\n\n        for (int i = 0; i < m; i++) {\n            int[][] rowValues = new int[n][2];\n            for (int j = 0; j < n; j++) {\n                rowValues[j][0] = board[i][j]; // value\n                rowValues[j][1] = j;           // column index\n            }\n            // Sort the row based on values in descending order\n            Arrays.sort(rowValues, (a, b) -> Integer.compare(b[0], a[0]));\n\n            // Store the top 3 values and their column indices\n            for (int k = 0; k < 3 && k < n; k++) {\n                topValues[i][k][0] = rowValues[k][0];\n                topValues[i][k][1] = rowValues[k][1];\n            }\n        }\n\n        // Step 2: Try all combinations of 3 different rows\n        for (int r1 = 0; r1 < m; r1++) {\n            for (int r2 = r1 + 1; r2 < m; r2++) {\n                for (int r3 = r2 + 1; r3 < m; r3++) {\n                    // Step 3: Try to pick non-overlapping columns from the top 3 of each row\n                    for (int c1 = 0; c1 < 3; c1++) {\n                        for (int c2 = 0; c2 < 3; c2++) {\n                            if (topValues[r1][c1][1] == topValues[r2][c2][1]) continue;\n                            for (int c3 = 0; c3 < 3; c3++) {\n                                if (topValues[r1][c1][1] == topValues[r3][c3][1] ||\n                                    topValues[r2][c2][1] == topValues[r3][c3][1]) continue;\n\n                                // Calculate the sum of this valid combination\n                                long sum = (long) topValues[r1][c1][0] + topValues[r2][c2][0] + topValues[r3][c3][0];\n                                maxSum = Math.max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n}",
    "submit_ts": "1723906718",
    "subm_id": "1359068571"
}