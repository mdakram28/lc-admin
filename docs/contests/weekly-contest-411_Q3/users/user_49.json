{
    "username": "pku_erutan",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if n <= 5 :\n            for t in range(10**n-1, -1, -1) :\n                st = str(t)\n                if not st == st[::-1] :\n                    continue\n                if t % k == 0 :\n                    return str(t)\n                \n        if k == 1 or k == 3 or k == 9:\n            return '9' * n\n        if k == 2 :\n            return '8' + '9'*(n-2) + '8'\n        if k == 4 :\n            return '88' + '9'*(n-4) + '88'\n        if k == 8 :\n            return '888' + '9'*(n-6) + '888'\n        if k == 5 :\n            return '5' + '9'*(n-2) + '5'\n        if k == 7 :\n            now7 = (pow(10, n, 7) - 1) % 7\n            # print(now7)\n            if n % 2 == 0 :\n                mid = 11 * pow(10, n//2-1, 7)\n                for i in range(10) :\n                    if mid * i % 7 == now7 :\n                        return '9' * (n//2-1) + str(9-i)*2  + '9' * (n//2-1)\n            else :\n                mid = pow(10, n//2, 7)\n                for i in range(10) :\n                    if mid * i % 7 == now7 :\n                        return '9' * (n//2) + str(9-i) + '9' * (n//2)\n        if k == 6 :\n            if n % 2 == 0 :\n                return '8' + '9' * (n//2-2) + '77' + '9' * (n//2-2) + '8'\n            else :\n                return '8'+'9' * (n//2-1) + '8' + '9' * (n//2-1) + '8'\n            \n        assert False\n        \n        ",
    "submit_ts": "1723949673",
    "subm_id": "556394244"
}