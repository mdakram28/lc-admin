{
    "username": "wxy9018",
    "submission": "class Solution:\n    def minimumArea(self, grid, pos1, pos2):\n        up, down, left, right = sys.maxsize, 0, sys.maxsize, 0\n        \n        R1, C1 = pos1\n        R2, C2 = pos2\n        \n        if R1 > R2 or C1 > C2:\n            return 0\n        \n        for r in range(R1, R2+1):\n            for c in range(C1, C2+1):\n                if grid[r][c]:\n                    up = min(up, r)\n                    down = max(down, r)\n                    left = min(left, c)\n                    right = max(right, c)\n        \n        if up > down or left > right:\n            return 0\n        \n        return (down-up+1) * (right-left+1)\n    \n    def minimumSum(self, grid: List[List[int]]) -> int:\n        mem = {}\n        \n        \n        def helper(pos1, pos2, n): # split the area of pos1=[r1, c1] to pos2=[r2, c2] into n rectangles that covers the area. Both inclusive\n            if (pos1, pos2, n) in mem:\n                return mem[pos1, pos2 ,n]\n            \n            R1, C1 = pos1\n            R2, C2 = pos2\n            if R1 > R2 or C1 > C2:\n                return 0\n\n            #print(pos1, pos2, n)\n            \n            if n == 1:\n                area = self.minimumArea(grid, pos1, pos2)\n            else:\n                area = (R2-R1+1) * (C2+C1+1)\n                \n                for r in range(R1, R2):\n                    for k in range(1, n):\n                        part1 = helper((R1, C1), (r, C2), k)\n                        part2 = helper((r+1, C1), (R2, C2), n-k)\n                        #if n == 3:\n                        #    print(\"r: \", r, part1, part2)\n                        area = min(area, part1 + part2)\n                \n                for c in range(C1, C2):\n                    for k in range(1, n):\n                        part1 = helper((R1, C1), (R2, c), k)\n                        part2 = helper((R1, c+1), (R2, C2), n-k)\n                        #if n == 3:\n                        #    print(\"c: \", c, part1, part2)\n                        area = min(area, part1 + part2)\n\n            mem[pos1, pos2, n] = area\n            return area\n\n        R, C = len(grid), len(grid[0])\n        res = helper((0, 0), (R-1, C-1), 3)\n        \n        #for key in mem:\n        #    pos1, pos2, n = key\n        #    if n > 1:\n        #        print(key, mem[key])\n        \n        return res",
    "submit_ts": 1719113448.0
}