{
    "username": "gordonm0253",
    "submission": "class Solution {\n\n    public long maximumValueSum(int[][] board) {\n        long max = Long.MIN_VALUE;\n        int m = board.length;\n        int n = board[0].length;\n        int[] rowMax = new int[m];\n        PriorityQueue<Square> pq = new PriorityQueue<Square>((Square a, Square b) -> a.val - b.val);\n        for (int i = 0; i < m; i++) {\n            rowMax[i] = board[i][0];\n        }\n        for (int i = 0; i < m; i++) {\n            pq.add(new Square(i, rowMax[i]));\n            if (pq.size() > 3) {\n                pq.poll();\n            }\n        }\n        for (int col = 1; col < n - 1; col++) {\n            Square s3 = pq.poll();\n            Square s2 = pq.poll();\n            Square s1 = pq.poll();\n                            \n            int r1 = s1.row;\n            int r2 = s2.row;\n            for (int row = 0; row < m; row++) {\n                for (int col2 = col + 1; col2 < n; col2++) {\n                    for (int row2 = 0; row2 < m; row2++) {\n                        if (row != row2) {\n                            long pair = (long) board[row][col] + (long) board[row2][col2];\n                            \n                            if (r1 != row && r1 != row2) {\n                                pair += s1.val;\n                            } else if (r2 != row && r2 != row2) {\n                                pair += s2.val;\n                            } else {\n                                pair += s3.val;\n                            }\n                            max = Math.max(pair, max);\n                        }\n\n                    }\n                }\n            }\n            for (int i = 0; i < m; i++) {\n                rowMax[i] = Math.max(rowMax[i], board[i][col]);\n            }\n            for (int i = 0; i < m; i++) {\n                if (pq.size() < 3) {\n                    pq.add(new Square(i, rowMax[i]));\n                } else {\n                    if (rowMax[i] > pq.peek().val) {\n                        pq.poll();\n                        pq.add(new Square(i, rowMax[i]));\n                    }\n                }\n            }\n        }\n        return max;\n    }\n\n    private class Square {\n        int row;\n        int val;\n\n        public Square(int row, int val) {\n            this.row = row;\n            this.val = val;\n        }\n    }\n}",
    "submit_ts": "1723909994",
    "subm_id": "1359213336"
}