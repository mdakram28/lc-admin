{
    "username": "Varsha_Swaraj",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n    long long totalCost = 0;\n    long long horizontalSegments = 1; // Initially 1 horizontal segment\n    long long verticalSegments = 1; // Initially 1 vertical segment\n\n    // Use two pointers to traverse the sorted cuts\n    long long i = 0, j = 0;\n    while (i < horizontalCut.size() && j < verticalCut.size()) {\n        if (horizontalCut[i] >= verticalCut[j]) {\n            totalCost += horizontalCut[i] * verticalSegments;\n            horizontalSegments++;\n            i++;\n        } else {\n            totalCost += verticalCut[j] * horizontalSegments;\n            verticalSegments++;\n            j++;\n        }\n    }\n\n    // Add remaining horizontal cuts\n    while (i < horizontalCut.size()) {\n        totalCost += horizontalCut[i] * verticalSegments;\n        i++;\n    }\n\n    // Add remaining vertical cuts\n    while (j < verticalCut.size()) {\n        totalCost += verticalCut[j] * horizontalSegments;\n        j++;\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720926161",
    "subm_id": "1320277800"
}