{
    "username": "CodeSagePath",
    "submission": "class TrieNode {\n    HashMap<Character, TrieNode> children;\n    int cost;\n\n    public TrieNode() {\n        children = new HashMap<>();\n        cost = Integer.MAX_VALUE;\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        node.cost = Math.min(node.cost, cost);\n    }\n}\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        Trie trie = new Trie();\n\n        // Insert all words into the Trie\n        for (int i = 0; i < words.length; ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // DP array to store minimum cost to construct substrings of target\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        // Fill DP array\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = trie.root;\n            for (int j = i; j < n; ++j) {\n                char c = target.charAt(j);\n                if (!node.children.containsKey(c)) break;\n                node = node.children.get(c);\n                if (node.cost != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.cost);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720324195",
    "subm_id": "1312393776"
}