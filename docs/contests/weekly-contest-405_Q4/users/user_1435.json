{
    "username": "ayush_bhut_007",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> record;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int ind, int len) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->record.push_back({ind, len});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, words[i].size());\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                for (const auto& [ind, len] : node->record) {\n                    dp[i + len] = min(dp[i + len], dp[i] + costs[ind]);\n                }\n            }\n        }\n\n        if(dp[n] == INT_MAX) return -1;\n        return dp[n];\n    }\n};\n",
    "submit_ts": "1720324180",
    "subm_id": "1312393428"
}