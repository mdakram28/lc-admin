{
    "username": "shashwt1",
    "submission": "#define ll int\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    ll n;\n    SegmentTree(vector<ll>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<ll>& arr, ll node, ll start,\n               ll end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            ll mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    ll query(ll l, ll r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    ll query(ll node, ll start, ll end, ll l, ll r)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        ll mid = (start + end) / 2;\n        ll p1 = query(2 * node + 1, start, mid, l, r);\n        ll p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\nclass Solution {\npublic:\n    long long solveK(vector<ll>& nums, ll k,SegmentTree& tr){\n        int n = nums.size();\n        int i=0,j=0;\n        long long ans = 0;\n        while(j<n){\n            while(i<=j && tr.query(i,j)<=k){\n                ans+=n-j;\n                i++;\n            }\n            j++;\n        }\n        return ans;\n    }\n    long long countSubarrays(vector<ll>& nums, ll k) {\n        int n = nums.size();\n        SegmentTree tr(nums);\n        return solveK(nums,k,tr) - solveK(nums,k-1,tr);\n    }\n};",
    "submit_ts": "1720281340",
    "subm_id": "1311821584"
}