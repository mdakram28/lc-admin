{
    "username": "praveen22711222",
    "submission": "class Solution {\npublic:\n\n    int maximumLength(vector<int>& nums, int k) {\n        map<int,vector<int>> S;\n        for (int i=0; i<nums.size(); i++){\n            S[nums[i]].push_back(i);\n        }\n        vector<vector<int>> dp(nums.size(), vector<int>(k+1,-1));\n        vector<int> suffix(nums.size());\n        for (int j=0; j<=k; j++){\n            if (j==0){\n                for (int i=0; i<nums.size(); i++){\n                    int idx = distance(lower_bound(S[nums[i]].begin(), S[nums[i]].end(), i), S[nums[i]].end());\n                    dp[i][j]=idx;\n                }\n                suffix[nums.size()-1]=dp[nums.size()-1][j];\n                for (int i=nums.size()-2; i>=0; i--){\n                    suffix[i]=max(suffix[i+1],dp[i][j]);\n                }\n                \n            }else{\n                for (int i=nums.size()-1; i>=0; i--){\n                    //find next occurence of this \n                    int maxi = 1;\n                    auto it = upper_bound(S[nums[i]].begin(), S[nums[i]].end(), i);\n                    if (it!=S[nums[i]].end()){\n                        int next_idx =  *it;\n                        maxi = max(maxi, 1+dp[next_idx][j]);\n                    }\n                    if (i!=nums.size()-1){\n                        maxi = max(maxi, suffix[i+1]+1);   \n                    }\n                    dp[i][j]=maxi;\n                }\n                suffix[nums.size()-1]=dp[nums.size()-1][j];\n                for (int i=nums.size()-2; i>=0; i--){\n                    suffix[i]=max(suffix[i+1],dp[i][j]);\n                }            \n            }\n        }\n        \n        //filled entire dp\n        \n        int maxi = 1;\n        for (int i=0; i<nums.size(); i++){\n            maxi = max(dp[i][k],maxi);    \n        }\n        return maxi;\n    }\n};",
    "submit_ts": 1717862127.0
}