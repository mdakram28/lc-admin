{
    "username": "user8557",
    "submission": "\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        const int n = colors.size();\n        vector<int> sameNextIndex; sameNextIndex.reserve(n);\n        for (int i = 0; i < n; i++) {\n            int nextIndex = (i + 1) % n;\n            if (colors[i] == colors[nextIndex]) {\n                sameNextIndex.push_back(i);\n            }\n        }\n        if (sameNextIndex.size() == 0) {\n            return n;\n        } else if (sameNextIndex.size() == 1) {\n            return n - (k - 1);\n        } else {\n            int res = 0;\n            for (int i = 1; i < sameNextIndex.size(); i++) {\n                int a = sameNextIndex[i - 1];\n                int b = sameNextIndex[i];\n                int len = b - a;\n                int cur = len - k + 1;\n                if (cur > 0) {\n                    res += cur;\n                }\n            }\n            {\n                int a = sameNextIndex.back();\n                int b = sameNextIndex.front() + n;\n                int len = b - a;\n                int cur = len - k + 1;\n                if (cur > 0) {\n                    res += cur;\n                }\n            }\n            return res;\n        }\n    }\n\nprivate:\n    bool isInterleave(const vector<int>& colors, int from, int to) {\n        const int n = colors.size();\n        for (int i = from; i != to; i = (i + 1) % n) {\n            int nextIndex = (i + 1) % n;\n            if (colors[i] == colors[nextIndex]) {\n                return false;\n            }\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1720278003",
    "subm_id": "544560117"
}