{
    "username": "harshmathur_1503",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\n// TrieNode represents a node in the Trie\nclass TrieNode {\npublic:\n    TrieNode* children[26];  // Children nodes for each character 'a' to 'z'\n    int minCost;             // Minimum cost to reach this node\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n        minCost = INT_MAX;\n    }\n\n    ~TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            if (children[i] != nullptr) {\n                delete children[i];\n            }\n        }\n    }\n};\n\n// Trie class to handle operations on TrieNodes\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    // Insert a word into the Trie with its associated cost\n    void insert(string word, int cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (current->children[index] == nullptr) {\n                current->children[index] = new TrieNode();\n            }\n            current = current->children[index];\n        }\n        // Update minimum cost to reach this node\n        current->minCost = min(current->minCost, cost);\n    }\n\n    // Search for the minimum cost associated with a given prefix\n    int searchMinCost(string prefix) {\n        TrieNode* current = root;\n        for (char c : prefix) {\n            int index = c - 'a';\n            if (current->children[index] == nullptr) {\n                return INT_MAX; // No match found\n            }\n            current = current->children[index];\n        }\n        return current->minCost;\n    }\n\n    ~Trie() {\n        delete root;\n    }\n};\n\nclass Solution {\npublic:\n    // Calculate the minimum cost to form target using words and costs\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // Cost to form an empty string is 0\n\n        // Build the Trie with words and their associated costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        // DP to find the minimum cost to form target[0...n-1]\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // If no way to form target[0...i-1], continue\n\n            TrieNode* current = trie.root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (current->children[index] == nullptr) break; // No matching prefix in Trie\n\n                current = current->children[index];\n                if (current->minCost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + current->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\n// // Example usage\n// int main() {\n//     Solution sol;\n\n//     // Example 1\n//     string target1 = \"abcdef\";\n//     vector<string> words1 = {\"abdef\", \"abc\", \"d\", \"def\", \"ef\"};\n//     vector<int> costs1 = {100, 1, 1, 10, 5};\n//     int result1 = sol.minimumCost(target1, words1, costs1);\n//     cout << \"Example 1 - Minimum cost: \" << result1 << endl;  // Expected output: 7\n\n//     // Example 2\n//     string target2 = \"aaaa\";\n//     vector<string> words2 = {\"z\", \"zz\", \"zzz\"};\n//     vector<int> costs2 = {1, 10, 100};\n//     int result2 = sol.minimumCost(target2, words2, costs2);\n//     cout << \"Example 2 - Minimum cost: \" << result2 << endl;  // Expected output: -1\n\n//     // Example 3\n//     string target3 = \"ababa\";\n//     vector<string> words3 = {\"aba\", \"ab\"};\n//     vector<int> costs3 = {1, 2};\n//     int result3 = sol.minimumCost(target3, words3, costs3);\n//     cout << \"Example 3 - Minimum cost: \" << result3 << endl;  // Expected output: 3\n\n//     return 0;\n// }",
    "submit_ts": "1720323082",
    "subm_id": "1312366875"
}