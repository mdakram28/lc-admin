{
    "username": "lastprism",
    "submission": "#define lson l , m , rt << 1\n#define rson m + 1 , r , rt << 1 | 1\n\n\nusing L = long long;\nconst int maxn = 100007;\nconst int INF=0x7fffffff;\nL IDX[maxn<<2];\nL MIN[maxn<<2];\n\nvoid PushUP(int rt) {\n    if(MIN[rt<<1] < MIN[rt<<1|1]){\n        MIN[rt] = MIN[rt<<1];\n        IDX[rt] = IDX[rt<<1];\n    }else{\n        MIN[rt] = MIN[rt<<1|1];\n        IDX[rt] = IDX[rt<<1|1];\n    }\n}\n\n\nvoid build(int l, int r, int rt, vector<int> &a) {  \n    if (l == r){\n        MIN[rt] = a[l];\n        IDX[rt] = l;\n        return;\n    }\n    int m = (l + r) >> 1;\n    build(lson, a);\n    build(rson, a);\n    PushUP(rt);\n}\n\n\npair<L,L> queryMIN(int L,int R,int l,int r,int rt) {  //\u6c42L~R\u7684\u6700\u5c0f\u503c\n    if (L <= l && r <= R) {\n        return make_pair(MIN[rt], IDX[rt]);\n    }\n    int m = (l + r) >> 1;\n    auto ret = make_pair(INF, -1);\n    if (L <= m){\n        auto res = queryMIN(L , R , lson);\n        if(res.first < ret.first){\n            ret = res;\n        }\n    }\n    if (R > m){\n        auto res =  queryMIN(L , R , rson);\n        if(res.first < ret.first){\n            ret = res;\n        }\n    }\n    // cout << L << \" \" << R << \" \" << ret.first << \" \" << ret.second << endl;\n    return ret;\n}\n\n\n\nclass Solution {\npublic:\n    int n;\n    L cal(vector<int> &a, int l, int r, L cnt){\n        // cout << l << \" \" << r << \" \" << cnt << endl;\n        if(l > r) return 0;\n        if(l == r) return a[l] - cnt;\n        L ans{};\n        auto [x, y] = queryMIN(l, r, 1, n, 1);\n        // cout << l << \" \" << r << \" \" << cnt  << \" \" << x << \" \" << y  << endl;\n        ans += x - cnt;\n        ans += cal(a, l, y-1, x);\n        ans += cal(a, y+1, r, x);\n        return ans;\n    }\n    \n    long long minimumOperations(vector<int>& a, vector<int>& b) {\n        \n        n = a.size();\n        vector<int> d(n+1);\n        auto c = d;\n        for(int i = 1; i <= n; i ++){\n            d[i] = b[i-1] - a[i-1];\n            c[i] = abs(d[i]);\n        }\n        \n        build(1, n, 1, c);\n        \n        int last{1};\n        L ans{};\n        for(int i = 2; i <= n; i ++){\n            if(d[i] == 0 || (d[i-1] != 0 && d[i]/c[i] != d[i-1]/c[i-1])){\n                // cout  << i << \" \" <<\"#\"<< last << \" \" << i-1 << endl;\n                ans += cal(c, last, i-1, 0);\n                last = i;\n            }\n        }\n        // cout <<\"@@\"<< last << \" \" << n << endl;\n        ans += cal(c, last, n, 0);\n        return ans;\n        \n    }\n};",
    "submit_ts": "1721533159",
    "subm_id": "548396351"
}