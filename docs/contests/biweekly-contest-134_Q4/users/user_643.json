{
    "username": "A_Le_K",
    "submission": "static const int __ = []() { std::ios::sync_with_stdio(false); std::cin.tie(nullptr); std::cout.tie(nullptr); return 0; }();\n\ntypedef long long ll; typedef unsigned int ui; typedef unsigned long long ull; typedef pair<int ,int> pii; typedef pair<ll, ll> pll; typedef double rl;\ntypedef pii int2; typedef tuple<int, int, int> int3; typedef tuple<int, int, int, int> int4; typedef tuple<int, int, int, int, int> int5;\ntypedef pll ll2; typedef tuple<ll, ll, ll> ll3; typedef tuple<ll, ll, ll, ll> ll4; typedef tuple<ll, ll, ll, ll, ll> ll5;\ntypedef vector<int> vi; typedef vector<pii> vii; typedef vector<ll> vll; typedef vector<pll> vll_ll; typedef vector<vi> vvi; typedef vector<vii> vvii; typedef vector<vll> vvll; typedef vector<vll_ll> vvll_ll;\n\n#define pb push_back\n#define mp make_pair\n#define eb emplace_back\n#define xx first\n#define yy second\n#define FOR(i,N) for(int i=0; i<N; i++)\n#define g0(x) get<0>(x)\n#define g1(x) get<1>(x)\n#define g2(x) get<2>(x)\n#define g3(x) get<3>(x)\n#define g4(x) get<4>(x)\n\ntemplate<typename A> string to_string(A* ptr) { stringstream ss; ss << \"0x\" << std::setw(16) << std::setfill ('0') << std::hex << (uint64_t)(uintptr_t)ptr; return ss.str(); }\nstring to_string(char c) { return ((string)\"'\"+c)+ \"'\"; }\ntemplate <typename A, typename B> string to_string(pair<A, B> p);\ntemplate <typename A, typename B, typename C> string to_string(tuple<A, B, C> p);\ntemplate <typename A, typename B, typename C, typename D> string to_string(tuple<A, B, C, D> p);\nstring to_string(const string& s) { return '\"' + s + '\"'; }\nstring to_string(const char* s) { return to_string((string) s); }\nstring to_string(bool b) { return (b ? \"true\" : \"false\"); }\nstring to_string(vector<bool> v) {\n    bool first = true; string res = \"{\";\n\tfor (int i = 0; i < static_cast<int>(v.size()); i++) { if (!first) { res += \", \"; } first = false; res += to_string(v[i]); }\n\tres += \"}\"; return res;\n}\ntemplate <size_t N> string to_string(bitset<N> v) { string res = \"\"; for (size_t i = 0; i < N; i++) { res += static_cast<char>('0' + v[i]); } return res; }\ntemplate <typename A> string to_string(A v) {\n\tbool first = true; string res = \"{\";\n\tfor (const auto &x : v) {\n\t\tif (!first) { res += \", \"; }\n\t\tfirst = false; res += to_string(x);\n\t}\n\tres += \"}\"; return res;\n}\ntemplate <typename A, typename B> string to_string(pair<A, B> p) { return \"(\" + to_string(p.first) + \", \" + to_string(p.second) + \")\"; }\ntemplate <typename A, typename B, typename C> string to_string(tuple<A, B, C> p) { return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \")\"; }\ntemplate <typename A, typename B, typename C, typename D>\nstring to_string(tuple<A, B, C, D> p) { return \"(\" + to_string(get<0>(p)) + \", \" + to_string(get<1>(p)) + \", \" + to_string(get<2>(p)) + \", \" + to_string(get<3>(p)) + \")\"; }\nvoid debug_out() { cout << endl; }\ntemplate <typename Head, typename... Tail> void debug_out(Head H, Tail... T) { cout << \" \" << to_string(H); debug_out(T...); }\n\n#define popc __builtin_popcountll\n//#define popc __builtin_popcount\n//#define clz __builtin_clzll\n//#define clz __builtin_clz\ninline int bitLength(uint32_t val) { return 32 - __builtin_clz  (val); }\ninline int bitLength(uint64_t val) { return 64 - __builtin_clzll(val); }\n\ntemplate<typename T> inline void domax(T& A, const T& B) { A=max(A, B); }\ntemplate<typename T> inline void domin(T& A, const T& B) { A=min(A, B); }\n\ntemplate<typename T>\ninline T true_mod(T A, T B)\n{\n    assert(B>=1);\n    A%=B;\n    if(A<0) A+=B;\n    return A;\n}\n\ntemplate<typename T>\ninline T div_down(T A, T B)\n{\n    return (A-true_mod(A,B))/B;\n}\n\ntemplate<typename T>\ninline T div_up(T A, T B)\n{\n    return div_down(A+B-1, B);\n}\n\n#define all(x) (x).begin(), (x).end()\n\n#if 0\n#define dbg(...) cout << \"[\" << #__VA_ARGS__ << \"]:\", debug_out(__VA_ARGS__)\n#else\n#define dbg(...) 42\n#endif\n\ninline int bit(int mask, int pos) {\n    return (mask>>pos)&1;\n}\n\nconst int B=30;\nvoid add(vector<int>& cnt, int val, int delta) {\n    FOR(b, B) {\n        const int bt=bit(val, b);\n        \n        if(bt==0) cnt[b]+=delta;\n    }\n        \n}\n\nint eval(const vector<int>& cnt) {\n    int result=0;\n    FOR(b, B) {\n        if(cnt[b]<=0) result|=(1<<b);\n    }\n    return result;\n}\n\nclass Solution {\npublic:\n    long long countSubarrays_slow(vector<int>& a, int k) {\n        const int n=a.size();\n        ll result=0;\n        FOR(i, n) {\n            for(int j=i, prod=a[i]; j<n; j++) {\n                prod&=a[j];\n                result+=prod==k;\n                \n                if(prod==k) dbg(i, j);\n            }\n        }\n        return result;\n    }\n        \n    long long countSubarrays(vector<int>& a, int k) {\n        //return countSubarrays_slow(a, k);\n        //a.pb(0)\n        \n        const int n=a.size();\n        dbg(\"===========\");\n        \n        ll result=0;\n        vector<int> cnt1(B, 0), cnt2(B, 0);\n        dbg(cnt1);\n        dbg(cnt2);\n        \n        for(int L=0, R1=0, R2=0; L<n; ) {\n            dbg(\"================\");\n            \n            while(R1<n) {\n                if(eval(cnt1)<=k) break;\n                \n                add(cnt1, a[R1], +1);\n                R1++;\n                if(eval(cnt1)<=k) break;\n            }\n            \n            while(R2<n) {\n                if(eval(cnt2)<k) break;\n                \n                add(cnt2, a[R2], +1);\n                R2++;\n                if(eval(cnt2)<k) break;\n                \n                \n            }\n            \n            dbg(L, R1, R2, eval(cnt1), eval(cnt2));\n            dbg(cnt1);\n            dbg(cnt2);\n            \n            /*\n            if(eval(cnt1)==k) {\n                //result+=R2-R1;\n                result+=R2-R1+1;\n            }\n            */\n            if(eval(cnt1)==k) {\n                result+=R2-R1;\n                if(eval(cnt2)==k) result++;\n            }\n                \n            //if(a[L]==k) result++;\n            \n            dbg(L, result);\n            \n            add(cnt1, a[L], -1);\n            add(cnt2, a[L], -1);\n            L++;\n            \n            \n        }\n        \n        return result;\n    }\n};",
    "submit_ts": "1720279504",
    "subm_id": "1311753848"
}