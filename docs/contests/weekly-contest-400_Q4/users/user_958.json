{
    "username": "shubham_3112",
    "submission": "class SegmentTree {\n    public:\n        vector<int>tree;\n        int n;\n        SegmentTree(vector<int>& nums){\n            n = nums.size();\n            tree.resize(4*n);\n            build(nums,0,0,n-1);\n        }\n        void build(vector<int>& nums,int node,int st,int end){\n            if(st==end)\n                tree[node]=nums[st];\n            else{\n                int mid = st + (end-st)/2;\n                build(nums,2*node+1,st,mid);\n                build(nums,2*node+2,mid+1,end);\n                tree[node]=tree[2*node + 1]&tree[2*node + 2];\n            }\n        }\n        int query(int l,int r){\n            return query(0,0,n-1,l,r);\n        }\n        int query(int node,int st,int end,int l,int r){\n            if(r<st||end<l)\n                return INT_MAX;\n            if(l<=st&&end<=r)\n                return tree[node];\n            int mid = st + (end-st)/2;\n            int q1 = query(2*node + 1,st,mid,l,r);\n            int q2 = query(2*node + 2,mid+1,end,l,r);\n            return q1&q2;\n        }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(nums);\n        int ans = INT_MAX;\n        for(int i = 0;i<n;i++){\n            int l = i-1,r = n-1,mid;\n            while(r-l>1){\n                mid = l + (r-l)/2;\n                if(st.query(i,mid)>=k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if(l!=i-1)\n                ans = min(ans,abs(st.query(i,l)-k));\n            ans = min(ans,abs(k-st.query(i,r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717300128.0
}