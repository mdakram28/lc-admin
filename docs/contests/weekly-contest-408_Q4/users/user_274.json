{
    "username": "aadi_01",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int performBFS(const std::vector<std::vector<int>> &adjList, int start, int target1, int target2, int totalNodes) {\n        std::queue<int> nodeQueue;\n        std::vector<int> visited(totalNodes, 0);\n        nodeQueue.push(start);\n        visited[start] = 1;\n\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int width, int height, std::vector<std::vector<int>>& circlesData) {\n        std::vector<std::pair<std::pair<int, int>, int>> circles(circlesData.size());\n        std::vector<std::vector<int>> adjacencyList(circlesData.size() + 4);\n        int circleCount = circlesData.size();\n\n        for (int i = 0; i < circleCount; ++i) {\n            circles[i].first.first = circlesData[i][0];\n            circles[i].first.second = circlesData[i][1];\n            circles[i].second = circlesData[i][2];\n        }\n\n        for (int i = 0; i < circleCount; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjacencyList[circleCount].push_back(i);\n                adjacencyList[i].push_back(circleCount);\n            }\n            if (width - circles[i].first.first <= circles[i].second) {\n                adjacencyList[circleCount + 2].push_back(i);\n                adjacencyList[i].push_back(circleCount + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjacencyList[circleCount + 1].push_back(i);\n                adjacencyList[i].push_back(circleCount + 1);\n            }\n            if (height - circles[i].first.second <= circles[i].second) {\n                adjacencyList[circleCount + 3].push_back(i);\n                adjacencyList[i].push_back(circleCount + 3);\n            }\n            for (int j = i + 1; j < circleCount; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int combinedRadii = circles[i].second + circles[j].second;\n                if (combinedRadii >= distance) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n\n        int blockageDetected = 0;\n        blockageDetected = std::max(blockageDetected, performBFS(adjacencyList, circleCount, circleCount + 1, circleCount + 2, circleCount + 4));\n        blockageDetected = std::max(blockageDetected, performBFS(adjacencyList, circleCount + 3, circleCount + 2, circleCount + 1, circleCount + 4));\n\n        if (blockageDetected) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722137000",
    "subm_id": "1335751211"
}