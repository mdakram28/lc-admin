{
    "username": "Shantanu_04",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n#include <climits>\n\nclass TrieNode {\npublic:\n    std::unordered_map<char, TrieNode*> children;\n    long long cost;\n    TrieNode() : cost(LLONG_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() { root = new TrieNode(); }\n\n    void insert(const std::string& word, long long cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = std::min(node->cost, cost);\n    }\n};\n\nclass Solution {\n    long long fnc(int i, const std::string& t, TrieNode* root, std::vector<long long>& dp) {\n        if (i >= t.size()) return 0;\n        if (dp[i] != -1) return dp[i];\n\n        long long ans = LLONG_MAX;\n        TrieNode* node = root;\n        for (int j = i; j < t.size(); ++j) {\n            if (!node->children.count(t[j])) break;\n            node = node->children[t[j]];\n            if (node->cost != LLONG_MAX) {\n                long long next_cost = fnc(j + 1, t, root, dp);\n                if (next_cost != LLONG_MAX) {\n                    long long curr_ans = node->cost + next_cost;\n                    if (curr_ans < ans) ans = curr_ans;\n                }\n            }\n        }\n        return dp[i] = ans;\n    }\n\npublic:\n    int minimumCost(const std::string& t, std::vector<std::string>& words, std::vector<int>& nums) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], nums[i]);\n        }\n        \n        std::vector<long long> dp(t.size(), -1);\n        long long ans = fnc(0, t, trie.root, dp);\n        return (ans == LLONG_MAX) ? -1 : ans;\n    }\n};\n",
    "submit_ts": "1720323603",
    "subm_id": "1312379565"
}