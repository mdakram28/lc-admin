{
    "username": "drash99",
    "submission": "class SegTree():\n    def __init__(self, nums, start, end):\n        self.start = start\n        self.end = end\n        if start == end:\n            self.isleaf = True\n            self.sum00 = 0\n            self.sum01 = 0\n            self.sum10 = 0\n            self.sum11 = nums[start]\n        else:\n            self.isleaf = False\n            self.left = SegTree(nums,start, (start+end)//2)\n            self.right = SegTree(nums,(start+end)//2+1, end)\n            self.sum00 = max(self.left.sum00 + max(self.right.sum00, self.right.sum10), self.left.sum01+self.right.sum00)\n            self.sum01 = max(self.left.sum00 + max(self.right.sum01, self.right.sum11), self.left.sum01+self.right.sum01)\n            self.sum10 = max(self.left.sum10 + max(self.right.sum00, self.right.sum10), self.left.sum11+self.right.sum00)\n            self.sum11 = max(self.left.sum10 + max(self.right.sum01, self.right.sum11), self.left.sum11+self.right.sum01)\n\n                \n    def updatesum(self, start, v):\n        if self.isleaf and start == self.start:\n            self.sum11 = v\n        else:\n            half = (self.start+self.end)//2+1\n            if start < half:\n                self.left.updatesum(start,v)\n            else:\n                self.right.updatesum(start,v)\n            self.sum00 = max(self.left.sum00 + max(self.right.sum00, self.right.sum10), self.left.sum01+self.right.sum00)\n            self.sum01 = max(self.left.sum00 + max(self.right.sum01, self.right.sum11), self.left.sum01+self.right.sum01)\n            self.sum10 = max(self.left.sum10 + max(self.right.sum00, self.right.sum10), self.left.sum11+self.right.sum00)\n            self.sum11 = max(self.left.sum10 + max(self.right.sum01, self.right.sum11), self.left.sum11+self.right.sum01)\n\n    def __str__(self) -> str:\n        tmp = f\"start: {self.start} end:{self.end} sum:{self.sum00} {self.sum01} {self.sum10} {self.sum11}\"\n        if not self.isleaf:\n            tmp+='\\n'\n            tmp += str(self.left)\n            tmp+='\\n'\n            tmp += str(self.right )\n        return tmp\nclass Solution:\n    def maximumSumSubsequence(self, nums: List[int], queries: List[List[int]]) -> int:\n        modu = 10**9 + 7\n        t = SegTree(nums,0,len(nums)-1)\n        ans = 0\n        for p,x in queries:\n            t.updatesum(p,x)\n            #nums[p ]=x\n            #print(nums)\n            tmp = 0\n            if t.sum00 is not None:\n                tmp = max(tmp, t.sum00)\n            if t.sum01 is not None:\n                tmp = max(tmp, t.sum01)\n            if t.sum10 is not None:\n                tmp = max(tmp, t.sum10)\n            if t.sum11 is not None:\n                tmp = max(tmp, t.sum11)\n            ans += tmp\n            #print(t)\n        return ans%modu\n        ",
    "submit_ts": 1716695148.0
}