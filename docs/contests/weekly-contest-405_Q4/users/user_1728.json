{
    "username": "SHADOW_MONARCH-7777",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)  # Update cost to the minimum cost for the word\n    \n    def search(self, target, end):\n        node = self.root\n        results = []\n        for i in range(end, -1, -1):\n            char = target[i]\n            if char not in node.children:\n                break\n            node = node.children[char]\n            if node.cost != float('inf'):\n                results.append((i, node.cost))\n        return results\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word[::-1], cost)\n\n        for i in range(1, n + 1):\n            for j, cost in trie.search(target, i - 1):\n                dp[i] = min(dp[i], dp[j] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720323456",
    "subm_id": "1312376010"
}