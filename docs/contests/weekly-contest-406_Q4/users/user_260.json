{
    "username": "jiangzhouxy",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> (b[0] - a[0])); // value, 1 means vertical, 0 means horizental\n        int hCount = 1;\n        int vCount = 1;\n        for (int i : horizontalCut) {\n            pq.add(new int[]{i, 0});\n        }\n\n        for (int i : verticalCut) {\n            pq.add(new int[]{i, 1});\n        }\n        long res = 0;\n\n        while (!pq.isEmpty()) {\n            int[] cur = pq.poll();\n            if (cur[1] == 0) {\n                // do horizental cut\n                res += (long)hCount * cur[0];\n                vCount++;\n            } else {\n                // do vertical cut\n                res += (long)vCount * cur[0];\n                hCount++;\n\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1720925333",
    "subm_id": "1320251148"
}