{
    "username": "abhinavprkash",
    "submission": "class TrieNode\n{\npublic:\n  unordered_map<char, TrieNode *> children;\n  vector<pair<int, int>> wordCosts; \n\n  TrieNode() = default;\n};\n\nclass Trie\n{\npublic:\n  TrieNode *root;\n\n  Trie()\n  {\n    root = new TrieNode();\n  }\n\n  void insert(const string &word, int cost)\n  {\n    TrieNode *node = root;\n    for (char c : word)\n    {\n      if (node->children.find(c) == node->children.end())\n      {\n        node->children[c] = new TrieNode();\n      }\n      node = node->children[c];\n    }\n    node->wordCosts.emplace_back(word.length(), cost);\n  }\n};\n\nclass Solution\n{\npublic:\n  int minimumCost(string target, vector<string> &words, vector<int> &costs)\n  {\n    Trie trie;\n    for (int i = 0; i < words.size(); i++)\n    {\n      trie.insert(words[i], costs[i]);\n    }\n\n    int n = target.length();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // Initial state, cost of empty string is 0\n\n    for (int i = 0; i < n; i++)\n    {\n      if (dp[i] == INT_MAX)\n        continue;\n      TrieNode *node = trie.root;\n      for (int j = i; j < n; j++)\n      {\n        if (node->children.find(target[j]) == node->children.end())\n          break;\n        node = node->children[target[j]];\n        for (auto &wc : node->wordCosts)\n        {\n          int len = wc.first;\n          int cost = wc.second;\n          if (i + len <= n)\n          {\n            dp[i + len] = min(dp[i + len], dp[i] + cost);\n          }\n        }\n      }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n  }\n};",
    "submit_ts": "1720322011",
    "subm_id": "1312338319"
}