{
    "username": "KeshavChaudhary",
    "submission": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn number_of_permutations(n: i32, requirements: Vec<Vec<i32>>) -> i32 {\n        const MOD: i64 = 1_000_000_007;\n        const MAX_INVERSIONS: usize = 400;\n\n        let mut req_map = HashMap::new();\n        for req in requirements {\n            req_map.insert((req[0] + 1) as usize, req[1] as usize);\n        }\n\n        let mut perm_counts = vec![vec![0; MAX_INVERSIONS + 1]; (n + 1) as usize];\n        perm_counts[0][0] = 1;\n\n        for length in 1..=n as usize {\n            for inv in 0..=MAX_INVERSIONS {\n                for new_pos in 0..length {\n                    let prev_inv = inv as isize - new_pos as isize;\n                    if prev_inv >= 0 {\n                        perm_counts[length][inv] = (perm_counts[length][inv] + perm_counts[length - 1][prev_inv as usize]) % MOD;\n                    }\n                }\n            }\n\n            if let Some(&target_inv) = req_map.get(&length) {\n                for inv in 0..=MAX_INVERSIONS {\n                    if inv != target_inv {\n                        perm_counts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        let mut result = 0;\n        for &count in &perm_counts[n as usize] {\n            result = (result + count) % MOD;\n        }\n\n        result as i32\n    }\n}\n",
    "submit_ts": "1719070012",
    "subm_id": "1296812269"
}