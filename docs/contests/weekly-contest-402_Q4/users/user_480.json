{
    "username": "madhuraggarwalofficial",
    "submission": "class SegmentTree {\n    vector<int> aux;\n    int n;\n    void buildSegmentTree(int i, int low, int high, vector<int>&nums){\n        if(low==high){\n            aux[i]=nums[low];\n            return;\n        }\n        int mid = low + (high-low)/2;\n        buildSegmentTree(2*i+1, low, mid, nums);\n        buildSegmentTree(2*i+2, mid+1, high, nums);\n        aux[i]=aux[2*i+1]+aux[2*i+2];\n    }\n\n    int querySegmentTree(int i, int low, int high, int queryLeft, int queryRight){\n        if(low>=queryLeft && high<=queryRight) return aux[i];\n        if(low>queryRight || high<queryLeft) return 0;\n        int mid = low + (high-low)/2;\n        int one = querySegmentTree(2*i+1, low, mid, queryLeft, queryRight);\n        int two = querySegmentTree(2*i+2, mid+1, high, queryLeft, queryRight);\n        return one+two;\n    }\n\n    void updateSegmentTree(int i, int low, int high, int queryIndex, int newValue){\n        if(low==high){\n            aux[i]=newValue;\n            return;\n        }\n        int mid = low + (high-low)/2;\n        if(queryIndex<=mid) updateSegmentTree(2*i+1,low,mid,queryIndex,newValue);\n        else updateSegmentTree(2*i+2,mid+1,high,queryIndex,newValue);\n        aux[i] = aux[2*i+1] + aux[2*i+2];\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n=nums.size();\n        aux.resize(4*n);\n        buildSegmentTree(0,0,n-1,nums);\n    }\n    \n    void update(int index, int val) {\n        if(index<0 || index>=n) return;\n        updateSegmentTree(0,0,n-1,index,val);\n    }\n    \n    int query(int left, int right) {\n        return querySegmentTree(0,0,n-1,left,right);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> arr;\n        for(int i=0;i<n;i++){\n            if(i==0 || i==n-1) arr.push_back(0);\n            else if(nums[i-1]>=nums[i] || nums[i+1]>=nums[i]) arr.push_back(0);\n            else arr.push_back(1);\n        }\n        SegmentTree st(arr);\n        int q = queries.size();\n        vector<int> ans;\n        for(int i=0;i<q;i++){\n            if(queries[i][0]==1){\n                int start = queries[i][1];\n                int end = queries[i][2];\n\n                int currans = st.query(start,end);\n                if(st.query(start,start)) currans--;\n                if(start!=end && st.query(end,end)) currans--;\n                ans.push_back(currans);\n            }\n            else{\n                int index = queries[i][1];\n                nums[index]=queries[i][2];\n                \n                if(index==0){\n                    if(index+2<n && nums[index]<nums[index+1] && nums[index+1]>nums[index+2]) st.update(index+1,1);\n                    else st.update(index+1,0);\n                }\n                else if(index==n-1){\n                    if(index-2>=0 && nums[index]<nums[index-1] && nums[index-1]>nums[index-2]) st.update(index-1,1);\n                    else st.update(index-1,0);\n                }\n                else{\n                    if(nums[index]>nums[index-1] && nums[index]>nums[index+1]) st.update(index,1);\n                    else st.update(index,0);\n                    \n                    if(nums[index+1]>nums[index] && index+2<n && nums[index+1]>nums[index+2]) st.update(index+1,1);\n                    else st.update(index+1,0);\n                    \n                    if(nums[index-1]>nums[index] && index-2>=0 && nums[index-1]>nums[index-2]) st.update(index-1,1);\n                    else st.update(index-1,0);\n                }\n            }\n        }\n        return ans;\n    }\n};\n\n/*\n\n*/\n",
    "submit_ts": 1718507342.0
}