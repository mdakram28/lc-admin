{
    "username": "holalee",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # clean the words\n        # trie, if could found in trie and val < \n        # worddict = defaultdict()\n        # for idx, word in enumerate(words):\n        #     if word\n        # count = Counter(target)\n        # def can_form(word, word_set, memo):\n        #   if word in memo:\n        #       return memo[word]\n        #   for i in range(1, len(word)):\n        #       prefix = word[:i]\n        #       suffix = word[i:]\n        #       if prefix in word_set and (suffix in word_set or can_form(suffix, word_set, memo)):\n        #           memo[word] = True\n        #           return True\n        #   memo[word] = False\n        #   return False\n\n        # worddict = defaultdict(int)\n        wordset = set()\n        filtered = []\n        for cost,word in sorted(zip(costs,words)):\n          if word in wordset:\n            continue\n          wordset.add(word)\n          \n          if word in target:\n            filtered.append((word,cost))\n        # print(filtered)\n\n        @cache\n        def dp(i):\n            if i >= len(target):\n                return 0\n            res = float(\"inf\")\n            for word,cost in (filtered):\n                if target[i : i + len(word)] == word:\n                    res = min(res, dp(i + len(word)) + cost)\n\n            return res\n\n        res = dp(0)\n        return -1 if res == float(\"inf\") else res\n",
    "submit_ts": "1720323176",
    "subm_id": "1312369183"
}