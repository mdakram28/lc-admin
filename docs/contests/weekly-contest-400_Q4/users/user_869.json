{
    "username": "RISHIRAJ14",
    "submission": "\n#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nclass SegmentTree {\n    int n;\n    vector<int> segTree;\n\npublic:\n    SegmentTree(const vector<int>& array) {\n        n = array.size();\n        segTree.resize(4 * n);\n        buildTree(array, 0, 0, n - 1);\n    }\n\n    void buildTree(const vector<int>& array, int node, int start, int end) {\n        if (start == end) {\n            segTree[node] = array[start];\n        } else {\n            int mid = (start + end) / 2;\n            buildTree(array, 2 * node + 1, start, mid);\n            buildTree(array, 2 * node + 2, mid + 1, end);\n            segTree[node] = segTree[2 * node + 1] & segTree[2 * node + 2];\n        }\n    }\n\n    int getRangeAnd(int l, int r) {\n        return rangeAnd(0, 0, n - 1, l, r);\n    }\n\nprivate:\n    int rangeAnd(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return segTree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftAnd = rangeAnd(2 * node + 1, start, mid, l, r);\n        int rightAnd = rangeAnd(2 * node + 2, mid + 1, end, l, r);\n        return leftAnd & rightAnd;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        int minDiff = INT_MAX;\n\n        for (int i = 0; i < n; ++i) {\n            int low = i - 1;\n            int high = n - 1;\n            while (high - low > 1) {\n                int mid = (low + high) / 2;\n                if (segTree.getRangeAnd(i, mid) >= k) {\n                    low = mid;\n                } else {\n                    high = mid;\n                }\n            }\n            if (low != i - 1) {\n                minDiff = min(minDiff, abs(segTree.getRangeAnd(i, low) - k));\n            }\n            minDiff = min(minDiff, abs(k - segTree.getRangeAnd(i, high)));\n        }\n        return minDiff;\n    }\n};\n",
    "submit_ts": 1717300485.0
}