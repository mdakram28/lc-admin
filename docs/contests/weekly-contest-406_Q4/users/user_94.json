{
    "username": "Numan-",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int n, int m, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int i = 0, j = 0;\n        long long h_segments = 1, v_segments = 1;\n        long long totalCost = 0;\n        \n        // Continue until all cuts are processed\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                // Make a horizontal cut\n                totalCost += horizontalCut[i] * v_segments;\n                h_segments++;\n                i++;\n            } else {\n                // Make a vertical cut\n                totalCost += verticalCut[j] * h_segments;\n                v_segments++;\n                j++;\n            }\n        }\n        \n        // Process remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += horizontalCut[i] * v_segments;\n            i++;\n        }\n        \n        // Process remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += verticalCut[j] * h_segments;\n            j++;\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720924993",
    "subm_id": "1320238837"
}