{
    "username": "Sanjeet63",
    "submission": "/*                                     || \u091c\u092f \u0936\u094d\u0930\u0940 \u0930\u093e\u092e ||                                                     */\n\n#include <bits/stdc++.h>\nusing namespace std;\n#define read(type) readInt<type>()\n#define ll long long\n#define nL \"\\n\"\n#define pb push_back\n#define mk make_pair\n#define pii pair<int, int>\n#define a first\n#define b second\n#define vi vector<int>\n#define vll vector<ll>\n#define vc vector<char>\n#define all(x) (x).begin(), (x).end()\n#define umap unordered_map\n#define uset unordered_set\n#define MOD 1000000007\n#define imax INT_MAX\n#define imin INT_MIN\n#define exp 1e9\n#define sz(x) (int((x).size()))\n\ntemplate <typename T>\nvoid inputv(vector<T> &v)\n{\n    for (auto &i : v)cin >> i;\n}\n\ntemplate <typename T>\nvoid printv(const vector<T> &v)\n{\n    for (const auto &i : v)cout << i << \" \";\n    cout << endl;\n}\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> lazy;\n    int n;\n\n    void build(vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node, start, mid);\n            build(nums, 2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int que(int node, int start, int end, int L, int R) {\n        if (start > end || start > R || end < L) return 0;\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftque = que(2 * node, start, mid, L, R);\n        int rightque = que(2 * node + 1, mid + 1, end, L, R);\n        return leftque + rightque;\n    }\n\n    void update(vector<int>& nums, int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(nums, 2 * node, start, mid, idx);\n            } else {\n                update(nums, 2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    bool isPeak(vector<int>& nums, int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 1, 0, n - 1);\n    }\n\n    int que(int L, int R) {\n        return que(1, 0, n - 1, L, R);\n    }\n\n    void update(vector<int>& nums, int idx) {\n        update(nums, 1, 0, n - 1, idx);\n        if (idx - 1 > 0) update(nums, 1, 0, n - 1, idx - 1);\n        if (idx + 1 < n - 1) update(nums, 1, 0, n - 1, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> result;\n        SegmentTree segTree(nums);\n        for (const auto& que : queries) {\n            if (que[0] == 1) { \n                int li = que[1];\n                int ri = que[2];\n                result.push_back(segTree.que(li + 1, ri - 1));\n            } else if (que[0] == 2) { \n                int idx = que[1];\n                int val = que[2];\n                nums[idx] = val;\n                segTree.update(nums, idx);\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1718505890.0
}