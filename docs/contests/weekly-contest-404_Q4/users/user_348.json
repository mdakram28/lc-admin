{
    "username": "meetsarvan",
    "submission": "class Solution {\npublic:\n   #define ll long long\n    void dfs(int vertex, int parent, vector<vector<int>>& g, vector<int>& depth) {\n    for (int child : g[vertex]) {\n        if (child == parent) continue;\n        depth[child] = depth[vertex] + 1;\n        dfs(child, vertex, g, depth);\n    }\n}\n\nint findDiameter(vector<vector<int>>& g, int n) {\n    vector<int> depth(n + 1, 0);\n    dfs(1, 0, g, depth);\n    int depth_max = -1, node = -1;\n    for (int i = 1; i <= n; i++) {\n        if (depth_max < depth[i]) {\n            node = i;\n            depth_max = depth[i];\n        }\n        depth[i] = 0;\n    }\n    dfs(node, 0, g, depth);\n    depth_max = -1;\n    for (int i = 1; i <= n; i++) {\n        depth_max = max(depth_max, depth[i]);\n    }\n    return depth_max;\n}\n\nint minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n    int n1 = edges1.size() + 1;\n    int n2 = edges2.size() + 1;\n    vector<vector<int>> g1(n1 + 1);\n    vector<vector<int>> g2(n2 + 1);\n\n    for (auto it : edges1) {\n        int x = it[0], y = it[1];\n        x++, y++;\n        g1[x].push_back(y);\n        g1[y].push_back(x);\n    }\n    \n    for (auto it : edges2) {\n        int x = it[0], y = it[1];\n        x++, y++;\n        g2[x].push_back(y);\n        g2[y].push_back(x);\n    }\n\n    int d1 = findDiameter(g1, n1);\n    int d2 = findDiameter(g2, n2);\n\n    return max(d1, max(d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1));\n}\n};",
    "submit_ts": 1719718907.0
}