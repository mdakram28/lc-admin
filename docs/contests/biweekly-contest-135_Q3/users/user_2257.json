{
    "username": "raceMight",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        Map<Integer, List<Integer>> map = new HashMap<>();\n        List<Integer> list = new ArrayList<>();\n        \n        int n = nums.length;\n        \n        \n        for (int i = 0; i < n / 2; i++) {\n            int a = nums[i];\n            int b = nums[n - i - 1];\n            int diff = Math.abs(a - b);\n            int X = Math.max(Math.max(a, b), Math.max(k - a, k - b));\n            map.computeIfAbsent(diff, key -> new ArrayList<>()).add(X);\n            list.add(X);\n        }\n        \n        \n        Collections.sort(list);\n        \n        int ans = n;\n        \n        for (Map.Entry<Integer, List<Integer>> entry : map.entrySet()) {\n            int diff = entry.getKey();\n            List<Integer> values = entry.getValue();\n            \n            int T = binary(list, diff);\n            T = T * 2 + (n / 2 - T);\n            \n            for (int X : values) {\n                if (X < diff) {\n                    T -= 2;\n                } else {\n                    T -= 1;\n                }\n            }\n            \n            ans = Math.min(ans, T);\n        }\n        \n        return ans;\n    }\n\n    private int binary(List<Integer> list, int key) {\n        int low = 0;\n        int high = list.size();\n        \n        while (low < high) {\n            int mid = (low + high) / 2;\n            if (list.get(mid) < key) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n        }\n        \n        return low;\n    }\n}\n",
    "submit_ts": "1721489673",
    "subm_id": "1327460315"
}