{
    "username": "Drunkenstein002",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k1) {\n        int n= nums.length;\n        long num[]=new long[n];\n        for (int i=0;i<n;++i)\n        {\n            num[i]= 1L*nums[i];\n        }\n        long k = 1L*k1;\n        SparseTable s = new SparseTable(num);\n        long ans = Long.MAX_VALUE;\n        for(int i=0;i<n;i++)\n        {\n            int low = i;\n            int high = n-1;\n            long curAns = Long.MAX_VALUE;\n            while(low<=high)\n            {\n                int mid = low+(high-low)/2;\n                long andOfRange = s.rangeAnd(i,mid);\n                long val = Math.abs(k-andOfRange);\n                curAns = Math.min(val, curAns);\n                if (k - andOfRange >=0)\n                {\n                    high=mid-1;\n                }\n                else{\n                    low=mid+1;\n                }\n            }\n            ans=Math.min(ans, curAns);\n        }\n        return (int)ans;\n    }\n}\npublic class SparseTable {\n    private long[][] sparseTable;\n    private int[] log;\n\n    // Constructor to build the sparse table\n    public SparseTable(long[] arr) {\n        int n = arr.length;\n        int maxLog = (int) (Math.log(n) / Math.log(2)) + 1;\n\n        sparseTable = new long[n][maxLog];\n        log = new int[n + 1];\n\n        // Precompute log values\n        for (int i = 2; i <= n; i++) {\n            log[i] = log[i / 2] + 1;\n        }\n\n        // Initialize sparse table for intervals of length 1\n        for (int i = 0; i < n; i++) {\n            sparseTable[i][0] = arr[i];\n        }\n\n        // Compute values from smaller to larger intervals\n        for (int j = 1; j < maxLog; j++) {\n            for (int i = 0; (i + (1 << j) - 1) < n; i++) {\n                sparseTable[i][j] = sparseTable[i][j - 1] & sparseTable[i + (1 << (j - 1))][j - 1];\n            }\n        }\n    }\n    \n    public long rangeAnd(int L, int R) {\n        int j = log[R - L + 1];\n        return sparseTable[L][j] & sparseTable[R - (1 << j) + 1][j];\n    }\n    \n    \n}\n",
    "submit_ts": "1717298707",
    "subm_id": "1274788555"
}