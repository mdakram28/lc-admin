{
    "username": "harshal_02",
    "submission": "#define ll long long int\nclass Solution {\npublic:\n    char dp_arr[100001][7];\n    char dp_non_zero_arr[100001][7];\n    int next_mod[100001][7];\n    int nz_next_mod[100001][7];\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        // Now even values\n        if (k == 2) {\n            if (n == 1)\n                return \"8\";\n            string res(n, '9');\n            res[0] = '8';\n            res[n - 1] = '8';\n            return res;\n        }\n         if (k == 4) {\n            if (n == 1)\n                return \"8\";\n            if (n == 2)\n                return \"88\";\n            if (n == 3) \n                return \"888\";\n            string res(n, '9');\n            res[0] = '8';\n            res[n - 1] = '8';\n            res[1] = '8';\n            res[n - 2] = '8';\n            return res;\n        }\n           if (k == 6) {\n            if (n == 1) \n                return \"6\";\n            if (n == 2) \n                return \"66\";\n            if (n == 3) \n                return \"888\";\n            string res(n, '9');\n            res[0] = '8';\n            res[n - 1] = '8';\n            if (n % 2 == 0) {\n                   res[n / 2] = '7';\n                res[(n / 2) - 1] = '7';\n            } \n            else {\n                res[n / 2] = '8';\n            }\n            return res;\n        }\n          if (k == 8) {\n            if (n == 1)\n                return \"8\";\n            if (n == 2)\n                return \"88\";\n            if (n == 3)\n                return \"888\";\n            if (n == 4)\n                return \"8888\";\n            if (n == 5) \n                return \"88888\";\n            string res(n, '9');\n            res[0] = '8';\n            res[n - 1] = '8';\n            res[1] = '8';\n            res[n - 2] = '8';\n            res[2] = '8';\n            res[n - 3] = '8';\n            return res;\n        }\n        // Now for odd values\n        if (k == 5) {\n            if (n == 1) \n                return \"5\";\n            string res(n, '9');\n            res[0] = '5';\n            res[n - 1] = '5';\n            return res;\n        }\n        if (k == 7) {\n            if (n == 1) \n                return \"7\";\n            fill(&dp_arr[0][0], &dp_arr[0][0] + sizeof(dp_arr), 0);\n            fill(&dp_non_zero_arr[0][0], &dp_non_zero_arr[0][0] + sizeof(dp_non_zero_arr), 0);\n            for (int i = 1; i < 10; ++i) {\n                dp_arr[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    dp_non_zero_arr[1][i % 7] = '0' + i;\n                }\n            }\n            int mod_base = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && dp_arr[i][j] == 0))\n                        continue;\n                    for (int k = 9; k >= 0; --k) {\n                        int new_mod = (mod_base * k + k + j * 10) % 7;\n                        if (dp_arr[i + 2][new_mod] == 0 || dp_arr[i + 2][new_mod] < '0' + k) {\n                            dp_arr[i + 2][new_mod] = '0' + k;\n                            next_mod[i + 2][new_mod] = j;\n                        }\n                        if (k == 0)\n                            continue;\n                        if (dp_non_zero_arr[i + 2][new_mod] == 0 || dp_non_zero_arr[i + 2][new_mod] < '0' + k) {\n                            dp_non_zero_arr[i + 2][new_mod] = '0' + k;\n                            nz_next_mod[i + 2][new_mod] = j;\n                        }\n                    }\n                }\n                mod_base = (mod_base * 10) % 7;\n            }\n            int len = n;\n            string left(1, dp_non_zero_arr[len][0]);\n            string right(1, dp_non_zero_arr[len][0]);\n            int mod_val = nz_next_mod[len][0];\n            len--;\n            len--;\n            while(len){\n                left += dp_arr[len][mod_val];\n                if(len > 1){\n                    right += dp_arr[len][mod_val];\n            }\n                else{\n                    break;\n                }\n                mod_val = next_mod[len][mod_val];\n                len--;\n                len--;\n            }\n            reverse(right.begin(), right.end());\n            string ans=left + right;\n            return ans;\n        }\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723951820",
    "subm_id": "1359780830"
}