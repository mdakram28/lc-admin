{
    "username": "Vansh_S2003",
    "submission": "#include <vector>\n#include <unordered_map>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> m;\n        for (const auto& i : requirements) {\n            m[i[0] + 1] = i[1];\n        }\n\n        vector<vector<long>> cnt(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        cnt[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        cnt[length][inv] = (cnt[length][inv] + cnt[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (m.find(length) != m.end()) {\n                int targetInv = m[length];\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != targetInv) {\n                        cnt[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long ans = 0;\n        for (long count : cnt[n]) {\n            ans = (ans + count) % MOD;\n        }\n\n        return static_cast<int>(ans);\n    }\n};\n",
    "submit_ts": "1719070158",
    "subm_id": "1296816024"
}