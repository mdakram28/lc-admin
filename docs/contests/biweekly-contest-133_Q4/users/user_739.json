{
    "username": "Subarray",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        MOD = 1_000_000_007\n        MAX_INVERSIONS = 400\n        zero,one = 0,1\n        req_map = dict()\n        for req in requirements:\n            req_map[req[zero]+one] = req[one]\n        perm_counts = [[zero] * (MAX_INVERSIONS + one) for _ in range(n + one)]\n        perm_counts[zero][zero] = one\n        for length in range(one, n + one):\n            for inv in range(MAX_INVERSIONS + one):\n                for new_pos in range(length):\n                    prev_inv = inv - new_pos\n                    if prev_inv < zero:\n                        continue\n                    else:\n                        perm_counts[length][inv] = (perm_counts[length][inv] + perm_counts[length - one][prev_inv]) % MOD\n            if length in req_map:\n                target_inv = req_map[length]\n                for inv in range(MAX_INVERSIONS + one):\n                    if inv != target_inv:\n                        perm_counts[length][inv] = zero**31\n        result = sum(perm_counts[n]) % MOD\n        return result",
    "submit_ts": 1719070827.0
}