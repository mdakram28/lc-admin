{
    "username": "AbdELRahman182",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> childs;\n    vector<pair<int, int>> words;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->childs.find(c) == node->childs.end()) \n                node->childs[c] = new TrieNode();\n            node = node->childs[c];\n        }\n        node->words.push_back({word.size(), cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i)\n            trie.insert(words[i], costs[i]);\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->childs.find(target[j]) == node->childs.end()) break;\n                node = node->childs[target[j]];\n                for (const auto& [len, cost] : node->words)\n                    if (i + len <= n)\n                        dp[i + len] = min(dp[i + len], dp[i] + cost);\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322006",
    "subm_id": "1312338157"
}