{
    "username": "stormsunshine",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        long subarrays = 0;\n        Map<Integer, Integer> counts = new HashMap<Integer, Integer>();\n        counts.put(nums[0], 1);\n        if (nums[0] == k) {\n            subarrays++;\n        }\n        int length = nums.length;\n        for (int i = 1; i < length; i++) {\n            int num = nums[i];\n            Map<Integer, Integer> prevCounts = new HashMap<Integer, Integer>(counts);\n            counts.clear();\n            Set<Map.Entry<Integer, Integer>> entries = prevCounts.entrySet();\n            for (Map.Entry<Integer, Integer> entry : entries) {\n                int value = entry.getKey(), count = entry.getValue();\n                int newValue = value & num;\n                counts.put(newValue, counts.getOrDefault(newValue, 0) + count);\n                if (newValue == k) {\n                    subarrays += count;\n                }\n            }\n            counts.put(num, counts.getOrDefault(num, 0) + 1);\n            if (num == k) {\n                subarrays++;\n            }\n        }\n        return subarrays;\n    }\n}",
    "submit_ts": "1720278137",
    "subm_id": "544560893"
}