{
    "username": "asyncoder",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<pair<int, int>> sum, diff;\n        int index = 0;\n        for(auto &point : points) {\n            sum.push_back({point[0] + point[1], index} );\n            diff.push_back({point[0] - point[1], index});\n            index++;\n        }\n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        \n        \n        \n        int N = sum.size();\n        int maxD = INT_MIN;\n        // cout << sum[0].first <<\" \" << sum[1].first <<\" \" << sum[N - 2].first <<\" \" << sum[N - 1].first <<\"\\n\";\n        // cout << sum[0].second <<\" \" << sum[1].second <<\" \" << sum[N - 2].second <<\" \" << sum[N - 1].second <<\"\\n\";\n        // cout << diff[0].first <<\" \" << diff[1].first <<\" \" << diff[N - 2].first <<\" \" << diff[N - 1].first <<\"\\n\";\n        //  cout << diff[0].second <<\" \" << diff[1].second <<\" \" << diff[N - 2].second <<\" \" << diff[N - 1].second <<\"\\n\";\n        \n        // removing x0\n        int d1 = sum[N - 1].first - sum[1].first;\n        if(sum[0].second != diff[0].second and sum[0].second != diff[N - 1].second)\n        d1 = max(d1, diff[N - 1].first - diff[0].first);\n        else if(sum[0].second == diff[0].second)\n        d1 = max({d1, diff[N - 1].first - diff[1].first});\n        else if(sum[0].second == diff[N - 1].second)\n        d1 = max({d1, diff[N - 2].first - diff[0].first});\n        \n        // removing xn\n        int d2 = sum[N - 2].first - sum[0].first;\n        if(sum[N - 1].second != diff[0].second and sum[N - 1].second != diff[N - 1].second)\n        d2 = max(d2, diff[N - 1].first - diff[0].first);\n        else if(sum[N - 1].second == diff[0].second)\n        d2 = max({d2, diff[N - 1].first - diff[1].first});\n        else if(sum[N - 1].second == diff[N - 1].second)\n        d2 = max({d2, diff[N - 2].first - diff[0].first});\n        \n        // removing y0\n        int d3 = diff[N - 1].first - diff[1].first;\n        if(diff[0].second != sum[0].second and diff[0].second != sum[N - 1].second)\n        d3 = max(d3, sum[N - 1].first - sum[0].first);\n        else if(diff[0].second == sum[0].second)\n        d3 = max({d3, sum[N - 1].first - sum[1].first});\n        else if(diff[0].second == sum[N - 1].second)\n        d3 = max({d3, sum[N - 2].first - sum[0].first});\n        \n        // removing yn\n        int d4 = diff[N - 2].first - diff[0].first;\n        if(diff[N - 1].second != sum[0].second and diff[N - 1].second != sum[N - 1].second)\n            d4 = max(d4, sum[N - 1].first - sum[0].first);\n        else if(diff[N - 1].second == sum[0].second)\n            d4 = max({d4, sum[N - 1].first - sum[1].first});\n        else if(diff[N - 1].second == sum[N - 1].second)\n            d4 = max({d4, sum[N - 2].first - sum[0].first});\n        \n       // cout << d1 <<\" \" << d2 <<\" \" << d3 <<\" \" << d4 <<\"\\n\";\n        \n        return min({d1, d2, d3, d4});\n        \n        \n    }\n};"
}