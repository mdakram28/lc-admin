{
    "username": "xymabinogi",
    "submission": "using i64 = long long;\ntemplate<class Info,\n    class Merge = std::plus<Info>>\nstruct SegmentTree {\n    const int n;\n    const Merge merge;\n    std::vector<Info> info;\n    SegmentTree(int n) : n(n), merge(Merge()), info(4 << std::__lg(n)) {}\n    SegmentTree(std::vector<Info> init) : SegmentTree(init.size()) {\n        std::function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r - l == 1) {\n                info[p] = init[l];\n                return;\n            }\n            int m = (l + r) / 2;\n            build(2 * p, l, m);\n            build(2 * p + 1, m, r);\n            pull(p);\n        };\n        build(1, 0, n);\n    }\n    void pull(int p) {\n        info[p] = merge(info[2 * p], info[2 * p + 1]);\n    }\n    void modify(int p, int l, int r, int x, const Info &v) {\n        if (r - l == 1) {\n            info[p] = v;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (x < m) {\n            modify(2 * p, l, m, x, v);\n        } else {\n            modify(2 * p + 1, m, r, x, v);\n        }\n        pull(p);\n    }\n    void modify(int p, const Info &v) {\n        modify(1, 0, n, p, v);\n    }\n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l >= y || r <= x) {\n            return Info();\n        }\n        if (l >= x && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        return merge(rangeQuery(2 * p, l, m, x, y), rangeQuery(2 * p + 1, m, r, x, y));\n    }\n    Info rangeQuery(int l, int r) {  //[l, r)\n        return rangeQuery(1, 0, n, l, r);\n    }\n};\n\nstruct Info {\n    int mi, mx, gap;\n    \n    Info() : mi{-1}, mx{-1}, gap{0} {}\n    Info(int x, int y, int z) : mi{x}, mx{y}, gap{z} {}\n};\n\nInfo operator+(const Info &a, const Info &b) {\n    Info c;\n    if (a.mi == -1){\n        if (b.mi == -1) {\n            c.mi = -1;\n            c.mx = -1;\n            c.gap = 0;\n        }\n        else {\n            // use b\n            c.mi = b.mi;\n            c.mx = b.mx;\n            c.gap = b.gap;\n        }\n    }\n    else {\n        if (b.mi == -1){\n            // use a\n            c.mi = a.mi;\n            c.mx = a.mx;\n            c.gap = a.gap;\n        }\n        else {\n            c.gap = max(max(a.gap, b.gap), b.mi - a.mx);\n            c.mi = a.mi;\n            c.mx = b.mx;\n        }\n    }\n    return c;\n}\n\nconstexpr int inf = 1E9;\nconst int M = 5E4 + 5;\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        SegmentTree<Info> seg(M);\n        vector<bool> res;\n        for (auto &q : queries){\n            int op = q[0], x = q[1];\n            if (op == 1){\n                seg.modify(x, Info(x, x, 0));\n            }\n            else {\n                auto i = seg.rangeQuery(0, x + 1);\n                int best = max(i.gap, (i.mi == -1 ? x : max(i.mi, x - i.mx)));\n                if (best >= q[2]) {\n                    res.push_back(true);\n                }\n                else res.push_back(false);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1716649040",
    "subm_id": "1267575987"
}