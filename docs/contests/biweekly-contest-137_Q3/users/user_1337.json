{
    "username": "Atishay Jain",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n        vector<vector<pair<long long, int>>> sorted(n, vector<pair<long long, int>>(m));\n        for(int i = 0; i < n; i++)\n        {\n            for(int j = 0; j < m; j++)\n                sorted[i][j] = {board[i][j], j};\n            sort(sorted[i].rbegin(), sorted[i].rend());// sorting each row in reverse\n        }\n        long long ans = -1e9 * 3;\n        for(int r1 = 0; r1 < n; r1++)\n        {\n            for(int r2 = r1 + 1; r2 < n; r2++)\n            {\n                for(int r3 = r2 + 1; r3 < n; r3++)\n                {\n                    for(int c1 = 0; c1 < 3; c1++)\n                    {\n                        for(int c2 = 0; c2 < 3; c2++)\n                        {\n                            for(int c3 = 0; c3 < 3; c3++)\n                            {\n                                if(sorted[r1][c1].second != sorted[r2][c2].second \n                                && sorted[r1][c1].second != sorted[r3][c3].second \n                                && sorted[r2][c2].second != sorted[r3][c3].second) // distinct columns\n                                    ans = max(ans, sorted[r1][c1].first + sorted[r2][c2].first + sorted[r3][c3].first);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723909714",
    "subm_id": "1359202982"
}