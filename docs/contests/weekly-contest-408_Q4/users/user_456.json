{
    "username": "soul-12",
    "submission": "class Solution {\npublic:\n    class DSU {\n        public: \n            vector<int> par, sz;\n            DSU(int n) {\n                par.resize(n);\n                for(int i=0; i<n; i++) par[i]=i;\n                sz.resize(n, 1);\n            }\n        \n            int findPar(int node) {\n                if(node==par[node]) return node;\n                return par[node] = findPar(par[node]);\n            }\n        \n            void un(int u, int v) {\n                int up = findPar(u), vp = findPar(v);\n                if(up==vp) return;\n                \n                if(sz[up]>sz[vp]) {\n                    sz[up]+=sz[vp];\n                    par[vp]=up;\n                } else {\n                    sz[vp]+=sz[up];\n                    par[up]=vp;                    \n                }\n            }\n    };\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        \n        DSU* dsu = new DSU(n+1);\n        \n        for(int i=0; i<n; i++) {\n            for(int j=0; j<n; j++) {\n                long long int r1 = circles[i][2];\n                long long int r2 = circles[j][2];\n                long long int x1 = circles[i][0];\n                long long int y1 = circles[i][1];\n                long long int x2 = circles[j][0];\n                long long int y2 = circles[j][1];\n                \n                if((x1-x2) * (x1-x2) + (y1-y2)*(y1-y2) <= (r1+r2)*(r1+r2)) dsu->un(i, j);\n            }\n        }\n\n\n        for(int i=0; i<n; i++) {\n            for(int j=0; j<n; j++) {\n                if(dsu->findPar(i) == dsu->findPar(j)) {\n                    if((circles[i][1] + circles[i][2] >= Y) && (circles[j][0] + circles[j][2] >= X)) return false;\n                    if((circles[i][1] - circles[i][2] <=0) && (circles[j][1] + circles[j][2] >= Y)) return false;\n                    if((circles[i][0] - circles[i][2] <=0) && (circles[j][0] + circles[j][2] >= X)) return false;\n                    if((circles[i][0] - circles[i][2] <=0) && (circles[j][1] - circles[j][2] <=0 )) return false;\n\n                }\n            }\n        }\n        \n        return true;\n    }\n};",
    "submit_ts": "1722137168",
    "subm_id": "1335756128"
}