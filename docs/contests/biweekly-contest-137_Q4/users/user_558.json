{
    "username": "LogicalCat",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        row_candidates = []\n\n        # \u4ece\u6bcf\u884c\u6536\u96c6\u524d\u4e09\u5927\u503c\u53ca\u5176\u7d22\u5f15\n        for r in range(m):\n            row_candidates.extend(sorted([(board[r][c], r, c) for c in range(n)], reverse=True, key=lambda x: x[0])[:3])\n\n        # \u63a7\u5236\u6bcf\u5217\u5143\u7d20\u7684\u6570\u91cf\u4e0d\u8d85\u8fc7\u4e09\u4e2a\n        col_buckets = [[] for _ in range(n)]\n        for value, r, c in row_candidates:\n            col_buckets[c].append((value, r, c))\n        filtered_candidates = []\n        for col in col_buckets:\n            filtered_candidates.extend(sorted(col, reverse=True)[:3])  # \u4ece\u6bcf\u5217\u4e2d\u53ea\u4fdd\u7559\u524d\u4e09\u5927\n\n        # \u4ece\u6240\u6709\u5019\u9009\u503c\u4e2d\u9009\u62e9\u524d\u4e5d\u5927\u7684\u503c\n        final_candidates = sorted(filtered_candidates, reverse=True, key=lambda x: x[0])[:9]\n\n        # \u56de\u6eaf\u641c\u7d22\u6700\u4f73\u7ec4\u5408\n        best_value = float('-inf')\n        def backtrack(selected, used_rows, used_cols):\n            nonlocal best_value\n            if len(selected) == 3:\n                best_value = max(best_value, sum(x[0] for x in selected))\n                return\n            for value, r, c in final_candidates:\n                if r not in used_rows and c not in used_cols:\n                    selected.append((value, r, c))\n                    backtrack(selected, used_rows | {r}, used_cols | {c})\n                    selected.pop()\n\n        # \u8fd0\u884c\u56de\u6eaf\n        backtrack([], set(), set())\n\n        return best_value if best_value != float('-inf') else 0",
    "submit_ts": "1723909692",
    "subm_id": "556337529"
}