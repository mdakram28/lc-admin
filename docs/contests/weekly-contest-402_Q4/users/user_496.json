{
    "username": "anant_jain_01",
    "submission": "class FenwickTree {\npublic:\n    vector<int> bit;  // binary indexed tree\n    int n;\n\n    FenwickTree(int n) {\n        this->n = n;\n        bit.assign(n, 0);\n    }\n\n    FenwickTree(vector<int> const &a) : FenwickTree(a.size()) {\n        for (size_t i = 0; i < a.size(); i++)\n            add(i, a[i]);\n    }\n\n    int sum(int r) {\n        int ret = 0;\n        for (; r >= 0; r = (r & (r + 1)) - 1)\n            ret += bit[r];\n        return ret;\n    }\n\n    int sum(int l, int r) {\n        return sum(r) - sum(l - 1);\n    }\n\n    void add(int idx, int delta) {\n        for (; idx < n; idx = idx | (idx + 1))\n            bit[idx] += delta;\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& q) {\n        int n=nums.size();\n        FenwickTree ft(n);\n        vector<int> v(n, 0);\n        for (int i=1; i<n-1; i++){\n            if (nums[i]>nums[i-1] && nums[i]>nums[i+1]){ft.add(i, 1);v[i]=1;}\n        }\n        \n        vector<int> ans;\n        for (int i=0; i<q.size(); i++){\n            if (q[i][0]==1){\n                int l=q[i][1], r=q[i][2], a=0;\n                if (l==0)a=ft.sum(r-1);\n                else if (l+1<=r-1) a=ft.sum(l+1, r-1);\n                ans.push_back(a);\n            }\n            else{\n                int a=0, b=0, c=0, ind=q[i][1], val=q[i][2];\n                nums[ind]=val;\n                if (ind-2>=0 && nums[ind-1]>nums[ind] && nums[ind-1]>nums[ind-2])a=1;\n                if (ind-1>=0 && ind+1<n && nums[ind]>nums[ind-1] && nums[ind]>nums[ind+1])b=1;\n                if (ind+2<n && nums[ind+1]>nums[ind] && nums[ind+1]>nums[ind+2])c=1;\n                if (ind-1>=0){ft.add(ind-1, a-v[ind-1]);v[ind-1]=a;}\n                ft.add(ind, b-v[ind]);v[ind]=b;\n                if (ind+1<n){ft.add(ind+1, c-v[ind+1]);v[ind+1]=c;}\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507689.0
}