{
    "username": "realsanjeevd",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> output;\n        map<int, int> vals;\n        map<int, vector<int>> block_sizes;\n        vals[0] = INT_MAX;\n        block_sizes[INT_MAX].push_back(0);\n        \n        for (int x = 0; x < queries.size(); x++) {\n            if (queries[x][0] == 1) {\n                auto it = vals.lower_bound(queries[x][1]);\n                if (it != vals.begin() && (it == vals.end() || it->first >= queries[x][1])) {\n                    it--;\n                }\n                \n                int space = vals[it->first];\n                \n                auto it1 = find(block_sizes[space].begin(), block_sizes[space].end(), it->first);\n                if (it1 != block_sizes[space].end()) {\n                    block_sizes[space].erase(it1);\n                    if (block_sizes[space].size() == 0) {\n                        block_sizes.erase(space);\n                    }\n                }\n                \n                \n                vals[it->first] = queries[x][1] - it->first;\n                vals[queries[x][1]] = space - vals[it->first];\n                \n                block_sizes[vals[it->first]].push_back(it->first);\n                block_sizes[vals[queries[x][1]]].push_back(queries[x][1]);\n                \n                //cout << \"D: \" << vals[it->first] << \" \" << vals[queries[x][1]] << \"\\n\";\n            }\n            else {\n                if (queries[x][2] > queries[x][1]) {\n                    output.push_back(false);\n                }\n                else {\n                    //cout << queries[x][2] << \"\\n\";\n                    /*\n                    auto it = vals.upper_bound(queries[x][1]);\n                    if (it != vals.begin()) {\n                        it--;\n                        if (it->first == queries[x][1]) {\n                            it--;\n                        }\n                    }\n\n                    bool found1 = false;\n                    for (; it != vals.end(); --it) {\n                        //cout << it->first << \" \" << vals[it->first] << \"\\n\";\n                        if (queries[x][1] - it->first >= queries[x][2] && vals[it->first] >= queries[x][2]) {\n                            found1 = true;\n                            output.push_back(true);\n                            break;\n                        }\n                        if (it == vals.begin()) {\n                            break;\n                        }\n                    }\n                    */\n                    bool found1 = false;\n                    \n                    auto it = block_sizes.lower_bound(queries[x][2]);\n                    for (; it != block_sizes.end(); it++) {\n                        //cout << \"KEY: \" << it->first << \"\\n\";\n                        for (int y = 0; y < block_sizes[it->first].size(); y++) {\n                            //cout << \"LOC: \" << block_sizes[it->first][y] << \"\\n\";\n                            if (queries[x][1] - block_sizes[it->first][y] >= queries[x][2]) {\n                                found1 = true;\n                                output.push_back(true);\n                                break;\n                            }\n                        }\n                        if (found1) {\n                            break;\n                        }\n                    }\n                    \n                    if (!found1) {\n                        output.push_back(false);\n                    }\n                    //cout << \"********\\n\";\n                }\n            }\n        }\n        \n        return output;\n    }\n};",
    "submit_ts": 1716650225.0
}