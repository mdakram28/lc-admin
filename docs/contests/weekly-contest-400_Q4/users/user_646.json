{
    "username": "mark_contest",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        def add_bit(bit_count, num):\n            for i in range(32):\n                if num & (1 << i):\n                    bit_count[i] += 1\n        \n        def remove_bit(bit_count, num):\n            for i in range(32):\n                if num & (1 << i):\n                    bit_count[i] -= 1\n        \n        def compute_and(bit_count, window_length):\n            result = 0xFFFFFFFF\n            for i in range(32):\n                if bit_count[i] < window_length:\n                    result &= ~(1 << i)\n            return result\n        \n        n = len(nums)\n        min_diff = float('inf')\n        \n        l = 0\n        bit_count = [0] * 32\n        window_length = 0\n        \n        for r in range(n):\n            add_bit(bit_count, nums[r])\n            window_length += 1\n            current_and = compute_and(bit_count, window_length)\n            # print(bit_count, current_and)\n            min_diff = min(min_diff, abs(current_and - k))\n            \n            while l < r and current_and < k:\n                remove_bit(bit_count, nums[l])\n                window_length -= 1\n                l += 1\n                current_and = compute_and(bit_count, window_length)\n                # print(bit_count, current_and)\n                min_diff = min(min_diff, abs(current_and - k))\n                \n                \n            \n        \n        return min_diff",
    "submit_ts": "1717299180",
    "subm_id": "1274804092"
}