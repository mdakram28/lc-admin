{
    "username": "HaoyuWang417",
    "submission": "class Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        min_diff = float('inf')\n        bit_count = [0] * 30\n        left = 0\n        current_and = -1\n\n        for right in range(n):\n            num = nums[right]\n            for i in range(30):\n                if num & (1 << i):\n                    bit_count[i] += 1\n\n            new_and = 0\n            for i in range(30):\n                if bit_count[i] == (right - left + 1):\n                    new_and |= (1 << i)\n\n            current_and = new_and\n\n            min_diff = min(min_diff, abs(k - current_and))\n\n            while left < right and (current_and < k):\n                num = nums[left]\n                for i in range(30):\n                    if num & (1 << i):\n                        bit_count[i] -= 1\n                left += 1\n\n                current_and = 0\n                for i in range(30):\n                    if bit_count[i] == (right - left + 1):\n                        current_and |= (1 << i)\n                min_diff = min(min_diff, abs(k - current_and))\n\n        return min_diff",
    "submit_ts": 1717298145.0
}