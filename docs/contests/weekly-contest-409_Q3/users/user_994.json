{
    "username": "nifty-jacksonkqy",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (4 * n)\n        self.lazy = [None] * (4 * n)\n    \n    def build(self, start, end, node, arr):\n        if start == end:\n            self.tree[node] = arr[start]\n        else:\n            mid = (start + end) // 2\n            self.build(start, mid, 2 * node + 1, arr)\n            self.build(mid + 1, end, 2 * node + 2, arr)\n            self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n    def update_range(self, start, end, node, l, r, value):\n        if self.lazy[node] is not None:\n            self.tree[node] = (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] = self.lazy[node]\n                self.lazy[2 * node + 2] = self.lazy[node]\n            self.lazy[node] = None\n        \n        if start > end or start > r or end < l:\n            return\n        \n        if start >= l and end <= r:\n            self.tree[node] = (end - start + 1) * value\n            if start != end:\n                self.lazy[2 * node + 1] = value\n                self.lazy[2 * node + 2] = value\n            return\n        \n        mid = (start + end) // 2\n        self.update_range(start, mid, 2 * node + 1, l, r, value)\n        self.update_range(mid + 1, end, 2 * node + 2, l, r, value)\n        self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n    \n    def query_range(self, start, end, node, l, r):\n        if start > end or start > r or end < l:\n            return 0\n        \n        if self.lazy[node] is not None:\n            self.tree[node] = (end - start + 1) * self.lazy[node]\n            if start != end:\n                self.lazy[2 * node + 1] = self.lazy[node]\n                self.lazy[2 * node + 2] = self.lazy[node]\n            self.lazy[node] = None\n        \n        if start >= l and end <= r:\n            return self.tree[node]\n        \n        mid = (start + end) // 2\n        left_sum = self.query_range(start, mid, 2 * node + 1, l, r)\n        right_sum = self.query_range(mid + 1, end, 2 * node + 2, l, r)\n        return left_sum + right_sum\n\n    def update(self, l, r, value):\n        self.update_range(0, self.n - 1, 0, l, r, value)\n    \n    def query(self, l, r):\n        return self.query_range(0, self.n - 1, 0, l, r)\n\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        arr = [1 for _ in range(n)]\n        seg_tree = SegmentTree(n)\n        seg_tree.build(0, n - 1, 0, arr)\n        ans = []\n        for q in queries:\n            if q[0] + 1 < q[1]:\n                seg_tree.update(q[0] + 1, q[1] - 1, 0)\n            ans.append(seg_tree.query(0, n - 1) - 1)\n        return ans",
    "submit_ts": "1722743166",
    "subm_id": "552349190"
}