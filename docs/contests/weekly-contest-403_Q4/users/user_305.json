{
    "username": "angel30818",
    "submission": "class Solution:   \n    def minimumSum(self, A: List[List[int]]) -> int:\n        \n        def local_search(pos1, pos2):\n            rmin, rmax, cmin, cmax = sys.maxsize, 0, sys.maxsize, 0\n            r1, c1 = pos1\n            r2, c2 = pos2\n            \n            if r1 > r2 or c1 > c2:\n                return 0\n            \n            for r in range(r1, r2+1):\n                for c in range(c1, c2+1):\n                    if A[r][c] == 1:\n                        rmin = min(rmin, r)\n                        rmax = max(rmax, r)\n                        cmin = min(cmin, c)\n                        cmax = max(cmax, c)\n            \n            return max(0, (rmax - rmin + 1) * (cmax - cmin + 1))\n        \n        @cache\n        def dfs(pos1, pos2, k): # split into k rectangles\n            r1, c1 = pos1\n            r2, c2 = pos2\n            \n            if k == 1:\n                return local_search(pos1, pos2)\n            \n            min_area = (c2 - c1 + 1) * (r2 - r1 + 1)\n            \n            # horizontal cut\n            for r in range(r1, r2):\n                for split in range(1, k):\n                    area1 = dfs((r1, c1), (r, c2), split)\n                    area2 = dfs((r+1, c1), (r2, c2), k-split)\n                    \n                    min_area = min(min_area, area1+area2)\n            \n            # vertical cut\n            for c in range(c1, c2):\n                for split in range(1, k):\n                    area1 = dfs((r1, c1), (r2, c), split)\n                    area2 = dfs((r1, c+1), (r2, c2), k-split)\n                    \n                    min_area = min(min_area, area1+area2)\n            \n            return min_area\n        \n        R, C = len(A), len(A[0])\n        res = dfs((0,0), (R-1,C-1),3)\n        return res\n                \n            \n            \n            \n            \n            \n        ",
    "submit_ts": "1719114283",
    "subm_id": "1297343626"
}