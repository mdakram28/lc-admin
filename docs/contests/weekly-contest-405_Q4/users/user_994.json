{
    "username": "yash_nayak03",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        var trie = new Trie();\n        var map = new HashMap<String,Integer>();\n        for (int i = 0; i < words.length; i++) {\n            if (map.containsKey(words[i])) {\n                int index = map.get(words[i]);\n                if (costs[index] > costs[i]) {\n                    map.put(words[i], i);\n                }\n            } else {\n                map.put(words[i], i);\n            }\n        }\n        for (var str: map.keySet()) {\n            trie.insert(str, map.get(str));\n        }\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE / 2);\n        dp[0] = 0;\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE / 2) continue;\n            var indices = trie.search(target, i);\n            for (int index : indices) {\n                String word = words[index];\n                int cost = costs[index];\n                if (i + word.length() <= n) {\n                    dp[i + word.length()] = Math.min(dp[i + word.length()], dp[i] + cost);\n                }\n            }\n        }\n        return dp[n] >= Integer.MAX_VALUE / 2 ? -1 : dp[n];\n    }\n}\n\nclass Trie {\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word, int index) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            int i = ch - 'a';\n            if (node.children[i] == null) {\n                node.children[i] = new TrieNode();\n            }\n            node = node.children[i];\n        }\n        node.wordIndex = index;\n    }\n\n    public List<Integer> search(String target, int start) {\n        List<Integer> result = new ArrayList<>();\n        TrieNode node = root;\n        for (int i = start; i < target.length(); i++) {\n            int index = target.charAt(i) - 'a';\n            if (node.children[index] == null) {\n                break;\n            }\n            node = node.children[index];\n            if (node.wordIndex != -1) {\n                result.add(node.wordIndex);\n            }\n        }\n        return result;\n    }\n}\n\nclass TrieNode {\n    TrieNode[] children;\n    int wordIndex; // To store the index of the word in the words array\n\n    public TrieNode() {\n        children = new TrieNode[26]; // Assuming only lowercase English letters\n        wordIndex = -1;\n    }\n}\n\n",
    "submit_ts": "1720322919",
    "subm_id": "1312362620"
}