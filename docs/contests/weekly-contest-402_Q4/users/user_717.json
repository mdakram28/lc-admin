{
    "username": "Abhijith8",
    "submission": "class Solution {\npublic:\n    static const int N=(1<<19);\n    int tree[N],k=1;\n    \n    int find(int node , int ml , int mr , int ql , int qr){\n        if(ml>qr or ql>mr){\n            return 0;\n        }\n        if(ql<=ml and mr<=qr){\n            return tree[node];\n        }\n        int mid=(ml+mr)/2;\n        return find(2*node,ml,mid,ql,qr)+find(2*node+1,mid+1,mr,ql,qr);\n    }\n    \n    void update(int j , int val , vector<int> &a){\n        a[j]=val;\n        int n=a.size();\n        if(j==0 or j==n-1){\n            tree[k+j]=0;\n        }\n        else{\n            if(a[j]>a[j-1] and a[j]>a[j+1]){\n                tree[k+j]=1;\n            }\n            else {\n                tree[k+j]=0;\n            }\n        }\n        for(int i=(k+j)/2;i>=1;i/=2){\n            tree[i]=tree[2*i]+tree[2*i+1];\n        }\n    }\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        int n=a.size();\n        while(k<n){\n            k*=2;\n        }\n        // cout<<k<<endl;\n        for(int i=0;i<n;i++){\n            if(i==0 or i==n-1){\n                tree[k+i]=0;\n            }\n            else{\n                if(a[i]>a[i-1] and a[i]>a[i+1]){\n                    tree[k+i]=1;\n                }\n            }\n        }\n        for(int i=k-1;i>=0;i--){\n            tree[i]=tree[2*i]+tree[2*i+1];\n        }\n        vector<int>ans;\n        for(vector<int> v : q){\n            if(v[0]==1){\n                int p=find(1,0,k-1,v[1],v[2]);\n                if(tree[k+v[1]])p--;\n                if(tree[k+v[2]] and v[1]!=v[2])p--;\n                ans.push_back(p);\n            }\n            else{\n                update(v[1],v[2],a);\n                if(v[1]-1>=0)update(v[1]-1,a[v[1]-1],a);\n                if(v[1]+1<n)update(v[1]+1,a[v[1]+1],a);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508011",
    "subm_id": "1289669202"
}