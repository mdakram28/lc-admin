{
    "username": "bhavyas_",
    "submission": "#include <vector>\n#include <set>\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int cityCount, vector<vector<int>>& updates) {\n        vector<int> incrementalDistances = initializeDistances(cityCount);\n        set<int> activeIndices = initializeActiveIndices(cityCount);\n        vector<int> resultDistances;\n\n        for (const auto& update : updates) {\n            int leftIndex = update[0];\n            int rightIndex = update[1];\n            updateActiveIndices(activeIndices, leftIndex, rightIndex);\n            resultDistances.push_back(calculateRemainingDistance(activeIndices));\n        }\n\n        return resultDistances;\n    }\n\nprivate:\n    // Initialize distances array with incremental values\n    vector<int> initializeDistances(int count) {\n        vector<int> distances(count, 0);\n        for (int i = 1; i < count; ++i) {\n            distances[i] = distances[i - 1] + 1;\n        }\n        return distances;\n    }\n\n    // Initialize set with all city indices\n    set<int> initializeActiveIndices(int count) {\n        set<int> indices;\n        for (int i = 0; i < count; ++i) {\n            indices.insert(i);\n        }\n        return indices;\n    }\n\n    // Remove indices within the specified range\n    void updateActiveIndices(set<int>& indices, int left, int right) {\n        auto startIter = indices.lower_bound(left + 1);\n        auto endIter = indices.lower_bound(right);\n        indices.erase(startIter, endIter);\n    }\n\n    // Calculate the number of remaining indices minus one\n    int calculateRemainingDistance(const set<int>& indices) {\n        return indices.size() - 1;\n    }\n};\n",
    "submit_ts": "1722743991",
    "subm_id": "1343804597"
}