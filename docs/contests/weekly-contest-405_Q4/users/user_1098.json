{
    "username": "Tinker_21",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        map<char, TrieNode*> v;\n        vector<pair<int, int>> p;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        \n        Trie() {\n            root = new TrieNode();\n        }\n\n        void insert(const string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (node->v.find(c) == node->v.end())\n                    node->v[c] = new TrieNode();\n                node = node->v[c];\n            }\n            node->p.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->v.find(target[j]) == node->v.end()) break;\n                node = node->v[target[j]];\n                for (auto& p : node->p) {\n                    int wordIndex = p.first;\n                    int wordCost = p.second;\n                    int len = words[wordIndex].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX)\n        dp[n] = -1;\n        else dp[n] = dp[n];\n        return dp[n];\n    }\n};\n",
    "submit_ts": "1720322833",
    "subm_id": "1312360276"
}