{
    "username": "Roll_Num_44",
    "submission": "#include <iostream>\n#include <vector>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // Main function to calculate minimum flips\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int ans = 0;\n        \n        // Loop through the 2x2 sub-grids\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int elements[4] = {\n                    grid[i][j],\n                    grid[n - i - 1][j],\n                    grid[i][m - j - 1],\n                    grid[n - i - 1][m - j - 1]\n                };\n                \n                int ones = elements[0] + elements[1] + elements[2] + elements[3];\n                ans += min(ones, 4 - ones);\n            }\n        }\n        \n        int possible = 0;\n        int count = 0;\n\n        // Handle the middle row if n is odd\n        if (n % 2 != 0) {\n            for (int j = 0; j < m / 2; ++j) {\n                if (grid[n / 2][j] != grid[n / 2][m - j - 1]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[n / 2][j] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n\n        // Handle the middle column if m is odd\n        if (m % 2 != 0) {\n            for (int i = 0; i < n / 2; ++i) {\n                if (grid[i][m / 2] != grid[n - i - 1][m / 2]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[i][m / 2] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n\n        // Handle the central element if both n and m are odd\n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            ans += 1;\n        }\n\n        if (possible == 0 && count % 2 != 0) {\n            ans += 2;\n        }\n\n        return ans;\n    }\n\n    // Function to print the grid\n    void printGrid(const vector<vector<int>>& grid) {\n        for (const auto& row : grid) {\n            for (int cell : row) {\n                cout << cell << \" \";\n            }\n            cout << endl;\n        }\n    }\n\n    // Function to check if the grid is uniform\n    bool isUniform(const vector<vector<int>>& grid) {\n        int firstValue = grid[0][0];\n        for (const auto& row : grid) {\n            for (int cell : row) {\n                if (cell != firstValue) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    // Function to count the number of 1s in the grid\n    int countOnes(const vector<vector<int>>& grid) {\n        int count = 0;\n        for (const auto& row : grid) {\n            for (int cell : row) {\n                if (cell == 1) {\n                    count++;\n                }\n            }\n        }\n        return count;\n    }\n};",
    "submit_ts": "1722699248",
    "subm_id": "1343205939"
}