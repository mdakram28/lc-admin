{
    "username": "klxu03",
    "submission": "class Graph {\n    public:\n    int n; \n    vector<vector<int>> adj;\n    vector<bool> visited;\n\n    vector<int> hits_top; // if circle[i] hits top or not\n    vector<int> hits_right;\n    vector<int> hits_bot;\n    vector<int> hits_left;\n\n    vector<array<int, 2>> top_lefts;\n    vector<array<int, 2>> bot_rights;\n\n    int hit_top;\n    int hit_right;\n    int hit_bot;\n    int hit_left;\n\n    Graph() {}\n\n    void init() {\n        adj = vector<vector<int>>(n);\n        visited = vector<bool>(n);\n        hits_top = vector<int>(n, -1);\n        hits_right = vector<int>(n, -1);\n        hits_bot = vector<int>(n, -1);\n        hits_left = vector<int>(n, -1);\n    }\n\n    // return if can go from top row to right col\n    void dfs(int node) {\n        visited[node] = true;\n\n        if (hits_top[node] != -1) {\n            hit_top = hits_top[node];\n        }\n\n        if (hits_right[node] != -1) {\n            hit_right = hits_right[node];\n        }\n\n        if (hits_bot[node] != -1) {\n            hit_bot = hits_bot[node];\n        }\n\n        if (hits_left[node] != -1) {\n            hit_left = hits_left[node];\n        }\n\n        for (int neigh : adj[node]) {\n            if (visited[neigh]) continue;\n            dfs(neigh);\n        }\n    }\n};\n\nclass Solution {\npublic:\n    bool circlesTouchEachOther(const vector<int>& x, const vector<int>& y) {\n        long long dx = x[0] - y[0];\n        long long dy = x[1] - y[1];\n\n        long long radii = x[2] + y[2];\n        radii *= radii;\n\n\n        return (dx * dx) + (dy * dy) <= radii;\n    }\n\n    bool canReachCorner(int X, int Y, const vector<vector<int>>& circles) {\n        Graph g;\n        g.n = circles.size();\n        g.init();\n\n        for (int i = 0; i < circles.size(); i++) {\n            for (int j = i + 1; j < circles.size(); j++) {\n                if (circlesTouchEachOther(circles[i], circles[j])) {\n                    g.adj[i].push_back(j);\n                    g.adj[j].push_back(i);\n                }\n            }\n\n            if (circles[i][0] + circles[i][2] >= X) {\n                g.hits_right[i] = true;\n            }\n\n            if (circles[i][1] + circles[i][2] >= Y) {\n                g.hits_top[i] = true;\n            }\n\n            if (circles[i][0] - circles[i][2] <= 0) {\n                g.hits_left[i] = true;\n            }\n\n            if (circles[i][1] - circles[i][2] <= 0) {\n                g.hits_bot[i] = true;\n            }\n\n            // check if bot left, or top right is in this circle\n            long long r2 = circles[i][2];\n            r2 *= r2;\n\n            // check bot_left\n            long long x2 = circles[i][0];\n            x2 *= x2;\n            long long y2 = circles[i][1];\n            y2 *= y2;\n\n            if (x2 + y2 <= r2) {\n                // bot_left is in this circle\n                cout << \"bot_left \" << i << endl;\n                return false;\n            }\n\n            x2 = X - circles[i][0];\n            y2 = Y - circles[i][1];\n            x2 *= x2;\n            y2 *= y2;\n\n            if (x2 + y2 <= r2) {\n                cout << \"top_right \" << i << endl;\n                return false;\n            }\n        }\n\n        /*\n        cout << \"hits_top: \";\n        for (int i = 0; i < circles.size(); i++) {\n            cout << g.hits_top[i] << \" \"; \n        }\n        cout << endl << \"hits_left: \";\n        for (int i = 0; i < circles.size(); i++) {\n            cout << g.hits_left[i] << \" \"; \n        }\n        cout << endl << \"hits_bot: \";\n        for (int i = 0; i < circles.size(); i++) {\n            cout << g.hits_bot[i] << \" \"; \n        }\n        cout << endl << \"hits_right: \";\n        for (int i = 0; i < circles.size(); i++) {\n            cout << g.hits_right[i] << \" \"; \n        }\n        */\n\n        for (int i = 0; i < circles.size(); i++) {\n            if (!g.visited[i]) {\n                g.hit_top = -1;\n                g.hit_right = -1;\n                g.hit_bot = -1;\n                g.hit_left = -1;\n                g.dfs(i);\n\n                if (g.hit_top != -1 && g.hit_right != -1) {\n                    cout << \"hit top and right\" << endl;\n                    return false;\n                } else if (g.hit_top != -1 && g.hit_bot != -1) {\n                    cout << \"hit top and bot\" << endl;\n                    return false;\n                } else if (g.hit_left != -1 && g.hit_right != -1) {\n                    cout << \"hit left and right\" << endl;\n                    return false;\n                } else if (g.hit_left != -1 && g.hit_bot != -1) {\n                    cout << \"hit left and bot\" << endl;\n                    return false;\n                }\n            }\n        }\n\n        return true;\n    }\n};",
    "submit_ts": "1722138960",
    "subm_id": "1335804172"
}