{
    "username": "anshudwivedi135",
    "submission": "class Solution\n{\nprivate:\n    void dfsVisit(int &ans,const vector<vector<int>> &v, int node, int d, vector<int> &distance )\n    {\n        distance[node] = d;\n        if (d > distance[ans])\n        {\n            ans = node;\n        }\n        for (int neighbor : v[node])\n        {\n            if (distance[neighbor] == -1)\n            {\n                dfsVisit(ans,v, neighbor, d + 1, distance);\n            }\n        }\n    }\n\n    int dfs(const vector<vector<int>> &v, int st, int &ans)\n    {\n        int n = v.size();\n        vector<int> distance(n, -1);\n        ans = st;\n        dfsVisit(ans,v, st, 0, distance);\n        return distance[ans];\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>> &edges1, vector<vector<int>> &edges2)\n    {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        vector<vector<int>> v1(n);\n        vector<vector<int>> v2(m);\n\n        for ( auto i: edges1)\n        {\n            v1[i[0]].push_back(i[1]);\n            v1[i[1]].push_back(i[0]);\n        }\n        for (auto i : edges2)\n        {\n            v2[i[0]].push_back(i[1]);\n            v2[i[1]].push_back(i[0]);\n        }\n\n        int node1 = 0;\n        dfs(v1, 0, node1);\n        int d1 = dfs(v1, node1, node1);\n        int node2 = 0;\n        dfs(v2, 0, node2);\n        int d2 = dfs(v2, node2, node2);\n\n        int temp = max(d1, d2);\n        int half1 = (d1 + 1) / 2;\n        int half2 = (d2 + 1) / 2;\n        return max(temp, half1 + half2 + 1);\n    }\n};\n",
    "submit_ts": "1719717928",
    "subm_id": "1304404347"
}