{
    "username": "Lakshya_1807",
    "submission": "class Solution {\npublic:\n    \n    void solve1(vector<int>*adj,int node,int par,vector<int>&heights){\n \n        int maxi = 0;\n        int ct = 0;\n\n        for(int child : adj[node]){\n            if(child != par){\n                solve1(adj,child,node,heights);\n                maxi = max(maxi ,heights[child]);\n                ct++;\n            }\n        }\n\n        if(ct == 0){\n            heights[node] = 0;\n        }else{\n            heights[node] = 1+maxi;\n        }\n\n    }\n \nvoid solve2(vector<int>*adj,int node,int par,int par_ans,vector<int>&heights,vector<int>&dp){\n \n        dp[node] = max(heights[node] , 1 + par_ans);\n\n        int ct= 0;\n        vector<int> children,pf,sf;\n\n        for(int child : adj[node]){\n            if(child != par){\n                children.push_back(child);\n                pf.push_back(heights[child]);\n                sf.push_back(heights[child]);\n                ct++;\n            }\n        }\n\n        for(int i=1;i<ct;i++){\n            pf[i] = max(pf[i] , pf[i-1]);\n        }\n        for(int i=ct-2;i>=0;i--){\n            sf[i] = max(sf[i] , sf[i+1]);\n        }\n\n        for(int i=0;i<ct;i++){\n            int val = 1 + par_ans;\n\n            if(i-1 >=0){\n                val = max(val , 1 + pf[i-1]);\n            }\n\n            if(i+1<ct){\n                val = max(val , 1 + sf[i+1]);\n            }\n\n            solve2(adj,children[i],node,val,heights,dp);\n\n        }\n\n    }\n    \n    vector<int>solve(vector<vector<int>>& edges){\n        int n = edges.size()+1;\n        vector<int>adj[n];\n        \n        for(auto&e : edges){\n            int u = e[0] , v=e[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        \n        vector<int> heights(n,0),dp(n,0);\n        solve1(adj,0,-1,heights);\n \n        // for(int i=1;i<=n;i++){\n        //     cout<<heights[i]<<\" \";\n        // }\n \n        solve2(adj,0,-1,-1,heights,dp);\n        \n        return dp;\n        \n    }\n\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        vector<int>dp1 = solve(edges1);\n        vector<int>dp2 = solve(edges2);\n        \n        int a1 = *max_element(dp1.begin() , dp1.end());\n        int a2 = *max_element(dp2.begin() , dp2.end());\n        \n        int a3 = *min_element(dp1.begin() , dp1.end());\n        int a4 = *min_element(dp2.begin() , dp2.end());\n        \n        int ans = max(a1,a2);\n            \n        return max(ans , a3+a4+1);\n        \n        \n        \n    }\n};",
    "submit_ts": 1719719240.0
}