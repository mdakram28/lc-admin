{
    "username": "jwpassion1",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> graph, subdist;\n    vector<int> ans;\n    \n    void subdfs(int node, int par){\n        subdist[node].push_back(0);\n        for (int i : graph[node]){\n            if (i == par) continue;\n            subdfs(i, node);\n            if (i % 2) subdist[node].push_back(subdist[i].back() + 1);\n            else subdist[node].push_back(subdist[i].back() + 2);\n        }\n        sort(subdist[node].begin(), subdist[node].end());\n    }\n    \n    void ansdfs(int node, int par, int dist){\n        ans[node] = max(subdist[node].back(), dist);\n        for (int i : graph[node]){\n            if (i == par) continue;\n            int tmp = subdist[node].back(), stmp = subdist[i].back() + 1;\n            if (!(i % 2)) stmp++;\n            if (tmp == stmp) tmp = subdist[node][subdist[node].size() - 2];\n            if (node % 2) ansdfs(i, node, max(dist, tmp) + 1);\n            else ansdfs(i, node, max(dist, tmp) + 2);\n        }\n    }\n    \n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = (int)edges.size() + 1;\n        graph.resize(n);\n        subdist.resize(n);\n        ans.resize(n);\n        \n        for (vector<int> i : edges){\n            graph[i[0]].push_back(i[1]);\n            graph[i[1]].push_back(i[0]);\n        }\n        subdfs(0, -1);\n        ansdfs(0, -1, 0);\n        return ans;\n    }\n};",
    "submit_ts": "1722697956",
    "subm_id": "1343164851"
}