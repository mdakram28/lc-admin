{
    "username": "jainamit130",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n        const int MAX_INVER = 400;\n        unordered_map<int, int> requirementsMap = initializeRequirementsMap(requirements);\n        vector<vector<long>> permutationsCount = initializePermutationsCount(n, MAX_INVER, MOD);\n        populatePermutationsCount(n, MAX_INVER, permutationsCount, requirementsMap, MOD);\n        long result = calculateResult(n, permutationsCount, MOD);\n\n        return result;\n    }\n\nprivate:\n    unordered_map<int, int> initializeRequirementsMap(vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        return reqMap;\n    }\n\n    vector<vector<long>> initializePermutationsCount(int n, int maxInversions, int mod) {\n        vector<vector<long>> pc(n + 1, vector<long>(maxInversions + 1, 0));\n        pc[0][0] = 1;\n        return pc;\n    }\n\n    void populatePermutationsCount(int n, int maxInversions, vector<vector<long>>& pc,\n                                   unordered_map<int, int>& reqMap, int mod) {\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= maxInversions; inversions++) {\n                for (int position = 0; position < length; position++) {\n                    int previousInversions = inversions - position;\n                    if (previousInversions >= 0) {\n                        pc[length][inversions] = (pc[length][inversions] + pc[length - 1][previousInversions]) % mod;\n                    }\n                }\n            }\n\n            if (reqMap.count(length)) {\n                int requiredInversions = reqMap[length];\n                for (int inversions = 0; inversions <= maxInversions; inversions++) {\n                    if (inversions != requiredInversions) {\n                        pc[length][inversions] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    long calculateResult(int n, vector<vector<long>>& pc, int mod) {\n        long result = 0;\n        for (long count : pc[n]) {\n            result = (result + count) % mod;\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1719070547.0
}