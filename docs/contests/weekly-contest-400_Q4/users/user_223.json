{
    "username": "ankushtyagi7777",
    "submission": "class Solution {\npublic:\n    \n    #define ll long long\ntemplate<class T, class U>\n// T -> node, U->update.\nstruct Lsegtree{\n    vector<T>st;\n    vector<U>lazy;\n    ll n;\n    T identity_element;\n    U identity_update;\n\n    /*\n        Definition of identity_element: the element I such that combine(x,I) = x\n        for all x\n\n        Definition of identity_update: the element I such that apply(x,I) = x\n        for all x        \n    */\n\n    Lsegtree(ll n, T identity_element, U identity_update)\n    {\n        this->n = n;\n        this->identity_element = identity_element;\n        this->identity_update = identity_update;\n        st.assign(4*n,identity_element);\n        lazy.assign(4*n, identity_update);\n    }\n\n\n    T combine(T l, T r)\n    {\n        // change this function as required.\n        T ans = (l&r);\n        return ans;\n    }\n\n\n    void buildUtil(ll v, ll tl, ll tr, vector<T>&a)\n    {\n        if(tl == tr)\n        {\n            st[v] = a[tl];\n            return;\n        }\n        ll tm = (tl + tr)>>1;\n        buildUtil(2*v + 1, tl, tm,a);\n        buildUtil(2*v + 2,tm+1,tr,a);\n        st[v] = combine(st[2*v + 1], st[2*v + 2]);\n    }\n\n\n\n    // change the following 2 functions, and you're more or less done.\n    T apply(T curr, U upd, ll tl, ll tr)\n    {\n        T ans = (tr-tl+1)*upd;\n        // increment range by upd:\n        // T ans = curr + (tr - tl + 1)*upd\n\n        return ans;\n    }\n\n    U combineUpdate(U old_upd, U new_upd, ll tl, ll tr)\n    {\n        U ans = old_upd;\n        ans=new_upd;\n        return ans;\n    }  \n\n\n    void push_down(ll v, ll tl, ll tr)\n    {\n        //for the below line to work, make sure the \"==\" operator is defined for U.\n        if(lazy[v] == identity_update)return;\n        st[v] = apply(st[v], lazy[v], tl, tr);\n        if(2*v + 1 <= 4*n)\n        {\n            ll tm = (tl + tr)>>1;\n            lazy[2*v + 1] = combineUpdate(lazy[2*v+1], lazy[v], tl, tm);\n            lazy[2*v + 2] = combineUpdate(lazy[2*v+2], lazy[v], tm+1,tr);            \n        }\n        lazy[v] = identity_update;\n    }\n    T queryUtil(ll v, ll tl, ll tr, ll l, ll r)\n    {\n        push_down(v,tl,tr);\n        if(l > r)return identity_element;\n        if(tr < l or tl > r)\n        {\n            return identity_element;\n        }\n        if(l <= tl and r >= tr)\n        {\n            return st[v];\n        }\n        ll tm = (tl + tr)>>1;\n        return combine(queryUtil(2*v+1,tl,tm,l,r), queryUtil(2*v+2,tm+1,tr,l,r));\n    }\n \n    void updateUtil(ll v, ll tl, ll tr, ll l, ll r, U upd)\n    {\n        push_down(v,tl,tr); \n        if(tr < l or tl > r)return;\n        if(tl >=l and tr <=r)\n        {\n            lazy[v] = combineUpdate(lazy[v],upd,tl,tr);\n            push_down(v,tl,tr);\n        }\n        else\n        {\n            ll tm = (tl + tr)>>1;\n            updateUtil(2*v+1,tl,tm,l,r,upd);\n            updateUtil(2*v+2,tm+1,tr,l,r,upd);\n            st[v] = combine(st[2*v + 1], st[2*v+2]);\n        }\n    }\n\n\n\n    void build(vector<T>a)\n    {\n        assert( (ll)a.size() == n);\n        buildUtil(0,0,n-1,a);\n    }\n    T query(ll l, ll r)\n    {\n        return queryUtil(0,0,n-1,l,r);\n    }\n    void update(ll l,ll r, U upd)\n    {\n        updateUtil(0,0,n-1,l,r,upd);\n    }\n};\n        \n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        int i=0,j=0;\n        ll val=nums[0];\n        ll ret=1e17;\n        Lsegtree<int,int> st(n,(1<<30)-1,-1);\n        st.build(nums);\n        while(j<n&&i<n){\n            ret=min(ret,abs(k-val));\n            if(val<k){\n                i++;\n                if(i>j) j++;\n                if(j==n) break;\n                val=st.query(i,j);\n            }\n            else{\n                j++;\n                if(j==n) break;\n                val=val&nums[j];\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": 1717298197.0
}