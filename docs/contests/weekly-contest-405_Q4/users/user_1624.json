{
    "username": "Archit_1608",
    "submission": "class Node {\npublic:\n    Node* children[26] = {};\n    int wordIndex = -1;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Node* root = new Node();\n        \n        // Build trie\n        for (int i = 0; i < words.size(); ++i) {\n            Node* node = root;\n            for (char ch : words[i]) {\n                if (!node->children[ch - 'a']) {\n                    node->children[ch - 'a'] = new Node();\n                }\n                node = node->children[ch - 'a'];\n            }\n            if (node->wordIndex == -1 || costs[i] < costs[node->wordIndex]) {\n                node->wordIndex = i;\n            }\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            Node* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                node = node->children[target[j] - 'a'];\n                if (node->wordIndex != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[node->wordIndex]);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323715",
    "subm_id": "1312382291"
}