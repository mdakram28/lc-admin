{
    "username": "lyongwolf",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        char[] str = s.toCharArray();\n        int n = str.length;\n        List<Integer> zero = new ArrayList<>(), one = new ArrayList<>();\n        List<int[]>[] task = new List[n];\n        Arrays.setAll(task, v -> new ArrayList<>());\n        for (int i = 0; i < queries.length; i++) {\n            task[queries[i][1]].add(new int[]{queries[i][0], i});\n        }\n        long[] ans = new long[queries.length];\n        SegTree tree = new SegTree(n);\n        for (int i = 0; i < n; i++) {\n            if (str[i] == '0') {\n                zero.add(i);\n            } else {\n                one.add(i);\n            }\n            int a;\n            if (zero.size() <= k) {\n                a = -1;\n            } else {\n                a = zero.get(zero.size() - k - 1);\n            }\n            int b;\n            if (one.size() <= k) {\n                b = -1;\n            } else {\n                b = one.get(one.size() - k - 1);\n            }\n            int len;    \n            if (a == -1 || b == -1) {\n                len = i + 1;\n            } else {\n                len = i - Math.min(a, b);\n            }\n            int l = i - len + 1, r = i;\n            tree.add(l, r, 1);\n            for (int[] tup : task[i]) {\n                ans[tup[1]] = tree.query(tup[0], r);\n            }\n        }\n        return ans;\n    }\n\n    static class SegTree {\n        private long[] sum;\n        private long[] lazy;\n        private int N;\n\n        public SegTree(int len) {\n            N = len;\n            sum = new long[N << 2];\n            lazy = new long[N << 2];\n        }\n\n        private void up(int i) {\n            sum[i] = sum[i << 1] + sum[i << 1 | 1];\n        }\n        \n        private void down(int i, int ln, int rn) {\n            if (lazy[i] > 0) {\n                lazy[i << 1] += lazy[i];\n                lazy[i << 1 | 1] += lazy[i];\n                sum[i << 1] += lazy[i] * ln;\n                sum[i << 1 | 1] += lazy[i] * rn;\n                lazy[i] = 0;\n            }\n        }\n\n        public void add(int l, int r, long v) {\n            add(l + 1, r + 1, v, 1, N, 1);\n        }\n\n        private void add(int L, int R, long v, int l, int r, int i) {\n            if (L <= l && r <= R) {\n                lazy[i] += v;\n                sum[i] += v * (r - l + 1);\n                return;\n            }\n            int m = (l + r) >> 1;\n            down(i, m - l + 1, r - m);\n            if (L <= m) {\n                add(L, R, v, l, m, i << 1);\n            }\n            if (R > m) {\n                add(L, R, v, m + 1, r, i << 1 | 1);\n            }\n            up(i);\n        }\n\n        public long query(int l, int r) {\n            return query(l + 1, r + 1, 1, N, 1);\n        }\n\n        private long query(int L, int R, int l, int r, int i) {\n            if (L <= l && r <= R) {\n                return sum[i];\n            }\n            int m = (l + r) >> 1;\n            down(i, m - l + 1, r - m);\n            long ans = 0;\n            if (L <= m) {\n                ans += query(L, R, l, m, i << 1);\n            }\n            if (R > m) {\n                ans += query(L, R, m + 1, r, i << 1 | 1);\n            }\n            return ans;\n        }\n    }\n\n}",
    "submit_ts": "1723953067",
    "subm_id": "556415326"
}