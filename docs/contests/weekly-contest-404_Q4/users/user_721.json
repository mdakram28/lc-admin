{
    "username": "vibhav2002singh",
    "submission": "#include <vector>\n#include <functional>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int size1 = edges1.size() + 1;\n        int size2 = edges2.size() + 1;\n        vector<vector<int>> graph1(size1);\n        vector<vector<int>> graph2(size2);\n        \n        // Build adjacency lists for tree 1\n        for (const auto& edge : edges1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n        \n        // Build adjacency lists for tree 2\n        for (const auto& edge : edges2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n        \n        // DFS function to find the farthest node and its distance\n        auto dfs = [&](const vector<vector<int>>& graph, int start, int& farthestNode) -> int {\n            int n = graph.size();\n            vector<int> distance(n, -1);\n            \n            function<void(int, int)> dfsVisit = [&](int node, int dist) {\n                distance[node] = dist;\n                if (dist > distance[farthestNode]) {\n                    farthestNode = node;\n                }\n                for (int neighbor : graph[node]) {\n                    if (distance[neighbor] == -1) {\n                        dfsVisit(neighbor, dist + 1);\n                    }\n                }\n            };\n            \n            farthestNode = start;\n            dfsVisit(start, 0);\n            return distance[farthestNode];\n        };\n        \n        // Find farthest nodes and distances in both trees\n        int node1 = 0;\n        int diameter1 = dfs(graph1, 0, node1);\n        diameter1 = dfs(graph1, node1, node1);\n        \n        int node2 = 0;\n        int diameter2 = dfs(graph2, 0, node2);\n        diameter2 = dfs(graph2, node2, node2);\n        \n        // Calculate minimum diameter after potential connections\n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n        \n        return minDiameter;\n    }\n};\n",
    "submit_ts": 1719719951.0
}