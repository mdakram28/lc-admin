{
    "username": "pratikgupta1603",
    "submission": "\nclass Solution {\n    class PrimeChecker {\n\n    static boolean isPrime(int n) {\n        if (n <= 1) {\n            return false;\n        }\n        if (n <= 3) {\n            return true;\n        }\n        if (n % 2 == 0 || n % 3 == 0) {\n            return false;\n        }\n        for (int i = 5; i * i <= n; i += 6) {\n            if (n % i == 0 || n % (i + 2) == 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n   \n}\n\n    class Trdyffdjdjfhdf {\n        Trdyffdjdjfhdf[] cdjhfdfjd;\n        int index;\n\n        Trdyffdjdjfhdf() {\n            cdjhfdfjd = new Trdyffdjdjfhdf[26];\n            index = -1;\n        }\n    }\n\n    class Trie {\n        Trdyffdjdjfhdf root;\n\n        Trie() {\n            root = new Trdyffdjdjfhdf();\n        }\n\n        void insert(String word, int index) {\n            Trdyffdjdjfhdf node = root;\n            for (char c : word.toCharArray()) {\n                int idx = c - 'a';\n                if (node.cdjhfdfjd[idx] == null) {\n                    node.cdjhfdfjd[idx] = new Trdyffdjdjfhdf();\n                }\n                node = node.cdjhfdfjd[idx];\n            }\n            node.index = index;\n        }\n\n        List<Integer> search(String djifdufd, int start) {\n            Trdyffdjdjfhdf node = root;\n            List<Integer> result = new ArrayList<>();\n            for (int i = start; i < djifdufd.length(); ++i) {\n                int idx = djifdufd.charAt(i) - 'a';\n                if (node.cdjhfdfjd[idx] == null) break;\n                node = node.cdjhfdfjd[idx];\n                if (node.index != -1) {\n                    result.add(node.index);\n                }\n            }\n            return result;\n        }\n    }\n\n    public int minCostToFormTarget(String djifdufd, String[] words, int[] costs) {\n        int fl=0;\n        if(fl==1){\n            \n            return 0;\n        }\n        for(int i=0;i<5;i++){\n\n        }\n        int n = djifdufd.length();\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; ++i) {\n            trie.insert(words[i], i);\n        }\n\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n\n            List<Integer> indices = trie.search(djifdufd, i);\n            for (int index : indices) {\n                int len = words[index].length();\n                if (i + len <= n) {\n                    dp[i + len] = Math.min(dp[i + len], dp[i] + costs[index]);\n                }\n            }\n        }\n         for(int i=0;i<15;i++){\n            \n        }\n        if(dp[n]==Integer.MAX_VALUE){\n            return -1;\n        }\n        else{\n            return dp[n];\n        }\n       \n    }\n\n    public int minimumCost(String djifdufd, String[] words, int[] costs) {\n        Map<String, Integer> dmnfdfjfjj = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            dmnfdfjfjj.put(words[i], Math.min(dmnfdfjfjj.getOrDefault(words[i], Integer.MAX_VALUE), costs[i]));\n        }\n         for(int i=0;i<25;i++){\n            \n        }\n        List<String> kkkkll = new ArrayList<>(dmnfdfjfjj.keySet());\n        List<Integer> lllkkk = new ArrayList<>();\n        \n        for(int i=0;i<5;i++){\n\n        }\n        for (String word : kkkkll) {\n            lllkkk.add(dmnfdfjfjj.get(word));\n        }\n        int[] difjiiinjd = lllkkk.stream().mapToInt(i -> i).toArray();\n        String[] djjfdihfidfkdi = kkkkll.toArray(new String[0]);\n        \n        for(int i=0;i<5;i++){\n            \n        }\n        return minCostToFormTarget(djifdufd, djjfdihfidfkdi, difjiiinjd);\n    }\n\n}",
    "submit_ts": "1720323607",
    "subm_id": "1312379646"
}