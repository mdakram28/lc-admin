{
    "username": "harryB17",
    "submission": "#define ll long long\nconst int N = 1e5 + 2, mod = 1e9+7;\nll trees[N*4][4];\n\nvoid merge(ll &node){\n    trees[node][0] = max({trees[2*node][2] + trees[2*node + 1][1],\n                          trees[2*node][0] + trees[2*node + 1][1],\n                          trees[2*node][2] + trees[2*node + 1][0]});\n    \n    trees[node][1] = max({trees[2*node][3] + trees[2*node + 1][1],\n                          trees[2*node][1] + trees[2*node + 1][1],\n                          trees[2*node][3] + trees[2*node + 1][0]});\n    \n    trees[node][2] = max({trees[2*node][2] + trees[2*node + 1][2],\n                          trees[2*node][2] + trees[2*node + 1][3],\n                          trees[2*node][0] + trees[2*node + 1][3]});\n    \n    trees[node][3] = max({trees[2*node][1] + trees[2*node + 1][3],\n                          trees[2*node][3] + trees[2*node + 1][2],\n                          trees[2*node][3] + trees[2*node + 1][3]});\n}\nvoid build(ll node, ll st, ll en, vector<int> &arr){ //built in O(2n -1) time\n    if(st == en){\n        if(arr[st] < 0) arr[st] = 0;\n        trees[node][0] = arr[st];\n        trees[node][1] = trees[node][2] = trees[node][3] = 0;\n        return;\n    }\n\n    ll mid = (st+en)/2;\n    build(2*node, st, mid, arr);\n    build(2*node + 1, mid+1, en, arr);\n    merge(node);\n}\n\nll query(ll node, ll st, ll en, ll l, ll r){ //done in log(n) time\n    if(st > r || en < l)return 0;\n    if(l <= st && r >= en) return trees[node][0];\n    \n    ll mid = (st + en)/2;\n    ll q1 = query(2*node, st, mid, l, r);\n    ll q2 = query(2*node + 1, mid+1, en, l, r);\n\n    return (q1 + q2)%mod;\n}\n\nvoid update(ll node, ll st, ll en, ll idx, ll val, vector<int> &arr){\n    if(st == en && st == idx){\n        if(val < 0) val = 0;\n        arr[st] = val;\n        trees[node][0] = val;\n        return;\n    }\n\n    ll mid = (st + en)/2;\n    if(mid >= idx) update(2*node, st, mid, idx, val, arr);\n    else update(2*node + 1, mid+1, en, idx, val, arr);\n    merge(node);\n}\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        build(1,0,n-1,nums);\n        ll ans = 0;\n        for(auto &i : queries){\n            update(1,0,n-1,i[0],i[1],nums);\n            ans += query(1,0,n-1,0,n-1); ans %= mod;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716693546.0
}