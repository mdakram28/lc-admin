{
    "username": "dokenobuggy799",
    "submission": "class SGTree {\npublic:\n    SGTree(const vector<int>& nums) : n(nums.size()) {\n        tree.resize(4 * n);\n    }\n    \n    void build(vector<int>& nums){\n        build(nums, 0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    void update(int ind, int val, const vector<int>& nums) {\n        update(0, 0, n - 1, ind, val, nums);\n    }\n\nprivate:\n    vector<int> tree;\n    int n;\n\n    bool isPeak(const vector<int>& nums, int i) {\n        if (i <= 0) return false;\n        if( i>= nums.size() - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = (int)isPeak(nums, start);\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left = query(2 * node + 1, start, mid, l, r);\n        int right = query(2 * node + 2, mid + 1, end, l, r);\n        return left + right;\n    }\n\n    void update(int node, int start, int end, int ind, int val, const vector<int>& nums) {\n        if (start == end) {\n            tree[node] = (int)isPeak(nums, ind);\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= ind && ind <= mid) {\n                update(2 * node + 1, start, mid, ind, val, nums);\n            } else {\n                update(2 * node + 2, mid + 1, end, ind, val, nums);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SGTree tree(nums);\n        tree.build(nums);\n        vector<int> ans;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                if (l == r) {\n                    ans.push_back(0);\n                } else {\n                    ans.push_back(tree.query(l + 1, r - 1));\n                }\n            } else if (query[0] == 2) {\n                int ind = query[1], val = query[2];\n                nums[ind] = val;\n                if (ind > 0) tree.update(ind - 1, nums[ind - 1], nums);\n                tree.update(ind, nums[ind], nums);\n                if (ind < nums.size() - 1) tree.update(ind + 1, nums[ind + 1], nums);\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": 1718507763.0
}