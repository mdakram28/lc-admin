{
    "username": "AlphaS",
    "submission": "class Solution {\npublic:\n    long long tree[4 * 50005][2][2];\n    int num[50005];\n\n    void build(int node, int l, int r){\n        if(l == r){\n            tree[node][0][0] = 0;\n            tree[node][0][1] = 0;\n            tree[node][1][0] = 0;\n            tree[node][1][1] = max(num[l], 0);\n            return;\n        }\n        int mid = (l + r) / 2;\n        build(node * 2, l, mid);\n        build(node * 2 + 1, mid + 1, r);\n        tree[node][0][0] = max(tree[node * 2][0][0] + tree[node * 2 + 1][1][0], tree[node * 2][0][1] + tree[node * 2 + 1][0][0]);\n        tree[node][0][1] = max(tree[node * 2][0][0] + tree[node * 2 + 1][1][1], tree[node * 2][0][1] + tree[node * 2 + 1][0][1]);\n        tree[node][1][0] = max(tree[node * 2][1][0] + tree[node * 2 + 1][1][0], tree[node * 2][1][1] + tree[node * 2 + 1][0][0]);\n        tree[node][1][1] = max(tree[node * 2][1][0] + tree[node * 2 + 1][1][1], tree[node * 2][1][1] + tree[node * 2 + 1][0][1]);\n    }\n\n    void update(int node, int l, int r, int pos, int val){\n        if(pos > r || pos < l) return;\n\n        if(l == r){\n            tree[node][0][0] = 0;\n            tree[node][0][1] = 0;\n            tree[node][1][0] = 0;\n            tree[node][1][1] = max(val, 0);\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        update(node * 2, l, mid, pos, val);\n        update(node * 2 + 1, mid + 1, r, pos, val);\n        tree[node][0][0] = max(tree[node * 2][0][0] + tree[node * 2 + 1][1][0], tree[node * 2][0][1] + tree[node * 2 + 1][0][0]);\n        tree[node][0][1] = max(tree[node * 2][0][0] + tree[node * 2 + 1][1][1], tree[node * 2][0][1] + tree[node * 2 + 1][0][1]);\n        tree[node][1][0] = max(tree[node * 2][1][0] + tree[node * 2 + 1][1][0], tree[node * 2][1][1] + tree[node * 2 + 1][0][0]);\n        tree[node][1][1] = max(tree[node * 2][1][0] + tree[node * 2 + 1][1][1], tree[node * 2][1][1] + tree[node * 2 + 1][0][1]);\n    }\n\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        for(int i = 0; i < nums.size(); i++){\n            num[i + 1] = nums[i];\n        }\n        build(1, 1, nums.size());\n        int mod = 1e9 + 7;\n        long long ans = 0;\n        for(int i = 0; i < queries.size(); i++){\n            int idx = queries[i][0];\n            int val = queries[i][1];\n            update(1, 1, nums.size(), idx + 1, val);\n            ans = (ans + tree[1][1][1]) % mod;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716692740.0
}