{
    "username": "chirag45610",
    "submission": "class Solution {\nprivate:\n    const int MOD = 1000000007;\n    const int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int j = 0; j < i; j++) {\n                    int prevInv = inv - j;\n                    if (prevInv >= 0) {\n                        permCounts[i][inv] = (permCounts[i][inv] + permCounts[i - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(i) != reqMap.end()) {\n                int targetInv = reqMap[i];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[i][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            result = (result + permCounts[n][inv]) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719070649.0
}