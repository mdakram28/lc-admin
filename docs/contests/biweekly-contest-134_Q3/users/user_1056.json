{
    "username": "dpk_12",
    "submission": "class Solution {\npublic:\n    int countAlternatingColorGroups(std::vector<int>& colors, int k) {\n        colors.insert(colors.end(), colors.begin(), colors.begin() + k);\n        int n = colors.size();\n        int groupCount = 0;\n        std::unordered_map<std::string, int> colorIndexMap;\n        std::vector<int> cumulativeDifferences(n + 1, 0);\n\n        for (int i = 1; i < n; ++i) {\n            cumulativeDifferences[i] = cumulativeDifferences[i - 1] + std::abs(colors[i] - colors[i - 1]);\n        }\n\n        k--;\n\n        for (int i = k + 1; i < n; ++i) {\n            if (cumulativeDifferences[i] - cumulativeDifferences[i - k] == k) {\n                groupCount++;\n            }\n        }\n\n        return groupCount;\n    }\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        return countAlternatingColorGroups(colors,k);\n    }\n};",
    "submit_ts": "1720279919",
    "subm_id": "1311770226"
}