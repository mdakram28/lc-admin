{
    "username": "Sarthak3204",
    "submission": "class Solution {\npublic:\n    struct node {\n        node *next[26];\n        int cost;\n\n        node() {\n            for (int i = 0; i < 26; i++) \n                next[i] = NULL;\n            cost = 1e9;\n        }\n    };\n    struct trie {\n        node *root;\n        trie() {\n            root = new node();\n        }\n        void insert(string &s, int cost) {\n            node *crawl = root;\n            int n = size(s);\n            for (int i = 0; i < n; i++) {\n                int in = s[i] - 'a';\n                if (!crawl->next[in]) crawl->next[in] = new node();\n                crawl = crawl->next[in];\n            }\n            crawl->cost = min(crawl->cost, cost);\n        }\n        void calc(int j, string &s, vector<int> &dp) {\n            int i = j;\n            node *crawl = root;\n            int n = size(s);\n            for (; j < n; j++) {\n                int in = s[j] - 'a';\n                if (!crawl->next[in]) return;\n                crawl = crawl->next[in];\n                dp[i] = min(dp[i], crawl->cost + dp[j + 1]);\n            }\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        trie t;\n        for (int i = 0; i < (int)size(words); i++) \n            t.insert(words[i], costs[i]);\n\n        int n = size(target);\n        vector<int> dp(n + 1, 1e9);\n        dp[n] = 0;\n        for (int i = n - 1; i >= 0; i--) \n            t.calc(i, target, dp);\n        return (dp[0] < 1e9 ? dp[0] : -1);\n    }\n};",
    "submit_ts": "1720321796",
    "subm_id": "1312332524"
}