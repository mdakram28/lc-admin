{
    "username": "Sumant591",
    "submission": " \nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = buildTrie(words, costs);\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < target.size(); ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < target.size(); ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[target.size()] == INT_MAX ? -1 : dp[target.size()];\n    }\n\nprivate:\n    TrieNode* buildTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (node->children.find(c) == node->children.end()) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = min(node->cost, costs[i]);\n        }\n        return root;\n    }\n};\n",
    "submit_ts": "1720324550",
    "subm_id": "1312402252"
}