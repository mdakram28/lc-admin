{
    "username": "dekail",
    "submission": "class SegmentTree:\n    def __init__(self, n):\n        self.n = n\n        self.total = defaultdict(int)\n\n\n    def update(self, o, l, r, idx, val):\n        if l == r:\n            self.total[o] = val\n            return\n        \n        mid = l + (r - l) // 2\n\n\n        if idx <= mid:\n            self.update(2 * o, l, mid, idx, val)\n        \n        else:\n            self.update(2 * o + 1, mid + 1, r, idx, val)\n        \n        self.total[o] = self.total[2 * o] + self.total[2 * o + 1]\n        return\n    \n    def query(self, o, l, r, left, right):\n        if r < left or right < l:\n            return 0\n        \n        if left <= l and r <= right:\n            return self.total[o]\n\n\n        mid = l + (r - l) // 2\n        result = 0\n\n        if left <= mid:\n            result += self.query(2 * o, l, mid, left, right)\n        \n        if mid + 1 <= right:\n            result += self.query(2 * o + 1, mid + 1, r, left, right)\n        \n        return result\n        \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = SegmentTree(n)\n        \n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                tree.update(1, 1, n, i + 1, 1)\n        \n        result = []\n        for q in queries:\n            if q[0] == 1:\n                _, left, right = q\n                result.append(tree.query(1, 1, n, left + 2, right))\n            else:\n                _, i, val = q\n                nums[i] = val\n                \n                if 1 <= i <= n - 2:\n                    if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                        tree.update(1, 1, n, i + 1, 1)\n                    else:\n                        tree.update(1, 1, n, i + 1, 0)\n                \n                if i >= 2:\n                    left = i - 1\n                    if nums[left - 1] < nums[left] and nums[left] > nums[left + 1]:\n                        tree.update(1, 1, n, left + 1, 1)\n                    else:\n                        tree.update(1, 1, n, left + 1, 0)\n                \n                if i <= n - 3:\n                    right = i + 1\n                    if nums[right - 1] < nums[right] and nums[right] > nums[right + 1]:\n                        tree.update(1, 1, n, right + 1, 1)\n                    else:\n                        tree.update(1, 1, n, right + 1, 0)          \n                        \n        return result",
    "submit_ts": "1718508244",
    "subm_id": "1289675757"
}