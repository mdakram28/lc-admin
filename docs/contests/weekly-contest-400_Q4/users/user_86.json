{
    "username": "vrangr",
    "submission": "const int mx = (1<<30)-1;\nclass segtree {\npublic:\n    int n;\n    vector<int> tree;\n    segtree(const vector<int> &a) {\n        n = a.size();\n        int gn = (n<<1);\n        if (__builtin_popcount(gn) != 1)\n            gn = (1<<(32-__builtin_clz(gn)));\n        tree.assign(gn,mx);\n        for (int i = 0; i < n; ++i)\n            tree[i+n] = a[i];\n        for (int i = n-1; i > 0; --i)\n            tree[i] = (tree[i<<1]&tree[i<<1|1]);\n    }\n    \n    int query(int l, int r) {\n        int res = mx;\n        for (l+=n,r+=n;l<r;l>>=1,r>>=1) {\n            if (l&1) res&=tree[l++];\n            if (r&1) res&=tree[--r];\n        }\n        return res;\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& vals, int k) {\n        int n = vals.size();\n        int sol = abs(accumulate(vals.begin(),vals.end(),mx,[](const int &a, const int &b) {return a&b;}) - k);\n        segtree st(vals);\n        auto bsch = [&](auto &&self, int low, int high, const int start) -> int {\n            assert(low <= high);\n            if (low == high)\n                return low;\n            int mid = (low+high)/2, mval = st.query(start,mid+1);\n            if (mval > k) return self(self,mid+1,high,start);\n            if (mval == k) return mid;\n            return self(self,low,mid,start);\n        };\n        for (int i = 0; i < n; ++i) {\n            if (vals[i] < k) {\n                sol = min(sol,abs(vals[i]-k));\n                continue;\n            }\n            if (vals[i] == k) return 0;\n            int ind = bsch(bsch,i,n-1,i);\n            sol = min(sol,abs(st.query(i,ind+1)-k));\n            if (ind < n-1) sol = min(sol,abs(st.query(i,ind+2)-k));\n            if (ind > i) sol = min(sol,abs(st.query(i,ind)-k));\n        }\n        return sol;\n    }\n};",
    "submit_ts": 1717297432.0
}