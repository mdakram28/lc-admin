{
    "username": "nikhil_dixit_abv_iiitm",
    "submission": "#define ll long long int\nclass Solution {\npublic:\n    bool doesVerticalLineIntersectCircle(double x, double x1, double y1, double r) {\n    double dist = r * r - (x - x1) * (x - x1);\n    return dist >= 0;\n}\n\nvoid dfs(ll node,map<ll,vector<ll>> &adj,map<ll,ll>& vis){\n    vis[node]++;\n    for(ll i=0;i<adj[node].size();i++){\n        ll nei=adj[node][i];\n        if(!vis.count(nei)){\n            dfs(nei,adj,vis);\n        }\n    }\n}\nbool doesHorizontalLineIntersectCircle(double y, double x1, double y1, double r) {\n    double dist = r * r - (y - y1) * (y - y1);\n    return dist >= 0;\n}\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        ll n=circles.size();\n        map<ll,vector<ll>> adj;\n        for(ll i=0;i<n;i++){\n            for(ll j=i+1;j<n;j++){\n                ll x1=circles[i][0];\n                ll y1=circles[i][1];\n                ll r1=circles[i][2];\n                \n                ll x2=circles[j][0];\n                ll y2=circles[j][1];\n                ll r2=circles[j][2];\n               \n                ll dis=((x2-x1)*(x2-x1))+((y2-y1)*(y2-y1));\n                \n                long double see=dis;\n                see=sqrt(see);\n                 \n                long double see2=r1+r2;\n               \n                if(see<=see2){\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        // n->upper\n        //n+1->bottom\n        //n+2->left\n        //n+3-> right\n        for(ll i=0;i<n;i++){\n            double x1=circles[i][0];\n            double y1=circles[i][1];\n            double r=circles[i][2];\n            //upper\n            bool see1=doesHorizontalLineIntersectCircle(Y, x1, y1, r);\n            \n            //bottom\n            bool see2=doesHorizontalLineIntersectCircle(0.0, x1, y1, r);\n            \n            //left\n            bool see3=doesVerticalLineIntersectCircle(0.0, x1, y1, r);\n            \n            //right\n            bool see4=doesVerticalLineIntersectCircle(X, x1, y1, r);\n            \n            if(see1){\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if(see2){\n                adj[n+1].push_back(i);\n                adj[i].push_back(n+1);\n            }\n            if(see3){\n                adj[n+2].push_back(i);\n                adj[i].push_back(n+2);\n            }\n            if(see4){\n                adj[n+3].push_back(i);\n                adj[i].push_back(n+3);\n            }\n        }\n        map<ll,ll> vis;\n        dfs(n,adj,vis);\n       \n        if(vis.count(n+1)||vis.count(n+3)){\n            return false;\n        }\n        \n      \n        vis.clear();\n       \n        dfs(n+2,adj,vis);\n        if(vis.count(n+1)||vis.count(n+3)){\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138081",
    "subm_id": "1335781629"
}