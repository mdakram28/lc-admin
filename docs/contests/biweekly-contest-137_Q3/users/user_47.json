{
    "username": "Ynez",
    "submission": "\n  public class Solution {\n    public long maximumValueSum(int[][] board) {\n      int X = board.length, Y = board[0].length;\n      boolean[] xOccupied = new boolean[X];\n      boolean[] yOccupied = new boolean[Y];\n      List<int[]> locationAndValue = new ArrayList<>(X * Y);\n      for (int x = 0; x < X; x++) {\n        for (int y = 0; y < Y; y++) {\n          locationAndValue.add(new int[]{x, y, board[x][y]});\n        }\n      }\n      locationAndValue.sort(Comparator.comparing(arr -> -arr[2]));\n      return dfs(locationAndValue, xOccupied, yOccupied, 3, 0, 0, Long.MIN_VALUE);\n    }\n\n    private long dfs(List<int[]> locationAndValue, boolean[] xOccupied, boolean[] yOccupied,\n                     int remain, int curIdx, long curValue, long max) {\n      for (int i = curIdx; i < locationAndValue.size(); i++) {\n        int[] cur = locationAndValue.get(i);\n        int x = cur[0], y = cur[1], value = cur[2];\n        if (xOccupied[x] || yOccupied[y]) {\n          continue;\n        }\n        if (curValue + (long) value * remain < max) {\n          // \u8ffd\u4e0d\u4e0a\u4e86\n          break;\n        }\n        if (remain == 1) {\n          max = Math.max(max, curValue + value);\n        } else {\n          xOccupied[x] = true;\n          yOccupied[y] = true;\n          max = dfs(locationAndValue, xOccupied, yOccupied, remain - 1, i + 1, curValue + value, max);\n          xOccupied[x] = false;\n          yOccupied[y] = false;\n        }\n      }\n      return max;\n    }\n  }",
    "submit_ts": "1723907214",
    "subm_id": "556324209"
}