{
    "username": "Abhiii1208",
    "submission": "from collections import deque\nimport math\nclass Solution:\n    def bf(self, g, s, t1, t2, n):\n        q = deque([s])\n        vis = [0] * (n + 4)\n        vis[s] = 1\n        \n        while q:\n            u = q.popleft()\n            for v in g[u]:\n                if not vis[v]:\n                    q.append(v)\n                    vis[v] = 1\n        \n        return vis[t1] or vis[t2]\n    def canReachCorner(self, X: int, Y: int, c2: List[List[int]]) -> bool:\n        nc = len(c2)\n        c = [((x, y), r) for x, y, r in c2]\n        g = [[] for _ in range(nc + 4)]\n        \n        for i in range(nc):\n            if c[i][0][0] <= c[i][1]:\n                g[nc].append(i)\n                g[i].append(nc)\n            if X - c[i][0][0] <= c[i][1]:\n                g[nc + 2].append(i)\n                g[i].append(nc + 2)\n            if c[i][0][1] <= c[i][1]:\n                g[nc + 1].append(i)\n                g[i].append(nc + 1)\n            if Y - c[i][0][1] <= c[i][1]:\n                g[nc + 3].append(i)\n                g[i].append(nc + 3)\n            for j in range(i + 1, nc):\n                d = math.sqrt((c[i][0][0] - c[j][0][0]) ** 2 + (c[i][0][1] - c[j][0][1]) ** 2)\n                if c[i][1] + c[j][1] >= d:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        return not (self.bf(g, nc, nc + 1, nc + 2, nc + 4) or\n                    self.bf(g, nc + 3, nc + 2, nc + 1, nc + 4))\n        ",
    "submit_ts": "1722138805",
    "subm_id": "1335800130"
}