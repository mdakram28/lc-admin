{
    "username": "MakeChanges",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int min = Integer.MAX_VALUE;\n        Set<Integer> set = new HashSet<>();\n        helper(points, -1, set);\n        // System.out.println(set);\n        for (int x : set) {\n            int val = helper(points, x, new HashSet<>());\n            min = Math.min(min, val);\n        }\n        return min;\n    }\n    \n    private int helper(int[][] points, int x, Set<Integer> set) {\n        int n = points.length;\n        List<int[]> sum = new ArrayList<>(), diff = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            if (i == x) {\n                continue;\n            }\n            sum.add(new int[]{points[i][0] + points[i][1], i});\n            diff.add(new int[]{points[i][0] - points[i][1], i});\n        }\n        Collections.sort(sum, (a, b) -> a[0] - b[0]);\n        Collections.sort(diff, (a, b) -> a[0] - b[0]);\n        int size = sum.size();\n        int max = Math.max(sum.get(size - 1)[0] - sum.get(0)[0], diff.get(size - 1)[0] - diff.get(0)[0]);\n        set.add(sum.get(size - 1)[1]);\n        set.add(sum.get(0)[1]);\n        set.add(diff.get(size - 1)[1]);\n        set.add(diff.get(0)[1]);\n        return max;\n    }\n}"
}