{
    "username": "wu99",
    "submission": "#define INF 1e15\n#define min(a, b) ((a) < (b)? (a) : (b))\ntypedef long long ll;\nclass Solution {\nprivate:\n    void solve(\n        const vector<vector<int>> &positions,\n        set<int> &row, set<int> &col, int n, int start,\n        ll sum, ll &maxsum, int &end) {\n            if (!n) {\n                if (sum >= maxsum) {\n                    maxsum = sum;\n                    end = min(end, start);\n                }\n                return;\n            }\n            for (int i = start; i <= min(end, positions.size()-n); i++) {\n                int val{positions[i][0]}, r{positions[i][1]}, c{positions[i][2]};\n                if (!row.count(r) && !col.count(c)) {\n                    row.insert(r);\n                    col.insert(c);\n                    solve(positions, row, col, n-1, i+1, sum+val, maxsum, end);\n                    row.erase(r);\n                    col.erase(c);\n                }\n            }\n            return;\n        }\npublic:\n    ll maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n = board[0].size();\n        vector<vector<int>> positions;\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++) {\n                positions.push_back({board[i][j], i, j});\n            }\n        sort(positions.begin(), positions.end(),\n            [](const vector<int> &a, const vector<int> &b) { return a[0] > b[0]; });\n        set<int> row, col;\n        ll sum{0}, maxsum = -INF;\n        int end = positions.size()-1;\n        solve(positions, row, col, 3, 0, sum, maxsum, end);\n        return maxsum;\n    }\n};",
    "submit_ts": "1723909290",
    "subm_id": "1359186926"
}