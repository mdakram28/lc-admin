{
    "username": "sky1429",
    "submission": "class SegmentTree:\n    def __init__(self, l, r):\n        self.l = l\n        self.r = r\n        self.val = 0\n        if l < r - 1:\n            m = (l + r)//2\n            self.left = SegmentTree(l, m)\n            self.right = SegmentTree(m, r)\n        \n    def update(self, ind, val):\n        if self.l == ind == self.r - 1:\n            self.val = val\n            return\n        if self.l > ind or self.r <= ind:\n            return\n        self.left.update(ind, val)\n        self.right.update(ind, val)\n        self.val = self.left.val + self.right.val\n    \n    def query(self, l, r):\n        if l <= self.l <= self.r <= r:\n            return self.val\n        if self.l >= r or l >= self.r:\n            return 0\n        # print(self.l, self.r, self.left.query(l, r) + self.right.query(l, r))\n        return self.left.query(l, r) + self.right.query(l, r)\n        \n        \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        Q = len(queries)\n        \n        st = SegmentTree(0, n)\n        \n        for i in range(1, n - 1):\n            if nums[i] > max(nums[i - 1], nums[i + 1]):\n                st.update(i, 1)\n        \n        def checkPeak(ind):\n            if ind <= 0 or ind >= n - 1:\n                return False\n            if nums[ind] > max(nums[ind - 1], nums[ind + 1]):\n                return True\n            return False\n        \n        # print(st.query(0, n))\n        ans = []\n        for i in range(Q):\n            # print(nums)\n            if queries[i][0] == 1:\n                l, r = queries[i][1], queries[i][2]\n                # print(l, r, nums)\n                res = st.query(l, r + 1)\n                if checkPeak(l):\n                    res -= 1\n                if r > l and checkPeak(r):\n                    res -= 1\n                ans.append(res)\n            else:\n                ind, val = queries[i][1], queries[i][2]\n                nums[ind] = val\n                \n                if checkPeak(ind):\n                    st.update(ind, 1)\n                else:\n                    st.update(ind, 0)\n                \n                if checkPeak(ind + 1):\n                    st.update(ind + 1, 1)\n                else:\n                    st.update(ind + 1, 0)\n                \n                if checkPeak(ind - 1):\n                    st.update(ind - 1, 1)\n                else:\n                    st.update(ind - 1, 0)\n                \n        return ans",
    "submit_ts": 1718507003.0
}