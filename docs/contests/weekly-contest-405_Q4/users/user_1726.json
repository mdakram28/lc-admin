{
    "username": "heerkshah434",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> endIndexes; // (index, cost) pairs\n\n    TrieNode() {}\n    ~TrieNode() {\n        for (auto& pair : children) {\n            delete pair.second;\n        }\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    ~Trie() {\n        delete root;\n    }\n\n    void insert(const string& word, int index, int cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            if (current->children.find(c) == current->children.end()) {\n                current->children[c] = new TrieNode();\n            }\n            current = current->children[c];\n        }\n        current->endIndexes.push_back({index, cost});\n    }\n\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        \n        // Insert all words into the trie with their respective costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n        // DP array to store minimum costs to form prefixes of target\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // cost to form an empty string is 0\n        \n        // Process each position in the target string\n        for (int i = 0; i < n; ++i) {\n            TrieNode* current = trie.root;\n            \n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                \n                if (current->children.find(c) == current->children.end()) {\n                    break; // No words in trie match current prefix\n                }\n                \n                current = current->children[c];\n                \n                // Check if there are any words ending at current node\n                for (auto& pair : current->endIndexes) {\n                    int index = pair.first;\n                    int cost = pair.second;\n                    if (i >= 0 && dp[i] != INT_MAX) {\n                        dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323997",
    "subm_id": "1312389130"
}