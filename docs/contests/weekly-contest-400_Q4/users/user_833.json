{
    "username": "agrawalashutosh635",
    "submission": "\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n    SegmentTree(vector<int>& arr) {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n    void build(vector<int>& arr, int node, int start, int end) {\n        if (start == end) tree[node] = arr[start];\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r, int node = 0, int start = 0, int end = -1) {\n        if (end == -1) end = n - 1;\n        if (r < start || end < l) return INT_MAX;\n        if (l <= start && end <= r) return tree[node];\n        int mid = (start + end) / 2;\n        return query(l, r, 2 * node + 1, start, mid) & query(l, r, 2 * node + 2, mid + 1, end);\n    }\n};\n\n\nclass Solution {\npublic:\n    int binarySearch(SegmentTree& st, int i, int k, int low, int high) {\n        while (high - low > 1) {\n            int mid = (low + high) / 2;\n            if(st.query(i, mid) >= k) low = mid;\n            else  high = mid;\n        }\n        return low;\n    }\n\n    int minimumDifference(vector<int>& arr, int k) {\n        int n = arr.size();\n        SegmentTree st(arr);\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int low = i - 1, high = n - 1, idx = binarySearch(st, i, k, low, high);\n            if(idx != i - 1) ans = min(ans, abs(st.query(i, idx) - k));\n            ans = min(ans, abs(k - st.query(i, idx + 1)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717300393.0
}