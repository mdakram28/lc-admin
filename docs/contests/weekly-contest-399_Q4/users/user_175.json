{
    "username": "cmgabriellucas",
    "submission": "class Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        long long ans = 0, mod = 1e9 + 7;\n        struct node {\n            long long use[4];\n        };\n        vector<node> seg(5 * n);\n        function<node(node, node)> merge = [&] (node X, node Y) {\n            node res; \n            for (int i = 0; i < 4; ++i) res.use[i] = 0;\n            for (int i = 0; i < 16; ++i) {\n                int x[4];\n                for (int j = 0; j < 4; ++j) x[j] = ((i>>j)&1);\n                if (x[1] == x[2] && x[1] == 1) continue;\n                res.use[x[0] + 2 * x[3]] = max(res.use[x[0] + 2 * x[3]], X.use[x[0] + 2 * x[1]] + Y.use[x[2] + 2 * x[3]]);\n            }\n            return res;\n        };\n        function<void(int,int,int,int,long long)> upd = [&] (int i, int l, int r, int x, long long d) {\n            if (l == r) {\n                seg[i].use[1] = seg[i].use[2] = 0;\n                seg[i].use[3] = d;\n                seg[i].use[0] = 0;\n                return;\n            }\n            int md = (l + r) / 2;\n            if (x <= md) upd(2*i, l, md, x, d);\n            else upd(2*i+1, md+1, r, x, d);\n            seg[i] = merge(seg[2*i], seg[2*i+1]);\n        };\n        for (int i = 0; i < n; ++i) upd(1, 1, n, i+1, nums[i]);\n        for (auto v : queries) {\n            int pos = v[0], val = v[1];\n            upd(1, 1, n, pos+1, val);\n            long long best = 0;\n            for (int i = 0; i < 4; ++i) best = max(best, seg[1].use[i]);\n            ans = (ans + best) % mod;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716694985",
    "subm_id": "1268130213"
}