{
    "username": "tejas_mishr",
    "submission": "class Solution {\npublic:\n\n    // bool chk(const vector<int>& colors, int start, int k) {\n    //     for (int i = 0; i < k - 1; ++i) {\n    //         int curr = colors[(start + i) % colors.size()], nxt = colors[(start + i + 1) % colors.size()];\n    //         if (curr == nxt) return false;\n    //     }\n    //     return true;\n    // }\n\n    // int numberOfAlternatingGroups(vector<int>& colors, int k) {\n    //     int n = colors.size(), cnt = 0;\n    //     if (n < k) return 0;\n    //     auto chk = [&](int start) -> bool {\n    //         for (int i = 0; i < k - 1; ++i) \n    //             if (colors[(start + i) % colors.size()] == colors[(start + i + 1) %  colors.size()]) return false;\n        \n    //     return true;\n    // };\n    \n    // for (int i = 0; i < colors.size(); ++i) if (chk(i)) cnt++;\n    \n    // return cnt;\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size(), cnt = 1;\n        int ans = 0;\n        \n        for (int i = 1; i < colors.size()- 1+k; i++) {\n            int idx = i % n;\n            \n            if (colors[idx] != colors[(idx - 1 + n) % n]) cnt++;\n            else cnt = 1;\n            if (cnt >= k) ans++;\n        }\n        return ans;\n        \n    }\n    \n};",
    "submit_ts": "1720279252",
    "subm_id": "1311743769"
}