{
    "username": "petabyte",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        def is_peak(i):\n            return i > 0 and i < len(nums) - 1 and nums[i] > nums[i + 1] and nums[i] > nums[i - 1]\n        \n        n = len(nums)\n        sums = Fenwick(n)\n        \n        for i in range(1, len(nums) - 1):\n            if nums[i] > nums[i + 1] and nums[i] > nums[i - 1]:\n                #print(\"peak\", i)\n                sums.add(i, 1)\n        \n        ans = []\n        for (t, l, r) in queries:\n            if t == 1:\n                #print(t, l, r)\n                a = sums.range(l + 1, r - 1)\n                ans.append(a)\n            \n            else:\n                i = l\n                val = r\n                prev_peaks = [e for e in (i - 1, i, i + 1) if is_peak(e)]\n                nums[i] = val\n                new_peaks = [e for e in (i - 1, i, i + 1) if is_peak(e)]\n                \n                #print(\"prev_peaks\", prev_peaks)\n                #print(\"new_peaks\", new_peaks)\n                for i in prev_peaks:\n                    sums.add(i, -1)\n                for i in new_peaks:\n                    sums.add(i, 1)            \n                \n        return ans\n\n    \n    \nclass Fenwick:\n    def __init__(self, n):\n        self.bits = [0] * n\n\n    def sum(self, r):\n        ret = 0;\n        while r >= 0:\n            ret += self.bits[r]\n            r = (r & (r + 1)) - 1\n        return ret\n\n    def range(self, l, r):\n        if l > r:\n            return 0\n        return self.sum(r) - self.sum(l - 1)\n\n    def add(self, idx, delta):\n        while idx < len(self.bits):\n            self.bits[idx] += delta;\n            idx = idx | (idx + 1)",
    "submit_ts": "1718506979",
    "subm_id": "1289637225"
}