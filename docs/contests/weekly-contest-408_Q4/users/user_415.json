{
    "username": "pranay360",
    "submission": "\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        circles = [((circle[0], circle[1]), circle[2]) for circle in circles]\n        graph = [[] for _ in range(len(circles) + 4)]\n        num_circles = len(circles)\n\n        i = 0\n        while i < num_circles:\n            cx, cy, r = circles[i][0][0], circles[i][0][1], circles[i][1]\n            cx <= r and (graph[num_circles].append(i) or graph[i].append(num_circles))\n            X - cx <= r and (graph[num_circles + 2].append(i) or graph[i].append(num_circles + 2))\n            cy <= r and (graph[num_circles + 1].append(i) or graph[i].append(num_circles + 1))\n            Y - cy <= r and (graph[num_circles + 3].append(i) or graph[i].append(num_circles + 3))\n\n            j = i + 1\n            while j < num_circles:\n                distance = math.sqrt((cx - circles[j][0][0]) ** 2 + (cy - circles[j][0][1]) ** 2)\n                radius_sum = r + circles[j][1]\n                radius_sum >= distance and (graph[i].append(j) or graph[j].append(i))\n                j += 1\n            i += 1\n\n        nodes = num_circles + 4\n        visited = [0] * nodes\n\n        # BFS for bottom-left to top-right corner\n        q = deque([num_circles])\n        visited[num_circles] = 1\n        while q:\n            u = q.popleft()\n            v_idx = 0\n            while v_idx < len(graph[u]):\n                v = graph[u][v_idx]\n                visited[v] or (q.append(v) or visited.__setitem__(v, 1))\n                v_idx += 1\n\n        if visited[num_circles + 1] or visited[num_circles + 2]:\n            return False\n\n        # Reset visited array for the next BFS\n        visited = [0] * nodes\n\n        # BFS for top-right to bottom-left corner\n        q = deque([num_circles + 3])\n        visited[num_circles + 3] = 1\n        while q:\n            u = q.popleft()\n            v_idx = 0\n            while v_idx < len(graph[u]):\n                v = graph[u][v_idx]\n                visited[v] or (q.append(v) or visited.__setitem__(v, 1))\n                v_idx += 1\n\n        return not (visited[num_circles + 1] or visited[num_circles + 2])\n",
    "submit_ts": "1722137060",
    "subm_id": "1335752999"
}