{
    "username": "jolly24",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& graph, int start, int target1, int target2,\n            int numNodes) {\n        queue<int> q;\n        vector<int> visited(numNodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int width, int height, vector<vector<int>>& obstacles) {\n        int numObstacles = obstacles.size();\n        vector<pair<pair<int, int>, int>> circles(numObstacles);\n        vector<vector<int>> graph(numObstacles + 4);\n\n        for (int i = 0; i < numObstacles; ++i) {\n            circles[i].first.first = obstacles[i][0];\n            circles[i].first.second = obstacles[i][1];\n            circles[i].second = obstacles[i][2];\n        }\n\n        for (int i = 0; i < numObstacles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[numObstacles].push_back(i);\n                graph[i].push_back(numObstacles);\n            }\n            if (width - circles[i].first.first <= circles[i].second) {\n                graph[numObstacles + 2].push_back(i);\n                graph[i].push_back(numObstacles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[numObstacles + 1].push_back(i);\n                graph[i].push_back(numObstacles + 1);\n            }\n            if (height - circles[i].first.second <= circles[i].second) {\n                graph[numObstacles + 3].push_back(i);\n                graph[i].push_back(numObstacles + 3);\n            }\n            for (int j = i + 1; j < numObstacles; ++j) {\n                double distance = sqrt(\n                    pow(circles[i].first.first - circles[j].first.first, 2) +\n                    pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked =\n            max(isBlocked,\n                bfs(graph, numObstacles, numObstacles + 1, numObstacles + 2,\n                    numObstacles + 4)); // Check for bottom-left corner\n        isBlocked =\n            max(isBlocked,\n                bfs(graph, numObstacles + 3, numObstacles + 2, numObstacles + 1,\n                    numObstacles + 4)); // Check for top-right corner\n\n        return !isBlocked;\n    }\n};",
    "submit_ts": "1722136267",
    "subm_id": "1335728995"
}