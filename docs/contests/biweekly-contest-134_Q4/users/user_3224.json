{
    "username": "Ho5oTDGy9w",
    "submission": "#include <vector>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    long long countSubarrays(std::vector<int>& nums, int target) {\n        int size = nums.size();\n        long long totalCount = 0;\n        std::unordered_map<long long, long long> prevCountMap;\n        \n        int idx = 0;\n        while (idx < size) {\n            std::unordered_map<long long, long long> currentCountMap; \n            if (nums[idx] == target) {\n                ++totalCount;\n            }\n            currentCountMap[nums[idx]] = 1;\n            \n            auto it = prevCountMap.begin();\n            while (it != prevCountMap.end()) {\n                long long andResult = it->first & nums[idx];\n                if (andResult == target) {\n                    totalCount += it->second;\n                }\n                currentCountMap[andResult] += it->second;\n                ++it;\n            }\n            \n            prevCountMap = currentCountMap;\n            ++idx;\n        }\n        \n        return totalCount;\n    }\n};\n",
    "submit_ts": "1720281099",
    "subm_id": "1311813093"
}