{
    "username": "hao-shou-bu-juan",
    "submission": "\n#include <stdio.h>\n#include <string.h>\n#include <queue>\n#include <algorithm>\n#include <vector>\n#include <iostream>\n#include <unordered_map>\n#include <set>\n#include <math.h>\nusing namespace std;\n\ntypedef long long ll;\ntypedef unsigned long long ull;\nconst int MOD = 1000000007;\n\n\n\nconst int N = 50005;\n\n\nint pre[N<<2], suf[N<<2];\nint mx_len[N<<2];\n\n\nvoid push_up(int x, int l, int r) {\n\tint mid = (l + r) >> 1;\n\tint lson = x << 1;\n\tint rson = (x<<1)|1;\n\n\tif (pre[lson] < mid-l+1) {\n\t\tpre[x] = pre[lson];\n\t} else {\n\t\tpre[x] = pre[lson] + pre[rson];\n\t}\n\n\tif (suf[rson] < r - (mid+1) + 1) {\n\t\tsuf[x] = suf[rson];\n\t} else {\n\t\tsuf[x] = suf[rson] + suf[lson];\n\t}\n\n\tmx_len[x] = max(mx_len[lson], mx_len[rson]);\n\tmx_len[x] = max(mx_len[x], suf[lson] + pre[rson]);\n}\n\n\nvoid build(int x, int l, int r) {\n\tif (l == r) {\n\t\tpre[x] = 1;\n\t\tsuf[x] = 1;\n\t\tmx_len[x] = 1;\n\t\treturn;\n\t}\n\n\tint mid = (l + r) >> 1;\n\tbuild(x<<1, l, mid);\n\tbuild((x<<1)|1, mid+1, r);\n\tpush_up(x, l, r);\n}\n\n\nvoid update(int x, int l, int r, int pos) {\n\n\tif (l == r) {\n\t\tpre[x] = 0;\n\t\tsuf[x] = 0;\n\t\tmx_len[x] = 0;\n\t\treturn;\n\t}\n\n\n\tint mid = (l + r) >> 1;\n\tif (pos <= mid) {\n\t\tupdate(x<<1, l, mid, pos);\n\t} else {\n\t\tupdate((x<<1)|1, mid+1, r, pos);\n\t}\n\n\tpush_up(x, l, r);\n}\n\nvoid query(int x, int l, int r, int ql, int qr, int& pre_len, int& suf_len, int& range_len) {\n\tif (ql > qr) {\n\t\tpre_len = 0;\n\t\tsuf_len = 0;\n\t\trange_len = 0;\n\t\treturn;\n\t}\n\n\tif (ql == l and qr == r) {\n\t\tpre_len = pre[x];\n\t\tsuf_len = suf[x];\n\t\trange_len = mx_len[x];\n\t\treturn;\n\t}\n\n\n\tint mid = (l + r) >> 1;\n\tif (qr <= mid) {\n\t\tquery(x<<1, l, mid, ql, qr, pre_len, suf_len, range_len);\n\t} else if (ql >= mid+1) {\n\t\tquery((x<<1)|1, mid+1, r, ql, qr, pre_len, suf_len, range_len);\n\t} else {\n\t\tint pre1, suf1, range1;\n\t\tint pre2, suf2, range2;\n\t\tquery(x<<1, l, mid, ql, mid, pre1, suf1, range1);\n\t\tquery((x<<1)|1, mid+1, r, mid+1, qr, pre2, suf2, range2);\n\n\t\tif (pre1 == mid-ql+1) {\n\t\t\tpre_len = pre1 + pre2;\n\t\t} else {\n\t\t\tpre_len = pre1;\n\t\t}\n\n\t\tif (suf2 == qr-(mid+1)+1) {\n\t\t\tsuf_len = suf1 + suf2;\n\t\t} else {\n\t\t\tsuf_len = suf2;\n\t\t}\n\n\t\trange_len = max(range1, range2);\n\t\trange_len = max(range_len, suf1 + pre2);\n\t}\n}\n\n\n\n\n\n\nclass Solution {\npublic:\n\tvector<bool> getResults(vector<vector<int>>& queries) {\n\t\tbuild(1, 0, N);\n\n\t\tvector<bool> ret;\n\t\tfor (auto& t : queries) {\n\t\t\tif (t[0] == 1) {\n\t\t\t\tupdate(1, 0, N, t[1]);\n\t\t\t} else {\n\t\t\t\tint pre_len, suf_len, range_len;\n\t\t\t\tquery(1, 0, N, 0, t[1]-1, pre_len, suf_len, range_len);\n\t\t\t\tif (pre_len >= t[2]) {\n\t\t\t\t\tret.push_back(true);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tquery(1, 0, N, 1, t[1]-1, pre_len, suf_len, range_len);\n\n\n\t\t\t\tif (range_len+1 >= t[2]) {\n\t\t\t\t\tret.push_back(true);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tret.push_back(false);\n\t\t\t}\n\t\t}\n\n\t\treturn ret;\n\t}\n};\n",
    "submit_ts": 1716652269.0
}