{
    "username": "aryansingh027",
    "submission": "class Solution {\npublic:\n    int getMid(int s, int e) { return s + (e -s)/2; } \n\nint getSumUtil(int *st, int ss, int se, int qs, int qe, int si) \n{ \n    // If segment of this node is a part of given range, then return \n    // the sum of the segment \n    if (qs <= ss && qe >= se) \n        return st[si]; \n \n    // If segment of this node is outside the given range \n    if (se < qs || ss > qe) \n        return 0; \n \n    // If a part of this segment overlaps with the given range \n    int mid = getMid(ss, se); \n    return getSumUtil(st, ss, mid, qs, qe, 2*si+1) + \n        getSumUtil(st, mid+1, se, qs, qe, 2*si+2); \n} \n \nvoid updateValueUtil(int *st, int ss, int se, int i, int diff, int si) \n{ \n    // Base Case: If the input index lies outside the range of \n    // this segment \n    if (i < ss || i > se) \n        return; \n \n    // If the input index is in range of this node, then update \n    // the value of the node and its children \n    st[si] = st[si] + diff; \n    if (se != ss) \n    { \n        int mid = getMid(ss, se); \n        updateValueUtil(st, ss, mid, i, diff, 2*si + 1); \n        updateValueUtil(st, mid+1, se, i, diff, 2*si + 2); \n    } \n} \n \n// The function to update a value in input array and segment tree. \n// It uses updateValueUtil() to update the value in segment tree \nvoid updateValue(int arr[], int *st, int n, int i, int new_val) \n{ \n    // Check for erroneous input index \n    if (i < 0 || i > n-1) \n    { \n        cout<<\"Invalid Input\"; \n        return; \n    } \n \n    // Get the difference between new value and old value \n    int diff = new_val - arr[i]; \n \n    // Update the value in array \n    arr[i] = new_val; \n \n    // Update the values of nodes in segment tree \n    updateValueUtil(st, 0, n-1, i, diff, 0); \n} \n \n// Return sum of elements in range from index qs (query start) \n// to qe (query end). It mainly uses getSumUtil() \nint getSum(int *st, int n, int qs, int qe) \n{ \n    // Check for erroneous input values \n    if (qs < 0 || qe > n-1 || qs > qe) \n    { \n        cout<<\"Invalid Input\"; \n        return -1; \n    } \n \n    return getSumUtil(st, 0, n-1, qs, qe, 0); \n} \n \n// A recursive function that constructs Segment Tree for array[ss..se]. \n// si is index of current node in segment tree st \nint constructSTUtil(int arr[], int ss, int se, int *st, int si) \n{ \n    // If there is one element in array, store it in current node of \n    // segment tree and return \n    if (ss == se) \n    { \n        st[si] = arr[ss]; \n        return arr[ss]; \n    } \n    int mid = getMid(ss, se); \n    st[si] = constructSTUtil(arr, ss, mid, st, si*2+1) + \n            constructSTUtil(arr, mid+1, se, st, si*2+2); \n    return st[si]; \n} \nint *constructST(int arr[], int n) \n{ \n    // Allocate memory for the segment tree \n \n    //Height of segment tree \n    int x = (int)(ceil(log2(n))); \n \n    //Maximum size of segment tree \n    int max_size = 2*(int)pow(2, x) - 1; \n \n    // Allocate memory \n    int *st = new int[max_size]; \n \n    // Fill the allocated memory st \n    constructSTUtil(arr, 0, n-1, st, 0); \n \n    // Return the constructed segment tree \n    return st; \n} \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& query) {\n        int n=nums.size(),q=query.size();\n        int peak[n];\n        for(int i=0;i<n;i++){\n            peak[i]=0;\n        }\n        for(int i=1;i<n-1;i++){\n            if(nums[i]>nums[i-1] && nums[i]>nums[i+1]) peak[i]=1;\n        }\n        int *st = constructST(peak,n); \n        vector<int> ans;\n        for(int i=0;i<q;i++){\n            int type=query[i][0];\n            if(type==1){\n                int l=query[i][1],r=query[i][2];\n                int sum=getSum(st, n, l, r);\n                if(peak[r]) sum--;\n                if(l!=r && peak[l]) sum--;\n                ans.push_back(sum);\n            }else{\n                int ind=query[i][1],val=query[i][2];\n                nums[ind]=val;\n                if(ind>0 && ind<(n-1)){\n                    if(nums[ind]>nums[ind-1] && nums[ind]>nums[ind+1]) updateValue(peak, st, n, ind, 1);\n                    else updateValue(peak, st, n, ind, 0);\n                }\n                if((ind+1)>0 && (ind+1)<(n-1)){\n                    if(nums[ind+1]>nums[ind] && nums[ind+1]>nums[ind+2]) updateValue(peak, st, n, ind+1, 1);\n                    else updateValue(peak, st, n, ind+1, 0);\n                }\n                if((ind-1)>0 && (ind-1)<(n-1)){\n                    if(nums[ind-1]>nums[ind-2] && nums[ind-1]>nums[ind]) updateValue(peak, st, n, ind-1, 1);\n                    else updateValue(peak, st, n, ind-1, 0);\n                }\n            }\n            \n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508810",
    "subm_id": "1289691724"
}