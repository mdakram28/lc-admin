{
    "username": "zokumyoin",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        char[] arr = new char[n];\n        Arrays.fill(arr, '9');\n        if (k == 1 || k == 3 || k == 9) {\n            return new String(arr);\n        }\n        \n        if (k == 5) {\n            arr[0] = arr[n - 1] = '5';\n            return new String(arr);\n        }\n        // 7?\n        \n        if (k == 2) {\n            arr[0] = arr[n - 1] = '8';\n            return new String(arr);\n        }\n        if (k == 4) {\n            if (n == 1) {\n                return \"8\";\n            }\n            arr[0] = arr[n - 1] = arr[1] = arr[n - 2] = '8';\n            return new String(arr);\n        }\n        \n        // 898 -> 449\n        // 8998 -> 4499\n        // 696 -> 348\n        // 6996 -> 3498\n        \n        if (k == 6) {\n            // 6, 66, 888, 8778, 89898, 899998\n            if (n < 3) {\n                Arrays.fill(arr, '6');\n                return new String(arr);\n            }\n            \n            arr[0] = arr[n - 1] = '8';\n            if (n % 2 == 1) {\n                while (true) {\n                    arr[n / 2]--;\n                    int sum = 9 * (n - 1) - 2 + arr[n / 2] - '0';\n                    if (sum % 3 == 0) {\n                        return new String(arr);\n                    }\n                }\n            } else {\n                while (true) {\n                    arr[n / 2]--;\n                    arr[n / 2 - 1]--;\n                    int sum = 9 * (n - 2) - 2 + 2 * (arr[n / 2] - '0');\n                    if (sum % 3 == 0) {\n                        return new String(arr);\n                    }\n                }\n            }\n        }\n        if (k == 8) {\n            // 8, 88, 888, 8998\n            if (n <= 5) {\n                Arrays.fill(arr, '8');\n                return new String(arr);\n            }\n            arr[0] = arr[1] = arr[2] = arr[n - 1] = arr[n - 2] = arr[n - 3] = '8';\n            return new String(arr);\n        }\n        \n        if (k == 7) {\n            // 7, 77, 959, 9779, 99799, 999999, 9994999, 99944999, 999969999\n            if (n <= 2) {\n                Arrays.fill(arr, '7');\n                return new String(arr);\n            }\n            \n            int pow = 1;\n            int zeros = (n - 1) / 2;\n            for (int i = 0; i < zeros; i++) {\n                pow = pow * 10 % 7;\n            }\n            if (n % 2 == 0) {\n                pow = pow * 11 % 7;\n            }\n            // System.out.printf(\"p=%d zeros=%d\\n\", pow, zeros);\n            \n            int mod = 0;\n            for (int i = 0; i < n; i++) {\n                mod = (mod * 10 + 9) % 7;\n            }\n            // System.out.printf(\"ini mod=%d\\n\", mod);\n            while (true) {\n                if (mod == 0) {\n                    return new String(arr);\n                }\n                \n                // System.out.printf(\"mod=%d\\n\", mod);\n                if (n % 2 == 0) {\n                    arr[n / 2]--;\n                    arr[n / 2 - 1]--;\n                    mod = (mod + 7 - pow) % 7;\n                } else {\n                    arr[n / 2]--;\n                    mod = (mod + 7 - pow) % 7;\n                }\n            }\n            \n        }\n        return \"-1\";\n        \n        \n        \n        \n    }\n}",
    "submit_ts": "1723951269",
    "subm_id": "1359767450"
}