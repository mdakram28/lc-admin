{
    "username": "nwatx",
    "submission": "class Solution {\npublic:\n    \n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> t(2 * n);\n        \n        auto update = [&](int p, int value) {  // set value at position p\n          for (t[p += n] = value; p > 1; p >>= 1) t[p>>1] = t[p] + t[p^1];\n        };\n\n        auto query = [&](int l, int r) -> int {  // sum on interval [l, r]\n            ++r;\n          int res = 0;\n          for (l += n, r += n; l < r; l >>= 1, r >>= 1) {\n            if (l&1) res += t[l++];\n            if (r&1) res += t[--r];\n          }\n          return res;\n        };\n        \n        for(int i = 1; i < n - 1; i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) update(i, 1);\n        }\n        \n        vector<int> ret;\n        \n        for(auto q : queries) {\n            int type = q[0];\n            if(type == 1) {\n                int l = q[1], r = q[2];\n                l++; r--;\n                if(l > r) ret.push_back(0);\n                else ret.push_back(query(l, r));\n            } else {\n                int index = q[1], val = q[2];\n                nums[index] = val;\n                update(index, 0);\n                for(int i = index - 1; i <= index + 1; i++) {\n                    if(i <= 0 || i >= n - 1) continue;\n                    if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) update(i, 1);\n                    else update(i, 0);\n                }\n            }\n            \n//             for(int i = 0; i < n; i++) {\n//                 cout << query(i, i) << \" \";\n//             }\n            \n//             cout << \"\\n\";\n        }\n        \n        return ret;\n    }\n};",
    "submit_ts": "1718507337",
    "subm_id": "1289648407"
}