{
    "username": "rajeshkumar123",
    "submission": "class Solution {\n    public void form(List<List<Integer>>adj1,List<List<Integer>>adj2,int m,int n){\n        for(int i=0;i<n;i++)adj1.add(new ArrayList<>());\n        for(int i=0;i<m;i++)adj2.add(new ArrayList<>());\n    }\n    public void adjForm(List<List<Integer>>adj,int[][] edges){\n        for(int edge[]:edges){\n            adj.get(edge[0]).add(edge[1]);\n            adj.get(edge[1]).add(edge[0]);\n        }\n    }\n    public int getDim(List<List<Integer>>adj){\n        int []arr = {0};\n        int fp = dfs(adj, 0, arr);\n        int sp = dfs(adj, arr[0], arr);\n        return sp;\n    }\n    public int dfs(List<List<Integer>> adj, int s, int[] arr){\n        int []srr = new int[adj.size()];\n        Deque<Integer> stack = new ArrayDeque<>();\n        Arrays.fill(srr,-1);srr[s]=0;\n        stack.push(s);\n        while(!stack.isEmpty()){\n            int node = stack.pop();\n            for (int n: adj.get(node)){\n                if (srr[n] == -1) {\n                    srr[n] = srr[node] + 1;\n                    stack.push(n);\n                    if (srr[n] > srr[arr[0]]) {\n                        arr[0] = n;\n                    }\n                }\n            }\n        }\n        return srr[arr[0]];\n    }\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length+1,m =edges2.length+1;\n        List<List<Integer>>adj1 = new ArrayList<>(n);\n        List<List<Integer>>adj2 = new ArrayList<>(m);\n        form(adj1,adj2,m,n);\n        adjForm(adj1,edges1);adjForm(adj2,edges2);\n        int dim1 = getDim(adj1);int dim2 =getDim(adj2);\n        int min = Math.max(dim1,dim2);\n        int h1 = (dim1+1)/2,h2= (dim2+1)/2;\n        return Math.max(min,h1+h2+1);\n    }\n}",
    "submit_ts": 1719717934.0
}