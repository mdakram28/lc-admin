{
    "username": "ntarsis30",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        e1 = [[] for i in range(len(edges1)+1)]\n        e2 = [[] for i in range(len(edges2)+1)]\n        print(len(e1),len(e2))\n        for i in edges1:\n            e1[i[0]].append(i[1])\n            e1[i[1]].append(i[0])\n        for i in edges2:\n            e2[i[0]].append(i[1])\n            e2[i[1]].append(i[0])\n        def maxd(edges):\n            n = len(edges)\n            dist1 = [0]*n\n            ans,next_start=0,0\n            def dfs(curr,parent,depth):\n                nonlocal ans,next_start\n                for i in edges[curr]:\n                    if i != parent:\n                        dfs(i,curr,depth+1)\n                if depth>ans:\n                    ans = depth\n                    next_start = curr\n            dfs(0,-1,0)\n            end1 = next_start \n            ans = 0\n            dfs(end1,-1,0)\n            end2 = next_start\n            dist1 = [0]*n\n            dist2 = [0]*n\n            def dfs(curr,parent,depth,which):\n                for i in edges[curr]:\n                    if i != parent:\n                        which[i]=depth+1\n                        dfs(i,curr,depth+1,which)\n            dfs(end1,-1,0,dist1)\n            dfs(end2,-1,0,dist2)\n            return([max(dist1[i],dist2[i]) for i in range(n)])\n\n        a = maxd(e1)\n        b = maxd(e2)\n        print(a,b)\n        return max(max(b),max(min(a)+min(b)+1,max(a)))\n        \n\n",
    "submit_ts": "1719719163",
    "subm_id": "1304435208"
}