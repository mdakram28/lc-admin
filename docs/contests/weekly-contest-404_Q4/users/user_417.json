{
    "username": "singhyash3302",
    "submission": "\n#define pb push_back\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> t1(n);\n        vector<vector<int>> t2(m);\n        \n        for (const auto& i : edges1) {\n            t1[i[0]].pb(i[1]);\n            t1[i[1]].pb(i[0]);\n        }\n        \n        for (const auto& i : edges2) {\n            t2[i[0]].pb(i[1]);\n            t2[i[1]].pb(i[0]);\n        }\n\n        int d1 = sol(t1), d2 = sol(t2);\n        \n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n    \n\n    pair<int, int> bfs(const vector<vector<int>>& t, int s) {\n        queue<int> q;\n        int n = t.size();\n        \n     q.push(s); int lastn = s;\n        vector<int> dist(n, -1);\n     \n        dist[s] = 0;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int i : t[node]) {\n                if (dist[i] == -1) {\n                    dist[i] = dist[node] + 1;\n                    q.push(i);\n                    if (dist[i] > dist[lastn]) lastn = i;\n                }\n            }\n        }\n        \n        return {lastn, dist[lastn]};\n    }\n    \n    int sol(const vector<vector<int>>& t) {\n        pair<int, int> p1 = bfs(t, 0) ,p2 = bfs(t, p1.first);\n        return p2.second;\n    }\n};\n",
    "submit_ts": 1719717769.0
}