{
    "username": "meng-hsuan",
    "submission": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        LARGE = 10 ** 5\n        nq = len(queries)\n        barriers = [0] + sorted([queries[i][1] for i in range(nq) if queries[i][0] == 1]) + [LARGE]\n        nb = len(barriers)\n        best_start = [[barriers[1] - barriers[0], 0]]\n        for i in range(1, nb - 1):\n            if (tmp := barriers[i + 1] - barriers[i]) > best_start[-1][0]:\n                best_start.append([tmp, barriers[i]])\n        #print(\"Best start:\", best_start)\n        \n        ind2gp = [i for i in range(nb - 1) for j in range(barriers[i + 1] - barriers[i])]\n        gp2ind = {i: [barriers[i], barriers[i + 1]] for i in range(nb - 1)}\n        \n        ans = []\n        \n        for qid in range(nq - 1, -1, -1):\n            #print(f\"Processing query {qid}:\")\n            if queries[qid][0] == 1:\n                #print(\" Type 1\")\n                x = queries[qid][1]\n                u = ind2gp[x - 1]\n                v = ind2gp[x]\n                if (gp2ind[u][1] - gp2ind[u][0] < gp2ind[v][1] - gp2ind[v][0]):\n                    u, v = v, u\n                for i in range(gp2ind[v][0], gp2ind[v][1]):\n                    ind2gp[i] = u\n                gp2ind[u] = [min(gp2ind[u][0], gp2ind[v][0]), max(gp2ind[u][1], gp2ind[v][1])]\n                del gp2ind[v]\n                \n                new_entry = [gp2ind[u][1] - gp2ind[u][0], gp2ind[u][0]]\n                #print(f\" New entry: {new_entry}\")\n                \n                l = 0\n                r = len(best_start)\n                while l < r:\n                    mid = l + ((r - l) >> 1)\n                    if best_start[mid][1] < new_entry[1]:\n                        l = mid + 1\n                    else:\n                        r = mid\n                \n                if l > 0 and best_start[l - 1][0] >= new_entry[0]:\n                    continue\n                \n                l_cut = r_cut = l\n                while r_cut < len(best_start) and best_start[r_cut][0] <= new_entry[0]:\n                    r_cut += 1\n                #print(f\" Insert {new_entry} at {l_cut, r_cut}\")\n                best_start = best_start[:l_cut] + [new_entry] + best_start[r_cut:]\n                #print(\" Best start:\", best_start)\n                \n            else:\n                #print(\" Type 2\")\n                x = queries[qid][1]\n                sz = queries[qid][2]\n                l = 0\n                r = len(best_start) - 1\n                while l < r:\n                    mid = l + ((r - l) >> 1)\n                    if best_start[mid][0] >= sz:\n                        r = mid\n                    else:\n                        l = mid + 1\n                #print(f\" Earliest ending point: {best_start[l][1] + sz}\")\n                ans.append(best_start[l][1] + sz <= x)\n        #print()\n        \n        return ans[::-1]\n        ",
    "submit_ts": 1716652712.0
}