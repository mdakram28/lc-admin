{
    "username": "lydxlx",
    "submission": "memo = {}\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        global memo\n        if not memo:\n            for i in range(1, 1000000):\n                num = str(i)\n                if num == num[::-1]:\n                    for factor in range(1, 10):\n                        if i % factor == 0:\n                            memo[factor, len(num)] = num\n\n        if n <= 6:\n            return memo[k, n]\n\n        if k in (1, 3, 9):\n            return '9' * n\n        elif k == 2:\n            return '8' + ('9' * (n - 2)) + '8'\n        elif k == 4:\n            return '88' + ('9' * (n - 4)) + '88'\n        elif k == 5:\n            return '5' + ('9' * (n - 2)) + '5'\n        elif k == 6:\n            if n % 2 == 0:\n                first_half = '8' + ('9' * (n // 2 - 2)) + '7'\n                return first_half + first_half[::-1]\n            else:\n                first_half = '8' + ('9' * (n // 2 - 1))\n                return first_half + '8' + first_half[::-1]\n        elif k == 7:\n            mid_len = 1 if n % 2 == 1 else 2\n            rest_len = n - mid_len\n            first_half = '9' * (rest_len // 2)\n\n            def doit():\n                for d in range(9, -1, -1):\n                    whole = first_half + (str(d) * mid_len) + first_half\n                    assert len(whole) == n\n\n                    reminder = 0\n                    for ch in whole:\n                        reminder = reminder * 10 + int(ch)\n                        reminder %= 7\n                    if reminder == 0:\n                        return whole\n                raise print(n, k)\n            return doit()\n        elif k == 8:\n            return '888' + ('9' * (n - 6)) + '888'\n        else:\n            raise ValueError('')\n\n",
    "submit_ts": "1723951028",
    "subm_id": "1359761393"
}