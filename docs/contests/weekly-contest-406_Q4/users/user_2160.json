{
    "username": "andy-tang",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # greedy from high to low because you want to minimize the most expensive cuts,\n        # but you will need to cut everything because it needs to be cut into 1x1\n        # maxHeap of the loc to cut\n        horizontalCut = [-1 * cost for cost in horizontalCut]\n        verticalCut = [-1 * cost for cost in verticalCut]\n        heapq.heapify(horizontalCut)\n        heapq.heapify(verticalCut)\n        horizHeap = horizontalCut\n        vertHeap = verticalCut\n        \n        horizCuts = 1\n        vertCuts = 1\n        res = 0\n        \n        while horizHeap and vertHeap:\n            horiz = -horizHeap[0]\n            vert = -vertHeap[0]\n            if horiz > vert:\n                # do horizontal cut\n                horizCuts += 1\n                cost = -1 * heapq.heappop(horizHeap)\n                res += cost * vertCuts\n            else:\n                # do vertical cut\n                vertCuts += 1\n                cost = -1 * heapq.heappop(vertHeap)\n                res += cost * horizCuts\n\n        \n        while horizHeap:\n            horizCuts += 1\n            cost = -1 * heapq.heappop(horizHeap)\n            res += cost * vertCuts\n\n        while vertHeap:\n            vertCuts += 1\n            cost = -1 * heapq.heappop(vertHeap)\n            res += cost * horizCuts\n\n        \n        return res",
    "submit_ts": "1720926371",
    "subm_id": "1320284224"
}