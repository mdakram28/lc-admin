{
    "username": "yc-li",
    "submission": "\nclass Solution:\n    def maximumLength(self, a: List[int], k: int) -> int:\n\n        mm = [defaultdict(int) for i in range(k + 1)]\n        # d = [[0 for i in range(n)] for l in range(k + 1)]\n        n = len(a)\n        \n        ms = [[] for l in range(k + 1)]\n        \n        for i in range(n - 1, -1, -1):\n            for l in range(k + 1):\n                \n                # d[l][i] = mm[l][a[i]] + 1\n                mm[l][a[i]] += 1\n                \n                \n                \n                if l != 0:\n                    # for key, val in mm[l - 1].items():\n                    #     if key == a[i]:\n                    #         continue\n                    #     d[l][i] = max(d[l][i], val )\n                        # mm[l][a[i]] = d[l][i]\n                        \n                    if len(ms[l - 1]) > 0:\n                            \n                    \n                        m1, m1i = ms[l - 1][0]\n\n                        if a[i] != m1i:\n                            mm[l][a[i]] = max(mm[l][a[i]], (-m1) + 1)\n\n                        else:\n\n                            if len(ms[l - 1]) > 1:\n                               \n\n                                heappop(ms[l - 1])\n                                m2, m2i = ms[l - 1][0]\n\n                                mm[l][a[i]] = max(mm[l][a[i]], (-m2) + 1)\n\n                                heappush(ms[l - 1], (m1, m1i) )\n                \n                \n                # print(l, a[i], mm[l][a[i]])\n                heappush(ms[l], (-mm[l][a[i]], a[i]) )\n                  \n                    \n        \n        return max(mm[k].values())\n                \n        ",
    "submit_ts": 1717861111.0
}