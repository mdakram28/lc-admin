{
    "username": "Arul_2005",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n           int n = nums.length;\n        long count = 0;\n        \n        Map<Long, Long> prevResults = new HashMap<>();\n\n        for (int i = 0; i < n; ++i) {\n            Map<Long, Long> currResults = new HashMap<>();\n\n            // Check if the current element itself equals k\n            if (nums[i] == k) {\n                ++count;\n            }\n\n            // Initialize the current result with the current element\n            currResults.put((long) nums[i], currResults.getOrDefault((long) nums[i], 0L) + 1);\n\n            // Iterate through previous results\n            for (Map.Entry<Long, Long> entry : prevResults.entrySet()) {\n                long val = entry.getKey();\n                long freq = entry.getValue();\n\n                // Calculate the new AND result\n                long newAndResult = val & nums[i];\n\n                // If the new AND result equals k, update the count\n                if (newAndResult == k) {\n                    count += freq;\n                }\n\n                // Update current results with the new AND result\n                currResults.put(newAndResult, currResults.getOrDefault(newAndResult, 0L) + freq);\n            }\n            \n            // Update previous results to current results for the next iteration\n            prevResults = currResults;\n        }\n        \n        return count;\n    }\n}",
    "submit_ts": "1720278581",
    "subm_id": "1311715385"
}