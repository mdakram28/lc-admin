{
    "username": "_Titans_",
    "submission": "\n\nclass TrieNode\n{\npublic:\n    unordered_map<char, TrieNode *> map;\n    vector<pair<int, int>> word_ends_with;\n};\n\nclass Trie\n{\npublic:\n    TrieNode *root;\n\n    Trie()\n    {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost)\n    {\n        TrieNode *node = root;\n        for (char ch : word)\n        {\n            if (!node->map.count(ch))\n            {\n                node->map[ch] = new TrieNode();\n            }\n            node = node->map[ch];\n        }\n        node->word_ends_with.push_back({index, cost});\n    }\n};\n\nclass Solution\n{\npublic:\n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i)\n        {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i)\n        {\n            if (dp[i] == INT_MAX)\n            {\n                continue;\n            }\n\n            TrieNode *node = trie.root;\n            for (int j = i; j < n; ++j)\n            {\n                if (!node->map.count(target[j]))\n                {\n                    break;\n                }\n                node = node->map[target[j]];\n                for (auto &p : node->word_ends_with)\n                {\n                    int len = words[p.first].size();\n                    if (i + len <= n)\n                    {\n                        dp[i + len] = min(dp[i + len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323877",
    "subm_id": "1312386213"
}