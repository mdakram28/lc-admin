{
    "username": "gooday-3",
    "submission": "const int MAXN = 50;\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n\n        \n        auto rotate = [&](vector<vector<int>>& A) {\n            int n = (int) A.size();\n            int m = (int) A[0].size();\n            vector<vector<int>> res(m, vector<int>(n, 0));\n            \n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < m; ++j) {\n                    res[j][n - 1 - i] = A[i][j];\n                }\n            }\n            return res;\n        };\n        \n        auto calc = [&]() {\n            int n = (int) grid.size();\n            int m = (int) grid[0].size();\n            \n            int res = n * m;\n            \n            vector<Rect> ups(n + 1);\n            vector<Rect> downs(n + 1);\n        \n            for (int i = 0; i < n; ++i) {\n                ups[i + 1] = ups[i];\n                for (int j = 0; j < m; ++j) {\n                    if (grid[i][j] == 1) {\n                        ups[i + 1].add(i, j);\n                    }\n                }\n            }\n            \n            for (int i = n - 1; i >= 0; --i) {\n                downs[i] = downs[i + 1];\n                for (int j = 0; j < m; ++j) {\n                    if (grid[i][j] == 1) {\n                        downs[i].add(i, j);\n                    }\n                }\n                // cout << \"down \" << i << endl;\n                // downs[i].print();\n            }\n            \n            for (int i = 0; i < n; ++i) {\n                int top = ups[i].area();\n                if (top <= 0) {\n                    continue;\n                }\n                \n                Rect mid;\n                for (int j = i; j < n; ++j) {\n                    int bot = downs[j + 1].area();\n                    if (bot <= 0) {\n                        break;\n                    }\n                    \n                    for (int k = 0; k < m; ++k) {\n                        if (grid[j][k] == 1) {\n                            mid.add(j, k);\n                        }\n                    }\n                    \n                    int ans = mid.area();\n                    if (ans > 0) {\n                        ans += top;\n                        ans += bot;\n                        res = min(res, ans);\n                        \n                        // ups[i].print();\n                        // downs[j + 1].print();\n                        // cout << i << \"-\" << j << \" ::: \" << ans << \" :::: \" << top << \" \" << bot <<  endl; \n                    }\n                }\n            }\n            // cout << \"3 ::: \" << res << endl;\n            \n            vector<Rect> lefts(m + 1);\n            vector<Rect> rights(m + 1);\n            \n            for (int i = 0; i < n; ++i) {\n                for (int j = 0; j < m; ++j) {\n                    lefts[j + 1].add(lefts[j]);\n                    if (grid[i][j] == 1) {\n                        lefts[j + 1].add(i, j);\n                    }\n                }\n                for (int j = m - 1; j >= 0; --j) {\n                    rights[j].add(rights[j + 1]);\n                    if (grid[i][j] == 1) {\n                        rights[j].add(i, j);\n                    }\n                }\n                \n                int base = downs[i + 1].area();\n                if (base <= 0) {\n                    continue;\n                }\n                \n                for (int j = 0; j < m; ++j) {\n                    int lf = lefts[j + 1].area();\n                    int rt = rights[j + 1].area();\n                    if (lf > 0 && rt > 0) {\n                        int ans = base + lf + rt;\n                        \n                        // downs[i + 1].print();\n                        // cout << \"lrb \" << i << \" \" << j << \" :::: \" << base << \" \" << lf << \" \" << rt << endl;\n                        res = min(res, ans);\n                    }\n                }  \n            }\n            \n            return res;\n        };\n        \n        \n        int res = 1 << 20;\n        \n        for (int i = 0; i < 4; ++i) {\n            auto ans = calc();\n            \n//             for (auto x : grid) {\n//                 for (auto y : x) {\n//                     cout << y << ' ';\n//                 }\n//                 cout << endl;\n//             }\n            \n//             cout << i << \" ans \" << ans << endl;\n            \n            grid = rotate(grid);  \n            res = min(res, ans);\n        }\n        \n        return res;\n    }\n    \nprivate:\n    struct Rect {\n        Rect(int _t = MAXN, int _b = -1, int _l = MAXN, int _r = -1) : t(_t), b(_b), l(_l), r(_r) {\n            \n        }\n        \n        void add(int x, int y) {\n            t = min(t, x);\n            b = max(b, x);\n            l = min(l, y);\n            r = max(r, y);\n        }\n        \n        void add(const Rect& other) {\n            l = min(l, other.l);\n            r = max(r, other.r);\n            t = min(t, other.t);\n            b = max(b, other.b);\n        }\n        \n        void print() {\n            cout << b << \"-\" << t << \" x \" << l << \"-\" << r << endl;\n        }\n        int area() {\n            if (l <= r && t <= b) {\n                return (r - l + 1) * (b - t + 1);\n            } else {\n                return -1;\n            }\n        }\n        \n        int t, b, l, r;\n    };\n};",
    "submit_ts": 1719112412.0
}