{
    "username": "wisdompeak",
    "submission": "using LL = long long;\nclass SegTreeNode\n{\n    public:\n    SegTreeNode* left = NULL;\n    SegTreeNode* right = NULL;\n    int start, end;\n    LL info;  // the sum value over the range\n    bool lazy_tag; \n    LL lazy_val;\n        \n    SegTreeNode(int a, int b, int val)  // init for range [a,b] with val\n    {                 \n        lazy_tag = 0;\n        lazy_val = 0;\n        start = a, end = b;\n        if (a==b)\n        {\n            info = val;\n            return;\n        }        \n        int mid = (a+b)/2;\n        if (left==NULL)\n        {\n            left = new SegTreeNode(a, mid, val);\n            right = new SegTreeNode(mid+1, b, val);            \n            info = left->info + right->info;  // check with your own logic\n        }        \n    }    \n    \n    SegTreeNode(int a, int b, vector<int>& val)  // init for range [a,b] with the same-size array val\n    {                 \n        lazy_tag = 0;\n        lazy_val = 0;\n        start = a, end = b;\n        if (a==b)\n        {\n            info = val[a];\n            return;\n        }        \n        int mid = (a+b)/2;\n        if (left==NULL)\n        {\n            left = new SegTreeNode(a, mid, val);\n            right = new SegTreeNode(mid+1, b, val);            \n            info = left->info + right->info;  // check with your own logic\n        }        \n    }    \n    \n    void pushDown()\n    {\n        if (lazy_tag==1 && left)\n        {\n            left->info = lazy_val * (left->end - left->start + 1);\n            right->info = lazy_val * (right->end - right->start + 1);\n            left->lazy_tag = 1; left->lazy_val = lazy_val;\n            right->lazy_tag = 1; right->lazy_val = lazy_val;\n            lazy_tag = 0;  lazy_val = 0;\n        }        \n    } \n    \n    void updateRange(int a, int b, int val)     // set range [a,b] with val\n    {        \n        if (b < start || a > end ) // not covered by [a,b] at all\n            return;        \n        if (a <= start && end <=b)  // completely covered within [a,b]\n        {\n            info = val * (end-start+1);\n            lazy_tag = 1;\n            lazy_val = val;\n            return;\n        }\n\n        if (left)\n        {\n            pushDown();        \n            left->updateRange(a, b, val);\n            right->updateRange(a, b, val);\n            info = left->info + right->info;  // write your own logic            \n        }        \n    }\n    \n    LL queryRange(int a, int b)     // query the sum over range [a,b]\n    {\n        if (b < start || a > end )\n        {\n            return 0;  // check with your own logic\n        }\n        if (a <= start && end <=b)\n        {\n            return info;  // check with your own logic\n        }          \n        \n        if (left)\n        {\n            pushDown();     \n            LL ret = left->queryRange(a, b) + right->queryRange(a, b);        \n            info = left->info + right->info;    // check with your own logic\n            return ret;\n        }\n        \n        return info;   // should not reach here\n    }  \n};\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) \n    {\n        SegTreeNode* root = new SegTreeNode(0, n-1, 1); \n        vector<int>rets;\n        for (auto& q: queries)\n        {\n            int a = q[0], b = q[1];\n            root->updateRange(a+1, b-1,0);\n            rets.push_back(root->queryRange(0, n-1)-1);            \n        }\n        return rets;\n        \n    }\n};",
    "submit_ts": "1722739930",
    "subm_id": "1343706860"
}