{
    "username": "sonugupta27032001",
    "submission": "class Solution {\npublic:\n    int check(int first, int last, int i, vector<int> &nums, int j) {\n        int l = first;\n        int r = last;\n        int ans = INT_MIN;\n        while (r >= l) {\n            int mid = (r + l) / 2;\n            if (j >= mid && nums[i] - j <= nums[i - 1] - mid) {\n                ans = max(ans, mid);\n                l = mid + 1;\n            } else {\n                r = mid - 1;\n            }\n        }\n        return ans;\n    }\n\n    int countOfPairs(vector<int>& nums) {\n        const int MOD = 1000000007;\n        int n = nums.size();\n        \n        // Create a DP table where dp[i][j] will store the count of valid pairs\n        // where the first array value is `j` and it is used at index `i`\n        vector<vector<long long>> dp(n, vector<long long>(1001, 0));\n\n        // Base case: There is 1 way to choose the first pair\n        for (int j = 0; j <= nums[0]; j++) {\n            dp[0][j] = 1;\n        }\n\n        // Fill the DP table\n        for (int i = 1; i < n; i++) {\n            vector<long long> prefixsum(nums[i - 1] + 1, 0);\n            prefixsum[0] = dp[i - 1][0];\n            for (int j = 1; j <= nums[i - 1]; j++) {\n                prefixsum[j] = (prefixsum[j - 1] + dp[i - 1][j]) % MOD;\n            }\n\n            for (int j = 0; j <= nums[i]; j++) {\n                int get = check(0, nums[i - 1], i, nums, j);\n                if (get == INT_MIN) {\n                    continue;\n                }\n                dp[i][j] = (dp[i][j] + prefixsum[get]) % MOD;\n            }\n        }\n\n        // Sum up all valid pairs from the last row\n        long long result = 0;\n        for (int j = 0; j <= nums[n - 1]; j++) {\n            result = (result + dp[n - 1][j]) % MOD;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1723348225",
    "subm_id": "1351613990"
}