{
    "username": "AAoAA",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        \"\"\"\n        (1) no 2 power => k = 0 or 1, 1 method\n\n        (2) 1 + 2^0 + 2^1 + 2^2 + ... + 2^j - b = k\n            0 <= b <= j + 2\n            (j + 2) position for (b) back\n            (j + 2)! / b! / (j + 2 - b)!\n        \"\"\"\n        \n        ans = 0\n        if k == 0 or k == 1:\n            ans += 1\n        \n        j = 0\n        while True:\n            sum_2power = 1 + (1 << (j + 1)) - 1\n            b = sum_2power - k\n            if b > j + 2:\n                break\n            if b >= 0:\n                num = 1\n                den = 1\n                for idx in range(b):\n                    num *= j + 2 - idx\n                    den *= idx + 1\n                ans += num // den\n            j += 1\n        return ans\n        \n    \n\n",
    "submit_ts": 1716088671.0
}