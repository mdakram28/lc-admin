{
    "username": "yuvrajsahni3",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n    map<int, vector<int>> diffToPossibleX;\n        vector<int> allPossibleX;\n        \n        int n = nums.size();\n        \n        // Calculate differences and store potential X values\n        for (int i = 0; i < n / 2; i++) {\n            int left = nums[i], right = nums[n - i - 1];\n            int diff = abs(left - right);\n            int possibleX = max({left, right, k - left, k - right});\n            diffToPossibleX[diff].push_back(possibleX);\n            allPossibleX.push_back(possibleX);\n        }\n\n        int minChangesRequired = n;\n        sort(allPossibleX.begin(), allPossibleX.end());\n\n        // Iterate through the map to calculate the minimum number of changes\n        for (auto& entry : diffToPossibleX) {\n            int diff = entry.first;\n            int index = lower_bound(allPossibleX.begin(), allPossibleX.end(), diff) - allPossibleX.begin();\n            int changes = index * 2 + (n / 2 - index);\n\n            for (auto& possibleX : entry.second) {\n                if (possibleX < diff) {\n                    changes -= 2;\n                } else {\n                    changes -= 1;\n                }\n            }\n\n            minChangesRequired = min(minChangesRequired, changes);\n        }\n\n        return minChangesRequired;\n    }\n};",
    "submit_ts": "1721489557",
    "subm_id": "1327456928"
}