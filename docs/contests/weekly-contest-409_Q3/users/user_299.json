{
    "username": "wo-yao-qi-fei-h",
    "submission": "struct Node {\n    int val = 0;\n    int add = 0;\n} ;\nclass Solution {\npublic:\n    int N;\n    vector<Node> tr;\n    void buildTree(int root, int l, int r) {\n        if (l == r) {\n            tr[root].val = 1;\n            return;\n        }\n        int mid = (l + r) / 2;\n        buildTree(root * 2, l, mid);\n        buildTree(root * 2 + 1, mid + 1, r);\n        tr[root].val = tr[root * 2].val + tr[root * 2 + 1].val;\n    }\n    void pushDown(int root) {\n        if (tr[root].add) {\n            tr[root * 2].add = 1;\n            tr[root * 2 + 1].add = 1;\n            tr[root * 2].val = 0;\n            tr[root * 2 + 1].val = 0;\n            tr[root].add = 0;\n        }\n    }\n    void updateTree(int root, int l, int r, int L, int R) {\n        if (L <= l && r <= R) {\n            tr[root].val = 0;\n            tr[root].add = 1;\n            return;\n        }\n        pushDown(root);\n        int mid = (l + r) / 2;\n        if (L <= mid)\n            updateTree(root * 2, l, mid, L, R);\n        if (R > mid)\n            updateTree(root * 2 + 1, mid + 1, r, L, R);\n\n        tr[root].val = tr[root * 2].val + tr[root * 2 + 1].val;\n    }\n    int query(int root, int l, int r, int L, int R) {\n        if (L <= l && r <= R) {\n            return tr[root].val;\n        }\n        pushDown(root);\n        int mid = (l + r) / 2;\n        int ans = 0;\n        if (L <= mid)\n            ans += query(root * 2, l, mid, L, R);\n        if (R > mid)\n            ans += query(root * 2 + 1, mid + 1, r, L, R);\n\n        return ans;\n    }\n    vector<int> shortestDistanceAfterQueries(int n,\n                                             vector<vector<int>>& queries) {\n        N = n;\n        tr.resize(4 * n);\n        buildTree(1, 1, n);\n        int m = queries.size();\n\n        vector<int> ans(m);\n        for (int i = 0; i < m; ++i) {\n            int u = queries[i][0] + 1, v = queries[i][1] + 1;\n            // cout<<\"before :\"<<query(1,1,n,1,n)<<endl;\n            updateTree(1, 1, n, u + 1, v - 1);\n\n            ans[i] = query(1, 1, n, 1, n) - 1;\n            // cout<<\"after :\"<<ans[i]<<endl;\n\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741167",
    "subm_id": "552336445"
}