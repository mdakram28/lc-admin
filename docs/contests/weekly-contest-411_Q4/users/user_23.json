{
    "username": "MvKaio",
    "submission": "using ll = long long;\n\nint n;\nstruct Seg {\n    vector<long long> seg, lazy;\n    vector<int> v;\n\n    Seg(int n2, int val=0) : v(n, val) {\n        seg.resize(4 * n);\n        lazy.resize(4 * n);\n        build();\n    }\n\n    long long build(int p=1, int l=0, int r=n-1) {\n        lazy[p] = 0;\n        if (l == r) return seg[p] = v[l];\n        int m = (l + r) / 2;\n        return seg[p] = build(2 * p, l, m) + build(2 * p + 1, m + 1, r);\n    }\n\n    void prop(int p, int l, int r) {\n        seg[p] += lazy[p] * (r - l + 1);\n        if (l != r) {\n            lazy[2 * p] += lazy[p];\n            lazy[2 * p + 1] += lazy[p];\n        }\n        lazy[p] = 0;\n    }\n\n    long long query(int a, int b, int p=1, int l=0, int r=n-1) {\n        prop(p, l, r);\n        if (a <= l && r <= b) return seg[p];\n        if (b < l || r < a) return 0;\n        int m = (l + r) / 2;\n        return query(a, b, 2 * p, l, m) + query(a, b, 2 * p + 1, m + 1, r);\n    }\n\n    long long update(int a, int b, int x, int p=1, int l=0, int r=n-1) {\n        prop(p, l, r);\n        if (a <= l && r <= b) {\n            lazy[p] += x;\n            prop(p, l, r);\n            return seg[p];\n        }\n        if (b < l || r < a) return seg[p];\n        int m = (l + r) / 2;\n        return seg[p] = update(a, b, x, 2 * p, l, m) + update(a, b, x, 2 * p + 1, m + 1, r);\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<ll> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        n = s.size();\n        vector<int> v(n);\n        for (int i = 0; i < n; i++) {\n            v[i] = s[i] == '1';\n            if (i) v[i] += v[i - 1];\n        }\n        \n        auto sum = [&] (int i, int j, int q) {\n            int val = v[j] - (i ? v[i - 1] : 0);\n            if (q) val = (j - i + 1) - val;\n            return val;\n        };\n        \n        vector<tuple<int, int, int>> events;\n        \n        vector<int> mx(n);\n        for (int i = 0; i < n; i++) {\n            int lo = i, hi = n - 1;\n            while (lo < hi) {\n                int mid = (lo + hi + 1) / 2;\n                \n                if (sum(i, mid, 0) <= k || sum(i, mid, 1) <= k)\n                    lo = mid;\n                else\n                    hi = mid - 1;\n            }\n            mx[i] = lo;\n            //cout << lo << \" \";\n            events.emplace_back(mx[i], 0, i);\n        }\n        //cout << endl;\n        for (int j = 0; j < queries.size(); j++) {\n            events.emplace_back(queries[j][1], 1, j);\n        }\n        \n        Seg ss(n), cnt(n, 1);\n        \n        auto f = [&] (ll x) {\n            return x * (x + 1) / 2;\n        };\n        \n        sort(events.begin(), events.end());\n        vector<ll> answer(queries.size());\n        for (auto [_, t, i] : events) {\n            if (t == 0) {\n                cnt.update(i, i, -1);\n                ss.update(i, i, mx[i]);\n            } else {\n                int l = queries[i][0], r = queries[i][1];\n                ll ans = ss.query(l, r) + cnt.query(l, r) * r;\n                //cout << l << \" \" << r << \" \" << ss.query(l, r) << \" \" << cnt.query(l, r) << endl;\n                ans -= (f(r) - f(l - 1)) - (r - l + 1);\n                answer[i] = ans;\n            }\n        }\n        \n        return answer;\n    }\n};",
    "submit_ts": "1723950950",
    "subm_id": "1359759305"
}