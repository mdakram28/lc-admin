{
    "username": "dqkqd",
    "submission": "\nuse std::collections::HashSet;\n\nimpl Solution {\n    pub fn min_flips(grid: Vec<Vec<i32>>) -> i32 {\n        let width = grid.len();\n        let height = grid[0].len();\n\n        let mirrors = (0..(width + 1) / 2)\n            .flat_map(|x| {\n                (0..(height + 1) / 2).map(move |y| {\n                    let p = (x, y);\n                    let p1 = (width - x - 1, y);\n                    let p2 = (x, height - y - 1);\n                    let p3 = (width - x - 1, height - y - 1);\n\n                    [p, p1, p2, p3]\n                        .into_iter()\n                        .collect::<HashSet<_>>()\n                        .into_iter()\n                        .collect::<Vec<_>>()\n                })\n            })\n            .collect::<Vec<_>>();\n\n        let mirrors_one = mirrors.iter().filter(|v| v.len() == 1).collect::<Vec<_>>();\n\n        let mut cost_mirror_one = 0;\n        if !mirrors_one.is_empty() {\n            let p = mirrors_one[0][0];\n            cost_mirror_one = grid[p.0][p.1];\n        }\n\n        let cost_mirror_four = mirrors\n            .iter()\n            .filter(|v| v.len() == 4)\n            .map(|v| {\n                let total_ones = v.iter().map(|p| grid[p.0][p.1]).sum::<i32>();\n                total_ones.min(4 - total_ones)\n            })\n            .sum::<i32>();\n\n        let mirror_two_total_ones = mirrors\n            .iter()\n            .filter(|v| v.len() == 2)\n            .map(|v| {\n                let total_ones = v.iter().map(|p| grid[p.0][p.1]).sum::<i32>();\n                total_ones\n            })\n            .collect::<Vec<_>>();\n\n        let mirror_two_number_ones = mirror_two_total_ones.iter().filter(|&&v| v == 1).count();\n        let mirror_two_number_twos = mirror_two_total_ones.iter().filter(|&&v| v == 2).count();\n\n        let mut cost_mirror_two = 0;\n        if mirror_two_number_twos % 2 == 0 {\n            // switch all of ones to zeros\n            cost_mirror_two = mirror_two_number_ones;\n        } else if mirror_two_number_ones == 0 {\n            // switch 2 into zeros\n            cost_mirror_two = 2;\n        } else if mirror_two_number_ones >= 1 {\n            // switch mirror_two_number_ones - 1 to 0, the last one to two\n            cost_mirror_two = mirror_two_number_ones;\n        }\n\n        cost_mirror_four + cost_mirror_two as i32 + cost_mirror_one\n    }\n}",
    "submit_ts": "1722700050",
    "subm_id": "1343230151"
}