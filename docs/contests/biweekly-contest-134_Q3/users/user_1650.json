{
    "username": "suraj_0491",
    "submission": "#include <iostream>\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& vec, int int_kap) {\n         int n = vec.size();\n       int sigma = 0, alpha = 0, beta = 1;\n        \n        while (alpha < n && beta < n + int_kap) {\n            int storeBeta = beta;\n            // mod\n            int delta = storeBeta % n;\n            \n            // Find the end of the current alternating group\n            while (storeBeta < n + int_kap - 1 && vec[delta] != vec[(delta - 1 + n) % n]) {\n                // chk |@cond|\n                storeBeta++;\n                \n                delta = storeBeta % n;\n            }\n            \n            // Calculate the number of groups found\n            sigma += max(storeBeta - alpha - int_kap + 1, 0);\n            \n            alpha = storeBeta;\n            beta = alpha + 1;\n        }\n        \n        return sigma;\n    }\n};\n",
    "submit_ts": "1720281442",
    "subm_id": "1311825334"
}