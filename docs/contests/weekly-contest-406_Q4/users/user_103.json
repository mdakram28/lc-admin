{
    "username": "E3Vtm5JKkx",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] hCut = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCut = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        Arrays.sort(hCut, Collections.reverseOrder());\n        Arrays.sort(vCut, Collections.reverseOrder());\n        \n        int hCount = 1, vCount = 1; \n        int i = 0, j = 0;\n        long totalCost = 0;\n        \n        \n        while (i < hCut.length && j < vCut.length) {\n            if (hCut[i] >= vCut[j]) {\n                totalCost += (long) hCut[i] * vCount;\n                hCount++;\n                i++;\n            } else {\n                totalCost += (long) vCut[j] * hCount;\n                vCount++;\n                j++;\n            }\n        }\n        \n        \n        while (i < hCut.length) {\n            totalCost += (long) hCut[i] * vCount;\n            i++;\n        }\n        \n        \n        while (j < vCut.length) {\n            totalCost += (long) vCut[j] * hCount;\n            j++;\n        }\n        \n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720925023",
    "subm_id": "1320239957"
}