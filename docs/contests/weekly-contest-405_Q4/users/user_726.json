{
    "username": "sinon696969",
    "submission": "class TrieNode {\npublic:\n    int cost;\n    vector<TrieNode*> links;\n    TrieNode() : cost(0), links(26, nullptr) {}\n};\n\nclass Solution {\npublic:\n    TrieNode* root;\n\n    Solution() { root = new TrieNode(); }\n\n    void _build(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->links[c - 'a'])\n                node->links[c - 'a'] = new TrieNode();\n            node = node->links[c - 'a'];\n        }\n        if (node->cost != 0)\n            node->cost = min(node->cost, cost);\n        else\n            node->cost = cost;\n    }\n\n    int search(string& word, int st, vector<int>& dp) {\n        TrieNode* node = root;\n        for (int i = st; i < word.size(); i++) {\n            if (!node->links[word[i] - 'a'])\n                break;\n            node = node->links[word[i] - 'a'];\n            if (node->cost != 0) {\n                dp[i + 1] = min(dp[i + 1], dp[st] + node->cost);\n            }\n        }\n        return dp[word.size()] == INT_MAX ? -1 : dp[word.size()];\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); i++)\n            _build(words[i], costs[i]);\n\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < target.size(); i++) {\n            if (dp[i] == INT_MAX)\n                continue;\n            search(target, i, dp);\n        }\n\n        return dp[target.size()] == INT_MAX ? -1 : dp[target.size()];\n    }\n};\n",
    "submit_ts": "1720323056",
    "subm_id": "1312366218"
}