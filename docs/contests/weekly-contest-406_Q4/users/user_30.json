{
    "username": "prince_raiyani",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        // Sort the cuts in descending order\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        int h = horizontalCut.length - 1;\n        int v = verticalCut.length - 1;\n        \n        // Use long to handle large sums\n        long totalCost = 0;\n        \n        // Counters for the number of sections created\n        int horizontalSections = 1; // Initially, there is one section horizontally\n        int verticalSections = 1;   // Initially, there is one section vertically\n        \n        // Greedily choose the largest cost cuts first\n        while (h >= 0 && v >= 0) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                // Perform a horizontal cut\n                totalCost += (long) horizontalCut[h] * verticalSections;\n                horizontalSections++;\n                h--;\n            } else {\n                // Perform a vertical cut\n                totalCost += (long) verticalCut[v] * horizontalSections;\n                verticalSections++;\n                v--;\n            }\n        }\n        \n        // Process the remaining horizontal cuts if any\n        while (h >= 0) {\n            totalCost += (long) horizontalCut[h] * verticalSections;\n            h--;\n        }\n        \n        // Process the remaining vertical cuts if any\n        while (v >= 0) {\n            totalCost += (long) verticalCut[v] * horizontalSections;\n            v--;\n        }\n        \n        return totalCost;\n    }\n}\n",
    "submit_ts": "1720924471",
    "subm_id": "1320218081"
}