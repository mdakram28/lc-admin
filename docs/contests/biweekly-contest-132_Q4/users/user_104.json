{
    "username": "parag776",
    "submission": "int ceil_pow2(int n) {\n    int x = 0;\n    while ((1U << x) < (unsigned int)(n)) x++;\n    return x;\n}\n\ntemplate <class S, S (*op)(S, S), S (*e)()> struct segtree {\n  public:\n    segtree() : segtree(0) {}\n    segtree(int n) : segtree(std::vector<S>(n, e())) {}\n    segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n\n    void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n    }\n\n    S get(int p) {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n    }\n\n    S prod(int l, int r) {\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n\n        while (l < r) {\n            if (l & 1) sml = op(sml, d[l++]);\n            if (r & 1) smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n        return op(sml, smr);\n    }\n\n    S all_prod() { return d[1]; }\n\n    template <bool (*f)(S)> int max_right(int l) {\n        return max_right(l, [](S x) { return f(x); });\n    }\n    template <class F> int max_right(int l, F f) {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n            while (l % 2 == 0) l >>= 1;\n            if (!f(op(sm, d[l]))) {\n                while (l < size) {\n                    l = (2 * l);\n                    if (f(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n\n    template <bool (*f)(S)> int min_left(int r) {\n        return min_left(r, [](S x) { return f(x); });\n    }\n    template <class F> int min_left(int r, F f) {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2)) r >>= 1;\n            if (!f(op(d[r], sm))) {\n                while (r < size) {\n                    r = (2 * r + 1);\n                    if (f(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n\n  private:\n    int _n, size, log;\n    std::vector<S> d;\n\n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n};\n\nint op(int a, int b){\n    return max(a, b);\n}\n\nint e(){\n    return 0;\n}\n\nclass Solution {\npublic:\n    int maximumLength(vector<int> nums, int k){\n    int n = nums.size();\n        k++;\n        map<int,int> mp;\n        for(int i=0;i<n;i++){\n            mp.insert({nums[i], -1});\n        }\n        int z = 0;\n        for(auto& p: mp){\n            p.second = z;\n            z++;\n        }\n        for(int i=0;i<n;i++){\n            nums[i] = mp[nums[i]];\n        }\n        int m = mp.size();\n\n        vector<segtree<int, op, e>> dp(k, segtree<int, op, e>(m));\n        dp[0].set(nums[0], 1);\n        for(int i=1;i<n;i++){\n            vector<int> curDp(k);\n            for(int j=0;j<k;j++){\n                curDp[j] = max(curDp[j], dp[j].prod(nums[i], nums[i]+1)+1);\n            }\n            for(int j=1;j<k;j++){\n                if(nums[i]==0){\n                    curDp[j] = max(curDp[j], dp[j-1].prod(nums[i]+1, m)+1);\n                } else if(nums[i]==m-1){\n                    curDp[j] = max(curDp[j], dp[j-1].prod(0, nums[i])+1);\n                } else {\n                    curDp[j] = max(curDp[j], max(dp[j-1].prod(0, nums[i]), dp[j-1].prod(nums[i]+1, m))+1);\n                }\n            }\n            for(int j=0;j<k;j++){\n                dp[j].set(nums[i], curDp[j]);\n            }\n        }\n        int ans = 0;\n        for(int j=0;j<k;j++) ans = max(ans, dp[j].prod(0, m));\n        return ans;\n}\n};",
    "submit_ts": "1717859936",
    "subm_id": "1281740194"
}