{
    "username": "catnipan",
    "submission": "from math import inf\nclass Solution:\n    def minSize(self, rMin, rMax, cMin, cMax):\n        rrMin, rrMax, ccMin, ccMax = None, None, None, None\n        for rr in range(rMin, rMax):\n            for cc in range(cMin, cMax):\n                if self.grid[rr][cc] == 0:\n                    continue\n                if rrMin is None:    \n                    rrMin, rrMax, ccMin, ccMax = rr, rr, cc, cc\n                else:    \n                    rrMin = min(rrMin, rr)\n                    rrMax = max(rrMax, rr)\n                    ccMin = min(ccMin, cc)\n                    ccMax = max(ccMax, cc)\n        if rrMin is None:            \n            return 0\n        return (rrMax - rrMin + 1) * (ccMax - ccMin + 1)\n        \n    def minimumSum(self, grid: List[List[int]]) -> int:\n        self.grid = grid\n        R = len(grid)\n        C = len(grid[0])\n        ans = inf\n        for r in range(R):\n            for c in range(C):\n                v1 = self.minSize(0, r, 0, C) + self.minSize(r, R, 0, c) + self.minSize(r, R, c, C)\n                v2 = self.minSize(0, R, 0, c) + self.minSize(0, r, c, C) + self.minSize(r, R, c, C)\n                v3 = self.minSize(r, R, 0, C) + self.minSize(0, r, 0, c) + self.minSize(0, r, c, C)\n                v4 = self.minSize(0, R, c, C) + self.minSize(0, r, 0, c) + self.minSize(r, R, 0, c)\n                ans = min(ans, v1, v2, v3, v4)\n        for r1 in range(R):\n            for r2 in range(r1 + 1, R):\n                ans = min(ans, self.minSize(0, r1, 0, C) + self.minSize(r1, r2, 0, C) + self.minSize(r2, R, 0, C))\n        for c1 in range(C):\n            for c2 in range(c1 + 1, C):\n                ans = min(ans, self.minSize(0, R, 0, c1) + self.minSize(0, R, c1, c2) + self.minSize(0, R, c2, C))\n        return ans        \n            ",
    "submit_ts": 1719112080.0
}