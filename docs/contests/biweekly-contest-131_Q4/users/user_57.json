{
    "username": "divine21",
    "submission": "const int N = 5e4 + 10;\nint val[N];\nstruct Node {\n    int l, r;\n    int val;\n} tr[N << 2];\n\nvoid push_up(int u) {\n    tr[u].val = std::max(tr[u << 1].val, tr[u << 1 | 1].val);\n}\n\nvoid build(int u, int l, int r) {\n    tr[u] = {l, r};\n\n    if (l == r) {\n        tr[u].val = val[l];\n        return;\n    }\n\n    int mid = l + r >> 1;\n    build(u << 1, l, mid), build(u << 1 | 1, mid + 1, r);\n    push_up(u);\n}\n\nvoid update(int u, int d, int x) {\n    if (tr[u].l == tr[u].r && tr[u].l == d) {\n        tr[u].val = x;\n        return;\n    }\n\n    int mid = tr[u].l + tr[u].r >> 1;\n    if (d <= mid) {\n        update(u << 1, d, x);\n    }\n\n    if (d > mid) {\n        update(u << 1 | 1, d, x);\n    }\n\n    push_up(u);\n}\n\nint query_max(int u, int l, int r) {\n    int res = 0;\n    if (l <= tr[u].l && tr[u].r <= r) {\n        res = std::max(res, tr[u].val);\n        return res;\n    }\n\n    int mid = tr[u].l + tr[u].r >> 1;\n    if (l <= mid) {\n        res = query_max(u << 1, l, r);\n    }\n    if (r > mid) {\n        res = std::max(res, query_max(u << 1 | 1, l, r));\n    }\n\n    return res;\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        std::vector<int> b;\n        std::set<int> st;\n        st.insert(0);\n        st.insert(int(5e4 + 1));\n        memset(tr, 0, sizeof tr);\n        build(1, 1, 5e4 + 1);\n        \n        std::vector<bool> ans;\n        for (auto q : queries) {\n            int op = q[0];\n            if (op == 1) {\n                int x = q[1];\n                int pre = *std::prev(st.lower_bound(x));\n                update(1, x, x - pre);\n                int nxt = *st.upper_bound(x);\n                update(1, nxt, nxt - x);\n                st.insert(x);\n            } else {\n                int x = q[1], sz = q[2];\n                int pre = *std::prev(st.lower_bound(x));\n                int res = x - pre;\n                res = std::max(res, query_max(1, 1, x));\n                // std::cout << 1 << \" \" << x << \" max = \" << query_max(1, 1, x) << \"\\n\";\n                ans.push_back(res >= sz);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1716649736.0
}