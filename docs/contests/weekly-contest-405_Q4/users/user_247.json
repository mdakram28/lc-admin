{
    "username": "itsmeashu",
    "submission": "from typing import List\n\nclass Solution:\n    def heapify(arr, n, i):\n        largest = i\n        l = 2 * i + 1\n        r = 2 * i + 2\n\n        if l < n and arr[l] > arr[largest]:\n            largest = l\n\n        if r < n and arr[r] > arr[largest]:\n            largest = r\n\n        if largest != i:\n            arr[i], arr[largest] = arr[largest], arr[i]\n            heapify(arr, n, largest)\n\n    def heapSort(arr):\n        n = len(arr)\n        for i in range(n // 2 - 1, -1, -1):\n            heapify(arr, n, i)\n\n        for i in range(n - 1, 0, -1):\n            arr[0], arr[i] = arr[i], arr[0]\n            heapify(arr, i, 0)\n\n    def partition(arr, start, end):\n        index = 0\n        pivotElement = arr[end]\n        pivotIndex = 0\n        temp = [0] * (end - start + 1)\n\n        for i in range(start, end + 1):\n            if arr[i] < pivotElement:\n                temp[index] = arr[i]\n                index += 1\n\n        temp[index] = pivotElement\n        index += 1\n\n        for i in range(start, end):\n            if arr[i] > pivotElement:\n                temp[index] = arr[i]\n                index += 1\n\n        index = 0\n        for i in range(start, end + 1):\n            if arr[i] == pivotElement:\n                pivotIndex = i\n            arr[i] = temp[index]\n            index += 1\n        return pivotIndex\n    \n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        m = len(words)\n\n        wc = {}\n        for i, w in enumerate(words):\n            wc[w] = min(wc.get(w, float('inf')), costs[i])\n\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            for w in wc:\n                if i >= len(w) and target[i - len(w):i] == w:\n                    dp[i] = min(dp[i], dp[i - len(w)] + wc[w])\n\n        return dp[n] if dp[n] != float('inf') else -1\n    def quickSort(arr, start, end):\n        if start < end:\n            partitionIndex = partition(arr, start, end)\n            quickSort(arr, start, partitionIndex - 1)\n            quickSort(arr, partitionIndex + 1, end)\n \n    def getMax(arr):\n        mx = arr[0]\n        for i in range(1, len(arr)):\n            if arr[i] > mx:\n                mx = arr[i]\n        return mx\n\n    def countSort(arr, exp):\n        n = len(arr)\n        output = [0] * n\n        count = [0] * 10\n\n        for i in range(n):\n            count[(arr[i] // exp) % 10] += 1\n\n        for i in range(1, 10):\n            count[i] += count[i - 1]\n\n        for i in range(n - 1, -1, -1):\n            output[count[(arr[i] // exp) % 10] - 1] = arr[i]\n            count[(arr[i] // exp) % 10] -= 1\n\n        for i in range(n):\n            arr[i] = output[i]\n    ",
    "submit_ts": "1720321896",
    "subm_id": "1312335202"
}