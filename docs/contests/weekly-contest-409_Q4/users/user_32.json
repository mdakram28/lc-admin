{
    "username": "wangYiTiaoYu",
    "submission": "class Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        const size_t n = colors.size();\n        set<int> cuts;\n        map<int, int> cnt;\n        auto update_cut = [&] (int i) {\n            i %= n;\n            auto it = cuts.find(i);\n            if (it == cuts.end()) {\n                if (!cuts.empty()) {\n                    int next_cut = 0;\n                    int prev_cut = 0;\n                    {\n                        auto next = cuts.upper_bound(i);\n                        if (next == cuts.end()) {\n                            next_cut = *cuts.begin() + n;\n                        } else {\n                            next_cut = *next;\n                        }\n                        if (next == cuts.begin()) {\n                            prev_cut = *(std::prev(cuts.end())) - n;\n                        } else {\n                            prev_cut = *(std::prev(next));\n                        }\n                    }\n                    if (--cnt[next_cut - prev_cut] == 0) {\n                        cnt.erase(next_cut - prev_cut);\n                    }\n                    ++cnt[next_cut - i];\n                    ++cnt[i - prev_cut];\n                } else {\n                    cnt = {{n, 1}};\n                }\n                cuts.insert(i);\n            } else {\n                cuts.erase(it);\n                if (!cuts.empty()) {\n                    int next_cut = 0;\n                    int prev_cut = 0;\n                    {\n                        auto next = cuts.upper_bound(i);\n                        if (next == cuts.end()) {\n                            next_cut = *cuts.begin() + n;\n                        } else {\n                            next_cut = *next;\n                        }\n                        if (next == cuts.begin()) {\n                            prev_cut = *(std::prev(cuts.end())) - n;\n                        } else {\n                            prev_cut = *(std::prev(next));\n                        }\n                    }\n                    ++cnt[next_cut - prev_cut];\n                    if (--cnt[next_cut - i]==0) {\n                        cnt.erase(next_cut - i);\n                    }\n                    if (--cnt[i - prev_cut]==0) {\n                        cnt.erase(i - prev_cut);\n                    }\n                } else {\n                    cnt = {};\n                }\n            }\n        };\n        for (int i = 0; i < n; ++i) {\n            int pre = (i + n - 1) % n;\n            if (colors[i] == colors[pre]) {\n                cuts.insert(i);\n            }\n        }\n        if (cuts.empty()) {\n            cnt = {};\n        } else {\n            for (int i : cuts) {\n                auto it = cuts.upper_bound(i);\n                if (it == cuts.end()) {\n                    ++cnt[*cuts.begin() + n - i];\n                } else {\n                    ++cnt[*it - i];\n                }\n            }\n        }\n        // for (auto[k, v] : cnt) {\n        //     cout << k << ' ' << v << endl;\n        // }\n        // cout << endl;\n        vector<int> ans;\n        for (auto& query : queries) {\n            auto t = query[0];\n            if (t == 1) {\n                auto size = query[1];\n                if (cnt.empty()) {\n                    ans.push_back(n);\n                } else {\n                    auto it = cnt.lower_bound(size);\n                    int t = 0;\n                    while (it != cnt.end()) {\n                        auto [k, v] = *it;\n                        t += (k - size + 1) * v;\n                        ++it;\n                    }\n                    ans.push_back(t);\n                }\n            } else {\n                auto i = query[1];\n                auto c = query[2];\n                if (colors[i] != c) {\n                    colors[i] = c;\n                    update_cut(i);\n                    update_cut(i + 1);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722743035",
    "subm_id": "552348381"
}