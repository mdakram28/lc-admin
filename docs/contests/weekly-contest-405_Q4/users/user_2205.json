{
    "username": "Sparui",
    "submission": "class TrieNode{\n    int cost;\n    TrieNode* next[26];\n    public:\n    TrieNode(){\n        cost = -1;\n        for(int i = 0;i<26;i++){\n            next[i] = NULL;\n        }\n    }\n    void setCost(int c){\n        if(cost!=-1){\n            cost = min(cost,c);\n            return;\n        }\n        cost = c;\n    }\n    int getCost(){\n        return cost;\n    }\n    TrieNode * getChild(char c){\n        return getChild(c-'a');\n    }\n    void setChild(char c){\n        setChild(c-'a');\n    }\n    TrieNode * getChild(int i){\n        if(i>=26) return NULL;\n        return next[i];\n    }\n    void setChild(int i){\n        next[i] = new TrieNode();\n    }\n};\n\nclass Trie{\n    TrieNode root;\npublic:\n    void add(string word,int cost){\n        TrieNode * ptr = &root;\n        for(int i=0;i<word.length();i++){\n            int index = word[i]-'a';\n            if(ptr->getChild(index)==NULL){\n                ptr->setChild(index);\n            }\n            ptr = ptr->getChild(index);\n        }\n        ptr->setCost(cost);\n    }\n    TrieNode * getRoot(){\n        return &root;\n    }\n};\nclass Solution {\n   int rec(const string & target,int index,Trie & words,vector<int> & dp){\n     if(index==target.length()) return 0;\n     //cout<<\"invoked\";\n     if(dp[index]!=-1) return dp[index];\n     int ans = INT_MAX/2;\n     TrieNode * ptr = words.getRoot();\n     for(int k = index;k<target.length();k++){\n        int c = target[k]-'a';\n        //cout<<target[k];\n        ptr = ptr->getChild(c);\n        if(ptr==NULL){\n            //cout<<\"NULL POINTer\";\n            break;\n        } \n        if(ptr->getCost()!=-1){\n            int temp = ptr->getCost()+rec(target,k+1,words,dp);\n            ans = min(ans,temp);\n        }\n     }\n     return dp[index] = ans;\n   }\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n       Trie wordsTrie;\n       for(int i=0;i<words.size();i++){\n            wordsTrie.add(words[i],costs[i]);\n       }\n       vector<int> dp(target.length(),-1);\n       int cost = rec(target,0,wordsTrie,dp);\n       //cout<<cost;\n       if(cost>=INT_MAX/2) cost = -1;\n       return cost;\n    }\n};\n\n/*\n int rec(const string& target,const vector<string>& words, const vector<int>& costs,int index,int j){\n        if(j==target.length()) return 0;\n        if(index==words.size()) return INT_MAX/2;\n        int take = INT_MAX,not_take;\n        not_take = rec(target,words,costs,index+1,j);\n        int k,i;\n        for(k=j,i=0;k<target.length()&&i<words[index].length();k++,i++){\n            if(target[k]!=words[index][i]) break;\n        }\n        if(i==words[index].length()){\n            take = costs[index]+rec(target,words,costs,index+1,k);\n        }\n        return min(take,not_take);\n    }\n*/",
    "submit_ts": "1720324795",
    "subm_id": "1312408589"
}