{
    "username": "Fasdr",
    "submission": "class Solution {\n    public long maximumScore(int[][] grid) {\n        int n = grid.length;\n        long[][] colSum = new long[n + 1][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                colSum[i + 1][j] = colSum[i][j] + grid[i][j];\n            }\n        }\n        // column, # colored, # taken -> val \n        // -1  is not possible\n        long[][][] dp = new long[n][n + 1][n + 1];\n        for (long[][] ddp : dp)\n            for (long[] dddp : ddp)\n                Arrays.fill(dddp, -1);\n        \n        for (int color = 0; color <= n; color++)\n            dp[0][color][0] = 0;\n        \n        for (int col = 0; col < n - 1; col++) {\n            for (int color = 0; color <= n; color++) {\n                for (int taken = 0; taken <= n; taken++) {\n                    if (dp[col][color][taken] == -1)\n                        continue;\n                    for (int newCol = 0; newCol <= n; newCol++) {\n                        if (newCol > color) {\n                            // something added in the previous\n                            // nothing added in the new\n                            long val = dp[col][color][taken];\n                            if (color + taken < newCol) {\n                                val += colSum[newCol][col] - colSum[color + taken][col];\n                            }\n                            dp[col + 1][newCol][0] = Math.max(dp[col + 1][newCol][0], val);\n                        } else if (newCol < color) {\n                            // nonting added in the previous\n                            // something added in the new\n                            long val =  dp[col][color][taken] \n                                + colSum[color][col + 1] - colSum[newCol][col + 1];\n                            \n                            dp[col + 1][newCol][color - newCol] = Math.max(dp[col + 1][newCol][color - newCol], val);\n                        } else {\n                            // nothing added at all\n                            long val = dp[col][color][taken];\n                            dp[col + 1][newCol][0] = Math.max(val, dp[col + 1][newCol][0]);\n                        }\n                    }\n                }\n            }\n        }\n        \n        long res = 0;\n        for (int i = 0; i <= n; i++)\n            for (int j = 0; j <= n; j++)\n                res = Math.max(res, dp[n - 1][i][j]);\n        return res;\n    }\n}",
    "submit_ts": "1721491153",
    "subm_id": "1327503422"
}