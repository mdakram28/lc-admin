{
    "username": "plus2047",
    "submission": "class Solution {\n    const int inf = 1024;\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<int>> g2(n, vector<int>(m));\n        for(int i = 0; i < m; i++) {\n            for(int j = 0; j < n; j++) {\n                g2[j][i] = grid[i][j];\n            }\n        }\n        int s1 = solve3h(grid), s2 = solve3h(g2);\n        for(auto& v: grid) {\n            reverse(v.begin(), v.end());\n        }\n        for(auto& v: g2) {\n            reverse(v.begin(), v.end());\n        }\n        int s3 = solve3h(grid), s4 = solve3h(g2);\n        return min({s1, s2, s3, s4});\n    }\n    int solve3h(vector<vector<int>>& grid) {\n        int res = inf;\n        int m = grid.size(), n = grid[0].size();\n        int m1 = m, m2 = 0, n1 = n, n2 = 0;\n        for(int left = 1; left < n; left++) {\n            for(int i = 0; i < m; i++) {\n                if(grid[i][left - 1]) {\n                    m1 = min(m1, i);\n                    m2 = max(m2, i);\n                    n1 = min(n1, left - 1);\n                    n2 = max(n2, left - 1);\n                }\n            }\n            if(m1 != m) {\n                int x = (m2 - m1 + 1) * (n2 - n1 + 1);\n                int y = min(solve2v(grid, left), solve2h(grid, left));\n                // int y = solve2h(grid, left);\n                res = min(res, x + y);\n            }\n        }\n        return res;\n    }\n    int solve2v(vector<vector<int>>& grid, int left) {\n        int m = grid.size(), n = grid[0].size();\n        vector<int> pre(m, inf), suf(m, inf);\n        int m1 = m, m2 = 0, n1 = n, n2 = 0;\n        for(int i = 0; i < m; i++) {\n            for(int j = left; j < n; j++) {\n                if(grid[i][j]) {\n                    m1 = min(m1, i);\n                    m2 = max(m2, i);\n                    n1 = min(n1, j);\n                    n2 = max(n2, j);\n                }\n            }\n            if(m1 != m) {\n                pre[i] = (m2 - m1 + 1) * (n2 - n1 + 1);\n            }\n        }\n        m1 = m, m2 = 0, n1 = n, n2 = 0;\n        for(int i = m - 1; i >= 0; i--) {\n            for(int j = left; j < n; j++) {\n                if(grid[i][j]) {\n                    m1 = min(m1, i);\n                    m2 = max(m2, i);\n                    n1 = min(n1, j);\n                    n2 = max(n2, j);\n                }\n            }\n            if(m1 != m) {\n                suf[i] = (m2 - m1 + 1) * (n2 - n1 + 1);\n            }\n        }\n        int res = inf;\n        for(int i = 0; i + 1 < m; i++) {\n            res = min(res, pre[i] + suf[i + 1]);\n        }\n        return res;\n    }\n    int solve2h(vector<vector<int>>& grid, int left) {\n        int m = grid.size(), n = grid[0].size();\n        vector<int> pre(n, inf), suf(n, inf);\n        int m1 = m, m2 = 0, n1 = n, n2 = 0;\n        for(int j = left; j < n; j++) {\n            for(int i = 0; i < m; i++) {\n                if(grid[i][j]) {\n                    m1 = min(m1, i);\n                    m2 = max(m2, i);\n                    n1 = min(n1, j);\n                    n2 = max(n2, j);\n                }\n            }\n            if(m1 != m) {\n                pre[j] = (m2 - m1 + 1) * (n2 - n1 + 1);\n            }\n        }\n        m1 = m, m2 = 0, n1 = n, n2 = 0;\n        for(int j = n - 1; j >= left; j--) {\n            for(int i = 0; i < m; i++) {\n                if(grid[i][j]) {\n                    m1 = min(m1, i);\n                    m2 = max(m2, i);\n                    n1 = min(n1, j);\n                    n2 = max(n2, j);\n                }\n            }\n            if(m1 != m) {\n                suf[j] = (m2 - m1 + 1) * (n2 - n1 + 1);\n            }\n        }\n        int res = inf;\n        for(int j = left; j + 1 < n; j++) {\n            res = min(res, pre[j] + suf[j + 1]);\n        }\n        return res;\n    }\n};",
    "submit_ts": 1719113046.0
}