{
    "username": "that_panda",
    "submission": "import heapq\n\nclass Solution:\n    def minimumCost(self, m, n, horizontalCut, verticalCut):\n        # Convert cuts to max-heap by inverting the values\n        horizontalCut = [-cut for cut in horizontalCut]\n        verticalCut = [-cut for cut in verticalCut]\n        heapq.heapify(horizontalCut)\n        heapq.heapify(verticalCut)\n        \n        horizontal_pieces = 1\n        vertical_pieces = 1\n\n        total_cost = 0\n        while horizontalCut or verticalCut:\n            if not horizontalCut or (verticalCut and verticalCut[0] <= horizontalCut[0]):\n                total_cost += -heapq.heappop(verticalCut) * horizontal_pieces\n                vertical_pieces += 1\n            else:\n                total_cost += -heapq.heappop(horizontalCut) * vertical_pieces\n                horizontal_pieces += 1\n        \n        return total_cost\n",
    "submit_ts": "1720925468",
    "subm_id": "1320255721"
}