{
    "username": "summerdaway",
    "submission": "int n;\nstruct _ {\n    int m, l, r, ct;\n} T[51111*20];\n\nclass Solution {\npublic:\n    void build_tree(int node, int l, int r) {\n        T[node].m = T[node].l = T[node].r = r-l+1;\n        T[node].ct = 0;\n        if (l == r) {\n            return;\n        }\n        int mid = (l+r)>>1;\n        build_tree(node<<1, l, mid);\n        build_tree((node<<1)|1, mid+1, r);\n    }\n\n    void insert(int node, int l, int r, int x) {\n        if (l == r) {\n            T[node].m = T[node].r = 1;\n            T[node].l = 0;\n            T[node].ct += 1;\n        printf(\"l=%d r=%d m=%d l=%d r=%d\\n\", l, r, T[node].m, T[node].l, T[node].r);\n            return;\n        }\n        int mid = (l+r)>>1;\n        if (x <= mid) {\n            insert(node<<1, l, mid,  x);\n        } else {\n            insert((node<<1)|1, mid+1, r, x);\n        }\n        T[node].m = max(T[node<<1].m, T[(node<<1)|1].m);\n        T[node].m = max(T[node].m, T[node<<1].r + T[(node<<1)|1].l);\n        T[node].l = T[node<<1].l;\n        if (T[node<<1].ct == 0) T[node].l += T[(node<<1)|1].l;\n        T[node].r = T[(node<<1)|1].r;\n        if (T[(node<<1)|1].ct == 0) T[node].r += T[node<<1].r;\n        T[node].ct = T[node<<1].ct + T[(node<<1)|1].ct;\n        // printf(\"l=%d r=%d m=%d l=%d r=%d %d\\n\", l, r, T[node].m, T[node].l, T[node].r, T[(node<<1)|1].l);\n    }\n\n    pair<pair<int, int>, pair<int, int>> query(int node, int l, int r, int x, int y) {\n        if (x <= l && r <= y) {\n            // printf(\"l=%d r=%d %d %d %d %d\\n\", l, r, T[node].m, T[node].ct, T[node].l, T[node].r);\n            return {{T[node].m, T[node].ct==0}, {T[node].l, T[node].r}};\n        }\n        if (x > r || y < l) return {{0, 0}, {0, 0}};\n        int mid = (l+r)>>1;\n        auto t1 = query(node<<1, l, mid, x, y);\n        auto t2 = query((node<<1)|1, mid+1, r, x, y);\n        int mx = max(max(t1.first.first, t2.first.first), t1.second.second+t2.second.first);\n        int L = t1.second.first;\n        if (t1.first.second) L += t2.second.first;\n        int R = t2.second.second;\n        if (t2.first.second) R += t1.second.second;\n        // printf(\"l=%d r=%d mx=%d L=%d R=%d\\n\", l, r, mx, L, R);\n        return {{mx, t1.first.second&&t2.first.second}, {L, R}};\n    }\n\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        n = 50010;\n        build_tree(1, 0, n);\n        vector<bool> ret;\n        for (auto a: queries) {\n            if (a[0] == 1) {\n                insert(1, 0, n, a[1]);\n            } else {\n                auto t = query(1, 0, n, 0, a[1]-1);\n                // printf(\"%d %d %d %d\\n\", t.first.first, t.first.second, t.second.first, t.second.second);\n                ret.push_back(t.first.first >= a[2]);\n            }\n        }\n        return ret;\n    }\n};",
    "submit_ts": "1716650082",
    "subm_id": "534769446"
}