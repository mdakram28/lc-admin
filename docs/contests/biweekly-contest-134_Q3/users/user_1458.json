{
    "username": "doantrunghuy",
    "submission": "using ll = long long;\n\nconst ll MOD = 1e9 + 7;\nconst ll BASE = 3;\nconst ll MN = 3e5;\nll h[MN];\nll p[MN];\n\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        const int n = colors.size();\n        vector<int> ex_cl(colors.begin(), colors.end());\n        ex_cl.insert(ex_cl.end(), colors.begin(), colors.end());\n        \n        p[0] = 1;\n        h[0] = 0;\n        \n        int flip = 0;\n        ll case1_hash = 0;\n        ll case2_hash = 0;\n        \n        for (int i = 0; i < k; ++i) {\n            case1_hash = (case1_hash*BASE + flip) % MOD;\n            case2_hash = (case1_hash*BASE + !flip) % MOD;\n            flip = !flip;\n        }\n        \n        for (int i = 1; i <= 2*n; ++i) {\n            h[i] = (h[i - 1]*BASE + ex_cl[i - 1]) % MOD;\n            p[i] = (p[i - 1]*BASE) % MOD;\n        }\n        \n        auto get_hash = [](int i, int j) {\n            i++;\n            j++;\n            return (h[j] - (h[i - 1]*p[j - i + 1])%MOD + MOD*MOD) % MOD;\n        };\n        \n        int count = 0;\n        \n        for (int j = 0; j < n; ++j) {\n            if (get_hash(j, j + k - 1) == case1_hash or get_hash(j, j + k - 1) == case2_hash) {\n                ++count;\n            }\n        }\n        \n        return count;\n    }\n};\n",
    "submit_ts": "1720278207",
    "subm_id": "1311699141"
}