{
    "username": "Himanshu845",
    "submission": "class Solution {\npublic:\n    \n    \n    pair<int, int> bfs(const vector<vector<int>>& adj,int start) {\n        \n        int m = adj.size();\n        vector<int> distance(m, -1);\n        queue<int> q;\n       \n        distance[start] = 0;\n         q.push(start);\n        int doorKiNode = start;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int padosi : adj[node]) {\n                if (distance[padosi] == -1) {\n                    distance[padosi] = distance[node] + 1;\n                    q.push(padosi);\n                    if (distance[padosi] > distance[doorKiNode]) {\n                        doorKiNode = padosi;\n                    }\n                }\n            }\n        }\n        \n        return {doorKiNode, distance[doorKiNode]};\n    }\n\n    int tr_diameter(const vector<vector<int>>& adj) {\n        \n        \n        pair<int, int> onebfsResult = bfs(adj,0);\n        \n        int node =  onebfsResult.first;\n        \n        pair<int, int> twobfsResult = bfs(adj,node);\n        \n        int d = twobfsResult.second;\n        \n        return d;\n        \n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        \n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        \n        vector<vector<int>> adj2(m);\n        vector<vector<int>> adj1(n);\n        \n\n        for (auto edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n         for (auto edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        \n        int Dia2 = tr_diameter(adj2);\n        int Dia1 = tr_diameter(adj1);\n\n       \n        int r2 = (1 + Dia2 ) / 2;\n        int r1 = (1 + Dia1 ) / 2;\n\n        return max(Dia2,max(Dia1,1+r2+r1));\n        //return max({Dia2, Dia1, 1 + r2 + r1});\n    }\n};\n",
    "submit_ts": "1719718410",
    "subm_id": "1304416512"
}