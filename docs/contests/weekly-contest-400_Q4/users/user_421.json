{
    "username": "coder_12346",
    "submission": "\nclass SegmentTree {\npublic:\n \n       int n = 0;\n    \n      vector<int> tree;\n       \n   \n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        n++;\n        n--;\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    \n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        int s1 =  start;\n        int e1 = end;\n        int n1 =  node;\n        if (s1 == e1) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            int val = tree[2 * node + 1] & tree[2 * node + 2];\n            tree[n1]  = val;\n                        }\n    }\n\n  \n    int query(int l, int r)\n    {\n        int ret = query(0, 0, n - 1, l, r);\n        return ret;\n    }\n\n    \n    int query(int node, int start, int end, int l, int r)\n    {\n         int s1 =  start;\n        int e1 = end;\n        int l1 =  l;\n        int r1 =  r;\n        if (r1 < s1 || e1 < l1) {\n            return 2147483647;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        // bitwise AND operation result\n        int ret = p1 & p2;\n        return ret;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& arr, int k) {\n         int ans = 2147483647;\n         int n = arr.size();\n        SegmentTree st(arr);\n    for (int i = 0; i < n; i++) {\n        int l = i - 1;\n        int r = n - 1;\n        int mid = 0;\n\n        // binary search implementation\n        while (r - l > 1) {\n            int val =  (l+r)/2;\n            mid = val;\n            if (st.query(i, mid) >= k){\n                l = mid;\n        }else{\n                r = mid;\n        }\n        }\n        if (l != i - 1){\n            int val1 = min(ans, abs(st.query(i, l) - k));\n            ans = val1;\n        }\n        int val2 = min(ans, abs(k - st.query(i, r)));\n        ans =val2;\n    }\n        int ret = ans;\n        ans++;\n        ans--;\n        ret++;\n        ret--;\n    return ret;\n    }\n};",
    "submit_ts": 1717298692.0
}