{
    "username": "YashMarode28",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int ans = 0;\n        \n        ans += calculateSubGridFlips(grid, n, m);\n        \n        int possible = 0;\n        int count = 0;\n        \n        if (n % 2 != 0) {\n            possible += handleMiddleRow(grid, n, m, ans, count);\n        }\n        \n        if (m % 2 != 0) {\n            possible += handleMiddleColumn(grid, n, m, ans, count);\n        }\n        \n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            ans += 1;\n        }\n        \n        if (possible == 0 && count % 2 != 0) {\n            ans += 2;\n        }\n        \n        return ans;\n    }\n\nprivate:\n    int calculateSubGridFlips(const vector<vector<int>>& grid, int n, int m) {\n        int flips = 0;\n        \n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                vector<int> elements = {\n                    grid[i][j],\n                    grid[n - i - 1][j],\n                    grid[i][m - j - 1],\n                    grid[n - i - 1][m - j - 1]\n                };\n                \n                int ones = accumulate(elements.begin(), elements.end(), 0);\n                \n                flips += min(ones, 4 - ones);\n            }\n        }\n        \n        return flips;\n    }\n\n    int handleMiddleRow(const vector<vector<int>>& grid, int n, int m, int& ans, int& count) {\n        int possible = 0;\n        int mid = n / 2;\n        for (int j = 0; j < m / 2; ++j) {\n            if (grid[mid][j] != grid[mid][m - j - 1]) {\n                ans += 1;\n                possible += 1;\n            } else {\n                if (grid[mid][j] == 1) {\n                    count += 1;\n                }\n            }\n        }\n        return possible;\n    }\n\n    int handleMiddleColumn(const vector<vector<int>>& grid, int n, int m, int& ans, int& count) {\n        int possible = 0;\n        int mid = m / 2;\n        for (int i = 0; i < n / 2; ++i) {\n            if (grid[i][mid] != grid[n - i - 1][mid]) {\n                ans += 1;\n                possible += 1;\n            } else {\n                if (grid[i][mid] == 1) {\n                    count += 1;\n                }\n            }\n        }\n        return possible;\n    }\n};\n",
    "submit_ts": "1722700040",
    "subm_id": "1343229870"
}