{
    "username": "A_S_",
    "submission": "\n#define LAST1 INT_MAX\nclass Seghelper\n{\npublic:\n    vector<int> tree;\n    int n;\n\n    Seghelper(vector<int> &arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n\n    void build(vector<int> &arr, int node, int start,\n               int end)\n    {\n        if (start == end)\n        {\n            tree[node] = arr[start];\n        }\n        else\n        {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l)\n        {\n            return LAST1;\n        }\n        if (l <= start && end <= r)\n        {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n        return p1 & p2;\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int ans = INT_MAX, n = (int)nums.size();\n        Seghelper st(nums);\n        for (int i = 0; i < n; i++)\n        {\n            int low = i - 1, right = n - 1, mid;\n\n            while (right - low > 1)\n            {\n                mid = (low + right) / 2;\n                if (st.query(i, mid) >= k)\n                    low = mid;\n                else\n                    right = mid;\n            }\n            if (low != i - 1)\n                ans = min(ans, abs(st.query(i, low) - k));\n            ans = min(ans, abs(k - st.query(i, right)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297808",
    "subm_id": "1274756656"
}