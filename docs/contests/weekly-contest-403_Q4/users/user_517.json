{
    "username": "shchen527",
    "submission": "class Solution {\npublic:\n    int f(vector<vector<int>>& grid, \n            vector<vector<int>>& rDn, vector<vector<int>>& rUp,\n            vector<vector<int>>& cRight,vector<vector<int>>& cLeft,\n            int r0, int r1, int c0, int c1) \n    {\n        if (r0 > r1 || c0 > c1)\n            return 0;\n\n        int R = grid.size(), C = grid[0].size();\n\n        int left = C, right = -1, up = R, down = -1;\n\n        for (int r = r0; r <= r1; ++r) {\n            left = min(left, cLeft[r][c0]);\n            right = max(right, cRight[r][c1]);\n        }\n\n        for (int c = c0; c <= c1; ++c) {\n            up = min(up, rUp[r0][c]);\n            down = max(down, rDn[r1][c]);\n        }\n\n        if (left > right || up > down)\n            return 0;\n\n        return (right - left + 1) * (down - up + 1);\n        \n        // for (int r = r0; r <= r1; ++r) {\n        //     for (int c = c0; c <= c1; ++c) {\n        //         if (grid[r][c] == 1) {\n        //             left = min(left, c);\n        //             right = max(right, c);\n        //             up = min(up, r);\n        //             down = max(down, r);\n        //         }\n        //     }\n        // }\n\n    }\n\n    int fvertical(vector<vector<int>>& grid, \n            vector<vector<int>>& rDn, vector<vector<int>>& rUp,\n            vector<vector<int>>& cRight,vector<vector<int>>& cLeft,\n            int r0, int r1, int c0, int c1)\n    {\n        int ans = 10000;\n        for (int c = c0; c < c1; ++c) {\n            int a = f(grid, rDn, rUp, cRight, cLeft, r0, r1, c0, c);\n            int b = f(grid, rDn, rUp, cRight, cLeft, r0, r1, c + 1, c1);\n            ans = min(ans, a + b);\n        }\n\n        return ans;\n    }\n\n    int fhorizontal(vector<vector<int>>& grid, \n            vector<vector<int>>& rDn, vector<vector<int>>& rUp,\n            vector<vector<int>>& cRight,vector<vector<int>>& cLeft,\n            int r0, int r1, int c0, int c1)\n    {\n        int ans = 10000;\n        for (int r = r0; r < r1; ++r) {\n            int a = f(grid, rDn, rUp, cRight, cLeft, r0, r, c0, c1);\n            int b = f(grid, rDn, rUp, cRight, cLeft, r + 1, r1, c0, c1);\n            ans = min(ans, a + b);\n        }\n\n        return ans;\n    }\n\n    int minimumSum(vector<vector<int>>& grid) {\n        int R = grid.size(), C = grid[0].size();\n\n        vector<vector<int>> rDn(R, vector<int>(C, -1));\n        vector<vector<int>> rUp(R, vector<int>(C, R));\n\n        vector<vector<int>> cRight(R, vector<int>(C, -1));\n        vector<vector<int>> cLeft(R, vector<int>(C, C));\n\n        for (int r = 0; r < R; ++r) {\n            for (int c = 0; c < C; ++c) {\n                if (c > 0)\n                    cRight[r][c] = cRight[r][c - 1];\n                if (grid[r][c] == 1) \n                    cRight[r][c] = c;\n                \n                int cc = C - 1 - c;\n                if (cc < C - 1)\n                    cLeft[r][cc] = cLeft[r][cc + 1];\n                if (grid[r][cc] == 1)\n                    cLeft[r][cc] = cc;\n            }\n        }\n\n        for (int c = 0; c < C; ++c) {\n            for (int r = 0; r < R; ++r) {\n                if (r > 0)\n                    rDn[r][c] = rDn[r - 1][c];\n                if (grid[r][c] == 1)\n                    rDn[r][c] = r;\n                \n                int rr = R - 1 - r;\n                if (rr < R - 1)\n                    rUp[rr][c] = rUp[rr + 1][c];\n                if (grid[rr][c] == 1) \n                    rUp[rr][c] = rr;\n            }\n        }\n\n        int ans = 10000;\n        for (int r = 0; r < R; ++r) {\n            int a = f(grid, rDn, rUp, cRight, cLeft, 0, r, 0, C - 1);\n            int b = fvertical(grid, rDn, rUp, cRight, cLeft, r + 1, R - 1, 0, C - 1);\n            int c = fhorizontal(grid, rDn, rUp, cRight, cLeft, r + 1, R - 1, 0, C - 1);\n            int d = min(b, c);\n            ans = min(ans, a + d);\n        }\n\n        for (int r = R - 1; r > 0; --r) {\n            int a = f(grid, rDn, rUp, cRight, cLeft, r, R - 1, 0, C - 1);\n            int b = fvertical(grid, rDn, rUp, cRight, cLeft, 0, r - 1, 0, C - 1);\n            int c = fhorizontal(grid, rDn, rUp, cRight, cLeft, 0, r, 0, C - 1);\n            int d = min(b, c);\n            ans = min(ans, a + d);\n        }\n\n        for (int c = 0; c < C; ++c) {\n            int a = f(grid, rDn, rUp, cRight, cLeft, 0, R - 1, 0, c);\n            int b = fvertical(grid, rDn, rUp, cRight, cLeft, 0, R - 1, c + 1, C - 1);\n            int cc = fhorizontal(grid, rDn, rUp, cRight, cLeft, 0, R - 1, c + 1, C - 1);\n            int d = min(b, cc);\n\n            ans = min(ans, a + d);\n        }\n\n        for (int c = C - 1; c > 0; --c) {\n            int a = f(grid, rDn, rUp, cRight, cLeft, 0, R - 1, c, C - 1);\n            int b = fvertical(grid, rDn, rUp, cRight, cLeft, 0, R - 1, 0, c - 1);\n            int cc = fhorizontal(grid, rDn, rUp, cRight, cLeft, 0, R - 1, 0, c - 1);\n            int d = min(b, cc);\n\n            ans = min(ans, a + d);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1719114558.0
}