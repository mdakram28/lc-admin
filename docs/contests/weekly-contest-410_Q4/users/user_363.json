{
    "username": "jachetheboss",
    "submission": "class Solution {\npublic:\n    void updatePrefix(vector<vector<long long>>& prefix, vector<vector<long long>>& DP, int i){\n        // update column j\n        int MOD = 1000000007;\n        prefix[i][0] = DP[i][0];\n        for(int j = 1; j < DP[i].size(); ++j){\n            prefix[i][j] = prefix[i][j - 1] + DP[i][j];\n            prefix[i][j] %= MOD;\n        }\n    }\n    int countOfPairs(vector<int>& nums) {\n        // the follow-up problem with larger constraints is probably a DP + internal prefix array problem? kind of like O(n^2)\n        // # of knight moves rather than O(n^3) number of knight moves on a phone pad (Mark Rosen GS interview DP)\n        \n        int mx = 0;\n        for(int x : nums) mx = max(mx, x);\n        \n        vector<vector<long long>> DP (nums.size(), vector<long long> (mx + 1, 0)); // DP[i][j] is the number of good pairs so far such that arr1[i] == j\n        vector<vector<long long>> prefix = DP;\n        for(int x = 0; x <= nums[0]; ++x) DP[0][x] = 1;\n        updatePrefix(prefix, DP, 0);\n        \n        int MOD = 1000000007;\n        for(int i = 1; i < DP.size(); ++i){\n            for(int j = 0; j <= nums[i]; ++j){\n                int num1 = j;\n                int num2 = nums[i] - num1;\n                \n                // prev1 MUST BE <= num1\n                // prev2 MUST BE >= num2\n                \n                int prev_bound_a = num1;\n                int prev_bound_b = nums[i - 1] - num2;\n                int bound = min(prev_bound_a, prev_bound_b);\n                \n                // cout << \"bound: \" << bound << endl;\n                \n                if(bound >= 0){\n                    long long cumul = prefix[i - 1][bound];\n                    cumul %= MOD;\n                    DP[i][j] = cumul;\n                }\n            }\n            updatePrefix(prefix, DP, i);\n        }\n        \n//         cout << \"DP: \" << endl;\n//         for(vector<long long>& v : DP){\n//             for(long long x : v) cout << x << ' ';\n//             cout << endl;\n//         }\n        \n        long long ans = 0;\n        for(long long incr : DP.back()){\n            ans += incr;\n            ans %= MOD;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723346990",
    "subm_id": "1351589581"
}