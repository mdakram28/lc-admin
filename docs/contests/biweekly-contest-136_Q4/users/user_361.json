{
    "username": "harsh_reality_",
    "submission": "class Solution:\n    def depth1(self, i, prev):\n        maxi = 0\n        for j in self.graph[i]:\n            if j != prev:\n                self.depth1(j, i)\n                maxi = max(maxi, self.memo1[j] + (1 if j & 1 else 2))\n        self.memo1[i] = maxi\n        \n    def depth2(self, i, prev):\n        m1 = m2 = 0\n        for j in self.graph[i]:\n            if j != prev:\n                if self.memo1[j] + (1 if j & 1 else 2) >= m1:\n                    m2 = m1\n                    m1 = self.memo1[j] + (1 if j & 1 else 2)\n                elif self.memo1[j] + (1 if j & 1 else 2) > m2:\n                    m2 = self.memo1[j] + (1 if j & 1 else 2)\n\n        for j in self.graph[i]:\n            if j != prev:\n                out = max(self.memo2[i], m2 if self.memo1[j] + (1 if j & 1 else 2) == m1 else m1)\n                self.memo2[j] = max(out + (2 if i % 2 == 0 else 1), self.memo2[i])\n                self.depth2(j, i)\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        \n        self.graph = defaultdict(list)\n        for u, v in edges:\n            self.graph[u].append(v)\n            self.graph[v].append(u)\n\n        self.memo1 = [0] * n\n        self.memo2 = [0] * n\n\n\n        self.depth1(0, -1)\n        self.depth2(0, -1)\n\n        return [max(self.memo1[i], self.memo2[i]) for i in range(n)]",
    "submit_ts": "1722698466",
    "subm_id": "1343181493"
}