{
    "username": "bot-rahul-demon",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int maximumLength(int[] numbersArray, int maxAllowedChanges) {\n        int arrayLength = numbersArray.length;\n        int[][] lengthDPTable = initializeLengthDPTable(arrayLength, maxAllowedChanges);\n        int overallMaxLength = 1;\n        int[] maxLengthsForChanges = new int[maxAllowedChanges + 1];\n        Arrays.fill(maxLengthsForChanges, -1);\n        Map<Integer, Integer>[] valueToLengthMap = initializeValueToLengthMap(maxAllowedChanges);\n\n        for (int currentIndex = 0; currentIndex < arrayLength; currentIndex++) {\n            overallMaxLength = calculateMaxLength(numbersArray, maxAllowedChanges, lengthDPTable, overallMaxLength, maxLengthsForChanges, valueToLengthMap, currentIndex);\n        }\n\n        return overallMaxLength;\n    }\n\n    private int[][] initializeLengthDPTable(int length, int changes) {\n        int[][] dpTable = new int[length][changes + 1];\n        for (int i = 0; i < length; i++) {\n            Arrays.fill(dpTable[i], 1);\n        }\n        return dpTable;\n    }\n\n    private Map<Integer, Integer>[] initializeValueToLengthMap(int changes) {\n        Map<Integer, Integer>[] valueLengthMap = new HashMap[changes + 1];\n        for (int i = 0; i < changes + 1; i++) {\n            valueLengthMap[i] = new HashMap<>();\n        }\n        return valueLengthMap;\n    }\n\n    private int calculateMaxLength(int[] numbersArray, int maxChanges, int[][] lengthDPTable, int overallMaxLength, int[] maxLengthsForChanges, Map<Integer, Integer>[] valueToLengthMap, int currentIndex) {\n        for (int changesCount = 0; changesCount <= maxChanges; changesCount++) {\n            for (int previousChanges = 0; previousChanges < changesCount; previousChanges++) {\n                lengthDPTable[currentIndex][changesCount] = Math.max(lengthDPTable[currentIndex][changesCount], 1 + maxLengthsForChanges[previousChanges]);\n            }\n\n            if (valueToLengthMap[changesCount].containsKey(numbersArray[currentIndex])) {\n                lengthDPTable[currentIndex][changesCount] = Math.max(lengthDPTable[currentIndex][changesCount], 1 + valueToLengthMap[changesCount].get(numbersArray[currentIndex]));\n            }\n\n            overallMaxLength = Math.max(overallMaxLength, lengthDPTable[currentIndex][changesCount]);\n        }\n\n        updateMaps(numbersArray, lengthDPTable, maxLengthsForChanges, valueToLengthMap, currentIndex, maxChanges);\n\n        return overallMaxLength;\n    }\n\n    private void updateMaps(int[] numbersArray, int[][] lengthDPTable, int[] maxLengthsForChanges, Map<Integer, Integer>[] valueToLengthMap, int currentIndex, int maxChanges) {\n        for (int changesCount = 0; changesCount <= maxChanges; changesCount++) {\n            maxLengthsForChanges[changesCount] = Math.max(maxLengthsForChanges[changesCount], lengthDPTable[currentIndex][changesCount]);\n            valueToLengthMap[changesCount].put(numbersArray[currentIndex], Math.max(valueToLengthMap[changesCount].getOrDefault(numbersArray[currentIndex], 0), lengthDPTable[currentIndex][changesCount]));\n        }\n    }\n}\n",
    "submit_ts": 1717862173.0
}