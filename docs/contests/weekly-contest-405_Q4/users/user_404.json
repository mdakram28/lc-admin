{
    "username": "Halogen98",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> indices;\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->indices.push_back(index);\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int s = target.length();\n    vector<int> dp(s + 1, INT_MAX);\n    dp[0] = 0;\n\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], i);\n    }\n\n    for (int i = 0; i < s; ++i) {\n        if (dp[i] == INT_MAX) continue;\n\n        TrieNode* node = trie.getRoot();\n        for (int j = i; j < s; ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            for (int index : node->indices) {\n                int wl = words[index].length();\n                if (j - i + 1 == wl) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + costs[index]);\n                }\n            }\n        }\n    }\n    return dp[s] == INT_MAX ? -1 : dp[s];\n    }\n};",
    "submit_ts": "1720321243",
    "subm_id": "1312317499"
}