{
    "username": "Swapnil_Soni17",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <algorithm>\n#include <unordered_map>\n\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndices;\n};\n\nclass Solution {\nprivate:\n    TrieNode* root;\n\n    void insertWord(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c]) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.push_back(index);\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        root = new TrieNode();\n        \n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(words[i], i);\n        }\n\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j]]) break;\n                node = node->children[target[j]];\n                for (int wordIndex : node->wordIndices) {\n                    if (dp[i] + costs[wordIndex] < dp[j + 1]) {\n                        dp[j + 1] = dp[i] + costs[wordIndex];\n                    }\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : static_cast<int>(dp[n]);\n    }\n};",
    "submit_ts": "1720323061",
    "subm_id": "1312366336"
}