{
    "username": "Consistent_Contest",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& array, int target) {\n        int arraySize = array.size(); // Get the size of the input array\n        long long count = 0; // Initialize the count of subarrays to zero\n        \n        // This map will store the AND results of subarrays and their frequencies\n        unordered_map<long long, long long> previousResults;\n        \n        for (int idx = 0; idx < arraySize; ++idx) {\n            // Map to keep track of current subarray results\n            unordered_map<long long, long long> currentResults; \n            \n            // Check if the current element is equal to the target\n            if (array[idx] == target) {\n                ++count; // Increment the count if it matches the target\n            }\n            \n            // Initialize the current result with the current array element\n            currentResults[array[idx]] = 1;\n            \n            // Iterate through the previous results to compute new results\n            for (auto& [andValue, freq] : previousResults) {\n                long long newAndResult = andValue & array[idx]; // Compute the AND result\n                \n                // If the new AND result matches the target, add to count\n                if (newAndResult == target) {\n                    count += freq;\n                }\n                \n                // Update the frequency of the new AND result\n                currentResults[newAndResult] += freq;\n            }\n            \n            // Update previous results to the current results\n            previousResults = currentResults;\n        }\n        \n        // Return the total count of subarrays matching the target\n        return count>-19?count:0;\n    }\n};\n",
    "submit_ts": "1720280951",
    "subm_id": "1311807835"
}