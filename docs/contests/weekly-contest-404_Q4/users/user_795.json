{
    "username": "Stark-123",
    "submission": "class Solution {\n    private:\n   pair<int, int> bfs(const vector<vector<int>>& adj, int start) {\n    int n = adj.size();\n    vector<int> dist(n, -1);\n    queue<int> q;\n    q.push(start);\n    dist[start] = 0;\n\n    int farthestNode = start;\n    int maxDist = 0;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        \n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                \n                if (dist[neighbor] > maxDist) {\n                    maxDist = dist[neighbor];\n                    farthestNode = neighbor;\n                }\n            }\n        }\n    }\n\n    return {farthestNode, maxDist};\n}\n\n// Function to calculate the diameter and radius of the tree\npair<int, int> getTreeDiameterAndRadius(const vector<vector<int>>& adj) {\n    pair<int, int> p1 = bfs(adj, 0);\n    pair<int, int> p2 = bfs(adj, p1.first);\n    int diameter = p2.second;\n    int radius = (diameter + 1) / 2;\n    return {diameter, radius};\n}\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n         int n = edges1.size() + 1;\n    int m = edges2.size() + 1;\n\n    vector<vector<int>> adj1(n);\n    vector<vector<int>> adj2(m);\n\n    for (const auto& edge : edges1) {\n        adj1[edge[0]].push_back(edge[1]);\n        adj1[edge[1]].push_back(edge[0]);\n    }\n\n    for (const auto& edge : edges2) {\n        adj2[edge[0]].push_back(edge[1]);\n        adj2[edge[1]].push_back(edge[0]);\n    }\n\n    pair<int, int> tree1 = getTreeDiameterAndRadius(adj1);\n    pair<int, int> tree2 = getTreeDiameterAndRadius(adj2);\n\n    int diameter1 = tree1.first;\n    int radius1 = tree1.second;\n    int diameter2 = tree2.first;\n    int radius2 = tree2.second;\n\n    int minDiameter = max({diameter1, diameter2, radius1 + radius2 + 1});\n\n    return minDiameter;\n    }\n};",
    "submit_ts": "1719717483",
    "subm_id": "1304392734"
}