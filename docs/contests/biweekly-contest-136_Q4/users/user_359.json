{
    "username": "adgsful",
    "submission": "class Solution {\n    \n    int DFS1(vector<vector<int>>& adj,int n,int i, vector<int> &depth, vector<int> &visit){\n        visit[i]=1;\n        int maxd=0;\n        for(auto v:adj[i]){\n            if (visit[v]==0){\n                maxd=max(maxd,DFS1(adj,n,v,depth,visit)+(2-(v%2)));\n            }\n        }\n        depth[i]=maxd;\n        return maxd;\n    }   \n\n\n    void DFS2(vector<vector<int>>& adj,int n,int i, vector<int> &depth, vector<int> &ans, vector<int> &visit,int pd){\n        visit[i]=1;\n        multiset<int> d;\n        for(auto v:adj[i]){\n            if (visit[v]==0){\n                d.insert(depth[v]+(2-(v%2)));\n            }\n        }\n        for(auto v:adj[i]){\n            if (visit[v]==0){\n                d.erase(d.find(depth[v]+(2-(v%2))));\n                if (d.size()>0){\n                    DFS2(adj,n,v,depth,ans,visit,max(*prev(d.end()),pd)+(2-(i%2)));\n                }else{\n                    DFS2(adj,n,v,depth,ans,visit,pd+(2-(i%2)));\n                }\n                \n                d.insert(depth[v]+(2-(v%2)));\n            }\n        }\n        ans[i]=max(depth[i],pd);\n    }   \npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        vector<vector<int>> adj(n,vector<int>());\n        for(auto e:edges){\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n\n        vector<int> depth(n);\n        vector<int> visit(n,0);\n        DFS1(adj,n,0,depth,visit);\n\n        visit.assign(n,0);\n        vector<int> ans(n);\n        DFS2(adj,n,0,depth,ans,visit,0);\n        return ans;\n    }\n};",
    "submit_ts": "1722700616",
    "subm_id": "1343247318"
}