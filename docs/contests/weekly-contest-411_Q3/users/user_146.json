{
    "username": "Nishith G. Behera",
    "submission": "#define mop(a, op, b, mod) (((a % mod) op (b % mod)) % mod)\nvector<int> p10;\nclass Solution {\npublic:\n    int n, k;\n    vector<vector<int>> dp;\n    int getCurMod(int i, int j, int md) {\n        int curMod = mop(j, *, p10[i], k);\n        if(i != n-i-1) curMod = mop(curMod, +, mop(j, *, p10[n-i-1], k), k);\n        curMod = mop(curMod, +, md, k);\n        return curMod;\n    }\n    bool solve(int i, int md) {\n        // check i vs n and return true if md is 0\n        if(i >= ((n + 1) / 2 )) return md == 0;\n        if(dp[i][md] != -1) return dp[i][md] != 10; // 10 indicates it is not possible\n        int lo = i == 0 ? 1 : 0;\n        for(int j = lo; j <= 9; j++) {\n            int curMod = getCurMod(i, j, md);\n            if(solve(i+1, curMod)) dp[i][md] = j;\n        }\n        if(dp[i][md] == -1) dp[i][md] = 10;\n        return dp[i][md] != 10;\n    }\n    void init() {\n        p10.clear();\n        int p = 1;\n        while(p10.size() <= n) {\n            p10.push_back(p % k);\n            p = (p * 10) % k;\n        }\n        dp.resize(n+1, vector<int>(10, -1));\n    }\n    string largestPalindrome(int N, int K) {\n        n = N, k = K;\n        init();\n        solve(0, 0);\n        int i = 0, md = 0;\n        string ans(n, ' ');\n        while(i < ((n + 1) / 2)) {\n            ans[i] = ans[n-i-1] = '0' + dp[i][md];\n            md = getCurMod(i, dp[i][md], md);\n            i++;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723950700",
    "subm_id": "1359752745"
}