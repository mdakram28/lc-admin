{
    "username": "stevenhgs2",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        n_r, n_c = len(board), len(board[0])\n\n        best_threes = []\n        for row in board:\n            pq = []\n            for i, val in enumerate(row):\n                if len(pq) < 3:\n                    heapq.heappush(pq, (val, i))\n                else:\n                    heapq.heappush(pq, (val, i))\n                    heapq.heappop(pq)\n            best_three = []\n            while pq:\n                best_three.append(heapq.heappop(pq))\n            best_threes.append(best_three)\n        \n        @cache\n        def dfs(i, rem, used_cols):\n            if i == n_r:\n                return -inf\n            output = dfs(i + 1, rem, used_cols)\n            if rem == 1:\n                for c_i in range(3):\n                    val, index = best_threes[i][c_i]\n                    if index not in used_cols:\n                        output = max(output, val)\n            else:\n                for c_i in range(3):\n                    val, index = best_threes[i][c_i]\n                    if index not in used_cols:\n                        if used_cols:\n                            if used_cols[0] < index:\n                                new_used_cols = used_cols + (index, )\n                            else:\n                                new_used_cols = (index, ) + used_cols\n                        else:\n                            new_used_cols = (index, ) \n                        output = max(output, dfs(i + 1, rem - 1, new_used_cols) + val)\n            \n            return output\n\n\n        return dfs(0, 3, tuple())",
    "submit_ts": "1723907212",
    "subm_id": "1359096101"
}