{
    "username": "strombreaker",
    "submission": "class Solution {\n    static class TrieNode {\n        Map<Character, TrieNode> links = new HashMap<>();\n        int c = Integer.MAX_VALUE; \n    }\n\n    private TrieNode buildTrie(String[] wd, int[] ct) {\n        TrieNode root = new TrieNode();\n        for (int i = 0; i < wd.length; i++) {\n            TrieNode node = root;\n            for (char c : wd[i].toCharArray()) {\n                node = node.links.computeIfAbsent(c, k -> new TrieNode());\n            }\n            node.c = Math.min(node.c, ct[i]); \n        }\n        return root;\n    }\n\n    public int minimumCost(String tar, String[] wd, int[] ct) {\n        int n = tar.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; \n\n        TrieNode root = buildTrie(wd, ct);\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                node = node.links.get(tar.charAt(j));\n                if (node == null) break;\n                if (node.c != Integer.MAX_VALUE) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + node.c);\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720321913",
    "subm_id": "1312335644"
}