{
    "username": "niteshkhanna00",
    "submission": "#include <string>\n#include <vector>\n#include <queue>\n#include <unordered_map>\n#include <climits>\n#include <iostream>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    unordered_map<int, int> costs; \n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->costs[index] = cost;\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n        \n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.find(c) == node->children.end()) break;\n                node = node->children[c];\n                for (auto& [index, cost] : node->costs) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n\n",
    "submit_ts": "1720322899",
    "subm_id": "1312362059"
}