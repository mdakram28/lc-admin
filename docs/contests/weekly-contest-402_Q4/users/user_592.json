{
    "username": "shinever",
    "submission": "class SegTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (2 * n)\n        \n    def build(self, arr):\n        for i in range(self.n):\n            self.tree[self.n + i] = arr[i]\n        for i in range(self.n - 1, 0, -1):\n            self.tree[i] = self.tree[i << 1] + self.tree[i << 1 | 1]\n\n    def update(self, p, value):\n        self.tree[p + self.n] = value\n        p = p + self.n\n        i = p\n        while i > 1:\n            self.tree[i >> 1] = self.tree[i] + self.tree[i ^ 1]\n            i >>= 1\n\n    def query(self, l, r):\n        res = 0\n        l += self.n\n        r += self.n\n        while l < r:\n            if (l & 1):\n                res += self.tree[l]\n                l += 1\n            if (r & 1):\n                r -= 1\n                res += self.tree[r]\n            l >>= 1\n            r >>= 1\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        st = SegTree(n)\n        peaks = [0] * n\n        \n        def update_peak(i):\n            nonlocal peaks\n            if i == 0 or i == n-1:\n                peaks[i] = 0\n                return\n            if nums[i-1] < nums[i] and nums[i] > nums[i+1]:\n                peaks[i] = 1\n            else:\n                peaks[i] = 0\n        \n        for i in range(n):\n            update_peak(i)\n\n        st.build(peaks)\n        ans = []\n        for qtype, a, b in queries:\n            if qtype == 1:\n                l, r = a, b\n                l += 1\n                r -= 1\n                if l > r:\n                    ans.append(0)\n                else:\n                    val = st.query(l, r + 1)\n                    ans.append(val)\n            else:\n                idx, val = a, b\n                nums[idx] = val\n                lo = max(0, idx - 1)\n                hi = min(n-1, idx + 1)\n                for i in range(lo, hi + 1):\n                    update_peak(i)\n                for i in range(lo, hi + 1):\n                    st.update(i, peaks[i])\n            # print(peaks)\n        return ans\n        ",
    "submit_ts": 1718507700.0
}