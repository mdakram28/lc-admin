{
    "username": "S2703Garg",
    "submission": "struct Node {\n    Node* links[26];\n    bool flag = false;\n    int cost = -1;\n    bool containsKey(char ch){\n        return (links[ch-'a'] != NULL);\n    }\n    void put(char ch, Node* node){\n        links[ch-'a'] = node;\n    }\n    Node* get(char ch){\n        return links[ch-'a'];\n    }\n    void setEnd(){\n        flag = true;\n    }\n    bool isEnd(){\n        return flag;\n    }\n};\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n    void insert(string word, int cst){\n        Node* node = root;\n        for(int i=0;i<word.size();i++){\n            if(!node->containsKey(word[i])){\n                node->put(word[i], new Node());\n            }\n            node = node->get(word[i]);\n        }\n        if(node->cost != -1) node->cost = min(node->cost,cst);\n        else node->cost = cst;\n        node->setEnd();\n    }\n    int search(string word){\n        Node* node = root;\n        for(int i=0;i<word.size();i++){\n            if(!node->containsKey(word[i])) return -1;\n            node = node->get(word[i]);\n        }\n        return node->cost;\n    }\n};\nclass Solution {\npublic:\n    Trie trie; \n    int func(int ind, string &s, vector<int> &dp){\n        if(ind == s.size()) return 0;\n        if(dp[ind] != -1) return dp[ind];\n        string temp;\n        int ans = 1e9;\n        int isPresent;\n        for(int i=ind;i<s.size();i++){\n            temp += s[i];\n            isPresent = trie.search(temp);\n            if(isPresent != -1){\n                ans = min(ans,isPresent + func(i+1,s,dp));\n            }\n        }\n        return dp[ind] = ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        for(int i=0;i<words.size();i++){\n            trie.insert(words[i],costs[i]);\n        }\n        // vector<int> dp(target.size(),-1);\n        // int ans = func(0,target,dp);\n        // if(ans >= 1e9) return -1;\n        // return ans;\n        int n = target.size();\n        vector<int> dp(n+1,1e9);\n        dp[0] = 0;\n\n        for(int i=0;i<n;i++){\n            if(dp[i] == 1e9) continue;\n\n            string temp;\n            Node* node = trie.root;\n            for(int j=i;j<n;j++){\n                temp += target[j];\n                if(!node->containsKey(target[j])) break;\n                node = node->get(target[j]);\n                if(node->isEnd()){\n                    dp[j+1] = min(dp[j+1],dp[i] + node->cost);\n                }\n            }\n        }\n        return dp[n] == 1e9?-1:dp[n];\n    }\n};",
    "submit_ts": "1720321547",
    "subm_id": "1312325781"
}