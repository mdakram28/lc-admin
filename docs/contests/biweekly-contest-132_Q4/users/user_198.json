{
    "username": "hccyril",
    "submission": "public class Solution {\n    public int MaximumLength(int[] nums, int k)\n    {\n        int n = nums.Length;\n        Dictionary<int, int> hs = new();\n        foreach (int x in nums)\n        {\n            if (!hs.ContainsKey(x))\n                hs[x] = hs.Count;\n        }\n        for (int i = 0; i < n; ++i)\n            nums[i] = hs[nums[i]];\n        int[,] dp = new int[hs.Count, k + 1];\n        (int first, int d, int second)[] mx = new (int first, int c, int second)[k + 1];\n        Array.Fill(mx, (-1, -1, -1));\n        void UpdateMax(int c, int d, int val)\n        {\n            (int first, int d0, int second) = mx[c];\n            if (val > first)\n            {\n                if (d == d0)\n                    mx[c] = (val, d, second);\n                else\n                    mx[c] = (val, d, first);\n            }\n            else if (d != d0 && val > second)\n            {\n                mx[c] = (first, d0, val);\n            }\n        }\n        int GetMax(int c, int d) // max: k == c and x != d\n        {\n            (int first, int d0, int second) = mx[c];\n            return d != d0 ? first : second;\n        }\n        foreach (int d in nums)\n        {\n            for (int c = 0; c <= k; ++c)\n            {\n                // same d\n                if (c == 0 || dp[d, c] > 0)\n                    ++dp[d, c];\n                // diff d\n                if (c > 0)\n                {\n                    int m = GetMax(c - 1, d);\n                    if (m > 0 && m + 1 > dp[d, c])\n                        dp[d, c] = m + 1;\n                }\n                if (dp[d, c] > 0)\n                    UpdateMax(c, d, dp[d, c]);\n            }\n        }\n        return Enumerable.Range(0, k + 1).Select(c => mx[c].first).Max();\n    }\n}",
    "submit_ts": 1717860858.0
}