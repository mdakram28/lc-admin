{
    "username": "vibrant-6angulyta3",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\nnamespace atcoder {\n\tint ceil_pow2(int n) {\n\t\tint x = 0;\n\t\twhile ((1U << x) < (unsigned int)(n)) x++;\n\t\treturn x;\n\t}\n\ttemplate <class S, S(*op)(S, S), S(*e)()> struct segtree {\n\tpublic:\n\t\tsegtree() : segtree(0) {}\n\t\texplicit segtree(int n) : segtree(std::vector<S>(n, e())) {}\n\t\texplicit segtree(const std::vector<S>& v) : _n(int(v.size())) {\n\t\t\tlog = ceil_pow2(_n);\n\t\t\tsize = 1 << log;\n\t\t\td = std::vector<S>(2 * size, e());\n\t\t\tfor (int i = 0; i < _n; i++) d[size + i] = v[i];\n\t\t\tfor (int i = size - 1; i >= 1; i--) {\n\t\t\t\tupdate(i);\n\t\t\t}\n\t\t}\n\t\t\n\t\tvoid set(int p, S x) {\n\t\t\tassert(0 <= p && p < _n);\n\t\t\tp += size;\n\t\t\td[p] = x;\n\t\t\tfor (int i = 1; i <= log; i++) update(p >> i);\n\t\t}\n\t\t\n\t\tS get(int p) const {\n\t\t\tassert(0 <= p && p < _n);\n\t\t\treturn d[p + size];\n\t\t}\n\t\t\n\t\tS prod(int l, int r) const {\n\t\t\tassert(0 <= l && l <= r && r <= _n);\n\t\t\tS sml = e(), smr = e();\n\t\t\tl += size;\n\t\t\tr += size;\n\t\t\t\n\t\t\twhile (l < r) {\n\t\t\t\tif (l & 1) sml = op(sml, d[l++]);\n\t\t\t\tif (r & 1) smr = op(d[--r], smr);\n\t\t\t\tl >>= 1;\n\t\t\t\tr >>= 1;\n\t\t\t}\n\t\t\treturn op(sml, smr);\n\t\t}\n\t\t\n\t\tS all_prod() const { return d[1]; }\n\t\t\n\tprivate:\n\t\tint _n, size, log;\n\t\tstd::vector<S> d;\n\t\t\n\t\tvoid update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n\t};\n\t\n}  // namespace atcoder\nstruct S {\n\tint cnt = 0;\n};\nusing namespace atcoder;\nS op(S a, S b) {\n\tS s;\n    s.cnt = a.cnt + b.cnt;\n    return s;\n}\nS e() {\n\treturn {0};\n}\t\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        segtree<S, op, e> seg(n);\n        seg.set(0, {0});\n        seg.set(n - 1, {0});\n        for(int i = 1;i < n - 1;i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                seg.set(i, {1});\n            }\n        }\n        \n        int q = queries.size();\n        vector<int> ans;\n        for(int i = 0;i < q;i++) {\n            int t = queries[i][0];\n            if(t == 1) {\n                int l = queries[i][1], r = queries[i][2];\n                if(r - l + 1 <= 2) {\n                    ans.push_back(0);\n                }else {\n                    ans.push_back(seg.prod(l + 1, r).cnt);\n                }\n            }else {\n                int pos = queries[i][1], x = queries[i][2];\n                nums[pos] = x;\n                for(int i = max(0, pos - 1);i <= min(n - 1, pos + 1);i++) {\n                    if(i > 0 && i + 1 < n && nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                        seg.set(i, {1});\n                    }else {\n                        seg.set(i, {0});\n                    }\n                }\n            }                \n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718507080.0
}