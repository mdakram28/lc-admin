{
    "username": "myselfshivams",
    "submission": "class Solution {\n    func minChanges(_ nums: [Int], _ k: Int) -> Int {\n        var diffToMaxValues: [Int: [Int]] = [:]\n        var maxValues: [Int] = []\n        var i = 0\n        \n        while i < (nums.count / 2) {\n            let a = nums[i]\n            let b = nums[nums.count - i - 1]\n            let diff = abs(a - b)\n            let maxValue = max(a, b, k - a, k - b)\n            diffToMaxValues[diff, default: []].append(maxValue)\n            maxValues.append(maxValue)\n            i += 1\n        }\n        \n        var minChangesNeeded = nums.count\n        maxValues.sort()\n        \n        for (diff, values) in diffToMaxValues {\n            var totalChanges = maxValues.binarySearch(diff) * 2 + (nums.count / 2 - maxValues.binarySearch(diff))\n            \n            for maxValue in values {\n                if maxValue < diff {\n                    totalChanges -= 2\n                } else {\n                    totalChanges -= 1\n                }\n            }\n            \n            minChangesNeeded = min(minChangesNeeded, totalChanges)\n        }\n        \n        return minChangesNeeded\n    }\n}\n\nextension Array where Element: Comparable {\n    func binarySearch(_ value: Element) -> Int {\n        var low = 0\n        var high = count - 1\n        \n        while low <= high {\n            let mid = (low + high) / 2\n            if self[mid] < value {\n                low = mid + 1\n            } else {\n                high = mid - 1\n            }\n        }\n        \n        return low\n    }\n}\n",
    "submit_ts": "1721488997",
    "subm_id": "1327439605"
}