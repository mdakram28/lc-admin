{
    "username": "andyliang223",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        \n        requirements.sort()\n        big = requirements[-1][1]\n        requirements = requirements[::-1]\n        dp = [[0] * (big + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        # for i in range(n):\n        #     dp[i][0] = 1\n        mod = 10**9 + 7\n        for i in range(n + 1):\n            for j in range(0, i):\n                for k in range(big + 1):\n                    if k + i - j - 1 > big:\n                        break\n                    # print(f\"i {i} j {j} k {k} reqlen {len(requirements)} -1 is {requirements[-1]}\")\n                    if requirements and i - 1 == requirements[-1][0] and k + i - j - 1 != requirements[-1][1]:\n                        # print(f'continue')\n                        continue\n                    dp[i][k + i - j - 1] += dp[i-1][k]\n                    dp[i][k + i - j - 1] = dp[i][k + i - j - 1] % mod\n            if requirements and i - 1 == requirements[-1][0]:\n                requirements.pop(-1)\n        # print(dp)\n        \n        \n        for a, b in requirements:\n            if dp[a][b] == 0:\n                return 0\n        \n        return dp[n][big]",
    "submit_ts": "1719071387",
    "subm_id": "1296845578"
}