{
    "username": "zechri",
    "submission": "class Graph{\npublic:\n    vector<vector<int>> adj, dist;\n    int n;\n    Graph(vector<vector<int>>&e){\n        n = e.size()+1;\n        adj.resize(n+2);\n        dist.assign(2, vector<int>(n+2));\n\n        for(auto &v: e){\n            adj[v[0]].push_back(v[1]);\n            adj[v[1]].push_back(v[0]);\n        }\n    }\n\n    int dfs(int u, int p, int d, int i) {\n        dist[i][u] = d;\n        int opt = -1;\n        for (int v : adj[u]) {\n            if (v != p) {\n                int x = dfs(v, u, d + 1, i);\n                if (opt == -1 || dist[i][x] > dist[i][opt]) opt = x;\n            }\n        }\n        return opt == -1 ? u : opt;\n    }\n\n    pair<int,int> getMinMax(){\n\n        int mini = 1e9, maxi = 0;\n        int mxNode = dfs(0, 0, 0, 0);\n        int mxNode2 = dfs(mxNode, mxNode, 0, 0);\n\n        dfs(mxNode2, mxNode2, 0, 1);\n\n        for (int i = 0; i < n; i++) {\n            maxi = max(maxi,  max(dist[0][i], dist[1][i]));\n            mini = min(mini, max(dist[0][i], dist[1][i]));\n        }\n        return {mini, maxi};\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        Graph g1(edges1), g2(edges2);\n        pair<int,int> m1 = g1.getMinMax(), m2 = g2.getMinMax();\n\n        return max({m1.first + m2.first +1, m2.second, m1.second});\n    }\n};",
    "submit_ts": "1719718185",
    "subm_id": "1304410877"
}