{
    "username": "AdityaGarg83",
    "submission": "struct Node {\n    Node* links[26];\n    vector<pair<int, int>> arr;\n    bool flag = false;\n\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != nullptr;\n    }\n\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n\n    void setEnd() {\n        flag = true;\n    }\n\n    bool isEnd() {\n        return flag;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string s, int index, int cost) {\n        Node* node = root;\n        for (auto it : s) {\n            if (!node->containsKey(it)) {\n                node->put(it, new Node());\n            }\n            node = node->get(it);\n        }\n        node->arr.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); i++) {\n            trie->insert(words[i], i, costs[i]);\n        }\n\n        // unordered_map<int, int> m;\n        vector<int> m(target.size()+1, INT_MAX);\n        m[0] = 0;\n        // for (int i = 1; i <= target.size(); i++) {\n        //     m[i] = INT_MAX;\n        // }\n\n        for (int i = 0; i < target.size(); i++) {\n            if (m[i] != INT_MAX) {\n                Node* temp = trie->root;\n                for (int j = i; j < target.size(); j++) {\n                    if (temp->containsKey(target[j])) {\n                        temp = temp->get(target[j]);\n                        for (auto it : temp->arr) {\n                            int index = it.first;\n                            int cost = it.second;\n                            int len = words[index].size();\n\n                            if (i + len <= target.size()) {\n                                m[i + len] = min(m[i + len], m[i] + cost);\n                            }\n                        }\n                    } else {\n                        break;\n                    }\n                }\n            }\n        }\n        return m[target.size()] == INT_MAX ? -1 : m[target.size()];\n    }\n};",
    "submit_ts": "1720324572",
    "subm_id": "1312402792"
}