{
    "username": "gourabsingha2",
    "submission": "class SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    bool isPeak(vector<int>& nums, int i) {\n        if (i <= 0 || i >= nums.size() - 1) {\n            return 0;\n        }\n        return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n    }\n\n    void build(vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(vector<int>& nums, int idx, int end, int node = 0, int start = 0) {\n        if (start == end) {\n            tree[node] = isPeak(nums, idx) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(nums, idx, mid, 2 * node + 1, start);\n            } else {\n                update(nums, idx, end, 2 * node + 2, mid + 1);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int l, int r, int end, int node = 0, int start = 0) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(l, r, mid, 2 * node + 1, start);\n        int right_query = query(l, r, end, 2 * node + 2, mid + 1);\n        return left_query + right_query;\n    }\n\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> res;\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                res.push_back(segTree.query(q[1] + 1, q[2] - 1, n - 1));\n            }\n            else if (q[0] == 2) {\n                nums[q[1]] = q[2];\n                if (q[1] > 0) segTree.update(nums, q[1] - 1, n - 1);\n                segTree.update(nums, q[1], n - 1);\n                if (q[1] < n - 1) segTree.update(nums, q[1] + 1, n - 1);\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1718509354",
    "subm_id": "1289706117"
}