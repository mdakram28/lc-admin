{
    "username": "Naivenerd",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<vector<int>> up_right_1(n);\n        vector<vector<int>> up_left_1(n);\n        vector<vector<int>> down_left_1(n);\n        vector<vector<int>> down_right_1(n);\n        \n        vector<int> max_up_right = points[0];\n        vector<int> max_up_left = points[0];\n        vector<int> max_down_left = points[0];\n        vector<int> max_down_right = points[0];\n        up_right_1[0] = max_up_right;\n        up_left_1[0] = max_up_left;\n        down_left_1[0] = max_down_left;\n        down_right_1[0] = max_down_right;\n        \n        for(int i = 0; i < n; i++)\n        {\n            vector<int> point = points[i];\n            int up_right_value = point[0] + point[1];\n            int up_left_value = -point[0] + point[1];\n            int down_left_value = -point[0] - point[1];\n            int down_right_value = point[0] - point[1];\n            \n            int max_up_right_value = max_up_right[0] + max_up_right[1];\n            int max_up_left_value = -max_up_left[0] + max_up_left[1];\n            int max_down_left_value = -max_down_left[0] - max_down_left[1];\n            int max_down_right_value = max_down_right[0] - max_down_right[1];\n            \n            if(up_right_value > max_up_right_value)\n                max_up_right = point;\n            if(up_left_value > max_up_left_value)\n                max_up_left = point;\n            if(down_left_value > max_down_left_value)\n                max_down_left = point;\n            if(down_right_value > max_down_right_value)\n                max_down_right = point;\n            \n            up_right_1[i] = max_up_right;\n            up_left_1[i] = max_up_left;\n            down_left_1[i] = max_down_left;\n            down_right_1[i] = max_down_right;\n            //printf(\"_1[%d]%d, %d, %d, %d\\r\\n\", i, max_up_right_value, max_up_left_value, max_down_left_value, max_down_right_value);\n        }\n\n        vector<vector<int>> up_right_2(n);\n        vector<vector<int>> up_left_2(n);\n        vector<vector<int>> down_left_2(n);\n        vector<vector<int>> down_right_2(n);\n        \n        max_up_right = points[n-1];\n        max_up_left = points[n-1];\n        max_down_left = points[n-1];\n        max_down_right = points[n-1];\n        up_right_2[n-1] = max_up_right;\n        up_left_2[n-1] = max_up_left;\n        down_left_2[n-1] = max_down_left;\n        down_right_2[n-1] = max_down_right;\n        \n        for(int i = n-1; i >= 0; i--)\n        {\n            vector<int> point = points[i];\n            int up_right_value = point[0] + point[1];\n            int up_left_value = -point[0] + point[1];\n            int down_left_value = -point[0] - point[1];\n            int down_right_value = point[0] - point[1];\n            \n            int max_up_right_value = max_up_right[0] + max_up_right[1];\n            int max_up_left_value = -max_up_left[0] + max_up_left[1];\n            int max_down_left_value = -max_down_left[0] - max_down_left[1];\n            int max_down_right_value = max_down_right[0] - max_down_right[1];\n            \n            if(up_right_value > max_up_right_value)\n                max_up_right = point;\n            if(up_left_value > max_up_left_value)\n                max_up_left = point;\n            if(down_left_value > max_down_left_value)\n                max_down_left = point;\n            if(down_right_value > max_down_right_value)\n                max_down_right = point;\n            \n            up_right_2[i] = max_up_right;\n            up_left_2[i] = max_up_left;\n            down_left_2[i] = max_down_left;\n            down_right_2[i] = max_down_right;\n            //printf(\"_2[%d]%d, %d, %d, %d\\r\\n\", i, max_up_right_value, max_up_left_value, max_down_left_value, max_down_right_value);\n        }\n        \n        int res = INT_MAX;\n        for(int i = 0; i < n; i++)\n        {\n            int max_up_right_value = INT_MIN;\n            int max_up_left_value = INT_MIN;\n            int max_down_left_value = INT_MIN;\n            int max_down_right_value = INT_MIN;\n            if(i > 0)\n            {\n                int up_right_value = up_right_1[i-1][0] + up_right_1[i-1][1];\n                int up_left_value = -up_left_1[i-1][0] + up_left_1[i-1][1];\n                int down_left_value = -down_left_1[i-1][0] - down_left_1[i-1][1];\n                int down_right_value = down_right_1[i-1][0] - down_right_1[i-1][1];\n                if(up_right_value > max_up_right_value)\n                {\n                    max_up_right = up_right_1[i-1];\n                    max_up_right_value = up_right_value;\n                }\n                if(up_left_value > max_up_left_value)\n                {\n                    max_up_left = up_left_1[i-1];\n                    max_up_left_value = up_left_value;\n                }\n                if(down_left_value > max_down_left_value)\n                {\n                    max_down_left = down_left_1[i-1];\n                    max_down_left_value = down_left_value;\n                }\n                if(down_right_value > max_down_right_value)\n                {\n                    max_down_right = down_right_1[i-1];\n                    max_down_right_value = down_right_value;\n                }\n            }\n            if(i < n-1)\n            {\n                int up_right_value = up_right_2[i+1][0] + up_right_2[i+1][1];\n                int up_left_value = -up_left_2[i+1][0] + up_left_2[i+1][1];\n                int down_left_value = -down_left_2[i+1][0] - down_left_2[i+1][1];\n                int down_right_value = down_right_2[i+1][0] - down_right_2[i+1][1];\n                if(up_right_value > max_up_right_value)\n                {\n                    max_up_right = up_right_2[i+1];\n                    max_up_right_value = up_right_value;\n                }\n                if(up_left_value > max_up_left_value)\n                {\n                    max_up_left = up_left_2[i+1];\n                    max_up_left_value = up_left_value;\n                }\n                if(down_left_value > max_down_left_value)\n                {\n                    max_down_left = down_left_2[i+1];\n                    max_down_left_value = down_left_value;\n                }\n                if(down_right_value > max_down_right_value)\n                {\n                    max_down_right = down_right_2[i+1];\n                    max_down_right_value = down_right_value;\n                }\n            }\n            \n            //printf(\"exec[%d]%d, %d, %d, %d\\r\\n\", i, max_up_right_value, max_up_left_value, max_down_left_value, max_down_right_value);\n            int max_dis = INT_MIN;\n            max_dis = max(max_dis, abs(max_up_right[0] - max_down_left[0]) + abs(max_up_right[1] - max_down_left[1]));\n            max_dis = max(max_dis, abs(max_up_left[0] - max_down_right[0]) + abs(max_up_left[1] - max_down_right[1]));\n            res = min(res, max_dis);\n        }\n        return res;\n    }\n};"
}