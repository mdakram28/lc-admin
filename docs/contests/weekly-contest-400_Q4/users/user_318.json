{
    "username": "vassu118",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> sz(n + 10);\n        sz[1] = 0;\n        for(int i=2;i<n+10;i++) sz[i] = sz[i / 2] + 1;\n        int LOG = 17;\n        vector<vector<int>> dp(n, vector<int> (LOG));\n        for(int i=0;i<n;i++) dp[i][0] = nums[i];\n        for(int i=1;i<LOG;i++) {\n            for(int j=0;j<=n-(1<<i);j++) {\n                dp[j][i] = (dp[j][i - 1] & dp[j + (1 << (i - 1) )][i - 1]);\n            }\n        }\n        function<int(int,int)> find = [&](int x, int y) {\n            int dist = y - x + 1;\n            int val = sz[dist];\n            int res = (dp[x][val] & dp[y - (1 << val) + 1][val]);\n            return res;\n        };\n        int ans = 2e9;\n        for(int i=0;i<n;i++) {\n            int l = i, r = n - 1;\n            while(l <= r) {\n                int mid = (l + r) / 2;\n                int get = find(i, mid);\n                ans = min(ans, abs(k - get));\n                if(get < k) {\n                    r = mid - 1;\n                }\n                else l = mid + 1;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717297739",
    "subm_id": "1274754092"
}