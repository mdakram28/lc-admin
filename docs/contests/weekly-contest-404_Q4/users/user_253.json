{
    "username": "priyanshu_p28",
    "submission": "class Solution {\npublic:\nconst static int MAXN = 100005; \nvector<int> g1[MAXN], g2[MAXN];\nint dist1[MAXN], dist2[MAXN];\n\npair<int, int> bfs(int start) {\n    memset(dist1, -1, sizeof(dist1));\n    queue<int> q;\n    q.push(start);\n    dist1[start] = 0;\n\n    int farthest_node = start;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n\n        for (int v : g1[u]) {\n            if (dist1[v] == -1) {\n                dist1[v] = dist1[u] + 1;\n                q.push(v);\n                if (dist1[v] > dist1[farthest_node]) {\n                    farthest_node = v;\n                }\n            }\n        }\n    }\n\n    return {farthest_node, dist1[farthest_node]};\n}\n    pair<int, int> bfs1(int start) {\n    memset(dist2, -1, sizeof(dist2));\n    queue<int> q;\n    q.push(start);\n    dist2[start] = 0;\n\n    int farthest_node = start;\n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n\n        for (int v : g2[u]) {\n            if (dist2[v] == -1) {\n                dist2[v] = dist2[u] + 1;\n                q.push(v);\n                if (dist2[v] > dist2[farthest_node]) {\n                    farthest_node = v;\n                }\n            }\n        }\n    }\n\n    return {farthest_node, dist2[farthest_node]};\n}\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size(), m = edges2.size();        \n        for(auto it: edges1){\n            g1[it[0]].push_back(it[1]);\n            g1[it[1]].push_back(it[0]);\n        }\n        for(auto it: edges2){\n            g2[it[0]].push_back(it[1]);\n            g2[it[1]].push_back(it[0]);\n        }\n        pair<int, int> p1 = bfs(0);\n\n        pair<int, int> p2 = bfs(p1.first);\n        \n        pair<int, int> p3 = bfs1(0);\n\n        pair<int, int> p4 = bfs1(p3.first);\n        \n        int d1 = p2.second;\n        int d2 = p4.second;\n        \n        int ans = max({d1, d2, (d1 + 1) / 2 + 1 + (d2 + 1) / 2});\n        \n        return ans;\n    }\n};",
    "submit_ts": 1719717353.0
}