{
    "username": "JavOliva",
    "submission": "typedef long long ll;\ntemplate<int K>\nstruct AhoCorasick {\n  struct Vertex {\n    int next[K], go[K];\n    bool leaf = false, rev = false;\n    int p = -1, link = -1, exit_link = -1;\n    char pch;\n    vector<int> indexes;\n    Vertex(int p = -1, char ch = '$') : p(p), pch(ch) {\n      fill(begin(next), end(next), -1);\n      fill(begin(go), end(go), -1);\n    }\n  };\n  vector<Vertex> t;\n  AhoCorasick(){\n    t.resize(1);\n  }\n \n  int get_exit_link(int v){\n    if (t[v].exit_link != -1)\n      return t[v].exit_link;\n    int l = get_link(v);\n    if (t[l].leaf || l == 0)\n      return t[v].exit_link = l;\n    return t[v].exit_link = get_exit_link(l);\n  }\n \n  void add_string(string const& s, int indx) {\n    int v = 0;\n    for (char ch : s){\n      int c = ch - 'a';\n      if (t[v].next[c] == -1){\n        t[v].next[c] = t.size();\n        t.emplace_back(v, ch);\n      }\n      v = t[v].next[c];\n    }\n    t[v].leaf = true;\n    t[v].indexes.push_back(indx);\n  }\n \n  int get_link(int v) {\n    if (t[v].link == -1) {\n      if (v == 0 || t[v].p == 0)\n        t[v].link = 0;\n      else\n        t[v].link = go(get_link(t[v].p), t[v].pch);\n    }\n    return t[v].link;\n  }\n \n  int go(int v, char ch) {\n    int c = ch - 'a';\n    if (t[v].go[c] == -1){\n      if (t[v].next[c] != -1)\n        t[v].go[c] = t[v].next[c];\n      else\n        t[v].go[c] = v == 0 ? 0 : go(get_link(v), ch);\n    }\n    return t[v].go[c];\n  }\n \n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        AhoCorasick<26> automaton;\n        for (int i = 0; i < words.size(); i ++){\n            automaton.add_string(words[i], i);\n        }\n        vector<ll> dp(target.size(), -1);\n        int v = 0;\n        int i = 0;\n        for (auto ch : target){\n            v = automaton.go(v, ch);\n            int aux = v;\n            while(aux != 0){\n                if (automaton.t[aux].leaf){\n                    for (int indx : automaton.t[aux].indexes){\n                        int le = words[indx].size();\n                        int left = i - le;\n                        ll valor = (left >= 0 ? dp[left] : 0);\n                        if (valor != -1){\n                            if (dp[i] == -1)\n                                dp[i] = valor + costs[indx];\n                            else\n                                dp[i] = min(dp[i], valor + costs[indx]);\n                        }\n                    }\n                }\n                automaton.t[aux].rev = 1;\n                aux = automaton.get_exit_link(aux);\n            }\n            i ++;\n        }\n        // for (int i = 0; i < dp.size(); i ++){\n        //     cout << \"dp[\" << i << \"] = \" << dp[i] << endl;\n        // }\n        return dp.back();\n    }\n};",
    "submit_ts": "1720322856",
    "subm_id": "1312360893"
}