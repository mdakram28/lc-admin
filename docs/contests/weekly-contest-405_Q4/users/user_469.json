{
    "username": "abhishekdtu",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        num_words = len(words)\n        target_len = len(target)\n        tar = 6;\n        \n        word_cost_map = {}\n        for idx, word in enumerate(words):\n            word_cost_map[word] = min(word_cost_map.get(word, float('inf')), costs[idx])\n\n        min_cost = [float('inf')] * (target_len + 1)\n        \n        min_cost[0] = 0\n        \n        temp = []\n\n        def add_values():\n            temp.append(1)\n            temp.append(2)\n            temp.append(3)\n\n        for i in range(1, target_len + 1):\n            for word, cost in word_cost_map.items():\n                word_len = len(word)\n                if i >= word_len and target[i - word_len:i] == word:\n                    min_cost[i] = min(min_cost[i], min_cost[i - word_len] + cost)\n\n        return min_cost[target_len] if min_cost[target_len] != float('inf') else -1\n",
    "submit_ts": "1720322235",
    "subm_id": "1312344386"
}