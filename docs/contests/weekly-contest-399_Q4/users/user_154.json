{
    "username": "ajinkya1p3",
    "submission": "class Solution {\nprivate:\n    const int MOD = 1e9 + 7;\n    vector< vector< vector<int> > > goodIndices = {\n        {{0, 0}, {0, 2}, {1, 0}},\n        {{0, 1}, {0, 3}, {1, 1}},\n        {{2, 0}, {2, 2}, {3, 0}},\n        {{2, 1}, {2, 3}, {3, 1}}\n    };\n    \n    struct node {\n        long long maxx[4];\n    } tree[200005];\n    \n    void merge(node& a, node& b, node& res) {\n        for (int i = 0 ; i < 4; i++)\n        {\n            res.maxx[i] = 0;\n            \n            for (auto &v: goodIndices[i])\n            {\n                int x = v[0], y = v[1];\n                res.maxx[i] = max(res.maxx[i], a.maxx[x] + b.maxx[y]);\n            }\n        }\n    }\n    \n    void build(int left, int right, int root, vector<int>& nums) {\n        if (left == right)\n        {\n            tree[root].maxx[3] = max(0, nums[left]);\n            return;\n        }\n        \n        int mid = (left + right) / 2;\n        \n        build(left, mid, root * 2, nums);\n        build(mid + 1, right, root * 2 + 1, nums);\n        \n        merge(tree[root * 2], tree[root * 2 + 1], tree[root]);\n    }\n    \n    void update(int left, int right, int indx, int val, int root) {\n        if (left > indx || right < indx)\n            return;\n        \n        if (left == right)\n        {\n            tree[root].maxx[3] = max(0, val);\n            return;\n        }\n        \n        int mid = (left + right) / 2;\n        \n        update(left, mid, indx, val, root * 2);\n        update(mid + 1, right, indx, val, root * 2 + 1);\n        \n        merge(tree[root * 2], tree[root * 2 + 1], tree[root]);\n    }\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        \n        build(0, n - 1, 1, nums);\n        \n        long long ans = 0;\n        \n        for (auto &q: queries) {\n            int pos = q[0], x = q[1];\n            update(0, n - 1, pos, x, 1);\n            \n            long long m = 0;\n            \n            for (int i = 0; i < 4; i++)\n                m = max(m, tree[1].maxx[i]);\n            \n            ans += m;\n        }\n        \n        return ans % MOD;\n    }\n};",
    "submit_ts": 1716694691.0
}