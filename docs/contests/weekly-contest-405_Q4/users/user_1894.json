{
    "username": "Nevil_Sakhreliya_19",
    "submission": "struct State {\n    int position;\n    int cost = INT_MAX;\n    bool operator>(const State &other) const {\n        return cost > other.cost;\n    }\n};\n\nclass Solution {\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    bool isEndOfWord;\n    TrieNode() : cost(INT_MAX), isEndOfWord(false) {}\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        if(node -> cost != INT_MAX) node -> cost = min(cost, node -> cost);\n        else node->cost = cost;\n        node->isEndOfWord = true;\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.getRoot();\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->isEndOfWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323470",
    "subm_id": "1312376369"
}