{
    "username": "dumbunny8128",
    "submission": "class Solution:\n    '''notes\n    * n, m <= 1e5: O(N Log N)\n    * diameter = diameter of edges1 + diameter of edges2 + 1 (where diameter is longest edges path).\n    '''\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n = len(edges1) + 1\n        m = len(edges2) + 1\n \n        d1 = self.getDiameter(edges1)\n        d2 = self.getDiameter(edges2)\n        val1 = d1 + d2 + 1\n        val2 = self.getMaxDist(edges1)\n        val3 = self.getMaxDist(edges2)\n        # print(f'd1={d1}, d2={d2}, val1={val1}, val2={val2}, val3={val3}')\n        return max(val1, val2, val3)\n        \n    def getDiameter(self, edges):\n        adjss = defaultdict(set)\n        for a, b in edges:\n            adjss[a].add(b)\n            adjss[b].add(a)           \n        n = len(edges) + 1\n\n        #for k, v in sorted(adjss.items()):\n        #    print(f'* k={k}, v={sorted(v)}')\n        \n        # Kill all leaves. Each dead leaf reduces diameter by 1 until end, I think.\n        diameter = 0\n        leaves = []\n        for i in range(n):\n            numAdjs = len(adjss[i])\n            if numAdjs == 1:\n                leaves.append(i)\n        for diameter in range(100000):  # ook\n            # print(f'adjss={sorted(adjss.items())}')\n            # print(f'numLeaves={len(leaves)}')\n            if not leaves:\n                break\n            internals = set()\n            for leaf in leaves:\n                for internal in adjss[leaf]:\n                    adjss[internal].remove(leaf)\n                    internals.add(internal)\n                del adjss[leaf]\n            # print(f'leaves removed: {leaves}')\n            diameter += 1\n            leaves = [internal for internal in internals if len(adjss[internal]) == 1]\n            \n        return diameter\n    \n    def getMaxDist(self, edges):\n        adjss = defaultdict(set)\n        n = len(edges) + 1\n        for a, b in edges:\n            adjss[a].add(b)\n            adjss[b].add(a)        \n        \n        firstNodes = set()\n        maxDist = 1\n        \n        nodes0 = [0]\n        firstNodes.add(0)\n        for attempt in range(2):\n            curDist = 0\n            visited = set(nodes0)\n            while nodes0:\n                nodes1 = []\n                for node0 in nodes0:\n                    for node1 in adjss[node0]:\n                        if node1 in visited:\n                            continue\n                        nodes1.append(node1)\n                        visited.add(node1)\n                if not nodes1:\n                    break\n                curDist += 1\n                nodes0 = nodes1\n            \n            maxDist = max(maxDist, curDist)\n            # Choose another firstNode\n            firstNode = None\n            for node0 in nodes0:\n                if node0 not in firstNodes:\n                    firstNode = node0\n                    break\n            if firstNode is None:\n                break\n            nodes0 = [firstNode]\n            firstNodes.add(firstNode)\n        return maxDist\n            \n        \n\n    # e1= [[0,1],[2,0],[3,2],[3,6],[8,7],[4,8],[5,4],[3,5],[3,9]]\n    # e2= [[0,1],[0,2],[0,3]]: \n    # Should be 7, got 6. e2 is 1. They expect 5. I got 4.\n    # OHHH. I also need to get the farthest within\n    \n    # [[67,2],[24,5],[46,6],[86,8],[15,10],[48,13],[73,14],[24,15],[12,19],[53,22],[58,27],[60,30],[59,31],[52,35],[17,36],[29,37],[23,41],[16,23],[20,45],[24,20],[4,46],[39,4],[12,48],[1,12],[50,1],[39,50],[0,39],[64,51],[71,53],[47,56],[66,47],[77,57],[60,61],[0,60],[9,0],[24,64],[29,67],[65,29],[79,69],[18,70],[16,18],[33,73],[54,33],[76,54],[59,74],[17,59],[38,17],[26,38],[68,26],[24,68],[55,24],[28,55],[77,28],[7,75],[80,7],[72,76],[16,79],[62,16],[71,62],[21,71],[3,80],[86,3],[21,81],[72,82],[52,72],[77,83],[11,77],[42,11],[40,84],[34,40],[21,34],[58,21],[42,58],[32,42],[44,32],[78,44],[52,78],[49,52],[66,49],[9,66],[43,9],[65,85],[63,65],[43,63],[25,43],[25,86]]\n    # [[55,0],[17,5],[34,8],[43,18],[54,19],[11,22],[32,11],[16,28],[38,16],[79,32],[13,34],[69,38],[52,39],[24,41],[36,42],[64,36],[65,43],[33,44],[24,33],[23,24],[20,46],[52,20],[31,48],[75,51],[69,56],[12,58],[66,59],[83,60],[21,61],[57,21],[27,57],[10,27],[49,63],[3,65],[53,67],[66,53],[55,70],[37,55],[17,37],[10,17],[54,71],[72,54],[29,72],[13,29],[69,13],[12,69],[14,12],[15,14],[83,73],[50,74],[9,50],[40,9],[79,40],[2,75],[64,2],[52,64],[47,52],[80,47],[66,76],[35,66],[3,35],[25,77],[62,78],[31,80],[79,31],[7,79],[26,7],[25,26],[81,25],[4,81],[30,82],[45,30],[1,45],[10,83],[1,10],[4,1],[49,4],[15,49],[68,15],[62,68],[3,62],[6,3],[23,6],[23,84]]\n    # Was 25, expected 26. BAH.\n        \n        ",
    "submit_ts": 1719719655.0
}