{
    "username": "chaturvedinitin",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort the cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        long long h_pieces = 1, v_pieces = 1; // Initially, there's 1 piece vertically and horizontally\n        int h_ptr = 0, v_ptr = 0; // Pointers for horizontal and vertical cuts\n        long long total_cost = 0;\n\n        // While there are cuts to be made\n        while (h_ptr < horizontalCut.size() && v_ptr < verticalCut.size()) {\n            if (horizontalCut[h_ptr] > verticalCut[v_ptr]) {\n                total_cost += horizontalCut[h_ptr] * v_pieces;\n                h_pieces++;\n                h_ptr++;\n            } else {\n                total_cost += verticalCut[v_ptr] * h_pieces;\n                v_pieces++;\n                v_ptr++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (h_ptr < horizontalCut.size()) {\n            total_cost += horizontalCut[h_ptr] * v_pieces;\n            h_ptr++;\n        }\n\n        // If there are remaining vertical cuts\n        while (v_ptr < verticalCut.size()) {\n            total_cost += verticalCut[v_ptr] * h_pieces;\n            v_ptr++;\n        }\n\n        return total_cost;\n    }\n};\n",
    "submit_ts": "1720925836",
    "subm_id": "1320267754"
}