{
    "username": "i3lissful-chatelet7bc",
    "submission": "template <typename T>\nclass SparseTable {\n  using VT = vector<T>;\n  using VVT = vector<VT>;\n  using func_type = function<T(const T &, const T &)>;\n\n  VVT ST;\n\n  static T default_func(const T &t1, const T &t2) { return t1&t2; }\n\n  func_type op;\n\n public:\n  void init(const vector<T> &v, func_type _func = default_func) {\n    op = _func;\n    int len = v.size(), l1 = ceil(log2(len)) + 1;\n    ST.assign(len, VT(l1, 0));\n    for (int i = 0; i < len; ++i) {\n      ST[i][0] = v[i];\n    }\n    for (int j = 1; j < l1; ++j) {\n      int pj = (1 << (j - 1));\n      for (int i = 0; i + pj < len; ++i) {\n        ST[i][j] = op(ST[i][j - 1], ST[i + (1 << (j - 1))][j - 1]);\n      }\n    }\n  }\n\n  T query(int l, int r) {\n    int lt = r - l + 1;\n    int q = floor(log2(lt));\n    return op(ST[l][q], ST[r - (1 << q) + 1][q]);\n  }\n};\nclass Solution {\npublic:\n    typedef long long ll;\n    SparseTable<int> st;\n    int kk;\n    ll cau(vector<int>&nums,int p1,int p2){\n        ll res = nums[p1]==kk;\n        for(int i = p1+1;i<=p2;i++){\n            if(st.query(p1,i)!=kk) continue;\n            int l = p1 , r = i+1;\n            while(l+1!=r){\n                int m = l+r>>1;\n                if(st.query(m,i)==kk) l = m;\n                else r = m;\n            }            \n            res += l-p1+1ll;\n        }\n        return res;\n    }\n\n    int check(int x){\n        return (x&kk) == kk;\n    }\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        ll ans = 0;\n        kk = k;\n        st.init(nums);\n        for(int i = 0;i<n;i++){\n            if(check(nums[i])){\n                int p1 = i , p2 = i;\n                while(p2+1<n&&check(nums[p2])) p2++;\n                ans += cau(nums,p1,p2);\n                i = p2;\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1720276749",
    "subm_id": "544552152"
}