{
    "username": "jerksundertaker",
    "submission": "#define f first\n#define s second\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int, int>> sum(n), diff(n);\n        for(int i = 0; i < n; i++){\n            sum[i] = {points[i][0] + points[i][1], i};\n            diff[i] = {points[i][0] - points[i][1], i};\n        }\n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        \n        int ans = INT_MAX;\n        int val;\n        \n        // remove sum[0]\n        if(sum[0].s == diff[0].s) val = diff[n - 1].f - diff[1].f;\n        else if(sum[0].s == diff[n - 1].s) val = diff[n - 2].f - diff[0].f;\n        else val = diff[n - 1].f - diff[0].f;\n        ans = min(ans, max(sum[n - 1].f - sum[1].f, val));\n        \n        // remove sum[n - 2]\n        if(sum[n - 1].s == diff[0].s) val = diff[n - 1].f - diff[1].f;\n        else if(sum[n - 1].s == diff[n - 1].s) val = diff[n - 2].f - diff[0].f;\n        else val = diff[n - 1].f - diff[0].f;\n        ans = min(ans, max(sum[n - 2].f - sum[0].f, val));\n        \n        // remove diff[0]\n        if(diff[0].s == sum[0].s) val = sum[n - 1].f - sum[1].f;\n        else if(diff[0].s == sum[n - 1].s) val = sum[n - 2].f - sum[0].f;\n        else val = sum[n - 1].f - sum[0].f;\n        ans = min(ans, max(diff[n - 1].f - diff[1].f, val));\n        \n        // remove diff[n - 1]\n        if(diff[n - 1].s == sum[0].s) val = sum[n - 1].f - sum[1].f;\n        else if(diff[n - 1].s == sum[n - 1].s) val = sum[n - 2].f - sum[0].f;\n        else val = sum[n - 1].f - sum[0].f;\n        ans = min(ans, max(diff[n - 2].f - diff[0].f, val));\n        \n        return ans;\n    }\n};"
}