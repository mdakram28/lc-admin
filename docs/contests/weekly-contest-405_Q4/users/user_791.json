{
    "username": "zouyun",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # Create a dictionary to map words to their minimum cost\n        word_costs = {}\n        for i in range(len(words)):\n            if words[i] in word_costs:\n                word_costs[words[i]] = min(costs[i], word_costs[words[i]])\n            else:\n                word_costs[words[i]] = costs[i]\n\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            for word, cost in word_costs.items():\n                if target[i:i+len(word)] == word:\n                    dp[i+len(word)] = min(dp[i+len(word)], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322285",
    "subm_id": "1312345753"
}