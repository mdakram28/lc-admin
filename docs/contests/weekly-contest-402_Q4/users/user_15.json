{
    "username": "pku_erutan",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        class NumArray:\n            def __init__(self, nums: List[int]):\n                self.raw = [t for t in nums]\n                T = 2\n                while T <= len(nums) :\n                    for i in range(T, len(nums)+1, T) :\n                        nums[i-1] += nums[i-1-T//2]\n                    T = T * 2\n                self.nums = nums\n                self.lowbit = lambda x : x&(-x)\n\n            def update(self, index: int, val: int) -> None:\n                if val == self.raw[index] :\n                    return\n                dis = val - self.raw[index]\n                self.raw[index] = val\n                while index < len(self.nums) :\n                    self.nums[index] += dis\n                    index += self.lowbit(index+1)\n\n            def presums(self, index) :\n                to_ret = 0\n                while index >= 0 :\n                    to_ret += self.nums[index]\n                    index -= self.lowbit(index+1)\n                return to_ret\n\n            def sumRange(self, left: int, right: int) -> int:\n                return self.presums(right)-self.presums(left-1)\n        na_raw = [0] * len(nums)\n        for i in range(1, len(nums)-1) :\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1] :\n                na_raw[i] = 1\n        na = NumArray(na_raw)\n        \n        def check_p(v1) :\n            new_v = 0\n            if 0 < v1 < len(nums)-1 :\n                if nums[v1] > nums[v1-1] and nums[v1] > nums[v1+1] :\n                    new_v = 1 \n            return new_v\n        \n        to_ret = []\n        for tp, v1, v2 in queries :\n            # print(na.raw)\n            if tp == 1 :\n                if not v2-1 >= v1+1 :\n                    to_ret.append(0)\n                else :\n                    to_ret.append(na.sumRange(v1+1, v2-1))\n            else :\n                nums[v1] = v2\n                na.update(v1, check_p(v1))\n                if v1-1 >= 0 :\n                    na.update(v1-1, check_p(v1-1))\n                if v1+1 < len(nums) :\n                    na.update(v1+1, check_p(v1+1))\n        return to_ret",
    "submit_ts": 1718505932.0
}