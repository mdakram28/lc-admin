{
    "username": "_shivaay_",
    "submission": "class Solution {\npublic:\n    void dfs(int node, int par, vector<vector<int>>& adj, vector<int>& times) {\n        int time = times[node];\n\n        for(auto& e : adj[node]) {\n            if(e != par) {\n                if(e & 1) times[e] = time + 1;\n                else times[e] = time + 2;\n                dfs(e, node, adj, times);\n            }\n        }\n    }\n\n    void dfs(int node, int par, vector<vector<int>>& adj, vector<int>& times, vector<int>& maxSubTimes) {\n        int mx = times[node];\n\n        for(auto& e : adj[node]) {\n            if(e == par) continue;\n            dfs(e, node, adj, times, maxSubTimes);\n            mx = max(mx, maxSubTimes[e]);\n        }\n\n        maxSubTimes[node] = mx;\n    }\n\n    void dfs(int node, int par, int f, vector<vector<int>>& adj, vector<int>& times, vector<int>& maxSubTimes, vector<int>& ans) {\n        int mx = 0, smx = 0;\n        for(auto& e : adj[node]) {\n            if(e != par) {\n                if(maxSubTimes[e] > mx) {\n                    smx = mx;\n                    mx = maxSubTimes[e];\n                } else if(maxSubTimes[e] > smx) {\n                    smx = maxSubTimes[e];\n                }\n            }\n        }\n\n        if(node & 1) ans[node] = max(f, mx - times[node]);\n        else ans[node] = max(f, mx - times[node]);\n\n        for(auto& e : adj[node]) {\n            if(e != par) {\n                if(maxSubTimes[e] == mx) {\n                    dfs(e, node, ((node % 2 == 0) ? 2 : 1) + max(f, smx - times[node]), adj, times, maxSubTimes, ans);\n                } else {\n                    dfs(e, node, ((node % 2 == 0) ? 2 : 1) + max(f, mx - times[node]), adj, times, maxSubTimes, ans);\n                }\n            }\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n\n        vector<vector<int>> adj(n, vector<int>());\n        for(auto& e : edges) {\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n\n        vector<int> times(n);\n        times[0] = 0;\n        dfs(0, -1, adj, times);\n\n        vector<int> maxSubTimes(n);\n        dfs(0, -1, adj, times, maxSubTimes);\n\n        vector<int> ans(n);\n        ans[0] = maxSubTimes[0];\n        dfs(0, -1, 0, adj, times, maxSubTimes, ans);\n\n        return ans;\n    }\n};",
    "submit_ts": "1722700061",
    "subm_id": "1343230499"
}