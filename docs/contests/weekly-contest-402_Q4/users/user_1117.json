{
    "username": "vinayak930",
    "submission": "class Solution {\npublic:\n    \n    template<typename T>\nclass SegmentTree{\n    private:\n        vector<T>   tree;\n        int start , end;\n        void build(int node , int s , int e , vector<T> &array){\n            if( s == e ){\n                tree[node] = array[s];\n                return;\n            }\n\n            int mid = s + (e - s) / 2;\n\n            build( 2*node , s , mid , array);\n            build( 2 * node + 1 , mid + 1 , e , array );\n\n            //change this to desired function\n            tree[node] =    tree[2 *node] + tree[2 * node + 1];\n\n            //  tree[node] = max( tree[2 *node] ,  tree[2 * node + 1]});\n        }\n        T queryHelper(int node , int s , int e , int l , int r){\n            if( s > r || e < l){\n                return 0;\n            }\n            if( s >= l && e <= r ){\n                return  tree[node];\n            }\n\n            int mid = s + (e - s)/2;\n\n            T left = queryHelper( 2*node , s , mid , l , r);\n            T right = queryHelper( 2 * node + 1 , mid + 1, e , l , r);\n\n            // change this\n            return left + right;\n        }\n\n        void updateHelper(int node , int s , int e , int idx , T item){\n            if( s == e ){\n                tree[node] = item;\n                return;  \n            }\n\n            int mid = s + ( e - s ) / 2;\n\n            if( idx <= mid ){\n                updateHelper( 2 * node , s , mid , idx , item);\n            }else{\n                updateHelper( 2 * node + 1, mid + 1 ,e , idx , item);\n            }\n\n            // change this\n            tree[node] =    tree[2*node] +  tree[2*node + 1];\n        }\n    \n    public: \n        SegmentTree(int n){\n            tree.resize(4 * n , 0);\n            start = 0;\n            end = n - 1;\n        }\n\n        SegmentTree( vector<T> &array ){\n            start = 0;\n            end = array.size() - 1;\n            // cout<<end<<endl;\n            tree.resize(4 * array.size() , 0);\n            build(1 , start , end , array);\n        }\n\n        T query(int l , int r){\n            return queryHelper( 1 , start , end , l , r);\n        }\n\n        void update(int idx , T item){\n            updateHelper(1 , start , end , idx , item);\n        }\n};\n\n    \n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n        int n = v.size();\n        SegmentTree<int> st(n);\n        \n        for(int i = 1 ;i < n-1;i++){\n            if(v[i] > v[i - 1] && v[i] > v[i + 1] ){\n                st.update(i , 1);\n            }\n        }\n        vector<int> ans;\n        // cout<<st.query(3, 3)<<endl;\n        \n        \n        for(int i = 0 ;i < q.size();i++){\n            \n            auto j = q[i];\n            int b = j[1];\n            int c = j[2];\n            if(j[0] == 1){\n                ans.push_back(st.query(b + 1 , c - 1));\n            }else{\n                \n                v[b] = c;\n                if(b > 0 && b < n - 1) {\n                     if(v[b] > v[b - 1] && v[b] > v[b+ 1]){\n                    st.update(b , 1);\n                }else{\n                    st.update( b , 0);\n                }\n                }\n               \n                \n                int x = b - 1;\n                \n                if(x > 0 && x < n - 1) {\n                if(v[x] > v[x - 1] && v[x] > v[x+ 1]){\n                    st.update(x , 1);\n                }else{\n                    st.update( x , 0);\n                }\n                }\n                \n                x = b + 1;\n                if(x > 0 && x < n - 1) {\n                if(v[x] > v[x - 1] && v[x] > v[x+ 1]){\n                    st.update(x , 1);\n                }else{\n                    st.update( x , 0);\n                }\n                }\n            }\n            \n        }\n        return ans;\n        \n    }\n};",
    "submit_ts": 1718508682.0
}