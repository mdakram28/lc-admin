{
    "username": "MSMahesh123",
    "submission": "class Solution {\npublic:\n    \n    \n    int helper(int &k, long long int currentStair, long long int jump, bool canGoDown, unordered_map<long long int, unordered_map<long long int, unordered_map<bool, int>>> &m){\n        \n        if(currentStair > k + 1) return 0;\n        \n        if(m.find(currentStair) != m.end()){\n            if(m[currentStair].find(jump) != m[currentStair].end()){\n                if(m[currentStair][jump].find(canGoDown) != m[currentStair][jump].end()){\n                    return m[currentStair][jump][canGoDown];\n                }\n            }\n        }\n        int ans = 0;\n        if(currentStair == k) ans = 1;\n        if(currentStair <= k) ans += helper(k, currentStair + jump, 2*jump, true, m);\n        if(canGoDown){\n            ans += helper(k, currentStair - 1, jump, false, m);\n        }\n        m[currentStair][jump][canGoDown] = ans;\n        return ans;\n    }\n    \n    \n    int waysToReachStair(int k) {\n        unordered_map<long long int, unordered_map<long long int, unordered_map<bool, int>>> m;\n        return helper(k, 1, 1, true, m);\n    }\n};",
    "submit_ts": "1716090444",
    "subm_id": "1261867317"
}