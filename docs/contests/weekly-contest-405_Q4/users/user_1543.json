{
    "username": "gnanadeep_revuri",
    "submission": "#define ll long long\nclass TrieNode{\npublic:\n    vector<TrieNode*> children;\n    int value;\n    bool isend;\n    TrieNode() : children(26, nullptr), value(INT_MAX), isend(false) {}\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie(){\n        root = new TrieNode();\n    }\n    void add(string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieNode();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->value = min(cost, node->value);\n        node->isend = true;\n    }\n    TrieNode* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    \n    map<string,ll>mp;\n    vector<ll>dp;\n    ll dpfunc(int ind,int &n,string &target,Trie &trie){\n        if(ind==n){\n            return 0;\n        }\n        if(dp[ind]!=-1){\n            return dp[ind];\n        }\n        ll mini=INT_MAX;\n        TrieNode* node=trie.getRoot();\n        for(int i=ind;i<n;i++){\n            int c=target[i]-'a';\n            if(node->children[c]==NULL)break;\n            node=node->children[c];\n            if(node->isend)\n                mini=min(mini,node->value+dpfunc(i+1,n,target,trie));\n        }\n        return dp[ind]=mini;\n        \n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for(int i=0;i<words.size();i++){\n            trie.add(words[i],costs[i]);\n        } \n        int n=target.size();\n        dp.resize(n+1,-1);\n        \n        dpfunc(0,n,target,trie);\n        \n        if(dp[0]>=INT_MAX){\n            return -1;\n        }\n        else{\n            return dp[0];\n        }\n    }\n};",
    "submit_ts": "1720324450",
    "subm_id": "1312399779"
}