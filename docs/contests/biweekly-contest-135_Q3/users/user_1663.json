{
    "username": "BlackStallion456",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        diffs = defaultdict(int)\n        n = len(nums)\n        for i in range(n//2):\n            diffs[abs(nums[i] - nums[n-1-i])] += 1\n        \n        # For each diff, find how many ops it would take to\n        # convert the other numbers to that diff value\n        min_ops_needed = float(\"inf\")\n\n        def f(x, a, b) -> bool:\n            return x >= a and x <= b\n\n        for x, diff_count in diffs.items():\n            #print(\"x\", x)\n            total_ops = 0\n            \n            # The most optimistic outcome is that each diff != x only takes 1 operation\n            # to change, if that is the case, then the total ops will be n_pairs - diff_eq_x\n            # and so we can do some early checking to see if any further ops are needed\n            if n//2 - diff_count >= min_ops_needed:\n                continue\n\n            for i in range(n//2):\n                d = abs(nums[i] - nums[n-1-i])\n                #print(\"diff\", d)\n                if d != x: # Then check how many ops are needed\n                    #print(\"nums[i], nums[n-1-i]\", nums[i], nums[n-1-i])\n                    # to get this to be a diff of x\n                    # Check if we can make the diff equal to x in 1 operation\n                    if f(nums[i] + x, 0, k) or f(nums[i] - x, 0, k) or f(nums[n-1-i] + x, 0, k) or f(nums[n-1-i] - x, 0, k):\n                        total_ops += 1 \n                    else: # Otherwise it will take 2\n                        total_ops += 2\n\n                if total_ops > min_ops_needed: # Stop early once we know this is more\n                    # than the number of ops already found\n                    break\n\n            if total_ops < min_ops_needed:\n                min_ops_needed = total_ops\n\n        return min_ops_needed\n\n\n        \"\"\"\n        # Find the mod diff and then count how many moves would\n        # be needed to convert the others to be equal to that mode\n        mode_diff, count = None, 0\n        for mode, c in diffs.items():\n            if c > count:\n                mode_diff, count = mode, c\n        \n        print(diffs)\n        print(mode_diff)\n        print(count)\n        # For each, count how many operations would be required\n        # to make all others have an abs diff of x and then return\n        # the min among all options\n\n\n        return (n // 2) - count\n        \"\"\"",
    "submit_ts": "1721489410",
    "subm_id": "1327452430"
}