{
    "username": "WORTH_IT",
    "submission": "class Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n        HashMap<Integer, Integer> map = new HashMap<>();\n        for (int[] temp : requirements)\n            map.put(temp[0] + 1, temp[1]);\n\n        final int C = 400;\n        Mint[][] dp = new Mint[n + 1][C + 1];\n        for (var asd : dp)\n            Arrays.fill(asd, Mint.ZERO);\n        Arrays.fill(dp[0], Mint.ONE);\n        for (int i = 1; i <= n; i++) {\n            if (map.containsKey(i)) {\n                int j = map.get(i);\n                int r = Math.min(j, C);\n                int l = Math.max(j - i + 1, 0);\n\n                dp[i][j] = dp[i - 1][r];\n                if (l > 0)\n                    dp[i][j] = dp[i][j].sub(dp[i - 1][l - 1]);\n                Arrays.parallelPrefix(dp[i], Mint::add);\n                continue;\n            }\n\n            for (int j = 0; j <= C; j++) {\n                int l = Math.max(j - i + 1, 0);\n\n                dp[i][j] = dp[i - 1][j];\n                if (l > 0)\n                    dp[i][j] = dp[i][j].sub(dp[i - 1][l - 1]);\n            }\n            \n            Arrays.parallelPrefix(dp[i], Mint::add);\n        }\n\n        return (int) dp[n][map.get(n)].get();\n    }\n}\n\nfinal class Mint { // 1000000007 998244353\n    public static long mod = 1000000007;\n    public static boolean modIsPrime = true;\n    private final long val;\n\n    public static final Mint ZERO = new Mint(0L);\n    public static final Mint ONE = new Mint(1L);\n\n    public static long norm(long val) {\n        return (val %= mod) < 0 ? val + mod : val;\n    }\n\n    public static long norm(Integer val) {\n        return norm(val.longValue());\n    }\n\n    public Mint(long val) {\n        this.val = norm(val);\n    }\n\n    public Mint() {\n        this(0);\n    }\n\n    public Mint(Mint arg) {\n        this(arg.val);\n    }\n\n    public Mint(Integer arg) {\n        this(arg.longValue());\n    }\n\n    public long get() {\n        return val;\n    }\n\n    public Mint add(long arg) {\n        return new Mint(this.val + norm(arg));\n    }\n\n    public Mint add(Mint arg) {\n        return add(arg.val);\n    }\n\n    public Mint add(Integer arg) {\n        return add(arg.longValue());\n    }\n\n    public Mint add(long... args) {\n        Mint sum = this;\n        for (long a : args)\n            sum = sum.add(a);\n        return sum;\n    }\n\n    public Mint add(Mint... args) {\n        Mint sum = this;\n        for (Mint a : args)\n            sum = sum.add(a);\n        return sum;\n    }\n\n    public Mint add(Integer... args) {\n        Mint sum = this;\n        for (Integer a : args)\n            sum = sum.add(a);\n        return sum;\n    }\n\n    public Mint sub(long arg) {\n        return new Mint(val - norm(arg));\n    }\n\n    public Mint sub(Mint arg) {\n        return sub(arg.val);\n    }\n\n    public Mint sub(Integer arg) {\n        return sub(arg.longValue());\n    }\n\n    public Mint mul(long arg) {\n        return new Mint(this.val * norm(arg));\n    }\n\n    public Mint mul(Mint arg) {\n        return mul(arg.val);\n    }\n\n    public Mint mul(Integer arg) {\n        return mul(arg.longValue());\n    }\n\n    public Mint mul(long... args) {\n        Mint product = this;\n        for (long a : args)\n            product = product.mul(norm(a));\n        return product;\n    }\n\n    public Mint mul(Mint... args) {\n        Mint product = this;\n        for (Mint a : args)\n            product = product.mul(a);\n        return product;\n    }\n\n    public Mint mul(Integer... args) {\n        Mint product = this;\n        for (Integer a : args)\n            product = product.mul(norm(a));\n        return product;\n    }\n\n    public Mint div(Mint arg) {\n        return mul(arg.inv());\n    }\n\n    public Mint div(long arg) {\n        return div(new Mint(arg));\n    }\n\n    public Mint div(Integer arg) {\n        return div(new Mint(arg));\n    }\n\n    public Mint inv() {\n        if (!modIsPrime)\n            throw new ArithmeticException(val + \" cannot have inverse with mod \" + mod + \"!\");\n        return pow(mod - 2);\n    }\n\n    public Mint pow(long arg) {\n        if (arg < 0)\n            return pow(-arg).inv();\n        Mint pow = Mint.ONE;\n        Mint temp = this;\n        while (arg > 0) {\n            if ((arg & 1) == 1)\n                pow = pow.mul(temp);\n            temp = temp.mul(temp);\n            arg = arg >> 1;\n        }\n        return pow;\n    }\n\n    public Mint pow(Mint arg) {\n        return pow(arg.val);\n    }\n\n    public Mint pow(Integer arg) {\n        return pow(arg.longValue());\n    }\n\n    @Override\n    public boolean equals(Object o) {\n        if (this == o)\n            return true;\n        if (o == null || getClass() != o.getClass())\n            return false;\n        Mint mint = (Mint) o;\n        return val == mint.val;\n    }\n\n    @Override\n    public String toString() {\n        return Long.toString(val);\n    }\n}",
    "submit_ts": 1719070013.0
}