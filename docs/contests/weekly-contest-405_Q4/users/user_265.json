{
    "username": "gandip_6355",
    "submission": "\nclass Solution {\n    bool isPrime(int n)\n{\n    \n    if (n <= 1)\n        return false;\n\n    \n    for (int i = 2; i <= n / 2; i++)\n        if (n % i == 0)\n            return false;\n\n    return true;\n}\nunsigned int factorial(unsigned int n)\n{\n    if (n == 0)\n        return 1;\n    return n * factorial(n - 1);\n}\n    int calculateSum(int n)\n{\n    if (n <= 0)\n       return 0;\n \n    int fibo[n+1];\n    fibo[0] = 0, fibo[1] = 1;\n \n    // Initialize result\n    int sum = fibo[0] + fibo[1];\n \n    // Add remaining terms\n    for (int i=2; i<=n; i++)\n    {\n        fibo[i] = fibo[i-1]+fibo[i-2];\n        sum += fibo[i];\n    }\n \n    return sum;\n}\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordEnds; \n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(string& str, int i, int cost) {\n            TrieNode* node = root;\n            for (char ch : str) {\n                if (!node->children.count(ch))\n                    node->children[ch] = new TrieNode();\n                node = node->children[ch];\n            }\n            node->wordEnds.push_back({i, cost});\n        }\n    };\n\n    int minimumCost(string k, vector<string>& str, vector<int>& value) {\n        int n = k.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < str.size(); i++) {\n            trie.insert(str[i], i, value[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(k[j])) break;\n                node = node->children[k[j]];\n                for (auto& p : node->wordEnds) {\n                    int strindx = p.first;\n                    int valu1 = p.second;\n                    int len = str[strindx].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + valu1);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321944",
    "subm_id": "1312336474"
}