{
    "username": "Dhruv_24175",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int s1 = edges1.size() + 1;\n        int s2 = edges2.size() + 1;\n        \n        vector<vector<int>> g1(s1);\n        vector<vector<int>> g2(s2);\n        \n        for(const auto& edge : edges1) {\n            g1[edge[0]].push_back(edge[1]);\n            g1[edge[1]].push_back(edge[0]);\n        }\n        \n        for(const auto& edge : edges2) {\n            g2[edge[0]].push_back(edge[1]);\n            g2[edge[1]].push_back(edge[0]);\n        }\n        \n        auto dfs = [](const vector<vector<int>> &g, int s, int &farthestNode) {\n            int n = g.size();\n            vector<int> d(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int distance) {\n                d[node] = distance;\n                if(distance > d[farthestNode]) {\n                    farthestNode = node;\n                }\n                for(int neighbour: g[node]) {\n                    if(d[neighbour] == -1) {\n                        dfsVisit(neighbour, distance+1);\n                    }\n                }\n            };\n            farthestNode = s;\n            dfsVisit(s, 0);\n            return d[farthestNode];\n        };\n        \n        int node1 = 0;\n        dfs(g1, 0, node1);\n        int diam1 = dfs(g1, node1, node1);\n        \n        int node2 = 0;\n        dfs(g2, 0, node2);\n        int diam2 = dfs(g2, node2, node2);\n        \n        int minDiam = max(diam1, diam2);\n        int h1 = (diam1+1)/2;\n        int h2 = (diam2+1)/2;\n        minDiam = max(minDiam, h1+h2+1);\n        \n        return minDiam;\n    }\n};",
    "submit_ts": "1719718927",
    "subm_id": "1304429507"
}