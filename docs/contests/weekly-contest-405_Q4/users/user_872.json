{
    "username": "omersarthak11",
    "submission": "using ll = long long;\n\nclass HashedString {\npublic:\n    const ll M = 1e9 + 9;\n    const ll B = 9973;\n\n    vector<ll> pow;\n    vector<ll> p_hash;\n\n    HashedString(const string &s) {\n        pow.push_back(1);\n        while (pow.size() <= s.size()) {\n            pow.push_back((pow.back() * B) % M);\n        }\n        p_hash.assign(s.length() + 1, 0);\n        p_hash[0] = 0;\n        for (int i = 0; i < s.size(); i++) {\n            p_hash[i + 1] = ((p_hash[i] * B) % M + s[i]) % M;\n        }\n    }\n\n    ll get_hash(int start, int end) {\n        ll raw_val = p_hash[end + 1] - (p_hash[start] * pow[end - start + 1]) % M;\n        return (raw_val % M + M) % M;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        unordered_map<char, vector<pair<pair<ll, int>, int>>> mp;\n        for (int i = 0; i < words.size(); i++) {\n            HashedString sh = HashedString(words[i]);\n            mp[words[i][0]].push_back({{sh.get_hash(0, words[i].length() - 1), words[i].length()}, costs[i]});\n        }\n        HashedString s = HashedString(target);\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 1; i <= target.size(); i++) {\n            for (auto j : mp[target[i - 1]]) {\n                int c = j.second;\n                int len = j.first.second;\n                ll hsvalue = j.first.first;\n                if (i - 1 + len <= target.size() && hsvalue == s.get_hash(i - 1, i - 1 + len - 1)) {\n                    if (dp[i - 1] != INT_MAX) {\n                        dp[i - 1 + len] = min(c + dp[i - 1], dp[i - 1 + len]);\n                    }\n                }\n            }\n        }\n        return dp[target.size()] == INT_MAX ? -1 : dp[target.size()];\n    }\n};",
    "submit_ts": "1720322109",
    "subm_id": "1312340930"
}