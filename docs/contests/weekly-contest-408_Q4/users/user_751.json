{
    "username": "ultraaryan10",
    "submission": "#define double long double\n#define CAST static_cast<double>\n\n\nvoid dfs(const vector<vector<int>>& graph, int x, unordered_set<int>& visited) {\n    if (visited.count(x)) return;\n    visited.insert(x);\n    for (int v : graph[x]) {\n        dfs(graph, v, visited);\n    }\n}\n\nbool isBlocking(const vector<vector<int>>& circles, const unordered_set<int>& component, double width, double height) {\n    double maxY = -1;\n    double minY = height + 1;\n    double maxX = -1;\n    double minX = width + 1;\n    \n    for (int c : component) {\n        const auto& circle = circles[c];\n        double x = CAST(circle[0]);\n        double y = CAST(circle[1]);\n        double r = CAST(circle[2]);\n        maxY = max(maxY, y + r);\n        minY = min(minY, y - r);\n        maxX = max(maxX, x + r);\n        minX = min(minX, x - r);\n    }\n\n    return \n        (maxY >= height && minY <= 0.0) ||\n        (maxX >= width && minX <= 0.0) ||\n        (maxY >= height && maxX >= width) ||\n        (minY <= 0.0 && minX <= 0.0);\n}\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> graph(n);\n        \n        for (int i = 0; i < n; ++i) {\n            const auto& c1 = circles[i];\n            double x1 = CAST(c1[0]);\n            double y1 = CAST(c1[1]);\n            double r1 = CAST(c1[2]);\n            for (int j = i + 1; j < n; ++j) {\n                const auto& c2 = circles[j];\n                double x2 = CAST(c2[0]);\n                double y2 = CAST(c2[1]);\n                double r2 = CAST(c2[2]);\n                double dist2 = (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1);\n                if (dist2 > (r1 + r2) * (r1 + r2)) continue;\n                graph[i].push_back(j);\n                graph[j].push_back(i);\n            }\n        }\n\n        unordered_set<int> visited;\n        for (int i = 0; i < n; ++i) {\n            if (visited.count(i)) continue;\n            \n            unordered_set<int> component;\n            dfs(graph, i, component);\n\n            visited.insert(component.begin(), component.end());\n            if (isBlocking(circles, component, CAST(X), CAST(Y))) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n};\n\n#undef CAST\n#undef double",
    "submit_ts": "1722138210",
    "subm_id": "1335784970"
}