{
    "username": "lizju",
    "submission": "func countSubarrays(nums []int, k int) (ans int64) {\n\tmatrix := make([][]int, 0)\n\ttemp := []int{}\n\tfor i := 0; i < len(nums); i++ {\n\t\tif nums[i]&k != k {\n\t\t\tif len(temp) == 0 {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tmatrix = append(matrix, temp)\n\t\t\ttemp = []int{}\n\t\t} else {\n\t\t\ttemp = append(temp, nums[i])\n\t\t}\n\t}\n\tif len(temp) > 0 {\n\t\tmatrix = append(matrix, temp)\n\t}\n\tfor i := 0; i < len(matrix); i++ {\n\t\tans += solve(matrix[i], k)\n\t}\n\treturn\n}\nfunc solve(nums []int, k int) (ans int64) {\n\tmemo := map[int]int{}\n\tfor i := 0; i < len(nums); i++ {\n\t\tnewMemo := map[int]int{}\n\t\tnewMemo[nums[i]] = 1\n\t\tfor key, val := range memo {\n\t\t\tnewKey := key & nums[i]\n\t\t\tif newKey&k != k {\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tif _, ok := newMemo[newKey]; ok {\n\t\t\t\tnewMemo[newKey] += val\n\t\t\t} else {\n\t\t\t\tnewMemo[newKey] = val\n\t\t\t}\n\t\t}\n\t\tif v, ok := newMemo[k]; ok {\n\t\t\tans += int64(v)\n\t\t}\n\t\tmemo = newMemo\n\t}\n\treturn\n}",
    "submit_ts": "1720279505",
    "subm_id": "544567778"
}