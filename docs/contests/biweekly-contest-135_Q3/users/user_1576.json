{
    "username": "priyanshusrivastava770",
    "submission": "#include <vector>\n#include <map>\n#include <algorithm>\n#include <cmath>\n#include <limits>\n\nclass Solution {\npublic:\n    int minChanges(std::vector<int>& nums, int target) {\n        std::map<int, std::vector<int>> differenceMap;\n        std::vector<int> maxValues;\n\n        int n = nums.size();\n        for (int i = 0; i < n / 2; ++i) {\n            int firstNum = nums[i];\n            int secondNum = nums[n - i - 1];\n            int difference = std::abs(firstNum - secondNum);\n\n            int maxValue = std::max({firstNum, secondNum, target - firstNum, target - secondNum});\n            differenceMap[difference].push_back(maxValue);\n            maxValues.push_back(maxValue);\n        }\n\n        int minChanges = n;  \n        std::sort(maxValues.begin(), maxValues.end());\n\n        for (const auto& [difference, values] : differenceMap) {\n            int position = std::lower_bound(maxValues.begin(), maxValues.end(), difference) - maxValues.begin();\n            int totalChanges = position * 2 + (n / 2 - position);\n\n            for (const auto& maxValue : values) {\n                if (maxValue < difference) {\n                    totalChanges -= 2;\n                } else {\n                    totalChanges -= 1;\n                }\n            }\n\n            minChanges = std::min(minChanges, totalChanges);\n        }\n\n        return minChanges;\n    }\n};\n",
    "submit_ts": "1721489942",
    "subm_id": "1327468354"
}