{
    "username": "north-rav",
    "submission": "func countOfPeaks(nums []int, queries [][]int) []int {\n\tn := len(nums)\n\tfw := newFenwickTree(n)\n\tflag := make([]bool, n)\n\tfor i := 1; i < n-1; i++ {\n\t\tif nums[i] > nums[i-1] && nums[i] > nums[i+1] {\n\t\t\tfw.add(i+1, 1)\n\t\t\tflag[i] = true\n\t\t}\n\t}\n\tcheck := func(i int) {\n\t\tif i <= 0 || i >= n-1 {\n\t\t\treturn\n\t\t}\n\t\tif flag[i] {\n\t\t\tif nums[i] > nums[i+1] && nums[i] > nums[i-1] {\n\t\t\t\treturn\n\t\t\t} else {\n\t\t\t\tfw.add(i+1, -1)\n\t\t\t\tflag[i] = false\n\t\t\t}\n\t\t} else {\n\t\t\tif nums[i] > nums[i+1] && nums[i] > nums[i-1] {\n\t\t\t\tfw.add(i+1, 1)\n\t\t\t\tflag[i] = true\n\t\t\t}\n\t\t}\n\t}\n\tres := make([]int, 0)\n\tfor _, v := range queries {\n\t\tif v[0] == 1 {\n\t\t\tif v[1]+2 > v[2] {\n                res = append(res, 0)\n\t\t\t\tcontinue\n\t\t\t}\n\t\t\tt := fw.query(v[1]+2, v[2])\n\t\t\tres = append(res, t)\n\t\t} else {\n\t\t\ti := v[1]\n\t\t\tval := v[2]\n\t\t\tnums[i] = val\n\t\t\tcheck(i)\n\t\t\tcheck(i-1)\n\t\t\tcheck(i+1)\n\t\t}\n\t}\n\treturn res\n}\n\ntype fenwick []int\n\nfunc newFenwickTree(n int) fenwick {\n\treturn make([]int, n+1)\n}\nfunc (f fenwick) add(i, val int) {\n\tfor ; i < len(f); i += i & -i {\n\t\t//f[i] = max(val, f[i])\n\t\tf[i] += val\n\t}\n}\nfunc (f fenwick) pre(i int) (res int) {\n\tfor ; i > 0; i -= i & -i {\n\t\tres += f[i]\n\t\t//res = max(res, f[i])\n\t}\n\treturn\n}\nfunc (f fenwick) query(l, r int) int {\n\treturn f.pre(r) - f.pre(l-1)\n}",
    "submit_ts": 1718505876.0
}