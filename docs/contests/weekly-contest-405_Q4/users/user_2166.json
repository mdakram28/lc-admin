{
    "username": "hearthappy04",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <queue>\n#include <algorithm>\n#include <limits.h>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordInfo; // stores (index, cost) of words ending at this node\n    };\n    \n    void insert(TrieNode* root, const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordInfo.emplace_back(index, cost);\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // The cost to form an empty string is 0\n\n        // Build the Trie\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], i, costs[i]);\n        }\n\n        // Use a priority queue to process the most promising paths first\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq;\n        pq.emplace(0, 0); // (cost, position)\n\n        while (!pq.empty()) {\n            int currentCost = pq.top().first;\n            int i = pq.top().second;\n            pq.pop();\n\n            if (currentCost > dp[i]) {\n                continue; // Skip if this state is not optimal\n            }\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (node->children.find(c) == node->children.end()) {\n                    break;\n                }\n                node = node->children[c];\n                for (const auto& info : node->wordInfo) {\n                    int wordIndex = info.first;\n                    int wordCost = info.second;\n                    int len = words[wordIndex].length();\n                    if (j - i + 1 == len) {\n                        if (currentCost + wordCost < dp[j + 1]) {\n                            dp[j + 1] = currentCost + wordCost;\n                            pq.emplace(dp[j + 1], j + 1);\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323684",
    "subm_id": "1312381521"
}