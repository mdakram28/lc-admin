{
    "username": "Mit Patel",
    "submission": "class Solution {\n    int m,n;\n    long aa=3*(long)10e9;\n    long bb=(-1*aa)-3;\n    public long maximumValueSum(int[][] board) {\n         m=board.length;\n         n=board[0].length;\n        int x=n;\n        long dp[][][]=new long[board.length+1][board[0].length+1][board[0].length+1];\n\n        for(int i=0;i<dp.length;i++)\n        for(int j=0;j<dp[i].length;j++)\n        for(int k=0;k<dp[i].length;k++)\n        dp[i][j][k]=aa+1;\n       // Arrays.fill(dp[i][j],(long)3_000_000_002);\n       // System.out.println(bb);\n        return call(0,n,n,board,dp);\n\n    }\n    public long call(int ind,int pl1,int pl2,int [][]board,long dp[][][]){\n        if(ind>=board.length){\n            return bb;\n        }\n        \n        if(dp[ind][pl1][pl2]!=aa+1)return dp[ind][pl1][pl2];\n        \n        long nottake=call(ind+1,pl1,pl2,board,dp);\n        long take=bb;\n        for(int i=0;i<board[0].length;i++){\n            if(i!=pl1 && i!=pl2){\n                if(pl1==n){\n                    take=Math.max(take,board[ind][i]+call(ind+1,i,pl2,board,dp));\n                }else if(pl2==n){\n                    take=Math.max(take,board[ind][i]+call(ind+1,pl1,i,board,dp));\n                }else{\n               take=Math.max(take,board[ind][i]);\n                }\n            }\n        }\n\n        return dp[ind][pl1][pl2]=Math.max(take,nottake);\n\n    }\n}",
    "submit_ts": "1723909333",
    "subm_id": "1359188549"
}