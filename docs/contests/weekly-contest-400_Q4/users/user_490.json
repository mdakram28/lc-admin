{
    "username": "dharmaraghavasaishashank",
    "submission": "\nclass SegmentTree\n{\n    public:\n    vector<int>a,Tree;\n    SegmentTree(vector<int>v)\n    {\n        a=v;\n        Tree.resize(4*a.size()+1);\n        build(0,0,a.size()-1);\n    }\n    void build(int node,int s,int e)\n    {\n        if(s==e)\n        {\n            Tree[node]=a[s];\n            return;\n        }\n        int mid=(s+e)/2;\n        build(2*node+1,s,mid);\n        build(2*node+2,mid+1,e);\n        Tree[node]=Tree[2*node+1]&Tree[2*node+2];\n    }\n    int query(int node,int s,int e,int l,int r)\n    {\n        if(s>r||e<l)\n            return INT_MAX;\n        if(l<=s&&r>=e)\n            return Tree[node];\n        int mid=(s+e)/2;\n        int q1 = query(2*node+1,s,mid,l,r);\n        int q2 = query(2*node+2,mid+1,e,l,r);\n        return q1&q2;\n    }\n    void update(int node,int s,int e,int ind,int val)\n    {\n        if(s==e)\n        {\n            a[ind]=val;\n            Tree[node]=val;\n            return;\n        }\n        int mid=(s+e)/2;\n        if(ind<=mid)\n            update(2*node+1,s,mid,ind,val);\n        else   \n            update(2*node+2,mid+1,e,ind,val);\n        Tree[node]=Tree[2*node+1]&Tree[2*node+2];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n=nums.size();\n        SegmentTree seg(nums);\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int l=i-1,r=n-1, mid;\n            while (r-l>1) \n            {\n                mid = (l+r)/2;\n                if (seg.query(0,0,n-1,i,mid)>=k)\n                    l=mid;\n                else\n                    r=mid;\n            }\n            if (l!=i-1)\n                ans=min(ans,abs(k-seg.query(0,0,n-1,i,l)));\n            ans=min(ans, abs(k-seg.query(0,0,n-1,i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717298939",
    "subm_id": "1274796491"
}