{
    "username": "suraj_0491",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int alpha, vector<vector<int>>& beta) {\n        const int zeta = 400;\n        const int delta = 1e9+7;\n       // const int zeta = 400;\n        unordered_map<int, int> gamma;\n        \n        // Initialize gamma map using while loop\n        int idx = 0;\n        while (idx < beta.size()) {\n            vector<int>& eta = beta[idx];\n            gamma[eta[0] + 1] = eta[1]; // Store required values from beta into gamma map\n            idx++;\n        }\n        \n        vector<vector<long>> pelta(alpha + 1, vector<long>(zeta + 1, 0));\n        pelta[0][0] = 1; // Base case: There is one way to have 0 items with 0 inversions\n        \n        int len = 1;\n        while (len <= alpha) {\n            int iverse = 0;\n            while (iverse <= zeta) {\n                int pos = 0;\n                while (pos < len) {\n                    int p_iverse = iverse - pos; // Calculate the previous inversion count\n                    if (p_iverse >= 0) {\n                        pelta[len][iverse] = (pelta[len][iverse] + pelta[len - 1][p_iverse]) % delta;\n                        // Accumulate permutations considering previous inversions\n                    }\n                    pos++;\n                }\n                iverse++;\n            }\n            \n            if (gamma.count(len)) {\n                \n                int makka_iverse = gamma[len]; // Retrieve required inversion count\n                int iverse = 0;\n                \n                while (iverse <= zeta) {\n                    if (iverse != makka_iverse) {\n                        pelta[len][iverse] = 0; // Set permutations to 0 for non-matching inversions\n                    }\n                    iverse++;\n                }\n            }\n            \n            len++;\n        }\n        \n        // Calculate and return result using solve function\n        return solve(pelta, alpha, delta);\n    }\n    \nprivate:\n    int solve(vector<vector<long>>& pelta, int alpha, int delta) {\n        \n        long answer = 0;\n        int idx = 0;\n        \n        while (idx < pelta[alpha].size()) {\n            \n            long eta = pelta[alpha][idx];\n            answer = (answer + eta) % delta; // Sum up all valid permutations and take modulo\n            idx++;\n        }\n        return answer; // Return the final computed answer\n    }\n};\n",
    "submit_ts": 1719071398.0
}