{
    "username": "Hakermann",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        ios_base::sync_with_stdio(0), cin.tie(0), cout.tie(0);\n\n        map<int, short> obstacles;\n        vector<bool> result;\n        vector<vector<int>> unsucc;\n\n        for(int i = 0; i < queries.size(); i++){\n            if(queries[i][0] == 1){\n                obstacles[queries[i][1]] = 1;\n                continue;\n            }\n\n            // querie of type 2\n            int size = queries[i][2];\n            int max = queries[i][1];\n            int min = 0;\n            bool succ = false;\n            bool skip = false;\n\n            for(int j = 0; j < unsucc.size(); j++){\n                if(unsucc[j][0] <= size && unsucc[j][1] >= max){\n                    result.push_back(false);\n                    skip = true;\n                    break;\n                }\n            }\n            if(skip){\n                continue;\n            }\n\n            for(auto val : obstacles){\n                if(val.first > max){\n                    break;\n                }\n                if(val.first - min >= size){\n                    succ = true;\n                    break;\n                } else {\n                    min = val.first;\n                }\n            }\n            if(!succ && max - min >= size){\n                succ = true;\n            }\n            if(!succ){\n                vector<int> tmp = {size, max};\n                unsucc.push_back(tmp);\n            }\n            result.push_back(succ);\n        }\n        return result;\n    }\n};",
    "submit_ts": 1716652364.0
}