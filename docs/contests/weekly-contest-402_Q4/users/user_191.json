{
    "username": "lniiwuw",
    "submission": "template <typename T>\nclass FenwickTree {\nprivate:\n    int n;\n    std::vector<T> v;\npublic:\n    FenwickTree(int n) : n(n), v(n, 0) {}\n    void update(int x, T y) {\n        x += 1;\n        for (; x <= n; x += x & -x) {\n            v[x - 1] += y;\n        }\n    }\n    \n    T query(int x) {\n        x = std::min(x, n - 1);\n        T sum = 0;\n        x += 1;\n        for (; x > 0; x -= x & -x) {\n            sum += v[x - 1];\n        }\n        return sum;\n    }\n\n    T rangeQuery(int l, int r) {\n        return query(r) - query(l - 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& queries) {\n        int n = a.size();\n        \n        FenwickTree<int> fw(n);\n        for (int i = 1; i < n - 1; i++) {\n            if (a[i] > a[i - 1] && a[i] > a[i + 1]) {\n                fw.update(i, 1);\n            }\n        }\n        \n        auto query = [&] (int l, int r) {\n            return fw.rangeQuery(l, r);\n        };\n        \n        auto get = [&] (int x) {\n            if (x == 0 || x == n - 1) return 0;\n            return (int)(a[x] > a[x - 1] && a[x] > a[x + 1]);\n        };\n        \n        vector<int> ans;\n        for (auto k : queries) {\n            int op = k[0], idx = k[1], v = k[2];\n            if (op == 1) {\n                int l = idx, r = v;\n                if (r - l + 1 <= 2) {\n                    ans.push_back(0);\n                } else {\n                    ans.push_back(fw.rangeQuery(l + 1, r - 1));\n                }\n            } else {\n                int x = a[idx];\n                if (idx == 0) {\n                    int a1 = query(idx + 1, idx + 1);\n                    a[idx] = v;\n                    int a2 = get(idx + 1);\n                    fw.update(idx + 1, a2 - a1);\n                } else if (idx == n - 1) {\n                    int a1 = query(idx - 1, idx - 1);\n                    a[idx] = v;\n                    int a2 = get(idx - 1);\n                    fw.update(idx - 1, a2 - a1);\n                } else {\n                    vector<int> v1(3), v2(3);\n                    for (int j = 0; j < 3; j++) {\n                        v1[j] = query(idx - 1 + j, idx - 1 + j);\n                    }\n                    \n                    a[idx] = v;\n                    v2[0] = get(idx - 1), v2[1] = get(idx), v2[2] = get(idx + 1);\n                    for (int j = 0; j < 3; j++) {\n                        fw.update(idx - 1 + j, v2[j] - v1[j]);\n                    }\n                }\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1718506995.0
}