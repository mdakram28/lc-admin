{
    "username": "escaryninja",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         vector<pair<int, char>> cuts;\n        \n        for (int i = 0; i < m - 1; ++i) {\n            cuts.emplace_back(horizontalCut[i], 'H');\n        }\n        \n        for (int j = 0; j < n - 1; ++j) {\n            cuts.emplace_back(verticalCut[j], 'V');\n        }\n        \n        // Sort cuts by cost in descending order\n        sort(cuts.rbegin(), cuts.rend());\n        \n        int horizontalPieces = 1, verticalPieces = 1;   \n        long long  totalCost = 0;\n        \n    \n        for (const auto& cut : cuts) {\n            int cost = cut.first;\n            char type = cut.second;\n            \n            if (type == 'H') {\n                totalCost += cost *1LL* verticalPieces;\n                ++horizontalPieces;\n            } else {\n                totalCost += cost *1LL* horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926536",
    "subm_id": "1320289091"
}