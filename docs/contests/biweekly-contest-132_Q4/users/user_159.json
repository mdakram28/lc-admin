{
    "username": "frogmaster",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        map<int, vector<int> > m;\n        //vector< vector<int> > dp(n, vector<int>(k+1, 1));\n        vector<int> best_so_far(k+1, 0);\n        int ans = 0;\n        for(int i = 0; i < n; i++)\n        {\n            int cur = nums[i];\n            bool been_before = (m.find(cur) != m.end());\n            vector<int> new_best = best_so_far;\n            vector<int> ith_best = vector<int>(k + 1, 1);\n            vector<int> old_best;\n            if(been_before)\n            {\n                old_best = m[cur];\n                ith_best = old_best;\n            }\n            for(int j = 0; j <= k; j++)\n            {\n                if(j > 0)\n                {\n                    new_best[j] = max(new_best[j], best_so_far[j-1] + 1);\n                    ith_best[j] = max(ith_best[j], best_so_far[j-1] + 1);\n                }\n                if(been_before)\n                {\n                    new_best[j] = max(new_best[j], m[cur][j] + 1);\n                    ith_best[j] = max(ith_best[j], old_best[j] + 1);\n                }\n            }\n            m[cur] = ith_best;\n            for(int j = 0; j <= k; j++)\n            {\n                new_best[j] = max(new_best[j], ith_best[j]);\n            }\n            best_so_far = new_best;\n        }\n        for(int i = 0; i <= k; i++)\n        {\n            ans = max(ans, best_so_far[i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717860855",
    "subm_id": "1281771624"
}