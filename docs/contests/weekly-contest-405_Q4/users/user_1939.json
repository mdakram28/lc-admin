{
    "username": "Chirag_Birla",
    "submission": "struct Node{\n     Node* links[26];\n     bool flag=false;\n     vector<pair<int,int>>res;\n     \n     bool containsKey(char ch){\n       return links[ch-'a']!=NULL;\n     }\n     void put(char ch,Node* node){\n       links[ch-'a']=node;\n     }\n     Node* get(char ch){\n       return links[ch-'a'];\n     }\n     void setEnd(){\n         flag=true;\n     }\n     bool isEnd(){\n         return flag;\n     }\n};    \n    \n class Trie{\n public: Node* root;\n\n    public:\n\n    Trie(){\n        root = new Node();\n      }\n\n    void insert(const string &word,int ind,int cost){\n        Node* node=root;\n        for(int i=0;i<word.size();i++){\n            if(!node->containsKey(word[i])){\n                node->put(word[i],new Node());\n            }\n            node=node->get(word[i]);\n        }\n        node->res.push_back({ind,cost});\n        node->setEnd();\n    }\n };\n\nclass Solution {\npublic:\n    int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n        Trie* obj = new Trie();\n        // unordered_map<string,int>m;\n        // for(int i=0;i<words.size();i++){\n        //     if(m.count(words[i])){\n        //      int p=m[words[i]];\n        //      m[words[i]]=min(p,costs[i]);\n        //     }\n        //     else m[words[i]]=(costs[i]);\n        // }\n        for(int i=0;i<words.size();i++)obj->insert(words[i],i,costs[i]);\n        int n=s.size();\n        vector<int>dp(n+1,INT_MAX);\n        dp[0]=0;\n        Node* root=obj->root;\n        for(int i=0;i<n;i++){\n            if(dp[i]==INT_MAX)continue;\n            Node* node=root;\n            for(int j=i;j<n;j++){\n                if(!node->containsKey(s[j]))break;\n                node=node->get(s[j]);\n                if(node->isEnd()){\n                     for(auto it:node->res){\n                      int ind=it.first;\n                      int cost=it.second;\n                      int len=words[ind].size();\n                      if(i+len<=n){\n                        dp[i+len]=min(dp[i+len],dp[i]+cost);\n                      }\n                     }\n                }\n            }\n        }\n      if(dp[n]==INT_MAX)return -1;\n      return dp[n];\n    }\n};",
    "submit_ts": "1720324710",
    "subm_id": "1312406093"
}