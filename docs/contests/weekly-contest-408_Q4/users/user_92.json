{
    "username": "tungduong150105",
    "submission": "using i64 = long long;\nstruct DSU {\n    bool small_to_large;\n    std::vector<int> f;\n    DSU(int m = 0, bool _small_to_large = false) {\n        init(m, _small_to_large);\n    }\n    void init(int m, bool _small_to_large) {\n        small_to_large = _small_to_large;\n        f.assign(m, -1);\n    }\n    int leader(int x) {\n        if (f[x] < 0) {\n            return x;\n        }\n        return f[x] = leader(f[x]);\n    }\n    int size(int x) {\n        return -f[leader(x)];\n    }\n    bool same(int u, int v) {\n        return leader(u) == leader(v);\n    }\n    bool merge(int u, int v) {\n        u = leader(u), v = leader(v);\n        if (u == v) {\n            return false;\n        }\n        if (small_to_large && f[u] > f[v]) {\n            std::swap(u, v);\n        }\n        f[u] += f[v];\n        f[v] = u;\n        return true;\n    }\n};\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& a) {\n        int n = (int) a.size();\n        DSU dsu(n);\n        for (int i = 0; i < n; ++i) {\n            for (int j = i + 1; j < n; ++j) {\n                i64 x = a[i][0], y = a[i][1], fx = a[i][2];\n                i64 x2 = a[j][0], y2 = a[j][1], fx2 = a[j][2];\n                if (x >= 0 && x <= X && y >= 0 && y <= Y && x2 >= 0 && x2 <= X && y2 >= 0 && y2 <= Y) {\n                    i64 d = (x - x2) * (x - x2) + (y - y2) * (y - y2);\n                    i64 d2 = (fx + fx2) * (fx + fx2);\n                    // if (i == 0 && j == 3) {\n                    //     std::cout << \"gg\" << d << \" \" << d2 << \"\\n\";\n                    // }\n                    if (d2 >= d) {\n                        dsu.merge(i, j);\n                    }\n                }\n            }\n        }\n        std::vector<int> minx(n, 1E9), maxx(n, 0), miny(n, 1E9), maxy(n, 0);\n        for (int i = 0; i < n; ++i) {\n            int f = dsu.leader(i);\n            int x = a[i][0], y = a[i][1], fx = a[i][2];\n            if (x >= 0 && x <= X && y >= 0 && y <= Y) {\n                minx[f] = std::min(minx[f], x - fx);\n                maxx[f] = std::max(maxx[f], x + fx);\n                miny[f] = std::min(miny[f], y - fx);\n                maxy[f] = std::max(maxy[f], y + fx);\n            }\n        }\n        bool ok = true, ok2 = true, ok3 = true, ok4 = true, ok5 = true, ok6 = true;\n        for (int i = 0; i < n; ++i) {\n            if (minx[i] <= 0 && maxx[i] >= X) {\n                ok = false;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            if (miny[i] <= 0 && maxy[i] >= Y) {\n                ok2 = false;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            if (maxx[i] >= X && maxy[i] >= Y) {\n                ok3 = false;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            if (minx[i] <= 0 && miny[i] <= 0) {\n                ok4 = false;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            i64 x = a[i][0], y = a[i][1], fx = a[i][2];\n            i64 d = x * x + y * y;\n            i64 d2 = fx * fx;\n            if (d2 >= d) {\n                ok5 = false;\n            }\n        }\n        for (int i = 0; i < n; ++i) {\n            i64 x = a[i][0], y = a[i][1], fx = a[i][2];\n            i64 d = (X - x) * (X - x) + (Y - y) * (Y - y);\n            i64 d2 = fx * fx;\n            if (d2 >= d) {\n                ok6 = false;\n            }\n        }\n        // for (int i = 0; i < n; ++i) {\n        //     std::cout << minx[i] << \" \" << maxx[i] << \"\\n\";\n        // }\n        if (ok && ok2 && ok3 && ok4 && ok5 && ok6) {\n            return true;\n        }\n        return false;\n    }\n};",
    "submit_ts": "1722136585",
    "subm_id": "1335739010"
}