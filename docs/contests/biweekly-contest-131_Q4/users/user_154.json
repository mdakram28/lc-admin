{
    "username": "arpitras",
    "submission": "class Solution {\npublic:\n    \nint t[1000000];\nint lazy[1000000];\n void update(int tidx, int al , int ar, int npos)\n    {\n        if(al==ar)\n        {\n            t[tidx]=npos ;\n            return ;\n        }\n        int mid= al + (ar-al)/2;\n        if(npos<=mid)\n        {\n            update(2*tidx, al, mid, npos);\n        }\n        else\n        {\n            update(2*tidx+1, mid+1,ar,npos);\n        }\n        t[tidx]= max( t[2*tidx], t[2*tidx+1]);\n    }\nvoid push(int v) {\n    t[v*2] += lazy[v];\n    lazy[v*2] += lazy[v];\n    t[v*2+1] += lazy[v];\n    lazy[v*2+1] += lazy[v];\n    lazy[v] = 0;\n}\n\nvoid update(int v, int tl, int tr, int l, int r, int addend) \n{\n    if (l > r) \n        return;\n    if (l == tl && tr == r) \n    {\n        t[v] -= addend;\n        lazy[v] -= addend;\n    } else {\n        push(v);\n        int tm = (tl + tr) / 2;\n        update(v*2, tl, tm, l, min(r, tm), addend);\n        update(v*2+1, tm+1, tr, max(l, tm+1), r, addend);\n        t[v] = max(t[v*2], t[v*2+1]);\n    }\n}\n\nint query(int v, int tl, int tr, int l, int r) {\n    if (l > r)\n        return -1e9;\n    if (l == tl && tr == r)\n        return t[v];\n    push(v);\n    int tm = (tl + tr) / 2;\n    return max(query(v*2, tl, tm, l, min(r, tm)), \n               query(v*2+1, tm+1, tr, max(l, tm+1), r));\n}\n\n    vector<bool> getResults(vector<vector<int>>& queries) \n    {\n         // update(1,1,5,2,3,2);\n        int x=0;\n        for(int i=0;i<queries.size();i+=1)\n            x= max(x, queries[i][1]);\n        \n        for(int i=1;i<=x;i+=1)\n            update(1,1,x+5,i);\n        \n        set<int> next;\n        next.insert(0);\n        next.insert(x+2);\n        vector<bool> ans;\n        for(auto p:queries)\n        {\n            if(p[0]==1)\n            {\n                // build obstacle\n                int lq= p[1];\n                int rq=*( next.upper_bound(lq));\n                //cout<<lq<<\" \"<<rq<<endl;\n                auto it= next.upper_bound(lq);\n                it--;\n                int diff= lq- (*it);\n                update(1,1,x+5,lq+1,rq,diff); \n                next.insert(p[1]);\n            }\n            else\n            if(p[0]==2)\n            {\n                int xx= query(1,1,x+5,1,p[1]);\n               // cout<<xx<<endl;\n                if(xx>=p[2])\n                    ans.push_back(1);\n                else\n                    ans.push_back(0);\n            }\n        }\n       \n        return ans;\n    }\n};",
    "submit_ts": "1716650541",
    "subm_id": "1267618264"
}