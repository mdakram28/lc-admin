{
    "username": "Nelson84",
    "submission": "static constexpr int ALPHA_SIZE = 26;\nclass trie_node{\npublic:\n    int cost;\n    trie_node* next[ALPHA_SIZE];\n    trie_node(){\n        for(int i=0; i<ALPHA_SIZE; i++) next[i] = nullptr;\n        cost = -1;\n    }\n\n    void insert(const string word, const int cost){\n        trie_node* node = this;\n        for(auto& ch: word){\n            int cur = ch-'a';\n            if(!node->next[cur]) node->next[cur] = new trie_node();\n            node = node->next[cur];\n        }\n        if(node->cost==-1) node->cost = cost;\n        else node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        unordered_map<int, int> len_to_min_cost;\n        trie_node* root = new trie_node();\n        int n = words.size();\n        for(int i=0; i<n; i++){\n            root->insert(words[i], costs[i]);\n\n            int len = words[i].size();\n            if(len_to_min_cost.find(len)==len_to_min_cost.end()) len_to_min_cost[len] = costs[i];\n            else len_to_min_cost[len] = min(len_to_min_cost[len], costs[i]);\n        }\n\n        int m = target.size();\n        int dp[m+1];\n        for(int i=0; i<m; i++) dp[i] = INT_MAX/2;\n        dp[m] = 0;\n        for(int i=m-1; i>=0; i--){\n            trie_node* node = root;\n            for(int j=i; j<m; j++){\n                int cur = target[j]-'a';\n                if(!node->next[cur]) break;\n\n                node = node->next[cur];\n                if(node->cost!=-1){\n                    //printf(\"i:%d j:%d\\n\", i, j);\n                    dp[i] = min(dp[i], dp[j+1]+node->cost);\n                }\n            }\n        }\n        return dp[0]==INT_MAX/2 ?-1 :dp[0];\n    }\n};",
    "submit_ts": "1720322491",
    "subm_id": "1312351341"
}