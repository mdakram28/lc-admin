{
    "username": "agrim07",
    "submission": "#define MOD 1000000007\n#define INF INT_MAX\n#define endl \"\\n\"\n#define pb push_back\n#define ppb pop_back\n#define ff first\n#define ss second\n#define sz(x) ((int)(x).size())\n#define all(x) (x).begin(), (x).end()\n\nclass Solution {\npublic:\n    vector<vector<int>> adj;\n    vector<int> depth;\n    vector<int> times;\n\n    void pre(int u, int par = 0) {\n        for(auto &v: adj[u]) {\n            if (v == par)\n                continue;\n            pre(v, u);\n            if(v & 1)\n                depth[u] = max(depth[u], 1 + depth[v]);\n            else\n                depth[u] = max(depth[u], 2 + depth[v]);\n        }\n    }\n\n    void dfs(int u, int par = 0) {\n        int prev = depth[u];\n        if(u) {\n            times[u] = depth[u] = max(depth[u], ((par & 1) ? 1 : 2) + depth[par]);\n        }\n        \n        // if(u == 2) {\n        //     cout << u << endl;\n        //     for(auto &x: depth)\n        //         cout << x << \" \";\n        //     cout << endl;   \n        // }\n\n        multiset<int> st{0};\n        for(auto &v: adj[u]) {\n            st.insert(((v & 1) ? 1 : 2) + depth[v]);\n        }\n        \n        // if(u == 2) {\n        //     for(auto &x: st)\n        //         cout << x << \" \";\n        //     cout << endl;\n        // }\n\n        for(auto &v: adj[u]) {\n            if(v == par)\n                continue;\n            int currVal = ((v & 1) ? 1 : 2) + depth[v];\n            st.erase(st.find(currVal));\n            depth[u] = *st.rbegin();\n\n            dfs(v, u);\n\n            st.insert(currVal);\n        }\n\n        depth[u] = prev;\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = sz(edges) + 1;\n\n        depth.clear(); depth.resize(n);\n        times.clear(); times.resize(n);\n        adj.clear(); adj.resize(n);\n\n        for(auto &x: edges) {\n            int u = x[0];\n            int v = x[1];\n\n            adj[u].pb(v);\n            adj[v].pb(u);\n        }\n\n        pre(0);\n\n        times[0] = depth[0];\n\n        dfs(0);\n\n        return times;\n    }\n};",
    "submit_ts": "1722700141",
    "subm_id": "1343232885"
}