{
    "username": "kartikangrish",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& adjacency, int startNode, int target1, int target2, int numNodes) {\n        queue<int> q;\n        vector<int> visited(numNodes + 4, 0);\n        q.push(startNode);\n        visited[startNode] = 1;\n\n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            for (int neighbor : adjacency[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<pair<pair<int, int>, int>> circleData(numCircles);\n        vector<vector<int>> graph(numCircles + 4);\n\n        for (int i = 0; i < numCircles; ++i) {\n            circleData[i].first.first = circles[i][0];\n            circleData[i].first.second = circles[i][1];\n            circleData[i].second = circles[i][2];\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            if (circleData[i].first.first <= circleData[i].second) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - circleData[i].first.first <= circleData[i].second) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circleData[i].first.second <= circleData[i].second) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - circleData[i].first.second <= circleData[i].second) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circleData[i].first.first - circleData[j].first.first, 2) +\n                                       pow(circleData[i].first.second - circleData[j].first.second, 2));\n                int radiusSum = circleData[i].second + circleData[j].second;\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n        isBlocked = max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n\n        return !isBlocked;\n    }\n};\n",
    "submit_ts": "1722137534",
    "subm_id": "1335766537"
}