{
    "username": "Mark",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    char max_digit[100001][7];\n    char non_zero_max_digit[100001][7];\n    int next_modulus[100001][7];\n    int non_zero_next_modulus[100001][7];\n\n    string largestPalindrome(int length, int modulus) {\n        if (modulus == 1 || modulus == 3 || modulus == 9) {\n            return string(length, '9');\n        }\n\n        if (modulus == 2) {\n            if (length == 1) {\n                return \"8\";\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            return result;\n        }\n\n        if (modulus == 5) {\n            if (length == 1) {\n                return \"5\";\n            }\n            string result(length, '9');\n            result[0] = '5';\n            result[length - 1] = '5';\n            return result;\n        }\n\n        if (modulus == 4) {\n            if (length <= 3) {\n                return string(length, '8');\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            result[1] = '8';\n            result[length - 2] = '8';\n            return result;\n        }\n\n        if (modulus == 8) {\n            if (length <= 5) {\n                return string(length, '8');\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            result[1] = '8';\n            result[length - 2] = '8';\n            result[2] = '8';\n            result[length - 3] = '8';\n            return result;\n        }\n\n        if (modulus == 6) {\n            if (length == 1) {\n                return \"6\";\n            }\n            if (length == 2) {\n                return \"66\";\n            }\n            if (length == 3) {\n                return \"888\";\n            }\n            string result(length, '9');\n            result[0] = '8';\n            result[length - 1] = '8';\n            if (length % 2 == 1) {\n                result[length / 2] = '8';\n            } else {\n                result[length / 2] = '7';\n                result[(length / 2) - 1] = '7';\n            }\n            return result;\n        }\n\n        if (modulus == 7) {\n            if (length == 1) {\n                return \"7\";\n            }\n\n            fill(&max_digit[0][0], &max_digit[0][0] + sizeof(max_digit), 0);\n            fill(&non_zero_max_digit[0][0], &non_zero_max_digit[0][0] + sizeof(non_zero_max_digit), 0);\n\n            for (int i = 1; i < 10; ++i) {\n                max_digit[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    non_zero_max_digit[1][i % 7] = '0' + i;\n                }\n            }\n\n            int base_mod = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && max_digit[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int new_mod = (base_mod * digit + digit + j * 10) % 7;\n                        if (max_digit[i + 2][new_mod] == 0 || max_digit[i + 2][new_mod] < '0' + digit) {\n                            max_digit[i + 2][new_mod] = '0' + digit;\n                            next_modulus[i + 2][new_mod] = j;\n                        }\n                        if (digit == 0) continue;\n                        if (non_zero_max_digit[i + 2][new_mod] == 0 || non_zero_max_digit[i + 2][new_mod] < '0' + digit) {\n                            non_zero_max_digit[i + 2][new_mod] = '0' + digit;\n                            non_zero_next_modulus[i + 2][new_mod] = j;\n                        }\n                    }\n                }\n                base_mod = (base_mod * 10) % 7;\n            }\n            for (int i = 0; i < 1000; ++i) {\n            int x = i % 3; \n            }\n\n            int remaining_length = length;\n            string front(1, non_zero_max_digit[remaining_length][0]);\n            string back(1, non_zero_max_digit[remaining_length][0]);\n            int mod = non_zero_next_modulus[remaining_length][0];\n            remaining_length -= 2;\n            while (remaining_length) {\n                front += max_digit[remaining_length][mod];\n                if (remaining_length > 1) back += max_digit[remaining_length][mod];\n                else break;\n                mod = next_modulus[remaining_length][mod];\n                remaining_length -= 2;\n            }\n            reverse(back.begin(), back.end());\n            return front + back;\n        }\n\n        for (int i = 0; i < 1000; ++i) {\n            int x = i % 3; \n        }\n\n        return \"\";\n    }\n};\n",
    "submit_ts": "1723952730",
    "subm_id": "1359803264"
}