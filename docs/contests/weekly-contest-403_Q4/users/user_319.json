{
    "username": "pipixia-9527",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n        int n = grid.length;\n        int m = grid[0].length;\n        int ans = 10000000;\n        System.out.println(n +\" \" +m);\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < m; j++) {\n                int s1 = 0, s2 = 0, s3 = 0;\n                // case 1\n                s1 = f(grid, 0, i, 0, m - 1);\n                s2 = f(grid, i + 1, n - 1, 0, j);\n                s3 = f(grid, i + 1, n - 1, j + 1, m - 1);\n                if(s1 >= 0 && s2 >= 0 && s3 >= 0) {\n                    ans = Math.min(ans, s1 + s2 + s3);\n                }\n                // case 2\n                s1 = f(grid, 0, i, 0, j);\n                s2 = f(grid, 0, i, j + 1, m - 1);\n                s3 = f(grid, i + 1, n - 1, 0, m - 1);\n                if(s1 >= 0 && s2 >= 0 && s3 >= 0) {\n                    ans = Math.min(ans, s1 + s2 + s3);\n                }\n                // case 3\n                s1 = f(grid, 0, i, 0, j);\n                s2 = f(grid, i + 1, n - 1, 0, j);\n                s3 = f(grid, 0, n - 1, j + 1, m - 1);\n                if(s1 >= 0 && s2 >= 0 && s3 >= 0) {\n                    ans = Math.min(ans, s1 + s2 + s3);\n                }\n                 // case 4\n                s1 = f(grid, 0, i, j + 1, m - 1);\n                s2 = f(grid, i + 1, n - 1, j + 1, m - 1);\n                s3 = f(grid, 0, n - 1, 0, j);\n                System.out.println(i +\" \"+j+\" \"+s1 +\" \" + s2 +\" \" + s3);\n                if(s1 >= 0 && s2 >= 0 && s3 >= 0) {\n                    ans = Math.min(ans, s1 + s2 + s3);\n                }\n            }\n        }\n        // System.out.println(f(grid, 0, 0, 1, m - 1));\n        // for(int j = 1; j <= m - 1; j++) {\n        //     System.out.print(grid[0][j] +\" \");\n        // }\n        //  System.out.println(f(grid, 0, 0, 1, m - 1));\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                  int s1 = 0, s2 = 0, s3 = 0;\n                // case 1\n                s1 = f(grid, 0, i, 0, m - 1);\n                s2 = f(grid, i + 1, j, 0, m - 1);\n                s3 = f(grid, j + 1, n - 1, 0, m - 1);\n                if(s1 >= 0 && s2 >= 0 && s3 >= 0) {\n                    ans = Math.min(ans, s1 + s2 + s3);\n                }\n            }\n        }\n         for(int i = 0; i < m; i++) {\n            for(int j = i + 1; j < m; j++) {\n                  int s1 = 0, s2 = 0, s3 = 0;\n                // case 1\n                s1 = f(grid, 0, n - 1, 0, i);\n                s2 = f(grid, 0, n - 1, i + 1, j);\n                s3 = f(grid, 0, n - 1, j + 1, m - 1);\n                if(s1 >= 0 && s2 >= 0 && s3 >= 0) {\n                    ans = Math.min(ans, s1 + s2 + s3);\n                }\n            }\n        }\n        return ans;\n    }\n     private int f(int[][] grid, int tu, int td, int tl, int tr) {\n        int n = grid.length;\n        int m = grid[0].length;\n        int l = m, r = -100, u = n, d = -100;\n        for(int i = tu; i <= td; i++) {\n            for(int j = tl; j <= tr; j++) {\n                if(grid[i][j] == 1) {\n                    l = Math.min(l, j);\n                    r = Math.max(j, r);\n                    u = Math.min(u, i);\n                    d = Math.max(d, i);\n                }\n            }\n        }\n        int x = Math.max(0, r - l + 1);\n        int y = Math.max(0, d - u + 1);\n         \n         if(x == 0 || y == 0) {\n             return -1;\n         }\n        return x * y;\n    }\n}",
    "submit_ts": 1719113138.0
}