{
    "username": "Vladislav",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if k == 8:\n            if n <= 6:\n                return \"8\" * n\n            half = \"8\" * 3 + \"9\" * (n // 2 - 3)\n            return half + (\"9\" if n % 2 == 1 else \"\") + half[:: - 1]\n        if k == 4:\n            if n <= 4:\n                return \"8\" * n\n            half = \"8\" * 2 + \"9\" * (n // 2 - 2)\n            return half + (\"9\" if n % 2 == 1 else \"\") + half[:: - 1]\n        if k == 2:\n            if n <= 2:\n                return \"8\" * n\n            half = \"8\" + \"9\" * (n // 2 - 1)\n            return half + (\"9\" if n % 2 == 1 else \"\") + half[:: - 1]\n        if k == 1 or k == 3 or k == 9:\n            return \"9\" * n\n        if k == 5:\n            if n <= 2:\n                return \"5\" * n\n            half = \"5\" + \"9\" * (n // 2 - 1)\n            return half + (\"9\" if n % 2 == 1 else \"\") + half[:: - 1]\n        \n        rems = [pow(10, i, k) for i in range(n - 1, - 1, - 1)]\n        hn = sum(divmod(n, 2))\n        appr = lambda arr: sum(rems[i] * arr[i if i < hn else hn - (i - hn + 1 + (n % 2))] for i in range(n)) % k == 0\n        ret = [9] * hn\n        if n > 5 and k == 6:\n            ret[0] = 8\n        i = len(ret) - 1\n        while not appr(ret):\n            while ret[i] == 0:\n                i -= 1\n            ret[i] -= 1\n            if i != len(ret) - 1:\n                i += 1\n                while i < len(ret) - 1:\n                    ret[i] = 9\n                    i += 1\n                ret[i] = 9\n        ret += ret[:len(ret) if n % 2 == 0 else len(ret) - 1][:: - 1]\n        return ''.join(map(str, ret))\n        ",
    "submit_ts": "1723952222",
    "subm_id": "1359791021"
}