{
    "username": "\u6709\u4eba\u89c6\u67af\u53f6\u4e3a\u534e\u7ae0",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<pair<int,int>>> v(board.size(), vector<pair<int,int>>());\n        for (int i = 0; i < board.size(); i++) {\n            for (int j = 0; j < board[i].size(); j++) {\n                v[i].push_back(make_pair(board[i][j], j));\n            }\n            sort(v[i].begin(), v[i].end(), [&](pair<int,int> a, pair<int,int> b) {\n                return a.first > b.first;\n            });\n        }\n        long long maxx = -3000000000;\n        for (int i = 0; i < v.size() - 2; i++) {\n            for (int j = i + 1; j < v.size() - 1; j++) {\n                for (int k = j + 1; k < v.size(); k++) {\n                    for (int a = 0; a < 3; a++) {\n                        for (int b = 0; b < 3; b++) {\n                            for (int c = 0; c < 3; c++) {\n                                if (v[i][a].second != v[j][b].second && v[i][a].second != v[k][c].second && v[j][b].second != v[k][c].second) {\n                                    maxx = max(maxx, (long long)v[i][a].first + v[j][b].first + v[k][c].first);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return maxx;\n\n    }\n};",
    "submit_ts": "1723906586",
    "subm_id": "556320590"
}