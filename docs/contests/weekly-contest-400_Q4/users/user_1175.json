{
    "username": "zeus_0790",
    "submission": "class Solution {\npublic:\n    void build_and(int node,int node_l,int node_r,vector<int> &tree,vector<int> &v){\n      if(node_l==node_r){\n        tree[node]=v[node_r];\n        return;\n      }\n      int mid=(node_l+node_r)/2;\n      build_and(2*node+1,node_l,mid,tree,v);\n      build_and(2*node+2,mid+1,node_r,tree,v);\n      tree[node]=tree[2*node+1]&tree[(node*2)+2];\n    }\n    int get_and(int node,int node_l,int node_r,int ql,int qr,vector<int> &tree,vector<int> &v){\n      if(node_l>=ql && node_r<=qr)return tree[node];\n      if(node_l>qr || node_r<ql)return (1<<30) - 1;\n      int mid=(node_l+node_r)/2;\n      return get_and(2*node+1,node_l,mid,ql,qr,tree,v) & get_and(2*node+2,mid+1,node_r,ql,qr,tree,v);\n    }\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans = INT_MAX;\n        vector<int> tree(4*n);\n        int mini = INT_MAX;\n        build_and(0,0,n - 1,tree,nums);\n        for(int i = 0 ; i < n ; i++){\n            int lo = 0;\n            int hi = n - i - 1;\n            int ans = hi;\n            while(lo <= hi){\n                int mid = (lo + hi) /2;\n                int h = get_and(0, 0 , n - 1,i,i + mid,tree,nums);\n                if(h <= k){\n                    ans = mid;\n                    hi = mid - 1;\n                }\n                else{\n                    lo = mid + 1;\n                }\n            }\n         //   cout << ans <<\" \";\n            \n            mini = min(mini,abs(k - get_and(0, 0 , n - 1,i,i + ans,tree,nums)));\n            if(ans != 0){\n                mini = min(mini,abs(k  - get_and(0, 0 , n - 1,i,i + ans - 1,tree,nums)));\n            }\n           \n        }\n            \n        return mini;\n    }\n};",
    "submit_ts": "1717299882",
    "subm_id": "1274826879"
}