{
    "username": "axlsdtkl",
    "submission": "const int N=100005;\nclass Solution {\npublic:\n    struct da{\n        int sum,l,r;\n    }t[N*4];\n    int a[N];\n    int sum,n,m,op,x,y;\n    void pushup(da &root,da &left,da &right){\n        root.sum=left.sum+right.sum;\n        root.l=left.l;\n        root.r=right.r;\n        if(left.r-1>=root.l&&left.r+1<=root.r){\n            if(a[left.r]>a[left.r-1]&&a[left.r]>a[left.r+1])root.sum++;\n        }\n        if(right.l-1>=root.l&&right.l+1<=root.r){\n            if(a[right.l]>a[right.l-1]&&a[right.l]>a[right.l+1])root.sum++;\n        }\n    }\n    void build(int w,int l,int r){\n        t[w].l=l;t[w].r=r;\n        if(l==r){\n            t[w].sum=0;\n            return;\n        }\n        int mid=(l+r)/2;\n        build(w*2,l,mid);\n        build(w*2+1,mid+1,r);\n        pushup(t[w],t[w*2],t[w*2+1]);\n    }\n    void modify(int w,int l,int r,int x,int y){\n        if(l==r){\n            a[l]=y;\n            return;\n        }\n        int mid=(l+r)/2;\n        if(x<=mid)modify(w*2,l,mid,x,y);\n        else modify(w*2+1,mid+1,r,x,y);\n        pushup(t[w],t[w*2],t[w*2+1]);\n    }\n    da query(int w,int l,int r,int ll,int rr){\n        \n        if(l>=ll&&r<=rr){\n            // cout<<\"l:\"<<l<<\" r:\"<<r<<\" ll:\"<<ll<<\" rr:\"<<rr<<\" sum:\"<<t[w].sum<<endl;\n            return t[w];\n        }\n        int mid=(l+r)/2;\n        if(rr<=mid)return query(w*2,l,mid,ll,rr);\n        if(ll>mid)return query(w*2+1,mid+1,r,ll,rr);\n        da res,left=query(w<<1,l,mid,ll,rr),right=query(w<<1|1,mid+1,r,ll,rr);\n        // cout<<\"res l:\"<<res.l<<\" res r:\"<<res.r<<\" left l:\"<<left.l<<\" left r:\"<<left.r<<\" right.l:\"<<right.l\n        //     <<\" right.r:\"<<right.r<<endl;\n        pushup(res,left,right);\n        // cout<<\"l:\"<<l<<\" r:\"<<r<<\" ll:\"<<ll<<\" rr:\"<<rr<<\" sum:\"<<res.sum<<endl;\n        return res;\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        for(int i=0;i<n;i++)a[i+1]=nums[i];\n        build(1,1,n);\n        int m=queries.size();\n        vector<int>res;\n        for(int i=0;i<m;i++){\n            int op=queries[i][0],l=queries[i][1],r=queries[i][2];\n            if(op==1){\n                l++;r++;\n                da ans=query(1,1,n,l,r);\n                res.push_back(ans.sum);\n            }else{\n                l++;\n                modify(1,1,n,l,r);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718508182.0
}