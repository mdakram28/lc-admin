{
    "username": "Tanmay_Khandelwal240",
    "submission": "struct tn { \n        unordered_map<char, tn*> child; \n        vector<pair<int, int>> wE;  \n    }; \n \n    class Trie { \n    public: \n        tn* root; \n        Trie() { root = new tn(); } \n \n        void insert(string& word, int index, int cost) { \n            tn* node = root; \n            for (char c : word) { \n                if (!node->child.count(c)) \n                    node->child[c] = new tn(); \n                node = node->child[c]; \n            } \n            node->wE.push_back({index, cost}); \n        } \n    }; \n \nclass Solution { \npublic: \n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) { \n        int n = target.size(); \n        vector<int> dp(n + 1, 1e9); \n        dp[0] = 0; \n \n        Trie trie; \n        for (int i = 0; i < words.size(); ++i) { \n            trie.insert(words[i], i, costs[i]); \n        } \n \n        for (int i = 0; i < n; ++i) { \n            if (dp[i] != 1e9){ \n                tn* node = trie.root; \n                for (int j = i; j < n; ++j) { \n                    if (!node->child.count(target[j])) break; \n                    node = node->child[target[j]]; \n                    for (auto& p : node->wE) {\n                        int len = words[p.first].size(); \n                        if (i + len <= n) { \n                            dp[i + len] = min(dp[i + len], dp[i] + p.second); \n                        } \n                    } \n                } \n            }\n        } \n \n        if(dp[n]==1e9)return -1;\n        else return dp[n];\n    } \n};",
    "submit_ts": "1720324471",
    "subm_id": "1312400318"
}