{
    "username": "chandrkant54",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Use max-heaps to process the largest cost first\n        priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n        long long totalCost = 0;\n        long long horizontalPieces = 1;\n        long long verticalPieces = 1;\n\n        while (!hCuts.empty() || !vCuts.empty()) {\n            if (!hCuts.empty() && (vCuts.empty() || hCuts.top() >= vCuts.top())) {\n                totalCost += hCuts.top() * verticalPieces;\n                hCuts.pop();\n                horizontalPieces++;\n            } else {\n                totalCost += vCuts.top() * horizontalPieces;\n                vCuts.pop();\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925858",
    "subm_id": "1320268484"
}