{
    "username": "user2000717",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.nums = nums\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n    \n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = self.is_peak(start)\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def is_peak(self, i):\n        if i == 0 or i == self.n - 1:\n            return 0\n        return 1 if self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1] else 0\n    \n    def update(self, index, value):\n        if self.nums[index] == value:\n            return  # No change needed\n        self.nums[index] = value\n        self.update_recursive(0, 0, self.n - 1, index)\n        if index > 0:\n            self.update_recursive(0, 0, self.n - 1, index - 1)\n        if index < self.n - 1:\n            self.update_recursive(0, 0, self.n - 1, index + 1)\n    \n    def update_recursive(self, node, start, end, idx):\n        if start == end:\n            self.tree[node] = self.is_peak(start)\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if idx <= mid:\n                self.update_recursive(left_child, start, mid, idx)\n            else:\n                self.update_recursive(right_child, mid + 1, end, idx)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, L, R):\n        return self.query_recursive(0, 0, self.n - 1, L, R)\n    \n    def query_recursive(self, node, start, end, L, R):\n        if R < start or L > end:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_sum = self.query_recursive(left_child, start, mid, L, R)\n        right_sum = self.query_recursive(right_child, mid + 1, end, L, R)\n        return left_sum + right_sum\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        seg_tree = SegmentTree(nums)\n        result = []\n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if li == ri or ri - li == 1:\n                    result.append(0)\n                else:\n                    result.append(seg_tree.query(li + 1, ri - 1))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                seg_tree.update(indexi, vali)\n        return result",
    "submit_ts": "1718507030",
    "subm_id": "1289638925"
}