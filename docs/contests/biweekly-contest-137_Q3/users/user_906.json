{
    "username": "Cavalier Poet",
    "submission": "from random import random\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        # Mine in a contest.\n        largest_row = []\n        guaranteed = Counter()\n        largest_nns = [-inf, -inf, -inf]\n        for r, row in enumerate(board):\n            rxx = sorted([(val, c) for c, val in enumerate(row)])[-3:]\n            for aaaaa, bbbbb in rxx:\n                if aaaaa <= largest_nns[-1]:\n                    continue\n                elif aaaaa <= largest_nns[-2]:\n                    largest_nns[-1] = aaaaa\n                elif aaaaa <= largest_nns[-3]:\n                    largest_nns[-2], largest_nns[-1] = aaaaa, largest_nns[-2]\n                elif aaaaa > largest_nns[-3]:\n                    largest_nns[-3], largest_nns[-2], largest_nns[-1] = aaaaa, largest_nns[-3], largest_nns[-2]\n            if rxx[0][0] == rxx[1][0] == rxx[2][0]:\n                if guaranteed[rxx[0][0]] == 3:\n                    continue\n                largest_row.append([(rxx[0][0], int(random() * 1_000_000))])\n                guaranteed[rxx[0][0]] += 1\n            else:\n                largest_row.append(rxx)\n        \n        # print(largest_nns, guaranteed)\n        self.max_possible = sum(largest_nns)\n        temp_tot = 0\n        while largest_nns:\n            if guaranteed[largest_nns[-1]]:\n                guaranteed[largest_nns[-1]] -= 1\n                temp_tot += largest_nns.pop()\n            else:\n                break\n        else:\n            return temp_tot\n        largest_row.sort(key=lambda x: min(-a for a, b in x))\n        self.found = False\n        @cache\n        def _r(idx=0, curr=0, a=None, b=None):\n            if idx == len(largest_row) or self.found:\n                return -inf\n            max_val = -inf\n            for val, col in sorted(largest_row[idx]):\n                if col is not a and col is not b:\n                    if a is not None and b is not None:\n                        max_val = max(max_val, curr + val)\n                    elif a is not None:\n                        max_val = max(max_val, _r(idx + 1, curr + val, a, col))\n                    else:\n                        max_val = max(max_val, _r(idx + 1, curr + val, col, b))\n            if max_val == self.max_possible:\n                self.found = True\n                return max_val\n            return max(max_val, _r(idx + 1, curr, a, b))\n        return _r()",
    "submit_ts": "1723910016",
    "subm_id": "1359214173"
}