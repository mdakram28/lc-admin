{
    "username": "lucasschnee2",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        seen = set()\n        \n        def intersects_x_axis(c):\n            x, y, r = c\n            \n            overlaps_origin_x = y - r <= 0 \n            overlaps_far_x = x + r >= X\n            return overlaps_origin_x or overlaps_far_x\n\n        def intersects_y_axis(c):\n            x, y, r = c\n            overlaps_origin_y = x - r <= 0 \n            overlaps_far_y = y + r >= Y  \n            return overlaps_origin_y or overlaps_far_y\n        \n        def circles_overlap(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            distance_squared = (x1 - x2) ** 2 + (y1 - y2) ** 2\n            radius_sum_squared = (r1 + r2) ** 2\n            return distance_squared <= radius_sum_squared\n        \n        def bfs_from_x_axis(src):\n            queue = deque([src])\n            seen.add(tuple(src))\n            \n            while queue:\n                cx, cy, r = queue.popleft()\n                if intersects_y_axis([cx, cy, r]):\n                    return True\n                \n                for c2 in circles:  \n                    if tuple(c2) not in seen and circles_overlap([cx, cy, r], c2):\n                        seen.add(tuple(c2))\n                        queue.append(c2)\n            \n            return False\n        \n        def bfs_from_y_axis(src):\n            queue = deque([src])\n            seen.add(tuple(src))\n            \n            while queue:\n                cx, cy, r = queue.popleft()\n                if intersects_x_axis([cx, cy, r]):\n                    return True\n                \n                for c2 in circles:  \n                    if tuple(c2) not in seen and circles_overlap([cx, cy, r], c2):\n                        seen.add(tuple(c2))\n                        queue.append(c2)\n            \n            return False\n        \n        \n        def overlaps_with_X_Y(c, X, Y):\n            x, y, r = c\n           \n            distance_squared = (X - x) ** 2 + (Y - y) ** 2 \n         \n            return distance_squared <= r ** 2\n\n        \n        for c in circles:\n            if overlaps_with_X_Y(c, X, Y):\n                return False\n            \n        for c in circles: \n            if intersects_x_axis(c) and intersects_y_axis(c):\n                return False\n            \n            \n            \n        \n        for c in circles:\n            if tuple(c) in seen:\n                continue\n            \n            seen.add(tuple(c))\n            \n            if intersects_x_axis(c):\n                if bfs_from_x_axis(c):\n                    return False\n                \n            if intersects_y_axis(c):\n                if bfs_from_y_axis(c):\n                    return False\n        \n        return True\n\n",
    "submit_ts": "1722138103",
    "subm_id": "1335782188"
}