{
    "username": "XCoder420",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ld long double\n#define all(x) (x).begin(), (x).end()\n#define INF 2e18\n#define vi  vector<int>\n#define vb  vector<bool>\n#define vc  vector<char>\n#define vvi vector<vector<int>>\n#define vvc vector<vector<char>> \n#define vvb vector<vector<bool>> \n#define vpi vector<pair<int,int>>\n#define ff first\n#define ss second\n#define pb push_back\n#define ppb pop_back\n#define pqb priority_queue<int>\n#define pqs priority_queue<int,vi,greater<int> >\n#define setbits(x) __builtin_popcountll(x)\n\nclass Trie {\npublic:\n    bool is_leaf;\n    Trie* children[26];\n    int cost;\n    Trie() {\n        this->is_leaf = false;\n        for(int i = 0; i < 26; i++)\n            this->children[i] = NULL;\n        this->cost = INT_MAX;\n    }\n        /** Inserts a word into the trie. */\n\n    void insert(string word, int cost) {\n        Trie* root = this;\n        for (int i = 0; i < word.length(); i++) {\n            int index = word[i] - 'a';\n            if (root->children[index] == NULL)\n                root->children[index] = new Trie();\n            root = root->children[index];\n        }\n        root->cost = min(cost, root->cost);\n        root->is_leaf = true;\n    }\n    /** Returns if the word is in the trie. */\n    bool search(string word) {\n        if (this == NULL)\n            return false;\n        Trie* root = this;\n        for(int i=0;i<word.length();i++)\n        {\n            int index = word[i] - 'a';\n            root = root->children[index];\n            if (root == NULL)\n                return false;\n        }\n        if (root->is_leaf)\n            return true;\n        return false;\n    }\n    \n    /** Returns if there is any word in the trie that starts with the given prefix. */\n    bool startsWith(string prefix) {\n        if (this == NULL)\n            return false;\n        Trie* root = this;\n        for(int i=0;i<prefix.length();i++)\n        {\n            int index = prefix[i] - 'a';\n            root = root->children[index];\n            if (root == NULL)\n                return false;\n        }\n        return true;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        vector<int> dp(n+1,0);\n        for(int i=1;i<=n;i++)dp[i]=2e9;\n        \n        Trie* trie = new Trie();\n        \n        for (int i = 0; i < words.size(); ++i) {\n            trie->insert(words[i], costs[i]);\n        }\n\n        for (int i=0;i<n;i++) {\n            if (dp[i]!=2e9) {\n                Trie* node = trie;\n                for (int j=i;j<n;j++) {\n                    char c = target[j];\n                    // cout<<c<<endl;\n                    if (!node->children[c - 'a']) break;\n                    node = node->children[c - 'a'];\n                    if (node->is_leaf) {\n                        // cout<<\"HERE\"<<endl;\n                        dp[j+1] = min(dp[j+1], dp[i] + node->cost);\n                    }\n                }\n            }\n        }   \n        // for(int i=0;i<n;i++)cout<<dp[i]<<\" \";\n        return (dp[n]==2e9?-1:dp[n]);\n    }\n};",
    "submit_ts": "1720323699",
    "subm_id": "1312381892"
}