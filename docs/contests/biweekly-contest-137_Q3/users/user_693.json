{
    "username": "john801205",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        vector<vector<pair<int, int>>> rows(m);\n        for (int i = 0; i < m; i++)\n            for (int j = 0; j < n; j++)\n                rows[i].push_back({board[i][j], j});\n        \n        for (int i = 0; i < m; i++)\n            sort(rbegin(rows[i]), rend(rows[i]));\n\n        long long res = LLONG_MIN;\n        for (int i1 = 0; i1 < m; i1++)\n        {\n            for (int i2 =i1+1; i2 < m; i2++)\n            {\n                for (int i3=i2+1; i3 < m; i3++)\n                {\n                    for (int j1 = 0; j1 < 3; j1++)\n                    {\n                        for (int j2 = 0; j2 < 3; j2++)\n                        {\n                            if (rows[i1][j1].second == rows[i2][j2].second)\n                                continue;\n\n                            for (int j3 = 0; j3 < 3; j3++)\n                            {\n                                if (rows[i1][j1].second == rows[i3][j3].second || rows[i2][j2].second == rows[i3][j3].second)\n                                    continue;\n\n                                res = max(res, 0LL + rows[i1][j1].first + rows[i2][j2].first + rows[i3][j3].first);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1723909176",
    "subm_id": "1359182472"
}