{
    "username": "a0983208130",
    "submission": "class UnionFind {\npublic:\n    vector<int> parent, rank;\n    UnionFind(int n) {\n        rank = vector<int>(n, 1);\n        parent = vector<int>(n);\n        for(int i = 0; i < n; i++) \n            parent[i] = i;\n    }\n    int find(int x) {\n        if(x == parent[x])\n            return x;\n        return parent[x] = find(parent[x]);\n    }\n    void union_(int x, int y) {\n        int p_x = find(x), p_y = find(y);\n        if(rank[p_x] < rank[p_y])\n            parent[p_x] = p_y;\n        else\n            parent[p_y] = p_x;\n        if(rank[p_x] == rank[p_y])\n            rank[p_x]++;\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        UnionFind uf(n);\n        for(int i = 0; i < n; i++) {\n            for(int j = 0; j < i; j++) {\n                int x1 = circles[i][0], x2 = circles[j][0];\n                int y1 = circles[i][1], y2 = circles[j][1];\n                int r1 = circles[i][2], r2 = circles[j][2];\n                long long d = (long long)(x1 - x2) * (x1 - x2) + (long long)(y1 - y2) * (y1 - y2), r = (long long)(r1 + r2) * (r1 + r2);\n                // cout << i << \" \" << j << \" \" << d << \" \" << r << endl;\n                if(d <= r) {\n                    uf.union_(i, j);\n                }\n            }\n        }\n        set<int> p;\n        for(int i = 0; i < n; i++) {\n            p.insert(uf.find(i));\n        }\n        for(auto& c: p) {\n            // cout << c << endl;\n            int min_x = circles[c][0] - circles[c][2], min_y = circles[c][1] - circles[c][2];\n            int max_x = circles[c][0] + circles[c][2], max_y = circles[c][1] + circles[c][2];\n            for(int i = 0; i < n; i++) {\n                if(uf.find(i) == c) {\n                    min_x = min(min_x, circles[i][0] - circles[i][2]);\n                    max_x = max(max_x, circles[i][0] + circles[i][2]);\n                    min_y = min(min_y, circles[i][1] - circles[i][2]);\n                    max_y = max(max_y, circles[i][1] + circles[i][2]);\n                }\n            }\n            // cout << min_x << \" \" << min_y << \" \" << max_x << \" \" << max_y << endl;\n            if(min_x <= 0 && max_x > 0 && min_y <= 0 && max_y > 0) {\n                return false;\n            }\n            if(min_x < X && max_x >= X && min_y < Y && max_y >= Y) {\n                return false;\n            }\n            if(min_x <= 0 && max_x >= X) {\n                return false;\n            }\n            if(min_y <= 0 && max_y >= Y) {\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138993",
    "subm_id": "1335805009"
}