{
    "username": "Arifrahaman",
    "submission": "class SegTree\n{\n    int[] t;\n    int n;\n\npublic\n    void init(int[] a)\n    {\n        n = a.length;\n        t = new int[4 * n];\n        build(a, 0, 0, n - 1);\n    }\n\npublic\n    void build(int[] a, int v, int tl, int tr)\n    {\n\n        //         if (tl == tr) {\n        //     t[v] = a[tl];\n        // } else {\n        //     int tm = (tl + tr) / 2;\n        //     build(a, v * 2 + 1, tl, tm);\n        //     build(a, v * 2 + 2, tm + 1, tr);\n        //     t[v] = t[v * 2 + 1] & t[v * 2 + 2];\n        // }\n        if (tl == tr)\n        {\n            t[v] = a[tl];\n        }\n        else\n        {\n            int tm = (tl + tr) / 2;\n            \n            \n            build(a, v * 2 + 1, tl, tm);\n            \n            \n            build(a, v * 2 + 2, tm + 1, tr);\n            t[v] = t[v * 2 + 1] & t[v * 2 + 2];\n        }\n    }\n\npublic\n    int query(int l, int r)\n    {\n        return rangeq(0, 0, n - 1, l, r);\n    }\n\n    \n    \n    \npublic\n    int rangeq(int v, int tl, int tr, int l, int r)\n    {\n        if (r < tl || tr < l)\n        {\n            return Integer.MAX_VALUE;\n        }\n        if (l <= tl && tr <= r)\n        {\n            return t[v];\n        }\n\n        int tm = (tl + tr) / 2;\n        int rightRes = rangeq(v * 2 + 2, tm + 1, tr, l, r);\n        int leftRes = rangeq(v * 2 + 1, tl, tm, l, r);\n\n        return leftRes & rightRes;\n    }\n}\n\n// public\n//     int rangeq(int v, int tl, int tr, int l, int r)\n//     {\n//         if (r < tl || tr < l)\n//         {\n//             return Integer.MAX_VALUE;\n//         }\n//         if (l <= tl && tr <= r)\n//         {\n//             return t[v];\n//         }\n\n//         int tm = (tl + tr) / 2;\n//         int rightRes = rangeq(v * 2 + 2, tm + 1, tr, l, r);\n//         int leftRes = rangeq(v * 2 + 1, tl, tm, l, r);\n\n//         return leftRes & rightRes;\n//     }\n// }\n\npublic class Solution\n{\npublic\n    int minimumDifference(int[] a, int k)\n    {\n        int minDiff = Integer.MAX_VALUE;\n        int n = a.length;\n        SegTree st = new SegTree();\n        st.init(a);\n    \n    \n    \n    \n        for (int i = 0; i < n; i++)\n        {\n            int left = i - 1;\n            int ri = n - 1;\n            while (ri - left > 1)\n            {\n                int mid = (left + ri) / 2;\n                if (st.query(i, mid) >= k)\n                {\n                    left = mid;\n                }\n                else\n                {\n                    ri = mid;\n                }\n            }\n            if (left != i - 1)\n            {\n\n\n\n                minDiff = Math.min(minDiff, diff(st.query(i, left), k));\n            }\n\n\n\n\n\n\n            minDiff = Math.min(minDiff, diff(k, st.query(i, ri)));\n        }\n        return minDiff;\n    }\n\n    \n    \nstatic\n    int diff(int a, int b)\n    {\n        return Math.abs(a - b);\n    }\n}\n",
    "submit_ts": "1717300672",
    "subm_id": "1274851333"
}