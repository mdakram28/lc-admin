{
    "username": "MSRishab007",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        memo = {}\n    \n        def calculateWays(currPosition, jumpLevel, wasLastDecrement):\n            if (currPosition > k + 1) or (wasLastDecrement and currPosition >= k + 1):\n                return 0\n\n            key = f\"{currPosition}_{jumpLevel}_{wasLastDecrement}\"\n            if key in memo:\n                return memo[key]\n\n            ways = 0\n            if currPosition == k:\n                ways = 1\n\n            backwardSteps = 0\n            if not wasLastDecrement and currPosition > 0:\n                backwardSteps = calculateWays(currPosition - 1, jumpLevel, True)\n\n            forwardSteps = calculateWays(currPosition + (1 << jumpLevel), jumpLevel + 1, False)\n\n            memo[key] = ways + backwardSteps + forwardSteps\n            return memo[key]\n\n        return calculateWays(1, 0, False)",
    "submit_ts": "1716089909",
    "subm_id": "1261854368"
}