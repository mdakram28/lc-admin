{
    "username": "quyse",
    "submission": "class Solution {\npublic:\n  bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n    int n = (int)circles.size();\n    int const topleft = n, bottomright = n + 1;\n    vector<vector<int>> e(n + 2);\n    auto add_edge = [&](int a, int b)\n    {\n      // cout << \"e \" << a << \" \" << b << \"\\n\";\n      e[a].push_back(b);\n      e[b].push_back(a);\n    };\n    for(int i = 0; i < n; ++i)\n    {\n      auto const& c = circles[i];\n      if(c[0] - c[2] <= 0 || c[1] + c[2] >= Y) add_edge(i, topleft);\n      if(c[0] + c[2] >= X || c[1] - c[2] <= 0) add_edge(i, bottomright);\n      for(int j = i + 1; j < n; ++j)\n      {\n        auto const& c2 = circles[j];\n        if(\n          (c[0] + 0LL - c2[0]) * (c[0] + 0LL - c2[0]) + (c[1] + 0LL - c2[1]) * (c[1] + 0LL - c2[1])\n          <=\n          (c[2] + 0LL + c2[2]) * (c[2] + 0LL + c2[2])\n        ) add_edge(i, j);\n      }\n    }\n\n    queue<int> q;\n    vector<bool> f(n + 2, false);\n    q.push(topleft);\n    f[topleft] = true;\n    while(!q.empty())\n    {\n      int i = q.front();\n      q.pop();\n      if(i == bottomright) return false;\n      for(int j = 0; j < (int)e[i].size(); ++j)\n      {\n        if(f[e[i][j]]) continue;\n        f[e[i][j]] = true;\n        q.push(e[i][j]);\n      }\n    }\n    return true;\n  }\n};",
    "submit_ts": "1722138414",
    "subm_id": "1335790145"
}