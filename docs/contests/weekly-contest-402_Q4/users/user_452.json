{
    "username": "time-v5",
    "submission": "class Solution {\n      public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> ans = new ArrayList<>();\n        SegTree tree = new SegTree(nums);\n        for (int[] q : queries) {\n            if (q[0] == 1) {\n                ans.add(tree.query(q[1], q[2]));\n            } else {\n                tree.update(q[1], q[2]);\n            }\n        }\n        return ans;\n    }\n\n    public class SegTree {\n        private int[][] info;\n        private int N;\n\n        public SegTree(int[] arr) {\n            N = arr.length;\n            info = new int[N << 2][];\n            build(arr, 1, N, 1);\n        }\n\n        public void build(int[] arr, int l, int r, int i) {\n            if (l == r) {\n                info[i] = new int[]{0, arr[l - 1], -1, arr[l - 1], -1};\n                return;\n            }\n            int m = (l + r) >> 1;\n            build(arr, l, m, i << 1);\n            build(arr, m + 1, r, i << 1 | 1);\n            info[i] = up(info[i << 1], info[i << 1 | 1]);\n        }\n\n        private int[] up(int[] left, int[] right) {\n            int a = left[4], b = left[3], c = right[1], d = right[2];\n            int[] ans = new int[5];\n            ans[0] = left[0] + right[0];\n            if (a == -1 && d == -1) {\n                ans[1] = b;\n                ans[2] = c;\n                ans[3] = c;\n                ans[4] = b;\n            } else if (a == -1) {\n                if (c > b && c > d) {\n                    ans[0]++;\n                }\n                ans[1] = b;\n                ans[2] = c;\n                ans[3] = right[3];\n                ans[4] = right[4];\n            } else if (d == -1) {\n                if (b > a && b > c) {\n                    ans[0]++;\n                }\n                ans[1] = left[1];\n                ans[2] = left[2];\n                ans[3] = c;\n                ans[4] = b;\n            } else {\n                if ((b > a && b > c) || (c > b && c > d)) {\n                    ans[0]++;\n                }\n                ans[1] = left[1];\n                ans[2] = left[2];\n                ans[3] = right[3];\n                ans[4] = right[4];\n            }\n            return ans;\n        }\n\n        public void update(int index, int value) {\n            update(index + 1, value, 1, N, 1);\n        }\n\n        private void update(int idx, int v, int l, int r, int i) {\n            if (l == r) {\n                info[i] = new int[]{0, v, -1, v, -1};\n                return;\n            }\n            int m = (l + r) >> 1;\n            if (idx <= m) {\n                update(idx, v, l, m, i << 1);\n            } else {\n                update(idx, v, m + 1, r, i << 1 | 1);\n            }\n            info[i] = up(info[i << 1], info[i << 1 | 1]);\n        }\n\n        public int query(int left, int right) {\n            return query(left + 1, right + 1, 1, N, 1)[0];\n        }\n\n        private int[] query(int L, int R, int l, int r, int i) {\n            if (L <= l && r <= R) {\n                return info[i];\n            }\n            int m = (l + r) >> 1;\n            if (R <= m) {\n                return query(L, R, l, m, i << 1);\n            }\n            if (L > m) {\n                return query(L, R, m + 1, r, i << 1 | 1);\n            }\n            return up(query(L, R, l, m, i << 1), query(L, R, m + 1, r, i << 1 | 1));\n        }\n    }\n}",
    "submit_ts": 1718507892.0
}