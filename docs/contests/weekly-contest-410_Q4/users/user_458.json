{
    "username": "kardeepakkumar",
    "submission": "class Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n        MOD = 10**9 + 7\n        minAhead = [float('inf') for _ in range(n)]\n        minimumValue = nums[-1]\n        for i in range(n-2, -1, -1):\n            minAhead[i] = minimumValue\n            minimumValue = min(minimumValue, nums[i])\n        \n        prevSplits = defaultdict(int)\n        prevSplits[0] = 1\n        prevValue = float('inf')\n\n        for i, num in enumerate(nums):\n            curSplits = defaultdict(int)\n            minHeap = []\n            for prevSplitKey in prevSplits.keys():\n                if min(minAhead[i], num) + 2 > max(prevSplitKey, num-(prevValue-prevSplitKey)):\n                    heapq.heappush(minHeap, (max(prevSplitKey, num-(prevValue-prevSplitKey)), prevSplits[prevSplitKey] % MOD))\n                    heapq.heappush(minHeap, (min(minAhead[i], num) + 1, -1*(prevSplits[prevSplitKey] % MOD)))\n            curTotal = 0\n            for curSplitKey in range(num+1):\n                while minHeap and minHeap[0][0] == curSplitKey:\n                    _, val = heapq.heappop(minHeap)\n                    curTotal = (curTotal + val)%MOD\n                if curTotal != 0:\n                    curSplits[curSplitKey] = curTotal % MOD\n            prevSplits = curSplits\n            prevValue = num\n\n        return (sum(prevSplits.values()) % MOD)",
    "submit_ts": "1723347685",
    "subm_id": "1351603579"
}