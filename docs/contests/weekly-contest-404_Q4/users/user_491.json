{
    "username": "ghostedshaman",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1, m = e2.size() + 1;\n        vector<vector<int>> adj1(n), adj2(m);\n\n        for (auto& edge : e1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (auto& edge : e2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        auto bfs = [](vector<vector<int>>& adj, int start, int& farthest) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            farthest = start;\n\n            while (!q.empty()) {\n                int node = q.front();\n                q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > dist[farthest]) {\n                            farthest = neighbor;\n                        }\n                    }\n                }\n            }\n            return dist[farthest];\n        };\n\n        int far1 = 0;\n        bfs(adj1, 0, far1);\n        int diam1 = bfs(adj1, far1, far1);\n\n        int far2 = 0;\n        bfs(adj2, 0, far2);\n        int diam2 = bfs(adj2, far2, far2);\n\n        int minDiam = max(diam1, diam2);\n        int half1 = (diam1 + 1) / 2;\n        int half2 = (diam2 + 1) / 2;\n        minDiam = max(minDiam, half1 + half2 + 1);\n\n        return minDiam;\n    }\n};",
    "submit_ts": "1719716048",
    "subm_id": "1304353562"
}