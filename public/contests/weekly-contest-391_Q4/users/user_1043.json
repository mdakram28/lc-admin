{
    "username": "cp_sud",
    "submission": "class Solution {\npublic:\n    \n    int MaxDist(vector<pair<int, int> >& A, int N)\n    {\n        // Vectors to store maximum and\n        // minimum of all the four forms\n        vector<pair<int,int>> V(N), V1(N);\n\n        for (int i = 0; i < N; i++) {\n            V[i] = {A[i].first + A[i].second,i};\n            V1[i] = {A[i].first - A[i].second,i};\n        }\n\n        sort(V.begin(), V.end());\n        sort(V1.begin(), V1.end());\n\n        int last_indx1 = V[N-1].second;\n        int last_indx2 = V1[N-1].second;\n        \n        //cout<<last_indx1 <<\" \"<<last_indx2 <<endl;\n        \n        vector<int>temp1,temp2;\n        \n        for(int i=0; i<N; i++){\n            if(i==last_indx1) {\n                continue;\n            }\n            temp1.push_back(A[i].first + A[i].second);\n            temp2.push_back(A[i].first - A[i].second);\n        }\n        \n         sort(temp1.begin(), temp1.end());\n         sort(temp2.begin(), temp2.end());\n        \n        int ans = max(temp1.back() - temp1.front(), temp2.back() - temp2.front());\n        \n        temp1.clear(); temp2.clear();\n        \n        for(int i=0; i<N; i++){\n            if(i==last_indx2) {\n                continue;\n            }\n            temp1.push_back(A[i].first + A[i].second);\n            temp2.push_back(A[i].first - A[i].second);\n        }\n        \n        sort(temp1.begin(), temp1.end());\n         sort(temp2.begin(), temp2.end());\n        \n        int kk = max(temp1.back() - temp1.front(), temp2.back() - temp2.front());\n        \n        ans = min(ans,kk);\n        //\n        \n        last_indx1 = V[0].second;\n        last_indx2 = V1[0].second;\n        \n        temp1.clear(); temp2.clear();\n        \n        for(int i=0; i<N; i++){\n            if(i==last_indx2) {\n                continue;\n            }\n            temp1.push_back(A[i].first + A[i].second);\n            temp2.push_back(A[i].first - A[i].second);\n        }\n        \n        sort(temp1.begin(), temp1.end());\n         sort(temp2.begin(), temp2.end());\n        \n        kk = max(temp1.back() - temp1.front(), temp2.back() - temp2.front());\n        ans = min(ans,kk);\n        \n        //\n        \n        temp1.clear(); temp2.clear();\n        \n        for(int i=0; i<N; i++){\n            if(i==last_indx1) {\n                continue;\n            }\n            temp1.push_back(A[i].first + A[i].second);\n            temp2.push_back(A[i].first - A[i].second);\n        }\n        \n        sort(temp1.begin(), temp1.end());\n         sort(temp2.begin(), temp2.end());\n        \n        kk = max(temp1.back() - temp1.front(), temp2.back() - temp2.front());\n         ans = min(ans,kk);\n        \n        return ans;\n\n        \n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        \n        vector<pair<int,int>>v;\n        \n        for(auto &pri:points){\n            v.push_back({pri[0],pri[1]});\n        }\n        int  n = points.size();\n        return MaxDist(v,n);\n        \n        \n        \n    }\n};"
}