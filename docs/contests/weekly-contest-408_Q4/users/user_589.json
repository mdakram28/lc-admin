{
    "username": "Egor000",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        List<int[]> adj = new ArrayList<>();\n        Set<Integer> ups = new HashSet<>();\n        Set<Integer> down = new HashSet<>();\n        for (int i = 0; i < circles.length; i++) {\n            if (interUP(i, X, Y, circles)) {\n                //System.out.println(\"here up:\" + i);\n                if (down.contains(i)) {\n                    return false;\n                }\n                ups.add(i);\n            } \n            if (interDOWN(i, X, Y, circles)) {\n                //System.out.println(\"here d:\" + i);\n                if (ups.contains(i)) {\n                    return false;\n                }\n                down.add(i);\n            }\n            for (int j = i + 1; j < circles.length; j++) {\n                if (intersect(i, j, circles)) {\n                    adj.add(new int[] {i, j});\n                }\n            }\n        }\n        if (down.isEmpty() || ups.isEmpty()) {\n            return true;\n        }\n        \n        int[] root = new int[circles.length];\n        int[] rank = new int[circles.length];\n        for (int i = 0; i < root.length; i++) {\n            root[i] = i;\n        }\n        for (int[] pair: adj) {\n            union(pair[0], pair[1], root, rank);\n        }\n        Set<Integer> rootup = new HashSet<>();\n        for (int up: ups) {\n            rootup.add(find(up, root));\n        }\n        for (int dow: down) {\n            int rootd = find(dow, root);\n            if (rootup.contains(rootd)) {\n                return false;\n            }\n        }\n        return true;\n        \n    }\n    \n    private boolean interDOWN(int i, int X, int Y, int[][] circles) {\n        int[] corr = circles[i];\n        if (corr[1] - corr[2] <= 0) {\n            return true;\n        }\n        if (corr[0] >= X && corr[0] - corr[2] <= X) {\n            return true;\n        } else if (corr[0] <= X && corr[0] + corr[2] >= X) {\n            return true;\n        }\n        return false;\n    }\n    \n    private boolean interUP(int i, int X, int Y, int[][] circles) {\n        int[] corr = circles[i];\n        //System.out.println(corr[0] + \" : \" + corr[2]);\n        if (corr[0] - corr[2] <= 0) {\n            return true;\n        }\n        if (corr[1] >= Y && corr[1] - corr[2] <= Y) {\n            return true;\n        } else if (corr[1] <= Y && corr[1] + corr[2] >= Y) {\n            return true;\n        }\n        return false;        \n    }\n    \n    \n    private boolean intersect(int x, int y, int[][] circles) {\n        int x_v = Math.abs(circles[x][0] - circles[y][0]);\n        int y_v = Math.abs(circles[x][1] - circles[y][1]);\n        return 1L*x_v*x_v + 1L*y_v*y_v <= 1L*(circles[x][2] + circles[y][2])*(circles[x][2] + circles[y][2]);\n    }\n    \n    private void union(int x, int y, int[] root, int[] rank) {\n        int rootx = find(x, root);\n        int rooty = find(y, root);\n        if (rootx == rooty) {\n            return;\n        }\n        if (rank[rootx] > rank[rooty]) {\n            root[rooty] = rootx;            \n        } else if (rank[rooty] > rank[rooty]) {\n            root[rootx] = rooty;\n        } else {\n            root[rooty] = rootx;            \n            rank[rootx]++;\n        }\n    }\n    \n    private int find(int x, int[] root) {\n        if (x == root[x]) {\n            return x;\n        }\n        return root[x] = find(root[x], root);\n    }\n}",
    "submit_ts": "1722137988",
    "subm_id": "1335779133"
}