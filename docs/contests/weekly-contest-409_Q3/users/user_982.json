{
    "username": "Deepanshu_30",
    "submission": "#include <vector>\n#include <set>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // Main method to process queries and return the result\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // Initialize the distance vector with sequential values\n        vector<int> zeus = initializeDistance(n);  // Distance vector\n        // Initialize the set with positions from 0 to n-1\n        set<int> hades = initializePositions(n);  // Positions set\n        \n        // Vector to store the results for each query\n        vector<int> apollo;\n        \n        // Process each query\n        for (const auto& athena : queries) {\n            int poseidonLeft = athena[0];  // Left bound of the query\n            int thorRight = athena[1];    // Right bound of the query\n\n            // Get the iterator to the first element not less than poseidonLeft + 1\n            auto hermesLower = getLowerBound(hades, poseidonLeft + 1);\n            // Get the iterator to the first element not less than thorRight\n            auto thorUpper = getUpperBound(hades, thorRight);\n\n            // Erase the elements in the range [poseidonLeft, thorRight)\n            hades.erase(hermesLower, thorUpper);\n\n            // Append the size of the positions set minus one to the result vector\n            apollo.push_back(hades.size() - 1);\n        }\n\n        return apollo;\n    }\n\nprivate:\n    // Method to initialize the distance vector with incremental values\n    vector<int> initializeDistance(int n) {\n        vector<int> distance(n, 0);  // Initialize with zeros\n        for (int i = 1; i < n; ++i) {\n            distance[i] = distance[i - 1] + 1;  // Set each value as previous value + 1\n        }\n        return distance;\n    }\n\n    // Method to initialize the positions set with values from 0 to n-1\n    set<int> initializePositions(int n) {\n        set<int> positions;  // Set to hold the positions\n        for (int i = 0; i < n; ++i) {\n            positions.insert(i);  // Insert each position from 0 to n-1\n        }\n        return positions;\n    }\n\n    // Method to get the lower bound iterator for a given value\n    set<int>::iterator getLowerBound(set<int>& positions, int value) {\n        return positions.lower_bound(value);  // Return iterator to first element >= value\n    }\n\n    // Method to get the upper bound iterator for a given value\n    set<int>::iterator getUpperBound(set<int>& positions, int value) {\n        return positions.lower_bound(value);  // Return iterator to first element >= value\n    }\n};\n",
    "submit_ts": "1722743714",
    "subm_id": "1343798014"
}