{
    "username": "unknown1313",
    "submission": "class Solution {\npublic:\n    int get_diameter(vector<vector<int>>& edges) {\n        int N = edges.size() + 1;\n        vector<int> adjlist[N];\n        for(auto x: edges) {\n            adjlist[x[0]].push_back(x[1]);\n            adjlist[x[1]].push_back(x[0]);\n        }\n        \n        int visit[N];\n        memset(visit, -1, sizeof visit);\n        int further = -1;\n        int dist_further = -1;\n        queue<int> q;\n        q.push(0);\n        visit[0] = 0;\n        \n        while(!q.empty()) {\n            int cur = q.front();\n            // cout << cur << \" \" << visit[cur] << endl;\n            q.pop();\n            \n            if (visit[cur] > dist_further) {\n                dist_further = visit[cur];\n                further = cur;\n            }\n            \n            for(auto next: adjlist[cur]) {\n                if (visit[next] == -1) {\n                    visit[next] = visit[cur] + 1;\n                    q.push(next);\n                }\n            }\n        }\n        \n        \n        memset(visit, -1, sizeof visit);\n        q.push(further);\n        visit[further] = 0;\n        while(!q.empty()) {\n            int cur = q.front();\n            q.pop();\n            \n            for(auto next: adjlist[cur]) {\n                if (visit[next] == -1) {\n                    visit[next] = visit[cur] + 1;\n                    q.push(next);\n                }\n            }\n        }\n        \n        int res = -1;\n        for(int i = 0; i < N; i++) res = max(res, visit[i]);\n        \n        return res;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int diameter1 = get_diameter(edges1);\n        int diameter2 = get_diameter(edges2);\n        // if (diameter1 == 2 && diameter2 == 2) {\n        //     return 3;\n        // }\n        // if ((diameter1 == 1 && diameter2 == 3) || (diameter1 == 3 && diameter2 == 1)) return 2;\n        // cout << diameter1 << \" \" << diameter2 << endl;\n        // int comb = ceil((diameter1 + 1 + diameter2) * 1.0 / 2.0);\n        int comb = (diameter1 + 1) / 2 + 1 + (diameter2 + 1) / 2;\n        // cout << diameter1 << \" \" << diameter2 << \" \" << comb << endl;\n        int res = max({diameter1, diameter2, comb});\n        return res;\n        // return 0;\n    }\n};",
    "submit_ts": "1719718938",
    "subm_id": "1304429799"
}