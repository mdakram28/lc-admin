{
    "username": "_global",
    "submission": "class Solution {\n    int dp[];\n    int xtime[];\n    int ans[];\n    public int[] timeTaken(int[][] edges) {\n        int n = edges.length+1;\n        ArrayList<Integer> graph[]=new ArrayList[n];\n        for(int i = 0;i<n;i++) graph[i]=new ArrayList<>();\n        for(int edge[] : edges){\n            int u = edge[0];\n            int v = edge[1];\n            graph[u].add(v);\n            graph[v].add(u);\n        }\n        dp = new int[n];\n        xtime = new int[n];\n        ans = new int[n];\n        dfs(graph,0,-1,0);\n        dfs2(graph,0,-1,0);\n        return ans;\n    }\n    public void dfs(ArrayList<Integer> graph[],int u,int pt,int time){\n        dp[u]=time;\n        xtime[u]=time;\n        for(int v : graph[u]){\n            if(v==pt) continue;\n            int ntime = (v%2==0) ? time+2 : time+1;\n            dfs(graph,v,u,ntime);\n            dp[u]=Math.max(dp[u],dp[v]);\n        }\n    }\n    public void dfs2(ArrayList<Integer> graph[],int u,int pt,int pt_value){\n        ans[u]=Math.max(pt_value,dp[u]-xtime[u]);\n        \n        int m = graph[u].size();\n        if(pt != -1) m--;\n        int left[]=new int[m];\n        int right[]=new int[m];\n        int t = 0;\n        for(int v  : graph[u]){\n            if(v==pt) continue;\n            left[t]=right[t]=(dp[v]-xtime[v])+(v%2==1 ? 1 : 2);\n            t++;\n        }\n        for(int i = 1;i<m;i++) left[i]=Math.max(left[i],left[i-1]);\n        for(int i=m-2;i>=0;i--) right[i]=Math.max(right[i],right[i+1]);\n        t = 0;\n        for(int v : graph[u]){\n            if(v==pt) continue;\n            int l = t==0 ? 0 : left[t-1];\n            int r = t==m-1 ? 0 : right[t+1];\n            int npt_value = Math.max(l,Math.max(r,pt_value))+1;\n            if(u%2==0) npt_value++;\n            dfs2(graph,v,u,npt_value);\n            t++;\n        }\n        \n    }\n}",
    "submit_ts": "1722698927",
    "subm_id": "1343196188"
}