{
    "username": "Mohanito",
    "submission": "class Solution {\npublic:\n    int maxOperations(string s) {\n        int n = s.length();\n        int count = 0;\n        for (char c : s) {\n            if (c == '1') {\n                count++;\n            }\n        }\n        int ans = 0;\n        // whenever there is a 0...01, all 1's on the left can be moved once.\n        // or ...0000 at the end\n        bool hasBound = true; // saw a 01 or just right bound\n        for (int i = n - 1; i >= 0; i--) {\n            if (s[i] == '0') {\n                if (hasBound) {\n                    ans += count;\n                    hasBound = false;\n                }\n                // the bound on the right has been consumed by other 0's\n            } else if (s[i] == '1') {\n                hasBound = true;\n                count--;\n            }\n            \n            // cout << ans << endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721530408",
    "subm_id": "1327932517"
}