{
    "username": "khalil192",
    "submission": "\nclass segmentTree{\n    public :\n        vector<int> segTree;\n        int n;\n        vector<int> arr;\n        segmentTree(vector<int>&a){\n            n = a.size();\n            arr = a;\n            segTree.resize(4*n+1);\n            buildSegTree(a,0,0,n-1);\n        }\n        void buildSegTree(vector<int>&a,int currIdx , int left , int right){\n            if(left == right){segTree[currIdx] = left;return;}\n            int middle = (left + right)/2;\n            buildSegTree(a,currIdx*2+1 , left , middle);\n            buildSegTree(a,currIdx*2+2 , middle+1 ,right);\n            segTree[currIdx] = func(segTree[currIdx*2+1] , segTree[currIdx*2+2]);\n        }\n        int query(int currIdx , int treeLeft , int treeRight,int left , int right){\n            if(right < treeLeft || left > treeRight){   return singleNonOverlappingReturn();} // not overlapping\n            if(treeLeft >= left && treeRight <= right){ return segTree[currIdx];    } // completely overlapping\n            int mid = (treeLeft + treeRight)/2;\n            return  func(query(currIdx*2+1,treeLeft,mid ,left,right) ,\n                         query(currIdx*2+2 ,mid+1,treeRight,left,right));\n        }\n        int rangeQuery(int l,int r){\n            return query(0,0,n-1,l,r);\n        }\n     \n        int func(int x,int y){\n            if(x >= arr.size()){\n                return y;\n            }\n            if(y >= arr.size()){\n                return x;\n            }\n            if(arr[x] < arr[y]){\n                return x;\n            }\n            return y;\n        }\n    \n        int singleNonOverlappingReturn(){\n            return arr.size() + 1;\n        }\n};\n\n\n\nclass Solution {\npublic:\n    \n    int sign(int x){\n        \n        int ans = 1;\n        if(x < 0){\n            ans = -1;\n        }\n        if(x == 0){\n            ans = 0;\n        }\n        \n        // cout<<x<<\" = \" <<ans <<\"\\n\";\n        \n        return ans;\n    }\n    \n    long long f(int i, int j,int opYet, segmentTree &st,vector<int>&need){\n\n        if(i > j || i >= need.size()){return 0LL;}\n        if(i == j){\n            // abs(need)-opYet\n            long long here = abs(need[i]) - opYet;\n            // cout<<\"single element \"<< i<<\" = \"<<here<<\"\\n\";\n            return here;\n        }\n        \n        \n        int minIdx = st.rangeQuery(i,j);\n        \n        // cout<<\"minIdx = \"<<minIdx<<\" arr[minIdx] = \"<<need[minIdx]<<\" from \"<<i<<\" \"<<j<<\"\\n\";\n        \n        long long here = need[minIdx] - opYet;\n        \n        return here + f(i,minIdx-1, opYet + here, st, need) + f(minIdx+1, j, opYet + here, st, need);\n    }\n    \n    long long solveFor(vector<int>& need, int x, int y){\n        // cout<<\"solving for \"<<x<<\" \"<<y<<\"\\n\";\n        vector<int> arr;\n        \n        for(int i = x;i<=y;i++){\n            if(i<y && sign(need[i]) != sign(need[i+1])){\n                // cout<<\"error with sign \"<<i<<\" \"<<x<<\" \"<<y<<\"\\n\";\n            }\n            arr.push_back(abs(need[i]));\n        }\n        \n        segmentTree st =  segmentTree(arr);\n        \n        long long here = f(0, arr.size()-1, 0, st, arr);\n        \n        return here;\n    }\n    \n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n\n        int n = nums.size();\n        vector<int> need(n);\n        \n        for(int i =0;i<n;i++){\n            need[i] = target[i] - nums[i];\n            // cout<<need[i]<<\" \";\n        }\n        // cout<<\"\\n\";\n        \n        long long ans = 0;\n        for(int i =0;i<n;){\n            int j = i;\n            while(j < n && sign(need[i]) == sign(need[j])){\n                j++;\n            }\n            // now solve for [i,j)\n            // cout<<\"solving for\"<<i<<\" \"<<j-1<<\"\\n\";\n            long long here = solveFor(need, i, j-1);\n            \n            ans += here;\n            \n            i = j;\n        }        \n        \n        \n        return ans;\n        \n        \n    }\n};",
    "submit_ts": "1721533576",
    "subm_id": "1328012038"
}