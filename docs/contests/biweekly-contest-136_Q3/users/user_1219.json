{
    "username": "aezara",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        n = len(grid)\n        m = len(grid[0])\n        ans = 0\n\n        # for r in range((n+1)//2):\n        #     for c in range((m+1)//2):\n        for r in range(n//2):\n            for c in range(m//2):\n                bits = [grid[r][c]]\n\n                if n-r-1 != r:\n                    bits.append(grid[n-r-1][c])\n                if m-c-1 != c:\n                    bits.append(grid[r][m-c-1])\n                if n-r-1 != r and m-c-1 != c:\n                    bits.append(grid[n-r-1][m-c-1])\n\n                # print(r,c,bits)\n                ans += min(sum(bits), len(bits) - sum(bits))\n        \n        # print(f\"first {ans=}\")\n\n        # middle middle bit must be 0\n        if n % 2 and m % 2:\n            ans += grid[n//2][m//2]\n            grid[n//2][m//2] = 0\n        \n\n        # print(f\"after flip middle {ans=}\")\n\n        # make middle row/col palindromic with multiple 4 of 1s\n        mismatches = 0\n        ones = 0\n        if n % 2:\n            r = n//2\n            ones += sum(grid[r])\n            for c in range((m+1)//2):\n                mismatches += grid[r][c] != grid[r][m-c-1]\n        if m % 2:\n            c = m//2\n            for r in range(n):\n                ones += grid[r][c]\n            for r in range((n+1)//2):\n                # print(f\"check {grid[r][c], grid[n-r-1][c]}\")\n                # print(r, n-r-1)\n                mismatches += grid[r][c] != grid[n-r-1][c]\n                \n        # print(f\"{mismatches=} {ones=}\")\n\n        flips = mismatches\n        if ones % 4 != 0 and mismatches < 1:\n            flips += 2\n        \n        # print(f\"{flips=}\")\n\n        return ans + flips\n",
    "submit_ts": "1722698740",
    "subm_id": "1343190244"
}