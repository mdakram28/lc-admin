{
    "username": "Keshav_360",
    "submission": "class Solution {\npublic:\n    int bfs(std::vector<std::vector<int>> &g, int start, int t1, int t2, int n) {\n        std::queue<int> q;\n        std::vector<int> vis(n + 4, 0);\n        q.push(start);\n        vis[start] = 1;\n    \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n         int numC = circles.size();\n        std::vector<std::pair<std::pair<int, int>, int>> c(numC);\n        std::vector<std::vector<int>> g(numC + 4);\n        \n        for (int i = 0; i < numC; ++i) {\n            c[i].first.first = circles[i][0];\n            c[i].first.second = circles[i][1];\n            c[i].second = circles[i][2];\n        }\n        \n        for (int i = 0; i < numC; ++i) {\n            if (c[i].first.first <= c[i].second) {\n                g[numC].push_back(i);\n                g[i].push_back(numC);\n            }\n            if (X - c[i].first.first <= c[i].second) {\n                g[numC + 2].push_back(i);\n                g[i].push_back(numC + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                g[numC + 1].push_back(i);\n                g[i].push_back(numC + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) {\n                g[numC + 3].push_back(i);\n                g[i].push_back(numC + 3);\n            }\n            for (int j = i + 1; j < numC; ++j) {\n                double dist = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                   pow(c[i].first.second - c[j].first.second, 2));\n                int rSum = c[i].second + c[j].second;\n                if (rSum >= dist) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n        \n        int answer_res = 0;\n        answer_res = std::max(answer_res, bfs(g, numC, numC + 1, numC + 2, numC + 4));\n        answer_res = std::max(answer_res, bfs(g, numC + 3, numC + 2, numC + 1, numC + 4));\n        \n        return !answer_res;\n    }\n};",
    "submit_ts": "1722138098",
    "subm_id": "1335782074"
}