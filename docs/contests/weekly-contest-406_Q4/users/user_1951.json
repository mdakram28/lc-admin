{
    "username": "adityakumaradk5",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        long long int totalCost = 0;\n        int horizontalParts = 1; // Initially, we have one horizontal piece\n        int verticalParts = 1;   // Initially, we have one vertical piece\n\n        int i = 0, j = 0;\n\n        // Process each cut in order of decreasing cost\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                totalCost += horizontalCut[i] * verticalParts;\n                horizontalParts++;\n                i++;\n            } else {\n                totalCost += verticalCut[j] * horizontalParts;\n                verticalParts++;\n                j++;\n            }\n        }\n\n        // Process the remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += horizontalCut[i] * verticalParts;\n            horizontalParts++;\n            i++;\n        }\n\n        // Process the remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += verticalCut[j] * horizontalParts;\n            verticalParts++;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926550",
    "subm_id": "1320289530"
}