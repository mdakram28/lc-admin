{
    "username": "divyanshubissa88",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> horizontalPQ = new PriorityQueue<>(Collections.reverseOrder());\n        PriorityQueue<Integer> verticalPQ = new PriorityQueue<>(Collections.reverseOrder());\n        for (int cut : horizontalCut) {\n            horizontalPQ.offer(cut);\n        }\n        for (int cut : verticalCut) {\n            verticalPQ.offer(cut);\n        }\n        int hSegments = 1;\n        int vSegments = 1;\n        long totalCost = 0;\n        while (!horizontalPQ.isEmpty() || !verticalPQ.isEmpty()) {\n            if (verticalPQ.isEmpty() || (!horizontalPQ.isEmpty() && horizontalPQ.peek() > verticalPQ.peek())) {\n                int cost = horizontalPQ.poll();\n                totalCost += (long) cost * vSegments;\n                hSegments++;\n            } else {\n                int cost = verticalPQ.poll();\n                totalCost += (long) cost * hSegments;\n                vSegments++;\n            }\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926076",
    "subm_id": "1320275238"
}