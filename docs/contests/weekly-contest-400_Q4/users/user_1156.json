{
    "username": "rajparikh03",
    "submission": "#define inf INT32_MAX\nint arr[100005];\nvector<int> seg; // always the length of segment tree as 4 times the number of elements in the array\nvoid initseg(int n){\n    seg.assign(4*n+4,0);\n}\n\nvoid buildseg(int index,int l,int r){\n    if(l==r){\n        seg[index] = arr[l];\n        return;\n    }\n\n    int mid = (l+r)/2;\n    buildseg(2*index,l,mid);\n    buildseg(2*index+1,mid+1,r);\n    seg[index] = seg[2*index] & seg[2*index+1];\n}\n\nvoid updateseg(int index,int l,int r,int pos,int val){\n    if(pos<l || pos>r) return;\n    if(l==r){\n        seg[index] = val;\n        arr[l] = val;\n        return;\n    }\n\n    int mid = (l+r)/2;\n    updateseg(2*index,l,mid,pos,val);\n    updateseg(2*index+1,mid+1,r,pos,val);\n    seg[index] = seg[2*index] & seg[2*index+1];\n}\n\nint queryseg(int index,int l,int r,int lq,int rq){\n    if(l>rq || lq>r) return inf;\n    if(l>=lq && r<=rq) return seg[index];\n    int mid = (l+r)/2;\n    return queryseg(2*index,l,mid,lq,rq) & queryseg(2*index+1,mid+1,r,lq,rq);\n}\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        initseg(n);\n        for(int i=0;i<n;i++){\n            arr[i] = nums[i];\n        }\n        buildseg(1,0,n-1);\n        int ans = inf;\n        for(int i=0;i<n;i++){\n            int l = i-1,r = n-1;\n            while(r-l>1){\n                int mid = (l+r)/2;\n                if(queryseg(1,0,n-1,i,mid)>=k){\n                    l = mid;\n                }\n                else{\n                    r = mid;\n                }\n            }\n            if(l!=i-1){\n                ans = min(ans,abs(queryseg(1,0,n-1,i,l)-k));\n            }\n            ans = min(ans,abs(k-queryseg(1,0,n-1,i,r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717300099.0
}