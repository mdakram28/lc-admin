{
    "username": "hejiawei0926",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<int[]> pq = new PriorityQueue<>((a,b) -> b[0] - a[0]);\n        int idx = 0,row = 1, col = 1;\n        long res = 0;\n        for (int i : horizontalCut) {\n            int[] set = new int[]{i, idx, 0};\n            pq.add(set);\n            idx++;\n        }\n        idx = 0;\n        for (int i : verticalCut) {\n            int[] set = new int[]{i, idx, 1};\n            pq.add(set);\n            idx++;\n        }\n        while (!pq.isEmpty()) {\n            int[] set = pq.poll();\n            if (set[2] == 1) {\n                row++;\n                res += col * set[0];\n            } else {\n                col++;\n                res += row * set[0];\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1720926143",
    "subm_id": "1320277278"
}