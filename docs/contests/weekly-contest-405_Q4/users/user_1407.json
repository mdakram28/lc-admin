{
    "username": "Nag_3869195020",
    "submission": "class Solution {\n    class Trie{\n        Trie children[];\n        int cost;\n        public Trie(){\n            children = new Trie[26];\n            cost = Integer.MAX_VALUE;\n        }\n    }\n\n    Trie root = new Trie();\n\n    void insert(String word, int cost){\n        Trie temp = root;\n        int len = word.length();\n        for(int i = 0; i < len; i++){\n            char s = word.charAt(i);\n            if(temp.children[s - 'a'] == null) temp.children[s - 'a'] = new Trie();\n            temp = temp.children[s - 'a'];\n        }\n        temp.cost = Math.min(temp.cost, cost);\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        for(int i = words.length - 1; i >= 0; i--){\n            insert(words[i], costs[i]);\n        }\n\n        int dp[] = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for(int i = 0; i < n; i++){\n            if(dp[i] == Integer.MAX_VALUE) continue;\n            Trie temp = root;\n            for(int j = i; j < n; j++){\n                char c = target.charAt(j);\n                if(temp.children[c - 'a'] == null) break;\n                temp = temp.children[c - 'a'];\n                if(temp.cost != Integer.MAX_VALUE) dp[j + 1] = Math.min(dp[j + 1], dp[i] + temp.cost);\n            }\n        }\n        return (dp[n] == Integer.MAX_VALUE) ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720322948",
    "subm_id": "1312363393"
}