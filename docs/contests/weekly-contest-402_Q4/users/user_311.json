{
    "username": "thesycat",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        peaks = []\n        for i in range(1, len(nums)-1):\n            if nums[i+1] < nums[i] > nums[i-1]:\n                peaks.append(i)\n\n        def ispeak(i):\n            return 0 < i < len(nums)-1 and nums[i-1] < nums[i] > nums[i+1]\n                \n        def updatepeak(i, waspeak, ispeak):\n            if waspeak and not ispeak:\n           #     print(\"DELPEAK:\", i)\n                idx = bisect.bisect_left(peaks, i)\n                del peaks[idx]\n            elif ispeak and not waspeak:\n            #    print(\"ADDPEAK:\", i)\n                bisect.insort(peaks, i)\n                \n        out = []\n        #print(\"--------------------------\")\n    \n        for query in queries:\n         #   print(\"N:\", nums, \"P:\", peaks)\n         #   print(\"Q:\",query)\n            if query[0] == 1:\n                _, l, r = query\n\n                li = bisect.bisect_right(peaks, l)\n                ri = bisect.bisect_left(peaks, r)\n                out.append(max(0, ri-li))             \n            \n            else:\n                _, i, v = query\n                \n                a_peak = ispeak(i-1)\n                b_peak = ispeak(i)\n                c_peak = ispeak(i+1)\n                \n                nums[i] = v\n                \n                a_peak2 = ispeak(i-1)\n                b_peak2 = ispeak(i)\n                c_peak2 = ispeak(i+1)\n                \n                \n                updatepeak(i-1, a_peak, a_peak2)\n                updatepeak(i, b_peak, b_peak2)\n                updatepeak(i+1, c_peak, c_peak2)\n                \n                \n       # print(\"N:\", nums, \"P:\", peaks)\n\n        return out\n                    \n                    \n                    \n                \n            ",
    "submit_ts": 1718507144.0
}