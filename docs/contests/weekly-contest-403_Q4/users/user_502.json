{
    "username": "Semi__colon",
    "submission": "#include <vector>\n#include <climits>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        \n        vector<vector<vector<vector<vector<int>>>>> dp(n, vector<vector<vector<vector<int>>>>(n + 1, vector<vector<vector<int>>>(m + 1, vector<vector<int>>(m, vector<int>(4, -1)))));\n        \n        auto calculateCost = [&](int i1, int i2, int j1, int j2) -> int {\n            int frow = n-1, lrow = 0;\n            int fcol = m-1, lcol = 0;\n            \n            for (int i = i1; i <= i2; i++) {\n                for (int j = j1; j <= j2; j++) {\n                    if (grid[i][j]) {\n                        frow = min(frow, i);\n                        lrow = max(lrow, i);\n                        fcol = min(fcol, j);\n                        lcol = max(lcol, j);\n                    }\n                }\n            }\n            \n            if (frow > lrow || fcol > lcol) return 0;\n            return (lrow - frow + 1) * (lcol - fcol + 1);\n        };\n        \n        function<int(int, int, int, int, int)> solve = [&](int i1, int i2, int j1, int j2, int cuts) -> int {\n            if (cuts == 0) return calculateCost(i1, i2, j1, j2);\n            \n            if (dp[i1][i2][j1][j2][cuts] != -1) return dp[i1][i2][j1][j2][cuts];\n            \n            int minCost = INT_MAX;\n            \n            // Try horizontal cuts\n            for (int i = i1; i < i2; i++) {\n                int cost1 = calculateCost(i1, i, j1, j2) + solve(i + 1, i2, j1, j2, cuts - 1);\n                minCost = min(minCost, cost1);\n            }\n            \n            for(int i = i2; i > i1; i--){\n                int cost1 = calculateCost(i, i2, j1, j2) + solve(i1, i - 1, j1, j2, cuts - 1);\n                minCost = min(minCost, cost1);\n            }\n            \n            // Try vertical cuts\n            for (int j = j1; j < j2; j++) {\n                int cost1 = calculateCost(i1, i2, j1, j) +  solve(i1, i2, j + 1, j2, cuts - 1);\n                minCost = min(minCost, cost1);\n            }\n            \n            for(int j = j2; j > j1; j--){\n                int cost1 = calculateCost(i1, i2, j, j2) + solve(i1, i2, j1, j - 1, cuts - 1);\n                minCost = min(minCost, cost1);\n            }\n            \n            return dp[i1][i2][j1][j2][cuts] = minCost;\n        };\n        \n        return solve(0, n - 1, 0, m - 1, 2);  \n    }\n};\n",
    "submit_ts": 1719113818.0
}