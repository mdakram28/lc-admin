{
    "username": "sarthak97",
    "submission": "class Solution {\npublic:\n    int getPower(int x, int y)\n    {\n        int temp;\n        if (y == 0)\n            return 1;\n        temp = getPower(x, y / 2);\n        if (y % 2 == 0)\n            return temp * temp;\n        else\n            return x * temp * temp;\n    }\n    \n    int func(int k, int curr, int jump, bool wentDown, map<pair<pair<long long int, long long int>, bool>, long long int> &dp) {\n        if(curr > k+1)\n            return 0;\n        \n        int ans = 0;\n        if(curr == k)\n            ans++;\n        \n        if (dp.find({{curr, jump}, wentDown}) != dp.end())\n            return dp[{{curr, jump}, wentDown}];\n        \n        \n        // option 1: go down\n        if(wentDown == false && curr > 0)\n            ans += func(k, curr-1, jump, true, dp);\n        \n        // option 2: make a jump\n        long long int next = curr + getPower(2, jump);\n        ans += func(k, next, jump+1, false, dp);\n        \n        return dp[{{curr, jump}, wentDown}] = ans;\n    }\n    \n    int waysToReachStair(int k) {\n        map<pair<pair<long long int, long long int>, bool>, long long int> dp;\n        int ans = func(k, 1, 0, false, dp);\n        return ans;\n    }\n};",
    "submit_ts": "1716089001",
    "subm_id": "1261830251"
}