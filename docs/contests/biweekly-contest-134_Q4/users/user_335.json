{
    "username": "vipbaswan",
    "submission": "typedef long long int ll;\nclass SegmentTree {\nprivate:\n    vector<int> t;\n    \npublic:\n    SegmentTree(int n) {\n        t.resize(4*n);\n    }\n    \n    void build(vector<int>& a, int v, int tl, int tr) {\n        if (tl == tr) {\n            t[v] = a[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(a, v*2, tl, tm);\n            build(a, v*2+1, tm+1, tr);\n            t[v] = t[v*2] & t[v*2+1];\n        }\n    }\n    \n    int getAnd(int v, int tl, int tr, int l, int r) {\n        if (l > r) {\n            return ((1<<30) - 1);\n        }\n        if (l == tl && r == tr) {\n            return t[v];\n        }\n        int tm = (tl + tr) / 2;\n        int left = getAnd(v*2, tl, tm, l, min(r, tm));\n        int right = getAnd(v*2+1, tm+1, tr, max(l, tm+1), r);\n        // cout<<left<<\" \"<<right<<\" \"<<(left&right)<<endl;\n        return left & right;\n    }\n};\n\nclass Solution {\npublic:\n    ll countSubarrays(vector<int>& nums, int k) {\n        ll ans = 0;\n        int n = nums.size();\n        \n        SegmentTree* tree = new SegmentTree(n);\n        tree->build(nums, 1, 0, n-1);\n        \n        // cout<<tree->getAnd(1, 0, n-1, 0, 1)<<endl;\n        // cout<<tree->getAnd(1, 0, n-1, 1, 2)<<endl;\n        \n        for(int i=0; i<n; i++) {\n            \n            int lo = i, hi = n-1, x = n, y = -1;\n            \n            while(lo<=hi) {\n                int mid = lo + (hi - lo)/2;\n                \n                int subAnd = tree->getAnd(1, 0, n-1, i, mid);\n                \n                if(subAnd > k) {\n                    lo = mid+1;\n                } else {\n                    if(subAnd == k) {\n                        x = min(x, mid);\n                    }\n                    hi = mid-1;\n                }\n            }\n            \n            lo = i, hi = n-1;\n            while(lo <= hi) {\n                int mid = lo + (hi - lo)/2;\n                \n                int subAnd = tree->getAnd(1, 0, n-1, i, mid);\n                \n                if(subAnd >= k) {\n                    if(subAnd == k) {\n                        y = max(y, mid);\n                    }\n                    lo = mid+1;\n                } else {\n                    hi = mid-1;\n                }\n            }\n            \n            // cout<<i<<\" \"<<x<<\" \"<<y<<endl; \n            \n            if(x != n && y != -1) {\n                ans += (y-x+1);\n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720278610",
    "subm_id": "1311716629"
}