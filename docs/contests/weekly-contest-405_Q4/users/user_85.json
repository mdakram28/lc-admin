{
    "username": "Kashaf_",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> children;\n    vector<pair<int, int>> word_indices;\n    \n    TrieNode() : children(26, nullptr) {}\n};\n\nclass Solution {\npublic:\n    TrieNode* buildTrie(vector<string>& words) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (int j = words[i].length() - 1; j >= 0; j--) {\n                int c = words[i][j] - 'a';\n                if (!node->children[c]) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->word_indices.emplace_back(words[i].length(), i);\n        }\n        return root;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n        \n        TrieNode* root = buildTrie(words);\n        \n        for (int i = 1; i <= n; i++) {\n            TrieNode* node = root;\n            for (int j = i - 1; j >= 0; j--) {\n                int c = target[j] - 'a';\n                if (!node->children[c]) break;\n                node = node->children[c];\n                for (auto& [len, idx] : node->word_indices) {\n                    if (i - j == len && dp[j] != LLONG_MAX) {\n                        dp[i] = min(dp[i], dp[j] + costs[idx]);\n                    }\n                }\n            }\n        }\n        \n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720320945",
    "subm_id": "1312309102"
}