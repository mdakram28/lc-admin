{
    "username": "wyjsdpku",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        points.sort()\n        def max_remove(removed):\n            idx = 0 if removed != 0 else 1\n            minsum = points[idx][0] + points[idx][1]\n            minsum_i = idx\n            maxsum = points[idx][0] + points[idx][1]\n            maxsum_i = idx\n            mindiff = points[idx][0] - points[idx][1]\n            mindiff_i = idx\n            maxdiff = points[idx][0] - points[idx][1]\n            maxdiff_i = idx\n            for i in range(n):\n                x, y = points[i]\n                if i == removed or i == idx:\n                    continue\n                sum_ = x + y\n                diff_ = x - y\n                if sum_ < minsum:\n                    minsum = sum_\n                    minsum_i = i\n                if sum_ > maxsum:\n                    maxsum = sum_\n                    maxsum_i = i\n                if diff_ < mindiff:\n                    mindiff = diff_\n                    mindiff_i = i\n                if diff_ > maxdiff:\n                    maxdiff = diff_\n                    maxdiff_i = i\n                #print(sum_, diff_)\n                #print(minsum, maxsum, mindiff, maxdiff)\n            if maxsum - minsum > maxdiff - mindiff:\n                return maxsum - minsum, (minsum_i, maxsum_i)\n            else:\n                return maxdiff - mindiff, (mindiff_i, maxdiff_i)\n\n        _, (pointi, pointj) = max_remove(None)\n        ans1 = max_remove(pointi)[0]\n        ans2 = max_remove(pointj)[0]\n        return min(ans1, ans2)\n"
}