{
    "username": "nguyenquocthao00",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontalCut.sort()\n        verticalCut.sort()\n        res, i, j = 0, m-2, n-2\n        while True:\n            if i<0 and j<0: return res\n            elif i<0:\n                res += m*verticalCut[j]\n                j-=1\n            elif j<0: \n                res += n*horizontalCut[i]\n                i-=1\n            elif horizontalCut[i] >= verticalCut[j]:\n                res += (n-1-j)*horizontalCut[i]\n                i-=1\n            else:\n                res += (m-1-i)*verticalCut[j]\n                j-=1\n        # return res\n        # @lru_cache(None)\n        # def dp(i,j):\n        #     if i<0 and j<0: return 0\n        #     if i<0: return m*verticalCut[j] + dp(i,j-1)\n        #     if j<0: return n*horizontalCut[i] + dp(i-1,j)\n        #     return min((m-1-i) * verticalCut[j] + dp(i,j-1), (n-1-j)*horizontalCut[i] + dp(i-1,j))\n        # return dp(m-2,n-2)",
    "submit_ts": "1720925868",
    "subm_id": "1320268817"
}