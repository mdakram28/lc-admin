{
    "username": "SkinnySnakeLimb",
    "submission": "import java.util.*;\n\nclass Solution {\n    private static final int MOD = 1_000_000_007;\n    private int[] nums;\n    private int n;\n    private List<List<Long>> dps;\n    private long[][] dp;\n\n    public int countOfPairs(int[] nums) {\n        this.nums = nums;\n        this.n = nums.length;\n        \n        this.dps = new ArrayList<>();\n        for (int i = 0; i < n; i++) {\n            this.dps.add(new ArrayList<>(Arrays.asList(0L)));\n        }\n        \n        this.dp = new long[n][];\n        for (int pos = 0; pos < n; pos++) {\n            this.dp[pos] = new long[nums[pos] + 1];\n            Arrays.fill(this.dp[pos], -1);\n        }\n        \n        return (int) (solve(0, 0) % MOD);\n    }\n    \n    private long solve(int pos, int v1) {\n        if (pos >= n) {\n            return 1;\n        }\n        if (v1 > nums[pos]) {\n            return 0;\n        }\n        \n        if (dp[pos][v1] != -1) {\n            return dp[pos][v1];\n        }\n        \n        int v2 = pos > 0 ? nums[pos - 1] - v1 : 1000000;\n        \n        long ret = 0;\n        \n        int l = nums[pos] + 2 - dps.get(pos).size();\n        \n        if (l <= v1) {\n            ret = dps.get(pos).get(nums[pos] + 1 - l);\n        }\n        \n        long am = dps.get(pos).get(dps.get(pos).size() - 1);\n        for (int i = l - 1; i >= 0; i--) {\n            if (nums[pos] - i > v2 || i < v1) {\n                break;\n            }\n            \n            am = (am + solve(pos + 1, i)) % MOD;\n            dps.get(pos).add(am);\n        }\n        \n        dp[pos][v1] = am;\n        return am;\n    }\n}",
    "submit_ts": "1723346898",
    "subm_id": "1351587521"
}