{
    "username": "adwmos",
    "submission": "from heapq import heappush, heappop\n\nclass Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        # Initialize a max-heap for horizontal and vertical cuts (invert the cost to use with heapq)\n        heap = []\n        \n        for cost in horizontalCut:\n            heappush(heap, (-cost, 'H'))\n        \n        for cost in verticalCut:\n            heappush(heap, (-cost, 'V'))\n        \n        # Start with 1 horizontal piece and 1 vertical piece (the whole cake)\n        horizontal_pieces = 1\n        vertical_pieces = 1\n        \n        total_cost = 0\n        \n        # Process the heap until it is empty\n        while heap:\n            cost, cut_type = heappop(heap)\n            cost = -cost  # Revert the cost back to positive\n            \n            if cut_type == 'H':\n                # Cutting horizontally increases the number of horizontal pieces\n                total_cost += cost * vertical_pieces\n                horizontal_pieces += 1\n            else:\n                # Cutting vertically increases the number of vertical pieces\n                total_cost += cost * horizontal_pieces\n                vertical_pieces += 1\n        \n        return total_cost\n",
    "submit_ts": "1720925481",
    "subm_id": "1320256159"
}