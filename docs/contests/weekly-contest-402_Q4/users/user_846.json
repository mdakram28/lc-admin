{
    "username": "njucser",
    "submission": "class NumArray {\npublic:\n    vector<int> nums;\n    vector<int> tree;\n    int prefixSum(int i) {\n        int s = 0;\n        for (; i > 0; i &= i - 1) { // i -= i & -i \u7684\u53e6\u4e00\u79cd\u5199\u6cd5\n            s += tree[i];\n        }\n        return s;\n    }\n    NumArray(vector<int>& nums) : nums(nums.size()), tree(nums.size() + 1) {\n        for (int i = 0; i < nums.size(); i++) {\n            update(i, nums[i]);\n        }\n    }\n\n    void update(int index, int val) {\n        int delta = val - nums[index];\n        nums[index] = val;\n        for (int i = index + 1; i < tree.size(); i += i & -i) {\n            tree[i] += delta;\n        }\n    }\n\n    int sumRange(int left, int right) {\n        return prefixSum(right + 1) - prefixSum(left);\n    }\n};\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& q) {\n        int n = nums.size();\n        vector<int> v(n, 0);\n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) v[i] = 1;\n        }\n        NumArray a(v);\n\n        int m = q.size();\n        vector<int> ans;\n        for (int i = 0; i < m; i++) {\n            if (q[i][0] == 1) {\n                //\u5148\u5bf9\u6570\u7ec4\u505a\u4fee\u6539\uff0c\u518d\u6539\u56de\u6765\n                //for (int j = 0; j < n; j++) cout << a.nums[j] << \" \";\n                //cout << endl;\n\n                int l = q[i][1], r = q[i][2];\n                int old1 = a.nums[l], old2 = a.nums[r];\n                a.update(l, 0);\n                a.update(r, 0);\n                ans.push_back(a.sumRange(q[i][1], q[i][2]));\n                if (old1 == 1) a.update(l, old1);\n                if (old2 == 1) a.update(r, old2);\n            }\n            else {\n                int idx = q[i][1];\n                //\u53ea\u4f1a\u5f71\u54cd\u5230idx -1, idx, idx + 1\u662f\u4e0d\u662f\u5cf0\u503c\n                nums[idx] = q[i][2];\n                for (int j = idx - 1; j <= idx + 1; j++) {\n                    if (j <= 0 || j >= n - 1) continue;\n                    if (nums[j] > nums[j - 1] && nums[j] > nums[j + 1]) a.update(j, 1);\n                    else a.update(j, 0);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508311",
    "subm_id": "539786618"
}