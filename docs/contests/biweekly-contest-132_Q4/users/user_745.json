{
    "username": "20240623.kira_44",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n          int n = nums.size(); \n    std::vector<std::vector<int>> dp(n, std::vector<int>(k + 1, 1)); \n    int maxAns = 1; \n    std::vector<int> maxVK(k + 1, -1); \n    std::vector<std::map<int, int>> maxVkm(k + 1); \n\n    int i = 0;\n    while (i < n) {\n        int j = 0;\n        while (j <= k) {\n            int l = 0;\n            while (l < j) {\n                dp[i][j] = std::max(dp[i][j], 1 + maxVK[l]); \n                l++;\n            } \n            if(maxVkm[j].find(nums[i]) != maxVkm[j].end()) { \n                dp[i][j] = std::max(dp[i][j], 1 + maxVkm[j][nums[i]]); \n            } \n            maxAns = std::max(maxAns, dp[i][j]); \n            j++;\n        } \n        j = 0;\n        while (j <= k) { \n            maxVK[j] = std::max(maxVK[j], dp[i][j]); \n            maxVkm[j][nums[i]] = std::max(maxVkm[j][nums[i]], dp[i][j]); \n            j++;\n        } \n        i++;\n    } \n    return maxAns; \n    }\n};",
    "submit_ts": 1717862154.0
}