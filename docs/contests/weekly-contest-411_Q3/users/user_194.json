{
    "username": "EternalFire",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        if n == 1:\n            for i in range(9, -1, -1):\n                if i % k == 0:\n                    return str(i)\n        \n        if n < 6:\n            pw = [0] * (n + 1)\n            pw[0] = 1\n            for i in range(1, n + 1):\n                pw[i] = pw[i - 1] * 10\n            \n            for num in range(pw[n] - 1, pw[n - 1] - 1, -1):\n                if num % k == 0 and str(num) == str(num)[::-1]:\n                    return str(num)\n                \n        \n        if k == 1:\n            return '9' * n\n        if k == 2:\n            return '8' + '9' * (n - 2) + '8'\n        if k == 3:\n            return '9' * n\n        if k == 4:\n            return '8' * 2 + '9' * (n - 4) + '8' * 2\n        if k == 5:\n            return '5' + '9' * (n - 2) + '5'\n        if k == 6:\n            pw = [0] * (n + 1)\n            pw[0] = 1\n            for i in range(1, n + 1):\n                pw[i] = pw[i - 1] * 10 % 6\n            \n            cur = (8 * pw[0] + 8 * pw[n - 1]) % 6\n            if n % 2 == 0:\n                for i in range(1, n // 2 - 1):\n                    cur = (cur + 9 * pw[i] + 9 * pw[n - i - 1]) % 6\n                    \n                for d in range(9, -1, -1):\n                    if (cur + d * pw[n // 2] + d * pw[n // 2 - 1]) % 6 == 0:\n                        return '8' + '9' * (n // 2 - 2) + str(d) * 2 + '9' * (n // 2 - 2) + '8'\n            else:\n                for i in range(1, n // 2):\n                    cur = (cur + 9 * pw[i] + 9 * pw[n - i - 1]) % 6\n                \n                for d in range(9, -1, -1):\n                    if (cur + d * pw[n // 2]) % 6 == 0:\n                        return '8' + '9' * (n // 2 - 1) + str(d) + '9' * (n // 2 - 1) + '8'\n        if k == 7:\n            pw = [0] * (n + 1)\n            pw[0] = 1\n            for i in range(1, n + 1):\n                pw[i] = pw[i - 1] * 10 % 7\n            \n            cur = 0\n            if n % 2 == 0:\n                for i in range(n // 2 - 1):\n                    cur = (cur + 9 * pw[i] + 9 * pw[n - i - 1]) % 7\n                    \n                for d in range(9, -1, -1):\n                    if (cur + d * pw[n // 2] + d * pw[n // 2 - 1]) % 7 == 0:\n                        return '9' * (n // 2 - 1) + str(d) * 2 + '9' * (n // 2 - 1)\n            else:\n                for i in range(n // 2):\n                    cur = (cur + 9 * pw[i] + 9 * pw[n - i - 1]) % 7\n                \n                for d in range(9, -1, -1):\n                    if (cur + d * pw[n // 2]) % 7 == 0:\n                        return '9' * (n // 2) + str(d) + '9' * (n // 2)\n            \n        if k == 8:\n            return '8' * 3 + '9' * (n - 6) + '8' * 3\n        if k == 9:\n            return '9' * n",
    "submit_ts": "1723949498",
    "subm_id": "1359721104"
}