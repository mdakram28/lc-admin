{
    "username": "AminFahiminia",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        #for every circle, if there is a path from that circle to some other circle,\n        #and that other circle lies on a different edge\n        #return True\n\n        n = len(circles)\n        def inter(i,j):\n            x1,y1,r1 = circles[i]\n            x2,y2,r2 = circles[j]\n            # Calculate the distance between the centers of the circles\n            distance_centers = math.sqrt((x2 - x1)**2 + (y2 - y1)**2)\n    \n            if distance_centers <= r1 + r2:\n                return True\n            else:\n                return False\n        def wrong(x):\n            if \"L\" in x:\n                if \"R\" in x or \"D\" in x:\n                    return True\n            if \"U\" in x:\n                if \"R\" in x or \"D\" in x:\n                    return True\n            return False\n        p = [i for i in range(n)]\n        edges = []\n        def union(a,b):\n            a = find(a)\n            b = find(b)\n            p[a] = b\n        def find(x):\n            while x != p[x]:\n                p[x] = p[p[x]]\n                x = p[x]\n            return x\n        for x,y,r in circles:\n            edge = []\n            if x - r <= 0:\n                edge.append(\"L\")\n            if x + r >= X:\n                edge.append(\"R\")\n            if y - r <= 0:\n                edge.append(\"D\")\n            if y + r >= Y:\n                edge.append(\"U\")\n            edges.append(edge)\n        \n\n        for i in range(n):\n            for j in range(i+1,n):\n                if inter(i,j):\n                    union(i,j)\n        d = defaultdict(set)\n        for i in range(n):\n            for x in edges[i]:\n                for t in x:\n                    d[find(i)].add(t)\n                    if wrong(d[find(i)]):\n                        return False\n\n        \n        \n        return True\n        \n        ",
    "submit_ts": "1722136641",
    "subm_id": "1335740704"
}