{
    "username": "ni-hong-ge",
    "submission": "class Solution {\npublic:\n    long long minimumOperations(vector<int>& nums, vector<int>& target) {\n        int n = nums.size();\n        vector<int> diff(n);\n        \n        for (int i = 0; i < n; ++i) {\n            diff[i] = target[i] - nums[i];\n        }\n        long long ans=0;\n        int state=0;\n        vector<vector<int>> v;\n        vector<int> p;\n        for(int i=0;i<n;i++){\n            if(!diff[i]){\n                v.push_back(p);\n                p.clear();\n                continue;\n            }\n            if(!state)state=diff[i];\n            else if(state>0&&diff[i]<0||state<0&&diff[i]>0){\n                state=diff[i];\n                v.push_back(p);\n                p.clear();\n            }else{\n                ;\n            }\n            p.push_back(diff[i]);\n        }\n        v.push_back(p);\n        for(auto x:v){\n            // for(auto y:x){\n            //     cout<<y<<\" \";\n            // }cout<<endl;\n            if(x.empty())continue;\n            ans+=abs(x[0]);\n            int len=x.size();\n            int last=abs(x[0]);\n            for(int i=1;i<len;i++){\n                if(abs(x[i])>last){\n                    ans+=abs(x[i])-last;\n                }\n                last=abs(x[i]);\n                // cout<<x[i]<<\" ans=\"<<ans<<endl;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1721533221",
    "subm_id": "548396655"
}