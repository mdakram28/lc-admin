{
    "username": "aditi_sahu21",
    "submission": "class Solution:\n    def bfs(self, graph, start, t1, t2, n):\n        queue = deque([start])\n        visited = [False] * (n + 4)\n        visited[start] = True\n\n        while queue:\n            u = queue.popleft()\n            for v in graph[u]:\n                if not visited[v]:\n                    queue.append(v)\n                    visited[v] = True\n\n        return 1 if visited[t1] or visited[t2] else 0\n\n    def solve(self, X, Y, circles):\n        nc = len(circles)\n        graph = [[] for _ in range(nc + 4)]\n\n        for i in range(nc):\n            if circles[i][0] <= circles[i][2]:\n                graph[nc].append(i)\n                graph[i].append(nc)\n            if X - circles[i][0] <= circles[i][2]:\n                graph[nc + 2].append(i)\n                graph[i].append(nc + 2)\n            if circles[i][1] <= circles[i][2]:\n                graph[nc + 1].append(i)\n                graph[i].append(nc + 1)\n            if Y - circles[i][1] <= circles[i][2]:\n                graph[nc + 3].append(i)\n                graph[i].append(nc + 3)\n            for j in range(i + 1, nc):\n                dist = math.sqrt((circles[i][0] - circles[j][0]) ** 2 + (circles[i][1] - circles[j][1]) ** 2)\n                rad_sum = circles[i][2] + circles[j][2]\n                if rad_sum >= dist:\n                    graph[i].append(j)\n                    graph[j].append(i)\n\n        is_blocked = 0\n        is_blocked = max(is_blocked, self.bfs(graph, nc, nc + 1, nc + 2, nc + 4))\n        is_blocked = max(is_blocked, self.bfs(graph, nc + 3, nc + 2, nc + 1, nc + 4))\n\n        return is_blocked == 0\n\n    def canReachCorner(self, X, Y, circles):\n        return self.solve(X, Y, circles)\n        ",
    "submit_ts": "1722138562",
    "subm_id": "1335793943"
}