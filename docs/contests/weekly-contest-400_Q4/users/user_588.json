{
    "username": "yhkuo41",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        vector<int> bitCounter(32);\n        int l = 0;\n        int n = nums.size();\n        int cur = nums[0];\n        int res = 1e9;\n        for (int r = 0; r < n; ++r) {\n            cur &= nums[r];\n            updateBitCounter(bitCounter, nums[r], 1);\n            res = min(res, abs(cur - k));\n            while (l <= r && cur < k) {\n                updateBitCounter(bitCounter, nums[l++], -1);\n                cur = getNumFromBitCounter(bitCounter, r - l + 1);\n                res = min(res, abs(cur - k));\n            }\n        }\n        return res;\n    }\n    \n    void updateBitCounter(vector<int> &bitCounter, int x, int add) {\n        for (int shift = 0; shift < 32; ++shift) {\n            if (x & (1 << shift)) {\n                bitCounter[shift] += add;\n            }\n        }\n    }\n    \n    int getNumFromBitCounter(vector<int> &bitCounter, int total) {\n        int res = 0;\n        for (int shift = 0; shift < 32; ++shift) {\n            if (bitCounter[shift] == total) {\n                res |= (1 << shift);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299546.0
}