{
    "username": "nife",
    "submission": "#define f first\n#define s second\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define sz(x) ((int) (x).size())\n#define pb push_back\n#define mp make_pair\n\nusing namespace std;\n\ntemplate <typename T> inline bool umin(T &a, const T &b) { if(a > b) { a = b; return 1; } return 0; }\ntemplate <typename T> inline bool umax(T &a, const T &b) { if(a < b) { a = b; return 1; } return 0; }\n\ntypedef long long ll;\ntypedef unsigned long long ull;\ntypedef long double ld;\ntypedef pair<int, int> pii;\ntypedef pair<ll, ll> pll;\n\nconst ll mod = 1e9 + 7;\nconst ll base = 1e6 + 9;\nconst ll inf = 1e9;\nconst int MAX = 2e5 + 42;\nconst int LG = 20;\n\nstruct segtree {\n\n    int n;\n    vector<ll> t, add;\n\n    segtree(int N) {\n        n = N;\n        t = vector<ll>(4 * n + 5);\n        add = vector<ll>(4 * n + 5);\n    };\n\n    void push(int v, int l, int r) {\n        t[v] += add[v] * (r - l);\n        if(r - l > 1) {\n            add[v << 1 | 1] += add[v];\n            add[(v << 1) + 2] += add[v];\n        }\n        add[v] = 0;\n    }\n\n    void update(int l, int r, int x, int v, int tl, int tr) {\n        push(v, tl, tr);\n        if(r <= tl || tr <= l) return;\n        if(l <= tl && tr <= r) {\n            add[v] += x;\n            push(v, tl, tr);\n            return;\n        }\n        int tm = tl + tr >> 1;\n        update(l, r, x, v << 1 | 1, tl, tm); update(l, r, x, (v << 1) + 2, tm, tr);\n        t[v] = t[v << 1 | 1] + t[(v << 1) + 2];\n    }\n\n    void update(int l, int r, int x) {\n        update(l, r, x, 0, 0, n);\n    }\n\n    ll get(int l, int r, int v, int tl, int tr) {\n        push(v, tl, tr);\n        if(r <= tl || tr <= l) return 0;\n        if(l <= tl && tr <= r) return t[v];\n        int tm = tl + tr >> 1;\n        return get(l, r, v << 1 | 1, tl, tm) + get(l, r, (v << 1) + 2, tm, tr);\n    }\n\n    ll get(int l, int r) {\n        return get(l, r, 0, 0, n);\n    }\n};\n\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = sz(s);\n        for(auto &i : s) i &= 1;\n        int q = sz(queries);\n        vector<pii> qr;\n        for(auto x : queries) qr.pb({x[0], x[1]});\n        int one = 0, zero = 0;\n        int j = -1;\n        vector<int> last(n);\n        for(int i = 0; i < n; i++) {\n            while(j + 1 < n) {\n                one += s[j + 1];\n                zero += !s[j + 1];\n                if(one <= k || zero <= k) {\n                    j++;\n                    continue;\n                }\n                one -= s[j + 1];\n                zero -= !s[j + 1];\n                break;\n            }\n            last[i] = j;\n            one -= s[i];\n            zero -= !s[i];\n        }\n        vector<long long> ans(q);\n        vector<vector<pii>> lq(n);\n        for(int i = 0; i < q; i++) {\n            auto [l, r] = qr[i];\n            lq[l].pb({r, i});\n        }\n        segtree st(n);\n        for(int i = n - 1; ~i; i--) {\n            st.update(i, last[i] + 1, 1);\n            for(auto [j, idx] : lq[i]) {\n                ans[idx] = st.get(i, j + 1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723950182",
    "subm_id": "1359739324"
}