{
    "username": "t38178",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = int64_t;\n\nstruct Info {\n    int peakCount;\n    Info(int count = 0) : peakCount(count) {}\n    friend Info operator+(const Info &a, const Info &b) {\n        return Info(a.peakCount + b.peakCount);\n    }\n};\n\ntemplate<class Info>\nstruct SegmentTree {\n    int n;\n    vector<Info> info;\n    SegmentTree() : n(0) {}\n    SegmentTree(int n_, Info v_ = Info()) {\n        init(n_, v_);\n    }\n    template<class T>\n    SegmentTree(const vector<T> &init_) {\n        init(init_);\n    }\n    void init(int n_, Info v_ = Info()) {\n        init(vector(n_, v_));\n    }\n    template<class T>\n    void init(const vector<T> &init_) {\n        n = init_.size();\n        info.assign(4 << __lg(n), Info());\n        function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r - l == 1) {\n                info[p] = init_[l];\n                return;\n            }\n            int m = (l + r) / 2;\n            build(2 * p, l, m);\n            build(2 * p + 1, m, r);\n            pull(p);\n        };\n        build(1, 0, n);\n    }\n    void pull(int p) {\n        info[p] = info[2 * p] + info[2 * p + 1];\n    }\n    void modify(int p, int l, int r, int x, const Info &v) {\n        if (r - l == 1) {\n            info[p] = v;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (x < m) {\n            modify(2 * p, l, m, x, v);\n        } else {\n            modify(2 * p + 1, m, r, x, v);\n        }\n        pull(p);\n    }\n    void modify(int p, const Info &v) {\n        modify(1, 0, n, p, v);\n    }\n    Info rangeQuery(int p, int l, int r, int x, int y) {\n        if (l >= y || r <= x) {\n            return Info();\n        }\n        if (l >= x && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        return rangeQuery(2 * p, l, m, x, y) + rangeQuery(2 * p + 1, m, r, x, y);\n    }\n    Info rangeQuery(int l, int r) {\n        return rangeQuery(1, 0, n, l, r);\n    }\n    template<class F>\n    int findFirst(int p, int l, int r, int x, int y, F pred) {\n        if (l >= y || r <= x || !pred(info[p])) {\n            return -1;\n        }\n        if (r - l == 1) {\n            return l;\n        }\n        int m = (l + r) / 2;\n        int res = findFirst(2 * p, l, m, x, y, pred);\n        if (res == -1) {\n            res = findFirst(2 * p + 1, m, r, x, y, pred);\n        }\n        return res;\n    }\n    template<class F>\n    int findFirst(int l, int r, F pred) {\n        return findFirst(1, 0, n, l, r, pred);\n    }\n    template<class F>\n    int findLast(int p, int l, int r, int x, int y, F pred) {\n        if (l >= y || r <= x || !pred(info[p])) {\n            return -1;\n        }\n        if (r - l == 1) {\n            return l;\n        }\n        int m = (l + r) / 2;\n        int res = findLast(2 * p + 1, m, r, x, y, pred);\n        if (res == -1) {\n            res = findLast(2 * p, l, m, x, y, pred);\n        }\n        return res;\n    }\n    template<class F>\n    int findLast(int l, int r, F pred) {\n        return findLast(1, 0, n, l, r, pred);\n    }\n};\n\nclass Solution {\npublic:\n    bool check(const vector<int> &A, int i) {\n        if (i <= 0 || i >= A.size() - 1) return false;\n        return A[i] > A[i-1] && A[i] > A[i+1];\n    }\n\n    int findPeak(vector<int>& arr) {\n        int l = 0;\n        int r = arr.size() - 1;\n        int mid;\n      \n        while (l <= r) {\n            mid = (l + r) >> 1;\n            if ((mid == 0 || arr[mid - 1] <= arr[mid]) && (mid == arr.size() - 1 || arr[mid + 1] <= arr[mid]))\n                return mid;\n            if (mid > 0 && arr[mid - 1] > arr[mid])\n                r = mid - 1;\n            else\n                l = mid + 1;\n        }\n        return -1;\n    }\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        vector<int> res;\n        int n = nums.size();\n        \n        vector<Info> initialPeaks(n, Info(0));\n        for (int i = 1; i < n - 1; i++) {\n            if (check(nums, i)) initialPeaks[i] = Info(1);\n        }\n\n        SegmentTree<Info> segTree(initialPeaks);\n\n        for (const auto &q : queries) {\n            int type = q[0];\n            if (type == 1) {\n                int li = q[1], ri = q[2];\n                if (li == ri) {\n                    res.push_back(0);\n                } else {\n                    res.push_back(segTree.rangeQuery(li + 1, ri).peakCount);\n                }\n            } else if (type == 2) {\n                int idx = q[1], val = q[2];\n                nums[idx] = val;\n                for (int i = max(1, idx - 1); i <= min(n - 2, idx + 1); ++i) {\n                    segTree.modify(i, Info(check(nums, i) ? 1 : 0));\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718506841.0
}