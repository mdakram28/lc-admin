{
    "username": "lydia7635",
    "submission": "class Graph {\npublic:\n    vector<vector<int>> edges;\n    int diameter = -1;\n    Graph(vector<vector<int>>edgeVec) {\n        edges.resize(edgeVec.size() + 1);\n        for(auto& edge : edgeVec) {\n            edges[edge[0]].push_back(edge[1]);\n            edges[edge[1]].push_back(edge[0]);\n        }\n    }\n\n    pair<int, int> getFarthestNode(int start) {    // farthestNode and depth\n        set<int> visited;\n        queue<pair<int, int>> bfsQueue;\n        bfsQueue.push({start, 0});\n\n        int farthestNode = start;\n        int maxDepth = 0;\n        while(!bfsQueue.empty()) {\n            pair<int, int> cur = bfsQueue.front();\n            bfsQueue.pop();\n\n            if(visited.find(cur.first) != visited.end()) {\n                continue;\n            }\n\n            visited.insert(cur.first);\n            farthestNode = cur.first;\n            maxDepth = cur.second;\n\n            for(auto& neighbor : edges[cur.first]) {\n                bfsQueue.push({neighbor, cur.second + 1});\n            }\n        }\n        return {farthestNode, maxDepth};\n    }\n\n    int getDiameter() {\n        if(diameter != -1) {\n            return diameter;\n        }\n\n        // select one of the node and find the farthest node, called end1\n        pair<int, int> end1 = getFarthestNode(0);\n\n        // find the farthest node, called end2, to end1\n        // calculate the distance between end1 and end2\n        pair<int, int> end2 = getFarthestNode(end1.first);\n        return end2.second;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        // find the tree root: the center of the diameter\n        // connected the two trees with their roots\n        // just add the depth of the two trees => ceil(diameter1/2) + ceil(diameter2/2) + 1\n\n        Graph graph1(edges1);\n        Graph graph2(edges2);\n        int d1 = graph1.getDiameter();\n        int d2 = graph2.getDiameter();\n        int dAll = (d1 + 1) / 2 + (d2 + 1) / 2 + 1;\n        return max(max(d1, d2), dAll);\n    }\n};",
    "submit_ts": "1719717478",
    "subm_id": "1304392595"
}