{
    "username": "vandorlot",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        touching = [[] for _ in range(len(circles))]\n        touching_topleft = set()\n        touching_bottomright = set()\n        def circlesTouch(c1, c2):\n            x1, y1, r1 = c1\n            x2, y2, r2 = c2\n            center_distance = sqrt((x2 - x1)**2 + (y2 - y1)**2)\n            if r1 + r2 >= center_distance:\n                return True\n        for i in range(len(circles)):\n            for j in range(i+1, len(circles)):\n                if circlesTouch(circles[i], circles[j]):\n                    touching[i].append(j)\n                    touching[j].append(i)\n        for i in range(len(circles)):\n            x, y, r = circles[i]\n            if r >= x:\n                touching_topleft.add(i)\n            if r >= y:\n                touching_bottomright.add(i)\n            if r+x >= X:\n                touching_bottomright.add(i)\n            if r+y >= Y:\n                touching_topleft.add(i)\n        \n        if not touching_topleft or not touching_bottomright:\n            return True\n        if touching_topleft.intersection(touching_bottomright):\n            return False\n\n        visited = set()\n        def dfs(node):\n            visited.add(node)\n            if node in touching_topleft:\n                return True\n            for i in touching[node]:\n                if i not in visited:\n                    if dfs(i):\n                        return True\n\n        for node in touching_bottomright:\n            if dfs(node):\n                return False\n\n        return True\n            \n",
    "submit_ts": "1722137769",
    "subm_id": "1335773208"
}