{
    "username": "launda01",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <unordered_set>\n#include <cmath>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int num_nodes) {\n        queue<int> q;\n        vector<int> visited(num_nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : graph[node]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    void addEdges(vector<vector<int>>& graph, const vector<pair<pair<int, int>, int>>& circles, int X, int Y, int num_circles) {\n        for (int i = 0; i < num_circles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles_data) {\n        vector<pair<pair<int, int>, int>> circles(circles_data.size());\n        vector<vector<int>> graph(circles_data.size() + 4);\n        int num_circles = circles_data.size();\n\n        for (int i = 0; i < num_circles; ++i) {\n            circles[i].first.first = circles_data[i][0];\n            circles[i].first.second = circles_data[i][1];\n            circles[i].second = circles_data[i][2];\n        }\n\n        addEdges(graph, circles, X, Y, num_circles);\n\n        int is_blocked = 0;\n        is_blocked = max(is_blocked, bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4)); // Check for bottom-left corner\n        is_blocked = max(is_blocked, bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)); // Check for top-right corner\n\n        return !is_blocked;\n    }\n};",
    "submit_ts": "1722136357",
    "subm_id": "1335731892"
}