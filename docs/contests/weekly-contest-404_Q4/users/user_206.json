{
    "username": "curiosity-10",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    // Helper function to perform BFS and return the farthest node and its distance\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        \n        int farthest_node = start;\n        int max_dist = 0;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    \n                    if (dist[neighbor] > max_dist) {\n                        max_dist = dist[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return {farthest_node, max_dist};\n    }\n\n    // Function to find the diameter of a tree using two BFS runs\n    int find_diameter(const vector<vector<int>>& adj) {\n        auto [farthest_node, _] = bfs(0, adj);\n        auto [other_node, diameter] = bfs(farthest_node, adj);\n        return diameter;\n    }\n\n    int find_height(const vector<vector<int>>& adj) {\n        auto [farthest_node, dist] = bfs(0, adj);\n        auto [_, height] = bfs(farthest_node, adj);\n        return (height + 1) / 2; // the height of the tree is half the diameter\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int diameter1 = find_diameter(adj1);\n        int diameter2 = find_diameter(adj2);\n\n        int height1 = find_height(adj1);\n        int height2 = find_height(adj2);\n\n        // The new diameter will be the maximum of the original diameters and the sum of the heights plus one\n        int new_diameter = max({diameter1, diameter2, height1 + height2 + 1});\n\n        return new_diameter;\n    }\n};\n\n",
    "submit_ts": "1719716942",
    "subm_id": "1304378189"
}