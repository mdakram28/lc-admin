{
    "username": "vu-dinh-hung",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        N = len(nums)\n        result = []\n        \n        peaks = SortedList()\n        for i in range(1, N - 1):\n            if nums[i - 1] < nums[i] and nums[i + 1] < nums[i]:\n                peaks.add(i)\n        \n        def update_index(i):\n            if i <= 0 or i >= N - 1:\n                return\n            if nums[i - 1] < nums[i] and nums[i + 1] < nums[i]:\n                if peaks.count(i) == 0:\n                    peaks.add(i)\n            if not (nums[i - 1] < nums[i] and nums[i + 1] < nums[i]):\n                peaks.discard(i)\n                \n        for qtype, x, y in queries:\n            # print(f'{qtype=}, {x=}, {y=}')\n            if qtype == 1:\n                left = peaks.bisect_left(x + 1)\n                right = peaks.bisect_right(y - 1)\n                result.append(max(0, right - left))\n                # print(f'{left=}, {right=}, appended: {max(0, right - left)}')\n            else:\n                nums[x] = y\n                update_index(x)\n                update_index(x - 1)\n                update_index(x + 1)\n            \n            # print(f'{nums=}\\n{peaks=}\\n------')\n        \n        return result\n",
    "submit_ts": 1718507491.0
}