{
    "username": "rezero456",
    "submission": "class Solution {\n    public long maximumScore(int[][] grid) {\n        //dp[i][j]\u8868\u793a\u5f53\u524d\u5217\u56fe\u9ed1\u5230\u7b2ci\u884c\u4e14\u524dj\u884c\u4ee5\u4e0d\u80fd\u5f97\u5206\u7684\u6700\u5927\u503c\n        int n=grid.length;\n        long[][]preSum=new long[n+1][n];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                preSum[j + 1][i] = preSum[j][i] + grid[j][i];\n            }\n        }\n        long[][] dpRes=new long[n+1][n+1];\n        for(int col=1;col<n;col++){\n            long[][] temp=new long[n+1][n+1];\n            for (int i = 0; i <= n; i++) {\n                for (int j = i; j <= n; j++) {\n                    if (i == j) {\n                        for (int i1 = 0; i1 <= j; i1++) {\n                            for (int j1 = i1; j1 <= n; j1++) {\n                                temp[i][j] = Math.max(temp[i][j], dpRes[i1][j1] + (i > j1 ? (preSum[i][col - 1] - preSum[j1][col - 1]) : 0));\n                            }\n                        }\n                    } else {\n                        for (int j1 = j; j1 <= n; j1++) {\n                            temp[i][j] = Math.max(temp[i][j], dpRes[j][j1] + (preSum[j][col] - preSum[i][col]));\n                        }\n                    }\n\n                }\n            }\n            dpRes=temp;\n        }\n        long res=0;\n        for (int i = 0; i <= n; i++) {\n            for (int j = i; j <= n; j++) {\n                res=Math.max(res,dpRes[i][j]);\n            }\n        }\n        return res;\n    }\n}",
    "submit_ts": "1721489594",
    "subm_id": "548319436"
}