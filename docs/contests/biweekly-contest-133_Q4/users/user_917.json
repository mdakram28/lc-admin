{
    "username": "mizan44",
    "submission": "import java.util.Arrays;\n\nclass Solution {\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int mod = 1000000007;\n        int[][] dp = new int[n + 1][n * (n - 1) / 2+ 1];\n        dp[0][0] = 1;\n        \n        for (int i = 1; i <= n; i++) {\n            int[] prefixSums = new int[n * (n - 1) / 2 + 1];\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                prefixSums[j] = dp[i - 1][j];\n                if (j > 0) {\n                    prefixSums[j] = (prefixSums[j] + prefixSums[j - 1]) % mod;\n                }\n            }\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                if (j >= i) {\n                    dp[i][j] = (prefixSums[j] - prefixSums[j - i] + mod) % mod;\n                } else {\n                    dp[i][j] = prefixSums[j];\n                }\n            }\n        }\n        \n        int[] permutation = new int[n + 1];\n        Arrays.fill(permutation, -1);\n        for (int[] req : requirements) {\n            int end = req[0] + 1;\n            int cnt = req[1];\n            if (cnt > n * (n - 1) / 2 || dp[end][cnt] == 0) {\n                return 0;\n            }\n            permutation[end] = cnt;\n        }\n        \n        int[][] dp2 = new int[n + 1][n * (n - 1) / 2 + 1];\n        dp2[0][0] = 1;\n        for (int i = 1; i <= n; i++) {\n            int[] prefixSums = new int[n * (n - 1) / 2 + 1];\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                prefixSums[j] = dp2[i - 1][j];\n                if (j > 0) {\n                    prefixSums[j] = (prefixSums[j] + prefixSums[j - 1]) % mod;\n                }\n            }\n            for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                if (j >= i) {\n                    dp2[i][j] = (prefixSums[j] - prefixSums[j - i] + mod) % mod;\n                } else {\n                    dp2[i][j] = prefixSums[j];\n                }\n            }\n            if (permutation[i] != -1) {\n                int required = permutation[i];\n                for (int j = 0; j <= n * (n - 1) / 2; j++) {\n                    if (j != required) {\n                        dp2[i][j] = 0;\n                    }\n                }\n            }\n        }\n        \n        long result = 0;\n        for (int i = 0; i <= n * (n - 1) / 2; i++) {\n            result = (result + dp2[n][i]) % mod;\n        }\n        return (int) result;\n    }\n}\n",
    "submit_ts": 1719070948.0
}