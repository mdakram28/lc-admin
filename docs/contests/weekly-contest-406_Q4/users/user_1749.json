{
    "username": "charleszzz",
    "submission": "func minimumCost(m int, n int, horizontalCut []int, verticalCut []int) int64 {\n    ans := 0\n\tq := make(pq, 0)\n\tfor _, v := range horizontalCut {\n\t\tq = append(q, Cut{v, false, v, 0})\n\t}\n\tfor _, v := range verticalCut {\n\t\tq = append(q, Cut{v, true, v, 0})\n\t}\n\theap.Init(&q)\n\tvar hc, vc int\n\tfor q.Len() > 0 {\n\t\tc := heap.Pop(&q).(Cut)\n\t\tif c.hv == false && c.cnt != vc {\n\t\t\theap.Push(&q, Cut{c.idx, c.hv, c.cost, vc})\n\t\t\tcontinue\n\t\t}\n\t\tif c.hv == true && c.cnt != hc {\n\t\t\theap.Push(&q, Cut{c.idx, c.hv, c.cost, hc})\n\t\t\tcontinue\n\t\t}\n\t\tif c.hv == false {\n\t\t\tans += c.cost * (1 + c.cnt)\n\t\t\thc++\n\t\t} else {\n\t\t\tans += c.cost * (1 + c.cnt)\n\t\t\tvc++\n\t\t}\n\t}\n    return int64(ans)\n}\n\n// \u4f18\u5148\u961f\u5217\uff0c\u9700\u8981\u5b9a\u4e00\u4e2a\u65b0\u7c7b\u578b\uff0c\u5b9e\u73b0Less\u65b9\u6cd5\ntype Cut struct {\n\tidx  int\n\thv   bool\n\tcost int\n\tcnt  int\n}\n\nfunc (c Cut) Less(another Cut) bool {\n\treturn c.cost*(1+c.cnt) > another.cost*(1+another.cnt)\n}\n\ntype pq []Cut\n\nfunc (q pq) Swap(i, j int)       { q[i], q[j] = q[j], q[i] }\nfunc (q pq) Len() int            { return len(q) }\nfunc (q pq) Less(i, j int) bool  { return q[i].Less(q[j]) }\nfunc (q *pq) Push(x interface{}) { *q = append(*q, x.(Cut)) }\nfunc (q *pq) Pop() interface{}   { n := q.Len(); r := (*q)[n-1]; *q = (*q)[:n-1]; return r }",
    "submit_ts": "1720926438",
    "subm_id": "546446246"
}