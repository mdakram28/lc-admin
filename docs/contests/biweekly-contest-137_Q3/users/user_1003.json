{
    "username": "HARI PRAKASH REDDY POTHIREDDY",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Step 1: Extract top 3 values from each row and store with their indices\n        vector<vector<pair<int, int>>> top3Rows(m); // {value, column index}\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < n; ++j) {\n                rowValues.push_back({board[i][j], j});\n            }\n            // Sort the row based on values in descending order and take top 3\n            sort(rowValues.rbegin(), rowValues.rend());\n            for (int k = 0; k < min(3, n); ++k) {\n                top3Rows[i].push_back(rowValues[k]);\n            }\n        }\n        \n        // Step 2: Extract top 3 values from each column and store with their indices\n        vector<vector<pair<int, int>>> top3Cols(n); // {value, row index}\n        for (int j = 0; j < n; ++j) {\n            vector<pair<int, int>> colValues;\n            for (int i = 0; i < m; ++i) {\n                colValues.push_back({board[i][j], i});\n            }\n            // Sort the column based on values in descending order and take top 3\n            sort(colValues.rbegin(), colValues.rend());\n            for (int k = 0; k < min(3, m); ++k) {\n                top3Cols[j].push_back(colValues[k]);\n            }\n        }\n\n        // Step 3: Evaluate all valid combinations\n        long long maxSum = LLONG_MIN;\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (const auto& [val1, c1] : top3Rows[r1]) {\n                for (int r2 = 0; r2 < m; ++r2) {\n                    if (r2 == r1) continue;\n                    for (const auto& [val2, c2] : top3Rows[r2]) {\n                        if (c2 == c1) continue;\n                        for (int r3 = 0; r3 < m; ++r3) {\n                            if (r3 == r1 || r3 == r2) continue;\n                            for (const auto& [val3, c3] : top3Rows[r3]) {\n                                if (c3 == c1 || c3 == c2) continue;\n                                \n                                // Calculate the sum for this valid combination\n                                long long currentSum = (long long)((long long)(val1 + val2) + val3);\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723908953",
    "subm_id": "1359173755"
}