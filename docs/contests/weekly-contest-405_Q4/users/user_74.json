{
    "username": "kisuke11",
    "submission": "from typing import List\nfrom collections import defaultdict\n\nclass TrieNode:\n    def __init__(self):\n        self.children = defaultdict(TrieNode)\n        self.cost = float('inf')\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target) \n        root = TrieNode()\n        \n        for word, cost in zip(words, costs):\n            node = root\n            for char in word:\n                node = node.children[char]\n            node.cost = min(node.cost, cost)  \n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n    \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            node = root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n\n\n",
    "submit_ts": "1720320280",
    "subm_id": "1312289148"
}