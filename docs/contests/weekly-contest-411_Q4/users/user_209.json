{
    "username": "Arucade",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] q) {\n        int m = q.length, n = s.length();\n        Integer[] idx = new Integer[m];\n        long[] res = new long[m], sum = new long[n];\n        int[] x = new int[n];\n        for (int i = 0; i < m; i++) idx[i] = i;\n        Arrays.sort(idx, (e1, e2) -> q[e1][1] - q[e2][1]);\n        for (int i = 0, j = -1, p = 0, c1 = 0, c2 = 0; i < m; i++) {\n            int r = q[idx[i]][1], l = q[idx[i]][0];\n            // System.out.println(\"##\" + l + \"->\" + r + \":\");\n            while (j < r) {\n                if (s.charAt(++j) == '0') c1++;\n                else c2++;\n                while (c1 > k && c2 > k) {\n                    if (s.charAt(p++) == '0') c1--;\n                    else c2--;\n                }\n                x[j] = p;\n                sum[j] = (j > 0l ? sum[j - 1] : 0l) + ((long)(j - p + 1));\n                // System.out.println(\"#\" + j + \": \" + x[j] + \",\" + sum[j]);\n            }\n            int lo = l, hi = r, mid;\n            while (lo <= hi) {\n                mid = (lo + hi) >> 1;\n                if (x[mid] <= l) lo = mid + 1;\n                else hi = mid - 1;\n            }\n            res[idx[i]] = hi < l ? 0l \n                : ((long)(1 + hi - l + 1)) * ((long)(hi - l + 1)) / 2l;\n            res[idx[i]] += sum[r] - (hi < 0 ? 0l : sum[hi]);\n            // System.out.println(\"==\" + idx[i] + \": \" + hi + \", \" + res[idx[i]]);\n        }\n        return res;\n    }\n}",
    "submit_ts": "1723951258",
    "subm_id": "1359767208"
}