{
    "username": "saurabh600",
    "submission": "#define lc(i) (2 * i + 1)\n#define rc(i) (2 * i + 2)\n\ntemplate <class T = int>\nclass seg_tree {\n  public:\n  template <class M>\n  seg_tree(const M& arr, T _def, function<T(T, T)> fn) : n(arr.size()), def(_def), unite(fn) {\n    tree.resize(n << 2);\n    build(0, 0, n - 1, arr);\n  }\n\n  T query(T l, T r) { return query(0, 0, n - 1, l, r); }\n  void update(T pos, T val) { update(0, 0, n - 1, pos, val); }\n\n  private:\n  T n, def;\n  vector<T> tree;\n  function<T(T, T)> unite;\n\n  template <class M>\n  void build(T i, T x, T y, const M& arr) {\n    if (x == y) {\n      tree[i] = arr[x];\n    } else {\n      T m = (x + y) >> 1;\n      build(lc(i), x, m, arr);\n      build(rc(i), m + 1, y, arr);\n      tree[i] = unite(tree[lc(i)], tree[rc(i)]);\n    }\n  }\n\n  T query(T i, T x, T y, T l, T r) {\n    if (l > y || r < x || l > r) return def;\n    if (l <= x && r >= y) return tree[i];\n    T tm = (x + y) >> 1;\n    return unite(query(lc(i), x, tm, l, r), query(rc(i), tm + 1, y, l, r));\n  }\n\n  void update(T i, T x, T y, T pos, T val) {\n    if (x == y) {\n      tree[i] = val;\n    } else {\n      T m = (x + y) >> 1;\n      if (pos >= x && pos <= m) update(lc(i), x, m, pos, val);\n      else update(rc(i), m + 1, y, pos, val);\n      tree[i] = unite(tree[lc(i)], tree[rc(i)]);\n    }\n  }\n};\n\nclass Solution {\npublic:\n    int maximumLength(vector<int>& A, int k) {\n        int n = A.size();\n        vector dp(n + 1, vector(k+1, 0));\n        \n        A.insert(A.begin(), 0);\n        \n        map<int, int> mp;\n        for (auto i: A) mp[i] = 1;\n        int c = 0;\n        \n        for (auto& it: mp) it.second = ++c;\n        for (auto& it: A) it = mp[it];\n        \n        for (int j=0; j<=k; j++) {\n            int v2 = 0;\n            map<int, int> v1;\n            \n            for (int i=1; i<=n; i++) {\n                dp[i][j] = 1;\n                \n                \n                dp[i][j] = max(dp[i][j], 1 + v1[A[i]]);\n                dp[i][j] = max(dp[i][j], 1 + v2);\n                \n                \n                v1[A[i]] = max(v1[A[i]], dp[i][j]);\n                if (j > 0) v2 = max(v2, dp[i][j-1]);\n            }\n        }\n        \n        int ans = 0;\n        for (int i=0; i<=n; i++) ans = max(ans, dp[i][k]);\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717862271",
    "subm_id": "1281817713"
}