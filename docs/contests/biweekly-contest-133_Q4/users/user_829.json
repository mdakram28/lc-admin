{
    "username": "ayush91003",
    "submission": "class Solution {\npublic:\n    static const int MOD = 1'000'000'007;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, std::vector<std::vector<int>>& requirements) {\n        int z = 1000;\n        cout<<z;\n        int k = 100;\n        while(k){\n            z++;\n            k--;\n        }\n        std::unordered_map<int, int> reqMap = parseRequirements(requirements);\n        std::vector<std::vector<long long>> permCounts = initializePermCounts(n);\n        \n        updatePermCounts(n, permCounts, reqMap);\n\n        return calculateResult(n, permCounts);\n    }\n\nprivate:\n    std::unordered_map<int, int> parseRequirements(const std::vector<std::vector<int>>& requirements) {\n        std::unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n        return reqMap;\n    }\n\n    std::vector<std::vector<long long>> initializePermCounts(int n) {\n        std::vector<std::vector<long long>> permCounts(n + 1, std::vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n        return permCounts;\n    }\n\n    void updatePermCounts(int n, std::vector<std::vector<long long>>& permCounts, const std::unordered_map<int, int>& reqMap) {\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap.at(length);\n                for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    int calculateResult(int n, const std::vector<std::vector<long long>>& permCounts) {\n        long long result = 0;\n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719071033.0
}