{
    "username": "Hanafubuki",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        class Trie():\n            def __init__(self):\n                self.cost = 0\n                self.child = defaultdict(Trie)\n\n\n        root = Trie()\n        for w, cost in zip (words, costs):\n            p = root\n            for c in w:\n                p = p.child[c]\n            p.cost = cost if not p.cost else min(p.cost, cost)\n\n        n = len(target)\n\n        @cache\n        def dfs(idx):\n            # print(idx)\n            if idx >= n:\n                return 0\n            p = root\n            res = math.inf\n            for i in range(idx, n):\n                if target[i] in p.child:\n                    p = p.child[target[i]]\n                    if p.cost:\n                        \n                        res = min(res, p.cost + dfs(i + 1))\n                        # print(idx, i, p.cost, p.cost + dfs(i + 1), res)\n                else:\n                    break\n            return res\n        \n        return -1 if dfs(0) == math.inf else dfs(0)\n",
    "submit_ts": "1720322377",
    "subm_id": "1312348257"
}