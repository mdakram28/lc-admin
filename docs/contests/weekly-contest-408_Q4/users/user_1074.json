{
    "username": "dipeshchavan17",
    "submission": "class Solution {\npublic: \n    int bfs(vector<vector<int>> &g, int s, int x, int y, int nodes) {\n    queue<int> q;\n    vector<int> vis(nodes + 4, 0);\n    q.push(s);\n    vis[s] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : g[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = 1;\n            }\n        }\n    }\n    return vis[x] || vis[y];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         vector<pair<pair<int, int>, int>> circles(circles2.size());\n         vector<vector<int>> graph(circles2.size() + 4);\n        int n=circles2.size();\n        \n        for (int i = 0; i < n; ++i) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].first.second=circles2[i][1];\n            circles[i].second=circles2[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < n; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double d = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int r = circles[i].second + circles[j].second;\n                if (r >= d) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int b = 0;\n        b = max(b, bfs(graph, n, n + 1, n + 2, n + 4));\n        b = max(b, bfs(graph, n + 3, n + 2, n + 1, n + 4));  \n        return b ? false : true;   \n    }\n};",
    "submit_ts": "1722138793",
    "subm_id": "1335799795"
}