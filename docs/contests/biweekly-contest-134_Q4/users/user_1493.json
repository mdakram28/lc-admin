{
    "username": "sai_charan_04",
    "submission": "class Solution {\npublic:\n    long long int helper(vector<int>nums,int k)\n    {\n        int n = nums.size();\n        unordered_map<long long int,long long int>glob;\n        unordered_map<long long int,long long int>curr;\n        long long int fin = 0;\n        for(auto itt : nums)\n        {\n            curr.clear();\n            for(auto it:glob)\n            {\n                int naya = it.first&itt;\n                curr[naya] = curr[naya] + it.second;\n            }\n            curr[itt]++;\n            glob = curr;\n            if(curr[k]>0)\n            {\n                fin += curr[k];\n            }\n        }\n        return fin;\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        // long long int count = 0;\n        // long long int prefix_xor = 0;\n        // unordered_map<long long int, long long int> mpp;\n        // mpp[0] = 1;\n        // for (long long int num : nums) {\n        //     prefix_xor ^= num; \n        //     if (mpp.count(prefix_xor ^ k)) {\n        //     count += mpp[prefix_xor ^ k];\n        //     }\n        //     mpp[prefix_xor]++;\n        // }\n        // return count;\n        return helper(nums,k);\n    }\n};",
    "submit_ts": "1720280707",
    "subm_id": "1311799223"
}