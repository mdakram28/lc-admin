{
    "username": "Konsept",
    "submission": "use std::collections::HashMap;\n\nimpl Solution {\n    pub fn count_subarrays(nums: Vec<i32>, k: i32) -> i64 {\n        let n = nums.len();\n        let mut count: i64 = 0;\n        let mut prev_results: HashMap<i32, i64> = HashMap::new();\n\n        for i in 0..n {\n            let mut curr_results: HashMap<i32, i64> = HashMap::new();\n\n            if nums[i] == k {\n                count += 1;\n            }\n            *curr_results.entry(nums[i]).or_insert(0) += 1;\n\n            for (&val, &freq) in prev_results.iter() {\n                let new_and_result = val & nums[i];\n                if new_and_result == k {\n                    count += freq;\n                }\n                *curr_results.entry(new_and_result).or_insert(0) += freq;\n            }\n\n            prev_results = curr_results;\n        }\n\n        count\n    }\n}",
    "submit_ts": "1720278695",
    "subm_id": "1311720301"
}