{
    "username": "Wooohs",
    "submission": "class TrieNode {\npublic: \n  TrieNode * children[26];\n  int cost = -1;\n};\n\nvoid add(TrieNode * root, string & str, int cost) {\n  TrieNode * cur = root;\n  for (char c : str) {\n    if (cur->children[c-'a'] == nullptr) {\n      cur->children[c-'a'] = new TrieNode();\n    }\n    cur = cur->children[c-'a'];\n  }\n  if (cur->cost == -1) {\n    cur->cost = cost;\n  } else {\n    cur->cost = min(cost, cur->cost);\n  }\n  // cout << \"str \" << str << \" cost \" << cost << \" cur->cost \" << cur->cost << endl;\n}\n\nclass Solution {\npublic:\n  int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    TrieNode * root = new TrieNode();\n    for (int i = 0; i < words.size(); i++) {\n      string & w = words[i];\n      int cost = costs[i];\n      add(root, w, cost);\n    }\n    vector<int> memo(target.size(), -1);\n    int res = dfs(root, target, 0, memo);\n    return res == INT_MAX/2 ? -1 : res;\n  }\n  \n  int dfs(TrieNode * root, string & target, int idx, vector<int>& memo) {\n    if (idx == target.size()) {\n      return 0;\n    }\n    \n    if (memo[idx] != -1) {\n      return memo[idx];\n    }\n    \n    TrieNode * cur = root;\n    int res = INT_MAX/2;\n    for (int i = idx; i < target.size(); i++) {\n      cur = cur->children[target[i] - 'a'];\n      if (cur == nullptr) {\n        break;\n      }\n      if (cur->cost != -1) {\n        // cout << target.substr(idx, i-idx+1) << endl;\n        res = min(res, dfs(root, target, i+1, memo) + cur->cost);\n      }\n    }\n    \n    return memo[idx] = res;\n  }\n};",
    "submit_ts": "1720323049",
    "subm_id": "1312366029"
}