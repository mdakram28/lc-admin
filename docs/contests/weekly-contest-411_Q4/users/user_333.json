{
    "username": "Ryazimn",
    "submission": "typedef long long ll;\nconst int N = 1e5 + 1;\nclass Solution {\npublic:\n    ll seg1[N * 4], seg2[N * 4], seg3[N * 4];\n    void insert1(int x, int st, int ed, int p, int v) {\n        if (st > p || ed < p) {\n            return;\n        }\n        if (st == ed) {\n            seg1[x] = v;\n            return;\n        }\n        insert1(x * 2 + 1, st, (st + ed) / 2, p, v);\n        insert1(x * 2 + 2, (st + ed) / 2 + 1, ed, p, v);\n        seg1[x] = seg1[x * 2 + 1] + seg1[x * 2 + 2];\n    }\n    ll getSum1(int x, int st, int ed, int l, int r) {\n        if (st > r || ed < l) {\n            return 0;\n        }\n        if (l <= st && ed <= r) {\n            return seg1[x];\n        }\n        return getSum1(x * 2 + 1, st, (st + ed) / 2, l, r) + getSum1(x * 2 + 2, (st + ed) / 2 + 1, ed, l, r);\n    }\n    void insert2(int x, int st, int ed, int p, int v) {\n        if (st > p || ed < p) {\n            return;\n        }\n        if (st == ed) {\n            seg2[x] = v;\n            seg3[x] = 1;\n            return;\n        }\n        insert2(x * 2 + 1, st, (st + ed) / 2, p, v);\n        insert2(x * 2 + 2, (st + ed) / 2 + 1, ed, p, v);\n        seg2[x] = seg2[x * 2 + 1] + seg2[x * 2 + 2];\n        seg3[x] = seg3[x * 2 + 1] + seg3[x * 2 + 2];\n    }\n    pair<ll, ll> getSum2(int x, int st, int ed, int l, int r) {\n        if (st > r || ed < l) {\n            return {0, 0};\n        }\n        if (l <= st && ed <= r) {\n            return {seg2[x], seg3[x]};\n        }\n        pair<ll, ll> L = getSum2(x * 2 + 1, st, (st + ed) / 2, l, r);\n        pair<ll, ll> R = getSum2(x * 2 + 2, (st + ed) / 2 + 1, ed, l, r);\n        return  {L.first + R.first, L.second + R.second};\n    }\nvector<ll> countKConstraintSubstrings(string s, int k, vector<vector<int>>& qs) {\n        int n = s.size();\n        vector<pair<int, int>> q[n];\n        vector<ll> ans(qs.size());\n        for (int i = 0; i < qs.size(); i++) {\n            q[qs[i][0]].push_back({qs[i][1], i});\n        }\n        vector<int> ind[2];\n        int low[n];\n        ll cnt = 0, val = 0;\n        for (int i = 0; i < n; i++) {\n            ind[s[i] - '0'].push_back(i);\n            if (ind[0].size() <= k || ind[1].size() <= k) {\n                low[i] = 0;\n            } else {\n                low[i] = 1 + min(ind[0][ind[0].size() - k - 1], ind[1][ind[1].size() - k - 1]);\n            }\n        }\n        vector<int> pos[n];\n        for (int i = 0; i < n; i++) {\n            pos[low[i]].push_back(i);\n            insert1(0, 0, n - 1, i, i - low[i] + 1);\n        }\n        for (ll i = 0; i < n; i++) {\n            for (pair<int, int> r: q[i]) {\n                pair<ll, ll> t = getSum2(0, 0, n - 1, i, r.first);\n                ans[r.second] = getSum1(0, 0, n - 1, i, r.first) - t.second * (i - 1) + t.first;\n            }\n            for (int j: pos[i]) {\n                insert1(0, 0, n - 1, j, 0);\n                insert2(0, 0, n - 1, j, j);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723953307",
    "subm_id": "1359817777"
}