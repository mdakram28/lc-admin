{
    "username": "ROHITH1894",
    "submission": "class TrieNode {\npublic:\n    vector<TrieNode*> child;\n    int idx = -1;\n    int minCost = INT_MAX;\n    TrieNode() : child(26, nullptr) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int idx, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int id = c - 'a';\n            if (node->child[id] == nullptr) {\n                node->child[id] = new TrieNode();\n            }\n            node = node->child[id];\n        }\n        node->minCost = min(node->minCost, cost);\n        node->idx = idx;\n    }\n\n    void searchh(const string& target, int start,vector<int>& dp) {\n        // vector<pair<int, int>> ans;\n        TrieNode* node = root;\n        for (int i = start; i < target.size(); ++i) {\n            int id = target[i] - 'a';\n            if (node->child[id] == nullptr) {\n                break;\n            }\n            node = node->child[id];\n            if (node->idx != -1) {\n                dp[i+1]=min(dp[i+1],dp[start]+node->minCost);\n                // ans.push_back({i + 1, node->minCost});\n            }\n        }\n        return ;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& w, vector<int>& c) {\n        Trie trie;\n\n        for (int i = 0; i < w.size(); ++i) {\n            trie.insert(w[i], i, c[i]);\n        }\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            trie.searchh(target, i,dp);\n            // for (auto& z : v) {\n            //     int len = z.first;\n            //     int cost = z.second;\n            //     dp[len] = min(dp[len], dp[i] + cost);\n            // }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323423",
    "subm_id": "1312375202"
}