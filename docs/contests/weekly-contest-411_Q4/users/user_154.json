{
    "username": "yzkkai",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k,\n                                                 vector<vector<int>>& quer) {\n        int n = size(s), q = size(quer);\n        for (int i = 0; i < q; ++i) {\n            ++quer[i][0], ++quer[i][1];\n            quer[i].emplace_back(i);\n        }\n\n        vector pref(n + 1, vector<int>(2));\n        for (int i = 1; i <= n; ++i)\n            for (int j = 0; j <= 1; ++j)\n                pref[i][j] = pref[i - 1][j] + (s[i - 1] == '0' + j);\n\n        int sq = max(1, n / max(1, (int)sqrt(q)));\n        sort(quer.begin(), quer.end(), [&](const auto& x, const auto& y) {\n            if (x[0] / sq != y[0] / sq)\n                return x[0] < y[0];\n            else\n                return x[0] / sq & 1 ? x[1] < y[1] : x[1] > y[1];\n        });\n\n        vector<int> mx(n + 1), mn(n + 1);\n        for (int i = 1; i <= n; ++i) {\n            int L = i, R = n + 1;\n            while (R - L > 1) {\n                int mid = (L + R) >> 1;\n                if (pref[mid][0] - pref[i - 1][0] <= k ||\n                    pref[mid][1] - pref[i - 1][1] <= k)\n                    L = mid;\n                else\n                    R = mid;\n            }\n            mx[i] = L;\n\n            L = 0, R = i;\n            while (R - L > 1) {\n                int mid = (L + R) >> 1;\n                if (pref[i][0] - pref[mid - 1][0] <= k ||\n                    pref[i][1] - pref[mid - 1][1] <= k)\n                    R = mid;\n                else\n                    L = mid;\n            }\n            mn[i] = R;\n        }\n\n        vector<long long> ans(q);\n        int l = 1, r = 0;\n        long long cur = 0;\n        for (const auto& v : quer) {\n            int ll = v[0], rr = v[1];\n            while (ll < l) {\n                --l;\n                cur += min(r, mx[l]) - l + 1;\n                // cout << l << ' ' << r << ' ' << cur << '\\n';\n            }\n            while (r < rr) {\n                ++r;\n                cur += r - max(l, mn[r]) + 1;\n                // cout << l << ' ' << r << ' ' << R << ' ' << cur << '\\n';\n            }\n\n            while (l < ll) {\n                cur -= min(r, mx[l]) - l + 1;\n                ++l;\n                // cout << l << ' ' << r << ' ' << cur << '\\n';\n            }\n            while (rr < r) {\n                cur -= r - max(l, mn[r]) + 1;\n                --r;\n                // cout << l << ' ' << r << ' ' << cur << '\\n';\n            }\n\n            ans[v[2]] = cur;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723953353",
    "subm_id": "1359818999"
}