{
    "username": "Ometek",
    "submission": "### Trie-tree implementation\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = 10**10\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for c in word:\n            if c not in node.children:\n                node.children[c] = TrieNode()\n            node = node.children[c]\n        node.cost = min(cost, node.cost)\n    \n    def search(self, s, start):\n        node = self.root\n        matches = []\n        for i in range(start, len(s)):\n            if s[i] in node.children:\n                node = node.children[s[i]]\n                if node.cost is not None:\n                    matches.append((i + 1, node.cost))\n            else:\n                break\n        return matches\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n, m = len(target), len(words)\n    \n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n    \n        dp = [10 ** 10] * (n + 1)\n        dp[0] = 0 \n    \n        for i in range(n):\n            if dp[i] >= 10**10:\n                continue\n            \n            matches = trie.search(target, i)\n            for idx, cost in matches:\n                dp[idx] = min(dp[idx], dp[i] + cost)\n        \n        result = dp[n]\n        return result if result < 10**10 else -1\n\n",
    "submit_ts": "1720320746",
    "subm_id": "1312303406"
}