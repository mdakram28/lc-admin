{
    "username": "areke",
    "submission": "\ntemplate <class T> \nstruct Seg {\n\tvector<T> seg;\n\tint sz;\n\tconst T ID = (1LL << 30) - 1;\n\tvoid init(int n) {\n\t\tsz = 1;\n\t\twhile (sz <= n) sz *= 2;\n\t\tseg.assign(2 * sz, ID);\n\t}\n\n\tT comb(T a, T b) {\n    return a & b;\n\t}\n\n\tT query(int l, int r, int tl, int tr, int ind) {\n\t\tif (l <= tl && r >= tr) {\n\t\t\treturn seg[ind];\n\t\t}\n\t\tif (l > tr || r < tl) return ID;\n\t\tT left = query(l, r, tl, (tl + tr) / 2, 2 * ind + 1);\n\t\tT right = query(l, r, (tl + tr ) / 2 + 1, tr, 2 * ind + 2);\n\t\treturn comb(left, right); \n\t}\n\n\tT query(int l, int r) {\n\t\treturn query(l, r, 0, sz - 1, 0);\n\t}\n\n\tvoid pull(int ind) {\n\t\tseg[ind] = comb(seg[2 * ind + 1], seg[2 * ind + 2]);\n\t\tif (ind == 0) return;\n\t\tpull((ind - 1) / 2);\n\t}\n\n\tvoid upd(int ind, T v) {\n\t\tseg[ind + sz - 1] = v;\n\t\tpull((ind + sz - 2) / 2); \n\t}\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        Seg<long long> seg;\n        seg.init(n);\n        for (int i = 0; i < n; i++) {\n            seg.upd(i, nums[i]);\n        }\n        long long res = 1e18;\n        for (int i = 0; i < nums.size(); i++) {\n            int low = i;\n            int high = n - 1;\n            int best = i;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (seg.query(i, mid) < k) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                    best = mid;\n                }\n            }\n            if (best >= i && best < n) res = min(res, abs(k - seg.query(i, best)));\n            \n            if (best-1 >= i && best-1 < n) res = min(res, abs(k - seg.query(i, best - 1)));\n            \n            if (best+1 >= i && best+1 < n) res = min(res, abs(k - seg.query(i, best + 1)));\n                    \n        }\n        return res;\n    }\n};",
    "submit_ts": 1717297064.0
}