{
    "username": "RAJINIKANTH-KAKARLA",
    "submission": "MOD = 10**9 + 7\n\nclass Solution(object):\n    def numberOfPermutations(self, n, requirements):\n        \"\"\"\n        :type n: int\n        :type requirements: List[List[int]]\n        :rtype: int\n        \"\"\"\n        # Precompute the maximum required inversions\n        max_inversions = max(cnt for _, cnt in requirements)\n        \n        # Initialize DP table for up to n elements and max_inversions inversions\n        dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n        \n        for i in range(1, n + 1):\n            prefix_sum = [0] * (max_inversions + 2)\n            for k in range(max_inversions + 1):\n                prefix_sum[k + 1] = (prefix_sum[k] + dp[i - 1][k]) % MOD\n            for k in range(max_inversions + 1):\n                if k >= i:\n                    dp[i][k] = (prefix_sum[k + 1] - prefix_sum[k - i + 1] + MOD) % MOD\n                else:\n                    dp[i][k] = prefix_sum[k + 1] % MOD\n\n        # Create a map from the requirements for quick lookup\n        req_map = {endi: cnti for endi, cnti in requirements}\n\n        # Initialize the final DP table for filtering results based on requirements\n        final_dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n        final_dp[0][0] = 1\n\n        for i in range(1, n + 1):\n            for k in range(max_inversions + 1):\n                if (i - 1) in req_map and req_map[i - 1] != k:\n                    continue\n                for j in range(min(k + 1, i)):\n                    final_dp[i][k] = (final_dp[i][k] + final_dp[i - 1][k - j]) % MOD\n\n        # Calculate the final answer\n        answer = 0\n        if (n - 1) in req_map:\n            answer = final_dp[n][req_map[n - 1]]\n        else:\n            for k in range(max_inversions + 1):\n                answer = (answer + final_dp[n][k]) % MOD\n\n        return answer\n",
    "submit_ts": 1719067296.0
}