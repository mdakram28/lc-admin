{
    "username": "adityavkrm",
    "submission": "class SegmentTree {\n    vector<int> tree;\n    int n;\npublic:\n    SegmentTree(int n): n(n) {\n        tree = vector<int>(n << 1);\n    }\n\n    SegmentTree(const vector<int>& arr): n(arr.size()), tree(arr.size() << 1) {\n        copy(arr.begin(), arr.end(), tree.begin() + n);\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[i<<1] + tree[i<<1|1];\n        }\n    }\n\n    void increment(int i, int val) {\n        i += n;\n        tree[i] += val;\n        while (i > 1) {\n            tree[i >> 1] = tree[i] + tree[i ^ 1];\n            i >>= 1;\n        }\n    }\n\n    // Important: sum of range [l, r) (exclusive)\n    int sum(int l, int r) {\n        int s = 0;\n        for (l +=n, r += n; l < r; l >>= 1, r >>= 1) {\n            if (l & 1) {\n                s += tree[l++];\n            }\n            if (r & 1) {\n                s += tree[--r];\n            }\n        }\n        return s;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        const int n = nums.size();\n        SegmentTree segTree(n);\n        for (int i = 1; i < (n - 1); ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                cout << \"Incremented index \" << i<<endl;\n                segTree.increment(i, 1);\n                ++i;\n            }\n        }\n        \n        auto isPeak = [](int i, const vector<int>& nums) {\n            return i > 0 && i < (nums.size() - 1) && (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]);\n        };\n        \n        vector<int> ans;\n        for (auto& q: queries) {\n            if (q[0] == 1) {\n                ans.push_back((q[2] >= q[1] + 2) ? segTree.sum(q[1] + 1, q[2]) : 0);\n            } else {\n                const int i = q[1];\n                if (nums[i] == q[2]) {\n                    continue;\n                }\n                bool wasPeak = isPeak(i, nums), wasPrevPeak = false, wasNextPeak = false;\n                if (i > 0) {\n                    wasPrevPeak = isPeak(i - 1, nums);\n                }\n                if (i < (n - 1)) {\n                    wasNextPeak = isPeak(i + 1, nums);\n                }\n                \n                nums[i] = q[2];\n                \n                bool isNowPeak = isPeak(i, nums);\n                segTree.increment(i, (int)isNowPeak - wasPeak);\n                // cout << \"Incremented index \" << i<<\" by \"<< ((int)isNowPeak - wasPeak) << endl;\n                if (i > 0) {\n                    isNowPeak = isPeak(i - 1, nums);\n                    segTree.increment(i - 1, (int)isNowPeak - wasPrevPeak);\n                    // cout << \"Incremented index \" << i - 1<<\" by \"<< ((int)isNowPeak - wasPrevPeak) << endl;\n                }\n                if (i < (n - 1)) {\n                    isNowPeak = isPeak(i + 1, nums);\n                    segTree.increment(i + 1, (int)isNowPeak - wasNextPeak);\n                    // cout << \"Incremented index \" << i + 1<<\" by \"<< ((int)isNowPeak - wasNextPeak) << endl;\n                }\n                \n            }\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1718507627",
    "subm_id": "1289657538"
}