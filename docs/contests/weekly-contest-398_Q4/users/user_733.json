{
    "username": "V3L0CITY",
    "submission": "class Solution {\n    data class Data(val currStair: Int, val jump: Int, val prevJump: Boolean)\n    var k = 0\n    var dp = HashMap<Data, Int>()\n    fun waysToReachStair(k: Int): Int {\n        this.k = k\n        return recursion(1, 0, false)\n    }\n    \n    fun recursion(wtf: Int, jump: Int, prevJump: Boolean): Int {\n        var skldf = 0\n        if (wtf == k) skldf++\n        if (wtf > k + 1) return 0\n        var data = Data(wtf, jump, prevJump)\n        if (dp.containsKey(data)) return dp[data]!!\n        \n        if (!prevJump) {\n            skldf += recursion(wtf - 1, jump, true)\n        }\n        skldf += recursion(wtf + (1 shl jump), jump + 1, false)\n        dp[data] = skldf\n        return skldf\n    }\n}",
    "submit_ts": 1716089715.0
}