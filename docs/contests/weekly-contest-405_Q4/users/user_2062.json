{
    "username": "Sci-fi-vy",
    "submission": "from typing import List\nfrom collections import defaultdict\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        word_costs = {}\n        \n        # Create a dictionary where each word maps to its minimum cost\n        for word, cost in zip(words, costs):\n            if word in word_costs:\n                word_costs[word] = min(word_costs[word], cost)\n            else:\n                word_costs[word] = cost\n        \n        # Initialize a DP array with infinity and set the starting point to 0\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Iterate over each position in the target string\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            \n            # Check each word and its cost\n            for word, cost in word_costs.items():\n                word_len = len(word)\n                end_idx = i + word_len\n                \n                # If the word fits in the target and matches the substring\n                if end_idx <= n and target[i:end_idx] == word:\n                    # Update the DP array with the minimum cost\n                    dp[end_idx] = min(dp[end_idx], dp[i] + cost)\n        \n        # Return the result, if it's infinity, it means it's not possible\n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720320208",
    "subm_id": "1312286784"
}