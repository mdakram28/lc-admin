{
    "username": "alexhamidi",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Solution {\nprivate:\n    TrieNode* root;\n    vector<int> memo;\n\n    void buildTrie(vector<string>& words, vector<int>& costs) {\n        root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->cost = min(node->cost, costs[i]);\n        }\n    }\n\n    int dfs(const string& target, int index) {\n        if (index == target.length()) return 0;\n        if (memo[index] != -1) return memo[index];\n\n        int result = INT_MAX;\n        TrieNode* node = root;\n        for (int i = index; i < target.length(); ++i) {\n            if (!node->children.count(target[i])) break;\n            node = node->children[target[i]];\n            if (node->cost != INT_MAX) {\n                int subCost = dfs(target, i + 1);\n                if (subCost != INT_MAX) {\n                    result = min(result, node->cost + subCost);\n                }\n            }\n        }\n\n        return memo[index] = result;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        buildTrie(words, costs);\n        memo.assign(target.length(), -1);\n        int result = dfs(target, 0);\n        return result == INT_MAX ? -1 : result;\n    }\n};",
    "submit_ts": "1720322852",
    "subm_id": "1312360782"
}