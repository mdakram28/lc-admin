{
    "username": "Nishendu_Mishra",
    "submission": "// class Solution {\n// public:\n\n//     int count_flips(vector<int>&arr){\n//         int left =0;\n//         int right = arr.size()-1;\n//         int flips =0;\n\n//         while( left < right){\n//             if( arr[left] != arr[right]){\n//                 flips++;\n//             }\n//             left++;\n//             right--;\n//         }\n\n//         return flips;\n//     }\n\n//     int minFlips(vector<vector<int>>& grid) {\n//         int n = grid.size();\n//         int m = grid[0].size();\n\n//         int rowflips = 0;\n//         for(int i=0;i<n;i++){\n//             rowflips += count_flips(grid[i]);\n//         }\n\n//         int colflips = 0;\n//         for(int j=0;j<m;j++){\n//             vector<int>col(n);\n//             for(int i=0;i<n;i++){\n//                 col[i] = grid[i][j];\n//             }\n//             colflips += count_flips(col);\n//         }\n\n//         int onescount =0;\n//         for( auto row : grid){\n//             for( auto cell : row){\n//                 if( cell == 1){\n//                     onescount++;\n//                 }\n//             }\n//         }\n\n//         int aflips = (4 - (onescount %4)%4);\n\n//         return rowflips + colflips + aflips;\n//     }\n// };\n\n#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int ans = 0;\n        \n        if (n % 2 == 1 && m % 2 == 1) {\n            if (grid[n / 2][m / 2] == 1) {\n                ans += 1;\n            }\n        }\n\n        vector<int> shift(3, 0);\n        if (n % 2 == 1) {\n            int a = 0, b = m - 1;\n            while (a < b) {\n                int sm = grid[n / 2][a] + grid[n / 2][b];\n                shift[sm] += 1;\n                a += 1;\n                b -= 1;\n            }\n        }\n\n        if (m % 2 == 1) {\n            int a = 0, b = n - 1;\n            while (a < b) {\n                int sm = grid[a][m / 2] + grid[b][m / 2];\n                shift[sm] += 1;\n                a += 1;\n                b -= 1;\n            }\n        }\n\n        if (shift[2] % 2 == 1) {\n            if (shift[1] > 0) {\n                ans += shift[1];\n            } else {\n                ans += 2;\n            }\n        } else {\n            ans += shift[1];\n        }\n\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int a = grid[i][j];\n                int b = grid[n - 1 - i][j];\n                int c = grid[i][m - 1 - j];\n                int d = grid[n - 1 - i][m - 1 - j];\n\n                int sm = a + b + c + d;\n\n                if (sm != 0 && sm != 4) {\n                    ans += min(sm, 4 - sm);\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722699858",
    "subm_id": "1343224514"
}