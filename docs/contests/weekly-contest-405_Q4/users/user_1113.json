{
    "username": "michaelxu_168",
    "submission": "class Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n       // abcdef\n       // abc d ef\n       // abc def \n       int n=target.length();\n       Tries tries = new Tries(n);\n       for(int i=0; i<words.length; i++){\n        tries.addNode(words[i], costs[i]);\n       }\n        tries.findAns(target);\n       // tries.print();\n        return tries.getAns();\n    }\n\n    public class Tries{\n        Node root;\n        int[] dp;\n        public Tries(int n){\n            root = new Node();\n            dp = new int[n+1];\n            Arrays.fill(dp, Integer.MAX_VALUE);\n            dp[0] = 0;\n        }\n\n        public void addNode(String s, int cost){\n            Node cur = root;\n            for(int i=0; i<s.length(); i++){\n                int idx = s.charAt(i) - 'a';\n                if(cur.children[idx] == null){\n                    cur.children[idx] = new Node();\n                }\n                cur = cur.children[idx];\n            }\n            cur.isWord = true;\n            cur.cost = cur.cost==0 ? cost :  Math.min(cur.cost, cost);\n        }\n\n        public void findNodeStartWithIdx(String s, int startIdx, int startCost){\n            int len = s.length();\n            Node cur = root;\n            for(int i=startIdx; i<len; i++){\n                int idx = s.charAt(i) - 'a';\n                if(cur.children[idx] != null){\n                    if(cur.children[idx].isWord){\n                        //System.out.println(cur.children[idx].cost);\n                        dp[i+1] = Math.min(dp[i+1], startCost + cur.children[idx].cost);\n                    }\n                    cur = cur.children[idx];\n                } else {\n                    return;\n                }\n            }\n        }\n\n        public int getAns(){\n            return dp[dp.length-1]==Integer.MAX_VALUE?-1:dp[dp.length-1];\n        }\n\n        public void print(){\n            System.out.println(Arrays.toString(dp));\n        }\n\n        public void findAns(String target){\n            int len = target.length();\n            for(int i=0; i<len; i++){\n                if(dp[i] != Integer.MAX_VALUE){\n                    //print();\n                    findNodeStartWithIdx(target, i, dp[i]);\n                }\n            }\n        }\n\n    }\n\n    public class Node{\n        Node[] children;\n        boolean isWord = false;\n        int cost = 0;\n        public Node(){\n            children = new Node[32];\n        }\n    }\n}",
    "submit_ts": "1720323774",
    "subm_id": "1312383741"
}