{
    "username": "log1",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n=nums.size(); \n        vector<vector<int>>dp(n,vector<int>(k+1,1));\n        vector<unordered_map<int,int>>mp(k+1);\n        vector<int>ndp(k+1,-1);\n        int ans=1;\n        for(int i=0;i<n;++i)\n        { \n            for(int j=0;j<=k;++j)\n            { \n                int & ret=dp[i][j];\n                for(int k=0;k<j;++k)\n                { \n                    ret=max(ret,1+ndp[k]); \n                }\n                //seq 1 iterations\n                if(mp[j].count(nums[i]))\n                { \n                    ret=max(ret,1+mp[j][nums[i]]); \n                } \n                // cout<<mp.size()<<endl;\n                ans=max(ans,dp[i][j]);\n            } \n            for(int j=0;j<=k;++j)\n            { \n                ndp[j]=max(ndp[j],dp[i][j]);\n                // for(auto& it:ndp)\n                // {\n                //     cout<<it<<\" \";\n                // }\n                // cout<<dp[i][j];\n                // mp[i][nums[j]]=max(mp[i][nums[j]],dp[i][j]);\n                mp[j][nums[i]]=max(mp[j][nums[i]],dp[i][j]);\n            } \n        }\n        mp.clear();\n        return ans;\n    }\n};",
    "submit_ts": 1717861956.0
}