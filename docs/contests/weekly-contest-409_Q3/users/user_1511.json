{
    "username": "wang-wen-qi-i",
    "submission": "import java.util.HashMap;\n\nclass Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n\t\tboolean[] in = new boolean[n];\n\t\tHashMap<Integer, Node> map = new HashMap<Integer, Node>();\n\t\t@SuppressWarnings(\"unused\")\n\t\tNode list = init(n, in, map);\n\t\t\n\t\tint[] ans = new int[queries.length];\n\t\tint num = n - 1, index = 0;;\n\t\tfor (int[] q : queries) {\n\t\t\tif (!in[q[0]]) {\n\t\t\t\tans[index++] = num;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tNode start = map.get(q[0]);\n\t\t\tint reduce = merge(start, q[1], in);\n\t\t\t\n\t\t\tnum -= reduce;\n\t\t\tans[index++] = num;\n\t\t}\n\t\treturn ans;\n    }\n\n\tprivate int merge(Node start, int val, boolean[] in) {\n\t\tint reduce = 0;\n\t\twhile (start.next.val < val) {\n\t\t\tNode del = start.next;\n\t\t\tstart.next = start.next.next;\n\t\t\tin[del.val] = false;\n\t\t\treduce++;\n\t\t}\n\t\treturn reduce;\n\t}\n\n\tprivate Node init(int n, boolean[] in, HashMap<Integer, Node> map) {\n\t\tNode list = null;\n\t\tfor (int i = 0; i < n; i++) {\n\t\t\tin[i] = true;\n\t\t\tNode tmp = new Node(i);\n\t\t\tif (list == null) {\n\t\t\t\tlist = tmp;\n\t\t\t} else {\n\t\t\t\tmap.get(i-1).next = tmp;\n\t\t\t}\n\t\t\tmap.put(i, tmp);\n\t\t}\n\t\treturn list;\n\t}\n\n}\n\nclass Node {\n\tpublic int val = 0;\n\tpublic Node next = null;\n\tpublic Node() {};\n\tpublic Node(int val) {\n\t\tthis.val = val;\n\t}\n\tpublic Node(int val, Node next) {\n\t\tthis.val = val;\n\t\tthis.next = next;\n\t}\n}\n",
    "submit_ts": "1722741331",
    "subm_id": "552337533"
}