{
    "username": "Zhan Kurbanbayev",
    "submission": "/// In The Name Of God\n \n#include <bits/stdc++.h>\n \n#define f first\n#define s second\n \n#define pb push_back\n#define pp pop_back\n#define mp make_pair\n \n#define sz(x) (int)x.size()\n#define sqr(x) ((x) * 1ll * (x))\n#define all(x) x.begin(), x.end()\n \n#define rep(i, l, r) for (int i = (l); i <= (r); i++)\n#define per(i, l, r) for (int i = (l); i >= (r); i--)\n \n#define Kazakhstan ios_base :: sync_with_stdio(0), cin.tie(0), cout.tie(0);\n \n#define nl '\\n'\n#define ioi exit(0);\n \ntypedef long long ll;\ntypedef long double ld;\ntypedef unsigned long long ull;\n \nconst int N = (int)1e5 + 7;\nconst int inf = (int)1e9 + 7;\nconst int mod = (int)1e9 + 7;\nconst ll linf = (ll)1e18 + 7;\n \nconst int dx[] = {-1, 0, 1, 0, 1, -1, -1, 1};\nconst int dy[] = {0, 1, 0, -1, 1, -1, 1, -1};\n \nusing namespace std;\n\n\nclass Solution {\npublic: \n    int dp[N][10];\n    int go[N][10], gor[N][10];\n    int mem[N][10];\n\n    int bp(int x, int y, int r) {\n        int res = 1;\n        int sy = y;\n        if (~mem[y][r]) return mem[y][r];\n        while (y) {\n            if (y & 1) res = res * x % r;\n            x = x * x % r, y >>= 1;\n        }\n        return mem[sy][r] = res;\n    }\n\n    bool check(int pos, int n, int r, int k) {\n        if (pos == (n + 1) / 2) {\n            return !r;\n        }\n        if (~dp[pos][r]) return dp[pos][r];\n        per(i, 9, 0 + !pos) {\n            int nr = r;\n            nr += bp(10, n - pos - 1, k) * i;\n            if (!(pos == n / 2 && n % 2 == 1)) {\n                nr += bp(10, pos, k) * i;\n            }\n            nr %= k;\n            if (check(pos + 1, n, nr, k)) {\n                go[pos][r] = i;\n                gor[pos][r] = nr;\n                return dp[pos][r] = 1;\n            }\n        }\n        return dp[pos][r] = 0;\n    }\n    string largestPalindrome(int n, int k) {\n        memset(dp, -1, sizeof(dp));\n        memset(mem, -1, sizeof(mem));\n        check(0, n, 0, k);\n\n        string ans;\n        int pos = 0, r = 0;\n        while (pos < (n + 1) / 2) {\n            ans += go[pos][r] + '0';\n            r = gor[pos][r];\n            pos++;\n        }\n        string suff = ans;\n        reverse(all(suff));\n        if (n & 1) suff.erase(suff.begin());\n        return ans + suff; \n    }\n};",
    "submit_ts": "1723949828",
    "subm_id": "1359729957"
}