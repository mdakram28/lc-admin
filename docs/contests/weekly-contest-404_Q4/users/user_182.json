{
    "username": "nimish7866",
    "submission": "class Solution {\npublic:\n\n\npair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n    int n = adj.size();\n    vector<int> dist(n, -1);\n    queue<int> q;\n    q.push(start);\n    dist[start] = 0;\n    int farthestNode = start;\n    int maxDist = 0;\n\n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n\n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                dist[neighbor] = dist[node] + 1;\n                q.push(neighbor);\n                if (dist[neighbor] > maxDist) {\n                    maxDist = dist[neighbor];\n                    farthestNode = neighbor;\n                }\n            }\n        }\n    }\n\n    return {farthestNode, maxDist};\n}\n\n\nint findDiameter(const vector<vector<int>>& adj) {\n    pair<int, int> p1 = bfs(0, adj);\n    pair<int, int> p2 = bfs(p1.first, adj);\n    return p2.second;\n}\n\n\nvector<vector<int>> buildAdjList(int n, const vector<vector<int>>& edges) {\n    vector<vector<int>> adj(n);\n    for (const auto& edge : edges) {\n        adj[edge[0]].push_back(edge[1]);\n        adj[edge[1]].push_back(edge[0]);\n    }\n    return adj;\n}\n\n\nint findRadius(const vector<vector<int>>& adj) {\n    pair<int, int> p1 = bfs(0, adj);\n    pair<int, int> p2 = bfs(p1.first, adj);\n    return (p2.second + 1) / 2;\n}\n\n int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n    int n = edges1.size() + 1;\n    int m = edges2.size() + 1;\n    \n    vector<vector<int>> adj1 = buildAdjList(n, edges1);\n    vector<vector<int>> adj2 = buildAdjList(m, edges2);\n\n    int diameter1 = findDiameter(adj1);\n    int diameter2 = findDiameter(adj2);\n    \n    int radius1 = findRadius(adj1);\n    int radius2 = findRadius(adj2);\n    \n    return max({diameter1, diameter2, radius1 + radius2 + 1});\n}\n   \n};",
    "submit_ts": 1719715119.0
}