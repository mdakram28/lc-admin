{
    "username": "pcwuu",
    "submission": "class Solution {\npublic:\n    struct Item {   \n        int cnt;\n        int l2, l1, r1, r2;\n        /*Item(int a, int b, int c, int d, int e) {\n            cnt = a;\n            l1 = b;\n            l2 = c;\n            r1 = d;\n            r2 = e;\n        }*/\n    };\n    \n    \n    class SegmentTree{\n    public:\n        int size;\n        vector<Item> segtree;\n        \n        SegmentTree(int n) {\n            size = n;\n            segtree.resize(size * 4, {0, 0, 0, 0, 0});\n        }\n        \n        void set(int i, int v, int x, int lx, int rx) {\n            if(rx == lx) {\n                segtree[x] = {0, v, v, v, v};\n                return;\n            }\n            \n            int m = lx + (rx - lx) / 2;\n            if(i <= m)\n                set(i, v, 2 * x + 1, lx, m);\n            else\n                set(i, v, 2 * x + 2, m + 1, rx);\n            \n            int cnt = 0;\n            if(segtree[2 * x + 1].r1 < segtree[2 * x + 1].r2 && segtree[2 * x + 1].r2 > segtree[2 * x + 2].l2)\n                cnt++;\n            if(segtree[2 * x + 1].r2 < segtree[2 * x + 2].l2 && segtree[2 * x + 2].l2 > segtree[2 * x + 2].l1)\n                cnt++;\n            segtree[x].cnt = segtree[2 * x + 1].cnt + segtree[2 * x + 2].cnt + cnt;\n            segtree[x].l2 = segtree[2 * x + 1].l2;\n            segtree[x].l1 = segtree[2 * x + 1].l1;\n            segtree[x].r1 = segtree[2 * x + 2].r1;\n            segtree[x].r2 = segtree[2 * x + 2].r2;\n            if(m - lx == 0) \n                segtree[x].l1 = segtree[2 * x + 2].l2;\n\n            if(rx == m + 1)\n                segtree[x].r1 = segtree[2 * x + 1].r2;            \n                    \n        }\n        \n        void set(int i, int v) {\n            set(i, v, 0, 0, size - 1);\n        }\n        \n        int query(int l, int r, int x, int lx, int rx) {\n            if(lx >= l && rx <= r)\n                return segtree[x].cnt;\n            if(lx > r || rx < l)\n                return 0;\n            \n            int m = lx + (rx - lx) / 2;\n            int ret = query(l, r, 2 * x + 1, lx, m) + query(l, r, 2 * x + 2, m + 1, rx);\n            if(l <= m && r >= m + 2 && rx >= m + 2) {\n                if(segtree[2 * x + 1].r2 < segtree[2 * x + 2].l2 && segtree[2 * x + 2].l2 > segtree[2 * x + 2].l1)\n                    ret++;                \n            }\n            if(l <= m - 1 && lx <= m - 1 && r >= m + 1) {\n                if(segtree[2 * x + 1].r1 < segtree[2 * x + 1].r2 && segtree[2 * x + 1].r2 > segtree[2 * x + 2].l2)\n                    ret++;                   \n            }\n            \n            return ret;\n        }\n        \n        int query(int l, int r) {\n            return query(l, r, 0, 0, size - 1);            \n        }\n        \n    };\n    \n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree st(n);\n        \n        for(int i = 0; i < n; i++)\n            st.set(i, nums[i]);\n        \n        vector<int> ans;\n        for(int i = 0; i < queries.size(); i++) {\n            if(queries[i][0] == 1)\n                ans.push_back(st.query(queries[i][1], queries[i][2]));\n            else\n                st.set(queries[i][1], queries[i][2]);\n        }\n        return ans;\n        \n        \n    }\n};",
    "submit_ts": 1718508762.0
}