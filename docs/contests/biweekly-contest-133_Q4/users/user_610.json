{
    "username": "arjha2002np",
    "submission": "#define MOD 1000000007\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MAX_INVERSIONS = 400;\n\n        unordered_map<int, int> requiredInversions; \n        for (auto& req : requirements) {\n            requiredInversions[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1; \n\n        for (int permutationLength = 1; permutationLength <= n; permutationLength++) {\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                for (int elementPosition = 0; elementPosition < permutationLength; elementPosition++) {\n                    int previousInversions = currentInversions - elementPosition;\n                    if (previousInversions >= 0) {\n                        dp[permutationLength][currentInversions] = (dp[permutationLength][currentInversions] + dp[permutationLength - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n            if (!requiredInversions.count(permutationLength)) {\n                continue;\n            }\n\n            int targetInversions = requiredInversions[permutationLength];\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; currentInversions++) {\n                if (currentInversions != targetInversions) {\n                    dp[permutationLength][currentInversions] = 0; \n                }\n            }\n        }\n\n        long result = 0;\n        for (long count : dp[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1719070791.0
}