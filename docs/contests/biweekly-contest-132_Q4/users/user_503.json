{
    "username": "run_time_error__",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        // long n = nums.size();\n        // int maxLengthh = 0;\n        \n      \n        // vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n\n        \n        // for (int i = 0; i < n; ++i) {\n        //     for (int j = 0; j < i; ++j) {\n        //         for (int p = 0; p <= k; ++p) {\n        //             if (nums[i] != nums[j] && p > 0) {\n        //                 dp[i][p] = max(dp[i][p], dp[j][p - 1] + 1);\n        //             } else if (nums[i] == nums[j]) {\n        //                 dp[i][p] = max(dp[i][p], dp[j][p] + 1);\n        //             }\n        //         }\n        //     }\n            \n        //     for (int p = 0; p <= k; ++p) {\n        //         maxLengthh = max(maxLengthh, dp[i][p]);\n        //     }\n        // }\n\n        // return maxLengthh;\n\n        // long n = nums.size();\n        // int maxLengthh = 1; \n        \n        // vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        \n   \n        // for (int i = 1; i < n; ++i) {\n        //     for (int p = 0; p <= k; ++p) {\n                \n        //         dp[i][p] = 1;\n                \n                \n        //         for (int j = i - 1; j >= 0; --j) {\n        //             if (nums[i] != nums[j] && p > 0) {\n        //                 dp[i][p] = max(dp[i][p], dp[j][p - 1] + 1);\n        //             } else if (nums[i] == nums[j]) {\n        //                 dp[i][p] = max(dp[i][p], dp[j][p] + 1);\n        //             }\n        //         }\n                \n        //         maxLengthh = max(maxLengthh, dp[i][p]);\n        //     }\n        // }\n\n        // return maxLengthh;\n        //         long n = nums.size();\n        // int maxLength = 1; \n        \n        \n        // vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n        \n        \n        // for (int i = 1; i < n; ++i) {\n            \n        //     dp[i][0] = 1;\n            \n         \n        //     for (int j = i - 1; j >= 0; --j) {\n        //         for (int p = 0; p <= k; ++p) {\n        //             if (nums[i] != nums[j] && p > 0) {\n        //                 dp[i][p] = max(dp[i][p], dp[j][p - 1] + 1);\n        //             } else if (nums[i] == nums[j]) {\n        //                 dp[i][p] = max(dp[i][p], dp[j][p] + 1);\n        //             }\n        //         }\n        //     }\n            \n          \n        //     for (int p = 0; p <= k; ++p) {\n        //         maxLength = max(maxLength, dp[i][p]);\n        //     }\n        // }\n\n        // return maxLength;\n        long n=nums.size(); \n        vector<vector<int>>dp(n,vector<int>(k+1,1)); \n        int anss=1; \n        vector<int>vk(k+1,-1); \n        vector<map<int,int>>vkm(k+1); \n        for(int i=0;i<n;i++){ \n            for(int j=0;j<=k;j++){ \n                for(int l=0;l<j;l++){ \n                    dp[i][j]=max(dp[i][j],1+vk[l]); \n                } \n                if(vkm[j].find(nums[i])!=vkm[j].end()){ \n                    dp[i][j]=max(dp[i][j],1+vkm[j][nums[i]]); \n                } \n                anss=max(anss,dp[i][j]); \n            } \n            for(int j=0;j<=k;j++){ \n                vk[j]=max(vk[j],dp[i][j]); \n                vkm[j][nums[i]]=max(vkm[j][nums[i]],dp[i][j]); \n            } \n        } \n        return anss; \n    }\n};",
    "submit_ts": "1717861533",
    "subm_id": "1281794192"
}