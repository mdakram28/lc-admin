{
    "username": "Souvik Ghosh",
    "submission": "#include <iostream>\n#include <string>\n#include <algorithm>\n#include <cstring>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    char dp_table[100001][7];\n    char dp_non_zero_table[100001][7];\n    int next_mod[100001][7];\n    int non_zero_next_mod[100001][7];\n    \n    string largestPalindrome(int digit_count, int divisor) {\n        if (divisor == 1 || divisor == 3 || divisor == 9) {\n            return string(digit_count, '9');\n        }\n        \n        if (divisor == 2) {\n            if (digit_count == 1) return \"8\";  // Special case when digit_count is 1\n            string result(digit_count, '9');\n            result[0] = '8';\n            result[digit_count - 1] = '8';\n            return result;\n        }\n        \n        if (divisor == 5) {\n            if (digit_count == 1) return \"5\";  // Special case when digit_count is 1\n            string result(digit_count, '9');\n            result[0] = '5';\n            result[digit_count - 1] = '5';\n            return result;\n        }\n        \n        if (divisor == 4) {\n            if (digit_count <= 3) return string(digit_count, '8'); // Handle small cases\n            string result(digit_count, '9');\n            result[0] = '8';\n            result[digit_count - 1] = '8';\n            result[1] = '8';\n            result[digit_count - 2] = '8';\n            return result;\n        }\n        \n        if (divisor == 8) {\n            if (digit_count <= 5) return string(digit_count, '8'); // Handle small cases\n            string result(digit_count, '9');\n            result[0] = '8';\n            result[digit_count - 1] = '8';\n            result[1] = '8';\n            result[digit_count - 2] = '8';\n            result[2] = '8';\n            result[digit_count - 3] = '8';\n            return result;\n        }\n        \n        if (divisor == 6) {\n            if (digit_count == 1) return \"6\";\n            if (digit_count == 2) return \"66\";\n            if (digit_count == 3) return \"888\";\n            string result(digit_count, '9');\n            result[0] = '8';\n            result[digit_count - 1] = '8';\n            if (digit_count % 2 == 1) {\n                result[digit_count / 2] = '8';\n            } else {\n                result[digit_count / 2] = '7';\n                result[(digit_count / 2) - 1] = '7';\n            }\n            return result;\n        }\n        \n        if (divisor == 7) {\n            if (digit_count == 1) return \"7\";\n            fill(&dp_table[0][0], &dp_table[0][0] + sizeof(dp_table), 0);\n            fill(&dp_non_zero_table[0][0], &dp_non_zero_table[0][0] + sizeof(dp_non_zero_table), 0);\n            \n            for (int i = 1; i < 10; ++i) {\n                dp_table[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    dp_non_zero_table[1][i % 7] = '0' + i;\n                }\n            }\n            \n            int base_modulo = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && dp_table[i][j] == 0)) {\n                        continue;\n                    }\n                    for (int k = 9; k >= 0; --k) {\n                        int new_modulo = (base_modulo * k + k + j * 10) % 7;\n                        if (dp_table[i + 2][new_modulo] == 0 || dp_table[i + 2][new_modulo] < '0' + k) {\n                            dp_table[i + 2][new_modulo] = '0' + k;\n                            next_mod[i + 2][new_modulo] = j;\n                        }\n                        if (k == 0) continue;\n                        if (dp_non_zero_table[i + 2][new_modulo] == 0 || dp_non_zero_table[i + 2][new_modulo] < '0' + k) {\n                            dp_non_zero_table[i + 2][new_modulo] = '0' + k;\n                            non_zero_next_mod[i + 2][new_modulo] = j;\n                        }\n                    }\n                }\n                base_modulo = (base_modulo * 10) % 7;\n            }\n            \n            int remaining_digits = digit_count;\n            string front_part(1, dp_non_zero_table[remaining_digits][0]);\n            string back_part(1, dp_non_zero_table[remaining_digits][0]);\n            int mod_val = non_zero_next_mod[remaining_digits][0];\n            remaining_digits -= 2;\n            while (remaining_digits) {\n                front_part += dp_table[remaining_digits][mod_val];\n                if (remaining_digits > 1) back_part += dp_table[remaining_digits][mod_val];\n                else break;\n                mod_val = next_mod[remaining_digits][mod_val];\n                remaining_digits -= 2;\n            }\n            reverse(back_part.begin(), back_part.end());\n            string result = front_part + back_part;\n            return result;\n        }\n        \n        return \"\";\n    }\n};\n",
    "submit_ts": "1723952399",
    "subm_id": "1359795365"
}