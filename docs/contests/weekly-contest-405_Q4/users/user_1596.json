{
    "username": "bleedin_maroon",
    "submission": "class Solution {\npublic:\n    vector<vector<pair<int,int>>> adj;\n    vector<int> generateLPS(string& s){\n        int n = s.size();\n        vector<int> lps(n, 0);\n        int i = 1, prev = 0;\n        while(i < n){\n            if(s[i] == s[prev]){\n                prev++;\n                lps[i] = prev;\n                i++;\n            }else{\n                if(prev > 0){\n                    prev = lps[prev-1];\n                }else{\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n        return lps;\n    }\n    void search(string& pat, string& txt, int wt)\n    {\n        string ns = pat + \"#\" + txt;\n        vector<int> lps = generateLPS(ns);\n        int n = pat.size();\n        for(int i=0; i<lps.size(); i++){\n            if(lps[i] == n){\n                adj[i-2*n].push_back({i-n, wt});\n            }\n        }\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        adj.resize(n+1);\n        int m = words.size();\n        map<string,int> mp;\n        for(int i=0; i<m; i++){\n            if(mp.find(words[i]) != mp.end())\n                mp[words[i]] = min(mp[words[i]], costs[i]);\n            else mp[words[i]] = costs[i];\n        }\n        for(auto &it: mp){\n            string st = it.first;\n            search(st, target, it.second);\n        }\n        vector<int> dp(n+1, 1e9);\n        dp[0] = 0;\n        for(int i=1; i<=n; i++){\n            for(auto it: adj[i-1]){\n                dp[it.first] = min(dp[it.first], it.second + dp[i-1]);\n            }\n        }\n        if(dp[n] >= 1e9) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720324531",
    "subm_id": "1312401786"
}