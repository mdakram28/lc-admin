{
    "username": "sethles",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int d1 = d(edges1);\n        int d2 = d(edges2);\n        int a = Math.max(d1, d2);\n        int b = (d1 + 1) / 2 + 1 + (d2 + 1) / 2;\n        return Math.max(a, b);\n    }\n    int d(int[][] edges) {\n        int n = edges.length + 1;\n        List<Integer>[] outs = new List[n];\n        Arrays.setAll(outs, index -> new ArrayList<>());\n        for (int[] e : edges) {\n            outs[e[0]].add(e[1]);\n            outs[e[1]].add(e[0]);\n        }\n        int furthest = furthest(0, n, outs)[0];\n        return furthest(furthest, n, outs)[1];\n    }\n    private int[] furthest(int seed, int n, List<Integer>[] outs) {\n        int[] dist = new int[n];\n        Arrays.fill(dist, Integer.MAX_VALUE);\n        ArrayDeque<int[]> q = new ArrayDeque<>(List.of(new int[]{seed, 0}));\n        int[] res = {seed, 0};\n        while (!q.isEmpty()) {\n            int[] todo = q.removeFirst();\n            int cur = todo[0], from = todo[1];\n            if (dist[cur] <= from) continue;\n            dist[cur] = from;\n            if (from > res[1]) {\n                res[0] = cur;\n                res[1] = from;\n            }\n            for (int next : outs[cur]) {\n                q.addLast(new int[]{next, from + 1});\n            }\n        }\n        return res;\n    }\n}\n/**\nWrong Answer\n546 / 723 testcases passed\nInput\nedges1 =\n[[0,1],[2,0],[3,2],[3,6],[8,7],[4,8],[5,4],[3,5],[3,9]]\nedges2 =\n[[0,1],[0,2],[0,3]]\nUse Testcase\nOutput\n6\nExpected\n7\n*/",
    "submit_ts": 1719717228.0
}