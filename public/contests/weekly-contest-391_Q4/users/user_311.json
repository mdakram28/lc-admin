{
    "username": "jwseph",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def minimumDistance(self, A: List[List[int]]) -> int:\n        A.sort()\n        add = SortedList()\n        sub = SortedList()\n        # distance is max r+c - (a+b) or r-c - (a-b)\n        for i, (r, c) in enumerate(A):\n            add.add((r+c, i))\n            sub.add((r-c, i))\n        def sol():\n            res = 0\n            if add[0][1] != add[-1][1]:\n                res = max(res, add[-1][0]-add[0][0])\n            else:\n                res = max(res, add[-2][0]-add[0][0], add[-1][0]-add[1][0])\n            if sub[0][1] != sub[-1][1]:\n                res = max(res, sub[-1][0]-sub[0][0])\n            else:\n                res = max(res, sub[-2][0]-sub[0][0], sub[-1][0]-sub[1][0])\n            return res\n            \n        res = inf\n        for i, (r, c) in enumerate(A):\n            add.discard((r+c, i))\n            sub.discard((r-c, i))\n            res = min(res, sol())\n            add.add((r+c, i))\n            sub.add((r-c, i))\n        return res"
}