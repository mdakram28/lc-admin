{
    "username": "Darin Mao",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        match k:\n            case 1:\n                return '9' * n\n            case 2:\n                if n == 1:\n                    return '8'\n                return '8' + '9'*(n-2) + '8'\n            case 3:\n                return '9' * n\n            case 4:\n                if n <= 3:\n                    return '8' * n\n                return '88' + '9' * (n-4) + '88'\n            case 5:\n                if n == 1:\n                    return '5'\n                return '5' + '9'*(n-2) + '5'\n            case 6:\n                if n <= 2:\n                    return '6' * n\n                if n == 3:\n                    return '888'\n                if n % 2 == 0:\n                    return '8' + '9'*(n//2-2) + '77' + '9'*(n//2-2) + '8'\n                else:\n                    return '8' + '9'*(n//2-1) + '8' + '9'*(n//2-1) + '8'\n            case 7:\n                if n <= 2:\n                    return '7' * n\n                remainder = (pow(10, n, 7) + 6) % 7\n                if n % 2 == 0:\n                    each = (pow(10, n//2, 7) + pow(10, n//2-1, 7)) % 7\n                    num = (pow(each, -1, 7) * remainder) % 7\n                    dig = '9876543210'[num]\n                    return '9'*(n//2-1) + dig*2 + '9'*(n//2-1)\n                else:\n                    each = pow(10, n//2, 7)\n                    num = (pow(each, -1, 7) * remainder) % 7\n                    dig = '9876543210'[num]\n                    return '9'*(n//2) + dig + '9'*(n//2)\n            case 8:\n                if n <= 5:\n                    return '8' * n\n                return '888' + '9' * (n-6) + '888'\n            case 9:\n                return '9' * n",
    "submit_ts": "1723953167",
    "subm_id": "1359814145"
}