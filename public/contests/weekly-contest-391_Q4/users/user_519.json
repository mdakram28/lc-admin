{
    "username": "dineshchandran311",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        long min = Long.MAX_VALUE;\n        int n = points.length;\n        \n        ArrayList<Integer> V = new ArrayList<>();\n        ArrayList<Integer> V1 = new ArrayList<>();\n \n        for (int i = 0; i < n; i++) {\n            V.add(points[i][0] + points[i][1]);\n            V1.add(points[i][0] - points[i][1]);\n        }\n \n        Collections.sort(V);\n        Collections.sort(V1);\n        // System.out.println(V);\n        // System.out.println(V1);\n \n        for(int i = 0; i<points.length; i++){\n            int sum = points[i][0] + points[i][1];\n            int diff = points[i][0] - points[i][1];\n            \n            int l = 0;\n            int r = n-1;\n            if(V.get(0) == sum){\n                l++;\n            }\n            else if(V.get(r) == sum){\n                r--;\n            }\n            \n            int l1 = 0;\n            int r1 = n-1;\n            if(V1.get(0) == diff){\n                l1++;\n            }\n            else if(V1.get(r1) == diff){\n                r1--;\n            }\n            \n            min = Math.min(min, Math.max(V.get(r) - V.get(l), V1.get(r1) - V1.get(l1)));\n        }\n \n        \n        return (int) min;\n    }\n}"
}