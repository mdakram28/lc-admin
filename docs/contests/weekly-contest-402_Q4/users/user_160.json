{
    "username": "envyaims",
    "submission": "class Solution {\npublic:\n    \n    struct segtree{\n        using item = int;\n        item merge(item a, item b){\n            return a + b;\n        }\n        item single(int v){\n            return v;\n        }\n        item NEUTRAL = 0;\n        int n;\n        vector<item> seg;\n        segtree(int n){\n            this->n = n;\n            seg.resize(2 * n, NEUTRAL);\n        }\n        void update(int idx, int x){\n            idx += n;\n            seg[idx] = single(x);\n            while(idx /= 2){\n                seg[idx] = merge(seg[2 * idx], seg[2 * idx + 1]);\n            }\n        }\n        item query(int l, int r){\n            if(l > r) return NEUTRAL;\n            item L = NEUTRAL, R = NEUTRAL;\n            for(l += n, r += n + 1; l < r; l /= 2, r /= 2){\n                if(l % 2 == 1){\n                    L = merge(L, seg[l++]);\n                }\n                if(r % 2 == 1){\n                    R = merge(seg[--r], R);\n                }\n            }\n            return merge(L, R);\n        }\n    };\n    \n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& queries) {\n        int n = a.size();\n        int q = queries.size();\n        \n        auto is_peak = [&](int i) -> int{\n            if(i <= 0 || i >= n - 1){\n                return 0;\n            }\n            return a[i] > a[i-1] && a[i] > a[i+1];\n        };\n        \n        segtree st(n);\n        for(int i = 0; i < n; i++){\n            st.update(i, is_peak(i));\n           // cout << is_peak(i) << endl;\n        }\n        \n        vector<int> ans;\n        for(auto vec: queries){\n           // cout << v[0] << \"\\n\";\n            if(vec[0] == 1){\n                int l = vec[1], r = vec[2];\n                if(l == r){\n                    ans.push_back(0);\n                    continue;\n                }\n                int res = st.query(l, r);\n                if(is_peak(r)) res--;\n                if(is_peak(l)) res--;\n                res = max(res, 0);\n                ans.push_back(res);\n            }\n            else{\n                int i = vec[1], v = vec[2];\n                a[i] = v;\n                for(int j = i - 1; j <= i + 1; j++){\n                    if(j < 0 || j >= n) continue;\n                    st.update(j, is_peak(j));\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718505751.0
}