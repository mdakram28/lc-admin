{
    "username": "meetthehorizon",
    "submission": "class SegmentTree {\npublic:\n    int n;\n    int id = INT_MAX;\n    vector<int> seg;\n    SegmentTree(int sz=0) {\n        n = 1 << (32 - __builtin_clz(sz - 1)); \n        seg.assign(n << 1, id);\n    }\n    SegmentTree(vector<int> vec) : SegmentTree(vec.size()) {\n        for (int i = 0; i < vec.size(); ++i) seg[i+n] = vec[i];\n        build();\n    }\n    void update(int idx, int val) {\n        for (seg[idx += n] = val; idx > 1; idx >>= 1) seg[idx>>1] = op(seg[idx], seg[idx^1]);\n    }\n    int query(int l, int r) {\n        int res = id;\n        for (l += n, r += n; r >= l; l >>= 1, r >>= 1) {\n            if (r%2 == 0) res = op(res, seg[r--]);\n            if (l%2 == 1) res = op(res, seg[l++]);\n        }\n        return res;\n    }\n    void build() {\n        for (int i = n - 1; i > 0; --i) seg[i] = op(seg[i<<1], seg[i<<1|1]);\n    }\n    int op(int a, int b) { return a&b; }\n};\n\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        SegmentTree seg(nums);\n        long long ans = 0, n = nums.size();\n\n        for (int i = 0; i < n; ++i) {\n            int l = i - 1, j = n;\n            while(j) {\n                do {\n                    l += j;\n                    if (l >= n || seg.query(i, l) <= k) break;\n                } while(1);\n                l -= j; j /= 2;\n            }\n\n            int r = l; j = n;\n            while(j) {\n                do {\n                    r += j;\n                    if (r >= n || seg.query(i, r) != k) break;\n                } while(1);\n                r -= j; j /= 2;\n            }\n\n            // cout << l << ' ' << r << '\\n';\n            ans += (r - l);\n        }\n\n        return ans;\n    }   \n};",
    "submit_ts": "1720278498",
    "subm_id": "1311711735"
}