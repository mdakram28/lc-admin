{
    "username": "nino-tSyWRRbPhy",
    "submission": "import java.util.*;\n\nclass Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        TreeSet<Interval> intervals = new TreeSet<>(Comparator.comparingInt(a -> a.start));\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i < n; i++) {\n            map.put(i, i + 1);\n        }\n\n        int count = n - 1, m = queries.length;\n        int[] res = new int[m];\n        for (int i = 0; i < queries.length; i++) {\n            int key = queries[i][0], newValue = queries[i][1];\n            Interval newInterval = new Interval(key, newValue);\n            if (!isContained(intervals, newInterval)) {\n                int sum = 0, value = map.get(key);\n                while (value != newValue) {\n                    value = map.get(value);\n                    sum++;\n                }\n                count -= sum;\n                map.put(key, newValue);\n                intervals.add(newInterval);\n            }\n            res[i] = count;\n        }\n        return res;\n    }\n\n    private boolean isContained(TreeSet<Interval> intervals, Interval newInterval) {\n        Interval floor = intervals.floor(newInterval);\n        if (floor != null && floor.end >= newInterval.end) {\n            return true;\n        }\n        Interval ceiling = intervals.ceiling(newInterval);\n        return ceiling != null && ceiling.start <= newInterval.start && ceiling.end >= newInterval.end;\n    }\n\n    class Interval {\n        int start, end;\n\n        Interval(int start, int end) {\n            this.start = start;\n            this.end = end;\n        }\n    }\n}",
    "submit_ts": "1722743711",
    "subm_id": "552352380"
}