{
    "username": "Shadow",
    "submission": "import java.util.*;\n\nclass Solution {\n    int n;\n    int m;\n    Map<RookState, Long> dp;\n    int[][] brd;\n\n    public long maximumValueSum(int[][] board) {\n        this.n = board.length;\n        this.m = board[0].length;\n        this.brd = board;\n        int[][] maxValPosInEachRow = getVal(board);\n        dp = new HashMap<>();\n        return solve(0, 0, new boolean[m], maxValPosInEachRow);\n    }\n\n    long solve(int rook, int row, boolean[] usedCols, int[][] maxValPosInEachRow) {\n        if (rook == 3) return 0L;\n        if (row == n) return (long) -1e13;\n\n        RookState state = new RookState(rook, row, usedCols);\n        if (dp.containsKey(state)) return dp.get(state);\n\n        long ans = (long) -1e13;\n        ans = Math.max(ans, solve(rook, row + 1, usedCols, maxValPosInEachRow));\n\n        // Directly using the boolean array to check used columns\n        for (int col = 0; col < 3; col++) {\n            int cP = maxValPosInEachRow[row][col];\n            if (!usedCols[cP]) {\n                boolean[] newUsedCols = usedCols.clone();\n                newUsedCols[cP] = true;\n                ans = Math.max(ans, brd[row][cP] + solve(rook + 1, row + 1, newUsedCols, maxValPosInEachRow));\n            }\n        }\n\n        dp.put(state, ans);\n        return ans;\n    }\n\n    int[][] getVal(int[][] b) {\n        int[][] ans = new int[n][3];\n        for (int i = 0; i < n; i++) {\n            List<int[]> l = new ArrayList<>();\n            for (int j = 0; j < m; j++) {\n                l.add(new int[]{j, b[i][j]});\n            }\n            Collections.sort(l, (x, y) -> y[1] - x[1]);\n            for (int count = 0; count < 3; count++) {\n                ans[i][count] = l.get(count)[0];\n            }\n        }\n        return ans;\n    }\n\n    class RookState {\n        private int rookCount;\n        private int rowNum;\n        private boolean[] usedCols;\n\n        public RookState(int rookCount, int rowNum, boolean[] usedCols) {\n            this.rookCount = rookCount;\n            this.rowNum = rowNum;\n            this.usedCols = usedCols;\n        }\n\n        @Override\n        public boolean equals(Object o) {\n            if (this == o) return true;\n            if (o == null || getClass() != o.getClass()) return false;\n            RookState that = (RookState) o;\n            return rookCount == that.rookCount &&\n                    rowNum == that.rowNum &&\n                    Arrays.equals(usedCols, that.usedCols);\n        }\n\n        @Override\n        public int hashCode() {\n            int result = Objects.hash(rookCount, rowNum);\n            result = 31 * result + Arrays.hashCode(usedCols);\n            return result;\n        }\n    }\n}\n",
    "submit_ts": "1723909988",
    "subm_id": "1359213108"
}