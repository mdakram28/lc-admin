{
    "username": "rishendra2003",
    "submission": "class Solution {\nprivate:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(-1) {}\n    };\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { root = new TrieNode(); }\n\n        void insert(const string& word, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            if(node->cost==-1)\n                node->cost = cost;\n            else\n                node->cost = min(node->cost,cost);\n        }\n\n        void findMinCost(const string& target, int start, vector<int>& dp) {\n            TrieNode* node = root;\n            for (int i = start; i < target.size(); ++i) {\n                if (!node->children.count(target[i]))\n                    break;\n                node = node->children[target[i]];\n                if (node->cost != -1 && dp[start] != INT_MAX) {\n                    dp[i + 1] = min(dp[i + 1], dp[start] + node->cost);\n                }\n            }\n        }\n    };\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        const int INF = INT_MAX;\n        int tar_sz = target.length();\n        vector<int> dp(tar_sz + 1, INF);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < tar_sz; ++i) {\n            if (dp[i] != INF) {\n                trie.findMinCost(target, i, dp);\n            }\n        }\n\n        return dp[tar_sz] == INF ? -1 : dp[tar_sz];\n    }\n};",
    "submit_ts": "1720324229",
    "subm_id": "1312394573"
}