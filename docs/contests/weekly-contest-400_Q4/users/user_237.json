{
    "username": "l_returns",
    "submission": "class SparseTable {\npublic:\n    SparseTable(const std::vector<int>& input) {\n        n = input.size();\n        int maxLog = std::log2(n) + 1;\n        table = std::vector<std::vector<int>>(n, std::vector<int>(maxLog));\n\n        for (int i = 0; i < n; ++i) {\n            table[i][0] = input[i];\n        }\n\n        for (int j = 1; (1 << j) <= n; ++j) {\n            for (int i = 0; (i + (1 << j) - 1) < n; ++i) {\n                table[i][j] = table[i][j - 1] & table[i + (1 << (j - 1))][j - 1];\n            }\n        }\n    }\n\n    int rangeAnd(int L, int R) {\n        int j = std::log2(R - L + 1);\n        return table[L][j] & table[R - (1 << j) + 1][j];\n    }\n    \n    std::vector<int> findDistinctAndValuesFromIndex(int index) {\n        std::set<int> distinctValues;\n        int currentLength = 1;\n        int currentAnd = table[index][0];\n\n        while (index + currentLength <= n) {\n            currentAnd = rangeAnd(index, index + currentLength - 1);\n            distinctValues.insert(currentAnd);\n\n            int low = currentLength, high = n - index+1;\n            while (low < high) {\n                int mid = low + (high - low) / 2;\n                int midAnd = rangeAnd(index, index + mid - 1);\n                if (midAnd == currentAnd) {\n                    low = mid + 1;\n                } else {\n                    high = mid;\n                }\n            }\n\n            currentLength = low;\n        }\n        return std::vector<int>(distinctValues.begin(), distinctValues.end());\n    }\n\nprivate:\n    int n;\n    std::vector<std::vector<int>> table;\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        SparseTable st(nums);\n        int n = nums.size();\n        int ans = INT_MAX;\n        for(int i=0;i<n;i++) {\n            vector<int> ands = st.findDistinctAndValuesFromIndex(i);\n            for(int x:ands) {\n                ans = min(ans,abs(k-x));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717297471.0
}