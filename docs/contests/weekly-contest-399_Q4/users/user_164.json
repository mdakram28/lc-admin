{
    "username": "Dan13llljws",
    "submission": "class Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        const int mod = 1e9 + 7;\n        int n = nums.size();\n        int sq = max(2, (int)sqrt(n));\n        auto work = [&](int l, int r) {\n            long long dp1 = 0, dp2 = 0;\n            for (int i = l; i < r; i++) {\n                int new_dp1 = max(dp1, dp2);\n                int new_dp2 = max(0, nums[i]) + dp1;\n                dp1 = new_dp1 % mod, dp2 = new_dp2 % mod;\n            }\n            return max(dp1, dp2) % mod;\n        };\n        vector<int> f1, f2, f3, f4;\n        for (int i = 0; i < n; i += sq) {\n            f1.push_back(work(i, min(i + sq, n)));\n            f2.push_back(work(i, min(i + sq, n) - 1));\n            f3.push_back(work(i + 1, min(i + sq, n)));\n            f4.push_back(work(i + 1, min(i + sq, n) - 1));\n        }\n        int ans = 0;\n        for (auto v : queries) {\n            int pos = v[0], x = v[1];\n            nums[pos] = x;\n            int i = pos / sq * sq;\n            f1[i / sq] = (work(i, min(i + sq, n)));\n            f2[i / sq] = (work(i, min(i + sq, n) - 1));\n            f3[i / sq] = (work(i + 1, min(i + sq, n)));\n            f4[i / sq] = (work(i + 1, min(i + sq, n) - 1));\n            int dp1 = 0, dp2 = 0;\n            for (int i = 0; i < (int)f1.size(); i++) {\n                int new_dp1 = max(f2[i] + dp1, f4[i] + dp2);\n                int new_dp2 = max(f1[i] + dp1, f3[i] + dp2);\n                dp1 = new_dp1 % mod, dp2 = new_dp2 % mod;\n            }\n            ans = (ans + max(dp1, dp2)) % mod;\n            // cout << max(dp1, dp2) << endl;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716693761",
    "subm_id": "1268096248"
}