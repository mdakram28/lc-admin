{
    "username": "scorpioneer",
    "submission": "class Solution {\npublic:\n    \n    int rec( long long curr , int step , int last , int k , map<pair<long long,pair<int,int>>,int>&dp)\n    {\n        if( step >= 64 && curr > k + 1) return 0;\n        \n        if(dp.find({curr,{step,last}}) != dp.end()) return dp[{curr,{step,last}}];\n        \n        if( curr == k)\n        {\n        \n            int down = 0;\n            if(last == 0 && curr > 0)\n            {\n                down = rec( curr -1  , step , 1 , k , dp);\n            }\n\n            int up = 0;\n            if((long long)pow(2,step) + curr <= k + 1)\n            up = rec( curr + pow( 2 , step) , step + 1 , 0 , k , dp);\n            \n            return dp[{curr,{step,last}}] =  1 + up + down;\n            \n        }\n        \n        int down = 0;\n        \n        if(last == 0 && curr > 0)\n        {\n            down = rec( curr -1  , step  , 1 , k , dp);\n        }\n        \n        int up = 0;\n        if((long long)pow(2,step) + curr <= k + 1)\n        up = rec( curr + pow( 2 , step) , step + 1 , 0 , k , dp);\n        \n        return dp[{curr,{step,last}}] = down + up;\n        \n    }\n    int waysToReachStair(int k) {\n        map<pair<long long,pair<int,int>>,int>dp;\n        return rec( 1 , 0 , 0 , k , dp);\n    }\n};",
    "submit_ts": "1716089642",
    "subm_id": "1261847629"
}