{
    "username": "OXTGg38Jgv",
    "submission": "class Solution:\n    def solve(self, grid: List[List[int]]) -> int:\n        n, m = len(grid), len(grid[0])\n        a1, b1 = inf, inf\n        a_last, b_last = -inf, -inf\n        for i in range(n):\n            for j in range(m):\n                if grid[i][j] == 1:\n                    a1 = min(a1, i)\n                    b1 = min(b1, j)\n                    a_last = max(a_last, i)\n                    b_last = max(b_last, j)\n\n        @cache\n        def find(x1, y1, x2, y2):\n            flag = 0\n            a, b = inf, -inf\n            x, y = inf, -inf\n            for i in range(x1, x2 + 1):\n                for j in range(y1, y2 + 1):\n                    if grid[i][j] == 1:\n                        a = min(a, i)\n                        b = max(b, i)\n                        x = min(x, j)\n                        y = max(y, j)\n                        flag = 1\n            return (b - a + 1) * (y - x + 1) if flag else inf\n\n        def check(a2, b2):\n            below_has = a2 < a_last\n            right_has = b2 < b_last\n            cur_area = find(a1, b1, a2, b2)\n            res = inf\n            res = min(res, find(a2 + 1, b1, a_last, b2) + find(a1, b2 + 1, a_last, b_last))\n            res = min(res, find(a2 + 1, b1, a_last, b_last) + find(a1, b2 + 1, a2, b_last))\n            if below_has and not right_has:\n                for i in range(a2 + 1, a_last):\n                    res = min(res, find(a2 + 1, b1, i, b_last) + find(i + 1, b1, a_last, b_last))\n            if not below_has and right_has:\n                for i in range(b2 + 1, b_last):\n                    res = min(res, find(a1, b2 + 1, a_last, i) + find(a1, i + 1, a_last, b_last))\n            # ic((a1, b1), (a2, b2), cur_area, res, below_has, right_has)\n            return cur_area + res\n\n        ans = inf\n        for a2 in range(a1, a_last + 1):\n            for b2 in range(b1, b_last + 1):\n                ans = min(ans, check(a2, b2))\n        return ans\n\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        return min(\n            self.solve(grid),\n            self.solve(list(reversed(grid))),\n            self.solve([list(reversed(i)) for i in grid]),\n            self.solve(list(reversed([list(reversed(i)) for i in grid]))),\n        )",
    "submit_ts": "1719115066",
    "subm_id": "541404457"
}