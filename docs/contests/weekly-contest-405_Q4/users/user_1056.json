{
    "username": "hpg007",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\ndef build_trie(words, costs):\n    root = TrieNode()\n    for word, cost in zip(words, costs):\n        node = root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost) \n    return root\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        trie_root = build_trie(words, costs)\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  \n            node = trie_root\n            j = i\n            while j < n and target[j] in node.children:\n                node = node.children[target[j]]\n                j += 1\n                if node.cost < float('inf'): \n                    dp[j] = min(dp[j], dp[i] + node.cost)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720322449",
    "subm_id": "1312350224"
}