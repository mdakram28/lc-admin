{
    "username": "louisfghbvc",
    "submission": "class Solution {\npublic:\n    \n    void swapDim(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector res(n, vector(m, 0));\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                res[j][i] = grid[i][j];\n            }\n        }\n        grid = res;\n    }\n    \n    int minFlips(vector<vector<int>>& grid) {\n        // goal: find the minimum flips to make row and col all palindrome, and number of 1 is divisible by 4\n        \n        // idea:\n        // m = 4\n        // n = 3\n        \n        // observe\n        // if grid is odd position -> we will increase the one by 2\n        // grid[i][j] is 1 -> grid[m-i-1][n-j-1] -> grid[i][n-j-1] -> \n        // 1 x 1\n        // x x x\n        // x x x\n        // 1 x 1\n        \n        // 1 x 1\n        // x x x\n        // x x x\n        // 1 x 1\n        \n        // x 1 x \n        // x 1 x \n        // x 1 x\n        // x 1 x\n        \n        // x x 1 x x\n        // x x 1 x x\n        // 1 1 0 1 1\n        // x x 1 x x\n        // x x 1 x x\n        \n        // we only do half row and col\n        // col is odd -> have two 1\n        // row is odd -> have two 1\n        // if col and row both odd -> have one 1\n        \n        // mod 4 = 0?\n        // consider each element (i, j)\n        // even position is just all 1 or all 0 -> easy to compute\n        \n        // if n and m is even\n        // -> easy to do\n        \n        // if n is even and m is odd\n        // compute odd column first (center?)\n        // we need to compute the number of 1 -> must % 4 = 0, even pairs\n        // center must be 0, 4, .... \n        // we can enumerate the cost -> each time choose two smallest one\n        // x 1 x -> (0)\n        // x 1 x -> \n        // x 1 x\n        // x 1 x\n        \n        // if n and m is odd\n        // x x ? x x\n        // x x ? x x\n        // ? ? 0 ? ?\n        // x x ? x x\n        // x x ? x x\n        \n        int m = grid.size();\n        int n = grid[0].size();\n        if (m % 2 == 1) {\n            swap(n, m);\n            swapDim(grid);\n        }\n        \n        int even = 0;\n        for (int i = 0; i < m/2; ++i) {\n            for (int j = 0; j < n/2; ++j) {\n                int cnt[2]{};\n                cnt[grid[i][j]]++;\n                cnt[grid[i][n-j-1]]++;\n                cnt[grid[m-i-1][j]]++;\n                cnt[grid[m-i-1][n-j-1]]++;\n                // all one, all zero\n                even += min(4 - cnt[0], 4 - cnt[1]);\n            }\n        }\n        \n        if (m % 2 == 0 && n % 2 == 0) {\n            return even;\n        }\n        else {\n            int toZero = 0;\n            vector<pair<int, int>> cost; // one, zero\n            for (int i = 0; i < m/2; ++i) {\n                toZero += grid[i][n/2];\n                toZero += grid[m-i-1][n/2];\n            }\n            for (int i = 0; i < m/2; ++i) {\n                int cnt[2]{};\n                cnt[grid[i][n/2]]++;\n                cnt[grid[m-i-1][n/2]]++;\n                // all one, all zero\n                cost.push_back({2 - cnt[1], 2 - cnt[0]});\n            }\n            \n            if (m % 2 && n % 2) {\n                for (int j = 0; j < n/2; ++j) {\n                    int cnt[2]{};\n                    toZero += grid[m/2][j];\n                    toZero += grid[m/2][n-j-1];\n                    cnt[grid[m/2][j]]++;\n                    cnt[grid[m/2][n-j-1]]++;\n                    // all one, all zero\n                    cost.push_back({2 - cnt[1], 2 - cnt[0]});\n                }\n            }\n            \n            int ans = even + toZero;\n            ranges::sort(cost);\n            for (int i = 0; i+1 < cost.size(); i += 2) {\n                even += cost[i].first;\n                even += cost[i+1].first;\n                toZero -= cost[i].second;\n                toZero -= cost[i+1].second;\n                ans = min(ans, even + toZero);    \n            }\n            if (m % 2 && n % 2) ans += grid[m/2][n/2];\n            return ans;\n        }\n        \n    }\n};",
    "submit_ts": "1722699316",
    "subm_id": "1343207942"
}