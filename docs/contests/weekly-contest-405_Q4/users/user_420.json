{
    "username": "JimmyChiu702",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        \n        struct Trie {\n            int cost = -1;\n            unordered_map<char, Trie*> mp;\n        };\n        Trie *root = new Trie();\n        for (int i=0; i<n; i++) {\n            Trie *curr = root;\n            for (char c : words[i]) {\n                if (curr->mp.find(c) == curr->mp.end()) {\n                    curr->mp[c] = new Trie();\n                }\n                curr = curr->mp[c];\n            }\n            if (curr->cost == -1 || curr->cost > costs[i]) {\n                curr->cost = costs[i];\n            }\n        }\n        \n        vector<int> dp(target.length() + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i=0; i<target.length(); i++) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            int j = i;\n            Trie *curr = root;\n            while (j < target.length()) {\n                if (curr->mp.find(target[j]) == curr->mp.end()) {\n                    break;\n                }\n                curr = curr->mp[target[j]];\n                if (curr->cost != -1) {\n                    dp[j+1] = min(dp[j+1], dp[i] + curr->cost);\n                }\n                j++;\n            }\n        }\n        \n        return dp.back() < INT_MAX ? dp.back() : -1;\n    }\n};",
    "submit_ts": "1720321800",
    "subm_id": "1312332628"
}