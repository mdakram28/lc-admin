{
    "username": "neilchetty",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length, result = Integer.MAX_VALUE;\n        Tree tree = new Tree(nums);\n        for(int i = 0; i < n; i++) {\n            int left = i - 1, right = n - 1;\n            while(left + 1 < right) {\n                int mid = (left + right)/2;\n                if(tree.query(i, mid) >= k) left = mid;\n                else right = mid;\n            }\n            if(left != i - 1) result = Math.min(result, Math.abs(tree.query(i, left) - k));\n            result = Math.min(result, Math.abs(tree.query(i, right) - k));\n        }\n        return result;\n    }\n}\n\nclass Tree {\n    int[] tree; int n;\n\n    public Tree(int[] arr) {\n        n = arr.length; tree = new int[4 * n];\n        build(arr, 0, 0, n - 1);\n    }\n\n    private void build(int[] arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(arr, 2 * node + 1, start, mid); build(arr, 2 * node + 2, mid + 1, end);\n        tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n    }\n\n    public int query(int l, int r) {return query(0, 0, n - 1, l, r);}\n\n    private int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) return Integer.MAX_VALUE;\n        if (l <= start && end <= r) return tree[node];\n        int mid = (start + end) / 2;\n        return query(2 * node + 1, start, mid, l, r) & query(2 * node + 2, mid + 1, end, l, r); \n    }\n}",
    "submit_ts": "1717299617",
    "subm_id": "1274818344"
}