{
    "username": "ashishsah51",
    "submission": "class Solution {\n    class Trie {\n        int cost = -1;\n        Map<Character, Trie> child = new HashMap<>();\n        \n    }\n    Trie root;\n    void insert(int cost, String word) {\n        Trie curr = root;\n        for (char c : word.toCharArray()) {\n            if(!curr.child.containsKey(c)) {\n                curr.child.put(c, new Trie());\n            }\n            curr = curr.child.get(c);\n        }\n        curr.cost = (curr.cost == -1) ? cost : Math.min(curr.cost, cost);\n    }\n    public int minimumCost(String target, String[] words, int[] costs) {\n        root = new Trie();\n        int n = target.length();\n        for (int i = 0; i < words.length; i++) {\n            insert(costs[i], words[i]);\n        }\n        final int MAX = Integer.MAX_VALUE;\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == MAX) continue;\n            Trie curr = root;\n            for (int j = i; j < n; j++) {\n                if (!curr.child.containsKey(target.charAt(j))) break;\n                curr = curr.child.get(target.charAt(j));\n                if (curr.cost != -1) {\n                    dp[j + 1] = Math.min(dp[j + 1], dp[i] + curr.cost);\n                }\n            }\n        }\n        return dp[n] != MAX ? dp[n] : -1;\n        \n    }\n}",
    "submit_ts": "1720324038",
    "subm_id": "1312390100"
}