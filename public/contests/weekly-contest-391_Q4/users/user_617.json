{
    "username": "Fasdr",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        Arrays.sort(points, (a, b) -> a[0] - b[0]);\n        int res = Integer.MAX_VALUE;\n        int max = maxDist(points, -1);\n        List<Integer> l1 = trackDist(points, max), l2 = trackDistInv(points, max);\n        for (int i : l1)\n            res = Math.min(res, maxDist(points, i));\n        for (int i : l2)\n            res = Math.min(res, maxDist(points, i));\n        return res;\n    }\n\n    private int maxDist(int[][] points, int excl) {\n        int res = 0;\n        int maxY = -1, minY = -1, maxYX = -1, minYX = -1;\n        for (int i = points.length - 1; i >= 0; i--) {\n            if (i == excl)\n                continue;\n            if (maxY == -1 && minY == -1) {\n                maxY = points[i][1];\n                minY = points[i][1];\n                maxYX = points[i][0];\n                minYX = points[i][0];\n                continue;\n            }\n            res = Math.max(res, Math.abs(points[i][0] - maxYX) + Math.abs(points[i][1] - maxY));\n            res = Math.max(res, Math.abs(points[i][0] - minYX) + Math.abs(points[i][1] - minY));\n            if (points[i][1] - maxY + points[i][0] - maxYX > 0) {\n                maxY = points[i][1];\n                maxYX = points[i][0];\n            }\n            if (-points[i][1] + minY + points[i][0] - minYX > 0) {\n                minY = points[i][1];\n                minYX = points[i][0];\n            }\n        }\n        return res;\n    }\n    \n    private List<Integer> trackDist(int[][] points, int dist) {\n        List<Integer> res = new ArrayList<>();\n        int maxY = -1, minY = -1, maxYX = -1, minYX = -1;\n        for (int i = points.length - 1; i >= 0; i--) {\n            if (maxY == -1 && minY == -1) {\n                maxY = points[i][1];\n                minY = points[i][1];\n                maxYX = points[i][0];\n                minYX = points[i][0];\n                continue;\n            }\n            int cur1 = Math.abs(points[i][0] - maxYX) + Math.abs(points[i][1] - maxY);\n            int cur2 = Math.abs(points[i][0] - minYX) + Math.abs(points[i][1] - minY);\n            if (cur1 == dist || cur2 == dist)\n                res.add(i);\n            if (points[i][1] - maxY + points[i][0] - maxYX > 0) {\n                maxY = points[i][1];\n                maxYX = points[i][0];\n            }\n            if (-points[i][1] + minY + points[i][0] - minYX > 0) {\n                minY = points[i][1];\n                minYX = points[i][0];\n            }\n        }\n        return res;\n    }\n    \n    private List<Integer> trackDistInv(int[][] points, int dist) {\n        List<Integer> res = new ArrayList<>();\n        int maxY = -1, minY = -1, maxYX = -1, minYX = -1;\n        for (int i = 0; i < points.length; i++) {\n            if (maxY == -1 && minY == -1) {\n                maxY = points[i][1];\n                minY = points[i][1];\n                maxYX = points[i][0];\n                minYX = points[i][0];\n                continue;\n            }\n            int cur1 = Math.abs(points[i][0] - maxYX) + Math.abs(points[i][1] - maxY);\n            int cur2 = Math.abs(points[i][0] - minYX) + Math.abs(points[i][1] - minY);\n            if (cur1 == dist || cur2 == dist)\n                res.add(i);\n            if (points[i][1] - maxY + maxYX - points[i][0] > 0) {\n                maxY = points[i][1];\n                maxYX = points[i][0];\n            }\n            if (-points[i][1] + minY + minYX - points[i][0] > 0) {\n                minY = points[i][1];\n                minYX = points[i][0];\n            }\n        }\n        return res;\n    }\n\n}"
}