{
    "username": "SleepyJie",
    "submission": "/********************************************\n * author : Jie Chen (4th Year CS)\n * school : Rochester Institute of Technology\n * created: 06.15.2024 19:27:56\n*********************************************/\n\nusing i64 = long long;\n\ntemplate <class Info>\nstruct SegmentTree {\n    int n;\n    vector<Info> info;\n    SegmentTree() : n(0) {}\n    SegmentTree(int n_, Info v_ = Info()) {\n        init(n_, v_);\n    }\n    template<class T>\n    SegmentTree(vector<T> init_) {\n        init(init_);\n    }\n    void init(int n_, Info v_ = Info()) {\n        init(vector(n_, v_));\n    }\n    template<class T>\n    void init(vector<T> init_) {\n        n = init_.size();\n        info.assign(4 << __lg(n), Info());\n        function<void(int, int, int)> build = [&](int p, int l, int r) {\n            if (r - l == 1) {\n                info[p] = init_[l];\n                return;\n            }\n            int m = (l + r) / 2;\n            build(2 * p, l, m);\n            build(2 * p + 1, m, r);\n            pull(p);\n        };\n        build(1, 0, n);\n    }\n    void pull(int p) {\n        info[p] = info[2 * p] + info[2 * p + 1];\n    }\n    void modify(int p, int l, int r, int x, const Info &v) {\n        if (r - l == 1) {\n            info[p] = v;\n            return;\n        }\n        int m = (l + r) / 2;\n        if (x < m) {\n            modify(2 * p, l, m, x, v);\n        } else {\n            modify(2 * p + 1, m, r, x, v);\n        }\n        pull(p);\n    }\n    void modify(int p, const Info &v) {\n        modify(1, 0, n, p, v);\n    }\n    Info range_query(int p, int l, int r, int x, int y) {\n        if (l >= y || r <= x) {\n            return Info();\n        }\n        if (l >= x && r <= y) {\n            return info[p];\n        }\n        int m = (l + r) / 2;\n        return range_query(2 * p, l, m, x, y) + range_query(2 * p + 1, m, r, x, y);\n    }\n    Info range_query(int l, int r) {\n        return range_query(1, 0, n, l, r);\n    }\n    template<class F>\n    int find_first(int p, int l, int r, int x, int y, F pred) {\n        if (l >= y || r <= x || !pred(info[p])) {\n            return -1;\n        }\n        if (r - l == 1) {\n            return l;\n        }\n        int m = (l + r) / 2;\n        int res = find_first(2 * p, l, m, x, y, pred);\n        if (res == -1) {\n            res = find_first(2 * p + 1, m, r, x, y, pred);\n        }\n        return res;\n    }\n    template<class F>\n    int find_first(int l, int r, F pred) {\n        return find_first(1, 0, n, l, r, pred);\n    }\n    template<class F>\n    int find_last(int p, int l, int r, int x, int y, F pred) {\n        if (l >= y || r <= x || !pred(info[p])) {\n            return -1;\n        }\n        if (r - l == 1) {\n            return l;\n        }\n        int m = (l + r) / 2;\n        int res = find_last(2 * p + 1, m, r, x, y, pred);\n        if (res == -1) {\n            res = find_last(2 * p, l, m, x, y, pred);\n        }\n        return res;\n    }\n    template<class F>\n    int find_last(int l, int r, F pred) {\n        return find_last(1, 0, n, l, r, pred);\n    }\n};\n\nconstexpr int inf = 1e9 + 5;\n \nstruct Info {\n    int cnt = 0, l = inf, r = inf, siz = 0;\n    bool l_good = false, r_good = false;\n\n    void out() {\n        cout << cnt << \" \" << l << \" \" << r << \" \" << siz << \" \" << l_good << \" \" << r_good << \"\\n\";\n    }\n};\n\nInfo operator+(const Info& a, const Info& b) {\n    Info c;\n    c.cnt = a.cnt + b.cnt;\n    c.l = a.l;\n    c.r = b.r;\n    c.siz = a.siz + b.siz;\n    if (a.r_good && a.r > b.l) {\n        c.cnt++;\n    }\n    if (b.l_good && b.l > a.r) {\n        c.cnt++;\n    }\n    if (a.siz == 1) {\n        c.l_good = (a.r > b.l);\n    } else {\n        c.l_good = a.l_good;\n    }\n    if (b.siz == 1) {\n        c.r_good = (b.l > a.r);\n    } else {\n        c.r_good = b.r_good;\n    }\n    return c;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& queries) {\n        int n = a.size(), Q = queries.size();\n\n        vector<Info> init(n);\n        for (int i = 0; i < n; i++) {\n            init[i] = {0, a[i], a[i], 1, false, false};\n        }\n\n        SegmentTree<Info> seg(init);\n        vector<int> ans;\n        for (int q = 0; q < Q; q++) {\n            if (queries[q][0] == 1) {\n                auto res = seg.range_query(queries[q][1], queries[q][2] + 1);\n                ans.push_back(res.cnt);\n            } else {\n                int x = queries[q][2];\n                Info to = {0, x, x, 1, false, false};\n                seg.modify(queries[q][1], to);\n            }\n        }\n        return ans;\n    }\n};\n\n// ~ JustJie",
    "submit_ts": 1718506586.0
}