{
    "username": "tgorai",
    "submission": "class Solution {\n    vector<long long> dp;\n    class Node {\n    public:\n        int cost;\n        vector<Node*> next;\n        Node() {\n            cost = INT_MAX;\n            next.resize(26, NULL);\n        }\n    };\n    Node* root;\n    void add(string& s, int c) {\n        Node* cur = root;\n        for(char c: s) {\n            if(cur->next[c-'a'] == NULL) {\n                cur->next[c-'a'] = new Node();\n            }\n            cur = cur->next[c-'a'];\n        }\n        cur->cost = min(cur->cost, c);\n    }\n    long long search(string& target, int ind) {\n        int i = ind;\n        if(i == target.length()) {\n            return 0;\n        }\n        \n        if(dp[i] != -1) return dp[i];\n        long long curCost = 0;\n        long long ans = INT_MAX;\n        Node* cur = root;\n        int n = target.length();\n        for(i; i<n; i++) {\n            char c = target[i];\n            if(cur->next[c-'a'] == NULL) {\n                break;\n            }\n            else {\n                cur = cur->next[c-'a'];\n            }\n            if(cur->cost != INT_MAX) {\n                curCost = (cur->cost + search(target, i+1));\n                ans = min(ans, curCost);\n            }\n        }\n        return dp[ind] = ans;\n    }\n    /*\n    void search(string& target, int i, int& ans, int curCost) {\n        if(i == target.length()) {\n            ans = min(ans, curCost);\n            return;\n        }\n        Node* cur = root;\n        int n = target.length();\n        for(i; i<n; i++) {\n            char c = target[i];\n            if(cur->next[c-'a'] == NULL) {\n                return;\n            }\n            else {\n                cur = cur->next[c-'a'];\n            }\n            if(cur->cost != INT_MAX) {\n                search(target, i+1, ans, curCost + cur->cost);\n            }\n        }\n    }*/\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        root = new Node();\n        int n = words.size();\n        dp.resize(target.length(), -1);\n        for(int i=0; i<n; i++) add(words[i], costs[i]);\n        int ans = search(target, 0);\n        return ans >= INT_MAX? -1: ans;\n    }\n};",
    "submit_ts": "1720324332",
    "subm_id": "1312396960"
}