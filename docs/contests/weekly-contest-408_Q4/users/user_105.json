{
    "username": "yge2",
    "submission": "class Solution {\n    int[] v;\n    ArrayList<Integer>[] a;\n    private boolean search(int x, int t) {\n        if (x == t)\n            return true;\n        v[x] = 1;\n        for (Integer y: a[x]) {\n            if (v[y] == 0 && search(y, t))\n                return true;\n        }\n        return false;\n    }\n    private int sqr(int x) {\n        return x * x;\n    }\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        a = new ArrayList[n+2];\n        for (int i=0; i<n+2; i++) {\n            a[i] = new ArrayList<Integer>();\n        }\n        for (int i=0; i<n; i++) {\n            if (circles[i][0] - circles[i][2] <= 0) {\n                a[i].add(n);\n                a[n].add(i);\n            }\n            if (circles[i][1] - circles[i][2] <= 0) {\n                a[i].add(n+1);\n                a[n+1].add(i);\n            }\n            if (circles[i][0] + circles[i][2] >= X) {\n                a[i].add(n+1);\n                a[n+1].add(i);\n            }\n            if (circles[i][1] + circles[i][2] >= Y) {\n                a[i].add(n);\n                a[n].add(i);\n            }\n        }\n        for (int i=0; i<n; i++)\n            for (int j=i+1; j<n; j++)\n                if (sqr(circles[i][0]-circles[j][0]) + sqr(circles[i][1]-circles[j][1]) <= sqr(circles[i][2]+circles[j][2])) {\n                    a[i].add(j);\n                    a[j].add(i);\n                }\n        v = new int[n+2];\n        return !search(n, n+1);\n    }\n}",
    "submit_ts": "1722135990",
    "subm_id": "1335720209"
}