{
    "username": "jithin420",
    "submission": "class Solution:\n\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        cw = dict()\n        for i, w in enumerate(words):\n            if w not in cw:\n                cw[w] = costs[i]\n            else:\n                cw[w] = min(cw[w], costs[i])\n        costs.clear()\n        words.clear()\n\n        for k in cw:\n            words.append(k)\n            costs.append(cw[k])\n\n        posmap = defaultdict(list)\n\n        def kmp(idx, pattern):\n            j = 0\n            i = 1\n            lps = [0] * len(pattern)\n            while i < len(pattern):\n                c = pattern[i]\n                if c != pattern[j]:\n                    if j == 0:\n                        i += 1\n                    else:\n                        j = lps[j - 1]\n                if c == pattern[j]:\n                    j += 1\n                    lps[i] = j\n                    i += 1\n\n            i = j = 0\n            while i < len(target):\n                # print(\"i=\", i)\n                if pattern[j] == target[i]:\n                    i += 1\n                    j += 1\n                else:\n                    if j == 0:\n                        i += 1\n                    else:\n                        j = lps[j - 1]\n                if j == len(pattern):\n                    posmap[i - j].append(idx)\n                    j = lps[j - 1]\n\n        def check():\n            dp = [float('inf')]*(len(target)+1)\n            dp[-1]=0\n            for i in sorted(posmap.keys(), reverse=True):\n                for j in posmap[i]:\n                    dp[i] = min(dp[i], dp[i+len(words[j])] + costs[j])\n            return dp[0]\n\n        for i, w in enumerate(words):\n            kmp(i, w)\n            # print(posmap)\n\n        res = check()\n        return -1 if res == float('inf') else res",
    "submit_ts": "1720324565",
    "subm_id": "1312402636"
}