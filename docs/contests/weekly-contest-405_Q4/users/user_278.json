{
    "username": "rupa6",
    "submission": "\n\n\n\n\nclass Solution {\nstatic const int N=500010;\nstatic const int mod=1e9+7;\nstatic const int atcoderMod=998244353;\n    \nint power(int x,int y){\n    int res=1; //x^y\n    while(y){\n        if(y&1) res=mul(res,x);\n        x=mul(x,x);\n        y=y>>1;\n    }\n    return res;\n}\n\n\nint add(int x,int y){int res=(x+y)%mod;return res<0?res+mod:res;}\nint mul(int x,int y){int res=(x*1LL*y)%mod;return res<0?res+mod:res;}\n    \npublic:\n    unordered_map<int,pair<int,int>> cost[27];\n    \n    int h[N];\n    int pw[N], pwi[N];\n    \n    void pre() {\n        pw[0]=1;\n        pwi[0]=1;\n        for(int i=1;i<=n;i++) {\n            pw[i]=mul(pw[i-1], 29);\n            pwi[i]=power(pw[i], mod-2);\n        }\n    }\n    \n    int getHash(const string& x) {\n        h[0]=x[0]-'a'+1;\n        for(int i=1;i<x.size();i++) {\n            h[i]=add(h[i-1], mul(pw[i], x[i]-'a'+1));\n        }\n        return h[x.size()-1];\n    }\n    \n    string tc;\n    int n;\n    int dp[N];\n    #define dpp dp[id]\n    int solve(int id) {\n        if(id==n) return 0;\n        if(dpp!=-1) return dpp;\n        dpp=mod;\n        auto ch=tc[id]-'a';\n        for(auto [hash, v]: cost[ch]) {\n            int finalCost = v.first;\n            int l = v.second;\n            if(l+id <= n) {\n                int myhash = h[l+id-1];\n                if(id>0) myhash = add(myhash, -h[id-1]);\n                myhash = mul(myhash, pwi[id]);\n                if(myhash == hash) {\n                    dpp=min(dpp, solve(l+id)+finalCost);\n                }\n            }\n        }\n        return dpp;\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        tc=target;\n        n=target.size();\n        pre();\n        for(int i=0;i<words.size();i++) {\n            const auto& word = words[i];\n            int h=getHash(word);\n            if(cost[word[0]-'a'].contains(h)) {\n                auto who = cost[word[0]-'a'][h];\n                assert(who.second == word.size());\n                cost[word[0]-'a'][h].first = min(cost[word[0]-'a'][h].first, costs[i]);\n            } else {\n                cost[word[0]-'a'][h]={costs[i], word.size()};\n            }\n        }\n        getHash(target);\n        for(int i=0;i<=n;i++) dp[i]=-1;\n        int ans=solve(0);\n        return ans==mod ? -1 : ans;\n    }\n};",
    "submit_ts": "1720321318",
    "subm_id": "1312319599"
}