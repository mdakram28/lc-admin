{
    "username": "rayms",
    "submission": "    // The total sum of words[i].length is less than or equal to 5 * 104.\n\npublic class Solution {\n\n    class TrieNode {\n        TrieNode[] child;\n        int cost;\n\n        public TrieNode() {\n            child = new TrieNode[128];\n            cost = Integer.MAX_VALUE;\n        }\n    }\n\n    class Trie {\n        TrieNode root;\n\n        public Trie() {\n            root = new TrieNode();\n        }\n\n        public void insert(String word, int cost) {\n            TrieNode node = root;\n            for (char ch : word.toCharArray()) {\n                if (node.child[ch] == null) {\n                    node.child[ch] = new TrieNode();\n                }\n                node = node.child[ch];\n            }\n            node.cost = Math.min(node.cost, cost);\n        }\n\n        public List<int[]> search(String s, int start) {\n            List<int[]> results = new ArrayList<>();\n            TrieNode node = root;\n\n            for (int i = start; i < s.length(); i++) {\n                char ch = s.charAt(i);\n                if (node.child[ch] == null) {\n                    break;\n                }\n                node = node.child[ch];\n                if (node.cost != Integer.MAX_VALUE) {\n                    results.add(new int[]{i + 1, node.cost});\n                }\n            }\n\n            return results;\n        }\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n            List<int[]> matches = trie.search(target, i);\n            for (int[] match : matches) {\n                int end = match[0];\n                int cost = match[1];\n                dp[end] = Math.min(dp[end], dp[i] + cost);\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n// class Solution {\n    \n\n//     public int minimumCost(String target, String[] words, int[] costs) {\n        \n//     }\n// }",
    "submit_ts": "1720321899",
    "subm_id": "1312335267"
}