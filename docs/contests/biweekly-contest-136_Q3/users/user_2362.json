{
    "username": "sujalarya",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        // int n =grid.length;\n        // int m = grid[0].length;\n        // int rowf=0;\n        // // int minf= Integer.MAX_VALUE;\n        // for(int i=0;i<n;i++){\n        //     int flip=0;\n        //     for(int j=0;j<m/2;j++){\n        //         if(grid[i][j]!=grid[i][m-1-j])\n        //         flip++;\n        //     }\n        //     rowf+=flip;\n        // }\n        \n        // int colf=0\n        // for(int i=0;i<m;i++){\n        //     int flip=0;\n        //     for(int j=0;j<n/2;j++){\n        //         if(grid[j][i]!=grid[n-1-i][i])\n        //         flip++;\n        //     }\n        //     colf+=flip;\n        // }\n        // int x  = Math.min(rowf,clof);\n        // int one =0;\n        // for(int i=0;i<n;i++){\n        //     for(int j=0;j<m;j++){\n        //         if(grid[i][j]==1)\n        //         one++;\n        //     }\n        // }\n        // if(one<4)\n        // return one;\n\n\n\n           int n = grid.length;\n        int m = grid[0].length;\n        \n        int res = 0;\n        \n        // Loop through the 2x2 sub-grids\n        for (int i = 0; i < n / 2; i++) {\n            for (int j = 0; j < m / 2; j++) {\n                int ones = grid[i][j] + grid[n - i - 1][j] + grid[i][m - j - 1] + grid[n - i - 1][m - j - 1];\n                \n                res += Math.min(ones, 4 - ones);\n            }\n        }\n        \n        int possible = 0;\n        int count = 0;\n        \n        // Handle the middle row if n is odd\n        if (n % 2 != 0) {\n            for (int j = 0; j < m / 2; j++) {\n                if (grid[n / 2][j] != grid[n / 2][m - j - 1]) {\n                    res += 1;\n                    possible += 1;\n                } else {\n                    if (grid[n / 2][j] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        \n        // Handle the middle column if m is odd\n        if (m % 2 != 0) {\n            for (int i = 0; i < n / 2; i++) {\n                if (grid[i][m / 2] != grid[n - i - 1][m / 2]) {\n                    res += 1;\n                    possible += 1;\n                } else {\n                    if (grid[i][m / 2] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        \n        // Handle the central element if both n and m are odd\n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            res += 1;\n        }\n        \n        if (possible == 0 && count % 2 != 0) {\n            res += 2;\n        }\n        \n        return res;\n    }\n}",
    "submit_ts": "1722700472",
    "subm_id": "1343242936"
}