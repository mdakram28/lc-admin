{
    "username": "FedorMarchenko",
    "submission": "/**\n * @param {number[][]} board\n * @return {number}\n */\nvar maximumValueSum = function(board) {\n    let n = board.length\n    let m = board[0].length\n    let result = board[0][0] + board[1][1] + board[2][2]\n    \n    let maxRectLU = new Array(n).fill(0).map((item) => new Array(m))\n    maxRectLU[0][0] = board[0][0]\n    for (let i = 1; i < n; i++)\n        maxRectLU[i][0] = Math.max(maxRectLU[i - 1][0], board[i][0])\n    for (let j = 1; j < m; j++)\n        maxRectLU[0][j] = Math.max(maxRectLU[0][j - 1], board[0][j])\n    for (let i = 1; i < n; i++)\n        for (let j = 1; j < m; j++)\n            maxRectLU[i][j] = Math.max(maxRectLU[i - 1][j], maxRectLU[i][j - 1], board[i][j])\n    \n    let maxRectRU = new Array(n).fill(0).map((item) => new Array(m))\n    maxRectRU[0][m - 1] = board[0][m - 1]\n    for (let i = 1; i < n; i++)\n        maxRectRU[i][m - 1] = Math.max(maxRectRU[i - 1][m - 1], board[i][m - 1])\n    for (let j = m - 2; j >= 0; j--)\n        maxRectRU[0][j] = Math.max(maxRectRU[0][j + 1], board[0][j])\n    for (let i = 1; i < n; i++)\n        for (let j = m - 2; j >= 0; j--)\n            maxRectRU[i][j] = Math.max(maxRectRU[i - 1][j], maxRectRU[i][j + 1], board[i][j])\n    \n    let maxRectLD = new Array(n).fill(0).map((item) => new Array(m))\n    maxRectLD[n - 1][0] = board[n - 1][0]\n    for (let i = n - 2; i >= 0; i--)\n        maxRectLD[i][0] = Math.max(maxRectLD[i + 1][0], board[i][0])\n    for (let j = 1; j < m; j++)\n        maxRectLD[n - 1][j] = Math.max(maxRectLD[n - 1][j - 1], board[n - 1][j])\n    for (let i = n - 2; i >= 0; i--)\n        for (let j = 1; j < m; j++)\n            maxRectLD[i][j] = Math.max(maxRectLD[i + 1][j], maxRectLD[i][j - 1], board[i][j])\n    \n    let maxRectRD = new Array(n).fill(0).map((item) => new Array(m))\n    maxRectRD[n - 1][m - 1] = board[n - 1][m - 1]\n    for (let i = n - 2; i >= 0; i--)\n        maxRectRD[i][m - 1] = Math.max(maxRectRD[i + 1][m - 1], board[i][m - 1])\n    for (let j = m - 2; j >= 0; j--)\n        maxRectRD[n - 1][j] = Math.max(maxRectRD[n - 1][j + 1], board[n - 1][j])\n    for (let i = n - 2; i >= 0; i--)\n        for (let j = m - 2; j >= 0; j--)\n            maxRectRD[i][j] = Math.max(maxRectRD[i + 1][j], maxRectRD[i][j + 1], board[i][j])\n    \n    for (let i = 1; i < n - 1; i++)\n        for (let j = 1; j < m - 1; j++) {\n            result = Math.max(result, board[i][j] + maxRectLU[i - 1][j - 1] + maxRectRD[i + 1][j + 1])\n            result = Math.max(result, board[i][j] + maxRectRU[i - 1][j + 1] + maxRectLD[i + 1][j - 1])\n        }\n    let maxLeft = new Array(n).fill(0).map((item) => new Array(m))\n    for (let i = 0; i < n; i++) {\n        maxLeft[i][0] = board[i][0]\n        for (let j = 1; j < m; j++)\n            maxLeft[i][j] = Math.max(maxLeft[i][j - 1], board[i][j])\n    }\n    let maxRight = new Array(n).fill(0).map((item) => new Array(m))\n    for (let i = 0; i < n; i++) {\n        maxRight[i][m - 1] = board[i][m - 1]\n        for (let j = m - 2; j >= 0; j--)\n            maxRight[i][j] = Math.max(maxRight[i][j + 1], board[i][j])\n    }\n    for (let j = 1; j < m - 1; j++) {\n        let maxVal = [maxLeft[0][j - 1], maxRight[0][j + 1]]\n        let maxSum = maxLeft[0][j - 1] + maxRight[1][j + 1]\n        for (let i = 2; i < n; i++) {\n                maxSum = Math.max(maxSum, maxLeft[i - 1][j - 1] + maxVal[1], maxRight[i - 1][j + 1] + maxVal[0])\n                result = Math.max(result, board[i][j] + maxSum)\n                maxVal[0] = Math.max(maxVal[0], maxLeft[i - 1][j - 1])\n                maxVal[1] = Math.max(maxVal[1], maxRight[i - 1][j + 1])\n            }\n        }\n    for (let j = 1; j < m - 1; j++) {\n        let maxVal = [maxLeft[n - 1][j - 1], maxRight[n - 1][j + 1]]\n        let maxSum = maxLeft[n - 1][j - 1] + maxRight[n - 2][j + 1]\n        for (let i = n - 3; i >= 0; i--) {\n                maxSum = Math.max(maxSum, maxLeft[i + 1][j - 1] + maxVal[1], maxRight[i + 1][j + 1] + maxVal[0])\n                result = Math.max(result, board[i][j] + maxSum)\n                maxVal[0] = Math.max(maxVal[0], maxLeft[i + 1][j - 1])\n                maxVal[1] = Math.max(maxVal[1], maxRight[i + 1][j + 1])\n            }\n        }\n    \n    return result\n};",
    "submit_ts": "1723910205",
    "subm_id": "1359221288"
}