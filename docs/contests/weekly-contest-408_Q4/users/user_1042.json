{
    "username": "TusharChandwanni",
    "submission": "class Solution {\npublic:\n      int bfs(vector<vector<int>>& graph, int s, int t1, int t2, int n)\n      {\n         deque<int> q;\n        q.push_back(s);\n        vector<int> visited(n + 4, 0);\n        visited[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop_front();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push_back(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n      }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        \n        int n=circles.size();\n        vector<vector<int>> graph(n + 4);\n        \n        for (int i = 0; i < n; i++) {\n        int x, y, r;\n        x=circles[i][0];\n        y=circles[i][1];\n        r=circles[i][2];\n        if (x <= r) {\n            graph[n].push_back(i);\n            graph[i].push_back(n);\n        }\n        if (X - x <= r) {\n            graph[n + 2].push_back(i);\n            graph[i].push_back(n + 2);\n        }\n        if (y <= r) {\n            graph[n + 1].push_back(i);\n            graph[i].push_back(n + 1);\n        }\n        if (Y - y <= r) {\n            graph[n + 3].push_back(i);\n            graph[i].push_back(n + 3);\n        }\n        for (int j = i + 1; j < n; ++j) {\n            int xj, yj, rj;\n            xj=circles[j][0];\n        yj=circles[j][1];\n        rj=circles[j][2];\n            double distance = sqrt(std::pow(x - xj, 2) + pow(y - yj, 2));\n            double radius_sum = r + rj;\n            if (radius_sum >= distance) {\n                graph[i].push_back(j);\n                graph[j].push_back(i);\n            }\n        }\n    }\n        int ans = 0;\n        ans = max(ans, bfs(graph, n, n + 1, n + 2, n + 4));  \n        ans = max(ans, bfs(graph, n + 3, n + 2, n + 1, n + 4));  \n\n    return ans == 0;\n\n    }\n};",
    "submit_ts": "1722139172",
    "subm_id": "1335809967"
}