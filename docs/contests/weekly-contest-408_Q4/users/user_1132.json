{
    "username": "hanzhang-xyz",
    "submission": "class Solution {\npublic:\n    long long square(long long x) {\n        return x * x;\n    }\n    bool row(vector<vector<long long>>& arr, long long X, long long Y, vector<vector<int>>& circles) {\n        bool flag[1001] = {false};\n        queue<long long> q;\n        for (long long i=0; i<circles.size(); ++i) {\n            if (circles[i][2] >= circles[i][0]){ q.push(i); flag[i] = true; }\n        }\n        while(!q.empty()) {\n            long long now = q.front();\n            q.pop();\n            if (circles[now][2] + circles[now][0] >= X) return false;\n            for (long long j = 0; j<arr[now].size(); ++j) {\n                if (flag[arr[now][j]] == false) {q.push(arr[now][j]); flag[arr[now][j]] = true; }\n            }\n        }\n        return true;\n    }\n    bool col(vector<vector<long long>>& arr, long long X, long long Y, vector<vector<int>>& circles) {\n        bool flag[1001] = {false};\n        queue<long long> q;\n        for (long long i=0; i<circles.size(); ++i) {\n            if (circles[i][2] >= circles[i][1]){ q.push(i); flag[i] = true; }\n        }\n        while(!q.empty()) {\n            long long now = q.front();\n            q.pop();\n            if (circles[now][2] + circles[now][1] >= Y) return false;\n            for (long long j = 0; j<arr[now].size(); ++j) {\n                if (flag[arr[now][j]] == false) {q.push(arr[now][j]); flag[arr[now][j]] = true; }\n            }\n        }\n        return true;\n    }\n    bool thi(vector<vector<long long>>& arr, long long X, long long Y, vector<vector<int>>& circles) {\n        bool flag[1001] = {false};\n        queue<long long> q;\n        for (long long i=0; i<circles.size(); ++i) {\n            if (circles[i][2] + circles[i][1] >= Y){ q.push(i); flag[i] = true; }\n        }\n        while(!q.empty()) {\n            long long now = q.front();\n            q.pop();\n            if (circles[now][2] + circles[now][0] >= X) return false;\n            for (long long j = 0; j<arr[now].size(); ++j) {\n                if (flag[arr[now][j]] == false) {q.push(arr[now][j]); flag[arr[now][j]] = true; }\n            }\n        }\n        return true;\n    }\n    bool fou(vector<vector<long long>>& arr, long long X, long long Y, vector<vector<int>>& circles) {\n        bool flag[1001] = {false};\n        queue<long long> q;\n        for (long long i=0; i<circles.size(); ++i) {\n            if (circles[i][1] <= circles[i][2]){ q.push(i); flag[i] = true; }\n        }\n        while(!q.empty()) {\n            long long now = q.front();\n            q.pop();\n            if (circles[now][0] <= circles[now][2]) return false;\n            for (long long j = 0; j<arr[now].size(); ++j) {\n                if (flag[arr[now][j]] == false) {q.push(arr[now][j]); flag[arr[now][j]] = true; }\n            }\n        }\n        return true;\n    }\n    bool canReachCorner(long long X, long long Y, vector<vector<int>>& circles) {\n        vector<vector<long long>> arr(1001, vector<long long>{});\n        \n        for (long long i=0; i<circles.size(); ++i) {\n            for (long long j=i+1; j<circles.size(); ++j) {\n                if (\n                    square(circles[i][0] - circles[j][0]) + square(circles[i][1] - circles[j][1]) <= square(circles[i][2] + circles[j][2])\n                    ) {\n                        arr[i].push_back(j);\n                        arr[j].push_back(i);\n                }\n            }\n        }\n        \n        return row(arr, X, Y, circles) && col(arr, X, Y, circles) && thi(arr, X, Y, circles) && fou(arr, X, Y, circles);\n    }\n};",
    "submit_ts": "1722138890",
    "subm_id": "1335802308"
}