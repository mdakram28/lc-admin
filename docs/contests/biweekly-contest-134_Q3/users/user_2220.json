{
    "username": "ableed",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(std::vector<int>& input, int sum) {\n        int N = input.size(); \n        int count = 0;  \n        if (sum == 1) {\n            return N;  // If sum is 1, each element forms its own group\n        }\n\n        int alt = 1;  // Length of current alternating group\n        int i = 1; \n\n        while (i < N + sum - 1) {\n            int curr = i;  \n            int prev = i - 1;  \n\n            if (curr >= N) {\n                curr -= N;\n            }\n            if (prev >= N) {\n                prev -= N;\n            }\n\n            if (input[curr] != input[prev]) {\n                ++alt;  \n            } else {\n                alt = 1; \n            }\n\n            if (alt >= sum) {\n                ++count;\n            }\n\n            ++i;  \n        }\n\n        return count; \n    }\n};",
    "submit_ts": "1720280455",
    "subm_id": "1311790023"
}