{
    "username": "cybsbbbb",
    "submission": "class Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        dp_heap = [list() for i in range(k + 2)]\n        dp_dict = [dict() for i in range(k + 2)]\n        \n        dp_dict[0][nums[0]] = 1\n        heapq.heappush(dp_heap[0], (-1, nums[0]))\n        \n        for i in range(1, n):\n            for q in range(k + 1)[::-1]:\n                if dp_heap[q]:\n                    length, tail = dp_heap[q][0]\n                else:\n                    continue\n                if tail == nums[i]:\n                    heapq.heappush(dp_heap[q], (length - 1, nums[i]))\n                    dp_dict[q][nums[i]] = -(length - 1)\n                else:\n                    heapq.heappush(dp_heap[q + 1], (length - 1, nums[i]))\n                    dp_dict[q + 1][nums[i]] = max(dp_dict[q + 1].get(nums[i], 0), -(length - 1))\n                    if nums[i] in dp_dict[q]:\n                        heapq.heappush(dp_heap[q], (-(dp_dict[q][nums[i]] + 1), nums[i]))\n                        dp_dict[q][nums[i]] = max(dp_dict[q].get(nums[i], 0), (dp_dict[q][nums[i]] + 1))\n            dp_dict[0][nums[i]] = max(dp_dict[0].get(nums[i], 0), 1)\n            heapq.heappush(dp_heap[0], (-1, nums[i]))\n        \n        ans = 0\n        for q in range(k + 1):\n            if dp_heap[q]:\n                ans = max(ans, -dp_heap[q][0][0])\n        \n        return ans\n                \n                \n                ",
    "submit_ts": 1717860666.0
}