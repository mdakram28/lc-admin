{
    "username": "fri59h2",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\nusing ll = long long;\ntypedef pair<int,int> pii;\nconst int mod = 1e9+7;\nconst int dir[4][2] = {1,0,0,1,-1,0,0,-1};\n//const int dir[8][2] = {1,0,0,1,-1,0,0,-1,-1,-1,1,1,1,-1,-1,1};\n#define lowbit(x)   (x)&(-x)\n#define all(x)    (x).begin(),(x).end()\n#define mst(x,val)  memset((x),(val),sizeof (x))\n#define x first\n#define y second\n#define endl '\\n'\nconst int N = 5e4+10;\nvector<ll> a(N+10);\nvector<ll> tag(4*N+200);\nstruct node{\n    int l, r;\n    ll val;\n};\nnode tree[4*N+200];\nvoid addtag(int x, ll d){\n    tag[x] += d;\n    tree[x].val += d;\n}\n\nvoid up(int x){\n    tree[x].val = max(tree[x<<1].val,tree[x<<1|1].val);\n}\n\nvoid down(int x){\n    if(tag[x] != 0) {\n        addtag(x<<1,tag[x]);\n        addtag(x<<1|1,tag[x]);\n        tag[x] = 0;\n    }\n}\n\nvoid build(int x, int l, int r){\n    tree[x].l = l, tree[x].r = r;\n    if(l == r){\n        tree[x].val = a[l];\n        return;\n    }\n    int mid = l + r >> 1;\n    build(x<<1,l,mid);\n    build(x<<1|1,mid+1,r);\n    up(x);\n}\n\nvoid modify(int x, int l, int r, ll d){\n    if(tree[x].l >= l && tree[x].r <= r){\n        addtag(x,d);\n        return ;\n    }\n    down(x);\n    int mid = tree[x].l + tree[x].r >> 1;\n    if(l <= mid) modify(x<<1,l,r,d);\n    if(r > mid) modify(x<<1|1,l,r,d);\n    up(x);\n}\n\nint query(int x, int l, int r){\n    if(tree[x].l >= l && tree[x].r <= r){\n        return tree[x].val;\n    }\n    down(x);\n    int res = 0;\n    int mid = tree[x].l + tree[x].r >> 1;\n    if(l <= mid) res = max(res,query(x<<1,l,r));\n    if(r > mid) res = max(res,query(x<<1|1,l,r));\n    up(x);\n    return res;\n}\nclass Solution {\npublic:\n\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        mst(tree,0);\n        tag.assign(4*N+200,0);\n        vector<bool> res;\n        for(int i = 1; i <= N; ++i){\n            a[i] = i;\n        }\n        set<int> v;\n        v.insert(N);\n        v.insert(0);\n        build(1,1,N);\n        for(auto&t :queries){\n            if(t.size() == 2){\n                auto idx = v.upper_bound(t[1]);\n                auto low = prev(idx);\n                int l = t[1]+1, r = *idx;\n                modify(1,l,r,*low-t[1]);\n                v.insert(t[1]);\n            }else{\n                //\n                //cout << query(1,1,t[1]) << '\\n';\n                //cout <<\"5 : \" << query(1,5,5) << '\\n';\n                res.push_back(query(1,1,t[1]) >= t[2]);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1716650982",
    "subm_id": "534773216"
}