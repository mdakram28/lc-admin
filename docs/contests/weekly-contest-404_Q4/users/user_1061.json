{
    "username": "tany_shaw",
    "submission": "class Solution {\npublic:\n     int solve(int s, int ex, vector<vector<int>>& adj, int& d) {\n        int ans1 = 0, ans2 = 0;\n        for (int i : adj[s]) {\n            if (i != ex) {\n                int pathLength = 1 + solve(i, s, adj, d);\n                if (pathLength > ans1) {\n                    ans2 = ans1;\n                    ans1 = pathLength;\n                } else if (pathLength > ans2) {\n                    ans2 = pathLength;\n                }\n            }\n        }\n        int path=ans1+ans2;\n        d = max(d,path);\n        return ans1;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> v(n), v2(m);\n        for (auto& i : edges1) {\n            v[i[0]].push_back(i[1]);\n            v[i[1]].push_back(i[0]);\n        }\n        for (auto& i : edges2) {\n            v2[i[0]].push_back(i[1]);\n            v2[i[1]].push_back(i[0]);\n        }\n\n        int ans = 0;\n        int ans2 = 0;\n        solve(0, -1, v, ans);\n        solve(0, -1, v2, ans2);\n        int a=ans+1;\n        int b=ans2+1;\n        return max({ans, ans2, (a/2 + b/2 + 1)});\n    }\n};",
    "submit_ts": 1719719512.0
}