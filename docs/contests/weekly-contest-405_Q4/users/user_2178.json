{
    "username": "vaib8557",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int min_cost;\n    TrieNode():min_cost(INT_MAX){}\n    void updateMinCost(int cost){\n        if(cost<min_cost){\n            min_cost=cost;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    void build(TrieNode* root,vector<string>& words,vector<int>& costs){\n        for (int i=0;i<words.size();i++) {\n            string& word= words[i];\n            int cost= costs[i];\n            TrieNode* curr= root;\n            for (char c:word){\n                if (curr->children.find(c)==curr->children.end()) curr->children[c]= new TrieNode();\n                curr=curr->children[c];\n            }\n            curr->updateMinCost(cost);\n        }\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root= new TrieNode();\n        build(root, words, costs);\n        int n= target.size();\n        vector<long long> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i=0;i<n;i++){\n            TrieNode* curr = root;\n            for (int j=i;j<n;j++){\n                char c=target[j];\n                if(curr->children.find(c) == curr->children.end()) break;\n                curr=curr->children[c];\n                if (dp[i]!=INT_MAX) dp[j+1]=min(dp[j+1],dp[i]+static_cast<long long>(curr->min_cost));\n            }\n        }\n        return dp[n]>=INT_MAX? -1 : static_cast<int>(dp[n]);\n    }\n};\n",
    "submit_ts": "1720324078",
    "subm_id": "1312391068"
}