{
    "username": "Showman_7112",
    "submission": "from collections import deque\nfrom math import sqrt\nfrom typing import List\n\nclass Solution:\n    def bfs(self, adj_list: List[List[int]], start: int, t1: int, t2: int, num_nodes: int) -> bool:\n        q = deque([start])\n        visited = [0] * (num_nodes + 4)\n        visited[start] = 1\n\n        while q:\n            node = q.popleft()\n            for neighbor in adj_list[node]:\n                if not visited[neighbor]:\n                    q.append(neighbor)\n                    visited[neighbor] = 1\n        \n        return visited[t1] or visited[t2]\n\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        num_circles = len(circles)\n        circle_positions = [((x, y), r) for x, y, r in circles]\n        adj_list = [[] for _ in range(num_circles + 4)]\n\n        for i in range(num_circles):\n            x, y = circle_positions[i][0]\n            r = circle_positions[i][1]\n            \n            if x <= r:\n                adj_list[num_circles].append(i)\n                adj_list[i].append(num_circles)\n            if X - x <= r:\n                adj_list[num_circles + 2].append(i)\n                adj_list[i].append(num_circles + 2)\n            if y <= r:\n                adj_list[num_circles + 1].append(i)\n                adj_list[i].append(num_circles + 1)\n            if Y - y <= r:\n                adj_list[num_circles + 3].append(i)\n                adj_list[i].append(num_circles + 3)\n            \n            for j in range(i + 1, num_circles):\n                xj, yj = circle_positions[j][0]\n                rj = circle_positions[j][1]\n                dist = sqrt((x - xj) ** 2 + (y - yj) ** 2)\n                radius_sum = r + rj\n                \n                if radius_sum >= dist:\n                    adj_list[i].append(j)\n                    adj_list[j].append(i)\n\n        blocked = max(\n            self.bfs(adj_list, num_circles, num_circles + 1, num_circles + 2, num_circles + 4),\n            self.bfs(adj_list, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4)\n        )\n        return not blocked\n",
    "submit_ts": "1722139149",
    "subm_id": "1335809227"
}