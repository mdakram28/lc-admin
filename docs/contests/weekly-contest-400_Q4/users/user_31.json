{
    "username": "KyouMoKawaii",
    "submission": "# https://raw.githubusercontent.com/cheran-senthil/PyRival/master/pyrival/data_structures/RangeQuery.py\nclass RangeQuery:\n    def __init__(self, data, func=min):\n        self.func = func\n        self._data = _data = [list(data)]\n        i, n = 1, len(_data[0])\n        while 2 * i <= n:\n            prev = _data[-1]\n            _data.append([func(prev[j], prev[j + i]) for j in range(n - 2 * i + 1)])\n            i <<= 1\n\n    def query(self, start, stop):\n        \"\"\"func of data[start, stop)\"\"\"\n        assert start < stop\n        depth = (stop - start).bit_length() - 1\n        return self.func(\n            self._data[depth][start], self._data[depth][stop - (1 << depth)]\n        )\n\n    def __getitem__(self, idx):\n        return self._data[0][idx]\n\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        rq = RangeQuery(nums, lambda x, y: x & y)\n        n = len(nums)\n        ans = inf\n        for i in range(n):\n            ans = min(ans, abs(nums[i] - k))\n            lo = i + 1\n            hi = n - 1\n            while lo <= hi:\n                mid = (lo + hi) // 2\n                x = rq.query(i, mid)\n                y = rq.query(i, mid + 1)\n                ans = min(ans, abs(x - k), abs(y - k))\n                if x > k:\n                    lo = mid + 1\n                else:\n                    hi = mid - 1\n                 \n        return ans\n",
    "submit_ts": "1717296490",
    "subm_id": "1274705955"
}