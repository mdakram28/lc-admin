{
    "username": "Gradesking",
    "submission": "int Mod[100000], n, m, k;\nint A[100000];\nint R[100000];\nbool found;\n\nvoid dfs(int x, int now) {\n    // cout << x << \" \" << now << endl;\n    if (found)\n        return;\n    if (x == m) {\n        if (now == 0) {\n            for (int i = 0; i < n; ++i)\n                R[i] = A[i];\n            found = true;\n        }\n        return;\n    }\n    for (int i = 9; i >= 0; --i) {\n        int y = n - 1 - x;\n\n        if (k % 2 == 0) {\n            if (y == 0 && i % 2 != 0)\n                continue;\n        }\n        if (k % 4 == 0) {\n            if (y == 1 && (10 * i + A[0]) % 4)\n                continue;\n        }\n        if (k == 5) {\n            if (y == 0 && i % 5 != 0)\n                continue;\n        }\n        if (k % 8 == 0) {\n            if (y == 2 && (100 * i + 10 * A[1] + A[0]) % 8)\n                continue;\n        }\n\n        A[x] = A[y] = i;\n        int tmp = i * Mod[x];\n        if (x != y)\n            tmp += i * Mod[y];\n        dfs(x - 1, (now + tmp) % k);\n    }\n}\n\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        Mod[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            Mod[i] = (Mod[i - 1] * 10) % k;\n        }\n\n        ::n = n;\n        m = n / 2 - 1;\n        ::k = k;\n        found = false;\n\n        dfs(n - 1, 0);\n        string s = \"\";\n        for (int i = 0; i < n; ++i)\n            s += char('0' + R[i]);\n        return s;\n    }\n};",
    "submit_ts": "1723950585",
    "subm_id": "556399991"
}