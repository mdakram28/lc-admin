{
    "username": "envyaims",
    "submission": "#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <ext/pb_ds/detail/standard_policies.hpp>\nusing namespace __gnu_pbds;\nclass Solution {\npublic:\n\n    template<typename T>\n    using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n    int numberOfSubstrings(string s) {\n        int n = s.size();\n        // 1 - 1 = 0\n        // 4 - 2 = 2\n        // 9 - 3 = 6\n        // 001111\n        vector<int> relevant = {0};\n        for(int i = 1; i * i <= n; i++){\n            relevant.push_back(i * i - i);\n        }\n        vector<int> p(n + 1), z(n + 1);\n        for(int i = 1; i <= n; i++){\n            p[i] = p[i-1] + (s[i-1] == '0' ? -1 : 1);\n            z[i] = z[i-1] + (s[i-1] == '0');\n        }\n        int max_z = z.back();\n        vector<ordered_set<pair<int,int>>> sets(n + 1);\n        for(int i = 0; i <= n; i++){\n            sets[z[i]].insert({p[i], i});\n        }\n        using ll = long long;\n        ll ans = 0;\n        for(int i = 0; i <= n; i++){\n            sets[z[i]].erase({p[i], i});\n            for(int j = 0; z[i]+j <= max_z && j < relevant.size(); j++){\n                if(z[i]+j > n) break;\n                // if we have exactly j zeroes\n                ans += (int) sets[z[i]+j].size() - sets[z[i]+j].order_of_key({p[i]+relevant[j], i});\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1722138959",
    "subm_id": "1335804129"
}