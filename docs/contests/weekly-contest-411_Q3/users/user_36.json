{
    "username": "cuiaoxiang",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int m) {\n        if (n == 1) {\n            for (int i = 9; i >= 1; --i) {\n                if (i % m == 0) return to_string(i);\n            }\n        }\n        vector<int> ten(n);\n        for (int i = 0; i < n; ++i) ten[i] = i == 0 ? 1 : ten[i - 1] * 10 % m;\n        int len = (n + 1) / 2;\n        vector<vector<int>> path(len, vector<int>(m, -1));\n        for (int i = len - 1; i >= 0; --i) {\n            int coef;\n            if (n - 1 - i == i) {\n                coef = ten[i];\n            } else {\n                coef = (ten[i] + ten[n - 1 - i]) % m;\n            }\n            for (int k = 0; k < m; ++k) {   \n                int low = i == 0 ? 1 : 0;\n                for (int x = 9; x >= low; --x) {\n                    int nk = (k + m - coef * x % m) % m;\n                    if (i + 1 == len) {\n                        if (nk == 0) {\n                            path[i][k] = x;\n                            break;\n                        }\n                    } else {\n                        if (path[i + 1][nk] != -1) {\n                            path[i][k] = x;\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n        string ret;\n        for (int i = 0, k = 0; i < len; ++i) {\n            int x = path[i][k];\n            ret += to_string(x);\n            int coef;\n            if (n - 1 - i == i) {\n                coef = ten[i];\n            } else {\n                coef = (ten[i] + ten[n - 1 - i]) % m;\n            }\n            k = (k + m - x * coef % m) % m;\n        }\n        string R = ret;\n        reverse(R.begin(), R.end());\n        if (n % 2) ret.pop_back();\n        ret += R;\n        return ret;\n    }\n};",
    "submit_ts": "1723949448",
    "subm_id": "556392845"
}