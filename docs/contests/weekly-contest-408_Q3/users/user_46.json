{
    "username": "lydxlx",
    "submission": "#include <vector>\n#include <string>\n#include <algorithm>\n#include <iostream>\n\nclass Solution {\npublic:\n    int numberOfSubstrings(std::string s) {\n        int n = s.size();\n        std::vector<int> A(n, 0);\n        for (int i = 0; i < n; ++i) {\n            A[i] = s[i] - '0';\n        }\n\n        std::vector<int> zeros(n, 0), ones(n, 0);\n        for (int i = 0; i < n; ++i) {\n            if (i - 1 >= 0) {\n                zeros[i] = zeros[i - 1];\n                ones[i] = ones[i - 1];\n            }\n            if (A[i] == 0) {\n                zeros[i] += 1;\n            } else {\n                ones[i] += 1;\n            }\n        }\n\n        auto count_zero = [&](int i, int j) {\n            j -= 1;\n            if (i == 0) return zeros[j];\n            return zeros[j] - zeros[i - 1];\n        };\n\n        auto count_one = [&](int i, int j) {\n            j -= 1;\n            if (i == 0) return ones[j];\n            return ones[j] - ones[i - 1];\n        };\n\n        int k = 0, ans = 0;\n        while (k * k <= n) {\n            int r = 0, rr = 0, rrr = 0;\n            for (int l = 0; l < n; ++l) {\n                r = std::max(r, l + 1);\n                while (r < n && count_zero(l, r) < k) {\n                    r += 1;\n                }\n\n                rr = std::max(r, rr);\n                while (rr < n && A[rr] == 1 && count_one(l, rr) < count_zero(l, rr) * count_zero(l, rr)) {\n                    rr += 1;\n                }\n\n                rrr = std::max(rr, rrr);\n                while (rrr < n && A[rrr] == 1) {\n                    rrr += 1;\n                }\n\n                if (count_zero(l, r) == k && count_one(l, rr) >= count_zero(l, rr) * count_zero(l, rr)) {\n                    ans += rrr - rr + 1;\n                }\n            }\n            k += 1;\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1722136863",
    "subm_id": "1335747170"
}