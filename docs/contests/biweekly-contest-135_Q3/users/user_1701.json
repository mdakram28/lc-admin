{
    "username": "anusarati",
    "submission": "class Solution\n{\npublic:\n    int minChanges(vector<int> &nums, int k)\n    {\n        // find the most common diff between array and its reverse\n        // the maximum possible difference we can make is k\n        // we can also calculate the max difference possible per position\n        // we can make one change to a pair or two changes\n        unordered_map<int, int> diffreqs;\n        const int N = nums.size();\n        // for one change only\n        vector<int> high_diffs(N / 2);\n        for (int i = 0; i < N / 2; ++i)\n        {\n            int r = nums[N - i - 1], c = nums[i];\n            int diff = abs(c - r);\n            ++diffreqs[diff];\n\n            // make one zero or k\n            high_diffs[i] = max({max(r, c), k - min(r, c)});\n            // cout << diff << ' ';\n        }\n#if 0\n        cout << endl;\n        for (int n : high_diffs)\n            cout << n << ' ';\n        cout << endl;\n#endif\n        sort(high_diffs.begin(), high_diffs.end());\n\n        // ignore all diffs above min_max_diff\n        // choose the most frequent diff below\n\n        // for each difference\n        // count least needed to make equal\n        // add 0 if difference is already equal\n        // add 1 if difference is up to high\n        // add 2 otherwise\n        int best = INT_MAX;\n        for (const auto &[diff, freq] : diffreqs)\n        {\n            // find number of high diffs at least diff\n            auto pos = lower_bound(high_diffs.begin(), high_diffs.end(), diff);\n            int at_high = (high_diffs.end() - pos) - freq;\n\n            int cost = at_high + 2 * (N / 2 - at_high - freq);\n            best = min(cost, best);\n            // cout << diff << ' ' << freq << ' ' << at_high << ' ' << cost << endl;\n        }\n        return best;\n    }\n};",
    "submit_ts": "1721489756",
    "subm_id": "1327462767"
}