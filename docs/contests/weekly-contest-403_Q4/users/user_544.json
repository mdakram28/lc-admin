{
    "username": "usual_yuz",
    "submission": "function minimumSum(grid: number[][]): number {\n    function minimumArea(rowS: number, rowE: number, colS: number, colE: number): number {\n        if (rowS >= rowE || colS >= colE) return 0;\n\n        let left = Infinity;\n        let right = -1;\n\n        let top = Infinity;\n        let bottom = -1;\n\n        for (let i = rowS; i < rowE; i++) {\n            for (let j = colS; j < colE; j++) {\n                if (grid[i][j]) {\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n\n                    top = Math.min(top, i);\n                    bottom = Math.max(bottom, i);\n                }\n            }\n        }\n\n        // console.log(right, left, bottom, top);\n        const res = (right + 1 - left) * (bottom + 1 - top);\n\n        if (res === Infinity) return 0;\n        return res;\n    }\n\n    const rows = grid.length;\n    const cols = grid[0].length;\n    let min = minimumArea(0, rows, 0, cols);\n\n    function minimumArea2(i: number, j: number): number {\n        let min = Infinity;\n        // \ud589\uc73c\ub85c \uc790\ub974\uae30\n        for (let k = 1; k < rows; k++) {\n            min = Math.min(min, minimumArea(i, k, j, cols) + minimumArea(k, rows, j, cols));\n        }\n\n        // \uc5f4\ub85c \uc790\ub974\uae30\n        for (let k = 1; k < cols; k++) {\n            min = Math.min(min, minimumArea(i, rows, j, k) + minimumArea(i, rows, k, cols));\n        }\n\n        return min;\n    }\n\n\n    // console.log(min);\n    for (let i = 1; i <= grid.length; i++) {\n        for (let j = 1; j <= grid[0].length; j++) {\n            const leftTop = minimumArea(0, i, 0, j);\n\n            const horizontalCut = leftTop + minimumArea(i, rows, 0, cols) + minimumArea(0, i, j, cols);\n            const verticalCut = leftTop + minimumArea(i, rows, 0, j) + minimumArea(0, rows, j, cols);\n            const candidate = [horizontalCut, verticalCut];\n\n            if (leftTop === 0) {\n                candidate.push(minimumArea(0, i, j, cols) + minimumArea(i, rows, 0, j) + minimumArea(i, rows, j, cols));\n            }\n\n            if (i === rows) {\n                candidate.push(leftTop + minimumArea2(0, j));\n            }\n\n            if (j === cols) {\n                candidate.push(leftTop + minimumArea2(i, 0));\n            }\n            // console.log(i, j, leftTop, candidate);\n            min = Math.min(min, ...candidate);\n        }\n    }\n\n    return min;\n}",
    "submit_ts": "1719114268",
    "subm_id": "1297343290"
}