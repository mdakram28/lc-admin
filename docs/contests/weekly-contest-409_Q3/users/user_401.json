{
    "username": "yien450",
    "submission": "class TreeNode:\n    def __init__(self, lbound, rbound):\n        self.left = None\n        self.right = None\n        self.remaining = rbound-lbound+1\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        def build(l, r):\n            if r < l:\n                return None\n            if l == r:\n                return TreeNode(l, r)\n            cur = TreeNode(l, r)\n            mid = (l+r)//2\n            cur.left = build(l,mid)\n            cur.right = build(mid+1, r)\n\n            return cur\n\n        def remove(node,l, r, remove_l, remove_r) -> int:\n            if r < l or remove_r < remove_l:\n                return 0\n            if not max(l,remove_l)<=min(r,remove_r):\n                return 0\n            \n            if node.remaining == 0:\n                return 0\n\n            if remove_l <= l and remove_r >= r:\n                remain = node.remaining\n                node.remaining = 0\n                return remain\n\n\n\n            mid = (l+r) // 2\n            removed = remove(node.left, l, mid, remove_l, min(mid,remove_r)) + remove(node.right, mid+1, r, max(remove_l, mid), remove_r)\n            node.remaining -= removed\n            return removed\n\n        root = build(0, n-1)\n        res = []\n        for q in queries:\n            remove(root, 0, n-1, q[0]+1, q[1]-1)\n            res.append(root.remaining-1)\n        return res\n\n\n        ",
    "submit_ts": "1722741617",
    "subm_id": "1343749331"
}