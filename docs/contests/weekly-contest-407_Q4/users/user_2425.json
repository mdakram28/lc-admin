{
    "username": "cachirag230",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        int[] dif = new int[n];\n        for (int i = 0; i < n; i++) {\n            dif[i] = target[i] - nums[i];\n        }\n        long res = 0;\n        int flag  = dif[0]>=0?1:0;\n        int last = 0;\n        for(int i=0;i<n;i++) {\n            if(flag==1 && dif[i]<0) {\n                res += solve(Arrays.copyOfRange(dif, last, i),true);\n                last = i;\n                flag = 0;\n            } else if(flag==0 && dif[i]>=0) {\n                res += solve(Arrays.copyOfRange(dif, last, i),false);\n                last = i;\n                flag = 1;\n            }\n        }\n\n        res += solve(Arrays.copyOfRange(dif, last, n),dif[n-1]>=0?true:false);\n\n        return res;\n    }\n\n    public long solve(int[] prefixSum,boolean pol) {\n        int n = prefixSum.length;\n\n        if(!pol) {\n            for (int i = 0; i < n; i++) {\n                prefixSum[i] = prefixSum[i]*-1;\n            }\n        }\n\n        long ans = prefixSum[0];\n\n        for (int i = 1; i < n; i++) {\n            if (prefixSum[i] > prefixSum[i - 1]) {\n                ans += prefixSum[i] - prefixSum[i - 1];\n            }\n\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1721534349",
    "subm_id": "1328028966"
}