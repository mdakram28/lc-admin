{
    "username": "heerkshah434",
    "submission": "class Solution {\npublic:\n    const int MOD = 1e9+7;\n    const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<int>> memo(n + 1, vector<int>(MAX_INVERSIONS + 1, -1));\n        \n        function<int(int, int)> countPermutations = [&](int length, int inv) {\n            // Base case\n            if (length == 0) return inv == 0 ? 1 : 0;\n            if (inv < 0) return 0;\n            if (memo[length][inv] != -1) return memo[length][inv];\n            \n            long long result = 0;\n            for (int newPos = 0; newPos < length; ++newPos) {\n                result = (result + countPermutations(length - 1, inv - newPos)) % MOD;\n            }\n            \n            if (reqMap.find(length) != reqMap.end()) {\n                if (inv != reqMap[length]) result = 0;\n            }\n            \n            return memo[length][inv] = result;\n        };\n\n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; ++inv) {\n            result = (result + countPermutations(n, inv)) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": 1719071228.0
}