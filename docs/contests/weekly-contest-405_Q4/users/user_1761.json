{
    "username": "Ashansh1",
    "submission": "class Solution {\npublic:\n    class node{\n    public:\n    node* links[26];\n    int flag=-1;\n    node(){\n        for(int i=0;i<26;i++)links[i]=NULL;\n        flag=1e9;\n    }\n    void setFlag(int val){\n        flag=val;\n    }\n};\n\n\nclass Trie {\npublic:\n    node* root;\n    Trie() {\n        root=new node();\n    }\n    \n    void insert(string word,int val) {\n        node* p=root;\n        for(auto it:word)\n        {\n            int i=it-'a';\n            if(!p->links[i])p->links[i]=new node();\n            p=p->links[i];\n        }\n        p->setFlag(val);\n    }\n\n    \n    bool search(string key,bool prefix=false) {\n        node *p = root;\n        for (auto &a : key) {\n            int i = a - 'a';\n            if (!p->links[i]) return false;\n            p = p->links[i];\n        }\n        if (prefix==false) return p->flag;\n        return true;\n    }\n  \n  \n};\n    node * go_to_next(node * curr,char ch)\n    {\n        node* p=curr;\n        int i=ch-'a';\n        if(!p->links[i])return NULL;\n        p=p->links[i];\n        return p;\n    }\n    int is_end(node* curr)\n    {\n        return curr->flag;\n    }\n  \n    int minimumCost(string s, vector<string>& words, vector<int>& costs) {\n        Trie* tr= new Trie();\n       \n        map<string,int> mpp;\n        for(int i=0;i<words.size();i++)\n        {\n            if(mpp.find(words[i])==mpp.end())\n            {\n                mpp[words[i]]=costs[i];\n                \n            }else mpp[words[i]]=min(mpp[words[i]],costs[i]);\n            \n        }\n        for(int i=0;i<words.size();i++)\n        {\n            string it=words[i];\n            tr->insert(it,mpp[it]);\n        }\n        \n        int n=s.length();\n        vector<int> dp(n+1,1e9);\n        dp[n]=0;\n        for(int i=n-1;i>=0;i--)\n        {\n            node * p=tr->root;\n            int ans=1e9;\n            for(int j=i;j<s.length();j++)\n            {\n                p=go_to_next(p,s[j]);\n                if(p==NULL)\n                {\n                    break;\n                }\n                if(is_end(p)!=1e9)\n                {\n                    ans=min(ans,is_end(p)+dp[j+1]);\n                }\n            }\n            dp[i]=ans;\n        }\n        return dp[0]==1e9?-1:dp[0];\n        \n    }\n};",
    "submit_ts": "1720323516",
    "subm_id": "1312377473"
}