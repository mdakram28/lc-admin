{
    "username": "Hexadecimal",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        def f(s):\n            m = -math.inf\n            d = [-math.inf] * 4\n            for i, (x, y) in enumerate(points):\n                if i == s:\n                    continue\n                for k in range(4):\n                    t = a[k][0] * x + a[k][1] * y\n                    m = max(m, d[k] - t)\n                    d[k] = max(d[k], t)\n            return m        \n        \n        a = [[-1, -1], [-1, 1], [1, -1], [1, 1]]\n        d = [-math.inf] * 4\n        e = [0 for _ in range(4)]\n        m = -math.inf\n        p = []\n        for i, (x, y) in enumerate(points):\n            for k in range(4):\n                t = a[k][0] * x + a[k][1] * y\n                r = d[k] - t \n                if r > m:\n                    m = r\n                    p = [e[k], i]\n                if t > d[k]:\n                    d[k] = t\n                    e[k] = i\n        return min(f(i) for i in p)"
}