{
    "username": "Diveyam_Mishra",
    "submission": "#include <string>\n#include <vector>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> offspring;\n    vector<pair<int, int>> endings;\n};\n\nclass Trie {\npublic:\n    TrieNode* base;\n\n    Trie() {\n        base = new TrieNode();\n    }\n\n    void insert(string text, int idx, int price) {\n        TrieNode* current = base;\n        for (char c : text) {\n            if (!current->offspring.count(c)) {\n                current->offspring[c] = new TrieNode();\n            }\n            current = current->offspring[c];\n        }\n        current->endings.push_back({idx, price});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int length = target.size();\n        vector<int> min_costs(length + 1, INT_MAX);\n        min_costs[0] = 0;\n\n        Trie tree;\n        for (int i = 0; i < words.size(); ++i) {\n            tree.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < length; ++i) {\n            if (min_costs[i] == INT_MAX) {\n                continue;\n            }\n\n            TrieNode* current = tree.base;\n            for (int j = i; j < length; ++j) {\n                if (!current->offspring.count(target[j])) {\n                    break;\n                }\n                current = current->offspring[target[j]];\n                for (auto& p : current->endings) {\n                    int word_length = words[p.first].size();\n                    if (i + word_length <= length) {\n                        min_costs[i + word_length] = min(min_costs[i + word_length], min_costs[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return min_costs[length] == INT_MAX ? -1 : min_costs[length];\n    }\n};\n\n        \n   \n",
    "submit_ts": "1720323031",
    "subm_id": "1312365544"
}