{
    "username": "NimishPrakash",
    "submission": "import heapq\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        \n        def get_top_3(values):\n            return heapq.nlargest(3, values, key=lambda x: x[0])\n        \n        top_row_values = []\n        for i in range(m):\n            row_values = [(board[i][j], j) for j in range(n)]\n            top_row_values.append(get_top_3(row_values))\n        \n        top_col_values = []\n        for j in range(n):\n            col_values = [(board[i][j], i) for i in range(m)]\n            top_col_values.append(get_top_3(col_values))\n        \n        max_sum = float('-inf')\n        \n        for r1 in range(m):\n            for r2 in range(r1 + 1, m):\n                for r3 in range(r2 + 1, m):\n                    for val1, c1 in top_row_values[r1]:\n                        for val2, c2 in top_row_values[r2]:\n                            if c2 == c1: continue  \n                            for val3, c3 in top_row_values[r3]:\n                                if c3 == c1 or c3 == c2: continue  \n                                current_sum = val1 + val2 + val3\n                                max_sum = max(max_sum, current_sum)\n        \n        return max_sum\n\n        ",
    "submit_ts": "1723909738",
    "subm_id": "1359203919"
}