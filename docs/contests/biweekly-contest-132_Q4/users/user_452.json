{
    "username": "sv1811",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int size = nums.size();\n        vector<vector<int>> lengths(size, vector<int>(k + 1, 1));\n        int max_length = 1;\n        vector<int> max_lengths(k + 1, -1);\n        vector<unordered_map<int, int>> nmap(k + 1);\n        \n        for (int i = 0; i < size; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                for (int l = 0; l < j; ++l) {\n                    lengths[i][j] = max(lengths[i][j], 1 + max_lengths[l]);\n                }\n                \n                if (nmap[j].count(nums[i])) {\n                    lengths[i][j] = max(1 + nmap[j][nums[i]],lengths[i][j]);\n                }\n                \n                max_length = max(max_length, lengths[i][j]);\n            }\n            \n            for (int j = 0; j <= k; ++j) {\n                max_lengths[j] = max(lengths[i][j],max_lengths[j]);\n                nmap[j][nums[i]] = max(lengths[i][j],nmap[j][nums[i]]);\n            }\n        }\n        \n        return max_length;\n    }\n};",
    "submit_ts": "1717862284",
    "subm_id": "1281818146"
}