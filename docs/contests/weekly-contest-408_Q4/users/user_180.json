{
    "username": "wizwilzo",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        UnionFind uf = new UnionFind(circles.length + 5);\n        //circles.length ID is left wall\n        //circles.length+1 ID is down wall\n        //circles.length+2 ID is right wall\n        //circles.length+3 ID is up wall\n        uf.union(circles.length, circles.length+3);\n        uf.union(circles.length+1, circles.length+2);\n\n        for (int i = 0; i < circles.length; i++) {\n            int x1 = circles[i][0];\n            int y1 = circles[i][1];\n            int r1 = circles[i][2];\n            if (x1 - r1 <= 0) {\n                uf.union(i, circles.length);\n            }\n            if (x1 + r1 >= X) {\n                uf.union(i, circles.length+2);\n            }\n            if (y1 - r1 <= 0) {\n                uf.union(i, circles.length+1);\n            }\n            if (y1 + r1 >= Y) {\n                uf.union(i, circles.length+3);\n            }\n\n            for (int j= i+1; j < circles.length; j++) {\n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                int r2 = circles[j][2];\n                double distance = dist(x1,y1,x2,y2);\n                \n                double rdistance = (double)(r2) + (double)(r1);\n\n                if (rdistance >= distance) {\n                    uf.union(i,j);\n                }\n            }\n\n        }\n\n        return uf.find(circles.length) != uf.find(circles.length+1);\n    }\n    private double dist(int X1, int Y1, int X2, int Y2) {\n        double x1 = (double)(X1);\n        double y1 = (double)(Y1);\n        double x2 = (double)(X2);\n        double y2 = (double)(Y2);\n        return Math.sqrt(Math.pow((x2 - x1), 2)+ Math.pow((y2 - y1), 2));\n    }\n}\n \nclass UnionFind {\n    private int[] id;\n    private int numOfGroups;\n    private int size;\n    public UnionFind(int size) {\n        this.size=size;\n        numOfGroups = size;\n        id = new int[size];\n        for (int i = 0; i < size; i++) {\n            id[i] = i;\n        }\n    }\n    public int getNumOfGroups() {\n        return numOfGroups;\n    }\n    public int find(int a) {\n        if (id[a] != a) {\n            //recursive path compression\n            id[a] = find(id[a]);\n                \n        }\n        return id[a];\n    }\n\n    public void union(int a, int b) {\n        int root1 = find(a);\n        int root2 = find(b);\n        if (root1 == root2) return;\n        id[root1] = root2;\n        numOfGroups--;\n    }\n}\n",
    "submit_ts": "1722134689",
    "subm_id": "1335674891"
}