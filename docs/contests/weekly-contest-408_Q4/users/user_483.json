{
    "username": "tanishq0_0",
    "submission": "class Solution {\n\npublic:\n    int bfs(vector<vector<int>> &adjList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visitedNodes(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visitedNodes[startNode] = 1;\n        \n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighborNode : adjList[currentNode]) {\n                if (!visitedNodes[neighborNode]) {\n                    nodeQueue.push(neighborNode);\n                    visitedNodes[neighborNode] = 1;\n                }\n            }\n        }\n        return visitedNodes[targetNode1] || visitedNodes[targetNode2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circleData) {\n        vector<vector<int>> circles(circleData.size(), vector<int>(3));\n        vector<vector<int>> adjList(circleData.size() + 4);\n        int totalCircles = circleData.size();\n        \n        for (int i = 0; i < totalCircles; ++i) {\n            circles[i][0] = circleData[i][0];\n            circles[i][1] = circleData[i][1];\n            circles[i][2] = circleData[i][2];\n        }\n        \n        for (int i = 0; i < totalCircles; ++i) {\n            if (circles[i][0] <= circles[i][2]) {\n                adjList[totalCircles].push_back(i);\n                adjList[i].push_back(totalCircles);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                adjList[totalCircles + 2].push_back(i);\n                adjList[i].push_back(totalCircles + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                adjList[totalCircles + 1].push_back(i);\n                adjList[i].push_back(totalCircles + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                adjList[totalCircles + 3].push_back(i);\n                adjList[i].push_back(totalCircles + 3);\n            }\n            for (int j = i + 1; j < totalCircles; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) +\n                                       pow(circles[i][1] - circles[j][1], 2));\n                int radiusSum = circles[i][2] + circles[j][2];\n                if (radiusSum >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        \n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(adjList, totalCircles, \n            totalCircles + 1,totalCircles + 2, totalCircles + 4)); \n        isBlocked = max(isBlocked, \n                bfs(adjList, totalCircles + 3, totalCircles + 2, totalCircles + 1, totalCircles + 4)); \n        \n        if (isBlocked) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722137881",
    "subm_id": "1335776324"
}