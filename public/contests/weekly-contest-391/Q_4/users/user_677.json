{
    "username": "ashwinbanwari",
    "submission": "class Solution {\npublic:\n    \n    vector<int> getPoints(vector<vector<int>>& points) {\n        int N = points.size();\n        vector<vector<int>> sums;\n        vector<vector<int>> diffs;\n        for (int i = 0; i < N; i++) {\n            sums.push_back({points[i][0] + points[i][1], i});\n            diffs.push_back({points[i][0] - points[i][1], i});\n        }\n        sort(sums.begin(), sums.end());\n        sort(diffs.begin(),diffs.end());\n        \n        int first = sums[N-1][0] - sums[0][0];\n        int second = diffs[N-1][0] - diffs[0][0];\n        return {sums[0][1], sums[N-1][1], diffs[0][1], diffs[N-1][1]};\n    }\n        \n    int solve(vector<vector<int>>& points) {\n        int N = points.size();\n        vector<int> sums;\n        vector<int> diffs;\n        for (int i = 0; i < N; i++) {\n            sums.push_back(points[i][0] + points[i][1]);\n            diffs.push_back(points[i][0] - points[i][1]);\n        }\n        sort(sums.begin(), sums.end());\n        sort(diffs.begin(),diffs.end());\n        \n        return max(sums[N-1] - sums[0], diffs[N-1] - diffs[0]);\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        int N = points.size();\n        /*set<vector<int>> sortedByX(points.begin(), points.end());\n        for (auto it = sortedByX.begin(); it != sortedByX.end(); it++) {\n            cout << (*it)[0] << \" \" << (*it)[1] << endl;\n        }*/\n        vector<int> indexes = getPoints(points);\n        int mini = INT_MAX;\n        for (int i = 0; i < indexes.size(); i++) {\n            vector<vector<int>> copy(points);\n            // cout << indexes[i] << endl;\n            copy.erase(copy.begin() + indexes[i]);\n            mini = min(solve(copy), mini);\n        }\n        \n        \n        \n        return mini;\n    }\n};"
}