{
    "username": "user2937Vz",
    "submission": "from sys import setrecursionlimit\nsetrecursionlimit(3 * (10 ** 5))\n\"\"\"\nFor every even adj nodes it takes 2 sec\nFor every odd adj nodes it takes 1 sec\n\neach edge can be of a 2 sec of a 1 sec\nsum of it will be the answer Its too easy :)\n\"\"\"\n\nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        \n        n = len(edges) + 1\n        def dfs(p , prev):\n            \n            for i in child[p]:\n                if(i == prev):continue\n                dfs(i , p)\n                if(i & 1):edge_v = 1\n                else:edge_v = 2\n                if(time[p][0] < time[i][0] + edge_v):\n                    time[p][1] = time[p][0]\n                    time[p][0] = time[i][0] + edge_v\n                else:\n                    time[p][1] = max(time[p][1] , time[i][0] + edge_v)\n                    \n        \n        \n        def reroot(p , prev):\n            \n            ans[p] = time[p][0]                \n            for i in child[p]:\n                if(i == prev):continue\n                    \n                prev_p , prev_i = time[p] , time[i]\n                if(i & 1):edge_v = 1\n                else:edge_v = 2\n                \n                if(p & 1):redge_v = 1\n                else:redge_v = 2\n                if(time[p][0] != time[i][0] + edge_v):\n                    if(time[i][0] < time[p][0] + redge_v):\n                        time[i][1] = time[i][0]\n                        time[i][0] = time[p][0] + redge_v\n                    else:\n                        time[i][1] = max(time[i][1] , time[p][0] + redge_v)\n                else:\n                    if(time[i][0] < time[p][1] + redge_v):\n                        time[i][1] = time[i][0]\n                        time[i][0] = time[p][1] + redge_v\n                    else:\n                        time[i][1] = max(time[i][1] , time[p][1] + redge_v)\n                \n                reroot(i , p)\n                time[p] , time[i] = prev_p , prev_i\n        \n        child = [[] for i in range(n)]\n        for [u , v] in edges:\n            child[u].append(v)\n            child[v].append(u)\n        \n        \n        time = [[0 , 0] for i in range(n)]\n        dfs(0 , -1)\n        \n        ans = [-1 for i in range(n)]\n        reroot(0 , -1)\n        \n        return ans\n        ",
    "submit_ts": "1722698560",
    "subm_id": "1343184578"
}