{
    "username": "bond_067",
    "submission": "// #define all(x) x.begin(),x.end()\n// #define int long long int\n\n// struct Node\n// {\n//     int cost;\n//     vector<int> childReferences;\n\n//     Node()\n//     {\n//         cost = 1e9 + 7;\n//         childReferences.resize( 26 );\n//         fill( all(childReferences) , -1LL );\n//     }\n// };\n\n// struct Trie\n// {\n//     int root;\n//     vector<Node> nodes;\n\n//     Trie()\n//     {\n//         root = 0;\n//         nodes.emplace_back();\n//     }\n\n//    void addRecursively( string& a, int currNode, int index , int c)\n//    {\n//         if(index == a.size())\n//         {\n//             nodes[currNode].cost = min( nodes[currNode].cost , c );\n//             return;\n//         }\n\n//         int child = nodes[currNode].childReferences[a[index] - 'a'];\n//         if(child == -1)\n//         {\n//             nodes[currNode].childReferences[a[index] - 'a'] = nodes.size();\n//             nodes.emplace_back();\n\n//             child = nodes[currNode].childReferences[a[index] - 'a'];\n//         }\n\n//         addRecursively( a, child, index + 1 );\n//     }\n\n//     void addString(string a)\n//     {\n//         addRecursively(a, root, 0);\n//     }\n\n//     bool searchString( string s )\n//     {\n//         int currNode = root;\n//         for( auto ch : s )\n//         {\n//             int charIndex = ch - 'a';\n//             if( nodes[currNode].childReferences[charIndex] == -1 ) return false;\n\n//             currNode = nodes[currNode].childReferences[charIndex];\n//         }\n//         return ( nodes[currNode].stringsEndingHere > 0 );\n//     }\n// };\n\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <algorithm>\n#include <climits>\n\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    bool isEnd;\n\n    TrieNode() : cost(INT_MAX), isEnd(false) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n        node->isEnd = true;\n    }\n\n    // This function will update dp array iteratively as we find matches\n    void searchAndUpdate(const string& target, int start, vector<long long>& dp) {\n        TrieNode* node = root;\n        for (int i = start; i < target.length(); ++i) {\n            char c = target[i];\n            if (node->children.find(c) == node->children.end()) {\n                break;\n            }\n            node = node->children[c];\n            if (node->isEnd && dp[start] != LLONG_MAX) {\n                dp[i + 1] = min(dp[i + 1], dp[start] + node->cost);\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == LLONG_MAX) continue; // Skip if this prefix is not achievable\n            trie.searchAndUpdate(target, i, dp);\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : dp[n];\n    }\n};\n\n",
    "submit_ts": "1720323136",
    "subm_id": "1312368182"
}