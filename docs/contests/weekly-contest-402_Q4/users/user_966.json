{
    "username": "utkarshraj_20",
    "submission": "#include <vector>\n\nclass SegmentTree {\nprivate:\n    std::vector<int> tree;\n    std::vector<int> arr;\n    int n;\n\n    int construct(int node, int l, int r) {\n        if (l == r) {\n            return tree[node] = arr[l];\n        }\n\n        int mid = l + (r - l) / 2;\n        int left_sum = construct(2 * node + 1, l, mid);\n        int right_sum = construct(2 * node + 2, mid + 1, r);\n\n        return tree[node] = left_sum + right_sum;\n    }\n\n    void update(int node, int l, int r, int idx, int val) {\n        if (l == r) {\n            arr[idx] = val;\n            tree[node] = val;\n            return;\n        }\n\n        int mid = l + (r - l) / 2;\n        if (idx <= mid) {\n            update(2 * node + 1, l, mid, idx, val);\n        } else {\n            update(2 * node + 2, mid + 1, r, idx, val);\n        }\n\n        tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n    }\n\n    int query(int node, int l, int r, int ql, int qr) {\n        if (r < ql || l > qr) {\n            return 0;\n        }\n\n        if (l >= ql && r <= qr) {\n            return tree[node];\n        }\n\n        int mid = l + (r - l) / 2;\n        int left_sum = query(2 * node + 1, l, mid, ql, qr);\n        int right_sum = query(2 * node + 2, mid + 1, r, ql, qr);\n\n        return left_sum + right_sum;\n    }\n\npublic:\n    SegmentTree(const std::vector<int>& _arr) {\n        arr = _arr;\n        n = arr.size();\n        tree.resize(4 * n);\n        construct(0, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    void update(int idx, int val) {\n        update(0, 0, n - 1, idx, val);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size() ;\n        vector<int> arr(n,0) ;\n        for( int i = 1 ; i < n-1 ; i++ ){\n            if( nums[i] > nums[i-1] && nums[i] > nums[i+1] ){\n                arr[i] = 1 ;\n            }\n        }\n        \n        SegmentTree st(arr);\n        vector<int> ans ;\n        \n        for( auto q : queries ){\n            if( q[0] == 1 ){\n                if( q[2]-q[1] >= 2 )\n                    ans.push_back(st.query(q[1]+1,q[2]-1)) ;\n                else\n                    ans.push_back(0) ;\n            }\n            else{\n                int q1 = q[1] ;\n                nums[q1] = q[2] ;\n                if( q1 > 0 && q1 < n-1){\n                    if( nums[q1] > nums[q1-1] && nums[q1] > nums[q1+1] ){\n                        st.update(q1,1) ;\n                    }\n                    else{\n                        st.update(q1,0) ;\n                    }\n                }\n                q1-- ;\n                if( q1 > 0 && q1 < n-1){\n                    if( nums[q1] > nums[q1-1] && nums[q1] > nums[q1+1] ){\n                        st.update(q1,1) ;\n                    }\n                    else{\n                        st.update(q1,0) ;\n                    }\n                }\n                q1+=2;\n                if( q1 > 0 && q1 < n-1){\n                    if( nums[q1] > nums[q1-1] && nums[q1] > nums[q1+1] ){\n                        st.update(q1,1) ;\n                    }\n                    else{\n                        st.update(q1,0) ;\n                    }\n                }\n            }\n        }\n        return ans ;\n    }\n};",
    "submit_ts": 1718508306.0
}