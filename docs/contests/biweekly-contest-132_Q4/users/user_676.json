{
    "username": "WhyAyushOp",
    "submission": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar maximumLength = function(nums, k) {\n    const n = nums.length;\n    const dp = createDPArray(n, k);\n    const maxPreviousGoodSubsequenceLength = Array(k + 1).fill(-1);\n    const previousGoodSubsequenceLengthMap = createPreviousGoodSubsequenceLengthMap(k);\n\n    let maxGoodLength = 1;\n    for (let i = 0; i < n; i++) {\n        updateDP(nums, k, dp, maxPreviousGoodSubsequenceLength, previousGoodSubsequenceLengthMap, i);\n        maxGoodLength = updateMaxGoodLength(maxGoodLength, dp, i, k);\n        updateMaxPreviousGoodSubsequenceLengthAndMap(nums[i], k, dp, maxPreviousGoodSubsequenceLength, previousGoodSubsequenceLengthMap, i);\n    }\n    return maxGoodLength;\n};\n\nfunction createDPArray(n, k) {\n    return Array.from({ length: n }, () => Array(k + 1).fill(1));\n}\n\nfunction createPreviousGoodSubsequenceLengthMap(k) {\n    return Array.from({ length: k + 1 }, () => new Map());\n}\n\nfunction updateDP(nums, k, dp, maxPreviousGoodSubsequenceLength, previousGoodSubsequenceLengthMap, i) {\n    for (let j = 0; j <= k; j++) {\n        for (let l = 0; l < j; l++) {\n            dp[i][j] = Math.max(dp[i][j], 1 + maxPreviousGoodSubsequenceLength[l]);\n        }\n        if (previousGoodSubsequenceLengthMap[j].has(nums[i])) {\n            dp[i][j] = Math.max(dp[i][j], 1 + previousGoodSubsequenceLengthMap[j].get(nums[i]));\n        }\n    }\n}\n\nfunction updateMaxGoodLength(maxGoodLength, dp, i, k) {\n    let maxVal = maxGoodLength;\n    for (let j = 0; j <= k; j++) {\n        maxVal = Math.max(maxVal, dp[i][j]);\n    }\n    return maxVal;\n}\n\nfunction updateMaxPreviousGoodSubsequenceLengthAndMap(num, k, dp, maxPreviousGoodSubsequenceLength, previousGoodSubsequenceLengthMap, i) {\n    for (let j = 0; j <= k; j++) {\n        maxPreviousGoodSubsequenceLength[j] = Math.max(maxPreviousGoodSubsequenceLength[j], dp[i][j]);\n        previousGoodSubsequenceLengthMap[j].set(num, Math.max(previousGoodSubsequenceLengthMap[j].get(num) || 0, dp[i][j]));\n    }\n}\n",
    "submit_ts": 1717861885.0
}