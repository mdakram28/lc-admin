{
    "username": "harshbardolia",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = (int) points.size();\n        multiset<long long> sum, dif;\n        \n        for (int i = 0; i < n; i++) {\n            long long curSum = points[i][0] + points[i][1];\n            long long curDif = points[i][0] - points[i][1];\n            \n            sum.insert(curSum);\n            dif.insert(curDif);\n        }\n        \n        function<long long()> getMaxSum = [&] () {\n            return *(--sum.end());  \n        };\n        \n        function<long long()> getMaxDif = [&] () {\n            return *(--dif.end());  \n        };\n        \n        function<long long()> getMinSum = [&] () {\n            return *(sum.begin());  \n        };\n        \n        function<long long()> getMinDif = [&] () {\n            return *(dif.begin());  \n        };\n        \n        function<long long()> getAns = [&] () {\n            long long op1 = getMaxSum() - getMinSum();\n            long long op2 = getMaxDif() - getMinDif();    \n            long long ans = max(op1, op2);\n            return ans;\n        };\n        \n        long long res = LLONG_MAX;\n        \n        for (int i = 0; i < n; i++) {\n            long long curSum = points[i][0] + points[i][1];\n            long long curDif = points[i][0] - points[i][1];\n            \n            sum.erase(sum.find(curSum));\n            dif.erase(dif.find(curDif));\n            \n            res = min(res, getAns());\n            \n            sum.insert(curSum);\n            dif.insert(curDif);\n        }\n        \n        return res;\n    }\n};"
}