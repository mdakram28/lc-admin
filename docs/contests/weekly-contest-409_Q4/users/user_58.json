{
    "username": "qiye-5",
    "submission": "int __FAST_IO__ = []() { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); return 0; }();\n\nint MAXN, f[50'007], g[50'007];\nint LowBit(int x) { return x & -x; }\nvoid Add(int len) {\n    // cout << \"Add \" << len << endl; \n    for (int x = len; x <= MAXN; x += LowBit(x)) f[x]++, g[x] += len;\n}\n\nvoid Del(int len) {\n    // cout << \"Del \" << len << endl; \n    for (int x = len; x <= MAXN; x += LowBit(x)) f[x]--, g[x] -= len;\n}\n\nint Query(int len, int sz) {\n    int a = 0, b = 0;\n    for (int x = len - 1; x; x &= x - 1) {\n        a += f[x];\n        b += g[x];\n    }\n    // cout << \"q:\" << (MAXN - b) << \" \" << (sz - a) << endl;\n    return MAXN - b - (sz - a) * (len - 1);\n}\n\n\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        MAXN = colors.size();\n        memset(f + 1, 0, MAXN << 2);\n        memset(g + 1, 0, MAXN << 2);\n        std::map<int, int> map;\n        \n        auto AddEdge = [&](int l, int r) {\n            if (l == r) return;\n            Add(r - l); map[l] = r;\n        };\n        auto DelEdge = [&](int l, int r) {\n            if (l == r) return;\n            Del(r - l); map.erase(l);\n        };\n        for (int i = 0; i < MAXN; ) {\n            int ii = i++;\n            while (i < MAXN && colors[i] != colors[i - 1]) ++i;\n            AddEdge(ii, i);\n        }\n\n        #define DMP_MAP(map) do { for (auto [k,v] : map) cout << k << \"->\" << v << \" \"; cout << endl; } while(0);\n        // DMP_MAP(map);\n\n        vector<int> res;\n        for (auto& q : queries) {\n            if (q[0] == 1) {\n                if (map.size() == 1 && ~MAXN & 1) {\n                    res.push_back(MAXN);\n                } else if (map.size() > 1 && colors.front() != colors.back()) {\n                    int a = map.begin()->second - map.begin()->first;\n                    int b = map.rbegin()->second - map.rbegin()->first;\n\n                    Del(a); Del(b); Add(a + b);\n                    res.push_back(Query(q[1], map.size() - 1));\n                    Add(a); Add(b); Del(a + b);\n                } else {\n                    res.push_back(Query(q[1], map.size()));\n                }\n            } else if (colors[q[1]] != q[2]) {\n                auto iter = prev(map.upper_bound(q[1]));\n\n                {\n                    int l = iter->first, r = iter->second;\n                    DelEdge(l, r);\n                    AddEdge(l, q[1]);\n                    AddEdge(q[1], q[1] + 1);\n                    AddEdge(q[1] + 1, r);\n                }\n\n                colors[q[1]] = q[2];\n                int l = q[1], r = q[1] + 1;\n                if (q[1] != MAXN - 1 && colors[q[1]] != colors[q[1] + 1]) {\n                    r = map.upper_bound(q[1])->second;\n                }\n                if (q[1] != 0 && colors[q[1]] != colors[q[1] - 1]) {\n                    l = prev(map.lower_bound(q[1]))->first;\n                }\n\n                DelEdge(l, q[1]);\n                DelEdge(q[1], q[1] + 1);\n                DelEdge(q[1] + 1, r);\n                AddEdge(l, r);\n\n                // DMP_MAP(map);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722743703",
    "subm_id": "552352339"
}