{
    "username": "HOBBIT__",
    "submission": "class SegTree {\n    public:\n    int n;\n    vector<int> st;\n    \n    SegTree(int _n, vector<int>& arr) {\n        n = _n;\n        st.resize(4 * n + 5);\n        Build(0, 0, n-1, arr);\n    }\n\n    void Build(int index, int l, int r, vector<int>& arr) {\n        if (l == r) {\n            st[index] = arr[l];\n            return;\n        }\n        int mid = (l + r) / 2;\n        Build(index * 2 + 1, l, mid, arr);\n        Build(index * 2 + 2, mid + 1, r, arr);\n        st[index] = st[index * 2 + 1] & st[index * 2 + 2];\n    }\n\n    int Query(int index, int l, int r, int i, int j) {\n        if (j < l || i > r) {\n            return INT_MAX;\n        }\n        if (i <= l && r <= j) {\n            return st[index];\n        }\n        int mid = (l + r) / 2;\n        int left = Query(index * 2 + 1, l, mid, i, j);\n        int right = Query(index * 2 + 2, mid + 1, r, i, j);\n        return left & right;\n    }\n    \n    int query(int l, int r){\n        return Query(0, 0, n-1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& arr, int k) {\n        \n        int n = arr.size();\n        SegTree seg(n, arr);\n        int ans = INT_MAX;\n        \n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (seg.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = min(ans, abs(seg.query(i, l) - k));\n            ans = min(ans, abs(k - seg.query(i, r)));\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": 1717298266.0
}