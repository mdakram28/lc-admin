{
    "username": "woi55",
    "submission": "public class Solution {\n    public bool CanReachCorner(int X, int Y, int[][] circles) {\n        List<int>[] map = FindOverlaps(circles, X, Y);\n        (bool[] leftAndTop, bool[] rightAndBot) = touchEdge(circles, X, Y);\n        for (int i = 0; i < map.Length; ++i) {\n            if (leftAndTop[i] == true) {\n                if (Explore(map, rightAndBot, i)) {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n\n    private bool Explore(List<int>[] map, bool[] rightAndBot, int start) {\n        bool[] explored = new bool[map.Length];\n        Queue<int> q = new Queue<int>();\n        q.Enqueue(start);\n        explored[start] = true;\n        int node;\n        while (q.Count > 0) {\n            node = q.Dequeue();\n            if (rightAndBot[node] == true) {\n                return true;\n            }\n            foreach (int next in map[node]) {\n                if (explored[next] == false) {\n                    q.Enqueue(next);\n                    explored[next] = true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private List<int>[] FindOverlaps(int[][] circles, int right, int top) {\n        int n = circles.Length;\n        List<int>[] map = new List<int>[n];\n        for (int i = 0; i < n; ++i) {\n            map[i] = new List<int>();\n        }\n        int x, y, z;\n        for (int i = 0; i < n; ++i) {\n            if ((circles[i][0] - circles[i][2] <= right) || (circles[i][1] - circles[i][2] <= top)) {\n                for (int j = i + 1; j < n; ++j) {\n                    if ((circles[j][0] - circles[j][2] <= right) || (circles[j][1] - circles[j][2] <= top)) {\n                        x = circles[i][0] - circles[j][0];\n                        y = circles[i][1] - circles[j][1];\n                        z = circles[i][2] + circles[j][2];\n                        if ((x * x + y * y) <= (z * z)) {\n                            map[i].Add(j);\n                            map[j].Add(i);\n                        }\n                    }\n\n                }                \n            }\n        }\n        return map;\n    }\n\n    private (bool[], bool[]) touchEdge(int[][] circles, int right, int top) {\n        int n = circles.Length;\n        bool[] leftAndTop = new bool[n];\n        bool[] rightAndBot = new bool[n];\n        for (int i = 0; i < n; ++i) {\n            if (circles[i][0] - circles[i][2] <= 0) {\n                leftAndTop[i] = true;\n            }\n            if ((circles[i][1] - circles[i][2] <= top) && (circles[i][1] + circles[i][2] >= top)) {\n                leftAndTop[i] = true;\n            }\n            if (circles[i][1] - circles[i][2] <= 0) {\n                rightAndBot[i] = true;\n            }\n            if ((circles[i][0] - circles[i][2] <= right) && (circles[i][0] + circles[i][2] >= right)) {\n                rightAndBot[i] = true;\n            }\n        }\n        return (leftAndTop, rightAndBot);\n    }\n}",
    "submit_ts": "1722137682",
    "subm_id": "1335770725"
}