{
    "username": "yien450",
    "submission": "class TrieNode:\n    def __init__(self, char=\"\"):\n        self.char = char\n        self.cost = float('inf')\n        self.children = {}\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode(\"\")\n    def add(self, word, cost):\n        ptr = 0\n        node = self.root\n        while ptr < len(word):\n            if word[ptr] not in node.children:\n                node.children[word[ptr]] = TrieNode(char=word[ptr])\n            node = node.children[word[ptr]]\n            ptr += 1\n        node.cost = cost\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        # \u66b4\u529bdp dp[i] = min(dp[:i-l]+words[dp[i-l:i]]) for l in range(i))\n        \n\n        cost_d = dict()\n        for i in range(len(words)):\n            if words[i] not in cost_d:\n                cost_d[words[i]] = costs[i]\n            else:\n                cost_d[words[i]] = min(cost_d[words[i]], costs[i])\n\n\n        trie = Trie()\n        for i in range(len(words)):\n            # trie\u6811\u4e2d\u7684word\u662f\u5012\u5e8f\u7684\n            trie.add(words[i][::-1], cost_d[words[i]])\n\n\n\n        dp = [float('inf') for _ in range(len(target)+1)]\n        dp[0] = 0\n        for i in range(1, len(target)+1):\n            node = trie.root\n            for k in range(i-1, -1, -1):\n                # k is index of target\n                if target[k] not in node.children:\n                    break\n                node = node.children[target[k]]\n                # print(i, k, node.cost)\n                dp[i] = min(dp[i], dp[k]+node.cost)\n            # print(dp)\n        return dp[-1] if dp[-1] != float('inf') else -1\n\n\n\n",
    "submit_ts": "1720322405",
    "subm_id": "1312349025"
}