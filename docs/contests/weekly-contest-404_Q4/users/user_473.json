{
    "username": "void_8t",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        \n        \n        \n        \n         auto findDiameter = [](const vector<vector<int>>& edges) -> int {\n            int n = edges.size() + 1;\n            vector<vector<int>> adj(n);\n            for (const auto& edge : edges) {\n                adj[edge[0]].push_back(edge[1]);\n                adj[edge[1]].push_back(edge[0]);\n            }\n\n            function<pair<int, int>(int, int)> dfs = [&](int node, int parent) {\n                pair<int, int> farthest = {0, node};\n                for (int neighbor : adj[node]) {\n                    if (neighbor != parent) {\n                        auto result = dfs(neighbor, node);\n                        result.first++;\n                        if (result.first > farthest.first) {\n                            farthest = result;\n                        }\n                    }\n                }\n                return farthest;\n            };\n\n            pair<int, int> farthest = dfs(0, -1);\n            farthest = dfs(farthest.second, -1);\n            return farthest.first;\n        };\n\n        int d1 = findDiameter(edges1);\n        int d2 = findDiameter(edges2);\n        \n        cout<<d1<<\" \"<<d2<<endl;\n     \n        \n       if(d1<d2)swap(d1,d2);\n        \n       \n        \n        int big=(d1+1)/2;\n        \n        \n        int big2=(d2+1)/2;\n        \n        return max(d1,big+big2+1);\n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n        \n    }\n};",
    "submit_ts": "1719719059",
    "subm_id": "1304432760"
}