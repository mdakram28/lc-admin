{
    "username": "Rajatkumar4430",
    "submission": "/**\n * @param {number[]} nums\n * @param {number[][]} queries\n * @return {number[]}\n */\nvar countOfPeaks = function(nums, queries) {\n    const n = nums.length;\n    const peaks = new Array(n).fill(0);\n    const segTree = new Array(4 * n).fill(0);\n    \n    const isPeak = (i) => {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    };\n    \n    for (let i = 1; i < n - 1; i++) {\n        peaks[i] = isPeak(i) ? 1 : 0;\n    }\n    \n    const build = (start, end, node) => {\n        if (start == end) {\n            segTree[node] = peaks[start];\n        } else {\n            const mid = Math.floor((start + end) / 2);\n            build(start, mid, 2 * node + 1);\n            build(mid + 1, end, 2 * node + 2);\n            segTree[node] = segTree[2 * node + 1] + segTree[2 * node + 2];\n        }\n    };\n    \n    build(0, n - 1, 0);\n    \n    const update = (start, end, idx, node) => {\n        if (start == end) {\n            segTree[node] = peaks[start];\n        } else {\n            const mid = Math.floor((start + end) / 2);\n            if (idx <= mid) {\n                update(start, mid, idx, 2 * node + 1);\n            } else {\n                update(mid + 1, end, idx, 2 * node + 2);\n            }\n            segTree[node] = segTree[2 * node + 1] + segTree[2 * node + 2];\n        }\n    };\n    \n    const query = (start, end, l, r, node) => {\n        if (r < start || l > end) return 0;\n        if (l <= start && r >= end) return segTree[node];\n        const mid = Math.floor((start + end) / 2);\n        return query(start, mid, l, r, 2 * node + 1) + query(mid + 1, end, l, r, 2 * node + 2);\n    };\n    \n    const result = [];\n    \n    for (const queryArr of queries) {\n        if (queryArr[0] === 1) {\n            const [_, li, ri] = queryArr;\n            if (li + 1 > ri - 1) {\n                result.push(0);\n            } else {\n                result.push(query(0, n - 1, li + 1, ri - 1, 0));\n            }\n        } else if (queryArr[0] === 2) {\n            const [_, indexi, vali] = queryArr;\n            nums[indexi] = vali;\n            if (indexi > 0 && indexi < n - 1) peaks[indexi] = isPeak(indexi) ? 1 : 0;\n            if (indexi - 1 > 0) peaks[indexi - 1] = isPeak(indexi - 1) ? 1 : 0;\n            if (indexi + 1 < n - 1) peaks[indexi + 1] = isPeak(indexi + 1) ? 1 : 0;\n            update(0, n - 1, indexi, 0);\n            if (indexi - 1 > 0) update(0, n - 1, indexi - 1, 0);\n            if (indexi + 1 < n - 1) update(0, n - 1, indexi + 1, 0);\n        }\n    }\n    \n    return result;\n};\n\nconsole.log(countOfPeaks([3, 1, 4, 2, 5], [[2, 3, 4], [1, 0, 4]]));\nconsole.log(countOfPeaks([4, 1, 4, 2, 1, 5], [[2, 2, 4], [1, 0, 2], [1, 0, 4]])); \n",
    "submit_ts": "1718506042",
    "subm_id": "1289604803"
}