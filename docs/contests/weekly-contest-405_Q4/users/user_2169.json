{
    "username": "Sumit542",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> words;  \n};\nclass Solution {\nprivate:\n    TrieNode* buildTrie(vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); i++) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children.count(c)) {\n                    node->children[c] = new TrieNode();\n                }\n                node = node->children[c];\n            }\n            node->words.push_back({words[i].length(), costs[i]});\n        }\n        return root;\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         TrieNode* root = buildTrie(words, costs);\n        int n = target.length();\n        vector<long long> dex(n + 1, LLONG_MAX);\n        dex[0] = 0;\n\n        for (int i = 0; i < n; i++) {\n            if (dex[i] == LLONG_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < n; j++) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto& word : node->words) {\n                    int len = word.first;\n                    int cost = word.second;\n                    if (i + len <= n) {\n                        dex[i + len] = min(dex[i + len], dex[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dex[n] == LLONG_MAX ? -1 : dex[n];\n    }\n};",
    "submit_ts": "1720322799",
    "subm_id": "1312359396"
}