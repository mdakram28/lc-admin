{
    "username": "deep_sharma78",
    "submission": "struct TrieNode{ \n        unordered_map<char, TrieNode*> chld; \n        vector<pair<int, int>> Wend;  \n    }; \n \n    class Trie { \n    public: \n        TrieNode* root; \n        Trie() { root = new TrieNode(); }\n        void insert(string& word, int i, int cost) { \n            TrieNode* node = root; \n            for (char c : word) { \n                if (!node->chld.count(c)) \n                    node->chld[c]=new TrieNode(); \n                node=node->chld[c]; \n            }\n            node->Wend.push_back({i,cost}); \n        } \n    }; \nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        std::ios_base::sync_with_stdio(false);\n        cin.tie(0);\n        cout.tie(0);\n        int n = target.size(); \n        vector<int> dp(n + 1, INT_MAX); \n        dp[0] = 0; \n        Trie trie; \n        for (int i=0;i<words.size();i++)  trie.insert(words[i], i, costs[i]); \n        \n        for (int i = 0; i < n;i++) { \n            if (dp[i] == INT_MAX) continue; \n            TrieNode* node = trie.root; \n            for (int j = i; j < n;j++) { \n                if (!node->chld.count(target[j])) break; \n                node = node->chld[target[j]]; \n                for (auto& p : node->Wend) { \n                    int Wi=p.first; \n                    int Wc=p.second; \n                    int len=words[Wi].size(); \n                    if (i+len<=n) dp[i+len]=min(dp[i+len],dp[i]+Wc); \n                    \n                } \n            } \n        } \n        return dp[n]==INT_MAX?-1:dp[n]; \n    } \n};",
    "submit_ts": "1720323503",
    "subm_id": "1312377177"
}