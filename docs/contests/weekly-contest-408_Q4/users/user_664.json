{
    "username": "JZhu0815",
    "submission": "class UnionFind {\n    int[] father;\n    public UnionFind(int n) {\n        father = new int[n];\n        for (int i = 0; i < n; i++) {\n            father[i] = i;\n        }\n    }\n    public void union(int a, int b) {\n        int fa_a = find(a);\n        int fa_b = find(b);\n        if (fa_a != fa_b) {\n            father[fa_a] = fa_b;\n        }\n    }\n    public int find(int x) {\n        int fa_x = father[x];\n        if (x == fa_x) {\n            return x;\n        }\n        father[fa_x] = find(fa_x);\n        return father[fa_x];\n    }\n}\nclass Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        UnionFind uf = new UnionFind(n + 4);\n        int topBorder = n, bottomBorder = n + 1, leftBorder = n + 2, rightBorder = n + 3;\n\n        // \u68c0\u67e5\u6bcf\u4e2a\u5706\u662f\u5426\u4e0e\u77e9\u5f62\u8fb9\u754c\u76f8\u4ea4\n        for (int i = 0; i < n; i++) {\n            int[] circle = circles[i];\n            int x = circle[0], y = circle[1], r = circle[2];\n            \n            // \u4e0e\u4e0a\u8fb9\u754c\u76f8\u4ea4\n            if (y + r >= Y) {\n                uf.union(i, topBorder);\n            }\n            // \u4e0e\u4e0b\u8fb9\u754c\u76f8\u4ea4\n            if (y - r <= 0) {\n                uf.union(i, bottomBorder);\n            }\n            // \u4e0e\u5de6\u8fb9\u754c\u76f8\u4ea4\n            if (x - r <= 0) {\n                uf.union(i, leftBorder);\n            }\n            // \u4e0e\u53f3\u8fb9\u754c\u76f8\u4ea4\n            if (x + r >= X) {\n                uf.union(i, rightBorder);\n            }\n            \n            // \u68c0\u67e5\u4e24\u4e2a\u5706\u662f\u5426\u76f8\u4ea4\n            for (int j = i + 1; j < n; j++) {\n                int[] circle2 = circles[j];\n                if (isIntersect(circle, circle2)) {\n                    uf.union(i, j);\n                }\n            }\n        }\n\n        // \u5224\u65ad\u662f\u5426\u6709\u8def\u5f84\u4ece\u4e0a\u8fb9\u5230\u53f3\u8fb9\uff0c\u6216\u8005\u4ece\u4e0b\u8fb9\u5230\u5de6\u8fb9\n        return !(uf.find(topBorder) == uf.find(rightBorder) || uf.find(bottomBorder) == uf.find(leftBorder) || uf.find(topBorder) == uf.find(bottomBorder) || uf.find(leftBorder) == uf.find(rightBorder)) ;\n    }\n    private boolean isIntersect(int[] circle1, int[] circle2) {\n        int x1 = circle1[0], y1 = circle1[1], r1 = circle1[2];\n        int x2 = circle2[0], y2 = circle2[1], r2 = circle2[2];\n        int distSq = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n        int radSumSq = (r1 + r2) * (r1 + r2);\n        return distSq <= radSumSq;\n    }\n}",
    "submit_ts": "1722137628",
    "subm_id": "1335769214"
}