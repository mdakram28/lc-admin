{
    "username": "chao24",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n        vector<vector<int>> adj1(n1), adj2(n2);\n       \n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        \n        int d1 = calculateDiameter(adj1, n1);\n        \n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n        \n        int d2 = calculateDiameter(adj2, n2);\n        \n        d1++;\n        d2++;\n        int ret = d1 / 2 + d2 / 2 + 1;\n        ret = max(ret, d1 - 1);\n        ret = max(ret, d2 - 1);\n        return ret;\n    }\n    \n    pair<int, int> dfs(int node, int parent, const vector<vector<int>>& adj) {\n        pair<int, int> f = {node, 0}; \n        for (int neighbor : adj[node]) {\n            if (neighbor == parent) continue;\n            pair<int, int> result = dfs(neighbor, node, adj);\n            result.second += 1; \n            if (result.second > f.second) {\n                f = result;\n            }\n        }\n        return f;\n    }\n    \n    int calculateDiameter(const vector<vector<int>>& adj, int n) {\n        pair<int, int> f = dfs(0, -1, adj);\n        pair<int, int> o = dfs(f.first, -1, adj);\n        return o.second;\n    }\n};",
    "submit_ts": 1719719111.0
}