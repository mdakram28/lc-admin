{
    "username": "TZGkPxfrU1",
    "submission": "class Solution {\npublic:\n    \n    #define vi vector<long long>\n    #define vvi vector<vi>\n    #define vvvi vector<vvi>\n    \n    \n    int rows, cols;\n    vvvi dp;\n    vector<vector<int>> board;\n    \n    long long helper(int c, int prev, int pprev) {\n        if(c == cols) {\n            return -1e11;\n        }\n        \n        if(dp[c][prev+1][pprev+1] != -1)\n            return dp[c][prev+1][pprev+1];\n        \n        long long res = -1e12;\n        \n        \n        for(int r = 0; r < rows; r++) {\n            if(r == prev || r == pprev) continue;\n            long long val = -1e12;\n\n            if(prev == -1) {\n                val = board[r][c] + helper(c+1, r, -1);            \n            } else if(pprev == -1) {\n                val = board[r][c] + helper(c+1, prev, r);\n            } else {\n                val = board[r][c];\n            }\n            \n            res = max(res, val);\n        }\n        long long val = helper(c+1, prev, pprev);\n        res = max(res, val);\n        return dp[c][prev+1][pprev+1] = res;\n    }\n    \n    long long maximumValueSum(vector<vector<int>>& board) {\n        this-> rows = board.size();\n        this-> cols = board[0].size();\n        this->board = board;\n        dp = vvvi(cols, vvi(rows+1, vi(rows+1, -1)));\n        return helper(0, -1, -1);\n    }\n};",
    "submit_ts": "1723906981",
    "subm_id": "1359083168"
}