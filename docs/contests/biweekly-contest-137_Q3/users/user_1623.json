{
    "username": "Harshit",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Store the best three columns and their values for each row\n        vector<vector<pair<int, int>>> bestColumns(m);\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> rowValues;\n            for (int j = 0; j < n; ++j) {\n                rowValues.push_back({board[i][j], j});\n            }\n            // Sort the row by value (descending)\n            sort(rowValues.rbegin(), rowValues.rend());\n            // Store the top three values with their corresponding columns\n            for (int k = 0; k < min(3, n); ++k) {\n                bestColumns[i].push_back(rowValues[k]);\n            }\n        }\n\n        long long maxSum = LLONG_MIN;\n        // Now, try all combinations of three different rows\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Try all combinations of columns selected from the best columns of these rows\n                    for (const auto& [v1, c1] : bestColumns[r1]) {\n                        for (const auto& [v2, c2] : bestColumns[r2]) {\n                            if (c2 == c1) continue; // Columns must be different\n                            for (const auto& [v3, c3] : bestColumns[r3]) {\n                                if (c3 == c1 || c3 == c2) continue; // Columns must be different\n                                // Calculate the sum\n                                long long currentSum = (long long)v1 + v2 + v3;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723909370",
    "subm_id": "1359189968"
}