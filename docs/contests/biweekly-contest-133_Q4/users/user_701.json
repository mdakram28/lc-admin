{
    "username": "alissanguyen",
    "submission": "/**\n * @param {number} n\n * @param {number[][]} requirements\n * @return {number}\n */\nconst MOD = 1000000007;\n\nvar numberOfPermutations = function(n, requirements) {\n    requirements.sort((a, b) => a[0] - b[0]);\n\n    // Initialize DP arrays\n    let dp = Array.from({ length: n + 1 }, () => Array(n * (n - 1) / 2 + 1).fill(0));\n    dp[0][0] = 1;  // There's one way to have zero elements with zero inversions\n\n    for (let i = 1; i <= n; i++) {\n        let prefix = Array(n * (n - 1) / 2 + 1).fill(0);\n        for (let j = 0; j <= n * (n - 1) / 2; j++) {\n            prefix[j] = dp[i - 1][j] + (j > 0 ? prefix[j - 1] : 0);\n            if (prefix[j] >= MOD) prefix[j] -= MOD;\n        }\n\n        for (let j = 0; j <= n * (n - 1) / 2; j++) {\n            dp[i][j] = prefix[j] - (j - i >= 0 ? prefix[j - i] : 0);\n            if (dp[i][j] < 0) dp[i][j] += MOD;\n        }\n\n        if (requirements.length && requirements[0][0] == i - 1) {\n            const cnt = requirements.shift()[1];\n            for (let j = 0; j <= n * (n - 1) / 2; j++) {\n                if (j != cnt) {\n                    dp[i][j] = 0;\n                }\n            }\n        }\n    }\n\n    // Sum all valid permutations\n    let result = dp[n].reduce((sum, val) => (sum + val) % MOD, 0);\n\n    return result;\n};\n\n",
    "submit_ts": 1719068917.0
}