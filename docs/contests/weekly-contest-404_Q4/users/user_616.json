{
    "username": "putIfAbsent",
    "submission": "class Solution {\n    boolean[] vis = new boolean[100010];\n    int next = 0;\n    int ans = 0;\n    \n    List<List<Integer>> build(int[][] edge) {\n        List<List<Integer>> g = new ArrayList<>();\n        int n = edge.length;\n        for(int i = 0; i <= n; i++)\n            g.add(new ArrayList<>());\n        for(int[] e: edge) {\n            g.get(e[0]).add(e[1]);\n            g.get(e[1]).add(e[0]);\n        }\n        return g;\n    }\n    \n    void dfs(List<List<Integer>> f, int u, int t) {\n        if (vis[u]) {\n            return;\n        }\n        vis[u] = true;\n        if (ans < t) {\n            ans = t;\n            next = u;\n        }\n        for (int v : f.get(u)) {\n            dfs(f, v, t + 1);\n        }\n    }\n    \n    int getDiameter(List<List<Integer>> f) {\n        if(f.size() <= 1)\n            return 0;\n        ans = 0;\n        Arrays.fill(vis, false);\n        dfs(f, 0, 0);\n        Arrays.fill(vis, false);\n        dfs(f, next, 0);\n        return ans;\n    }\n    \n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        List<List<Integer>> f1 = build(edges1);\n        List<List<Integer>> f2 = build(edges2);\n        \n        // System.out.println(f1.size());\n        // System.out.println(f2.size());\n        // int res1 = 0;\n        // int res2 = 0;\n        \n        int res1 = getDiameter(f1);\n        int res2 = getDiameter(f2);\n        if(res1 < res2) {\n            int t = res1;\n            res1 = res2;\n            res2 = t;\n        }\n        // System.out.println(res1 + \"\\t\" + res2);\n        \n        int mid1 = res1 / 2, mid2 = res2 / 2;\n        int a = Math.max(mid1, res1 - mid1) + Math.max(mid2, res2 - mid2) + 1;\n        return Math.max(res1, a);\n    }\n}",
    "submit_ts": 1719719609.0
}