{
    "username": "asde117",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        int h = 1;\n        int v = 1;\n\n        priority_queue<pair<int, int>> pq;\n        // 0 - horizontal, 1 - vertical\n        for (int i = 0; i < m-1; i++) {\n            pq.push({horizontalCut[i], 0});\n        }\n\n        for (int i = 0; i < n-1; i++) {\n            pq.push({verticalCut[i], 1});\n        }\n        long res = 0;\n        while(!pq.empty()) {\n            long cost = pq.top().first;\n            bool vertical = pq.top().second;\n            pq.pop();\n\n            if (vertical) {\n                res += cost*v;\n                h ++;\n            }\n            else {\n                res += cost*h;\n                v ++;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720925653",
    "subm_id": "1320261838"
}