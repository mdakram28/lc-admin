{
    "username": "NandaKishoreYadav",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<pair<pair<int, int>, int>> a(circles.size());\n        vector<vector<int>> b(circles.size() + 4);\n        int c = circles.size();\n        \n        for (int i = 0; i < c; ++i) {\n            a[i].first.first = circles[i][0];\n            a[i].first.second = circles[i][1];\n            a[i].second = circles[i][2];\n        }\n        \n        for (int i = 0; i < c; ++i) {\n            if (a[i].first.first <= a[i].second) {\n                b[c].push_back(i);\n                b[i].push_back(c);\n            }\n            if (X - a[i].first.first <= a[i].second) {\n                b[c + 2].push_back(i);\n                b[i].push_back(c + 2);\n            }\n            if (a[i].first.second <= a[i].second) {\n                b[c + 1].push_back(i);\n                b[i].push_back(c + 1);\n            }\n            if (Y - a[i].first.second <= a[i].second) {\n                b[c + 3].push_back(i);\n                b[i].push_back(c + 3);\n            }\n            for (int j = i + 1; j < c; ++j) {\n                double d = sqrt(pow(a[i].first.first - a[j].first.first, 2) +\n                                pow(a[i].first.second - a[j].first.second, 2));\n                int r = a[i].second + a[j].second;\n                if (r >= d) {\n                    b[i].push_back(j);\n                    b[j].push_back(i);\n                }\n            }\n        }\n        \n        int d = 0;\n        d = max(d, bfs(b, c, c + 1, c + 2, c + 4)); // Check for bottom-left corner\n        d = max(d, bfs(b, c + 3, c + 2, c + 1, c + 4)); // Check for top-right corner\n\n        return d == 0;\n    }\n};",
    "submit_ts": "1722136426",
    "subm_id": "1335734129"
}