{
    "username": "fsshakkhor",
    "submission": "#define LL int\nclass Solution {\npublic:\n    LL Tree[400005];\n\n    void update(LL at,LL L,LL R,LL pos,LL val)\n    {\n        if(pos<L or R<pos)return;\n\n        if(pos==L and pos==R)\n        {\n            Tree[at] = val;\n            return;\n        }\n\n        LL mid = (L+R)/2;\n        update(2*at,L,mid,pos,val);\n        update(2*at+1,mid+1,R,pos,val);\n        Tree[at]=(Tree[2*at] + Tree[2*at+1]);\n    }\n\n    LL query(LL at,LL L,LL R,LL l,LL r)\n    {\n        if(r<L or R<l)return 0;\n        if(l<=L and R<=r)return Tree[at];\n\n        LL mid = (L+R)/2;\n        LL x = query(2*at,L,mid,l,r);\n        LL y = query(2*at+1,mid+1,R,l,r);\n\n        return (x + y);\n    }\n    \n    void process(int ind,vector<int>& nums){\n        if(ind == 0 || ind == nums.size() - 1)return;\n        if(nums[ind] > nums[ind - 1] and nums[ind] > nums[ind + 1]){\n            // cout << \"changed \" << ind << 1 << endl;\n            update(1,0,nums.size() - 1,ind,1);\n        }else{\n            // cout << \"changed \" << ind << 0 << endl;\n            update(1,0,nums.size() - 1,ind,0);\n        }\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        memset(Tree,0,sizeof Tree);\n        for(int i = 1;i + 1 < nums.size();i++){\n            if(nums[i] > nums[i-1] and nums[i] > nums[i + 1]){\n                update(1,0,n-1,i,1);\n            }\n        }\n        vector<int>answer;\n        for(int i = 0;i < queries.size();i++){\n            if(queries[i][0] == 1){\n                int l = queries[i][1];\n                int r = queries[i][2];\n\n                int ans = 0;\n                if(r - l + 1 < 3)ans = 0;\n                else{\n                    // cout << l + 1 << \" \" << r - 1 << endl;\n                    ans = query(1,0,n-1,l + 1,r - 1);\n                }\n                answer.push_back(ans);\n            }else{\n                int ind = queries[i][1];\n                int val = queries[i][2];\n                nums[ind] = val;\n                if(ind - 1 >= 0)process(ind - 1,nums);\n                if(ind + 1 < nums.size())process(ind + 1,nums);\n                process(ind,nums);\n            }\n        }\n        \n        return answer;\n    }\n};",
    "submit_ts": 1718506991.0
}