{
    "username": "SanketGode",
    "submission": "class Segment{\npublic:\n    vector<int> tree;\n    int n;\n    Segment(vector<int>&nums){\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n    void build(vector<int>&nums, int node, int start,int end){\n        if (start == end) {\n            tree[node] = nums[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node]= tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(int l, int r){\n        return query(0, 0, n - 1, l, r);\n    }\n    int query(int node, int start, int end, int l, int r){\n        if(r < start || end < l)return INT_MAX;\n        if(l <= start && end <= r)return tree[node];\n        int mid = (start + end) / 2;\n        int q1 = query(2 * node + 1, start, mid, l, r);\n        int q2 = query(2 * node + 2, mid + 1, end, l, r);\n        return q1 & q2;\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        Segment st(nums);\n        int result = INT_MAX;\n        for(int i = 0; i < n; i++){\n            int start = i-1, end = n-1, mid;\n            while((end - start)>1){\n                mid = (start + end)/2;\n                if(st.query(i, mid)>=k)start = mid;\n                else end = mid;\n            }\n            if(start != i - 1)result = min(result, abs(st.query(i, start) - k));\n            result = min(result, abs(k - st.query(i, end)));\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1717299846.0
}