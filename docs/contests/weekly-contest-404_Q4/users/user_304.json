{
    "username": "indraneel_1998",
    "submission": "class Solution {\npublic:\n    int compute(vector<vector<int>>& edges) {\n        int n = edges.size();\n        vector<int> adj[n+1];\n        \n        for(vector<int> edge: edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        queue<int> q;\n        q.push(0);\n        int leaf=-1;\n        vector<bool> vis(n+1,false);\n        while(!q.empty()) {\n            int sz = q.size();\n            for(int i=0;i<sz;i++) {\n                auto curr = q.front();\n                q.pop();\n                vis[curr] = true;\n                leaf = curr;\n            for(auto it:adj[curr]) {\n                if(!vis[it]) {\n                    q.push(it);\n                }\n            }\n            }\n        }\n        q.push(leaf);\n       // cout << leaf << endl;\n        vis.assign(vis.size(),false);\n        int depth=0;\n                while(!q.empty()) {\n            int sz = q.size();\n            for(int i=0;i<sz;i++) {\n                auto curr = q.front();\n                q.pop();\n                vis[curr] = true;\n                leaf = curr;\n            for(auto it:adj[curr]) {\n                if(!vis[it]) {\n                    q.push(it);\n                }\n            }\n            }\n                    depth++;\n        }\n   //     cout << depth << endl;\n        return depth-1;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int diameter1 = compute(edges1);\n        int diameter2= compute(edges2);\n        //cout << diameter1 << ' ' << diameter2 << endl;\n        \n        return max({diameter1,diameter2,(diameter1+1)/2+(diameter2+1)/2+1});\n    }\n};",
    "submit_ts": 1719718703.0
}