{
    "username": "nikhrasuryansh",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct ChocolateNode {\n        unordered_map<char, ChocolateNode*> childNodes;\n        vector<pair<int, int>> wordEndings;\n        \n        ChocolateNode() {}\n    };\n\n    class ChocolateTrie {\n    public:\n        ChocolateNode* rootNode;\n        \n        ChocolateTrie() {\n            rootNode = new ChocolateNode();\n        }\n\n        void insertWord(const string& word, int index, int cost) {\n            ChocolateNode* currentNode = rootNode;\n            for (char ch : word) {\n                if (!currentNode->childNodes.count(ch)) {\n                    currentNode->childNodes[ch] = new ChocolateNode();\n                }\n                currentNode = currentNode->childNodes[ch];\n            }\n            currentNode->wordEndings.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string shinchan, vector<string>& doraemon, vector<int>& paisa) {\n        int targetLength = shinchan.length();\n        vector<int> dp(targetLength + 1, INT_MAX);\n        dp[0] = 0;\n\n        ChocolateTrie trie;\n        for (int i = 0; i < doraemon.size(); ++i) {\n            trie.insertWord(doraemon[i], i, paisa[i]);\n        }\n\n        for (int i = 0; i < targetLength; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            ChocolateNode* currentNode = trie.rootNode;\n            for (int j = i; j < targetLength; ++j) {\n                if (!currentNode->childNodes.count(shinchan[j])) break;\n                currentNode = currentNode->childNodes[shinchan[j]];\n                for (const auto& wordEnding : currentNode->wordEndings) {\n                    int wordIndex = wordEnding.first;\n                    int wordCost = wordEnding.second;\n                    int wordLength = doraemon[wordIndex].size();\n                    if (i + wordLength <= targetLength) {\n                        dp[i + wordLength] = min(dp[i + wordLength], dp[i] + wordCost);\n                    }\n                }\n            }\n        }\n\n        return dp[targetLength] == INT_MAX ? -1 : dp[targetLength];\n    }\n};\n",
    "submit_ts": "1720323384",
    "subm_id": "1312374225"
}