{
    "username": "samarth_717",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> a;\n    int b = INT_MAX;\n};\n\nclass Trie {\npublic:\n    TrieNode* c;\n    \n    Trie() {\n        c = new TrieNode();\n    }\n    \n    void insert(const string& d, int b) {\n        TrieNode* e = c;\n        for (char f : d) {\n            if (!e->a.count(f)) {\n                e->a[f] = new TrieNode();\n            }\n            e = e->a[f];\n        }\n        e->b = min(e->b, b);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int g = target.size();\n        Trie h;\n        \n        for (int i = 0; i < words.size(); ++i) {\n            h.insert(words[i], costs[i]);\n        }\n        \n        vector<int> dp(g + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < g; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* e = h.c;\n            for (int j = i; j < g; ++j) {\n                if (!e->a.count(target[j])) break;\n                \n                e = e->a[target[j]];\n                if (e->b != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + e->b);\n                }\n            }\n        }\n        \n        return dp[g] == INT_MAX ? -1 : dp[g];\n    }\n};\n",
    "submit_ts": "1720321320",
    "subm_id": "1312319677"
}