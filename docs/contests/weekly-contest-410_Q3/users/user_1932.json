{
    "username": "saiharshith_17",
    "submission": "\n#include <vector>\n#include <functional>\n#include <iostream>\n\n#define ll long long int\n\nclass Solution {\npublic:\n    // Public method to calculate total pair combinations\n    int countOfPairs(std::vector<int>& nums) {\n        int numSize = nums.size();\n        std::vector<std::vector<std::vector<ll>>> cache = initializeCache(numSize);\n\n        return computeCombinations(0, 0, nums[0], nums, cache);\n    }\n\nprivate:\n    // Function to initialize the cache for memoization\n    std::vector<std::vector<std::vector<ll>>> initializeCache(int numSize) {\n        return std::vector<std::vector<std::vector<ll>>>(\n            numSize, std::vector<std::vector<ll>>(51, std::vector<ll>(51, -1))\n        );\n    }\n\n    // Recursive function to compute total pair combinations\n    ll computeCombinations(int currentIndex, int firstValue, int secondValue,\n                           const std::vector<int>& nums, std::vector<std::vector<std::vector<ll>>>& cache) {\n        if (currentIndex >= nums.size()) return 1;\n        if (cache[currentIndex][firstValue][secondValue] != -1) return cache[currentIndex][firstValue][secondValue];\n\n        ll combinationCount = 0;\n        const ll MODULO = 1e9 + 7; \n\n        for (int i = firstValue; i <= nums[currentIndex]; i++) {\n            for (int j = secondValue; j >= 0; j--) {\n                if (i + j == nums[currentIndex]) {\n                    combinationCount += computeCombinations(currentIndex + 1, i, j, nums, cache);\n                    combinationCount %= MODULO;\n                }\n            }\n        }\n        return cache[currentIndex][firstValue][secondValue] = combinationCount;\n    }\n};\n\n\n\n",
    "submit_ts": "1723346454",
    "subm_id": "1351577954"
}