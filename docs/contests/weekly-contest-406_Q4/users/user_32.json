{
    "username": "rahulkumarsindhav",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        long long h = 0, v = 0;\n        long long horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n\n        // Use a greedy approach to always take the most expensive cut available\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += horizontalCut[h] * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                totalCost += verticalCut[v] * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (h < horizontalCut.size()) {\n            totalCost += horizontalCut[h] * verticalPieces;\n            h++;\n        }\n\n        // If there are remaining vertical cuts\n        while (v < verticalCut.size()) {\n            totalCost += verticalCut[v] * horizontalPieces;\n            v++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924759",
    "subm_id": "1320229805"
}