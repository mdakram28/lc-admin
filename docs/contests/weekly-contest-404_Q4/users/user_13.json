{
    "username": "megurine",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def help(edges):\n            n = len(edges) + 1\n            g = [[] for _ in range(n)]\n            for u, v in edges:\n                g[u].append(v)\n                g[v].append(u)\n            h = [[0, 0] for _ in range(n)]\n            def dfs1(u, p):\n                h[u] = [0, 0]\n                for v in g[u]:\n                    if v == p: continue\n                    dfs1(v, u)\n                    d = h[v][0] + 1\n                    if d > h[u][0]:\n                        h[u] = [d, h[u][0]]\n                    elif d > h[u][1]:\n                        h[u][1] = d\n            dfs1(0, -1)\n            ret = [0] * n\n            def dfs2(u, p):\n                ret[u] = h[u][0]\n                for v in g[u]:\n                    if v == p: continue\n                    su, sv = h[u][:], h[v][:]\n                    if sv[0] + 1 == su[0]:\n                        h[u][0] = h[u][1]\n                    d = h[u][0] + 1\n                    if d > h[v][0]:\n                        h[v] = [d, h[v][0]]\n                    elif d > h[v][1]:\n                        h[v][1] = d\n                    dfs2(v, u)\n                    h[u], h[v] = su, sv\n            dfs2(0, -1)\n            return ret\n        f1 = help(edges1)\n        f2 = help(edges2)\n        # print(f1)\n        # print(f2)\n        return max(max(f1), max(f2), min(f1) + min(f2) + 1)\n                \n        ",
    "submit_ts": 1719716071.0
}