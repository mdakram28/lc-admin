{
    "username": "kaushiki_03",
    "submission": "\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> differenceMap;\n        vector<int> maxValues;\n\n        collectDifferencesAndValues(nums, k, differenceMap, maxValues);\n\n        return computeMinChanges(differenceMap, maxValues, nums.size());\n    }\n\nprivate:\n    void collectDifferencesAndValues(const vector<int>& nums, int k, \n                                     map<int, vector<int>>& diffMap, vector<int>& values) {\n        int n = nums.size();\n        for (int i = 0; i < n / 2; ++i) {\n            int leftValue = nums[i];\n            int rightValue = nums[n - i - 1];\n            int absDifference = abs(leftValue - rightValue);\n            int maxValue = max({leftValue, rightValue, k - leftValue, k - rightValue});\n           \n            diffMap[absDifference].push_back(maxValue);\n            values.push_back(maxValue);\n        }\n    }\n\n    int computeMinChanges(const map<int, vector<int>>& diffMap, vector<int>& values, int totalSize) {\n        sort(values.begin(), values.end());\n        int minChangesRequired = totalSize;\n\n        for (const auto& entry : diffMap) {\n            int currentDiff = entry.first;\n            int countLessThanDiff = lower_bound(values.begin(), values.end(), currentDiff) - values.begin();\n            int changesNeeded = countLessThanDiff * 2 + (totalSize / 2 - countLessThanDiff);\n\n            for (const int& value : entry.second) {\n                if (value < currentDiff) {\n                    changesNeeded -= 2;\n                } else {\n                    changesNeeded -= 1;\n                }\n            }\n            \n            minChangesRequired = min(minChangesRequired, changesNeeded);\n        }\n\n        return minChangesRequired;\n    }\n};\n",
    "submit_ts": "1721489102",
    "subm_id": "1327442965"
}