{
    "username": "fizhim",
    "submission": "impl Solution {\n    pub fn get_results(queries: Vec<Vec<i32>>) -> Vec<bool> {\n        use std::collections::*;\n        \n        let mut a = vec![0];\n        \n        for q in &queries {\n            a.push(q[1]);\n        }\n        \n        a.sort_unstable();\n        a.dedup();\n        \n        let mut t = SegTreeCC::new(a);\n        let mut b = BTreeMap::new();\n        \n        b.insert(0, i32::MAX);\n        t.update(0, i32::MAX as i64);\n        \n        fn set(t: &mut SegTreeCC, b: &mut BTreeMap<i32, i32>, x: i32) {\n            if let Some((&y, &l)) = b.range(..x).next_back() {\n                let l0 = x - y;\n                let l1 = l - l0;\n                b.insert(y, l0);\n                b.insert(x, l1);\n                t.update(y, l0 as i64);\n                t.update(x, l1 as i64)\n            }\n        }\n        \n        fn rem(t: &mut SegTreeCC, b: &mut BTreeMap<i32, i32>, x: i32) {\n            if let Some(&l1) = b.get(&x) {\n                if let Some((&y, &l0)) = b.range(..x).next_back() {\n                    b.insert(y, l0 + l1);\n                    b.remove(&x);\n                    t.update(y, (l0 + l1) as i64);\n                    t.update(x, 0)\n                }\n            }\n        }\n        \n        let mut ans = vec![];\n        \n        for q in &queries {\n            let x = q[1];\n\n            if q[0] == 1 {\n                set(&mut t, &mut b, x);\n                //println!(\"{b:?}\");\n                continue;\n            }\n            \n            let flag = !b.contains_key(&x);\n            \n            if flag {\n                set(&mut t, &mut b, x);\n                //println!(\"{b:?}\");\n            }\n            \n            let l = t.get(0, x).unwrap() as i32;\n            //println!(\"{l:?}\");\n            ans.push(q[2] <= l);\n            \n            if flag {\n                rem(&mut t, &mut b, x);\n            }\n        }\n        \n        ans\n    }\n}\n\nstruct SegTree {\n    a: Vec<Option<i64>>,\n    len2: usize,\n}\n\nimpl SegTree {\n    pub fn new(len: usize) -> SegTree {\n        let mut len2 = 1;\n        while len2 < len {\n            len2 *= 2;\n        }\n        SegTree {\n            a: vec![None; len2 + len + 1],\n            len2\n        }\n    }\n\n    pub fn update(&mut self, i: usize, val: i64) {\n        let mut j = self.len2 + i;\n        self.a[j] = Some(val);\n        while j > 1 {\n            j /= 2;\n            self.a[j] = Self::f_opt(self.a[j * 2], self.a[j * 2 + 1]);\n        }\n    }\n\n    pub fn get(&self, b: usize, e: usize) -> Option<i64> {\n        let mut ans = None;\n        let mut st = vec![];\n        st.push((b, e, 0, self.len2, 1));\n        while let Some((b, e, l, r, i)) = st.pop() {\n            if b >= e {\n                continue;\n            }\n            if b == l && e == r {\n                ans = Self::f_opt(ans, self.a[i]);\n                continue;\n            }\n            let m = l + (r - l) / 2;\n            st.push((b, e.min(m), l, m, i * 2));\n            st.push((b.max(m), e, m, r, i * 2 + 1));\n        }\n        ans\n    }\n\n    fn f_opt(a: Option<i64>, b: Option<i64>) -> Option<i64> {\n        match (a, b) {\n            (None, None) => None,\n            (Some(a), None) => Some(a),\n            (None, Some(b)) => Some(b),\n            (Some(a), Some(b)) => Some(Self::f(a, b)),\n        }\n    }\n\n    fn f(a: i64, b: i64) -> i64 {\n        a.max(b)\n    }\n}\n\nstruct SegTreeCC {\n    t: SegTree,\n    b: Vec<i32>,\n}\n\nimpl SegTreeCC {\n    pub fn new(mut b: Vec<i32>) -> SegTreeCC {\n        b.sort_unstable();\n        b.dedup();\n        SegTreeCC {\n            t: SegTree::new(b.len()),\n            b,\n        }\n    }\n\n    pub fn update(&mut self, x: i32, val: i64) {\n        let i = self.b.partition_point(|&y| y < x);\n        self.t.update(i, val);\n    }\n\n    pub fn get(&self, b: i32, e: i32) -> Option<i64> {\n        let i = self.b.partition_point(|&y| y < b);\n        let j = self.b.partition_point(|&y| y < e);\n        self.t.get(i, j)\n    }\n}\n",
    "submit_ts": "1716652774",
    "subm_id": "1267671758"
}