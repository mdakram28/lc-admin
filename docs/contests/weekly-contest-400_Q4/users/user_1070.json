{
    "username": "MG261",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int dp[32] = {0};\n        int curr = nums[0];\n        int l=0, n = nums.size();\n        int ans = abs(k-curr);\n        for (int i=0; i<32; i++) {\n            int p = 1<<i;\n            if ((nums[0]&p)==0) dp[i]++;\n        }\n        for (int i=1; i<n; i++){\n            ans = min(ans,abs(k-nums[i])); \n            int d = curr&nums[i];\n            ans = min(ans,abs(k-d));\n            for (int j=0; j<32; j++) {\n                int p = 1<<j;\n                if ((nums[i]&p)==0) dp[j]++;\n            }\n            if (d<k) {\n                while (d<k && i-l>0) {\n                    int num = nums[l++];\n                    // cout << d << \" \";\n                    for (int j=0; j<32; j++) {\n                        int p = 1<<j;\n                        if ((num&p)==0) {\n                            dp[j]--;\n                            if (dp[j]==0) d+=p;\n                        }\n                        \n                    }\n                    ans = min(ans,abs(k-d));\n                }\n            }\n            ans = min(ans,abs(k-d));\n            curr = d;\n            // cout << endl;\n            // if (i==n-1) \n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717299239.0
}