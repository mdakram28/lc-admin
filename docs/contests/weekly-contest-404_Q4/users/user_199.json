{
    "username": "NULLgorithm",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adj1;\n    vector<vector<int>> adj2;\n    vector<int> dist;\n    void dfs(int i, int p, int d, vector<vector<int>>& adj){\n        dist[i]=d;\n        for(auto j: adj[i]){\n            if(j==p) continue;\n            dfs(j,i,d+1,adj);\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n, m;\n        n=edges1.size();\n        m=edges2.size();\n        n++;\n        m++;\n        adj1.resize(n);\n        for(int i=0;i<n-1;i++){\n            adj1[edges1[i][0]].push_back(edges1[i][1]);\n            adj1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        adj2.resize(m);\n        for(int i=0;i<m-1;i++){\n            adj2[edges2[i][0]].push_back(edges2[i][1]);\n            adj2[edges2[i][1]].push_back(edges2[i][0]);\n        }\n        dist.resize(n);\n        dfs(0,-1,0,adj1);\n        int mx1=0;\n        for(int i=0;i<n;i++){\n            if(dist[i]>dist[mx1]) mx1=i;\n        }\n        dfs(mx1,-1,0,adj1);\n        int d1=0;\n        for(int i=0;i<n;i++){\n            d1=max(dist[i],d1);\n        }\n        dist.clear();\n        dist.resize(m);\n        dfs(0,-1,0,adj2);\n        mx1=0;\n        for(int i=0;i<m;i++){\n            if(dist[i]>dist[mx1]) mx1=i;\n        }\n        dfs(mx1,-1,0,adj2);\n        int d2=0;\n        for(int i=0;i<m;i++){\n            d2=max(dist[i],d2);\n        }\n        int d11=d1;\n        int d22=d2;\n        d1=(d1/2)+d1%2;\n        d2=(d2/2)+d2%2;\n        int d3=max(d11,d22);\n        return max(d3, d1+d2+1);\n    }\n};",
    "submit_ts": "1719717107",
    "subm_id": "1304382646"
}