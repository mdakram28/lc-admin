{
    "username": "__a__j",
    "submission": "class Solution {\npublic:\n    \n    \n    #define ll long long \n    \n    \n    void build(int nl, int nr, int tidx, vector<ll> &tree, vector<int> &nums) {\n        if(nl == nr) {\n            tree[tidx] = (ll)nums[nl];\n            return;\n        }\n        int mid = (nl+nr)/2; \n        build(nl, mid, 2*tidx+1, tree, nums);\n        build(mid+1, nr, 2*tidx+2, tree, nums);\n        \n        tree[tidx] = (tree[2*tidx+1] & tree[2*tidx+2]); \n    }\n    \n    ll powe(ll a, ll b) {\n        ll res = 1;\n        while(b) {\n            if(b%2) {\n                res *= a; \n            }\n            b/=2;\n            a*=a;\n        }\n        return res;\n    }\n    \n    ll query(int nl, int nr, int tidx, int l, int r, vector<ll> &tree) {\n        if(nl > r or nr < l) {\n            ll a = 2;\n            ll b = 31;\n            ll temp = powe(a, b) - 1;\n            return temp;\n        }\n        if(nl >= l and nr <= r) return tree[tidx];\n        \n        int mid = (nl+nr)/2;\n        ll left = query(nl, mid, 2*tidx+1, l, r, tree);\n        ll right = query(mid+1, nr, 2*tidx+2, l, r, tree);\n        \n        return (left & right);\n    }\n    \n    ll countSubarrays(vector<int>& nums, int k) {\n           \n        int n = nums.size();\n        vector<ll> tree(4*n+1, 0);\n        build(0, n-1, 0, tree, nums);\n        \n        ll res = 0;\n        \n        for(int i = 0; i < n; i++) {\n            \n            int lo = 0, hi = i;\n            \n            ll idx1 = -1, idx2 = -1; \n            // finding AND just greater than k\n            while(lo <= hi) {\n                int mid = (lo+hi)/2; \n                \n                ll a = query(0, n-1, 0, mid, i, tree);\n                if(a > k) {\n                    idx1=mid;\n                    hi = mid-1;\n                } else {\n                    lo=mid+1;\n                }\n            }\n            // findind AND just smaller than k\n            \n            lo = 0, hi = i;\n            while(lo <= hi) {\n                int mid = (lo+hi)/2;\n                int a = query(0, n-1, 0, mid, i, tree);\n                \n                if(a < k) {\n                    idx2 = mid;\n                    lo = mid+1;\n                } else { \n                    hi = mid-1; \n                }\n            }\n            \n            if(idx1 == -1 and idx2 == -1) {\n                res += (ll)(i+1); \n            } else if(idx1 == -1) {\n                res += (ll)(i-idx2);\n            } else if(idx2 == -1) {\n                res += (ll)(idx1);\n            } else {\n                res += (ll)(idx1-idx2-1);\n            }\n            \n        }\n        \n        return res;\n    }\n};",
    "submit_ts": "1720278750",
    "subm_id": "1311722662"
}