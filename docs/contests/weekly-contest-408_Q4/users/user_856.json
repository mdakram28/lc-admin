{
    "username": "a0p3_p1l4rei1_5up3r",
    "submission": "#include<bits/stdc++.h> \nusing namespace std; \n#pragma GCC optimize(\"O3\")\n#pragma GCC optimize(3, \"Ofast\", \"inline\")\n#pragma GCC optimize(\"Ofast\")\n#pragma GCC optimize(\"unroll-loops\")\n#pragma GCC target(\"avx2,bmi,bmi2,lzcnt,popcnt\")\n\nauto init = []() \n{\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 'c';\n}();\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n=circles.size();\n        vector<vector<int>>mat(n+1,vector<int>(4,0));\n        for(int i=0;i<n;++i){\n            long long val=0;\n            val=circles[i][0]-circles[i][2];\n            if(val<=0) mat[i][0]=1;\n            val=circles[i][1]-circles[i][2];\n            if(val<=0) mat[i][1]=1;\n            val=circles[i][0]+circles[i][2];\n            if(val>=X) mat[i][2]=1;\n            val=circles[i][1]+circles[i][2];\n            if(val>=Y) mat[i][3]=1;\n            for(int j=0;j<n;++j){\n                if(i==j) continue;\n                long long r=circles[i][2]+circles[j][2];\n                long long ft=(long long)(circles[i][0]-circles[j][0])*(long long)(circles[i][0]-circles[j][0]);\n                long long se=(long long)(circles[i][1]-circles[j][1])*(long long)(circles[i][1]-circles[j][1]);\n                long double d=sqrtl(ft + se);\n                if(d<=r){\n                    mat[j][0]=(mat[i][0] | mat[j][0]);\n                    mat[j][1]=(mat[i][1] | mat[j][1]);\n                    mat[j][2]=(mat[i][2] | mat[j][2]);\n                    mat[j][3]=(mat[i][3] | mat[j][3]);\n                    // mat[i][0]=(mat[i][0] | mat[j][0]);\n                    // mat[i][1]=(mat[i][1] | mat[j][1]);\n                    // mat[i][2]=(mat[i][2] | mat[j][2]);\n                    // mat[i][3]=(mat[i][3] | mat[j][3]);\n                }\n            }\n        }\n        // for(int i=0;i<n;++i){\n        //     for(int j=0;j<4;++j){\n        //         cout<<mat[i][j]<<\" \";\n        //     }\n        //     cout<<endl;\n        // }\n        // cout<<endl;\n        int wrong=0;\n        for(int i=0;i<n;++i){\n            //conditions 1 left down\n            if(mat[i][0]==mat[i][1] and mat[i][0]==1) wrong=1;\n            //conditions 2 left right\n            if(mat[i][2]==mat[i][0] and mat[i][2]==1) wrong=1;\n            //conditions 3 up down\n            if(mat[i][3]==mat[i][1] and mat[i][3]==1) wrong=1;\n            //conditions 4 up right\n            if(mat[i][3]==mat[i][2] and mat[i][3]==1) wrong=1;\n            // cout<<wrong<<\" \";\n            for(int j=0;j<n;++j){\n                if(i==j) continue;\n                // //conditions 1 left down\n                // if(mat[i][0]==mat[j][1] and mat[i][0]==1) wrong=1;\n                // //conditions 2 lefj right\n                // if(mat[i][2]==mat[j][0] and mat[i][2]==1) wrong=1;\n                // //conditions 3 up jown\n                // if(mat[i][3]==mat[j][1] and mat[i][3]==1) wrong=1;\n                // //conditions 4 up jight\n                // if(mat[i][3]==mat[j][2] and mat[i][3]==1) wrong=1;\n            }\n        }\n        // cout<<endl;\n        if(wrong==1) return false;\n        return true;\n    }\n};",
    "submit_ts": "1722138219",
    "subm_id": "1335785243"
}