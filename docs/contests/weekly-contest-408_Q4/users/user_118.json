{
    "username": "yinqiaozhang",
    "submission": "class Solution {\npublic:\n    using ll = long long;\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circle) {\n        int n = circle.size();\n\n\n        \n        vector<vector<int>> g(n);\n        for (int i = 0; i < n; i ++) {\n            for (int j = i + 1; j < n; j ++) {\n                ll t = circle[i][2] + circle[j][2];\n                ll dx = abs(circle[i][0] - circle[j][0]), dy = abs(circle[i][1] - circle[j][1]);\n                if (dx * dx + dy * dy <= t * t) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        queue<int> q;\n        vector<bool> st(n, false);\n\n        // \u5de6\u8fb9\u7ebf\n        for (int i = 0; i < n; i ++) {\n            if (abs(circle[i][0] - 0) <= circle[i][2]) {\n                st[i] = true;\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            auto t = q.front();\n            if (abs(circle[t][1] - 0) <= circle[t][2] or abs(circle[t][0] - X) <= circle[t][2]) return false;\n            q.pop();\n            for (auto x : g[t]) {\n                if (st[x]) continue;\n                st[x] = true;\n                q.push(x);\n            }\n        }\n\n        fill(st.begin(), st.end(), false);\n        // \u53f3\u8fb9\u7ebf\n        for (int i = 0; i < n; i ++) {\n            if (abs(circle[i][0] - X) <= circle[i][2]) {\n                st[i] = true;\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            auto t = q.front();\n            if (abs(circle[t][1] - Y) <= circle[t][2] or abs(circle[t][0] - 0) <= circle[t][2]) return false;\n            q.pop();\n            for (auto x : g[t]) {\n                if (st[x]) continue;\n                st[x] = true;\n                q.push(x);\n            }\n        }\n\n        fill(st.begin(), st.end(), false);\n        // \u4e0b\u8fb9\u7ebf\n        for (int i = 0; i < n; i ++) {\n            if (abs(circle[i][1] - 0) <= circle[i][2]) {\n                st[i] = true;\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            auto t = q.front();\n            if (abs(circle[t][1] - Y) <= circle[t][2] or abs(circle[t][0] - 0) <= circle[t][2]) return false;\n            q.pop();\n            for (auto x : g[t]) {\n                if (st[x]) continue;\n                st[x] = true;\n                q.push(x);\n            }\n        }\n\n        fill(st.begin(), st.end(), false);\n        // \u4e0a\u8fb9\u7ebf\n        for (int i = 0; i < n; i ++) {\n            if (abs(circle[i][1] - Y) <= circle[i][2]) {\n                st[i] = true;\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            auto t = q.front();\n            if (abs(circle[t][1] - 0) <= circle[t][2] or abs(circle[t][0] - X) <= circle[t][2]) return false;\n            q.pop();\n            for (auto x : g[t]) {\n                if (st[x]) continue;\n                st[x] = true;\n                q.push(x);\n            }\n        }\n        \n        return true;\n\n    }\n\n};",
    "submit_ts": "1722138756",
    "subm_id": "1335798845"
}