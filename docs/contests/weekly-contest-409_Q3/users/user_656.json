{
    "username": "s1967",
    "submission": "class Solution {\npublic:\n//    void calc(int node,int low,int high,vector<int>&seg,vector<int>&lazy){\n//         if(lazy[node]){\n//             seg[node]+=(high-low+1)*1ll*lazy[node];\n//             if(low!=high){\n//                 lazy[2*node+1]+=lazy[node];\n//                 lazy[2*node+2]+=lazy[node];\n//             }\n//         }\n//         lazy[node]=0;\n//    }\n//     void update(int node,int low,int high,int l,int r,int val,vector<int>&seg,vector<int>&lazy){\n//         calc(node,low,high,seg,lazy);\n//         if(low>=l&&high<=r){\n//             seg[node]+=val;\n//             if(low!=high){\n//                 lazy[2*node+1]+=val;\n//                 lazy[2*node+2]+=val;\n//             }\n//             return;\n//         }\n//         int mid=low+(high-low)/2;\n//         if(r<low||l>high)return ;\n//         update(2*node+1,low,mid,l,r,val,seg,lazy);\n//         update(2*node+2,mid+1,high,l,r,val,seg,lazy);\n//         seg[node]=seg[2*node+1]+seg[2*node+2];\n//     }\n//     int query(int node,int low,int high,int l,int r,vector<int>&seg,vector<int>&lazy){\n//         calc(node,low,high,seg,lazy);\n//         if(low>=l&&high<=r){\n//             return seg[node];\n//         }\n//         int mid=low+(high-low)/2;\n//         if(r<low||l>high)return 0;\n//         int l1=query(2*node+1,low,mid,l,r,seg,lazy);\n//         int r1=query(2*node+2,mid+1,high,l,r,seg,lazy);\n//         return l1+r1;\n//     }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        // vector<int>seg(4*n+1),lazy(4*n+1);\n        // for(int i=0;i<n;i++){\n        //     update(0,0,n-1,i,i,n-1-i,seg,lazy);\n        // }\n        // int q=queries.size();\n        // vector<int>ans;\n        // for(int i=0;i<q;i++){\n        //     int u=queries[i][0];\n        //     int v=queries[i][1];\n        //     int p1=query(0,0,n-1,u,u,seg,lazy);\n        //     int p2=query(0,0,n-1,v,v,seg,lazy);\n        //     cout<<p1<<\" \"<<p2<<endl;\n        //     if((p1)>(p2+1)){\n        //         update(0,0,n-1,0,u,-p1+(p2+1),seg,lazy);\n        //     }\n        //     ans.push_back(query(0,0,n-1,0,0,seg,lazy));\n        // }\n        // return ans;\n        set<int>s;\n        int q=queries.size();\n        for(int i=0;i<n;i++){\n            s.insert(i);\n        }\n        vector<int>ans;\n        for(int i=0;i<q;i++){\n            int u=queries[i][0];\n            int v=queries[i][1];\n            if(s.find(v)==s.end()||s.find(u)==s.end()){\n                int s1=s.size();\n                ans.push_back(s1-1);\n                continue;\n            }\n            auto it1=s.lower_bound(u+1);\n            auto it2=s.lower_bound(v);\n            it2--;\n            while(*it1<*it2){\n                auto temp=it1;\n                 it1++;\n                s.erase(temp);\n            }\n            if(*it1==*it2)s.erase(it1);\n            int s1=s.size();\n            ans.push_back(s1-1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742306",
    "subm_id": "1343765873"
}