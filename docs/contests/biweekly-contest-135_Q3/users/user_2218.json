{
    "username": "NKH123",
    "submission": "bool cmp(pair<int, int> A, pair<int, int> B) {\n        if (A.second != B.second) {\n            return A.second > B.second;\n        } else {\n            return A.first < B.first;\n        }\n    }\n\nclass Solution {\npublic:\n    \n    int minChanges(vector<int>& nums, int k) {\n       vector<pair<int, int>> numPairs = getNumPairs(nums);\n    //    cout<<\"Printing numPairs: \\n\";\n    //    printPairArray(numPairs);\n       vector<pair<int, int>> distFreqPairs = getSortedDistanceFrequencyPairs(numPairs);\n    //    cout<<\"Printing distFreqPairs: \\n\";\n    //    printPairArray(distFreqPairs);\n       int ans = INT_MAX;\n       int n = distFreqPairs.size();\n       for(int i = 0; i < min(5, n); i++) {\n            ans = min(ans, getMinChanges(distFreqPairs[i].first, numPairs, k));\n       }\n       return ans == INT_MAX? getMinChanges(k, numPairs, k) : ans;\n    }\n\n    void printPairArray(vector<pair<int, int>>& a) {\n        for(int i = 0; i<a.size(); i++) {\n            cout<<\"{\"<<a[i].first<<\", \"<<a[i].second<<\"} \";\n        }\n        cout<<\"\\n\";\n\n    }\n\n    int getMinChanges(int dist, vector<pair<int, int>>& numPairs, int k) {\n        int ans = 0;\n        for(int i = 0; i < numPairs.size(); i++) {\n            if (abs(numPairs[i].first - numPairs[i].second) == dist) continue;\n            if (oneChangeWorks(numPairs[i], dist, k)) {\n                ans++;\n            } else if (twoChangeWorks(numPairs[i], dist, k)) {\n                ans += 2;\n            } else {\n                return INT_MAX;\n            }\n        }\n        return ans;\n    }\n\n    bool oneChangeWorks(pair<int, int> p,  int dist, int k) {\n        int A = p.first;\n        int B = p.second;\n        if (isValidChange(B-dist, k) || isValidChange(B+dist, k)) {\n            return true;\n        }\n        if (isValidChange(A-dist, k) || isValidChange(A+dist, k)) {\n            return true;\n        }\n        return false;\n    }\n\n\n     bool twoChangeWorks(pair<int, int> p,  int dist, int k) {\n        int A = p.first;\n        int B = p.second;\n        if (dist <= k) return true;\n\n        if (A > B) {\n            swap(A, B);\n        }\n\n        if (isValidChange(B-dist, k)) {\n            return true;\n        }\n        return false;\n     }\n\n     bool isValidChange(int x, int k) {\n        if (x>=0 && x<=k) {\n            return true;\n        }\n        return false;\n    }\n\n    vector<pair<int, int>> getNumPairs(vector<int>& nums) {\n        vector<pair<int, int>> numPairs;\n        int n = nums.size();\n        for(int i = 0; i<n/2; i++) {\n            numPairs.push_back({nums[i], nums[n - i - 1]});\n        }\n        return numPairs;\n    }\n\n    vector<pair<int, int>> getSortedDistanceFrequencyPairs(vector<pair<int, int>>& numPairs) {\n        int n = numPairs.size();\n        map<int, int> distFreq;\n        for(int i = 0; i<n; i++) {\n            distFreq[abs(numPairs[i].first - numPairs[i].second)]++;\n        }\n        vector<pair<int, int>> distFreqPairs;\n        for(auto g: distFreq) {\n            distFreqPairs.push_back({g.first, g.second});\n        }\n        sort(distFreqPairs.begin(),distFreqPairs.end(), cmp);\n        return distFreqPairs;\n    }\n};",
    "submit_ts": "1721490238",
    "subm_id": "1327476977"
}