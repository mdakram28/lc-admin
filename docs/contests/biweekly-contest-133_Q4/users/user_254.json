{
    "username": "hkrai1372",
    "submission": "class Solution {\npublic:\n    int countPermutations(int n, vector<pair<int, int>>& requirements) {\n    // Initialize DP table\n        int MOD=1000000007;\n     // Initialize DP table\n    vector<vector<int>> dp(n + 1, vector<int>(n * (n - 1) / 2 + 1, 0));\n    dp[0][0] = 1;  // There's one way to have 0 elements with 0 inversions\n    \n    // Fill DP table using prefix sums for optimization\n    for (int length = 1; length <= n; ++length) {\n        vector<int> prefix_sums(n * (n - 1) / 2 + 2, 0);\n        for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n            prefix_sums[inv + 1] = (prefix_sums[inv] + dp[length - 1][inv]) % MOD;\n        }\n        for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n            dp[length][inv] = (prefix_sums[inv + 1] - prefix_sums[max(0, inv - (length - 1))] + MOD) % MOD;\n        }\n    }\n    \n    // Create a mask for requirements\n    int max_inversions = n * (n - 1) / 2;\n    vector<int> req_mask(n + 1, -1);\n    for (auto& req : requirements) {\n        req_mask[req.first + 1] = req.second;\n    }\n    \n    // Initialize DP table for permutation counting with requirements\n    vector<vector<int>> count_dp(n + 1, vector<int>(max_inversions + 1, 0));\n    count_dp[0][0] = 1;\n    \n    // Fill count_dp based on the requirements using prefix sums\n    for (int length = 1; length <= n; ++length) {\n        vector<int> prefix_sums(max_inversions + 2, 0);\n        for (int inv = 0; inv <= max_inversions; ++inv) {\n            prefix_sums[inv + 1] = (prefix_sums[inv] + count_dp[length - 1][inv]) % MOD;\n        }\n        for (int inv = 0; inv <= max_inversions; ++inv) {\n            if (req_mask[length] == -1 || req_mask[length] == inv) {\n                count_dp[length][inv] = (prefix_sums[inv + 1] - prefix_sums[max(0, inv - (length - 1))] + MOD) % MOD;\n            }\n        }\n    }\n    \n    // Final count of valid permutations\n    int result = 0;\n    for (int inv = 0; inv <= max_inversions; ++inv) {\n        result = (result + count_dp[n][inv]) % MOD;\n    }\n    \n    return result;\n}\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<pair<int,int>>v;\n        for(int i=0;i<requirements.size();i++){\n            v.push_back({requirements[i][0],requirements[i][1]});\n        }\n        int p= countPermutations(n, v);\n        return p;\n    }\n};",
    "submit_ts": 1719068378.0
}