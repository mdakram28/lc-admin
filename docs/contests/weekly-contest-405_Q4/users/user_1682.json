{
    "username": "rajeev_k_verma",
    "submission": "import java.util.Arrays;\nimport java.util.HashMap;\nimport java.util.Map;\n\nclass Solution {\n    static class TrieNode {\n        TrieNode[] children;\n        int index;\n\n        TrieNode() {\n            children = new TrieNode[26];\n            index = -1;\n        }\n    }\n\n    TrieNode root;\n\n    public void insert(String word, int index) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            if (node.children[c - 'a'] == null) {\n                node.children[c - 'a'] = new TrieNode();\n            }\n            node = node.children[c - 'a'];\n        }\n        node.index = index;\n    }\n\n    public int minimumCost(String target, String[] words, int[] costs) {\n        // Step 1: Prune words and costs to keep only the minimum cost for each unique word\n        Map<String, Integer> wordCostMap = new HashMap<>();\n        for (int i = 0; i < words.length; i++) {\n            String word = words[i];\n            int cost = costs[i];\n            if (!wordCostMap.containsKey(word) || wordCostMap.get(word) > cost) {\n                wordCostMap.put(word, cost);\n            }\n        }\n\n        String[] uniqueWords = new String[wordCostMap.size()];\n        int[] uniqueCosts = new int[wordCostMap.size()];\n        int index = 0;\n        for (Map.Entry<String, Integer> entry : wordCostMap.entrySet()) {\n            uniqueWords[index] = entry.getKey();\n            uniqueCosts[index] = entry.getValue();\n            index++;\n        }\n\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n\n        root = new TrieNode();\n        for (int i = 0; i < uniqueWords.length; i++) {\n            insert(uniqueWords[i], i);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            TrieNode node = root;\n            for (int j = i; j < n; j++) {\n                char c = target.charAt(j);\n                if (node.children[c - 'a'] == null) break;\n                node = node.children[c - 'a'];\n                if (node.index != -1) {\n                    int nextIndex = j + 1;\n                    int newCost = dp[i] + uniqueCosts[node.index];\n                    if (newCost < dp[nextIndex]) {\n                        dp[nextIndex] = newCost;\n                    }\n                }\n            }\n        }\n\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}\n",
    "submit_ts": "1720324480",
    "subm_id": "1312400563"
}