{
    "username": "\u67f3\u9752",
    "submission": "\n//\u52a8\u6001\u89c4\u5212\nclass Solution {\npublic:\n    string largestPalindrome(int n, int k)\n    {\n        std::vector<int> v_pow_mod(n);\n        long long m = 1;\n        for (int i = 0; i < n; ++i)\n        {\n            v_pow_mod[i] = m % k;\n            m = m * 10 % k;\n        }\n\n        std::vector<std::vector<int>> dp_val(n, std::vector<int>(k, -1));\n        //\u8d4b\u503c\n        // 9 8 7 5 7 8 9\n        int mid = n / 2;\n        int mid2 = n - 1 - mid;\n        \n        //\u679a\u4e3e\u4f4d\u7f6emid\u9009\u62e90-9\n        bool can0 = (mid < n - 1);\n        for (int c = (can0 ? 0 : 1); c <= 9; ++c)\n        {\n            int i = mid;\n            int j = mid2;\n            //\u4e2d\u95f4\u662f1\u4e2a\u4f4d\u7f6e\n            if (i == j)\n            {\n                //\u4f4d\u7f6emid\u53d6\u503cc\uff0c\u6570\u503c\u4e3ac*10^mid\n                long long r = c * v_pow_mod[i] % k;\n                dp_val[i][r] = c;\n            }\n            //\u4e2d\u95f4\u662f2\u4e2a\u4f4d\u7f6e\n            else\n            {\n                assert(i - 1 == j);\n                //\u4f4d\u7f6emid\u53d6\u503cc\uff0c\u6570\u503c\u4e3ac*10^mid\n                //\u4f4d\u7f6emid2\u53d6\u503cc\uff0c\u6570\u503c\u4e3ac*10^mid2\n                long long r1 = c * v_pow_mod[i] % k;\n                long long r2 = c * v_pow_mod[j] % k;\n                long long r = (r1 + r2) % k;\n                dp_val[i][r] = c;\n            }\n        }\n\n        for (int i = mid + 1; i < n; ++i)\n        {\n            int j = n - 1 - i;\n            assert(i > j);\n            //\u679a\u4e3e\u4f4d\u7f6ei\u9009\u62e90-9\n            can0 = (i < n - 1);\n            for (int c = (can0 ? 0 : 1); c <= 9; ++c)\n            {\n                //\u4f4d\u7f6ei\u53d6\u503cc\uff0c\u6570\u503c\u4e3ac*10^i\n                //\u4f4d\u7f6ej\u53d6\u503cc\uff0c\u6570\u503c\u4e3ac*10^j\n                long long r1 = c * v_pow_mod[i] % k;\n                long long r2 = c * v_pow_mod[j] % k;\n                long long r = (r1 + r2) % k;\n\n                for (int x = 0; x < k; ++x)\n                {\n                    if (dp_val[i - 1][x] >= 0)\n                    {\n                        long long t = (r + x) % k;\n                        dp_val[i][t] = c;\n                    }\n                }\n            }\n        }\n\n        std::string result(n, ' ');\n        long long t = 0;\n        for (int i = n - 1; i >= mid; --i)\n        {\n            int j = n - 1 - i;\n            int c = dp_val[i][t];\n            result[i] = '0' + c;\n            result[j] = '0' + c;\n\n            long long r1 = c * v_pow_mod[i] % k;\n            long long r2 = c * v_pow_mod[j] % k;\n            long long r = (r1 + r2) % k;\n            t = (t - r + k) % k;\n        }\n        return result;\n    }\n};",
    "submit_ts": "1723953251",
    "subm_id": "556416415"
}