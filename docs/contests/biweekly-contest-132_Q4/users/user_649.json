{
    "username": "tanay_7",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n=nums.size();\n        vector<int> dp2(k+1,-1);\n      unordered_map<int, vector<int>> dp3;\n        int l1=0,c=0;\n        l1++;\n        c++;\n        vector<vector<int>>dp(n,vector<int>(k+1,1)); \n        vector<unordered_map<int,int>>idk(k+1); \n        for(int i=0;i<n;i++){ \n            for(int j=0;j<=k;j++){ \n                                for(int l=0;l<j;l++)\n                    dp[i][j]=max(dp[i][j],1+dp2[l]); \n                if(idk[j].find(nums[i])!=idk[j].end())           dp[i][j]=max(dp[i][j],l1+idk[j][nums[i]]); \n                c=max(c,dp[i][j]);\n            }\n        \n              for(int j=0;j<=k;j++){ \n                dp2[j]=max(dp2[j],dp[i][j]); \n                idk[j][nums[i]]=max(idk[j][nums[i]],dp[i][j]); \n            } \n\n        }\n        return c;\n        }\n                \n\n        \n//         int rr = 0;\n//         vector<vector<int>> dp(n,vector<int>(k+1,0));\n        \n\n//         for (int i = 0; i < n; ++i) {\n//             int num1=nums[i];\n//             vector<int> new_dp(k+1,0);\n            \n//             if(dp.find(num1)==dp.end()) dp[num1].resize(k+1,0);\n//             for(int j=0;j<=k;j++){\n//                 new_dp[j]=max(new_dp[j],1);\n//                 if(j>=0 && dp[num1][j]>0)      new_dp[j] = max(new_dp[j], dp[num1][j] + 1);\n                \n                \n//         for (auto &pair : dp) {\n//         if (pair.first != num1 && j > 0 && pair.second[j-1] > 0)     new_dp[j] = max(new_dp[j], pair.second[j-1] + 1);\n\n\n\n\n//             }\n//             }\n\n//                 for (int j = 0; j <= k; ++j) {\n//                 dp[num1][j] = max(dp[num1][j], new_dp[j]);\n//                 rr = max(rr, dp[num1][j]);\n//             }\n//         }\n\n\n\n            \n            \n\n//             if (dp.find(nums[i]) == dp.end())\n//                 dp[nums[i]] = vector<int>(k + 1, 0);\n\n//             for (auto& [num, lengths] : dp) {\n//                 for (int j = 0; j <= k; ++j) {\n//                     if (nums[i] == num) {\n//                         dp[num][j] = max(dp[num][j], (j == 0 ? 0 : lengths[j-1]) + 1);\n//                     } else {\n//                         if (j < k) {\n//                             dp[nums[i]][j+1] = max(dp[nums[i]][j+1], lengths[j] + 1);\n//                         }\n//                     }\n//                 }\n//             }\n//             for (int j = 0; j <= k; ++j) {\n//                 rr = max(rr, dp[nums[i]][j]);\n//             }\n//         }\n\n//         return rr;\n//     }\n\n       \n};",
    "submit_ts": 1717862011.0
}