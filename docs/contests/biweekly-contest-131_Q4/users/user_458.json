{
    "username": "LEARNER__0001",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nconst int N = 1e5 + 2;\nint a[N], tree[4 * N];\n\n// totally same as the subarray_sum but slight modification in the {tree[npde] = ..tree[2*node]..tree[2*node+1] part}\nvoid build(int node, int st, int en)\n{\n    if (st == en)\n    {\n        tree[node] = a[st];\n        return;\n    }\n\n    int mid = (st + en) / 2;\n    build(2 * node, st, mid);\n    build(2 * node + 1, mid + 1, en);\n\n    tree[node] = max(tree[2 * node], tree[2 * node + 1]);\n}\n\nint query(int node, int st, int en, int l, int r)\n{\n    if (st > r || en < l)\n    {\n        return 0;\n    }\n\n    if (l <= st && en <= r)\n    {\n        return tree[node];\n    }\n\n    int mid = (st + en) / 2;\n\n    int q1 = query(2 * node, st, mid, l, r);\n    int q2 = query(2 * node + 1, mid + 1, en, l, r);\n\n    return max(q1, q2);\n}\n\nvoid update(int node, int st, int en, int idx, int val)\n{\n    if (st == en)\n    {\n        a[st] = val;\n        tree[node] = val;\n        return;\n    }\n\n    int mid = (st + en) / 2;\n    if (idx <= mid)\n    {\n        update(2 * node, st, mid, idx, val);\n    }\n    else\n    {\n        update(2 * node + 1, mid + 1, en, idx, val);\n    }\n\n    tree[node] = max(tree[2 * node], tree[2 * node + 1]);\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int n = queries.size();\n        int maxi = 0;\n        for(int i=0;i<n;i++){\n            if(queries[i][0]==1){\n                maxi = max(maxi,queries[i][1]);\n            }\n            else{\n                maxi = max(maxi,queries[i][1]);\n                maxi = max(maxi,queries[i][2]);\n            }\n        }\n        for(int i=0;i<=maxi+900;i++){\n            tree[i] = 0;\n        }\n        for(int i=0;i<=maxi+900;i++){\n            a[i] = 0;\n        }\n        build(1, 0, maxi + 1000);\n        \n        vector<bool>res;\n        set<int>s;\n        s.insert(0);\n        s.insert(1e7);\n        \n        for(int i=0;i<n;i++){\n            if(queries[i][0] == 1){\n                auto it = s.upper_bound(queries[i][1]);\n                int seconddiff = -1;\n                if(*it != 1e7){\n                    seconddiff = *it - queries[i][1];\n                    update(1, 0, maxi + 900, *it, seconddiff);\n                }\n                it --;\n                int prev = *it;\n                int firstdiff = queries[i][1] - prev;\n                update(1, 0, maxi + 900, queries[i][1],firstdiff);\n                s.insert(queries[i][1]);\n            }\n            else{\n                int x = queries[i][1];\n                int sz = queries[i][2];\n                \n                \n                auto it = s.lower_bound(x);\n                if(*it == 1e7){\n                    it--;\n                    int left = *it;\n                    int possible = 0;\n                    int ans = query(1, 0, maxi + 900, 0, *it);\n                    // cout << ans << endl;\n                    if(ans >= sz){\n                        possible = 1;\n                    }\n                    int range = x - left;\n                    if(range >= sz){\n                        possible = 1;\n                    }\n                    if(possible){\n                        res.push_back(true);\n                    }\n                    else{\n                        res.push_back(false);\n                    }\n                }\n                else{\n                    it--;\n                    int possible = 0;\n                    int last_interval = x - *it;\n                    if(sz<=last_interval){\n                        possible = 1;\n                    }\n                    int ans = query(1, 0, maxi + 900, 0, *it);\n                    if(ans >= sz){\n                        possible = 1;\n                    }\n                    if(possible){\n                        res.push_back(true);\n                    }\n                    else{\n                        res.push_back(false);\n                    }\n                }\n            }\n            \n        }\n        // return ans;\n        return res;\n    }\n};",
    "submit_ts": 1716652336.0
}