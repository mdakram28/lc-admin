{
    "username": "kjniharika",
    "submission": "class Solution {\n    unordered_map<int, vector<vector<int>>> dp;\n    int fun(int k) {\n       \n        int ct=0;\n        \n        int i=0;\n        int x=1;\n        int f=0;\n        while(1)\n        {\n            if(x==k)ct++;\n            if(f==0)\n            {\n                 x += (1 << i);\n                i++;\n                f=1;\n            }\n            else{\n                x--;\n                f=0;\n            }\n            \n            if(x>(k+1))break;\n            \n        }\n        i=0;\n        x=0;\n        f=0;\n        while(1)\n        {\n            if(x==k)ct++;\n            if(f==0)\n            {\n               x += (1 << i);\n                i++;\n                f=1;\n            }\n            else{\n                x--;\n                f=0;\n            }\n            \n            if(x>(k+1))break;\n            \n        }\n        return ct;\n    }\n    int calcWays(int k, int cPos, int jSize, bool canJump) {\n        int x=0;\n        if (cPos > k + 5)\n            return 0;\n\n        if (jSize > 31)\n            return 0;\n\n        if (dp.count(cPos) && dp[cPos][jSize][canJump] != -1)\n            return dp[cPos][jSize][canJump];\n\n        int tWays = (cPos == k);\n        if (canJump)\n        {x++;\n            tWays += calcWays(k, cPos - 1, jSize, false);\n        }\n        \n        if (cPos + (1 << jSize) <= k + 1)\n            tWays += calcWays(k, cPos + (1 << jSize), jSize + 1, true);\n\n        dp[cPos].resize(32, vector<int>(2, -1));\n        x--;\n\n        return dp[cPos][jSize][canJump] = tWays;\n    }\n\npublic:\n    int waysToReachStair(int k) {\n        return calcWays(k, 1, 0, true);\n    }\n};\n\n\n\n",
    "submit_ts": 1716089634.0
}