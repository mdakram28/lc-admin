{
    "username": "sahasrad",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int n = board.length;\n        int m = board[0].length;\n        int[][] arr = new int[n][3];\n        for(int i = 0; i < n; i++) {\n            int finalRow = i;\n            PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.comparingInt((Integer j) -> board[finalRow][j]).reversed());\n            for(int j = 0; j < m; j++) {\n                pq.offer(j);\n            }\n            arr[i][0] = pq.poll();\n            arr[i][1] = pq.poll();\n            arr[i][2] = pq.poll();\n        }\n        long result = Long.MIN_VALUE;\n        for(int a = 0; a < n - 2; a++) {\n            for(int b = a + 1; b < n - 1; b++) {\n                for(int c = b + 1; c < n; c++) {\n                    for(int d : arr[a]) {\n                        for(int e : arr[b]) {\n                            if(d == e) continue;\n                            for(int f : arr[c]) {\n                                if(f == d || f == e) continue;\n                                long val1 = board[a][d];\n                                long val2 = board[b][e];\n                                long val3 = board[c][f];\n                                long sum = val1 + val2 + val3;\n                                if(sum > result) result = sum;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}",
    "submit_ts": "1723907183",
    "subm_id": "1359094500"
}