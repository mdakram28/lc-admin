{
    "username": "zsq007",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def getDiam(edges: List[List[int]]) -> int:\n            n = len(edges)+1\n            conn = [[] for _ in range(n)]\n            for a,b in edges:\n                conn[a].append(b)\n                conn[b].append(a)\n\n            def dfs(node: int, parent: int) -> (int, int):\n                res, l1, l2 = 0, 0, 0\n                for child in conn[node]:\n                    if child == parent: continue\n                    cL, cRes = dfs(child, node)\n                    if res < cRes:  res = cRes\n                    if l1 < cL:\n                        l1, l2 = cL, l1\n                    elif l2 < cL:\n                        l2 = cL\n                if res < l1+l2:\n                    res = l1 + l2\n                return l1+1, res\n\n            return dfs(0,-1)[1]\n\n        d1, d2 = getDiam(edges1), getDiam(edges2)\n        # print(d1, d2)\n        # if d1 == d2:\n        #     if d1&1:\n        #         return d1+2\n        #     else:\n        #         return d1+1\n        # if d1 < d2:\n        #     d1, d2 = d2, d1\n        \n        return max(d1,d2,(d1+1)//2+(d2+1)//2+1)",
    "submit_ts": "1719716998",
    "subm_id": "1304379698"
}