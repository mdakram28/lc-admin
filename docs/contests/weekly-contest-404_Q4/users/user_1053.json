{
    "username": "utsavkanani",
    "submission": "class Solution {\npublic:\n    int getcentroidlev(vector<vector<int>>&edges, int &ans){\n        int n = edges.size()+1;\n        vector<int>adj[n];\n        vector<int>deg(n); \n        for(int i = 0; i < edges.size(); i++){\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n            deg[edges[i][0]]++;\n            deg[edges[i][1]]++;\n        }\n        vector<int>level(n,0); \n        queue <int> q; \n        for (int i = 0; i < n; i++) {\n            if (deg[i] == 1) {\n                q.push(i);\n            }\n        }\n        int maxlevel = 0;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for(auto i : adj[node]) {\n                    deg[i]--;\n                    if (deg[i] == 1) {\n                        q.push(i);\n                        level[i] = level[node] + 1;\n                        maxlevel = max(maxlevel, level[i]);\n                    } \n                }\n            }\n        \n        // cout << maxlevel << endl;\n        // for(int i = 0; i < n; i++){\n        //     cout << level[i] << \" \";\n        // }\n        cout << endl;\n        int cnt = 0;\n        for(int i = 0; i < n; i++){\n            if(level[i] == maxlevel){\n                cnt++;\n            }\n        }\n        if(cnt > 1){\n            //cout << \"In this\" << endl;\n            ans = max(ans, 2*maxlevel+1);\n            return maxlevel+1;\n        }\n        ans = max(ans,2*maxlevel);\n        return maxlevel;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int ans = 0;\n        int lev1 = getcentroidlev(edges1,ans);\n        int lev2 = getcentroidlev(edges2,ans);\n        ans = max(ans,lev1+lev2+1);\n        return ans;\n    }\n};",
    "submit_ts": 1719719463.0
}