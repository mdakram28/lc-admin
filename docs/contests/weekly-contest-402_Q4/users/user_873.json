{
    "username": "mbfibat",
    "submission": "class Solution {\nprivate:\n    int n;\n    vector<int> BIT;\npublic:\n    void upd(int x, int v) {\n        for (; x <= n; x += x & (-x))\n            BIT[x] += v;\n    }\n    \n    int query(int x) {\n        int ans = 0;\n        for (; x > 0; x -= x & (-x))\n            ans += BIT[x];\n        return ans;\n    }\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        BIT.resize(n + 1, 0);\n        \n        vector<int> a(n + 1, 0);\n        for (int i = 1; i < n; i++)\n            a[i] = nums[i] - nums[i - 1];\n        vector<int> b(n + 1, 0);\n        for (int i = 0; i < n - 1; i++)\n            b[i] = (1LL * a[i] * a[i + 1]) < 0;\n        vector<int> c(n + 1, 0);\n        for (int i = 1; i < n - 1; i++) {\n            c[i] = (a[i] > 0) && b[i];\n            upd(i, c[i]);\n        }\n        \n        vector<int> ans;\n        for (vector<int>& q : queries) {\n            // cout << '?' << q[0] << '\\n';\n            if (q[0] == 1) {\n                int l = q[1], r = q[2];\n                // for (int i = l; i <= r; i++) {\n                //     cout << nums[i] << ' ' << a[i] << ' ' << b[i] << ' ' << c[i] << '\\n';\n                // }\n                l++; r--;\n                if (l > r) ans.push_back(0);\n                else ans.push_back(query(r) - query(l - 1));\n            } else {\n                int pos = q[1], val = q[2];\n                nums[pos] = val;\n            \n                if (pos > 0) {\n                    a[pos] = nums[pos] - nums[pos - 1];\n                    b[pos - 1] = (1LL * a[pos - 1] * a[pos]) < 0;\n                    b[pos] = (1LL * a[pos + 1] * a[pos]) < 0;\n                    if (pos - 1 > 0) {             \n                        int pre_val = c[pos - 1];\n                        c[pos - 1] = (a[pos - 1] > 0) && b[pos - 1];\n\n                        upd(pos - 1, -pre_val);\n                        upd(pos - 1, c[pos - 1]);\n                    }\n                }\n                if (pos < n - 1) {\n                    a[pos + 1] = nums[pos + 1] - nums[pos];\n                    b[pos] = (1LL * a[pos] * a[pos + 1]) < 0;\n                    if (pos + 1 < n - 1) {\n                        b[pos + 1] = (1LL * a[pos + 1] * a[pos + 2]) < 0;\n                        int pre_val = c[pos + 1];\n                        c[pos + 1] = (a[pos + 1] > 0) && b[pos + 1];\n\n                        upd(pos + 1, -pre_val);\n                        upd(pos + 1, c[pos + 1]);   \n                    }\n                }\n                if (pos > 0 && pos < n - 1) {\n                    int pre_val = c[pos];\n                    c[pos] = (a[pos] > 0) && b[pos];\n                    \n                    upd(pos, -pre_val);\n                    upd(pos, c[pos]);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718507167.0
}