{
    "username": "a7174812",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        const long long DMIN = -1e11;\n        long long ans = DMIN;\n        // int m = 500;\n        // int n = 500;\n        vector<vector<vector<long long>>> dp(m+2, vector<vector<long long>>(n+2, vector<long long>(3, DMIN)));\n        vector<vector<vector<long long>>> topleft(m+2, vector<vector<long long>>(n+2, vector<long long>(3, DMIN)));\n        vector<vector<vector<long long>>> topright(m+2, vector<vector<long long>>(n+2, vector<long long>(3, DMIN)));\n        vector<vector<vector<long long>>> bottomleft(m+2, vector<vector<long long>>(n+2, vector<long long>(3, DMIN)));\n        vector<vector<vector<long long>>> bottomright(m+2, vector<vector<long long>>(n+2, vector<long long>(3, DMIN)));\n        vector<vector<long long>> left(m+2, vector<long long>(n+2, DMIN));\n        vector<vector<long long>> right(m+2, vector<long long>(n+2, DMIN));\n        vector<vector<long long>> top(m+2, vector<long long>(n+2, DMIN));\n        vector<vector<long long>> bottom(m+2, vector<long long>(n+2, DMIN));\n        for(int i = 0; i < m; ++i){\n            for(int j = 0; j < n; ++j){\n                top[i+1][j+1] = max(top[i][j+1], (long long)board[i][j]);\n                left[i+1][j+1] = max(left[i+1][j], (long long)board[i][j]);\n            }\n        }\n        for(int i = m-1; i >= 0; --i){\n            for(int j = n-1; j >= 0; --j){\n                right[i+1][j+1] = max(right[i+1][j+2], (long long)board[i][j]);\n                bottom[i+1][j+1] = max(bottom[i+2][j+1], (long long)board[i][j]);\n            }\n        }\n        // print(top);\n        // print(left);\n        // print(right);\n        // print(bottom);\n        \n        for(int i = 0; i < m; ++i){\n            for(int j = 0; j < n; ++j){\n                topleft[i+1][j+1][0] = max({topleft[i+1][j][0], topleft[i][j+1][0], (long long)board[i][j]});\n                // if(i > 0 && j > 0)\n                topleft[i+1][j+1][1] = max({\n                    board[i][j] + topleft[i][j][0],\n                    top[i][j+1] + left[i+1][j],\n                    topleft[i+1][j][1],\n                    topleft[i][j+1][1]\n                });\n                topleft[i+1][j+1][2] = board[i][j] + topleft[i][j][1];\n                ans = max(ans, topleft[i+1][j+1][2]);\n            }\n        }\n        for(int i = 0; i < m; ++i){\n            for(int j = n-1; j >= 0; --j){\n                topright[i+1][j+1][0] = max({topright[i+1][j+2][0], topright[i][j+1][0], (long long)board[i][j]});\n                // if(i > 0 && j < n-1)\n                topright[i+1][j+1][1] = max({\n                    board[i][j] + topright[i][j+2][0],\n                    top[i][j+1] + right[i+1][j+2],\n                    topright[i][j+1][1],\n                    topright[i+1][j+2][1]\n                });\n                topright[i+1][j+1][2] = board[i][j] + topright[i][j+2][1];\n                ans = max(ans, topright[i+1][j+1][2]);\n            }\n        }\n        for(int i = m-1; i >= 0; --i){\n            for(int j = 0; j < n; ++j){\n                bottomleft[i+1][j+1][0] = max({bottomleft[i+1][j][0], bottomleft[i+2][j+1][0], (long long)board[i][j]});\n                // if(i < m-1 && j > 0)\n                bottomleft[i+1][j+1][1] = max({\n                    board[i][j] + bottomleft[i+2][j][0],\n                    bottom[i+2][j+1] + left[i+1][j],\n                    bottomleft[i+2][j+1][1],\n                    bottomleft[i+1][j][1]\n                });\n                bottomleft[i+1][j+1][2] = board[i][j] + bottomleft[i+2][j][1];\n                ans = max(ans, bottomleft[i+1][j+1][2]);\n            }\n        }\n        for(int i = m-1; i >= 0; --i){\n            for(int j = n-1; j >= 0; --j){\n                bottomright[i+1][j+1][0] = max({bottomright[i+1][j+2][0], bottomright[i+2][j+1][0], (long long)board[i][j]});\n                // if(i < m-1 && j < n-1)\n                bottomright[i+1][j+1][1] = max({\n                    board[i][j] + bottomright[i+2][j+2][0],\n                    bottom[i+2][j+1] + right[i+1][j+2],\n                    bottomright[i+2][j+1][1],\n                    bottomright[i+1][j+2][1]\n                });\n                bottomright[i+1][j+1][2] = board[i][j] + bottomright[i+2][j+2][1];\n                ans = max(ans, bottomright[i+1][j+1][2]);\n            }\n        }\n\n        // for(int i = 0; i < m; ++i){\n        //     for(int j = 0; j < n; ++j){\n        //         dp[i][j][0] = \n        //     }\n        // }\n        // printf(\"topleft,0\\n\");\n        // print(topleft,0);\n        // printf(\"topleft,1\\n\");\n        // print(topleft,1);\n        // printf(\"topright,0\\n\");\n        // print(topright,0);\n        // printf(\"topright,1\\n\");\n        // print(topright,1);\n        // printf(\"bottomleft, 0\\n\");\n        // print(bottomleft, 0);\n        // printf(\"bottomleft, 1\\n\");\n        // print(bottomleft, 1);\n        // printf(\"bottomright, 0\\n\");\n        // print(bottomright, 0);\n        // printf(\"bottomright, 1\\n\");\n        // print(bottomleft, 1);\n\n        return ans;\n    }\n};",
    "submit_ts": "1723910108",
    "subm_id": "1359217672"
}