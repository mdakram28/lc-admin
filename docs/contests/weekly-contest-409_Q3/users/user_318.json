{
    "username": "fan_hadoop",
    "submission": "/**\nqueries[i][0] < queries[i][1] < queries[j][0] <  queries[j][1]\nqueries[i][0] < queries[j][0] < queries[i][1] < queries[j][1].\nqueries[i][0] < queries[j][0] < queries[i][1] < queries[j][1].\n1. \u5305\u542b\u548c\u65e0\u4ea4\u96c6\n2. \u8fd9\u91cc\u5b58\u5728\u8fc7\u7a0b\u7684\u590d\u7528\n3. \u4e00\u4e2a\u6811\n4. \u5355\u5411\u7684\uff0c\u5176\u5b9e\u5c31\u662f\u52a0\u901f\n5. \u5bf9\u7ed3\u679c\u7684\u8d21\u732e\u662f\u786e\u5b9a\u7684\n6. \u9700\u8981\u77e5\u9053\u7684\u662f\u533a\u95f4\u5df2\u7ecf\u77e5\u9053\u7684\u8d21\u732e\u548c\u533a\u95f4\u957f\u5ea6\n7. \u6bcf\u6b21\u90fd\u9700\u8981merge\n*/\nclass Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] q) {\n        int m = q.length;\n        int[] ans = new int[m];\n        int tt = n-1;\n        for(int i = 0; i < m; i++){\n            int[] qq = q[i];\n            tt -= add(qq[0], qq[1]);\n            ans[i] = tt;\n        }\n        return ans;\n    }\n    TreeMap<Integer, int[]> road = new TreeMap<>(); // s,e, \n    public int add(int s, int e){\n        int v = e-s-1;// \u51cf\u5c11\u91cf\n        Integer a = road.floorKey(s);\n        if(a != null){\n            if(road.get(a)[0] >= e){\n                // System.out.println(\"==\");\n                return 0;\n            }\n        }\n        int d = 0;\n        while(true){\n            Integer b = road.ceilingKey(s);\n            if(b==null) break;\n            if(road.get(b)[0] > e) break;\n            d += road.get(b)[1];\n            \n            road.remove(b);\n        }\n        road.put(s, new int[]{e, v});\n        return v-d;\n    }\n}",
    "submit_ts": "1722741264",
    "subm_id": "552337097"
}