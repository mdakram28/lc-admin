{
    "username": "danzhi",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n            int n = nums.length;\n    List<List<Integer>> chunks = new ArrayList<>();\n    int ib = 0;\n    while (ib < n) {\n      while (ib < n && nums[ib] == target[ib]) {\n        ib++;\n      }\n      if (ib >= n) {\n        break;\n      }\n      List<Integer> chunk = new ArrayList<>();\n      int ie = ib + 1;\n      if (nums[ib] > target[ib]) {\n        while (ie < n && nums[ie] > target[ie]) {\n          ie++;\n        }\n        for (int i = ib; i < ie; i++) {\n          chunk.add(nums[i] - target[i]);\n        }\n      } else {\n        while (ie < n && nums[ie] < target[ie]) {\n          ie++;\n        }\n        for (int i = ib; i < ie; i++) {\n          chunk.add(target[i] - nums[i]);\n        }\n      }\n      chunks.add(chunk);\n      ib = ie;\n    }\n    if (chunks.isEmpty()) {\n      return 0;\n    }\n    long ans = 0;\n    for (List<Integer> chunk : chunks) {\n      int prev = 0;\n      long sum = 0;\n      for (int v : chunk) {\n        if (v > prev) {\n          sum += v - prev;\n        }\n        prev = v;\n      }\n      // System.out.format(\"  chunk: %s -> %d\\n\", Utils.traceIn(chunk), sum);\n      ans += sum;\n    }\n    return ans;\n    }\n}",
    "submit_ts": "1721532033",
    "subm_id": "1327975999"
}