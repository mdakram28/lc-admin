{
    "username": "harshit3001",
    "submission": "class Solution {\npublic:\n    struct TrieNode{\n        unordered_map<char,TrieNode*> child;\n        vector<pair<int,int>> end;\n    };\n\n    class Trie{\n        public:\n        TrieNode* root;\n        Trie() {root=new TrieNode();}\n\n        void in(string& w,int idx,int c){\n            TrieNode* node=root;\n            for(char ch:w){\n                if(!node->child.count(ch)){\n                    node->child[ch]= new TrieNode();\n                }\n                node=node->child[ch];\n            }\n            node->end.push_back({idx,c});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size();\n        vector<int> dp(n+1,INT_MAX);\n        dp[0]=0;\n        Trie t;\n        for(int i=0;i<words.size();i++){\n            t.in(words[i],i,costs[i]);\n        }\n\n        for(int i=0;i<n;i++){\n            if(dp[i]==INT_MAX) continue;\n            TrieNode* node=t.root;\n            for(int j=i;j<n;j++){\n                if(!node->child.count(target[j])) break;\n                node = node->child[target[j]];\n\n                for(auto &p:node->end){\n                    int wi=p.first;\n                    int wc=p.second;\n                    int l=words[wi].length();\n                    if(i+l<=n){\n                        dp[i+l] = min(dp[i+l], dp[i]+wc);\n                    }\n                }\n            }\n        }\n\n        return dp[n]==INT_MAX?-1:dp[n];  \n    }\n};",
    "submit_ts": "1720324603",
    "subm_id": "1312403572"
}