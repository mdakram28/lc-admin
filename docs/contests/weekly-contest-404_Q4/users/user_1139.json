{
    "username": "ash-0003",
    "submission": "class Solution {\npublic:\n    #define vl vector<int>\n#define vvl vector<vl>\n#define pb push_back\n#define ff first\n#define ss second\n#define pl pair<int, int>\n#define vpl vector<pl>\n#define fo(i, j, k) for(int i=j; i<k; i++)\n#define rfo(i, j, k) for(int i=j; i>=k; i--)\n#define all(x) x.begin(), x.end()\n#define srt(x) sort(all(x))\n#define srtg(x) sort(all(x), greater<int>())\n#define rev(x) reverse(all(x))\n#define lb(x, a) lower_bound(all(x), a)\n#define ub(x, a) upper_bound(all(x), a)\n#define lcm(a, b) ((a*b)/__gcd(a, b))\n#define no cout<<\"NO\"<<endl;\n#define yes cout<<\"YES\"<<endl;\n#define nor cout<<\"NO\"<<endl;return;\n#define yesr cout<<\"YES\"<<endl;return;\nint mod = 1e9+7;\n \nint power(int a, int b){\n    if(b==0){\n        return 1;\n    }\n    int val = power(a, b/2)%mod;\n    int val1 = (val * val)%mod;\n    \n    if(b%2){\n        return (a * val1)%mod;\n    }\n    return val1;\n}\n \nint inv(int a, int b){\n    return power(a, b-2);\n}\n \nvoid codeit(){\n    int n, k; cin >> n >> k;\n    vector<vector<int>> v(n, vector<int>(n));\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            cin >> v[i][j];\n        }\n    }\n \n    int cnt=0;\n    for(int i=0; i<n; i++){\n        for(int j=0; j<n; j++){\n            if(v[i][j] != v[n-i-1][n-j-1]){\n                cnt++;\n            }\n        }\n    }\n    cnt = cnt/2;\n    if(cnt > k){\n        nor;\n    }\n    if(n%2){\n        yesr;\n    }\n    if((k-cnt)%2 == 0){\n        yesr;\n    }\n    nor;\n}\n    vector<vector<int>> dp;\n    int kk;\n    int f(int idx, int prev, int k, vector<int>& nums){\n        int n = nums.size();\n        if(idx == n) return 0;\n        if(dp[idx][prev+1] != -1) return dp[idx][prev+1];\n        int a=0, b=0;\n        if((prev == -1) || ((nums[idx]+nums[prev])%kk == k)){\n            a = 1+f(idx+1, idx, k, nums);\n        }\n        b = f(idx+1, prev, k, nums);\n        return dp[idx][prev+1] = max(a, b);\n    }\n    \n    \n    int maxi=0;\n    int f(int node, int par, vector<vector<int>> &g){\n        priority_queue<int> pq;\n        for(int i:g[node]){\n            if(i == par) continue;\n            int val = f(i, node, g);\n            pq.push(val);\n            // if(pq.size() > 2){\n            //     pq.pop();\n            // }\n        }\n        int dia=0, mx=0, cnt=2;\n        while(cnt && pq.size()){\n            mx = max(mx, pq.top());\n            dia += pq.top();\n            pq.pop();\n            cnt--;\n        }\n        maxi = max(maxi, dia);\n        return 1+mx;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edge1, vector<vector<int>>& edge2) {\n        vector<vector<int>> graph1(edge1.size()+1);\n        vector<vector<int>> graph2(edge2.size()+1);\n\n        \n        for(int i=0; i<edge1.size(); i++){\n            graph1[edge1[i][0]].push_back(edge1[i][1]);\n            graph1[edge1[i][1]].push_back(edge1[i][0]);\n        }\n        \n        for(int i=0; i<edge2.size(); i++){\n            graph2[edge2[i][0]].push_back(edge2[i][1]);\n            graph2[edge2[i][1]].push_back(edge2[i][0]);\n        }\n        f(0, -1, graph1);\n        int a = maxi;\n        maxi = 0;\n        f(0, -1, graph2);\n        int b = maxi;\n        // cout <<a << \" \" << b << endl;\n        \n        return max({a, b, (1+a/2+b/2+a%2+b%2)});\n    }\n};",
    "submit_ts": 1719719851.0
}