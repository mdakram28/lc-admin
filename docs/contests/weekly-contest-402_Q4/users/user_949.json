{
    "username": "addusirmac",
    "submission": "    #include<ext/pb_ds/assoc_container.hpp> // Common file\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\ntypedef tree<int, null_type, less<int>, rb_tree_tag, tree_order_statistics_node_update> ordered_set;\n// find_by_order(k): iterator to the kth element (0- based indexing)\n// order_of_key(k) : number of items that are strictly smaller than item k \n// priority_queue <int, vector<int>, greater<int> > pq;\n//for multiset just use less_equal\nclass Solution {\npublic:\n    int dx[8]={0,0,1,-1,1,1,-1,-1};\nint dy[8]={1,-1,0,0,1,-1,-1,1};\n \nconst int N=1010;\n#define ll long long int\n#define pii pair<int,int>\n#define all(arr) arr.begin(),arr.end()\n#define fr first\n#define sc second\n#define pb push_back\n// const int INF= 1e10;\n// const int mod= 1e12+9;\n// const int mod= 1e9+7;\nconst int mod= 998244353;\n    \n\n    vector<int> countOfPeaks(vector<int>& arr, vector<vector<int>>& queries) {\n        ordered_set peaks;\n        int n=arr.size();\n        for(int i=1; i<n-1; i++){\n            if(arr[i]>arr[i-1] && arr[i]>arr[i+1])\n                peaks.insert(i);\n        }\n        // for(auto &x: peaks)cout<<x<<\" \";\n        // cout<<endl;\n        vector<int>ans;\n        \n        auto isPeak=[&](int x)->bool{\n          return (x>=1 && x<n-1 && arr[x]>arr[x+1] && arr[x]>arr[x-1]);  \n        };\n        \n        for(auto &vec: queries){\n            int typ= vec[0];\n            if(typ==1){\n                int l= vec[1], r= vec[2];\n                int curr= peaks.order_of_key(r)- peaks.order_of_key(l+1);\n                // cout<<\"for current ssubarray=\"<<l<<\" & \"<<r<<endl;\n                // for(auto &x: peaks)cout<<x<<\" \";\n                // cout<<endl;\n                // cout<<curr<<endl;\n                if(curr<=0)curr=0;\n                ans.pb(curr);\n            }\n            else{ \n                int pos= vec[1], val= vec[2];\n                bool ok=  isPeak(pos-1);\n                bool ok1= isPeak(pos);\n                bool ok2= isPeak(pos+1);\n                \n                arr[pos]= val;\n                if(isPeak(pos-1))peaks.insert(pos-1);\n                else if(ok)peaks.erase(pos-1);\n                \n                if(isPeak(pos))peaks.insert(pos);\n                else if(ok1)peaks.erase(pos);\n                \n                if(isPeak(pos+1))peaks.insert(pos+1);\n                else if(ok2)peaks.erase(pos+1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718508258.0
}