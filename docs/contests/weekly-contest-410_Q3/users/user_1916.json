{
    "username": "Jeevitha_Ramesh",
    "submission": "class Solution{\n    private static final int MOD=1000000007;\n    public int countOfPairs(int[] nums){\n        int n=nums.length;\n        long[][] dp=new long[n][101];\n        setupInitialValues(dp,nums);\n        processDP(dp,nums,n);\n        return(int)accumulateResults(dp,nums[n-1]);\n    }\n    private void setupInitialValues(long[][] dp,int[] nums){\n        for(int j=0;j<=nums[0];j++)dp[0][j]=1;\n    }\n    private void processDP(long[][] dp,int[] nums,int n){\n        for(int i=1;i<n;i++){\n            long[] prefixSums=calculatePrefixSums(dp[i-1]);\n            for(int j=0;j<=nums[i];j++){\n                int remaining=nums[i]-j;\n                if(remaining>=0&&remaining<=100){\n                    int limit=Math.min(j,nums[i-1]-remaining);\n                    dp[i][j]=(limit>=0?prefixSums[limit]:0)%MOD;\n                }\n            }\n        }\n    }\n    private long[] calculatePrefixSums(long[] prevDp){\n        long[] prefixSums=new long[101];\n        prefixSums[0]=prevDp[0];\n        for(int j=1;j<=100;j++)prefixSums[j]=(prefixSums[j-1]+prevDp[j])%MOD;\n        return prefixSums;\n    }\n    private long accumulateResults(long[][] dp,int lastElement){\n        long result=0;\n        for(int j=0;j<=lastElement;j++)result=(result+dp[dp.length-1][j])%MOD;\n        return result;\n    }\n}\n",
    "submit_ts": "1723346740",
    "subm_id": "1351584144"
}