{
    "username": "social_hackerearth",
    "submission": "class Solution {\n    private long countSubaaraysWithAndAtLeastK(int n, int[][] bits, int k) {\n        long subarrays = 0;\n        for (int i = 1; i <= n; i++) {\n            int low = i, high = n, idx = -1;\n            while (low <= high) {\n                int mid = (low + high) / 2;\n                int and = 0;\n                for (int j = 0; j < 30; j++) {\n                    if (bits[mid][j] - bits[i - 1][j] == mid - i + 1) {\n                        and |= (1 << j);\n                    }\n                }\n                if (and >= k) {\n                    idx = mid;\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n            if (idx != -1) {\n                subarrays += idx - i + 1;\n            }\n        }\n        return subarrays;\n    }\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        int[][] bits = new int[n + 1][30];\n        for (int i = 1; i <= n; i++) {\n            int val = nums[i - 1];\n            for (int j = 0; j < 30; j++) {\n                if ((val >> j & 1) != 0) {\n                    bits[i][j]++;\n                }\n            }\n            for (int j = 0; j < 30; j++) {\n                bits[i][j] += bits[i - 1][j];\n            }\n        }\n        return countSubaaraysWithAndAtLeastK(n, bits, k) - countSubaaraysWithAndAtLeastK(n, bits, k + 1);\n    }\n}",
    "submit_ts": "1720277518",
    "subm_id": "1311667466"
}