{
    "username": "Godly_Programmer",
    "submission": "#include <bits/stdc++.h>\n#include <chrono>\n#include <random>\nusing namespace std;\nusing namespace chrono;\n\n#define ll long long\n#define vi vector<ll>\n#define pi pair<ll, ll>\n#define vii vector<pi>\n#define vvi vector<vi>\n#define mpi map<ll, ll>\n#define all(x) (x).begin(), (x).end()\n#define rall(x) (x).rbegin(), (x).rend()\n#define popcnt(x) __builtin_popcount(x)\n#define eb(x) emplace_back(x)\n#define pb(x) push_back(x)\n#define ff first\n#define ss second\n#define speed cin.tie(NULL)->sync_with_stdio(false)\n#define rep(i, a, b) for (ll i = (ll)a; i < (ll)b; i++)\n#define reb(i, a, b) for (ll i = (ll)a; i >= (ll)b; i--)\nmt19937 generator(std::chrono::system_clock::now().time_since_epoch().count());\n\nconst int N = 1e5 + 2, MOD = 1e9 + 7;\nconst ll INF = 9e18;\nconst int MAX_INVERSIONS = 400;\n\nll getNumber(ll l, ll r) {\n    return uniform_int_distribution<ll>(l, r)(generator);\n}\n\nclass Solution {\npublic:\n    void calculatePermutations(int n, vvi& v, unordered_map<int, int>& mp) {\n        v[0][0] = 1;\n\n        rep(i, 1, n + 1) {\n            rep(inv, 0, MAX_INVERSIONS + 1) {\n                rep(newPos, 0, i) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) v[i][inv] = (v[i][inv] + v[i - 1][prevInv]) % MOD;\n                }\n            }\n\n            if (mp.count(i)) {\n                int targetInv = mp[i];\n                rep(inv, 0, MAX_INVERSIONS + 1) \n                    if (inv != targetInv) v[i][inv] = 0;\n            }\n        }\n    }\n\n    int getNumberOfPermutations(int n, vvi& v) {\n        ll result = 0;\n        rep(i, 0, MAX_INVERSIONS + 1) result = (result + v[n][i]) % MOD;\n        return (int)result;\n    }\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mp;\n        for (auto& i : requirements) mp[i[0] + 1] = i[1];\n        vvi v(n + 1, vi(MAX_INVERSIONS + 1, 0));\n        calculatePermutations(n, v, mp);\n        return getNumberOfPermutations(n, v);\n    }\n};\n\n",
    "submit_ts": "1719070749",
    "subm_id": "1296830792"
}