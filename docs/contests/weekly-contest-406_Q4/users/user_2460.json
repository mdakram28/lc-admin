{
    "username": "notadev09",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n \n        vector<pair<int, char>> cuts;\n\n       \n        for (int i = 0; i < horizontalCut.size(); i++) {\n            cuts.push_back({horizontalCut[i], 'H'});\n        }\n\n       \n        for (int i = 0; i < verticalCut.size(); i++) {\n            cuts.push_back({verticalCut[i], 'V'});\n        }\n\n        \n        sort(cuts.begin(), cuts.end(), greater<pair<int, char>>());\n\n        long long hSegments = 1; \n        long long vSegments = 1; \n        long long totalCost = 0;\n\n        \n        for (auto& cut : cuts) {\n            if (cut.second == 'H') {\n                \n                totalCost += cut.first * vSegments;\n                hSegments++;\n            } else {\n               \n                totalCost += cut.first * hSegments;\n                vSegments++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720926831",
    "subm_id": "1320297597"
}