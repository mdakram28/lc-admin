{
    "username": "owenhelios",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        m = len(grid)\n        n = len(grid[0])\n        @cache\n        def count(l0, r0, t0, b0):\n            l, t = n - 1, m - 1\n            r, b = 0, 0\n            empty = True\n            for i in range(t0, b0 + 1):\n                for j in range(l0, r0 + 1):\n                    if grid[i][j]:\n                        empty = False\n                        l = min(l, j)\n                        r = max(r, j)\n                        t = min(t, i)\n                        b = max(b, i)\n            return (r - l + 1) * (b - t + 1) if not empty else 1\n        ans = m * n\n        for y in range(n - 1):\n            for x in range(m - 1):\n                val = count(0, y, 0, x)\n                ans = min(ans, val + count(y + 1, n - 1, 0, x) + count(0, n - 1, x + 1, m - 1), \\\n                          val + count(y + 1, n - 1, 0, m - 1) + count(0, y, x + 1, m - 1), \\\n                          count(0, y, 0, m - 1) + count(y + 1, n - 1, 0, x) + count(y + 1, n - 1, x + 1, m - 1),\\\n                          count(0, n - 1, 0, x) + count(0, y, x + 1, m - 1) + count(y + 1, n - 1, x + 1, m - 1))\n            for y0 in range(y + 1, n - 1):\n                ans = min(ans, count(0, y, 0, m - 1) + count(y + 1, y0, 0, m - 1) + count(y0 + 1, n - 1, 0, m - 1))\n        for x in range(m - 1):\n            for x0 in range(x + 1, m - 1):\n                ans = min(ans, count(0, n - 1, 0, x) + count(0, n - 1, x + 1, x0) + count(0, n - 1, x0 + 1, m - 1))\n        return ans",
    "submit_ts": 1719113600.0
}