{
    "username": "varangrai",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums2, int k) {\n        vector<long long> nums; for(long long c: nums2) nums.push_back(c);\n        // if jth bit is unset in nums[i] and set in k then skip ith\n        //if jth bit in nums[i] is set in both nums[i] and k\n        // then dp[i][j] = 1 + dp[i-1][j] = x\n        // if jth bit in nums[i] is unset in both then do nothing\n        // if jth bit is set in nums[i] and unset in k then skip then y = dp[i][j]\n        int n = nums.size();\n        const int maxBits = 33;\n\n        vector<vector<int>> dp(n, vector<int> (maxBits, 0));\n\n        for(int i = 0; i<n;i++){\n            for(int j = 0;j<maxBits; j++){\n                if(i==0){\n                    dp[i][j] = (nums[i]>>j)&1;\n                }\n                else if((nums[i]>>j)&1){\n                    dp[i][j] = 1 + dp[i-1][j];\n                }\n            }\n        }\n\n        long long ans = 0;\n        for(int i = 0; i<n; i++){\n            if((nums[i]&k) >=k){\n                int currIdx = 0;\n                int lb = 0 , rb = i;\n                while((nums[i]>>currIdx) !=0){\n                    int currBitInNums = (nums[i]>>currIdx)&1;\n                    int currBitInK = (k>>currIdx)&1;\n\n                    if(currBitInK == 0 && currBitInNums==0){\n                        \n                    }\n                    else if(currBitInK == 1 && currBitInNums == 1){\n                        lb = max(lb, i - dp[i][currIdx] + 1);\n                    }\n                    else if(currBitInK == 0 && currBitInNums == 1){\n                        rb = min(rb, i - dp[i][currIdx]);\n                    }\n                    currIdx++;\n                }\n                if(lb<=rb){\n                    ans+=rb - lb + 1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279746",
    "subm_id": "1311763483"
}