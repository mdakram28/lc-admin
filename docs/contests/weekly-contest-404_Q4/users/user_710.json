{
    "username": "impiry",
    "submission": "public class Solution {\n    public int MinimumDiameterAfterMerge(int[][] edges1, int[][] edges2)\n    {\n        var (firstMax, firstSecondMax) = CalculateDiameter(edges1);\n        var (secondMax, secondSecondMax) = CalculateDiameter(edges2);\n\n        int result;\n\n        if (firstMax > secondMax)\n        {\n            if (firstSecondMax > secondMax)\n            {\n                result = firstMax + firstSecondMax;\n            }\n            else\n            {\n                result = 1 + firstMax + secondMax;\n            }\n        }\n        else\n        {\n            if (secondSecondMax > firstMax)\n            {\n                result = secondMax + secondSecondMax;\n            }\n            else\n            {\n                result = 1 + secondMax + firstMax;\n            }\n        }\n\n        return result;\n\n        (int, int) CalculateDiameter(int[][] edges)\n        {\n            if (edges.Length == 0)\n            {\n                return (0, 0);\n            }\n\n            var ranks = new HashSet<int>[edges.Length + 1];\n            for (int i = 0; i < ranks.Length; i++)\n            {\n                ranks[i] = new();\n            }\n\n            for (int i = 0; i < edges.Length; i++)\n            {\n                ranks[edges[i][0]].Add(edges[i][1]);\n                ranks[edges[i][1]].Add(edges[i][0]);\n            }\n\n            var queue = new Queue<int>();\n\n            for (int i = 0; i < ranks.Length; i++)\n            {\n                if (ranks[i].Count == 1)\n                {\n                    queue.Enqueue(i);\n                }\n            }\n\n            var result = 0;\n\n            while (queue.Count >= 2)\n            {\n                var size = queue.Count;\n\n                for (int i = 0; i < size; i++)\n                {\n                    var index = queue.Dequeue();\n\n                    foreach (var nextIndex in ranks[index])\n                    {\n                        ranks[nextIndex].Remove(index);\n\n                        if (ranks[nextIndex].Count == 1)\n                        {\n                            queue.Enqueue(nextIndex);\n                        }\n                    }\n                }\n\n                result++;\n            }\n\n            if (queue.Count == 1)\n            {\n                return (result, result);\n            }\n            else\n            {\n                return (result, result - 1);\n            }\n        }\n    }\n}",
    "submit_ts": "1719719920",
    "subm_id": "1304453985"
}