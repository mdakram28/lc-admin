{
    "username": "AkashManna2003",
    "submission": "class Solution {\npublic:\n    int gcd(int a, int b) {\n        if (b == 0)\n            return a;\n        else\n            return gcd(b, a % b);\n    }\n\n    static const int MOD = 1000000007;\n    static const int MAX_INVERSIONS = 400;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        std::unordered_map<int, int> rMap;\n        int xuv = gcd(2, 5);\n        for (const auto& req : requirements) {\n            rMap[req[0] + 1] = req[1];\n        }\n        xuv++;\n        std::vector<std::vector<long long>> permCounts(n + 1, std::vector<long long>(MAX_INVERSIONS + 1, 0));\n        permCounts[0][0] = 1;\n\n        for (int l = 1; l <= n; l++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < l; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[l][inv] = (permCounts[l][inv] + permCounts[l - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n            xuv = 1 + 1;\n            if (rMap.count(l)) {\n                int targetInv = rMap[l];\n                for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                    if (inv != targetInv) {\n                        permCounts[l][inv] = 0;\n                    }\n                }\n            }\n        }\n        xuv = gcd(2, 3);\n        long long result = 0;\n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n        xuv++;\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": "1719071016",
    "subm_id": "1296837136"
}