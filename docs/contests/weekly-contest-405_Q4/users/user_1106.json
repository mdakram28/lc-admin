{
    "username": "yinboshi13",
    "submission": "INF = float('inf')\n\nclass Trie:\n    def __init__(self, s, cost) -> None:\n        if s:\n            self.cost = INF\n            self.dic = {s[0]: Trie(s[1:], cost)}\n        else:\n            self.cost = cost\n            self.dic = {}\n\n    def add(self, s, cost):\n        if s:\n            char = s[0]\n            if char in self.dic:\n                self.dic[char].add(s[1:], cost)\n            else:\n                self.dic[char] = Trie(s[1:], cost)\n        else:\n            self.cost = min(cost, self.cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        t = Trie('', INF)\n        for w,c in zip(words, costs):\n            t.add(w,c)\n        del words\n\n        costs = [INF]*(n+1)\n        costs[0] = 0\n        for refIdx, c in enumerate(costs):\n            if c==INF:\n                continue\n            ptr = t\n            for idx in range(refIdx, n):\n                char = target[idx]\n                if char not in ptr.dic:\n                    break\n                ptr = ptr.dic[char]\n                if ptr.cost<INF:\n                    costs[idx+1] = min(costs[idx+1], c+ptr.cost)\n        ans = costs[-1]\n        return ans if ans<INF else -1",
    "submit_ts": "1720323744",
    "subm_id": "1312383000"
}