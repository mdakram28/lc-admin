{
    "username": "parasNAGPAL99",
    "submission": "class SegmentTree {\npublic : \n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    bool is_peak(int i) {\n        if (i <= 0 || i >= n - 1) return false;\n        return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(2 * node, start, mid);\n            build(2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = is_peak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node, start, mid, idx);\n            } else {\n                update(2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return 0;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node, start, mid, L, R);\n        int right_query = query(2 * node + 1, mid + 1, end, L, R);\n        return left_query + right_query;\n    }\n\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(1, 0, n - 1);\n    }\n\n    int range_query(int L, int R) {\n        return query(1, 0, n - 1, L, R);\n    }\n\n    void point_update(int idx, int value) {\n        nums[idx] = value;\n        for (int i = max(1, idx - 1); i <= min(n - 2, idx + 1); ++i) {\n            update(1, 0, n - 1, i);\n        }\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segmentTree(nums);\n        vector<int> result;\n\n      for (const auto& query : queries) {\n         if (query[0] == 1) {\n            int li = query[1];\n            int ri = query[2];\n            int temp = segmentTree.range_query(li, ri) ;\n            if(segmentTree.is_peak(li)){\n                temp-=1 ;\n            }\n            if(segmentTree.is_peak(ri)){\n                temp-=1 ;\n            } \n            temp = max(temp , 0); \n            result.push_back(temp); \n        } else if (query[0] == 2) {\n            int indexi = query[1];\n            int vali = query[2];\n            segmentTree.point_update(indexi, vali);\n        }\n      }\n\n       return result;\n    }\n};",
    "submit_ts": 1718508541.0
}