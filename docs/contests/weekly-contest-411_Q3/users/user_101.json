{
    "username": "garyjhu",
    "submission": "class Solution {\n    public String largestPalindrome(int n, int k) {\n        int mod = 0;\n        StringBuilder res = new StringBuilder();\n        for (int i = 0; i < n; i++) {\n            int add = 9;\n            if (i == 0 || i == n - 1) {\n                if (k % 2 == 0) add = 8;\n                else if (k == 5) add = 5;\n            }\n            else if (i == 1 || i == n - 2) {\n                if (k % 4 == 0) add = 8;\n            }\n            else if (i == 2 || i == n - 3) {\n                if (k == 8) add = 8;\n            }\n            res.append(add);\n            mod = (mod * 10 + add) % k;\n        }\n        if (n % 2 == 0) {\n            int mid = 11 % k;\n            for (int i = 2; i < n; i += 2) mid = (mid * 10) % k;\n            int subtract = 0;\n            while (mod != 0) {\n                subtract++;\n                mod = (mod - mid + k) % k;\n            }\n            res.replace(n / 2 - 1, n / 2 + 1, Integer.toString(Integer.parseInt(res.substring(n / 2 - 1, n / 2 + 1)) - subtract * 11));\n            return res.toString();\n        }\n        else {\n            int mid = 1;\n            for (int i = 1; i < n; i += 2) mid = (mid * 10) % k;\n            int subtract = 0;\n            while (mod != 0) {\n                subtract++;\n                mod = (mod - mid + k) % k;\n            }\n            res.replace(n / 2, n / 2 + 1, Integer.toString(Integer.parseInt(res.substring(n / 2, n / 2 + 1)) - subtract));\n            return res.toString();\n        }\n    }\n}\n",
    "submit_ts": "1723950428",
    "subm_id": "1359745711"
}