{
    "username": "TripathiTanmay",
    "submission": "class Solution {\n     public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Integer[] hCuts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] vCuts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n\n        Arrays.sort(hCuts, Collections.reverseOrder());\n        Arrays.sort(vCuts, Collections.reverseOrder());\n\n        int h = 0, v = 0;\n        int hPieces = 1, vPieces = 1;\n        long totalCost = 0;\n\n        while (h < hCuts.length && v < vCuts.length) {\n            if (hCuts[h] >= vCuts[v]) {\n                totalCost += (long) hCuts[h] * vPieces;\n                hPieces++;\n                h++;\n            } else {\n                totalCost += (long) vCuts[v] * hPieces;\n                vPieces++;\n                v++;\n            }\n        }\n\n        while (h < hCuts.length) {\n            totalCost += (long) hCuts[h] * vPieces;\n            h++;\n        }\n\n        while (v < vCuts.length) {\n            totalCost += (long) vCuts[v] * hPieces;\n            v++;\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720926038",
    "subm_id": "1320274060"
}