{
    "username": "aswinsampath",
    "submission": "class Solution {\npublic:\n    int bfs(const vector<vector<int>>& adjacencyList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> q;\n        vector<int> visited(totalNodes, 0);\n        q.push(startNode);\n        visited[startNode] = 1;\n        \n        while (!q.empty()) {\n            int currentNode = q.front();\n            q.pop();\n            for (int neighbor : adjacencyList[currentNode]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circlesData) {\n        vector<pair<pair<int, int>, int>> circles(circlesData.size());\n        vector<vector<int>> adjacencyList(circlesData.size() + 4);\n        int numberOfCircles = circlesData.size();\n        \n        \n        for (int i = 0; i < numberOfCircles; ++i) {\n            circles[i].first.first = circlesData[i][0];\n            circles[i].first.second = circlesData[i][1];\n            circles[i].second = circlesData[i][2];\n        }\n        \n        \n        for (int i = 0; i < numberOfCircles; ++i) {\n            int circleX = circles[i].first.first;\n            int circleY = circles[i].first.second;\n            int radius = circles[i].second;\n            \n          \n            if (circleX <= radius) {\n                adjacencyList[numberOfCircles].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles);\n            }\n            if (X - circleX <= radius) {\n                adjacencyList[numberOfCircles + 2].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 2);\n            }\n            if (circleY <= radius) {\n                adjacencyList[numberOfCircles + 1].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 1);\n            }\n            if (Y - circleY <= radius) {\n                adjacencyList[numberOfCircles + 3].push_back(i);\n                adjacencyList[i].push_back(numberOfCircles + 3);\n            }\n            \n            for (int j = i + 1; j < numberOfCircles; ++j) {\n                double distance = sqrt(pow(circleX - circles[j].first.first, 2) + pow(circleY - circles[j].first.second, 2));\n                int radiusSum = radius + circles[j].second;\n                if (radiusSum >= distance) {\n                    adjacencyList[i].push_back(j);\n                    adjacencyList[j].push_back(i);\n                }\n            }\n        }\n        \n    \n        int isPathBlocked = 0;\n        isPathBlocked = max(isPathBlocked, bfs(adjacencyList, numberOfCircles, numberOfCircles + 1, numberOfCircles + 2, numberOfCircles + 4));\n        isPathBlocked = max(isPathBlocked, bfs(adjacencyList, numberOfCircles + 3, numberOfCircles + 2, numberOfCircles + 1, numberOfCircles + 4)); \n        \n        if (isPathBlocked) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722136313",
    "subm_id": "1335730483"
}