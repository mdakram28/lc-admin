{
    "username": "Ayush__Mishra__",
    "submission": "#include <vector>\n#include <iostream>\nusing namespace std;\n\nconst int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<vector<int>>> dp(n, vector<vector<int>>(51, vector<int>(51, 0)));\n        \n        // Initialize for the first index\n        for (int j = 0; j <= nums[0]; ++j) {\n            int k = nums[0] - j;\n            if (k >= 0 && k <= 50) {\n                dp[0][j][k] = 1;\n            }\n        }\n        \n        // Fill DP table\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j <= nums[i]; ++j) {\n                int k = nums[i] - j;\n                if (k < 0 || k > 50) continue;\n                \n                // Compute the number of valid pairs ending at (i, j, k)\n                for (int prev_j = 0; prev_j <= nums[i-1]; ++prev_j) {\n                    int prev_k = nums[i-1] - prev_j;\n                    if (prev_k < 0 || prev_k > 50) continue;\n                    \n                    if (prev_j <= j && prev_k >= k) {\n                        dp[i][j][k] = (dp[i][j][k] + dp[i-1][prev_j][prev_k]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        // Sum up all valid configurations for the last index\n        int result = 0;\n        for (int j = 0; j <= nums[n-1]; ++j) {\n            int k = nums[n-1] - j;\n            if (k >= 0 && k <= 50) {\n                result = (result + dp[n-1][j][k]) % MOD;\n            }\n        }\n        \n        return result;\n    }\n};\n",
    "submit_ts": "1723345614",
    "subm_id": "1351559552"
}