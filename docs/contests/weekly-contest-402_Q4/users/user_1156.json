{
    "username": "heshan1234",
    "submission": "class Solution {\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int n = nums.length;\n        var peak = new boolean[n];\n        var bit = new BIT(100001);\n        for(int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i-1] && nums[i] > nums[i+1]) {\n                peak[i] = true;\n                bit.update(i, 1);\n            }\n        }\n        \n        List<Integer> result = new ArrayList<>();\n        for(var query : queries) {\n            if (query[0] == 1) {\n                int l = query[1];\n                int r = query[2];\n                if (r - l + 1 < 3) {\n                    result.add(0);\n                } else {\n                    // [l+1,r-1].\n                    result.add(bit.sum(r - 1) - bit.sum(l));\n                }\n            } else {\n                int i = query[1];\n                int v = query[2];\n                \n                // check i-1, i, i+1.\n                \n                if (i-2 >= 0 && nums[i-1] > nums[i-2] && nums[i-1] > v) { // will be peak.\n                    if (peak[i-1]) {\n                        // no change.\n                    } else {\n                        peak[i-1] = true;\n                        bit.update(i-1, 1);\n                    }\n                } else if (i-1 >= 0) { // will not be peak.\n                    if (peak[i-1]) {\n                        peak[i-1] = false;\n                        bit.update(i-1, -1);\n                    } else {\n                        // no change.\n                    }\n                }\n                \n                if (i-1 >= 0 && i+1 < n && v > nums[i-1] && v > nums[i+1]) {\n                    if (peak[i]) {\n                        //\n                    } else {\n                        peak[i] = true;\n                        bit.update(i, 1);\n                    }\n                } else {\n                    if (peak[i]) {\n                        peak[i] = false;\n                        bit.update(i, -1);\n                    } else {\n                        //\n                    }\n                }\n                \n                if (i+2 < n && nums[i+1] > v && nums[i+1] > nums[i+2]) {\n                    if (peak[i+1]) {\n                        // \n                    } else {\n                        peak[i+1] = true;\n                        bit.update(i+1, 1);\n                    }\n                } else if (i+1 < n) {\n                    if (peak[i+1]) {\n                        peak[i+1] = false;\n                        bit.update(i+1, -1);\n                    } else {\n                        //\n                    }\n                }\n                \n                nums[i] = v;\n            }\n        }\n        return result;\n    }\n    \n  static class BIT {\n\n    int n;\n\n    int[] a;\n\n    BIT(int n) {\n      this.n = n;\n      a = new int[n + 1]; // +1 is for 1-based index, the range is still [0, n).\n    }\n\n    void update(int i, int delta) { // a[i] += delta.\n      for(++i; i <= n; i += (i & -i)) {\n        a[i] += delta;\n      }\n    }\n\n    int sum(int i) { // sum[0,i].\n      int sum = 0;\n      for(++i; i > 0; i -= (i & -i)) {\n        sum += a[i];\n      }\n      return sum;\n    }\n  }\n}",
    "submit_ts": "1718508787",
    "subm_id": "1289691115"
}