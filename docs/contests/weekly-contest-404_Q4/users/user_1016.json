{
    "username": "eScaryNinja17",
    "submission": "class Solution {\npublic:\n    int calc(int node, int par, vector<int> adj[], int& ans) {\n        int maxi1 = -1, maxi2 = -1,res=0;\n        for (auto child : adj[node]) {\n            if (child != par) {\n                int cur = calc(child, node, adj, ans);\n                if (cur > maxi1) \n                    swap(maxi2,maxi1), maxi1 = cur;\n                 else if (cur > maxi2) \n                    maxi2 = cur;\n                \n            }\n        }\n        if (maxi1 == -1){\n            res=0;\n        }\n        else if (maxi2 == -1) {\n            ans = max(ans, 1 + maxi1);\n            res= 1 + maxi1;\n        }\n        else{\n            ans = max(ans, 2 + maxi1 + maxi2);\n            res=1 + maxi1;\n        }\n        return res;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int ans = 0;\n        auto dia_calc = [&](vector<vector<int>>& edges) {\n            int n = edges.size();\n            vector<int> adj[n + 2];\n            for (auto it : edges) {\n                adj[it[1]].push_back(it[0]);\n                adj[it[0]].push_back(it[1]);\n            }\n            int res = 0;\n            calc(0, -1, adj, res);\n            return res;\n        };\n        int d1 = dia_calc(edges1), d2 = dia_calc(edges2);\n        int h1 = (d1 + 1) / 2, h2 = (d2 + 1) / 2;\n        ans = max({d1, d2, 1 + h1 + h2});\n        return ans;\n    }\n};",
    "submit_ts": "1719718589",
    "subm_id": "1304421073"
}