{
    "username": "uf21-2",
    "submission": "class Solution:\n    def minimumCost(self, cake_height: int, cake_width: int, horizontal_cuts: List[int], vertical_cuts: List[int]) -> int:\n        # Sort the cuts in descending order\n        horizontal_cuts.sort(reverse=True)\n        vertical_cuts.sort(reverse=True)\n        \n        h_index, v_index = 0, 0\n        horizontal_slices, vertical_slices = 1, 1\n        total_cutting_cost = 0\n        \n        while h_index < len(horizontal_cuts) and v_index < len(vertical_cuts):\n            if horizontal_cuts[h_index] > vertical_cuts[v_index]:\n                total_cutting_cost += horizontal_cuts[h_index] * vertical_slices\n                horizontal_slices += 1\n                h_index += 1\n            else:\n                total_cutting_cost += vertical_cuts[v_index] * horizontal_slices\n                vertical_slices += 1\n                v_index += 1\n        \n        # Process remaining horizontal cuts\n        while h_index < len(horizontal_cuts):\n            total_cutting_cost += horizontal_cuts[h_index] * vertical_slices\n            h_index += 1\n        \n        # Process remaining vertical cuts\n        while v_index < len(vertical_cuts):\n            total_cutting_cost += vertical_cuts[v_index] * horizontal_slices\n            v_index += 1\n        \n        return total_cutting_cost",
    "submit_ts": "1720925433",
    "subm_id": "1320254585"
}