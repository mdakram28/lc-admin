{
    "username": "brycelo",
    "submission": "using ll = long long;\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& P) {\n        const int n = P.size();\n        vector<ll> suffixMinSum(n), suffixMaxSum(n), suffixMinDiff(n), suffixMaxDiff(n);\n        \n        ll minsum, maxsum, mindiff, maxdiff;\n        minsum = maxsum = P[n - 1][0] + P[n - 1][1];\n        mindiff = maxdiff = P[n - 1][0] - P[n - 1][1];\n        suffixMinSum[n - 1] = minsum;\n        suffixMaxSum[n - 1] = maxsum;\n        suffixMinDiff[n - 1] = mindiff;\n        suffixMaxDiff[n - 1] = maxdiff;\n        for (int i = n - 2; i >= 0; --i) {\n            ll sum = P[i][0] + P[i][1];\n            ll diff = P[i][0] - P[i][1];\n            minsum = min(minsum, sum);\n            maxsum = max(maxsum, sum);\n            mindiff = min(mindiff, diff);\n            maxdiff = max(maxdiff, diff);\n            suffixMinSum[i] = min(sum, suffixMinSum[i + 1]);\n            suffixMaxSum[i] = max(sum, suffixMaxSum[i + 1]);\n            suffixMinDiff[i] = min(diff, suffixMinDiff[i + 1]);\n            suffixMaxDiff[i] = max(diff, suffixMaxDiff[i + 1]);\n        }\n\n        ll res = INT_MAX;\n        minsum = maxsum = P[0][0] + P[0][1];\n        mindiff = maxdiff = P[0][0] - P[0][1];\n        for (int i = 1; i < n - 1; ++i) {\n            ll mx = max(max(maxsum, suffixMaxSum[i+1]) - min(minsum, suffixMinSum[i+1]),\n                     max(maxdiff, suffixMaxDiff[i+1]) - min(mindiff, suffixMinDiff[i+1]));\n\n            res = min(res, mx);\n            \n            ll sum = P[i][0] + P[i][1];\n            ll diff = P[i][0] - P[i][1];\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n        }\n        \n        res = min(res, calcWithout1thNode(P));\n        res = min(res, calcWithoutNthNode(P));\n        return res;\n        \n        // for (int i = 0; i < n; ++i) {\n        //     vector<vector<int>> P2;\n        //     for (int j = 0; j < n; ++j) {\n        //         if (i == j) continue;\n        //         P2.push_back(P[j]);\n        //     }\n        //     cout << \"i: \" << maxDist(P2) << endl;\n        // }\n        // cout << endl << calcWithout1thNode(P) << endl;\n        // cout << endl << calcWithoutNthNode(P) << endl;\n        // return 0;\n    }\n\nprivate:\n    ll calcWithout1thNode(vector<vector<int>>& P) {\n        const int n = P.size();\n        ll minsum, maxsum, mindiff, maxdiff;\n        minsum = maxsum = P[1][0] + P[1][1];\n        mindiff = maxdiff = P[1][0] - P[1][1];\n        for (int i = 2; i < n; i++) {\n            ll sum = P[i][0] + P[i][1];\n            ll diff = P[i][0] - P[i][1];\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n        }\n        return max(maxsum - minsum, maxdiff - mindiff);\n    }\n    \n    ll calcWithoutNthNode(vector<vector<int>>& P) {\n        const int n = P.size();\n        ll minsum, maxsum, mindiff, maxdiff;\n        minsum = maxsum = P[0][0] + P[0][1];\n        mindiff = maxdiff = P[0][0] - P[0][1];\n        for (int i = 1; i + 1 < n; i++) {\n            ll sum = P[i][0] + P[i][1];\n            ll diff = P[i][0] - P[i][1];\n            if (sum < minsum)\n                minsum = sum;\n            else if (sum > maxsum)\n                maxsum = sum;\n            if (diff < mindiff)\n                mindiff = diff;\n            else if (diff > maxdiff)\n                maxdiff = diff;\n        }\n        return max(maxsum - minsum, maxdiff - mindiff);\n    }\n    \n    // ll maxDist(vector<vector<int>>& P) {\n    //     const int n = P.size();\n    //     ll minsum, maxsum, mindiff, maxdiff;\n    //     minsum = maxsum = P[0][0] + P[0][1];\n    //     mindiff = maxdiff = P[0][0] - P[0][1];\n    //     for (int i = 1; i < n; i++) {\n    //         ll sum = P[i][0] + P[i][1];\n    //         ll diff = P[i][0] - P[i][1];\n    //         if (sum < minsum)\n    //             minsum = sum;\n    //         else if (sum > maxsum)\n    //             maxsum = sum;\n    //         if (diff < mindiff)\n    //             mindiff = diff;\n    //         else if (diff > maxdiff)\n    //             maxdiff = diff;\n    //     }\n    //     return max(maxsum - minsum, maxdiff - mindiff);\n    // }\n};"
}