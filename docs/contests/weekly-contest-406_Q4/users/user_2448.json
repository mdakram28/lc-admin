{
    "username": "kamboj_935",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& nums1, vector<int>& nums2) {\n        // Sort the cuts in descending order\n        sort(nums1.rbegin(), nums1.rend());\n        sort(nums2.rbegin(), nums2.rend());\n\n        long long cnt1 = 1, cnt2 = 1;  // Start with one horizontal and one vertical piece\n        int i = 0, j = 0;\n        long long ans = 0;  // Use long long to avoid overflow\n\n        // Iterate through both sorted cut lists\n        while (i < nums1.size() && j < nums2.size()) {\n            if (nums1[i] > nums2[j]) {\n                // Apply horizontal cut\n                ans += nums1[i] * cnt2;\n                cnt1++;\n                i++;\n            } else {\n                // Apply vertical cut\n                ans += nums2[j] * cnt1;\n                cnt2++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < nums1.size()) {\n            ans += nums1[i] * cnt2;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < nums2.size()) {\n            ans += nums2[j] * cnt1;\n            j++;\n        }\n\n        return ans;\n    }\n};\n\n",
    "submit_ts": "1720926222",
    "subm_id": "1320279606"
}