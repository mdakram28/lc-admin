{
    "username": "yogeshrathee",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int numElements, vector<vector<int>>& inversionConstraints) {\n        const int MODULO = 1'000'000'007;\n        const int MAX_INV_COUNT = 400;\n\n        unordered_map<int, int> constraintMap;\n        for (auto& constraint : inversionConstraints) {\n            constraintMap[constraint[0] + 1] = constraint[1];\n        }\n\n        vector<long> current(MAX_INV_COUNT + 1, 0);\n        vector<long> previous(MAX_INV_COUNT + 1, 0);\n        previous[0] = 1;\n\n        for (int permutationLength = 1; permutationLength <= numElements; permutationLength++) {\n            fill(current.begin(), current.end(), 0);\n            for (int invCount = 0; invCount <= MAX_INV_COUNT; invCount++) {\n                for (int newPosition = 0; newPosition < permutationLength && newPosition <= invCount; newPosition++) {\n                    current[invCount] = (current[invCount] + previous[invCount - newPosition]) % MODULO;\n                }\n            }\n            if (constraintMap.count(permutationLength)) {\n                int targetInvCount = constraintMap[permutationLength];\n                for (int invCount = 0; invCount <= MAX_INV_COUNT; invCount++) {\n                    if (invCount != targetInvCount) {\n                        current[invCount] = 0;\n                    }\n                }\n            }\n            swap(current, previous);\n        }\n\n        long result = 0;\n        for (auto& count : previous) {\n            result = (result + count) % MODULO;\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": 1719070557.0
}