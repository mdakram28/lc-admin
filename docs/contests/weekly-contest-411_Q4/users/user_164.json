{
    "username": "\u5bab\u6c34\u4e09\u53f62\ud83c\udf88",
    "submission": "    class Solution {\n\n        public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n\n            char[] str = s.toCharArray();\n            int n = str.length;\n\n            long[] arr = new long[n];\n//            long[] pre = new long[n + 1];\n\n            int[] start = new int[n];\n            int[] end = new int[n];\n\n            int n0 = 0, n1 = 0;\n            int j = 0;\n            for (int i = 0; i < n; i++) {\n                if (str[i] == '1') n1++;\n                else n0++;\n                while (j <= i && (n0 > k && n1 > k)) {\n                    if (str[j] == '1') n1--;\n                    else n0--;\n                    j++;\n                }\n                start[i] = j;\n            }\n\n            j = n - 1;\n            n0 = n1 = 0;\n            for (int i = n - 1; i >= 0; i--) {\n                if (str[i] == '1') n1++;\n                else n0++;\n                while (j >= i && (n0 > k && n1 > k)) {\n                    if (str[j] == '1') n1--;\n                    else n0--;\n                    j--;\n                }\n                end[i] = j;\n            }\n\n            int m = queries.length;\n            long[] res = new long[m];\n\n\n            int r = (int)Math.sqrt(n);\n\n            int[][] eq = new int[m][4];\n            for (int i = 0; i < m; i++) {\n                eq[i][0] = queries[i][0];\n                eq[i][1] = queries[i][1];\n                eq[i][2] = i;\n                eq[i][3] = queries[i][0] / r;\n            }\n\n            Arrays.sort(eq, (a, b) -> {\n                if (a[3] != b[3]) return Integer.compare(a[3], b[3]);\n                return Integer.compare(a[1], b[1]);\n            });\n\n            long acc = 1;\n            int x = 0, y = 0;\n            for (int[] e: eq) {\n                // \u6269\u5c55\n                while (y < e[1]) {\n                    y++;\n                    acc += y - Math.max(start[y], x) + 1;\n                }\n                while (x > e[0]) {\n                    x--;\n                    acc += Math.min(end[x], y) - x + 1;\n                }\n\n                while (y > e[1]) {\n                    acc -= y - Math.max(start[y], x) + 1;\n                    y--;\n                }\n                while (x < e[0]) {\n                    acc -= Math.min(end[x], y) - x + 1;\n                    x++;\n                }\n                res[e[2]] = acc;\n            }\n\n            return res;\n        }\n    }\n",
    "submit_ts": "1723950531",
    "subm_id": "556399634"
}