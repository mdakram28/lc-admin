{
    "username": "nvladgw",
    "submission": "class Solution {\n    fun countSubarrays(nums: IntArray, k: Int): Long {\n    var res = 0L\n    var start = 0\n    var minn = 0\n    val kBits = toBits(k)\n    val kZeros = kBits.count { it == 0 }\n    val zeroMap = IntArray(32)\n    for (i in 0 until nums.size){\n        if (nums[i] and k < k){\n            start = i + 1\n            minn = i + 1\n            for (j in 0 until 32) {\n                zeroMap[j] = 0\n            }\n        } else {\n            val next = toBits(nums[i])\n            for (j in 0 until 32){\n                if (next[j] == 0) zeroMap[j]++\n            }\n            val zeros = zeroMap.count {it > 0}\n            if (zeros == kZeros) {\n                var z = true\n                while (z) {\n                    val prev = toBits(nums[minn])\n                    for (j in 0 until 32){\n                        if (prev[j] == 0 && zeroMap[j] <= 1){\n                            z = false\n                            break\n                        }\n                    }\n                    if (z) {\n                        for (j in 0 until 32){\n                            if (prev[j] == 0 ){\n                                zeroMap[j]--\n                            }\n                        }\n                        minn++\n                    }\n                }\n                res += (minn - start + 1)\n            }\n        }\n    }\n    return res\n}\n\nfun toBits(num: Int): IntArray{\n    val res = IntArray(32)\n    var n = num\n    for (i in 0 until 32){\n        if (n == 0) break\n        res[i] = n % 2\n        n /= 2\n    }\n    return res\n}\n}",
    "submit_ts": "1720279311",
    "subm_id": "1311746152"
}