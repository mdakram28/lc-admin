{
    "username": "megurine",
    "submission": "#include <bits/stdc++.h>\n\n#ifdef MEGURINE\n#include \"algo/debug.h\"\n#include \"algo/debug_lc.h\"\n#else\n#define debug(...) 42\n#endif\n\nusing namespace std;\n\n#define itr(it) begin(it), end(it)\n\nint __fast_io__ = []() {\n    ios::sync_with_stdio(false);\n    cin.tie(nullptr);\n    cout.tie(nullptr);\n    return 0;\n}();\n\ntemplate<typename T>\nclass fenwick {\nprivate:\n    vector<T> fenw;\n    int n;\npublic:\n    explicit fenwick(int _n) : n(_n), fenw(_n) {\n        assert(_n >= 0);\n    }\n\n    void modify(int x, T v) {\n        for (int i = x; i < n; i |= i + 1)\n            fenw[i] += v;\n    }\n\n    T get(int x) {\n        T v{};\n        for (int i = x; i >= 0; i = (i & (i + 1)) - 1)\n            v += fenw[i];\n        return v;\n    }\n};\n\nusing i64 = int64_t;\n\nclass Solution {\npublic:\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        int n = colors.size();\n        vector<int> a = colors;\n        for (int i = 0; i < n; ++i) a.emplace_back(a[i]);\n        set<int> S;\n        for (int i = 0, p = a[0] ^ 1; i < n * 2; ++i) {\n            if ((a[i] + i) % 2 != p) {\n                S.emplace(i);\n                p ^= 1;\n            }\n        }\n        fenwick<i64> f1(n + 2), f2(n + 2);\n        S.emplace(n * 2);\n        auto Add = [&](int l, int r, int d) {\n            if (l >= n) return;\n            if (l == 0 && r >= n) {\n                f1.modify(1, d * (n + 1));\n                f1.modify(n + 1, -d * (n + 1));\n                f2.modify(1, d);\n                f2.modify(n + 1, -d);\n            } else {\n                int m = min(r - l, n);\n                f1.modify(1, d * (m + 1));\n                f1.modify(m + 1, -d * (m + 1));\n                f2.modify(1, d);\n                f2.modify(m + 1, -d);\n            }\n        };\n        for (int i = 0; i < n; ++i) {\n            if (S.contains(i)) {\n                int j = *S.upper_bound(i);\n                Add(i, j, 1);\n            }\n        }\n\n        auto Cut = [&](int i) {\n            if (i >= 0 && !S.contains(i)) {\n                auto ptr = S.upper_bound(i);\n                int l = *prev(ptr), r = *ptr;\n                Add(l, r, -1);\n                Add(l, i, 1), Add(i, r, 1);\n                S.insert(i);\n            }\n        };\n\n        auto Union = [&](int i) {\n            if (i + 1 < n * 2 && a[i] != a[i + 1]) {\n                int j = *next(S.upper_bound(i));\n                Add(i, i + 1, -1), Add(i + 1, j, -1);\n                S.erase(i + 1);\n                Add(i, j, 1);\n            }\n            if (i && a[i] != a[i - 1]) {\n                int r = *S.upper_bound(i), l = *prev(S.find(i));\n                Add(l, i, -1), Add(i, r, -1);\n                S.erase(i);\n                Add(l, r, 1);\n            }\n        };\n        vector<int> ans;\n        for (auto &q: queries) {\n            if (q[0] == 1) {\n                int k = q[1];\n                if (S.size() > 2) {\n                    if (a[n] != a[n - 1]) {\n                        Add(0, *S.upper_bound(0), -1);\n                    }\n                    ans.emplace_back(f1.get(k) - k * f2.get(k));\n                    if (a[n] != a[n - 1]) {\n                        Add(0, *S.upper_bound(0), 1);\n                    }\n                } else {\n                    ans.emplace_back(n);\n                }\n            } else {\n                int idx = q[1], nv = q[2];\n                if (nv == a[idx]) continue;\n                Cut(idx), Cut(idx + 1), Cut(idx + n), Cut(idx + n + 1);\n                a[idx] = a[idx + n] = nv;\n                Union(idx), Union(idx + n);\n            }\n        }\n        return ans;\n    }\n};\n\n#ifdef MEGURINE\n\nint main() {\n    freopen(\"../input.txt\", \"r\", stdin);\n    freopen(\"../output.txt\", \"w\", stdout);\n    clock_t start = clock();\n    int T;\n    cin >> T;\n    getchar();\n    while (T--) {\n        Solution sol;\n        test<vector<int>, vector<vector<int>>>(sol, &Solution::numberOfAlternatingGroups);\n    }\n\n    clock_t end = clock();\n    cout << \"\\nRunning Time: \" << (double) (end - start) / CLOCKS_PER_SEC * 1000 << \"ms\" << endl;\n    return 0;\n}\n\n#endif\n",
    "submit_ts": "1722743133",
    "subm_id": "1343785108"
}