{
    "username": "antgwy",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        sort(horizontalCuts.begin(), horizontalCuts.end(), greater<int>());\n        sort(verticalCuts.begin(), verticalCuts.end(), greater<int>());\n\n        long long totalCost = 0;\n        int i = 0, j = 0;\n        int currentHorizontalSegments = 1;\n        int currentVerticalSegments = 1;\n\n        while (i < m - 1 || j < n - 1) {\n            if (i < m - 1 && (j >= n - 1 || horizontalCuts[i] > verticalCuts[j])) {\n                totalCost += (long long) horizontalCuts[i] * currentVerticalSegments;\n                ++currentHorizontalSegments;\n                ++i;\n            } else {\n                totalCost += (long long) verticalCuts[j] * currentHorizontalSegments;\n                ++currentVerticalSegments;\n                ++j;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925744",
    "subm_id": "546441642"
}