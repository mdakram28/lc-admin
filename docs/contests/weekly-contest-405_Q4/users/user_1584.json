{
    "username": "yanru_hack",
    "submission": "\nclass TrieNode {\npublic:\n    vector<TrieNode*> children;\n    int minCost;\n    \n    TrieNode() : children(26, nullptr), minCost(INT_MAX) {}\n};\nclass Solution {\n    private:\n    void buildTrie(TrieNode* root, const vector<string>& words, const vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->children[c - 'a']) {\n                    node->children[c - 'a'] = new TrieNode();\n                }\n                node = node->children[c - 'a'];\n            }\n            node->minCost = min(node->minCost, costs[i]);\n        }\n    }\npublic:\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n     int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        TrieNode* root = new TrieNode();\n        buildTrie(root, words, costs);\n         if (target.length() == 1) {\n        int minCost = INT_MAX;\n        for (int i = 0; i < words.size(); ++i) {\n            if (words[i] == target) {\n                minCost = min(minCost, costs[i]);\n            }\n        }\n        return minCost == INT_MAX ? -1 : minCost;\n    }\n    for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            \n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children[target[j] - 'a']) break;\n                \n                node = node->children[target[j] - 'a'];\n              \n                if (node->minCost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n            \n            // if (dp[i + 1] == INT_MAX) return -1;  // Early stopping\n        }\n        \n        return dp[n] == INT_MAX? -1 : dp[n];\n        \n    }\n};\n",
    "submit_ts": "1720324213",
    "subm_id": "1312394214"
}