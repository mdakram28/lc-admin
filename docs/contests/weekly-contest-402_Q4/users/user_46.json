{
    "username": "tmoux",
    "submission": "// From Atcoder ACL\nnamespace atcoder { //{{{\n  // @param n `0 <= n`\n  // @return minimum non-negative `x` s.t. `n <= 2**x`\n  int ceil_pow2(int n) {\n    int x = 0;\n    while ((1U << x) < (unsigned int)(n)) x++;\n    return x;\n  }\n\n  template <class S, S (*op)(S, S), S (*e)()> struct segtree {\n    public:\n      segtree() : segtree(0) {}\n      explicit segtree(int n) : segtree(std::vector<S>(n, e())) {}\n      explicit segtree(const std::vector<S>& v) : _n(int(v.size())) {\n        log = ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        for (int i = 0; i < _n; i++) d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n          update(i);\n        }\n      }\n\n      void set(int p, S x) {\n        assert(0 <= p && p < _n);\n        p += size;\n        d[p] = x;\n        for (int i = 1; i <= log; i++) update(p >> i);\n      }\n\n      S get(int p) const {\n        assert(0 <= p && p < _n);\n        return d[p + size];\n      }\n\n      S prod(int l, int r) const {\n        r++; // make range [l, r] inclusive.\n        assert(0 <= l && l <= r && r <= _n);\n        S sml = e(), smr = e();\n        l += size;\n        r += size;\n\n        while (l < r) {\n          if (l & 1) sml = op(sml, d[l++]);\n          if (r & 1) smr = op(d[--r], smr);\n          l >>= 1;\n          r >>= 1;\n        }\n        return op(sml, smr);\n      }\n\n      S all_prod() const { return d[1]; }\n\n      template <bool (*f)(S)> int max_right(int l) const {\n        return max_right(l, [](S x) { return f(x); });\n      }\n      template <class F> int max_right(int l, F f) const {\n        assert(0 <= l && l <= _n);\n        assert(f(e()));\n        if (l == _n) return _n;\n        l += size;\n        S sm = e();\n        do {\n          while (l % 2 == 0) l >>= 1;\n          if (!f(op(sm, d[l]))) {\n            while (l < size) {\n              l = (2 * l);\n              if (f(op(sm, d[l]))) {\n                sm = op(sm, d[l]);\n                l++;\n              }\n            }\n            return l - size;\n          }\n          sm = op(sm, d[l]);\n          l++;\n        } while ((l & -l) != l);\n        return _n;\n      }\n\n      template <bool (*f)(S)> int min_left(int r) const {\n        return min_left(r, [](S x) { return f(x); });\n      }\n      template <class F> int min_left(int r, F f) const {\n        assert(0 <= r && r <= _n);\n        assert(f(e()));\n        if (r == 0) return 0;\n        r += size;\n        S sm = e();\n        do {\n          r--;\n          while (r > 1 && (r % 2)) r >>= 1;\n          if (!f(op(d[r], sm))) {\n            while (r < size) {\n              r = (2 * r + 1);\n              if (f(op(d[r], sm))) {\n                sm = op(d[r], sm);\n                r--;\n              }\n            }\n            return r + 1 - size;\n          }\n          sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n      }\n\n    private:\n      int _n, size, log;\n      std::vector<S> d;\n\n      void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n  };\n} // namespace atcoder }}}\nusing atcoder::segtree;\n\nnamespace Seg {\n  int op(int a, int b) { return a + b; }\n\n  int e() { return 0; }\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int N = nums.size();\n        auto is_peak = [&](int i) -> bool {\n            if (i == 0 || i == N-1) return false;\n            else return nums[i] > nums[i-1] && nums[i] > nums[i+1];\n        };\n        \n        segtree<int, Seg::op, Seg::e> seg(N);\n        for (int i = 0; i < N; i++) seg.set(i, is_peak(i));\n        \n        vector<int> ans;\n        for (auto v: queries) {\n            int t = v[0];\n            if (t == 1) {\n                int l = v[1];\n                int r = v[2];\n                \n                if (l == r) ans.push_back(0);\n                else {\n                    int x = seg.prod(l, r);\n                    if (is_peak(l)) x--;\n                    if (is_peak(r)) x--;\n                    ans.push_back(x);\n                }\n            }\n            else {\n                int i = v[1];\n                int val = v[2];\n                \n                nums[i] = val;\n                \n                for (int j = i-1; j <= i+1; j++) {\n                    if (0 <= j && j < N) {\n                        seg.set(j, is_peak(j));\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718505978.0
}