{
    "username": "prabhxs",
    "submission": "class BITclass{\npublic:\n    vector<int> BITree;\n    int n;\n    BITclass(vector<int> arr, int n){\n        BITree.resize(n + 10);\n        this->n = n + 9;\n        for(int i = 0; i <= n; i++) BITree[i] = 0;\n        for(int i = 0; i < n; i++){\n            updateBIT(i, arr[i]);\n        }\n    }\n    int getSum(int index){ \n        int sum = 0;\n        index = index + 1; \n        while (index > 0) \n        { \n            sum += BITree[index]; \n            index -= index & (-index); \n        } \n        return sum; \n    } \n    void updateBIT(int index, int val) \n    { \n        // cout << index << \" and \" << val << endl;\n        index = index + 1; \n        while (index <= n) \n        { \n            BITree[index] += val; \n            index += index & (-index); \n        } \n    } \n    int query(int l, int r){\n        // cout << l << \" to \" << r << \" => \"; \n        if( r - l + 1 <= 2 ) return 0;\n        return getSum(r - 1) - getSum(l);\n    }\n};\n\nclass Solution {\nprivate:\n\n\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        vector<int> arr(n, 0);\n        for(int i = 1; i < n - 1; i++)\n            arr[i] = ((nums[i - 1] < nums[i]) && (nums[i + 1] < nums[i]));\n        // for(auto &a : arr)\n        //     cout << a << \" \";\n        // cout << endl;\n        BITclass bit(arr, n);\n        // for(int i = 0; i < n; i++){\n        //     for(int j = i; j < n; j++){\n        //         cout << bit.query(i, j) << endl;\n        //     }\n        // }\n        // cout << bit.query(1, 4);\n        // cout << endl;\n        vector<int> rArr;\n        for(auto &a : queries){\n            int type = a[0];\n            if( type == 2 ){\n                int idx = a[1];\n                nums[idx] = a[2];\n                int curr, prev, next;\n                // if prevVal is affected\n                curr = idx - 1, prev = idx - 2, next = idx;\n                if( prev >= 0 && next < n ){\n                    int prevArrVal = arr[curr];\n                    arr[curr] = nums[prev] < nums[curr] && nums[curr] > nums[next];\n                    int newArrVal = arr[curr];\n                    // cout << \"checkPrev \" << curr << \" == \" << prevArrVal << \" \" << newArrVal << endl;\n                    if( prevArrVal == newArrVal ){\n\n                    }\n                    else{\n                        if( prevArrVal == 1 )\n                            bit.updateBIT(curr, -1);\n                        else\n                            bit.updateBIT(curr, 1);\n                    }\n                }\n                // if nextValue is affected\n                curr = idx + 1, prev = idx, next = idx + 2;\n                if( prev >= 0 && next < n ){\n                    int prevArrVal = arr[curr];\n                    arr[curr] = nums[prev] < nums[curr] && nums[curr] > nums[next];\n                    int newArrVal = arr[curr];\n                    // cout << \"checkNext \" << curr << \" == \" << prevArrVal << \" \" << newArrVal << endl;\n                    if( prevArrVal == newArrVal ){\n\n                    }\n                    else{\n                        if( prevArrVal == 1 )\n                            bit.updateBIT(curr, -1);\n                        else\n                            bit.updateBIT(curr, 1);\n                    }\n                }\n                // if current is afffected\n                curr = idx, prev = idx - 1, next = idx + 1;\n                if( prev >= 0 && next < n ){\n                    int prevArrVal = arr[curr];\n                    arr[curr] = nums[prev] < nums[curr] && nums[curr] > nums[next];\n                    int newArrVal = arr[curr];\n                    if( prevArrVal == newArrVal ) {\n\n                    }\n                    else{\n                        if( prevArrVal == 1 )\n                            bit.updateBIT(curr, -1);\n                        else\n                            bit.updateBIT(curr, 1);\n                    }\n                }\n            }else{\n                int l = a[1];\n                int r = a[2];\n                rArr.push_back(bit.query(l, r));\n            }\n            // for(auto &a : arr)\n            //     cout << a << \" \";\n            // cout << \" => \";\n            // for(auto &a : nums)\n            //     cout << a << \" \";\n            // cout << endl;\n            // for(int i = 0; i < n; i++){\n            //     for(int j = i; j < n; j++){\n            //         cout << bit.query(i, j) << endl;\n            //     }\n            // }\n            // cout << endl;\n        }\n        return rArr;\n    }\n};\n",
    "submit_ts": 1718508955.0
}