{
    "username": "Remineva",
    "submission": "class UF:\n    def __init__(self, n):\n        self.root = [i for i in range(n)]\n        self.rank = [1] * n\n    \n    def find(self, x):\n        t = x\n        while self.root[x] != x:\n            x = self.root[x]\n        while t != x:\n            t, self.root[t] = self.root[t], x\n        return x\n    \n    def union(self, x, y):\n        X = self.find(x)\n        Y = self.find(y)\n        if X != Y:\n            if self.rank[X] > self.rank[Y]:\n                self.root[Y] = X\n            elif self.rank[X] < self.rank[Y]:\n                self.root[X] = Y\n            else:\n                self.root[X] = Y\n                self.rank[Y] += 1\n                \n    def connected(self, x, y):\n        return self.find(x) == self.find(y)\n                \nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        uf = UF(n)\n        A = []\n        B = []\n        for i, t in enumerate(circles):\n            x, y, r = t\n            if r >= x or r >= abs(Y - y):\n                A.append(i)\n            if r >= y or r >= abs(X - x):\n                B.append(i)\n        for i in range(n - 1):\n            x1, y1, r1 = circles[i]\n            for j in range(i + 1, n):\n                x2, y2, r2 = circles[j]\n                if (x1-x2) ** 2 + (y1-y2) ** 2 <= (r1+r2) ** 2:\n                    uf.union(i, j)\n        for i in A:\n            for j in B:\n                if uf.connected(i, j):\n                    return False\n        return True\n            ",
    "submit_ts": "1722138104",
    "subm_id": "1335782208"
}