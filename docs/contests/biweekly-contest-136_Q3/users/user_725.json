{
    "username": "pcwuu",
    "submission": "class Solution {\npublic:\n    \n    int solve(int r, int c, int cnt, vector<vector<int>> &grid, vector<vector<vector<int>>> &dp) {\n        int m = grid.size(), n = grid[0].size();\n        if(r == (m + 1) / 2) {\n            if(cnt == 0)\n                return 0;\n            return 200001;\n        }\n        \n        if(dp[r][c][cnt] != 200001)\n            return dp[r][c][cnt];\n        \n        int cntOne = 0;\n        int rr = m - 1 -r, cc = n - 1 - c;\n        int nextr, nextc;\n        if(c + 1 < (n + 1) / 2) {\n            nextr = r;\n            nextc = c + 1;\n        }\n        else {\n            nextr = r + 1;\n            nextc = 0;\n        }\n        if(r != rr && c != cc) {\n            cntOne = grid[r][c] + grid[r][cc] + grid[rr][c] + grid[rr][cc];\n            dp[r][c][cnt] = min(dp[r][c][cnt], 4 - cntOne + solve(nextr, nextc, (cnt + 4) % 4, grid, dp));\n            dp[r][c][cnt] = min(dp[r][c][cnt], cntOne + solve(nextr, nextc, cnt % 4, grid, dp));\n        }\n        else if(r != rr) {\n            cntOne = grid[r][c] + grid[rr][c];\n            dp[r][c][cnt] = min(dp[r][c][cnt], 2 - cntOne + solve(nextr, nextc, (cnt + 2) % 4, grid, dp));\n            dp[r][c][cnt] = min(dp[r][c][cnt], cntOne + solve(nextr, nextc, cnt % 4, grid, dp));\n        }\n        else if(c != cc) {\n            cntOne = grid[r][c] + grid[r][cc];\n            dp[r][c][cnt] = min(dp[r][c][cnt], 2 - cntOne + solve(nextr, nextc, (cnt + 2) % 4, grid, dp));\n            dp[r][c][cnt] = min(dp[r][c][cnt], cntOne + solve(nextr, nextc, cnt % 4, grid, dp));            \n        }\n        else {\n            cntOne = grid[r][c];\n            dp[r][c][cnt] = min(dp[r][c][cnt], 1 - cntOne + solve(nextr, nextc, (cnt + 1) % 4, grid, dp));\n            dp[r][c][cnt] = min(dp[r][c][cnt], cntOne + solve(nextr, nextc, cnt % 4, grid, dp));            \n        }\n        return dp[r][c][cnt];\n            \n    }\n    \n    \n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        vector<vector<vector<int>>> dp((m + 1) / 2, vector<vector<int>>((n + 1) / 2, vector<int>(4, 200001)));\n        return solve(0, 0, 0, grid, dp);\n    }\n};\n\n/*\ndp[i][j][cntOne % 4]\n*/",
    "submit_ts": "1722698264",
    "subm_id": "1343175000"
}