{
    "username": "krismandanka",
    "submission": "class Solution {\npublic:\n    \n    struct TrieNode {\n\n    TrieNode* childNode[26];\n\n    bool wordEnd;\n    int cost;\n\n    TrieNode()\n    {\n        cost=-1;\n        wordEnd = false;\n        for (int i = 0; i < 26; i++) {\n            childNode[i] = NULL;\n        }\n    }\n};\n\nvoid insert_key(TrieNode* root, string& key,int costKey)\n{\n    \n    TrieNode* currentNode = root;\n\n    for (auto c : key) {\n\n        \n        if (currentNode->childNode[c - 'a'] == NULL) {\n\n            \n            TrieNode* newNode = new TrieNode();\n\n           \n            currentNode->childNode[c - 'a'] = newNode;\n        }\n\n        \n        currentNode = currentNode->childNode[c - 'a'];\n    }\n    if(currentNode->cost==-1){\n        currentNode->cost = costKey;\n        \n    }\n    else{\n        currentNode->cost = min(costKey,currentNode->cost);\n    }\n\n   \n    currentNode->wordEnd = 1;\n}\n\nbool search_key(TrieNode* root, string& key)\n{\n   \n    TrieNode* currentNode = root;\n\n    \n    for (auto c : key) {\n\n        \n        if (currentNode->childNode[c - 'a'] == NULL) {\n\n           \n            return false;\n        }\n\n       \n        currentNode = currentNode->childNode[c - 'a'];\n    }\n\n    return (currentNode->wordEnd == true);\n}\n       \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        int n= target.size();\n        for (int i = 0; i < words.size(); i++) {\n            insert_key(root, words[i],costs[i]);\n        }\n        \n        vector<int> ans(n+1,INT_MAX);\n        ans[0]=0;\n        \n        for (int i=0;i<n;i++) {\n            if (ans[i]==INT_MAX){\n                continue;\n            } \n            TrieNode* node = root;\n            for (int j=i;j<n;j++) {\n                if (node->childNode[target[j]-'a']==nullptr) break;\n                node = node->childNode[target[j]-'a'];\n                if (node->cost != -1) {\n                    ans[j+1]=min(ans[j+1],ans[i]+node->cost);\n                }\n            }\n        }\n        \n        if(ans[n]==INT_MAX){\n            return -1;\n        }\n        return ans[n];\n        \n\n    }\n};",
    "submit_ts": "1720323841",
    "subm_id": "1312385310"
}