{
    "username": "focused-svvart22pp",
    "submission": "class Solution {\npublic:\n    template <class __Tp>\n    struct fenwick : std::vector<__Tp> {\n        size_t n;\n        fenwick(const size_t &_n) : std::vector<__Tp>(_n + 1), n(_n) {}\n        fenwick() {}\n        void update(const int &x, const __Tp &val) {\n            for (int i = x + 1; i <= n; i += i & -i) {\n                (*this)[i] += val;\n            }\n        }\n        __Tp query(const int &x, __Tp res = 0) {\n            for (int i = x + 1; i; i -= i & -i) {\n                res += (*this)[i];\n            }\n            return res;\n        }\n    };\n    vector<int> numberOfAlternatingGroups(vector<int>& a, vector<vector<int>>& query) {\n        vector<int> ans;\n        int n = a.size();\n        set<int> block;\n        fenwick<int> T(n + 1);\n        fenwick<int> S(n + 1);\n        auto add_range = [&](int x, int val) {\n            S.update(x, val * x);\n            T.update(x, val);\n        };\n        add_range(n, 1);\n        auto add = [&](int x) {\n            if (block.empty()) {\n                add_range(n, -1);\n                add_range(n - 1, 1);\n            } else {\n                if (block.size() == 1) {\n                    add_range(n - 1, -1);\n                    int pos = *block.begin();\n                    if (pos < x) {\n                        add_range(x - pos, 1);\n                        add_range(pos + n - x, 1);\n                    } else {\n                        add_range(pos - x, 1);\n                        add_range(x + n - pos, 1);\n                    }\n                } else {\n                    auto it = block.lower_bound(x);\n                    if (it == block.end()) {\n                        int l = *prev(it), r = *block.begin() + n;\n                        add_range(r - l, -1);\n                        add_range(r - x, 1);\n                        add_range(x - l, 1);\n                    } else {\n                        if (it == block.begin()) {\n                            int l = *prev(block.end()), r = *it;\n                            add_range(r + n - l, -1);\n                            add_range(r - x, 1);\n                            add_range(x + n - l, 1);\n                        } else {\n                            int l = *prev(it), r = *it;\n                            add_range(r - l, -1);\n                            add_range(r - x, 1);\n                            add_range(x - l, 1);\n                        }\n                    }\n                }\n            }\n            block.insert(x);\n        };\n        auto del = [&](int x) {\n            if (block.size() == 1) {\n                add_range(n - 1, -1);\n                add_range(n, 1);\n            } else {\n                if (block.size() == 2) {\n                    add_range(n - 1, 1);\n                    int pos = *block.begin();\n                    if (pos == x) {\n                        pos = *prev(block.end());\n                    }\n                    if (pos < x) {\n                        add_range(x - pos, -1);\n                        add_range(pos + n - x, -1);\n                    } else {\n                        add_range(pos - x, -1);\n                        add_range(x + n - pos, -1);\n                    }\n                } else {\n                    auto it = block.lower_bound(x);\n                    if (next(it) == block.end()) {\n                        int l = *prev(it), r = *block.begin() + n;\n                        add_range(r - l, 1);\n                        add_range(r - x, -1);\n                        add_range(x - l, -1);\n                    } else {\n                        if (it == block.begin()) {\n                            int l = *prev(block.end()), r = *next(it);\n                            add_range(r + n - l, 1);\n                            add_range(r - x, -1);\n                            add_range(x + n - l, -1);\n                        } else {\n                            int l = *prev(it), r = *next(it);\n                            add_range(r - l, 1);\n                            add_range(r - x, -1);\n                            add_range(x - l, -1);\n                        }\n                    }\n                }\n            }\n            block.erase(x);\n        };\n        for (int i = 0; i < n; i++) {\n            if (a[(i + n - 1) % n] == a[i]) {\n                add(i);\n            }\n        }\n        for (auto &i : query) {\n            int sz = i.size();\n            if (sz == 2) {\n                if (block.size() == 1 && n % 2 == 1) {\n                    ans.push_back(n - i[1] + 1);\n                } else if (block.empty() && n % 2 == 0) {\n                    ans.push_back(n);\n                } else {\n                    int tot = S.query(n) - S.query(i[1] - 1);\n                    int val = T.query(n) - T.query(i[1] - 1);\n                    ans.push_back(tot - val * (i[1] - 1));\n                }\n            } else {\n                int x = i[1];\n                if (a[(x + n - 1) % n] == a[x]) {\n                    del(x);\n                }\n                if (a[x] == a[(x + 1) % n]) {\n                    del((x + 1) % n);\n                }\n                a[x] = i[2];\n                if (a[(x + n - 1) % n] == a[x]) {\n                    add(x);\n                }\n                if (a[x] == a[(x + 1) % n]) {\n                    add((x + 1) % n);\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741735",
    "subm_id": "552340121"
}