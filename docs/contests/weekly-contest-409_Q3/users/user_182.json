{
    "username": "VILLANOVA_ECON",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        from sortedcontainers import SortedList\n        \n        sorted_list = SortedList(list(range(n)))\n        \n        ans = []\n        for u,v in queries:\n            index = sorted_list.bisect_left(u+1)\n            while index < len(sorted_list) and sorted_list[index] < v:\n                sorted_list.discard(sorted_list[index])\n            ans.append(len(sorted_list)-1)\n        return ans\n#         import collections\n#         ans = []\n        \n#         graph = collections.defaultdict(list)\n#         for i in range(n-1):\n#             graph[i].append(i+1)\n            \n#         def bfs(node,graph,N):\n#             queue = collections.deque()\n#             queue.append((0,node))\n#             seen = [False]*(N)\n#             best_dist = [math.inf]*N\n#             best_dist[node] = 0\n#             while queue:\n#                 dist, node = queue.popleft()\n#                 if dist == best_dist[node]:\n#                     best_dist[node] = dist\n#                     for child in graph[node]:\n#                         if not seen[child]:\n#                             best_dist[child] = dist+1\n#                             seen[child] = True\n#                             queue.append((dist+1,child))\n#             return best_dist\n        \n#         best_dist = bfs(0,graph,n)\n        \n#         def bfs2(u,v,graph,N,best_dist):\n#             if best_dist[u]+1 >= best_dist[v]:\n#                 return best_dist\n#             else:\n#                 best_dist[v] = best_dist[u]+1\n#             queue = collections.deque()\n#             queue.append((best_dist[u]+1,v))\n#             while queue:\n#                 dist, node = queue.popleft()\n#                 if dist == best_dist[node]:\n#                     best_dist[node] = dist\n#                     for child in graph[node]:\n#                         if dist+1 < best_dist[child]:\n#                             best_dist[child] = dist+1\n#                             queue.append((dist+1,child))\n#             return best_dist\n            \n#         best_dist = bfs(0,graph,n)\n#         ans = []\n#         for u,v in queries:\n#             graph[u].append(v)\n#             best_dist = bfs2(u,v,graph,n,best_dist)\n#             ans.append(best_dist[-1])            \n#         return ans",
    "submit_ts": "1722740263",
    "subm_id": "1343715346"
}