{
    "username": "10Ari",
    "submission": "#include <vector>\n#include <map>\n#include <utility>\n#include <algorithm>\n#include <numeric>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        // Create a map to represent the duplicate grid\n        map<pair<int, int>, int> gridMap;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j < m; ++j) {\n                gridMap[{i, j}] = grid[i][j];\n            }\n        }\n        \n        int ans = 0;\n        \n        set<int> st;\n        for(int i=0;i<15;i++){\n            st.insert(i);\n        }\n    \n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                vector<int> elements = {\n                    gridMap[{i, j}],\n                    gridMap[{n - i - 1, j}],\n                    gridMap[{i, m - j - 1}],\n                    gridMap[{n - i - 1, m - j - 1}]\n                };\n                \n                int ones = accumulate(elements.begin(), elements.end(), 0);\n                \n                ans += min(ones, 4 - ones);\n            }\n        }\n        \n        int possible = 0;\n        int count = 0;\n        \n        if (n % 2 != 0) {\n            int mid_row = n / 2;\n            for (int j = 0; j < m / 2; ++j) {\n                if (gridMap[{mid_row, j}] != gridMap[{mid_row, m - j - 1}]) {\n                    ++ans;\n                    ++possible;\n                } else {\n                    if (gridMap[{mid_row, j}] == 1) {\n                        ++count;\n                    }\n                }\n            }\n        }\n        if (m % 2 != 0) {\n            int mid_col = m / 2;\n            for (int i = 0; i < n / 2; ++i) {\n                if (gridMap[{i, mid_col}] != gridMap[{n - i - 1, mid_col}]) {\n                    ++ans;\n                    ++possible;\n                } else {\n                    if (gridMap[{i, mid_col}] == 1) {\n                        ++count;\n                    }\n                }\n            }\n        }\n        if (n % 2 != 0 && m % 2 != 0 && gridMap[{n / 2, m / 2}] == 1) {\n            ++ans;\n        }\n        \n        if (possible == 0 && count % 2 != 0) {\n            ans += 2;\n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": "1722699840",
    "subm_id": "1343223997"
}