{
    "username": "testdrive789",
    "submission": "class Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        jumps = list(range(n)) \n        ret = []\n        \n        for q in queries:\n            f, t = q\n            lidx = bisect.bisect_left(jumps, f) \n            ridx = bisect.bisect_left(jumps, t)\n            \n            # print(f\"q = {q}, jumps = {jumps}, lidx = {lidx}, ridx = {ridx}\")\n            \n            if lidx < len(jumps) and lidx >= 0 and jumps[lidx] == f and ridx < len(jumps) and ridx >= 0 and jumps[ridx] == t:\n                # remove f + 1 to t - 1\n                del jumps[lidx+1: ridx]\n                # jumps = jumps[:lidx+1] + jumps[ridx:]\n            # print(f\"    post jumps = {jumps}, jmp = {len(jumps)}\")\n            ret.append(len(jumps) - 1)\n            # print(f\"jumps = {jumps} after bridge {q}\")\n        \n        return ret",
    "submit_ts": "1722743840",
    "subm_id": "1343800867"
}