{
    "username": "penciy",
    "submission": "public class Solution {\n    public int minimumDistance(int[][] points) {\n        Arrays.sort(points, (o1, o2) -> o1[0] - o2[0]);\n        PriorityQueue<int[]> pq1 = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);\n        PriorityQueue<int[]> pq2 = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);\n        pq1.offer(new int[]{points[0][0]+points[0][1], 0});\n        pq2.offer(new int[]{points[0][0]-points[0][1], 0});\n        int maxDist = Integer.MIN_VALUE;\n        int[] maxIds = new int[2];\n        for(int i = 1;i < points.length;++i){\n            int[] point = points[i];\n            int x = point[0], y = point[1];\n            int dist1 = (x+y) - pq1.peek()[0];\n            int dist2 = (x-y) - pq2.peek()[0];\n            if(dist1 > maxDist || dist2 > maxDist){\n                maxDist = Math.max(dist1, dist2);\n                maxIds[0] = dist1 > dist2 ? pq1.peek()[1] : pq2.peek()[1];\n                maxIds[1] = i;\n            }\n            pq1.offer(new int[]{x+y, i});\n            pq2.offer(new int[]{x-y, i});\n        }\n        int maxDist1 = Integer.MIN_VALUE;\n        pq1 = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);\n        pq2 = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);\n        for(int i = 0;i < points.length;++i){\n            if(i == maxIds[0]) continue;\n            int[] point = points[i];\n            int x = point[0], y = point[1];\n            if(!pq1.isEmpty()) {\n                int dist1 = (x + y) - pq1.peek()[0];\n                int dist2 = (x - y) - pq2.peek()[0];\n                if (dist1 > maxDist1 || dist2 > maxDist1) {\n                    maxDist1 = Math.max(dist1, dist2);\n                }\n            }\n            pq1.offer(new int[]{x+y, i});\n            pq2.offer(new int[]{x-y, i});\n        }\n        int maxDist2 = Integer.MIN_VALUE;\n        pq1 = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);\n        pq2 = new PriorityQueue<>((o1, o2) -> o1[0] - o2[0]);\n        for(int i = 0;i < points.length;++i){\n            if(i == maxIds[1]) continue;\n            int[] point = points[i];\n            int x = point[0], y = point[1];\n            if(!pq1.isEmpty()) {\n                int dist1 = (x + y) - pq1.peek()[0];\n                int dist2 = (x - y) - pq2.peek()[0];\n                if (dist1 > maxDist2 || dist2 > maxDist2) {\n                    maxDist2 = Math.max(dist1, dist2);\n                }\n            }\n            pq1.offer(new int[]{x+y, i});\n            pq2.offer(new int[]{x-y, i});\n        }\n        return Math.min(maxDist1, maxDist2);\n    }\n}"
}