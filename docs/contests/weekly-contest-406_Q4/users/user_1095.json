{
    "username": "jason7708",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n                int h_add = 1, v_add = 1;\n        ranges::sort(horizontalCut, greater<>());\n        ranges::sort(verticalCut, greater<>());\n        int i = 0, j = 0;\n        long long cost = 0;\n        while(i < horizontalCut.size() || j < verticalCut.size()) {\n            long long left = i < horizontalCut.size() ? horizontalCut[i] : 0;\n            long long right = j < verticalCut.size() ? verticalCut[j] : 0;\n            if(left > right) {\n                cost += left * h_add;\n                v_add++;\n                i++;\n            }\n            else {\n                cost += right * v_add;\n                h_add++;\n                j++;\n            }\n            // cout << i << ' ' << j << ' ' << h_add << ' ' << v_add << '\\n';\n        }\n        return cost;\n    }\n};",
    "submit_ts": "1720925758",
    "subm_id": "1320265242"
}