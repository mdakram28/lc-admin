{
    "username": "leolee2020",
    "submission": "class Solution {\npublic:\nstruct Node {\n    bool hasWord;\n    int cost;\n    vector<Node *> next;\n    Node() : hasWord(false), cost(0), next(vector<Node *>(26)) {}\n};\n\nint minimumCost(string target, vector<string> &words, vector<int> &costs) {\n    Node *root = new Node();\n    for (int i = 0; i < words.size(); i++) {\n        Node *ptr = root;\n        for (int j = words[i].size() - 1; j >= 0; j--) {\n            int idx = words[i][j] - 'a';\n            if (ptr->next[idx] == nullptr)\n                ptr->next[idx] = new Node();\n            ptr = ptr->next[idx];\n        }\n        if (ptr->hasWord)\n            ptr->cost = min(ptr->cost, costs[i]);\n        else {\n            ptr->hasWord = true;\n            ptr->cost = costs[i];\n        }\n    }\n\n    int n = target.size();\n    vector<int> dp(n + 1, -1);\n    dp[0] = 0;\n    for (int i = 1; i <= n; i++) {\n        Node *ptr = root;\n        for (int j = i; j > 0 && ptr; j--) {\n            int idx = target[j - 1] - 'a';\n            ptr = ptr->next[idx];\n            if (ptr && ptr->hasWord && dp[j - 1] >= 0) {\n                if (dp[i] < 0)\n                    dp[i] = ptr->cost + dp[j - 1];\n                else\n                    dp[i] = min(dp[i], ptr->cost + dp[j - 1]);\n            }\n        }\n    }\n\n    return dp.back();\n}\n};",
    "submit_ts": "1720322271",
    "subm_id": "1312345357"
}