{
    "username": "Fasdr",
    "submission": "class Solution {\n    private int m = 31;\n    \n    public int minimumDifference(int[] nums, int k) {\n        int res = Integer.MAX_VALUE;\n        int n = nums.length;\n        \n        int[] bits = new int[m];\n        int i = 0;\n        for (int j = 0; j < n; j++) {\n            add(bits, nums[j]);\n            int cur = val(bits, j - i + 1);\n            res = Math.min(res, Math.abs(k - cur));\n            while (i < j && k > cur) {\n                remove(bits, nums[i]);\n                i++;\n                cur = val(bits, j - i + 1);\n                res = Math.min(res, Math.abs(k - cur));\n            }   \n        }\n        return res;\n    }\n    \n    private void add(int[] bits, int num) {\n        for (int i = 0; i < m; i++) {\n            if ((num & 1) == 1)\n                bits[i]++;\n            num = num >> 1;\n        }\n    }\n    \n    private void remove(int[] bits, int num) {\n        for (int i = 0; i < m; i++) {\n            if ((num & 1) == 1)\n                bits[i]--;\n            num = num >> 1;\n        }\n    }\n    \n    private int val(int[] bits, int total) {\n        int mult = 1;\n        int res = 0;\n        for (int i = 0; i < m; i++) {\n            if (bits[i] == total)\n                res += mult;\n            mult = mult * 2;\n        }\n        return res;\n    }\n    \n}",
    "submit_ts": 1717298502.0
}