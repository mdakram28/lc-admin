{
    "username": "Gaurav Kumar Patel",
    "submission": "// // class Solution {\n// // public:\n// //     string solve(string res, int k, int l, int r) {\n// //         if (stoi(res) % k == 0) return res;\n// //         if (l < 0) return \"0\";\n\n// //         string s1 = res, s2 = res;\n\n// //         // Decrease the digits at positions l and r\n// //         s1[l] = s1[l] - 1;\n// //         s1[r] = s1[r] - 1;\n// //         string ans1 = solve(s1, k, l - 1, r + 1);\n\n// //         // Restore the original digits for the second case\n// //         s2[l] = s2[l] + 1;\n// //         s2[r] = s2[r] + 1;\n// //         string ans2 = solve(s2, k, l - 1, r + 1);\n\n// //         return max(ans1, ans2);\n// //     }\n\n// //     string largestPalindrome(int n, int k) {\n// //         string res(n, '9');\n// //         int l, r;\n// //         if (n % 2 == 0) {\n// //             l = n / 2 - 1;\n// //             r = n / 2;\n// //         } else {\n// //             l = n / 2;\n// //             r = n / 2;\n// //         }\n\n// //         string ans = solve(res, k, l, r);\n// //         return ans;\n// //     }\n// // };\n\n\n\nclass Solution {\npublic:\n    char dp[100001][7];\n    char dp_non_zero[100001][7];\n    int next_mod[100001][7];\n    int non_zero_next_mod[100001][7];\n    \n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        \n        if (k == 2) {\n            if (n == 1) {\n                return \"8\";\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            return result;\n        }\n        \n        if (k == 5) {\n            if (n == 1) {\n                return \"5\";\n            }\n            string result(n, '9');\n            result[0] = '5';\n            result[n - 1] = '5';\n            return result;\n        }\n\n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            return result;\n        }\n        \n        if (k == 8) {\n            if (n <= 5) {\n                return string(n, '8');\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            result[1] = '8';\n            result[n - 2] = '8';\n            result[2] = '8';\n            result[n - 3] = '8';\n            return result;\n        }\n        \n        if (k == 6) {\n            if (n == 1) {\n                return \"6\";\n            }\n            if (n == 2) {\n                return \"66\";\n            }\n            if (n == 3) {\n                return \"888\";\n            }\n            string result(n, '9');\n            result[0] = '8';\n            result[n - 1] = '8';\n            if (n % 2 == 1) {\n                result[n / 2] = '8';\n            } else {\n                result[n / 2] = '7';\n                result[(n / 2) - 1] = '7';\n            }\n            return result;\n        }\n\n        if (k == 7) {\n            if (n == 1) {\n                return \"7\";\n            }\n            \n            memset(dp, 0, sizeof(dp));\n            memset(dp_non_zero, 0, sizeof(dp_non_zero));\n\n            for (int digit = 1; digit < 10; ++digit) {\n                dp[1][digit % 7] = '0' + digit;\n                if (digit != 0) {\n                    dp_non_zero[1][digit % 7] = '0' + digit;\n                }\n            }\n\n            int base_mod = 10 % 7;\n            for (int length = 0; length <= 100000 - 2; ++length) {\n                for (int mod = 0; mod < 7; ++mod) {\n                    if ((length == 0 && mod != 0) || (length > 0 && dp[length][mod] == 0)) {\n                        continue;\n                    }\n                    for (int digit = 9; digit >= 0; --digit) {\n                        int new_mod = (base_mod * digit + digit + mod * 10) % 7;\n                        if (dp[length + 2][new_mod] == 0 || dp[length + 2][new_mod] < '0' + digit) {\n                            dp[length + 2][new_mod] = '0' + digit;\n                            next_mod[length + 2][new_mod] = mod;\n                        }\n                        if (digit == 0) continue;\n                        if (dp_non_zero[length + 2][new_mod] == 0 || dp_non_zero[length + 2][new_mod] < '0' + digit) {\n                            dp_non_zero[length + 2][new_mod] = '0' + digit;\n                            non_zero_next_mod[length + 2][new_mod] = mod;\n                        }\n                    }\n                }\n                base_mod = (base_mod * 10) % 7;\n            }\n\n            int current_length = n;\n            string front_half(1, dp_non_zero[current_length][0]);\n            string back_half(1, dp_non_zero[current_length][0]);\n            int current_mod = non_zero_next_mod[current_length][0];\n            current_length -= 2;\n            while (current_length > 0) {\n                front_half += dp[current_length][current_mod];\n                if (current_length > 1) {\n                    back_half += dp[current_length][current_mod];\n                } else {\n                    break;\n                }\n                current_mod = next_mod[current_length][current_mod];\n                current_length -= 2;\n            }\n            reverse(back_half.begin(), back_half.end());\n            return front_half + back_half;\n        }\n\n        return \"\";\n    }\n};\n\n\n\n// class Solution {\n// public:\n//     char dp[100001][7];\n//     char dp_non_zero[100001][7];\n//     int next_mod[100001][7];\n//     int non_zero_next_mod[100001][7];\n\n//     string largestPalindrome(int n, int k) {\n//         if (k == 1 || k == 3 || k == 9) {\n//             return string(n, '9');\n//         }\n        \n//         switch (k) {\n//             case 2: return handleK2(n);\n//             case 5: return handleK5(n);\n//             case 4: return handleK4(n);\n//             case 8: return handleK8(n);\n//             case 6: return handleK6(n);\n//             case 7: return handleK7(n);\n//             default: return \"\";\n//         }\n//     }\n\n// private:\n//     string handleK2(int n) {\n//         if (n == 1) return \"8\";\n//         string result(n, '9');\n//         result[0] = '8';\n//         result[n - 1] = '8';\n//         return result;\n//     }\n\n//     string handleK5(int n) {\n//         if (n == 1) return \"5\";\n//         string result(n, '9');\n//         result[0] = '5';\n//         result[n - 1] = '5';\n//         return result;\n//     }\n\n//     string handleK4(int n) {\n//         if (n <= 3) return string(n, '8');\n//         string result(n, '9');\n//         result[0] = '8';\n//         result[n - 1] = '8';\n//         result[1] = '8';\n//         result[n - 2] = '8';\n//         return result;\n//     }\n\n//     string handleK8(int n) {\n//         if (n <= 5) return string(n, '8');\n//         string result(n, '9');\n//         result[0] = '8';\n//         result[n - 1] = '8';\n//         result[1] = '8';\n//         result[n - 2] = '8';\n//         result[2] = '8';\n//         result[n - 3] = '8';\n//         return result;\n//     }\n\n//     string handleK6(int n) {\n//         if (n == 1) return \"6\";\n//         if (n == 2) return \"66\";\n//         if (n == 3) return \"888\";\n//         string result(n, '9');\n//         result[0] = '8';\n//         result[n - 1] = '8';\n//         if (n % 2 == 1) {\n//             result[n / 2] = '8';\n//         } else {\n//             result[n / 2] = '7';\n//             result[(n / 2) - 1] = '7';\n//         }\n//         return result;\n//     }\n\n//     string handleK7(int n) {\n//         if (n == 1) return \"7\";\n//         initializeDP();\n//         fillDPTable();\n//         return constructPalindrome(n);\n//     }\n\n//     void initializeDP() {\n//         memset(dp, 0, sizeof(dp));\n//         memset(dp_non_zero, 0, sizeof(dp_non_zero));\n\n//         for (int digit = 1; digit < 10; ++digit) {\n//             dp[1][digit % 7] = '0' + digit;\n//             if (digit != 0) {\n//                 dp_non_zero[1][digit % 7] = '0' + digit;\n//             }\n//         }\n//     }\n\n//     void fillDPTable() {\n//         int base_mod = 10 % 7;\n//         for (int length = 0; length <= 100000 - 2; ++length) {\n//             for (int mod = 0; mod < 7; ++mod) {\n//                 if ((length == 0 && mod != 0) || (length > 0 && dp[length][mod] == 0)) {\n//                     continue;\n//                 }\n//                 for (int digit = 9; digit >= 0; --digit) {\n//                     int new_mod = (base_mod * digit + digit + mod * 10) % 7;\n//                     updateDP(length, mod, digit, new_mod);\n//                 }\n//             }\n//             base_mod = (base_mod * 10) % 7;\n//         }\n//     }\n\n//     void updateDP(int length, int mod, int digit, int new_mod) {\n//         if (dp[length + 2][new_mod] == 0 || dp[length + 2][new_mod] < '0' + digit) {\n//             dp[length + 2][new_mod] = '0' + digit;\n//             next_mod[length + 2][new_mod] = mod;\n//         }\n//         if (digit == 0) return;\n//         if (dp_non_zero[length + 2][new_mod] == 0 || dp_non_zero[length + 2][new_mod] < '0' + digit) {\n//             dp_non_zero[length + 2][new_mod] = '0' + digit;\n//             non_zero_next_mod[length + 2][new_mod] = mod;\n//         }\n//     }\n\n//     string constructPalindrome(int n) {\n//         int length = n;\n//         string front_half(1, dp_non_zero[length][0]);\n//         string back_half(1, dp_non_zero[length][0]);\n//         int mod = non_zero_next_mod[length][0];\n//         length -= 2;\n//         while (length > 0) {\n//             front_half += dp[length][mod];\n//             if (length > 1) {\n//                 back_half += dp[length][mod];\n//             } else {\n//                 break;\n//             }\n//             mod = next_mod[length][mod];\n//             length -= 2;\n//         }\n//         reverse(back_half.begin(), back_half.end());\n//         return front_half + back_half;\n//     }\n// };\n\n\n",
    "submit_ts": "1723953297",
    "subm_id": "1359817530"
}