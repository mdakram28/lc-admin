{
    "username": "Sanath_Kulla",
    "submission": "#define lli long long\nstruct FenwickTree {\n    vector<lli> bit;  // binary indexed tree\n    int n;\n \n    FenwickTree(int n) {\n        this->n = n;\n        bit.assign(n, 0);\n    }\n \n    FenwickTree(vector<int> const &a) : FenwickTree(a.size()) {\n        for (size_t i = 0; i < a.size(); i++)\n            add(i, a[i]);\n    }\n \n    lli sum(int r) {\n        lli ret = 0;\n        for (; r >= 0; r = (r & (r + 1)) - 1)\n            ret += bit[r];\n        return ret;\n    }\n \n    void add(int idx, lli delta) {\n        for (; idx < n; idx = idx | (idx + 1))\n            bit[idx] += delta;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& q) {\n        int n = nums.size();\n        FenwickTree bit(n);\n        vector<int> set(n , 0);\n        for(int i = 1 ; i < n-1 ;i++){\n            if(nums[i] > nums[i-1] and nums[i] > nums[i+1]){\n                bit.add(i , 1);\n                set[i] = 1;\n            }\n        }\n        auto doo =[&](int ind){\n          if(ind <= 0 or ind >= n-1)return;\n          if(nums[ind] > nums[ind-1] and nums[ind] > nums[ind+1]){\n              if(set[ind])return;\n              set[ind] = 1;\n              bit.add(ind,1);\n          }else{\n              if(set[ind] == 0)return;\n              set[ind] = 0;\n              bit.add(ind,-1);\n          }\n        };\n        auto get = [&](int l , int r){\n            int res = bit.sum(r);\n            if(l)res -= bit.sum(l-1);\n            return res;\n        };\n        vector<int> ans;\n        for(auto it:q){\n            if(it[0] == 1){\n                int here = (bit.sum(it[2]) - (it[1]-1>=0?bit.sum(it[1]-1):0));\n                if(get(it[1] , it[1]))here--;\n                if(it[1] != it[2] and get(it[2] , it[2]))here--;\n                ans.push_back(here);\n                \n            }else{\n                int ind = it[1] ; int val = it[2];\n                nums[ind] = val;\n                doo(ind);\n                doo(ind+1);\n                doo(ind-1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1718505995.0
}