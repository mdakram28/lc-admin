{
    "username": "TradingMrity",
    "submission": "class Solution {\npublic:\n    int MOD = 1e9+7;\n//     unordered_map<string, int> memo;\n    \n//     //working on dfs\n//     int dfs(int i, int last1, int last2, const vector<int>& nums) {\n//         if (i == nums.size()) {\n//             return 1;  // Base case: reached the end of the array\n//         }\n\n//         string key = to_string(i) + \",\" + to_string(last1) + \",\" + to_string(last2);\n//         if (memo.find(key) != memo.end()) {\n//             return memo[key];  // Return memoized result\n//         }\n\n//         int total = 0;\n//         for (int arr1_i = last1; arr1_i <= nums[i]; ++arr1_i) {\n//             int arr2_i = nums[i] - arr1_i;\n//             if (arr2_i <= last2) {  // Maintain monotonicity for arr2\n//                 total += dfs(i + 1, arr1_i, arr2_i, nums);\n//                 total %= MOD;\n//             }\n//         }\n\n//         memo[key] = total;\n//         return total;\n//     }\n    \n    vector<vector<vector<int>>> memo;\n    \n    int dfs(int i, int last1, int last2, const vector<int>& nums) {\n        if (i == nums.size()) {\n            return 1;  // Base case: reached the end of the array\n        }\n\n        if (memo[i][last1][last2] != -1) {\n            return memo[i][last1][last2];  // Return memoized result\n        }\n\n        int total = 0;\n        for (int arr1_i = last1; arr1_i <= nums[i]; ++arr1_i) {\n            int arr2_i = nums[i] - arr1_i;\n            if (arr2_i <= last2) {  // Maintain monotonicity for arr2\n                total += dfs(i + 1, arr1_i, arr2_i, nums);\n                total %= MOD;\n            }\n        }\n\n        memo[i][last1][last2] = total;\n        return total;\n    }\n    int countOfPairs(vector<int>& nums) {\n        // memo.clear();  // Clear memoization table\n        // return dfs(0, 0, nums[0], nums);  // Start recursion\n        \n        int n = nums.size();\n        int max_val = *max_element(nums.begin(), nums.end());\n        \n        // Initialize memoization table with -1\n        memo = vector<vector<vector<int>>>(n, vector<vector<int>>(max_val + 1, vector<int>(max_val + 1, -1)));\n        \n        return dfs(0, 0, nums[0], nums);  // Start recursion\n    }\n};",
    "submit_ts": "1723345625",
    "subm_id": "1351559782"
}