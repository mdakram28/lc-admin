{
    "username": "jasonshieh_new",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        unordered_map<int, int> mp;\n        int maxCount = 0;\n        for(int i = 0; i < n/2; ++i){\n            int diff = abs(nums[i] - nums[n-1-i]);\n            mp[diff]++;\n        }\n        std::priority_queue<std::pair<int, int>> maxHeap;\n        for(const auto& entry : mp) {\n            maxHeap.push({entry.second, entry.first});\n        }\n        int res = INT_MAX;\n        int maxFrequency = maxHeap.top().first;\n        while(!maxHeap.empty()) {\n            auto [frequency, diff] = maxHeap.top(); maxHeap.pop();\n            int changes = calculateChanges(nums, diff, k);\n            if(res < changes) break;\n            res = changes;\n        }\n        return res;\n    }\n\n    int calculateChanges(const std::vector<int>& nums, int diff, int k) {\n        int n = nums.size();\n        int changes = 0;\n        for(int i = 0; i < n / 2; i++) {\n            int a = std::min(nums[i], nums[n - i - 1]);\n            int b = std::max(nums[i], nums[n - i - 1]);\n            if(b - a == diff) continue;\n            if(a + diff <= k || b - diff >= 0) changes++;\n            else changes += 2;\n        }\n        return changes;\n    }\n};",
    "submit_ts": "1721489277",
    "subm_id": "1327448424"
}