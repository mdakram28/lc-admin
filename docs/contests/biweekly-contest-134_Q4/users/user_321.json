{
    "username": "Pajju_0330",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\nprivate:\n    vector<int> st;  // segment tree array\n    int n;  // size of the input array\n    \n    // Helper function to build the segment tree\n    void build(const vector<int>& arr, int v, int tl, int tr) {\n        if (tl == tr) {\n            st[v] = arr[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(arr, v*2, tl, tm);\n            build(arr, v*2+1, tm+1, tr);\n            st[v] = st[v*2] & st[v*2+1];  // bitwise AND operation\n        }\n    }\n    \n    // Helper function to query the segment tree\n    int query(int v, int tl, int tr, int l, int r) {\n        if (l > r)\n            return -1;  // default value or error handling\n        \n        if (l == tl && r == tr)\n            return st[v];\n        \n        int tm = (tl + tr) / 2;\n        return query(v*2, tl, tm, l, min(r, tm)) & query(v*2+1, tm+1, tr, max(l, tm+1), r);\n    }\n    \npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        st.resize(4 * n);  // resize to fit the segment tree\n        build(arr, 1, 0, n-1);\n    }\n    \n    // Function to perform range AND query\n    int rangeAndQuery(int l, int r) {\n        return query(1, 0, n-1, l, r);\n    }\n};\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long ans = 0;\n        SegmentTree sg(nums);\n        for(int i = 0; i < n; ++i){\n            int low = i, high = n - 1;\n            int idx = -1;\n            while(low <= high){\n                int mid = low + (high - low)/2;\n                int val = sg.rangeAndQuery(i,mid);\n                if(val >k){\n                    low = mid + 1;\n                }else{\n                    if(val == k) idx = mid;\n                    high = mid - 1;\n                }\n            }\n            int firstIdx = idx;\n            low = i, high = n - 1;\n            idx = -1;\n            while(low <= high){\n                int mid = low + (high - low)/2;\n                int val = sg.rangeAndQuery(i,mid);\n                if(val >= k){\n                    if(val == k) idx = mid;\n                    low = mid + 1;\n                }else{\n                    high = mid - 1;\n                }\n            }\n            int secondIdx = idx;\n            if(firstIdx != -1){\n                ans += secondIdx - firstIdx + 1;\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720278831",
    "subm_id": "1311726154"
}