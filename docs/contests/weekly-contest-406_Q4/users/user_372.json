{
    "username": "SubhasisPaul_6",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        Arrays.sort(horizontalCut);\n        Arrays.sort(verticalCut);\n        \n        for (int i = 0; i < horizontalCut.length / 2; i++) {\n            int temp = horizontalCut[i];\n            horizontalCut[i] = horizontalCut[horizontalCut.length - 1 - i];\n            horizontalCut[horizontalCut.length - 1 - i] = temp;\n        }\n        for (int i = 0; i < verticalCut.length / 2; i++) {\n            int temp = verticalCut[i];\n            verticalCut[i] = verticalCut[verticalCut.length - 1 - i];\n            verticalCut[verticalCut.length - 1 - i] = temp;\n        }\n        \n        int h = 0, v = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        long totalCost = 0;\n        \n        while (h < horizontalCut.length && v < verticalCut.length) {\n            if (horizontalCut[h] > verticalCut[v]) {\n                totalCost += horizontalCut[h] * verticalPieces;\n                horizontalPieces++;\n                h++;\n            } else {\n                totalCost += verticalCut[v] * horizontalPieces;\n                verticalPieces++;\n                v++;\n            }\n        }\n    \n        while (h < horizontalCut.length) {\n            totalCost += horizontalCut[h] * verticalPieces;\n            h++;\n        }\n        \n        while (v < verticalCut.length) {\n            totalCost += verticalCut[v] * horizontalPieces;\n            v++;\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720925458",
    "subm_id": "1320255383"
}