{
    "username": "yadarj120",
    "submission": "class Solution {\npublic:\n    bool conn(int i, int j, vector<vector<int>> &cir){\n        long long ox=cir[i][0], oy=cir[i][1], ord=cir[i][2];\n        long long sx=cir[j][0], sy=cir[j][1], srd=cir[j][2];\n        \n        long long dx=abs(ox-sx), dy=abs(oy-sy);\n        long long dis = (dx*dx) + (dy*dy);\n        return dis<=((ord+srd)*(ord+srd));\n    }\n    \n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& cir) {\n        unordered_set<long long> l, r, u, d;\n        \n        for(int i=0; i<cir.size(); i++){\n            // push in l, r, u, d depending upon if they are touching any side\n            int cx=cir[i][0], cy=cir[i][1], rd=cir[i][2];\n            \n            if(cx-rd<=0) l.insert(i);  // left\n            if(cy-rd<=0) d.insert(i); // down\n            if(cx+rd>=X) r.insert(i);\n            if(cy+rd>=Y) u.insert(i);\n        }\n        \n        // prepare adjacency list (if the circles ar econnected);\n        vector<vector<int>> graph(cir.size());\n        for(int i=0; i<cir.size(); i++){\n            for(int j=i+1; j<cir.size(); j++){\n                if(conn(i, j, cir)){\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        \n        // l-d, l-r\n        unordered_set<int> vis;\n        queue<int> q;\n        for(auto x: l){\n            q.push(x);\n            vis.insert(x);\n        }\n        while(q.size()){\n            int sz=q.size();\n            for(int i=0; i<sz; i++){\n                int idx=q.front();\n                if(d.count(idx) || r.count(idx)) return false;\n                q.pop();\n                \n                for(auto nei: graph[idx]){\n                    if(vis.count(nei)) continue;\n                    vis.insert(nei);\n                    q.push(nei);\n                    if(d.count(nei) || r.count(nei)) return false;\n                }\n            }\n        }\n        \n        \n        \n        // u-r, u-d\n        vis.clear(); // check this line\n        for(auto x: u){\n            q.push(x);\n            vis.insert(x);\n        }\n        while(q.size()){\n            int sz=q.size();\n            for(int i=0; i<sz; i++){\n                int idx=q.front();\n                if(r.count(idx) || d.count(idx)) return false;\n                q.pop();\n                \n                for(auto nei: graph[idx]){\n                    if(vis.count(nei)) continue;\n                    vis.insert(nei);\n                    q.push(nei);\n                    if(r.count(nei) || d.count(nei)) return false;\n                }\n            }\n        }\n        \n        return true;\n    }\n};",
    "submit_ts": "1722137600",
    "subm_id": "1335768421"
}