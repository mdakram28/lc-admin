{
    "username": "fxfxxxfxx",
    "submission": "class Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int start = 0, n = s.size();\n        int _0 = 0, _1 = 0;\n        vector<int> V(n); // V[i] <= V[i+1]\n        for (int end = 0; end < n; end++) {\n            // [start, end]\n            if (s[end] == '0') _0 += 1;\n            else _1 += 1;\n            while (start < end && _0 > k && _1 > k) {\n                if (s[start] == '0') _0 -= 1;\n                else _1 -= 1;\n                start += 1;\n            }\n            V[end] = start;\n        }\n        vector<int64_t> P(n+1);\n        for (int i = 1; i <= n; i++)\n            P[i] = P[i-1] + V[i-1];\n\n        vector<long long> ans;\n        for (const auto& Q: queries) {\n            int l = Q[0], r = Q[1];\n            auto it = lower_bound(V.begin(), V.end(), l);\n            int index = min<int>(r+1, it - V.begin());\n            // V[index] > l\n            // [l, index) [index, end]\n            int64_t fixed = int64_t{index - l} * l;\n            int64_t lsm = fixed + (P[r+1] - P[index]);\n            // l+1 + l+2 + ... + r+1\n            int64_t rsm = int64_t{r+1+l+1} * (r-l+1) / 2;\n            ans.push_back(rsm - lsm);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723952392",
    "subm_id": "1359795180"
}