{
    "username": "Yawn_Sean",
    "submission": "class UnionFind:\n    def __init__(self, n, size=None):\n        self.parent_or_size = [-1] * n if size is None else [-x for x in size]\n \n    def find(self, a):\n        a = self.parent_or_size[a] if self.parent_or_size[a] >= 0 else a\n        acopy = a\n        while self.parent_or_size[a] >= 0:\n            a = self.parent_or_size[a]\n        while acopy != a:\n            self.parent_or_size[acopy], acopy = a, self.parent_or_size[acopy]\n        return a\n \n    def merge(self, a, b):\n        pa, pb = self.find(a), self.find(b)\n        if pa == pb: return False\n        if self.parent_or_size[pa] > self.parent_or_size[pb]:\n            pa, pb = pb, pa\n        self.parent_or_size[pa] += self.parent_or_size[pb]\n        self.parent_or_size[pb] = pa\n        return True\n \n    def getSize(self, a):\n        return -self.parent_or_size[self.find(a)]\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        for x, y, r in circles:\n            if (x - X) * (x - X) + (y - Y) * (y - Y) <= r * r:\n                return False\n        \n        union = UnionFind(n + 2)\n        \n        for i in range(n):\n            x1, y1, r1 = circles[i]\n            for j in range(i):\n                x2, y2, r2 = circles[j]\n                if circles[i] == circles[j]:\n                    union.merge(i, j)\n                    continue\n                if (r1 - r2) * (r1 - r2) <= (x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1) <= (r1 + r2) * (r1 + r2):\n                    dx = x2 - x1\n                    dy = y2 - y1\n                    t = math.atan2(dy, dx)\n                    dis = dx * dx + dy * dy\n                    a = math.acos((r1 * r1 - r2 * r2 + dis) / 2 / r1 / math.sqrt(dis))\n                    x3, y3 = x1 + r1 * math.cos(t + a), y1 + r1 * math.sin(t + a)\n                    x4, y4 = x1 + r1 * math.cos(t - a), y1 + r1 * math.sin(t - a)\n                    if 0 <= x3 <= X and 0 <= y3 <= Y:\n                        union.merge(i, j)\n                    elif 0 <= x4 <= X and 0 <= y4 <= Y:\n                        union.merge(i, j)\n        \n        for i in range(n):\n            x, y, r = circles[i]\n            # (0, 0), (0, y)\n            if abs(x) <= r and (0 <= y - (r * r - x * x) ** 0.5 <= Y or 0 <= y + (r * r - x * x) ** 0.5 <= Y):\n                union.merge(i, n)\n            # (0, y), (x, y)\n            elif abs(y - Y) <= r and (0 <= x - (r * r - (y - Y) * (y - Y)) ** 0.5 <= X or 0 <= x + (r * r - (y - Y) * (y - Y)) ** 0.5 <= X):\n                union.merge(i, n)\n            # (0, 0), (x, 0)\n            if abs(y) <= r and (0 <= x - (r * r - y * y) ** 0.5 <= X or 0 <= x + (r * r - y * y) ** 0.5 <= X):\n                union.merge(i, n + 1)\n            # (x, 0), (x, y)\n            elif abs(x - X) <= r and (0 <= y - (r * r - (x - X) * (x - X)) ** 0.5 <= Y or 0 <= y + (r * r - (x - X) * (x - X)) ** 0.5 <= Y):\n                union.merge(i, n + 1)\n        return union.merge(n, n + 1)",
    "submit_ts": "1722136315",
    "subm_id": "1335730518"
}