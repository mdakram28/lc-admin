{
    "username": "tomcatx",
    "submission": "def manhaton(ps, ind):\n    nums = [[], [], [], []]\n    for j in range(len(ps)):\n        if j == ind:\n            continue\n        nums[0].append([ps[j][0] + ps[j][1], j])\n        nums[1].append([ps[j][0] - ps[j][1], j])\n        nums[2].append([-ps[j][0] + ps[j][1], j])\n        nums[3].append([-ps[j][0] - ps[j][1], j])\n    maxDist = []\n    for i in range(4):\n        nums[i].sort(key=lambda x: -x[0])\n        maxDist.append([nums[i][0][0] - nums[i][-1][0], nums[i][0][1], nums[i][-1][1]])\n    maxDist.sort(key=lambda x: -x[0])\n    return maxDist[0]\n\n\nclass Solution:\n    def minimumDistance(self, ps: List[List[int]]) -> int:\n        maxDist0, a, b = manhaton(ps, -1)\n        maxDist1, _, _ = manhaton(ps, a)\n        maxDist2, _, _ = manhaton(ps, b)\n        return min(maxDist1, maxDist2)\n        # nums = [[], [], [], []]\n        # for j in len(ps):\n        #     nums[0].append([ps[j][0] + ps[j][1], j])\n        #     nums[1].append([ps[j][0] - ps[j][1], j])\n        #     nums[2].append([-ps[j][0] + ps[j][1], j])\n        #     nums[3].append([-ps[j][0] - ps[j][1], j])\n        # maxDist = []\n        # for i in range(4):\n        #     nums[i].sort(lambda x: -x[0])\n        #     maxDist.append([nums[i][0][0] - nums[i][-1][0], nums[i][0][1], nums[i][-1][1]])\n        # maxDist.sort(lambda x: -x[0])\n        # a = maxDist[0][1]\n        # b = maxDist[0][2]\n        \n   "
}