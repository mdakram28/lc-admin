{
    "username": "OXTGg38Jgv",
    "submission": "class BinIndexTree:\n    def __init__(self, data: List, need_build=True):  # \u7531\u4e8e\u5efa\u6811\u5f00\u9500\u8f83\u5927\uff0c\u5728\u9700\u8981\u52a8\u6001\u5efa\u6811\u65f6\u5c06need_build\u7f6e\u4e3aFalse\n        self.n = len(data)\n        self.c = [0] * (self.n + 1)  # \u6b64\u65f6\u7ef4\u62a4\u7684\u662f\u4e00\u4e2a\u5dee\u5206\u6570\u7ec4:data[i] = sum(c[1:i])\n        self.cp = [0] * (self.n + 1)  # \u5dee\u5206\u6570\u7ec4:(1*c[1] + 2*c[2] + ... + n*c[n])\n        if need_build:\n            self.__build([0] + data)\n\n    def update(self, i: int, value: Any):  # \u5355\u70b9\u4fee\u6539: \u5c06\u67d0\u70b9\u7684\u503c\u8bbe\u4e3avalue | O(logN)\n        self.modify(i, i, value - self.query(i, i))\n\n    def modify(self, i: int, j: int, offset: Any):  # \u533a\u95f4\u4fee\u6539: \u6574\u4e2a\u533a\u95f4\u7684\u6bcf\u4e2a\u503c\u90fd\u504f\u79fb\u4e00\u4e2a\u5e45\u5ea6 O(logN)\n        self.__modify(i, offset)\n        self.__modify(j + 1, -offset)\n\n    def query(self, i: int, j: int):  # \u533a\u95f4\u67e5\u8be2 | O(logN)\n        return self.__query(j) - self.__query(i - 1)\n\n    def __build(self, data: List):\n        for i in range(1, len(data)):  # O(NlogN)\n            self.__modify(i - 1, data[i] - data[i - 1])\n\n    def __low_bit(self, x: int):\n        return x & (-x)  # => n & (~n + 1), \u53ea\u7559\u4e0b\u4e8c\u8fdb\u5236\u7801\u4e2d\u6700\u53f3\u4fa7\u76841\n\n    def __query(self, i: int):  # \u6838\u5fc3API\uff1a\u6c42data[0~i]\u7684\u548c(\u95ed\u533a\u95f4)\n        i += 1  # \u7edf\u4e00API\n        res = 0\n        x = i + 1\n        while i > 0:\n            res += x * self.c[i] - self.cp[i]  # \u2606 \u4ec5\u80fd\u7528\u4e8e\u6c42\u533a\u95f4\u5408\n            i -= self.__low_bit(i)\n        return res\n\n    def __modify(self, i: int, diff: Any):  # \u6838\u5fc3API\uff1a\u5dee\u5206\u4fee\u6539\n        i += 1  # \u7edf\u4e00API: \u7531\u4e8e\u6811\u72b6\u6570\u7ec4\u4e2d\u7d22\u5f15\u5fc5\u987b\u4ece1\u8d77\uff0c\u56e0\u6b64\u5bf9\u5e94\u539f\u6570\u7ec4\u7d22\u5f15\u4ece0\u8d77\uff0c\u6b64\u5904\u8981+1\n        d_diff = i * diff\n        while i <= self.n:\n            self.c[i] += diff\n            self.cp[i] += d_diff  # \u2606 \u4ec5\u80fd\u7528\u4e8e\u6c42\u533a\u95f4\u5408\n            i += self.__low_bit(i)  # \u4fee\u6539\u5176\u7236\u7ea7\n\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n\n        def check(i):\n            if i == 0 or i == n - 1:\n                return 0\n            return 1 if nums[i] > nums[i - 1] and nums[i] > nums[i + 1] else 0\n\n        arr = [check(i) for i in range(n)]\n        tree = BinIndexTree(arr)\n\n        ans = []\n        for a, b, c in queries:\n            # ic([tree.query(i, i) for i in range(n)])\n            if a == 1:\n                if c - 1 >= b + 1:\n                    ans.append(tree.query(b + 1, c - 1))\n                else:\n                    ans.append(0)\n            else:\n                nums[b] = c\n                for i in range(max(0, b - 1), min(n, b + 2), 1):\n                    tree.update(i, check(i))\n        return ans\n",
    "submit_ts": 1718507544.0
}