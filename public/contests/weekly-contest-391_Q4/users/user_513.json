{
    "username": "mikeac",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        cnt = [Counter() for _ in range(4)]\n        for x, y in points:\n            cnt[0][x + y] += 1\n            cnt[1][x + y] += 1\n            cnt[2][x - y] += 1\n            cnt[3][x - y] += 1\n        \n        h_mn = [[] for _ in range(4)]\n        h_mx = [[] for _ in range(4)]\n        for i in range(4):\n            h_mn[i] = list(cnt[i].keys())\n            heapify(h_mn[i])\n            h_mx[i] = list(-k for k in cnt[i].keys())\n            heapify(h_mx[i])\n        \n        ans = math.inf\n        for x, y in points:\n            cnt[0][x + y] -= 1\n            cnt[1][x + y] -= 1\n            cnt[2][x - y] -= 1\n            cnt[3][x - y] -= 1\n            d = 0\n            for i in range(4):\n                mn = mx = None\n                if cnt[i][h_mn[i][0]] == 0:\n                    mn = heappop(h_mn[i])\n                if cnt[i][-h_mx[i][0]] == 0:\n                    mx = heappop(h_mx[i])\n                d = max(d, -h_mx[i][0] - h_mn[i][0])\n                if mn is not None:\n                    heappush(h_mn[i], mn)\n                if mx is not None:\n                    heappush(h_mx[i], mx)\n            ans = min(ans, d)\n            cnt[0][x + y] += 1\n            cnt[1][x + y] += 1\n            cnt[2][x - y] += 1\n            cnt[3][x - y] += 1\n        return ans"
}