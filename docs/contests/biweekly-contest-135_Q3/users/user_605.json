{
    "username": "thomasmcinally",
    "submission": "class Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        N = len(nums)\n\n        x_to_diff_count = defaultdict(int)\n        x_to_single_move_threshold_count = defaultdict(int)\n        for i in range(N//2):\n            a, b = nums[i], nums[N-i-1]\n\n            threshold = max(a, k-a, b, k-b)\n            x_to_single_move_threshold_count[threshold] += 1\n\n            x_to_diff_count[abs(a-b)] += 1\n\n        \n        min_moves = float(\"inf\")\n        two_move_pairs = 0\n        for x in range(k+1):\n            moves = two_move_pairs * 2 + (N//2 - two_move_pairs) - x_to_diff_count[x]\n            min_moves = min(min_moves, moves)\n            two_move_pairs += x_to_single_move_threshold_count[x]\n        \n        return min_moves\n\n        \n\n\n\n# Possible values of x are [0, k]\n# a pair (a,b) can be made to fit in a single move if x <= max(a, k-a, b, k-b)\n# else, need to use two moves\n\n# x=0 will always work to get it done in n//2 moves\n# Can possibly do it in less than n//2 moves by picking an x that is already present\n\n# [3,3,4,4,4,0,0,0,3,3], k = 6\n\n\n# determine max(a, k-a, b, k-b) for all pairs\n# all vals will be [0,k]\n# iterate over x in range [0,k] keep track of prefix sum. Can then evaluate each x in O(1) time",
    "submit_ts": "1721488756",
    "subm_id": "1327432277"
}