{
    "username": "AHMADUL",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort both the horizontal and vertical cuts in descending order\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int horizontalPieces = 1, verticalPieces = 1;\n        long long totalCost = 0;\n        int i = 0, j = 0;\n\n        // Use a greedy approach to process the largest cuts first\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += (long long)horizontalCut[i] * verticalPieces;\n                horizontalPieces++;\n                i++;\n            } else {\n                totalCost += (long long)verticalCut[j] * horizontalPieces;\n                verticalPieces++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[i] * verticalPieces;\n            horizontalPieces++;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += (long long)verticalCut[j] * horizontalPieces;\n            verticalPieces++;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925665",
    "subm_id": "1320262204"
}