{
    "username": "Hritik__k",
    "submission": "vector<int>dp;\nstruct Node {\n    Node* links[26];\n    int cost=1e9;\n    bool flag = false;\n    bool containsKey(char ch) {\n        return links[ch - 'a'] != NULL;\n    }\n    void put(char ch, Node* node) {\n        links[ch - 'a'] = node;\n    }\n    Node* get(char ch) {\n        return links[ch - 'a'];\n    }\n    void setEnd() {\n        flag = true;\n    }\n    bool isEnd() {\n        return flag;\n    }\n};\nclass Trie {\nprivate:\n    Node* root;\n\npublic:\n    Trie() {\n        root = new Node();\n    }\n    void insert(string word,int cost) {\n        Node* node = root;\n        for (int i = 0; i < word.length(); i++) {\n            if (!node->containsKey(word[i]))    node->put(word[i], new Node());\n            node = node->get(word[i]);\n        }\n        node->cost=min(node->cost,cost);\n        node->setEnd();\n    }\n    \n    int search(string &word,int startIdx) {\n        if(startIdx==word.size()) return 0;\n        Node* node = root;\n        long long ans=1e9;\n        if(dp[startIdx]!=-1) return dp[startIdx];\n        for (int i = startIdx; i < word.length(); i++) {\n            if (!node->containsKey(word[i])) break;\n            node = node->get(word[i]);\n            if(node->isEnd()){\n                // cout<<i<<endl;\n                ans=min(ans,0LL+node->cost+search(word,i+1));\n            }\n        }\n        // cout<<word<<\" \"<<startIdx<<\" \"<<ans<<endl;\n        return dp[startIdx]=ans;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie t;\n        dp=*new vector<int>(target.size()+1,-1);\n        int n=words.size();\n        for(int i=0;i<n;i++){\n            t.insert(words[i],costs[i]);\n        }\n        int x=t.search(target,0);\n        if(x==1e9) return -1;\n        return x;\n    }\n};",
    "submit_ts": "1720323320",
    "subm_id": "1312372701"
}