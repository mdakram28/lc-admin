{
    "username": "jaiho123",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size() + 1;\n        int m = e2.size() + 1;\n        vector<vector<int>> a1(n);\n        vector<vector<int>> a2(m);\n        for (const auto& e : e1) {\n            a1[e[0]].push_back(e[1]);\n            a1[e[1]].push_back(e[0]);\n        }\n        for (const auto& e : e2) {\n            a2[e[0]].push_back(e[1]);\n            a2[e[1]].push_back(e[0]);\n        }\n        auto dfs = [](const vector<vector<int>>& a, int s, int& f) {\n            int n = a.size();\n            vector<int> d(n, -1);\n            function<void(int, int)> visit = [&](int u, int dist) {\n                d[u] = dist;\n                if (dist > d[f]) f = u;\n                for (int v : a[u]) {\n                    if (d[v] == -1) visit(v, dist + 1);\n                }\n            };\n            f = s;\n            visit(s, 0);\n            return d[f];\n        };\n\n        int f1 = 0;\n        dfs(a1, 0, f1);\n        int d1 = dfs(a1, f1, f1);\n\n        int f2 = 0;\n        dfs(a2, 0, f2);\n        int d2 = dfs(a2, f2, f2);\n\n        int minD = max(d1, d2);\n        int h1 = (d1 + 1) / 2;\n        int h2 = (d2 + 1) / 2;\n        minD = max(minD, h1 + h2 + 1);\n\n        return minD;\n    }\n};\n",
    "submit_ts": 1719716862.0
}