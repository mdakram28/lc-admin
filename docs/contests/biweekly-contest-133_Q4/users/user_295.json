{
    "username": "hongyili",
    "submission": "class Solution:\n    def helper(self, n, ct):\n        key = n, ct\n        if key in self.mem:\n            return self.mem[key]\n        \n        if n in self.cons and ct != self.cons[n]:\n            self.mem[key] = 0\n            return self.mem[key]\n        \n        if n == 1:\n            self.mem[key] = 1 if ct == 0 else 0\n            return self.mem[key]\n        \n        # if ct == 0:\n        #     self.mem[key] = 1\n        #     return self.mem[key]\n        \n        if ct > (n * (n-1)) // 2:\n            self.mem[key] = 0\n            return self.mem[key]\n            \n        r = 0\n        for i in range(n):\n            if i > ct:\n                break\n            \n            r += self.helper(n-1, ct-i)\n            r %= self.deno\n        self.mem[key] = r\n        return self.mem[key]\n    \n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        self.deno = 10 ** 9 + 7\n        self.mem = {}\n        self.cons = {m+1: ct for m, ct in requirements}\n        rst = self.helper(n, self.cons[n])\n        return rst\n        ",
    "submit_ts": 1719069509.0
}