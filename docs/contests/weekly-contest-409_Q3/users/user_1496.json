{
    "username": "MinhBaoSoCool",
    "submission": "class Solution {\npublic:\n    \n    static bool cmp(pair<int, int> a, pair<int, int> b){\n        return a.first<b.first;\n    }\n    \n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> ans;\n        set<pair<int, int>, decltype(&cmp)> intervals(&cmp);\n        int cur=0;\n        for(vector<int> query: queries){\n            pair<int, int> interval={query[0], query[1]};\n            set<pair<int,int>>:: iterator it=intervals.lower_bound(interval);\n            // cout<<\"intervals size = \"<<intervals.size()<<\"\\n\";\n            // if(it==intervals.end()){\n            //     cout<<\"end\\n\";\n            // }\n            bool shouldLoop=true;\n            \n            if(it==intervals.end()){\n                set<pair<int,int>>:: reverse_iterator it2=intervals.rbegin();\n                if(it2!=intervals.rend()){\n                    // cout<<it2->first<<\", \"<<it2->second<<\"\\n\";\n                    if(it2->first<=query[0] && it2->second>=query[1]){\n                        shouldLoop=false;\n                    }\n                }\n            }\n            else {\n                set<pair<int,int>>:: iterator it2=it;\n                it2--;\n                if(it2!=intervals.end()){\n                    // cout<<it2->first<<\", \"<<it2->second<<\"\\n\";\n                    if(it2->first<=query[0] && it2->second>=query[1]){\n                        shouldLoop=false;\n                    }\n                }\n            }\n            \n            if(it!=intervals.end()){\n                if(it->first<=query[0] && it->second>=query[1]){\n                    shouldLoop=false;\n                }\n            }\n            if(shouldLoop){\n                while(it!=intervals.end() && query[0]<=it->first && query[1]>=it->second){\n                    // cout<<it->first<<\", \"<<it->second<<\"\\n\";\n                    cur-=(it->second-it->first-1);\n                    set<pair<int,int>>:: iterator tmp=it;\n                    tmp++;\n                    intervals.erase(it);\n                    it=tmp;\n                }\n                // cout<<\"\\n\";\n                intervals.insert(interval);\n                cur+=(query[1]-query[0]-1);\n            }\n            \n            \n            ans.push_back(n-1-cur);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722742926",
    "subm_id": "1343780247"
}