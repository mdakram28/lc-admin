{
    "username": "6reat ShternSeA",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\nusing ll = long long;\nusing ld = long double;\nusing i128 = __int128_t;\n\nconst int inf = 2E9;\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& a) {\n        int N = a.size();\n        int M=a[0].size();\n        vector<vector<int>>leftUp(N, vector<int>(M, -inf));\n        vector<vector<int>>rightUp(N, vector<int>(M, -inf));\n        vector<vector<int>>leftLow(N, vector<int>(M, -inf));\n        vector<vector<int>>rightLow(N, vector<int>(M, -inf));\n        vector<vector<int>>leftRight(N, vector<int>(M, -inf));\n        vector<vector<int>>rightLeft(N, vector<int>(M, -inf));\n        vector<vector<int>>upLow(N, vector<int>(M, -inf));\n        vector<vector<int>>lowUp(N, vector<int>(M, -inf));\n\n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                int cur = a[i][j];\n                leftRight[i][j] = cur;\n                upLow[i][j] = cur;\n                if (i - 1 >= 0) {\n                    upLow[i][j] = max(upLow[i][j], upLow[i - 1][j]);\n                    cur = max(cur, leftUp[i - 1][j]);\n                }\n                if (j - 1 >= 0) {\n                    leftRight[i][j] = max(leftRight[i][j], leftRight[i][j - 1]);\n                    cur = max(cur, leftUp[i][j - 1]);\n                }\n                leftUp[i][j] = cur;\n            }\n        }\n        for (int i = 0; i < N; i++) {\n            for (int j = M - 1; j >= 0; j--) {\n                int cur = a[i][j];\n\n                rightLeft[i][j] = a[i][j];\n                if (i - 1 >= 0) {\n                    cur = max(cur, rightUp[i - 1][j]);\n                }\n                if (j + 1 < M) {\n                    rightLeft[i][j] = max(rightLeft[i][j], rightLeft[i][j + 1]);\n                    cur = max(cur, rightUp[i][j + 1]);\n                }\n                rightUp[i][j] = cur;\n            }\n        }\n        for (int i = N - 1; i >= 0; i--) {\n            for (int j = 0; j < M; j++) {\n                int cur = a[i][j];\n                lowUp[i][j] = a[i][j];\n                if (i + 1 < N) {\n                    lowUp[i][j] = max(lowUp[i][j], lowUp[i + 1][j]);\n                    cur = max(cur, leftLow[i + 1][j]);\n                }\n                if (j - 1 >= 0) {\n                    cur = max(cur, leftLow[i][j - 1]);\n                }\n                leftLow[i][j] = cur;\n            }\n        }\n        ll ans = -1E12;\n        for (int i = N - 1; i >= 0; i--) {\n            for (int j = M - 1; j >= 0; j--) {\n                int cur = a[i][j];\n                if (i + 1 < N) {\n                    cur = max(cur, rightLow[i + 1][j]);\n                }\n                if (j + 1 < M) {\n                    cur = max(cur, rightLow[i][j + 1]);\n                }\n                rightLow[i][j] = cur;\n\n            }\n        }\n        \n        for (int i = 0; i < N; i++) {\n            for (int j = 0; j < M; j++) {\n                \n                if (i - 1 >= 0 && j - 1 >= 0 && i + 1 < N && j + 1 < M) {\n                    \n                    ans = max(ans, 1LL * leftRight[i][j - 1] + upLow[i - 1][j] + rightLow[i + 1][j + 1]);\n                    \n                    ans = max(ans, 1LL * rightLeft[i][j + 1] + lowUp[i + 1][j] + leftUp[i - 1][j - 1]);\n                   \n                    ans = max(ans, 1LL * rightLeft[i][j + 1] + upLow[i - 1][j] + leftLow[i + 1][j - 1]);\n                    \n                    ans = max(ans, 1LL * leftRight[i][j - 1] + lowUp[i + 1][j] + rightUp[i - 1][j + 1]);\n                    ans = max(ans, 1LL * a[i][j] + rightUp[i - 1][j + 1] + leftLow[i + 1][j - 1]);\n                    ans = max(ans, 1LL * a[i][j] + leftUp[i - 1][j - 1] + rightLow[i + 1][j + 1]);\n                    \n                    \n                }\n                \n            }\n        }\n        return ans;\n\n    }\n};",
    "submit_ts": "1723907825",
    "subm_id": "556327717"
}