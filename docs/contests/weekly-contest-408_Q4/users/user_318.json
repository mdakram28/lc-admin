{
    "username": "tsrshiv",
    "submission": "class Solution {\npublic:\n    bool bfs(const vector<vector<int>>& graph, int start, int t1, int t2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n        \n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n    }\n\n    void buildGraph(vector<vector<int>>& graph, vector<pair<pair<int, int>, int>>& circles, int X, int Y, int num_circles) {\n        for (int i = 0; i < num_circles; ++i) {\n            int x = circles[i].first.first;\n            int y = circles[i].first.second;\n            int r = circles[i].second;\n            \n            if (x <= r) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - x <= r) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (y <= r) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - y <= r) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double dist = sqrt(pow(x - circles[j].first.first, 2) + pow(y - circles[j].first.second, 2));\n                int r_sum = r + circles[j].second;\n                if (r_sum >= dist) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circlesInput) {\n        int num_circles = circlesInput.size();\n        vector<pair<pair<int, int>, int>> circles(num_circles);\n        vector<vector<int>> graph(num_circles + 4);\n        \n        for (int i = 0; i < num_circles; ++i) {\n            circles[i] = {{circlesInput[i][0], circlesInput[i][1]}, circlesInput[i][2]};\n        }\n        \n        buildGraph(graph, circles, X, Y, num_circles);\n\n        bool is_blocked = false;\n        is_blocked = max(is_blocked, bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4));\n        is_blocked = max(is_blocked, bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4));\n        \n        return !is_blocked;\n    }\n};\n",
    "submit_ts": "1722136623",
    "subm_id": "1335740149"
}