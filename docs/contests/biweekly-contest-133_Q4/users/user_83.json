{
    "username": "ayush2448",
    "submission": "/*          || \u091c\u092f \u0936\u094d\u0930\u0940 \u0930\u093e\u092e || \u0950 \u0928\u092e\u0903 \u0936\u093f\u0935\u093e\u092f || \u0939\u0930 \u0939\u0930 \u092e\u0939\u093e\u0926\u0947\u0935 || \u091c\u092f \u092c\u091c\u0930\u0902\u0917 \u092c\u0932\u0940 || */ \n\n\nclass Solution {\n    fun numberOfPermutations(n: Int, requirements: Array<IntArray>): Int {\n        val MOD = 1_000_000_007\n        \n     \n        val dp = Array(n + 1) { IntArray(n * (n - 1) / 2 + 1) { 0 } }\n        dp[0][0] = 1\n        \n        \n        for (len in 1..n) {\n            val prefixSum = IntArray(n * (n - 1) / 2 + 1) { 0 }\n            \n            for (inv in 0..len * (len - 1) / 2) {\n                prefixSum[inv] = (prefixSum.getOrElse(inv - 1) { 0 } + dp[len - 1][inv]) % MOD\n            }\n            \n            for (inv in 0..len * (len - 1) / 2) {\n                dp[len][inv] = if (inv >= len) {\n                    (prefixSum[inv] - prefixSum[inv - len] + MOD) % MOD\n                } else {\n                    prefixSum[inv]\n                }\n            }\n        }\n        \n    \n        val constraints = IntArray(n) { -1 }\n        requirements.forEach { (end, count) ->\n            constraints[end] = count\n        }\n        \n        val validDp = Array(n + 1) { IntArray(n * (n - 1) / 2 + 1) { 0 } }\n        validDp[0][0] = 1\n        \n        for (len in 1..n) {\n            val prefixSum = IntArray(n * (n - 1) / 2 + 1) { 0 }\n            \n            for (inv in 0..len * (len - 1) / 2) {\n                prefixSum[inv] = (prefixSum.getOrElse(inv - 1) { 0 } + validDp[len - 1][inv]) % MOD\n            }\n            \n            for (inv in 0..len * (len - 1) / 2) {\n                if (constraints[len - 1] != -1 && constraints[len - 1] != inv) continue\n                validDp[len][inv] = if (inv >= len) {\n                    (prefixSum[inv] - prefixSum[inv - len] + MOD) % MOD\n                } else {\n                    prefixSum[inv]\n                }\n            }\n        }\n        \n\n        var result = 0\n        for (inv in 0..n * (n - 1) / 2) {\n            if (constraints[n - 1] == -1 || constraints[n - 1] == inv) {\n                result = (result + validDp[n][inv]) % MOD\n            }\n        }\n        \n        return result\n    }\n}\n",
    "submit_ts": 1719068395.0
}