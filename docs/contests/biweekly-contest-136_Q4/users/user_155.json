{
    "username": "CAEL0",
    "submission": "#include <bits/stdc++.h>\n#define sz size()\n#define bk back()\n#define fi first\n#define se second\n\nusing namespace std;\ntypedef long long ll;\ntypedef pair<int, int> pii;\n\nclass Solution {\n  public:\n    vector<int> timeTaken(vector<vector<int>> &edges) {\n        int n = edges.sz + 1;\n        vector<vector<int>> graph(n);\n\n        for (vector<int> &edge : edges) {\n            graph[edge[0]].push_back(edge[1]);\n            graph[edge[1]].push_back(edge[0]);\n        }\n\n        vector<int> parent(n);\n        vector<vector<int>> dist(n);\n        for (int i = 0; i < n; i++)\n            dist[i] = {0, 0};\n        \n        dfs(0, -1, graph, parent, dist);\n\n        vector<int> up(n, -1);\n        up[0] = 0;\n\n        vector<int> ret(n);\n        for (int i = 0; i < n; i++)\n            ret[i] = max(dist[i][0], f(i, graph, parent, dist, up));\n\n        return ret;\n    }\n\n    void dfs(int cur, int prv, vector<vector<int>> &graph, vector<int> &parent, vector<vector<int>> &dist) {\n        for (int nxt : graph[cur]) {\n            if (nxt != prv) {\n                parent[nxt] = cur;\n                dfs(nxt, cur, graph, parent, dist);\n\n                dist[cur].push_back(dist[nxt][0] + (nxt & 1 ? 1 : 2));\n                sort(dist[cur].begin(), dist[cur].end(), greater<int>());\n                dist[cur].pop_back();\n            }\n        }\n    }\n\n    int f(int cur, vector<vector<int>> &graph, vector<int> &parent, vector<vector<int>> &dist, vector<int> &up) {\n        if (up[cur] != -1)\n            return up[cur];\n        \n        int p = parent[cur];\n        int ret = f(p, graph, parent, dist, up) + (p & 1 ? 1 : 2);\n        int down = dist[cur][0] + (cur & 1 ? 1 : 2);\n\n        if (dist[p][0] != down)\n            ret = max(ret, dist[p][0] + (p & 1 ? 1 : 2));\n        else\n            ret = max(ret, dist[p][1] + (p & 1 ? 1 : 2));\n\n        return up[cur] = ret;\n    }\n};",
    "submit_ts": "1722698783",
    "subm_id": "1343191685"
}