{
    "username": "animeshnath",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        int[] diff = new int[n / 2];\n        Map<Integer, Integer> map = new HashMap<>();\n        for (int i = 0; i <= (n - 1 - i); i++) {\n            diff[i] = Math.abs(nums[i] - nums[n - 1 - i]);\n            map.put(diff[i], map.getOrDefault(diff[i], 0) + 1);\n        }\n        TreeMap<Integer, List<Integer>> tree = new TreeMap<>();\n        for (int i : map.keySet()) {\n            tree.computeIfAbsent(map.get(i), key -> new ArrayList<>()).add(i);\n        }\n        // Arrays.sort(diff);\n        // System.out.println(Arrays.toString(diff));\n        // System.out.println(map);\n        // System.out.println(tree);\n        // System.out.println(tree.lastKey() + \" \" + tree.get(tree.lastKey()));\n        int ans = n + 1;\n        int nextKey = tree.lastKey() + 1;\n        int iter = 0;\n        while (tree.lowerKey(nextKey) != null) {\n            nextKey = tree.lowerKey(nextKey);\n            for (int i : tree.get(nextKey)) {\n                ans = Math.min(ans, gap(nums, i, k));\n            }\n            if (++iter > 1) break;\n        }\n        return ans;\n    }\n    \n    int gap(int[] nums, int median, int k) {\n        int n = nums.length;\n        int ans = 0;\n        for (int i = 0; i <= (n - 1 - i); i++) {\n            int diff = Math.abs(nums[i] - nums[n - 1 - i]);\n            if (diff != median) {\n                if (Math.abs(nums[i] - k) >= median || nums[i] >= median) ans++;\n                else if (Math.abs(nums[n - i - 1] - k) >= median || nums[n - i - 1] >= median) ans++;\n                else ans += 2;\n            }\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1721488473",
    "subm_id": "1327423342"
}