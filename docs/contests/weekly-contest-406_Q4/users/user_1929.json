{
    "username": "manishtyagi05",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        \n        \n     sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        \n    sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n  \n    int horizontalPieces = 1;\n        \n      int verticalPieces = 1;\n\n    int i = 0, j =0;\n      long long totalCost =0;\n\n\n    while (i <horizontalCut.size() && j <verticalCut.size()) {\n        \n        if (horizontalCut[i] >= verticalCut[j]) {\n            \n              totalCost += static_cast<long long>(horizontalCut[i]) *verticalPieces;\n             horizontalPieces++;\n            i++;\n        } \n        \n        else {\n              \n            totalCost +=static_cast<long long>(verticalCut[j]) * horizontalPieces;\n              verticalPieces++;\n             j++;\n          }\n    }\n\n  \n    while (i <horizontalCut.size()) {\n        totalCost += static_cast<long long>(horizontalCut[i]) * verticalPieces;\n        i++;\n    }\n\n    while (j < verticalCut.size()) {\n        \n          totalCost += static_cast<long long>(verticalCut[j]) *horizontalPieces;\n        j++;\n    }\n\n       return totalCost;\n    }\n};",
    "submit_ts": "1720925940",
    "subm_id": "1320271015"
}