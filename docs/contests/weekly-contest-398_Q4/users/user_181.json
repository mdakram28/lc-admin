{
    "username": "HahahaHihihi",
    "submission": "typedef long long ll;\n\nclass Solution {\npublic:\n\tll mx = 61;\n\t// <posisi, jump, last, langkah>\n\tset <vector <ll>> st;\n\n\tvoid masukin(ll posisi, ll jump, ll last, ll langkah){\n\t\tauto p = st.lower_bound({posisi, jump, -1, -1});\n\t\tif(p == st.end()){\n\t\t\tst.insert({posisi, jump, last, langkah});\n\t\t}\n\t\telse{\n\t\t\tauto q = *p;\n\t\t\tif(q[0] == posisi && q[1] == jump && q[2] == last){\n\t\t\t\t// overwrite\n\t\t\t\tq[3] += langkah;\n\t\t\t\tst.erase(p);\n\t\t\t\tst.insert(q);\n\t\t\t}\n\t\t\telse{\n\t\t\t\tst.insert({posisi, jump, last, langkah});\n\t\t\t}\n\t\t}\n\t}\n\n    int waysToReachStair(int k) {\n    \tst.insert({1, 0, 1, 1});\n    \tll res = 0;\n    \twhile(!st.empty()){\n    \t\tauto p = *st.begin();\n    \t\tst.erase(st.begin());\n    \t\tif(p[0] == k) res += p[3];\n    \t\tif(p[2] == 0){\n    \t\t\t// harus loncat\n    \t\t\tif(p[0] + (1ll << p[1]) <= max(2ll * k, 10ll)){\n    \t\t\t\tmasukin(p[0] + (1ll << p[1]), p[1] + 1, 1, p[3]);\n    \t\t\t} \n    \t\t}\n    \t\telse if(p[2] == 1){\n    \t\t\tif(p[0] + (1ll << p[1]) <= max(2ll * k, 10ll)){\n    \t\t\t\tmasukin(p[0] + (1ll << p[1]), p[1] + 1, 1, p[3]);\n    \t\t\t}\n    \t\t\tif(p[0] != 0){\n    \t\t\t\tmasukin(p[0] - 1, p[1], 0, p[3]);\t\t\t\n    \t\t\t}\n    \t\t}\n    \t}\n    \treturn res;\n    }\n};",
    "submit_ts": 1716087816.0
}