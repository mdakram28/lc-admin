{
    "username": "ren-lei-h",
    "submission": "class Solution {\n    fun minimumOperations(nums: IntArray, target: IntArray): Long {\n        val qz = mutableListOf<MutableList<Long>>()\n        qz.add(mutableListOf())\n        for (i in 0 until nums.size) {\n            if (qz[qz.size - 1].size == 0) {\n                qz[qz.size - 1].add((nums[i] - target[i]).toLong())\n            } else if ((qz[qz.size - 1][qz[qz.size - 1].size - 1] < 0 && nums[i] - target[i] < 0) || (qz[qz.size - 1][qz[qz.size - 1].size - 1] > 0 && nums[i] - target[i] > 0)) {\n                qz[qz.size - 1].add((nums[i] - target[i]).toLong())\n            } else {\n                qz.add(mutableListOf())\n                qz[qz.size - 1].add((nums[i] - target[i]).toLong())\n            }\n        }\n        var ans = 0L\n        fun dfs(i: Long, j: Long, l: Long, list: MutableList<Long>, xt: MutableList<Long>) {\n            if (xt.size != 0) {\n                val to = xt[0]\n                xt.removeAt(0)\n                if (i <= to - 1) {\n                    dfs(i, to - 1, l, list, mutableListOf())\n                }\n                if (to + 1 <= j) {\n                    dfs(to + 1, j, l, list, xt)\n                }\n                return\n            }\n            if (i == j) {\n                ans += list[i.toInt()] - l\n                return\n            }\n            val listT = mutableListOf<Long>()\n            var mi = 0L\n            var id = -1L\n            for (q in i..j) {\n                val ji = q.toInt()\n                if (id == -1L) {\n                    mi = list[ji]\n                    id = q\n                } else if (mi > list[ji]) {\n                    listT.clear()\n                    mi = list[ji]\n                    id = q\n                } else if (mi == list[ji]) {\n                    listT.add(q)\n                }\n            }\n            ans += mi - l\n            if (i <= id - 1) {\n                dfs(i, id - 1, mi, list, mutableListOf())\n            }\n            if (id + 1 <= j) {\n                dfs(id + 1, j, mi, list, listT)\n            }\n        }\n        qz.forEach {\n            if (it[0] < 0) {\n                dfs(\n                    0, (it.size - 1).toLong(), 0, it.map { it * -1 }.toMutableList(),\n                    mutableListOf()\n                )\n            } else {\n                dfs(0, (it.size - 1).toLong(), 0, it, mutableListOf())\n            }\n        }\n        return ans\n    }\n}",
    "submit_ts": "1721533445",
    "subm_id": "548397715"
}