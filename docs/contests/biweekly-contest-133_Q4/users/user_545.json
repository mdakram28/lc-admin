{
    "username": "king_leetcode",
    "submission": "/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\n *                       JAI SHREE RAM                                      *\n **~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~**\n *                    It's Not Over, Until I Win                            *\n **~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/\n#include <bits/stdc++.h>\nusing namespace std;\n\n/* clang-format off */\n/* TYPES  */\n\n#define ll long long int\n#define pii pair<ll, ll>\n#define pll pair<ll , ll>\n#define vi vector<int>\n#define vll vector<ll>\n#define mii map<ll, ll>\n#define uii unordered_map<ll, ll>\n#define si set<ll>\n#define sc set<char>\n#define umc unordered_map<char,int>\n#define ums unordered_map<string,int>\n \n/* FUNCTIONS */\n\n#define f(i,s,e) for(long long int i=s;i<e;i++)\n#define r(i,e,s) for(long long int i=e;i>s;i--)\n#define cf(i,s,e) for(long long int i=s;i<=e;i++)\n#define rf(i,e,s) for(long long int i=e-1;i>=s;i--)\n#define ft first\n#define sd second\n#define pb push_back\n#define eb emplace_back\n#define fi first\n#define se second\n#define INF LLONG_MAX // 9.223372e+18\n\n/* PRINTS */\n\ntemplate <class T>\nvoid print_v(vector<T> &v) { cout << \"{\"; for (auto x : v) cout << x << \",\"; cout << \"\\b}\"; }\n \n/* UTILS */\n\n#define MOD 1000000007\n#define PI 3.1415926535897932384626433832795\n#define LL_INF 9223372036854775807\nconst ll infl = 0x3f3f3f3f3f3f3f3fLL;\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define lowbit(x) ((x) & (-x))\n// #define read(type) readInt<type>()\nll min(ll a,int b) { if (a<b) return a; return b; }\nll min(int a,ll b) { if (a<b) return a; return b; }\nll max(ll a,int b) { if (a>b) return a; return b; }\nll max(int a,ll b) { if (a>b) return a; return b; }\nll gcd(ll a,ll b) { if (b==0) return a; return gcd(b, a%b); }\nll lcm(ll a,ll b) { return a * b / gcd(a,b); }\nstring to_upper(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='a' && a[i]<='z') a[i]-='a'-'A'; return a; }\nstring to_lower(string a) { for (int i=0;i<(int)a.size();++i) if (a[i]>='A' && a[i]<='Z') a[i]+='a'-'A'; return a; }\nbool prime(ll a) { if (a==1) return 0; for (int i=2;i<=round(sqrt(a));++i) if (a%i==0) return 0; return 1; }\nvoid yes() { cout<<\"YES\\n\"; }\nvoid no() { cout<<\"NO\\n\"; }\ninline int read() {int x=0,f=1,ch=getchar();while (ch<'0'||ch>'9'){if (ch=='-') f=-1; ch=getchar();}while (ch>='0'&&ch<='9'){x=(x<<3)+(x<<1)+(ch-'0'); ch=getchar();}return f==1?x:-x;}\n\n/*  All Required define Pre-Processors and typedef Constants */\n\ntypedef long int int32;\ntypedef unsigned long int uint32;\ntypedef long long int int64;\ntypedef unsigned long long int  uint64;\ntypedef pair<int, int> PII;\ntypedef pair<PII, int> PIII;\n\n/* clang-format on */\n\nconst ll maxn = 2e5 + 7;\nconst ll inf = 1e18;\nconst ll da[] = {-1, 0, 1, 0};\nconst ll db[] = {0, 1, 0, -1};\nconst ll dx[] = {-1, -1, 0, 1, 1, 1, 0, -1};\nconst ll dy[] = {0, 1, 1, 1, 0, -1, -1, -1};\nconst int sqr = 405;\nconst int mod = 1e9 + 7;\nconst int N = 2e5;\n\n#include <vector>\n#include <unordered_map>\nusing namespace std;\n\nclass Solution {\nprivate:\n    static const int MAX_INVERSIONS = 400;\n\n    // Function to convert requirements to a map\n    unordered_map<int, int> convertRequirementsToMap(const vector<vector<int>>& requirements) {\n        unordered_map<int, int> endIdxToInversionCnt;\n        for (const auto& req : requirements) {\n            endIdxToInversionCnt[req[0] + 1] = req[1];\n        }\n        return endIdxToInversionCnt;\n    }\n\n    // Function to initialize the dp array\n    vector<vector<long long>> initializeDP(int n) {\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n        return dp;\n    }\n\n    // Function to fill the dp array with permutations\n    void fillDPArray(int n, vector<vector<long long>>& dp, const unordered_map<int, int>& requirementsMap) {\n        for (int length = 1; length <= n; ++length) {\n            for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; ++currentInversions) {\n                dp[length][currentInversions] = 0;\n                for (int newPosition = 0; newPosition < length; ++newPosition) {\n                    int previousInversions = currentInversions - newPosition;\n                    if (previousInversions >= 0) {\n                        dp[length][currentInversions] = (dp[length][currentInversions] + dp[length - 1][previousInversions]) % MOD;\n                    }\n                }\n            }\n\n            if (requirementsMap.count(length) > 0) {\n                int requiredInversions = requirementsMap.at(length);\n                for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; ++currentInversions) {\n                    if (currentInversions != requiredInversions) {\n                        dp[length][currentInversions] = 0;\n                    }\n                }\n            }\n        }\n    }\n\n    // Function to calculate the result from the dp array\n    int calculateResult(int n, const vector<vector<long long>>& dp) {\n        long long result = 0;\n        for (int currentInversions = 0; currentInversions <= MAX_INVERSIONS; ++currentInversions) {\n            result = (result + dp[n][currentInversions]) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        auto requirementsMap = convertRequirementsToMap(requirements);\n        auto dp = initializeDP(n);\n        fillDPArray(n, dp, requirementsMap);\n        return calculateResult(n, dp);\n    }\n};\n",
    "submit_ts": 1719070342.0
}