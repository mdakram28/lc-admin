{
    "username": "rupa6",
    "submission": "struct Jump {\n    int where;\n    bool lastD;\n    int jump;\n    \n    Jump(int where, bool lastD, int jump): where(where), lastD(lastD), jump(jump) {};\n    \n    bool operator ==(const Jump& other) const {\n        return where == other.where && lastD == other.lastD && jump == other.jump;\n    }\n    \n    bool operator <(const Jump& other) const {\n        if(where != other.where) return where < other.where;\n        if(jump != other.jump) return jump < other.jump;\n        return lastD < other.lastD;\n    }\n};\n\nclass Solution {\npublic:\n    map<Jump, int> dp;\n    int k;\n    \n    #define dpp dp[entry]\n    \n    int solve(int where, bool dec, int jmp) {\n        // cout<<where<<' '<<dec<<' '<<jmp<<endl;\n        if(where>k+1) return 0;\n        auto entry = Jump(where, dec, jmp);\n        if(dp.find(entry) != dp.end()) return dpp;\n        \n        dpp = (where==k);\n        dpp += solve(where+(1<<jmp), false, jmp+1);\n        if(!dec && where>0) dpp+=solve(where-1, true, jmp);\n        // cout<<where<<' '<<dec<<' '<<jmp<<\"::\"<<dpp<<endl;\n        return dpp;\n    }\n    \n    int waysToReachStair(int kk) {\n        k=kk;\n        return solve(1, 0, 0);\n    }\n};",
    "submit_ts": "1716087588",
    "subm_id": "1261788303"
}