{
    "username": "Nehcled",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        string_view sv(target);\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        map<string_view, int> m;\n        for (int i = 0; i < words.size(); i++) {\n            string_view tsv(words[i]);\n            if (m.find(tsv) == m.end() || costs[i] < m[tsv]) {\n                m[tsv] = costs[i];\n            }\n        }\n\n        for (int i = 0; i <= n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n\n            for (const auto& wordCostPair : m) {\n                string_view word = wordCostPair.first;\n                int wordCost = wordCostPair.second;\n                int len = word.size();\n\n                if (i + len <= n && sv.substr(i, len) == word) {\n                    dp[i + len] = min(dp[i + len], dp[i] + wordCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324296",
    "subm_id": "1312396143"
}