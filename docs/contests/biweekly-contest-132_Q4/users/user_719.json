{
    "username": "Ometek",
    "submission": "\n#include<iostream>\n#include<vector>\n#include<map>\nusing namespace std;\n\nclass Solution {   \npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, -1));\n        \n        map<pair<int, int>, int> mp_dp;\n        vector<pair<int, int>> maxi(k + 1, {nums[0], nums[0]});\n        \n        for (int j = 0; j <= k; j++) {\n            dp[0][j] = 1;\n            mp_dp[{nums[0], j}] = 1;\n        }\n        \n        for (int i = 1; i < n; i++) {\n            // k = 0\n            if (mp_dp.find({nums[i], 0}) != mp_dp.end()) {\n                mp_dp[{nums[i], 0}] += 1;\n            }\n            else {\n                mp_dp[{nums[i], 0}] = 1;\n            }\n            dp[i][0] = mp_dp[{nums[i], 0}];\n\n                if (dp[i][0] >= mp_dp[{maxi[0].first, 0}]) {\n                    maxi[0].second = maxi[0].first;\n                    maxi[0].first = nums[i];\n                }\n                else if (dp[i][0] >= mp_dp[{maxi[0].second, 0}]) {\n                    maxi[0].second = nums[i];\n                }\n                else if (maxi[0].first == maxi[0].second) {\n                    maxi[0].second = nums[i];\n                }\n\n            \n            // k != 0\n            for (int j = 1; j <= k; j++) {\n                int same = 1;\n                int diff = 0;\n                \n                if (mp_dp.find({nums[i], j}) != mp_dp.end()) {\n                    same = mp_dp[{nums[i], j}] + 1;\n                }\n                \n                if (nums[i] != maxi[j - 1].first) {\n                    diff = mp_dp[{maxi[j - 1].first, j - 1}] + 1;\n                }\n                else if (nums[i] != maxi[j - 1].second) {\n                    diff = mp_dp[{maxi[j - 1].second, j - 1}] + 1;\n                }\n\n                dp[i][j] = max(dp[i][j], max(same, diff));\n                mp_dp[{nums[i], j}] = dp[i][j];\n                \n                if (dp[i][j] >= mp_dp[{maxi[j].first, j}]) {\n                    maxi[j].second = maxi[j].first;\n                    maxi[j].first = nums[i];\n                }\n                else if (dp[i][j] >= mp_dp[{maxi[j].second, j}]) {\n                    maxi[j].second = nums[i];\n                }\n                else if (maxi[j].first == maxi[j].second) {\n                    maxi[j].second = nums[i];\n                }\n            }\n        }\n\n        int ans = 0;\n        for (int i = 0; i < n; i++) {\n            ans = max(ans, dp[i][k]);\n        }\n\n\n\n        return ans;\n    }\n};",
    "submit_ts": 1717862350.0
}