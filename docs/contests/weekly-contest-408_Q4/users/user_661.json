{
    "username": "leftshifted",
    "submission": "class DSU:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [1] * n\n    \n    def find(self, x):\n        if self.parent[x] != x:\n            self.parent[x] = self.find(self.parent[x])\n        return self.parent[x]\n    \n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        \n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.parent[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.parent[rootX] = rootY\n            else:\n                self.parent[rootY] = rootX\n                self.rank[rootX] += 1\n\ndef dist_sq(x1, y1, x2, y2):\n    return (x1 - x2) ** 2 + (y1 - y2) ** 2\n\ndef circles_intersect(x1, y1, r1, x2, y2, r2):\n    return dist_sq(x1, y1, x2, y2) <= (r1 + r2) ** 2\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        dsu = DSU(n + 4)\n\n        l = n\n        r = n + 1\n        b = n + 2\n        t = n + 3\n\n        for i, (xi, yi, ri) in enumerate(circles):\n            if xi - ri <= 0: dsu.union(i, l)\n            if xi + ri >= X: dsu.union(i, r)\n            if yi - ri <= 0: dsu.union(i, b)\n            if yi + ri >= Y: dsu.union(i, t)\n            for j in range(i):\n                xj, yj, rj = circles[j]\n                if circles_intersect(xi, yi, ri, xj, yj, rj): dsu.union(i, j)\n\n        if dsu.find(l) == dsu.find(r) or dsu.find(b) == dsu.find(t) or dsu.find(t) == dsu.find(r) or dsu.find(l) == dsu.find(b):\n            return False\n\n        return True",
    "submit_ts": "1722137616",
    "subm_id": "1335768867"
}