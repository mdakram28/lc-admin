{
    "username": "AYUSH_BHASKAR_SINGH",
    "submission": "class Solution {\nprivate:\n    int MOD = 1e9+7;\n    // int 400 = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> mp;\n        for (auto it : requirements) {\n            int temp = it[0];\n            mp[temp+1] = it[1];\n        }\n\n        vector<vector<long long>> vec(n + 1, vector<long long>(400 + 1, 0));\n        vec[0][0] = 1;\n\n        for (int le = 1; le <= n; le++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int newPos = 0; newPos < le; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        vec[le][inv] = (vec[le][inv] + vec[le - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (mp.find(le) != mp.end()) {\n                int final = mp[le];\n                for (int inv = 0; inv <= 400; inv++) {\n                    if (inv != final) {\n                        vec[le][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long long ans = 0;\n        for (auto count : vec[n]) {\n            ans = (ans + count) % MOD;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1719071527.0
}