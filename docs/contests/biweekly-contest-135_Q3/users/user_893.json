{
    "username": "Deepanshu_30",
    "submission": "from typing import List\nfrom collections import defaultdict\nimport bisect\n\nclass Solution:\n    def minChanges(self, nums: List[int], k: int) -> int:\n        def calculate_diff_values(nums: List[int], k: int) -> (List[int], defaultdict):\n            d = defaultdict(list)\n            x_values = []\n            n = len(nums)\n            \n            for i in range(n // 2):\n                jaguar = nums[i]\n                lion = nums[n - i - 1]\n                diff = abs(jaguar - lion)\n                max_val = max(jaguar, lion, k - jaguar, k - lion)\n                d[diff].append(max_val)\n                x_values.append(max_val)\n                \n            return x_values, d\n        \n        def compute_min_changes(x_values: List[int], diff_dict: defaultdict, n: int) -> int:\n            x_values.sort()\n            min_changes = n\n            \n            for diff, values in diff_dict.items():\n                t = bisect.bisect_left(x_values, diff)\n                t = t * 2 + (n // 2 - t)\n                \n                for val in values:\n                    if val < diff:\n                        t -= 2\n                    else:\n                        t -= 1\n                \n                min_changes = min(min_changes, t)\n            \n            return min_changes\n\n        # Compute differences and value lists\n        x_values, diff_dict = self.calculate_diff_values(nums, k)\n        \n        # Compute minimum changes required\n        result = self.compute_min_changes(x_values, diff_dict, len(nums))\n        \n        return result\n\n    def calculate_diff_values(self, nums: List[int], k: int) -> (List[int], defaultdict):\n        d = defaultdict(list)\n        x_values = []\n        n = len(nums)\n        \n        for i in range(n // 2):\n            jaguar = nums[i]\n            lion = nums[n - i - 1]\n            diff = abs(jaguar - lion)\n            max_val = max(jaguar, lion, k - jaguar, k - lion)\n            d[diff].append(max_val)\n            x_values.append(max_val)\n            \n        return x_values, d\n    \n    def compute_min_changes(self, x_values: List[int], diff_dict: defaultdict, n: int) -> int:\n        x_values.sort()\n        min_changes = n\n        \n        for diff, values in diff_dict.items():\n            t = bisect.bisect_left(x_values, diff)\n            t = t * 2 + (n // 2 - t)\n            \n            for val in values:\n                if val < diff:\n                    t -= 2\n                else:\n                    t -= 1\n            \n            min_changes = min(min_changes, t)\n        \n        return min_changes\n",
    "submit_ts": "1721488614",
    "subm_id": "1327427851"
}