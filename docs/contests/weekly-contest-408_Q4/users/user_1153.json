{
    "username": "sauhard_04",
    "submission": "from collections import deque\nimport math\nfrom typing import List\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \n        def bfs_traversal(graph, start_node, target1, target2, total_nodes):\n            queue = deque([start_node])\n            visited = [False] * (total_nodes + 4)\n            visited[start_node] = True\n\n            while queue:\n                current = queue.popleft()\n                for neighbor in graph[current]:\n                    if not visited[neighbor]:\n                        queue.append(neighbor)\n                        visited[neighbor] = True\n            return visited[target1] or visited[target2]\n\n        total_obstacles = len(circles)\n        adj_list = [[] for _ in range(total_obstacles + 4)]\n\n        for i in range(total_obstacles):\n            x, y, r = circles[i]\n            if x <= r:\n                adj_list[total_obstacles].append(i)\n                adj_list[i].append(total_obstacles)\n            if X - x <= r:\n                adj_list[total_obstacles + 2].append(i)\n                adj_list[i].append(total_obstacles + 2)\n            if y <= r:\n                adj_list[total_obstacles + 1].append(i)\n                adj_list[i].append(total_obstacles + 1)\n            if Y - y <= r:\n                adj_list[total_obstacles + 3].append(i)\n                adj_list[i].append(total_obstacles + 3)\n            for j in range(i + 1, total_obstacles):\n                xj, yj, rj = circles[j]\n                dist = math.sqrt((x - xj)**2 + (y - yj)**2)\n                if r + rj >= dist:\n                    adj_list[i].append(j)\n                    adj_list[j].append(i)\n\n        is_corner_blocked = 0\n        is_corner_blocked = max(is_corner_blocked, bfs_traversal(adj_list, total_obstacles, total_obstacles + 1, total_obstacles + 2, total_obstacles + 4))  # Check for bottom-left corner\n        is_corner_blocked = max(is_corner_blocked, bfs_traversal(adj_list, total_obstacles + 3, total_obstacles + 2, total_obstacles + 1, total_obstacles + 4))  # Check for top-right corner\n\n        return is_corner_blocked == 0\n",
    "submit_ts": "1722138999",
    "subm_id": "1335805155"
}