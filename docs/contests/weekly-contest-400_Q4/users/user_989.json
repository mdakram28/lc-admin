{
    "username": "ankuraj_27",
    "submission": "class segtree\n{\npublic:\n    vector<int> tree;\n    int n;\n    segtree(vector<int> &nums)\n    {\n        n = nums.size();\n        tree.resize(4 * n);\n        bd(nums, 0, 0, n - 1);\n    }\n    void bd(vector<int> &nums, int curr, int st, int en)\n    {\n        if (st == en)\n            tree[curr] = nums[st];\n        else\n        {\n            int md = (st + en) / 2;\n            bd(nums, 2 * curr + 1, st, md);\n            bd(nums, 2 * curr + 2, md + 1, en);\n            tree[curr] = tree[2 * curr + 1] & tree[2 * curr + 2];\n        }\n    }\n    int qr(int l, int r)\n    {\n        return qr(0, 0, n - 1, l, r);\n    }\n    int qr(int curr, int st, int en, int l, int r)\n    {\n        if (r < st || en < l)\n        {\n            return INT_MAX;\n        }\n        if (l <= st && en <= r)\n        {\n            return tree[curr];\n        }\n        int md = (st + en) / 2;\n        int p1 = qr(2 * curr + 1, st, md, l, r);\n        int p2 = qr(2 * curr + 2, md + 1, en, l, r);\n        return p1 & p2;\n    }\n};\n\nclass Solution {\npublic:\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        segtree seg(nums);\n        int var = INT_MAX;\n        for (int i = 0; i < n; i++)\n        {\n            int l = i - 1, r = n - 1, md;\n            while (r-1>l)\n            {\n                md = l+(r-l)/2;\n                if (seg.qr(i, md) >= k)\n                    l = md;\n                else\n                    r = md;\n            }\n            if (l != i - 1)\n                var = min(var, abs(seg.qr(i, l) - k));\n            var = min(var, abs(k - seg.qr(i, r)));\n        }\n        return var;\n    }\n};",
    "submit_ts": "1717300537",
    "subm_id": "1274847206"
}