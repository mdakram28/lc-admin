{
    "username": "charliesabino",
    "submission": "class LST:\n    def __init__(self, arr):\n        self.n = len(arr)\n        self.tree = [0] * (4 * self.n)\n        self.lazy = [0] * (4 * self.n)\n        self.build(arr, 1, 0, self.n - 1)\n\n    def build(self, arr, node, start, end):\n        if start == end:\n            self.tree[node] = arr[start]\n            return\n        mid = (start + end) // 2\n        self.build(arr, 2 * node, start, mid)\n        self.build(arr, 2 * node + 1, mid + 1, end)\n        self.tree[node] = self.tree[2 * node] + self.tree[2 * node + 1]\n\n    def propagate(self, node, start, end):\n        if self.lazy[node] != 0:\n            self.tree[node] = 0  # Set the entire range to 0\n            if start != end:\n                self.lazy[2 * node] = 1\n                self.lazy[2 * node + 1] = 1\n            self.lazy[node] = 0\n\n    def update_range(self, node, start, end, l, r):\n        self.propagate(node, start, end)\n        if start > r or end < l:\n            return\n        if l <= start and end <= r:\n            self.tree[node] = 0\n            if start != end:\n                self.lazy[2 * node] = 1\n                self.lazy[2 * node + 1] = 1\n            return\n        mid = (start + end) // 2\n        self.update_range(2 * node, start, mid, l, r)\n        self.update_range(2 * node + 1, mid + 1, end, l, r)\n        self.tree[node] = self.tree[2 * node] + self.tree[2 * node + 1]\n\n    def query_range(self, node, start, end, l, r):\n        self.propagate(node, start, end)\n        if start > r or end < l:\n            return 0\n        if l <= start and end <= r:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_sum = self.query_range(2 * node, start, mid, l, r)\n        right_sum = self.query_range(2 * node + 1, mid + 1, end, l, r)\n        return left_sum + right_sum\n\n    def update(self, l, r):\n        self.update_range(1, 0, self.n - 1, l, r)\n\n    def query(self, l, r):\n        return self.query_range(1, 0, self.n - 1, l, r)\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        st = LST([1] * n)\n        res = []\n        for a, b in queries:\n            st.update(a + 1, b - 1)\n            res.append(st.query(0, n - 1) - 1)\n        return res",
    "submit_ts": "1722740271",
    "subm_id": "1343715530"
}