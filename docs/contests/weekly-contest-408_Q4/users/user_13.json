{
    "username": "Superultra",
    "submission": "#include <bits/stdc++.h>\nusing namespace std; \n\n#define FOR(i, x, y) for (int i = x; i < y; i++)\n#define ll long long\n#define pll pair<ll, ll>\n#define pii pair<int, int>\n\nstruct DSU{\n    vector<int> par, sz;\n    void init(int N){\n        par.clear(); sz.clear();\n        for (int i = 0; i <= N + 5; i++) par.push_back(i), sz.push_back(1);\n    }\n    int get(int i){ return i == par[i] ? i : par[i] = get(par[i]); }\n    void merge(int a, int b){\n        a = get(a); b = get(b); if (a == b) return;\n        if (sz[a] > sz[b]) swap(a, b);\n        par[a] = b; sz[b] += sz[a];\n    }\n};\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& A) {\n        int n = A.size();\n        DSU dsu;\n        dsu.init(n + 10);\n\n        for (int i = 0; i < n; i++){\n            ll x1 = A[i][0];\n            ll y1 = A[i][1];\n            ll r1 = A[i][2];\n\n            for (int j = i + 1; j < n; j++){\n                ll x2 = A[j][0];\n                ll y2 = A[j][1];\n                ll r2 = A[j][2];\n\n                ll sqdist = (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n\n                if (sqdist <= (r1 + r2) * (r1 + r2)){\n                    dsu.merge(i, j);\n                }\n            }\n            // right and left\n            if (x1 + r1 >= X){\n                dsu.merge(i, n + 1);\n            }\n            if (x1 - r1 <= 0)\n                dsu.merge(i, n + 3);\n\n            // touch top and bottom\n            if (y1 + r1 >= Y)\n                dsu.merge(i, n);\n            if (y1 - r1 <= 0)\n                dsu.merge(i, n + 2);\n        }\n        bool c1 = (dsu.get(n) == dsu.get(n + 1));\n        bool c2 = (dsu.get(n + 2) == dsu.get(n + 3));\n        bool c3 = (dsu.get(n) == dsu.get(n + 2));\n        bool c4 = (dsu.get(n + 1) == dsu.get(n + 3));\n        // cout <<c1<<c2<<c3<<c4<<endl;\n        return !(c1 or c2 or c3 or c4);\n    }\n};",
    "submit_ts": "1722134433",
    "subm_id": "1335666053"
}