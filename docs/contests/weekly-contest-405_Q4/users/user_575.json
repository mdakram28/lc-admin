{
    "username": "randhawaez",
    "submission": "class Node:\n    def __init__(self,val):\n        self.val = val\n        self.neigh = {}\n        #if its the end we set the cost\n        self.cost = float(\"inf\")\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        root = Node(\"\")\n        #first set up the trie\n        for k in range(len(words)):\n            w = words[k]\n            node = root\n            for index in range(len(w)):\n                char = w[index]\n                if char in node.neigh:\n                    node = node.neigh[char]\n                else:\n                    newnode = Node(char)\n                    node.neigh[char] = newnode\n                    node = node.neigh[char]\n            node.cost = min(node.cost,costs[k])\n\n\n\n\n\n\n\n        dp = [float(\"inf\")]*len(target)\n        dp+=[0]\n        for i in range(len(dp)-1,-1,-1):\n            #iterate through the words to see if it is possible\n\n            #go thourgh the trie\n            node = root\n\n            index = i\n\n            while index<len(target):\n                if target[index] in node.neigh:\n                    node = node.neigh[target[index]]\n                    index+=1\n                else:\n                    break\n                dp[i] = min(dp[i],node.cost+dp[index])\n\n        if dp[0]==float(\"inf\"):\n            return -1\n        return dp[0]\n        ",
    "submit_ts": "1720322159",
    "subm_id": "1312342284"
}