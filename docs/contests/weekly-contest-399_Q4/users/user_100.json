{
    "username": "inversionpeter",
    "submission": "#define MOD 1000000007\n\nlong long ST[50000 << 2][5];\n\nvoid BuildTree(int index, int left, int right, vector <int> &numbers) {\n    if (left == right) {\n        ST[index][0] = ST[index][1] = ST[index][2] = 0;\n        ST[index][3] = numbers[left];\n        ST[index][4] = max(0, numbers[left]);\n        return;\n    }\n    int middle = (left + right) >> 1;\n    BuildTree(index << 1, left, middle, numbers);\n    BuildTree((index << 1) + 1, middle + 1, right, numbers);\n    ST[index][0] = max({ 0LL, \n                        ST[index << 1][0] + ST[(index << 1) + 1][0], \n                        ST[index << 1][0] + ST[(index << 1) + 1][2], \n                        ST[index << 1][1] + ST[(index << 1) + 1][0]  \n                       });\n    ST[index][1] = max({ 0LL, \n                        ST[index << 1][0] + ST[(index << 1) + 1][1], \n                        ST[index << 1][0] + ST[(index << 1) + 1][3], \n                        ST[index << 1][1] + ST[(index << 1) + 1][1] \n                       });\n    ST[index][2] = max({ 0LL, \n                        ST[index << 1][2] + ST[(index << 1) + 1][0], \n                        ST[index << 1][2] + ST[(index << 1) + 1][2], \n                        ST[index << 1][3] + ST[(index << 1) + 1][0] \n                       });\n    ST[index][3] = max({ 0LL, \n                        ST[index << 1][2] + ST[(index << 1) + 1][1], \n                        ST[index << 1][2] + ST[(index << 1) + 1][3], \n                        ST[index << 1][3] + ST[(index << 1) + 1][1] \n                       });\n    ST[index][4] = max({ 0LL, \n                        ST[index][0], \n                        ST[index][1], \n                        ST[index][2], \n                        ST[index][3] \n                        });\n}\n\nvoid Update(int index, int left, int right, int targetIndex, vector <int> &numbers) {\n    if (left == right) {\n        ST[index][0] = ST[index][1] = ST[index][2] = 0;\n        ST[index][3] = numbers[left];\n        ST[index][4] = max(0, numbers[left]);\n        return;\n    }\n    int middle = (left + right) >> 1;\n    if (targetIndex <= middle) {\n        Update(index << 1, left, middle, targetIndex, numbers);\n    }\n    else {\n        Update((index << 1) + 1, middle + 1, right, targetIndex, numbers);\n    }\n    ST[index][0] = max({ 0LL, \n                        ST[index << 1][0] + ST[(index << 1) + 1][0], \n                        ST[index << 1][0] + ST[(index << 1) + 1][2], \n                        ST[index << 1][1] + ST[(index << 1) + 1][0]  \n                       });\n    ST[index][1] = max({ 0LL, \n                        ST[index << 1][0] + ST[(index << 1) + 1][1], \n                        ST[index << 1][0] + ST[(index << 1) + 1][3], \n                        ST[index << 1][1] + ST[(index << 1) + 1][1] \n                       });\n    ST[index][2] = max({ 0LL, \n                        ST[index << 1][2] + ST[(index << 1) + 1][0], \n                        ST[index << 1][2] + ST[(index << 1) + 1][2], \n                        ST[index << 1][3] + ST[(index << 1) + 1][0] \n                       });\n    ST[index][3] = max({ 0LL, \n                        ST[index << 1][2] + ST[(index << 1) + 1][1], \n                        ST[index << 1][2] + ST[(index << 1) + 1][3], \n                        ST[index << 1][3] + ST[(index << 1) + 1][1] \n                       });\n    ST[index][4] = max({ 0LL, \n                        ST[index][0], \n                        ST[index][1], \n                        ST[index][2], \n                        ST[index][3] \n                        });\n}\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        memset(ST, 0, sizeof(ST));\n        BuildTree(1, 0, nums.size() - 1, nums);\n        //cout << max({ 0, nums[0], nums[1] });\n        long long total = 0;\n        for (vector <int> &query : queries) {\n            nums[query[0]] = query[1];\n            Update(1, 0, nums.size() - 1, query[0], nums);\n            total += ST[1][4];\n        }\n        return total % MOD;\n    }\n};",
    "submit_ts": 1716694389.0
}