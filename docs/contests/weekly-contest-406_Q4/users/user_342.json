{
    "username": "Felel",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        long long h_cuts = 0, v_cuts = 0;\n        long long res = 0;\n\n        auto comp = [](pair<char, int>& a, pair<char, int>& b){return a.second < b.second;};\n        priority_queue<pair<char, int>, vector<pair<char, int>>, decltype(comp)> pq(comp);\n        for (int i=0; i<m-1; ++i) pq.push(make_pair('h', horizontalCut[i]));\n        for (int i=0; i<n-1; ++i) pq.push(make_pair('v', verticalCut[i]));\n        while (!pq.empty()) {\n            pair<char, int> cur = pq.top();\n            pq.pop();\n            if (cur.first == 'h') {\n                res += (v_cuts + 1) * cur.second;\n                ++h_cuts;\n            } else {\n                res += (h_cuts + 1) * cur.second;\n                ++v_cuts;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720925432",
    "subm_id": "1320254540"
}