{
    "username": "luv2027",
    "submission": "class Solution {\npublic:\nconst int MOD = 1e9+7;\nconst int MAX_INVERSIONS = 400;\n\nunordered_map<int, int> reqMap;\nvector<vector<vector<long long>>> dp;\n\nlong long rec(int length, int inversions, int n) {\n    if (length == 0) {\n        if(inversions == 0) return 1;\n        return 0;\n    }\n\n    if (dp[length][inversions][0] != -1) {\n        return dp[length][inversions][0];\n    }\n\n    long long result = 0;\n    for (int newPos = 0; newPos < length; newPos++) {\n        int prevInv = inversions - newPos;\n        if (prevInv >= 0) {\n            result = (result + rec(length - 1, prevInv, n)) % MOD;\n        }\n    }\n\n    if (reqMap.find(length) != reqMap.end()) {\n        int targetInv = reqMap[length];\n        if (inversions != targetInv) {\n            result = 0;\n        }\n    }\n    return dp[length][inversions][0] = result;\n}\n\nint numberOfPermutations(int n, vector<vector<int>>& requirements) {\n    reqMap.clear();\n    for (const auto& req : requirements) {\n        reqMap[req[0] + 1] = req[1];\n    }\n\n    dp.assign(n + 1, vector<vector<long long>>(MAX_INVERSIONS + 1, vector<long long>(1, -1)));\n\n    long long ans = 0;\n    for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n        ans = (ans + rec(n, inv, n)) % MOD;\n    }\n\n    return ans;\n}\n};",
    "submit_ts": 1719071896.0
}