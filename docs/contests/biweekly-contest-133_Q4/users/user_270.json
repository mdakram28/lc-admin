{
    "username": "Vnn04",
    "submission": "const int MOD = 1e9 + 7;\n\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int> invCount(n + 1, -1);\n        for (auto& req : requirements) {\n            invCount[req[0] + 1] = req[1];\n        }\n\n        vector<vector<int>> dp(n + 1, vector<int>(n * (n - 1) / 2 + 1, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            vector<int> prefixSum(n * (n - 1) / 2 + 1, 0);\n            prefixSum[0] = dp[len - 1][0];\n            for (int inv = 1; inv <= n * (n - 1) / 2; ++inv) {\n                prefixSum[inv] = (prefixSum[inv - 1] + dp[len - 1][inv]) % MOD;\n            }\n\n            for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n                if (inv >= len) {\n                    dp[len][inv] = (prefixSum[inv] - prefixSum[inv - len] + MOD) % MOD;\n                } else {\n                    dp[len][inv] = prefixSum[inv];\n                }\n            }\n\n            if (invCount[len] != -1) {\n                for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n                    if (inv != invCount[len]) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        int totalWays = 0;\n        for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n            totalWays = (totalWays + dp[n][inv]) % MOD;\n        }\n\n        return totalWays;    \n    }\n};",
    "submit_ts": 1719067909.0
}