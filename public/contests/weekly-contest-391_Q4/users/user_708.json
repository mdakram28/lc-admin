{
    "username": "MinhBaoSoCool",
    "submission": "class Item {\npublic:\n    int value;\n    int index;\n    Item(int v, int i){\n        value=v;\n        index=i;\n    }\n};\n\nclass Solution {\npublic:\n    \n    Item calcA(vector<int>& point, int way, int i){\n        if(way==0) return Item(point[0]+point[1], i);\n        if(way==1) return Item(point[0]-point[1], i);\n        if(way==2) return Item(-point[0]+point[1], i);\n        return Item(-point[0]-point[1], i);\n    }\n    \n    static bool cmpItem(Item i1, Item i2)\n    {\n        return (i1.value < i2.value);\n    }\n    \n    vector<vector<Item>> calcP(vector<vector<int>>& points){\n        vector<vector<Item>> p;\n        for(int way=0;way<4;++way){\n            vector<Item> k;\n            for(int i=0;i<points.size();++i){\n                vector<int> point=points[i];\n                Item a=calcA(point, way, i);\n                k.push_back(a);\n            }\n            sort(k.begin(), k.end(), cmpItem);\n            p.push_back(k);\n        }\n        return p;\n    }\n    \n    int getLargestIndNotI(vector<Item>& pway, int ind){\n        int n=pway.size();\n        if(pway[n-1].index==ind) return n-2;\n        return n-1;\n    }\n    \n    int getSmallestIndNotI(vector<Item>& pway, int ind){\n        if(pway[0].index==ind)return 1;\n        return 0;\n    }\n    \n    int handleRemovePointI(vector<vector<Item>>& p, int ind){\n        int ans=0;\n        for(int way=0;way<p.size();++way){\n            int largestInd=getLargestIndNotI(p[way], ind);\n            int smallestInd=getSmallestIndNotI(p[way], ind);\n            ans=max(ans, p[way][largestInd].value-p[way][smallestInd].value);\n        }\n        return ans;\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        int ans = 2e8+10;\n        \n        vector<vector<Item>> p=calcP(points);\n        \n        for(int i=0;i<points.size();++i){\n            int tmp = handleRemovePointI(p, i);\n            ans=min(ans, tmp);\n        }\n        return ans;\n    }\n};"
}