{
    "username": "spsunilpatidar",
    "submission": "class Solution {\npublic:\n     int bfs(vector<vector<int>> &vec, int s, int sum, int sum2, int nod) {\n          vector<int> vis(nod + 4, 0);\n          queue<int> qu;\n          qu.push(s);\n          vis[s] = 1;\n    \n       while (!qu.empty()) {\n           int u = qu.front();\n           qu.pop();\n          for (int v : vec[u]) {\n              if (!vis[v]) {\n                  qu.push(v);\n                  vis[v] = 1;\n             }\n           }\n       }\n     \n        int res=vis[sum] || vis[sum2];\n        return res;\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        vector<pair<pair<int, int>, int>> vec(circles.size());\n         vector<vector<int>>vec2(circles.size() + 4);\n              int n=circles.size();\n        for (int i = 0; i < n; i++) {\n            vec[i].first.first=circles[i][0];\n            vec[i].first.second=circles[i][1];\n            vec[i].second=circles[i][2];\n        }\n         for (int i = 0; i < n; ++i) {\n             \n            if (vec[i].first.first <= vec[i].second) {\n                vec2[n].push_back(i);\n                vec2[i].push_back(n);\n            }\n            if (X - vec[i].first.first <= vec[i].second) {\n               vec2[n + 2].push_back(i);\n               vec2[i].push_back(n + 2);\n            }\n            if (vec[i].first.second <= vec[i].second) {\n                vec2[n + 1].push_back(i);\n                vec2[i].push_back(n + 1);\n            }\n            if (Y - vec[i].first.second <= vec[i].second) {\n                vec2[n + 3].push_back(i);\n                vec2[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; j++) {\n                double cnt1 = sqrt(pow(vec[i].first.first - vec[j].first.first, 2) +\n                                       pow(vec[i].first.second - vec[j].first.second, 2));\n                int rs = vec[i].second + vec[j].second;\n                if (rs >= cnt1) {\n                    vec2[i].push_back(j);\n                    vec2[j].push_back(i);\n                }\n            }\n        }\n        \n        int flag = 0;\n    flag = max(flag, bfs(vec2, n, n + 1, n + 2, n + 4)); \n    flag = max(flag, bfs(vec2, n + 3, n + 2, n + 1, n + 4)); \n        \n        if (flag){\n            return false;\n        }\n        else{\n            return true;\n        }\n\n    }\n};",
    "submit_ts": "1722137333",
    "subm_id": "1335760780"
}