{
    "username": "UTPAL RAJ",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        vector<vector<int>> top_row(m);\n        \n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> row_elements;\n            for (int j = 0; j < n; ++j) {\n                row_elements.push_back({board[i][j], j});\n            }\n            sort(row_elements.rbegin(), row_elements.rend());\n            for (int k = 0; k < min(3, n); ++k) {\n                top_row[i].push_back(row_elements[k].second);\n            }\n        }\n\n        long long max_sum = LLONG_MIN;\n\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (int c1 : top_row[r1]) {\n                        for (int c2 : top_row[r2]) {\n                            if (c2 == c1) continue;\n                            for (int c3 : top_row[r3]) {\n                                if (c3 == c1 || c3 == c2) continue;\n                                long long cur_sum = (long long)board[r1][c1] \n                                                  + (long long)board[r2][c2] \n                                                  + (long long)board[r3][c3];\n                                max_sum = max(max_sum, cur_sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return max_sum;\n    }\n};\n",
    "submit_ts": "1723908120",
    "subm_id": "1359139044"
}