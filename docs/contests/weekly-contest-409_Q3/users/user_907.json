{
    "username": "att_power",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\ntypedef long long ll;\ntypedef double db;\ntypedef pair<int, int> pii;\n\nconst int MAXN = 1e5 + 5;\n\nstruct node\n{\n    int l,r;\n    ll sum,lazy;\n    void add(ll x)\n    {\n        sum+=x*(r-l+1);\n        lazy+=x;\n    }\n}tree[MAXN*4];\n\nint ar[MAXN];\n\nvoid push_up(int id)\n{\n    tree[id].sum=tree[id<<1].sum+tree[id<<1|1].sum;\n}\n\nvoid push_down(int id)\n{\n    tree[id<<1].add(tree[id].lazy);\n    tree[id<<1|1].add(tree[id].lazy);\n    tree[id].lazy=0;\n}\n\nvoid buildTree(int id,int l,int r)\n{\n    tree[id].l=l;\n    tree[id].r=r;\n    tree[id].sum=tree[id].lazy=0;\n    if(l==r)\n        tree[id].sum=ar[l];\n    else\n    {\n        int mid=(l+r)>>1;\n        buildTree(id<<1,l,mid);\n        buildTree(id<<1|1,mid+1,r);\n        push_up(id);\n    }\n}\n\nvoid update(int id,int l,int r,ll val)\n{\n    int L=tree[id].l,R=tree[id].r;\n    if(l<=L&&R<=r)\n        tree[id].add(val);\n    else\n    {\n        push_down(id);\n        int mid=(L+R)>>1;\n        if(mid>=l)\n            update(id<<1,l,r,val);\n        if(mid<r)\n            update(id<<1|1,l,r,val);\n        push_up(id);\n    }\n}\n\nll query(int id,int l,int r)\n{\n    int L=tree[id].l,R=tree[id].r;\n    if(l<=L&&R<=r)\n        return tree[id].sum;\n    push_down(id);\n    int mid=(L+R)>>1;\n    ll res=0;\n    if(mid>=l)\n        res+=query(id<<1,l,r);\n    if(mid<r)\n        res+=query(id<<1|1,l,r);\n    push_up(id);\n    return res;\n}\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        \n        vector<int> rec(n + 2, 0);\n        for (int i = 1; i <= n; i++)\n        {\n            ar[i] = i - 1;\n            rec[i] = i + 1;\n        }\n        buildTree(1,1,n);\n        vector<int> res;\n        \n        for (auto q : queries)\n        {\n            int u = q[0] + 1, v = q[1] + 1, ans;\n            \n            int left = query(1, u, u), right = query(1, v, v);\n\n            if(u > v || v < rec[u] || (left < 0 || right < 0)){\n                ans = query(1, n, n);\n            }\n            else {\n                rec[u] = v;\n                if(left + 1 < right) {\n                    int div = right - left - 1;\n                    update(1, v, n, -div);\n                    update(1, u + 1, v - 1, -MAXN);\n                }\n                ans = query(1, n, n);\n                \n            }\n            res.push_back(ans);\n        }\n        return res;\n    }\n};\n",
    "submit_ts": "1722742897",
    "subm_id": "552347575"
}