{
    "username": "deepak_4572",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(1e9) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int cost) {\n        TrieNode* node = root;\n        for(char c : word) {\n            if(!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int n;\n    vector<int> dp;\n\n    int solve(int ind, string& s, Trie& trie) {\n        if (ind == n) return 0;\n        if (dp[ind] != -1) return dp[ind];\n        \n        int ans = 1e9;\n        TrieNode* node = trie.root;\n        \n        for (int i = ind; i < n; ++i) {\n            if (!node->children.count(s[i])) break;\n            node = node->children[s[i]];\n            if (node->cost != 1e9) {\n                ans = min(ans, node->cost + solve(i + 1, s, trie));\n            }\n        }\n        \n        return dp[ind] = ans;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        n = target.size();\n        dp.assign(n, -1);\n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        int x = solve(0, target, trie);\n        return x == 1e9 ? -1 : x;\n    }\n};\n",
    "submit_ts": "1720323792",
    "subm_id": "1312384182"
}