{
    "username": "gdstw",
    "submission": "class Node: # Trie\n    def __init__(self):\n        self.child = [None] * 26\n        self.isEnd = False\n        self.cost = float(\"inf\")\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        m = len(words)\n\n        trie1 = Node() # \u6b63\u5411\n        for word, cost in zip(words, costs):\n            node = trie1\n            for c in word:\n                idx = ord(c) - ord(\"a\")\n                if node.child[idx] is None:\n                    node.child[idx] = Node()\n                node = node.child[idx]\n            node.isEnd = True\n            node.cost = min(node.cost, cost)\n\n        trie2 = Node() # \u53cd\u5411\n        for word, cost in zip(words, costs):\n            node = trie2\n            for c in reversed(word):\n                idx = ord(c) - ord(\"a\")\n                if node.child[idx] is None:\n                    node.child[idx] = Node()\n                node = node.child[idx]\n            node.isEnd = True\n            node.cost = min(node.cost, cost)\n            \n        dp = [float(\"inf\")] * (n + 1)\n        mp = defaultdict(int)\n        for word, cost in zip(words, costs):\n            mp[word] = min(mp.get(word, float(\"inf\")), cost)\n        dp[0] = 0\n        for i in range(1, n + 1):\n            cur = trie2\n            for j in range(i - 1, -1, -1):\n                idx = ord(target[j]) - ord(\"a\")\n                if cur.child[idx] is None:\n                    break\n                cur = cur.child[idx]\n                if cur.isEnd:\n                    dp[i] = min(dp[i], dp[j] + cur.cost)\n        return dp[n] if dp[n] != float(\"inf\") else -1",
    "submit_ts": "1720321170",
    "subm_id": "1312315483"
}