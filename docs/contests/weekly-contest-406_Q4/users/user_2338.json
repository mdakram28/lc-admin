{
    "username": "Lathika_I",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         // Sort the cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        int hIndex = 0, vIndex = 0;\n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n\n        // Use a greedy approach to choose the larger cost cut first\n        while (hIndex < horizontalCut.size() && vIndex < verticalCut.size()) {\n            if (horizontalCut[hIndex] >= verticalCut[vIndex]) {\n                totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n                horizontalPieces++;\n                hIndex++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n                verticalPieces++;\n                vIndex++;\n            }\n        }\n\n        // If there are remaining horizontal cuts\n        while (hIndex < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[hIndex]) * verticalPieces;\n            hIndex++;\n        }\n\n        // If there are remaining vertical cuts\n        while (vIndex < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[vIndex]) * horizontalPieces;\n            vIndex++;\n        }\n\n        return totalCost;\n    }\n};\n    ",
    "submit_ts": "1720926166",
    "subm_id": "1320277931"
}