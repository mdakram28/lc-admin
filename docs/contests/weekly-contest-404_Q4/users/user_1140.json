{
    "username": "rnemiwal",
    "submission": "class Solution {\npublic:\n    #include <vector>\n#include <queue>\n#include <algorithm>\n\nint dia(const vector<vector<int>>& edges, int n) {\n    vector<vector<int>> adj(n);\n    for (const auto& edge : edges) {\n        adj[edge[0]].push_back(edge[1]);\n        adj[edge[1]].push_back(edge[0]);\n    }\n    \n    auto bfs = [&](int start) {\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthestNode = start;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthestNode]) {\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return make_pair(farthestNode, dist[farthestNode]);\n    };\n\n    int node = bfs(0).first;\n    int d = bfs(node).second;\n    return d;\n}\n\nint minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n    int n = edges1.size() + 1;\n    int m = edges2.size() + 1;\n    \n    int d1 = dia(edges1, n);\n    int d2 = dia(edges2, m);\n    \n    return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n}\n\n};",
    "submit_ts": 1719719271.0
}