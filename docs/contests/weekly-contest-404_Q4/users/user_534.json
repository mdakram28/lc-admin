{
    "username": "VivekShah2004",
    "submission": "import java.util.ArrayList;\nimport java.util.List;\nimport java.util.function.BiConsumer;\n\nclass Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int size1 = edges1.length + 1;\n        int size2 = edges2.length + 1;\n\n        List<List<Integer>> graph1 = buildGraph(edges1, size1);\n        List<List<Integer>> graph2 = buildGraph(edges2, size2);\n\n        int diameter1 = findDiameter(graph1);\n        int diameter2 = findDiameter(graph2);\n\n        int minDiameter = Math.max(diameter1, diameter2);\n        int halfDiameter1 = (diameter1 + 1) / 2;\n        int halfDiameter2 = (diameter2 + 1) / 2;\n        minDiameter = Math.max(minDiameter, halfDiameter1 + halfDiameter2 + 1);\n\n        return minDiameter;\n    }\n\n    private List<List<Integer>> buildGraph(int[][] edges, int size) {\n        List<List<Integer>> adjacencyList = new ArrayList<>();\n        for (int i = 0; i < size; i++) {\n            adjacencyList.add(new ArrayList<>());\n        }\n        for (int[] edge : edges) {\n            adjacencyList.get(edge[0]).add(edge[1]);\n            adjacencyList.get(edge[1]).add(edge[0]);\n        }\n        return adjacencyList;\n    }\n\n    private int findDiameter(List<List<Integer>> adjacencyList) {\n        int[] farthestNode = {0};\n        int farthestDistance = findFarthestNode(adjacencyList, 0, farthestNode);\n        farthestDistance = findFarthestNode(adjacencyList, farthestNode[0], farthestNode);\n        return farthestDistance;\n    }\n\n    private int findFarthestNode(List<List<Integer>> adjacencyList, int startNode, int[] farthestNode) {\n        int numNodes = adjacencyList.size();\n        int[] distance = new int[numNodes];\n        for (int i = 0; i < numNodes; i++) {\n            distance[i] = -1;\n        }\n        BiConsumer<Integer, Integer> dfs = new BiConsumer<>() {\n            @Override\n            public void accept(Integer node, Integer dist) {\n                distance[node] = dist;\n                if (dist > distance[farthestNode[0]]) {\n                    farthestNode[0] = node;\n                }\n                for (int neighbor : adjacencyList.get(node)) {\n                    if (distance[neighbor] == -1) {\n                        accept(neighbor, dist + 1);\n                    }\n                }\n            }\n        };\n        farthestNode[0] = startNode;\n        dfs.accept(startNode, 0);\n        return distance[farthestNode[0]];\n    }\n}\n",
    "submit_ts": 1719716731.0
}