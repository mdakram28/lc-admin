{
    "username": "sakura-xwb",
    "submission": "class Solution {\n    class segtree {\n        public int n;//\u533a\u95f4\u7aef\u70b9\u4e2a\u6570\n        int nums[];\n        public int cnt[];//\u4fdd\u5b58\u7ed3\u70b9\u5bf9\u5e94\u533a\u95f4\u7684\u503c(\u6700\u5927\u503c,\u548c...)\n        public segtree(int nums[]){\n            this.n = nums.length;\n            this.nums = nums;\n            cnt = new int[4 * n];\n            build(1, 1, n);\n        }\n        public void build(int o, int l, int r) {\n            if(l == r) {\n                if(l > 1 && l < n && nums[l - 1] > nums[l - 2] && nums[l - 1] > nums[l]) {\n                    cnt[o] = 1;\n                }\n                return;\n            }\n            int mid = (l + r) >> 1;\n            build(2 * o, l, mid);\n            build(2 * o + 1, mid + 1, r);\n            mantain(o);\n        }\n\n        //\u533a\u95f4\u7ef4\u62a4\n        public void mantain(int o) {\n            cnt[o] = cnt[2 * o] + cnt[2 * o + 1];\n        }\n\n        //\u5355\u70b9\u66f4\u65b0\n        public void update(int o, int l, int r, int i) {\n            if(l == r) {\n                if(l > 1 && l < n && nums[l - 1] > nums[l - 2] && nums[l - 1] > nums[l]) {\n                    cnt[o] = 1;\n                }\n                else {\n                    cnt[o] = 0;\n                }\n                return;\n            }\n            int mid = (l + r) >> 1;\n            if(mid >= i) {\n                update(2 * o, l, mid, i);\n            }\n            if(mid < i) {\n                update(2 * o + 1, mid + 1, r, i);\n            }\n            mantain(o);\n        }\n\n        //\u533a\u95f4\u67e5\u8be2(\u548c)\n        public int query(int o, int l, int r, int L, int R) {\n            if(l >= L && r <= R) {\n                return cnt[o];\n            }\n            int mid = (l + r) / 2;\n            int ans = 0;\n            if(mid < R) {\n                ans += query(2 * o + 1, mid + 1, r, L, R);\n            }\n            if(mid >= L) {\n                ans += query(2 * o, l, mid, L, R);\n            }\n            return ans;\n        }\n    }\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> ans = new ArrayList<>();\n        int n = nums.length;\n        segtree tree = new segtree(nums);\n        for(var i : queries) {\n            if(i[0] == 1) {\n                if(i[1] <= i[2] - 2) {\n                    ans.add(tree.query(1, 1, n, i[1] + 2, i[2]));\n                }\n                else {\n                    ans.add(0);\n                }\n            }\n            else {\n                int index = i[1], val = i[2];\n                tree.nums[index] = val;\n                // for(int j : tree.nums) {\n                //     System.out.print(j + \" \");\n                // }\n                tree.update(1, 1, n, index);\n                tree.update(1, 1, n, index + 1);\n                tree.update(1, 1, n, index + 2);\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1718506468.0
}