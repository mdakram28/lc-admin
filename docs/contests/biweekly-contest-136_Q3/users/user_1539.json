{
    "username": "utsav631",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int rows = matrix.size(), cols = matrix[0].size();\n        if(rows < 1 || cols < 1)\n        {\n            return 0;\n        }\n        int result = 0;\n\n        // Handle center element if both dimensions are odd\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            result += processCenterElement(matrix, rows, cols);\n        }\n\n        vector<int> counts(3, 0);\n\n        // Handle middle row if rows is odd\n        if (rows % 2 == 1) {\n            processMiddleRow(matrix, rows, cols, counts);\n        }\n\n        // Handle middle column if cols is odd\n        if (cols % 2 == 1) {\n            processMiddleColumn(matrix, rows, cols, counts);\n        }\n\n        // Calculate necessary shifts for symmetry\n        result += computeShifts(counts);\n\n        // Handle the four quadrants of the matrix\n        result += processQuadrants(matrix, rows, cols);\n\n        return result;\n    }\n\nprivate:\n    int processCenterElement(const vector<vector<int>>& matrix, int rows, int cols) {\n        return matrix[rows / 2][cols / 2] == 1 ? 1 : 0;\n    }\n\n    void processMiddleRow(const vector<vector<int>>& matrix, int rows, int cols, vector<int>& counts) {\n        int left = 0, right = cols - 1;\n        while (left < right) {\n            int sum = matrix[rows / 2][left] + matrix[rows / 2][right];\n            counts[sum] += 1;\n            left += 1;\n            right -= 1;\n        }\n    }\n\n    void processMiddleColumn(const vector<vector<int>>& matrix, int rows, int cols, vector<int>& counts) {\n        int top = 0, bottom = rows - 1;\n        while (top < bottom) {\n            int sum = matrix[top][cols / 2] + matrix[bottom][cols / 2];\n            counts[sum] += 1;\n            top += 1;\n            bottom -= 1;\n        }\n    }\n\n    int computeShifts(const vector<int>& counts) {\n        if (counts[2] % 2 == 1) {\n            return counts[1] > 0 ? counts[1] : 2;\n        }\n        return counts[1];\n    }\n\n    int processQuadrants(const vector<vector<int>>& matrix, int rows, int cols) {\n        int flips = 0;\n        for (int i = 0; i < rows / 2; ++i) {\n            for (int j = 0; j < cols / 2; ++j) {\n                int val1 = matrix[i][j];\n                int val2 = matrix[rows - 1 - i][j];\n                int val3 = matrix[i][cols - 1 - j];\n                int val4 = matrix[rows - 1 - i][cols - 1 - j];\n\n                int total = val1 + val2 + val3 + val4;\n\n                if (total != 0 && total != 4) {\n                    flips += min(total, 4 - total);\n                }\n            }\n        }\n        return flips;\n    }\n};\n",
    "submit_ts": "1722699723",
    "subm_id": "1343220346"
}