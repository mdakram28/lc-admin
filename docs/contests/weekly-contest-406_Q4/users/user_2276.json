{
    "username": "karan-lc",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\nios_base::sync_with_stdio(false);\ncin.tie(NULL);\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        long long cost = 0;\n        int hPieces = 1, vPieces = 1;\n        int i = 0, j = 0;\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                cost += static_cast<long long>(horizontalCut[i]) * vPieces;\n                hPieces++;\n                i++;\n            } else {\n                cost += static_cast<long long>(verticalCut[j]) * hPieces;\n                vPieces++;\n                j++;\n            }\n        }\n        while (i < horizontalCut.size()) {\n            cost += static_cast<long long>(horizontalCut[i]) * vPieces;\n            i++;\n        }\n        while (j < verticalCut.size()) {\n            cost += static_cast<long long>(verticalCut[j]) * hPieces;\n            j++;\n        }\n        return cost;\n    }\n};",
    "submit_ts": "1720926437",
    "subm_id": "1320286243"
}