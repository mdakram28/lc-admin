{
    "username": "Meghdeip",
    "submission": "class Solution {\npublic:\n    \n    bool bfs(vector<vector<int>>& g, int start, int t1, int t2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        q.push(start);\n        vis[start] = true;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n\n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n\n        return (vis[t1] || vis[t2]);\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int nc = circles.size();\n        vector<vector<int>> g(nc + 4);\n\n        for (int i = 0; i < nc; i++) {\n            if (circles[i][0] <= circles[i][2]) {\n                g[nc].push_back(i);\n                g[i].push_back(nc);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                g[nc + 2].push_back(i);\n                g[i].push_back(nc + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                g[nc + 1].push_back(i);\n                g[i].push_back(nc + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                g[nc + 3].push_back(i);\n                g[i].push_back(nc + 3);\n            }\n            for (int j = i + 1; j < nc; ++j) {\n                double dist = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radSum = circles[i][2] + circles[j][2];\n                if (radSum >= dist) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        if (bfs(g, nc, nc + 1, nc + 2, nc + 4) || bfs(g, nc + 3, nc + 2, nc + 1, nc + 4)) {\n            return false;\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138813",
    "subm_id": "1335800332"
}