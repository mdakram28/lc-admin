{
    "username": "Deepak Kumar",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n\n        vector<vector<tuple<long long, long long>>> row(m);\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> col;\n            for (int j = 0; j < n; ++j) {\n                col.push_back({board[i][j], j});\n            }\n\n            sort(col.rbegin(), col.rend());\n\n            for (int k = 0; k < min(3, (int)col.size()); k++) {\n                row[i].push_back({col[k].second, col[k].first});\n            }\n        }\n\n        long long ans = -1e15;\n\n        for (int r1 = 0; r1 < m - 2; r1++) {\n            for (int r2 = r1 + 1; r2 < m - 1; r2++) {\n                for (int r3 = r2 + 1; r3 < m; r3++) {\n                    for (auto [c1, v1] : row[r1]) {\n                        for (auto [c2, v2] : row[r2]) {\n                            for (auto [c3, v3] : row[r3]) {\n                                if (c1 != c2 && c2 != c3 && c1 != c3) {\n                                    ans = max(ans, v1 + v2 + v3);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723907404",
    "subm_id": "1359105913"
}