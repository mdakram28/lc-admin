{
    "username": "dokenobuggy799",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<pair<int, int>> end;\n        unordered_map<char, TrieNode*> child;\n    };\n\n    class Trie {\n    public:\n        TrieNode* root;\n        Trie() { \n            root = new TrieNode(); \n        }\n        void insert(string& word, int index, int cost) {\n            TrieNode* node = root;\n            for (char c : word) {\n                if (!node->child.count(c))\n                    node->child[c] = new TrieNode();\n                node = node->child[c];\n            }\n            node->end.push_back({index, cost});\n        }\n    };\n\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        int n = t.size();\n        int m = w.size();\n        vector<int> dp(n + 1, INT_MAX);\n        Trie myTrie;\n        dp[0] = 0;\n        for (int i = 0; i < m ; i++) {\n            myTrie.insert(w[i], i, c[i]);\n        }\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = myTrie.root;\n            for (int j = i; j < n; j++) {\n                if (!node->child.count(t[j])) break;\n                node = node->child[t[j]];\n                for (auto& p : node->end) {\n                    int len = w[p.first].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n       if(dp[n] == INT_MAX) return -1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720322213",
    "subm_id": "1312343784"
}