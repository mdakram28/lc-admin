{
    "username": "glagoid",
    "submission": "#include <vector>\n#include <algorithm>\n#include <functional>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Sort cuts in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h = 1, v = 1; // Initially 1 piece horizontally and vertically\n        long long cost = 0;\n        \n        int i = 0, j = 0;\n        \n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n                cost += static_cast<long long>(horizontalCut[i]) * v;\n                ++h;\n                ++i;\n            } else {\n                cost += static_cast<long long>(verticalCut[j]) * h;\n                ++v;\n                ++j;\n            }\n        }\n        \n        while (i < horizontalCut.size()) {\n            cost += static_cast<long long>(horizontalCut[i]) * v;\n            ++i;\n        }\n        \n        while (j < verticalCut.size()) {\n            cost += static_cast<long long>(verticalCut[j]) * h;\n            ++j;\n        }\n        \n        return cost;\n    }\n};\n",
    "submit_ts": "1720924928",
    "subm_id": "1320236409"
}