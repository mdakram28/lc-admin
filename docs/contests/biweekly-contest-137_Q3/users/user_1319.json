{
    "username": "Yvonne",
    "submission": "import heapq\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        ans = -inf\n        m,n = len(board), len(board[0])\n        if m > n:\n            board = [r for r in zip(*board)]\n            m,n = n, m\n        path = 0\n        # \u53ea\u9700\u8981\u77e5\u9053\u6bcf\u884c\u524d3\u5927\u7684\u6570\u5373\u53ef\n        # \u4ee5\u53ca\u7ef4\u62a4\u603b\u4f53\u800c\u8a00\u524dn\u5927\u7684\u6570\n        rowHeapList = [[] for _ in range(m)]\n        for i in range(m):\n            for j in range(n):\n                heapq.heappush(rowHeapList[i], (board[i][j], j))\n                #heapq.heappush(allHeap, (-board[i][j], i, j))\n                if len(rowHeapList[i]) > 3:\n                    heapq.heappop(rowHeapList[i])\n        col = []\n        def dfs(r, cnt):\n            nonlocal path\n            if cnt == 3:\n                # \u5df2\u7ecf\u6210\u529f\u653e\u4e86\u4e09\u4e2a\u8f66\uff0cupdate ans\n                nonlocal ans\n                ans = max(ans, path)\n                return\n            if m-r < 3-cnt:\n                # \u4e0d\u591f\n                return\n            # \u4e0d\u9009\u7b2cr\u884c\n            dfs(r+1, cnt)\n            # \u9009\u7b2cr\u884c\uff0c\u679a\u4e3e\u5217\n            for v, c in rowHeapList[r]:\n                if c not in col:\n                    path += v\n                    col.append(c)\n                    dfs(r+1, cnt+1)\n                    path -= v\n                    col.pop()\n            return\n        dfs(0,  0)\n        return ans   \n            \n                    \n",
    "submit_ts": "1723909249",
    "subm_id": "556335267"
}