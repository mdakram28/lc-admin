{
    "username": "ParmeetD",
    "submission": "void dfs(int node, int parent, const vector<vector<int>>& tree, vector<int>& distance) {\n    for (int neighbor : tree[node]) {\n        if (neighbor != parent) {\n            distance[neighbor] = distance[node] + 1;\n            dfs(neighbor, node, tree, distance);\n        }\n    }\n}\n\nint find_farthest_node(int start, const vector<vector<int>>& tree, vector<int>& distance) {\n    fill(distance.begin(), distance.end(), 0);\n    dfs(start, -1, tree, distance);\n    return max_element(distance.begin(), distance.end()) - distance.begin();\n}\n\nvector<int> farthest_distance_from_each_node(const vector<vector<int>>& tree) {\n    int n = tree.size();\n    vector<int> distance(n);\n    \n    // First DFS to find the farthest node from node 0\n    int node_a = find_farthest_node(0, tree, distance);\n    \n    // Second DFS from node_a to find node_b and record distances from node_a\n    int node_b = find_farthest_node(node_a, tree, distance);\n    vector<int> distance_from_a = distance;\n    \n    // Third DFS from node_b to find distances from node_b\n    find_farthest_node(node_b, tree, distance);\n    vector<int> distance_from_b = distance;\n    \n    // Compute the farthest distance for each node\n    vector<int> farthest_distance(n);\n    for (int i = 0; i < n; ++i) {\n        farthest_distance[i] = max(distance_from_a[i], distance_from_b[i]);\n    }\n    \n    return farthest_distance;\n}\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& eg1, vector<vector<int>>& eg2) {\n        int n = eg1.size() + 1;\n        int m = eg2.size() + 1;\n        \n        vector<vector<int>> tree1(n), tree2(m);\n        for (int i = 0; i < n-1; ++i) {\n            int u = eg1[i][0], v = eg1[i][1];\n            tree1[u].push_back(v);\n            tree1[v].push_back(u);\n        }\n        for (int i = 0; i < m-1; ++i) {\n            int u = eg2[i][0], v = eg2[i][1];\n            tree2[u].push_back(v);\n            tree2[v].push_back(u);\n        }\n        \n        vector<int> r1 = farthest_distance_from_each_node(tree1);\n        vector<int> r2 = farthest_distance_from_each_node(tree2);\n        \n        int ans1 = *max_element(r1.begin(), r1.end());\n        int ans2 = *max_element(r2.begin(), r2.end());\n        int t1 = *min_element(r1.begin(), r1.end());\n        int t2 = *min_element(r2.begin(), r2.end());\n        int ans3 = t1+t2+1;\n        int ans = max(max(ans1, ans2), ans3);\n        return ans;\n    }\n};",
    "submit_ts": 1719715663.0
}