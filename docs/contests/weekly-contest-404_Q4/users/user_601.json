{
    "username": "udit027",
    "submission": "#include <vector>\n#include <queue>\n#include <climits> // for INT_MAX\n#include <algorithm> // for max and min functions\n\nclass Solution {\npublic:\n    // Function to find the diameter of a tree given its edges\n    int treeDiameter(std::vector<std::vector<int>>& edges) {\n        int n = edges.size() + 1; // Number of nodes in the tree\n        std::vector<std::vector<int>> adj(n); // Adjacency list for the tree\n        // Constructing the adjacency list\n        for (auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        // BFS function to find the farthest node and its distance from a given start node\n        auto bfs = [&](int start) {\n            std::vector<int> dist(n, -1); // Distance array, initialized to -1 (unvisited)\n            std::queue<int> q;\n            q.push(start);\n            dist[start] = 0;\n            int farthestNode = start;\n            while (!q.empty()) {\n                int node = q.front(); q.pop();\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dist[neighbor] = dist[node] + 1;\n                        q.push(neighbor);\n                        if (dist[neighbor] > dist[farthestNode]) {\n                            farthestNode = neighbor;\n                        }\n                    }\n                }\n            }\n            return std::make_pair(farthestNode, dist[farthestNode]); // Return the farthest node and its distance\n        };\n        \n        auto firstBFS = bfs(0); // Perform BFS starting from node 0\n        auto secondBFS = bfs(firstBFS.first); // Perform BFS starting from the farthest node found\n        return secondBFS.second; // Return the diameter of the tree\n    }\n\n    // Function to find the centers of a tree given its edges\n    std::vector<int> findTreeCenters(std::vector<std::vector<int>>& edges) {\n        int n = edges.size() + 1; // Number of nodes in the tree\n        std::vector<std::vector<int>> adj(n); // Adjacency list for the tree\n        std::vector<int> degree(n, 0); // Degree array to count the number of edges for each node\n        \n        // Constructing the adjacency list and updating degrees\n        for (auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n            degree[edge[0]]++;\n            degree[edge[1]]++;\n        }\n        \n        std::queue<int> leaves;\n        // Push all leaf nodes (degree == 1) into the queue\n        for (int i = 0; i < n; ++i) {\n            if (degree[i] == 1) {\n                leaves.push(i);\n            }\n        }\n        \n        int remainingNodes = n;\n        // Remove leaf nodes iteratively until only the center(s) remain\n        while (remainingNodes > 2) {\n            int leavesCount = leaves.size();\n            remainingNodes -= leavesCount;\n            for (int i = 0; i < leavesCount; ++i) {\n                int leaf = leaves.front(); leaves.pop();\n                for (int neighbor : adj[leaf]) {\n                    if (--degree[neighbor] == 1) {\n                        leaves.push(neighbor);\n                    }\n                }\n            }\n        }\n        \n        std::vector<int> centers;\n        // Push remaining nodes (centers) into the centers vector\n        while (!leaves.empty()) {\n            centers.push_back(leaves.front());\n            leaves.pop();\n        }\n        \n        return centers; // Return the centers of the tree\n    }\n    \n    // Function to calculate the minimum possible diameter after merging two trees\n    int minimumDiameterAfterMerge(std::vector<std::vector<int>>& edges1, std::vector<std::vector<int>>& edges2) {\n        // If either tree has no edges, the minimum diameter is 1 or 2 respectively\n        if (edges1.size() == 0 && edges2.size() == 0) return 1;\n        if (edges1.size() == 0 || edges2.size() == 0) return 2;\n        \n        int d1 = treeDiameter(edges1); // Calculate the diameter of the first tree\n        int d2 = treeDiameter(edges2); // Calculate the diameter of the second tree\n        \n        std::vector<int> centers1 = findTreeCenters(edges1); // Find the centers of the first tree\n        std::vector<int> centers2 = findTreeCenters(edges2); // Find the centers of the second tree\n        \n        int minDiameter = INT_MAX; // Initialize the minimum diameter to the maximum possible value\n        \n        // Iterate through all combinations of centers from both trees\n        for (int c1 : centers1) {\n            for (int c2 : centers2) {\n                // Calculate the new diameter after potentially merging the centers\n                int newDiameter = std::max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n                // Update the minimum diameter found\n                minDiameter = std::min(minDiameter, newDiameter);\n            }\n        }\n        \n        return minDiameter; // Return the minimum possible diameter after merging\n    }\n};\n",
    "submit_ts": 1719719853.0
}