{
    "username": "krvijay_34",
    "submission": "class Solution {\npublic:\n  \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n      int num_circles = circles.size();\n        vector<pair<pair<int, int>, int>> circleDetails(num_circles);\n        vector<vector<int>> graph(num_circles + 4);\n        \n       \n        for (int i = 0; i < num_circles; ++i) {\n            circleDetails[i].first.first = circles[i][0];\n            circleDetails[i].first.second = circles[i][1];\n            circleDetails[i].second = circles[i][2];\n        }\n\n       \n        for (int i = 0; i < num_circles; ++i) {\n            if (circleDetails[i].first.first <= circleDetails[i].second) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (X - circleDetails[i].first.first <= circleDetails[i].second) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circleDetails[i].first.second <= circleDetails[i].second) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circleDetails[i].first.second <= circleDetails[i].second) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circleDetails[i].first.first - circleDetails[j].first.first, 2) +\n                                       pow(circleDetails[i].first.second - circleDetails[j].first.second, 2));\n                int radius_sum = circleDetails[i].second + circleDetails[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n      \n        auto bfs = [&](int start, int target1, int target2) {\n            queue<int> q;\n            vector<int> visited(num_circles + 4, 0);\n            q.push(start);\n            visited[start] = 1;\n\n            while (!q.empty()) {\n                int u = q.front();\n                q.pop();\n                for (int v : graph[u]) {\n                    if (!visited[v]) {\n                        q.push(v);\n                        visited[v] = 1;\n                    }\n                }\n            }\n            return visited[target1] || visited[target2];\n        };\n\n       \n        int is_blocked = 0;\n        is_blocked = max(is_blocked, static_cast<int>(bfs(num_circles, num_circles + 1, num_circles + 2))); \n        is_blocked = max(is_blocked, static_cast<int>(bfs(num_circles + 3, num_circles + 2, num_circles + 1))); // Check for top-right corner\n\n       \n        return !is_blocked;\n    }\n};\n",
    "submit_ts": "1722136594",
    "subm_id": "1335739289"
}