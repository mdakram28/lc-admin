{
    "username": "Giripk",
    "submission": "class Solution {\npublic:\n\n    void calc(int node,vector<vector<int>>&graph,vector<int>&dis){\n        int n = graph.size();\n        \n        queue<int>bfs;\n        bfs.push(node);\n        vector<int>vis(n);\n        vis[node] = 1;\n        int c = 0;\n        \n\n        while(!bfs.empty()){\n            int sz = bfs.size();\n            for(int i=0;i<sz;++i){\n                 int cnode = bfs.front();\n                 bfs.pop();\n                 dis[cnode] = c;\n                 //cout<<cnode<<\" \"<<c<<' '<<endl;\n                 for(auto&x:graph[cnode]){\n                    if(vis[x])continue;\n                    vis[x] = 1;\n                    bfs.push(x);\n                 }\n            }\n             c++;\n        }\n\n    }\n    int find(int start,vector<vector<int>>&graph){\n        int n = graph.size();\n        \n        queue<int>bfs;\n        bfs.push(start);\n        vector<int>vis(n);\n        vis[start] = 1;\n        \n        int last = start;\n        while(!bfs.empty()){\n            int sz = bfs.size();\n            for(int i=0;i<sz;++i){\n                 int cnode = bfs.front();\n                 bfs.pop();\n                 last = cnode;\n                 \n                 for(auto&x:graph[cnode]){\n                    if(vis[x])continue;\n                    vis[x] = 1;\n                    bfs.push(x);\n                 }\n            }\n             \n        }\n        return last;\n    }\n\n\n    pair<int,int> findSmall(vector<vector<int>>&edges1){\n        int n = edges1.size()+1;\n        \n        vector<vector<int>>graph(n);\n        for(auto&x:edges1){\n            graph[x[0]].push_back(x[1]);\n            graph[x[1]].push_back(x[0]);\n        }\n        int f1 = find(0,graph);\n        int f2 = find(f1,graph);\n       // cout<<f1<<\" -> \"<<f2<<\"\\n\";\n        vector<int>dis1(n),dis2(n);\n        calc(f1,graph,dis1);\n        calc(f2,graph,dis2);\n\n        vector<int>score1(n);\n        int mn = INT_MAX;\n        int mx = 0;\n        for(int i=0;i<n;++i){\n            score1[i] = max(dis1[i],dis2[i]);\n          //  cout<<score1[i]<<' ';\n            mn = min(mn,score1[i]);\n            mx = max(mx,score1[i]);\n        }\n        //cout<<\"\\n\";\n        return {mn,mx};\n        \n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        pair< int,int> x = findSmall(edges1);\n         pair<int,int> y = findSmall(edges2);\n\n         return max(x.first+y.first+1,max(x.second,y.second));\n    }\n};",
    "submit_ts": 1719718115.0
}