{
    "username": "ksukshavasi",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        class TrieNode:\n            def __init__(self):\n                self.children = {}\n                self.word_end = float('inf')\n\n        # Build Trie\n        root = TrieNode()\n        for i, word in enumerate(words):\n            node = root\n            for char in word[::-1]:  # Insert words in reverse\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.word_end = min(node.word_end, costs[i])  # Store minimum cost\n\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            node = root\n            for j in range(i - 1, -1, -1):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.word_end != float('inf'):\n                    dp[i] = min(dp[i], dp[j] + node.word_end)\n\n        return dp[n] if dp[n] != float('inf') else -1",
    "submit_ts": "1720324610",
    "subm_id": "1312403733"
}