{
    "username": "zzc",
    "submission": "/**\n * @param {number} n\n * @param {number} k\n * @return {string}\n */\nvar largestPalindrome = function(n, k) {\n    const half = Math.ceil(n / 2);\n    const dp = new Array(half + 1).fill(null).map(() => new Array(k + 1));\n    const record = new Array(n).fill(null).map(() => new Array(10));\n    function getMod(base, muti) {\n        if (!base) {\n            return 0;\n        }\n        if (!muti) {\n            return base % k;\n        }\n        if (record[muti][base] !== undefined) {\n            return record[muti][base];\n        }\n        const math = getMod((base * 10) % k, muti - 1);\n        record[muti][base] = math;\n        return math;\n    }\n    let left;\n    let right;\n    if (n & 1) {\n        dp[0][0] = true;\n        for (let i = 1; i < 10; ++i) {\n            dp[0][getMod(i, n - half)] = true;\n        }\n        left = n - half + 1;\n        right = n - half - 1;\n    } else {\n        dp[0][0] = true;\n        for (let i = 1; i < 10; ++i) {\n            dp[0][(getMod(i, half) + getMod(i, half - 1)) % k] = true;\n        }\n        left = half + 1;\n        right = half - 2;\n    }\n    for (let i = 1; i < half - 1; ++i) {\n        for (let j = 0; j < 10; ++j) {\n            const math = (getMod(j, left) + getMod(j, right)) % k;\n            for (let z = 0; z < k; ++z) {\n                if (dp[i - 1][z]) {\n                    dp[i][(math + z) % k] = true;\n                }\n            }\n        }\n        left++;\n        right--;\n    }\n    let pos = half - 1;\n    if (right > -1) {\n        for (let j = 1; j < 10; ++j) {\n            const math = (getMod(j, left) + getMod(j, right)) % k;\n            for (let z = 0; z < k; ++z) {\n                if (dp[half - 2][z]) {\n                    dp[half - 1][(math + z) % k] = true;\n                }\n            }\n        }\n    } else {\n        right++;\n        left--;\n    }\n    let resLeft = '';\n    let resRight = '';\n    let need = 0;\n    while (right < left) {\n        if (!pos) {\n            for (let i = 9; i > -1; --i) {\n                const math = (getMod(i, left) + getMod(i, right)) % k;\n                if (math === need) {\n                    resLeft += String(i);\n                    resRight = String(i) + resRight;\n                    break;\n                }\n            }\n        } else {\n            for (let i = 9; i > -1; --i) {\n                const math = (getMod(i, left) + getMod(i, right)) % k;\n                if (dp[pos - 1][(need + k - math) % k]) {\n                    need = (need + k - math) % k;\n                    resLeft += String(i);\n                    resRight = String(i) + resRight;\n                    break;\n                }\n            }\n        }\n        pos--;\n        left--;\n        right++;\n    }\n    let add = '';\n    if (left === right) {\n        for (let i = 9; i > -1; --i) {\n            const math = getMod(i, left);\n            if (math === need) {\n                add = String(i);\n                break;\n            }\n        }\n    }\n    return resLeft + add + resRight;\n};",
    "submit_ts": "1723952567",
    "subm_id": "556412336"
}