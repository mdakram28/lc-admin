{
    "username": "Ark_e",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length;\n        Map<Integer, Integer> map = new HashMap<>();\n        TreeMap<Integer, Integer> treeMap = new TreeMap<>();\n\n        for (int i = 0; i < n/2; ++i) {\n            int maxDiff = Math.max(k - nums[i], nums[i]);\n            maxDiff = Math.max(maxDiff, k - nums[n - i - 1]);\n            maxDiff = Math.max(maxDiff, nums[n - i - 1]);\n            treeMap.put(maxDiff, treeMap.getOrDefault(maxDiff, 0) + 1);\n            map.put(Math.abs(nums[i] - nums[n-i-1]), map.getOrDefault(Math.abs(nums[i] - nums[n-i-1]), 0) + 1);\n            //System.out.println(i + \" = \" + Math.abs(nums[i] - nums[n-i-1]));\n        }\n        int sum = 0;\n        for (int i : treeMap.descendingKeySet()) {\n            treeMap.put(i, treeMap.get(i) + sum);\n            sum = treeMap.get(i);\n        }\n\n        int res = n;\n        for (int i : map.keySet()) {\n            int count = treeMap.ceilingEntry(i).getValue();\n            int num = count - map.get(i);\n            int newRes = num + (n - count*2);\n            res = Math.min(res, newRes);\n            //System.out.println(i + \" \" + count + \" \" + num + \" \" + newRes);\n        }\n\n\n        return res;\n    }\n}",
    "submit_ts": "1721488825",
    "subm_id": "1327434383"
}