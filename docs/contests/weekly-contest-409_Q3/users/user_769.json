{
    "username": "crimsonred",
    "submission": "class Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        set<pair<int, int>> edgesl;\n        set<pair<int, int>> edgesr;\n        vector<int> ans;\n        ans.reserve(n);\n        int currentAns = n - 1;\n\n        for (auto& query : queries) {\n            int u = query[0];\n            int v = query[1];\n\n            // check children edges\n            bool hasChildren = false;\n            while (true) {\n                auto it = edgesl.lower_bound({u, -1});\n                if (it == edgesl.end() || it->first >= v) {\n                    break;\n                }\n                if (it->first == u && it->second >= v) {\n                    break;\n                }\n\n                hasChildren = true;\n                auto [u1, v1] = *it;\n                currentAns += v1 - u1 - 1;\n                edgesl.erase(it);\n                edgesr.erase({v1, u1});\n            }\n\n            if (!hasChildren) {\n                // check parent edge\n                auto it = edgesr.lower_bound({v, -1});\n                bool hasParent;\n                if (it == edgesr.end()) {\n                    hasParent = false;\n                } else {\n                    auto [v1, u1] = *it;\n                    hasParent = u1 <= u && v <= v1;\n                }\n\n                if (hasParent) {\n                    ans.push_back(currentAns);\n                    continue;\n                }\n            }\n\n            currentAns -= v - u - 1;\n            edgesl.emplace(u, v);\n            edgesr.emplace(v, u);\n            ans.push_back(currentAns);\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1722742709",
    "subm_id": "1343775356"
}