{
    "username": "\u54c8\u54c8\u54c8\u6211\u597d\u5feb\u4e50\u554a",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n, ans = len(board), len(board[0]), -int(1e18)\n        r_max, c_max = [(max(row), i) for i, row in enumerate(board)], [(max(board[i][j] for i in range(m)), j) for j in\n                                                                        range(n)]\n        sel_rows, sel_cols = [idx for _, idx in heapq.nlargest(min(7,m), r_max)], [idx for _, idx in heapq.nlargest(min(7,n), c_max)]\n        for r1 in range(len(sel_rows)):\n            for r2 in range(len(sel_rows)):\n                for r3 in range(len(sel_rows)):\n                    for c1 in range(len(sel_cols)):\n                        for c2 in range(len(sel_cols)):\n                            for c3 in range(len(sel_cols)):\n                                if r1 != r2 and r1 != r3 and r2 != r3 and c1 != c2 and c1 != c3 and c2 != c3:\n                                    ans = max(ans, board[sel_rows[r1]][sel_cols[c1]] + board[sel_rows[r2]][sel_cols[c2]] +\n                                            board[sel_rows[r3]][sel_cols[c3]])\n\n        return ans",
    "submit_ts": "1723908185",
    "subm_id": "556329684"
}