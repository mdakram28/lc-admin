{
    "username": "Pajju_0330",
    "submission": "class Solution {\nprivate:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(INT_MAX) {}\n    };\n\n    TrieNode* root;\n\npublic:\n    Solution() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        \n        for (int i = 0; i < words.size(); ++i) {\n            insert(words[i], costs[i]);\n        }\n        \n        vector<int> minCost(n + 1, INT_MAX);\n        minCost[0] = 0; \n        for (int start = 0; start < n; ++start) {\n            if (minCost[start] == INT_MAX) continue; \n            \n            TrieNode* node = root;\n            for (int end = start; end < n; ++end) {\n                char c = target[end];\n                \n                if (!node->children.count(c)) break; \n                \n                node = node->children[c];\n                if (node->cost != INT_MAX) {\n                    minCost[end + 1] = min(minCost[end + 1], minCost[start] + node->cost);\n                }\n            }\n        }\n        if(minCost[n] == INT_MAX) minCost[n] = -1;\n        return minCost[n];\n    }\n};",
    "submit_ts": "1720322628",
    "subm_id": "1312354946"
}