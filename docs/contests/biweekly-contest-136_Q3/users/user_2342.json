{
    "username": "khanduriJi",
    "submission": "class Solution {\n    public int minFlips(int[][] codeofneeraj_grid4) {\n        int neeraj_n5 = codeofneeraj_grid4.length;\n        int neeraj_m3 = codeofneeraj_grid4[0].length;\n        int khanduri_ans2 = 0;\n\n        if (neeraj_n5 % 2 == 1 && neeraj_m3 % 2 == 1) {\n            khanduri_ans2 += checkCenterCell(codeofneeraj_grid4, neeraj_n5, neeraj_m3);\n        }\n\n        int[] neeraj_shift1 = calculateRowAndColumnFlips(codeofneeraj_grid4, neeraj_n5, neeraj_m3);\n\n        khanduri_ans2 += adjustAnswerBasedOnShifts(neeraj_shift1);\n\n        khanduri_ans2 += calculateQuadrantFlips(codeofneeraj_grid4, neeraj_n5, neeraj_m3);\n\n        return khanduri_ans2;\n    }\n\n    private int checkCenterCell(int[][] grid, int n, int m) {\n        return grid[n / 2][m / 2] == 1 ? 1 : 0;\n    }\n\n    private int[] calculateRowAndColumnFlips(int[][] grid, int n, int m) {\n        int[] shifts = new int[3];\n\n        if (n % 2 == 1) {\n            int a = 0, b = m - 1;\n            while (a < b) {\n                int sum = grid[n / 2][a] + grid[n / 2][b];\n                shifts[sum] += 1;\n                a += 1;\n                b -= 1;\n            }\n        }\n\n        if (m % 2 == 1) {\n            int a = 0, b = n - 1;\n            while (a < b) {\n                int sum = grid[a][m / 2] + grid[b][m / 2];\n                shifts[sum] += 1;\n                a += 1;\n                b -= 1;\n            }\n        }\n\n        return shifts;\n    }\n\n    private int adjustAnswerBasedOnShifts(int[] shifts) {\n        int answer = 0;\n        if (shifts[2] % 2 == 1) {\n            answer += (shifts[1] > 0) ? shifts[1] : 2;\n        } else {\n            answer += shifts[1];\n        }\n        return answer;\n    }\n\n    private int calculateQuadrantFlips(int[][] grid, int n, int m) {\n        int flips = 0;\n\n        for (int i = 0; i < n / 2; i++) {\n            for (int j = 0; j < m / 2; j++) {\n                int a = grid[i][j];\n                int b = grid[n - 1 - i][j];\n                int c = grid[i][m - 1 - j];\n                int d = grid[n - 1 - i][m - 1 - j];\n\n                int sum = a + b + c + d;\n\n                if (sum != 0 && sum != 4) {\n                    flips += Math.min(sum, 4 - sum);\n                }\n            }\n        }\n\n        return flips;\n    }\n}",
    "submit_ts": "1722699857",
    "subm_id": "1343224495"
}