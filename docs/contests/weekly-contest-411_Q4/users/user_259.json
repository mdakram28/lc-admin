{
    "username": "Pratham Agarwal",
    "submission": "#define ll long long \nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& query) {\n        vector<ll> cnt0;\n        vector<ll> cnt1;\n        int n=s.size();\n        if(s[0]=='0') {\n            cnt0.push_back(1);\n            cnt1.push_back(0);\n        }\n        else {\n            cnt1.push_back(1);\n            cnt0.push_back(0);\n        }\n        \n        for(int i=1;i<s.size();i++)\n        {\n            if(s[i]=='0')\n            {\n                cnt0.push_back(cnt0.back()+1);\n                cnt1.push_back(cnt1.back());\n            }\n            else {\n                cnt0.push_back(cnt0.back());\n                cnt1.push_back(cnt1.back()+1);\n            }\n        }\n        // for(auto x: cnt0) cout<<x<<\" \";\n        // cout<<endl;\n        // for(auto x: cnt1) cout<<x<<\" \";\n        // cout<<endl;\n        \n        map<ll,ll> zero;\n        map<ll,ll> one;\n        \n        for(ll i=0;i<n;i++)\n        {\n            if(zero.find(cnt0[i]) == zero.end()) zero[cnt0[i]]=i;\n            if(one.find(cnt1[i]) == one.end()) one[cnt1[i]]=i;\n        }\n        // for(auto x: one) cout<<x.first<<\" \"<<x.second<<endl;\n        vector<ll> ei;\n        for(ll i=0;i<n;i++)\n        {\n            ll z=k+1;\n            ll o=k+1;\n            if(i!=0)\n            {\n                z+=cnt0[i-1];\n                o+=cnt1[i-1];\n            }\n            if(zero.find(z)!=zero.end()) z=zero[z];\n            else z=n;\n            if(one.find(o)!=one.end())\n            o=one[o];\n            else o=n;\n            ei.push_back(max(z,o));\n        }\n        // for(auto x: ei) cout<<x<<\" \";\n        \n        \n        vector<ll> contri;\n        for(ll i=0;i<n;i++)\n        {\n            contri.push_back(ei[i]-i);\n        }\n        // ll ans=0;\n        // for(int i=0;i<n;i++) ans+=contri[i];\n        // return {ans};\n        vector<ll> presum;\n        presum.push_back(0);\n        \n        for(int i=0;i<n;i++)\n        presum.push_back(presum.back()+contri[i]);\n        \n        // to get presum of i to j get presum[j+1]-presum[i];\n        \n        vector<ll> presum2;\n        presum2.push_back(0);\n        for(int i=0;i<n;i++) presum2.push_back(presum2.back()+i);\n        \n        // to get presum of indexes from i to j get presum2[j+1] - presum2[i]\n        ll q=query.size();\n        vector<ll> ans;\n        for(ll i=0;i<q;i++)\n        {\n            // search for lower bound of ending index of query in the elements of the query \n            // jo index mila tumhe suppose 3 and starting of query is 1 so take presum[4]-presum[1] \n            // then take ((ending index +1)*(ending-index))-(presum2[ending of query+1] - presum2[index])\n            // sum kardo dono values ka and you will have your answer\n            ll si=query[i][0];\n            ll eni=query[i][1];\n            ll index = upper_bound(ei.begin()+si,ei.begin()+eni,eni)-ei.begin();\n            ll sum1= presum[index] - presum[si];\n            ll x= (eni+1)*(eni-index+1);\n            ll y=(presum2[eni+1]-presum2[index]);\n            ll sum2 = x-y;\n            ans.push_back(sum1+sum2);\n            \n        }\n        return ans;\n            \n            \n    }\n};",
    "submit_ts": "1723952426",
    "subm_id": "1359795994"
}