{
    "username": "Althaf Hussain",
    "submission": "class Solution {\n    long dp[][][];\n    public long maximumValueSum(int[][] board) {\n        int n = board.length;\n        int m = board[0].length;\n        dp = new long[n][m+1][m+1];\n        for(long i[][] : dp){\n            for(long j[] : i){\n                Arrays.fill(j, -1);\n            }\n        }\n        return f(0, m, m, board);\n    }\n    long f(int i, int f, int s, int board[][]){\n        if(i == board.length){\n            return -(long)1e15;\n        }\n        int m = board[0].length;\n        if(dp[i][f][s] != -1) return dp[i][f][s];\n        long max = f(i+1, f, s, board);\n        for(int j = 0; j < board[0].length; j++){\n            if(j != f && j != s){\n                if(f == m){\n                    max = Math.max(max, board[i][j]+ f(i+1, j, s, board));\n                }\n                else if(s == m){\n                    max = Math.max(max, board[i][j]+ f(i+1, f, j, board));\n                }\n                else{\n                   max = Math.max(max, board[i][j]);\n                }\n            }\n        }\n        return dp[i][f][s] = max;\n        \n    }\n}",
    "submit_ts": "1723906427",
    "subm_id": "1359052742"
}