{
    "username": "Leachim",
    "submission": "#![allow(unused_imports)]\n// use cplit::scanln;\n\nimpl Solution {\n    pub fn maximum_value_sum(board: Vec<Vec<i32>>) -> i64 {\n        let mut b: Vec<Vec<(i64, usize)>> = board\n            .iter()\n            .map(|x| x.iter().enumerate().map(|(i, &x)| (x as i64, i)).collect())\n            .collect();\n        let n = b.len();\n        println!(\"{:?}\", b);\n        for i in 0..n {\n            b[i].sort();\n            b[i].reverse();\n        }\n        let mut b: Vec<_> = b\n            .iter()\n            .map(|x| x.iter().take(3).collect::<Vec<_>>())\n            .collect();\n        let mut ans: i64 = -(1 << 60);\n        for i in 0..n {\n            for j in i + 1..n {\n                for k in j + 1..n {\n                    let sum = b[i][0].0 + b[j][0].0 + b[k][0].0;\n                    if sum < ans {\n                        continue;\n                    }\n                    for ii in 0..3 {\n                        for jj in 0..3 {\n                            for kk in 0..3 {\n                                if b[i][ii].1 != b[j][jj].1\n                                    && b[j][jj].1 != b[k][kk].1\n                                    && b[i][ii].1 != b[k][kk].1\n                                {\n                                    ans = ans.max(b[i][ii].0 + b[j][jj].0 + b[k][kk].0);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        ans\n    }\n}\n",
    "submit_ts": "1723906938",
    "subm_id": "556322610"
}