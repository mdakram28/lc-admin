{
    "username": "ziyu_h",
    "submission": "class Solution {\npublic:\n    vector<int> maxManhattan(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<vector<int>> cache(4, vector<int>(n, 0));\n\n        for (int i = 0; i < n; i++) {\n            cache[0][i] = points[i][0] + points[i][1];\n            cache[1][i] = points[i][0] - points[i][1];\n            cache[2][i] = - points[i][0] + points[i][1];\n            cache[3][i] = - points[i][0] - points[i][1];\n        }\n\n        int maxDist = INT_MIN;\n        vector<int> res= {-1, -1};\n        for (const auto& row : cache) {\n            int max_t = std::max_element(row.begin(), row.end()) - row.begin();\n            int min_t = std::min_element(row.begin(), row.end()) - row.begin();\n            int dist = row[max_t] - row[min_t];\n            if (dist > maxDist) {\n                maxDist = dist;\n                res[0] = max_t;\n                res[1] = min_t;\n            }\n        }\n\n        return res;\n    }\n    \n    int maxManhattanDist(vector<vector<int>>& points) {\n        vector<int> p = maxManhattan(points);\n        return abs(points[p[0]][0] - points[p[1]][0]) + abs(points[p[0]][1] - points[p[1]][1]);\n    }\n\n    int minimumDistance(vector<vector<int>>& points) {\n        vector<int> p = maxManhattan(points);\n        \n        vector<vector<int>> points_0 = points;\n        points_0.erase(points_0.begin() + p[0]);\n        int dist_0 = maxManhattanDist(points_0);\n        \n        vector<vector<int>> points_1 = points;\n        points_1.erase(points_1.begin() + p[1]);\n        int dist_1 = maxManhattanDist(points_1);\n\n        return min(dist_0, dist_1);\n    }\n};"
}