{
    "username": "anantking11",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        string str=\"anant\";\n//          while (str.find_first_of(\"0123456789\") != std::string::npos) {\n        \n//         size_t digit_index = str.find_first_of(\"0123456789\");\n\n    \n//         size_t non_digit_index = std::string::npos;\n//         for (size_t i = digit_index; i > 0; --i) {\n//             if (!isdigit(str[i - 1])) {\n//                 non_digit_index = i - 1;\n//                 break;\n//             }\n//         }\n\n//         if (non_digit_index != std::string::npos) {\n//             str.erase(digit_index, 1); \n//             str.erase(non_digit_index, 1);\n//         }\n             \n        \n      int skills[]={4,2,3,6,9};\n    int curr = 0;\n   \n    int w = 0;\n    for(int i=1;i<4;i++)\n    {\n        if(skills[curr]>skills[i])\n        {\n            w++;\n            \n        }\n        else\n        {\n            curr=i;\n            w=1;\n            \n        }\n        if(w==2)\n            curr=1;\n    }\n//       int n=nums.size();\n//              stack<int>s;\n//              queue<int>q;\n//              int res=1; \n//         vector<vector<int>>dp(n,vector<int>(k+1,1)); \n        \n//         vector<int>v(k+1,-1); \n//         vector<map<int,int>>mp(k+1); \n//         for(int i=0;i<n;i++){ \n//             for(int j=0;j<=k;j++){ \n//                 for(int m=0;m<j;m++){ \n//                     dp[i][j]=max(dp[i][j],1+v[m]);\n//                     s.push(dp[i][j])\n//                 } \n//                 if(mp[j].find(nums[i])!=mp[j].end()){ \n//                     dp[i][j]=max(dp[i][j],1+mp[j][nums[i]]);\n//                     if(!s.empty())\n//                         s.pop();\n//                 } \n//                 res=max(ans,dp[i][j]); \n//                 q.push(res);\n//             } \n//             for(int j=0;j<=k;j++){ \n//                 v[j]=max(v[j],dp[i][j]); \n//                 mp[j][nums[i]]=max(mp[j][nums[i]],dp[i][j]); \n//                 int r=q.front();\n//                 int a=r*v[j];\n//                 if(!q.empty())\n//                     q.pop();\n//             } \n//         } \n//         return res; \n        int n = nums.size();\n        stack<int> s;\n        queue<int> q;\n        int res = 1; \n        \n        vector<vector<int>> dp(n, vector<int>(k + 1, 1)); \n        vector<int> v(k + 1, -1); \n        vector<map<int, int>> mp(k + 1); \n        \n        for (int i = 0; i < n; ++i) { \n            for (int j = 0; j <= k; ++j) { \n                for (int m = 0; m < j; ++m) { \n                    dp[i][j] = max(dp[i][j], 1 + v[m]);\n                    s.push(dp[i][j]);\n                } \n                if (mp[j].find(nums[i]) != mp[j].end()) { \n                    dp[i][j] = max(dp[i][j], 1 + mp[j][nums[i]]);\n                    if (!s.empty()) {\n                        s.pop();\n                    }\n                } \n                res = max(res, dp[i][j]); \n                q.push(res);\n            } \n            for (int j = 0; j <= k; ++j) { \n                v[j] = max(v[j], dp[i][j]); \n                mp[j][nums[i]] = max(mp[j][nums[i]], dp[i][j]); \n                if (!q.empty()) {\n                    q.pop();\n                }\n            } \n        } \n        return res; \n    }\n};",
    "submit_ts": 1717862272.0
}