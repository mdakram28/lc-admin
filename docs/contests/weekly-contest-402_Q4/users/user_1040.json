{
    "username": "ywwbill",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        m = 1\n        while m < n:\n            m *= 2\n        tree = [0] * (m * 2)\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                self.update(tree, i, 1)\n        answer = []\n        for i in range(len(queries)):\n            if queries[i][0] == 1:\n                l, r = queries[i][1], queries[i][2]\n                result = self.query(tree, l, r)\n                # print(tree, result, l, r)\n                if (\n                    l - 1 >= 0\n                    and l + 1 < n\n                    and nums[l] > nums[l - 1]\n                    and nums[l] > nums[l + 1]\n                ):\n                    result -= 1\n                if (\n                    r - 1 >= 0\n                    and r + 1 < n\n                    and nums[r] > nums[r - 1]\n                    and nums[r] > nums[r + 1]\n                    and r != l\n                ):\n                    result -= 1\n                answer.append(result)\n            elif queries[i][0] == 2:\n                idx, val = queries[i][1], queries[i][2]\n                if idx - 1 >= 0:\n                    if (\n                        idx - 2 >= 0\n                        and nums[idx - 1] > nums[idx - 2]\n                        and nums[idx - 1] > val\n                    ):\n                        self.update(tree, idx - 1, 1)\n                    else:\n                        self.update(tree, idx - 1, 0)\n                if idx + 1 < n:\n                    if (\n                        idx + 2 < n\n                        and nums[idx + 1] > nums[idx + 2]\n                        and nums[idx + 1] > val\n                    ):\n                        self.update(tree, idx + 1, 1)\n                    else:\n                        self.update(tree, idx + 1, 0)\n                if (\n                    idx - 1 >= 0\n                    and idx + 1 < n\n                    and val > nums[idx - 1]\n                    and val > nums[idx + 1]\n                ):\n                    self.update(tree, idx, 1)\n                else:\n                    self.update(tree, idx, 0)\n                nums[idx] = val\n        return answer\n\n    def update(self, tree: List[int], index: int, val: int) -> None:\n        m = len(tree) // 2\n        index += m\n        tree[index] = val\n        while index > 0:\n            next_index = index // 2\n            tree[next_index] = tree[next_index * 2] + tree[next_index * 2 + 1]\n            index = next_index\n\n    def query(self, tree: List[int], left: int, right: int) -> None:\n        result = self.query_range(tree, right)\n        if left - 1 >= 0:\n            # print(result, self.query_range(tree,left-1))\n            result -= self.query_range(tree, left - 1)\n        return result\n\n    def query_range(self, tree: List[int], r: int) -> int:\n        m = len(tree) // 2\n        left = 0\n        right = m - 1\n        result = 0\n        index = 1\n        while left <= right and index < len(tree):\n            mid = (left + right) // 2\n            if r == right:\n                result += tree[index]\n                break\n            elif r <= mid:\n                right = mid\n                index *= 2\n            else:\n                result += tree[index * 2]\n                left = mid + 1\n                index = index * 2 + 1\n        return result",
    "submit_ts": 1718507873.0
}