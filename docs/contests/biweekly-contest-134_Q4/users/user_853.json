{
    "username": "dineshgroach",
    "submission": "#define ll long long\nclass SegmentTree\n{\npublic:\n    vector<ll> segs;\n    ll size = 0;\n    ll ID = (1LL << 32) - 1;\n\n    SegmentTree(ll sz)\n    {\n        segs.assign(2 * sz, 0);\n        size = sz;\n    }\n\n    // type of opr to perform\n    ll comb(ll a, ll b)\n    {\n        return a & b;\n    }\n\n    void upd(ll idx, ll val)\n    {\n        segs[idx += size] = val;\n        for (idx >>= 1; idx; idx >>= 1)\n            segs[idx] = comb(segs[idx << 1], segs[idx << 1 | 1]);\n    }\n\n    ll query(ll l, ll r)\n    {\n        ll lans = ID, rans = ID;\n        for (l += size, r += size + 1; l < r; l >>= 1, r >>= 1)\n        {\n            if (l & 1)\n                lans = comb(lans, segs[l++]);\n            if (r & 1)\n                rans = comb(segs[--r], rans);\n        }\n        return comb(lans, rans);\n    }\n};\n\nclass Solution {\npublic:\n    ll countSubarrays(vector<int>& nums, int k) {\n        ll n = nums.size();\n        SegmentTree st(n);\n        for (int i = 0; i < n; i++)\n        {\n            st.upd(i, nums[i]);\n        }\n        ll ans = 0;\n        for (int i = 0; i < n; i++)\n        {\n            ll lb = -1, ub = -1;\n            ll low = i, high = n - 1;\n            while (low <= high)\n            {\n                ll mid = (low + high) >> 1;\n                if(st.query(i,mid) > k)\n                {\n                    low = mid + 1;\n                }\n                else if(st.query(i,mid) == k)\n                {\n                    lb = mid;\n                    high = mid - 1;\n                }\n                else\n                {\n                    high = mid - 1;\n                }\n            }\n            low = i, high = n - 1;\n            while (low <= high)\n            {\n                ll mid = (low + high) >> 1;\n                if(st.query(i,mid) > k)\n                {\n                    low = mid + 1;\n                }\n                else if(st.query(i,mid) == k)\n                {\n                    ub = mid;\n                    low = mid + 1;\n                }\n                else\n                {\n                    high = mid - 1;\n                }\n            }\n            if(lb != -1)\n            {\n                ans += (ub - lb + 1);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279341",
    "subm_id": "1311747327"
}