{
    "username": "tzhuan",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        unordered_map<string, int> wc;\n        for (int i = 0; i < words.size(); ++i) {\n            const auto& w = words[i];\n            auto c = costs[i];\n            if (wc.find(w) == wc.end()) wc[w] = c;\n            else wc[w] = min(wc[w], c);\n        }\n        words.clear();\n        costs.clear();\n        for (const auto& [w, c]: wc) {\n            words.push_back(w);\n            costs.push_back(c);\n        }\n        \n        const int N = target.size(), W = words.size();\n        vector<int> lps(N, 0);\n        for (int i = 1, j = 0; i < N; ++i) {\n            while (j > 0 and target[i] != target[j]) j = lps[j - 1];\n            if (target[i] == target[j]) lps[i] = 1 + j++;\n        }\n        unordered_map<int, vector<int>> map;\n        for (int wi = 0; wi < W; ++wi) {\n            const auto& w = words[wi];\n            const int M = w.size();\n            for (int i = 0, j = 0; i + (M - j) <= N; ++i) {\n                while (j > 0 and (j == M or target[i] != w[j])) j = lps[j - 1];\n                if (target[i] == w[j] and ++j == M) map[i + 1 - M].push_back(wi);\n            }\n        }\n        // for (auto& [i, ws]: map) { cout << i << \": \"; for (auto w: ws) cout << w << \" \"; cout << endl; }\n        vector<int> dp(N + 1, INT_MAX);\n        dp[N] = 0;\n        for (int i = N - 1; i >= 0; --i) {\n            for (auto w: map[i]) {\n                auto ii = i + words[w].size();\n                if (dp[ii] != INT_MAX) dp[i] = min(dp[i], costs[w] + dp[ii]);\n            }\n        }\n        return dp[0] == INT_MAX ? -1 : dp[0];\n        vector<int> cache(N, -2);\n        function<int(int)> dfs = [&](int i) {\n            if (i == N) return 0;\n            if (cache[i] != -2) return cache[i];\n            if (map.find(i) == map.end()) return -1;\n            int ans = INT_MAX;\n            for (auto w: map[i]) {\n                auto c = dfs(i + words[w].size());\n                // cout << i << \" \" << w << \": \" << c << endl;\n                if (c >= 0) ans = min(ans, costs[w] + c);\n            }\n            return cache[i] = ans == INT_MAX ? -1 : ans;\n        };\n        return dfs(0);\n    }\n};",
    "submit_ts": "1720322217",
    "subm_id": "1312343877"
}