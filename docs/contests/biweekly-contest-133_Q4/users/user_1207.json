{
    "username": "TUSHARARORATA1",
    "submission": "/**\n * Function to calculate the number of permutations based on inversion requirements.\n * \n * @param {number} initialState - Initial state number\n * @param {number[][]} reqs - Array of requirements where each requirement is [end_index, inversion_count]\n * @return {number} - Number of valid permutations modulo MOD\n */\nvar numberOfPermutations = function(initialState, reqs) {\n    const MOD = 1_000_000_007;\n    const MAX_INV = 400;\n\n    // Dictionary to store required inversions at each end index\n    let endIndexToInversionCount = {};\n    \n    // Populate the dictionary with given requirements\n    reqs.forEach((req) => {\n        endIndexToInversionCount[req[0] + 1] = req[1];\n    });\n\n    // 2D array to store dynamic programming values\n    let dp = new Array(initialState + 1).fill(0).map(() => new Array(MAX_INV + 1).fill(0));\n    dp[0][0] = 1;\n\n    // Calculate number of permutations for each length up to initialState\n    for (let len = 1; len <= initialState; len++) {\n        for (let currInv = 0; currInv <= MAX_INV; currInv++) {\n            let newPos = 0;\n            while (newPos < len) {\n                let prevInv = currInv - newPos;\n                if (prevInv >= 0) {\n                    dp[len][currInv] = (dp[len][currInv] + dp[len - 1][prevInv]) % MOD;\n                }\n                newPos++;\n            }\n        }\n\n        // Adjust counts based on required inversions at specific lengths\n        if (endIndexToInversionCount[len] !== undefined) {\n            let reqInv = endIndexToInversionCount[len];\n            for (let currInv = 0; currInv <= MAX_INV; currInv++) {\n                if (currInv !== reqInv) {\n                    dp[len][currInv] = 0;\n                }\n            }\n        }\n    }\n\n    // Calculate final result as sum of permutations for initialState with all possible inversions\n    let res = 0;\n    for (let currInv = 0; currInv <= MAX_INV; currInv++) {\n        res = (res + dp[initialState][currInv]) % MOD;\n    }\n\n    return res;\n};\n",
    "submit_ts": 1719071956.0
}