{
    "username": "sank555",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        R = len(grid)\n        C = len(grid[0])\n        ones = [grid[i][j] for i in range(R) for j in range(C)]\n        parent = list(range(R * C))\n        size = [1] * (R * C)\n        \n        def find(x):\n            if x == parent[x]: \n                return x\n            parent[x] = find(parent[x])\n            return parent[x]\n\n        def union(x, y):\n            ux = find(x)\n            uy = find(y)\n            if ux != uy:\n                if size[ux] > size[uy]:\n                    parent[uy] = ux\n                    size[ux] += size[uy]\n                    ones[ux] += ones[uy]\n                else:\n                    parent[ux] = uy\n                    size[uy] += size[ux]\n                    ones[uy] += ones[ux]\n        \n        # Merge left-right symmetric cells\n        for i in range(R):\n            for j in range(C):\n                union(i * C + j, i * C + (C - j - 1))\n        \n        # Merge top-bottom symmetric cells\n        for j in range(C):\n            for i in range(R):\n                union(i * C + j, (R - i - 1) * C + j)\n        \n        # Find unique representatives\n        unique_parents = []\n        for i in range(R * C):\n            if i == find(i): \n                unique_parents.append(i)\n        \n        @cache\n        def go(i, r):\n            if i == len(unique_parents):\n                return 0 if r == 0 else float('inf')\n            a = size[unique_parents[i]] - ones[unique_parents[i]] + go(i + 1, (r + size[unique_parents[i]]) % 4)\n            b = ones[unique_parents[i]] + go(i + 1, r)\n            return min(a, b)\n        \n        return go(0, 0)",
    "submit_ts": "1722697880",
    "subm_id": "1343162270"
}