{
    "username": "j_choudhary",
    "submission": "class Solution {\n    class SegT {\n        int[] tree;\n        int n;\n\n        public SegT(int[] arr) {\n            n = arr.length;\n            tree = new int[4 * n];\n            build(arr, 0, 0, n - 1);\n        }\n\n        public void build(int[] arr, int node, int start, int end) {\n            if (start == end) {\n                tree[node] = arr[start];\n            } else {\n                int mid = (start + end) / 2;\n                build(arr, 2 * node + 1, start, mid);\n                build(arr, 2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n            }\n        }\n\n        public int query(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n\n        public int query(int node, int start, int end, int l, int r) {\n            if (r < start || end < l) {\n                return Integer.MAX_VALUE;\n            }\n            if (l <= start && end <= r) {\n                return tree[node];\n            }\n            int mid = (start + end) / 2;\n            int parent1 = query(2 * node + 1, start, mid, l, r);\n            int parent2 = query(2 * node + 2, mid + 1, end, l, r);\n            return parent1 & parent2;\n        }\n    }\n\n    public int minimumDifference(int[] nums, int k) {\n        int n = nums.length;\n        SegT segT = new SegT(nums);\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n            \n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (segT.query(i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = Math.min(ans, Math.abs(segT.query(i, l) - k));\n            ans = Math.min(ans, Math.abs(k - segT.query(i, r)));\n        }\n        return ans;\n    }\n}",
    "submit_ts": 1717298782.0
}