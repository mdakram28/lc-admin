{
    "username": "harinee_07",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        horizontalCut.sort(reverse=True)\n        verticalCut.sort(reverse=True)\n\n        h = 0  # Index for horizontal cuts\n        v = 0  # Index for vertical cuts\n\n        horizontal_pieces = 1  # Initial number of horizontal pieces\n        vertical_pieces = 1    # Initial number of vertical pieces\n\n        total_cost = 0\n\n        # Process until we run out of cuts in one of the directions\n        while h < len(horizontalCut) and v < len(verticalCut):\n            if horizontalCut[h] >= verticalCut[v]:\n                # If horizontal cut is more costly or equal, make the cut\n                total_cost += horizontalCut[h] * vertical_pieces\n                h += 1\n                horizontal_pieces += 1\n            else:\n                # If vertical cut is more costly, make the cut\n                total_cost += verticalCut[v] * horizontal_pieces\n                v += 1\n                vertical_pieces += 1\n\n        # Process remaining horizontal cuts if any\n        while h < len(horizontalCut):\n            total_cost += horizontalCut[h] * vertical_pieces\n            h += 1\n\n        # Process remaining vertical cuts if any\n        while v < len(verticalCut):\n            total_cost += verticalCut[v] * horizontal_pieces\n            v += 1\n\n        return total_cost",
    "submit_ts": "1720926046",
    "subm_id": "1320274307"
}