{
    "username": "MonoLithh",
    "submission": "class Solution {\npublic:\n    long long  minimumCostOfBreaking(vector<int>&X, vector<int>&Y, int m, int n)\n{\n    long long res = 0;\n \n    //  sort the horizontal cost in reverse order\n    sort(X.begin(), X.end(), greater<int>());\n \n    //  sort the vertical cost in reverse order\n    sort(Y.begin(), Y.end(), greater<int>());\n \n    //  initialize current width as 1\n    int hzntl = 1, vert = 1;\n \n    //  loop until one or both cost array are processed\n    int i = 0, j = 0;\n    while (i < m && j < n)\n    {\n        if (X[i] > Y[j])\n        {\n            res += X[i] * vert;\n \n            //  increase current horizontal part count by 1\n            hzntl++;\n            i++;\n        }\n        else\n        {\n            res += Y[j] * hzntl;\n \n            //  increase current vertical part count by 1\n            vert++;\n            j++;\n        }\n    }\n \n    // loop for horizontal array, if remains\n    long long total = 0;\n    while (i < m)\n        total += X[i++];\n    res += total * 1ll*vert;\n \n    // loop for vertical array, if remains\n    total = 0;\n    while (j < n)\n        total += Y[j++];\n    res += total * hzntl;\n \n    return res;\n}\n    long long  minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n\n        long long  ans=minimumCostOfBreaking(horizontalCut,verticalCut,m-1,n-1);\n        return ans;\n    }\n};",
    "submit_ts": "1720925888",
    "subm_id": "1320269447"
}