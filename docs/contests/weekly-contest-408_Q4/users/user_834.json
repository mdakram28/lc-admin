{
    "username": "HounD_HeaveN",
    "submission": "class Solution {\npublic:\n\n     int bfs_traversal(vector<vector<int>>& v2, int s, int dest1, int dest2, int vertex) {\n        queue<int> q;\n        vector<int> visited(vertex + 4, 0);\n        q.push(s);\n        visited[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : v2[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[dest1] || visited[dest2];\n    }\n\n\n    bool check(int X, int Y, vector<vector<int>>& circles){\n        int nn_cc = circles.size();\n        vector<vector<int>> v2(circles.size() + 4);\n        vector<pair<pair<int, int>, int>> v1(circles.size());\n\n        for (int i = 0; i < nn_cc; ++i) {\n            v1[i].first.first = circles[i][0];\n            v1[i].first.second = circles[i][1];\n            v1[i].second = circles[i][2];\n        }\n\n        for (int i = 0; i < nn_cc; ++i) {\n\n            if (v1[i].first.first <= v1[i].second) {\n                v2[nn_cc].push_back(i);\n                v2[i].push_back(nn_cc);\n            }\n            if (X - v1[i].first.first <= v1[i].second) {\n                v2[nn_cc + 2].push_back(i);\n                v2[i].push_back(nn_cc + 2);\n            }\n            if (v1[i].first.second <= v1[i].second) {\n                v2[nn_cc + 1].push_back(i);\n                v2[i].push_back(nn_cc + 1);\n            }\n            if (Y - v1[i].first.second <= v1[i].second) {\n                v2[nn_cc + 3].push_back(i);\n                v2[i].push_back(nn_cc + 3);\n            }\n            for (int j = i + 1; j < nn_cc; ++j) {\n                double dis =\n                    sqrt(pow(v1[i].first.first - v1[j].first.first, 2) +\n                         pow(v1[i].first.second - v1[j].first.second, 2));\n                int rad_s = v1[i].second + v1[j].second;\n                if (rad_s >= dis) {\n                    v2[i].push_back(j);\n                    v2[j].push_back(i);\n                }\n            }\n        }\n\n        int is_blocked = 0;\n\n        is_blocked = max(is_blocked, bfs_traversal(v2, nn_cc, nn_cc + 1, nn_cc + 2, nn_cc + 4));\n        \n        is_blocked = max(is_blocked, bfs_traversal(v2, nn_cc + 3, nn_cc + 2, nn_cc + 1, nn_cc + 4));\n\n        if (is_blocked) {\n            return false;\n        }\n        return true;\n\n    }\n\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        \n        return check(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138451",
    "subm_id": "1335791086"
}