{
    "username": "hao-shou-bu-juan",
    "submission": "# -*- coding: utf-8 -*-\nfrom typing import List, Tuple, Optional\nfrom collections import deque, Counter\nfrom queue import PriorityQueue\nimport math\nfrom functools import lru_cache\nfrom sortedcontainers import SortedDict, SortedSet\nimport random\nimport copy\nimport sys\nsys.setrecursionlimit(9999999)\n\nMOD = 10**9 + 7\n\n\ndp = [[0]*4 for i in range(200005)]\nINF = 0x3f3f3f3f\n\ndef solve(arr: List):\n    k = len(arr)\n    if k == 1:\n        return 1 if arr[0] == 1 else 0\n\n    K = k >> 1\n\n    if k % 2 == 0:\n        dp[K][0] = 0\n        dp[K][1] = INF\n        dp[K][2] = INF\n        dp[K][3] = INF\n    else:\n        if arr[K] == 0:\n            dp[K][0] = 0\n            dp[K][1] = INF\n            dp[K][2] = INF\n            dp[K][3] = 1\n        else:\n            dp[K][0] = 1\n            dp[K][1] = INF\n            dp[K][2] = INF\n            dp[K][3] = 0\n\n    for i in range(K-1, -1, -1):\n        j = k-1 - i\n\n        for one_cnt in range(4):\n            dp[i][one_cnt] = INF\n\n            for t in [0, 1]:\n                x = 0\n                if arr[i] != t:\n                    x += 1\n                if arr[j] != t:\n                    x += 1\n\n                dp[i][one_cnt] = min(dp[i][one_cnt], x + dp[i+1][(one_cnt + t*2) % 4])\n\n    return dp[0][0]\n\n\n\n\nclass Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n\n\n        m, n = len(grid), len(grid[0])\n        M = m>>1\n        N = n>>1\n\n        if m % 2 == 1:\n            M += 1\n        if n % 2 == 1:\n            N += 1\n\n        @lru_cache(typed=False, maxsize=1280000)\n        def dp(ii, jj, one_cnt) -> int:\n            if jj == N:\n                return dp(ii+1, 0, one_cnt)\n\n            if ii == M:\n                if one_cnt == 0:\n                    return 0\n                else:\n                    return INF\n\n            ni = m-1-ii\n            nj = n-1-jj\n\n            s = set()\n            s.add((ii, jj))\n            s.add((ii, nj))\n            s.add((ni, jj))\n            s.add((ni, nj))\n\n\n            ans = INF\n            for t in [0, 1]:\n                x = 0\n                for i, j in s:\n\n                    if grid[i][j] != t:\n                        x += 1\n\n                ans = min( ans, x + dp(ii, jj+1, (one_cnt + t*len(s)) % 4 ) )\n\n            return ans\n\n\n        return dp(0, 0, 0)\n",
    "submit_ts": "1722700720",
    "subm_id": "552281039"
}