{
    "username": "lee_218",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        \n        from sortedcontainers import SortedSet\n        n=len(nums)\n        ct=SortedSet()\n        res=[]\n        for i in range(1,n-1):\n            if nums[i]>max(nums[i-1],nums[i+1]):\n                ct.add(i)\n\n        \n        for i,j,k in queries:\n            \n            if i==1:\n                l=ct.bisect_left(j+1)\n                r=ct.bisect_right(k-1)\n\n                res+=[max(r-l,0)]\n                continue\n                \n            old=[(nums[i],i) for i in range(j-2,j+3) if -1<i<n]           \n            nums[j]=k\n            new=[(nums[i],i) for i in range(j-2,j+3) if -1<i<n]\n            \n            n1=len(old)\n            ct_old=set()\n            ct_new=set()\n            for i in range(1,n1-1):\n                if old[i][0]>max(old[i-1][0],old[i+1][0]):\n                    ct_old.add(old[i][1])\n            \n            for i in range(1,n1-1):\n                if new[i][0]>max(new[i-1][0],new[i+1][0]):\n                    ct_new.add(new[i][1])\n                    \n            for i in ct_old-ct_new:\n                   ct.discard(i)   \n            for i in ct_new-ct_old:\n                   ct.add(i)\n            \n            \n        return res\n            \n            \n            \n            \n                \n           \n                    \n                \n                \n                \n                \n                ",
    "submit_ts": 1718508619.0
}