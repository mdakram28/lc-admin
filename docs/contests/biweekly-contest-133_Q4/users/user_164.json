{
    "username": "Yash_7xm",
    "submission": "class Solution {\n    \n    private static final int MOD = 1_000_000_007;\n    \n     public int numberOfPermutations(int n, int[][] requirements) {\n        long[][] dp = new long[n + 1][401];\n\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= 400; inversions++) {\n                dp[length][inversions] = 0;\n                for (int k = 0; k < length; k++) {\n                    if (inversions >= k) {\n                        dp[length][inversions] = (dp[length][inversions] + dp[length - 1][inversions - k]) % MOD;\n                    }\n                }\n            }\n        }\n\n        Map<Integer, Integer> requirementsMap = new HashMap<>();\n        for (int[] req : requirements) {\n            requirementsMap.put(req[0], req[1]);\n        }\n\n        long[][] actualDp = new long[n + 1][401];\n        actualDp[0][0] = 1; \n\n        for (int length = 1; length <= n; length++) {\n            for (int inversions = 0; inversions <= 400; inversions++) {\n                actualDp[length][inversions] = 0;\n                for (int k = 0; k < length; k++) {\n                    if (inversions >= k) {\n                        actualDp[length][inversions] = (actualDp[length][inversions] + actualDp[length - 1][inversions - k]) % MOD;\n                    }\n                }\n\n                if (requirementsMap.containsKey(length - 1) && inversions != requirementsMap.get(length - 1)) {\n                    actualDp[length][inversions] = 0;\n                }\n            }\n        }\n\n        long result = 0;\n        for (int inversions = 0; inversions <= 400; inversions++) {\n            if (requirementsMap.getOrDefault(n - 1, inversions) == inversions) {\n                result = (result + actualDp[n][inversions]) % MOD;\n            }\n        }\n\n        return (int) result;\n    }\n}",
    "submit_ts": 1719069198.0
}