{
    "username": "xcoder69",
    "submission": "class Solution {\npublic:\n    \n    pair<int, pair<pair<int,int>, pair<int,int> > > findMin(vector<vector<int>>& p){\n        map<int, pair<int,int> > mp;\n        \n        for(int i=0;i<p.size();++i){\n            if(mp.find(p[i][0]) == mp.end()){\n                mp[p[i][0]] = {p[i][1], p[i][1]};\n                \n            } else{\n                mp[p[i][0]].first = min(mp[p[i][0]].first, p[i][1]);\n                mp[p[i][0]].second = max(mp[p[i][0]].second, p[i][1]);\n            }\n            \n        }\n        \n        auto itr = mp.begin();\n        \n        long long maxPos = INT_MIN, maxNeg = INT_MIN;\n        \n        pair<int,int> mpp = {-1,-1}, mnp = {-1,-1};\n        \n        long long ans = INT_MIN;\n        pair<int,int> x = {-1,-1}, y = {-1,-1};\n        \n        while(itr != mp.end()){\n            // cout << itr->first << \" \" << itr->second.first << \" \" << itr->second.first << endl;\n            long long tempAns = (itr->first)+maxPos-(itr->second.first);\n            \n            if(tempAns > ans){\n                ans = tempAns;\n                x = mpp;\n                y = {itr->first, itr->second.first};\n            }\n            \n            tempAns = itr->first+maxPos-itr->second.second;\n            \n            if(tempAns > ans){\n                ans = tempAns;\n                x = mpp;\n                y = {itr->first, itr->second.second};\n            }\n            \n            tempAns = itr->first+maxNeg+itr->second.second;\n            \n            if(tempAns > ans){\n                ans = tempAns;\n                x = mnp;\n                y = {itr->first, itr->second.second};\n            }\n            \n            tempAns = itr->first+maxNeg+itr->second.first;\n            \n            if(tempAns > ans){\n                ans = tempAns;\n                x = mnp;\n                y = {itr->first, itr->second.first};\n            }\n            \n            if(itr->second.second-itr->second.first > ans){\n                ans = itr->second.second-itr->second.first;\n                x = {itr->first, itr->second.first};\n                y = {itr->first, itr->second.second};\n            }\n            \n            int tp = itr->second.first-itr->first;\n            \n            if(tp > maxPos){\n                maxPos = tp;\n                mpp = {itr->first, itr->second.first};\n            }\n            \n            tp = itr->second.second-itr->first;\n            if(tp > maxPos){\n                maxPos = tp;\n                mpp = {itr->first, itr->second.second};\n            }\n            \n            int tn = -itr->second.first-itr->first;\n            \n            if(tn > maxNeg){\n                maxNeg = tn;\n                mnp = {itr->first, itr->second.first};\n            }\n            \n            tn = -itr->second.second-itr->first;\n            if(tn > maxNeg){\n                maxNeg = tn;\n                mnp = {itr->first, itr->second.second};\n            }\n            \n            ++itr;\n            \n        }\n        // cout << endl;\n        return {ans, {x,y}};\n        \n    }\n    \n    int minimumDistance(vector<vector<int>>& p) {\n        pair<int, pair<pair<int,int>, pair<int,int> > > t = findMin(p);\n        vector<vector<int>> temp(p);\n        pair<int,int> x = t.second.first, y = t.second.second;\n        vector<int> v1 = {x.first, x.second};\n        temp.erase(find(temp.begin(), temp.end(), v1));\n        \n        int mn = findMin(temp).first;\n        vector<int> v2 = {y.first, y.second};\n        \n        p.erase(find(p.begin(), p.end(), v2));\n        return min(mn, findMin(p).first);\n    }\n};"
}