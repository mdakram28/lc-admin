{
    "username": "resotto",
    "submission": "class Solution {\n    private Long[][][] memo;\n    private int m, n;\n    public long maximumValueSum(int[][] board) {\n        var list = new ArrayList<List<int[]>>();\n        m = board.length;\n        n = board[0].length;\n        for (int i = 0; i < m; i++) {\n            var l = new ArrayList<int[]>();\n            for (int j = 0; j < n; j++) {\n                l.add(new int[]{i, j, board[i][j]});\n            }\n            Collections.sort(l, (a, b) -> b[2] - a[2]);\n            list.add(l);\n        }\n        memo = new Long[m][n+1][n+1];\n        return dfs(0, n, n, board, list);\n    }\n    private long dfs(int r, int c1, int c2, int[][] grid, List<List<int[]>> list) {\n        if (r == m) {\n            return -1L * (long) 1e11;\n        } else if (memo[r][c1][c2] == null) {\n            var ans = -1L * (long) 1e10;\n            int count = 0;\n            for (int[] l : list.get(r)) {\n                if (++count == 4) {\n                    break;\n                }\n                if (l[1] == c1 || l[1] == c2) {\n                    continue;\n                } else if (c1 == n) {\n                    ans = Math.max(ans, l[2] + dfs(r+1, l[1], c2, grid, list));\n                } else if (c2 == n) {\n                    ans = Math.max(ans, l[2] + dfs(r+1, c1, l[1], grid, list));\n                } else {\n                    ans = Math.max(ans, l[2]);\n                    break;\n                }\n            }\n            ans = Math.max(ans, dfs(r+1, c1, c2, grid, list));\n            memo[r][c1][c2] = ans;\n        }\n        return memo[r][c1][c2];\n    }\n}\n\n/*\n    3 <= M,N <= 100\n    -10^9 <= val <= 10^9\n\n\n\n    public long maximumValueSum(int[][] board) {\n        var list = new ArrayList<long[]>();\n        int m = board.length, n = board[0].length;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                list.add(new long[]{i, j, board[i][j]});\n            }\n        }\n        long ans = Long.MIN_VALUE;\n        Collections.sort(list, (a, b) -> Long.compare(b[2], a[2]));\n        // Collections.sort(list, (a, b) -> b[2] - a[2]);\n        for (int i = 0; i < m*n; i++) {\n            var x = list.get(i);\n            // int[] x = list.get(i);\n            for (int j = i+1; j < m*n; j++) {\n                var y = list.get(j);\n                // int[] y = list.get(j);\n                if (x[2] + y[2] * 2 <= ans) {\n                    break;\n                }\n                if (x[0] == y[0] || x[1] == y[1]) {\n                    continue;\n                }\n                for (int k = j+1; k < m*n; k++) {\n                    var z = list.get(k);\n                    // int[] z = list.get(k);\n                    if (x[2] + y[2] + z[2] <= ans) {\n                        break;\n                    }\n                    if (x[0] == z[0] || x[1] == z[1] || y[0] == z[0] || y[1] == z[1]) {\n                        continue;\n                    }\n                    ans = Math.max(ans, x[2] + y[2] + z[2]);\n                    break;\n                }\n            }\n        }\n        return ans;\n    }    \n*/",
    "submit_ts": "1723908542",
    "subm_id": "1359157002"
}