{
    "username": "muhammad123vaseem",
    "submission": "#include <vector>\n\nclass Solution {\npublic:\n    int numElements;        // Number of elements in nums\n    int modulo = 1e9 + 7;   // Modulo value for the results\n    std::vector<std::vector<int>> memo; // DP table for storing results\n\n    // Recursive function to solve the problem\n    int countValidPairs(int index, int currentSum1, int currentSum2, std::vector<int>& nums) {\n        if (index == numElements) {\n            return 1; // Base case: if all elements are processed\n        }\n        if (memo[index][currentSum1] != -1) {\n            return memo[index][currentSum1]; // Return cached result\n        }\n\n        int result = 0;\n        for (int i = 0; i <= nums[index]; i++) {\n            int newSum1 = i;\n            int newSum2 = nums[index] - i;\n            if (newSum1 >= currentSum1 && newSum2 <= currentSum2) {\n                result = (result + countValidPairs(index + 1, newSum1, newSum2, nums)) % modulo;\n            }\n        }\n\n        return memo[index][currentSum1] = result; // Cache and return result\n    }\n\n    int countOfPairs(std::vector<int>& nums) {\n        numElements = nums.size(); // Set the number of elements\n        memo = std::vector<std::vector<int>>(numElements, std::vector<int>(2000, -1)); // Initialize DP table\n        return countValidPairs(0, 0, 1e5, nums); // Start the recursive process\n    }\n};\n",
    "submit_ts": "1723346248",
    "subm_id": "1351573428"
}