{
    "username": "aaditya_21",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        \n        vector<vector<int>> a1(n), ar2(m);\n        \n        for (const auto& edge : edges1) {\n            a1[edge[0]].push_back(edge[1]);\n            a1[edge[1]].push_back(edge[0]);\n        }\n//         stack<int> st;\n//         int xy = 2;\n        \n//         while(xy>0){\n//             st.push(xy);\n//             xy--;\n//         }\n        \n        \n        for (const auto& edge : edges2) { ar2[edge[0]].push_back(edge[1]);ar2[edge[1]].push_back(edge[0]);\n        }\n\n        auto dfssure = [](const vector<vector<int>>& adj, int s, int& fN) {\n            int n = adj.size();\n            vector<int> de(n, -1);\n            function<void(int, int)> dV = [&](int node, int d) {\n                de[node] = d;\n                if (d > de[fN]) {\n                    fN = node;\n                }\n                \n                \n                for (int neighbor : adj[node]) {\n                    if (de[neighbor] == -1) {\n                        dV(neighbor, d + 1);\n                    }\n                }\n            };\n            \n            \n            fN = s;\n            dV(s, 0);\n            return de[fN];\n        };\n        \n        int xyz = 5;\n        \n        while(xyz>0){\n            xyz--;\n        }\n        \n        // int sumi = gcd(7,9);\n         int fN2 = 0; dfssure(ar2, 0, fN2);\n        int d2 = dfssure(ar2, fN2, fN2);\n        \n        int fN1 = 0;\n        dfssure(a1, 0, fN1); int d1 = dfssure(a1, fN1, fN1);\n\n        // int sumii = gcd(7,9);\n        \n        int mn = max(d1, d2);\n         int h2 = (d2 + 1) / 2;\n        int h1 = (d1 + 1) / 2;\n       \n        mn = max(mn, h1 + h2 + 1);\n        \n        return mn;\n    }\n};\n",
    "submit_ts": 1719719662.0
}