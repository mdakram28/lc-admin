{
    "username": "testeryes77",
    "submission": "class Solution:\n    def __init__(self):\n        self.nums = []\n        self.peaks = []\n        self.seg_tree = []\n        self.n = 0\n\n    def build(self, data: List[int]):\n        self.n = len(data)\n        self.nums = data[:]\n        self.peaks = [0] * self.n\n        self.seg_tree = [0] * (2 * self.n)\n        self.init_peaks()\n        self.build_segment_tree()\n\n    def init_peaks(self):\n        for i in range(1, self.n - 1):\n            if self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]:\n                self.peaks[i] = 1\n            else:\n                self.peaks[i] = 0\n\n    def build_segment_tree(self):\n        # Build the segment tree with peak counts\n        for i in range(self.n):\n            self.seg_tree[self.n + i] = self.peaks[i]\n        for i in range(self.n - 1, 0, -1):\n            self.seg_tree[i] = self.seg_tree[i * 2] + self.seg_tree[i * 2 + 1]\n\n    def update(self, pos: int, value: int):\n        self.nums[pos] = value\n        # Update the peaks array and segment tree at relevant positions\n        for i in range(max(1, pos - 1), min(self.n - 1, pos + 2)):\n            old_peak = self.peaks[i]\n            if self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]:\n                new_peak = 1\n            else:\n                new_peak = 0\n            if old_peak != new_peak:\n                self.peaks[i] = new_peak\n                pos_in_seg_tree = self.n + i\n                self.seg_tree[pos_in_seg_tree] = new_peak\n                # Update the segment tree\n                while pos_in_seg_tree > 1:\n                    pos_in_seg_tree //= 2\n                    self.seg_tree[pos_in_seg_tree] = self.seg_tree[pos_in_seg_tree * 2] + self.seg_tree[pos_in_seg_tree * 2 + 1]\n\n    def range_query(self, left: int, right: int) -> int:\n        left += self.n\n        right += self.n + 1\n        result = 0\n        while left < right:\n            if left % 2:\n                result += self.seg_tree[left]\n                left += 1\n            if right % 2:\n                right -= 1\n                result += self.seg_tree[right]\n            left //= 2\n            right //= 2\n        return result\n\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        self.build(nums)\n        results = []\n        for query in queries:\n            if query[0] == 1:\n                # Peak count query\n                li, ri = query[1], query[2]\n                if li == ri or li + 1 == ri:\n                    results.append(0)\n                else:\n                    results.append(self.range_query(li + 1, ri - 1))\n            elif query[0] == 2:\n                # Update query\n                indexi, vali = query[1], query[2]\n                self.update(indexi, vali)\n        return results\n        ",
    "submit_ts": "1718508448",
    "subm_id": "1289681583"
}