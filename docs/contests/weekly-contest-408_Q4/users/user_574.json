{
    "username": "rahulb4",
    "submission": "class Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        unordered_map<int, vector<int>> m;\n        for (int i = 0; i < circles.size(); i++) {\n            for (int j = 0; j < circles.size(); j++) {\n                if (circles[i][2] + circles[j][2] \n                    >= sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2))) {\n                        m[i].push_back(j);\n                        m[j].push_back(i);\n                    }\n            }\n        }\n        unordered_set<int> visited;\n        queue<int> q;\n        for (int i = 0; i < circles.size(); i++) {\n            if (circles[i][2] >= circles[i][0]) {\n                q.push(i);\n            } else if (circles[i][2] >= abs(Y - circles[i][1])) {\n                q.push(i);\n            }\n        }\n        while (!q.empty()) {\n            int idx = q.front();\n            q.pop();\n            if (visited.count(idx) != 0) continue;\n            visited.insert(idx);\n            if (circles[idx][2] >= circles[idx][1]) return false;\n            if (circles[idx][2] >= abs(X - circles[idx][0])) return false;\n            for (int val : m[idx]) q.push(val);\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722137036",
    "subm_id": "1335752260"
}