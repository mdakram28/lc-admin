{
    "username": "07dishwasherbob8",
    "submission": "class Solution {\n    \npublic:\n    \n    void printVector(vector<int> &v) {\n        for(int x : v) cout << x << \" \";\n        cout << '\\n';\n    }\n    \n    void distDfs(int i, int p, int d, vector<int> &dists, vector<vector<int>> &adj) {\n        dists[i] = d;\n        for(int c : adj[i]) {\n            if(c != p) distDfs(c,i,d+1,dists,adj);\n        }\n    }\n    \n    vector<int> getDists(int i, vector<vector<int>> &adj) {\n        vector<int> dists(adj.size());\n        distDfs(i, -1, 0, dists, adj);\n        return dists;\n    }\n    \n    vector<vector<int>> buildadj(vector<vector<int>> &edges) {\n        vector<vector<int>> adj(edges.size() + 1);\n        for(auto edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        return adj;\n    }\n    \n    int findCenter(vector<vector<int>> &adj) {\n        vector<int> d1 = getDists(0,adj);\n        int furthest = 0;\n        for(int i = 1; i < d1.size(); i++) {\n            if(d1[i] > d1[furthest]) furthest = i;\n        }\n        vector<int> d2 = getDists(furthest,adj);\n        int furthest2 = 0;\n        for(int i = 1; i < d2.size(); i++) {\n            if(d2[i] > d2[furthest2]) furthest2 = i;\n        }\n        vector<int> d3 = getDists(furthest2,adj);\n        int center = -1;\n        int diameter = findDiameter(adj);\n        set<int> ok;\n        if(diameter % 2 == 0) {\n            ok.insert(diameter / 2);\n        } else {\n            ok.insert(diameter / 2);\n            ok.insert(diameter / 2 + 1);\n        }\n        for(int i = 0; i < d2.size(); i++) {\n            if(ok.count(d2[i]) && ok.count(d3[i])) {\n                center = i;\n            }\n        }\n        // cout << \"d1 : \" << d1 << \"\\n\";\n        // cout << \"d1\\n\";\n        // printVector(d1);\n        // cout << \"f1 : \" << furthest << '\\n';\n        // // cout << \"d2 : \" << d2 << '\\n';\n        // cout << \"d2\\n\";\n        // printVector(d2);\n        // cout << \"f2 : \" << furthest2 << '\\n';\n        // cout << \"d3\\n\";\n        // printVector(d3);\n        // cout << \"center : \" << center << '\\n';\n        return center;\n    }\n    \n    int findDiameter(vector<vector<int>> &adj) {\n        vector<int> d1 = getDists(0,adj);\n        int furthest = 0;\n        for(int i = 1; i < d1.size(); i++) {\n            if(d1[i] > d1[furthest]) furthest = i;\n        }\n        vector<int> d2 = getDists(furthest, adj);\n        return *max_element(d2.begin(), d2.end());\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int>> adj1 = buildadj(edges1);\n        vector<vector<int>> adj2 = buildadj(edges2);\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        for(auto edge : edges2) {\n            edges1.push_back({edge[0] + n, edge[1] + n});\n        }\n        \n        int center1 = findCenter(adj1);\n        int center2 = findCenter(adj2);\n        // cout << \"c1 : \" << center1 << '\\n';\n        // cout << \"c2 : \" << center2 << '\\n';\n        edges1.push_back({center1, center2+n});\n        vector<vector<int>> newadj = buildadj(edges1);\n        return findDiameter(newadj);\n    }\n};",
    "submit_ts": 1719717267.0
}