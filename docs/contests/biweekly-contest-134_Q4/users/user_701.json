{
    "username": "MrPrince22",
    "submission": "#define pb           push_back\n#define ll           long long\n#define read(a)      for(auto &i: a) cin >> i;\n#define all(vec)     vec.begin(),vec.end()\n#define rall(vec)     vec.rbegin(),vec.rend()\n#define print(a)     for(auto i : a) cout << i << \" \"; cout << \"\\n\";\n#define vi           vector<int>\n#define vb           vector<bool>\n#define vvi          vector<vi>\n#define pii          pair<int,int>\n#define vii          vector<pair<int,int>>\n#define prq          priority_queue\nconst int N = 3e5 + 3;\nconst int INF = 1e9 + 3;\nconst int MOD = 1e9 + 7;\ntemplate<typename T, class CMP = function<T(const T &, const T &)>>\nclass SparseTable{\nprivate:\n    CMP merge;\n    vector<vector<T>> SP;\n    void build(const vector<T>& arr){\n        int n = arr.size();\n        int lg = 32 - __builtin_clz(n);\n        SP = vector<vector<int>>(lg, vector<int>(n));\n        SP[0] = arr;\n        for(int msk = 1; (1 << msk) <= n; msk++){\n            for(int i = 0; i + (1 << msk) <= n; ++i){\n                SP[msk][i] = merge(SP[msk-1][i], SP[msk-1][i + (1 << (msk-1))]);\n            }\n        }\n    }\npublic:\n    SparseTable(const vector<T>& arr, const CMP& cmp){\n        merge = cmp;\n        build(arr);\n    }\n    T query(int l, int r){\n        int len = r - l + 1;\n        int lg = 31 - __builtin_clz(len);\n        return merge(\n            SP[lg][l],\n            SP[lg][r - (1 << lg) + 1]\n        );\n        \n    }\n};\n\nclass Solution {\n    int n;\n    vii get_nums(SparseTable<int>& s, int st){\n        vii nums;\n        nums.pb({s.query(st, st), st});\n        while(true){\n            int l = nums.back().second + 1, r = n-1;\n            int where = -1;\n            while(l <= r){\n                int mid = l + (r - l) / 2;\n                if (s.query(st, mid) != nums.back().first){\n                    where = mid;\n                    r = mid - 1;\n                }\n                else\n                    l = mid + 1;\n            }\n            if (where == -1)\n                break;\n            nums.push_back({s.query(st, where), where});\n        }\n        return nums;\n        \n    }\n\npublic:\n    long long countSubarrays(vector<int>& arr, int k) {\n        n = arr.size();\n        ll ans = 0;\n        SparseTable<int> s(arr, [](const int& a, const int& b){return a & b;});\n        for(int i = 0; i < n; i++){\n            auto me = get_nums(s, i);\n            for(int i = 0; i < (int) me.size(); i++){\n                if (me[i].first != k)\n                    continue;\n                ll st = me[i].second;\n                ll end = (i+1 < me.size()? me[i+1].second : n);\n                ans+= (0LL + end - st);\n                break;\n            }\n\n        }\n        return ans;\n\n    }\n};",
    "submit_ts": "1720278123",
    "subm_id": "1311695384"
}