{
    "username": "DIyTJHT751",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    const ll INF = 1e9;\n\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(1e9) {} // Use a fixed large value directly\n    };\n\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children.count(ch)) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost = min(node->cost, cost);\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        TrieNode* root = new TrieNode();\n\n        // Build the trie with minimum costs\n        for (int i = 0; i < words.size(); i++) {\n            insert(root, words[i], costs[i]);\n        }\n\n        vector<ll> dp(n + 1, INF);\n        dp[0] = 0;\n\n        // Dynamic programming to fill dp array using the trie\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INF) continue;\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INF) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == INF ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720323481",
    "subm_id": "1312376628"
}