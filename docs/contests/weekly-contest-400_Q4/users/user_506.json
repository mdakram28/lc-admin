{
    "username": "looneyd_noob",
    "submission": "#include <vector>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int target) {\n        int n = nums.size();\n        vector<vector<int>> bitCount(n, vector<int>(31, 0));\n        \n        for (int i = 0; i < n; ++i) {\n            int element = nums[i];\n            for (int bit = 0; bit < 31; ++bit) {\n                bitCount[i][bit] = (i > 0) ? bitCount[i - 1][bit] : 0;\n                if (element & (1 << bit)) {\n                    bitCount[i][bit]++;\n                }\n            }\n        }\n\n        int minDifference = 1e9;\n        for (int i = 0; i < n; ++i) {\n            int l = i, h = n - 1;\n            while (l <= h) {\n                int mid = l + ((h - l) >> 1);\n                int value = 0;\n                \n                for (int bit = 0; bit < 31; ++bit) {\n                    int count = bitCount[mid][bit] - ((i > 0) ? bitCount[i - 1][bit] : 0);\n                    if (count == mid - i + 1) {\n                        value |= (1 << bit);\n                    }\n                }\n\n                minDifference = min(minDifference, abs(target - value));\n                if (target < value) {\n                    l = mid + 1;\n                } else if (target > value) {\n                    h = mid - 1;\n                } else {\n                    return 0;\n                }\n            }\n        }\n\n        return minDifference;\n    }\n};\n",
    "submit_ts": 1717298962.0
}