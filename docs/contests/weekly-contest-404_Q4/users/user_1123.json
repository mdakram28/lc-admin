{
    "username": "ankangarai",
    "submission": "class Solution {\npublic:\n    vector <vector<int>> g, h;\n    vector<int> dist, par;\n \n    void dfs(int nn, int pp, int dep, bool f){\n        dist[nn] = dep; par[nn] = pp;\n        for(auto v : (f ? h[nn] : g[nn])){\n            if(v != pp) dfs(v, nn, dep+1, f);\n        }\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m = edges2.size()+1;\n        g.clear(); h.clear(); g.resize(n); h.resize(m);\n        for(auto i : edges1) g[i[0]].push_back(i[1]), g[i[1]].push_back(i[0]);\n        for(auto i : edges2) h[i[0]].push_back(i[1]), h[i[1]].push_back(i[0]);\n        dist.clear(); dist.resize(n, 0); par.clear(); par.resize(n);\n        dfs(0, -1, 0, 0);\n        int maxm = max_element(dist.begin(), dist.end()) - dist.begin();\n        dfs(maxm, -1, 0, 0);\n        int maxm2 = max_element(dist.begin(), dist.end()) - dist.begin(), dia1 = 0;\n        while(par[maxm2] !=-1){\n            dia1++;\n            maxm2 = par[maxm2];\n        }\n        dist.clear(); dist.resize(m, 0); par.clear(); par.resize(m);\n        dfs(0, -1, 0, 1);\n        int maxmm = max_element(dist.begin(), dist.end()) - dist.begin();\n        dfs(maxmm, -1, 0, 1);\n        int maxmm2 = max_element(dist.begin(), dist.end()) - dist.begin(), dia2 = 0;\n        while(par[maxmm2] != -1){\n            dia2++;\n            maxmm2 = par[maxmm2];\n        }\n        // return dia1;\n        int ans = max(dia1, dia2); ans = max(ans, (1 + (dia1+1)/2 + (dia2+1)/2));\n        return ans;\n    }\n};",
    "submit_ts": 1719719984.0
}