{
    "username": "lydxlx",
    "submission": "import bisect\nfrom typing import *\nfrom collections import namedtuple\nfrom sortedcontainers import SortedList, SortedDict\nfrom collections import Counter\nfrom math import inf\nfrom math import gcd\nfrom math import factorial\nimport string\nimport random\nimport itertools\nfrom functools import cache\nfrom fractions import Fraction\n\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        lowCount = 0\n        upCount = 0\n        n = len(nums)\n        for i in range(1, n):\n            if nums[i] > nums[i - 1]:\n                upCount += abs(nums[i] - nums[i - 1])\n            else:\n                lowCount += abs(nums[i - 1] - nums[i])\n\n        if nums[0] < lowCount or nums[-1] < upCount:\n            return 0\n\n        lowCount = nums[0] - lowCount\n\n        def fastpow(a, b):\n            a %= 1000000007\n            res = 1\n            while b > 0:\n                if b % 2 == 1:\n                    res = res * a % 1000000007\n                a = a * a % 1000000007\n                b = b // 2\n            return res\n\n        def inv(a):\n            return fastpow(a, 1000000007 - 2)\n\n        def fac(a):\n            res = 1\n            for i in range(1, a + 1):\n                res = res * i % 1000000007\n            return res\n\n        def C(a, b):\n            return fac(a) * inv(fac(b)) * inv(fac(a - b))\n\n        return C(lowCount + n, n) % 1000000007\n\n\ns = Solution()\nprint(s.countOfPairs([2, 3, 2]))\nprint(s.countOfPairs([5, 5, 5, 5]))\n",
    "submit_ts": "1723345389",
    "subm_id": "1351554718"
}