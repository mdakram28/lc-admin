{
    "username": "Sambhav-Jain",
    "submission": "\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) \n    {\n        int res1=findMinHeightTrees(edges1),res2=findMinHeightTrees(edges2);\n        int half1=res1/2,half2=res2/2;\n        int temp=max(res1-half1,half1)+max(res2-half2,half2)+1;\n        return max({res1,res2,temp});\n    }\nprivate:\n    int findMinHeightTrees(vector<vector<int>>& edges) \n    {\n        int n=edges.size()+1;\n        vector<vector<int>>adj(n);\n        for(auto &edge:edges)\n        {\n            adj[edge[0]].emplace_back(edge[1]);\n            adj[edge[1]].emplace_back(edge[0]);\n        }\n        int x=getFarthestNode(0,adj);\n        int y=getFarthestNode(x,adj);\n        vector<bool>visited(n,false);\n        vector<int>path;\n        getPath(x,y,adj,visited,path);\n        return path.size()-1;\n    }\n    bool getPath(int source,int dest,const vector<vector<int>>&adj,vector<bool>&visited,vector<int>&path)\n    {\n        if(visited[source])\n        {\n            return false;\n        }\n        visited[source]=true;\n        path.emplace_back(source);\n        if(source==dest)\n        {\n            return true;\n        }\n        for(auto &v:adj[source])\n        {\n            if(getPath(v,dest,adj,visited,path))\n            {\n                return true;\n            }\n        }\n        path.pop_back();\n        return false;\n    }\n    void dfs(int u,const vector<vector<int>>&adj,vector<int>&distance,int dist)\n    {\n        if(distance[u]!=-1)\n        {\n            return;\n        }\n        distance[u]=dist++;\n        for(auto &v:adj[u])\n        {\n            dfs(v,adj,distance,dist);\n        }\n    }\n    int getFarthestNode(int from,const vector<vector<int>>&adj)\n    {\n        int n=adj.size();\n        vector<int>distance(n,-1);\n        dfs(from,adj,distance,0);\n        int farthest_node=0;\n        for(int i=0;i<n;i++)\n        {\n            if(distance[i]>distance[farthest_node])\n            {\n                farthest_node=i;\n            }\n        }\n        return farthest_node;\n    }\n};",
    "submit_ts": 1719717536.0
}