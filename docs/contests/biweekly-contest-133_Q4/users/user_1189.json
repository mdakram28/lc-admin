{
    "username": "chauhanjainil305",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& re) {\n        const int MOD = 1000000007;\n        sort(re.begin(), re.end(), [](const vector<int>& a, const vector<int>& b) {\n            return a[0] < b[0];\n        });\n        int maxIn = n * (n - 1) / 2;\n        vector<vector<int>> dp(n + 1, vector<int>(maxIn + 1, 0));\n        dp[0][0] = 1;\n        for (int length = 1; length <= n; ++length) {\n            vector<int> prefixSums(maxIn + 1, 0);\n            prefixSums[0] = dp[length - 1][0];\n            for (int k = 1; k <= maxIn; ++k) {\n                prefixSums[k] = (prefixSums[k - 1] + dp[length - 1][k]) % MOD;\n            }\n            for (int in = 0; in <= maxIn; ++in) {\n                if (in >= length) {\n                    dp[length][in] = (prefixSums[in] - prefixSums[in - length] + MOD) % MOD;\n                } else {\n                    dp[length][in] = prefixSums[in];\n                }\n            }\n            for (const auto& req : re) {\n                int end = req[0];\n                int count = req[1];\n                if (end + 1 == length) {\n                    for (int in = 0; in <= maxIn; ++in) {\n                        if (in != count) {\n                            dp[length][in] = 0;\n                        }\n                    }\n                }\n            }\n        }\n        int result = 0;\n        for (int in = 0; in <= maxIn; ++in) {\n            result = (result + dp[n][in]) % MOD;\n        }\n        return result;\n    }\n};",
    "submit_ts": "1719071815",
    "subm_id": "1296854780"
}