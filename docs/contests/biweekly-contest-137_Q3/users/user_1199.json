{
    "username": "Eduard",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        # # maximum one rock per line\n        # max_sum = 0\n\n        # # greedy, find all positions with highest points\n        # # and try to cover them\n\n        # m, n = len(board), len(board[0])\n        # dp[3][n]\n\n        # for i in range(m):\n        #     for j in range(n):\n        #         # try to put a rock on any position\n        #         current_sum = board[i][j]\n\n\n        \n        # return max_sum\n\n        m, n = len(board), len(board[0])\n        max_sum = -3 * int(1e9 + 7)\n\n        best_in_row = []\n        for i in range(m):\n            best_in_row.append(sorted([(board[i][j], j) for j in range(n)], reverse=True)[:3])\n        \n        for rows in itertools.combinations(range(m), 3):\n            row1, row2, row3 = rows\n            \n            row1_vals = best_in_row[row1]\n            row2_vals = best_in_row[row2]\n            row3_vals = best_in_row[row3]\n            \n            for c1 in range(3):\n                for c2 in range(3):\n                    if row2_vals[c2][1] == row1_vals[c1][1]:\n                        continue\n                    for c3 in range(3):\n                        if (row3_vals[c3][1] == row1_vals[c1][1] or \n                            row3_vals[c3][1] == row2_vals[c2][1]):\n                            continue\n                        current_sum = (row1_vals[c1][0] + row2_vals[c2][0] + row3_vals[c3][0])\n                        max_sum = max(max_sum, current_sum)\n        \n        return max_sum",
    "submit_ts": "1723908626",
    "subm_id": "1359160464"
}