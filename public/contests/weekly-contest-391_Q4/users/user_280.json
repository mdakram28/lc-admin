{
    "username": "paras3019",
    "submission": "class Solution {\n    public int minimumDistance(int[][] a) {\n        TreeMap<Integer, Integer> tm1 = new TreeMap<>();\n        TreeMap<Integer, Integer> tm2 = new TreeMap<>();\n        for(int x[]  : a){\n            tm1.put(x[0] + x[1], tm1.getOrDefault(x[0] + x[1], 0) + 1);\n            tm2.put(x[0] - x[1], tm2.getOrDefault(x[0] - x[1], 0) + 1);\n        }\n        // int low = 0, high = (int)(1e9);\n        // while(low <= high){\n        //     int mid = (low + high) >> 1;\n        //     if(check(a, tm1, tm2, a.length, mid))\n        //         high = mid - 1;\n        //     else\n        //         low = mid + 1;\n        // }\n        // return low;\n        int min = Integer.MAX_VALUE;\n        for(int x[] : a) {\n            tm1.put(x[0] + x[1], tm1.getOrDefault(x[0] + x[1], 0) - 1);\n            tm2.put(x[0] - x[1], tm2.getOrDefault(x[0] - x[1], 0) - 1);\n            if(tm1.get(x[0] + x[1]) == 0)\n                tm1.remove(x[0] + x[1]);\n            if(tm2.get(x[0] - x[1]) == 0)\n                tm2.remove(x[0] - x[1]);\n            min = Math.min(min, \n                Math.max(\n                    tm1.lastKey() - tm1.firstKey(),\n                    tm2.lastKey() - tm2.firstKey()\n                )\n            );\n            tm1.put(x[0] + x[1], tm1.getOrDefault(x[0] + x[1], 0) + 1);\n            tm2.put(x[0] - x[1], tm2.getOrDefault(x[0] - x[1], 0) + 1);\n        }\n        return min;\n    }\n    boolean check(int a[][], TreeMap<Integer, Integer> tm1, TreeMap<Integer, Integer> tm2, int n, int mid){\n        return false;\n    }\n}"
}