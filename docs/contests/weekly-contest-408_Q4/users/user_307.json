{
    "username": "muthuhariharan_sakthi",
    "submission": "/**\n * @param {number} X\n * @param {number} Y\n * @param {number[][]} circles\n * @return {boolean}\n */\nvar canReachCorner = function(X, Y, circles) {\n    const bfs = (graph, start, t1, t2, nodes) => {\n        const q = [];\n        const visited = new Array(nodes + 4).fill(false);\n        q.push(start);\n        visited[start] = true;\n\n        while (q.length > 0) {\n            const u = q.shift();\n            for (const v of graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[t1] || visited[t2];\n    };\n\n    const a = circles.length;\n    const b = Array.from({ length: a + 4 }, () => []);\n\n    const c = circles.map(circle => ({\n        x: circle[0],\n        y: circle[1],\n        r: circle[2]\n    }));\n\n    for (let d = 0; d < a; d++) {\n        const { x, y, r } = c[d];\n\n        if (x <= r) {\n            b[a].push(d);\n            b[d].push(a);\n        }\n        if (X - x <= r) {\n            b[a + 2].push(d);\n            b[d].push(a + 2);\n        }\n        if (y <= r) {\n            b[a + 1].push(d);\n            b[d].push(a + 1);\n        }\n        if (Y - y <= r) {\n            b[a + 3].push(d);\n            b[d].push(a + 3);\n        }\n        for (let e = d + 1; e < a; e++) {\n            const { x: x2, y: y2, r: r2 } = c[e];\n            const dist = Math.sqrt((x - x2) ** 2 + (y - y2) ** 2);\n            const sum_r = r + r2;\n            if (sum_r >= dist) {\n                b[d].push(e);\n                b[e].push(d);\n            }\n        }\n    }\n\n    let f = false;\n    f = f || bfs(b, a, a + 1, a + 2, a + 4); // Check for bottom-left corner\n    f = f || bfs(b, a + 3, a + 2, a + 1, a + 4); // Check for top-right corner\n    \n    return !f;\n};",
    "submit_ts": "1722137163",
    "subm_id": "1335755955"
}