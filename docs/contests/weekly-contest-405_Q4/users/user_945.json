{
    "username": "whateverrudra",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n\nusing namespace std;\n\nclass TrieVertex {\npublic:\n    vector<TrieVertex*> children;\n    int value;\n    bool isEndOfWord;\n\n    TrieVertex() : children(26, nullptr), value(INT_MAX), isEndOfWord(false) {}\n};\n\nclass TrieTree {\npublic:\n    TrieVertex* root;\n\n    TrieTree() {\n        root = new TrieVertex();\n    }\n\n    void addWord(const string& word, int cost) {\n        TrieVertex* node = root;\n        for (char c : word) {\n            if (!node->children[c - 'a']) {\n                node->children[c - 'a'] = new TrieVertex();\n            }\n            node = node->children[c - 'a'];\n        }\n        node->value = min(cost, node->value);\n        node->isEndOfWord = true;\n    }\n\n    TrieVertex* getRoot() {\n        return root;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieTree trie;\n        int length = target.size();\n        vector<int> minCost(length + 1, INT_MAX);\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.addWord(words[i], costs[i]);\n        }\n\n        minCost[0] = 0;\n\n        for (int i = 0; i < length; ++i) {\n            if (minCost[i] == INT_MAX) continue;\n\n            TrieVertex* node = trie.getRoot();\n            for (int j = i; j < length; ++j) {\n                char c = target[j];\n                if (!node->children[c - 'a']) break;\n                node = node->children[c - 'a'];\n                if (node->isEndOfWord) {\n                    minCost[j + 1] = min(minCost[j + 1], minCost[i] + node->value);\n                }\n            }\n        }\n\n        return minCost[length] == INT_MAX ? -1 : minCost[length];\n    }\n};",
    "submit_ts": "1720322231",
    "subm_id": "1312344306"
}