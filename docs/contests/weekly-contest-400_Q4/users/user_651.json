{
    "username": "abhisheksoni125",
    "submission": " #define INF INT32_MAX\nclass Segment{\npublic:\n    vector<int> tree;\n    int n;\n\n    Segment(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        b(arr, 0, 0, n - 1);\n    }\n\n    // Function to build the Segment Tree\n    void b(vector<int>& arr, int node, int start,int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end)>>1;\n            b(arr, 2 * node + 1, start, mid);\n            b(arr, 2 * node + 2, mid + 1, end);\n            tree[node]= tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(int l, int r)\n    {\n        return q(0, 0, n - 1, l, r);\n    }\n\n    int q(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) {\n            return INF;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left = q(2 * node + 1, start, mid, l, r);\n        int right = q(2 * node + 2, mid + 1, end, l, r);\n        return left & right;\n    }\n};\n\nint helper(vector<int> &arr, int k)\n{\n    int n = arr.size();\n    Segment st(arr);\n    int res = INF;\n    for (int i = 0; i < n; i++) {\n        int l = i - 1, r = n - 1, mid;\n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (st.query(i, mid) >= k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1) res = min(res, abs(st.query(i, l) - k));\n        res = min(res, abs(k - st.query(i, r)));\n    }\n    return res;\n}\nclass Solution {\npublic:\n   \n    \n  \n    int minimumDifference(vector<int>& arr, int k) {\n         return helper(arr,k);\n    }\n};",
    "submit_ts": "1717298994",
    "subm_id": "1274798324"
}