{
    "username": "f20220118",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    // Helper function to find the farthest node and its distance from a given start node using BFS\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        \n        int farthestNode = start, maxDist = 0;\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthestNode, maxDist};\n    }\n    \n    // Function to find the diameter of the tree using two-pass BFS\n    int findDiameter(const vector<vector<int>>& adj) {\n        pair<int, int> firstBfs = bfs(0, adj);\n        pair<int, int> secondBfs = bfs(firstBfs.first, adj);\n        return secondBfs.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        // Build adjacency lists for both trees\n        vector<vector<int>> adj1(n), adj2(m);\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        // Find diameters of both trees\n        int diameter1 = findDiameter(adj1);\n        int diameter2 = findDiameter(adj2);\n\n        // The new diameter after connecting two nodes from different trees\n        // will be max((d1 + 1) / 2 + (d2 + 1) / 2 + 1, max(d1, d2))\n        // where d1 and d2 are the diameters of the two trees\n        int result = max({(diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1, diameter1, diameter2});\n        return result;\n    }\n};\n\n// Example usage:\n// int main() {\n//     Solution sol;\n//     vector<vector<int>> edges1 = {{0, 1}, {1, 2}, {1, 3}};\n//     vector<vector<int>> edges2 = {{0, 1}, {1, 2}};\n//     int result = sol.minimumDiameterAfterMerge(edges1, edges2);\n//     cout << result << endl; // Output the minimum possible diameter\n//     return 0;\n// }\n",
    "submit_ts": "1719715601",
    "subm_id": "1304341153"
}