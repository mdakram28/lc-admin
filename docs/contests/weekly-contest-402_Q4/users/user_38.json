{
    "username": "mkawa222",
    "submission": "class BitSum:\n    def __init__(self, n):\n        self._n = n+1\n        self._table = [0]*self._n\n        self._origin = [0]*n\n\n    def __getitem__(self, item):\n        return self._origin[item]\n\n    def __setitem__(self, index, value):\n        self.add(index, value-self._origin[index])\n        self._origin[index] = value\n\n    def add(self, i, x):\n        if x == 0: return\n        self._origin[i] += x\n        i += 1\n        while i < self._n:\n            self._table[i] += x\n            i += i & -i\n\n    def sum(self, r):\n        res = 0\n        while r > 0:\n            res += self._table[r]\n            r -= r & -r\n        return res\n\n    def sumlr(self, l, r):\n        if l >= r: return 0\n        if l == 0: return self.sum(r)\n        return self.sum(r)-self.sum(l)\n\n    # return \"min(i) of sum(a[0]..a[i])>=x\" or \"N\"\n    def bisect(self, x):\n        idx = 0\n        d = 1 << (self._n-1).bit_length()-1\n        while d:\n            if idx|d < self._n and self._table[idx|d] < x:\n                idx |= d\n                x -= self._table[idx]\n            d >>= 1\n        return idx\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n=len(nums)\n        bit=BitSum(n)\n        for i in range(1,n-1):\n            if nums[i-1]<nums[i] and nums[i]>nums[i+1]:bit.add(i,1)\n        ans=[]\n        for t,l,r in queries:\n            if t==1:\n                l+=1\n                ans.append(bit.sumlr(l,r))\n            else:\n                p,v=l,r\n                nums[p]=v\n                for i in range(p-1,p+2):\n                    if i<1 or i>n-2:continue\n                    if nums[i-1]<nums[i] and nums[i]>nums[i+1]:\n                        bit[i]=1\n                    else:\n                        bit[i]=0\n        return ans\n",
    "submit_ts": "1718506164",
    "subm_id": "1289609295"
}