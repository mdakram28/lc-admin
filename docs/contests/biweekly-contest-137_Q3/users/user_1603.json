{
    "username": "Shreesh Shukla",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        vector<vector<pair<int, int>>> rowMax(m, vector<pair<int, int>>(3, {INT_MIN, -1}));\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<int, int>> maxValues;\n            for (int j = 0; j < n; ++j) {\n                maxValues.push_back({board[i][j], j});\n            }\n            sort(maxValues.rbegin(), maxValues.rend());\n            for (int k = 0; k < 3 && k < maxValues.size(); ++k) {\n                rowMax[i][k] = maxValues[k];\n            }\n        }\n\n        long long maxSum = LLONG_MIN;\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (auto [v1, c1] : rowMax[r1]) {\n                        for (auto [v2, c2] : rowMax[r2]) {\n                            if (c1 == c2) continue;\n                            for (auto [v3, c3] : rowMax[r3]) {\n                                if (c1 == c3 || c2 == c3) continue;\n                                long long currentSum = static_cast<long long>(v1) + v2 + v3;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723907471",
    "subm_id": "1359109165"
}