{
    "username": "agix",
    "submission": "struct TrieNode\n{\n    vector<TrieNode*> children;\n    bool isLeaf;\n    int cost = 1e9;\n    \n    TrieNode()\n    {\n        children = vector<TrieNode*>(26);\n        isLeaf = false;\n    }\n};\n\nvoid insertNode(TrieNode* root, string& word, int cost)\n{\n    int n = word.size();\n    TrieNode* cur = root;\n    \n    for (int i = n - 1; i >= 0; i--)\n    {\n        int ind = word[i] - 'a';\n        \n        if (cur->children[ind] == NULL)\n        {\n            cur->children[ind] = new TrieNode();\n        }\n        \n        cur = cur->children[ind];\n    }\n    \n    cur->isLeaf = true;\n    cur->cost = min(cur->cost, cost);\n}\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        \n        int m = words.size();\n        \n        for (int i = 0; i < m; i++)\n        {\n            insertNode(root, words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        \n        vector<int> dp(n + 1, -1);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++)\n        {\n            TrieNode* cur = root;\n            \n            for (int j = i; j >= 0; j--)\n            {\n                int ind = target[j] - 'a';\n                \n                if (cur->children[ind] != NULL)\n                {\n                    cur = cur->children[ind];\n                }\n                else\n                {\n                    break;\n                }\n                \n                if (cur->isLeaf && dp[j] != -1)\n                {\n                    int c = cur->cost + dp[j];\n                    if (dp[i + 1] == -1)\n                    {\n                        dp[i + 1] = c;\n                    }\n                    else\n                    {\n                        dp[i + 1] = min(dp[i + 1], c);\n                    }\n                }\n            }\n            \n            //cout << \"dp[\" << i + 1 << \"] \" << dp[i + 1] << endl;\n        }\n        \n        return dp[n];\n    }\n};",
    "submit_ts": "1720323240",
    "subm_id": "1312370733"
}