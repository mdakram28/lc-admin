{
    "username": "Ting",
    "submission": "class Solution {\n    using pii = pair<int, int>;\n\n    vector<vector<pii>> buildRowTop3Largest(vector<vector<int>> &board) {\n        int n = board.size(), m = board[0].size();\n        // largest, second largest, third largest\n        vector<vector<pii>> largest(n, vector<pii>(3));\n        for(int i = 0; i < n; i++) {\n            largest[i][0] = {board[i][0], 0};\n            largest[i][1] = {board[i][1], 1};\n            largest[i][2] = {board[i][2], 2};\n            sort(largest[i].begin(), largest[i].end(), greater<>());\n            // reverse(largest[i].begin(), largest[i].end());\n            \n            for(int j = 3; j < m; j++) {\n                if(board[i][j] > largest[i][0].first) {\n                    largest[i][2] = largest[i][1];\n                    largest[i][1] = largest[i][0];\n                    largest[i][0] = {board[i][j], j};\n                } else if(board[i][j] > largest[i][1].first) {\n                    largest[i][2] = largest[i][1];\n                    largest[i][1] = {board[i][j], j};\n                } else if(board[i][j] > largest[i][2].first) {\n                    largest[i][2] = {board[i][j], j};\n                }\n            }\n        }\n        return largest;\n    }\n\n    inline bool neq(int a, int b, int c) {\n        return a != b && a != c && b != c;\n    }\n\n    long long getVal(vector<vector<pii>> &largest, int i, int j, int k, int a, int b, int c) {\n        long long tmp = LLONG_MIN;\n        if(neq(largest[i][a].second, largest[j][b].second, largest[k][c].second)) {\n            tmp = (long long) largest[i][a].first + (long long) largest[j][b].first + (long long) largest[k][c].first;\n        }\n        return tmp;\n    }\n\n    void print(vector<vector<pii>>& largest) {\n        for(int i = 0; i < largest.size(); i++) {\n            cout << \"row \" << i << \"'s largest:\\n\";\n            for(int j = 0; j < largest[i].size(); j++) {\n                cout << largest[i][j].first << \"(\" << largest[i][j].second << \") \";\n            }\n            cout << \"\\n\";\n        }\n    }\n\npublic: // do not put them in the same row or col\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector<vector<pii>> largest = buildRowTop3Largest(board);\n        // print(largest);\n\n        long long ans = LLONG_MIN;\n        for(int i = 0; i < n; i++) {\n            for(int j = i + 1; j < n; j++) {\n                for(int k = j + 1; k < n; k++) {\n                    // \u7aae\u8209\u4e09\u500b row \u7684\u7d44\u5408\n                    for(int a = 0; a < 3; a++) {\n                        for(int b = 0; b < 3; b++) {\n                            for(int c = 0; c < 3; c++) {\n                                ans = max(ans, getVal(largest, i, j, k, a, b, c));\n                            }\n                        }\n                    }\n                    // ans = max({\n                    //     ans,\n                    //     getVal(largest, i, j, k, 0, 1, 2),\n                    //     getVal(largest, i, j, k, 0, 2, 1),\n                    //     getVal(largest, i, j, k, 1, 0, 2),\n                    //     getVal(largest, i, j, k, 1, 2, 0),\n                    //     getVal(largest, i, j, k, 2, 0, 1),\n                    //     getVal(largest, i, j, k, 2, 1, 0),\n                    // });\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723908779",
    "subm_id": "1359166780"
}