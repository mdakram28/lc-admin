{
    "username": "Bolo_Balaji_Maharaj_Ki_Jai",
    "submission": "class Solution {\n    int calculateDiameter(vector<vector<int>>&graph,int &diameter,int parent,int node){\n        vector<int>vec;\n        for(auto neighbour:graph[node]){\n            if(neighbour==parent)continue;\n            int a=calculateDiameter(graph,diameter,node,neighbour);\n            vec.push_back(a);\n        }\n        int maxm=0;\n        int secondMaxm=0;\n        for(auto it:vec){\n            if(maxm<=it){\n                secondMaxm=maxm;\n                maxm=it;\n            }else if(it>=secondMaxm){\n                secondMaxm=it;\n            }\n        }\n        \n        diameter=max(diameter,maxm+secondMaxm+1);\n        return maxm+1;\n    }\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size();\n        int m=edges2.size();\n        \n        vector<vector<int>>graph1(n+1);\n        vector<vector<int>>graph2(m+1);\n        for(auto edge:edges1){\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n        for(auto edge:edges2){\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n        \n        int diameter1=0;\n        calculateDiameter(graph1,diameter1,-1,0);\n        int diameter2=0;\n        calculateDiameter(graph2,diameter2,-1,0);\n        int ans=max(diameter1-1,diameter2-1);\n        if(diameter1%2==0)diameter1++;\n        if(diameter2%2==0)diameter2++;\n        cout<<diameter1<<\" \"<<diameter2<<endl;\n        int maxm1=(diameter1+1)/2;\n        int maxm2=(diameter2+1)/2;\n        ans=max(ans,maxm1+maxm2-1);\n        return ans;\n    }\n};",
    "submit_ts": 1719718787.0
}