{
    "username": "Ng_Chun-fai",
    "submission": "class Solution {\n\n//    public static void main(String[] args) {\n//        Solution solution = new Solution();\n////        System.out.println(solution.getResults(new int[][]{{1, 2}, {2, 3, 3}, {2, 3, 1}, {2, 2, 2}}));\n////        System.out.println(solution.getResults(new int[][]{{2, 1, 2}}));\n//        System.out.println(solution.getResults(new int[][]{{1, 1}, {1, 4}, {1, 13}, {1, 6}, {2, 4, 14}}));\n//        System.out.println(solution.getResults(new int[][]{{1, 7}, {2, 7, 6}, {1, 2}, {2, 7, 5}, {2, 7, 6}}));\n//    }\n\n    public List<Boolean> getResults(int[][] queries) {\n        int mx = (int) (1e4) * 5 + 1;\n        SegmentTreeBasicRangeMax tr = new SegmentTreeBasicRangeMax(new int[mx]);\n        tr.update(0, mx);\n        TreeSet<Integer> set = new TreeSet<>();\n        set.add(0);\n        set.add(mx + 1);\n        ArrayList<Boolean> ans = new ArrayList<>();\n        for (int[] query : queries) {\n            if (query[0] == 1) {\n                int x = query[1];\n                Integer floor = set.floor(x);\n                Integer ceiling = set.ceiling(x);\n                tr.update(floor, x - floor);\n                tr.update(x, ceiling - x);\n                set.add(x);\n            } else {\n                int x = query[1], sz = query[2];\n                Integer floor = set.floor(x);\n                int v = x - floor;\n                if (floor > 0) {\n                    v = Math.max(v, tr.max(0, floor - 1));\n                }\n                ans.add(v >= sz);\n            }\n        }\n        return ans;\n    }\n}\n\n/**\n * \u533a\u95f4\u6700\u5927\u503c\u57fa\u672c\u7ebf\u6bb5\u6811 (\u65e0\u61d2\u6807\u8bb0\uff0c\u65e0\u533a\u95f4\u4fee\u6539\u65b9\u6cd5\uff0c\u4e0d\u7ef4\u62a4 nums[i])\n * \u652f\u6301\uff1a\u5355\u70b9\u4fee\u6539 / \u5355\u70b9\u67e5\u8be2 / \u533a\u95f4\u67e5\u8be2\u6700\u5927\u503c\n */\nclass SegmentTreeBasicRangeMax {\n    int[] nums, tree;\n    int n;\n    public SegmentTreeBasicRangeMax(int[] nums){\n        this.nums = nums;\n        this.n = nums.length;\n        this.tree = new int[4 * n];\n        build(0, n - 1, 1);\n    }\n    public void add(int i, int x){ // \u5355\u70b9\u4fee\u6539(\u9a71\u52a8): nums[i] += x\n        add(i, x, 0, n - 1, 1);\n    }\n    public void update(int i, int x){// \u5355\u70b9\u4fee\u6539(\u9a71\u52a8): nums[i] = x\n        update(i, x, 0, n - 1, 1);\n    }\n    public int query(int i){ // \u5355\u70b9\u67e5\u8be2 (\u9a71\u52a8): \u67e5\u8be2 nums[i]\n        return query(i, 0, n - 1, 1);\n    }\n    public int sum(int l, int r){ // \u533a\u95f4\u67e5\u8be2(\u9a71\u52a8): nums[l]~nums[r]\u4e4b\u548c\n        return sum(l, r, 0, n - 1, 1);\n    }\n    public int max(int l, int r){ // \u533a\u95f4\u67e5\u8be2 (\u9a71\u52a8): \u67e5\u8be2[l,r]\u4e2d\u7684\u6700\u5927\u503c\n        return max(l, r, 0, n - 1, 1);\n    }\n    // \u5355\u70b9\u67e5\u8be2 (\u5177\u4f53): \u67e5\u8be2 nums[i]\uff0c\u5c3e\u9012\u5f52\n    private int query(int idx, int s, int t, int i){\n        if(s == t) return tree[i];\n        int c = s + (t - s) / 2;\n        if(idx <= c) return query(idx, s, c, i * 2);\n        else return query(idx, c + 1, t, i * 2 + 1);\n    }\n    // \u5355\u70b9\u4fee\u6539: nums[idx] += x\n    private void add(int idx, int x, int s, int t, int i){\n        if(s == t) {\n            tree[i] += x; // \u589e\u91cf\u66f4\u65b0\n            return;\n        }\n        int c = s + (t - s) / 2;\n        if(idx <= c) add(idx, x, s, c, i * 2);\n        else add(idx, x, c + 1, t, i * 2 + 1);\n        pushUp(i);\n    }\n    // \u5355\u70b9\u4fee\u6539: nums[idx] = x\n    private void update(int idx, int x, int s, int t, int i){\n        if(s == t) {\n            tree[i] = x; // \u8986\u76d6\u66f4\u65b0\n            return;\n        }\n        int c = s + (t - s) / 2;\n        if(idx <= c) update(idx, x, s, c, i * 2);\n        else update(idx, x, c + 1, t, i * 2 + 1);\n        pushUp(i);\n    }\n    // \u533a\u95f4\u67e5\u8be2: nums[l]~nums[r]\u4e4b\u548c\n    private int sum(int l, int r, int s, int t, int i){\n        if(s == t) return tree[i]; // \u8fd4\u56de\u6240\u6c42\u8303\u56f4\u5185\u7684\u53f6\u5b50\u7ed3\u70b9\u7684\u503c\n        int c = s + (t - s) / 2, sum = 0;\n        if(l <= c) sum += sum(l, r, s, c, i * 2); // \u9012\u5f52\u7d2f\u52a0\u76ee\u6807\u533a\u95f4\u843d\u5728c\u5de6\u4fa7(\u542bc)\u7684\u533a\u95f4\u548c\n        if(r > c) sum += sum(l, r, c + 1, t, i * 2 + 1); // \u9012\u5f52\u7d2f\u52a0\u76ee\u6807\u533a\u95f4\u843d\u5728c\u53f3\u4fa7\u7684\u533a\u95f4\u548c\n        return sum;\n    }\n    // \u533a\u95f4\u67e5\u8be2: \u67e5\u8be2[l,r]\u4e2d\u7684\u6700\u5927\u503c\n    private int max(int l, int r, int s, int t, int i){\n        if(l <= s && t <= r) return tree[i];\n        int c = s + (t - s) / 2, lmax = Integer.MIN_VALUE, rmax = Integer.MIN_VALUE;\n        if(l <= c) lmax = max(l, r, s, c, i * 2);\n        if(r > c) rmax = max(l, r, c + 1, t, i * 2 + 1);\n        return Math.max(lmax, rmax);\n    }\n    // \u6784\u5efa\u7ebf\u6bb5\u6811(tree\u6570\u7ec4)\n    private void build(int s, int t, int i){\n        if(s == t) { // s: start,nums\u5f53\u524d\u533a\u95f4\u8d77\u70b9\u4e0b\u6807\uff0ct: terminal,nums\u5f53\u524d\u7ed3\u70b9\u533a\u95f4\u672b\u5c3e\u4e0b\u6807\n            tree[i] = nums[s];\n            return;\n        }\n        int c = s + (t - s) / 2;\n        build(s, c, i * 2);\n        build(c + 1, t, i * 2 + 1);\n        pushUp(i);\n    }\n    // pushup: \u66f4\u65b0 tree[i]\n    private void pushUp(int i){\n        tree[i] = Math.max(tree[i * 2], tree[i * 2 + 1]);\n    }\n}",
    "submit_ts": "1716652788",
    "subm_id": "534780318"
}