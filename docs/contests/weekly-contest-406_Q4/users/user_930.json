{
    "username": "Stark-123",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut,\n                          vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int horizontal_pieces = 1;\n        int vertical_pieces = 1;\n\n        long long total_cost = 0;\n\n        int i = 0, j = 0;\n\n        // Process cuts until all cuts are exhausted\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] >= verticalCut[j]) {\n\n                total_cost +=\n                    static_cast<long long>(horizontalCut[i]) * vertical_pieces;\n                horizontal_pieces++;\n                i++;\n            } else {\n\n                total_cost +=\n                    static_cast<long long>(verticalCut[j]) * horizontal_pieces;\n                vertical_pieces++;\n                j++;\n            }\n        }\n\n        while (i < horizontalCut.size()) {\n            total_cost +=\n                static_cast<long long>(horizontalCut[i]) * vertical_pieces;\n            i++;\n        }\n\n        while (j < verticalCut.size()) {\n            total_cost +=\n                static_cast<long long>(verticalCut[j]) * horizontal_pieces;\n            j++;\n        }\n\n        return total_cost;\n    }\n};",
    "submit_ts": "1720925642",
    "subm_id": "1320261475"
}