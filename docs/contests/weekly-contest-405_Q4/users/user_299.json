{
    "username": "endless_mercury",
    "submission": "struct TrieNode{\n    TrieNode* child[26];\n    int val;\n    bool isLeaf;\n    TrieNode(){\n        for(int i=0;i<26;i++){\n            child[i]=NULL;\n        }\n        isLeaf=false;\n        val=INT_MAX;\n    }\n};\nclass Solution {\npublic:\n    TrieNode*head;\n    void insert(string &v,int w){\n        TrieNode*temp=head;\n        for(int i=0;i<v.length();i++){\n            if(!temp->child[v[i]-'a']){\n                temp->child[v[i]-'a']=new TrieNode();\n            }\n            temp=temp->child[v[i]-'a'];\n        }\n        temp->isLeaf=true;\n        temp->val=min(w,temp->val);\n    }\n    int dfs(int i,string &target,vector<int>&dp){\n        int n=target.length();\n        if(i==n)\n            return 0;\n        if(dp[i]!=-2)\n            return dp[i];\n        int ans=-1;\n        TrieNode*temp=head;\n        for(int j=i;j<n;j++){\n            if(!temp->child[target[j]-'a']){\n                break;\n            }\n            temp=temp->child[target[j]-'a'];\n            if(temp->isLeaf){\n                int x=dfs(j+1,target,dp);\n                if(x!=-1){\n                    if(ans==-1)\n                        ans=temp->val+x;\n                    else\n                        ans=min(ans,temp->val+x);\n                }\n            }\n        }\n        return dp[i]=ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.length();\n        vector<int> dp(n,-2);\n        int m=words.size();\n        head=new TrieNode();\n        for(int i=0;i<m;i++){\n            insert(words[i],costs[i]);\n        }\n        int ans=dfs(0,target,dp);\n        if(ans==INT_MAX)\n            return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720322060",
    "subm_id": "1312339600"
}