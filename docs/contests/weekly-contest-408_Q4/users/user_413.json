{
    "username": "anudeep0306",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &gh, int st, int t1, int t2, int nd) {\n    queue<int> q;\n    vector<int> vst(nd + 4, 0);\n    q.push(st);\n    vst[st] = 1;\n    \n    while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : gh[u]) {\n                if (!vst[v]) {\n                    q.push(v);\n                    vst[v] = 1;\n                }\n            }\n        }\n        return vst[t1] || vst[t2];\n    }\n      void checkAndAddEdge(int i, int j, vector<pair<pair<int, int>, int>>& cr, vector<vector<int>>& gh, int X, int Y) {\n        if (cr[i].first.first <= cr[i].second) {\n            gh[j].push_back(i);\n            gh[i].push_back(j);\n        }\n        if (X - cr[i].first.first <= cr[i].second) {\n            gh[j + 2].push_back(i);\n            gh[i].push_back(j + 2);\n        }\n        if (cr[i].first.second <= cr[i].second) {\n            gh[j + 1].push_back(i);\n            gh[i].push_back(j + 1);\n        }\n        if (Y - cr[i].first.second <= cr[i].second) {\n            gh[j + 3].push_back(i);\n            gh[i].push_back(j + 3);\n        }\n    }\n   \n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<pair<pair<int, int>, int>> cr(n);\n        vector<vector<int>> gh(n + 4);\n\n        for (int i = 0; i < n; ++i) {\n            cr[i] = {{c[i][0], c[i][1]}, c[i][2]};\n        }\n\n        auto addEdge = [&](int i, int j) {\n            gh[i].push_back(j);\n            gh[j].push_back(i);\n        };\n\n        for (int i = 0; i < n; ++i) {\n            checkAndAddEdge(i, n, cr, gh, X, Y);\n\n            for (int j = i + 1; j < n; ++j) {\n                double dist = sqrt(pow(cr[i].first.first - cr[j].first.first, 2) +\n                                   pow(cr[i].first.second - cr[j].first.second, 2));\n                int rad_sum = cr[i].second + cr[j].second;\n                if (rad_sum >= dist) {\n                    addEdge(i, j);\n                }\n            }\n        }\n\n        int blocked = 0;\n        blocked = max(blocked, bfs(gh, n, n + 1, n + 2, n + 4));\n        blocked = max(blocked, bfs(gh, n + 3, n + 2, n + 1, n + 4));\n\n        return !blocked;\n    }\n};",
    "submit_ts": "1722137660",
    "subm_id": "1335770116"
}