{
    "username": "pasricha_dhruv",
    "submission": " \nint solveDown(int root, vector<int> Adj[], int parent, vector<vector<int>> &down)\n{\n    int mx = 0;\n    int smx = 0;\n \n    for (int child : Adj[root])\n    {\n        if (child == parent)\n            continue;\n \n        int cur = 1 + (child % 2 == 0) + solveDown(child, Adj, root, down);\n \n        if (cur > mx)\n        {\n            smx = mx;\n            mx = cur;\n        }\n        else if (cur > smx)\n            smx = cur;\n    }\n \n    down[root][0] = mx;\n    down[root][1] = smx; \n \n    return mx;\n}\n \nvoid solveUp(int root, vector<int> Adj[], int parent, vector<vector<int>> &down, vector<int> &up)\n{\n    if (parent != -1)\n    {\n        if (down[root][0] + 1 + (root%2==0) == down[parent][0])\n            up[root] = 1 + (parent%2==0) + down[parent][1];\n        else\n            up[root] = 1 + (parent%2==0) + down[parent][0];\n \n        up[root] = max(up[root], 1 + (parent%2==0) + up[parent]);\n    }\n \n    for (int child : Adj[root])\n    {\n        if (child == parent)\n            continue;\n \n        solveUp(child, Adj, root, down, up);\n    }\n}\n \n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n    \n        vector<int> Adj[n];\n \n        for(auto it : edges)\n        {\n            int u = it[0], v = it[1];\n            Adj[u].push_back(v);\n            Adj[v].push_back(u);\n        }\n\n        vector<int> up(n, 0);\n        vector<vector<int>> down(n, vector<int>(2, 0));\n\n        solveDown(1, Adj, -1, down);\n        solveUp(1, Adj, -1, down, up);\n\n        vector<int> ans(n);\n        for(int i = 0; i < n; ++i)\n        {\n            ans[i] = max(up[i], down[i][0]);\n        }\n        \n        return ans;\n    }\n    \n};",
    "submit_ts": "1722698107",
    "subm_id": "1343169853"
}