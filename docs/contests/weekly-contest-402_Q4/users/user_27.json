{
    "username": "mhasan01",
    "submission": "template<class Info, class Merge = plus<Info>>\nstruct SegmentTree {\n    const int n;\n    const Merge merge;\n    vector<Info> t;\n    SegmentTree(int len) : n(len), merge(Merge()), t(4 << __lg(len)) {}\n    SegmentTree(vector<Info> init) : SegmentTree(init.size()) {\n        function<void(int, int, int)> build = [&](int v, int s, int e) {\n            if (s == e) {\n                t[v] = init[s];\n                return;\n            }\n            int mid = (s + e) >> 1;\n            build(v << 1, s, mid);\n            build(v << 1 | 1, mid + 1, e);\n            pull(v);\n        };\n        build(1, 0, n - 1);\n    }\n\n    void pull(int v) {\n        t[v] = merge(t[v << 1], t[v << 1 | 1]);\n    }\n\n    void modify(int v, int s, int e, int pos, const Info &val) {\n        if (s == e && s == pos) {\n            t[v] = val;\n            return;\n        }\n        int mid = (s + e) >> 1;\n        if (pos <= mid) {\n            modify(v << 1, s, mid, pos, val);\n        } else {\n            modify(v << 1 | 1, mid + 1, e, pos, val);\n        }\n        pull(v);\n    }\n\n    void modify(int p, const Info &v) {\n        modify(1, 0, n - 1, p, v);\n    }\n\n    Info rangeQuery(int v, int s, int e, int l, int r) {\n        if (e < l || s > r || l > r) {\n            return Info();\n        }\n        if (l <= s && e <= r) {\n            return t[v];\n        }\n        int mid = (s + e) >> 1;\n        return merge(rangeQuery(v << 1, s, mid, l, r), rangeQuery(v << 1 | 1, mid + 1, e, l, r));\n    }\n\n    Info rangeQuery(int l, int r) {\n        return rangeQuery(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& q) {\n        int n = (int) a.size();\n        vector<int> p(n);\n        for (int i = 1; i + 1 < n; i++) {\n            if (a[i] > max(a[i - 1], a[i + 1])) {\n                p[i] = 1;\n            }\n        }\n        SegmentTree<int> sgt(p);\n        vector<int> res;\n        for (auto& qq : q) {\n            int tp = qq[0];\n            if (tp == 1) {\n                int l = qq[1], r = qq[2];\n                int ans = sgt.rangeQuery(l, r);\n                if (p[l]) {\n                    --ans;\n                }\n                if (l < r && p[r]) {\n                    --ans;\n                }\n                res.emplace_back(ans);\n            } else if (tp == 2) {\n                int idx = qq[1];\n                int val = qq[2];\n                a[idx] = val;\n                for (int i = idx - 1; i <= idx + 1; i++) {\n                    if (i <= 0 || i >= n - 1) {\n                        continue;\n                    }\n                    if (a[i] > max(a[i - 1], a[i + 1])) {\n                        p[i] = 1;\n                    } else {\n                        p[i] = 0;\n                    }\n                    sgt.modify(i, p[i]);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718506044",
    "subm_id": "1289604875"
}