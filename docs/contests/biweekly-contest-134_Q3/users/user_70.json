{
    "username": "user2937Vz",
    "submission": "class Solution:\n    def numberOfAlternatingGroups(self, a: List[int], k: int) -> int:\n        \n        n = len(a)\n        zeros = [[0 , 0] for i in range(2 * n + 1)]\n        ones = [[0 , 0] for i in range(2 * n + 1)]\n        \n        for i in range(2 * n):\n            ones[i + 1][0] += ones[i][0]\n            ones[i + 1][1] += ones[i][1]\n            zeros[i + 1][0] += zeros[i][0]\n            zeros[i + 1][1] += zeros[i][1]\n            if(a[i % n] == 1):\n                ones[i + 1][i & 1] += 1\n            else:\n                zeros[i + 1][i & 1] += 1\n        \n        \n        ans = 0\n        for i in range(n):\n            one = ones[i + k][i & 1] - ones[i][i & 1];\n            zero = zeros[i + k][(i & 1) ^ 1] - zeros[i][(i & 1) ^ 1]\n            if((one + zero) == k):\n                ans += 1\n                continue\n            \n            one = ones[i + k][(i & 1) ^ 1] - ones[i][(i & 1) ^ 1]\n            zero = zeros[i + k][i & 1] - zeros[i][i & 1]\n            if((one + zero) == k):\n                ans += 1\n        \n        return ans",
    "submit_ts": "1720277275",
    "subm_id": "1311656046"
}