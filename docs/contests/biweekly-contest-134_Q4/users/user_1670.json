{
    "username": "BhargavVidja",
    "submission": "#include <vector>\nusing namespace std;\nvoid b(){\n    return;\n}\nint v(){\n    for(int i=0;i<3;i++){\n        \n    }\n    return 0;\n}\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int target) {\n        int n = nums.size();\n        // Initialize a 2D vector to keep track of bit counts\n        vector<vector<int>> bitCount(n+1, vector<int>(33, 0));\n        v();\n                b();\n               \n        \n        // Fill bitCount with the count of set bits for each prefix of the array\n        v();\n        for(int i = 0; i < n; i++){\n            int num = nums[i];\n            int bitIndex = 0;\n            while(num){\n                if(num & 1){\n                    bitCount[i+1][bitIndex] = bitCount[i][bitIndex] + 1; \n                }\n                // jywqfdew iugw    qw jhhswdew\n                bitIndex++;\n                num >>= 1;\n            }\n        }\n        v();\n                b();\n                \n\n        long long result = 0;\n        \n        // Iterate through each starting index\n        for(int start = 0; start < n; start++){\n            int left = start;\n            int right = n - 1;\n            int leftIndex = -1;\n            bool found = false;\n            \n            // Binary search to find the leftmost subarray end\n            while(left <= right){\n                int mid = (left + right) / 2;\n                int subarrayXOR = 0;\n                // uysva juqwihd\n                \n                // Calculate XOR for the subarray\n                for(int j = 0; j < 33; j++){\n                    int bitDifference = bitCount[mid + 1][j] - bitCount[start][j];\n                    if(bitDifference == mid - start + 1){\n                        subarrayXOR |= (1 << j);\n                    }\n                }\n                \n                if(subarrayXOR == target) found = true;\n                \n                \n                if(subarrayXOR > target){\n                    left = mid + 1;\n                } else {\n                    leftIndex = mid;\n                    right = mid - 1;\n                    // kjbdqws kubdqwe iuwdhqew\n                }\n            }\n            v();\n                b();\n                v();\n                b();\n            if(leftIndex == -1 || !found) continue;\n\n            left = start;\n            v();\n            right = n - 1;\n            // wqudg iowdn deqoi xqlij3qe \n            v();\n                b();\n                \n            int rightIndex = -1;\n            \n            // Binary search to find the rightmost subarray end\n            b();\n            while(left <= right){\n                int mid = (left + right) / 2;\n                int subarrayXOR = 0;\n                \n                // Calculate XOR for the subarray\n                for(int j = 0; j < 33; j++){\n                    int bitDifference = bitCount[mid + 1][j] - bitCount[start][j];\n                    if(bitDifference == mid - start + 1){\n                        subarrayXOR |= (1 << j);\n                    }\n                }\n                \n                if(subarrayXOR < target){\n                    right = mid - 1;\n                } else {\n                    rightIndex = mid;\n                    left = mid + 1;\n                }\n            }\n            // Add the count of valid subarrays to the result\n            result += (rightIndex - leftIndex + 1);\n        }\n        \n        v();\n                b();\n        v();\n                b();\n        return result;\n    }\n};",
    "submit_ts": "1720281162",
    "subm_id": "1311815291"
}