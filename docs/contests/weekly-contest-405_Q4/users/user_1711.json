{
    "username": "lyronly",
    "submission": "struct node\n{\n    node* arr[26];\n    int w = 0;\n    node()\n    {\n        for (int i = 0; i < 26; i++) arr[i] = nullptr;\n    }\n\n    node* insert(char c)\n    {\n        int x = c - 'a';\n        if (arr[x] == nullptr) arr[x] = new node();\n        return arr[x];\n    }\n    node* find(char c)\n    {\n        int x = c - 'a';\n        return arr[x];\n    }\n};\n\nclass Solution {\npublic:\n    int n;\n    vector<int> dp;\n    node* root;\n    void insert(string& w, int v)\n    {\n        node* cur = root;\n        for (auto c : w)\n        {\n            cur = cur->insert(c);\n        }\n        if (cur->w == 0) \n        {\n            cur->w = v;\n        } else if (cur->w > v) {\n            cur->w = v;\n        }\n        return;\n    }\n    string t;\n    int dfs(int i)\n    {\n        if (dp[i] != INT_MIN) return dp[i]; \n        int pre = i;\n        node* cur = root;\n        int cnt = 0;\n        int ans = INT_MAX;\n\n        while (i < n && cur != nullptr)\n        {\n            cur = cur->find(t[i]);\n            if (cur == nullptr) {\n                break;\n            }\n            if (cur->w > 0) \n            {\n                int a = dfs(i + 1);\n                if (a != INT_MAX)\n                {\n                    ans = min(ans, cur->w + a);\n                }\n            }\n            i++;\n        }\n        dp[pre] = ans;\n        // cout << pre << \",\" << ans << endl;\n        return ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        n = target.size();\n        t = target;\n        dp = vector<int>(n + 1, INT_MIN);\n        dp[n] = 0;\n        root = new node();\n\n        for (int i = 0; i < words.size(); i++)\n        {   \n            insert(words[i], costs[i]);\n        }\n\n        int ans = dfs(0);\n        if (ans == INT_MAX) return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720323955",
    "subm_id": "1312388123"
}