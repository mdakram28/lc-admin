{
    "username": "luo-yu-1x",
    "submission": "\nclass Solution\n{\npublic:\n    const static int maxn = 1e5 + 10;\n    const static int maxm = 1e5 + 10;\n    const static long long mod = 1e9 + 7;\n    const long long INF_LL = 0x3f3f3f3f3f3f3f3f;\n    const int INF = 0x3f3f3f3f;\n    int n, m;\n    int cnt;\n    int minFlips(vector<vector<int>> &grid)\n    {\n        n = grid.size();\n        m = grid[0].size();\n        cnt = 0;\n        int ans = 0;\n        for (int i = 0; i < n; ++i)\n        {\n            for (int j = 0; j < m; ++j)\n            {\n                if (grid[i][j] == 1)\n                {\n                    cnt++;\n                }\n            }\n        }\n        for (int i1 = 0, i2 = n - 1; i1 < i2; ++i1, --i2)\n        {\n            for (int j1 = 0, j2 = m - 1; j1 < j2; ++j1, --j2)\n            {\n                int cnt = grid[i1][j1] + grid[i1][j2] + grid[i2][j1] + grid[i2][j2];\n                ans += min(cnt, 4 - cnt);\n            }\n        }\n        if (n % 2 == 0 && m % 2 == 0)\n        {\n            return ans;\n        }\n        if (n % 2 == 1 && m % 2 == 0)\n        {\n            int row = 0;\n            int cntrow = 0;\n            for (int j = 0; j < (m + 1) / 2; ++j)\n            {\n                if (grid[n / 2][j] != grid[n / 2][m - j - 1])\n                {\n                    row++;\n                }\n            }\n            for (int j = 0; j < m; ++j)\n            {\n                if (grid[n / 2][j] == 1)\n                {\n                    cntrow++;\n                }\n            }\n            if ((cntrow + row) / 4 != (cntrow - row) / 4)\n            {\n                return ans + row;\n            }\n            else\n            {\n                return ans + row + min(min((cntrow + row) % 4, 4 - (cntrow + row) % 4), min((cntrow - row) % 4, 4 - (cntrow - row) % 4));\n            }\n        }\n        if (n % 2 == 0 && m % 2 != 0)\n        {\n            int col = 0;\n            int cntcol = 0;\n            for (int i = 0; i < (n + 1) / 2; ++i)\n            {\n                if (grid[i][m / 2] != grid[n - i - 1][m / 2])\n                {\n                    col++;\n                }\n            }\n            for (int i = 0; i < n; ++i)\n            {\n                if (grid[i][m / 2] == 1)\n                {\n                    cntcol++;\n                }\n            }\n            if ((cntcol + col) / 4 != (cntcol - col) / 4)\n            {\n                return ans + col;\n            }\n            else\n            {\n                return ans + col + min(min((cntcol + col) % 4, 4 - (cntcol + col) % 4), min((cntcol - col) % 4, 4 - (cntcol - col) % 4));\n            }\n        }\n        if (n % 2 != 0 && m % 2 != 0)\n        {\n            ans += grid[n / 2][m / 2];\n            grid[n / 2][m / 2] = 0;\n            int cnt1 = 0;\n            int anscnt = 0;\n            for (int i = 0; i < (n + 1) / 2; ++i)\n            {\n                if (grid[i][m / 2] != grid[n - 1 - i][m / 2])\n                {\n                    anscnt++;\n                }\n            }\n            for (int j = 0; j < (m + 1) / 2; ++j)\n            {\n                if (grid[n / 2][j] != grid[n / 2][m - 1 - j])\n                {\n                    anscnt++;\n                }\n            }\n            for (int i = 0; i < n; ++i)\n            {\n                cnt1 += grid[i][m / 2];\n            }\n            for (int j = 0; j < m; ++j)\n            {\n                cnt1 += grid[n / 2][j];\n            }\n\n            if ((cnt1 + anscnt) / 4 != (cnt1 - anscnt) / 4)\n            {\n                return ans + anscnt;\n            }\n            else\n            {\n                return ans + anscnt + min(min((cnt1 + anscnt) % 4, 4 - (cnt1 + anscnt) % 4), min((cnt1 - anscnt) % 4, 4 - (cnt1 - anscnt) % 4));\n            }\n        }\n\n        return 0;\n    }\n};",
    "submit_ts": "1722698919",
    "subm_id": "552273168"
}