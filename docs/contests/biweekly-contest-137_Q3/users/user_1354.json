{
    "username": "Shadan Hussain",
    "submission": "class Solution {\npublic:\n    long long f(vector<vector<int>>& board,int n,int m,int r,int c1,int c2,vector<vector<vector<long long int>>>&dp){\n        // if(rooks==0)\n        // return 0;\n        if(r==n)\n        return -1e16;\n        if(dp[r][c1][c2]!=-1)\n        return dp[r][c1][c2];\n        long long take=-1e16;\n        long long notTake=-1e16;\n        notTake=f(board,n,m,r+1,c1,c2,dp);\n        for(int col=0;col<m;col++){\n            if(col!=(c1-1) && col!=(c2-1)){\n                if(c1==0)\n                take=max(take,board[r][col]+f(board,n,m,r+1,col+1,c2,dp));\n                else if(c2==0){\n                     take=max(take,board[r][col]+f(board,n,m,r+1,c1,col+1,dp));\n                }else{\n                     take=max(take,board[r][col]*1ll);\n                }\n            }\n        }\n        // cout<<take<<\" \"<<r<<\" \" <<c1<<\" \"<<c2<<\" \"<<endl;\n        return dp[r][c1][c2]= max(take,notTake);\n    }\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n=board.size();\n        int m=board[0].size();\n        // int rooks=3;\n        vector<vector<vector<long long int>>>dp(n,vector<vector<long long int>>(m+1,vector<long long int>(m+1,-1)));\n        // vector<vector<vector<long long int>>>dp(n,vector<vector<vector<long long int>>(m+1,vector<vector<long long int>(m+1,-1)));\n        // vector<vector<vector<vector<int>>>>dp(n,vector<vector<vector<int>>>(m+1,vector<vector<int>>(m+1),vector<int>(3,-1)));\n        return f(board,n,m,0,0,0,dp);\n    }\n};",
    "submit_ts": "1723910392",
    "subm_id": "1359229069"
}