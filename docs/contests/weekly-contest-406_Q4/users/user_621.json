{
    "username": "vigneshwar44",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // int minCostToCutCake(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Priority queue to store the cuts and their costs\n        priority_queue<pair<long long, char>> pq;\n        \n        // Push all horizontal cuts with 'H' indicating horizontal\n        for (long long cost : horizontalCut) {\n            pq.push({cost, 'H'});\n        }\n        \n        // Push all vertical cuts with 'V' indicating vertical\n        for (int cost : verticalCut) {\n            pq.push({cost, 'V'});\n        }\n        \n        long long totalCost = 0;\n        long long horizontalPieces = 1; // We start with 1 piece horizontally\n        long long verticalPieces = 1;   // We start with 1 piece vertically\n        \n        // Process all cuts\n        while (!pq.empty()) {\n            auto [cost, type] = pq.top();\n            pq.pop();\n            \n            if (type == 'H') {\n                // Horizontal cut\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                // Vertical cut\n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    \n    }\n};",
    "submit_ts": "1720925403",
    "subm_id": "1320253579"
}