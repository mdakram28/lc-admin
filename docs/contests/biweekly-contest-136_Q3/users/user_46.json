{
    "username": "hxu10",
    "submission": "class Solution(object):\n    def minFlips(self, grid):\n        \"\"\"\n        :type grid: List[List[int]]\n        :rtype: int\n        \"\"\"\n        m = len(grid)\n        n = len(grid[0])\n\n        pairs = []\n        \n        visited = [False] * (m*n)\n        \n        \n        candidate = []\n        \n        \n        \n        for i in range(m):\n            for j in range(n):\n                index = i * n + j\n                \n                count = 0\n                tot = 0\n                \n                    \n                for (p,q) in [(i,j),(m-i-1,j),(i,n-j-1),(m-i-1,n-j-1)]:\n                    index = p * n + q\n                    if visited[index]:  continue \n                    visited[index] = True\n                    \n                    count += grid[p][q]\n                    tot += 1\n                    \n                if tot==0:  continue \n                \n                candidate.append((count,tot))\n                \n                \n        inf = 10**9\n        \n        dp = [0,inf,inf,inf]\n        \n        for (c,t) in candidate:\n            newdp = [0]*4\n            \n            for d in range(4):\n                newdp[d] = dp[d] + c\n                newdp[d] = min(newdp[d],  dp[(d-t)%4] + (t-c)  )\n                \n                \n            dp = newdp\n            \n            #print(c,t,dp)\n            \n        \n        \n                \n                \n        \n        #print(candidate)\n        \n        \n        \n                \n        return dp[0]\n    \n                    \n                    \n                    \n                ",
    "submit_ts": "1722696367",
    "subm_id": "1343104360"
}