{
    "username": "sttony",
    "submission": "class Solution {\npublic:\n    struct Node{\n        int nexts[26];\n        int cost;\n    };\n\n    void insert(string& word,  vector<Node>& pool, int cost){\n        int p = 0;\n        for(char c: word){\n            if( pool[p].nexts[ c-'a'] == 0){\n                pool.emplace_back(Node());\n                pool[p].nexts[ c-'a'] = pool.size()-1;\n            }\n            p = pool[p].nexts[ c-'a'];\n        }\n        if(pool[p].cost == 0 ){\n            pool[p].cost = cost;\n        }\n        else{\n            pool[p].cost =  min( pool[p].cost, cost);\n        }\n    }\n\n    \n\n    int dfs(string& target,  int startIdx,  vector<Node>& pool, vector<int>& dp) {\n        \n        if( startIdx == target.size()){\n            return 0;\n        }\n        if(  dp[startIdx] != -1){\n            return dp[startIdx];\n        }\n        int p = 0;\n        int result = INT_MAX;\n        for(int i =  startIdx; i < target.size(); ++i){\n            int c = target[i];\n            if( pool[p].nexts[c-'a'] == 0){\n                break;\n            }\n            p = pool[p].nexts[c-'a'];\n            if(  pool[p].cost != 0 ) {\n                int tempCost = dfs(target,  i+1, pool, dp);\n                if( tempCost == INT_MAX){\n                    continue;\n                }\n                int cost =  pool[p].cost +  tempCost;\n                result=  min(result, cost);\n            }\n\n        }\n        dp[startIdx] = result;\n        return result;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        vector<Node> pool;\n        pool.emplace_back(Node());\n\n        for(int i = 0; i< words.size(); ++i){\n            insert(words[i], pool, costs[i]);\n        }\n        vector<int> dp( target.size(), -1);\n        int x = dfs(target, 0, pool, dp);\n        if (x == INT_MAX){\n            return -1; \n        }\n        return x;\n\n    }\n};",
    "submit_ts": "1720323814",
    "subm_id": "1312384687"
}