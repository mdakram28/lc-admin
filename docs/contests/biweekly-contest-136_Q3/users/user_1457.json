{
    "username": "vidy7014",
    "submission": "\nclass Solution {\nprivate:\n    int countOnes(const vector<int>& elements) {\n        return count(elements.begin(), elements.end(), 1);\n    }\n\n    vector<int> getSubGridElements(vector<vector<int>>& matrix, int i, int j, int numRows, int numCols) {\n        return {\n            matrix[i][j],\n            matrix[numRows - i - 1][j],\n            matrix[i][numCols - j - 1],\n            matrix[numRows - i - 1][numCols - j - 1]\n        };\n    }\n\n    \n    void handleMiddleRow(vector<vector<int>>& matrix, int numRows, int numCols, int& totalFlips, int& possibleMiddleFlips, int& middleOneCount) {\n        for (int j = 0; j < numCols / 2; ++j) {\n            if (matrix[numRows / 2][j] != matrix[numRows / 2][numCols - j - 1]) {\n                ++totalFlips;\n                ++possibleMiddleFlips;\n            } else {\n                if (matrix[numRows / 2][j] == 1) {\n                    ++middleOneCount;\n                }\n            }\n        }\n    }\n\n    void handleMiddleColumn(vector<vector<int>>& matrix, int numRows, int numCols, int& totalFlips, int& possibleMiddleFlips, int& middleOneCount) {\n        for (int i = 0; i < numRows / 2; ++i) {\n            if (matrix[i][numCols / 2] != matrix[numRows - i - 1][numCols / 2]) {\n                ++totalFlips;\n                ++possibleMiddleFlips;\n            } else {\n                if (matrix[i][numCols / 2] == 1) {\n                    ++middleOneCount;\n                }\n            }\n        }\n    }\npublic:\n    int minFlips(vector<vector<int>>& matrix) {\n        int numRows = matrix.size();\n        int numCols = matrix[0].size();\n        \n        int totalFlips = 0;\n        \n        // Loop through the 2x2 sub-matrices\n        for (int i = 0; i < numRows / 2; ++i) {\n            for (int j = 0; j < numCols / 2; ++j) {\n                vector<int> subGridElements = getSubGridElements(matrix, i, j, numRows, numCols);\n                int oneCount = countOnes(subGridElements);\n                totalFlips += min(oneCount, 4 - oneCount);\n            }\n        }\n        \n        int possibleMiddleFlips = 0;\n        int middleOneCount = 0;\n        \n        // Handle the middle row if numRows is odd\n        if (numRows % 2 != 0) {\n            handleMiddleRow(matrix, numRows, numCols, totalFlips, possibleMiddleFlips, middleOneCount);\n        }\n        \n        // Handle the middle column if numCols is odd\n        if (numCols % 2 != 0) {\n            handleMiddleColumn(matrix, numRows, numCols, totalFlips, possibleMiddleFlips, middleOneCount);\n        }\n        \n        // Handle the central element if both numRows and numCols are odd\n        if (numRows % 2 != 0 && numCols % 2 != 0 && matrix[numRows / 2][numCols / 2] == 1) {\n            ++totalFlips;\n        }\n        \n        if (possibleMiddleFlips == 0 && middleOneCount % 2 != 0) {\n            totalFlips += 2;\n        }\n        \n        return totalFlips;\n    }\n\n\n};\n",
    "submit_ts": "1722699630",
    "subm_id": "1343217498"
}