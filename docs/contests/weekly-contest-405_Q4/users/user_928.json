{
    "username": "zk299",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.leaf = False\n        self.children = {}\n        self.cost = float('inf')\n\ndef add_word(root, word, idx, costs):\n    for i in range(len(word)):\n        if word[i] not in root.children:\n            root.children[word[i]] = TrieNode()\n        root = root.children[word[i]]\n        if i == len(word) - 1:\n            root.leaf = True\n            root.cost = min(root.cost, costs[idx])\n\ndef build_trie(words, costs):\n    root = TrieNode()\n    for idx, w in enumerate(words):\n        add_word(root, w, idx, costs)\n    return root\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        root = build_trie(words, costs)\n        n = len(target)\n        \n        @cache\n        def dfs(index, cur):\n            if index == n:\n                return 0\n            \n            res = float('inf')\n            root = cur\n            for i in range(index, n):\n                s = target[i]\n                # print(index, i, s, cur, cur.children)\n                if s not in cur.children:\n                    break\n                \n                cur = cur.children[s]\n                if cur.leaf:\n                    # print('test', index, i, cur.cost)\n                    res = min(res, cur.cost + dfs(i+1, root))\n                \n                # cur = cur.children[s]\n                \n            return res\n        \n        \n        res = dfs(0, root)\n        if res == float('inf'):\n            return -1\n        \n        return res\n        \n        \n                    \n        \n            \n            \n            \n        \n        \n        \n        ",
    "submit_ts": "1720323103",
    "subm_id": "1312367381"
}