{
    "username": "lowie_",
    "submission": "class Solution {\npublic:\n    int mod = 1000000007;\n    map <int, int> req;\n    vector <vector <int> > dpres;\n    int n;\n    \n    int dp(int i, int c) {\n        if (i < 0 || c < 0 || i >= n || c > 400) {\n            return 0;\n        }\n        if (dpres[i][c] != -1) {\n            return dpres[i][c];\n        }\n        if (req.count(i) == 1 && req[i] != c) {\n            return dpres[i][c] = 0;\n        }\n        if (i == 0) {\n            if (c == 0) return 1;\n            return dpres[i][c] = 0;\n        }\n        // for the positions of the next elmt comp to previous array\n        int res = 0;\n        for (int j = 0; j <= i; j++) {\n            res = (res + dp(i - 1, c - j)) % mod;\n        }\n        return dpres[i][c] = res;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        dpres.assign(n, vector<int>(401, -1));\n        this->n = n;\n        for (auto r: requirements) {\n            req[r[0]] = r[1];\n        }\n        int res = 0;\n        for (int i = 0; i <= 400; i++) {\n            res = (res + dp(n - 1, i)) % mod;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1719068984",
    "subm_id": "1296783127"
}