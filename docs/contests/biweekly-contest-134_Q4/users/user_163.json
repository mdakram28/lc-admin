{
    "username": "CursedAiM",
    "submission": "\nclass Sparse {\n    vector<vector<int>> table;\n    int n;\n    int K;\n\n    int combine(int l, int r) { return l & r; }\n\n   public:\n    Sparse(const vector<int> &v) {\n        n = (int)v.size();\n        K = log2(n) + 1;\n        table.assign(n, vector<int>(K, 0));\n\n        for (int i = 0; i < n; ++i) table[i][0] = v[i];\n\n        for (int j = 1; j < K; ++j) {\n            for (int i = 0; i + (1 << j) <= n; ++i) {\n                table[i][j] = combine(table[i][j - 1], table[i + (1 << (j - 1))][j - 1]);\n            }\n        }\n    }\n\n    int query(int l, int r) {\n        const int width = r - l + 1;\n        long long k = log2(width);\n        int res = combine(table[r - (1 << k) + 1][k], table[l][k]);\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& a, int k) {\n        Sparse st(a);\n        long long res = 0;\n        const int n = a.size();\n        for (int i = 0; i < n; i++) {\n            int l = i, r = n - 1, mid, j1 = -1, j2 = -1;\n            while (l <= r) {\n                mid = (l + r) / 2;\n                if (st.query(i, mid) > k) l = mid + 1;\n                else j1 = mid, r = mid - 1;\n            }\n            if (j1 == -1 or st.query(i, j1) != k) continue;\n            l = i, r = n - 1;\n            while (l <= r) {\n                mid = (l + r) / 2;\n                if (st.query(i, mid) >= k) l = mid + 1, j2 = mid;\n                else r = mid - 1;\n            }\n            res += 1ll * (j2 - j1 + 1);\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720277595",
    "subm_id": "1311671052"
}