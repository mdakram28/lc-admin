{
    "username": "jmo460",
    "submission": "class Solution:\n    def minimumCost(self, m: int, n: int, horizontalCut: List[int], verticalCut: List[int]) -> int:\n        heap = []\n        heapq.heapify(heap)\n\n        # max heap\n        for cut in horizontalCut:\n            heapq.heappush(heap, (-cut, 'horizontal'))\n\n        for cut in verticalCut:\n            heapq.heappush(heap, (-cut, 'vertical'))\n\n        numHorizontal = 1\n        numVertical = 1\n\n        totalCost = 0\n\n        while (heap):\n            # keep making the most expensive cuts first\n            cutCost, direction = heapq.heappop(heap)\n            cutCost *= -1\n\n            if direction == 'horizontal':\n                totalCost += numVertical * cutCost\n                numHorizontal += 1\n            else:\n                totalCost += numHorizontal * cutCost\n                numVertical += 1\n\n        return totalCost        ",
    "submit_ts": "1720925467",
    "subm_id": "1320255690"
}