{
    "username": "Z3ROsum",
    "submission": "class Solution {\n    data class Data(val currStair: Int, val jump: Int, val prevJump: Boolean)\n    var k = 0\n    var dp = HashMap<Data, Int>()\n    fun waysToReachStair(k: Int): Int {\n        this.k = k\n        return recursion(1, 0, false)\n    }\n    \n    fun recursion(currStair: Int, jump: Int, prevJump: Boolean): Int {\n        var slkdjflsdf = 0\n        if (currStair == k) slkdjflsdf++\n        if (currStair > k + 1) return 0\n        var data = Data(currStair, jump, prevJump)\n        if (dp.containsKey(data)) return dp[data]!!\n        \n        if (!prevJump) {\n            slkdjflsdf += recursion(currStair - 1, jump, true)\n        }\n        slkdjflsdf += recursion(currStair + (1 shl jump), jump + 1, false)\n        dp[data] = slkdjflsdf\n        return slkdjflsdf\n    }\n}",
    "submit_ts": "1716089602",
    "subm_id": "1261846599"
}