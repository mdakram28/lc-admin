{
    "username": "wyacac",
    "submission": "class Solution {\n    private static final int MAX_LEN = (int)1e5 + 5;\n    public int minChanges(int[] nums, int k) {\n        // \u5dee\u5206\u6570\u7ec4\n        long[] diff = new long[MAX_LEN];\n        int n = nums.length;\n        for (int i = 0; i < n / 2; i++) {\n            int min = Math.min(nums[i], nums[n - i - 1]);\n            int max = Math.max(nums[i], nums[n - i - 1]);\n            int abs = max - min;\n            int lowerAbs;\n            int upperAbs;\n            // \u6267\u884c\u4e00\u6b21\u64cd\u4f5c\uff0c\u5c06\u5176\u4e2d\u7684\u4e00\u4e2a\u503c\u53d8\u4e3a 0 ~ k \u4e4b\u95f4\n            // \u6c42\u6b64\u65f6\u4e24\u4e2a\u6570abs\u4e4b\u5dee\u7684\u8303\u56f4\n            if (k <= min) {\n                // \u79fb\u52a8\u6700\u5c0f\u503c\n                upperAbs = max;\n                // \u79fb\u52a8\u6700\u5927\u503c\n                lowerAbs = min - k;\n            } else if (k >= max) {\n                upperAbs = Math.max(max, k - min);\n                lowerAbs = 0;\n            } else {\n                upperAbs = max;\n                lowerAbs = 0;\n            }\n            // \u6267\u884c\u4e24\u6b21\u7684\u8bdd, \u63d2\u503c\u5728[0, k]\u8303\u56f4\n            // \u68c0\u6d4b[0, k] \u548c [lowerAbs, upperAbs] \u662f\u5426\u6709\u4ea4\u96c6\n            if (lowerAbs >= k) {\n                // \u5c06[lowerAbs, upperAbs]\u533a\u95f4\u503c\u52a01\n                if (abs >= lowerAbs && abs <= upperAbs) {\n                    diff[lowerAbs]++;\n                    diff[upperAbs + 1]--;\n                    diff[abs]--;\n                    diff[abs + 1]++;\n                } else {\n                    diff[lowerAbs]++;\n                    diff[upperAbs + 1]--;\n                }\n            } else {\n                diff[0] += 2;\n                diff[lowerAbs] -= 2;\n                diff[lowerAbs]++;\n                diff[upperAbs + 1]--;\n                if (k > upperAbs) {\n                    diff[upperAbs + 1] += 2;\n                    diff[k + 1] -= 2;\n                }\n                if (abs >= lowerAbs && abs <= upperAbs) {\n                    diff[abs]--;\n                    diff[abs + 1]++;\n                } else if (abs >= 0 && abs <= k) {\n                    diff[abs] -= 2;\n                    diff[abs + 1] += 2;\n                }\n            }\n            // Math.max(k, upperAbs) + 1 ~ MAX \u7f6e\u4e3aInteger.MAX_VALUE;\n            diff[Math.max(k, upperAbs) + 1] += MAX_LEN;\n            diff[MAX_LEN - 1] -= MAX_LEN;\n        }\n        long ans = Integer.MAX_VALUE;\n        long val = MAX_LEN;\n        for (int i = 0; i < MAX_LEN - 1; i++) {\n            if (i == 0) {\n                val = diff[i];\n            } else {\n                val = diff[i] + val;\n            }\n            ans = Math.min(ans, val);\n        }\n        return (int)ans;\n    }\n}",
    "submit_ts": "1721490457",
    "subm_id": "548322980"
}