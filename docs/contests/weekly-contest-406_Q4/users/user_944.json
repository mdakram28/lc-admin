{
    "username": "saurav_1928",
    "submission": "class Solution {\npublic:\n   \n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h = 0, v = 0;\n        long long totalCost = 0;\n        long long hpc = 1, vpc = 1;\n        \n        while (h < horizontalCut.size() || v < verticalCut.size()) {\n            if ((h < horizontalCut.size() && horizontalCut[h] >= (v < verticalCut.size() ? verticalCut[v] : 0)) || v >= verticalCut.size()) {\n                totalCost += (long long) horizontalCut[h] * vpc;\n                hpc++;\n                h++;\n            } else {\n                totalCost += (long long) verticalCut[v] * hpc;\n                vpc++;\n                v++;\n            }\n        }\n        \n        return totalCost ;\n    }\n};",
    "submit_ts": "1720925651",
    "subm_id": "1320261771"
}