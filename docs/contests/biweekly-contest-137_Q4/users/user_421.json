{
    "username": "ywwbill",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        upper_left = [[0] * n for _ in range(m)]\n        upper_left[0][0] = board[0][0]\n        for i in range(1, m):\n            upper_left[i][0] = upper_left[i - 1][0]\n            if board[i][0] > upper_left[i][0]:\n                upper_left[i][0] = board[i][0]\n        for j in range(1, n):\n            upper_left[0][j] = upper_left[0][j - 1]\n            if board[0][j] > upper_left[0][j]:\n                upper_left[0][j] = board[0][j]\n        for i in range(1, m):\n            for j in range(1, n):\n                upper_left[i][j] = upper_left[i - 1][j]\n                if upper_left[i][j - 1] > upper_left[i][j]:\n                    upper_left[i][j] = upper_left[i][j - 1]\n                if board[i][j] > upper_left[i][j]:\n                    upper_left[i][j] = board[i][j]\n        upper_right = [[0] * n for _ in range(m)]\n        upper_right[0][n - 1] = board[0][n - 1]\n        for i in range(1, m):\n            upper_right[i][n - 1] = upper_right[i - 1][n - 1]\n            if board[i][n - 1] > upper_right[i][n - 1]:\n                upper_right[i][n - 1] = board[i][n - 1]\n        for j in range(n - 2, -1, -1):\n            upper_right[0][j] = upper_right[0][j + 1]\n            if board[0][j] > upper_right[0][j]:\n                upper_right[0][j] = board[0][j]\n        for i in range(1, m):\n            for j in range(n - 2, -1, -1):\n                upper_right[i][j] = upper_right[i - 1][j]\n                if upper_right[i][j + 1] > upper_right[i][j]:\n                    upper_right[i][j] = upper_right[i][j + 1]\n                if board[i][j] > upper_right[i][j]:\n                    upper_right[i][j] = board[i][j]\n        bottom_left = [[0] * n for _ in range(m)]\n        bottom_left[m - 1][0] = board[m - 1][0]\n        for i in range(m - 2, -1, -1):\n            bottom_left[i][0] = bottom_left[i + 1][0]\n            if board[i][0] > bottom_left[i][0]:\n                bottom_left[i][0] = board[i][0]\n        for j in range(1, n):\n            bottom_left[m - 1][j] = bottom_left[m - 1][j - 1]\n            if board[m - 1][j] > bottom_left[m - 1][j]:\n                bottom_left[m - 1][j] = board[m - 1][j]\n        for i in range(m - 2, -1, -1):\n            for j in range(1, n):\n                bottom_left[i][j] = bottom_left[i + 1][j]\n                if bottom_left[i][j - 1] > bottom_left[i][j]:\n                    bottom_left[i][j] = bottom_left[i][j - 1]\n                if board[i][j] > bottom_left[i][j]:\n                    bottom_left[i][j] = board[i][j]\n        bottom_right = [[0] * n for _ in range(m)]\n        bottom_right[m - 1][n - 1] = board[m - 1][n - 1]\n        for i in range(m - 2, -1, -1):\n            bottom_right[i][n - 1] = bottom_right[i + 1][n - 1]\n            if board[i][n - 1] > bottom_right[i][n - 1]:\n                bottom_right[i][n - 1] = board[i][n - 1]\n        for j in range(n - 2, -1, -1):\n            bottom_right[m - 1][j] = bottom_right[m - 1][j + 1]\n            if board[m - 1][j] > bottom_right[m - 1][j]:\n                bottom_right[m - 1][j] = board[m - 1][j]\n        for i in range(m - 2, -1, -1):\n            for j in range(n - 2, -1, -1):\n                bottom_right[i][j] = bottom_right[i + 1][j]\n                if bottom_right[i][j + 1] > bottom_right[i][j]:\n                    bottom_right[i][j] = bottom_right[i][j + 1]\n                if board[i][j] > bottom_right[i][j]:\n                    bottom_right[i][j] = board[i][j]\n        up2down = [[0] * n for _ in range(m)]\n        for j in range(n):\n            up2down[0][j] = board[0][j]\n        for i in range(1, m):\n            for j in range(n):\n                up2down[i][j] = up2down[i - 1][j]\n                if board[i][j] > up2down[i][j]:\n                    up2down[i][j] = board[i][j]\n        down2up = [[0] * n for _ in range(m)]\n        for j in range(n):\n            down2up[m - 1][j] = board[m - 1][j]\n        for i in range(m - 2, -1, -1):\n            for j in range(n):\n                down2up[i][j] = down2up[i + 1][j]\n                if board[i][j] > down2up[i][j]:\n                    down2up[i][j] = board[i][j]\n        max_val = -10000000000\n        for i in range(1, m - 1):\n            left_max = [-10000000000] * n\n            for j in range(2, n):\n                left_max[j] = left_max[j - 1]\n                val1 = up2down[i - 1][j - 1] + bottom_left[i + 1][j - 2]\n                val2 = down2up[i + 1][j - 1] + upper_left[i - 1][j - 2]\n                if val1 > left_max[j]:\n                    left_max[j] = val1\n                if val2 > left_max[j]:\n                    left_max[j] = val2\n            right_max = [-10000000000] * n\n            for j in range(n - 3, -1, -1):\n                right_max[j] = right_max[j + 1]\n                val1 = up2down[i - 1][j + 1] + bottom_right[i + 1][j + 2]\n                val2 = down2up[i + 1][j + 1] + upper_right[i - 1][j + 2]\n                if val1 > right_max[j]:\n                    right_max[j] = val1\n                if val2 > right_max[j]:\n                    right_max[j] = val2\n            for j in range(n):\n                val = -10000000000\n                if j - 1 >= 0 and j + 1 < n:\n                    val1 = upper_left[i - 1][j - 1] + bottom_right[i + 1][j + 1]\n                    val2 = upper_right[i - 1][j + 1] + bottom_left[i + 1][j - 1]\n                    if val1 > val2:\n                        val = val1\n                    else:\n                        val = val2\n                if left_max[j] > val:\n                    val = left_max[j]\n                if right_max[j] > val:\n                    val = right_max[j]\n                # for k in range(j + 1, n - 1):\n                #     val1 = up2down[i - 1][k] + bottom_right[i + 1][k + 1]\n                #     val2 = down2up[i + 1][k] + upper_right[i - 1][k + 1]\n                #     if val1 > val:\n                #         val = val1\n                #     if val2 > val:\n                #         val = val2\n                # for k in range(j - 1, 0, -1):\n                #     val1 = up2down[i - 1][k] + bottom_left[i + 1][k - 1]\n                #     val2 = down2up[i + 1][k] + upper_left[i - 1][k - 1]\n                #     if val1 > val:\n                #         val = val1\n                #     if val2 > val:\n                #         val = val2\n                if val + board[i][j] > max_val:\n                    max_val = val + board[i][j]\n        return max_val",
    "submit_ts": "1723909351",
    "subm_id": "556335785"
}