{
    "username": "ashutosh_op",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int ans = 0;\n\n        // Adjust flips for the center cell if the grid dimensions are odd\n        if (n % 2 == 1 && m % 2 == 1) {\n            ans += adjustCenterCell(grid, n, m);\n        }\n\n        // Vector to count flips needed for middle rows and columns\n        vector<int> shift(3, 0);\n        if (n % 2 == 1) {\n            countMiddleRowFlips(grid, n, m, shift);\n        }\n        if (m % 2 == 1) {\n            countMiddleColumnFlips(grid, n, m, shift);\n        }\n\n        // Adjust flips based on counts of 1s and 2s in the middle row/column\n        ans += adjustMiddleFlips(shift);\n\n        // Calculate required flips for quadrants using bitwise operations\n        ans += calculateQuadrantFlips(grid, n, m);\n\n        return ans;\n    }\n\nprivate:\n    int adjustCenterCell(const vector<vector<int>>& grid, int n, int m) {\n        return grid[n / 2][m / 2] & 1; // Return 1 if center cell is 1, else 0\n    }\n\n    void countMiddleRowFlips(const vector<vector<int>>& grid, int n, int m, vector<int>& shift) {\n        int mid = n / 2;\n        int a = 0, b = m - 1;\n        do {\n            if (a >= b) break;\n            int sm = (grid[mid][a] & 1) + (grid[mid][b] & 1); // Sum using bitwise AND\n            shift[sm] += 1;\n            a++;\n            b--;\n        } while (true);\n    }\n\n    void countMiddleColumnFlips(const vector<vector<int>>& grid, int n, int m, vector<int>& shift) {\n        int mid = m / 2;\n        int a = 0, b = n - 1;\n        do {\n            if (a >= b) break;\n            int sm = (grid[a][mid] & 1) + (grid[b][mid] & 1); // Sum using bitwise AND\n            shift[sm] += 1;\n            a++;\n            b--;\n        } while (true);\n    }\n\n    int adjustMiddleFlips(const vector<int>& shift) {\n        int flips = 0;\n        if (shift[2] & 1) { // Check if shift[2] is odd using bitwise AND\n            flips += (shift[1] > 0) ? shift[1] : 2;\n        } else {\n            flips += shift[1];\n        }\n        return flips;\n    }\n\n    int calculateQuadrantFlips(const vector<vector<int>>& grid, int n, int m) {\n        int flips = 0;\n        int i = 0;\n        do {\n            if (i >= n / 2) break;\n            int j = 0;\n            do {\n                if (j >= m / 2) break;\n                flips += calculateCellFlips(grid, i, j, n, m);\n                j++;\n            } while (true);\n            i++;\n        } while (true);\n        return flips;\n    }\n\n    int calculateCellFlips(const vector<vector<int>>& grid, int i, int j, int n, int m) {\n        int a = grid[i][j] & 1;\n        int b = grid[n - 1 - i][j] & 1;\n        int c = grid[i][m - 1 - j] & 1;\n        int d = grid[n - 1 - i][m - 1 - j] & 1;\n\n        int sm = a + b + c + d;\n\n        return (sm != 0 && sm != 4) ? min(sm, 4 - sm) : 0;\n    }\n};\n",
    "submit_ts": "1722699406",
    "subm_id": "1343210666"
}