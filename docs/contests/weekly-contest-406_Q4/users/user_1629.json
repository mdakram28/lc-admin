{
    "username": "sad-joker",
    "submission": "import java.util.Arrays;\nimport java.util.Comparator;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        int[][] rv = new int[horizontalCut.length][2];\n        int[][] cv = new int[verticalCut.length][2];\n\n        for (int i = 0; i < horizontalCut.length; i++) {\n            rv[i][0] = horizontalCut[i];\n            rv[i][1] = i;\n        }\n        for (int j = 0; j < verticalCut.length; j++) {\n            cv[j][0] = verticalCut[j];\n            cv[j][1] = j;\n        }\n\n        Arrays.sort(rv, (a, b) -> Integer.compare(b[0], a[0]));\n        Arrays.sort(cv, (a, b) -> Integer.compare(b[0], a[0]));\n\n        long ans = 0;\n        int i = 0, j = 0;\n        int rn = 1, cn = 1;\n\n        while (i < rv.length && j < cv.length) {\n            if (rv[i][0] >= cv[j][0]) {\n                ans += (long) rv[i][0] * cn;\n                rn++;\n                i++;\n            } else {\n                ans += (long) cv[j][0] * rn;\n                cn++;\n                j++;\n            }\n        }\n\n        while (i < rv.length) {\n            ans += (long) rv[i][0] * cn;\n            i++;\n        }\n\n        while (j < cv.length) {\n            ans += (long) cv[j][0] * rn;\n            j++;\n        }\n\n        return ans;\n    }\n}",
    "submit_ts": "1720926324",
    "subm_id": "546445522"
}