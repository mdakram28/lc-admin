{
    "username": "hccyril",
    "submission": "#define ull unsigned long long\n\nclass union_find {\npublic:\n    union_find(int n) : n(n) {\n        parent = new int[n];\n        for (int i = 0; i < n; i++) {\n            parent[i] = i;\n        }\n    }\n    void pair(int index1, int index2) {\n        parent[find(index2)] = find(index1);\n    }\n    int find(int index) {\n        if (parent[index] != index) {\n            parent[index] = find(parent[index]);\n        }\n        return parent[index];\n    }\n    bool check(int index1, int index2) {\n        return find(index1) == find(index2);\n    }\nprivate:\n    int *parent, n;\n};\n\nbool touch(vector<int> &c1, vector<int> &c2) {\n    ull x1 = c1[0], y1 = c1[1], r1 = c1[2], x2 = c2[0], y2 = c2[1], r2 = c2[2],\n        xd = x1 < x2 ? x2 - x1 : x1 - x2,\n        yd = y1 < y2 ? y2 - y1 : y1 - y2;\n        return xd * xd + yd * yd <= (r1 + r2) * (r1 + r2);\n}\n\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        union_find uni(n + 4);\n        for (int i = 0; i < n; ++i) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (x <= r || Y - y <= r) uni.pair(n + 1, i);\n            if (X - x <= r || y <= r) uni.pair(n + 2, i);\n            for (int j = 0; j < i; ++j)\n                if (touch(circles[i], circles[j]))\n                    uni.pair(j, i);\n        }\n        return !uni.check(n + 1, n + 2);\n    }\n};",
    "submit_ts": "1722136364",
    "subm_id": "1335732109"
}