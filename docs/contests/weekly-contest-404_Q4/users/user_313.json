{
    "username": "gonglinyuan",
    "submission": "class Tree:\n    def __init__(self, edges):\n        self.n = len(edges) + 1\n        self.d = [[] for _ in range(self.n)]\n        for u, v in edges:\n            self.d[u].append(v)\n            self.d[v].append(u)\n        self.f = [None for _ in range(self.n)]\n        self.g = [None for _ in range(self.n)]\n        self.fb = [None for _ in range(self.n)]\n        self.h = [None for _ in range(self.n)]\n\n    def dfs(self, x, fa):\n        # print(x, fa) \n        for y in self.d[x]:\n            if y != fa:\n                self.dfs(y, x)\n                if self.fb[x] is None or self.f[y] + 1 > self.f[x]:\n                    self.g[x] = self.f[x]\n                    self.f[x] = self.f[y] + 1\n                    self.fb[x] = y\n                elif self.g[x] is None or self.f[y] + 1 > self.g[x]:\n                    self.g[x] = self.f[y] + 1\n        if self.f[x] is None:\n            self.f[x] = 0\n        if self.g[x] is None:\n            self.g[x] = 0\n    \n    def get_diameter(self):\n        ans = 0\n        for x in range(self.n):\n            ans = max(ans, self.f[x] + self.g[x])\n        return ans\n\n    def dfs2(self, x, fa):\n        if fa == -1:\n            self.h[x] = 0\n        elif self.fb[fa] == x:\n            self.h[x] = max(self.h[fa] + 1, self.g[fa] + 1)\n        else:\n            self.h[x] = max(self.h[fa] + 1, self.f[fa] + 1)\n        for y in self.d[x]:\n            if y != fa:\n                self.dfs2(y, x)\n\n    def get_res(self):\n        ans = None\n        for i in range(self.n):\n            if ans is None or max(self.f[i], self.h[i]) < ans:\n                ans = max(self.f[i], self.h[i])\n        return ans\n        \n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        tree1 = Tree(edges1)\n        tree2 = Tree(edges2)\n        tree1.dfs(0, -1)\n        tree2.dfs(0, -1)\n        tree1.dfs2(0, -1)\n        tree2.dfs2(0, -1)\n        # print(tree1.f)\n        # print(tree1.g)\n        # print(tree1.h)\n        # print(tree2.f)\n        # print(tree2.g)\n        # print(tree2.h)\n        return max(tree1.get_diameter(), tree2.get_diameter(), tree1.get_res() + tree2.get_res() + 1)\n        # return min(tree1.h) + min(tree2.h) + 1",
    "submit_ts": 1719716757.0
}