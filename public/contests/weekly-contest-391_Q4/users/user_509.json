{
    "username": "ashwinmishra",
    "submission": "using ll = long long;\n\nclass Solution {\n public:\n  int minimumDistance(std::vector<std::vector<int>>& points) {\n    ll const n = points.size();\n    std::vector<std::pair<ll, ll>> sum;\n    std::vector<std::pair<ll, ll>> diff;\n    for (ll i = 0; i < n; ++i) {\n      auto const& point = points[i];\n      sum.push_back({point[0] + point[1], i});\n      diff.push_back({point[0] - point[1], i});\n    }\n    std::sort(std::begin(sum), std::end(sum));\n    std::sort(std::begin(diff), std::end(diff));\n\n    ll min = 1e9 + 7;\n\n    if (sum[0].second == diff[0].second) {\n      min = std::min(min, std::max(sum[n - 1].first - sum[1].first,\n                                   diff[n - 1].first - diff[1].first));\n    } else if (sum[0].second == diff[n - 1].second) {\n      min = std::min(min, std::max(sum[n - 1].first - sum[1].first,\n                                   diff[n - 2].first - diff[0].first));\n    } else {\n      min = std::min(min, std::max(sum[n - 1].first - sum[1].first,\n                                   diff[n - 1].first - diff[0].first));\n    }\n\n    if (sum[n - 1].second == diff[0].second) {\n      min = std::min(min, std::max(sum[n - 2].first - sum[0].first,\n                                   diff[n - 1].first - diff[1].first));\n    } else if (sum[n - 1].second == diff[n - 1].second) {\n      min = std::min(min, std::max(sum[n - 2].first - sum[0].first,\n                                   diff[n - 2].first - diff[0].first));\n    } else {\n      min = std::min(min, std::max(sum[n - 2].first - sum[0].first,\n                                   diff[n - 1].first - diff[0].first));\n    }\n\n    if (diff[0].second == sum[0].second) {\n      min = std::min(min, std::max(diff[n - 1].first - diff[1].first,\n                                   sum[n - 1].first - sum[1].first));\n    } else if (diff[0].second == sum[n - 1].second) {\n      min = std::min(min, std::max(diff[n - 1].first - diff[1].first,\n                                   sum[n - 2].first - sum[0].first));\n    } else {\n      min = std::min(min, std::max(diff[n - 1].first - diff[1].first,\n                                   sum[n - 1].first - sum[0].first));\n    }\n\n    if (diff[n - 1].second == sum[0].second) {\n      min = std::min(min, std::max(diff[n - 2].first - diff[0].first,\n                                   sum[n - 1].first - sum[1].first));\n    } else if (diff[n - 1].second == sum[n - 1].second) {\n      min = std::min(min, std::max(diff[n - 2].first - diff[0].first,\n                                   sum[n - 2].first - sum[0].first));\n    } else {\n      min = std::min(min, std::max(diff[n - 2].first - diff[0].first,\n                                   sum[n - 1].first - sum[0].first));\n    }\n\n    return min;\n  }\n};\n"
}