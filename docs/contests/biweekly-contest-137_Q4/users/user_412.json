{
    "username": "sahasrad",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        PriorityQueue<int[]> loc = new PriorityQueue<>(Comparator.comparingInt((int[] arr) -> board[arr[0]][arr[1]]).reversed());\n        for(int i = 0; i < board.length; i++) {\n            for(int j = 0; j < board[i].length; j++) {\n                loc.offer(new int[]{i, j});\n            }\n        }\n        return possibility(loc, board, 0, new HashSet<>(), new HashSet<>());\n    }\n\n    public long possibility(PriorityQueue<int[]> loc, int[][] board, int curr, HashSet<Integer> x, HashSet<Integer> y) {\n        if(curr == 3) return 0;\n        long result = Long.MIN_VALUE;\n        for(int i = 0; i < 4; i++) {\n            int[] coords = loc.poll();\n            if(coords == null) break;\n            if(x.contains(coords[0]) || y.contains(coords[1])) {\n                i--;\n                continue;\n            }\n            HashSet<Integer> newX = new HashSet<>(x);\n            HashSet<Integer> newY = new HashSet<>(y);\n            newX.add(coords[0]);\n            newY.add(coords[1]);\n            long val = board[coords[0]][coords[1]];\n            PriorityQueue<int[]> newPq = new PriorityQueue<>(Comparator.comparingInt((int[] arr) -> board[arr[0]][arr[1]]).reversed());\n            newPq.addAll(loc);\n            long rest = possibility(newPq, board, curr + 1, newX, newY);\n            if(rest == Long.MIN_VALUE) continue;\n            long r = val + rest;\n            if(r > result) result = r;\n        }\n        return result;\n    }\n}\n\n",
    "submit_ts": "1723908998",
    "subm_id": "1359175545"
}