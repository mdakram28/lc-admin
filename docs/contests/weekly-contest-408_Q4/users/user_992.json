{
    "username": "Meganth",
    "submission": "var canReachCorner = function(gridWidth, gridHeight, obstacles) { \n    function bfs(graph, startNode, targetNode1, targetNode2, totalNodes) { \n        const nodeQueue = []; \n        const visitedNodes = Array(totalNodes + 4).fill(false); \n        nodeQueue.push(startNode); \n        visitedNodes[startNode] = true; \n \n        while (nodeQueue.length > 0) { \n            const currentNode = nodeQueue.shift(); \n            for (const neighbor of graph[currentNode]) { \n                if (!visitedNodes[neighbor]) { \n                    nodeQueue.push(neighbor); \n                    visitedNodes[neighbor] = true; \n                } \n            } \n        } \n \n        return visitedNodes[targetNode1] || visitedNodes[targetNode2]; \n    } \n \n    const obstacleCount = obstacles.length; \n    const graph = Array(obstacleCount + 4).fill(null).map(() => []); \n    const obstacleData = obstacles.map(obstacle => [obstacle[0], obstacle[1], obstacle[2]]); \n \n    for (let i = 0; i < obstacleCount; ++i) { \n        if (obstacleData[i][0] <= obstacleData[i][2]) { \n            graph[obstacleCount].push(i); \n            graph[i].push(obstacleCount); \n        } \n        if (gridWidth - obstacleData[i][0] <= obstacleData[i][2]) { \n            graph[obstacleCount + 2].push(i); \n            graph[i].push(obstacleCount + 2); \n        } \n        if (obstacleData[i][1] <= obstacleData[i][2]) { \n            graph[obstacleCount + 1].push(i); \n            graph[i].push(obstacleCount + 1); \n        } \n        if (gridHeight - obstacleData[i][1] <= obstacleData[i][2]) { \n            graph[obstacleCount + 3].push(i); \n            graph[i].push(obstacleCount + 3); \n        } \n        for (let j = i + 1; j < obstacleCount; ++j) { \n            const deltaX = obstacleData[i][0] - obstacleData[j][0]; \n            const deltaY = obstacleData[i][1] - obstacleData[j][1]; \n            const distanceBetween = Math.sqrt(deltaX * deltaX + deltaY * deltaY); \n            if (obstacleData[i][2] + obstacleData[j][2] >= distanceBetween) { \n                graph[i].push(j); \n                graph[j].push(i); \n            } \n        } \n    } \n \n    return !(bfs(graph, obstacleCount, obstacleCount + 1, obstacleCount + 2, obstacleCount + 4) || \n             bfs(graph, obstacleCount + 3, obstacleCount + 2, obstacleCount + 1, obstacleCount + 4)); \n};\n",
    "submit_ts": "1722138904",
    "subm_id": "1335802666"
}