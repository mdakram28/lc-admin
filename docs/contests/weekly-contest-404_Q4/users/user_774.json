{
    "username": "hkhzzz",
    "submission": "using pii = pair<int, int>;\nusing ll = long long;\nclass Solution {\n    int B = 0;\npublic:\n    int dfs(unordered_map<int, vector<int>>& edges, unordered_map<ll, int>& dist, int n, int cur, int par) {\n        // cout << \"search on \" << par << \"->\" << cur << endl;\n        ll hash = 1ll * par * B + cur;\n        if (dist.count(hash)) { // from part->cur->?\n            // cout << \" found \" << par << \"->\" << cur << endl;\n            return dist[hash];\n        }\n        int mx_sub_tree = 0;\n        for (auto& nx: edges[cur]) {\n            if (nx == par) continue; \n            mx_sub_tree = max(mx_sub_tree, dfs(edges, dist, n, nx, cur));\n        }\n        dist[hash] = mx_sub_tree + 1;\n        // cout << par << \"->\" << cur << \" max = \" << mx_sub_tree + 1 << endl;\n        return mx_sub_tree + 1;\n    }\n    pii search(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        // cout << n << endl;\n        unordered_map<int, vector<int>> Map;\n        for (auto& v: edges) {\n            Map[v[0]].push_back(v[1]);\n            Map[v[1]].push_back(v[0]);\n        }\n        unordered_map<ll, int> dist;\n        int mn = n;\n        int mx = 0;\n        for (int i = 0; i < n; i ++) {\n            // cout << i << endl;\n            int cur_cnt_root = dfs(Map, dist, n+1, i, n+1) - 1; // edges\n            vector<int> vec(2, 0);\n            for (auto& nx: Map[i]) {\n                // cout << i << \"->\" << nx << \": \";\n                vec.push_back(dist[1ll * i * B + nx]);\n                // cout << dist[i * B + nx] << endl;\n            }\n            sort(vec.begin(), vec.end(), greater<int>());\n            // cout << \"max subtree: \" << vec[0] << \"+\" << vec[1] << \"+1\" << endl;\n            mx = max(mx, vec[0] + vec[1]); // maxmimum given tree\n            mn = min(mn, cur_cnt_root);\n        }\n        // cout << endl;\n        return {mn, mx};\n        \n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        B = max(edges1.size(), edges2.size()) + 1e5;\n        pii a = search(edges1);\n        pii b = search(edges2);\n        // cout << a.first << \" \" << a.second << endl;\n        // cout << b.first << \" \" << b.second << endl;\n        // cout << endl;\n        int v1 = a.first + b.first + 1;\n        int v2 = max(a.second, b.second);\n        // return v1;\n        return max(v1, v2);\n        \n    }\n};\n// []\n// [[0,1],[1,2]] -> 2\n// [[0,1],[2,0],[3,2],[3,6],[8,7],[4,8],[5,4],[3,5],[3,9]]\n// [[0,1],[0,2],[0,3]] -> 7",
    "submit_ts": "1719719299",
    "subm_id": "1304438533"
}