{
    "username": "Lcz1",
    "submission": "class Solution(object):\n    def minimumDiameterAfterMerge(self, edges1, edges2):\n        \"\"\"\n        :type edges1: List[List[int]]\n        :type edges2: List[List[int]]\n        :rtype: int\n        \"\"\"\n        def f(edges):\n            n = len(edges) + 1\n            a = 0\n            adj = [[] for _ in range(n)]\n            for e in edges:\n                adj[e[0]].append(e[1])\n                adj[e[1]].append(e[0])\n            dist = [0 for _ in range(n)]\n            q = [0]\n            visited = [False for _ in range(n)]\n            while(len(q) != 0):\n                v = q.pop(-1)\n                visited[v] = True\n                for c in adj[v]:\n                    if(not visited[c]):\n                        dist[c] = dist[v] + 1\n                        q.append(c)\n            x = 0\n            for i in range(n):\n                if(dist[i] > dist[x]):\n                    x = i\n            dist = [0 for _ in range(n)]\n            q = [x]\n            visited = [False for _ in range(n)]\n            while(len(q) != 0):\n                v = q.pop(-1)\n                visited[v] = True\n                for c in adj[v]:\n                    if(not visited[c]):\n                        dist[c] = dist[v] + 1\n                        q.append(c)\n            a = max(dist)\n            print(adj,a)\n            if(a%2 == 0):\n                return([a,a//2])\n            else:\n                return([a,a//2 + 1])\n        x = f(edges1)\n        y = f(edges2)\n        return(max(x[1]+y[1]+1, x[0], y[0]))",
    "submit_ts": 1719716660.0
}