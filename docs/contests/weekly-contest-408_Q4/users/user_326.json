{
    "username": "anain829",
    "submission": "class Solution {\npublic:\nint bfs(vector<vector<int>> &adjList, int startNode, int endNode1, int endNode2, int totalNodes) {\n        queue<int> bfsQueue;\n        vector<int> visited(totalNodes, 0);\n        bfsQueue.push(startNode);\n        visited[startNode] = 1;\n        \n        while (!bfsQueue.empty()) {\n            int currentNode = bfsQueue.front();\n            bfsQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visited[neighbor]) {\n                    bfsQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[endNode1] || visited[endNode2];\n    }\n    \n    bool canReachCorner(int gridWidth, int gridHeight, vector<vector<int>>& circleData) {\n        vector<pair<pair<int, int>, int>> circles(circleData.size());\n        vector<vector<int>> adjList(circleData.size() + 4);\n        int totalCircles = circleData.size();\n        \n        for (int i = 0; i < totalCircles; ++i) {\n            circles[i].first.first = circleData[i][0];\n            circles[i].first.second = circleData[i][1];\n            circles[i].second = circleData[i][2];\n        }\n        \n        for (int i = 0; i < totalCircles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[totalCircles].push_back(i);\n                adjList[i].push_back(totalCircles);\n            }\n            if (gridWidth - circles[i].first.first <= circles[i].second) {\n                adjList[totalCircles + 2].push_back(i);\n                adjList[i].push_back(totalCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[totalCircles + 1].push_back(i);\n                adjList[i].push_back(totalCircles + 1);\n            }\n            if (gridHeight - circles[i].first.second <= circles[i].second) {\n                adjList[totalCircles + 3].push_back(i);\n                adjList[i].push_back(totalCircles + 3);\n            }\n            for (int j = i + 1; j < totalCircles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int combinedRadii = circles[i].second + circles[j].second;\n                if (combinedRadii >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n        \n        int isPathBlocked = 0;\n        isPathBlocked = max(isPathBlocked, \n                bfs(adjList, totalCircles, totalCircles+1, totalCircles+2, totalCircles+4));\n        \n        isPathBlocked = max(isPathBlocked, \n            bfs(adjList, totalCircles + 3, totalCircles+ 2, totalCircles + 1, totalCircles+4));\n    \n        if (isPathBlocked) {\n            return false;\n        }\n        return true;\n    }\n};\n",
    "submit_ts": "1722137275",
    "subm_id": "1335759092"
}