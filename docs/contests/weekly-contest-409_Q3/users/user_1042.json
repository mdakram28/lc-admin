{
    "username": "griffin_codes",
    "submission": "#include <vector>\n#include <set>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> answer;\n        int shortest_path_length = n - 1;  // Initially, the path length is n-1\n        \n        // Using a set to store the active paths\n        set<pair<int, int>> active_paths;\n\n        for (const auto& query : queries) {\n            int ui = query[0];\n            int vi = query[1];\n            \n            // Find the position to insert the new path\n            auto it = active_paths.lower_bound({ui, vi});\n            \n            // Check if this path is redundant\n            bool is_redundant = false;\n            if (it != active_paths.end() && it->first <= ui && it->second >= vi) {\n                is_redundant = true;\n            }\n            if (it != active_paths.begin()) {\n                auto previous = std::prev(it);\n                if (previous->first <= ui && previous->second >= vi) {\n                    is_redundant = true;\n                }\n            }\n            \n            if (!is_redundant) {\n                // Calculate the new path length using the new road\n                int new_path_length = shortest_path_length - (vi - ui - 1);\n                \n                // Remove overshadowed paths and adjust the path length\n                vector<pair<int, int>> to_remove;\n                for (auto it = active_paths.lower_bound({ui, -1}); it != active_paths.end() && it->first <= vi; ++it) {\n                    if (it->first >= ui && it->second <= vi) {\n                        new_path_length += (it->second - it->first - 1);\n                        to_remove.push_back(*it);\n                    }\n                }\n                \n                // Remove the overshadowed paths\n                for (const auto& path : to_remove) {\n                    active_paths.erase(path);\n                }\n                \n                // Update the shortest path length\n                shortest_path_length = new_path_length;\n                \n                // Insert the new path\n                active_paths.insert({ui, vi});\n            }\n            \n            // Record the current shortest path length\n            answer.push_back(shortest_path_length);\n        }\n        \n        return answer;\n    }\n};\n",
    "submit_ts": "1722743268",
    "subm_id": "1343788170"
}