{
    "username": "equinox-cz",
    "submission": "class Fenwick:\n    def __init__(self, n: int):\n        self.n = n\n        self.tr = [0] * (n + 1)\n    def add(self, x: int, k: int) -> None:\n        n = self.n\n        tr = self.tr\n        while x <= n:\n            tr[x] += k\n            x += x & -x\n    def query(self, x: int) -> None:\n        res = 0\n        tr = self.tr\n        while x:\n            res += tr[x]\n            x &= x - 1\n        return res\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        res = []\n        n = len(nums)\n        cur = 0\n        tr = Fenwick(n)\n        vis = [False] * (n)\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] > nums[i + 1]:\n                tr.add(i + 1, 1)\n                vis[i] = True\n\n        def upd(x: int) -> None:\n            nt = (nums[x - 1] < nums[x] > nums[x + 1])\n            if nt != vis[x]:\n                vis[x] = nt\n                if nt:\n                    tr.add(x + 1, 1)\n                else:\n                    tr.add(x + 1, -1)\n                \n        for i, (op, x, y) in enumerate(queries):\n            if op == 1:\n                res.append(max(0, tr.query(y) - tr.query(x + 1)))\n            else:\n                nums[x] = y\n                if 0 < x - 1 < n - 1:\n                    upd(x - 1)\n                if 0 < x < n - 1:\n                    upd(x)\n                if 0 < x + 1 < n - 1:\n                    upd(x + 1)\n        return res",
    "submit_ts": 1718507359.0
}