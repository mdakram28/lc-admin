{
    "username": "Akshat",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        // long long m=board.size(),n=board[0].size();\n        // long long mx=long long_MIN;\n        // for (long long i = 0; i < m; i++) {\n        //     for (long long j = 0; j < n; j++) {\n        //         long  long currentSum = board[i][j];\n        //         vector<bool> rowUsed(m,false);\n        //        vector<bool> colUsed(n,false);\n        //         rowUsed[i] = true;\n        //         colUsed[j] = true;\n\n        //         long long secondMax = long long_MIN;\n        //         long long secondRow = -1, secondCol = -1;\n        //         for (long long r = 0; r < m; r++) {\n        //             if (rowUsed[r]) continue;\n        //             for (long long c = 0; c < n; c++) {\n        //                 if (colUsed[c]) continue;\n        //                 if (board[r][c] > secondMax) {\n        //                     secondMax = board[r][c];\n        //                     secondRow = r;\n        //                     secondCol = c;\n        //                 }\n        //             }\n        //         }\n        //          if (secondMax != long long_MIN) {\n        //             currentSum += secondMax;\n        //             rowUsed[secondRow] = true;\n        //             colUsed[secondCol] = true;\n\n        //             long long tm = long long_MIN;\n        //             for (long long r = 0; r < m; r++) {\n        //                 if (rowUsed[r]) continue;\n        //                 for (long long c = 0; c < n; c++) {\n        //                     if (colUsed[c]) continue;\n        //                     if (board[r][c] > tm) {\n        //                         tm = board[r][c];\n        //                     }\n        //                 }\n        //             }\n        //             if (tm != long long_MIN) {\n        //                 currentSum += tm;\n        //             }\n        //             mx = max(mx, currentSum);\n        //         }\n        //     }\n        // }\n\n        // return mx;\n\n// long long m = board.size();\n//         long long n = board[0].size();\n        \n//         vector<long long> rowMax(m, long long_MIN);\n//         vector<long long> colMax(n, long long_MIN);\n        \n//         for (long long i = 0; i < m; ++i) {\n//             for (long long j = 0; j < n; ++j) {\n//                 rowMax[i] = max(rowMax[i], (long long)board[i][j]);\n//                 colMax[j] = max(colMax[j], (long long)board[i][j]);\n//             }\n//         }\n        \n//         long long mx = long long_MIN;\n\n//         for (long long i = 0; i < m; ++i) {\n//             for (long long j = 0; j < n; ++j) {\n//                 long long firstRookValue = board[i][j];\n                \n//                 long long secondMax = long long_MIN;\n//                 long long thirdMax = long long_MIN;\n                \n//                 for (long long r = 0; r < m; ++r) {\n//                     if (r == i) continue;\n//                     for (long long c = 0; c < n; ++c) {\n//                         if (c == j) continue;\n//                         secondMax = max(secondMax, (long long)board[r][c]);\n//                     }\n//                 }\n                \n//                 for (long long r = 0; r < m; ++r) {\n//                     if (r == i) continue;\n//                     for (long long c = 0; c < n; ++c) {\n//                         if (c == j) continue;\n//                         if (board[r][c] > thirdMax) {\n//                             bool valid = true;\n//                             for (long long r2 = 0; r2 < m; ++r2) {\n//                                 if (r2 == r || r2 == i) continue;\n//                                 for (long long c2 = 0; c2 < n; ++c2) {\n//                                     if (c2 == c || c2 == j) continue;\n//                                     if (board[r2][c2] == secondMax) {\n//                                         valid = false;\n//                                         break;\n//                                     }\n//                                 }\n//                                 if (!valid) break;\n//                             }\n//                             if (valid) {\n//                                 thirdMax = max(thirdMax, (long long)board[r][c]);\n//                             }\n//                         }\n//                     }\n//                 }\n                \n//                 if (secondMax != long long_MIN && thirdMax != long long_MIN) {\n//                     mx = max(mx, firstRookValue + secondMax + thirdMax);\n//                 }\n//             }\n//         }\n        \n//         return mx;\n         long long m = board.size();\n        long long n = board[0].size();\n        long long mx = LLONG_MIN;\n        vector<vector<long long>> bv(m, vector<long long>(3, LLONG_MIN));\n        vector<vector<long long>> bc(m, vector<long long>(3, -1));\n\n        for (long long i = 0; i < m; ++i) {\n            vector<pair<long long, long long>> colValues;\n            for (long long j = 0; j < n; ++j) {\n                colValues.emplace_back(board[i][j], j);\n            }\n            sort(colValues.rbegin(), colValues.rend()); \n\n            for (long long k = 0; k < 3 && k < n; ++k) {\n                bv[i][k] = colValues[k].first;\n                bc[i][k] = colValues[k].second;\n            }\n        }\n        for (long long r1 = 0; r1 < m; ++r1) {\n            for (long long r2 = r1 + 1; r2 < m; ++r2) {\n                for (long long r3 = r2 + 1; r3 < m; ++r3) {\n                    for (long long i = 0; i < 3; ++i) {\n                        for (long long j = 0; j < 3; ++j) {\n                            if (bc[r2][j] == bc[r1][i]) continue;\n                            for (long long k = 0; k < 3; ++k) {\n                                if (bc[r3][k] == bc[r1][i] || bc[r3][k] == bc[r2][j]) continue;\n\n                                long long currentSum = bv[r1][i] + bv[r2][j] + bv[r3][k];\n                                mx = max(mx, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return mx;\n\n \n    }\n};",
    "submit_ts": "1723910363",
    "subm_id": "1359227557"
}