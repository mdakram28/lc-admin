{
    "username": "DCxy056lHS",
    "submission": "// segment tree with node index 1 as the root node\n// i.e. node at index 1 will cover the rangw 0 to n-1 \n// following segment tree stores sum of different segments\n#define ll long long\nclass segment_tree{\npublic:    \n    vector<ll> t;\n    segment_tree(ll n)\n    {\n       t.resize(4*n + 1) ; \n    }\n\n    void build(ll i, ll l, ll r, vector<int> &a)\n    {\n        if(l == r)\n        {\n            t[i] = a[l];\n            return ;\n        }\n\n        ll mid = (l+r)/2 ;\n        build(2*i, l, mid, a);\n        build(2*i + 1, mid+1, r, a);\n        t[i] = (t[2*i] & t[2*i + 1]);\n\n    }\n    ll query(ll i, ll l, ll r, ll lq, ll rq)\n    {\n        if(l > rq || lq > r)\n            return (1LL << 60) - 1;\n\n        if(lq <= l && rq >= r)\n            return t[i]; \n\n        ll mid = (l + r)/2; \n        return query(2*i, l, mid, lq, rq) & query(2*i+1, mid+1, r, lq, rq);\n    }\n};\n\n\nclass Solution {\npublic:\n\n    long long count(vector<int> &a, int k)\n    {\n        ll ans = 0;\n        int n = a.size();\n        segment_tree tree(n);\n        tree.build(1, 0, n-1, a);\n        for(int i = 0; i < n; i++)\n        {\n            if(a[i] < k)\n                continue;\n\n            ll lo = i;\n            ll hi = n-1;\n            ll j = i;\n            while(hi >= lo)\n            {\n                ll mid = (lo + hi)/2;\n                if(tree.query(1, 0, n-1, i, mid) >= k)\n                {\n                    j = mid;\n                    lo = mid + 1;\n                }\n                else\n                    hi = mid-1;\n            }\n            ans += max(0LL, (j-i+1));\n\n        }\n        return ans ;\n    }\n\n    long long countSubarrays(vector<int>& a, int k) {\n        long long ans =  count(a, k) - count(a, k+1);\n        return ans; \n    }\n};",
    "submit_ts": "1720281034",
    "subm_id": "1311810803"
}