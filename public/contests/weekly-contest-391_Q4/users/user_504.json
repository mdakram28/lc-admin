{
    "username": "insomniacat",
    "submission": "class Solution {\n    \nint MaxSkip(const vector<int>& V, const vector<int>& V1, int skip_index) {\n    int mxv0 = INT_MIN, mxv1 = INT_MIN, miv0 = INT_MAX, miv1 = INT_MAX;\n    \n    for (int i = 0; i < V.size(); i++) {\n        if(i == skip_index) {\n            continue;\n        }\n        mxv0 = max(mxv0, V[i]);\n        miv0 = min(miv0, V[i]);\n        \n        mxv1 = max(mxv1, V1[i]);\n        miv1 = min(miv1, V1[i]);\n    }\n    return  max((mxv0 - miv0), (mxv1 - miv1));\n}\n\nint MaxDist(vector<vector<int>>& A) {\n    int N = A.size();\n    vector<int> V(N), V1(N);\n    int mxv0 = INT_MIN, mxv1 = INT_MIN, miv0 = INT_MAX, miv1 = INT_MAX;\n    \n    for (int i = 0; i < N; i++) {\n        V[i] = A[i][0] + A[i][1];\n        V1[i] = A[i][0] - A[i][1];\n        \n        mxv0 = max(mxv0, V[i]);\n        miv0 = min(miv0, V[i]);\n        \n        mxv1 = max(mxv1, V1[i]);\n        miv1 = min(miv1, V1[i]);\n    }\n \n    // for(int i : V) {\n    //     cout << i << \" \";\n    // }\n    // cout << endl;\n    // for(int i : V1) {\n    //     cout << i << \" \";\n    // }\n    // cout << endl;\n    // cout << \"MX=\" << mxv0 << \" \" << miv0 << \" \" << mxv1 << \" \" << miv1 << endl;\n    \n//     sort(V.begin(), V.end());\n//     sort(V1.begin(), V1.end());\n    \n    int ma0 = -1, mi0 = -1, ma1 = -1, mi1 = -1;\n    for(int i = 0; i < N; ++i) {\n        if(ma0 == -1 && V[i] == mxv0) {\n            ma0 = i;\n        }\n        \n        if(mi0 == -1 && V[i] == miv0) {\n            mi0 = i;\n        }\n        \n        if(ma1 == -1 && V1[i] == mxv1) {\n            ma1 = i;\n        }\n        \n        if(mi1 == -1 && V1[i] == miv1) {\n            mi1 = i;\n        }\n    }\n    // cout << \"ma0= \" << ma0 << \" mi0=\" << mi0 << \" ma1=\" <<ma1 << \" mi1=\" << mi1 << endl; \n    \n    int maximum = max((mxv0 - miv0), (mxv1 - miv1));\n    // int maximum\n    //     = max(V.back() - V.front(), V1.back() - V1.front());\n    int m1 = MaxSkip(V, V1, ma0);\n    int m2 = MaxSkip(V, V1, mi0);\n    \n    int m3 = MaxSkip(V, V1, ma1);\n    int m4 = MaxSkip(V, V1, mi1);\n    \n    return min({m1, m2, m3, m4});\n}\n\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        return MaxDist(points);\n        // cout << \"Farthest pair indices: \" << result.first << \", \" << result.second << endl;\n        // return -1;\n    }\n};"
}