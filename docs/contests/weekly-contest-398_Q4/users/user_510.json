{
    "username": "masakit",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#ifdef LOCAL\n#include <debugoutput.h>\n#else\n#define dbg(...)\n#endif\ntypedef long long ll;\n[[maybe_unused]] constexpr int INF = 0x3f3f3f3f;\n[[maybe_unused]] constexpr ll LINF = 0x3f3f3f3f3f3f3f3f;\ntemplate<class T> bool chmin(T& a, const T& b) { return b < a ? a = b, 1 : 0; }\ntemplate<class T> bool chmax(T& a, const T& b) { return b > a ? a = b, 1 : 0; }\n#define rep(i, a, b) for (int i = int(a), i##_max_ = int(b); i < i##_max_; i++)\n#define rrep(i, a, b) for (int i = int(a), i##_min_ = int(b); i >= i##_min_; i--)\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define len(x) (int)(x).size()\n#define vec vector\n#define pii pair<int, int>\n#define vi vec<int>\n#define tup tuple<int, int, int>\nauto speed = [] { cin.tie(nullptr)->sync_with_stdio(false); return 0; }();\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        set<tup> vis;\n        map<tup, int> m;\n        m[{ 1, 0, 0 }] = 1; // stair 1, jump 0\n        deque<tup> q;\n        q.push_back({ 1, 0, 0 });\n        while (!q.empty()) {\n            auto [stair, jump, down] = q.front();\n            q.pop_front();\n            // cout << stair << \" \" << jump << \" \" << down << \"\\n\";\n            // cout << m[{stair, jump, down}] << \"\\n\";\n            if (!down && stair > 0) {\n                m[{stair - 1, jump, 1}] += m[{stair, jump, down}];\n                if (vis.insert({ stair - 1, jump, 1 }).second) {\n                    q.push_front({ stair - 1, jump, 1 });\n                }\n            }\n            ll jump_loc = (1LL << jump) + stair;\n            if (jump_loc <= k + 1) {\n                m[{jump_loc, jump + 1, 0}] += m[{stair, jump, down}];\n                if (vis.insert({ jump_loc, jump + 1, 0 }).second) {\n                    q.push_back({ jump_loc, jump + 1, 0 });\n                }\n            }\n        }\n        int ans = 0;\n        auto it = m.lower_bound({ k, 0, 0 });\n        while (it != m.end()) {\n            auto [stair, jump, down] = it->first;\n            if (stair != k) break;\n            // cout << stair << \" \" << jump << \" \" << down << \"\\n\";\n            // cout << it->second << '\\n';\n            ans += it->second;\n            it++;\n        }\n        return ans;\n    }\n};\n\n#ifdef LOCAL\nvoid solve() {\n    Solution s{};\n\n}\n\nsigned main() {\n    cin.exceptions(cin.failbit);\n    solve();\n}\n#endif\n",
    "submit_ts": 1716088498.0
}