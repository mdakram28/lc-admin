{
    "username": "22ceuos006",
    "submission": "import heapq\nfrom typing import List, Tuple\nfrom collections import defaultdict, deque\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost_index = []\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n   \n        root = TrieNode()\n        for index, word in enumerate(words):\n            node = root\n            for char in word:\n                if char not in node.children:\n                    node.children[char] = TrieNode()\n                node = node.children[char]\n            node.cost_index.append(index)\n    \n        n = len(target)\n        min_heap = [(0, 0)] \n        min_cost = [float('inf')] * (n + 1)\n        min_cost[0] = 0\n        \n        while min_heap:\n            current_cost, pos = heapq.heappop(min_heap)\n            \n            if pos == n:\n                return current_cost\n            \n            if current_cost > min_cost[pos]:\n                continue\n            \n            node = root\n            for i in range(pos, n):\n                if target[i] not in node.children:\n                    break\n                node = node.children[target[i]]\n                for index in node.cost_index:\n                    new_pos = i + 1\n                    new_cost = current_cost + costs[index]\n                    if new_cost < min_cost[new_pos]:\n                        min_cost[new_pos] = new_cost\n                        heapq.heappush(min_heap, (new_cost, new_pos))\n        \n        return -1 if min_cost[n] == float('inf') else min_cost[n]",
    "submit_ts": "1720323320",
    "subm_id": "1312372708"
}