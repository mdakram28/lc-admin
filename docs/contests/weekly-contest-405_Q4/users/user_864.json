{
    "username": "yncQgSzvpq",
    "submission": "class NodeTrie {\npublic:\n    unordered_map<char, NodeTrie*> con;\n    vector<pair<int, int>> ketThucTu;\n};\n\nclass Trie {\npublic:\n    NodeTrie* goc;\n\n    Trie() {\n        goc = new NodeTrie();\n    }\n\n    void chen(string tu, int chiSo, int chiPhi) {\n        NodeTrie* nut = goc;\n        for (char c : tu) {\n            if (!nut->con.count(c)) {\n                nut->con[c] = new NodeTrie();\n            }\n            nut = nut->con[c];\n        }\n        nut->ketThucTu.push_back({chiSo, chiPhi});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string dich, vector<string>& cacTu, vector<int>& cacChiPhi) {\n        int n = dich.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < cacTu.size(); ++i) {\n            trie.chen(cacTu[i], i, cacChiPhi[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            NodeTrie* nut = trie.goc;\n            for (int j = i; j < n; ++j) {\n                if (!nut->con.count(dich[j])) {\n                    break;\n                }\n                nut = nut->con[dich[j]];\n                for (auto& p : nut->ketThucTu) {\n                    int doDaiTu = cacTu[p.first].size();\n                    if (i + doDaiTu <= n) {\n                        dp[i + doDaiTu] = min(dp[i + doDaiTu], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322692",
    "subm_id": "1312356607"
}