{
    "username": "qiye-5",
    "submission": "int __FAST_IO__ = []() { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); return 0; }();\n\nint tree[100'001], n;\nint Query(int x)\n{\n    if (x <= 0) return 0;\n    int res = 0;\n    for (; x; x &= x - 1) res += tree[x];\n    return res;\n}\nvoid Insert(int x, int v) {\n    if (x <= 0) return;\n    for (; x < n; x += (-x) & x) tree[x] += v;\n}\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        n = nums.size();\n        memset(tree, 0, sizeof tree);\n        for (int i = 1; i < n - 1; ++i) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) Insert(i, 1);\n        }\n        vector<int> res;\n        auto Check = [&](int x, int c) {\n            if (x <= 0 || x >= n - 1) return;\n            if (nums[x] > nums[x - 1] && nums[x] > nums[x + 1]) Insert(x, c);\n        };\n        for (auto& v : queries) {\n            if (v[0] == 1) {\n                if (v[1] == v[2]) res.push_back(0);\n                else res.push_back(Query(v[2] - 1) - Query(v[1]));\n            } else {\n                Check(v[1], -1);\n                Check(v[1] + 1, -1);\n                Check(v[1] - 1, -1);\n\n                nums[v[1]] = v[2];\n\n                Check(v[1], 1);\n                Check(v[1] + 1, 1);\n                Check(v[1] - 1, 1);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718507035.0
}