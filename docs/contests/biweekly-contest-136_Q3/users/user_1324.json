{
    "username": "rustbear",
    "submission": "class Solution:\n    def minFlips(self, grid: List[List[int]]) -> int:\n        # if this is a square, the center cell must be 0\n        # every time we look at 4 cells instead of one\n        N = len(grid)\n        M = len(grid[0])\n        res = 0\n        linger = 0\n        pending = 0\n        for r1 in range(N):\n            r2 = N - 1 - r1\n            if r1 > r2:\n                break\n            for c1 in range(M):\n                c2 = M - 1 - c1\n                if c1 > c2:\n                    break\n                # print(r1, r2, c1, c2)\n                if r1 < r2 and c1 < c2:\n                    # 4 distinct elements to work with\n                    ones = grid[r1][c1] + grid[r2][c1] + grid[r1][c2] + grid[r2][c2]\n                    print(ones)\n                    res += min(ones, 4 - ones)\n                elif r1 == r2 and c1 == c2:\n                    res += grid[r1][c1]\n                elif r1 == r2:\n                    if grid[r1][c1] == grid[r2][c2]:\n                        if grid[r1][c1] == 1:\n                            linger += 2\n                    else:\n                        # unset the one\n                        linger += 1\n                        pending += 1\n                else:\n                    if grid[r1][c1] == grid[r2][c1]:\n                        if grid[r1][c1] == 1:\n                            linger += 2\n                    else:\n                        linger += 1\n                        pending += 1\n                # print(res)\n                #print(c1, c2, r1, r2, res)\n        #print(linger, pending, res)\n        linger %= 4\n        res += max(min(linger, 4 - linger), pending)\n        return res",
    "submit_ts": "1722698877",
    "subm_id": "1343194641"
}