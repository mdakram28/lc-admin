{
    "username": "seetszewen",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        int front = 0;\n        int back = nums.size() - 1;\n        map<int, int> countArray;\n        unordered_map<int, int> umap;\n        while (front < back) {\n            umap[abs(nums[front] - nums[back])]++;\n            if (nums[front] > nums[back]) {\n                swap(nums[front], nums[back]);\n            }\n            int maxDifference = max(k - nums[front], nums[back] - 0);\n            countArray[maxDifference]++;\n            front++;\n            back--;\n        }\n        int count = 0;\n        for (auto itr = countArray.begin(); itr != countArray.end(); ++itr) {\n            count += itr->second;\n            itr->second = count;\n        }\n        \n        int minimum = INT_MAX;\n        for (auto itr = umap.begin(); itr != umap.end(); ++itr) {\n            int highestCount = (nums.size()/2 - itr->second) * 2 + itr->second;\n            int num = itr->first;\n            auto index = countArray.lower_bound(num);\n            if (index != countArray.begin()) {\n                index = prev(index);\n                int randomNum = nums.size()/2 - index->second;\n                highestCount -= randomNum;\n                // cout << index->first << \" \" << index->second << \" \" << randomNum << endl;\n            } else {\n                highestCount -= nums.size()/2;\n            }\n            minimum = min(highestCount, minimum);\n        }\n        // cout << endl;\n        return minimum;\n    }\n};",
    "submit_ts": "1721490374",
    "subm_id": "1327480838"
}