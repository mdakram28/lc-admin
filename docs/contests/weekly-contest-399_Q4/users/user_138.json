{
    "username": "jtcheng26",
    "submission": "typedef long long ll;\n\nclass Solution {\npublic:\n    struct SegTree {\n      int n;  // array size\n        int k; // offset;\n      vector<tuple<ll, ll, ll, ll>> t; // neither, left and not right, right and not left, left and right\n        const int INF = 1e9;\n\n      void init(int n) {  // build the tree\n          int j = 1;\n          while (j < n) j = (j * 2);\n          k = n - j;\n          this->n = j;\n          t = vector<tuple<ll, ll, ll, ll>>(2*j+1, { 0, 0, 0, 0 });\n        // for (int i = n - 1; i > 0; --i) t[i] = t[i<<1] + t[i<<1|1];\n      }\n\n      void ptUpdate(int p, int value) {  // set value at position p\n          t[p += n] = { 0, 0, 0, value};\n        for (; p > 1; p >>= 1) {\n            // cout << p << \" \" << (p^1) << \" \" << value << \" \" << get<3>(t[p]) << \" \" << get<3>(t[p^1]) << \"\\n\";\n            // if ((p^1) > 2 * n) {\n            //     cout << p << \" \" << value << \" \" << (2*n) << \"\\n\";\n            //     return;\n            // }\n            tuple<ll, ll, ll, ll> l = t[min(p, p^1)];\n            tuple<ll, ll, ll, ll> r = t[max(p, p^1)];\n            // if (p >= n && (p^1) >= n) {\n            //     cout << p << \" \" << (p^1) << \"\\n\";\n            //     cout << get<3>(l) << \" \" << get<3>(r) << \"\\n\";\n            // }\n            if (p >= n && (p^1) >= n) {\n                t[p>>1] = {\n                    0,\n                    get<3>(l),\n                    get<3>(r),\n                    0\n                };\n            } else {\n            t[p>>1] = {\n                max({0LL, get<0>(l), get<0>(r), get<1>(r), get<2>(l), get<0>(l) + get<0>(r), get<2>(l) + get<0>(r), get<0>(l) + get<1>(r) }),\n                max({ get<1>(l), get<1>(l) + get<1>(r), get<1>(l) + get<0>(r), get<3>(l), get<3>(l) + get<0>(r)}),\n                max({ get<2>(r), get<2>(r) + get<2>(l), get<2>(r) + get<0>(l), get<3>(r), get<3>(r) + get<0>(l)}),\n                max({ get<1>(l) + get<3>(r), get<1>(l) + get<2>(r), get<3>(l) + get<2>(r) })\n            };\n            }\n \n        }\n      }\n\n      ll rngSum() {  // sum on interval [l, r)\n        return max({ get<0>(t[1]), get<1>(t[1]), get<2>(t[1]), get<3>(t[1])});\n      }\n    };\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        SegTree st;\n        int n = nums.size();\n        st.init(n);\n        // cout << st.n << \"\\n\";\n        for (int i=0;i<n;i++) st.ptUpdate(i, nums[i]);\n        long long ans = 0;\n        const long long MOD = 1e9+7;\n        // for (int i=0;i<2*n;i++) {\n        //     cout << \"(\" << \" \"<< get<0>(st.t[i]) << \" \" << get<1>(st.t[i]) << \" \" << get<2>(st.t[i]) << \" \" << get<3>(st.t[i]) << \") \";\n        // }\n        // cout << \"\\n\";\n        for (const vector<int>& v : queries) {\n            st.ptUpdate(v[0], v[1]);\n        //           for (int i=0;i<2*n;i++) {\n        //     cout << \"(\" << \" \"<< get<0>(st.t[i]) << \" \" << get<1>(st.t[i]) << \" \" << get<2>(st.t[i]) << \" \" << get<3>(st.t[i]) << \") \";\n        // }\n        // cout << \"\\n\";\n            ans = (ans + st.rngSum()) % MOD;\n        }\n        /*\n        [4,0,-1,-2,3,1,-1]\n[[3,1],[0,-2],[1,-1],[0,-2],[5,4],[6,-3],[6,-2],[2,-1]]\nexpected 36\n        */\n        return ans;\n    }\n};",
    "submit_ts": "1716695151",
    "subm_id": "1268134616"
}