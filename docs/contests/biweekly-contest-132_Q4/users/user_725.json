{
    "username": "i_am_wiz",
    "submission": "class Solution {\npublic:\n\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        if (n == 1) return 1;\n        vector<vector<int>> dp(n + 1, vector<int>(k + 1));\n        vector<int> best(k + 1, 1);\n        for (int i = 0; i <= k; ++i) {\n            dp[0][i] = 1;\n        }\n\n        vector<unordered_map<int, pair<int, int>>> maps(k + 1);\n        for (int i = 0; i <= k; ++i) {\n            maps[i][nums[0]] = {1, 0};\n        }\n\n\n        int len = 1;\n        for (int i = 1; i < n; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                if (j) dp[i][j] = best[j - 1] + 1;\n                if (maps[j].count(nums[i])) {\n                    auto p = maps[j][nums[i]];\n                    dp[i][j] = max(dp[i][j], dp[p.second][j] + 1);\n                }\n\n                if (dp[i][j] > maps[j][nums[i]].first) maps[j][nums[i]] = {dp[i][j], i};\n                len = max(len, dp[i][j]);\n            }\n            for (int j = 0; j <= k; ++j) {\n                best[j] = max(best[j], dp[i][j]);\n            }\n        }\n\n        //printmat(dp, n + 1, k + 1);\n\n        return len;\n    }\n};",
    "submit_ts": "1717862113",
    "subm_id": "1281812581"
}