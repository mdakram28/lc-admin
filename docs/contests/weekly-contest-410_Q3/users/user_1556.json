{
    "username": "amalag",
    "submission": "'''\ndp(startIndex, x, y) --> # of good pairs starting from (x,y) where x+y == nums[startIndex]\n\ndp(startIndex, x, y)\n\nfor next element pair (x_next, y_next) first element lower bound is x and second element upper bound is y\n\noutput = 0\nfor x_next in range(x,nums[startIndex + 1]+1):\n    y_next = nums[startIndex + 1] - x_next\n    if y_next <= y:\n        output += dp(startIndex + 1, x_next, y_next)\n\nreturn output\n\n\nend scenarios\n\nstartIndex > n-1 or x+y != nums[startIndex] --> return 0\n\nstartIndex == n-1 --> return 1\n\n\n'''\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        n = len(nums)\n        if n == 1:\n            return nums[0]+1\n        \n        @cache\n        def dp(startIndex, x, y):\n            if startIndex > n-1 or x+y != nums[startIndex]:\n                return 0\n            if startIndex == n-1:\n                return 1\n            \n            output = 0\n            if nums[startIndex + 1] < x:\n                return 0\n\n            for x_next in range(x,nums[startIndex + 1]+1):\n                y_next = nums[startIndex + 1] - x_next\n                if y_next <= y:\n                    output += dp(startIndex + 1, x_next, y_next)\n\n            return output\n\n        total = 0\n        MOD = pow(10,9) + 7\n        for x in range(nums[0]+1):\n            y = nums[0]-x\n            total += dp(0, x, y) % MOD\n\n        return total % MOD\n",
    "submit_ts": "1723345929",
    "subm_id": "1351566370"
}