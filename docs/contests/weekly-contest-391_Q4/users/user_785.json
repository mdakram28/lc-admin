{
    "username": "liq-bee",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        std::sort(points.begin(), points.end(), \n                  [](vector<int> &a, vector<int> &b)->bool {\n                     return a[0] < b[0] || a[0] == b[0] && a[1] < b[1]; \n                  });\n        auto mm = [&points](int del)->vector<int> {\n            int hi = -1;\n            int lo = -1;\n            vector<int> ret(2, -1);\n            int dis = -1;\n            // printf(\"%d\\n\", del);\n            for (int i = 0; i < points.size(); i++) {\n                // printf(\"%d %d %d\\n\", i, lo, hi);\n                if (i == del) {\n                    continue;\n                }\n                int ha = 0;\n                int hb = 0;\n                int d = 0;\n                if (hi != -1) {\n                    ha = points[i][0] - points[hi][0];\n                    hb = points[i][1] - points[hi][1];\n                    d = std::abs(ha) + std::abs(hb);\n                    if (dis < d) {\n                        ret[0] = hi;\n                        ret[1] = i;\n                        dis = d;\n                    }\n                }\n                \n                if (lo != -1) {\n                    ha = points[i][0] - points[lo][0];\n                    hb = points[i][1] - points[lo][1];\n                    d = std::abs(ha) + std::abs(hb);\n                    if (dis < d) {\n                        ret[0] = lo;\n                        ret[1] = i;\n                        dis = d;\n                    }\n                }\n                \n                if (hi == -1 || points[i][0] - points[hi][0] < points[i][1] - points[hi][1]) {\n                    hi = i;\n                }\n                if (lo == -1 || points[i][0] - points[lo][0] < points[lo][1] - points[i][1]) {\n                    lo = i;\n                }\n            }\n            return ret;\n        };\n        \n        vector<int> v = mm(-1);\n        vector<int> vv = mm(v[0]);\n        int dis0 = std::abs(points[vv[0]][0] - points[vv[1]][0]) + std::abs(points[vv[0]][1] - points[vv[1]][1]);\n        \n        vv = mm(v[1]);\n        int dis1 = std::abs(points[vv[0]][0] - points[vv[1]][0]) + std::abs(points[vv[0]][1] - points[vv[1]][1]);\n        \n        int ret = std::min(dis0, dis1);\n        \n        return ret;\n    }\n};"
}