{
    "username": "ujjwal___",
    "submission": "class Solution {\npublic:\n\n    void construct_segment_tree(vector<int>& segtree, vector<int>& a, int n) {\n        for (int i = 0; i < n; i++)\n            segtree[n + i] = a[i];\n\n        for (int i = n - 1; i >= 1; i--)\n            segtree[i] = max(segtree[2 * i], segtree[2 * i + 1]);\n    }\n\n    void update(vector<int>& segtree, int pos, int value, int n) {\n        pos += n;\n        segtree[pos] = value;\n\n        while (pos > 1) {\n            pos >>= 1;\n            segtree[pos] = max(segtree[2 * pos], segtree[2 * pos + 1]);\n        }\n    }\n\n    int range_query(vector<int>& segtree, int left, int right, int n) {\n        left += n;\n        right += n + 1; // Include the right endpoint in the range\n\n        int ma = INT_MIN;\n\n        while (left < right) {\n            if (left & 1) {\n                ma = max(ma, segtree[left]);\n                left++;\n            }\n            if (right & 1) {\n                right--;\n                ma = max(ma, segtree[right]);\n            }\n            left >>= 1;\n            right >>= 1;\n        }\n        return ma;\n    }\n\n    const int N = 5e4 + 10;\n\n    vector<bool> getResults(vector<vector<int>>& q) {\n        vector<int> a(N, INT_MIN);\n        vector<int> seg(2 * N);\n\n        multiset<pair<int, int>> st;\n        st.insert({0, 1e8});\n        a[0] = 1e8;\n\n        construct_segment_tree(seg, a, N);\n        vector<bool> ans;\n\n        for (int i = 0; i < q.size(); i++) {\n            if (q[i][0] == 1) {\n                int x = q[i][1];\n                auto it = st.lower_bound({x, 0});\n                it--;\n                auto p = *it;\n                st.erase(it);\n                int start = p.first;\n                int mid = x;\n                int end = p.second;\n\n                st.insert({start, mid});\n                st.insert({x, end});\n                update(seg, start, mid - start, N);\n                update(seg, mid, end - mid, N);\n            } else {\n                int x = q[i][1];\n                int sz = q[i][2];\n\n                if (x - sz < 0) {\n                    ans.push_back(false);\n                } else {\n                    int maxi = range_query(seg, 0, x - sz, N);\n                    if (maxi >= sz) {\n                        ans.push_back(true);\n                    } else {\n                        ans.push_back(false);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};\n",
    "submit_ts": "1716651485",
    "subm_id": "1267641470"
}