{
    "username": "lihaicoder",
    "submission": "class SegNode:\n    def __init__(self, l, r, value = None):\n        self.l = l\n        self.r = r\n        self.mid = (l+r)//2\n        self.value = value\n        self.lc = None\n        self.rc = None\n\nclass SegTree:\n    def _build(self, l, r, nums):\n        if l == r:\n            return SegNode(l, r, nums[l])\n        root = SegNode(l, r)\n        root.lc = self._build(l, root.mid, nums)\n        root.rc = self._build(root.mid + 1, r, nums)\n        root.value = root.lc.value + root.rc.value\n        return root\n        \n    def __init__(self, nums):\n        self.root = self._build(0, len(nums)-1, nums)\n    \n    def updaterange(self, cur, l, r, value):\n        # print(\"update\", cur)\n        # print(l, r, value)\n        if not cur:\n            return 0\n        if l > r:\n            # print(\"l>r,  return\")\n            return 0\n        # if cur.l == cur.r:\n        #     # print(cur.l, l, cur.r, r)\n        #     assert cur.l == l and cur.r == r\n        # # if cur.l == l and cur.r == r:\n        #     ret = value - cur.value\n        #     cur.value = value\n        #     return ret\n\n        if cur.l == l and cur.r == r:\n            ret = value - cur.value\n            cur.value = value\n            cur.lc = None\n            cur.rc = None\n            return ret\n\n        diff = 0\n        # print(\"cur\", cur.l, cur.r, cur.mid, cur.lc, cur.rc)\n        # print(\"goingin\", l, min(cur.mid, r))\n        diff += self.updaterange(cur.lc, l, min(cur.mid, r), value)\n        # print(\"goingin\", max(cur.mid+1, l), r)\n        diff += self.updaterange(cur.rc, max(cur.mid+1, l), r, value)\n        cur.value += diff\n        return diff\n    \n    def query(self, cur, l, r):\n        # print(cur.l, cur.r, cur.value, l, r)\n        if not cur:\n            return 0\n        if l > r:\n            return 0\n        if cur.l == l and cur.r == r:\n            return cur.value\n        lsum = self.query(cur.lc, l, min(cur.mid, r))\n        rsum = self.query(cur.rc, max(cur.mid+1, l), r)\n        return lsum + rsum\n        \nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        tree = SegTree([1]*(n-1))\n        ans = []\n        for s, t in queries:\n            # print(tree.query(tree.root, 3, 3))\n            # print(\"query\", s, t)\n            if s + 1 <= t:\n                # print(\"update\", s+1, t-1)\n                tree.updaterange(tree.root, s+1, t-1, 0)\n            ans.append(tree.query(tree.root, 0, n-2))\n        # print(tree.query(tree.root, 3, 3))\n        return ans",
    "submit_ts": "1722743354",
    "subm_id": "1343790070"
}