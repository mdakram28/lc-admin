{
    "username": "Tanmay7404",
    "submission": "class Solution {\npublic:\n    struct Node {\n        Node* edge[26];\n        int end_word;\n        Node(){\n            for(int i=0;i<26;i++){\n                edge[i] = NULL;\n            }\n            end_word = INT_MAX;\n        }\n\n        bool contains(char c){\n            if(edge[(int)(c-'a')]!=NULL){\n                return true;\n            }\n            return false;\n        }\n        Node* put(char c){\n            edge[(int)(c-'a')] = new Node();\n            return edge[(int)(c-'a')];\n        }\n    };\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        Node* root = new Node();\n        for(int i=0;i<n;i++){\n            string s= words[i];\n            int s_size = s.length();\n            Node* curr = root;\n            for(int j=0;j<s_size;j++){\n                if(curr->contains(s[j])){\n                    curr = curr->edge[(int)s[j]-'a'];\n                }\n                else{\n                    curr = curr->put(s[j]);\n                }\n            }\n            curr->end_word = min(costs[i],curr->end_word);\n        }\n       \n        // for (int i = 0; i < 26; i++) {\n        //     if (root->edge[i] != NULL) {\n        //         cout << \"Root edge \" << char('a' + i) << \" is not NULL and end_word is \" << root->edge[i]->end_word << endl;\n        //     } else {\n        //         cout << \"Root edge \" << char('a' + i) << \" is NULL\" << endl;\n        //     }\n        // }\n        n = target.length();\n        vector<int> cost (n+1,INT_MAX);\n        cost[0] = 0;\n        for(int i=0;i<n;i++){\n            Node * curr = root;\n            for(int j=i;j<n;j++){\n                if(curr->contains(target[j])){\n                    curr = curr->edge[(int)target[j]-'a'];\n                }\n                else{\n                    break;\n                }\n                if(curr->end_word != INT_MAX){\n                    if(cost[i]==INT_MAX){\n                        continue;\n                    }\n                    cost[j+1] = min(cost[j+1],cost[i]+(curr->end_word));\n                }\n            }\n        }\n        if(cost[n]==INT_MAX){\n            return -1;\n        }\n        return cost[n];\n    }\n};",
    "submit_ts": "1720322996",
    "subm_id": "1312364634"
}