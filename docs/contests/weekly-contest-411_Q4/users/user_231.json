{
    "username": "vijaykatta3094",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        counts = Counter()\n        left = 0\n        n = len(s)\n        left_to_right = [0] * n\n        right_to_left = [0] * n\n\n        for right in range(n):\n            counts[s[right]] += 1\n            while counts['0'] > k and counts['1'] > k:\n                counts[s[left]] -= 1\n                left += 1\n            right_to_left[right] = left\n\n        right = n - 1\n        counts = Counter()\n        for left in reversed(range(n)):\n            counts[s[left]] += 1\n            while counts['0'] > k and counts['1'] > k:\n                counts[s[right]] -= 1\n                right -= 1\n            left_to_right[left] = right\n\n        pref_sum = [0] + list(accumulate([(right - left + 1) for right, left in enumerate(right_to_left)]))\n        result = []\n        #print(left_to_right)\n        #print(right_to_left)\n        for left_bound, right_bound in queries:\n            middle = min(right_bound, left_to_right[left_bound])\n            if middle == right_bound:\n                length = right_bound - left_bound + 1\n                result.append(length * (length + 1) // 2)\n            elif middle >= left_bound:\n                length = middle - left_bound + 1\n                curr = length * (length + 1) // 2\n                curr += pref_sum[right_bound + 1] - pref_sum[middle + 1]\n                result.append(curr)\n            else:\n                curr = pref_sum[right_bound + 1] - pref_sum[left_bound]\n                result.append(curr)\n        return result",
    "submit_ts": "1723951354",
    "subm_id": "1359769520"
}