{
    "username": "Easy\u5237\u5b50",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        n, m = len(board), len(board[0])\n        u = [[-9999999999] * m for _ in range(n)]\n        d = [[-9999999999] * m for _ in range(n)]\n        for i in range(n-1,-1,-1):\n            for j in range(m):\n                d[i][j] = board[i][j]\n                if i < n-1:\n                    d[i][j] = max(d[i][j], d[i+1][j])\n        for i in range(n):\n            for j in range(m):\n                u[i][j] = board[i][j]\n                if i > 0:\n                    u[i][j] = max(u[i][j], u[i-1][j])\n        \n        ret = -99999999999\n        for i in range(1, n-1):\n            for j in range(m):\n                r = board[i][j]\n                vu = []\n                vd = []\n                for k in range(m):\n                    if k == j:\n                        continue\n                    heappush(vu, (u[i-1][k],k))\n                    heappush(vd, (d[i+1][k],k))\n                    if len(vu) > 2:\n                        heappop(vu)\n                    if len(vd) > 2:\n                        heappop(vd)\n                \n                au, auk = heappop(vu)\n                au2, auk2 = heappop(vu)\n                ad, adk = heappop(vd)\n                ad2, adk2 = heappop(vd)\n                if auk2 != adk2:\n                    ret = max(ret, r + au2 + ad2)\n                else:\n                    ret = max(ret, r + max(au2+ad, au+ad2))\n                \n                # print(i,j,ret, ad, adk, ad2, adk2, au, auk, au2, auk2, r)\n        return ret\n        \n\n\n\n\n\n\n\n\n\n\n\n        mxdr = [[-9999999999] * m for _ in range(n)]\n        mxul = [[-9999999999] * m for _ in range(n)]\n        mxdl = [[-9999999999] * m for _ in range(n)]\n        mxur = [[-9999999999] * m for _ in range(n)] \n        for i in range(n-1,-1,-1):\n            for j in range(m-1,-1,-1):\n                mxdr[i][j] = board[i][j]\n                if i < n-1:\n                    mxdr[i][j] = max(mxdr[i][j], mxdr[i+1][j])\n                if j < m-1:\n                    mxdr[i][j] = max(mxdr[i][j], mxdr[i][j+1])\n        for i in range(n):\n            for j in range(m-1,-1,-1):\n                mxur[i][j] = board[i][j]\n                if i > 0:\n                    mxur[i][j] = max(mxur[i][j], mxur[i-1][j])\n                if j < m-1:\n                    mxur[i][j] = max(mxur[i][j], mxur[i][j+1])\n        for i in range(n):\n            for j in range(m):\n                mxul[i][j] = board[i][j]\n                if i > 0:\n                    mxul[i][j] = max(mxul[i][j], mxul[i-1][j])\n                if j > 0:\n                    mxul[i][j] = max(mxul[i][j], mxul[i][j-1])\n        for i in range(n-1,-1,-1):\n            for j in range(m):\n                mxdl[i][j] = board[i][j]\n                if i < n-1:\n                    mxdl[i][j] = max(mxdl[i][j], mxdl[i+1][j])\n                if j > 0:\n                    mxdl[i][j] = max(mxdl[i][j], mxdl[i][j-1])       \n        \n        ret = -999999999999\n        for i in range(n):\n            for j in range(m):\n                if (i == 0 and j == 0) or (i == 0 and j == m-1) or (i == n-1 and j == 0) or (i == n-1 and j == m-1):\n                    continue\n                if i == 0:\n                    ret = max(ret, board[i][j] + mxdl[1][j-1]+mxdr[1][j+1])\n                elif i == n-1:\n                    ret = max(ret, board[i][j] + mxul[n-2][j-1]+mxur[n-2][j+1])\n                elif j == 0:\n                    ret = max(ret, board[i][j] + mxur[i-1][1]+mxdr[i+1][1])\n                elif j == m-1:\n                    ret = max(ret, board[i][j] + mxul[i-1][1]+mxdl[i+1][1])\n                else:\n                    d = sorted([mxdl[i+1][j-1],mxdr[i+1][j+1],mxul[i-1][j-1],mxur[i-1][j+1]])\n                    ret = max(ret, board[i][j] + d[-1] + d[-2])\n                    print(d)\n                print(i,j,ret)\n        return ret",
    "submit_ts": "1723908271",
    "subm_id": "556330108"
}