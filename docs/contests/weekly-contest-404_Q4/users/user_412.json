{
    "username": "de_sync",
    "submission": "class Solution \n{\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) \n    {\n        int n = size(e1), m = size(e2);\n        map<int, vector<int>> mp1, mp2;\n\n        for (auto& e : e1) \n        {\n            mp1[e[0]].push_back(e[1]);\n            mp1[e[1]].push_back(e[0]);\n        }\n        for (auto& e : e2) \n        {\n            mp2[e[0]].push_back(e[1]);\n            mp2[e[1]].push_back(e[0]);\n        }\n\n        auto f = [&](int src, int& atMax, bool first)\n        {\n            if(first)\n            {\n                vector<int> dist(n + 1, -1);\n                queue<int> que; que.push(src);\n                dist[src] = 0,atMax = src;\n\n                while (size(que)) \n                {\n                    int node = que.front(); que.pop();\n                    for (int cur : mp1[node]) \n                    {\n                        if (dist[cur] == -1) \n                        {\n                            dist[cur] = dist[node] + 1; que.push(cur);\n                            if (dist[cur] > dist[atMax]) atMax = cur;\n                        }\n                    }\n                }\n                return dist[atMax];\n            }\n            else\n            {\n                vector<int> dist(m + 1, -1);\n\n                queue<int> que; que.push(src);\n                dist[src] = 0,atMax = src;\n\n                while (size(que)) \n                {\n                    int node = que.front(); que.pop();\n                    for (int cur : mp2[node]) \n                    {\n                        if (dist[cur] == -1) \n                        {\n                            dist[cur] = dist[node] + 1; que.push(cur);\n                            if (dist[cur] > dist[atMax]) atMax = cur;\n                        }\n                    }\n                }\n                return dist[atMax];\n            }\n        };\n\n        int ans1 = 0, ans2 = 0;\n        f(0, ans1, 1),f(0, ans2, 0);\n        int diam1 = f(ans1, ans1, 1), diam2 = f(ans2, ans2, 0);\n        \n        int ans = max(diam1, diam2), fh = (diam1 + 1) / 2, sh = (diam2 + 1) / 2;\n        return max(ans, fh + sh + 1);\n    }\n};\n",
    "submit_ts": "1719716669",
    "subm_id": "1304370819"
}