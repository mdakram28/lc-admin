{
    "username": "lzl124631x",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& A) {\n        int N = A.size();\n        long long ans = LLONG_MAX;\n        vector<array<int, 2>> X(N), Y(N);\n        for (int i = 0; i < N; ++i) {\n            auto &p = A[i];\n            X[i] = {p[0] + p[1], i};\n            Y[i] = {p[0] - p[1], i};\n        }\n        sort(begin(X), end(X));\n        sort(begin(Y), end(Y));\n        vector<int> m(N);\n        typedef long long LL;\n        for (int i = 0; i < N; ++i) {\n            m[Y[i][1]] = i;\n        }\n        auto getD = [&](vector<array<int, 2>> &X, int i) {\n            if (i == 0) {\n                return (long long)X.back()[0] - X[1][0];\n            }\n            if (i == N - 1) {\n                return (long long)X[N - 2][0] - X[0][0];\n            }\n            return (long long)X.back()[0] - X[0][0];\n        };\n        for (int i = 0; i < N; ++i) {\n            long long p = getD(X, i);\n            long long q = getD(Y, m[X[i][1]]);\n            ans = min(ans, max(p, q));\n        }\n        return ans;\n    }\n};"
}