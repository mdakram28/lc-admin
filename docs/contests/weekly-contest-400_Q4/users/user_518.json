{
    "username": "gaurdarpan",
    "submission": "class Solution {\npublic:\n    vector<int> toBinary(int x) {\n        vector<int> binRep;\n        int idx=0;\n        while (x>0) {\n            if (x&1) binRep.push_back(idx);\n            x >>= 1;\n            idx++;\n        }\n        return binRep;\n    }\n    int bitAnd(int l, map<int, int>& bitCount) {\n        int andVal = 0;\n        for (auto& [key, val]:bitCount) {\n            if (val == l) {\n                andVal |= (1<<key);\n            }\n        }\n        return andVal;\n    }\n    int minimumDifference(vector<int>& nums, int k) {\n        int currAnd = nums[0], i=0, j=0, n=nums.size();\n        int res = abs(currAnd-k);\n        map<int, int> bitCount;\n        for (int bit:toBinary(nums[0])) {\n            bitCount[bit]++;\n        }\n        while (j<n) {\n            if (currAnd > k || i>j) {\n                j++;\n                if (j>=n) break;\n                for (int bit:toBinary(nums[j])) {\n                    bitCount[bit]++;\n                }\n            }\n            else {\n                for (int bit:toBinary(nums[i])) {\n                    bitCount[bit]--;\n                    if (bitCount[bit]==0) {\n                        bitCount.erase(bit);\n                    }\n                }\n                i++;\n            }\n            currAnd = bitAnd(j-i+1, bitCount);\n            if (i<=j) {\n                res = min(res, abs(currAnd-k));\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717299300.0
}