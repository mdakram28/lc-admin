{
    "username": "technoid_22",
    "submission": "class Solution:\n    def numberOfAlternatingGroups(self, tileColors: List[int], groupSize: int) -> int:\n        groupsFound = 0\n        startIndex = 0\n        endIndex = 1\n        numTiles = len(tileColors)\n        \n        while endIndex < numTiles + groupSize and startIndex < numTiles:\n            tempEndIndex = endIndex\n            tempTileIndex = tempEndIndex % numTiles\n            \n            # Find the end of the current alternating group\n            while tileColors[tempTileIndex] != tileColors[(tempTileIndex - 1 + numTiles) % numTiles] and tempEndIndex < numTiles + groupSize - 1:\n                tempEndIndex += 1\n                tempTileIndex = tempEndIndex % numTiles\n            \n            # Calculate the number of groups of length `groupSize` that can be formed\n            groupsFound += max(tempEndIndex - startIndex - groupSize + 1, 0)\n            startIndex = tempEndIndex\n            endIndex = startIndex + 1\n        \n        return groupsFound\n",
    "submit_ts": "1720281364",
    "subm_id": "1311822459"
}