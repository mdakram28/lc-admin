{
    "username": "gangstar_dame29",
    "submission": "from math import sqrt\nfrom typing import List\n\nclass Solution:\n    def dfs_traverse(self, adj_list: List[List[int]], node: int, target_node1: int, target_node2: int, visited_nodes: List[bool]) -> bool:\n        if node == target_node1 or node == target_node2:\n            return True\n        visited_nodes[node] = True\n        for neighbor in adj_list[node]:\n            if not visited_nodes[neighbor]:\n                if self.dfs_traverse(adj_list, neighbor, target_node1, target_node2, visited_nodes):\n                    return True\n        return False\n\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        num_circles = len(circles)\n        adj_list = [[] for _ in range(num_circles + 4)]\n        for i in range(num_circles):\n            x, y, r = circles[i]\n            if y <= r:\n                adj_list[num_circles + 1].append(i)\n                adj_list[i].append(num_circles + 1)\n            if Y - y <= r:\n                adj_list[num_circles + 3].append(i)\n                adj_list[i].append(num_circles + 3)\n            if x <= r:\n                adj_list[num_circles].append(i)\n                adj_list[i].append(num_circles)\n            if X - x <= r:\n                adj_list[num_circles + 2].append(i)\n                adj_list[i].append(num_circles + 2)\n            for j in range(i + 1, num_circles):\n                x2, y2, r2 = circles[j]\n                distance = sqrt((x - x2) ** 2 + (y - y2) ** 2)\n                if r + r2 >= distance:\n                    adj_list[i].append(j)\n                    adj_list[j].append(i)\n\n        visited_nodes = [False] * (num_circles + 4)\n        path_blocked = self.dfs_traverse(adj_list, num_circles, num_circles + 1, num_circles + 2, visited_nodes) | self.dfs_traverse(adj_list, num_circles + 3, num_circles + 2, num_circles + 1, visited_nodes)\n\n        return not path_blocked\n",
    "submit_ts": "1722137433",
    "subm_id": "1335763651"
}