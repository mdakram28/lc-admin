{
    "username": "forwarding7",
    "submission": "\nclass Solution {\n  public:\n    vector<int> timeTaken(vector<vector<int>> &edges) {\n        int n = static_cast<int>(edges.size() + 1);\n\n        vector<int> parents(n);\n        vector<int> times(n, 0);\n        vector<int> parent_dep(n, 0);\n        vector<int> second_p(n, -1);\n        vector<vector<pair<int, int>>> dp(n);\n        for (const auto &edge : edges) {\n            dp[edge[0]].emplace_back(edge[1], 0);\n            dp[edge[1]].emplace_back(edge[0], 0);\n        }\n\n        function<int(int, int)> dfs = [&](int parent, int node) {\n            int r = 0;\n            parents[node] = parent;\n            for (auto &neighbour : dp[node]) {\n                if (neighbour.first == parent) {\n                    continue;\n                }\n                neighbour.second = dfs(node, neighbour.first) + 1;\n                if (neighbour.first % 2 == 0) {\n                    neighbour.second += 1;\n                }\n\n                r = max(r, neighbour.second);\n            }\n\n            times[node] = r;\n            return r;\n        };\n\n        dfs(-1, 0);\n\n        function<void(int)> findp = [&](int node) {\n            auto pa = parents[node];\n            auto pd = times[node] + (node % 2 == 0 ? 2 : 1);\n\n            if (pa >= 0) {\n                if (pd < times[pa]) {\n                    pd = times[pa] + (pa % 2 == 0 ? 2 : 1);\n                } else {\n                    if (second_p[pa] == -1) {\n                        auto maxparent = parent_dep[pa];\n                        for (auto &[son, num] : dp[pa]) {\n                            if (son != node) {\n                                maxparent = max(maxparent, num);\n                            }\n                        }\n                        pd = maxparent + (pa % 2 == 0 ? 2 : 1);\n                        second_p[pa] = pd;\n                    } else {\n                        pd = second_p[pa];\n                    }\n                }\n\n                if (pd > times[node]) {\n                    times[node] = pd;\n                }\n                parent_dep[node] = pd;\n            }\n            for (auto &[son, _] : dp[node]) {\n                if (son != pa) {\n                    findp(son);\n                }\n            }\n        };\n        findp(0);\n        return times;\n    }\n};\n",
    "submit_ts": "1722700297",
    "subm_id": "1343237572"
}