{
    "username": "mohdquamartyagi",
    "submission": "import java.util.Arrays;\nimport java.util.Collections;\n\nclass Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        long res = 0;\n        \n        // Convert int[] to Integer[] for sorting in reverse order\n        Integer[] horizontalCosts = Arrays.stream(horizontalCut).boxed().toArray(Integer[]::new);\n        Integer[] verticalCosts = Arrays.stream(verticalCut).boxed().toArray(Integer[]::new);\n        \n        // Sort the horizontal and vertical costs in reverse order\n        Arrays.sort(horizontalCosts, Collections.reverseOrder());\n        Arrays.sort(verticalCosts, Collections.reverseOrder());\n        \n        // Initialize current width and height as 1\n        int hzntl = 1, vert = 1;\n        \n        // Loop until one or both cost arrays are processed\n        int i = 0, j = 0;\n        while (i < m - 1 && j < n - 1) {\n            if (horizontalCosts[i] > verticalCosts[j]) {\n                res += (long) horizontalCosts[i] * vert;\n                hzntl++;\n                i++;\n            } else {\n                res += (long) verticalCosts[j] * hzntl;\n                vert++;\n                j++;\n            }\n        }\n        \n        // Loop for remaining horizontal array, if any\n        while (i < m - 1) {\n            res += (long) horizontalCosts[i++] * vert;\n        }\n        \n        // Loop for remaining vertical array, if any\n        while (j < n - 1) {\n            res += (long) verticalCosts[j++] * hzntl;\n        }\n        \n        return res;\n    }\n}\n\n\n",
    "submit_ts": "1720926138",
    "subm_id": "1320277122"
}