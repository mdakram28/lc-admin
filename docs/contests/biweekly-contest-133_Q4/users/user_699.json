{
    "username": "saurav0_0",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int mpow(int base, int exp);\n    void ipgraph(int n, int m);\n    void dfs(int u, int par);\n    int MOD = 1e9 + 7;\n    int maxi = 400;\n    const int N = 3e5, M = N;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int,int> mp;\n        for (auto& req : requirements) {\n            mp[req[0] + 1] = req[1]; \n        }\n        vector<vector<long long>> dp(n + 1, vector<long long>(maxi + 1, 0));\n        dp[0][0] = 1;\n        int l = 1;\n        while (l <= n) {\n            int curr = 0;\n            while (curr <= maxi) {\n                int next = 0;\n                while (next < l) {\n                    int prev = curr - next;\n                    if (prev >= 0) {\n                        dp[l][curr] = (dp[l][curr] + dp[l - 1][prev]) % MOD;\n                    }\n                    next++;\n                }\n                curr++;\n            }\n            if (mp.count(l) > 0) {\n                int ans = mp[l];\n                int curr = 0;\n                while (curr <= maxi) {\n                    if (curr != ans) {\n                        dp[l][curr] = 0;\n                    }\n                    curr++;\n                }\n            }\n            l++;\n        }\n\n        long long res = 0;\n        int curr = 0;\n        while (curr <= maxi) {\n            res = (res + dp[n][curr]) % MOD;\n            curr++;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1719071015.0
}