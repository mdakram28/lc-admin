{
    "username": "Ari-Ghosh",
    "submission": "class TrieNode{\npublic:\n    unordered_map<char, TrieNode*> child;\n    vector<pair<int, int>> endInd;\n};\n\nclass Trie{\npublic:\n    TrieNode* root;\n\n    Trie(){\n        root = new TrieNode();\n    }\n\n    void insert(string word, int ind, int cost){\n        TrieNode* node = root;\n        \n        for (char ch : word) {\n            if (!node -> child.count(ch))\n                node -> child[ch] = new TrieNode();\n                \n            node = node -> child[ch];\n        }\n        node -> endInd.push_back({ind, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        \n        vector<int> dp(n + 1, INT_MAX);\n        \n        dp[0] = 0;\n\n        \n        for (int i = 0; i < words.size(); i++)\n            trie.insert(words[i], i, costs[i]);\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX)\n                continue;\n\n            TrieNode* node = trie.root;\n            \n            for (int j = i; j < n; j++) {\n                if (!node -> child.count(target[j]))\n                    break;\n                \n                node = node -> child[target[j]];\n                \n                for (auto& p : node -> endInd){\n                    int len = words[p.first].size();\n                    \n                    if (i + len <= n)\n                        dp[i + len] = min(dp[i + len], dp[i] + p.second);\n                }\n            }\n        }\n        if(dp[n] != INT_MAX)\n            return dp[n];\n        \n        return -1;\n    }\n};",
    "submit_ts": "1720323270",
    "subm_id": "1312371504"
}