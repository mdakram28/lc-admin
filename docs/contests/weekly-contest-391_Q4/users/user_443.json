{
    "username": "hdchen",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        int n = points.length, min = Integer.MAX_VALUE;\n        TreeMap<Integer, Integer> xpos = new TreeMap(), ypos = new TreeMap();\n        for (int i = 0; i < n; ++i) {\n            int x = points[i][0], y = points[i][1];\n            points[i][0] = x + y;\n            points[i][1] = y - x;\n            xpos.put(points[i][0], xpos.getOrDefault(points[i][0], 0) + 1);\n            ypos.put(points[i][1], ypos.getOrDefault(points[i][1], 0) + 1);\n        }\n        for (int i = 0; i < n; ++i) {\n            xpos.put(points[i][0], xpos.get(points[i][0]) - 1);\n            ypos.put(points[i][1], ypos.get(points[i][1]) - 1);\n            if (0 == xpos.getOrDefault(points[i][0], 0)) xpos.remove(points[i][0]);\n            if (0 == ypos.getOrDefault(points[i][1], 0)) ypos.remove(points[i][1]);\n            min = Math.min(min, Math.max(xpos.lastKey() - xpos.firstKey(), ypos.lastKey() - ypos.firstKey()));\n            xpos.put(points[i][0], xpos.getOrDefault(points[i][0], 0) + 1);\n            ypos.put(points[i][1], ypos.getOrDefault(points[i][1], 0) + 1);\n        }\n        return min;\n    }\n}"
}