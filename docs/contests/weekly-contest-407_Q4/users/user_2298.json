{
    "username": "birenamanta",
    "submission": "class Solution {\n    public long minimumOperations(int[] arr, int[] target) {\n        int n = arr.length;\n        int[] difference = new int[n];\n        \n        // Compute the difference array\n        for (int i = 0; i < n; i++) {\n            difference[i] = target[i] - arr[i];\n        }\n        \n        // Initialize the minimum operations counter\n        long minOperations = Math.abs(difference[0]);\n        int previous = difference[0];\n        \n        for (int i = 1; i < n; i++) {\n            int current = difference[i];\n            \n            // If the sign is the same, only consider the absolute difference\n            if ((previous >= 0 && current >= 0) || (previous <= 0 && current <= 0)) {\n                if (Math.abs(current) > Math.abs(previous)) {\n                    minOperations += Math.abs(current) - Math.abs(previous);\n                }\n            } else {\n                minOperations += Math.abs(current);\n            }\n            \n            // Update previous to current\n            previous = current;\n        }\n        \n        return minOperations;\n    }\n}",
    "submit_ts": "1721534222",
    "subm_id": "1328026108"
}