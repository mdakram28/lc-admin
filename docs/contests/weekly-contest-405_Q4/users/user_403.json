{
    "username": "VIIRAJ",
    "submission": "#include <vector>\n#include <string>\n#include <limits>\n#include <memory>\n#include <unordered_map>\n\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, unique_ptr<TrieNode>> children;\n    int cost = numeric_limits<int>::max();  // Store minimum cost of the word ending here\n};\n\nclass Solution {\n    unique_ptr<TrieNode> root = make_unique<TrieNode>();\n\n    void insertWord(const string& word, int cost) {\n        auto node = root.get();\n        for (auto it = word.rbegin(); it != word.rend(); ++it) {\n            char c = *it;\n            if (!node->children.count(c)) {\n                node->children[c] = make_unique<TrieNode>();\n            }\n            node = node->children[c].get();\n        }\n        node->cost = min(node->cost, cost);  // Store the minimum cost to use this word\n    }\n\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        // Build the trie with reversed words\n        for (size_t i = 0; i < words.size(); ++i) {\n            insertWord(words[i], costs[i]);\n        }\n\n        int n = target.size();\n        vector<int> dp(n + 1, numeric_limits<int>::max());\n        dp[0] = 0;\n\n        for (int i = 1; i <= n; ++i) {\n            TrieNode* node = root.get();\n            for (int j = i; j > 0; --j) {\n                char c = target[j - 1];\n                if (!node->children.count(c)) break;\n                node = node->children[c].get();\n                if (node->cost != numeric_limits<int>::max() && dp[j - 1] != numeric_limits<int>::max()) {\n                    dp[i] = min(dp[i], dp[j - 1] + node->cost);\n                }\n            }\n        }\n\n        return dp[n] == numeric_limits<int>::max() ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720320893",
    "subm_id": "1312307589"
}