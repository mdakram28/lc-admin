{
    "username": "sumit1906",
    "submission": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <climits>\nusing namespace std;\n\n#define MAX_INT32 INT32_MAX\n\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int size;\n\n    SegmentTree(vector<int>& arr) {\n        size = arr.size();\n        tree.resize(4 * size);\n        construct(arr, 0, 0, size - 1);\n    }\n\n    void construct(vector<int>& arr, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            construct(arr, 2 * node + 1, start, mid);\n            construct(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int left, int right) {\n        return retrieve(0, 0, size - 1, left, right);\n    }\n\n    int retrieve(int node, int start, int end, int left, int right) {\n        if (right < start || end < left) {\n            return MAX_INT32;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = retrieve(2 * node + 1, start, mid, left, right);\n        int rightResult = retrieve(2 * node + 2, mid + 1, end, left, right);\n        return leftResult & rightResult;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& numbers, int target) {\n        int n = numbers.size();\n        SegmentTree segmentTree(numbers);\n        int answer = MAX_INT32;\n        int idx = 0;\n        while (idx < n) {\n            int left = idx - 1;\n            int right = n - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (segmentTree.query(idx, mid) >= target) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != idx - 1) {\n                answer = min(answer, abs(segmentTree.query(idx, left) - target));\n            }\n            answer = min(answer, abs(target - segmentTree.query(idx, right)));\n            idx++;\n        }\n        return answer;\n    }\n};\n",
    "submit_ts": 1717300202.0
}