{
    "username": "cosmic-janitor",
    "submission": "class trie {\npublic:\n    struct trieNode {\n        unordered_map<char, trieNode*> children;\n        int minCost;\n        trieNode() : minCost(INT_MAX) {}\n    };\n    trieNode* root;\n\npublic:\n    trie() : root(new trieNode()) {}\n\n    void insert(string word, int cost) {\n        trieNode* node = root;\n        for (char c : word) {\n            auto it = node->children.find(c);\n            if (it == node->children.end()) {\n                node->children[c] = new trieNode();\n            }\n            node = node->children[c];\n        }\n        node->minCost = min(node->minCost, cost);\n    }\n\n    int solver(string target) {\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < target.size(); i++) {\n            if (dp[i] == INT_MAX) continue;\n\n            trieNode* node = root;\n            for (int j = i; j < target.size(); j++) {\n                auto it = node->children.find(target[j]);\n                if (it == node->children.end()) break;\n                node = it->second;\n                if (node->minCost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[target.size()] == INT_MAX ? -1 : dp[target.size()];\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        return trie.solver(target);\n    }\n};",
    "submit_ts": "1720324358",
    "subm_id": "1312397579"
}