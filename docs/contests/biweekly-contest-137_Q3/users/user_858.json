{
    "username": "nine",
    "submission": "public class Solution {\n        public long MaximumValueSum(int[][] board)\n        {\n            TopN<(int col, int val)>[] topns = new TopN<(int col, int val)>[board.Length];\n            for (int i = 0; i < board.Length; i++)\n            {\n                topns[i] = new TopN<(int col, int val)>(3, (a, b) => a.val == b.val ? (a.col - b.col) : (b.val - a.val));\n            }\n            for (int i = 0; i < board.Length; i++)\n            {\n                for (int j = 0; j < board[i].Length; j++)\n                {\n                    topns[i].Add((j, board[i][j]));\n                }\n            }\n            HashSet<int> set = new HashSet<int>(board.Length);\n            return dfs(0, 3);\n            long dfs(int i,int cnt)\n            {\n                if (cnt == 0)\n                    return 0;\n                if (i == board.Length)\n                    return long.MinValue / 2;\n                long ans = dfs(i + 1, cnt);\n                for (int index = 0; index < 3; index++)\n                {\n                    if (!set.Contains(topns[i][index].col))\n                    {\n                        set.Add(topns[i][index].col);\n                        ans = Math.Max(ans, dfs(i + 1, cnt - 1) + topns[i][index].val);\n                        set.Remove(topns[i][index].col);\n                    }\n                }\n                return ans;\n            }\n        }\n\n    public class TopN<T>\n    {\n        private readonly Comparison<T> comparison;\n        private T[] array;\n        private readonly int n;\n        private int length;\n        public int Count { get => length; }\n        public T this[int i] { get => array[i]; }\n        public TopN(int n) : this(n, Comparer<T>.Default.Compare)\n        {\n        }\n        public TopN(int n, Comparison<T> comparison)\n        {\n            this.n = n;\n            this.comparison = comparison;\n            array = new T[n];\n            length = 0;\n        }\n        public void Add(T val)\n        {\n            if (length == 0)\n            {\n                array[length++] = val;\n            }\n            else\n            {\n                int index = length - 1;\n                while (index >= 0 && comparison.Invoke(val, array[index]) <= 0)\n                {\n                    index--;\n                }\n                if (index != n - 1)\n                {\n                    if (length != n)\n                    {\n                        length++;\n                    }\n                    InsertBefore(index, val);\n                }\n            }\n        }\n        private void InsertBefore(int index, T val)\n        {\n            for (int i = length - 1; i > index + 1; i--)\n            {\n                array[i] = array[i - 1];\n            }\n            array[index + 1] = val;\n        }\n        public T[] ToArray()\n        {\n            return array.Take(length).ToArray();\n        }\n\n    }\n\n}",
    "submit_ts": "1723907744",
    "subm_id": "556327229"
}