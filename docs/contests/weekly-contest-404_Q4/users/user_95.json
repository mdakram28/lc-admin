{
    "username": "iit2021256",
    "submission": "class Solution {\npublic:\n    int find(vector<vector<int>> &adj,int n,vector<int> &C){\n        \n        queue<int> q;\n        int count = 0;\n        \n        for(auto i = 0;i<n;i++){\n            if(C[i]==1){\n                q.push(i);\n            }\n        }\n        int U = 0;\n        while(!q.empty()){\n            int s = q.size();\n            count++;\n            U = 0;\n            while(s--){\n                int ind = q.front();\n                q.pop();\n                U++;\n                for(auto &val:adj[ind]){\n                    C[val]--;\n                    if(C[val]==1){\n                        q.push(val);\n                    }\n                }\n            }\n        }\n        \n        \n        if(U==1){\n            return count-1;\n        }\n        \n        return count*(-1);\n        \n        \n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        int n = e1.size()+1,m = e2.size()+1;\n        vector<vector<int>> adj1(n),adj2(m);\n        vector<int> C1(n,0),C2(m,0);\n        \n        for(auto &val:e1){\n            adj1[val[0]].push_back(val[1]);\n            adj1[val[1]].push_back(val[0]);\n            C1[val[0]]++;\n            C1[val[1]]++;\n        }\n        for(auto &val:e2){\n            adj2[val[0]].push_back(val[1]);\n            adj2[val[1]].push_back(val[0]);\n            C2[val[0]]++;\n            C2[val[1]]++;\n        }\n        \n        int A = find(adj1,n,C1);\n        int B = find(adj2,m,C2);\n        int ans = 0;\n        if(A<0){\n            A*=-1;\n            ans = max(ans,A*2-1);\n        }\n        else{\n            ans = max(ans,A*2);\n        }\n        \n        if(B<0){\n            B*=-1;\n            ans = max(ans,B*2-1);\n        }\n        else{\n            ans = max(ans,B*2);\n        }\n        \n        ans = max(ans,A+B+1);\n        \n        return ans;\n        \n        \n    }\n};",
    "submit_ts": "1719716715",
    "subm_id": "1304372065"
}