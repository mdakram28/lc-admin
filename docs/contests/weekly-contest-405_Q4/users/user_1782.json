{
    "username": "SimardeepSingh1450",
    "submission": "class Trie{\n    public:\n    Trie* links[26];\n    vector<pair<int,int>> costInd;//cost and index for the word ending at this node\n    Trie(){\n        for(int i=0;i<26;i++){\n            this->links[i] = NULL;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    Trie* root = new Trie();\n\n    void insertWord(string s,int cost,int ind){\n        Trie* curr = root;\n        for(int i=0;i<s.length();i++){\n            if(curr->links[s[i]-'a']==NULL){\n                curr->links[s[i]-'a'] = new Trie();\n            }\n            curr = curr->links[s[i]-'a'];\n        }\n        curr->costInd.push_back({cost,ind});\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n =  target.size();\n        //dp for min cost till a specific index\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n\n        //inserting the words in trie\n        for(int i=0;i<words.size();i++){\n            insertWord(words[i],costs[i],i);\n        }\n\n        for(int i=0;i<n;i++){\n            //not possible when INT_MAX\n            if(dp[i]==INT_MAX) continue;\n\n            Trie* curr = root;\n            for(int j=i;j<n;j++){\n                if(curr->links[target[j]-'a']==NULL) break;\n                curr = curr->links[target[j]-'a'];\n\n                for(auto it:curr->costInd){\n                    int len = words[it.second].size();\n                    if(i + len <= n){\n                        dp[i+len] = min(dp[i+len],dp[i]+it.first);\n                    }\n                }\n            }\n        }\n\n        return dp[n]==INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324456",
    "subm_id": "1312399937"
}