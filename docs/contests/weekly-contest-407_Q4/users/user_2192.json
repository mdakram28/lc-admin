{
    "username": "Arul_2005",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        long[] diff = new long[n];\n        \n        // Compute the differences\n        for (int i = 0; i < n; i++) {\n            diff[i] = (long) target[i] - nums[i];\n        }\n        \n        long totalOperations = 0;\n        long currentSegmentDiff = 0;\n        \n        for (int i = 0; i < n; i++) {\n            // For the first element or contiguous segments with the same sign\n            if (i == 0 || (diff[i - 1] > 0 && diff[i] > 0) || (diff[i - 1] < 0 && diff[i] < 0)) {\n                long additionalOperations = Math.abs(diff[i]) - Math.abs(currentSegmentDiff);\n                if (additionalOperations > 0) {\n                    totalOperations += additionalOperations;\n                }\n                currentSegmentDiff = diff[i];\n            } else {\n                totalOperations += Math.abs(diff[i]);\n                currentSegmentDiff = diff[i];\n            }\n        }\n        \n        return totalOperations;\n    }\n}\n",
    "submit_ts": "1721532590",
    "subm_id": "1327989473"
}