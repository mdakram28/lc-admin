{
    "username": "Andwerp",
    "submission": "class Solution {\npublic:\n    int do_bfs(int n, vector<vector<int>>& c) {\n        vector<int> dist(n, 1e9);\n        queue<int> q;\n        q.push(0);\n        dist[0] = 0;\n        while(q.size() != 0){\n            int cur = q.front();\n            q.pop();\n            for(int i = 0; i < c[cur].size(); i++){\n                int next = c[cur][i];\n                if(dist[cur] + 1 < dist[next]) {\n                    dist[next] = dist[cur] + 1;\n                    q.push(next);\n                }\n            }\n        }\n        int ind = 0;\n        for(int i = 0; i < n; i++){\n            if(dist[i] > dist[ind]) {\n                ind = i;\n            }\n        }\n        dist = vector<int>(n, 1e9);\n        q.push(ind);\n        dist[ind] = 0;\n        while(q.size() != 0){\n            int cur = q.front();\n            q.pop();\n            for(int i = 0; i < c[cur].size(); i++){\n                int next = c[cur][i];\n                if(dist[cur] + 1 < dist[next]) {\n                    dist[next] = dist[cur] + 1;\n                    q.push(next);\n                }\n            }\n        }\n        int ans = 0;\n        for(int i = 0; i < n; i++){\n            ans = max(ans, dist[i]);\n        }\n        return ans;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1;\n        int n2 = edges2.size() + 1;\n        vector<vector<int>> c1(n1, vector<int>(0)), c2(n2, vector<int>(0));\n        for(int i = 0; i < edges1.size(); i++){\n            int u = edges1[i][0];\n            int v = edges1[i][1];\n            c1[u].push_back(v);\n            c1[v].push_back(u);\n        }\n        for(int i = 0; i < edges2.size(); i++){\n            int u = edges2[i][0];\n            int v = edges2[i][1];\n            c2[u].push_back(v);\n            c2[v].push_back(u);\n        }\n        int d1 = do_bfs(n1, c1);\n        int d2 = do_bfs(n2, c2);\n        int ans = max(d1, d2);\n        ans = max(ans, (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n        return ans;\n    }\n};",
    "submit_ts": "1719716184",
    "subm_id": "1304357337"
}