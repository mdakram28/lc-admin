{
    "username": "coderchamp07",
    "submission": "class Solution {\npublic:\n    int dep(vector<vector<int>>& g, int node, int parent) {\n        int ans = 0;\n        for(int child : g[node]) {\n            if(child != parent)\n                ans = max(ans, dep(g, child, node));\n        }\n        return 1 + ans;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& e1, vector<vector<int>>& e2) {\n        \n        function<pair<int, int>(vector<vector<int>>&)> helper = [&](vector<vector<int>>& edges) -> pair<int, int> {\n            if(edges.size() == 0)\n                return {0, 0};\n            int n = edges.size() + 1;\n            \n            vector<int> indeg(n, 0);\n            vector<vector<int>> g(n);\n            for(auto& e : edges) {\n                g[e[0]].push_back(e[1]);\n                g[e[1]].push_back(e[0]);\n                indeg[e[0]]++;\n                indeg[e[1]]++;\n            }\n            \n            queue<int> q;\n            for(int i = 0; i < n; i++) {\n                if(indeg[i] == 1)\n                    q.push(i);\n            }\n            \n            int d = 0;\n            int lastLevelNodes = 0;\n            int lastNode = 0;\n            while(q.size()) {\n                int s = q.size();\n                lastLevelNodes = s;\n                lastNode = q.front();\n                while(s--) {\n                    int node = q.front();\n                    q.pop();\n                    \n                    for(int parent : g[node]) {\n                        indeg[parent]--;\n                        if(indeg[parent] == 1)\n                            q.push(parent);\n                    }\n                }\n                d++;\n            }\n            int mx1 = 0;\n            int mx2 = 0;\n            for(int child : g[lastNode]) {\n                int d = dep(g, child, lastNode);\n                if(d >= mx1) {\n                    mx2 = mx1;\n                    mx1 = d;\n                }\n                else if(d > mx2)\n                    mx2 = d;\n            }\n            \n            return {d - 1 + (lastLevelNodes > 1), mx1 + mx2};\n        };\n        \n        pair<int, int> a1 = helper(e1);\n        pair<int, int> a2 = helper(e2);\n        \n        return max(max(a1.second, a2.second), a1.first + a2.first + 1);\n    }\n};",
    "submit_ts": 1719719580.0
}