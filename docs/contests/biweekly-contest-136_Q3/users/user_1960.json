{
    "username": "ansh_k26",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        int m = grid.length, n = grid[0].length;\n        int res = 0;\n        \n        \n        for (int i = 0; i < m / 2; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int[] count = new int[2]; // no. of 0s and 1s\n                count[grid[i][n - j - 1]]++;\n                count[grid[i][j]]++;\n                count[grid[m - i - 1][j]]++;\n                count[grid[m - i - 1][n - j - 1]]++;\n                \n                int max = Math.max(count[0], count[1]);\n                res = res + 4 - max;\n                \n            }\n        }\n        \n        \n        \n        int middle = 0;\n        boolean flag = false;\n        if (m % 2 == 1) {\n            for (int j = 0; j < n / 2; j++) {\n                if (grid[m / 2][j] != grid[m / 2][n - j - 1]) {\n                    res++;\n                    flag = true;\n                } else {\n                    if (grid[m / 2][j] == 1) {\n                        middle++;\n                    }\n                }\n            }\n        }\n        \n        if (n % 2 == 1) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][n / 2] != grid[m - i - 1][n / 2]) {\n                    res++;\n                    flag = true;\n                } else {\n                    if (grid[i][n / 2] == 1) {\n                        middle++;\n                    }\n                }\n            }\n        }\n        \n        // central element if it exist\n        if (m % 2 == 1 && n % 2 == 1) {\n            if (grid[m / 2][n / 2] == 1)\n                res += 1;\n        }\n        \n        if (!flag && middle % 2 == 1) {\n            res += 2;\n        }\n        \n        \n        return res;\n    }\n}",
    "submit_ts": "1722700095",
    "subm_id": "1343231559"
}