{
    "username": "yangxm",
    "submission": "constexpr int MAX = 100010;\nconstexpr int INF = 0x3F3F3F3F;\n\nconstexpr int LL(int x) { return x * 2; }\nconstexpr int RR(int x) { return x * 2 + 1; }\n\nstruct Node {\n  int w, l1, l2, r1, r2, sum;\n};\n\nNode Add(const Node& a, const Node& b) {\n  Node ret;\n  ret.w = a.w + b.w;\n  ret.l1 = a.l1;\n  ret.l2 = a.w == 1 ? b.l1 : a.l2;\n  ret.r1 = b.r1;\n  ret.r2 = b.w == 1 ? a.l1 : b.r2;\n  int d1 = a.r1 > a.r2 && a.r1 > b.l1;\n  int d2 = b.l1 > b.l2 && b.l1 > a.r1;\n  ret.sum = a.sum + b.sum + d1 + d2;\n  return ret;\n}\n\nstruct SegmentTree {\n  Node c[MAX << 2];\n  \n  void Build(int x, int p, int q, const int* a) {\n    int w = q - p;\n    if (w == 1) {\n      c[x] = {1, a[p], INF, a[p], INF, 0};\n      return;\n    }\n    int mid = p + w / 2;\n    Build(LL(x), p, mid, a);\n    Build(RR(x), mid, q, a);\n    c[x] = Add(c[LL(x)], c[RR(x)]);\n  }\n  \n  void Update(int x, int p, int q, int k, int v) {\n    int w = q - p;\n    if (w == 1) {\n      c[x] = {1, v, INF, v, INF, 0};\n      return;\n    }\n    int mid = p + w / 2;\n    if (k < mid) {\n      Update(LL(x), p, mid, k, v);\n    } else {\n      Update(RR(x), mid, q, k, v);\n    }\n    c[x] = Add(c[LL(x)], c[RR(x)]);\n  }\n  \n  Node Query(int x, int p, int q, int l, int r) const {\n    if (l <= p && r >= q) {\n      return c[x];\n    }\n    int w = q - p, mid = p + w / 2;\n    Node ll = {0, INF, INF, INF, INF, 0};\n    Node rr = {0, INF, INF, INF, INF, 0};\n    if (l < mid) {\n      ll = Query(LL(x), p, mid, l, r);\n    }\n    if (r > mid) {\n      rr = Query(RR(x), mid, q, l, r);\n    }\n    if (ll.w == 0) {\n      return rr;\n    }\n    if (rr.w == 0) {\n      return ll;\n    }\n    return Add(ll, rr);\n  }\n} st;\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n      int n = nums.size(), m = queries.size();\n      st.Build(1, 0, n, nums.data());\n      vector<int> ret;\n      ret.reserve(m);\n      for (const auto& q : queries) {\n        int t = q[0];\n        if (t == 1) {\n          int l = q[1], r = q[2];\n          Node cur = st.Query(1, 0, n, l, r + 1);\n          ret.push_back(cur.sum);\n        } else {\n          int k = q[1], v = q[2];\n          st.Update(1, 0, n, k, v);\n        }\n      }\n      return ret;\n    }\n};",
    "submit_ts": 1718508265.0
}