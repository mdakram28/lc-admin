{
    "username": "py-is-best-lang",
    "submission": "import typing\nfrom typing import *\nimport sortedcontainers\n\n\nclass FenwickTree:\n    \"\"\"Reference: https://en.wikipedia.org/wiki/Fenwick_tree\"\"\"\n\n    def __init__(self, n: int = 0) -> None:\n        self._n = n\n        self.data = [0] * n\n\n    def add(self, p: int, x: typing.Any) -> None:\n        assert 0 <= p < self._n\n\n        p += 1\n        while p <= self._n:\n            self.data[p - 1] += x\n            p += p & -p\n\n    def sum(self, left: int, right: int) -> typing.Any:\n        assert 0 <= left <= right <= self._n\n\n        return self._sum(right) - self._sum(left)\n\n    def _sum(self, r: int) -> typing.Any:\n        s = 0\n        while r > 0:\n            s += self.data[r - 1]\n            r -= r & -r\n\n        return s\n\n\nclass Solution:\n    def numberOfAlternatingGroups(\n        self, colors: List[int], queries: List[List[int]]\n    ) -> List[int]:\n        n = len(colors)\n        ans = DefaultDict(int)\n        ss = sortedcontainers.SortedList(\n            [i for i in range(n) if colors[i - 1] == colors[i]]\n        )\n        ftk, ftb = FenwickTree(n + 2), FenwickTree(n + 2)\n\n        def change(l, r, sign):\n            x = r - l\n            if x <= 0:\n                x += n\n            ftk.add(1, -sign)\n            ftk.add(x + 1, sign)\n            ftb.add(1, (x + 1) * sign)\n            ftb.add(x + 1, (x + 1) * -sign)\n\n        if len(ss) == 0:\n            ftb.add(1, n)\n            ftb.add(n + 1, -n)\n        else:\n            for i in range(len(ss)):\n                change(ss[i - 1], ss[i], 1)\n\n        def add(i):\n            if len(ss) == 0:\n                ftb.add(1, -n)\n                ftb.add(n + 1, n)\n                ss.add(i)\n                change(ss[0], ss[0], 1)\n            else:\n                ss.add(i)\n                j = ss.bisect_left(i)\n                prev = ss[j - 1]\n                next = ss[(j + 1) % len(ss)]\n                change(prev, next, -1)\n                change(prev, i, 1)\n                change(i, next, 1)\n\n        def sub(i):\n            if len(ss) == 1:\n                ftb.add(1, n)\n                ftb.add(n + 1, -n)\n                change(ss[0], ss[0], -1)\n                ss.pop(0)\n            else:\n                j = ss.bisect_left(i)\n                prev = ss[j - 1]\n                next = ss[(j + 1) % len(ss)]\n                change(prev, next, 1)\n                change(prev, i, -1)\n                change(i, next, -1)\n                ss.pop(j)\n\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                size = q[1]\n                res.append(ftk.sum(1, size + 1) * size + ftb.sum(1, size + 1))\n            else:\n                id, c = q[1], q[2]\n                if colors[id] == colors[id - 1]:\n                    sub(id)\n                if colors[id] == colors[(id + 1) % n]:\n                    sub((id + 1) % n)\n                colors[id] = c\n                if colors[id] == colors[id - 1]:\n                    add(id)\n                if colors[id] == colors[(id + 1) % n]:\n                    add((id + 1) % n)\n        return res\n\n\nans = Solution().numberOfAlternatingGroups([0, 1, 1, 0, 1], [[2, 1, 0], [1, 4]])\nprint(ans)\n",
    "submit_ts": "1722741694",
    "subm_id": "552339837"
}