{
    "username": "himawari1918",
    "submission": "class Solution {\npublic:\n    using Key = tuple<int, int, bool>;\n    \n    struct KeyHash {\n        size_t operator()(const Key& k) const {\n            return get<0>(k) ^ get<1>(k) ^ get<2>(k);\n        }\n    };\n\n    long long solve(int i, int jump, int k, bool flag, std::unordered_map<Key, long long, KeyHash>& dp) {\n        if (i - 1 > k) {\n            return 0;\n        }\n\n        if (i == k && jump > 2) {\n            return 1;\n        }\n\n        Key t = std::make_tuple(i, jump, flag);\n        if (dp.find(t) != dp.end()) {\n            return dp[t];\n        }\n\n        if (i == k) {\n            long long x = solve(i + (1 << jump), jump + 1, k, false, dp) + 1;\n            long long y = 0;\n            if (!flag && i != 0) {\n                y = solve(i - 1, jump, k, true, dp);\n            }\n            dp[t] = x + y;\n            return x + y;\n        }\n\n        long long x = solve(i + (1 << jump), jump + 1, k, false, dp);\n        long long y = 0;\n        if (!flag && i != 0) {\n            y = solve(i - 1, jump, k, true, dp);\n        }\n        dp[t] = x + y;\n        return x + y;\n    }\n\n    int waysToReachStair(int k) {\n        unordered_map<Key, long long, KeyHash> dp;\n        return solve(1, 0, k, false, dp);\n    }\n};",
    "submit_ts": "1716089476",
    "subm_id": "1261843237"
}