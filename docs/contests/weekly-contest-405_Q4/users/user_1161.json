{
    "username": "lyi29512",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        int n = target.length();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[0] = 0; \n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] != LLONG_MAX) {\n                TrieNode* node = trie.root;\n                for (int j = i; j < n; ++j) {\n                    char c = target[j];\n                    if (node->children.find(c) == node->children.end()) {\n                        break; // No matching prefix in the trie\n                    }\n                    node = node->children[c];\n                    if (node->cost != INT_MAX) {\n                        long long cost = dp[i] + node->cost;\n                        if (cost < dp[j + 1]) {\n                            dp[j + 1] = cost;\n                        }\n                    }\n                }\n            }\n        }\n\n        return dp[n] == LLONG_MAX ? -1 : static_cast<int>(dp[n]);\n    }\n};",
    "submit_ts": "1720323288",
    "subm_id": "1312371956"
}