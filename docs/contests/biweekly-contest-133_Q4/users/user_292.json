{
    "username": "anandpatel9998",
    "submission": "\nclass Solution {\n    final long mod = (long) Math.pow(10, 9) + 7L;\n\n    public static void main(String[] args) {\n        int n = 3;\n        int[][] req = {{2, 2},{0, 0}};\n        System.out.println(\"Number of permutations: \" + new Solution().numberOfPermutations(n, req));\n\n        n = 10;\n        int[][] req2 = {{2, 2},{0, 0}, {1, 1}};\n        System.out.println(\"Number of permutations: \" + new Solution().numberOfPermutations(n, req2));\n    }\n\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int maxInversion = 400;\n        long dp[][] = new long[n + 1][maxInversion + 1];\n\n\n        int[] reqInversions = new int[n];\n        Arrays.fill(reqInversions, -1);\n        for (int[] requirement : requirements) {\n            int idx = requirement[0];\n            int inversionsReq = requirement[1];\n            reqInversions[idx] = inversionsReq;\n        }\n\n        if (reqInversions[0] == -1 ||  reqInversions[0] == 0) {\n            dp[0][0] = 1;\n        }\n\n        for (int i = 1; i < n; i++) {\n            // candidate number\n            for (int j = 0; j <= i; j++) {\n                int newInversions = i - j;\n                for (int k = 0; k < maxInversion + 1; k++) {\n                    int totalNewInversion = newInversions + k;\n                    if(totalNewInversion <= maxInversion) {\n                        if (reqInversions[i] == -1) {\n                            dp[i][totalNewInversion] += dp[i-1][k];\n                            dp[i][totalNewInversion] %= mod;\n                        } else if(totalNewInversion == reqInversions[i]) {\n                            dp[i][totalNewInversion] += dp[i-1][k];\n                            dp[i][totalNewInversion] %= mod;\n                        }\n                    }\n                }\n            }\n        }\n\n        long ans = 0;\n        if (reqInversions[n - 1] == -1) {\n            for (int i = 0; i < maxInversion + 1; i++) {\n                ans += dp[n - 1][i];\n                ans %= mod;\n            }\n        } else {\n            ans = dp[n - 1][reqInversions[n - 1]];\n        }\n        return (int) ans;\n    }\n}",
    "submit_ts": 1719070064.0
}