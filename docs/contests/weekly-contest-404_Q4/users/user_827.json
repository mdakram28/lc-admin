{
    "username": "isa773",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def mht(n: int, edges: List[List[int]]) -> int:\n            g = [[] for x in range(n)]\n            for x in edges:\n                g[x[0]].append(x[1])\n                g[x[1]].append(x[0])\n            degree = [0] * n\n            for i in range(n):\n                degree[i] = len(g[i])\n            q = [i for i in range(n) if degree[i] == 1]\n            processed = 0\n            count = 0\n            while n - processed > 2:\n                size = len(q) - count\n                processed += size\n                for i in range(count, count+size):\n                    a = q[i]\n                    count += 1\n                    for x in g[a]:\n                        if degree[x] > 0:\n                            degree[a] -= 1\n                            degree[x] -= 1\n                        if degree[x] == 1:\n                            q.append(x)\n            root = q[count]\n            used = [False] * n\n            h = 0\n            def dfs(v : int, d: int):\n                nonlocal h, used, g\n                h = max(h, d)\n                used[v] = True\n                for x in g[v]:\n                    if not used[x]:\n                        dfs(x, d+1)\n            dfs(root, 0)     \n            return h\n        \n        def diametr(n: int, edges: List[List[int]]) -> int:\n            g = [[] for x in range(n)]\n            for x in edges:\n                g[x[0]].append(x[1])\n                g[x[1]].append(x[0])\n            used = [False] * n\n            h, a = 0, 0\n            def dfs(v : int, d: int):\n                nonlocal h, used, g, a\n                if d > h:\n                    h = d\n                    a = v\n                used[v] = True\n                for x in g[v]:\n                    if not used[x]:\n                        dfs(x, d+1)\n            dfs(0, 0)\n            root = a\n            h = 0\n            used = [False] * n\n            dfs(root, 0)\n            return h\n            \n        \n        n, m = len(edges1) + 1, len(edges2) + 1\n        if n == 1 and m == 1: return 1\n        ans1, ans2 = 0, 0\n        d2 = diametr(m, edges2)\n        d1 = diametr(n, edges1)\n        if n == 1:\n            ans1 = 0\n            #ans2 = diametr(m, edges2)\n            #return ans2\n        else:\n            ans1 = mht(n, edges1)\n        if m == 1:\n            ans2 = 0\n            #ans1 = diametr(n, edges1)\n            #return ans1\n        else:\n            ans2 = mht(m, edges2)\n\n        return max(d1, d2, ans1 + 1 + ans2)\n        ",
    "submit_ts": "1719719643",
    "subm_id": "1304447013"
}