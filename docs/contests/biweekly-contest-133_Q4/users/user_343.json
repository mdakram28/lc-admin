{
    "username": "Tokladbaa",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n\n// CODEINGSOLUTION :)\nclass Solution {\nprivate:\n    static const int MODSOUYADIP = 1'000'000'007;\n    static const int MAX_INVERSIONSSOUYADIP = 400;\n\npublic:\n    int numberOfPermutations(int nSOUYADIP, vector<vector<int>>& requirementsSOUYADIP) {\n        unordered_map<int, int> endIdxToInversionCntSOUYADIP;\n        for (auto& reqSOUYADIP : requirementsSOUYADIP) {\n            endIdxToInversionCntSOUYADIP[reqSOUYADIP[0] + 1] = reqSOUYADIP[1]; \n        }\n\n        vector<vector<long long>> dpSOUYADIP(nSOUYADIP + 1, vector<long long>(MAX_INVERSIONSSOUYADIP + 1, 0));\n        dpSOUYADIP[0][0] = 1;\n\n        int lengthSOUYADIP = 1;\n        while (lengthSOUYADIP <= nSOUYADIP) {\n            int currentInversionsSOUYADIP = 0;\n            while (currentInversionsSOUYADIP <= MAX_INVERSIONSSOUYADIP) {\n                int newPositionSOUYADIP = 0;\n                while (newPositionSOUYADIP < lengthSOUYADIP) {\n                    int previousInversionsSOUYADIP = currentInversionsSOUYADIP - newPositionSOUYADIP;\n                    if (previousInversionsSOUYADIP >= 0) {\n                        dpSOUYADIP[lengthSOUYADIP][currentInversionsSOUYADIP] = \n                            (dpSOUYADIP[lengthSOUYADIP][currentInversionsSOUYADIP] + dpSOUYADIP[lengthSOUYADIP - 1][previousInversionsSOUYADIP]) % MODSOUYADIP;\n                    }\n                    ++newPositionSOUYADIP;\n                }\n                ++currentInversionsSOUYADIP;\n            }\n\n            if (endIdxToInversionCntSOUYADIP.count(lengthSOUYADIP) > 0) {\n                int requiredInversionsSOUYADIP = endIdxToInversionCntSOUYADIP[lengthSOUYADIP];\n                int currentInversionsSOUYADIP = 0;\n                while (currentInversionsSOUYADIP <= MAX_INVERSIONSSOUYADIP) {\n                    if (currentInversionsSOUYADIP != requiredInversionsSOUYADIP) {\n                        dpSOUYADIP[lengthSOUYADIP][currentInversionsSOUYADIP] = 0;\n                    }\n                    ++currentInversionsSOUYADIP;\n                }\n            }\n\n            ++lengthSOUYADIP;\n        }\n\n        long long resultSOUYADIP = 0;\n        int currentInversionsSOUYADIP = 0;\n        while (currentInversionsSOUYADIP <= MAX_INVERSIONSSOUYADIP) {\n            resultSOUYADIP = (resultSOUYADIP + dpSOUYADIP[nSOUYADIP][currentInversionsSOUYADIP]) % MODSOUYADIP;\n            ++currentInversionsSOUYADIP;\n        }\n\n        return static_cast<int>(resultSOUYADIP);\n    }\n};\n",
    "submit_ts": 1719070264.0
}