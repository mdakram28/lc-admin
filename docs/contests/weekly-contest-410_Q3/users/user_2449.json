{
    "username": "SameerMeel",
    "submission": "class Solution {\n    int countOfPairs(int[] values) {\n        int n = values.length;\n        long[][][] dpCache = new long[n][51][51];\n\n        // Initialize the memoization cache with -1\n        for (long[][] dpLayer1 : dpCache) {\n            for (long[] dpLayer2 : dpLayer1) {\n                Arrays.fill(dpLayer2, -1);\n            }\n        }\n\n        return (int) countPairs(0, 0, values[0], values, dpCache);\n    }\n\n    private long countPairs(int index, int firstVal, int secondVal, int[] values, long[][][] dpCache) {\n        // Base case: If we've reached the end of the array\n        if (index >= values.length) return 1;\n        long pairCount = 0;\n        long mod = 1000000007;\n\n        // Return cached result if already computed\n        if (dpCache[index][firstVal][secondVal] != -1) return dpCache[index][firstVal][secondVal];\n\n        // Try different values for the pair and sum them up\n        for (int i = firstVal; i <= values[index]; i++) {\n            for (int j = secondVal; j >= 0; j--) {\n                if (i + j == values[index]) {\n                    pairCount += countPairs(index + 1, i, j, values, dpCache);\n                    pairCount %= mod;\n                }\n            }\n        }\n\n        // Store the result in the memoization cache\n        dpCache[index][firstVal][secondVal] = pairCount;\n        return pairCount;\n    }\n}\n",
    "submit_ts": "1723347029",
    "subm_id": "1351590380"
}