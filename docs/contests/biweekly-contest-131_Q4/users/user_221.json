{
    "username": "topmoklaer",
    "submission": "\nstruct SegTreeItem {\n    // TODO: Implement\n    int value;\n};\n\nclass SegTree\n{\n    vector<SegTreeItem> t;\n    int maxn;\n\n    SegTreeItem MakeForSinlePoint(int val) {\n        // TODO: Implement\n        return { value: val };\n    }\n\n    SegTreeItem Combine(SegTreeItem a, SegTreeItem b, int aLeft, int aRight, int bLeft, int bRight) {\n        // TODO: Implement\n        return { value: max(a.value, b.value) };\n    }\n\n    void Build(vector<int>& a, int v, int tl, int tr) {\n        if (tl == tr)\n            t[v] = MakeForSinlePoint(a[tl]);\n        else {\n            int tm = (tl + tr) / 2;\n            Build(a, v * 2, tl, tm);\n            Build(a, v * 2 + 1, tm + 1, tr);\n            t[v] = Combine(t[v * 2], t[v * 2 + 1], tl, tm, tm + 1, tr);\n        }\n    }\n\n    void Update(int v, int tl, int tr, int pos, int newVal) {\n        if (tl == tr)\n            t[v] = MakeForSinlePoint(newVal);\n        else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                Update(v * 2, tl, tm, pos, newVal);\n            else\n                Update(v * 2 + 1, tm + 1, tr, pos, newVal);\n            t[v] = Combine(t[v * 2], t[v * 2 + 1], tl, tm, tm + 1, tr);\n        }\n    }\n\n    SegTreeItem Evaluate(int v, int tl, int tr, int l, int r) {\n        if (l == tl && r == tr)\n            return t[v];\n\n        int tm = (tl + tr) / 2;\n        int leftL = l;\n        int leftR = min(r, tm);\n        int rightL = max(l, tm + 1);\n        int rightR = r;\n\n        if (leftL > leftR) // Return right branch because there's nothing to look for in the left.\n            return Evaluate(v * 2 + 1, tm + 1, tr, rightL, rightR);\n        if (rightL > rightR) // Return just left branch.\n            return Evaluate(v * 2, tl, tm, leftL, leftR);\n\n        return Combine(\n            Evaluate(v * 2, tl, tm, leftL, leftR),\n            Evaluate(v * 2 + 1, tm + 1, tr, rightL, rightR),\n            tl, tm, tm + 1, tr\n        );\n    }\n\npublic:\n    SegTree(int maxn = 100000) : t(4 * (maxn + 1)), maxn(maxn) {\n    }\n\n    SegTree(vector<int> source) : t(4 * (source.size() + 1)), maxn(source.size() - 1) {\n        Build(source, 1, 0, maxn);\n    }\n\n    void Update(int pos, int newVal) {\n        Update(1, 0, maxn, pos, newVal);\n    }\n\n    SegTreeItem Evaluate(int left, int right) {\n        return Evaluate(1, 0, maxn, left, right);\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        set<pair<int, int>> intervals;\n        intervals.insert({0, 50000});\n        SegTree st(50001);\n        int last = 0;\n        vector<bool> ans;\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                int x = query[1];\n                auto it = intervals.lower_bound({x, x});\n                --it;\n                int oldLen = it->second - it->first + 1;\n\n                st.Update(it->second, 0);\n                \n                // first.\n                int from = it->first;\n                int to = x;\n                int len = to - from;\n                if (len > 0) {\n                    intervals.insert({from, to});\n                    st.Update(to, len);\n                }\n                // second.\n                from = x;\n                to = it->second;\n                len = to - from;\n                if (len > 0) {\n                    intervals.insert({from, to});\n                    st.Update(to, len);\n                    last = max(last, from);\n                }\n\n                intervals.erase(it);\n            } else {\n                int x = query[1];\n                int sz = query[2];\n                int mmax = st.Evaluate(0, x).value;\n                if (mmax >= sz) {\n                    ans.push_back(true);\n                    continue;\n                } \n\n                auto it = intervals.lower_bound({x, x});\n                --it;\n\n                bool res = (x - it->first) >= sz;\n                ans.push_back(res);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": 1716650942.0
}