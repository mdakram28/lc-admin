{
    "username": "neilchetty",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] c) {\n        int n = c.length;\n        Union l = new Union(n);\n        Set<Integer> ll = new HashSet<>(), rr = new HashSet<>(), tt = new HashSet<>(), bb = new HashSet<>();\n        for(int i = 0; i < n; i++) {\n            if(linetouch(1, 0, 0, c[i][0], c[i][1], c[i][2])) ll.add(i);\n            if(linetouch(0, 1, -Y, c[i][0], c[i][1], c[i][2])) tt.add(i);\n            if(linetouch(1, 0, -X, c[i][0], c[i][1], c[i][2])) rr.add(i);\n            if(linetouch(0, 2, 0, c[i][0], c[i][1], c[i][2])) bb.add(i);\n            for(int j = 0; j < i; j++) {\n                if(circletouch(c[i][0], c[i][1], c[j][0], c[j][1], c[i][2], c[j][2])) {\n                    l.unionByRank(i, j);\n                    // System.out.println(\"touched\");\n                    int ok = l.getParent(i);\n                    if(linetouch(1, 0, 0, c[i][0], c[i][1], c[i][2])) ll.add(ok);\n                    if(linetouch(0, 1, -Y, c[i][0], c[i][1], c[i][2])) tt.add(ok);\n                    if(linetouch(1, 0, -X, c[i][0], c[i][1], c[i][2])) rr.add(ok);\n                    if(linetouch(0, 2, 0, c[i][0], c[i][1], c[i][2])) bb.add(ok);\n                    if(linetouch(1, 0, 0, c[j][0], c[j][1], c[j][2])) ll.add(ok);\n                    if(linetouch(0, 1, -Y, c[j][0], c[j][1], c[j][2])) tt.add(ok);\n                    if(linetouch(1, 0, -X, c[j][0], c[j][1], c[j][2])) rr.add(ok);\n                    if(linetouch(0, 2, 0, c[j][0], c[j][1], c[j][2])) bb.add(ok);\n                }\n            }\n        }\n        // System.out.println(ll);\n        // System.out.println(rr);\n        // System.out.println(tt);\n        // System.out.println(bb);\n        for(int i = 0; i < n; i++) {\n            int one = l.getParent(i);\n            // System.out.println(one);\n            // 1 == tt, 2 == ll, 3 == bb, 4 == rr\n            //     2&3, 1&4, 2&4, 1&3\n            if((ll.contains(one) && bb.contains(one)) || (tt.contains(one) && rr.contains(one)) || (ll.contains(one) && rr.contains(one)) || (tt.contains(one) && bb.contains(one))) return false;\n        }\n        return true;\n    }\n    \n    private boolean circletouch(int x1, int y1, int x2, int y2, int r1, int r2) {\n        double d = Math.sqrt((x1 - x2) * (x1 - x2)\n                             + (y1 - y2) * (y1 - y2));\n        if (d <= r1 - r2) return true;\n        else if (d <= r2 - r1) return true;\n        else if (d < r1 + r2) return true;\n        else if (d == r1 + r2) return true;\n        else return false;\n    }\n    \n    private boolean linetouch(int a, int b, int c, int x, int y, int radius) {\n        double dist = (Math.abs(a * x + b * y + c)) / \n                        Math.sqrt(a * a + b * b);\n        if (radius == dist) return true;\n        else if (radius > dist) return true;\n        else return false;\n    }\n}\n\nclass Union {\n    private int[] size;\n    private int[] rank;\n    private int parent[];\n\n    public Union(int n) {\n        this.size = new int[n+1];\n        Arrays.fill(size, 1);\n        this.rank = new int[n+1];\n        this.parent = new int[n+1];\n        for(int i = 0; i <= n; i++) this.parent[i] = i;\n    }\n\n    public int getParent(int n) {\n        if(n == parent[n]) return n;\n        return parent[n] = getParent(parent[n]);\n    }\n\n    public void unionByRank(int u, int v) {\n        int parentU = getParent(u);\n        int parentV = getParent(v);\n        if(parentU == parentV) return;\n        if(rank[parentU] < rank[parentV]) {\n            parent[parentU] = parentV;\n        }\n        else if(rank[parentU] > rank[parentV]) {\n            parent[parentV] = parentU;\n        }\n        else {\n            parent[parentV] = parentU;\n            rank[parentU] += 1;\n        }\n    }\n\n    public  void unionBySize(int u, int v) {\n        int parentU = getParent(u);\n        int parentV = getParent(v);\n        if(parentU == parentV) return;\n        if(size[parentU] < size[parentV]) {\n            parent[parentU] = parentV;\n            size[parentV] += size[parentU];\n        }\n        else {\n            parent[parentV] = parentU;\n            size[parentU] += size[parentV];\n        }\n    }\n}",
    "submit_ts": "1722138338",
    "subm_id": "1335788210"
}