{
    "username": "MayankPanda08",
    "submission": "class Solution {\npublic:\n    int MaxDist(vector<vector<int>>& A)\n{\n    // Vectors to store maximum and\n    // minimum of all the four forms\n        //element corresponding to index i= {V[i],i} and {V1[i],i}\n        int N=A.size();\n    vector<int> V(N), V1(N);\n \n    for (int i = 0; i < N; i++) {\n        V[i] = A[i][0] + A[i][1];\n        V1[i] = A[i][0] - A[i][1];\n    }\n \n    // Sorting both the vectors\n    sort(V.begin(), V.end());\n    sort(V1.begin(), V1.end());\n \n    int maximum\n        = max(V.back() - V.front(), V1.back() - V1.front());\n \n    return maximum;\n}\n    int minimumDistance(vector<vector<int>>& points) {\n        // remove each point and find this\n        vector<pair<int,int>> sum,diff;\n        for(int i=0;i<points.size();i++)\n        {\n            sum.push_back({points[i][0]+points[i][1],i});\n            diff.push_back({points[i][0]-points[i][1],i});\n        }\n        set<pair<int,int>> smset;\n        set<pair<int,int>> diffset;\n        for(int i=0;i<points.size();i++)\n        {\n            smset.insert(sum[i]);\n            diffset.insert(diff[i]);\n        }\n        int mxdist=INT_MAX;\n        for(int i=0;i<points.size();i++)\n        {\n            smset.erase(sum[i]);\n            diffset.erase(diff[i]);\n            // get the first and last elements of smset and diffset\n            auto sfe = *smset.begin();\n            auto sle = *smset.rbegin();\n            auto dfe=*diffset.begin();\n            auto dle=*diffset.rbegin();\n            mxdist=min(mxdist,max(sle.first-sfe.first,dle.first-dfe.first));\n            smset.insert(sum[i]);\n            diffset.insert(diff[i]);\n        }\n        // int mxdist=INT_MAX;\n        // mxdist=MaxDist(points);\n        // for(int i=0;i<points.size();i++)\n        // {\n        //     // exclude index i\n        //     // int mxsum=INT_MIN;\n        //     // int mnsum=INT_MAX;\n        //     // int mxdiff=INT_MIN;\n        //     // int mndiff=INT_MAX;\n        //     // for(int j=0;j<points.size();j++)\n        //     // {\n        //     //     if(i==j)\n        //     //         continue;\n        //     //     mxsum=max(mxsum,sum[i]);\n        //     //     mnsum=min(mnsum,sum[i]);\n        //     //     mxdiff=max(mxdiff,diff[i]);\n        //     //     mndiff=min(mndiff,diff[i]);\n        //     // }\n        //     // mxdist=min(mxdist,max(mxsum-mnsum,mxdiff-mndiff));\n        // }\n        //max ( (max(xi+yi)-min(xi+yi)), (max(xi-yi) - min(xi-yi)) )\n        return mxdist;\n    }\n};"
}