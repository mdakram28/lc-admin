{
    "username": "nothinhh",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        ds = DisjointSet(n + 4)\n        \n        LEFT = n\n        RIGHT = n + 1\n        BOTTOM = n + 2\n        TOP = n + 3\n        \n        for i, (xi, yi, ri) in enumerate(circles):\n            if xi - ri <= 0:\n                ds.union(i, LEFT)\n            if xi + ri >= X:\n                ds.union(i, RIGHT)\n            if yi - ri <= 0:\n                ds.union(i, BOTTOM)\n            if yi + ri >= Y:\n                ds.union(i, TOP)\n            \n            for j in range(i + 1, n):\n                xj, yj, rj = circles[j]\n                if (xi - xj) ** 2 + (yi - yj) ** 2 <= (ri + rj) ** 2:\n                    ds.union(i, j)\n        \n        if (ds.find(LEFT) == ds.find(RIGHT) or\n            ds.find(BOTTOM) == ds.find(TOP) or\n            ds.find(LEFT) == ds.find(BOTTOM) or\n            ds.find(RIGHT) == ds.find(TOP)):\n            return False\n        \n        return True\n\nclass DisjointSet:\n    def __init__(self, n):\n        self.parent = list(range(n))\n        self.rank = [1] * n\n    \n    def find(self, u):\n        if self.parent[u] != u:\n            self.parent[u] = self.find(self.parent[u])\n        return self.parent[u]\n    \n    def union(self, u, v):\n        root_u = self.find(u)\n        root_v = self.find(v)\n        if root_u != root_v:\n            if self.rank[root_u] > self.rank[root_v]:\n                self.parent[root_v] = root_u\n            elif self.rank[root_u] < self.rank[root_v]:\n                self.parent[root_u] = root_v\n            else:\n                self.parent[root_v] = root_u\n                self.rank[root_u] += 1",
    "submit_ts": "1722136064",
    "subm_id": "1335722621"
}