{
    "username": "ableed",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    vector<int> wordIndex;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->wordIndex.push_back(index);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n\n        int n = target.length();\n        Trie trie;\n\n        for(int i  = 0; i < words.size(); ++i){\n            trie.insert(words[i],i);\n        }\n\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n\n        for(int i = 0; i < n; ++i){\n            if(dp[i] == INT_MAX) continue;\n            TrieNode * node = trie.root;\n\n            for(int j = i; j < n; ++j){\n                if(node -> children.find(target[j]) == node->children.end()) break;\n                node = node -> children[target[j]];\n\n                for(int word : node->wordIndex){\n                    int len = words[word].size();\n                    if( j + 1 >= i + len){\n                        dp[i + len] = min(dp[i + len], dp[i] + costs[word]);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n        \n        \n        // Works but TLE might happen due to two loops\n//         int n = target.length();\n        \n//         vector<int> dp(n+1,INT_MAX);\n//         dp[0] = 0;\n        \n//         for(int i = 0;i < n; ++i){\n//             if(dp[i] == INT_MAX) continue;\n//             for(int j = 0; j < words.size(); ++j){\n//                 int len = words[j].size();\n                \n//                 if(i + len <= n && target.substr(i,len) == words[j]){\n//                     dp[i + len] = min(dp[i + len], dp[i] + costs[j]);\n//                 }\n//             }\n//         }\n        \n//         return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322874",
    "subm_id": "1312361330"
}