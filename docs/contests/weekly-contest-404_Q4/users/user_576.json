{
    "username": "bhavesh884",
    "submission": "class Solution {\npublic:\n    pair<int, int> myBFS(const vector<vector<int>>& gph, int st) {\n        int n = gph.size();\n        vector<int> dp(n, -1);\n        queue<int> q;\n        q.push(st);\n        dp[st] = 0;\n        int Far_node = st;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int ngh : gph[node]) {\n                if (dp[ngh] == -1) {\n                    dp[ngh] = dp[node] + 1;\n                    q.push(ngh);\n                    if (dp[ngh] > dp[Far_node]) {\n                        Far_node = ngh;\n                    }\n                }\n            }\n        }\n\n        return {Far_node, dp[Far_node]};\n    }\n\n    int getDia(const vector<vector<int>>& edges) {\n        if (edges.empty())\n            return 0;\n        int n = edges.size() + 1;\n        vector<vector<int>> gph(n);\n\n        for (const auto& edge : edges) {\n            gph[edge[0]].push_back(edge[1]);\n            gph[edge[1]].push_back(edge[0]);\n        }\n\n        pair<int, int> farthest = myBFS(gph, 0);\n        pair<int, int> diameter = myBFS(gph, farthest.first);\n\n        return diameter.second;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int diameter1 = getDia(edges1);\n        int diameter2 = getDia(edges2);\n\n        return max({diameter1, diameter2,\n                    (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": "1719719770",
    "subm_id": "1304450136"
}