{
    "username": "karunya_12",
    "submission": "class Solution {\npublic:\n    struct Node {\n        Node* links[26];\n        int minCost = INT_MAX;\n        bool isEnd = false;\n\n        Node() {\n            fill(begin(links), end(links), nullptr);\n        }\n\n        bool containsKey(char ch) {\n            return links[ch - 'a'] != nullptr;\n        }\n\n        void put(char ch, Node* node) {\n            links[ch - 'a'] = node;\n        }\n\n        Node* get(char ch) {\n            return links[ch - 'a'];\n        }\n\n        void updateCost(int cost) {\n            minCost = min(minCost, cost);\n        }\n    };\n\n    class Trie {\n    // private:\n    //     Node* root;\n\n    public:\n        Node* root;\n        Trie() {\n            root = new Node();\n        }\n\n        void insert(const string& word, int cost) {\n            Node* node = root;\n            for (char ch : word) {\n                if (!node->containsKey(ch)) {\n                    node->put(ch, new Node());\n                }\n                node = node->get(ch);\n            }\n            node->isEnd = true;\n            node->updateCost(cost);\n        }\n\n        int getMinCost(const string& word, int start, int end) {\n            Node* node = root;\n            for (int i = start; i <= end; ++i) {\n                if (!node->containsKey(word[i])) {\n                    return INT_MAX;\n                }\n                node = node->get(word[i]);\n            }\n            return node->isEnd ? node->minCost : INT_MAX;\n        }\n    };\n\n    Trie trie;\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            Node* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->containsKey(target[j])) break;\n                node = node->get(target[j]);\n                if (node->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324783",
    "subm_id": "1312408215"
}