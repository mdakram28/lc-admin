{
    "username": "ninja_master2002",
    "submission": "\nstruct Tree_Node {\n    vector<pair<int, int>> wordEnds; \n    map<char, Tree_Node*> child;\n};\n//Implementing Trie\nclass Trie {\npublic:\n    Tree_Node* root;\n    Trie() { root = new Tree_Node(); }\n\n    void insert(string& word, int index, int cost) {\n        Tree_Node* node = root;\n        for (char c : word) {\n            if (!node->child.count(c))\n                node->child[c] = new Tree_Node();\n            node = node->child[c];\n        }\n        node->wordEnds.push_back({index, cost});\n    }\n};\n\n\nclass Solution {\npublic:\n    \n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, 1e9);\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) {\n            t.insert(words[i], i, costs[i]);\n        }\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == 1e9) continue;\n            Tree_Node* node = t.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->child.count(target[j])) break;\n                node = node->child[target[j]];\n                for (auto& it : node->wordEnds) {\n                    int idx = it.first;\n                    int temp = it.second;\n                    int len = words[idx].size();\n                    if (i + len <= n) {\n                        dp[i + len] = min(dp[i + len], dp[i] + temp);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == 1e9 ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322340",
    "subm_id": "1312347278"
}