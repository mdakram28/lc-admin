{
    "username": "Ahemad_14",
    "submission": "/*\n\tName :- Tafheem Ahemad\n*/\n#include<bits/stdc++.h>\n#include<ext/pb_ds/assoc_container.hpp>\n#include<ext/pb_ds/tree_policy.hpp>\nusing namespace std;\nusing namespace __gnu_pbds;\n#define ll long long int\n#define ld long double\n#define F first\n#define S second\nconst int MOD=1e9+7;\n#define vl vector<ll>\n#define vi vector<int>\n#define vs vector<string>\n#define vll vector<vl>\n#define vii vector<vi>\n#define pii pair<int,int>\n#define pll pair<ll,ll>\n#define ump unordered_map\n#define all(v) v.begin(),v.end()\n#define take_matrix(a,n,m) for(int i=0; i<n; i++){for(int j=0; j<m; j++){cin>>a[i][j];}}\n#define print_matrix(a,n,m) for(int i=0; i<n; i++){for(int j=0; j<m; j++){cout<<a[i][j]<<' ';}cout<<endl;}\n#define input(a) for(auto &x:a) cin>>x;\n#define printv(a) for(auto &i:a) cout<<i<<' '; cout<<endl;\n#define yes(x) if(x) cout<<\"YES\"<<endl; else cout<<\"NO\"<<endl;\n#define cl(n) for(int i=0;i<=n+5;i++) g[i].clear()\n#define mem(v,z) memset(v,z,sizeof(v))\n#define bpc(x) __builtin_popcountll(x)\n#define pq_max priority_queue<ll>\n#define pq_min priority_queue<ll,vl,greater<ll>>\n#define fast() ios_base::sync_with_stdio(false); cin.tie(NULL);\n#define pb push_back\n#define in insert\ntemplate <typename T> using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\nvector<vector<ll>>delta1={{1,0},{-1,0},{0,-1},{0,1}};\nvector<vector<ll>>delta2={{1,0},{-1,0},{0,-1},{0,1},{1,1},{-1,1},{1,-1},{-1,-1}};\n\n\nclass Solution {\npublic:\n    int height[200500];\n \n    int depth(int node, int par, vector<list<pii>>& g) {\n        if (height[node] != -1) return height[node];\n\n        int mx = 0;\n        for (auto i : g[node]) {\n            if (i.F == par) continue;\n            mx = max(mx, i.S + depth(i.F, node, g));\n        }\n\n        height[node] = mx;\n        return mx;\n    }\n\n    void solve(int node, int par, int parent_mx, vector<int> &ans, vector<list<pii>>& g) {\n        int b = 1;\n        if (par != -1) {\n            for (auto &i : g[node]) {\n                if (i.F == par) {\n                    b = i.S;\n                    break;\n                }\n            }\n        }\n\n        // cout<<node<<\" \"<<parent_mx<<\" \"<<height[node]<<endl;\n        ans[node] = max(max(height[node], b + parent_mx), ans[node]);\n\n        multiset<int> st;\n        st.insert(-100000);\n        st.insert(-100000);\n        st.insert(parent_mx+b);\n        for (auto i : g[node]) {\n            if (i.F == par) continue;\n            st.insert(height[i.F] + i.S);\n        }\n\n        for (auto i : g[node]) {\n            if (i.F == par) continue;\n            st.erase(st.find(height[i.F] + i.S));\n            solve(i.F, node, *prev(st.end()), ans, g);\n            st.insert(height[i.F] + i.S);\n        }\n\n        return;\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<list<pii>> g(n);\n\n        for (auto &it : edges) {\n            g[it[0]].push_back({it[1], 1 + (it[1] % 2 == 0)});\n            g[it[1]].push_back({it[0], 1 + (it[0] % 2 == 0)});\n        }\n\n        memset(height, -1, sizeof(height));\n        depth(0, -1, g);\n\n        vector<int> ans(n);\n\n\n        solve(0, -1, -1, ans, g);\n\n        // cout<<\"*****\"<<endl;\n        return ans;\n    }\n};\n",
    "submit_ts": "1722699383",
    "subm_id": "1343209962"
}