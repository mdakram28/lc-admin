{
    "username": "binomanjesh",
    "submission": "class Solution {\n\n    tuple<int, int, int> unpack(vector<int> &v) {\n        return {v[0], v[1], v[2]};\n    }\n\n    long long square(int x) {\n        return (long long)x * x;\n    }\n\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        const int top = circles.size();\n        const int left = top + 1;\n        const int bottom = left + 1;\n        const int right = bottom + 1;\n        const int V = right + 1;\n        vector<vector<int>> adj_list(V);\n        for (int i = 0; i < (int)circles.size(); ++i) {\n            auto [x1, y1, r1] = unpack(circles[i]);\n            for (int j = i + 1; j < (int)circles.size(); ++j) {\n                auto [x2, y2, r2] = unpack(circles[j]);\n                if (sqrtl(square(x1 - x2) + square(y1 - y2)) <= r1 + r2) {\n                    adj_list[i].push_back(j);\n                    adj_list[j].push_back(i);\n                }\n            }\n            if (y1 - r1 <= Y && Y <= y1 + r1) {\n                adj_list[i].push_back(top);\n                adj_list[top].push_back(i);\n            }\n            if (y1 - r1 <= 0 && 0 <= y1 + r1) {\n                adj_list[i].push_back(bottom);\n                adj_list[bottom].push_back(i);\n            }\n            if (x1 - r1 <= X && X <= x1 + r1) {\n                adj_list[i].push_back(right);\n                adj_list[right].push_back(i);\n            }\n            if (x1 - r1 <= 0 && 0 <= x1 + r1) {\n                adj_list[i].push_back(left);\n                adj_list[left].push_back(i);\n            }\n        }\n\n        vector<int> colors(V);\n        function<void(int, int)> dfs = [&](int u, int color) {\n            colors[u] = color;\n            for (int v : adj_list[u]) if (!colors[v]) {\n                dfs(v, color);\n            }\n        };\n\n        int nextColor = 1;\n        for (int i = 0; i < V; ++i) {\n            if (!colors[i]) {\n                dfs(i, nextColor);\n                ++nextColor;\n            }\n        }\n\n        return\n            colors[bottom] != colors[left] &&\n            colors[top] != colors[right] &&\n            colors[top] != colors[bottom] &&\n            colors[left] != colors[right];\n        ;\n    }\n};",
    "submit_ts": "1722137026",
    "subm_id": "1335751989"
}