{
    "username": "kalyanvinayak",
    "submission": "\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return solve(X, Y, circles);\n    }\n\nprivate:\n    bool solve(int X, int Y, vector<vector<int>>& c) {\n        int n = c.size();\n        vector<vector<int>> g(n + 4);\n\n        createGraph(g, c, X, Y, n);\n        return !isBlocked(g, n);\n    }\n\n    void createGraph(vector<vector<int>>& g, vector<vector<int>>& c, int X, int Y, int n) {\n        for (int i = 0; i < n; i++) {\n            checkBoundaries(g, c, i, X, Y, n);\n            checkIntersections(g, c, i, n);\n        }\n    }\n\n    void checkBoundaries(vector<vector<int>>& g, vector<vector<int>>& c, int i, int X, int Y, int n) {\n        if (c[i][0] <= c[i][2]) connect(g, i, n);\n        if (X - c[i][0] <= c[i][2]) connect(g, i, n + 2);\n        if (c[i][1] <= c[i][2]) connect(g, i, n + 1);\n        if (Y - c[i][1] <= c[i][2]) connect(g, i, n + 3);\n    }\n\n    void checkIntersections(vector<vector<int>>& g, vector<vector<int>>& c, int i, int n) {\n        int j = i + 1;\n        while (j < n) {\n            double dist = sqrt(pow(c[i][0] - c[j][0], 2) + pow(c[i][1] - c[j][1], 2));\n            if (c[i][2] + c[j][2] >= dist) {\n                connect(g, i, j);\n            }\n            j++;\n        }\n    }\n\n    void connect(vector<vector<int>>& g, int i, int j) {\n        g[i].push_back(j);\n        g[j].push_back(i);\n    }\n\n    bool isBlocked(vector<vector<int>>& g, int n) {\n        return bfs(g, n, n + 1, n + 2, n + 4) || bfs(g, n + 3, n + 2, n + 1, n + 4);\n    }\n\n    bool bfs(vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        q.push(s);\n        vis[s] = true;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n\n        return vis[t1] || vis[t2];\n    }\n};",
    "submit_ts": "1722138380",
    "subm_id": "1335789282"
}