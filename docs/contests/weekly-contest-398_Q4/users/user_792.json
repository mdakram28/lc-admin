{
    "username": "EigenVector0",
    "submission": "class Solution {\n\tprivate long key(int i, int jump, boolean canDesc) {\n\t\treturn (canDesc?1L:0L) | (long)i<<1 | (long)jump<<32;\n\t}\n\tprivate int dp(int i, int jump, boolean canDesc, Map<Long,Integer> memo) {\n\t\t// System.out.printf(\"dp(i=%d,jump=%d,%b)\\n\", i, jump, canDesc);\n\t\tif (i<0) return 0;\n\t\tif (i==1&&jump==0&canDesc) return 1;\n\t\tfinal long k = key(i, jump, canDesc);\n\t\tif (memo.containsKey(k)) return memo.get(k);\n\t\tfinal int ans = (!canDesc ? dp(i+1, jump, true, memo) : 0) +\n\t\t\t(jump>0&&canDesc ? dp(i - (1<<jump-1), jump-1, true, memo)+dp(i - (1<<jump-1), jump-1, false, memo) : 0);\n\t\tmemo.put(k, ans);\n\t\treturn ans;\n\t}\n    public int waysToReachStair(int k) {\n        /*\n\t\t * dp(i, jump, canDesc) <- !canDesc ? dp(i+1, jump,true) : 0 + jump>0 ? dp(i-2**(jump-1), jump-1, *) : 0\n\t\t */\n\t\tif (k==0) return 2;\n\t\tint nJump = 31-Integer.numberOfLeadingZeros(k);\n\t\tint ans = 0;\n\t\tvar memo = new HashMap<Long,Integer>();\n\t\tfor (; nJump < 32; ++nJump) {\n\t\t\t// System.out.printf(\"dp(%d,%d,%b)=%d\\n\", k, nJump, true, dp(k, nJump, true));\n\t\t\t// System.out.printf(\"dp(%d,%d,%b)=%d\\n\", k, nJump, false, dp(k, nJump, false));\n\t\t\tans += dp(k, nJump, true, memo) + dp(k, nJump, false, memo);\n\t\t}\n\t\treturn ans;\n    }\n}\n",
    "submit_ts": 1716089248.0
}