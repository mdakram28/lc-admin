{
    "username": "abhihere2201",
    "submission": "class Solution {\npublic:\n    bool solve(int X, int Y, vector<vector<int>>& circles) {\n        \n        int sz = circles.size();\n        vector<vector<int>> adj(sz + 4);\n        \n        for (int i = 0; i < sz; i++) {\n            \n            if (circles[i][0] <= circles[i][2]) {\n                adj[sz].push_back(i);\n                adj[i].push_back(sz);\n            }\n\n            if (X - circles[i][0] <= circles[i][2]) {\n                adj[sz + 2].push_back(i);\n                adj[i].push_back(sz + 2);\n            }\n            if (circles[i][1] <= circles[i][2]){\n                adj[sz + 1].push_back(i);\n                adj[i].push_back(sz + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                adj[sz + 3].push_back(i);\n                adj[i].push_back(sz + 3);\n            }\n            for (int j = i + 1; j < sz; ++j) {\n                double dist = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radSum = circles[i][2] + circles[j][2];\n                if (radSum >= dist) { \n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        \n        int block = 0;\n        block = max(block, helper(sz + 4, adj, sz, sz + 1, sz + 2));\n        block = max(block, helper(sz + 4, adj, sz + 3, sz + 2, sz + 1)); \n        \n        return block == 0;\n    }\n    \n    int helper(int n, vector<vector<int>>& adj, int src, int target1, int target2) {\n        queue<int> q;\n        vector<bool> vis(n + 4, false);\n        q.push(src);\n        vis[src] = true;\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : adj[u]) {  \n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return (vis[target1] || vis[target2] ? 1 : 0);\n    }\n    \n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) { \n        return solve(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138937",
    "subm_id": "1335803588"
}