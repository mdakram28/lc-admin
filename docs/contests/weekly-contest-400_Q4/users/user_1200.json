{
    "username": "mdnihal05",
    "submission": "#include<bits/stdc++.h>\n#define ll long long\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || l > end) {\n            return ~0; // Return all 1s for invalid range\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left = query(2 * node + 1, start, mid, l, r);\n        int right = query(2 * node + 2, mid + 1, end, l, r);\n        return left & right;\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n\n    int range_and(int l, int r) {\n        return query(0, 0, n - 1, l, r);\n    }\n};\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        ll ans=1e12,n=nums.size();\n        SegmentTree arr(nums);\n        for(int i=0;i<n;i++){\n            ll low=i,high=n-1,res=i;\n            while(low<=high){\n                int mid=(low+high)/2;\n                int Q=arr.range_and(i,mid);\n                ans=min<ll>(ans,abs(k-Q));\n                if(Q>=k) {\n                    low=mid+1;\n                    res=mid;\n                }else high=mid-1;\n            }\n            ans=min<ll>(ans,abs(k-arr.range_and(i,res)));\n        }\n        cout<<endl<<endl;\n        return ans;\n    }\n};",
    "submit_ts": 1717300009.0
}