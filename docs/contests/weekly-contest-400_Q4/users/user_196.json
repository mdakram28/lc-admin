{
    "username": "papaya",
    "submission": "#include<bits/stdc++.h>\nusing namespace std ; \ntypedef long long int64 ; \n\nconst int64 MASK = ( 1LL << 40 ) - 1  ;\nconst int64 INF = 1e18 ; \n\nstruct Segment_Tree { \n    struct Node {          \n        int64 sum ; // lazy variable \n    } ; \n    vector< Node > t ; \n    int n ; \n\n    inline int L( int u ) { return u << 1 ; }\n    inline int R( int u ) { return ( u << 1 ) | 1 ; }  \n    // void init( int tn ) { \n    //     vector<int64> a( tn, 0 ) ;\n    //     init( tn , a ) ; \n    // } \n    void init( int tn , vector<int> & a ) { \n        n = tn ;         \n        t.resize( n * 4 + 10 ) ;         \n        build_tree( 1 ,  0 , tn - 1 , a ) ; \n    } \n    void combine( int u ) {\n        t[ u ].sum =  t[ L(u) ].sum &  t[ R(u) ].sum   ;\n    }\n    void build_tree( int u , int s , int e , vector<int> & a ) {\n\n        if( s == e ) {\n            t[ u ].sum = a[s] ;   // \u8fd9\u91cc\u6ce8\u610f\u8981 \u7ed3\u5408\u5177\u4f53\u9700\u6c42\uff0c \u521d\u59cb\u5316\n            return ; \n        }\n        int mid = ( s + e ) / 2 ; \n        build_tree( L(u) , s , mid , a ) ; \n        build_tree( R(u) , mid + 1 , e , a ) ;    \n        combine( u ) ;  \n    }\n    int64 _range_query( int u , int left , int right , int x , int y   ) {\n\n        int mid = ( left + right ) >> 1 ; \n        if( x <= left && right <= y   )  { // cotain [left,right], mark it \n            return t[ u ].sum ; \n        }\n        int64 ret = MASK ; \n        if( x <= mid ) {\n            ret &= _range_query( L(u) ,  left , mid , x , y  ) ; \n        }\n        if( y > mid  ) {\n            ret &= _range_query( R(u) , mid + 1 , right , x , y ) ; \n        }\n        return  ret  ; \n    }\n    int64 range_query( int x , int y  ) {\n        return _range_query( 1 , 0 , n - 1  ,x , y ) ; \n    }\n} ; \n\nclass Solution {\npublic:\n    Segment_Tree t ; \n    int n ; \n    int K ; \n\n    int64 solve1( ) { \n\n        int64 ret = -INF ; \n        for( int i = 0 ; i < n ; i++ ) { \n\n            int low = i ; \n            int high = n - 1 ; \n            while( low <= high ) { \n                int mid = ( low + high ) >> 1 ; \n                auto val = t.range_query( i , mid ) ; \n                if( val > K ) { \n                    low = mid + 1 ; \n                }\n                else { \n                    ret = max( ret , val ) ; \n                    high = mid - 1 ; \n                }\n            }\n        }\n\n        // cout << \"sovle 1 ret ; \" << ret <<  \"\\n\" ; \n        \n\n\n        if( ret == -INF ) {\n            return INF ; \n        }\n        return abs( K - ret ) ; \n    }\n\n    int64 solve2( ) { \n\n        int64 ret = INF ; \n        for( int i = 0 ; i < n ; i++ ) { \n\n            int low = i ; \n            int high = n - 1 ; \n            while( low <= high ) { \n                int mid = ( low + high ) >> 1 ; \n                auto val = t.range_query( i , mid ) ; \n                if( val <= K ) { \n                    high = mid - 1 ; \n                }\n                else { \n                    ret = min( ret , val ) ; \n                    low = mid + 1 ; \n                }\n            }\n        }\n\n        // cout << \"sovle2 ret ; \" << ret <<  \"\\n\" ; \n\n        if( ret == INF ) {\n            return INF ; \n        }\n        return abs( K - ret ) ; \n    }\n\n    int minimumDifference(vector<int>& nums, int k) {\n        n = nums.size(); \n        t.init( n , nums ) ; \n        this->K = k ; \n        \n        auto t1 =  solve1( ) ; \n        auto t2 = solve2() ; \n\n        // cout << t1 << \" t2: \" << t2 << \"\\n\" ; \n\n        return min( t1 , t2 ) ; \n    }\n};\n\n\n\nint main2( )  { \n    Solution  t; \n\n    vector<int> a ;\n    int n ; \n    vector<int> nums ; \n    int k ; \n\n    nums = { 1 , 2 , 4 , 5 } ; \n    k = 3 ; \n    \n\n    //  nums = [1,2,1,2], k = 2\n\n    nums = { 1 , 2  , 1 ,  2 } ; \n    k = 2 ; \n\n    nums = { 1 } ; \n    k = 10 ; \n\n    auto ans = t.minimumDifference(  nums , k  ) ; \n    cout << ans << \"\\n\" ;\n\n\n    return 0 ; \n}\n",
    "submit_ts": "1717297758",
    "subm_id": "1274754844"
}