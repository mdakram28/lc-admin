{
    "username": "abhishek21ee10003kgp",
    "submission": "from typing import List, Tuple\nimport heapq\n\nclass Solution:\n    def __init__(self):\n        self.n = 0\n        self.e = []\n        self.down = []\n        self.up = []\n\n    def d2(self, u: int, p: int, b: int):\n        self.up[u] = b\n        t = 2 if u % 2 == 0 else 1\n        for v, c in self.e[u]:\n            if v == p:\n                continue\n            best = self.down[u][0][0]\n            if self.down[u][0][1] == v:\n                best = self.down[u][1][0]\n            tmp = max(t + b, t + best)\n            self.d2(v, u, tmp)\n\n    def dfs(self, u: int, p: int) -> int:\n        for v, c in self.e[u]:\n            if v == p:\n                continue\n            self.down[u].append((c + self.dfs(v, u), v))\n        self.down[u].sort(reverse=True, key=lambda x: x[0])\n        return self.down[u][0][0]\n\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        self.n = len(edges) + 1\n        self.up = [0] * self.n\n        self.down = [[(0, -1)] for _ in range(self.n)]\n        self.e = [[] for _ in range(self.n)]\n\n        for x, y in edges:\n            if x % 2:\n                self.e[y].append((x, 1))\n            else:\n                self.e[y].append((x, 2))\n            if y % 2:\n                self.e[x].append((y, 1))\n            else:\n                self.e[x].append((y, 2))\n\n        self.dfs(0, -2)\n        self.d2(0, -2, 0)\n\n        ans = [max(self.up[i], self.down[i][0][0]) for i in range(self.n)]\n        return ans\n",
    "submit_ts": "1722700342",
    "subm_id": "1343238933"
}