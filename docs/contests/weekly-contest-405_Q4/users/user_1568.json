{
    "username": "priyanshu_p28",
    "submission": "class trieNode {\n    public:\n        unordered_map<char, trieNode*> child;\n        vector<pair<int,int>> tmp;\n    };\n    \n    class Trie {\n    public:\n        trieNode* rt;\n    \n        Trie() {\n            rt = new trieNode();\n        }\n    \n        void insert(string word, int index, int cost) {\n            trieNode* root = rt;\n            for (char c : word) {\n                if (!root->child.count(c)) {\n                    root->child[c] = new trieNode();\n                }\n                root = root->child[c];\n            }\n            root->tmp.push_back({index, cost});\n        }\n    };\nclass Solution {\n    \npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size(), m = words.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie tt;\n        for (int i = 0; i < m; ++i) {\n            tt.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            trieNode* root = tt.rt;\n            for (int j = i; j < n; ++j) {\n                if (!root->child.count(target[j])) {\n                    break;\n                }\n                root = root->child[target[j]];\n                for (auto [index, cost] : root->tmp) {\n                    int k = words[index].size();\n                    if (i + k <= n) {\n                        dp[i + k] = min(dp[i] + cost, dp[i + k]);\n                    }\n                }\n            }\n        }\n        int ans = dp[n];\n        if(ans == INT_MAX) return -1;\n        return ans;\n    }\n};",
    "submit_ts": "1720323584",
    "subm_id": "1312379114"
}