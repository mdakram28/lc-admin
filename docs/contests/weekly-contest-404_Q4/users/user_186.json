{
    "username": "funsquared",
    "submission": "def find_farthest(edges):\n    n = len(edges) + 1\n    adj = [[] for _ in range(n)]\n    for u, v in edges:\n        adj[u].append(v)\n        adj[v].append(u)\n    fst = [0] * n\n    snd = [0] * n\n    def dfs1(u, p):\n        for v in adj[u]:\n            if v != p:\n                dfs1(v, u)\n                if fst[v] + 1 > fst[u]:\n                    snd[u] = fst[u]\n                    fst[u] = fst[v] + 1\n                elif fst[v] + 1 > snd[u]:\n                    snd[u] = fst[v] + 1\n    res = [0] * n\n    def dfs2(u, p, to_p):\n        res[u] = max(to_p, fst[u])\n        for v in adj[u]:\n            if v != p:\n                if fst[v] + 1 == fst[u]:\n                    dfs2(v, u, max(to_p, snd[u]) + 1)\n                else:\n                    dfs2(v, u, res[u] + 1)\n    dfs1(0, -1)\n    dfs2(0, -1, 0)\n    return res\n\n\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        res1 = find_farthest(edges1)\n        res2 = find_farthest(edges2)\n        return max(min(res1) + 1 + min(res2), max(res1), max(res2))",
    "submit_ts": "1719718018",
    "subm_id": "1304406684"
}