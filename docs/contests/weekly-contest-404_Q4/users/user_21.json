{
    "username": "VarunR",
    "submission": "class Solution {\npublic:\n    \n    vector<vector<int>> genAdj(vector<vector<int>>& edges) {\n        vector<vector<int>> adj((int)edges.size() + 1);\n            for(auto& x: edges) {\n                adj[x[0]].push_back(x[1]);\n                adj[x[1]].push_back(x[0]);\n            }\n        return adj;\n    }\n    \n    void dfsDist(int u, int v, vector<vector<int>>& adj, vector<int>& dist) {\n        for(auto& x: adj[u]) {\n            if(x == v) continue;\n            dist[x] = dist[u] + 1;\n            dfsDist(x, u, adj, dist);\n        }\n    }\n    \n    vector<int> calcMaxDist(vector<vector<int>>& adj) {\n        int n = (int)adj.size();\n        vector<int> dist(n, 0);\n        dfsDist(0, -1, adj, dist);\n        // for(auto& x: dist) cout << x << \" \";\n        // cout << '\\n';\n        int mxind1 = (int)(max_element(dist.begin(), dist.end()) - dist.begin());\n        // cout << mxind1 << '\\n';\n        dist[mxind1] = 0;\n        dfsDist(mxind1, -1, adj, dist);\n        // for(auto& x: dist) cout << x << \" \";\n        \n        int mxind2 = (int)(max_element(dist.begin(), dist.end()) - dist.begin());\n        vector<int> dist2(n, 0);\n        dfsDist(mxind2, -1, adj, dist2);\n        auto cop = dist;\n        for(int i = 0; i < n; i++) {\n            cop[i] = max(dist[i], dist2[i]);\n        }\n        return cop;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        auto adj1 = genAdj(edges1);\n        auto adj2 = genAdj(edges2);\n        // cout << \"\\ntc\\n\";\n        auto d1 = calcMaxDist(adj1);\n        auto d2 = calcMaxDist(adj2);\n        int mx = max(*max_element(d1.begin(), d1.end()), *max_element(d2.begin(), d2.end()));\n        // cout << mx << '\\n';\n        int mnind1 = (int)(min_element(d1.begin(), d1.end()) - d1.begin());\n        int mnind2 = (int)(min_element(d2.begin(), d2.end()) - d2.begin());\n        // cout << mnind1 << \" \" << mnind2 << '\\n';\n        // for(auto& x: d1) cout << x << \" \";\n        // cout << '\\n';\n        // for(auto& x: d2) cout << x << \" \";\n        // cout << '\\n';\n        mx = max(mx, d1[mnind1] + d2[mnind2] + 1);\n        \n        \n        \n        return mx;\n        \n    }\n};",
    "submit_ts": 1719716233.0
}