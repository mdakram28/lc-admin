{
    "username": "strange-davinciper",
    "submission": "#include <bits/stdc++.h>\n#include <ext/pb_ds/assoc_container.hpp>\n\nusing namespace std;\nusing namespace __gnu_pbds;\n\n#pragma region\ntemplate <typename T>\nusing ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update>;\n\n#define ll long long\n#define sz(x) (int)(x).size()\n#define mp make_pair\n#define pb push_back\n#define f first\n#define s second\n#define lb lower_bound\n#define ub upper_bound\n#define all(x) x.begin(), x.end()\n#define rall(x) x.rbegin(), x.rend()\n#define ins insert\n\nvoid __print(int x) { cout << x; }\nvoid __print(long x) { cout << x; }\nvoid __print(long long x) { cout << x; }\nvoid __print(unsigned x) { cout << x; }\nvoid __print(unsigned long x) { cout << x; }\nvoid __print(unsigned long long x) { cout << x; }\nvoid __print(float x) { cout << x; }\nvoid __print(double x) { cout << x; }\nvoid __print(long double x) { cout << x; }\nvoid __print(char x) { cout << '\\'' << x << '\\''; }\nvoid __print(const char *x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(const string &x) { cout << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cout << (x ? \"true\" : \"false\"); }\ntemplate <size_t N>\nvoid __print(const bitset<N>& x) { cout << x; };\n\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x);\ntemplate <typename T>\nvoid __print(const T &x);\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v);\n\ntemplate <typename T, typename V>\nvoid __print(const pair<T, V> &x) {\n    cout << '{';\n    __print(x.first);\n    cout << \", \";\n    __print(x.second);\n    cout << '}';\n}\ntemplate <typename T>\nvoid __print(const T &x) {\n    int f = 0;\n    cout << '{';\n    for (auto &i : x) cout << (f++ ? \", \" : \"\"), __print(i);\n    cout << \"}\";\n}\nvoid _print() { cout << \"]\\n\"; }\ntemplate <typename T, typename... V>\nvoid _print(T t, V... v) {\n    __print(t);\n    if (sizeof...(v)) cout << \", \";\n    _print(v...);\n}\n\ntemplate<class T> bool ckmin(T&a, const T& b) { bool B = a > b; a = min(a,b); return B; }\ntemplate<class T> bool ckmax(T&a, const T& b) { bool B = a < b; a = max(a,b); return B; }\n#pragma endregion\n\n#define dbg(x...)                                                            \\\n    cout << \"[\" << __func__ << \":\" << __LINE__ - 9 << \" [\" << #x << \"] = [\"; \\\n    _print(x);                                                               \\\n    cout << endl;\n// #define dbg(x...)\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        map<int, set<int>> R, C;\n        for (int i = 0; auto& p : points) {\n            auto r = p[0], c = p[1];\n            p[0] = r - c, p[1] = r + c;\n            R[p[0]].insert(i), C[p[1]].insert(i);\n            ++i;\n        }\n        int res = max(R.rbegin()->first - R.begin()->first, C.rbegin()->first - C.begin()->first);\n\n        const auto remove_id = [&](auto id) {\n            auto r = points[id][0], c = points[id][1];\n            R[r].erase(id), C[c].erase(id);\n            if (R[r].empty()) {\n                R.erase(r);\n            }\n            if (C[c].empty()) {\n                C.erase(c);\n            }\n        };\n        \n        const auto insert_id = [&](auto id) {\n            auto r = points[id][0], c = points[id][1];\n            R[r].insert(id);\n            C[c].insert(id);\n        };\n        \n        if (R.begin()->second.size() == 1) {\n            auto id = *(R.begin()->second.begin());\n            remove_id(id);\n            res = min(res, max(R.rbegin()->first - R.begin()->first, C.rbegin()->first - C.begin()->first));\n            insert_id(id);\n        }\n        if (R.rbegin()->second.size() == 1) {\n            auto id = *(R.rbegin()->second.begin());\n            remove_id(id);\n            res = min(res, max(R.rbegin()->first - R.begin()->first, C.rbegin()->first - C.begin()->first));\n            insert_id(id);\n        }\n        if (C.begin()->second.size() == 1) {\n            auto id = *(C.begin()->second.begin());\n            remove_id(id);\n            res = min(res, max(R.rbegin()->first - R.begin()->first, C.rbegin()->first - C.begin()->first));\n            insert_id(id);\n        }\n        if (C.rbegin()->second.size() == 1) {\n            auto id = *(C.rbegin()->second.begin());\n            remove_id(id);\n            res = min(res, max(R.rbegin()->first - R.begin()->first, C.rbegin()->first - C.begin()->first));\n            insert_id(id);\n        }\n        return res;\n    }\n};"
}