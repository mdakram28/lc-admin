{
    "username": "Nikunj_Gupta_734",
    "submission": "#define ll long long\nclass DSU{\npublic:\n    vector<ll>parent;\n    vector<ll>size;\n    vector<vector<ll>>wides;\n\n    DSU(ll n){\n        parent.resize(n+1, 0);\n        size.resize(n+1, 1);\n        wides.resize(n+1, vector<ll>(4));\n        for(ll i=0; i<=n; i++){\n            parent[i] = i;\n            wides[i][0] = INT_MIN;\n            wides[i][1] = INT_MAX;\n            wides[i][2] = INT_MIN;\n            wides[i][3] = INT_MAX;\n        }\n    }\n\n    ll find(ll x){\n        if(parent[x]==x){\n            return x;\n        }\n        return parent[x] = find(parent[x]);\n    }\n\n    void unite(ll x, ll y){\n        ll px = find(x);\n        ll py = find(y);\n\n        if(px==py)return;\n\n        if(size[py] > size[px]){\n            swap(px, py);\n        }\n\n        parent[py] = px;\n        size[px] += size[py];\n        wides[px][0] = max(wides[py][0], wides[px][0]);\n        wides[px][1] = min(wides[py][1], wides[px][1]); \n        wides[px][2] = max(wides[py][2], wides[px][2]); \n        wides[px][3] = min(wides[py][3], wides[px][3]); \n    }\n\n    void updateWides(ll x, vector<int>&positions){\n        ll r = positions[0], c = positions[1], radius = positions[2];\n        if(wides[x][0]==INT_MIN){\n            wides[x][0] = max(wides[x][0],  r + radius);\n        }\n        if(wides[x][1]==INT_MAX){\n            wides[x][1] = min(wides[x][1],  r - radius);\n        }\n        if(wides[x][2]==INT_MIN){\n            wides[x][2] = max(wides[x][2],  c + radius);\n        }\n        if(wides[x][3]==INT_MAX){\n            wides[x][3] = min(wides[x][3],  c - radius);\n        }\n    }\n};\nclass Solution {\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        ll n = circles.size();\n\n        DSU dsu(n);\n        set<int>st;\n        for(ll i=0; i<n; i++){\n             dsu.updateWides(i, circles[i]);\n             ll x = circles[i][0], y = circles[i][1], r = circles[i][2];\n             if((X-x)*(X-x) + (Y-y)*(Y-y) <= r*r){\n                return false;\n             }\n             st.insert(i);\n        }\n\n        for(ll i=0; i<n; i++){\n            for(ll j=i+1; j<n; j++){\n                ll x1 = circles[i][0], x2 = circles[j][0], y1 = circles[i][1], y2 = circles[j][1], r1 = circles[i][2], r2 = circles[j][2];\n                ll centreDist = ((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));\n                ll radiusDist = (r1 + r2)*(r1 + r2);\n                if(centreDist <= radiusDist){\n                    dsu.unite(i, j);\n                    st.erase(j);\n                }\n            }\n        }\n\n        for(auto i: st){\n            // cout << dsu.wides[i][0] << \" \" << dsu.wides[i][1] << \" \" << dsu.wides[i][2] << \" \" << dsu.wides[i][3] << \"\\n\";\n            if((dsu.wides[i][0]>=X && dsu.wides[i][2]>=Y) || (dsu.wides[i][1]<=0 && dsu.wides[i][3]<=0) || (dsu.wides[i][2]>=Y && dsu.wides[i][3]<=0) || (dsu.wides[i][0]>=X && dsu.wides[i][1]<=0)){\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1722138762",
    "subm_id": "1335798978"
}