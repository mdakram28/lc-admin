{
    "username": "Harshit9322",
    "submission": "class Solution {\npublic:\n    void visited(const vector<vector<int>>& adj, int node, int d, vector<int>& dist, int& afarN) {\n        dist[node] = d;\n        if (d > dist[afarN]) {\n            afarN = node;\n        }\n        for (int neighbor : adj[node]) {\n            if (dist[neighbor] == -1) {\n                visited(adj, neighbor, d + 1, dist, afarN);\n            }\n        }\n    }\n\n    int dfs(const vector<vector<int>>& adj, int start, int& afarN) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        afarN = start;\n        visited(adj, start, 0, dist, afarN);\n        return dist[afarN];\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int afarN1 = 0;\n        dfs(adj1, 0, afarN1);\n        int D1 = dfs(adj1, afarN1, afarN1);\n\n        int afarN2 = 0;\n        dfs(adj2, 0, afarN2);\n        int D2 = dfs(adj2, afarN2, afarN2);\n\n        int minD = max(D1, D2);\n        int mid1 = (D1 + 1) / 2;\n        int mid2 = (D2 + 1) / 2;\n        minD = max(minD, mid1 + mid2 + 1);\n\n        return minD;\n    }\n};\n",
    "submit_ts": "1719717547",
    "subm_id": "1304394461"
}