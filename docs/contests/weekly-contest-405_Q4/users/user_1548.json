{
    "username": "cokefan",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.val = -1\n        self.next = dict()\n\nclass Solution:\n    def minimumCost(self, s: str, words: List[str], costs: List[int]) -> int:\n        if not s:\n            return 0\n        \n        if not words:\n            return -1\n\n        root = TrieNode()\n\n        def add_word(w, cost):\n            cur = root\n            for i in range(len(w)-1, -1, -1):\n                if w[i] not in cur.next:\n                    cur.next[w[i]] = TrieNode()\n                cur = cur.next[w[i]]\n            \n            if cur.val == -1:\n                cur.val = cost\n            else:\n                cur.val = min(cur.val, cost)\n        \n        for w, c in zip(words, costs):\n            add_word(w, c)\n        \n        m = len(s)\n        dp = [-1] * (m+1)\n        dp[0] = 0\n        for i in range(m):\n            cur = root\n            for j in range(i, -1, -1):\n                if s[j] not in cur.next:\n                    break\n                cur = cur.next[s[j]]\n\n                if dp[j] == -1:\n                    continue\n\n                if cur.val == -1:\n                    continue\n                \n                if dp[i+1] == -1:\n                    dp[i+1] = dp[j] + cur.val\n                else:\n                    dp[i+1] = min(dp[i+1], dp[j] + cur.val)\n\n        # print(dp)\n        \n        return dp[-1]\n\n        \n",
    "submit_ts": "1720322954",
    "subm_id": "1312363531"
}