{
    "username": "chauri_chaura",
    "submission": "class Solution {\n    long dfs(int[] diff, int n, int start, int end, long offset) {   \n        // System.out.println(\"start = \"+start+\"end = \"+end);     \n        if (start > end) {\n            return 0;\n        }\n\n        if(start == end)\n            return Math.abs(diff[start])-offset;\n        \n        long res = 0;\n        long min = Integer.MAX_VALUE;\n        List<Integer> min_idx = new ArrayList<>();\n\n        \n        for (int i = start; i <= end; i++) {\n            if(Math.abs(diff[i])<min){\n                min = Math.abs(diff[i]);\n                min_idx = new ArrayList<>();\n                min_idx.add(i);\n            } else if(Math.abs(diff[i]) == min){\n                min_idx.add(i);\n            }\n        }\n\n        res += min-offset;\n        int st = start;\n        for(int i=0;i<min_idx.size();i++){\n            res += dfs(diff, n, st, min_idx.get(i)-1, min);\n            st = min_idx.get(i)+1;\n        }\n\n        if (st <= end) {\n            res += dfs(diff, n, st, end, min);\n        }\n        \n        return res;\n    }\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        int[] diff = new int[n];\n\n        int count = 0;\n\n        for(int i=0;i<n;i++){\n            diff[i] = target[i]-nums[i];\n        }\n        boolean positive = diff[0]>=0;\n        int st = 0;\n\n        long res = 0;\n\n        for(int i=1;i<n;i++){\n            if(positive && diff[i]<0){\n                res+=dfs(diff, n, st, i-1, 0);\n                positive = false;\n                st = i;\n            }else if(!positive && diff[i]>=0){\n                res+=dfs(diff, n, st, i-1, 0);\n                positive = true;\n                st = i;\n            }\n        }\n\n        res+= dfs(diff, n, st, n-1, 0);\n        \n\n        return res;\n\n    }\n}",
    "submit_ts": "1721533808",
    "subm_id": "1328017104"
}