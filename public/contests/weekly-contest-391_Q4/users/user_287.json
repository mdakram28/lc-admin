{
    "username": "STommydx",
    "submission": "class Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<int> plus(n), minus(n);\n        iota(plus.begin(), plus.end(), 0);\n        iota(minus.begin(), minus.end(), 0);\n        sort(plus.begin(), plus.end(), [&] (int lhs, int rhs) { return points[lhs][0] + points[lhs][1] < points[rhs][0] + points[rhs][1]; });\n        sort(minus.begin(), minus.end(), [&] (int lhs, int rhs) { return points[lhs][0] - points[lhs][1] < points[rhs][0] - points[rhs][1]; });\n        // for (int x : plus) cout << x << ' '; cout << endl;\n        // for (int x : minus) cout << x << ' '; cout << endl;\n        int ans = 0x3f3f3f3f;\n        auto updateAns = [&] (int removedPoint) {\n            int p0 = plus[0] == removedPoint ? plus[1] : plus[0];\n            int p1 = plus[n - 1] == removedPoint ? plus[n - 2] : plus[n - 1];\n            int p2 = minus[0] == removedPoint ? minus[1] : minus[0];\n            int p3 = minus[n - 1] == removedPoint ? minus[n - 2] : minus[n - 1];\n            int cans = 0;\n            vector<int> p{p0, p1, p2, p3};\n            for (int pi : p) for (int pj : p) {\n                cans = max(cans, abs(points[pi][0] - points[pj][0]) + abs(points[pi][1] - points[pj][1]));\n            }\n            // cout << p0 << ' ' << p1 << ' ' << p2 << ' ' << p3 << ' ' << cans << endl;\n            ans = min(ans, cans);\n        };\n        //updateAns(-1);\n        updateAns(plus.front());\n        updateAns(plus.back());\n        updateAns(minus.front());\n        updateAns(minus.back());\n        return ans;\n    }\n};"
}