{
    "username": "211220058",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        m = len(words)\n        \n        word_cost_map = self.build_word_cost_map(words, costs)\n        \n        return self.compute_minimum_cost(target, word_cost_map, n)\n\n    def build_word_cost_map(self, words: List[str], costs: List[int]) -> dict:\n        word_cost_map = {}\n        idx = 0\n        while idx < len(words):\n            word = words[idx]\n            word_cost_map[word] = min(word_cost_map.get(word, float('inf')), costs[idx])\n            idx += 1\n        return word_cost_map\n    \n    def compute_minimum_cost(self, target: str, word_cost_map: dict, n: int) -> int:\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        i = 1\n        while i <= n:\n            word_keys = list(word_cost_map.keys())\n            j = 0\n            while j < len(word_keys):\n                word = word_keys[j]\n                if i >= len(word) and target[i - len(word):i] == word:\n                    dp[i] = min(dp[i], dp[i - len(word)] + word_cost_map[word])\n                j += 1\n            i += 1\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720323873",
    "subm_id": "1312386126"
}