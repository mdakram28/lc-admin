{
    "username": "shreyas_2505",
    "submission": "#define ll long long\n#define INF INT32_MAX\n\nclass solve\n{\n    int sz;\n    vector<ll> tree;\n    public:\n\n    solve( ll n)\n    {\n        sz = 4*n;\n        tree.resize(sz, 0);\n    }\n\n    void build(ll l , ll r, ll i, vector<int> &nums)\n    {\n        if( l == r)\n        {\n            tree[i] = nums[l];\n            return;\n        }\n\n        ll mid = (l + r)/2;\n\n        build(l, mid, i*2 + 1, nums );\n        build(mid + 1, r, i*2 + 2, nums);\n\n        tree[i] =  tree[i*2 +1] & tree[i*2 + 2];\n    }\n\n    ll res(ll l , ll r, ll x, ll y, ll i)\n    {\n        if( r < x || l > y)\n        {\n            return INF;\n        }\n\n        else if( l >= x && r <= y)\n        {\n            return tree[i];\n        }\n\n        ll mid = (l + r)/2;\n\n        return  res(l, mid, x, y, i*2 + 1) & res( mid + 1, r, x, y, i*2 + 2);\n    }\n    \n\n\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        \n    ll n = nums.size();\n    solve st(n);\n        \n    st.build( 0, n-1,0, nums);\n        \n    ll ans = INF;\n    for (int i = 0; i < n; i++) {\n        ll l = i - 1, r = n - 1, mid;\n\n        // binary search implementation\n        while (r - l > 1) {\n            mid = (l + r) / 2;\n            if (st.res(0, n-1,i, mid, 0) >= k)\n                l = mid;\n            else\n                r = mid;\n        }\n        if (l != i - 1)\n            ans = min(ans, abs(st.res(0, n-1,i, l, 0) - k));\n        ans = min(ans, abs(k - st.res(0,n-1,i, r,0)));\n    }\n    return ans;\n        \n    }\n};",
    "submit_ts": 1717298748.0
}