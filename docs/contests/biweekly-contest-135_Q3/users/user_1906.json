{
    "username": "Leaderboard",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        // do we even need to do anything?\n        TreeMap<Integer, Integer> hs = new TreeMap<>();\n        for (int i = 0; i < nums.length/2; i++)\n        {\n            int val = Math.abs(nums[i] - nums[nums.length - i - 1]);\n            hs.put(val, hs.get(val) == null ? 1 : hs.get(val) + 1);\n        }\n        if (hs.size() == 1)\n        return 0;\n\n        TreeMap<Integer, Integer> max_diff = new TreeMap<>(); // what is the maximum diff possible for a pair with only one change required?\n        for (int i = 0; i < nums.length/2; i++)\n        {\n            int e1 = nums[i];\n            int e2 = nums[nums.length - i - 1];\n\n            int less = Math.min(e1, e2);\n            int more = Math.max(e1, e2);\n\n            int max_val = Math.max(more - 0, k - less) + 1; // starting point where this will NOT work!\n\n            if (max_diff.get(max_val) == null)\n            max_diff.put(max_val, 1);\n            else\n            max_diff.put(max_val, max_diff.get(max_val) + 1);\n        }\n\n        // question: what SHOULD we pivot the abs diffs to? And don't forget that k >= nums[i]!!!\n        // we have the diff - set up a prefix sum for number of pairs that can be made to diff with just one change\n        int[] diffs_cnt_1 = new int[k + 1]; // hint: monotonicity\n        int running = 0;\n        for (int i = 0; i <= k; i++)\n        {\n            if (max_diff.containsKey(i))\n            running+=max_diff.get(i);\n            diffs_cnt_1[i] = nums.length/2 - running;\n        }\n        // diffs_cnt_2 is just running anyway\n        int[] existing_diffs = new int[k + 1];\n        for (int i: hs.keySet())\n        {\n            existing_diffs[i] = hs.get(i);\n        }\n\n        // take a walk now to determine the min value\n        int ans = 9999999;\n        for (int i = 0; i <= k; i++)\n        {\n            int d1 = diffs_cnt_1[i] - existing_diffs[i];\n            int d2 = nums.length/2 - diffs_cnt_1[i];\n            int res = 2 * d2 + d1;\n            System.out.println(res);\n            ans = Math.min(ans, res);\n        }\n        // System.out.println(hs);\n        // System.out.println(max_diff);\n        // System.out.println(Arrays.toString(diffs_cnt_1));\n        // System.out.println(Arrays.toString(existing_diffs));\n\n        return ans;\n\n    }\n}",
    "submit_ts": "1721490230",
    "subm_id": "1327476752"
}