{
    "username": "Yogender_K26",
    "submission": "class Solution {\npublic:\n// int solve(vector<string>& words, vector<int>& costs, string target, int pos) {\n//     if (pos == target.size()) {\n//         return 0; // Reached the end of the target string\n//     }\n    \n//     int minCost = INT_MAX;\n//     for (int i = 0; i < words.size(); ++i) {\n//         int wordLength = words[i].size();\n//         if (pos + wordLength <= target.size() && target.substr(pos, wordLength) == words[i]) {\n//             int cost = costs[i] + solve(words, costs, target, pos + wordLength);\n//             minCost = min(minCost, cost);\n//         }\n//     }\n//     return minCost;\n// }\n\n// int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n//     int result = solve(words, costs, target, 0);\n//     return result == INT_MAX ? -1 : result;\n// }\n\n    class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode():cost(INT_MAX){}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        node->cost=min(node->cost,cost);\n    }\n};\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0;\n\n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue;\n        TrieNode* node= trie.root;\n        for (int j=i;j<n;j++) {\n            if(node->children.find(target[j])==node->children.end())break;\n            node=node->children[target[j]];\n            if (node->cost != INT_MAX) {\n                dp[j+1] = min(dp[j+1], dp[i] + node->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720323686",
    "subm_id": "1312381564"
}