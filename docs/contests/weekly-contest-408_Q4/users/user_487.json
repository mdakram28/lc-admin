{
    "username": "explorer245",
    "submission": "from math import sqrt, pow\nfrom collections import deque\n\nclass Solution:\n    def bfs(self, graph, start, target1, target2, nodes):\n        q = deque([start])\n        visited = [0] * (nodes + 4)\n        visited[start] = 1\n        \n        while q:\n            u = q.popleft()\n            for v in graph[u]:\n                if not visited[v]:\n                    q.append(v)\n                    visited[v] = 1\n                    \n        return visited[target1] or visited[target2]\n    \n    def canReachCorner(self, X, Y, circles2):\n        circles = [((circle[0], circle[1]), circle[2]) for circle in circles2]\n        num_circles = len(circles2)\n        graph = [[] for _ in range(num_circles + 4)]\n        \n        for i in range(num_circles):\n            if circles[i][0][0] <= circles[i][1]:\n                graph[num_circles].append(i)\n                graph[i].append(num_circles)\n            if X - circles[i][0][0] <= circles[i][1]:\n                graph[num_circles + 2].append(i)\n                graph[i].append(num_circles + 2)\n            if circles[i][0][1] <= circles[i][1]:\n                graph[num_circles + 1].append(i)\n                graph[i].append(num_circles + 1)\n            if Y - circles[i][0][1] <= circles[i][1]:\n                graph[num_circles + 3].append(i)\n                graph[i].append(num_circles + 3)\n            \n            for j in range(i + 1, num_circles):\n                distance = sqrt(pow(circles[i][0][0] - circles[j][0][0], 2) +\n                                pow(circles[i][0][1] - circles[j][0][1], 2))\n                radius_sum = circles[i][1] + circles[j][1]\n                if radius_sum >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n        \n        is_blocked = 0\n        is_blocked = max(is_blocked, self.bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4))  # Check for bottom-left corner\n        is_blocked = max(is_blocked, self.bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4))  # Check for top-right corner\n\n        if is_blocked:\n            return False\n        return True\n\n",
    "submit_ts": "1722137896",
    "subm_id": "1335776703"
}