{
    "username": "aypatrl",
    "submission": "from sortedcontainers import SortedList\n\nclass FenwickTree:\n    def __init__(self, n):\n        self.n = n\n        self.tree = [0] * (n + 1)\n\n    def update(self, idx, delta):\n        idx += 1\n        while idx <= self.n:\n            self.tree[idx] += delta\n            idx += idx & -idx\n\n    def query(self, idx):\n        idx += 1\n        sum = 0\n        while idx > 0:\n            sum += self.tree[idx]\n            idx -= idx & -idx\n        return sum\n\n    def range_query(self, left, right):\n        return self.query(right) - self.query(left - 1)\n\n                \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        def find_initial_peaks(nums):\n            peaks = SortedList()\n            n = len(nums)\n            for i in range(1, n - 1):\n                if nums[i - 1] < nums[i] > nums[i + 1]:\n                    peaks.add(i)\n            return peaks\n\n        def update_peaks(peaks, fenwick, nums, index):\n            n = len(nums)\n            if index > 0 and index < n - 1:\n                if nums[index - 1] < nums[index] > nums[index + 1]:\n                    if index not in peaks:\n                        peaks.add(index)\n                        fenwick.update(index, 1)\n                else:\n                    if index in peaks:\n                        peaks.remove(index)\n                        fenwick.update(index, -1)\n                        \n        n = len(nums)\n        peaks = find_initial_peaks(nums)\n        fenwick = FenwickTree(n)\n\n        for peak in peaks:\n            fenwick.update(peak, 1)\n\n        results = []\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                if l == r:\n                    results.append(0)\n                else:\n                    results.append(fenwick.range_query(l + 1, r - 1))\n            elif query[0] == 2:\n                index, val = query[1], query[2]\n                if index > 0:\n                    update_peaks(peaks, fenwick, nums, index - 1)\n                if index < len(nums) - 1:\n                    update_peaks(peaks, fenwick, nums, index + 1)\n                nums[index] = val\n                if index > 0:\n                    update_peaks(peaks, fenwick, nums, index - 1)\n                if index < len(nums) - 1:\n                    update_peaks(peaks, fenwick, nums, index + 1)\n                update_peaks(peaks, fenwick, nums, index)\n\n        return results\n        \n\n        \n    \n",
    "submit_ts": 1718507879.0
}