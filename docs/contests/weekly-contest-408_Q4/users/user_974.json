{
    "username": "imvishal924",
    "submission": "class Solution {\npublic:\nbool bfs(const vector<vector<int>>& graph, int start, int target1, int target2, int totalNodes) {\n    queue<int> toVisit;\n    toVisit.push(start);\n    vector<bool> visited(totalNodes + 4, false);\n    visited[start] = true;\n\n    while (!toVisit.empty()) {\n        int current = toVisit.front();\n        toVisit.pop();\n        for (int neighbor : graph[current]) {\n            if (!visited[neighbor]) {\n                toVisit.push(neighbor);\n                visited[neighbor] = true;\n            }\n        }\n    }\n    return visited[target1] || visited[target2];\n}\n    bool canReachCorner(int xBound, int yBound, const vector<vector<int>>& circles) {\n    int numCircles = circles.size();\n    vector<vector<int>> adjacencyList(numCircles + 4);\n\n    for (int i = 0; i < numCircles; ++i) {\n        int cx = circles[i][0], cy = circles[i][1], cr = circles[i][2];\n        if (cx <= cr) {\n            adjacencyList[numCircles].push_back(i);\n            adjacencyList[i].push_back(numCircles);\n        }\n        if (xBound - cx <= cr) {\n            adjacencyList[numCircles + 2].push_back(i);\n            adjacencyList[i].push_back(numCircles + 2);\n        }\n        if (cy <= cr) {\n            adjacencyList[numCircles + 1].push_back(i);\n            adjacencyList[i].push_back(numCircles + 1);\n        }\n        if (yBound - cy <= cr) {\n            adjacencyList[numCircles + 3].push_back(i);\n            adjacencyList[i].push_back(numCircles + 3);\n        }\n        for (int j = i + 1; j < numCircles; ++j) {\n            int cx2 = circles[j][0], cy2 = circles[j][1], cr2 = circles[j][2];\n            double dist = sqrt(pow(cx - cx2, 2) + pow(cy - cy2, 2));\n            int radiusSum = cr + cr2;\n            if (radiusSum >= dist) {\n                adjacencyList[i].push_back(j);\n                adjacencyList[j].push_back(i);\n            }\n        }\n    }\n\n    bool isPathBlocked = false;\n    isPathBlocked = max(isPathBlocked, bfs(adjacencyList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4));  // Check from bottom-left\n    isPathBlocked = max(isPathBlocked, bfs(adjacencyList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4));  // Check from top-right\n\n    return !isPathBlocked;\n    }\n};",
    "submit_ts": "1722139165",
    "subm_id": "1335809747"
}