{
    "username": "MeetBrahmbhatt",
    "submission": "const int inf = 1e9;\n\nstruct Node {\npublic :\n    Node *links[26];\n    int cost = inf;\n};\n\nclass Trie {\npublic :\n    Node *root;\n    Trie() {\n        root = new Node();\n    }\n    void add(string n, int _cost) {\n        Node *x = root;\n        for (int i = 0; i < (int) n.size(); i++) {\n            int b = n[i] - 'a';\n            if (!x->links[b]) {\n                x->links[b] = new Node();\n            }\n            x = x->links[b];\n        }\n        x->cost = min(x->cost, _cost);\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = (int) target.size();\n        int m = (int) words.size();\n        \n        Trie T;\n        vector<int> dp(n + 1, inf);\n        dp[0] = 0;\n        \n        for (int i = 0; i < m; i++) {\n            T.add(words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == inf) {\n                continue;\n            }\n            Node *cur = T.root;\n            for (int j = i; j < n; j++) {\n                int ch = target[j] - 'a';\n                if (!cur->links[ch]) {\n                    break;\n                } \n                cur = cur->links[ch];\n                if (cur->cost < inf) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cur->cost);\n                }\n            }\n        }\n        \n        return dp[n] == inf ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321259",
    "subm_id": "1312317929"
}