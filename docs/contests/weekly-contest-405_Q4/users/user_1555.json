{
    "username": "_amn_jain_",
    "submission": "\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    long long cost;\n    TrieNode() : cost(LLONG_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string word, long long cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<long long> dp(n + 1, LLONG_MAX);\n        dp[n] = 0; // Base case: cost to transform an empty suffix is 0\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        for (int i = n - 1; i >= 0; i--) {\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n                if (node->cost != LLONG_MAX && dp[j + 1] != LLONG_MAX) {\n                    dp[i] = min(dp[i], node->cost + dp[j + 1]);\n                }\n            }\n        }\n        \n        return dp[0] == LLONG_MAX ? -1 : dp[0];\n    }\n};\n",
    "submit_ts": "1720323566",
    "subm_id": "1312378669"
}