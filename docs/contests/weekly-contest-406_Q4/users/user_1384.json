{
    "username": "KrishnaSunilSadar",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n    sort(horizontalCut.rbegin(), horizontalCut.rend());\n    sort(verticalCut.rbegin(), verticalCut.rend());\n\n    int horizontalIndex = 0, verticalIndex = 0;\n    int horizontalPieces = 1, verticalPieces = 1;\n    long long totalCost = 0;\n\n    // Perform the cuts in a greedy manner\n    while (horizontalIndex < horizontalCut.size() && verticalIndex < verticalCut.size()) {\n        if (horizontalCut[horizontalIndex] > verticalCut[verticalIndex]) {\n            totalCost += static_cast<long long>(horizontalCut[horizontalIndex]) * verticalPieces;\n            horizontalPieces++;\n            horizontalIndex++;\n        } else {\n            totalCost += static_cast<long long>(verticalCut[verticalIndex]) * horizontalPieces;\n            verticalPieces++;\n            verticalIndex++;\n        }\n    }\n\n    // Add remaining horizontal cuts\n    while (horizontalIndex < horizontalCut.size()) {\n        totalCost += static_cast<long long>(horizontalCut[horizontalIndex]) * verticalPieces;\n        horizontalIndex++;\n    }\n\n    // Add remaining vertical cuts\n    while (verticalIndex < verticalCut.size()) {\n        totalCost += static_cast<long long>(verticalCut[verticalIndex]) * horizontalPieces;\n        verticalIndex++;\n    }\n\n    return totalCost;\n}\n};",
    "submit_ts": "1720926225",
    "subm_id": "1320279679"
}