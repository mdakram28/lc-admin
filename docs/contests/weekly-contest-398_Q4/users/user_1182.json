{
    "username": "MOHITRAWAT061",
    "submission": "class Solution {\nprivate:\n    unordered_map<int, vector<vector<int>>> dp;\n    const int MOD = 1e9 + 7;\n    const int MAX_JUMP = 31;\n    const int OFFSET = 5;\n    int dfs(int tgt, int cur, int jmp, bool canDescend) {\n        if (cur > tgt + OFFSET) return 0;\n        if (jmp > MAX_JUMP) return 0;\n        if (dp.count(cur) && dp[cur][jmp][canDescend] != -1) return dp[cur][jmp][canDescend];\n        int ways = (cur == tgt);\n        if (canDescend) ways += dfs(tgt, cur - 1, jmp, false);\n        if (cur + (1 << jmp) <= tgt + 1) ways += dfs(tgt, cur + (1 << jmp), jmp + 1, true);\n        dp[cur].resize(MAX_JUMP + 1, vector<int>(2, -1));\n        return dp[cur][jmp][canDescend] = ways % MOD;\n    }\npublic:\n    int waysToReachStair(int k) {\n        return dfs(k, 1, 0, true);\n    }\n};\n",
    "submit_ts": "1716089841",
    "subm_id": "1261852656"
}