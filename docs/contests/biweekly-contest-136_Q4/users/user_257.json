{
    "username": "Ferrriccc",
    "submission": "class Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n\n        vector<vector<int>> g(n);\n        for (auto v : edges) {\n            g[v[0]].push_back(v[1]);\n            g[v[1]].push_back(v[0]);\n        }\n\n        vector<int> base(n, 1e9);\n        vector<int> inside(n, 0);\n        auto calBase = [&](auto &&sl, int u, int v = -1) -> void {\n            if (v != -1)\n                base[u] = base[v] + 1 + (u % 2 == 0);\n            inside[u] = base[u];\n            for (int c : g[u]) if (c != v) {\n                sl(sl, c, u);\n                inside[u] = max(inside[u], inside[c]);\n            }\n        };\n        calBase(calBase, 0);\n\n        for (int i = 0; i < n; ++i)\n            inside[i] -= base[i];\n\n        vector<int> ans(n);\n        vector<int> outside(n, 0);\n        auto go = [&](auto &&sl, int u, int v = -1) -> void {\n            ans[u] = max(inside[u], outside[u]);\n\n            multiset<int> cur;\n            int my = 1 + (u % 2 == 0);\n            for (int c : g[u]) if (c != v) {\n                cur.insert(inside[c] + my + 1 + (c % 2 == 0));\n            }\n\n            for (int c : g[u]) if (c != v) {\n                int cost = inside[c] + my + 1 + (c % 2 == 0);\n                cur.erase(cur.find(cost));\n                int mx = (cur.empty() ? 0 : *cur.rbegin());\n\n                outside[c] = max({outside[u] + my, mx, my});\n\n                sl(sl, c, u);\n\n                cur.insert(cost);\n            }\n        };\n        go(go, 0);\n\n        return ans;\n    }\n};",
    "submit_ts": "1722699155",
    "subm_id": "1343203101"
}