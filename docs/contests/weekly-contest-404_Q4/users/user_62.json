{
    "username": "colicon",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\nclass Solution {\npublic:\n    int diam(vector<vector<int>>& adj) {\n        int n = size(adj);\n        \n        vector<int> dist(n, -1);\n        dist[0] = 0;\n        queue<int> q; q.push(0);\n        while (not empty(q)) {\n            int c = q.front(); q.pop();\n            \n            for (auto ne: adj[c]) {\n                if (dist[ne] == -1) {\n                    dist[ne] = dist[c] + 1;\n                    q.push(ne);\n                }\n            }\n        }\n        \n        int e = max_element(dist.begin(), dist.end()) - dist.begin();\n        \n        dist.assign(n, -1);\n        dist[e] = 0;\n        q.push(e);\n        while (not empty(q)) {\n            int c = q.front(); q.pop();\n\n            for (auto ne: adj[c]) {\n                if (dist[ne] == -1) {\n                    dist[ne] = dist[c] + 1;\n                    q.push(ne);\n                }\n            }\n        }\n\n\n        return *max_element(dist.begin(), dist.end());\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = size(edges1)+1;\n        vector<vector<int>> adj1(n);\n        for (auto c: edges1) {\n            int a = c[0], b = c[1];\n            adj1[a].push_back(b);\n            adj1[b].push_back(a);\n        }\n        n = size(edges2)+1;\n        vector<vector<int>> adj2(n);\n        for (auto c: edges2) {\n            int a = c[0], b = c[1];\n            adj2[a].push_back(b);\n            adj2[b].push_back(a);\n        }\n\n        int d1 = diam(adj1), d2 = diam(adj2);\n        return max(1 + (d1+1)/2 + (d2+1)/2, max(d1, d2));\n    }\n};\n",
    "submit_ts": 1719716612.0
}