{
    "username": "umang_20",
    "submission": "class Solution {\npublic:\n    vector<int> tree;\n    int n;\n\n    // Function to build the Segment Tree\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n\n\n    long long query(long long node, long start, long end, long l, long r)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        long long mid = (start + end) / 2ll;\n        long p1 = query(2 * node + 1, start, mid, l, r);\n        long p2 = query(2 * node + 2, mid + 1, end, l, r);\n\n\n        return p1 & p2;\n    }\n\n    int minimumDifference(vector<int>& nums, int k) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n        long long ans = INT_MAX;\n        for (long long i = 0; i < n; i++) {\n            long long l = i - 1, r = n - 1, mid;\n\n            while (r > l+1) {\n                mid = (l + r) / 2ll;\n                if (query(0ll, 0ll, n - 1, i, mid) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = min(ans, abs(query(0ll, 0ll, n - 1, i, l)- k));\n            ans = min(ans, abs(k - query(0ll, 0ll, n - 1, i, r)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1717298980",
    "subm_id": "1274797873"
}