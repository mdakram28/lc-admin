{
    "username": "Alpha_Beta_gamma_123",
    "submission": "const int MOD = 1000000007;\nconst int MAX_INVERSIONS = 400;\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long long>> permCounts(n + 1, vector<long long>(MAX_INVERSIONS + 1, 0));\n        computePermutations(n, permCounts, reqMap);\n        \n        return calculateResult(n, permCounts);\n    }\n\nprivate:\n    void computePermutations(int n, vector<vector<long long>>& permCounts, unordered_map<int, int>& reqMap) {\n        permCounts[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                for (int newPos = 0; newPos < length; newPos++) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            applyRequirements(length, permCounts, reqMap);\n        }\n    }\n\n    void applyRequirements(int length, vector<vector<long long>>& permCounts, unordered_map<int, int>& reqMap) {\n        if (reqMap.count(length)) {\n            int targetInv = reqMap[length];\n            for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n                if (inv != targetInv) {\n                    permCounts[length][inv] = 0;\n                }\n            }\n        }\n    }\n\n    int calculateResult(int n, vector<vector<long long>>& permCounts) {\n        long long result = 0;\n        for (int inv = 0; inv <= MAX_INVERSIONS; inv++) {\n            result = (result + permCounts[n][inv]) % MOD;\n        }\n        return static_cast<int>(result);\n    }\n};\n",
    "submit_ts": "1719071135",
    "subm_id": "1296839858"
}