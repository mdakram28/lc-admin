{
    "username": "dakshgupta",
    "submission": "class Solution {\npublic:\n    int solve(vector<vector<int>>&adj, int s, int a, int b, int n){\n        queue<int>q;\n        vector<int>vis(n+4,0);\n        q.push(s);\n        vis[s]=1;\n        while(!q.empty()){\n            int x = q.front();\n            q.pop();\n            \n            for(auto it:adj[x]){\n                if(!vis[it]){\n                    q.push(it);\n                    vis[it]=1;\n                }\n            }\n        }\n        return (vis[a]||vis[b]?1:0);\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>>adj(n+4);\n        for(int i=0; i<n; i++){\n            if(circles[i][0]<=circles[i][2]){\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if(X-circles[i][0]<=circles[i][2]){\n                adj[n+2].push_back(i);\n                adj[i].push_back(n+2);\n            }\n            if(circles[i][1]<=circles[i][2]){\n                adj[n+1].push_back(i);\n                adj[i].push_back(n+1);\n            }\n            if(Y-circles[i][1]<=circles[i][2]){\n                adj[n+3].push_back(i);\n                adj[i].push_back(n+3);\n            }\n            \n            for(int j=i+1; j<n; j++){\n                double dist = sqrt(pow(circles[i][0]-circles[j][0],2) + pow(circles[i][1]-circles[j][1],2));\n                int radiusSummation = circles[i][2]+circles[j][2];\n                if(radiusSummation>=dist){\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        int ans=0;\n        ans = max(ans,solve(adj,n,n+1,n+2,n+4));\n        ans = max(ans,solve(adj,n+3,n+2,n+1,n+4));\n        return ans==0;\n    }\n};",
    "submit_ts": "1722138579",
    "subm_id": "1335794372"
}