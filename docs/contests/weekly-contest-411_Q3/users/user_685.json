{
    "username": "EdwardZhou1",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n        else if (k == 2) {\n            if (n == 1) return \"8\";\n            else return '8' + string(n-2, '9') + '8';\n        }\n        else if (k == 4) {\n            if (n <= 4) return string(n, '8');\n            else return \"88\" + string(n-4, '9') + \"88\";\n        }\n        else if (k == 5) {\n            if (n == 1) return \"5\";\n            else return '5' + string(n-2, '9') + '5';\n        }\n        else if (k == 6) {\n            if (n == 1) return \"6\";\n            else if (n == 2) return \"66\";\n            else if (n % 2 == 0) return '8' + string(n/2-2, '9') + \"77\" + string(n/2-2, '9') + '8';\n            else return '8' + string((n-1)/2-1, '9') + '8' + string((n-1)/2-1, '9') + '8';\n        }\n        else if (k == 7) {\n            int mod[] = {2,6,4,5,1,3};\n            if (n == 1) return \"7\";\n            else if (n == 2) return \"77\";\n            int missing;\n            for (int i = 9; i >= 0; i--) {\n                stack<int> test;\n                if (n % 2 == 0) {\n                    for (int i = 0; i < n/2-1; i++) test.push(9);\n                    test.push(i);\n                    test.push(i);\n                    for (int i = 0; i < n/2-1; i++) test.push(9);\n                }\n                else {\n                    for (int i = 0; i < (n-1)/2; i++) test.push(9);\n                    test.push(i);\n                    for (int i = 0; i < (n-1)/2; i++) test.push(9);\n                }\n                bool outer = false;\n                while (!test.empty()) {\n                    int last = test.top();\n                    test.pop();\n                    last *= 2;\n                    int remaining = 0;\n                    int num_digits = 0;\n                    while(!test.empty() && remaining < last) {\n                        int append = test.top();\n                        for (int j = 0; j < num_digits; j++) append *= 10;\n                        remaining += append;\n                        test.pop();\n                        num_digits++;\n                    }\n                    remaining -= last;\n                    if (test.empty()) {\n                        if (remaining % 7 == 0) {\n                            outer = true;\n                            missing = i;\n                        }\n                    }\n                    else {\n                        for (int j = num_digits; j > 0; j--) {\n                            int div = 1;\n                            for (int k = 0; k < j-1; k++) div *= 10;\n                            test.push(remaining/div);\n                            remaining %= div;\n                        }\n                    }\n                }\n                if (outer) break;\n            }\n            char char_missing = '0' + missing;\n            if (n % 2 == 0) return string(n/2 - 1, '9') + char_missing + char_missing + string(n/2-1, '9');\n            else return string((n-1)/2, '9') + char_missing + string((n-1)/2, '9');\n        }\n        else {\n            if (n <= 6) return string(n, '8');\n            else return \"888\" + string(n-6, '9') + \"888\";\n        }\n    }\n};",
    "submit_ts": "1723953482",
    "subm_id": "1359822453"
}