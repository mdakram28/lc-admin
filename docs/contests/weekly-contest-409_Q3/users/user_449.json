{
    "username": "harshitchauhan3",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(int n) : n(n) {\n        tree.assign(4 * n, 0);\n    }\n\n    void update(int idx, int value) {\n        update(1, 0, n - 1, idx, value);\n    }\n\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n\n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            tree[node] = max(tree[node], value);\n        } else {\n            int mid = (start + end) / 2;\n            if (idx <= mid) {\n                update(node * 2, start, mid, idx, value);\n            } else {\n                update(node * 2 + 1, mid + 1, end, idx, value);\n            }\n            tree[node] = max(tree[node * 2], tree[node * 2 + 1]);\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = query(node * 2, start, mid, l, r);\n        int rightQuery = query(node * 2 + 1, mid + 1, end, l, r);\n        return max(leftQuery, rightQuery);\n    }\n};\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<priority_queue<int>> adj(n);\n        for(int i=0;i<n-1;i++)\n        {\n            adj[i].push(i+1);\n        }\n        SegmentTree segTree(n+1);\n        int q=queries.size();\n        vector<int> ans;\n        int cost=n-1;\n        for(int i=0;i<q;i++)\n        {\n            int u=queries[i][0];\n            int v=queries[i][1];\n            int last=segTree.query(0,u);\n            // cout<<last<<\"/\";\n            if(last>=v)\n            {\n                ans.push_back(cost);\n            }\n            else\n            {\n                // cout<<u<<v<<\".\";\n                int curr=u;\n                int tmp=0;\n                while(adj[curr].top()!=v)\n                {\n                    tmp++;\n                    curr=adj[curr].top();\n                }\n                cost-=tmp;\n                ans.push_back(cost);\n                adj[u].push(v);\n                segTree.update(u,v);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741840",
    "subm_id": "1343754745"
}