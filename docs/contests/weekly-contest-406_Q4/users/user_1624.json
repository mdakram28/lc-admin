{
    "username": "supriyabharane",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        std::vector<std::pair<int, bool>> cuts;\n        \n        // Add all horizontal cuts\n        for (int cost : horizontalCut) {\n            cuts.emplace_back(cost, true);\n        }\n        \n        // Add all vertical cuts\n        for (int cost : verticalCut) {\n            cuts.emplace_back(cost, false);\n        }\n        \n        // Sort cuts by cost in descending order to use greedy approach\n        std::sort(cuts.begin(), cuts.end(), [](const std::pair<int, bool>& a, const std::pair<int, bool>& b) {\n            return a.first > b.first;\n        });\n        \n        long long totalCost = 0;\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        \n        // Process cuts\n        for (const auto& cut : cuts) {\n            if (cut.second) { // horizontal cut\n                totalCost += cut.first * verticalPieces;\n                horizontalPieces++;\n            } else { // vertical cut\n                totalCost += cut.first * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n};",
    "submit_ts": "1720926067",
    "subm_id": "1320274936"
}