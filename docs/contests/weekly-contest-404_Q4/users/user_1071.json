{
    "username": "MeeT_2",
    "submission": "class Solution {\npublic:\n    int tree_diameter(const vector<vector<int>>& tree) {\n        int n = tree.size();\n        if (n == 1)\n            return 0;\n\n        vector<int> dist(n, -1);\n        queue<int> q;\n\n        q.push(0);\n        dist[0] = 0;\n        int fn = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int n : tree[node]) {\n                if (dist[n] == -1) {\n                    dist[n] = dist[node] + 1;\n                    q.push(n);\n                    if (dist[n] > dist[fn]) {\n                        fn = n;\n                    }\n                }\n            }\n        }\n\n        q.push(fn);\n        dist.assign(n, -1);\n        dist[fn] = 0;\n        int d = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int n : tree[node]) {\n                if (dist[n] == -1) {\n                    dist[n] = dist[node] + 1;\n                    q.push(n);\n                    d = max(d, dist[n]);\n                }\n            }\n        }\n\n        return d;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> tree1(n);\n        vector<vector<int>> tree2(m);\n\n        for (const auto& edge : edges1) {\n            tree1[edge[0]].push_back(edge[1]);\n            tree1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            tree2[edge[0]].push_back(edge[1]);\n            tree2[edge[1]].push_back(edge[0]);\n        }\n\n        int d1 = tree_diameter(tree1);\n        int d2 = tree_diameter(tree2);\n\n        return max({d1, d2,\n                    (d1 + 1) / 2 + 1 + (d2 + 1) / 2});\n    }\n};",
    "submit_ts": "1719719590",
    "subm_id": "1304445675"
}