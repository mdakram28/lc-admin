{
    "username": "NirbhayPaliwal",
    "submission": "class Solution {\npublic:\n    vector<vector<int>>g;\n    vector<int> sub,ans;\n    int dfs(int node,int par)\n    {   \n        int ans = 0;\n        for(auto child: g[node])\n        {\n            if(child == par)continue;\n            ans=max(ans,dfs(child,node));\n        }\n        if(node&1) sub[node]=ans+1;\n        else sub[node]=ans+2;\n        return sub[node];        \n    }\n    void dfs2(int node,int par,int time)\n    {\n        multiset<int> m={time};\n        for(auto child : g[node])\n        {\n            if(child==par)continue;\n            m.insert(sub[child]);\n        }\n        ans[node]=*(--m.end());\n        for(auto child : g[node])\n        {\n            if(child == par)continue;\n            m.erase(m.find(sub[child]));\n            dfs2(child,node,*(--m.end())+2-(node&1));\n            m.insert(sub[child]);\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size()+1;\n        g.resize(n);\n        sub.resize(n);\n        ans.resize(n);\n        for(auto v : edges) \n        {\n            int u = v[0];\n            int vv  = v[1];\n            g[u].push_back(vv);\n            g[vv].push_back(u);\n        }\n        dfs(0,-1);\n        dfs2(0,-1,0);\n        return ans;\n    }\n};",
    "submit_ts": "1722699098",
    "subm_id": "1343201382"
}