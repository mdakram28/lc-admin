{
    "username": "itsayush2811",
    "submission": "class Solution {\npublic:\n    const int modm=1e9+7;\n    // int n;\n    // map<vector<int>,int> dp[305][305];    \n    // int solveDP(int idx,int j,vector<int>& vis){\n    //     if(dp[idx][j][vis]!=dp[idx][j].end()){return dp[idx][j][vis];}\n    //     int res=0;\n    //     for(int i=0;i<n;i++){\n    //         vis[i]=1;\n    //         res+= solveDP(idx-1,j)\n    //         vis[i]=0;\n    //     }\n    //     return 0;\n    // }\n    \nconst int MOD = 1e9 + 7;\n\n// int dp2[305][50001];\nint countValidPermutations(int n, vector<vector<int>>& requirements) {\nvector<vector<int>> dp(n+1, vector<int>(((n * (n + 1) )/ 2) + 1, 0));\n    dp[0][0] = 1;\n\n    for (int len = 1; len <= n; ++len) {\n        for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n            if (dp[len - 1][inv] > 0) {\n                for (int i = 0; i <= len; ++i) {\n                    int newInv = inv + i;\n                    if (newInv <= len * (len + 1) / 2) {\n                        dp[len][newInv] = (dp[len][newInv] + dp[len - 1][inv]) % MOD;\n                    }\n                }\n            }\n        }\n    }\n    // cout<<n<<\" \"<<((n * (n - 1) )/ 2) + 1<<\"@@\\n\";\n    // cout<<dp[1][1]<<\"\\n\";\n    \n\n    int totalPermutations = 0;\n    for (int len = 1; len <= n; ++len) {\n        for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n            bool valid = true;\n            for (auto& req : requirements) {\n                int endi = req[0];\n                int cnti = req[1];\n                if ((len - 1) == endi && inv != cnti) {\n                    valid = false;\n                    break;\n                }\n            }\n            if (valid) {\n                totalPermutations = (totalPermutations+ dp[len - 1][inv]) % MOD;\n            }\n        }\n    }\n\n    return totalPermutations;\n}\n    int dp2[305][500];\n    int solveDP(int i,int req,vector<vector<int>>& requirements){\n        if(i==0){\n            return dp2[i][req];\n        }\n        if(dp2[i][req]!=-1){return dp2[i][req];}\n        int curLen = (requirements[i][0]-requirements[i-1][0]);\n        int reqInv = (requirements[i][1]-requirements[i-1][1]);\n        int res=0;\n        for(int j=0;j<=reqInv;j++){\n            int tmp= (dp2[curLen][j]%MOD*solveDP(i-1,req-j,requirements))%MOD;\n            res = (res%MOD + tmp)%MOD;\n        }\n        return dp2[i][req] = res;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        // n=requirements.size();\n        const int mxInv=405;\n        unordered_map<int, int> req;\n        for (auto& x : requirements) {\n            req[x[0] + 1] = x[1];\n        }\n\n        vector<vector<long>> dp(n + 1, vector<long>(410, 0));\n        dp[0][0] = 1;\n\n        for (int len = 1; len <= n; len++) {\n            for (int inv = 0; inv <= 405; inv++) {\n                for (int pos = 0; pos < len; pos++) {\n                    int prevInv = inv - pos;\n                    if (prevInv >= 0) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (req.count(len)) {\n                int targetInv = req[len];\n                for (int inv = 0; inv <= 405; inv++) {\n                    if (inv != targetInv) {\n                        dp[len][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        long res = 0;\n        for (long count : dp[n]) {\n            res = (res + count) % MOD;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": 1719070455.0
}