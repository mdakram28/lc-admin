{
    "username": "priyanshu_p28",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        int horizontalPieces = 1;\n        int verticalPieces = 1;  \n\n        long long totalCost = 0; \n        \n        int i = 0, j = 0;\n        \n        while (i < m - 1 && j < n - 1) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += (long long)(horizontalCut[i]) *1LL* verticalPieces;\n                horizontalPieces++; \n                i++; \n            } else {\n                totalCost += (long long)(verticalCut[j]) *1LL* horizontalPieces;\n                verticalPieces++;\n                j++; \n            }\n        }\n\n        while (i < m - 1) {\n            totalCost += (long long)(horizontalCut[i]) *1LL* verticalPieces;\n            i++;\n        }\n\n        while (j < n - 1) {\n            totalCost += (long long)(verticalCut[j]) *1LL* horizontalPieces;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924800",
    "subm_id": "1320231409"
}