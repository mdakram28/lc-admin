{
    "username": "Sixtycat",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        tmp = [nums[idx] - target[idx] for idx in range(len(nums))]\n        # print(tmp)\n        tmp_1 = [max(val, 0) for val in tmp]\n        tmp_2 = [-min(val, 0) for val in tmp]\n        # print(tmp_1)\n        # print(tmp_2)\n        result1 = self.helper(tmp_1)\n        result2 = self.helper(tmp_2)\n        # print(\"resutl1\", result1)\n        # print(\"resutl2\", result2)\n\n        return result1 + result2\n\n    def helper(self, in_list):\n        tmp_max = [in_list[0]]\n        for idx in range(1, len(in_list)):\n            if in_list[idx] == in_list[idx - 1]:\n                continue\n            else:\n                tmp_max.append(in_list[idx])\n\n        best_list = []\n        key_list = []\n        for idx in range(1, len(tmp_max) - 1):\n            if tmp_max[idx - 1] > tmp_max[idx] and tmp_max[idx + 1] > tmp_max[idx]:\n                key_list.append(idx)\n\n        key_list_set = set(key_list)\n        # print(\"key\", key_list_set)\n\n        cur_idx = 0\n        cur_best = 0\n        while cur_idx < len(tmp_max):\n            if cur_idx in key_list_set:\n                best_list.append(cur_best)\n                cur_best = 0\n\n            else:\n                cur_best = max(cur_best, tmp_max[cur_idx])\n\n            cur_idx += 1\n        best_list.append(cur_best)\n        # print(\"best_list\", best_list)\n\n        result = sum(best_list) - sum([tmp_max[idx] for idx in key_list])\n        return result\n\n\n\n\n\n",
    "submit_ts": "1721532106",
    "subm_id": "1327977774"
}