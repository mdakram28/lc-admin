{
    "username": "Hogwartsss",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        n = len(nums)\n        nums.append(0x3f3f3f3f)\n        nodes = [n for i in range(4 * n + 5)]\n        \n        def insert(cur, l, r, idx):\n            if l > r: return\n            if l == r:\n                nodes[cur] = idx\n                return\n            mid = (l + r) // 2\n            if idx <= mid: insert(cur * 2, l, mid, idx)\n            else: insert(cur * 2 + 1, mid + 1, r, idx)\n            if nums[nodes[cur*2]] < nums[nodes[cur*2+1]]:\n                nodes[cur] = nodes[cur*2]\n            else:\n                nodes[cur] = nodes[cur*2+1]\n        \n        def search(cur, l, r, sl, sr):\n            # print(l, r, sl, sr)\n            if l >= sl and r <= sr:\n                # print(l, r, sl, sr, 'return cur:', cur, nodes[cur])\n                return nodes[cur]\n            if l > sr or r < sl:\n                return\n            mid = (l + r) // 2\n            res = 0x3f3f3f3f\n            res_idx = -1\n            if sl <= mid:\n                left_idx = search(cur * 2, l, mid, sl, sr)\n                if res > nums[left_idx]:\n                    res = nums[left_idx]\n                    res_idx = left_idx\n            if sr > mid:\n                right_idx = search(cur * 2 + 1, mid + 1, r, sl, sr)\n                if res > nums[right_idx]:\n                    res = nums[right_idx]\n                    res_idx = right_idx\n            # print(l, r, sl, sr, 'res_idx', res_idx)\n            return res_idx\n        \n        ll = 0\n        rr = n\n        for i in range(n):\n            nums[i] = target[i] - nums[i]\n        # for i in range(n):\n        #     insert(1, ll, rr, i)\n        # print(nodes)\n        \n        def deal(cur, left, right):\n            if left > right: return 0\n            # print('search:', ll, rr, left, right)\n            min_idx = search(1, ll, rr, left, right)\n            # print('min_idx:', min_idx)\n            return nums[min_idx] - cur + deal(nums[min_idx], left, min_idx - 1) + deal(nums[min_idx], min_idx + 1, right)\n        \n        i = 0\n        ans = 0\n        while i < n:\n            while i < n and nums[i] == 0:\n                i += 1\n            if i == n: break\n                \n            left = i\n            while i + 1 < n and nums[i] * nums[i+1] > 0:\n                i += 1\n            nums[left:i+1] = [x if nums[i] > 0 else -x for x in nums[left:i+1]]\n            for j in range(left, i + 1):\n                insert(1, ll, rr, j)\n            \n            ans += deal(0, left, i)\n            \n            i += 1\n        return ans",
    "submit_ts": "1721532665",
    "subm_id": "1327991205"
}