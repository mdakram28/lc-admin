{
    "username": "dwivedi007",
    "submission": "class Solution {\nprivate:\n    int flipCorners(const vector<vector<int>>& grid) {\n        int r = grid.size(), c = grid[0].size();\n        int flp = 0;\n        for (int t = 0, b = r - 1; t < b; t++, b--) {\n            for (int l = 0, r = c - 1; l < r; l++, r--) {\n                int sum = grid[t][l] + grid[t][r] + grid[b][l] + grid[b][r];\n                flp += min(sum, 4 - sum);\n            }\n        }\n        return flp;\n    }\n\n    pair<int, int> flipMiddleRow(const vector<vector<int>>& grid) {\n        int r = grid.size(), c = grid[0].size();\n        if (r % 2 == 0) return {0, 0};\n\n        int flp = 0, ones = 0;\n        int mid = r / 2;\n        for (int l = 0, r = c - 1; l < r; l++, r--) {\n            if (grid[mid][l] != grid[mid][r]) flp++;\n            if (grid[mid][l] == 1 && grid[mid][r] == 1) ones++;\n        }\n        return {flp, ones};\n    }\n\n    pair<int, int> flipMiddleCol(const vector<vector<int>>& grid) {\n        int r = grid.size(), c = grid[0].size();\n        if (c % 2 == 0) return {0, 0};\n\n        int flp = 0, ones = 0;\n        int mid = c / 2;\n        for (int t = 0, b = r - 1; t < b; t++, b--) {\n            if (grid[t][mid] != grid[b][mid]) flp++;\n            if (grid[t][mid] == 1 && grid[b][mid] == 1) ones++;\n        }\n        return {flp, ones};\n    }\n\n    int flipCenter(const vector<vector<int>>& grid) {\n        int r = grid.size(), c = grid[0].size();\n        return (r % 2 && c % 2) ? grid[r/2][c/2] : 0;\n    }\n\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int flp = flipCorners(grid);\n\n        auto [rowFlp, rowOnes] = flipMiddleRow(grid);\n        auto [colFlp, colOnes] = flipMiddleCol(grid);\n\n        flp += rowFlp + colFlp;\n        flp += flipCenter(grid);\n\n        int ones = rowOnes + colOnes;\n        int diff = rowFlp + colFlp;\n\n        if (ones % 2 && diff == 0) flp += 2;\n\n        return flp;\n    }\n};",
    "submit_ts": "1722699571",
    "subm_id": "1343215741"
}