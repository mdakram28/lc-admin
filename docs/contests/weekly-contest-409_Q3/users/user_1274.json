{
    "username": "sushwar16",
    "submission": "class Solution {\npublic:\n int dijkstra(int n, vector<int> adjL[]) {\n        vector<int> dist(n, 1e9);\n        dist[0] = 0;\n        // {distance, node}\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;\n        pq.push({0, 0});\n        while (!pq.empty()) {\n            auto it = pq.top();\n            int distance = it.first;\n            int node = it.second;\n            pq.pop();\n            if (distance > dist[node]) continue;\n            for (auto iter : adjL[node]) {\n                if (dist[iter] > dist[node] + 1) {\n                    dist[iter] = dist[node] + 1;\n                    pq.push({dist[iter], iter});\n                }\n            }\n        }\n        return dist[n - 1] == 1e9 ? -1 : dist[n - 1];\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n        vector<int> adjL[n];\n    for (int i = 0; i < n - 1; i++) {\n        adjL[i].push_back(i + 1);\n    }\n    set<int> parent;\n    for(int i = 0; i < n; i++){\n        parent.insert(i);\n    }\n    vector<int> result;  \n    for(auto query : queries){\n        int l = query[0];\n        int r = query[1];\n        auto lb = parent.lower_bound(l + 1);\n        auto ub = parent.lower_bound(r);\n        parent.erase(lb, ub);\n        result.push_back(parent.size() - 1);  \n    }\n    return result;\n    }\n};",
    "submit_ts": "1722743962",
    "subm_id": "1343803738"
}