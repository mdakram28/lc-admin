{
    "username": "Ujjwal Sharma",
    "submission": "class Solution {\n    Boolean[][][] memo;\n    int[] number;\n    int[] pow;\n    public String largestPalindrome(int n, int k) {\n        memo = new Boolean[n][10][k];\n\n        number = new int[n];\n\n        pow = new int[n];\n        pow[0] = 1;\n\n\n        for(int i = 1; i < n; i++){\n            pow[i] = (pow[i - 1] * 10) % k;\n        }\n\n\n        for(int i = 9; i >= 1; i--){\n            if(dp(0, i, 0, n, k)){\n                break;\n            }\n        }\n\n       \n        StringBuilder sb = new StringBuilder();\n\n        for(int x: number){\n            sb.append(x);\n        }\n\n        return sb.toString();\n    }\n\n    private Boolean dp(int idx, int num, int rem, int n, int k){\n        if(idx > ((n - 1) / 2)){\n            return (rem == 0);\n        }\n\n        if(memo[idx][num][rem] == null){\n            int new_rem = 0;\n            if(idx != n - 1 - idx){\n                new_rem = ((rem + ((num * pow[idx]) % k + (num * pow[n - idx - 1]) % k) % k) % k);\n            }\n            else new_rem = ((rem + (num * pow[idx]) % k) % k);\n\n            boolean isValid = false;\n            for(int i = 9; i >= 0; i--){\n                if(dp(idx + 1, i, new_rem, n, k)){\n                    isValid = true;\n                    break;\n                }\n            }\n\n\n            memo[idx][num][rem] = isValid;\n        }\n\n        number[idx] = num;\n        number[n - idx - 1] = num;\n\n        return memo[idx][num][rem];\n    }\n}",
    "submit_ts": "1723952226",
    "subm_id": "1359791095"
}