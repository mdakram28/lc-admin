{
    "username": "RohitAgarwal1",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long count = 0;\n        unordered_map<int, int> p;\n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<int, int> t;\n            \n            if (nums[i] == k) {\n                count++;\n            }\n            if (t.find(nums[i]) != t.end()) {\n                t[nums[i]]++;\n            } else {\n                t[nums[i]] = 1;\n            }\n            \n            for (const auto& [val, times] : p) {\n                int tv = val & nums[i];\n                if (tv == k) {\n                    count += times;\n                }\n                if (t.find(tv) != t.end()) {\n                    t[tv] += times;\n                } else {\n                    t[tv] = times;\n                }\n            }\n            \n            p = t;\n        }\n        \n        return count;\n    }\n};",
    "submit_ts": "1720281107",
    "subm_id": "1311813377"
}