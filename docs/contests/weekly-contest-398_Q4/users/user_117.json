{
    "username": "user3911Gz",
    "submission": "\"\"\"\nGo down to stair i - 1. This operation cannot be used consecutively or on stair 0.\nGo up to stair i + 2^jump. And then, jump becomes jump + 1.\n\n        q = deque([(1, False, 0)])\n        ways = 0\n        while q:\n            stair, jumped_down, jump = q.popleft()\n            if stair == k:\n                ways += 1\n            if stair > k + 1:\n                continue\n            if not jumped_down and stair != 0:\n                q.append((stair-1, True, jump))\n            q.append((stair + (1 << jump), False, jump+1))\n\"\"\"\n\nclass Solution:\n    def waysToReachStair(self, k: int) -> int:\n        # ways to jump target steps in total\n        # maybe it's dp(i, jumped_down, jump)\n        # maybe it's just dfs\n        # when does this become impossible?\n        # when stair is further down than 1\n        @cache\n        def dfs(stair, jumped_down, jump):\n            ways = (stair == k)\n            if stair > k + 1:\n                return ways\n            if not jumped_down and stair != 0:\n                ways += dfs(stair-1, True, jump)\n            ways += dfs(stair + (1 << jump), False, jump+1)\n            return ways\n        return dfs(1, False, 0)\n        ",
    "submit_ts": 1716087526.0
}