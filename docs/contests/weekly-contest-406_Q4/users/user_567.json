{
    "username": "Prakharm_614",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n        \n        int h = 0, v = 0; // Pointers for horizontal and vertical cuts\n        int horizontalPieces = 1, verticalPieces = 1; // Initial number of pieces\n        long long totalCost = 0; // Use long long to handle large sums\n        \n        // Loop until all cuts in both arrays are considered\n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                totalCost += (long long)horizontalCut[h] * verticalPieces;\n                horizontalPieces++; // Increase the number of horizontal pieces\n                h++;\n            } else {\n                totalCost += (long long)verticalCut[v] * horizontalPieces;\n                verticalPieces++; // Increase the number of vertical pieces\n                v++;\n            }\n        }\n        \n        // Process remaining horizontal cuts if any\n        while (h < horizontalCut.size()) {\n            totalCost += (long long)horizontalCut[h] * verticalPieces;\n            h++;\n        }\n        \n        // Process remaining vertical cuts if any\n        while (v < verticalCut.size()) {\n            totalCost += (long long)verticalCut[v] * horizontalPieces;\n            v++;\n        }\n        \n        return totalCost;\n    }\n    \n};",
    "submit_ts": "1720925356",
    "subm_id": "1320251936"
}