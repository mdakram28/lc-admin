{
    "username": "user9483Cq",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> graph1, graph2;\n    \n    pair<int, int> bfs(vector<vector<int>>& graph, int start) {\n        vector<int> dist(graph.size(), -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int maxDist = 0, farthestNode = start;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (int neighbor : graph[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > maxDist) {\n                        maxDist = dist[neighbor];\n                        farthestNode = neighbor;\n                    }\n                }\n            }\n        }\n        \n        return {farthestNode, maxDist};\n    }\n    \n    pair<int, int> findLongestPath(vector<vector<int>>& graph) {\n        auto [end1, _] = bfs(graph, 0);\n        auto [end2, length] = bfs(graph, end1);\n        return {length, end1};\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1, n2 = edges2.size() + 1;\n        graph1.resize(n1);\n        graph2.resize(n2);\n        \n        // Build graphs\n        for (auto& edge : edges1) {\n            graph1[edge[0]].push_back(edge[1]);\n            graph1[edge[1]].push_back(edge[0]);\n        }\n        for (auto& edge : edges2) {\n            graph2[edge[0]].push_back(edge[1]);\n            graph2[edge[1]].push_back(edge[0]);\n        }\n        \n        // Find longest paths\n        auto [length1, _] = findLongestPath(graph1);\n        auto [length2, __] = findLongestPath(graph2);\n        \n        // Calculate the diameter of the merged tree\n        return max({(length1 + 1) / 2 + (length2 + 1) / 2 + 1, length1, length2});\n    }\n};",
    "submit_ts": "1719717990",
    "subm_id": "1304405989"
}