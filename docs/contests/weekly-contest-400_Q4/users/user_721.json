{
    "username": "Yao_Yin",
    "submission": "const int N = 1e5 + 10;\nstruct Node {\n    int l, r, val;\n} tree[4*N];\n\nvoid push_up(int u){\n    tree[u].val = (tree[2*u].val & tree[2*u+1].val);\n}\n\nvoid build(int u, int l, int r, vector<int> & v){\n    //cout << u << \" \" << l << \" \"<< r << endl;\n    tree[u].l = l;\n    tree[u].r = r;\n    if (l == r) {\n        tree[u].val = v[l];\n        return;\n    } else {\n        int mid = (l + r) / 2;\n        build(2*u, l, mid, v);\n        build(2*u + 1, mid + 1, r, v);\n        push_up(u);\n    }\n}\n\nint query(int u, int l, int r) {\n    //cout << u <<\"=>\"<<tree[u].l<<\"-\"<<tree[u].r<< \": \" << l << \" \" << r << endl;\n    if(tree[u].l == l && tree[u].r == r) return tree[u].val;\n    else {\n        // case1: left part\n        int mid = (tree[u].l + tree[u].r) / 2;\n        if(r <= mid) {\n            return query(2*u, l, r);\n        } else if(l > mid) {\n            return query(2*u+1, l, r);\n        } else {\n            return query(2*u, l, mid) & query(2*u+1, mid+1, r);\n        }\n    }\n}\n\nint bisearchL(int l, int r, int v) {\n    int res = 1e9+10;\n    int ll = l;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        int curr = query(1, ll, mid);\n        if (curr <= v) {\n            res = v - curr;\n            r = mid - 1;\n        } else {\n            l = mid + 1;\n        }\n    }\n    return res;\n}\n\nint bisearchR(int l, int r, int v) {\n    int ll = l;\n    int res = 1e9+10;\n    while (l <= r) {\n        int mid = (l + r) / 2;\n        int curr = query(1, ll, mid);\n        //cout << l << \" \" << r << \" \" << mid << \" \" << curr << endl;\n        if (curr >= v) {\n            res = curr - v;\n            l = mid + 1;\n        } else {\n            r = mid - 1;\n        }\n    }\n    return res;\n}\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        /*\n        for (int i = 0; i < nums.size(); i ++) {\n            int curr = nums[i];\n            for (int j = i; j < nums.size(); j ++) {\n                curr &= nums[j];\n                cout << curr << \" \";\n            }\n            cout << endl;\n        }*/\n        vector<int> v = nums;\n        int n = nums.size();\n        v.insert(v.begin(), 0);\n        build(1, 1, n, v);\n        int res = abs(k - nums[0]);\n        //bisearchR(2, n, k);\n        //cout << \"stop\" << endl;\n        for (int i = 1; i <= n; i ++) {\n            res = min(res, bisearchL(i, n, k));\n            res = min(res, bisearchR(i, n, k));\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717298829.0
}