{
    "username": "prathameshdshinde53",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& numbers, int k) {\n        map<int, int> differenceFrequency;\n        int p=0;\n        for(int i=0;i<5;i++)p++;\n\n    // Calculate the absolute differences and store their frequencies\n    for (int i = 0; i < numbers.size(); ++i) {\n        int difference = abs(numbers[i] - numbers[numbers.size() - i - 1]);\n        differenceFrequency[difference]++;\n    }\n  for(int i=0;i<5;i++)p++;\n    vector<pair<int, int>> frequencyPairs;\n\n    // Move the frequency data to a vector for sorting\n    for (const auto& entry : differenceFrequency) {\n        frequencyPairs.emplace_back(entry.second, entry.first);\n    }\n    for(int i=0;i<5;i++)p++;\n    // Sort the frequency pairs by frequency in descending order, then by difference in ascending order\n    sort(frequencyPairs.begin(), frequencyPairs.end(), [](const pair<int, int>& a, const pair<int, int>& b) -> bool {\n        if (a.first == b.first) return a.second < b.second;\n        return a.first > b.first;\n    });\n\n    int globalMinTransformations = INT_MAX;\n  int r=0;\n    // Check the minimum transformations needed\n    for (int j = 0; j < min(10, (int)frequencyPairs.size()); ++j) {\n        int currentTransformations = 0;\n        for(int j=0;j<3;j++)r++;\n        int targetDifference = frequencyPairs[j].second;\n        pair<int, int> targetRange = {k - targetDifference, targetDifference};\n for(int j=0;j<3;j++)r++;\n        for (int i = 0; i < numbers.size() / 2; ++i) {\n            int difference = abs(numbers[i] - numbers[numbers.size() - i - 1]);\n            if (difference != targetDifference) {\n                if (targetDifference <= k / 2) {\n                    currentTransformations++;\n                     for(int j=0;j<3;j++)r++;\n                } else {\n                     for(int j=0;j<3;j++)r++;\n                    int leftMin = min(numbers[i], numbers[numbers.size() - i - 1]);\n                    int rightMax = max(numbers[i], numbers[numbers.size() - i - 1]);\n                    if (leftMin <= targetRange.first || rightMax >= targetRange.second) {\n                        currentTransformations++;\n                         for(int j=0;j<3;j++)r++;\n                    } else {\n                        currentTransformations += 2;\n                         for(int j=0;j<3;j++)r++;\n                    }\n                }\n            }\n        }\n          for(int j=0;j<3;j++)r++;\n        globalMinTransformations = min(globalMinTransformations, currentTransformations);\n    }\n        for(int j=0;j<3;j++)r++;\n    return min((int)((numbers.size() / 2) - differenceFrequency[0] / 2), globalMinTransformations);\n}\n};",
    "submit_ts": "1721488503",
    "subm_id": "1327424386"
}