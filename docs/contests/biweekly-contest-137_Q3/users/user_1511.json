{
    "username": "Ritik Kumar",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) \n    {\n        long long int rows = board.size();\nlong long int cols = board[0].size();\nvector<vector<pair<long long int, long long int>>> columnValues(cols);\n\n// Populate columnValues with board values and their row indices\nfor (long long int r = 0; r < rows; ++r) {\n    for (long long int c = 0; c < cols; ++c) {\n        columnValues[c].push_back({board[r][c], r});\n    }\n}\n\n// Sort the column values in descending order\nfor (long long int c = 0; c < cols; ++c) {\n    sort(columnValues[c].rbegin(), columnValues[c].rend());\n}\n\nlong long int maxSum = -1e15;\n\n// Iterate over all possible combinations of 3 columns\nfor (long long int col1 = 0; col1 < cols; ++col1) {\n    for (long long int col2 = col1 + 1; col2 < cols; ++col2) {\n        for (long long int col3 = col2 + 1; col3 < cols; ++col3) {\n            for (long long int row1 = 0; row1 < 3; ++row1) {\n                for (long long int row2 = 0; row2 < 3; ++row2) {\n                    for (long long int row3 = 0; row3 < 3; ++row3) {\n                        if (columnValues[col1][row1].second != columnValues[col2][row2].second &&\n                            columnValues[col2][row2].second != columnValues[col3][row3].second &&\n                            columnValues[col3][row3].second != columnValues[col1][row1].second) {\n                            maxSum = max(maxSum, columnValues[col1][row1].first + columnValues[col2][row2].first + columnValues[col3][row3].first);\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n\nreturn maxSum;\n    }\n};\n",
    "submit_ts": "1723910372",
    "subm_id": "1359228044"
}