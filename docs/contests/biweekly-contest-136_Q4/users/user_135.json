{
    "username": "gcasd001-e",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define ll long long\n#define ull unsigned long long int\n#define db double\n#define ldb long double\n#define int128 __int128_t\n#define fr(x) freopen(x,\"r\",stdin);\n#define fw(x) freopen(x,\"w\",stdout);\n#define mst(x,a) memset(x,a,sizeof(x));\n#define all(x) (x).begin(),(x).end()\n#define rall(x) (x).rbegin(),(x).rend()\n#define fi first\n#define se second\n#define IOS ios::sync_with_stdio(false);cin.tie(0);cout.tie(0);\n#define yes std::cout << \"Yes\\n\"\n#define no std::cout << \"No\\n\"\n#ifdef LOCAL\n#include \"leetcode.h\"\n#endif // LOCAL\ntemplate <typename T> int si(const T &x) { return x.size(); }\ntemplate <typename T, typename S> inline bool chmax(T &a, const S &b) { if (a < b) { a = b; return true; } return false; }\ntemplate <typename T, typename S> inline bool chmin(T &a, const S &b) { if (b < a) { a = b; return true; } return false; }\nconst int mod = 1000000007;\nconst int inf = 0x3f3f3f3f;\n\nclass Solution {\npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n      int n = si(edges) + 1;\n      vector<vector<pair<int, int>>> G(n);\n      auto val = [&](int x) { return (x & 1) ? 1 : 2; };\n      for (auto &v : edges) {\n        G[v[0]].push_back({v[1], val(v[1])});\n        G[v[1]].push_back({v[0], val(v[0])});\n      }\n      \n      vector<int> len(n);\n      vector<int> sec(n);\n      auto upd = [&](int x, int i) {\n        if (x >= len[i]) {\n          sec[i] = len[i];\n          len[i] = x;\n        } else if (x > sec[i]) {\n          sec[i] = x;\n        }\n      };\n      auto dfs = [&](auto &&self, int u, int p) -> void {\n        for (auto [to, x] : G[u]) {\n          if (to == p) continue;\n          self(self, to, u);\n          int now = x + len[to];\n          upd(now, u);\n        }\n      };\n      dfs(dfs, 0, -1);\n      vector<int> ans(n);\n      auto rec = [&](auto &&self, int u, int p) -> void {\n        len[u] = sec[u] = 0;\n        for (auto [to, x] : G[u]) {\n          upd(len[to] + x, u);\n        }\n        ans[u] = len[u];\n        for (auto [to, x] : G[u]) {\n          if (to == p) continue;\n          if (len[u] == len[to] + x) {\n            len[u] = sec[u];\n          }\n          self(self, to, u);\n          len[u] = ans[u];\n        }\n      };\n      rec(rec, 0, -1);\n      return ans;\n    }\n};\n",
    "submit_ts": "1722699031",
    "subm_id": "552273724"
}