{
    "username": "sveng101",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        def largestManhattan(excl_idx: Optional[int]=None) -> Tuple[int, Tuple[List[int]]]:\n            mx_sm, mn_sm = -float(\"inf\"), float(\"inf\")\n            mx_diff, mn_diff = -float(\"inf\"), float(\"inf\")\n            for i, pt in enumerate(points):\n                if i == excl_idx: continue\n                sm = sum(pt)\n                if sm > mx_sm:\n                    mx_sm_inds = [i]\n                    mx_sm = sm\n                elif sm == mx_sm:\n                    mx_sm_inds.append(i)\n                if sm < mn_sm:\n                    mn_sm_inds = [i]\n                    mn_sm = sm\n                elif sm == mn_sm:\n                    mn_sm_inds.append(i)\n                diff = pt[1] - pt[0]\n                if diff > mx_diff:\n                    mx_diff_inds = [i]\n                    mx_diff = diff\n                elif diff == mx_diff:\n                    mx_diff_inds.append(i)\n                if diff < mn_diff:\n                    mn_diff_inds = [i]\n                    mn_diff = diff\n                elif diff == mn_diff:\n                    mn_diff_inds.append(i)\n            d1 = mx_sm - mn_sm\n            d2 = mx_diff - mn_diff\n            if d1 > d2:\n                return (d1, (mx_sm_inds, mn_sm_inds))\n            elif d1 < d2:\n                return (d2, (mx_diff_inds, mn_diff_inds))\n            return (d2, (mx_sm_inds, mn_sm_inds), (mx_diff_inds, mn_diff_inds))\n        \n        ans = largestManhattan()\n        #print(ans)\n        res = float(\"inf\")\n        for lst_pair in ans[1:]:\n            #print(lst_pair)\n            res = min(res, min(largestManhattan(lst_pair[0][0])[0], largestManhattan(lst_pair[1][0])[0]))\n        return res\n        \"\"\"\n        if len(ans) == 3:\n            if len(ans[1][0]) == 1:\n                if len(ans[2][0]) == 1 and ans[1][0] == ans[2][0]:\n                    if len(ans[1][1]) == 1 and len(ans[2][1]) == 1 and ans[1][1] == ans[2][1]:\n                        return max(largestManhattan(ans[1][0][0]), largestManhattan(ans[1][1][0]))\n                    return largestManhattan(ans[1][0][0])\n                if len(ans[2][1]) == 1 and ans[1][0] == ans[2][1]:\n                    if len(ans[1][1]) == 1 and len(ans[2][0]) == 1 and ans[1][1] == ans[2][0]:\n                        return max(largestManhattan(ans[1][0][0]), largestManhattan(ans[1][1][0]))\n                    return largestManhattan(ans[1][0][0])\n            if len(ans[1][1]) == 1\n                if len(ans[2][0]) == 1 and ans[1][1] == ans[2][0]:\n                    return largestManhattan(ans[1][1][0])\n                if len(ans[1][1]) == 1 and len(ans[2][1]) == 1 and ans[1][1] == ans[2][1]:\n                    return largestManhattan(ans[1][1][0])\n            return ans[0]\n        if len(ans[1][0]) == 1:\n            if len(ans[1][1]) == 1:\n                return max(largestManhattan(ans[1][0][0]), largestManhattan(ans[1][1][0]))\n            return largestManhattan(ans[1][0][0])\n        \n        return 0\n        \"\"\""
}