{
    "username": "karton9647",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    \n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);  // Update cost if the word already exists with a lower cost\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        Trie trie;\n        \n        // Insert all words into the Trie with their associated costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        vector<int> dp(n + 1, INT_MAX);  // dp[i] represents the minimum cost to form the first i characters of the target\n        dp[0] = 0;  // No cost to form an empty string\n        \n        // Process each position in the target string\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;  // Skip if this position is unreachable\n            \n            TrieNode* node = trie.root;\n            \n            // Try to extend the substring starting from position i\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;  // Break if the current character is not in the Trie\n                \n                node = node->children[target[j]];\n                \n                if (node->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);  // Update dp[j + 1] if we can form this substring with a lower cost\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];  // Return -1 if it's impossible to form the target, otherwise return the minimum cost\n    }\n};\n\n",
    "submit_ts": "1720323410",
    "subm_id": "1312374877"
}