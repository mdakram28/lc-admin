{
    "username": "carlostagosaku",
    "submission": "class SegTree:\n    \"\"\"\n    Segment Tree\n    \"\"\"\n\n    def __init__(self, init_val, segfunc, ide_ele):\n        \"\"\"\n        \u521d\u671f\u5316\n\n        init_val: \u914d\u5217\u306e\u521d\u671f\u5024\n        \"\"\"\n        n = len(init_val)\n        self.segfunc = segfunc\n        self.ide_ele = ide_ele\n        self.num = 1 << (n - 1).bit_length()\n        self.tree = [ide_ele] * 2 * self.num\n        # \u914d\u5217\u306e\u5024\u3092\u8449\u306b\u30bb\u30c3\u30c8\n        for i in range(n):\n            self.tree[self.num + i] = init_val[i]\n        # \u69cb\u7bc9\u3057\u3066\u3044\u304f\n        for i in range(self.num - 1, 0, -1):\n            self.tree[i] = segfunc(self.tree[2 * i], self.tree[2 * i + 1])\n\n    def update(self, k, x):\n        \"\"\"\n        k\u756a\u76ee\u306e\u5024\u3092x\u306b\u66f4\u65b0\n\n        k: index(0-index)\n        x: update value\n        \"\"\"\n        k += self.num\n        self.tree[k] = x\n        while k > 1:\n            self.tree[k >> 1] = self.segfunc(self.tree[k], self.tree[k ^ 1])\n            k >>= 1\n\n    def query(self, l, r):\n        \"\"\"\n        [l, r)\u306esegfunc\u3057\u305f\u3082\u306e\u3092\u5f97\u308b\n\n        l: index(0-index)\n        r: index(0-index)\n        \"\"\"\n        res = self.ide_ele\n\n        l += self.num\n        r += self.num\n        while l < r:\n            if l & 1:\n                res = self.segfunc(res, self.tree[l])\n                l += 1\n            if r & 1:\n                res = self.segfunc(res, self.tree[r - 1])\n            l >>= 1\n            r >>= 1\n        return res\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        INF = (1<<40)\n        nums = [INF] + nums[:] + [INF]\n        n = len(nums)\n        A = nums[:]\n        X = [0]*n\n        for i in range(1,n-1):\n            if(A[i]>A[i-1])&(A[i]>A[i+1]):\n                X[i] = 1\n        T = SegTree(X,lambda x,y:x+y,0)\n        ans = []\n        # print(queries)\n        for f,a,b in queries:\n            # print([T.query(i,i+1) for i in range(n)])\n            if f==1:\n                ans.append(T.query(a+2,b+1))\n            else:\n                idx = a+1\n                val = b\n                A[idx] = val\n                if (val>A[idx-1])&(val>A[idx+1]):\n                    if X[idx]==0:\n                        X[idx]=1\n                        T.update(idx,1)\n                else:\n                    if X[idx]==1:\n                        X[idx]=0\n                        T.update(idx,0)\n                if idx!=1:\n                    if (A[idx-1]>A[idx-2])&(A[idx-1]>A[idx]):\n                        if X[idx-1]==0:\n                            X[idx-1]=1\n                            T.update(idx-1,1)\n                    else:\n                        if X[idx-1]==1:\n                            X[idx-1]=0\n                            T.update(idx-1,0)\n                if idx!=n-2:\n                    if (A[idx+1]>A[idx+2])&(A[idx+1]>A[idx]):\n                        if X[idx+1]==0:\n                            X[idx+1]=1\n                            T.update(idx+1,1)\n                    else:\n                        if X[idx+1]==1:\n                            X[idx+1]=0\n                            T.update(idx+1,0)\n        return ans",
    "submit_ts": 1718507058.0
}