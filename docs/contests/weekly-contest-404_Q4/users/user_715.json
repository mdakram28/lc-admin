{
    "username": "tyghvh",
    "submission": "public class Solution {\n    public int MinimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        Func<int[][], int> diameter = (edges) => {\n            int n = edges.Length + 1;\n            List<List<int>> adj = new List<List<int>>();\n            for (int i = 0; i < n; i++) {\n                adj.Add(new List<int>());\n            }\n            foreach (var edge in edges) {\n                adj[edge[0]].Add(edge[1]);\n                adj[edge[1]].Add(edge[0]);\n            }\n            Func<int, KeyValuePair<int, int>> bfs = (start) => {\n                int[] dist = new int[n];\n                Array.Fill(dist, -1);\n                Queue<int> q = new Queue<int>();\n                q.Enqueue(start);\n                dist[start] = 0;\n                int farthest = start;\n                while (q.Count > 0) {\n                    int node = q.Dequeue();\n                    foreach (int neighbor in adj[node]) {\n                        if (dist[neighbor] == -1) {\n                            dist[neighbor] = dist[node] + 1;\n                            q.Enqueue(neighbor);\n                            if (dist[neighbor] > dist[farthest]) {\n                                farthest = neighbor;\n                            }\n                        }\n                    }\n                }\n                return new KeyValuePair<int, int>(farthest, dist[farthest]);\n            };\n            int u = bfs(0).Key;\n            int diameter = bfs(u).Value;\n            return diameter;\n        };\n\n        int d1 = diameter(edges1);\n        int d2 = diameter(edges2);\n\n        return Math.Max(d1, Math.Max(d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1));\n    }\n}",
    "submit_ts": "1719719643",
    "subm_id": "1304446997"
}