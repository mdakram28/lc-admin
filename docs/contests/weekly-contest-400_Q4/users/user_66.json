{
    "username": "priyanshu_p28",
    "submission": "//https://www.geeksforgeeks.org/bitwise-and-of-sub-array-closest-to-k/\nclass Solution {\npublic:\n    int n;\n    void build(vector<int>& arr, int node, int start,\n               int end, vector<int> &tree)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid, tree);\n            build(arr, 2 * node + 2, mid + 1, end, tree);\n\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(int l, int r, vector<int> &tree)\n    {\n        return query(0, 0, n - 1, l, r, tree);\n    }\n    int query(int node, int start, int end, int l, int r, vector<int> &tree)\n    {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r, tree);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r, tree);\n\n        return p1 & p2;\n    }\n    int minimumDifference(vector<int>& nums, int k) {\n        n = nums.size();\n        vector<int> tree(4 * n);\n        build(nums, 0, 0, n - 1, tree);\n        int ans = INT_MAX;\n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n    \n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (query(i, mid, tree) >= k)\n                    l = mid;\n                else\n                    r = mid;\n            }\n            if (l != i - 1)\n                ans = min(ans, abs(query(i, l, tree) - k));\n            ans = min(ans, abs(k - query(i, r, tree)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717296236.0
}