{
    "username": "beginnerrr",
    "submission": "class Solution {\nprivate:\n    const int MODULO = 1e9 + 7;\n    const int MAX_INVERSION = 400;\n    void updatePermCount(int length, vector<vector<long>>& permCount, const unordered_map<int, int>& restrictions) {\n        for (int inv = 0; inv <= MAX_INVERSION; inv++) {\n            for (int pos = 0; pos < length; pos++) {\n                int prevInv = inv - pos;\n                if (prevInv >= 0) {\n                    permCount[length][inv] = (permCount[length][inv] + permCount[length - 1][prevInv]) % MODULO;\n                }\n            }\n        }\n        if (restrictions.count(length)) {\n            int targetInv = restrictions.at(length);\n            for (int inv = 0; inv <= MAX_INVERSION; inv++) {\n                if (inv != targetInv) {\n                    permCount[length][inv] = 0;\n                }\n            }\n        }\n    }\n    int calculateResult(int n, const vector<vector<long>>& permCount) {\n        long result = 0;\n        for (long count : permCount[n]) {\n            result = (result + count) % MODULO;\n        }\n        return result;\n    }\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requests) {\n        unordered_map<int, int> restrictions;\n        for (const auto& req : requests) {\n            restrictions[req[0] + 1] = req[1];\n        }\n\n        vector<vector<long>> permCount(n + 1, vector<long>(MAX_INVERSION + 1, 0));\n        permCount[0][0] = 1;\n\n        for (int length = 1; length <= n; length++) {\n            updatePermCount(length, permCount, restrictions);\n        }\n\n        return calculateResult(n, permCount);\n    }\n};",
    "submit_ts": 1719070549.0
}