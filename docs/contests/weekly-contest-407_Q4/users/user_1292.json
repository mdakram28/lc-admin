{
    "username": "weiyuanwang2020-2",
    "submission": "class Solution {\n    boolean pup = true;\n    int n;\n    PriorityQueue<int[]> que = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);\n    \n    public long minimumOperations(int[] nums, int[] target) {\n        n = nums.length;\n        int[] diff = new int[n];\n        for(int i = 0; i < n; i++){\n            diff[i] = target[i] - nums[i];\n        }\n        long ans = 0;\n        for(int i = 0; i < n;){\n            if(i < n && diff[i] > 0){\n                while(i < n && diff[i] > 0){\n                    add(i, diff, 1);\n                    i++;\n                }\n                ans += get(que);\n            }\n            if(i < n && diff[i] < 0){\n                while(i < n && diff[i] < 0){\n                    add(i, diff, -1);\n                    i++;\n                }\n                ans += get(que);\n            }\n            if(i < n && diff[i] == 0){\n                i++;\n            }\n        }\n        return ans;\n    }\n    \n    private void add(int i, int[] diff, int base){\n        int cur = diff[i] * base;\n        if(i > 0){\n            if(diff[i] * base > diff[i - 1] * base){\n                pup = true;\n            }else if(diff[i] * base < diff[i - 1] * base){\n                pup = false;\n            }\n        }\n        if(pup && (i >= n - 1 || diff[i] * base > diff[i + 1] * base)){\n            que.offer(new int[]{cur, -1});\n        }\n        if(!pup && (i < n - 1 && diff[i] * base < diff[i + 1] * base)){\n            que.offer(new int[]{cur, 1});\n        }\n    }\n    \n    private long get(PriorityQueue<int[]> que) {\n        int pre = 0;\n        long cnt = 0, g = 1;\n        while(!que.isEmpty()){\n            int[] cur = que.poll();\n            cnt += (cur[0] - pre) * g;\n            g += cur[1];\n            pre = cur[0];\n        }\n        return cnt;\n    }\n}",
    "submit_ts": "1721532972",
    "subm_id": "548395362"
}