{
    "username": "new_born2023",
    "submission": "class Solution {\npublic:\n    int num(vector<int> &colors, int k) {\n        // Extend the vector by repeating the first `k` elements at the end\n        colors.insert(colors.end(), colors.begin(), colors.begin() + k);\n      \n        int n = colors.size();\n        int count = 0;\n        vector<int> pre(n + 1);\n//         for(int i=0;i<n;i++){\n            \n//         }\n\n        // Calculate prefix sums of absolute differences\n        for (int i = 1; i < n; i++) {\n            int val=abs(colors[i] - colors[i - 1]);\n            pre[i] = pre[i - 1] + val;\n        }\n\n        k--; // Adjust `k` to zero-based indexing\n\n        // Count alternating groups\n        for (int i = k + 1; i < n; i++) {\n            int val=pre[i-k];\n            int c=pre[i];\n            if (pre[i] - pre[i - k] == k) {\n                count++;\n            }\n        }\n\n        return count;\n    }\n\n    // Function to calculate the number of alternating groups\n    // colors: vector of integers representing colors\n    // k: number of consecutive elements to repeat at the end\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        return num(colors, k);\n    }\n};",
    "submit_ts": "1720281293",
    "subm_id": "1311819859"
}