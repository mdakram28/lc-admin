{
    "username": "frabhinav",
    "submission": "class Node {\npublic:\n    unordered_map<char, Node*> next;\n    vector<pair<int, int>> end_indices;\n};\n\nclass PrefixTree {\npublic:\n    Node* root;\n\n    PrefixTree() {\n        root = new Node();\n    }\n\n    void insert(string word, int index, int cost) {\n        Node* current = root;\n        for (char c : word) {\n            if (!current->next.count(c)) {\n                current->next[c] = new Node();\n            }\n            current = current->next[c];\n        }\n        current->end_indices.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        PrefixTree prefixTree;\n        for (int i = 0; i < words.size(); ++i) {\n            prefixTree.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n\n            Node* current = prefixTree.root;\n            for (int j = i; j < n; ++j) {\n                if (!current->next.count(target[j])) {\n                    break;\n                }\n                current = current->next[target[j]];\n                for (auto& p : current->end_indices) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323247",
    "subm_id": "1312370901"
}