{
    "username": "therealchainman",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n, m = len(edges1) + 1, len(edges2) + 1\n        ans = 0\n        def calc(edges):\n            nonlocal ans\n            n = len(edges) + 1\n            adj = [[] for _ in range(n + 1)]\n            st1 = [0] * (n + 1)\n            st2 = [0] * (n + 1)\n            n1 = [-1] * (n + 1)\n            n2 = [-1] * (n + 1)\n            par = [0] * (n + 1)\n            diam = 0\n            res = math.inf\n            for u, v in edges:\n                adj[u].append(v)\n                adj[v].append(u)\n            def dfs1(u, p):\n                for v in adj[u]:\n                    if v == p: continue\n                    dfs1(v, u)\n                    if st1[v] + 1 > st1[u]:\n                        n2[u] = n1[u]\n                        n1[u] = v\n                        st2[u] = st1[u]\n                        st1[u] = st1[v] + 1\n                    elif st1[v] + 1 > st2[u]:\n                        st2[u] = st1[v] + 1\n                        n2[u] = v\n            def dfs2(u, p):\n                nonlocal res, diam\n                # print(\"u\", u, \"par\", par[u], \"st1\", st1[u], \"st2\", st2[u])\n                res = min(res, max(par[u], st1[u]))\n                diam = max(diam, par[u] + st1[u])\n                for v in adj[u]:\n                    if v == p: continue\n                    par[v] = par[u] + 1\n                    if n1[u] != v: par[v] = max(par[v], st1[u] + 1)\n                    if n2[u] != v: par[v] = max(par[v], st2[u] + 1)\n                    dfs2(v, u)\n            dfs1(0, -1)\n            dfs2(0, -1)\n            # print(\"res\", res, \"diam\", diam)\n            ans = max(ans, diam)\n            return res\n        mixed_diam = calc(edges1) + calc(edges2) + 1\n        ans = max(ans, mixed_diam)\n        return ans",
    "submit_ts": "1719718587",
    "subm_id": "1304421019"
}