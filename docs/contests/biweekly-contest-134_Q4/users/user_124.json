{
    "username": "adhishkancharla",
    "submission": "using ll = long long;\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n    SegmentTree(vector<int>& arr)\n    {\n        n = arr.size();\n        tree.resize(4 * n);\n        build(arr, 0, 0, n - 1);\n    }\n    void build(vector<int>& arr, int node, int start,\n               int end)\n    {\n        if (start == end) {\n            tree[node] = arr[start];\n        }\n        else {\n            int mid = (start + end) / 2;\n            build(arr, 2 * node + 1, start, mid);\n            build(arr, 2 * node + 2, mid + 1, end);\n            tree[node]\n                = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(int l, int r)\n    {\n        return query(0, 0, n - 1, l, r);\n    }\n    int query(int node, int start, int end, int l, int r)\n    {\n        if (r < start || end < l) \n            return INT_MAX;\n        if (l <= start && end <= r)\n            return tree[node];\n        int mid = (start + end) / 2;\n        int p1 = query(2 * node + 1, start, mid, l, r);\n        int p2 = query(2 * node + 2, mid + 1, end, l, r);\n        return p1 & p2;\n    }\n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        //bitwise AND is a non-increasing function\n        //we can perform binary search\n        //find first index and find last index when the subarray has this bitwise AND\n        int n = (int)nums.size();\n        SegmentTree st(nums);\n        ll ans = 0;\n        for (int i = 0;i<n;i++){\n            int l = i, r = n - 1, posLeft = -1;\n            while (l <= r){\n                int mid = (l + r)/2;\n                int val = st.query(i,mid);\n                if (val < k)r = mid - 1;\n                if (val > k)l = mid + 1;\n                if (val == k){\n                    posLeft = mid;\n                    r = mid - 1;\n                }\n            }\n            l = i, r = n - 1;\n            int posRight = -1;\n            while (l <= r){\n                int mid = (l + r)/2;\n                int val = st.query(i,mid);\n                if (val < k)r = mid - 1;\n                if (val > k)l = mid + 1;\n                if (val == k){\n                    posRight = mid;\n                    l = mid + 1;\n                }\n            }\n            if (posLeft == -1)continue;\n            ans += 1ll * (posRight - posLeft + 1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277836",
    "subm_id": "1311682310"
}