{
    "username": "himanshuyadav6224",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n\n        dist[start] = 0;\n        q.push(start);\n\n        int farthest_node = start;\n        int max_dist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) { // Unvisited\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n\n                    if (dist[neighbor] > max_dist) {\n                        max_dist = dist[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthest_node, max_dist};\n    }\n\n    // Function to compute the diameter of a graph\n    int computeDiameter(const vector<vector<int>>& adj) {\n        int n = adj.size();\n        if (n == 0)\n            return 0;\n\n        // Perform BFS from an arbitrary node\n        pair<int, int> p1 = bfs(0, adj);\n        // Perform BFS from the farthest node found in the first BFS\n        pair<int, int> p2 = bfs(p1.first, adj);\n\n        // The distance found in the second BFS is the diameter\n        return p2.second;\n    }\n\n    // Main function to compute the minimum diameter after merge\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,\n                                  vector<vector<int>>& edges2) {\n        int n1 = edges1.size();\n        int n2 = edges2.size();\n        if(n1 == 0 and n2 == 0) return 1; \n        // Convert edge list to adjacency list\n        vector<vector<int>> adj1(n1 + 1), adj2(n2 + 1);\n\n        for (auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        // Compute diameters\n        int diam1 = computeDiameter(adj1);\n        int diam2 = computeDiameter(adj2);\n\n        // Compute ceil of half diameters and sum them\n        int result = ceil(diam1 / 2.0) + ceil(diam2 / 2.0);\n        if(diam1 > result || diam2 > result) return max(diam1,diam2); \n        return result+1;\n    }\n};",
    "submit_ts": 1719718616.0
}