{
    "username": "mnaoumov",
    "submission": "public class Solution\n{\n    public IList<bool> GetResults(int[][] queries)\n    {\n        var ans = new List<bool>();\n        var obstacles = new List<int> { 0, int.MaxValue };\n        var maxSizes = new List<int> { 0, int.MaxValue };\n\n        foreach (var query in queries)\n        {\n            var queryType = query[0];\n\n            switch (queryType)\n            {\n                case 1:\n                    {\n                        var x = query[1];\n                        PutObstacle(x);\n                        break;\n                    }\n                case 2:\n                    {\n                        var x = query[1];\n                        var sz = query[2];\n                        ans.Add(CanPlace(x, sz));\n                        break;\n                    }\n            }\n        }\n\n        return ans;\n\n        void PutObstacle(int x)\n        {\n            var index = InsertInOrderedList(obstacles, x);\n            var oldSize = obstacles[index + 1] - obstacles[index - 1];\n            var size1 = obstacles[index] - obstacles[index - 1];\n            var size2 = obstacles[index + 1] - obstacles[index];\n            maxSizes[index] = Math.Max(maxSizes[index - 1], size1);\n            maxSizes.Insert(index + 1, Math.Max(maxSizes[index], size2));\n\n            if (oldSize <= maxSizes[index - 1])\n            {\n                return;\n            }\n\n            for (var i = index + 2; i < maxSizes.Count; i++)\n            {\n                if (maxSizes[i] > oldSize)\n                {\n                    break;\n                }\n\n                var size = obstacles[i] - obstacles[i - 1];\n\n                if (size == oldSize)\n                {\n                    break;\n                }\n\n                maxSizes[i] = Math.Max(maxSizes[i - 1], size);\n            }\n        }\n\n        bool CanPlace(int x, int sz)\n        {\n            var index = obstacles.BinarySearch(x);\n\n            if (index >= 0)\n            {\n                return maxSizes[index] >= sz;\n            }\n\n            var previousObstacle = obstacles[~index - 1];\n            return x - previousObstacle >= sz || CanPlace(previousObstacle, sz);\n        }\n    }\n\n    private static int InsertInOrderedList<T>(List<T> list, T item)\n    {\n        var index = list.BinarySearch(item);\n\n        if (index < 0)\n        {\n            index = ~index;\n        }\n\n        list.Insert(index, item);\n\n        return index;\n    }\n}\n",
    "submit_ts": 1716650999.0
}