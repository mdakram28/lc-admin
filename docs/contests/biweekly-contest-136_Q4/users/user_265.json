{
    "username": "celestialcoder",
    "submission": "class Solution {\npublic:\n    void dfs1(int u, int p, vector<vector<int>>& g, vector<int>& dp) {\n        for (int v : g[u]) {\n            if (v == p) {\n                continue;\n            }\n            dfs1(v, u, g, dp);\n            dp[u] = max(dp[u], 2 - v % 2 + dp[v]);\n        }\n    }\n    void dfs(int u, int p, vector<vector<int>>& g, vector<int>& dp, vector<int>& ans, int k) {\n        int m = k, m2 = 0;\n        int mi = p, m2i = -1;\n        for (int v : g[u]) {\n            if (v == p) {\n                continue;\n            }\n            int x = 2 - v % 2 + dp[v];\n            if (x > m) {\n                m2i = mi, m2 = m, mi = v, m = x;\n            } else if (x > m2) {\n                m2i = v, m2 = x;\n            }\n        }\n        for (int v : g[u]) {\n            if (v == p) {\n                continue;\n            }\n            if (v == mi) { // use second\n                int kv = 2 - u % 2 + m2;\n                ans[v] = max(dp[v], kv);\n                dfs(v, u, g, dp, ans, kv);\n            } else { // use first\n                int kv = 2 - u % 2 + m;\n                ans[v] = max(dp[v], kv);\n                dfs(v, u, g, dp, ans, kv);\n            }\n        }\n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> g(n);\n        for (auto& e : edges) {\n            g[e[0]].push_back(e[1]), g[e[1]].push_back(e[0]);\n        }\n        vector<int> dp(n), ans(n);\n        dfs1(0, -1, g, dp);\n        ans[0] = dp[0];\n        dfs(0, -1, g, dp, ans, 0);\n        return ans;\n    }\n};",
    "submit_ts": "1722700078",
    "subm_id": "1343231024"
}