{
    "username": "raghav_laddha",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n        \n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        auto dfs = [](const vector<vector<int>>& adj, int start, int& farthestNode) {\n            int n = adj.size();\n            vector<int> dist(n, -1);\n            function<void(int, int)> dfsVisit = [&](int node, int d) {\n                dist[node] = d;\n                if (d > dist[farthestNode]) {\n                    farthestNode = node;\n                }\n                for (int neighbor : adj[node]) {\n                    if (dist[neighbor] == -1) {\n                        dfsVisit(neighbor, d + 1);\n                    }\n                }\n            };\n            farthestNode = start;\n            dfsVisit(start, 0);\n            return dist[farthestNode];\n        };\n\n        int farthestNode1 = 0;\n        dfs(adj1, 0, farthestNode1);\n        int diameter1 = dfs(adj1, farthestNode1, farthestNode1);\n\n        int farthestNode2 = 0;\n        dfs(adj2, 0, farthestNode2);\n        int diameter2 = dfs(adj2, farthestNode2, farthestNode2);\n        \n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n        \n        return minDiameter;\n    }\n};",
    "submit_ts": 1719715502.0
}