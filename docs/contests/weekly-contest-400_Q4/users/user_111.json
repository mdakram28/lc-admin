{
    "username": "mayank81757",
    "submission": "class SegmentTree {\npublic:\n    SegmentTree(const vector<int>& arr) {\n        n = arr.size();\n        tree.resize(2 * n);\n        build(arr);\n    }\n\n    int query(int l, int r) {\n        l += n;\n        r += n;\n        int res = INT_MAX; \n        while (l < r) {\n            if (l & 1) {\n                res &= tree[l];\n                l++;\n            }\n            if (r & 1) {\n                r--;\n                res &= tree[r];\n            }\n            l >>= 1;\n            r >>= 1;\n        }\n        return res;\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n\n    void build(const vector<int>& arr) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = arr[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[i << 1] & tree[i << 1 | 1];\n        }\n    }\n};\n\nclass Solution {\npublic:\n    \n\n    int minimumDifference(vector<int>& arr, int k) {\n         SegmentTree segTree(arr);\n    int n = arr.size();\n    int closestAnd = INT_MAX;\n    vector<int> closestSubarray;\n\n    for (int i = 0; i < n; ++i) {\n        int low = i, high = n;\n        while (low < high) {\n            int mid = (low + high) / 2;\n            int currentAnd = segTree.query(i, mid + 1);\n            \n            if (abs(currentAnd - k) < abs(closestAnd - k)) {\n                closestAnd = currentAnd;\n                closestSubarray = vector<int>(arr.begin() + i, arr.begin() + mid + 1);\n            }\n            \n            if (currentAnd >= k) {\n                low = mid + 1;\n            } else {\n                high = mid;\n            }\n            \n            if (closestAnd == k) {\n                return 0;\n            }\n        }\n    }\n\n    return abs(closestAnd-k);\n    }\n};",
    "submit_ts": 1717297601.0
}