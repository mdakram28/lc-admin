{
    "username": "Jacdavi",
    "submission": "class Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        touching = touchingCircles(circles)\n\n        print(touching)\n\n        for section in range(len(touching)):\n            topLeft = False\n            bottomRight = False\n\n            print(section)\n\n            for circle in touching[section]:\n                if circleIncludesEdgeX(circle, 0):\n                    topLeft = True\n                if circleIncludesEdgeY(circle, 0):\n                    bottomRight = True\n                if circleIncludesEdgeY(circle, Y):\n                    topLeft = True\n                if circleIncludesEdgeX(circle, X):\n                    bottomRight = True\n\n                if bottomRight and topLeft:\n                    return False\n        \n        return True\n\ndef touchingCircles(circles):\n    touching = []\n    for circle in circles:\n        found = []\n        for section in range(len(touching)):\n            for circlei in touching[section]:\n                if circleIncludesCircle(circlei, circle):\n                    found.append(int(section))\n                    break\n            \n        joint = [circle]\n        shift = 0\n        for section in found:\n            joint.extend(touching[section- shift])\n            del touching[section -shift]\n            shift += 1\n\n        touching.append(joint)\n\n    return touching\n\n\ndef circleIncludesCircle(circle1, circle2):\n    return (circle1[0]-circle2[0])**2 + (circle1[1]-circle2[1])**2 <= (circle1[2] + circle2[2])**2\n\ndef circleIncludesEdgeX(circle, x):\n    return abs(x-circle[0]) <= circle[2]\n\ndef circleIncludesEdgeY(circle, y):\n    return abs(y-circle[1]) <= circle[2]\n\ndef circleIncludes(circle, x, y):\n    return (x-circle[0])**2 + (y-circle[1])**2 <= circle[2]**2",
    "submit_ts": "1722138537",
    "subm_id": "1335793299"
}