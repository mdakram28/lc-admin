{
    "username": "fakrrid",
    "submission": "#include <algorithm>\n#include <bits/stdc++.h>\n#include <bitset>\n#include <cassert>\n#include <cmath>\n#include <complex>\n#include <cstdint>\n#include <cstdio>\n#include <cstdlib>\n#include <cstring>\n#include <deque>\n#include <ext/pb_ds/assoc_container.hpp>\n#include <ext/pb_ds/tree_policy.hpp>\n#include <functional>\n#include <iostream>\n#include <map>\n#include <numeric>\n#include <queue>\n#include <set>\n#include <sstream>\n#include <stdlib.h>\n#include <string>\n#include <unordered_map>\n#include <unordered_set>\n#include <utility>\n#include <vector>\nusing namespace __gnu_pbds;\nusing namespace std;\n\n#define ll long long int\n#define For(n) for (ll i = 0; i < n; i++)\n#define all(x) x.begin(), x.end()\n#define allr(x) x.rbegin(), x.rend()\n\ntypedef vector<int> VI;\ntypedef vector<ll> VL;\ntypedef long double lld;\ntypedef unsigned long long ull;\n\nconst int MOD = 1e9 + 7;\n\n//--------------------------------- Trace Functions\n//--------------------------------------\n\nvoid _print(ll t) { cerr << t; }\nvoid _print(int t) { cerr << t; }\nvoid _print(string t) { cerr << t; }\nvoid _print(char t) { cerr << t; }\nvoid _print(lld t) { cerr << t; }\nvoid _print(double t) { cerr << t; }\nvoid _print(ull t) { cerr << t; }\nvoid DBG() { cerr << \"]\" << endl; }\n\ntemplate <typename T1, typename T2>\nistream& operator>>(istream& in, pair<T1, T2>& a) {\n    in >> a.x >> a.y;\n    return in;\n}\ntemplate <typename T1, typename T2>\nostream& operator<<(ostream& out, pair<T1, T2> a) {\n    out << a.x << \" \" << a.y;\n    return out;\n}\ntemplate <typename T, typename T1> T maxs(T& a, T1 b) {\n    if (b > a)\n        a = b;\n    return a;\n}\ntemplate <typename T, typename T1> T mins(T& a, T1 b) {\n    if (b < a)\n        a = b;\n    return a;\n}\ntemplate <class H, class... T> void DBG(H h, T... t) {\n    cerr << to_string(h);\n    if (sizeof...(t))\n        cerr << \", \";\n    DBG(t...);\n}\n\n#define DEBUG(x...)                                                            \\\n    {                                                                          \\\n        cout << \"(\" << #x << \")\"                                               \\\n             << \" = ( \";                                                       \\\n        Print(x);                                                              \\\n    }\ntemplate <typename T1> void Print(T1 t1) { cout << t1 << \" )\" << endl; }\ntemplate <typename T1, typename... T2> void Print(T1 t1, T2... t2) {\n    cout << t1 << \" , \";\n    Print(t2...);\n}\n\n// ----------------------------- Debuging\n// -----------------------------------------------\n\nvoid __print(int x) { cerr << x; }\nvoid __print(long x) { cerr << x; }\nvoid __print(long long x) { cerr << x; }\nvoid __print(unsigned x) { cerr << x; }\nvoid __print(unsigned long x) { cerr << x; }\nvoid __print(unsigned long long x) { cerr << x; }\nvoid __print(float x) { cerr << x; }\nvoid __print(double x) { cerr << x; }\nvoid __print(long double x) { cerr << x; }\nvoid __print(char x) { cerr << '\\'' << x << '\\''; }\nvoid __print(const char* x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(const string& x) { cerr << '\\\"' << x << '\\\"'; }\nvoid __print(bool x) { cerr << (x ? \"true\" : \"false\"); }\n\ntemplate <class T, class V> void _print(pair<T, V> p);\ntemplate <class T> void _print(vector<T> v);\ntemplate <class T> void _print(set<T> v);\ntemplate <class T, class V> void _print(map<T, V> v);\ntemplate <class T> void _print(multiset<T> v);\ntemplate <class T, class V> void _print(pair<T, V> p) {\n    cerr << \"{\";\n    _print(p.ff);\n    cerr << \",\";\n    _print(p.ss);\n    cerr << \"}\";\n}\ntemplate <class T> void _print(vector<T> v) {\n    cerr << \"[ \";\n    for (T i : v) {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\ntemplate <class T> void _print(set<T> v) {\n    cerr << \"[ \";\n    for (T i : v) {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\ntemplate <class T> void _print(multiset<T> v) {\n    cerr << \"[ \";\n    for (T i : v) {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\ntemplate <class T, class V> void _print(map<T, V> v) {\n    cerr << \"[ \";\n    for (auto i : v) {\n        _print(i);\n        cerr << \" \";\n    }\n    cerr << \"]\";\n}\n\ntemplate <typename T, typename V> void __print(const pair<T, V>& x) {\n    cerr << '{';\n    __print(x.first);\n    cerr << ',';\n    __print(x.second);\n    cerr << '}';\n}\ntemplate <typename T> void __print(const T& x) {\n    int f = 0;\n    cerr << '{';\n    for (auto& i : x)\n        cerr << (f++ ? \",\" : \"\"), __print(i);\n    cerr << \"}\";\n}\nvoid _print() { cerr << \"]\\n\"; }\ntemplate <typename T, typename... V> void _print(T t, V... v) {\n    __print(t);\n    if (sizeof...(v))\n        cerr << \", \";\n    _print(v...);\n}\n#ifndef ONLINE_JUDGE\n#define debug(x...)                                                            \\\n    cerr << \"[\" << #x << \"] = [\";                                              \\\n    _print(x) cerr << endl;\n#else\n#define debug(x...)\n#endif\n\n#include <algorithm>\n#include <cmath>\n#include <vector>\nusing namespace std;\n\nclass CustomSegmentTree {\nprivate:\n    vector<int> tree;\n    int size;\n\n    void construct(const vector<int>& arr, int node, int start, int end) {\n\n        if (start == end) {\n            tree[node] = arr[start];\n        } else {\n            int mid = (start + end) / 2;\n            construct(arr, 2 * node + 1, start, mid);\n            construct(arr, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n\n    int range_and_query(int node, int start, int end, int left, int right) {\n\n        if (right < start || end < left) {\n            return INT_MAX;\n        }\n        if (left <= start && end <= right) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_result =\n            range_and_query(2 * node + 1, start, mid, left, right);\n        int right_result =\n            range_and_query(2 * node + 2, mid + 1, end, left, right);\n        return left_result & right_result;\n    }\n\npublic:\n    CustomSegmentTree(const vector<int>& arr) {\n\n        size = arr.size();\n        tree.resize(4 * size);\n        construct(arr, 0, 0, size - 1);\n    }\n\n    int query(int left, int right) {\n        return range_and_query(0, 0, size - 1, left, right);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(NULL);\n        cout.tie(NULL);\n        int size = nums.size();\n        CustomSegmentTree segment_tree(nums);\n        int min_difference = INT_MAX;\n\n        auto custom_abs = [](int a, int b) { return abs(a - b); };\n\n        for (int i = 0; i < size; ++i) {\n            int left = i - 1, right = size - 1;\n            while (right - left > 1) {\n                int mid = (left + right) / 2;\n                if (segment_tree.query(i, mid) >= k) {\n                    left = mid;\n                } else {\n                    right = mid;\n                }\n            }\n            if (left != i - 1) {\n                min_difference = min(\n                    min_difference, custom_abs(segment_tree.query(i, left), k));\n            }\n            min_difference = min(min_difference,\n                                 custom_abs(k, segment_tree.query(i, right)));\n        }\n        return min_difference;\n    }\n};\n",
    "submit_ts": 1717299873.0
}