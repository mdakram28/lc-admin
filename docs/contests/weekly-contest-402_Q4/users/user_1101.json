{
    "username": "Rad0miR",
    "submission": "public class Solution \n{\n    /*\n    private class SegmentTreeNode \n    {\n        private int _begin, _end;\n        private SegmentTreeNode _leftNode = null, _rightNode = null;\n        \n        public int Count { get; private set; }\n        \n        public SegmentTreeNode(int begin, int end) => (_begin, _end) = (begin, end);\n\n        public int Add(int l, int r) \n        {\n            if (l > r || l > _end || r < _begin) return Count;\n            if ((l == _begin && r == _end) || Count == _end - _begin + 1) return Count = _end - _begin + 1;\n            \n            int middle = _begin + (_end - _begin) / 2;\n            \n            _leftNode = _leftNode ?? new SegmentTreeNode(_begin, middle);\n            _rightNode = _rightNode ?? new SegmentTreeNode(middle + 1, _end);\n            \n            return Count = _leftNode.Add(l, Math.Min(middle, r)) + _rightNode.Add(Math.Max(l, middle + 1), r);\n        }\n    }*/\n    \n    private class SegmentTreeNode \n    {\n        private int _begin, _end, _sum = 0;\n        private SegmentTreeNode _leftNode = null, _rightNode = null;\n        \n        public SegmentTreeNode(int begin, int end) => (_begin, _end) = (begin, end);\n\n        public int Set(int ind, int val) \n        {\n            if (_begin == ind && _end == ind) return _sum = val;\n            if (ind < _begin || ind > _end) return _sum;\n            \n            int middle = _begin + (_end - _begin) / 2;\n            \n            _leftNode = _leftNode ?? new SegmentTreeNode(_begin, middle);\n            _rightNode = _rightNode ?? new SegmentTreeNode(middle + 1, _end);\n            \n            return _sum = _leftNode.Set(ind, val) + _rightNode.Set(ind, val);\n        }\n        \n        public int Sum(int l, int r) \n        {\n            if (l > r || l > _end || r < _begin) return 0;\n            if ((l == _begin && r == _end)) return _sum;\n            \n            int middle = _begin + (_end - _begin) / 2;\n            \n            _leftNode = _leftNode ?? new SegmentTreeNode(_begin, middle);\n            _rightNode = _rightNode ?? new SegmentTreeNode(middle + 1, _end);\n            \n            return _leftNode.Sum(l, Math.Min(middle, r)) + _rightNode.Sum(Math.Max(l, middle + 1), r);\n        }\n    }\n    \n    public IList<int> CountOfPeaks(int[] nums, int[][] queries) \n    {\n        SegmentTreeNode root = new(0, nums.Length - 1);\n        for (int i = 1; i + 1 < nums.Length; ++i) \n        {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) root.Set(i, 1);\n        }\n        \n        List<int> ans = new(queries.Length);\n        \n        foreach (var q in queries) \n        {\n            if (q[0] == 1) \n            {\n                ans.Add(root.Sum(q[1], q[2]) - Peak(q[1]) - (q[1] == q[2] ? 0 : Peak(q[2])));\n            }\n            else \n            {\n                nums[q[1]] = q[2];\n                Set(q[1] - 1);\n                Set(q[1] + 1);\n                Set(q[1]);\n            }\n            \n            void Set(int ind)\n            {\n                if (ind <= 0 || ind >= nums.Length - 1) return;\n                root.Set(ind, Peak(ind));\n            }\n            \n            int Peak(int ind) => ind <= 0 || ind >= nums.Length - 1 ? 0 \n                : nums[ind] > nums[ind - 1] && nums[ind] > nums[ind + 1] ? 1 : 0;\n        }\n        \n        return ans;\n    }\n}\n\n/*\n5 4 8 6\n*/",
    "submit_ts": 1718507741.0
}