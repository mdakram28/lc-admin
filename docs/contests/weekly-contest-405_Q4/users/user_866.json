{
    "username": "lthroy",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.isWord = False\n        self.cost = float(\"inf\")\n        self.children = {}\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self,word,cost):\n        cur = self.root\n        for c in word:\n            if c not in cur.children:\n                cur.children[c] = TrieNode()\n            cur = cur.children[c]\n        cur.isWord = True\n        cur.cost = cost\n\n    def startsWith(self,word):\n        cur = self.root\n        for c in word:\n            if c not in cur.children:\n                return False\n            cur = cur.children[c]\n        return True\n\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        mp = {}\n        for w,c in zip(words,costs):\n            if w not in mp or mp[w] > c:\n                mp[w] = c\n        trie = Trie()\n        for w,c in mp.items():\n            trie.insert(w,c)\n        dp = [float(\"inf\")]*(n+1)\n        dp[n] = 0\n        for i in reversed(range(n)):\n            node = trie.root\n            for j in range(i,n):\n                c = target[j]\n                if c not in node.children:\n                    break\n                node = node.children[c]\n                dp[i] = min(dp[i],dp[j+1]+node.cost)\n        return -1 if dp[0] == float(\"inf\") else dp[0]\n\n\n\n",
    "submit_ts": "1720322996",
    "subm_id": "1312364650"
}