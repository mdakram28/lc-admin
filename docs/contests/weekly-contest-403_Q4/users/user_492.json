{
    "username": "jtcheng26",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        /*\n        cover[x2][y2][x][y]: for each sub-rectangle, find sum of largest rectangle to cover everything in that grid\n        for each rectangle, dp[x][y][1] = cover[x][y][0][0]\n        dp[x][y][2] = min(cover[x][y][i][0] + cover[i-1][y][0][0]) for i < x or min(cover[x][y][0][j] + cover[x][j-1][0][0]) for j < y\n        dp[x][y][]\n        */\n        \n        int n = grid.size();\n        int m = grid[0].size();\n        vector<vector<vector<vector<int>>>> dp(n, vector<vector<vector<int>>>(m, vector<vector<int>>(n, vector<int>(m, 0))));\n        for (int x1=0;x1<n;x1++) {\n            for (int y1=0;y1<m;y1++) {\n                vector<int> mx(m, n);\n                vector<int> my(m, m);\n                vector<int> mmx(m, 0);\n                vector<int> mmy(m, 0);\n                for (int x2=x1;x2<n;x2++) {\n                    for (int y2=y1;y2<m;y2++) {\n                        if (grid[x2][y2] == 1) {\n                            mx[y2] = min(min(mx[y2], y2 == y1 ? n : mx[y2-1]), x2);\n                            my[y2] = min(min(my[y2], y2 == y1 ? m : my[y2-1]), y2);\n                            mmx[y2] = max(max(mmx[y2], y2 == y1 ? 0 : mmx[y2-1]), x2);\n                            mmy[y2] = max(max(mmy[y2], y2 == y1 ? 0 : mmy[y2-1]), y2);\n                        }\n                        mx[y2] = min(mx[y2], y2 == y1 ? n : mx[y2-1]);\n                        my[y2] = min(my[y2], y2 == y1 ? m : my[y2-1]);\n                        mmx[y2] = max(mmx[y2], y2 == y1 ? 0 : mmx[y2-1]);\n                        mmy[y2] = max(mmy[y2], y2 == y1 ? 0 : mmy[y2-1]);\n                        dp[x2][y2][x1][y1] = (mx[y2] <= mmx[y2] && my[y2] <= mmy[y2] ? (mmx[y2] - mx[y2] + 1) * (mmy[y2] - my[y2] + 1) : 0);\n                    }\n                }\n            }\n        }\n        \n        \n        // if (n == 4 && m == 3) cout << dp[2][2][2][0] << \"\\n\";\n        // if (n == 5 && m == 5) cout << dp[]\n        \n        // if (m > 3)\n        //     cout << dp[1][3][0][0] << \" \" << dp[1][3][0][1] << \" \" << dp[0][1][0][0] << \"\\n\";\n        // if (n == 4)\n        //     cout << dp[3][0][0][0] << \" \" << dp[1][1][0][1] << \" \" << dp[3][1][2][1] << \"\\n\";\n        \n        int ans = n * m;\n        for (int x=1;x<n;x++) {\n            for (int y=1;y<m;y++) {\n                ans = min(ans, dp[n-1][m-1][x][0] + dp[x-1][m-1][0][y] + dp[x-1][y-1][0][0]);\n                ans = min(ans, dp[x-1][m-1][0][0] + dp[n-1][m-1][x][y] + dp[n-1][y-1][x][0]);\n                ans = min(ans, dp[n-1][m-1][0][y] + dp[n-1][y-1][x][0] + dp[x-1][y-1][0][0]);\n                ans = min(ans, dp[n-1][m-1][x][y] + dp[x-1][m-1][0][y] + dp[n-1][y-1][0][0]);\n                // if (n == 2 && m == 3 && dp[x-1][m-1][0][0] + dp[n-1][m-1][x][y] + dp[n-1][y-1][x][0]) {\n                //     cout << x << \" \" << y << \"\\n\";\n                //     cout << \"top: \" << dp[x-1][m-1][0][0] << \"\\n\";\n                //     cout << \"right: \" << dp[n-1][m-1][x][y] << \"\\n\";\n                //     cout << \"left: \" << dp[n-1][y-1][x][0] << \"\\n\";\n                // }\n            }\n        }\n        \n        for (int x=1;x<n;x++) {\n            for (int a=x+1;a<n;a++) {\n                ans = min(ans, dp[x-1][m-1][0][0] + dp[a-1][m-1][x][0] + dp[n-1][m-1][a][0]);\n            }\n        }\n        \n        for (int y=1;y<m;y++) {\n            for (int a=y+1;a<m;a++) {\n                ans = min(ans, dp[n-1][y-1][0][0] + dp[n-1][a-1][0][y] + dp[n-1][m-1][0][a]);\n            }\n        }\n            \n       \n        \n        return ans;\n    }\n};",
    "submit_ts": 1719114609.0
}