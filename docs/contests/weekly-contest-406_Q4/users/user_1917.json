{
    "username": "sarthak_gadkar04",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        priority_queue<int> pq_h(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> pq_v(verticalCut.begin(), verticalCut.end());\n        \n        long long cost = 0;\n        int h_parts = 1, v_parts = 1;\n        \n        while (!pq_h.empty() && !pq_v.empty()) {\n            if (pq_h.top() > pq_v.top()) {\n                cost += (long long)pq_h.top() * v_parts;\n                pq_h.pop();\n                h_parts++;\n            } else {\n                cost += (long long)pq_v.top() * h_parts;\n                pq_v.pop();\n                v_parts++;\n            }\n        }\n        \n        while (!pq_h.empty()) {\n            cost += (long long)pq_h.top() * v_parts;\n            pq_h.pop();\n        }\n        \n        while (!pq_v.empty()) {\n            cost += (long long)pq_v.top() * h_parts;\n            pq_v.pop();\n        }\n        \n        return cost;\n    }\n};",
    "submit_ts": "1720926534",
    "subm_id": "1320289033"
}