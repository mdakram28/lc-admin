{
    "username": "LiuWeibo",
    "submission": "namespace atcoder\n{\n \ntemplate <class S, S (*op)(S, S), S (*e)(), class F, S (*mapping)(F, S), F (*composition)(F, F), F (*id)()>\nstruct lazy_segtree {\n    int ceil_pow2(int n)\n    {\n        int x = 0;\n        while ((1U << x) < (unsigned int) (n))\n            x++;\n        return x;\n    }\n \n  public:\n    lazy_segtree() : lazy_segtree(0) {}\n    explicit lazy_segtree(int n) : lazy_segtree(std::vector<S>(n, e())) {}\n    explicit lazy_segtree(const std::vector<S> &v) : _n(int(v.size()))\n    {\n        log = ceil_pow2(_n);\n        size = 1 << log;\n        d = std::vector<S>(2 * size, e());\n        lz = std::vector<F>(size, id());\n        for (int i = 0; i < _n; i++)\n            d[size + i] = v[i];\n        for (int i = size - 1; i >= 1; i--) {\n            update(i);\n        }\n    }\n \n    void set(int p, S x)\n    {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--)\n            push(p >> i);\n        d[p] = x;\n        for (int i = 1; i <= log; i++)\n            update(p >> i);\n    }\n \n    S get(int p)\n    {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--)\n            push(p >> i);\n        return d[p];\n    }\n \n    S prod(int l, int r)\n    {\n        assert(0 <= l && l <= r && r <= _n);\n        if (l == r)\n            return e();\n \n        l += size;\n        r += size;\n \n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l)\n                push(l >> i);\n            if (((r >> i) << i) != r)\n                push((r - 1) >> i);\n        }\n \n        S sml = e(), smr = e();\n        while (l < r) {\n            if (l & 1)\n                sml = op(sml, d[l++]);\n            if (r & 1)\n                smr = op(d[--r], smr);\n            l >>= 1;\n            r >>= 1;\n        }\n \n        return op(sml, smr);\n    }\n \n    S all_prod() { return d[1]; }\n \n    void apply(int p, F f)\n    {\n        assert(0 <= p && p < _n);\n        p += size;\n        for (int i = log; i >= 1; i--)\n            push(p >> i);\n        d[p] = mapping(f, d[p]);\n        for (int i = 1; i <= log; i++)\n            update(p >> i);\n    }\n    void apply(int l, int r, F f)\n    {\n        assert(0 <= l && l <= r && r <= _n);\n        if (l == r)\n            return;\n \n        l += size;\n        r += size;\n \n        for (int i = log; i >= 1; i--) {\n            if (((l >> i) << i) != l)\n                push(l >> i);\n            if (((r >> i) << i) != r)\n                push((r - 1) >> i);\n        }\n \n        {\n            int l2 = l, r2 = r;\n            while (l < r) {\n                if (l & 1)\n                    all_apply(l++, f);\n                if (r & 1)\n                    all_apply(--r, f);\n                l >>= 1;\n                r >>= 1;\n            }\n            l = l2;\n            r = r2;\n        }\n \n        for (int i = 1; i <= log; i++) {\n            if (((l >> i) << i) != l)\n                update(l >> i);\n            if (((r >> i) << i) != r)\n                update((r - 1) >> i);\n        }\n    }\n \n    template <bool (*g)(S)> int max_right(int l)\n    {\n        return max_right(l, [](S x) { return g(x); });\n    }\n    template <class G> int max_right(int l, G g)\n    {\n        assert(0 <= l && l <= _n);\n        assert(g(e()));\n        if (l == _n)\n            return _n;\n        l += size;\n        for (int i = log; i >= 1; i--)\n            push(l >> i);\n        S sm = e();\n        do {\n            while (l % 2 == 0)\n                l >>= 1;\n            if (!g(op(sm, d[l]))) {\n                while (l < size) {\n                    push(l);\n                    l = (2 * l);\n                    if (g(op(sm, d[l]))) {\n                        sm = op(sm, d[l]);\n                        l++;\n                    }\n                }\n                return l - size;\n            }\n            sm = op(sm, d[l]);\n            l++;\n        } while ((l & -l) != l);\n        return _n;\n    }\n \n    template <bool (*g)(S)> int min_left(int r)\n    {\n        return min_left(r, [](S x) { return g(x); });\n    }\n    template <class G> int min_left(int r, G g)\n    {\n        assert(0 <= r && r <= _n);\n        assert(g(e()));\n        if (r == 0)\n            return 0;\n        r += size;\n        for (int i = log; i >= 1; i--)\n            push((r - 1) >> i);\n        S sm = e();\n        do {\n            r--;\n            while (r > 1 && (r % 2))\n                r >>= 1;\n            if (!g(op(d[r], sm))) {\n                while (r < size) {\n                    push(r);\n                    r = (2 * r + 1);\n                    if (g(op(d[r], sm))) {\n                        sm = op(d[r], sm);\n                        r--;\n                    }\n                }\n                return r + 1 - size;\n            }\n            sm = op(d[r], sm);\n        } while ((r & -r) != r);\n        return 0;\n    }\n \n  private:\n    int _n, size, log;\n    std::vector<S> d;\n    std::vector<F> lz;\n \n    void update(int k) { d[k] = op(d[2 * k], d[2 * k + 1]); }\n    void all_apply(int k, F f)\n    {\n        d[k] = mapping(f, d[k]);\n        if (k < size)\n            lz[k] = composition(f, lz[k]);\n    }\n    void push(int k)\n    {\n        all_apply(2 * k, lz[k]);\n        all_apply(2 * k + 1, lz[k]);\n        lz[k] = id();\n    }\n};\n \n} // namespace atcoder\nusing a2i = array<int, 2>;\nusing atcoder::lazy_segtree;\nusing S = a2i;\nS op(S a, S b) {return a2i{a[0] + b[0], a[1] + b[1]};}\nusing F = int;\nS e() {return {0, 0};}\nS mapping(F f, S r) {\n    if (f == 0)\n        return r;\n    return S{r[1], r[1]};\n}\nF id() {return 0;}\nF composite(F f, F g) {\n    if (f == 0) return g;\n    if (g == 0) return f;\n    return 1;\n}\n\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& qs) {\n        int m = qs.size();\n        vector<int> ret(m);\n        int len = n - 1;\n        \n        lazy_segtree<S, op, e, F, mapping, composite, id> seg(n);\n        for (int i = 0; i < n; ++i) seg.set(i, {0, 1});\n        \n        for (int i = 0; i < m; ++i) {\n            int u = qs[i][0], v = qs[i][1];\n            \n            int marked = seg.prod(u + 1, v)[0];\n            // cout << \"marked: \" << marked << '\\n';\n            len -= v - u - 1 - marked;\n            \n            seg.apply(u + 1, v, 1);\n            \n            ret[i] = len;\n        }\n        \n        return ret;\n    }\n};",
    "submit_ts": "1722741638",
    "subm_id": "1343749828"
}