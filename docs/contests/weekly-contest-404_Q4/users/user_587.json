{
    "username": "H3PMo12O40",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        if not edges1:\n            n1=1\n        else:\n            n1=max(max(i) for i in edges1)+1\n        if not edges2:\n            n2=1\n        else:\n            n2=max(max(i) for i in edges2)+1\n        adjacent1=[[] for i in range(n1)]\n        adjacent2=[[] for i in range(n2)]\n        for i in edges1:\n            adjacent1[i[0]].append(i[1])\n            adjacent1[i[1]].append(i[0])\n        for i in edges2:\n            adjacent2[i[0]].append(i[1])\n            adjacent2[i[1]].append(i[0])\n            \n        def diameter(adjacent,n):\n            if n==1:\n                return 0\n            visited=[False]*n\n            visited[0]=True\n            stack=[0]\n            child=[]\n            tarverse=True\n            while tarverse:\n                tarverse=False\n                for i in stack:\n                    for j in adjacent[i]:\n                        if not visited[j]:\n                            child.append(j)\n                            tarverse=True\n                            visited[j]=True\n                if tarverse:\n                    stack=child\n                    child=[]\n                    \n            depth=0\n            node=stack[0]\n            #print('node',node)\n            visited=[False]*n\n            visited[node]=True\n            stack=[node]\n            child=[]\n            tarverse=True\n            while tarverse:\n                tarverse=False\n                for i in stack:\n                    for j in adjacent[i]:\n                        if not visited[j]:\n                            child.append(j)\n                            tarverse=True\n                            visited[j]=True\n                if tarverse:\n                    depth+=1\n                    stack=child\n                    child=[]\n            return depth\n        \n        d1=diameter(adjacent1,n1)\n        d2=diameter(adjacent2,n2)\n        #print(d1,d2)\n        return max(d1,d2,(1+d1)//2+(1+d2)//2+1)",
    "submit_ts": "1719718248",
    "subm_id": "1304412455"
}