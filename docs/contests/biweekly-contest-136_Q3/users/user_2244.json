{
    "username": "roshanpatil18",
    "submission": "class Solution {\npublic:\nint minFlips(vector<vector<int>>& matrix) {\n    int numRows = matrix.size();\n    int numCols = matrix[0].size();\n    int totalFlips = 0;\n    \n\n    if (numRows % 2 == 1 && numCols % 2 == 1) {\n        if (matrix[numRows / 2][numCols / 2] == 1) {\n            totalFlips++;\n        }\n    }\n\n    vector<int> flipCounts(3, 0);\n  int x=totalFlips;\n    x=0;\n    x=1;\n    \n \n    if (numRows % 2 == 1) {\n        int leftIndex = 0, rightIndex = numCols - 1;\n        while (leftIndex < rightIndex) {\n            int rowSum = matrix[numRows / 2][leftIndex] + matrix[numRows / 2][rightIndex];\n            flipCounts[rowSum]++;\n            leftIndex++;\n            rightIndex--;\n        }\n    }\n\n\n    if (numCols % 2 == 1) {\n        int topIndex = 0, bottomIndex = numRows - 1;\n        while (topIndex < bottomIndex) {\n            int colSum = matrix[topIndex][numCols / 2] + matrix[bottomIndex][numCols / 2];\n            flipCounts[colSum]++;\n            topIndex++;\n            bottomIndex--;\n        }\n    }\n\n   \n    if (flipCounts[2] % 2 == 1) {\n        totalFlips += (flipCounts[1] > 0) ? flipCounts[1] : 2;\n    } else {\n        totalFlips += flipCounts[1];\n    }\n  int y=totalFlips;\n  \n    for (int row = 0; row < numRows / 2; ++row) {\n        for (int col = 0; col < numCols / 2; ++col) {\n            int topLeft = matrix[row][col];\n            int bottomLeft = matrix[numRows - 1 - row][col];\n            int topRight = matrix[row][numCols - 1 - col];\n            int bottomRight = matrix[numRows - 1 - row][numCols - 1 - col];\n\n            int blockSum = topLeft + bottomLeft + topRight + bottomRight;\n\n            if (blockSum != 0 && blockSum != 4) {\n                totalFlips += min(blockSum, 4 - blockSum);\n            }\n        }\n    }\n\n    int ans= totalFlips;\n    return ans;\n}\n};",
    "submit_ts": "1722700351",
    "subm_id": "1343239241"
}