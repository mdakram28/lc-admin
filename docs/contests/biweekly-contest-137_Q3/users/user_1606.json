{
    "username": "Ananya Garg",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n int m = board.size();\n    int n = board[0].size();\n    long long maxSum = LLONG_MIN;\n\n    // Store the top 3 values with their column indices for each row\n    vector<vector<pair<int, int>>> topValues(m);\n\n    for (int r = 0; r < m; ++r) {\n        vector<pair<int, int>> rowValues;\n        for (int c = 0; c < n; ++c) {\n            rowValues.push_back({board[r][c], c});\n        }\n        // Sort the row values in descending order\n        sort(rowValues.rbegin(), rowValues.rend());\n        // Store only the top 3 values\n        for (int i = 0; i < min(3, (int)rowValues.size()); ++i) {\n            topValues[r].push_back(rowValues[i]);\n        }\n    }\n\n    // Iterate over all combinations of 3 distinct rows\n    for (int r1 = 0; r1 < m; ++r1) {\n        for (int r2 = r1 + 1; r2 < m; ++r2) {\n            for (int r3 = r2 + 1; r3 < m; ++r3) {\n                // Try all combinations of columns for the selected rows\n                for (auto& [v1, c1] : topValues[r1]) {\n                    for (auto& [v2, c2] : topValues[r2]) {\n                        if (c2 == c1) continue; // Skip if columns overlap\n                        for (auto& [v3, c3] : topValues[r3]) {\n                            if (c3 == c1 || c3 == c2) continue; // Skip if columns overlap\n                            // Calculate the sum for this specific combination\n                            long long currentSum = (long long)v1 + (long long)v2 + (long long)v3;\n                            maxSum = max(maxSum, currentSum);\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    return maxSum;\n    }\n};",
    "submit_ts": "1723908038",
    "subm_id": "1359135463"
}