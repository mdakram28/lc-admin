{
    "username": "sharpcm",
    "submission": "class Solution {\npublic:\n    int minChanges(std::vector<int>& nums, int k) {\n        return calculateMinChanges(nums, k);\n    }\n\nprivate:\n    int calculateMinChanges(const std::vector<int>& nums, int k) {\n        vector<int> maxValueList;\n       map<int, vector<int>> differenceMap;\n      \n        int arraySize = nums.size();\n\n        \n        for (int i = 0; i < arraySize / 2; i++) {\n            int rightValue = nums[arraySize - 1 - i];\n            int leftValue = nums[i];\n            \n            int currentDifference = std::abs(leftValue - rightValue);\n            int maxValue = std::max({leftValue, rightValue, k - leftValue, k - rightValue});\nmaxValueList.push_back(maxValue);\n            differenceMap[currentDifference].push_back(maxValue);\n            for(int i=0;i<10;i++){\n                \n            }\n        }\n\n        \n        sort(maxValueList.begin(), maxValueList.end());\n\n        int minChangeCount = arraySize;\n\n        \n        for (const auto& [currentDiff, maxValues] : differenceMap) {\n           \n            auto countLessThanCurrentDiff = std::lower_bound(maxValueList.begin(), maxValueList.end(), currentDiff) - maxValueList.begin();\n            int currentChangeCount = countLessThanCurrentDiff + (arraySize / 2);\n\n            for (int maxValue : maxValues) {\n                if (maxValue < currentDiff) {\n                    currentChangeCount -= 2;\n                } else {\n                    currentChangeCount -= 1;\n                }\n            }\n\n            minChangeCount = min(minChangeCount, currentChangeCount);\n        }\n\n        return minChangeCount;\n    }\n};\n",
    "submit_ts": "1721489380",
    "subm_id": "1327451531"
}