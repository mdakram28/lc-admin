{
    "username": "user3593Z",
    "submission": "class Solution {\n    public int minimumDistance(int[][] points) {\n        \n        int n = points.length;\n        \n        TreeMap<Integer, Integer> plus = new TreeMap<>();\n        TreeMap<Integer, Integer> minus = new TreeMap<>();\n        \n        for (int[] p : points) {\n            int pl = p[0] + p[1];\n            int mn = p[0] - p[1];\n            plus.put(pl, plus.getOrDefault(pl, 0) + 1);\n            minus.put(mn, minus.getOrDefault(mn, 0) + 1);\n        }\n        \n        int result = Math.max(plus.lastKey() - plus.firstKey(), minus.lastKey() - minus.firstKey());\n        \n        for (int[] p : points) {\n            int pl = p[0] + p[1];\n            int mn = p[0] - p[1];\n            \n            int plc = plus.get(pl);\n            if (plc == 1) plus.remove(pl);\n            else plus.put(pl, plc - 1);\n            \n            int mnc = minus.get(mn);\n            if (mnc == 1) minus.remove(mn);\n            else minus.put(mn, mnc - 1);\n            \n            result = Math.min(result, Math.max(plus.lastKey() - plus.firstKey(), minus.lastKey() - minus.firstKey()));\n            \n            plus.put(pl, plus.getOrDefault(pl, 0) + 1);\n            minus.put(mn, minus.getOrDefault(mn, 0) + 1);\n        }\n        \n        return result;\n        \n    }\n}"
}