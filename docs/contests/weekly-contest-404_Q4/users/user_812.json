{
    "username": "piscesayush",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m = edges2.size()+1;\n        vector<unordered_set<int>> adjList1(n, unordered_set<int>()), adjList2(m, unordered_set<int>());\n        \n        for(auto &edge:edges1){\n            adjList1[edge[0]].insert(edge[1]);\n            adjList1[edge[1]].insert(edge[0]);\n        }\n        for(auto &edge:edges2){\n            adjList2[edge[0]].insert(edge[1]);\n            adjList2[edge[1]].insert(edge[0]);\n        }\n        \n        auto val1 = func(adjList1);\n        auto val2 = func(adjList2);\n        //cout<<val1<<\" \"<<val2<<endl;\n        int ans = val1.first+val2.first+1;\n        ans = max(ans, max(val1.second, val2.second));\n        return ans;\n    }\n    \n    pair<int,int> func(vector<unordered_set<int>> &adjList){\n        int n = adjList.size();\n        vector<int> leaves;\n        \n        for(int i = 0; i < adjList.size(); i++){\n            if(adjList[i].size() == 1) leaves.push_back(i);\n        }\n        int removed = 0;\n        \n        int height = 0;\n        while(n-removed > 2){\n            removed += leaves.size();\n            vector<int> temp;\n            for(auto &nd:leaves){\n                int neigh = *adjList[nd].begin();\n                adjList[neigh].erase(nd);\n                if(adjList[neigh].size() == 1) temp.push_back(neigh);\n            }\n            leaves = move(temp);\n            height++;\n        }\n        \n        if(n-removed == 2) return pair<int,int>{height+1, 2*height+1};\n        return pair<int,int>{height, height*2};\n    }\n};",
    "submit_ts": 1719719861.0
}