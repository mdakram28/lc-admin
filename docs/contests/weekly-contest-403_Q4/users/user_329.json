{
    "username": "fmo012",
    "submission": "class Solution:\n    def minimumSum(self, grid: List[List[int]]) -> int:\n        # case1: two cuts on rows\n        # case2: two cuts on cols\n        # case3: first cut on row, second cut on [0,row] at a col\n        # case4: first cut on row, second cut on [row,--] at a col\n        # case5: first cut on col, second cut on [0, col] at a row\n        # case6: first cut on col, second cut on [col, --] at a row\n        \n        # return inf when not found\n        def min_area(min_r, max_r, min_c, max_c) -> int:\n            # record all 1's position, min_col, max_col, min_row, max_row decide the rectengle\n            min_col, max_col, min_row, max_row = math.inf, 0, math.inf, 0\n\n            for r in range(min_r, max_r+1):\n                for c in range(min_c, max_c+1):\n                    if grid[r][c] == 1:\n                        min_col = min(min_col, c)\n                        max_col = max(max_col, c)\n                        min_row = min(min_row, r)\n                        max_row = max(max_row, r)\n\n            return (max_col - min_col + 1) * (max_row - min_row + 1)\n        \n        m = len(grid)\n        n = len(grid[0])\n        \n        res = math.inf\n        \n        for r1 in range(1, m):\n            for r2 in range(r1+1, m):\n                # find the min_area in rows[0, r1-1], row[r1, r2-1], row[r2, --]\n                \n                rec1 = min_area(0, r1-1, 0, n-1)\n                rec2 = min_area(r1, r2-1, 0, n-1)\n                rec3 = min_area(r2, m-1, 0, n-1)\n                \n                if rec1 < math.inf and rec2 < math.inf and rec3 < math.inf:\n                    res = min(res, rec1 + rec2 + rec3)\n                    \n        for c1 in range(1, n):\n            for c2 in range(c1+1, n):\n                # find the min_area in cols[0, c1-1], cols[c1, c2-1], cols[c2, --]\n                \n                rec1 = min_area(0, m-1, 0, c1-1)\n                rec2 = min_area(0, m-1, c1, c2-1)\n                rec3 = min_area(0, m-1, c2, n-1)\n                \n                if rec1 < math.inf and rec2 < math.inf and rec3 < math.inf:\n                    res = min(res, rec1 + rec2 + rec3)\n        \n        for r1 in range(1, m):\n            for c1 in range(1, n):\n                # case 3: second cut on [0,row] at a col\n                rec1 = min_area(0, r1-1, 0, c1-1)\n                rec2 = min_area(0, r1-1, c1, n-1)\n                rec3 = min_area(r1, m-1, 0, n-1)\n                \n                if rec1 < math.inf and rec2 < math.inf and rec3 < math.inf:\n                    res = min(res, rec1 + rec2 + rec3)\n                    \n                # case 4: second cut on [row, --] at a col\n                rec4 = min_area(0, r1-1, 0, n-1)\n                rec5 = min_area(r1, m-1, 0, c1-1)\n                rec6 = min_area(r1, m-1, c1, n-1)\n                \n                if rec4 < math.inf and rec5 < math.inf and rec6 < math.inf:\n                    res = min(res, rec4 + rec5 + rec6)\n                \n        \n        for c1 in range(1, n):\n            for r1 in range(1, m):\n                # case5: first cut on col, second cut on [0, col] at a row\n                rec1 = min_area(0, r1-1, 0, c1-1)\n                rec2 = min_area(r1, m-1, 0, c1-1)\n                rec3 = min_area(0, m-1, c1, n-1)\n                \n                if rec1 < math.inf and rec2 < math.inf and rec3 < math.inf:\n                    res = min(res, rec1 + rec2 + rec3)\n                    \n                # case6: first cut on col, second cut on [col, --] at a row\n                rec4 = min_area(0, m-1, 0, c1-1)\n                rec5 = min_area(0, r1-1, c1, n-1)\n                rec6 = min_area(r1, m-1, c1, n-1)\n                \n                if rec4 < math.inf and rec5 < math.inf and rec6 < math.inf:\n                    res = min(res, rec4 + rec5 + rec6)\n        return res",
    "submit_ts": "1719114100",
    "subm_id": "1297339825"
}