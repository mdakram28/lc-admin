{
    "username": "pjiang",
    "submission": "class Solution {\npublic:\n    struct Trie {\n        int val;\n        Trie *next[26];\n\n        Trie(int v) {\n            val = v;\n            for (int i=0; i<26; i++) next[i] = nullptr;\n        }\n    };\n\n    void add(Trie* root, const string& s, int cost) {\n        for (auto c : s) {\n            int i = c - 'a';\n            if (root->next[i] == nullptr) root->next[i] = new Trie(INT_MAX);\n            root = root->next[i];\n        }\n        root->val = min(root->val, cost);\n    }\n\n    void query(Trie* root, string& s, int start, vector<int>& dp, int k) {\n        while (start < s.length()) {\n            int i = s[start] - 'a';\n            root = root->next[i];\n            if (root == nullptr) break;\n            if (root->val != INT_MAX) {\n                dp[start+1] = min(dp[start+1], k+root->val);\n                // cout << \"dp\" << start+1 << \":\" << dp[start+1] << endl;\n            }\n            start++;\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* root = new Trie(0);\n        for (int i=0; i<words.size(); i++) {\n            add(root, words[i], costs[i]);\n        }\n        int n = target.length();\n        vector<int> dp(n+1, INT_MAX);\n        dp[0] = 0;\n        for (int i=0; i<=n; i++) {\n            if (dp[i] != INT_MAX) {\n                query(root, target, i, dp, dp[i]);\n            }\n        }\n        if (dp.back() == INT_MAX) return -1;\n        return dp.back();\n    }\n};",
    "submit_ts": "1720324104",
    "subm_id": "1312391682"
}