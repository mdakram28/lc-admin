{
    "username": "grizzly_bear42",
    "submission": "class Solution {\npublic:\n    // diameter calculation template code generated using CHATgpt.\n    pair<int, int> bfs(int start, vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int farthest_node = start;\n        while (!q.empty()) {\n            int node = q.front(); q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthest_node]) {\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthest_node, dist[farthest_node]};\n    }\n    int find_diameter(vector<vector<int>>& adj) {\n        auto [farthest_node, _] = bfs(0, adj);\n        auto [other_end, diameter] = bfs(farthest_node, adj);\n        return diameter;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (auto &i : edges1) {\n            int u = i[0], v = i[1];\n            adj1[u].push_back(v);\n            adj1[v].push_back(u);\n        }\n\n        for (auto &i : edges2) {\n            int u = i[0], v = i[1];\n            adj2[u].push_back(v);\n            adj2[v].push_back(u);\n        }\n        \n        int dia1 = find_diameter(adj1);\n        int dia2 = find_diameter(adj2);\n        cout<<dia1<<\" \"<<dia2<<endl;\n        \n        int ans = max(dia1, dia2);\n        \n        if(dia1%2==1){\n            dia1 = (dia1+1)/2;\n        }\n        else{\n            dia1 = dia1/2;\n        }\n        if(dia2%2==1){\n            dia2 = (dia2+1)/2;\n        }\n        else{\n            dia2 = dia2/2;\n        }\n        \n        return max(ans, dia1 + dia2 + 1);\n    }\n};",
    "submit_ts": "1719719444",
    "subm_id": "1304442101"
}