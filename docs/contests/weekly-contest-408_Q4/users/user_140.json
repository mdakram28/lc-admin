{
    "username": "Tinky1224",
    "submission": "class DSU:\n    def __init__(self, n):\n        self.g = [i for i in range(n)]\n        self.L = [False]*n\n        self.R = [False]*n\n        self.B = [False]*n\n        self.T = [False]*n\n    def find(self, x):\n        if self.g[self.g[x]] != self.g[x]:\n            self.g[x] = self.find(self.g[x])\n        return self.g[x]\n    def union(self, x, y):\n        X, Y = self.find(x), self.find(y)\n        if X != Y:\n            self.g[Y] = X\n            self.L[X] |= self.L[Y]\n            self.R[X] |= self.R[Y]\n            self.B[X] |= self.B[Y]\n            self.T[X] |= self.T[Y]\n\n        \nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        n = len(circles)\n        dsu = DSU(n)\n        # if (0, 0) or (X, Y) in circle\n        for i, (x, y, r) in enumerate(circles):\n            a, b = (x**2 + y**2) <= r**2, ((x-X)**2 + (y-Y)**2) <= r**2\n            if a or b:\n                return False\n            px, py = max(0, min(x, X)), max(0, min(y, Y))\n            dsu.L[i] = x**2 + (y-py)**2 <= r**2\n            dsu.R[i] = (x-X)**2 + (y-py)**2 <= r**2\n            dsu.B[i] = (x-px)**2 + y**2 <= r**2\n            dsu.T[i] = (x-px)**2 + (y-Y)**2 <= r**2\n        for i in range(n):\n            x1, y1, r1 = circles[i]\n            for j in range(i):\n                x2, y2, r2 = circles[j]\n                if (x1-x2)**2 + (y1-y2)**2 > (r1+r2)**2:\n                    continue\n                dsu.union(i, j)\n        gs = set()\n        for i in range(n):\n            gs.add(dsu.find(i))\n        for g in gs:\n            L = dsu.L[g]\n            R = dsu.R[g]\n            B = dsu.B[g]\n            T = dsu.T[g]\n            if (L and R) or (L and B) or (T and B) or (T and R):\n                return False\n        return True",
    "submit_ts": "1722139131",
    "subm_id": "1335808694"
}