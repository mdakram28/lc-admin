{
    "username": "cpacc1",
    "submission": "\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int ans =INT_MAX;\n        vector<int> curr = mindist(points);\n        ans = min(ans,curr[0]);\n        auto copy = points;\n        copy.erase(copy.begin()+curr[1]);\n        ans = min(ans,mindist(copy)[0]);\n        points.erase(points.begin()+curr[2]);\n        ans = min(ans,mindist(points)[0]);\n        return ans;\n        \n    }\n    vector<int> mindist (vector<vector<int>>& points) {\n        vector<pair<int,int>> s;\n        vector<pair<int,int>> d;\n        int idx = 0;\n        for (auto p : points) {\n            s.push_back( {p[0]+p[1] , idx});\n            d.push_back({p[0]-p[1] , idx});\n            idx++;\n            \n        }\n        sort(s.begin(),s.end());\n        sort(d.begin(),d.end());\n        \n        if (s.back().first-s[0].first >  d.back().first-d[0].first) {\n            vector<int> ans {s.back().first-s[0].first , s.back().second , s[0].second};\n            return ans;\n        }\n        \n        vector<int> ans {d.back().first-d[0].first , d.back().second , d[0].second};\n        return ans;\n    }\n        \n    \n};"
}