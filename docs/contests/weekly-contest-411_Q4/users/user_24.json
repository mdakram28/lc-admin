{
    "username": "lydxlx",
    "submission": "\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n = len(s)\n        index = [None for i in range(n)]\n        diffs = [None for i in range(n)]\n        prefix = [None for i in range(n + 1)]\n        prefix[0] = 0\n        counts = [0, 0]\n        left = 0\n        right = 0\n        while left < n:\n            if right < left:\n                right = left\n                counts = [0, 0]\n            while right < n:\n                cur = ord(s[right]) - ord('0')\n                if counts[cur] + 1 <= k or counts[1 - cur] <= k:\n                    counts[cur] += 1\n                    right += 1\n                else:\n                    break\n            index[left] = right\n            diffs[left] = right - left\n            prefix[left + 1] = prefix[left] + diffs[left]\n            cur = ord(s[left]) - ord('0')\n            counts[cur] -= 1\n            left += 1\n\n        def cal(a):\n            return (1 + a) * a // 2\n\n        ans = []\n        for left, right in queries:\n            total = cal(right - left + 1)\n            if index[left] > right:\n                ans.append(total)\n                continue\n            low, high = left, right\n            temp = None\n            while low <= high:\n                mid = (low + high) // 2\n                if index[mid] < right + 1:\n                    temp = mid\n                    low = mid + 1\n                else:\n                    high = mid - 1\n            # print(left, right, temp)\n            tempAns = prefix[temp + 1] - prefix[left] + cal(right - temp)\n            ans.append(tempAns)\n        return ans\n\n",
    "submit_ts": "1723949950",
    "subm_id": "1359733222"
}