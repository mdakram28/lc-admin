{
    "username": "chi-yue-dian",
    "submission": "template <typename X>\nclass ComplexTable {\n  using Vec = vector<X>;\n  using VecVec = vector<Vec>;\n  using FuncType = function<X(const X &, const X &)>;\n\n  VecVec data;\n\n  static X defaultOp(const X &a, const X &b) { return a & b; }\n\n  FuncType operation;\n\n public:\n  void initialize(const vector<X> &values, FuncType func = defaultOp) {\n    operation = func;\n    int length = values.size(), logLen = ceil(log2(length)) + 1;\n    data.assign(length, Vec(logLen, 0));\n    for (int i = 0; i < length; ++i) {\n      data[i][0] = values[i];\n    }\n    for (int j = 1; j < logLen; ++j) {\n      int power = (1 << (j - 1));\n      for (int i = 0; i + power < length; ++i) {\n        data[i][j] = operation(data[i][j - 1], data[i + (1 << (j - 1))][j - 1]);\n      }\n    }\n  }\n\n  X queryRange(int left, int right) {\n    int range = right - left + 1;\n    int logRange = floor(log2(range));\n    return operation(data[left][logRange], data[right - (1 << logRange) + 1][logRange]);\n  }\n};\n\nclass Solution {\npublic:\n    typedef long long int64;\n    ComplexTable<int> complexTable;\n    int kValue;\n    int64 calculate(vector<int>& elements, int start, int end){\n        int64 result = elements[start] == kValue;\n        for(int i = start + 1; i <= end; i++){\n            if(complexTable.queryRange(start, i) != kValue) continue;\n            int left = start, right = i + 1;\n            while(left + 1 != right){\n                int mid = (left + right) >> 1;\n                if(complexTable.queryRange(mid, i) == kValue) left = mid;\n                else right = mid;\n            }            \n            result += left - start + 1ll;\n        }\n        return result;\n    }\n\n    int validate(int x){\n        return (x & kValue) == kValue;\n    }\n\n    long long countSubarrays(vector<int>& elements, int k) {\n        int size = elements.size();\n        int64 result = 0;\n        kValue = k;\n        complexTable.initialize(elements);\n        for(int i = 0; i < size; i++){\n            if(validate(elements[i])){\n                int start = i, end = i;\n                while(end + 1 < size && validate(elements[end])) end++;\n                result += calculate(elements, start, end);\n                i = end;\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": "1720277759",
    "subm_id": "544558599"
}