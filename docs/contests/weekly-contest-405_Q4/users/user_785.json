{
    "username": "Xana",
    "submission": "class Solution {\npublic:\n    class TrieNode {\n        public:\n        vector<TrieNode*> children;\n        bool isWord;\n        int cost;\n        TrieNode() {\n            children = vector<TrieNode*>(26);\n            isWord = false;\n            cost = -1;\n        }\n    };\n    TrieNode* Trie;\n\n    void insert(string word, int cost) {\n        TrieNode* t = Trie;\n        for(int a: word) {\n            int i = a - 'a';\n            if (!t->children[i]) t->children[i] = new TrieNode();\n            t = t->children[i];\n        }\n        t->isWord = true;\n        if (t->cost == -1) t->cost = cost;\n        else {\n            t->cost = min(t->cost, cost);\n        }\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie = new TrieNode();\n        int n = words.size();\n        for(int i = 0; i < n; i++) {\n            insert(words[i], costs[i]);\n        }\n        int n1 = target.size();\n        vector<int> dp(n1, -1);\n        for(int i = 0; i < n1; i++) {\n            if (i == 0 || dp[i - 1] != -1) {\n                TrieNode* t = Trie;\n                for(int j = i; j < n1; j++) {\n                    int idx = target[j] - 'a';\n                    if (t->children[idx] == NULL) break;\n                    t = t->children[idx];\n                    if (t->isWord) {\n                        if (dp[j] == -1) dp[j] = (i == 0 ? 0 : dp[i - 1]) + t->cost;\n                        else {\n                            dp[j] = min(dp[j], (i == 0 ? 0 : dp[i - 1]) + t->cost);\n                        }\n                    }\n                }\n            }\n        }\n        //for(int a: dp) cout << a << ' ';\n        return dp[n1 - 1];\n    }\n};",
    "submit_ts": "1720323172",
    "subm_id": "1312369082"
}