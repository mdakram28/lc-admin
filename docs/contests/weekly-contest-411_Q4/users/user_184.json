{
    "username": "jwpassion1",
    "submission": "class Solution {\npublic:\n    struct segtree{\n        int res;\n        vector<vector<int>> tree;\n        vector<vector<long long>> tsum;\n        vector<int> subans;\n        \n        void init(int t1, int t2, int idx){\n            if (t1 == t2){\n                tree[idx].push_back(subans[t1]);\n                tsum[idx].push_back(subans[t1]);\n                return;\n            }\n            int mid = (t1 + t2) / 2;\n            init(t1, mid, idx * 2);\n            init(mid + 1, t2, idx * 2 + 1);\n            tree[idx].resize(t2 - t1 + 1);\n            merge(tree[idx * 2].begin(), tree[idx * 2].end(), tree[idx * 2 + 1].begin(), tree[idx * 2 + 1].end(), tree[idx].begin());\n            tsum[idx].resize(t2 - t1 + 1);\n            for (int i = 0; i < t2 - t1 + 1; i++){\n                if (i) tsum[idx][i] = tsum[idx][i - 1];\n                tsum[idx][i] += tree[idx][i];\n            }\n        }\n        \n        void init(int n){\n            tree.resize(res);\n            tsum.resize(res);\n            init(0, n - 1, 1);\n        }\n        \n        long long query(int t1, int t2, int q1, int q2, int idx){\n            if (q2 < t1 || t2 < q1) return 0;\n            if (q1 <= t1 && t2 <= q2){\n                int lidx = int(lower_bound(tree[idx].begin(), tree[idx].end(), q1) - tree[idx].begin());\n                long long ret = 0;\n                if (lidx) ret -= (long long)q1 * lidx - tsum[idx][lidx - 1];\n                return ret;\n            }\n            int mid = (t1 + t2) / 2;\n            return query(t1, mid, q1, q2, idx * 2) + query(mid + 1, t2, q1, q2, idx * 2 + 1);\n        }\n    };\n    \n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        segtree tree;\n        tree.res = 1;\n        while (s.size() * 2 > tree.res) tree.res *= 2;\n        int id = 0, k0 = 0, k1 = 0;\n        tree.subans.resize(s.size());\n        vector<long long> totsum(s.size() + 1);\n        for (int i = 0; i < s.size(); i++){\n            if (s[i] == '1') k1++;\n            else k0++;\n            while (k0 > k && k1 > k){\n                if (s[id] == '0') k0--;\n                else k1--;\n                id++;\n            }\n            tree.subans[i] = id;\n            totsum[i + 1] = totsum[i] + i - tree.subans[i] + 1;\n        }\n        tree.init((int)s.size());\n        vector<long long> ans;\n        \n        for (vector<int> i : queries){\n            ans.push_back(totsum[i[1] + 1] - totsum[i[0]] + tree.query(0, (int)s.size() - 1, i[0], i[1], 1));\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1723953258",
    "subm_id": "1359816486"
}