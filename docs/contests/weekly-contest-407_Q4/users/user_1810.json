{
    "username": "apoobhaiya73",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n            int n = nums.length;\n        int[] differences = new int[n];\n        \n        // Calculate the differences between target and nums\n        for (int i = 0; i < n; i++) {\n            differences[i] = target[i] - nums[i];\n        }\n        \n        int sign = 0;\n        long currentMin = 0;\n        long totalOperations = 0;\n        \n        // Initialize the operations count with the absolute value of the first difference\n        totalOperations = Math.abs(differences[0]);\n        currentMin = totalOperations;\n        \n        if (differences[0] >= 0) {\n            sign = 1;\n        }\n        \n        for (int i = 1; i < n; i++) {\n            if (differences[i] < 0 && sign == 1) {\n                totalOperations += Math.abs(differences[i]);\n                currentMin = Math.abs(differences[i]);\n                sign = 0;\n                continue;\n            }\n            \n            if (differences[i] >= 0 && sign == 0) {\n                totalOperations += Math.abs(differences[i]);\n                currentMin = Math.abs(differences[i]);\n                sign = 1;\n                continue;\n            }\n            \n            if (currentMin >= Math.abs(differences[i])) {\n                currentMin = Math.abs(differences[i]);\n                continue;\n            } else {\n                totalOperations += Math.abs(differences[i]) - currentMin;\n                currentMin = Math.abs(differences[i]);\n            }\n        }\n        \n        return totalOperations;\n    }\n}",
    "submit_ts": "1721533636",
    "subm_id": "1328013342"
}