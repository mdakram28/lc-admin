{
    "username": "Hieu",
    "submission": "class Solution {\npublic:\n    void print(vector<pair<int, int>>& cand) {\n        for (auto e : cand) {\n            cout << e.first << \":\" << e.second << \" \";\n        }\n        cout << endl;\n    }\n    long long get_score(vector<pair<int, pair<int, int>>>& cand1, vector<pair<int, pair<int, int>>>& cand2, vector<pair<int, pair<int, int>>>& maxes) {\n        long long max_score = LLONG_MIN;\n        // print(cand1);\n        // print(cand2);\n        // print(cand3);\n        for (int i1 = 0; i1 < 3; i1++) {\n            for (int i2 = 0; i2 < 3; i2++) {\n                int c1 = cand1[i1].second.second;\n                int r1 = cand1[i1].second.first;\n                int c2 = cand2[i2].second.second;\n                int r2 = cand2[i2].second.first;\n                if (c1 != c2) {\n                    for (auto [score3, cor3] : maxes) {\n                        auto [r3, c3] = cor3;\n                        if (c3 != c2 && c3 != c1 && r3 != r2 && r3 != r1) {\n                            max_score = max(max_score, (long long) cand1[i1].first + cand2[i2].first + score3);\n                            break;\n                        }\n                    }\n                }\n            }\n        }\n\n        return max_score;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<vector<pair<int, pair<int, int>>>> rows(m);\n        vector<pair<int, pair<int, int>>> maxes;\n\n        for (int r = 0; r < m; r++) {\n            vector<pair<int, pair<int, int>>> cands(3, {INT_MIN, {INT_MIN, INT_MIN}});\n            for (int c = 0; c < n; c++) {\n                if (board[r][c] >= cands[0].first) {\n                    cands[2] = cands[1];\n                    cands[1] = cands[0];\n                    cands[0] = {board[r][c], {r, c}};\n                } else if (board[r][c] >= cands[1].first) {\n                    cands[2] = cands[1];\n                    cands[1] = {board[r][c], {r, c}};\n                } else if (board[r][c] >= cands[2].first) {\n                    cands[2] = {board[r][c], {r, c}};\n                }\n            }\n\n            for (int i = 0; i < 3; i++) {\n                maxes.push_back(cands[i]);\n            }\n            sort(maxes.rbegin(), maxes.rend());\n            if (maxes.size() > 9) {\n                maxes.resize(9);\n            }\n            rows[r] = cands;\n        }\n\n        long long max_score = LLONG_MIN;\n        for (int r1 = 0; r1 < m; r1++) {\n            for (int r2 = r1 + 1; r2 < m; r2++) {\n                max_score = max(max_score, get_score(rows[r1], rows[r2], maxes));\n            }\n        }\n        return max_score;\n    }\n};",
    "submit_ts": "1723909844",
    "subm_id": "1359207874"
}