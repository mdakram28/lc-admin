{
    "username": "brianlaw100",
    "submission": "#include <vector>\n\nnamespace FenwickTree {\n\n    template <typename P>\n    auto forLevels(int sz, P p) {\n\n        auto idx = 0;\n\n        for (auto i = 31 - __builtin_clz(sz); i >= 0; --i) {\n            const auto new_idx = idx | 1 << i;\n            if (new_idx <= sz && p(new_idx)) {\n                idx = new_idx;\n            }\n        }\n\n        return idx;\n\n    }\n\n    template <typename F>\n    auto forParents(int node, int sz, F f) {\n\n        ++node;\n\n        while (node <= sz) {\n            f(node);\n            node += node & -node;\n        }\n\n    }\n\n    template <typename F>\n    auto forRange(int node, F f) {\n\n        while (node) {\n            f(node);\n            node -= node & -node;\n        }\n\n    }\n\n}\n\nclass Solution {\n\npublic:\n\n    auto countOfPeaks(std::vector<int>& nums, std::vector<std::vector<int>>& queries) {\n\n        auto answer = std::vector<int>();\n        const auto sz = static_cast<int>(std::size(nums));\n\n        answer.reserve(std::size(queries));\n\n        const auto isPeak = [&](int idx) {\n            return (\n                idx > 0 && idx < sz - 1 && nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1]\n            );\n        };\n        auto sums = std::vector<int>(sz + 1);\n\n        const auto upd = [&](int idx, int amt) {\n            FenwickTree::forParents(\n                idx, sz,\n                [&](int node) {\n                    sums[node] += amt;\n                }\n            );\n        };\n\n        for (auto i = 1; i < sz - 1; ++i) {\n            if (isPeak(i)) {\n                upd(i, 1);\n            }\n        }\n\n        for (auto& x : queries) {\n            if (x[0] == 1) {\n                const auto qry = [&](int idx) {\n                    auto sum = 0;\n                    FenwickTree::forRange(\n                        idx,\n                        [&](int node) {\n                            sum += sums[node];\n                        }\n                    );\n                    return sum;\n                };\n                answer.push_back(\n                    qry(x[2] + 1) - qry(x[1]) - isPeak(x[1]) - (x[1] < x[2] && isPeak(x[2]))\n                );\n            } else {\n                for (auto j = x[1] - 1; j <= x[1] + 1; ++j) {\n                    if (isPeak(j)) {\n                        upd(j, -1);\n                    }\n                }\n                nums[x[1]] = x[2];\n                for (auto j = x[1] - 1; j <= x[1] + 1; ++j) {\n                    if (isPeak(j)) {\n                        upd(j, 1);\n                    }\n                }\n\n            }\n        }\n\n        return answer;\n\n    }\n\n};\n",
    "submit_ts": 1718506638.0
}