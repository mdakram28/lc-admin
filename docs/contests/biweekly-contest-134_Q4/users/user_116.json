{
    "username": "LeetCoach",
    "submission": "import operator\n\n\nclass SegmentTree:\n    def __init__(self, n, default_val=0, combine=operator.add):\n        self._n = n\n        self._default_val = default_val\n        self._tree = [default_val] * (2 * n)\n        self._combine = combine\n\n    def set(self, i, x):\n        i += self._n\n        self._tree[i] = x\n        i //= 2\n        while i >= 1:\n            self._tree[i] = self._combine(self._tree[2 * i], self._tree[2 * i + 1])\n            i //= 2\n\n    def query(self, l, r):\n        l += self._n\n        r += self._n\n        res = self._default_val\n        while l <= r:\n            if l % 2 == 1:\n                res = self._combine(res, self._tree[l])\n                l += 1\n            if r % 2 == 0:\n                res = self._combine(res, self._tree[r])\n                r -= 1\n            l //= 2\n            r //= 2\n        return res\n\nDEFAULT = (1 << 30) - 1\n    \nclass Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        n = len(nums)\n        arr = SegmentTree(n, DEFAULT, operator.and_)\n        for i in range(n):\n            arr.set(i, nums[i])\n        l1 = 0\n        l2 = 0\n        res = 0\n        for r in range(n):\n            while l2 <= r and arr.query(l2, r) <= k:\n                l2 += 1\n            while l1 <= r and arr.query(l1, r) < k:\n                l1 += 1\n            #print(l1, l2, r)\n            res += l2 - l1\n        return res",
    "submit_ts": "1720277870",
    "subm_id": "1311683840"
}