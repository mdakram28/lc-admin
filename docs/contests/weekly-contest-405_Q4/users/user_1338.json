{
    "username": "PankajBhanwala",
    "submission": "// \"r\"\n// [\"r\",\"r\",\"r\",\"r\"]\n// [1,6,3,3]\n\nclass Node {\npublic:\n    int isEnd;\n    Node* children[26];\n    Node() {\n        isEnd = INT_MAX;\n        for(int i = 0; i < 26; i++)\n            children[i] = nullptr;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n    Trie() {\n        root = new Node();\n    }\n    \n    void insert(string word, int cost) {\n        Node* curr = root;\n        for(auto &ch : word) {\n            if(curr->children[ch - 'a'] == NULL)\n                curr->children[ch - 'a'] = new Node();\n            curr = curr->children[ch - 'a'];\n        }\n        curr->isEnd = min(cost, curr->isEnd);\n    }\n    \n    bool search(string word) {\n        Node* curr = root;\n        for(auto &ch : word) {\n            if(curr->children[ch - 'a'] == NULL)\n                return false;\n            curr = curr->children[ch - 'a'];\n        }\n        return curr->isEnd;\n    }\n    \n    bool startsWith(string prefix) {\n        Node* curr = root;\n        for(auto &ch : prefix) {\n            if(curr->children[ch - 'a'] == NULL)\n                return false;\n            curr = curr->children[ch - 'a'];\n        }\n        return true;\n    }\n};\n\n\nclass Solution {\npublic:\n    Trie tr;\n    // map<pair<int, Node*>, int> mp;\n    int solve(int idx, string &target, Node *root, vector<int> &dp) {\n        int n = target.size();\n        if(idx == n)\n            return 0;\n        // if(mp.find({idx, root}) != mp.end())\n        //     return mp[{idx, root}];\n        if(dp[idx] != -1)\n            return dp[idx];\n        Node *curr = root;\n        int ans = 1e9;\n        for(int i = idx; i < n; i++) {\n            if(curr->children[target[i] - 'a'] == NULL) {\n                break;\n            }\n            curr = curr->children[target[i] - 'a'];\n            // cout << i << \" \" << curr->isEnd << endl;\n            if(curr->isEnd != INT_MAX) {\n                \n                ans = min(ans, curr->isEnd + solve(i + 1, target, tr.root, dp));\n            }\n        }\n        return dp[idx] = ans;\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        \n        for(int i = 0; i < words.size(); i++) {\n            tr.insert(words[i], costs[i]);\n        }\n        // if(tr.root->children[0])\n        //     cout << tr.root->children[0]->isEnd << endl;\n        // else\n        //     cout << \"NO\" << endl;\n        vector<int> dp(target.size() + 1, -1);\n        int temp = solve(0, target, tr.root, dp);\n        if(temp >= 1e9)\n            return -1;\n        return temp;\n    }\n};",
    "submit_ts": "1720323369",
    "subm_id": "1312373840"
}