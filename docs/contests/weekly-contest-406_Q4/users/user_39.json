{
    "username": "Java_King",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        List<int[]> cuts = new ArrayList<>();\n        for (int i = 0; i < horizontalCut.length; i++) {\n            cuts.add(new int[]{horizontalCut[i], 0}); // 0 represents a horizontal cut\n        }\n        for (int i = 0; i < verticalCut.length; i++) {\n            cuts.add(new int[]{verticalCut[i], 1}); // 1 represents a vertical cut\n        }\n\n        // Sort the cuts by cost in descending order\n        cuts.sort((a, b) -> b[0] - a[0]);\n\n        // Initialize the number of pieces in each dimension\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long totalCost = 0;\n\n        // Process each cut\n        for (int[] cut : cuts) {\n            int cost = cut[0];\n            if (cut[1] == 0) { // Horizontal cut\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } else { // Vertical cut\n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n}",
    "submit_ts": "1720924778",
    "subm_id": "1320230491"
}