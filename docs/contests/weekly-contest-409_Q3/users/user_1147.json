{
    "username": "Adi_1",
    "submission": "class Solution {\npublic:\n    \n//     int bfs(unordered_map<int,int>&adj, int dest){\n//         priority_queue<pair<int,int>>q;\n        \n//         q.push({0,0});\n        \n//         while(q.size()){\n            \n//             auto [node,dist] = q.top();\n//             q.pop();\n//             if(node == dest){\n//                 return dist;\n//             }\n//             q.push({adj[node],dist+1});\n//         }\n//         return -1;\n//     }\n//     vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n//         unordered_map<int,int>adj;\n//         vector<int>parent(n,0);\n//         for(int i = 0; i<n-1; i++){\n//             parent[i+1] = i;\n//             adj[i] = i+1;\n//         }\n        \n        \n//         vector<int>ans(queries.size(),0);\n//         for(int i = 0; i<queries.size(); i++){\n//             int u = queries[i][0], v = queries[i][1];\n            \n//             if(adj[u]<v){\n//                 adj[u] = v;\n//             }\n            \n//             ans[i] = bfs(adj,n-1);\n//         }\n//         return ans;\n//     }\n    \n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n    // Initialize distances array\n    vector<int> distances(n, 0);\n    for (int i = 1; i < n; ++i) {\n        distances[i] = distances[i - 1] + 1;\n    }\n\n    // Initialize a set to keep track of active nodes\n    set<int> activeNodes;\n    for (int i = 0; i < n; ++i) {\n        activeNodes.insert(i);\n    }\n\n    vector<int> result;\n\n    // Process each query\n    for (const auto& query : queries) {\n        int start = query[0];\n        int end = query[1];\n\n        // Find the range of nodes to remove\n        auto lowerBound = activeNodes.lower_bound(start + 1);\n        auto upperBound = activeNodes.lower_bound(end);\n\n        // Remove nodes in the specified range\n        activeNodes.erase(lowerBound, upperBound);\n\n        // Calculate the number of remaining nodes minus one (excluding the destination node)\n        result.push_back(activeNodes.size() - 1);\n    }\n\n    return result;\n}\n};\n\n",
    "submit_ts": "1722743845",
    "subm_id": "1343800982"
}