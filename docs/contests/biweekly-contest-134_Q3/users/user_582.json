{
    "username": "MalharGadge",
    "submission": "typedef long long ll;\n#define fr(a,b,i) for (ll i=a;i<b;i++)\n#define rfr(a,b,i) for(ll i=a;i>=b;i--)\n#define rep(i,n) fr(0,n,i)\n#define ff first\n#define ss second\n#define pb push_back\n#define endl '\\n'\n#define inf LLONG_MAX\n#define all(c) (c).begin(), (c).end()\nconst ll mod = 1000000007;\n\ntemplate <typename T>\nvoid chmin(T &f, T s){ f = min(f, s); }\ntemplate <typename T>\nvoid chmax(T &f, T s){ f = max(f, s); }\nll expo(ll a, ll b, ll mod) {ll res = 1; while (b > 0)\n{if (b & 1)res = (res * a) % mod; a = (a * a) % mod; b = b >> 1;} return res;}\nll modinv(ll a, ll b) {return expo(a, b - 2, b);}\nll modadd(ll a, ll b, ll m) { return ( a % m + b % m) % m;}\nll modmul(ll a, ll b, ll m) { return ( a % m * b % m) % m;}\nll modsub(ll a, ll b, ll m) { return ((a%m - b%m)+ m) % m;}\nll moddiv(ll a, ll b, ll m) { return modmul(a, modinv(b, m), m) % m ;}\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        vector<int> Bad;\n        \n        for (int i = 0; i < n; ++i) {\n            if (colors[i] == colors[(i + 1) % n]) {\n                Bad.pb(i);\n            }\n        }\n        \n        vector<int> bad;\n        for(auto i: Bad){\n            bad.pb(i);\n            bad.pb(i+n);\n        }\n        sort(all(bad));\n        for(auto i: bad) cout << i << ' ';\n        cout << endl;\n        \n        int count = 0;\n\n        for (int start = 0; start < n; ++start) {\n            int end = start + k - 1;\n            \n            auto it = lower_bound(all(bad), start);\n            if (it != bad.end() && *it < end) {\n                continue;\n            }\n            \n            count++;\n        }\n\n        return count;\n    }\n};",
    "submit_ts": "1720278064",
    "subm_id": "1311692706"
}