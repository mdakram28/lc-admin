{
    "username": "yrclamb",
    "submission": "class Solution {\n    class SegmentTreeNode {\n        int start, end;\n        SegmentTreeNode left, right;\n        int sum;\n\n        public SegmentTreeNode(int start, int end) {\n            this.start = start;\n            this.end = end;\n            this.left = null;\n            this.right = null;\n            this.sum = 0;\n        }\n    }\n    \n    private SegmentTreeNode buildTree(int[] nums, int start, int end) {\n        if (start > end) {\n            return null;\n        } else {\n            SegmentTreeNode ret = new SegmentTreeNode(start, end);\n            if (start == end) {\n                ret.sum = nums[start];\n            } else {\n                int mid = start  + (end - start) / 2;             \n                ret.left = buildTree(nums, start, mid);\n                ret.right = buildTree(nums, mid + 1, end);\n                ret.sum = ret.left.sum + ret.right.sum;\n            }         \n            return ret;\n        }\n    }\n    \n    private void update(SegmentTreeNode root, int pos, int val) {\n        if (root.start == root.end) {\n           root.sum = val;\n        } else {\n            int mid = root.start + (root.end - root.start) / 2;\n            if (pos <= mid) {\n                 update(root.left, pos, val);\n            } else {\n                 update(root.right, pos, val);\n            }\n            root.sum = root.left.sum + root.right.sum;\n        }\n    }\n    \n    public int sumRange(SegmentTreeNode root, int start, int end) {\n        if (root.end == end && root.start == start) {\n            return root.sum;\n        } else {\n            int mid = root.start + (root.end - root.start) / 2;\n            if (end <= mid) {\n                return sumRange(root.left, start, end);\n            } else if (start >= mid+1) {\n                return sumRange(root.right, start, end);\n            }  else {    \n                return sumRange(root.right, mid+1, end) + sumRange(root.left, start, mid);\n            }\n        }\n    }    \n    \n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int[] peak = new int[nums.length];\n        //System.out.println(Arrays.toString(peak));\n        \n        for(int i = 1; i < nums.length - 1; i++){\n            if(nums[i] > nums[i-1] && nums[i] > nums[i+1]) peak[i] = 1;\n        }\n         \n        SegmentTreeNode root = buildTree(peak, 0, peak.length-1);\n        List<Integer> ans = new ArrayList<>();\n        \n        for(int[] q: queries){\n            if(q[0] == 1){\n                int ret = sumRange(root, q[1], q[2]);\n                if(peak[q[1]] == 1) ret--;\n                if(q[1] != q[2] && peak[q[2]] == 1) ret--;\n                ans.add(ret);\n            }\n            else{\n                nums[q[1]] = q[2];\n                \n                if(q[1] > 0 && q[1] < nums.length - 1 && nums[q[1]] > nums[q[1] - 1] && nums[q[1]] > nums[q[1] + 1]){\n                    update(root, q[1], 1);\n                    peak[q[1]] = 1;\n                }\n                else{\n                    update(root, q[1], 0);\n                    peak[q[1]] = 0;\n                }\n                \n                if(q[1]-1 > 0 && q[1]-1 < nums.length - 1 && nums[q[1]-1] > nums[q[1] - 2] && nums[q[1]-1] > nums[q[1]]){\n                    update(root, q[1]-1, 1);\n                    peak[q[1] - 1] = 1;\n                }\n                else if(q[1] - 1 >= 0){\n                    update(root, q[1]-1, 0);\n                    peak[q[1] - 1] = 0;\n                }\n                \n                if(q[1]+1 > 0 && q[1]+1 < nums.length - 1 && nums[q[1]+1] > nums[q[1]] && nums[q[1]+1] > nums[q[1] + 2]){\n                    update(root, q[1]+1, 1);\n                    peak[q[1] + 1] = 1;\n                }\n                else if(q[1] + 1 < nums.length){\n                    update(root, q[1]+1, 0);\n                    peak[q[1] + 1] = 0;\n                }\n            }\n        }\n        return ans;\n        \n    }\n}",
    "submit_ts": 1718507708.0
}