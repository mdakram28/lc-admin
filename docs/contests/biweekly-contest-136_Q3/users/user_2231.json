{
    "username": "Sirius_Snape",
    "submission": "#pragma GCC optimize (\"Ofast\")\n#pragma GCC target (\"sse,sse2,sse3,ssse3,sse4,popcnt,abm,mmx\")\n#pragma GCC optimize (\"-ffloat-store\")\n#pragma GCC optimize (\"O3\", \"unroll-loops\")\n\n#include<bits/stdc++.h>\nusing namespace std;\n\n\n\n\n\n\nclass Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rows = grid.size(), cols = grid[0].size();\n        int flips = 0;\n\n        if (rows % 2 == 1 && cols % 2 == 1) {\n            flips += countMiddleElementFlip(grid, rows / 2, cols / 2);\n        }\n\n        vector<int> shiftCount(3, 0);\n\n        if (rows % 2 == 1) {\n            countMiddleRowFlips(grid, shiftCount, rows, cols);\n        }\n\n        if (cols % 2 == 1) {\n            countMiddleColFlips(grid, shiftCount, rows, cols);\n        }\n\n        flips += calculateShiftFlips(shiftCount);\n\n        flips += Wulfric_Brian(grid, rows, cols);\n\n        return flips;\n    }\n\nprivate:\n    int countMiddleElementFlip(const vector<vector<int>>& grid, int midRow, int midCol) {\n        return grid[midRow][midCol] == 1 ? 1 : 0;\n    }\n\n    void countMiddleRowFlips(const vector<vector<int>>& grid, vector<int>& shiftCount, int rows, int cols) {\n        int left = 0, right = cols - 1;\n        while (left < right) {\n            int sum = grid[rows / 2][left] + grid[rows / 2][right];\n            shiftCount[sum] += 1;\n            left += 1;\n            right -= 1;\n        }\n    }\n\n    void countMiddleColFlips(const vector<vector<int>>& grid, vector<int>& shiftCount, int rows, int cols) {\n        int top = 0, bottom = rows - 1;\n        while (top < bottom) {\n            int sum = grid[top][cols / 2] + grid[bottom][cols / 2];\n            shiftCount[sum] += 1;\n            top += 1;\n            bottom -= 1;\n        }\n    }\n\n    int calculateShiftFlips(const vector<int>& shiftCount) {\n        if (shiftCount[2] % 2 == 1) {\n            return shiftCount[1] > 0 ? shiftCount[1] : 2;\n        } else {\n            return shiftCount[1];\n        }\n    }\n\n    int Wulfric_Brian(const vector<vector<int>>& grid, int rows, int cols) {\n        int flips = 0;\n        for (int row = 0; row < rows / 2; ++row) {\n            for (int col = 0; col < cols / 2; ++col) {\n                int a = grid[row][col];\n                int b = grid[rows - 1 - row][col];\n                int c = grid[row][cols - 1 - col];\n                int d = grid[rows - 1 - row][cols - 1 - col];\n\n                int sum = a + b + c + d;\n\n                if (sum != 0 && sum != 4) {\n                    flips += min(sum, 4 - sum);\n                }\n            }\n        }\n        return flips;\n    }\n};\n\n\n\nauto init = []() {\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    cout.tie(0);\n    return 'c';\n}();",
    "submit_ts": "1722700040",
    "subm_id": "1343229844"
}