{
    "username": "Namakian",
    "submission": "class Solution {\npublic:\n    \n    pair<int,int> recurse(vector<int> g[], int u, int p) {\n        vector<int> heights;\n        int mx_dia = 0;\n        for(auto v : g[u]) {\n            if(v==p) continue;\n            \n            auto r = recurse(g, v, u);\n            mx_dia = max(mx_dia, r.second);\n            heights.push_back(r.first);\n        }\n        \n        sort(heights.begin(), heights.end());\n        \n        if(heights.size() == 0) {\n            return {1,0};\n        }\n        \n        if(heights.size() == 1) {\n            return {heights.back() + 1, max(heights.back() + 1, mx_dia)};\n        }\n        int sz = heights.size();\n        return {heights.back() + 1, max({heights[sz-1] + heights[sz-2] + 1 , mx_dia})};\n        \n    }\n    \n    int getDiameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        \n        vector<int> g[n];\n        \n        for(auto& e : edges) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n        \n       int tmp = recurse(g, 0, -1).second;\n       return tmp == 0 ? 0 : tmp-1;\n    }\n    \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int v1 = getDiameter(edges1);\n        int v2 = getDiameter(edges2);\n        \n        // cout << v1 << \" \" << v2 << endl;\n\n        int ans = max(v1, v2);\n        \n        int tmp1 = v1/2;\n        if(v1%2) tmp1++;\n        \n        int tmp2 = v2/2;\n        if(v2%2) tmp2++;\n        \n        ans = max(ans, tmp1 + tmp2+1);\n        \n        \n        return ans;\n    }\n};",
    "submit_ts": "1719719762",
    "subm_id": "1304449945"
}