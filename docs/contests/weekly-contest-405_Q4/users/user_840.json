{
    "username": "tarunpatel1860",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\n\nclass Solution {\npublic:\n    struct TrieNode {\n        std::unordered_map<char, TrieNode*> children;\n        int cost;\n        TrieNode() : cost(-1) {}\n    };\n    \n    void insert(TrieNode* root, const std::string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        if (node->cost == -1) {\n            node->cost = cost;\n        } else {\n            node->cost = std::min(node->cost, cost);\n        }\n    }\n    \n    int minimumCost(std::string target, std::vector<std::string>& words, std::vector<int>& costs) {\n        int n = target.size();\n        std::vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], costs[i]);\n        }\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) break;\n                node = node->children[target[j]];\n                if (node->cost != -1) {\n                    dp[j + 1] = std::min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720321350",
    "subm_id": "1312320529"
}