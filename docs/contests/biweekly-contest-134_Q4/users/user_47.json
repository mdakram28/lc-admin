{
    "username": "ethanrao",
    "submission": "class Solution {\npublic:\n    int n, h[20][100005], lg[100005];\n    inline int get(int l, int r){\n        int t = lg[r - l + 1];\n        return h[t][l] & h[t][r - (1 << t) + 1];\n    }\n    long long countSubarrays(vector<int>& nums, int k) {\n        n = nums.size();\n        for(int i = 1; i <= n; ++i) h[0][i] = nums[i - 1];\n        int now = 0;\n        for(int i = 1; i <= n; ++i){\n            lg[i] = now;\n            if(i == (1 << now + 1)) ++now;\n        }\n        for(int i = 1; i <= lg[n]; ++i)\n            for(int j = 1; j + (1 << i) - 1 <= n; ++j)\n                h[i][j] = h[i - 1][j] & h[i - 1][j + (1 << i - 1)];\n        long long ans = 0ll;\n        for(int i = 1; i <= n; ++i){\n            int l = 1, r = i, mid;\n            while(l < r){\n                mid = l + r + 1 >> 1;\n                int s = get(mid, i);\n                if(s <= k) l = mid;\n                else r = mid - 1;\n            }\n            if(get(l, i) != k) continue;\n            int tmp = l;\n            l = 1, r = i;\n            while(l < r){\n                mid = l + r >> 1;\n                int s = get(mid, i);\n                if(s >= k) r = mid;\n                else l = mid + 1;\n            }\n            ans += 1ll * (tmp - l + 1);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720276557",
    "subm_id": "1311621070"
}