{
    "username": "aadritoD",
    "submission": "class Solution {\npublic:\n    \n    int minimumArea(vector<vector<bool>>& grid) {\n        \n        int L = -1, R = -1, T = -1, B = -1;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) if (grid[i][j]) {\n                if (L == -1) {\n                    L = i;\n                    R = i;\n                    T = j;\n                    B = j;\n                } else {\n                    L = min(L, i);\n                    R = max(R, i);\n                    T = min(T, j);\n                    B = max(B, j);\n                }\n            }\n        }\n        \n        if (L == -1) return 1;\n        \n        return (R - L + 1) * (B - T + 1);\n    }\n    \n    void print(const vector<vector<bool>>& grid) {\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                cout << grid[i][j] << ' ';\n            }\n            cout << '\\n';\n        }\n        \n        cout << \"\\n\\n\\n\";\n    }\n    \n    int partition(const vector<vector<bool>>& grid) {\n        \n        //print(grid);\n        \n        int best = -1;\n        \n        for (int i = 0; i < grid.size() - 1; i++) {\n            for (int j = 0; j < grid[i].size() - 1; j++) {\n                \n                vector<vector<bool>> subgrid(i + 1, vector<bool>(j + 1, 0));\n                for (int k = 0; k <= i; k++) {\n                    for (int l = 0; l <= j; l++) {\n                        subgrid[k][l] = grid[k][l];\n                    }\n                }\n                \n                int a1 = minimumArea(subgrid);\n                \n                subgrid = vector<vector<bool>>(i + 1, vector<bool>(grid[i].size() - j - 1));\n                for (int k = 0; k <= i; k++) {\n                    for (int l = j + 1; l < grid[i].size(); l++) {\n                        subgrid[k][l - j - 1] = grid[k][l];\n                    }\n                }\n                \n                int a2 = minimumArea(subgrid);\n                \n                subgrid = vector<vector<bool>>(grid.size() - i - 1, vector<bool>(grid[i].size()));\n                for (int k = i + 1; k < grid.size(); k++) {\n                    for (int l = 0; l < grid[i].size(); l++) {\n                        subgrid[k - i - 1][l] = grid[k][l];\n                    }\n                }\n                \n                int a3 = minimumArea(subgrid);\n                \n                if (best == -1) {\n                    best = a1 + a2 + a3;\n                } else {\n                    best = min(best, a1 + a2 + a3);\n                }\n            }\n        }\n        \n        return best;\n    }\n    \n    int partition_side(const vector<vector<bool>>& grid) {\n        int best = -1;\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = i + 1; j < grid.size() - 1; j++) {\n                \n                //cout << i << ' ' << j << \": \\n\";\n                \n                vector<vector<bool>> subgrid(i + 1, vector<bool>(grid[i].size()));\n                for (int k = 0; k <= i; k++) {\n                    for (int l = 0; l < grid[i].size(); l++) {\n                        subgrid[k][l] = grid[k][l];\n                    }\n                }\n                \n                //print(subgrid);\n                \n                int a1 = minimumArea(subgrid);\n                \n                subgrid = vector<vector<bool>>(j - i, vector<bool>(grid[i].size()));\n                for (int k = i + 1; k <= j; k++) {\n                    for (int l = 0; l < grid[i].size(); l++) {\n                        subgrid[k - i - 1][l] = grid[k][l];\n                    }\n                }\n                \n                //print(subgrid);\n                \n                int a2 = minimumArea(subgrid);\n                \n                subgrid = vector<vector<bool>>(grid.size() - j - 1, vector<bool>(grid[i].size()));\n                for (int k = j + 1; k < grid.size(); k++) {\n                    for (int l = 0; l < grid[i].size(); l++) {\n                        subgrid[k - j - 1][l] = grid[k][l];\n                    }\n                }\n                \n                //print(subgrid);\n                \n                int a3 = minimumArea(subgrid);\n                \n                if (best == -1) {\n                    best = a1 + a2 + a3;\n                } else {\n                    best = min(best, a1 + a2 + a3);\n                }\n                \n            }\n        }\n        \n        if (best == -1) return grid.size() * grid[0].size();\n        return best;\n    }\n    \n    int minimumSum(vector<vector<int>>& _grid) {\n        \n        vector<vector<bool>> grid(_grid.size(), vector<bool>(_grid[0].size()));\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[0].size(); j++) {\n                grid[i][j] = (_grid[i][j] == 1);\n            }\n        }\n        \n        int ans = min(partition(grid), partition_side(grid));\n        for (vector<bool>&  row : grid) {\n            reverse(row.begin(), row.end());\n        }\n        ans = min({ans, partition(grid)});\n        \n        for (int i = 0; i < (grid.size() + 1) / 2; i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                swap(grid[i][j], grid[grid.size() - i - 1][j]);\n            }\n        }\n        \n        ans = min({ans, partition(grid)});\n        \n        for (vector<bool>& row : grid) {\n            reverse(row.begin(), row.end());\n        }\n        \n        ans = min({ans, partition(grid)});\n        \n        \n        vector<vector<bool>> new_grid(grid[0].size(), vector<bool>(grid.size()));\n        for (int i = 0; i < grid.size(); i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                new_grid[j][i] = grid[i][j];\n            }\n        }\n        swap(grid, new_grid);\n        \n        ans = min({ans, partition(grid), partition_side(grid)});\n        for (vector<bool>&  row : grid) {\n            reverse(row.begin(), row.end());\n        }\n        ans = min({ans, partition(grid)});\n        \n        for (int i = 0; i < (grid.size() + 1) / 2; i++) {\n            for (int j = 0; j < grid[i].size(); j++) {\n                swap(grid[i][j], grid[grid.size() - i - 1][j]);\n            }\n        }\n        \n        ans = min({ans, partition(grid)});\n        \n        for (vector<bool>& row : grid) {\n            reverse(row.begin(), row.end());\n        }\n        \n        ans = min({ans, partition(grid)});\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": 1719115151.0
}