{
    "username": "Manan0518",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n#include <utility>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& tree1, vector<vector<int>>& tree2) {\n        // Lambda function to calculate the diameter of a tree\n        auto computeDiameter = [](const vector<vector<int>>& edges) {\n            int numNodes = edges.size() + 1;\n            vector<vector<int>> adjacencyList(numNodes);\n            for (const auto& edge : edges) {\n                adjacencyList[edge[0]].push_back(edge[1]);\n                adjacencyList[edge[1]].push_back(edge[0]);\n            }\n\n            auto bfs = [&](int startNode) {\n                vector<int> distance(numNodes, -1);\n                queue<int> nodesQueue;\n                nodesQueue.push(startNode);\n                distance[startNode] = 0;\n                int farthestNode = startNode;\n\n                while (!nodesQueue.empty()) {\n                    int currentNode = nodesQueue.front();\n                    nodesQueue.pop();\n\n                    for (int neighbor : adjacencyList[currentNode]) {\n                        if (distance[neighbor] == -1) {\n                            distance[neighbor] = distance[currentNode] + 1;\n                            nodesQueue.push(neighbor);\n                            if (distance[neighbor] > distance[farthestNode]) {\n                                farthestNode = neighbor;\n                            }\n                        }\n                    }\n                }\n                return make_pair(farthestNode, distance[farthestNode]);\n            };\n\n            int furthestFromStart = bfs(0).first;\n            int treeDiameter = bfs(furthestFromStart).second;\n            return treeDiameter;\n        };\n\n        int diameter1 = computeDiameter(tree1);\n        int diameter2 = computeDiameter(tree2);\n\n        // Calculate and return the minimum possible diameter after merging\n        return max({diameter1, diameter2, (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1});\n    }\n};",
    "submit_ts": "1719719812",
    "subm_id": "1304451161"
}