{
    "username": "jacobj2",
    "submission": "class UnionFind:\n    def __init__(self, n):\n        self.par = [-1]*n\n        self.rank = [0]*n\n        self.sides = [[False for _ in range(4)] for x in range(n)] #North, south, east, west\n    def find(self, u):\n        if self.par[u]==-1:\n            return u\n        self.par[u] = self.find(self.par[u])\n        return self.par[u]\n    def union(self, u, v):\n        uPar = self.find(u)\n        vPar = self.find(v)\n        if uPar==vPar: return\n        if self.rank[uPar]==self.rank[vPar]:\n            self.rank[uPar]+=1\n        if self.rank[uPar]>self.rank[vPar]:\n            self.par[vPar] = uPar\n            for i in range(4):\n                self.sides[uPar][i]|=self.sides[vPar][i]\n        else:\n            self.par[uPar] = vPar\n            for i in range(4):\n                self.sides[vPar][i]|=self.sides[uPar][i]\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        def lineFromPoints(P, Q):\n \n            a = Q[1] - P[1]\n            b = P[0] - Q[0]\n            c = a*(P[0]) + b*(P[1])\n            return a,b,c\n        def intersects(x,y,radius,p):\n            a,b,c = p\n            # Finding the distance of line \n            # from center.\n            dist = ((abs(a * x + b * y + c)) /\n                    math.sqrt(a * a + b * b))\n\n            # Checking if the distance is less \n            # than, greater than or equal to radius.\n            return radius>=dist\n        uf = UnionFind(len(circles))\n        for i in range(len(circles)):\n            if intersects(circles[i][0],circles[i][1],circles[i][2],lineFromPoints([0,Y],[X,Y])) or (circles[i][0]<=X and circles[i][1]+circles[i][2]>=Y):\n                #print(circles[i],0)\n                uf.sides[i][0] = True\n            if intersects(circles[i][0],circles[i][1],circles[i][2],lineFromPoints([0,0],[X,0])) or (circles[i][0]<=X and circles[i][1]-circles[i][2]<=0):\n                #print(circles[i],1)\n                uf.sides[i][1] = True\n            if intersects(circles[i][0],circles[i][1],circles[i][2],lineFromPoints([X,0],[X,Y])) or (circles[i][1]<=Y and circles[i][0]+circles[i][2]>=X):\n                #print(circles[i],2)\n                uf.sides[i][2] = True\n            if intersects(circles[i][0],circles[i][1],circles[i][2],lineFromPoints([0,0],[0,Y])) or (circles[i][1]<=Y and circles[i][0]-circles[i][2]<=0):\n                #print(circles[i],3)\n                uf.sides[i][3] = True\n        for i in range(len(circles)):\n            for j in range(i+1,len(circles)):\n                if circles[i][2]+circles[j][2]>=math.sqrt((circles[i][0]-circles[j][0])**2+(circles[i][1]-circles[j][1])**2):\n                    uf.union(i,j)\n        for i in range(len(circles)):\n            if uf.par[i]==-1:\n                if (uf.sides[i][0] and uf.sides[i][2]) or (uf.sides[i][1] and uf.sides[i][3]) or (uf.sides[i][0] and uf.sides[i][1]) or (uf.sides[i][2] and uf.sides[i][3]):\n                    return False\n        return True",
    "submit_ts": "1722138823",
    "subm_id": "1335800622"
}