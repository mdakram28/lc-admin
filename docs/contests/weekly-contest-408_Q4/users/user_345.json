{
    "username": "xorrrro",
    "submission": "class Solution {\npublic:\n\n    int bfs(vector<vector<int>> &adj, int tar1, int tar2, int x, int cnt) {\n    vector<int> vis(cnt + 4);\n    queue<int> q;\n   \n    q.push(x);\n    vis[x] = 1;\n   \n    while (q.empty() == 0) {\n        int y = q.front();\n        q.pop();\n        for (int child : adj[y]) {\n            if (vis[child]== 0) {\n                q.push(child);\n                vis[child] = 1;\n            }\n        }\n    }\n    \n    return (vis[tar1] or vis[tar2]);\n}\n   \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        \n         vector<pair<pair<int, int>, int>> circles(circles2.size() + 6);\n         vector<vector<int>> adj(circles2.size() + 6);\n        \n        int num_circles=circles2.size();\n       \n        for (int i = 0; i < num_circles; ++i) {\n            circles[i].first.first=circles2[i][0];\n            circles[i].first.second=circles2[i][1];\n            circles[i].second=circles2[i][2];\n          \n        }\n       \n       \n       \n         for (int i = 0; i < num_circles; ++i) {\n            \n            if (circles[i].first.first <= circles[i].second) {\n                adj[num_circles].push_back(i);\n                adj[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                adj[num_circles + 2].push_back(i);\n                adj[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adj[num_circles + 1].push_back(i);\n                adj[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                adj[num_circles + 3].push_back(i);\n                adj[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n       \n       \n        long long t = 0;\n        t = max(t,1LL* bfs(adj,  num_circles + 1, num_circles + 2,num_circles, num_circles + 4)); // Check for bottom-left corner\n        t = max(t,1LL *bfs(adj,  num_circles + 2, num_circles + 1,num_circles + 3, num_circles + 4)); // Check for top-right corner\n     \n        if (t){\n            return 0;\n        }\n        return 1;\n      \n       \n    }\n};",
    "submit_ts": "1722137373",
    "subm_id": "1335761918"
}