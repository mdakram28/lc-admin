{
    "username": "harshil048",
    "submission": "class Solution {\npublic:\n    const int mod = 1e9+7;\n    const int max_in = 400;\n    void get(vector<vector<long long>>& dp,map<int,int>& mp,int n){\n   for(int i=1; i<=n; i++){\n          for(int j =0; j<=max_in; j++){\n  for(int k=0; k<i; k++){\n\n  int prev = j-k;\n      \n      if(prev >= 0){\n        dp[i][j] = (dp[i][j] + dp[i-1][prev])%mod;\n      }\n}\n\n}\n            if(mp.find(i) != mp.end()){\n        for(int j=0; j<=max_in; j++){\n            if(j != mp[i]){\n        dp[i][j] = 0;\n}\n        }\n}\n} \n}\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        map<int,int> mp;\n        for(auto i : requirements){\n   mp[i[0]+1] = i[1];\n}\n        vector<vector<long long>> dp(n+1,vector<long long>(max_in+1,0));\n        \n        dp[0][0] = 1;\n        \n        get(dp,mp,n);\n        long long ans = 0; \n        for(auto i: dp[n]){\n       ans = (ans + i) % mod;\n}\n        return ans;\n    }\n};",
    "submit_ts": 1719071753.0
}