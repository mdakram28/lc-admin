{
    "username": "NULLgorithm",
    "submission": "#define ll long long\n\nconst int mod=1e9+7;\n\nstruct node{\n    //what to store??\n    int s, sl, sr, slr;\n};\n\nstruct segtree{\n    int size;\n    vector<node> values;\n\n    //When nothing\n    node NEUTRAL_ELEMENT={0,0,0,0};\n\n    node merge(node a, node b){\n        //merge function\n        node c;\n        c.sl=max(a.sl%mod+b.sl%mod, a.slr%mod+b.s%mod)%mod;\n        c.sr=max(b.sr%mod+a.sr%mod, b.slr%mod+a.s%mod)%mod;\n        c.slr=max(a.slr%mod+b.sr%mod, a.sl%mod+b.slr%mod)%mod;\n        c.s=max(a.sr%mod+b.s%mod, a.s%mod+b.sl%mod)%mod;\n        return c;\n    }\n\n    node single(int v){\n        //leaf node\n        if(v>=0) return {v,0,0,0};\n        else return {0,0,0,0};\n    }\n\n    void init(int n){\n        size=1;\n        while(size<n) size*=2;\n        values.resize(2*size);\n    }\n\n    void build(vector<int>& a, int x, int lx, int rx){\n        if(rx-lx==1){\n            if(lx<(int)a.size()){\n                values[x]=single(a[lx]);\n            }\n            return;\n        }\n        int mid=(lx+rx)/2;\n        build(a, 2*x+1, lx, mid);\n        build(a, 2*x+2, mid, rx);\n        values[x]=merge(values[2*x+1], values[2*x+2]);\n    }\n\n    void build(vector<int>& a){\n        build(a, 0, 0, size);\n    }\n\n    void set(int i, int v, int x, int lx, int rx){\n        if(rx-lx==1){\n            values[x]=single(v);\n            return;\n        }\n        int mid=(lx+rx)/2;\n        if(i<mid){\n            set(i, v, 2*x+1, lx, mid);\n        }\n        else{\n            set(i, v, 2*x+2, mid, rx);\n        }\n        values[x]=merge(values[2*x+1], values[2*x+2]);\n    }\n\n    void set(int i, int v){\n        set(i, v, 0, 0, size);\n    }\n\n    node calc(int l, int r, int x, int lx, int rx){\n        if(lx>=r|| l>=rx) return NEUTRAL_ELEMENT;\n        if(lx>=l && rx<=r) return values[x];\n        int mid=(lx+rx)/2;\n        node left_calc=calc(l, r, 2*x+1, lx, mid);\n        node right_calc=calc(l, r, 2*x+2, mid, rx);\n        return merge(left_calc, right_calc);\n    }\n\n    node calc(int l, int r){\n        return calc(l, r, 0, 0, size);\n    }\n\n};\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n=nums.size();\n        segtree st;\n        st.init(n);\n        st.build(nums);\n        int ans=0;\n        for(int i=0;i<queries.size();i++){\n            st.set(queries[i][0], queries[i][1]);\n            int x=st.calc(0,n).s;\n            ans=(ans%mod+x%mod)%mod;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716694462",
    "subm_id": "1268116339"
}