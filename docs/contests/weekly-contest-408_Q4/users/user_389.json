{
    "username": "yashraj_prasad",
    "submission": "class Solution:\n    def bfs(self, g, l, a1, a2, nodes):\n        q = deque([l])\n        v = [0] * (nodes + 4)\n        v[l] = 1\n        \n        while q:\n            u = q.popleft()\n            for neighbor in g[u]:\n                if not v[neighbor]:\n                    q.append(neighbor)\n                    v[neighbor] = 1\n                    \n        return v[a1] or v[a2]\n    \n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        circles = [((x, y), r) for x, y, r in circles]\n        n = len(circles)\n        g = [[] for _ in range(n + 4)]\n        \n        for i in range(n):\n            x, y = circles[i][0]\n            r = circles[i][1]\n            \n            if x <= r:\n                g[n].append(i)\n                g[i].append(n)\n\n            if X - x <= r:\n                g[n + 2].append(i)\n                g[i].append(n + 2)\n\n            if y <= r:\n                g[n + 1].append(i)\n                g[i].append(n + 1)\n\n            if Y - y <= r:\n                g[n + 3].append(i)\n                g[i].append(n + 3)\n            \n            for j in range(i + 1, n):\n                xj, yj = circles[j][0]\n                rj = circles[j][1]\n                d = sqrt((x - xj) ** 2 + (y - yj) ** 2)\n                rs = r + rj\n                if rs >= d:\n                    g[i].append(j)\n                    g[j].append(i)\n        \n        b = max(self.bfs(g, n, n + 1, n + 2, n + 4), self.bfs(g, n + 3, n + 2, n + 1, n + 4))\n        \n        return not b",
    "submit_ts": "1722137259",
    "subm_id": "1335758659"
}