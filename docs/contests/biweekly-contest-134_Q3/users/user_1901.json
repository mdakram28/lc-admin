{
    "username": "gurukoushik08",
    "submission": "\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size();\n        int count = 0;\n        vector<int> groupLengths(n);\n        map<int,int>mp;\n        groupLengths[0] = 1;\n        for (int i = 1; i < n; ++i) {\n            if (colors[i] == colors[i - 1]) {\n                groupLengths[i] = 1;\n                mp[colors[i]]++;\n            } else {\n                groupLengths[i] = groupLengths[i - 1] + 1;\n            }\n        }\n        \n        vector<int> groupEnd(n);\n        groupEnd[n - 1] = n - 1;\n        for (int i = n - 2; i >= 0; --i) {\n            if (groupLengths[i] + 1 == groupLengths[i + 1]) {\n                groupEnd[i] = groupEnd[i + 1];\n            } else {\n                groupEnd[i] = i;\n                 mp[colors[i]]++;\n            }\n        }\n        int index = 0;\n        while (index < n) {\n            while (index < n && groupEnd[index] == n - 1 &&  colors[0] != colors[n - 1] && groupEnd[index] - index + 1 < k && groupEnd[index] - index + 1 + groupEnd[0] + 1 >= k) {\n                count++;\n                index++;\n            }\n            if (index < n && groupEnd[index] - index + 1 >= k) {\n                count++;\n            }\n            index++;\n        }\n        int k1=mp[index];\n        if(k1<=k)mp[k1]--;\n        return count;\n    }\n};\n",
    "submit_ts": "1720280553",
    "subm_id": "1311793700"
}