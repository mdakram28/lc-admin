{
    "username": "ddd-a",
    "submission": "class Solution {\npublic:\n    static const int maxn = 1e5+10;\n    int fenwick[maxn];\n    int N;\n    int low_bit(int x){\n        return x & -x;\n    }\n    int query(int x){\n        int sum = 0;\n        while(x){\n            sum += fenwick[x];\n            x -= low_bit(x);\n        }\n        return sum;\n    }\n    void update(int x,int delta){\n        while(x<=N){\n            fenwick[x] += delta;\n            x += low_bit(x);\n        }\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        N = nums.size();\n        for(int i = 0;i<nums.size();++i){\n            if(i && i + 1<nums.size() && nums[i] >nums[i-1] && nums[i] > nums[i + 1]){\n                update(i + 1,1);\n            }\n        }\n        vector<int>res;\n        auto check = [&](int pos){\n            return pos>0 && pos + 1 < nums.size();\n        };\n        auto solve = [&](int a,int b,int c){\n            return b > a && b>c;\n        };\n        for(auto q:queries){\n            int opt = q[0];\n            int l = q[1] ;\n            int r = q[2] ;\n            if(opt == 1){\n                res.push_back(max(0,query(r) - query(l + 1)));\n            }else{\n                if(check(l)){\n                    bool f = solve(nums[l-1],nums[l],nums[l+1]);\n                    bool g = solve(nums[l-1],r,nums[l+1]);\n                    if(f != g){\n                        if(g)update(l+1,1);\n                        else update(l+1,-1);\n                    }\n                }\n                if(check(l-1)){\n                    bool f = solve(nums[l-2],nums[l-1],nums[l]);\n                    bool g = solve(nums[l-2],nums[l-1],r);\n                    if(f != g){\n                        cout<<\"??\"<<f<<\":\"<<g<<endl;\n                        cout<<nums[l-1] << \" \"<<nums[l]<<\" \"<<r<<endl;\n                        if(g)update(l,1);\n                        else update(l,-1);\n                    }\n                }\n                if(check(l+1)){\n                    bool f = solve(nums[l],nums[l+1],nums[l+2]);\n                    bool g = solve(r,nums[l+1],nums[l+2]);\n                    if(f != g){\n                        if(g)update(l+2,1);\n                        else update(l+2,-1);\n                    }\n                }\n                nums[l] = r;      \n            }\n            cout<<query(N)<<endl;\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718507150.0
}