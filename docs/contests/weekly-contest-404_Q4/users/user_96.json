{
    "username": "penguinzzz",
    "submission": "#include <vector>\n#include <algorithm>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> l1(n + 1);\n        vector<vector<int>> l2(m + 1);\n\n        for (auto& c : edges1) {\n            l1[c[0]].push_back(c[1]);\n            l1[c[1]].push_back(c[0]);\n        }\n        \n        for (auto& c : edges2) {\n            l2[c[0]].push_back(c[1]);\n            l2[c[1]].push_back(c[0]);\n        }\n\n        vector<int> depth1(n + 1, 0);\n        vector<int> depth2(m + 1, 0);\n        \n        auto dfs1 = [&](auto&& dfs1, int i, int p, int h, int t) -> void {\n            depth1[i]=h;\n            for (auto& child : l1[i]) {\n                if (child == p) continue;\n                dfs1(dfs1, child, i, h + 1, t);\n            }\n        };\n        auto dfs2 = [&](auto&& dfs2, int i, int p, int h, int t) -> void {\n            depth2[i]=h;\n            for (auto& child : l2[i]) {\n                if (child == p) continue;\n                dfs2(dfs2, child, i, h + 1, t);\n            }\n        };\n        dfs1(dfs1, 0, -1, 0, 1); \n        int x = max_element(depth1.begin(), depth1.end()) - depth1.begin();\n        dfs1(dfs1, x, -1, 0, 1);\n        int d1 = *max_element(depth1.begin(), depth1.end());\n        \n        dfs2(dfs2, 0, -1, 0, 2);\n        int y = max_element(depth2.begin(), depth2.end()) - depth2.begin();\n        dfs2(dfs2, y, -1, 0, 2);\n        int d2 = *max_element(depth2.begin(), depth2.end());\n\n        int x1 = (d1 + 1) / 2;\n        int y1 = (d2 + 1) / 2;\n\n        return max({d1, d2, x1 + y1 + 1});\n    }\n};\n",
    "submit_ts": "1719716180",
    "subm_id": "1304357228"
}