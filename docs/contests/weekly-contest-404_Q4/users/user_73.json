{
    "username": "tarptaeya",
    "submission": "from collections import deque\n\n\nclass Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        u, _ = find_diameter(edges1)\n        v, _ = find_diameter(edges2)\n        n = len(edges1) + 1 + len(edges2) + 1\n        offset = len(edges1) + 1\n\n        edges = [i for i in edges1]\n        edges.append([u, v + offset])\n        for u, v in edges2:\n            edges.append([u + offset, v + offset])\n        _, ans = find_diameter(edges)\n        return ans\n    \n    \ndef find_diameter(edges):\n    n = len(edges) + 1\n    if n == 1:\n        return 0, 0\n    t = [[] for _ in range(n)]\n    d = [0 for _ in range(n)]\n    for u, v in edges:\n        t[u].append(v)\n        t[v].append(u)\n        d[u] += 1\n        d[v] += 1\n    remaining = n\n    q = deque([])\n    for i in range(n):\n        if d[i] == 1:\n            q.append(i)\n            remaining -= 1\n    diameter = 0\n    while remaining > 0:\n        diameter += 1\n        for _ in range(len(q)):\n            x = q.popleft()\n            for y in t[x]:\n                d[y] -= 1\n                if d[y] == 1:\n                    remaining -= 1\n                    q.append(y)\n    if len(q) == 2:\n        diameter = diameter * 2 + 1\n    else:\n        diameter = diameter * 2\n    return q[0], diameter \n    ",
    "submit_ts": "1719716757",
    "subm_id": "1304373215"
}