{
    "username": "Harshal_0901",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a list of all cuts with their costs and type (0 for horizontal, 1 for vertical)\n        vector<pair<int, int>> cuts;\n        for (int i = 0; i < m - 1; ++i) {\n            cuts.push_back({horizontalCut[i], 0});\n        }\n        for (int i = 0; i < n - 1; ++i) {\n            cuts.push_back({verticalCut[i], 1});\n        }\n\n        // Sort the cuts by cost in descending order\n        sort(cuts.begin(), cuts.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n            return a.first > b.first;\n        });\n\n        // Variables to track the number of horizontal and vertical pieces\n        int horizontalPieces = 1;\n        int verticalPieces = 1;\n        long long totalCost = 0;\n\n        // Perform the cuts in a greedy manner\n        for (const auto& cut : cuts) {\n            if (cut.second == 0) { // Horizontal cut\n                totalCost += static_cast<long long>(cut.first) * verticalPieces;\n                horizontalPieces++;\n            } else { // Vertical cut\n                totalCost += static_cast<long long>(cut.first) * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720924993",
    "subm_id": "1320238851"
}