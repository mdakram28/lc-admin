{
    "username": "fake_name",
    "submission": "class Solution {\npublic:\n\n    const int INF = 1e9; \n\n    struct TrieNode {\n\n        bool isEnd; \n        int cost;\n        int len; \n        TrieNode* childNodes[26]; \n\n        TrieNode() {\n            isEnd = false; \n            cost = 1e9; \n            len = 0; \n            for (int i = 0; i < 26; i++) {\n                childNodes[i] = NULL; \n            }\n        }\n    };\n\n    void insert(TrieNode* root, string &word, int val) {\n        TrieNode* curr = root; \n        for (auto c: word) {\n            if (curr -> childNodes[c - 'a'] == NULL) {\n                TrieNode* newNode = new TrieNode(); \n                curr -> childNodes[c - 'a'] = newNode; \n            }\n            curr = curr -> childNodes[c - 'a']; \n        }\n        curr -> isEnd = true; \n        curr -> cost = min(curr -> cost, val); \n        curr -> len = word.size(); \n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode(); \n        int n = words.size(); \n        for (int i = 0; i < n; i++) {\n            insert(root, words[i], costs[i]); \n        }\n        int m = target.size(); \n        vector<int> dp(m + 1, INF); \n        dp[0] = 0; \n        set<int> st; \n        st.insert(0); \n        while (!st.empty()) {\n            int x = *st.begin(); \n            st.erase(st.begin()); \n            TrieNode* curr = root; \n            for (int i = x; i < m; i++) {\n                if (curr -> childNodes[target[i] - 'a'] == NULL) {\n                    break; \n                }\n                curr = curr -> childNodes[target[i] - 'a']; \n                if (curr -> isEnd) {\n                    st.insert(i + 1); \n                    if (i + 1 - curr -> len >= 0) {\n                        dp[i + 1] = min(dp[i + 1], dp[i + 1 - curr -> len] + curr -> cost); \n                    }\n                }\n            }\n        }\n        if (dp[m] == INF) {\n            return -1; \n        }\n        return dp[m]; \n    }\n};",
    "submit_ts": "1720323886",
    "subm_id": "1312386421"
}