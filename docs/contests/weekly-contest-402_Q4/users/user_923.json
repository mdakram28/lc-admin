{
    "username": "sukunamodeon",
    "submission": "class Solution {\npublic:\n    struct SegmentTree {\n        int size;\n        vector<int> segment, lazy;\n\n        void init(int _size) {\n            this->size = _size;\n            segment.resize(4 * size, 0);\n            lazy.resize(4 * size, -1);\n        }\n\n        void build(int start, int end, int node, vector<int> &data) {\n            if (start == end) {\n                segment[node] = data[start];\n                return;\n            }\n\n            int mid = (start + end) / 2;\n\n            build(start, mid, 2 * node + 1, data);\n            build(mid + 1, end, 2 * node + 2, data);\n\n            segment[node] = segment[2 * node + 1] + segment[2 * node + 2];\n        }\n\n        int query(int start, int end, int left, int right, int node) {\n            if (start > right || end < left) {\n                return 0;\n            }\n\n            if (lazy[node] != -1) {\n                segment[node] += lazy[node] * (end - start + 1);\n                if (start != end) {\n                    lazy[2 * node + 1] = lazy[node];\n                    lazy[2 * node + 2] = lazy[node];\n                }\n                lazy[node] = -1;\n            }\n\n            if (start >= left && end <= right) {\n                return segment[node];\n            }\n\n            int mid = (start + end) / 2;\n\n            int q1 = query(start, mid, left, right, 2 * node + 1);\n            int q2 = query(mid + 1, end, left, right, 2 * node + 2);\n\n            return q1 + q2;\n        }\n\n        void update(int start, int end, int node, int left, int right, int value) {\n            if (start > right || end < left) {\n                return;\n            }\n\n            if (lazy[node] != -1) {\n                segment[node] = lazy[node] * (end - start + 1);\n                if (start != end) {\n                    lazy[2 * node + 1] = lazy[node];\n                    lazy[2 * node + 2] = lazy[node];\n                }\n                lazy[node] = -1;\n            }\n\n            if (start >= left && end <= right) {\n                segment[node] = value * (end - start + 1);\n                if (start != end) {\n                    lazy[2 * node + 1] = value;\n                    lazy[2 * node + 2] = value;\n                }\n                return;\n            }\n\n            int mid = (start + end) / 2;\n\n            update(start, mid, 2 * node + 1, left, right, value);\n            update(mid + 1, end, 2 * node + 2, left, right, value);\n\n            segment[node] = segment[2 * node + 1] + segment[2 * node + 2];\n\n            return;\n        }\n\n        void build(vector<int> &data) {\n            build(0, size - 1, 0, data);\n        }\n\n        int query(int left, int right) {\n            return query(0, size - 1, left, right, 0);\n        }\n\n        void update(int left, int right, int value) {\n            update(0, size - 1, 0, left, right, value);\n        }\n        \n    };\n\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree tree;\n        int n = nums.size();\n        tree.init(n);\n        vector<int> peaks(n, 0);\n        \n        for (int i = 1; i < n - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                peaks[i] = 1;\n            }\n        }\n        \n        tree.build(peaks);\n        vector<int> result;\n        \n        for (auto &query : queries) {\n            if (query[0] == 1) {\n                result.push_back(tree.query(query[1] + 1, query[2] - 1));\n            } else {\n                int idx = query[1];\n                nums[idx] = query[2];\n                \n                for (int j = idx - 1; j <= idx + 1; j++) {\n                    if (j - 1 >= 0 && j + 1 < n) {\n                        if (nums[j - 1] < nums[j] && nums[j + 1] < nums[j]) {\n                            tree.update(j, j, 1);\n                        } else {\n                            tree.update(j, j, 0);\n                        }\n                    }\n                }\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1718506269.0
}