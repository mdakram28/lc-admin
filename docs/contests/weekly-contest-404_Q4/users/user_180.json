{
    "username": "meng-hsuan",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def find_radius_diameter(edges: List[List[int]]) -> List[int]:\n            n = len(edges) + 1\n            if n == 1:\n                return [0, 0]\n            \n            el = [[] for _ in range(n)]\n            for u, v in edges:\n                el[u].append(v)\n                el[v].append(u)\n            deg = [len(i) for i in el]\n            dist = [None] * n\n            \n            lvl = 0\n            todo = [i for i in range(n) if deg[i] == 1]\n            while len(todo):\n                #print(lvl, todo, deg, dist)\n                for i in todo:\n                    dist[i] = lvl\n                \n                new_todo = []\n                for i in todo:\n                    for j in el[i]:\n                        if dist[j] == None:\n                            deg[j] -= 1\n                            if deg[j] == 1:\n                                new_todo.append(j)\n                \n                todo = new_todo\n                lvl += 1\n            \n            r = lvl - 1\n            d = r << 1\n            if sum(i == r for i in dist) == 2:\n                r += 1\n                d += 1\n            #print(dist)\n            \n            return [r, d]\n        #print(len(edges1), len(edges2))\n        \n        r1, d1 = find_radius_diameter(edges1)\n        r2, d2 = find_radius_diameter(edges2)\n        #print(r1, d1, r2, d2)\n        \n        return max(d1, d2, r1 + r2 + 1)\n    ",
    "submit_ts": 1719717663.0
}