{
    "username": "tomarint",
    "submission": "use std::collections::VecDeque;\n\nimpl Solution {\n    pub fn minimum_diameter_after_merge(edges1: Vec<Vec<i32>>, edges2: Vec<Vec<i32>>) -> i32 {\n        let n = edges1.len() + 1;\n        let m = edges2.len() + 1;\n        let mut to1 = vec![vec![]; n];\n        let mut to2 = vec![vec![]; m];\n        for i in 0..n-1 {\n            let u = edges1[i][0] as usize;\n            let v = edges1[i][1] as usize;\n            to1[u].push(v);\n            to1[v].push(u);\n        }\n        for i in 0..m-1 {\n            let u = edges2[i][0] as usize;\n            let v = edges2[i][1] as usize;\n            to2[u].push(v);\n            to2[v].push(u);\n        }\n        fn calc_diameter(n: usize, to: &Vec<Vec<usize>>) -> i32 {\n            // \u76f4\u5f84\u3092\u6c42\u3081\u308b\n            let mut pos = 0;\n            let mut diameter = 0;\n            let mut list = VecDeque::new();\n            let mut visited = vec![false; n];\n            list.push_back((0, 0));\n            visited[0] = true;\n            while let Some((u, d)) = list.pop_front() {\n                diameter = d;\n                pos = u;\n                for &v in &to[u] {\n                    if !visited[v] {\n                        visited[v] = true;\n                        list.push_back((v, d+1));\n                    }\n                }\n            }\n            let mut diameter = 0;\n            let mut visited = vec![false; n];\n            list.push_back((pos, 0));\n            visited[pos] = true;\n            while let Some((u, d)) = list.pop_front() {\n                diameter = d;\n                pos = u;\n                for &v in &to[u] {\n                    if !visited[v] {\n                        visited[v] = true;\n                        list.push_back((v, d+1));\n                    }\n                }\n            }\n            diameter\n        }\n        let diameter1 = calc_diameter(n, &to1);\n        let diameter2 = calc_diameter(m, &to2);\n        // println!(\"diameter1 = {}, diameter2 = {}\", diameter1, diameter2);\n        let mut ans = (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1;\n        ans = ans.max(diameter1);\n        ans = ans.max(diameter2);\n        ans as i32\n    }\n}",
    "submit_ts": 1719719649.0
}