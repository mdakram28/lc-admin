{
    "username": "shivrajbhosale1412",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& arr, int k) {\n        vector<pair<int, set<int>>> dp(k + 1, {0, set<int>()});\n        vector<unordered_map<int, int>> countMaps(k + 1);\n\n        for (const int& i : arr) {\n            int prev = 0;\n            for (int j = 0; j <= k; ++j) {\n                int cur = max({prev + 1, (dp[j].first + 1) * (dp[j].second.count(i) > 0), countMaps[j][i] + 1});\n\n                prev = dp[j].first;\n                countMaps[j][i] = cur;\n\n                if (dp[j].first < cur) {\n                    dp[j] = {cur, set<int>()};\n                }\n\n                if (cur == dp[j].first) {\n                    dp[j].second.insert(i);\n                }\n            }\n        }\n\n        return dp[k].first;\n\n    }\n};",
    "submit_ts": 1717861842.0
}