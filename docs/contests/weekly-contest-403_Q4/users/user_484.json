{
    "username": "hkhzzz",
    "submission": "class Solution {\npublic:\n    int row_split(vector<vector<int>>& grid, int up, int down, int left, int right, int splits) {\n        if (splits == 0 || left > right || up > down) return 0;\n        if (left == right && up == down) return 1;\n        // cout << \"+up\" << endl;\n        while(up <= down && accumulate(grid[up].begin() + left, grid[up].begin() + right + 1, 0) == 0) up ++;\n        // cout << \"-down\" << endl;\n        while(up <= down && accumulate(grid[down].begin() + left, grid[down].begin() + right + 1, 0) == 0) down --;\n        // shrink first\n        // cout << \"+left\" << endl;\n        for (int j = left; j <= right; j ++) {\n            int sum = 0;\n            for (int i = up; i <= down; i ++) {\n                sum += grid[i][j];\n            }\n            if (sum == 0) left = j + 1;\n            else break;\n        }\n        // cout << \"-right\" << endl;\n        for (int j = right; j >= left; j --) {\n            int sum = 0;\n            for (int i = up; i <= down; i ++) {\n                sum += grid[i][j];\n            }\n            if (sum == 0) right = j - 1;\n            else break;\n        }\n        // cout << \"row_split: done:\" << up << \",\" << down << \",\" << left << \",\" << right << endl;\n        if (left > right || up > down) return 0;\n        \n        \n        if (splits == 1) { // only one square\n            // cout << \"only 1: \" << (right - left + 1) * (down - up + 1) << endl;\n            return (right - left + 1) * (down - up + 1);\n        }\n        if (left == right && up == down) return 1; // only one \n        \n\n        \n        int ret = INT_MAX;            \n        int _left = right;\n        int _right = left;\n        // cout << \"split row\" << endl;\n        for (int i = up; i < down; i ++) { // cannot include all\n            for (int j = left; j <= right; j ++) {\n                if (grid[i][j] == 1) {\n                    _left = min(_left, j);\n                    _right = max(_right, j);\n                } \n            }\n            // cout << \"split_row: (\" << i << \"-\" << up << \"+1) * (\" << _right << \"-\" << _left << \"+1) + ?\" << endl; \n            int v = (i - up + 1) * (_right - _left + 1) + split(grid, i+1, down, left, right, splits - 1);\n            ret = min(ret, v);\n        }\n        // cout << \"row_split return \" << ret << endl;\n        return ret;\n    }\n    int col_split(vector<vector<int>>& grid, int up, int down, int left, int right, int splits) {\n        \n        // cout << up << \", \" << down << \", \" << left << \", \" << right << \"; \" << splits << endl;\n        if (splits == 0 || left > right || up > down) return 0;\n        if (left == right && up == down) return 1;\n        // cout << \"+up\" << endl;\n        while(up <= down && accumulate(grid[up].begin() + left, grid[up].begin() + right + 1, 0) == 0) up ++;\n        // cout << \"-down\" << endl;\n        while(up <= down && accumulate(grid[down].begin() + left, grid[down].begin() + right + 1, 0) == 0) down --;\n        // shrink first\n        // cout << \"+left\" << endl;\n        for (int j = left; j <= right; j ++) {\n            int sum = 0;\n            for (int i = up; i <= down; i ++) {\n                sum += grid[i][j];\n            }\n            if (sum == 0) left = j + 1;\n            else break;\n        }\n        // cout << \"-right\" << endl;\n        for (int j = right; j >= left; j --) {\n            int sum = 0;\n            for (int i = up; i <= down; i ++) {\n                sum += grid[i][j];\n            }\n            if (sum == 0) right = j - 1;\n            else break;\n        }\n        // cout << \"col_split: done:\" << up << \",\" << down << \",\" << left << \",\" << right << endl;\n        if (left > right || up > down) return 0;\n        \n        if (splits == 1) { // only one square\n            return (right - left + 1) * (down - up + 1);\n        }\n        if (left == right && up == down) return 1; // only one \n        \n        // split row\n        int ret = INT_MAX;\n        int _up = down;\n        int _down = up;\n        // cout << \"split col\" << endl;\n        for (int j = left; j < right; j ++) {\n            for (int i = up; i <= down; i ++) {\n                if (grid[i][j] == 1) {\n                    _up = min(_up, i);\n                    _down = max(_down, i);\n                }\n            }\n            // cout << \"split_col: (\" << _down << \"-\" << _up << \"+1) * (\" << j << \"-\" << left << \"+1) + ?\" << endl; \n            int v = (_down - _up + 1) * (j - left + 1) + split(grid, up, down, j + 1, right, splits - 1);\n            ret = min(ret, v);\n        }\n        // cout << \"col_split return \" << ret << endl;\n        // if (ret == INT_MAX) return 0; \n        return ret;\n    }\n        \n    int split(vector<vector<int>>& grid, int up, int down, int left, int right, int splits) {\n        if (splits == 0 || left > right || up > down) return 0;\n        while(up <= down && accumulate(grid[up].begin() + left, grid[up].begin() + right + 1, 0) == 0) up ++;\n        while(up <= down && accumulate(grid[down].begin() + left, grid[down].begin() + right + 1, 0) == 0) down --;\n\n        for (int j = left; j <= right; j ++) {\n            int sum = 0;\n            for (int i = up; i <= down; i ++) {\n                sum += grid[i][j];\n            }\n            if (sum == 0) left = j + 1;\n            else break;\n        }\n        // cout << \"-right\" << endl;\n        for (int j = right; j >= left; j --) {\n            int sum = 0;\n            for (int i = up; i <= down; i ++) {\n                sum += grid[i][j];\n            }\n            if (sum == 0) right = j - 1;\n            else break;\n        }\n        // cout << \"done:\" << up << \",\" << down << \",\" << left << \",\" << right << endl;\n        if (left > right || up > down) return 0;\n        \n        if (splits == 1) { // only one square\n            return (right - left + 1) * (down - up + 1);\n        }\n        if (left == right && up == down) return 1; // only one \n        \n        // split row\n        int ret = INT_MAX;\n            \n        int _left = right;\n        int _right = left;\n        \n        // cout << \"main: start row\" << endl;\n        \n        for (int i = up; i < down; i ++) { // cannot include all\n            for (int j = left; j <= right; j ++) {\n                if (grid[i][j] == 1) {\n                    _left = min(_left, j);\n                    _right = max(_right, j);\n                } \n            }\n            // cout << \"main: \" <<  (i - up + 1) * (_right - _left + 1)  << \"+ ? \" << endl;\n            int v = (i - up + 1) * (_right - _left + 1) + split(grid, i+1, down, left, right, splits - 1);\n            ret = min(ret, v);\n            if (splits == 3 && right > left) {\n                // first column\n                int v1 = col_split(grid, up, i, left, right, 2);\n                if (v1 != INT_MAX) { // possible\n                    v1 += split(grid, i+1, down, left, right, 1);\n                    ret = min(ret, v1);\n                }\n            }\n        }\n        \n        int _up = down;\n        int _down = up;\n        // cout << \"main: start col\" << endl;\n        \n        for (int j = left; j < right; j ++) {\n            for (int i = up; i <= down; i ++) {\n                if (grid[i][j] == 1) {\n                    _up = min(_up, i);\n                    _down = max(_down, i);\n                }\n            }\n            // cout << \"main: \" << (_down - _up + 1) * (j - left + 1) << \"+ ?\" << endl;\n            int v = (_down - _up + 1) * (j - left + 1) + split(grid, up, down, j + 1, right, splits - 1);\n            ret = min(ret, v);\n            if (splits == 3 && _up < _down) {\n                int v1 = row_split(grid, _up, _down, left, j, 2);\n                if (v1 != INT_MAX) {\n                    v1 += split(grid, up, down, j + 1, right, 1);\n                    ret = min(ret, v1);\n                }\n            }\n        }\n        \n        return ret;\n    }\n    \n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        return split(grid, 0, m - 1, 0, n - 1, 3);\n        \n    }\n};\n// [[1,0,0,1],[0,0,0,0],[1,0,0,0]] -> 3\n// [[0,0,0],[0,0,1],[0,0,1],[0,1,0]] -> 3",
    "submit_ts": "1719113944",
    "subm_id": "1297336457"
}