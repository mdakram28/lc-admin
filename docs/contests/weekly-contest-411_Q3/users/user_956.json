{
    "username": "AAR",
    "submission": "class Solution {\npublic:\n    \nbool isDivisibleBy7(const string& s) {\n    long long num = 0;\n    for (char c : s) {\n        num = (num * 10 + (c - '0')) % 7;\n    }\n    return num == 0;\n}\n\nstring decrementPalindrome(string palindrome) {\n    int halfLength = (palindrome.size() + 1) / 2;\n    string half = palindrome.substr(0, halfLength);\n\n    // Decrement the half part\n    int carry = 1;\n    for (int i = halfLength - 1; i >= 0; --i) {\n        if (half[i] >= '1') {\n            half[i] -= carry;\n            carry = 0;\n            break;\n        } else {\n            half[i] = '9';\n        }\n    }\n\n    if (carry) {\n        return \"\";  // No valid palindrome found\n    }\n\n    // Construct the new palindrome\n    if (palindrome.size() % 2 == 0) {\n        return half + string(half.rbegin(), half.rend());\n    } else {\n        return half + string(half.rbegin() + 1, half.rend());\n    }\n}\n\nstring findLargestPalindromeDivisibleBy7(int length) {\n    if (length <= 0) return \"\";\n\n    string palindrome(length, '9');\n\n    while (true) {\n        if (isDivisibleBy7(palindrome)) {\n            return palindrome;\n        }\n\n        string newPalindrome = decrementPalindrome(palindrome);\n        if (newPalindrome.empty()) {\n            break;\n        }\n        palindrome = newPalindrome;\n    }\n\n    return \"\";\n}\n    string largestPalindrome(int n, int k) {\n        string s(n, '9'); \n\n        if (k == 1) {\n            return s;\n        } \n        else if (k == 2) {\n            s[0] = '8';\n            s[n - 1] = '8';\n            return s;\n        } \n        else if (k == 3) {\n            return s;\n        } \n        else if (k == 4) {\n            if (n == 1) return \"8\";\n            s[0] = '8';\n            s[1] = '8';\n            s[n - 2] = '8';\n            s[n - 1] = '8';\n            return s;\n        } \n        else if (k == 5) {\n            s[0] = '5';\n            s[n - 1] = '5';\n            return s;\n        } \n        else if (k == 6) {\n            if(n == 1) return \"6\";\n            if(n == 2) return \"66\";\n            s[0] = '8';\n            s[n - 1] = '8';\n            int sum = 0;\n            for (int i = 0; i < n / 2; i++) {\n                sum += (s[i] - '0');\n            }\n            if (n % 2 == 0) {\n                for (int i = 9; i >= 1; i--) {\n                    if ((2 * sum + 2 * i) % 3 == 0) {\n                        s[n / 2] = (i + '0');\n                        s[n / 2 - 1] = (i + '0');\n                        break;\n                    }\n                }\n            } \n            else {\n                for (int i = 9; i >= 1; i--) {\n                    if ((2 * sum + i) % 3 == 0) {\n                        s[n / 2] = (i + '0');\n                        break;\n                    }\n                }\n            }\n            return s;\n        } \n        else if(k == 7){\n             int length = n;\n    string palindrome = findLargestPalindromeDivisibleBy7(length);\n            return palindrome;\n        }\n        else if (k == 8) {\n            if (n == 1) return \"8\";\n            if(n == 2) return \"88\";\n            s[0] = '8';\n            s[1] = '8';\n            s[2] = '8';\n            s[n - 3] = '8';\n            s[n - 2] = '8';\n            s[n - 1] = '8';\n            return s;\n        }\n\n        return s;\n    }\n};\n",
    "submit_ts": "1723953555",
    "subm_id": "1359824484"
}