{
    "username": "test_th",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def check(invalid):\n            mn_sm = mx_sm = mn_df = mx_df = None\n            for i, p in enumerate(points):\n                if i != invalid:\n                    sm, df = points[i][0] + points[i][1], points[i][0] - points[i][1]\n                    if mn_sm is None or sm < points[mn_sm][0] + points[mn_sm][1]:\n                        mn_sm = i\n                    if mx_sm is None or sm > points[mx_sm][0] + points[mx_sm][1]:\n                        mx_sm = i\n                    if mn_df is None or df < points[mn_df][0] - points[mn_df][1]:\n                        mn_df = i\n                    if mx_df is None or df > points[mx_df][0] - points[mx_df][1]:\n                        mx_df = i\n            mn_sm_val = points[mn_sm][0] + points[mn_sm][1]\n            mx_sm_val = points[mx_sm][0] + points[mx_sm][1]\n            mn_df_val = points[mn_df][0] - points[mn_df][1]\n            mx_df_val = points[mx_df][0] - points[mx_df][1]\n            if mx_sm_val + mn_df_val > mx_df_val + mn_sm_val:\n                return mn_sm, mx_sm, mx_sm_val - mn_sm_val\n            return mn_df, mx_df, mx_df_val - mn_df_val\n        p1, p2, _ = check(-1)\n        _, _, best1 = check(p1)\n        _, _, best2 = check(p2)\n        return min(best1, best2)"
}