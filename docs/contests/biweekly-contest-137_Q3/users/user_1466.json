{
    "username": "shifat_21",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        q = []\n        n = len(board)\n        m = len(board[0])\n        for i in range(n):\n            for j in range(m):\n                heappush(q, (-board[i][j], i, j))\n        \n        def get_max(arr):\n            q = []\n            for i in range(len(arr)):\n                heappush(q, (-arr[i],i))\n            \n            val1,idx1 = q[0]\n            heappop(q)\n            val2,idx2 = q[0]\n            val1 = -val1\n            val2 = -val2\n\n            return [[val1, idx1], [val2, idx2]]\n\n        row_max = []\n        for row in board:\n            row_max.append(get_max(row))\n        \n        col_max = []\n        for c in range(len(board[0])):\n            col = []\n            for i in range(len(board)):\n                col.append(board[i][c])\n            col_max.append(get_max(col))\n        \n\n        def get_ans(rval, rr, rc, cval, cr, cc):\n            if rr == cr or rc == cc:\n                return -float('inf')\n            mem = []\n            ans = 0\n            while len(q) > 0:\n                mem.append(q[0])\n                val, r, c = q[0]\n                heappop(q)\n                val = -val\n                if r != rr and r != cr and c != rc and c != cc:\n                    ans = val\n                    break\n            for e in mem:\n                heappush(q, e)\n            return ans\n    \n        ans = -float('inf')\n        for  r in range(len(row_max)):\n            for c in range(len(col_max)):\n                for rval, ridx in row_max[r]:\n                    for cval, cidx in col_max[c]:\n                        if r != cidx and c != ridx:\n                            ans = max(ans, rval+cval+get_ans(rval, r, ridx, cval, cidx, c))\n\n\n        return ans",
    "submit_ts": "1723910345",
    "subm_id": "1359226753"
}