{
    "username": "shootingstar33",
    "submission": "class Solution {\npublic:\n    vector<int> arr;\n    int brr[5005];\n    int crr[5005];\n    int tree[20020];\n\n    void build(int idx, int l, int r){\n        if(l == r){\n            tree[idx] = crr[l];\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        build(2*idx, l, mid);\n        build(2*idx+1, mid+1, r);\n        tree[idx] = max(tree[2*idx], tree[2*idx+1]);\n    }\n\n    void update(int idx, int l, int r, int pos, int val){\n        if(l > pos || r < pos) return;\n        if(l == r){\n            tree[idx] = max(tree[idx], val);\n            return;\n        }\n\n        int mid = (l + r) / 2;\n        update(2*idx, l, mid, pos, val);\n        update(2*idx+1, mid+1, r, pos, val);\n        tree[idx] = max(tree[2*idx], tree[2*idx+1]);\n    }\n\n    int query(int idx, int l, int r, int lq, int rq){\n        if(l > rq || r < lq) return 0;\n        if(l >= lq && r <= rq) return tree[idx];\n\n        int mid = (l + r) / 2;\n        return max(query(2*idx, l, mid, lq, rq), query(2*idx+1, mid+1, r, lq, rq));\n    }\n    int maximumLength(vector<int>& nums, int k) {\n        map<int,int> mp;\n        int n = nums.size();\n        for(int x : nums){\n            mp[x];\n        }\n        int val = 0;\n        for(auto &it : mp){\n            it.second = val;\n            val++;\n        }  \n\n        for(int x : nums){\n            arr.push_back(mp[x]);\n        }\n\n        vector<vector<int>> dp(k+2, vector<int>(n+1, 0));\n        for(int i=0; i<n; i++){\n            crr[i] = 0;\n        }    \n\n        for(int i=0; i<n; i++){\n            int val = brr[arr[i]]+1;\n            dp[0][i] = val;\n            brr[arr[i]] = val;\n            crr[i] = dp[0][i];\n        }\n\n        for(int i=1; i<=k; i++){\n            for(int j=0; j<=val; j++){\n                brr[j] = 0;\n            }\n\n            build(1, 0, n-1);\n\n            for(int j=0; j<n; j++){\n                int val = query(1, 0, n-1, 0, j-1) + 1;\n                int val2 = brr[arr[j]] + 1;\n\n                dp[i][j] = max(val, val2);\n                brr[arr[j]] = max(val, val2);\n                crr[j] = dp[i][j];\n            }\n\n            // for(int j=0; j<n; j++){\n            //     int val1 = brr[arr[j]] + 1;\n            //     int val2 = query(1, 0, n-1, 0, j-1) + 1;\n\n            //     update(1, 0, n-1, j, val1);\n                \n            //     dp[i][j] = max(dp[i][j], val1);\n            //     dp[i+1][j] = max(dp[i+1][j], val2);\n            //     crr[j] = val2;\n            //     brr[arr[j]] = val1;\n            // }\n        }\n\n        // for(int i=0; i<=k; i++){\n        //     for(int j=0; j<n; j++){\n        //         cout << dp[i][j] << ' ';\n        //     }\n        //     cout << '\\n';\n        // }\n\n        int ans = 0;\n        for(int i=0; i<n; i++){\n            ans = max(ans, dp[k][i]);\n        }\n\n        // cout << ans << '\\n';\n\n        return ans;\n    }\n};",
    "submit_ts": 1717861940.0
}