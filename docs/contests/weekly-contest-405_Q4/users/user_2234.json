{
    "username": "AndriyLu",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = collections.defaultdict(TrieNode)\n        self.is_end = False\n        self.cost = 0\n        \nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    def insert(self, word: str, cost) -> None:\n        current = self.root\n        for letter in word:\n            current = current.children[letter]\n\n        if current.is_end == True:\n            current.cost = min(current.cost, cost)\n        else:\n            current.is_end = True\n            current.cost = cost\n\n    def search(self, word: str) -> bool:\n        current = self.root\n        for letter in word:\n            current = current.children.get(letter)\n            if current is None:\n                return False\n        return current.is_end\n    \n    # maybe should return a list of words which work\n    def validWords(self, target, targetIdx) -> bool: \n        current = self.root \n        res = []\n        for i in range(targetIdx, len(target)):\n            current = current.children.get(target[i])\n            if not current:\n                return res\n            \n            if current.cost:\n                # length + cost\n                res.append((i + 1 - targetIdx, current.cost))\n\n        return res\n\nclass Solution:\n      \n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:           \n        trie = Trie()\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n        \n        dp = [float(\"inf\") for i in range(len(target) + 1)]\n        dp[0] = 0\n\n        for i in range(len(dp)):\n            if dp[i] == float(\"inf\"):\n                continue\n            \n            validWords = trie.validWords(target, i)\n            for length, cost in validWords:\n                dp[i + length] = min(dp[i + length], dp[i] + cost)\n\n        if dp[-1] == float(\"inf\"):\n            return -1\n            \n        return dp[-1]\n        # @cache\n        # def dfs(targetIdx):\n        #     if targetIdx == len(target):\n        #         return 0\n            \n        #     res = float(\"inf\")\n        #     validWords = trie.validWords(target, targetIdx)\n        #     for length, cost in validWords:\n        #         res = min(res, cost + dfs(targetIdx + length))\n                \n            \n        #     return res\n        \n        # res = dfs(0)\n        # if res == float(\"inf\"):\n        #     return -1\n        \n        # return res",
    "submit_ts": "1720324466",
    "subm_id": "1312400189"
}