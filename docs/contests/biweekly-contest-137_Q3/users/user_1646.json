{
    "username": "Devashish21",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;  // Use long long for the maximum sum\n\n        // Store the top 3 values and their column indices for each row\n        vector<vector<pair<long long, int>>> topValues(m);  // Use long long for the values\n\n        for (int i = 0; i < m; ++i) {\n            vector<pair<long long, int>> values;  // Use long long for the values\n            for (int j = 0; j < n; ++j) {\n                values.push_back({board[i][j], j});\n            }\n\n            sort(values.rbegin(), values.rend());\n\n            for (int k = 0; k < min(3, n); ++k) {\n                topValues[i].push_back(values[k]);\n            }\n        }\n\n        // Try all combinations of rows and corresponding column indices\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Iterate over the top values in these rows and check valid combinations\n                    for (auto [val1, c1] : topValues[r1]) {\n                        for (auto [val2, c2] : topValues[r2]) {\n                            if (c2 == c1) continue;\n                            for (auto [val3, c3] : topValues[r3]) {\n                                if (c3 == c1 || c3 == c2) continue;\n                                long long currentSum = val1 + val2 + val3;\n                                maxSum = max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723910382",
    "subm_id": "1359228490"
}