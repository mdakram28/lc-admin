{
    "username": "yash_shenoy",
    "submission": "class Solution {\npublic:\n    int waysToReachRec(vector<vector<unordered_map<int, int>>>& dp, int k, int curr, int jump, int canGoDown)\n    {\n        int ways = (curr == k);\n        \n        if(dp[jump][canGoDown].find(curr) != dp[jump][canGoDown].end())\n            return dp[jump][canGoDown][curr];\n        \n        if(canGoDown && curr != 0)\n            ways += waysToReachRec(dp, k, curr - 1, jump, 0);\n        if(curr + (long long)pow(2, jump) < k + 2)\n            ways += waysToReachRec(dp, k, curr + pow(2, jump), jump + 1, 1);\n        \n        return dp[jump][canGoDown][curr] = ways;\n    }\n    \n    int waysToReachStair(int k) {\n        vector<vector<unordered_map<int, int>>> dp(100, vector<unordered_map<int, int>>(2));\n        return waysToReachRec(dp, k, 1, 0, true);\n    }\n};",
    "submit_ts": "1716088812",
    "subm_id": "1261824684"
}