{
    "username": "Rajat7489",
    "submission": "\nclass Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1'000'000'007;\n\n        // Find the maximum inversion count we need to deal with\n        int maxInversions = 0;\n        for (const auto& req : requirements) {\n            maxInversions = max(maxInversions, req[1]);\n        }\n\n        // DP array to store the number of permutations with given length and inversion count\n        vector<vector<int>> dp(n + 1, vector<int>(maxInversions + 1, 0));\n        dp[0][0] = 1;  // Base case\n\n        // Fill the DP table\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                dp[len][inv] = 0;  // Initialize current cell\n                for (int k = 0; k < len; ++k) {\n                    if (inv >= k) {\n                        dp[len][inv] = (dp[len][inv] + dp[len - 1][inv - k]) % MOD;\n                    }\n                }\n            }\n        }\n\n        // Create a vector to store whether a certain length and inversion count is valid\n        vector<vector<bool>> valid(n + 1, vector<bool>(maxInversions + 1, false));\n\n        for (int len = 0; len <= n; ++len) {\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                valid[len][inv] = true;\n            }\n        }\n\n        for (const auto& req : requirements) {\n            int len = req[0] + 1;\n            int inv = req[1];\n            for (int j = 0; j <= maxInversions; ++j) {\n                if (j != inv) {\n                    valid[len][j] = false;\n                }\n            }\n        }\n\n        // Calculate the number of valid permutations\n        vector<vector<int>> validDp(n + 1, vector<int>(maxInversions + 1, 0));\n        validDp[0][0] = 1;\n\n        for (int len = 1; len <= n; ++len) {\n            for (int inv = 0; inv <= maxInversions; ++inv) {\n                if (valid[len][inv]) {\n                    for (int k = 0; k < len; ++k) {\n                        if (inv >= k) {\n                            validDp[len][inv] = (validDp[len][inv] + validDp[len - 1][inv - k]) % MOD;\n                        }\n                    }\n                }\n            }\n        }\n\n        int result = 0;\n        for (int inv = 0; inv <= maxInversions; ++inv) {\n            if (valid[n][inv]) {\n                result = (result + validDp[n][inv]) % MOD;\n            }\n        }\n\n        return result;\n    }\n};",
    "submit_ts": "1719070845",
    "subm_id": "1296833104"
}