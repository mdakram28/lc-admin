{
    "username": "sagargGupta",
    "submission": "class Solution {\n    public int minimumDifference(int[] nums, int k) {\n        int prev = Integer.MAX_VALUE;\n        int [] bits = new int [32];\n        int n = nums.length;\n        int min = Integer.MAX_VALUE;\n        int left = 0;\n        for(int i = 0; i<n; i++){\n            prev &= nums[i];\n            int pow = 1, cur = 1;\n            while (cur < 32){\n                if((pow&nums[i]) == 0) bits[cur]++;\n                pow *= 2;\n                cur++;\n            }\n            min = Math.min(min, Math.abs(k - prev));\n            if(prev < k){\n                while (prev < k && left < i){\n                    pow = 1;\n                    cur = 1;\n                    while (cur < 32){\n                        if((pow&nums[left]) == 0) bits[cur]--;\n                        if(bits[cur] == 0) {\n                            if((prev&pow) == 0) prev ^= pow;\n                        }\n                        pow *= 2;\n                        cur++;\n                    }\n                    left++;\n                    min = Math.min(min, Math.abs(prev-k));\n                }\n            }\n        }\n        return min;\n    }\n}",
    "submit_ts": 1717300161.0
}