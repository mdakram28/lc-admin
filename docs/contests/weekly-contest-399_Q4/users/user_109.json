{
    "username": "RoadToIndiaNumber1",
    "submission": "struct Node{\n    long long LR = 0, L1R = 0, LR1 = 0, L1R1 = 0;\n    Node() {\n        LR = 0, L1R = 0, LR1 = 0, L1R1 = 0;\n    }\n};\n\nstruct segmenttree {\n    int n;\n    vector<Node> st;\n\n    void init(int _n) {\n        this->n = _n;\n        st.resize(4 * n, Node());\n    }\n\n    Node comb(Node a, Node b)\n    {\n        Node c;\n        c.LR = max({0ll, a.LR + b.L1R, b.LR + a.LR1, a.LR1 + b.L1R});\n        c.L1R = max({0ll, b.LR + a.L1R1, a.L1R + b.L1R});\n        c.LR1 = max({0ll, a.LR + b.L1R1, a.LR1 + b.LR1});\n        c.L1R1 = max({0ll, a.L1R1 + b.LR1, a.L1R + b.L1R1});\n        return c;\n    }\n\n    void build(int start, int ending, int node, vector<int> &v) {\n        \n        if (start == ending) {\n            st[node].LR = max(v[start], 0);\n            return;\n        }\n\n        int mid = (start + ending) / 2;\n\n        build(start, mid, 2 * node + 1, v);\n\n        build(mid + 1, ending, 2 * node + 2, v);\n\n        st[node] = comb(st[node * 2 + 1], st[node * 2 + 2]);\n    }\n\n    Node query(int start, int ending, int l, int r, int node) {\n        \n        if (start > r || ending < l) {\n            return Node();\n        }\n\n        if (start >= l && ending <= r) {\n            return st[node];\n        }\n\n        int mid = (start + ending) / 2;\n\n        Node q1 = query(start, mid, l, r, 2 * node + 1);\n        Node q2 = query(mid + 1, ending, l, r, 2 * node + 2);\n\n        return comb(q1, q2);\n    }\n\n    void update(int start, int ending, int node, int index, int value) {\n        if (start == ending) {\n            st[node].LR =  max(0, value);\n            return;\n        }\n\n        int mid = (start + ending) / 2;\n        \n        if (index <= mid) {\n            update(start, mid, 2 * node + 1, index, value);\n        }\n        else {\n            update(mid + 1, ending, 2 * node + 2, index, value);\n        }\n\n        st[node] = comb(st[node * 2 + 1], st[node * 2 + 2]);\n\n        return;\n    }\n\n    void build(vector<int> &v) {\n        build(0, n - 1, 0, v);\n    }\n\n    Node query(int l, int r) {\n        return query(0, n - 1, l, r, 0);\n    }\n\n    void update(int x, int y) {\n        update(0, n - 1, 0, x, y);\n    }\n};\n\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        \n        segmenttree tree; tree.init(nums.size()); tree.build(nums);\n        \n        long long answer = 0, mod = 1e9 + 7;\n        \n        for(auto &i : queries) {\n            int value = i[1], index = i[0]; \n            tree.update(index, value);\n            answer = (answer + tree.query(0, nums.size() - 1).LR) % mod;\n        }\n        \n        return answer;\n        \n        \n        \n        \n        \n    }\n};",
    "submit_ts": 1716693931.0
}