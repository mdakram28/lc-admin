{
    "username": "only_me",
    "submission": "class Solution {\npublic:\n    const int MOD = 1000000007;\n\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        // dp[endi][cnti] represents the number of permutations of length endi+1 with cnti inversions\n    vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n    \n    // Initial dp state\n    dp[0][0] = 1; // There's only one way to have a permutation of length 1 with 0 inversions, which is [0]\n    \n    for (int length = 1; length <= n; ++length) {\n        for (int invs = 0; invs < 401; ++invs) {\n            for (int last = 0; last < length; ++last) {\n                if (invs >= last) {\n                    dp[length][invs] = (dp[length][invs] + dp[length - 1][invs - last]) % MOD;\n                }\n            }\n        }\n    }\n\n    // Create a lookup table for the requirements\n    vector<int> required_inversions(n, -1);\n    for (const auto& req : requirements) {\n        required_inversions[req[0]] = req[1];\n    }\n    \n    // Initialize dp2 to filter out invalid sequences\n    vector<vector<int>> dp2(n + 1, vector<int>(401, 0));\n    dp2[0][0] = 1;\n    \n    for (int length = 1; length <= n; ++length) {\n        for (int invs = 0; invs < 401; ++invs) {\n            if (dp[length][invs] == 0) continue; // Skip impossible configurations\n            if (required_inversions[length - 1] != -1 && required_inversions[length - 1] != invs) continue; // Skip if it doesn't match requirement\n\n            for (int last = 0; last < length; ++last) {\n                if (invs >= last) {\n                    dp2[length][invs] = (dp2[length][invs] + dp2[length - 1][invs - last]) % MOD;\n                }\n            }\n        }\n    }\n    \n    // The final answer is the number of permutations of length n with the required number of inversions\n    int result = 0;\n    for (int invs = 0; invs < 401; ++invs) {\n        if (required_inversions[n - 1] == -1 || required_inversions[n - 1] == invs) {\n            result = (result + dp2[n][invs]) % MOD;\n        }\n    }\n    \n    return result;\n    }\n};",
    "submit_ts": "1719068477",
    "subm_id": "1296766711"
}