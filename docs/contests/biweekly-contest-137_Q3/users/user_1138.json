{
    "username": "d_yadav",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        long maxSum = Long.MIN_VALUE;\n\n        // Prepare best values and columns\n        long[][] rowsuse = new long[m][3];\n        int[][] columnsuse = new int[m][3];\n\n        for (int i = 0; i < m; ++i) {\n            List<int[]> colValues = new ArrayList<>();\n            for (int j = 0; j < n; ++j) {\n                colValues.add(new int[] {board[i][j], j});\n            }\n            colValues.sort((a, b) -> Long.compare(b[0], a[0])); // Sort in descending order\n\n            for (int k = 0; k < 3 && k < n; ++k) {\n                rowsuse[i][k] = colValues.get(k)[0];\n                columnsuse[i][k] = colValues.get(k)[1];\n            }\n        }\n\n        // Try all combinations of 3 different rows\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    for (int i = 0; i < 3; ++i) {\n                        for (int j = 0; j < 3; ++j) {\n                            if (columnsuse[r2][j] == columnsuse[r1][i]) continue;\n                            for (int k = 0; k < 3; ++k) {\n                                if (columnsuse[r3][k] == columnsuse[r1][i] || columnsuse[r3][k] == columnsuse[r2][j]) continue;\n                                else\n                                {long currentSum = rowsuse[r1][i] + rowsuse[r2][j] + rowsuse[r3][k];\n                                maxSum = Math.max(maxSum, currentSum);}\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n}\n",
    "submit_ts": "1723910141",
    "subm_id": "1359218933"
}