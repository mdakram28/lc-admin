{
    "username": "Harshit",
    "submission": "class Solution {\npublic:\n    vector<vector<vector<long long>>>dp;\n    long long solve(int row, int last1, int last2, const std::vector<std::vector<int>>& grid) {\n        if (row == grid.size()) {\n            return -1e12; \n        }\n        if (dp[row][last1][last2] != -1) {\n            return dp[row][last1][last2];\n        }\n\n        long long np = solve(row + 1, last1, last2, grid); \n\n        long long pick = LLONG_MIN;\n        if (last1 == grid[row].size()) {\n            for (int i = 0; i < grid[row].size(); ++i) {\n                pick = std::max(pick, grid[row][i] + solve(row + 1, i, last2, grid));\n            }\n        } else if (last2 == grid[row].size()) {\n            for (int i = 0; i < grid[row].size(); ++i) {\n                if (i != last1) {\n                    pick = std::max(pick, grid[row][i] + solve(row + 1, last1, i, grid));\n                }\n            }\n        } else {\n            for (int i = 0; i < grid[row].size(); ++i) {\n                if (i != last1 && i != last2) {\n                    pick = std::max(pick, grid[row][i]*1LL);\n                }\n            }\n        }\n\n        return dp[row][last1][last2] = std::max(pick, np);\n    }\n\n    long long maximumValueSum(const std::vector<std::vector<int>>& grid) {\n        int n = grid.size(),m = grid[0].size();\n        dp = vector<vector<vector<long long>>>(n,vector<vector<long long>>(m+1,vector<long long>(m+1,-1)));\n        return solve(0, m, m, grid);\n    }\n};\n",
    "submit_ts": "1723908929",
    "subm_id": "1359172817"
}