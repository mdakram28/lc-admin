{
    "username": "striver_82",
    "submission": "#include <vector>\n#include <string>\n#include <climits>\n#include <unordered_map>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    struct TrieNode {\n        unordered_map<char, TrieNode*> children;\n        vector<pair<int, int>> wordData; // (word length, cost)\n    };\n\n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordData.push_back({word.size(), cost});\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);  // DP array, initialized to INT_MAX\n        dp[0] = 0;  // Base case: cost to form an empty substring is 0\n\n        // Build the trie\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insert(root, words[i], costs[i]);\n        }\n\n        // DP to calculate the minimum cost to form the target string\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;  // Skip if this prefix cannot be formed\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                for (auto& wc : node->wordData) {\n                    int wordLen = wc.first;\n                    int cost = wc.second;\n                    if (i + wordLen <= n) {\n                        dp[i + wordLen] = min(dp[i + wordLen], dp[i] + cost);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];  // If dp[n] is still INT_MAX, it means the target cannot be formed\n    }\n};\n",
    "submit_ts": "1720321553",
    "subm_id": "1312325960"
}