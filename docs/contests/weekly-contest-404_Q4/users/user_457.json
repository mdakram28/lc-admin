{
    "username": "Spencer_Danese",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int l1=func(edges1);\n        int l2=func(edges2);\n        return Math.max((l1+1)/2+(l2+1)/2+1, Math.max(l1, l2));\n    }\n    \n    \n    public static int func(int[][] edges){\n        List<List<Integer>> nei=new ArrayList<List<Integer>>();\n        for(int i=0;i<edges.length+1;i++)\n            nei.add(new ArrayList<Integer>());\n        for(int[] a:edges){\n            nei.get(a[0]).add(a[1]);\n            nei.get(a[1]).add(a[0]);\n        }\n        boolean[] th=new boolean[edges.length+1];\n        Arrays.fill(th, false);\n        int[] l1= BFS(0, nei, th, 0, edges.length+1);  //0 node, 1 dist\n        Arrays.fill(th, false);\n        int[] l2=BFS(l1[0], nei, th, 0, edges.length+1);\n        return l2[1];\n    }\n    \n    public static int[] BFS(int node, List<List<Integer>> nei, boolean[] vis, int dist, int n){\n        List<Integer> seek=new ArrayList<Integer>();\n        seek.add(node);\n        n--;\n        vis[node]=true;\n        int lnod=node;\n        while(seek.size()>0){\n            dist++;\n            List<Integer> nxtlist=new ArrayList<Integer>();\n            for(int x:seek){\n                lnod=x;\n                for(int nxt:nei.get(x)){\n                    if(!vis[nxt]){\n                        vis[nxt]=true;\n                        nxtlist.add(nxt);\n                    }\n                }\n            }\n            seek=nxtlist;\n        }\n        \n        return new int[]{ lnod, dist-1};\n    }\n}",
    "submit_ts": 1719718397.0
}