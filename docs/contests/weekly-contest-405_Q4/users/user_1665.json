{
    "username": "rdas18246",
    "submission": " class Node{\n\n        Node[] links = new Node[26];\n\n        int cost=Integer.MAX_VALUE;\n\n\n    };\n    class Trie {\n\n        public Node root;\n\n        Trie()\n        {\n            root=new Node();\n        }\n\n        public void insert(String s , int cost)\n        {\n            Node node = root;\n            for(int i=0;i<s.length();i++)\n            {\n                if(node.links[s.charAt(i)-'a']==null)\n                {\n                    node.links[s.charAt(i)-'a'] = new Node();\n                }\n                node = node.links[s.charAt(i)-'a'];\n            }\n            node.cost=Math.min(node.cost,cost);\n\n        }\n\n        public HashMap<Integer,Integer> search(String s , int start)\n        {\n            Node node = root;\n            HashMap<Integer, Integer> p = new HashMap<>();\n            for(int i=start;i<s.length();i++)\n            {\n                if(node.links[s.charAt(i)-'a']==null)\n                {\n                     break;\n                }\n                node = node.links[s.charAt(i)-'a'];\n                if(node.cost!=Integer.MAX_VALUE)\n                {\n                    p.put(i + 1, node.cost);\n                }\n            }\n            return p;\n        }\n\n\n\n\n\n    };\n\n    class Solution {\n        public int minimumCost(String target, String[] words, int[] costs) {\n            Trie trie = new Trie();\n            int n=target.length();\n\n            for (int i = 0; i < words.length; i++) {\n                trie.insert(words[i], costs[i]);\n            }\n\n\n            int[] dp = new int[n + 1];\n            for(int i=0;i<n+1;i++)\n            {\n                dp[i]=Integer.MAX_VALUE;\n            }\n            dp[0]=0;\n\n\n            for (int i = 0; i < n; i++) {\n                if (dp[i] == Integer.MAX_VALUE)\n                {\n                    continue;\n                }\n                HashMap<Integer, Integer> p = trie.search(target, i);\n                \n                \n                for (Map.Entry<Integer, Integer> entry : p.entrySet()) {\n                    int c = entry.getValue();\n                    int e = entry.getKey();\n                    dp[e] = Math.min(dp[e], dp[i] + c);\n                }\n            }\n            if(dp[n] ==Integer.MAX_VALUE)\n                return -1;\n            else return dp[n];\n\n\n        }\n    }",
    "submit_ts": "1720324448",
    "subm_id": "1312399723"
}