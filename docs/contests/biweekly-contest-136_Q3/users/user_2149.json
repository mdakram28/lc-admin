{
    "username": "rohitkumarrrr",
    "submission": "class Solution {\n    int col(int[][] grid)\n    {\n        int n= grid.length;\n        int m=grid[0].length;\n        int colcnt=0;\n        for(int j=0;j<m;j++)\n        {\n            int l=0; int h = n-1;\n            while(l<h)\n            {\n                if(grid[l++][j]!=grid[h--][j]) colcnt++;\n            }\n        }\n        return colcnt;\n    }\n    int row(int[][] grid)\n    {\n         int n= grid.length;\n        int m=grid[0].length;\n        int rowcnt=0;\n        for(int i=0;i<n;i++)\n        {\n            int l=0; int h = m-1;\n            while(l<h)\n            {\n                if(grid[i][l++]!=grid[i][h--]) rowcnt++;\n            }\n        }\n        return rowcnt;\n    }\n    public int minif(int[][] grid) {\n        return Math.min(col(grid),row(grid));\n    } \nint code1(int n, int m, boolean sone, int nofone, int mini, int[][] grid) {\n    int[][] vis = new int[n][m];\n                        int colcnt=0;\n\n             for(int j=0;j<m;j++)\n        {\n            int l=0; int h = n-1;\n            while(l<h)\n            {\n                if(grid[l++][j]!=grid[h--][j]) colcnt++;\n            }\n        }\n             int rowcnt=0;\n        for(int i=0;i<n;i++)\n        {\n            int l=0; int h = m-1;\n            while(l<h)\n            {\n                if(grid[i][l++]!=grid[i][h--]) rowcnt++;\n            }\n        }\n    int ans1=row(grid);\n    int ans2=col(grid);\n        int ans=minif(grid);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = 0; j < m; j++) {\n            int zero = 0, one = 0;\n\n             if (vis[n - i - 1][m - j - 1] == 0) {\n                vis[n - i - 1][m - j - 1] = 1;\n                if (grid[n - i - 1][m - j - 1] == 0) zero++; else one++;\n            }\n            if (vis[i][j] == 0) {\n                vis[i][j] = 1;\n                if (grid[i][j] == 0) zero++; else one++;\n            }\n           \n           \n            \n            if (vis[i][m - j - 1] == 0) {\n                vis[i][m - j - 1] = 1;\n                if (grid[i][m - j - 1] == 0) ++zero; else ++one;\n            }\n     if (vis[n - i - 1][j] == 0) {\n                vis[n - i - 1][j] = 1;\n                if (grid[n - i - 1][j] == 0) zero++; else one++;\n            }\n            int temp=ans1+ans2+ans;\n            int s = zero + one;\n            if (s == 0) continue;\n            if (s == 1)   if (one == 1) mini++;\n            if (s == 2) {\n                if (one == 1) {\n                    mini++;\n                    nofone += 2;\n                    sone = true;\n                }\n                if (one == 2) nofone += 2;\n            }\n            if (s == 4) mini += Math.min(zero, one);\n              s+=temp;\n        temp+=s;\n        }\n      \n    }\n    if (nofone % 4 == 0 || sone) {\n        return mini;\n    }\n    mini += 2;\n    return mini;\n}\n\n\npublic int minFlips(int[][] grid) {\n    int n = grid.length;\n    int m = grid[0].length;\n    int ans=minif(grid);\n                            int colcnt=0;\n\n             for(int j=0;j<m;j++)\n        {\n            int l=0; int h = n-1;\n            while(l<h)\n            {\n                if(grid[l++][j]!=grid[h--][j]) colcnt++;\n            }\n        }\n             int rowcnt=0;\n        for(int i=0;i<n;i++)\n        {\n            int l=0; int h = m-1;\n            while(l<h)\n            {\n                if(grid[i][l++]!=grid[i][h--]) rowcnt++;\n            }\n        }\n       return code1(n,m,false,0,0,grid);\n}\n\n}",
    "submit_ts": "1722700277",
    "subm_id": "1343236972"
}