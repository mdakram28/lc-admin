{
    "username": "anna-hcj",
    "submission": "/**\n * @param {string} target\n * @param {string[]} words\n * @param {number[]} costs\n * @return {number}\n */\nvar minimumCost = function(target, words, costs) {\n  let trie = new Trie(), m = words.length;\n  for (let i = 0; i < m; i++) {\n    trie.add(words[i], costs[i]);\n  }\n  let n = target.length, memo = Array(n).fill(-1);\n  let minCost = dp(0);\n  return minCost === Infinity ? -1 : minCost;\n  \n  function dp(i) {\n    if (i === n) return 0;\n    if (memo[i] !== -1) return memo[i];\n    \n    let node = trie.root, minCost = Infinity;\n    for (let j = i; j < n; j++) {\n      node = node.children;\n      if (!node[target[j]]) break;\n      node = node[target[j]];\n      if (node.isWordEnd) {\n        minCost = Math.min(minCost, node.cost + dp(j + 1));\n      }\n    }\n    return memo[i] = minCost;\n  }\n};\n\nclass TrieNode {\n  constructor() {\n    this.children = {};\n    this.cost = Infinity;\n    this.isWordEnd = false;\n  }\n}\n\nclass Trie {\n  constructor() {\n    this.root = new TrieNode();\n  }\n  add(word, cost) {\n    let node = this.root;\n    for (let i = 0; i < word.length; i++) {\n      node = node.children;\n      let char = word[i];\n      if (!node[char]) node[char] = new TrieNode();\n      node = node[char];\n    }\n    node.isWordEnd = true;\n    node.cost = Math.min(node.cost, cost);\n  }\n}",
    "submit_ts": "1720320972",
    "subm_id": "1312309834"
}