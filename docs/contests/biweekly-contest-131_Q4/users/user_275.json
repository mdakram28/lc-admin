{
    "username": "Satyam_86770",
    "submission": "class Solution {\npublic:\n\n    vector<int> arr;\n    vector<int> segTree;\n\n\n    void build(int ind, int start, int end){\n    if(start == end) // leaf node\n    {\n        segTree[ind] = arr[start];\n        return;\n    }\n    int mid = (start + end) / 2;\n    build(2 * ind, start, mid);\n    build(2 * ind + 1, mid + 1, end);\n    segTree[ind] = max(segTree[2 * ind] , segTree[2 * ind + 1]);\n    }\n    \n    void update(int ind, int start, int end, int pos, int val){\n    if(start == end){\n        segTree[ind] = val;\n        arr[pos] = val;\n        return;\n    }\n    int mid = (start + end) / 2;\n    if(pos <= mid)\n        update(2 * ind, start, mid, pos, val);\n    else\n        update(2 * ind + 1, mid + 1, end, pos, val);\n    segTree[ind] = max(segTree[2 * ind] , segTree[2 * ind + 1]);\n    }\n\n\n    int query(int ind, int start, int end, int left, int right){\n    // completely overlapping\n    if(start >= left && end <= right){\n        return segTree[ind];\n    }\n    if(start > right || end < left){\n        return 0;\n    }\n    int mid = (start + end) / 2;\n    int ansLeft = query(2 * ind, start, mid, left, right);\n    int ansRight = query(2 * ind + 1, mid + 1, end, left, right);\n    return max(ansLeft , ansRight);\n}\n\n    vector<bool> getResults(vector<vector<int>>& q) \n    {    \n         \n         set<int>st;\n         st.insert(0);\n         st.insert(1e9);\n         int n=q.size();\n         int mx=min(50001,(3*n)+1);\n         vector<int>ans(mx+1,0);\n         vector<int>myq;\n\n         for(int i=0;i<q.size();i++)\n         {  \n            if(q[i][0]==1)\n            myq.push_back(q[i][1]);\n         }\n\n         sort(myq.begin(),myq.end());\n \n         arr.resize(mx+1,0);\n         segTree.resize(4*mx+1,0);\n\n         for(int i=0;i<myq.size();i++)\n         {\n               int ind=myq[i];\n               auto it=st.lower_bound(ind);\n               it--;\n               int prev=(*it);\n               int sz=(ind-prev);\n               sz=max(sz,ans[(*it)]);\n               st.insert(ind);\n               ans[ind]=sz;\n               arr[ind]=sz;\n         }\n         \n         build(1,0,mx);\n\n          vector<bool>finalans;\n   \n\n         for(int i=q.size()-1;i>=0;i--)\n         {   \n             if(q[i][0]==1)\n              { \n               int ind=q[i][1];\n              auto it=st.lower_bound(ind);\n               auto itleft=it;\n               auto itright=it;\n               itleft--;\n               itright++;\n               int prev=(*itleft);\n               int next=(*itright);\n               \n               int sz=(next-prev);\n               st.erase(ind);\n              // cout<<prev<<\"  \"<<next<<endl;\n               \n               if(next<1e9)\n               {\n                  int ans1=query(1,0,mx,0,next);\n                  sz=max(sz,ans1);\n                  update(1,0,mx,next,sz);\n               }\n            }\n             else\n             {\n                int ind=q[i][1];\n                int maxsz=q[i][2];\n                auto it=st.lower_bound(ind);\n                it--;\n                int prev=(*it);\n                int sz=(ind-prev);\n                sz=max(sz,query(1,0,mx,0,ind)); \n                if(sz>=maxsz)\n                {\n                    finalans.push_back(true);\n                }  \n                else\n                {\n                       finalans.push_back(false);\n                }\n             }\n         }\n\n         \n         reverse( finalans.begin(),finalans.end());\n    \n         return finalans;    \n    }\n};\n\n//[[1,1],[1,11],[1,4],[1,8],[2,13,7]] exp = [false]",
    "submit_ts": 1716651466.0
}