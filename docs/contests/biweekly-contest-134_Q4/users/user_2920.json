{
    "username": "tylerDurden01",
    "submission": "class Solution {\n    public long countSubarrays(int[] array, int target) {\n        int size = array.length; // Get the size of the array\n        long total = 0; // Initialize the total count of valid subarrays\n        Map<Long, Long> previousResults = new HashMap<>(); // Map to store results from previous iterations\n\n        for (int index = 0; index < size; ++index) { // Loop through each element in the array\n            Map<Long, Long> currentResults = new HashMap<>(); // Map to store current iteration results\n            if (array[index] == target) { // If current element is equal to target\n                ++total; // Increment the total count\n            }\n            currentResults.put((long) array[index], 1L); // Add current element to current results with frequency 1\n\n            for (Map.Entry<Long, Long> entry : previousResults.entrySet()) { // Loop through previous results\n                long value = entry.getKey();\n                long frequency = entry.getValue();\n                long newAndResult = value & array[index]; // Calculate new bitwise AND result\n                if (newAndResult == target) { // If new result equals target\n                    total += frequency; // Increment total by the frequency of previous result\n                }\n                currentResults.put(newAndResult, currentResults.getOrDefault(newAndResult, 0L) + frequency); // Update current results with new result and frequency\n            }\n\n            previousResults = currentResults; // Update previous results to current results for next iteration\n        }\n        return total; // Return the total count of valid subarrays\n    }\n}\n",
    "submit_ts": "1720279256",
    "subm_id": "1311743937"
}