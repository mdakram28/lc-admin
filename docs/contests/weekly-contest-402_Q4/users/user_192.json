{
    "username": "Jay_1729",
    "submission": "struct SegmentTree{\n    int f(int a, int b){\n        return (a + b);\n    }\n    vector<int> tree;\n    int n;\n    void init(int sz){\n        n = 1;\n        while(n < sz){\n            n <<= 1;\n        }\n        tree = vector<int>(2 * n);\n    }\n    SegmentTree(){\n    }\n    SegmentTree(int sz){\n        init(sz);\n    }\n    SegmentTree(vector<int> &arr){\n        int sz = arr.size();\n        init(sz);\n        for(int i = 0; i < sz; ++i){\n            tree[i + n] = arr[i];\n        }\n        for(int i = n - 1; i > 0; --i){\n            tree[i] = f(tree[2 * i], tree[2 * i + 1]);\n        }\n    }\n    void set(int ind, int val){\n        ind += n;\n        tree[ind] = val;\n        ind >>= 1;\n        while(ind > 0){\n            tree[ind] = f(tree[2 * ind], tree[2 * ind + 1]);\n            ind >>= 1;\n        }\n    }\n    int get(int l, int r){\n        l += n;\n        r += n;\n        int res = 0;\n        while(l <= r){\n            if((l & 1) == 1){\n                res = f(res, tree[l]);\n                ++l;\n            }\n            if((r & 1) == 0){\n                res =  f(res, tree[r]);\n                --r;\n            }\n            l >>= 1;\n            r >>= 1;\n        }\n        return res;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegmentTree s(n);\n        \n        auto isPeak = [&](int ind){\n            return (ind > 0) && (ind < n - 1) && (nums[ind] > nums[ind - 1]) && (nums[ind] > nums[ind + 1]);\n        };\n        \n        for(int i = 0; i < n; ++i){\n            s.set(i, isPeak(i));\n        }\n        \n        \n        auto setVal = [&](int ind, int val){\n            nums[ind] = val;\n            s.set(ind, isPeak(ind));\n            if(ind > 0){\n                s.set(ind - 1, isPeak(ind - 1));\n            }\n            if(ind + 1 < n){\n                s.set(ind + 1, isPeak(ind + 1));\n            }\n        };\n        vector<int> res;\n        for(auto query: queries){\n            if(query[0] == 1){\n                int l = query[1];\n                int r = query[2];\n                res.push_back(s.get(l + 1, r - 1));\n            }\n            else{\n                int ind = query[1];\n                int val = query[2];\n                setVal(ind, val);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1718506733.0
}