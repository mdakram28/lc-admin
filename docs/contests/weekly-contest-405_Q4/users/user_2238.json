{
    "username": "ad21ceb0b09",
    "submission": "class Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // cost to form empty string is 0\n\n        unordered_map<string, int> wordCostMap;\n        for (int i = 0; i < words.size(); ++i) {\n            if (wordCostMap.find(words[i]) != wordCostMap.end()) {\n                wordCostMap[words[i]] = min(wordCostMap[words[i]], costs[i]);\n            } else {\n                wordCostMap[words[i]] = costs[i];\n            }\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            for (const auto& word : wordCostMap) {\n                int len = word.first.size();\n                if (i + len <= n && equal(target.begin() + i, target.begin() + i + len, word.first.begin())) {\n                    dp[i + len] = min(dp[i + len], dp[i] + word.second);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720324149",
    "subm_id": "1312392721"
}