{
    "username": "3CWjH04uZ4",
    "submission": "#include <iostream>\n#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Priority queue to sort cuts by cost in descending order\n        priority_queue<int> horizontalCuts(horizontalCut.begin(), horizontalCut.end());\n        priority_queue<int> verticalCuts(verticalCut.begin(), verticalCut.end());\n\n        long long totalCost = 0;\n        int horizontalSegments = 1;\n        int verticalSegments = 1;\n\n        while (!horizontalCuts.empty() || !verticalCuts.empty()) {\n            if (verticalCuts.empty() || (!horizontalCuts.empty() && horizontalCuts.top() >= verticalCuts.top())) {\n                // If no vertical cuts left or horizontal cut is more expensive or equal\n                totalCost += horizontalCuts.top() * verticalSegments;\n                horizontalCuts.pop();\n                horizontalSegments++;\n            } else {\n                // If no horizontal cuts left or vertical cut is more expensive\n                totalCost += verticalCuts.top() * horizontalSegments;\n                verticalCuts.pop();\n                verticalSegments++;\n            }\n        }\n\n        return totalCost;\n    }\n};\n\n",
    "submit_ts": "1720925904",
    "subm_id": "1320269918"
}