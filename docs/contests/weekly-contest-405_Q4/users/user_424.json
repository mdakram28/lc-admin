{
    "username": "being_sukham",
    "submission": "class Node{\npublic:\n    unordered_map<char, Node*> child;\n    vector<pair<int, int> > arr; \n};\nclass Trie{\npublic:\n    Node* root;\n    Trie() { root = new Node(); }\n    void insert(const string& str,int i,int cost){\n        Node* node = root;\n        for(char ch:str){\n            if (!node->child.count(ch))\n                node->child[ch] = new Node();\n            node = node->child[ch];\n        }\n        node->arr.push_back({i,cost});\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(const string& target, const vector<string>& words, const vector<int>& costs) {\n        int N = target.size();\n        vector<int> dp(N+1,INT_MAX);\n        dp[0] = 0;\n        Trie T;\n        for(int i=0;i<words.size();++i) T.insert(words[i],i,costs[i]);\n        for(int i=0;i<N;++i){\n            if(dp[i] == INT_MAX) continue;\n            Node* Root = T.root;\n            for(int j=i;j<N;++j){\n                if(!Root->child.count(target[j])) break;\n                Root = Root->child[target[j]];\n                for(auto& it:Root->arr) {\n                    int l = words[it.first].size();\n                    if(i+l<= N) dp[i+l] = min(dp[i+l],dp[i]+it.second);\n                }\n            }\n        }\n        return dp[N] != INT_MAX ? dp[N] : -1;\n    }\n};",
    "submit_ts": "1720322414",
    "subm_id": "1312349264"
}