{
    "username": "delphih",
    "submission": "M = 10**9 + 7\n\nclass BIT:\n    '''BIT of a[1..n], 1-based indexing'''\n\n    def __init__(self, n, arr=None):\n        if arr is not None: \n            self.n, self.c = len(arr), [0] + arr\n            for i in range(1, self.n+1):\n                if (j := i + BIT.lowbit(i)) <= self.n:\n                    self.c[j] += self.c[i]\n        else:\n            self.n, self.c = n, [0] * (n + 1)\n    \n    def lowbit(x): return x & -x\n\n    def add(self, p, v=1):\n        '''1-based indexing'''\n        while p <= self.n:\n            # self.c[p] += v\n            self.c[p] = (self.c[p] + v) % M\n            p += BIT.lowbit(p)\n\n    def prefix_sum(self, r):\n        '''sum of a[1..r], 1-based indexing'''\n        res = 0\n        while r > 0:\n            res = (res + self.c[r]) % M\n            r -= BIT.lowbit(r)\n        return res\n\nclass Solution:\n    def countOfPairs(self, nums: List[int]) -> int:\n        mx = max(nums)\n        b = list(range(1, nums[0] + 2))\n        for x in islice(nums, 1, None):\n            prev = len(b) - 1\n            nxt = [0] * (x + 1)\n            for i in range(x + 1):\n                j = x - i\n                k = min(i, prev - j, prev)\n                if k >= 0: nxt[i] = (nxt[i] + b[k]) % M\n            for i in range(1, x + 1):\n                nxt[i] = (nxt[i] + nxt[i-1]) % M\n            b = nxt\n        return b[-1]",
    "submit_ts": "1723345702",
    "subm_id": "1351561512"
}