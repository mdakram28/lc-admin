{
    "username": "alwayswin",
    "submission": "class Solution {\npublic:\n    vector<int> adj1[100005];\n    vector<int> adj2[100005];\n    int maxdist=0;\n    int nodestart=0;\n    bool visited[100005]={false};\n    void BFS1(int node)\n    {\n        visited[node]=true;\n        queue<pair<int,int> > q1;\n\n        q1.push(make_pair(node,0));\n        while(q1.size()>0)\n        {\n\n            int x=q1.front().first;\n            int y=q1.front().second;\n            q1.pop();\n\n            if(maxdist<y)\n            {\n                maxdist=y;\n                nodestart=x;\n            }\n            for(int i=0;i<adj1[x].size();i++)\n            {\n                if(visited[adj1[x][i]]==false)\n                {\n\n                    q1.push(make_pair(adj1[x][i],y+1));\n                    visited[adj1[x][i]]=true;\n                }\n            }\n        }\n    }\n    void BFS2(int node)\n    {\n        visited[node]=true;\n        queue<pair<int,int> > q1;\n\n        q1.push(make_pair(node,0));\n        while(q1.size()>0)\n        {\n\n            int x=q1.front().first;\n            int y=q1.front().second;\n            q1.pop();\n\n            if(maxdist<y)\n            {\n                maxdist=y;\n                nodestart=x;\n            }\n            for(int i=0;i<adj2[x].size();i++)\n            {\n                if(visited[adj2[x][i]]==false)\n                {\n\n                    q1.push(make_pair(adj2[x][i],y+1));\n                    visited[adj2[x][i]]=true;\n                }\n            }\n        }\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        for(int i=0;i<edges1.size();i++){\n            adj1[edges1[i][0]].push_back(edges1[i][1]);\n            adj1[edges1[i][1]].push_back(edges1[i][0]);\n        }\n        for(int i=0;i<edges2.size();i++){\n            adj2[edges2[i][0]].push_back(edges2[i][1]);\n            adj2[edges2[i][1]].push_back(edges2[i][0]);\n        }  \n        memset(visited,false,sizeof(visited));\n        BFS1(0);\n\n        int s=nodestart;\n        nodestart=0;\n        maxdist=0;\n        memset(visited,false,sizeof(visited));\n\n        BFS1(s);\n        int dist1=maxdist;\n        maxdist=0;\n        nodestart=0;\n        memset(visited,false,sizeof(visited));\n        BFS2(0);\n\n        int s2=nodestart;\n        nodestart=0;\n        maxdist=0;\n        memset(visited,false,sizeof(visited));\n\n        BFS2(s2);\n        int dist2=maxdist;       \n        int d1=dist1;\n        int d2=dist2;\n        dist1=(dist1+1)/2;\n        dist2=(dist2+1)/2;\n    \n        return max({dist1+1+dist2,d1,d2});\n        \n    }\n};",
    "submit_ts": 1719716449.0
}