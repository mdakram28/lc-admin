{
    "username": "dhruvg04",
    "submission": "import java.util.*;\n\nclass TrieNode {\n    Map<Character, TrieNode> children;\n    List<int[]> endPositions;\n\n    TrieNode() {\n        children = new HashMap<>();\n        endPositions = new ArrayList<>();\n    }\n}\n\nclass Trie {\n    TrieNode root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void addWord(String word, int idx, int cost) {\n        TrieNode node = root;\n        for (char ch : word.toCharArray()) {\n            node.children.putIfAbsent(ch, new TrieNode());\n            node = node.children.get(ch);\n        }\n        node.endPositions.add(new int[]{idx, cost});\n    }\n}\n\nclass Solution {\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0;\n        Trie trie = new Trie();\n\n        for (int i = 0; i < words.length; i++) {\n            trie.addWord(words[i], i, costs[i]);\n        }\n\n        calcMinCost(target, trie, dp);\n\n        return dp[n] != Integer.MAX_VALUE ? dp[n] : -1;\n    }\n\n    private void calcMinCost(String target, Trie trie, int[] dp) {\n        int n = target.length();\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) {\n                continue;\n            }\n\n            TrieNode node = trie.root;\n            calcCostFromNode(target, node, i, dp);\n        }\n    }\n\n    private void calcCostFromNode(String target, TrieNode node, int start, int[] dp) {\n        int n = target.length();\n\n        for (int j = start; j < n; j++) {\n            char ch = target.charAt(j);\n\n            if (!node.children.containsKey(ch)) {\n                break;\n            }\n\n            node = node.children.get(ch);\n\n            for (int[] pos : node.endPositions) {\n                int idx = pos[0];\n                int cost = pos[1];\n                int length = j - start + 1;\n\n                if (start + length <= n) {\n                    dp[start + length] = Math.min(dp[start + length], dp[start] + cost);\n                }\n            }\n        }\n    }\n}\n",
    "submit_ts": "1720324511",
    "subm_id": "1312401319"
}