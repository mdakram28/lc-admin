{
    "username": "nevergiveup",
    "submission": "class Solution {\n\n\n    // (val, count) -> max_len\n    private static class ValuePair {\n        public int val;\n        public int count;\n        public ValuePair(int val , int count) {\n            this.val = val;\n            this.count = count;\n        }\n\n        @Override\n        public int hashCode() {\n            return this.val * 31 + this.count;\n        }\n\n        @Override\n        public boolean equals(Object object) {\n            ValuePair valuePair = (ValuePair) object;\n            return this.val == valuePair.val && this.count == valuePair.count;\n        }\n    }\n\n    // count to (len, val) pair\n    private static class LenPair implements Comparable<LenPair> {\n        public int len;\n        public int val;\n        public LenPair(int len , int val) {\n            this.len = len;\n            this.val = val;\n        }\n        @Override\n        public int compareTo(LenPair lenPair) {\n            if (this.len != lenPair.len) {\n                return - (this.len - lenPair.len);\n            } else {\n                return this.val - lenPair.val;\n            }\n        }\n    }\n\n    private int[][] dp = new int[5010][60];\n\n    public int maximumLength(int[] nums, int k) {\n        Map<ValuePair , Integer> lenMap = new HashMap<>();\n        Map<Integer , TreeSet<LenPair>> countMap = new HashMap<>();\n        Map<Integer , Map<Integer , Integer>> countValMap = new HashMap<>();\n        // init\n        for (int count = 0;count <= k;count ++) {\n            countMap.put(count , new TreeSet<>());\n            countValMap.put(count , new HashMap<>());\n        }\n        int n = nums.length;\n        for (int i = 0;i < n;i ++) {\n            for (int j = 0; j <= k; j++) {\n                dp[i][j] = -1;\n            }\n        }\n        for (int i = 0;i < n;i ++) {\n            dp[i][0] = 1;\n            int curVal = nums[i];\n            // same val\n            for (int count = 0;count <= k;count ++) {\n                ValuePair pair = new ValuePair(curVal , count);\n                if (lenMap.containsKey(pair)) {\n                    int newLen = lenMap.get(pair) + 1;\n                    dp[i][count] = Math.max(dp[i][count] , newLen);\n                }\n            }\n            // different val\n            for (int count = 0;count < k;count ++) {\n                TreeSet<LenPair> set = countMap.getOrDefault(count , new TreeSet<>());\n                List<LenPair> tmpList = new ArrayList<>();\n                while (!set.isEmpty()) {\n                    LenPair pair = set.first();\n                    if (pair.val != curVal) {\n                        dp[i][count + 1] = Math.max(dp[i][count + 1], pair.len + 1);\n                        break;\n                    }\n                    set.remove(pair);\n                    tmpList.add(pair);\n                }\n                set.addAll(tmpList);\n            }\n            // update based on dp\n            for (int count = 0;count <= k;count ++) {\n                if (dp[i][count] >= 0) {\n                    ValuePair pair = new ValuePair(curVal , count);\n                    lenMap.put(pair , Math.max(lenMap.getOrDefault(pair , 0) , dp[i][count]));\n                }\n            }\n            for (int count = 0;count <= k;count ++) {\n                if (dp[i][count] >= 0) {\n                    TreeSet<LenPair> set = countMap.get(count);\n                    int newLen = dp[i][count];\n                    if (countValMap.get(count).containsKey(curVal)) {\n                        int oldLen = countValMap.get(count).get(curVal);\n                        set.remove(new LenPair(oldLen , curVal));\n                    }\n                    set.add(new LenPair(newLen , curVal));\n                    countValMap.get(count).put(curVal , Math.max(countValMap.get(count).getOrDefault(curVal , 0) , dp[i][count]));\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0;i < n;i ++) {\n            for (int j = 0;j <= k;j ++) {\n                ans = Math.max(ans , dp[i][j]);\n            }\n        }\n        return ans;\n    }\n\n\n\n}",
    "submit_ts": 1717860813.0
}