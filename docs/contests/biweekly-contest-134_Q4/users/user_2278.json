{
    "username": "chromate00",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\nusing ll=unsigned long long;\n\ntemplate <class S, S (*op)(S, S), S (*e)()> struct sparse_table {\n    int N, lgN;\n    std::vector<std::vector<S>> d;\n    std::vector<int> lgx_table;\n    sparse_table() {}\n    sparse_table(const std::vector<S> &sequence) : N(sequence.size()) {\n        lgx_table.resize(N + 1);\n        for (int i = 2; i < N + 1; ++i) lgx_table[i] = lgx_table[i >> 1] + 1;\n        lgN = lgx_table[N] + 1;\n        d.assign(lgN, std::vector<S>(N, e()));\n        d[0] = sequence;\n        for (int h = 1; h < lgN; ++h) {\n            for (int i = 0; i + (1 << h) <= N; ++i) {\n                d[h][i] = op(d[h - 1][i], d[h - 1][i + (1 << (h - 1))]);\n            }\n        }\n    }\n    S prod(int l, int r) const { // [l, r), 0-indexed\n        assert(l >= 0 and r <= N);\n        if (l >= r) return e();\n        int h = lgx_table[r - l];\n        return op(d[h][l], d[h][r - (1 << h)]);\n    }\n};\n\nll op(ll a,ll b)\n{\n    return a&b;\n}\nll e(){return -1;}\n\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k)\n    {\n        int n=size(nums);\n        vector<ll>vec(n);\n        for(int i=0;i<n;i++)vec[i]=nums[i];\n        sparse_table<ll,op,e>sps(vec);\n        ll ans=0;\n        for(int i=0;i<n;i++)\n        {\n            int d=1<<20;\n            int l1=i,l2=i;\n            while(d>0)\n            {\n                if(l1+d<=n&&sps.prod(i,l1+d)>k)l1+=d;\n                d>>=1;\n            }\n            d=1<<20;\n            while(d>0)\n            {\n                if(l2+d<=n&&sps.prod(i,l2+d)>=k)l2+=d;\n                d>>=1;\n            }\n            ans+=l2-l1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720277471",
    "subm_id": "1311665239"
}