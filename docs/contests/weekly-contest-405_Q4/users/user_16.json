{
    "username": "NerdyCoder",
    "submission": "struct TrieNode {\n   array<unique_ptr<TrieNode>, 26> children;\n   int cost = 0; \n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode root;\n        for (int index = 0; index < words.size(); ++index) {\n            TrieNode *node = &root;\n            for (char ch : words[index]) {\n                auto &child = node->children[ch - 'a'];\n                if (child == nullptr) {\n                    child = make_unique<TrieNode>();\n                }\n                node = child.get();\n            }\n            if (node->cost == 0) {\n                node->cost = costs[index];\n            } else {\n                node->cost = min(node->cost, costs[index]);\n            }\n        }\n        const int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[n] = 0;\n        return solve(target, dp, 0, &root);\n    }\nprivate:\n    int solve(const string &target, vector<int> &memo, int index, TrieNode *root) const {\n        if (memo[index] == INT_MAX) {\n            TrieNode *node = root;\n            for (int i = index; i < target.size(); ++i) {\n                node = node->children[target[i] - 'a'].get();\n                if (node == nullptr) {\n                    break;\n                }\n                if (node->cost > 0) {\n                    const int sub = solve(target, memo, i + 1, root);\n                    if (sub >= 0) {\n                        memo[index] = min(memo[index], sub + node->cost);\n                    }\n                }\n            }\n            if (memo[index] == INT_MAX) {\n                memo[index] = -1;\n            }\n        }\n        return memo[index];\n    }\n};",
    "submit_ts": "1720320708",
    "subm_id": "1312302358"
}