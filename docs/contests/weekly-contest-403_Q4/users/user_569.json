{
    "username": "cychiu77",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        \n        // int le[35][35][35][35];\n        // int ri[35][35][35][35];\n        // int lo[35][35][35][35];\n        // int hi[35][35][35][35];\n        \n        int dp[35][35][35][35] = {0};\n        for (int i = 0; i < 35; i++) {\n            for (int j = 0; j < 35; j++) {\n                for (int k = 0; k < 35; k++) {\n                    for (int l = 0; l < 35; l++) {\n                        dp[i][j][k][l] = 1e6;\n                    }\n                }\n            }\n        }\n        \n        for (int start_i = 0; start_i < m; start_i++) {\n            for (int end_i = start_i; end_i <= m - 1; end_i++) {\n                for (int start_j = 0; start_j < n; start_j++) {\n                    for (int end_j = start_j; end_j <= n - 1; end_j++) {\n                        \n                    \n                        int left = INT_MAX, right = INT_MIN;\n                        int high = INT_MAX, low = INT_MIN; \n                        for (int i = start_i; i <= end_i; i++) {\n                            for (int j = start_j; j <= end_j; j++) {\n                                if (grid[i][j]) {\n\n                                    left = min(left, j);\n                                    right = max(right, j);\n\n                                    high = min(high, i);\n                                    low = max(low, i);\n\n                                }\n                            }\n                        }\n                        \n                        if (left == INT_MAX or right == INT_MIN or high == INT_MAX or low == INT_MIN) {\n                            dp[start_i][start_j][end_i][end_j] = 0;\n                        }\n                        else {\n                            dp[start_i][start_j][end_i][end_j] = abs(right - left + 1) * abs(low - high + 1);\n                        }\n                    }\n                }\n            }\n        }\n        \n        \n        // cout << dp[0][0][1][0] << endl;\n        \n        int res = INT_MAX;\n        for (int i = 0; i < m; i++) {\n            for (int j = 0; j < n; j++) {\n                res = min({res, \n                          dp[0][0][i][j] + dp[i + 1][0][m - 1][j] + dp[0][j + 1][m - 1][n - 1],\n                          dp[0][0][i][j] + dp[0][j + 1][i][n - 1] + dp[i + 1][0][m - 1][n - 1],\n                          dp[0][0][m - 1][j] + dp[0][j + 1][i][n - 1] + dp[i + 1][j + 1][m - 1][n - 1],\n                          dp[0][0][i][n - 1] + dp[i + 1][0][m - 1][j] + dp[i + 1][j + 1][m - 1][n - 1]\n                           });\n                \n                // if (i == 0 and j == 1) {\n                //     cout <<dp[0][0][i][j] + dp[i + 1][0][m - 1][j] + dp[0][j + 1][m - 1][n - 1] << endl;\n                //           cout << dp[0][0][i][j] + dp[0][j + 1][i][n - 1] + dp[i + 1][0][m - 1][n - 1] << endl;\n                //           cout << dp[0][0][m - 1][j] + dp[0][j + 1][i][n - 1] + dp[i + 1][j + 1][m - 1][n - 1] << endl;\n                //           cout << dp[0][0][i][n - 1] + dp[i + 1][0][m - 1][j] + dp[i + 1][j + 1][m - 1][n - 1] << endl;\n                // }\n                \n            }\n        }\n        \n        for (int i = 0; i < m; i++) {\n            for (int j = i + 1; j < m; j++) {\n                res = min(res, dp[0][0][i][n - 1] + dp[i + 1][0][j][n - 1] + dp[j + 1][0][m - 1][n - 1]);\n                \n            }\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                res = min(res, dp[0][0][m - 1][i] + dp[0][i + 1][m - 1][j] + dp[0][j + 1][m - 1][n - 1]);\n            }\n        }\n        \n        // cout << dp[0][0][1][1] + dp[2][0][3][1] + dp[2][2][3][2] << endl;        \n        return res;\n    \n    }\n};",
    "submit_ts": 1719114553.0
}