{
    "username": "envyaims",
    "submission": "class Solution {\npublic:\n    struct tower{\n        int x,y,r;\n        tower(){}\n        tower(int xx,int yy,int rr):x(xx),y(yy),r(rr){}\n        bool cross(tower b){\n            long long dx = x - b.x,dy = y - b.y,dr = r + b.r;\n            long long dt = dx*dx + dy*dy;\n            return dt <= dr*dr;\n        }\n    };\n    struct DSU{\n        vector<int> p, sz;\n        DSU(int n){\n            p.resize(n);\n            sz.resize(n,1);\n            iota(p.begin(),p.end(),0);\n        }\n        int get(int x){\n            if(p[x] != x){\n                p[x] = get(p[x]);\n            }\n            return p[x];\n        }\n        bool unite(int a, int b){\n            a = get(a); b = get(b);\n            if(sz[a] < sz[b])swap(a,b);\n            if(a != b){\n                p[b] = a;\n                sz[a] += sz[b];\n            }\n            return a != b;\n        }\n        bool sameset(int a, int b){return get(a) == get(b);}\n        int getsize(int a){return sz[get(a)];}\n    };\n    bool canReachCorner(int w, int h, vector<vector<int>>& c) {\n        int n = c.size();\n        DSU dsu(n);\n        typedef pair<int,int> maxmin;\n        vector<tower> dict;\n        map<int,maxmin> record;\n        tower tow;\n        for(int i=0;i<n;i++){\n            tow.x = c[i][0];\n            tow.y = c[i][1];\n            tow.r = c[i][2];\n            dict.push_back(tow);\n            for(int j=i-1;j>=0;j--)\n                if(dict[j].cross(tow)){\n                    dsu.unite(i,j);\n                }\n        }\n        bool status = true;\n        for(int i=0;i<n;i++){\n            int root = dsu.get(i);\n            if(record.find(root) == record.end()) record[root] = maxmin(dict[i].y+dict[i].r,dict[i].y-dict[i].r);\n            record[root].first = max(record[root].first,dict[i].y + dict[i].r);\n            record[root].second = min(record[root].second,dict[i].y - dict[i].r);\n            if(record[root].first >= h && record[root].second <= 0){\n                status = false;\n                break;\n            }\n        }\n        map<int,maxmin> record2;\n        for(int i=0;i<n;i++){\n            int root = dsu.get(i);\n            if(record2.find(root) == record2.end()) record2[root] = maxmin(dict[i].x+dict[i].r,dict[i].x-dict[i].r);\n            record2[root].first = max(record2[root].first,dict[i].x + dict[i].r);\n            record2[root].second = min(record2[root].second,dict[i].x - dict[i].r);\n            if(record2[root].first >= w && record2[root].second <= 0){\n                status = false;\n                break;\n            }\n            if(record2[root].first >= w && record[root].first >= h){\n                // cout << root << endl;\n                status = false;\n                break;\n            }\n            if(record2[root].second <= 0 && record[root].second <= 0){\n                status = false;\n                break;\n            }\n        }\n        return status;\n    }\n};",
    "submit_ts": "1722137084",
    "subm_id": "1335753666"
}