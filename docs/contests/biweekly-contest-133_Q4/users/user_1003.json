{
    "username": "Kevinc00",
    "submission": "class Solution {\npublic:\n    #define MOD 1000000007\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        vector<int> reqs(n+1,-1);\n        \n        for(auto& v:requirements){\n            reqs[v[0]] = v[1];\n        }\n        // /array size, # that have k inversions\n        int maxInversions = min(n*(n-1)/2,401);\n        vector<vector<int>> dp(n + 1, vector<int> (maxInversions + 1, 0));\n        dp[0][0] = 1;\n        for (int i = 1; i <= n; ++i) {\n            int index = i-1;\n            if(reqs[index] != -1){\n                for (int j = 0; j < i && reqs[index] - j >= 0; ++j) {\n                    dp[i][reqs[index]] += dp[i - 1][reqs[index] - j];\n                    dp[i][reqs[index]]%=MOD;\n                }\n            }else{\n                for (int k = 0 ; k <= maxInversions; ++k) {\n                    dp[i][k] = 0;\n                    for (int j = 0; j < i && k - j >= 0; ++j) {\n                        dp[i][k] += dp[i - 1][k - j];\n                        dp[i][k]%=MOD;\n                    }\n                }\n            }\n        }\n        int ans = 0;\n        for(const auto& x: dp.back()){\n            ans+=x;\n        }\n\n       \n        return ans;\n    }\n};",
    "submit_ts": 1719070584.0
}