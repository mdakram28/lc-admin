{
    "username": "wp2858",
    "submission": "class UnionFinder: \n\n    def __init__(self, size): \n        self.parent = list(range(size)) \n        self.group_size = [1] * size                \n        self.xspan = [[0, 0] for _ in range(size)]\n        self.yspan = [[0, 0] for _ in range(size)]\n\n    def findParent(self, p):\n        root = p        \n        while self.parent[root] != root: \n            root = self.parent[root]         \n        while p != root:  \n            next = self.parent[p] \n            self.parent[p] = root \n            p = next         \n        return root \n    \n    def connected(self, p, q): \n        return self.findParent(p) == self.findParent(q)\n    \n    def connect(self, p, q):\n        root1 = self.findParent(p)\n        root2 = self.findParent(q)\n        if root1 == root2: \n            return \n            \n        if self.group_size[root1] < self.group_size[root2]: \n            self.parent[root1] = root2\n            self.group_size[root2] += self.group_size[root1]             \n            self.xspan[root2] = [min(self.xspan[root2][0],self.xspan[root1][0]), max(self.xspan[root2][1],self.xspan[root1][1])]\n            self.yspan[root2] = [min(self.yspan[root2][0],self.yspan[root1][0]), max(self.yspan[root2][1],self.yspan[root1][1])]            \n        else: \n            self.parent[root2] = root1\n            self.group_size[root1] += self.group_size[root2]    \n            self.xspan[root1] = [min(self.xspan[root2][0],self.xspan[root1][0]), max(self.xspan[root2][1],self.xspan[root1][1])]\n            self.yspan[root1] = [min(self.yspan[root2][0],self.yspan[root1][0]), max(self.yspan[root2][1],self.yspan[root1][1])]            \n            \n    def getGroupSize(self, p): \n        return self.group_size[self.findParent(p)]       \n\n\nclass Solution:\n    def canReachCorner(self, X: int, Y: int, circles: List[List[int]]) -> bool:\n        \n        def circle_intersects_rectangle(x, y, r, X, Y):\n            \"\"\"Determine whether a circle intersects with a rectangle.\"\"\"\n            # Find the closest point on the rectangle to the circle's center\n            closestX = max(0, min(x, X))\n            closestY = max(0, min(y, Y))\n\n            # Calculate the distance from the circle's center to the closest point\n            distance = math.sqrt((x - closestX) ** 2 + (y - closestY) ** 2)\n\n            # Check if the distance is less than or equal to the radius\n            if distance <= r:\n                return True\n            else:\n                return False\n\n        \n        def circles_intersect(x1, y1, r1, x2, y2, r2):\n            \"\"\"Determine whether two circles intersect.\"\"\"\n            # Calculate the distance between the centers\n            distance = math.sqrt((x2 - x1) ** 2 + (y2 - y1) ** 2)\n\n            # Check the conditions for intersection\n            if distance > r1 + r2:\n                return False\n            elif distance < abs(r1 - r2):\n                return False\n            else:\n                return True       \n        \n        filtered = []\n        for x, y, r in circles: \n            if circle_intersects_rectangle(x, y, r, X, Y):\n                filtered.append([x,y,r])\n        circles = filtered\n        \n        n = len(circles)            \n        uf = UnionFinder(n)        \n        \n        for i in range(n):\n            x, y, r = circles[i]\n            uf.xspan[i] = [x-r, x+r]\n            uf.yspan[i] = [y-r, y+r]\n        \n        for i in range(n):\n            x1, y1, r1 = circles[i]\n            for j in range(i+1, n):\n                x2, y2, r2 = circles[j]                \n                if circles_intersect(x1, y1, r1, x2, y2, r2): \n                    uf.connect(i, j)\n                    \n        for i in range(n):            \n            if uf.xspan[i][0]<= 0 and uf.xspan[i][1] >= X: \n                return False \n            if uf.yspan[i][0]<= 0 and uf.yspan[i][1] >= Y: \n                return False \n            if uf.xspan[i][0]<= 0 and uf.yspan[i][0]<= 0: \n                return False \n            if uf.xspan[i][1] >= X and uf.yspan[i][1] >= Y:\n                return False \n                    \n        return True",
    "submit_ts": "1722138016",
    "subm_id": "1335779884"
}