{
    "username": "hhhyh",
    "submission": "#include<bits/stdc++.h>\nusing namespace std;\nclass Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        vector<set<int>>col(n), row(m);\n        vector<vector<int>>dp(n, vector<int>(m));\n        vector<vector<int>>pre(n+1, vector<int>(m + 1));\n        set<int>x, y;\n        vector<int>cp(n+1), cm(m+1);\n        auto val = [&](int x1, int y1, int x2, int y2) {\n            return pre[x2 + 1][y2 + 1] - pre[x1][y2 + 1] - pre[x2 + 1][y1] + pre[x1][y1];\n            };\n        auto calc =  [&](int x1, int y1, int x2, int y2) {\n            if (val(x1, y1, x2, y2)==0)return 0;\n            set<int>x, y;\n            for (int i = x1; i <= x2; i++) {\n                if (val(i,y1,i,y2)==0)continue;\n                auto it = col[i].lower_bound(y1);\n                auto it2 = col[i].upper_bound(y2);\n                it2--;\n                x.insert(i);\n                y.insert(*it);\n                y.insert(*it2);\n            }\n            return (*x.rbegin() - *x.begin() + 1) * (*y.rbegin() - *y.begin() + 1);\n         };\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (grid[i][j]) {\n                    col[i].insert(j);\n                    row[j].insert(i);\n                    cp[i + 1]++, cm[j + 1]++;\n                    pre[i+1][j+1]++;\n                }\n                pre[i + 1][j + 1] += pre[i + 1][j] + pre[i][j + 1] - pre[i][j];\n                dp[i][j] = calc(0, 0, i, j);\n            }\n        }\n        int ans = n * m;\n        /*\n        1010\n        0101\n        */\n        for (int i = 1; i <= n; i++)cp[i] += cp[i - 1];\n        for (int j = 1; j <= m; j++)cm[j] += cm[j - 1];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                if (dp[i][j] > ans)continue;\n                int lx=-1, ly=-1, rx=-1, ry = -1;\n                if (pre[i + 1][j + 1] == cp[i + 1]) {\n                    lx = i + 1, ly = 0, rx = n-1, ry = m-1;\n                }\n                else if (pre[i + 1][j + 1] == cm[j + 1]) {\n                    lx = 0, ly = j + 1; rx = n - 1, ry = m - 1;\n                }\n                if(lx==-1) {\n                    ans = min(ans, dp[i][j] + min(calc(i + 1, 0, n - 1, m - 1) + calc(0, j + 1, i, m-1), calc(i + 1, 0, n - 1, j) + calc(0, j + 1, n - 1, m - 1)));\n                }\n                else {\n                    for (int a = lx; a < rx; a++) {\n                        ans = min(ans, calc(lx,ly ,a , ry) + calc(a + 1,ly , rx, ry)+dp[i][j]);\n                    }\n                    for (int b = ly; b < ry; b++) {\n                        ans = min(ans, calc(lx,ly , rx, b) + calc(lx,b+1 ,rx , ry) + dp[i][j]);\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1719114712.0
}