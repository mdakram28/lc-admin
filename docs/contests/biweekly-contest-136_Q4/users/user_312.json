{
    "username": "Maruzensky",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        edge_dict = [[] for _ in range(n)]\n        \n        for u, v in edges:\n            edge_dict[u].append(v)\n            edge_dict[v].append(u)\n            \n        edge_find = [{v: i for i, v in enumerate(edge)} for edge in edge_dict]\n            \n        forward_dict = []\n        back_dict = [[] for _ in range(n)]\n        new_edge_dict = []\n        now = 0\n        \n        for i in range(0, n, 2):\n            d = len(edge_dict[i])\n            back_dict[i].extend(list(range(now, now + d + 2)))\n            for j in range(d + 1):\n                new_edge_dict.append([now + d + 1])\n            new_edge_dict.append(list(range(now, now + d + 1)))\n            \n            now += d + 2\n            \n            forward_dict.extend([i] * (d + 2))\n            \n        for i in range(1, n, 2):\n            back_dict[i].append(now)\n            new_edge_dict.append([])\n            now += 1\n            forward_dict.append(i)\n        \n        for u, v in edges:\n            if u % 2 == 0:\n                u_new = back_dict[u][edge_find[u][v]]\n            else:\n                u_new = back_dict[u][0]\n                \n            if v % 2 == 0:\n                v_new = back_dict[v][edge_find[v][u]]\n            else:\n                v_new = back_dict[v][0]\n                \n            new_edge_dict.append([u_new, v_new])\n            new_edge_dict[u_new].append(now)\n            new_edge_dict[v_new].append(now)\n            now += 1\n            \n        nn = now\n        active = nn\n        layer = [-1] * nn\n        \n        backup = [set(x) for x in new_edge_dict]\n        pull = [i for i in range(nn) if len(backup[i]) == 1]\n        \n        now = 0\n        while active >= 2:\n            active -= len(pull)\n            temp = []\n            for i in pull:\n                layer[i] = now\n                v = backup[i].pop()\n                backup[v].remove(i)\n                \n                if len(backup[v]) == 1:\n                    temp.append(v)\n            \n            pull = temp\n            now += 1\n            \n        layer[pull[0]] = now\n        \n        center = pull[0]\n        depth = [-1] * nn\n        depth[center] = 0\n        \n        stack = [center]\n        while stack:\n            u = stack.pop()\n            for v in new_edge_dict[u]:\n                if depth[v] == -1:\n                    stack.append(v)\n                    depth[v] = depth[u] + 1\n                    \n        answer = []\n        \n        for i in range(n):\n            # print([depth[x] for x in back_dict[i]], now)\n            answer.append((now + min([depth[x] for x in back_dict[i]])) // 2)\n            \n        return answer",
    "submit_ts": "1722700100",
    "subm_id": "1343231705"
}