{
    "username": "Ranjith99",
    "submission": "class TrieNode {\npublic:\n    TrieNode* children[26];\n    int cst;\n\n    TrieNode() {\n        for (int i = 0; i < 26; i++) {\n            children[i] = nullptr;\n        }\n        cst = INT_MAX;\n    }\n};\n\nclass Trie {\nprivate:\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    // Insert a word into the trie with its cost\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!node->children[index]) {\n                node->children[index] = new TrieNode();\n            }\n            node = node->children[index];\n        }\n        node->cst = min(node->cst, cost);\n    }\n\n    // Find minimum cost to form any prefix of the word starting from index startIdx\n    void findPrefixes(const string& target, int startIdx, vector<int>& dp) {\n        TrieNode* node = root;\n        for (int i = startIdx; i < target.size(); i++) {\n            int index = target[i] - 'a';\n            if (!node->children[index]) {\n                break;\n            }\n            node = node->children[index];\n            if (node->cst != INT_MAX) {\n                dp[i + 1] = min(dp[i + 1], dp[startIdx] + node->cst);\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        int n = words.size();\n        for (int i = 0; i < n; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(target.size() + 1, INT_MAX);\n        dp[0] = 0;\n\n        for (int i = 0; i < target.size(); i++) {\n            if (dp[i] != INT_MAX) {\n                trie.findPrefixes(target, i, dp);\n            }\n        }\n\n        return dp[target.size()] == INT_MAX ? -1 : dp[target.size()];\n    }\n};",
    "submit_ts": "1720324267",
    "subm_id": "1312395442"
}