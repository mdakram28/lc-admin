{
    "username": "mayank81757",
    "submission": " struct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    int cost = INT_MAX;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost); // Store the minimum cost for the word\n    }\n};\n\nclass Solution {\npublic:\n   \nlong long solve(const string &s, int i, Trie &trie, vector<long long>& dp) {\n    int sz = s.size();\n    if (i >= sz) {\n        return 0;\n    }\n    if (dp[i] != -1) return dp[i];\n    \n    long long ans = INT_MAX;\n    TrieNode* node = trie.root;\n    \n    for (int ind = i; ind < sz; ++ind) {\n        if (node->children.find(s[ind]) == node->children.end()) {\n            break;\n        }\n        node = node->children[s[ind]];\n        if (node->cost != INT_MAX) {\n            ans = min(ans, node->cost + solve(s, ind + 1, trie, dp));\n        }\n    }\n    \n    return dp[i] = ans;\n}\n\nint minimumCost(string target, vector<string>& a, vector<int>& cost) {\n    Trie trie;\n    int n = a.size();\n    \n    for (int i = 0; i < n; ++i) {\n        trie.insert(a[i], cost[i]);\n    }\n    \n    vector<long long> dp(target.size(), -1);\n    long long ans = solve(target, 0, trie, dp);\n    \n    if (ans == INT_MAX) return -1;\n    return (int)ans;\n}\n};",
    "submit_ts": "1720321866",
    "subm_id": "1312334398"
}