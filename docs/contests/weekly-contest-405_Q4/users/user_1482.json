{
    "username": "kaushikshah1309",
    "submission": "class Solution {\npublic:\n    struct trie{\n        map<char, trie*> next;\n        int cost;\n        trie(){\n            cost = INT_MAX;\n        }\n    };\n\n    void insert(trie * root, string s, int cost){\n        for(auto ch : s){\n            if(! root->next[ch])\n                root->next[ch] = new trie();\n            root = root->next[ch];\n        }\n        // root->end = true;\n        root->cost = min(cost, root->cost);\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        trie *root = new trie();\n        int n = costs.size();\n        \n        vector<long long> dp(target.size() + 1, INT_MAX);\n        dp[target.size()] = 0;\n        for(int i=0; i<n; i++){\n            insert(root, words[i], costs[i]);\n        }\n        for(int i = target.size()-1; i>=0; i--){\n            long long ans = INT_MAX;\n            trie * temp = root;\n            for(int j = i ; j < target.size() && temp ; j++){\n                \n                temp = temp->next[target[j]];\n                if(temp && temp->cost != INT_MAX){\n                    // cout<<i<<\" \"<<j<<endl;\n                    ans = min(ans, temp->cost + dp[j+1]);\n                }\n            }\n            dp[i] = ans;\n        }\n\n        // return 0;\n        // long long ans = solve(target, root, dp, 0);\n        return dp[0] >= INT_MAX ? -1: dp[0];\n    }\n};",
    "submit_ts": "1720323412",
    "subm_id": "1312374952"
}