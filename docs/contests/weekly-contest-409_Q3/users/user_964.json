{
    "username": "u5er",
    "submission": "class Solution {\n        fun shortestDistanceAfterQueries(n: Int, queries: Array<IntArray>): IntArray {\n            val result = IntArray(queries.size) {\n                n - 1\n            }\n\n            // 0 -> 1 -> 2 -> 3 -> 4 -> 5 -> 6 -> 7\n\n            //\n\n            val shortestPath = IntArray(n)\n\n            val parentOfNode = IntArray(n)\n\n            for (index in 1 until parentOfNode.size) {\n                parentOfNode[index] = index - 1\n            }\n\n            for (index in n - 2 downTo 0) {\n                shortestPath[index] = shortestPath[index + 1] + 1\n            }\n\n            var ans = n - 1\n\n            for (index in queries.indices) {\n                val query = queries[index]\n\n                if (query[0] < query[1] && shortestPath[query[0]] > 1 + shortestPath[query[1]]) {\n\n                    // make sense to update\n                    shortestPath[query[0]] = 1 + shortestPath[query[1]]\n                    parentOfNode[query[1]] = minOf(parentOfNode[query[1]], query[0])\n\n                    var currentNode = query[0]\n\n                    while (currentNode > 0) {\n                        val parentNode = parentOfNode[currentNode]\n\n                        if (shortestPath[parentNode] <= shortestPath[currentNode] + 1) {\n                            break\n                        }\n\n                        shortestPath[parentNode] = shortestPath[currentNode] + 1\n\n                        currentNode = parentNode\n                    }\n\n                    ans = minOf(\n                        ans,\n                        shortestPath[0]\n                    )\n                }\n\n                result[index] = ans\n            }\n\n            return result\n        }\n    }",
    "submit_ts": "1722743083",
    "subm_id": "1343783949"
}