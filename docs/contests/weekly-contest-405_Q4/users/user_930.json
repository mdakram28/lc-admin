{
    "username": "Omesh_0112",
    "submission": "struct TrieNode {\npublic:\n    map<char, TrieNode*> child;\n    vector<pair<int, int>> ending_words;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) \n    {\n        TrieNode* node = root;\n        for (int i = 0; i < word.size(); i++) \n        {\n            if (!node -> child.count(word[i])) \n            {\n                node -> child[word[i]] = new TrieNode();\n            }\n            node = node -> child[word[i]];\n        }\n        node -> ending_words.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    void solve(string target, vector<string>& words, vector<int>& costs, vector<int>& dp, int n, Trie& t) \n    {\n        for (int start = 0; start < n; ++start) \n        {\n            if (dp[start] == INT_MAX) \n            {\n                continue;\n            }\n            \n            TrieNode* node = t.root;\n            int end = start;\n            \n            while (end < n && node->child.find(target[end]) != node->child.end()) \n            {\n                node = node->child[target[end]];\n                for (auto& pair : node->ending_words) \n                {\n                    int word_index = pair.first;\n                    int word_cost = pair.second;\n                    int word_len = words[word_index].size();\n                    if (start + word_len <= n) \n                    {\n                        dp[start + word_len] = min(dp[start + word_len], dp[start] + word_cost);\n                    }\n                }\n                ++end;\n             }\n        }\n    }\n\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(50001, INT_MAX);\n        dp[0] = 0;\n\n        Trie t;\n        for (int i = 0; i < words.size(); ++i) \n        {\n            t.insert(words[i], i, costs[i]);\n        }\n        \n        solve(target, words, costs, dp, n, t);\n\n        if (dp[n] != INT_MAX) \n        {\n            return dp[n];\n        } \n        return -1;\n    }\n};",
    "submit_ts": "1720323103",
    "subm_id": "1312367387"
}