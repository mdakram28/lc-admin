{
    "username": "evgsolntsev",
    "submission": "const MAXLEN = 100000\n\nfunc timeTaken(edges [][]int) []int {\n    neigh := make(map[int][]int)\n    n := 0\n    for _, e := range edges {\n        neigh[e[0]] = append(neigh[e[0]], e[1])\n        neigh[e[1]] = append(neigh[e[1]], e[0])\n        if e[0] > n {\n            n = e[0]\n        }\n        if e[1] > n {\n            n = e[1]\n        }\n    }\n\n    n++\n\n    longest := make([]map[int]int, 0, n)\n    for i := 0; i < n; i++ {\n        longest = append(longest, make(map[int]int))\n    }\n\n    visited := make([]int, n)\n    for i := 0; i < n; i++ {\n        visited[i] = -1\n    }\n\n    ready := make([][]int, 0, n)\n    for i := 0; i < n; i++ {\n        ready = append(ready, []int{0, 0})\n    }\n\n    var dfs func(int)int\n    dfs = func(globalV int)int {\n        //fmt.Println(\"dfs:\", globalV)\n        var rec func(int)int\n        rec = func(v int) int {\n            //fmt.Println(\"rec:\", v)\n            visited[v] = globalV\n            if ready[v][0] != 0 || ready[v][1] != 0 {\n                if visited[ready[v][0]] != globalV {\n                    return longest[v][ready[v][0]]\n                } else {\n                    return longest[v][ready[v][1]]\n                }\n            }\n            res := 0\n            for _, nei := range neigh[v] {\n                if visited[nei] == globalV {\n                    continue\n                }\n                tmp := 0\n                if _, ok := longest[v][nei]; ok {\n                    tmp = longest[v][nei]\n                } else {\n                    tmp = rec(nei) + (nei + 1) % 2 + 1\n                    longest[v][nei] = tmp\n                    //fmt.Println(\"saved:\", v, nei, tmp)\n                }\n                if tmp > res {\n                    res = tmp\n                }\n            }\n            if len(longest[v]) == len(neigh[v]) && ready[v][0] == 0 && ready[v][1] == 0 {\n                bestA := -1\n                bestB := -1\n                for _, nei := range neigh[v] {\n                    if bestA == -1 || longest[v][nei] > longest[v][bestA] {\n                        bestB = bestA\n                        bestA = nei\n                    } else if bestB == -1 || longest[v][nei] > longest[v][bestB] {\n                        bestB = nei\n                    }\n                }\n                ready[v][0] = bestA\n                ready[v][1] = bestB\n            }\n\n            return res\n        }\n\n        return rec(globalV)\n    }\n\n    res := make([]int, n)\n    for i := 0; i < n; i++ {\n        res[i] = dfs(i)\n    }\n\n    return res\n}",
    "submit_ts": "1722699316",
    "subm_id": "1343207944"
}