{
    "username": "Sumeet",
    "submission": "class Solution(object):\n    def maximumValueSum(self, board):\n        \"\"\"\n        :type board: List[List[int]]\n        :rtype: int\n        \"\"\"\n        from itertools import combinations\n        \n        m, n = len(board), len(board[0])\n        \n        # Step 1: Precompute top 3 values for each row\n        row_top = []\n        for r in range(m):\n            # Collect values and their column indices\n            row_vals = [(board[r][c], c) for c in range(n)]\n            # Sort by values in descending order\n            row_vals.sort(reverse=True, key=lambda x: x[0])\n            # Keep top 3 values\n            row_top.append(row_vals[:3])\n        \n        # Step 2: Try all combinations of 3 rows\n        max_sum = float('-inf')\n        \n        # Iterate over all combinations of 3 rows\n        for r1, r2, r3 in combinations(range(m), 3):\n            # Check all valid combinations of 3 values from these rows\n            for val1 in row_top[r1]:\n                for val2 in row_top[r2]:\n                    if val2[1] == val1[1]:  # Ensure different columns\n                        continue\n                    for val3 in row_top[r3]:\n                        if val3[1] == val1[1] or val3[1] == val2[1]:  # Ensure different columns\n                            continue\n                        # Calculate sum for valid combination\n                        current_sum = val1[0] + val2[0] + val3[0]\n                        max_sum = max(max_sum, current_sum)\n        \n        return max_sum\n\n",
    "submit_ts": "1723908441",
    "subm_id": "1359152822"
}