{
    "username": "TigProg",
    "submission": "from collections import defaultdict\nfrom itertools import groupby\n\nclass DP:\n    def __init__(self, k):\n        self._k = k\n        self._dp = defaultdict(dict)  # [prev][k] = value\n        self._re = defaultdict(dict)  # [k] [elem1,value1]\n\n    def update_elem(self, elem, current):\n        result = {\n            k_: value + current\n            for k_, value in self._dp[elem].items()\n        }\n        if 0 not in result:\n            result[0] = current\n\n        for k_, bucket in self._re.items():\n            for prev, value in bucket.items():\n                if prev != elem:\n                    result[k_ + 1] = max(\n                        result.get(k_ + 1, 0),\n                        value + current,\n                    )\n\n        result.pop(self._k + 1, None)\n\n        self._dp[elem] = result\n\n        for k_, value in result.items():\n            dp_line = self._re[k_]\n            if len(dp_line) == 0:\n                dp_line[elem] = value\n            elif elem in dp_line:\n                dp_line[elem] = value\n            elif len(dp_line) == 1:\n                dp_line[elem] = value\n            else:\n                min_value = min(\n                    (value_, elem)\n                    for elem, value_ in dp_line.items()\n                )\n                if min_value[0] < value:\n                    dp_line.pop(min_value[1])\n                    dp_line[elem] = value\n\n\n    def get_max(self):\n        result = 0\n        for bucket in self._re.values():\n            result = max(result, max(bucket.values()))\n        return result\n\n\nclass Solution:\n    def maximumLength(self, nums: List[int], k: int) -> int:\n        dp = DP(k)\n        for elem, it in groupby(nums):\n            current = sum(1 for _ in it)\n            dp.update_elem(elem, current)\n\n        return dp.get_max()",
    "submit_ts": "1717862220",
    "subm_id": "1281816097"
}