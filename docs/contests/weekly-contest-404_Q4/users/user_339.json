{
    "username": "joyjitdas_7",
    "submission": "#include <vector>\n#include <queue>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n\n        vector<vector<int>> adj1(n), adj2(m);\n        \n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n        \n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int diameter1 = treeDiameter(adj1);\n        int diameter2 = treeDiameter(adj2);\n\n        return max((diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1, max(diameter1, diameter2));\n    }\n\nprivate:\n    int bfs(int start, vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest = start;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > dist[farthest]) {\n                        farthest = neighbor;\n                    }\n                }\n            }\n        }\n\n        return farthest;\n    }\n\n    int treeDiameter(vector<vector<int>>& adj) {\n        int start = bfs(0, adj);\n        int farthest = bfs(start, adj);\n        vector<int> dist(adj.size(), -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                }\n            }\n        }\n\n        return dist[farthest];\n    }\n};\n",
    "submit_ts": 1719718284.0
}