{
    "username": "utkarsh_raj_13",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size(), m = grid[0].size();\n        int ans = 0;\n\n        if (n % 2 == 1 && m % 2 == 1) {\n            ans += adjustCenter(grid, n, m);\n        }\n\n        vector<int> shift = calculateShifts(grid, n, m);\n\n        if (shift[2] % 2 == 1) {\n            ans += (shift[1] > 0) ? shift[1] : 2;\n        } else {\n            ans += shift[1];\n        }\n\n        ans += calculateFlips(grid, n, m);\n\n        return ans;\n    }\n\nprivate:\n    int adjustCenter(const vector<vector<int>>& grid, int n, int m) {\n        return grid[n / 2][m / 2] == 1 ? 1 : 0;\n    }\n\n    vector<int> calculateShifts(const vector<vector<int>>& grid, int n, int m) {\n        vector<int> shift(3, 0);\n\n        if (n % 2 == 1) {\n            int a = 0, b = m - 1;\n            while (a < b) {\n                int sm = grid[n / 2][a] + grid[n / 2][b];\n                shift[sm]++;\n                a++;\n                b--;\n            }\n        }\n\n        if (m % 2 == 1) {\n            int a = 0, b = n - 1;\n            while (a < b) {\n                int sm = grid[a][m / 2] + grid[b][m / 2];\n                shift[sm]++;\n                a++;\n                b--;\n            }\n        }\n\n        return shift;\n    }\n\n    int calculateFlips(const vector<vector<int>>& grid, int n, int m) {\n        int flips = 0;\n\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                int a = grid[i][j];\n                int b = grid[n - 1 - i][j];\n                int c = grid[i][m - 1 - j];\n                int d = grid[n - 1 - i][m - 1 - j];\n\n                int sm = a + b + c + d;\n\n                if (sm != 0 && sm != 4) {\n                    flips += min(sm, 4 - sm);\n                }\n            }\n        }\n\n        return flips;\n    }\n};\n",
    "submit_ts": "1722699642",
    "subm_id": "1343217867"
}