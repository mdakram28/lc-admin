{
    "username": "whoawhoawhoa",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int[] d1 = diameter(edges1);\n        int[] d2 = diameter(edges2);\n        return Math.max(d1[1], Math.max(d2[1], d1[0] + d2[0] + 1));\n    }\n    \n    static int[] diameter(int[][] edges) {\n        List<Set<Integer>> graph = new ArrayList<Set<Integer>>();\n        for (int i = 0; i < edges.length + 1; ++i) {\n            graph.add(new HashSet<Integer>());\n        }\n        for (int[] edge : edges) {\n            Integer u = edge[0], v = edge[1];\n            graph.get(u).add(v);\n            graph.get(v).add(u);\n        }\n\n        LinkedList<Integer> leaves = new LinkedList<Integer>();\n        for (int vertex = 0; vertex < graph.size(); ++vertex) {\n            if (graph.get(vertex).size() == 1)\n                leaves.add(vertex);\n        }\n\n        int layers = 0;\n        int vertexLeft = edges.length + 1;\n        while (vertexLeft > 2) {\n            vertexLeft -= leaves.size();\n\n            LinkedList<Integer> next = new LinkedList<Integer>();\n\n            for (int leaf : leaves) {\n                int neighbor = graph.get(leaf).iterator().next();\n                graph.get(neighbor).remove(leaf);\n                if (graph.get(neighbor).size() == 1) {\n                    next.add(neighbor);\n                }\n            }\n\n            layers += 1;\n            leaves = next;\n        }\n\n        if (vertexLeft == 1) {\n            return new int[]{layers, 2 * layers};\n        } else {\n            return new int[]{layers + 1, 2 * layers + 1};\n        }\n    }\n}",
    "submit_ts": 1719718107.0
}