{
    "username": "AidenChiang",
    "submission": "class Solution {\npublic:\n    int getDistance(vector<int> &p1, vector<int> &p2) {\n        return abs(p1[0] - p2[0]) + abs(p1[1] - p2[1]);\n    }\n    \n    int getMaximumAfterRemoveI(vector<pair<int, int>> &arr, int i) {\n        if(arr.back().second == i)\n            return arr[arr.size() - 2].first - arr[0].first;\n        if(arr.front().second == i)\n            return arr.back().first - arr[1].first;\n        return arr.back().first - arr.front().first;\n    }\n    \n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int, int>> sum(n), diff(n);\n        for(int i = 0; i < n; i++) {\n            sum[i] = {points[i][0] + points[i][1], i};\n            diff[i] = {points[i][0] - points[i][1], i};\n        }\n        sort(sum.begin(), sum.end());\n        sort(diff.begin(), diff.end());\n        // for(auto &s: sum) {\n        //     cout << s << \" \";\n        // }\n        // cout << \"\\n\";\n        // cout << abs(sum[n-1] - sum[0]) << \" \" <<  abs(diff[n-1] - diff[0]) << \"\\n\";\n        if(sum[n-1].first - sum[0].first > diff[n-1].first - diff[0].first) {\n            int res1 = max(getMaximumAfterRemoveI(sum, sum[n-1].second), getMaximumAfterRemoveI(diff, sum[n-1].second));\n            int res2 = max(getMaximumAfterRemoveI(sum, sum[0].second), getMaximumAfterRemoveI(diff, sum[0].second));\n            return min(res1, res2);\n        }\n        else {\n            int res1 = max(getMaximumAfterRemoveI(sum, diff[n-1].second), getMaximumAfterRemoveI(diff, diff[n-1].second));\n            int res2 = max(getMaximumAfterRemoveI(sum, diff[0].second), getMaximumAfterRemoveI(diff, diff[0].second));\n            return min(res1, res2);\n        }\n    }\n};"
}