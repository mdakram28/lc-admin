{
    "username": "krishrb2517",
    "submission": "class Solution {\npublic:\n    class SegmentTree {\n        vector<int> tree;\n        vector<int> nums;\n        int n;\n\n        bool isPeak(int index) {\n            if (index <= 0 || index >= n - 1) return false;\n            return nums[index] > nums[index - 1] && nums[index] > nums[index + 1];\n        }\n\n        void build(int node, int start, int end) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                build(2 * node + 1, start, mid);\n                build(2 * node + 2, mid + 1, end);\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n        int query(int node, int start, int end, int l, int r) {\n            if (r < start || l > end) return 0;\n            if (l <= start && r >= end) return tree[node];\n            int mid = (start + end) / 2;\n            return query(2 * node + 1, start, mid, l, r) + query(2 * node + 2, mid + 1, end, l, r);\n        }\n\n        void update(int node, int start, int end, int idx) {\n            if (start == end) {\n                tree[node] = isPeak(start) ? 1 : 0;\n            } else {\n                int mid = (start + end) / 2;\n                if (idx <= mid) {\n                    update(2 * node + 1, start, mid, idx);\n                } else {\n                    update(2 * node + 2, mid + 1, end, idx);\n                }\n                tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n            }\n        }\n\n    public:\n        SegmentTree(vector<int>& nums) {\n            this->nums = nums;\n            n = nums.size();\n            tree.resize(4 * n);\n            build(0, 0, n - 1);\n        }\n\n        int query(int l, int r) {\n            return query(0, 0, n - 1, l, r);\n        }\n\n        void update(int idx, int val) {\n            nums[idx] = val;\n            if (idx > 0) update(0, 0, n - 1, idx - 1);\n            update(0, 0, n - 1, idx);\n            if (idx < n - 1) update(0, 0, n - 1, idx + 1);\n        }\n    };\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                int l = query[1], r = query[2];\n                result.push_back(st.query(l+1, r-1));\n            } else if (query[0] == 2) {\n                int index = query[1], val = query[2];\n                st.update(index, val);\n            }\n        }\n        return result;\n    }\n};",
    "submit_ts": "1718507875",
    "subm_id": "1289665092"
}