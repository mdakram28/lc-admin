{
    "username": "Sahil_JJ",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> schild;\n    vector<pair<int, int>> sahilwe;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void sahilinsert(string s, int sind, int scost) {\n        TrieNode* node = root;\n        for (char c : s) {\n            if (!node->schild.count(c)) {\n                node->schild[c] = new TrieNode();\n            }\n            node = node->schild[c];\n        }\n        node->sahilwe.push_back({sind, scost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string star, vector<string>& ss, vector<int>& scosts) {\n        int n = star.size();\n        vector<int> sahildp(n + 1, INT_MAX);\n        sahildp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < ss.size(); ++i) trie.sahilinsert(ss[i], i, scosts[i]);\n        for (int i = 0; i < n; ++i) {\n            if (sahildp[i] == INT_MAX) continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->schild.count(star[j])) break;\n                node = node->schild[star[j]];\n                for (auto& p : node->sahilwe) \n                {\n                    int sn = ss[p.first].size();\n                    if (i + sn <= n) sahildp[i + sn] = min(sahildp[i + sn], sahildp[i] + p.second);\n                }\n            }\n        }\n        return sahildp[n] == INT_MAX? -1 : sahildp[n];\n    }\n};",
    "submit_ts": "1720322968",
    "subm_id": "1312363895"
}