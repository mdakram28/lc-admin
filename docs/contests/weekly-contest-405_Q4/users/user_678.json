{
    "username": "Sonic_AR",
    "submission": "class Solution {\n    class TrieNode {\n        Map<Character, TrieNode> children;\n        int cost; \n\n        public TrieNode() {\n            children = new HashMap<>();\n            cost = -1; \n        }\n    }\n\nclass Trie {\n    private TrieNode root;\n\n    public Trie() {\n        root = new TrieNode();\n    }\n\n    public void insert(String word, int cost) {\n        TrieNode node = root;\n        for (char c : word.toCharArray()) {\n            node.children.putIfAbsent(c, new TrieNode());\n            node = node.children.get(c);\n        }\n        if(node.cost == -1){\n            node.cost = cost;\n        }else{\n            node.cost = Math.min(node.cost , cost);\n        }\n    }\n\n    public Map<Integer, Integer> find(String target, int endPos) {\n        TrieNode node = root;\n        Map<Integer, Integer> endPosToCost = new HashMap<>();\n        for (int i = endPos; i <target.length(); i++) {\n            char c = target.charAt(i);\n            if (!node.children.containsKey(c)) {\n                break;\n            }\n            node = node.children.get(c);\n            if (node.cost != -1) {\n                endPosToCost.put(i, node.cost);\n            }\n        }\n        return endPosToCost;\n    }\n}\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = target.length();\n        int[] dp = new int[n + 1];\n        Arrays.fill(dp, Integer.MAX_VALUE);\n        dp[0] = 0; \n        Trie trie = new Trie();\n        for (int i = 0; i < words.length; i++) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == Integer.MAX_VALUE) continue;\n            Map<Integer, Integer> c = trie.find(target, i);\n            for (Map.Entry<Integer, Integer> entry : c.entrySet()) {\n                int endPos = entry.getKey();\n                int cost = entry.getValue();\n                dp[endPos + 1] = Math.min(dp[endPos + 1], dp[i] + cost);\n            }\n        }\n        return dp[n] == Integer.MAX_VALUE ? -1 : dp[n];\n    }\n}",
    "submit_ts": "1720322972",
    "subm_id": "1312364015"
}