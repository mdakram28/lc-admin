{
    "username": "Wibo",
    "submission": "class Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int m = 0;\n        for (auto &q : queries) m = max(m, q[1]);\n        \n        struct node {\n            int pref, suff, len, mx;\n            bool valid = false;\n        };\n        auto merge = [&](node l, node r) -> node {\n            if (!l.valid) return r;\n            if (!r.valid) return l;\n            node ret;\n            ret.pref = l.pref + ((l.pref&1) ? 0 : r.pref);\n            ret.suff = r.suff + ((r.suff&1) ? 0 : l.suff);\n            ret.len = l.len + r.len;\n            ret.mx = max({l.mx, r.mx, l.suff + r.pref});\n            ret.valid = true;\n            return ret;\n        };\n        \n        vector<node> tree(4*(m+1));\n        auto build = [&](auto self, int l, int r, int v) -> void {\n            if (l == r) tree[v] = (l == 0 ? node(1, 1, 1, 1, true) : node(2, 2, 2, 2, true));\n            else {\n                int mid = (l+r)/2;\n                self(self, l, mid, v*2);\n                self(self, mid+1, r, v*2+1);\n                tree[v] = merge(tree[v*2], tree[v*2+1]);\n            }\n        };\n        build(build, 0, m, 1);\n        auto update = [&](auto self, int pos, int l, int r, int v) -> void {\n            if (l == r) tree[v] = node(1, 1, 1, 1, true);\n            else {\n                int mid = (l+r)/2;\n                if (pos <= mid) self(self, pos, l, mid, v*2);\n                else self(self, pos, mid+1, r, v*2+1);\n                tree[v] = merge(tree[v*2], tree[v*2+1]);\n            }\n        };\n        auto query = [&](auto self, int ql, int qr, int l, int r, int v) -> node {\n            if (r < ql || l > qr) return node();\n            if (l >= ql && r <= qr) return tree[v];\n            int mid = (l+r)/2;\n            return merge(self(self, ql, qr, l, mid, v*2), self(self, ql, qr, mid+1, r, v*2+1));\n        };\n        \n        vector<int> ret;\n        for (int i=0; i<(int)queries.size(); i++) {\n            auto &q = queries[i];\n            if (q[0] == 1) {\n                update(update, q[1], 0, m, 1);\n            } else {\n                node res = query(query, 0, q[1], 0, m, 1);\n                ret.push_back(res.mx / 2 >= q[2]);\n            }\n            // for (int j=0; j<=m; j++) cout << query(query, 0, j, 0, m, 1).mx / 2 << ' ';\n            // cout << '\\n';\n        }\n        \n        vector<bool> ret_bool(ret.size());\n        for (int i=0; i<(int)ret.size(); i++) ret_bool[i] = ret[i];\n        return ret_bool;\n    }\n};",
    "submit_ts": 1716649510.0
}