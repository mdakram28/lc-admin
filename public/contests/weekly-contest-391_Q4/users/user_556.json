{
    "username": "shivanshudixit16",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        \n        s = []\n        d = []\n        \n        for i,p in enumerate(points):\n            s.append((p[0] + p[1],i))\n            d.append((p[0] - p[1],i))\n        \n        s.sort()\n        d.sort()\n        # print(s,d)\n        ans = inf\n        idr = set([s[0][-1],s[-1][-1],d[0][-1],d[-1][-1]])\n        \n        for ci in idr:\n            s1 = 0\n            s2 = len(s) -1\n            d1 = 0\n            d2 = len(d) - 1\n            # print(ci,s1,s2,d1,d2)\n            while s[s1][-1] == ci:\n                s1 += 1\n            while s[s2][-1] == ci:\n                s2 -= 1\n                \n            while d[d1][-1] == ci:\n                d1 += 1\n            while d[d2][-1] == ci:\n                d2 -= 1\n            # print(ci,s1,s2,d1,d2)\n            # print(max(s[s2][0]-s[s1][0],d[d2][0] - d[d1][0]))\n            ans = min(ans,max(s[s2][0]-s[s1][0],d[d2][0] - d[d1][0]))\n        return ans\n            \n        "
}