{
    "username": "sidak_09",
    "submission": "class Solution {\npublic:\n\n     unordered_map<long long, long long> previousResults;\n      long long count = 0;\n\n     void solve(vector<int>& nums, int k){\n         int n = nums.size();\n       \n\n        for (int i = 0; i < n; ++i) {\n            unordered_map<long long, long long> currentResults;\n            bool check1=nums[i] == k;\n            if (check1) {\n                ++count;\n            }\n            currentResults[nums[i]] = 1;\n\n            for (const auto& entry : previousResults) {\n                long long newAndResult = entry.first & nums[i];\n                bool cond1=newAndResult == k;\n                if (cond1) {\n                    count += entry.second;\n                }\n                currentResults[newAndResult] += entry.second;\n            }\n\n            previousResults.swap(currentResults);\n        }\n\n        return  ;\n     }\n    long long countSubarrays(vector<int>& nums, int k) {\n       solve(nums,k);\n       return count;\n    }\n};\n",
    "submit_ts": "1720278366",
    "subm_id": "1311706048"
}