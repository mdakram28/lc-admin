{
    "username": "4dalols",
    "submission": "class Solution {\npublic:\n    struct ftree\n    {\n        vector<int> f; \n        void init (int n) {\n            f.resize(n); \n        }\n        int sum(int i) {\n            int x=0;\n            for (; i>=0; i=(i&(i+1))-1) x+=f[i];\n            return x;\n        }\n        int query(int l, int r) {\n            if (l>r) return 0;\n            if (l) return sum(r)-sum(l-1);\n            return sum(r);\n        }\n        void add(int i, int x) {\n            for (;i<f.size();i=(i|(i+1))) f[i]+=x;\n        }\n    };\n    void upd(int i, vector<int> &v, ftree &f) {\n        if (i<=0) return;\n        if (i>=v.size()-1) return;\n        if (v[i]>v[i-1]&&v[i]>v[i+1]){if(!f.query(i,i)) f.add(i,1);}\n        else if (f.query(i,i)) f.add(i,-1); \n    }\n    vector<int> countOfPeaks(vector<int>& v, vector<vector<int>>& q) {\n        int n=v.size(); \n        ftree f; f.init(n+2);\n        for (int i = 1; i < n-1; i++) {\n            if (v[i]>v[i-1]&&v[i]>v[i+1]) f.add(i,1); \n        }\n        vector<int> ans;\n        for (auto r:q) {\n            if (r[0]-2) {\n                ans.push_back(f.query(r[1]+1,r[2]-1));\n            }\n            else {\n                v[r[1]]=r[2];\n                upd(r[1],v,f);\n                upd(r[1]-1,v,f);\n                upd(r[1]+1,v,f); \n            }\n            // for (int i = 0; i < n; i++) cout << f.query(i,i) << \" \"; cout << \"\\n\"; \n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718505594",
    "subm_id": "1289586772"
}