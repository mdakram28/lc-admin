{
    "username": "DylanSmith",
    "submission": "typedef long long ll;\n\n#define pb push_back\n#define sz(x) (int)x.size()\n#define all(x) begin(x),end(x)\n#define lb(x,y) lower_bound(all(x),y)-begin(x)\nclass Solution {\npublic:\n    int rangeSum(vector<int> &tree, int l, int r) {\n        l += sz(tree) / 2; r += sz(tree) / 2;\n        int res = 0;\n        while (l <= r) {\n            if (l % 2 == 1) {\n                res += tree[l];\n                l >>= 1;\n                l++;\n            } else {\n                l >>= 1;\n            }\n            if (r % 2 == 0) {\n                res += tree[r];\n                r >>= 1;\n                r--;\n            } else {\n                r >>= 1;\n            }\n        }\n        return res;\n    }\n    void upd(vector<int> &tree, int i, int k) {\n        i += sz(tree) / 2;\n        while (i > 0) {\n            tree[i] += k;\n            i >>= 1;\n        }\n    }\n    void dec(vector<int> &sumT, vector<int> &cntT, int k) {\n        upd(sumT, k, -k);\n        upd(cntT, k, -1);\n    }\n    void inc(vector<int> &sumT, vector<int> &cntT, int k) {\n        upd(sumT, k, k);\n        upd(cntT, k, 1);\n    }\n    void rem(set<int> &adj, vector<int> &sumT, vector<int> &cntT, int i) {\n        if (!adj.count(i)) return;\n        dec(sumT, cntT, *adj.lower_bound(i + 1) - i);\n        dec(sumT, cntT, i - *prev(adj.lower_bound(i)));\n        adj.erase(i);\n        inc(sumT, cntT, *adj.lower_bound(i) - *prev(adj.lower_bound(i)));\n    }\n    void ins(set<int> &adj, vector<int> &sumT, vector<int> &cntT, int i) {\n        if (adj.count(i)) return;\n        dec(sumT, cntT, *adj.lower_bound(i) - *prev(adj.lower_bound(i)));\n        adj.insert(i);\n        inc(sumT, cntT, *adj.lower_bound(i + 1) - i);\n        inc(sumT, cntT, i - *prev(adj.lower_bound(i)));\n    }\n    vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n        \n        int N = sz(colors);\n        vector<vector<int>> add;\n        for (int i = 0; i < N; i++) {\n            if (colors[i] == 1) add.pb({2, i, 1});\n        }\n        for (auto &q : queries) add.pb(q);\n        swap(add, queries);\n        fill(all(colors), 0);\n        \n        int M = 1; while (M <= N) M <<= 1;\n        vector<int> sumT(M * 2, 0), cntT(M * 2, 0);\n        sumT[M + 1] = cntT[M + 1] = N;\n        for (int i = M - 1; i > 0; i--) {\n            sumT[i] = sumT[i * 2] + sumT[i * 2 + 1];\n            cntT[i] = cntT[i * 2] + cntT[i * 2 + 1];\n        }\n        vector<int> resQ;\n        set<int> adj;\n        for (int i = 0; i <= N; i++) {\n            adj.insert(i);\n        }\n        bool alt = 0;\n        for (auto &q : queries) {\n            if (cntT[M + N] == 1 && N % 2 == 0) alt = 1;\n            else alt = 0;\n            if (q[0] == 1) {\n                int w = q[1];\n                if (alt) {\n                    resQ.pb(N);\n                } else {\n                    int res = rangeSum(sumT, w, N);\n                    res -= rangeSum(cntT, w, N) * (w - 1);\n                    if (colors[0] != colors[N - 1]) {\n                        int l = *adj.lower_bound(1), r = N - *prev(adj.lower_bound(N));\n                        int cnt = max(0, l + r - (w - 1));\n                        cnt -= max(0, l - (w - 1));\n                        cnt -= max(0, r - (w - 1));\n                        res += cnt;\n                    }\n                    resQ.pb(res);\n                }\n            } else {\n                int i = q[1], v = q[2];\n                if (i > 0 && colors[i] == colors[i - 1]) {\n                    rem(adj, sumT, cntT, i);\n                }\n                if (i + 1 < N && colors[i] == colors[i + 1]) {\n                    rem(adj, sumT, cntT, i + 1);\n                }\n                colors[i] = v;\n                if (i > 0 && colors[i] == colors[i - 1]) {\n                    ins(adj, sumT, cntT, i);\n                }\n                if (i + 1 < N && colors[i] == colors[i + 1]) {\n                    ins(adj, sumT, cntT, i + 1);\n                }\n            }\n        }\n        return resQ;\n    }\n};",
    "submit_ts": "1722742257",
    "subm_id": "1343764741"
}