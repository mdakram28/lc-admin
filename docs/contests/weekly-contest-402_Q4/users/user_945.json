{
    "username": "Dhruv_1018",
    "submission": "class Solution {\npublic:\nstatic bool isPeak(const vector<int>& nums, int i) \n{\n    if (i <= 0 || i >= nums.size() - 1) \n    {\n        return false;\n    }\n    bool t1=nums[i] > nums[i-1];\n        bool t2= nums[i] > nums[i+1];\n    return  t1 && t2;\n}\n\nclass SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    void build(const vector<int>& nums, int node, int start, int end) \n    {\n        if (start == end) \n        {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } \n        else \n        {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    void update(const vector<int>& nums, int node, int start, int end, int idx) \n    {\n        if (start == end) {\n            tree[node] = isPeak(nums, idx) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(nums, 2 * node + 1, start, mid, idx);\n            } else {\n                update(nums, 2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) \n    {\n        if (r < start || end < l) \n        {\n            return 0;\n        }\n        if (l <= start && end <= r) \n        {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node + 1, start, mid, l, r);\n        int right_query = query(2 * node + 2, mid + 1, end, l, r);\n        return left_query + right_query;\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) \n    {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n    int query(int l, int r) \n    {\n        return query(0, 0, n - 1, l, r);\n    }\n\n    void update(const vector<int>& nums, int idx) \n    {\n        update(nums, 0, 0, n - 1, idx);\n    }\n\n    \n};\n\nvector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) \n{\n    int t = nums.size();\n\n    SegmentTree s(nums);\n        vector<int> ans;\n\n    for (const auto& it : queries) \n    {\n        if(it[0]==2)\n        {\n            int i = it[1];\n            int temp= it[2];\n            nums[i] =temp;\n            if (i > 0)\n            {\n                s.update(nums, i - 1);\n            }\n            s.update(nums, i);\n            if (i < t - 1) \n            {\n                s.update(nums, i + 1);\n            }\n            \n        }\n        else if (it[0] == 1) \n        {\n            \n            int high = it[2];\n            int low = it[1];\n            \n            //int temp\n            ans.push_back(s.query(low + 1, high - 1));\n        } \n        \n    }\n\n    return ans;\n}\n};",
    "submit_ts": 1718508547.0
}