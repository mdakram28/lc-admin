{
    "username": "Mayank-kr-sh109",
    "submission": "class Solution {\npublic:\n    int traversal(vector<vector<int>>& ans, int initial, int i, int j, int size) {\n        queue<int> qu;\n        vector<bool> visited(size + 4, false);\n        qu.push(initial);\n        visited[initial] = true;\n        \n        while (!qu.empty()) {\n            \n            int node = qu.front();\n            qu.pop();\n            for (int it : ans[node]) {\n                if (!visited[it]) {\n                    qu.push(it);\n                    visited[it] = true;\n                }\n            }\n        }\n        return (visited[i] || visited[j] ? 1 : 0);\n    }\n\n    bool generate(int X, int Y, vector<vector<int>>& ans) {\n        int size = ans.size();\n        vector<vector<int>> graph(size + 4);\n        for (int i = 0; i < size; i++) {\n            \n            if (ans[i][0] <= ans[i][2]) {\n                graph[size].push_back(i);\n                graph[i].push_back(size);\n            }\n\n            if (X - ans[i][0] <= ans[i][2]) {\n                graph[size + 2].push_back(i);\n                graph[i].push_back(size + 2);\n            }\n\n            if (ans[i][1] <= ans[i][2]) {\n                graph[size + 1].push_back(i);\n                graph[i].push_back(size + 1);\n            }\n\n            if (Y - ans[i][1] <= ans[i][2]) {\n                graph[size + 3].push_back(i);\n                graph[i].push_back(size + 3);\n            }\n\n            for (int j = i + 1; j < size; ++j) {\n                double edges = sqrt(pow(ans[i][0] - ans[j][0], 2) + pow(ans[i][1] - ans[j][1], 2));\n                int sum = ans[i][2] + ans[j][2];\n                if (sum >= edges) { \n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int count = 0;\n        count = max(count, traversal(graph, size, size + 1, size + 2, size + 4));\n        count = max(count, traversal(graph, size + 3, size + 2, size + 1, size + 4)); \n        if(count == 0) return true;\n        return false;\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        \n        return generate(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138893",
    "subm_id": "1335802392"
}