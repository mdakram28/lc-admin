{
    "username": "silyevsk",
    "submission": "import kotlin.math.min\n\nclass Solution {\n    fun minimumCost(target: String, words: Array<String>, costs: IntArray): Int {\n        val trie = Node()\n        for ((i, word) in words.withIndex()) {\n            var node = trie\n            for (c in word) {\n                node = node.children.getOrPut(c) {Node()}\n            }\n            if (node.cost == 0 || node.cost > costs[i]) node.cost = costs[i]\n        }\n\n        val ans = IntArray(target.length + 1) {Int.MAX_VALUE}\n        ans[0] = 0\n        val q = mutableListOf(0)\n        while (q.isNotEmpty()) {\n            q.sort()\n            val i = q.removeFirst()\n            var node = trie\n            for (j in i + 1 .. target.length) {\n                node = node.children[target[j - 1]] ?: break\n                if (node.cost > 0 && ans[i] + node.cost < ans[j]) {\n                    if (ans[j] == Int.MAX_VALUE) q.add(j)\n                    ans[j] = ans[i] + node.cost\n                }\n            }\n        }\n        return if (ans.last() == Int.MAX_VALUE) -1 else ans.last()\n    }\n\n    private class Node {\n        val children = mutableMapOf<Char, Node>()\n        var cost = 0\n        override fun toString(): String {\n            return \"$cost\"\n        }\n    }\n}",
    "submit_ts": "1720324775",
    "subm_id": "1312407931"
}