{
    "username": "CoderVinit28",
    "submission": "class Solution {\npublic:\n    \n    int getMaxDiff(int a, int b, int &k){\n        int l = 0, u = k;\n        if( a>b ) swap(a, b);\n        int maxi = 0;\n        while( l<=u ){\n            int mid = (l+u)/2;\n            if( (a+mid) <= k || (b-mid)>=0 ){\n                maxi = mid;\n                l = mid+1;\n            } else{\n                u = mid-1;\n            }\n        }\n        return maxi;\n    }\n    \n    int minChanges(vector<int>& nums, int k) {\n        map<int, int> mpp;\n        int n = nums.size();\n        int minOps = 1e9;\n        int prefix[k+1];\n        memset(prefix, 0, sizeof(prefix));\n        for(int i=0; i<n; i++){\n            int maxDiff = getMaxDiff(nums[i], nums[n-i-1], k);\n            prefix[maxDiff] += 1;\n            // cout<<nums[i]<<\" \"<<nums[n-i-1]<<\" :: \"<<maxDiff<<endl;\n            int diff = abs(nums[i]-nums[n-i-1]);\n            mpp[diff] += 1;\n        }\n        \n        for(int i=1; i<=k; i++) prefix[i] += prefix[i-1];\n        \n        for(int diff=0; diff<=k; diff++){\n            int rem = n - mpp[diff];\n            int cant = (diff==0? 0 : prefix[diff-1]);\n            int can = rem - cant;\n            // cout<<diff<<\" \"<<rem<<\" \"<<ones<<\" \"<<twos<<\" :: \"<<(ones/2 + twos)<<endl;\n            int ops = can/2 + cant;\n            minOps = min(minOps, ops);\n        }\n        return minOps;\n    }\n};",
    "submit_ts": "1721489991",
    "subm_id": "1327469829"
}