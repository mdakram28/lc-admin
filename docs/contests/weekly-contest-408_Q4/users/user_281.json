{
    "username": "DKPROCKS",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <algorithm>\n\nclass Solution {\npublic:\n    // Function to perform BFS on the graph\n    int bfs(const std::vector<std::vector<int>>& grf, int str, int t1, int t2, int nod) {\n        std::queue<int> que;\n        std::vector<int> vis(nod + 4, 0);\n        que.push(str);\n        vis[str] = 1;\n\n        while (!que.empty()) {\n            int u = que.front();\n            que.pop();\n            for (int v : grf[u]) {\n                if (!vis[v]) {\n                    que.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n\n    // Function to calculate the Euclidean distance between two points\n    double calculateDistance(int x1, int y1, int x2, int y2) {\n        return std::sqrt(std::pow(x1 - x2, 2) + std::pow(y1 - y2, 2));\n    }\n\n    // Function to add an edge to the graph\n    void addEdge(std::vector<std::vector<int>>& grf, int u, int v) {\n        grf[u].push_back(v);\n        grf[v].push_back(u);\n    }\n\n    // Function to initialize the circles vector\n    void initializeCircles(const std::vector<std::vector<int>>& cir2, std::vector<std::pair<std::pair<int, int>, int>>& cir) {\n        for (int i = 0; i < cir2.size(); ++i) {\n            cir[i] = {{cir2[i][0], cir2[i][1]}, cir2[i][2]};\n        }\n    }\n\n    // Function to check if a circle touches the boundary\n    void checkBoundaryIntersections(int X, int Y, const std::pair<std::pair<int, int>, int>& cir, std::vector<std::vector<int>>& grf, int idx, int n) {\n        if (cir.first.first <= cir.second) {\n            addEdge(grf, n, idx);\n        }\n        if (X - cir.first.first <= cir.second) {\n            addEdge(grf, n + 2, idx);\n        }\n        if (cir.first.second <= cir.second) {\n            addEdge(grf, n + 1, idx);\n        }\n        if (Y - cir.first.second <= cir.second) {\n            addEdge(grf, n + 3, idx);\n        }\n    }\n\n    // Function to check if two circles intersect\n    bool circlesIntersect(const std::pair<std::pair<int, int>, int>& cir1, const std::pair<std::pair<int, int>, int>& cir2) {\n        double dst = calculateDistance(cir1.first.first, cir1.first.second, cir2.first.first, cir2.first.second);\n        int rad_sum = cir1.second + cir2.second;\n        return rad_sum >= dst;\n    }\n\n    // Function to build the graph based on the circles and boundaries\n    void buildGraph(int X, int Y, const std::vector<std::pair<std::pair<int, int>, int>>& cir, std::vector<std::vector<int>>& grf) {\n        int n = cir.size();\n        for (int i = 0; i < n; ++i) {\n            checkBoundaryIntersections(X, Y, cir[i], grf, i, n);\n            for (int j = i + 1; j < n; ++j) {\n                if (circlesIntersect(cir[i], cir[j])) {\n                    addEdge(grf, i, j);\n                }\n            }\n        }\n    }\n\n    bool canReachCorner(int X, int Y, std::vector<std::vector<int>>& cir2) {\n        int n = cir2.size();\n        std::vector<std::pair<std::pair<int, int>, int>> cir(n);\n        std::vector<std::vector<int>> grf(n + 4);\n\n        initializeCircles(cir2, cir);\n        buildGraph(X, Y, cir, grf);\n\n        int blk = 0;\n        blk = std::max(blk, bfs(grf, n, n + 1, n + 2, n + 4)); // Check for bottom-left corner\n        blk = std::max(blk, bfs(grf, n + 3, n + 2, n + 1, n + 4)); // Check for top-right corner\n\n        return blk == 0;\n    }\n};\n",
    "submit_ts": "1722136719",
    "subm_id": "1335742952"
}