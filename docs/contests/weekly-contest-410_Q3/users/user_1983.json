{
    "username": "Shashwat1501",
    "submission": "class Solution {\nprivate:\n    int backtrack(int idx, int prev1, int prev2, const vector<int>& nums, vector<vector<vector<int>>>& dp) {\n        if (idx == nums.size()) {\n            return 1;\n        }\n        if (dp[idx][prev1][prev2] != -1) {\n            return dp[idx][prev1][prev2];\n        }\n        int count = 0;\n        for (int arr1_val = prev1; arr1_val <= nums[idx]; ++arr1_val) {\n            int arr2_val = nums[idx] - arr1_val;\n            if (arr2_val <= prev2) {\n                count = (count + backtrack(idx + 1, arr1_val, arr2_val, nums, dp)) % MOD;\n            }\n        }\n        dp[idx][prev1][prev2] = count;\n        return count;\n    }\npublic:\n    const int MOD = 1e9 + 7;\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        int maxi = *max_element(nums.begin(), nums.end());\n        vector<vector<vector<int>>> dp(n, vector<vector<int>>(maxi+1, vector<int>(maxi + 1, -1)));\n        return backtrack(0, 0, nums[0], nums, dp);\n    }\n};",
    "submit_ts": "1723346513",
    "subm_id": "1351579249"
}