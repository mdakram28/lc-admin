{
    "username": "Prakhar",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size();\n        vector<vector<int> > idx(n, vector<int> (3, -1));\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = 0; k < 3; k++) {\n                    if (idx[i][k] == -1 || board[i][idx[i][k]] <= board[i][j]) {\n                        for (int l = 2; l > k; l--) {\n                            idx[i][l] = idx[i][l - 1];\n                        }\n                        idx[i][k] = j;\n                        break;\n                    }\n                }\n            }\n        }\n\n        long long ans = LLONG_MIN;\n        for (int i = 0; i < n - 2; i++) {\n            for (int k1 : idx[i]) {\n                for (int j = i + 1; j < n - 1; j++) {\n                    for (int k2 : idx[j]) {\n                        if (k2 != k1) {\n                            for (int l = j + 1; l < n; l++) {\n                                for (int k3 : idx[l]) {\n                                    if (k3 != k1 && k3 != k2) {\n                                        ans = max(ans, board[i][k1] + 0LL + board[j][k2] + board[l][k3]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723907572",
    "subm_id": "1359114133"
}