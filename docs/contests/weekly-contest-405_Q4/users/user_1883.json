{
    "username": "mridulrko",
    "submission": "#define pb push_back\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> child;\n    vector<pair<int, int>> ends;\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(string word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->child.count(c)) {\n                node->child[c] = new TrieNode();\n            }\n            node = node->child[c];\n        }\n        node->ends.pb({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int  minimumCost(string s, vector<string>& words, vector<int>& costs) {\n        int n = s.size();\n        vector<int> dp(n+1, 1e9);\n        dp[0] = 0;\n\n        Trie trie;\n        int size = words.size();\n        for(int i=0;i<size;i++) trie.insert(words[i], i, costs[i]);\n\n        for (int i=0;i<n;i++) {\n            if (dp[i] == 1e9) {\n                continue;\n            }\n\n            TrieNode* node = trie.root;\n            for (int j=i;j<n;j++) {\n                char c = s[j];\n                if (!node->child.count(c)) {\n                    break;\n                }\n                node = node->child[c];\n                for (auto& p : node->ends) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n        int ans = dp[n];\n        ans = ans==1e9?-1:ans;\n        return ans;\n    }\n};",
    "submit_ts": "1720324274",
    "subm_id": "1312395603"
}