{
    "username": "mdsahil37621",
    "submission": "class Solution {\npublic:\n    const int MOD = 1000000007;\n    const int MAX_INV = 400;\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n         std::unordered_map<int, int> reqMap;\n        for (const auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1];\n        }\n\n        // Initialize DP table\n        std::vector<std::vector<long long>> permCounts(n + 1, std::vector<long long>(MAX_INV + 1, 0));\n        permCounts[0][0] = 1;\n\n        // Fill DP table\n        for (int length = 1; length <= n; ++length) {\n            for (int inv = 0; inv <= MAX_INV; ++inv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = inv - newPos;\n                    if (prevInv >= 0) {\n                        permCounts[length][inv] = (permCounts[length][inv] + permCounts[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            // Apply inversion constraints based on requirements\n            if (reqMap.find(length) != reqMap.end()) {\n                int targetInv = reqMap[length];\n                for (int inv = 0; inv <= MAX_INV; ++inv) {\n                    if (inv != targetInv) {\n                        permCounts[length][inv] = 0;\n                    }\n                }\n            }\n        }\n\n        // Sum up valid permutations of length `n` considering the requirements\n        long long result = 0;\n        for (long long count : permCounts[n]) {\n            result = (result + count) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": "1719069959",
    "subm_id": "1296810891"
}