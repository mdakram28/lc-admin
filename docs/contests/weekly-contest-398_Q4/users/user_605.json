{
    "username": "workcool",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        # either -1 or + 2^i: there is an upper bound to use 2^i\n        # if 2^i > k+1: cannot go back\n        # start can only be: 2**i or 2**i - 1??\n        # if start == 1: 3 cases -> \n        \n        @cache\n        def dp(start, jump, prev):\n            # from start, how many ways to reach k? \n            # prev 1 means 2**jump, prev -1 mean -1\n            if jump >= 31:\n                return 0\n            if start + 2 ** jump > k and start - 1 > k:\n                return 0\n            \n            if prev != -1 and start - 1 == k:\n                return  1 + dp(start + 2**jump, jump + 1, 1) + dp(k, jump, -1)\n            \n            if start + 2**jump == k:\n                return 1 + dp(k, jump+1, 1) + dp(start-1, jump, -1)\n            \n            if prev != -1 and start != 0:\n                return dp(start + 2**jump, jump+1, 1) + dp(start-1, jump, -1)\n            else:\n                return dp(start + 2**jump, jump+1, 1)\n                \n        \n        return dp(1, 0, 0)\n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n        ",
    "submit_ts": 1716089352.0
}