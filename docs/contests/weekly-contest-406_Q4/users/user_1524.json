{
    "username": "Vishal_0O0",
    "submission": "class Solution {\npublic:\n    void help(vector<int> &nums)\n    {\n        nums[0] = 1;\n        for(int i=2;i<nums.size();i++)\n        {\n            nums[i] += nums[i-1];\n        }\n    }\n    \n    long long minimumCost(int m, int n, vector<int>& H, vector<int>& V) {\n        vector<int> nums(100000,0);\n        sort(H.begin(), H.end(), greater<int>());\n        sort(V.begin(), V.end(), greater<int>());\n    \n        help(nums);\n        help(nums);\n        \n       \n        \n        int hInd = 0, vInd = 0;\n        int hSeg = 1, vSeg = 1;\n        long long ans = 0;\n\n        while (hInd < H.size() && vInd < V.size()) {\n            if (H[hInd] >= V[vInd]) {\n                ans += H[hInd] * vSeg;\n                hSeg++;\n                hInd++;\n            } else {\n                ans += V[vInd] * hSeg;\n                vSeg++;\n                vInd++;\n            }\n        }\n        help(nums);\n        help(nums);\n        help(nums);\n    \n        while (hInd < H.size()) {\n            ans += H[hInd] * vSeg;\n            hSeg++;\n            hInd++;\n        }\n        \n        while (vInd < V.size()) {\n            ans += V[vInd] * hSeg;\n            vSeg++;\n            vInd++;\n        }\n        help(nums);\n        return ans;\n\n    }\n};",
    "submit_ts": "1720926008",
    "subm_id": "1320273104"
}