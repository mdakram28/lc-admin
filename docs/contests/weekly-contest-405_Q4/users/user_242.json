{
    "username": "AggarwalShivam",
    "submission": "\nclass Node {\npublic:\n    char val;\n    unordered_map<char, Node*> childs;\n    int cost;\n\n    Node() {\n        val = '/';\n        cost = 1000000;\n    }\n\n    Node(char ch) {\n        val = ch;\n        cost = 1000000;\n    }\n};\n\nclass Trie {\npublic:\n    Node* root;\n\n    Trie() {\n        root = new Node();\n    }\n\n    void insert(string& word, int& c) {\n        Node* itr = root;\n        for (auto ch : word) {\n            if (itr->childs.find(ch) == itr->childs.end()) {\n                Node* child = new Node(ch);\n                itr->childs[ch] = child;\n            }\n            itr = itr->childs[ch];\n        }\n        itr->cost = min(itr->cost, c);\n    }\n};\n\nclass Solution {\npublic:\n    int solve(string& target, int index, Node*& root,vector<int> & dp) {\n        if (index >= target.length()) return 0;\n\n        if(dp[index]!=-1)   return dp[index];\n\n        int ans = INT_MAX;\n        Node* current = root;\n\n        for (int i = index; i < target.length(); ++i) {\n            if (current->childs.find(target[i]) != current->childs.end()) {\n                current = current->childs[target[i]];\n                if (current->cost < 1000000) {\n                    int recurans = solve(target, i + 1, root,dp);\n                    if(recurans!=INT_MAX)   recurans+=current->cost;\n                    ans = min(recurans, ans);\n                }\n            } else {\n                break;\n            }\n        }\n        return dp[index]=ans;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie* trie = new Trie();\n        for (int i = 0; i < words.size(); ++i) {\n            trie->insert(words[i], costs[i]);\n        }\n\n        vector<int> dp(target.size(),-1);\n\n        int ans = solve(target, 0, trie->root,dp);\n        return ans == INT_MAX ? -1 : ans;\n    }\n};",
    "submit_ts": "1720321277",
    "subm_id": "1312318473"
}