{
    "username": "Aditya_chandel_731",
    "submission": "class Solution {\n    \n    #define ll long long\n    ll minimumCostOfBreaking( vector<int>& X, vector<int>& Y, int m, int n)\n{\n    ll res = 0;\n \n    //  sort the horizontal cost in reverse order\n    sort(X.rbegin(),X.rend());\n \n    //  sort the vertical cost in reverse order\n    sort(Y.rbegin(), Y.rend());\n \n    //  initialize current width as 1\n    ll hzntl = 1, vert = 1;\n \n    //  loop until one or both cost array are processed\n    ll i = 0, j = 0;\n    while (i < m && j < n)\n    {\n        if (X[i] > Y[j])\n        {\n            res += X[i] * vert;\n \n            //  increase current horizontal part count by 1\n            hzntl++;\n            i++;\n        }\n        else\n        {\n            res += Y[j] * hzntl;\n \n            //  increase current vertical part count by 1\n            vert++;\n            j++;\n        }\n    }\n \n    // loop for horizontal array, if remains\n    ll total = 0;\n    while (i < m)\n        total += X[i++];\n    res += total * vert;\n \n    // loop for vertical array, if remains\n    total = 0;\n    while (j < n)\n        total += Y[j++];\n    res += total * hzntl;\n \n    return res;\n}\npublic:\n    long long minimumCost(int m, int n, vector<int>& v1, vector<int>& v2) {\n        return minimumCostOfBreaking(v1,v2, m-1,n-1);\n    }\n};",
    "submit_ts": "1720926611",
    "subm_id": "1320291239"
}