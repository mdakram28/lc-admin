{
    "username": "slowtyp3",
    "submission": "class Solution {\npublic:\n    int dfs(int n,int p,vector<vector<int>>&g,vector<int>&depth) {\n        int m=0,c;\n        for(int &i:g[n]) {\n            if(i==p) continue;\n            if(i%2) c=1;\n            else c=2;\n            m=max(m,dfs(i,n,g,depth)+c);\n        }\n        return depth[n]=m;\n        \n    }\n\n    void foo(int n,int p,int s,vector<vector<int>>&g,vector<int>&depth,vector<int>&ans) {\n        //cout << \"Came \" << n << \"\\n\";\n        ans[n]=max(s,depth[n]);\n        int fd=-1,sd=-1,find=-1,val;\n        for(int &i:g[n]) {\n            if(i==p) continue;\n            if(i%2) val=1;\n            else val=2;\n            if(fd<=depth[i]+val) {\n                sd=fd;\n                fd=depth[i]+val;\n                find=i;\n            }\n            else if(sd<depth[i]+val) {\n                sd=depth[i]+val;\n            }\n        }\n        //cout << \"s:\" << s << \" fd:\" << fd << \" sd:\" << sd << \" ind:\" << find << \"\\n\";\n        if(n%2) val=1;\n        else val=2;\n        for(int &i:g[n]) {\n            if(i==p) continue;\n            if(find==i) foo(i,n,max(s,sd)+val,g,depth,ans);\n            else foo(i,n,max(s,fd)+val,g,depth,ans);\n        }\n        \n    }\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        vector<vector<int>>g(n);\n        for(auto &i:edges) {\n            g[i[0]].push_back(i[1]);\n            g[i[1]].push_back(i[0]);\n        }\n        vector<int>depth(n),ans(n);\n        dfs(0,-1,g,depth);\n        foo(0,-1,0,g,depth,ans);\n        // for(int &i:depth) cout << i << \" \";\n        // cout << \"\\n\";\n        return ans;\n    }\n};",
    "submit_ts": "1722698983",
    "subm_id": "1343197912"
}