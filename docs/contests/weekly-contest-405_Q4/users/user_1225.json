{
    "username": "Bleak_Midwinter",
    "submission": "struct TrieNode {\n    TrieNode* Node[26];\n    int Cost = INT_MAX;\n    bool flag = false;\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i)\n            Node[i] = nullptr;\n    }\n\n    int costR() {\n        return Cost;\n    }\n\n    bool isEnd() {\n        return flag;\n    }\n\n    void setEnd(int c) {\n        Cost = min(c,Cost);\n        flag = true;\n    }\n\n    TrieNode* nextNode(char c) {\n        return Node[c - 'a'];\n    }\n\n    void add(char c) {\n        Node[c - 'a'] = new TrieNode;\n    }\n\n    bool isPresent(char c) {\n        return Node[c - 'a'] != nullptr;\n    }\n};\n\nclass Solution {\npublic:\n    int dfs(int idx, string& t, TrieNode* root, vector<int>& dp) {\n        if (idx == t.size()) return 0;\n        if (dp[idx] != -1) return dp[idx];\n\n        int minCost = INT_MAX;\n        TrieNode* node = root;\n\n        for (int i = idx; i < t.size(); ++i) {\n            char currentChar = t[i];\n            if (node->nextNode(currentChar)) {\n                node = node->nextNode(currentChar);\n                if (node->isEnd()) {\n                    int currentCost = node->costR();\n                    int remainingCost = dfs(i + 1, t, root, dp);\n                    if (remainingCost != INT_MAX) {\n                        minCost = min(minCost, currentCost + remainingCost);\n                    }\n                }\n            } else {\n                break;\n            }\n        }\n\n        return dp[idx] = minCost;\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = words.size();\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < n; ++i) {\n            TrieNode* node = root;\n            for (char c : words[i]) {\n                if (!node->isPresent(c)) {\n                    node->add(c);\n                }\n                node = node->nextNode(c);\n            }\n            node->setEnd(costs[i]);\n        }\n        vector<int> dp(target.size(), -1);\n        int result = dfs(0, target, root, dp);\n        return result == INT_MAX ? -1 : result;\n    }\n};\n",
    "submit_ts": "1720324032",
    "subm_id": "1312389975"
}