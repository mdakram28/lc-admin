{
    "username": "clever-volhardfhm",
    "submission": "class segtree:\n    def __init__(self, a):\n        self.nums = [0] + a \n        self.n = len(a)\n        self.tree = [0] * (4 * self.n + 1)\n    def push_up(self, p: int):\n        self.tree[p] = self.tree[p + p] + self.tree[p + p + 1]\n    def build_tree(self, p: int, pl: int, pr: int):\n        if pl == pr:\n            self.tree[p] = 0\n            # print(self.nums[pl - 1], self.nums[pl], self.\n            if 2 <= pl < self.n and self.nums[pl - 1] < self.nums[pl] and self.nums[pl] > self.nums[pl + 1]:\n                # print(p, pl)\n                self.tree[p] = 1\n            return \n        mid = (pl + pr) // 2\n        self.build_tree(p + p, pl, mid)\n        self.build_tree(p + p + 1, mid + 1, pr)\n        self.push_up(p)\n    def query(self, p: int, pl: int, pr: int, l: int, r: int):\n        if l <= pl and pr <= r:\n            return self.tree[p] \n        mid = (pl + pr) // 2\n        res = 0 \n        if l <= mid:\n            res += self.query(p + p, pl, mid, l, r)\n        if mid + 1 <= r:\n            res += self.query(p + p + 1, mid + 1, pr, l, r)\n        return res \n    def update(self, p: int, pl: int, pr: int, id: int):\n        if pl == pr:\n            self.tree[p] = 0 \n            if 2 <= id < self.n and self.nums[id - 1] < self.nums[id] and self.nums[id] > self.nums[id + 1]:\n                # print(p, pl)\n                self.tree[p] = 1\n            return \n        mid = (pl + pr) // 2\n        if id <= mid:\n            self.update(p + p, pl, mid, id)\n        else:\n            self.update(p + p + 1, mid + 1, pr, id)\n        self.push_up(p)\nclass Solution:\n    def countOfPeaks(self, nums: List[int], q: List[List[int]]) -> List[int]:\n        \"\"\"\n        \u4fee\u6539\u4e00\u4e2a\u53ea\u4f1a\u5f71\u54cd\u5de6\u53f3\u4e24\u8fb9\n        \"\"\"\n        n = len(nums)\n        ans = []\n        root = segtree(nums)\n        root.build_tree(1, 1, n)\n        f = [x for x in nums]\n        # print(root.tree)\n        for op, a, b in q:\n            if op == 1:\n                if a + 2 > b:\n                    ans.append(0)\n                else:\n                    ans.append(root.query(1, 1, n, a + 2, b))\n            else:\n                root.nums[a + 1] = b \n                root.update(1, 1, n, a + 1)\n                if a >= 1:\n                    root.update(1, 1, n, a)\n                if a + 2 <= n:\n                    root.update(1, 1, n, a + 2)\n                # print(root.tree)\n        return ans ",
    "submit_ts": 1718508464.0
}