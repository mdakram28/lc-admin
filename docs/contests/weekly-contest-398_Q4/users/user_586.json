{
    "username": "sheepforever",
    "submission": "int total = 0;\nlong long target = -1;\nint leaves = 0;\n\nconst int N = 40;\nlong long choose[N][N];\n\nvoid dfs(long long cur, long long jump) {\n    ++leaves;\n    if (cur > target + 1) return;\n    if (cur == target) {\n        ++total;\n    } else if (jump >= 10 && (1LL << jump) > cur && cur > 0) {\n        const int mask = (1 << jump) - 1;\n        int u = cur & mask;\n        int v = target & mask;\n        \n        int diff = (u - v) & mask;\n        if (diff > 30) {\n            return;\n        } else {\n            long long rem = target >> jump;\n            if (rem == 0) return;\n            if (u < v) {\n                if (rem % 2 == 1) {\n                    return;\n                }\n            } else {\n                if (rem % 2 == 0) {\n                    return;\n                }\n            }\n            int count = 1;\n            for (int k = rem / 2; k != 0; k >>= 1LL) {\n                if (k % 2 == 0) return;\n                ++count;\n            }\n            if (diff <= count) {\n                total += choose[count][diff];\n            }\n            return;\n        }\n    }\n    dfs(cur + (1LL << jump), jump + 1);\n    if (cur + (1LL << jump) >= 1) {\n        dfs(cur + (1LL << jump) - 1, jump + 1);\n    }\n}\n\nclass Solution {\npublic:\n    int waysToReachStair(int k) {\n        for (int i = 0; i < N; ++i) {\n            choose[i][0] = choose[i][i] = 1;\n            for (int j = 1; j < i; ++j) {\n                choose[i][j] = choose[i - 1][j] + choose[i - 1][j - 1];\n            }\n        }\n        target = k;\n        total = 0;\n        leaves = 0;\n        dfs(0, 0);\n        dfs(1, 0);\n        cout << leaves << endl;\n        return total;\n    }\n};",
    "submit_ts": 1716088706.0
}