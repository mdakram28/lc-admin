{
    "username": "kavascgjmd39",
    "submission": "\nconst double eps = 1e-6;\n#define ll long long\ntypedef long double ld;\n#define pb push_back // for vector\n#define pi pair \n// #define mp make_pair\n#define all(a) a.begin(), a.end()\n#define rep(i, a, b) for (ll i = a; i < b; i++)\n#define ff first\n#define ss second\n#define vt vector\n\n#define vi vt<ll>\n#define ub upper_bound\n#define lb lower_bound\n#define repr(i, n, a) for (ll i = n; i >= a; i--)\n#define dq deque\n#define inset(a, st) st.find(a) != st.end()\n#define issub(a, b) b.find(a) != string::npos // check if a is substr of b\n#define len(a) (ll)a.size()\nconst ld PI = 2 * acos(0.0);\nconst ll mod = 1e9+7;\nconst ll mod2 = 998244353;\nconst ll nax = 2e5 + 5;\nclass Solution {\npublic:\n   \n    int dia1 = 0 , dia2  = 0;\n    int height(vt<vt<int>>& g , ll st, ll p ){\n \n    int maxi = 0 ; \n    int smaxi =  0 ; \n    for(int i = 0 ; i<g[st].size() ; i++){\n      if(g[st][i] != p ){\n        int h = height(g, g[st][i] , st);\n        if(h > maxi){\n          smaxi = maxi;\n          maxi = h;\n        }else if(h > smaxi){\n           smaxi = h;\n        }\n       }\n \n    }\n    dia1 = max(dia1 , maxi + smaxi );\n    return maxi + 1;\n    }\n\n    int height2(vt<vt<int>>& g , ll st, ll p ){\n \n    int maxi = 0 ; \n    int smaxi =  0 ; \n    for(int i = 0 ; i<g[st].size() ; i++){\n      if(g[st][i] != p ){\n        int h = height(g, g[st][i] , st);\n        if(h > maxi){\n          smaxi = maxi;\n          maxi = h;\n        }else if(h > smaxi){\n           smaxi = h;\n        }\n       }\n \n    }\n    dia2 = max(dia2 , maxi + smaxi );\n    return maxi + 1;\n    }\n    \n    int dfs(  vt<vt<int>> & dp ,int fst , int st, vt<vt<int>>& g, int p ,int d  ){\n \n    dp[fst][st] = d;\n    ll opt = st;\n     for(ll i = 0 ; i<g[st].size() ; i++){\n      if(g[st][i] != p){\n      ll x  =  dfs(dp, fst, g[st][i] , g, st ,d+1 );\n      if(dp[fst][x] > dp[fst][opt]){\n       opt = x;\n      }\n     \n      }\n      \n    }\n  return opt;\n   }\n\n    \n    \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1;\n        int m = edges2.size()+1;\n        vt<vt<int>>g(n+1);\n        vt<vt<int>>g2(m+1);\n        rep(i , 0 , edges1.size()){\n             int u = edges1[i][0], v = edges1[i][1];\n            u++;v++;\n             g[u].push_back(v);\n            g[v].push_back(u);\n        }\n        rep(i , 0 , edges2.size()){\n            int u = edges2[i][0], v = edges2[i][1];\n            u++;v++;\n             g2[u].push_back(v);\n            g2[v].push_back(u);\n        }\n        height(g, 1 , 1 );\n        height2(g2 , 1  , 1);\n        int sol = max(dia1 , dia2);\n        vector<vector<int>>dist(2 , vector<int>(n+1 , 0));\n        int maxnode = dfs(dist, 1 , 1 , g, -1 , 0 );\n        int maxnode2 = dfs(dist, 0, maxnode , g, -1, 0);\n        int val1 = n;\n        dfs(dist, 1 ,maxnode2 , g, -1 , 0);\n        for(ll i =1 ; i <n+1 ; i++){\n         val1 = min(val1 , max(dist[0][i] , dist[1][i]));\n            cout <<max(dist[0][i] , dist[1][i])<<\" \";\n        }\n        cout <<\"\\n\";\n        vector<vector<int>>dist2(2 , vector<int>(m+1 , 0));\n        maxnode = dfs(dist2, 1 , 1 , g2, -1 , 0 );\n        maxnode2 = dfs(dist2, 0, maxnode , g2, -1, 0);\n        dfs(dist2, 1 ,maxnode2 , g2, -1 , 0);\n        int val2 = m;\n        for(ll i =1 ; i <m+1 ; i++){\n            cout <<  max(dist2[0][i] , dist2[1][i])<<\" \";\n         val2 = min(val2 , max(dist2[0][i] , dist2[1][i]));\n        }\n        \n        sol = max(sol , val1+val2+1);\n        return sol;\n    }\n};",
    "submit_ts": "1719719433",
    "subm_id": "1304441830"
}