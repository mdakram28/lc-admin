{
    "username": "JeffreyLC",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<pair<int, int>> v;\n        int val = nums[0], f = 1;\n        for (int i = 1; i < n; ++i) {\n            if (val != nums[i]) {\n                v.push_back({val, f});\n                val = nums[i];\n                f = 1;\n            } else {\n                ++f;\n            }\n        }\n        v.push_back({val, f});\n\n        n = v.size();\n        vector<vector<int>> dp(n, vector<int>(k + 1, -1));\n        vector<multiset<int>> ms(k + 1);\n        vector<map<int, int>> m(k + 1);\n        for (int j = 0; j < n; ++j) {\n            dp[j][0] = v[j].second;\n            for (int l = 0; l <= k; ++l) {\n                auto it = m[l].find(v[j].first);\n                if (it != m[l].end()) {\n                    dp[j][l] = max(dp[j][l], it->second + v[j].second);\n                }\n                if (l < k) {\n                    if (it != m[l].end()) {\n                        ms[l].erase(ms[l].find(it->second));\n                    }\n                    if (!ms[l].empty()) {\n                        dp[j][l + 1] = max(dp[j][l + 1], *ms[l].rbegin() + v[j].second);\n                    }\n                    if (it != m[l].end()) {\n                        ms[l].insert(it->second);\n                    }\n                }\n            }\n            for (int l = 0; l <= k; ++l) {\n                if (dp[j][l] == -1) continue;\n                auto it = m[l].find(v[j].first);\n                if (it == m[l].end()) {\n                    m[l][v[j].first] = dp[j][l];\n                    ms[l].insert(dp[j][l]);\n                } else if (it->second < dp[j][l]) {\n                    ms[l].erase(ms[l].find(it->second));\n                    it->second = dp[j][l];\n                    ms[l].insert(dp[j][l]);\n                }\n            }\n        }\n        int ans = 0;\n        for (int i = 0; i < n; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                if (dp[i][j] == -1) continue;\n                ans = max(ans, dp[i][j]);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717859963.0
}