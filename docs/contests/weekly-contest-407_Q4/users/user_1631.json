{
    "username": "danchunstone",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n  if (nums.length == 0 || target.length == 0) {\n            return 0L;\n        }\n        int length = nums.length;\n        int[] gap = new int[nums.length];\n        for (int i = 0; i < nums.length; i++) {\n            gap[i] = target[i] - nums[i];\n        }\n        long sum = 0;\n        for (int x : gap) {\n            sum += Math.abs(x);\n        }\n        long step = sum;\n        int left = 0, right = 1;\n        while (sum > 0) {\n            int min = Math.abs(gap[left]);\n            if (gap[left] > 0) {\n                while (right <length && gap[right] > 0) {\n                    min = Math.min(min, gap[right]);\n                    right++;\n                }\n            } else if (gap[left] < 0) {\n                while (right <length && gap[right] < 0) {\n                    min = Math.min(min, Math.abs(gap[right]));\n                    right++;\n                }\n            } else {\n                left++;\n                right = left + 1;\n                continue;\n            }\n            if (right - left > 1) {\n                step -= (long) min * (right - left - 1);\n            }\n            for (int i = left; i < right; i++) {\n                if (gap[i] > 0) {\n                    gap[i] -= min;\n                    sum -= min;\n                } else if (gap[i] < 0) {\n                    gap[i] += min;\n                    sum -= min;\n                }\n            }\n            right = left + 1;\n        }\n        \n        return step;\n    }\n}",
    "submit_ts": "1721532805",
    "subm_id": "548394406"
}