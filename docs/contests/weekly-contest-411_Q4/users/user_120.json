{
    "username": "Chinedu",
    "submission": "class Solution {\n    public long[] countKConstraintSubstrings(String s, int k, int[][] queries) {\n        \n        int [][] mQ = new int [queries.length][3];\n        \n        for (int i = 0; i < queries.length; ++i) {\n            mQ[i] = new int [] {queries[i][0], queries[i][1], i};\n        }\n        \n       \n        \n        int [] minArr = new int [s.length()];\n        \n        int countZero = 0;\n        int countOne = 0;\n        \n        int max = s.length() - 1;\n        \n        for (int i = s.length() - 1; i >= 0; --i) {\n            if (s.charAt(i) == '1')\n                ++countOne;\n            else\n                ++countZero;\n            \n            while (countZero > k && countOne > k) {\n                if (s.charAt(max--) == '1')\n                    --countOne;\n                else\n                    --countZero;\n            }\n            \n            minArr[i] = max;\n        }\n        \n        List<Integer> [] addList = new List [s.length()];\n        for (int i = 0; i < s.length(); ++i) {\n            addList[i] = new ArrayList<>();\n        }\n        \n        for (int i = 0; i < s.length(); ++i) {\n            addList[minArr[i]].add(i);\n        }\n        \n        BIT sumB = new BIT(s.length() + 3);\n        BIT countB = new BIT(s.length() + 3);\n        \n        \n        Arrays.sort(mQ, (a, b) -> a[1] - b[1]);\n        int qIdx = 0;\n        \n        long [] result = new long [queries.length];\n        \n        int [] cArr;\n        int l, r, idx;\n        \n        long length;\n        \n        long val;\n        \n        //System.out.println(Arrays.toString(minArr));\n        \n        for (int i = 0; i < s.length(); ++i) {\n            for (int v : addList[i]) {\n                countB.update(v, 1);\n                sumB.update(v, i);\n            }\n            \n            while (qIdx < mQ.length && mQ[qIdx][1] == i) {\n                cArr = mQ[qIdx++];\n                l = cArr[0];\n                r = cArr[1];\n                idx = cArr[2];\n                \n                //System.out.println(l + \" \" + r);\n                \n                \n                length = r - l + 1;\n                length *= length + 1;\n                length /= 2;\n                \n                //System.out.println(length);\n                \n                val = countB.get(l);\n                \n                //System.out.println(countB.get(l));\n                \n                val *= r;\n                val -= sumB.get(l);\n                \n                //System.out.println(sumB.get(l) + \" \" + val);\n                \n                length -= val;\n                \n                result[idx] = length;\n            }\n        }\n        \n        \n        return result;\n    }\n}\n\nclass BIT {\n\t\n\tlong [] arr;\n\t\n\tBIT(int n){\n\t\tarr = new long [n + 1];\n\t}\n\t\n\tvoid update (int idx, long val) {\n        idx += 1;\n\t\tfor (int i = idx; i > 0; i -= (i & -i)) {\n\t\t\tarr[i] += val;\n\t\t}\n\t}\n\t\n\tlong get(int idx) {\n        idx += 1;\n\t\tlong result = 0;\n\t\t\n\t\tfor (int i = idx; i < arr.length; i += (i & -i)) {\n\t\t\tresult += arr[i];\n\t\t}\n\t\t\n\t\treturn result;\n\t}\n}",
    "submit_ts": "1723953010",
    "subm_id": "1359810081"
}