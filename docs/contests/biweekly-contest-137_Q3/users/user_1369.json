{
    "username": "Shubhanker Tiwari",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    ll catalin[101][102][102];  // Replaced dp with catalin\n    \n    vector<vector<int>> topElements;  // Changed temp to topElements\n    \n    ll findMaxSum(int idx, int firstIdx, int secondIdx, vector<vector<int>>& matrix) {\n        int rows = matrix.size(), cols = matrix[0].size();\n        ll result = LLONG_MIN;\n        \n        if (idx == rows - 1) {\n            if (firstIdx == -1 || secondIdx == -1) return -1e14;\n            for (int i = 0; i < 3; i++) {\n                if (firstIdx != topElements[idx][i] && secondIdx != topElements[idx][i]) {\n                    return catalin[idx][firstIdx + 1][secondIdx + 1] = matrix[idx][topElements[idx][i]];\n                }\n            }\n        }\n        \n        if (catalin[idx][firstIdx + 1][secondIdx + 1] != 1e14) \n            return catalin[idx][firstIdx + 1][secondIdx + 1];\n        \n        if (firstIdx != -1 && secondIdx != -1) {\n            for (int i = 0; i < 3; i++) {\n                if (firstIdx != topElements[idx][i] && secondIdx != topElements[idx][i]) {\n                    result = max(result, 1LL * matrix[idx][topElements[idx][i]]);\n                    break;\n                }\n            }\n            return catalin[idx][firstIdx + 1][secondIdx + 1] = max(result, findMaxSum(idx + 1, firstIdx, secondIdx, matrix));\n        } \n        \n        if (firstIdx != -1) {\n            for (int i = 0; i < 3; i++) {\n                if (firstIdx != topElements[idx][i]) {\n                    result = max(result, matrix[idx][topElements[idx][i]] + findMaxSum(idx + 1, firstIdx, topElements[idx][i], matrix));\n                }\n            }\n            result = max(result, findMaxSum(idx + 1, firstIdx, secondIdx, matrix));\n            return catalin[idx][firstIdx + 1][secondIdx + 1] = result;\n        }\n        \n        for (int i = 0; i < 3; i++) {\n            if (firstIdx != topElements[idx][i]) {\n                result = max(result, matrix[idx][topElements[idx][i]] + findMaxSum(idx + 1, topElements[idx][i], secondIdx, matrix));\n            }\n        }\n        \n        result = max(result, findMaxSum(idx + 1, firstIdx, secondIdx, matrix));\n        return catalin[idx][firstIdx + 1][secondIdx + 1] = result;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& matrix) {\n        int rows = matrix.size(), cols = matrix[0].size();\n        \n        topElements.resize(rows, vector<int>(3));  // Resized and initialized topElements\n        \n        for (int r = 0; r < rows; r++) {\n            vector<pair<int, int>> colValues;\n            for (int c = 0; c < cols; c++) {\n                colValues.push_back({matrix[r][c], c});\n            }\n            sort(colValues.rbegin(), colValues.rend());\n            for (int i = 0; i < 3; i++) {\n                topElements[r][i] = colValues[i].second;\n            }\n        }\n        \n        for (int i = 0; i < 101; i++) {\n            for (int j = 0; j < 102; j++) {\n                for (int k = 0; k < 102; k++) {\n                    catalin[i][j][k] = 1e14;  // Initialized catalin with a large number\n                }\n            }\n        }\n        \n        return findMaxSum(0, -1, -1, matrix);  // Start recursive computation\n    }\n};\n",
    "submit_ts": "1723910160",
    "subm_id": "1359219587"
}