{
    "username": "neelimagoogly",
    "submission": "class Solution {\n\npublic:\n    int breadthfs(vector<vector<int>> &graph, int start, int target1, int target2, int nodes) {\n    queue<int> q;\n    vector<int> vis(nodes + 4, 0);\n    q.push(start);\n    vis[start] = 1;\n    \n    while (!q.empty()) {\n        int u = q.front();\n        q.pop();\n        for (int v : graph[u]) {\n            if (!vis[v]) {\n                q.push(v);\n                vis[v] = 1;\n            }\n        }\n    }\n    return vis[target1] || vis[target2];\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         vector<pair<pair<int, int>, int>> circle(circles2.size());\n         vector<vector<int>> graphh(circles2.size() + 4);\n        int n=circles2.size();\n        \n        for (int i = 0; i < n; ++i) {\n            circle[i].first.first=circles2[i][0];\n            circle[i].first.second=circles2[i][1];\n            circle[i].second=circles2[i][2];\n        }\n        \n        \n        \n         for (int i = 0; i < n; ++i) {\n             \n            if (circle[i].first.first <= circle[i].second) {\n                graphh[n].push_back(i);\n                graphh[i].push_back(n);\n            }\n            if (X - circle[i].first.first <= circle[i].second) {\n                graphh[n + 2].push_back(i);\n                graphh[i].push_back(n + 2);\n            }\n            if (circle[i].first.second <= circle[i].second) {\n                graphh[n + 1].push_back(i);\n                graphh[i].push_back(n + 1);\n            }\n            if (Y - circle[i].first.second <= circle[i].second) {\n                graphh[n + 3].push_back(i);\n                graphh[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double distance = sqrt(pow(circle[i].first.first - circle[j].first.first, 2) +\n                                       pow(circle[i].first.second - circle[j].first.second, 2));\n                int radiusum = circle[i].second + circle[j].second;\n                if (radiusum >= distance) {\n                    graphh[i].push_back(j);\n                    graphh[j].push_back(i);\n                }\n            }\n        }\n        \n        int bl = 0;\nbl = max(bl, breadthfs(graphh, n, n + 1, n + 2, n + 4)); // Check for bottom-left corner\n    bl = max(bl, breadthfs(graphh, n + 3, n + 2, n + 1, n + 4)); // Check for top-right corner\n        if (bl){return false;}\n        return true;\n       \n        \n       \n    }\n};",
    "submit_ts": "1722137369",
    "subm_id": "1335761800"
}