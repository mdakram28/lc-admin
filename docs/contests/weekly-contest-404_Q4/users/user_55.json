{
    "username": "hxu10",
    "submission": "def find_maxd(edges):\n\n    n = len(edges) + 1\n    neigh = [[] for _ in range(n)]\n    for [u,v] in edges:\n        neigh[u].append(v)\n        neigh[v].append(u)\n \n    queue = deque()\n    children = [[] for _ in range(n)]\n \n    parent = [-2]*n\n    parent[0] = -1\n    queue.append(0)\n \n \n    seq = []\n \n    while queue:\n        index = queue.popleft()\n        seq.append(index)\n        for nextindex in neigh[index]:\n            if parent[nextindex] > -2: continue \n            parent[nextindex] = index \n            children[index].append(nextindex)\n            queue.append(nextindex)\n            \n \n \n#    print(1)\n    \n    maxdepth = [[] for _ in range(n)]\n    maxparent = [0]*n\n \n \n    for index in seq[::-1]:\n        if len(children[index])==0:  \n            heapq.heappush(maxdepth[index],0)\n            continue \n        for nextindex in children[index]:\n            heapq.heappush(maxdepth[index], maxdepth[nextindex][-1] + 1)\n            if len(maxdepth[index]) > 2:  heapq.heappop(maxdepth[index])\n \n \n \n    ans = [0]*n\n    ans[0] = maxdepth[0][-1]\n    maxparent = [0]*n\n    \n    \n    D = 0\n    \n    \n    for ele in maxdepth:\n        D = max(D, sum(ele))\n        \n    \n    \n\n    \n \n \n    for index in seq[1:]:\n        p = parent[index]\n        maxparent[index] = maxparent[p] + 1\n        if len(children[p])==1:\n            ans[index] = max(maxparent[index], maxdepth[index][-1])\n            continue \n \n        if maxdepth[index][-1] == maxdepth[p][-1] - 1:\n            maxparent[index] = max(maxparent[index], maxdepth[p][0] + 1)\n        else:\n            maxparent[index] = max(maxparent[index], maxdepth[p][-1] + 1)\n \n        ans[index] = max(maxparent[index], maxdepth[index][-1] )\n    \n    return min(ans),D\n\n\n    \n\n\n\nclass Solution(object):\n    \n    \n    def minimumDiameterAfterMerge(self, edges1, edges2):\n        \"\"\"\n        :type edges1: List[List[int]]\n        :type edges2: List[List[int]]\n        :rtype: int\n        \"\"\"\n        \n        ans1,D1 = find_maxd(edges1)\n        ans2,D2 = find_maxd(edges2)\n        \n        \n        \n        \n        \n        return max(ans1+ans2+1, D1, D2)\n\n",
    "submit_ts": 1719716554.0
}