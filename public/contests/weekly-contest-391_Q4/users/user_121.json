{
    "username": "yaoyi92",
    "submission": "class Solution {\n    // modified from https://www.geeksforgeeks.org/maximum-manhattan-distance-between-a-distinct-pair-from-n-coordinates/\n    // Function to calculate the maximum\n    // Manhattan distance\n    vector<int> MaxDist(vector<pair<int, int> >& A, int N)\n    {\n        // Variables to track running extrema\n        int minsum, maxsum, mindiff, maxdiff;\n        int minsum_idx, maxsum_idx, mindiff_idx, maxdiff_idx;\n     \n        minsum = maxsum = A[0].first + A[0].second;\n        mindiff = maxdiff = A[0].first - A[0].second;\n        minsum_idx = maxsum_idx = mindiff_idx = maxdiff_idx = 0;\n        for (int i = 1; i < N; i++) {\n            int sum = A[i].first + A[i].second;\n            int diff = A[i].first - A[i].second;\n            if (sum < minsum) {\n                minsum = sum;\n                minsum_idx = i;\n            }\n            else if (sum > maxsum) {\n                maxsum = sum;\n                maxsum_idx = i;\n            }\n            if (diff < mindiff) {\n                mindiff = diff;\n                mindiff_idx = i;\n            }\n            else if (diff > maxdiff) {\n                maxdiff = diff;\n                maxdiff_idx = i;\n            }\n        }\n        \n        int maximum = max(maxsum - minsum, maxdiff - mindiff);\n        int i = -1;\n        int j = -1;\n        if (maxsum - minsum >= maxdiff - mindiff) {\n            //cout << maxsum_idx << \" \" << minsum_idx << endl;\n            i = maxsum_idx;\n            j = minsum_idx;\n        } else {\n            //cout << maxdiff_idx << \" \" << mindiff_idx << endl;\n            i = maxdiff_idx;\n            j = mindiff_idx;\n        }\n     \n        //cout << maximum << endl;\n        return vector<int>{i, j, maximum};\n    }\n \n//// Driver Code\n//int main()\n//{\n//    int N = 3;\n// \n//    // Given Co-ordinates\n//    vector<pair<int, int> > A\n//        = { { 1, 2 }, { 2, 3 }, { 3, 4 } };\n// \n//    // Function Call\n//    MaxDist(A, N);\n// \n//    return 0;\n//}\n\npublic:\n    int minimumDistance(vector<vector<int>>& points) {\n        int n = points.size();\n        vector<pair<int,int>> pointsPairs;\n        for (vector<int>& point: points) pointsPairs.push_back({point[0],point[1]});\n        vector<int> ret1 = MaxDist(pointsPairs, n);\n        int i = ret1[0];\n        int j = ret1[1];\n        vector<pair<int,int>> pointsPairs1;\n        vector<pair<int,int>> pointsPairs2;\n        //for (vector<int>& point: points) {\n        for (int k = 0; k < n; k++) {\n          if (k == i) continue;\n          pointsPairs1.push_back({points[k][0],points[k][1]});\n        }\n        for (int k = 0; k < n; k++) {\n          if (k == j) continue;\n          pointsPairs2.push_back({points[k][0],points[k][1]});\n        }\n        vector<int> ret2 = MaxDist(pointsPairs1, n-1);\n        vector<int> ret3 = MaxDist(pointsPairs2, n-1);\n        return min(ret2[2], ret3[2]);\n        \n    }\n};"
}