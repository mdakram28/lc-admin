{
    "username": "parascoding",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        seg = new int[n << 2];\n        lazy = new int[n << 2];\n        int ans[] = new int[queries.length];\n        int dis = n - 1;\n        int ind = 0;\n        for(int q[] : queries){\n            if(q[0] != q[1] - 1){\n                int sum = find(0, n - 1, q[0] + 1, q[1] - 1, 0);\n                dis += sum;\n                dis -= q[1] - q[0] - 1;\n                add(0, n - 1, q[0] + 1, q[1] - 1, 0);\n            }\n            ans[ind++] = dis;\n        }\n        return ans;\n    }\n    void push(int low, int high, int node){\n        if(lazy[node] == 0)\n            return;\n        seg[node] = (high - low + 1);\n        if(low != high){\n            lazy[(node << 1) + 1] = 1;\n            lazy[(node << 1) + 2] = 1;\n        }\n        lazy[node] = 0;\n    }\n    int find(int low, int high, int l, int r, int node){\n        push(low, high, node);\n        if(low > r || high < l)\n            return 0;\n        if(low >= l && high <= r){\n            return seg[node];\n        }\n        int mid = (low + high) >> 1;\n        \n        return find(low, mid, l, r, (node << 1) + 1) +\n                find(mid + 1, high, l, r, (node << 1) + 2);\n    }\n    void add(int low, int high, int l, int r,int node){\n        push(low, high, node);\n        if(low > r || high < l)\n            return;\n        if(low >= l && high <= r){\n            lazy[node] = (1);\n            push(low, high, node);\n            return;\n        }\n        int mid = (low + high) >> 1;\n        add(low, mid, l, r, (node << 1) + 1);\n        add(mid + 1, high, l, r, (node << 1) + 2);\n        seg[node] = seg[(node << 1) + 1] + seg[(node << 1) + 2];\n    }\n    void update(int low, int high, int ind, int node){\n        if(low == high){\n            seg[node] = low;\n            System.out.println(low+\" \"+node);\n            return;\n        }\n        int mid = (low + high) >> 1;\n        if(ind <= mid)\n            update(low, mid, ind, (node << 1) + 1);\n        else\n            update(mid + 1, high, ind, (node << 1) + 2);\n        \n    }\n    int seg[];\n    int lazy[];\n}",
    "submit_ts": "1722742804",
    "subm_id": "1343777536"
}