{
    "username": "ridam25",
    "submission": "class Solution {\n    public int minChanges(int[] nums, int k) {\n        int n = nums.length ;\n        int[][]intervals = new int[n/2][2];\n        HashMap<Integer, Integer> map = new HashMap<>();\n        int lo = 0 ;\n        int hi = n - 1 ;\n        int i = 0 ;\n        int ans = Integer.MAX_VALUE ;\n        while(lo < hi){\n            int uper = Math.max(k - Math.min(nums[lo], nums[hi]), Math.max(nums[lo], nums[hi]));\n            int lower = Math.min(Math.min(nums[lo], nums[hi]), Math.max(0, Math.max(nums[lo], nums[hi]) - k));\n            int[]barr = {lower, uper};\n            // System.out.println(nums[lo] + \"-->\" + nums[hi] + \"-->\" + lower + \"-->\" + uper);\n            intervals[i++] = barr ;\n            map.put(Math.abs(nums[lo] - nums[hi]), map.getOrDefault(Math.abs(nums[lo] - nums[hi]), 0) + 1);\n            lo += 1 ;\n            hi -= 1 ;\n        }\n        int[] startTimes = new int[intervals.length];\n        int[] endTimes = new int[intervals.length];\n\n        for (i = 0; i < intervals.length; i++) {\n            startTimes[i] = intervals[i][0];\n            endTimes[i] = intervals[i][1];\n        }\n\n        Arrays.sort(startTimes);\n        Arrays.sort(endTimes);\n        for(int key : map.keySet()){\n            int val = map.get(key);\n            int oneOperations = countLessThanOrEqual(startTimes, key) - countLessThan(endTimes, key) ;\n            int twoOperations = ((n/2) - (oneOperations)) * 2 ;\n            ans = Math.min(ans, oneOperations + twoOperations - val);\n        }\n        return ans ;\n    }\n    public int countLessThanOrEqual(int[] times, int x) {\n        int left = 0, right = times.length;\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (times[mid] <= x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n    public int countLessThan(int[] times, int x) {\n        int left = 0, right = times.length;\n        while (left < right) {\n            int mid = (left + right) / 2;\n            if (times[mid] < x) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return left;\n    }\n}",
    "submit_ts": "1721490102",
    "subm_id": "1327473059"
}