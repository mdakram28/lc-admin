{
    "username": "prahlad_007",
    "submission": "#include <vector>\n#include <iostream>\n#include <map>\n#include <algorithm>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        return calculateMinChanges(nums, k);\n    }\n\nprivate:\n    int calculateMinChanges(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans = n;\n        vector<int> temp;\n        map<int, vector<int>> mp;\n\n        for (int i = 0; i < n / 2; i++) {\n            int x = nums[i];\n            int y = nums[n - i - 1];\n            int dif = abs(y - x);\n            int maxi1 = max(x, y);\n            int maxi2 = max(k - x, k - y);\n            int maxi = max(maxi1, maxi2);\n            mp[dif].push_back(maxi);\n            temp.push_back(maxi);\n        }\n\n        sort(temp.begin(), temp.end());\n\n        for (auto &pair : mp) {\n            int it = pair.first;\n            int ren = customLowerBound(temp, it) - temp.begin();\n            ren = ren * 2 + (nums.size() / 2) - ren;\n            for (auto &z : pair.second) {\n                if (z < it) {\n                    ren -= 2;\n                } else {\n                    ren -= 1;\n                }\n            }\n            ans = min(ans, ren);\n        }\n\n        return ans;\n    }\n\n    vector<int>::iterator customLowerBound(vector<int>& arr, int value) {\n        int left = 0;\n        int right = arr.size();\n        while (left < right) {\n            int mid = left + (right - left) / 2;\n            if (arr[mid] < value) {\n                left = mid + 1;\n            } else {\n                right = mid;\n            }\n        }\n        return arr.begin() + left;\n    }\n};\n\n\n",
    "submit_ts": "1721490196",
    "subm_id": "1327475815"
}