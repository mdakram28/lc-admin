{
    "username": "ynnekuw",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        word_d = {}\n        for word, cost in zip(words, costs):\n            if word not in target:\n                continue\n            if word not in word_d or word_d[word] > cost:\n                word_d[word] = cost\n        \n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0  # No cost to form an empty string\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # If current position is not reachable, skip it\n            for word, cost in word_d.items():\n                if target[i:i+len(word)] == word:\n                    dp[i+len(word)] = min(dp[i+len(word)], dp[i] + cost)\n                    \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720321443",
    "subm_id": "1312323011"
}