{
    "username": "Huskyee",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        d = {}\n\n        for i, word in enumerate(words):\n            if word not in d:\n                d[word] = costs[i]\n            else:\n                d[word] = min(d[word], costs[i])\n        words = list(d.keys())\n        costs = list(d.values())\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            for j in range(len(words)):\n                word = words[j]\n                cost = costs[j]\n                if target.startswith(word, i):\n                    dp[i + len(word)] = min(dp[i + len(word)], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720323950",
    "subm_id": "1312387981"
}