{
    "username": "Captain04",
    "submission": "\n\nclass SegmentTree {\npublic:\n    vector<int> tree;\n    int n;\n\n    SegmentTree(int size) : n(size) {\n        tree.resize(4 * n);\n    }\n\n    void build(const vector<int>& peaks, int v, int tl, int tr) {\n        if (tl == tr) {\n            tree[v] = peaks[tl];\n        } else {\n            int tm = (tl + tr) / 2;\n            build(peaks, 2 * v, tl, tm);\n            build(peaks, 2 * v + 1, tm + 1, tr);\n            tree[v] = tree[2 * v] + tree[2 * v + 1];\n        }\n    }\n\n    int sum(int v, int tl, int tr, int l, int r) {\n        if (l > r) return 0;\n        if (l == tl && r == tr) return tree[v];\n        int tm = (tl + tr) / 2;\n        return sum(2 * v, tl, tm, l, min(r, tm)) +\n               sum(2 * v + 1, tm + 1, tr, max(l, tm + 1), r);\n    }\n\n    void update(int v, int tl, int tr, int pos, int new_val) {\n        if (tl == tr) {\n            tree[v] = new_val;\n        } else {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm) update(2 * v, tl, tm, pos, new_val);\n            else update(2 * v + 1, tm + 1, tr, pos, new_val);\n            tree[v] = tree[2 * v] + tree[2 * v + 1];\n        }\n    }\n};\n\n\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n     int n = nums.size();\n            vector<int> peaks(n, 0);  // To store peak information\n\n            auto isPeak = [&](int i) {\n                if (i <= 0 || i >= n - 1) return false;\n                return nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n            };\n\n            for (int i = 1; i < n - 1; ++i) {\n                if (isPeak(i)) peaks[i] = 1;\n            }\n\n            SegmentTree segTree(n);\n            segTree.build(peaks, 1, 0, n - 1);\n\n            vector<int> result;\n            for (auto& query : queries) {\n                if (query[0] == 1) {\n                    int li = query[1], ri = query[2];\n                    result.push_back(segTree.sum(1, 0, n - 1, li + 1, ri - 1));\n                } else if (query[0] == 2) {\n                    int index = query[1], val = query[2];\n                    nums[index] = val;\n\n                    for (int i = index - 1; i <= index + 1; ++i) {\n                        if (i > 0 && i < n - 1) {\n                            segTree.update(1, 0, n - 1, i, isPeak(i) ? 1 : 0);\n                        }\n                    }\n                }\n            }\n\n            return result;\n    }\n};",
    "submit_ts": 1718506819.0
}