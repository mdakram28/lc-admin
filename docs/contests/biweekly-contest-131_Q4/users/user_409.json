{
    "username": "qqwrv",
    "submission": "const int N = 5e4 + 5;\n// const int N = 15;\n\nstruct node {\n\n    int mx= 1;\n    int lmx= 1;\n    int rmx= 1;\n    int len = 1;\n    bool l = true;\n    bool r = true;\n\n    friend node operator+(const node& lhs, const node& rhs) {\n        node res;\n\n        res.len = lhs.len + rhs.len;\n\n        res.lmx = lhs.lmx;\n        if (lhs.lmx == lhs.len && lhs.r && rhs.l) res.lmx = lhs.len + rhs.lmx;\n\n        res.rmx = rhs.rmx;\n        if (rhs.rmx == rhs.len && lhs.r && rhs.l) res.rmx = rhs.len + lhs.rmx;\n\n        res.l = lhs.l;\n        res.r = rhs.r;\n\n        res.mx = std::max({res.lmx, res.rmx, lhs.mx, rhs.mx});\n        if (lhs.r && rhs.l) {\n            res.mx = std::max(res.mx, lhs.rmx + rhs.lmx);\n        }\n\n        // std::cout << \"LHS \" << lhs.to_string() << std::endl;\n        // std::cout << \"RHS \" << rhs.to_string() << std::endl;\n        // std::cout << \"RES \" << res.to_string() << std::endl;\n\n        return res;\n    }\n\n    std::string to_string() const {\n        std::stringstream ss;\n        ss << lmx << \" \" << rmx << \" \" << mx << \" \" << len << \" \" << l << \" \" << r;\n        return ss.str();\n    }\n} nd[(N + 5) << 2];\n\nvoid build(int x, int l, int r) {\n    if (l == r) {\n        nd[x].lmx = nd[x].rmx = nd[x].mx = nd[x].len = 1;\n        nd[x].l = nd[x].r = true;\n        return;\n    }\n\n    int mid = (l + r) >> 1;\n    build(x << 1, l, mid);\n    build(x << 1 | 1, mid + 1, r);\n    nd[x] = nd[x << 1] + nd[x << 1 | 1];\n}\n\nvoid update(int x, int l, int r, int p, int t, bool y) {\n    if (l == r) {\n        if (t == 0) nd[x].r = y;\n        else nd[x].l = y;\n        return;\n    }\n\n    int mid = (l + r) >> 1;\n    if (p <= mid) update(x << 1, l, mid, p, t, y);\n    else update(x << 1 | 1, mid + 1, r, p, t, y);\n    nd[x] = nd[x << 1] + nd[x << 1 | 1];\n    // std::cout << \"U \" << l << \" \" << r << \" \" << nd[x].mx << std::endl;\n}\n\nnode query(int x, int l, int r, int L, int R) {\n    if (l == L && r == R) {\n        return nd[x];\n    }\n    int mid = (l + r) >> 1;\n    if (R <= mid) return query(x << 1, l, mid, L, R);\n    if (L > mid) return query(x << 1 | 1, mid + 1, r, L, R);\n    return query(x << 1, l, mid, L, mid) + query(x << 1 | 1, mid + 1, r, mid + 1, R);\n}\n\nvoid debug(int x, int l, int r) {\n    if (l == r) {\n        std::cout << nd[x].mx << \" \";\n        if (nd[x].r == false) std::cout << \"| \";\n        return;\n    }\n\n    int mid = (l + r) >> 1;\n    debug(x << 1, l, mid);\n    debug(x << 1 | 1, mid + 1, r);\n}\n\nvoid debug() {\n    std::cout << \"DEBUG \";\n    debug(1, 0, N);\n    std::cout << std::endl;\n}\n\nstruct Fuck {\n    Fuck() {\n        build(1, 0, N);\n    }\n} fuck;\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& q) {\n        // build(1, 0, N);\n        // debug();\n        std::vector<bool> ans;\n        ans.reserve(q.size());\n        for (auto v : q) {\n            if (v[0] == 1) {\n                // std::cout << \"UPDATE \" << v[1] << std::endl;\n                update(1, 0, N, v[1] - 1, 0, false);\n                update(1, 0, N, v[1], 1, false);\n                // debug();\n            } else {\n                // std::cout << \"QUERY \" << v[1] << \" \" << v[2] << std::endl;\n                auto r = query(1, 0, N, 0, v[1] - 1);\n                // std::cout << r.mx << std::endl;\n                ans.push_back(r.mx >= v[2]);\n            }\n        }\n\n        for (auto v : q) {\n            if (v[0] == 1) {\n                // std::cout << \"UPDATE \" << v[1] << std::endl;\n                update(1, 0, N, v[1] - 1, 0, true);\n                update(1, 0, N, v[1], 1, true);\n                // debug();\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1716652160.0
}