{
    "username": "yashwanth73",
    "submission": "class Solution {\n    public boolean canReachCorner(int x, int y, int[][] circles) {\n        int n = circles.length;\n        int[] parent = new int[n];\n        for(int i=0;i<n;i++)\n            parent[i] = i;\n        for(int i=0;i<n;i++) {\n            for(int j=i+1;j<n;j++) {\n                if(areOverlapping(i,j,circles)) {\n                    int parent_i = findUltimateParent(i,parent);\n                    int parent_j = findUltimateParent(j,parent);\n                    parent[parent_i] = parent_j;\n                }\n            }\n        }\n        for(int i=0;i<n;i++)\n            parent[i] = findUltimateParent(i, parent);\n        // for(int i=0;i<n;i++)\n        //     System.out.println(parent[i]);\n        HashMap<Integer,HashSet<Integer>> hm = new HashMap<>();\n        for(int i=0;i<n;i++) {\n            if(!hm.containsKey(parent[i]))\n                hm.put(parent[i], new HashSet<>());\n            if(circles[i][2]>=circles[i][0])\n            {\n\n                hm.get(parent[i]).add(1);\n            }\n            if(circles[i][2]>=y-circles[i][1])\n            {\n\n                hm.get(parent[i]).add(2);\n            }\n            if(circles[i][2]>=x-circles[i][0])\n                hm.get(parent[i]).add(3);\n            if(circles[i][2]>=circles[i][1])\n                hm.get(parent[i]).add(4);\n        }\n\n        for(int key : hm.keySet()) {\n            // System.out.println(hm.get(key).size());\n            if(hm.get(key).size()>=3)\n                return false;\n            if(hm.get(key).size()<=1)\n                continue;\n            HashSet<Integer> hs = hm.get(key);\n            if((hs.contains(1) && hs.contains(2)) || (hs.contains(4) && hs.contains(3)))\n                continue;\n            else\n                return false;\n        }\n        return true;\n    }\n\n\n    private int findUltimateParent(int u, int[] parent) {\n        if(u == parent[u])\n            return u;\n        return parent[u] = findUltimateParent(parent[u], parent);\n    }\n\n    private boolean areOverlapping(int i, int j, int[][] circles) {\n        long xsquare = (circles[i][0] - circles[j][0]) * (circles[i][0] - circles[j][0]);\n        long ysquare = (circles[i][1] - circles[j][1]) * (circles[i][1] - circles[j][1]);\n        double distance = Math.sqrt(ysquare+xsquare);\n        return distance<=(double)circles[i][2]+circles[j][2];\n    }\n}",
    "submit_ts": "1722137679",
    "subm_id": "1335770626"
}