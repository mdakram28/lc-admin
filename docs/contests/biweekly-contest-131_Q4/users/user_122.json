{
    "username": "onlyblues",
    "submission": "class Solution {\npublic:\n    struct Node {\n        int l, r, mx;\n    };\n    \n    vector<bool> getResults(vector<vector<int>>& queries) {\n        int m = min<int>(50000, 3 * queries.size()) + 2;\n        vector<Node> tr(m + 1 << 2);\n        set<int> st({0, m});\n        function<void(int, int, int)> build = [&](int u, int l, int r) {\n            tr[u] = {l, r, 0};\n            if (l != r) {\n                int mid = l + r >> 1;\n                build(u << 1, l, mid);\n                build(u << 1 | 1, mid + 1, r);\n            }\n        };\n        function<void(int, int, int)> modify = [&](int u, int x, int c) {\n            if (tr[u].l == tr[u].r) {\n                tr[u].mx = c;\n            }\n            else {\n                if (x <= tr[u].l + tr[u].r >> 1) modify(u << 1, x, c);\n                else modify(u << 1 | 1, x, c);\n                tr[u].mx = max(tr[u << 1].mx, tr[u << 1 | 1].mx);\n            }\n        };\n        function<int(int, int, int)> query = [&](int u, int l, int r) {\n            if (tr[u].l >= l && tr[u].r <= r) return tr[u].mx;\n            int mid = tr[u].l + tr[u].r >> 1;\n            if (r <= mid) return query(u << 1, l, r);\n            if (l >= mid + 1) return query(u << 1 | 1, l, r);\n            return max(query(u << 1, l, r), query(u << 1 | 1, l, r));\n        };\n        build(1, 0, m);\n        vector<bool> ans;\n        for (auto &p : queries) {\n            p[1]++;\n            if (p[0] == 1) {\n                auto it = st.upper_bound(p[1]);\n                modify(1, *it, min(m, *it) - p[1]);\n                modify(1, p[1], p[1] - max(1, *prev(it)));\n                st.insert(p[1]);\n            }\n            else {\n                int x = max(1, *prev(st.lower_bound(p[1]))), mx = max(query(1, 0, x), p[1] - x);\n                ans.push_back(p[2] <= mx);\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1716649957",
    "subm_id": "534768839"
}