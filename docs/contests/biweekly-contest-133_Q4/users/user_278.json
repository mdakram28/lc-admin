{
    "username": "pradeepredt",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1e9 + 7;\n        \n        // DP table to store the number of ways to arrange the first k numbers with exactly c inversions\n        vector<vector<int>> dp(n + 1, vector<int>(401, 0));\n        \n        dp[0][0] = 1; // Base case: there's one way to arrange an empty array with zero inversions\n        \n        // Fill the DP table\n        for (int k = 1; k <= n; ++k) {\n            for (int c = 0; c <= 400; ++c) {\n                for (int j = 0; j < k; ++j) {\n                    if (c - j >= 0) {\n                        dp[k][c] = (dp[k][c] + dp[k-1][c-j]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        // Create a table to store valid inversion counts based on the requirements\n        vector<vector<bool>> valid(n + 1, vector<bool>(401, true));\n        \n        for (auto& req : requirements) {\n            int end = req[0] + 1;\n            int cnt = req[1];\n            for (int c = 0; c <= 400; ++c) {\n                valid[end][c] = false;\n            }\n            valid[end][cnt] = true;\n        }\n        \n        // DP table considering the validity of each state based on the requirements\n        vector<vector<int>> dp_valid(n + 1, vector<int>(401, 0));\n        dp_valid[0][0] = 1;\n        \n        // Fill the DP table considering valid states\n        for (int k = 1; k <= n; ++k) {\n            for (int c = 0; c <= 400; ++c) {\n                if (!valid[k][c]) continue;\n                for (int j = 0; j < k; ++j) {\n                    if (c - j >= 0) {\n                        dp_valid[k][c] = (dp_valid[k][c] + dp_valid[k-1][c-j]) % MOD;\n                    }\n                }\n            }\n        }\n        \n        // Find the specific requirement for the entire array\n        int endReq = 0;\n        for (auto& req : requirements) {\n            if (req[0] + 1 == n) {\n                endReq = req[1];\n                break;\n            }\n        }\n        \n        return dp_valid[n][endReq];\n    }\n};\n",
    "submit_ts": 1719069737.0
}