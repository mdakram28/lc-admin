{
    "username": "likith001sunki",
    "submission": "typedef long long ll;\nclass Solution {\npublic:\n    int bfs(const std::vector<std::vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        std::queue<int> q;\n        std::vector<int> visited(nodes + 4, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, std::vector<std::vector<int>>& circles2) {\n        int n = circles2.size();\n        std::vector<std::vector<int>> adj(n + 4);\n\n        std::vector<std::pair<std::pair<int, int>, int>> circles;\n        for (const auto& c : circles2) {\n            circles.emplace_back(std::make_pair(std::make_pair(c[0], c[1]), c[2]));\n        }\n\n        for (int i = 0; i < n; ++i) {\n            int x = circles[i].first.first;\n            int y = circles[i].first.second;\n            int r = circles[i].second;\n            if (x <= r) {\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if (X - x <= r) {\n                adj[n + 2].push_back(i);\n                adj[i].push_back(n + 2);\n            }\n            if (y <= r) {\n                adj[n + 1].push_back(i);\n                adj[i].push_back(n + 1);\n            }\n            if (Y - y <= r) {\n                adj[n + 3].push_back(i);\n                adj[i].push_back(n + 3);\n            }\n\n            for (int j = i + 1; j < n; ++j) {\n                int x2 = circles[j].first.first;\n                int y2 = circles[j].first.second;\n                int r2 = circles[j].second;\n\n              \n                int dx = x - x2;\n                int dy = y - y2;\n                ll  d = dx * 1LL* dx + dy * 1LL * dy;\n                ll  rs = r + r2;\n                \n                if (rs *1LL* rs >= d) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n\n        int flag = 0;\n        flag = std::max(flag, bfs(adj, n, n + 1, n + 2, n + 4));\n        flag = std::max(flag, bfs(adj, n + 3, n + 2, n + 1, n + 4));\n\n        return !flag;\n    }\n};",
    "submit_ts": "1722138444",
    "subm_id": "1335790934"
}