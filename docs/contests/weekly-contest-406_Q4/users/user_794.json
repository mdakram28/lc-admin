{
    "username": "nikhil___454",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a vector to store both horizontal and vertical cuts with their types\n        vector<pair<int, int>> cuts;\n\n        // Add horizontal cuts to the vector with type 1\n        for(int i = 0; i < m - 1; ++i) {\n            cuts.push_back({horizontalCut[i], 1});\n        }\n\n        // Add vertical cuts to the vector with type 0\n        for(int i = 0; i < n - 1; ++i) {\n            cuts.push_back({verticalCut[i], 0});\n        }\n\n        // Sort the vector by the cut cost in descending order\n        sort(cuts.begin(), cuts.end(), [](const pair<int, int>& a, const pair<int, int>& b) {\n            return a.first > b.first;\n        });\n\n        long long rowf = 1;\n        long long colf = 1;\n        long long ans = 0;\n\n        // Process the sorted cuts\n        for(const auto& cut : cuts) {\n            if(cut.second == 1) {\n                ans += colf * cut.first;\n                rowf++;\n            } else {\n                ans += rowf * cut.first;\n                colf++;\n            }\n        }\n\n        return ans;\n    }\n};\n",
    "submit_ts": "1720925544",
    "subm_id": "1320258272"
}