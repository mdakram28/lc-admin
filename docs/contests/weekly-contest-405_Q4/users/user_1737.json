{
    "username": "JtK582",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        TrieNode* children[26];\n        vector<pair<int, int>> e;\n        TrieNode() {\n            fill(begin(children), end(children), nullptr);\n        }\n    };\n\n    TrieNode* getNode() {\n        return new TrieNode();\n    }\n\n    void insertWord(TrieNode* root, const string& word, int index, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            int charIndex = c - 'a';\n            if (!node->children[charIndex]) {\n                node->children[charIndex] = getNode();\n            }\n            node = node->children[charIndex];\n        }\n        node->e.emplace_back(index, cost);\n    }\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        TrieNode* root = getNode();\n        for (int i = 0; i < words.size(); ++i) {\n            insertWord(root, words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n\n            TrieNode* node = root;\n            for (int j = i; j < n; ++j) {\n                int charIndex = target[j] - 'a';\n                if (!node->children[charIndex]) break;\n                node = node->children[charIndex];\n                for (auto& p : node->e) {\n                    int word_len = words[p.first].size();\n                    if (i + word_len <= n) {\n                        dp[i + word_len] = min(dp[i + word_len], dp[i] + p.second);\n                    }\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720324038",
    "subm_id": "1312390095"
}