{
    "username": "tiger2005",
    "submission": "class Solution {\npublic:\n  vector<int> numberOfAlternatingGroups(vector<int>& colors, vector<vector<int>>& queries) {\n    vector<int> ans;\n    vector<int> c = colors;\n    int n = c.size();\n\n    vector<int> bit1(n + 1), bit2(n + 1);\n    auto mdf = [&] (vector<int> &v, int p, int d) {\n      while (p <= n) {\n        v[p] += d;\n        p += p & (-p);\n      }\n    };\n\n    auto que = [&] (vector<int> &v, int p) {\n      int res = 0;\n      while (p) {\n        res += v[p];\n        p -= p & (-p);\n      }\n      return res;\n    };\n\n    auto add = [&] (int len, int op) {\n      if (len == 0)\n        len = n;\n      mdf(bit1, len, len * op);\n      mdf(bit2, len, op);\n    };\n\n    set<pair<int, int>> st;\n    set<int> dis;\n\n    auto ins = [&] (int num) {\n      if (dis.empty())\n        dis.insert(num);\n      else {\n        auto ptr = dis.lower_bound(num);\n        int R = (ptr != dis.end() ? *ptr : *dis.begin());\n        int L = (ptr != dis.begin() ? *prev(ptr) : *dis.rbegin());\n        add((R - L + n) % n, -1);\n        add((R - num + n) % n, 1);\n        add((num - L + n) % n, 1);\n        dis.insert(num);\n      }\n    };\n\n    auto rem = [&] (int num) {\n      if (dis.size() < 2)\n        dis.erase(num);\n      else {\n        dis.erase(num);\n        auto ptr = dis.lower_bound(num);\n        int R = (ptr != dis.end() ? *ptr : *dis.begin());\n        int L = (ptr != dis.begin() ? *prev(ptr) : *dis.rbegin());\n        add((R - L + n) % n, 1);\n        add((R - num + n) % n, -1);\n        add((num - L + n) % n, -1);\n      }\n    };\n\n    auto get = [&] (int len) {\n      if (dis.empty())\n        return n;\n      int sm = que(bit1, n) - que(bit1, len - 1);\n      int tot = que(bit2, n) - que(bit2, len - 1);\n      return sm - tot * (len - 1);\n    };\n\n    add(n, 1);\n    for (int i = 0; i < n; i ++)\n      if (c[i] == c[(i + 1) % n])\n        ins((i + 1) % n);\n\n    for (auto e: queries) {\n      if (e[0] == 1) {\n        int sz = e[1];\n        ans.push_back(get(sz));\n      }\n      else {\n        int idx = e[1], col = e[2];\n        if (col != c[idx]) {\n          if (c[idx] == c[(idx + n - 1) % n])\n            rem(idx);\n          if (c[idx] == c[(idx + 1) % n])\n            rem((idx + 1) % n);\n          c[idx] = col;\n          if (c[idx] == c[(idx + n - 1) % n])\n            ins(idx);\n          if (c[idx] == c[(idx + 1) % n])\n            ins((idx + 1) % n);\n        }\n      }\n    }\n    return ans;\n  }\n};",
    "submit_ts": "1722740840",
    "subm_id": "552334091"
}