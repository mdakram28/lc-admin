{
    "username": "cai_lw",
    "submission": "class Solution {\n    struct View{\n        const vector<vector<int>>& grid;\n        int u,l,n,m;\n        bool transposed;\n        View(const vector<vector<int>>& grid):grid(grid),u(0),l(0),n(grid.size()),m(grid[0].size()),transposed(false){}\n        pair<int,int> shape() const{\n            return transposed?pair(m,n):pair(n,m);\n        }\n        View transpose() const{\n            View ret=*this;\n            ret.transposed^=1;\n            return ret;\n        }\n        View subview(int u,int l,int n,int m) const{\n            if(transposed){\n                swap(u,l);\n                swap(n,m);\n            }\n            View ret=*this;\n            ret.u+=u;\n            ret.l+=l;\n            ret.n=n;\n            ret.m=m;\n            return ret;\n        }\n        const int& at(int i,int j) const{\n            if(transposed){\n                swap(i,j);\n            }\n            return grid[u+i][l+j];\n        }\n    };\n    static constexpr int INF=1e9;\n    int solve1_full(const View& view){\n        auto [n,m]=view.shape();\n        int u=n,d=-1,l=m,r=-1;\n        for(int i=0;i<n;i++)\n            for(int j=0;j<m;j++)\n                if(view.at(i,j)){\n                    u=min(u,i);\n                    d=max(d,i);\n                    l=min(l,j);\n                    r=max(r,j);\n                }\n        if(u>d)\n            return INF;\n        return (d-u+1)*(r-l+1);\n    }\n    int solve2_half(const View& view){\n        auto [n,m]=view.shape();\n        vector<int> ur(n,INF);\n        {\n            int u=n,d=-1,l=m,r=-1;\n            for(int i=0;i<n;i++){\n                for(int j=0;j<m;j++)\n                    if(view.at(i,j)){\n                        u=min(u,i);\n                        d=max(d,i);\n                        l=min(l,j);\n                        r=max(r,j);\n                    }\n                if(d>=u)\n                    ur[i]=(d-u+1)*(r-l+1);\n            }\n        }\n        int ret=INF;\n        {\n            int u=n,d=-1,l=m,r=-1;\n            for(int i=n-1;i>0;i--){\n                for(int j=0;j<m;j++)\n                    if(view.at(i,j)){\n                        u=min(u,i);\n                        d=max(d,i);\n                        l=min(l,j);\n                        r=max(r,j);\n                    }\n                int dr=INF;\n                if(d>=u)\n                    dr=(d-u+1)*(r-l+1);\n                ret=min(ret,dr+ur[i-1]);\n            }\n        }\n        return ret;\n    }\n    int solve2_full(const View& view){\n        return min(solve2_half(view),solve2_half(view.transpose()));\n    }\n    int solve3_half(const View& view){\n        auto [n,m]=view.shape();\n        int ret=INF;\n        for(int i=1;i<n;i++){\n            View up=view.subview(0,0,i,m),down=view.subview(i,0,n-i,m);\n            ret=min(ret,solve1_full(up)+solve2_full(down));\n            ret=min(ret,solve2_full(up)+solve1_full(down));\n        }\n        return ret;\n    }\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        View view(grid);\n        return min(solve3_half(view),solve3_half(view.transpose()));\n    }\n};",
    "submit_ts": "1719112766",
    "subm_id": "1297308454"
}