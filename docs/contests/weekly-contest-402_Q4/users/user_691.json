{
    "username": "sveng101",
    "submission": "class FenwickTree:\n    \"\"\"\n    Creates a Fenwick tree for a sequence of elements of a commutative\n    monoid. When first initialised, the every element of the sequence\n    is set as the identity of the monoid.\n    Also note that the sequence is zero-indexed\n    \n    Args:\n        Required positional:\n        n (int): the length of the sequence\n        op (2-tuple of a function and an element of the monoid):\n                the associative, commutative binary operation of the\n                commutative monoid and its identity element\n            Example: Addition of integers (lambda x, y: x + y, 0)\n    \n    Attributes:\n        n (int): the length of the sequence\n        arr (list of monoid elements): the Fenwick tree array\n        op (2-tuple of a function and an element of the monoid):\n                the associative, commutative binary operation of the\n                commutative monoid and its identity element\n             Example: Addition of integers (lambda x, y: x + y, 0)\n            \n    \"\"\"\n    def __init__(self, n: int, op: tuple):\n        self.n = n\n        self.arr = [op[1]] * (n + 1)\n        self.op = op\n\n    def query(self, i: int) -> int:\n        \"\"\"\n        Returns the cumulative application of the commutative,\n        associative binary operation of the monoid on all elements\n        of the sequence with index no greater than i. This is\n        referred to as the generalised summation up to the\n        ith index\n        \n        Args:\n            Required positional:\n            i (int): the index at which the generalised summation\n                    stops\n        \"\"\"\n        if i < 0: return self.op[1]\n        elif i >= self.n: i = self.n\n        else: i += 1\n        res = self.op[1]\n        while i > 0:\n            res = self.op[0](res, self.arr[i])\n            i -= i & -i\n        return res\n    \n    def update(self, i: int, v) -> None:\n        \"\"\"\n        Increments the ith element of the sequence (recall the sequence\n        is zero-indexed)- i.e. the ith element will be replaced by\n        the operation self.op performed between the current ith\n        element and v.\n        \n        Args:\n            Required positional:\n            i (int): the index of the sequence to be updated\n            v (element of the monoid): the value to which the ith index\n                    of the sequence is to be incremented.\n        \"\"\"\n        i += 1\n        while i <= self.n:\n            self.arr[i] = self.op[0](self.arr[i], v)\n            i += i & -i\n        return\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        #print()\n        n = len(nums)\n        bit = FenwickTree(n - 2, ((lambda x, y: x + y), 0))\n        curr = [False] * (n - 2)\n        for i in range(1, n - 1):\n            if nums[i - 1] < nums[i] and nums[i] > nums[i + 1]:\n                bit.update(i - 1, 1)\n                curr[i - 1] = True\n        \n        #print(nums, curr, bit.arr)\n        \n        res = []\n        for q in queries:\n            if q[0] == 1:\n                l, r = q[1], q[2]\n                #print(l - 2, r - 1, bit.query(l - 2), bit.query(r - 2))\n                if r - l < 2: res.append(0)\n                else: res.append(bit.query(r - 2) - bit.query(l - 1))\n                continue\n            i, v = q[1], q[2]\n            nums[i] = v\n            for i0 in range(max(i - 1, 1), min(i + 1, n - 2) + 1):\n                b = nums[i0 - 1] < nums[i0] and nums[i0] > nums[i0 + 1]\n                if curr[i0 - 1] == b: continue\n                if b: bit.update(i0 - 1, 1)\n                else: bit.update(i0 - 1, -1)\n                curr[i0 - 1] = b\n            #print(nums, curr, bit.arr)\n        return res\n        ",
    "submit_ts": 1718507944.0
}