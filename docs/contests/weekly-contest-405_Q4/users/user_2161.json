{
    "username": "arunshrivastava112",
    "submission": "import sys\nsys.setrecursionlimit(10**6)\n\nclass TrieNode:\n    def __init__(self):\n        self.endOfWord=False\n        self.cost=0\n        self.children={}\n    \n    def __str__(self):\n        return str(self.children)\n\nclass Trie:\n    def __init__(self):\n        self.root=TrieNode()\n    \n    def insert(self,word,cost):\n        cur=self.root\n        for char in word:\n            if char not in cur.children:\n                cur.children[char]=TrieNode()\n            cur=cur.children[char]\n        if cur.endOfWord==True:\n            cur.cost=min(cur.cost,cost)\n        else:\n            cur.endOfWord=True\n            cur.cost=cost\n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        @lru_cache(None)\n        def solve(idx):\n            if idx==m:\n                return 0\n            temp=trie.root\n            ans=float('inf')\n            for i in range(idx,m):\n                if target[i] in temp.children:\n                    if temp.children[target[i]].endOfWord==True:\n                        ans=min(ans,temp.children[target[i]].cost+solve(i+1))\n                        #print(ans,i,idx)\n                    #print(idx,i,temp)\n                    temp=temp.children[target[i]]\n                else:\n                    break\n            return ans\n        \n        m=len(target)\n        n=len(words)\n        trie=Trie()\n        for i in range(n):\n            trie.insert(words[i],costs[i])\n        ans=solve(0)\n        #print(trie.root.children['r'])\n        return -1 if ans==float('inf') else ans",
    "submit_ts": "1720323518",
    "subm_id": "1312377538"
}