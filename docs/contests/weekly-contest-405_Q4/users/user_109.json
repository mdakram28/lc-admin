{
    "username": "perry304",
    "submission": "class Solution:\n\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        def insert(trie: dict, word: str, cost: int):\n            node = trie\n            for char in word:\n                if char not in node:\n                    node[char] = {\"cost\": float('inf')}\n                node = node[char]\n            node[\"cost\"] = min(node[\"cost\"], cost)\n\n        def min_cost(trie: dict, target: str, start: int):\n            node = trie\n            costs = []\n            for i in range(start, len(target)):\n                if target[i] not in node:\n                    break\n                node = node[target[i]]\n                if node[\"cost\"] < float('inf'):\n                    costs.append((i + 1, node[\"cost\"]))\n            return costs\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        trie = {\"cost\": float('inf')}\n        for word, cost in zip(words, costs):\n            insert(trie, word, cost)\n\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            min_costs = min_cost(trie, target, i)\n            for end, cost in min_costs:\n                dp[end] = min(dp[end], dp[i] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n        ",
    "submit_ts": "1720321402",
    "subm_id": "1312321948"
}