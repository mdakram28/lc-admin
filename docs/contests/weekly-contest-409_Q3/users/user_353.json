{
    "username": "ryanwong0127",
    "submission": "class TA {\npublic:\n    vector<double> tree1, tree2;\n    int m;\n\n    TA(int m_) {\n        m = m_;\n        tree1.resize(m + 1);\n        tree2.resize(m + 1);\n    }\n\n    void update(vector<double>& tree, int x, double y) { // \u66f4\u65b0\u6811\u72b6\u6570\u7ec4\n        for (; x <= m; x += x & -x)\n            tree[x] += y;\n    }\n\n    double query(const vector<double>& tree, int x) { // \u67e5\u8be2\u6811\u72b6\u6570\u7ec4\u7684\u524d\u7f00\u548c\n        double tot = 0;\n        for (; x; x -= x & -x)\n            tot += tree[x];\n        return tot;\n    }\n\n    void rangeUpdate(int l, int r, double y) { // \u533a\u95f4 [l, r] \u52a0\u4e0a y\n        update(tree1, l, y);\n        update(tree1, r + 1, -y);\n        update(tree2, l, y * (l - 1));\n        update(tree2, r + 1, -y * r);\n    }\n\n    double prefixSum(int x) { // \u67e5\u8be2\u524d\u7f00\u548c\n        return query(tree1, x) * x - query(tree2, x);\n    }\n\n    double rangeQuery(int l, int r) { // \u67e5\u8be2\u533a\u95f4 [l, r] \u7684\u548c\n        return prefixSum(r) - prefixSum(l - 1);\n    }\n\n    void rangeZero(int l, int r) { // \u533a\u95f4 [l, r] \u5168\u90e8\u5f52\u96f6\n        double currentSum = rangeQuery(l, r);\n        if (currentSum != 0) {\n            rangeUpdate(l, r, -currentSum / (r - l + 1));\n        }\n    }\n};\nclass Solution {\npublic:\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& queries) {\n//         TA ta(n + 1);\n//         ta.rangeUpdate(1, n, 1.0);\n        \n//         for (auto &q:queries) {\n//             int l = q[0], r = q[1];\n//             double sum = ta.rangeQuery(l+1, r);\n//             if (abs(sum - 1.0*(r-l)) < 0.5) {\n//                 ta.rangeUpdate(l+1, r, 1.0/(r-l));\n//             } else if (sum < 1.0) {\n                \n//             } else {\n                \n//             }\n//         }\n        set<int> ht;\n        map<int, int> next;\n        int curr = n - 1;\n        vector<int> res;\n\n        for (auto& q : queries) {\n            int a = q[0], b = q[1];\n            auto it = ht.lower_bound(a);\n            if (it == ht.end() || *it > a) {\n                if (it != ht.begin()) it--;\n                else it = ht.end();\n            }\n            if (it != ht.end() && next[*it] >= b) {\n                res.push_back(curr);\n                continue;\n            }\n\n            it = ht.lower_bound(a);\n            while (it != ht.end() && *it < b) {\n                int c = *it;\n                it = ht.erase(it);\n                int d = next[c];\n                next.erase(c);\n                curr += d - c - 1;\n            }\n\n            ht.insert(a);\n            next[a] = b;\n            curr -= b - a - 1;\n            res.push_back(curr);\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1722741395",
    "subm_id": "1343743990"
}