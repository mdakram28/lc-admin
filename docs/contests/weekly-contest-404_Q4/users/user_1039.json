{
    "username": "vijaypurohit",
    "submission": "class Solution {\n    struct TreeNode {\n      int val;\n      TreeNode *left;\n      TreeNode *right;\n      TreeNode() : val(0), left(nullptr), right(nullptr) {}\n      TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}\n      TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}\n  };\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n       \n        int d1 = findDiam(edges1);\n        int d2 = findDiam(edges2);\n        int ans = max(d1, d2);\n        int half_d1 = (d1+1)/2;\n        int half_d2 = (d2+1)/2;\n        ans = max(ans, half_d1+half_d2+1);\n        // cout<<\"d1: \"<<d1<<\" \"<<half_d1<<endl;\n        // cout<<\"d2: \"<<d2<<\" \"<<half_d2<<endl;\n        return ans;\n    }\n    \n    int findDiam(vector<vector<int>>& edges)\n    {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        // int src = 0;\n        for(const auto& e: edges){\n            // src = e[0];\n            adj[e[0]].push_back(e[1]);\n            adj[e[1]].push_back(e[0]);\n        }\n        vector<int> visited(n, 0);\n        int ans = 0;\n        checkDepth(0, adj, visited, ans);\n        return ans;\n    }\n    \n    int checkDepth(int src, vector<vector<int>>& adj, vector<int>& vis, int& mxdepth)\n    {\n        vis[src] = true;\n        int d1 = 0, d2 = 0;\n        for(const int& w: adj[src]){\n            if(!vis[w]){\n                int d = checkDepth(w, adj, vis, mxdepth);\n                if(d > d1){\n                    d2 = d1;\n                    d1 = d;\n                } else if (d > d2){\n                    d2 = d;\n                }\n            }\n        }\n        // cout<<d1<<\" \"<<d2<<endl;\n        mxdepth = max(mxdepth, d1+d2); \n        return 1+max(d1,d2);\n        // return 0;\n    }\n};",
    "submit_ts": 1719719455.0
}