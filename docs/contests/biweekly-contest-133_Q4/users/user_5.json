{
    "username": "Madhu_Bala11",
    "submission": "class Solution {\n    private static final int MOD = 1_000_000_007;\n    public int numberOfPermutations(int n, int[][] requirements) {\n        int[][] dp = new int[n + 1][400 + 1];\n        \n        // Base case\n        dp[0][0] = 1;\n        \n        // Fill DP table\n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int newInv = 0; newInv <= inv && newInv < length; newInv++) {\n                    dp[length][inv] = (dp[length][inv] + dp[length - 1][inv - newInv]) % MOD;\n                }\n            }\n        }\n        \n        // Function to check if a given prefix satisfies the requirements\n        boolean[][] valid = new boolean[n][401];\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= 400; j++) {\n                valid[i][j] = true;\n            }\n        }\n        \n        for (int[] req : requirements) {\n            int endi = req[0];\n            int cnti = req[1];\n            for (int j = 0; j <= 400; j++) {\n                if (j != cnti) {\n                    valid[endi][j] = false;\n                }\n            }\n        }\n        \n        // Calculate the number of valid permutations\n        int[][] dpValid = new int[n + 1][401];\n        dpValid[0][0] = 1;\n        \n        for (int length = 1; length <= n; length++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                if (!valid[length - 1][inv]) continue;\n                for (int newInv = 0; newInv <= inv && newInv < length; newInv++) {\n                    dpValid[length][inv] = (dpValid[length][inv] + dpValid[length - 1][inv - newInv]) % MOD;\n                }\n            }\n        }\n        \n        int result = 0;\n        for (int inv = 0; inv <= 400; inv++) {\n            result = (result + dpValid[n][inv]) % MOD;\n        }\n        \n        return result;\n    }\n}",
    "submit_ts": 1719067244.0
}