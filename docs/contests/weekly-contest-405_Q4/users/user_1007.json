{
    "username": "ahmsaad01",
    "submission": "class Solution {\nprivate:\n//     struct TrieNode {\n\n//     TrieNode* childNode[26];\n\n//     bool wordEnd;\n\n//     TrieNode()\n//     {\n       \n//         wordEnd = false;\n//         for (int i = 0; i < 26; i++) {\n//             childNode[i] = NULL;\n//         }\n//     }\n// };\n    struct TrieNode {\n        TrieNode* childNode[26];\n        int cost;\n        \n        TrieNode() {\n            cost = INT_MAX;\n            for (int i = 0; i < 26; i++) {\n                childNode[i] = NULL;\n            }\n        }\n    };\n    \n    class Trie {\n    public:\n        TrieNode* root;\n        \n        Trie() {\n            root = new TrieNode();\n        }\n        \n        void push(string s, int cost) {\n            TrieNode* node = root;\n            for (auto c : s) {\n                int index = c - 'a';\n                if (node->childNode[index] == NULL) {\n                    node->childNode[index] = new TrieNode();\n                }\n                node = node->childNode[index];\n            }\n            node->cost = min(node->cost, cost);\n        }\n    };\n    \npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.push(words[i], costs[i]);\n        }\n        \n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        auto solve = [&](int k) {\n            TrieNode* node = trie.root;\n            for (int i = k; i < target.size(); ++i) {\n                if (node->childNode[target[i] - 'a'] == NULL) {\n                    break;\n                }\n                //cout<<k;\n                node = node->childNode[target[i] - 'a'];\n                if (node->cost != INT_MAX) {\n                    int x=dp[k] + node->cost;\n                    dp[i + 1] = min(dp[i + 1], x);\n                }\n            }\n        };\n        \n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) {\n                continue;\n                //cout<<dp[i];\n            }\n            solve(i);\n        }\n        int f=1;\n        if(dp[n]==INT_MAX)\n        f=0;\n        else\n        f=dp[n];\n\n        if(f==0)\n        return -1;\n        else\n        return f;\n    }\n};",
    "submit_ts": "1720323258",
    "subm_id": "1312371191"
}