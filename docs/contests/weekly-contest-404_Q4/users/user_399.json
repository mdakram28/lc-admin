{
    "username": "louisfghbvc",
    "submission": "class Solution {\npublic:\n    \n    int treeCenter(vector<vector<int>>& edges) {\n        // idea: use bfs, do indegree 0 first\n        \n        int n = edges.size()+1;\n        if (n == 1) return 0;\n        \n        vector<vector<int>> tree(n);\n        vector<int> ind(n);\n        for (auto &e: edges) {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n            ind[e[0]]++;\n            ind[e[1]]++;\n        }\n        \n        queue<int> q;\n        for (int i = 0; i < n; ++i) {\n            if (ind[i] == 1) {\n                q.push(i);\n            }\n        }\n        \n        \n        int cnt = n;\n        while (cnt > 2) {\n            for (int i = q.size(); i > 0; --i) {\n                int u = q.front(); q.pop();\n                cnt--;\n                for (int v: tree[u]) {\n                    if (--ind[v] == 1) {\n                        q.push(v);\n                    }\n                }\n            }\n        }\n        \n        return q.front();\n    }\n    \n    int treeDiameter(vector<vector<int>>& edges) {\n        \n        int n = edges.size()+1;\n        vector<vector<int>> tree(n);\n        for (auto &e: edges) {\n            tree[e[0]].push_back(e[1]);\n            tree[e[1]].push_back(e[0]);\n        }\n        \n        int mxD = 0, mxNode = 0;\n        auto dfs = [&](auto &self, int u, int dep=0, int p=-1) -> void {\n            if (dep > mxD) {\n                mxD = dep;\n                mxNode = u;\n            }\n            for (int v: tree[u]) if (v != p) {\n                self(self, v, dep+1, u);\n            }\n        };\n        \n        dfs(dfs, 0);\n        \n        mxD = 0;\n        dfs(dfs, mxNode);\n        return mxD;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        // goal: find the minimum diameter after connect tree A and tree B\n        // idea:\n        // connect two tree center, after that we can compute the distance again\n        \n        \n        int n = 1+edges1.size();\n        int m = 1+edges2.size();\n        \n        int a = treeCenter(edges1), b = n + treeCenter(edges2);\n        \n        vector<vector<int>> edges3 = edges1;\n        edges3.push_back({a, b});\n        for (auto &e: edges2) {\n            edges3.push_back({n+e[0], n+e[1]});\n        }\n        \n        return treeDiameter(edges3);\n    }\n};",
    "submit_ts": 1719718471.0
}