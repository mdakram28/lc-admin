{
    "username": "Manmeet8287",
    "submission": "#define pb push_back\nclass Solution {\npublic:\n    void bfs(vector<int> &dist,int st,vector<vector<int>> &graph)\n    {\n        if(st>graph.size()) return;\n        dist[st]=0;\n        queue<int> q;\n        q.push(st);\n        while(!q.empty())\n        {\n            int node=q.front(); q.pop();\n            for(auto &it:graph[node])\n            {\n                if(dist[it]>dist[node]+1)\n                {\n                    q.push(it);\n                    dist[it]=dist[node]+1;\n                }\n            }\n        }\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) \n    {\n        int n=edges1.size(),m=edges2.size();\n        vector<vector<int>> graph1(n+1),graph2(m+1);\n        for(int i=0;i<n;i++)\n        {\n            graph1[edges1[i][0]].pb(edges1[i][1]);\n            graph1[edges1[i][1]].pb(edges1[i][0]);\n        }\n        for(int i=0;i<m;i++)\n        {\n            graph2[edges2[i][0]].pb(edges2[i][1]);\n            graph2[edges2[i][1]].pb(edges2[i][0]);\n        }\n        vector<int> dist1(n+5,INT_MAX);\n        bfs(dist1,0,graph1);\n        int mx=-1,idx=-1;\n        for(int i=0;i<=n+1;i++)\n        {\n            if(dist1[i]==INT_MAX) continue;\n            else if(dist1[i]>mx)\n            {\n                mx=dist1[i];\n                idx=i;\n            }\n        }\n        dist1.assign(n+5,INT_MAX);\n        bfs(dist1,idx,graph1);\n        int val1=-1;\n        for(int i=0;i<=n+1;i++) \n        {\n            if(dist1[i]==INT_MAX) continue;\n            else val1=max(val1,dist1[i]);\n        }\n        vector<int> dist2(m+5,INT_MAX);\n        bfs(dist2,0,graph2);\n        int mx2=-1,idx2=-1;\n        for(int i=0;i<=m+1;i++)\n        {\n            if(dist2[i]==INT_MAX) continue;\n            else if(dist2[i]>=mx2)\n            {\n                mx2=dist2[i];\n                idx2=i;\n            } \n        }\n        dist2.assign(m+5,INT_MAX);\n        bfs(dist2,idx2,graph2);\n        // deb(dist2);\n        int val2=-1;\n        for(int i=0;i<=m+1;i++)\n        {\n            if(dist2[i]==INT_MAX) continue;\n            else val2=max(val2,dist2[i]);\n        }\n        cout<<val1<<\" \"<<val2<<endl;\n        return max({(val1+1)/2+(val2+1)/2+1,val1,val2});\n    }\n};",
    "submit_ts": 1719718770.0
}