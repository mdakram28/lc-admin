{
    "username": "coderchamp07",
    "submission": "class Solution {\npublic:\n    void build(vector<int>& arr, vector<int>& tree, int node, int start, int end) {\n        if(start == end)\n            tree[node] = arr[start];\n        else {\n            int mid = (start + end) / 2;\n            build(arr, tree, 2 * node + 1, start, mid);\n            build(arr, tree, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    int query(vector<int>& tree, int l, int r, int node, int start, int end) {\n        if(l > end || r < start)\n            return INT_MAX;\n        if(l <= start && end <= r)\n            return tree[node];\n        int m = (start + end) / 2;\n        int lv = query(tree, l, r, 2 * node + 1, start, m);\n        int rv = query(tree, l, r, 2 * node + 2, m + 1, end);\n        return lv & rv;\n    }\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> tree(4 * n);\n        build(nums, tree, 0, 0, n - 1);\n\n        int ans = INT_MAX;\n        for(int i = 0; i < n; i++) {\n            int l = i - 1;\n            int r = n - 1;\n            while(r - l > 1) {\n                int m = (l + r) / 2;\n                if(query(tree, i, m, 0, 0, n - 1) >= k)\n                    l = m;\n                else\n                    r = m;\n            }\n            if(i <= l)\n                ans = min(ans, abs(k - query(tree, i, l, 0, 0, n - 1)));\n            ans = min(ans, abs(k - query(tree, i, r, 0, 0, n - 1)));\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298495.0
}