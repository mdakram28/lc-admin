{
    "username": "SurbhiSharma12",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        int n = edges1.length + 1;\n        int m = edges2.length + 1;\n        \n        List<Integer>[] tree1 = new ArrayList[n];\n        List<Integer>[] tree2 = new ArrayList[m];\n        \n        for (int i = 0; i < n; i++) {\n            tree1[i] = new ArrayList<>();\n        }\n        \n        for (int i = 0; i < m; i++) {\n            tree2[i] = new ArrayList<>();\n        }\n        \n        for (int[] edge : edges1) {\n            tree1[edge[0]].add(edge[1]);\n            tree1[edge[1]].add(edge[0]);\n        }\n        \n        for (int[] edge : edges2) {\n            tree2[edge[0]].add(edge[1]);\n            tree2[edge[1]].add(edge[0]);\n        }\n        \n        int diameter1 = findDiameter(tree1);\n        int diameter2 = findDiameter(tree2);\n        \n        return Math.max(Math.max(diameter1, diameter2), (diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1);\n    }\n    \n    private int findDiameter(List<Integer>[] tree) {\n        int[] firstBFS = bfs(tree, 0);\n        int farthestNode = 0;\n        for (int i = 0; i < firstBFS.length; i++) {\n            if (firstBFS[i] > firstBFS[farthestNode]) {\n                farthestNode = i;\n            }\n        }\n        \n        int[] secondBFS = bfs(tree, farthestNode);\n        int diameter = 0;\n        for (int dist : secondBFS) {\n            diameter = Math.max(diameter, dist);\n        }\n        \n        return diameter;\n    }\n    \n    private int[] bfs(List<Integer>[] tree, int start) {\n        int[] distance = new int[tree.length];\n        Arrays.fill(distance, -1);\n        Queue<Integer> queue = new LinkedList<>();\n        queue.add(start);\n        distance[start] = 0;\n        \n        while (!queue.isEmpty()) {\n            int node = queue.poll();\n            for (int neighbor : tree[node]) {\n                if (distance[neighbor] == -1) {\n                    distance[neighbor] = distance[node] + 1;\n                    queue.add(neighbor);\n                }\n            }\n        }\n        \n        return distance;\n\n    }\n}",
    "submit_ts": 1719715414.0
}