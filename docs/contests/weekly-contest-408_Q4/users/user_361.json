{
    "username": "upmannidhi09",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\n    bool bfs(const vector<vector<int>>& adjList, int src, int dest1, int dest2) {\n        vector<bool> visitedNodes(adjList.size(), false);\n        queue<int> nodesQueue({src});\n        visitedNodes[src] = true;\n\n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visitedNodes[neighbor]) {\n                    visitedNodes[neighbor] = true;\n                    nodesQueue.push(neighbor);\n                }\n            }\n        }\n        return visitedNodes[dest1] || visitedNodes[dest2];\n    }\n\n    void createAdjList(const vector<vector<int>>& circles, vector<vector<int>>& adjList, int width, int height) {\n        int numCircles = circles.size();\n        for (int i = 0; i < numCircles; ++i) {\n            int cx = circles[i][0], cy = circles[i][1], radius = circles[i][2];\n            if (cx <= radius) adjList[numCircles].push_back(i), adjList[i].push_back(numCircles);\n            if (width - cx <= radius) adjList[numCircles + 2].push_back(i), adjList[i].push_back(numCircles + 2);\n            if (cy <= radius) adjList[numCircles + 1].push_back(i), adjList[i].push_back(numCircles + 1);\n            if (height - cy <= radius) adjList[numCircles + 3].push_back(i), adjList[i].push_back(numCircles + 3);\n            for (int j = i + 1; j < numCircles; ++j) {\n                if (radius + circles[j][2] >= sqrt(pow(cx - circles[j][0], 2) + pow(cy - circles[j][1], 2))) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n    }\n\npublic:\n    bool canReachCorner(int width, int height, const vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> adjList(numCircles + 4);\n        createAdjList(circles, adjList, width, height);\n        return !(max(static_cast<int>(bfs(adjList, numCircles, numCircles + 1, numCircles + 2)), static_cast<int>(bfs(adjList, numCircles + 3, numCircles + 2, numCircles + 1))));\n    }\n};\n",
    "submit_ts": "1722137141",
    "subm_id": "1335755358"
}