{
    "username": "shivanshgaur28",
    "submission": "from typing import List\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        m = len(words)\n\n        word_cost = self.compute_min_costs(words, costs)\n\n        dp = self.find_minimum_cost(target, word_cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n\n    def compute_min_costs(self, words: List[str], costs: List[int]) -> dict:\n        word_cost = {}\n        for i in range(len(words)):\n            word = words[i]\n            if word not in word_cost:\n                word_cost[word] = costs[i]\n            else:\n                word_cost[word] = min(word_cost[word], costs[i])\n        return word_cost\n\n    def find_minimum_cost(self, target: str, word_cost: dict) -> List[int]:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        for i in range(1, n + 1):\n            for word in word_cost:\n                word_len = len(word)\n                if i >= word_len and target[i - word_len:i] == word:\n                    dp[i] = min(dp[i], dp[i - word_len] + word_cost[word])\n\n        return dp\n",
    "submit_ts": "1720323838",
    "subm_id": "1312385225"
}