{
    "username": "sshreyy_",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> st;\n    int n;\n    int build(int start, int end, int node, vector<int>& nums) {\n        if (start == end) {\n            st[node] = nums[start];\n            return st[node];\n        }\n        int mid = (start+end)/2;\n        int leftChild = build(start, mid, 2 * node + 1, nums);\n        int rightChild = build(mid + 1, end, 2 * node + 2, nums);\n        st[node] = leftChild & rightChild;\n        return st[node];\n    }\n\n    int query(int start, int end, int l, int r, int node) {\n        if (r < start || l > end) {\n            return INT_MAX;\n        }\n        if (l <= start && r >= end) {\n            return st[node];\n        }\n        int mid = (start + end) / 2;\n        int leftChild = query(start, mid, l, r, 2 * node + 1);\n        int rightChild = query(mid + 1, end, l, r, 2 * node + 2);\n        return leftChild & rightChild;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) {\n        n = nums.size();\n        st.resize(4 * n);\n        build(0, n - 1, 0, nums);\n    }\n\n    int rangeAND(int l, int r) {\n        return query(0,n-1,l,r,0);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree seg(nums);\n        int mini = INT_MAX;\n        for (int i=0;i<n;i++) {\n            int st=i,end=n-1;\n            while (st<=end) {\n                int mid=st+(end-st)/2;\n                int temp=seg.rangeAND(i, mid);\n                int diff=abs(k-temp);\n                mini=min(mini, diff);\n                if (diff==0) return 0; \n                if (temp<k) end=mid-1; \n                else st=mid+1; \n            }\n        }\n\n        return mini;\n    }\n};\n",
    "submit_ts": 1717299067.0
}