{
    "username": "g9TCjuwfW2",
    "submission": "MOD = 10**9 + 7\nclass Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        # Convert requirements to a dict for fast access\n        req_dict = {req[0]: req[1] for req in requirements}\n\n        # Memoization dictionary\n        memo = {}\n\n        # Recursive function with memoization and requirements check\n        def dp(k, inv):\n            if k == 0:\n                return 1 if inv == 0 else 0\n            if (k, inv) in memo:\n                return memo[(k, inv)]\n\n            total_ways = 0\n            for i in range(k+1):\n                if inv >= i:\n                    if k-1 in req_dict and req_dict[k-1] != inv - i:\n                        continue\n                    total_ways = (total_ways + dp(k-1, inv-i)) % MOD\n\n            memo[(k, inv)] = total_ways\n            return total_ways\n\n        # Final answer calculation\n        total_permutations = 0\n        for inv in range(401):\n            if req_dict.get(n-1) == inv:\n                total_permutations = (total_permutations + dp(n-1, inv)) % MOD\n\n        return total_permutations\n        ",
    "submit_ts": 1719069018.0
}