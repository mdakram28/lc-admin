{
    "username": "e4803703d",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Step 1: Sort the cost arrays in descending order\n        sort(horizontalCut.begin(), horizontalCut.end(), greater<int>());\n        sort(verticalCut.begin(), verticalCut.end(), greater<int>());\n\n        // Step 2: Use a greedy approach to perform the cuts\n        int hCuts = 0, vCuts = 0;\n        int i = 0, j = 0;\n        long long totalCost = 0;\n\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += horizontalCut[i] * (vCuts + 1);\n                hCuts++;\n                i++;\n            } else {\n                totalCost += verticalCut[j] * (hCuts + 1);\n                vCuts++;\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < horizontalCut.size()) {\n            totalCost += horizontalCut[i] * (vCuts + 1);\n            hCuts++;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < verticalCut.size()) {\n            totalCost += verticalCut[j] * (hCuts + 1);\n            vCuts++;\n            j++;\n        }\n\n        return totalCost;\n    }\n};",
    "submit_ts": "1720925687",
    "subm_id": "1320262942"
}