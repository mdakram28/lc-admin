{
    "username": "snamy520",
    "submission": "        use std::collections::HashMap;\nimpl Solution {\n        pub fn maximum_length(nums: Vec<i32>, k: i32) -> i32 {\n            let k = k as usize + 1;\n            let n = nums.len();\n            let mut fs = {\n                let mut fs = Vec::with_capacity(k + 1);\n                let mut f0 = HashMap::new();\n                f0.insert(0, 0);\n                fs.push((f0, (0, 0), (0, 0)));\n                fs\n            };\n            for &d in nums.iter() {\n                let uk = fs.len();\n                for j in (0..uk).rev() {\n                    let (_, (x, xc), (y, yc)) = fs[j];\n                    if let Some(&v) = fs[j].0.get(&d) {\n                        let v = v + 1;\n                        fs[j].0.entry(d).and_modify(|r| *r = v);\n                        if v > xc {\n                            fs[j].1 = (d, v);\n                            if d != x {\n                                fs[j].2 = (x, xc);\n                            }\n                        } else if v > yc || (v == yc && y == x) {\n                            if d != x {\n                                fs[j].2 = (d, v);\n                            }\n                        }\n                    }\n                    let nj = j + 1;\n                    if (x != d || y != d) && nj <= k {\n                        let v = if x != d { xc + 1 } else { yc + 1 };\n                        if nj == uk {\n                            let mut nf = HashMap::new();\n                            nf.insert(d, v);\n                            fs.push((nf, (d, v), (0, 0)));\n                        } else {\n                            let v = *fs[nj]\n                                .0\n                                .entry(d)\n                                .and_modify(|r| *r = (*r).max(v))\n                                .or_insert(v);\n                            let (_, (x, xc), (y, yc)) = fs[nj];\n                            if v > xc {\n                                fs[nj].1 = (d, v);\n                                if d != x {\n                                    fs[nj].2 = (x, xc);\n                                }\n                            } else if v > yc || (v == yc && y == x) {\n                                if d != x {\n                                    fs[nj].2 = (d, v);\n                                }\n                            }\n                        }\n                    }\n                }\n                // println!(\"Added {d}\");for j in 0..fs.len() {println!(\"\\t{j}: {:?}\", fs[j]);}\n            }\n            let mut res = 0;\n            for (_, (_, xc), _) in fs.iter() {\n                res = res.max(*xc);\n            }\n            res\n        }\n}",
    "submit_ts": 1717861000.0
}