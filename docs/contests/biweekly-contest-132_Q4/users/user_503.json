{
    "username": "striver1217010",
    "submission": "import java.util.*;\nclass SegmentTree {\n    int first;\n    int last;\n    int max;\n    SegmentTree left;\n    SegmentTree right;\n\n    public SegmentTree(int first, int last,  SegmentTree left, SegmentTree right, int max) {\n        this.first = first;\n        this.last = last;\n        this.left = left;\n        this.right = right;\n        this.max = max;\n    }\n}\nclass Solution {\n    public int maximumLength(int[] nums, int k) {\n        int n = nums.length;\n        int val[] = new int[n];\n        Map<Integer, Integer> hm = new HashMap<>();\n\n        for (int i = 0; i < n; i++) {\n            if (hm.containsKey(nums[i])) {\n                hm.put(nums[i], hm.get(nums[i]) + 1);\n            } else {\n                hm.put(nums[i], 1);\n            }\n            val[i] = hm.get(nums[i]);\n        }\n\n        SegmentTree segmentTree = buildSegmentTree(val, 0, n - 1);\n\n        for (int i = 1; i <= k; i++) {\n            hm.clear();\n            val[0] = 1;\n            hm.put(nums[0], 1);\n\n            for (int j = 1; j < n; j++) {\n                int prevMax = findMax(segmentTree, 0, j - 1);\n                if (hm.containsKey(nums[j])) {\n                    hm.put(nums[j], 1 + Math.max(prevMax, hm.get(nums[j])));\n                } else {\n                    hm.put(nums[j], 1 + prevMax);\n                }\n\n                val[j] = hm.get(nums[j]);\n            }\n\n            segmentTree = buildSegmentTree(val, 0, n - 1);\n        }\n\n        return segmentTree.max;\n\n        \n    }\n\n    public SegmentTree buildSegmentTree(int val[], int first, int last) {\n        if (first == last) {\n            return new SegmentTree(first, last, null, null, val[first]);\n        } else {\n            int mid = first + ((last - first)/2);\n\n            SegmentTree left = buildSegmentTree(val, first, mid);\n            SegmentTree right = buildSegmentTree(val, mid + 1, last);\n\n            return new SegmentTree(first, last, left, right, Math.max(left.max, right.max));\n        }\n    }\n\n    public int findMax(SegmentTree tree, int first, int last) {\n        if (tree.first == first && tree.last == last) {\n            return tree.max;\n        } else {\n            int mid = tree.first + ((tree.last - tree.first)/2);\n\n            if (last <= mid) {\n                return findMax(tree.left, first, last);\n            } else if (first > mid) {\n                return findMax(tree.right, first, last);\n            } else {\n                return Math.max(findMax(tree.left, first, mid), findMax(tree.right, mid + 1, last));\n            }\n        }\n    }\n}",
    "submit_ts": 1717862135.0
}