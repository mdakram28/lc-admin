{
    "username": "abhishek1821",
    "submission": "class SegmentTree{\nprivate:\n    vector<int>tr;\n    int n;\n\n    void f(const vector<int>& nums, int node, int start, int end) {\n        if(start == end){\n            tr[node] = nums[start];\n        }\n        else{\n            int mid = (start + end) / 2;\n            f(nums, 2 * node, start, mid);\n            f(nums, 2 * node + 1, mid + 1, end);\n            tr[node] = tr[2 * node] & tr[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r){\n        if(r < start || end < l){\n            return INT_MAX; \n        }\n        if(l <= start && end <= r){\n            return tr[node];\n        }\n        int mid = (start + end) / 2;\n        int left = query(2 * node, start, mid, l, r);\n        int right = query(2 * node + 1, mid + 1, end, l, r);\n        return left & right;\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums){\n        n = nums.size();\n        tr.resize(4 * n, 0);\n        f(nums, 1, 0, n - 1);\n    }\n\n    int rangeAND(int l, int r){\n        return query(1, 0, n - 1, l, r);\n    }\n};\n\nclass Solution{   \npublic: \n    int minimumDifference(vector<int>& nums, int k){\n        int n = nums.size();\n        \n        SegmentTree segTree(nums);\n        \n        int ans = INT_MAX;\n\n        for (int i= 0;i<n;i++){\n            int l=i,h=n-1;\n            while(l<=h){\n                int mid = l+(h-l)/2;\n                int curr = segTree.rangeAND(i, mid);\n                int d = abs(k-curr);\n                ans = min(ans,d);\n                if(curr< k){\n                    h= mid-1;\n                }\n                else{\n                    l= mid+1;\n                }\n            }\n        }\n        \n        \n        return ans;  \n        \n    }\n};",
    "submit_ts": 1717300446.0
}