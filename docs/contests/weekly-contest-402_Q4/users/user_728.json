{
    "username": "Dhruvgarg_1943",
    "submission": "\nclass SegmentTree {\n    vector<int> nums;\n    vector<int> tree;\n    int n;\n\n    int left(int node) { return 2 * node + 1; }\n    int right(int node) { return 2 * node + 2; }\n\n    bool isPeak(int idx) {\n        if (idx <= 0 || idx >= n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(left(node), start, mid);\n            build(right(node), mid + 1, end);\n            tree[node] = tree[left(node)] + tree[right(node)];\n        }\n    }\n\n    void updateNode(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                updateNode(left(node), start, mid, idx);\n            } else {\n                updateNode(right(node), mid + 1, end, idx);\n            }\n            tree[node] = tree[left(node)] + tree[right(node)];\n        }\n    }\n\n    int queryRange(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftQuery = queryRange(left(node), start, mid, l, r);\n        int rightQuery = queryRange(right(node), mid + 1, end, l, r);\n        return leftQuery + rightQuery;\n    }\n\npublic:\n    SegmentTree(vector<int>& nums) : nums(nums) {\n        n = nums.size();\n        tree.resize(4 * n, 0);\n        build(0, 0, n - 1);\n    }\n\n    void update(int idx, int value) {\n        nums[idx] = value;\n        if (idx > 0) updateNode(0, 0, n - 1, idx - 1);\n        updateNode(0, 0, n - 1, idx);\n        if (idx < n - 1) updateNode(0, 0, n - 1, idx + 1);\n    }\n\n    int query(int l, int r) {\n        if (l >= r - 1) return 0;\n        return queryRange(0, 0, n - 1, l + 1, r - 1);\n    }\n};\nclass Solution {\n    public:\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree st(nums);\n        vector<int> result;\n\n        for (auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1];\n                int ri = query[2];\n                result.push_back(st.query(li, ri));\n            } else if (query[0] == 2) {\n                int indexi = query[1];\n                int vali = query[2];\n                st.update(indexi, vali);\n            }\n        }\n        return result;\n    }\n};\n",
    "submit_ts": 1718506620.0
}