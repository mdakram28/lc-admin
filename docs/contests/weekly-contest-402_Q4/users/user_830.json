{
    "username": "liu-qing-8t",
    "submission": "\n//\u6811\u72b6\u6570\u7ec4 indexTree\n//\u8bb0\u5f55\u6bcf\u4e2a\u4f4d\u7f6e\u662f\u5426\u662f\u5cf0\u503c\u4f4d\u7f6e\uff0c\u662f\u5cf0\u503c\u4e3a1\uff0c\u4e0d\u662f\u5cf0\u503c\u4e3a0\n//\u533a\u95f4\u6c42\u548c\nclass Solution {\n    class sIndexTree\n        {\n        public:\n            sIndexTree(int n) : m_val(n + 1)\n            {\n\n            }\n            //index\u4ece0\u5f00\u59cb\n            void Add(int index, int val)\n            {\n                ++index;\n                while (index < m_val.size())\n                {\n                    m_val[index] += val;\n                    index += (index & (-index));\n                }\n            }\n            //index\u4ece0\u5f00\u59cb\n            int Query(int left, int right)\n            {\n                ++left;\n                ++right;\n                return internal_sum(right) - internal_sum(left - 1);\n            }\n            int internal_sum(int index)\n            {\n                int s = 0;\n                while (index > 0)\n                {\n                    s += m_val[index];\n                    index -= (index & (-index));\n                }\n                return s;\n            }\n        private:\n            std::vector<int> m_val;\n        };\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries)\n    {\n        int size = nums.size();\n        sIndexTree tree(size);\n        //\u521d\u59cb\u5316\n        for (int i = 1; i < size-1; ++i)\n        {\n            if (is_peak(nums, i))\n            {\n                tree.Add(i, 1);\n            }\n        }\n        std::vector<int> v_result;\n        for (auto& v : queries)\n        {\n            //\u67e5\u8be2\n            if (v[0] == 1)\n            {\n                int l = v[1];\n                int r = v[2];\n                if (l + 1 < r)\n                {\n                    v_result.push_back(tree.Query(l+1, r-1));\n                }\n                else\n                {\n                    v_result.push_back(0);\n                }\n            }\n            //\u66f4\u65b0\n            else\n            {\n                int x = v[1];\n                int w = v[2];\n                //\u5206\u522b\u66f4\u65b0\u4f4d\u7f6ex-1\u3001x\u3001x+1\n                int prev_1 = is_peak(nums, x-1);\n                int prev_2 = is_peak(nums, x);\n                int prev_3 = is_peak(nums, x+1);\n                nums[x] = w;\n                int cur_1 = is_peak(nums, x-1);\n                int cur_2 = is_peak(nums, x);\n                int cur_3 = is_peak(nums, x+1);\n                if (cur_1 != prev_1)\n                {\n                    tree.Add(x-1, cur_1 - prev_1);\n                }\n                if (cur_2 != prev_2)\n                {\n                    tree.Add(x, cur_2 - prev_2);\n                }\n                if (cur_3 != prev_3)\n                {\n                    tree.Add(x+1, cur_3 - prev_3);\n                }\n            }\n        }\n        return v_result;\n    }\nprivate:\n    int is_peak(auto& v, int index)\n    {\n        if (index > 0 && index+1 < v.size())\n        {\n            if (v[index] > v[index-1] && v[index] > v[index+1])\n            {\n                return 1;\n            }\n        }\n        return 0;\n    }\n};",
    "submit_ts": "1718508578",
    "subm_id": "539788132"
}