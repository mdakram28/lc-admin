{
    "username": "carsoni_",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words, costs) -> int:\n        n = len(target)\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        # Create a dictionary to map words to their costs\n        word_dict = {}\n        for word, cost in zip(words, costs):\n            if word not in word_dict:\n                word_dict[word] = cost\n            else:\n                word_dict[word] = min(word_dict[word], cost)\n\n        # Iterate through each position in the target string\n        for i in range(1, n + 1):\n            for word, cost in word_dict.items():\n                word_len = len(word)\n                if i >= word_len and target[i - word_len:i] == word:\n                    dp[i] = min(dp[i], dp[i - word_len] + cost)\n\n        return dp[n] if dp[n] != float('inf') else -1\n        ",
    "submit_ts": "1720321662",
    "subm_id": "1312328935"
}