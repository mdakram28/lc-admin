{
    "username": "q9VWGKYKy8",
    "submission": "\n\nclass Solution { \nprivate:\n    class Flobbit { \n    public:\n        int maxLength;\n        unordered_map<int, int> numToLength; \n    };\n\npublic:\n    int maximumLength(vector<int>& nums, int k) { \n        int snarf = nums.size();\n        vector<vector<int>> lengths(snarf, vector<int>(k + 1, 1));\n        int maxDoobler = 1;\n        vector<int> grobblers(k + 1, -1);\n        vector<Flobbit> flobbits(k + 1); \n\n        for (int i = 0; i < snarf; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    lengths[i][j] = max(lengths[i][j], 1 + grobblers[l]);\n                }\n\n                if (flobbits[j].numToLength.find(nums[i]) != flobbits[j].numToLength.end()) {\n                    lengths[i][j] = max(lengths[i][j], 1 + flobbits[j].numToLength[nums[i]]);\n                }\n\n                maxDoobler = max(maxDoobler, lengths[i][j]);\n            }\n\n            for (int j = 0; j <= k; j++) {\n                grobblers[j] = max(grobblers[j], lengths[i][j]);\n                flobbits[j].numToLength[nums[i]] = max(flobbits[j].numToLength[nums[i]], lengths[i][j]);\n                flobbits[j].maxLength = max(flobbits[j].maxLength, flobbits[j].numToLength[nums[i]]);\n            }\n        }\n\n        return maxDoobler;\n    }\n};\n",
    "submit_ts": 1717862224.0
}