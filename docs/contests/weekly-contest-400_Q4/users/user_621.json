{
    "username": "samarth_717",
    "submission": "class Solution {\npublic:\n    int t[800005]; \n \n    void build(vector<int>& v, int si, int ss, int se) {\n        if (ss == se) {\n            t[si] = v[ss];\n            return;\n        }\n        int mid = (ss + se) / 2;\n        build(v, 2 * si, ss, mid);\n        build(v, 2 * si + 1, mid + 1, se);\n        t[si] = t[2 * si] & t[2 * si + 1];\n    }\n \n    int query(int si, int ss, int se, int qs, int qe) {\n        if (ss > se || ss > qe || se < qs) {\n            return INT_MAX; \n        }\n        if (ss >= qs && se <= qe) {\n            return t[si];\n        }\n        int mid = (ss + se) / 2;\n        int left = query(2 * si, ss, mid, qs, qe);\n        int right = query(2 * si + 1, mid + 1, se, qs, qe);\n        return left & right;\n    }\n\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        int ans = INT_MAX;\n        build(nums, 1, 0, n - 1);\n        \n        for (int i = 0; i < n; i++) {\n            int l = i - 1, r = n - 1, mid;\n            while (r - l > 1) {\n                mid = (l + r) / 2;\n                if (query(1, 0, n - 1, i, mid) >= k) {\n                    l = mid;\n                } else {\n                    r = mid;\n                }\n            }\n            // cout<<l<<\" \"<<r<<Endl;\n            if (l != i - 1) ans = min(ans, abs(query(1, 0, n - 1, i, l) - k));\n            ans = min(ans, abs(query(1, 0, n - 1, i, r) - k));\n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": 1717299659.0
}