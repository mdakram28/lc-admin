{
    "username": "reetpriye",
    "submission": "#define INF INT32_MAX\n\nclass BitwiseAndSegmentTree {\npublic:\n    vector<int> segTree;\n    int size;\n\n    BitwiseAndSegmentTree(const vector<int>& inputArray) {\n        size = inputArray.size();\n        segTree.resize(4 * size);\n        buildTree(inputArray, 0, 0, size - 1);\n    }\n\n    void buildTree(const vector<int>& inputArray, int treeNode, int segStart, int segEnd) {\n        if (segStart == segEnd) {\n            segTree[treeNode] = inputArray[segStart];\n        } else {\n            int mid = segStart + (segEnd - segStart) / 2;\n            buildTree(inputArray, 2 * treeNode + 1, segStart, mid);\n            buildTree(inputArray, 2 * treeNode + 2, mid + 1, segEnd);\n            segTree[treeNode] = segTree[2 * treeNode + 1] & segTree[2 * treeNode + 2];\n        }\n    }\n\n    int rangeQuery(int left, int right) {\n        return rangeQuery(0, 0, size - 1, left, right);\n    }\n\n    int rangeQuery(int treeNode, int segStart, int segEnd, int queryStart, int queryEnd) {\n        if (queryEnd < segStart || segEnd < queryStart) {\n            return INT_MAX;\n        }\n        if (queryStart <= segStart && segEnd <= queryEnd) {\n            return segTree[treeNode];\n        }\n        int mid = segStart + (segEnd - segStart) / 2;\n        int leftResult = rangeQuery(2 * treeNode + 1, segStart, mid, queryStart, queryEnd);\n        int rightResult = rangeQuery(2 * treeNode + 2, mid + 1, segEnd, queryStart, queryEnd);\n        return leftResult & rightResult;\n    }\n};\n\nclass Solution {\npublic:\n    \n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        BitwiseAndSegmentTree segmentTree(nums);\n        int minimumDifference = INT_MAX;\n\n        for (int startIndex = 0; startIndex < n; startIndex++) {\n            int leftIndex = startIndex - 1, rightIndex = n - 1, midIndex;\n\n            while (rightIndex - leftIndex > 1) {\n                midIndex = leftIndex + (rightIndex - leftIndex) / 2;\n                if (segmentTree.rangeQuery(startIndex, midIndex) >= k) {\n                    leftIndex = midIndex;\n                } else {\n                    rightIndex = midIndex;\n                }\n            }\n\n            if (leftIndex != startIndex - 1) {\n                minimumDifference = min(minimumDifference, abs(segmentTree.rangeQuery(startIndex, leftIndex) - k));\n            }\n            minimumDifference = min(minimumDifference, abs(k - segmentTree.rangeQuery(startIndex, rightIndex)));\n        }\n\n        return minimumDifference;\n    }\n};",
    "submit_ts": "1717300654",
    "subm_id": "1274850770"
}