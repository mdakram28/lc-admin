{
    "username": "abichal",
    "submission": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')  # Default cost is infinity\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        dp = [sys.maxsize]*(n + 1)\n        dp[0] = 0\n\n        for i in range(n):\n            if dp[i] == sys.maxsize:\n                continue\n\n            node = trie.root\n            for j in range(i, n):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.cost != sys.maxsize:\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.cost)\n\n        if(dp[-1]!=sys.maxsize):\n            return dp[-1]\n        return -1",
    "submit_ts": "1720323956",
    "subm_id": "1312388145"
}