{
    "username": "Roumak2008",
    "submission": "class Solution:\n    def numberOfSubstrings(self, s: str) -> int:\n        import math\n        def count_dominant_ones_substrings(s):\n            n = len(s)\n            max_zeros = int(n ** 0.5)  # Calculate the maximum number of zeros we can consider\n\n            count = 0\n            suffix_ones = [0] * n\n            suffix_zeroes = [0] * n\n            c1 = 0\n            c0 = 0\n            for i in range(n - 1, -1, -1):\n                if (s[i] == '0'):\n                    suffix_ones[i] = c1\n                    c1 = 0\n                    suffix_zeroes[i] = c0\n                    c0 += 1\n                else:\n                    suffix_zeroes[i] = c0\n                    c0 = 0\n                    suffix_ones[i] = c1\n                    c1 += 1\n\n            for start in range(n):\n                end = start\n                c1 = s[start] == '1'\n                c0 = not c1\n                \n                if (c1):\n                    count += 1\n                \n                while c0 <= max_zeros and end != n-1:\n                    if (suffix_ones[end]):\n                        c1 += suffix_ones[end]\n                        count += min(suffix_ones[end], max(c1 - c0 * c0 + 1, 0))\n                        end += suffix_ones[end]\n                    else:                        \n                        count += max(0, min(math.floor(c1 ** 0.5) - c0, suffix_zeroes[end]))\n                        c0 += suffix_zeroes[end]\n                        end += suffix_zeroes[end]                       \n                        \n                        \n\n            return count\n\n        return (count_dominant_ones_substrings(s))  \n\n\n\n       \n       \n\n\n\n",
    "submit_ts": "1722136947",
    "subm_id": "1335749616"
}