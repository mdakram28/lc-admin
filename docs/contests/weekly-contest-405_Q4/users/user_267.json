{
    "username": "NotFisrt",
    "submission": "class Solution {\npublic:\n    struct TrieNode {\n        vector<TrieNode*> children;\n        int cost;\n        TrieNode(): children(26, nullptr), cost(INT_MAX) {}\n    };\n    \n    void insert(TrieNode* root, const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (!node->children[ch - 'a'])\n                node->children[ch - 'a'] = new TrieNode();\n            node = node->children[ch - 'a'];\n        }\n        node->cost = min(node->cost, cost);\n    }\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        TrieNode* root = new TrieNode();\n        for (int i = 0; i < words.size(); ++i)\n            insert(root, words[i], costs[i]);\n        \n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue;\n            TrieNode* node = root;\n            for (int j = i; j < n && node; ++j) {\n                node = node->children[target[j] - 'a'];\n                if (!node) break;\n                if (node->cost != INT_MAX)\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720320756",
    "subm_id": "1312303643"
}