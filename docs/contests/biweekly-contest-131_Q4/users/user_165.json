{
    "username": "archerfrank",
    "submission": "import sortedcontainers\nclass Node:\n    def __init__(self, l, r):\n        self.left = None\n        self.right = None\n        self.l = l\n        self.r = r\n        self.mid = (l + r) >> 1\n        self.v = 0\n        self.add = 0\n\n\nclass SegmentTree:\n    def __init__(self):\n        self.root = Node(1, int(1e9))\n\n    def modify(self, l, r, v, node=None):\n        if l > r:\n            return\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            node.v = v   ## todo\n            node.add = v  ## todo\n            return\n        self.pushdown(node)\n        if l <= node.mid:\n            self.modify(l, r, v, node.left)\n        if r > node.mid:\n            self.modify(l, r, v, node.right)\n        self.pushup(node)\n\n    def query(self, l, r, node=None):\n        if l > r:\n            return 0\n        if node is None:\n            node = self.root\n        if node.l >= l and node.r <= r:\n            return node.v\n        self.pushdown(node)\n        v = 0\n        if l <= node.mid:\n            v = max(v, self.query(l, r, node.left))  ## todo\n        if r > node.mid:\n            v = max(v, self.query(l, r, node.right))  ## todo\n        return v\n\n    def pushup(self, node):\n        node.v = max(node.left.v, node.right.v)   ## todo\n\n    def pushdown(self, node):\n        if node.left is None:\n            node.left = Node(node.l, node.mid)\n        if node.right is None:\n            node.right = Node(node.mid + 1, node.r)\n        if node.add:  ## todo\n            node.left.v = node.add\n            node.right.v = node.add\n            node.left.add = node.add\n            node.right.add = node.add\n            node.add = 0\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        sl = sortedcontainers.SortedList()\n        tree = SegmentTree()\n        ans = []\n        for q in queries:\n            m = len(q)\n            x = q[1]\n            if m == 2:\n                idx = sl.bisect(x)\n                if idx > 0:\n                    left = idx - 1\n                    tree.modify(x,x,x - sl[left])\n                else:\n                    tree.modify(x,x,x)\n                if idx < len(sl):\n                    r = sl[idx]\n                    tree.modify(r, r, r - x)\n                sl.add(x)\n            else:\n                idx = sl.bisect(x)\n                d = q[2]\n                if idx > 0:\n                    left = idx - 1\n                    v = tree.query(0, sl[left])\n                    # print(v, sl[left], q, sl)\n                    if v >= d:\n                        ans.append(True)\n                        continue\n                    if x - sl[left] >= d:\n                        ans.append(True)\n                        continue\n                else:\n                    if x >= d:\n                        ans.append(True)\n                        continue\n                ans.append(False)\n        # print(\"end\")\n        return ans\n                    \n                    \n                    \n                    \n                ",
    "submit_ts": "1716650626",
    "subm_id": "534771768"
}