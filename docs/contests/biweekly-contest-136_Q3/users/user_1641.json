{
    "username": "SAISURYAtalla",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n\n        int ans = 0;\n\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                vector<int> elements = {grid[i][j], grid[n - i - 1][j],\n                                        grid[i][m - j - 1],\n                                        grid[n - i - 1][m - j - 1]};\n\n                int ones = accumulate(elements.begin(), elements.end(), 0);\n\n                ans += min(ones, 4 - ones);\n            }\n        }\n\n        int possible = 0;\n        int count = 0;\n\n        if (n % 2 != 0) {\n            for (int j = 0; j < m / 2; ++j) {\n                if (grid[n / 2][j] != grid[n / 2][m - j - 1]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[n / 2][j] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n\n        if (m % 2 != 0) {\n            for (int i = 0; i < n / 2; ++i) {\n                if (grid[i][m / 2] != grid[n - i - 1][m / 2]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[i][m / 2] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n\n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            ans += 1;\n        }\n\n        if (possible == 0 && count % 2 != 0) {\n            ans += 2;\n        }\n\n        return ans;\n    }\n    //     int n=grid.size(),m=grid[0].size();\n    //     int c=0,count=0,one=0;\n    //     vector<vector<int>> grid1=grid;\n    //     for(int i=0;i<n;i++){\n    //         for(int j=0;j<m;j++){\n    //             if(grid[i][j]==1){\n    //                 one++;\n    //             }\n    //         }\n    //     }\n    //     for(int i=0;i<n;i++){\n    //         for(int j=0;j<m/2;j++){\n    //             if(grid1[i][j]!=grid1[i][m-1-j]){\n    //                 c++;\n    //             }\n    //         }\n    //     }\n    //     for(int i=0;i<m;i++){\n    //         for(int j=0;j<n/2;j++){\n    //             if(grid1[j][i]!=grid1[n-1-j][i]){\n    //                 c++;\n    //             }\n    //         }\n    //     }\n    //     for(int i=0;i<m;i++){\n    //         for(int j=0;j<n/2;j++){\n    //             if(grid[j][i]!=grid[n-1-j][i]){\n    //                 count++;\n    //             }\n    //         }\n    //     }\n    //     for(int i=0;i<n;i++){\n    //         for(int j=0;j<m/2;j++){\n    //             if(grid[i][j]!=grid[i][m-1-j]){\n    //                 count++;\n    //             }\n    //         }\n    //     }\n    //     int ans = min(c,count);\n    //     if((ans+one)%4==0 || (one - ans)%4==0){\n    //         return ans;\n    //     }\n    //     //when we have to change the indexices with both 1s and with the\n    //     center element 1 or 0 int change = (one - ans);\n    //     // if((m&1)&&(n&1)){\n    //     //     if(grid[n/2 -1][m/2 -1]){\n    //     //         change--;\n    //     //     }\n    //     // }\n\n    //     ans+=change%4;\n    //     return ans;\n    // }\n};\n",
    "submit_ts": "1722699519",
    "subm_id": "1343214156"
}