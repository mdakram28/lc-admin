{
    "username": "dugawaarun",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        int countVertPart = 1, countHoriPart = 1;\n        \n        priority_queue<int> pqH, pqV;\n        \n        for (int e : horizontalCut) {\n            pqH.push(e);\n        }\n        \n        for (int e : verticalCut) {\n            pqV.push(e);\n        }\n        long long res = 0;\n        while (!pqH.empty() || !pqV.empty()) {\n            int h = pqH.size() > 0 ? pqH.top() : -1;\n            int v = pqV.size() > 0 ? pqV.top() : -1;\n            \n            if (h >= v) {\n                pqH.pop();\n                countHoriPart++;\n                res += 1ll * (h) * countVertPart;\n            } else {\n                pqV.pop();\n                countVertPart++;\n                res += 1ll * (v) * countHoriPart;\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1720925957",
    "subm_id": "1320271554"
}