{
    "username": "franklin628",
    "submission": "class Solution {\npublic:\n    map<pair<int, int>, bool> visited;\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        map<pair<int,int>, vector<pair<int,int>>> adj;\n        \n        int N = circles.size();\n        \n        for (int i = 0; i < N; i++) {\n            int x1 = circles[i][0];\n            int y1 = circles[i][1];\n            long long r1 = circles[i][2];\n            \n            if (y1 <= r1 || x1 + r1 >= X) {\n                adj[{X, 0}].push_back({x1, y1});\n                adj[{x1, y1}].push_back({X, 0});\n            }\n            if (x1 <= r1 || y1 + r1 >= Y) {\n                adj[{0, Y}].push_back({x1, y1});\n                adj[{x1, y1}].push_back({0, Y});\n            }\n            for (int j = i+1; j < N; j++) {\n                \n                int x2 = circles[j][0];\n                int y2 = circles[j][1];\n                long long r2 = circles[j][2];\n                \n                long long dx = abs(x2 - x1);\n                long long dy = abs(y2 - y1);\n                if (dx * dx + dy * dy <= (r1+r2) * (r1+r2)) {\n                    // circles are tangent\n                    adj[{x1, y1}].push_back({x2, y2});\n                    adj[{x2, y2}].push_back({x1, y1});\n                }\n            }\n        }\n        dfs(adj, X, 0);\n        return !visited[{0, Y}];\n    }\n    \n    void dfs(map<pair<int,int>, vector<pair<int,int>>>& adj, int x, int y) {\n        if (visited[{x, y}]) {\n            return;\n        }\n        \n        visited[{x, y}] = true;\n        for (int i = 0; i < adj[{x, y}].size(); i++) {\n            dfs(adj, adj[{x, y}][i].first, adj[{x, y}][i].second);\n        }\n    }\n};",
    "submit_ts": "1722136279",
    "subm_id": "1335729371"
}