{
    "username": "SkinnySnakeLimb",
    "submission": "class Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        ret = []\n        n = 0\n        for q in queries:\n            n = max(n, q[1])\n        \n        class Node:\n            lv = None\n            rv = None\n            mv = None\n            left = None\n            right = None\n            \n            bigGap = None\n            lOb = None\n            rOb = None\n            \n            def __init__(self, l, r):\n                if l > r:\n                    return None\n                \n                self.bigGap = r - l\n                self.lOb = r\n                self.rOb = l\n                \n                if l == r:\n                    self.lv = self.rv = self.mv = l\n                else:\n                    self.lv = l\n                    self.rv = r\n                    self.mv = (l + r) // 2\n                    \n                    self.left = Node(l, self.mv)\n                    self.right = Node(self.mv + 1, r)\n                    \n            def leftMarg(self, x=None):\n                if x is None:\n                    x = self.lOb\n                return min(self.lOb, x) - self.lv\n            \n            def rightMarg(self, x=None):\n                if x is None:\n                    x = self.rv\n                return min(self.rv, x) - self.rOb\n            \n            def q2(self, x):\n                if x >= self.rv:\n                    return self.bigGap, self.leftMarg(x), self.rightMarg(x)\n                if x <= self.mv:\n                    return self.left.q2(x)\n                \n                left = self.left\n                mL = left.rightMarg(x)\n                cont = left.bigGap\n                \n                contR, mR, _ = self.right.q2(x)\n                \n                mR = min(mR, x - self.mv)\n                \n                cont = max(cont, contR, mL + mR + 1)\n                \n                return cont, self.leftMarg(x), self.rightMarg(x)\n            \n            def q1(self, x):\n                if x < self.lOb:\n                    self.lOb = x\n                if x > self.rOb:\n                    self.rOb = x\n                \n                if self.lv != x or self.rv != x:\n                    if self.mv >= x:\n                        self.left.q1(x)\n                    else:\n                        self.right.q1(x)\n                        \n                    self.bigGap = max(self.left.bigGap, self.right.bigGap, self.left.rightMarg() + self.right.leftMarg() + 1)\n                    \n        tree = Node(0, n)\n                        \n        for q in queries:\n            if q[0] == 2:\n                mg = tree.q2(q[1])\n                ret.append(mg[0] >= q[2])\n                \n            else:\n                tree.q1(q[1])\n                \n        return ret\n                    \n        ",
    "submit_ts": 1716652693.0
}