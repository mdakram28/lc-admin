{
    "username": "gurukoushik08",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    int n;\n\n    bool isPeak(const vector<int>& nums, int i) {\n        return i > 0 && i < nums.size() - 1 && nums[i] > nums[i - 1] && nums[i] > nums[i + 1];\n    }\n\n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node, start, mid);\n            build(nums, 2 * node + 1, mid + 1, end);\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return 0;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2 * node, start, mid, l, r);\n        int right_query = query(2 * node + 1, mid + 1, end, l, r);\n        return left_query + right_query;\n    }\n\n    void update(const vector<int>& nums, int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(nums, start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(nums, 2 * node, start, mid, idx);\n            } else {\n                update(nums, 2 * node + 1, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node] + tree[2 * node + 1];\n        }\n    }\n\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n, 0);\n        build(nums, 1, 0, n - 1);\n    }\n\n    int query(int l, int r) {\n        return query(1, 0, n - 1, l, r);\n    }\n\n    void update(const vector<int>& nums, int idx) {\n        update(nums, 1, 0, n - 1, idx);\n        if (idx > 0) update(nums, 1, 0, n - 1, idx - 1);\n        if (idx < n - 1) update(nums, 1, 0, n - 1, idx + 1);\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> result;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                int li = query[1], ri = query[2];\n                int count = segTree.query(li + 1, ri - 1);\n                result.push_back(count);\n            } else if (query[0] == 2) {\n                int indexi = query[1], vali = query[2];\n                nums[indexi] = vali;\n                segTree.update(nums, indexi);\n            }\n        }\n        return result;\n    }\n};\n\n",
    "submit_ts": "1718506648",
    "subm_id": "1289626246"
}