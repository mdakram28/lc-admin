{
    "username": "Ayanerru",
    "submission": "class Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        mm = dict()\n        mx_len = 0\n        for i, w in enumerate(words):\n            if w in mm:\n                if mm[w][1] > costs[i]:\n                    mm[w] = (i, costs[i])\n            else:\n                mm[w] = (i, costs[i])\n            mx_len = max(mx_len, len(w))\n            \n        n = len(target)\n        inf = 10**18\n        dp = [inf] * (n+1)\n        dp[0] = 0\n        \n        # trie\n        root = dict()\n        for i, w in enumerate(words):\n            cur = root\n            for c in w:\n                if c not in cur:\n                    cur[c] = dict()\n                cur = cur[c]\n            cur['End'] = w\n        # print(root)\n        \n        ptrs = []\n        for i, c in enumerate(target):\n            cur = root\n            ptrs.append(cur)\n            ptr2 = [ptr[c] for ptr in ptrs if c in ptr]\n            for ptr in ptr2:\n                if 'End' in ptr:\n                    # print('hit', i, ptr['End'])\n                    L = len(ptr['End'])\n                    if dp[i-L+1] != inf:\n                        dp[i+1] = min(dp[i+1], dp[i-L+1] + mm[ptr['End']][1])\n            \n            ptrs = ptr2\n        # print(mm)\n        # print(dp)\n        # return dp[-1]\n            \n        \n#         good_pos = [-1]\n#         for i in range(n): # O(5e4)\n#             for p in reversed(good_pos):\n#                 if i - p > mx_len: continue\n#                 sub = target[p+1:i+1]\n#                 if sub in mm and dp[p+1] != inf:\n#                     dp[i+1] = min(dp[i+1], dp[p+1] + mm[sub][1])\n#                     if not good_pos or good_pos[-1] != i:\n#                         good_pos.append(i)\n#         # print(dp)\n        \n        \n        if dp[-1] >= inf:\n            return -1\n        return dp[-1]\n        ",
    "submit_ts": "1720323292",
    "subm_id": "1312372048"
}