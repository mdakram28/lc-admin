{
    "username": "nipun753",
    "submission": "class Solution {\n    public int[] fwk; \n    public void update(int idx , int val , int n){\n        for (int i = idx ; i<=n ; i+=i&-i){\n            fwk[i]+=val;\n        }\n    }\n    public int get(int idx){\n        int sum = 0;\n        for (int i = idx ; i>0 ; i-=i&-i){\n            sum = sum + fwk[i];\n        }\n        return sum;\n    }\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        fwk = new int[n + 2];\n        int sum = n - 1;\n        int [] res = new int[queries.length];\n        int t = 0;\n        TreeMap< Integer , Integer >rng = new TreeMap<>(); \n        \n        for (int[]q : queries){\n            int x = q[0] + 1;\n            int y = q[1] + 1;\n            int gx = get(x); \n            int gy = get(y);\n            if (rng.floorKey(x)!=null && rng.get(rng.floorKey(x))>=y){\n                res[t++]  = sum;\n                continue;\n            }\n            rng.put(x , y);\n            x = x +gx;\n            y = y +gy;\n            System.out.println(x + \" \" +y + \" \" + gx + \" \" + gy);\n            sum = sum - (y - x) + 1;\n            System.out.println(-y  + x + 1);\n            update(q[1], -(y - x) + 1 , n);\n            res[t++] = Math.max(1 , sum);\n        }\n        return res;\n        \n    }\n}",
    "submit_ts": "1722743405",
    "subm_id": "1343791195"
}