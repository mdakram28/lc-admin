{
    "username": "PyIsTheBestLang",
    "submission": "from typing import List\nfrom itertools import accumulate\nfrom typing import List\n\n\n# from sortedcontainers import SortedList\n# sys.set_int_max_str_digits(0)  # for big number in leet code\n\n\ndef max(a, b):\n    return a if a > b else b\n\n\ndef min(a, b):\n    return a if a < b else b\n\n\nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, lst: List[List[int]]) -> List[int]:\n\n        s = [int(w) for w in s]\n        pre = list(accumulate(s, initial=0))\n        n = len(s)\n        left = [-1] * n\n        right = [-1] * n\n        j = 0\n        for i in range(n):\n            while j + 1 < n and pre[i + 1] - pre[j + 1] > k and (i - j) - (pre[i + 1] - pre[j + 1]) > k:\n                j += 1\n            if pre[i + 1] - pre[j] > k and (i - j + 1) - (pre[i + 1] - pre[j]) > k:\n                left[i] = j\n\n        j = n - 1\n        for i in range(n - 1, -1, -1):\n            while j - 1 >= 0 and pre[j] - pre[i] > k and (j - i) - (pre[j] - pre[i]) > k:\n                j -= 1\n            if pre[j + 1] - pre[i] > k and (j + 1 - i) - (pre[j + 1] - pre[i]) > k:\n                right[i] = j\n\n        size = int(n ** 0.5) + 500\n\n        queries = [[] for _ in range(size)]\n        m = len(lst)\n        for i in range(m):\n            a, b = lst[i]\n            queries[b // size].append([a, b, i])\n\n        def check_right(ll, rr):\n            if left[rr] >= ll:\n                return left[rr] - ll + 1\n            return 0\n\n        def check_left(ll, rr):\n            if -1 < right[ll] <= rr:\n                return rr - right[ll] + 1\n            return 0\n\n        ans = [0] * m\n        x = y = 0\n        cnt = 0\n        for i in range(size):\n            if i % 2:\n                queries[i].sort(key=lambda it: -it[0])\n            else:\n                queries[i].sort(key=lambda it: it[0])\n            for a, b, j in queries[i]:\n                while y > b:\n                    cnt -= check_right(x, y)\n                    y -= 1\n                while y < b:\n                    y += 1\n                    cnt += check_right(x, y)\n                while x > a:\n                    x -= 1\n                    cnt += check_left(x, y)\n                while x < a:\n                    cnt -= check_left(x, y)\n                    x += 1\n                ans[j] = (b-a+1) * (b-a+1 + 1) // 2 - cnt\n        return ans\n\n",
    "submit_ts": "1723950200",
    "subm_id": "1359739801"
}