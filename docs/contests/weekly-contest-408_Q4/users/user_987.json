{
    "username": "dhinesh1278",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int numCircles = circles.length;\n        List<List<Integer>> graph = new ArrayList<>();\n        for (int i = 0; i < numCircles + 4; i++) {\n            graph.add(new ArrayList<>());\n        }\n        for (int i = 0; i < numCircles; i++) {\n            int x = circles[i][0], y = circles[i][1], r = circles[i][2];\n            if (x <= r) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - x <= r) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (y <= r) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - y <= r) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; j++) {\n                int xj = circles[j][0], yj = circles[j][1], rj = circles[j][2];\n                double distance = Math.sqrt((x - xj) * (x - xj) + (y - yj) * (y - yj));\n                int radiusSum = r + rj;\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        boolean isBlocked = bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) || \n                            bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n\n        return !isBlocked;\n    }\n    private boolean bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> queue = new LinkedList<>();\n        boolean[] visited = new boolean[nodes + 4];\n        queue.offer(start);\n        visited[start] = true;\n\n        while (!queue.isEmpty()) {\n            int u = queue.poll();\n            for (int v : graph.get(u)) {\n                if (!visited[v]) {\n                    queue.offer(v);\n                    visited[v] = true;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n}",
    "submit_ts": "1722138594",
    "subm_id": "1335794768"
}