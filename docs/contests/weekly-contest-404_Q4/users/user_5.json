{
    "username": "penguinhacker",
    "submission": "class Solution {\npublic:\n    vector<int> bfs(int s, vector<vector<int>>& adj) {\n        int n=adj.size();\n        vector<int> d(n, -1);\n        d[s]=0;\n        queue<int> q({s});\n        while(q.size()) {\n            int u=q.front();\n            q.pop();\n            for (int v : adj[u]) {\n                if (d[v]==-1) {\n                    d[v]=d[u]+1;\n                    q.push(v);\n                }\n            }\n        }\n        return d;\n    }\n    \n    vector<int> gd(vector<vector<int>>& e) {\n        int n=e.size() + 1;\n        vector<vector<int>> adj(n);\n        for (auto x : e) {\n            int u=x[0], v=x[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        vector<int> d=bfs(0, adj);\n        int s=max_element(d.begin(), d.end())-d.begin();\n        vector<int> d2=bfs(s, adj);\n        int t=max_element(d2.begin(), d2.end())-d2.begin();\n        vector<int> d3=bfs(t, adj);\n        s=max_element(d3.begin(), d3.end())-d3.begin();\n        vector<int> res(n);\n        for (int i=0; i<n; ++i)\n            res[i]=max(d2[i], d3[i]);\n        return res;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<int> a=gd(edges1), b=gd(edges2);\n        int mn1=*min_element(a.begin(), a.end());\n        int mn2=*min_element(b.begin(), b.end());\n        int mx1=*max_element(a.begin(), a.end());\n        int mx2=*max_element(b.begin(), b.end());\n        return max({mx1, mx2, mn1+mn2+1});\n    }\n};",
    "submit_ts": "1719715487",
    "subm_id": "1304338088"
}