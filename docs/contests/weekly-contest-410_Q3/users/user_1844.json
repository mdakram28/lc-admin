{
    "username": "re_cur_sion",
    "submission": "class Solution {\npublic:\n    static const int MAX_NUM = 50;\n    static const int MOD = 1e9 + 7;\n\n    int countOfPairs(vector<int>& nums) {\n        int n = nums.size();\n        vector<vector<int>> dp(MAX_NUM + 1, vector<int>(MAX_NUM + 1, 0));\n        vector<vector<int>> prefix_sum(MAX_NUM + 1, vector<int>(MAX_NUM + 1, 0));\n\n        // Initialize dp for the first element\n        for (int x = 0; x <= nums[0]; ++x) {\n            int y = nums[0] - x;\n            if (y >= 0 && y <= MAX_NUM) {\n                dp[x][y] = 1;\n            }\n        }\n\n        // Compute initial prefix sums\n        for (int x = 0; x <= MAX_NUM; ++x) {\n            for (int y = 0; y <= MAX_NUM; ++y) {\n                prefix_sum[x][y] = dp[x][y];\n                if (x > 0) prefix_sum[x][y] = (prefix_sum[x][y] + prefix_sum[x - 1][y]) % MOD;\n                if (y > 0) prefix_sum[x][y] = (prefix_sum[x][y] + prefix_sum[x][y - 1]) % MOD;\n                if (x > 0 && y > 0) prefix_sum[x][y] = (prefix_sum[x][y] - prefix_sum[x - 1][y - 1] + MOD) % MOD;\n            }\n        }\n\n        // Process each element in nums\n        for (int i = 1; i < n; ++i) {\n            vector<vector<int>> new_dp(MAX_NUM + 1, vector<int>(MAX_NUM + 1, 0));\n\n            // Compute new_dp using prefix sums\n            for (int x = 0; x <= nums[i]; ++x) {\n                int y = nums[i] - x;\n                if (y >= 0 && y <= MAX_NUM) {\n                    int start_x = 0, start_y = y;\n                    int end_x = x, end_y = MAX_NUM;\n\n                    new_dp[x][y] = prefix_sum[end_x][end_y];\n                    if (start_x > 0) new_dp[x][y] = (new_dp[x][y] - prefix_sum[start_x - 1][end_y] + MOD) % MOD;\n                    if (start_y > 0) new_dp[x][y] = (new_dp[x][y] - prefix_sum[end_x][start_y - 1] + MOD) % MOD;\n                    if (start_x > 0 && start_y > 0) new_dp[x][y] = (new_dp[x][y] + prefix_sum[start_x - 1][start_y - 1]) % MOD;\n                }\n            }\n\n            // Swap dp and new_dp\n            swap(dp, new_dp);\n\n            // Update prefix_sum for the next iteration\n            for (int x = 0; x <= MAX_NUM; ++x) {\n                for (int y = 0; y <= MAX_NUM; ++y) {\n                    prefix_sum[x][y] = dp[x][y];\n                    if (x > 0) prefix_sum[x][y] = (prefix_sum[x][y] + prefix_sum[x - 1][y]) % MOD;\n                    if (y > 0) prefix_sum[x][y] = (prefix_sum[x][y] + prefix_sum[x][y - 1]) % MOD;\n                    if (x > 0 && y > 0) prefix_sum[x][y] = (prefix_sum[x][y] - prefix_sum[x - 1][y - 1] + MOD) % MOD;\n                }\n            }\n        }\n\n        // Sum up all valid pairs\n        int result = 0;\n        for (int x = 0; x <= MAX_NUM; ++x) {\n            for (int y = 0; y <= MAX_NUM; ++y) {\n                result = (result + dp[x][y]) % MOD;\n            }\n        }\n\n        return result;\n    }\n};\n",
    "submit_ts": "1723345754",
    "subm_id": "1351562633"
}