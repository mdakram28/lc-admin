{
    "username": "nnishant07",
    "submission": "class Solution {\npublic:\n    \n    void buildTree(vector<int>&tree, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = 0;\n        } else {\n            int mid = start + (end - start) / 2;\n            buildTree(tree, start, mid, 2 * node + 1);\n            buildTree(tree, mid + 1, end, 2 * node + 2);\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n    void updateTree(vector<int>&tree,int start, int end, int idx, int value, int node) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = start + (end - start) / 2;\n            if (idx <= mid) {\n                updateTree(tree,start, mid, idx, value, 2 * node + 1);\n            } else {\n                updateTree(tree,mid + 1, end, idx, value, 2 * node + 2);\n            }\n            tree[node] = max(tree[2 * node + 1], tree[2 * node + 2]);\n        }\n    }\n    int queryTree(vector<int>&tree,int start, int end, int left, int right, int node) {\n        if (left > end || right < start) {\n            return INT_MIN;\n        }\n        if (left <= start && right >= end) {\n            return tree[node];\n        }\n        int mid = start + (end - start) / 2;\n        return max(queryTree(tree,start, mid, left, right, 2 * node + 1),\n                        queryTree(tree,mid + 1, end, left, right, 2 * node + 2));\n    }\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        \n        int n=queries.size();\n        int mx=min(50000,3*n);\n        //vector<pair<int,int>>v(mx+1,{0,0});\n        //v[0]={1,0};\n        \n        set<int>st;\n        st.insert(0);\n            \n        vector<int>seg(4*mx);\n        vector<bool>fin;\n        \n        for(int i=0;i<queries.size();i++){\n            \n            int mode=queries[i][0];\n            //cout<<\"queries is \"<<queries[i][0]<<\" \"<<queries[i][1]<<endl;\n            if(mode==1){\n                int prev=*(--st.upper_bound(queries[i][1]));\n                updateTree(seg,0,mx,queries[i][1],queries[i][1]-prev,0);\n                st.insert(queries[i][1]);\n                \n                auto next=st.upper_bound(queries[i][1]);\n                if(next!=st.end()){\n                    //cout<<\"next is \"<<*next<<endl;\n                    updateTree(seg,0,mx,*next,*next-queries[i][1],0);\n                }\n                \n            }\n            else{\n                int prev=*(--st.upper_bound(queries[i][1]));\n                int ans=max(queries[i][1]-prev,queryTree(seg,0,mx,0,prev,0));\n                \n                //cout<<\"ans is \"<<ans<<endl;\n                if(ans>=queries[i][2]){\n                    fin.push_back(true);\n                }\n                else{\n                    fin.push_back(false);\n                }\n            }\n        }\n            return fin;\n    }\n};",
    "submit_ts": "1716651683",
    "subm_id": "1267646093"
}