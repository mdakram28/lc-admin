{
    "username": "AAoAA",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        size1 = len(edges1) + 1\n        size2 = len(edges2) + 1\n        graph1 = [[] for _ in range(size1)]\n        graph2 = [[] for _ in range(size2)]\n        for start, end in edges1:\n            graph1[start].append(end)\n            graph1[end].append(start)\n        for start, end in edges2:\n            graph2[start].append(end)\n            graph2[end].append(start)\n        \n        max_length = 0\n        def find_longest_path(graph):\n            nonlocal max_length\n            max_length = 0\n            helper(graph, 0, -1, 0)\n            return max_length\n        \n        def helper(graph, curr, parent, depth):\n            nonlocal max_length\n            top2 = [0, 0]\n            for child in graph[curr]:\n                if child == parent:\n                    continue\n                c_length = helper(graph, child, curr, depth + 1)\n                if c_length > top2[0]:\n                    top2[0], top2[1] = c_length, top2[0]\n                elif c_length > top2[1]:\n                    top2[1] = c_length\n            # print(f'node_{curr}: ', top2, depth)\n            curr_length = max(top2[0] + top2[1], depth + top2[0])\n            max_length = max(curr_length, max_length)\n            return top2[0] + 1\n        \n        lp1 = find_longest_path(graph1)\n        lp2 = find_longest_path(graph2)\n        mp1 = (lp1 + 1) // 2\n        mp2 = (lp2 + 1) // 2\n        # print(lp1, lp2, mp1, mp2, '---')\n        return max(mp1 + mp2 + 1, lp1, lp2)\n                \n            \n        ",
    "submit_ts": "1719718284",
    "subm_id": "1304413391"
}