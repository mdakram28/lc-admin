{
    "username": "Rad0miR",
    "submission": "public class Solution \n{\n    /*\n    private class SegmentTreeNode \n    {\n        private int _begin, _end;\n        \n        private SegmentTreeNode _leftNode = null, _rightNode = null;\n        \n        public int Count { get; private set; }\n        \n        public SegmentTreeNode(int begin, int end) => (_begin, _end) = (begin, end);\n\n        public int Add(int l, int r) \n        {\n            if (l > r || l > _end || r < _begin) return Count;\n            \n            if ((l == _begin && r == _end) || Count == _end - _begin + 1) return Count = _end - _begin + 1;\n            \n            int middle = _begin + (_end - _begin) / 2;\n            \n            _leftNode = _leftNode ?? new SegmentTreeNode(_begin, middle);\n            _rightNode = _rightNode ?? new SegmentTreeNode(middle + 1, _end);\n            \n            return Count = _leftNode.Add(l, Math.Min(middle, r)) + _rightNode.Add(Math.Max(l, middle + 1), r);\n        }\n    }*/\n    \n    private class SegmentTreeNode \n    {\n        private int _begin, _end;\n        \n        private SegmentTreeNode _leftNode = null, _rightNode = null;\n        \n        public int _max = 0;\n        \n        public SegmentTreeNode(int begin, int end) => (_begin, _end) = (begin, end);\n\n        public int Max(int l, int r) \n        {\n            if (l > r || l > _end || r < _begin) return 0;\n            \n            if (r == _end && _begin == l) return _max;\n            \n            int middle = _begin + (_end - _begin) / 2;\n            \n            _leftNode = _leftNode ?? new SegmentTreeNode(_begin, middle);\n            _rightNode = _rightNode ?? new SegmentTreeNode(middle + 1, _end);\n            \n            return Math.Max(_leftNode.Max(l, Math.Min(r, middle)), _rightNode.Max(Math.Max(l, middle + 1), r));\n        }\n        \n        public int Set(int x, int val) \n        {\n            if (x < _begin || x > _end) return _max;\n            \n            if (_begin == x && _end == x) return _max = val;\n            \n            int middle = _begin + (_end - _begin) / 2;\n            \n            _leftNode = _leftNode ?? new SegmentTreeNode(_begin, middle);\n            _rightNode = _rightNode ?? new SegmentTreeNode(middle + 1, _end);\n            \n            return _max = Math.Max(_leftNode.Set(x, val), _rightNode.Set(x, val));\n        }\n    }\n    \n    public IList<bool> GetResults(int[][] qu) \n    {\n        SegmentTreeNode root = new(0, 50_500/*Math.Min(50_500, q.Length * 3)*/);\n        \n        root.Set(0, Int32.MaxValue);\n        \n        SortedSet<int> sset = new() { 0, 100_000 };\n        \n        List<bool> ans = new();\n        foreach (var q in qu) \n        {\n            if (q[0] == 1) \n            {\n                int left = sset.GetViewBetween(-1, q[1]).Max;\n                int right = sset.GetViewBetween(q[1], Int32.MaxValue).Min;\n                \n                //Console.WriteLine(String.Join(\" \", sset));\n                \n                sset.Add(q[1]);\n                \n                root.Set(left, q[1] - left);\n                root.Set(q[1], right - q[1]);\n            }\n            else \n            {\n                int left = sset.GetViewBetween(-1, q[1]).Max;\n                \n                //Console.WriteLine($\"2 {q[1]} {left}\");\n                \n                ans.Add(Math.Max(q[1] - left, left == 0 ? 0 : root.Max(0, left - 1)) >= q[2]);\n            }\n        }\n        //Console.WriteLine();\n        return ans;\n    }\n}",
    "submit_ts": "1716650392",
    "subm_id": "1267614315"
}