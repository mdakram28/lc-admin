{
    "username": "janock",
    "submission": "class Solution {\n    public int minFlips(int[][] grid) {\n        //boolean seen = new boolean[grid.length][grid[0].length];\n        int flips = 0;\n        \n        for (int i = 0; i < grid.length / 2; i++) {\n            for (int j = 0; j < grid[0].length / 2; j++) {\n                flips += flipsNeeded(grid, i, j);\n            }\n        }\n        \n        int singleflips = 0;\n        int doubleOnes = 0;\n        if (grid.length % 2 == 1) {\n            int r = grid.length / 2;\n            \n            for (int j = 0; j < grid[0].length / 2; j++) {\n                int left = grid[r][j];\n                int right = grid[r][grid[0].length - j - 1];\n                if (left != right) {\n                    flips++;   \n                    singleflips++;\n                } else if (left == 1 && right == 1) {\n                    doubleOnes++;\n                }\n            }\n            \n        }\n        \n        if (grid[0].length % 2 == 1) {\n            int c =  grid[0].length / 2;\n            \n            for (int j = 0; j < grid.length / 2; j++) {\n                int left = grid[j][c];\n                int right = grid[grid.length - 1 - j][c];\n                \n                \n                if (left != right) {\n                    flips++;   \n                    singleflips++;\n                } else if (left == 1 && right == 1) {\n                    doubleOnes++;\n                }\n            }\n        }\n        \n        if (doubleOnes % 2 == 1 && singleflips == 0) {\n            flips += 2;\n        }\n        \n\n        if (grid.length % 2 == 1 && grid[0].length % 2 == 1) {\n            if (grid[grid.length / 2][grid[0].length / 2] == 1) {\n                flips++;\n            }\n        }\n        \n        return flips;\n    }\n    \n    public int flipsNeeded(int[][] grid, int i, int j) {\n        int r1 = i; \n        int r2 = grid.length - 1 - i;\n        int c1 = j;\n        int c2 = grid[0].length - 1 - j;\n        \n        int diff = grid[r1][c1] + grid[r1][c2] + grid[r2][c1] + grid[r2][c2];\n        \n        return Math.min(diff, 4 - diff);\n    }\n}",
    "submit_ts": "1722698827",
    "subm_id": "1343193088"
}