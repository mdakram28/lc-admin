{
    "username": "stoic_",
    "submission": "class disjointset{\n    vector<int> parent,size;\n    public:\n    disjointset(int n){\n        parent.resize(n);\n        size.resize(n,1);\n        for(int i=0;i<n;i++){\n            parent[i]=i;\n        }\n    }\n    int findpar(int i){\n        if(parent[i]==i){\n            return i;\n        }\n        return parent[i]=findpar(parent[i]);\n\n    }\n    void unionbysize(int u,int v){\n        int paru=findpar(u);\n        int parv=findpar(v);\n        if(parv!=paru){\n            if(size[paru]>size[parv]){\n                size[paru]+=size[parv];\n                parent[parv]=paru;\n            }\n            else{\n                size[parv]+=size[paru];\n                parent[paru]=parv;\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        disjointset dsu(circles.size()+6);\n//         circles + a + b + c + d + origin + corner;\n        int n=circles.size();\n        for(int i=0;i<circles.size();i++){\n            for(int j=0;j<circles.size();j++){\n                if(dsu.findpar(i)==dsu.findpar(j))\n                        continue;\n                auto c1=circles[i];\n                auto c2=circles[j];\n                if(sqrt(pow(c1[0]-c2[0],2)+(pow(c1[1]-c2[1],2)))<=c1[2]+c2[2]){\n                    dsu.unionbysize(i,j);\n                }\n            }\n            if(dsu.findpar(i)!=dsu.findpar(n)){\n                if(circles[i][0]<=circles[i][2]){\n                    dsu.unionbysize(i,n);\n                }\n            }\n            if(dsu.findpar(i)!=dsu.findpar(n+1)){\n                if(circles[i][1]+circles[i][2]>=Y){\n                    dsu.unionbysize(i,n+1);\n                }\n            }\n            if(dsu.findpar(i)!=dsu.findpar(n+2)){\n                if(circles[i][0]+circles[i][2]>=X){\n                    dsu.unionbysize(i,n+2);\n                }\n            }\n            if(dsu.findpar(i)!=dsu.findpar(n+3)){\n                if(circles[i][1]<=circles[i][2]){\n                    dsu.unionbysize(i,n+3);\n                }\n            }\n            if(dsu.findpar(i)!=dsu.findpar(n+4)){\n                if(sqrt(pow(circles[i][0],2)+pow(circles[i][1],2))<circles[i][2]){\n                    dsu.unionbysize(i,n+4);\n                }\n            }\n            if(dsu.findpar(i)!=dsu.findpar(n+5)){\n                if(sqrt(pow(circles[i][0]-X,2)+pow(circles[i][1]-Y,2))<=circles[i][2]){\n                    dsu.unionbysize(i,n+5);\n                }\n            }\n        }\n        // cout<<dsu.findpar(n+5)<<\" \"<<dsu.findpar(n+4)<<endl;\n        if(dsu.findpar(n+5)!=n+5 || dsu.findpar(n+4)!=n+4)\n                    return false;\n        if(dsu.findpar(n)==dsu.findpar(n+2) || dsu.findpar(n+1)==dsu.findpar(n+3) || dsu.findpar(n)==dsu.findpar(n+3) || dsu.findpar(n+1)==dsu.findpar(n+2))\n                    return false;\n        return true;\n    }\n};",
    "submit_ts": "1722138996",
    "subm_id": "1335805073"
}