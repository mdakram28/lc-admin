{
    "username": "sherlocked-c",
    "submission": "    class Solution {\n        public int minChanges(int[] nums, int k) {\n            int n = nums.length;\n            // \u628a\u5c0f\u7684\u653e\u5230\u524d\u8fb9\n            // \u8bb0\u5f55\u4fee\u65390\u6b21\u7684\u9891\u7387\n            // \u8bb0\u5f55\u5927\u4e8en\u7684\u9891\u6b21\n            int[] towFreq = new int[k + 2];\n            Arrays.fill(towFreq, 0);\n            Map<Integer, Integer> zeroFreq = new HashMap<>();\n            for (int i = 0; i < n / 2; i++) {\n                if (nums[i] > nums[n - i - 1]) {\n                    int a = nums[i];\n                    nums[i] = nums[n - i - 1];\n                    nums[n - i - 1] = a;\n                }\n                int diff = nums[n - i - 1] - nums[i];\n                zeroFreq.put(diff, zeroFreq.getOrDefault(diff, 0) + 1);\n                int left = nums[i] - 0;\n                int right = k - nums[n - i - 1];\n                int pos = k - Math.min(left, right) + 1;\n                towFreq[pos]++;\n            }\n            for (int i = 1; i < k + 2; i++) {\n                towFreq[i] = towFreq[i] + towFreq[i - 1];\n            }\n            // System.out.println(\" nums : \" + Arrays.toString(nums));\n            // System.out.println(\" zeroFreq : \" + zeroFreq);\n            // System.out.println(\" towFreq : \" + Arrays.toString(towFreq));\n            int ans = Integer.MAX_VALUE;\n            for (int X = 0; X <= k; X++) {\n                int zeroNum = zeroFreq.getOrDefault(X, 0);\n                int towNum = towFreq[X];\n                int oneNum = n / 2 - zeroNum - towNum;\n                int change = towNum * 2 + oneNum * 1;\n                ans = Math.min(ans, change);\n            }\n            return ans;\n        }\n    }",
    "submit_ts": "1721490289",
    "subm_id": "548322301"
}