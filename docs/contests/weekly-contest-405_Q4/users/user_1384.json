{
    "username": "harshbardolia",
    "submission": "struct node {\n    node* next[26];\n    int cost;\n\n    node() {\n        cost = INT_MAX;\n        for (int i = 0; i < 26; i++)\n            next[i] = NULL;\n    }\n};\n\nclass Trie {\npublic:\n    node *root;\n\n    Trie() {\n        root = new node();\n    }\n    \n    void insert(string word, int cst) {\n        node *cur = root;\n        for (int i = 0; i < (int) word.size(); i++) {\n            if (!cur->next[word[i] - 'a']) cur->next[word[i] - 'a'] = new node();\n            cur = cur->next[word[i] - 'a'];\n        }\n        cur->cost = min(cur->cost, cst);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie *tree = new Trie();\n        int sz = (int) words.size();\n        \n        for (int i = 0; i < sz; i++)\n            tree->insert(words[i], costs[i]);\n        \n        int n = (int) target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            node *cur = tree->root;\n            \n            for (int j = i; j < n; j++) {\n                if (!cur->next[target[j] - 'a']) break;\n                cur = cur->next[target[j] - 'a'];\n                if (cur->cost != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cur->cost);\n                }\n            }\n        }\n        \n        int res = dp[n];\n        if (dp[n] == INT_MAX) res = -1;\n        return res;\n    }\n};",
    "submit_ts": "1720323764",
    "subm_id": "1312383513"
}