{
    "username": "user3751Xt",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) \n    {\n        sort(horizontalCut.begin(),horizontalCut.end(),greater<int>());\n        sort(verticalCut.begin(),verticalCut.end(),greater<int>());\n        \n        int horptr = 0,vertptr = 0;\n        int hor = 1, vert = 1;\n        long long cost = 0;\n        while(horptr<m-1||vertptr<n-1)\n        {\n            if(horptr>=m-1)\n            {\n                //take vertptr\n                cost+=(vert*verticalCut[vertptr]);\n                vertptr++;\n                hor++;\n                continue;\n            }\n            if(vertptr>=n-1)\n            {\n                //take horptr\n                cost+=(hor*horizontalCut[horptr]);\n                horptr++;\n                vert++;\n                continue;\n            }\n                // take the max between the two\n                if(horizontalCut[horptr]>verticalCut[vertptr])\n                {\n                    //take horptr \n                    cost+=(hor*horizontalCut[horptr]);\n                    horptr++;\n                    vert++;\n                }\n                else\n                {\n                    cost+=(vert*verticalCut[vertptr]);\n                    vertptr++;\n                    hor++;\n                }\n        }\n        return cost;\n        \n    }\n};",
    "submit_ts": "1720926183",
    "subm_id": "1320278431"
}