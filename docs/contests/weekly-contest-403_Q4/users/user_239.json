{
    "username": "Yao_Yin",
    "submission": "class Solution {\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        int res = n*m;\n        //\n        if (n > 2) {\n        for (int i = 0; i < n - 2; i ++) {\n            for (int j = i + 1; j < n - 1; j ++) {\n                int curr = getSub(grid, 0, i, 0, m-1) + getSub(grid, i+1, j, 0, m-1) + getSub(grid, j+1, n-1, 0, m-1);\n                res = min(res, curr);\n            }\n        }\n        }\n        \n        //\n        //cout << \"het\" << endl;\n        if (m > 2) {\n        for (int i = 0; i < m - 2; i ++) {\n            for (int j = i + 1; j < m - 1; j ++) {\n                int curr = getSub(grid, 0, n-1, 0, i) + getSub(grid, 0, n-1, i+1, j) + getSub(grid, 0, n-1, j+1, m-1);\n                res = min(res, curr);\n            }\n        }\n        }\n        //cout << \"z \" << res << endl;\n        //\n        if (n > 1 && m > 1) { \n        for (int i = 0; i < n - 1; i ++) {\n            for (int j = 0; j < m - 1; j ++) {\n                int curr_up = getSub(grid, 0, i, 0, m-1) + getSub(grid, i+1, n-1, 0, j) + getSub(grid, i+1, n-1, j + 1, m-1);\n                int curr_down = getSub(grid, i+1, n-1, 0, m-1) + getSub(grid, 0, i, 0, j) + getSub(grid, 0, i, j + 1, m-1);\n                //cout << i << \" & \" << j << endl;\n                //cout << curr_up << \" \" << getSub(grid, 0, i, 0, m-1) << \" \" <<  getSub(grid, i+1, n-1, 0, j) << \" \" << getSub(grid, i+1, n-1, j + 1, m-1) << endl;\n                res = min(res, min(curr_up, curr_down));\n            }\n        }\n            //cout << res << endl;\n        \n        //\n        \n        for (int i = 0; i < n - 1; i ++) {\n            for (int j = 0; j < m - 1; j ++) {\n                int curr_left = getSub(grid, 0, n-1, 0, j) + getSub(grid, i+1, n-1, j+1, m-1) + getSub(grid, 0, i, j + 1, m-1);\n                int curr_right = getSub(grid, 0, n-1, j+1, m-1) + getSub(grid, 0, i, 0, j) + getSub(grid, i+1, n-1, 0, j);\n                //cout << i << \" \" << j << \" \" << curr_left << \" \" << curr_right << endl;\n                res = min(res, min(curr_left, curr_right));\n            }\n        }\n        }\n        //cout << res << endl;\n        return res;\n    }\n    \n    int getSub(vector<vector<int>> & grid, int lob, int upb, int leb, int rib) {\n        bool flag = false;\n        int lor = upb;\n        int upr = lob;\n        int rir = leb;\n        int ler = rib;\n        for (int x = lob; x <= upb; x ++) {\n            for (int y = leb; y <= rib; y ++) {\n                if (grid[x][y] == 1) {\n                    flag = true;\n                lor = min(lor, x);\n                upr = max(upr, x);\n                ler = min(ler, y);\n                rir = max(rir, y);\n                                     }\n            }\n        }\n        if (!flag) return 0;\n        \n        int res = (rir - ler + 1) * (upr - lor + 1);\n        //cout << lob << \" \" << upb << \" \" << leb << \" \" << rib << \"->\" << res << endl;\n        return res;\n    }\n};",
    "submit_ts": 1719113811.0
}