{
    "username": "do4z",
    "submission": "class Solution {\npublic:\n    struct node {\n        vector<pair<int, int>> last; \n        unordered_map<char,node*> nxt;\n    };\n\n    class trie {\n    public:\n        node* root=new node();\n        void insert(int ind,string& word, int cost) {\n            node* curr=root;\n            for (auto &i:word) \n            {\n                if (curr->nxt.count(i)==0) curr->nxt[i]=new node();\n                curr=curr->nxt[i];\n            }\n            curr->last.push_back({ind,cost});\n        }\n    };\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n=target.size(),m=words.size();\n        trie pref;\n        for(int i=0;i<m;i++) pref.insert(i,words[i],costs[i]);\n        vector<int>dp(n+1,INT_MAX);\n        dp[0]=0;\n        for (int i=0; i<n;i++) \n        {\n            if (dp[i]<INT_MAX)\n            {\n                node* curr=pref.root;\n                for (int j=i;j<n;j++) \n                {\n                    if (curr->nxt.count(target[j])==0) break;\n                    curr=curr->nxt[target[j]];\n                    for (auto& it:curr->last) \n                    {\n                        int siz=words[it.first].size();\n                        if (i<=n-siz) dp[i+siz]=min(dp[i+siz],dp[i]+it.second);\n                    }\n                }\n            }\n        }\n        if(dp[n]==INT_MAX) dp[n]=-1;\n        return dp[n];\n    }\n};",
    "submit_ts": "1720323114",
    "subm_id": "1312367593"
}