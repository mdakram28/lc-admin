{
    "username": "YNU-20201060305-chenyimang",
    "submission": "class Solution:\n    def minimumOperations(self, nums: List[int], target: List[int]) -> int:\n        def dfs(left, right, diff):\n            if left > right:\n                return 0\n#            print(left, right)\n            \n            minn, mids = 1e10, []\n            for i in range(left, right+1):\n                if arr[i] < minn:\n                    minn = arr[i]\n                    mids = [i]\n                elif arr[i] == minn:\n                    mids.append(i)\n            ans = minn\n            if mids:\n                ans += dfs(left, mids[0]-1, minn)\n                ans += dfs(mids[-1]+1, right, minn)\n                if len(mids) > 1:\n                    for i in range(1, len(mids)):\n                        ans += dfs(mids[i-1]+1, mids[i]-1, minn)\n            return ans - diff\n        arr, ans = [], 0\n        for i, j in zip(nums, target):\n            arr.append(i - j)\n#        print(arr)\n        \n        left = 0\n        for i in arr:\n            if i != 0:\n                np = i\n                break\n        else:\n            return 0\n        for i in range(len(arr)):\n            if arr[i] == 0:\n                continue\n            if arr[i] * np < 0:\n                ans += dfs(left, i-1, 0)\n                left, np = i, arr[i]\n            arr[i] = abs(arr[i])\n        return ans + dfs(left, len(arr)-1, 0)",
    "submit_ts": "1721531632",
    "subm_id": "548387523"
}