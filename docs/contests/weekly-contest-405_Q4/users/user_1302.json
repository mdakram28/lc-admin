{
    "username": "aaryak4554",
    "submission": "class Solution {\npublic:\nclass SegmentTree {\n    vector<int> tree;\n    int n;\n    void build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = INT_MAX;\n        } else {\n            int mid = (start + end) / 2;\n            build(2*node+1, start, mid);\n            build(2*node+2, mid+1, end);\n            tree[node] = min(tree[2*node+1], tree[2*node+2]);\n        }\n    }\n    \n    void update(int node, int start, int end, int idx, int value) {\n        if (start == end) {\n            tree[node] = value;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2*node+1, start, mid, idx, value);\n            } else {\n                update(2*node+2, mid+1, end, idx, value);\n            }\n            tree[node] = min(tree[2*node+1], tree[2*node+2]);\n        }\n    }\n    \n    int query(int node, int start, int end, int l, int r) {\n        if (r < start || end < l) {\n            return INT_MAX;\n        }\n        if (l <= start && end <= r) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int left_query = query(2*node+1, start, mid, l, r);\n        int right_query = query(2*node+2, mid+1, end, l, r);\n        return min(left_query, right_query);\n    }\n\npublic:\n    SegmentTree(int size) {\n        n = size;\n        tree.resize(4*n, INT_MAX);\n        build(0, 0, n-1);\n    }\n    \n    void update(int idx, int value) {\n        update(0, 0, n-1, idx, value);\n    }\n    \n    int query(int l, int r) {\n        return query(0, 0, n-1, l, r);\n    }\n};\n    \nstruct TrieNode {\n    unordered_map<char, TrieNode*> child;\n     vector<pair<int, int>> Ends; \n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(int i, int cost, string&word){\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->child.count(c)) {\n                node->child[c] = new TrieNode();\n            }\n            node = node->child[c];\n            // node->cost = min(node->cost, cost);\n        }\n        node->Ends.push_back({i,cost}); \n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n    int minimumCost(string t, vector<string>& w, vector<int>& c) {\n        Trie trie;\n        int n=t.size();\n        int m=w.size();\n        unordered_map<string,int> mp;\n        for(int i=0;i<m;i++) mp[w[i]]=c[i];\n        for(int i=0;i<m;i++){\n            trie.insert(i,c[i],w[i]);\n        }\n        int k=INT_MAX;\n        vector<int> dp(n+1,k);\n        dp[0]=0;\n        for(int i=0;i<n;i++) {\n            if(dp[i]==k) continue;\n            TrieNode* node=trie.getRoot();\n            for(int j=i;j<n;j++){\n                if(!node->child.count(t[j])) break;\n                node=node->child[t[j]];\n                 for(auto it:node->Ends){ \n                    int idx=it.first; \n                    int x=it.second; \n                    int l=w[idx].size(); \n                    if(i+l<=n) dp[i+l]=min(dp[i+l],dp[i]+x); \n                }\n            }\n            \n        }\n        if(dp[n]==k) return -1;\n        else return dp[n];\n    }\n};",
    "submit_ts": "1720323586",
    "subm_id": "1312379151"
}