{
    "username": "Abhay Negi",
    "submission": "#include <vector>\n#include <algorithm>\n#include <climits>\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        \n        // Store the top 3 maximum values with their respective column index for each row\n        vector<vector<pair<int, int>>> rowMax(m, vector<pair<int, int>>(3, {INT_MIN, -1}));\n\n        // Step 1: For each row, find the top 3 maximum values along with their column indices\n        for (int i = 0; i < m; ++i) {\n            // Sort the columns based on values in descending order and store top 3\n            vector<pair<int, int>> colValues;\n            for (int j = 0; j < n; ++j) {\n                colValues.push_back({board[i][j], j});\n            }\n            sort(colValues.rbegin(), colValues.rend()); // Sort in descending order\n            for (int k = 0; k < min(3, n); ++k) {\n                rowMax[i][k] = colValues[k];\n            }\n        }\n\n        // Step 2: Try all combinations of choosing distinct columns from 3 distinct rows\n        long long maxSum = LLONG_MIN;  // Use long long to avoid overflow\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Iterate over all possible combinations of columns (make sure no two columns are the same)\n                    for (int i1 = 0; i1 < 3; ++i1) {\n                        for (int i2 = 0; i2 < 3; ++i2) {\n                            if (rowMax[r1][i1].second == rowMax[r2][i2].second) continue;\n                            for (int i3 = 0; i3 < 3; ++i3) {\n                                if (rowMax[r1][i1].second == rowMax[r3][i3].second ||\n                                    rowMax[r2][i2].second == rowMax[r3][i3].second) continue;\n                                \n                                // Calculate the sum for this configuration using long long to avoid overflow\n                                long long sum = (long long)rowMax[r1][i1].first + rowMax[r2][i2].first + rowMax[r3][i3].first;\n                                maxSum = max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723908098",
    "subm_id": "1359138091"
}