{
    "username": "Blaze_ill",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size();\n        int m = board[0].size();\n\n        long long mx = INT_MIN;\n        mx = mx*10;\n\n        vector< vector< pair< int,int>>> top_values;\n        for(int i=0; i<n; i++){\n            vector<pair<int, int>> temp;\n            vector<pair<int, int>> temp2;\n            for(int j=0; j<m; j++){\n                temp.push_back({board[i][j], j});\n            }\n            sort(temp.begin(), temp.end());\n\n            for(int j=m-3; j<m; j++){\n                temp2.emplace_back(temp[j]);\n            }\n\n            top_values.emplace_back(temp2);\n        }\n\n        for(int i=0; i<n-2; i++){\n            for(int j=i+1; j<n-1; j++){\n                for(int k=j+1; k<n; k++){\n                    // all possible combination of top3 values\n                    for(auto [v1, c1]: top_values[i]){\n                        for(auto [v2, c2]: top_values[j]){\n                            if(c1!=c2) {\n                                for(auto[v3, c3]: top_values[k]){\n                                    if(c1!=c3 && c2!=c3){\n                                        long long sum = v1;\n                                        sum+=v2;\n                                        sum+=v3;\n                                        mx = max(mx, sum);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return mx;\n    }\n};",
    "submit_ts": "1723907245",
    "subm_id": "1359097785"
}