{
    "username": "ow3nL",
    "submission": "class DisjointSetUnion:\n    \n    # Maintains disjoint sets of integers 1 to n (technically 0 to n)\n    def __init__(self, n):\n        self.n = n\n        self.link = [i for i in range(self.n)]\n        self.size = [1 for _ in range(self.n)]\n\n        self.end = [i+1 for i in range(self.n)]\n        self.start = [i for i in range(self.n)]\n    \n    # Find the representative of the set containing [elem]\n    def find(self, elem):\n        \"\"\"Returns the top node in the tree containing elem\"\"\"\n        if self.link[elem] == elem:\n            return elem\n        self.link[elem] = self.find(self.link[elem])\n        return self.link[elem]\n\n    # Check if [a] and [b] belong to the same set\n    def same(self, a, b):\n        \"\"\"Check if [a] and [b] belong to the same tree\"\"\"\n        return self.find(a) == self.find(b)\n\n    # Join the sets containing [a] and [b]\n    def unite(self, a, b):\n        \"\"\"Join the smaller tree to the larger tree\"\"\"\n        a = self.find(a)\n        b = self.find(b)\n        if a != b:\n            if self.size[a] < self.size[b]:\n                a, b = b, a\n            self.size[a] += self.size[b]\n            self.link[b] = a\n\n            self.end[a] = max(self.end[b], self.end[a])\n            self.start[a] = min(self.start[b], self.start[a])\n\nclass Solution:\n    def shortestDistanceAfterQueries(self, n: int, queries: List[List[int]]) -> List[int]:\n        ans = []\n        D = DisjointSetUnion(n-1)\n        path = n-1\n\n        for u, v in queries:\n            cur = u\n            end = D.end[D.find(cur)]\n            while end < v:\n                D.unite(cur, end)\n                cur = end\n                end = D.end[D.find(cur)]\n                path -= 1\n\n            ans.append(path)\n\n        return ans\n\n                ",
    "submit_ts": "1722741364",
    "subm_id": "1343743163"
}