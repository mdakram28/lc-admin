{
    "username": "nvladgw",
    "submission": "class Solution {\n    fun maximumLength(nums: IntArray, k: Int): Int {\n    val nextIndex = IntArray(nums.size) {-1}\n    val prevIndexMap = HashMap<Int, Int>()\n    for (i in 0 until nums.size){\n        if (prevIndexMap[nums[i]] != null) {\n            nextIndex[prevIndexMap[nums[i]]!!] = i\n        }\n        prevIndexMap[nums[i]] = i\n    }\n\n    val ans = Array<IntArray>(nums.size){ IntArray(k + 1){-1} }\n    val maxSoFar = HashMap<Int, Int>()\n    var res = 0\n    for (i in nums.size - 1  downTo 0) {\n        res = Math.max(res, calc(nums, ans, nextIndex, maxSoFar, i, k))\n    }\n    return res\n}\n\nfun calc(nums: IntArray, ans: Array<IntArray>, nextIndex: IntArray, maxSoFar: HashMap<Int, Int>, index: Int, k: Int): Int{\n    if (index >= nums.size || k < 0) return 0\n    if (ans[index][k] != -1){\n        return ans[index][k]\n    }\n    val opt1 = if (k > 0) calc(nums, ans, nextIndex, maxSoFar, maxSoFar[k-1] ?: (index + 1), k - 1) + 1 else 1\n    val opt2 = if (nextIndex[index] != - 1) calc(nums, ans, nextIndex, maxSoFar, nextIndex[index], k) + 1 else 1\n    val opt3 = calc(nums, ans, nextIndex, maxSoFar, index + 1, k - 1) + 1\n    val res = Math.max(Math.max(opt1, opt2), opt3)\n    ans[index][k] = res\n    if (maxSoFar[k] == null || res > ans[maxSoFar[k]!!][k]){\n        maxSoFar[k] = index\n    }\n    return res\n}\n}",
    "submit_ts": 1717861309.0
}