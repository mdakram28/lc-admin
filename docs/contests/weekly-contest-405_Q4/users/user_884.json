{
    "username": "user2349xl",
    "submission": "int INF = 1e9+9;\nclass Trie {\npublic:\n    Trie* child[26];\n    int cnt[26];\n    int cost;\n    \n    Trie() {\n        for (int i = 0; i < 26; i++) {\n            child[i] = nullptr;\n            cnt[i] = 0;\n        }\n        cost = INF;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string t, vector<string>& words, vector<int>& costs) {\n        unordered_map<string, int> match;\n        Trie* root = new Trie();\n        int n = t.size();\n        int m = words.size();\n        \n        for (int i = 0; i < m; i++) {\n            // if (match.find(words[i]) != match.end()) {\n            //     match[words[i]] = min(match[words[i]], costs[i]);\n            // } else {\n            //     match[words[i]] = costs[i];\n            // }\n            int l = words[i].size();\n            Trie* curr = root;\n            \n            for (int j = 0; j < l; j++) {\n                int id = words[i][j] - 'a';\n                \n                if (!curr->cnt[id]) {\n                    curr->child[id] = new Trie();\n                } \n                \n                curr->cnt[id] += 1;\n                curr = curr->child[id];\n            }\n            \n            curr->cost = min(curr->cost, costs[i]);\n        }\n        \n        vector<int> dp(n+1, INF);\n        dp[0] = 0;\n        \n        for (int i = 0; i < n; i++) {\n            string s;\n            int hold = INF;\n            int next = i+1;\n            Trie* curr = root;\n            \n            if (dp[i] == INF) continue;\n            \n            for (int j = i; j < n; j++) {\n                int id = t[j] - 'a';\n                \n                if (!curr->cnt[id]) {\n                    break;\n                } \n                \n                curr = curr->child[id];\n                \n                if (curr->cost != INF) {\n                    dp[j+1] = min(dp[j+1], dp[i] + curr->cost);\n                }\n                \n                // s.push_back(t[j]);\n                // if (match.find(s) != match.end()) {\n                //     dp[j+1] = min(dp[j+1], dp[i] + match[s]);\n                // }\n            }\n            \n            // i = next;\n            // cout << i << \" \" << dp[i] << endl;\n        }\n        \n        cout << endl;\n        \n        if (dp[n] == INF)\n            return -1;\n        \n        return dp[n];\n    }\n};",
    "submit_ts": "1720322728",
    "subm_id": "1312357561"
}