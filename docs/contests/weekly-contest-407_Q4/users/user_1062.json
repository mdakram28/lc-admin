{
    "username": "anhpp-i",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        for(int i = 0; i < n; i++) {\n            nums[i] = target[i] - nums[i];\n        }\n        int min = 1000000000;\n        for(int i : nums) min = Math.min(min, i);\n        long res = Math.max(0, -min);\n        for(int i = 0; i < n; i++) nums[i] += res;\n        for(int i = 0, pre = (int)res; i < n; i++) {\n            int max = Math.min(pre, nums[i]);\n            nums[i] -= max;\n            pre = max;\n        }\n        for(int i = n - 1, pre = (int)res; i >= 0; i--) {\n            int max = Math.min(pre, nums[i]);\n            nums[i] -= max;\n            pre = max;\n        }\n        res += f(nums);\n        return res;        \n    }\n    public long f(int[] target) {\n        int n = target.length;\n        long ans = target[0];\n        for (int i = 1; i < n; ++i) {\n            ans += Math.max(target[i] - target[i - 1], 0);\n        }\n        return ans;\n    }\n/*\n\u4f5c\u8005\uff1a\u529b\u6263\u5b98\u65b9\u9898\u89e3\n\u94fe\u63a5\uff1ahttps://leetcode.cn/problems/minimum-number-of-increments-on-subarrays-to-form-a-target-array/solutions/371326/xing-cheng-mu-biao-shu-zu-de-zi-shu-zu-zui-shao-ze/\n\u6765\u6e90\uff1a\u529b\u6263\uff08LeetCode\uff09\n\u8457\u4f5c\u6743\u5f52\u4f5c\u8005\u6240\u6709\u3002\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u8054\u7cfb\u4f5c\u8005\u83b7\u5f97\u6388\u6743\uff0c\u975e\u5546\u4e1a\u8f6c\u8f7d\u8bf7\u6ce8\u660e\u51fa\u5904\u3002\n*/\n}",
    "submit_ts": "1721532030",
    "subm_id": "548390012"
}