{
    "username": "SaveVMK",
    "submission": "class Solution {\n    public int minimumDiameterAfterMerge(int[][] e1, int[][] e2) {\n        int n = e1.length+1;\n        int m = e2.length+1;\n        boolean[] vis1 = new boolean[n];\n        boolean[] vis2 = new boolean[m];\n        int[] p1 = new int[n];\n        int[] p2 = new int[m];\n        p1[0] = -1;\n        p2[0] = -1;\n        vis1[0] = true;\n        vis2[0] = true;\n        ArrayDeque<Integer> q = new ArrayDeque<>();\n        ArrayList<ArrayList<Integer>> g1 = new ArrayList<>();\n        ArrayList<ArrayList<Integer>> g2 = new ArrayList<>();\n        for (int i = 0; i < n; ++i)\n            g1.add(new ArrayList<>());\n        for (int i = 0; i < m; ++i)\n            g2.add(new ArrayList<>());\n        for (int[] e : e1) {\n            g1.get(e[0]).add(e[1]);\n            g1.get(e[1]).add(e[0]);\n        }\n        for (int[] e : e2) {\n            g2.get(e[0]).add(e[1]);\n            g2.get(e[1]).add(e[0]);\n        }\n        \n        q.add(0);\n        int u = -1;\n        while (!q.isEmpty()) {\n            u = q.removeFirst();\n            for (int v : g1.get(u)) {\n                if (vis1[v])\n                    continue;\n                vis1[v] = true;\n                p1[v] = u;\n                q.add(v);\n            }\n        }\n        p1 = new int[n];\n        vis1 = new boolean[n];\n        vis1[u] = true;\n        p1[u] = -1;\n        q.add(u);\n        while (!q.isEmpty()) {\n            u = q.removeFirst();\n            for (int v : g1.get(u)) {\n                if (vis1[v])\n                    continue;\n                vis1[v] = true;\n                p1[v] = u;\n                q.add(v);\n            }\n        }\n        int d1 = 0;\n        while (u!=-1) {\n            ++d1;\n            u = p1[u];\n        }\n        \n        q.add(0);\n        u = -1;\n        while (!q.isEmpty()) {\n            u = q.removeFirst();\n            for (int v : g2.get(u)) {\n                if (vis2[v])\n                    continue;\n                vis2[v] = true;\n                p2[v] = u;\n                q.add(v);\n            }\n        }\n        p2 = new int[m];\n        vis2 = new boolean[m];\n        vis2[u] = true;\n        p2[u] = -1;\n        q.add(u);\n        while (!q.isEmpty()) {\n            u = q.removeFirst();\n            for (int v : g2.get(u)) {\n                if (vis2[v])\n                    continue;\n                vis2[v] = true;\n                p2[v] = u;\n                q.add(v);\n            }\n        }\n        int d2 = 0;\n        while (u!=-1) {\n            ++d2;\n            u = p2[u];\n        }\n        \n        //System.out.println(d1+\" \"+d2);\n        return Math.max(Math.max(d1-1,d2-1),d1/2+d2/2+1);\n    }\n}",
    "submit_ts": 1719717157.0
}