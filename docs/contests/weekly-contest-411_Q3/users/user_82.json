{
    "username": "Doudle",
    "submission": "class Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n        \n        def large_number_modulus(number_str, divisor):\n            remainder = 0\n\n            for char in number_str:\n                remainder = (remainder * 10 + int(char)) % divisor\n    \n            return remainder\n        \n        if n <= 5:\n            if k != 8:\n                for i in range(10**(n)-1, 1, -1):\n                    if str(i) == str(i)[::-1] and i % k == 0:\n                        return str(i)\n        if k == 1:\n            return '9' * n\n        if k == 5:\n            return '5' + '9' * (n-2) + '5'\n        if k == 2:\n            return '8' + '9' * (n-2) + '8'\n        if k == 4:\n            return '88' + '9' * (n-4) + '88' \n        if k == 8:\n            if n <= 6:\n                for i in range(10**n-1, 1, -1):\n                    if str(i) == str(i)[::-1] and i % k == 0:\n                        return str(i)\n            return '888' + '9' * (n-6) + '888'\n        if k % 2 == 1:\n            half = (n - 1) // 2\n            for i in range(9, -1, -1):\n                a = '9' * half + str(i) * (2-n%2) + half * '9'\n                if large_number_modulus(a, k) == 0:\n                    return a\n        if k == 6:\n            half = (n - 1) // 2\n            for i in range(9, -1, -1):\n                a = '8'+'9' * (half-1) + str(i) * (2-n%2) + (half-1) * '9' + '8'\n\n                if large_number_modulus(a, k) == 0:                    \n                    return a",
    "submit_ts": "1723949867",
    "subm_id": "556395462"
}