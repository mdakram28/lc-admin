{
    "username": "Now_say_my_name",
    "submission": "#include <vector>\n\nclass Solution {\npublic:\n    const int MOD = 1e9 + 7;\n    std::vector<std::vector<int>> memo;\n    std::vector<int> requiredInversions;\n\n    int countPermutations(int length, int inversions, int totalElements) {\n        if (length == 0) return inversions == 0 ? 1 : 0;\n        if (inversions < 0) return 0;\n\n        if (memo[length][inversions] != -1) return memo[length][inversions];\n\n        long long result = 0;\n        for (int i = 0; i <= length - 1; ++i) {\n            result = (result + countPermutations(length - 1, inversions - i, totalElements)) % MOD;\n        }\n        return memo[length][inversions] = result;\n    }\n\n    int countPermutationsWithReq(int length, int inversions, int totalElements) {\n        if (length == 0) return inversions == 0 ? 1 : 0;\n        if (inversions < 0) return 0;\n\n        if (memo[length][inversions] != -1) return memo[length][inversions];\n\n        long long result = 0;\n        if (requiredInversions[length - 1] == -1 || requiredInversions[length - 1] == inversions) {\n            for (int i = 0; i <= length - 1; ++i) {\n                result = (result + countPermutationsWithReq(length - 1, inversions - i, totalElements)) % MOD;\n            }\n        }\n        return memo[length][inversions] = result;\n    }\n\n    int numberOfPermutations(int n, std::vector<std::vector<int>>& requirements) {\n        int maxInversions = n * (n - 1) / 2;\n        memo = std::vector<std::vector<int>>(n + 1, std::vector<int>(maxInversions + 1, -1));\n        requiredInversions = std::vector<int>(n, -1);\n\n        for (const auto& req : requirements) {\n            requiredInversions[req[0]] = req[1];\n        }\n\n        int totalPermutations = 0;\n        for (int inv = 0; inv <= maxInversions; ++inv) {\n            totalPermutations = (totalPermutations + countPermutationsWithReq(n, inv, n)) % MOD;\n        }\n\n        return totalPermutations;\n    }\n};\n",
    "submit_ts": 1719068042.0
}