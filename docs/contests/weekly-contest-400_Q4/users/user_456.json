{
    "username": "Sundae2608",
    "submission": "def pad_zero(binary, l):\n    return (l - len(binary)) * '0' + binary\n\ndef generate_multiples(l):\n    return [2 ** i for i in range(l)]\n\ndef get_val(count, multiples):\n    l = len(multiples)\n    ret = 0\n    for i, c in enumerate(count):\n        if c == 0:\n            ret += multiples[l - i - 1]\n    return ret\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        #\n        bins = []\n        l = 0\n        for num in nums:\n            new_bin = bin(num)[2:]\n            l = max(l, len(new_bin))\n            bins.append(new_bin)    \n            \n        bins = [pad_zero(new_bin, l) for new_bin in bins]\n            \n        #\n        multiples = generate_multiples(l)\n        i = 0\n        j = 0\n        curr = [0] * l\n        n = len(nums)\n        ret = None\n        while j < n:\n            # Advance j\n            j_bin = bins[j]\n            for index, c in enumerate(j_bin):\n                if c == '0':\n                    curr[index] += 1\n                    \n            # Advance i until too small\n            while True:\n                val = get_val(curr, multiples)\n                if ret is None:\n                    ret = abs(k - val)\n                else:\n                    ret = min(ret, abs(k - val))\n                    if ret == 0:\n                        return 0\n                    \n                if i == j:\n                    break\n\n                if val > k:\n                    break\n                \n                i_bin = bins[i]\n                for index, c in enumerate(i_bin):\n                    if c == '0':\n                        curr[index] -= 1\n                i += 1\n            j += 1\n                \n        return ret\n        \n            \n        ",
    "submit_ts": 1717299130.0
}