{
    "username": "gohar1998",
    "submission": "class Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        tree = [0] * (n + 1)\n        \n        # Initialize fenwick tree\n        def p(k):\n            return k & (-k)\n        \n        def sum_q(i, j):\n            ans = 0\n            for k in range(i - 1, j):\n                if k and k < n - 1:\n                    ans += int(nums[k] > nums[k - 1] and nums[k] > nums[k + 1])\n                    \n            return ans\n        \n        for i in range(1, n + 1):\n            tree[i] = sum_q(i - p(i) + 1, i)\n            \n        def sumq(k):\n            s = 0\n            while (k >= 1):\n                s += tree[k]\n                k -= (k & (-k))\n            return s\n        \n        def add(k, x):\n            while (k <= n):\n                tree[k] += x\n                k += (k & (-k))\n                \n        ans = []\n        for query in queries:\n            if query[0] == 1:\n                _, l, r = query\n                z = sumq(r + 1) - sumq(l)\n                \n                if l == r:\n                    if l > 0 and l < n - 1:\n                        if nums[l] > nums[l - 1] and nums[l] > nums[l + 1]:\n                            z -= 1\n                        \n                \n                # If l is a peak, then don't count it\n                else:\n                    if l > 0 and l < n - 1:\n                        if nums[l] > nums[l - 1] and nums[l] > nums[l + 1]:\n                            z -= 1\n                        \n                        \n                    if r > 0 and r < n - 1:\n                        if nums[r] > nums[r - 1] and nums[r] > nums[r + 1]:\n                            z -= 1\n\n                        \n                ans.append(z)\n            else:\n                _, i, v = query\n                \n                # Check the surrounding elements to see if their peaks will be deleted\n                # LEFT\n                l = i - 1\n                if l > 0 and l < n - 1:\n                    # Remove a peak\n                    if (\n                        (nums[l] > nums[l - 1] and nums[l] > nums[l + 1]) and\n                        (nums[l] <= v)\n                    ):\n                        add((i - 1) + 1, -1)\n                    # Add a peak\n                    elif (\n                        (nums[l] > nums[l - 1] and nums[l] <= nums[l + 1]) and\n                        (nums[l] > v)                    \n                    ):\n                        add((i - 1) + 1, 1)\n                        \n                r = i + 1\n                if r > 0 and r < n - 1:\n                    # Remove a peak\n                    if (\n                        (nums[r] > nums[r - 1] and nums[r] > nums[r + 1]) and\n                        (nums[r] <= v)\n                    ):\n                        add((i + 1) + 1, -1)\n                    # Add a peak\n                    elif (\n                        (nums[r] <= nums[r - 1] and nums[r] > nums[r + 1]) and\n                        (nums[r] > v)                    \n                    ):\n                        add((i + 1) + 1, 1)\n                        \n                if i > 0 and i < n - 1:\n                    # There was already a peak\n                    if (\n                        (nums[i] > nums[i - 1] and nums[i] > nums[i + 1])\n                    ):\n                        if not (v > nums[i - 1] and v > nums[i + 1]):\n                            add(i + 1, -1)\n                    # No peak\n                    else:\n                        if (v > nums[i - 1] and v > nums[i + 1]):\n                            add(i + 1, 1)\n                \n                nums[i] = v\n        \n        return ans",
    "submit_ts": 1718508189.0
}