{
    "username": "yashraj_prasad",
    "submission": "class Solution {\npublic:\n    string largestPalindrome(int n, int k) {\n        if (k == 1 || k == 3 || k == 9) {\n            return string(n, '9');\n        }\n\n        if (k == 2) {\n            if (n == 1) {\n                return \"8\";\n            }\n            string ans(n, '9');\n            ans[0] = ans[n - 1] = '8';\n            return ans;\n        }\n\n        if (k == 5) {\n            if (n == 1) {\n                return \"5\";\n            }\n            string ans(n, '9');\n            ans[0] = ans[n - 1] = '5';\n            return ans;\n        }\n\n        if (k == 4) {\n            if (n <= 3) {\n                return string(n, '8');\n            }\n            string ans(n, '9');\n            ans[0] = ans[1] = ans[n - 2] = ans[n - 1] = '8';\n            return ans;\n        }\n\n        if (k == 8) {\n            if (n <= 5) {\n                return string(n, '8');\n            }\n            string ans(n, '9');\n            ans[0] = ans[1] = ans[2] = ans[n - 3] = ans[n - 2] = ans[n - 1] = '8';\n            return ans;\n        }\n\n        if (k == 6) {\n            if (n == 1) return \"6\";\n            if (n == 2) return \"66\";\n            if (n == 3) return \"888\";\n            string ans(n, '9');\n            ans[0] = ans[n - 1] = '8';\n            if (n % 2 == 1) {\n                ans[n / 2] = '8';\n            } else {\n                ans[n / 2] = ans[n / 2 - 1] = '7';\n            }\n            return ans;\n        }\n\n        if (k == 7) {\n            if (n == 1) return \"7\";\n            \n            char dp[100001][7] = {0};\n            char dp2[100001][7] = {0};\n            int dp3[100001][7] = {0};\n            int dp4[100001][7] = {0};\n\n            for (int i = 1; i < 10; ++i) {\n                dp[1][i % 7] = '0' + i;\n                if (i != 0) {\n                    dp2[1][i % 7] = '0' + i;\n                }\n            }\n\n            int M = 10 % 7;\n            for (int i = 0; i <= 100000 - 2; ++i) {\n                for (int j = 0; j < 7; ++j) {\n                    if ((i == 0 && j != 0) || (i > 0 && dp[i][j] == 0)) continue;\n\n                    for (int k = 9; k >= 0; --k) {\n                        int new_mod = (M * k + k + j * 10) % 7;\n                        if (dp[i + 2][new_mod] == 0 || dp[i + 2][new_mod] < '0' + k) {\n                            dp[i + 2][new_mod] = '0' + k;\n                            dp3[i + 2][new_mod] = j;\n                        }\n                        if (k == 0) continue;\n                        if (dp2[i + 2][new_mod] == 0 || dp2[i + 2][new_mod] < '0' + k) {\n                            dp2[i + 2][new_mod] = '0' + k;\n                            dp4[i + 2][new_mod] = j;\n                        }\n                    }\n                }\n                M = (M * 10) % 7;\n            }\n\n            int len = n;\n            string first_part(1, dp2[len][0]);\n            string second_part(1, dp2[len][0]);\n            int mod = dp4[len][0];\n            len -= 2;\n            while (len > 0) {\n                first_part += dp[len][mod];\n                if (len > 1) second_part += dp[len][mod];\n                mod = dp3[len][mod];\n                len -= 2;\n            }\n            reverse(second_part.begin(), second_part.end());\n            return first_part + second_part;\n        }\n\n        return \"\";\n        \n    }\n};",
    "submit_ts": "1723953556",
    "subm_id": "1359824512"
}