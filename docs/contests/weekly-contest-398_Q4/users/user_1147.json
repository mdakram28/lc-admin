{
    "username": "solve-xyz",
    "submission": "class Solution {\n    private Map<Integer, Map<Integer, Map<Boolean, Integer>>> dp = new HashMap<>();\n\n    private int solve(int k, int i, int jump, boolean can) {\n        if (i > k + 5)\n            return 0;\n\n        if (jump > 31)\n            return 0;\n\n        if (dp.containsKey(i) && dp.get(i).containsKey(jump) && dp.get(i).get(jump).containsKey(can))\n            return dp.get(i).get(jump).get(can);\n\n        int ans = (i == k) ? 1 : 0;\n        if (can)\n            ans += solve(k, i - 1, jump, false);\n        if (i + (1 << jump) <= k + 1)\n            ans += solve(k, i + (1 << jump), jump + 1, true);\n\n        if (!dp.containsKey(i))\n            dp.put(i, new HashMap<>());\n        if (!dp.get(i).containsKey(jump))\n            dp.get(i).put(jump, new HashMap<>());\n        dp.get(i).get(jump).put(can, ans);\n\n        return ans;\n    }\n\n    public int waysToReachStair(int k) {\n        return solve(k, 1, 0, true);\n    }\n}\n\n",
    "submit_ts": 1716089283.0
}