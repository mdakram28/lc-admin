{
    "username": "knarf",
    "submission": "class Solution {\n    int n;\n    int[] res;\n    int[] d,p;\n    ArrayList<Integer>[] link;\n    int dfs(int node,int parent) {\n        int max = 0;\n        for(int child:link[node]) {\n            if(child == parent) continue;\n            d[child] = dfs(child,node);\n            if(child % 2 == 1) {\n                max = Math.max(max,d[child]+1);\n            } else {\n                max = Math.max(max,d[child]+2);\n            }\n        }\n        return max;\n    }\n\n    void dfs1(int node ,int parent,int pl) {\n        ArrayList<Integer> arr = new ArrayList<>();\n        for(int child:link[node]) {\n            if(child == parent) continue;\n            arr.add(d[child]+2-child%2);\n        }\n        arr.sort((o1,o2)->Integer.compare(o2,o1));\n        for(int child:link[node]) {\n            if(child == parent) continue;\n            int v = pl;\n            if(arr.size()>1) {\n                if(arr.get(0).equals(d[child]+2-child%2)) {\n                    v = Math.max(v,arr.get(1));\n                } else {\n                    v = Math.max(v,arr.get(0));\n                }\n            }\n            int t = v+2-node%2;\n            // System.out.println(String.format(\"%d %d %d %s\",child,pl,v,arr));\n            res[child] = Math.max(t,d[child]);\n            dfs1(child,node,t);\n\n        }\n    }\n\n    public int[] timeTaken(int[][] edges) {\n        n = edges.length+1;\n        res = new int[n];\n        d = new int[n];\n        p = new int[n];\n        link = new ArrayList[n];\n        for(int i=0;i<n;i++) link[i] = new ArrayList<>();\n        for(int[] e:edges) {\n            link[e[0]].add(e[1]);\n            link[e[1]].add(e[0]);\n        }\n        res[0] = dfs(0,-1);\n        // System.out.println(Arrays.toString(d));\n        dfs1(0,-1,0);\n        return res;\n    }\n}",
    "submit_ts": "1722698501",
    "subm_id": "552271157"
}