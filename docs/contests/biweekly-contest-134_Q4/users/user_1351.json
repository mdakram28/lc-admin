{
    "username": "pk007",
    "submission": "class Solution {\n    public long countSubarrays(int[] nums, int k) {\n        int n = nums.length;\n        long ans = 0;\n        int start = -1;\n        int and = (1 << 31) - 1;\n        int[] nearest = new int[32];\n        int nearK = -1;\n        Arrays.fill(nearest, -1);\n        for (int end = 0; end <n; end++) {\n            int currKAnd = k & nums[end];\n            if (currKAnd < k) {\n                start = end;\n                and = (1 << 31) - 1;\n                Arrays.fill(nearest, -1);\n                nearK = -1;\n                continue;\n            }\n            currKAnd = k | nums[end];\n            if (currKAnd == k) {\n                ans += (end - start);\n                nearK = end;\n            } else {\n                int last = end;\n                int val = nums[end] ^ k;\n                for (int i=0; i<31; i++) {\n                    if ((val & (1<<i)) > 0) {\n                        last = Math.min(last, nearest[i]);\n                    } else {\n                        nearest[i] = end;\n                    }\n                }\n                last = Math.max(nearK, last);\n                if (last >= 0) ans += last - start;\n                // System.out.println(\"__\" + end + \" \" + last + \" \" + start);\n            }\n            // System.out.println(end + \" \" + ans);\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1720280847",
    "subm_id": "1311804171"
}