{
    "username": "\u601d\u6e90",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        max_board_value = max(max(row) for row in board)\n        current_max_value = float('-inf')\n\n        @lru_cache(maxsize=1000)\n        def dp(row_mask: int, col_mask: int, count: int, current_sum: int) -> int:\n            nonlocal current_max_value\n            if count == 3:\n                current_max_value = max(current_max_value, current_sum)\n                return current_sum\n            \n            # \u66f4\u4e25\u683c\u7684\u526a\u679d\n            if current_sum + (3 - count) * max_board_value <= current_max_value:\n                return float('-inf')\n\n            max_value = float('-inf')\n            for i in range(m):\n                if row_mask & (1 << i):\n                    continue\n                for j in range(n):\n                    if col_mask & (1 << j):\n                        continue\n                    \n                    # \u9009\u62e9\u5f53\u524d\u7684\u6700\u5927\u53ef\u80fd\u503c\n                    potential_value = board[i][j] + current_sum\n                    if potential_value + (2 - count) * max_board_value <= current_max_value:\n                        continue\n                    \n                    value = board[i][j] + dp(row_mask | (1 << i), col_mask | (1 << j), count + 1, current_sum + board[i][j])\n                    max_value = max(max_value, value)\n            \n            return max_value\n\n        return dp(0, 0, 0, 0) // 2",
    "submit_ts": "1723909111",
    "subm_id": "556334552"
}