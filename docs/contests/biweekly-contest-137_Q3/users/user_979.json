{
    "username": "Shivam Verma",
    "submission": "import java.util.*;\n\nclass Solution {\n    public long maximumValueSum(int[][] grid) {\n        int numberOfRows = grid.length;\n        int numberOfColumns = grid[0].length;\n\n        long maxTotalValue = Long.MIN_VALUE;\n\n        List<List<Map.Entry<Integer, Integer>>> rowTopValues = extractTopValuesFromRows(grid, numberOfRows);\n        List<List<Map.Entry<Integer, Integer>>> columnTopValues = extractTopValuesFromColumns(grid, numberOfRows, numberOfColumns);\n\n        maxTotalValue = calculateMaximumValueSum(rowTopValues, numberOfRows);\n\n        return maxTotalValue;\n    }\n\n    private List<List<Map.Entry<Integer, Integer>>> extractTopValuesFromRows(int[][] grid, int numberOfRows) {\n        List<List<Map.Entry<Integer, Integer>>> rowTopValues = new ArrayList<>(numberOfRows);\n        for (int rowIndex = 0; rowIndex < numberOfRows; ++rowIndex) {\n            List<Integer> rowNumbers = new ArrayList<>();\n            for (int number : grid[rowIndex]) {\n                rowNumbers.add(number);\n            }\n            rowTopValues.add(getTopThreeValues(rowNumbers));\n        }\n        return rowTopValues;\n    }\n\n    private List<List<Map.Entry<Integer, Integer>>> extractTopValuesFromColumns(int[][] grid, int numberOfRows, int numberOfColumns) {\n        List<List<Map.Entry<Integer, Integer>>> columnTopValues = new ArrayList<>(numberOfColumns);\n        for (int columnIndex = 0; columnIndex < numberOfColumns; ++columnIndex) {\n            List<Integer> columnNumbers = new ArrayList<>(numberOfRows);\n            for (int rowIndex = 0; rowIndex < numberOfRows; ++rowIndex) {\n                columnNumbers.add(grid[rowIndex][columnIndex]);\n            }\n            columnTopValues.add(getTopThreeValues(columnNumbers));\n        }\n        return columnTopValues;\n    }\n\n    private List<Map.Entry<Integer, Integer>> getTopThreeValues(List<Integer> numbers) {\n        List<Map.Entry<Integer, Integer>> topThreeEntries = new ArrayList<>();\n        List<Map.Entry<Integer, Integer>> indexedNumbers = new ArrayList<>();\n        \n        for (int index = 0; index < numbers.size(); ++index) {\n            indexedNumbers.add(new AbstractMap.SimpleEntry<>(numbers.get(index), index));\n        }\n        \n        indexedNumbers.sort((entry1, entry2) -> entry2.getKey().compareTo(entry1.getKey()));\n        \n        for (int index = 0; index < 3 && index < indexedNumbers.size(); ++index) {\n            topThreeEntries.add(indexedNumbers.get(index));\n        }\n        \n        return topThreeEntries;\n    }\n\n    private long calculateMaximumValueSum(List<List<Map.Entry<Integer, Integer>>> rowTopValues, int numberOfRows) {\n        long maxTotalValue = Long.MIN_VALUE;\n        \n        for (int firstRowIndex = 0; firstRowIndex < numberOfRows; ++firstRowIndex) {\n            for (int secondRowIndex = firstRowIndex + 1; secondRowIndex < numberOfRows; ++secondRowIndex) {\n                for (int thirdRowIndex = secondRowIndex + 1; thirdRowIndex < numberOfRows; ++thirdRowIndex) {\n                    maxTotalValue = Math.max(maxTotalValue, computeMaxValueForThreeRows(rowTopValues, firstRowIndex, secondRowIndex, thirdRowIndex));\n                }\n            }\n        }\n        \n        return maxTotalValue;\n    }\n\n    private long computeMaxValueForThreeRows(List<List<Map.Entry<Integer, Integer>>> rowTopValues, \n                                              int firstRowIndex, int secondRowIndex, int thirdRowIndex) {\n        long bestPossibleValue = Long.MIN_VALUE;\n\n        for (Map.Entry<Integer, Integer> firstEntry : rowTopValues.get(firstRowIndex)) {\n            int firstValue = firstEntry.getKey();\n            int firstColumn = firstEntry.getValue();\n            for (Map.Entry<Integer, Integer> secondEntry : rowTopValues.get(secondRowIndex)) {\n                int secondValue = secondEntry.getKey();\n                int secondColumn = secondEntry.getValue();\n                if (secondColumn == firstColumn) continue;\n                for (Map.Entry<Integer, Integer> thirdEntry : rowTopValues.get(thirdRowIndex)) {\n                    int thirdValue = thirdEntry.getKey();\n                    int thirdColumn = thirdEntry.getValue();\n                    if (thirdColumn == firstColumn || thirdColumn == secondColumn) continue;\n                    bestPossibleValue = Math.max(bestPossibleValue, (long)firstValue + secondValue + thirdValue);\n                }\n            }\n        }\n        \n        return bestPossibleValue;\n    }\n}\n",
    "submit_ts": "1723910399",
    "subm_id": "1359229422"
}