{
    "username": "skjsarthak",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size()+1;\n        int n2 = edges2.size() +1;\n        vector<vector<int>>g1(n1);\n         vector<vector<int>>g2(n2);\n        for(const auto& edge :edges1)\n        {\n            g1[edge[0]].push_back(edge[1]);\n            g1[edge[1]].push_back(edge[0]);       \n        }\n        \n        for(const auto& edge :edges2)\n        {\n            g2[edge[0]].push_back(edge[1]);\n            g2[edge[1]].push_back(edge[0]);       \n        }\n        \n        auto dfs = [](const vector<vector<int>>&g,int s,int& fn){\n            int n = g.size();\n            vector<int>dist(n,-1);\n            function<void(int,int)> dfsvisit =[&](int node,int d){\n                dist[node]=d;\n                if(d>dist[fn])fn=node;\n                for(int neighbour:g[node])\n                {\n                    if(dist[neighbour]==-1)dfsvisit(neighbour,d+1);\n                }\n            };\n            fn =s;\n            dfsvisit(s,0);\n            return dist[fn];\n        };\n        int node1 =0;\n        dfs(g1,0,node1);\n        int d1 = dfs(g1,node1,node1);\n        \n        int node2 =0;\n        dfs(g2,0,node2);\n        int d2 = dfs(g2,node2,node2);\n        \n        int minDiameter = max(d1,d2);\n        int h1 = (d1 +1)/2;\n        int h2 = (d2 +1)/2;\n        minDiameter = max(minDiameter,h1+h2+1);\n        return minDiameter;\n        \n    }\n};",
    "submit_ts": 1719718822.0
}