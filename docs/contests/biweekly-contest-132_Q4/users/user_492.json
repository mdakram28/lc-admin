{
    "username": "pewlkit",
    "submission": "class Solution {\npublic:\n    int maximumLength(std::vector<int>& nums, int k) {\n        int n = nums.size();\n        std::vector<std::vector<int>> dp(n, std::vector<int>(k + 1, 1));\n        int maxLength = 1;\n        std::vector<int> maxDp(k + 1, -1);\n        std::vector<std::unordered_map<int, int>> maxMap(k + 1);\n        int sum=0;\n        int count=0;\n        int variablee=12;\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j <= k; j++) {\n                for (int l = 0; l < j; l++) {\n                    dp[i][j] = std::max(dp[i][j], 1 + maxDp[l]);\n                }\n                if (maxMap[j].find(nums[i]) != maxMap[j].end()) {\n                    dp[i][j] = std::max(dp[i][j], 1 + maxMap[j][nums[i]]);\n                }\n                maxLength = std::max(maxLength,dp[i][j]);\n            }\n            for (int j = 0; j <= k; j++) {\n                maxDp[j] = std::max(maxDp[j], dp[i][j]);\n                maxMap[j][nums[i]]=std::max(maxMap[j][nums[i]], dp[i][j]);\n            }\n        }\n        \n        return maxLength;\n    }\n};",
    "submit_ts": "1717862386",
    "subm_id": "1281822112"
}