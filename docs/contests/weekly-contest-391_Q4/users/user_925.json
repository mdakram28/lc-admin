{
    "username": "jkq247",
    "submission": "class Solution {\n    public int getSum(TreeMap<Integer, Integer> map) {\n        return map.lastKey() - map.firstKey();\n    }\n\n    public int minimumDistance(int[][] points) {\n        TreeMap<Integer, Integer> A = new TreeMap<>(); //x+y\n        TreeMap<Integer, Integer> B = new TreeMap<>(); //x-y\n        TreeMap<Integer, Integer> C = new TreeMap<>(); //-x+y\n        TreeMap<Integer, Integer> D = new TreeMap<>(); //-x-y\n        int n = points.length;\n        for (int i = 0; i < n; i++) {\n            A.put(points[i][0] + points[i][1], A.getOrDefault(points[i][0] + points[i][1], 0) + 1);\n            B.put(points[i][0] - points[i][1], B.getOrDefault(points[i][0] - points[i][1], 0) + 1);\n            C.put(-points[i][0] + points[i][1], C.getOrDefault(-points[i][0] + points[i][1], 0) + 1);\n            D.put(-points[i][0] - points[i][1], D.getOrDefault(-points[i][0] - points[i][1], 0) + 1);\n        }\n\n        int ans = Integer.MAX_VALUE;\n        for (int i = 0; i < n; i++) {\n\n            A.put(points[i][0] + points[i][1], A.get(points[i][0] + points[i][1]) - 1);\n            if (A.get(points[i][0] + points[i][1]) == 0) {\n                A.remove(points[i][0] + points[i][1]);\n            }\n\n            B.put(points[i][0] - points[i][1], B.get(points[i][0] - points[i][1]) - 1);\n            if (B.get(points[i][0] - points[i][1]) == 0) {\n                B.remove(points[i][0] - points[i][1]);\n            }\n\n            C.put(-points[i][0] + points[i][1], C.get(-points[i][0] + points[i][1]) - 1);\n            if (C.get(-points[i][0] + points[i][1]) == 0) {\n                C.remove(-points[i][0] + points[i][1]);\n            }\n\n            D.put(-points[i][0] - points[i][1], D.get(-points[i][0] - points[i][1]) - 1);\n            if (D.get(-points[i][0] - points[i][1]) == 0) {\n                D.remove(-points[i][0] - points[i][1]);\n            }\n\n            int maxDis = getSum(A);\n            maxDis = Math.max(maxDis, getSum(B));\n            maxDis = Math.max(maxDis, getSum(C));\n            maxDis = Math.max(maxDis, getSum(D));\n            ans = Math.min(ans, maxDis);\n            A.put(points[i][0] + points[i][1], A.getOrDefault(points[i][0] + points[i][1], 0) + 1);\n            B.put(points[i][0] - points[i][1], B.getOrDefault(points[i][0] - points[i][1], 0) + 1);\n            C.put(-points[i][0] + points[i][1], C.getOrDefault(-points[i][0] + points[i][1], 0) + 1);\n            D.put(-points[i][0] - points[i][1], D.getOrDefault(-points[i][0] - points[i][1], 0) + 1);\n        }\n        return ans;\n    }\n}"
}