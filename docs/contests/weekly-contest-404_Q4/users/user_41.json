{
    "username": "vonrong",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n, m = 0, 0\n        for u, v in edges1:\n            n = max(n, u, v)\n        for u, v in edges2:\n            m = max(m, u, v)\n        n += 1\n        m += 1\n        \n        cnt1 = [[] for _ in range(n)]\n        cnt2 = [[] for _ in range(m)]\n        \n        for u, v in edges1:\n            cnt1[u].append(v)\n            cnt1[v].append(u)\n        for u, v in edges2:\n            cnt2[u].append(v)\n            cnt2[v].append(u)\n        global mx1, mxnode1, mx2, mxnode2\n        mx1 = 0\n        mxnode1 = 0\n        def dfs11(prenode, node, d):\n            global mx1, mxnode1, mx2, mxnode2\n            if mx1 < d:\n                mx1 = d\n                mxnode1 = node\n            for nextnode in cnt1[node]:\n                if nextnode != prenode:\n                    dfs11(node, nextnode, d+1)\n        dfs11(-1, 0, 0)\n        dfs11(-1, mxnode1, 0)\n        \n        mx2 = 0\n        mxnode2 = 0\n        def dfs22(prenode, node, d):\n            global mx1, mxnode1, mx2, mxnode2\n            if mx2 < d:\n                mx2 = d\n                mxnode2 = node\n            for nextnode in cnt2[node]:\n                if nextnode != prenode:\n                    dfs22(node, nextnode, d+1)\n        dfs22(-1, 0, 0)\n        dfs22(-1, mxnode2, 0)\n        print(mx1, mx2)\n        return max((mx1+1)//2 + (mx2+1)//2 + 1, mx1, mx2)\n                ",
    "submit_ts": "1719715604",
    "subm_id": "1304341230"
}