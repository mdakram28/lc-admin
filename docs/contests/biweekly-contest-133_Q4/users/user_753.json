{
    "username": "predator_11",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    vector<vector<ll>> dp;\n    int maxInv;\n    int mod;\n    int solve(int n)\n    {\n        ll result = 0;\n        for (int invCount = 0; invCount <= maxInv; ++invCount) {\n            result = (result + dp[n][invCount]) % mod;\n        }\n        \n        return result;\n    }\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> reqMap;\n        maxInv=405;\n        mod=1e9+7;\n        for (auto& req : requirements) {\n            reqMap[req[0] + 1] = req[1]; \n        }\n        dp.resize(n + 1, vector<ll>(maxInv + 1, 0));\n        dp[0][0] = 1;\n        for (int prefixLen = 1; prefixLen <= n; ++prefixLen) {\n            for (int invCount = 0; invCount <= maxInv; ++invCount) {\n                for (int pos = 0; pos < prefixLen; ++pos) {\n                    int prevInvCount = invCount - pos;\n                    if (prevInvCount >= 0) {\n                        dp[prefixLen][invCount] = \n                            (dp[prefixLen][invCount] + \n                             dp[prefixLen - 1][prevInvCount]) % mod;\n                    }\n                }\n            }\n            if (reqMap.count(prefixLen) > 0) {\n                int reqInv = reqMap[prefixLen];\n                for (int invCount = 0; invCount <= maxInv; ++invCount) {\n                    if (invCount != reqInv) {\n                        dp[prefixLen][invCount] = 0;\n                    }\n                }\n            }\n        }\n        return solve(n);\n    }\n};\n",
    "submit_ts": "1719071145",
    "subm_id": "1296840076"
}