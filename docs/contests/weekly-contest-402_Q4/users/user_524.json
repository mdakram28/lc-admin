{
    "username": "vijaykatta3094",
    "submission": "class Solution:\n    def __init__(self):\n        self.n = None\n        self.tree = None\n        self.nums = None\n        \n    def update(self, index, value):\n        index += 1\n        while index <= self.n:\n            self.tree[index] += value\n            index += index & -index\n    \n    def prefix_sum(self, index):\n        result = 0\n        while index > 0:\n            result += self.tree[index]\n            index -= index & -index\n        return result\n    \n    def range_sum(self, left, right):\n        left += 1\n        right += 1\n        return self.prefix_sum(right) - self.prefix_sum(left - 1)\n    \n    def update_peak_status(self, ind, nums):\n        if ind <= 0 or ind >= self.n - 1:\n            return\n        new = int(nums[ind - 1] < nums[ind] > nums[ind + 1])\n        old = self.range_sum(ind, ind)\n        update_value = new - old\n        if update_value != 0:\n            self.update(ind, update_value)\n    \n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        self.n = len(nums)\n        self.tree = [0] * (self.n + 1)\n        peaks = [int(i != 0 and i != self.n - 1 and nums[i - 1] < nums[i] > nums[i + 1]) for i in range(self.n)]\n        \n        for i, val in enumerate(peaks):\n            if val:\n                self.update(i, val)\n            \n        res = []\n        for qt, arg1, arg2 in queries:\n            if qt == 1:\n                l, r = arg1, arg2\n                if r - 1 >= l + 1:\n                    res.append(self.range_sum(l + 1, r - 1))\n                else:\n                    res.append(0)\n            if qt == 2:\n                index, val = arg1, arg2\n                nums[index] = val\n                for ind in range(index - 1, index + 2):\n                    self.update_peak_status(ind, nums)\n        return res",
    "submit_ts": 1718508093.0
}