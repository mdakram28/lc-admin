{
    "username": "zhi-zhi",
    "submission": "class SegmentTreeNode {\n    left: SegmentTreeNode | null = null\n    right: SegmentTreeNode | null = null\n    sum: number = 0\n    range: number = 0\n    lazy: number | null = null // \u4f7f\u7528 number \u4f5c\u4e3a\u61d2\u60f0\u6807\u8bb0\uff0cnull \u8868\u793a\u65e0\u61d2\u60f0\u6807\u8bb0\n  }\n\n  class SegmentTree {\n    root: SegmentTreeNode\n    nums: number[]\n\n    constructor(nums: number[]) {\n      this.nums = nums\n      this.root = new SegmentTreeNode()\n      this._build(this.root, 0, nums.length - 1)\n    }\n\n    private _build(node: SegmentTreeNode, left: number, right: number) {\n      if (left === right) {\n        node.sum = this.nums[left]\n        node.range = 1\n        return\n      }\n\n      node.left = new SegmentTreeNode()\n      node.right = new SegmentTreeNode()\n\n      const mid = left + ((right - left) >> 1)\n      this._build(node.left, left, mid)\n      this._build(node.right, mid + 1, right)\n\n      node.sum = node.left.sum + node.right.sum\n      node.range = right - left + 1\n    }\n\n    updateRangeSet(left: number, right: number, value: number) {\n      this._updateRangeSet(this.root, 0, this.nums.length - 1, left, right, value)\n    }\n\n    private _updateRangeSet(node: SegmentTreeNode, left: number, right: number, updateLeft: number, updateRight: number, value: number) {\n      if (left > updateRight || right < updateLeft || left > right) return\n      if (updateLeft <= left && right <= updateRight) {\n        node.lazy = value\n        node.sum = value * node.range\n        return\n      }\n\n      this._pushDown(node)\n\n      const mid = left + ((right - left) >> 1)\n      this._updateRangeSet(node.left, left, mid, updateLeft, updateRight, value)\n      this._updateRangeSet(node.right, mid + 1, right, updateLeft, updateRight, value)\n\n      node.sum = node.left.sum + node.right.sum\n    }\n\n    queryRange(left: number, right: number): number {\n      return this._queryRange(this.root, 0, this.nums.length - 1, left, right)\n    }\n\n    private _queryRange(node: SegmentTreeNode, left: number, right: number, queryLeft: number, queryRight: number): number {\n      if (left > queryRight || right < queryLeft || left > right) return 0\n      if (queryLeft <= left && right <= queryRight) return node.sum\n\n      this._pushDown(node)\n\n      const mid = left + ((right - left) >> 1)\n\n      return this._queryRange(node.left, left, mid, queryLeft, queryRight) +\n        this._queryRange(node.right, mid + 1, right, queryLeft, queryRight)\n    }\n\n    private _pushDown(node: SegmentTreeNode) {\n      if (!node.left || !node.right || node.lazy === null) return\n\n      node.left.lazy = node.lazy\n      node.left.sum = node.lazy * node.left.range\n\n      node.right.lazy = node.lazy\n      node.right.sum = node.lazy * node.right.range\n\n      node.lazy = null\n    }\n  }\n\n  function shortestDistanceAfterQueries(n: number, queries: number[][]): number[] {\n    const nums = Array(n).fill(1)  // \u521d\u59cb\u5316\u6bcf\u4e2a\u8282\u70b9\u7684 value \u90fd\u662f 1\n    nums[0] = 0  // \u8282\u70b9 0 \u7684 value \u662f 0\n    const segTree = new SegmentTree(nums)\n    const answer: number[] = []\n\n    for (const [u, v] of queries) {\n      segTree.updateRangeSet(u + 1, v - 1, 0)  // \u5c06\u533a\u95f4 [u, v] \u7684\u503c\u8bbe\u4e3a 0\n      const totalSum = segTree.queryRange(0, n - 1)\n      answer.push(totalSum)\n    }\n\n    return answer;\n  }\n\n",
    "submit_ts": "1722740694",
    "subm_id": "1343726415"
}