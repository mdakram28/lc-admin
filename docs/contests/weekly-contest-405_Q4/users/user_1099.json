{
    "username": "RGcodes1405",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n    TrieNode() : cost(INT_MAX) {}\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    Trie() {\n        root = new TrieNode();\n    }\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) node->children[c] = new TrieNode();\n            node = node->children[c];\n        }\n        node->cost = min(node->cost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        int m = costs.size();\n        \n        Trie trie;\n        for(int i = 0 ; i < m ; i++){\n            trie.insert(words[i],costs[i]);\n        }\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n        \n        for(int i = 0 ; i < n ;i++){\n            if(dp[i]==INT_MAX)continue;\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (!node->children.count(target[j])) break;\n                node = node->children[target[j]];\n                if (node->cost != INT_MAX) dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720323739",
    "subm_id": "1312382877"
}