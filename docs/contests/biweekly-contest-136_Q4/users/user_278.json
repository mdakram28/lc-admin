{
    "username": "Atma_",
    "submission": "class Solution {\npublic:\n    \n    int dfs(int node, int parent, vector<vector<int>>& graph, vector<int>& temp, vector<int>& ret){\n        int odd=0;\n        for(auto& g:graph[node]){\n            if(g==parent) continue;\n            int p=dfs(g,node,graph,temp,ret);\n            odd=max(odd,p);\n        }\n        temp[node]=odd;\n        if(node%2==1) odd++;\n        else odd+=2;\n        ret[node]=odd;\n        //cout<<odd<<\" \";\n        return odd;\n    }\n    \n    void dfss(int node, int parent, int upodd, vector<vector<int>>& graph, vector<int>& temp, vector<int>& ret){\n        temp[node]=max(temp[node],upodd);\n        //cout<<upodd<<\" \";\n        vector<int> odds={upodd};\n        for(auto& g:graph[node]){\n            if(g==parent) continue;\n            odds.push_back(ret[g]);\n        }\n        sort(odds.begin(),odds.end());\n        for(auto& g:graph[node]){\n            if(g==parent) continue;\n            int nodd=(odds.back()==ret[g]?odds[odds.size()-2]:odds.back());\n            if(node%2==1){\n                nodd++;\n            }\n            else{\n                nodd+=2;\n            }\n            dfss(g,node,nodd,graph,temp,ret);\n        }\n        \n    }\n    \n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n=edges.size()+1;\n        vector<vector<int>> graph(n);\n        for(auto& e:edges){\n            graph[e[0]].push_back(e[1]);\n            graph[e[1]].push_back(e[0]);\n        }\n        vector<int> ret(n),temp(n);\n        dfs(0,-1,graph,temp,ret);\n        //cout<<\"upoddd \";\n        dfss(0,-1,0,graph,temp,ret);\n        //cout<<endl;\n        return temp;\n    }\n};",
    "submit_ts": "1722699868",
    "subm_id": "1343224817"
}