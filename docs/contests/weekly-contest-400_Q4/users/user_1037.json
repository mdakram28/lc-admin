{
    "username": "hnthach97",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> rmq(19, vector<int>(n + 1, 1000000000));\n        for (int i = 0; i < n; i++) {\n            rmq[0][i + 1] = nums[i];\n        }\n        \n        for (int i = 1; i < 19; i++) {\n            for (int j = 1; j + (1 << i) - 1 <= n; j++) {\n                rmq[i][j] = rmq[i - 1][j] & rmq[i - 1][j + (1 << (i - 1))];\n            }\n        }\n        \n        auto getAnd = [&](int l, int r) {\n            int tmp = __lg(r - l + 1);\n            return rmq[tmp][l] & rmq[tmp][r - (1 << tmp) + 1];\n        };\n        \n        int ans = 1000000000;\n        for (int i = 1; i <= n; i++) {\n            int l = i, r = n;\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                int tmp = getAnd(i, mid);\n                if (tmp <= k) {\n                    ans = min(ans, k - tmp);\n                    r = mid - 1;\n                } else {\n                    l = mid + 1;\n                }\n            }\n            \n            l = i; r = n;\n            while (l <= r) {\n                int mid = (l + r) / 2;\n                int tmp = getAnd(i, mid);\n                if (tmp >= k) {\n                    ans = min(ans, tmp - k);\n                    l = mid + 1;\n                } else {\n                    r = mid - 1;\n                }\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717299622.0
}