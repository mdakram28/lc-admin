{
    "username": "MoggleToggles",
    "submission": "import kotlin.math.max\nimport kotlin.math.min\n\nclass Solution {\n    fun canReachCorner(X: Int, Y: Int, circles: Array<IntArray>): Boolean {\n        val unionFind = UnionFind(circles)\n\n        for (i in circles.indices) {\n            for (j in i + 1 until circles.size) {\n                val xDistance = (circles[i][0] - circles[j][0]).toLong()\n                val yDistance = (circles[i][1] - circles[j][1]).toLong()\n                val squaredCenterDistance = xDistance * xDistance + yDistance * yDistance\n                val radiiSum = (circles[i][2] + circles[j][2]).toLong()\n                val radiiSumSquared = radiiSum * radiiSum\n\n                if (squaredCenterDistance <= radiiSumSquared) {\n                    unionFind.union(i, j)\n                }\n            }\n        }\n\n        for (i in circles.indices) {\n            if (unionFind.minX[i] <= 0 && unionFind.maxX[i] >= X) return false\n            if (unionFind.minY[i] <= 0 && unionFind.maxY[i] >= Y) return false\n            if (unionFind.minX[i] <= 0 && unionFind.minY[i] <= 0) return false\n            if (unionFind.maxX[i] >= X && unionFind.maxY[i] >= Y) return false\n        }\n\n        return true\n    }\n\n    class UnionFind(circles: Array<IntArray>) {\n        val parent = IntArray(circles.size) { it }\n        val size = IntArray(circles.size) { 1 }\n        val minX = IntArray(circles.size) { index -> circles[index][0] - circles[index][2] }\n        val maxX = IntArray(circles.size) { index -> circles[index][0] + circles[index][2] }\n        val minY = IntArray(circles.size) { index -> circles[index][1] - circles[index][2] }\n        val maxY = IntArray(circles.size) { index -> circles[index][1] + circles[index][2] }\n\n        fun find(index: Int): Int {\n            if (parent[index] == index) return index\n\n            parent[index] = find(parent[index])\n            return parent[index]\n        }\n\n        fun union(indexA: Int, indexB: Int) {\n            val rootA = find(indexA)\n            val rootB = find(indexB)\n\n            if (rootA == rootB) return\n\n            if (size[rootA] > size[rootB]) {\n                size[rootA] += size[rootB]\n                parent[rootB] = rootA\n                minX[rootA] = min(minX[rootA], minX[rootB])\n                maxX[rootA] = max(maxX[rootA], maxX[rootB])\n                minY[rootA] = min(minY[rootA], minY[rootB])\n                maxY[rootA] = max(maxY[rootA], maxY[rootB])\n            } else {\n                size[rootB] += size[rootA]\n                parent[rootA] = rootB\n                minX[rootB] = min(minX[rootA], minX[rootB])\n                maxX[rootB] = max(maxX[rootA], maxX[rootB])\n                minY[rootB] = min(minY[rootA], minY[rootB])\n                maxY[rootB] = max(maxY[rootA], maxY[rootB])\n            }\n        }\n    }\n}",
    "submit_ts": "1722136515",
    "subm_id": "1335736904"
}