{
    "username": "celerystalk",
    "submission": "def dfs(i, parent, parent_to_children, parent_to_max2_children, children_to_parent, node_to_max_down_dist, graph):\n    children_to_parent[i] = parent \n    parent_to_children[i] = set()\n    parent_to_max2_children[i] = []\n\n    cur_max = 0\n    for inext in graph.get(i, set()):\n        if inext in children_to_parent:\n            continue\n        parent_to_children[i].add(inext)\n        dfs(inext, i, parent_to_children, parent_to_max2_children, children_to_parent, node_to_max_down_dist, graph)\n        cur_dist = node_to_max_down_dist[inext] + (1 if inext % 2 == 1 else 2)\n        cur_max = max(cur_max, cur_dist)\n        parent_to_max2_children[i].append((cur_dist, inext))\n        parent_to_max2_children[i].sort(key = lambda x : -x[0])\n        if len(parent_to_max2_children[i]) > 2:\n            parent_to_max2_children[i].pop()\n    node_to_max_down_dist[i] = cur_max\n\ndef dfs2(i, parent, parent_to_max2_children, parent_to_children, node_to_max_up_dist):\n    max_up_dist = 0\n    if parent is not None:\n        max_up_dist = node_to_max_up_dist[parent] + (1 if parent % 2 == 1 else 2)\n        for dist, c in parent_to_max2_children[parent]:\n            if c != i:\n                max_up_dist = max(max_up_dist, (1 if parent % 2 == 1 else 2) + dist)\n                break\n\n    node_to_max_up_dist[i] = max_up_dist\n\n    for c in  parent_to_children[i]:\n        dfs2(c, i, parent_to_max2_children, parent_to_children, node_to_max_up_dist)\n\n    \nclass Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        parent_to_children = {}\n        parent_to_max2_children = {}\n        children_to_parent = {}\n\n        node_to_max_down_dist = {}\n        node_to_max_up_dist = {}\n        \n\n        graph = {}\n        for s, e in edges:\n            if s not in graph:\n                graph[s] = set()\n            if e not in graph:\n                graph[e] = set()\n\n            graph[s].add(e)\n            graph[e].add(s)\n\n        dfs(0, None, parent_to_children, parent_to_max2_children, children_to_parent, node_to_max_down_dist, graph)\n\n        dfs2(0, None, parent_to_max2_children, parent_to_children, node_to_max_up_dist)\n\n        nn = len(edges) + 1\n        res = [0] * nn\n        for i in range(nn):\n            res[i] = max(node_to_max_up_dist[i], node_to_max_down_dist[i])\n        \n        return res\n\n\n        ",
    "submit_ts": "1722699632",
    "subm_id": "1343217577"
}