{
    "username": "luckyboylxc",
    "submission": "from sortedcontainers import SortedList\n\nclass SegmentTree(object):\n    def __init__(self, n):\n        self.size = n\n        self.tree = [float('-inf')] * (2*n + 1)\n        #self.build(arr)\n    def build(self, arr):\n        for i in range(self.size):\n            self.tree[i + self.size] = arr[i]\n        for i in range(self.size - 1, 0, -1):\n            self.tree[i] = max(self.tree[2*i],self.tree[2*i + 1])\n\n    def update(self, idx, val):\n        idx += self.size\n        self.tree[idx] = val\n        while idx > 1:\n            parentIdx = idx//2\n            self.tree[parentIdx] = max(self.tree[parentIdx*2], self.tree[parentIdx*2 +1])\n            idx = parentIdx\n\n    def query(self, l, r):\n\n        l += self.size\n        r += self.size \n        ans = float('-inf')\n        while l <= r:\n            #print(l, r)\n            if(l%2):\n                ans = max(ans, self.tree[l])\n                l += 1\n            if(r%2==0):\n                ans = max(ans, self.tree[r])\n                r -= 1                \n            l //= 2\n            r //= 2\n        return ans\n\nclass Solution(object):\n    def getResults(self, queries):\n        \"\"\"\n        :type queries: List[List[int]]\n        :rtype: List[bool]\n        \"\"\"\n        UP = 5*(10**4)\n        sl = SortedList()\n        sl.add(0)\n        sl.add(1+UP)\n        sg = SegmentTree(1+UP)\n        sg.update(0,UP)\n\n        ans = []\n        for q in queries:\n            if(q[0] == 1):\n                #first type\n                x = q[1]\n                #find interval, and split\n                idx = sl.bisect_left(x)\n                #update intervals\n                prevPos = sl[idx-1]\n                prevRange = x-prevPos\n                #print(\"prev position update\")\n                #print((prevPos,prevRange))\n                sg.update(prevPos,prevRange)\n                #update current\n                nextPos = sl[idx]\n                nextRange = nextPos-x\n                sg.update(x,nextRange)\n                #print(\"Current position update\")\n                #print((x,nextRange))\n\n                sl.add(x)\n                #print(sl)                \n            else:\n                #type 2\n                x,sz = q[1],q[2]\n                \n                #find obstacle pos before x \n                idx = sl.bisect_right(x)\n                if(sl[idx-1] == x):\n                    #there's obstacle at x\n                    tempMax = float('-inf')\n                    obsPos = sl[idx-1]\n                else:\n                    #no obstacle at x\n                    tempMax = x - sl[idx-1]\n                    obsPos = sl[idx-1]\n\n                maxRes = sg.query(0,obsPos-1)\n                tempMax = max(tempMax,maxRes)\n                #print(\"Max val for pos {0}\".format(x-1))\n                #print(maxRes)\n                if(tempMax>=sz):\n                    ans.append(True)\n                else:\n                    ans.append(False)\n        return ans",
    "submit_ts": "1716651640",
    "subm_id": "1267645141"
}