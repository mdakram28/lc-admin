{
    "username": "Vaibhav_Pawar1234",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\nusing namespace std;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int min_cost;\n\n    TrieNode() : min_cost(INT_MAX) {}\n\n    void updateMinCost(int cost) {\n        if (cost < min_cost) {\n            min_cost = cost;\n        }\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        buildTrie(root, words, costs);\n\n        int n = target.size();\n        vector<long long> dp(n + 1, INT_MAX); // Use long long to avoid integer overflow\n        dp[0] = 0;\n\n        for (int i = 0; i < n; ++i) {\n            TrieNode* curr = root;\n            for (int j = i; j < n; ++j) {\n                char c = target[j];\n                if (curr->children.find(c) == curr->children.end()) {\n                    break;\n                }\n                curr = curr->children[c];\n                // Update dp[j + 1] with the minimum cost considering the current prefix\n                if (dp[i] != INT_MAX) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + static_cast<long long>(curr->min_cost));\n                }\n            }\n        }\n\n        return dp[n] >= INT_MAX ? -1 : static_cast<int>(dp[n]);\n    }\n\nprivate:\n    void buildTrie(TrieNode* root, vector<string>& words, vector<int>& costs) {\n        for (int i = 0; i < words.size(); ++i) {\n            string& word = words[i];\n            int cost = costs[i];\n\n            TrieNode* curr = root;\n            for (char c : word) {\n                if (curr->children.find(c) == curr->children.end()) {\n                    curr->children[c] = new TrieNode();\n                }\n                curr = curr->children[c];\n            }\n            curr->updateMinCost(cost);\n        }\n    }\n};\n",
    "submit_ts": "1720323673",
    "subm_id": "1312381269"
}