{
    "username": "\u4e00\u53ea\u6ce2\u65af\u732b",
    "submission": "use std::mem;\n\nimpl Solution {\n    pub fn maximum_value_sum(board: Vec<Vec<i32>>) -> i64 {\n        let m = board.len();\n        let n = board[0].len();\n    \n        let mut curr_state0 = vec![None; n];\n        let mut curr_state1 = vec![None; n*n];\n    \n        let mut next_state0 = vec![None; n];\n        let mut next_state1 = vec![None; n*n];\n    \n        let mut result = i64::MIN;\n    \n    \n        for row in board.iter(){\n            let mut max_values = [(i64::MIN, 0); 3];\n            for (i , &v1) in row.iter().enumerate(){\n                let v1= v1 as i64;\n                if v1 > max_values[0].0{\n                    max_values[2] = max_values[1];\n                    max_values[1] = max_values[0];\n                    max_values[0] = (v1, i);\n                }\n                else if v1 > max_values[1].0{\n                    max_values[2] = max_values[1];\n                    max_values[1] = (v1, i);\n                }\n                else if v1 > max_values[2].0{\n                    max_values[2] = (v1, i);\n                }\n    \n                next_state0[i] = max(curr_state0[i], Some(v1));\n                for (j , &v2) in row.iter().enumerate(){\n                    if i == j {\n                        continue;\n                    }\n    \n                    let index = i*n + j;\n                    next_state1[index] = max(curr_state1[index], add(curr_state0[i], Some(v2 as i64)));\n                }\n            }\n    \n            for (index , &v) in curr_state1.iter().enumerate(){\n                let Some(v) = v else {\n                    continue;\n                };\n                let i = index / n;\n                let j = index % n;\n                if i == max_values[0].1 && j == max_values[1].1 || i == max_values[1].1 && j == max_values[0].1{\n                    result = result.max(v  + max_values[2].0);\n                }else if i == max_values[0].1 || j == max_values[0].1{\n                    result = result.max(v  + max_values[1].0);\n                }else {\n                    result = result.max(v  + max_values[0].0);\n                }\n            }\n    \n            mem::swap(&mut curr_state0, &mut next_state0);\n            mem::swap(&mut curr_state1, &mut next_state1);\n            next_state0.fill(None);\n            next_state1.fill(None);\n        }\n    \n        result\n    }\n}\n\nfn max(a: Option<i64> , b: Option<i64>) -> Option<i64>{\n    match (a,b){\n        (Some(a), Some(b)) => Some(a.max(b)),\n        (Some(a), None) => Some(a),\n        (None, Some(b)) => Some(b),\n        (None, None) => None,\n    }\n}\n\nfn add(a: Option<i64> , b: Option<i64>) -> Option<i64>{\n    match (a,b){\n        (Some(a), Some(b)) => Some(a + b),\n        (Some(a), None) => None,\n        (None, Some(b)) => None,\n        (None, None) => None,\n    }\n}\n",
    "submit_ts": "1723907187",
    "subm_id": "556324064"
}