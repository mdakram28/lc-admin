{
    "username": "hxu10",
    "submission": "class Solution(object):\n    def canReachCorner(self, X, Y, circles):\n        \"\"\"\n        :type X: int\n        :type Y: int\n        :type circles: List[List[int]]\n        :rtype: bool\n        \"\"\"\n        n = len(circles)\n        \n        group = [i for i in range(n+4)]\n        \n        valid = []\n        \n        \n        def unionfind(root):\n            son = root\n            while root!=group[root]:\n                root = group[root]\n                \n            while son!=root:\n                temp = group[son]\n                group[son] = root\n                son = group[temp]\n            return root\n        \n\n            \n        \n        \n        def judge(circle1,circle2):\n            x1,y1,r1 = circle1\n            x2,y2,r2 = circle2\n            \n            dd = (x2 - x1) * (x2-x1) + (y2-y1) * (y2-y1)\n            \n            if dd <= (r1+r2)*(r1+r2):\n                return True\n            else:\n                return False\n            \n            \n        def judge2(circle, x1,x2, yy):\n            \n            \n            x,y,r = circle\n            \n            if (x-x1)**2 + (yy-y)**2 <= r**2:\n                return True\n            if (x-x2)**2 + (yy-y)**2 <= r**2:\n                return True\n            \n            if x1<=x<=x2 and (y-yy)**2 <= r**2:\n                return True\n            \n            return False\n        \n        \n        def judge3(circle, y1,y2,xx):\n            x,y,r = circle\n            \n            if (y-y1)**2 + (xx-x)**2 <= r**2:\n                return True\n            if (y-y2)**2 + (xx-x)**2 <= r**2:\n                return True\n            \n            if y1<=y<=y2 and (x-xx)**2 <= r**2:\n                return True\n            \n            return False           \n            \n        \n            \n            \n            \n            \n            \n            \n            \n            \n            \n            \n\n        \n        \n                \n            \n            \n            \n        \n        \n        for i in range(n-1):\n            for j in range(i+1,n):\n                if judge(circles[i],circles[j]):\n                    rooti = unionfind(i)\n                    rootj = unionfind(j)\n                    group[max(rooti,rootj)] = min(rooti,rootj)\n                    \n                    \n    \n                    \n                    \n\n                    \n\n            \n            \n        for i in range(n):\n            if judge2(circles[i], 0,X,0):\n                root1 = unionfind(i)\n                root2 = unionfind(n)\n                group[max(root1,root2)] = min(root1,root2)\n                \n            if judge2(circles[i],0,X,Y):\n                root1 = unionfind(i)\n                root2 = unionfind(n+1)\n                group[max(root1,root2)] = min(root1,root2)      \n   \n\n            if judge3(circles[i], 0,Y,0):\n                root1 = unionfind(i)\n                root2 = unionfind(n+2)\n                group[max(root1,root2)] = min(root1,root2)\n                \n            if judge3(circles[i],0,Y,X):\n                root1 = unionfind(i)\n                root2 = unionfind(n+3)\n                group[max(root1,root2)] = min(root1,root2)  \n                \n        \n        for i in range(n+4):\n            group[i] = unionfind(i)\n            \n            \n            \n        print(group)\n            \n            \n            \n        \n                \n        if group[n]==group[n+1] or group[n+2]==group[n+3] or group[n]==group[n+2] or group[n+1]==group[n+3]:\n            return False\n        \n        \n            \n            \n\n            \n                \n            \n        return True\n    \n                \n            \n            \n                \n            \n            \n            \n                \n            \n    \n            \n        \n                \n                \n        ",
    "submit_ts": "1722139067",
    "subm_id": "1335806941"
}