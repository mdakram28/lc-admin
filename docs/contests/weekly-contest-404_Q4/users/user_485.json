{
    "username": "ardekarsanket",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(int start, const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n\n        int farthest_node = start;\n        int max_dist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > max_dist) {\n                        max_dist = dist[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n\n        return {farthest_node, max_dist};\n    }\n\n    int find_diameter(const vector<vector<int>>& adj) {\n        pair<int, int> first_bfs = bfs(0, adj);\n        pair<int, int> second_bfs = bfs(first_bfs.first, adj);\n        return second_bfs.second;\n    }\n\n    vector<int> find_centers(const vector<vector<int>>& adj) {\n        int n = adj.size();\n        vector<int> degree(n, 0);\n        vector<int> leaves;\n\n        for (int i = 0; i < n; ++i) {\n            degree[i] = adj[i].size();\n            if (degree[i] == 1 || degree[i] == 0) {\n                leaves.push_back(i);\n            }\n        }\n\n        int count = leaves.size();\n\n        while (count < n) {\n            vector<int> new_leaves;\n            for (int leaf : leaves) {\n                for (int neighbor : adj[leaf]) {\n                    if (--degree[neighbor] == 1) {\n                        new_leaves.push_back(neighbor);\n                    }\n                }\n            }\n            count += new_leaves.size();\n            leaves = new_leaves;\n        }\n\n        return leaves;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1,vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        vector<vector<int>> adj1(n);\n        vector<vector<int>> adj2(m);\n\n        for (const auto& edge : edges1) {\n            adj1[edge[0]].push_back(edge[1]);\n            adj1[edge[1]].push_back(edge[0]);\n        }\n\n        for (const auto& edge : edges2) {\n            adj2[edge[0]].push_back(edge[1]);\n            adj2[edge[1]].push_back(edge[0]);\n        }\n\n        int diameter1 = find_diameter(adj1);\n        int diameter2 = find_diameter(adj2);\n\n        vector<int> centers1 = find_centers(adj1);\n        vector<int> centers2 = find_centers(adj2);\n\n        int min_diameter = numeric_limits<int>::max();\n\n        for (int c1 : centers1) {\n            for (int c2 : centers2) {\n                min_diameter = min(min_diameter,max({diameter1, diameter2,(diameter1 + 1) / 2 + (diameter2 + 1) / 2 + 1}));\n            }\n        }\n\n        return min_diameter;\n    }\n};",
    "submit_ts": "1719719080",
    "subm_id": "1304433257"
}