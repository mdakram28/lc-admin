{
    "username": "muGDWaovHp",
    "submission": "#include <vector>\n#include <algorithm>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n\n        int horizontalSegments = 1, verticalSegments = 1;\n        long long totalCost = 0;\n        int i = 0, j = 0;\n\n        while (i < horizontalCut.size() && j < verticalCut.size()) {\n            if (horizontalCut[i] > verticalCut[j]) {\n                totalCost += static_cast<long long>(horizontalCut[i]) * verticalSegments;\n                horizontalSegments++;\n                i++;\n            } else {\n                totalCost += static_cast<long long>(verticalCut[j]) * horizontalSegments;\n                verticalSegments++;\n                j++;\n            }\n        }\n\n        while (i < horizontalCut.size()) {\n            totalCost += static_cast<long long>(horizontalCut[i]) * verticalSegments;\n            i++;\n        }\n\n        while (j < verticalCut.size()) {\n            totalCost += static_cast<long long>(verticalCut[j]) * horizontalSegments;\n            j++;\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925604",
    "subm_id": "1320260215"
}