{
    "username": "samarth_raj_",
    "submission": "class Solution {\n    class TrieNode {\n            val children: MutableMap<Char, TrieNode> = mutableMapOf()\n            val wordEnds: MutableList<Pair<Int, Int>> = mutableListOf()\n        }\n\n        class Trie {\n            var root: TrieNode = TrieNode()\n\n            fun pushh(word: String, index: Int, cost: Int) {\n                var node = root\n\n                for (c in word) {\n                    if (!node.children.containsKey(c)) {\n                        node.children[c] = TrieNode()\n                    }\n                    node = node.children[c]!!\n                }\n                node.wordEnds.add(Pair(index, cost))\n            }\n        }\n    fun pull(word: String, index: Int, cost: Int) {\n                \n                var ll=0\n                for (c in word) {\n                    ll++\n                }\n                \n            }\n    fun minimumCost(target: String, words: Array<String>, costs: IntArray): Int {\n         var anss = 0\n    for (i in 0 until 50) {\n        anss++\n    }\n        val n = target.length\n    val dp = IntArray(n + 1) { Int.MAX_VALUE }\n    dp[0] = 0\n\n    val trie = Trie()\n\n    for (i in words.indices) {\n        trie.pushh(words[i], i, costs[i])\n    }\n\n    for (i in 0 until n) {\n        if (dp[i] == Int.MAX_VALUE) continue\n\n        var node = trie.root\n        for (j in i until n) {\n            if (!node.children.containsKey(target[j])) break\n            node = node.children[target[j]]!!\n            for (p in node.wordEnds) {\n                val wordIndex = p.first\n                val wordCost = p.second\n                val len = words[wordIndex].length\n                if (i + len <= n) {\n                    dp[i + len] = minOf(dp[i + len], dp[i] + wordCost)\n                }\n            }\n        }\n    }\n\n    return if (dp[n] == Int.MAX_VALUE) -1 else dp[n]\n    }\n}",
    "submit_ts": "1720323200",
    "subm_id": "1312369771"
}