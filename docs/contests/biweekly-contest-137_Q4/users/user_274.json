{
    "username": "TIEN-YI",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        vector<vector<int>> board_num;\n        for(int i = 0; i < board.size(); i++){\n            for(int j = 0; j < board[i].size(); j++){\n                board_num.push_back({board[i][j], i, j});\n            }\n        }\n        \n        sort(board_num.begin(), board_num.end(), greater<vector<int>>());\n        \n        int N = board_num.size();\n        long long max_ret = -3000000001;\n        for(int i = 0; i < N; i++){\n            long long current = board_num[i][0];\n            for(int j = 0; j < N; j++){\n                if(max_ret - current > board_num[j][0] + board_num[j][0]) break;\n                if(board_num[j][2] == board_num[i][2]) continue;\n                if(board_num[j][1] == board_num[i][1]) continue;\n                current += board_num[j][0];\n                for(int k = 0; k < N; k++){\n                    if(current + board_num[k][0] < max_ret) break;\n                    if(board_num[k][2] == board_num[i][2]) continue;\n                    if(board_num[k][1] == board_num[i][1]) continue;\n                    if(board_num[j][2] == board_num[k][2]) continue;\n                    if(board_num[j][1] == board_num[k][1]) continue;\n                    max_ret = max(current + board_num[k][0], max_ret);\n                }\n                current -= board_num[j][0];\n            }\n        }\n        return max_ret;\n    }\n};",
    "submit_ts": "1723908961",
    "subm_id": "1359174061"
}