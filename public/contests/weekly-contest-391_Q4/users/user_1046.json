{
    "username": "smomal",
    "submission": "class Solution {\n    int idx1 = -1;\nint idx2 = -1;\n    int max = -1;\n    public int minimumDistance(int[][] points) {\n        Arrays.sort(points, (o1,o2) ->{\n            return o1[0] - o2[0];\n        });\n        \n        findMax(points, -1);\n        int temp1 = idx1;\n        int temp2 = idx2;\n        //System.out.println(idx1 + \" \" + idx2 + \" \" + max);\n        max = -1;\n        int dis1 = findMax(points, temp1);\n        max = -1;\n        int dis2 = findMax(points, temp2);\n        //System.out.println(dis1 + \" \" + dis2);\n        return Math.min(dis1, dis2);\n    }\n    \n    int findMax(int[][] points, int rem) {\n        int n = points.length;\n        int[] high =new int[3];\n        if (rem != 0) {\n            high[0] = points[0][0];\n            high[1] = points[0][1];\n            high[2] = 0;\n        } else {\n            high[0] = points[1][0];\n            high[1] = points[1][1];\n            high[2] = 1;\n        }\n        \n        int[] low = new int[]{high[0], high[1], high[2]};\n\n        for (int i = 0; i < n; ++i) {\n            if (i == rem) {\n                continue;\n            }\n            int[] cur = points[i];\n            int disHigh = Math.abs(cur[1] - high[1]) + cur[0] - high[0];\n            int disLow = Math.abs(cur[1] - low[1]) + cur[0] - low[0];\n            if (disHigh > disLow) {\n                if (disHigh > max) {\n                    max = disHigh;\n                    idx1 = high[2];\n                    idx2 = i;\n                }\n            } else {\n                if (disLow > max) {\n                    max = disLow;\n                    idx1 = low[2];\n                    idx2 = i;\n                }\n            }\n            \n            if (cur[1] >= high[1] && cur[1] - high[1] >= cur[0] - high[0]) {\n                high[0] = cur[0];\n                high[1] = cur[1];\n                high[2] = i;\n            }\n            \n            if (cur[1] <= low[1] && low[1] - cur[1] >= cur[0] - low[0]) {\n                low[0] = cur[0];\n                low[1] = cur[1];\n                low[2] = i;\n            }\n        }\n        return max;\n    }\n    \n\n\n\n\n\n\n\n\n\n\n\n}"
}