{
    "username": "jiangzhouxy",
    "submission": "class Solution {\n    int length = 0;\n    int[] tree;\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        List<Integer> res = new ArrayList<>();\n        boolean[] peak = new boolean[nums.length];\n        tree = new int[nums.length + 1];\n        length = nums.length;\n        int init = 0;\n        for (int i = 1; i < nums.length - 1; i++) {\n            if (nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) {\n                peak[i] = true;\n                init++;\n                put(i, 1);\n                // System.out.println(i);\n            }\n        }\n        // System.out.println(Arrays.toString(tree));\n        \n        for (int[] q : queries) {\n            // System.out.println(Arrays.toString(q));\n            if (q[0] == 1) {\n                res.add(sum(q[1] + 1, q[2] - 1));\n                \n            } else {\n                nums[q[1]] = q[2];\n                check(peak, nums, q, q[1] - 1);\n                check(peak, nums, q, q[1]);\n                check(peak, nums, q, q[1] + 1);\n            }\n            // System.out.println(Arrays.toString(tree));\n        }\n        return res;\n    }\n    \n    private void check(boolean[] peak, int[] nums, int[] q, int index) {\n        if (index <= 0 || index >= nums.length - 1) {\n            return;\n        }\n        \n        boolean oldPeak = peak[index];\n\n        boolean newPeak = false;\n\n        if (index > 0 && index < nums.length - 1) {\n            if (nums[index] > nums[index - 1] && nums[index] > nums[index + 1]) {\n                newPeak = true;\n            }\n        }\n        \n        if (newPeak != oldPeak) {\n            if (newPeak) {\n                peak[index] = true;\n                put(index, 1);\n                // System.out.println(true);\n            } else {\n                peak[index] = false;\n                put(index, -1);\n                // System.out.println(false);\n            }\n        }\n    }\n    \n    private int lowbit(int x) {\n        return x & (-x);\n    }\n    \n    private int sum(int index) {\n        int sum = 0;\n        index++;\n        while (index > 0) {\n            sum += tree[index];\n            index -= lowbit(index);\n        }\n        return sum;\n    }\n    \n    private int sum(int l, int r) {\n        if (l > r) {\n            return 0;\n        }\n        // System.out.println(l + \" \" + r);\n        // System.out.println(\"sum\" + sum(2));\n        // System.out.println(\"sum\" + sum(4));\n        return sum(r) - sum(l - 1);\n    }\n    \n    private void put(int index, int v) {\n        index++;\n        while (index <= length) {\n            // System.out.println(\"index:\" + index);\n            tree[index] += v;\n            index += lowbit(index);\n        }\n    }\n    \n    \n}",
    "submit_ts": "1718509074",
    "subm_id": "1289698718"
}