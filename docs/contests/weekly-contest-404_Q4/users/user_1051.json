{
    "username": "GaoYusong",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n\n#ifdef LOCAL\n#include \"cp/debug.h\"\n#else\n#define debug(...)\n#define debugArr(...)\n#endif\n\nclass Solution {\npublic:\n    vector<vector<int>> G1;\n    vector<vector<int>> G2;\n    vector<int> H1;\n    vector<int> H2;\n    vector<int> D1;\n    vector<int> D2;\n    \n    void build(vector<vector<int>> &g, vector<vector<int>> &edges) {\n        for (auto &e : edges) {\n            g[e[0]].push_back(e[1]);\n            g[e[1]].push_back(e[0]);\n        }\n    }\n    \n    int dfs(int u, int pa, const vector<vector<int>> &g, vector<int> &h) {\n        h[u] = 0;\n        for (int v : g[u]) {\n            if (v == pa) continue;\n            h[u] = max(h[u], dfs(v, u, g, h) + 1);\n        }\n        return h[u];\n    }\n    \n    int dfs2(int u, int pa, int val, const vector<vector<int>> &g, const vector<int> &h, vector<int> &d) {\n        d[u] = val;\n        \n        int maxv = 0, submaxv = 0;\n        for (int v : g[u]) {\n            if (v == pa) continue;\n            if (h[v] + 1 > maxv) {\n                submaxv = maxv;\n                maxv = h[v] + 1;\n            } else if (h[v] + 1 > submaxv) {\n                submaxv = h[v] + 1;\n            }\n        }\n        \n        int diameter = max(maxv + submaxv, maxv + val);\n        \n        for (int v : g[u]) {\n            if (v == pa) continue;\n            int nv = val + 1;\n            if (h[v] + 1 == maxv) {\n                nv = max(nv, submaxv + 1);\n            } else {\n                nv = max(nv, maxv + 1);\n            }\n            diameter = max(diameter, dfs2(v, u, nv, g, h, d));\n        }\n        return diameter;\n    }\n    \n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n1 = edges1.size() + 1, n2 = edges2.size() + 1;\n        G1 = vector<vector<int>>(n1);\n        G2 = vector<vector<int>>(n2);\n        H1 = vector<int>(n1);\n        H2 = vector<int>(n2);\n        D1 = vector<int>(n1);\n        D2 = vector<int>(n2);\n\n        build(G1, edges1);\n        build(G2, edges2);\n        dfs(0, -1, G1, H1);\n        dfs(0, -1, G2, H2);\n        int d1 = dfs2(0, -1, 0, G1, H1, D1);\n        int d2 = dfs2(0, -1, 0, G2, H2, D2);\n        \n        int v1 = INT_MAX;\n        for (int i = 0; i < n1; i++) {\n            v1 = min(v1, max(D1[i], H1[i]));\n        }\n        int v2 = INT_MAX;\n        for (int i = 0; i < n2; i++) {\n            v2 = min(v2, max(D2[i], H2[i]));\n        }\n        \n        debug(d1, d2, v1, v2);\n        debug(D1, H1, D2, H2);\n        \n        return max(v1 + v2 + 1, max(d1, d2));\n    }\n};\n\n#ifdef LOCAL\nint main()\n{\n    ios::sync_with_stdio(0);\n    cin.tie(0);\n    \n    // edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]\n    \n    Solution s;\n    vector<vector<int>> edges1 = {{0,1},{0,2},{0,3}};\n    vector<vector<int>> edges2 = {{0,1}};\n    debug(s.minimumDiameterAfterMerge(edges1, edges2)); // 3\n\n    // edges1 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]], edges2 = [[0,1],[0,2],[0,3],[2,4],[2,5],[3,6],[2,7]]\n    edges1 = {{0,1},{0,2},{0,3},{2,4},{2,5},{3,6},{2,7}};\n    edges2 = {{0,1},{0,2},{0,3},{2,4},{2,5},{3,6},{2,7}};\n    debug(s.minimumDiameterAfterMerge(edges1, edges2)); // 5\n\n\n    \n    return 0;\n}\n#endif",
    "submit_ts": "1719719116",
    "subm_id": "1304434107"
}