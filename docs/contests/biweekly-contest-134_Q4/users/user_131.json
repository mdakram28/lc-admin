{
    "username": "Rohit2593",
    "submission": "class Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        long long ans = 0;\n        \n        vector<vector<int>> sparse(n, vector<int>(20));\n        \n        vector<int> pw(n + 10);\n        \n        int p = 0;\n        \n        for(int i = 2; i<=n; i++) {\n            if(!(i & (i - 1)))\n                p++;\n            pw[i] = p;\n        }\n        // for(int i = 1; i<=n; i++) {\n        //     cout << pw[i] << ' ';\n        // }\n        // cout << \"\\n\";\n        \n        // return 0;\n        for(int i = 0; i<n; i++)\n            sparse[i][0] = nums[i];\n        \n        for(int j = 1; j<20; j++) {\n            for(int i = 0; i<n; i++) {\n                sparse[i][j] = sparse[i][j-1];\n                int nextInd = i + (1 << (j - 1));\n                if(nextInd < n)\n                    sparse[i][j] &= sparse[nextInd][j-1];\n            }\n        }\n        // cout << sparse[1][1] << \"\\n\";\n        function<int(int, int)> query = [&](int left, int right) {\n            // return 0;\n            if(left > right)\n                return 0;\n            int sz = right - left + 1;\n            \n            int p = pw[sz];\n            \n            int ans = sparse[left][p];\n            ans &= sparse[right - (1 << p) + 1][p];\n            \n            return ans;\n        };\n        \n        // cout << query(0, 2) << \"\\n\";\n        \n        for(int i = 0; i<n; i++) {\n            long long LEFT = -1;\n            long long RIGHT = -1;\n            \n            int left = i, right = n-1;\n            while(left <= right) {\n                int mid = (left + right) / 2;\n                int currAND = query(i, mid);\n                if(currAND == k) {\n                    LEFT = mid;\n                    right = mid - 1;\n                }\n                \n                else if(currAND > k)\n                    left = mid + 1;\n                \n                else\n                    right = mid - 1;\n            }\n            \n            left = i;\n            right = n-1;\n            \n            while(left <= right) {\n                int mid = (left + right) / 2;\n                int currAND = query(i, mid);\n                if(currAND == k) {\n                    RIGHT = mid;\n                    left = mid + 1;\n                }\n                \n                else if(currAND > k)\n                    left = mid + 1;\n                \n                else\n                    right = mid - 1;\n            }\n            \n            if(LEFT != -1)\n                ans += (RIGHT - LEFT + 1ll);\n        }\n        \n        // cout << query(1, 1) << ' ' << query(3, 3) << \"\\n\";\n        // cout << \"here\\n\";\n        return ans;\n    }\n};",
    "submit_ts": "1720277345",
    "subm_id": "1311659332"
}