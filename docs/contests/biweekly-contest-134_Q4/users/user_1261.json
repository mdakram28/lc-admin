{
    "username": "vigilant-perlmanstv",
    "submission": "class Solution {\npublic:\n    typedef long long ll;\n    // \u9884\u5904\u7406\u7a00\u758f\u8868\n    vector<vector<int>> buildSparseTable(const vector<int>& arr) {\n        int n = arr.size();\n        int maxLog = log2(n) + 1;\n        vector<vector<int>> sparseTable(n, vector<int>(maxLog));\n        // \u521d\u59cb\u5316\u7a00\u758f\u8868\u7684\u7b2c0\u5217\n        for (int i = 0; i < n; ++i) \n            sparseTable[i][0] = arr[i];\n        // \u586b\u5145\u7a00\u758f\u8868\n        for (int j = 1; (1 << j) <= n; ++j) \n            for (int i = 0; (i + (1 << j) - 1) < n; ++i) \n                sparseTable[i][j] = sparseTable[i][j - 1] & sparseTable[i + (1 << (j - 1))][j - 1];\n        return sparseTable;\n    }\n    // \u67e5\u8be2\u533a\u95f4 [l, r] \u7684\u6309\u4f4d\u4e0e\n    int rangeOr(const vector<vector<int>>& sparseTable, int l, int r) {\n        int log = log2(r - l + 1);\n        return sparseTable[l][log] & sparseTable[r - (1 << log) + 1][log];\n    }\n\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<vector<int>> pre = buildSparseTable(nums);\n        ll ans = 0;\n        // rangeOr(pre, i, j)\n        for(int j = 0; j < n; j++) {\n            int l = 0, r = j;\n            while(l < r) {\n                int mid = (l + r) >> 1;\n                if(rangeOr(pre, mid, j) >= k) r = mid;\n                else l = mid + 1;\n            }\n            int lo = r;\n            l = 0, r = j;\n            while(l < r) {\n                int mid = (l + r + 1) >> 1;\n                if(rangeOr(pre, mid, j) <= k) l = mid;\n                else r = mid - 1;\n            }\n            int hi = r;\n            if(rangeOr(pre, lo, j) == k) ans += hi - lo + 1;\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1720279977",
    "subm_id": "544569814"
}