{
    "username": "Aadersh1",
    "submission": "class Solution {\npublic:\n    #define ll long long\n    ll lb(ll a){\n        ll s = 0, e = 40, ans;\n        while(s <= e){\n            ll m = (s + e) / 2;\n            ll p = 1ll<<m;\n            if(p >= a)ans = m, e = m - 1;\n            else s = m + 1;\n        }\n        return ans;\n    }\n    ll fact(ll a){\n        if(a == 0)return 1;\n        return a * fact(a - 1);\n    }\n    // ll nCr(ll a, ll b){\n    //     ll m = 1, ans = 1;\n    //     for(int i = 1; i <= b; i++)m *= i;\n    //     for(int i = a; i >= a - b; i--)ans *= i, if(ans % m)\n    // }\n    // copied form gfg\n    int nCr(int n, int r) {\n    // If r is greater than n, return 0\n    if (r > n) return 0;\n    // If r is 0 or equal to n, return 1\n    if (r == 0 || n == r) return 1;\n    // Initialize the logarithmic sum to 0\n    double res = 0;\n    // Calculate the logarithmic sum of the numerator and denominator using loop\n    for (int i = 0; i < r; i++) {\n        // Add the logarithm of (n-i) and subtract the logarithm of (i+1)\n        res += log(n-i) - log(i+1);\n    }\n    // Convert logarithmic sum back to a normal number\n    return (int)round(exp(res));\n}\n    int waysToReachStair(int k) {\n        // if(k == 0)return 2;\n        // if(k == 1)return 4;\n        ll a = lb(k), ans = 0;\n        while((1ll<<a) - (a + 1) <= k){\n            ll o = (1ll<<a) - (k);\n            // cout << a + 1 << \" \"\n            ans += nCr(a + 1, o);\n            a++;\n        }\n        // if(k == 1)ans++;\n        return ans;\n    }\n};",
    "submit_ts": "1716089490",
    "subm_id": "1261843602"
}