{
    "username": "vikasmaurya9732",
    "submission": "from collections import defaultdict\nfrom sortedcontainers import SortedDict\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.cost = min(node.cost, cost)\n    \n    def search(self, target, start):\n        node = self.root\n        matches = []\n        for i in range(start, len(target)):\n            if target[i] in node.children:\n                node = node.children[target[i]]\n                if node.cost != float('inf'):\n                    matches.append((i + 1, node.cost))  # (end_index, cost)\n            else:\n                break\n        return matches\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n = len(target)\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n        \n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n        \n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue\n            matches = trie.search(target, i)\n            for end_index, cost in matches:\n                dp[end_index] = min(dp[end_index], dp[i] + cost)\n        \n        return dp[n] if dp[n] != float('inf') else -1\n        # n = len(target)\n        # dp = [float('inf')] * (n + 1)\n        # dp[0] = 0  # Cost to construct empty string is 0\n\n        # # SortedDict to maintain the minimum costs efficiently\n        # min_cost_dict = SortedDict()\n        # min_cost_dict[0] = 0\n\n        # for i in range(1, n + 1):\n        #     for j, word in enumerate(words):\n        #         word_len = len(word)\n        #         if i >= word_len and target[i - word_len:i] == word:\n        #             if i - word_len in min_cost_dict:\n        #                 dp[i] = min(dp[i], dp[i - word_len] + costs[j])\n        #     if dp[i] != float('inf'):\n        #         min_cost_dict[i] = dp[i]\n\n        # return dp[n] if dp[n] != float('inf') else -1\n\n        # memo = {}\n\n        # def dp(start):\n        #     if start == len(target):\n        #         return 0\n        #     if start in memo:\n        #         return memo[start]\n\n        #     min_cost = float('inf')\n        #     for i, word in enumerate(words):\n        #         word_len = len(word)\n        #         if target.startswith(word, start):\n        #             cost = dp(start + word_len)\n        #             if cost != float('inf'):\n        #                 min_cost = min(min_cost, cost + costs[i])\n\n        #     memo[start] = min_cost\n        #     return min_cost\n\n        # result = dp(0)\n        # return result if result != float('inf') else -1\n\n\n\n\n        # n = len(target)\n        # dp = [float('inf')] * (n + 1)\n        # dp[0] = 0  # Cost to construct empty string is 0\n\n        # for i in range(1, n + 1):\n        #     for j, word in enumerate(words):\n        #         word_len = len(word)\n        #         if i >= word_len and target[i - word_len:i] == word:\n        #             dp[i] = min(dp[i], dp[i - word_len] + costs[j])\n\n        # return dp[n] if dp[n] != float('inf') else -1\n\n\n        ",
    "submit_ts": "1720323808",
    "subm_id": "1312384548"
}