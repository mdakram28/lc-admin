{
    "username": "ywwbill",
    "submission": "from sortedcontainers import SortedList\n\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        self.n = 50001\n        self.seg_tree = [0] * (self.n * 2 + 2)\n        self.seg_tree[self.n + 1] = self.n\n        for i in range(self.n, 0, -1):\n            self.seg_tree[i] = max(self.seg_tree[2 * i], self.seg_tree[2 * i + 1])\n        answer = []\n        blocks = SortedList([0, self.n - 1])\n        for i in range(len(queries)):\n            if queries[i][0] == 1:\n                x = queries[i][1]\n                pos = blocks.bisect_left(x)\n                if blocks[pos] != x:\n                    self.update(blocks[pos - 1], x - blocks[pos - 1])\n                    self.update(x, blocks[pos] - x)\n                    blocks.add(x)\n            else:\n                x, sz = queries[i][1], queries[i][2]\n                pos = blocks.bisect_left(x)\n\n                if blocks[pos] == x:\n                    answer.append(self.query_range(x) >= sz)\n                else:\n                    prev_val = blocks[pos] - blocks[pos - 1]\n                    self.update(blocks[pos - 1], x - blocks[pos - 1])\n                    self.update(x, blocks[pos] - x)\n                    answer.append(self.query_range(x) >= sz)\n                    self.update(x, 0)\n                    self.update(blocks[pos - 1], prev_val)\n        return answer\n\n    def update(self, index: int, val: int) -> None:\n        index += self.n + 1\n        self.seg_tree[index] = val\n        while index > 0:\n            next_index = index // 2\n            self.seg_tree[next_index] = max(\n                self.seg_tree[next_index * 2], self.seg_tree[next_index * 2 + 1]\n            )\n            index = next_index\n\n    def query_range(self, x: int) -> int:\n        left = self.n\n        right = self.n + x\n        result = 0\n        while left <= right:\n            if left % 2 == 1:\n                result = max(result, self.seg_tree[left])\n                left += 1\n            if right % 2 == 0:\n                result = max(result, self.seg_tree[right])\n                right -= 1\n            left //= 2\n            right //= 2\n        return result",
    "submit_ts": 1716650733.0
}