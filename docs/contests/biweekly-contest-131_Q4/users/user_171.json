{
    "username": "tsdlatrobe",
    "submission": "// Segment Tree\nvoid build(int node, int l, int r, vector<int>& st, vector<int>& a) {\n    if(l==r) {\n        st[node]=a[l];\n        return;\n    }\n    int mid = (l+r)/2;\n    build(node*2, l, mid, st, a);\n    build(node*2+1, mid+1, r, st, a);\n    st[node]=max(st[node*2],st[node*2+1]);\n}\n// Segment Tree\nvoid update(int node, int l, int r, int i, int val, vector<int>& st, vector<int>& a) {\n    if(l==r) {\n        a[i]=val;\n        st[node]=val;\n        return;\n    }\n    if(i<l || i>r) return;\n    int mid = (l+r)/2;\n    if(i<=mid) update(node*2, l, mid, i, val, st, a);\n    else update(node*2+1, mid+1, r, i, val, st, a);\n    st[node]=max(st[node*2],st[node*2+1]);\n}\n// Segment Tree\nint query(int node, int l, int r, int qL, int qR, vector<int>& st, vector<int>& a) {\n    if(qR < qL) return 0;\n    if(qR < l || qL > r) return 0;\n    if(qL<=l && qR>=r) return st[node];\n    return max(query(node*2,l,(l+r)/2,qL,qR,st,a) ,query(node*2+1,1+(l+r)/2,r,qL,qR,st,a));\n}\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& q) {\n        set<int> st = {0};\n        set<int> stx = {0, (int)1e5-1};\n        vector<int> a(1e5+1,1);\n        vector<int> stt((int)1e5*4);\n        build(1, 0,1e5,stt,a);\n        vector<bool> res;\n        for(auto&x:q) {\n            if(x[0]==1) {\n                auto it1 = st.upper_bound(-x[1]);\n                update(1,1,1e5,x[1],x[1]+(*it1), stt, a);\n                auto it = stx.upper_bound(x[1]);\n                update(1,1,1e5,*it, *it - x[1], stt, a);\n                st.insert(-x[1]);\n                stx.insert(x[1]);\n            } else {\n                int xx = x[1];\n                int val = x[2];\n                auto it = st.upper_bound(-xx);\n                int kc = xx + *it;\n                kc = max(kc, query(1,1,1e5,1, -(*it), stt, a));\n                res.push_back(kc>=val);\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1716650367",
    "subm_id": "1267613641"
}