{
    "username": "siddhantnema2003",
    "submission": "#include <bits/stdc++.h>\nusing namespace std;\n#define siddhantnema ios_base::sync_with_stdio(0); cin.tie(0);\n#define ll long long\n#define inparr(arr,N) for(ll i=0;i<N;i++){cin>>arr[i];}\n#define forn(_i,N) for(ll _i=0;_i<N;_i++)\n#define trc(x) cout << #x << \"->\" << x << '\\n';\nconst ll RMOD = 1000000007;\n\n#include <iostream>\n#include <vector>\n#include <limits.h>\n\nusing namespace std;\n\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& data) {\n        n = data.size();\n        tree.resize(2 * n);\n        build(data);\n    }\n\n    void update(int pos, int value) {\n        pos += n;\n        tree[pos] = value;\n        while (pos > 1) {\n            pos /= 2;\n            tree[pos] = tree[2 * pos] & tree[2 * pos + 1];\n        }\n    }\n\n    int range_and(int left, int right) {\n        left += n;\n        right += n + 1;\n        int result = INT_MAX;\n        while (left < right) {\n            if (left % 2 == 1) {\n                result &= tree[left];\n                left++;\n            }\n            if (right % 2 == 1) {\n                right--;\n                result &= tree[right];\n            }\n            left /= 2;\n            right /= 2;\n        }\n        return result;\n    }\n\nprivate:\n    int n;\n    vector<int> tree;\n\n    void build(const vector<int>& data) {\n        for (int i = 0; i < n; ++i) {\n            tree[n + i] = data[i];\n        }\n        for (int i = n - 1; i > 0; --i) {\n            tree[i] = tree[2 * i] & tree[2 * i + 1];\n        }\n    }\n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) \n    {\n        SegmentTree segtree = SegmentTree(nums);\n        ll res = 0;\n\n        ll N = nums.size();\n\n        forn(i,N)\n        {\n            ll lo = i,hi = N;\n            ll MX = -1;\n            while (lo < hi) {\n                ll mid = lo + (hi - lo) / 2; \n                ll val = segtree.range_and(i, mid);\n\n                if (val < k) {\n                    hi = mid; \n                } else if (val == k) {\n                    MX = max(MX, mid);\n                    lo = mid + 1; \n                } else { // val > k\n                    lo = mid + 1; \n                }\n            }\n\n            if(MX == -1)\n                continue;\n            lo = i;\n            hi = MX;\n            ll MN = MX;\n\n            while (lo < hi) \n            {\n                ll mid = lo + (hi - lo) / 2; \n                ll val = segtree.range_and(i, mid);\n\n                if (val < k) {\n                    hi = mid; \n                } else if (val == k) {\n                    MN = min(MN, mid);\n                    hi = mid; \n                } else { // val > k\n                    lo = mid + 1; \n                }\n            }\n            res += (MX-MN + 1);\n\n\n        }\n        return res;\n\n        \n    }\n};\n",
    "submit_ts": "1720280294",
    "subm_id": "1311784017"
}