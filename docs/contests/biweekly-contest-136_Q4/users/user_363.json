{
    "username": "elizabethwei",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        n = len(edges) + 1\n        adj = [[] for _ in range(n)]\n        for e in edges:\n            adj[e[0]].append(e[1])\n            adj[e[1]].append(e[0])\n        vis = [0 for _ in range(n)]\n        par = [-1 for _ in range(n)]\n        top_two = [([],[]) for _ in range(n)]\n        def dfs1(x):\n            nonlocal vis\n            vis[x] = 1\n            top = [-1, -1]\n            best = [0, 0]\n            for u in adj[x]:\n                if vis[u] == 0:\n                    par[u] = x\n                    t, b = dfs1(u)\n                    res = b[1] + (1 if u % 2 == 1 else 2)\n                    if res > best[1]:\n                        top[0] = top[1]\n                        best[0] = best[1]\n                        top[1] = u\n                        best[1] = res\n                    elif res > best[0]:\n                        top[0] = u\n                        best[0] = res\n            top_two[x] = (top, best)\n            return top, best\n        dfs1(0)\n        @cache\n        def dfs(x, p):\n            ans = top_two[x][1][0]\n            if par[x] != p and par[x] >= 0:\n                ans = max(ans, dfs(par[x], x) + (1 if par[x] % 2 == 1 else 2))\n            if p != top_two[x][0][1]:\n                ans = max(ans, top_two[x][1][1])\n            return ans\n        ans = []\n        for i in range(n):\n            ans.append(dfs(i, -1))\n        return ans\n\n\n",
    "submit_ts": "1722700626",
    "subm_id": "1343247637"
}