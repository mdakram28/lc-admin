{
    "username": "pandeydivyansh1803",
    "submission": "class Solution {\npublic:\n//     void MaxDist(vector<pair<int, int> >& A, int N)\n// {\n//     // Vectors to store maximum and\n//     // minimum of all the four forms\n//     vector<int> V(N), V1(N);\n \n//     for (int i = 0; i < N; i++) {\n//         V[i] = A[i].first + A[i].second;\n//         V1[i] = A[i].first - A[i].second;\n//     }\n \n//     // Sorting both the vectors\n//     sort(V.begin(), V.end());\n//     sort(V1.begin(), V1.end());\n \n//     int maximum\n//         = max(V.back() - V.front(), V1.back() - V1.front());\n \n//     cout << maximum << endl;\n// }\n    int minimumDistance(vector<vector<int>>& points) {\n        int N= points.size();\n        \n        vector<pair<int,int>> A;\n        for(auto &it : points){\n            A.push_back({it[0],it[1]});\n        }\n        \n        vector<int> V(N), V1(N);\n \n    for (int i = 0; i < N; i++) {\n        V[i] = A[i].first + A[i].second;\n        V1[i] = A[i].first - A[i].second;\n    }\n \n    // Sorting both the vectors\n    sort(V.begin(), V.end());\n    sort(V1.begin(), V1.end());\n \n    \n    \n    \n    int ans = INT_MAX;\n    for(int i=0;i<N;i++){\n        int V_contri = A[i].first + A[i].second;\n        int V1_contri = A[i].first - A[i].second;\n        \n        int val1,val2;\n        \n        if(V.front() == V_contri){\n            val1 = V.back()-V[1];\n        }\n        else if(V.back() == V_contri){\n            val1 = V[V.size()-2] - V.front();\n        }\n        else{\n            val1 = V.back()-V.front();\n        }\n        \n        if(V1.front() == V1_contri){\n            val2 = V1.back()-V1[1];\n        }\n        else if(V1.back() == V1_contri){\n            val2 = V1[V1.size()-2] - V1.front();\n        }\n        else{\n            val2 = V1.back()-V1.front();\n        }\n        \n        int tmp = max(val1,val2);\n        ans = min(ans,tmp);\n        \n        \n        \n        \n    }\n        return ans;\n        \n    }\n    \n};"
}