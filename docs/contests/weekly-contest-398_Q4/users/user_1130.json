{
    "username": "Srajan_Kiyotaka",
    "submission": "class Solution {\nprivate:\n    int solver(long long k, long long i, int j, bool c, unordered_map<long long, unordered_map<long long, unordered_map<bool, int>>> &dp){\n        // base case\n        int ans = 0;\n        if(k == i) ans++;\n        if(i > k){\n            if((i - k == 1) && !c) ans += solver(k, i - 1, j, true, dp);\n            long long n = (1ll*1 << j) + i - 1;\n            if(n > 0) return ans;\n            else{\n                if(c){\n                    return ans + solver(k, n + 1, j + 1, true, dp); \n                }\n                else{\n                    return ans + solver(k, n, j + 1, false, dp);\n                }\n            }\n        }\n        if(dp.count(i) && dp[i].count(j) && dp[i][j].count(c)) return dp[i][j][c];\n        // go up\n        long long n = (1ll*1 << j) + i;\n        ans += solver(k, n, j + 1, false, dp);\n        // go down\n        if((i > 0) && !c){\n            ans += solver(k, i - 1, j, true, dp);\n        }\n        return dp[i][j][c] = ans;\n    }\npublic:\n    int waysToReachStair(int k) {\n        // dp\n        // if(k == 0) return 2;\n        // else if(k == 1) return 4;\n        unordered_map<long long, unordered_map<long long, unordered_map<bool, int>>> dp;\n        return solver(k, 1, 0, false, dp);\n    }\n};",
    "submit_ts": "1716090319",
    "subm_id": "1261864464"
}