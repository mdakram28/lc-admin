{
    "username": "nhub",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n         // Create a max heap for both horizontal and vertical cuts\n    priority_queue<int> hCuts(horizontalCut.begin(), horizontalCut.end());\n    priority_queue<int> vCuts(verticalCut.begin(), verticalCut.end());\n\n    // Initialize counters for the number of pieces\n    int horizontalPieces = 1, verticalPieces = 1;\n    long long totalCost = 0;\n\n    // Use a greedy approach to pick the most expensive cut available\n    while (!hCuts.empty() && !vCuts.empty()) {\n        if (hCuts.top() > vCuts.top()) {\n            totalCost += (long long)hCuts.top() * verticalPieces;\n            hCuts.pop();\n            horizontalPieces++;\n        } else {\n            totalCost += (long long)vCuts.top() * horizontalPieces;\n            vCuts.pop();\n            verticalPieces++;\n        }\n    }\n\n    // Process remaining horizontal cuts\n    while (!hCuts.empty()) {\n        totalCost += (long long)hCuts.top() * verticalPieces;\n        hCuts.pop();\n    }\n\n    // Process remaining vertical cuts\n    while (!vCuts.empty()) {\n        totalCost += (long long)vCuts.top() * horizontalPieces;\n        vCuts.pop();\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925856",
    "subm_id": "1320268407"
}