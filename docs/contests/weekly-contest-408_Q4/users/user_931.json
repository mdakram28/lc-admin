{
    "username": "Abhi242",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>> &graph, int start, int target1, int target2, int totalNodes) {\n        vector<int> vis(totalNodes, 0);\n        vis[start] = 1;\n        queue<int> q;\n        q.push(start);\n\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n        return vis[target1] || vis[target2];\n    }\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<pair<pair<int, int>, int>> use(n);\n        vector<vector<int>> graph(n + 4);\n        \n        for (int i = 0; i < n; ++i) {\n            use[i].first.first = circles[i][0];\n            use[i].first.second = circles[i][1];\n            use[i].second = circles[i][2];\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (use[i].first.first <= use[i].second) {\n                graph[n].push_back(i);\n                graph[i].push_back(n);\n            }\n            if (X - use[i].first.first <= use[i].second) {\n                graph[n + 2].push_back(i);\n                graph[i].push_back(n + 2);\n            }\n            if (use[i].first.second <= use[i].second) {\n                graph[n + 1].push_back(i);\n                graph[i].push_back(n + 1);\n            }\n            if (Y - use[i].first.second <= use[i].second) {\n                graph[n + 3].push_back(i);\n                graph[i].push_back(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                double d = sqrt(pow(use[i].first.first - use[j].first.first, 2) +\n                                       pow(use[i].first.second - use[j].first.second, 2));\n                int radiusSum = use[i].second + use[j].second;\n                if (radiusSum >= d) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(graph, n, n + 1, n+ 2, n + 4));\n        isBlocked = max(isBlocked, bfs(graph, n + 3, n + 2, n + 1, n + 4));\n\n        return !isBlocked;\n    }\n};",
    "submit_ts": "1722138100",
    "subm_id": "1335782120"
}