{
    "username": "vikky4321",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\nusing namespace std;\n\nclass Solution {\npublic:\n    // Function to check if two circles intersect or if a circle intersects with rectangle border\n    bool circlesIntersect(const pair<int, int>& c1, int r1, const pair<int, int>& c2, int r2) {\n        double distance = sqrt(pow(c1.first - c2.first, 2) + pow(c1.second - c2.second, 2));\n        return distance <= r1 + r2;\n    }\n\n    // Function to connect the circles to the graph\n    void connectCircles(vector<vector<int>>& graph, const vector<pair<pair<int, int>, int>>& circles, int num_circles) {\n        for (int i = 0; i < num_circles; ++i) {\n            for (int j = i + 1; j < num_circles; ++j) {\n                if (circlesIntersect(circles[i].first, circles[i].second, circles[j].first, circles[j].second)) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n    }\n\n    // BFS to check if a path exists from the start to the targets\n    bool bfs(vector<vector<int>>& graph, int start, int target1, int target2, int nodes) {\n        queue<int> q;\n        vector<int> visited(nodes, 0);\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    q.push(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n        int num_circles = circles2.size();\n        vector<pair<pair<int, int>, int>> circles(num_circles);\n        vector<vector<int>> graph(num_circles + 4);\n\n        // Initialize circles\n        for (int i = 0; i < num_circles; ++i) {\n            circles[i] = {{circles2[i][0], circles2[i][1]}, circles2[i][2]};\n        }\n\n        // Connect circles to the graph\n        connectCircles(graph, circles, num_circles);\n\n        // Connect circles to the borders of the rectangle\n        for (int i = 0; i < num_circles; ++i) {\n            if (circles[i].first.first <= circles[i].second) {\n                graph[num_circles].push_back(i); // Left border\n                graph[i].push_back(num_circles);\n            }\n            if (X - circles[i].first.first <= circles[i].second) {\n                graph[num_circles + 2].push_back(i); // Right border\n                graph[i].push_back(num_circles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 1].push_back(i); // Bottom border\n                graph[i].push_back(num_circles + 1);\n            }\n            if (Y - circles[i].first.second <= circles[i].second) {\n                graph[num_circles + 3].push_back(i); // Top border\n                graph[i].push_back(num_circles + 3);\n            }\n        }\n\n        // Check if path from bottom-left to top-right corner is blocked\n        bool is_blocked = false;\n        is_blocked = bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4);\n        is_blocked = is_blocked || bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4);\n\n        return !is_blocked;\n    }\n};\n",
    "submit_ts": "1722137125",
    "subm_id": "1335754918"
}