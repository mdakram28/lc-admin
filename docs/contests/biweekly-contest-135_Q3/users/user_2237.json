{
    "username": "shricastic7",
    "submission": "class Solution {\npublic:\n    int minChanges(vector<int>& nums, int k) {\n        map<int, vector<int>> diffToXValues;\n        vector<int> xValues;\n        \n        int n = nums.size();\n        int half = n / 2;\n        for (int i = 0; i < half; i++) {\n            int left = nums[i];\n            int right = nums[n - i - 1];\n            int diff = abs(left - right);\n            int maxValue = max({left, right, k - left, k - right});\n            \n            diffToXValues[diff].push_back(maxValue);\n            xValues.push_back(maxValue);\n        }\n        \n        sort(xValues.begin(), xValues.end());\n        \n        int minChangesRequired = n;\n        \n        for (auto& entry : diffToXValues) {\n            int diff = entry.first;\n            int countBelowDiff = lower_bound(xValues.begin(), xValues.end(), diff) - xValues.begin();\n            int changes = countBelowDiff * 2 + (half - countBelowDiff);\n            \n            for (int x : entry.second) {\n                if (x < diff) {\n                    changes -= 2;\n                } else {\n                    changes -= 1;\n                }\n            }\n            \n            minChangesRequired = min(minChangesRequired, changes);\n        }\n        \n        return minChangesRequired;\n    }\n};",
    "submit_ts": "1721489955",
    "subm_id": "1327468728"
}