{
    "username": "jainamit130",
    "submission": "class Solution {\nprivate:\n    void incrementZeros(vector<int>& zeros, int x) {\n        for (int i = 0; i < 32; ++i) {\n            if (((x >> i) & 1) == 0) {\n                zeros[i] += 1;\n            }\n        }\n    }\n\n    void decrementZeros(vector<int>& zeros, int x) {\n        for (int i = 0; i < 32; ++i) {\n            if (((x >> i) & 1) == 0) {\n                zeros[i] -= 1;\n            }\n        }\n    }\n\n    int evaluateZeros(const vector<int>& zeros) {\n        int result = 0;\n        for (int i = 0; i < 32; ++i) {\n            if (zeros[i] == 0) {\n                result ^= (1 << i);\n            }\n        }\n        return result;\n    }\n\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        vector<int> zeroCounts(32, 0);\n\n        int left = 0;\n        int n = nums.size();\n        int minDiff = INT_MAX;\n\n        for (int right = 0; right < n; ++right) {\n            incrementZeros(zeroCounts, nums[right]);\n            int currentEval = evaluateZeros(zeroCounts);\n            minDiff = min(minDiff, abs(currentEval - k));\n\n            while (left < right && currentEval < k) {\n                decrementZeros(zeroCounts, nums[left]);\n                ++left;\n                currentEval = evaluateZeros(zeroCounts);\n                minDiff = min(minDiff, abs(currentEval - k));\n            }\n        }\n\n        return minDiff;\n    }\n};\n\n\n",
    "submit_ts": 1717300749.0
}