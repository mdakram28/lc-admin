{
    "username": "david-c",
    "submission": "class SegmentTree {\n  int n;\n  vector<int> tree;\n\n public:\n  SegmentTree(vector<int>& leaves)\n      : n(leaves.size()), tree(n << 1) {\n    for (int i = 0; i < n; ++i) tree[i + n] = leaves[i];\n\n    // build the tree\n    for (int i = n - 1; i > 0; --i) tree[i] = tree[i << 1] & tree[i << 1 | 1];\n  }\n\n  // set value at position p\n  void modify(int p, int value) {\n    for (tree[p += n] = value; p > 1; p >>= 1)\n      tree[p >> 1] = tree[p] & tree[p ^ 1];\n  }\n\n  // f on interval [left, right)\n  int query(int left, int right) {\n    int res = ~0;\n    for (left += n, right += n; left < right; left >>= 1, right >>= 1) {\n      if (left & 1) res = res & tree[left++];\n      if (right & 1) res = tree[--right] & res;\n    }\n    return res;\n  }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        const int n = nums.size();\n        int res = INT_MAX;\n        SegmentTree st(nums);\n        for (int i = 0; i < n; ++i) {\n            int left = 0, mid, right = n - i + 1, a;\n            while (left < right) {\n                mid = left + ((right - left) >> 1);\n                a = st.query(i, i + mid);\n                res = min(res, abs(a - k));\n                if (a < k) {\n                    right = mid;\n                } else {\n                    left = mid + 1;\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717298454.0
}