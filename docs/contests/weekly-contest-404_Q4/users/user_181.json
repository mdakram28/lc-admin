{
    "username": "Anuj_Ag",
    "submission": "class Solution {\npublic:\n    int k = 1;\n    \n    int dfs(int x, vector<vector<int>>& g, vector<vector<int>>& dis, vector<int>& le)\n    {\n        int m1 = 0, i1 = -1, m2 = 0, i2 = -1;\n        for(int i = 0; i < g[x].size(); i++)\n        {\n            if(g[x][i] != le[x])\n            {\n                le[g[x][i]] = x;\n                int tp = dfs(g[x][i], g, dis, le);\n                if(tp >= m1)\n                {\n                    m2 = m1;\n                    i2 = i1;\n                    i1 = g[x][i];\n                    m1 = tp;\n                }\n                else if(tp > m2)\n                {\n                    i2 = g[x][i];\n                    m2 = tp;\n                }\n            }\n        }\n        dis[x] = {m1, i1, m2, i2};\n        return m1+k;\n    }\n\n    void dfs2(int x, vector<vector<int>>& g, vector<vector<int>>& dis, vector<int>& le, vector<int> val)\n    {\n        if(x != 0)\n        {\n            int a = val[0], b = val[2];\n            if(val[1] == x)\n            {\n                a = b;\n            }\n            if(a >= dis[x][0])\n            {\n                dis[x][0] = a+k;\n                dis[x][1] = -1;    \n            }\n            else if(a >= dis[x][2])\n            {\n                dis[x][2] = a+k;\n                dis[x][3] = -1;\n            }\n        }\n        val = dis[x];\n        for(int i = 0; i < g[x].size(); i++)\n        {\n            if(g[x][i] != le[x])\n            {\n                dfs2(g[x][i], g, dis, le, val);\n            }\n        }\n        return;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size()+1, m = edges2.size()+1;\n        vector<vector<int>> g(n+1);\n        for(int i = 0; i < n-1; i++)\n        {\n\t\t\tint x = edges1[i][0], y = edges1[i][1];\n\t\t\tg[x].push_back(y);\n\t\t\tg[y].push_back(x);\n        }\n        vector<int> le(n+1, -1);\n\t\tle[0] = 0;\n\t\tvector<int> fill(4, -1);\n\t\tvector<vector<int>> dis(n+1, fill);\n\t\tdfs(0, g, dis, le);\n        vector<int> val = {-1, -1, -1, -1};\n        dfs2(0, g, dis, le, val);\n\t\tint ans = INT_MAX;\n        int xyz = 0;\n        for(int i = 0; i < n; i++)\n\t\t{\n            // cout << dis[i][0] << \" \";\n            xyz = max(xyz, dis[i][0]);\n\t\t\tans = min(ans, dis[i][0]);\n\t\t}\n        // cout << \"\\n\";\n        vector<vector<int>> g1(m+1);\n        for(int i = 0; i < m-1; i++)\n        {\n\t\t\tint x = edges2[i][0], y = edges2[i][1];\n\t\t\tg1[x].push_back(y);\n\t\t\tg1[y].push_back(x);\n        }\n        vector<int> le1(m+1, -1);\n\t\tle1[0] = 0;\n\t\tvector<vector<int>> dis1(m+1, fill);\n\t\tdfs(0, g1, dis1, le1);\n        vector<int> val1 = {-1, -1, -1, -1};\n        dfs2(0, g1, dis1, le1, val1);\n        int c2 = INT_MAX;\n        for(int i = 0; i < m; i++)\n\t\t{\n            // cout << dis1[i][0] << \" \";\n            xyz = max(xyz, dis1[i][0]);\n\t\t\tc2 = min(c2, dis1[i][0]);\n\t\t}\n        // cout << \"\\n\";\n        return max(xyz, ans+c2+1);\n    }\n};",
    "submit_ts": 1719717386.0
}