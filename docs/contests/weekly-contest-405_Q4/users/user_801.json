{
    "username": "akhil1421",
    "submission": "struct TrieNode {\n    unordered_map<char, TrieNode*> ch;\n    vector<int> w_ind;\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int index) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->ch.count(c)) {\n                node->ch[c] = new TrieNode();\n            }\n            node = node->ch[c];\n        }\n        node->w_ind.push_back(index);\n    }\n\n    TrieNode* getRoot() {\n        return root;\n    }\n\nprivate:\n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n+1,INT_MAX);\n        dp[0] = 0;\n        Trie trie;\n        for (int i = 0; i < words.size(); i++) {\n            trie.insert(words[i], i);\n        }\n        for (int i =0;i<n;i++) {\n            if (dp[i] == INT_MAX) {\n                continue;\n            }\n            TrieNode* node = trie.getRoot();\n            for (int j=i;j<n;j++) {\n                if (!node->ch.count(target[j])) {\n                    break;\n                }\n                node = node->ch[target[j]];\n                for (int word_index : node->w_ind) {\n                    int len_of_word = words[word_index].size();\n                    dp[i + len_of_word] = min(dp[i + len_of_word], dp[i] + costs[word_index]);\n                }\n            }\n        }\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322897",
    "subm_id": "1312362020"
}