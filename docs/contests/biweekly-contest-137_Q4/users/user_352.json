{
    "username": "etian6795",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n        int m = board.length;\n        int n = board[0].length;\n        int[][] rmax = new int[m][3];\n        for(int i = 0; i < m; i++) {\n            final int temp = i;\n            PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (board[temp][a] > board[temp][b]) ? 1 : -1);\n            for(int j = 0; j < n; j++) {\n                pq.add(j);\n                if(pq.size()>3) pq.remove();\n            }\n            rmax[i][2] = pq.remove();\n            rmax[i][1] = pq.remove();\n            rmax[i][0] = pq.remove();\n        }\n        SubmatrixMaximumQuery smq = new SubmatrixMaximumQuery(board);\n        long ans = Long.MIN_VALUE;\n        for(int i = 0; i < m; i++) {\n            for(int j = i+1; j < m; j++) {\n                for(int a = 0; a < 3; a++) {\n                    for(int b = 0; b < 3; b++) {\n                        if(rmax[i][a] != rmax[j][b]) {\n                            ans = Math.max(ans, ((long)board[i][rmax[i][a]]) + ((long)board[j][rmax[j][b]]) + (long)Math.max(smq.query(j+1, 0, m-1, Math.min(rmax[i][a], rmax[j][b])-1), Math.max(smq.query(j+1, Math.min(rmax[i][a], rmax[j][b])+1, m-1, Math.max(rmax[i][a], rmax[j][b])-1), smq.query(j+1, Math.max(rmax[i][a], rmax[j][b])+1, m-1, n-1))));\n                        }\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n\n    public class SubmatrixMaximumQuery  {\n\n        private int[][] matrix;\n        private int[][][][] sparseTable;\n        private int n, m;\n\n        public SubmatrixMaximumQuery(int[][] matrix) {\n            this.matrix = matrix;\n            this.n = matrix.length;\n            this.m = matrix[0].length;\n            buildSparseTable();\n        }\n\n        private void buildSparseTable() {\n            int maxLogN = (int) (Math.log(n) / Math.log(2)) + 1;\n            int maxLogM = (int) (Math.log(m) / Math.log(2)) + 1;\n\n            sparseTable = new int[n][m][maxLogN][maxLogM];\n\n            for (int i = 0; i < n; i++) {\n                for (int j = 0; j < m; j++) {\n                    sparseTable[i][j][0][0] = matrix[i][j];\n                }\n            }\n\n            // Precompute values for submatrices\n            for (int k1 = 0; k1 < maxLogN; k1++) {\n                for (int k2 = 0; k2 < maxLogM; k2++) {\n                    for (int i = 0; i + (1 << k1) <= n; i++) {\n                        for (int j = 0; j + (1 << k2) <= m; j++) {\n                            if (k1 == 0 && k2 == 0) {\n                                continue;\n                            }\n                            if (k1 == 0) {\n                                sparseTable[i][j][k1][k2] = Math.max(sparseTable[i][j][k1][k2 - 1], sparseTable[i][j + (1 << (k2 - 1))][k1][k2 - 1]);\n                            } else if (k2 == 0) {\n                                sparseTable[i][j][k1][k2] = Math.max(sparseTable[i][j][k1 - 1][k2], sparseTable[i + (1 << (k1 - 1))][j][k1 - 1][k2]);\n                            } else {\n                                int max1 = Math.max(sparseTable[i][j][k1 - 1][k2 - 1], sparseTable[i + (1 << (k1 - 1))][j][k1 - 1][k2 - 1]);\n                                int max2 = Math.max(sparseTable[i][j + (1 << (k2 - 1))][k1 - 1][k2 - 1], sparseTable[i + (1 << (k1 - 1))][j + (1 << (k2 - 1))][k1 - 1][k2 - 1]);\n                                sparseTable[i][j][k1][k2] = Math.max(max1, max2);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        // Query for the maximum value in the submatrix (x1, y1) to (x2, y2)\n        public int query(int x1, int y1, int x2, int y2) {\n            if(x1 > x2 || y1 > y2) return Integer.MIN_VALUE;\n            int k1 = (int) (Math.log(x2 - x1 + 1) / Math.log(2));\n            int k2 = (int) (Math.log(y2 - y1 + 1) / Math.log(2));\n\n            int max1 = Math.max(sparseTable[x1][y1][k1][k2], sparseTable[x2 - (1 << k1) + 1][y1][k1][k2]);\n            int max2 = Math.max(sparseTable[x1][y2 - (1 << k2) + 1][k1][k2], sparseTable[x2 - (1 << k1) + 1][y2 - (1 << k2) + 1][k1][k2]);\n\n            return Math.max(max1, max2);\n        }\n    }\n}",
    "submit_ts": "1723909829",
    "subm_id": "1359207326"
}