{
    "username": "jpOtyG4Mis",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n       \n        int horizontal_pieces = 1;\n        int vertical_pieces = 1;\n        \n        \n        long long total_cost = 0;\n        \n        \n        int h = 0;\n        int v = 0;\n        \n        \n        while (h < horizontalCut.size() && v < verticalCut.size()) {\n            if (horizontalCut[h] >= verticalCut[v]) {\n                long long a=horizontalCut[h];\n                long long b=vertical_pieces;\n                a*=b;\n                total_cost += a;\n                horizontal_pieces++;\n                h++;\n            } else {\n               long long a=verticalCut[v];\n                long long b=horizontal_pieces;\n                a*=b;\n                total_cost += a;\n                vertical_pieces++;\n                v++;\n            }\n        }\n        \n       \n        while (h < horizontalCut.size()) {\n            long long a=horizontalCut[h];\n            long long b=vertical_pieces;\n            a*=b;\n            total_cost += a;\n            h++;\n        }\n        \n        \n        while (v < verticalCut.size()) {\n            long long a=verticalCut[v];\n            long long b=horizontal_pieces;\n            a*=b;\n            total_cost += a;\n            v++;\n        }\n        \n        return total_cost;\n    }\n};",
    "submit_ts": "1720925833",
    "subm_id": "1320267633"
}