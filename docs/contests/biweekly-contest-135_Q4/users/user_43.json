{
    "username": "Ivan_len",
    "submission": "class Solution {\npublic:\n    long long maximumScore(vector<vector<int>>& grid) {\n        int n = grid.size();\n        vector<vector<long long>> pref(n + 1, vector<long long>(n + 1));\n        for (int i = 1; i <= n; i++) {\n            for (int j = 1; j <= n; j++) {\n                pref[i][j] = (long long)grid[i - 1][j - 1] + pref[i - 1][j];\n            }\n        }\n        vector<vector<long long>> d(n + 5, vector<long long>(n + 5)), f;\n        for (int i = 1; i < n; i++) {\n            f.clear();\n            f.resize(n + 5, vector<long long>(n + 5));\n            if (i == 1) {\n                for (int x = 0; x <= n; x++) {\n                    for (int y = 0; y <= n; y++) {\n                        if (y > x) f[x][y] = pref[y][1] - pref[x][1];\n                        else f[x][y] = pref[x][2] - pref[y][2];\n                    }\n                }\n            }\n            else {\n                vector<long long> pref1(n + 5);\n                for (int x = 0; x <= n; x++) {\n                    for (int y = 0; y <= n; y++) pref1[y] = max(pref1[y], d[x][y]);\n                }\n                vector<long long> pref2(n + 5);\n                for (int y = 0; y <= n; y++) {\n                    for (int x = 0; x <= y; x++) pref2[y] = max(pref2[y], d[x][y]);\n                }\n\n                for (int y = 0; y <= n; y++) {\n                    long long pref3 = 0;\n                    vector<long long> pref4(n + 5);\n                    for (int x = y + 1; x <= n; x++) {\n                        pref4[x] = d[x][y] + pref[i][n] - pref[i][x];\n                    }\n                    vector<int> idx;\n                    long long mx = -1;\n                    for (int x = y + 1; x <= n; x++) {\n                        if (pref4[x] > mx) {\n                            mx = pref4[x];\n                            idx.push_back(x);\n                        }\n                    }\n                    for (int z = n; z >= 0; z--) {\n                        if (z < y) f[y][z] = max(f[y][z], pref[y][i + 1] - pref[z][i + 1] + pref1[y]);\n                        else {\n                            pref3 = max(pref3, d[z][y]);\n                            f[y][z] = max(f[y][z], pref2[y] + pref[z][i] - pref[y][i]);\n                            f[y][z] = max(f[y][z], pref3);\n                            if (z > y + 1) {\n                                assert(idx[0] = y + 1);\n                                while (idx.back() >= z) idx.pop_back();\n                                f[y][z] = max(f[y][z], d[idx.back()][y] + pref[z][i] - pref[max(idx.back(), y)][i]);\n                                // for (int x = y + 1; x < z; x++) f[y][z] = max(f[y][z], d[x][y] + max(0LL, pref[z][i] - pref[max(x, y)][i]));\n                            }\n                        }\n                    }\n                }\n            }\n            swap(d, f);\n            // for (int x = 0; x <= n; x++) for (int y = 0; y <= n; y++) cout << x << ' ' << y << ' ' << d[x][y] << '\\n';\n        }\n        long long ans = 0;\n        for (auto i : d) for (auto j : i) ans = max(ans, j);\n        return ans;\n    }\n};",
    "submit_ts": "1721490116",
    "subm_id": "1327473469"
}