{
    "username": "t-vaibhav",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1;\n        int m = edges2.size() + 1;\n        \n        vector<vector<int>> adjList1(n);\n        vector<vector<int>> adjList2(m);\n        \n        for (const auto& edge : edges1) {\n            adjList1[edge[0]].push_back(edge[1]);\n            adjList1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : edges2) {\n            adjList2[edge[0]].push_back(edge[1]);\n            adjList2[edge[1]].push_back(edge[0]);\n        }\n\n        auto depthFirstSearch = [](const vector<vector<int>>& adjList, int startNode, int& distantNode) {\n            int size = adjList.size();\n            vector<int> distance(size, -1);\n            function<void(int, int)> dfsTraversal = [&](int node, int dist) {\n                distance[node] = dist;\n                if (dist > distance[distantNode]) {\n                    distantNode = node;\n                }\n                for (int neighbor : adjList[node]) {\n                    if (distance[neighbor] == -1) {\n                        dfsTraversal(neighbor, dist + 1);\n                    }\n                }\n            };\n            distantNode = startNode;\n            dfsTraversal(startNode, 0);\n            return distance[distantNode];\n        };\n\n        int farthest1 = 0;\n        depthFirstSearch(adjList1, 0, farthest1);\n        int diameter1 = depthFirstSearch(adjList1, farthest1, farthest1);\n\n        int farthest2 = 0;\n        depthFirstSearch(adjList2, 0, farthest2);\n        int diameter2 = depthFirstSearch(adjList2, farthest2, farthest2);\n        \n        int minDiameter = max(diameter1, diameter2);\n        int half1 = (diameter1 + 1) / 2;\n        int half2 = (diameter2 + 1) / 2;\n        minDiameter = max(minDiameter, half1 + half2 + 1);\n        \n        return minDiameter;\n    }\n};\n",
    "submit_ts": 1719717094.0
}