{
    "username": "unknown_ajay",
    "submission": "\n/*\n \n File   : Leetcode.cpp\n -------------------\n |   Hello         |\n |   DSA !         |\n -------------------\n \n */\n\n#define mii map<int,int>\n#define vi vector<int>\n#define vs vector<string>\n#define vb vector<bool>\n#define pii pair<int,int>\n#define endl \"\\n\"\n#define intmax INT_MAX\n#define intmin INT_MIN\n#define need_for_speed ios_base::sync_with_stdio(false); cin.tie(NULL);\n#define ff(i,a,b) for(int i=a;i<b;i++)\n#define rfor(i,a,b) for(int i=a;i>=b;i--)\n#define all(x) x.begin(),x.end()\n#define pt(x) { cout<<x<<\"\\n\"; }\n#define fs first.second\n#define ss second.second\n#define countofSet(x) __builtin_popcount(x)\n#define pb push_back\n#define fir first\n#define sec second\n#define sqrt(x) sqrtl(x)\n#define pii pair<int,int>\n\nint please(vector<pii>& nums)\n{\n    int N = nums.size();\n    int abb, fk, ok, bbye;\n \n    abb = fk = nums[0].first + nums[0].second;\n    ok = bbye = nums[0].first - nums[0].second;\n    for (int i = 1; i < N; i++) {\n        int sum = nums[i].first + nums[i].second;\n        int diff = nums[i].first - nums[i].second;\n        if (sum < abb)\n        {\n            abb = sum;\n        }\n        else if (sum > fk)\n        {\n            fk = sum;\n        }\n        if (diff < ok)\n        {\n            ok = diff;\n        }\n        else if (diff > bbye)\n        {\n            bbye = diff;\n        }\n    }\n \n    int ret = max(fk - abb, bbye - ok);\n\n    return ret;\n}\n\npii gfPLA(vector<pii >& nums)\n{\n    int N = nums.size();\n    vector<pii> op1(N), op2(N);\n \n    for (int i = 0; i < N; i++)\n    {\n        op1[i] = {nums[i].first + nums[i].second,i};\n        op2[i] = {nums[i].first - nums[i].second,i};\n    }\n \n    sort(all(op1));\n    sort(all(op2));\n\n    int ret = op1.back().first - op1.front().first;\n    int a = op1.back().second , b = op1.front().second;\n    \n    int two = op2.back().first - op2.front().first;\n    if(two > ret)\n    {\n        ret = two;\n        a = op2.front().second;\n        b = op2.back().second;\n    }\n \n    return {a,b};\n}\n\nclass Solution {\npublic:\n    int minimumDistance(vector<vector<int>>& nums)\n    {\n        \n        int n = (int)nums.size();\n        vector<pii> okl; for(auto i:nums) okl.push_back({i[0],i[1]});\n        pii p = gfPLA(okl);\n        \n        vector<pii> F,S;\n        for(int i=0;i<n;i++)\n        {\n            if(i!=p.first)\n            {\n                F.push_back({nums[i][0],nums[i][1]});\n            }\n        }\n        for(int i=0;i<n;i++)\n        {\n            if(i!=p.second)\n            {\n                S.push_back({nums[i][0],nums[i][1]});\n            }\n        }\n        \n        int ans = please(F);\n        ans = min( ans , please(S) );\n        return ans;\n    }\n};"
}