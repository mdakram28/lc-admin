{
    "username": "Claucisco",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        def d(p):\n            transformed_plus = [x + y for x, y in p]\n            transformed_minus = [x - y for x, y in p]\n\n            # Find the max and min for both transformed sets\n            max_plus, min_plus = max(transformed_plus), min(transformed_plus)\n            max_minus, min_minus = max(transformed_minus), min(transformed_minus)\n\n            # The maximum Manhattan distance is the max of the differences\n            max_distance = max(max_plus - min_plus, max_minus - min_minus)\n\n            return max_distance\n        \n        \n        a1 = [(x + y, i) for i, (x, y) in enumerate(points)]\n        a2 = [(x - y, i) for i, (x, y) in enumerate(points)]\n        a1.sort()\n        a2.sort()\n        n1, m1 = a1[0][0], a1[-1][0]\n        n2, m2 = a2[0][0], a2[-1][0]\n        # m1 = max([x[0] for x in a1])\n        # m2 = max([x[0] for x in a2])\n        # n1 = min([x[0] for x in a1])\n        # n2 = min([x[0] for x in a2])\n        \n        ans = max(m1-n1, m2-n2)\n        if m1 - n1 >= ans:\n            i = a1[0][1]\n            ans = min(ans, d(points[:i]+points[i+1:]))\n            i = a1[-1][1]\n            ans = min(ans, d(points[:i]+points[i+1:]))\n        if m2 - n2 >= ans:\n            i = a2[0][1]\n            ans = min(ans, d(points[:i]+points[i+1:]))\n            i = a2[-1][1]\n            ans = min(ans, d(points[:i]+points[i+1:]))\n                \n        \n        return ans"
}