{
    "username": "vhlpZARocz",
    "submission": "class Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        n = len(points)\n        if n == 2:\n            return 0\n        lookup1 = [0 for i in range(n)]\n        lookup2 = [0 for i in range(n)]\n \n        for j in range(n):\n            lookup1[j] = (points[j][0] + points[j][1], j)\n            lookup2[j] = (points[j][0] - points[j][1], j)\n\n        lookup1.sort()\n        lookup2.sort()\n\n        t1, index1 = lookup1[0]\n        t2, index2 = lookup1[-1]\n        t3, index3 = lookup2[0]\n        t4, index4 = lookup2[-1]\n\n        def helper(points):\n            n = len(points)\n            l1, l2 = [0] * n, [0] * n\n            for j in range(n):\n                l1[j] = points[j][0] + points[j][1]\n                l2[j] = points[j][0] - points[j][1]\n \n            l1.sort()\n            l2.sort()\n            return max(l1[-1] - l1[0], l2[-1] - l2[0])\n        \n        res = float('inf')\n        for index in [index1, index2, index3, index4]:\n            res = min(res, helper(points[:index] + points[index+1:]))\n        return res\n            "
}