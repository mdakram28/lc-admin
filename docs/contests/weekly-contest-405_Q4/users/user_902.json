{
    "username": "balani491",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n\nusing namespace std;\n\n// TrieNode definition\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool isEnd;\n    int minCost;\n    TrieNode() : isEnd(false), minCost(INT_MAX) {}\n};\n\nclass Trie {\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(string& word, int cost) {\n        TrieNode* curr = root;\n        for (char c : word) {\n            if (curr->children.find(c) == curr->children.end()) {\n                curr->children[c] = new TrieNode();\n            }\n            curr = curr->children[c];\n        }\n        curr->isEnd = true;\n        curr->minCost = min(curr->minCost, cost);\n    }\n    \n    TrieNode* root;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;  \n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        TrieNode* curr = trie.root;\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // Skip if this state is unreachable\n            \n            curr = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (curr->children.find(target[j]) == curr->children.end()) break; // No match found\n\n                curr = curr->children[target[j]];\n                if (curr->isEnd) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + curr->minCost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};\n",
    "submit_ts": "1720322451",
    "subm_id": "1312350272"
}