{
    "username": "Kraizan",
    "submission": "class SegmentTree {\nprivate:\n    vector<int> tree;\n    vector<int> nums;\n    int n;\n\n    // Function to build the segment tree\n    int build(int node, int start, int end) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            tree[node] = build(2 * node + 1, start, mid) +\n                         build(2 * node + 2, mid + 1, end);\n        }\n        return tree[node];\n    }\n\n    // Function to query the number of peaks in a given range\n    int query(int node, int start, int end, int L, int R) {\n        if (start > R || end < L) return 0;\n        if (start >= L && end <= R) return tree[node];\n\n        int mid = (start + end) / 2;\n        return query(2 * node + 1, start, mid, L, R) +\n               query(2 * node + 2, mid + 1, end, L, R);\n    }\n\n    // Function to update the segment tree after changing an element in the array\n    void update(int node, int start, int end, int idx) {\n        if (start == end) {\n            tree[node] = isPeak(start) ? 1 : 0;\n        } else {\n            int mid = (start + end) / 2;\n            if (start <= idx && idx <= mid) {\n                update(2 * node + 1, start, mid, idx);\n            } else {\n                update(2 * node + 2, mid + 1, end, idx);\n            }\n            tree[node] = tree[2 * node + 1] + tree[2 * node + 2];\n        }\n    }\n\n    // Helper function to determine if an element at index idx is a peak\n    bool isPeak(int idx) {\n        if (idx <= 0 || idx >= n - 1) return false;\n        return nums[idx] > nums[idx - 1] && nums[idx] > nums[idx + 1];\n    }\n\npublic:\n    // Constructor to initialize the segment tree\n    SegmentTree(vector<int>& arr) : nums(arr) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(0, 0, n - 1);\n    }\n\n    // Public query function\n    int query(int L, int R) {\n        if (L >= R - 1) return 0;  // no peaks possible if L and R are consecutive or same\n        return query(0, 0, n - 1, L + 1, R - 1);  // Adjusted range to not include boundary elements\n    }\n\n    // Public update function\n    void update(int idx, int val) {\n        nums[idx] = val;\n        for (int i = idx - 1; i <= idx + 1; ++i) {\n            if (i >= 0 && i < n) {\n                update(0, 0, n - 1, i);\n            }\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        SegmentTree segTree(nums);\n        vector<int> ans;\n\n        for (const auto& query : queries) {\n            if (query[0] == 1) {\n                ans.push_back(segTree.query(query[1], query[2]));\n            } else if (query[0] == 2) {\n                segTree.update(query[1], query[2]);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1718509168",
    "subm_id": "1289701189"
}