{
    "username": "suraj1191",
    "submission": "class Solution {\npublic:\n\n    vector<int> solve(int n, vector<vector<int>>& queries){\n         vector<vector<int>> dist(n + 1, vector<int>(n + 1, INT_MAX));\n\n        for (int i = 0; i < n - 1; i++) {\n            dist[i][i + 1] = 1;\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                if (i == j) {\n                    dist[i][j] = 0;\n                }\n            }\n        }\n\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < n; j++) {\n                for (int k = 0; k < n; k++) {\n                    if (dist[i][k] < INT_MAX && dist[k][j] < INT_MAX) {\n                        dist[i][j] = min(dist[i][j], (dist[i][k] + dist[k][j]));\n                    }\n                }\n            }\n        }\n\n        vector<int> ans;\n\n        for (auto q : queries) {\n            int u = q[0];\n            int v = q[1];\n\n            if (dist[u][v] > 1) {\n                dist[u][v] = 1;\n\n               vector<bool> visited(n, false);\n                queue<int> q;\n                q.push(u);\n                visited[u] = true;\n\n                while (!q.empty()) {\n                    int node = q.front();\n                    q.pop();\n\n                    for (int j = 0; j < n; ++j) {\n                        if (dist[node][j] < INT_MAX && dist[u][j] > dist[u][node] + dist[node][j]) {\n                            dist[u][j] = dist[u][node] + dist[node][j];\n                            if (!visited[j]) {\n                                visited[j] = true;\n                                q.push(j);\n                            }\n                        }\n                    }\n                }\n\n                visited.assign(n, false);\n                q.push(v);\n                visited[v] = true;\n\n                while (!q.empty()) {\n                    int node = q.front();\n                    q.pop();\n\n                    for (int j = 0; j < n; ++j) {\n                        if (dist[node][j] < INT_MAX && dist[v][j] > dist[v][node] + dist[node][j]) {\n                            dist[v][j] = dist[v][node] + dist[node][j];\n                            if (!visited[j]) {\n                                visited[j] = true;\n                                q.push(j);\n                            }\n                        }\n                    }\n                }\n            }\n\n\n            ans.push_back(dist[0][n - 1]);\n        }\n\n        return ans;\n\n    }\n    vector<int> shortestDistanceAfterQueries(int n, vector<vector<int>>& que) {\n        \n        vector<int> dist(n, 0);\n        for (int i = 1; i < n; ++i) {\n            dist[i] = dist[i - 1] + 1;\n        }\n\n        set<int> st;\n        for (int i = 0; i < n; ++i) {\n            st.insert(i);\n        }\n\n        vector<int> vec;\n\n        for ( auto it : que) {\n            int l = it[0];\n            int rt = it[1];\n\n            auto lb = st.lower_bound(l + 1);\n            auto ub = st.lower_bound(rt);\n\n            st.erase(lb, ub);\n\n            vec.push_back(st.size() - 1);\n        }\n\n        return vec;\n    }\n};",
    "submit_ts": "1722743807",
    "subm_id": "1343800107"
}