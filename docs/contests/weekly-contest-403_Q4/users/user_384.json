{
    "username": "jiangzhouxy",
    "submission": "class Solution {\n    public int minimumSum(int[][] grid) {\n        int res = 1000;\n        // first \n        for (int left = 0; left < grid[0].length; left++) {\n            for (int right = left + 1; right + 1 <= grid[0].length - 1; right++) {\n                // [0, left) 1, [left, right) 2, [right, len) 3\n                int curRes = 0;\n                curRes += cal(grid, 0, grid.length - 1, 0, left);\n                curRes += cal(grid, 0, grid.length - 1, left + 1, right);\n                curRes += cal(grid, 0, grid.length - 1, right + 1, grid[0].length - 1);\n                res = Math.min(res, curRes);\n            }\n        }\n        \n        //second\n        for (int up = 0; up < grid.length; up++) {\n            for (int down = up + 1; down + 1 <= grid.length - 1; down++) {\n                int curRes = 0;\n                curRes += cal(grid, 0, up, 0, grid[0].length - 1);\n                curRes += cal(grid, up + 1, down, 0, grid[0].length - 1);\n                curRes += cal(grid, down + 1, grid.length - 1, 0, grid[0].length - 1);\n                res = Math.min(res, curRes);\n            }\n        }\n        \n        for (int left = 0; left < grid[0].length - 1; left++) {\n            for (int down = 0; down + 1 <= grid.length - 1; down++) {\n                int curRes = 0;\n                curRes += cal(grid, 0, grid.length - 1, 0, left);\n                curRes += cal(grid, 0, down, left + 1, grid[0].length - 1);\n                curRes += cal(grid, down + 1, grid.length - 1, left + 1, grid[0].length - 1);\n                res = Math.min(res, curRes);\n            }\n        }\n        \n        for (int left = 1; left < grid[0].length; left++) {\n            for (int down = 0; down + 1 <= grid.length - 1; down++) {\n                int curRes = 0;\n                curRes += cal(grid, 0, grid.length - 1, left, grid[0].length - 1);\n                curRes += cal(grid, 0, down, 0, left - 1);\n                curRes += cal(grid, down + 1, grid.length - 1, 0, left - 1);\n                res = Math.min(res, curRes);\n            }\n        }\n        \n        for (int up = 0; up + 1 <= grid.length - 1; up++) {\n            for (int left = 0; left + 1 <= grid[0].length - 1; left++) {\n                int curRes = 0;\n                curRes += cal(grid, 0, up, 0, grid[0].length - 1);\n                curRes += cal(grid, up + 1, grid.length - 1, 0, left);\n                curRes += cal(grid, up + 1, grid.length - 1, left + 1, grid[0].length - 1);\n                res = Math.min(res, curRes);\n            }\n        }\n        \n        for (int up = 1; up + 1 <= grid.length - 1; up++) {\n            for (int left = 0; left + 1 <= grid[0].length - 1; left++) {\n                int curRes = 0;\n                curRes += cal(grid, up, grid.length - 1, 0, grid[0].length - 1);\n                curRes += cal(grid, 0, up - 1, 0, left);\n                curRes += cal(grid, 0, up - 1, left + 1, grid[0].length - 1);\n                res = Math.min(res, curRes);\n            }\n        }\n        return res;\n    }\n    \n    \n    private int cal(int[][] grid, int xsmall, int xlarge, int ysmall, int ylarge) {\n        int up = 1000, down = -1, left = 1000, right = -1;\n        for (int i = xsmall; i <= xlarge; i++) {\n            for (int j = ysmall; j <= ylarge; j++) {\n                if (grid[i][j] == 1) {\n                    up = Math.min(up, i);\n                    down = Math.max(down, i);\n                    left = Math.min(left, j);\n                    right = Math.max(right, j);\n                }\n            }\n        }\n        if (left == 1000) {\n            return 0;\n        }\n        return (down - up + 1) * (right - left + 1);\n    }\n}",
    "submit_ts": 1719114517.0
}