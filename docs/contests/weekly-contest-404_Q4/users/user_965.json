{
    "username": "xyz_1234567",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n=edges1.size()+1, m=edges2.size()+1;\n        vector<vector<int>>adj1(n);\n        vector<vector<int>>adj2(m);\n        for (const auto& e:edges1){\n            adj1[e[0]].push_back(e[1]);\n            adj1[e[1]].push_back(e[0]);\n        }\n        for (const auto& e:edges2){\n            adj2[e[0]].push_back(e[1]);\n            adj2[e[1]].push_back(e[0]);\n        }\n        \n        auto dfs=[](const vector<vector<int>>& adj, int start, int&far){\n            int n=adj.size();\n            vector<int>dist(n,-1);\n            function<void(int,int)>dfsVis=[&](int node, int d){\n                dist[node]=d;\n                if(d>dist[far]) far=node;\n                for (int it:adj[node]){\n                    if(dist[it]==-1) dfsVis(it, d+1);\n                }\n            };\n            far=start;\n            dfsVis(start,0);\n            return dist[far];\n        };\n        \n        int farn1=0;\n        dfs(adj1,0,farn1);\n        int dia1= dfs(adj1,farn1,farn1);\n        int farn2=0;\n        dfs(adj2,0,farn2);\n        int dia2= dfs(adj2,farn2,farn2);\n        int mini= max(dia1,dia2);\n        mini= max(mini, ((dia1+1)/2)+((dia2+1)/2)+1);\n        return mini;\n    }\n};",
    "submit_ts": 1719717616.0
}