{
    "username": "leetcode-vj",
    "submission": "class Solution {\n    public int bfs(List<List<Integer>> graph, int start, int target1, int target2, int nodes) {\n        Queue<Integer> q = new LinkedList<>();\n        int[] visited = new int[nodes + 4];\n        q.add(start);\n        visited[start] = 1;\n\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : graph.get(u)) {\n                if (visited[v] == 0) {\n                    q.add(v);\n                    visited[v] = 1;\n                }\n            }\n        }\n        return visited[target1] != 0 || visited[target2] != 0 ? 1 : 0;\n    }\n    public boolean canReachCorner(int X, int Y, int[][] circles2) {\n        int numCircles = circles2.length;\n        List<Pair<Pair<Integer, Integer>, Integer>> circles = new ArrayList<>(numCircles);\n        List<List<Integer>> graph = new ArrayList<>(numCircles + 4);\n\n        for (int i = 0; i < numCircles + 4; ++i) {\n            graph.add(new ArrayList<>());\n        }\n\n        for (int[] circle : circles2) {\n            circles.add(new Pair<>(new Pair<>(circle[0], circle[1]), circle[2]));\n        }\n\n        for (int i = 0; i < numCircles; ++i) {\n            Pair<Integer, Integer> coord = circles.get(i).first;\n            int radius = circles.get(i).second;\n\n            if (coord.first <= radius) {\n                graph.get(numCircles).add(i);\n                graph.get(i).add(numCircles);\n            }\n            if (X - coord.first <= radius) {\n                graph.get(numCircles + 2).add(i);\n                graph.get(i).add(numCircles + 2);\n            }\n            if (coord.second <= radius) {\n                graph.get(numCircles + 1).add(i);\n                graph.get(i).add(numCircles + 1);\n            }\n            if (Y - coord.second <= radius) {\n                graph.get(numCircles + 3).add(i);\n                graph.get(i).add(numCircles + 3);\n            }\n\n            for (int j = i + 1; j < numCircles; ++j) {\n                Pair<Integer, Integer> coordJ = circles.get(j).first;\n                int radiusJ = circles.get(j).second;\n                double distance = Math.sqrt(Math.pow(coord.first - coordJ.first, 2) + Math.pow(coord.second - coordJ.second, 2));\n                int radiusSum = radius + radiusJ;\n                if (radiusSum >= distance) {\n                    graph.get(i).add(j);\n                    graph.get(j).add(i);\n                }\n            }\n        }\n\n        int isBlocked = 0;\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n        isBlocked = Math.max(isBlocked, bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n\n        return isBlocked == 0;\n    }\n    class Pair<F, S> {\n        public F first;\n        public S second;\n\n        public Pair(F first, S second) {\n            this.first = first;\n            this.second = second;\n        }\n    }\n}",
    "submit_ts": "1722137503",
    "subm_id": "1335765651"
}