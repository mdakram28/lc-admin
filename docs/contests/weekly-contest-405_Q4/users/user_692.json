{
    "username": "riteshroger2022",
    "submission": "class Node\n{\npublic:\n    \n    unordered_map<char, Node *> childs;\n    vector<pair<int, int>> last_char;\n};\n\n\nclass Trie\n{\npublic:\n    \n    Node *root;\n\n    Trie()\n    {\n        root = new Node();\n    }\n\n    void insert(string word, int pos, int val)\n    {\n\n        Node *node = root;\n\n        for (auto it : word)\n        {\n\n            if (!node->childs.count(it))\n            {\n                node->childs[it] = new Node();\n            }\n            node = node->childs[it];\n        }\n\n        node->last_char.push_back({pos, val});\n    }\n    \n};\n\nclass Solution\n{\npublic:\n    \n    int minimumCost(string target, vector<string> &words, vector<int> &costs)\n    {\n        int size = target.size();\n\n        vector<int> dp(size + 1, INT_MAX);\n\n        dp[0] = 0;\n\n        Trie trie;\n\n        for (int x = 0; x < words.size(); x++)\n        {\n            trie.insert(words[x], x, costs[x]);\n        }\n\n        for (int x = 0; x < size; x++)\n        {\n            if (dp[x] == INT_MAX)\n            {\n                continue;\n            }\n\n            Node *node = trie.root;\n\n            for (int y = x; y < size; y++)\n            {\n                if (!node->childs.count(target[y]))\n                {\n                    break;\n                }\n\n                node = node->childs[target[y]];\n\n                for (auto it : node->last_char)\n                {\n                    int str_size = words[it.first].size();\n\n                    int curr = x + str_size;\n\n                    if (curr <= size)\n                    {\n                        dp[curr] = min(dp[curr], (dp[x] + it.second));\n                    }\n                }\n            }\n        }\n\n        if (dp[size] == INT_MAX)\n        {\n            return -1;\n        }\n        else\n        {\n            return dp[size];\n        }\n    }\n};",
    "submit_ts": "1720322992",
    "subm_id": "1312364557"
}