{
    "username": "kunal_91",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> adjacencyList;\n    vector<int> markingTimes;\n    vector<int> subtreeMaxTimes;\n    vector<int> result;\n\n    void calculateMarkingTimes(int node, int parent) {\n        int currentTime = markingTimes[node];\n\n        for (auto& neighbor : adjacencyList[node]) {\n            if (neighbor != parent) {\n                if (neighbor & 1) markingTimes[neighbor] = currentTime + 1;\n                else markingTimes[neighbor] = currentTime + 2;\n                calculateMarkingTimes(neighbor, node);\n            }\n        }\n    }\n\n    void calculateSubtreeMaxTimes(int node, int parent) {\n        int maxTime = markingTimes[node];\n\n        for (auto& neighbor : adjacencyList[node]) {\n            if (neighbor == parent) continue;\n            calculateSubtreeMaxTimes(neighbor, node);\n            maxTime = max(maxTime, subtreeMaxTimes[neighbor]);\n        }\n\n        subtreeMaxTimes[node] = maxTime;\n    }\n\n    void computeFinalTimes(int node, int parent, int additionalTime) {\n        int maxTime = 0, secondMaxTime = 0;\n        for (auto& neighbor : adjacencyList[node]) {\n            if (neighbor != parent) {\n                if (subtreeMaxTimes[neighbor] > maxTime) {\n                    secondMaxTime = maxTime;\n                    maxTime = subtreeMaxTimes[neighbor];\n                } else if (subtreeMaxTimes[neighbor] > secondMaxTime) {\n                    secondMaxTime = subtreeMaxTimes[neighbor];\n                }\n            }\n        }\n\n        result[node] = max(additionalTime, maxTime - markingTimes[node]);\n\n        for (auto& neighbor : adjacencyList[node]) {\n            if (neighbor != parent) {\n                if (subtreeMaxTimes[neighbor] == maxTime) {\n                    computeFinalTimes(neighbor, node, ((node % 2 == 0) ? 2 : 1) + max(additionalTime, secondMaxTime - markingTimes[node]));\n                } else {\n                    computeFinalTimes(neighbor, node, ((node % 2 == 0) ? 2 : 1) + max(additionalTime, maxTime - markingTimes[node]));\n                }\n            }\n        }\n    }\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n\n        adjacencyList.resize(n);\n        for (auto& edge : edges) {\n            adjacencyList[edge[0]].push_back(edge[1]);\n            adjacencyList[edge[1]].push_back(edge[0]);\n        }\n\n        markingTimes.resize(n, -1);\n        subtreeMaxTimes.resize(n, 0);\n        result.resize(n, 0);\n\n        markingTimes[0] = 0;\n        calculateMarkingTimes(0, -1);\n        calculateSubtreeMaxTimes(0, -1);\n        computeFinalTimes(0, -1, 0);\n\n        return result;\n    }\n};\n",
    "submit_ts": "1722700699",
    "subm_id": "1343250010"
}