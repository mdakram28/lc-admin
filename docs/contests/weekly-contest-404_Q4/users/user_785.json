{
    "username": "TheAriyanBhaumik",
    "submission": "class Solution {\npublic:\n    int treeDiameter(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        for (auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n        \n        // Perform first BFS to find the farthest node from any node (let's start from node 0)\n        auto bfs1 = [&](int start) {\n            vector<int> v(n, -1);\n            queue<int> q;\n            q.push(start);\n            v[start] = 0;\n            int far = start;\n            while (!q.empty()) {\n                int node = q.front(); q.pop();\n                for (int nng : adj[node]) {\n                    if (v[nng] == -1) {\n                        v[nng] = v[node] + 1;\n                        q.push(nng);\n                        if (v[nng] > v[far]) {\n                            far = nng;\n                        }\n                    }\n                }\n            }\n            return make_pair(far, v[far]);\n        };\n        \n        auto bfs2 = bfs1(0);\n        auto bfs3 = bfs1(bfs2.first);\n        return bfs3.second;\n    }\n\n    vector<int> findTreeCenters(vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> adj(n);\n        vector<int> deg(n, 0);\n        for (auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n            deg[edge[0]]++;\n            deg[edge[1]]++;\n        }\n        \n        queue<int> leaves;\n        for (int i = 0; i < n; ++i) {\n            if (deg[i] == 1) {\n                leaves.push(i);\n            }\n        }\n        \n        int rnn = n;\n        while (rnn > 2) {\n            int lc = leaves.size();\n            rnn -= lc;\n            for (int i = 0; i < lc; ++i) {\n                int leaf = leaves.front(); leaves.pop();\n                for (int nng : adj[leaf]) {\n                    if (--deg[nng] == 1) {\n                        leaves.push(nng);\n                    }\n                }\n            }\n        }\n        \n        vector<int> centers;\n        while (!leaves.empty()) {\n            centers.push_back(leaves.front());\n            leaves.pop();\n        }\n        \n        return centers;\n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        if (edges1.size() == 0 && edges2.size() == 0) return 1;\n        if (edges1.size() == 0 || edges2.size() == 0) return 2;\n        \n        int d1 = treeDiameter(edges1);\n        int d2 = treeDiameter(edges2);\n        \n        vector<int> c1 = findTreeCenters(edges1);\n        vector<int> c2 = findTreeCenters(edges2);\n        \n        int ans = INT_MAX;\n        for (int c1_val : c1) {\n            for (int c2_val : c2) {\n                int nd = max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n                ans = min(ans, nd);\n            }\n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": "1719719977",
    "subm_id": "1304455752"
}