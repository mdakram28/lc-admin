{
    "username": "tungduong150105",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = (int) edges1.size() + 1;\n        int m = (int) edges2.size() + 1;\n        int ans = 0;\n        int fx, fy;\n        {\n            std::vector<std::vector<int>> adj(n);\n            for (int i = 0; i < n - 1; ++i) {\n                int u = edges1[i][0];\n                int v = edges1[i][1];\n                adj[u].push_back(v);\n                adj[v].push_back(u);\n            }\n            std::queue<int> bfs;\n            bfs.push(0);\n            constexpr int inf = 1E9;\n            std::vector<int> d(n, inf);\n            d[0] = 0;\n            while (bfs.size()) {\n                int u = bfs.front();\n                bfs.pop();\n                for (int v : adj[u]) {\n                    if (d[v] > d[u] + 1) {\n                        d[v] = d[u] + 1;\n                        bfs.push(v);\n                    }\n                }\n            }\n            int mx = *std::max_element(d.begin(), d.end());\n            int x;\n            for (int i = 0; i < n; ++i) {\n                if (d[i] == mx) {\n                    x = i;\n                }\n            }\n            bfs.push(x);\n            d.assign(n, inf);\n            d[x] = 0;\n            while (bfs.size()) {\n                int u = bfs.front();\n                bfs.pop();\n                for (int v : adj[u]) {\n                    if (d[v] > d[u] + 1) {\n                        d[v] = d[u] + 1;\n                        bfs.push(v);\n                    }\n                }\n            }\n            fx = *std::max_element(d.begin(), d.end());\n            \n        }\n        {\n            std::vector<std::vector<int>> adj(m);\n            for (int i = 0; i < m - 1; ++i) {\n                int u = edges2[i][0];\n                int v = edges2[i][1];\n                adj[u].push_back(v);\n                adj[v].push_back(u);\n            }\n            std::queue<int> bfs;\n            bfs.push(0);\n            constexpr int inf = 1E9;\n            std::vector<int> d(m, inf);\n            d[0] = 0;\n            while (bfs.size()) {\n                int u = bfs.front();\n                bfs.pop();\n                for (int v : adj[u]) {\n                    if (d[v] > d[u] + 1) {\n                        d[v] = d[u] + 1;\n                        bfs.push(v);\n                    }\n                }\n            }\n            int mx = *std::max_element(d.begin(), d.end());\n            int x;\n            for (int i = 0; i < m; ++i) {\n                if (d[i] == mx) {\n                    x = i;\n                }\n            }\n            bfs.push(x);\n            d.assign(m, inf);\n            d[x] = 0;\n            while (bfs.size()) {\n                int u = bfs.front();\n                bfs.pop();\n                for (int v : adj[u]) {\n                    if (d[v] > d[u] + 1) {\n                        d[v] = d[u] + 1;\n                        bfs.push(v);\n                    }\n                }\n            }\n            fy = *std::max_element(d.begin(), d.end());\n        }\n        ans = std::max({fx, fy, (fx + 1) / 2 + (fy + 1) / 2 + 1});\n        return ans;\n    }\n};",
    "submit_ts": "1719716753",
    "subm_id": "1304373135"
}