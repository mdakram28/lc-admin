{
    "username": "Chris_Evanss",
    "submission": "class Solution {\npublic:\n    // Function to count the minimum flips required for a 2x2 sub-grid\n    int minFlipsForSubGrid(vector<vector<int>>& grid, int i, int j, int n, int m) {\n        vector<int> elements = {\n            grid[i][j],\n            grid[n - i - 1][j],\n            grid[i][m - j - 1],\n            grid[n - i - 1][m - j - 1]\n        };\n        \n        int ones = count(elements.begin(), elements.end(), 1);\n        return min(ones, 4 - ones);\n    }\n    \n    // Function to handle the middle row if n is odd\n    int handleMiddleRow(vector<vector<int>>& grid, int n, int m, int& possible, int& count) {\n        int ans = 0;\n        if (n % 2 != 0) {\n            for (int j = 0; j < m / 2; ++j) {\n                if (grid[n / 2][j] != grid[n / 2][m - j - 1]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[n / 2][j] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n    \n    // Function to handle the middle column if m is odd\n    int handleMiddleColumn(vector<vector<int>>& grid, int n, int m, int& possible, int& count) {\n        int ans = 0;\n        if (m % 2 != 0) {\n            for (int i = 0; i < n / 2; ++i) {\n                if (grid[i][m / 2] != grid[n - i - 1][m / 2]) {\n                    ans += 1;\n                    possible += 1;\n                } else {\n                    if (grid[i][m / 2] == 1) {\n                        count += 1;\n                    }\n                }\n            }\n        }\n        return ans;\n    }\n    \n    // Function to handle the central element if both n and m are odd\n    int handleCentralElement(vector<vector<int>>& grid, int n, int m) {\n        if (n % 2 != 0 && m % 2 != 0 && grid[n / 2][m / 2] == 1) {\n            return 1;\n        }\n        return 0;\n    }\n    \n    int minFlips(vector<vector<int>>& grid) {\n        int n = grid.size();\n        int m = grid[0].size();\n        \n        int ans = 0;\n        \n        // Loop through the 2x2 sub-grids\n        for (int i = 0; i < n / 2; ++i) {\n            for (int j = 0; j < m / 2; ++j) {\n                ans += minFlipsForSubGrid(grid, i, j, n, m);\n            }\n        }\n        \n        int possible = 0;\n        int count = 0;\n        \n        // Handle the middle row if n is odd\n        ans += handleMiddleRow(grid, n, m, possible, count);\n        \n        // Handle the middle column if m is odd\n        ans += handleMiddleColumn(grid, n, m, possible, count);\n        \n        // Handle the central element if both n and m are odd\n        ans += handleCentralElement(grid, n, m);\n        \n        // Adjust the answer if there are no possible flips and the count of ones is odd\n        if (possible == 0 && count % 2 != 0) {\n            ans += 2;\n        }\n        \n        return ans;\n    }\n};\n",
    "submit_ts": "1722699380",
    "subm_id": "1343209899"
}