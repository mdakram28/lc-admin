{
    "username": "sujanrupu",
    "submission": "class Solution {\npublic:\n    int bfs(vector<vector<int>>& adjList, int startNode, int targetNode1, int targetNode2, int totalNodes) {\n        queue<int> nodeQueue;\n        vector<int> visited(totalNodes + 4, 0);\n        nodeQueue.push(startNode);\n        visited[startNode] = 1;\n\n        // Perform BFS traversal\n        while (!nodeQueue.empty()) {\n            int currentNode = nodeQueue.front();\n            nodeQueue.pop();\n            for (int neighbor : adjList[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodeQueue.push(neighbor);\n                    visited[neighbor] = 1;\n                }\n            }\n        }\n        return visited[targetNode1] || visited[targetNode2];\n    }\n\n    bool canReachCorner(int gridWidth, int gridHeight, vector<vector<int>>& inputCircles) {\n        vector<pair<pair<int, int>, int>> circles(inputCircles.size());\n        vector<vector<int>> adjList(inputCircles.size() + 4);\n        int numCircles = inputCircles.size();\n\n        // Convert inputCircles to a more structured format\n        for (int i = 0; i < numCircles; ++i) {\n            circles[i].first.first = inputCircles[i][0];\n            circles[i].first.second = inputCircles[i][1];\n            circles[i].second = inputCircles[i][2];\n        }\n\n        // Construct the adjacency list based on circle positions and connections\n        for (int i = 0; i < numCircles; ++i) {\n            // Connect circles to the edges of the grid\n            if (circles[i].first.first <= circles[i].second) {\n                adjList[numCircles].push_back(i);\n                adjList[i].push_back(numCircles);\n            }\n            if (gridWidth - circles[i].first.first <= circles[i].second) {\n                adjList[numCircles + 2].push_back(i);\n                adjList[i].push_back(numCircles + 2);\n            }\n            if (circles[i].first.second <= circles[i].second) {\n                adjList[numCircles + 1].push_back(i);\n                adjList[i].push_back(numCircles + 1);\n            }\n            if (gridHeight - circles[i].first.second <= circles[i].second) {\n                adjList[numCircles + 3].push_back(i);\n                adjList[i].push_back(numCircles + 3);\n            }\n\n            // Connect circles to each other if they overlap\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radiusSum = circles[i].second + circles[j].second;\n                if (radiusSum >= distance) {\n                    adjList[i].push_back(j);\n                    adjList[j].push_back(i);\n                }\n            }\n        }\n\n        // Check if any of the corners are blocked by performing BFS\n        int isBlocked = 0;\n        isBlocked = max(isBlocked, bfs(adjList, numCircles, numCircles + 1, numCircles + 2, numCircles + 4)); // Check for bottom-left corner\n        isBlocked = max(isBlocked, bfs(adjList, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4)); // Check for top-right corner\n        \n        // If either of the corners is blocked, return false\n        if (isBlocked) {\n            return false;\n        }\n\n        // Otherwise, return true\n        return true;\n    }\n};\n",
    "submit_ts": "1722137102",
    "subm_id": "1335754211"
}