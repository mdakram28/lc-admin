{
    "username": "Divanshi_Jain",
    "submission": "class Solution {\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        int n = circles.length;\n        List<List<Integer>> adj = new ArrayList<>();\n        for (int i = 0; i < n + 4; ++i) {\n            adj.add(new ArrayList<>());\n        }\n        for (int i = 0; i < n; ++i) {\n            int x = circles[i][0];\n            int y = circles[i][1];\n            int r = circles[i][2];\n            \n            if (x <= r) {\n                adj.get(n).add(i);\n                adj.get(i).add(n);\n            }\n            if (X - x <= r) {\n                adj.get(n + 2).add(i);\n                adj.get(i).add(n + 2);\n            }\n            if (y <= r) {\n                adj.get(n + 1).add(i);\n                adj.get(i).add(n + 1);\n            }\n            if (Y - y <= r) {\n                adj.get(n + 3).add(i);\n                adj.get(i).add(n + 3);\n            }\n            for (int j = i + 1; j < n; ++j) {\n                int xj = circles[j][0];\n                int yj = circles[j][1];\n                int rj = circles[j][2];\n                double dist = Math.sqrt(Math.pow(x - xj, 2) + Math.pow(y - yj, 2));\n                int rSum = r + rj;\n                if (rSum >= dist) {\n                    adj.get(i).add(j);\n                    adj.get(j).add(i);\n                }\n            }\n        }\n\n        boolean blocked = false;\n        blocked |= bfs(adj, n, n + 1, n + 2, n + 4); \n        blocked |= bfs(adj, n + 3, n + 2, n + 1, n + 4); \n        return !blocked;\n    }\n    public boolean bfs(List<List<Integer>> adj, int s, int t1, int t2, int n){\n        Queue<Integer> q = new LinkedList<>();\n        boolean[] vis = new boolean[n + 4];\n        q.add(s);\n        vis[s] = true;\n        while (!q.isEmpty()) {\n            int u = q.poll();\n            for (int v : adj.get(u)) {\n                if (!vis[v]) {\n                    q.add(v);\n                    vis[v] = true;\n                }\n            }\n        }\n        return vis[t1] || vis[t2];\n    }\n}",
    "submit_ts": "1722137603",
    "subm_id": "1335768502"
}