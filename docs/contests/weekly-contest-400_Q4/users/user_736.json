{
    "username": "sarvagya2545",
    "submission": "class Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        vector<int> prefix[32];\n        for(int pos = 0; pos <= 30; pos++) {\n            prefix[pos] = vector<int> (n + 1, 0);\n        }\n        \n        for(int i = 0; i < n; i++) {\n            for(int pos = 0; pos <= 30; pos++) {\n                prefix[pos][i + 1] = prefix[pos][i] + ((nums[i] & (1 << pos)) != 0);\n                // cout << prefix[pos][i + 1] << \" \";\n            }\n            // cout << \"\\n\";\n        }\n        \n        int ans = 1e9;\n        for(int i = 0; i < n; i++) {\n            int left = i, right = n - 1;\n            while(left <= right) {\n                int mid = left + (right - left) / 2;\n                int x = 0;\n                for(int pos = 30; pos >= 0; pos--) {\n                    if(prefix[pos][mid + 1] - prefix[pos][i] == mid + 1 - i) {\n                        x |= (1 << pos);\n                    }\n                }\n                \n                // cout << i << \" \" << mid << \" \" << x << \"\\n\";\n                \n                ans = min(ans, abs(x - k));\n                \n                if(x < k) {\n                    right = mid - 1;\n                } else {\n                    left = mid + 1;\n                }\n            }\n            \n            // cout << i << \" \" << left << \"\\n\";\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717299790",
    "subm_id": "1274823974"
}