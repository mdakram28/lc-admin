{
    "username": "_mohit__",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n     int n = nums.size();\n    vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n    int maxLength = 1;\n    vector<int> maxLenForK(k + 1, -1);  \n    vector<map<int, int>> maxLenForKWithNum(k + 1); \n    for (int i = 0; i < n; ++i) {\n        for (int j = 0; j <= k; ++j) {\n            for (int l = 0; l < j; ++l) {\n                dp[i][j] = max(dp[i][j], 1 + maxLenForK[l]); \n            }\n            if (maxLenForKWithNum[j].find(nums[i])!=maxLenForKWithNum[j].end()) {\n                dp[i][j] = max(dp[i][j], 1 + maxLenForKWithNum[j][nums[i]]);\n            }\n            maxLength = max(maxLength, dp[i][j]); \n        }\n        for (int j = 0; j <= k; ++j) {\n            maxLenForK[j] = max(maxLenForK[j], dp[i][j]);\n            maxLenForKWithNum[j][nums[i]] = max(maxLenForKWithNum[j][nums[i]], dp[i][j]);\n        }\n    }\n\n    return maxLength; \n\n    }\n};",
    "submit_ts": 1717862082.0
}