{
    "username": "clancycodes",
    "submission": "class Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n       int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN; // Use long long for large values\n\n        // Store the top values from each row with their column indices\n        std::vector<std::vector<std::pair<int, int>>> rowBest(m);\n\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                rowBest[i].push_back({board[i][j], j});\n            }\n            // Sort to keep the best three values in each row\n            std::sort(rowBest[i].rbegin(), rowBest[i].rend());\n            if (rowBest[i].size() > 3) rowBest[i].resize(3); // Keep only top 3\n        }\n\n        // Try all combinations of the top values from three different rows\n        for (int i1 = 0; i1 < m; ++i1) {\n            for (int i2 = i1 + 1; i2 < m; ++i2) {\n                for (int i3 = i2 + 1; i3 < m; ++i3) {\n                    // Try all column combinations from the selected rows\n                    for (const auto& p1 : rowBest[i1]) {\n                        for (const auto& p2 : rowBest[i2]) {\n                            if (p1.second == p2.second) continue; // Same column, skip\n                            for (const auto& p3 : rowBest[i3]) {\n                                if (p3.second == p1.second || p3.second == p2.second) continue; // Same column, skip\n                                \n                                // Calculate sum for this combination\n                                long long currentSum = static_cast<long long>(p1.first) + p2.first + p3.first;\n                                maxSum = std::max(maxSum, currentSum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};",
    "submit_ts": "1723907431",
    "subm_id": "1359107301"
}