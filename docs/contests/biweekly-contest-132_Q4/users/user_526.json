{
    "username": "ashuthe1",
    "submission": "class Solution {\npublic:\nint n, k;\nvector<int> v;\nint func(int idx, int prev, int usedK) {\n    if(idx == n) return 0;\n    // if(dp[idx][prev+1][usedK] != -1) return dp[idx][prev+1][usedK];\n\n    int ans = 0;\n    ans = max(ans, func(idx + 1, prev, usedK));\n    if(prev != -1 && v[idx] != v[prev] && usedK < k) {\n        ans = max(ans, 1 + func(idx + 1, idx, usedK + 1));\n    }\n    if(prev == -1 || v[idx] == v[prev]) {\n        ans = max(ans, 1 + func(idx + 1, idx, usedK));\n    }\n    // return dp[idx][prev+1][usedK] = ans;\n    return ans;\n}\nint maximumLength(vector<int>& a, int k) {\n    int n = a.size(), ans = 0, maxValue = INT_MIN;\n    vector<vector<int>> dp(n, vector<int>(k + 1, 1));\n\n    for(int &e: a) maxValue = max(maxValue, e);\n    map<int, int> last_idx;\n    vector<int> dp2(k + 1);\n\n    for (int i = 0; i < n; i++) {\n        for (int j = k; j >= 0; j--) {\n            if (j >= 1) {\n                dp[i][j] = dp2[j - 1] + 1;\n            }\n            if (last_idx.find(a[i]) != last_idx.end()){\n                dp[i][j] = max(dp[i][j], dp[last_idx[a[i]]][j] + 1);\n            }\n            dp2[j] = max(dp2[j], dp[i][j]);\n            ans = max(ans, dp[i][j]);\n        }\n        last_idx[a[i]] = i;\n    }\n    return ans;\n}\n};",
    "submit_ts": 1717861645.0
}