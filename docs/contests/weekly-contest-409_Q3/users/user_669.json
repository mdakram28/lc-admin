{
    "username": "user3593Z",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        \n        UF uf = new UF(n);\n        int m = queries.length;\n        int[] result = new int[m];\n        for (int i = 0; i < m; i++) {\n            for (int j = queries[i][0] + 1; j < queries[i][1]; j++) {\n                int p = uf.find(j);\n                int p1 = uf.find(queries[i][0]);\n                if (p != p1) {\n                    uf.union(p, p1);\n                } else {\n                    j = Math.max(p, p1);\n                }\n            }\n            result[i] = uf.number - 1;\n        }\n        \n        return result;\n        \n    }\n    \n    static class UF {\n        int[] parent; \n        int number;\n        \n        public UF(int n) {\n            parent = new int[n];\n            number = n;\n            for (int i = 0; i < n; i++) {\n                parent[i] = i;\n            }\n        }\n        \n        int find(int pos) {\n            if (parent[pos] != pos) {\n                parent[pos] = find(parent[pos]);\n            }\n            return parent[pos];\n        }\n        \n        void union(int v1, int v2) {\n            int p1 = find(v1);\n            int p2 = find(v2);\n            if (p1 != p2) {\n                if (p1 < p2) {\n                    parent[p1] = p2;\n                } else {\n                    parent[p2] = p1;\n                }\n                number --;\n            }\n        }\n        \n    }\n}",
    "submit_ts": "1722741731",
    "subm_id": "1343752140"
}