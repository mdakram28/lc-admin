{
    "username": "M-Manas-s",
    "submission": "class Solution {\npublic:\n    \n    #define vt vector\n    \n    void dist(vt<vt<int>> &adj, vt<int> &d, int n,int p) {\n        \n        for ( auto x : adj[n] )\n            if ( x != p ) {\n                d[x] = d[n] + 1;\n                dist(adj,d,x,n);\n            }\n        \n    }\n    \n    int dia(vt<vt<int>> &e) {\n        \n        int n = e.size() + 1;\n        vt<vt<int>> adj(n);\n        \n        for ( auto x : e ) {\n            int u = x[0], v = x[1];\n            adj[u].push_back(v);\n            adj[v].push_back(u);\n        }\n        \n        vt<int> d(n);\n        dist(adj,d,0,-1);\n        int k = max_element(d.begin(),d.end()) - d.begin();\n        d = vt<int>(n);\n        dist(adj,d,k,-1);\n        return *max_element(d.begin(),d.end());\n        \n    }\n    \n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        \n        int d1 = dia(edges1), d2 = dia(edges2);\n        \n        int d1_ = ( d1 + 1 ) / 2;\n        int d2_ = ( d2 + 1 ) / 2;\n        \n        return max({d1_ + d2_ + 1, d1, d2});\n        \n    }\n};",
    "submit_ts": 1719717451.0
}