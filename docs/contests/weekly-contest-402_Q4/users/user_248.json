{
    "username": "korokseeds",
    "submission": "#include <bits/stdc++.h>\n\nusing namespace std;\n\n#ifdef DEBUG\n#include \"debug.h\"\n#else\n#define debug(...) 114514\n#endif\n#ifdef RUN\n#include \"LC_IO.h\"\n#endif\n\n#define fi first\n#define se second\nusing ll = long long;\nusing pii = pair<int, int>;\nusing pll = pair<ll, ll>;\nusing ai3 = array<int, 3>;\nusing al3 = array<ll, 3>;\nmt19937 rng(random_device{}());\nint rnd(int mod) { return rng() % mod; }\n\ntemplate<class T>\nstruct Fenwick {\n    int n;\n    vector<T> c;\n\npublic:\n    Fenwick() {}\n    Fenwick(int n) : n(n) {\n        c.assign(n + 1, T{});\n    }\n\n    void upd(int id, const T &x) {\n        assert(id > 0 && id <= n && \"Fenwick=>upd()\");\n        for (int i = id; i <= n; i += i & -i) c[i] = c[i] + x;\n    }\n    T qr(int id) {\n        assert(id >= 0 && id <= n && \"Fenwick=>qr()\");\n        T res = T{};\n        for (int i = id; i; i -= i & -i) res = res + c[i];\n        return res;\n    }\n\n    // \u627e\u5230\u9996\u4f4d\u7f6e pos, \u4f7f\u5f97 sum{1..pos} \u6ee1\u8db3\u6761\u4ef6\n    int find_fast(const function<bool(const T&)> &check) {\n        T pre = T{};\n        int pos = 0;\n        for (int i = __lg(n); i >= 0; i--) {\n            if (pos + (1 << i) <= n && !check(pre + c[pos + (1 << i)])) {\n                pre = pre + c[pos + (1 << i)];\n                pos += 1 << i;\n            }\n        }\n        return pos + 1;\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& a, vector<vector<int>>& qs) {\n        int n = a.size();\n        a.insert(a.begin(), 0);\n        vector<int> pre(n + 1), nxt(n + 1);\n        Fenwick<int> fw(n);\n        for (int i = 2; i <= n - 1; i++) {\n            pre[i] = a[i] > a[i - 1];\n            nxt[i] = a[i] > a[i + 1];\n            int t = pre[i] && nxt[i];\n            fw.upd(i, t);\n        }\n\n        vector<int> ans;\n        for (int qid = 0; qid < qs.size(); qid++) {\n            int op = qs[qid][0];\n            if (op == 1) {\n                int l = qs[qid][1], r = qs[qid][2];\n                l++, r++;\n                l++, r--;\n                ans.push_back(r - l + 1 >= 1 ? fw.qr(r) - fw.qr(l - 1) : 0);\n            } else {\n                int idx = qs[qid][1], val = qs[qid][2];\n                idx++;\n\n                for (int i = max(2, idx - 1); i <= min(n - 1, idx + 1); i++) {\n                    int t = pre[i] && nxt[i];\n                    fw.upd(i, -t);\n                }\n                a[idx] = val;\n                for (int i = max(2, idx - 1); i <= min(n - 1, idx + 1); i++) {\n                    pre[i] = a[i] > a[i - 1];\n                    nxt[i] = a[i] > a[i + 1];\n                    int t = pre[i] && nxt[i];\n                    fw.upd(i, t);\n                }\n\n                debug(a);\n                debug(pre);\n                debug(nxt);\n            }\n        }\n        return ans;\n    }\n};\n\n#ifdef RUN\nint main() {\n    ios_base::sync_with_stdio(false);\n    stringstream out_stream;\n\n    vector<int> nums;\n    LeetCodeIO::scan(cin, nums);\n    vector<vector<int>> queries;\n    LeetCodeIO::scan(cin, queries);\n\n    Solution *obj = new Solution();\n    auto res = obj->countOfPeaks(nums, queries);\n    LeetCodeIO::print(out_stream, res);\n    cout << \"\\noutput: \" << out_stream.rdbuf() << endl;\n\n    delete obj;\n    return 0;\n}\n#endif\n",
    "submit_ts": 1718506471.0
}