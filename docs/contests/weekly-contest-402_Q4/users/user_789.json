{
    "username": "ivanc-e",
    "submission": "from sortedcontainers import SortedList\n\nclass Solution:\n    def countOfPeaks(self, nums, queries):\n        def is_peak(i):\n            if i == 0 or i == len(nums) - 1:\n                return False\n            return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n        \n        peaks = SortedList(i for i in range(1, len(nums) - 1) if is_peak(i))\n        result = []\n\n        for query in queries:\n            if query[0] == 1:\n                # Count peaks in subarray nums[li..ri]\n                _, li, ri = query\n                li += 1\n                ri -= 1\n                if li > ri:\n                    result.append(0)\n                else:\n                    # Use binary search to find the count of elements in the range\n                    left_idx = peaks.bisect_left(li)\n                    right_idx = peaks.bisect_right(ri) - 1\n                    if left_idx <= right_idx and left_idx < len(peaks) and right_idx >= 0:\n                        result.append(right_idx - left_idx + 1)\n                    else:\n                        result.append(0)\n            elif query[0] == 2:\n                # Update nums[indexi] to vali and adjust peaks\n                _, index, val = query\n                nums[index] = val\n                \n                # We need to check index-1, index, and index+1 for potential peaks removal or addition\n                for i in [index - 1, index, index + 1]:\n                    if 1 <= i <= len(nums) - 2:\n                        if is_peak(i):\n                            if i not in peaks:\n                                peaks.add(i)\n                        else:\n                            if i in peaks:\n                                peaks.remove(i)\n                    \n        return result",
    "submit_ts": 1718507888.0
}