{
    "username": "mrpurvesh",
    "submission": "class Solution {\npublic:\n   bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<pair<pair<int, int>, int>> c(n); // Store circle centers and radii\n        vector<vector<int>> g(n + 4); // Graph adjacency list\n\n        for (int i = 0; i < n; ++i) {\n            c[i] = {{circles[i][0], circles[i][1]}, circles[i][2]};\n        }\n\n        // Connect each circle to the graph\n        for (int i = 0; i < n; ++i) {\n            if (c[i].first.first <= c[i].second) {\n                g[n].push_back(i); // Connect to left border\n                g[i].push_back(n);\n            }\n            if (X - c[i].first.first <= c[i].second) {\n                g[n + 2].push_back(i); // Connect to right border\n                g[i].push_back(n + 2);\n            }\n            if (c[i].first.second <= c[i].second) {\n                g[n + 1].push_back(i); // Connect to bottom border\n                g[i].push_back(n + 1);\n            }\n            if (Y - c[i].first.second <= c[i].second) {\n                g[n + 3].push_back(i); // Connect to top border\n                g[i].push_back(n + 3);\n            }\n\n            for (int j = i + 1; j < n; ++j) {\n                double d = sqrt(pow(c[i].first.first - c[j].first.first, 2) +\n                                pow(c[i].first.second - c[j].first.second, 2));\n                if (c[i].second + c[j].second >= d) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        // Perform BFS to check connectivity\n        return !(bfs(g, n, n + 1, n + 2, n + 4) || bfs(g, n + 3, n + 2, n + 1, n + 4));\n    }\n\nprivate:\n    bool bfs(vector<vector<int>>& g, int s, int t1, int t2, int n) {\n        queue<int> q;\n        vector<int> vis(n, 0);\n\n        q.push(s);\n        vis[s] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : g[u]) {\n                if (!vis[v]) {\n                    q.push(v);\n                    vis[v] = 1;\n                }\n            }\n        }\n\n        return vis[t1] || vis[t2];\n    }\n};",
    "submit_ts": "1722137780",
    "subm_id": "1335773515"
}