{
    "username": "namitnayan32",
    "submission": "MAX_VAL = 1_000_000_000_000\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie(target)\n        for word, cost in zip(words, costs):\n            trie.add_word(word, cost)\n        # print(f\"{target =}\")\n        ans = trie.search(0)\n        # print(trie.search.cache_info())\n        return -1 if ans == MAX_VAL else ans\n\nclass TrieNode:\n    __slots__ = (\"is_word\", \"cost\", \"next\")\n    def __init__(self):\n        self.is_word = False\n        self.cost = MAX_VAL\n        self.next = [None for _ in range(26)]\n\nclass Trie:\n    __slots__ = (\"root\", \"target\")\n    def __init__(self, target: str):\n        self.root = TrieNode()\n        self.target = target\n\n    def add_word(self, word: str, cost: int):\n        curr = self.root;\n        for ch in word:\n            pos = ord(ch) - ord(\"a\")\n            if not curr.next[pos]:\n                curr.next[pos] = TrieNode()\n            curr = curr.next[pos]\n        curr.cost = min(cost, curr.cost)\n        curr.is_word = True\n\n    @cache\n    def search(self, start: int) -> int:\n        n = len(self.target)\n        if start == n:\n            return 0\n        ans = MAX_VAL\n        curr = self.root\n        for i in range(start, n):\n            pos = ord(self.target[i]) - ord(\"a\")\n            if curr.next[pos]:\n                curr = curr.next[pos]\n                if curr.is_word and curr.cost < ans:\n                    ans = min(ans, curr.cost + self.search(i + 1))\n            else:\n                break\n        # print(f\"{start =}, {ans =}\")\n        return ans\n",
    "submit_ts": "1720322901",
    "subm_id": "1312362130"
}