{
    "username": "NAVEEN KUMAR S",
    "submission": "class Solution{\n    int n , k , m , DP[];\n    char[] s;\n    Boolean[][] dp;\n    public String largestPalindrome(int n , int k) {\n        this.n = n;\n        this.k = k;\n        m = (n - 1) / 2;\n        s = new char[n];\n        dp = new Boolean[n / 2 + 1][10];\n        DP = new int[n];\n        DP[0] = 1;\n        for(int i = 1 ; i < n ; i++){\n            DP[i] = (DP[i - 1] * 10) % k;\n        }\n        finder(0 , 0);\n        return new String(s);\n    }\n    private boolean finder(int x , int y){\n        if(x > m){\n            return y == 0;\n        }\n        if(dp[x][y] != null) return dp[x][y];\n        for(int i = 9 ; i >= 1 ; i--){\n            int l = exp(10 , x , k) * i , r = exp(10 , n - x - 1 , k) * i;\n            if(x == n / 2 && n % 2 == 1) r = 0;\n            if(finder(x + 1 , (y + l + r) % k)){\n                s[x] = s[n - x - 1] = (char) (i + '0');\n                return true;\n            }\n        }\n        return dp[x][y] = false;\n    }\n    private int exp(int x , int y , int z){\n        // if(DP[y] != null) return DP[y];\n        // int ret = 1;\n        // while(y > 0){\n        //     if(y % 2 == 1) ret *= x;\n        //     ret %= z;\n        //     x *= x;\n        //     x %= z;\n        //     y >>= 1;\n        // }\n        // return DP[y] = ret;\n        return DP[y];\n    }\n}",
    "submit_ts": "1723951139",
    "subm_id": "1359764206"
}