{
    "username": "zronghui",
    "submission": "from typing import List\nfrom typing import List\nfrom collections import defaultdict\n\nfrom operator import add, xor\n\n\nclass SparseTable:\n    def __init__(self, data: list, func=min):\n\n        self.func = func\n        self.st = st = [list(data)]\n        i, N = 1, len(st[0])\n        while 2 * i <= N + 1:\n            qz = st[-1]\n            st.append([func(qz[j], qz[j + i]) for j in range(N - 2 * i + 1)])\n            i <<= 1\n\n    def query(self, begin: int, end: int):\n        lg = (end - begin + 1).bit_length() - 1\n        return self.func(self.st[lg][begin], self.st[lg][end - (1 << lg) + 1])\n\n    __call__ = query\n\n\nclass AndChange:\n    def __init__(self, a: List[int], N=31):\n\n        self.N = N\n        self.n = n = len(a)\n\n        self.nxt = nxt = [[-1] * n for _ in range(N)]\n        for j in reversed(range(n)):\n            for i in range(N):\n\n                if not a[j] & (1 << i):\n\n                    for k in reversed(range(j)):\n                        if a[k] & (1 << i):\n                            nxt[i][k] = j\n                        else:\n                            break\n\n    def __getitem__(self, i: int) -> int:\n\n        n, N = self.n, self.N\n        nxt = self.nxt\n        js = set()\n        for t in range(N):\n            if nxt[t][i] != -1:\n                js.add(nxt[t][i])\n        js = sorted(list(js)) + [n]\n        return js\n\n\ndef pairwise(iterable):\n    n = len(iterable)\n    for i in range(n - 1):\n        yield iterable[i], iterable[i + 1]\n\n\nclass Solution:\n    def countSubarrays(self, a: List[int], k: int) -> int:\n        n = len(a)\n        ac = AndChange(a)\n        st = SparseTable(a + [0], func=lambda x, y: x & y)\n        res = 0\n        for i in range(n):\n            pre = a[i]\n            for pj, j in pairwise([i] + ac[i]):\n\n                if pre == k:\n                    res += j - pj\n                pre = st.query(i, j)\n        return res\n",
    "submit_ts": "1720277563",
    "subm_id": "544557450"
}