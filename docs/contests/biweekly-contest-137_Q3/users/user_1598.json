{
    "username": "UTKARSH AGARWAL",
    "submission": "#include <vector>\n#include <algorithm>\n#include <iostream>\n#include <climits>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        long long maxSum = LLONG_MIN;\n\n        // Step 1: Store maximum values for each row and column\n        vector<vector<pair<int, int>>> rowMax(m);\n        vector<vector<pair<int, int>>> colMax(n);\n\n        for (int i = 0; i < m; ++i) {\n            for (int j = 0; j < n; ++j) {\n                rowMax[i].emplace_back(board[i][j], j);\n                colMax[j].emplace_back(board[i][j], i);\n            }\n        }\n\n        // Step 2: Sort and pick top 3 values for each row and column\n        for (auto& vec : rowMax) {\n            sort(vec.rbegin(), vec.rend());\n        }\n        for (auto& vec : colMax) {\n            sort(vec.rbegin(), vec.rend());\n        }\n\n        // Step 3: Try every combination of 3 rows, ensuring different columns\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    // Check valid combinations of columns for these rows\n                    for (int i1 = 0; i1 < min(3, (int)rowMax[r1].size()); ++i1) {\n                        for (int i2 = 0; i2 < min(3, (int)rowMax[r2].size()); ++i2) {\n                            if (rowMax[r1][i1].second == rowMax[r2][i2].second) continue;  // Same column\n                            for (int i3 = 0; i3 < min(3, (int)rowMax[r3].size()); ++i3) {\n                                if (rowMax[r1][i1].second == rowMax[r3][i3].second ||\n                                    rowMax[r2][i2].second == rowMax[r3][i3].second) continue;  // Same column\n                                long long sum = static_cast<long long>(rowMax[r1][i1].first) + \n                                                static_cast<long long>(rowMax[r2][i2].first) + \n                                                static_cast<long long>(rowMax[r3][i3].first);\n                                maxSum = max(maxSum, sum);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return maxSum;\n    }\n};\n",
    "submit_ts": "1723905955",
    "subm_id": "1359027789"
}