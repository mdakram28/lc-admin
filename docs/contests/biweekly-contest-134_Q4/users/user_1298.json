{
    "username": "Prabhat_007",
    "submission": "class SegmentTree {\n    vector<int> tree;\n    int n;\n\npublic:\n    SegmentTree(int n, vector<int> &v) {\n        this->n = n;\n        tree.resize(4 * n);\n        build(v, 0, n - 1, 0);\n    }\n\n    void build(vector<int> &v, int start, int end, int node) {\n        if (start == end) {\n            tree[node] = v[start];\n            return;\n        }\n        int mid = (start + end) / 2;\n        build(v, start, mid, 2 * node + 1);\n        build(v, mid + 1, end, 2 * node + 2);\n        tree[node] = merge(tree[2 * node + 1], tree[2 * node + 2]);\n    }\n\n    int merge(int node1, int node2) {\n        return node1 & node2;\n    }\n\n    int query(int left, int right) {\n        return Query(left, right, 0, n - 1, 0);\n    }\n\n    int Query(int left, int right, int start, int end, int node) {\n        if (left <= start && right >= end) {\n            return tree[node];\n        }\n        if (left > end || right < start) {\n            return INT_MAX; \n        }\n        int mid = (start + end) / 2;\n        int ans1 = Query(left, right, start, mid, 2 * node + 1);\n        int ans2 = Query(left, right, mid + 1, end, 2 * node + 2);\n        return merge(ans1, ans2);\n    }\n\n   \n};\nclass Solution {\npublic:\n    long long countSubarrays(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree st(n, nums);\n        long long ans = 0;\n        \n        for (int i = 0; i < n; ++i) {\n            int low = i, high = n - 1;\n            int lower_bound = -1, upper_bound = -1;\n\n          \n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (st.query(i, mid) == k) {\n                    lower_bound = mid;\n                    high = mid - 1;\n                } else if (st.query(i, mid) > k) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n\n            if (lower_bound == -1) {\n                continue;\n            }\n\n            low = lower_bound;\n            high = n - 1;\n\n        \n            while (low <= high) {\n                int mid = (low + high) / 2;\n                if (st.query(i, mid) == k) {\n                    upper_bound = mid;\n                    low = mid + 1;\n                } else if (st.query(i, mid) > k) {\n                    low = mid + 1;\n                } else {\n                    high = mid - 1;\n                }\n            }\n\n            if (upper_bound != -1) {\n                ans += (upper_bound - lower_bound + 1);\n            }\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1720280473",
    "subm_id": "1311790703"
}