{
    "username": "YarosHarm",
    "submission": "class Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        int[] diff = new int[n];\n\n        for(int i = 0; i < n; i++) {\n            diff[i] = target[i] - nums[i];\n        }\n\n        long res = 0;\n        int p = 0;\n        while(p < n) {\n            if(diff[p] == 0) {\n                p++;\n                continue;\n            }\n            int e = p + 1;\n            Queue<int[]> pq = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));\n            pq.add(new int[]{ Math.abs(diff[p]), p });\n            while(e < n && getSign(diff, p) == getSign(diff, e)) {\n                pq.add(new int[]{ Math.abs(diff[e]), e });\n                e++;\n            }\n            TreeMap<Integer, Integer> tmap = new TreeMap<>();\n            tmap.put(p - 1, 0);\n            tmap.put(e, 0);\n            while(!pq.isEmpty()) {\n                int[] data = pq.poll();\n                int num = data[0];\n                int pos = data[1];\n                int left = tmap.lowerEntry(pos).getValue();\n                int right = tmap.higherEntry(pos).getValue();\n                int md = Math.max(left, right);\n                res += num - md;\n                tmap.put(pos, num);\n            }\n            p = e;\n        }\n\n        return res;\n    }\n\n    boolean getSign(int[] diff, int p) {\n        return diff[p] > 0 ? true : false;\n    }\n}\n\n/**\n9,5,5,1,7,9,8,7,6,5\n9,2,6,10,4,8,3,4,2,3\n\n0,+3,-1,-9,+3,+1,+5,+3,+4,+2\n\n+2,0,+4,+2,+3,+1\n+4,+2,+3,+1\n+2, 0, +1, 0\n\n3 + 9 + 1 + (2) + 2 + 3\n */",
    "submit_ts": "1721531883",
    "subm_id": "1327972306"
}