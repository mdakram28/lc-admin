{
    "username": "Qiye",
    "submission": "int __FAST_IO__ = []() { std::ios::sync_with_stdio(0); std::cin.tie(0); std::cout.tie(0); return 0; }();\n\nlong long f[100'001]{0}, g[100'001];\nclass Solution {\npublic:\n    vector<long long> countKConstraintSubstrings(string s, int k, vector<vector<int>>& queries) {\n        int n = s.length();\n        memset(g, -1, sizeof g);\n        for (int i = 0, r = 0, one = 0, zero = 0; i < s.length(); ++i) {\n            for (; r < s.length() && (one <= k || zero <= k); r++) {\n                if (s[r] == '0') zero++;\n                else one++;\n\n                if (one <= k || zero <= k) g[r] = i;\n            }\n\n            int len = (one <= k || zero <= k) ? (r - i) : (r - i - 1);\n            f[i + 1] = f[i] + len;\n\n            if (s[i] == '0') zero --;\n            else one --;\n\n            // cout << r << endl;\n            if (g[r - 1] == -1 && (one <= k || zero <= k)) g[r - 1] = i + 1;\n        }\n\n        // for (int i = 0; i < n; ++i) cout << g[i] << \" \"; cout << endl;\n\n        vector<long long> res;\n        for (auto& q : queries) {\n            int ls = g[q[1]];\n            if (ls >= q[0]) res.push_back( (q[1] - ls + 1LL) * (q[1] - ls + 2LL) / 2 + f[ls] - f[q[0]]);\n            else res.push_back((q[1] - q[0] + 1LL) * (q[1] - q[0] + 2LL) / 2);\n        }\n        return res;\n    }\n};\n",
    "submit_ts": "1723951780",
    "subm_id": "556407604"
}