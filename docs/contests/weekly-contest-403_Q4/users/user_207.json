{
    "username": "serene-torvalds38a",
    "submission": "class Solution {\nprivate:\n    array<int, 4> Udlr(int x1, int x2, int y1, int y2,\n                       vector<vector<int>>& grid) {\n        int u = x2;\n        int d = x1;\n        int l = y2;\n        int r = y1;\n        for (int i = x1; i <= x2; i++) {\n            for (int j = y1; j <= y2; j++) {\n                if (grid[i][j]) {\n                    u = min(u, i);\n                    d = max(d, i);\n                    l = min(l, j);\n                    r = max(r, j);\n                }\n            }\n        }\n        return {u, d, l, r};\n    }\n    int MaxArea(int x1, int x2, int y1, int y2, vector<vector<int>>& grid) {\n        auto [u, d, l, r] = Udlr(x1, x2, y1, y2, grid);\n        if (u > d || l > r) {\n            return 1;\n        }\n        return (d - u + 1) * (r - l + 1);\n    }\n    int Count(int x1, int x2, int y1, int y2, vector<vector<int>>& pre) {\n        return pre[x2 + 1][y2 + 1] - pre[x1][y2 + 1] - pre[x2 + 1][y1] +\n               pre[x1][y1];\n    }\n\npublic:\n    int minimumSum(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        vector<vector<int>> pre(m + 1, vector<int>(n + 1));\n        for (int i = 1; i <= m; i++) {\n            for (int j = 1; j <= n; j++) {\n                pre[i][j] = grid[i - 1][j - 1] + pre[i - 1][j] + pre[i][j - 1] -\n                            pre[i - 1][j - 1];\n            }\n        }\n        int total = Count(0, m - 1, 0, n - 1, pre);\n        auto [U, D, L, R] = Udlr(0, m - 1, 0, n - 1, grid);\n        int res = m * n;\n        for (int i = U + 1; i <= D; i++) {\n            for (int j = L + 1; j <= R; j++) {\n                res =\n                    min(res, MaxArea(U, i - 1, L, R, grid) + MaxArea(i, D, L, j - 1, grid) +\n                                 MaxArea(i, D, j, R, grid));\n                res =\n                    min(res, MaxArea(i, D, L, R, grid) + MaxArea(U, i - 1, L, j - 1, grid) +\n                                 MaxArea(U, i - 1, j, R, grid));\n                res =\n                    min(res, MaxArea(U, D, L, j - 1, grid) + MaxArea(U, i - 1, j, R, grid) +\n                                 MaxArea(i, D, j, R, grid));\n                res =\n                    min(res, MaxArea(U, D, j, R, grid) + MaxArea(U, i - 1, L, j - 1, grid) +\n                                 MaxArea(i, D, L, j - 1, grid));\n            }\n        }\n        for (int i = U + 1; i < D; i++) {\n            for (int j = i + 1; j <= D; j++) {\n                res = min(res, MaxArea(U, i - 1, L, R, grid)\n                + MaxArea(i, j - 1, L, R, grid)\n                + MaxArea(j, D, L, R, grid));\n            }\n        }\n        for (int i = L + 1; i < R; i++) {\n            for (int j = i + 1; j <= R; j++) {\n                res = min(res, MaxArea(U, D, L, i - 1, grid)\n                + MaxArea(U, D, i, j - 1, grid)\n                + MaxArea(U, D, j, R, grid));\n            }\n        }\n        // for (int i = U; i <= D; i++) {\n        //     for (int j = L; j <= R; j++) {\n        //         int lu = MaxArea(U, i - 1, L, j - 1, grid);\n        //         int ru = MaxArea(U, i - 1, j, R, grid);\n        //         int ld = MaxArea(i, D, L, j - 1, grid);\n        //         int rd = MaxArea(i, D, j, R, grid);\n        //         if (Count(i, D, j, R, pre) == 0) {\n        //             res = min(res, lu + ru + ld);\n        //         }\n        //         if (Count(i, D, L, j - 1, pre) == 0) {\n        //             res = min(res, lu + ru + rd);\n        //         }\n        //         if (Count(U, i - 1, j, R, pre) == 0) {\n        //             res = min(res, lu + rd + ld);\n        //         }\n        //         if (Count(U, i - 1, L, j - 1, pre) == 0) {\n        //             res = min(res, ld + ru + rd);\n        //         }\n        //     }\n        // }\n        // // cout << \"OK\" << endl;\n        // for (int x1 = U + 1; x1 < D; x1++) {\n        //     for (int x2 = x1 + 1; x2 <= D; x2++) {\n        //         for (int y1 = L + 1; y1 < R; y1++) {\n        //             for (int y2 = y1 + 1; y2 <= R; y2++) {\n        //                 if (Count(U, x1 - 1, L, y1 - 1, pre) +\n        //                         Count(x1, x2 - 1, y1, y2 - 1, pre) +\n        //                         Count(x2, D, y2, R, pre) ==\n        //                     total) {\n        //                     res = min(\n        //                         res, MaxArea(U, x1 - 1, L, y1 - 1, grid) +\n        //                                  MaxArea(x1, x2 - 1, y1, y2 - 1,\n        //                                  grid) + MaxArea(x2, D, y2, R,\n        //                                  grid));\n        //                 }\n        //                 if (Count(U, x1 - 1, y2, R, pre) +\n        //                         Count(x1, x2 - 1, y1, y2 - 1, pre) +\n        //                         Count(x2, D, L, y1 - 1, pre) ==\n        //                     total) {\n        //                     res = min(\n        //                         res, MaxArea(U, x1 - 1, y2, R, grid) +\n        //                                  MaxArea(x1, x2 - 1, y1, y2 - 1,\n        //                                  grid) + MaxArea(x2, D, L, y1 - 1,\n        //                                  grid));\n        //                 }\n        //             }\n        //         }\n        //     }\n        // }\n        return res;\n    }\n};",
    "submit_ts": "1719113561",
    "subm_id": "541397995"
}