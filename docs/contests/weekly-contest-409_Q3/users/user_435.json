{
    "username": "catnipan",
    "submission": "class Solution {\n    int get(const map<int, int>& M, int x) {\n        // first the largest key in M that <= x\n        if (M.find(x) != M.end()) return x;\n        auto it = M.lower_bound(x);\n        // it > x\n        if (it != M.begin()) {\n            --it;\n            return it->first;\n        }\n        return -1;\n    }\n    bool ignore(map<int,int>& M, int l, int r) {\n        int ll = get(M, l);\n        if (ll == -1) return false;\n        int rr = M[ll];\n        if (r <= rr) {\n            return true;\n        }\n        return false;\n    }\npublic:\n    vector<int> shortestDistanceAfterQueries(int n,\n                                             vector<vector<int>>& queries)\n    {\n        map<int, int> M;\n        vector<int> ans;\n        int dist = n - 1;\n        for (const auto& query: queries) {\n            int l = query[0], r = query[1];\n            // is [l, r] inside another one?\n            if (ignore(M, l, r)) {\n                ans.push_back(dist);\n                continue;\n            }\n\n            while (true) {\n                auto it = M.lower_bound(l);\n                if (it == M.end()) break;\n                int ll = it->first;\n                int rr = it->second;\n                // [ll, rr]\n                if (rr <= r) {\n                    // remove this one\n                    M.erase(it);\n                    int save = rr - ll - 1;\n                    dist += save;\n                } else if (ll >= r) {\n                    break;\n                }\n            }\n            int save = r - l - 1;\n            dist -= save;\n            M[l] = r;\n\n            ans.push_back(dist);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722741741",
    "subm_id": "552340158"
}