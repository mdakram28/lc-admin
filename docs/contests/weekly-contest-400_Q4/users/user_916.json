{
    "username": "HEELO123",
    "submission": "#include <vector>\n#include <cmath>\n#include <climits>\nusing namespace std;\n\nclass SegmentTree {\npublic:\n    SegmentTree(const vector<int>& nums) {\n        n = nums.size();\n        tree.resize(4 * n);\n        build(nums, 0, 0, n - 1);\n    }\n    \n    int query(int L, int R) {\n        return query(0, 0, n - 1, L, R);\n    }\n    \nprivate:\n    vector<int> tree;\n    int n;\n    \n    void build(const vector<int>& nums, int node, int start, int end) {\n        if (start == end) {\n            tree[node] = nums[start];\n        } else {\n            int mid = (start + end) / 2;\n            build(nums, 2 * node + 1, start, mid);\n            build(nums, 2 * node + 2, mid + 1, end);\n            tree[node] = tree[2 * node + 1] & tree[2 * node + 2];\n        }\n    }\n    \n    int query(int node, int start, int end, int L, int R) {\n        if (R < start || end < L) {\n            return INT_MAX;\n        }\n        if (L <= start && end <= R) {\n            return tree[node];\n        }\n        int mid = (start + end) / 2;\n        int leftResult = query(2 * node + 1, start, mid, L, R);\n        int rightResult = query(2 * node + 2, mid + 1, end, L, R);\n        return leftResult & rightResult;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int n = nums.size();\n        SegmentTree segTree(nums);\n        int minDiff = INT_MAX;\n        \n        for (int i = 0; i < n; ++i) {\n            int low = i, high = n - 1;\n            while (low <= high) {\n                int mid = low + (high - low) / 2;\n                int subarrayAnd = segTree.query(i, mid);\n                int currentDiff = abs(k - subarrayAnd);\n                minDiff = min(minDiff, currentDiff);\n                \n                // Adjust the binary search range\n                if (subarrayAnd < k) {\n                    high = mid - 1;\n                } else {\n                    low = mid + 1;\n                }\n                \n                // If we find an exact match, return immediately\n                if (minDiff == 0) {\n                    return 0;\n                }\n            }\n        }\n        \n        return minDiff;\n    }\n};\n",
    "submit_ts": 1717299695.0
}