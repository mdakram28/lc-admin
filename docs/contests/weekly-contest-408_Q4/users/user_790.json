{
    "username": "swarajsingh606",
    "submission": "#include <vector>\n#include <queue>\n#include <cmath>\n#include <utility>\nusing namespace std;\n\nclass Solution {\npublic:\n    bool bfs(vector<vector<int>>& graph, int start, int nodes, int target1, int target2) {\n        vector<int> visited(nodes, 0);\n        queue<int> q;\n\n        q.push(start);\n        visited[start] = 1;\n\n        while (!q.empty()) {\n            int u = q.front();\n            q.pop();\n            for (int v : graph[u]) {\n                if (!visited[v]) {\n                    visited[v] = 1;\n                    q.push(v);\n                }\n            }\n        }\n        return visited[target1] || visited[target2];\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> g(n + 4);\n\n        // Adding circles to a vector of pairs\n        vector<pair<int, pair<int, int>>> v(n);\n        for (int i = 0; i < n; ++i) {\n            v[i] = {circles[i][0], {circles[i][1], circles[i][2]}};\n        }\n\n        // Construct the graph\n        for (int i = 0; i < n; ++i) {\n            int x = v[i].first;\n            int y = v[i].second.first;\n            int r = v[i].second.second;\n\n            // Connecting circles to the border nodes\n            if (Y - y <= r) {\n                g[i].push_back(n + 3); // Top border\n                g[n + 3].push_back(i);\n            }\n            if (x <= r) {\n                g[i].push_back(n); // Left border\n                g[n].push_back(i);\n            }\n            if (y <= r) {\n                g[i].push_back(n + 1); // Bottom border\n                g[n + 1].push_back(i);\n            }\n            if (X - x <= r) {\n                g[i].push_back(n + 2); // Right border\n                g[n + 2].push_back(i);\n            }\n\n            // Connecting circles to each other\n            for (int j = i + 1; j < n; ++j) {\n                int x2 = v[j].first;\n                int y2 = v[j].second.first;\n                int r2 = v[j].second.second;\n\n                double distance = sqrt(pow(x - x2, 2) + pow(y - y2, 2));\n                if (r + r2 >= distance) {\n                    g[i].push_back(j);\n                    g[j].push_back(i);\n                }\n            }\n        }\n\n        // Checking if there's a path between the borders\n        bool is_blocked = false;\n        is_blocked = is_blocked || bfs(g, n + 3, n + 4, n + 2, n + 1);\n        is_blocked = is_blocked || bfs(g, n, n + 4, n + 1, n + 2);\n\n        return !is_blocked;\n    }\n};\n",
    "submit_ts": "1722138933",
    "subm_id": "1335803482"
}