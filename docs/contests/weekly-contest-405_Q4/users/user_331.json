{
    "username": "ItzWho",
    "submission": "\nclass TrieNode {\npublic:\n    TrieNode* children[26];\n    bool isWord;\n    int cost;\n\n    TrieNode() {\n        for (int i = 0; i < 26; ++i) {\n            children[i] = nullptr;\n        }\n        isWord = false;\n        cost = INT_MAX;\n    }\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!current->children[index]) {\n                current->children[index] = new TrieNode();\n            }\n            current = current->children[index];\n        }\n        current->isWord = true;\n        current->cost = min(current->cost, cost);\n    }\n\n    bool search(const string& word, int& cost) {\n        TrieNode* current = root;\n        for (char c : word) {\n            int index = c - 'a';\n            if (!current->children[index]) {\n                return false;\n            }\n            current = current->children[index];\n        }\n        if (current->isWord) {\n            cost = current->cost;\n            return true;\n        }\n        return false;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); \n        dp[0] = 0; \n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; \n\n            TrieNode* current = trie.root;\n            for (int j = i; j < n; ++j) {\n                int index = target[j] - 'a';\n                if (!current->children[index]) break;\n                current = current->children[index];\n                if (current->isWord) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + current->cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321228",
    "subm_id": "1312317090"
}