{
    "username": "Suwarna Shukla",
    "submission": "import numpy as np\nfrom scipy.optimize import linear_sum_assignment\nfrom typing import List\nfrom heapq import nlargest\n\nclass Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        m, n = len(board), len(board[0])\n        \n        # Handle small matrices\n        if m < 3 or n < 3:\n            return 0\n        \n        # Convert board to a numpy array for efficient operations\n        board_np = np.array(board)\n        \n        # Function to get the top k rows based on the sum of their maximum values\n        def get_top_rows(board_np, k):\n            row_sums = np.max(board_np, axis=1)\n            top_rows_indices = np.argsort(row_sums)[-k:]\n            return top_rows_indices\n\n        # Get top 30 rows based on their maximum values\n        top_row_indices = get_top_rows(board_np, 30)\n        \n        # Initialize max_sum\n        max_sum = float('-inf')\n        \n        # Iterate over all combinations of 3 rows from the top row indices\n        for row1, row2, row3 in combinations(top_row_indices, 3):\n            # Create the cost matrix for the selected rows\n            cost_matrix = np.array([\n                board_np[row1],\n                board_np[row2],\n                board_np[row3]\n            ], dtype=float)\n\n            # Solve the assignment problem using the Hungarian algorithm\n            row_ind, col_ind = linear_sum_assignment(-cost_matrix)\n            \n            # Calculate the total sum for this assignment\n            current_sum = cost_matrix[row_ind, col_ind].sum()\n            \n            # Update max_sum if necessary\n            max_sum = max(max_sum, current_sum)\n        \n        return int(max_sum)\n",
    "submit_ts": "1723907986",
    "subm_id": "1359133251"
}