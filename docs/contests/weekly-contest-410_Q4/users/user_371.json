{
    "username": "ChristopherJiang",
    "submission": "class Solution {\n    static final int MOD = 1000000007;\n    public int countOfPairs(int[] nums) {\n        int n = nums.length;\n        int[][] dp = new int[n][1001];\n        int[][] prefixSum = new int[n][1002]; // prefixSum[i][j] = sum of dp[i][0] to dp[i][j-1]\n\n        // Initialize dp and prefixSum for the first element\n        for (int i = 0; i <= nums[0]; i++) {\n            dp[0][i] = 1;\n            prefixSum[0][i + 1] = (prefixSum[0][i] + dp[0][i]) % MOD;\n        }\n\n        // Fill dp table using prefix sums\n        for (int i = 1; i < n; i++) {\n            for (int j = 0; j <= nums[i]; j++) {\n                int arr2Value = nums[i] - j;\n                if (arr2Value <= nums[i - 1]) {\n                    int validIndex = Math.min(j + 1, nums[i - 1] - arr2Value + 1);\n                    dp[i][j] = (prefixSum[i - 1][validIndex]) % MOD;\n                }\n            }\n\n            // Update prefix sum for the current row\n            for (int j = 0; j <= 1000; j++) {\n                prefixSum[i][j + 1] = (prefixSum[i][j] + dp[i][j]) % MOD;\n            }\n        }\n\n        // Sum up all valid pairs for the last element\n        int result = 0;\n        for (int i = 0; i <= nums[n - 1]; i++) {\n            result = (result + dp[n - 1][i]) % MOD;\n        }\n\n        return result;\n    }\n}",
    "submit_ts": "1723345996",
    "subm_id": "1351567871"
}