{
    "username": "ritikyadav1819",
    "submission": "\n\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& h, vector<int>& v) {\n          sort(h.begin(), h.end(), greater<int>());\n        sort(v.begin(), v.end(), greater<int>());\n\n      long long res = 0;\n        int hori = 1;  // Initial number of horizontal pieces\n        int vert = 1;  // Initial number of vertical pieces\n        int i = 0, j = 0;\n\n        while (i < h.size() && j < v.size()) {\n            if (h[i] > v[j]) {\n                res += h[i] * vert;  // Cost for horizontal cut times current vertical pieces\n                hori++;  // Increase horizontal pieces\n                i++;\n            } else {\n                res += v[j] * hori;  // Cost for vertical cut times current horizontal pieces\n                vert++;  // Increase vertical pieces\n                j++;\n            }\n        }\n\n        // Add remaining horizontal cuts\n        while (i < h.size()) {\n            res += h[i] * vert;\n            i++;\n        }\n\n        // Add remaining vertical cuts\n        while (j < v.size()) {\n            res += v[j] * hori;\n            j++;\n        }\n\n        return res;\n    }\n};",
    "submit_ts": "1720925918",
    "subm_id": "1320270362"
}