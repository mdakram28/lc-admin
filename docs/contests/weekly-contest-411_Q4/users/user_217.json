{
    "username": "g129512",
    "submission": "import heapq\nfrom typing import Counter, List\n\n\nclass FenwickTree:\n    # \u53ef\u7528\u4e0b\u6807\u4e3a [0,maxN]\n    def __init__(self, maxN) -> None:\n        self.f = [0] * (maxN + 2)\n        pass\n    \n    # \u4e0b\u6807i\u589e\u52a0v\uff0c\u4e0b\u6807\u4ece0\u5f00\u59cb\n    def add(self, i, v):\n        i+=1\n        while i<len(self.f):\n            self.f[i]+=v\n            i+=i&-i\n    \n    # \u67e5\u8be2\u95ed\u533a\u95f4[0,i]\u7684\u548c\n    def query(self,i):\n        i+=1\n        res=0\n        while i>0:\n            res+=self.f[i]\n            i-=i&-i\n        return res\n\n    # \u67e5\u8be2\u95ed\u533a\u95f4[l,r]\u7684\u548c\n    def queryRange(self,l, r):\n        if r<l:return 0\n        return self.query(r)-self.query(l-1)\n    \nclass Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        n=len(s)\n        ct=Counter()\n        j=0\n        left=[]\n        for i in range(n):\n            ct[s[i]]+=1\n            while j<n and (ct['0']>k and ct['1']>k):\n                ct[s[j]]-=1\n                j+=1\n            heapq.heappush(left, (-j,i))\n        \n        q=len(queries)\n        for i in range(q):\n            queries[i].append(i)\n        res=[0]*len(queries)\n        sumtree=FenwickTree(n)\n        cnttree=FenwickTree(n)\n        for l,r,qi in sorted(queries, key=lambda x:-x[0]):\n            while left!=[] and -left[0][0]>=l:\n                L,R=heapq.heappop(left)\n                L=-L\n                sumtree.add(R,L)\n                cnttree.add(R,1)\n            rlen = (r-l+1)\n            s = sumtree.queryRange(l,r) + (rlen - cnttree.queryRange(l,r)) * l\n            res[qi] = (l + r) * rlen // 2 - s + rlen\n        return res",
    "submit_ts": "1723951198",
    "subm_id": "1359765668"
}