{
    "username": "jiu-ren-36",
    "submission": "class Solution {\npublic:\n    // const int N = 1e5 + 10;\n    int tree[400040];\n    int A[400040];\n    void build(int cur, int l, int r)\n    {\n        if(l == r)\n        {\n            tree[cur] = A[l];\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        build(cur * 2, l, mid);\n        build(cur*2 + 1, mid + 1, r);\n        tree[cur] = tree[cur * 2] + tree[cur * 2 + 1];\n    }\n\n    int query(int cur, int l, int r, int ql, int qr)\n    {\n        if(ql <= l && qr >= r)\n        {\n            return tree[cur];\n        }\n        int ans = 0;\n        int mid = (l + r) / 2;\n        if(mid >= ql)\n        {\n            ans += query(cur * 2, l, mid, ql, qr);\n        }\n        if(mid < qr)\n        {\n            ans += query(cur * 2 + 1, mid + 1, r, ql, qr);\n        }\n        return ans;\n    }\n\n    void update(int cur, int l, int r, int ul, int ur, int val)\n    {\n        if(ul <= l && ur >= r)\n        {\n            tree[cur] = val;\n            return;\n        }\n        int mid = l + (r - l) / 2;\n        if(ul <= mid) update(cur * 2, l, mid, ul, ur, val);\n        if(ur > mid) update(cur * 2 + 1, mid + 1, r, ul, ur, val);\n        tree[cur] = tree[cur * 2] + tree[cur * 2 + 1];\n    }\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int cnt = 0;\n        int n = nums.size();\n        for(int i = 1; i < nums.size() - 1; i++) {\n            if(nums[i] > nums[i - 1] && nums[i] > nums[i + 1]) A[i] = 1;\n            else A[i] = 0;\n            cnt++;\n        }\n        build(1, 0, n);\n        vector<int> res;\n        for(auto i: queries) {\n            if(i[0] == 1) {\n                int l = i[1], r = i[2];\n                if(l + 1 >= r) {\n                    res.push_back(0);\n                    continue;\n                }\n                int ret = query(1, 0, n, l + 1, r - 1);\n                // cout << ret << ' ';\n                res.push_back(ret);\n            }\n            else {\n                int id = i[1], val = i[2];\n                nums[id] = val;\n                if(id - 1 > 0 && id - 1 < n - 1) {\n                    if(nums[id - 1] > nums[id - 2] && nums[id - 1] > nums[id]) update(1, 0, n, id - 1, id - 1, 1);\n                    else update(1, 0, n, id - 1, id - 1, 0);\n                }\n                if(id > 0 && id < n - 1) {\n                    if(nums[id] > nums[id - 1] && nums[id] > nums[id + 1]) update(1, 0, n, id, id, 1);\n                    else update(1, 0, n, id, id, 0);\n                }\n                if(id + 1 < n - 1 && id + 1 > 0) {\n                    if(nums[id + 1] > nums[id + 2] && nums[id + 1] > nums[id]) update(1, 0, n, id + 1, id + 1, 1);\n                    else update(1, 0, n, id + 1, id + 1, 0);\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1718506920",
    "subm_id": "539778112"
}