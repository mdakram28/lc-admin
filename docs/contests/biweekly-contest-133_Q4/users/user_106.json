{
    "username": "min_min_",
    "submission": "class Solution {\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        const int MOD = 1000000007;\n        \n        // Sort requirements by endi\n        sort(requirements.begin(), requirements.end());\n        \n        // DP table\n        vector<vector<int>> dp(n + 1, vector<int>(n * (n - 1) / 2 + 1, 0));\n        dp[0][0] = 1;\n        \n        for (int len = 1; len <= n; ++len) {\n            vector<int> cumulative(len * (len - 1) / 2 + 1, 0);\n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                cumulative[inv] = (dp[len - 1][inv] + (inv > 0 ? cumulative[inv - 1] : 0)) % MOD;\n            }\n            \n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                dp[len][inv] = cumulative[inv];\n                if (inv >= len) {\n                    dp[len][inv] = (dp[len][inv] - cumulative[inv - len] + MOD) % MOD;\n                }\n            }\n        }\n\n        // DP for counting valid permutations with the given requirements\n        vector<vector<int>> dp_valid(n + 1, vector<int>(n * (n - 1) / 2 + 1, 0));\n        dp_valid[0][0] = 1;\n\n        int req_idx = 0;\n        for (int len = 1; len <= n; ++len) {\n            vector<int> cumulative(len * (len - 1) / 2 + 1, 0);\n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                cumulative[inv] = (dp_valid[len - 1][inv] + (inv > 0 ? cumulative[inv - 1] : 0)) % MOD;\n            }\n            \n            for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                dp_valid[len][inv] = cumulative[inv];\n                if (inv >= len) {\n                    dp_valid[len][inv] = (dp_valid[len][inv] - cumulative[inv - len] + MOD) % MOD;\n                }\n            }\n\n            // Apply requirements\n            if (req_idx < requirements.size() && requirements[req_idx][0] == len - 1) {\n                for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n                    if (inv != requirements[req_idx][1]) {\n                        dp_valid[len][inv] = 0;\n                    }\n                }\n                req_idx++;\n            }\n        }\n\n        // The answer is the sum of dp_valid[n][inv] for all inv\n        int result = 0;\n        for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n            result = (result + dp_valid[n][inv]) % MOD;\n        }\n\n        return result;\n    }\n};",
    "submit_ts": 1719068081.0
}