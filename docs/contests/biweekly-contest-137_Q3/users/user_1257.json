{
    "username": "Ayush Goyal",
    "submission": "class Solution {\npublic:\n    vector<pair<long long, int>> getTop3ElementsInRow(const vector<int>& row) {\n        vector<pair<long long, int>> colValues;\n        for (int j = 0; j < row.size(); ++j) {\n            colValues.emplace_back(row[j], j);\n        }\n        sort(colValues.rbegin(), colValues.rend()); \n        return vector<pair<long long, int>>(colValues.begin(), colValues.begin() + min(3, (int)colValues.size()));\n    }\n\n    void fillBestValuesAndColumns(int m, const vector<vector<int>>& board, vector<vector<long long>>& bestValues, vector<vector<int>>& bestColumns) {\n        for (int i = 0; i < m; ++i) {\n            vector<pair<long long, int>> top3 = getTop3ElementsInRow(board[i]);\n            for (int k = 0; k < top3.size(); ++k) {\n                bestValues[i][k] = top3[k].first;\n                bestColumns[i][k] = top3[k].second;\n            }\n        }\n    }\n\n    long long calculateSum(int r1, int r2, int r3, const vector<vector<long long>>& bestValues, const vector<vector<int>>& bestColumns) {\n        long long maxSum = LLONG_MIN;\n        for (int i = 0; i < 3; ++i) {\n            for (int j = 0; j < 3; ++j) {\n                if (bestColumns[r2][j] == bestColumns[r1][i]) continue;\n                for (int k = 0; k < 3; ++k) {\n                    if (bestColumns[r3][k] == bestColumns[r1][i] || bestColumns[r3][k] == bestColumns[r2][j]) continue;\n                    long long currentSum = bestValues[r1][i] + bestValues[r2][j] + bestValues[r3][k];\n                    maxSum = max(maxSum, currentSum);\n                }\n            }\n        }\n        return maxSum;\n    }\n\n    long long findMaximumValueSum(int m, const vector<vector<long long>>& bestValues, const vector<vector<int>>& bestColumns) {\n        long long maxSum = LLONG_MIN;\n        for (int r1 = 0; r1 < m; ++r1) {\n            for (int r2 = r1 + 1; r2 < m; ++r2) {\n                for (int r3 = r2 + 1; r3 < m; ++r3) {\n                    maxSum = max(maxSum, calculateSum(r1, r2, r3, bestValues, bestColumns));\n                }\n            }\n        }\n        return maxSum;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size();\n        int n = board[0].size();\n        vector<vector<long long>> bestValues(m, vector<long long>(3, LLONG_MIN));\n        vector<vector<int>> bestColumns(m, vector<int>(3, -1));\n\n        fillBestValuesAndColumns(m, board, bestValues, bestColumns);\n        return findMaximumValueSum(m, bestValues, bestColumns);\n    }\n};\n",
    "submit_ts": "1723910113",
    "subm_id": "1359217867"
}