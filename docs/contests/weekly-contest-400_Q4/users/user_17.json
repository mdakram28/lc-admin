{
    "username": "DylanSmith",
    "submission": "typedef long long ll;\n \n#define pb push_back\n#define sz(x) (int)x.size()\n#define all(x) begin(x),end(x)\n#define lb(x,y) lower_bound(all(x),y)-begin(x)\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& nums, int k) {\n        int N = sz(nums);\n        vector<int> mn(30, N);\n        int M = 1; while (M < N) M <<= 1;\n        vector<int> tree(M * 2, (1 << 30) - 1);\n        for (int i = 0; i < N; i++) tree[i + M] = nums[i];\n        for (int i = M - 1; i > 0; i--) tree[i] = tree[i * 2] & tree[i * 2 + 1];\n        int res = INT_MAX;\n        for (int i = N - 1; i >= 0; i--) {\n            for (int j = 0; j < 30; j++) {\n                if (!(nums[i] & 1 << j)) {\n                    mn[j] = i;\n                }\n            }\n            res = min(res, abs(nums[i] - k));\n            for (int j = 0; j < 30; j++) {\n                if (mn[j] < N) {\n                    int l = i + M, r = mn[j] + M;\n                    int m = (1 << 30) - 1;\n                    while (l <= r) {\n                        if (l % 2 == 1) {\n                            m = m & tree[l];\n                            l >>= 1;\n                            l++;\n                        } else {\n                            l >>= 1;\n                        }\n                        if (r % 2 == 0) {\n                            m = m & tree[r];\n                            r >>= 1;\n                            r--;\n                        } else {\n                            r >>= 1;\n                        }\n                    }\n                    res = min(res, abs(m - k));\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": 1717296145.0
}