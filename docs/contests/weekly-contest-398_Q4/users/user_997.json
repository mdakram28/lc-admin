{
    "username": "justinleung0204",
    "submission": "class Solution:\n    def waysToReachStair(self, k: int) -> int:\n        \"\"\"\n        graph?\n        \n        start on 1\n        Go down to stair i - 1. This operation cannot be used consecutively or on stair 0.\n        Go up to stair i + 2jump. And then, jump becomes jump + 1.\n        \n        after reaching target, seems at most can perform act2 2 more times, else diverge\n        \n        #prune when?\n        \"\"\"\n        #print(\"----\")\n        \n        \n        if k<=16:   #brute cos have overlap\n            ans=0\n            q=deque([(1,0,False)])  #stair, jump, prevIsAct1\n            #m=defaultdict(list)\n            while q:\n                i, jump,prevIsAct1 = q.popleft()\n                if i==k:\n                    ans+=1#can continue\n\n                if i>k+2:\n                    continue\n                #print(f\"{i=} {jump=}\")\n                # m[jump].append(i)\n\n                # if i>k+2 and jump>2:#can not circle around\n                #     continue\n\n                if not prevIsAct1 and i>0:#can perform act1\n                    q.append((i-1,jump,True))\n                #default: act2\n                if i+(1<<jump) <=k+2:\n                    q.append((i+(1<<jump),jump+1,False))\n            # for k,v in m.items(): \n            #     f=Counter(v)\n            #     print(k,sorted([a for a in f.items()]))\n\n            return ans\n        #k>=16 use analytical sol\n        for i in range(5,31): #power of 2\n            this=(1<<i)\n            if this-i-1<=k<=this: #ans >0\n                return math.comb(i+1,k-(this-i-1))\n            \n        return 0\n    \n        \"\"\"\n        jump    reachable\n        0 [0, 1] 2\n        1 [0, 1, 2] 3\n        2 [1, 2, 3, 4] 4\n        3 [4, 5, 6, 7, 8] 5\n        4 [11, 12, 13, 14, 15, 16] 6\n        5 [26, 27, 28, 29, 30, 31, 32] 7\n        6 [57, 58, 59, 60, 61, 62, 63, 64] 8\n        7 [120, 121, 122, 123, 124, 125, 126, 127, 128] 9\n        8 [247, 248, 249, 250, 251, 252, 253, 254, 255, 256] 10\n        9 [502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512] 11\n        \n        ----\n        0 [(0, 1), (1, 1)]\n        1 [(0, 1), (1, 2), (2, 1)]\n        2 [(1, 1), (2, 3), (3, 3), (4, 1)]\n        3 [(4, 1), (5, 4), (6, 6), (7, 4), (8, 1)]\n        4 [(11, 1), (12, 5), (13, 10), (14, 10), (15, 5), (16, 1)]\n        5 [(26, 1), (27, 6), (28, 15), (29, 20), (30, 15), (31, 6), (32, 1)]\n        6 [(57, 1), (58, 7), (59, 21), (60, 35), (61, 35), (62, 21), (63, 7), (64, 1)]\n        7 [(120, 1), (121, 8), (122, 28), (123, 56), (124, 70), (125, 56), (126, 28), (127, 8), (128, 1)]\n        8 [(247, 1), (248, 9), (249, 36), (250, 84), (251, 126), (252, 126), (253, 84), (254, 36), (255, 9), (256, 1)]\n        9 [(502, 1), (503, 10), (504, 45), (505, 120), (506, 210), (507, 252), (508, 210), (509, 120), (510, 45), (511, 10), (512, 1)]\n        binomial\n        \"\"\"\n                \n        ",
    "submit_ts": 1716090032.0
}