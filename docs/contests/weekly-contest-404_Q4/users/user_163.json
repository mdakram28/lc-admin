{
    "username": "mittaludit768",
    "submission": "class Solution {\npublic:\n    pair<int, int> bfs(vector<vector<int>>& adj, int node) {\n        int n = adj.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        \n        dist[node] = 0;\n        q.push(node);\n        int fn = node;\n        \n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            \n            for (auto i : adj[node]) {\n                if (dist[i] == -1) {\n                    dist[i] = dist[node] + 1;\n                    q.push(i);\n                    if (dist[i] > dist[fn]) {\n                        fn = i;\n                    }\n                }\n            }\n        }\n        \n        return {fn, dist[fn]};\n    }\n\n    int calculateDiameter(vector<vector<int>>& adj) {\n        pair<int, int> r1 = bfs(adj, 0);\n        int farthestNode1 = r1.first;\n        pair<int, int> r2 = bfs(adj, farthestNode1);\n        int dm = r2.second;\n        return dm;\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        vector<vector<int> > adj1(edges1.size()+1);\n        vector<vector<int> > adj2(edges2.size()+1);\n        for(auto i: edges1)\n        {\n            adj1[i[0]].push_back(i[1]);\n            adj1[i[1]].push_back(i[0]);\n        }\n        for(auto i: edges2)\n        {\n            adj2[i[0]].push_back(i[1]);\n            adj2[i[1]].push_back(i[0]);\n        }\n        int d1=calculateDiameter(adj1);\n        int d2=calculateDiameter(adj2);\n        cout<<d1<<\" \"<<d2<<endl;\n        int mn=max(d1,d2);\n        return max(mn,(d1+1)/2+(d2+1)/2+1);\n    }\n};",
    "submit_ts": 1719717161.0
}