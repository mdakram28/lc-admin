{
    "username": "qingning68",
    "submission": "class Solution:\n    def __init__(self):\n        self.nums = []\n\n    def is_peak(self, i):\n        if i <= 0 or i >= len(self.nums) - 1:\n            return False\n        return self.nums[i] > self.nums[i - 1] and self.nums[i] > self.nums[i + 1]\n\n    class SegmentTree:\n        def __init__(self, data, n):\n            self.tree = [0] * (4 * n)\n            self.n = n\n            self.data = data\n            self.build(0, 0, n - 1)\n\n        def build(self, node, start, end):\n            if start == end:\n                self.tree[node] = 1 if self.data.is_peak(start) else 0\n            else:\n                mid = (start + end) // 2\n                self.build(2 * node + 1, start, mid)\n                self.build(2 * node + 2, mid + 1, end)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def update(self, idx, node, start, end):\n            if start == end:\n                self.tree[node] = 1 if self.data.is_peak(idx) else 0\n            else:\n                mid = (start + end) // 2\n                if start <= idx <= mid:\n                    self.update(idx, 2 * node + 1, start, mid)\n                else:\n                    self.update(idx, 2 * node + 2, mid + 1, end)\n                self.tree[node] = self.tree[2 * node + 1] + self.tree[2 * node + 2]\n\n        def query(self, l, r, node, start, end):\n            if r < start or end < l:\n                return 0\n            if l <= start and end <= r:\n                return self.tree[node]\n            mid = (start + end) // 2\n            left_query = self.query(l, r, 2 * node + 1, start, mid)\n            right_query = self.query(l, r, 2 * node + 2, mid + 1, end)\n            return left_query + right_query\n\n    def countOfPeaks(self, nums, queries):\n        self.nums = nums\n        n = len(nums)\n        results = []\n        seg_tree = self.SegmentTree(self, n)\n\n        for query in queries:\n            if query[0] == 1:\n                l, r = query[1], query[2]\n                results.append(seg_tree.query(l + 1, r - 1, 0, 0, n - 1))\n            elif query[0] == 2:\n                index, val = query[1], query[2]\n                nums[index] = val\n                if index > 0:\n                    seg_tree.update(index - 1, 0, 0, n - 1)\n                seg_tree.update(index, 0, 0, n - 1)\n                if index < n - 1:\n                    seg_tree.update(index + 1, 0, 0, n - 1)\n\n        return results\n\n\n",
    "submit_ts": 1718508729.0
}