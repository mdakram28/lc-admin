{
    "username": "thesycat",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        def get_emap(e):\n            edges = defaultdict(list)\n            for a,b in e:\n                edges[a].append(b)\n                edges[b].append(a)\n            return edges\n    \n        e1 = get_emap(edges1)\n        e2 = get_emap(edges2)\n        \n        def t1(node, parent):\n            max_diam = 0\n            child_depths = []\n            for child in e1[node]:\n                if child == parent:\n                    continue\n                d, diam = t1(child, node)\n                max_diam = max(max_diam, diam)\n                child_depths.append(d)\n                if len(child_depths) > 2:\n                    child_depths.sort(reverse=True)\n                    child_depths = child_depths[:2]\n            \n            if len(child_depths) > 0:\n                max_diam = max(max_diam, max(child_depths))\n            if len(child_depths) == 2:\n                max_diam = max(max_diam, sum(child_depths))\n                \n#            print(\"T1. NOde=\", node, \"PARENT=\", parent, \"MAXDIAM=\", max_diam, \"CD=\", child_depths)\n            child_depths.append(0)\n            \n            return max(child_depths) + 1, max_diam\n        \n        def t2(node, parent):\n            max_diam = 0\n            child_depths = []\n            for child in e2[node]:\n                if child == parent:\n                    continue\n                d, diam = t2(child, node)\n                max_diam = max(max_diam, diam)\n                child_depths.append(d)\n                if len(child_depths) > 2:\n                    child_depths.sort(reverse=True)\n                    child_depths = child_depths[:2]\n            \n            if len(child_depths) > 0:\n                max_diam = max(max_diam, max(child_depths))\n            if len(child_depths) == 2:\n                max_diam = max(max_diam, sum(child_depths))\n                \n            child_depths.append(0)\n            return max(child_depths) + 1, max_diam\n        \n        _, t1diam = t1(0, None)\n        _, t2diam = t2(0, None)\n        \n        \n        comb = math.ceil(t1diam / 2) + math.ceil(t2diam/2) + 1\n        \n        #print(t1diam, t2diam)\n        \n        return max(comb, t1diam, t2diam)\n                    \n            \n            \n            \n            \n     \n                \n            \n                \n        ",
    "submit_ts": "1719719306",
    "subm_id": "1304438699"
}