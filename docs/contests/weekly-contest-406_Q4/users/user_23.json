{
    "username": "sanjayvem",
    "submission": "\n\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        // Create a combined list of cuts with their types\n        vector<pair<int, char>> cuts;\n        \n        // Add horizontal cuts\n        for (int i = 0; i < horizontalCut.size(); i++) {\n            cuts.push_back({horizontalCut[i], 'h'});\n        }\n        \n        // Add vertical cuts\n        for (int j = 0; j < verticalCut.size(); j++) {\n            cuts.push_back({verticalCut[j], 'v'});\n        }\n        \n        // Sort cuts in descending order of their costs\n        sort(cuts.rbegin(), cuts.rend());\n        \n        long long totalCost = 0;\n        int horizontalPieces = 1, verticalPieces = 1;\n        \n        // Apply the cuts greedily\n        for (auto& cut : cuts) {\n            if (cut.second == 'h') {\n                // Apply a horizontal cut\n                totalCost += (long long)cut.first * verticalPieces;\n                horizontalPieces++;\n            } else {\n                // Apply a vertical cut\n                totalCost += (long long)cut.first * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720924648",
    "subm_id": "1320225196"
}