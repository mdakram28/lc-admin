{
    "username": "harshitchachriya",
    "submission": "class Solution {\npublic:\n \n \n#define maxN 100001 \n \n \nvector<int> adj[maxN];\nint height[maxN];\nint dist[maxN];\n \nvoid dfs1(int cur, int par)\n{\n    for (auto u : adj[cur]) {\n        if (u != par) {\n            dfs1(u, cur);\n            height[cur]\n                = max(height[cur], height[u]);\n        }\n    }\n    height[cur] += 1;\n}\n\nvoid dfs2(int cur, int par)\n{\n    int max1 = 0;\n    int max2 = 0;\n    for (auto u : adj[cur]) {\n        if (u != par) {\n            if (height[u] >= max1) {\n                max2 = max1;\n                max1 = height[u];\n            }\n            else if (height[u] > max2) {\n                max2 = height[u];\n            }\n        }\n    }\n \n    int sum = 0;\n \n    for (auto u : adj[cur]) {\n        if (u != par) {\n            sum = ((max1 == height[u]) ? max2 : max1);\n            if (max1 == height[u])\n                dist[u]\n                    = 1 + max(1 + max2, dist[cur]);\n            else\n                dist[u]\n                    = 1 + max(1 + max1, dist[cur]);\n            dfs2(u, cur);\n        }\n    }\n}\n \n\n\n\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n         int n=edges1.size() + 1, m = edges2.size() + 1 ; \n         for(int i=0; i<maxN; i++) {\n            adj[i].clear() ; \n         }\n         for(int i=0; i<n-1; i++) {\n            int u = edges1[i][0], v=edges1[i][1] ; \n            adj[v].push_back(u);\n            adj[u].push_back(v) ; \n         }\n\n         memset(height, 0, sizeof(height)) ; \n         memset(dist, 0 , sizeof(dist)) ; \n        dfs1(0, -1);\n        dfs2(0, -1);\n        int mx1 = 0 , mn1 = INT_MAX; \n        for (int i = 0; i < n; i++){\n             int val=  max(dist[i], height[i]) - 1 ;\n             mx1= max(mx1, val) ; \n             mn1 = min(mn1, val ) ; \n        }\n\n         for(int i=0; i<maxN; i++) {\n            adj[i].clear() ; \n         }\n          for(int i=0; i<m-1; i++) {\n            int u = edges2[i][0], v=edges2[i][1] ; \n            adj[v].push_back(u);\n            adj[u].push_back(v) ; \n         }\n         memset(height, 0, sizeof(height)) ; \n         memset(dist, 0 , sizeof(dist)) ; \n        dfs1(0, -1);\n        dfs2(0, -1);\n        int mx2 = 0 , mn2 = INT_MAX; \n        for (int i = 0; i < m; i++){\n             int val=  max(dist[i], height[i]) - 1;\n             mx2= max(mx2, val) ; \n             mn2 = min(mn2, val ) ; \n        }\n\n        return max({mx1, mx2, mn1 + mn2 + 1}) ; \n\n\n\n\n    }\n\n};",
    "submit_ts": "1719718237",
    "subm_id": "1304412153"
}