{
    "username": "\u9690\u59d3\u57cb\u540d\u4e36M",
    "submission": "class Solution {\npublic:\n    using int64 = long long;\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int m = board.size(), n =board[0].size();\n        vector<vector<pair<int, int>>> e(m, vector<pair<int, int>>(n));\n        for(int i = 0; i < m; ++i){\n            for(int j = 0; j < n; ++j){\n                e[i][j].first = board[i][j];\n                e[i][j].second = j;\n            }\n            sort(e[i].begin(), e[i].end(), [&](const auto &x, const auto &y){\n                return x.first > y.first;\n            });\n        }\n        int64 res = -1e12;\n        for(int i = 0; i < m; ++i){\n            for(int j = i + 1; j < m; ++j){\n                for(int k = j + 1; k < m; ++k){\n                    for(int x = 0; x < 3; ++x){\n                       for(int y = 0; y < 3; ++y){\n                           for(int z = 0; z < 3; ++z){\n                               if(e[i][x].second != e[j][y].second && e[i][x].second != e[k][z].second && e[k][z].second != e[j][y].second )\n                                   res = max(res, (int64)e[i][x].first + e[j][y].first + e[k][z].first);\n                           }\n                       }\n                    }\n                }\n            }\n        }\n        return res;\n    }\n};",
    "submit_ts": "1723907679",
    "subm_id": "556326881"
}