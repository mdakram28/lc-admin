{
    "username": "\u8bd5\u8bd5\u770b",
    "submission": "class Solution:\n    def maximumValueSum(self, board: List[List[int]]) -> int:\n        def dfs1():\n            an1 = ~sys.maxsize//2\n            for i in range(m-2):\n                for j in range(n):\n                    an1 = max(an1, board[i][j] + dfs2(i+1, j))\n            return an1\n\n        @cache\n        def dfs2(i2, j1):\n            if i2 < m - 1:\n                an2 = dfs2(i2+1, j1)\n                for j in range(n):\n                    if j != j1:\n                        if j < j1:\n                            an2 = max(an2, board[i2][j] + dfs3(i2+1, j, j1))\n                        else:\n                            an2 = max(an2, board[i2][j] + dfs3(i2+1, j1, j))\n                return an2\n            else:\n                return ~sys.maxsize // 2\n\n        @cache\n        def dfs3(i3, j1, j2):\n            if i3 < m:\n                an31 = dfs3(i3+1, j1, j2)\n                j12 = set([j1, j2])\n                if hps[i3][0][1] in j12:\n                    if hps[i3][1][1] in j12:\n                        return max(hps[i3][2][0], an31)\n                    else:\n                        return max(hps[i3][1][0], an31)\n                else:\n                    return max(hps[i3][0][0], an31)\n            else:\n                return ~sys.maxsize // 2\n\n        m, n = len(board), len(board[0])\n        hps = []\n        for row in board:\n            vjs = []\n            for j, v in enumerate(row):\n                vjs.append((v, j))\n            vjs.sort(reverse=True)\n            hps.append(vjs[:3])\n        return dfs1()\n        ",
    "submit_ts": "1723908812",
    "subm_id": "556332962"
}