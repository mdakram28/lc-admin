{
    "username": "Malay01",
    "submission": "class Solution:\n    def numberOfPermutations(self, n: int, requirements: List[List[int]]) -> int:\n        MOD = 1000000007\n        \n        requirements.sort(key=lambda x: x[0])\n        \n        max_inversions = n * (n - 1) // 2\n        dp = [[0] * (max_inversions + 1) for _ in range(n + 1)]\n        dp[0][0] = 1\n\n        for length in range(1, n + 1):\n            prefix_sums = [0] * (max_inversions + 1)\n            prefix_sums[0] = dp[length - 1][0]\n            for k in range(1, max_inversions + 1):\n                prefix_sums[k] = (prefix_sums[k - 1] + dp[length - 1][k]) % MOD\n            \n            for inversions in range(max_inversions + 1):\n                if inversions >= length:\n                    dp[length][inversions] = (prefix_sums[inversions] - prefix_sums[inversions - length] + MOD) % MOD\n                else:\n                    dp[length][inversions] = prefix_sums[inversions]\n            \n            for req in requirements:\n                end, count = req[0], req[1]\n                if end + 1 == length:\n                    for inversions in range(max_inversions + 1):\n                        if inversions != count:\n                            dp[length][inversions] = 0\n\n        result = 0\n        for inversions in range(max_inversions + 1):\n            result = (result + dp[n][inversions]) % MOD\n        \n        return result",
    "submit_ts": 1719071747.0
}