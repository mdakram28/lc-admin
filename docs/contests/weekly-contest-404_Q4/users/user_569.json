{
    "username": "xeriom23823",
    "submission": "class Solution {\nprivate:\n    pair<int, int> bfs(int start, int n, const vector<vector<int>>& adj) {\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int farthest_node = start;\n        int max_dist = 0;\n\n        while (!q.empty()) {\n            int node = q.front();\n            q.pop();\n            for (int neighbor : adj[node]) {\n                if (dist[neighbor] == -1) {\n                    dist[neighbor] = dist[node] + 1;\n                    q.push(neighbor);\n                    if (dist[neighbor] > max_dist) {\n                        max_dist = dist[neighbor];\n                        farthest_node = neighbor;\n                    }\n                }\n            }\n        }\n        return {farthest_node, max_dist};\n    }\n\n    // Function to compute the diameter of a tree\n    int tree_diameter(int n, const vector<vector<int>>& edges) {\n        if (n == 1) return 0;\n\n        vector<vector<int>> adj(n);\n        for (const auto& edge : edges) {\n            adj[edge[0]].push_back(edge[1]);\n            adj[edge[1]].push_back(edge[0]);\n        }\n\n        pair<int, int> p = bfs(0, n, adj);\n        pair<int, int> q = bfs(p.first, n, adj);\n        return q.second;\n    }\n\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int n = edges1.size() + 1, m = edges2.size() + 1;\n        int d1 = tree_diameter(n, edges1);\n        int d2 = tree_diameter(m, edges2);\n\n        int min_diameter = max(d1, d2);\n        min_diameter = max(min_diameter, (d1 + 1) / 2 + (d2 + 1) / 2 + 1);\n\n        return min_diameter;\n    }\n};",
    "submit_ts": "1719719750",
    "subm_id": "1304449647"
}