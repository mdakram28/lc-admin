{
    "username": "codeanand17",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] hc, int[] vc) {\n      Integer x[]=new Integer[m-1],y[]=new Integer[n-1];\n        int w=0,g=0;\n        for(int i:hc) x[w++]=i;\n        for(int i:vc) y[g++]=i;\n        return minimumCostOfBreaking(x,y,m-1,n-1);\n        \n    }\n     static long minimumCostOfBreaking(Integer X[], Integer Y[], \n                                                 int m, int n)\n    {\n        long res = 0;\n     \n        Arrays.sort(X, Collections.reverseOrder());\n     \n        Arrays.sort(Y, Collections.reverseOrder());\n     \n        int hzntl = 1, vert = 1;\n     \n        int i = 0, j = 0;\n        while (i < m && j < n)\n        {\n            if (X[i] > Y[j])\n            {\n                res += X[i] *1L* vert;\n     \n                hzntl++;\n                i++;\n            }\n            else\n            {\n                res += Y[j] *1L* hzntl;\n     \n                vert++;\n                j++;\n            }\n        }\n     \n        int total = 0;\n        while (i < m)\n            total += X[i++];\n        res += total *1L* vert;\n     \n        total = 0;\n        while (j < n)\n            total += Y[j++];\n        res += total *1L* hzntl;\n     \n        return res;\n    }\n}",
    "submit_ts": "1720925927",
    "subm_id": "1320270632"
}