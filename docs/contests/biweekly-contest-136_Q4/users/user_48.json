{
    "username": "mkawa222",
    "submission": "class Solution:\n    def timeTaken(self, edges: List[List[int]]) -> List[int]:\n        def rerooting(root=0):\n            uu = []\n            stack = [root]\n            while stack:\n                u = stack.pop()\n                uu.append(u)\n                vv = []\n                # !!!check the format of the \"to\"!!!\n                for v in to[u]:\n                    if v == par[u]: continue\n                    vv.append(v)\n                    par[v] = u\n                    stack.append(v)\n                    rdp[v] = dp[u]\n                to[u] = vv\n\n            # bottom up\n            for u in uu[::-1]:\n                p = par[u]\n                if p != -1:\n                    trans_up(u)\n                    dp[p] = op(dp[p], dp[u])\n\n            # top down\n            for u in uu:\n                cs = e()\n                # !!!check the format of the \"to\"!!!\n                for v in to[u]:\n                    rdp[v] = op(rdp[v], cs)\n                    cs = op(cs, dp[v])\n                cs = rdp[u]\n                for v in to[u][::-1]:\n                    rdp[v] = op(rdp[v], cs)\n                    trans_down(v)\n                    cs = op(cs, dp[v])\n                dp[u] = cs\n\n        def op(a, b):\n            if a > b: return a\n            return b\n\n        # u to parent[u]\n        def trans_up(u):\n            dp[u] += 2-(u & 1)\n            return\n\n        # parent[u] to u\n        def trans_down(u):\n            p=par[u]\n            rdp[u] += 2-(p & 1)\n            return\n\n        n = len(edges)+1\n        to = [[] for _ in range(n)]\n        for u, v in edges:\n            to[u].append(v)\n            to[v].append(u)\n\n        e = lambda: 0\n        par = [-1]*n\n\n        # dp\u521d\u671f\u5316\n        dp = [e() for _ in range(n)]\n        rdp = [e() for _ in range(n)]\n\n        rerooting()\n        \n        return dp\n",
    "submit_ts": "1722697940",
    "subm_id": "1343164320"
}