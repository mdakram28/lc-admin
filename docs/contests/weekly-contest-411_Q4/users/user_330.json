{
    "username": "purnawirman",
    "submission": "class Solution:\n    def countKConstraintSubstrings(self, s: str, k: int, queries: List[List[int]]) -> List[int]:\n        # construct left for each right by sliding window\n        left = [0] * len(s)\n        dp = [0] * len(s) # max substring end at j\n        i = 0\n        ones, zeros = 0, 0\n        for j in range(len(s)):\n            ones += int(s[j] == '1')\n            zeros += int(s[j] == '0')\n            while ones > k and zeros > k:\n                ones -= int(s[i] == '1')\n                zeros -= int(s[i] == '0')\n                i += 1\n            left[j] = i\n            dp[j] = j - i + 1\n\n        prefix = []\n        cur = 0\n        for d in dp:\n            cur += d\n            prefix.append(cur)\n\n        def maxRight(i, j):\n            if j < i:\n                return 0\n            return prefix[j] - (prefix[i-1] if i - 1 >= 0 else 0)\n\n        def count(lo, hi): # return number of valid substrings\n            res = 0\n            idx = bisect_left(left, lo)\n            \n            # part1\n            ll = lo\n            hh = min(hi, idx - 1)\n            m = hh - lo + 1\n            res += m * (hh + lo) // 2 + m - m * lo\n            # part 2\n            res += maxRight(idx, hi)\n            return res\n\n        res = []\n        for lo, hi in queries:\n            res.append(count(lo, hi))\n        return res",
    "submit_ts": "1723953448",
    "subm_id": "1359821549"
}