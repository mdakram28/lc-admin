{
    "username": "HYWong",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size(), n = grid[0].size();\n        int res = 0;\n        for (int i = 0; i < m / 2; i++) {\n            for (int j = 0; j < n / 2; j++) {\n                int count1 = grid[i][j] + grid[m - 1 - i][j] + grid[i][n - 1 - j] + grid[m - 1 - i][n - 1 - j];\n                res += min(count1, 4 - count1);\n            }\n        }\n        if (m % 2 == 1 && n % 2 == 1)\n            res += grid[m / 2][n / 2];\n        \n        int pairDiff = 0, pair1 = 0;\n        if (m % 2 == 1) {\n            for (int i = 0; i < n / 2; i++) {\n                if (grid[m / 2][i] == grid[m / 2][n - 1 - i] && grid[m / 2][i])\n                    pair1 += 1;\n                if (grid[m / 2][i] != grid[m / 2][n - 1 - i])\n                    pairDiff += 1;\n            }\n        }\n        if (n % 2 == 1) {\n            for (int i = 0; i < m / 2; i++) {\n                if (grid[i][n / 2] == grid[m - 1 - i][n / 2] && grid[i][n / 2])\n                    pair1 += 1;\n                if (grid[i][n / 2] != grid[m - 1 - i][n / 2])\n                    pairDiff += 1;\n            }\n        }\n        if (pair1 % 2 == 1 && pairDiff == 0)\n            res += 2;\n        return res + pairDiff;\n    }\n};",
    "submit_ts": "1722698762",
    "subm_id": "1343190978"
}