{
    "username": "Edward Lee",
    "submission": "class Solution {\npublic:\n    using LL = long long;\n\n    string largestPalindromeDivisibleBy7Mid(int n) {\n        switch (n % 12) {\n        case 1:\n            return \"7\";\n\n        case 2:\n            return \"77\";\n\n        case 3:\n            return \"959\";\n        \n        case 4:\n            return \"9779\";\n\n        case 5:\n            return \"99799\";\n        \n        case 6:\n            return \"999999\";\n        \n        case 7:\n            return \"9994999\";\n        \n        case 8:\n            return \"99944999\";\n\n        case 9:\n            return \"999969999\";\n\n        case 10:\n            return \"9999449999\";\n        \n        case 11:\n            return \"99999499999\";\n\n        default:\n            break;\n        }\n\n        return \"\";\n    }\n\n    string largestPalindromeDivisibleBy7(int n) {\n        std::string prefix = std::string(n / 12 * 6, '9');\n\n        return prefix + largestPalindromeDivisibleBy7Mid(n) + prefix;\n    }\n\n    string largestPalindrome(int n, int k) {\n        std::string str;\n\n        switch (k) {\n        case 1:\n            return std::string(n, '9');\n        \n        case 2:\n            str = std::string(n, '9');\n            str[0] = '8'; str.back() = '8';\n            return str;\n\n        case 3:\n            return std::string(n, '9');\n\n        case 4:\n            if (n <= 4)\n                return std::string(n, '8');\n\n            str = std::string(n, '9');\n            str[0] = '8'; str[1] = '8'; str[n - 2] = '8'; str.back() = '8';\n            return str;\n        \n        case 5:\n            str = std::string(n, '9');\n            str[0] = '5'; str.back() = '5';\n            return str;\n\n        case 6:\n            if (n == 1)\n                return \"6\";\n\n            if (n == 2)\n                return \"66\";\n        \n            if (n == 4)\n                return \"8778\";\n\n            if (n % 2) {\n                str = std::string(n, '9');\n                str[0] = '8'; str.back() = '8'; str[n / 2] = '8';\n                return str;\n            }\n    \n            str = std::string(n, '9');\n            str[0] = '8'; str.back() = '8'; str[n / 2 - 1] = '7'; str[n / 2] = '7';\n            return str;\n\n        case 7:\n            return largestPalindromeDivisibleBy7(n);\n\n        case 8:\n            if (n <= 6)\n                return std::string(n, '8');\n            \n            str = std::string(n, '9');\n            str[0] = str[1] = str[2] = str[n-1] = str[n-2] = str[n-3] = '8';\n            return str;\n\n        case 9:\n            return std::string(n, '9');\n\n        default:\n            break;\n        }\n\n        return std::string(n, '9');\n    }\n};",
    "submit_ts": "1723952958",
    "subm_id": "1359808842"
}