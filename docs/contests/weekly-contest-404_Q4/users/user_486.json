{
    "username": "jfkjfk",
    "submission": "#include<bits/stdc++.h>\n\nusing namespace std;\n\n#define fastio()        ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL)\n#define MOD             1000000007\n#define MOD1            998244353\n#define INF             1e18\n#define endl            \"\\n\"\n#define pb              push_back\n#define eb              emplace_back\n#define mp              make_pair\n#define gcd(a, b)       __gcd(a,b)\n#define ff              first\n#define ss              second\n#define PI              3.141592653589793238462\n#define set_bits(x)     __builtin_popcountll(x)\n#define all(x)          (x).begin(), (x).end()\n\ntypedef long long ll;\ntypedef long double lld;\n\n/*---------------------------------------------------------------------------------------------------------------------------*/\nll power(ll a, ll n){\n    ll res = 1;\n    while(n){\n        if(n & 1){\n            res = (res * a) % MOD;\n        }\n        a = (a * a) % MOD;\n        n >>= 1;\n    }\n    return res;\n}\n/*---------------------------------------------------------------------------------------------------------------------------*/\n\nclass Solution {\npublic:\n\n    bool isPalindrome(string s){\n        int n = s.size();\n        for(int i=0; i<n/2; i++){\n            if(s[i] != s[n-i-1]){\n                return false;\n            }\n        }\n        return true;\n    }\n\n    bool isPrime(int n){\n        for(int i=2; i*i<=n; i++){\n            if(n % i == 0){\n                return false;\n            }\n        }\n        return true;\n    } \n    \n    void checkdfs(vector<vector<int>> &adj, vector<int> &dis, int &ft, int node, int d){\n        dis[node] = d;\n        if(d > dis[ft]){\n            ft = node;\n        }\n        for(auto &it : adj[node]){\n            if(dis[it] == -1){\n                checkdfs(adj,dis,ft,it,d+1);\n            }\n        }\n    }\n    \n    int dfs(vector<vector<int>> &adj, int st, int& ft){\n        int n = adj.size();\n        vector<int> dis(n);\n        for(int i=0; i<n; i++){\n            dis[i] = -1;\n        }\n        ft = st;\n        checkdfs(adj, dis, ft, st, 0);\n        int res = dis[ft];\n        return res;\n    }\n    \n    int getAns(vector<vector<int>>& edges1, vector<vector<int>>& edges2){\n        int n = edges1.size();\n        int m = edges2.size();\n        vector<vector<int>> adj1(n+1), adj2(m+1);\n        for(int i=0; i<n; i++){\n            int u = edges1[i][0];\n            int v = edges1[i][1];\n            adj1[u].pb(v);\n            adj1[v].pb(u);\n        }\n        for(int i=0; i<m; i++){\n            int u = edges2[i][0];\n            int v = edges2[i][1];\n            adj2[u].pb(v);\n            adj2[v].pb(u);\n        }\n        int f1 = 0;\n        int res1 = dfs(adj1,0,f1);\n        res1 = dfs(adj1,f1,f1);\n        int f2 = 0;\n        int res2 = dfs(adj2,0,f2);\n        res2 = dfs(adj2,f2,f2);\n        int ans = max(res1, res2);\n        \n        int val1 = (res1 + 1)/2;\n        int val2 = (res2 + 1)/2;\n        \n        ans = max(ans, val1+val2+1);\n        \n        return ans;\n    }\n\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int ans = getAns(edges1, edges2);\n        return ans;\n    }\n};\n\n// void solve(ll tc){\n// }\n\n// int main(){\n//     fastio();\n\n//     ll t=1;\n//     cin >> t;\n\n//     for(ll i=1; i<=t; i++){\n//         // cout << \"Case #\" << i << \": \";\n//         solve(i);\n//     }\n\n//     return 0;\n// }",
    "submit_ts": 1719717220.0
}