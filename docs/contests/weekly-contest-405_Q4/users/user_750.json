{
    "username": "jacky3627",
    "submission": "struct Trie {\n    unordered_map<char, Trie*> children;\n    int cost = -1;\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        ios_base::sync_with_stdio(false);\n        cin.tie(0);\n\n        Trie* root = buildTrie(words, costs);\n\n        // pair: index, cost\n        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;\n        vector<int> dist(target.size()+1, INT_MAX);\n        dist[0] = 0;\n\n        q.push({0, 0});\n        while (!q.empty()) {\n            auto [cost, index] = q.top();\n            q.pop();\n            if (cost > dist[index]) continue;\n\n            Trie* current = root; \n            while (current && index < target.size()) {\n                if (!current->children.contains(target[index]))\n                    break;\n\n                current = current->children[target[index]];\n                index++;\n                if (current->cost > 0) {\n                    if (dist[index] <= cost + current->cost) continue;\n                    dist[index] = cost + current->cost;\n\n                    q.push({dist[index], index});\n                }\n            }\n        }\n\n        return dist.back() == INT_MAX ? -1 : dist.back();\n    }\n\nprivate:\n    Trie* buildTrie(vector<string>& words, vector<int>& costs) {\n        Trie* root = new Trie();\n        for (int i = 0; i < words.size(); i++) {\n            Trie* current = root;\n            for (char c : words[i]) {\n                if (!current->children.contains(c)) {\n                    current->children[c] = new Trie();\n                }\n                current = current->children[c];\n            }\n\n            if (current->cost > 0) {\n                current->cost = min(current->cost, costs[i]);\n            } else {\n                current->cost = costs[i];\n            }\n        }\n\n        return root;\n    }\n};",
    "submit_ts": "1720322208",
    "subm_id": "1312343669"
}