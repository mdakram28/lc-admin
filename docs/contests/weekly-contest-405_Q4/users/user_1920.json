{
    "username": "satejansh",
    "submission": "#include <iostream>\n#include <vector>\n#include <unordered_map>\n#include <climits>\nusing namespace std;\n\nstruct TrieNode {\n    unordered_map<char, TrieNode*> children;\n    bool isEndOfWord;\n    int cost;\n    \n    TrieNode() : isEndOfWord(false), cost(INT_MAX) {}\n};\n\nclass Trie {\nprivate:\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n    \n    TrieNode* getRoot() {\n        return root;\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* curr = root;\n        for (char c : word) {\n            if (!curr->children.count(c)) {\n                curr->children[c] = new TrieNode();\n            }\n            curr = curr->children[c];\n        }\n        curr->isEndOfWord = true;\n        curr->cost = min(curr->cost, cost);\n    }\n    \n    pair<int, TrieNode*> startsWith(const string& prefix, int start) {\n        TrieNode* curr = root;\n        int i = start;\n        while (i < prefix.size() && curr->children.count(prefix[i])) {\n            curr = curr->children[prefix[i]];\n            ++i;\n        }\n        return {i - start, curr};\n    }\n};\n\nclass Solution {\npublic:\n\n\nint minimumCost(string target, vector<string>& words, vector<int>& costs) {\n    int n = target.size();\n    vector<int> dp(n + 1, INT_MAX);\n    dp[0] = 0; // Base case: cost to form an empty string is 0\n    \n    Trie trie;\n    for (int i = 0; i < words.size(); ++i) {\n        trie.insert(words[i], costs[i]);\n    }\n    \n    for (int i = 0; i < n; ++i) {\n        if (dp[i] == INT_MAX) continue; // Skip if the current prefix cannot be formed\n        \n        int j = i;\n        TrieNode* curr = trie.getRoot();\n        \n        while (j < n && curr->children.count(target[j])) {\n            curr = curr->children[target[j]];\n            ++j;\n            if (curr->isEndOfWord) {\n                dp[j] = min(dp[j], dp[i] + curr->cost);\n            }\n        }\n    }\n\n    return dp[n] == INT_MAX ? -1 : dp[n];\n}\n};",
    "submit_ts": "1720322651",
    "subm_id": "1312355575"
}