{
    "username": "MSMahesh123",
    "submission": "class Solution {\n    \n    vector<int> seg;\n    vector<bool> peak;\n    \npublic:\n    \n    int isPeak(vector<int>& nums, int ind){\n        if(ind < nums.size() - 1 && ind > 0 && nums[ind] > nums[ind - 1] && nums[ind] > nums[ind + 1]) return 1;\n        return 0;\n    }\n    \n    void build(vector<int>& nums, int ind, int left, int right){\n        if(left == right){\n            seg[ind] = isPeak(nums, left);\n            peak[left] = seg[ind];\n            return;\n        }\n        \n        int mid = left + (right - left)/2;\n        build(nums, 2*ind + 1, left, mid);\n        build(nums, 2*ind + 2, mid + 1, right);\n        \n        seg[ind] = seg[2*ind + 1] + seg[2*ind + 2];\n        \n        return;\n    }\n    \n    int find(vector<int>& nums, int ind, int left, int right, int l, int r){\n        if(left >= l && right <= r) return seg[ind];\n        if(left > r || right < l) return 0;\n        \n        int mid = left + (right - left)/2;\n        return find(nums, 2*ind + 1, left, mid, l, r) + find(nums, 2*ind + 2, mid + 1, right, l, r);\n    }\n    \n    void update(vector<int>& nums, int ind, int left, int right, int index){\n        if(left > index || right < index) return;\n        if(left == right){\n            seg[ind] = isPeak(nums, left);\n            peak[left] = seg[ind]; \n            return;\n        }\n        \n        int mid = left + (right - left)/2;\n        update(nums, 2*ind + 1, left, mid, index);\n        update(nums, 2*ind + 2, mid + 1, right, index);\n        \n        seg[ind] = seg[2*ind + 1] + seg[2*ind + 2];\n        \n        return;\n    }\n    \n    void check(vector<int>& nums, int ind){\n        if(peak[ind]){\n            if(!isPeak(nums, ind)) update(nums, 0, 0, nums.size() - 1, ind);\n        }\n        else{\n            if(isPeak(nums, ind)) update(nums, 0, 0, nums.size() - 1, ind);\n        }\n    }\n    \n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        seg.resize(4*n, 0);\n        peak.resize(n, false);\n        \n        build(nums, 0, 0, n - 1);\n        vector<int> result;\n        \n        for(int i = 0; i < n; i++) cout<<peak[i]<<endl;\n        \n        for(int i = 0; i < queries.size(); i++){\n            if(queries[i][0] == 1){\n                int l = queries[i][1];\n                int r = queries[i][2];\n                \n                int x = 0;\n                if(l < r - 1) x = find(nums, 0, 0, n - 1, l + 1, r - 1);\n                result.push_back(x);\n            }\n            else{\n                int ind = queries[i][1];\n                int value = queries[i][2];\n                int prev = nums[ind];\n                nums[ind] = value;\n                if(ind > 1) check(nums, ind - 1);\n                if(ind < n - 2) check(nums, ind + 1);\n                \n                check(nums, ind);\n            }\n        }\n        \n        return result;\n    }\n};",
    "submit_ts": "1718508919",
    "subm_id": "1289694604"
}