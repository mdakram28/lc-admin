{
    "username": "DeepakSujay",
    "submission": "\n\nclass Node:\n    def __init__(self,i,j):\n        self.i,self.j = i,j\n        self.left = None\n        self.right = None\n        self.lend = j-i\n        self.rend = j-i\n        self.maxy = j-i\n        self.there = False\n\ndef make_tree(i,j):\n    if i>j:return None\n    root = Node(i,j)\n    if i<j:\n        mid = (i+j)//2\n        root.left = make_tree(i,mid)\n        root.right = make_tree(mid+1,j)\n    return root\n\ndef update(root,i):\n    if i<root.i or i>root.j:return \n    root.there = True\n    if root.i==root.j:\n        root.lend=0\n        root.rend=0\n        root.maxy=0\n        return\n    update(root.left,i)\n    update(root.right,i)\n    root.lend = root.left.lend\n    if not root.left.there:root.lend+=root.right.lend+1\n    root.rend = root.right.rend\n    if not root.right.there:root.rend+=root.left.rend+1\n    root.maxy = max(root.lend,root.rend,root.left.rend+root.right.lend+1,root.left.maxy,root.right.maxy)\n    ##print(\"[update]\",root.i,root.j,root.lend,root.maxy,root.rend)\n\ndef query(root,i,j):\n    if root.i==i and root.j==j:\n        ##print(\"[query]\",i,j,root.lend,root.maxy,root.rend,root.there)\n        return root.there,root.lend,root.rend,root.maxy\n    if i<root.i or j>root.j or j<i:return True,0,0,0\n    #print(root.i,root.j,root.maxy)\n    mid = (root.i+root.j)//2\n    if mid in range(i,j):\n        lt,llend,lrend,lmaxy = query(root.left,i,mid)\n        rt,rlend,rrend,rmaxy = query(root.right,mid+1,j)\n    elif mid>=j:\n        return query(root.left,i,j)\n        #rt,rlend,rrend,rmaxy = query(root.right,2,0)\n    else:\n        #lt,llend,lrend,lmaxy = query(root.left,2,0)\n        return query(root.right,i,j)\n    #print(lt,llend,lrend,lmaxy,rt,rlend,rrend,rmaxy)\n    lend = llend\n    if not lt:lend+=rlend+1\n    rend = rrend\n    if not rt:rend+=lrend+1\n    maxy = max(lend,rend,lrend+rlend+1,lmaxy,rmaxy)\n    ##print(\"[query]\",i,j,lend,maxy,rend,lt and rt)\n    return (lt or rt),lend,rend,maxy\n    \n        \n    \n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        root = make_tree(0,min(3*len(queries),50000))\n        ans = []\n        #print(root.maxy)\n        for i in range(len(queries)):\n            if queries[i][0]==1:\n                update(root,queries[i][1])\n            else:\n                _,j,sz = queries[i]\n                aa,bb,cc,size = query(root,0,j)\n                ##print(size)\n                ans.append(sz<=size)\n        return ans\n        ",
    "submit_ts": 1716651620.0
}