{
    "username": "suraj_chaudhary2021",
    "submission": "\nfrom collections import defaultdict\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.cost = float('inf')\n        self.end_of_word = False\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n    \n    def insert(self, word, cost):\n        current = self.root\n        for char in word:\n            if char not in current.children:\n                current.children[char] = TrieNode()\n            current = current.children[char]\n        current.end_of_word = True\n        current.cost = min(current.cost, cost)\n    \n    def search_prefix(self, prefix):\n        current = self.root\n        for char in prefix:\n            if char in current.children:\n                current = current.children[char]\n            else:\n                return None\n        return current\n    \n    \nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        \n        trie = Trie()\n        n = len(target)\n\n        # Insert words into Trie\n        for i in range(len(words)):\n            trie.insert(words[i], costs[i])\n\n        # dp array to store minimum costs\n        dp = [float('inf')] * (n + 1)\n        dp[0] = 0\n\n        # Process each position in the target string\n        for i in range(n):\n            if dp[i] == float('inf'):\n                continue  # If it's not possible to form target[:i], skip\n\n            # Traverse Trie to find matching prefixes\n            current = trie.root\n            for j in range(i, n):\n                char = target[j]\n                if char in current.children:\n                    current = current.children[char]\n                    if current.end_of_word:\n                        dp[j + 1] = min(dp[j + 1], dp[i] + current.cost)\n                else:\n                    break\n\n        return dp[n] if dp[n] != float('inf') else -1\n",
    "submit_ts": "1720323765",
    "subm_id": "1312383534"
}