{
    "username": "amey_bhagwatkar",
    "submission": "class Solution {\npublic:\n//     const int MOD = 1e9 + 7;\n//     void add(int &a, int b) {\n//     a = (a + b) % MOD;\n// }\n    const int mod = 1e9 + 7;\n    typedef long long int lli;\n    int numberOfPermutations(int n, vector<vector<int>>& temp) {\n//       sort(requirements.begin(), requirements.end());\n\n//     // DP table initialization\n//     vector<vector<vector<int>>> dp(n + 1, vector<vector<int>>(n * (n - 1) / 2 + 1, vector<int>(requirements.size() + 1, 0)));\n//     dp[0][0][0] = 1; // Base case: 1 way to arrange 0 elements with 0 inversions and 0 requirements satisfied\n\n//     // Build dp table\n//     for (int len = 1; len <= n; ++len) {\n//         for (int inv = 0; inv <= len * (len - 1) / 2; ++inv) {\n//             for (int req = 0; req <= requirements.size(); ++req) {\n//                 if (dp[len - 1][inv][req] == 0) continue;\n//                 for (int k = 0; k < len; ++k) {\n//                     int new_inv = inv + k;\n//                     if (new_inv > len * (len - 1) / 2) break;\n//                     int new_req = req;\n//                     if (new_req < requirements.size() && len - 1 == requirements[new_req][0] && new_inv == requirements[new_req][1]) {\n//                         new_req++;\n//                     }\n//                     add(dp[len][new_inv][new_req], dp[len - 1][inv][req]);\n//                 }\n//             }\n//         }\n//     }\n        unordered_map<int, int> mp;\n        for (const auto& t : temp) {\n            mp[t[0] + 1] = t[1];\n        }\n\n        vector<vector<long>> kart(n + 1, vector<long>(400 + 1, 0));\n        kart[0][0] = 1;\n\n        for (int i = 1; i <= n; i++) {\n            for (int inv = 0; inv <= 400; inv++) {\n                for (int newi = 0; newi < i; newi++) {\n                    int previ = inv - newi;\n                    if (previ >= 0) {\n                        kart[i][inv] = (kart[i][inv] + kart[i - 1][previ]) % mod;\n                    }\n                }\n            }\n\n            if (mp.find(i) != mp.end()) {\n                // int targetj = mp[length];\n                for (int j = 0; j <= 400; j++) {\n                    if (j != mp[i]) kart[i][j] = 0;\n                }\n            }\n        }\n\n        lli finalAns = 0;\n        for (lli count : kart[n]) {\n            finalAns = (finalAns + count) % mod;\n        }\n\n        return (int) finalAns;\n\n//     // Result calculation: sum up all ways to satisfy all requirements at the full length\n//     int result = 0;\n//     for (int inv = 0; inv <= n * (n - 1) / 2; ++inv) {\n//         add(result, dp[n][inv][requirements.size()]);\n//     }\n\n//     return result;\n    }\n};",
    "submit_ts": "1719071113",
    "subm_id": "1296839353"
}