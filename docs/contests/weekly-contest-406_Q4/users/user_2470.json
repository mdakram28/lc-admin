{
    "username": "dishankgarg5",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        std::vector<std::pair<int, char>> cuts;\n    for (int i = 0; i < horizontalCut.size(); ++i) {\n        cuts.push_back({horizontalCut[i], 'H'});\n    }\n    for (int i = 0; i < verticalCut.size(); ++i) {\n        cuts.push_back({verticalCut[i], 'V'});\n    }\n\n    std::sort(cuts.begin(), cuts.end(), std::greater<>());\n\n    long long horizontalPieces = 1;\n    long long verticalPieces = 1;\n    long long totalCost = 0;\n\n    for (const auto& cut : cuts) {\n        int cost = cut.first;\n        char type = cut.second;\n        if (type == 'H') {\n            totalCost += cost * verticalPieces;\n            ++horizontalPieces;\n        } else {\n            totalCost += cost * horizontalPieces;\n            ++verticalPieces;\n        }\n    }\n\n    return totalCost;\n    }\n};",
    "submit_ts": "1720925230",
    "subm_id": "1320247538"
}