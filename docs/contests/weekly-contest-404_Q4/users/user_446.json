{
    "username": "jerry5841314",
    "submission": "class Solution {\npublic:\n    int getDiameter(vector<vector<int>>& edges){\n        int n = edges.size() + 1;\n        vector<vector<int>> edgeList(n);\n        for (auto &e : edges){\n            edgeList[e[0]].push_back(e[1]);\n            edgeList[e[1]].push_back(e[0]);\n        }\n\n        vector<bool> hasVisit(n);\n        vector<int> dis(n, -1);\n        dis[0];\n        queue<int> q;\n        q.push(0);\n        hasVisit[0] = true;\n        int last = -1;\n        while (!q.empty()){\n            int u = q.front();\n            last = u;\n            q.pop();\n            for (int v : edgeList[u]){\n                if (hasVisit[v])\n                    continue;\n                hasVisit[v] = true;\n                dis[v] = dis[u] + 1;\n                q.push(v);\n            }\n        }\n\n        for (int i = 0; i < n; i++){\n            hasVisit[i] = false;\n            dis[i] = -1;\n        }\n        dis[last] = 0;\n        // cout << \" last \" << last << '\\n';\n        q.push(last);\n        hasVisit[last] = true;\n        while (!q.empty()){\n            int u = q.front();\n            last = u;\n            q.pop();\n            for (int v : edgeList[u]){\n                if (hasVisit[v])\n                    continue;\n                hasVisit[v] = true;\n                dis[v] = dis[u] + 1;\n                q.push(v);\n            }\n        }\n        return dis[last];\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = getDiameter(edges1);\n        \n        int d2 = getDiameter(edges2);\n        // cout << d1 << \" \" << d2 << '\\n';\n        return max({(d1 + 1) / 2 + (d2 + 1) / 2 + 1, d1, d2});\n        // return 0; \n    }\n};",
    "submit_ts": 1719718972.0
}