{
    "username": "Swashbuckler12",
    "submission": "class Solution {\npublic:\n  struct LexiconNode { \n    unordered_map<char, LexiconNode*> child;\n    vector<pair<int, int>> wordEndings; \n  };\n\n  class LexiconTrie { \n  public:\n    LexiconNode* root;\n    LexiconTrie() { root = new LexiconNode(); }\n\n    void insertWord(const string& word, int cost, int index) {\n      LexiconNode* node = root;\n      for (auto x : word) {\n        if (!node->child.count(x)){\n            node->child[x] = new LexiconNode();\n            node = node->child[x];\n        }\n        else{\n            node = node->child[x];\n            continue;\n        }\n      }\n      node->wordEndings.push_back({index, cost});\n    }\n  };\n\n  int minimumCost(string targetWord, vector<string>& wordList, vector<int>& costs) {\n    int targetLength = targetWord.size();\n    vector<long long> dp(targetLength + 1, 1e18);\n    dp[0] = 0;\n\n    LexiconTrie trie;\n    for (int i = 0; i < wordList.size(); ++i) {\n      trie.insertWord(wordList[i], costs[i], i);\n    }\n\n    for (int i = 0; i < targetLength; ++i) {\n      if (dp[i] == 1e18) continue;\n\n      LexiconNode* node = trie.root;\n      for (int j = i; j < targetLength; ++j) {\n        if (!node->child.count(targetWord[j])){\n            break;\n        }\n        node = node->child[targetWord[j]];\n        for (auto& p : node->wordEndings) {\n          int wordIndex = p.first;\n          int wordCost = p.second;\n          int wordLength = wordList[wordIndex].size();\n          if (i + wordLength <= targetLength) {\n            dp[i + wordLength] = min(dp[i + wordLength], dp[i] + wordCost);\n          }\n          else{\n              continue;\n          }\n        }\n      }\n    }\n    sort(targetWord.begin(),targetWord.end());\n    sort(wordList.begin(),wordList.end());\n    sort(costs.begin(),costs.end());\n    long long ans=dp[targetLength];\n    if(ans==1e18){\n        return -1;\n    }\n    else{\n        return (int)ans;\n    }\n  }\n};",
    "submit_ts": "1720323598",
    "subm_id": "1312379449"
}