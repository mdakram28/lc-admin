{
    "username": "theobito2034",
    "submission": "struct segtree\n{\n    // change everywhere CHANGE is written\n    int _n;\n    vector<int> tree; // CHANGE\n    vector<int> arr;\n\n    segtree(int nn) : _n(nn) // Initialisation\n    {\n        tree.resize(4 * _n + 8);\n        arr.resize(_n);\n    }\n\n    int combine(int x, int y)\n    {\n        return x + y;\n    }\n\n    // void build(1, 0, _n - 1) DEFAULT\n    void build(int v, int tl, int tr)\n    {\n        assert(tl <= tr);\n        if (tl == tr)\n            tree[v] = arr[tl]; // CHANGE\n        else\n        {\n            int tm = (tl + tr) / 2;\n            build(v * 2, tl, tm);\n            build(v * 2 + 1, tm + 1, tr);\n            tree[v] = combine(tree[v * 2], tree[v * 2 + 1]); // CHANGE\n        }\n    }\n\n    // int sum(1, 0, _n - 1, l, r) DEFAULT\n    int sum(int v, int tl, int tr, int l, int r)\n    {\n        assert(tl <= tr);\n        if (l > r)\n            return 0;\n        if (l == tl && r == tr)\n            return tree[v];\n        int tm = (tl + tr) / 2;\n        return combine(sum(v * 2, tl, tm, l, min(r, tm)), sum(v * 2 + 1, tm + 1, tr, max(l, tm + 1), r)); // CHANGE\n    }\n\n    // void update(1, 0, _n - 1, pos, new_val) DEFAULT\n    void update(int v, int tl, int tr, int pos, int new_val)\n    {\n        assert(tl <= tr);\n        if (tl == tr)\n        {\n            tree[v] = new_val; // Point of updation\n        }\n        else\n        {\n            int tm = (tl + tr) / 2;\n            if (pos <= tm)\n                update(v * 2, tl, tm, pos, new_val);\n            else\n                update(v * 2 + 1, tm + 1, tr, pos, new_val);\n            tree[v] = combine(tree[v * 2], tree[v * 2 + 1]); // CHANGE\n        }\n    }\n};\n\nclass Solution {\npublic:\n    vector<int> countOfPeaks(vector<int>& nums, vector<vector<int>>& queries) \n    {\n        int n = nums.size();\n        segtree tr(n);\n        for(int i = 1;i < n - 1;i++)\n        {\n            tr.arr[i] = (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n        }\n        tr.build(1,0,n-1);\n        vector<int> ans;\n        for(auto it : queries)\n        {\n            if(it[0] == 2)\n            {\n                nums[it[1]] = it[2];\n                for(int i = max(1,it[1] - 1);i <= min(n - 2, it[1] + 1);i++)\n                {\n                    int x = (nums[i] > nums[i-1] && nums[i] > nums[i+1]);\n                    tr.update(1,0,n-1,i,x);\n                }\n            }\n            else\n            {\n                ans.push_back(tr.sum(1,0,n-1,it[1] + 1,it[2] - 1));\n            }\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1718508941",
    "subm_id": "1289695188"
}