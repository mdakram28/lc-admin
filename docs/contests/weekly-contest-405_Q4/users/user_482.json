{
    "username": "Acube679",
    "submission": "\nclass TrieNode {\npublic:\n    map<char, TrieNode*> children;\n    vector<pair<int, int>> words;\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int cost, int wordIndex) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (!node->children.count(c)) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->words.push_back({wordIndex, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<int> dp(n + 1, INT_MAX); \n        dp[n] = 0; \n\n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i], words[i].size());\n        }\n\n        int result = helper(target, trie.root, 0, dp);\n        return result == INT_MAX ? -1 : result;\n    }\n\nprivate:\n    int helper(const string& target, TrieNode* root, int index, vector<int>& dp) {\n        if (dp[index] != INT_MAX) {\n            return dp[index];\n        }\n\n        TrieNode* node = root;\n        int minCost = INT_MAX;\n        for (int j = index; j < target.size(); ++j) {\n            if (!node->children.count(target[j])) break;\n            node = node->children[target[j]];\n            for (const auto& [wordIndex, cost] : node->words) {\n                int nextCost = helper(target, root, j + 1, dp);\n                if (nextCost != INT_MAX) {\n                    minCost = min(minCost, nextCost + cost);\n                }\n            }\n        }\n\n        dp[index] = minCost;\n        return minCost;\n    }\n};\n",
    "submit_ts": "1720322246",
    "subm_id": "1312344689"
}