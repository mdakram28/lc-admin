{
    "username": "vvizardly-heyrovsky",
    "submission": "\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        seg_tree = SegmentTree(nums)\n        answer = []\n        for q in queries:\n            if q[0] == 1:\n                li, ri = q[1], q[2]\n                answer.append(seg_tree.query(0, 0, seg_tree.n - 1, li + 1, ri - 1))\n            elif q[0] == 2:\n                index, val = q[1], q[2]\n                seg_tree.update(index, val)\n        return answer\n        \n        \n        \n        \nclass SegmentTree:\n    def __init__(self, nums):\n        self.n = len(nums)\n        self.nums = nums\n        self.tree = [0] * (4 * self.n)\n        self.build(nums, 0, 0, self.n - 1)\n\n    def build(self, nums, node, start, end):\n        if start == end:\n            self.tree[node] = self.is_peak(nums, start)\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(nums, left_child, start, mid)\n            self.build(nums, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def is_peak(self, nums, idx):\n        if idx == 0 or idx == len(nums) - 1:\n            return 0\n        return 1 if nums[idx] > nums[idx - 1] and nums[idx] > nums[idx + 1] else 0\n\n    def update(self, idx, val):\n        # \u66f4\u65b0 nums \u6570\u7ec4\n        self.nums[idx] = val\n\n        # \u66f4\u65b0\u5f53\u524d\u5143\u7d20\u4ee5\u53ca\u76f8\u90bb\u5143\u7d20\u7684\u5cf0\u503c\u72b6\u6001\n        for i in range(idx - 1, idx + 2):\n            if 0 < i < self.n:\n                self.update_peak(i, 0, 0, self.n - 1)\n\n    def update_peak(self, idx, node, start, end):\n        if start == end:\n            self.tree[node] = self.is_peak(self.nums, idx)\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update_peak(idx, left_child, start, mid)\n            else:\n                self.update_peak(idx, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, node, start, end, L, R):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query(left_child, start, mid, L, R)\n        right_query = self.query(right_child, mid + 1, end, L, R)\n        return left_query + right_query",
    "submit_ts": "1718508644",
    "subm_id": "539788534"
}