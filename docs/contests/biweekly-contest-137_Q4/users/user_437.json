{
    "username": "feetmode",
    "submission": "typedef long long ll;\ntypedef vector<pair<int, int>> vpii;\ntypedef vector<pair<int, ll>> vpil;\ntypedef vector<pair<ll, ll>> vpll;\ntypedef vector<int> vi;\ntypedef vector<ll> vll;\ntypedef vector<bool> vb;\ntypedef vector<vector<int>> vvi;\ntypedef vector<vector<ll>> vvll;\ntypedef pair<int, int> pii;\ntypedef pair<int, ll> pil;\ntypedef pair<ll, ll> pll;\n\ntemplate <class T>\nvoid print_vec(vector<T> &v, string name = \"\") {\n    if (name != \"\") cout << name << endl;\n    for (auto a : v) cout << a << \" \";\n    cout << endl;\n}\n\ntemplate <class T>\nvoid print_grid(vector<vector<T>> &grid, string name = \"\") {\n    if (name != \"\") cout << name << endl;\n    int n = grid.size(), i;\n    for (i = 0; i < n; ++i){\n        for (auto a : grid[i]) cout << a << \" \";\n        cout << endl;\n    }\n}\n\nclass Solution {\npublic:\n    ll find_cur_max(vector<vvi>& grid, int x1, int x2, int y) {\n        int i, j;\n        ll ans = LLONG_MIN;\n        for (i = 0; i < 3; ++i) {\n            for (j = 0; j < 3; ++j) {\n                if (grid[x1][i][1] == grid[x2][j][1] || grid[x1][i][1] == y || grid[x2][j][1] == y) continue;\n                // cout << \"cand: \" << i << \" \" << j << \" \" << grid[x1][i][1] << \" \" << grid[x2][j][1] << \" \" << grid[x1][i][0] << \" \" << grid[x2][j][0] << endl;\n                \n                ans = max(ans, 1ll * grid[x1][i][0] + 1ll * grid[x2][j][0]);\n            }\n        }\n        return ans;\n    }\n\n    long long maximumValueSum(vector<vector<int>>& board) {\n        int n = board.size(), m = board[0].size(), i, j, k;\n        ll ans = LLONG_MIN;\n\n        vector<vvi> grid(n);\n        for (i = 0; i < n; ++i) {\n            // cout << \"i: \" << i << endl;\n            vvi vv;\n            for (j = 0; j < m; ++j) vv.push_back({board[i][j], j});\n            sort(vv.begin(), vv.end(), greater<vi>());\n            vv.resize(3);\n            grid[i] = vv;\n            assert(grid[i].size() == 3);\n            // print_grid(vv, \"vv\");\n            // cout << endl;\n        }\n        \n        vvi v_tmp;\n        for (i = 0; i < n; ++i) v_tmp.push_back({grid[i][0][0], grid[i][0][1], i});\n        sort(v_tmp.begin(), v_tmp.end(), greater<vi>());\n        // print_grid(v_tmp, \"v_tmp\");\n        vi v_ind = vi{v_tmp[0][2], v_tmp[1][2], v_tmp[2][2]};\n        // print_vec(v_ind, \"v_ind\");\n\n        for (auto ind : v_ind) {\n            // cout << \"ind: \" << ind << endl;\n            for (j = 0; j < n; ++j) {\n                if (j == ind) continue;\n                for (k = j + 1; k < n; ++k) {\n                    if (k == ind) continue;\n                    // cout << \"ind jk: \" << j << \" \" << k << \" \" << grid[ind][0][0] << \" \" << grid[ind][0][1] << endl;\n                    ll cur_max = find_cur_max(grid, j, k, grid[ind][0][1]);\n                    // cout << \"max: \" << 1ll * grid[ind][0][0] + cur_max << endl;\n                    ans = max(ans, 1ll * grid[ind][0][0] + cur_max);\n                }\n            }\n            // cout << endl;\n        }\n\n        return ans;\n    }\n};",
    "submit_ts": "1723909768",
    "subm_id": "1359205064"
}