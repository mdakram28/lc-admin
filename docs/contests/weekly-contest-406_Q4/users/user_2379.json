{
    "username": "abdullah_quantum",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n     // Combine cuts with their types\n    vector<pair<int, char>> cuts;\n    cuts.reserve(horizontalCut.size() + verticalCut.size());\n    for (int i = 0; i < horizontalCut.size(); ++i) {\n        cuts.push_back({horizontalCut[i], 'H'});\n    }\n    for (int j = 0; j < verticalCut.size(); ++j) {\n        cuts.push_back({verticalCut[j], 'V'});\n    }\n\n    // Sort cuts by cost in descending order\n    sort(cuts.rbegin(), cuts.rend());\n\n    int h_pieces = 1; // initially, there is 1 horizontal piece\n    int v_pieces = 1; // initially, there is 1 vertical piece\n    long long total_cost = 0; // Use long long to handle large costs\n\n    // Process each cut\n    for (auto& cut : cuts) {\n        if (cut.second == 'H') {\n            total_cost += static_cast<long long>(cut.first) * v_pieces; // cost multiplied by current vertical pieces\n            ++h_pieces;\n        } else {\n            total_cost += static_cast<long long>(cut.first) * h_pieces; // cost multiplied by current horizontal pieces\n            ++v_pieces;\n        }\n    }\n\n    return total_cost;   \n    }\n};",
    "submit_ts": "1720926785",
    "subm_id": "1320296279"
}