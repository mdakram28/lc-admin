{
    "username": "BurgerDragon",
    "submission": "inf = 1000\nclass Solution:\n    def minimumArea(self, grid, min_row, max_row, min_col, max_col):\n        min_r, max_r = inf, -inf\n        min_c, max_c = inf, -inf\n        \n        for i in range(min_row, max_row):\n            for j in range(min_col, max_col):\n                if grid[i][j] == 1:\n                    min_r = min(min_r, i)\n                    max_r = max(max_r, i)\n                    min_c = min(min_c, j)\n                    max_c = max(max_c, j)\n        \n        if min_r == inf or min_c == inf:\n            return 0  # No 1's in this section\n        \n        height = max_r - min_r + 1\n        width = max_c - min_c + 1\n        return height * width\n    \n    def minimumSum(self, grid):\n        n = len(grid)\n        m = len(grid[0])\n        res = inf\n        \n        for end_x in range(1, n):\n            for end_y in range(1, m):\n                # First rectangle\n                one_res = self.minimumArea(grid, 0, end_x, 0, end_y)\n                \n                # Considering next combinations for the other two rectangles\n                top_area = self.minimumArea(grid, end_x, n, 0, m)\n                right_area = self.minimumArea(grid, 0, end_x, end_y, m)\n                \n                bottom_area = self.minimumArea(grid, end_x, n, 0, end_y)\n                left_area = self.minimumArea(grid, 0, n, end_y, m)\n                \n                # Two possible combinations of the remaining rectangles\n                two_res = min(top_area + right_area, bottom_area + left_area)\n                \n                res = min(res, one_res + two_res)\n                \n        # Consider parallel splits x-axis and y-axis\n        for x_1 in range(1, n-1):\n            for x_2 in range(x_1+1, n):\n                top = self.minimumArea(grid, 0, x_1, 0, m)\n                mid = self.minimumArea(grid, x_1, x_2, 0, m)\n                bottom = self.minimumArea(grid, x_2, n, 0, m)\n            # top = self.minimumArea(grid, 0, end_x, 0, m)\n            # mid = self.minimumArea(grid, end_x, end_x+1, 0, m)\n            # bottom = self.minimumArea(grid, end_x+1, n, 0, m)\n                res = min(res, top + mid + bottom)\n        for y_1 in range(1, m-1):\n            for y_2 in range(y_1+1, m):\n                left = self.minimumArea(grid, 0, n, 0, y_1)\n                mid = self.minimumArea(grid, 0, n, y_1, y_2)\n                right = self.minimumArea(grid, 0, n, y_2, m)\n                res = min(res, left + mid + right)\n        # for end_y in range(1, m-1):\n        #     left = self.minimumArea(grid, 0, n, 0, end_y)\n        #     mid = self.minimumArea(grid, 0, n, end_y, end_y + 1)\n        #     right = self.minimumArea(grid, 0, n, end_y + 1, m)\n        #     res = min(res, left + mid + right)\n        \n        # Case when one rectangle is [0:end_x][:] and other two rect split horizontal generating combinations\n        for end_x in range(1, n-1):\n            for split in range(1, m):\n                top = self.minimumArea(grid, 0, end_x, 0, m)\n                bottom_left = self.minimumArea(grid, end_x, n, 0, split)\n                bottom_right = self.minimumArea(grid, end_x, n, split, m)\n                res = min(res, top + bottom_left + bottom_right)\n        \n        # Case when one rectangle is [end_x:n][:] and other two rect split horizontal \n        for end_x in range(1, n-1):\n            for split in range(1, m):\n                bottom = self.minimumArea(grid, end_x, n, 0, m)\n                top_left = self.minimumArea(grid, 0, end_x, 0, split)\n                top_right = self.minimumArea(grid, 0, end_x, split, m)\n                res = min(res, bottom + top_left + top_right)\n        \n        # Case when one rectangle is [:][0:end_y] and other two rect split vertical \n        for end_y in range(1, m-1):\n            for split in range(1, n):\n                left = self.minimumArea(grid, 0, n, 0, end_y)\n                top_right = self.minimumArea(grid, 0, split, end_y, m)\n                bottom_right = self.minimumArea(grid, split, n, end_y, m)\n                res = min(res, left + top_right + bottom_right)\n        \n        # Case when one rectangle is [:][end_y:m] and other two rect split vertical \n        for end_y in range(1, m-1):\n            for split in range(1, n):\n                right = self.minimumArea(grid, 0, n, end_y, m)\n                bottom_left = self.minimumArea(grid, split, n, 0, end_y)\n                top_left = self.minimumArea(grid, 0, split, 0, end_y)\n                res = min(res, right + bottom_left + top_left)\n        \n        return res",
    "submit_ts": 1719114764.0
}