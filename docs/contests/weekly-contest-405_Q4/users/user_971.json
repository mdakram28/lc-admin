{
    "username": "incognito123",
    "submission": "struct node {\n    map<char, node*> next;\n    vector<pair<int, int>> word_indices;\n};\n\nclass Trie {\npublic:\n    node* root;\n\n    Trie() {\n        root = new node();\n    }\n\n    void insert(const string& word, int index, int cost) {\n        node* temp = root;\n        for (char ch : word) {\n            if (!temp->next.count(ch)) {\n                temp->next[ch] = new node();\n            }\n            temp = temp->next[ch];\n        }\n        temp->word_indices.push_back({index, cost});\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.length();\n        int m = words.size();\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0;\n\n        Trie trie;\n        for (int i = 0; i < m; i++) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        for (int i = 0; i < n; i++) {\n            if (dp[i] == INT_MAX) continue;\n            node* node = trie.root;\n            for (int j = i; j < n; j++) {\n                if (!node->next.count(target[j])) break;\n                node = node->next[target[j]];\n                for (const auto& [index, cost] : node->word_indices) {\n                    int new_pos = j + 1;\n                    dp[new_pos] = min(dp[new_pos], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720322881",
    "subm_id": "1312361542"
}