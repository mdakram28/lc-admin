{
    "username": "qu1ck",
    "submission": "class BIT:\n    def __init__(self, n):\n        self.maxn = n+5\n        self.data = [0]*self.maxn\n        \n    def add(self, i, v):\n        i += 1\n        while i < self.maxn:\n            self.data[i] += v\n            i += i & -i\n            \n    def get(self, i):\n        i += 1\n        ans = 0\n        while i:\n            ans += self.data[i]\n            i -= i & -i\n        return ans\n    \nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        bit = BIT(n)\n        peaks = [0]*n\n        for i in range(1,n-1):\n            if nums[i] > nums[i-1] and nums[i] > nums[i+1]:\n                peaks[i] = 1\n                bit.add(i, 1)\n        ans = []\n        for q, i, j in queries:\n            if q == 1:\n                if j > i+1:\n                    ans.append(bit.get(j-1) - bit.get(i))\n                else:\n                    ans.append(0)\n            else:\n                nums[i] = j\n                for d in [i-1, i, i+1]:\n                    if d > 0 and d < n-1:\n                        if nums[d] > nums[d-1] and nums[d] > nums[d+1]:\n                            if peaks[d] == 0:\n                                bit.add(d, 1)\n                            peaks[d] = 1\n                        else:\n                            if peaks[d] == 1:\n                                bit.add(d, -1)\n                            peaks[d] = 0\n        return ans\n        ",
    "submit_ts": 1718507490.0
}