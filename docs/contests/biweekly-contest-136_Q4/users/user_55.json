{
    "username": "profchi",
    "submission": "class Solution {\n    List<Integer> [] graph;\n    \n    int [] score;\n    int [] res;\n    \n    public int[] timeTaken(int[][] edges) {\n        \n        int n = edges.length + 1;\n        \n        graph = new List[n];\n        score = new int [n];\n        res = new int [n];\n        \n        for (int i = 0; i < n; ++i) {\n            graph[i] = new ArrayList<>();\n        }\n        \n        int u, v;\n        \n        for (int [] edge : edges) {\n            u = edge[0];\n            v = edge[1];\n            \n            graph[u].add(v);\n            graph[v].add(u);\n        }\n        \n        dfs(0, -1);\n        dfs2(0, -1, 0);\n        \n       // System.out.println(Arrays.toString(score));\n        \n        return res;\n    }\n    \n    // maxTime Excludes Child\n    private void dfs2(int node, int parent, int maxTime) {\n        int result = 0;\n        int time;\n        \n        int parentTime = node % 2 == 0 ? 2 : 1;\n        \n        int [] max = new int [2];\n        \n        res[node] = Math.max(maxTime, score[node]);\n        \n        \n        for (int child : graph[node]) {\n            if (child == parent)\n                continue;\n            \n            int val = score[child];\n            val += child % 2 == 0 ? 2 : 1;\n            if (val > max[0]) {\n                max[1] = max[0];\n                max[0] = val;\n            }else if (val > max[1]) {\n                max[1] = val;\n            }\n        }\n        \n        int maxOther;\n        \n        int newTime;\n        \n        for (int child : graph[node]) {\n            if (child == parent)\n                continue;\n            \n            int val = score[child];\n            val += child % 2 == 0 ? 2 : 1;\n            maxOther = val == max[0] ? max[1] : max[0];\n            \n            newTime = Math.max(maxTime, maxOther);\n            newTime += parentTime;\n            \n            dfs2(child, node, newTime);\n        }\n    }\n    \n    // time taken for children when marked 0\n    private void dfs(int node, int parent) {\n        \n        int result = 0;\n        int time;\n        \n        for (int child : graph[node]) {\n            if (child == parent)\n                continue;\n            \n            dfs(child, node);\n            \n            time = score[child];\n            time += child % 2 == 0 ? 2 : 1;\n            \n            result = Math.max(result, time);\n        }\n        \n        score[node] = result;\n    }\n}",
    "submit_ts": "1722698014",
    "subm_id": "1343166770"
}