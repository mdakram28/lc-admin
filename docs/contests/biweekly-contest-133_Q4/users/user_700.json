{
    "username": "phantomarlex",
    "submission": "/**\n * @param {number} veggieCount\n * @param {number[][]} veggieRequests\n * @return {number}\n */\nfunction numberOfPermutations(chimpCount, bananaWishes) {\n    const CHIMP_MOD = 1000000007;\n    const MAX_CHIMP_CHAOS = 400;\n\n    // Prepare banana wishes map\n    const wishMap = {};\n    for (const banana of bananaWishes) {\n        wishMap[banana[0] + 1] = banana[1];\n    }\n\n    // DP table to count permutations with a given number of chaos up to position `chimpLength`\n    const chimpCounts = Array.from({ length: chimpCount + 1 }, () => Array(MAX_CHIMP_CHAOS + 1).fill(0));\n    chimpCounts[0][0] = 1;\n\n    // Iterating through the chimp lengths and banana chaos\n    for (let chimpLength = 1; chimpLength <= chimpCount; chimpLength++) {\n        for (let chaos = 0; chaos <= MAX_CHIMP_CHAOS; chaos++) {\n            for (let newPos = 0; newPos < chimpLength; newPos++) {\n                const prevChaos = chaos - newPos;\n                if (prevChaos >= 0) {\n                    chimpCounts[chimpLength][chaos] = (chimpCounts[chimpLength][chaos] + chimpCounts[chimpLength - 1][prevChaos]) % CHIMP_MOD;\n                }\n            }\n        }\n\n        // Apply the banana logic\n        if (wishMap[chimpLength] !== undefined) {\n            const targetChaos = wishMap[chimpLength];\n            for (let chaos = 0; chaos <= MAX_CHIMP_CHAOS; chaos++) {\n                if (chaos !== targetChaos) {\n                    chimpCounts[chimpLength][chaos] = 0;\n                }\n            }\n        }\n    }\n\n    // Sum up all valid permutations\n    let result = 0;\n    for (let chaos = 0; chaos <= MAX_CHIMP_CHAOS; chaos++) {\n        result = (result + chimpCounts[chimpCount][chaos]) % CHIMP_MOD;\n    }\n\n    return result;\n}",
    "submit_ts": "1719070709",
    "subm_id": "1296829810"
}