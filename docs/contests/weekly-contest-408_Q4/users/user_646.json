{
    "username": "ArjavBarya0809",
    "submission": "class Solution {\npublic:\nbool isPathPossible(int X, int Y, vector<vector<int>>& circles) {\n        int numCircles = circles.size();\n        vector<vector<int>> graph(numCircles + 4);\n\n        for (int i = 0; i < numCircles; i++) {\n            if (circles[i][0] <= circles[i][2]) {\n                graph[numCircles].push_back(i);\n                graph[i].push_back(numCircles);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                graph[numCircles + 2].push_back(i);\n                graph[i].push_back(numCircles + 2);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                graph[numCircles + 1].push_back(i);\n                graph[i].push_back(numCircles + 1);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                graph[numCircles + 3].push_back(i);\n                graph[i].push_back(numCircles + 3);\n            }\n            for (int j = i + 1; j < numCircles; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radiusSum = circles[i][2] + circles[j][2];\n                if (radiusSum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n\n        bool isBlocked = bfs(graph, numCircles, numCircles + 1, numCircles + 2, numCircles + 4) ||\n                         bfs(graph, numCircles + 3, numCircles + 2, numCircles + 1, numCircles + 4);\n\n        return !isBlocked;\n    }\n\n    bool bfs(vector<vector<int>>& graph, int start, int target1, int target2, int totalNodes) {\n        queue<int> q;\n        vector<bool> visited(totalNodes, false);\n\n        q.push(start);\n        visited[start] = true;\n\n        while (!q.empty()) {\n            int current = q.front();\n            q.pop();\n\n            for (int neighbor : graph[current]) {\n                if (!visited[neighbor]) {\n                    q.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return isPathPossible(X, Y, circles);\n    }\n\n    \n};",
    "submit_ts": "1722138456",
    "subm_id": "1335791233"
}