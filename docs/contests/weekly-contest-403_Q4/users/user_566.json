{
    "username": "Satj",
    "submission": "\nclass Solution {\npublic:\n    int l[30][30][30][30];\n    int r[30][30][30][30];\n    int u[30][30][30][30];\n    int d[30][30][30][30];\n    int inf = 1e6;\n    int dfs(int i, int j, int k, int t, int p) {\n        if (p == 2) {\n            if (r[i][j][k][t] < l[i][j][k][t])\n                return 0;\n            if (d[i][j][k][t] < u[i][j][k][t])\n                return 0;\n//             cout << i << \" \" << j << \" \" << k << \" \" << t << endl;\n            \n//             cout << (r[i][j][k][t] - l[i][j][k][t] + 1) * (d[i][j][k][t] - u[i][j][k][t] + 1) << endl;\n            return (r[i][j][k][t] - l[i][j][k][t] + 1) * (d[i][j][k][t] - u[i][j][k][t] + 1);\n        }\n        int ret = inf;\n        for (int o = i; o < k; o++) \n            ret = min({ret, dfs(i, j, o, t, 2) + dfs(o + 1, j, k, t, p + 1), dfs(i, j, o, t, p + 1) + dfs(o + 1, j, k, t, 2)});\n        for (int o = j; o < t; o++)\n            ret = min({ret, dfs(i, j, k, o, 2) + dfs(i, o + 1, k, t, p + 1), dfs(i, j, k, o, p + 1) + dfs(i, o + 1, k, t, 2)});\n        return ret;\n    }\n    int minimumSum(vector<vector<int>>& a) {\n        int n = a.size(), m = a[0].size();\n        memset(r, -1, sizeof(r));\n        memset(d, -1, sizeof(d));\n        // init\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = i; k < n; k++) {\n                    for (int t = j; t < m; t++) {\n                        l[i][j][k][t] = m;\n                        u[i][j][k][t] = n;\n                    }\n                }\n            }\n        }\n        \n        // precompute\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                for (int k = i; k < n; k++) {\n                    for (int t = j; t < m; t++) {\n                        \n                        l[i][j][k][t] = min((j < t ? l[i][j][k][t - 1] : m ), (i < k ?  l[i][j][k - 1][t] : m));\n                        r[i][j][k][t] = max((j < t ? r[i][j][k][t - 1] : -1), (i < k ?  r[i][j][k - 1][t] : -1));\n                        \n                        u[i][j][k][t] = min((j < t ? u[i][j][k][t - 1] : n ), (i < k ?  u[i][j][k - 1][t] : n));\n                        d[i][j][k][t] = max((j < t ? d[i][j][k][t - 1] : -1), (i < k ?  d[i][j][k - 1][t] : -1));\n                        \n                        if (a[k][t]) {\n                            r[i][j][k][t] = t;\n                            d[i][j][k][t] = k;\n                            l[i][j][k][t] = min(l[i][j][k][t], t);\n                            u[i][j][k][t] = min(u[i][j][k][t], k);\n                        }\n                    }\n                }\n            }\n        }\n        \n        return dfs(0, 0, n - 1, m - 1, 0);\n    }\n};",
    "submit_ts": 1719113623.0
}