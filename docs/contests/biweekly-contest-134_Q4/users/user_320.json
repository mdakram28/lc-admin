{
    "username": "Megatvini",
    "submission": "class Solution:\n    def countSubarrays(self, nums: List[int], k: int) -> int:\n        groups = []\n        cur = []\n        for num in nums:\n            if num & k == k:\n                cur.append(num)\n            else:\n                if cur:\n                    groups.append(cur)\n                cur = []\n        if cur:\n            groups.append(cur)\n\n        def count_subarrays(arr):\n            res = 0\n            # for each i-th bit, save the latest index with ith bit set to 0\n            # we can start the subarray any place before (inclusive)\n            num_bits = max(arr).bit_length()\n            latest_zero_bit = [-1] * num_bits\n            for index, num in enumerate(arr):\n                for bit_index in range(num_bits):\n                    if k & (1 << bit_index):\n                        latest_zero_bit[bit_index] = index\n                    elif not (num & (1 << bit_index)):\n                        latest_zero_bit[bit_index] = index\n                if -1 not in latest_zero_bit:\n                    res += min(latest_zero_bit) + 1\n            return res\n\n        # print(f'{groups=}')\n        return sum(count_subarrays(group) for group in groups)\n",
    "submit_ts": "1720278866",
    "subm_id": "1311727597"
}