{
    "username": "Ansh Goel",
    "submission": "class Solution:\n    def __init__(self):\n        self.ans = float('-inf')\n    \n    def maximumValueSum(self, board):\n        n = len(board)\n        top_idx = [[-1, -1, -1] for _ in range(n)]\n\n        \n        for i in range(n):\n            row = board[i]\n            first, second, third = float('-inf'), float('-inf'), float('-inf')\n            f_idx, s_idx, t_idx = -1, -1, -1\n\n            for j, value in enumerate(row):\n                if value > first:\n                    third, t_idx = second, s_idx\n                    second, s_idx = first, f_idx\n                    first, f_idx = value, j\n                elif value > second:\n                    third, t_idx = second, s_idx\n                    second, s_idx = value, j\n                elif value > third:\n                    third, t_idx = value, j\n\n            top_idx[i][0] = f_idx\n            top_idx[i][1] = s_idx\n            top_idx[i][2] = t_idx\n\n        self.solve(0, board, set(), 0, 0, top_idx)\n        return self.ans\n\n    def solve(self, i, board, visited, count, curr_sum, top_idx):\n        n = len(board)\n        if i == n:\n            return\n\n        for j in range(3):\n            col = top_idx[i][j]\n            if col in visited:\n                continue\n            \n            value = board[i][col]\n            if count == 2:\n                self.ans = max(self.ans, curr_sum + value)\n            else:\n                visited.add(col)\n                self.solve(i + 1, board, visited, count + 1, curr_sum + value,top_idx)\n                visited.remove(col)\n\n        self.solve(i + 1, board, visited, count, curr_sum, top_idx)\n",
    "submit_ts": "1723908509",
    "subm_id": "1359155633"
}