{
    "username": "wcq_txdy",
    "submission": "using ll = long long;\nstruct Segtree\n{\n    vector<ll> stArr;\n    ll N;\n    Segtree(ll n)\n    {\n        stArr.clear();\n        N = n;\n        stArr.resize((N + 5) * 2);\n    }\n\n    void assign(ll index, ll val)\n    {\n        index += N;\n        stArr[index] = val;\n    }\n\n    ll join(ll a, ll b)\n    {\n        return max(a, b);\n    }\n    void buildTree()\n    {\n        for (ll i = N - 1; i >= 1; i--)\n        {\n            stArr[i] = join(stArr[2 * i], stArr[2 * i + 1]);\n        }\n    }\n    void update(ll index, ll val)\n    {\n        index += N;\n        stArr[index] = val;\n        index /= 2;\n        while (index >= 1)\n        {\n            stArr[index] = join(stArr[index * 2], stArr[index * 2 + 1]);\n            index /= 2;\n        }\n    }\n\n    ll query(ll l, ll r)\n    {\n        l += N;\n        r += N;\n        ll ans = 0;\n        while (l <= r)\n        {\n            if (l & 1)\n            {\n                ans = join(ans, stArr[l]);\n                l++;\n            }\n            if (r % 2 == 0)\n            {\n                ans = join(ans, stArr[r]);\n                r--;\n            }\n            l /= 2, r /= 2;\n        }\n        return ans;\n    }\n};\n\nclass Solution {\npublic:\n    vector<bool> getResults(vector<vector<int>>& queries) {\n        vector<bool> ans;\n        set<int> pos;\n        for(vector<int> v : queries)\n        {\n            if(v[0] == 1)\n            {\n               pos.insert(v[1]); \n            }\n        }\n        pos.insert(5e4+3);\n        Segtree st(5e4+5);\n        pos.insert(0);\n        auto it = pos.begin();\n        int last = 0;\n        while(it != pos.end())\n        {\n            int dist = *it-last;\n            st.assign(*it, dist);\n            last = *it;\n            it++;\n        }\n        st.buildTree();\n        reverse(queries.begin(), queries.end());\n        for(vector<int> v : queries)\n        {\n            if(v[0] == 1)\n            {\n                auto it = pos.lower_bound(v[1]);\n                auto it2 = prev(it), it3 = next(it);\n                pos.erase(it);\n                int d = *it3-*it2;\n                st.update(*it3, d);\n            }\n            else {\n                auto it = pos.lower_bound(v[1]);\n                it--;\n                ll d = v[1] - *it;\n                d = max(d, st.query(0LL, *it));\n                if(d >= v[2])\n                {\n                    ans.push_back(true);\n                }\n                else {\n                    ans.push_back(false);\n                }\n            }\n        }\n        reverse(ans.begin(), ans.end());\n        return ans;\n    }\n};",
    "submit_ts": 1716650276.0
}