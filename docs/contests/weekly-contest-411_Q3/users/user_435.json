{
    "username": "ProgramCaiCai",
    "submission": "sys.set_int_max_str_digits(10**7)\nclass Solution:\n    def largestPalindrome(self, n: int, k: int) -> str:\n\n        if k==1:\n            return '9'*n\n        if n==1:\n            for i in range(9,0,-1):\n                if i%k==0:\n                    return str(i)\n\n        \n        max_half = int('9' * ((n + 1) // 2))  # largest possible first half\n        lower_bound = 10**(n // 2 - 1)        # smallest possible first half\n        \n        max_half_str = list(str(max_half))\n        if len(max_half_str)>=3:\n            if k==2:\n                max_half_str[0]='8'\n            elif k==4:\n                max_half_str[0]='8'\n                max_half_str[1]='8'\n            elif k==6:\n                max_half_str[0]='8'\n            elif k==8:\n                max_half_str[0]='8'\n                max_half_str[1]='8'\n                max_half_str[2]='8'\n            elif k==5:\n                max_half_str[0]='5'\n\n\n            max_half = int(''.join(max_half_str))\n\n\n\n        for half in range(max_half, lower_bound - 1, -1):\n            # Create a palindrome by mirroring the half\n            if n % 2 == 0:\n                pal_str = str(half) + str(half)[::-1]\n            else:\n                pal_str = str(half) + str(half)[:-1][::-1]\n            \n            pal_num = int(pal_str)\n            \n            # Check divisibility by k\n            if pal_num % k == 0:\n                return pal_str\n        \n        # If no palindrome is found (unlikely given the problem constraints), return an empty string\n        return \"\"\n\nsol = Solution()\n\n",
    "submit_ts": "1723952124",
    "subm_id": "556409729"
}