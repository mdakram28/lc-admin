{
    "username": "still_beginner",
    "submission": "class Solution {\n    public int[] shortestDistanceAfterQueries(int n, int[][] queries) {\n        TreeMap<Integer, Integer> tmp = new TreeMap<>();\n        int path = n - 1;\n        int m = queries.length;\n        int[] ans = new int[m];\n        for(int i = 0; i < m; i++) {\n            int u = queries[i][0], v = queries[i][1];\n            if(!tmp.containsKey(u)) {\n                Integer higherU = tmp.higherKey(u);\n                Integer lowerU = tmp.lowerKey(u);\n                if((higherU == null || higherU >= v) && (lowerU == null || tmp.get(lowerU) <= u)) {\n                    ans[i] = path - (v - u) + 1;\n                    path -= (v - u);\n                    path++;\n                    tmp.put(u, v);\n                } else if(higherU != null && tmp.get(higherU) <= v) {\n                    path += (tmp.get(higherU) - higherU - 1);\n                    tmp.remove(higherU);\n                    ans[i] = path - (v - u) + 1;\n                    path -= (v - u);\n                    path++;\n                    tmp.put(u, v);\n                } else if(lowerU != null && tmp.get(lowerU) >= v) {\n                    ans[i] = path;\n                }\n            } else {\n                if(v <= tmp.get(u)) ans[i] = path;\n                else {\n                    Integer higherU = tmp.ceilingKey(u);\n                    while(higherU != null && higherU < v) {\n                        path += (tmp.get(higherU) - higherU - 1);\n                        tmp.remove(higherU);\n                        higherU = tmp.higherKey(u);\n                    }\n                    path -= (v - u);\n                    path++;\n                    ans[i] = path;\n                    tmp.put(u, v);\n                }\n            }\n        }\n        return ans;\n    }\n}",
    "submit_ts": "1722742998",
    "subm_id": "1343781958"
}