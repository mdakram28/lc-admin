{
    "username": "Shadow_Monarch007",
    "submission": "class Solution {\npublic:\n    struct TNode {\n        unordered_map<char, TNode*> children;\n        vector<pair<int, int>> wrdLst;\n    };\n\n    class okTrie {\n    public:\n        TNode* root;\n        okTrie() { root = new TNode(); }\n        void insertWord(const string& word, int wrdIdx, int wrdCst) {\n            TNode* node = root;\n            for (char ch : word) {\n                if (!node->children.count(ch))\n                    node->children[ch] = new TNode();\n                node = node->children[ch];\n            }\n            node->wrdLst.emplace_back(wrdIdx, wrdCst);\n        }\n    };\n\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLen = target.size();\n        vector<int> minC(targetLen + 1, INT_MAX);\n        minC[0] = 0;\n        okTrie oktrie;\n        for (int idx = 0; idx < words.size(); ++idx) oktrie.insertWord(words[idx], idx, costs[idx]);\n        for (int loop_idx = 0; loop_idx < targetLen; ++loop_idx) {\n            if (minC[loop_idx] == INT_MAX) continue;\n            TNode* node = oktrie.root;\n            for (int end = loop_idx; end < targetLen; ++end) {\n                if (!node->children.count(target[end])) break;\n                node = node->children[target[end]];\n                for (const auto& p : node->wrdLst) {\n                    int wrdIdx = p.first;\n                    int wrdCst = p.second;\n                    int wordLength = words[wrdIdx].size();\n                    if (loop_idx + wordLength <= targetLen) minC[loop_idx + wordLength] = min(minC[loop_idx + wordLength], minC[loop_idx] + wrdCst);\n                }\n            }\n        }\n        return (minC[targetLen] == INT_MAX) ? -1 : minC[targetLen];\n    }\n};",
    "submit_ts": "1720322640",
    "subm_id": "1312355278"
}