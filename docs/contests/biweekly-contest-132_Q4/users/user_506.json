{
    "username": "lalit2001",
    "submission": "class Solution {\npublic:\n    int dp[5001][51][2][2];\n\nint f(int index, int remaining, int hasSkip, int isStart, vector<int>& sequence, vector<int>& nextIndex)\n{\n    if (index == sequence.size()) \n    {\n        return 0;\n    }\n\n    if (dp[index][remaining][hasSkip][isStart] != -1) \n    {\n        return dp[index][remaining][hasSkip][isStart];\n    }\n\n    int maxLength = 0;\n\n    if (isStart) \n    {\n        maxLength = max(maxLength, f(index + 1, remaining, hasSkip, isStart, sequence, nextIndex));\n    }\n    else \n    {\n        maxLength = max(maxLength, f(index + 1, remaining, 0, isStart, sequence, nextIndex));\n    }\n\n    if (hasSkip)\n    {\n        maxLength = max(maxLength, 1 + f(nextIndex[index], remaining, 1, 0, sequence, nextIndex));\n        maxLength = max(maxLength, 1 + f(index + 1, remaining, 0, 0, sequence, nextIndex));\n    }\n    else if (remaining > 0)\n    {\n        maxLength = max(maxLength, 1 + f(index + 1, remaining - 1, 0, 0, sequence, nextIndex));\n        maxLength = max(maxLength, 1 + f(nextIndex[index], remaining - 1, 1, 0, sequence, nextIndex));\n    }\n\n    return dp[index][remaining][hasSkip][isStart] = maxLength;\n}\n\nint maximumLength(vector<int>& sequence, int k) \n{\n    int size = sequence.size();\n    vector<int> nextIndex(size, size);\n    int z=0;\n    map<int, int> indexMap;\n\n    for (int i = 0; i < size; i++) \n    {\n        if (indexMap.find(sequence[i]) != indexMap.end()) \n        {\n            nextIndex[indexMap[sequence[i]]] = i;\n        }\n        indexMap[sequence[i]] = i;\n    }\n\n    memset(dp, -1, sizeof(dp));\n\n    return f(0, k, 1, 1, sequence, nextIndex);\n}\n\n    \n};",
    "submit_ts": 1717862139.0
}