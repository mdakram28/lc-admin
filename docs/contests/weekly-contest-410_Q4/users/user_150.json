{
    "username": "Jashkayth",
    "submission": "class Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        const int MOD = 1e9 + 7;\n        int n = nums.size();\n        vector<vector<int>> dp(n, vector<int>(1001, 0));\n\n        // Initialize dp for the first element\n        for (int arr1_0 = 0; arr1_0 <= nums[0]; ++arr1_0) {\n            int arr2_0 = nums[0] - arr1_0;\n            dp[0][arr1_0] = 1;\n        }\n\n        for (int i = 1; i < n; ++i) {\n            vector<int> prefix_sum(1002, 0);\n            for (int v = 0; v <= 1000; ++v) {\n                prefix_sum[v + 1] = (prefix_sum[v] + dp[i - 1][v]) % MOD;\n            }\n            for (int arr1_i = 0; arr1_i <= nums[i]; ++arr1_i) {\n                int arr2_i = nums[i] - arr1_i;\n                // arr1 is non-decreasing: arr1[i -1 ] <= arr1[i] == arr1_i\n                // arr2 is non-increasing: arr2[i -1 ] >= arr2[i] == arr2_i\n                if (arr1_i > 1000 || arr2_i > 1000 || arr2_i < 0) continue;\n                // For arr1[i] == arr1_i, possible previous arr1[i -1 ] in [0, arr1_i]\n                // For arr2[i] == arr2_i, possible previous arr2[i -1 ] in [arr2_i, 50]\n                // So, we need to sum dp[i -1 ][prev_arr1] where prev_arr1 in [0, arr1_i] and prev_arr2 in [arr2_i,50]\n                // But since arr2[i -1 ] = nums[i -1 ] - prev_arr1\n                int min_prev_arr1 = 0;\n                int max_prev_arr1 = arr1_i;\n                int low = max(min_prev_arr1, nums[i -1 ] - 1000);\n                int high = min(max_prev_arr1, nums[i -1 ] - arr2_i);\n                if (low > high) continue;\n                int ways = (prefix_sum[high +1 ] - prefix_sum[low] + MOD) % MOD;\n                dp[i][arr1_i] = ways;\n            }\n        }\n\n        int result = 0;\n        for (int v = 0; v <=1000; ++v) {\n            result = (result + dp[n -1 ][v]) % MOD;\n        }\n        return result;\n    }\n};\n",
    "submit_ts": "1723345575",
    "subm_id": "1351558720"
}