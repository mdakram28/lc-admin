{
    "username": "Satyam1782",
    "submission": "\ntypedef long long int ll;\n\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int cost;\n\n    TrieNode() : cost(-1) {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\npublic:\n    Trie() {\n        root = new TrieNode();\n    }\n\n    // Insert a word with its corresponding cost\n    void insert(const string& word, int cost) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                node->children[ch] = new TrieNode();\n            }\n            node = node->children[ch];\n        }\n        // If the word already exists, update the cost only if the new cost is lower\n        if (node->cost == -1 || cost < node->cost) {\n            node->cost = cost;\n        }\n    }\n\n    // Search for a word and return its cost\n    int search(const string& word) {\n        TrieNode* node = root;\n        for (char ch : word) {\n            if (node->children.find(ch) == node->children.end()) {\n                return -1; // Word not found\n            }\n            node = node->children[ch];\n        }\n        return node->cost;\n    }\n};\n\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        Trie trie;\n\n        int n=words.size();\n        int m=target.size();\n        \n        for(int i=0;i<n;i++){\n            \n            trie.insert(words[i],costs[i]);\n        }\n        \n        vector<ll> dp(m+1,INT_MAX);\n        dp[0]=0;\n        \n         // Use dp to compute minimum cost\n        for (int i = 0; i < m; ++i) {\n            TrieNode* node = trie.root;\n            for (int j = i; j < m; ++j) {\n                char ch = target[j];\n                if (node->children.find(ch) == node->children.end()) {\n                    break; // No word with this prefix exists in Trie\n                }\n                node = node->children[ch];\n                if (node->cost != -1) {\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node->cost);\n                }\n            }\n        }\n        \n        \n        return dp[m] == INT_MAX ? -1 : dp[m];\n        \n    }\n};",
    "submit_ts": "1720324340",
    "subm_id": "1312397156"
}