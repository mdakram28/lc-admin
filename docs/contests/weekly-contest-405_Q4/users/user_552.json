{
    "username": "HARSHIDAS_21",
    "submission": "import scala.collection.mutable\n\nclass TrieNode {\n  val children: mutable.Map[Char, TrieNode] = mutable.Map.empty\n  val wordEnds: mutable.ListBuffer[(Int, Int)] = mutable.ListBuffer.empty\n}\n\nclass Trie {\n  val root: TrieNode = new TrieNode\n\n  def insert(word: String, index: Int, cost: Int): Unit = {\n    var node = root\n    for (c <- word) {\n      if (!node.children.contains(c)) {\n        node.children(c) = new TrieNode\n      }\n      node = node.children(c)\n    }\n    node.wordEnds += ((index, cost))\n  }\n}\n\nobject Solution {\n  def minimumCost(target: String, words: Array[String], costs: Array[Int]): Int = {\n    val n = target.length\n    val dp = Array.fill(n + 1)(Int.MaxValue)\n    dp(0) = 0\n    val trie = new Trie\n    for (i <- words.indices) {\n      trie.insert(words(i), i, costs(i))\n    }\n    for (i <- 0 until n) {\n      if (dp(i) != Int.MaxValue) {\n        var node = trie.root\n        var j = i\n        var continueLoop = true\n        while (j < n && continueLoop) {\n          node.children.get(target(j)) match {\n            case Some(nextNode) =>\n              node = nextNode\n              for ((index, cost) <- node.wordEnds) {\n                val wordLen = words(index).length\n                if (i + wordLen <= n)   dp(i + wordLen) = dp(i + wordLen).min(dp(i) + cost)\n              }\n              j += 1\n            case None =>\n              continueLoop = false\n          }\n        }\n      }\n    }\n    if (dp(n) == Int.MaxValue) -1 else dp(n)\n  }\n}\n",
    "submit_ts": "1720322715",
    "subm_id": "1312357213"
}