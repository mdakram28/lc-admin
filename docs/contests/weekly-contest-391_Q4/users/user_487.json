{
    "username": "mayank81757",
    "submission": "class Solution {\npublic:\n    pair<int, int> max_manhattan_distance_pair(vector<vector<int>> &A, int N) {\n    // Variables to track running extrema and corresponding indices\n    int minsum, maxsum, mindiff, maxdiff;\n    int minsum_index, maxsum_index, mindiff_index, maxdiff_index;\n\n    minsum = maxsum = A[0][0] + A[0][1];\n    mindiff = maxdiff = A[0][0] - A[0][1];\n    minsum_index = maxsum_index = mindiff_index = maxdiff_index = 0;\n\n    for (int i = 1; i < N; i++) {\n        int sum = A[i][0] + A[i][1];\n        int diff = A[i][0] - A[i][1];\n\n        // Update indices if a new extremum is found\n        if (sum < minsum) {\n            minsum = sum;\n            minsum_index = i;\n        } else if (sum > maxsum) {\n            maxsum = sum;\n            maxsum_index = i;\n        }\n\n        if (diff < mindiff) {\n            mindiff = diff;\n            mindiff_index = i;\n        } else if (diff > maxdiff) {\n            maxdiff = diff;\n            maxdiff_index = i;\n        }\n    }\n\n    // Determine which extremum (sum or difference) is greater and return the corresponding pair of indices\n    if (maxsum - minsum > maxdiff - mindiff)\n        return {maxsum_index, minsum_index};\n    else\n        return {maxdiff_index, mindiff_index};\n}\n\n    int MaxDist(vector<vector<int> >& A, int N)\n{\n    // Variables to track running extrema\n    int minsum, maxsum, mindiff, maxdiff;\n \n    minsum = maxsum = A[0][0] + A[0][1];\n    mindiff = maxdiff = A[0][0] - A[0][1];\n    for (int i = 1; i < N; i++) {\n        int sum = A[i][0] + A[i][1];\n        int diff = A[i][0] - A[i][1];\n        if (sum < minsum)\n            minsum = sum;\n        else if (sum > maxsum)\n            maxsum = sum;\n        if (diff < mindiff)\n            mindiff = diff;\n        else if (diff > maxdiff)\n            maxdiff = diff;\n    }\n \n    int maximum = max(maxsum - minsum, maxdiff - mindiff);\n    return maximum;\n    // cout << maximum << endl;\n}\n    int minimumDistance(vector<vector<int>>& a) {\n        sort(a.begin(),a.end());\n    int ans = MaxDist(a, a.size());\n    pair<int, int> res = max_manhattan_distance_pair(a, a.size());\n    int fin = res.first;\n    int sind = res.second;\n    vector<int> fa = a[fin];\n    vector<int> sa = a[sind];\n\n    // Remove one point at a time and find the maximum Manhattan distance\n    vector<vector<int>> temp = a;\n    temp.erase(temp.begin() + fin);\n    int max_dist_after_remove_one = MaxDist(temp, temp.size());\n\n    temp = a;\n    temp.erase(temp.begin() + sind);\n    int max_dist_after_remove_two = MaxDist(temp, temp.size());\n\n    return  min(max_dist_after_remove_one, max_dist_after_remove_two);\n        \n    }\n};"
}