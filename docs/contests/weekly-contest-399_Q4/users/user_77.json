{
    "username": "mafailure",
    "submission": "const long long mod = 1e9+7; \nint add(long long a,long long b){\n    return (a+b)%mod; \n}\n#define fr(i,a,b) for(int i=a;i<b;i++)\nconst long long inf = 2e9+7; \ntemplate<typename T> \nclass SegTree\n{\n    #define left (p<<1)\n    #define right (left|1)\n    #define mid ((l+r)>>1)\n    #define toleft left,l,mid \n    #define toright right,mid+1,r \n    public: \n    int n;\n    vector<T>t;  \n    vector<int> a; \n    T defQueryReturnValue; \n    SegTree(int n):n(n),t(4*n),a(n){;}\n    \n    void build(int p,int l,int r){\n        if(l==r)\n        {\n            fr(i,0,2)fr(j,0,2){\n                t[p][i][j] = -inf;\n            }\n            t[p][1][1] = a[l]; \n            t[p][0][0] = 0; \n            return; \n        }\n        \n        build(toleft); \n        build(toright); \n        t[p] = mer(t[left],t[right]);\n    }\n    \n    void update(int p,int l,int r,int ind,int val){\n        if(ind>r||ind<l)return ; \n        if(l==r){\n            fr(i,0,2)fr(j,0,2){\n                t[p][i][j]= -inf;\n            }\n            t[p][1][1]=val; \n            t[p][0][0]=0; \n        \n            return; \n        }\n        update(toleft,ind,val); update(toright,ind,val); \n        t[p] = mer(t[left],t[right]); \n    }\n    \n    T query(int p,int l,int r,int i,int j){\n        if(i>r||l>j)return defQueryReturnValue; \n        if(i<=l&&r<=j)return t[p]; \n        return mer(query(toleft,i,j),query(toright,i,j));\n    }\n    \n    T mer(T a, T b){\n        T c; \n        fr(i,0,2)fr(j,0,2){\n                c[i][j]= -inf;\n            }\n        fr(i,0,2)\n        c[i][0] = max(a[i][0],a[i][1]),\n        c[0][i] = max(b[0][i],b[1][i]);\n        \n        fr(i,0,2)fr(j,0,2)fr(k,0,2)fr(s,0,2){\n            if(j==1&&k==1)continue; \n            if(a[i][j]==-inf||b[k][s]==-inf)continue; \n            c[i][s] = max(c[i][s], (a[i][j]+b[k][s])); \n        }\n        return c; \n        \n    }\n    \n    int index(int i,int j,int k){\n        return (i<<0)|(j<<1)|(k<<2); \n    }\n};\nclass Solution {\npublic:\n    int maximumSumSubsequence(vector<int>& nums, vector<vector<int>>& queries) {\n        int n = nums.size();\n        SegTree<array<array<int,2>,2>> seg(n); \n        seg.a = nums; \n        seg.build(1,0,n-1); \n        long long ans = 0; \n        for(int i=0;i<queries.size();i++){\n            seg.update(1,0,n-1,queries[i][0],queries[i][1]); \n            auto q = seg.query(1,0,n-1,0,n-1); \n            int cur = 0; \n            fr(i,0,2)fr(j,0,2)cur=max(cur,q[i][j]); \n            ans=add(ans,cur);\n                \n        }\n        return ans; \n    }\n};",
    "submit_ts": "1716694278",
    "subm_id": "1268111284"
}