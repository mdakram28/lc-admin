{
    "username": "harttle",
    "submission": "/**\n * @param {number[][]} edges1\n * @param {number[][]} edges2\n * @return {number}\n */\nvar minimumDiameterAfterMerge = function(edges1, edges2) {\n    // console.log('-----------', edges1, edges2)\n    const d1 = diam(edges1)\n    const d2 = diam(edges2)\n    return Math.max(\n        d1.depth + 1 + d2.depth - 2,\n        diameter(edges1),\n        diameter(edges2)\n    )\n    function diameter(edges) {\n        const N = edges.length + 1\n        const G = Array(N).fill(0).map(x => [])\n        for (const [u, v] of edges) {\n            G[u].push(v)\n            G[v].push(u)\n        }\n        const [v, d1] = dijk(0)\n        const [u, d2] = dijk(v)\n        return d2\n        function dijk(origin) {\n            const queue = new Map([[origin, 0]])\n            let last = origin\n            for (const [u, d] of queue) {\n                for (const v of G[u]) {\n                    if (queue.has(v)) continue\n                    queue.set(v, d + 1)\n                    last = v\n                }\n            }\n            return [last, queue.get(last)]\n        }\n    }\n    \n    function diam(edges) {\n        // console.log('diam', edges)\n        const N = edges.length + 1\n        if (N === 1) return {diag:0, depth:1}\n        const indegs = Array(N).fill(0)\n        const ins = Array(N).fill(0).map(x => [])\n        for (const [u, v] of edges) {\n            indegs[v]++\n            indegs[u]++\n            ins[u].push(v)\n            ins[v].push(u)\n        }\n        let leaves = new Set([...ins.keys()].filter(x => indegs[x] === 1))\n        let removed = new Set()\n        let ans = 0, diag = 0\n        // console.log('leaves', leaves)\n        while (leaves.size) {\n            if (N - removed.size === 1) {\n                // console.log('remain 1, +1')\n                ans++; break}\n            if (N - removed.size === 2) {\n                // console.log('remain 2, +2')\n                ans += 2; break}\n            const nleaves = new Set()\n            for (const u of leaves) {\n                removed.add(u)\n                \n                for (const v of ins[u]) {\n                    if (!removed.has(v)) {\n                        indegs[v]--\n                        if (indegs[v] === 1) nleaves.add(v)\n                    }\n                }\n            }\n            // console.log('nleaves', nleaves, '+1')\n            leaves = nleaves\n            ans++\n        }\n        // console.log(`depth:${ans}, diag:${diag}`)\n        return {depth: ans}\n    }\n};",
    "submit_ts": "1719718887",
    "subm_id": "1304428526"
}