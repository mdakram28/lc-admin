{
    "username": "U_U",
    "submission": "\n\nint MaxDist(vector<pair<int, int> >& A, int N)\n{\n    // Vectors to store maximum and\n    // minimum of all the four forms\n    vector< vector<int> > V(N, vector<int>(2, 0)), V1(N, vector<int>(2, 0));\n \n    for (int i = 0; i < N; i++) \n    {\n        V[i][0] = A[i].first + A[i].second;\n        V[i][1] = i;\n        V1[i][0] = A[i].first - A[i].second;\n        V1[i][1] = i;\n    }\n \n    // Sorting both the vectors\n    sort(V.begin(), V.end());\n    sort(V1.begin(), V1.end());\n \n    int res = INT_MAX;\n    for (int i = 0; i < N; ++i)\n    {\n        int a0 = N - 1;\n        int a1 = N - 1;\n        int b0 = 0;\n        int b1 = 0;\n        if (V[a0][1] == i) --a0;\n        if (V1[a1][1] == i) --a1;\n        if (V[b0][1] == i) ++b0;\n        if (V1[b1][1] == i) ++b1;\n        \n        res = min(res, max(V[a0][0] - V[b0][0], V1[a1][0] - V1[b1][0]));\n    }\n \n    return res;\n}\n \n\nclass Solution {\npublic:\n    int n;\n    int minimumDistance(vector<vector<int>>& points) {        \n        n = points.size();\n        vector< pair<int, int> > vec;\n        for (int i = 0; i < n; ++i) vec.push_back( {points[i][0], points[i][1]} );        \n        return MaxDist(vec, vec.size());\n        \n    }\n};"
}