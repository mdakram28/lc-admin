{
    "username": "mfujwiara",
    "submission": "class Solution:\n    def minimumDiameterAfterMerge(self, edges1: List[List[int]], edges2: List[List[int]]) -> int:\n        n=len(edges1)+1\n        m=len(edges2)+1\n        eee1=[[] for _ in range(n)]\n        for a,b in edges1:\n            eee1[a].append(b)\n            eee1[b].append(a)\n        eee2=[[] for _ in range(m)]\n        for a,b in edges2:\n            eee2[a].append(b)\n            eee2[b].append(a)\n        def calc(eee):\n            targets=[0]\n            done=set(targets)\n            while targets:\n                nexts=[]\n                for t in targets:\n                    for u in eee[t]:\n                        if u not in done:\n                            done.add(u)\n                            nexts.append(u)\n                if nexts:\n                    targets=nexts\n                else:\n                    break\n            targets=[targets[0]]\n            done=set(targets)\n            d=0\n            while targets:\n                nexts=[]\n                for t in targets:\n                    for u in eee[t]:\n                        if u not in done:\n                            done.add(u)\n                            nexts.append(u)\n                if nexts:\n                    targets=nexts\n                    d+=1\n                else:\n                    break\n            return d\n        d1=calc(eee1)\n        d2=calc(eee2)\n        d3=(d1+1)//2+(d2+1)//2+1\n        return max([d1,d2,d3])",
    "submit_ts": "1719717879",
    "subm_id": "1304403051"
}