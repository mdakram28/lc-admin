{
    "username": "vedantmishra69",
    "submission": "\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.word_index = -1\n    \ndef build_trie(words):\n    root = TrieNode()\n    for i, word in enumerate(words):\n        node = root\n        for char in word[::-1]:  # Insert words in reverse\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.word_index = i\n    return root\n\ndef minCost(target, words, costs):\n    trie = build_trie(words)\n    n = len(target)\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n\n    for i in range(1, n + 1):\n        node = trie\n        for j in range(i - 1, -1, -1):\n            if target[j] not in node.children:\n                break\n            node = node.children[target[j]]\n            if node.word_index != -1:\n                dp[i] = min(dp[i], dp[j] + costs[node.word_index])\n\n    return dp[n] if dp[n] != float('inf') else -1\n    \n\nclass Solution:\n    def minimumCost(self, tar: str, wor: List[str], cos: List[int]) -> int:\n        # hsh = Hashing(tar, bases, mods)\n        # cost = {}\n        # n = len(wor)\n        # for i in range(n):\n        #     hs = Hashing(wor[i], bases, mods)\n        #     cost[hs.hashed(0, len(wor[i])-1)] = cos[i]\n        # dp = [0] * len(tar)\n        # for i in range()\n        cost = {}\n        for i in range(len(wor)):\n            if wor[i] not in cost:\n                cost[wor[i]] = cos[i]\n            else: cost[wor[i]] = min(cost[wor[i]], cos[i])\n        nwor, ncos = [], []\n        for i in cost:\n            nwor.append(i)\n            ncos.append(cost[i])\n        return minCost(tar, nwor, ncos)\n        \n            \n        \n        ",
    "submit_ts": "1720324591",
    "subm_id": "1312403285"
}