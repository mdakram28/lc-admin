{
    "username": "guzh870423",
    "submission": "class Solution {\n    int X, Y;\n    public boolean canReachCorner(int X, int Y, int[][] circles) {\n        this.X = X;\n        this.Y = Y;\n        int n = circles.length;\n        int[] arr = new int[n + 4];\n        for (int  i = 0; i < n + 4; i++) {\n            arr[i] = i;\n        }\n        \n        for (int i = 0; i < n; i++) {\n            for (int j = i + 1; j < n; j++) {\n                if (isConnected(circles[i], circles[j])) {\n                    connect(arr, i, j);\n                }\n            }\n        }\n        for (int i = 0; i < n; i++) {\n            if (isConnectedToX(circles[i], 0)) {\n                connect(arr, i, n);\n            }\n            if (isConnectedToY(circles[i], 0)) {\n                connect(arr, i, n + 1);\n            }\n            if (isConnectedToX(circles[i], X)) {\n                connect(arr, i, n + 2);\n            }\n            if (isConnectedToY(circles[i], Y)) {\n                connect(arr, i, n + 3);\n            }\n        }\n        // System.out.println(Arrays.toString(arr));\n        if (isConnected(arr, n, n + 1) || isConnected(arr, n, n + 2) || isConnected(arr, n + 1, n + 3) || isConnected(arr, n + 2, n + 3)) {\n            return false;\n        }\n        return true;\n        \n    }\n    int root(int[] arr, int i) {\n        int j = arr[i];\n        while (i != j) {\n            arr[i] = arr[j];\n            i = j;\n            j = arr[i];\n        }\n        return i;\n    }\n    void connect(int[] arr, int i, int j) {\n        i = root(arr, i);\n        j = root(arr, j);\n        if (i != j) {\n            arr[j] = i;\n        }\n    }\n    \n    boolean isConnected(int[] arr, int i, int j) {\n        i = root(arr, i);\n        j = root(arr, j);\n        return i == j;\n    }\n    \n    boolean isConnected(int[] c1, int[] c2) {\n        long x = (c1[0] - c2[0]);\n        long y = c1[1] - c2[1];\n        long r = c1[2] + c2[2];\n        return x * x  + y * y <= r * r;\n    }\n    \n    boolean isConnectedToX(int[] c, int x) {\n        int dx = Math.abs(x - c[0]);\n        if (dx > c[2]) {\n            return false;\n        }\n        double dy = Math.sqrt(c[2] * c[2] - dx * dx);\n        if (c[1] + dy < 0|| c[1] - dy > Y) {\n            return false;\n        }\n        return true;\n    }\n    \n    boolean isConnectedToY(int[] c, int y) {\n        int dy = Math.abs(y - c[1]);\n        if (dy > c[2]) {\n            return false;\n        }\n        double dx = Math.sqrt(c[2] * c[2] - dy * dy);\n        if (c[0] + dx < 0|| c[0] - dx > X) {\n            return false;\n        }\n        return true;\n    }\n}",
    "submit_ts": "1722138688",
    "subm_id": "1335797126"
}