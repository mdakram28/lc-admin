{
    "username": "123GJWEQ2",
    "submission": "class Solution(object):\n    def maximumSumSubsequence(self, nums, queries):\n        def create(node, l, r):\n            if l > r:\n                return (0, 0, 0, 0)\n            if l == r:\n                segment_tree[node - 1] = (nums[l], 0, 0, 0)\n                return segment_tree[node - 1]\n\n            mid = (l + r) // 2\n\n            ans = [0, 0, 0, 0]\n            l_mid, l_1_mid, l_mid_1, l_1_mid_1 = create(node * 2, l, mid)\n            mid_r, mid_1_r, mid_r_1, mid_1_r_1 = create(node * 2 + 1, mid + 1, r)\n\n            ans[0] = max(l_mid_1 + mid_1_r, l_mid + mid_1_r, l_mid_1 + mid_r)\n            ans[1] = max(l_1_mid_1 + mid_1_r, l_1_mid + mid_1_r, l_1_mid_1 + mid_r) #this is l + 1, r\n            ans[2] = max(l_mid_1 + mid_1_r_1, l_mid + mid_1_r_1, l_mid_1 + mid_r_1) #this is l, r - 1\n            ans[3] = max(l_1_mid_1 + mid_1_r_1, l_1_mid + mid_1_r_1, l_1_mid_1 + mid_r_1) #l + 1, r - 1\n\n\n            segment_tree[node - 1] = tuple(ans)\n\n            return segment_tree[node - 1]\n\n        def update(node, l, r, ind, val):\n            if l > r:\n                return (0, 0, 0, 0)\n            if l == r:\n                segment_tree[node - 1] = (val, 0, 0, 0)\n                return segment_tree[node - 1]\n\n            mid = (l + r) // 2\n            if ind >= mid + 1:\n                mid_r, mid_1_r, mid_r_1, mid_1_r_1 = update(2 * node + 1, mid + 1, r, ind, val)\n                l_mid, l_1_mid, l_mid_1, l_1_mid_1 = segment_tree[2 * node - 1]\n                ans = [0, 0, 0, 0]\n                ans[0] = max(l_mid_1 + mid_1_r, l_mid + mid_1_r, l_mid_1 + mid_r)\n                ans[1] = max(l_1_mid_1 + mid_1_r, l_1_mid + mid_1_r, l_1_mid_1 + mid_r) #this is l + 1, r\n                ans[2] = max(l_mid_1 + mid_1_r_1, l_mid + mid_1_r_1, l_mid_1 + mid_r_1) #this is l, r - 1\n                ans[3] = max(l_1_mid_1 + mid_1_r_1, l_1_mid + mid_1_r_1, l_1_mid_1 + mid_r_1) #l + 1, r - 1\n                segment_tree[node - 1] = tuple(ans)\n\n            else:\n                l_mid, l_1_mid, l_mid_1, l_1_mid_1 = update(2 * node, l, mid, ind, val)\n                mid_r, mid_1_r, mid_r_1, mid_1_r_1 = segment_tree[2 * node]\n                ans = [0, 0, 0, 0]\n                ans[0] = max(l_mid_1 + mid_1_r, l_mid + mid_1_r, l_mid_1 + mid_r)\n                ans[1] = max(l_1_mid_1 + mid_1_r, l_1_mid + mid_1_r, l_1_mid_1 + mid_r) #this is l + 1, r\n                ans[2] = max(l_mid_1 + mid_1_r_1, l_mid + mid_1_r_1, l_mid_1 + mid_r_1) #this is l, r - 1\n                ans[3] = max(l_1_mid_1 + mid_1_r_1, l_1_mid + mid_1_r_1, l_1_mid_1 + mid_r_1) #l + 1, r - 1\n                segment_tree[node - 1] = tuple(ans)\n\n            return segment_tree[node - 1]\n        \n        ans = 0\n        segment_tree = [0] * len(nums) * 4\n        create(1, 0, len(nums) - 1)\n        \n        for (ind, val) in queries:\n            update(1, 0, len(nums) - 1, ind, val)\n            ans += max(segment_tree[0])\n        return ans % (10 ** 9 + 7)",
    "submit_ts": 1716695246.0
}