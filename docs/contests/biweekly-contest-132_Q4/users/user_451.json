{
    "username": "vitesh23",
    "submission": "#include <vector>\n#include <unordered_map>\n#include <algorithm>\n\nclass Solution {\npublic:\n    int maximumLength(std::vector<int>& nums, int k) {\n        int size = nums.size();\n        std::vector<std::vector<int>> lengths(size, std::vector<int>(k + 1, 1));\n        int max_length = 1;\n        std::vector<int> max_lengths(k + 1, -1);\n        std::vector<std::unordered_map<int, int>> num_to_lengths_map(k + 1);\n        \n        for (int i = 0; i < size; ++i) {\n            for (int j = 0; j <= k; ++j) {\n                for (int l = 0; l < j; ++l) {\n                    lengths[i][j] = std::max(lengths[i][j], 1 + max_lengths[l]);\n                }\n                \n                if (num_to_lengths_map[j].count(nums[i])) {\n                    lengths[i][j] = std::max(lengths[i][j], 1 + num_to_lengths_map[j][nums[i]]);\n                }\n                \n                max_length = std::max(max_length, lengths[i][j]);\n            }\n            \n            for (int j = 0; j <= k; ++j) {\n                max_lengths[j] = std::max(max_lengths[j], lengths[i][j]);\n                num_to_lengths_map[j][nums[i]] = std::max(num_to_lengths_map[j][nums[i]], lengths[i][j]);\n            }\n        }\n        \n        return max_length;\n    }\n};\n",
    "submit_ts": 1717862274.0
}