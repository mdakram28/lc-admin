{
    "username": "ankitjha2603",
    "submission": "from collections import deque\nfrom math import sqrt\n\nclass Solution:\n    def bfs(self, graph, start, target1, target2, nodes):\n        queue = deque([start])\n        visited = [False] * (nodes + 4)\n        visited[start] = True\n\n        while queue:\n            u = queue.popleft()\n            for v in graph[u]:\n                if not visited[v]:\n                    queue.append(v)\n                    visited[v] = True\n\n        return 1 if visited[target1] or visited[target2] else 0\n\n    def canReachCorner(self, X, Y, circles2):\n        circles = [[circle[0], circle[1], circle[2]] for circle in circles2]\n        num_circles = len(circles2)\n        graph = [[] for _ in range(num_circles + 4)]\n\n        for i in range(num_circles):\n            if circles[i][0] <= circles[i][2]:\n                graph[num_circles].append(i)\n                graph[i].append(num_circles)\n            if X - circles[i][0] <= circles[i][2]:\n                graph[num_circles + 2].append(i)\n                graph[i].append(num_circles + 2)\n            if circles[i][1] <= circles[i][2]:\n                graph[num_circles + 1].append(i)\n                graph[i].append(num_circles + 1)\n            if Y - circles[i][1] <= circles[i][2]:\n                graph[num_circles + 3].append(i)\n                graph[i].append(num_circles + 3)\n            for j in range(i + 1, num_circles):\n                distance = sqrt((circles[i][0] - circles[j][0]) ** 2 + (circles[i][1] - circles[j][1]) ** 2)\n                radius_sum = circles[i][2] + circles[j][2]\n                if radius_sum >= distance:\n                    graph[i].append(j)\n                    graph[j].append(i)\n\n        is_blocked = 0\n        is_blocked = max(is_blocked, self.bfs(graph, num_circles, num_circles + 1, num_circles + 2, num_circles + 4))\n        is_blocked = max(is_blocked, self.bfs(graph, num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4))\n\n        return is_blocked == 0\n",
    "submit_ts": "1722137470",
    "subm_id": "1335764717"
}