{
    "username": "aarontx06",
    "submission": "class Solution {\n    public class Pair implements Comparable<Pair>\n    {\n        int val; int point; \n        \n        public Pair(int val, int point)\n        {\n            this.val = val;\n            this.point = point; \n        }\n\n        @Override\n        public int compareTo(Pair o) {\n            return this.val - o.val;\n        }\n    }\n\n    public int minimumDistance(int[][] points) {\n        int[] findDist = findMax(points);\n        return Math.min(maxRem(points, findDist[0]), maxRem(points, findDist[1]));\n    }\n    \n    public int[] findMax(int[][] points)\n    {\n        Pair[] sum = new Pair[points.length];\n        Pair[] diff = new Pair[points.length];\n        for(int i = 0; i < points.length; i++)\n        {\n            sum[i] = new Pair(points[i][0] + points[i][1], i);\n            diff[i] = new Pair(points[i][0] - points[i][1], i);\n        }\n        Arrays.sort(sum);\n        Arrays.sort(diff);\n        if(sum[points.length - 1].val - sum[0].val > diff[points.length - 1].val - diff[0].val)\n            return new int[]{sum[0].point, sum[points.length - 1].point}; \n        return new int[]{diff[0].point, diff[points.length - 1].point};\n    }\n    \n    public int maxRem(int[][] points, int remove)\n    {\n        Pair[] sum = new Pair[points.length - 1];\n        Pair[] diff = new Pair[points.length - 1];\n        int[][] copy = new int[points.length - 1][2]; \n        for(int i = 0; i < points.length; i++)\n        {\n            if(i == remove)\n                continue;\n            copy[i + (i > remove ? -1 : 0)] = points[i]; \n        }\n        for(int i = 0; i < points.length - 1; i++)\n        {\n            sum[i] = new Pair(copy[i][0] + copy[i][1], i);\n            diff[i] = new Pair(copy[i][0] - copy[i][1], i);\n        }\n        Arrays.sort(sum);\n        Arrays.sort(diff);\n        return Math.max(sum[points.length - 2].val - sum[0].val, diff[points.length - 2].val - diff[0].val); \n    }\n}"
}