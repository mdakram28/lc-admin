{
    "username": "Homie_Lander7",
    "submission": "const int MOD = 1e9 + 7;\nstruct mi\n{\n    int val;\n    mi(long long v = 0)\n    {\n        if (v < 0)\n        {\n            v = v % MOD + MOD;\n        }\n        if (v >= MOD)\n        {\n            v %= MOD;\n        }\n        val = v;\n    }\n    static int mod_inv(int a, int m = MOD)\n    {\n        int g = m, r = a, x = 0, y = 1;\n        while (r != 0)\n        {\n            int q = g / r;\n            g %= r;\n            swap(g, r);\n            x -= q * y;\n            swap(x, y);\n        }\n        return x < 0 ? x + m : x;\n    }\n    explicit operator int() const\n    {\n        return val;\n    }\n    mi &operator+=(const mi &other)\n    {\n        val += other.val;\n        if (val >= MOD)\n            val -= MOD;\n        return *this;\n    }\n    mi &operator-=(const mi &other)\n    {\n        val -= other.val;\n        if (val < 0)\n            val += MOD;\n        return *this;\n    }\n    typedef unsigned long long ull;\n    ull fast_mod(ull a, ull b, ull M = MOD)\n    {\n        long long ret = a * b - M * ull(1.L / M * a * b);\n        return ret + M * (ret < 0) - M * (ret >= (long long)M);\n    }\n    mi &operator*=(const mi &other)\n    {\n        val = fast_mod((ull)val, other.val);\n        return *this;\n    }\n    mi &operator/=(const mi &other)\n    {\n        return *this *= other.inv();\n    }\n    friend mi operator+(const mi &a, const mi &b) { return mi(a) += b; }\n    friend mi operator-(const mi &a, const mi &b) { return mi(a) -= b; }\n    friend mi operator*(const mi &a, const mi &b) { return mi(a) *= b; }\n    friend mi operator/(const mi &a, const mi &b) { return mi(a) /= b; }\n    mi &operator++()\n    {\n        val = val == MOD - 1 ? 0 : val + 1;\n        return *this;\n    }\n    mi &operator--()\n    {\n        val = val == 0 ? MOD - 1 : val - 1;\n        return *this;\n    }\n    mi operator++(int32_t)\n    {\n        mi before = *this;\n        ++*this;\n        return before;\n    }\n    mi operator--(int32_t)\n    {\n        mi before = *this;\n        --*this;\n        return before;\n    }\n    mi operator-() const\n    {\n        return val == 0 ? 0 : MOD - val;\n    }\n    bool operator==(const mi &other) const { return val == other.val; }\n    bool operator!=(const mi &other) const { return val != other.val; }\n    mi inv() const\n    {\n        return mod_inv(val);\n    }\n    mi pow(long long p) const\n    {\n        assert(p >= 0);\n        mi a = *this, result = 1;\n\n        while (p > 0)\n        {\n            if (p & 1)\n                result *= a;\n\n            a *= a;\n            p >>= 1;\n        }\n        return result;\n    }\n    friend ostream &operator<<(ostream &stream, const mi &m)\n    {\n        return stream << m.val;\n    }\n    friend istream &operator>>(istream &stream, mi &m)\n    {\n        return stream >> m.val;\n    }\n    friend void __print(const mi &x)\n    {\n        cerr << x.val;\n    }\n};\n\nclass Solution {\npublic:\n    int countOfPairs(vector<int>& nums) {\n        int n=nums.size();\n        nums.insert(nums.begin(), 0);\n        int mx=*max_element(nums.begin(), nums.end());\n        vector<vector<mi>>dp(n+1, vector<mi>(mx+1));\n        for(int i=0;i<=nums[1];i++)\n            dp[1][i]=1;\n        auto pref=dp[1];\n        for(int i=1;i<=mx;i++)\n            pref[i]+=pref[i-1];\n        for(int i=2;i<=n;i++){\n            // a[i]+b[i]=nums[i]\n            // iterate on a[i]\n            for(int a=0;a<=nums[i];a++){\n               // prev a in range [0...a]\n               // b[i]=nums[i]-a\n               // prev b in range [b[i]...nums[i-1]]\n               // b[i-1]>=b[i]\n               // nums[i-1]-a[i-1]>=b[i]\n               // a[i-1]<=nums[i-1]-b[i]\n               int b=nums[i]-a;\n               int prev_a=a;\n               prev_a=min(prev_a, nums[i-1]-b);\n               if(prev_a<0)\n                   continue;\n               dp[i][a]=pref[prev_a];\n            }\n            pref=dp[i];\n            for(int j=1;j<=mx;j++)\n                pref[j]+=pref[j-1];\n        }\n        mi ans=0;\n        for(int i=0;i<=mx;i++)\n            ans+=dp[n][i];\n        return ans.val;\n    }\n};",
    "submit_ts": "1723344768",
    "subm_id": "1351541627"
}