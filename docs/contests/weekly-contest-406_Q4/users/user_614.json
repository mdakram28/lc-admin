{
    "username": "kumarnikhil94058",
    "submission": "\nclass Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCuts, vector<int>& verticalCuts) {\n        vector<pair<int, char>> cuts;\n        for (int i = 0; i < horizontalCuts.size(); ++i) {\n            cuts.emplace_back(horizontalCuts[i], 'h');\n        }\n        for (int j = 0; j < verticalCuts.size(); ++j) {\n            cuts.emplace_back(verticalCuts[j], 'v');\n        }\n\n        // Sort cuts by cost in descending order\n        sort(cuts.begin(), cuts.end(), greater<pair<int, char>>());\n\n        int horizontalPieces = 1; // initially, we have 1 horizontal piece\n        int verticalPieces = 1;   // initially, we have 1 vertical piece\n        long long totalCost = 0;  // use long long for totalCost to handle large sums\n\n        // Process each cut in the sorted order\n        for (auto& cut : cuts) {\n            if (cut.second == 'h') {\n                // It's a horizontal cut\n                totalCost += static_cast<long long>(cut.first) * verticalPieces;\n                ++horizontalPieces;\n            } else {\n                // It's a vertical cut\n                totalCost += static_cast<long long>(cut.first) * horizontalPieces;\n                ++verticalPieces;\n            }\n        }\n\n        return totalCost;\n    }\n};\n",
    "submit_ts": "1720925690",
    "subm_id": "1320263033"
}