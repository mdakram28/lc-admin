{
    "username": "sethles",
    "submission": "    class Solution {\n    public int maxTotalReward(int[] rewards) {\n        rewards = prune(rewards);\n        int max = rewards[rewards.length - 1];\n        // always use r elem\n        int target = max - 1;\n        if (target == 0) return max;\n        boolean[] can = new boolean[target + 1];\n        can[0] = true;\n        for (int i = 0; i < rewards.length - 1; i++) {\n            int elem = rewards[i];\n            int maxJ = Math.min(target - elem, elem - 1);\n            for (int j = 0; j <= maxJ; j++) can[j + elem] |= can[j];\n            if (can[target]) return target + max;\n        }\n        for (int i = target;; i--) {\n            if (can[i]) return i + max;\n        }\n    }\n    private int[] prune(int[] in) {\n        Set<Integer> s = new HashSet<>();\n        for (int elem : in) s.add(elem);\n        List<Integer> lis = new ArrayList<>(s);\n        Collections.sort(lis);\n        int[] out = new int[lis.size()];\n        Arrays.setAll(out, index -> lis.get(index));\n        return out; // unique\n    }\n}\n// TreeSet<Integer> achievable = new TreeSet<>();\n//         achievable.add(0);\n//         for (int elem : rewards) {\n//             TreeSet<Integer> anew = new TreeSet<>(achievable);\n//             for (int l : achievable) {\n//                 if (l >= elem) break;\n//                 anew.add(l + elem);\n//             }\n//             achievable = anew;\n//         }\n//         return achievable.last();",
    "submit_ts": 1717903822.0
}