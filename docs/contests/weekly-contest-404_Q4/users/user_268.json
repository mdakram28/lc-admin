{
    "username": "endless_mercury",
    "submission": "class Solution {\npublic:\n    void dfs(int src,int depth,int par,vector<int>adj[],vector<int>&dis){\n        dis[src]=depth;\n        for(int j=0;j<adj[src].size();j++){\n            if(adj[src][j]==par)continue;\n            dfs(adj[src][j],depth+1,src,adj,dis);\n        }\n        \n    }\n    int find(vector<vector<int>>& edges){\n        int n=edges.size()+1;\n        vector<int> adj[n];\n        for(int i=0;i<n-1;i++){\n            adj[edges[i][0]].push_back(edges[i][1]);\n            adj[edges[i][1]].push_back(edges[i][0]);\n        }\n        vector<int> dis(n,-1);\n        dfs(0,0,-1,adj,dis);\n        int ma=0;\n        for(int i=0;i<n;i++){\n            if(dis[ma]<dis[i]){\n                ma=i;\n            }\n        }\n        dis[ma]=0;\n        dfs(ma,0,-1,adj,dis);\n        ma=0;\n        for(int i=0;i<n;i++){\n            if(dis[ma]<dis[i]){\n                ma=i;\n            }\n        }\n        return dis[ma];\n    }\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1=find(edges1);\n        int d2=find(edges2);\n        int ans=max(d1,d2);\n        return max(ans,(d1+1)/2+(d2+1)/2+1);\n    }\n};",
    "submit_ts": "1719717589",
    "subm_id": "1304395613"
}