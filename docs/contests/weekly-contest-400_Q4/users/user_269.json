{
    "username": "AdityaDargan",
    "submission": "class Solution {\npublic:\n    vector<vector<int>> v;\n    // vector<vector<int>> v2;\n    \n    int minimumDifference(vector<int>& nums, int k) {   \n        \n        int n = nums.size();\n        \n        v.clear();\n        v.resize(n+1,vector<int>(32,0));\n        \n        // v2.clear();\n        // v2.resize(n+1,vector<int>(32,0));\n        \n        for(int i=0;i<n;i++){\n            for(int j=0;j<30;j++){\n                int mask = 1<<j;\n                if(mask & nums[i]){\n                    v[i+1][j] = v[i][j];\n                }\n                else{\n                    v[i+1][j] = v[i][j] + 1;\n                }\n            }\n        }\n        \n        int ans = INT_MAX;\n        for(int i=1;i<=n;i++){\n            int l = i;\n            int r = n;\n            while(l<=r){\n                int mid = (l+r)/2;\n                int num = 0;\n                for(int j=0;j<30;j++){\n                    int tot = v[mid][j] - v[i-1][j];\n                    if(tot==0){\n                        num |= (1<<j);\n                    }\n                }\n                // cout<<mid<<\" \"<<num<<endl;\n                \n                ans = min(ans,abs(k-num));\n                \n                if(ans==0)break;\n                if(num>k){\n                    l = mid+1;\n                }\n                else{\n                    r = mid-1;\n                }\n            }\n            if(ans==0)break;\n        }\n        return ans;\n    }\n};",
    "submit_ts": 1717298426.0
}