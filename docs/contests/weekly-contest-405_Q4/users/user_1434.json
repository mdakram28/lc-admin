{
    "username": "downtownknight009",
    "submission": "from collections import defaultdict, deque\nimport sys\n\n\nclass TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.min_cost = float('inf')  # Minimum cost to reach this node\n\nclass Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word, cost):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.min_cost = min(node.min_cost, cost)\n\n    def get_root(self):\n        return self.root\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        trie = Trie()\n        for word, cost in zip(words, costs):\n            trie.insert(word, cost)\n\n        dp = [float('inf')] * (len(target) + 1)\n        dp[0] = 0\n\n        for i in range(len(target)):\n            if dp[i] == float('inf'):\n                continue\n\n            node = trie.get_root()\n            for j in range(i, len(target)):\n                if target[j] not in node.children:\n                    break\n                node = node.children[target[j]]\n                if node.min_cost != float('inf'):\n                    dp[j + 1] = min(dp[j + 1], dp[i] + node.min_cost)\n\n        return dp[len(target)] if dp[len(target)] != float('inf') else -1\n        ",
    "submit_ts": "1720323877",
    "subm_id": "1312386222"
}