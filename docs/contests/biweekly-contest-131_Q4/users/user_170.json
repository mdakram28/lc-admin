{
    "username": "Tinky1224",
    "submission": "from sortedcontainers import SortedList\nclass SegmentTree:\n    def __init__(self, n):\n        self.nums = [0]*(4*n+5)\n        self.maxs = [0]*(4*n+5)\n        self.right = n\n    def update(self, index, num):\n        self._update(0, 0, self.right, index, index, num)\n    def _update(self, index, curr_left, curr_right, target_left, target_right, num):\n        if curr_left > curr_right or curr_left > target_right or curr_right < target_left:\n            return\n\n        if curr_left == curr_right:\n            self.nums[index] = num\n            self.maxs[index] = num\n            return\n\n        mid = (curr_left + curr_right) >> 1\n        if target_left > mid:\n            self._update(index*2+2, mid+1, curr_right, target_left, target_right, num)\n        elif target_right <= mid:\n            self._update(index*2+1, curr_left, mid, target_left, target_right, num)\n        else:\n            self._update(index*2+1, curr_left, mid, target_left, mid, num)\n            self._update(index*2+2, mid+1, curr_right, mid+1, target_right, num)\n        self.maxs[index] = max(self.maxs[index*2+1], self.maxs[index*2+2])\n        return\n\n    def query(self, index):\n        return self._query(0, 0, self.right, 0, index)\n    def _query(self, index, curr_left, curr_right, target_left, target_right):\n        if curr_left > curr_right or curr_left > target_right or curr_right < target_left:\n            return\n\n        if curr_left == target_left and curr_right == target_right:\n            return self.maxs[index]\n\n        mid = (curr_left + curr_right) >> 1\n        if target_left > mid:\n            return self._query(index*2+2, mid+1, curr_right, target_left, target_right)\n        if target_right <= mid:\n            return self._query(index*2+1, curr_left, mid, target_left, target_right)\n\n        return max(self._query(index*2+1, curr_left, mid, target_left, mid), self._query(index*2+2, mid+1, curr_right, mid+1, target_right))\n\n\nclass Solution:\n    def getResults(self, queries: List[List[int]]) -> List[bool]:\n        n = len(queries)\n        sl = SortedList([0])\n        seg = SegmentTree(min(5*10**4+5, 3*n))\n        res = []\n        for q in queries:\n            if q[0] == 1:\n                sl.add(q[1])\n                ind = sl.bisect_left(q[1])\n                seg.update(q[1], q[1] - sl[ind-1])\n                if ind < len(sl)-1:\n                    seg.update(sl[ind+1], sl[ind+1] - q[1])\n            else:\n                ind = sl.bisect_left(q[1]) - 1\n                mx = max(q[1] - sl[ind], seg.query(sl[ind]))\n                res.append(mx >= q[2])\n        return res",
    "submit_ts": "1716650706",
    "subm_id": "1267622502"
}