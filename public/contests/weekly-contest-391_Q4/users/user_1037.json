{
    "username": "sarthak97",
    "submission": "class Solution {\npublic:\n    vector<int> MaxDist(vector<vector<int>> &A, int n, int skip)\n    {\n        int low1 = 0, high1 = 0, low2 = 0, high2 = 0;\n        int minsum, maxsum, mindiff, maxdiff;\n\n        minsum = maxsum = A[0][0] + A[0][1];\n        mindiff = maxdiff = A[0][0] - A[0][1];\n        \n        if(skip == 0) {\n            minsum = maxsum = A[1][0] + A[1][1];\n            mindiff = maxdiff = A[1][0] - A[1][1];\n        }\n        \n        for (int i = 1; i < n; i++) {\n            if(i == skip)\n                continue;\n\n            int sum = A[i][0] + A[i][1];\n            int diff = A[i][0] - A[i][1];\n            \n            if (sum < minsum) {\n                minsum = sum;\n                low1 = i;\n            }\n            else if (sum > maxsum) {\n                high1 = i;\n                maxsum = sum;\n            }\n            \n            if (diff < mindiff) {\n                mindiff = diff;\n                low2 = i;\n            }\n            else if (diff > maxdiff) {\n                maxdiff = diff;\n                high2 = i;\n            }\n        }\n        \n        int ansx, ansy;\n        if(maxsum - minsum > maxdiff - mindiff) {\n            ansx = low1;\n            ansy = high1;\n        } else {\n            ansx = low2;\n            ansy = high2;\n        }\n\n        int maximum = max(maxsum - minsum, maxdiff - mindiff);\n\n        return {maximum, ansx, ansy};\n    }\n    \n    int minimumDistance(vector<vector<int>> &points) {\n        int n = points.size();\n        vector<int> temp;\n        int ans = INT_MAX;\n        \n        queue<int> q;\n        q.push(-1);\n        unordered_set<int> s;\n        \n        while(!q.empty()) {\n            int index = q.front();\n            q.pop();\n            \n            temp = MaxDist(points, n, index);\n            ans = min(ans, temp[0]);\n            \n            if(s.find(temp[1]) == s.end()) {\n                s.insert(temp[1]);\n                q.push(temp[1]);\n            }\n            \n            if(s.find(temp[2]) == s.end()) {\n                s.insert(temp[2]);\n                q.push(temp[2]);\n            }\n\n        }\n        \n        return ans;\n    }\n};"
}