{
    "username": "orogtsm",
    "submission": "#include <iostream>\n#include <vector>\n#include <string>\n\nusing namespace std;\n\nclass Solution {\npublic:\n    \n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int n = target.size();\n        vector<vector<int>> presence(n);\n        unordered_map<string,int> mp;\n        for(int i=0;i<words.size();i++)\n        {\n            if(mp.find(words[i])==mp.end()) \n            {\n                mp[words[i]]=costs[i];\n            }\n            else mp[words[i]]=min(mp[words[i]],costs[i]);\n        }\n\n        vector<string> word;\n        vector<int> cost;\n        for(auto x : mp)\n        {\n            word.push_back(x.first);\n            cost.push_back(x.second);\n        }\n\n        for (int i = 0; i < word.size(); i++) {\n            vector<int> result;\n            KMPSearch(word[i], target, result);\n            for (auto x : result) {\n                presence[x].push_back(i);\n            }\n        }\n\n        vector<long long> dp(n+1,1e15);\n        dp[n]=0;\n        for(int i=n-1;i>=0;i--)\n        {\n            for(auto x : presence[i])\n            {\n                dp[i]=min(dp[i],cost[x]+dp[i+word[x].size()]);\n            }\n        }\n        if(dp[0]>=1e15) return -1;\n        return dp[0];\n    }\n\n    void KMPSearch(string pat, string txt, vector<int>& result) {\n        int M = pat.size();\n        int N = txt.size();\n        vector<int> lps(M);\n\n        computeLPSArray(pat, M, lps);\n\n        int i = 0; // index for txt[]\n        int j = 0; // index for pat[]\n        while ((N - i) >= (M - j)) {\n            if (pat[j] == txt[i]) {\n                j++;\n                i++;\n            }\n\n            if (j == M) {\n                result.push_back(i - j);\n                j = lps[j - 1];\n            } else if (i < N && pat[j] != txt[i]) {\n                if (j != 0)\n                    j = lps[j - 1];\n                else\n                    i = i + 1;\n            }\n        }\n    }\n\n    void computeLPSArray(string pat, int M, vector<int>& lps) {\n        int len = 0;\n        lps[0] = 0;\n\n        int i = 1;\n        while (i < M) {\n            if (pat[i] == pat[len]) {\n                len++;\n                lps[i] = len;\n                i++;\n            } else {\n                if (len != 0) {\n                    len = lps[len - 1];\n                } else {\n                    lps[i] = 0;\n                    i++;\n                }\n            }\n        }\n    }\n};\n",
    "submit_ts": "1720324495",
    "subm_id": "1312400917"
}