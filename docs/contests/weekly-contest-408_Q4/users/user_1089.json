{
    "username": "i_Sitanshu",
    "submission": "class Solution {\npublic:\n    int bfs(int i, int a, int b, int nodes,vector<vector<int>> &grid) {\n    queue<int> q;\n    int len = nodes + 4;\n    vector<int> vis(len, 0);\n    q.push(i);\n    vis[i] = 1;\n    \n    while (!q.empty()) {\n        int node = q.front();\n        q.pop();\n        for (auto it : grid[node]) {\n            if (!vis[it]) {\n                q.push(it);\n                vis[it] = 1;\n            }\n        }\n    }\n    bool lefttoright = vis[a];\n    bool righttoleft = vis[b];\n    bool result = lefttoright || righttoleft;\n    return result;\n}\n    \n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles2) {\n         vector<pair<pair<int, int>, int>> circles(circles2.size());\n         int len = circles2.size() + 4;\n         vector<vector<int>> graph(len);\n        int num_circles=circles2.size();\n        \n        for (int i = 0; i < num_circles; ++i) {\n            int one = circles2[i][0];\n            int two = circles2[i][1];\n            int three = circles2[i][2];\n            circles[i].first.first=one;\n            circles[i].first.second=two;\n            circles[i].second=three;\n        }\n        \n        \n        \n         for (int i = 0; i < num_circles; ++i) {\n\n            bool cond1 = circles[i].first.first <= circles[i].second;\n            bool cond2 = X - circles[i].first.first <= circles[i].second;\n            bool cond3 = circles[i].first.second <= circles[i].second;\n            bool cond4 = Y - circles[i].first.second <= circles[i].second;\n             \n            if (cond1) {\n                graph[num_circles].push_back(i);\n                graph[i].push_back(num_circles);\n            }\n            if (cond2) {\n                graph[num_circles + 2].push_back(i);\n                graph[i].push_back(num_circles + 2);\n            }\n            if (cond3) {\n                graph[num_circles + 1].push_back(i);\n                graph[i].push_back(num_circles + 1);\n            }\n            if (cond4) {\n                graph[num_circles + 3].push_back(i);\n                graph[i].push_back(num_circles + 3);\n            }\n            for (int j = i + 1; j < num_circles; ++j) {\n                double distance = sqrt(pow(circles[i].first.first - circles[j].first.first, 2) +\n                                       pow(circles[i].first.second - circles[j].first.second, 2));\n                int radius_sum = circles[i].second + circles[j].second;\n                if (radius_sum >= distance) {\n                    graph[i].push_back(j);\n                    graph[j].push_back(i);\n                }\n            }\n        }\n        \n        int is_blocked = 0;\n    is_blocked = max(is_blocked, bfs(num_circles, num_circles + 1, num_circles + 2, num_circles + 4,graph)); // Check for bottom-left corner\n    is_blocked = max(is_blocked, bfs(num_circles + 3, num_circles + 2, num_circles + 1, num_circles + 4,graph)); // Check for top-right corner\n        // cout<<is_blocked<<endl;\n        if (is_blocked){return false;}\n        return true;\n       \n        \n    }\n};\n",
    "submit_ts": "1722138588",
    "subm_id": "1335794608"
}