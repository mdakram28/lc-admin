{
    "username": "adarshj031",
    "submission": "#include <vector> \nusing namespace std; \n \nclass Solution { \nprivate: \n    static const int MOD = 1'000'000'007; \n    vector<vector<vector<int>>> memo; \n \npublic: \n    int countOfPairs(vector<int>& nums) { \n        int n = nums.size(); \n        int maxValue = findMaxValue(nums); \n        memo = vector<vector<vector<int>>>(n, vector<vector<int>>(maxValue + 1, vector<int>(maxValue + 1, -1))); \n        return countHelper(0, 0, maxValue, nums); \n    } \n \nprivate: \n    int countHelper(int index, int prev1, int prev2, vector<int>& nums) { \n        if (index >= nums.size()) { \n            return 1; \n        } \n \n        if (memo[index][prev1][prev2] != -1) { \n            return memo[index][prev1][prev2]; \n        } \n \n        int result = 0; \n        for (int x = prev1; x <= nums[index]; x++) { \n            int first = x; \n            int second = nums[index] - x; \n            if (isValidPair(second, prev2)) { \n                result = (result + countHelper(index + 1, first, second, nums)) % MOD; \n            } \n        } \n \n        return memo[index][prev1][prev2] = result; \n    } \n \n    int findMaxValue(const vector<int>& nums) { \n        int maxValue = 0; \n        for (int num : nums) { \n            maxValue = max(maxValue, num); \n        } \n        return maxValue; \n    } \n \n    bool isValidPair(int second, int prev2) { \n        return second <= prev2 && second >= 0; \n    } \n};",
    "submit_ts": "1723346195",
    "subm_id": "1351572309"
}