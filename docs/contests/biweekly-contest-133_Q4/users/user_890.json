{
    "username": "user0707pg",
    "submission": "#include <vector>\n#include <unordered_map>\nusing namespace std;\n#define ll long long\n\nclass Solution {\nprivate:\n    static const int MOD = 1e9+7;\n    static const int MAX_INVERSIONS = 400;\n\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& requirements) {\n        unordered_map<int, int> converttxn;\n        for (auto& req : requirements) {\n            converttxn[req[0] + 1] = req[1];\n        }\n\n        vector<vector<ll>> dp(n + 1, vector<ll>(MAX_INVERSIONS + 1, 0));\n        dp[0][0] = 1;\n\n        for (int length = 1; length <= n; ++length) {\n            for (int currInv = 0; currInv <= MAX_INVERSIONS; ++currInv) {\n                for (int newPos = 0; newPos < length; ++newPos) {\n                    int prevInv = currInv - newPos;\n                    if (prevInv >= 0) {\n                        dp[length][currInv] = (dp[length][currInv] + dp[length - 1][prevInv]) % MOD;\n                    }\n                }\n            }\n\n            if (converttxn.count(length) > 0) {\n                int reqInv = converttxn[length];\n                for (int currInv = 0; currInv <= MAX_INVERSIONS; ++currInv) {\n                    if (currInv != reqInv) {\n                        dp[length][currInv] = 0;\n                    }\n                }\n            }\n        }\n\n        ll result = 0;\n        for (int currInv = 0; currInv <= MAX_INVERSIONS; ++currInv) {\n            result = (result + dp[n][currInv]) % MOD;\n        }\n\n        return static_cast<int>(result);\n    }\n};",
    "submit_ts": 1719071179.0
}