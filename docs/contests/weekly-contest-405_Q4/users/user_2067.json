{
    "username": "110121076_Riya_Gupta",
    "submission": "class TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    vector<pair<int, int>> wordIndices;  // pair of word index and its cost\n\n    TrieNode() {}\n};\n\nclass Trie {\npublic:\n    TrieNode* root;\n\n    Trie() {\n        root = new TrieNode();\n    }\n\n    void insert(const string& word, int wordIndex, int cost) {\n        TrieNode* node = root;\n        for (char c : word) {\n            if (node->children.find(c) == node->children.end()) {\n                node->children[c] = new TrieNode();\n            }\n            node = node->children[c];\n        }\n        node->wordIndices.emplace_back(wordIndex, cost);\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n         int n = target.length();\n        Trie trie;\n\n        // Build the Trie with words and their corresponding costs\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], i, costs[i]);\n        }\n\n        vector<int> dp(n + 1, INT_MAX);\n        dp[0] = 0; // base case: zero cost to form an empty string\n\n        for (int i = 0; i < n; ++i) {\n            if (dp[i] == INT_MAX) continue; // skip if this part cannot be formed\n\n            TrieNode* node = trie.root;\n            for (int j = i; j < n; ++j) {\n                if (node->children.find(target[j]) == node->children.end()) {\n                    break;\n                }\n                node = node->children[target[j]];\n\n                for (const auto& wordIndexCost : node->wordIndices) {\n                    int wordIndex = wordIndexCost.first;\n                    int cost = wordIndexCost.second;\n                    int word_len = words[wordIndex].length();\n                    dp[j + 1] = min(dp[j + 1], dp[i] + cost);\n                }\n            }\n        }\n\n        return dp[n] == INT_MAX ? -1 : dp[n];\n    }\n};",
    "submit_ts": "1720321649",
    "subm_id": "1312328601"
}