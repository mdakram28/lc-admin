{
    "username": "Katerina_Petrova_23_09_2001",
    "submission": "class Solution {\n    private:\n    void buildGraph(int width, int height, vector<vector<int>>& obstacles, vector<vector<int>>& adjacencyList) {\n        int obstacleCount = obstacles.size();\n\n        for (int i = 0; i < obstacleCount; ++i) {\n            if (isTouchingLeft(obstacles[i])) {\n                addEdge(obstacleCount, i, adjacencyList);\n            }\n            if (isTouchingRight(width, obstacles[i])) {\n                addEdge(obstacleCount + 2, i, adjacencyList);\n            }\n            if (isTouchingBottom(obstacles[i])) {\n                addEdge(obstacleCount + 1, i, adjacencyList);\n            }\n            if (isTouchingTop(height, obstacles[i])) {\n                addEdge(obstacleCount + 3, i, adjacencyList);\n            }\n            for (int j = i + 1; j < obstacleCount; ++j) {\n                if (isIntersecting(obstacles[i], obstacles[j])) {\n                    addEdge(i, j, adjacencyList);\n                }\n            }\n        }\n    }\n\n    bool isTouchingLeft(vector<int>& obstacle) {\n        return obstacle[0] <= obstacle[2];\n    }\n\n    bool isTouchingRight(int width, vector<int>& obstacle) {\n        return width - obstacle[0] <= obstacle[2];\n    }\n\n    bool isTouchingBottom(vector<int>& obstacle) {\n        return obstacle[1] <= obstacle[2];\n    }\n\n    bool isTouchingTop(int height, vector<int>& obstacle) {\n        return height - obstacle[1] <= obstacle[2];\n    }\n\n    bool isIntersecting(vector<int>& obstacle1, vector<int>& obstacle2) {\n        double distance = sqrt(pow(obstacle1[0] - obstacle2[0], 2) + pow(obstacle1[1] - obstacle2[1], 2));\n        int radiusSum = obstacle1[2] + obstacle2[2];\n        return radiusSum >= distance;\n    }\n\n    void addEdge(int node1, int node2, vector<vector<int>>& adjacencyList) {\n        adjacencyList[node1].push_back(node2);\n        adjacencyList[node2].push_back(node1);\n    }\n\n    bool bfsTraversal(vector<vector<int>>& graph, int start, int target1, int target2, int totalNodes) {\n        queue<int> nodesQueue;\n        vector<bool> visited(totalNodes + 4, false);\n        nodesQueue.push(start);\n        visited[start] = true;\n\n        while (!nodesQueue.empty()) {\n            int currentNode = nodesQueue.front();\n            nodesQueue.pop();\n\n            for (int neighbor : graph[currentNode]) {\n                if (!visited[neighbor]) {\n                    nodesQueue.push(neighbor);\n                    visited[neighbor] = true;\n                }\n            }\n        }\n\n        return visited[target1] || visited[target2];\n    }\n\n    bool checkPath(int width, int height, vector<vector<int>>& obstacles) {\n        int obstacleCount = obstacles.size();\n        vector<vector<int>> graph(obstacleCount + 4);\n\n        buildGraph(width, height, obstacles, graph);\n\n        bool isBlocked = false;\n        isBlocked |= bfsTraversal(graph, obstacleCount, obstacleCount + 1, obstacleCount + 2, obstacleCount + 4);\n        isBlocked |= bfsTraversal(graph, obstacleCount + 3, obstacleCount + 2, obstacleCount + 1, obstacleCount + 4);\n\n        return !isBlocked;\n    }\npublic:\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return checkPath(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138565",
    "subm_id": "1335794008"
}