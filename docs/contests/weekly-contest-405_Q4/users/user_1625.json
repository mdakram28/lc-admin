{
    "username": "swapnesh-khemariya",
    "submission": "int dp[50002];\n\nclass TrieNode {\npublic:\n    TrieNode* childNode[26];\n    int cost;\n\n    TrieNode() {\n        memset(childNode, 0, sizeof(childNode));\n        cost = INT_MAX;\n    }\n\n    static void resetDP() { memset(dp, -1, sizeof(dp)); }\n\n    void insert_key(TrieNode* root, const string& key, int cost) {\n        TrieNode* currentNode = root;\n        for (char c : key) {\n            int index = c - 'a';\n            if (currentNode->childNode[index] == nullptr) {\n                currentNode->childNode[index] = new TrieNode();\n            }\n            currentNode = currentNode->childNode[index];\n        }\n\n        currentNode->cost = min(currentNode->cost, cost);\n    }\n\n    int solve(TrieNode* root, const string& target, int n, int i) {\n        if (i >= n)\n            return 0;\n\n        if (dp[i] != -1)\n            return dp[i];\n\n        TrieNode* currentNode = root;\n        int ans = INT_MAX;\n        for (int j = i; j < n; ++j) {\n            int index = target[j] - 'a';\n            if (currentNode->childNode[index] == nullptr)\n                break;\n            currentNode = currentNode->childNode[index];\n            if (currentNode->cost < INT_MAX) {\n                int currCost = solve(root, target, n, j + 1);\n                if (currCost != INT_MAX) {\n                    ans = min(ans, currentNode->cost + currCost);\n                }\n            }\n        }\n        return dp[i] = ans;\n    }\n};\n\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        TrieNode* root = new TrieNode();\n        TrieNode::resetDP();\n\n        for (int i = 0; i < words.size(); ++i) {\n            root->insert_key(root, words[i], costs[i]);\n        }\n\n        int ans = root->solve(root, target, target.size(), 0);\n        delete root;\n        return (ans == INT_MAX) ? -1 : ans;\n    }\n};\n",
    "submit_ts": "1720323417",
    "subm_id": "1312375040"
}