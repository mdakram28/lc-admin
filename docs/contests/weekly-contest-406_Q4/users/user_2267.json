{
    "username": "ravikjha7",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n        PriorityQueue<Integer> hc = new PriorityQueue<>((a, b) -> b - a);\n        PriorityQueue<Integer> vc = new PriorityQueue<>((a, b) -> b - a);\n        \n        for(int i : horizontalCut) hc.add(i);\n        for(int i : verticalCut) vc.add(i);\n        \n        long hn = 1;\n        long vn = 1;\n        \n        long ans = 0;\n        while(!hc.isEmpty() && !vc.isEmpty()) {\n            \n            int a = hc.peek();\n            int b = vc.peek();\n            \n            if(a > b) {\n                hc.poll();\n                ans += a * 1l * vn;\n                hn++;\n            } else {\n                vc.poll();\n                ans += b * 1l * hn;\n                vn++;\n            }\n            \n        }\n        \n        // System.out.println(ans);\n        \n        while(!hc.isEmpty()) {\n            // System.out.println(\"Oh Ho Ho\");\n            int a = hc.poll();\n            ans += a * 1l * vn;\n        }\n        \n        while(!vc.isEmpty()) {\n            int a = vc.poll();\n            ans += a * 1l * hn;\n        }\n        \n        return ans;\n    }\n}",
    "submit_ts": "1720926430",
    "subm_id": "1320286037"
}