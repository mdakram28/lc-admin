{
    "username": "TheCleanser",
    "submission": "typedef long long int ll;\n#define N 100005\n\nstruct segtree{\n    typedef ll T; //replace this\n\n    T id = 0, t[2 * N]; \n    // id is identity: 1 for mult, 0 for add, ll max for min, ll min for max\n    // Make sure N is >= siz of array\n    \n    T func(T a, T b) { return a+b; } // replace this\n \n    void modify(ll p, T v) { //set value v at position p\n        for(t[p += N] = v; p /= 2;) t[p] = func(t[2 * p], t[2 * p + 1]);\n    }\n \n    T query(ll l, ll r) { //query on interval [l, r)\n        T resl = id, resr = id;\n        for(l += N, r += N; l < r; l /= 2, r /= 2) {\n            if(l & 1) resl = func(resl, t[l++]);\n            if(r & 1) resr = func(t[--r], resr);\n        }\n        return func(resl, resr);\n    }\n};\n\nstruct segtree sg;\n\nclass Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int n = colors.size(); int ans = 0;\n        for(int i = 0; i < n; i++){\n            int x = (i == 0) ? (colors[i] != colors[n - 1]) : (colors[i] != colors[i - 1]);\n            sg.modify(i, x);\n        }\n        \n        for(int i = 0; i < n; i++){\n            int front = i; int back = (i + k - 1 + n) % n;\n            if(front <= back){\n                int t = sg.query(front + 1, back + 1);   \n                ans += ((k - 1) == t);\n            }\n            else{\n                int t1 = sg.query(front + 1, n);   \n                int t2 = sg.query(0, back + 1);\n                ans += ((k - 1) == (t1 + t2));\n            }\n        }\n        \n        \n        return ans;\n    }\n};",
    "submit_ts": "1720277215",
    "subm_id": "1311653164"
}