{
    "username": "Prabhatsingh",
    "submission": "class Solution {\npublic:\n    long long minimumCost(int m, int n, vector<int>& horizontalCut, vector<int>& verticalCut) {\n        sort(horizontalCut.rbegin(), horizontalCut.rend());\n        sort(verticalCut.rbegin(), verticalCut.rend());\n        \n      long long   int h = 0, v = 0; \n       long long int ans = 0;\n      long long  int hp = 1, vp = 1; // Initial pieces count\n        \n        while (h < horizontalCut.size() && v < verticalCut.size()){\n            if (horizontalCut[h] >= verticalCut[v]) {\n                ans+=  1ll*horizontalCut[h] * vp;\n                hp++;\n                ++h;\n            } else {\n                ans += 1ll*verticalCut[v] * hp;\n                vp++;\n                ++v;\n            }\n        }\n        \n        // Add the remaining cuts\n        while (h < horizontalCut.size()) {\n            ans += 1ll*horizontalCut[h] * vp;\n            h++;\n        }\n        while (v < verticalCut.size()) {\n            ans += 1ll*verticalCut[v] * hp;\n            v++;\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1720925665",
    "subm_id": "1320262194"
}