{
    "username": "abhayjoshi1104",
    "submission": "class Solution {\nprivate:\n    const int MOD = 1'000'000'007;\n    const int MAX_INV = 400;\n    // Helper function to fill the DP table\n    void fillDP(vector<vector<long long>>& dp, int n, unordered_map<int, int>& reqMap) {\n        int len = 1;\n        while (len <= n) {\n            int curInv = 0;\n            while (curInv <= MAX_INV) {\n                int newPos = 0;\n                while (newPos < len) {\n                    int prevInv = curInv - newPos;\n                    if (prevInv >= 0) {\n                        dp[len][curInv] = (dp[len][curInv] + dp[len - 1][prevInv]) % MOD;\n                    }\n                    ++newPos;\n                }\n                ++curInv;\n            }\n\n            if (reqMap.count(len) > 0) {\n                int reqInv = reqMap[len];\n                int curInv = 0;\n                while (curInv <= MAX_INV) {\n                    if (curInv != reqInv) {\n                        dp[len][curInv] = 0;\n                    }\n                    ++curInv;\n                }\n            }\n\n            ++len;\n        }\n    }\npublic:\n    int numberOfPermutations(int n, vector<vector<int>>& reqs) {\n        unordered_map<int, int> reqMap;\n        for (auto& req : reqs) {\n            reqMap[req[0] + 1] = req[1]; \n        }\n\n        vector<vector<long long>> dp(n + 1, vector<long long>(MAX_INV + 1, 0));\n        dp[0][0] = 1;\n\n        // Fill the dp table\n        fillDP(dp, n, reqMap);\n\n        // Calculate the final result\n        long long res = 0;\n        int curInv = 0;\n        while (curInv <= MAX_INV) {\n            res = (res + dp[n][curInv]) % MOD;\n            ++curInv;\n        }\n\n        return static_cast<int>(res);\n    }\n\n\n};",
    "submit_ts": 1719071345.0
}