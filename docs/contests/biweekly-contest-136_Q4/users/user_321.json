{
    "username": "shivamkrrew_03",
    "submission": "struct my{\n    int l,s,check;\n};\nclass Solution {\npublic:\n    vector<int> parent;\n    vector<my> max_values;\n    vector<vector<int>> graph;\n    void fill(int node){\n        int l = INT_MIN,s = INT_MIN;\n        for(auto &child: graph[node]){\n            if(parent[node] == child)\n                continue;\n            parent[child] = node;\n            fill(child);\n            int value = max_values[child].l;\n            if(child%2 == 0)\n                value += 2;\n            else\n                value += 1;\n            if(value > s)\n                s = value;\n            if(s > l){\n                swap(s,l);\n                // cout<<l<<\" \"<<s<<endl;\n            }\n        }\n        if(l == INT_MIN)\n            l = 0;\n        if(s == INT_MIN)\n            s = 0;\n        max_values[node].l = l;\n        max_values[node].s = s;\n        // if(node == 0)\n        //     cout<<l<<\" \"<<s<<endl<<endl;\n    }\n\n    void fill2(int node){\n        for(auto &child: graph[node]){\n            if(child == parent[node])\n                continue;\n            int v = max_values[child].l;\n            if(child%2 == 0)\n                v+= 2;\n            else \n                v++;\n            if(v == max_values[node].l)\n                v = max_values[node].s;\n            else\n                v = max_values[node].l;\n            v = max(v, max_values[node].check);\n            if(node % 2 == 0)\n                v  += 2;\n            else\n                v++;\n            max_values[child].check = v;\n            fill2(child);\n        }\n    }\n\n\n\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        parent.resize(edges.size()+1);\n        max_values.resize(edges.size()+1);\n        graph.resize(edges.size()+1);\n        for(int i = 0; i < edges.size(); i++){\n            graph[edges[i][0]].push_back(edges[i][1]);\n            graph[edges[i][1]].push_back(edges[i][0]);\n        }\n        int n = edges.size()+1;\n        parent[0] = -1;\n        fill(0); \n        fill2(0);\n        // cout<<max_values[0].first<<\" \"<<max_values[0].second<<endl;\n        vector<int> ans;\n        ans.push_back(max_values[0].l);\n        // cout<<max_values[3].check;\n        for(int i = 1; i < n; i++){\n            // int value = max_values[i].first;\n            // int pv1 = max_values[parent[i]].first;\n            // int pv2 = max_values[parent[i]].second;\n            // // cout<<pv1<<\" \"<<pv2<<endl;\n            // if(i%2 == 0)\n            //     value += 2;\n            // else\n            //     value += 1;\n            // int mp;\n            // if(value == pv1)\n            //     mp = pv2;\n            // else\n            //     mp = pv1;\n            // if(parent[i]%2 == 0)\n            //     mp += 2;\n            // else\n            //     mp += 1;\n            // int fv = max(max_values[i].first , mp);\n            int fv = max(max_values[i].l, max_values[i].check);\n            ans.push_back(fv);\n        }   \n        return ans;\n    }\n};\n\n\n// max of sibling and also check",
    "submit_ts": "1722698947",
    "subm_id": "1343196811"
}