{
    "username": "Venkat089",
    "submission": "class Solution {\n    public long minimumCost(int m, int n, int[] horizontalCut, int[] verticalCut) {\n         PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> b[0] - a[0]);\n        \n        for (int i = 0; i < horizontalCut.length; i++) {\n            pq.add(new int[] {horizontalCut[i], 0}); \n        }\n        for (int j = 0; j < verticalCut.length; j++) {\n            pq.add(new int[] {verticalCut[j], 1}); \n        }\n        long totalCost = 0;\n        long horizontalPieces = 1; \n        long verticalPieces = 1;\n        while (!pq.isEmpty()) {\n            int[] cut = pq.poll();\n            int cost = cut[0];\n            int type = cut[1];\n            \n            if (type == 0) {\n                totalCost += cost * verticalPieces;\n                horizontalPieces++;\n            } else {\n                totalCost += cost * horizontalPieces;\n                verticalPieces++;\n            }\n        }\n        \n        return totalCost;\n    }\n}",
    "submit_ts": "1720926378",
    "subm_id": "1320284443"
}