{
    "username": "Satyansh2021",
    "submission": "class Solution {\npublic:\nbool bfs(vector<vector<int>>& adj, int start, int check1, int check2, int N) {\n        queue<int> q;\n        vector<bool> vis(N, false);\n        q.push(start);\n        vis[start] = true;\n        while (!q.empty()) {\n            int curr = q.front();\n            q.pop();\n            for (auto it : adj[curr]) {\n                if (!vis[it]) {\n                    q.push(it);\n                    vis[it] = true;\n                }\n            }\n        }\n        return vis[check1] || vis[check2];\n}\nbool finalDestination(int X, int Y, vector<vector<int>>& circles) {\n        int n = circles.size();\n        vector<vector<int>> adj(n+4);\n        for (int i = 0; i < n; i++) {\n            if (circles[i][0] <= circles[i][2]) {\n                adj[n].push_back(i);\n                adj[i].push_back(n);\n            }\n            if (circles[i][1] <= circles[i][2]) {\n                adj[n+1].push_back(i);\n                adj[i].push_back(n+1);\n            }\n            if (X - circles[i][0] <= circles[i][2]) {\n                adj[n + 2].push_back(i);\n                adj[i].push_back(n + 2);\n            }\n            if (Y - circles[i][1] <= circles[i][2]) {\n                adj[n+3].push_back(i);\n                adj[i].push_back(n + 3);\n            }\n            for (int j = i+1; j<n; ++j) {\n                double distance = sqrt(pow(circles[i][0] - circles[j][0], 2) + pow(circles[i][1] - circles[j][1], 2));\n                int radius = circles[i][2] + circles[j][2];\n                if (radius >= distance) {\n                    adj[i].push_back(j);\n                    adj[j].push_back(i);\n                }\n            }\n        }\n        bool check = bfs(adj,n,n+1,n+2,n+4) || bfs(adj,n+3, n+2, n+1,n+4);\n        return !check;\n    }\n    bool canReachCorner(int X, int Y, vector<vector<int>>& circles) {\n        return finalDestination(X, Y, circles);\n    }\n};",
    "submit_ts": "1722138938",
    "subm_id": "1335803601"
}