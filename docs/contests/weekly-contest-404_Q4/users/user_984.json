{
    "username": "sachinkumar821",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& graph1, vector<vector<int>>& graph2) {\n        int size1 = graph1.size() + 1;\n        int size2 = graph2.size() + 1;\n        \n        vector<vector<int>> adjList1(size1);\n        vector<vector<int>> adjList2(size2);\n        \n        for (const auto& edge : graph1) {\n            adjList1[edge[0]].push_back(edge[1]);\n            adjList1[edge[1]].push_back(edge[0]);\n        }\n        for (const auto& edge : graph2) {\n            adjList2[edge[0]].push_back(edge[1]);\n            adjList2[edge[1]].push_back(edge[0]);\n        }\n\n        auto dfsTraversal = [](const vector<vector<int>>& adjList, int startNode, int& distantNode) {\n            int n = adjList.size();\n            vector<int> distances(n, -1);\n            function<void(int, int)> dfs = [&](int currentNode, int distance) {\n                distances[currentNode] = distance;\n                if (distance > distances[distantNode]) {\n                    distantNode = currentNode;\n                }\n                for (int neighbor : adjList[currentNode]) {\n                    if (distances[neighbor] == -1) {\n                        dfs(neighbor, distance + 1);\n                    }\n                }\n            };\n            distantNode = startNode;\n            dfs(startNode, 0);\n            return distances[distantNode];\n        };\n\n        int distantNode1 = 0;\n        dfsTraversal(adjList1, 0, distantNode1);\n        int diameter1 = dfsTraversal(adjList1, distantNode1, distantNode1);\n\n        int distantNode2 = 0;\n        dfsTraversal(adjList2, 0, distantNode2);\n        int diameter2 = dfsTraversal(adjList2, distantNode2, distantNode2);\n        \n        int combinedMinDiameter = max(diameter1, diameter2);\n        int halfDiameter1 = (diameter1 + 1) / 2;\n        int halfDiameter2 = (diameter2 + 1) / 2;\n        combinedMinDiameter = max(combinedMinDiameter, halfDiameter1 + halfDiameter2 + 1);\n        \n        return combinedMinDiameter;\n    }\n};\n",
    "submit_ts": 1719715708.0
}