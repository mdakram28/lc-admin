{
    "username": "black-nw",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int m = grid.size();\n        int n = grid[0].size();\n        int row_l = 0, row_r = m - 1;\n        int res = 0;\n        while(row_l < row_r) {\n            int col_l = 0, col_r = n - 1;\n            while(col_l < col_r) {\n                int s = grid[row_l][col_l] + grid[row_l][col_r] + grid[row_r][col_l] + grid[row_r][col_r];\n                if(s == 0 || s == 4) {\n                    ;\n                }\n                else if(s == 1 || s == 3) {\n                    res++;\n                }\n                else {\n                    res += 2;\n                }\n                col_l++;\n                col_r--;\n            }\n            row_l++;\n            row_r--;\n        }\n        if(m % 2 == 1 && n % 2 == 1) {\n            int cur_res = 0;\n            int l = 0, r = n - 1;\n            while(l < r) {\n                if(grid[m / 2][l] != grid[m / 2][r]) {\n                    cur_res++;\n                }\n                l++;\n                r--;\n            }\n            l = 0, r = m - 1;\n            while(l < r) {\n                if(grid[l][n / 2] != grid[r][n / 2]) {\n                    cur_res++;\n                }\n                l++;\n                r--;\n            }\n            if(cur_res == 0) {\n                bool flag = false;\n                l = 0, r = n - 1;\n                while(l < r) {\n                    if(grid[m / 2][l] == 1) {\n                        flag = !flag;\n                    }\n                    l++;\n                    r--;\n                }\n                l = 0, r = m - 1;\n                while(l < r) {\n                    if(grid[l][n / 2] == 1) {\n                        flag = !flag;\n                    }\n                    l++;\n                    r--;\n                }\n                if(flag) {\n                    res += 2;\n                }\n            }\n            res += cur_res;\n            if(grid[m / 2][n / 2] == 1) {\n                res++;\n            }\n        }\n        else if(m % 2 == 1) {\n            int cur_res = 0;\n            int l = 0, r = n - 1;\n            while(l < r) {\n                if(grid[m / 2][l] != grid[m / 2][r]) {\n                    cur_res++;\n                }\n                l++;\n                r--;\n            }\n            if(cur_res == 0) {\n                bool flag = false;\n                l = 0, r = n - 1;\n                while(l < r) {\n                    if(grid[m / 2][l] == 1) {\n                        flag = !flag;\n                    }\n                    l++;\n                    r--;\n                }\n                if(flag) {\n                    res += 2;\n                }\n            }\n            res += cur_res;\n        }\n        else if(n % 2 == 1) {\n            int l = 0, r = m - 1;\n            int cur_res = 0;\n            while(l < r) {\n                if(grid[l][n / 2] != grid[r][n / 2]) {\n                    cur_res++;\n                }\n                l++;\n                r--;\n            }\n            if(cur_res == 0) {\n                bool flag = false;\n                l = 0, r = m - 1;\n                while(l < r) {\n                    if(grid[l][n / 2] == 1) {\n                        flag = !flag;\n                    }\n                    l++;\n                    r--;\n                }\n                if(flag) {\n                    res += 2;\n                }\n            }\n            res += cur_res;\n        }\n        return res;\n    }\n};",
    "submit_ts": "1722698337",
    "subm_id": "552270414"
}