{
    "username": "democoffee",
    "submission": "from math import log2\nfrom typing import List\n\n\nclass Solution:\n    def minimumDifference(self, nums: List[int], k: int) -> int:\n        sz = len(nums)\n        mx = int(log2(sz))\n        if (1 << mx) * 2 <= sz:\n            mx += 1\n\n        bin_and = [nums]\n        pow = 1\n        while (1 << pow) <= sz:\n            bin_and.append([0] * sz)\n            step = 1 << (pow - 1)\n            for i in range(sz - (1 << pow) + 1):\n                bin_and[pow][i] = bin_and[pow-1][i] & bin_and[pow-1][i+step]\n\n            pow += 1\n\n        ans = -1\n        for i in range(sz):\n            l, r = 0, i\n            while l <= r:\n                mid = (l + r) // 2\n                d = i - mid + 1\n                p = int(log2(d))\n                v = bin_and[p][mid] & bin_and[p][i - (1 << p) + 1]\n\n                if v <= k:\n                    l = mid + 1\n                else:\n                    r = mid - 1\n\n            if r >= 0:\n                d = i - r + 1\n                p = int(log2(d))\n                v = bin_and[p][r] & bin_and[p][i - (1 << p) + 1]\n                tv = k - v\n                if ans == -1 or tv < ans:\n                    ans = tv\n\n            l, r = 0, i\n            while l <= r:\n                mid = (l + r) // 2\n                d = i - mid + 1\n                p = int(log2(d))\n                v = bin_and[p][mid] & bin_and[p][i - (1 << p) + 1]\n\n                if v >= k:\n                    r = mid - 1\n                else:\n                    l = mid + 1\n            if l <= i:\n                d = i - l + 1\n                p = int(log2(d))\n                v = bin_and[p][l] & bin_and[p][i - (1 << p) + 1]\n                tv = v - k\n                if ans == -1 or tv < ans:\n                    ans = tv\n\n        return ans\n",
    "submit_ts": 1717298761.0
}