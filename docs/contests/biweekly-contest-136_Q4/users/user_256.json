{
    "username": "sharath101",
    "submission": "class Solution {\n    vector<int> a[100001];\n    \n    int dfs(int v, vector<int> &d, int dep = 0, int p = -1) {\n        int maxDep = dep, node = v;\n        d[v] = dep;\n        for(int u: a[v]) {\n            if(u != p) {\n                int nextDep = dep+1;\n                if(u%2 == 0) nextDep++;\n                auto r = dfs(u, d, nextDep, v);\n                \n                if(r > maxDep)\n                    maxDep = r;\n            }\n        }\n        return maxDep;\n    }\n    \n    void dfs1(int v, vector<int> &d, int dep = 0, int p = -1) {\n        // cout<<v<<\" \"<<d.size()<<\"\\n\";\n        d[v] = dep;\n        for(int u: a[v]) {\n            if(u != p) {\n                if(v%2 == 0)\n                    dfs1(u,d,dep+2,v);\n                else\n                    dfs1(u,d,dep+1,v);\n            }\n        }\n    }\n    \n    int getNode(vector<int> &dep, int depth) {\n        int node = -1;\n        for(int i=0;i<dep.size();i++) {\n            if(dep[i] == depth) {\n                if(node == -1)\n                    node = i;\n                else if(i%2 == 0)\n                    node = i;\n            }\n        }\n        return node;\n    }\n    \npublic:\n    vector<int> timeTaken(vector<vector<int>>& edges) {\n        int n = 0;\n        for(auto ed: edges) {\n            a[ed[0]].push_back(ed[1]);\n            a[ed[1]].push_back(ed[0]);\n            n = max(n, ed[0]);\n            n = max(n, ed[1]);\n        }\n        n+=1;\n        vector<int> d(n);\n        \n        int dep = dfs(0, d);\n        int x1 = getNode(d, dep);\n        d.assign(n, 0);\n        \n        dep = dfs(x1, d);\n        int x2 = getNode(d, dep);\n        d.assign(n, 0);\n        \n        vector<vector<int>> depth(2, vector<int>(n));\n        dfs1(x1, depth[0]);\n        dfs1(x2, depth[1]);\n        \n        // cout<<x1<<\" \"<<x2<<\"\\n\";\n        // for(int i=0;i<n;i++) {\n        //     cout<<i<<\" \"<<d[0][i]<<\"\\n\";\n        // }\n        vector<int> ans(n);\n        for(int i=0;i<n;i++) {\n            ans[i] = max(depth[0][i], depth[1][i]);\n        }\n        return ans;\n    }\n};",
    "submit_ts": "1722699714",
    "subm_id": "1343220049"
}