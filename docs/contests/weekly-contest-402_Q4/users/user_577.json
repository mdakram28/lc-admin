{
    "username": "SathishBatsy",
    "submission": "class Solution {\n    boolean isPeak[];\n    int[] nums;\n    BIT bit;\n    public List<Integer> countOfPeaks(int[] nums, int[][] queries) {\n        int size = nums.length;\n        isPeak = new boolean[size];\n        this.nums = nums;\n        bit = new BIT(size+2);\n        for(int i=1;i<nums.length-1;i++){\n            if(isPeak(i)){\n                isPeak[i] = true;\n                bit.add(i,1);\n            }\n        }\n        List<Integer> result = new ArrayList<Integer>();\n        for(int[] query: queries){\n            int type = query[0];\n            if(type == 1){\n                int left = query[1]+1;\n                int right = query[2]-1;\n                // System.out.println(Arrays.toString(isPeak));\n                // System.out.println(left+\" \"+right);\n                if(left > right){\n                    result.add(0);\n                }\n                else{\n                    result.add((int)bit.query(left, right));    \n                }\n            }\n            else{\n                int index = query[1];\n                int value = query[2];\n                nums[index] = value;\n                for(int i=-1;i<2;i++){\n                    if((index+i) > 0 && (index+i)<(size-1)){\n                        checkAndUpdate(index+i);\n                    }\n                }\n            }\n        }\n        return result;\n    }\n    public void checkAndUpdate(int index){\n        if(isPeak[index] != isPeak(index)){\n            if(isPeak[index]){\n                bit.add(index, -1);\n            }\n            else{\n                bit.add(index, 1);\n            }\n            isPeak[index] = isPeak(index);\n        }\n    }\n    public boolean isPeak(int i){\n        return nums[i]>nums[i-1] && nums[i]>nums[i+1];\n    }\n    class BIT{\n\t\tlong[] tree;\n\t\tpublic BIT(int n) {\n\t\t\ttree = new long[n];\n\t\t}\n\t\tpublic BIT(int[] a) {\n\t\t\tthis(a.length);\n\t\t\tfor(int i=1;i<tree.length;i++) {\n\t\t\t\tadd(i, a[i]);\n\t\t\t}\n\t\t}\n\t\tpublic void add(int i, int val) {\n\t\t\tfor(int j=i;j<tree.length;j += j&(-j)) {\n\t\t\t\ttree[j] += val;\n\t\t\t}\n\t\t}\n\t\tpublic long sum(int i) {\n\t\t\tlong ret = 0;\n\t\t\tfor(int j=i;j>0;j -= j&(-j)) {\n\t\t\t\tret += tree[j];\n\t\t\t}\n\t\t\treturn ret;\n\t\t}\n\t\tvoid range_add(int l, int r, int val) {\n\t\t    add(l, val);\n\t\t    add(r + 1, -val);\n\t\t}\n\t\tpublic long query(int l, int r) {\n\t\t\tlong lSum = 0;\n\t\t\tif(l>1) {\n\t\t\t\tlSum = sum(l-1);\n\t\t\t}\n\t\t\tlong rSum = sum(r);\n\t\t\treturn rSum-lSum;\n\t\t}\n\t}\n}",
    "submit_ts": 1718508265.0
}