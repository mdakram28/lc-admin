{
    "username": "TranDucHieuNe",
    "submission": "from typing import List\n\ndef is_peak(nums, i):\n    if i <= 0 or i >= len(nums) - 1:\n        return False\n    return nums[i] > nums[i - 1] and nums[i] > nums[i + 1]\n\nclass SegmentTree:\n    def __init__(self, nums):\n        self.nums = nums\n        self.n = len(nums)\n        self.tree = [0] * (4 * self.n)\n        self.build(0, 0, self.n - 1)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if is_peak(self.nums, start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def update(self, index, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if is_peak(self.nums, start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= index <= mid:\n                self.update(index, left_child, start, mid)\n            else:\n                self.update(index, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, L, R, node, start, end):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query(L, R, left_child, start, mid)\n        right_query = self.query(L, R, right_child, mid + 1, end)\n        return left_query + right_query\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        if n < 3:\n            return [0] * len(queries)\n        \n        seg_tree = SegmentTree(nums)\n        results = []\n        \n        for query in queries:\n            if query[0] == 1:\n                li, ri = query[1], query[2]\n                if ri - li < 2:\n                    results.append(0)\n                else:\n                    results.append(seg_tree.query(li + 1, ri - 1, 0, 0, n - 1))\n            elif query[0] == 2:\n                indexi, vali = query[1], query[2]\n                if nums[indexi] != vali:\n                    # Update the value\n                    nums[indexi] = vali\n                    # Update the segment tree for the affected indices\n                    for i in range(indexi - 1, indexi + 2):\n                        if 0 <= i < n:\n                            seg_tree.update(i, 0, 0, n - 1)\n        \n        return results\n\n",
    "submit_ts": 1718508659.0
}