{
    "username": "akashsahu1",
    "submission": "from collections import defaultdict\nfrom math import inf\n\nclass TrieNode:\n    def __init__(self):\n        self.children = [None] * 26\n        self.cost = inf\n\nclass Trie:\n    def __init__(self):\n        \"\"\"\n        Initialize your data structure here.\n        \"\"\"\n        self.root = TrieNode()\n\n    def insert(self, word: str, wordCost: int) -> None:\n        \"\"\"\n        Inserts a word into the trie.\n        \"\"\"\n        current = self.root \n\n        for letter in word:\n            index = ord(letter) - ord('a')\n\n            if not current.children[index]:\n                current.children[index] = TrieNode()\n\n            current = current.children[index]\n\n        current.cost = min(current.cost, wordCost)\n\n    def search(self, word: str) -> bool:\n        \"\"\"\n        Returns if the word is in the trie.\n        \"\"\"\n        ans=[]\n        current = self.root \n        n=len(word)\n\n        for i in range(n):\n            index = ord(word[i]) - ord('a')\n\n            if not current.children[index]:\n                return ans\n\n            current = current.children[index]\n\n            if current.cost!=inf:\n                ans.append((i+1,current.cost))\n\n        return ans\n\nclass Solution:\n    def minimumCost(self, target: str, words: List[str], costs: List[int]) -> int:\n        n=len(words)\n        t=Trie()\n\n        for i in range(n):\n            t.insert(words[i],costs[i])\n\n        n=len(target)\n        dp=[inf]*(n+1)\n        dp[n]=0\n\n        for i in range(n-1,-1,-1):\n            s=target[i:]\n            res = t.search(s)\n\n            for l,c in res:\n                dp[i]=min(dp[i],c + dp[i+l])\n\n        return dp[0] if dp[0]!=inf else -1",
    "submit_ts": "1720323450",
    "subm_id": "1312375868"
}