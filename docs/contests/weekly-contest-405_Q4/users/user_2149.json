{
    "username": "Harshit_1207_",
    "submission": "#include <vector>\n#include <string>\n#include <unordered_map>\n#include <climits>\n#include <algorithm>\nusing namespace std;\nclass TrieNode {\npublic:\n    unordered_map<char, TrieNode*> children;\n    int minCost;\n    TrieNode() : minCost(1e9) {}\n};\nclass Trie {\npublic:\n    TrieNode* root;\n    \n    Trie() {\n        root = new TrieNode();\n    }\n    \n    void insert(const string& word, int cost) {\n        TrieNode* currentNode = root;\n        for (char character : word) {\n            if (!currentNode->children.count(character)) {\n                currentNode->children[character] = new TrieNode();\n            }\n            currentNode = currentNode->children[character];\n        }\n        currentNode->minCost = min(currentNode->minCost, cost);\n    }\n};\nclass Solution {\npublic:\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        int targetLength = target.size();\n        \n        Trie trie;\n        for (int i = 0; i < words.size(); ++i) {\n            trie.insert(words[i], costs[i]);\n        }\n        \n        vector<int> minCostToForm(targetLength + 1, 1e9);\n        minCostToForm[0] = 0;\n        \n        for (int startIdx = 0; startIdx < targetLength; startIdx++) {\n            if (minCostToForm[startIdx] == 1e9) continue; \n            \n            TrieNode* currentNode = trie.root;\n            for (int endIdx = startIdx; endIdx < targetLength; endIdx++) {\n                if (!currentNode->children.count(target[endIdx])) break;\n                currentNode = currentNode->children[target[endIdx]];\n                if (currentNode->minCost != 1e9) { \n                    minCostToForm[endIdx + 1] = min(minCostToForm[endIdx + 1], minCostToForm[startIdx] + currentNode->minCost);\n                }\n            }\n        }\n        \n        return minCostToForm[targetLength] == 1e9 ? -1 : minCostToForm[targetLength];\n    }\n};",
    "submit_ts": "1720322804",
    "subm_id": "1312359525"
}