{
    "username": "vedant_5",
    "submission": "class Solution {\npublic:\n    int rec(const string& target, const unordered_map<string, int>& wordCosts, int index, vector<int>& memo) {\n        if (index == target.length()) {\n            return 0;\n        }\n\n        if (memo[index] != -2) {\n            return memo[index];\n        }\n\n        int minCost = INT_MAX;\n        for (const auto& it : wordCosts) {\n            if (target.compare(index, it.first.length(), it.first) == 0) {\n                int remainingCost = rec(target, wordCosts, index + it.first.length(), memo);\n                if (remainingCost != -1) {\n                    minCost = min(minCost, it.second + remainingCost);\n                }\n            }\n        }\n\n        memo[index] = (minCost == INT_MAX) ? -1 : minCost;\n        return memo[index];\n    }\n    int minimumCost(string target, vector<string>& words, vector<int>& costs) {\n        vector<int> memo(target.length(), -2);\n        unordered_map<string, int> wordCosts;\n        for (int i = 0; i < words.size(); i++) {\n            if (wordCosts.find(words[i]) == wordCosts.end())\n                wordCosts[words[i]] = costs[i];\n            else\n                wordCosts[words[i]] = min(wordCosts[words[i]], costs[i]);\n        }\n        return rec(target, wordCosts, 0, memo);\n    }\n};",
    "submit_ts": "1720321990",
    "subm_id": "1312337762"
}