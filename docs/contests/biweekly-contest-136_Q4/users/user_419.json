{
    "username": "rayvivek779",
    "submission": "class Solution {\npublic:\n  vector<int> timeTaken(vector<vector<int>> edges) {\n    int n = edges.size() + 1;\n    vector<vector<int>> graph(n);\n    for (auto & e : edges) {\n      graph[e[0]].push_back(e[1]);\n      graph[e[1]].push_back(e[0]);\n    }\n    vector<int> dp(n, 0), result(n, 0);\n    function<void(int, int)> dfs1 = [&](int node, int par) {\n      int tmp = 0;\n      for (auto & child : graph[node]) {\n        if (child == par) \n          continue;\n        dfs1(child, node);\n        tmp = max(tmp, dp[child] + 1 + (child % 2 == 0));\n      }\n      dp[node] = tmp;\n    };\n    dfs1(0, -1);\n    function<void(int, int, int)> dfs2 = [&](int node, int tmp, int par) {\n      result[node] = max(tmp, dp[node]);\n      multiset<int> st = {tmp};\n      for (auto & child : graph[node]) {\n        if (child == par) \n          continue;\n        st.insert(dp[child] + 1 + (child % 2 == 0));\n      }\n\n      for (auto & child : graph[node]) {\n        if (child == par) \n          continue;\n\n        auto it = st.find(dp[child] + 1 + (child % 2 == 0));\n        st.erase(it);\n\n        int val = *st.rbegin() + 1 + (node % 2 == 0);\n        dfs2(child, val, node);\n        st.insert(dp[child] + 1 + (child % 2 == 0));\n      }\n    };\n    dfs2(0, 0, -1);\n\n    return result;\n  }\n};",
    "submit_ts": "1722697393",
    "subm_id": "1343144931"
}