{
    "username": "hwasnik22",
    "submission": "class Solution {\npublic:\n    int minimumDiameterAfterMerge(vector<vector<int>>& edges1, vector<vector<int>>& edges2) {\n        int d1 = computeDiameter(edges1);\n        int d2 = computeDiameter(edges2);\n\n        return max({d1, d2, (d1 + 1) / 2 + (d2 + 1) / 2 + 1});\n    }\n    \n    pair<int, int> bfs(int start, const vector<vector<int>>& g) {\n        int n = g.size();\n        vector<int> dist(n, -1);\n        queue<int> q;\n        q.push(start);\n        dist[start] = 0;\n        int far = start;\n\n        while (!q.empty()) {\n            int node = q.front();q.pop();\n            for (int adjNode :g[node]) {\n                if (dist[adjNode] == -1) {\n                    dist[adjNode] = dist[node] + 1;\n                    q.push(adjNode);\n                    if (dist[adjNode] > dist[far]) {\n                        far = adjNode;\n                    }\n                }\n            }\n        }\n        return {far, dist[far]};\n    }\n    \n    \n    int computeDiameter(const vector<vector<int>>& edges) {\n        int n = edges.size() + 1;\n        vector<vector<int>> g(n);\n\n        for (const auto& edge : edges) {\n            g[edge[0]].push_back(edge[1]);\n            g[edge[1]].push_back(edge[0]);\n        }\n\n        int ffar = bfs(0, g).first;\n        return bfs(ffar, g).second;\n    }\n\n};\n\n\n\n\n\n",
    "submit_ts": "1719715433",
    "subm_id": "1304336613"
}