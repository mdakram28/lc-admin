{
    "username": "jszqlew",
    "submission": "def dist(a, b):\n    return abs(a[0] - b[0]) + abs(a[1] - b[1])\n\ndef max_distance_points(points):\n    transformed_plus = [(x+y, x, y) for x, y in points]\n    transformed_minus = [(x-y, x, y) for x, y in points]\n    max_plus = max(transformed_plus)\n    min_plus = min(transformed_plus)\n    max_minus = max(transformed_minus)\n    min_minus = min(transformed_minus)\n    distance_plus = abs(max_plus[0] - min_plus[0])\n    distance_minus = abs(max_minus[0] - min_minus[0])\n    if distance_plus > distance_minus:\n        return max_plus[1:], min_plus[1:], distance_plus\n    else:\n        return max_minus[1:], min_minus[1:], distance_minus\n\ndef without(l, x):\n    l = l[:]\n    l.remove(x)\n    return l\n\nclass Solution:\n    def minimumDistance(self, points: List[List[int]]) -> int:\n        points = list(map(tuple, points))\n        a, b, max_distance = max_distance_points(points)\n        fa, fb, fd = max_distance_points(without(points, a))\n        sa, sb, sd = max_distance_points(without(points, b))\n        \n        return min([max_distance, fd, sd])\n        \n    \n    \n\n        "
}