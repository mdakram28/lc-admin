{
    "username": "wei-ceng-qu-guo-dao-xuan-shan-9",
    "submission": "from typing import List\n\nclass SegmentTree:\n    def __init__(self, data):\n        self.n = len(data)\n        self.tree = [0] * (4 * self.n)\n        self.data = data\n        self.build(0, 0, self.n - 1)\n\n    def build(self, node, start, end):\n        if start == end:\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            self.build(left_child, start, mid)\n            self.build(right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def is_peak(self, i):\n        if i <= 0 or i >= self.n - 1:\n            return False\n        return self.data[i] > self.data[i - 1] and self.data[i] > self.data[i + 1]\n\n    def update(self, idx, value, node, start, end):\n        if start == end:\n            self.data[idx] = value\n            self.tree[node] = 1 if self.is_peak(start) else 0\n        else:\n            mid = (start + end) // 2\n            left_child = 2 * node + 1\n            right_child = 2 * node + 2\n            if start <= idx <= mid:\n                self.update(idx, value, left_child, start, mid)\n            else:\n                self.update(idx, value, right_child, mid + 1, end)\n            self.tree[node] = self.tree[left_child] + self.tree[right_child]\n\n    def query(self, L, R, node, start, end):\n        if R < start or end < L:\n            return 0\n        if L <= start and end <= R:\n            return self.tree[node]\n        mid = (start + end) // 2\n        left_child = 2 * node + 1\n        right_child = 2 * node + 2\n        left_query = self.query(L, R, left_child, start, mid)\n        right_query = self.query(L, R, right_child, mid + 1, end)\n        return left_query + right_query\n\n    def range_query(self, L, R):\n        return self.query(L, R, 0, 0, self.n - 1)\n\n    def point_update(self, idx, value):\n        old_value = self.data[idx]\n        self.update(idx, value, 0, 0, self.n - 1)\n        # \u66f4\u65b0\u76f8\u90bb\u5143\u7d20\u7684\u5cf0\u503c\u72b6\u6001\n        if idx > 0:\n            self.update(idx - 1, self.data[idx - 1], 0, 0, self.n - 1)\n        if idx < self.n - 1:\n            self.update(idx + 1, self.data[idx + 1], 0, 0, self.n - 1)\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        st = SegmentTree(nums)\n        answer = []\n        for q in queries:\n            if q[0] == 1:\n                li, ri = q[1], q[2]\n                if li < ri - 1:\n                    answer.append(st.range_query(li + 1, ri - 1))\n                else:\n                    answer.append(0)\n            elif q[0] == 2:\n                indexi, vali = q[1], q[2]\n                st.point_update(indexi, vali)\n        return answer\n\n",
    "submit_ts": "1718508055",
    "subm_id": "539785075"
}