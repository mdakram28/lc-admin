{
    "username": "lvinayreddy746",
    "submission": "class Solution {\n    \n    static int bfs(ArrayList<ArrayList<Integer>> Graph, int s, boolean flag){\n         int N = Graph.size();\n         int dis[] = new int[N];\n         \n         for(int i=0;i<N;i++){\n             dis[i]=-1;\n         }\n         Queue<Integer> que = new LinkedList<>();\n         que.add(s);\n         dis[s]=0;\n         int u=0;\n         while(que.size()>0){\n             u = que.remove();\n             for(Integer v : Graph.get(u)){\n                 if(dis[v]==-1){\n                     dis[v] = dis[u]+1;\n                     que.add(v);\n                 }\n             }\n         }\n         \n         if(flag==true){\n             return u; // returning last node\n         }else{\n             return dis[u];\n         }\n    }\n    \n    public int minimumDiameterAfterMerge(int[][] edges1, int[][] edges2) {\n        ArrayList<ArrayList<Integer>> Graph1 = new ArrayList<>();\n        ArrayList<ArrayList<Integer>> Graph2 = new ArrayList<>();\n        \n        int E1 = edges1.length;\n        int E2 = edges2.length;\n        \n        int n1 = E1+1;\n        int n2 = E2+1;\n        \n        for(int i=0;i<n1;i++){\n            Graph1.add(new ArrayList<>());\n        }\n        \n        for(int i=0;i<n2;i++){\n            Graph2.add(new ArrayList<>());\n        }\n        \n        for(int i=0;i<E1;i++){\n            int u = edges1[i][0];\n            int v = edges1[i][1];\n            Graph1.get(u).add(v);\n            Graph1.get(v).add(u);\n        }\n        \n        for(int i=0;i<E2;i++){\n            int u = edges2[i][0];\n            int v = edges2[i][1];\n            Graph2.get(u).add(v);\n            Graph2.get(v).add(u);\n        }\n        \n        int last_node1 = bfs(Graph1,0,true);\n        int max1 = bfs(Graph1,last_node1,false);\n        \n        int last_node2 = bfs(Graph2,0,true);\n        int max2 = bfs(Graph2,last_node2,false);\n        \n        // System.out.println(max1 + \" \"+ max2);\n        \n        int res = 0;\n        res += max1/2;\n        if(max1%2==1){\n            res+=1;\n        }\n        res += max2/2;\n        if(max2%2==1){\n            res+=1;\n        }\n        res+=1;\n        int ans = Math.max(res,Math.max(max1,max2));\n        return ans;\n    }\n        \n}\n\n",
    "submit_ts": "1719719520",
    "subm_id": "1304443942"
}