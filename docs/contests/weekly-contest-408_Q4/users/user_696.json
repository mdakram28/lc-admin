{
    "username": "urimaj",
    "submission": "class Solution {\npublic:\n    vector<int> size;\n    vector<int> dsu;\n    \n    int root(int a) {\n        int r = a;\n        while (dsu[a] != a) a = dsu[a];\n        dsu[r] = a;\n        return a;\n    }\n    \n    void union_operation(int a, int b) {\n        int ra = root(a);\n        int rb = root(b);\n        if (ra != rb) {\n            if (size[ra] > size[rb]) {\n                size[rb] += size[ra];\n                dsu[ra] = rb;\n            }\n            else {\n                size[ra] += size[rb];\n                dsu[rb] = ra;\n            }\n        }\n    }\n\n    bool canReachCorner(int X, int Y, vector<vector<int>>& c) {\n        vector<vector<bool>> touch(c.size(), vector<bool>(4));\n        vector<vector<bool>> touch2(c.size(), vector<bool>(4));\n\n        for (int i = 0; i < c.size(); i++) {\n            auto cc = c[i];\n            long long x = cc[0];\n            long long y = cc[1];\n            long long r = cc[2];\n            \n            //(0, 0), (0, Y)\n            bool left = d(x, y, 0, 0) > r * r && d(x, y, 0, Y) > r * r && d(x, y, 0, y) > r * r;\n            \n            //(X, 0), (X, Y)\n            bool right = d(x, y, X, 0) > r * r && d(x, y, X, Y) > r * r && d(x, y, X, y) > r * r;\n            \n            //(0, Y), (X, Y)\n            bool top = d(x, y, 0, Y) > r * r && d(x, y, X, Y) > r * r && d(x, y , x, Y) > r * r;\n            \n            //(0, 0), (X, 0)\n            bool bottom = d(x, y, 0, 0) > r * r && d(x, y, X, 0) > r * r && d(x, y, x, 0) > r * r;\n            \n            // cout << left << \" \" << right << \" \" << top << \" \" << bottom << endl;\n            if (!left && !right && !top && !bottom) return false;\n            touch[i] = {!left, !right, !top, !bottom};\n        }\n        \n        for (int i = 0 ;i < c.size(); i++) {\n            size.push_back(1);\n            dsu.push_back(i);\n        }\n        \n        for (int i = 0; i < c.size(); i++) {\n            for (int j = 0; j < i; j++) {\n                if (intersect(c, i, j)) {\n                    union_operation(i, j);\n                }\n            }\n        }\n        \n        unordered_map<int,vector<int>> groups;\n        for (int i = 0; i < c.size(); i++) {\n            groups[root(i)].push_back(i);\n        }\n        \n        for (auto& [x, y] : groups) {\n            vector<bool> t(4);\n            for (int z : y) {\n                auto res = touch[z];\n                for (int j = 0; j < 4; j++) {\n                    // t[j] = res[j];\n                    if (res[j]) t[j] = true;\n                }\n            }\n            int left = t[0];\n            int right = t[1];\n            int top = t[2];\n            int bottom = t[3];\n            if (left && right || left && bottom || top && right || top && bottom) return false;\n        }\n        \n        \n        return true;\n    }\n    \n    long long d(long long x1, long long y1, long long x2, long long y2) {\n        return (x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2);\n    }\n    \n    bool intersect(vector<vector<int>>& c, int i1, int i2) {\n        long long x1 = c[i1][0];\n        long long y1 = c[i1][1];\n        long long r1 = c[i1][2];\n        \n        long long x2 = c[i2][0];\n        long long y2 = c[i2][1];\n        long long r2 = c[i2][2];\n        \n        long long dx = x1 - x2;\n        long long dy = y1 - y2;\n        long long distSq = dx * dx + dy * dy;\n        return (r1 + r2) * (r1 + r2) >= distSq;\n    }\n};",
    "submit_ts": "1722138055",
    "subm_id": "1335780943"
}