{
    "username": "VenisPatel",
    "submission": "class Solution {\npublic:\n    int minFlips(vector<vector<int>>& grid) {\n        int rowCount = grid.size();\n        int colCount = grid[0].size();\n        int totalFlips = 0;\n        \n        // Check if the center element needs to be flipped for odd dimensions\n        if (rowCount % 2 == 1 && colCount % 2 == 1) {\n            if (grid[rowCount / 2][colCount / 2] == 1) {\n                totalFlips += 1;\n            }\n        }\n\n        // To keep track of flips needed for row and column symmetries\n        vector<int> symmetryCount(3, 0);\n\n        // Evaluate flips needed for the middle row if rows are odd\n        if (rowCount % 2 == 1) {\n            int leftIndex = 0, rightIndex = colCount - 1;\n            while (leftIndex < rightIndex) {\n                int sum = grid[rowCount / 2][leftIndex] + grid[rowCount / 2][rightIndex];\n                symmetryCount[sum]++;\n                leftIndex++;\n                rightIndex--;\n            }\n        }\n\n        // Evaluate flips needed for the middle column if columns are odd\n        if (colCount % 2 == 1) {\n            int topIndex = 0, bottomIndex = rowCount - 1;\n            while (topIndex < bottomIndex) {\n                int sum = grid[topIndex][colCount / 2] + grid[bottomIndex][colCount / 2];\n                symmetryCount[sum]++;\n                topIndex++;\n                bottomIndex--;\n            }\n        }\n\n        // Calculate the minimum flips based on symmetry count\n        if (symmetryCount[2] % 2 == 1) {\n            if (symmetryCount[1] > 0) {\n                totalFlips += symmetryCount[1];\n            } else {\n                totalFlips += 2;\n            }\n        } else {\n            totalFlips += symmetryCount[1];\n        }\n\n        // Adjust each 2x2 block for palindromic symmetry\n        for (int r = 0; r < rowCount / 2; ++r) {\n            for (int c = 0; c < colCount / 2; ++c) {\n                int topLeft = grid[r][c];\n                int bottomLeft = grid[rowCount - 1 - r][c];\n                int topRight = grid[r][colCount - 1 - c];\n                int bottomRight = grid[rowCount - 1 - r][colCount - 1 - c];\n\n                int total = topLeft + bottomLeft + topRight + bottomRight;\n\n                if (total != 0 && total != 4) {\n                    totalFlips += min(total, 4 - total);\n                }\n            }\n        }\n        cout<<totalFlips<<endl;\n        return totalFlips;\n    }\n};",
    "submit_ts": "1722699828",
    "subm_id": "1343223609"
}