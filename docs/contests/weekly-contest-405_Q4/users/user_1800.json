{
    "username": "ridam25",
    "submission": "class Solution {\n   class Node {\n        Node [] links ;\n        int endCost ;\n        Node() {\n            links = new Node[26];\n            endCost = -1 ;\n        }\n\n        boolean containsKey(char ch){\n            return links[ch - 'a'] != null ;\n        }\n\n        void put(char ch, Node node){\n           links[ch - 'a'] = node ;\n        }\n      \n        Node get(char ch){\n            return links[ch - 'a'];\n        }\n        \n        void updateEndCost(int cost){\n            if(this.endCost  == -1) this.endCost = cost ;\n            else this.endCost = Math.min(this.endCost, cost);\n            // this.endCost = cost ;\n        }\n\n        int getEndCost(){\n            return this.endCost ;\n        }\n    }\n    \n    class Trie{\n        Node root ;\n        Trie(){\n            root = new Node();\n        }\n        void insert(String word, int idx){\n            int n = word.length();\n            Node node = root ;\n            for(int i = 0 ; i < n ; i++){\n                char ch = word.charAt(i);\n                if(!node.containsKey(ch)){\n                    node.put(ch, new Node());\n                }\n                node = node.get(ch);\n            }\n            node.updateEndCost(idx);\n        }\n    }\n    public Integer[]dp = new Integer[50001];\n    public int minimumCost(String target, String[] words, int[] costs) {\n        int n = words.length;\n        Trie t = new Trie();\n        for(int i = 0 ; i < n ; i++){\n            t.insert(words[i], costs[i]);\n        }\n        int res = helper(t.root, target, 0);\n        return res == Integer.MAX_VALUE ? -1 : res ;\n    }\n    \n    public int helper(Node root, String target, int idx){\n           if(idx == target.length())return 0 ;\n           if(dp[idx] != null)return dp[idx];\n           int cost = Integer.MAX_VALUE ;\n           Node node = root ;\n           for(int i = idx ; i < target.length() ; i++){\n               char ch = target.charAt(i);\n               if(node.containsKey(ch)){\n                   node = node.get(ch);\n                   if(node.getEndCost() != -1){\n                       int rr = helper(root, target, i + 1);\n                       if(rr != Integer.MAX_VALUE){\n                           cost = Math.min(cost, node.getEndCost() + rr);\n                       }\n                   }\n               }\n               else break ;\n           }\n           return dp[idx] = cost ;\n    }\n}",
    "submit_ts": "1720324220",
    "subm_id": "1312394375"
}