{
    "username": "Ramakrishna Gaddam",
    "submission": "class Solution {\n    public long maximumValueSum(int[][] board) {\n\n        List<List<Integer>> cells = new ArrayList<>();\n\n        int n = board.length;\n        int m = board[0].length;\n        for (int i = 0; i < n; i++) {\n            for (int j = 0; j < m; j++) {\n                cells.add(List.of(board[i][j], i, j));\n            }\n        }\n        Collections.sort(cells, Comparator.comparingInt(a -> -a.get(0)));\n\n        long res = Long.MIN_VALUE;\n        // System.out.println(cells);\n\n        for (int i = 0; i < cells.size(); i++) {\n            long curRes = cells.get(i).get(0);\n            Set<Integer> rows = new LinkedHashSet<>();\n            rows.add(cells.get(i).get(1));\n            Set<Integer> cols = new LinkedHashSet<>();\n            cols.add(cells.get(i).get(2));\n            int curIdx = i;\n            for (int k = 1; k <= (m + n+3); k++) {\n                int idx = curIdx + k;\n                if (idx < cells.size()) {\n                    int x = cells.get(idx).get(1);\n                    int y = cells.get(idx).get(2);\n\n                    if (!rows.contains(x) && !cols.contains(y)) {\n                        curRes += cells.get(idx).get(0);\n                        rows.add(x);\n                        cols.add(y);\n                        curIdx = idx;\n                        break;\n                    }\n                }\n            }\n            if (rows.size() == 2) {\n\n                for (int k = 1; k <= (m + n+3); k++) {\n                    int idx = curIdx + k;\n                \n                    if (idx < cells.size()) {\n                        int x = cells.get(idx).get(1);\n                        int y = cells.get(idx).get(2);\n\n                        if (!rows.contains(x) && !cols.contains(y)) {\n                            curRes += cells.get(idx).get(0);\n                            rows.add(x);\n                            cols.add(y);\n                            break;\n                        }\n                    }\n                }\n            }\n            if (rows.size() == 3) {\n                res = Math.max(res, curRes);\n            }\n\n            curIdx = curIdx+1;\n            if (rows.size() == 3) {\n                rows.clear();\n                cols.clear();\n                curRes = 0;\n                rows.add(cells.get(i).get(1));\n                cols.add(cells.get(i).get(2));\n                curRes = cells.get(i).get(0);\n                // curIdx++;\n                while (curIdx <= (i + m + n+3) && curIdx < cells.size()) {\n                    int idx = curIdx;\n                    curIdx++;\n                    if (idx < cells.size()) {\n                        int x = cells.get(idx).get(1);\n                        int y = cells.get(idx).get(2);\n\n                        if (!rows.contains(x) && !cols.contains(y)) {\n                            curRes += cells.get(idx).get(0);\n                            rows.add(x);\n                            cols.add(y);\n                            curIdx = idx;\n                            break;\n                        }\n                    }\n                }\n                if (rows.size() == 2) {\n\n                    for (int k = 1; k <= (m + n+3); k++) {\n                        int idx = curIdx + k;\n                        if (idx < cells.size()) {\n                            int x = cells.get(idx).get(1);\n                            int y = cells.get(idx).get(2);\n\n                            if (!rows.contains(x) && !cols.contains(y)) {\n                                curRes += cells.get(idx).get(0);\n                                rows.add(x);\n                                cols.add(y);\n                                break;\n                            }\n                        }\n                    }\n                }\n                if (rows.size() == 3) {\n                    res = Math.max(res, curRes);\n                }\n\n            }\n        }\n        return res;\n    }\n}\n\n/***\n-30 62 -21\n40 -76 -98\n57 -15 -65\n */",
    "submit_ts": "1723909836",
    "subm_id": "1359207587"
}