{
    "username": "Mr_TaiL_",
    "submission": "class Solution {\npublic:\n    int numberOfAlternatingGroups(vector<int>& colors, int k) {\n        int ans{0};\n        const int n = colors.size();\n        vector<int> dp(n, 0);\n        for (int i = 0; i < n; i++) {\n            if (i > 1 && dp[i-1] == 1) {\n                int n1 = (i + k - 2) % n;\n                int n2 = (i + k - 1) % n;\n                if (colors[n1] != colors[n2]) {\n                    dp[i] = 1;\n                    ans++;\n                } else {\n                    if (i + k - 2 >= n) {\n                        break;\n                    }\n                    i = n1;\n                }\n                cout << \"1 i=\" << i << endl;\n                continue;\n            }\n            int next{0};\n            if (check(colors, k, i, next)) {\n                dp[i] = 1;\n                ans++;\n            } else {\n                if (next >= n) {\n                    break;\n                }\n                i = next;\n            }\n        }\n        return ans;\n    }\n    bool check(vector<int>& colors, int k, int idx, int& next) {\n        int n = colors.size();\n        for (int i = 0; i < k - 1; i++) {\n            int n1 = (idx + i) % n;\n            int n2 = (idx + i + 1) % n;\n            if (colors[n1] == colors[n2]) {\n                next = idx + i;\n                return false;\n            }\n        }\n        return true;\n    }\n};",
    "submit_ts": "1720279141",
    "subm_id": "1311739142"
}