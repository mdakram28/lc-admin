{
    "username": "iiijjj",
    "submission": "class Solution:\n    def compute_powers(self, n, k):\n        powers = [1] * (n + 1)\n        for i in range(1, n + 1):\n            powers[i] = (powers[i - 1] * 10) % k\n        return powers\n\n    def dfs(self, current, index, curr_mod, n, k, powers, memo):\n        if index > n // 2 or (index == n // 2 and n % 2 == 0):\n            return \"\".join(current) if curr_mod == 0 else \"\"\n\n        key = (index, curr_mod)\n        if key in memo:\n            return memo[key]\n\n        res = \"\"\n        start = 1 if index == 0 else 0\n        for c in range(9, start - 1, -1):\n            c_char = str(c)\n            current[index] = c_char\n            if index < n - index - 1:\n                current[n - index - 1] = c_char\n            new_mod = (curr_mod + c * (powers[index] + (powers[n - index - 1] if index != n - index - 1 else 0))) % k\n            temp = self.dfs(current, index + 1, new_mod, n, k, powers, memo)\n            if temp:  # \u5982\u679c\u627e\u5230\u4e00\u4e2a\u7ed3\u679c\uff0c\u5e76\u4e14\u8fd9\u4e2a\u7ed3\u679c\u662f\u76ee\u524d\u4e3a\u6b62\u6700\u5927\u7684\uff0c\u7acb\u5373\u8fd4\u56de\n                if temp > res:\n                    res = temp\n                    break  # \u4e00\u65e6\u627e\u5230\u6700\u5927\u7684\u7ed3\u679c\uff0c\u5c31\u9000\u51fa\u5faa\u73af\n            current[index] = '#'\n            if index < n - index - 1:\n                current[n - index - 1] = '#'\n\n        memo[key] = res\n        return res\n\n    def largestPalindrome(self, n: int, k: int) -> str:\n        powers = self.compute_powers(n, k)\n        current = ['#'] * n\n        memo = {}\n        result = self.dfs(current, 0, 0, n, k, powers, memo)\n        return result",
    "submit_ts": "1723952010",
    "subm_id": "1359785605"
}