{
    "username": "drexdelta",
    "submission": "class Solution {\npublic:\n    int maximumLength(vector<int>& nums, int k) {\n        set<int> s;\n        for(auto i : nums) s.insert(i);\n        \n        unordered_map<int,int> m;\n        int counter = 1;\n        for(auto i : s) {\n            m[i] = counter;\n            counter++;\n        }\n\n        int n = nums.size();\n\n        int dp[counter+1][k+1];\n        \n        for(int i = 0 ; i <= counter ; i++) {\n            for(int j = 0 ; j <= k ; j++) {\n                dp[i][j] = 0;\n            }\n        }\n        \n        multiset<int> globalSet[k+1];\n        \n        int ans = 0;\n        \n        for(auto i : nums) {\n            int compressedNumber = m[i];\n            \n            \n            for(int j = 0 ; j <= k ; j++) {\n                if(dp[compressedNumber][j] > 0) {\n                    globalSet[j].erase(dp[compressedNumber][j]);\n                }\n            }\n            \n            dp[compressedNumber][0]++;\n            ans = max(ans, dp[compressedNumber][0]);\n            for(int j = 1 ; j <= k ; j++) {\n                if(dp[compressedNumber][j] > 0) {\n                    dp[compressedNumber][j]++;\n                    ans = max(ans, dp[compressedNumber][j]);\n                }\n            }\n            \n            for(int j = 1 ; j <= k ; j++) {\n                if(globalSet[j-1].size() > 0) {\n                    auto it = globalSet[j-1].end();\n                    it--;\n                    dp[compressedNumber][j] = max(dp[compressedNumber][j], *it + 1);\n                    ans = max(ans, dp[compressedNumber][j]);\n                }\n            }\n            \n            for(int j = 0 ; j <= k ; j++) {\n                if(dp[compressedNumber][j] > 0) {\n                    globalSet[j].insert(dp[compressedNumber][j]);\n                }\n            }\n        }\n        \n        return ans;\n        \n    }\n};",
    "submit_ts": 1717861470.0
}