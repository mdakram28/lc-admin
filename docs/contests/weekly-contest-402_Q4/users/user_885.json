{
    "username": "nirodha",
    "submission": "class SegmentTree:\n    def __init__(self, data, merge): \n        '''\n        data:\u4f20\u5165\u7684\u6570\u7ec4\n        merge:\u5904\u7406\u7684\u4e1a\u52a1\u903b\u8f91\uff0c\u4f8b\u5982\u6c42\u548c/\u6700\u5927\u503c/\u6700\u5c0f\u503c\uff0clambda\u8868\u8fbe\u5f0f\n        '''\n\n        self.data = data\n        self.n = len(data)\n        #  \u7533\u8bf74\u500ddata\u957f\u5ea6\u7684\u7a7a\u95f4\u6765\u5b58\u7ebf\u6bb5\u6811\u8282\u70b9\n        self.tree = [None] * (4 * self.n) # \u7d22\u5f15i\u7684\u5de6***\u7d22\u5f15\u4e3a2i+1\uff0c\u53f3***\u4e3a2i+2\n        self._merge = merge\n        if self.n:\n            self._build(0, 0, self.n-1)\n\n\n    def query(self, ql, qr):\n        '''\n        \u8fd4\u56de\u533a\u95f4[ql,..,qr]\u7684\u503c\n        '''\n        return self._query(0, 0, self.n-1, ql, qr)\n\n    def update(self, index, value):\n        # \u5c06data\u6570\u7ec4index\u4f4d\u7f6e\u7684\u503c\u66f4\u65b0\u4e3avalue,\u7136\u540e\u9012\u5f52\u66f4\u65b0\u7ebf\u6bb5\u6811\u4e2d\u88ab\u5f71\u54cd\u7684\u5404\u8282\u70b9\u7684\u503c\n        self.data[index] = value\n        self._update(0, 0, self.n-1, index)\n\n    def _build(self, tree_index, l, r):\n        '''\n        \u9012\u5f52\u521b\u5efa\u7ebf\u6bb5\u6811\n        tree_index : \u7ebf\u6bb5\u6811\u8282\u70b9\u5728\u6570\u7ec4\u4e2d\u4f4d\u7f6e\n        l, r : \u8be5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6,\u53f3\u8fb9\u754c\n        '''\n        if l == r:\n            self.tree[tree_index] = self.data[l]\n            return\n        mid = (l+r) // 2 # \u533a\u95f4\u4e2d\u70b9,\u5bf9\u5e94\u5de6***\u533a\u95f4\u7ed3\u675f,\u53f3***\u533a\u95f4\u5f00\u5934\n        left, right = 2 * tree_index + 1, 2 * tree_index + 2 # tree_index\u7684\u5de6\u53f3\u5b50\u6811\u7d22\u5f15\n        self._build(left, l, mid)\n        self._build(right, mid+1, r)\n        self.tree[tree_index] = self._merge(self.tree[left], self.tree[right])\n\n    def _query(self, tree_index, l, r, ql, qr):\n        '''\n        \u9012\u5f52\u67e5\u8be2\u533a\u95f4[ql,..,qr]\u7684\u503c\n        tree_index : \u67d0\u4e2a\u6839\u8282\u70b9\u7684\u7d22\u5f15\n        l, r : \u8be5\u8282\u70b9\u8868\u793a\u7684\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        ql, qr: \u5f85\u67e5\u8be2\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        '''\n        if l == ql and r == qr:\n            return self.tree[tree_index]\n\n        mid = (l+r) // 2 # \u533a\u95f4\u4e2d\u70b9,\u5bf9\u5e94\u5de6***\u533a\u95f4\u7ed3\u675f,\u53f3***\u533a\u95f4\u5f00\u5934\n        left, right = tree_index * 2 + 1, tree_index * 2 + 2\n        if qr <= mid:\n            # \u67e5\u8be2\u533a\u95f4\u5168\u5728\u5de6\u5b50\u6811\n            return self._query(left, l, mid, ql, qr)\n        elif ql > mid:\n            # \u67e5\u8be2\u533a\u95f4\u5168\u5728\u53f3\u5b50\u6811\n            return self._query(right, mid+1, r, ql, qr)\n\n        # \u67e5\u8be2\u533a\u95f4\u4e00\u90e8\u5206\u5728\u5de6\u5b50\u6811\u4e00\u90e8\u5206\u5728\u53f3\u5b50\u6811\n        return self._merge(self._query(left, l, mid, ql, mid), \n                          self._query(right, mid+1, r, mid+1, qr))\n\n    def _update(self, tree_index, l, r, index):\n        '''\n        tree_index:\u67d0\u4e2a\u6839\u8282\u70b9\u7d22\u5f15\n        l, r : \u6b64\u6839\u8282\u70b9\u4ee3\u8868\u533a\u95f4\u7684\u5de6\u53f3\u8fb9\u754c\n        index : \u66f4\u65b0\u7684\u503c\u7684\u7d22\u5f15\n        '''\n        if l == r == index:\n            self.tree[tree_index] = self.data[index]\n            return\n        mid = (l+r)//2\n        left, right = 2 * tree_index + 1, 2 * tree_index + 2\n        if index > mid:\n            # \u8981\u66f4\u65b0\u7684\u533a\u95f4\u5728\u53f3\u5b50\u6811\n            self._update(right, mid+1, r, index)\n        else:\n            # \u8981\u66f4\u65b0\u7684\u533a\u95f4\u5728\u5de6\u5b50\u6811index<=mid\n            self._update(left, l, mid, index)\n        # \u91cc\u9762\u7684\u5c0f\u533a\u95f4\u53d8\u5316\u4e86\uff0c\u5305\u88f9\u7684\u5927\u533a\u95f4\u4e5f\u8981\u66f4\u65b0\n        self.tree[tree_index] = self._merge(self.tree[left], self.tree[right])\n\nclass Solution:\n    def countOfPeaks(self, nums: List[int], queries: List[List[int]]) -> List[int]:\n        n = len(nums)\n        temp = [0] * n\n        for i in range(1, n - 1):\n            if nums[i] > nums[i - 1] and nums[i] > nums[i + 1]:\n                temp[i] = 1\n        def f(a, b):\n            return a + b\n        res = []\n        st = SegmentTree(temp, f)\n        for t,a,b in queries:\n            if t == 1:\n                if b - a <= 1:\n                    res.append(0)\n                    continue\n                else:\n                    value = st.query(a + 1, b - 1)\n                    res.append(value)\n            else:\n                nums[a] = b\n                if a > 0 and a < n - 1:\n                    temp1 = 0\n                    if nums[a] > nums[a - 1] and nums[a] > nums[a + 1]:\n                        temp1 = 1\n                    if temp1 != temp[a]:\n                        temp[a] = temp1\n                        st.update(a, temp1)\n                if a > 1:\n                    temp2 = 0\n                    if nums[a - 1] > nums[a] and nums[a - 1] > nums[a - 2]:\n                        temp2 = 1\n                    if temp2 != temp[a - 1]:\n                        temp[a - 1] = temp2\n                        st.update(a - 1, temp2)\n                if a < n - 2:\n                    temp3 = 0\n                    if nums[a + 1] > nums[a] and nums[a + 1] > nums[a + 2]:\n                        temp3 = 1\n                    if temp3 != temp[a + 1]:\n                        temp[a + 1] = temp3\n                        st.update(a + 1, temp3)\n        return res\n                    ",
    "submit_ts": 1718509027.0
}