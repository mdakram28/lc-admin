{
    "username": "garyjhu",
    "submission": "import java.util.ArrayDeque;\nimport java.util.Deque;\n\nclass Solution {\n    public long minimumOperations(int[] nums, int[] target) {\n        int n = nums.length;\n        long[] diff = new long[n];\n        for (int i = 0; i < n; i++) diff[i] = nums[i] - target[i];\n        long res = 0;\n        int start = 0;\n        while (start < n && diff[start] == 0) start++;\n        for (int i = start + 1; i < n; i++) {\n            if (diff[start] * diff[i] <= 0) {\n                if (diff[start] < 0) {\n                    for (int j = start; j < i; j++) diff[j] *= -1;\n                }\n                res += aux(diff, start, i - 1);\n                while (i < n && diff[i] == 0) i++;\n                start = i;\n            }\n        }\n        if (start != n) {\n            if (diff[start] < 0) {\n                for (int j = start; j < n; j++) diff[j] *= -1;\n            }\n            res += aux(diff, start, n - 1);\n        }\n        return res;\n    }\n\n    private long aux(long[] diff, int lo, int hi) {\n        Deque<Long> dq = new ArrayDeque<>();\n        long res = 0;\n        for (int i = lo; i <= hi; i++) {\n            while (!dq.isEmpty() && dq.peek() > diff[i]) {\n                res += dq.poll() - (dq.isEmpty() ? diff[i] : Math.max(dq.peek(), diff[i]));\n            }\n            if (dq.isEmpty() || dq.peek() != diff[i]) dq.push(diff[i]);\n        }\n        if (!dq.isEmpty()) res += dq.peek();\n        return res;\n    }\n}\n",
    "submit_ts": "1721532280",
    "subm_id": "1327982067"
}