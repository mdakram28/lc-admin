{
    "username": "qqwrv",
    "submission": "template <typename ValueType>\nclass RMQ {\n private:\n  using Operator = std::function<ValueType(const ValueType&, const ValueType&)>;\n\n  int n_;\n  std::vector<std::vector<ValueType>> a_;\n  std::vector<int> lg_;\n  Operator op_;\n\n public:\n  RMQ(const std::vector<ValueType>& a, const Operator& op)\n      : n_(a.size()), op_(op) {\n    lg_.resize(n_ + 1);\n    lg_[1] = 0;\n    for (int i = 2; i <= n_; ++i)\n      lg_[i] = lg_[i >> 1] + 1;\n\n    a_.resize(n_);\n    for (int i = 0; i < n_; ++i) {\n      a_[i].resize(lg_[n_] + 1);\n      a_[i][0] = a[i];\n    }\n    for (int j = 1; j <= lg_[n_]; ++j) {\n      int w = (1 << (j - 1));\n      for (int i = 0; i + w < n_; ++i) {\n        a_[i][j] = op_(a_[i][j - 1], a_[i + w][j - 1]);\n      }\n    }\n  }\n\n  const ValueType Query(int l, int r) const {\n    int k = lg_[r - l + 1];\n    return op_(a_[l][k], a_[r - (1 << k) + 1][k]);\n  }\n};\n\nclass Solution {\npublic:\n    int minimumDifference(vector<int>& a, int k) {\n        const int n = a.size();\n        \n        RMQ<int> rmq(a, [](int x, int y) {return x & y;});\n        \n        auto f = [&](int s) {\n            int l = s, r = n - 1, t = s;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (rmq.Query(s, mid) >= k)\n                    l = mid + 1, t = mid;\n                else\n                    r = mid - 1;\n            }\n            \n            return rmq.Query(s, t);\n        };\n        \n        auto g = [&](int s) {\n            int l = s, r = n - 1, t = n - 1;\n            while (l <= r) {\n                int mid = (l + r) >> 1;\n                if (rmq.Query(s, mid) < k)\n                    r = mid - 1, t = mid;\n                else\n                    l = mid + 1;\n            }\n            \n            return rmq.Query(s, t);\n        };\n        \n        int ans = INT_MAX;\n        for (int l = 0; l < n; ++l) {\n            ans = std::min(ans, std::abs(k - f(l)));\n            ans = std::min(ans, std::abs(k - g(l)));\n        }\n        \n        return ans;\n    }\n};",
    "submit_ts": "1717296871",
    "subm_id": "1274721422"
}