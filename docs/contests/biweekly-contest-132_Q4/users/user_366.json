{
    "username": "kartikeyy",
    "submission": "class Solution {\npublic:\n    // Function to get the upper bound index\n    int getNextIndex(vector<int>& indices, int currentIndex) {\n        return upper_bound(indices.begin(), indices.end(), currentIndex) - indices.begin();\n    }\n\n    // Recursive function with memoization\n    int findMaxLength(vector<int>& nums, int currentIndex, int remainingChanges, bool isStrict, map<int, vector<int>>& indicesMap, vector<vector<vector<int>>>& memo) {\n        if (currentIndex >= nums.size()) return 0;\n        if (remainingChanges < 0) return 0;\n        if (memo[currentIndex][remainingChanges][isStrict] != -1) return memo[currentIndex][remainingChanges][isStrict];\n\n        int maxLength = 0;\n        int nextIndexPos = getNextIndex(indicesMap[nums[currentIndex]], currentIndex);\n        if (nextIndexPos < indicesMap[nums[currentIndex]].size()) {\n            maxLength = max(maxLength, 1 + findMaxLength(nums, indicesMap[nums[currentIndex]][nextIndexPos], remainingChanges, true, indicesMap, memo));\n        } else {\n            maxLength = max(maxLength, 1 + findMaxLength(nums, nums.size(), remainingChanges, true, indicesMap, memo));\n        }\n        if (remainingChanges) {\n            maxLength = max(maxLength, 1 + findMaxLength(nums, currentIndex + 1, remainingChanges - 1, false, indicesMap, memo));\n        }\n        if (!isStrict) {\n            maxLength = max(maxLength, findMaxLength(nums, currentIndex + 1, remainingChanges, false, indicesMap, memo));\n        }\n        \n        return memo[currentIndex][remainingChanges][isStrict] = maxLength;\n    }\n\n    int maximumLength(vector<int>& nums, int k) {\n        map<int, vector<int>> indicesMap;\n        for (int i = 0; i < nums.size(); i++) {\n            indicesMap[nums[i]].push_back(i);\n        }\n        \n        vector<vector<vector<int>>> memo(nums.size(), vector<vector<int>>(k + 1, vector<int>(2, -1)));\n        return findMaxLength(nums, 0, k, false, indicesMap, memo);\n    }\n};",
    "submit_ts": 1717861923.0
}